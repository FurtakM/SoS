// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2046 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3330 0 0
// Action ;
  90: CALL 4822 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 3773 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 3773 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 3773 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 3773 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 3773 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 3773 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 3773 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 3773 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 3773 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 3773 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 3773 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 3773 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 64503 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 30
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PPUSH
1138: CALL_OW 69
1142: ST_TO_ADDR
// if tmp then
1143: LD_VAR 0 4
1147: IFFALSE 1269
// begin x := GetX ( tmp [ 1 ] ) ;
1149: LD_ADDR_VAR 0 5
1153: PUSH
1154: LD_VAR 0 4
1158: PUSH
1159: LD_INT 1
1161: ARRAY
1162: PPUSH
1163: CALL_OW 250
1167: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1168: LD_ADDR_VAR 0 6
1172: PUSH
1173: LD_VAR 0 4
1177: PUSH
1178: LD_INT 1
1180: ARRAY
1181: PPUSH
1182: CALL_OW 251
1186: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1187: LD_VAR 0 4
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_STRING epsilon
1198: PPUSH
1199: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1203: LD_ADDR_VAR 0 7
1207: PUSH
1208: LD_VAR 0 4
1212: PUSH
1213: LD_INT 1
1215: ARRAY
1216: PPUSH
1217: CALL_OW 274
1221: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1222: LD_VAR 0 7
1226: PPUSH
1227: LD_INT 1
1229: PPUSH
1230: LD_INT 3000
1232: PPUSH
1233: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1237: LD_VAR 0 7
1241: PPUSH
1242: LD_INT 2
1244: PPUSH
1245: LD_INT 500
1247: PPUSH
1248: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1252: LD_VAR 0 7
1256: PPUSH
1257: LD_INT 3
1259: PPUSH
1260: LD_INT 200
1262: PPUSH
1263: CALL_OW 277
// end else
1267: GO 1285
// begin x := 104 ;
1269: LD_ADDR_VAR 0 5
1273: PUSH
1274: LD_INT 104
1276: ST_TO_ADDR
// y := 32 ;
1277: LD_ADDR_VAR 0 6
1281: PUSH
1282: LD_INT 32
1284: ST_TO_ADDR
// end ; uc_side := 1 ;
1285: LD_ADDR_OWVAR 20
1289: PUSH
1290: LD_INT 1
1292: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1293: LD_ADDR_EXP 1
1297: PUSH
1298: LD_STRING JMM
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: CALL 3600 0 2
1308: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1309: LD_ADDR_EXP 3
1313: PUSH
1314: LD_STRING Lisa
1316: PPUSH
1317: LD_INT 1
1319: PPUSH
1320: CALL 3600 0 2
1324: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1325: LD_ADDR_EXP 4
1329: PUSH
1330: LD_STRING Donaldson
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 3600 0 2
1340: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1341: LD_ADDR_EXP 5
1345: PUSH
1346: LD_STRING Bobby
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 3600 0 2
1356: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1357: LD_ADDR_EXP 6
1361: PUSH
1362: LD_STRING Cyrus
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: CALL 3600 0 2
1372: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1373: LD_ADDR_EXP 7
1377: PUSH
1378: LD_STRING Denis
1380: PPUSH
1381: LD_INT 1
1383: PPUSH
1384: CALL 3600 0 2
1388: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1389: LD_ADDR_EXP 8
1393: PUSH
1394: LD_STRING Brown
1396: PPUSH
1397: LD_INT 1
1399: PPUSH
1400: CALL 3600 0 2
1404: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1405: LD_ADDR_EXP 9
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 3600 0 2
1420: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1421: LD_ADDR_EXP 10
1425: PUSH
1426: LD_STRING Houten
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: CALL 3600 0 2
1436: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1437: LD_ADDR_EXP 11
1441: PUSH
1442: LD_STRING Cornell
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: CALL 3600 0 2
1452: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1453: LD_ADDR_EXP 12
1457: PUSH
1458: LD_STRING Gary
1460: PPUSH
1461: LD_INT 1
1463: PPUSH
1464: CALL 3600 0 2
1468: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1469: LD_ADDR_EXP 13
1473: PUSH
1474: LD_STRING Frank
1476: PPUSH
1477: LD_INT 1
1479: PPUSH
1480: CALL 3600 0 2
1484: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1485: LD_ADDR_EXP 14
1489: PUSH
1490: LD_STRING Kikuchi
1492: PPUSH
1493: LD_INT 1
1495: PPUSH
1496: CALL 3600 0 2
1500: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1501: LD_ADDR_EXP 15
1505: PUSH
1506: LD_STRING Stevens
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL 3600 0 2
1516: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1517: LD_ADDR_EXP 2
1521: PUSH
1522: LD_STRING Powell
1524: PPUSH
1525: LD_INT 0
1527: PPUSH
1528: CALL 3600 0 2
1532: ST_TO_ADDR
// PlaceUnitXYR ( JMM , x , y , 4 , false ) ;
1533: LD_EXP 1
1537: PPUSH
1538: LD_VAR 0 5
1542: PPUSH
1543: LD_VAR 0 6
1547: PPUSH
1548: LD_INT 4
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 50
// PlaceUnitXYR ( Stevens , x , y , 4 , false ) ;
1558: LD_EXP 15
1562: PPUSH
1563: LD_VAR 0 5
1567: PPUSH
1568: LD_VAR 0 6
1572: PPUSH
1573: LD_INT 4
1575: PPUSH
1576: LD_INT 0
1578: PPUSH
1579: CALL_OW 50
// PlaceUnitXYR ( Lisa , x , y , 35 , false ) ;
1583: LD_EXP 3
1587: PPUSH
1588: LD_VAR 0 5
1592: PPUSH
1593: LD_VAR 0 6
1597: PPUSH
1598: LD_INT 35
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 50
// PlaceUnitXYR ( Donaldson , x , y , 35 , false ) ;
1608: LD_EXP 4
1612: PPUSH
1613: LD_VAR 0 5
1617: PPUSH
1618: LD_VAR 0 6
1622: PPUSH
1623: LD_INT 35
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 50
// PlaceUnitXYR ( Bobby , x , y , 35 , false ) ;
1633: LD_EXP 5
1637: PPUSH
1638: LD_VAR 0 5
1642: PPUSH
1643: LD_VAR 0 6
1647: PPUSH
1648: LD_INT 35
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 50
// PlaceUnitXYR ( Cyrus , x , y , 35 , false ) ;
1658: LD_EXP 6
1662: PPUSH
1663: LD_VAR 0 5
1667: PPUSH
1668: LD_VAR 0 6
1672: PPUSH
1673: LD_INT 35
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL_OW 50
// PlaceUnitXYR ( Denis , x , y , 35 , false ) ;
1683: LD_EXP 7
1687: PPUSH
1688: LD_VAR 0 5
1692: PPUSH
1693: LD_VAR 0 6
1697: PPUSH
1698: LD_INT 35
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 50
// PlaceUnitXYR ( Brown , x , y , 35 , false ) ;
1708: LD_EXP 8
1712: PPUSH
1713: LD_VAR 0 5
1717: PPUSH
1718: LD_VAR 0 6
1722: PPUSH
1723: LD_INT 35
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: CALL_OW 50
// PlaceUnitXYR ( Gladstone , x , y , 35 , false ) ;
1733: LD_EXP 9
1737: PPUSH
1738: LD_VAR 0 5
1742: PPUSH
1743: LD_VAR 0 6
1747: PPUSH
1748: LD_INT 35
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 50
// PlaceUnitXYR ( Houten , x , y , 35 , false ) ;
1758: LD_EXP 10
1762: PPUSH
1763: LD_VAR 0 5
1767: PPUSH
1768: LD_VAR 0 6
1772: PPUSH
1773: LD_INT 35
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 50
// PlaceUnitXYR ( Cornel , x , y , 35 , false ) ;
1783: LD_EXP 11
1787: PPUSH
1788: LD_VAR 0 5
1792: PPUSH
1793: LD_VAR 0 6
1797: PPUSH
1798: LD_INT 35
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 50
// PlaceUnitXYR ( Gary , x , y , 35 , false ) ;
1808: LD_EXP 12
1812: PPUSH
1813: LD_VAR 0 5
1817: PPUSH
1818: LD_VAR 0 6
1822: PPUSH
1823: LD_INT 35
1825: PPUSH
1826: LD_INT 0
1828: PPUSH
1829: CALL_OW 50
// PlaceUnitXYR ( Frank , x , y , 35 , false ) ;
1833: LD_EXP 13
1837: PPUSH
1838: LD_VAR 0 5
1842: PPUSH
1843: LD_VAR 0 6
1847: PPUSH
1848: LD_INT 35
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , x , y , 35 , false ) ;
1858: LD_EXP 14
1862: PPUSH
1863: LD_VAR 0 5
1867: PPUSH
1868: LD_VAR 0 6
1872: PPUSH
1873: LD_INT 35
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 50
// SetClass ( JMM , 1 ) ;
1883: LD_EXP 1
1887: PPUSH
1888: LD_INT 1
1890: PPUSH
1891: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1895: LD_ADDR_EXP 16
1899: PUSH
1900: LD_STRING 12_other_survivors
1902: PPUSH
1903: CALL_OW 31
1907: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1908: LD_ADDR_EXP 17
1912: PUSH
1913: LD_STRING 12_others
1915: PPUSH
1916: CALL_OW 31
1920: ST_TO_ADDR
// for i in others11 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: LD_EXP 17
1930: PUSH
1931: FOR_IN
1932: IFFALSE 1979
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1934: LD_VAR 0 2
1938: PPUSH
1939: LD_VAR 0 4
1943: PUSH
1944: LD_INT 1
1946: ARRAY
1947: PPUSH
1948: CALL_OW 250
1952: PPUSH
1953: LD_VAR 0 4
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: CALL_OW 251
1966: PPUSH
1967: LD_INT 15
1969: PPUSH
1970: LD_INT 0
1972: PPUSH
1973: CALL_OW 50
1977: GO 1931
1979: POP
1980: POP
// for i in others12 do
1981: LD_ADDR_VAR 0 2
1985: PUSH
1986: LD_EXP 16
1990: PUSH
1991: FOR_IN
1992: IFFALSE 2039
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1994: LD_VAR 0 2
1998: PPUSH
1999: LD_VAR 0 4
2003: PUSH
2004: LD_INT 1
2006: ARRAY
2007: PPUSH
2008: CALL_OW 250
2012: PPUSH
2013: LD_VAR 0 4
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: CALL_OW 251
2026: PPUSH
2027: LD_INT 15
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 50
2037: GO 1991
2039: POP
2040: POP
// end ;
2041: LD_VAR 0 1
2045: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2046: LD_INT 0
2048: PPUSH
2049: PPUSH
2050: PPUSH
2051: PPUSH
2052: PPUSH
2053: PPUSH
2054: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2055: LD_INT 113
2057: PPUSH
2058: LD_INT 50
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2068: LD_INT 104
2070: PPUSH
2071: LD_INT 24
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2081: LD_INT 43
2083: PPUSH
2084: LD_INT 79
2086: PPUSH
2087: LD_INT 1
2089: PPUSH
2090: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2094: LD_INT 43
2096: PPUSH
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2107: LD_INT 99
2109: PPUSH
2110: LD_INT 114
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2120: LD_INT 103
2122: PPUSH
2123: LD_INT 114
2125: PPUSH
2126: LD_INT 1
2128: PPUSH
2129: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2133: LD_INT 152
2135: PPUSH
2136: LD_INT 85
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2146: LD_INT 156
2148: PPUSH
2149: LD_INT 92
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2159: LD_ADDR_VAR 0 2
2163: PUSH
2164: LD_STRING 10_EpsilonBase
2166: PPUSH
2167: EMPTY
2168: PPUSH
2169: CALL_OW 30
2173: ST_TO_ADDR
// if not blist then
2174: LD_VAR 0 2
2178: NOT
2179: IFFALSE 2183
// exit ;
2181: GO 3325
// for i in blist do
2183: LD_ADDR_VAR 0 3
2187: PUSH
2188: LD_VAR 0 2
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2234
// if i [ 1 ] = 0 or i [ 1 ] = 1 then
2196: LD_VAR 0 3
2200: PUSH
2201: LD_INT 1
2203: ARRAY
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: PUSH
2209: LD_VAR 0 3
2213: PUSH
2214: LD_INT 1
2216: ARRAY
2217: PUSH
2218: LD_INT 1
2220: EQUAL
2221: OR
2222: IFFALSE 2232
// baseCorrect := 1 ;
2224: LD_ADDR_VAR 0 6
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
2232: GO 2193
2234: POP
2235: POP
// if baseCorrect = 0 then
2236: LD_VAR 0 6
2240: PUSH
2241: LD_INT 0
2243: EQUAL
2244: IFFALSE 2951
// begin uc_side := 1 ;
2246: LD_ADDR_OWVAR 20
2250: PUSH
2251: LD_INT 1
2253: ST_TO_ADDR
// uc_nation := 1 ;
2254: LD_ADDR_OWVAR 21
2258: PUSH
2259: LD_INT 1
2261: ST_TO_ADDR
// bc_level := 10 ;
2262: LD_ADDR_OWVAR 43
2266: PUSH
2267: LD_INT 10
2269: ST_TO_ADDR
// bc_type := b_warehouse ;
2270: LD_ADDR_OWVAR 42
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2278: LD_INT 99
2280: PPUSH
2281: LD_INT 24
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL_OW 47
// bc_type := b_bunker ;
2291: LD_ADDR_OWVAR 42
2295: PUSH
2296: LD_INT 32
2298: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2299: LD_ADDR_VAR 0 7
2303: PUSH
2304: LD_INT 124
2306: PPUSH
2307: LD_INT 42
2309: PPUSH
2310: LD_INT 4
2312: PPUSH
2313: CALL_OW 47
2317: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2318: LD_VAR 0 7
2322: PPUSH
2323: LD_INT 4
2325: PUSH
2326: LD_INT 5
2328: PUSH
2329: LD_INT 6
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 3
2342: PPUSH
2343: CALL_OW 12
2347: ARRAY
2348: PPUSH
2349: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2353: LD_ADDR_VAR 0 7
2357: PUSH
2358: LD_INT 111
2360: PPUSH
2361: LD_INT 16
2363: PPUSH
2364: LD_INT 4
2366: PPUSH
2367: CALL_OW 47
2371: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2372: LD_VAR 0 7
2376: PPUSH
2377: LD_INT 4
2379: PUSH
2380: LD_INT 5
2382: PUSH
2383: LD_INT 6
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: LIST
2390: PUSH
2391: LD_INT 1
2393: PPUSH
2394: LD_INT 3
2396: PPUSH
2397: CALL_OW 12
2401: ARRAY
2402: PPUSH
2403: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2407: LD_ADDR_VAR 0 7
2411: PUSH
2412: LD_INT 113
2414: PPUSH
2415: LD_INT 21
2417: PPUSH
2418: LD_INT 4
2420: PPUSH
2421: CALL_OW 47
2425: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2426: LD_VAR 0 7
2430: PPUSH
2431: LD_INT 4
2433: PUSH
2434: LD_INT 5
2436: PUSH
2437: LD_INT 6
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 3
2450: PPUSH
2451: CALL_OW 12
2455: ARRAY
2456: PPUSH
2457: CALL_OW 431
// bc_type := 33 ;
2461: LD_ADDR_OWVAR 42
2465: PUSH
2466: LD_INT 33
2468: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2469: LD_ADDR_VAR 0 7
2473: PUSH
2474: LD_INT 95
2476: PPUSH
2477: LD_INT 41
2479: PPUSH
2480: LD_INT 1
2482: PPUSH
2483: CALL_OW 47
2487: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2488: LD_VAR 0 7
2492: PPUSH
2493: LD_INT 4
2495: PUSH
2496: LD_INT 5
2498: PUSH
2499: LD_INT 6
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 1
2509: PPUSH
2510: LD_INT 3
2512: PPUSH
2513: CALL_OW 12
2517: ARRAY
2518: PPUSH
2519: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2523: LD_ADDR_VAR 0 7
2527: PUSH
2528: LD_INT 97
2530: PPUSH
2531: LD_INT 48
2533: PPUSH
2534: LD_INT 1
2536: PPUSH
2537: CALL_OW 47
2541: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2542: LD_VAR 0 7
2546: PPUSH
2547: LD_INT 4
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 6
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 1
2563: PPUSH
2564: LD_INT 3
2566: PPUSH
2567: CALL_OW 12
2571: ARRAY
2572: PPUSH
2573: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2577: LD_ADDR_VAR 0 7
2581: PUSH
2582: LD_INT 86
2584: PPUSH
2585: LD_INT 19
2587: PPUSH
2588: LD_INT 1
2590: PPUSH
2591: CALL_OW 47
2595: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2596: LD_VAR 0 7
2600: PPUSH
2601: LD_INT 4
2603: PUSH
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: PUSH
2615: LD_INT 1
2617: PPUSH
2618: LD_INT 3
2620: PPUSH
2621: CALL_OW 12
2625: ARRAY
2626: PPUSH
2627: CALL_OW 431
// bc_type := 30 ;
2631: LD_ADDR_OWVAR 42
2635: PUSH
2636: LD_INT 30
2638: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2639: LD_INT 104
2641: PPUSH
2642: LD_INT 24
2644: PPUSH
2645: LD_INT 1
2647: PPUSH
2648: CALL_OW 47
// bc_type := 29 ;
2652: LD_ADDR_OWVAR 42
2656: PUSH
2657: LD_INT 29
2659: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2660: LD_INT 113
2662: PPUSH
2663: LD_INT 50
2665: PPUSH
2666: LD_INT 3
2668: PPUSH
2669: CALL_OW 47
// bc_type := 27 ;
2673: LD_ADDR_OWVAR 42
2677: PUSH
2678: LD_INT 27
2680: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2681: LD_INT 98
2683: PPUSH
2684: LD_INT 26
2686: PPUSH
2687: LD_INT 2
2689: PPUSH
2690: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2694: LD_INT 95
2696: PPUSH
2697: LD_INT 23
2699: PPUSH
2700: LD_INT 3
2702: PPUSH
2703: CALL_OW 47
// bc_type := 28 ;
2707: LD_ADDR_OWVAR 42
2711: PUSH
2712: LD_INT 28
2714: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2715: LD_INT 107
2717: PPUSH
2718: LD_INT 32
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: CALL_OW 47
// bc_type := 3 ;
2728: LD_ADDR_OWVAR 42
2732: PUSH
2733: LD_INT 3
2735: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2736: LD_INT 106
2738: PPUSH
2739: LD_INT 42
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 47
// bc_type := 16 ;
2749: LD_ADDR_OWVAR 42
2753: PUSH
2754: LD_INT 16
2756: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2757: LD_INT 109
2759: PPUSH
2760: LD_INT 45
2762: PPUSH
2763: LD_INT 5
2765: PPUSH
2766: CALL_OW 47
// bc_type := 17 ;
2770: LD_ADDR_OWVAR 42
2774: PUSH
2775: LD_INT 17
2777: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2778: LD_INT 106
2780: PPUSH
2781: LD_INT 46
2783: PPUSH
2784: LD_INT 0
2786: PPUSH
2787: CALL_OW 47
// bc_type := 19 ;
2791: LD_ADDR_OWVAR 42
2795: PUSH
2796: LD_INT 19
2798: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2799: LD_INT 103
2801: PPUSH
2802: LD_INT 42
2804: PPUSH
2805: LD_INT 1
2807: PPUSH
2808: CALL_OW 47
// bc_type := 21 ;
2812: LD_ADDR_OWVAR 42
2816: PUSH
2817: LD_INT 21
2819: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2820: LD_INT 110
2822: PPUSH
2823: LD_INT 42
2825: PPUSH
2826: LD_INT 4
2828: PPUSH
2829: CALL_OW 47
// bc_type := 5 ;
2833: LD_ADDR_OWVAR 42
2837: PUSH
2838: LD_INT 5
2840: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2841: LD_INT 114
2843: PPUSH
2844: LD_INT 55
2846: PPUSH
2847: LD_INT 5
2849: PPUSH
2850: CALL_OW 47
// bc_type := 36 ;
2854: LD_ADDR_OWVAR 42
2858: PUSH
2859: LD_INT 36
2861: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2862: LD_INT 96
2864: PPUSH
2865: LD_INT 28
2867: PPUSH
2868: LD_INT 2
2870: PPUSH
2871: CALL_OW 47
// bc_type := b_lab_full ;
2875: LD_ADDR_OWVAR 42
2879: PUSH
2880: LD_INT 8
2882: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2883: LD_ADDR_OWVAR 44
2887: PUSH
2888: LD_INT 15
2890: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2891: LD_ADDR_OWVAR 45
2895: PUSH
2896: LD_INT 11
2898: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2899: LD_INT 116
2901: PPUSH
2902: LD_INT 38
2904: PPUSH
2905: LD_INT 4
2907: PPUSH
2908: CALL_OW 47
// bc_type := b_lab_full ;
2912: LD_ADDR_OWVAR 42
2916: PUSH
2917: LD_INT 8
2919: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2920: LD_ADDR_OWVAR 44
2924: PUSH
2925: LD_INT 10
2927: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2928: LD_ADDR_OWVAR 45
2932: PUSH
2933: LD_INT 12
2935: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2936: LD_INT 112
2938: PPUSH
2939: LD_INT 29
2941: PPUSH
2942: LD_INT 4
2944: PPUSH
2945: CALL_OW 47
// end else
2949: GO 3146
// begin uc_side := 1 ;
2951: LD_ADDR_OWVAR 20
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// uc_nation := 1 ;
2959: LD_ADDR_OWVAR 21
2963: PUSH
2964: LD_INT 1
2966: ST_TO_ADDR
// for i in blist do
2967: LD_ADDR_VAR 0 3
2971: PUSH
2972: LD_VAR 0 2
2976: PUSH
2977: FOR_IN
2978: IFFALSE 3144
// begin bc_type := i [ 1 ] ;
2980: LD_ADDR_OWVAR 42
2984: PUSH
2985: LD_VAR 0 3
2989: PUSH
2990: LD_INT 1
2992: ARRAY
2993: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2994: LD_ADDR_OWVAR 43
2998: PUSH
2999: LD_VAR 0 3
3003: PUSH
3004: LD_INT 5
3006: ARRAY
3007: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3008: LD_VAR 0 3
3012: PUSH
3013: LD_INT 1
3015: ARRAY
3016: PUSH
3017: LD_INT 7
3019: PUSH
3020: LD_INT 8
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: IN
3027: IFFALSE 3057
// begin bc_kind1 := i [ 7 ] ;
3029: LD_ADDR_OWVAR 44
3033: PUSH
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 7
3041: ARRAY
3042: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3043: LD_ADDR_OWVAR 45
3047: PUSH
3048: LD_VAR 0 3
3052: PUSH
3053: LD_INT 8
3055: ARRAY
3056: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3057: LD_ADDR_VAR 0 4
3061: PUSH
3062: LD_VAR 0 3
3066: PUSH
3067: LD_INT 2
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 3
3075: PUSH
3076: LD_INT 3
3078: ARRAY
3079: PPUSH
3080: LD_VAR 0 3
3084: PUSH
3085: LD_INT 4
3087: ARRAY
3088: PPUSH
3089: CALL_OW 47
3093: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3094: LD_VAR 0 4
3098: PPUSH
3099: CALL_OW 266
3103: PUSH
3104: LD_INT 32
3106: EQUAL
3107: PUSH
3108: LD_VAR 0 4
3112: PPUSH
3113: CALL_OW 266
3117: PUSH
3118: LD_INT 33
3120: EQUAL
3121: OR
3122: IFFALSE 3142
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3124: LD_VAR 0 4
3128: PPUSH
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 7
3136: ARRAY
3137: PPUSH
3138: CALL_OW 431
// end ;
3142: GO 2977
3144: POP
3145: POP
// end ; uc_side := 1 ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_INT 1
3153: ST_TO_ADDR
// uc_nation := 1 ;
3154: LD_ADDR_OWVAR 21
3158: PUSH
3159: LD_INT 1
3161: ST_TO_ADDR
// for i := 1 to 8 do
3162: LD_ADDR_VAR 0 3
3166: PUSH
3167: DOUBLE
3168: LD_INT 1
3170: DEC
3171: ST_TO_ADDR
3172: LD_INT 8
3174: PUSH
3175: FOR_TO
3176: IFFALSE 3323
// begin vc_chassis := [ us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3178: LD_ADDR_OWVAR 37
3182: PUSH
3183: LD_INT 5
3185: PUSH
3186: LD_INT 3
3188: PUSH
3189: LD_INT 4
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 1
3199: PPUSH
3200: LD_INT 3
3202: PPUSH
3203: CALL_OW 12
3207: ARRAY
3208: ST_TO_ADDR
// vc_engine := engine_siberite ;
3209: LD_ADDR_OWVAR 39
3213: PUSH
3214: LD_INT 3
3216: ST_TO_ADDR
// vc_control := control_manual ;
3217: LD_ADDR_OWVAR 38
3221: PUSH
3222: LD_INT 1
3224: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_double_gun , us_laser ] [ i mod 6 + 1 ] ;
3225: LD_ADDR_OWVAR 40
3229: PUSH
3230: LD_INT 7
3232: PUSH
3233: LD_INT 9
3235: PUSH
3236: LD_INT 12
3238: PUSH
3239: LD_INT 13
3241: PUSH
3242: LD_INT 5
3244: PUSH
3245: LD_INT 9
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_VAR 0 3
3260: PUSH
3261: LD_INT 6
3263: MOD
3264: PUSH
3265: LD_INT 1
3267: PLUS
3268: ARRAY
3269: ST_TO_ADDR
// un := CreateVehicle ;
3270: LD_ADDR_VAR 0 5
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3280: LD_VAR 0 5
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 5
3290: PPUSH
3291: CALL_OW 12
3295: PPUSH
3296: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3300: LD_VAR 0 5
3304: PPUSH
3305: LD_INT 78
3307: PPUSH
3308: LD_INT 31
3310: PPUSH
3311: LD_INT 8
3313: PPUSH
3314: LD_INT 0
3316: PPUSH
3317: CALL_OW 50
// end ;
3321: GO 3175
3323: POP
3324: POP
// end ;
3325: LD_VAR 0 1
3329: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3330: LD_INT 0
3332: PPUSH
3333: PPUSH
3334: PPUSH
3335: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3336: LD_INT 22
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 21
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: PUSH
3365: LD_INT 6
3367: LESS
3368: IFFALSE 3595
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 1
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 2
3387: PUSH
3388: LD_INT 30
3390: PUSH
3391: LD_INT 0
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 30
3400: PUSH
3401: LD_INT 1
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// uc_side := 1 ;
3422: LD_ADDR_OWVAR 20
3426: PUSH
3427: LD_INT 1
3429: ST_TO_ADDR
// uc_nation := 1 ;
3430: LD_ADDR_OWVAR 21
3434: PUSH
3435: LD_INT 1
3437: ST_TO_ADDR
// for i := 1 to 6 do
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 6
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3593
// begin hc_gallery :=  ;
3454: LD_ADDR_OWVAR 33
3458: PUSH
3459: LD_STRING 
3461: ST_TO_ADDR
// hc_name :=  ;
3462: LD_ADDR_OWVAR 26
3466: PUSH
3467: LD_STRING 
3469: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3470: LD_INT 0
3472: PPUSH
3473: LD_INT 1
3475: PUSH
3476: LD_INT 2
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: LD_INT 4
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 4
3496: PPUSH
3497: CALL_OW 12
3501: ARRAY
3502: PPUSH
3503: LD_INT 5
3505: PPUSH
3506: LD_INT 8
3508: PPUSH
3509: CALL_OW 12
3513: PPUSH
3514: CALL_OW 380
// un := CreateHuman ;
3518: LD_ADDR_VAR 0 3
3522: PUSH
3523: CALL_OW 44
3527: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3528: LD_ADDR_EXP 18
3532: PUSH
3533: LD_EXP 18
3537: PPUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: CALL 61045 0 2
3547: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3548: LD_VAR 0 3
3552: PPUSH
3553: LD_VAR 0 4
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 250
3566: PPUSH
3567: LD_VAR 0 4
3571: PUSH
3572: LD_INT 1
3574: ARRAY
3575: PPUSH
3576: CALL_OW 251
3580: PPUSH
3581: LD_INT 15
3583: PPUSH
3584: LD_INT 0
3586: PPUSH
3587: CALL_OW 50
// end ;
3591: GO 3451
3593: POP
3594: POP
// end ; end ; end_of_file
3595: LD_VAR 0 1
3599: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
// if existMode then
3604: LD_VAR 0 2
3608: IFFALSE 3743
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3610: LD_EXP 21
3614: PUSH
3615: LD_VAR 0 1
3619: STR
3620: PPUSH
3621: CALL_OW 28
3625: IFFALSE 3650
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3627: LD_ADDR_VAR 0 4
3631: PUSH
3632: LD_EXP 21
3636: PUSH
3637: LD_VAR 0 1
3641: STR
3642: PPUSH
3643: CALL_OW 34
3647: ST_TO_ADDR
3648: GO 3741
// begin if TestCharacters ( 11_ & ident ) then
3650: LD_STRING 11_
3652: PUSH
3653: LD_VAR 0 1
3657: STR
3658: PPUSH
3659: CALL_OW 28
3663: IFFALSE 3686
// unit := CreateCharacter ( 11_ & ident ) else
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_STRING 11_
3672: PUSH
3673: LD_VAR 0 1
3677: STR
3678: PPUSH
3679: CALL_OW 34
3683: ST_TO_ADDR
3684: GO 3741
// if TestCharacters ( 10c_ & ident ) then
3686: LD_STRING 10c_
3688: PUSH
3689: LD_VAR 0 1
3693: STR
3694: PPUSH
3695: CALL_OW 28
3699: IFFALSE 3722
// unit := CreateCharacter ( 10c_ & ident ) else
3701: LD_ADDR_VAR 0 4
3705: PUSH
3706: LD_STRING 10c_
3708: PUSH
3709: LD_VAR 0 1
3713: STR
3714: PPUSH
3715: CALL_OW 34
3719: ST_TO_ADDR
3720: GO 3741
// unit := CreateCharacter ( 10_ & ident ) ;
3722: LD_ADDR_VAR 0 4
3726: PUSH
3727: LD_STRING 10_
3729: PUSH
3730: LD_VAR 0 1
3734: STR
3735: PPUSH
3736: CALL_OW 34
3740: ST_TO_ADDR
// end ; end else
3741: GO 3758
// unit := NewCharacter ( ident ) ;
3743: LD_ADDR_VAR 0 4
3747: PUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: CALL_OW 25
3757: ST_TO_ADDR
// result := unit ;
3758: LD_ADDR_VAR 0 3
3762: PUSH
3763: LD_VAR 0 4
3767: ST_TO_ADDR
// end ;
3768: LD_VAR 0 3
3772: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
3773: LD_INT 0
3775: PPUSH
// if unit in selectedTab then
3776: LD_VAR 0 1
3780: PUSH
3781: LD_VAR 0 3
3785: IN
3786: IFFALSE 3808
// SaveCharacters ( unit , 13c_ & unitString ) else
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_STRING 13c_
3795: PUSH
3796: LD_VAR 0 2
3800: STR
3801: PPUSH
3802: CALL_OW 38
3806: GO 3826
// SaveCharacters ( unit , 13s_ & unitString ) ;
3808: LD_VAR 0 1
3812: PPUSH
3813: LD_STRING 13s_
3815: PUSH
3816: LD_VAR 0 2
3820: STR
3821: PPUSH
3822: CALL_OW 38
// end ;
3826: LD_VAR 0 4
3830: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
3831: LD_INT 0
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
// selected := [ ] ;
3837: LD_ADDR_EXP 22
3841: PUSH
3842: EMPTY
3843: ST_TO_ADDR
// othersSelect := [ ] ;
3844: LD_ADDR_EXP 23
3848: PUSH
3849: EMPTY
3850: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: LD_EXP 3
3860: PUSH
3861: LD_EXP 4
3865: PUSH
3866: LD_EXP 5
3870: PUSH
3871: LD_EXP 6
3875: PUSH
3876: LD_EXP 8
3880: PUSH
3881: LD_EXP 9
3885: PUSH
3886: LD_EXP 10
3890: PUSH
3891: LD_EXP 11
3895: PUSH
3896: LD_EXP 12
3900: PUSH
3901: LD_EXP 13
3905: PUSH
3906: LD_EXP 14
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: ST_TO_ADDR
// tmp := tmp ^ others11 ;
3924: LD_ADDR_VAR 0 3
3928: PUSH
3929: LD_VAR 0 3
3933: PUSH
3934: LD_EXP 17
3938: ADD
3939: ST_TO_ADDR
// tmp := tmp ^ others12 ;
3940: LD_ADDR_VAR 0 3
3944: PUSH
3945: LD_VAR 0 3
3949: PUSH
3950: LD_EXP 16
3954: ADD
3955: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
3956: LD_ADDR_VAR 0 3
3960: PUSH
3961: LD_VAR 0 3
3965: PUSH
3966: LD_EXP 18
3970: ADD
3971: ST_TO_ADDR
// for i in tmp do
3972: LD_ADDR_VAR 0 2
3976: PUSH
3977: LD_VAR 0 3
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4022
// if GetClass ( i ) = 8 then
3985: LD_VAR 0 2
3989: PPUSH
3990: CALL_OW 257
3994: PUSH
3995: LD_INT 8
3997: EQUAL
3998: IFFALSE 4020
// SetClass ( i , rand ( 1 , 4 ) ) ;
4000: LD_VAR 0 2
4004: PPUSH
4005: LD_INT 1
4007: PPUSH
4008: LD_INT 4
4010: PPUSH
4011: CALL_OW 12
4015: PPUSH
4016: CALL_OW 336
4020: GO 3982
4022: POP
4023: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4024: LD_ADDR_EXP 22
4028: PUSH
4029: LD_STRING 1
4031: PPUSH
4032: LD_INT 6
4034: PPUSH
4035: LD_INT 6
4037: PPUSH
4038: LD_INT -5
4040: PUSH
4041: LD_EXP 1
4045: PUSH
4046: LD_EXP 15
4050: PUSH
4051: LD_INT -2
4053: PUSH
4054: LD_INT -3
4056: PUSH
4057: LD_INT -5
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 3
4072: ADD
4073: PUSH
4074: LD_INT -6
4076: PUSH
4077: LD_INT -4
4079: PUSH
4080: LD_EXP 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: LIST
4089: ADD
4090: PPUSH
4091: LD_INT 1
4093: PUSH
4094: LD_INT 0
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: LD_INT 2
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: LD_INT 3
4113: PUSH
4114: LD_INT 0
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 4
4123: PUSH
4124: LD_INT 2
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: LD_INT 5
4133: PUSH
4134: LD_INT 0
4136: PUSH
4137: LD_INT 2
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 42
4156: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4157: LD_ADDR_EXP 23
4161: PUSH
4162: LD_EXP 22
4166: PUSH
4167: LD_EXP 3
4171: PUSH
4172: LD_EXP 4
4176: PUSH
4177: LD_EXP 5
4181: PUSH
4182: LD_EXP 6
4186: PUSH
4187: LD_EXP 7
4191: PUSH
4192: LD_EXP 8
4196: PUSH
4197: LD_EXP 9
4201: PUSH
4202: LD_EXP 10
4206: PUSH
4207: LD_EXP 11
4211: PUSH
4212: LD_EXP 12
4216: PUSH
4217: LD_EXP 13
4221: PUSH
4222: LD_EXP 14
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: DIFF
4241: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 3
4251: PUSH
4252: LD_EXP 22
4256: DIFF
4257: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4258: LD_ADDR_VAR 0 4
4262: PUSH
4263: LD_VAR 0 4
4267: PUSH
4268: LD_EXP 3
4272: PUSH
4273: LD_EXP 4
4277: PUSH
4278: LD_EXP 5
4282: PUSH
4283: LD_EXP 6
4287: PUSH
4288: LD_EXP 7
4292: PUSH
4293: LD_EXP 8
4297: PUSH
4298: LD_EXP 9
4302: PUSH
4303: LD_EXP 10
4307: PUSH
4308: LD_EXP 11
4312: PUSH
4313: LD_EXP 12
4317: PUSH
4318: LD_EXP 13
4322: PUSH
4323: LD_EXP 14
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: DIFF
4342: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4343: LD_VAR 0 4
4347: PPUSH
4348: LD_STRING 13s_others
4350: PPUSH
4351: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4355: LD_EXP 23
4359: PPUSH
4360: LD_STRING 13c_others
4362: PPUSH
4363: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4367: LD_EXP 1
4371: PPUSH
4372: LD_STRING 13c_JMM
4374: PPUSH
4375: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4379: LD_EXP 15
4383: PPUSH
4384: LD_STRING 13c_Stevens
4386: PPUSH
4387: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4391: LD_EXP 3
4395: PPUSH
4396: LD_STRING Lisa
4398: PPUSH
4399: LD_EXP 22
4403: PPUSH
4404: CALL 3773 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4408: LD_EXP 8
4412: PPUSH
4413: LD_STRING Brown
4415: PPUSH
4416: LD_EXP 22
4420: PPUSH
4421: CALL 3773 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4425: LD_EXP 4
4429: PPUSH
4430: LD_STRING Donaldson
4432: PPUSH
4433: LD_EXP 22
4437: PPUSH
4438: CALL 3773 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4442: LD_EXP 5
4446: PPUSH
4447: LD_STRING Bobby
4449: PPUSH
4450: LD_EXP 22
4454: PPUSH
4455: CALL 3773 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4459: LD_EXP 6
4463: PPUSH
4464: LD_STRING Cyrus
4466: PPUSH
4467: LD_EXP 22
4471: PPUSH
4472: CALL 3773 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4476: LD_EXP 7
4480: PPUSH
4481: LD_STRING Denis
4483: PPUSH
4484: LD_EXP 22
4488: PPUSH
4489: CALL 3773 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4493: LD_EXP 9
4497: PPUSH
4498: LD_STRING Gladstone
4500: PPUSH
4501: LD_EXP 22
4505: PPUSH
4506: CALL 3773 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4510: LD_EXP 10
4514: PPUSH
4515: LD_STRING Houten
4517: PPUSH
4518: LD_EXP 22
4522: PPUSH
4523: CALL 3773 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4527: LD_EXP 11
4531: PPUSH
4532: LD_STRING Cornel
4534: PPUSH
4535: LD_EXP 22
4539: PPUSH
4540: CALL 3773 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4544: LD_EXP 12
4548: PPUSH
4549: LD_STRING Gary
4551: PPUSH
4552: LD_EXP 22
4556: PPUSH
4557: CALL 3773 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
4561: LD_EXP 13
4565: PPUSH
4566: LD_STRING Frank
4568: PPUSH
4569: LD_EXP 22
4573: PPUSH
4574: CALL 3773 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
4578: LD_EXP 14
4582: PPUSH
4583: LD_STRING Kikuchi
4585: PPUSH
4586: LD_EXP 22
4590: PPUSH
4591: CALL 3773 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4595: LD_INT 22
4597: PUSH
4598: LD_INT 1
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 21
4607: PUSH
4608: LD_INT 1
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PPUSH
4619: CALL_OW 69
4623: PPUSH
4624: LD_INT 4
4626: PPUSH
4627: CALL_OW 235
// SetSide ( selected , 1 ) ;
4631: LD_EXP 22
4635: PPUSH
4636: LD_INT 1
4638: PPUSH
4639: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4643: LD_EXP 1
4647: PUSH
4648: LD_EXP 15
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PPUSH
4657: LD_INT 1
4659: PPUSH
4660: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , 4 ] ] ) do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: LD_INT 21
4671: PUSH
4672: LD_INT 1
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PPUSH
4693: CALL_OW 69
4697: PUSH
4698: FOR_IN
4699: IFFALSE 4712
// RemoveUnit ( i ) ;
4701: LD_VAR 0 2
4705: PPUSH
4706: CALL_OW 64
4710: GO 4698
4712: POP
4713: POP
// end ; end_of_file
4714: LD_VAR 0 1
4718: RET
// on Command ( comandid ) do var i ;
4719: LD_INT 0
4721: PPUSH
// begin if comandid = 65 then
4722: LD_VAR 0 1
4726: PUSH
4727: LD_INT 65
4729: EQUAL
4730: IFFALSE 4771
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4732: LD_ADDR_VAR 0 2
4736: PUSH
4737: LD_INT 22
4739: PUSH
4740: LD_INT 1
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PUSH
4755: FOR_IN
4756: IFFALSE 4769
// ComStop ( i ) ;
4758: LD_VAR 0 2
4762: PPUSH
4763: CALL_OW 141
4767: GO 4755
4769: POP
4770: POP
// end ;
4771: PPOPN 2
4773: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4774: LD_VAR 0 1
4778: PPUSH
4779: CALL 19341 0 1
// if un = JMM then
4783: LD_VAR 0 1
4787: PUSH
4788: LD_EXP 1
4792: EQUAL
4793: IFFALSE 4802
// YouLost ( JMM ) ;
4795: LD_STRING JMM
4797: PPUSH
4798: CALL_OW 104
// end ;
4802: PPOPN 1
4804: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
4805: LD_VAR 0 1
4809: PPUSH
4810: LD_VAR 0 2
4814: PPUSH
4815: CALL 19463 0 2
// end ; end_of_file
4819: PPOPN 2
4821: END
// export function Action ; begin
4822: LD_INT 0
4824: PPUSH
// InGameOn ;
4825: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
4829: LD_EXP 1
4833: PPUSH
4834: CALL_OW 87
// wait ( 0 0$1 ) ;
4838: LD_INT 35
4840: PPUSH
4841: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
4845: LD_EXP 1
4849: PPUSH
4850: LD_STRING D1-JMM-1
4852: PPUSH
4853: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
4857: LD_EXP 2
4861: PPUSH
4862: LD_STRING D1-Pow-1
4864: PPUSH
4865: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
4869: LD_EXP 2
4873: PPUSH
4874: LD_STRING D1-Pow-1a
4876: PPUSH
4877: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
4881: LD_EXP 2
4885: PPUSH
4886: LD_STRING D1-Pow-1b
4888: PPUSH
4889: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
4893: LD_EXP 2
4897: PPUSH
4898: LD_STRING D1-Pow-1c
4900: PPUSH
4901: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4905: LD_EXP 1
4909: PPUSH
4910: LD_STRING D1-JMM-2
4912: PPUSH
4913: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4917: LD_EXP 2
4921: PPUSH
4922: LD_STRING D1-Pow-2
4924: PPUSH
4925: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
4929: LD_EXP 1
4933: PPUSH
4934: LD_STRING D1-JMM-3
4936: PPUSH
4937: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
4941: LD_EXP 2
4945: PPUSH
4946: LD_STRING D1-Pow-3
4948: PPUSH
4949: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
4953: LD_EXP 1
4957: PPUSH
4958: LD_STRING D1-JMM-4
4960: PPUSH
4961: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
4965: LD_EXP 2
4969: PPUSH
4970: LD_STRING D1-Pow-4
4972: PPUSH
4973: CALL_OW 94
// SelectAndSaveCharacters ;
4977: CALL 3831 0 0
// InGameOff ;
4981: CALL_OW 9
// Query ( Q1 ) ;
4985: LD_STRING Q1
4987: PPUSH
4988: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4992: LD_INT 2
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL_OW 424
// end ; end_of_file
5002: LD_VAR 0 1
5006: RET
// every 0 0$1 do
5007: GO 5009
5009: DISABLE
// begin enable ;
5010: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5011: LD_STRING updateTimer(
5013: PUSH
5014: LD_OWVAR 1
5018: STR
5019: PUSH
5020: LD_STRING );
5022: STR
5023: PPUSH
5024: CALL_OW 559
// end ;
5028: END
// export function SOS_MapStart ( ) ; begin
5029: LD_INT 0
5031: PPUSH
// if streamModeActive then
5032: LD_EXP 24
5036: IFFALSE 5045
// DefineStreamItems ( true ) ;
5038: LD_INT 1
5040: PPUSH
5041: CALL 6695 0 1
// UpdateFactoryWaypoints ( ) ;
5045: CALL 20279 0 0
// end ;
5049: LD_VAR 0 1
5053: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5054: LD_INT 0
5056: PPUSH
// if p2 = 100 then
5057: LD_VAR 0 2
5061: PUSH
5062: LD_INT 100
5064: EQUAL
5065: IFFALSE 6068
// begin if not StreamModeActive then
5067: LD_EXP 24
5071: NOT
5072: IFFALSE 5082
// StreamModeActive := true ;
5074: LD_ADDR_EXP 24
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// if p3 = 0 then
5082: LD_VAR 0 3
5086: PUSH
5087: LD_INT 0
5089: EQUAL
5090: IFFALSE 5096
// InitStreamMode ;
5092: CALL 6231 0 0
// if p3 = 1 then
5096: LD_VAR 0 3
5100: PUSH
5101: LD_INT 1
5103: EQUAL
5104: IFFALSE 5114
// sRocket := true ;
5106: LD_ADDR_EXP 29
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// if p3 = 2 then
5114: LD_VAR 0 3
5118: PUSH
5119: LD_INT 2
5121: EQUAL
5122: IFFALSE 5132
// sSpeed := true ;
5124: LD_ADDR_EXP 28
5128: PUSH
5129: LD_INT 1
5131: ST_TO_ADDR
// if p3 = 3 then
5132: LD_VAR 0 3
5136: PUSH
5137: LD_INT 3
5139: EQUAL
5140: IFFALSE 5150
// sEngine := true ;
5142: LD_ADDR_EXP 30
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// if p3 = 4 then
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 4
5157: EQUAL
5158: IFFALSE 5168
// sSpec := true ;
5160: LD_ADDR_EXP 27
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// if p3 = 5 then
5168: LD_VAR 0 3
5172: PUSH
5173: LD_INT 5
5175: EQUAL
5176: IFFALSE 5186
// sLevel := true ;
5178: LD_ADDR_EXP 31
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// if p3 = 6 then
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 6
5193: EQUAL
5194: IFFALSE 5204
// sArmoury := true ;
5196: LD_ADDR_EXP 32
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// if p3 = 7 then
5204: LD_VAR 0 3
5208: PUSH
5209: LD_INT 7
5211: EQUAL
5212: IFFALSE 5222
// sRadar := true ;
5214: LD_ADDR_EXP 33
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// if p3 = 8 then
5222: LD_VAR 0 3
5226: PUSH
5227: LD_INT 8
5229: EQUAL
5230: IFFALSE 5240
// sBunker := true ;
5232: LD_ADDR_EXP 34
5236: PUSH
5237: LD_INT 1
5239: ST_TO_ADDR
// if p3 = 9 then
5240: LD_VAR 0 3
5244: PUSH
5245: LD_INT 9
5247: EQUAL
5248: IFFALSE 5258
// sHack := true ;
5250: LD_ADDR_EXP 35
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// if p3 = 10 then
5258: LD_VAR 0 3
5262: PUSH
5263: LD_INT 10
5265: EQUAL
5266: IFFALSE 5276
// sFire := true ;
5268: LD_ADDR_EXP 36
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// if p3 = 11 then
5276: LD_VAR 0 3
5280: PUSH
5281: LD_INT 11
5283: EQUAL
5284: IFFALSE 5294
// sRefresh := true ;
5286: LD_ADDR_EXP 37
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// if p3 = 12 then
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 12
5301: EQUAL
5302: IFFALSE 5312
// sExp := true ;
5304: LD_ADDR_EXP 38
5308: PUSH
5309: LD_INT 1
5311: ST_TO_ADDR
// if p3 = 13 then
5312: LD_VAR 0 3
5316: PUSH
5317: LD_INT 13
5319: EQUAL
5320: IFFALSE 5330
// sDepot := true ;
5322: LD_ADDR_EXP 39
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// if p3 = 14 then
5330: LD_VAR 0 3
5334: PUSH
5335: LD_INT 14
5337: EQUAL
5338: IFFALSE 5348
// sFlag := true ;
5340: LD_ADDR_EXP 40
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if p3 = 15 then
5348: LD_VAR 0 3
5352: PUSH
5353: LD_INT 15
5355: EQUAL
5356: IFFALSE 5366
// sKamikadze := true ;
5358: LD_ADDR_EXP 48
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// if p3 = 16 then
5366: LD_VAR 0 3
5370: PUSH
5371: LD_INT 16
5373: EQUAL
5374: IFFALSE 5384
// sTroll := true ;
5376: LD_ADDR_EXP 49
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// if p3 = 17 then
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 17
5391: EQUAL
5392: IFFALSE 5402
// sSlow := true ;
5394: LD_ADDR_EXP 50
5398: PUSH
5399: LD_INT 1
5401: ST_TO_ADDR
// if p3 = 18 then
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 18
5409: EQUAL
5410: IFFALSE 5420
// sLack := true ;
5412: LD_ADDR_EXP 51
5416: PUSH
5417: LD_INT 1
5419: ST_TO_ADDR
// if p3 = 19 then
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 19
5427: EQUAL
5428: IFFALSE 5438
// sTank := true ;
5430: LD_ADDR_EXP 53
5434: PUSH
5435: LD_INT 1
5437: ST_TO_ADDR
// if p3 = 20 then
5438: LD_VAR 0 3
5442: PUSH
5443: LD_INT 20
5445: EQUAL
5446: IFFALSE 5456
// sRemote := true ;
5448: LD_ADDR_EXP 54
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// if p3 = 21 then
5456: LD_VAR 0 3
5460: PUSH
5461: LD_INT 21
5463: EQUAL
5464: IFFALSE 5474
// sPowell := true ;
5466: LD_ADDR_EXP 55
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// if p3 = 22 then
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 22
5481: EQUAL
5482: IFFALSE 5492
// sTeleport := true ;
5484: LD_ADDR_EXP 58
5488: PUSH
5489: LD_INT 1
5491: ST_TO_ADDR
// if p3 = 23 then
5492: LD_VAR 0 3
5496: PUSH
5497: LD_INT 23
5499: EQUAL
5500: IFFALSE 5510
// sOilTower := true ;
5502: LD_ADDR_EXP 60
5506: PUSH
5507: LD_INT 1
5509: ST_TO_ADDR
// if p3 = 24 then
5510: LD_VAR 0 3
5514: PUSH
5515: LD_INT 24
5517: EQUAL
5518: IFFALSE 5528
// sShovel := true ;
5520: LD_ADDR_EXP 61
5524: PUSH
5525: LD_INT 1
5527: ST_TO_ADDR
// if p3 = 25 then
5528: LD_VAR 0 3
5532: PUSH
5533: LD_INT 25
5535: EQUAL
5536: IFFALSE 5546
// sSheik := true ;
5538: LD_ADDR_EXP 62
5542: PUSH
5543: LD_INT 1
5545: ST_TO_ADDR
// if p3 = 26 then
5546: LD_VAR 0 3
5550: PUSH
5551: LD_INT 26
5553: EQUAL
5554: IFFALSE 5564
// sEarthquake := true ;
5556: LD_ADDR_EXP 64
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// if p3 = 27 then
5564: LD_VAR 0 3
5568: PUSH
5569: LD_INT 27
5571: EQUAL
5572: IFFALSE 5582
// sAI := true ;
5574: LD_ADDR_EXP 65
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// if p3 = 28 then
5582: LD_VAR 0 3
5586: PUSH
5587: LD_INT 28
5589: EQUAL
5590: IFFALSE 5600
// sCargo := true ;
5592: LD_ADDR_EXP 68
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if p3 = 29 then
5600: LD_VAR 0 3
5604: PUSH
5605: LD_INT 29
5607: EQUAL
5608: IFFALSE 5618
// sDLaser := true ;
5610: LD_ADDR_EXP 69
5614: PUSH
5615: LD_INT 1
5617: ST_TO_ADDR
// if p3 = 30 then
5618: LD_VAR 0 3
5622: PUSH
5623: LD_INT 30
5625: EQUAL
5626: IFFALSE 5636
// sExchange := true ;
5628: LD_ADDR_EXP 70
5632: PUSH
5633: LD_INT 1
5635: ST_TO_ADDR
// if p3 = 31 then
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 31
5643: EQUAL
5644: IFFALSE 5654
// sFac := true ;
5646: LD_ADDR_EXP 71
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// if p3 = 32 then
5654: LD_VAR 0 3
5658: PUSH
5659: LD_INT 32
5661: EQUAL
5662: IFFALSE 5672
// sPower := true ;
5664: LD_ADDR_EXP 72
5668: PUSH
5669: LD_INT 1
5671: ST_TO_ADDR
// if p3 = 33 then
5672: LD_VAR 0 3
5676: PUSH
5677: LD_INT 33
5679: EQUAL
5680: IFFALSE 5690
// sRandom := true ;
5682: LD_ADDR_EXP 73
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// if p3 = 34 then
5690: LD_VAR 0 3
5694: PUSH
5695: LD_INT 34
5697: EQUAL
5698: IFFALSE 5708
// sShield := true ;
5700: LD_ADDR_EXP 74
5704: PUSH
5705: LD_INT 1
5707: ST_TO_ADDR
// if p3 = 35 then
5708: LD_VAR 0 3
5712: PUSH
5713: LD_INT 35
5715: EQUAL
5716: IFFALSE 5726
// sTime := true ;
5718: LD_ADDR_EXP 75
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// if p3 = 36 then
5726: LD_VAR 0 3
5730: PUSH
5731: LD_INT 36
5733: EQUAL
5734: IFFALSE 5744
// sTools := true ;
5736: LD_ADDR_EXP 76
5740: PUSH
5741: LD_INT 1
5743: ST_TO_ADDR
// if p3 = 101 then
5744: LD_VAR 0 3
5748: PUSH
5749: LD_INT 101
5751: EQUAL
5752: IFFALSE 5762
// sSold := true ;
5754: LD_ADDR_EXP 41
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// if p3 = 102 then
5762: LD_VAR 0 3
5766: PUSH
5767: LD_INT 102
5769: EQUAL
5770: IFFALSE 5780
// sDiff := true ;
5772: LD_ADDR_EXP 42
5776: PUSH
5777: LD_INT 1
5779: ST_TO_ADDR
// if p3 = 103 then
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 103
5787: EQUAL
5788: IFFALSE 5798
// sFog := true ;
5790: LD_ADDR_EXP 45
5794: PUSH
5795: LD_INT 1
5797: ST_TO_ADDR
// if p3 = 104 then
5798: LD_VAR 0 3
5802: PUSH
5803: LD_INT 104
5805: EQUAL
5806: IFFALSE 5816
// sReset := true ;
5808: LD_ADDR_EXP 46
5812: PUSH
5813: LD_INT 1
5815: ST_TO_ADDR
// if p3 = 105 then
5816: LD_VAR 0 3
5820: PUSH
5821: LD_INT 105
5823: EQUAL
5824: IFFALSE 5834
// sSun := true ;
5826: LD_ADDR_EXP 47
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// if p3 = 106 then
5834: LD_VAR 0 3
5838: PUSH
5839: LD_INT 106
5841: EQUAL
5842: IFFALSE 5852
// sTiger := true ;
5844: LD_ADDR_EXP 43
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// if p3 = 107 then
5852: LD_VAR 0 3
5856: PUSH
5857: LD_INT 107
5859: EQUAL
5860: IFFALSE 5870
// sBomb := true ;
5862: LD_ADDR_EXP 44
5866: PUSH
5867: LD_INT 1
5869: ST_TO_ADDR
// if p3 = 108 then
5870: LD_VAR 0 3
5874: PUSH
5875: LD_INT 108
5877: EQUAL
5878: IFFALSE 5888
// sWound := true ;
5880: LD_ADDR_EXP 52
5884: PUSH
5885: LD_INT 1
5887: ST_TO_ADDR
// if p3 = 109 then
5888: LD_VAR 0 3
5892: PUSH
5893: LD_INT 109
5895: EQUAL
5896: IFFALSE 5906
// sBetray := true ;
5898: LD_ADDR_EXP 56
5902: PUSH
5903: LD_INT 1
5905: ST_TO_ADDR
// if p3 = 110 then
5906: LD_VAR 0 3
5910: PUSH
5911: LD_INT 110
5913: EQUAL
5914: IFFALSE 5924
// sContamin := true ;
5916: LD_ADDR_EXP 57
5920: PUSH
5921: LD_INT 1
5923: ST_TO_ADDR
// if p3 = 111 then
5924: LD_VAR 0 3
5928: PUSH
5929: LD_INT 111
5931: EQUAL
5932: IFFALSE 5942
// sOil := true ;
5934: LD_ADDR_EXP 59
5938: PUSH
5939: LD_INT 1
5941: ST_TO_ADDR
// if p3 = 112 then
5942: LD_VAR 0 3
5946: PUSH
5947: LD_INT 112
5949: EQUAL
5950: IFFALSE 5960
// sStu := true ;
5952: LD_ADDR_EXP 63
5956: PUSH
5957: LD_INT 1
5959: ST_TO_ADDR
// if p3 = 113 then
5960: LD_VAR 0 3
5964: PUSH
5965: LD_INT 113
5967: EQUAL
5968: IFFALSE 5978
// sBazooka := true ;
5970: LD_ADDR_EXP 66
5974: PUSH
5975: LD_INT 1
5977: ST_TO_ADDR
// if p3 = 114 then
5978: LD_VAR 0 3
5982: PUSH
5983: LD_INT 114
5985: EQUAL
5986: IFFALSE 5996
// sMortar := true ;
5988: LD_ADDR_EXP 67
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// if p3 = 115 then
5996: LD_VAR 0 3
6000: PUSH
6001: LD_INT 115
6003: EQUAL
6004: IFFALSE 6014
// sRanger := true ;
6006: LD_ADDR_EXP 77
6010: PUSH
6011: LD_INT 1
6013: ST_TO_ADDR
// if p3 = 116 then
6014: LD_VAR 0 3
6018: PUSH
6019: LD_INT 116
6021: EQUAL
6022: IFFALSE 6032
// sComputer := true ;
6024: LD_ADDR_EXP 78
6028: PUSH
6029: LD_INT 1
6031: ST_TO_ADDR
// if p3 = 117 then
6032: LD_VAR 0 3
6036: PUSH
6037: LD_INT 117
6039: EQUAL
6040: IFFALSE 6050
// s30 := true ;
6042: LD_ADDR_EXP 79
6046: PUSH
6047: LD_INT 1
6049: ST_TO_ADDR
// if p3 = 118 then
6050: LD_VAR 0 3
6054: PUSH
6055: LD_INT 118
6057: EQUAL
6058: IFFALSE 6068
// s60 := true ;
6060: LD_ADDR_EXP 80
6064: PUSH
6065: LD_INT 1
6067: ST_TO_ADDR
// end ; if p2 = 101 then
6068: LD_VAR 0 2
6072: PUSH
6073: LD_INT 101
6075: EQUAL
6076: IFFALSE 6204
// begin case p3 of 1 :
6078: LD_VAR 0 3
6082: PUSH
6083: LD_INT 1
6085: DOUBLE
6086: EQUAL
6087: IFTRUE 6091
6089: GO 6098
6091: POP
// hHackUnlimitedResources ; 2 :
6092: CALL 18302 0 0
6096: GO 6204
6098: LD_INT 2
6100: DOUBLE
6101: EQUAL
6102: IFTRUE 6106
6104: GO 6113
6106: POP
// hHackSetLevel10 ; 3 :
6107: CALL 18435 0 0
6111: GO 6204
6113: LD_INT 3
6115: DOUBLE
6116: EQUAL
6117: IFTRUE 6121
6119: GO 6128
6121: POP
// hHackSetLevel10YourUnits ; 4 :
6122: CALL 18520 0 0
6126: GO 6204
6128: LD_INT 4
6130: DOUBLE
6131: EQUAL
6132: IFTRUE 6136
6134: GO 6143
6136: POP
// hHackInvincible ; 5 :
6137: CALL 18968 0 0
6141: GO 6204
6143: LD_INT 5
6145: DOUBLE
6146: EQUAL
6147: IFTRUE 6151
6149: GO 6158
6151: POP
// hHackInvisible ; 6 :
6152: CALL 19079 0 0
6156: GO 6204
6158: LD_INT 6
6160: DOUBLE
6161: EQUAL
6162: IFTRUE 6166
6164: GO 6173
6166: POP
// hHackChangeYourSide ; 7 :
6167: CALL 19136 0 0
6171: GO 6204
6173: LD_INT 7
6175: DOUBLE
6176: EQUAL
6177: IFTRUE 6181
6179: GO 6188
6181: POP
// hHackChangeUnitSide ; 8 :
6182: CALL 19178 0 0
6186: GO 6204
6188: LD_INT 8
6190: DOUBLE
6191: EQUAL
6192: IFTRUE 6196
6194: GO 6203
6196: POP
// hHackFog ; end ;
6197: CALL 19279 0 0
6201: GO 6204
6203: POP
// end ; end ;
6204: LD_VAR 0 7
6208: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6209: GO 6211
6211: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6212: LD_STRING initStreamRollete();
6214: PPUSH
6215: CALL_OW 559
// InitStreamMode ;
6219: CALL 6231 0 0
// DefineStreamItems ( false ) ;
6223: LD_INT 0
6225: PPUSH
6226: CALL 6695 0 1
// end ;
6230: END
// function InitStreamMode ; begin
6231: LD_INT 0
6233: PPUSH
// streamModeActive := false ;
6234: LD_ADDR_EXP 24
6238: PUSH
6239: LD_INT 0
6241: ST_TO_ADDR
// normalCounter := 36 ;
6242: LD_ADDR_EXP 25
6246: PUSH
6247: LD_INT 36
6249: ST_TO_ADDR
// hardcoreCounter := 18 ;
6250: LD_ADDR_EXP 26
6254: PUSH
6255: LD_INT 18
6257: ST_TO_ADDR
// sRocket := false ;
6258: LD_ADDR_EXP 29
6262: PUSH
6263: LD_INT 0
6265: ST_TO_ADDR
// sSpeed := false ;
6266: LD_ADDR_EXP 28
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
// sEngine := false ;
6274: LD_ADDR_EXP 30
6278: PUSH
6279: LD_INT 0
6281: ST_TO_ADDR
// sSpec := false ;
6282: LD_ADDR_EXP 27
6286: PUSH
6287: LD_INT 0
6289: ST_TO_ADDR
// sLevel := false ;
6290: LD_ADDR_EXP 31
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// sArmoury := false ;
6298: LD_ADDR_EXP 32
6302: PUSH
6303: LD_INT 0
6305: ST_TO_ADDR
// sRadar := false ;
6306: LD_ADDR_EXP 33
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// sBunker := false ;
6314: LD_ADDR_EXP 34
6318: PUSH
6319: LD_INT 0
6321: ST_TO_ADDR
// sHack := false ;
6322: LD_ADDR_EXP 35
6326: PUSH
6327: LD_INT 0
6329: ST_TO_ADDR
// sFire := false ;
6330: LD_ADDR_EXP 36
6334: PUSH
6335: LD_INT 0
6337: ST_TO_ADDR
// sRefresh := false ;
6338: LD_ADDR_EXP 37
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// sExp := false ;
6346: LD_ADDR_EXP 38
6350: PUSH
6351: LD_INT 0
6353: ST_TO_ADDR
// sDepot := false ;
6354: LD_ADDR_EXP 39
6358: PUSH
6359: LD_INT 0
6361: ST_TO_ADDR
// sFlag := false ;
6362: LD_ADDR_EXP 40
6366: PUSH
6367: LD_INT 0
6369: ST_TO_ADDR
// sKamikadze := false ;
6370: LD_ADDR_EXP 48
6374: PUSH
6375: LD_INT 0
6377: ST_TO_ADDR
// sTroll := false ;
6378: LD_ADDR_EXP 49
6382: PUSH
6383: LD_INT 0
6385: ST_TO_ADDR
// sSlow := false ;
6386: LD_ADDR_EXP 50
6390: PUSH
6391: LD_INT 0
6393: ST_TO_ADDR
// sLack := false ;
6394: LD_ADDR_EXP 51
6398: PUSH
6399: LD_INT 0
6401: ST_TO_ADDR
// sTank := false ;
6402: LD_ADDR_EXP 53
6406: PUSH
6407: LD_INT 0
6409: ST_TO_ADDR
// sRemote := false ;
6410: LD_ADDR_EXP 54
6414: PUSH
6415: LD_INT 0
6417: ST_TO_ADDR
// sPowell := false ;
6418: LD_ADDR_EXP 55
6422: PUSH
6423: LD_INT 0
6425: ST_TO_ADDR
// sTeleport := false ;
6426: LD_ADDR_EXP 58
6430: PUSH
6431: LD_INT 0
6433: ST_TO_ADDR
// sOilTower := false ;
6434: LD_ADDR_EXP 60
6438: PUSH
6439: LD_INT 0
6441: ST_TO_ADDR
// sShovel := false ;
6442: LD_ADDR_EXP 61
6446: PUSH
6447: LD_INT 0
6449: ST_TO_ADDR
// sSheik := false ;
6450: LD_ADDR_EXP 62
6454: PUSH
6455: LD_INT 0
6457: ST_TO_ADDR
// sEarthquake := false ;
6458: LD_ADDR_EXP 64
6462: PUSH
6463: LD_INT 0
6465: ST_TO_ADDR
// sAI := false ;
6466: LD_ADDR_EXP 65
6470: PUSH
6471: LD_INT 0
6473: ST_TO_ADDR
// sCargo := false ;
6474: LD_ADDR_EXP 68
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// sDLaser := false ;
6482: LD_ADDR_EXP 69
6486: PUSH
6487: LD_INT 0
6489: ST_TO_ADDR
// sExchange := false ;
6490: LD_ADDR_EXP 70
6494: PUSH
6495: LD_INT 0
6497: ST_TO_ADDR
// sFac := false ;
6498: LD_ADDR_EXP 71
6502: PUSH
6503: LD_INT 0
6505: ST_TO_ADDR
// sPower := false ;
6506: LD_ADDR_EXP 72
6510: PUSH
6511: LD_INT 0
6513: ST_TO_ADDR
// sRandom := false ;
6514: LD_ADDR_EXP 73
6518: PUSH
6519: LD_INT 0
6521: ST_TO_ADDR
// sShield := false ;
6522: LD_ADDR_EXP 74
6526: PUSH
6527: LD_INT 0
6529: ST_TO_ADDR
// sTime := false ;
6530: LD_ADDR_EXP 75
6534: PUSH
6535: LD_INT 0
6537: ST_TO_ADDR
// sTools := false ;
6538: LD_ADDR_EXP 76
6542: PUSH
6543: LD_INT 0
6545: ST_TO_ADDR
// sSold := false ;
6546: LD_ADDR_EXP 41
6550: PUSH
6551: LD_INT 0
6553: ST_TO_ADDR
// sDiff := false ;
6554: LD_ADDR_EXP 42
6558: PUSH
6559: LD_INT 0
6561: ST_TO_ADDR
// sFog := false ;
6562: LD_ADDR_EXP 45
6566: PUSH
6567: LD_INT 0
6569: ST_TO_ADDR
// sReset := false ;
6570: LD_ADDR_EXP 46
6574: PUSH
6575: LD_INT 0
6577: ST_TO_ADDR
// sSun := false ;
6578: LD_ADDR_EXP 47
6582: PUSH
6583: LD_INT 0
6585: ST_TO_ADDR
// sTiger := false ;
6586: LD_ADDR_EXP 43
6590: PUSH
6591: LD_INT 0
6593: ST_TO_ADDR
// sBomb := false ;
6594: LD_ADDR_EXP 44
6598: PUSH
6599: LD_INT 0
6601: ST_TO_ADDR
// sWound := false ;
6602: LD_ADDR_EXP 52
6606: PUSH
6607: LD_INT 0
6609: ST_TO_ADDR
// sBetray := false ;
6610: LD_ADDR_EXP 56
6614: PUSH
6615: LD_INT 0
6617: ST_TO_ADDR
// sContamin := false ;
6618: LD_ADDR_EXP 57
6622: PUSH
6623: LD_INT 0
6625: ST_TO_ADDR
// sOil := false ;
6626: LD_ADDR_EXP 59
6630: PUSH
6631: LD_INT 0
6633: ST_TO_ADDR
// sStu := false ;
6634: LD_ADDR_EXP 63
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// sBazooka := false ;
6642: LD_ADDR_EXP 66
6646: PUSH
6647: LD_INT 0
6649: ST_TO_ADDR
// sMortar := false ;
6650: LD_ADDR_EXP 67
6654: PUSH
6655: LD_INT 0
6657: ST_TO_ADDR
// sRanger := false ;
6658: LD_ADDR_EXP 77
6662: PUSH
6663: LD_INT 0
6665: ST_TO_ADDR
// sComputer := false ;
6666: LD_ADDR_EXP 78
6670: PUSH
6671: LD_INT 0
6673: ST_TO_ADDR
// s30 := false ;
6674: LD_ADDR_EXP 79
6678: PUSH
6679: LD_INT 0
6681: ST_TO_ADDR
// s60 := false ;
6682: LD_ADDR_EXP 80
6686: PUSH
6687: LD_INT 0
6689: ST_TO_ADDR
// end ;
6690: LD_VAR 0 1
6694: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6695: LD_INT 0
6697: PPUSH
6698: PPUSH
6699: PPUSH
6700: PPUSH
6701: PPUSH
6702: PPUSH
6703: PPUSH
// result := [ ] ;
6704: LD_ADDR_VAR 0 2
6708: PUSH
6709: EMPTY
6710: ST_TO_ADDR
// if campaign_id = 1 then
6711: LD_OWVAR 69
6715: PUSH
6716: LD_INT 1
6718: EQUAL
6719: IFFALSE 9885
// begin case mission_number of 1 :
6721: LD_OWVAR 70
6725: PUSH
6726: LD_INT 1
6728: DOUBLE
6729: EQUAL
6730: IFTRUE 6734
6732: GO 6810
6734: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: LD_INT 2
6742: PUSH
6743: LD_INT 4
6745: PUSH
6746: LD_INT 11
6748: PUSH
6749: LD_INT 12
6751: PUSH
6752: LD_INT 15
6754: PUSH
6755: LD_INT 16
6757: PUSH
6758: LD_INT 22
6760: PUSH
6761: LD_INT 23
6763: PUSH
6764: LD_INT 26
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 101
6780: PUSH
6781: LD_INT 102
6783: PUSH
6784: LD_INT 106
6786: PUSH
6787: LD_INT 116
6789: PUSH
6790: LD_INT 117
6792: PUSH
6793: LD_INT 118
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: ST_TO_ADDR
6808: GO 9883
6810: LD_INT 2
6812: DOUBLE
6813: EQUAL
6814: IFTRUE 6818
6816: GO 6902
6818: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6819: LD_ADDR_VAR 0 2
6823: PUSH
6824: LD_INT 2
6826: PUSH
6827: LD_INT 4
6829: PUSH
6830: LD_INT 11
6832: PUSH
6833: LD_INT 12
6835: PUSH
6836: LD_INT 15
6838: PUSH
6839: LD_INT 16
6841: PUSH
6842: LD_INT 22
6844: PUSH
6845: LD_INT 23
6847: PUSH
6848: LD_INT 26
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 101
6864: PUSH
6865: LD_INT 102
6867: PUSH
6868: LD_INT 105
6870: PUSH
6871: LD_INT 106
6873: PUSH
6874: LD_INT 108
6876: PUSH
6877: LD_INT 116
6879: PUSH
6880: LD_INT 117
6882: PUSH
6883: LD_INT 118
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: ST_TO_ADDR
6900: GO 9883
6902: LD_INT 3
6904: DOUBLE
6905: EQUAL
6906: IFTRUE 6910
6908: GO 6998
6910: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6911: LD_ADDR_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: LD_INT 4
6921: PUSH
6922: LD_INT 5
6924: PUSH
6925: LD_INT 11
6927: PUSH
6928: LD_INT 12
6930: PUSH
6931: LD_INT 15
6933: PUSH
6934: LD_INT 16
6936: PUSH
6937: LD_INT 22
6939: PUSH
6940: LD_INT 26
6942: PUSH
6943: LD_INT 36
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 101
6960: PUSH
6961: LD_INT 102
6963: PUSH
6964: LD_INT 105
6966: PUSH
6967: LD_INT 106
6969: PUSH
6970: LD_INT 108
6972: PUSH
6973: LD_INT 116
6975: PUSH
6976: LD_INT 117
6978: PUSH
6979: LD_INT 118
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: ST_TO_ADDR
6996: GO 9883
6998: LD_INT 4
7000: DOUBLE
7001: EQUAL
7002: IFTRUE 7006
7004: GO 7102
7006: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7007: LD_ADDR_VAR 0 2
7011: PUSH
7012: LD_INT 2
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: LD_INT 5
7020: PUSH
7021: LD_INT 8
7023: PUSH
7024: LD_INT 11
7026: PUSH
7027: LD_INT 12
7029: PUSH
7030: LD_INT 15
7032: PUSH
7033: LD_INT 16
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_INT 23
7041: PUSH
7042: LD_INT 26
7044: PUSH
7045: LD_INT 36
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 101
7064: PUSH
7065: LD_INT 102
7067: PUSH
7068: LD_INT 105
7070: PUSH
7071: LD_INT 106
7073: PUSH
7074: LD_INT 108
7076: PUSH
7077: LD_INT 116
7079: PUSH
7080: LD_INT 117
7082: PUSH
7083: LD_INT 118
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: ST_TO_ADDR
7100: GO 9883
7102: LD_INT 5
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7222
7110: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7111: LD_ADDR_VAR 0 2
7115: PUSH
7116: LD_INT 2
7118: PUSH
7119: LD_INT 4
7121: PUSH
7122: LD_INT 5
7124: PUSH
7125: LD_INT 6
7127: PUSH
7128: LD_INT 8
7130: PUSH
7131: LD_INT 11
7133: PUSH
7134: LD_INT 12
7136: PUSH
7137: LD_INT 15
7139: PUSH
7140: LD_INT 16
7142: PUSH
7143: LD_INT 22
7145: PUSH
7146: LD_INT 23
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 26
7154: PUSH
7155: LD_INT 36
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 101
7176: PUSH
7177: LD_INT 102
7179: PUSH
7180: LD_INT 105
7182: PUSH
7183: LD_INT 106
7185: PUSH
7186: LD_INT 108
7188: PUSH
7189: LD_INT 109
7191: PUSH
7192: LD_INT 112
7194: PUSH
7195: LD_INT 116
7197: PUSH
7198: LD_INT 117
7200: PUSH
7201: LD_INT 118
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: ST_TO_ADDR
7220: GO 9883
7222: LD_INT 6
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7362
7230: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: LD_INT 2
7238: PUSH
7239: LD_INT 4
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 6
7247: PUSH
7248: LD_INT 8
7250: PUSH
7251: LD_INT 11
7253: PUSH
7254: LD_INT 12
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: LD_INT 16
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 22
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 25
7277: PUSH
7278: LD_INT 26
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 31
7286: PUSH
7287: LD_INT 32
7289: PUSH
7290: LD_INT 36
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 101
7316: PUSH
7317: LD_INT 102
7319: PUSH
7320: LD_INT 105
7322: PUSH
7323: LD_INT 106
7325: PUSH
7326: LD_INT 108
7328: PUSH
7329: LD_INT 109
7331: PUSH
7332: LD_INT 112
7334: PUSH
7335: LD_INT 116
7337: PUSH
7338: LD_INT 117
7340: PUSH
7341: LD_INT 118
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: ST_TO_ADDR
7360: GO 9883
7362: LD_INT 7
7364: DOUBLE
7365: EQUAL
7366: IFTRUE 7370
7368: GO 7482
7370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7371: LD_ADDR_VAR 0 2
7375: PUSH
7376: LD_INT 2
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: LD_INT 5
7384: PUSH
7385: LD_INT 7
7387: PUSH
7388: LD_INT 11
7390: PUSH
7391: LD_INT 12
7393: PUSH
7394: LD_INT 15
7396: PUSH
7397: LD_INT 16
7399: PUSH
7400: LD_INT 20
7402: PUSH
7403: LD_INT 21
7405: PUSH
7406: LD_INT 22
7408: PUSH
7409: LD_INT 23
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 26
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 101
7436: PUSH
7437: LD_INT 102
7439: PUSH
7440: LD_INT 103
7442: PUSH
7443: LD_INT 105
7445: PUSH
7446: LD_INT 106
7448: PUSH
7449: LD_INT 108
7451: PUSH
7452: LD_INT 112
7454: PUSH
7455: LD_INT 116
7457: PUSH
7458: LD_INT 117
7460: PUSH
7461: LD_INT 118
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 9883
7482: LD_INT 8
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7630
7490: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7491: LD_ADDR_VAR 0 2
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 4
7501: PUSH
7502: LD_INT 5
7504: PUSH
7505: LD_INT 6
7507: PUSH
7508: LD_INT 7
7510: PUSH
7511: LD_INT 8
7513: PUSH
7514: LD_INT 11
7516: PUSH
7517: LD_INT 12
7519: PUSH
7520: LD_INT 15
7522: PUSH
7523: LD_INT 16
7525: PUSH
7526: LD_INT 20
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 22
7534: PUSH
7535: LD_INT 23
7537: PUSH
7538: LD_INT 25
7540: PUSH
7541: LD_INT 26
7543: PUSH
7544: LD_INT 30
7546: PUSH
7547: LD_INT 31
7549: PUSH
7550: LD_INT 32
7552: PUSH
7553: LD_INT 36
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 101
7580: PUSH
7581: LD_INT 102
7583: PUSH
7584: LD_INT 103
7586: PUSH
7587: LD_INT 105
7589: PUSH
7590: LD_INT 106
7592: PUSH
7593: LD_INT 108
7595: PUSH
7596: LD_INT 109
7598: PUSH
7599: LD_INT 112
7601: PUSH
7602: LD_INT 116
7604: PUSH
7605: LD_INT 117
7607: PUSH
7608: LD_INT 118
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: ST_TO_ADDR
7628: GO 9883
7630: LD_INT 9
7632: DOUBLE
7633: EQUAL
7634: IFTRUE 7638
7636: GO 7786
7638: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: LD_INT 4
7649: PUSH
7650: LD_INT 5
7652: PUSH
7653: LD_INT 6
7655: PUSH
7656: LD_INT 7
7658: PUSH
7659: LD_INT 8
7661: PUSH
7662: LD_INT 11
7664: PUSH
7665: LD_INT 12
7667: PUSH
7668: LD_INT 15
7670: PUSH
7671: LD_INT 16
7673: PUSH
7674: LD_INT 20
7676: PUSH
7677: LD_INT 21
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_INT 23
7685: PUSH
7686: LD_INT 25
7688: PUSH
7689: LD_INT 26
7691: PUSH
7692: LD_INT 28
7694: PUSH
7695: LD_INT 30
7697: PUSH
7698: LD_INT 31
7700: PUSH
7701: LD_INT 32
7703: PUSH
7704: LD_INT 36
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 101
7732: PUSH
7733: LD_INT 102
7735: PUSH
7736: LD_INT 103
7738: PUSH
7739: LD_INT 105
7741: PUSH
7742: LD_INT 106
7744: PUSH
7745: LD_INT 108
7747: PUSH
7748: LD_INT 109
7750: PUSH
7751: LD_INT 112
7753: PUSH
7754: LD_INT 114
7756: PUSH
7757: LD_INT 116
7759: PUSH
7760: LD_INT 117
7762: PUSH
7763: LD_INT 118
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: ST_TO_ADDR
7784: GO 9883
7786: LD_INT 10
7788: DOUBLE
7789: EQUAL
7790: IFTRUE 7794
7792: GO 7990
7794: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7795: LD_ADDR_VAR 0 2
7799: PUSH
7800: LD_INT 2
7802: PUSH
7803: LD_INT 4
7805: PUSH
7806: LD_INT 5
7808: PUSH
7809: LD_INT 6
7811: PUSH
7812: LD_INT 7
7814: PUSH
7815: LD_INT 8
7817: PUSH
7818: LD_INT 9
7820: PUSH
7821: LD_INT 10
7823: PUSH
7824: LD_INT 11
7826: PUSH
7827: LD_INT 12
7829: PUSH
7830: LD_INT 13
7832: PUSH
7833: LD_INT 14
7835: PUSH
7836: LD_INT 15
7838: PUSH
7839: LD_INT 16
7841: PUSH
7842: LD_INT 17
7844: PUSH
7845: LD_INT 18
7847: PUSH
7848: LD_INT 19
7850: PUSH
7851: LD_INT 20
7853: PUSH
7854: LD_INT 21
7856: PUSH
7857: LD_INT 22
7859: PUSH
7860: LD_INT 23
7862: PUSH
7863: LD_INT 24
7865: PUSH
7866: LD_INT 25
7868: PUSH
7869: LD_INT 26
7871: PUSH
7872: LD_INT 28
7874: PUSH
7875: LD_INT 30
7877: PUSH
7878: LD_INT 31
7880: PUSH
7881: LD_INT 32
7883: PUSH
7884: LD_INT 36
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 101
7920: PUSH
7921: LD_INT 102
7923: PUSH
7924: LD_INT 103
7926: PUSH
7927: LD_INT 104
7929: PUSH
7930: LD_INT 105
7932: PUSH
7933: LD_INT 106
7935: PUSH
7936: LD_INT 107
7938: PUSH
7939: LD_INT 108
7941: PUSH
7942: LD_INT 109
7944: PUSH
7945: LD_INT 110
7947: PUSH
7948: LD_INT 111
7950: PUSH
7951: LD_INT 112
7953: PUSH
7954: LD_INT 114
7956: PUSH
7957: LD_INT 116
7959: PUSH
7960: LD_INT 117
7962: PUSH
7963: LD_INT 118
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: ST_TO_ADDR
7988: GO 9883
7990: LD_INT 11
7992: DOUBLE
7993: EQUAL
7994: IFTRUE 7998
7996: GO 8202
7998: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7999: LD_ADDR_VAR 0 2
8003: PUSH
8004: LD_INT 2
8006: PUSH
8007: LD_INT 3
8009: PUSH
8010: LD_INT 4
8012: PUSH
8013: LD_INT 5
8015: PUSH
8016: LD_INT 6
8018: PUSH
8019: LD_INT 7
8021: PUSH
8022: LD_INT 8
8024: PUSH
8025: LD_INT 9
8027: PUSH
8028: LD_INT 10
8030: PUSH
8031: LD_INT 11
8033: PUSH
8034: LD_INT 12
8036: PUSH
8037: LD_INT 13
8039: PUSH
8040: LD_INT 14
8042: PUSH
8043: LD_INT 15
8045: PUSH
8046: LD_INT 16
8048: PUSH
8049: LD_INT 17
8051: PUSH
8052: LD_INT 18
8054: PUSH
8055: LD_INT 19
8057: PUSH
8058: LD_INT 20
8060: PUSH
8061: LD_INT 21
8063: PUSH
8064: LD_INT 22
8066: PUSH
8067: LD_INT 23
8069: PUSH
8070: LD_INT 24
8072: PUSH
8073: LD_INT 25
8075: PUSH
8076: LD_INT 26
8078: PUSH
8079: LD_INT 28
8081: PUSH
8082: LD_INT 30
8084: PUSH
8085: LD_INT 31
8087: PUSH
8088: LD_INT 32
8090: PUSH
8091: LD_INT 34
8093: PUSH
8094: LD_INT 36
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 101
8132: PUSH
8133: LD_INT 102
8135: PUSH
8136: LD_INT 103
8138: PUSH
8139: LD_INT 104
8141: PUSH
8142: LD_INT 105
8144: PUSH
8145: LD_INT 106
8147: PUSH
8148: LD_INT 107
8150: PUSH
8151: LD_INT 108
8153: PUSH
8154: LD_INT 109
8156: PUSH
8157: LD_INT 110
8159: PUSH
8160: LD_INT 111
8162: PUSH
8163: LD_INT 112
8165: PUSH
8166: LD_INT 114
8168: PUSH
8169: LD_INT 116
8171: PUSH
8172: LD_INT 117
8174: PUSH
8175: LD_INT 118
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: ST_TO_ADDR
8200: GO 9883
8202: LD_INT 12
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8430
8210: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: LD_INT 1
8218: PUSH
8219: LD_INT 2
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: LD_INT 4
8227: PUSH
8228: LD_INT 5
8230: PUSH
8231: LD_INT 6
8233: PUSH
8234: LD_INT 7
8236: PUSH
8237: LD_INT 8
8239: PUSH
8240: LD_INT 9
8242: PUSH
8243: LD_INT 10
8245: PUSH
8246: LD_INT 11
8248: PUSH
8249: LD_INT 12
8251: PUSH
8252: LD_INT 13
8254: PUSH
8255: LD_INT 14
8257: PUSH
8258: LD_INT 15
8260: PUSH
8261: LD_INT 16
8263: PUSH
8264: LD_INT 17
8266: PUSH
8267: LD_INT 18
8269: PUSH
8270: LD_INT 19
8272: PUSH
8273: LD_INT 20
8275: PUSH
8276: LD_INT 21
8278: PUSH
8279: LD_INT 22
8281: PUSH
8282: LD_INT 23
8284: PUSH
8285: LD_INT 24
8287: PUSH
8288: LD_INT 25
8290: PUSH
8291: LD_INT 26
8293: PUSH
8294: LD_INT 27
8296: PUSH
8297: LD_INT 28
8299: PUSH
8300: LD_INT 30
8302: PUSH
8303: LD_INT 31
8305: PUSH
8306: LD_INT 32
8308: PUSH
8309: LD_INT 33
8311: PUSH
8312: LD_INT 34
8314: PUSH
8315: LD_INT 36
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 101
8356: PUSH
8357: LD_INT 102
8359: PUSH
8360: LD_INT 103
8362: PUSH
8363: LD_INT 104
8365: PUSH
8366: LD_INT 105
8368: PUSH
8369: LD_INT 106
8371: PUSH
8372: LD_INT 107
8374: PUSH
8375: LD_INT 108
8377: PUSH
8378: LD_INT 109
8380: PUSH
8381: LD_INT 110
8383: PUSH
8384: LD_INT 111
8386: PUSH
8387: LD_INT 112
8389: PUSH
8390: LD_INT 113
8392: PUSH
8393: LD_INT 114
8395: PUSH
8396: LD_INT 116
8398: PUSH
8399: LD_INT 117
8401: PUSH
8402: LD_INT 118
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: ST_TO_ADDR
8428: GO 9883
8430: LD_INT 13
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8438
8436: GO 8646
8438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: LD_INT 3
8452: PUSH
8453: LD_INT 4
8455: PUSH
8456: LD_INT 5
8458: PUSH
8459: LD_INT 8
8461: PUSH
8462: LD_INT 9
8464: PUSH
8465: LD_INT 10
8467: PUSH
8468: LD_INT 11
8470: PUSH
8471: LD_INT 12
8473: PUSH
8474: LD_INT 14
8476: PUSH
8477: LD_INT 15
8479: PUSH
8480: LD_INT 16
8482: PUSH
8483: LD_INT 17
8485: PUSH
8486: LD_INT 18
8488: PUSH
8489: LD_INT 19
8491: PUSH
8492: LD_INT 20
8494: PUSH
8495: LD_INT 21
8497: PUSH
8498: LD_INT 22
8500: PUSH
8501: LD_INT 23
8503: PUSH
8504: LD_INT 24
8506: PUSH
8507: LD_INT 25
8509: PUSH
8510: LD_INT 26
8512: PUSH
8513: LD_INT 27
8515: PUSH
8516: LD_INT 28
8518: PUSH
8519: LD_INT 30
8521: PUSH
8522: LD_INT 31
8524: PUSH
8525: LD_INT 32
8527: PUSH
8528: LD_INT 33
8530: PUSH
8531: LD_INT 34
8533: PUSH
8534: LD_INT 36
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 101
8572: PUSH
8573: LD_INT 102
8575: PUSH
8576: LD_INT 103
8578: PUSH
8579: LD_INT 104
8581: PUSH
8582: LD_INT 105
8584: PUSH
8585: LD_INT 106
8587: PUSH
8588: LD_INT 107
8590: PUSH
8591: LD_INT 108
8593: PUSH
8594: LD_INT 109
8596: PUSH
8597: LD_INT 110
8599: PUSH
8600: LD_INT 111
8602: PUSH
8603: LD_INT 112
8605: PUSH
8606: LD_INT 113
8608: PUSH
8609: LD_INT 114
8611: PUSH
8612: LD_INT 116
8614: PUSH
8615: LD_INT 117
8617: PUSH
8618: LD_INT 118
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: ST_TO_ADDR
8644: GO 9883
8646: LD_INT 14
8648: DOUBLE
8649: EQUAL
8650: IFTRUE 8654
8652: GO 8878
8654: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8655: LD_ADDR_VAR 0 2
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: LD_INT 2
8665: PUSH
8666: LD_INT 3
8668: PUSH
8669: LD_INT 4
8671: PUSH
8672: LD_INT 5
8674: PUSH
8675: LD_INT 6
8677: PUSH
8678: LD_INT 7
8680: PUSH
8681: LD_INT 8
8683: PUSH
8684: LD_INT 9
8686: PUSH
8687: LD_INT 10
8689: PUSH
8690: LD_INT 11
8692: PUSH
8693: LD_INT 12
8695: PUSH
8696: LD_INT 13
8698: PUSH
8699: LD_INT 14
8701: PUSH
8702: LD_INT 15
8704: PUSH
8705: LD_INT 16
8707: PUSH
8708: LD_INT 17
8710: PUSH
8711: LD_INT 18
8713: PUSH
8714: LD_INT 19
8716: PUSH
8717: LD_INT 20
8719: PUSH
8720: LD_INT 21
8722: PUSH
8723: LD_INT 22
8725: PUSH
8726: LD_INT 23
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 25
8734: PUSH
8735: LD_INT 26
8737: PUSH
8738: LD_INT 27
8740: PUSH
8741: LD_INT 28
8743: PUSH
8744: LD_INT 29
8746: PUSH
8747: LD_INT 30
8749: PUSH
8750: LD_INT 31
8752: PUSH
8753: LD_INT 32
8755: PUSH
8756: LD_INT 33
8758: PUSH
8759: LD_INT 34
8761: PUSH
8762: LD_INT 36
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 101
8804: PUSH
8805: LD_INT 102
8807: PUSH
8808: LD_INT 103
8810: PUSH
8811: LD_INT 104
8813: PUSH
8814: LD_INT 105
8816: PUSH
8817: LD_INT 106
8819: PUSH
8820: LD_INT 107
8822: PUSH
8823: LD_INT 108
8825: PUSH
8826: LD_INT 109
8828: PUSH
8829: LD_INT 110
8831: PUSH
8832: LD_INT 111
8834: PUSH
8835: LD_INT 112
8837: PUSH
8838: LD_INT 113
8840: PUSH
8841: LD_INT 114
8843: PUSH
8844: LD_INT 116
8846: PUSH
8847: LD_INT 117
8849: PUSH
8850: LD_INT 118
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: ST_TO_ADDR
8876: GO 9883
8878: LD_INT 15
8880: DOUBLE
8881: EQUAL
8882: IFTRUE 8886
8884: GO 9110
8886: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8887: LD_ADDR_VAR 0 2
8891: PUSH
8892: LD_INT 1
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: LD_INT 4
8903: PUSH
8904: LD_INT 5
8906: PUSH
8907: LD_INT 6
8909: PUSH
8910: LD_INT 7
8912: PUSH
8913: LD_INT 8
8915: PUSH
8916: LD_INT 9
8918: PUSH
8919: LD_INT 10
8921: PUSH
8922: LD_INT 11
8924: PUSH
8925: LD_INT 12
8927: PUSH
8928: LD_INT 13
8930: PUSH
8931: LD_INT 14
8933: PUSH
8934: LD_INT 15
8936: PUSH
8937: LD_INT 16
8939: PUSH
8940: LD_INT 17
8942: PUSH
8943: LD_INT 18
8945: PUSH
8946: LD_INT 19
8948: PUSH
8949: LD_INT 20
8951: PUSH
8952: LD_INT 21
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 23
8960: PUSH
8961: LD_INT 24
8963: PUSH
8964: LD_INT 25
8966: PUSH
8967: LD_INT 26
8969: PUSH
8970: LD_INT 27
8972: PUSH
8973: LD_INT 28
8975: PUSH
8976: LD_INT 29
8978: PUSH
8979: LD_INT 30
8981: PUSH
8982: LD_INT 31
8984: PUSH
8985: LD_INT 32
8987: PUSH
8988: LD_INT 33
8990: PUSH
8991: LD_INT 34
8993: PUSH
8994: LD_INT 36
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 101
9036: PUSH
9037: LD_INT 102
9039: PUSH
9040: LD_INT 103
9042: PUSH
9043: LD_INT 104
9045: PUSH
9046: LD_INT 105
9048: PUSH
9049: LD_INT 106
9051: PUSH
9052: LD_INT 107
9054: PUSH
9055: LD_INT 108
9057: PUSH
9058: LD_INT 109
9060: PUSH
9061: LD_INT 110
9063: PUSH
9064: LD_INT 111
9066: PUSH
9067: LD_INT 112
9069: PUSH
9070: LD_INT 113
9072: PUSH
9073: LD_INT 114
9075: PUSH
9076: LD_INT 116
9078: PUSH
9079: LD_INT 117
9081: PUSH
9082: LD_INT 118
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: ST_TO_ADDR
9108: GO 9883
9110: LD_INT 16
9112: DOUBLE
9113: EQUAL
9114: IFTRUE 9118
9116: GO 9254
9118: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_INT 2
9126: PUSH
9127: LD_INT 4
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 7
9135: PUSH
9136: LD_INT 11
9138: PUSH
9139: LD_INT 12
9141: PUSH
9142: LD_INT 15
9144: PUSH
9145: LD_INT 16
9147: PUSH
9148: LD_INT 20
9150: PUSH
9151: LD_INT 21
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_INT 23
9159: PUSH
9160: LD_INT 25
9162: PUSH
9163: LD_INT 26
9165: PUSH
9166: LD_INT 30
9168: PUSH
9169: LD_INT 31
9171: PUSH
9172: LD_INT 32
9174: PUSH
9175: LD_INT 33
9177: PUSH
9178: LD_INT 34
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: PUSH
9202: LD_INT 101
9204: PUSH
9205: LD_INT 102
9207: PUSH
9208: LD_INT 103
9210: PUSH
9211: LD_INT 106
9213: PUSH
9214: LD_INT 108
9216: PUSH
9217: LD_INT 112
9219: PUSH
9220: LD_INT 113
9222: PUSH
9223: LD_INT 114
9225: PUSH
9226: LD_INT 116
9228: PUSH
9229: LD_INT 117
9231: PUSH
9232: LD_INT 118
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: ST_TO_ADDR
9252: GO 9883
9254: LD_INT 17
9256: DOUBLE
9257: EQUAL
9258: IFTRUE 9262
9260: GO 9486
9262: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: LD_INT 1
9270: PUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 3
9276: PUSH
9277: LD_INT 4
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: LD_INT 9
9294: PUSH
9295: LD_INT 10
9297: PUSH
9298: LD_INT 11
9300: PUSH
9301: LD_INT 12
9303: PUSH
9304: LD_INT 13
9306: PUSH
9307: LD_INT 14
9309: PUSH
9310: LD_INT 15
9312: PUSH
9313: LD_INT 16
9315: PUSH
9316: LD_INT 17
9318: PUSH
9319: LD_INT 18
9321: PUSH
9322: LD_INT 19
9324: PUSH
9325: LD_INT 20
9327: PUSH
9328: LD_INT 21
9330: PUSH
9331: LD_INT 22
9333: PUSH
9334: LD_INT 23
9336: PUSH
9337: LD_INT 24
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 26
9345: PUSH
9346: LD_INT 27
9348: PUSH
9349: LD_INT 28
9351: PUSH
9352: LD_INT 29
9354: PUSH
9355: LD_INT 30
9357: PUSH
9358: LD_INT 31
9360: PUSH
9361: LD_INT 32
9363: PUSH
9364: LD_INT 33
9366: PUSH
9367: LD_INT 34
9369: PUSH
9370: LD_INT 36
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 101
9412: PUSH
9413: LD_INT 102
9415: PUSH
9416: LD_INT 103
9418: PUSH
9419: LD_INT 104
9421: PUSH
9422: LD_INT 105
9424: PUSH
9425: LD_INT 106
9427: PUSH
9428: LD_INT 107
9430: PUSH
9431: LD_INT 108
9433: PUSH
9434: LD_INT 109
9436: PUSH
9437: LD_INT 110
9439: PUSH
9440: LD_INT 111
9442: PUSH
9443: LD_INT 112
9445: PUSH
9446: LD_INT 113
9448: PUSH
9449: LD_INT 114
9451: PUSH
9452: LD_INT 116
9454: PUSH
9455: LD_INT 117
9457: PUSH
9458: LD_INT 118
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: ST_TO_ADDR
9484: GO 9883
9486: LD_INT 18
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 9642
9494: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9495: LD_ADDR_VAR 0 2
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 4
9505: PUSH
9506: LD_INT 5
9508: PUSH
9509: LD_INT 7
9511: PUSH
9512: LD_INT 11
9514: PUSH
9515: LD_INT 12
9517: PUSH
9518: LD_INT 15
9520: PUSH
9521: LD_INT 16
9523: PUSH
9524: LD_INT 20
9526: PUSH
9527: LD_INT 21
9529: PUSH
9530: LD_INT 22
9532: PUSH
9533: LD_INT 23
9535: PUSH
9536: LD_INT 25
9538: PUSH
9539: LD_INT 26
9541: PUSH
9542: LD_INT 30
9544: PUSH
9545: LD_INT 31
9547: PUSH
9548: LD_INT 32
9550: PUSH
9551: LD_INT 33
9553: PUSH
9554: LD_INT 34
9556: PUSH
9557: LD_INT 35
9559: PUSH
9560: LD_INT 36
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 101
9588: PUSH
9589: LD_INT 102
9591: PUSH
9592: LD_INT 103
9594: PUSH
9595: LD_INT 106
9597: PUSH
9598: LD_INT 108
9600: PUSH
9601: LD_INT 112
9603: PUSH
9604: LD_INT 113
9606: PUSH
9607: LD_INT 114
9609: PUSH
9610: LD_INT 115
9612: PUSH
9613: LD_INT 116
9615: PUSH
9616: LD_INT 117
9618: PUSH
9619: LD_INT 118
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: ST_TO_ADDR
9640: GO 9883
9642: LD_INT 19
9644: DOUBLE
9645: EQUAL
9646: IFTRUE 9650
9648: GO 9882
9650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9651: LD_ADDR_VAR 0 2
9655: PUSH
9656: LD_INT 1
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: LD_INT 3
9664: PUSH
9665: LD_INT 4
9667: PUSH
9668: LD_INT 5
9670: PUSH
9671: LD_INT 6
9673: PUSH
9674: LD_INT 7
9676: PUSH
9677: LD_INT 8
9679: PUSH
9680: LD_INT 9
9682: PUSH
9683: LD_INT 10
9685: PUSH
9686: LD_INT 11
9688: PUSH
9689: LD_INT 12
9691: PUSH
9692: LD_INT 13
9694: PUSH
9695: LD_INT 14
9697: PUSH
9698: LD_INT 15
9700: PUSH
9701: LD_INT 16
9703: PUSH
9704: LD_INT 17
9706: PUSH
9707: LD_INT 18
9709: PUSH
9710: LD_INT 19
9712: PUSH
9713: LD_INT 20
9715: PUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 22
9721: PUSH
9722: LD_INT 23
9724: PUSH
9725: LD_INT 24
9727: PUSH
9728: LD_INT 25
9730: PUSH
9731: LD_INT 26
9733: PUSH
9734: LD_INT 27
9736: PUSH
9737: LD_INT 28
9739: PUSH
9740: LD_INT 29
9742: PUSH
9743: LD_INT 30
9745: PUSH
9746: LD_INT 31
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 33
9754: PUSH
9755: LD_INT 34
9757: PUSH
9758: LD_INT 35
9760: PUSH
9761: LD_INT 36
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: PUSH
9802: LD_INT 101
9804: PUSH
9805: LD_INT 102
9807: PUSH
9808: LD_INT 103
9810: PUSH
9811: LD_INT 104
9813: PUSH
9814: LD_INT 105
9816: PUSH
9817: LD_INT 106
9819: PUSH
9820: LD_INT 107
9822: PUSH
9823: LD_INT 108
9825: PUSH
9826: LD_INT 109
9828: PUSH
9829: LD_INT 110
9831: PUSH
9832: LD_INT 111
9834: PUSH
9835: LD_INT 112
9837: PUSH
9838: LD_INT 113
9840: PUSH
9841: LD_INT 114
9843: PUSH
9844: LD_INT 115
9846: PUSH
9847: LD_INT 116
9849: PUSH
9850: LD_INT 117
9852: PUSH
9853: LD_INT 118
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: ST_TO_ADDR
9880: GO 9883
9882: POP
// end else
9883: GO 10114
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9885: LD_ADDR_VAR 0 2
9889: PUSH
9890: LD_INT 1
9892: PUSH
9893: LD_INT 2
9895: PUSH
9896: LD_INT 3
9898: PUSH
9899: LD_INT 4
9901: PUSH
9902: LD_INT 5
9904: PUSH
9905: LD_INT 6
9907: PUSH
9908: LD_INT 7
9910: PUSH
9911: LD_INT 8
9913: PUSH
9914: LD_INT 9
9916: PUSH
9917: LD_INT 10
9919: PUSH
9920: LD_INT 11
9922: PUSH
9923: LD_INT 12
9925: PUSH
9926: LD_INT 13
9928: PUSH
9929: LD_INT 14
9931: PUSH
9932: LD_INT 15
9934: PUSH
9935: LD_INT 16
9937: PUSH
9938: LD_INT 17
9940: PUSH
9941: LD_INT 18
9943: PUSH
9944: LD_INT 19
9946: PUSH
9947: LD_INT 20
9949: PUSH
9950: LD_INT 21
9952: PUSH
9953: LD_INT 22
9955: PUSH
9956: LD_INT 23
9958: PUSH
9959: LD_INT 24
9961: PUSH
9962: LD_INT 25
9964: PUSH
9965: LD_INT 26
9967: PUSH
9968: LD_INT 27
9970: PUSH
9971: LD_INT 28
9973: PUSH
9974: LD_INT 29
9976: PUSH
9977: LD_INT 30
9979: PUSH
9980: LD_INT 31
9982: PUSH
9983: LD_INT 32
9985: PUSH
9986: LD_INT 33
9988: PUSH
9989: LD_INT 34
9991: PUSH
9992: LD_INT 35
9994: PUSH
9995: LD_INT 36
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 101
10038: PUSH
10039: LD_INT 102
10041: PUSH
10042: LD_INT 103
10044: PUSH
10045: LD_INT 104
10047: PUSH
10048: LD_INT 105
10050: PUSH
10051: LD_INT 106
10053: PUSH
10054: LD_INT 107
10056: PUSH
10057: LD_INT 108
10059: PUSH
10060: LD_INT 109
10062: PUSH
10063: LD_INT 110
10065: PUSH
10066: LD_INT 111
10068: PUSH
10069: LD_INT 112
10071: PUSH
10072: LD_INT 113
10074: PUSH
10075: LD_INT 114
10077: PUSH
10078: LD_INT 115
10080: PUSH
10081: LD_INT 116
10083: PUSH
10084: LD_INT 117
10086: PUSH
10087: LD_INT 118
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: ST_TO_ADDR
// if result then
10114: LD_VAR 0 2
10118: IFFALSE 10904
// begin normal :=  ;
10120: LD_ADDR_VAR 0 5
10124: PUSH
10125: LD_STRING 
10127: ST_TO_ADDR
// hardcore :=  ;
10128: LD_ADDR_VAR 0 6
10132: PUSH
10133: LD_STRING 
10135: ST_TO_ADDR
// active :=  ;
10136: LD_ADDR_VAR 0 7
10140: PUSH
10141: LD_STRING 
10143: ST_TO_ADDR
// for i = 1 to normalCounter do
10144: LD_ADDR_VAR 0 8
10148: PUSH
10149: DOUBLE
10150: LD_INT 1
10152: DEC
10153: ST_TO_ADDR
10154: LD_EXP 25
10158: PUSH
10159: FOR_TO
10160: IFFALSE 10261
// begin tmp := 0 ;
10162: LD_ADDR_VAR 0 3
10166: PUSH
10167: LD_STRING 0
10169: ST_TO_ADDR
// if result [ 1 ] then
10170: LD_VAR 0 2
10174: PUSH
10175: LD_INT 1
10177: ARRAY
10178: IFFALSE 10243
// if result [ 1 ] [ 1 ] = i then
10180: LD_VAR 0 2
10184: PUSH
10185: LD_INT 1
10187: ARRAY
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PUSH
10193: LD_VAR 0 8
10197: EQUAL
10198: IFFALSE 10243
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10200: LD_ADDR_VAR 0 2
10204: PUSH
10205: LD_VAR 0 2
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: LD_VAR 0 2
10217: PUSH
10218: LD_INT 1
10220: ARRAY
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: CALL_OW 3
10229: PPUSH
10230: CALL_OW 1
10234: ST_TO_ADDR
// tmp := 1 ;
10235: LD_ADDR_VAR 0 3
10239: PUSH
10240: LD_STRING 1
10242: ST_TO_ADDR
// end ; normal := normal & tmp ;
10243: LD_ADDR_VAR 0 5
10247: PUSH
10248: LD_VAR 0 5
10252: PUSH
10253: LD_VAR 0 3
10257: STR
10258: ST_TO_ADDR
// end ;
10259: GO 10159
10261: POP
10262: POP
// for i = 1 to hardcoreCounter do
10263: LD_ADDR_VAR 0 8
10267: PUSH
10268: DOUBLE
10269: LD_INT 1
10271: DEC
10272: ST_TO_ADDR
10273: LD_EXP 26
10277: PUSH
10278: FOR_TO
10279: IFFALSE 10384
// begin tmp := 0 ;
10281: LD_ADDR_VAR 0 3
10285: PUSH
10286: LD_STRING 0
10288: ST_TO_ADDR
// if result [ 2 ] then
10289: LD_VAR 0 2
10293: PUSH
10294: LD_INT 2
10296: ARRAY
10297: IFFALSE 10366
// if result [ 2 ] [ 1 ] = 100 + i then
10299: LD_VAR 0 2
10303: PUSH
10304: LD_INT 2
10306: ARRAY
10307: PUSH
10308: LD_INT 1
10310: ARRAY
10311: PUSH
10312: LD_INT 100
10314: PUSH
10315: LD_VAR 0 8
10319: PLUS
10320: EQUAL
10321: IFFALSE 10366
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10323: LD_ADDR_VAR 0 2
10327: PUSH
10328: LD_VAR 0 2
10332: PPUSH
10333: LD_INT 2
10335: PPUSH
10336: LD_VAR 0 2
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: LD_INT 1
10347: PPUSH
10348: CALL_OW 3
10352: PPUSH
10353: CALL_OW 1
10357: ST_TO_ADDR
// tmp := 1 ;
10358: LD_ADDR_VAR 0 3
10362: PUSH
10363: LD_STRING 1
10365: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10366: LD_ADDR_VAR 0 6
10370: PUSH
10371: LD_VAR 0 6
10375: PUSH
10376: LD_VAR 0 3
10380: STR
10381: ST_TO_ADDR
// end ;
10382: GO 10278
10384: POP
10385: POP
// if isGameLoad then
10386: LD_VAR 0 1
10390: IFFALSE 10865
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10392: LD_ADDR_VAR 0 4
10396: PUSH
10397: LD_EXP 29
10401: PUSH
10402: LD_EXP 28
10406: PUSH
10407: LD_EXP 30
10411: PUSH
10412: LD_EXP 27
10416: PUSH
10417: LD_EXP 31
10421: PUSH
10422: LD_EXP 32
10426: PUSH
10427: LD_EXP 33
10431: PUSH
10432: LD_EXP 34
10436: PUSH
10437: LD_EXP 35
10441: PUSH
10442: LD_EXP 36
10446: PUSH
10447: LD_EXP 37
10451: PUSH
10452: LD_EXP 38
10456: PUSH
10457: LD_EXP 39
10461: PUSH
10462: LD_EXP 40
10466: PUSH
10467: LD_EXP 48
10471: PUSH
10472: LD_EXP 49
10476: PUSH
10477: LD_EXP 50
10481: PUSH
10482: LD_EXP 51
10486: PUSH
10487: LD_EXP 53
10491: PUSH
10492: LD_EXP 54
10496: PUSH
10497: LD_EXP 55
10501: PUSH
10502: LD_EXP 58
10506: PUSH
10507: LD_EXP 60
10511: PUSH
10512: LD_EXP 61
10516: PUSH
10517: LD_EXP 62
10521: PUSH
10522: LD_EXP 64
10526: PUSH
10527: LD_EXP 65
10531: PUSH
10532: LD_EXP 68
10536: PUSH
10537: LD_EXP 69
10541: PUSH
10542: LD_EXP 70
10546: PUSH
10547: LD_EXP 71
10551: PUSH
10552: LD_EXP 72
10556: PUSH
10557: LD_EXP 73
10561: PUSH
10562: LD_EXP 74
10566: PUSH
10567: LD_EXP 75
10571: PUSH
10572: LD_EXP 76
10576: PUSH
10577: LD_EXP 41
10581: PUSH
10582: LD_EXP 42
10586: PUSH
10587: LD_EXP 45
10591: PUSH
10592: LD_EXP 46
10596: PUSH
10597: LD_EXP 47
10601: PUSH
10602: LD_EXP 43
10606: PUSH
10607: LD_EXP 44
10611: PUSH
10612: LD_EXP 52
10616: PUSH
10617: LD_EXP 56
10621: PUSH
10622: LD_EXP 57
10626: PUSH
10627: LD_EXP 59
10631: PUSH
10632: LD_EXP 63
10636: PUSH
10637: LD_EXP 66
10641: PUSH
10642: LD_EXP 67
10646: PUSH
10647: LD_EXP 77
10651: PUSH
10652: LD_EXP 78
10656: PUSH
10657: LD_EXP 79
10661: PUSH
10662: LD_EXP 80
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: ST_TO_ADDR
// tmp :=  ;
10723: LD_ADDR_VAR 0 3
10727: PUSH
10728: LD_STRING 
10730: ST_TO_ADDR
// for i = 1 to normalCounter do
10731: LD_ADDR_VAR 0 8
10735: PUSH
10736: DOUBLE
10737: LD_INT 1
10739: DEC
10740: ST_TO_ADDR
10741: LD_EXP 25
10745: PUSH
10746: FOR_TO
10747: IFFALSE 10783
// begin if flags [ i ] then
10749: LD_VAR 0 4
10753: PUSH
10754: LD_VAR 0 8
10758: ARRAY
10759: IFFALSE 10781
// tmp := tmp & i & ; ;
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_VAR 0 3
10770: PUSH
10771: LD_VAR 0 8
10775: STR
10776: PUSH
10777: LD_STRING ;
10779: STR
10780: ST_TO_ADDR
// end ;
10781: GO 10746
10783: POP
10784: POP
// for i = 1 to hardcoreCounter do
10785: LD_ADDR_VAR 0 8
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_EXP 26
10799: PUSH
10800: FOR_TO
10801: IFFALSE 10847
// begin if flags [ normalCounter + i ] then
10803: LD_VAR 0 4
10807: PUSH
10808: LD_EXP 25
10812: PUSH
10813: LD_VAR 0 8
10817: PLUS
10818: ARRAY
10819: IFFALSE 10845
// tmp := tmp & ( 100 + i ) & ; ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_VAR 0 3
10830: PUSH
10831: LD_INT 100
10833: PUSH
10834: LD_VAR 0 8
10838: PLUS
10839: STR
10840: PUSH
10841: LD_STRING ;
10843: STR
10844: ST_TO_ADDR
// end ;
10845: GO 10800
10847: POP
10848: POP
// if tmp then
10849: LD_VAR 0 3
10853: IFFALSE 10865
// active := tmp ;
10855: LD_ADDR_VAR 0 7
10859: PUSH
10860: LD_VAR 0 3
10864: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10865: LD_STRING getStreamItemsFromMission("
10867: PUSH
10868: LD_VAR 0 5
10872: STR
10873: PUSH
10874: LD_STRING ","
10876: STR
10877: PUSH
10878: LD_VAR 0 6
10882: STR
10883: PUSH
10884: LD_STRING ","
10886: STR
10887: PUSH
10888: LD_VAR 0 7
10892: STR
10893: PUSH
10894: LD_STRING ")
10896: STR
10897: PPUSH
10898: CALL_OW 559
// end else
10902: GO 10911
// ToLua ( getStreamItemsFromMission("","","") ) ;
10904: LD_STRING getStreamItemsFromMission("","","")
10906: PPUSH
10907: CALL_OW 559
// end ;
10911: LD_VAR 0 2
10915: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10916: LD_EXP 24
10920: PUSH
10921: LD_EXP 29
10925: AND
10926: IFFALSE 11050
10928: GO 10930
10930: DISABLE
10931: LD_INT 0
10933: PPUSH
10934: PPUSH
// begin enable ;
10935: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10936: LD_ADDR_VAR 0 2
10940: PUSH
10941: LD_INT 22
10943: PUSH
10944: LD_OWVAR 2
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 2
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 7
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: LD_INT 34
10968: PUSH
10969: LD_INT 45
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 34
10978: PUSH
10979: LD_INT 28
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 34
10988: PUSH
10989: LD_INT 47
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PPUSH
11007: CALL_OW 69
11011: ST_TO_ADDR
// if not tmp then
11012: LD_VAR 0 2
11016: NOT
11017: IFFALSE 11021
// exit ;
11019: GO 11050
// for i in tmp do
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_VAR 0 2
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11048
// begin SetLives ( i , 0 ) ;
11034: LD_VAR 0 1
11038: PPUSH
11039: LD_INT 0
11041: PPUSH
11042: CALL_OW 234
// end ;
11046: GO 11031
11048: POP
11049: POP
// end ;
11050: PPOPN 2
11052: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11053: LD_EXP 24
11057: PUSH
11058: LD_EXP 30
11062: AND
11063: IFFALSE 11147
11065: GO 11067
11067: DISABLE
11068: LD_INT 0
11070: PPUSH
11071: PPUSH
// begin enable ;
11072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11073: LD_ADDR_VAR 0 2
11077: PUSH
11078: LD_INT 22
11080: PUSH
11081: LD_OWVAR 2
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 32
11092: PUSH
11093: LD_INT 3
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PPUSH
11104: CALL_OW 69
11108: ST_TO_ADDR
// if not tmp then
11109: LD_VAR 0 2
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11147
// for i in tmp do
11118: LD_ADDR_VAR 0 1
11122: PUSH
11123: LD_VAR 0 2
11127: PUSH
11128: FOR_IN
11129: IFFALSE 11145
// begin SetLives ( i , 0 ) ;
11131: LD_VAR 0 1
11135: PPUSH
11136: LD_INT 0
11138: PPUSH
11139: CALL_OW 234
// end ;
11143: GO 11128
11145: POP
11146: POP
// end ;
11147: PPOPN 2
11149: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11150: LD_EXP 24
11154: PUSH
11155: LD_EXP 27
11159: AND
11160: IFFALSE 11253
11162: GO 11164
11164: DISABLE
11165: LD_INT 0
11167: PPUSH
// begin enable ;
11168: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11169: LD_ADDR_VAR 0 1
11173: PUSH
11174: LD_INT 22
11176: PUSH
11177: LD_OWVAR 2
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: LD_INT 25
11191: PUSH
11192: LD_INT 5
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 25
11201: PUSH
11202: LD_INT 9
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 25
11211: PUSH
11212: LD_INT 8
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PPUSH
11229: CALL_OW 69
11233: PUSH
11234: FOR_IN
11235: IFFALSE 11251
// begin SetClass ( i , 1 ) ;
11237: LD_VAR 0 1
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 336
// end ;
11249: GO 11234
11251: POP
11252: POP
// end ;
11253: PPOPN 1
11255: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11256: LD_EXP 24
11260: PUSH
11261: LD_EXP 28
11265: AND
11266: PUSH
11267: LD_OWVAR 65
11271: PUSH
11272: LD_INT 7
11274: LESS
11275: AND
11276: IFFALSE 11290
11278: GO 11280
11280: DISABLE
// begin enable ;
11281: ENABLE
// game_speed := 7 ;
11282: LD_ADDR_OWVAR 65
11286: PUSH
11287: LD_INT 7
11289: ST_TO_ADDR
// end ;
11290: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11291: LD_EXP 24
11295: PUSH
11296: LD_EXP 31
11300: AND
11301: IFFALSE 11503
11303: GO 11305
11305: DISABLE
11306: LD_INT 0
11308: PPUSH
11309: PPUSH
11310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11311: LD_ADDR_VAR 0 3
11315: PUSH
11316: LD_INT 81
11318: PUSH
11319: LD_OWVAR 2
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 21
11330: PUSH
11331: LD_INT 1
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PPUSH
11342: CALL_OW 69
11346: ST_TO_ADDR
// if not tmp then
11347: LD_VAR 0 3
11351: NOT
11352: IFFALSE 11356
// exit ;
11354: GO 11503
// if tmp > 5 then
11356: LD_VAR 0 3
11360: PUSH
11361: LD_INT 5
11363: GREATER
11364: IFFALSE 11376
// k := 5 else
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_INT 5
11373: ST_TO_ADDR
11374: GO 11386
// k := tmp ;
11376: LD_ADDR_VAR 0 2
11380: PUSH
11381: LD_VAR 0 3
11385: ST_TO_ADDR
// for i := 1 to k do
11386: LD_ADDR_VAR 0 1
11390: PUSH
11391: DOUBLE
11392: LD_INT 1
11394: DEC
11395: ST_TO_ADDR
11396: LD_VAR 0 2
11400: PUSH
11401: FOR_TO
11402: IFFALSE 11501
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11404: LD_VAR 0 3
11408: PUSH
11409: LD_VAR 0 1
11413: ARRAY
11414: PPUSH
11415: LD_VAR 0 1
11419: PUSH
11420: LD_INT 4
11422: MOD
11423: PUSH
11424: LD_INT 1
11426: PLUS
11427: PPUSH
11428: CALL_OW 259
11432: PUSH
11433: LD_INT 10
11435: LESS
11436: IFFALSE 11499
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11438: LD_VAR 0 3
11442: PUSH
11443: LD_VAR 0 1
11447: ARRAY
11448: PPUSH
11449: LD_VAR 0 1
11453: PUSH
11454: LD_INT 4
11456: MOD
11457: PUSH
11458: LD_INT 1
11460: PLUS
11461: PPUSH
11462: LD_VAR 0 3
11466: PUSH
11467: LD_VAR 0 1
11471: ARRAY
11472: PPUSH
11473: LD_VAR 0 1
11477: PUSH
11478: LD_INT 4
11480: MOD
11481: PUSH
11482: LD_INT 1
11484: PLUS
11485: PPUSH
11486: CALL_OW 259
11490: PUSH
11491: LD_INT 1
11493: PLUS
11494: PPUSH
11495: CALL_OW 237
11499: GO 11401
11501: POP
11502: POP
// end ;
11503: PPOPN 3
11505: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11506: LD_EXP 24
11510: PUSH
11511: LD_EXP 32
11515: AND
11516: IFFALSE 11536
11518: GO 11520
11520: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11521: LD_INT 4
11523: PPUSH
11524: LD_OWVAR 2
11528: PPUSH
11529: LD_INT 0
11531: PPUSH
11532: CALL_OW 324
11536: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11537: LD_EXP 24
11541: PUSH
11542: LD_EXP 61
11546: AND
11547: IFFALSE 11567
11549: GO 11551
11551: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11552: LD_INT 19
11554: PPUSH
11555: LD_OWVAR 2
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 324
11567: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11568: LD_EXP 24
11572: PUSH
11573: LD_EXP 33
11577: AND
11578: IFFALSE 11680
11580: GO 11582
11582: DISABLE
11583: LD_INT 0
11585: PPUSH
11586: PPUSH
// begin enable ;
11587: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_OWVAR 2
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 2
11607: PUSH
11608: LD_INT 34
11610: PUSH
11611: LD_INT 11
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 34
11620: PUSH
11621: LD_INT 30
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL_OW 69
11641: ST_TO_ADDR
// if not tmp then
11642: LD_VAR 0 2
11646: NOT
11647: IFFALSE 11651
// exit ;
11649: GO 11680
// for i in tmp do
11651: LD_ADDR_VAR 0 1
11655: PUSH
11656: LD_VAR 0 2
11660: PUSH
11661: FOR_IN
11662: IFFALSE 11678
// begin SetLives ( i , 0 ) ;
11664: LD_VAR 0 1
11668: PPUSH
11669: LD_INT 0
11671: PPUSH
11672: CALL_OW 234
// end ;
11676: GO 11661
11678: POP
11679: POP
// end ;
11680: PPOPN 2
11682: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11683: LD_EXP 24
11687: PUSH
11688: LD_EXP 34
11692: AND
11693: IFFALSE 11713
11695: GO 11697
11697: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11698: LD_INT 32
11700: PPUSH
11701: LD_OWVAR 2
11705: PPUSH
11706: LD_INT 0
11708: PPUSH
11709: CALL_OW 324
11713: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11714: LD_EXP 24
11718: PUSH
11719: LD_EXP 35
11723: AND
11724: IFFALSE 11905
11726: GO 11728
11728: DISABLE
11729: LD_INT 0
11731: PPUSH
11732: PPUSH
11733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11734: LD_ADDR_VAR 0 2
11738: PUSH
11739: LD_INT 22
11741: PUSH
11742: LD_OWVAR 2
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 33
11753: PUSH
11754: LD_INT 3
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PPUSH
11765: CALL_OW 69
11769: ST_TO_ADDR
// if not tmp then
11770: LD_VAR 0 2
11774: NOT
11775: IFFALSE 11779
// exit ;
11777: GO 11905
// side := 0 ;
11779: LD_ADDR_VAR 0 3
11783: PUSH
11784: LD_INT 0
11786: ST_TO_ADDR
// for i := 1 to 8 do
11787: LD_ADDR_VAR 0 1
11791: PUSH
11792: DOUBLE
11793: LD_INT 1
11795: DEC
11796: ST_TO_ADDR
11797: LD_INT 8
11799: PUSH
11800: FOR_TO
11801: IFFALSE 11849
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11803: LD_OWVAR 2
11807: PUSH
11808: LD_VAR 0 1
11812: NONEQUAL
11813: PUSH
11814: LD_OWVAR 2
11818: PPUSH
11819: LD_VAR 0 1
11823: PPUSH
11824: CALL_OW 81
11828: PUSH
11829: LD_INT 2
11831: EQUAL
11832: AND
11833: IFFALSE 11847
// begin side := i ;
11835: LD_ADDR_VAR 0 3
11839: PUSH
11840: LD_VAR 0 1
11844: ST_TO_ADDR
// break ;
11845: GO 11849
// end ;
11847: GO 11800
11849: POP
11850: POP
// if not side then
11851: LD_VAR 0 3
11855: NOT
11856: IFFALSE 11860
// exit ;
11858: GO 11905
// for i := 1 to tmp do
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: DOUBLE
11866: LD_INT 1
11868: DEC
11869: ST_TO_ADDR
11870: LD_VAR 0 2
11874: PUSH
11875: FOR_TO
11876: IFFALSE 11903
// if Prob ( 60 ) then
11878: LD_INT 60
11880: PPUSH
11881: CALL_OW 13
11885: IFFALSE 11901
// SetSide ( i , side ) ;
11887: LD_VAR 0 1
11891: PPUSH
11892: LD_VAR 0 3
11896: PPUSH
11897: CALL_OW 235
11901: GO 11875
11903: POP
11904: POP
// end ;
11905: PPOPN 3
11907: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11908: LD_EXP 24
11912: PUSH
11913: LD_EXP 37
11917: AND
11918: IFFALSE 12037
11920: GO 11922
11922: DISABLE
11923: LD_INT 0
11925: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: LD_INT 22
11933: PUSH
11934: LD_OWVAR 2
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 21
11945: PUSH
11946: LD_INT 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: LD_INT 23
11958: PUSH
11959: LD_INT 0
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: PPUSH
11975: CALL_OW 69
11979: PUSH
11980: FOR_IN
11981: IFFALSE 12035
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 257
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: LD_INT 2
11998: PUSH
11999: LD_INT 3
12001: PUSH
12002: LD_INT 4
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: IN
12011: IFFALSE 12033
// SetClass ( un , rand ( 1 , 4 ) ) ;
12013: LD_VAR 0 1
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_INT 4
12023: PPUSH
12024: CALL_OW 12
12028: PPUSH
12029: CALL_OW 336
12033: GO 11980
12035: POP
12036: POP
// end ;
12037: PPOPN 1
12039: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12040: LD_EXP 24
12044: PUSH
12045: LD_EXP 36
12049: AND
12050: IFFALSE 12129
12052: GO 12054
12054: DISABLE
12055: LD_INT 0
12057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12058: LD_ADDR_VAR 0 1
12062: PUSH
12063: LD_INT 22
12065: PUSH
12066: LD_OWVAR 2
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 21
12077: PUSH
12078: LD_INT 3
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 69
12093: ST_TO_ADDR
// if not tmp then
12094: LD_VAR 0 1
12098: NOT
12099: IFFALSE 12103
// exit ;
12101: GO 12129
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12103: LD_VAR 0 1
12107: PUSH
12108: LD_INT 1
12110: PPUSH
12111: LD_VAR 0 1
12115: PPUSH
12116: CALL_OW 12
12120: ARRAY
12121: PPUSH
12122: LD_INT 100
12124: PPUSH
12125: CALL_OW 234
// end ;
12129: PPOPN 1
12131: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12132: LD_EXP 24
12136: PUSH
12137: LD_EXP 38
12141: AND
12142: IFFALSE 12240
12144: GO 12146
12146: DISABLE
12147: LD_INT 0
12149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12150: LD_ADDR_VAR 0 1
12154: PUSH
12155: LD_INT 22
12157: PUSH
12158: LD_OWVAR 2
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 21
12169: PUSH
12170: LD_INT 1
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PPUSH
12181: CALL_OW 69
12185: ST_TO_ADDR
// if not tmp then
12186: LD_VAR 0 1
12190: NOT
12191: IFFALSE 12195
// exit ;
12193: GO 12240
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12195: LD_VAR 0 1
12199: PUSH
12200: LD_INT 1
12202: PPUSH
12203: LD_VAR 0 1
12207: PPUSH
12208: CALL_OW 12
12212: ARRAY
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: LD_INT 4
12219: PPUSH
12220: CALL_OW 12
12224: PPUSH
12225: LD_INT 3000
12227: PPUSH
12228: LD_INT 9000
12230: PPUSH
12231: CALL_OW 12
12235: PPUSH
12236: CALL_OW 492
// end ;
12240: PPOPN 1
12242: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12243: LD_EXP 24
12247: PUSH
12248: LD_EXP 39
12252: AND
12253: IFFALSE 12273
12255: GO 12257
12257: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12258: LD_INT 1
12260: PPUSH
12261: LD_OWVAR 2
12265: PPUSH
12266: LD_INT 0
12268: PPUSH
12269: CALL_OW 324
12273: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12274: LD_EXP 24
12278: PUSH
12279: LD_EXP 40
12283: AND
12284: IFFALSE 12367
12286: GO 12288
12288: DISABLE
12289: LD_INT 0
12291: PPUSH
12292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12293: LD_ADDR_VAR 0 2
12297: PUSH
12298: LD_INT 22
12300: PUSH
12301: LD_OWVAR 2
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 21
12312: PUSH
12313: LD_INT 3
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PPUSH
12324: CALL_OW 69
12328: ST_TO_ADDR
// if not tmp then
12329: LD_VAR 0 2
12333: NOT
12334: IFFALSE 12338
// exit ;
12336: GO 12367
// for i in tmp do
12338: LD_ADDR_VAR 0 1
12342: PUSH
12343: LD_VAR 0 2
12347: PUSH
12348: FOR_IN
12349: IFFALSE 12365
// SetBLevel ( i , 10 ) ;
12351: LD_VAR 0 1
12355: PPUSH
12356: LD_INT 10
12358: PPUSH
12359: CALL_OW 241
12363: GO 12348
12365: POP
12366: POP
// end ;
12367: PPOPN 2
12369: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12370: LD_EXP 24
12374: PUSH
12375: LD_EXP 41
12379: AND
12380: IFFALSE 12491
12382: GO 12384
12384: DISABLE
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
12389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12390: LD_ADDR_VAR 0 3
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_OWVAR 2
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 25
12409: PUSH
12410: LD_INT 1
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 69
12425: ST_TO_ADDR
// if not tmp then
12426: LD_VAR 0 3
12430: NOT
12431: IFFALSE 12435
// exit ;
12433: GO 12491
// un := tmp [ rand ( 1 , tmp ) ] ;
12435: LD_ADDR_VAR 0 2
12439: PUSH
12440: LD_VAR 0 3
12444: PUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: CALL_OW 12
12457: ARRAY
12458: ST_TO_ADDR
// if Crawls ( un ) then
12459: LD_VAR 0 2
12463: PPUSH
12464: CALL_OW 318
12468: IFFALSE 12479
// ComWalk ( un ) ;
12470: LD_VAR 0 2
12474: PPUSH
12475: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12479: LD_VAR 0 2
12483: PPUSH
12484: LD_INT 5
12486: PPUSH
12487: CALL_OW 336
// end ;
12491: PPOPN 3
12493: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12494: LD_EXP 24
12498: PUSH
12499: LD_EXP 42
12503: AND
12504: PUSH
12505: LD_OWVAR 67
12509: PUSH
12510: LD_INT 4
12512: LESS
12513: AND
12514: IFFALSE 12533
12516: GO 12518
12518: DISABLE
// begin Difficulty := Difficulty + 1 ;
12519: LD_ADDR_OWVAR 67
12523: PUSH
12524: LD_OWVAR 67
12528: PUSH
12529: LD_INT 1
12531: PLUS
12532: ST_TO_ADDR
// end ;
12533: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12534: LD_EXP 24
12538: PUSH
12539: LD_EXP 43
12543: AND
12544: IFFALSE 12647
12546: GO 12548
12548: DISABLE
12549: LD_INT 0
12551: PPUSH
// begin for i := 1 to 5 do
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: DOUBLE
12558: LD_INT 1
12560: DEC
12561: ST_TO_ADDR
12562: LD_INT 5
12564: PUSH
12565: FOR_TO
12566: IFFALSE 12645
// begin uc_nation := nation_nature ;
12568: LD_ADDR_OWVAR 21
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// uc_side := 0 ;
12576: LD_ADDR_OWVAR 20
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12584: LD_ADDR_OWVAR 29
12588: PUSH
12589: LD_INT 12
12591: PUSH
12592: LD_INT 12
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: ST_TO_ADDR
// hc_agressivity := 20 ;
12599: LD_ADDR_OWVAR 35
12603: PUSH
12604: LD_INT 20
12606: ST_TO_ADDR
// hc_class := class_tiger ;
12607: LD_ADDR_OWVAR 28
12611: PUSH
12612: LD_INT 14
12614: ST_TO_ADDR
// hc_gallery :=  ;
12615: LD_ADDR_OWVAR 33
12619: PUSH
12620: LD_STRING 
12622: ST_TO_ADDR
// hc_name :=  ;
12623: LD_ADDR_OWVAR 26
12627: PUSH
12628: LD_STRING 
12630: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12631: CALL_OW 44
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 51
// end ;
12643: GO 12565
12645: POP
12646: POP
// end ;
12647: PPOPN 1
12649: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12650: LD_EXP 24
12654: PUSH
12655: LD_EXP 44
12659: AND
12660: IFFALSE 12669
12662: GO 12664
12664: DISABLE
// StreamSibBomb ;
12665: CALL 12670 0 0
12669: END
// export function StreamSibBomb ; var i , x , y ; begin
12670: LD_INT 0
12672: PPUSH
12673: PPUSH
12674: PPUSH
12675: PPUSH
// result := false ;
12676: LD_ADDR_VAR 0 1
12680: PUSH
12681: LD_INT 0
12683: ST_TO_ADDR
// for i := 1 to 16 do
12684: LD_ADDR_VAR 0 2
12688: PUSH
12689: DOUBLE
12690: LD_INT 1
12692: DEC
12693: ST_TO_ADDR
12694: LD_INT 16
12696: PUSH
12697: FOR_TO
12698: IFFALSE 12897
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_INT 10
12707: PUSH
12708: LD_INT 20
12710: PUSH
12711: LD_INT 30
12713: PUSH
12714: LD_INT 40
12716: PUSH
12717: LD_INT 50
12719: PUSH
12720: LD_INT 60
12722: PUSH
12723: LD_INT 70
12725: PUSH
12726: LD_INT 80
12728: PUSH
12729: LD_INT 90
12731: PUSH
12732: LD_INT 100
12734: PUSH
12735: LD_INT 110
12737: PUSH
12738: LD_INT 120
12740: PUSH
12741: LD_INT 130
12743: PUSH
12744: LD_INT 140
12746: PUSH
12747: LD_INT 150
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 1
12769: PPUSH
12770: LD_INT 15
12772: PPUSH
12773: CALL_OW 12
12777: ARRAY
12778: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12779: LD_ADDR_VAR 0 4
12783: PUSH
12784: LD_INT 10
12786: PUSH
12787: LD_INT 20
12789: PUSH
12790: LD_INT 30
12792: PUSH
12793: LD_INT 40
12795: PUSH
12796: LD_INT 50
12798: PUSH
12799: LD_INT 60
12801: PUSH
12802: LD_INT 70
12804: PUSH
12805: LD_INT 80
12807: PUSH
12808: LD_INT 90
12810: PUSH
12811: LD_INT 100
12813: PUSH
12814: LD_INT 110
12816: PUSH
12817: LD_INT 120
12819: PUSH
12820: LD_INT 130
12822: PUSH
12823: LD_INT 140
12825: PUSH
12826: LD_INT 150
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 1
12848: PPUSH
12849: LD_INT 15
12851: PPUSH
12852: CALL_OW 12
12856: ARRAY
12857: ST_TO_ADDR
// if ValidHex ( x , y ) then
12858: LD_VAR 0 3
12862: PPUSH
12863: LD_VAR 0 4
12867: PPUSH
12868: CALL_OW 488
12872: IFFALSE 12895
// begin result := [ x , y ] ;
12874: LD_ADDR_VAR 0 1
12878: PUSH
12879: LD_VAR 0 3
12883: PUSH
12884: LD_VAR 0 4
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: ST_TO_ADDR
// break ;
12893: GO 12897
// end ; end ;
12895: GO 12697
12897: POP
12898: POP
// if result then
12899: LD_VAR 0 1
12903: IFFALSE 12963
// begin ToLua ( playSibBomb() ) ;
12905: LD_STRING playSibBomb()
12907: PPUSH
12908: CALL_OW 559
// wait ( 0 0$14 ) ;
12912: LD_INT 490
12914: PPUSH
12915: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12919: LD_VAR 0 1
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PPUSH
12928: LD_VAR 0 1
12932: PUSH
12933: LD_INT 2
12935: ARRAY
12936: PPUSH
12937: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12941: LD_VAR 0 1
12945: PUSH
12946: LD_INT 1
12948: ARRAY
12949: PPUSH
12950: LD_VAR 0 1
12954: PUSH
12955: LD_INT 2
12957: ARRAY
12958: PPUSH
12959: CALL_OW 429
// end ; end ;
12963: LD_VAR 0 1
12967: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12968: LD_EXP 24
12972: PUSH
12973: LD_EXP 46
12977: AND
12978: IFFALSE 12990
12980: GO 12982
12982: DISABLE
// YouLost (  ) ;
12983: LD_STRING 
12985: PPUSH
12986: CALL_OW 104
12990: END
// every 0 0$1 trigger StreamModeActive and sFog do
12991: LD_EXP 24
12995: PUSH
12996: LD_EXP 45
13000: AND
13001: IFFALSE 13015
13003: GO 13005
13005: DISABLE
// FogOff ( your_side ) ;
13006: LD_OWVAR 2
13010: PPUSH
13011: CALL_OW 344
13015: END
// every 0 0$1 trigger StreamModeActive and sSun do
13016: LD_EXP 24
13020: PUSH
13021: LD_EXP 47
13025: AND
13026: IFFALSE 13054
13028: GO 13030
13030: DISABLE
// begin solar_recharge_percent := 0 ;
13031: LD_ADDR_OWVAR 79
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13039: LD_INT 10500
13041: PPUSH
13042: CALL_OW 67
// solar_recharge_percent := 100 ;
13046: LD_ADDR_OWVAR 79
13050: PUSH
13051: LD_INT 100
13053: ST_TO_ADDR
// end ;
13054: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13055: LD_EXP 24
13059: PUSH
13060: LD_EXP 48
13064: AND
13065: IFFALSE 13304
13067: GO 13069
13069: DISABLE
13070: LD_INT 0
13072: PPUSH
13073: PPUSH
13074: PPUSH
// begin tmp := [ ] ;
13075: LD_ADDR_VAR 0 3
13079: PUSH
13080: EMPTY
13081: ST_TO_ADDR
// for i := 1 to 6 do
13082: LD_ADDR_VAR 0 1
13086: PUSH
13087: DOUBLE
13088: LD_INT 1
13090: DEC
13091: ST_TO_ADDR
13092: LD_INT 6
13094: PUSH
13095: FOR_TO
13096: IFFALSE 13201
// begin uc_nation := nation_nature ;
13098: LD_ADDR_OWVAR 21
13102: PUSH
13103: LD_INT 0
13105: ST_TO_ADDR
// uc_side := 0 ;
13106: LD_ADDR_OWVAR 20
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13114: LD_ADDR_OWVAR 29
13118: PUSH
13119: LD_INT 12
13121: PUSH
13122: LD_INT 12
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: ST_TO_ADDR
// hc_agressivity := 20 ;
13129: LD_ADDR_OWVAR 35
13133: PUSH
13134: LD_INT 20
13136: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13137: LD_ADDR_OWVAR 28
13141: PUSH
13142: LD_INT 17
13144: ST_TO_ADDR
// hc_gallery :=  ;
13145: LD_ADDR_OWVAR 33
13149: PUSH
13150: LD_STRING 
13152: ST_TO_ADDR
// hc_name :=  ;
13153: LD_ADDR_OWVAR 26
13157: PUSH
13158: LD_STRING 
13160: ST_TO_ADDR
// un := CreateHuman ;
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: CALL_OW 44
13170: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13171: LD_VAR 0 2
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 51
// tmp := tmp ^ un ;
13183: LD_ADDR_VAR 0 3
13187: PUSH
13188: LD_VAR 0 3
13192: PUSH
13193: LD_VAR 0 2
13197: ADD
13198: ST_TO_ADDR
// end ;
13199: GO 13095
13201: POP
13202: POP
// repeat wait ( 0 0$1 ) ;
13203: LD_INT 35
13205: PPUSH
13206: CALL_OW 67
// for un in tmp do
13210: LD_ADDR_VAR 0 2
13214: PUSH
13215: LD_VAR 0 3
13219: PUSH
13220: FOR_IN
13221: IFFALSE 13295
// begin if IsDead ( un ) then
13223: LD_VAR 0 2
13227: PPUSH
13228: CALL_OW 301
13232: IFFALSE 13252
// begin tmp := tmp diff un ;
13234: LD_ADDR_VAR 0 3
13238: PUSH
13239: LD_VAR 0 3
13243: PUSH
13244: LD_VAR 0 2
13248: DIFF
13249: ST_TO_ADDR
// continue ;
13250: GO 13220
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13252: LD_VAR 0 2
13256: PPUSH
13257: LD_INT 3
13259: PUSH
13260: LD_INT 22
13262: PUSH
13263: LD_INT 0
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PPUSH
13274: CALL_OW 69
13278: PPUSH
13279: LD_VAR 0 2
13283: PPUSH
13284: CALL_OW 74
13288: PPUSH
13289: CALL_OW 115
// end ;
13293: GO 13220
13295: POP
13296: POP
// until not tmp ;
13297: LD_VAR 0 3
13301: NOT
13302: IFFALSE 13203
// end ;
13304: PPOPN 3
13306: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13307: LD_EXP 24
13311: PUSH
13312: LD_EXP 49
13316: AND
13317: IFFALSE 13371
13319: GO 13321
13321: DISABLE
// begin ToLua ( displayTroll(); ) ;
13322: LD_STRING displayTroll();
13324: PPUSH
13325: CALL_OW 559
// wait ( 3 3$00 ) ;
13329: LD_INT 6300
13331: PPUSH
13332: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13336: LD_STRING hideTroll();
13338: PPUSH
13339: CALL_OW 559
// wait ( 1 1$00 ) ;
13343: LD_INT 2100
13345: PPUSH
13346: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13350: LD_STRING displayTroll();
13352: PPUSH
13353: CALL_OW 559
// wait ( 1 1$00 ) ;
13357: LD_INT 2100
13359: PPUSH
13360: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13364: LD_STRING hideTroll();
13366: PPUSH
13367: CALL_OW 559
// end ;
13371: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13372: LD_EXP 24
13376: PUSH
13377: LD_EXP 50
13381: AND
13382: IFFALSE 13445
13384: GO 13386
13386: DISABLE
13387: LD_INT 0
13389: PPUSH
// begin p := 0 ;
13390: LD_ADDR_VAR 0 1
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// repeat game_speed := 1 ;
13398: LD_ADDR_OWVAR 65
13402: PUSH
13403: LD_INT 1
13405: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13406: LD_INT 35
13408: PPUSH
13409: CALL_OW 67
// p := p + 1 ;
13413: LD_ADDR_VAR 0 1
13417: PUSH
13418: LD_VAR 0 1
13422: PUSH
13423: LD_INT 1
13425: PLUS
13426: ST_TO_ADDR
// until p >= 60 ;
13427: LD_VAR 0 1
13431: PUSH
13432: LD_INT 60
13434: GREATEREQUAL
13435: IFFALSE 13398
// game_speed := 4 ;
13437: LD_ADDR_OWVAR 65
13441: PUSH
13442: LD_INT 4
13444: ST_TO_ADDR
// end ;
13445: PPOPN 1
13447: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13448: LD_EXP 24
13452: PUSH
13453: LD_EXP 51
13457: AND
13458: IFFALSE 13604
13460: GO 13462
13462: DISABLE
13463: LD_INT 0
13465: PPUSH
13466: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13467: LD_ADDR_VAR 0 1
13471: PUSH
13472: LD_INT 22
13474: PUSH
13475: LD_OWVAR 2
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 2
13486: PUSH
13487: LD_INT 30
13489: PUSH
13490: LD_INT 0
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 30
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 69
13520: ST_TO_ADDR
// if not depot then
13521: LD_VAR 0 1
13525: NOT
13526: IFFALSE 13530
// exit ;
13528: GO 13604
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13530: LD_ADDR_VAR 0 2
13534: PUSH
13535: LD_VAR 0 1
13539: PUSH
13540: LD_INT 1
13542: PPUSH
13543: LD_VAR 0 1
13547: PPUSH
13548: CALL_OW 12
13552: ARRAY
13553: PPUSH
13554: CALL_OW 274
13558: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13559: LD_VAR 0 2
13563: PPUSH
13564: LD_INT 1
13566: PPUSH
13567: LD_INT 0
13569: PPUSH
13570: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13574: LD_VAR 0 2
13578: PPUSH
13579: LD_INT 2
13581: PPUSH
13582: LD_INT 0
13584: PPUSH
13585: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13589: LD_VAR 0 2
13593: PPUSH
13594: LD_INT 3
13596: PPUSH
13597: LD_INT 0
13599: PPUSH
13600: CALL_OW 277
// end ;
13604: PPOPN 2
13606: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13607: LD_EXP 24
13611: PUSH
13612: LD_EXP 52
13616: AND
13617: IFFALSE 13714
13619: GO 13621
13621: DISABLE
13622: LD_INT 0
13624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_OWVAR 2
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 21
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 3
13654: PUSH
13655: LD_INT 23
13657: PUSH
13658: LD_INT 0
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: ST_TO_ADDR
// if not tmp then
13679: LD_VAR 0 1
13683: NOT
13684: IFFALSE 13688
// exit ;
13686: GO 13714
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13688: LD_VAR 0 1
13692: PUSH
13693: LD_INT 1
13695: PPUSH
13696: LD_VAR 0 1
13700: PPUSH
13701: CALL_OW 12
13705: ARRAY
13706: PPUSH
13707: LD_INT 200
13709: PPUSH
13710: CALL_OW 234
// end ;
13714: PPOPN 1
13716: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13717: LD_EXP 24
13721: PUSH
13722: LD_EXP 53
13726: AND
13727: IFFALSE 13806
13729: GO 13731
13731: DISABLE
13732: LD_INT 0
13734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13735: LD_ADDR_VAR 0 1
13739: PUSH
13740: LD_INT 22
13742: PUSH
13743: LD_OWVAR 2
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 21
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 69
13770: ST_TO_ADDR
// if not tmp then
13771: LD_VAR 0 1
13775: NOT
13776: IFFALSE 13780
// exit ;
13778: GO 13806
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13780: LD_VAR 0 1
13784: PUSH
13785: LD_INT 1
13787: PPUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 12
13797: ARRAY
13798: PPUSH
13799: LD_INT 60
13801: PPUSH
13802: CALL_OW 234
// end ;
13806: PPOPN 1
13808: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13809: LD_EXP 24
13813: PUSH
13814: LD_EXP 54
13818: AND
13819: IFFALSE 13918
13821: GO 13823
13823: DISABLE
13824: LD_INT 0
13826: PPUSH
13827: PPUSH
// begin enable ;
13828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13829: LD_ADDR_VAR 0 1
13833: PUSH
13834: LD_INT 22
13836: PUSH
13837: LD_OWVAR 2
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 61
13848: PUSH
13849: EMPTY
13850: LIST
13851: PUSH
13852: LD_INT 33
13854: PUSH
13855: LD_INT 2
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: PPUSH
13867: CALL_OW 69
13871: ST_TO_ADDR
// if not tmp then
13872: LD_VAR 0 1
13876: NOT
13877: IFFALSE 13881
// exit ;
13879: GO 13918
// for i in tmp do
13881: LD_ADDR_VAR 0 2
13885: PUSH
13886: LD_VAR 0 1
13890: PUSH
13891: FOR_IN
13892: IFFALSE 13916
// if IsControledBy ( i ) then
13894: LD_VAR 0 2
13898: PPUSH
13899: CALL_OW 312
13903: IFFALSE 13914
// ComUnlink ( i ) ;
13905: LD_VAR 0 2
13909: PPUSH
13910: CALL_OW 136
13914: GO 13891
13916: POP
13917: POP
// end ;
13918: PPOPN 2
13920: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13921: LD_EXP 24
13925: PUSH
13926: LD_EXP 55
13930: AND
13931: IFFALSE 14071
13933: GO 13935
13935: DISABLE
13936: LD_INT 0
13938: PPUSH
13939: PPUSH
// begin ToLua ( displayPowell(); ) ;
13940: LD_STRING displayPowell();
13942: PPUSH
13943: CALL_OW 559
// uc_side := 0 ;
13947: LD_ADDR_OWVAR 20
13951: PUSH
13952: LD_INT 0
13954: ST_TO_ADDR
// uc_nation := 2 ;
13955: LD_ADDR_OWVAR 21
13959: PUSH
13960: LD_INT 2
13962: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13963: LD_ADDR_OWVAR 37
13967: PUSH
13968: LD_INT 14
13970: ST_TO_ADDR
// vc_engine := engine_siberite ;
13971: LD_ADDR_OWVAR 39
13975: PUSH
13976: LD_INT 3
13978: ST_TO_ADDR
// vc_control := control_apeman ;
13979: LD_ADDR_OWVAR 38
13983: PUSH
13984: LD_INT 5
13986: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13987: LD_ADDR_OWVAR 40
13991: PUSH
13992: LD_INT 29
13994: ST_TO_ADDR
// un := CreateVehicle ;
13995: LD_ADDR_VAR 0 2
13999: PUSH
14000: CALL_OW 45
14004: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14005: LD_VAR 0 2
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14017: LD_INT 35
14019: PPUSH
14020: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14024: LD_VAR 0 2
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_OWVAR 2
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: PPUSH
14046: LD_VAR 0 2
14050: PPUSH
14051: CALL_OW 74
14055: PPUSH
14056: CALL_OW 115
// until IsDead ( un ) ;
14060: LD_VAR 0 2
14064: PPUSH
14065: CALL_OW 301
14069: IFFALSE 14017
// end ;
14071: PPOPN 2
14073: END
// every 0 0$1 trigger StreamModeActive and sStu do
14074: LD_EXP 24
14078: PUSH
14079: LD_EXP 63
14083: AND
14084: IFFALSE 14100
14086: GO 14088
14088: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14089: LD_STRING displayStucuk();
14091: PPUSH
14092: CALL_OW 559
// ResetFog ;
14096: CALL_OW 335
// end ;
14100: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14101: LD_EXP 24
14105: PUSH
14106: LD_EXP 56
14110: AND
14111: IFFALSE 14252
14113: GO 14115
14115: DISABLE
14116: LD_INT 0
14118: PPUSH
14119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14120: LD_ADDR_VAR 0 2
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: ST_TO_ADDR
// if not tmp then
14156: LD_VAR 0 2
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14252
// un := tmp [ rand ( 1 , tmp ) ] ;
14165: LD_ADDR_VAR 0 1
14169: PUSH
14170: LD_VAR 0 2
14174: PUSH
14175: LD_INT 1
14177: PPUSH
14178: LD_VAR 0 2
14182: PPUSH
14183: CALL_OW 12
14187: ARRAY
14188: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14189: LD_VAR 0 1
14193: PPUSH
14194: LD_INT 0
14196: PPUSH
14197: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14201: LD_VAR 0 1
14205: PPUSH
14206: LD_OWVAR 3
14210: PUSH
14211: LD_VAR 0 1
14215: DIFF
14216: PPUSH
14217: LD_VAR 0 1
14221: PPUSH
14222: CALL_OW 74
14226: PPUSH
14227: CALL_OW 115
// wait ( 0 0$20 ) ;
14231: LD_INT 700
14233: PPUSH
14234: CALL_OW 67
// SetSide ( un , your_side ) ;
14238: LD_VAR 0 1
14242: PPUSH
14243: LD_OWVAR 2
14247: PPUSH
14248: CALL_OW 235
// end ;
14252: PPOPN 2
14254: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14255: LD_EXP 24
14259: PUSH
14260: LD_EXP 57
14264: AND
14265: IFFALSE 14371
14267: GO 14269
14269: DISABLE
14270: LD_INT 0
14272: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14273: LD_ADDR_VAR 0 1
14277: PUSH
14278: LD_INT 22
14280: PUSH
14281: LD_OWVAR 2
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 2
14292: PUSH
14293: LD_INT 30
14295: PUSH
14296: LD_INT 0
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 30
14305: PUSH
14306: LD_INT 1
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 69
14326: ST_TO_ADDR
// if not depot then
14327: LD_VAR 0 1
14331: NOT
14332: IFFALSE 14336
// exit ;
14334: GO 14371
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14336: LD_VAR 0 1
14340: PUSH
14341: LD_INT 1
14343: ARRAY
14344: PPUSH
14345: CALL_OW 250
14349: PPUSH
14350: LD_VAR 0 1
14354: PUSH
14355: LD_INT 1
14357: ARRAY
14358: PPUSH
14359: CALL_OW 251
14363: PPUSH
14364: LD_INT 70
14366: PPUSH
14367: CALL_OW 495
// end ;
14371: PPOPN 1
14373: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14374: LD_EXP 24
14378: PUSH
14379: LD_EXP 58
14383: AND
14384: IFFALSE 14595
14386: GO 14388
14388: DISABLE
14389: LD_INT 0
14391: PPUSH
14392: PPUSH
14393: PPUSH
14394: PPUSH
14395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14396: LD_ADDR_VAR 0 5
14400: PUSH
14401: LD_INT 22
14403: PUSH
14404: LD_OWVAR 2
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 21
14415: PUSH
14416: LD_INT 1
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PPUSH
14427: CALL_OW 69
14431: ST_TO_ADDR
// if not tmp then
14432: LD_VAR 0 5
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14595
// for i in tmp do
14441: LD_ADDR_VAR 0 1
14445: PUSH
14446: LD_VAR 0 5
14450: PUSH
14451: FOR_IN
14452: IFFALSE 14593
// begin d := rand ( 0 , 5 ) ;
14454: LD_ADDR_VAR 0 4
14458: PUSH
14459: LD_INT 0
14461: PPUSH
14462: LD_INT 5
14464: PPUSH
14465: CALL_OW 12
14469: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14470: LD_ADDR_VAR 0 2
14474: PUSH
14475: LD_VAR 0 1
14479: PPUSH
14480: CALL_OW 250
14484: PPUSH
14485: LD_VAR 0 4
14489: PPUSH
14490: LD_INT 3
14492: PPUSH
14493: LD_INT 12
14495: PPUSH
14496: CALL_OW 12
14500: PPUSH
14501: CALL_OW 272
14505: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14506: LD_ADDR_VAR 0 3
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 251
14520: PPUSH
14521: LD_VAR 0 4
14525: PPUSH
14526: LD_INT 3
14528: PPUSH
14529: LD_INT 12
14531: PPUSH
14532: CALL_OW 12
14536: PPUSH
14537: CALL_OW 273
14541: ST_TO_ADDR
// if ValidHex ( x , y ) then
14542: LD_VAR 0 2
14546: PPUSH
14547: LD_VAR 0 3
14551: PPUSH
14552: CALL_OW 488
14556: IFFALSE 14591
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_VAR 0 2
14567: PPUSH
14568: LD_VAR 0 3
14572: PPUSH
14573: LD_INT 3
14575: PPUSH
14576: LD_INT 6
14578: PPUSH
14579: CALL_OW 12
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: CALL_OW 483
// end ;
14591: GO 14451
14593: POP
14594: POP
// end ;
14595: PPOPN 5
14597: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14598: LD_EXP 24
14602: PUSH
14603: LD_EXP 59
14607: AND
14608: IFFALSE 14702
14610: GO 14612
14612: DISABLE
14613: LD_INT 0
14615: PPUSH
14616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14617: LD_ADDR_VAR 0 2
14621: PUSH
14622: LD_INT 22
14624: PUSH
14625: LD_OWVAR 2
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 32
14636: PUSH
14637: LD_INT 1
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 21
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: PPUSH
14659: CALL_OW 69
14663: ST_TO_ADDR
// if not tmp then
14664: LD_VAR 0 2
14668: NOT
14669: IFFALSE 14673
// exit ;
14671: GO 14702
// for i in tmp do
14673: LD_ADDR_VAR 0 1
14677: PUSH
14678: LD_VAR 0 2
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14700
// SetFuel ( i , 0 ) ;
14686: LD_VAR 0 1
14690: PPUSH
14691: LD_INT 0
14693: PPUSH
14694: CALL_OW 240
14698: GO 14683
14700: POP
14701: POP
// end ;
14702: PPOPN 2
14704: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14705: LD_EXP 24
14709: PUSH
14710: LD_EXP 60
14714: AND
14715: IFFALSE 14781
14717: GO 14719
14719: DISABLE
14720: LD_INT 0
14722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14723: LD_ADDR_VAR 0 1
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_OWVAR 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 30
14742: PUSH
14743: LD_INT 29
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: ST_TO_ADDR
// if not tmp then
14759: LD_VAR 0 1
14763: NOT
14764: IFFALSE 14768
// exit ;
14766: GO 14781
// DestroyUnit ( tmp [ 1 ] ) ;
14768: LD_VAR 0 1
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: CALL_OW 65
// end ;
14781: PPOPN 1
14783: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14784: LD_EXP 24
14788: PUSH
14789: LD_EXP 62
14793: AND
14794: IFFALSE 14923
14796: GO 14798
14798: DISABLE
14799: LD_INT 0
14801: PPUSH
// begin uc_side := 0 ;
14802: LD_ADDR_OWVAR 20
14806: PUSH
14807: LD_INT 0
14809: ST_TO_ADDR
// uc_nation := nation_arabian ;
14810: LD_ADDR_OWVAR 21
14814: PUSH
14815: LD_INT 2
14817: ST_TO_ADDR
// hc_gallery :=  ;
14818: LD_ADDR_OWVAR 33
14822: PUSH
14823: LD_STRING 
14825: ST_TO_ADDR
// hc_name :=  ;
14826: LD_ADDR_OWVAR 26
14830: PUSH
14831: LD_STRING 
14833: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14834: LD_INT 1
14836: PPUSH
14837: LD_INT 11
14839: PPUSH
14840: LD_INT 10
14842: PPUSH
14843: CALL_OW 380
// un := CreateHuman ;
14847: LD_ADDR_VAR 0 1
14851: PUSH
14852: CALL_OW 44
14856: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14857: LD_VAR 0 1
14861: PPUSH
14862: LD_INT 1
14864: PPUSH
14865: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14869: LD_INT 35
14871: PPUSH
14872: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14876: LD_VAR 0 1
14880: PPUSH
14881: LD_INT 22
14883: PUSH
14884: LD_OWVAR 2
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: PPUSH
14898: LD_VAR 0 1
14902: PPUSH
14903: CALL_OW 74
14907: PPUSH
14908: CALL_OW 115
// until IsDead ( un ) ;
14912: LD_VAR 0 1
14916: PPUSH
14917: CALL_OW 301
14921: IFFALSE 14869
// end ;
14923: PPOPN 1
14925: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14926: LD_EXP 24
14930: PUSH
14931: LD_EXP 64
14935: AND
14936: IFFALSE 14948
14938: GO 14940
14940: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14941: LD_STRING earthquake(getX(game), 0, 32)
14943: PPUSH
14944: CALL_OW 559
14948: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14949: LD_EXP 24
14953: PUSH
14954: LD_EXP 65
14958: AND
14959: IFFALSE 15050
14961: GO 14963
14963: DISABLE
14964: LD_INT 0
14966: PPUSH
// begin enable ;
14967: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14968: LD_ADDR_VAR 0 1
14972: PUSH
14973: LD_INT 22
14975: PUSH
14976: LD_OWVAR 2
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 21
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 33
14997: PUSH
14998: LD_INT 3
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: ST_TO_ADDR
// if not tmp then
15015: LD_VAR 0 1
15019: NOT
15020: IFFALSE 15024
// exit ;
15022: GO 15050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15024: LD_VAR 0 1
15028: PUSH
15029: LD_INT 1
15031: PPUSH
15032: LD_VAR 0 1
15036: PPUSH
15037: CALL_OW 12
15041: ARRAY
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 234
// end ;
15050: PPOPN 1
15052: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15053: LD_EXP 24
15057: PUSH
15058: LD_EXP 66
15062: AND
15063: IFFALSE 15204
15065: GO 15067
15067: DISABLE
15068: LD_INT 0
15070: PPUSH
15071: PPUSH
15072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_OWVAR 2
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 25
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 69
15108: ST_TO_ADDR
// if not tmp then
15109: LD_VAR 0 3
15113: NOT
15114: IFFALSE 15118
// exit ;
15116: GO 15204
// un := tmp [ rand ( 1 , tmp ) ] ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: LD_VAR 0 3
15127: PUSH
15128: LD_INT 1
15130: PPUSH
15131: LD_VAR 0 3
15135: PPUSH
15136: CALL_OW 12
15140: ARRAY
15141: ST_TO_ADDR
// if Crawls ( un ) then
15142: LD_VAR 0 2
15146: PPUSH
15147: CALL_OW 318
15151: IFFALSE 15162
// ComWalk ( un ) ;
15153: LD_VAR 0 2
15157: PPUSH
15158: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15162: LD_VAR 0 2
15166: PPUSH
15167: LD_INT 9
15169: PPUSH
15170: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15174: LD_INT 28
15176: PPUSH
15177: LD_OWVAR 2
15181: PPUSH
15182: LD_INT 2
15184: PPUSH
15185: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15189: LD_INT 29
15191: PPUSH
15192: LD_OWVAR 2
15196: PPUSH
15197: LD_INT 2
15199: PPUSH
15200: CALL_OW 322
// end ;
15204: PPOPN 3
15206: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15207: LD_EXP 24
15211: PUSH
15212: LD_EXP 67
15216: AND
15217: IFFALSE 15328
15219: GO 15221
15221: DISABLE
15222: LD_INT 0
15224: PPUSH
15225: PPUSH
15226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15227: LD_ADDR_VAR 0 3
15231: PUSH
15232: LD_INT 22
15234: PUSH
15235: LD_OWVAR 2
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 25
15246: PUSH
15247: LD_INT 1
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PPUSH
15258: CALL_OW 69
15262: ST_TO_ADDR
// if not tmp then
15263: LD_VAR 0 3
15267: NOT
15268: IFFALSE 15272
// exit ;
15270: GO 15328
// un := tmp [ rand ( 1 , tmp ) ] ;
15272: LD_ADDR_VAR 0 2
15276: PUSH
15277: LD_VAR 0 3
15281: PUSH
15282: LD_INT 1
15284: PPUSH
15285: LD_VAR 0 3
15289: PPUSH
15290: CALL_OW 12
15294: ARRAY
15295: ST_TO_ADDR
// if Crawls ( un ) then
15296: LD_VAR 0 2
15300: PPUSH
15301: CALL_OW 318
15305: IFFALSE 15316
// ComWalk ( un ) ;
15307: LD_VAR 0 2
15311: PPUSH
15312: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15316: LD_VAR 0 2
15320: PPUSH
15321: LD_INT 8
15323: PPUSH
15324: CALL_OW 336
// end ;
15328: PPOPN 3
15330: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15331: LD_EXP 24
15335: PUSH
15336: LD_EXP 68
15340: AND
15341: IFFALSE 15485
15343: GO 15345
15345: DISABLE
15346: LD_INT 0
15348: PPUSH
15349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15350: LD_ADDR_VAR 0 2
15354: PUSH
15355: LD_INT 22
15357: PUSH
15358: LD_OWVAR 2
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 21
15369: PUSH
15370: LD_INT 2
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 2
15379: PUSH
15380: LD_INT 34
15382: PUSH
15383: LD_INT 12
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 34
15392: PUSH
15393: LD_INT 51
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 34
15402: PUSH
15403: LD_INT 32
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: PPUSH
15421: CALL_OW 69
15425: ST_TO_ADDR
// if not tmp then
15426: LD_VAR 0 2
15430: NOT
15431: IFFALSE 15435
// exit ;
15433: GO 15485
// for i in tmp do
15435: LD_ADDR_VAR 0 1
15439: PUSH
15440: LD_VAR 0 2
15444: PUSH
15445: FOR_IN
15446: IFFALSE 15483
// if GetCargo ( i , mat_artifact ) = 0 then
15448: LD_VAR 0 1
15452: PPUSH
15453: LD_INT 4
15455: PPUSH
15456: CALL_OW 289
15460: PUSH
15461: LD_INT 0
15463: EQUAL
15464: IFFALSE 15481
// SetCargo ( i , mat_siberit , 100 ) ;
15466: LD_VAR 0 1
15470: PPUSH
15471: LD_INT 3
15473: PPUSH
15474: LD_INT 100
15476: PPUSH
15477: CALL_OW 290
15481: GO 15445
15483: POP
15484: POP
// end ;
15485: PPOPN 2
15487: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15488: LD_EXP 24
15492: PUSH
15493: LD_EXP 69
15497: AND
15498: IFFALSE 15681
15500: GO 15502
15502: DISABLE
15503: LD_INT 0
15505: PPUSH
15506: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15507: LD_ADDR_VAR 0 2
15511: PUSH
15512: LD_INT 22
15514: PUSH
15515: LD_OWVAR 2
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PPUSH
15524: CALL_OW 69
15528: ST_TO_ADDR
// if not tmp then
15529: LD_VAR 0 2
15533: NOT
15534: IFFALSE 15538
// exit ;
15536: GO 15681
// for i := 1 to 2 do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: DOUBLE
15544: LD_INT 1
15546: DEC
15547: ST_TO_ADDR
15548: LD_INT 2
15550: PUSH
15551: FOR_TO
15552: IFFALSE 15679
// begin uc_side := your_side ;
15554: LD_ADDR_OWVAR 20
15558: PUSH
15559: LD_OWVAR 2
15563: ST_TO_ADDR
// uc_nation := nation_american ;
15564: LD_ADDR_OWVAR 21
15568: PUSH
15569: LD_INT 1
15571: ST_TO_ADDR
// vc_chassis := us_morphling ;
15572: LD_ADDR_OWVAR 37
15576: PUSH
15577: LD_INT 5
15579: ST_TO_ADDR
// vc_engine := engine_siberite ;
15580: LD_ADDR_OWVAR 39
15584: PUSH
15585: LD_INT 3
15587: ST_TO_ADDR
// vc_control := control_computer ;
15588: LD_ADDR_OWVAR 38
15592: PUSH
15593: LD_INT 3
15595: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15596: LD_ADDR_OWVAR 40
15600: PUSH
15601: LD_INT 10
15603: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15604: LD_VAR 0 2
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PPUSH
15613: CALL_OW 310
15617: NOT
15618: IFFALSE 15665
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15620: CALL_OW 45
15624: PPUSH
15625: LD_VAR 0 2
15629: PUSH
15630: LD_INT 1
15632: ARRAY
15633: PPUSH
15634: CALL_OW 250
15638: PPUSH
15639: LD_VAR 0 2
15643: PUSH
15644: LD_INT 1
15646: ARRAY
15647: PPUSH
15648: CALL_OW 251
15652: PPUSH
15653: LD_INT 12
15655: PPUSH
15656: LD_INT 1
15658: PPUSH
15659: CALL_OW 50
15663: GO 15677
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15665: CALL_OW 45
15669: PPUSH
15670: LD_INT 1
15672: PPUSH
15673: CALL_OW 51
// end ;
15677: GO 15551
15679: POP
15680: POP
// end ;
15681: PPOPN 2
15683: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15684: LD_EXP 24
15688: PUSH
15689: LD_EXP 70
15693: AND
15694: IFFALSE 15916
15696: GO 15698
15698: DISABLE
15699: LD_INT 0
15701: PPUSH
15702: PPUSH
15703: PPUSH
15704: PPUSH
15705: PPUSH
15706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15707: LD_ADDR_VAR 0 6
15711: PUSH
15712: LD_INT 22
15714: PUSH
15715: LD_OWVAR 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 3
15736: PUSH
15737: LD_INT 23
15739: PUSH
15740: LD_INT 0
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 69
15760: ST_TO_ADDR
// if not tmp then
15761: LD_VAR 0 6
15765: NOT
15766: IFFALSE 15770
// exit ;
15768: GO 15916
// s1 := rand ( 1 , 4 ) ;
15770: LD_ADDR_VAR 0 2
15774: PUSH
15775: LD_INT 1
15777: PPUSH
15778: LD_INT 4
15780: PPUSH
15781: CALL_OW 12
15785: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15786: LD_ADDR_VAR 0 4
15790: PUSH
15791: LD_VAR 0 6
15795: PUSH
15796: LD_INT 1
15798: ARRAY
15799: PPUSH
15800: LD_VAR 0 2
15804: PPUSH
15805: CALL_OW 259
15809: ST_TO_ADDR
// if s1 = 1 then
15810: LD_VAR 0 2
15814: PUSH
15815: LD_INT 1
15817: EQUAL
15818: IFFALSE 15838
// s2 := rand ( 2 , 4 ) else
15820: LD_ADDR_VAR 0 3
15824: PUSH
15825: LD_INT 2
15827: PPUSH
15828: LD_INT 4
15830: PPUSH
15831: CALL_OW 12
15835: ST_TO_ADDR
15836: GO 15846
// s2 := 1 ;
15838: LD_ADDR_VAR 0 3
15842: PUSH
15843: LD_INT 1
15845: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15846: LD_ADDR_VAR 0 5
15850: PUSH
15851: LD_VAR 0 6
15855: PUSH
15856: LD_INT 1
15858: ARRAY
15859: PPUSH
15860: LD_VAR 0 3
15864: PPUSH
15865: CALL_OW 259
15869: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15870: LD_VAR 0 6
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: LD_VAR 0 2
15883: PPUSH
15884: LD_VAR 0 5
15888: PPUSH
15889: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15893: LD_VAR 0 6
15897: PUSH
15898: LD_INT 1
15900: ARRAY
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_VAR 0 4
15911: PPUSH
15912: CALL_OW 237
// end ;
15916: PPOPN 6
15918: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15919: LD_EXP 24
15923: PUSH
15924: LD_EXP 71
15928: AND
15929: IFFALSE 16008
15931: GO 15933
15933: DISABLE
15934: LD_INT 0
15936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15937: LD_ADDR_VAR 0 1
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_OWVAR 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 30
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PPUSH
15968: CALL_OW 69
15972: ST_TO_ADDR
// if not tmp then
15973: LD_VAR 0 1
15977: NOT
15978: IFFALSE 15982
// exit ;
15980: GO 16008
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15982: LD_VAR 0 1
15986: PUSH
15987: LD_INT 1
15989: PPUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 12
15999: ARRAY
16000: PPUSH
16001: LD_INT 1
16003: PPUSH
16004: CALL_OW 234
// end ;
16008: PPOPN 1
16010: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16011: LD_EXP 24
16015: PUSH
16016: LD_EXP 72
16020: AND
16021: IFFALSE 16133
16023: GO 16025
16025: DISABLE
16026: LD_INT 0
16028: PPUSH
16029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16030: LD_ADDR_VAR 0 2
16034: PUSH
16035: LD_INT 22
16037: PUSH
16038: LD_OWVAR 2
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 2
16049: PUSH
16050: LD_INT 30
16052: PUSH
16053: LD_INT 27
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 30
16062: PUSH
16063: LD_INT 26
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 28
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PPUSH
16090: CALL_OW 69
16094: ST_TO_ADDR
// if not tmp then
16095: LD_VAR 0 2
16099: NOT
16100: IFFALSE 16104
// exit ;
16102: GO 16133
// for i in tmp do
16104: LD_ADDR_VAR 0 1
16108: PUSH
16109: LD_VAR 0 2
16113: PUSH
16114: FOR_IN
16115: IFFALSE 16131
// SetLives ( i , 1 ) ;
16117: LD_VAR 0 1
16121: PPUSH
16122: LD_INT 1
16124: PPUSH
16125: CALL_OW 234
16129: GO 16114
16131: POP
16132: POP
// end ;
16133: PPOPN 2
16135: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16136: LD_EXP 24
16140: PUSH
16141: LD_EXP 73
16145: AND
16146: IFFALSE 16433
16148: GO 16150
16150: DISABLE
16151: LD_INT 0
16153: PPUSH
16154: PPUSH
16155: PPUSH
// begin i := rand ( 1 , 7 ) ;
16156: LD_ADDR_VAR 0 1
16160: PUSH
16161: LD_INT 1
16163: PPUSH
16164: LD_INT 7
16166: PPUSH
16167: CALL_OW 12
16171: ST_TO_ADDR
// case i of 1 :
16172: LD_VAR 0 1
16176: PUSH
16177: LD_INT 1
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16195
16185: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16186: LD_STRING earthquake(getX(game), 0, 32)
16188: PPUSH
16189: CALL_OW 559
16193: GO 16433
16195: LD_INT 2
16197: DOUBLE
16198: EQUAL
16199: IFTRUE 16203
16201: GO 16217
16203: POP
// begin ToLua ( displayStucuk(); ) ;
16204: LD_STRING displayStucuk();
16206: PPUSH
16207: CALL_OW 559
// ResetFog ;
16211: CALL_OW 335
// end ; 3 :
16215: GO 16433
16217: LD_INT 3
16219: DOUBLE
16220: EQUAL
16221: IFTRUE 16225
16223: GO 16329
16225: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16226: LD_ADDR_VAR 0 2
16230: PUSH
16231: LD_INT 22
16233: PUSH
16234: LD_OWVAR 2
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 25
16245: PUSH
16246: LD_INT 1
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PPUSH
16257: CALL_OW 69
16261: ST_TO_ADDR
// if not tmp then
16262: LD_VAR 0 2
16266: NOT
16267: IFFALSE 16271
// exit ;
16269: GO 16433
// un := tmp [ rand ( 1 , tmp ) ] ;
16271: LD_ADDR_VAR 0 3
16275: PUSH
16276: LD_VAR 0 2
16280: PUSH
16281: LD_INT 1
16283: PPUSH
16284: LD_VAR 0 2
16288: PPUSH
16289: CALL_OW 12
16293: ARRAY
16294: ST_TO_ADDR
// if Crawls ( un ) then
16295: LD_VAR 0 3
16299: PPUSH
16300: CALL_OW 318
16304: IFFALSE 16315
// ComWalk ( un ) ;
16306: LD_VAR 0 3
16310: PPUSH
16311: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16315: LD_VAR 0 3
16319: PPUSH
16320: LD_INT 8
16322: PPUSH
16323: CALL_OW 336
// end ; 4 :
16327: GO 16433
16329: LD_INT 4
16331: DOUBLE
16332: EQUAL
16333: IFTRUE 16337
16335: GO 16411
16337: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16338: LD_ADDR_VAR 0 2
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_OWVAR 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 30
16357: PUSH
16358: LD_INT 29
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: CALL_OW 69
16373: ST_TO_ADDR
// if not tmp then
16374: LD_VAR 0 2
16378: NOT
16379: IFFALSE 16383
// exit ;
16381: GO 16433
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16383: LD_VAR 0 2
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PPUSH
16392: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16396: LD_VAR 0 2
16400: PUSH
16401: LD_INT 1
16403: ARRAY
16404: PPUSH
16405: CALL_OW 65
// end ; 5 .. 7 :
16409: GO 16433
16411: LD_INT 5
16413: DOUBLE
16414: GREATEREQUAL
16415: IFFALSE 16423
16417: LD_INT 7
16419: DOUBLE
16420: LESSEQUAL
16421: IFTRUE 16425
16423: GO 16432
16425: POP
// StreamSibBomb ; end ;
16426: CALL 12670 0 0
16430: GO 16433
16432: POP
// end ;
16433: PPOPN 3
16435: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16436: LD_EXP 24
16440: PUSH
16441: LD_EXP 74
16445: AND
16446: IFFALSE 16602
16448: GO 16450
16450: DISABLE
16451: LD_INT 0
16453: PPUSH
16454: PPUSH
16455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16456: LD_ADDR_VAR 0 2
16460: PUSH
16461: LD_INT 81
16463: PUSH
16464: LD_OWVAR 2
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 2
16475: PUSH
16476: LD_INT 21
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PPUSH
16505: CALL_OW 69
16509: ST_TO_ADDR
// if not tmp then
16510: LD_VAR 0 2
16514: NOT
16515: IFFALSE 16519
// exit ;
16517: GO 16602
// p := 0 ;
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: LD_INT 0
16526: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16527: LD_INT 35
16529: PPUSH
16530: CALL_OW 67
// p := p + 1 ;
16534: LD_ADDR_VAR 0 3
16538: PUSH
16539: LD_VAR 0 3
16543: PUSH
16544: LD_INT 1
16546: PLUS
16547: ST_TO_ADDR
// for i in tmp do
16548: LD_ADDR_VAR 0 1
16552: PUSH
16553: LD_VAR 0 2
16557: PUSH
16558: FOR_IN
16559: IFFALSE 16590
// if GetLives ( i ) < 1000 then
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 256
16570: PUSH
16571: LD_INT 1000
16573: LESS
16574: IFFALSE 16588
// SetLives ( i , 1000 ) ;
16576: LD_VAR 0 1
16580: PPUSH
16581: LD_INT 1000
16583: PPUSH
16584: CALL_OW 234
16588: GO 16558
16590: POP
16591: POP
// until p > 20 ;
16592: LD_VAR 0 3
16596: PUSH
16597: LD_INT 20
16599: GREATER
16600: IFFALSE 16527
// end ;
16602: PPOPN 3
16604: END
// every 0 0$1 trigger StreamModeActive and sTime do
16605: LD_EXP 24
16609: PUSH
16610: LD_EXP 75
16614: AND
16615: IFFALSE 16650
16617: GO 16619
16619: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16620: LD_INT 28
16622: PPUSH
16623: LD_OWVAR 2
16627: PPUSH
16628: LD_INT 2
16630: PPUSH
16631: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16635: LD_INT 30
16637: PPUSH
16638: LD_OWVAR 2
16642: PPUSH
16643: LD_INT 2
16645: PPUSH
16646: CALL_OW 322
// end ;
16650: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16651: LD_EXP 24
16655: PUSH
16656: LD_EXP 76
16660: AND
16661: IFFALSE 16782
16663: GO 16665
16665: DISABLE
16666: LD_INT 0
16668: PPUSH
16669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16670: LD_ADDR_VAR 0 2
16674: PUSH
16675: LD_INT 22
16677: PUSH
16678: LD_OWVAR 2
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 21
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 3
16699: PUSH
16700: LD_INT 23
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: PPUSH
16719: CALL_OW 69
16723: ST_TO_ADDR
// if not tmp then
16724: LD_VAR 0 2
16728: NOT
16729: IFFALSE 16733
// exit ;
16731: GO 16782
// for i in tmp do
16733: LD_ADDR_VAR 0 1
16737: PUSH
16738: LD_VAR 0 2
16742: PUSH
16743: FOR_IN
16744: IFFALSE 16780
// begin if Crawls ( i ) then
16746: LD_VAR 0 1
16750: PPUSH
16751: CALL_OW 318
16755: IFFALSE 16766
// ComWalk ( i ) ;
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 138
// SetClass ( i , 2 ) ;
16766: LD_VAR 0 1
16770: PPUSH
16771: LD_INT 2
16773: PPUSH
16774: CALL_OW 336
// end ;
16778: GO 16743
16780: POP
16781: POP
// end ;
16782: PPOPN 2
16784: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16785: LD_EXP 24
16789: PUSH
16790: LD_EXP 77
16794: AND
16795: IFFALSE 17083
16797: GO 16799
16799: DISABLE
16800: LD_INT 0
16802: PPUSH
16803: PPUSH
16804: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16805: LD_OWVAR 2
16809: PPUSH
16810: LD_INT 9
16812: PPUSH
16813: LD_INT 1
16815: PPUSH
16816: LD_INT 1
16818: PPUSH
16819: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16823: LD_INT 9
16825: PPUSH
16826: LD_OWVAR 2
16830: PPUSH
16831: CALL_OW 343
// uc_side := 9 ;
16835: LD_ADDR_OWVAR 20
16839: PUSH
16840: LD_INT 9
16842: ST_TO_ADDR
// uc_nation := 2 ;
16843: LD_ADDR_OWVAR 21
16847: PUSH
16848: LD_INT 2
16850: ST_TO_ADDR
// hc_name := Dark Warrior ;
16851: LD_ADDR_OWVAR 26
16855: PUSH
16856: LD_STRING Dark Warrior
16858: ST_TO_ADDR
// hc_gallery :=  ;
16859: LD_ADDR_OWVAR 33
16863: PUSH
16864: LD_STRING 
16866: ST_TO_ADDR
// hc_noskilllimit := true ;
16867: LD_ADDR_OWVAR 76
16871: PUSH
16872: LD_INT 1
16874: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16875: LD_ADDR_OWVAR 31
16879: PUSH
16880: LD_INT 30
16882: PUSH
16883: LD_INT 30
16885: PUSH
16886: LD_INT 30
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: ST_TO_ADDR
// un := CreateHuman ;
16898: LD_ADDR_VAR 0 3
16902: PUSH
16903: CALL_OW 44
16907: ST_TO_ADDR
// hc_noskilllimit := false ;
16908: LD_ADDR_OWVAR 76
16912: PUSH
16913: LD_INT 0
16915: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16916: LD_VAR 0 3
16920: PPUSH
16921: LD_INT 1
16923: PPUSH
16924: CALL_OW 51
// ToLua ( playRanger() ) ;
16928: LD_STRING playRanger()
16930: PPUSH
16931: CALL_OW 559
// p := 0 ;
16935: LD_ADDR_VAR 0 2
16939: PUSH
16940: LD_INT 0
16942: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16943: LD_INT 35
16945: PPUSH
16946: CALL_OW 67
// p := p + 1 ;
16950: LD_ADDR_VAR 0 2
16954: PUSH
16955: LD_VAR 0 2
16959: PUSH
16960: LD_INT 1
16962: PLUS
16963: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16964: LD_VAR 0 3
16968: PPUSH
16969: CALL_OW 256
16973: PUSH
16974: LD_INT 1000
16976: LESS
16977: IFFALSE 16991
// SetLives ( un , 1000 ) ;
16979: LD_VAR 0 3
16983: PPUSH
16984: LD_INT 1000
16986: PPUSH
16987: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16991: LD_VAR 0 3
16995: PPUSH
16996: LD_INT 81
16998: PUSH
16999: LD_OWVAR 2
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 91
17010: PUSH
17011: LD_VAR 0 3
17015: PUSH
17016: LD_INT 30
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: PPUSH
17033: LD_VAR 0 3
17037: PPUSH
17038: CALL_OW 74
17042: PPUSH
17043: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17047: LD_VAR 0 2
17051: PUSH
17052: LD_INT 80
17054: GREATER
17055: PUSH
17056: LD_VAR 0 3
17060: PPUSH
17061: CALL_OW 301
17065: OR
17066: IFFALSE 16943
// if un then
17068: LD_VAR 0 3
17072: IFFALSE 17083
// RemoveUnit ( un ) ;
17074: LD_VAR 0 3
17078: PPUSH
17079: CALL_OW 64
// end ;
17083: PPOPN 3
17085: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17086: LD_EXP 78
17090: IFFALSE 17206
17092: GO 17094
17094: DISABLE
17095: LD_INT 0
17097: PPUSH
17098: PPUSH
17099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 81
17107: PUSH
17108: LD_OWVAR 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 21
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PPUSH
17131: CALL_OW 69
17135: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17136: LD_STRING playComputer()
17138: PPUSH
17139: CALL_OW 559
// if not tmp then
17143: LD_VAR 0 2
17147: NOT
17148: IFFALSE 17152
// exit ;
17150: GO 17206
// for i in tmp do
17152: LD_ADDR_VAR 0 1
17156: PUSH
17157: LD_VAR 0 2
17161: PUSH
17162: FOR_IN
17163: IFFALSE 17204
// for j := 1 to 4 do
17165: LD_ADDR_VAR 0 3
17169: PUSH
17170: DOUBLE
17171: LD_INT 1
17173: DEC
17174: ST_TO_ADDR
17175: LD_INT 4
17177: PUSH
17178: FOR_TO
17179: IFFALSE 17200
// SetSkill ( i , j , 10 ) ;
17181: LD_VAR 0 1
17185: PPUSH
17186: LD_VAR 0 3
17190: PPUSH
17191: LD_INT 10
17193: PPUSH
17194: CALL_OW 237
17198: GO 17178
17200: POP
17201: POP
17202: GO 17162
17204: POP
17205: POP
// end ;
17206: PPOPN 3
17208: END
// every 0 0$1 trigger s30 do var i , tmp ;
17209: LD_EXP 79
17213: IFFALSE 17282
17215: GO 17217
17217: DISABLE
17218: LD_INT 0
17220: PPUSH
17221: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_OWVAR 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PPUSH
17239: CALL_OW 69
17243: ST_TO_ADDR
// if not tmp then
17244: LD_VAR 0 2
17248: NOT
17249: IFFALSE 17253
// exit ;
17251: GO 17282
// for i in tmp do
17253: LD_ADDR_VAR 0 1
17257: PUSH
17258: LD_VAR 0 2
17262: PUSH
17263: FOR_IN
17264: IFFALSE 17280
// SetLives ( i , 300 ) ;
17266: LD_VAR 0 1
17270: PPUSH
17271: LD_INT 300
17273: PPUSH
17274: CALL_OW 234
17278: GO 17263
17280: POP
17281: POP
// end ;
17282: PPOPN 2
17284: END
// every 0 0$1 trigger s60 do var i , tmp ;
17285: LD_EXP 80
17289: IFFALSE 17358
17291: GO 17293
17293: DISABLE
17294: LD_INT 0
17296: PPUSH
17297: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17298: LD_ADDR_VAR 0 2
17302: PUSH
17303: LD_INT 22
17305: PUSH
17306: LD_OWVAR 2
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: ST_TO_ADDR
// if not tmp then
17320: LD_VAR 0 2
17324: NOT
17325: IFFALSE 17329
// exit ;
17327: GO 17358
// for i in tmp do
17329: LD_ADDR_VAR 0 1
17333: PUSH
17334: LD_VAR 0 2
17338: PUSH
17339: FOR_IN
17340: IFFALSE 17356
// SetLives ( i , 600 ) ;
17342: LD_VAR 0 1
17346: PPUSH
17347: LD_INT 600
17349: PPUSH
17350: CALL_OW 234
17354: GO 17339
17356: POP
17357: POP
// end ;
17358: PPOPN 2
17360: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17361: LD_INT 0
17363: PPUSH
// case cmd of 301 :
17364: LD_VAR 0 1
17368: PUSH
17369: LD_INT 301
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17409
17377: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17378: LD_VAR 0 6
17382: PPUSH
17383: LD_VAR 0 7
17387: PPUSH
17388: LD_VAR 0 8
17392: PPUSH
17393: LD_VAR 0 4
17397: PPUSH
17398: LD_VAR 0 5
17402: PPUSH
17403: CALL 18610 0 5
17407: GO 17530
17409: LD_INT 302
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17417
17415: GO 17454
17417: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17418: LD_VAR 0 6
17422: PPUSH
17423: LD_VAR 0 7
17427: PPUSH
17428: LD_VAR 0 8
17432: PPUSH
17433: LD_VAR 0 9
17437: PPUSH
17438: LD_VAR 0 4
17442: PPUSH
17443: LD_VAR 0 5
17447: PPUSH
17448: CALL 18701 0 6
17452: GO 17530
17454: LD_INT 303
17456: DOUBLE
17457: EQUAL
17458: IFTRUE 17462
17460: GO 17499
17462: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17463: LD_VAR 0 6
17467: PPUSH
17468: LD_VAR 0 7
17472: PPUSH
17473: LD_VAR 0 8
17477: PPUSH
17478: LD_VAR 0 9
17482: PPUSH
17483: LD_VAR 0 4
17487: PPUSH
17488: LD_VAR 0 5
17492: PPUSH
17493: CALL 17535 0 6
17497: GO 17530
17499: LD_INT 304
17501: DOUBLE
17502: EQUAL
17503: IFTRUE 17507
17505: GO 17529
17507: POP
// hHackTeleport ( unit , x , y ) ; end ;
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_VAR 0 4
17517: PPUSH
17518: LD_VAR 0 5
17522: PPUSH
17523: CALL 19294 0 3
17527: GO 17530
17529: POP
// end ;
17530: LD_VAR 0 12
17534: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17535: LD_INT 0
17537: PPUSH
17538: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17539: LD_VAR 0 1
17543: PUSH
17544: LD_INT 1
17546: LESS
17547: PUSH
17548: LD_VAR 0 1
17552: PUSH
17553: LD_INT 3
17555: GREATER
17556: OR
17557: PUSH
17558: LD_VAR 0 5
17562: PPUSH
17563: LD_VAR 0 6
17567: PPUSH
17568: CALL_OW 428
17572: OR
17573: IFFALSE 17577
// exit ;
17575: GO 18297
// uc_side := your_side ;
17577: LD_ADDR_OWVAR 20
17581: PUSH
17582: LD_OWVAR 2
17586: ST_TO_ADDR
// uc_nation := nation ;
17587: LD_ADDR_OWVAR 21
17591: PUSH
17592: LD_VAR 0 1
17596: ST_TO_ADDR
// bc_level = 1 ;
17597: LD_ADDR_OWVAR 43
17601: PUSH
17602: LD_INT 1
17604: ST_TO_ADDR
// case btype of 1 :
17605: LD_VAR 0 2
17609: PUSH
17610: LD_INT 1
17612: DOUBLE
17613: EQUAL
17614: IFTRUE 17618
17616: GO 17629
17618: POP
// bc_type := b_depot ; 2 :
17619: LD_ADDR_OWVAR 42
17623: PUSH
17624: LD_INT 0
17626: ST_TO_ADDR
17627: GO 18241
17629: LD_INT 2
17631: DOUBLE
17632: EQUAL
17633: IFTRUE 17637
17635: GO 17648
17637: POP
// bc_type := b_warehouse ; 3 :
17638: LD_ADDR_OWVAR 42
17642: PUSH
17643: LD_INT 1
17645: ST_TO_ADDR
17646: GO 18241
17648: LD_INT 3
17650: DOUBLE
17651: EQUAL
17652: IFTRUE 17656
17654: GO 17667
17656: POP
// bc_type := b_lab ; 4 .. 9 :
17657: LD_ADDR_OWVAR 42
17661: PUSH
17662: LD_INT 6
17664: ST_TO_ADDR
17665: GO 18241
17667: LD_INT 4
17669: DOUBLE
17670: GREATEREQUAL
17671: IFFALSE 17679
17673: LD_INT 9
17675: DOUBLE
17676: LESSEQUAL
17677: IFTRUE 17681
17679: GO 17733
17681: POP
// begin bc_type := b_lab_half ;
17682: LD_ADDR_OWVAR 42
17686: PUSH
17687: LD_INT 7
17689: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17690: LD_ADDR_OWVAR 44
17694: PUSH
17695: LD_INT 10
17697: PUSH
17698: LD_INT 11
17700: PUSH
17701: LD_INT 12
17703: PUSH
17704: LD_INT 15
17706: PUSH
17707: LD_INT 14
17709: PUSH
17710: LD_INT 13
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: PUSH
17721: LD_VAR 0 2
17725: PUSH
17726: LD_INT 3
17728: MINUS
17729: ARRAY
17730: ST_TO_ADDR
// end ; 10 .. 13 :
17731: GO 18241
17733: LD_INT 10
17735: DOUBLE
17736: GREATEREQUAL
17737: IFFALSE 17745
17739: LD_INT 13
17741: DOUBLE
17742: LESSEQUAL
17743: IFTRUE 17747
17745: GO 17824
17747: POP
// begin bc_type := b_lab_full ;
17748: LD_ADDR_OWVAR 42
17752: PUSH
17753: LD_INT 8
17755: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17756: LD_ADDR_OWVAR 44
17760: PUSH
17761: LD_INT 10
17763: PUSH
17764: LD_INT 12
17766: PUSH
17767: LD_INT 14
17769: PUSH
17770: LD_INT 13
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: PUSH
17779: LD_VAR 0 2
17783: PUSH
17784: LD_INT 9
17786: MINUS
17787: ARRAY
17788: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17789: LD_ADDR_OWVAR 45
17793: PUSH
17794: LD_INT 11
17796: PUSH
17797: LD_INT 15
17799: PUSH
17800: LD_INT 12
17802: PUSH
17803: LD_INT 15
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_VAR 0 2
17816: PUSH
17817: LD_INT 9
17819: MINUS
17820: ARRAY
17821: ST_TO_ADDR
// end ; 14 :
17822: GO 18241
17824: LD_INT 14
17826: DOUBLE
17827: EQUAL
17828: IFTRUE 17832
17830: GO 17843
17832: POP
// bc_type := b_workshop ; 15 :
17833: LD_ADDR_OWVAR 42
17837: PUSH
17838: LD_INT 2
17840: ST_TO_ADDR
17841: GO 18241
17843: LD_INT 15
17845: DOUBLE
17846: EQUAL
17847: IFTRUE 17851
17849: GO 17862
17851: POP
// bc_type := b_factory ; 16 :
17852: LD_ADDR_OWVAR 42
17856: PUSH
17857: LD_INT 3
17859: ST_TO_ADDR
17860: GO 18241
17862: LD_INT 16
17864: DOUBLE
17865: EQUAL
17866: IFTRUE 17870
17868: GO 17881
17870: POP
// bc_type := b_ext_gun ; 17 :
17871: LD_ADDR_OWVAR 42
17875: PUSH
17876: LD_INT 17
17878: ST_TO_ADDR
17879: GO 18241
17881: LD_INT 17
17883: DOUBLE
17884: EQUAL
17885: IFTRUE 17889
17887: GO 17917
17889: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17890: LD_ADDR_OWVAR 42
17894: PUSH
17895: LD_INT 19
17897: PUSH
17898: LD_INT 23
17900: PUSH
17901: LD_INT 19
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: PUSH
17909: LD_VAR 0 1
17913: ARRAY
17914: ST_TO_ADDR
17915: GO 18241
17917: LD_INT 18
17919: DOUBLE
17920: EQUAL
17921: IFTRUE 17925
17923: GO 17936
17925: POP
// bc_type := b_ext_radar ; 19 :
17926: LD_ADDR_OWVAR 42
17930: PUSH
17931: LD_INT 20
17933: ST_TO_ADDR
17934: GO 18241
17936: LD_INT 19
17938: DOUBLE
17939: EQUAL
17940: IFTRUE 17944
17942: GO 17955
17944: POP
// bc_type := b_ext_radio ; 20 :
17945: LD_ADDR_OWVAR 42
17949: PUSH
17950: LD_INT 22
17952: ST_TO_ADDR
17953: GO 18241
17955: LD_INT 20
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17974
17963: POP
// bc_type := b_ext_siberium ; 21 :
17964: LD_ADDR_OWVAR 42
17968: PUSH
17969: LD_INT 21
17971: ST_TO_ADDR
17972: GO 18241
17974: LD_INT 21
17976: DOUBLE
17977: EQUAL
17978: IFTRUE 17982
17980: GO 17993
17982: POP
// bc_type := b_ext_computer ; 22 :
17983: LD_ADDR_OWVAR 42
17987: PUSH
17988: LD_INT 24
17990: ST_TO_ADDR
17991: GO 18241
17993: LD_INT 22
17995: DOUBLE
17996: EQUAL
17997: IFTRUE 18001
17999: GO 18012
18001: POP
// bc_type := b_ext_track ; 23 :
18002: LD_ADDR_OWVAR 42
18006: PUSH
18007: LD_INT 16
18009: ST_TO_ADDR
18010: GO 18241
18012: LD_INT 23
18014: DOUBLE
18015: EQUAL
18016: IFTRUE 18020
18018: GO 18031
18020: POP
// bc_type := b_ext_laser ; 24 :
18021: LD_ADDR_OWVAR 42
18025: PUSH
18026: LD_INT 25
18028: ST_TO_ADDR
18029: GO 18241
18031: LD_INT 24
18033: DOUBLE
18034: EQUAL
18035: IFTRUE 18039
18037: GO 18050
18039: POP
// bc_type := b_control_tower ; 25 :
18040: LD_ADDR_OWVAR 42
18044: PUSH
18045: LD_INT 36
18047: ST_TO_ADDR
18048: GO 18241
18050: LD_INT 25
18052: DOUBLE
18053: EQUAL
18054: IFTRUE 18058
18056: GO 18069
18058: POP
// bc_type := b_breastwork ; 26 :
18059: LD_ADDR_OWVAR 42
18063: PUSH
18064: LD_INT 31
18066: ST_TO_ADDR
18067: GO 18241
18069: LD_INT 26
18071: DOUBLE
18072: EQUAL
18073: IFTRUE 18077
18075: GO 18088
18077: POP
// bc_type := b_bunker ; 27 :
18078: LD_ADDR_OWVAR 42
18082: PUSH
18083: LD_INT 32
18085: ST_TO_ADDR
18086: GO 18241
18088: LD_INT 27
18090: DOUBLE
18091: EQUAL
18092: IFTRUE 18096
18094: GO 18107
18096: POP
// bc_type := b_turret ; 28 :
18097: LD_ADDR_OWVAR 42
18101: PUSH
18102: LD_INT 33
18104: ST_TO_ADDR
18105: GO 18241
18107: LD_INT 28
18109: DOUBLE
18110: EQUAL
18111: IFTRUE 18115
18113: GO 18126
18115: POP
// bc_type := b_armoury ; 29 :
18116: LD_ADDR_OWVAR 42
18120: PUSH
18121: LD_INT 4
18123: ST_TO_ADDR
18124: GO 18241
18126: LD_INT 29
18128: DOUBLE
18129: EQUAL
18130: IFTRUE 18134
18132: GO 18145
18134: POP
// bc_type := b_barracks ; 30 :
18135: LD_ADDR_OWVAR 42
18139: PUSH
18140: LD_INT 5
18142: ST_TO_ADDR
18143: GO 18241
18145: LD_INT 30
18147: DOUBLE
18148: EQUAL
18149: IFTRUE 18153
18151: GO 18164
18153: POP
// bc_type := b_solar_power ; 31 :
18154: LD_ADDR_OWVAR 42
18158: PUSH
18159: LD_INT 27
18161: ST_TO_ADDR
18162: GO 18241
18164: LD_INT 31
18166: DOUBLE
18167: EQUAL
18168: IFTRUE 18172
18170: GO 18183
18172: POP
// bc_type := b_oil_power ; 32 :
18173: LD_ADDR_OWVAR 42
18177: PUSH
18178: LD_INT 26
18180: ST_TO_ADDR
18181: GO 18241
18183: LD_INT 32
18185: DOUBLE
18186: EQUAL
18187: IFTRUE 18191
18189: GO 18202
18191: POP
// bc_type := b_siberite_power ; 33 :
18192: LD_ADDR_OWVAR 42
18196: PUSH
18197: LD_INT 28
18199: ST_TO_ADDR
18200: GO 18241
18202: LD_INT 33
18204: DOUBLE
18205: EQUAL
18206: IFTRUE 18210
18208: GO 18221
18210: POP
// bc_type := b_oil_mine ; 34 :
18211: LD_ADDR_OWVAR 42
18215: PUSH
18216: LD_INT 29
18218: ST_TO_ADDR
18219: GO 18241
18221: LD_INT 34
18223: DOUBLE
18224: EQUAL
18225: IFTRUE 18229
18227: GO 18240
18229: POP
// bc_type := b_siberite_mine ; end ;
18230: LD_ADDR_OWVAR 42
18234: PUSH
18235: LD_INT 30
18237: ST_TO_ADDR
18238: GO 18241
18240: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18241: LD_ADDR_VAR 0 8
18245: PUSH
18246: LD_VAR 0 5
18250: PPUSH
18251: LD_VAR 0 6
18255: PPUSH
18256: LD_VAR 0 3
18260: PPUSH
18261: CALL_OW 47
18265: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18266: LD_OWVAR 42
18270: PUSH
18271: LD_INT 32
18273: PUSH
18274: LD_INT 33
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: IN
18281: IFFALSE 18297
// PlaceWeaponTurret ( b , weapon ) ;
18283: LD_VAR 0 8
18287: PPUSH
18288: LD_VAR 0 4
18292: PPUSH
18293: CALL_OW 431
// end ;
18297: LD_VAR 0 7
18301: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18302: LD_INT 0
18304: PPUSH
18305: PPUSH
18306: PPUSH
18307: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18308: LD_ADDR_VAR 0 4
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_OWVAR 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 30
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 30
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PPUSH
18357: CALL_OW 69
18361: ST_TO_ADDR
// if not tmp then
18362: LD_VAR 0 4
18366: NOT
18367: IFFALSE 18371
// exit ;
18369: GO 18430
// for i in tmp do
18371: LD_ADDR_VAR 0 2
18375: PUSH
18376: LD_VAR 0 4
18380: PUSH
18381: FOR_IN
18382: IFFALSE 18428
// for j = 1 to 3 do
18384: LD_ADDR_VAR 0 3
18388: PUSH
18389: DOUBLE
18390: LD_INT 1
18392: DEC
18393: ST_TO_ADDR
18394: LD_INT 3
18396: PUSH
18397: FOR_TO
18398: IFFALSE 18424
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18400: LD_VAR 0 2
18404: PPUSH
18405: CALL_OW 274
18409: PPUSH
18410: LD_VAR 0 3
18414: PPUSH
18415: LD_INT 99999
18417: PPUSH
18418: CALL_OW 277
18422: GO 18397
18424: POP
18425: POP
18426: GO 18381
18428: POP
18429: POP
// end ;
18430: LD_VAR 0 1
18434: RET
// export function hHackSetLevel10 ; var i , j ; begin
18435: LD_INT 0
18437: PPUSH
18438: PPUSH
18439: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: LD_INT 21
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18513
// if IsSelected ( i ) then
18463: LD_VAR 0 2
18467: PPUSH
18468: CALL_OW 306
18472: IFFALSE 18511
// begin for j := 1 to 4 do
18474: LD_ADDR_VAR 0 3
18478: PUSH
18479: DOUBLE
18480: LD_INT 1
18482: DEC
18483: ST_TO_ADDR
18484: LD_INT 4
18486: PUSH
18487: FOR_TO
18488: IFFALSE 18509
// SetSkill ( i , j , 10 ) ;
18490: LD_VAR 0 2
18494: PPUSH
18495: LD_VAR 0 3
18499: PPUSH
18500: LD_INT 10
18502: PPUSH
18503: CALL_OW 237
18507: GO 18487
18509: POP
18510: POP
// end ;
18511: GO 18460
18513: POP
18514: POP
// end ;
18515: LD_VAR 0 1
18519: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18520: LD_INT 0
18522: PPUSH
18523: PPUSH
18524: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18525: LD_ADDR_VAR 0 2
18529: PUSH
18530: LD_INT 22
18532: PUSH
18533: LD_OWVAR 2
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 21
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PPUSH
18556: CALL_OW 69
18560: PUSH
18561: FOR_IN
18562: IFFALSE 18603
// begin for j := 1 to 4 do
18564: LD_ADDR_VAR 0 3
18568: PUSH
18569: DOUBLE
18570: LD_INT 1
18572: DEC
18573: ST_TO_ADDR
18574: LD_INT 4
18576: PUSH
18577: FOR_TO
18578: IFFALSE 18599
// SetSkill ( i , j , 10 ) ;
18580: LD_VAR 0 2
18584: PPUSH
18585: LD_VAR 0 3
18589: PPUSH
18590: LD_INT 10
18592: PPUSH
18593: CALL_OW 237
18597: GO 18577
18599: POP
18600: POP
// end ;
18601: GO 18561
18603: POP
18604: POP
// end ;
18605: LD_VAR 0 1
18609: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18610: LD_INT 0
18612: PPUSH
// uc_side := your_side ;
18613: LD_ADDR_OWVAR 20
18617: PUSH
18618: LD_OWVAR 2
18622: ST_TO_ADDR
// uc_nation := nation ;
18623: LD_ADDR_OWVAR 21
18627: PUSH
18628: LD_VAR 0 1
18632: ST_TO_ADDR
// InitHc ;
18633: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18637: LD_INT 0
18639: PPUSH
18640: LD_VAR 0 2
18644: PPUSH
18645: LD_VAR 0 3
18649: PPUSH
18650: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18654: LD_VAR 0 4
18658: PPUSH
18659: LD_VAR 0 5
18663: PPUSH
18664: CALL_OW 428
18668: PUSH
18669: LD_INT 0
18671: EQUAL
18672: IFFALSE 18696
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18674: CALL_OW 44
18678: PPUSH
18679: LD_VAR 0 4
18683: PPUSH
18684: LD_VAR 0 5
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL_OW 48
// end ;
18696: LD_VAR 0 6
18700: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18701: LD_INT 0
18703: PPUSH
18704: PPUSH
// uc_side := your_side ;
18705: LD_ADDR_OWVAR 20
18709: PUSH
18710: LD_OWVAR 2
18714: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18715: LD_VAR 0 1
18719: PUSH
18720: LD_INT 1
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: LD_INT 3
18728: PUSH
18729: LD_INT 4
18731: PUSH
18732: LD_INT 5
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: IN
18742: IFFALSE 18754
// uc_nation := nation_american else
18744: LD_ADDR_OWVAR 21
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
18752: GO 18797
// if chassis in [ 11 , 12 , 13 , 14 ] then
18754: LD_VAR 0 1
18758: PUSH
18759: LD_INT 11
18761: PUSH
18762: LD_INT 12
18764: PUSH
18765: LD_INT 13
18767: PUSH
18768: LD_INT 14
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: IN
18777: IFFALSE 18789
// uc_nation := nation_arabian else
18779: LD_ADDR_OWVAR 21
18783: PUSH
18784: LD_INT 2
18786: ST_TO_ADDR
18787: GO 18797
// uc_nation := nation_russian ;
18789: LD_ADDR_OWVAR 21
18793: PUSH
18794: LD_INT 3
18796: ST_TO_ADDR
// vc_chassis := chassis ;
18797: LD_ADDR_OWVAR 37
18801: PUSH
18802: LD_VAR 0 1
18806: ST_TO_ADDR
// vc_engine := engine ;
18807: LD_ADDR_OWVAR 39
18811: PUSH
18812: LD_VAR 0 2
18816: ST_TO_ADDR
// vc_control := control ;
18817: LD_ADDR_OWVAR 38
18821: PUSH
18822: LD_VAR 0 3
18826: ST_TO_ADDR
// vc_weapon := weapon ;
18827: LD_ADDR_OWVAR 40
18831: PUSH
18832: LD_VAR 0 4
18836: ST_TO_ADDR
// un := CreateVehicle ;
18837: LD_ADDR_VAR 0 8
18841: PUSH
18842: CALL_OW 45
18846: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18847: LD_VAR 0 8
18851: PPUSH
18852: LD_INT 0
18854: PPUSH
18855: LD_INT 5
18857: PPUSH
18858: CALL_OW 12
18862: PPUSH
18863: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18867: LD_VAR 0 8
18871: PPUSH
18872: LD_VAR 0 5
18876: PPUSH
18877: LD_VAR 0 6
18881: PPUSH
18882: LD_INT 1
18884: PPUSH
18885: CALL_OW 48
// end ;
18889: LD_VAR 0 7
18893: RET
// export hInvincible ; every 1 do
18894: GO 18896
18896: DISABLE
// hInvincible := [ ] ;
18897: LD_ADDR_EXP 81
18901: PUSH
18902: EMPTY
18903: ST_TO_ADDR
18904: END
// every 10 do var i ;
18905: GO 18907
18907: DISABLE
18908: LD_INT 0
18910: PPUSH
// begin enable ;
18911: ENABLE
// if not hInvincible then
18912: LD_EXP 81
18916: NOT
18917: IFFALSE 18921
// exit ;
18919: GO 18965
// for i in hInvincible do
18921: LD_ADDR_VAR 0 1
18925: PUSH
18926: LD_EXP 81
18930: PUSH
18931: FOR_IN
18932: IFFALSE 18963
// if GetLives ( i ) < 1000 then
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL_OW 256
18943: PUSH
18944: LD_INT 1000
18946: LESS
18947: IFFALSE 18961
// SetLives ( i , 1000 ) ;
18949: LD_VAR 0 1
18953: PPUSH
18954: LD_INT 1000
18956: PPUSH
18957: CALL_OW 234
18961: GO 18931
18963: POP
18964: POP
// end ;
18965: PPOPN 1
18967: END
// export function hHackInvincible ; var i ; begin
18968: LD_INT 0
18970: PPUSH
18971: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18972: LD_ADDR_VAR 0 2
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 21
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 21
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 69
19009: PUSH
19010: FOR_IN
19011: IFFALSE 19072
// if IsSelected ( i ) then
19013: LD_VAR 0 2
19017: PPUSH
19018: CALL_OW 306
19022: IFFALSE 19070
// begin if i in hInvincible then
19024: LD_VAR 0 2
19028: PUSH
19029: LD_EXP 81
19033: IN
19034: IFFALSE 19054
// hInvincible := hInvincible diff i else
19036: LD_ADDR_EXP 81
19040: PUSH
19041: LD_EXP 81
19045: PUSH
19046: LD_VAR 0 2
19050: DIFF
19051: ST_TO_ADDR
19052: GO 19070
// hInvincible := hInvincible union i ;
19054: LD_ADDR_EXP 81
19058: PUSH
19059: LD_EXP 81
19063: PUSH
19064: LD_VAR 0 2
19068: UNION
19069: ST_TO_ADDR
// end ;
19070: GO 19010
19072: POP
19073: POP
// end ;
19074: LD_VAR 0 1
19078: RET
// export function hHackInvisible ; var i , j ; begin
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
19083: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19084: LD_ADDR_VAR 0 2
19088: PUSH
19089: LD_INT 21
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PPUSH
19099: CALL_OW 69
19103: PUSH
19104: FOR_IN
19105: IFFALSE 19129
// if IsSelected ( i ) then
19107: LD_VAR 0 2
19111: PPUSH
19112: CALL_OW 306
19116: IFFALSE 19127
// ComForceInvisible ( i ) ;
19118: LD_VAR 0 2
19122: PPUSH
19123: CALL_OW 496
19127: GO 19104
19129: POP
19130: POP
// end ;
19131: LD_VAR 0 1
19135: RET
// export function hHackChangeYourSide ; begin
19136: LD_INT 0
19138: PPUSH
// if your_side = 8 then
19139: LD_OWVAR 2
19143: PUSH
19144: LD_INT 8
19146: EQUAL
19147: IFFALSE 19159
// your_side := 0 else
19149: LD_ADDR_OWVAR 2
19153: PUSH
19154: LD_INT 0
19156: ST_TO_ADDR
19157: GO 19173
// your_side := your_side + 1 ;
19159: LD_ADDR_OWVAR 2
19163: PUSH
19164: LD_OWVAR 2
19168: PUSH
19169: LD_INT 1
19171: PLUS
19172: ST_TO_ADDR
// end ;
19173: LD_VAR 0 1
19177: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19178: LD_INT 0
19180: PPUSH
19181: PPUSH
19182: PPUSH
// for i in all_units do
19183: LD_ADDR_VAR 0 2
19187: PUSH
19188: LD_OWVAR 3
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19272
// if IsSelected ( i ) then
19196: LD_VAR 0 2
19200: PPUSH
19201: CALL_OW 306
19205: IFFALSE 19270
// begin j := GetSide ( i ) ;
19207: LD_ADDR_VAR 0 3
19211: PUSH
19212: LD_VAR 0 2
19216: PPUSH
19217: CALL_OW 255
19221: ST_TO_ADDR
// if j = 8 then
19222: LD_VAR 0 3
19226: PUSH
19227: LD_INT 8
19229: EQUAL
19230: IFFALSE 19242
// j := 0 else
19232: LD_ADDR_VAR 0 3
19236: PUSH
19237: LD_INT 0
19239: ST_TO_ADDR
19240: GO 19256
// j := j + 1 ;
19242: LD_ADDR_VAR 0 3
19246: PUSH
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 1
19254: PLUS
19255: ST_TO_ADDR
// SetSide ( i , j ) ;
19256: LD_VAR 0 2
19260: PPUSH
19261: LD_VAR 0 3
19265: PPUSH
19266: CALL_OW 235
// end ;
19270: GO 19193
19272: POP
19273: POP
// end ;
19274: LD_VAR 0 1
19278: RET
// export function hHackFog ; begin
19279: LD_INT 0
19281: PPUSH
// FogOff ( true ) ;
19282: LD_INT 1
19284: PPUSH
19285: CALL_OW 344
// end ;
19289: LD_VAR 0 1
19293: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19294: LD_INT 0
19296: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19297: LD_VAR 0 1
19301: PPUSH
19302: LD_VAR 0 2
19306: PPUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: LD_INT 1
19317: PPUSH
19318: CALL_OW 483
// CenterOnXY ( x , y ) ;
19322: LD_VAR 0 2
19326: PPUSH
19327: LD_VAR 0 3
19331: PPUSH
19332: CALL_OW 84
// end ; end_of_file
19336: LD_VAR 0 4
19340: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19341: LD_INT 0
19343: PPUSH
19344: PPUSH
19345: PPUSH
19346: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 264
19356: PUSH
19357: LD_EXP 97
19361: EQUAL
19362: IFFALSE 19434
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19364: LD_INT 68
19366: PPUSH
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 255
19376: PPUSH
19377: CALL_OW 321
19381: PUSH
19382: LD_INT 2
19384: EQUAL
19385: IFFALSE 19397
// eff := 70 else
19387: LD_ADDR_VAR 0 4
19391: PUSH
19392: LD_INT 70
19394: ST_TO_ADDR
19395: GO 19405
// eff := 30 ;
19397: LD_ADDR_VAR 0 4
19401: PUSH
19402: LD_INT 30
19404: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL_OW 250
19414: PPUSH
19415: LD_VAR 0 1
19419: PPUSH
19420: CALL_OW 251
19424: PPUSH
19425: LD_VAR 0 4
19429: PPUSH
19430: CALL_OW 495
// end ; end ;
19434: LD_VAR 0 2
19438: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19439: LD_INT 0
19441: PPUSH
// end ;
19442: LD_VAR 0 4
19446: RET
// export function SOS_Command ( cmd ) ; begin
19447: LD_INT 0
19449: PPUSH
// end ;
19450: LD_VAR 0 2
19454: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19455: LD_INT 0
19457: PPUSH
// end ;
19458: LD_VAR 0 6
19462: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19463: LD_INT 0
19465: PPUSH
19466: PPUSH
// if not vehicle or not factory then
19467: LD_VAR 0 1
19471: NOT
19472: PUSH
19473: LD_VAR 0 2
19477: NOT
19478: OR
19479: IFFALSE 19483
// exit ;
19481: GO 19714
// if factoryWaypoints >= factory then
19483: LD_EXP 82
19487: PUSH
19488: LD_VAR 0 2
19492: GREATEREQUAL
19493: IFFALSE 19714
// if factoryWaypoints [ factory ] then
19495: LD_EXP 82
19499: PUSH
19500: LD_VAR 0 2
19504: ARRAY
19505: IFFALSE 19714
// begin if GetControl ( vehicle ) = control_manual then
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 263
19516: PUSH
19517: LD_INT 1
19519: EQUAL
19520: IFFALSE 19601
// begin driver := IsDrivenBy ( vehicle ) ;
19522: LD_ADDR_VAR 0 4
19526: PUSH
19527: LD_VAR 0 1
19531: PPUSH
19532: CALL_OW 311
19536: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19537: LD_VAR 0 4
19541: PPUSH
19542: LD_EXP 82
19546: PUSH
19547: LD_VAR 0 2
19551: ARRAY
19552: PUSH
19553: LD_INT 3
19555: ARRAY
19556: PPUSH
19557: LD_EXP 82
19561: PUSH
19562: LD_VAR 0 2
19566: ARRAY
19567: PUSH
19568: LD_INT 4
19570: ARRAY
19571: PPUSH
19572: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19576: LD_VAR 0 4
19580: PPUSH
19581: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19585: LD_VAR 0 4
19589: PPUSH
19590: LD_VAR 0 2
19594: PPUSH
19595: CALL_OW 180
// end else
19599: GO 19714
// if GetControl ( vehicle ) = control_remote then
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 263
19610: PUSH
19611: LD_INT 2
19613: EQUAL
19614: IFFALSE 19675
// begin wait ( 0 0$2 ) ;
19616: LD_INT 70
19618: PPUSH
19619: CALL_OW 67
// if Connect ( vehicle ) then
19623: LD_VAR 0 1
19627: PPUSH
19628: CALL 32321 0 1
19632: IFFALSE 19673
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19634: LD_VAR 0 1
19638: PPUSH
19639: LD_EXP 82
19643: PUSH
19644: LD_VAR 0 2
19648: ARRAY
19649: PUSH
19650: LD_INT 3
19652: ARRAY
19653: PPUSH
19654: LD_EXP 82
19658: PUSH
19659: LD_VAR 0 2
19663: ARRAY
19664: PUSH
19665: LD_INT 4
19667: ARRAY
19668: PPUSH
19669: CALL_OW 171
// end else
19673: GO 19714
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19675: LD_VAR 0 1
19679: PPUSH
19680: LD_EXP 82
19684: PUSH
19685: LD_VAR 0 2
19689: ARRAY
19690: PUSH
19691: LD_INT 3
19693: ARRAY
19694: PPUSH
19695: LD_EXP 82
19699: PUSH
19700: LD_VAR 0 2
19704: ARRAY
19705: PUSH
19706: LD_INT 4
19708: ARRAY
19709: PPUSH
19710: CALL_OW 171
// end ; end ;
19714: LD_VAR 0 3
19718: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19719: LD_INT 0
19721: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19722: LD_VAR 0 1
19726: PUSH
19727: LD_INT 250
19729: EQUAL
19730: PUSH
19731: LD_VAR 0 2
19735: PPUSH
19736: CALL_OW 264
19740: PUSH
19741: LD_EXP 100
19745: EQUAL
19746: AND
19747: IFFALSE 19768
// MinerPlaceMine ( unit , x , y ) ;
19749: LD_VAR 0 2
19753: PPUSH
19754: LD_VAR 0 4
19758: PPUSH
19759: LD_VAR 0 5
19763: PPUSH
19764: CALL 22496 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19768: LD_VAR 0 1
19772: PUSH
19773: LD_INT 251
19775: EQUAL
19776: PUSH
19777: LD_VAR 0 2
19781: PPUSH
19782: CALL_OW 264
19786: PUSH
19787: LD_EXP 100
19791: EQUAL
19792: AND
19793: IFFALSE 19814
// MinerDetonateMine ( unit , x , y ) ;
19795: LD_VAR 0 2
19799: PPUSH
19800: LD_VAR 0 4
19804: PPUSH
19805: LD_VAR 0 5
19809: PPUSH
19810: CALL 22773 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19814: LD_VAR 0 1
19818: PUSH
19819: LD_INT 252
19821: EQUAL
19822: PUSH
19823: LD_VAR 0 2
19827: PPUSH
19828: CALL_OW 264
19832: PUSH
19833: LD_EXP 100
19837: EQUAL
19838: AND
19839: IFFALSE 19860
// MinerCreateMinefield ( unit , x , y ) ;
19841: LD_VAR 0 2
19845: PPUSH
19846: LD_VAR 0 4
19850: PPUSH
19851: LD_VAR 0 5
19855: PPUSH
19856: CALL 23190 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19860: LD_VAR 0 1
19864: PUSH
19865: LD_INT 253
19867: EQUAL
19868: PUSH
19869: LD_VAR 0 2
19873: PPUSH
19874: CALL_OW 257
19878: PUSH
19879: LD_INT 5
19881: EQUAL
19882: AND
19883: IFFALSE 19904
// ComBinocular ( unit , x , y ) ;
19885: LD_VAR 0 2
19889: PPUSH
19890: LD_VAR 0 4
19894: PPUSH
19895: LD_VAR 0 5
19899: PPUSH
19900: CALL 23561 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19904: LD_VAR 0 1
19908: PUSH
19909: LD_INT 254
19911: EQUAL
19912: PUSH
19913: LD_VAR 0 2
19917: PPUSH
19918: CALL_OW 264
19922: PUSH
19923: LD_EXP 95
19927: EQUAL
19928: AND
19929: PUSH
19930: LD_VAR 0 3
19934: PPUSH
19935: CALL_OW 263
19939: PUSH
19940: LD_INT 3
19942: EQUAL
19943: AND
19944: IFFALSE 19960
// HackDestroyVehicle ( unit , selectedUnit ) ;
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: CALL 21856 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19960: LD_VAR 0 1
19964: PUSH
19965: LD_INT 255
19967: EQUAL
19968: PUSH
19969: LD_VAR 0 2
19973: PPUSH
19974: CALL_OW 264
19978: PUSH
19979: LD_INT 14
19981: PUSH
19982: LD_INT 53
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: IN
19989: AND
19990: PUSH
19991: LD_VAR 0 4
19995: PPUSH
19996: LD_VAR 0 5
20000: PPUSH
20001: CALL_OW 488
20005: AND
20006: IFFALSE 20030
// CutTreeXYR ( unit , x , y , 12 ) ;
20008: LD_VAR 0 2
20012: PPUSH
20013: LD_VAR 0 4
20017: PPUSH
20018: LD_VAR 0 5
20022: PPUSH
20023: LD_INT 12
20025: PPUSH
20026: CALL 20422 0 4
// if cmd = 256 then
20030: LD_VAR 0 1
20034: PUSH
20035: LD_INT 256
20037: EQUAL
20038: IFFALSE 20059
// SetFactoryWaypoint ( unit , x , y ) ;
20040: LD_VAR 0 2
20044: PPUSH
20045: LD_VAR 0 4
20049: PPUSH
20050: LD_VAR 0 5
20054: PPUSH
20055: CALL 20064 0 3
// end ;
20059: LD_VAR 0 6
20063: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20064: LD_INT 0
20066: PPUSH
20067: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20068: LD_VAR 0 1
20072: NOT
20073: PUSH
20074: LD_VAR 0 2
20078: PPUSH
20079: LD_VAR 0 3
20083: PPUSH
20084: CALL_OW 488
20088: NOT
20089: OR
20090: PUSH
20091: LD_VAR 0 1
20095: PPUSH
20096: CALL_OW 266
20100: PUSH
20101: LD_INT 3
20103: NONEQUAL
20104: PUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 247
20114: PUSH
20115: LD_INT 1
20117: EQUAL
20118: NOT
20119: AND
20120: OR
20121: IFFALSE 20125
// exit ;
20123: GO 20274
// if GetType ( factory ) = unit_human then
20125: LD_VAR 0 1
20129: PPUSH
20130: CALL_OW 247
20134: PUSH
20135: LD_INT 1
20137: EQUAL
20138: IFFALSE 20155
// factory := IsInUnit ( factory ) ;
20140: LD_ADDR_VAR 0 1
20144: PUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 310
20154: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 266
20164: PUSH
20165: LD_INT 3
20167: NONEQUAL
20168: IFFALSE 20172
// exit ;
20170: GO 20274
// if HexInfo ( x , y ) = factory then
20172: LD_VAR 0 2
20176: PPUSH
20177: LD_VAR 0 3
20181: PPUSH
20182: CALL_OW 428
20186: PUSH
20187: LD_VAR 0 1
20191: EQUAL
20192: IFFALSE 20219
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20194: LD_ADDR_EXP 82
20198: PUSH
20199: LD_EXP 82
20203: PPUSH
20204: LD_VAR 0 1
20208: PPUSH
20209: LD_INT 0
20211: PPUSH
20212: CALL_OW 1
20216: ST_TO_ADDR
20217: GO 20270
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20219: LD_ADDR_EXP 82
20223: PUSH
20224: LD_EXP 82
20228: PPUSH
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_VAR 0 1
20238: PPUSH
20239: CALL_OW 255
20243: PUSH
20244: LD_VAR 0 1
20248: PUSH
20249: LD_VAR 0 2
20253: PUSH
20254: LD_VAR 0 3
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: PPUSH
20265: CALL_OW 1
20269: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20270: CALL 20279 0 0
// end ;
20274: LD_VAR 0 4
20278: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
20279: LD_INT 0
20281: PPUSH
20282: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20283: LD_STRING resetFactoryWaypoint();
20285: PPUSH
20286: CALL_OW 559
// if factoryWaypoints then
20290: LD_EXP 82
20294: IFFALSE 20417
// begin for i := 1 to factoryWaypoints do
20296: LD_ADDR_VAR 0 2
20300: PUSH
20301: DOUBLE
20302: LD_INT 1
20304: DEC
20305: ST_TO_ADDR
20306: LD_EXP 82
20310: PUSH
20311: FOR_TO
20312: IFFALSE 20415
// if factoryWaypoints [ i ] then
20314: LD_EXP 82
20318: PUSH
20319: LD_VAR 0 2
20323: ARRAY
20324: IFFALSE 20413
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
20326: LD_STRING setFactoryWaypointXY(
20328: PUSH
20329: LD_EXP 82
20333: PUSH
20334: LD_VAR 0 2
20338: ARRAY
20339: PUSH
20340: LD_INT 1
20342: ARRAY
20343: STR
20344: PUSH
20345: LD_STRING ,
20347: STR
20348: PUSH
20349: LD_EXP 82
20353: PUSH
20354: LD_VAR 0 2
20358: ARRAY
20359: PUSH
20360: LD_INT 2
20362: ARRAY
20363: STR
20364: PUSH
20365: LD_STRING ,
20367: STR
20368: PUSH
20369: LD_EXP 82
20373: PUSH
20374: LD_VAR 0 2
20378: ARRAY
20379: PUSH
20380: LD_INT 3
20382: ARRAY
20383: STR
20384: PUSH
20385: LD_STRING ,
20387: STR
20388: PUSH
20389: LD_EXP 82
20393: PUSH
20394: LD_VAR 0 2
20398: ARRAY
20399: PUSH
20400: LD_INT 4
20402: ARRAY
20403: STR
20404: PUSH
20405: LD_STRING )
20407: STR
20408: PPUSH
20409: CALL_OW 559
20413: GO 20311
20415: POP
20416: POP
// end ; end ;
20417: LD_VAR 0 1
20421: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20422: LD_INT 0
20424: PPUSH
20425: PPUSH
20426: PPUSH
20427: PPUSH
20428: PPUSH
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20433: LD_VAR 0 1
20437: NOT
20438: PUSH
20439: LD_VAR 0 2
20443: PPUSH
20444: LD_VAR 0 3
20448: PPUSH
20449: CALL_OW 488
20453: NOT
20454: OR
20455: PUSH
20456: LD_VAR 0 4
20460: NOT
20461: OR
20462: IFFALSE 20466
// exit ;
20464: GO 20806
// list := [ ] ;
20466: LD_ADDR_VAR 0 13
20470: PUSH
20471: EMPTY
20472: ST_TO_ADDR
// if x - r < 0 then
20473: LD_VAR 0 2
20477: PUSH
20478: LD_VAR 0 4
20482: MINUS
20483: PUSH
20484: LD_INT 0
20486: LESS
20487: IFFALSE 20499
// min_x := 0 else
20489: LD_ADDR_VAR 0 7
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
20497: GO 20515
// min_x := x - r ;
20499: LD_ADDR_VAR 0 7
20503: PUSH
20504: LD_VAR 0 2
20508: PUSH
20509: LD_VAR 0 4
20513: MINUS
20514: ST_TO_ADDR
// if y - r < 0 then
20515: LD_VAR 0 3
20519: PUSH
20520: LD_VAR 0 4
20524: MINUS
20525: PUSH
20526: LD_INT 0
20528: LESS
20529: IFFALSE 20541
// min_y := 0 else
20531: LD_ADDR_VAR 0 8
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
20539: GO 20557
// min_y := y - r ;
20541: LD_ADDR_VAR 0 8
20545: PUSH
20546: LD_VAR 0 3
20550: PUSH
20551: LD_VAR 0 4
20555: MINUS
20556: ST_TO_ADDR
// max_x := x + r ;
20557: LD_ADDR_VAR 0 9
20561: PUSH
20562: LD_VAR 0 2
20566: PUSH
20567: LD_VAR 0 4
20571: PLUS
20572: ST_TO_ADDR
// max_y := y + r ;
20573: LD_ADDR_VAR 0 10
20577: PUSH
20578: LD_VAR 0 3
20582: PUSH
20583: LD_VAR 0 4
20587: PLUS
20588: ST_TO_ADDR
// for _x = min_x to max_x do
20589: LD_ADDR_VAR 0 11
20593: PUSH
20594: DOUBLE
20595: LD_VAR 0 7
20599: DEC
20600: ST_TO_ADDR
20601: LD_VAR 0 9
20605: PUSH
20606: FOR_TO
20607: IFFALSE 20724
// for _y = min_y to max_y do
20609: LD_ADDR_VAR 0 12
20613: PUSH
20614: DOUBLE
20615: LD_VAR 0 8
20619: DEC
20620: ST_TO_ADDR
20621: LD_VAR 0 10
20625: PUSH
20626: FOR_TO
20627: IFFALSE 20720
// begin if not ValidHex ( _x , _y ) then
20629: LD_VAR 0 11
20633: PPUSH
20634: LD_VAR 0 12
20638: PPUSH
20639: CALL_OW 488
20643: NOT
20644: IFFALSE 20648
// continue ;
20646: GO 20626
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20648: LD_VAR 0 11
20652: PPUSH
20653: LD_VAR 0 12
20657: PPUSH
20658: CALL_OW 351
20662: PUSH
20663: LD_VAR 0 11
20667: PPUSH
20668: LD_VAR 0 12
20672: PPUSH
20673: CALL_OW 554
20677: AND
20678: IFFALSE 20718
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20680: LD_ADDR_VAR 0 13
20684: PUSH
20685: LD_VAR 0 13
20689: PPUSH
20690: LD_VAR 0 13
20694: PUSH
20695: LD_INT 1
20697: PLUS
20698: PPUSH
20699: LD_VAR 0 11
20703: PUSH
20704: LD_VAR 0 12
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PPUSH
20713: CALL_OW 2
20717: ST_TO_ADDR
// end ;
20718: GO 20626
20720: POP
20721: POP
20722: GO 20606
20724: POP
20725: POP
// if not list then
20726: LD_VAR 0 13
20730: NOT
20731: IFFALSE 20735
// exit ;
20733: GO 20806
// for i in list do
20735: LD_ADDR_VAR 0 6
20739: PUSH
20740: LD_VAR 0 13
20744: PUSH
20745: FOR_IN
20746: IFFALSE 20804
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20748: LD_VAR 0 1
20752: PPUSH
20753: LD_STRING M
20755: PUSH
20756: LD_VAR 0 6
20760: PUSH
20761: LD_INT 1
20763: ARRAY
20764: PUSH
20765: LD_VAR 0 6
20769: PUSH
20770: LD_INT 2
20772: ARRAY
20773: PUSH
20774: LD_INT 0
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: PUSH
20795: EMPTY
20796: LIST
20797: PPUSH
20798: CALL_OW 447
20802: GO 20745
20804: POP
20805: POP
// end ;
20806: LD_VAR 0 5
20810: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20811: LD_EXP 83
20815: NOT
20816: IFFALSE 20866
20818: GO 20820
20820: DISABLE
// begin initHack := true ;
20821: LD_ADDR_EXP 83
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// hackTanks := [ ] ;
20829: LD_ADDR_EXP 84
20833: PUSH
20834: EMPTY
20835: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20836: LD_ADDR_EXP 85
20840: PUSH
20841: EMPTY
20842: ST_TO_ADDR
// hackLimit := 3 ;
20843: LD_ADDR_EXP 86
20847: PUSH
20848: LD_INT 3
20850: ST_TO_ADDR
// hackDist := 12 ;
20851: LD_ADDR_EXP 87
20855: PUSH
20856: LD_INT 12
20858: ST_TO_ADDR
// hackCounter := [ ] ;
20859: LD_ADDR_EXP 88
20863: PUSH
20864: EMPTY
20865: ST_TO_ADDR
// end ;
20866: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20867: LD_EXP 83
20871: PUSH
20872: LD_INT 34
20874: PUSH
20875: LD_EXP 95
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PPUSH
20884: CALL_OW 69
20888: AND
20889: IFFALSE 21144
20891: GO 20893
20893: DISABLE
20894: LD_INT 0
20896: PPUSH
20897: PPUSH
// begin enable ;
20898: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20899: LD_ADDR_VAR 0 1
20903: PUSH
20904: LD_INT 34
20906: PUSH
20907: LD_EXP 95
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 69
20920: PUSH
20921: FOR_IN
20922: IFFALSE 21142
// begin if not i in hackTanks then
20924: LD_VAR 0 1
20928: PUSH
20929: LD_EXP 84
20933: IN
20934: NOT
20935: IFFALSE 21018
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20937: LD_ADDR_EXP 84
20941: PUSH
20942: LD_EXP 84
20946: PPUSH
20947: LD_EXP 84
20951: PUSH
20952: LD_INT 1
20954: PLUS
20955: PPUSH
20956: LD_VAR 0 1
20960: PPUSH
20961: CALL_OW 1
20965: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20966: LD_ADDR_EXP 85
20970: PUSH
20971: LD_EXP 85
20975: PPUSH
20976: LD_EXP 85
20980: PUSH
20981: LD_INT 1
20983: PLUS
20984: PPUSH
20985: EMPTY
20986: PPUSH
20987: CALL_OW 1
20991: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20992: LD_ADDR_EXP 88
20996: PUSH
20997: LD_EXP 88
21001: PPUSH
21002: LD_EXP 88
21006: PUSH
21007: LD_INT 1
21009: PLUS
21010: PPUSH
21011: EMPTY
21012: PPUSH
21013: CALL_OW 1
21017: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21018: LD_VAR 0 1
21022: PPUSH
21023: CALL_OW 302
21027: NOT
21028: IFFALSE 21041
// begin HackUnlinkAll ( i ) ;
21030: LD_VAR 0 1
21034: PPUSH
21035: CALL 21147 0 1
// continue ;
21039: GO 20921
// end ; HackCheckCapturedStatus ( i ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL 21590 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21050: LD_ADDR_VAR 0 2
21054: PUSH
21055: LD_INT 81
21057: PUSH
21058: LD_VAR 0 1
21062: PPUSH
21063: CALL_OW 255
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 33
21074: PUSH
21075: LD_INT 3
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 91
21084: PUSH
21085: LD_VAR 0 1
21089: PUSH
21090: LD_EXP 87
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 50
21102: PUSH
21103: EMPTY
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: PPUSH
21112: CALL_OW 69
21116: ST_TO_ADDR
// if not tmp then
21117: LD_VAR 0 2
21121: NOT
21122: IFFALSE 21126
// continue ;
21124: GO 20921
// HackLink ( i , tmp ) ;
21126: LD_VAR 0 1
21130: PPUSH
21131: LD_VAR 0 2
21135: PPUSH
21136: CALL 21283 0 2
// end ;
21140: GO 20921
21142: POP
21143: POP
// end ;
21144: PPOPN 2
21146: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21147: LD_INT 0
21149: PPUSH
21150: PPUSH
21151: PPUSH
// if not hack in hackTanks then
21152: LD_VAR 0 1
21156: PUSH
21157: LD_EXP 84
21161: IN
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21278
// index := GetElementIndex ( hackTanks , hack ) ;
21167: LD_ADDR_VAR 0 4
21171: PUSH
21172: LD_EXP 84
21176: PPUSH
21177: LD_VAR 0 1
21181: PPUSH
21182: CALL 29135 0 2
21186: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21187: LD_EXP 85
21191: PUSH
21192: LD_VAR 0 4
21196: ARRAY
21197: IFFALSE 21278
// begin for i in hackTanksCaptured [ index ] do
21199: LD_ADDR_VAR 0 3
21203: PUSH
21204: LD_EXP 85
21208: PUSH
21209: LD_VAR 0 4
21213: ARRAY
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21242
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21218: LD_VAR 0 3
21222: PUSH
21223: LD_INT 1
21225: ARRAY
21226: PPUSH
21227: LD_VAR 0 3
21231: PUSH
21232: LD_INT 2
21234: ARRAY
21235: PPUSH
21236: CALL_OW 235
21240: GO 21215
21242: POP
21243: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21244: LD_ADDR_EXP 85
21248: PUSH
21249: LD_EXP 85
21253: PPUSH
21254: LD_VAR 0 4
21258: PPUSH
21259: EMPTY
21260: PPUSH
21261: CALL_OW 1
21265: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21266: LD_VAR 0 1
21270: PPUSH
21271: LD_INT 0
21273: PPUSH
21274: CALL_OW 505
// end ; end ;
21278: LD_VAR 0 2
21282: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21283: LD_INT 0
21285: PPUSH
21286: PPUSH
21287: PPUSH
// if not hack in hackTanks or not vehicles then
21288: LD_VAR 0 1
21292: PUSH
21293: LD_EXP 84
21297: IN
21298: NOT
21299: PUSH
21300: LD_VAR 0 2
21304: NOT
21305: OR
21306: IFFALSE 21310
// exit ;
21308: GO 21585
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21310: LD_ADDR_VAR 0 2
21314: PUSH
21315: LD_VAR 0 1
21319: PPUSH
21320: LD_VAR 0 2
21324: PPUSH
21325: LD_INT 1
21327: PPUSH
21328: LD_INT 1
21330: PPUSH
21331: CALL 29785 0 4
21335: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21336: LD_ADDR_VAR 0 5
21340: PUSH
21341: LD_EXP 84
21345: PPUSH
21346: LD_VAR 0 1
21350: PPUSH
21351: CALL 29135 0 2
21355: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21356: LD_EXP 85
21360: PUSH
21361: LD_VAR 0 5
21365: ARRAY
21366: PUSH
21367: LD_EXP 86
21371: LESS
21372: IFFALSE 21561
// begin for i := 1 to vehicles do
21374: LD_ADDR_VAR 0 4
21378: PUSH
21379: DOUBLE
21380: LD_INT 1
21382: DEC
21383: ST_TO_ADDR
21384: LD_VAR 0 2
21388: PUSH
21389: FOR_TO
21390: IFFALSE 21559
// begin if hackTanksCaptured [ index ] = hackLimit then
21392: LD_EXP 85
21396: PUSH
21397: LD_VAR 0 5
21401: ARRAY
21402: PUSH
21403: LD_EXP 86
21407: EQUAL
21408: IFFALSE 21412
// break ;
21410: GO 21559
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21412: LD_ADDR_EXP 88
21416: PUSH
21417: LD_EXP 88
21421: PPUSH
21422: LD_VAR 0 5
21426: PPUSH
21427: LD_EXP 88
21431: PUSH
21432: LD_VAR 0 5
21436: ARRAY
21437: PUSH
21438: LD_INT 1
21440: PLUS
21441: PPUSH
21442: CALL_OW 1
21446: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21447: LD_ADDR_EXP 85
21451: PUSH
21452: LD_EXP 85
21456: PPUSH
21457: LD_VAR 0 5
21461: PUSH
21462: LD_EXP 85
21466: PUSH
21467: LD_VAR 0 5
21471: ARRAY
21472: PUSH
21473: LD_INT 1
21475: PLUS
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PPUSH
21481: LD_VAR 0 2
21485: PUSH
21486: LD_VAR 0 4
21490: ARRAY
21491: PUSH
21492: LD_VAR 0 2
21496: PUSH
21497: LD_VAR 0 4
21501: ARRAY
21502: PPUSH
21503: CALL_OW 255
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL 29350 0 3
21516: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21517: LD_VAR 0 2
21521: PUSH
21522: LD_VAR 0 4
21526: ARRAY
21527: PPUSH
21528: LD_VAR 0 1
21532: PPUSH
21533: CALL_OW 255
21537: PPUSH
21538: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21542: LD_VAR 0 2
21546: PUSH
21547: LD_VAR 0 4
21551: ARRAY
21552: PPUSH
21553: CALL_OW 141
// end ;
21557: GO 21389
21559: POP
21560: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21561: LD_VAR 0 1
21565: PPUSH
21566: LD_EXP 85
21570: PUSH
21571: LD_VAR 0 5
21575: ARRAY
21576: PUSH
21577: LD_INT 0
21579: PLUS
21580: PPUSH
21581: CALL_OW 505
// end ;
21585: LD_VAR 0 3
21589: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21590: LD_INT 0
21592: PPUSH
21593: PPUSH
21594: PPUSH
21595: PPUSH
// if not hack in hackTanks then
21596: LD_VAR 0 1
21600: PUSH
21601: LD_EXP 84
21605: IN
21606: NOT
21607: IFFALSE 21611
// exit ;
21609: GO 21851
// index := GetElementIndex ( hackTanks , hack ) ;
21611: LD_ADDR_VAR 0 4
21615: PUSH
21616: LD_EXP 84
21620: PPUSH
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL 29135 0 2
21630: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21631: LD_ADDR_VAR 0 3
21635: PUSH
21636: DOUBLE
21637: LD_EXP 85
21641: PUSH
21642: LD_VAR 0 4
21646: ARRAY
21647: INC
21648: ST_TO_ADDR
21649: LD_INT 1
21651: PUSH
21652: FOR_DOWNTO
21653: IFFALSE 21825
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21655: LD_ADDR_VAR 0 5
21659: PUSH
21660: LD_EXP 85
21664: PUSH
21665: LD_VAR 0 4
21669: ARRAY
21670: PUSH
21671: LD_VAR 0 3
21675: ARRAY
21676: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21677: LD_VAR 0 5
21681: PUSH
21682: LD_INT 1
21684: ARRAY
21685: PPUSH
21686: CALL_OW 302
21690: NOT
21691: PUSH
21692: LD_VAR 0 5
21696: PUSH
21697: LD_INT 1
21699: ARRAY
21700: PPUSH
21701: CALL_OW 255
21705: PUSH
21706: LD_VAR 0 1
21710: PPUSH
21711: CALL_OW 255
21715: NONEQUAL
21716: OR
21717: IFFALSE 21823
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21719: LD_VAR 0 5
21723: PUSH
21724: LD_INT 1
21726: ARRAY
21727: PPUSH
21728: CALL_OW 305
21732: PUSH
21733: LD_VAR 0 5
21737: PUSH
21738: LD_INT 1
21740: ARRAY
21741: PPUSH
21742: CALL_OW 255
21746: PUSH
21747: LD_VAR 0 1
21751: PPUSH
21752: CALL_OW 255
21756: EQUAL
21757: AND
21758: IFFALSE 21782
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21760: LD_VAR 0 5
21764: PUSH
21765: LD_INT 1
21767: ARRAY
21768: PPUSH
21769: LD_VAR 0 5
21773: PUSH
21774: LD_INT 2
21776: ARRAY
21777: PPUSH
21778: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21782: LD_ADDR_EXP 85
21786: PUSH
21787: LD_EXP 85
21791: PPUSH
21792: LD_VAR 0 4
21796: PPUSH
21797: LD_EXP 85
21801: PUSH
21802: LD_VAR 0 4
21806: ARRAY
21807: PPUSH
21808: LD_VAR 0 3
21812: PPUSH
21813: CALL_OW 3
21817: PPUSH
21818: CALL_OW 1
21822: ST_TO_ADDR
// end ; end ;
21823: GO 21652
21825: POP
21826: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21827: LD_VAR 0 1
21831: PPUSH
21832: LD_EXP 85
21836: PUSH
21837: LD_VAR 0 4
21841: ARRAY
21842: PUSH
21843: LD_INT 0
21845: PLUS
21846: PPUSH
21847: CALL_OW 505
// end ;
21851: LD_VAR 0 2
21855: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
// if not hack in hackTanks then
21862: LD_VAR 0 1
21866: PUSH
21867: LD_EXP 84
21871: IN
21872: NOT
21873: IFFALSE 21877
// exit ;
21875: GO 21962
// index := GetElementIndex ( hackTanks , hack ) ;
21877: LD_ADDR_VAR 0 5
21881: PUSH
21882: LD_EXP 84
21886: PPUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL 29135 0 2
21896: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21897: LD_ADDR_VAR 0 4
21901: PUSH
21902: DOUBLE
21903: LD_INT 1
21905: DEC
21906: ST_TO_ADDR
21907: LD_EXP 85
21911: PUSH
21912: LD_VAR 0 5
21916: ARRAY
21917: PUSH
21918: FOR_TO
21919: IFFALSE 21960
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21921: LD_EXP 85
21925: PUSH
21926: LD_VAR 0 5
21930: ARRAY
21931: PUSH
21932: LD_VAR 0 4
21936: ARRAY
21937: PUSH
21938: LD_INT 1
21940: ARRAY
21941: PUSH
21942: LD_VAR 0 2
21946: EQUAL
21947: IFFALSE 21958
// KillUnit ( vehicle ) ;
21949: LD_VAR 0 2
21953: PPUSH
21954: CALL_OW 66
21958: GO 21918
21960: POP
21961: POP
// end ;
21962: LD_VAR 0 3
21966: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21967: LD_EXP 89
21971: NOT
21972: IFFALSE 22007
21974: GO 21976
21976: DISABLE
// begin initMiner := true ;
21977: LD_ADDR_EXP 89
21981: PUSH
21982: LD_INT 1
21984: ST_TO_ADDR
// minersList := [ ] ;
21985: LD_ADDR_EXP 90
21989: PUSH
21990: EMPTY
21991: ST_TO_ADDR
// minerMinesList := [ ] ;
21992: LD_ADDR_EXP 91
21996: PUSH
21997: EMPTY
21998: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21999: LD_ADDR_EXP 92
22003: PUSH
22004: LD_INT 5
22006: ST_TO_ADDR
// end ;
22007: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22008: LD_EXP 89
22012: PUSH
22013: LD_INT 34
22015: PUSH
22016: LD_EXP 100
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PPUSH
22025: CALL_OW 69
22029: AND
22030: IFFALSE 22493
22032: GO 22034
22034: DISABLE
22035: LD_INT 0
22037: PPUSH
22038: PPUSH
22039: PPUSH
22040: PPUSH
// begin enable ;
22041: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22042: LD_ADDR_VAR 0 1
22046: PUSH
22047: LD_INT 34
22049: PUSH
22050: LD_EXP 100
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PPUSH
22059: CALL_OW 69
22063: PUSH
22064: FOR_IN
22065: IFFALSE 22137
// begin if not i in minersList then
22067: LD_VAR 0 1
22071: PUSH
22072: LD_EXP 90
22076: IN
22077: NOT
22078: IFFALSE 22135
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22080: LD_ADDR_EXP 90
22084: PUSH
22085: LD_EXP 90
22089: PPUSH
22090: LD_EXP 90
22094: PUSH
22095: LD_INT 1
22097: PLUS
22098: PPUSH
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL_OW 1
22108: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22109: LD_ADDR_EXP 91
22113: PUSH
22114: LD_EXP 91
22118: PPUSH
22119: LD_EXP 91
22123: PUSH
22124: LD_INT 1
22126: PLUS
22127: PPUSH
22128: EMPTY
22129: PPUSH
22130: CALL_OW 1
22134: ST_TO_ADDR
// end end ;
22135: GO 22064
22137: POP
22138: POP
// for i := minerMinesList downto 1 do
22139: LD_ADDR_VAR 0 1
22143: PUSH
22144: DOUBLE
22145: LD_EXP 91
22149: INC
22150: ST_TO_ADDR
22151: LD_INT 1
22153: PUSH
22154: FOR_DOWNTO
22155: IFFALSE 22491
// begin if IsLive ( minersList [ i ] ) then
22157: LD_EXP 90
22161: PUSH
22162: LD_VAR 0 1
22166: ARRAY
22167: PPUSH
22168: CALL_OW 300
22172: IFFALSE 22200
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22174: LD_EXP 90
22178: PUSH
22179: LD_VAR 0 1
22183: ARRAY
22184: PPUSH
22185: LD_EXP 91
22189: PUSH
22190: LD_VAR 0 1
22194: ARRAY
22195: PPUSH
22196: CALL_OW 505
// if not minerMinesList [ i ] then
22200: LD_EXP 91
22204: PUSH
22205: LD_VAR 0 1
22209: ARRAY
22210: NOT
22211: IFFALSE 22215
// continue ;
22213: GO 22154
// for j := minerMinesList [ i ] downto 1 do
22215: LD_ADDR_VAR 0 2
22219: PUSH
22220: DOUBLE
22221: LD_EXP 91
22225: PUSH
22226: LD_VAR 0 1
22230: ARRAY
22231: INC
22232: ST_TO_ADDR
22233: LD_INT 1
22235: PUSH
22236: FOR_DOWNTO
22237: IFFALSE 22487
// begin side := GetSide ( minersList [ i ] ) ;
22239: LD_ADDR_VAR 0 3
22243: PUSH
22244: LD_EXP 90
22248: PUSH
22249: LD_VAR 0 1
22253: ARRAY
22254: PPUSH
22255: CALL_OW 255
22259: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22260: LD_ADDR_VAR 0 4
22264: PUSH
22265: LD_EXP 91
22269: PUSH
22270: LD_VAR 0 1
22274: ARRAY
22275: PUSH
22276: LD_VAR 0 2
22280: ARRAY
22281: PUSH
22282: LD_INT 1
22284: ARRAY
22285: PPUSH
22286: LD_EXP 91
22290: PUSH
22291: LD_VAR 0 1
22295: ARRAY
22296: PUSH
22297: LD_VAR 0 2
22301: ARRAY
22302: PUSH
22303: LD_INT 2
22305: ARRAY
22306: PPUSH
22307: CALL_OW 428
22311: ST_TO_ADDR
// if not tmp then
22312: LD_VAR 0 4
22316: NOT
22317: IFFALSE 22321
// continue ;
22319: GO 22236
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22321: LD_VAR 0 4
22325: PUSH
22326: LD_INT 81
22328: PUSH
22329: LD_VAR 0 3
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PPUSH
22338: CALL_OW 69
22342: IN
22343: PUSH
22344: LD_EXP 91
22348: PUSH
22349: LD_VAR 0 1
22353: ARRAY
22354: PUSH
22355: LD_VAR 0 2
22359: ARRAY
22360: PUSH
22361: LD_INT 1
22363: ARRAY
22364: PPUSH
22365: LD_EXP 91
22369: PUSH
22370: LD_VAR 0 1
22374: ARRAY
22375: PUSH
22376: LD_VAR 0 2
22380: ARRAY
22381: PUSH
22382: LD_INT 2
22384: ARRAY
22385: PPUSH
22386: CALL_OW 458
22390: AND
22391: IFFALSE 22485
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22393: LD_EXP 91
22397: PUSH
22398: LD_VAR 0 1
22402: ARRAY
22403: PUSH
22404: LD_VAR 0 2
22408: ARRAY
22409: PUSH
22410: LD_INT 1
22412: ARRAY
22413: PPUSH
22414: LD_EXP 91
22418: PUSH
22419: LD_VAR 0 1
22423: ARRAY
22424: PUSH
22425: LD_VAR 0 2
22429: ARRAY
22430: PUSH
22431: LD_INT 2
22433: ARRAY
22434: PPUSH
22435: LD_VAR 0 3
22439: PPUSH
22440: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22444: LD_ADDR_EXP 91
22448: PUSH
22449: LD_EXP 91
22453: PPUSH
22454: LD_VAR 0 1
22458: PPUSH
22459: LD_EXP 91
22463: PUSH
22464: LD_VAR 0 1
22468: ARRAY
22469: PPUSH
22470: LD_VAR 0 2
22474: PPUSH
22475: CALL_OW 3
22479: PPUSH
22480: CALL_OW 1
22484: ST_TO_ADDR
// end ; end ;
22485: GO 22236
22487: POP
22488: POP
// end ;
22489: GO 22154
22491: POP
22492: POP
// end ;
22493: PPOPN 4
22495: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22496: LD_INT 0
22498: PPUSH
22499: PPUSH
// result := false ;
22500: LD_ADDR_VAR 0 4
22504: PUSH
22505: LD_INT 0
22507: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22508: LD_VAR 0 1
22512: PPUSH
22513: CALL_OW 264
22517: PUSH
22518: LD_EXP 100
22522: EQUAL
22523: NOT
22524: IFFALSE 22528
// exit ;
22526: GO 22768
// index := GetElementIndex ( minersList , unit ) ;
22528: LD_ADDR_VAR 0 5
22532: PUSH
22533: LD_EXP 90
22537: PPUSH
22538: LD_VAR 0 1
22542: PPUSH
22543: CALL 29135 0 2
22547: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22548: LD_EXP 91
22552: PUSH
22553: LD_VAR 0 5
22557: ARRAY
22558: PUSH
22559: LD_EXP 92
22563: GREATEREQUAL
22564: IFFALSE 22568
// exit ;
22566: GO 22768
// ComMoveXY ( unit , x , y ) ;
22568: LD_VAR 0 1
22572: PPUSH
22573: LD_VAR 0 2
22577: PPUSH
22578: LD_VAR 0 3
22582: PPUSH
22583: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22587: LD_INT 35
22589: PPUSH
22590: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22594: LD_VAR 0 1
22598: PPUSH
22599: LD_VAR 0 2
22603: PPUSH
22604: LD_VAR 0 3
22608: PPUSH
22609: CALL 59854 0 3
22613: NOT
22614: PUSH
22615: LD_VAR 0 1
22619: PPUSH
22620: CALL_OW 314
22624: AND
22625: IFFALSE 22629
// exit ;
22627: GO 22768
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22629: LD_VAR 0 2
22633: PPUSH
22634: LD_VAR 0 3
22638: PPUSH
22639: CALL_OW 428
22643: PUSH
22644: LD_VAR 0 1
22648: EQUAL
22649: PUSH
22650: LD_VAR 0 1
22654: PPUSH
22655: CALL_OW 314
22659: NOT
22660: AND
22661: IFFALSE 22587
// PlaySoundXY ( x , y , PlantMine ) ;
22663: LD_VAR 0 2
22667: PPUSH
22668: LD_VAR 0 3
22672: PPUSH
22673: LD_STRING PlantMine
22675: PPUSH
22676: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22680: LD_VAR 0 2
22684: PPUSH
22685: LD_VAR 0 3
22689: PPUSH
22690: LD_VAR 0 1
22694: PPUSH
22695: CALL_OW 255
22699: PPUSH
22700: LD_INT 0
22702: PPUSH
22703: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22707: LD_ADDR_EXP 91
22711: PUSH
22712: LD_EXP 91
22716: PPUSH
22717: LD_VAR 0 5
22721: PUSH
22722: LD_EXP 91
22726: PUSH
22727: LD_VAR 0 5
22731: ARRAY
22732: PUSH
22733: LD_INT 1
22735: PLUS
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: LD_VAR 0 2
22745: PUSH
22746: LD_VAR 0 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PPUSH
22755: CALL 29350 0 3
22759: ST_TO_ADDR
// result := true ;
22760: LD_ADDR_VAR 0 4
22764: PUSH
22765: LD_INT 1
22767: ST_TO_ADDR
// end ;
22768: LD_VAR 0 4
22772: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22773: LD_INT 0
22775: PPUSH
22776: PPUSH
22777: PPUSH
// if not unit in minersList then
22778: LD_VAR 0 1
22782: PUSH
22783: LD_EXP 90
22787: IN
22788: NOT
22789: IFFALSE 22793
// exit ;
22791: GO 23185
// index := GetElementIndex ( minersList , unit ) ;
22793: LD_ADDR_VAR 0 6
22797: PUSH
22798: LD_EXP 90
22802: PPUSH
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL 29135 0 2
22812: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22813: LD_ADDR_VAR 0 5
22817: PUSH
22818: DOUBLE
22819: LD_EXP 91
22823: PUSH
22824: LD_VAR 0 6
22828: ARRAY
22829: INC
22830: ST_TO_ADDR
22831: LD_INT 1
22833: PUSH
22834: FOR_DOWNTO
22835: IFFALSE 22996
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22837: LD_EXP 91
22841: PUSH
22842: LD_VAR 0 6
22846: ARRAY
22847: PUSH
22848: LD_VAR 0 5
22852: ARRAY
22853: PUSH
22854: LD_INT 1
22856: ARRAY
22857: PUSH
22858: LD_VAR 0 2
22862: EQUAL
22863: PUSH
22864: LD_EXP 91
22868: PUSH
22869: LD_VAR 0 6
22873: ARRAY
22874: PUSH
22875: LD_VAR 0 5
22879: ARRAY
22880: PUSH
22881: LD_INT 2
22883: ARRAY
22884: PUSH
22885: LD_VAR 0 3
22889: EQUAL
22890: AND
22891: IFFALSE 22994
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22893: LD_EXP 91
22897: PUSH
22898: LD_VAR 0 6
22902: ARRAY
22903: PUSH
22904: LD_VAR 0 5
22908: ARRAY
22909: PUSH
22910: LD_INT 1
22912: ARRAY
22913: PPUSH
22914: LD_EXP 91
22918: PUSH
22919: LD_VAR 0 6
22923: ARRAY
22924: PUSH
22925: LD_VAR 0 5
22929: ARRAY
22930: PUSH
22931: LD_INT 2
22933: ARRAY
22934: PPUSH
22935: LD_VAR 0 1
22939: PPUSH
22940: CALL_OW 255
22944: PPUSH
22945: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22949: LD_ADDR_EXP 91
22953: PUSH
22954: LD_EXP 91
22958: PPUSH
22959: LD_VAR 0 6
22963: PPUSH
22964: LD_EXP 91
22968: PUSH
22969: LD_VAR 0 6
22973: ARRAY
22974: PPUSH
22975: LD_VAR 0 5
22979: PPUSH
22980: CALL_OW 3
22984: PPUSH
22985: CALL_OW 1
22989: ST_TO_ADDR
// exit ;
22990: POP
22991: POP
22992: GO 23185
// end ; end ;
22994: GO 22834
22996: POP
22997: POP
// for i := minerMinesList [ index ] downto 1 do
22998: LD_ADDR_VAR 0 5
23002: PUSH
23003: DOUBLE
23004: LD_EXP 91
23008: PUSH
23009: LD_VAR 0 6
23013: ARRAY
23014: INC
23015: ST_TO_ADDR
23016: LD_INT 1
23018: PUSH
23019: FOR_DOWNTO
23020: IFFALSE 23183
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23022: LD_EXP 91
23026: PUSH
23027: LD_VAR 0 6
23031: ARRAY
23032: PUSH
23033: LD_VAR 0 5
23037: ARRAY
23038: PUSH
23039: LD_INT 1
23041: ARRAY
23042: PPUSH
23043: LD_EXP 91
23047: PUSH
23048: LD_VAR 0 6
23052: ARRAY
23053: PUSH
23054: LD_VAR 0 5
23058: ARRAY
23059: PUSH
23060: LD_INT 2
23062: ARRAY
23063: PPUSH
23064: LD_VAR 0 2
23068: PPUSH
23069: LD_VAR 0 3
23073: PPUSH
23074: CALL_OW 298
23078: PUSH
23079: LD_INT 6
23081: LESS
23082: IFFALSE 23181
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23084: LD_EXP 91
23088: PUSH
23089: LD_VAR 0 6
23093: ARRAY
23094: PUSH
23095: LD_VAR 0 5
23099: ARRAY
23100: PUSH
23101: LD_INT 1
23103: ARRAY
23104: PPUSH
23105: LD_EXP 91
23109: PUSH
23110: LD_VAR 0 6
23114: ARRAY
23115: PUSH
23116: LD_VAR 0 5
23120: ARRAY
23121: PUSH
23122: LD_INT 2
23124: ARRAY
23125: PPUSH
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 255
23135: PPUSH
23136: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23140: LD_ADDR_EXP 91
23144: PUSH
23145: LD_EXP 91
23149: PPUSH
23150: LD_VAR 0 6
23154: PPUSH
23155: LD_EXP 91
23159: PUSH
23160: LD_VAR 0 6
23164: ARRAY
23165: PPUSH
23166: LD_VAR 0 5
23170: PPUSH
23171: CALL_OW 3
23175: PPUSH
23176: CALL_OW 1
23180: ST_TO_ADDR
// end ; end ;
23181: GO 23019
23183: POP
23184: POP
// end ;
23185: LD_VAR 0 4
23189: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
23194: PPUSH
23195: PPUSH
23196: PPUSH
23197: PPUSH
23198: PPUSH
23199: PPUSH
23200: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23201: LD_VAR 0 1
23205: PPUSH
23206: CALL_OW 264
23210: PUSH
23211: LD_EXP 100
23215: EQUAL
23216: NOT
23217: PUSH
23218: LD_VAR 0 1
23222: PUSH
23223: LD_EXP 90
23227: IN
23228: NOT
23229: OR
23230: IFFALSE 23234
// exit ;
23232: GO 23556
// index := GetElementIndex ( minersList , unit ) ;
23234: LD_ADDR_VAR 0 6
23238: PUSH
23239: LD_EXP 90
23243: PPUSH
23244: LD_VAR 0 1
23248: PPUSH
23249: CALL 29135 0 2
23253: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23254: LD_ADDR_VAR 0 8
23258: PUSH
23259: LD_EXP 92
23263: PUSH
23264: LD_EXP 91
23268: PUSH
23269: LD_VAR 0 6
23273: ARRAY
23274: MINUS
23275: ST_TO_ADDR
// if not minesFreeAmount then
23276: LD_VAR 0 8
23280: NOT
23281: IFFALSE 23285
// exit ;
23283: GO 23556
// tmp := [ ] ;
23285: LD_ADDR_VAR 0 7
23289: PUSH
23290: EMPTY
23291: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23292: LD_ADDR_VAR 0 5
23296: PUSH
23297: DOUBLE
23298: LD_INT 1
23300: DEC
23301: ST_TO_ADDR
23302: LD_VAR 0 8
23306: PUSH
23307: FOR_TO
23308: IFFALSE 23503
// begin _d := rand ( 0 , 5 ) ;
23310: LD_ADDR_VAR 0 11
23314: PUSH
23315: LD_INT 0
23317: PPUSH
23318: LD_INT 5
23320: PPUSH
23321: CALL_OW 12
23325: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23326: LD_ADDR_VAR 0 12
23330: PUSH
23331: LD_INT 2
23333: PPUSH
23334: LD_INT 6
23336: PPUSH
23337: CALL_OW 12
23341: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23342: LD_ADDR_VAR 0 9
23346: PUSH
23347: LD_VAR 0 2
23351: PPUSH
23352: LD_VAR 0 11
23356: PPUSH
23357: LD_VAR 0 12
23361: PPUSH
23362: CALL_OW 272
23366: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23367: LD_ADDR_VAR 0 10
23371: PUSH
23372: LD_VAR 0 3
23376: PPUSH
23377: LD_VAR 0 11
23381: PPUSH
23382: LD_VAR 0 12
23386: PPUSH
23387: CALL_OW 273
23391: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23392: LD_VAR 0 9
23396: PPUSH
23397: LD_VAR 0 10
23401: PPUSH
23402: CALL_OW 488
23406: PUSH
23407: LD_VAR 0 9
23411: PUSH
23412: LD_VAR 0 10
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_VAR 0 7
23425: IN
23426: NOT
23427: AND
23428: PUSH
23429: LD_VAR 0 9
23433: PPUSH
23434: LD_VAR 0 10
23438: PPUSH
23439: CALL_OW 458
23443: NOT
23444: AND
23445: IFFALSE 23487
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23447: LD_ADDR_VAR 0 7
23451: PUSH
23452: LD_VAR 0 7
23456: PPUSH
23457: LD_VAR 0 7
23461: PUSH
23462: LD_INT 1
23464: PLUS
23465: PPUSH
23466: LD_VAR 0 9
23470: PUSH
23471: LD_VAR 0 10
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PPUSH
23480: CALL_OW 1
23484: ST_TO_ADDR
23485: GO 23501
// i := i - 1 ;
23487: LD_ADDR_VAR 0 5
23491: PUSH
23492: LD_VAR 0 5
23496: PUSH
23497: LD_INT 1
23499: MINUS
23500: ST_TO_ADDR
// end ;
23501: GO 23307
23503: POP
23504: POP
// for i in tmp do
23505: LD_ADDR_VAR 0 5
23509: PUSH
23510: LD_VAR 0 7
23514: PUSH
23515: FOR_IN
23516: IFFALSE 23554
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23518: LD_VAR 0 1
23522: PPUSH
23523: LD_VAR 0 5
23527: PUSH
23528: LD_INT 1
23530: ARRAY
23531: PPUSH
23532: LD_VAR 0 5
23536: PUSH
23537: LD_INT 2
23539: ARRAY
23540: PPUSH
23541: CALL 22496 0 3
23545: NOT
23546: IFFALSE 23552
// exit ;
23548: POP
23549: POP
23550: GO 23556
23552: GO 23515
23554: POP
23555: POP
// end ;
23556: LD_VAR 0 4
23560: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23561: LD_INT 0
23563: PPUSH
23564: PPUSH
23565: PPUSH
23566: PPUSH
23567: PPUSH
23568: PPUSH
23569: PPUSH
// if not GetClass ( unit ) = class_sniper then
23570: LD_VAR 0 1
23574: PPUSH
23575: CALL_OW 257
23579: PUSH
23580: LD_INT 5
23582: EQUAL
23583: NOT
23584: IFFALSE 23588
// exit ;
23586: GO 23976
// dist := 8 ;
23588: LD_ADDR_VAR 0 5
23592: PUSH
23593: LD_INT 8
23595: ST_TO_ADDR
// viewRange := 12 ;
23596: LD_ADDR_VAR 0 7
23600: PUSH
23601: LD_INT 12
23603: ST_TO_ADDR
// side := GetSide ( unit ) ;
23604: LD_ADDR_VAR 0 6
23608: PUSH
23609: LD_VAR 0 1
23613: PPUSH
23614: CALL_OW 255
23618: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23619: LD_INT 61
23621: PPUSH
23622: LD_VAR 0 6
23626: PPUSH
23627: CALL_OW 321
23631: PUSH
23632: LD_INT 2
23634: EQUAL
23635: IFFALSE 23645
// viewRange := 16 ;
23637: LD_ADDR_VAR 0 7
23641: PUSH
23642: LD_INT 16
23644: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23645: LD_VAR 0 1
23649: PPUSH
23650: LD_VAR 0 2
23654: PPUSH
23655: LD_VAR 0 3
23659: PPUSH
23660: CALL_OW 297
23664: PUSH
23665: LD_VAR 0 5
23669: GREATER
23670: IFFALSE 23749
// begin ComMoveXY ( unit , x , y ) ;
23672: LD_VAR 0 1
23676: PPUSH
23677: LD_VAR 0 2
23681: PPUSH
23682: LD_VAR 0 3
23686: PPUSH
23687: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23691: LD_INT 35
23693: PPUSH
23694: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23698: LD_VAR 0 1
23702: PPUSH
23703: LD_VAR 0 2
23707: PPUSH
23708: LD_VAR 0 3
23712: PPUSH
23713: CALL 59854 0 3
23717: NOT
23718: IFFALSE 23722
// exit ;
23720: GO 23976
// until GetDistUnitXY ( unit , x , y ) < dist ;
23722: LD_VAR 0 1
23726: PPUSH
23727: LD_VAR 0 2
23731: PPUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: CALL_OW 297
23741: PUSH
23742: LD_VAR 0 5
23746: LESS
23747: IFFALSE 23691
// end ; ComTurnXY ( unit , x , y ) ;
23749: LD_VAR 0 1
23753: PPUSH
23754: LD_VAR 0 2
23758: PPUSH
23759: LD_VAR 0 3
23763: PPUSH
23764: CALL_OW 118
// wait ( 5 ) ;
23768: LD_INT 5
23770: PPUSH
23771: CALL_OW 67
// _d := GetDir ( unit ) ;
23775: LD_ADDR_VAR 0 10
23779: PUSH
23780: LD_VAR 0 1
23784: PPUSH
23785: CALL_OW 254
23789: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23790: LD_ADDR_VAR 0 8
23794: PUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 250
23804: PPUSH
23805: LD_VAR 0 10
23809: PPUSH
23810: LD_VAR 0 5
23814: PPUSH
23815: CALL_OW 272
23819: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23820: LD_ADDR_VAR 0 9
23824: PUSH
23825: LD_VAR 0 1
23829: PPUSH
23830: CALL_OW 251
23834: PPUSH
23835: LD_VAR 0 10
23839: PPUSH
23840: LD_VAR 0 5
23844: PPUSH
23845: CALL_OW 273
23849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23850: LD_VAR 0 8
23854: PPUSH
23855: LD_VAR 0 9
23859: PPUSH
23860: CALL_OW 488
23864: NOT
23865: IFFALSE 23869
// exit ;
23867: GO 23976
// ComAnimCustom ( unit , 1 ) ;
23869: LD_VAR 0 1
23873: PPUSH
23874: LD_INT 1
23876: PPUSH
23877: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23881: LD_VAR 0 8
23885: PPUSH
23886: LD_VAR 0 9
23890: PPUSH
23891: LD_VAR 0 6
23895: PPUSH
23896: LD_VAR 0 7
23900: PPUSH
23901: CALL_OW 330
// repeat wait ( 1 ) ;
23905: LD_INT 1
23907: PPUSH
23908: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23912: LD_VAR 0 1
23916: PPUSH
23917: CALL_OW 316
23921: PUSH
23922: LD_VAR 0 1
23926: PPUSH
23927: CALL_OW 314
23931: OR
23932: PUSH
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 302
23942: NOT
23943: OR
23944: PUSH
23945: LD_VAR 0 1
23949: PPUSH
23950: CALL_OW 301
23954: OR
23955: IFFALSE 23905
// RemoveSeeing ( _x , _y , side ) ;
23957: LD_VAR 0 8
23961: PPUSH
23962: LD_VAR 0 9
23966: PPUSH
23967: LD_VAR 0 6
23971: PPUSH
23972: CALL_OW 331
// end ; end_of_file
23976: LD_VAR 0 4
23980: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23981: LD_VAR 0 1
23985: PUSH
23986: LD_INT 200
23988: DOUBLE
23989: GREATEREQUAL
23990: IFFALSE 23998
23992: LD_INT 299
23994: DOUBLE
23995: LESSEQUAL
23996: IFTRUE 24000
23998: GO 24032
24000: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24001: LD_VAR 0 1
24005: PPUSH
24006: LD_VAR 0 2
24010: PPUSH
24011: LD_VAR 0 3
24015: PPUSH
24016: LD_VAR 0 4
24020: PPUSH
24021: LD_VAR 0 5
24025: PPUSH
24026: CALL 19719 0 5
24030: GO 24109
24032: LD_INT 300
24034: DOUBLE
24035: GREATEREQUAL
24036: IFFALSE 24044
24038: LD_INT 399
24040: DOUBLE
24041: LESSEQUAL
24042: IFTRUE 24046
24044: GO 24108
24046: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24047: LD_VAR 0 1
24051: PPUSH
24052: LD_VAR 0 2
24056: PPUSH
24057: LD_VAR 0 3
24061: PPUSH
24062: LD_VAR 0 4
24066: PPUSH
24067: LD_VAR 0 5
24071: PPUSH
24072: LD_VAR 0 6
24076: PPUSH
24077: LD_VAR 0 7
24081: PPUSH
24082: LD_VAR 0 8
24086: PPUSH
24087: LD_VAR 0 9
24091: PPUSH
24092: LD_VAR 0 10
24096: PPUSH
24097: LD_VAR 0 11
24101: PPUSH
24102: CALL 17361 0 11
24106: GO 24109
24108: POP
// end ;
24109: PPOPN 11
24111: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_VAR 0 2
24121: PPUSH
24122: LD_VAR 0 3
24126: PPUSH
24127: LD_VAR 0 4
24131: PPUSH
24132: LD_VAR 0 5
24136: PPUSH
24137: CALL 19455 0 5
// end ; end_of_file
24141: PPOPN 5
24143: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
24144: LD_VAR 0 1
24148: PPUSH
24149: LD_VAR 0 2
24153: PPUSH
24154: LD_VAR 0 3
24158: PPUSH
24159: LD_VAR 0 4
24163: PPUSH
24164: LD_VAR 0 5
24168: PPUSH
24169: LD_VAR 0 6
24173: PPUSH
24174: CALL 5054 0 6
// end ;
24178: PPOPN 6
24180: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
24181: CALL 5029 0 0
// end ; end_of_file end_of_file
24185: PPOPN 1
24187: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24188: LD_INT 0
24190: PPUSH
// ar_miner := 81 ;
24191: LD_ADDR_EXP 100
24195: PUSH
24196: LD_INT 81
24198: ST_TO_ADDR
// ar_crane := 88 ;
24199: LD_ADDR_EXP 99
24203: PUSH
24204: LD_INT 88
24206: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24207: LD_ADDR_EXP 94
24211: PUSH
24212: LD_INT 89
24214: ST_TO_ADDR
// us_hack := 99 ;
24215: LD_ADDR_EXP 95
24219: PUSH
24220: LD_INT 99
24222: ST_TO_ADDR
// us_artillery := 97 ;
24223: LD_ADDR_EXP 96
24227: PUSH
24228: LD_INT 97
24230: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24231: LD_ADDR_EXP 97
24235: PUSH
24236: LD_INT 91
24238: ST_TO_ADDR
// ar_mortar := 92 ;
24239: LD_ADDR_EXP 98
24243: PUSH
24244: LD_INT 92
24246: ST_TO_ADDR
// ru_flamethrower := 93 ;
24247: LD_ADDR_EXP 101
24251: PUSH
24252: LD_INT 93
24254: ST_TO_ADDR
// ru_radar := 98 ;
24255: LD_ADDR_EXP 93
24259: PUSH
24260: LD_INT 98
24262: ST_TO_ADDR
// tech_Artillery := 80 ;
24263: LD_ADDR_EXP 102
24267: PUSH
24268: LD_INT 80
24270: ST_TO_ADDR
// tech_RadMat := 81 ;
24271: LD_ADDR_EXP 103
24275: PUSH
24276: LD_INT 81
24278: ST_TO_ADDR
// tech_BasicTools := 82 ;
24279: LD_ADDR_EXP 104
24283: PUSH
24284: LD_INT 82
24286: ST_TO_ADDR
// tech_Cargo := 83 ;
24287: LD_ADDR_EXP 105
24291: PUSH
24292: LD_INT 83
24294: ST_TO_ADDR
// tech_Track := 84 ;
24295: LD_ADDR_EXP 106
24299: PUSH
24300: LD_INT 84
24302: ST_TO_ADDR
// tech_Crane := 85 ;
24303: LD_ADDR_EXP 107
24307: PUSH
24308: LD_INT 85
24310: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24311: LD_ADDR_EXP 108
24315: PUSH
24316: LD_INT 86
24318: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24319: LD_ADDR_EXP 109
24323: PUSH
24324: LD_INT 87
24326: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24327: LD_ADDR_EXP 110
24331: PUSH
24332: LD_INT 88
24334: ST_TO_ADDR
// class_mastodont := 31 ;
24335: LD_ADDR_EXP 111
24339: PUSH
24340: LD_INT 31
24342: ST_TO_ADDR
// class_horse := 21 ;
24343: LD_ADDR_EXP 112
24347: PUSH
24348: LD_INT 21
24350: ST_TO_ADDR
// end ;
24351: LD_VAR 0 1
24355: RET
// every 1 do
24356: GO 24358
24358: DISABLE
// InitGlobalVariables ; end_of_file
24359: CALL 24188 0 0
24363: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24364: LD_INT 0
24366: PPUSH
24367: PPUSH
// if exist_mode then
24368: LD_VAR 0 2
24372: IFFALSE 24397
// unit := CreateCharacter ( prefix & ident ) else
24374: LD_ADDR_VAR 0 5
24378: PUSH
24379: LD_VAR 0 3
24383: PUSH
24384: LD_VAR 0 1
24388: STR
24389: PPUSH
24390: CALL_OW 34
24394: ST_TO_ADDR
24395: GO 24412
// unit := NewCharacter ( ident ) ;
24397: LD_ADDR_VAR 0 5
24401: PUSH
24402: LD_VAR 0 1
24406: PPUSH
24407: CALL_OW 25
24411: ST_TO_ADDR
// result := unit ;
24412: LD_ADDR_VAR 0 4
24416: PUSH
24417: LD_VAR 0 5
24421: ST_TO_ADDR
// end ;
24422: LD_VAR 0 4
24426: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24427: LD_INT 0
24429: PPUSH
24430: PPUSH
// if not side or not nation then
24431: LD_VAR 0 1
24435: NOT
24436: PUSH
24437: LD_VAR 0 2
24441: NOT
24442: OR
24443: IFFALSE 24447
// exit ;
24445: GO 25215
// case nation of nation_american :
24447: LD_VAR 0 2
24451: PUSH
24452: LD_INT 1
24454: DOUBLE
24455: EQUAL
24456: IFTRUE 24460
24458: GO 24674
24460: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24461: LD_ADDR_VAR 0 4
24465: PUSH
24466: LD_INT 35
24468: PUSH
24469: LD_INT 45
24471: PUSH
24472: LD_INT 46
24474: PUSH
24475: LD_INT 47
24477: PUSH
24478: LD_INT 82
24480: PUSH
24481: LD_INT 83
24483: PUSH
24484: LD_INT 84
24486: PUSH
24487: LD_INT 85
24489: PUSH
24490: LD_INT 86
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 6
24501: PUSH
24502: LD_INT 15
24504: PUSH
24505: LD_INT 16
24507: PUSH
24508: LD_INT 7
24510: PUSH
24511: LD_INT 12
24513: PUSH
24514: LD_INT 13
24516: PUSH
24517: LD_INT 10
24519: PUSH
24520: LD_INT 14
24522: PUSH
24523: LD_INT 20
24525: PUSH
24526: LD_INT 21
24528: PUSH
24529: LD_INT 22
24531: PUSH
24532: LD_INT 25
24534: PUSH
24535: LD_INT 32
24537: PUSH
24538: LD_INT 27
24540: PUSH
24541: LD_INT 36
24543: PUSH
24544: LD_INT 69
24546: PUSH
24547: LD_INT 39
24549: PUSH
24550: LD_INT 34
24552: PUSH
24553: LD_INT 40
24555: PUSH
24556: LD_INT 48
24558: PUSH
24559: LD_INT 49
24561: PUSH
24562: LD_INT 50
24564: PUSH
24565: LD_INT 51
24567: PUSH
24568: LD_INT 52
24570: PUSH
24571: LD_INT 53
24573: PUSH
24574: LD_INT 54
24576: PUSH
24577: LD_INT 55
24579: PUSH
24580: LD_INT 56
24582: PUSH
24583: LD_INT 57
24585: PUSH
24586: LD_INT 58
24588: PUSH
24589: LD_INT 59
24591: PUSH
24592: LD_INT 60
24594: PUSH
24595: LD_INT 61
24597: PUSH
24598: LD_INT 62
24600: PUSH
24601: LD_INT 80
24603: PUSH
24604: LD_INT 82
24606: PUSH
24607: LD_INT 83
24609: PUSH
24610: LD_INT 84
24612: PUSH
24613: LD_INT 85
24615: PUSH
24616: LD_INT 86
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: ST_TO_ADDR
24672: GO 25139
24674: LD_INT 2
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24908
24682: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24683: LD_ADDR_VAR 0 4
24687: PUSH
24688: LD_INT 35
24690: PUSH
24691: LD_INT 45
24693: PUSH
24694: LD_INT 46
24696: PUSH
24697: LD_INT 47
24699: PUSH
24700: LD_INT 82
24702: PUSH
24703: LD_INT 83
24705: PUSH
24706: LD_INT 84
24708: PUSH
24709: LD_INT 85
24711: PUSH
24712: LD_INT 87
24714: PUSH
24715: LD_INT 70
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: LD_INT 11
24723: PUSH
24724: LD_INT 3
24726: PUSH
24727: LD_INT 4
24729: PUSH
24730: LD_INT 5
24732: PUSH
24733: LD_INT 6
24735: PUSH
24736: LD_INT 15
24738: PUSH
24739: LD_INT 18
24741: PUSH
24742: LD_INT 7
24744: PUSH
24745: LD_INT 17
24747: PUSH
24748: LD_INT 8
24750: PUSH
24751: LD_INT 20
24753: PUSH
24754: LD_INT 21
24756: PUSH
24757: LD_INT 22
24759: PUSH
24760: LD_INT 72
24762: PUSH
24763: LD_INT 26
24765: PUSH
24766: LD_INT 69
24768: PUSH
24769: LD_INT 39
24771: PUSH
24772: LD_INT 40
24774: PUSH
24775: LD_INT 41
24777: PUSH
24778: LD_INT 42
24780: PUSH
24781: LD_INT 43
24783: PUSH
24784: LD_INT 48
24786: PUSH
24787: LD_INT 49
24789: PUSH
24790: LD_INT 50
24792: PUSH
24793: LD_INT 51
24795: PUSH
24796: LD_INT 52
24798: PUSH
24799: LD_INT 53
24801: PUSH
24802: LD_INT 54
24804: PUSH
24805: LD_INT 55
24807: PUSH
24808: LD_INT 56
24810: PUSH
24811: LD_INT 60
24813: PUSH
24814: LD_INT 61
24816: PUSH
24817: LD_INT 62
24819: PUSH
24820: LD_INT 66
24822: PUSH
24823: LD_INT 67
24825: PUSH
24826: LD_INT 68
24828: PUSH
24829: LD_INT 81
24831: PUSH
24832: LD_INT 82
24834: PUSH
24835: LD_INT 83
24837: PUSH
24838: LD_INT 84
24840: PUSH
24841: LD_INT 85
24843: PUSH
24844: LD_INT 87
24846: PUSH
24847: LD_INT 88
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: ST_TO_ADDR
24906: GO 25139
24908: LD_INT 3
24910: DOUBLE
24911: EQUAL
24912: IFTRUE 24916
24914: GO 25138
24916: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24917: LD_ADDR_VAR 0 4
24921: PUSH
24922: LD_INT 46
24924: PUSH
24925: LD_INT 47
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: LD_INT 2
24933: PUSH
24934: LD_INT 82
24936: PUSH
24937: LD_INT 83
24939: PUSH
24940: LD_INT 84
24942: PUSH
24943: LD_INT 85
24945: PUSH
24946: LD_INT 86
24948: PUSH
24949: LD_INT 11
24951: PUSH
24952: LD_INT 9
24954: PUSH
24955: LD_INT 20
24957: PUSH
24958: LD_INT 19
24960: PUSH
24961: LD_INT 21
24963: PUSH
24964: LD_INT 24
24966: PUSH
24967: LD_INT 22
24969: PUSH
24970: LD_INT 25
24972: PUSH
24973: LD_INT 28
24975: PUSH
24976: LD_INT 29
24978: PUSH
24979: LD_INT 30
24981: PUSH
24982: LD_INT 31
24984: PUSH
24985: LD_INT 37
24987: PUSH
24988: LD_INT 38
24990: PUSH
24991: LD_INT 32
24993: PUSH
24994: LD_INT 27
24996: PUSH
24997: LD_INT 33
24999: PUSH
25000: LD_INT 69
25002: PUSH
25003: LD_INT 39
25005: PUSH
25006: LD_INT 34
25008: PUSH
25009: LD_INT 40
25011: PUSH
25012: LD_INT 71
25014: PUSH
25015: LD_INT 23
25017: PUSH
25018: LD_INT 44
25020: PUSH
25021: LD_INT 48
25023: PUSH
25024: LD_INT 49
25026: PUSH
25027: LD_INT 50
25029: PUSH
25030: LD_INT 51
25032: PUSH
25033: LD_INT 52
25035: PUSH
25036: LD_INT 53
25038: PUSH
25039: LD_INT 54
25041: PUSH
25042: LD_INT 55
25044: PUSH
25045: LD_INT 56
25047: PUSH
25048: LD_INT 57
25050: PUSH
25051: LD_INT 58
25053: PUSH
25054: LD_INT 59
25056: PUSH
25057: LD_INT 63
25059: PUSH
25060: LD_INT 64
25062: PUSH
25063: LD_INT 65
25065: PUSH
25066: LD_INT 82
25068: PUSH
25069: LD_INT 83
25071: PUSH
25072: LD_INT 84
25074: PUSH
25075: LD_INT 85
25077: PUSH
25078: LD_INT 86
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: ST_TO_ADDR
25136: GO 25139
25138: POP
// if state > - 1 and state < 3 then
25139: LD_VAR 0 3
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: GREATER
25148: PUSH
25149: LD_VAR 0 3
25153: PUSH
25154: LD_INT 3
25156: LESS
25157: AND
25158: IFFALSE 25215
// for i in result do
25160: LD_ADDR_VAR 0 5
25164: PUSH
25165: LD_VAR 0 4
25169: PUSH
25170: FOR_IN
25171: IFFALSE 25213
// if GetTech ( i , side ) <> state then
25173: LD_VAR 0 5
25177: PPUSH
25178: LD_VAR 0 1
25182: PPUSH
25183: CALL_OW 321
25187: PUSH
25188: LD_VAR 0 3
25192: NONEQUAL
25193: IFFALSE 25211
// result := result diff i ;
25195: LD_ADDR_VAR 0 4
25199: PUSH
25200: LD_VAR 0 4
25204: PUSH
25205: LD_VAR 0 5
25209: DIFF
25210: ST_TO_ADDR
25211: GO 25170
25213: POP
25214: POP
// end ;
25215: LD_VAR 0 4
25219: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25220: LD_INT 0
25222: PPUSH
25223: PPUSH
25224: PPUSH
// result := true ;
25225: LD_ADDR_VAR 0 3
25229: PUSH
25230: LD_INT 1
25232: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25233: LD_ADDR_VAR 0 5
25237: PUSH
25238: LD_VAR 0 2
25242: PPUSH
25243: CALL_OW 480
25247: ST_TO_ADDR
// if not tmp then
25248: LD_VAR 0 5
25252: NOT
25253: IFFALSE 25257
// exit ;
25255: GO 25306
// for i in tmp do
25257: LD_ADDR_VAR 0 4
25261: PUSH
25262: LD_VAR 0 5
25266: PUSH
25267: FOR_IN
25268: IFFALSE 25304
// if GetTech ( i , side ) <> state_researched then
25270: LD_VAR 0 4
25274: PPUSH
25275: LD_VAR 0 1
25279: PPUSH
25280: CALL_OW 321
25284: PUSH
25285: LD_INT 2
25287: NONEQUAL
25288: IFFALSE 25302
// begin result := false ;
25290: LD_ADDR_VAR 0 3
25294: PUSH
25295: LD_INT 0
25297: ST_TO_ADDR
// exit ;
25298: POP
25299: POP
25300: GO 25306
// end ;
25302: GO 25267
25304: POP
25305: POP
// end ;
25306: LD_VAR 0 3
25310: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25326: LD_VAR 0 1
25330: NOT
25331: PUSH
25332: LD_VAR 0 1
25336: PPUSH
25337: CALL_OW 257
25341: PUSH
25342: LD_INT 9
25344: NONEQUAL
25345: OR
25346: IFFALSE 25350
// exit ;
25348: GO 25923
// side := GetSide ( unit ) ;
25350: LD_ADDR_VAR 0 9
25354: PUSH
25355: LD_VAR 0 1
25359: PPUSH
25360: CALL_OW 255
25364: ST_TO_ADDR
// tech_space := tech_spacanom ;
25365: LD_ADDR_VAR 0 12
25369: PUSH
25370: LD_INT 29
25372: ST_TO_ADDR
// tech_time := tech_taurad ;
25373: LD_ADDR_VAR 0 13
25377: PUSH
25378: LD_INT 28
25380: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25381: LD_ADDR_VAR 0 11
25385: PUSH
25386: LD_VAR 0 1
25390: PPUSH
25391: CALL_OW 310
25395: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25396: LD_VAR 0 11
25400: PPUSH
25401: CALL_OW 247
25405: PUSH
25406: LD_INT 2
25408: EQUAL
25409: IFFALSE 25413
// exit ;
25411: GO 25923
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25413: LD_ADDR_VAR 0 8
25417: PUSH
25418: LD_INT 81
25420: PUSH
25421: LD_VAR 0 9
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 3
25432: PUSH
25433: LD_INT 21
25435: PUSH
25436: LD_INT 3
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: ST_TO_ADDR
// if not tmp then
25456: LD_VAR 0 8
25460: NOT
25461: IFFALSE 25465
// exit ;
25463: GO 25923
// if in_unit then
25465: LD_VAR 0 11
25469: IFFALSE 25493
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25471: LD_ADDR_VAR 0 10
25475: PUSH
25476: LD_VAR 0 8
25480: PPUSH
25481: LD_VAR 0 11
25485: PPUSH
25486: CALL_OW 74
25490: ST_TO_ADDR
25491: GO 25513
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25493: LD_ADDR_VAR 0 10
25497: PUSH
25498: LD_VAR 0 8
25502: PPUSH
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL_OW 74
25512: ST_TO_ADDR
// if not enemy then
25513: LD_VAR 0 10
25517: NOT
25518: IFFALSE 25522
// exit ;
25520: GO 25923
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25522: LD_VAR 0 11
25526: PUSH
25527: LD_VAR 0 11
25531: PPUSH
25532: LD_VAR 0 10
25536: PPUSH
25537: CALL_OW 296
25541: PUSH
25542: LD_INT 13
25544: GREATER
25545: AND
25546: PUSH
25547: LD_VAR 0 1
25551: PPUSH
25552: LD_VAR 0 10
25556: PPUSH
25557: CALL_OW 296
25561: PUSH
25562: LD_INT 12
25564: GREATER
25565: OR
25566: IFFALSE 25570
// exit ;
25568: GO 25923
// missile := [ 1 ] ;
25570: LD_ADDR_VAR 0 14
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25581: LD_VAR 0 9
25585: PPUSH
25586: LD_VAR 0 12
25590: PPUSH
25591: CALL_OW 325
25595: IFFALSE 25624
// missile := Replace ( missile , missile + 1 , 2 ) ;
25597: LD_ADDR_VAR 0 14
25601: PUSH
25602: LD_VAR 0 14
25606: PPUSH
25607: LD_VAR 0 14
25611: PUSH
25612: LD_INT 1
25614: PLUS
25615: PPUSH
25616: LD_INT 2
25618: PPUSH
25619: CALL_OW 1
25623: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25624: LD_VAR 0 9
25628: PPUSH
25629: LD_VAR 0 13
25633: PPUSH
25634: CALL_OW 325
25638: PUSH
25639: LD_VAR 0 10
25643: PPUSH
25644: CALL_OW 255
25648: PPUSH
25649: LD_VAR 0 13
25653: PPUSH
25654: CALL_OW 325
25658: NOT
25659: AND
25660: IFFALSE 25689
// missile := Replace ( missile , missile + 1 , 3 ) ;
25662: LD_ADDR_VAR 0 14
25666: PUSH
25667: LD_VAR 0 14
25671: PPUSH
25672: LD_VAR 0 14
25676: PUSH
25677: LD_INT 1
25679: PLUS
25680: PPUSH
25681: LD_INT 3
25683: PPUSH
25684: CALL_OW 1
25688: ST_TO_ADDR
// if missile < 2 then
25689: LD_VAR 0 14
25693: PUSH
25694: LD_INT 2
25696: LESS
25697: IFFALSE 25701
// exit ;
25699: GO 25923
// x := GetX ( enemy ) ;
25701: LD_ADDR_VAR 0 4
25705: PUSH
25706: LD_VAR 0 10
25710: PPUSH
25711: CALL_OW 250
25715: ST_TO_ADDR
// y := GetY ( enemy ) ;
25716: LD_ADDR_VAR 0 5
25720: PUSH
25721: LD_VAR 0 10
25725: PPUSH
25726: CALL_OW 251
25730: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25731: LD_ADDR_VAR 0 6
25735: PUSH
25736: LD_VAR 0 4
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PPUSH
25745: LD_INT 1
25747: PPUSH
25748: CALL_OW 12
25752: PLUS
25753: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25754: LD_ADDR_VAR 0 7
25758: PUSH
25759: LD_VAR 0 5
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PPUSH
25768: LD_INT 1
25770: PPUSH
25771: CALL_OW 12
25775: PLUS
25776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25777: LD_VAR 0 6
25781: PPUSH
25782: LD_VAR 0 7
25786: PPUSH
25787: CALL_OW 488
25791: NOT
25792: IFFALSE 25814
// begin _x := x ;
25794: LD_ADDR_VAR 0 6
25798: PUSH
25799: LD_VAR 0 4
25803: ST_TO_ADDR
// _y := y ;
25804: LD_ADDR_VAR 0 7
25808: PUSH
25809: LD_VAR 0 5
25813: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25814: LD_ADDR_VAR 0 3
25818: PUSH
25819: LD_INT 1
25821: PPUSH
25822: LD_VAR 0 14
25826: PPUSH
25827: CALL_OW 12
25831: ST_TO_ADDR
// case i of 1 :
25832: LD_VAR 0 3
25836: PUSH
25837: LD_INT 1
25839: DOUBLE
25840: EQUAL
25841: IFTRUE 25845
25843: GO 25862
25845: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25846: LD_VAR 0 1
25850: PPUSH
25851: LD_VAR 0 10
25855: PPUSH
25856: CALL_OW 115
25860: GO 25923
25862: LD_INT 2
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25870
25868: GO 25892
25870: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25871: LD_VAR 0 1
25875: PPUSH
25876: LD_VAR 0 6
25880: PPUSH
25881: LD_VAR 0 7
25885: PPUSH
25886: CALL_OW 153
25890: GO 25923
25892: LD_INT 3
25894: DOUBLE
25895: EQUAL
25896: IFTRUE 25900
25898: GO 25922
25900: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25901: LD_VAR 0 1
25905: PPUSH
25906: LD_VAR 0 6
25910: PPUSH
25911: LD_VAR 0 7
25915: PPUSH
25916: CALL_OW 154
25920: GO 25923
25922: POP
// end ;
25923: LD_VAR 0 2
25927: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25928: LD_INT 0
25930: PPUSH
25931: PPUSH
25932: PPUSH
25933: PPUSH
25934: PPUSH
25935: PPUSH
// if not unit or not building then
25936: LD_VAR 0 1
25940: NOT
25941: PUSH
25942: LD_VAR 0 2
25946: NOT
25947: OR
25948: IFFALSE 25952
// exit ;
25950: GO 26110
// x := GetX ( building ) ;
25952: LD_ADDR_VAR 0 5
25956: PUSH
25957: LD_VAR 0 2
25961: PPUSH
25962: CALL_OW 250
25966: ST_TO_ADDR
// y := GetY ( building ) ;
25967: LD_ADDR_VAR 0 6
25971: PUSH
25972: LD_VAR 0 2
25976: PPUSH
25977: CALL_OW 251
25981: ST_TO_ADDR
// for i = 0 to 5 do
25982: LD_ADDR_VAR 0 4
25986: PUSH
25987: DOUBLE
25988: LD_INT 0
25990: DEC
25991: ST_TO_ADDR
25992: LD_INT 5
25994: PUSH
25995: FOR_TO
25996: IFFALSE 26108
// begin _x := ShiftX ( x , i , 3 ) ;
25998: LD_ADDR_VAR 0 7
26002: PUSH
26003: LD_VAR 0 5
26007: PPUSH
26008: LD_VAR 0 4
26012: PPUSH
26013: LD_INT 3
26015: PPUSH
26016: CALL_OW 272
26020: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26021: LD_ADDR_VAR 0 8
26025: PUSH
26026: LD_VAR 0 6
26030: PPUSH
26031: LD_VAR 0 4
26035: PPUSH
26036: LD_INT 3
26038: PPUSH
26039: CALL_OW 273
26043: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26044: LD_VAR 0 7
26048: PPUSH
26049: LD_VAR 0 8
26053: PPUSH
26054: CALL_OW 488
26058: NOT
26059: IFFALSE 26063
// continue ;
26061: GO 25995
// if HexInfo ( _x , _y ) = 0 then
26063: LD_VAR 0 7
26067: PPUSH
26068: LD_VAR 0 8
26072: PPUSH
26073: CALL_OW 428
26077: PUSH
26078: LD_INT 0
26080: EQUAL
26081: IFFALSE 26106
// begin ComMoveXY ( unit , _x , _y ) ;
26083: LD_VAR 0 1
26087: PPUSH
26088: LD_VAR 0 7
26092: PPUSH
26093: LD_VAR 0 8
26097: PPUSH
26098: CALL_OW 111
// exit ;
26102: POP
26103: POP
26104: GO 26110
// end ; end ;
26106: GO 25995
26108: POP
26109: POP
// end ;
26110: LD_VAR 0 3
26114: RET
// export function ScanBase ( side , base_area ) ; begin
26115: LD_INT 0
26117: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26118: LD_ADDR_VAR 0 3
26122: PUSH
26123: LD_VAR 0 2
26127: PPUSH
26128: LD_INT 81
26130: PUSH
26131: LD_VAR 0 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PPUSH
26140: CALL_OW 70
26144: ST_TO_ADDR
// end ;
26145: LD_VAR 0 3
26149: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26150: LD_INT 0
26152: PPUSH
26153: PPUSH
26154: PPUSH
26155: PPUSH
// result := false ;
26156: LD_ADDR_VAR 0 2
26160: PUSH
26161: LD_INT 0
26163: ST_TO_ADDR
// side := GetSide ( unit ) ;
26164: LD_ADDR_VAR 0 3
26168: PUSH
26169: LD_VAR 0 1
26173: PPUSH
26174: CALL_OW 255
26178: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26179: LD_ADDR_VAR 0 4
26183: PUSH
26184: LD_VAR 0 1
26188: PPUSH
26189: CALL_OW 248
26193: ST_TO_ADDR
// case nat of 1 :
26194: LD_VAR 0 4
26198: PUSH
26199: LD_INT 1
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26207
26205: GO 26218
26207: POP
// tech := tech_lassight ; 2 :
26208: LD_ADDR_VAR 0 5
26212: PUSH
26213: LD_INT 12
26215: ST_TO_ADDR
26216: GO 26257
26218: LD_INT 2
26220: DOUBLE
26221: EQUAL
26222: IFTRUE 26226
26224: GO 26237
26226: POP
// tech := tech_mortar ; 3 :
26227: LD_ADDR_VAR 0 5
26231: PUSH
26232: LD_INT 41
26234: ST_TO_ADDR
26235: GO 26257
26237: LD_INT 3
26239: DOUBLE
26240: EQUAL
26241: IFTRUE 26245
26243: GO 26256
26245: POP
// tech := tech_bazooka ; end ;
26246: LD_ADDR_VAR 0 5
26250: PUSH
26251: LD_INT 44
26253: ST_TO_ADDR
26254: GO 26257
26256: POP
// if Researched ( side , tech ) then
26257: LD_VAR 0 3
26261: PPUSH
26262: LD_VAR 0 5
26266: PPUSH
26267: CALL_OW 325
26271: IFFALSE 26298
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26273: LD_ADDR_VAR 0 2
26277: PUSH
26278: LD_INT 5
26280: PUSH
26281: LD_INT 8
26283: PUSH
26284: LD_INT 9
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: PUSH
26292: LD_VAR 0 4
26296: ARRAY
26297: ST_TO_ADDR
// end ;
26298: LD_VAR 0 2
26302: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26303: LD_INT 0
26305: PPUSH
26306: PPUSH
26307: PPUSH
// if not mines then
26308: LD_VAR 0 2
26312: NOT
26313: IFFALSE 26317
// exit ;
26315: GO 26461
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26317: LD_ADDR_VAR 0 5
26321: PUSH
26322: LD_INT 81
26324: PUSH
26325: LD_VAR 0 1
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 3
26336: PUSH
26337: LD_INT 21
26339: PUSH
26340: LD_INT 3
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PPUSH
26355: CALL_OW 69
26359: ST_TO_ADDR
// for i in mines do
26360: LD_ADDR_VAR 0 4
26364: PUSH
26365: LD_VAR 0 2
26369: PUSH
26370: FOR_IN
26371: IFFALSE 26459
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26373: LD_VAR 0 4
26377: PUSH
26378: LD_INT 1
26380: ARRAY
26381: PPUSH
26382: LD_VAR 0 4
26386: PUSH
26387: LD_INT 2
26389: ARRAY
26390: PPUSH
26391: CALL_OW 458
26395: NOT
26396: IFFALSE 26400
// continue ;
26398: GO 26370
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26400: LD_VAR 0 4
26404: PUSH
26405: LD_INT 1
26407: ARRAY
26408: PPUSH
26409: LD_VAR 0 4
26413: PUSH
26414: LD_INT 2
26416: ARRAY
26417: PPUSH
26418: CALL_OW 428
26422: PUSH
26423: LD_VAR 0 5
26427: IN
26428: IFFALSE 26457
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26430: LD_VAR 0 4
26434: PUSH
26435: LD_INT 1
26437: ARRAY
26438: PPUSH
26439: LD_VAR 0 4
26443: PUSH
26444: LD_INT 2
26446: ARRAY
26447: PPUSH
26448: LD_VAR 0 1
26452: PPUSH
26453: CALL_OW 456
// end ;
26457: GO 26370
26459: POP
26460: POP
// end ;
26461: LD_VAR 0 3
26465: RET
// export function Count ( array ) ; var i ; begin
26466: LD_INT 0
26468: PPUSH
26469: PPUSH
// result := 0 ;
26470: LD_ADDR_VAR 0 2
26474: PUSH
26475: LD_INT 0
26477: ST_TO_ADDR
// for i in array do
26478: LD_ADDR_VAR 0 3
26482: PUSH
26483: LD_VAR 0 1
26487: PUSH
26488: FOR_IN
26489: IFFALSE 26513
// if i then
26491: LD_VAR 0 3
26495: IFFALSE 26511
// result := result + 1 ;
26497: LD_ADDR_VAR 0 2
26501: PUSH
26502: LD_VAR 0 2
26506: PUSH
26507: LD_INT 1
26509: PLUS
26510: ST_TO_ADDR
26511: GO 26488
26513: POP
26514: POP
// end ;
26515: LD_VAR 0 2
26519: RET
// export function IsEmpty ( building ) ; begin
26520: LD_INT 0
26522: PPUSH
// if not building then
26523: LD_VAR 0 1
26527: NOT
26528: IFFALSE 26532
// exit ;
26530: GO 26575
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26532: LD_ADDR_VAR 0 2
26536: PUSH
26537: LD_VAR 0 1
26541: PUSH
26542: LD_INT 22
26544: PUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL_OW 255
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 58
26561: PUSH
26562: EMPTY
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PPUSH
26569: CALL_OW 69
26573: IN
26574: ST_TO_ADDR
// end ;
26575: LD_VAR 0 2
26579: RET
// export function IsNotFull ( building ) ; begin
26580: LD_INT 0
26582: PPUSH
// if not building then
26583: LD_VAR 0 1
26587: NOT
26588: IFFALSE 26592
// exit ;
26590: GO 26611
// result := UnitsInside ( building ) < 6 ;
26592: LD_ADDR_VAR 0 2
26596: PUSH
26597: LD_VAR 0 1
26601: PPUSH
26602: CALL_OW 313
26606: PUSH
26607: LD_INT 6
26609: LESS
26610: ST_TO_ADDR
// end ;
26611: LD_VAR 0 2
26615: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26616: LD_INT 0
26618: PPUSH
26619: PPUSH
26620: PPUSH
26621: PPUSH
// tmp := [ ] ;
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: EMPTY
26628: ST_TO_ADDR
// list := [ ] ;
26629: LD_ADDR_VAR 0 5
26633: PUSH
26634: EMPTY
26635: ST_TO_ADDR
// for i = 16 to 25 do
26636: LD_ADDR_VAR 0 4
26640: PUSH
26641: DOUBLE
26642: LD_INT 16
26644: DEC
26645: ST_TO_ADDR
26646: LD_INT 25
26648: PUSH
26649: FOR_TO
26650: IFFALSE 26723
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26652: LD_ADDR_VAR 0 3
26656: PUSH
26657: LD_VAR 0 3
26661: PUSH
26662: LD_INT 22
26664: PUSH
26665: LD_VAR 0 1
26669: PPUSH
26670: CALL_OW 255
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 91
26681: PUSH
26682: LD_VAR 0 1
26686: PUSH
26687: LD_INT 6
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 30
26697: PUSH
26698: LD_VAR 0 4
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: PPUSH
26715: CALL_OW 69
26719: ADD
26720: ST_TO_ADDR
26721: GO 26649
26723: POP
26724: POP
// for i = 1 to tmp do
26725: LD_ADDR_VAR 0 4
26729: PUSH
26730: DOUBLE
26731: LD_INT 1
26733: DEC
26734: ST_TO_ADDR
26735: LD_VAR 0 3
26739: PUSH
26740: FOR_TO
26741: IFFALSE 26829
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26743: LD_ADDR_VAR 0 5
26747: PUSH
26748: LD_VAR 0 5
26752: PUSH
26753: LD_VAR 0 3
26757: PUSH
26758: LD_VAR 0 4
26762: ARRAY
26763: PPUSH
26764: CALL_OW 266
26768: PUSH
26769: LD_VAR 0 3
26773: PUSH
26774: LD_VAR 0 4
26778: ARRAY
26779: PPUSH
26780: CALL_OW 250
26784: PUSH
26785: LD_VAR 0 3
26789: PUSH
26790: LD_VAR 0 4
26794: ARRAY
26795: PPUSH
26796: CALL_OW 251
26800: PUSH
26801: LD_VAR 0 3
26805: PUSH
26806: LD_VAR 0 4
26810: ARRAY
26811: PPUSH
26812: CALL_OW 254
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: ADD
26826: ST_TO_ADDR
26827: GO 26740
26829: POP
26830: POP
// result := list ;
26831: LD_ADDR_VAR 0 2
26835: PUSH
26836: LD_VAR 0 5
26840: ST_TO_ADDR
// end ;
26841: LD_VAR 0 2
26845: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26846: LD_INT 0
26848: PPUSH
26849: PPUSH
26850: PPUSH
26851: PPUSH
26852: PPUSH
26853: PPUSH
26854: PPUSH
// if not factory then
26855: LD_VAR 0 1
26859: NOT
26860: IFFALSE 26864
// exit ;
26862: GO 27457
// if control = control_apeman then
26864: LD_VAR 0 4
26868: PUSH
26869: LD_INT 5
26871: EQUAL
26872: IFFALSE 26981
// begin tmp := UnitsInside ( factory ) ;
26874: LD_ADDR_VAR 0 8
26878: PUSH
26879: LD_VAR 0 1
26883: PPUSH
26884: CALL_OW 313
26888: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26889: LD_VAR 0 8
26893: PPUSH
26894: LD_INT 25
26896: PUSH
26897: LD_INT 12
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PPUSH
26904: CALL_OW 72
26908: NOT
26909: IFFALSE 26919
// control := control_manual ;
26911: LD_ADDR_VAR 0 4
26915: PUSH
26916: LD_INT 1
26918: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26919: LD_ADDR_VAR 0 8
26923: PUSH
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL 26616 0 1
26933: ST_TO_ADDR
// if tmp then
26934: LD_VAR 0 8
26938: IFFALSE 26981
// begin for i in tmp do
26940: LD_ADDR_VAR 0 7
26944: PUSH
26945: LD_VAR 0 8
26949: PUSH
26950: FOR_IN
26951: IFFALSE 26979
// if i [ 1 ] = b_ext_radio then
26953: LD_VAR 0 7
26957: PUSH
26958: LD_INT 1
26960: ARRAY
26961: PUSH
26962: LD_INT 22
26964: EQUAL
26965: IFFALSE 26977
// begin control := control_remote ;
26967: LD_ADDR_VAR 0 4
26971: PUSH
26972: LD_INT 2
26974: ST_TO_ADDR
// break ;
26975: GO 26979
// end ;
26977: GO 26950
26979: POP
26980: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26981: LD_VAR 0 1
26985: PPUSH
26986: LD_VAR 0 2
26990: PPUSH
26991: LD_VAR 0 3
26995: PPUSH
26996: LD_VAR 0 4
27000: PPUSH
27001: LD_VAR 0 5
27005: PPUSH
27006: CALL_OW 448
27010: IFFALSE 27045
// begin result := [ chassis , engine , control , weapon ] ;
27012: LD_ADDR_VAR 0 6
27016: PUSH
27017: LD_VAR 0 2
27021: PUSH
27022: LD_VAR 0 3
27026: PUSH
27027: LD_VAR 0 4
27031: PUSH
27032: LD_VAR 0 5
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: ST_TO_ADDR
// exit ;
27043: GO 27457
// end ; _chassis := AvailableChassisList ( factory ) ;
27045: LD_ADDR_VAR 0 9
27049: PUSH
27050: LD_VAR 0 1
27054: PPUSH
27055: CALL_OW 475
27059: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27060: LD_ADDR_VAR 0 11
27064: PUSH
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 476
27074: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27075: LD_ADDR_VAR 0 12
27079: PUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 477
27089: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27090: LD_ADDR_VAR 0 10
27094: PUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 478
27104: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27105: LD_VAR 0 9
27109: NOT
27110: PUSH
27111: LD_VAR 0 11
27115: NOT
27116: OR
27117: PUSH
27118: LD_VAR 0 12
27122: NOT
27123: OR
27124: PUSH
27125: LD_VAR 0 10
27129: NOT
27130: OR
27131: IFFALSE 27166
// begin result := [ chassis , engine , control , weapon ] ;
27133: LD_ADDR_VAR 0 6
27137: PUSH
27138: LD_VAR 0 2
27142: PUSH
27143: LD_VAR 0 3
27147: PUSH
27148: LD_VAR 0 4
27152: PUSH
27153: LD_VAR 0 5
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: ST_TO_ADDR
// exit ;
27164: GO 27457
// end ; if not chassis in _chassis then
27166: LD_VAR 0 2
27170: PUSH
27171: LD_VAR 0 9
27175: IN
27176: NOT
27177: IFFALSE 27203
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27179: LD_ADDR_VAR 0 2
27183: PUSH
27184: LD_VAR 0 9
27188: PUSH
27189: LD_INT 1
27191: PPUSH
27192: LD_VAR 0 9
27196: PPUSH
27197: CALL_OW 12
27201: ARRAY
27202: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27203: LD_VAR 0 2
27207: PPUSH
27208: LD_VAR 0 3
27212: PPUSH
27213: CALL 27462 0 2
27217: NOT
27218: IFFALSE 27277
// repeat engine := _engine [ 1 ] ;
27220: LD_ADDR_VAR 0 3
27224: PUSH
27225: LD_VAR 0 11
27229: PUSH
27230: LD_INT 1
27232: ARRAY
27233: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27234: LD_ADDR_VAR 0 11
27238: PUSH
27239: LD_VAR 0 11
27243: PPUSH
27244: LD_INT 1
27246: PPUSH
27247: CALL_OW 3
27251: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27252: LD_VAR 0 2
27256: PPUSH
27257: LD_VAR 0 3
27261: PPUSH
27262: CALL 27462 0 2
27266: PUSH
27267: LD_VAR 0 11
27271: PUSH
27272: EMPTY
27273: EQUAL
27274: OR
27275: IFFALSE 27220
// if not control in _control then
27277: LD_VAR 0 4
27281: PUSH
27282: LD_VAR 0 12
27286: IN
27287: NOT
27288: IFFALSE 27314
// control := _control [ rand ( 1 , _control ) ] ;
27290: LD_ADDR_VAR 0 4
27294: PUSH
27295: LD_VAR 0 12
27299: PUSH
27300: LD_INT 1
27302: PPUSH
27303: LD_VAR 0 12
27307: PPUSH
27308: CALL_OW 12
27312: ARRAY
27313: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27314: LD_VAR 0 2
27318: PPUSH
27319: LD_VAR 0 5
27323: PPUSH
27324: CALL 27682 0 2
27328: NOT
27329: IFFALSE 27388
// repeat weapon := _weapon [ 1 ] ;
27331: LD_ADDR_VAR 0 5
27335: PUSH
27336: LD_VAR 0 10
27340: PUSH
27341: LD_INT 1
27343: ARRAY
27344: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27345: LD_ADDR_VAR 0 10
27349: PUSH
27350: LD_VAR 0 10
27354: PPUSH
27355: LD_INT 1
27357: PPUSH
27358: CALL_OW 3
27362: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27363: LD_VAR 0 2
27367: PPUSH
27368: LD_VAR 0 5
27372: PPUSH
27373: CALL 27682 0 2
27377: PUSH
27378: LD_VAR 0 10
27382: PUSH
27383: EMPTY
27384: EQUAL
27385: OR
27386: IFFALSE 27331
// result := [ ] ;
27388: LD_ADDR_VAR 0 6
27392: PUSH
27393: EMPTY
27394: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27395: LD_VAR 0 1
27399: PPUSH
27400: LD_VAR 0 2
27404: PPUSH
27405: LD_VAR 0 3
27409: PPUSH
27410: LD_VAR 0 4
27414: PPUSH
27415: LD_VAR 0 5
27419: PPUSH
27420: CALL_OW 448
27424: IFFALSE 27457
// result := [ chassis , engine , control , weapon ] ;
27426: LD_ADDR_VAR 0 6
27430: PUSH
27431: LD_VAR 0 2
27435: PUSH
27436: LD_VAR 0 3
27440: PUSH
27441: LD_VAR 0 4
27445: PUSH
27446: LD_VAR 0 5
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: ST_TO_ADDR
// end ;
27457: LD_VAR 0 6
27461: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27462: LD_INT 0
27464: PPUSH
// if not chassis or not engine then
27465: LD_VAR 0 1
27469: NOT
27470: PUSH
27471: LD_VAR 0 2
27475: NOT
27476: OR
27477: IFFALSE 27481
// exit ;
27479: GO 27677
// case engine of engine_solar :
27481: LD_VAR 0 2
27485: PUSH
27486: LD_INT 2
27488: DOUBLE
27489: EQUAL
27490: IFTRUE 27494
27492: GO 27532
27494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27495: LD_ADDR_VAR 0 3
27499: PUSH
27500: LD_INT 11
27502: PUSH
27503: LD_INT 12
27505: PUSH
27506: LD_INT 13
27508: PUSH
27509: LD_INT 14
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: LD_INT 2
27517: PUSH
27518: LD_INT 3
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
27530: GO 27661
27532: LD_INT 1
27534: DOUBLE
27535: EQUAL
27536: IFTRUE 27540
27538: GO 27602
27540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27541: LD_ADDR_VAR 0 3
27545: PUSH
27546: LD_INT 11
27548: PUSH
27549: LD_INT 12
27551: PUSH
27552: LD_INT 13
27554: PUSH
27555: LD_INT 14
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: LD_INT 4
27569: PUSH
27570: LD_INT 5
27572: PUSH
27573: LD_INT 21
27575: PUSH
27576: LD_INT 23
27578: PUSH
27579: LD_INT 22
27581: PUSH
27582: LD_INT 24
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
27600: GO 27661
27602: LD_INT 3
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27610
27608: GO 27660
27610: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27611: LD_ADDR_VAR 0 3
27615: PUSH
27616: LD_INT 13
27618: PUSH
27619: LD_INT 14
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: LD_INT 4
27630: PUSH
27631: LD_INT 5
27633: PUSH
27634: LD_INT 21
27636: PUSH
27637: LD_INT 22
27639: PUSH
27640: LD_INT 23
27642: PUSH
27643: LD_INT 24
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: ST_TO_ADDR
27658: GO 27661
27660: POP
// result := ( chassis in result ) ;
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_VAR 0 1
27670: PUSH
27671: LD_VAR 0 3
27675: IN
27676: ST_TO_ADDR
// end ;
27677: LD_VAR 0 3
27681: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27682: LD_INT 0
27684: PPUSH
// if not chassis or not weapon then
27685: LD_VAR 0 1
27689: NOT
27690: PUSH
27691: LD_VAR 0 2
27695: NOT
27696: OR
27697: IFFALSE 27701
// exit ;
27699: GO 28763
// case weapon of us_machine_gun :
27701: LD_VAR 0 2
27705: PUSH
27706: LD_INT 2
27708: DOUBLE
27709: EQUAL
27710: IFTRUE 27714
27712: GO 27744
27714: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27715: LD_ADDR_VAR 0 3
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 3
27728: PUSH
27729: LD_INT 4
27731: PUSH
27732: LD_INT 5
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: ST_TO_ADDR
27742: GO 28747
27744: LD_INT 3
27746: DOUBLE
27747: EQUAL
27748: IFTRUE 27752
27750: GO 27782
27752: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27753: LD_ADDR_VAR 0 3
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 2
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: LD_INT 4
27769: PUSH
27770: LD_INT 5
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: ST_TO_ADDR
27780: GO 28747
27782: LD_INT 11
27784: DOUBLE
27785: EQUAL
27786: IFTRUE 27790
27788: GO 27820
27790: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27791: LD_ADDR_VAR 0 3
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: LD_INT 3
27804: PUSH
27805: LD_INT 4
27807: PUSH
27808: LD_INT 5
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: ST_TO_ADDR
27818: GO 28747
27820: LD_INT 4
27822: DOUBLE
27823: EQUAL
27824: IFTRUE 27828
27826: GO 27854
27828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27829: LD_ADDR_VAR 0 3
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 3
27839: PUSH
27840: LD_INT 4
27842: PUSH
27843: LD_INT 5
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: ST_TO_ADDR
27852: GO 28747
27854: LD_INT 5
27856: DOUBLE
27857: EQUAL
27858: IFTRUE 27862
27860: GO 27888
27862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_INT 2
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: LD_INT 4
27876: PUSH
27877: LD_INT 5
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: ST_TO_ADDR
27886: GO 28747
27888: LD_INT 9
27890: DOUBLE
27891: EQUAL
27892: IFTRUE 27896
27894: GO 27922
27896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27897: LD_ADDR_VAR 0 3
27901: PUSH
27902: LD_INT 2
27904: PUSH
27905: LD_INT 3
27907: PUSH
27908: LD_INT 4
27910: PUSH
27911: LD_INT 5
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: ST_TO_ADDR
27920: GO 28747
27922: LD_INT 7
27924: DOUBLE
27925: EQUAL
27926: IFTRUE 27930
27928: GO 27956
27930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27931: LD_ADDR_VAR 0 3
27935: PUSH
27936: LD_INT 2
27938: PUSH
27939: LD_INT 3
27941: PUSH
27942: LD_INT 4
27944: PUSH
27945: LD_INT 5
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: ST_TO_ADDR
27954: GO 28747
27956: LD_INT 12
27958: DOUBLE
27959: EQUAL
27960: IFTRUE 27964
27962: GO 27990
27964: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27965: LD_ADDR_VAR 0 3
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: LD_INT 4
27978: PUSH
27979: LD_INT 5
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
27988: GO 28747
27990: LD_INT 13
27992: DOUBLE
27993: EQUAL
27994: IFTRUE 27998
27996: GO 28024
27998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27999: LD_ADDR_VAR 0 3
28003: PUSH
28004: LD_INT 2
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 4
28012: PUSH
28013: LD_INT 5
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
28022: GO 28747
28024: LD_INT 14
28026: DOUBLE
28027: EQUAL
28028: IFTRUE 28032
28030: GO 28050
28032: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28033: LD_ADDR_VAR 0 3
28037: PUSH
28038: LD_INT 4
28040: PUSH
28041: LD_INT 5
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: ST_TO_ADDR
28048: GO 28747
28050: LD_INT 6
28052: DOUBLE
28053: EQUAL
28054: IFTRUE 28058
28056: GO 28076
28058: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28059: LD_ADDR_VAR 0 3
28063: PUSH
28064: LD_INT 4
28066: PUSH
28067: LD_INT 5
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: ST_TO_ADDR
28074: GO 28747
28076: LD_INT 10
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28102
28084: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 4
28092: PUSH
28093: LD_INT 5
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: ST_TO_ADDR
28100: GO 28747
28102: LD_INT 22
28104: DOUBLE
28105: EQUAL
28106: IFTRUE 28110
28108: GO 28136
28110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28111: LD_ADDR_VAR 0 3
28115: PUSH
28116: LD_INT 11
28118: PUSH
28119: LD_INT 12
28121: PUSH
28122: LD_INT 13
28124: PUSH
28125: LD_INT 14
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: ST_TO_ADDR
28134: GO 28747
28136: LD_INT 23
28138: DOUBLE
28139: EQUAL
28140: IFTRUE 28144
28142: GO 28170
28144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28145: LD_ADDR_VAR 0 3
28149: PUSH
28150: LD_INT 11
28152: PUSH
28153: LD_INT 12
28155: PUSH
28156: LD_INT 13
28158: PUSH
28159: LD_INT 14
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: ST_TO_ADDR
28168: GO 28747
28170: LD_INT 24
28172: DOUBLE
28173: EQUAL
28174: IFTRUE 28178
28176: GO 28204
28178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: LD_INT 11
28186: PUSH
28187: LD_INT 12
28189: PUSH
28190: LD_INT 13
28192: PUSH
28193: LD_INT 14
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: ST_TO_ADDR
28202: GO 28747
28204: LD_INT 30
28206: DOUBLE
28207: EQUAL
28208: IFTRUE 28212
28210: GO 28238
28212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28213: LD_ADDR_VAR 0 3
28217: PUSH
28218: LD_INT 11
28220: PUSH
28221: LD_INT 12
28223: PUSH
28224: LD_INT 13
28226: PUSH
28227: LD_INT 14
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: ST_TO_ADDR
28236: GO 28747
28238: LD_INT 25
28240: DOUBLE
28241: EQUAL
28242: IFTRUE 28246
28244: GO 28264
28246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28247: LD_ADDR_VAR 0 3
28251: PUSH
28252: LD_INT 13
28254: PUSH
28255: LD_INT 14
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: ST_TO_ADDR
28262: GO 28747
28264: LD_INT 27
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28272
28270: GO 28290
28272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28273: LD_ADDR_VAR 0 3
28277: PUSH
28278: LD_INT 13
28280: PUSH
28281: LD_INT 14
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: ST_TO_ADDR
28288: GO 28747
28290: LD_EXP 98
28294: DOUBLE
28295: EQUAL
28296: IFTRUE 28300
28298: GO 28326
28300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: LD_INT 11
28308: PUSH
28309: LD_INT 12
28311: PUSH
28312: LD_INT 13
28314: PUSH
28315: LD_INT 14
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: ST_TO_ADDR
28324: GO 28747
28326: LD_INT 28
28328: DOUBLE
28329: EQUAL
28330: IFTRUE 28334
28332: GO 28352
28334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28335: LD_ADDR_VAR 0 3
28339: PUSH
28340: LD_INT 13
28342: PUSH
28343: LD_INT 14
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: ST_TO_ADDR
28350: GO 28747
28352: LD_INT 29
28354: DOUBLE
28355: EQUAL
28356: IFTRUE 28360
28358: GO 28378
28360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28361: LD_ADDR_VAR 0 3
28365: PUSH
28366: LD_INT 13
28368: PUSH
28369: LD_INT 14
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: ST_TO_ADDR
28376: GO 28747
28378: LD_INT 31
28380: DOUBLE
28381: EQUAL
28382: IFTRUE 28386
28384: GO 28404
28386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28387: LD_ADDR_VAR 0 3
28391: PUSH
28392: LD_INT 13
28394: PUSH
28395: LD_INT 14
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: ST_TO_ADDR
28402: GO 28747
28404: LD_INT 26
28406: DOUBLE
28407: EQUAL
28408: IFTRUE 28412
28410: GO 28430
28412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28413: LD_ADDR_VAR 0 3
28417: PUSH
28418: LD_INT 13
28420: PUSH
28421: LD_INT 14
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: ST_TO_ADDR
28428: GO 28747
28430: LD_INT 42
28432: DOUBLE
28433: EQUAL
28434: IFTRUE 28438
28436: GO 28464
28438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28439: LD_ADDR_VAR 0 3
28443: PUSH
28444: LD_INT 21
28446: PUSH
28447: LD_INT 22
28449: PUSH
28450: LD_INT 23
28452: PUSH
28453: LD_INT 24
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
28462: GO 28747
28464: LD_INT 43
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28472
28470: GO 28498
28472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28473: LD_ADDR_VAR 0 3
28477: PUSH
28478: LD_INT 21
28480: PUSH
28481: LD_INT 22
28483: PUSH
28484: LD_INT 23
28486: PUSH
28487: LD_INT 24
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
28496: GO 28747
28498: LD_INT 44
28500: DOUBLE
28501: EQUAL
28502: IFTRUE 28506
28504: GO 28532
28506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28507: LD_ADDR_VAR 0 3
28511: PUSH
28512: LD_INT 21
28514: PUSH
28515: LD_INT 22
28517: PUSH
28518: LD_INT 23
28520: PUSH
28521: LD_INT 24
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: ST_TO_ADDR
28530: GO 28747
28532: LD_INT 45
28534: DOUBLE
28535: EQUAL
28536: IFTRUE 28540
28538: GO 28566
28540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_INT 21
28548: PUSH
28549: LD_INT 22
28551: PUSH
28552: LD_INT 23
28554: PUSH
28555: LD_INT 24
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: ST_TO_ADDR
28564: GO 28747
28566: LD_INT 49
28568: DOUBLE
28569: EQUAL
28570: IFTRUE 28574
28572: GO 28600
28574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28575: LD_ADDR_VAR 0 3
28579: PUSH
28580: LD_INT 21
28582: PUSH
28583: LD_INT 22
28585: PUSH
28586: LD_INT 23
28588: PUSH
28589: LD_INT 24
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
28598: GO 28747
28600: LD_INT 51
28602: DOUBLE
28603: EQUAL
28604: IFTRUE 28608
28606: GO 28634
28608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28609: LD_ADDR_VAR 0 3
28613: PUSH
28614: LD_INT 21
28616: PUSH
28617: LD_INT 22
28619: PUSH
28620: LD_INT 23
28622: PUSH
28623: LD_INT 24
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: ST_TO_ADDR
28632: GO 28747
28634: LD_INT 52
28636: DOUBLE
28637: EQUAL
28638: IFTRUE 28642
28640: GO 28668
28642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28643: LD_ADDR_VAR 0 3
28647: PUSH
28648: LD_INT 21
28650: PUSH
28651: LD_INT 22
28653: PUSH
28654: LD_INT 23
28656: PUSH
28657: LD_INT 24
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: ST_TO_ADDR
28666: GO 28747
28668: LD_INT 53
28670: DOUBLE
28671: EQUAL
28672: IFTRUE 28676
28674: GO 28694
28676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28677: LD_ADDR_VAR 0 3
28681: PUSH
28682: LD_INT 23
28684: PUSH
28685: LD_INT 24
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: ST_TO_ADDR
28692: GO 28747
28694: LD_INT 46
28696: DOUBLE
28697: EQUAL
28698: IFTRUE 28702
28700: GO 28720
28702: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28703: LD_ADDR_VAR 0 3
28707: PUSH
28708: LD_INT 23
28710: PUSH
28711: LD_INT 24
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: ST_TO_ADDR
28718: GO 28747
28720: LD_INT 47
28722: DOUBLE
28723: EQUAL
28724: IFTRUE 28728
28726: GO 28746
28728: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28729: LD_ADDR_VAR 0 3
28733: PUSH
28734: LD_INT 23
28736: PUSH
28737: LD_INT 24
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: ST_TO_ADDR
28744: GO 28747
28746: POP
// result := ( chassis in result ) ;
28747: LD_ADDR_VAR 0 3
28751: PUSH
28752: LD_VAR 0 1
28756: PUSH
28757: LD_VAR 0 3
28761: IN
28762: ST_TO_ADDR
// end ;
28763: LD_VAR 0 3
28767: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28768: LD_INT 0
28770: PPUSH
28771: PPUSH
28772: PPUSH
28773: PPUSH
28774: PPUSH
28775: PPUSH
28776: PPUSH
// result := array ;
28777: LD_ADDR_VAR 0 5
28781: PUSH
28782: LD_VAR 0 1
28786: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28787: LD_VAR 0 1
28791: NOT
28792: PUSH
28793: LD_VAR 0 2
28797: NOT
28798: OR
28799: PUSH
28800: LD_VAR 0 3
28804: NOT
28805: OR
28806: PUSH
28807: LD_VAR 0 2
28811: PUSH
28812: LD_VAR 0 1
28816: GREATER
28817: OR
28818: PUSH
28819: LD_VAR 0 3
28823: PUSH
28824: LD_VAR 0 1
28828: GREATER
28829: OR
28830: IFFALSE 28834
// exit ;
28832: GO 29130
// if direction then
28834: LD_VAR 0 4
28838: IFFALSE 28902
// begin d := 1 ;
28840: LD_ADDR_VAR 0 9
28844: PUSH
28845: LD_INT 1
28847: ST_TO_ADDR
// if i_from > i_to then
28848: LD_VAR 0 2
28852: PUSH
28853: LD_VAR 0 3
28857: GREATER
28858: IFFALSE 28884
// length := ( array - i_from ) + i_to else
28860: LD_ADDR_VAR 0 11
28864: PUSH
28865: LD_VAR 0 1
28869: PUSH
28870: LD_VAR 0 2
28874: MINUS
28875: PUSH
28876: LD_VAR 0 3
28880: PLUS
28881: ST_TO_ADDR
28882: GO 28900
// length := i_to - i_from ;
28884: LD_ADDR_VAR 0 11
28888: PUSH
28889: LD_VAR 0 3
28893: PUSH
28894: LD_VAR 0 2
28898: MINUS
28899: ST_TO_ADDR
// end else
28900: GO 28963
// begin d := - 1 ;
28902: LD_ADDR_VAR 0 9
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: ST_TO_ADDR
// if i_from > i_to then
28911: LD_VAR 0 2
28915: PUSH
28916: LD_VAR 0 3
28920: GREATER
28921: IFFALSE 28941
// length := i_from - i_to else
28923: LD_ADDR_VAR 0 11
28927: PUSH
28928: LD_VAR 0 2
28932: PUSH
28933: LD_VAR 0 3
28937: MINUS
28938: ST_TO_ADDR
28939: GO 28963
// length := ( array - i_to ) + i_from ;
28941: LD_ADDR_VAR 0 11
28945: PUSH
28946: LD_VAR 0 1
28950: PUSH
28951: LD_VAR 0 3
28955: MINUS
28956: PUSH
28957: LD_VAR 0 2
28961: PLUS
28962: ST_TO_ADDR
// end ; if not length then
28963: LD_VAR 0 11
28967: NOT
28968: IFFALSE 28972
// exit ;
28970: GO 29130
// tmp := array ;
28972: LD_ADDR_VAR 0 10
28976: PUSH
28977: LD_VAR 0 1
28981: ST_TO_ADDR
// for i = 1 to length do
28982: LD_ADDR_VAR 0 6
28986: PUSH
28987: DOUBLE
28988: LD_INT 1
28990: DEC
28991: ST_TO_ADDR
28992: LD_VAR 0 11
28996: PUSH
28997: FOR_TO
28998: IFFALSE 29118
// begin for j = 1 to array do
29000: LD_ADDR_VAR 0 7
29004: PUSH
29005: DOUBLE
29006: LD_INT 1
29008: DEC
29009: ST_TO_ADDR
29010: LD_VAR 0 1
29014: PUSH
29015: FOR_TO
29016: IFFALSE 29104
// begin k := j + d ;
29018: LD_ADDR_VAR 0 8
29022: PUSH
29023: LD_VAR 0 7
29027: PUSH
29028: LD_VAR 0 9
29032: PLUS
29033: ST_TO_ADDR
// if k > array then
29034: LD_VAR 0 8
29038: PUSH
29039: LD_VAR 0 1
29043: GREATER
29044: IFFALSE 29054
// k := 1 ;
29046: LD_ADDR_VAR 0 8
29050: PUSH
29051: LD_INT 1
29053: ST_TO_ADDR
// if not k then
29054: LD_VAR 0 8
29058: NOT
29059: IFFALSE 29071
// k := array ;
29061: LD_ADDR_VAR 0 8
29065: PUSH
29066: LD_VAR 0 1
29070: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29071: LD_ADDR_VAR 0 10
29075: PUSH
29076: LD_VAR 0 10
29080: PPUSH
29081: LD_VAR 0 8
29085: PPUSH
29086: LD_VAR 0 1
29090: PUSH
29091: LD_VAR 0 7
29095: ARRAY
29096: PPUSH
29097: CALL_OW 1
29101: ST_TO_ADDR
// end ;
29102: GO 29015
29104: POP
29105: POP
// array := tmp ;
29106: LD_ADDR_VAR 0 1
29110: PUSH
29111: LD_VAR 0 10
29115: ST_TO_ADDR
// end ;
29116: GO 28997
29118: POP
29119: POP
// result := array ;
29120: LD_ADDR_VAR 0 5
29124: PUSH
29125: LD_VAR 0 1
29129: ST_TO_ADDR
// end ;
29130: LD_VAR 0 5
29134: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29135: LD_INT 0
29137: PPUSH
29138: PPUSH
// result := 0 ;
29139: LD_ADDR_VAR 0 3
29143: PUSH
29144: LD_INT 0
29146: ST_TO_ADDR
// if not array or not value in array then
29147: LD_VAR 0 1
29151: NOT
29152: PUSH
29153: LD_VAR 0 2
29157: PUSH
29158: LD_VAR 0 1
29162: IN
29163: NOT
29164: OR
29165: IFFALSE 29169
// exit ;
29167: GO 29223
// for i = 1 to array do
29169: LD_ADDR_VAR 0 4
29173: PUSH
29174: DOUBLE
29175: LD_INT 1
29177: DEC
29178: ST_TO_ADDR
29179: LD_VAR 0 1
29183: PUSH
29184: FOR_TO
29185: IFFALSE 29221
// if value = array [ i ] then
29187: LD_VAR 0 2
29191: PUSH
29192: LD_VAR 0 1
29196: PUSH
29197: LD_VAR 0 4
29201: ARRAY
29202: EQUAL
29203: IFFALSE 29219
// begin result := i ;
29205: LD_ADDR_VAR 0 3
29209: PUSH
29210: LD_VAR 0 4
29214: ST_TO_ADDR
// exit ;
29215: POP
29216: POP
29217: GO 29223
// end ;
29219: GO 29184
29221: POP
29222: POP
// end ;
29223: LD_VAR 0 3
29227: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29228: LD_INT 0
29230: PPUSH
// vc_chassis := chassis ;
29231: LD_ADDR_OWVAR 37
29235: PUSH
29236: LD_VAR 0 1
29240: ST_TO_ADDR
// vc_engine := engine ;
29241: LD_ADDR_OWVAR 39
29245: PUSH
29246: LD_VAR 0 2
29250: ST_TO_ADDR
// vc_control := control ;
29251: LD_ADDR_OWVAR 38
29255: PUSH
29256: LD_VAR 0 3
29260: ST_TO_ADDR
// vc_weapon := weapon ;
29261: LD_ADDR_OWVAR 40
29265: PUSH
29266: LD_VAR 0 4
29270: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29271: LD_ADDR_OWVAR 41
29275: PUSH
29276: LD_VAR 0 5
29280: ST_TO_ADDR
// end ;
29281: LD_VAR 0 6
29285: RET
// export function WantPlant ( unit ) ; var task ; begin
29286: LD_INT 0
29288: PPUSH
29289: PPUSH
// result := false ;
29290: LD_ADDR_VAR 0 2
29294: PUSH
29295: LD_INT 0
29297: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29298: LD_ADDR_VAR 0 3
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 437
29312: ST_TO_ADDR
// if task then
29313: LD_VAR 0 3
29317: IFFALSE 29345
// if task [ 1 ] [ 1 ] = p then
29319: LD_VAR 0 3
29323: PUSH
29324: LD_INT 1
29326: ARRAY
29327: PUSH
29328: LD_INT 1
29330: ARRAY
29331: PUSH
29332: LD_STRING p
29334: EQUAL
29335: IFFALSE 29345
// result := true ;
29337: LD_ADDR_VAR 0 2
29341: PUSH
29342: LD_INT 1
29344: ST_TO_ADDR
// end ;
29345: LD_VAR 0 2
29349: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29350: LD_INT 0
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
// if pos < 1 then
29356: LD_VAR 0 2
29360: PUSH
29361: LD_INT 1
29363: LESS
29364: IFFALSE 29368
// exit ;
29366: GO 29671
// if pos = 1 then
29368: LD_VAR 0 2
29372: PUSH
29373: LD_INT 1
29375: EQUAL
29376: IFFALSE 29409
// result := Replace ( arr , pos [ 1 ] , value ) else
29378: LD_ADDR_VAR 0 4
29382: PUSH
29383: LD_VAR 0 1
29387: PPUSH
29388: LD_VAR 0 2
29392: PUSH
29393: LD_INT 1
29395: ARRAY
29396: PPUSH
29397: LD_VAR 0 3
29401: PPUSH
29402: CALL_OW 1
29406: ST_TO_ADDR
29407: GO 29671
// begin tmp := arr ;
29409: LD_ADDR_VAR 0 6
29413: PUSH
29414: LD_VAR 0 1
29418: ST_TO_ADDR
// s_arr := [ tmp ] ;
29419: LD_ADDR_VAR 0 7
29423: PUSH
29424: LD_VAR 0 6
29428: PUSH
29429: EMPTY
29430: LIST
29431: ST_TO_ADDR
// for i = 1 to pos - 1 do
29432: LD_ADDR_VAR 0 5
29436: PUSH
29437: DOUBLE
29438: LD_INT 1
29440: DEC
29441: ST_TO_ADDR
29442: LD_VAR 0 2
29446: PUSH
29447: LD_INT 1
29449: MINUS
29450: PUSH
29451: FOR_TO
29452: IFFALSE 29497
// begin tmp := tmp [ pos [ i ] ] ;
29454: LD_ADDR_VAR 0 6
29458: PUSH
29459: LD_VAR 0 6
29463: PUSH
29464: LD_VAR 0 2
29468: PUSH
29469: LD_VAR 0 5
29473: ARRAY
29474: ARRAY
29475: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29476: LD_ADDR_VAR 0 7
29480: PUSH
29481: LD_VAR 0 7
29485: PUSH
29486: LD_VAR 0 6
29490: PUSH
29491: EMPTY
29492: LIST
29493: ADD
29494: ST_TO_ADDR
// end ;
29495: GO 29451
29497: POP
29498: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29499: LD_ADDR_VAR 0 6
29503: PUSH
29504: LD_VAR 0 6
29508: PPUSH
29509: LD_VAR 0 2
29513: PUSH
29514: LD_VAR 0 2
29518: ARRAY
29519: PPUSH
29520: LD_VAR 0 3
29524: PPUSH
29525: CALL_OW 1
29529: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29530: LD_ADDR_VAR 0 7
29534: PUSH
29535: LD_VAR 0 7
29539: PPUSH
29540: LD_VAR 0 7
29544: PPUSH
29545: LD_VAR 0 6
29549: PPUSH
29550: CALL_OW 1
29554: ST_TO_ADDR
// for i = s_arr downto 2 do
29555: LD_ADDR_VAR 0 5
29559: PUSH
29560: DOUBLE
29561: LD_VAR 0 7
29565: INC
29566: ST_TO_ADDR
29567: LD_INT 2
29569: PUSH
29570: FOR_DOWNTO
29571: IFFALSE 29655
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29573: LD_ADDR_VAR 0 6
29577: PUSH
29578: LD_VAR 0 7
29582: PUSH
29583: LD_VAR 0 5
29587: PUSH
29588: LD_INT 1
29590: MINUS
29591: ARRAY
29592: PPUSH
29593: LD_VAR 0 2
29597: PUSH
29598: LD_VAR 0 5
29602: PUSH
29603: LD_INT 1
29605: MINUS
29606: ARRAY
29607: PPUSH
29608: LD_VAR 0 7
29612: PUSH
29613: LD_VAR 0 5
29617: ARRAY
29618: PPUSH
29619: CALL_OW 1
29623: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29624: LD_ADDR_VAR 0 7
29628: PUSH
29629: LD_VAR 0 7
29633: PPUSH
29634: LD_VAR 0 5
29638: PUSH
29639: LD_INT 1
29641: MINUS
29642: PPUSH
29643: LD_VAR 0 6
29647: PPUSH
29648: CALL_OW 1
29652: ST_TO_ADDR
// end ;
29653: GO 29570
29655: POP
29656: POP
// result := s_arr [ 1 ] ;
29657: LD_ADDR_VAR 0 4
29661: PUSH
29662: LD_VAR 0 7
29666: PUSH
29667: LD_INT 1
29669: ARRAY
29670: ST_TO_ADDR
// end ; end ;
29671: LD_VAR 0 4
29675: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29676: LD_INT 0
29678: PPUSH
29679: PPUSH
// if not list then
29680: LD_VAR 0 1
29684: NOT
29685: IFFALSE 29689
// exit ;
29687: GO 29780
// i := list [ pos1 ] ;
29689: LD_ADDR_VAR 0 5
29693: PUSH
29694: LD_VAR 0 1
29698: PUSH
29699: LD_VAR 0 2
29703: ARRAY
29704: ST_TO_ADDR
// if not i then
29705: LD_VAR 0 5
29709: NOT
29710: IFFALSE 29714
// exit ;
29712: GO 29780
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29714: LD_ADDR_VAR 0 1
29718: PUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: LD_VAR 0 2
29728: PPUSH
29729: LD_VAR 0 1
29733: PUSH
29734: LD_VAR 0 3
29738: ARRAY
29739: PPUSH
29740: CALL_OW 1
29744: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: LD_VAR 0 3
29759: PPUSH
29760: LD_VAR 0 5
29764: PPUSH
29765: CALL_OW 1
29769: ST_TO_ADDR
// result := list ;
29770: LD_ADDR_VAR 0 4
29774: PUSH
29775: LD_VAR 0 1
29779: ST_TO_ADDR
// end ;
29780: LD_VAR 0 4
29784: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29785: LD_INT 0
29787: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29788: LD_ADDR_VAR 0 5
29792: PUSH
29793: LD_VAR 0 1
29797: PPUSH
29798: CALL_OW 250
29802: PPUSH
29803: LD_VAR 0 1
29807: PPUSH
29808: CALL_OW 251
29812: PPUSH
29813: LD_VAR 0 2
29817: PPUSH
29818: LD_VAR 0 3
29822: PPUSH
29823: LD_VAR 0 4
29827: PPUSH
29828: CALL 29838 0 5
29832: ST_TO_ADDR
// end ;
29833: LD_VAR 0 5
29837: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29838: LD_INT 0
29840: PPUSH
29841: PPUSH
29842: PPUSH
29843: PPUSH
// if not list then
29844: LD_VAR 0 3
29848: NOT
29849: IFFALSE 29853
// exit ;
29851: GO 30241
// result := [ ] ;
29853: LD_ADDR_VAR 0 6
29857: PUSH
29858: EMPTY
29859: ST_TO_ADDR
// for i in list do
29860: LD_ADDR_VAR 0 7
29864: PUSH
29865: LD_VAR 0 3
29869: PUSH
29870: FOR_IN
29871: IFFALSE 30073
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29873: LD_ADDR_VAR 0 9
29877: PUSH
29878: LD_VAR 0 7
29882: PPUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: LD_VAR 0 2
29892: PPUSH
29893: CALL_OW 297
29897: ST_TO_ADDR
// if not result then
29898: LD_VAR 0 6
29902: NOT
29903: IFFALSE 29929
// result := [ [ i , tmp ] ] else
29905: LD_ADDR_VAR 0 6
29909: PUSH
29910: LD_VAR 0 7
29914: PUSH
29915: LD_VAR 0 9
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: ST_TO_ADDR
29927: GO 30071
// begin if result [ result ] [ 2 ] < tmp then
29929: LD_VAR 0 6
29933: PUSH
29934: LD_VAR 0 6
29938: ARRAY
29939: PUSH
29940: LD_INT 2
29942: ARRAY
29943: PUSH
29944: LD_VAR 0 9
29948: LESS
29949: IFFALSE 29991
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29951: LD_ADDR_VAR 0 6
29955: PUSH
29956: LD_VAR 0 6
29960: PPUSH
29961: LD_VAR 0 6
29965: PUSH
29966: LD_INT 1
29968: PLUS
29969: PPUSH
29970: LD_VAR 0 7
29974: PUSH
29975: LD_VAR 0 9
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PPUSH
29984: CALL_OW 2
29988: ST_TO_ADDR
29989: GO 30071
// for j = 1 to result do
29991: LD_ADDR_VAR 0 8
29995: PUSH
29996: DOUBLE
29997: LD_INT 1
29999: DEC
30000: ST_TO_ADDR
30001: LD_VAR 0 6
30005: PUSH
30006: FOR_TO
30007: IFFALSE 30069
// begin if tmp < result [ j ] [ 2 ] then
30009: LD_VAR 0 9
30013: PUSH
30014: LD_VAR 0 6
30018: PUSH
30019: LD_VAR 0 8
30023: ARRAY
30024: PUSH
30025: LD_INT 2
30027: ARRAY
30028: LESS
30029: IFFALSE 30067
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30031: LD_ADDR_VAR 0 6
30035: PUSH
30036: LD_VAR 0 6
30040: PPUSH
30041: LD_VAR 0 8
30045: PPUSH
30046: LD_VAR 0 7
30050: PUSH
30051: LD_VAR 0 9
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PPUSH
30060: CALL_OW 2
30064: ST_TO_ADDR
// break ;
30065: GO 30069
// end ; end ;
30067: GO 30006
30069: POP
30070: POP
// end ; end ;
30071: GO 29870
30073: POP
30074: POP
// if result and not asc then
30075: LD_VAR 0 6
30079: PUSH
30080: LD_VAR 0 4
30084: NOT
30085: AND
30086: IFFALSE 30161
// begin tmp := result ;
30088: LD_ADDR_VAR 0 9
30092: PUSH
30093: LD_VAR 0 6
30097: ST_TO_ADDR
// for i = tmp downto 1 do
30098: LD_ADDR_VAR 0 7
30102: PUSH
30103: DOUBLE
30104: LD_VAR 0 9
30108: INC
30109: ST_TO_ADDR
30110: LD_INT 1
30112: PUSH
30113: FOR_DOWNTO
30114: IFFALSE 30159
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30116: LD_ADDR_VAR 0 6
30120: PUSH
30121: LD_VAR 0 6
30125: PPUSH
30126: LD_VAR 0 9
30130: PUSH
30131: LD_VAR 0 7
30135: MINUS
30136: PUSH
30137: LD_INT 1
30139: PLUS
30140: PPUSH
30141: LD_VAR 0 9
30145: PUSH
30146: LD_VAR 0 7
30150: ARRAY
30151: PPUSH
30152: CALL_OW 1
30156: ST_TO_ADDR
30157: GO 30113
30159: POP
30160: POP
// end ; tmp := [ ] ;
30161: LD_ADDR_VAR 0 9
30165: PUSH
30166: EMPTY
30167: ST_TO_ADDR
// if mode then
30168: LD_VAR 0 5
30172: IFFALSE 30241
// begin for i = 1 to result do
30174: LD_ADDR_VAR 0 7
30178: PUSH
30179: DOUBLE
30180: LD_INT 1
30182: DEC
30183: ST_TO_ADDR
30184: LD_VAR 0 6
30188: PUSH
30189: FOR_TO
30190: IFFALSE 30229
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30192: LD_ADDR_VAR 0 9
30196: PUSH
30197: LD_VAR 0 9
30201: PPUSH
30202: LD_VAR 0 7
30206: PPUSH
30207: LD_VAR 0 6
30211: PUSH
30212: LD_VAR 0 7
30216: ARRAY
30217: PUSH
30218: LD_INT 1
30220: ARRAY
30221: PPUSH
30222: CALL_OW 1
30226: ST_TO_ADDR
30227: GO 30189
30229: POP
30230: POP
// result := tmp ;
30231: LD_ADDR_VAR 0 6
30235: PUSH
30236: LD_VAR 0 9
30240: ST_TO_ADDR
// end ; end ;
30241: LD_VAR 0 6
30245: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30246: LD_INT 0
30248: PPUSH
30249: PPUSH
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30254: LD_ADDR_VAR 0 5
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: ST_TO_ADDR
// if not x or not y then
30276: LD_VAR 0 2
30280: NOT
30281: PUSH
30282: LD_VAR 0 3
30286: NOT
30287: OR
30288: IFFALSE 30292
// exit ;
30290: GO 31944
// if not range then
30292: LD_VAR 0 4
30296: NOT
30297: IFFALSE 30307
// range := 10 ;
30299: LD_ADDR_VAR 0 4
30303: PUSH
30304: LD_INT 10
30306: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30307: LD_ADDR_VAR 0 8
30311: PUSH
30312: LD_INT 81
30314: PUSH
30315: LD_VAR 0 1
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 92
30326: PUSH
30327: LD_VAR 0 2
30331: PUSH
30332: LD_VAR 0 3
30336: PUSH
30337: LD_VAR 0 4
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: LD_INT 21
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: PPUSH
30370: CALL_OW 69
30374: ST_TO_ADDR
// if not tmp then
30375: LD_VAR 0 8
30379: NOT
30380: IFFALSE 30384
// exit ;
30382: GO 31944
// for i in tmp do
30384: LD_ADDR_VAR 0 6
30388: PUSH
30389: LD_VAR 0 8
30393: PUSH
30394: FOR_IN
30395: IFFALSE 31919
// begin points := [ 0 , 0 , 0 ] ;
30397: LD_ADDR_VAR 0 9
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: LIST
30415: ST_TO_ADDR
// bpoints := 1 ;
30416: LD_ADDR_VAR 0 10
30420: PUSH
30421: LD_INT 1
30423: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30424: LD_VAR 0 6
30428: PPUSH
30429: CALL_OW 247
30433: PUSH
30434: LD_INT 1
30436: DOUBLE
30437: EQUAL
30438: IFTRUE 30442
30440: GO 31020
30442: POP
// begin if GetClass ( i ) = 1 then
30443: LD_VAR 0 6
30447: PPUSH
30448: CALL_OW 257
30452: PUSH
30453: LD_INT 1
30455: EQUAL
30456: IFFALSE 30477
// points := [ 10 , 5 , 3 ] ;
30458: LD_ADDR_VAR 0 9
30462: PUSH
30463: LD_INT 10
30465: PUSH
30466: LD_INT 5
30468: PUSH
30469: LD_INT 3
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30477: LD_VAR 0 6
30481: PPUSH
30482: CALL_OW 257
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: LD_INT 4
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: IN
30501: IFFALSE 30522
// points := [ 3 , 2 , 1 ] ;
30503: LD_ADDR_VAR 0 9
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30522: LD_VAR 0 6
30526: PPUSH
30527: CALL_OW 257
30531: PUSH
30532: LD_INT 5
30534: EQUAL
30535: IFFALSE 30556
// points := [ 130 , 5 , 2 ] ;
30537: LD_ADDR_VAR 0 9
30541: PUSH
30542: LD_INT 130
30544: PUSH
30545: LD_INT 5
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30556: LD_VAR 0 6
30560: PPUSH
30561: CALL_OW 257
30565: PUSH
30566: LD_INT 8
30568: EQUAL
30569: IFFALSE 30590
// points := [ 35 , 35 , 30 ] ;
30571: LD_ADDR_VAR 0 9
30575: PUSH
30576: LD_INT 35
30578: PUSH
30579: LD_INT 35
30581: PUSH
30582: LD_INT 30
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30590: LD_VAR 0 6
30594: PPUSH
30595: CALL_OW 257
30599: PUSH
30600: LD_INT 9
30602: EQUAL
30603: IFFALSE 30624
// points := [ 20 , 55 , 40 ] ;
30605: LD_ADDR_VAR 0 9
30609: PUSH
30610: LD_INT 20
30612: PUSH
30613: LD_INT 55
30615: PUSH
30616: LD_INT 40
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30624: LD_VAR 0 6
30628: PPUSH
30629: CALL_OW 257
30633: PUSH
30634: LD_INT 12
30636: PUSH
30637: LD_INT 16
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: IN
30644: IFFALSE 30665
// points := [ 5 , 3 , 2 ] ;
30646: LD_ADDR_VAR 0 9
30650: PUSH
30651: LD_INT 5
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30665: LD_VAR 0 6
30669: PPUSH
30670: CALL_OW 257
30674: PUSH
30675: LD_INT 17
30677: EQUAL
30678: IFFALSE 30699
// points := [ 100 , 50 , 75 ] ;
30680: LD_ADDR_VAR 0 9
30684: PUSH
30685: LD_INT 100
30687: PUSH
30688: LD_INT 50
30690: PUSH
30691: LD_INT 75
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30699: LD_VAR 0 6
30703: PPUSH
30704: CALL_OW 257
30708: PUSH
30709: LD_INT 15
30711: EQUAL
30712: IFFALSE 30733
// points := [ 10 , 5 , 3 ] ;
30714: LD_ADDR_VAR 0 9
30718: PUSH
30719: LD_INT 10
30721: PUSH
30722: LD_INT 5
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30733: LD_VAR 0 6
30737: PPUSH
30738: CALL_OW 257
30742: PUSH
30743: LD_INT 14
30745: EQUAL
30746: IFFALSE 30767
// points := [ 10 , 0 , 0 ] ;
30748: LD_ADDR_VAR 0 9
30752: PUSH
30753: LD_INT 10
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30767: LD_VAR 0 6
30771: PPUSH
30772: CALL_OW 257
30776: PUSH
30777: LD_INT 11
30779: EQUAL
30780: IFFALSE 30801
// points := [ 30 , 10 , 5 ] ;
30782: LD_ADDR_VAR 0 9
30786: PUSH
30787: LD_INT 30
30789: PUSH
30790: LD_INT 10
30792: PUSH
30793: LD_INT 5
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: LIST
30800: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30801: LD_VAR 0 1
30805: PPUSH
30806: LD_INT 5
30808: PPUSH
30809: CALL_OW 321
30813: PUSH
30814: LD_INT 2
30816: EQUAL
30817: IFFALSE 30834
// bpoints := bpoints * 1.8 ;
30819: LD_ADDR_VAR 0 10
30823: PUSH
30824: LD_VAR 0 10
30828: PUSH
30829: LD_REAL  1.80000000000000E+0000
30832: MUL
30833: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30834: LD_VAR 0 6
30838: PPUSH
30839: CALL_OW 257
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: LD_INT 3
30852: PUSH
30853: LD_INT 4
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: IN
30862: PUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: LD_INT 51
30870: PPUSH
30871: CALL_OW 321
30875: PUSH
30876: LD_INT 2
30878: EQUAL
30879: AND
30880: IFFALSE 30897
// bpoints := bpoints * 1.2 ;
30882: LD_ADDR_VAR 0 10
30886: PUSH
30887: LD_VAR 0 10
30891: PUSH
30892: LD_REAL  1.20000000000000E+0000
30895: MUL
30896: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30897: LD_VAR 0 6
30901: PPUSH
30902: CALL_OW 257
30906: PUSH
30907: LD_INT 5
30909: PUSH
30910: LD_INT 7
30912: PUSH
30913: LD_INT 9
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: IN
30921: PUSH
30922: LD_VAR 0 1
30926: PPUSH
30927: LD_INT 52
30929: PPUSH
30930: CALL_OW 321
30934: PUSH
30935: LD_INT 2
30937: EQUAL
30938: AND
30939: IFFALSE 30956
// bpoints := bpoints * 1.5 ;
30941: LD_ADDR_VAR 0 10
30945: PUSH
30946: LD_VAR 0 10
30950: PUSH
30951: LD_REAL  1.50000000000000E+0000
30954: MUL
30955: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30956: LD_VAR 0 1
30960: PPUSH
30961: LD_INT 66
30963: PPUSH
30964: CALL_OW 321
30968: PUSH
30969: LD_INT 2
30971: EQUAL
30972: IFFALSE 30989
// bpoints := bpoints * 1.1 ;
30974: LD_ADDR_VAR 0 10
30978: PUSH
30979: LD_VAR 0 10
30983: PUSH
30984: LD_REAL  1.10000000000000E+0000
30987: MUL
30988: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30989: LD_ADDR_VAR 0 10
30993: PUSH
30994: LD_VAR 0 10
30998: PUSH
30999: LD_VAR 0 6
31003: PPUSH
31004: LD_INT 1
31006: PPUSH
31007: CALL_OW 259
31011: PUSH
31012: LD_REAL  1.15000000000000E+0000
31015: MUL
31016: MUL
31017: ST_TO_ADDR
// end ; unit_vehicle :
31018: GO 31848
31020: LD_INT 2
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31836
31028: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31029: LD_VAR 0 6
31033: PPUSH
31034: CALL_OW 264
31038: PUSH
31039: LD_INT 2
31041: PUSH
31042: LD_INT 42
31044: PUSH
31045: LD_INT 24
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: IN
31053: IFFALSE 31074
// points := [ 25 , 5 , 3 ] ;
31055: LD_ADDR_VAR 0 9
31059: PUSH
31060: LD_INT 25
31062: PUSH
31063: LD_INT 5
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31074: LD_VAR 0 6
31078: PPUSH
31079: CALL_OW 264
31083: PUSH
31084: LD_INT 4
31086: PUSH
31087: LD_INT 43
31089: PUSH
31090: LD_INT 25
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: IN
31098: IFFALSE 31119
// points := [ 40 , 15 , 5 ] ;
31100: LD_ADDR_VAR 0 9
31104: PUSH
31105: LD_INT 40
31107: PUSH
31108: LD_INT 15
31110: PUSH
31111: LD_INT 5
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31119: LD_VAR 0 6
31123: PPUSH
31124: CALL_OW 264
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: LD_INT 23
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: IN
31139: IFFALSE 31160
// points := [ 7 , 25 , 8 ] ;
31141: LD_ADDR_VAR 0 9
31145: PUSH
31146: LD_INT 7
31148: PUSH
31149: LD_INT 25
31151: PUSH
31152: LD_INT 8
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31160: LD_VAR 0 6
31164: PPUSH
31165: CALL_OW 264
31169: PUSH
31170: LD_INT 5
31172: PUSH
31173: LD_INT 27
31175: PUSH
31176: LD_INT 44
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: IN
31184: IFFALSE 31205
// points := [ 14 , 50 , 16 ] ;
31186: LD_ADDR_VAR 0 9
31190: PUSH
31191: LD_INT 14
31193: PUSH
31194: LD_INT 50
31196: PUSH
31197: LD_INT 16
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31205: LD_VAR 0 6
31209: PPUSH
31210: CALL_OW 264
31214: PUSH
31215: LD_INT 6
31217: PUSH
31218: LD_INT 46
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: IN
31225: IFFALSE 31246
// points := [ 32 , 120 , 70 ] ;
31227: LD_ADDR_VAR 0 9
31231: PUSH
31232: LD_INT 32
31234: PUSH
31235: LD_INT 120
31237: PUSH
31238: LD_INT 70
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31246: LD_VAR 0 6
31250: PPUSH
31251: CALL_OW 264
31255: PUSH
31256: LD_INT 7
31258: PUSH
31259: LD_INT 28
31261: PUSH
31262: LD_INT 45
31264: PUSH
31265: LD_EXP 98
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: IN
31276: IFFALSE 31297
// points := [ 35 , 20 , 45 ] ;
31278: LD_ADDR_VAR 0 9
31282: PUSH
31283: LD_INT 35
31285: PUSH
31286: LD_INT 20
31288: PUSH
31289: LD_INT 45
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31297: LD_VAR 0 6
31301: PPUSH
31302: CALL_OW 264
31306: PUSH
31307: LD_INT 47
31309: PUSH
31310: EMPTY
31311: LIST
31312: IN
31313: IFFALSE 31334
// points := [ 67 , 45 , 75 ] ;
31315: LD_ADDR_VAR 0 9
31319: PUSH
31320: LD_INT 67
31322: PUSH
31323: LD_INT 45
31325: PUSH
31326: LD_INT 75
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31334: LD_VAR 0 6
31338: PPUSH
31339: CALL_OW 264
31343: PUSH
31344: LD_INT 26
31346: PUSH
31347: EMPTY
31348: LIST
31349: IN
31350: IFFALSE 31371
// points := [ 120 , 30 , 80 ] ;
31352: LD_ADDR_VAR 0 9
31356: PUSH
31357: LD_INT 120
31359: PUSH
31360: LD_INT 30
31362: PUSH
31363: LD_INT 80
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31371: LD_VAR 0 6
31375: PPUSH
31376: CALL_OW 264
31380: PUSH
31381: LD_INT 22
31383: PUSH
31384: EMPTY
31385: LIST
31386: IN
31387: IFFALSE 31408
// points := [ 40 , 1 , 1 ] ;
31389: LD_ADDR_VAR 0 9
31393: PUSH
31394: LD_INT 40
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: LIST
31407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31408: LD_VAR 0 6
31412: PPUSH
31413: CALL_OW 264
31417: PUSH
31418: LD_INT 29
31420: PUSH
31421: EMPTY
31422: LIST
31423: IN
31424: IFFALSE 31445
// points := [ 70 , 200 , 400 ] ;
31426: LD_ADDR_VAR 0 9
31430: PUSH
31431: LD_INT 70
31433: PUSH
31434: LD_INT 200
31436: PUSH
31437: LD_INT 400
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31445: LD_VAR 0 6
31449: PPUSH
31450: CALL_OW 264
31454: PUSH
31455: LD_INT 14
31457: PUSH
31458: LD_INT 53
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: IN
31465: IFFALSE 31486
// points := [ 40 , 10 , 20 ] ;
31467: LD_ADDR_VAR 0 9
31471: PUSH
31472: LD_INT 40
31474: PUSH
31475: LD_INT 10
31477: PUSH
31478: LD_INT 20
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31486: LD_VAR 0 6
31490: PPUSH
31491: CALL_OW 264
31495: PUSH
31496: LD_INT 9
31498: PUSH
31499: EMPTY
31500: LIST
31501: IN
31502: IFFALSE 31523
// points := [ 5 , 70 , 20 ] ;
31504: LD_ADDR_VAR 0 9
31508: PUSH
31509: LD_INT 5
31511: PUSH
31512: LD_INT 70
31514: PUSH
31515: LD_INT 20
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: LIST
31522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31523: LD_VAR 0 6
31527: PPUSH
31528: CALL_OW 264
31532: PUSH
31533: LD_INT 10
31535: PUSH
31536: EMPTY
31537: LIST
31538: IN
31539: IFFALSE 31560
// points := [ 35 , 110 , 70 ] ;
31541: LD_ADDR_VAR 0 9
31545: PUSH
31546: LD_INT 35
31548: PUSH
31549: LD_INT 110
31551: PUSH
31552: LD_INT 70
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31560: LD_VAR 0 6
31564: PPUSH
31565: CALL_OW 265
31569: PUSH
31570: LD_INT 25
31572: EQUAL
31573: IFFALSE 31594
// points := [ 80 , 65 , 100 ] ;
31575: LD_ADDR_VAR 0 9
31579: PUSH
31580: LD_INT 80
31582: PUSH
31583: LD_INT 65
31585: PUSH
31586: LD_INT 100
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31594: LD_VAR 0 6
31598: PPUSH
31599: CALL_OW 263
31603: PUSH
31604: LD_INT 1
31606: EQUAL
31607: IFFALSE 31642
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31609: LD_ADDR_VAR 0 10
31613: PUSH
31614: LD_VAR 0 10
31618: PUSH
31619: LD_VAR 0 6
31623: PPUSH
31624: CALL_OW 311
31628: PPUSH
31629: LD_INT 3
31631: PPUSH
31632: CALL_OW 259
31636: PUSH
31637: LD_INT 4
31639: MUL
31640: MUL
31641: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31642: LD_VAR 0 6
31646: PPUSH
31647: CALL_OW 263
31651: PUSH
31652: LD_INT 2
31654: EQUAL
31655: IFFALSE 31706
// begin j := IsControledBy ( i ) ;
31657: LD_ADDR_VAR 0 7
31661: PUSH
31662: LD_VAR 0 6
31666: PPUSH
31667: CALL_OW 312
31671: ST_TO_ADDR
// if j then
31672: LD_VAR 0 7
31676: IFFALSE 31706
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31678: LD_ADDR_VAR 0 10
31682: PUSH
31683: LD_VAR 0 10
31687: PUSH
31688: LD_VAR 0 7
31692: PPUSH
31693: LD_INT 3
31695: PPUSH
31696: CALL_OW 259
31700: PUSH
31701: LD_INT 3
31703: MUL
31704: MUL
31705: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31706: LD_VAR 0 6
31710: PPUSH
31711: CALL_OW 264
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: LD_INT 6
31721: PUSH
31722: LD_INT 46
31724: PUSH
31725: LD_INT 44
31727: PUSH
31728: LD_INT 47
31730: PUSH
31731: LD_INT 45
31733: PUSH
31734: LD_INT 28
31736: PUSH
31737: LD_INT 7
31739: PUSH
31740: LD_INT 27
31742: PUSH
31743: LD_INT 29
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: IN
31758: PUSH
31759: LD_VAR 0 1
31763: PPUSH
31764: LD_INT 52
31766: PPUSH
31767: CALL_OW 321
31771: PUSH
31772: LD_INT 2
31774: EQUAL
31775: AND
31776: IFFALSE 31793
// bpoints := bpoints * 1.2 ;
31778: LD_ADDR_VAR 0 10
31782: PUSH
31783: LD_VAR 0 10
31787: PUSH
31788: LD_REAL  1.20000000000000E+0000
31791: MUL
31792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31793: LD_VAR 0 6
31797: PPUSH
31798: CALL_OW 264
31802: PUSH
31803: LD_INT 6
31805: PUSH
31806: LD_INT 46
31808: PUSH
31809: LD_INT 47
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: LIST
31816: IN
31817: IFFALSE 31834
// bpoints := bpoints * 1.2 ;
31819: LD_ADDR_VAR 0 10
31823: PUSH
31824: LD_VAR 0 10
31828: PUSH
31829: LD_REAL  1.20000000000000E+0000
31832: MUL
31833: ST_TO_ADDR
// end ; unit_building :
31834: GO 31848
31836: LD_INT 3
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31847
31844: POP
// ; end ;
31845: GO 31848
31847: POP
// for j = 1 to 3 do
31848: LD_ADDR_VAR 0 7
31852: PUSH
31853: DOUBLE
31854: LD_INT 1
31856: DEC
31857: ST_TO_ADDR
31858: LD_INT 3
31860: PUSH
31861: FOR_TO
31862: IFFALSE 31915
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31864: LD_ADDR_VAR 0 5
31868: PUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: LD_VAR 0 7
31878: PPUSH
31879: LD_VAR 0 5
31883: PUSH
31884: LD_VAR 0 7
31888: ARRAY
31889: PUSH
31890: LD_VAR 0 9
31894: PUSH
31895: LD_VAR 0 7
31899: ARRAY
31900: PUSH
31901: LD_VAR 0 10
31905: MUL
31906: PLUS
31907: PPUSH
31908: CALL_OW 1
31912: ST_TO_ADDR
31913: GO 31861
31915: POP
31916: POP
// end ;
31917: GO 30394
31919: POP
31920: POP
// result := Replace ( result , 4 , tmp ) ;
31921: LD_ADDR_VAR 0 5
31925: PUSH
31926: LD_VAR 0 5
31930: PPUSH
31931: LD_INT 4
31933: PPUSH
31934: LD_VAR 0 8
31938: PPUSH
31939: CALL_OW 1
31943: ST_TO_ADDR
// end ;
31944: LD_VAR 0 5
31948: RET
// export function DangerAtRange ( unit , range ) ; begin
31949: LD_INT 0
31951: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31952: LD_ADDR_VAR 0 3
31956: PUSH
31957: LD_VAR 0 1
31961: PPUSH
31962: CALL_OW 255
31966: PPUSH
31967: LD_VAR 0 1
31971: PPUSH
31972: CALL_OW 250
31976: PPUSH
31977: LD_VAR 0 1
31981: PPUSH
31982: CALL_OW 251
31986: PPUSH
31987: LD_VAR 0 2
31991: PPUSH
31992: CALL 30246 0 4
31996: ST_TO_ADDR
// end ;
31997: LD_VAR 0 3
32001: RET
// export function DangerInArea ( side , area ) ; begin
32002: LD_INT 0
32004: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32005: LD_ADDR_VAR 0 3
32009: PUSH
32010: LD_VAR 0 2
32014: PPUSH
32015: LD_INT 81
32017: PUSH
32018: LD_VAR 0 1
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PPUSH
32027: CALL_OW 70
32031: ST_TO_ADDR
// end ;
32032: LD_VAR 0 3
32036: RET
// export function IsExtension ( b ) ; begin
32037: LD_INT 0
32039: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32040: LD_ADDR_VAR 0 2
32044: PUSH
32045: LD_VAR 0 1
32049: PUSH
32050: LD_INT 23
32052: PUSH
32053: LD_INT 20
32055: PUSH
32056: LD_INT 22
32058: PUSH
32059: LD_INT 17
32061: PUSH
32062: LD_INT 24
32064: PUSH
32065: LD_INT 21
32067: PUSH
32068: LD_INT 19
32070: PUSH
32071: LD_INT 16
32073: PUSH
32074: LD_INT 25
32076: PUSH
32077: LD_INT 18
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: IN
32092: ST_TO_ADDR
// end ;
32093: LD_VAR 0 2
32097: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32098: LD_INT 0
32100: PPUSH
32101: PPUSH
32102: PPUSH
// result := [ ] ;
32103: LD_ADDR_VAR 0 4
32107: PUSH
32108: EMPTY
32109: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32110: LD_ADDR_VAR 0 5
32114: PUSH
32115: LD_VAR 0 2
32119: PPUSH
32120: LD_INT 21
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PPUSH
32130: CALL_OW 70
32134: ST_TO_ADDR
// if not tmp then
32135: LD_VAR 0 5
32139: NOT
32140: IFFALSE 32144
// exit ;
32142: GO 32208
// if checkLink then
32144: LD_VAR 0 3
32148: IFFALSE 32198
// begin for i in tmp do
32150: LD_ADDR_VAR 0 6
32154: PUSH
32155: LD_VAR 0 5
32159: PUSH
32160: FOR_IN
32161: IFFALSE 32196
// if GetBase ( i ) <> base then
32163: LD_VAR 0 6
32167: PPUSH
32168: CALL_OW 274
32172: PUSH
32173: LD_VAR 0 1
32177: NONEQUAL
32178: IFFALSE 32194
// ComLinkToBase ( base , i ) ;
32180: LD_VAR 0 1
32184: PPUSH
32185: LD_VAR 0 6
32189: PPUSH
32190: CALL_OW 169
32194: GO 32160
32196: POP
32197: POP
// end ; result := tmp ;
32198: LD_ADDR_VAR 0 4
32202: PUSH
32203: LD_VAR 0 5
32207: ST_TO_ADDR
// end ;
32208: LD_VAR 0 4
32212: RET
// export function ComComplete ( units , b ) ; var i ; begin
32213: LD_INT 0
32215: PPUSH
32216: PPUSH
// if not units then
32217: LD_VAR 0 1
32221: NOT
32222: IFFALSE 32226
// exit ;
32224: GO 32316
// for i in units do
32226: LD_ADDR_VAR 0 4
32230: PUSH
32231: LD_VAR 0 1
32235: PUSH
32236: FOR_IN
32237: IFFALSE 32314
// if BuildingStatus ( b ) = bs_build then
32239: LD_VAR 0 2
32243: PPUSH
32244: CALL_OW 461
32248: PUSH
32249: LD_INT 1
32251: EQUAL
32252: IFFALSE 32312
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32254: LD_VAR 0 4
32258: PPUSH
32259: LD_STRING h
32261: PUSH
32262: LD_VAR 0 2
32266: PPUSH
32267: CALL_OW 250
32271: PUSH
32272: LD_VAR 0 2
32276: PPUSH
32277: CALL_OW 251
32281: PUSH
32282: LD_VAR 0 2
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: PPUSH
32308: CALL_OW 446
32312: GO 32236
32314: POP
32315: POP
// end ;
32316: LD_VAR 0 3
32320: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32321: LD_INT 0
32323: PPUSH
32324: PPUSH
32325: PPUSH
32326: PPUSH
32327: PPUSH
32328: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32329: LD_VAR 0 1
32333: NOT
32334: PUSH
32335: LD_VAR 0 1
32339: PPUSH
32340: CALL_OW 263
32344: PUSH
32345: LD_INT 2
32347: NONEQUAL
32348: OR
32349: IFFALSE 32353
// exit ;
32351: GO 32669
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32353: LD_ADDR_VAR 0 6
32357: PUSH
32358: LD_INT 22
32360: PUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 255
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 2
32377: PUSH
32378: LD_INT 30
32380: PUSH
32381: LD_INT 36
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 34
32390: PUSH
32391: LD_INT 31
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PPUSH
32407: CALL_OW 69
32411: ST_TO_ADDR
// if not tmp then
32412: LD_VAR 0 6
32416: NOT
32417: IFFALSE 32421
// exit ;
32419: GO 32669
// result := [ ] ;
32421: LD_ADDR_VAR 0 2
32425: PUSH
32426: EMPTY
32427: ST_TO_ADDR
// for i in tmp do
32428: LD_ADDR_VAR 0 3
32432: PUSH
32433: LD_VAR 0 6
32437: PUSH
32438: FOR_IN
32439: IFFALSE 32510
// begin t := UnitsInside ( i ) ;
32441: LD_ADDR_VAR 0 4
32445: PUSH
32446: LD_VAR 0 3
32450: PPUSH
32451: CALL_OW 313
32455: ST_TO_ADDR
// if t then
32456: LD_VAR 0 4
32460: IFFALSE 32508
// for j in t do
32462: LD_ADDR_VAR 0 7
32466: PUSH
32467: LD_VAR 0 4
32471: PUSH
32472: FOR_IN
32473: IFFALSE 32506
// result := Replace ( result , result + 1 , j ) ;
32475: LD_ADDR_VAR 0 2
32479: PUSH
32480: LD_VAR 0 2
32484: PPUSH
32485: LD_VAR 0 2
32489: PUSH
32490: LD_INT 1
32492: PLUS
32493: PPUSH
32494: LD_VAR 0 7
32498: PPUSH
32499: CALL_OW 1
32503: ST_TO_ADDR
32504: GO 32472
32506: POP
32507: POP
// end ;
32508: GO 32438
32510: POP
32511: POP
// if not result then
32512: LD_VAR 0 2
32516: NOT
32517: IFFALSE 32521
// exit ;
32519: GO 32669
// mech := result [ 1 ] ;
32521: LD_ADDR_VAR 0 5
32525: PUSH
32526: LD_VAR 0 2
32530: PUSH
32531: LD_INT 1
32533: ARRAY
32534: ST_TO_ADDR
// if result > 1 then
32535: LD_VAR 0 2
32539: PUSH
32540: LD_INT 1
32542: GREATER
32543: IFFALSE 32655
// begin for i = 2 to result do
32545: LD_ADDR_VAR 0 3
32549: PUSH
32550: DOUBLE
32551: LD_INT 2
32553: DEC
32554: ST_TO_ADDR
32555: LD_VAR 0 2
32559: PUSH
32560: FOR_TO
32561: IFFALSE 32653
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32563: LD_ADDR_VAR 0 4
32567: PUSH
32568: LD_VAR 0 2
32572: PUSH
32573: LD_VAR 0 3
32577: ARRAY
32578: PPUSH
32579: LD_INT 3
32581: PPUSH
32582: CALL_OW 259
32586: PUSH
32587: LD_VAR 0 2
32591: PUSH
32592: LD_VAR 0 3
32596: ARRAY
32597: PPUSH
32598: CALL_OW 432
32602: MINUS
32603: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32604: LD_VAR 0 4
32608: PUSH
32609: LD_VAR 0 5
32613: PPUSH
32614: LD_INT 3
32616: PPUSH
32617: CALL_OW 259
32621: PUSH
32622: LD_VAR 0 5
32626: PPUSH
32627: CALL_OW 432
32631: MINUS
32632: GREATEREQUAL
32633: IFFALSE 32651
// mech := result [ i ] ;
32635: LD_ADDR_VAR 0 5
32639: PUSH
32640: LD_VAR 0 2
32644: PUSH
32645: LD_VAR 0 3
32649: ARRAY
32650: ST_TO_ADDR
// end ;
32651: GO 32560
32653: POP
32654: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32655: LD_VAR 0 1
32659: PPUSH
32660: LD_VAR 0 5
32664: PPUSH
32665: CALL_OW 135
// end ;
32669: LD_VAR 0 2
32673: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32674: LD_INT 0
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
// result := [ ] ;
32689: LD_ADDR_VAR 0 7
32693: PUSH
32694: EMPTY
32695: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32696: LD_VAR 0 1
32700: PPUSH
32701: CALL_OW 266
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: IN
32716: NOT
32717: IFFALSE 32721
// exit ;
32719: GO 34355
// if name then
32721: LD_VAR 0 3
32725: IFFALSE 32741
// SetBName ( base_dep , name ) ;
32727: LD_VAR 0 1
32731: PPUSH
32732: LD_VAR 0 3
32736: PPUSH
32737: CALL_OW 500
// base := GetBase ( base_dep ) ;
32741: LD_ADDR_VAR 0 15
32745: PUSH
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 274
32755: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32756: LD_ADDR_VAR 0 16
32760: PUSH
32761: LD_VAR 0 1
32765: PPUSH
32766: CALL_OW 255
32770: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32771: LD_ADDR_VAR 0 17
32775: PUSH
32776: LD_VAR 0 1
32780: PPUSH
32781: CALL_OW 248
32785: ST_TO_ADDR
// if sources then
32786: LD_VAR 0 5
32790: IFFALSE 32837
// for i = 1 to 3 do
32792: LD_ADDR_VAR 0 8
32796: PUSH
32797: DOUBLE
32798: LD_INT 1
32800: DEC
32801: ST_TO_ADDR
32802: LD_INT 3
32804: PUSH
32805: FOR_TO
32806: IFFALSE 32835
// AddResourceType ( base , i , sources [ i ] ) ;
32808: LD_VAR 0 15
32812: PPUSH
32813: LD_VAR 0 8
32817: PPUSH
32818: LD_VAR 0 5
32822: PUSH
32823: LD_VAR 0 8
32827: ARRAY
32828: PPUSH
32829: CALL_OW 276
32833: GO 32805
32835: POP
32836: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32837: LD_ADDR_VAR 0 18
32841: PUSH
32842: LD_VAR 0 15
32846: PPUSH
32847: LD_VAR 0 2
32851: PPUSH
32852: LD_INT 1
32854: PPUSH
32855: CALL 32098 0 3
32859: ST_TO_ADDR
// InitHc ;
32860: CALL_OW 19
// InitUc ;
32864: CALL_OW 18
// uc_side := side ;
32868: LD_ADDR_OWVAR 20
32872: PUSH
32873: LD_VAR 0 16
32877: ST_TO_ADDR
// uc_nation := nation ;
32878: LD_ADDR_OWVAR 21
32882: PUSH
32883: LD_VAR 0 17
32887: ST_TO_ADDR
// if buildings then
32888: LD_VAR 0 18
32892: IFFALSE 34214
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32894: LD_ADDR_VAR 0 19
32898: PUSH
32899: LD_VAR 0 18
32903: PPUSH
32904: LD_INT 2
32906: PUSH
32907: LD_INT 30
32909: PUSH
32910: LD_INT 29
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 30
32919: PUSH
32920: LD_INT 30
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: PPUSH
32932: CALL_OW 72
32936: ST_TO_ADDR
// if tmp then
32937: LD_VAR 0 19
32941: IFFALSE 32989
// for i in tmp do
32943: LD_ADDR_VAR 0 8
32947: PUSH
32948: LD_VAR 0 19
32952: PUSH
32953: FOR_IN
32954: IFFALSE 32987
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32956: LD_VAR 0 8
32960: PPUSH
32961: CALL_OW 250
32965: PPUSH
32966: LD_VAR 0 8
32970: PPUSH
32971: CALL_OW 251
32975: PPUSH
32976: LD_VAR 0 16
32980: PPUSH
32981: CALL_OW 441
32985: GO 32953
32987: POP
32988: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32989: LD_VAR 0 18
32993: PPUSH
32994: LD_INT 2
32996: PUSH
32997: LD_INT 30
32999: PUSH
33000: LD_INT 32
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 30
33009: PUSH
33010: LD_INT 33
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: LIST
33021: PPUSH
33022: CALL_OW 72
33026: IFFALSE 33114
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33028: LD_ADDR_VAR 0 8
33032: PUSH
33033: LD_VAR 0 18
33037: PPUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 30
33043: PUSH
33044: LD_INT 32
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 30
33053: PUSH
33054: LD_INT 33
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: PPUSH
33066: CALL_OW 72
33070: PUSH
33071: FOR_IN
33072: IFFALSE 33112
// begin if not GetBWeapon ( i ) then
33074: LD_VAR 0 8
33078: PPUSH
33079: CALL_OW 269
33083: NOT
33084: IFFALSE 33110
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33086: LD_VAR 0 8
33090: PPUSH
33091: LD_VAR 0 8
33095: PPUSH
33096: LD_VAR 0 2
33100: PPUSH
33101: CALL 34360 0 2
33105: PPUSH
33106: CALL_OW 431
// end ;
33110: GO 33071
33112: POP
33113: POP
// end ; for i = 1 to personel do
33114: LD_ADDR_VAR 0 8
33118: PUSH
33119: DOUBLE
33120: LD_INT 1
33122: DEC
33123: ST_TO_ADDR
33124: LD_VAR 0 6
33128: PUSH
33129: FOR_TO
33130: IFFALSE 34194
// begin if i > 4 then
33132: LD_VAR 0 8
33136: PUSH
33137: LD_INT 4
33139: GREATER
33140: IFFALSE 33144
// break ;
33142: GO 34194
// case i of 1 :
33144: LD_VAR 0 8
33148: PUSH
33149: LD_INT 1
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33157
33155: GO 33237
33157: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33158: LD_ADDR_VAR 0 12
33162: PUSH
33163: LD_VAR 0 18
33167: PPUSH
33168: LD_INT 22
33170: PUSH
33171: LD_VAR 0 16
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 58
33182: PUSH
33183: EMPTY
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: LD_INT 30
33191: PUSH
33192: LD_INT 32
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 30
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 30
33211: PUSH
33212: LD_INT 5
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: LIST
33229: PPUSH
33230: CALL_OW 72
33234: ST_TO_ADDR
33235: GO 33459
33237: LD_INT 2
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33245
33243: GO 33307
33245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33246: LD_ADDR_VAR 0 12
33250: PUSH
33251: LD_VAR 0 18
33255: PPUSH
33256: LD_INT 22
33258: PUSH
33259: LD_VAR 0 16
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: LD_INT 30
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 30
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PPUSH
33300: CALL_OW 72
33304: ST_TO_ADDR
33305: GO 33459
33307: LD_INT 3
33309: DOUBLE
33310: EQUAL
33311: IFTRUE 33315
33313: GO 33377
33315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33316: LD_ADDR_VAR 0 12
33320: PUSH
33321: LD_VAR 0 18
33325: PPUSH
33326: LD_INT 22
33328: PUSH
33329: LD_VAR 0 16
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 30
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 30
33353: PUSH
33354: LD_INT 3
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PPUSH
33370: CALL_OW 72
33374: ST_TO_ADDR
33375: GO 33459
33377: LD_INT 4
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33385
33383: GO 33458
33385: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33386: LD_ADDR_VAR 0 12
33390: PUSH
33391: LD_VAR 0 18
33395: PPUSH
33396: LD_INT 22
33398: PUSH
33399: LD_VAR 0 16
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 30
33413: PUSH
33414: LD_INT 6
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 30
33423: PUSH
33424: LD_INT 7
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 30
33433: PUSH
33434: LD_INT 8
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PPUSH
33451: CALL_OW 72
33455: ST_TO_ADDR
33456: GO 33459
33458: POP
// if i = 1 then
33459: LD_VAR 0 8
33463: PUSH
33464: LD_INT 1
33466: EQUAL
33467: IFFALSE 33578
// begin tmp := [ ] ;
33469: LD_ADDR_VAR 0 19
33473: PUSH
33474: EMPTY
33475: ST_TO_ADDR
// for j in f do
33476: LD_ADDR_VAR 0 9
33480: PUSH
33481: LD_VAR 0 12
33485: PUSH
33486: FOR_IN
33487: IFFALSE 33560
// if GetBType ( j ) = b_bunker then
33489: LD_VAR 0 9
33493: PPUSH
33494: CALL_OW 266
33498: PUSH
33499: LD_INT 32
33501: EQUAL
33502: IFFALSE 33529
// tmp := Insert ( tmp , 1 , j ) else
33504: LD_ADDR_VAR 0 19
33508: PUSH
33509: LD_VAR 0 19
33513: PPUSH
33514: LD_INT 1
33516: PPUSH
33517: LD_VAR 0 9
33521: PPUSH
33522: CALL_OW 2
33526: ST_TO_ADDR
33527: GO 33558
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33529: LD_ADDR_VAR 0 19
33533: PUSH
33534: LD_VAR 0 19
33538: PPUSH
33539: LD_VAR 0 19
33543: PUSH
33544: LD_INT 1
33546: PLUS
33547: PPUSH
33548: LD_VAR 0 9
33552: PPUSH
33553: CALL_OW 2
33557: ST_TO_ADDR
33558: GO 33486
33560: POP
33561: POP
// if tmp then
33562: LD_VAR 0 19
33566: IFFALSE 33578
// f := tmp ;
33568: LD_ADDR_VAR 0 12
33572: PUSH
33573: LD_VAR 0 19
33577: ST_TO_ADDR
// end ; x := personel [ i ] ;
33578: LD_ADDR_VAR 0 13
33582: PUSH
33583: LD_VAR 0 6
33587: PUSH
33588: LD_VAR 0 8
33592: ARRAY
33593: ST_TO_ADDR
// if x = - 1 then
33594: LD_VAR 0 13
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: EQUAL
33603: IFFALSE 33812
// begin for j in f do
33605: LD_ADDR_VAR 0 9
33609: PUSH
33610: LD_VAR 0 12
33614: PUSH
33615: FOR_IN
33616: IFFALSE 33808
// repeat InitHc ;
33618: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33622: LD_VAR 0 9
33626: PPUSH
33627: CALL_OW 266
33631: PUSH
33632: LD_INT 5
33634: EQUAL
33635: IFFALSE 33705
// begin if UnitsInside ( j ) < 3 then
33637: LD_VAR 0 9
33641: PPUSH
33642: CALL_OW 313
33646: PUSH
33647: LD_INT 3
33649: LESS
33650: IFFALSE 33686
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33652: LD_INT 0
33654: PPUSH
33655: LD_INT 5
33657: PUSH
33658: LD_INT 8
33660: PUSH
33661: LD_INT 9
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: PUSH
33669: LD_VAR 0 17
33673: ARRAY
33674: PPUSH
33675: LD_VAR 0 4
33679: PPUSH
33680: CALL_OW 380
33684: GO 33703
// PrepareHuman ( false , i , skill ) ;
33686: LD_INT 0
33688: PPUSH
33689: LD_VAR 0 8
33693: PPUSH
33694: LD_VAR 0 4
33698: PPUSH
33699: CALL_OW 380
// end else
33703: GO 33722
// PrepareHuman ( false , i , skill ) ;
33705: LD_INT 0
33707: PPUSH
33708: LD_VAR 0 8
33712: PPUSH
33713: LD_VAR 0 4
33717: PPUSH
33718: CALL_OW 380
// un := CreateHuman ;
33722: LD_ADDR_VAR 0 14
33726: PUSH
33727: CALL_OW 44
33731: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33732: LD_ADDR_VAR 0 7
33736: PUSH
33737: LD_VAR 0 7
33741: PPUSH
33742: LD_INT 1
33744: PPUSH
33745: LD_VAR 0 14
33749: PPUSH
33750: CALL_OW 2
33754: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33755: LD_VAR 0 14
33759: PPUSH
33760: LD_VAR 0 9
33764: PPUSH
33765: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33769: LD_VAR 0 9
33773: PPUSH
33774: CALL_OW 313
33778: PUSH
33779: LD_INT 6
33781: EQUAL
33782: PUSH
33783: LD_VAR 0 9
33787: PPUSH
33788: CALL_OW 266
33792: PUSH
33793: LD_INT 32
33795: PUSH
33796: LD_INT 31
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: IN
33803: OR
33804: IFFALSE 33618
33806: GO 33615
33808: POP
33809: POP
// end else
33810: GO 34192
// for j = 1 to x do
33812: LD_ADDR_VAR 0 9
33816: PUSH
33817: DOUBLE
33818: LD_INT 1
33820: DEC
33821: ST_TO_ADDR
33822: LD_VAR 0 13
33826: PUSH
33827: FOR_TO
33828: IFFALSE 34190
// begin InitHc ;
33830: CALL_OW 19
// if not f then
33834: LD_VAR 0 12
33838: NOT
33839: IFFALSE 33928
// begin PrepareHuman ( false , i , skill ) ;
33841: LD_INT 0
33843: PPUSH
33844: LD_VAR 0 8
33848: PPUSH
33849: LD_VAR 0 4
33853: PPUSH
33854: CALL_OW 380
// un := CreateHuman ;
33858: LD_ADDR_VAR 0 14
33862: PUSH
33863: CALL_OW 44
33867: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33868: LD_ADDR_VAR 0 7
33872: PUSH
33873: LD_VAR 0 7
33877: PPUSH
33878: LD_INT 1
33880: PPUSH
33881: LD_VAR 0 14
33885: PPUSH
33886: CALL_OW 2
33890: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33891: LD_VAR 0 14
33895: PPUSH
33896: LD_VAR 0 1
33900: PPUSH
33901: CALL_OW 250
33905: PPUSH
33906: LD_VAR 0 1
33910: PPUSH
33911: CALL_OW 251
33915: PPUSH
33916: LD_INT 10
33918: PPUSH
33919: LD_INT 0
33921: PPUSH
33922: CALL_OW 50
// continue ;
33926: GO 33827
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33928: LD_VAR 0 12
33932: PUSH
33933: LD_INT 1
33935: ARRAY
33936: PPUSH
33937: CALL_OW 313
33941: PUSH
33942: LD_VAR 0 12
33946: PUSH
33947: LD_INT 1
33949: ARRAY
33950: PPUSH
33951: CALL_OW 266
33955: PUSH
33956: LD_INT 32
33958: PUSH
33959: LD_INT 31
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: IN
33966: AND
33967: PUSH
33968: LD_VAR 0 12
33972: PUSH
33973: LD_INT 1
33975: ARRAY
33976: PPUSH
33977: CALL_OW 313
33981: PUSH
33982: LD_INT 6
33984: EQUAL
33985: OR
33986: IFFALSE 34006
// f := Delete ( f , 1 ) ;
33988: LD_ADDR_VAR 0 12
33992: PUSH
33993: LD_VAR 0 12
33997: PPUSH
33998: LD_INT 1
34000: PPUSH
34001: CALL_OW 3
34005: ST_TO_ADDR
// if not f then
34006: LD_VAR 0 12
34010: NOT
34011: IFFALSE 34029
// begin x := x + 2 ;
34013: LD_ADDR_VAR 0 13
34017: PUSH
34018: LD_VAR 0 13
34022: PUSH
34023: LD_INT 2
34025: PLUS
34026: ST_TO_ADDR
// continue ;
34027: GO 33827
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34029: LD_VAR 0 12
34033: PUSH
34034: LD_INT 1
34036: ARRAY
34037: PPUSH
34038: CALL_OW 266
34042: PUSH
34043: LD_INT 5
34045: EQUAL
34046: IFFALSE 34120
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34048: LD_VAR 0 12
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: PPUSH
34057: CALL_OW 313
34061: PUSH
34062: LD_INT 3
34064: LESS
34065: IFFALSE 34101
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34067: LD_INT 0
34069: PPUSH
34070: LD_INT 5
34072: PUSH
34073: LD_INT 8
34075: PUSH
34076: LD_INT 9
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: PUSH
34084: LD_VAR 0 17
34088: ARRAY
34089: PPUSH
34090: LD_VAR 0 4
34094: PPUSH
34095: CALL_OW 380
34099: GO 34118
// PrepareHuman ( false , i , skill ) ;
34101: LD_INT 0
34103: PPUSH
34104: LD_VAR 0 8
34108: PPUSH
34109: LD_VAR 0 4
34113: PPUSH
34114: CALL_OW 380
// end else
34118: GO 34137
// PrepareHuman ( false , i , skill ) ;
34120: LD_INT 0
34122: PPUSH
34123: LD_VAR 0 8
34127: PPUSH
34128: LD_VAR 0 4
34132: PPUSH
34133: CALL_OW 380
// un := CreateHuman ;
34137: LD_ADDR_VAR 0 14
34141: PUSH
34142: CALL_OW 44
34146: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34147: LD_ADDR_VAR 0 7
34151: PUSH
34152: LD_VAR 0 7
34156: PPUSH
34157: LD_INT 1
34159: PPUSH
34160: LD_VAR 0 14
34164: PPUSH
34165: CALL_OW 2
34169: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34170: LD_VAR 0 14
34174: PPUSH
34175: LD_VAR 0 12
34179: PUSH
34180: LD_INT 1
34182: ARRAY
34183: PPUSH
34184: CALL_OW 52
// end ;
34188: GO 33827
34190: POP
34191: POP
// end ;
34192: GO 33129
34194: POP
34195: POP
// result := result ^ buildings ;
34196: LD_ADDR_VAR 0 7
34200: PUSH
34201: LD_VAR 0 7
34205: PUSH
34206: LD_VAR 0 18
34210: ADD
34211: ST_TO_ADDR
// end else
34212: GO 34355
// begin for i = 1 to personel do
34214: LD_ADDR_VAR 0 8
34218: PUSH
34219: DOUBLE
34220: LD_INT 1
34222: DEC
34223: ST_TO_ADDR
34224: LD_VAR 0 6
34228: PUSH
34229: FOR_TO
34230: IFFALSE 34353
// begin if i > 4 then
34232: LD_VAR 0 8
34236: PUSH
34237: LD_INT 4
34239: GREATER
34240: IFFALSE 34244
// break ;
34242: GO 34353
// x := personel [ i ] ;
34244: LD_ADDR_VAR 0 13
34248: PUSH
34249: LD_VAR 0 6
34253: PUSH
34254: LD_VAR 0 8
34258: ARRAY
34259: ST_TO_ADDR
// if x = - 1 then
34260: LD_VAR 0 13
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: EQUAL
34269: IFFALSE 34273
// continue ;
34271: GO 34229
// PrepareHuman ( false , i , skill ) ;
34273: LD_INT 0
34275: PPUSH
34276: LD_VAR 0 8
34280: PPUSH
34281: LD_VAR 0 4
34285: PPUSH
34286: CALL_OW 380
// un := CreateHuman ;
34290: LD_ADDR_VAR 0 14
34294: PUSH
34295: CALL_OW 44
34299: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34300: LD_VAR 0 14
34304: PPUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL_OW 250
34314: PPUSH
34315: LD_VAR 0 1
34319: PPUSH
34320: CALL_OW 251
34324: PPUSH
34325: LD_INT 10
34327: PPUSH
34328: LD_INT 0
34330: PPUSH
34331: CALL_OW 50
// result := result ^ un ;
34335: LD_ADDR_VAR 0 7
34339: PUSH
34340: LD_VAR 0 7
34344: PUSH
34345: LD_VAR 0 14
34349: ADD
34350: ST_TO_ADDR
// end ;
34351: GO 34229
34353: POP
34354: POP
// end ; end ;
34355: LD_VAR 0 7
34359: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34360: LD_INT 0
34362: PPUSH
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
34372: PPUSH
34373: PPUSH
34374: PPUSH
34375: PPUSH
34376: PPUSH
34377: PPUSH
// result := false ;
34378: LD_ADDR_VAR 0 3
34382: PUSH
34383: LD_INT 0
34385: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34386: LD_VAR 0 1
34390: NOT
34391: PUSH
34392: LD_VAR 0 1
34396: PPUSH
34397: CALL_OW 266
34401: PUSH
34402: LD_INT 32
34404: PUSH
34405: LD_INT 33
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: IN
34412: NOT
34413: OR
34414: IFFALSE 34418
// exit ;
34416: GO 35527
// nat := GetNation ( tower ) ;
34418: LD_ADDR_VAR 0 12
34422: PUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL_OW 248
34432: ST_TO_ADDR
// side := GetSide ( tower ) ;
34433: LD_ADDR_VAR 0 16
34437: PUSH
34438: LD_VAR 0 1
34442: PPUSH
34443: CALL_OW 255
34447: ST_TO_ADDR
// x := GetX ( tower ) ;
34448: LD_ADDR_VAR 0 10
34452: PUSH
34453: LD_VAR 0 1
34457: PPUSH
34458: CALL_OW 250
34462: ST_TO_ADDR
// y := GetY ( tower ) ;
34463: LD_ADDR_VAR 0 11
34467: PUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL_OW 251
34477: ST_TO_ADDR
// if not x or not y then
34478: LD_VAR 0 10
34482: NOT
34483: PUSH
34484: LD_VAR 0 11
34488: NOT
34489: OR
34490: IFFALSE 34494
// exit ;
34492: GO 35527
// weapon := 0 ;
34494: LD_ADDR_VAR 0 18
34498: PUSH
34499: LD_INT 0
34501: ST_TO_ADDR
// fac_list := [ ] ;
34502: LD_ADDR_VAR 0 17
34506: PUSH
34507: EMPTY
34508: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34509: LD_ADDR_VAR 0 6
34513: PUSH
34514: LD_VAR 0 1
34518: PPUSH
34519: CALL_OW 274
34523: PPUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_INT 0
34531: PPUSH
34532: CALL 32098 0 3
34536: PPUSH
34537: LD_INT 30
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PPUSH
34547: CALL_OW 72
34551: ST_TO_ADDR
// if not factories then
34552: LD_VAR 0 6
34556: NOT
34557: IFFALSE 34561
// exit ;
34559: GO 35527
// for i in factories do
34561: LD_ADDR_VAR 0 8
34565: PUSH
34566: LD_VAR 0 6
34570: PUSH
34571: FOR_IN
34572: IFFALSE 34597
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34574: LD_ADDR_VAR 0 17
34578: PUSH
34579: LD_VAR 0 17
34583: PUSH
34584: LD_VAR 0 8
34588: PPUSH
34589: CALL_OW 478
34593: UNION
34594: ST_TO_ADDR
34595: GO 34571
34597: POP
34598: POP
// if not fac_list then
34599: LD_VAR 0 17
34603: NOT
34604: IFFALSE 34608
// exit ;
34606: GO 35527
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34608: LD_ADDR_VAR 0 5
34612: PUSH
34613: LD_INT 4
34615: PUSH
34616: LD_INT 5
34618: PUSH
34619: LD_INT 9
34621: PUSH
34622: LD_INT 10
34624: PUSH
34625: LD_INT 6
34627: PUSH
34628: LD_INT 7
34630: PUSH
34631: LD_INT 11
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 27
34645: PUSH
34646: LD_INT 28
34648: PUSH
34649: LD_INT 26
34651: PUSH
34652: LD_INT 30
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 43
34663: PUSH
34664: LD_INT 44
34666: PUSH
34667: LD_INT 46
34669: PUSH
34670: LD_INT 45
34672: PUSH
34673: LD_INT 47
34675: PUSH
34676: LD_INT 49
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: LIST
34691: PUSH
34692: LD_VAR 0 12
34696: ARRAY
34697: ST_TO_ADDR
// list := list isect fac_list ;
34698: LD_ADDR_VAR 0 5
34702: PUSH
34703: LD_VAR 0 5
34707: PUSH
34708: LD_VAR 0 17
34712: ISECT
34713: ST_TO_ADDR
// if not list then
34714: LD_VAR 0 5
34718: NOT
34719: IFFALSE 34723
// exit ;
34721: GO 35527
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34723: LD_VAR 0 12
34727: PUSH
34728: LD_INT 3
34730: EQUAL
34731: PUSH
34732: LD_INT 49
34734: PUSH
34735: LD_VAR 0 5
34739: IN
34740: AND
34741: PUSH
34742: LD_INT 31
34744: PPUSH
34745: LD_VAR 0 16
34749: PPUSH
34750: CALL_OW 321
34754: PUSH
34755: LD_INT 2
34757: EQUAL
34758: AND
34759: IFFALSE 34819
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34761: LD_INT 22
34763: PUSH
34764: LD_VAR 0 16
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 35
34775: PUSH
34776: LD_INT 49
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 91
34785: PUSH
34786: LD_VAR 0 1
34790: PUSH
34791: LD_INT 10
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: PPUSH
34804: CALL_OW 69
34808: NOT
34809: IFFALSE 34819
// weapon := ru_time_lapser ;
34811: LD_ADDR_VAR 0 18
34815: PUSH
34816: LD_INT 49
34818: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34819: LD_VAR 0 12
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: IN
34834: PUSH
34835: LD_INT 11
34837: PUSH
34838: LD_VAR 0 5
34842: IN
34843: PUSH
34844: LD_INT 30
34846: PUSH
34847: LD_VAR 0 5
34851: IN
34852: OR
34853: AND
34854: PUSH
34855: LD_INT 6
34857: PPUSH
34858: LD_VAR 0 16
34862: PPUSH
34863: CALL_OW 321
34867: PUSH
34868: LD_INT 2
34870: EQUAL
34871: AND
34872: IFFALSE 35037
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34874: LD_INT 22
34876: PUSH
34877: LD_VAR 0 16
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: LD_INT 35
34891: PUSH
34892: LD_INT 11
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 35
34901: PUSH
34902: LD_INT 30
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 91
34916: PUSH
34917: LD_VAR 0 1
34921: PUSH
34922: LD_INT 18
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: LIST
34934: PPUSH
34935: CALL_OW 69
34939: NOT
34940: PUSH
34941: LD_INT 22
34943: PUSH
34944: LD_VAR 0 16
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: LD_INT 30
34958: PUSH
34959: LD_INT 32
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 30
34968: PUSH
34969: LD_INT 33
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 91
34983: PUSH
34984: LD_VAR 0 1
34988: PUSH
34989: LD_INT 12
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: LIST
35001: PUSH
35002: EMPTY
35003: LIST
35004: PPUSH
35005: CALL_OW 69
35009: PUSH
35010: LD_INT 2
35012: GREATER
35013: AND
35014: IFFALSE 35037
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35016: LD_ADDR_VAR 0 18
35020: PUSH
35021: LD_INT 11
35023: PUSH
35024: LD_INT 30
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_VAR 0 12
35035: ARRAY
35036: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35037: LD_VAR 0 18
35041: NOT
35042: PUSH
35043: LD_INT 40
35045: PPUSH
35046: LD_VAR 0 16
35050: PPUSH
35051: CALL_OW 321
35055: PUSH
35056: LD_INT 2
35058: EQUAL
35059: AND
35060: PUSH
35061: LD_INT 7
35063: PUSH
35064: LD_VAR 0 5
35068: IN
35069: PUSH
35070: LD_INT 28
35072: PUSH
35073: LD_VAR 0 5
35077: IN
35078: OR
35079: PUSH
35080: LD_INT 45
35082: PUSH
35083: LD_VAR 0 5
35087: IN
35088: OR
35089: AND
35090: IFFALSE 35344
// begin hex := GetHexInfo ( x , y ) ;
35092: LD_ADDR_VAR 0 4
35096: PUSH
35097: LD_VAR 0 10
35101: PPUSH
35102: LD_VAR 0 11
35106: PPUSH
35107: CALL_OW 546
35111: ST_TO_ADDR
// if hex [ 1 ] then
35112: LD_VAR 0 4
35116: PUSH
35117: LD_INT 1
35119: ARRAY
35120: IFFALSE 35124
// exit ;
35122: GO 35527
// height := hex [ 2 ] ;
35124: LD_ADDR_VAR 0 15
35128: PUSH
35129: LD_VAR 0 4
35133: PUSH
35134: LD_INT 2
35136: ARRAY
35137: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35138: LD_ADDR_VAR 0 14
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: LD_INT 3
35151: PUSH
35152: LD_INT 5
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: ST_TO_ADDR
// for i in tmp do
35161: LD_ADDR_VAR 0 8
35165: PUSH
35166: LD_VAR 0 14
35170: PUSH
35171: FOR_IN
35172: IFFALSE 35342
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35174: LD_ADDR_VAR 0 9
35178: PUSH
35179: LD_VAR 0 10
35183: PPUSH
35184: LD_VAR 0 8
35188: PPUSH
35189: LD_INT 5
35191: PPUSH
35192: CALL_OW 272
35196: PUSH
35197: LD_VAR 0 11
35201: PPUSH
35202: LD_VAR 0 8
35206: PPUSH
35207: LD_INT 5
35209: PPUSH
35210: CALL_OW 273
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35219: LD_VAR 0 9
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: PPUSH
35228: LD_VAR 0 9
35232: PUSH
35233: LD_INT 2
35235: ARRAY
35236: PPUSH
35237: CALL_OW 488
35241: IFFALSE 35340
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35243: LD_ADDR_VAR 0 4
35247: PUSH
35248: LD_VAR 0 9
35252: PUSH
35253: LD_INT 1
35255: ARRAY
35256: PPUSH
35257: LD_VAR 0 9
35261: PUSH
35262: LD_INT 2
35264: ARRAY
35265: PPUSH
35266: CALL_OW 546
35270: ST_TO_ADDR
// if hex [ 1 ] then
35271: LD_VAR 0 4
35275: PUSH
35276: LD_INT 1
35278: ARRAY
35279: IFFALSE 35283
// continue ;
35281: GO 35171
// h := hex [ 2 ] ;
35283: LD_ADDR_VAR 0 13
35287: PUSH
35288: LD_VAR 0 4
35292: PUSH
35293: LD_INT 2
35295: ARRAY
35296: ST_TO_ADDR
// if h + 7 < height then
35297: LD_VAR 0 13
35301: PUSH
35302: LD_INT 7
35304: PLUS
35305: PUSH
35306: LD_VAR 0 15
35310: LESS
35311: IFFALSE 35340
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35313: LD_ADDR_VAR 0 18
35317: PUSH
35318: LD_INT 7
35320: PUSH
35321: LD_INT 28
35323: PUSH
35324: LD_INT 45
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: PUSH
35332: LD_VAR 0 12
35336: ARRAY
35337: ST_TO_ADDR
// break ;
35338: GO 35342
// end ; end ; end ;
35340: GO 35171
35342: POP
35343: POP
// end ; if not weapon then
35344: LD_VAR 0 18
35348: NOT
35349: IFFALSE 35409
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35351: LD_ADDR_VAR 0 5
35355: PUSH
35356: LD_VAR 0 5
35360: PUSH
35361: LD_INT 11
35363: PUSH
35364: LD_INT 30
35366: PUSH
35367: LD_INT 49
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: DIFF
35375: ST_TO_ADDR
// if not list then
35376: LD_VAR 0 5
35380: NOT
35381: IFFALSE 35385
// exit ;
35383: GO 35527
// weapon := list [ rand ( 1 , list ) ] ;
35385: LD_ADDR_VAR 0 18
35389: PUSH
35390: LD_VAR 0 5
35394: PUSH
35395: LD_INT 1
35397: PPUSH
35398: LD_VAR 0 5
35402: PPUSH
35403: CALL_OW 12
35407: ARRAY
35408: ST_TO_ADDR
// end ; if weapon then
35409: LD_VAR 0 18
35413: IFFALSE 35527
// begin tmp := CostOfWeapon ( weapon ) ;
35415: LD_ADDR_VAR 0 14
35419: PUSH
35420: LD_VAR 0 18
35424: PPUSH
35425: CALL_OW 451
35429: ST_TO_ADDR
// j := GetBase ( tower ) ;
35430: LD_ADDR_VAR 0 9
35434: PUSH
35435: LD_VAR 0 1
35439: PPUSH
35440: CALL_OW 274
35444: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35445: LD_VAR 0 9
35449: PPUSH
35450: LD_INT 1
35452: PPUSH
35453: CALL_OW 275
35457: PUSH
35458: LD_VAR 0 14
35462: PUSH
35463: LD_INT 1
35465: ARRAY
35466: GREATEREQUAL
35467: PUSH
35468: LD_VAR 0 9
35472: PPUSH
35473: LD_INT 2
35475: PPUSH
35476: CALL_OW 275
35480: PUSH
35481: LD_VAR 0 14
35485: PUSH
35486: LD_INT 2
35488: ARRAY
35489: GREATEREQUAL
35490: AND
35491: PUSH
35492: LD_VAR 0 9
35496: PPUSH
35497: LD_INT 3
35499: PPUSH
35500: CALL_OW 275
35504: PUSH
35505: LD_VAR 0 14
35509: PUSH
35510: LD_INT 3
35512: ARRAY
35513: GREATEREQUAL
35514: AND
35515: IFFALSE 35527
// result := weapon ;
35517: LD_ADDR_VAR 0 3
35521: PUSH
35522: LD_VAR 0 18
35526: ST_TO_ADDR
// end ; end ;
35527: LD_VAR 0 3
35531: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35532: LD_INT 0
35534: PPUSH
35535: PPUSH
// result := true ;
35536: LD_ADDR_VAR 0 3
35540: PUSH
35541: LD_INT 1
35543: ST_TO_ADDR
// if array1 = array2 then
35544: LD_VAR 0 1
35548: PUSH
35549: LD_VAR 0 2
35553: EQUAL
35554: IFFALSE 35614
// begin for i = 1 to array1 do
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: DOUBLE
35562: LD_INT 1
35564: DEC
35565: ST_TO_ADDR
35566: LD_VAR 0 1
35570: PUSH
35571: FOR_TO
35572: IFFALSE 35610
// if array1 [ i ] <> array2 [ i ] then
35574: LD_VAR 0 1
35578: PUSH
35579: LD_VAR 0 4
35583: ARRAY
35584: PUSH
35585: LD_VAR 0 2
35589: PUSH
35590: LD_VAR 0 4
35594: ARRAY
35595: NONEQUAL
35596: IFFALSE 35608
// begin result := false ;
35598: LD_ADDR_VAR 0 3
35602: PUSH
35603: LD_INT 0
35605: ST_TO_ADDR
// break ;
35606: GO 35610
// end ;
35608: GO 35571
35610: POP
35611: POP
// end else
35612: GO 35622
// result := false ;
35614: LD_ADDR_VAR 0 3
35618: PUSH
35619: LD_INT 0
35621: ST_TO_ADDR
// end ;
35622: LD_VAR 0 3
35626: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35627: LD_INT 0
35629: PPUSH
35630: PPUSH
// if not array1 or not array2 then
35631: LD_VAR 0 1
35635: NOT
35636: PUSH
35637: LD_VAR 0 2
35641: NOT
35642: OR
35643: IFFALSE 35647
// exit ;
35645: GO 35711
// result := true ;
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_INT 1
35654: ST_TO_ADDR
// for i = 1 to array1 do
35655: LD_ADDR_VAR 0 4
35659: PUSH
35660: DOUBLE
35661: LD_INT 1
35663: DEC
35664: ST_TO_ADDR
35665: LD_VAR 0 1
35669: PUSH
35670: FOR_TO
35671: IFFALSE 35709
// if array1 [ i ] <> array2 [ i ] then
35673: LD_VAR 0 1
35677: PUSH
35678: LD_VAR 0 4
35682: ARRAY
35683: PUSH
35684: LD_VAR 0 2
35688: PUSH
35689: LD_VAR 0 4
35693: ARRAY
35694: NONEQUAL
35695: IFFALSE 35707
// begin result := false ;
35697: LD_ADDR_VAR 0 3
35701: PUSH
35702: LD_INT 0
35704: ST_TO_ADDR
// break ;
35705: GO 35709
// end ;
35707: GO 35670
35709: POP
35710: POP
// end ;
35711: LD_VAR 0 3
35715: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35716: LD_INT 0
35718: PPUSH
35719: PPUSH
35720: PPUSH
// pom := GetBase ( fac ) ;
35721: LD_ADDR_VAR 0 5
35725: PUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 274
35735: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35736: LD_ADDR_VAR 0 4
35740: PUSH
35741: LD_VAR 0 2
35745: PUSH
35746: LD_INT 1
35748: ARRAY
35749: PPUSH
35750: LD_VAR 0 2
35754: PUSH
35755: LD_INT 2
35757: ARRAY
35758: PPUSH
35759: LD_VAR 0 2
35763: PUSH
35764: LD_INT 3
35766: ARRAY
35767: PPUSH
35768: LD_VAR 0 2
35772: PUSH
35773: LD_INT 4
35775: ARRAY
35776: PPUSH
35777: CALL_OW 449
35781: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: LD_VAR 0 5
35791: PPUSH
35792: LD_INT 1
35794: PPUSH
35795: CALL_OW 275
35799: PUSH
35800: LD_VAR 0 4
35804: PUSH
35805: LD_INT 1
35807: ARRAY
35808: GREATEREQUAL
35809: PUSH
35810: LD_VAR 0 5
35814: PPUSH
35815: LD_INT 2
35817: PPUSH
35818: CALL_OW 275
35822: PUSH
35823: LD_VAR 0 4
35827: PUSH
35828: LD_INT 2
35830: ARRAY
35831: GREATEREQUAL
35832: AND
35833: PUSH
35834: LD_VAR 0 5
35838: PPUSH
35839: LD_INT 3
35841: PPUSH
35842: CALL_OW 275
35846: PUSH
35847: LD_VAR 0 4
35851: PUSH
35852: LD_INT 3
35854: ARRAY
35855: GREATEREQUAL
35856: AND
35857: ST_TO_ADDR
// end ;
35858: LD_VAR 0 3
35862: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35863: LD_INT 0
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
// pom := GetBase ( building ) ;
35869: LD_ADDR_VAR 0 3
35873: PUSH
35874: LD_VAR 0 1
35878: PPUSH
35879: CALL_OW 274
35883: ST_TO_ADDR
// if not pom then
35884: LD_VAR 0 3
35888: NOT
35889: IFFALSE 35893
// exit ;
35891: GO 36063
// btype := GetBType ( building ) ;
35893: LD_ADDR_VAR 0 5
35897: PUSH
35898: LD_VAR 0 1
35902: PPUSH
35903: CALL_OW 266
35907: ST_TO_ADDR
// if btype = b_armoury then
35908: LD_VAR 0 5
35912: PUSH
35913: LD_INT 4
35915: EQUAL
35916: IFFALSE 35926
// btype := b_barracks ;
35918: LD_ADDR_VAR 0 5
35922: PUSH
35923: LD_INT 5
35925: ST_TO_ADDR
// if btype = b_depot then
35926: LD_VAR 0 5
35930: PUSH
35931: LD_INT 0
35933: EQUAL
35934: IFFALSE 35944
// btype := b_warehouse ;
35936: LD_ADDR_VAR 0 5
35940: PUSH
35941: LD_INT 1
35943: ST_TO_ADDR
// if btype = b_workshop then
35944: LD_VAR 0 5
35948: PUSH
35949: LD_INT 2
35951: EQUAL
35952: IFFALSE 35962
// btype := b_factory ;
35954: LD_ADDR_VAR 0 5
35958: PUSH
35959: LD_INT 3
35961: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35962: LD_ADDR_VAR 0 4
35966: PUSH
35967: LD_VAR 0 5
35971: PPUSH
35972: LD_VAR 0 1
35976: PPUSH
35977: CALL_OW 248
35981: PPUSH
35982: CALL_OW 450
35986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35987: LD_ADDR_VAR 0 2
35991: PUSH
35992: LD_VAR 0 3
35996: PPUSH
35997: LD_INT 1
35999: PPUSH
36000: CALL_OW 275
36004: PUSH
36005: LD_VAR 0 4
36009: PUSH
36010: LD_INT 1
36012: ARRAY
36013: GREATEREQUAL
36014: PUSH
36015: LD_VAR 0 3
36019: PPUSH
36020: LD_INT 2
36022: PPUSH
36023: CALL_OW 275
36027: PUSH
36028: LD_VAR 0 4
36032: PUSH
36033: LD_INT 2
36035: ARRAY
36036: GREATEREQUAL
36037: AND
36038: PUSH
36039: LD_VAR 0 3
36043: PPUSH
36044: LD_INT 3
36046: PPUSH
36047: CALL_OW 275
36051: PUSH
36052: LD_VAR 0 4
36056: PUSH
36057: LD_INT 3
36059: ARRAY
36060: GREATEREQUAL
36061: AND
36062: ST_TO_ADDR
// end ;
36063: LD_VAR 0 2
36067: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36068: LD_INT 0
36070: PPUSH
36071: PPUSH
36072: PPUSH
// pom := GetBase ( building ) ;
36073: LD_ADDR_VAR 0 4
36077: PUSH
36078: LD_VAR 0 1
36082: PPUSH
36083: CALL_OW 274
36087: ST_TO_ADDR
// if not pom then
36088: LD_VAR 0 4
36092: NOT
36093: IFFALSE 36097
// exit ;
36095: GO 36198
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36097: LD_ADDR_VAR 0 5
36101: PUSH
36102: LD_VAR 0 2
36106: PPUSH
36107: LD_VAR 0 1
36111: PPUSH
36112: CALL_OW 248
36116: PPUSH
36117: CALL_OW 450
36121: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36122: LD_ADDR_VAR 0 3
36126: PUSH
36127: LD_VAR 0 4
36131: PPUSH
36132: LD_INT 1
36134: PPUSH
36135: CALL_OW 275
36139: PUSH
36140: LD_VAR 0 5
36144: PUSH
36145: LD_INT 1
36147: ARRAY
36148: GREATEREQUAL
36149: PUSH
36150: LD_VAR 0 4
36154: PPUSH
36155: LD_INT 2
36157: PPUSH
36158: CALL_OW 275
36162: PUSH
36163: LD_VAR 0 5
36167: PUSH
36168: LD_INT 2
36170: ARRAY
36171: GREATEREQUAL
36172: AND
36173: PUSH
36174: LD_VAR 0 4
36178: PPUSH
36179: LD_INT 3
36181: PPUSH
36182: CALL_OW 275
36186: PUSH
36187: LD_VAR 0 5
36191: PUSH
36192: LD_INT 3
36194: ARRAY
36195: GREATEREQUAL
36196: AND
36197: ST_TO_ADDR
// end ;
36198: LD_VAR 0 3
36202: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36203: LD_INT 0
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
36210: PPUSH
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
// result := false ;
36216: LD_ADDR_VAR 0 8
36220: PUSH
36221: LD_INT 0
36223: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36224: LD_VAR 0 5
36228: NOT
36229: PUSH
36230: LD_VAR 0 1
36234: NOT
36235: OR
36236: PUSH
36237: LD_VAR 0 2
36241: NOT
36242: OR
36243: PUSH
36244: LD_VAR 0 3
36248: NOT
36249: OR
36250: IFFALSE 36254
// exit ;
36252: GO 37068
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36254: LD_ADDR_VAR 0 14
36258: PUSH
36259: LD_VAR 0 1
36263: PPUSH
36264: LD_VAR 0 2
36268: PPUSH
36269: LD_VAR 0 3
36273: PPUSH
36274: LD_VAR 0 4
36278: PPUSH
36279: LD_VAR 0 5
36283: PUSH
36284: LD_INT 1
36286: ARRAY
36287: PPUSH
36288: CALL_OW 248
36292: PPUSH
36293: LD_INT 0
36295: PPUSH
36296: CALL 38305 0 6
36300: ST_TO_ADDR
// if not hexes then
36301: LD_VAR 0 14
36305: NOT
36306: IFFALSE 36310
// exit ;
36308: GO 37068
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36310: LD_ADDR_VAR 0 17
36314: PUSH
36315: LD_VAR 0 5
36319: PPUSH
36320: LD_INT 22
36322: PUSH
36323: LD_VAR 0 13
36327: PPUSH
36328: CALL_OW 255
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 30
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 30
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PPUSH
36369: CALL_OW 72
36373: ST_TO_ADDR
// for i = 1 to hexes do
36374: LD_ADDR_VAR 0 9
36378: PUSH
36379: DOUBLE
36380: LD_INT 1
36382: DEC
36383: ST_TO_ADDR
36384: LD_VAR 0 14
36388: PUSH
36389: FOR_TO
36390: IFFALSE 37066
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36392: LD_ADDR_VAR 0 13
36396: PUSH
36397: LD_VAR 0 14
36401: PUSH
36402: LD_VAR 0 9
36406: ARRAY
36407: PUSH
36408: LD_INT 1
36410: ARRAY
36411: PPUSH
36412: LD_VAR 0 14
36416: PUSH
36417: LD_VAR 0 9
36421: ARRAY
36422: PUSH
36423: LD_INT 2
36425: ARRAY
36426: PPUSH
36427: CALL_OW 428
36431: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36432: LD_VAR 0 14
36436: PUSH
36437: LD_VAR 0 9
36441: ARRAY
36442: PUSH
36443: LD_INT 1
36445: ARRAY
36446: PPUSH
36447: LD_VAR 0 14
36451: PUSH
36452: LD_VAR 0 9
36456: ARRAY
36457: PUSH
36458: LD_INT 2
36460: ARRAY
36461: PPUSH
36462: CALL_OW 351
36466: PUSH
36467: LD_VAR 0 14
36471: PUSH
36472: LD_VAR 0 9
36476: ARRAY
36477: PUSH
36478: LD_INT 1
36480: ARRAY
36481: PPUSH
36482: LD_VAR 0 14
36486: PUSH
36487: LD_VAR 0 9
36491: ARRAY
36492: PUSH
36493: LD_INT 2
36495: ARRAY
36496: PPUSH
36497: CALL_OW 488
36501: NOT
36502: OR
36503: PUSH
36504: LD_VAR 0 13
36508: PPUSH
36509: CALL_OW 247
36513: PUSH
36514: LD_INT 3
36516: EQUAL
36517: OR
36518: IFFALSE 36524
// exit ;
36520: POP
36521: POP
36522: GO 37068
// if not tmp then
36524: LD_VAR 0 13
36528: NOT
36529: IFFALSE 36533
// continue ;
36531: GO 36389
// result := true ;
36533: LD_ADDR_VAR 0 8
36537: PUSH
36538: LD_INT 1
36540: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36541: LD_VAR 0 6
36545: PUSH
36546: LD_VAR 0 13
36550: PPUSH
36551: CALL_OW 247
36555: PUSH
36556: LD_INT 2
36558: EQUAL
36559: AND
36560: PUSH
36561: LD_VAR 0 13
36565: PPUSH
36566: CALL_OW 263
36570: PUSH
36571: LD_INT 1
36573: EQUAL
36574: AND
36575: IFFALSE 36739
// begin if IsDrivenBy ( tmp ) then
36577: LD_VAR 0 13
36581: PPUSH
36582: CALL_OW 311
36586: IFFALSE 36590
// continue ;
36588: GO 36389
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36590: LD_VAR 0 6
36594: PPUSH
36595: LD_INT 3
36597: PUSH
36598: LD_INT 60
36600: PUSH
36601: EMPTY
36602: LIST
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 3
36610: PUSH
36611: LD_INT 55
36613: PUSH
36614: EMPTY
36615: LIST
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PPUSH
36625: CALL_OW 72
36629: IFFALSE 36737
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36631: LD_ADDR_VAR 0 18
36635: PUSH
36636: LD_VAR 0 6
36640: PPUSH
36641: LD_INT 3
36643: PUSH
36644: LD_INT 60
36646: PUSH
36647: EMPTY
36648: LIST
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 3
36656: PUSH
36657: LD_INT 55
36659: PUSH
36660: EMPTY
36661: LIST
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PPUSH
36671: CALL_OW 72
36675: PUSH
36676: LD_INT 1
36678: ARRAY
36679: ST_TO_ADDR
// if IsInUnit ( driver ) then
36680: LD_VAR 0 18
36684: PPUSH
36685: CALL_OW 310
36689: IFFALSE 36700
// ComExit ( driver ) ;
36691: LD_VAR 0 18
36695: PPUSH
36696: CALL 61433 0 1
// AddComEnterUnit ( driver , tmp ) ;
36700: LD_VAR 0 18
36704: PPUSH
36705: LD_VAR 0 13
36709: PPUSH
36710: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36714: LD_VAR 0 18
36718: PPUSH
36719: LD_VAR 0 7
36723: PPUSH
36724: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36728: LD_VAR 0 18
36732: PPUSH
36733: CALL_OW 181
// end ; continue ;
36737: GO 36389
// end ; if not cleaners or not tmp in cleaners then
36739: LD_VAR 0 6
36743: NOT
36744: PUSH
36745: LD_VAR 0 13
36749: PUSH
36750: LD_VAR 0 6
36754: IN
36755: NOT
36756: OR
36757: IFFALSE 37064
// begin if dep then
36759: LD_VAR 0 17
36763: IFFALSE 36899
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36765: LD_ADDR_VAR 0 16
36769: PUSH
36770: LD_VAR 0 17
36774: PUSH
36775: LD_INT 1
36777: ARRAY
36778: PPUSH
36779: CALL_OW 250
36783: PPUSH
36784: LD_VAR 0 17
36788: PUSH
36789: LD_INT 1
36791: ARRAY
36792: PPUSH
36793: CALL_OW 254
36797: PPUSH
36798: LD_INT 5
36800: PPUSH
36801: CALL_OW 272
36805: PUSH
36806: LD_VAR 0 17
36810: PUSH
36811: LD_INT 1
36813: ARRAY
36814: PPUSH
36815: CALL_OW 251
36819: PPUSH
36820: LD_VAR 0 17
36824: PUSH
36825: LD_INT 1
36827: ARRAY
36828: PPUSH
36829: CALL_OW 254
36833: PPUSH
36834: LD_INT 5
36836: PPUSH
36837: CALL_OW 273
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36846: LD_VAR 0 16
36850: PUSH
36851: LD_INT 1
36853: ARRAY
36854: PPUSH
36855: LD_VAR 0 16
36859: PUSH
36860: LD_INT 2
36862: ARRAY
36863: PPUSH
36864: CALL_OW 488
36868: IFFALSE 36899
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36870: LD_VAR 0 13
36874: PPUSH
36875: LD_VAR 0 16
36879: PUSH
36880: LD_INT 1
36882: ARRAY
36883: PPUSH
36884: LD_VAR 0 16
36888: PUSH
36889: LD_INT 2
36891: ARRAY
36892: PPUSH
36893: CALL_OW 111
// continue ;
36897: GO 36389
// end ; end ; r := GetDir ( tmp ) ;
36899: LD_ADDR_VAR 0 15
36903: PUSH
36904: LD_VAR 0 13
36908: PPUSH
36909: CALL_OW 254
36913: ST_TO_ADDR
// if r = 5 then
36914: LD_VAR 0 15
36918: PUSH
36919: LD_INT 5
36921: EQUAL
36922: IFFALSE 36932
// r := 0 ;
36924: LD_ADDR_VAR 0 15
36928: PUSH
36929: LD_INT 0
36931: ST_TO_ADDR
// for j = r to 5 do
36932: LD_ADDR_VAR 0 10
36936: PUSH
36937: DOUBLE
36938: LD_VAR 0 15
36942: DEC
36943: ST_TO_ADDR
36944: LD_INT 5
36946: PUSH
36947: FOR_TO
36948: IFFALSE 37062
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36950: LD_ADDR_VAR 0 11
36954: PUSH
36955: LD_VAR 0 13
36959: PPUSH
36960: CALL_OW 250
36964: PPUSH
36965: LD_VAR 0 10
36969: PPUSH
36970: LD_INT 2
36972: PPUSH
36973: CALL_OW 272
36977: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36978: LD_ADDR_VAR 0 12
36982: PUSH
36983: LD_VAR 0 13
36987: PPUSH
36988: CALL_OW 251
36992: PPUSH
36993: LD_VAR 0 10
36997: PPUSH
36998: LD_INT 2
37000: PPUSH
37001: CALL_OW 273
37005: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37006: LD_VAR 0 11
37010: PPUSH
37011: LD_VAR 0 12
37015: PPUSH
37016: CALL_OW 488
37020: PUSH
37021: LD_VAR 0 11
37025: PPUSH
37026: LD_VAR 0 12
37030: PPUSH
37031: CALL_OW 428
37035: NOT
37036: AND
37037: IFFALSE 37060
// begin ComMoveXY ( tmp , _x , _y ) ;
37039: LD_VAR 0 13
37043: PPUSH
37044: LD_VAR 0 11
37048: PPUSH
37049: LD_VAR 0 12
37053: PPUSH
37054: CALL_OW 111
// break ;
37058: GO 37062
// end ; end ;
37060: GO 36947
37062: POP
37063: POP
// end ; end ;
37064: GO 36389
37066: POP
37067: POP
// end ;
37068: LD_VAR 0 8
37072: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37073: LD_INT 0
37075: PPUSH
// result := true ;
37076: LD_ADDR_VAR 0 3
37080: PUSH
37081: LD_INT 1
37083: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37084: LD_VAR 0 2
37088: PUSH
37089: LD_INT 24
37091: DOUBLE
37092: EQUAL
37093: IFTRUE 37103
37095: LD_INT 33
37097: DOUBLE
37098: EQUAL
37099: IFTRUE 37103
37101: GO 37128
37103: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37104: LD_ADDR_VAR 0 3
37108: PUSH
37109: LD_INT 32
37111: PPUSH
37112: LD_VAR 0 1
37116: PPUSH
37117: CALL_OW 321
37121: PUSH
37122: LD_INT 2
37124: EQUAL
37125: ST_TO_ADDR
37126: GO 37448
37128: LD_INT 20
37130: DOUBLE
37131: EQUAL
37132: IFTRUE 37136
37134: GO 37161
37136: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37137: LD_ADDR_VAR 0 3
37141: PUSH
37142: LD_INT 6
37144: PPUSH
37145: LD_VAR 0 1
37149: PPUSH
37150: CALL_OW 321
37154: PUSH
37155: LD_INT 2
37157: EQUAL
37158: ST_TO_ADDR
37159: GO 37448
37161: LD_INT 22
37163: DOUBLE
37164: EQUAL
37165: IFTRUE 37175
37167: LD_INT 36
37169: DOUBLE
37170: EQUAL
37171: IFTRUE 37175
37173: GO 37200
37175: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37176: LD_ADDR_VAR 0 3
37180: PUSH
37181: LD_INT 15
37183: PPUSH
37184: LD_VAR 0 1
37188: PPUSH
37189: CALL_OW 321
37193: PUSH
37194: LD_INT 2
37196: EQUAL
37197: ST_TO_ADDR
37198: GO 37448
37200: LD_INT 30
37202: DOUBLE
37203: EQUAL
37204: IFTRUE 37208
37206: GO 37233
37208: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37209: LD_ADDR_VAR 0 3
37213: PUSH
37214: LD_INT 20
37216: PPUSH
37217: LD_VAR 0 1
37221: PPUSH
37222: CALL_OW 321
37226: PUSH
37227: LD_INT 2
37229: EQUAL
37230: ST_TO_ADDR
37231: GO 37448
37233: LD_INT 28
37235: DOUBLE
37236: EQUAL
37237: IFTRUE 37247
37239: LD_INT 21
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37272
37247: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37248: LD_ADDR_VAR 0 3
37252: PUSH
37253: LD_INT 21
37255: PPUSH
37256: LD_VAR 0 1
37260: PPUSH
37261: CALL_OW 321
37265: PUSH
37266: LD_INT 2
37268: EQUAL
37269: ST_TO_ADDR
37270: GO 37448
37272: LD_INT 16
37274: DOUBLE
37275: EQUAL
37276: IFTRUE 37280
37278: GO 37307
37280: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37281: LD_ADDR_VAR 0 3
37285: PUSH
37286: LD_EXP 106
37290: PPUSH
37291: LD_VAR 0 1
37295: PPUSH
37296: CALL_OW 321
37300: PUSH
37301: LD_INT 2
37303: EQUAL
37304: ST_TO_ADDR
37305: GO 37448
37307: LD_INT 19
37309: DOUBLE
37310: EQUAL
37311: IFTRUE 37321
37313: LD_INT 23
37315: DOUBLE
37316: EQUAL
37317: IFTRUE 37321
37319: GO 37348
37321: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37322: LD_ADDR_VAR 0 3
37326: PUSH
37327: LD_EXP 105
37331: PPUSH
37332: LD_VAR 0 1
37336: PPUSH
37337: CALL_OW 321
37341: PUSH
37342: LD_INT 2
37344: EQUAL
37345: ST_TO_ADDR
37346: GO 37448
37348: LD_INT 17
37350: DOUBLE
37351: EQUAL
37352: IFTRUE 37356
37354: GO 37381
37356: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37357: LD_ADDR_VAR 0 3
37361: PUSH
37362: LD_INT 39
37364: PPUSH
37365: LD_VAR 0 1
37369: PPUSH
37370: CALL_OW 321
37374: PUSH
37375: LD_INT 2
37377: EQUAL
37378: ST_TO_ADDR
37379: GO 37448
37381: LD_INT 18
37383: DOUBLE
37384: EQUAL
37385: IFTRUE 37389
37387: GO 37414
37389: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37390: LD_ADDR_VAR 0 3
37394: PUSH
37395: LD_INT 40
37397: PPUSH
37398: LD_VAR 0 1
37402: PPUSH
37403: CALL_OW 321
37407: PUSH
37408: LD_INT 2
37410: EQUAL
37411: ST_TO_ADDR
37412: GO 37448
37414: LD_INT 27
37416: DOUBLE
37417: EQUAL
37418: IFTRUE 37422
37420: GO 37447
37422: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37423: LD_ADDR_VAR 0 3
37427: PUSH
37428: LD_INT 35
37430: PPUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: CALL_OW 321
37440: PUSH
37441: LD_INT 2
37443: EQUAL
37444: ST_TO_ADDR
37445: GO 37448
37447: POP
// end ;
37448: LD_VAR 0 3
37452: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37453: LD_INT 0
37455: PPUSH
37456: PPUSH
37457: PPUSH
37458: PPUSH
37459: PPUSH
37460: PPUSH
37461: PPUSH
37462: PPUSH
37463: PPUSH
37464: PPUSH
37465: PPUSH
// result := false ;
37466: LD_ADDR_VAR 0 6
37470: PUSH
37471: LD_INT 0
37473: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37474: LD_VAR 0 1
37478: NOT
37479: PUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: CALL_OW 266
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: IN
37500: NOT
37501: OR
37502: PUSH
37503: LD_VAR 0 2
37507: NOT
37508: OR
37509: PUSH
37510: LD_VAR 0 5
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: LD_INT 3
37526: PUSH
37527: LD_INT 4
37529: PUSH
37530: LD_INT 5
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: IN
37541: NOT
37542: OR
37543: PUSH
37544: LD_VAR 0 3
37548: PPUSH
37549: LD_VAR 0 4
37553: PPUSH
37554: CALL_OW 488
37558: NOT
37559: OR
37560: IFFALSE 37564
// exit ;
37562: GO 38300
// side := GetSide ( depot ) ;
37564: LD_ADDR_VAR 0 9
37568: PUSH
37569: LD_VAR 0 1
37573: PPUSH
37574: CALL_OW 255
37578: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37579: LD_VAR 0 9
37583: PPUSH
37584: LD_VAR 0 2
37588: PPUSH
37589: CALL 37073 0 2
37593: NOT
37594: IFFALSE 37598
// exit ;
37596: GO 38300
// pom := GetBase ( depot ) ;
37598: LD_ADDR_VAR 0 10
37602: PUSH
37603: LD_VAR 0 1
37607: PPUSH
37608: CALL_OW 274
37612: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37613: LD_ADDR_VAR 0 11
37617: PUSH
37618: LD_VAR 0 2
37622: PPUSH
37623: LD_VAR 0 1
37627: PPUSH
37628: CALL_OW 248
37632: PPUSH
37633: CALL_OW 450
37637: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37638: LD_VAR 0 10
37642: PPUSH
37643: LD_INT 1
37645: PPUSH
37646: CALL_OW 275
37650: PUSH
37651: LD_VAR 0 11
37655: PUSH
37656: LD_INT 1
37658: ARRAY
37659: GREATEREQUAL
37660: PUSH
37661: LD_VAR 0 10
37665: PPUSH
37666: LD_INT 2
37668: PPUSH
37669: CALL_OW 275
37673: PUSH
37674: LD_VAR 0 11
37678: PUSH
37679: LD_INT 2
37681: ARRAY
37682: GREATEREQUAL
37683: AND
37684: PUSH
37685: LD_VAR 0 10
37689: PPUSH
37690: LD_INT 3
37692: PPUSH
37693: CALL_OW 275
37697: PUSH
37698: LD_VAR 0 11
37702: PUSH
37703: LD_INT 3
37705: ARRAY
37706: GREATEREQUAL
37707: AND
37708: NOT
37709: IFFALSE 37713
// exit ;
37711: GO 38300
// if GetBType ( depot ) = b_depot then
37713: LD_VAR 0 1
37717: PPUSH
37718: CALL_OW 266
37722: PUSH
37723: LD_INT 0
37725: EQUAL
37726: IFFALSE 37738
// dist := 28 else
37728: LD_ADDR_VAR 0 14
37732: PUSH
37733: LD_INT 28
37735: ST_TO_ADDR
37736: GO 37746
// dist := 36 ;
37738: LD_ADDR_VAR 0 14
37742: PUSH
37743: LD_INT 36
37745: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37746: LD_VAR 0 1
37750: PPUSH
37751: LD_VAR 0 3
37755: PPUSH
37756: LD_VAR 0 4
37760: PPUSH
37761: CALL_OW 297
37765: PUSH
37766: LD_VAR 0 14
37770: GREATER
37771: IFFALSE 37775
// exit ;
37773: GO 38300
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37775: LD_ADDR_VAR 0 12
37779: PUSH
37780: LD_VAR 0 2
37784: PPUSH
37785: LD_VAR 0 3
37789: PPUSH
37790: LD_VAR 0 4
37794: PPUSH
37795: LD_VAR 0 5
37799: PPUSH
37800: LD_VAR 0 1
37804: PPUSH
37805: CALL_OW 248
37809: PPUSH
37810: LD_INT 0
37812: PPUSH
37813: CALL 38305 0 6
37817: ST_TO_ADDR
// if not hexes then
37818: LD_VAR 0 12
37822: NOT
37823: IFFALSE 37827
// exit ;
37825: GO 38300
// hex := GetHexInfo ( x , y ) ;
37827: LD_ADDR_VAR 0 15
37831: PUSH
37832: LD_VAR 0 3
37836: PPUSH
37837: LD_VAR 0 4
37841: PPUSH
37842: CALL_OW 546
37846: ST_TO_ADDR
// if hex [ 1 ] then
37847: LD_VAR 0 15
37851: PUSH
37852: LD_INT 1
37854: ARRAY
37855: IFFALSE 37859
// exit ;
37857: GO 38300
// height := hex [ 2 ] ;
37859: LD_ADDR_VAR 0 13
37863: PUSH
37864: LD_VAR 0 15
37868: PUSH
37869: LD_INT 2
37871: ARRAY
37872: ST_TO_ADDR
// for i = 1 to hexes do
37873: LD_ADDR_VAR 0 7
37877: PUSH
37878: DOUBLE
37879: LD_INT 1
37881: DEC
37882: ST_TO_ADDR
37883: LD_VAR 0 12
37887: PUSH
37888: FOR_TO
37889: IFFALSE 38219
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37891: LD_VAR 0 12
37895: PUSH
37896: LD_VAR 0 7
37900: ARRAY
37901: PUSH
37902: LD_INT 1
37904: ARRAY
37905: PPUSH
37906: LD_VAR 0 12
37910: PUSH
37911: LD_VAR 0 7
37915: ARRAY
37916: PUSH
37917: LD_INT 2
37919: ARRAY
37920: PPUSH
37921: CALL_OW 488
37925: NOT
37926: PUSH
37927: LD_VAR 0 12
37931: PUSH
37932: LD_VAR 0 7
37936: ARRAY
37937: PUSH
37938: LD_INT 1
37940: ARRAY
37941: PPUSH
37942: LD_VAR 0 12
37946: PUSH
37947: LD_VAR 0 7
37951: ARRAY
37952: PUSH
37953: LD_INT 2
37955: ARRAY
37956: PPUSH
37957: CALL_OW 428
37961: PUSH
37962: LD_INT 0
37964: GREATER
37965: OR
37966: PUSH
37967: LD_VAR 0 12
37971: PUSH
37972: LD_VAR 0 7
37976: ARRAY
37977: PUSH
37978: LD_INT 1
37980: ARRAY
37981: PPUSH
37982: LD_VAR 0 12
37986: PUSH
37987: LD_VAR 0 7
37991: ARRAY
37992: PUSH
37993: LD_INT 2
37995: ARRAY
37996: PPUSH
37997: CALL_OW 351
38001: OR
38002: IFFALSE 38008
// exit ;
38004: POP
38005: POP
38006: GO 38300
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38008: LD_ADDR_VAR 0 8
38012: PUSH
38013: LD_VAR 0 12
38017: PUSH
38018: LD_VAR 0 7
38022: ARRAY
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PPUSH
38028: LD_VAR 0 12
38032: PUSH
38033: LD_VAR 0 7
38037: ARRAY
38038: PUSH
38039: LD_INT 2
38041: ARRAY
38042: PPUSH
38043: CALL_OW 546
38047: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38048: LD_VAR 0 8
38052: PUSH
38053: LD_INT 1
38055: ARRAY
38056: PUSH
38057: LD_VAR 0 8
38061: PUSH
38062: LD_INT 2
38064: ARRAY
38065: PUSH
38066: LD_VAR 0 13
38070: PUSH
38071: LD_INT 2
38073: PLUS
38074: GREATER
38075: OR
38076: PUSH
38077: LD_VAR 0 8
38081: PUSH
38082: LD_INT 2
38084: ARRAY
38085: PUSH
38086: LD_VAR 0 13
38090: PUSH
38091: LD_INT 2
38093: MINUS
38094: LESS
38095: OR
38096: PUSH
38097: LD_VAR 0 8
38101: PUSH
38102: LD_INT 3
38104: ARRAY
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 8
38111: PUSH
38112: LD_INT 9
38114: PUSH
38115: LD_INT 10
38117: PUSH
38118: LD_INT 11
38120: PUSH
38121: LD_INT 12
38123: PUSH
38124: LD_INT 13
38126: PUSH
38127: LD_INT 16
38129: PUSH
38130: LD_INT 17
38132: PUSH
38133: LD_INT 18
38135: PUSH
38136: LD_INT 19
38138: PUSH
38139: LD_INT 20
38141: PUSH
38142: LD_INT 21
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: IN
38160: NOT
38161: OR
38162: PUSH
38163: LD_VAR 0 8
38167: PUSH
38168: LD_INT 5
38170: ARRAY
38171: NOT
38172: OR
38173: PUSH
38174: LD_VAR 0 8
38178: PUSH
38179: LD_INT 6
38181: ARRAY
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 7
38191: PUSH
38192: LD_INT 9
38194: PUSH
38195: LD_INT 10
38197: PUSH
38198: LD_INT 11
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: IN
38209: NOT
38210: OR
38211: IFFALSE 38217
// exit ;
38213: POP
38214: POP
38215: GO 38300
// end ;
38217: GO 37888
38219: POP
38220: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38221: LD_VAR 0 9
38225: PPUSH
38226: LD_VAR 0 3
38230: PPUSH
38231: LD_VAR 0 4
38235: PPUSH
38236: LD_INT 20
38238: PPUSH
38239: CALL 30246 0 4
38243: PUSH
38244: LD_INT 4
38246: ARRAY
38247: IFFALSE 38251
// exit ;
38249: GO 38300
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38251: LD_VAR 0 2
38255: PUSH
38256: LD_INT 29
38258: PUSH
38259: LD_INT 30
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: IN
38266: PUSH
38267: LD_VAR 0 3
38271: PPUSH
38272: LD_VAR 0 4
38276: PPUSH
38277: LD_VAR 0 9
38281: PPUSH
38282: CALL_OW 440
38286: NOT
38287: AND
38288: IFFALSE 38292
// exit ;
38290: GO 38300
// result := true ;
38292: LD_ADDR_VAR 0 6
38296: PUSH
38297: LD_INT 1
38299: ST_TO_ADDR
// end ;
38300: LD_VAR 0 6
38304: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38305: LD_INT 0
38307: PPUSH
38308: PPUSH
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
38347: PPUSH
38348: PPUSH
38349: PPUSH
38350: PPUSH
38351: PPUSH
38352: PPUSH
38353: PPUSH
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
// result = [ ] ;
38365: LD_ADDR_VAR 0 7
38369: PUSH
38370: EMPTY
38371: ST_TO_ADDR
// temp_list = [ ] ;
38372: LD_ADDR_VAR 0 9
38376: PUSH
38377: EMPTY
38378: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38379: LD_VAR 0 4
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 3
38395: PUSH
38396: LD_INT 4
38398: PUSH
38399: LD_INT 5
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: IN
38410: NOT
38411: PUSH
38412: LD_VAR 0 1
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: IN
38427: PUSH
38428: LD_VAR 0 5
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 3
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: IN
38447: NOT
38448: AND
38449: OR
38450: IFFALSE 38454
// exit ;
38452: GO 56845
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38454: LD_VAR 0 1
38458: PUSH
38459: LD_INT 6
38461: PUSH
38462: LD_INT 7
38464: PUSH
38465: LD_INT 8
38467: PUSH
38468: LD_INT 13
38470: PUSH
38471: LD_INT 12
38473: PUSH
38474: LD_INT 15
38476: PUSH
38477: LD_INT 11
38479: PUSH
38480: LD_INT 14
38482: PUSH
38483: LD_INT 10
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: IN
38497: IFFALSE 38507
// btype = b_lab ;
38499: LD_ADDR_VAR 0 1
38503: PUSH
38504: LD_INT 6
38506: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38507: LD_VAR 0 6
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 2
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: IN
38526: NOT
38527: PUSH
38528: LD_VAR 0 1
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 3
38544: PUSH
38545: LD_INT 6
38547: PUSH
38548: LD_INT 36
38550: PUSH
38551: LD_INT 4
38553: PUSH
38554: LD_INT 5
38556: PUSH
38557: LD_INT 31
38559: PUSH
38560: LD_INT 32
38562: PUSH
38563: LD_INT 33
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: IN
38579: NOT
38580: PUSH
38581: LD_VAR 0 6
38585: PUSH
38586: LD_INT 1
38588: EQUAL
38589: AND
38590: OR
38591: PUSH
38592: LD_VAR 0 1
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: IN
38607: NOT
38608: PUSH
38609: LD_VAR 0 6
38613: PUSH
38614: LD_INT 2
38616: EQUAL
38617: AND
38618: OR
38619: IFFALSE 38629
// mode = 0 ;
38621: LD_ADDR_VAR 0 6
38625: PUSH
38626: LD_INT 0
38628: ST_TO_ADDR
// case mode of 0 :
38629: LD_VAR 0 6
38633: PUSH
38634: LD_INT 0
38636: DOUBLE
38637: EQUAL
38638: IFTRUE 38642
38640: GO 50095
38642: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38643: LD_ADDR_VAR 0 11
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 2
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: LD_INT 3
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 3
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38836: LD_ADDR_VAR 0 12
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: NEG
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 3
38993: NEG
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 3
39004: NEG
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39032: LD_ADDR_VAR 0 13
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 3
39191: NEG
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 3
39203: NEG
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39231: LD_ADDR_VAR 0 14
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 2
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: LD_INT 3
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 3
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39427: LD_ADDR_VAR 0 15
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 3
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39620: LD_ADDR_VAR 0 16
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 2
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 3
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39813: LD_ADDR_VAR 0 17
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: NEG
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: NEG
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40043: LD_ADDR_VAR 0 18
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: LD_INT 2
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: LD_INT 2
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40273: LD_ADDR_VAR 0 19
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40503: LD_ADDR_VAR 0 20
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 2
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40733: LD_ADDR_VAR 0 21
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40963: LD_ADDR_VAR 0 22
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: LD_INT 2
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41193: LD_ADDR_VAR 0 23
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: LD_INT 3
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: LD_INT 3
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41473: LD_ADDR_VAR 0 24
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: LD_INT 2
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 3
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41749: LD_ADDR_VAR 0 25
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 3
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: LD_INT 3
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42023: LD_ADDR_VAR 0 26
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 2
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 2
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 3
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42299: LD_ADDR_VAR 0 27
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 2
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 2
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 3
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 3
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42579: LD_ADDR_VAR 0 28
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: LD_INT 3
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 3
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 3
42826: NEG
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42861: LD_ADDR_VAR 0 29
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 2
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: NEG
43052: PUSH
43053: LD_INT 3
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 3
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 3
43105: NEG
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43140: LD_ADDR_VAR 0 30
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: LD_INT 2
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: LD_INT 3
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 3
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 3
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43418: LD_ADDR_VAR 0 31
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 3
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 3
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 3
43661: NEG
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43696: LD_ADDR_VAR 0 32
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 3
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: LD_INT 3
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: NEG
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43974: LD_ADDR_VAR 0 33
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 3
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 3
44218: NEG
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44253: LD_ADDR_VAR 0 34
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 3
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 3
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44533: LD_ADDR_VAR 0 35
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44645: LD_ADDR_VAR 0 36
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44757: LD_ADDR_VAR 0 37
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44869: LD_ADDR_VAR 0 38
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44981: LD_ADDR_VAR 0 39
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45093: LD_ADDR_VAR 0 40
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45205: LD_ADDR_VAR 0 41
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 3
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 3
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 3
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 3
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: NEG
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 3
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 3
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 3
45514: NEG
45515: PUSH
45516: LD_INT 3
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45555: LD_ADDR_VAR 0 42
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: LD_INT 3
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 3
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 3
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: LD_INT 3
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 3
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 3
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 3
45864: NEG
45865: PUSH
45866: LD_INT 3
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45905: LD_ADDR_VAR 0 43
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 3
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 3
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: LD_INT 3
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 3
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 3
46212: NEG
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46253: LD_ADDR_VAR 0 44
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: LD_INT 3
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: NEG
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 3
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 3
46550: NEG
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 3
46562: NEG
46563: PUSH
46564: LD_INT 3
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46603: LD_ADDR_VAR 0 45
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 3
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 3
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: LD_INT 3
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 3
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: LD_INT 3
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: NEG
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46953: LD_ADDR_VAR 0 46
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 3
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 3
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 3
47249: NEG
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 3
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47301: LD_ADDR_VAR 0 47
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47452: LD_ADDR_VAR 0 48
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47599: LD_ADDR_VAR 0 49
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47743: LD_ADDR_VAR 0 50
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47887: LD_ADDR_VAR 0 51
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48034: LD_ADDR_VAR 0 52
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48185: LD_ADDR_VAR 0 53
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48415: LD_ADDR_VAR 0 54
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48645: LD_ADDR_VAR 0 55
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48875: LD_ADDR_VAR 0 56
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49105: LD_ADDR_VAR 0 57
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49335: LD_ADDR_VAR 0 58
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49565: LD_ADDR_VAR 0 59
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49653: LD_ADDR_VAR 0 60
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49741: LD_ADDR_VAR 0 61
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49829: LD_ADDR_VAR 0 62
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49917: LD_ADDR_VAR 0 63
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50005: LD_ADDR_VAR 0 64
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// end ; 1 :
50093: GO 55990
50095: LD_INT 1
50097: DOUBLE
50098: EQUAL
50099: IFTRUE 50103
50101: GO 52726
50103: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50104: LD_ADDR_VAR 0 11
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50148: LD_ADDR_VAR 0 12
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 3
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50189: LD_ADDR_VAR 0 13
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50229: LD_ADDR_VAR 0 14
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: LD_INT 3
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50270: LD_ADDR_VAR 0 15
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 3
50288: NEG
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50314: LD_ADDR_VAR 0 16
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: LD_INT 3
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50360: LD_ADDR_VAR 0 17
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 3
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50404: LD_ADDR_VAR 0 18
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 3
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50445: LD_ADDR_VAR 0 19
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: LD_INT 3
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50485: LD_ADDR_VAR 0 20
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50526: LD_ADDR_VAR 0 21
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: LIST
50569: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50570: LD_ADDR_VAR 0 22
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 3
50601: NEG
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50616: LD_ADDR_VAR 0 23
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 3
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 4
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 3
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: LIST
50659: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50660: LD_ADDR_VAR 0 24
50664: PUSH
50665: LD_INT 3
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 4
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50701: LD_ADDR_VAR 0 25
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 4
50718: PUSH
50719: LD_INT 3
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: PUSH
50729: LD_INT 4
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50741: LD_ADDR_VAR 0 26
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: LD_INT 4
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50782: LD_ADDR_VAR 0 27
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 4
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50826: LD_ADDR_VAR 0 28
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: LD_INT 4
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 4
50857: NEG
50858: PUSH
50859: LD_INT 3
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50872: LD_ADDR_VAR 0 29
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 3
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 3
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 4
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 4
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 3
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 5
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 5
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 4
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 6
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 6
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 5
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51027: LD_ADDR_VAR 0 30
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 4
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 4
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 5
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 5
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 5
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 6
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 6
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51170: LD_ADDR_VAR 0 31
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 4
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 4
51217: PUSH
51218: LD_INT 4
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: PUSH
51228: LD_INT 4
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 5
51237: PUSH
51238: LD_INT 4
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 5
51247: PUSH
51248: LD_INT 5
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 4
51257: PUSH
51258: LD_INT 5
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 6
51267: PUSH
51268: LD_INT 5
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 6
51277: PUSH
51278: LD_INT 6
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 5
51287: PUSH
51288: LD_INT 6
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51309: LD_ADDR_VAR 0 32
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 4
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 4
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 5
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 5
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 4
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 6
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 6
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 5
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51452: LD_ADDR_VAR 0 33
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 3
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 4
51504: NEG
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 4
51515: NEG
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 4
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 5
51538: NEG
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 5
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 5
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 6
51572: NEG
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 6
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51607: LD_ADDR_VAR 0 34
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 3
51650: NEG
51651: PUSH
51652: LD_INT 4
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 4
51662: NEG
51663: PUSH
51664: LD_INT 3
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 4
51674: NEG
51675: PUSH
51676: LD_INT 4
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 4
51686: NEG
51687: PUSH
51688: LD_INT 5
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 5
51698: NEG
51699: PUSH
51700: LD_INT 4
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 5
51710: NEG
51711: PUSH
51712: LD_INT 5
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 5
51722: NEG
51723: PUSH
51724: LD_INT 6
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 6
51734: NEG
51735: PUSH
51736: LD_INT 5
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 6
51746: NEG
51747: PUSH
51748: LD_INT 6
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51770: LD_ADDR_VAR 0 41
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 3
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51814: LD_ADDR_VAR 0 42
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: LIST
51854: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51855: LD_ADDR_VAR 0 43
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51895: LD_ADDR_VAR 0 44
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51936: LD_ADDR_VAR 0 45
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: NEG
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51980: LD_ADDR_VAR 0 46
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: NEG
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52026: LD_ADDR_VAR 0 47
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52059: LD_ADDR_VAR 0 48
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52090: LD_ADDR_VAR 0 49
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52119: LD_ADDR_VAR 0 50
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 3
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52148: LD_ADDR_VAR 0 51
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52179: LD_ADDR_VAR 0 52
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52212: LD_ADDR_VAR 0 53
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52256: LD_ADDR_VAR 0 54
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52297: LD_ADDR_VAR 0 55
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52337: LD_ADDR_VAR 0 56
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52378: LD_ADDR_VAR 0 57
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 3
52396: NEG
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52422: LD_ADDR_VAR 0 58
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: NEG
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: NEG
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52468: LD_ADDR_VAR 0 59
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52512: LD_ADDR_VAR 0 60
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52553: LD_ADDR_VAR 0 61
52557: PUSH
52558: LD_INT 2
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 2
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52593: LD_ADDR_VAR 0 62
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: LIST
52633: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52634: LD_ADDR_VAR 0 63
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: LIST
52677: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52678: LD_ADDR_VAR 0 64
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: ST_TO_ADDR
// end ; 2 :
52724: GO 55990
52726: LD_INT 2
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52734
52732: GO 55989
52734: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52735: LD_ADDR_VAR 0 29
52739: PUSH
52740: LD_INT 4
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 4
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 5
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 5
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 4
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 5
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 3
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 4
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 4
52865: PUSH
52866: LD_INT 4
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 4
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 4
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 4
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 5
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 5
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 4
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 3
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 5
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: NEG
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 4
53074: NEG
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 4
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 4
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 4
53120: NEG
53121: PUSH
53122: LD_INT 4
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 4
53132: NEG
53133: PUSH
53134: LD_INT 5
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: NEG
53145: PUSH
53146: LD_INT 4
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 3
53156: NEG
53157: PUSH
53158: LD_INT 3
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 4
53168: NEG
53169: PUSH
53170: LD_INT 3
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 5
53180: NEG
53181: PUSH
53182: LD_INT 4
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 5
53192: NEG
53193: PUSH
53194: LD_INT 5
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: LD_INT 5
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 5
53216: NEG
53217: PUSH
53218: LD_INT 3
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53273: LD_ADDR_VAR 0 30
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: LD_INT 4
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 4
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 5
53300: PUSH
53301: LD_INT 4
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 5
53310: PUSH
53311: LD_INT 5
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 4
53320: PUSH
53321: LD_INT 5
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 3
53330: PUSH
53331: LD_INT 4
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 5
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: LD_INT 5
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 3
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 4
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 4
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 4
53463: NEG
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 4
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: NEG
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 4
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 5
53519: NEG
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 5
53530: NEG
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 5
53542: NEG
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: NEG
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: LD_INT 4
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 4
53625: NEG
53626: PUSH
53627: LD_INT 3
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 4
53637: NEG
53638: PUSH
53639: LD_INT 4
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 4
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 4
53661: NEG
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 4
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 5
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 4
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 4
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 5
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 5
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53820: LD_ADDR_VAR 0 31
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 4
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 4
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 5
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 5
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 3
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: LD_INT 5
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 3
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 4
53976: NEG
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 4
53987: NEG
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 4
53999: NEG
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 4
54022: NEG
54023: PUSH
54024: LD_INT 4
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 4
54034: NEG
54035: PUSH
54036: LD_INT 5
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: LD_INT 4
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 4
54070: NEG
54071: PUSH
54072: LD_INT 3
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 5
54082: NEG
54083: PUSH
54084: LD_INT 4
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 5
54094: NEG
54095: PUSH
54096: LD_INT 5
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: NEG
54107: PUSH
54108: LD_INT 5
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 5
54118: NEG
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 4
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 4
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: LD_INT 4
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 4
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 4
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 5
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 5
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 4
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 5
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54370: LD_ADDR_VAR 0 32
54374: PUSH
54375: LD_INT 4
54377: NEG
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 4
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 4
54422: NEG
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 5
54433: NEG
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 5
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 5
54456: NEG
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 3
54468: NEG
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 3
54479: NEG
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: NEG
54492: PUSH
54493: LD_INT 4
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 4
54539: NEG
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 4
54551: NEG
54552: PUSH
54553: LD_INT 4
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 4
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 4
54575: NEG
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 4
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 5
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 4
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 3
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 4
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 5
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 5
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 3
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 4
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 4
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 4
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 4
54782: PUSH
54783: LD_INT 4
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 4
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 5
54802: PUSH
54803: LD_INT 4
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 5
54812: PUSH
54813: LD_INT 5
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 4
54822: PUSH
54823: LD_INT 5
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: LD_INT 4
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: LD_INT 3
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 5
54852: PUSH
54853: LD_INT 3
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: LD_INT 5
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54917: LD_ADDR_VAR 0 33
54921: PUSH
54922: LD_INT 4
54924: NEG
54925: PUSH
54926: LD_INT 4
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 4
54936: NEG
54937: PUSH
54938: LD_INT 5
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: LD_INT 4
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 3
54960: NEG
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 4
54972: NEG
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 5
54984: NEG
54985: PUSH
54986: LD_INT 4
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 5
54996: NEG
54997: PUSH
54998: LD_INT 5
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: LD_INT 5
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 5
55020: NEG
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 4
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: LD_INT 3
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 4
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 4
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 4
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 5
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 4
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 3
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 5
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 4
55247: PUSH
55248: LD_INT 3
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 4
55257: PUSH
55258: LD_INT 4
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: LD_INT 4
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 4
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: LD_INT 4
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 4
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: LD_INT 5
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 5
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 4
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 5
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 3
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55455: LD_ADDR_VAR 0 34
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 4
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 5
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 4
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 3
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 4
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 5
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 5
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 4
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 4
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 4
55657: PUSH
55658: LD_INT 4
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 4
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 5
55677: PUSH
55678: LD_INT 4
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 5
55687: PUSH
55688: LD_INT 5
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: LD_INT 5
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: LD_INT 3
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 5
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: LD_INT 5
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 4
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 4
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: LD_INT 4
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 4
55840: NEG
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 4
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 3
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 4
55885: NEG
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 5
55896: NEG
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 5
55907: NEG
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 5
55919: NEG
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: ST_TO_ADDR
// end ; end ;
55987: GO 55990
55989: POP
// case btype of b_depot , b_warehouse :
55990: LD_VAR 0 1
55994: PUSH
55995: LD_INT 0
55997: DOUBLE
55998: EQUAL
55999: IFTRUE 56009
56001: LD_INT 1
56003: DOUBLE
56004: EQUAL
56005: IFTRUE 56009
56007: GO 56210
56009: POP
// case nation of nation_american :
56010: LD_VAR 0 5
56014: PUSH
56015: LD_INT 1
56017: DOUBLE
56018: EQUAL
56019: IFTRUE 56023
56021: GO 56079
56023: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56024: LD_ADDR_VAR 0 9
56028: PUSH
56029: LD_VAR 0 11
56033: PUSH
56034: LD_VAR 0 12
56038: PUSH
56039: LD_VAR 0 13
56043: PUSH
56044: LD_VAR 0 14
56048: PUSH
56049: LD_VAR 0 15
56053: PUSH
56054: LD_VAR 0 16
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: PUSH
56067: LD_VAR 0 4
56071: PUSH
56072: LD_INT 1
56074: PLUS
56075: ARRAY
56076: ST_TO_ADDR
56077: GO 56208
56079: LD_INT 2
56081: DOUBLE
56082: EQUAL
56083: IFTRUE 56087
56085: GO 56143
56087: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56088: LD_ADDR_VAR 0 9
56092: PUSH
56093: LD_VAR 0 17
56097: PUSH
56098: LD_VAR 0 18
56102: PUSH
56103: LD_VAR 0 19
56107: PUSH
56108: LD_VAR 0 20
56112: PUSH
56113: LD_VAR 0 21
56117: PUSH
56118: LD_VAR 0 22
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: PUSH
56131: LD_VAR 0 4
56135: PUSH
56136: LD_INT 1
56138: PLUS
56139: ARRAY
56140: ST_TO_ADDR
56141: GO 56208
56143: LD_INT 3
56145: DOUBLE
56146: EQUAL
56147: IFTRUE 56151
56149: GO 56207
56151: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56152: LD_ADDR_VAR 0 9
56156: PUSH
56157: LD_VAR 0 23
56161: PUSH
56162: LD_VAR 0 24
56166: PUSH
56167: LD_VAR 0 25
56171: PUSH
56172: LD_VAR 0 26
56176: PUSH
56177: LD_VAR 0 27
56181: PUSH
56182: LD_VAR 0 28
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: PUSH
56195: LD_VAR 0 4
56199: PUSH
56200: LD_INT 1
56202: PLUS
56203: ARRAY
56204: ST_TO_ADDR
56205: GO 56208
56207: POP
56208: GO 56763
56210: LD_INT 2
56212: DOUBLE
56213: EQUAL
56214: IFTRUE 56224
56216: LD_INT 3
56218: DOUBLE
56219: EQUAL
56220: IFTRUE 56224
56222: GO 56280
56224: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56225: LD_ADDR_VAR 0 9
56229: PUSH
56230: LD_VAR 0 29
56234: PUSH
56235: LD_VAR 0 30
56239: PUSH
56240: LD_VAR 0 31
56244: PUSH
56245: LD_VAR 0 32
56249: PUSH
56250: LD_VAR 0 33
56254: PUSH
56255: LD_VAR 0 34
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: PUSH
56268: LD_VAR 0 4
56272: PUSH
56273: LD_INT 1
56275: PLUS
56276: ARRAY
56277: ST_TO_ADDR
56278: GO 56763
56280: LD_INT 16
56282: DOUBLE
56283: EQUAL
56284: IFTRUE 56342
56286: LD_INT 17
56288: DOUBLE
56289: EQUAL
56290: IFTRUE 56342
56292: LD_INT 18
56294: DOUBLE
56295: EQUAL
56296: IFTRUE 56342
56298: LD_INT 19
56300: DOUBLE
56301: EQUAL
56302: IFTRUE 56342
56304: LD_INT 22
56306: DOUBLE
56307: EQUAL
56308: IFTRUE 56342
56310: LD_INT 20
56312: DOUBLE
56313: EQUAL
56314: IFTRUE 56342
56316: LD_INT 21
56318: DOUBLE
56319: EQUAL
56320: IFTRUE 56342
56322: LD_INT 23
56324: DOUBLE
56325: EQUAL
56326: IFTRUE 56342
56328: LD_INT 24
56330: DOUBLE
56331: EQUAL
56332: IFTRUE 56342
56334: LD_INT 25
56336: DOUBLE
56337: EQUAL
56338: IFTRUE 56342
56340: GO 56398
56342: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56343: LD_ADDR_VAR 0 9
56347: PUSH
56348: LD_VAR 0 35
56352: PUSH
56353: LD_VAR 0 36
56357: PUSH
56358: LD_VAR 0 37
56362: PUSH
56363: LD_VAR 0 38
56367: PUSH
56368: LD_VAR 0 39
56372: PUSH
56373: LD_VAR 0 40
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: PUSH
56386: LD_VAR 0 4
56390: PUSH
56391: LD_INT 1
56393: PLUS
56394: ARRAY
56395: ST_TO_ADDR
56396: GO 56763
56398: LD_INT 6
56400: DOUBLE
56401: EQUAL
56402: IFTRUE 56454
56404: LD_INT 7
56406: DOUBLE
56407: EQUAL
56408: IFTRUE 56454
56410: LD_INT 8
56412: DOUBLE
56413: EQUAL
56414: IFTRUE 56454
56416: LD_INT 13
56418: DOUBLE
56419: EQUAL
56420: IFTRUE 56454
56422: LD_INT 12
56424: DOUBLE
56425: EQUAL
56426: IFTRUE 56454
56428: LD_INT 15
56430: DOUBLE
56431: EQUAL
56432: IFTRUE 56454
56434: LD_INT 11
56436: DOUBLE
56437: EQUAL
56438: IFTRUE 56454
56440: LD_INT 14
56442: DOUBLE
56443: EQUAL
56444: IFTRUE 56454
56446: LD_INT 10
56448: DOUBLE
56449: EQUAL
56450: IFTRUE 56454
56452: GO 56510
56454: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56455: LD_ADDR_VAR 0 9
56459: PUSH
56460: LD_VAR 0 41
56464: PUSH
56465: LD_VAR 0 42
56469: PUSH
56470: LD_VAR 0 43
56474: PUSH
56475: LD_VAR 0 44
56479: PUSH
56480: LD_VAR 0 45
56484: PUSH
56485: LD_VAR 0 46
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: PUSH
56498: LD_VAR 0 4
56502: PUSH
56503: LD_INT 1
56505: PLUS
56506: ARRAY
56507: ST_TO_ADDR
56508: GO 56763
56510: LD_INT 36
56512: DOUBLE
56513: EQUAL
56514: IFTRUE 56518
56516: GO 56574
56518: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56519: LD_ADDR_VAR 0 9
56523: PUSH
56524: LD_VAR 0 47
56528: PUSH
56529: LD_VAR 0 48
56533: PUSH
56534: LD_VAR 0 49
56538: PUSH
56539: LD_VAR 0 50
56543: PUSH
56544: LD_VAR 0 51
56548: PUSH
56549: LD_VAR 0 52
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: PUSH
56562: LD_VAR 0 4
56566: PUSH
56567: LD_INT 1
56569: PLUS
56570: ARRAY
56571: ST_TO_ADDR
56572: GO 56763
56574: LD_INT 4
56576: DOUBLE
56577: EQUAL
56578: IFTRUE 56600
56580: LD_INT 5
56582: DOUBLE
56583: EQUAL
56584: IFTRUE 56600
56586: LD_INT 34
56588: DOUBLE
56589: EQUAL
56590: IFTRUE 56600
56592: LD_INT 37
56594: DOUBLE
56595: EQUAL
56596: IFTRUE 56600
56598: GO 56656
56600: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56601: LD_ADDR_VAR 0 9
56605: PUSH
56606: LD_VAR 0 53
56610: PUSH
56611: LD_VAR 0 54
56615: PUSH
56616: LD_VAR 0 55
56620: PUSH
56621: LD_VAR 0 56
56625: PUSH
56626: LD_VAR 0 57
56630: PUSH
56631: LD_VAR 0 58
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: PUSH
56644: LD_VAR 0 4
56648: PUSH
56649: LD_INT 1
56651: PLUS
56652: ARRAY
56653: ST_TO_ADDR
56654: GO 56763
56656: LD_INT 31
56658: DOUBLE
56659: EQUAL
56660: IFTRUE 56706
56662: LD_INT 32
56664: DOUBLE
56665: EQUAL
56666: IFTRUE 56706
56668: LD_INT 33
56670: DOUBLE
56671: EQUAL
56672: IFTRUE 56706
56674: LD_INT 27
56676: DOUBLE
56677: EQUAL
56678: IFTRUE 56706
56680: LD_INT 26
56682: DOUBLE
56683: EQUAL
56684: IFTRUE 56706
56686: LD_INT 28
56688: DOUBLE
56689: EQUAL
56690: IFTRUE 56706
56692: LD_INT 29
56694: DOUBLE
56695: EQUAL
56696: IFTRUE 56706
56698: LD_INT 30
56700: DOUBLE
56701: EQUAL
56702: IFTRUE 56706
56704: GO 56762
56706: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56707: LD_ADDR_VAR 0 9
56711: PUSH
56712: LD_VAR 0 59
56716: PUSH
56717: LD_VAR 0 60
56721: PUSH
56722: LD_VAR 0 61
56726: PUSH
56727: LD_VAR 0 62
56731: PUSH
56732: LD_VAR 0 63
56736: PUSH
56737: LD_VAR 0 64
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: PUSH
56750: LD_VAR 0 4
56754: PUSH
56755: LD_INT 1
56757: PLUS
56758: ARRAY
56759: ST_TO_ADDR
56760: GO 56763
56762: POP
// temp_list2 = [ ] ;
56763: LD_ADDR_VAR 0 10
56767: PUSH
56768: EMPTY
56769: ST_TO_ADDR
// for i in temp_list do
56770: LD_ADDR_VAR 0 8
56774: PUSH
56775: LD_VAR 0 9
56779: PUSH
56780: FOR_IN
56781: IFFALSE 56833
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56783: LD_ADDR_VAR 0 10
56787: PUSH
56788: LD_VAR 0 10
56792: PUSH
56793: LD_VAR 0 8
56797: PUSH
56798: LD_INT 1
56800: ARRAY
56801: PUSH
56802: LD_VAR 0 2
56806: PLUS
56807: PUSH
56808: LD_VAR 0 8
56812: PUSH
56813: LD_INT 2
56815: ARRAY
56816: PUSH
56817: LD_VAR 0 3
56821: PLUS
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: ADD
56830: ST_TO_ADDR
56831: GO 56780
56833: POP
56834: POP
// result = temp_list2 ;
56835: LD_ADDR_VAR 0 7
56839: PUSH
56840: LD_VAR 0 10
56844: ST_TO_ADDR
// end ;
56845: LD_VAR 0 7
56849: RET
// export function EnemyInRange ( unit , dist ) ; begin
56850: LD_INT 0
56852: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56853: LD_ADDR_VAR 0 3
56857: PUSH
56858: LD_VAR 0 1
56862: PPUSH
56863: CALL_OW 255
56867: PPUSH
56868: LD_VAR 0 1
56872: PPUSH
56873: CALL_OW 250
56877: PPUSH
56878: LD_VAR 0 1
56882: PPUSH
56883: CALL_OW 251
56887: PPUSH
56888: LD_VAR 0 2
56892: PPUSH
56893: CALL 30246 0 4
56897: PUSH
56898: LD_INT 4
56900: ARRAY
56901: ST_TO_ADDR
// end ;
56902: LD_VAR 0 3
56906: RET
// export function PlayerSeeMe ( unit ) ; begin
56907: LD_INT 0
56909: PPUSH
// result := See ( your_side , unit ) ;
56910: LD_ADDR_VAR 0 2
56914: PUSH
56915: LD_OWVAR 2
56919: PPUSH
56920: LD_VAR 0 1
56924: PPUSH
56925: CALL_OW 292
56929: ST_TO_ADDR
// end ;
56930: LD_VAR 0 2
56934: RET
// export function ReverseDir ( unit ) ; begin
56935: LD_INT 0
56937: PPUSH
// if not unit then
56938: LD_VAR 0 1
56942: NOT
56943: IFFALSE 56947
// exit ;
56945: GO 56970
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56947: LD_ADDR_VAR 0 2
56951: PUSH
56952: LD_VAR 0 1
56956: PPUSH
56957: CALL_OW 254
56961: PUSH
56962: LD_INT 3
56964: PLUS
56965: PUSH
56966: LD_INT 6
56968: MOD
56969: ST_TO_ADDR
// end ;
56970: LD_VAR 0 2
56974: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56975: LD_INT 0
56977: PPUSH
56978: PPUSH
56979: PPUSH
56980: PPUSH
56981: PPUSH
// if not hexes then
56982: LD_VAR 0 2
56986: NOT
56987: IFFALSE 56991
// exit ;
56989: GO 57139
// dist := 9999 ;
56991: LD_ADDR_VAR 0 5
56995: PUSH
56996: LD_INT 9999
56998: ST_TO_ADDR
// for i = 1 to hexes do
56999: LD_ADDR_VAR 0 4
57003: PUSH
57004: DOUBLE
57005: LD_INT 1
57007: DEC
57008: ST_TO_ADDR
57009: LD_VAR 0 2
57013: PUSH
57014: FOR_TO
57015: IFFALSE 57127
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57017: LD_VAR 0 1
57021: PPUSH
57022: LD_VAR 0 2
57026: PUSH
57027: LD_VAR 0 4
57031: ARRAY
57032: PUSH
57033: LD_INT 1
57035: ARRAY
57036: PPUSH
57037: LD_VAR 0 2
57041: PUSH
57042: LD_VAR 0 4
57046: ARRAY
57047: PUSH
57048: LD_INT 2
57050: ARRAY
57051: PPUSH
57052: CALL_OW 297
57056: PUSH
57057: LD_VAR 0 5
57061: LESS
57062: IFFALSE 57125
// begin hex := hexes [ i ] ;
57064: LD_ADDR_VAR 0 7
57068: PUSH
57069: LD_VAR 0 2
57073: PUSH
57074: LD_VAR 0 4
57078: ARRAY
57079: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57080: LD_ADDR_VAR 0 5
57084: PUSH
57085: LD_VAR 0 1
57089: PPUSH
57090: LD_VAR 0 2
57094: PUSH
57095: LD_VAR 0 4
57099: ARRAY
57100: PUSH
57101: LD_INT 1
57103: ARRAY
57104: PPUSH
57105: LD_VAR 0 2
57109: PUSH
57110: LD_VAR 0 4
57114: ARRAY
57115: PUSH
57116: LD_INT 2
57118: ARRAY
57119: PPUSH
57120: CALL_OW 297
57124: ST_TO_ADDR
// end ; end ;
57125: GO 57014
57127: POP
57128: POP
// result := hex ;
57129: LD_ADDR_VAR 0 3
57133: PUSH
57134: LD_VAR 0 7
57138: ST_TO_ADDR
// end ;
57139: LD_VAR 0 3
57143: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57144: LD_INT 0
57146: PPUSH
57147: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57148: LD_VAR 0 1
57152: NOT
57153: PUSH
57154: LD_VAR 0 1
57158: PUSH
57159: LD_INT 21
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 23
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PPUSH
57183: CALL_OW 69
57187: IN
57188: NOT
57189: OR
57190: IFFALSE 57194
// exit ;
57192: GO 57241
// for i = 1 to 3 do
57194: LD_ADDR_VAR 0 3
57198: PUSH
57199: DOUBLE
57200: LD_INT 1
57202: DEC
57203: ST_TO_ADDR
57204: LD_INT 3
57206: PUSH
57207: FOR_TO
57208: IFFALSE 57239
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57210: LD_VAR 0 1
57214: PPUSH
57215: CALL_OW 250
57219: PPUSH
57220: LD_VAR 0 1
57224: PPUSH
57225: CALL_OW 251
57229: PPUSH
57230: LD_INT 1
57232: PPUSH
57233: CALL_OW 453
57237: GO 57207
57239: POP
57240: POP
// end ;
57241: LD_VAR 0 2
57245: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57246: LD_INT 0
57248: PPUSH
57249: PPUSH
57250: PPUSH
57251: PPUSH
57252: PPUSH
57253: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57254: LD_VAR 0 1
57258: NOT
57259: PUSH
57260: LD_VAR 0 2
57264: NOT
57265: OR
57266: PUSH
57267: LD_VAR 0 1
57271: PPUSH
57272: CALL_OW 314
57276: OR
57277: IFFALSE 57281
// exit ;
57279: GO 57722
// x := GetX ( enemy_unit ) ;
57281: LD_ADDR_VAR 0 7
57285: PUSH
57286: LD_VAR 0 2
57290: PPUSH
57291: CALL_OW 250
57295: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57296: LD_ADDR_VAR 0 8
57300: PUSH
57301: LD_VAR 0 2
57305: PPUSH
57306: CALL_OW 251
57310: ST_TO_ADDR
// if not x or not y then
57311: LD_VAR 0 7
57315: NOT
57316: PUSH
57317: LD_VAR 0 8
57321: NOT
57322: OR
57323: IFFALSE 57327
// exit ;
57325: GO 57722
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57327: LD_ADDR_VAR 0 6
57331: PUSH
57332: LD_VAR 0 7
57336: PPUSH
57337: LD_INT 0
57339: PPUSH
57340: LD_INT 4
57342: PPUSH
57343: CALL_OW 272
57347: PUSH
57348: LD_VAR 0 8
57352: PPUSH
57353: LD_INT 0
57355: PPUSH
57356: LD_INT 4
57358: PPUSH
57359: CALL_OW 273
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_VAR 0 7
57372: PPUSH
57373: LD_INT 1
57375: PPUSH
57376: LD_INT 4
57378: PPUSH
57379: CALL_OW 272
57383: PUSH
57384: LD_VAR 0 8
57388: PPUSH
57389: LD_INT 1
57391: PPUSH
57392: LD_INT 4
57394: PPUSH
57395: CALL_OW 273
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_VAR 0 7
57408: PPUSH
57409: LD_INT 2
57411: PPUSH
57412: LD_INT 4
57414: PPUSH
57415: CALL_OW 272
57419: PUSH
57420: LD_VAR 0 8
57424: PPUSH
57425: LD_INT 2
57427: PPUSH
57428: LD_INT 4
57430: PPUSH
57431: CALL_OW 273
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_VAR 0 7
57444: PPUSH
57445: LD_INT 3
57447: PPUSH
57448: LD_INT 4
57450: PPUSH
57451: CALL_OW 272
57455: PUSH
57456: LD_VAR 0 8
57460: PPUSH
57461: LD_INT 3
57463: PPUSH
57464: LD_INT 4
57466: PPUSH
57467: CALL_OW 273
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_VAR 0 7
57480: PPUSH
57481: LD_INT 4
57483: PPUSH
57484: LD_INT 4
57486: PPUSH
57487: CALL_OW 272
57491: PUSH
57492: LD_VAR 0 8
57496: PPUSH
57497: LD_INT 4
57499: PPUSH
57500: LD_INT 4
57502: PPUSH
57503: CALL_OW 273
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_VAR 0 7
57516: PPUSH
57517: LD_INT 5
57519: PPUSH
57520: LD_INT 4
57522: PPUSH
57523: CALL_OW 272
57527: PUSH
57528: LD_VAR 0 8
57532: PPUSH
57533: LD_INT 5
57535: PPUSH
57536: LD_INT 4
57538: PPUSH
57539: CALL_OW 273
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: ST_TO_ADDR
// for i = tmp downto 1 do
57556: LD_ADDR_VAR 0 4
57560: PUSH
57561: DOUBLE
57562: LD_VAR 0 6
57566: INC
57567: ST_TO_ADDR
57568: LD_INT 1
57570: PUSH
57571: FOR_DOWNTO
57572: IFFALSE 57673
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57574: LD_VAR 0 6
57578: PUSH
57579: LD_VAR 0 4
57583: ARRAY
57584: PUSH
57585: LD_INT 1
57587: ARRAY
57588: PPUSH
57589: LD_VAR 0 6
57593: PUSH
57594: LD_VAR 0 4
57598: ARRAY
57599: PUSH
57600: LD_INT 2
57602: ARRAY
57603: PPUSH
57604: CALL_OW 488
57608: NOT
57609: PUSH
57610: LD_VAR 0 6
57614: PUSH
57615: LD_VAR 0 4
57619: ARRAY
57620: PUSH
57621: LD_INT 1
57623: ARRAY
57624: PPUSH
57625: LD_VAR 0 6
57629: PUSH
57630: LD_VAR 0 4
57634: ARRAY
57635: PUSH
57636: LD_INT 2
57638: ARRAY
57639: PPUSH
57640: CALL_OW 428
57644: PUSH
57645: LD_INT 0
57647: NONEQUAL
57648: OR
57649: IFFALSE 57671
// tmp := Delete ( tmp , i ) ;
57651: LD_ADDR_VAR 0 6
57655: PUSH
57656: LD_VAR 0 6
57660: PPUSH
57661: LD_VAR 0 4
57665: PPUSH
57666: CALL_OW 3
57670: ST_TO_ADDR
57671: GO 57571
57673: POP
57674: POP
// j := GetClosestHex ( unit , tmp ) ;
57675: LD_ADDR_VAR 0 5
57679: PUSH
57680: LD_VAR 0 1
57684: PPUSH
57685: LD_VAR 0 6
57689: PPUSH
57690: CALL 56975 0 2
57694: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57695: LD_VAR 0 1
57699: PPUSH
57700: LD_VAR 0 5
57704: PUSH
57705: LD_INT 1
57707: ARRAY
57708: PPUSH
57709: LD_VAR 0 5
57713: PUSH
57714: LD_INT 2
57716: ARRAY
57717: PPUSH
57718: CALL_OW 111
// end ;
57722: LD_VAR 0 3
57726: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57727: LD_INT 0
57729: PPUSH
57730: PPUSH
57731: PPUSH
// uc_side = 0 ;
57732: LD_ADDR_OWVAR 20
57736: PUSH
57737: LD_INT 0
57739: ST_TO_ADDR
// uc_nation = 0 ;
57740: LD_ADDR_OWVAR 21
57744: PUSH
57745: LD_INT 0
57747: ST_TO_ADDR
// InitHc_All ( ) ;
57748: CALL_OW 584
// InitVc ;
57752: CALL_OW 20
// if mastodonts then
57756: LD_VAR 0 6
57760: IFFALSE 57827
// for i = 1 to mastodonts do
57762: LD_ADDR_VAR 0 11
57766: PUSH
57767: DOUBLE
57768: LD_INT 1
57770: DEC
57771: ST_TO_ADDR
57772: LD_VAR 0 6
57776: PUSH
57777: FOR_TO
57778: IFFALSE 57825
// begin vc_chassis := 31 ;
57780: LD_ADDR_OWVAR 37
57784: PUSH
57785: LD_INT 31
57787: ST_TO_ADDR
// vc_control := control_rider ;
57788: LD_ADDR_OWVAR 38
57792: PUSH
57793: LD_INT 4
57795: ST_TO_ADDR
// animal := CreateVehicle ;
57796: LD_ADDR_VAR 0 12
57800: PUSH
57801: CALL_OW 45
57805: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57806: LD_VAR 0 12
57810: PPUSH
57811: LD_VAR 0 8
57815: PPUSH
57816: LD_INT 0
57818: PPUSH
57819: CALL 59962 0 3
// end ;
57823: GO 57777
57825: POP
57826: POP
// if horses then
57827: LD_VAR 0 5
57831: IFFALSE 57898
// for i = 1 to horses do
57833: LD_ADDR_VAR 0 11
57837: PUSH
57838: DOUBLE
57839: LD_INT 1
57841: DEC
57842: ST_TO_ADDR
57843: LD_VAR 0 5
57847: PUSH
57848: FOR_TO
57849: IFFALSE 57896
// begin hc_class := 21 ;
57851: LD_ADDR_OWVAR 28
57855: PUSH
57856: LD_INT 21
57858: ST_TO_ADDR
// hc_gallery :=  ;
57859: LD_ADDR_OWVAR 33
57863: PUSH
57864: LD_STRING 
57866: ST_TO_ADDR
// animal := CreateHuman ;
57867: LD_ADDR_VAR 0 12
57871: PUSH
57872: CALL_OW 44
57876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57877: LD_VAR 0 12
57881: PPUSH
57882: LD_VAR 0 8
57886: PPUSH
57887: LD_INT 0
57889: PPUSH
57890: CALL 59962 0 3
// end ;
57894: GO 57848
57896: POP
57897: POP
// if birds then
57898: LD_VAR 0 1
57902: IFFALSE 57969
// for i = 1 to birds do
57904: LD_ADDR_VAR 0 11
57908: PUSH
57909: DOUBLE
57910: LD_INT 1
57912: DEC
57913: ST_TO_ADDR
57914: LD_VAR 0 1
57918: PUSH
57919: FOR_TO
57920: IFFALSE 57967
// begin hc_class = 18 ;
57922: LD_ADDR_OWVAR 28
57926: PUSH
57927: LD_INT 18
57929: ST_TO_ADDR
// hc_gallery =  ;
57930: LD_ADDR_OWVAR 33
57934: PUSH
57935: LD_STRING 
57937: ST_TO_ADDR
// animal := CreateHuman ;
57938: LD_ADDR_VAR 0 12
57942: PUSH
57943: CALL_OW 44
57947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57948: LD_VAR 0 12
57952: PPUSH
57953: LD_VAR 0 8
57957: PPUSH
57958: LD_INT 0
57960: PPUSH
57961: CALL 59962 0 3
// end ;
57965: GO 57919
57967: POP
57968: POP
// if tigers then
57969: LD_VAR 0 2
57973: IFFALSE 58057
// for i = 1 to tigers do
57975: LD_ADDR_VAR 0 11
57979: PUSH
57980: DOUBLE
57981: LD_INT 1
57983: DEC
57984: ST_TO_ADDR
57985: LD_VAR 0 2
57989: PUSH
57990: FOR_TO
57991: IFFALSE 58055
// begin hc_class = class_tiger ;
57993: LD_ADDR_OWVAR 28
57997: PUSH
57998: LD_INT 14
58000: ST_TO_ADDR
// hc_gallery =  ;
58001: LD_ADDR_OWVAR 33
58005: PUSH
58006: LD_STRING 
58008: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58009: LD_ADDR_OWVAR 35
58013: PUSH
58014: LD_INT 7
58016: NEG
58017: PPUSH
58018: LD_INT 7
58020: PPUSH
58021: CALL_OW 12
58025: ST_TO_ADDR
// animal := CreateHuman ;
58026: LD_ADDR_VAR 0 12
58030: PUSH
58031: CALL_OW 44
58035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58036: LD_VAR 0 12
58040: PPUSH
58041: LD_VAR 0 8
58045: PPUSH
58046: LD_INT 0
58048: PPUSH
58049: CALL 59962 0 3
// end ;
58053: GO 57990
58055: POP
58056: POP
// if apemans then
58057: LD_VAR 0 3
58061: IFFALSE 58184
// for i = 1 to apemans do
58063: LD_ADDR_VAR 0 11
58067: PUSH
58068: DOUBLE
58069: LD_INT 1
58071: DEC
58072: ST_TO_ADDR
58073: LD_VAR 0 3
58077: PUSH
58078: FOR_TO
58079: IFFALSE 58182
// begin hc_class = class_apeman ;
58081: LD_ADDR_OWVAR 28
58085: PUSH
58086: LD_INT 12
58088: ST_TO_ADDR
// hc_gallery =  ;
58089: LD_ADDR_OWVAR 33
58093: PUSH
58094: LD_STRING 
58096: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58097: LD_ADDR_OWVAR 35
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PPUSH
58106: LD_INT 2
58108: PPUSH
58109: CALL_OW 12
58113: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58114: LD_ADDR_OWVAR 31
58118: PUSH
58119: LD_INT 1
58121: PPUSH
58122: LD_INT 3
58124: PPUSH
58125: CALL_OW 12
58129: PUSH
58130: LD_INT 1
58132: PPUSH
58133: LD_INT 3
58135: PPUSH
58136: CALL_OW 12
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: ST_TO_ADDR
// animal := CreateHuman ;
58153: LD_ADDR_VAR 0 12
58157: PUSH
58158: CALL_OW 44
58162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58163: LD_VAR 0 12
58167: PPUSH
58168: LD_VAR 0 8
58172: PPUSH
58173: LD_INT 0
58175: PPUSH
58176: CALL 59962 0 3
// end ;
58180: GO 58078
58182: POP
58183: POP
// if enchidnas then
58184: LD_VAR 0 4
58188: IFFALSE 58255
// for i = 1 to enchidnas do
58190: LD_ADDR_VAR 0 11
58194: PUSH
58195: DOUBLE
58196: LD_INT 1
58198: DEC
58199: ST_TO_ADDR
58200: LD_VAR 0 4
58204: PUSH
58205: FOR_TO
58206: IFFALSE 58253
// begin hc_class = 13 ;
58208: LD_ADDR_OWVAR 28
58212: PUSH
58213: LD_INT 13
58215: ST_TO_ADDR
// hc_gallery =  ;
58216: LD_ADDR_OWVAR 33
58220: PUSH
58221: LD_STRING 
58223: ST_TO_ADDR
// animal := CreateHuman ;
58224: LD_ADDR_VAR 0 12
58228: PUSH
58229: CALL_OW 44
58233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58234: LD_VAR 0 12
58238: PPUSH
58239: LD_VAR 0 8
58243: PPUSH
58244: LD_INT 0
58246: PPUSH
58247: CALL 59962 0 3
// end ;
58251: GO 58205
58253: POP
58254: POP
// if fishes then
58255: LD_VAR 0 7
58259: IFFALSE 58326
// for i = 1 to fishes do
58261: LD_ADDR_VAR 0 11
58265: PUSH
58266: DOUBLE
58267: LD_INT 1
58269: DEC
58270: ST_TO_ADDR
58271: LD_VAR 0 7
58275: PUSH
58276: FOR_TO
58277: IFFALSE 58324
// begin hc_class = 20 ;
58279: LD_ADDR_OWVAR 28
58283: PUSH
58284: LD_INT 20
58286: ST_TO_ADDR
// hc_gallery =  ;
58287: LD_ADDR_OWVAR 33
58291: PUSH
58292: LD_STRING 
58294: ST_TO_ADDR
// animal := CreateHuman ;
58295: LD_ADDR_VAR 0 12
58299: PUSH
58300: CALL_OW 44
58304: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58305: LD_VAR 0 12
58309: PPUSH
58310: LD_VAR 0 9
58314: PPUSH
58315: LD_INT 0
58317: PPUSH
58318: CALL 59962 0 3
// end ;
58322: GO 58276
58324: POP
58325: POP
// end ;
58326: LD_VAR 0 10
58330: RET
// export function WantHeal ( sci , unit ) ; begin
58331: LD_INT 0
58333: PPUSH
// if GetTaskList ( sci ) > 0 then
58334: LD_VAR 0 1
58338: PPUSH
58339: CALL_OW 437
58343: PUSH
58344: LD_INT 0
58346: GREATER
58347: IFFALSE 58417
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 437
58358: PUSH
58359: LD_INT 1
58361: ARRAY
58362: PUSH
58363: LD_INT 1
58365: ARRAY
58366: PUSH
58367: LD_STRING l
58369: EQUAL
58370: PUSH
58371: LD_VAR 0 1
58375: PPUSH
58376: CALL_OW 437
58380: PUSH
58381: LD_INT 1
58383: ARRAY
58384: PUSH
58385: LD_INT 4
58387: ARRAY
58388: PUSH
58389: LD_VAR 0 2
58393: EQUAL
58394: AND
58395: IFFALSE 58407
// result := true else
58397: LD_ADDR_VAR 0 3
58401: PUSH
58402: LD_INT 1
58404: ST_TO_ADDR
58405: GO 58415
// result := false ;
58407: LD_ADDR_VAR 0 3
58411: PUSH
58412: LD_INT 0
58414: ST_TO_ADDR
// end else
58415: GO 58425
// result := false ;
58417: LD_ADDR_VAR 0 3
58421: PUSH
58422: LD_INT 0
58424: ST_TO_ADDR
// end ;
58425: LD_VAR 0 3
58429: RET
// export function HealTarget ( sci ) ; begin
58430: LD_INT 0
58432: PPUSH
// if not sci then
58433: LD_VAR 0 1
58437: NOT
58438: IFFALSE 58442
// exit ;
58440: GO 58507
// result := 0 ;
58442: LD_ADDR_VAR 0 2
58446: PUSH
58447: LD_INT 0
58449: ST_TO_ADDR
// if GetTaskList ( sci ) then
58450: LD_VAR 0 1
58454: PPUSH
58455: CALL_OW 437
58459: IFFALSE 58507
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58461: LD_VAR 0 1
58465: PPUSH
58466: CALL_OW 437
58470: PUSH
58471: LD_INT 1
58473: ARRAY
58474: PUSH
58475: LD_INT 1
58477: ARRAY
58478: PUSH
58479: LD_STRING l
58481: EQUAL
58482: IFFALSE 58507
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58484: LD_ADDR_VAR 0 2
58488: PUSH
58489: LD_VAR 0 1
58493: PPUSH
58494: CALL_OW 437
58498: PUSH
58499: LD_INT 1
58501: ARRAY
58502: PUSH
58503: LD_INT 4
58505: ARRAY
58506: ST_TO_ADDR
// end ;
58507: LD_VAR 0 2
58511: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58512: LD_INT 0
58514: PPUSH
58515: PPUSH
58516: PPUSH
58517: PPUSH
// if not base_units then
58518: LD_VAR 0 1
58522: NOT
58523: IFFALSE 58527
// exit ;
58525: GO 58614
// result := false ;
58527: LD_ADDR_VAR 0 2
58531: PUSH
58532: LD_INT 0
58534: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58535: LD_ADDR_VAR 0 5
58539: PUSH
58540: LD_VAR 0 1
58544: PPUSH
58545: LD_INT 21
58547: PUSH
58548: LD_INT 3
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PPUSH
58555: CALL_OW 72
58559: ST_TO_ADDR
// if not tmp then
58560: LD_VAR 0 5
58564: NOT
58565: IFFALSE 58569
// exit ;
58567: GO 58614
// for i in tmp do
58569: LD_ADDR_VAR 0 3
58573: PUSH
58574: LD_VAR 0 5
58578: PUSH
58579: FOR_IN
58580: IFFALSE 58612
// begin result := EnemyInRange ( i , 22 ) ;
58582: LD_ADDR_VAR 0 2
58586: PUSH
58587: LD_VAR 0 3
58591: PPUSH
58592: LD_INT 22
58594: PPUSH
58595: CALL 56850 0 2
58599: ST_TO_ADDR
// if result then
58600: LD_VAR 0 2
58604: IFFALSE 58610
// exit ;
58606: POP
58607: POP
58608: GO 58614
// end ;
58610: GO 58579
58612: POP
58613: POP
// end ;
58614: LD_VAR 0 2
58618: RET
// export function FilterByTag ( units , tag ) ; begin
58619: LD_INT 0
58621: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58622: LD_ADDR_VAR 0 3
58626: PUSH
58627: LD_VAR 0 1
58631: PPUSH
58632: LD_INT 120
58634: PUSH
58635: LD_VAR 0 2
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PPUSH
58644: CALL_OW 72
58648: ST_TO_ADDR
// end ;
58649: LD_VAR 0 3
58653: RET
// export function IsDriver ( un ) ; begin
58654: LD_INT 0
58656: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58657: LD_ADDR_VAR 0 2
58661: PUSH
58662: LD_VAR 0 1
58666: PUSH
58667: LD_INT 55
58669: PUSH
58670: EMPTY
58671: LIST
58672: PPUSH
58673: CALL_OW 69
58677: IN
58678: ST_TO_ADDR
// end ;
58679: LD_VAR 0 2
58683: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58684: LD_INT 0
58686: PPUSH
58687: PPUSH
// list := [ ] ;
58688: LD_ADDR_VAR 0 5
58692: PUSH
58693: EMPTY
58694: ST_TO_ADDR
// case d of 0 :
58695: LD_VAR 0 3
58699: PUSH
58700: LD_INT 0
58702: DOUBLE
58703: EQUAL
58704: IFTRUE 58708
58706: GO 58841
58708: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58709: LD_ADDR_VAR 0 5
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: LD_INT 4
58721: MINUS
58722: PUSH
58723: LD_VAR 0 2
58727: PUSH
58728: LD_INT 4
58730: MINUS
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: LIST
58739: PUSH
58740: LD_VAR 0 1
58744: PUSH
58745: LD_INT 3
58747: MINUS
58748: PUSH
58749: LD_VAR 0 2
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: PUSH
58762: LD_VAR 0 1
58766: PUSH
58767: LD_INT 4
58769: PLUS
58770: PUSH
58771: LD_VAR 0 2
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: PUSH
58784: LD_VAR 0 1
58788: PUSH
58789: LD_INT 3
58791: PLUS
58792: PUSH
58793: LD_VAR 0 2
58797: PUSH
58798: LD_INT 3
58800: PLUS
58801: PUSH
58802: LD_INT 5
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: PUSH
58810: LD_VAR 0 1
58814: PUSH
58815: LD_VAR 0 2
58819: PUSH
58820: LD_INT 4
58822: PLUS
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// end ; 1 :
58839: GO 59539
58841: LD_INT 1
58843: DOUBLE
58844: EQUAL
58845: IFTRUE 58849
58847: GO 58982
58849: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58850: LD_ADDR_VAR 0 5
58854: PUSH
58855: LD_VAR 0 1
58859: PUSH
58860: LD_VAR 0 2
58864: PUSH
58865: LD_INT 4
58867: MINUS
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 1
58881: PUSH
58882: LD_INT 3
58884: MINUS
58885: PUSH
58886: LD_VAR 0 2
58890: PUSH
58891: LD_INT 3
58893: MINUS
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: PUSH
58903: LD_VAR 0 1
58907: PUSH
58908: LD_INT 4
58910: MINUS
58911: PUSH
58912: LD_VAR 0 2
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: PUSH
58925: LD_VAR 0 1
58929: PUSH
58930: LD_VAR 0 2
58934: PUSH
58935: LD_INT 3
58937: PLUS
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: LIST
58946: PUSH
58947: LD_VAR 0 1
58951: PUSH
58952: LD_INT 4
58954: PLUS
58955: PUSH
58956: LD_VAR 0 2
58960: PUSH
58961: LD_INT 4
58963: PLUS
58964: PUSH
58965: LD_INT 5
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: ST_TO_ADDR
// end ; 2 :
58980: GO 59539
58982: LD_INT 2
58984: DOUBLE
58985: EQUAL
58986: IFTRUE 58990
58988: GO 59119
58990: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58991: LD_ADDR_VAR 0 5
58995: PUSH
58996: LD_VAR 0 1
59000: PUSH
59001: LD_VAR 0 2
59005: PUSH
59006: LD_INT 3
59008: MINUS
59009: PUSH
59010: LD_INT 3
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: PUSH
59018: LD_VAR 0 1
59022: PUSH
59023: LD_INT 4
59025: PLUS
59026: PUSH
59027: LD_VAR 0 2
59031: PUSH
59032: LD_INT 4
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: PUSH
59040: LD_VAR 0 1
59044: PUSH
59045: LD_VAR 0 2
59049: PUSH
59050: LD_INT 4
59052: PLUS
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: PUSH
59062: LD_VAR 0 1
59066: PUSH
59067: LD_INT 3
59069: MINUS
59070: PUSH
59071: LD_VAR 0 2
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: LIST
59083: PUSH
59084: LD_VAR 0 1
59088: PUSH
59089: LD_INT 4
59091: MINUS
59092: PUSH
59093: LD_VAR 0 2
59097: PUSH
59098: LD_INT 4
59100: MINUS
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// end ; 3 :
59117: GO 59539
59119: LD_INT 3
59121: DOUBLE
59122: EQUAL
59123: IFTRUE 59127
59125: GO 59260
59127: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59128: LD_ADDR_VAR 0 5
59132: PUSH
59133: LD_VAR 0 1
59137: PUSH
59138: LD_INT 3
59140: PLUS
59141: PUSH
59142: LD_VAR 0 2
59146: PUSH
59147: LD_INT 4
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: PUSH
59155: LD_VAR 0 1
59159: PUSH
59160: LD_INT 4
59162: PLUS
59163: PUSH
59164: LD_VAR 0 2
59168: PUSH
59169: LD_INT 4
59171: PLUS
59172: PUSH
59173: LD_INT 5
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: PUSH
59181: LD_VAR 0 1
59185: PUSH
59186: LD_INT 4
59188: MINUS
59189: PUSH
59190: LD_VAR 0 2
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: PUSH
59203: LD_VAR 0 1
59207: PUSH
59208: LD_VAR 0 2
59212: PUSH
59213: LD_INT 4
59215: MINUS
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: PUSH
59225: LD_VAR 0 1
59229: PUSH
59230: LD_INT 3
59232: MINUS
59233: PUSH
59234: LD_VAR 0 2
59238: PUSH
59239: LD_INT 3
59241: MINUS
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: ST_TO_ADDR
// end ; 4 :
59258: GO 59539
59260: LD_INT 4
59262: DOUBLE
59263: EQUAL
59264: IFTRUE 59268
59266: GO 59401
59268: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59269: LD_ADDR_VAR 0 5
59273: PUSH
59274: LD_VAR 0 1
59278: PUSH
59279: LD_VAR 0 2
59283: PUSH
59284: LD_INT 4
59286: PLUS
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: LD_VAR 0 1
59300: PUSH
59301: LD_INT 3
59303: PLUS
59304: PUSH
59305: LD_VAR 0 2
59309: PUSH
59310: LD_INT 3
59312: PLUS
59313: PUSH
59314: LD_INT 5
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: PUSH
59322: LD_VAR 0 1
59326: PUSH
59327: LD_INT 4
59329: PLUS
59330: PUSH
59331: LD_VAR 0 2
59335: PUSH
59336: LD_INT 4
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: PUSH
59344: LD_VAR 0 1
59348: PUSH
59349: LD_VAR 0 2
59353: PUSH
59354: LD_INT 3
59356: MINUS
59357: PUSH
59358: LD_INT 3
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: PUSH
59366: LD_VAR 0 1
59370: PUSH
59371: LD_INT 4
59373: MINUS
59374: PUSH
59375: LD_VAR 0 2
59379: PUSH
59380: LD_INT 4
59382: MINUS
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: ST_TO_ADDR
// end ; 5 :
59399: GO 59539
59401: LD_INT 5
59403: DOUBLE
59404: EQUAL
59405: IFTRUE 59409
59407: GO 59538
59409: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59410: LD_ADDR_VAR 0 5
59414: PUSH
59415: LD_VAR 0 1
59419: PUSH
59420: LD_INT 4
59422: MINUS
59423: PUSH
59424: LD_VAR 0 2
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: PUSH
59437: LD_VAR 0 1
59441: PUSH
59442: LD_VAR 0 2
59446: PUSH
59447: LD_INT 4
59449: MINUS
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: PUSH
59459: LD_VAR 0 1
59463: PUSH
59464: LD_INT 4
59466: PLUS
59467: PUSH
59468: LD_VAR 0 2
59472: PUSH
59473: LD_INT 4
59475: PLUS
59476: PUSH
59477: LD_INT 5
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: LIST
59484: PUSH
59485: LD_VAR 0 1
59489: PUSH
59490: LD_INT 3
59492: PLUS
59493: PUSH
59494: LD_VAR 0 2
59498: PUSH
59499: LD_INT 4
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: PUSH
59507: LD_VAR 0 1
59511: PUSH
59512: LD_VAR 0 2
59516: PUSH
59517: LD_INT 3
59519: PLUS
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: LIST
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: ST_TO_ADDR
// end ; end ;
59536: GO 59539
59538: POP
// result := list ;
59539: LD_ADDR_VAR 0 4
59543: PUSH
59544: LD_VAR 0 5
59548: ST_TO_ADDR
// end ;
59549: LD_VAR 0 4
59553: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59554: LD_INT 0
59556: PPUSH
59557: PPUSH
59558: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59559: LD_VAR 0 1
59563: NOT
59564: PUSH
59565: LD_VAR 0 2
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: IN
59588: NOT
59589: OR
59590: IFFALSE 59594
// exit ;
59592: GO 59686
// tmp := [ ] ;
59594: LD_ADDR_VAR 0 5
59598: PUSH
59599: EMPTY
59600: ST_TO_ADDR
// for i in units do
59601: LD_ADDR_VAR 0 4
59605: PUSH
59606: LD_VAR 0 1
59610: PUSH
59611: FOR_IN
59612: IFFALSE 59655
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59614: LD_ADDR_VAR 0 5
59618: PUSH
59619: LD_VAR 0 5
59623: PPUSH
59624: LD_VAR 0 5
59628: PUSH
59629: LD_INT 1
59631: PLUS
59632: PPUSH
59633: LD_VAR 0 4
59637: PPUSH
59638: LD_VAR 0 2
59642: PPUSH
59643: CALL_OW 259
59647: PPUSH
59648: CALL_OW 2
59652: ST_TO_ADDR
59653: GO 59611
59655: POP
59656: POP
// if not tmp then
59657: LD_VAR 0 5
59661: NOT
59662: IFFALSE 59666
// exit ;
59664: GO 59686
// result := SortListByListDesc ( units , tmp ) ;
59666: LD_ADDR_VAR 0 3
59670: PUSH
59671: LD_VAR 0 1
59675: PPUSH
59676: LD_VAR 0 5
59680: PPUSH
59681: CALL_OW 77
59685: ST_TO_ADDR
// end ;
59686: LD_VAR 0 3
59690: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59691: LD_INT 0
59693: PPUSH
59694: PPUSH
59695: PPUSH
// result := false ;
59696: LD_ADDR_VAR 0 3
59700: PUSH
59701: LD_INT 0
59703: ST_TO_ADDR
// x := GetX ( building ) ;
59704: LD_ADDR_VAR 0 4
59708: PUSH
59709: LD_VAR 0 2
59713: PPUSH
59714: CALL_OW 250
59718: ST_TO_ADDR
// y := GetY ( building ) ;
59719: LD_ADDR_VAR 0 5
59723: PUSH
59724: LD_VAR 0 2
59728: PPUSH
59729: CALL_OW 251
59733: ST_TO_ADDR
// if not building or not x or not y then
59734: LD_VAR 0 2
59738: NOT
59739: PUSH
59740: LD_VAR 0 4
59744: NOT
59745: OR
59746: PUSH
59747: LD_VAR 0 5
59751: NOT
59752: OR
59753: IFFALSE 59757
// exit ;
59755: GO 59849
// if GetTaskList ( unit ) then
59757: LD_VAR 0 1
59761: PPUSH
59762: CALL_OW 437
59766: IFFALSE 59849
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59768: LD_STRING e
59770: PUSH
59771: LD_VAR 0 1
59775: PPUSH
59776: CALL_OW 437
59780: PUSH
59781: LD_INT 1
59783: ARRAY
59784: PUSH
59785: LD_INT 1
59787: ARRAY
59788: EQUAL
59789: PUSH
59790: LD_VAR 0 4
59794: PUSH
59795: LD_VAR 0 1
59799: PPUSH
59800: CALL_OW 437
59804: PUSH
59805: LD_INT 1
59807: ARRAY
59808: PUSH
59809: LD_INT 2
59811: ARRAY
59812: EQUAL
59813: AND
59814: PUSH
59815: LD_VAR 0 5
59819: PUSH
59820: LD_VAR 0 1
59824: PPUSH
59825: CALL_OW 437
59829: PUSH
59830: LD_INT 1
59832: ARRAY
59833: PUSH
59834: LD_INT 3
59836: ARRAY
59837: EQUAL
59838: AND
59839: IFFALSE 59849
// result := true end ;
59841: LD_ADDR_VAR 0 3
59845: PUSH
59846: LD_INT 1
59848: ST_TO_ADDR
// end ;
59849: LD_VAR 0 3
59853: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59854: LD_INT 0
59856: PPUSH
// result := false ;
59857: LD_ADDR_VAR 0 4
59861: PUSH
59862: LD_INT 0
59864: ST_TO_ADDR
// if GetTaskList ( unit ) then
59865: LD_VAR 0 1
59869: PPUSH
59870: CALL_OW 437
59874: IFFALSE 59957
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59876: LD_STRING M
59878: PUSH
59879: LD_VAR 0 1
59883: PPUSH
59884: CALL_OW 437
59888: PUSH
59889: LD_INT 1
59891: ARRAY
59892: PUSH
59893: LD_INT 1
59895: ARRAY
59896: EQUAL
59897: PUSH
59898: LD_VAR 0 2
59902: PUSH
59903: LD_VAR 0 1
59907: PPUSH
59908: CALL_OW 437
59912: PUSH
59913: LD_INT 1
59915: ARRAY
59916: PUSH
59917: LD_INT 2
59919: ARRAY
59920: EQUAL
59921: AND
59922: PUSH
59923: LD_VAR 0 3
59927: PUSH
59928: LD_VAR 0 1
59932: PPUSH
59933: CALL_OW 437
59937: PUSH
59938: LD_INT 1
59940: ARRAY
59941: PUSH
59942: LD_INT 3
59944: ARRAY
59945: EQUAL
59946: AND
59947: IFFALSE 59957
// result := true ;
59949: LD_ADDR_VAR 0 4
59953: PUSH
59954: LD_INT 1
59956: ST_TO_ADDR
// end ; end ;
59957: LD_VAR 0 4
59961: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59962: LD_INT 0
59964: PPUSH
59965: PPUSH
59966: PPUSH
59967: PPUSH
// if not unit or not area then
59968: LD_VAR 0 1
59972: NOT
59973: PUSH
59974: LD_VAR 0 2
59978: NOT
59979: OR
59980: IFFALSE 59984
// exit ;
59982: GO 60148
// tmp := AreaToList ( area , i ) ;
59984: LD_ADDR_VAR 0 6
59988: PUSH
59989: LD_VAR 0 2
59993: PPUSH
59994: LD_VAR 0 5
59998: PPUSH
59999: CALL_OW 517
60003: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60004: LD_ADDR_VAR 0 5
60008: PUSH
60009: DOUBLE
60010: LD_INT 1
60012: DEC
60013: ST_TO_ADDR
60014: LD_VAR 0 6
60018: PUSH
60019: LD_INT 1
60021: ARRAY
60022: PUSH
60023: FOR_TO
60024: IFFALSE 60146
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60026: LD_ADDR_VAR 0 7
60030: PUSH
60031: LD_VAR 0 6
60035: PUSH
60036: LD_INT 1
60038: ARRAY
60039: PUSH
60040: LD_VAR 0 5
60044: ARRAY
60045: PUSH
60046: LD_VAR 0 6
60050: PUSH
60051: LD_INT 2
60053: ARRAY
60054: PUSH
60055: LD_VAR 0 5
60059: ARRAY
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60065: LD_VAR 0 7
60069: PUSH
60070: LD_INT 1
60072: ARRAY
60073: PPUSH
60074: LD_VAR 0 7
60078: PUSH
60079: LD_INT 2
60081: ARRAY
60082: PPUSH
60083: CALL_OW 428
60087: PUSH
60088: LD_INT 0
60090: EQUAL
60091: IFFALSE 60144
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60093: LD_VAR 0 1
60097: PPUSH
60098: LD_VAR 0 7
60102: PUSH
60103: LD_INT 1
60105: ARRAY
60106: PPUSH
60107: LD_VAR 0 7
60111: PUSH
60112: LD_INT 2
60114: ARRAY
60115: PPUSH
60116: LD_VAR 0 3
60120: PPUSH
60121: CALL_OW 48
// result := IsPlaced ( unit ) ;
60125: LD_ADDR_VAR 0 4
60129: PUSH
60130: LD_VAR 0 1
60134: PPUSH
60135: CALL_OW 305
60139: ST_TO_ADDR
// exit ;
60140: POP
60141: POP
60142: GO 60148
// end ; end ;
60144: GO 60023
60146: POP
60147: POP
// end ;
60148: LD_VAR 0 4
60152: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60153: LD_INT 0
60155: PPUSH
60156: PPUSH
60157: PPUSH
// if not side or side > 8 then
60158: LD_VAR 0 1
60162: NOT
60163: PUSH
60164: LD_VAR 0 1
60168: PUSH
60169: LD_INT 8
60171: GREATER
60172: OR
60173: IFFALSE 60177
// exit ;
60175: GO 60364
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60177: LD_ADDR_VAR 0 4
60181: PUSH
60182: LD_INT 22
60184: PUSH
60185: LD_VAR 0 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 21
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PPUSH
60208: CALL_OW 69
60212: ST_TO_ADDR
// if not tmp then
60213: LD_VAR 0 4
60217: NOT
60218: IFFALSE 60222
// exit ;
60220: GO 60364
// enable_addtolog := true ;
60222: LD_ADDR_OWVAR 81
60226: PUSH
60227: LD_INT 1
60229: ST_TO_ADDR
// AddToLog ( [ ) ;
60230: LD_STRING [
60232: PPUSH
60233: CALL_OW 561
// for i in tmp do
60237: LD_ADDR_VAR 0 3
60241: PUSH
60242: LD_VAR 0 4
60246: PUSH
60247: FOR_IN
60248: IFFALSE 60355
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60250: LD_STRING [
60252: PUSH
60253: LD_VAR 0 3
60257: PPUSH
60258: CALL_OW 266
60262: STR
60263: PUSH
60264: LD_STRING , 
60266: STR
60267: PUSH
60268: LD_VAR 0 3
60272: PPUSH
60273: CALL_OW 250
60277: STR
60278: PUSH
60279: LD_STRING , 
60281: STR
60282: PUSH
60283: LD_VAR 0 3
60287: PPUSH
60288: CALL_OW 251
60292: STR
60293: PUSH
60294: LD_STRING , 
60296: STR
60297: PUSH
60298: LD_VAR 0 3
60302: PPUSH
60303: CALL_OW 254
60307: STR
60308: PUSH
60309: LD_STRING , 
60311: STR
60312: PUSH
60313: LD_VAR 0 3
60317: PPUSH
60318: LD_INT 1
60320: PPUSH
60321: CALL_OW 268
60325: STR
60326: PUSH
60327: LD_STRING , 
60329: STR
60330: PUSH
60331: LD_VAR 0 3
60335: PPUSH
60336: LD_INT 2
60338: PPUSH
60339: CALL_OW 268
60343: STR
60344: PUSH
60345: LD_STRING ],
60347: STR
60348: PPUSH
60349: CALL_OW 561
// end ;
60353: GO 60247
60355: POP
60356: POP
// AddToLog ( ]; ) ;
60357: LD_STRING ];
60359: PPUSH
60360: CALL_OW 561
// end ;
60364: LD_VAR 0 2
60368: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60369: LD_INT 0
60371: PPUSH
60372: PPUSH
60373: PPUSH
60374: PPUSH
60375: PPUSH
// if not area or not rate or not max then
60376: LD_VAR 0 1
60380: NOT
60381: PUSH
60382: LD_VAR 0 2
60386: NOT
60387: OR
60388: PUSH
60389: LD_VAR 0 4
60393: NOT
60394: OR
60395: IFFALSE 60399
// exit ;
60397: GO 60588
// while 1 do
60399: LD_INT 1
60401: IFFALSE 60588
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60403: LD_ADDR_VAR 0 9
60407: PUSH
60408: LD_VAR 0 1
60412: PPUSH
60413: LD_INT 1
60415: PPUSH
60416: CALL_OW 287
60420: PUSH
60421: LD_INT 10
60423: MUL
60424: ST_TO_ADDR
// r := rate / 10 ;
60425: LD_ADDR_VAR 0 7
60429: PUSH
60430: LD_VAR 0 2
60434: PUSH
60435: LD_INT 10
60437: DIVREAL
60438: ST_TO_ADDR
// time := 1 1$00 ;
60439: LD_ADDR_VAR 0 8
60443: PUSH
60444: LD_INT 2100
60446: ST_TO_ADDR
// if amount < min then
60447: LD_VAR 0 9
60451: PUSH
60452: LD_VAR 0 3
60456: LESS
60457: IFFALSE 60475
// r := r * 2 else
60459: LD_ADDR_VAR 0 7
60463: PUSH
60464: LD_VAR 0 7
60468: PUSH
60469: LD_INT 2
60471: MUL
60472: ST_TO_ADDR
60473: GO 60501
// if amount > max then
60475: LD_VAR 0 9
60479: PUSH
60480: LD_VAR 0 4
60484: GREATER
60485: IFFALSE 60501
// r := r / 2 ;
60487: LD_ADDR_VAR 0 7
60491: PUSH
60492: LD_VAR 0 7
60496: PUSH
60497: LD_INT 2
60499: DIVREAL
60500: ST_TO_ADDR
// time := time / r ;
60501: LD_ADDR_VAR 0 8
60505: PUSH
60506: LD_VAR 0 8
60510: PUSH
60511: LD_VAR 0 7
60515: DIVREAL
60516: ST_TO_ADDR
// if time < 0 then
60517: LD_VAR 0 8
60521: PUSH
60522: LD_INT 0
60524: LESS
60525: IFFALSE 60542
// time := time * - 1 ;
60527: LD_ADDR_VAR 0 8
60531: PUSH
60532: LD_VAR 0 8
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: MUL
60541: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60542: LD_VAR 0 8
60546: PUSH
60547: LD_INT 35
60549: PPUSH
60550: LD_INT 875
60552: PPUSH
60553: CALL_OW 12
60557: PLUS
60558: PPUSH
60559: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60563: LD_INT 1
60565: PPUSH
60566: LD_INT 5
60568: PPUSH
60569: CALL_OW 12
60573: PPUSH
60574: LD_VAR 0 1
60578: PPUSH
60579: LD_INT 1
60581: PPUSH
60582: CALL_OW 55
// end ;
60586: GO 60399
// end ;
60588: LD_VAR 0 5
60592: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60593: LD_INT 0
60595: PPUSH
60596: PPUSH
60597: PPUSH
60598: PPUSH
60599: PPUSH
60600: PPUSH
60601: PPUSH
60602: PPUSH
// if not turrets or not factories then
60603: LD_VAR 0 1
60607: NOT
60608: PUSH
60609: LD_VAR 0 2
60613: NOT
60614: OR
60615: IFFALSE 60619
// exit ;
60617: GO 60926
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60619: LD_ADDR_VAR 0 10
60623: PUSH
60624: LD_INT 5
60626: PUSH
60627: LD_INT 6
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: LD_INT 4
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: LD_INT 5
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 24
60661: PUSH
60662: LD_INT 25
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 23
60671: PUSH
60672: LD_INT 27
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 42
60685: PUSH
60686: LD_INT 43
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 44
60695: PUSH
60696: LD_INT 46
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 45
60705: PUSH
60706: LD_INT 47
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: ST_TO_ADDR
// result := [ ] ;
60723: LD_ADDR_VAR 0 3
60727: PUSH
60728: EMPTY
60729: ST_TO_ADDR
// for i in turrets do
60730: LD_ADDR_VAR 0 4
60734: PUSH
60735: LD_VAR 0 1
60739: PUSH
60740: FOR_IN
60741: IFFALSE 60924
// begin nat := GetNation ( i ) ;
60743: LD_ADDR_VAR 0 7
60747: PUSH
60748: LD_VAR 0 4
60752: PPUSH
60753: CALL_OW 248
60757: ST_TO_ADDR
// weapon := 0 ;
60758: LD_ADDR_VAR 0 8
60762: PUSH
60763: LD_INT 0
60765: ST_TO_ADDR
// if not nat then
60766: LD_VAR 0 7
60770: NOT
60771: IFFALSE 60775
// continue ;
60773: GO 60740
// for j in list [ nat ] do
60775: LD_ADDR_VAR 0 5
60779: PUSH
60780: LD_VAR 0 10
60784: PUSH
60785: LD_VAR 0 7
60789: ARRAY
60790: PUSH
60791: FOR_IN
60792: IFFALSE 60833
// if GetBWeapon ( i ) = j [ 1 ] then
60794: LD_VAR 0 4
60798: PPUSH
60799: CALL_OW 269
60803: PUSH
60804: LD_VAR 0 5
60808: PUSH
60809: LD_INT 1
60811: ARRAY
60812: EQUAL
60813: IFFALSE 60831
// begin weapon := j [ 2 ] ;
60815: LD_ADDR_VAR 0 8
60819: PUSH
60820: LD_VAR 0 5
60824: PUSH
60825: LD_INT 2
60827: ARRAY
60828: ST_TO_ADDR
// break ;
60829: GO 60833
// end ;
60831: GO 60791
60833: POP
60834: POP
// if not weapon then
60835: LD_VAR 0 8
60839: NOT
60840: IFFALSE 60844
// continue ;
60842: GO 60740
// for k in factories do
60844: LD_ADDR_VAR 0 6
60848: PUSH
60849: LD_VAR 0 2
60853: PUSH
60854: FOR_IN
60855: IFFALSE 60920
// begin weapons := AvailableWeaponList ( k ) ;
60857: LD_ADDR_VAR 0 9
60861: PUSH
60862: LD_VAR 0 6
60866: PPUSH
60867: CALL_OW 478
60871: ST_TO_ADDR
// if not weapons then
60872: LD_VAR 0 9
60876: NOT
60877: IFFALSE 60881
// continue ;
60879: GO 60854
// if weapon in weapons then
60881: LD_VAR 0 8
60885: PUSH
60886: LD_VAR 0 9
60890: IN
60891: IFFALSE 60918
// begin result := [ i , weapon ] ;
60893: LD_ADDR_VAR 0 3
60897: PUSH
60898: LD_VAR 0 4
60902: PUSH
60903: LD_VAR 0 8
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: ST_TO_ADDR
// exit ;
60912: POP
60913: POP
60914: POP
60915: POP
60916: GO 60926
// end ; end ;
60918: GO 60854
60920: POP
60921: POP
// end ;
60922: GO 60740
60924: POP
60925: POP
// end ;
60926: LD_VAR 0 3
60930: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60931: LD_INT 0
60933: PPUSH
// if not side or side > 8 then
60934: LD_VAR 0 3
60938: NOT
60939: PUSH
60940: LD_VAR 0 3
60944: PUSH
60945: LD_INT 8
60947: GREATER
60948: OR
60949: IFFALSE 60953
// exit ;
60951: GO 61012
// if not range then
60953: LD_VAR 0 4
60957: NOT
60958: IFFALSE 60969
// range := - 12 ;
60960: LD_ADDR_VAR 0 4
60964: PUSH
60965: LD_INT 12
60967: NEG
60968: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60969: LD_VAR 0 1
60973: PPUSH
60974: LD_VAR 0 2
60978: PPUSH
60979: LD_VAR 0 3
60983: PPUSH
60984: LD_VAR 0 4
60988: PPUSH
60989: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60993: LD_VAR 0 1
60997: PPUSH
60998: LD_VAR 0 2
61002: PPUSH
61003: LD_VAR 0 3
61007: PPUSH
61008: CALL_OW 331
// end ;
61012: LD_VAR 0 5
61016: RET
// export function Video ( mode ) ; begin
61017: LD_INT 0
61019: PPUSH
// ingame_video = mode ;
61020: LD_ADDR_OWVAR 52
61024: PUSH
61025: LD_VAR 0 1
61029: ST_TO_ADDR
// interface_hidden = mode ;
61030: LD_ADDR_OWVAR 54
61034: PUSH
61035: LD_VAR 0 1
61039: ST_TO_ADDR
// end ;
61040: LD_VAR 0 2
61044: RET
// export function Join ( array , element ) ; begin
61045: LD_INT 0
61047: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61048: LD_ADDR_VAR 0 3
61052: PUSH
61053: LD_VAR 0 1
61057: PPUSH
61058: LD_VAR 0 1
61062: PUSH
61063: LD_INT 1
61065: PLUS
61066: PPUSH
61067: LD_VAR 0 2
61071: PPUSH
61072: CALL_OW 1
61076: ST_TO_ADDR
// end ;
61077: LD_VAR 0 3
61081: RET
// export function JoinUnion ( array , element ) ; begin
61082: LD_INT 0
61084: PPUSH
// result := array union element ;
61085: LD_ADDR_VAR 0 3
61089: PUSH
61090: LD_VAR 0 1
61094: PUSH
61095: LD_VAR 0 2
61099: UNION
61100: ST_TO_ADDR
// end ;
61101: LD_VAR 0 3
61105: RET
// export function GetBehemoths ( side ) ; begin
61106: LD_INT 0
61108: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61109: LD_ADDR_VAR 0 2
61113: PUSH
61114: LD_INT 22
61116: PUSH
61117: LD_VAR 0 1
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 31
61128: PUSH
61129: LD_INT 25
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PPUSH
61140: CALL_OW 69
61144: ST_TO_ADDR
// end ;
61145: LD_VAR 0 2
61149: RET
// export function Shuffle ( array ) ; var i , index ; begin
61150: LD_INT 0
61152: PPUSH
61153: PPUSH
61154: PPUSH
// result := [ ] ;
61155: LD_ADDR_VAR 0 2
61159: PUSH
61160: EMPTY
61161: ST_TO_ADDR
// if not array then
61162: LD_VAR 0 1
61166: NOT
61167: IFFALSE 61171
// exit ;
61169: GO 61270
// Randomize ;
61171: CALL_OW 10
// for i = array downto 1 do
61175: LD_ADDR_VAR 0 3
61179: PUSH
61180: DOUBLE
61181: LD_VAR 0 1
61185: INC
61186: ST_TO_ADDR
61187: LD_INT 1
61189: PUSH
61190: FOR_DOWNTO
61191: IFFALSE 61268
// begin index := rand ( 1 , array ) ;
61193: LD_ADDR_VAR 0 4
61197: PUSH
61198: LD_INT 1
61200: PPUSH
61201: LD_VAR 0 1
61205: PPUSH
61206: CALL_OW 12
61210: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61211: LD_ADDR_VAR 0 2
61215: PUSH
61216: LD_VAR 0 2
61220: PPUSH
61221: LD_VAR 0 2
61225: PUSH
61226: LD_INT 1
61228: PLUS
61229: PPUSH
61230: LD_VAR 0 1
61234: PUSH
61235: LD_VAR 0 4
61239: ARRAY
61240: PPUSH
61241: CALL_OW 2
61245: ST_TO_ADDR
// array := Delete ( array , index ) ;
61246: LD_ADDR_VAR 0 1
61250: PUSH
61251: LD_VAR 0 1
61255: PPUSH
61256: LD_VAR 0 4
61260: PPUSH
61261: CALL_OW 3
61265: ST_TO_ADDR
// end ;
61266: GO 61190
61268: POP
61269: POP
// end ;
61270: LD_VAR 0 2
61274: RET
// export function GetBaseMaterials ( base ) ; begin
61275: LD_INT 0
61277: PPUSH
// result := [ 0 , 0 , 0 ] ;
61278: LD_ADDR_VAR 0 2
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: ST_TO_ADDR
// if not base then
61297: LD_VAR 0 1
61301: NOT
61302: IFFALSE 61306
// exit ;
61304: GO 61355
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61306: LD_ADDR_VAR 0 2
61310: PUSH
61311: LD_VAR 0 1
61315: PPUSH
61316: LD_INT 1
61318: PPUSH
61319: CALL_OW 275
61323: PUSH
61324: LD_VAR 0 1
61328: PPUSH
61329: LD_INT 2
61331: PPUSH
61332: CALL_OW 275
61336: PUSH
61337: LD_VAR 0 1
61341: PPUSH
61342: LD_INT 3
61344: PPUSH
61345: CALL_OW 275
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: ST_TO_ADDR
// end ;
61355: LD_VAR 0 2
61359: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61360: LD_INT 0
61362: PPUSH
61363: PPUSH
// result := array ;
61364: LD_ADDR_VAR 0 3
61368: PUSH
61369: LD_VAR 0 1
61373: ST_TO_ADDR
// if size > 0 then
61374: LD_VAR 0 2
61378: PUSH
61379: LD_INT 0
61381: GREATER
61382: IFFALSE 61428
// for i := array downto size do
61384: LD_ADDR_VAR 0 4
61388: PUSH
61389: DOUBLE
61390: LD_VAR 0 1
61394: INC
61395: ST_TO_ADDR
61396: LD_VAR 0 2
61400: PUSH
61401: FOR_DOWNTO
61402: IFFALSE 61426
// result := Delete ( result , result ) ;
61404: LD_ADDR_VAR 0 3
61408: PUSH
61409: LD_VAR 0 3
61413: PPUSH
61414: LD_VAR 0 3
61418: PPUSH
61419: CALL_OW 3
61423: ST_TO_ADDR
61424: GO 61401
61426: POP
61427: POP
// end ;
61428: LD_VAR 0 3
61432: RET
// export function ComExit ( unit ) ; var tmp ; begin
61433: LD_INT 0
61435: PPUSH
61436: PPUSH
// if not IsInUnit ( unit ) then
61437: LD_VAR 0 1
61441: PPUSH
61442: CALL_OW 310
61446: NOT
61447: IFFALSE 61451
// exit ;
61449: GO 61511
// tmp := IsInUnit ( unit ) ;
61451: LD_ADDR_VAR 0 3
61455: PUSH
61456: LD_VAR 0 1
61460: PPUSH
61461: CALL_OW 310
61465: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61466: LD_VAR 0 3
61470: PPUSH
61471: CALL_OW 247
61475: PUSH
61476: LD_INT 2
61478: EQUAL
61479: IFFALSE 61492
// ComExitVehicle ( unit ) else
61481: LD_VAR 0 1
61485: PPUSH
61486: CALL_OW 121
61490: GO 61501
// ComExitBuilding ( unit ) ;
61492: LD_VAR 0 1
61496: PPUSH
61497: CALL_OW 122
// result := tmp ;
61501: LD_ADDR_VAR 0 2
61505: PUSH
61506: LD_VAR 0 3
61510: ST_TO_ADDR
// end ;
61511: LD_VAR 0 2
61515: RET
// export function ComExitAll ( units ) ; var i ; begin
61516: LD_INT 0
61518: PPUSH
61519: PPUSH
// if not units then
61520: LD_VAR 0 1
61524: NOT
61525: IFFALSE 61529
// exit ;
61527: GO 61555
// for i in units do
61529: LD_ADDR_VAR 0 3
61533: PUSH
61534: LD_VAR 0 1
61538: PUSH
61539: FOR_IN
61540: IFFALSE 61553
// ComExit ( i ) ;
61542: LD_VAR 0 3
61546: PPUSH
61547: CALL 61433 0 1
61551: GO 61539
61553: POP
61554: POP
// end ;
61555: LD_VAR 0 2
61559: RET
// export function ResetHc ; begin
61560: LD_INT 0
61562: PPUSH
// InitHc ;
61563: CALL_OW 19
// hc_importance := 0 ;
61567: LD_ADDR_OWVAR 32
61571: PUSH
61572: LD_INT 0
61574: ST_TO_ADDR
// end ;
61575: LD_VAR 0 1
61579: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61580: LD_INT 0
61582: PPUSH
61583: PPUSH
61584: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61585: LD_ADDR_VAR 0 6
61589: PUSH
61590: LD_VAR 0 1
61594: PUSH
61595: LD_VAR 0 3
61599: PLUS
61600: PUSH
61601: LD_INT 2
61603: DIV
61604: ST_TO_ADDR
// if _x < 0 then
61605: LD_VAR 0 6
61609: PUSH
61610: LD_INT 0
61612: LESS
61613: IFFALSE 61630
// _x := _x * - 1 ;
61615: LD_ADDR_VAR 0 6
61619: PUSH
61620: LD_VAR 0 6
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: MUL
61629: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61630: LD_ADDR_VAR 0 7
61634: PUSH
61635: LD_VAR 0 2
61639: PUSH
61640: LD_VAR 0 4
61644: PLUS
61645: PUSH
61646: LD_INT 2
61648: DIV
61649: ST_TO_ADDR
// if _y < 0 then
61650: LD_VAR 0 7
61654: PUSH
61655: LD_INT 0
61657: LESS
61658: IFFALSE 61675
// _y := _y * - 1 ;
61660: LD_ADDR_VAR 0 7
61664: PUSH
61665: LD_VAR 0 7
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: MUL
61674: ST_TO_ADDR
// result := [ _x , _y ] ;
61675: LD_ADDR_VAR 0 5
61679: PUSH
61680: LD_VAR 0 6
61684: PUSH
61685: LD_VAR 0 7
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: ST_TO_ADDR
// end ;
61694: LD_VAR 0 5
61698: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61699: LD_INT 0
61701: PPUSH
61702: PPUSH
61703: PPUSH
61704: PPUSH
// task := GetTaskList ( unit ) ;
61705: LD_ADDR_VAR 0 7
61709: PUSH
61710: LD_VAR 0 1
61714: PPUSH
61715: CALL_OW 437
61719: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61720: LD_VAR 0 7
61724: NOT
61725: PUSH
61726: LD_VAR 0 1
61730: PPUSH
61731: LD_VAR 0 2
61735: PPUSH
61736: CALL_OW 308
61740: NOT
61741: AND
61742: IFFALSE 61746
// exit ;
61744: GO 61864
// if IsInArea ( unit , area ) then
61746: LD_VAR 0 1
61750: PPUSH
61751: LD_VAR 0 2
61755: PPUSH
61756: CALL_OW 308
61760: IFFALSE 61778
// begin ComMoveToArea ( unit , goAway ) ;
61762: LD_VAR 0 1
61766: PPUSH
61767: LD_VAR 0 3
61771: PPUSH
61772: CALL_OW 113
// exit ;
61776: GO 61864
// end ; if task [ 1 ] [ 1 ] <> M then
61778: LD_VAR 0 7
61782: PUSH
61783: LD_INT 1
61785: ARRAY
61786: PUSH
61787: LD_INT 1
61789: ARRAY
61790: PUSH
61791: LD_STRING M
61793: NONEQUAL
61794: IFFALSE 61798
// exit ;
61796: GO 61864
// x := task [ 1 ] [ 2 ] ;
61798: LD_ADDR_VAR 0 5
61802: PUSH
61803: LD_VAR 0 7
61807: PUSH
61808: LD_INT 1
61810: ARRAY
61811: PUSH
61812: LD_INT 2
61814: ARRAY
61815: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61816: LD_ADDR_VAR 0 6
61820: PUSH
61821: LD_VAR 0 7
61825: PUSH
61826: LD_INT 1
61828: ARRAY
61829: PUSH
61830: LD_INT 3
61832: ARRAY
61833: ST_TO_ADDR
// if InArea ( x , y , area ) then
61834: LD_VAR 0 5
61838: PPUSH
61839: LD_VAR 0 6
61843: PPUSH
61844: LD_VAR 0 2
61848: PPUSH
61849: CALL_OW 309
61853: IFFALSE 61864
// ComStop ( unit ) ;
61855: LD_VAR 0 1
61859: PPUSH
61860: CALL_OW 141
// end ;
61864: LD_VAR 0 4
61868: RET
// export function Abs ( value ) ; begin
61869: LD_INT 0
61871: PPUSH
// result := value ;
61872: LD_ADDR_VAR 0 2
61876: PUSH
61877: LD_VAR 0 1
61881: ST_TO_ADDR
// if value < 0 then
61882: LD_VAR 0 1
61886: PUSH
61887: LD_INT 0
61889: LESS
61890: IFFALSE 61907
// result := value * - 1 ;
61892: LD_ADDR_VAR 0 2
61896: PUSH
61897: LD_VAR 0 1
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: MUL
61906: ST_TO_ADDR
// end ;
61907: LD_VAR 0 2
61911: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61912: LD_INT 0
61914: PPUSH
61915: PPUSH
61916: PPUSH
61917: PPUSH
61918: PPUSH
61919: PPUSH
61920: PPUSH
61921: PPUSH
// if not unit or not building then
61922: LD_VAR 0 1
61926: NOT
61927: PUSH
61928: LD_VAR 0 2
61932: NOT
61933: OR
61934: IFFALSE 61938
// exit ;
61936: GO 62164
// x := GetX ( building ) ;
61938: LD_ADDR_VAR 0 4
61942: PUSH
61943: LD_VAR 0 2
61947: PPUSH
61948: CALL_OW 250
61952: ST_TO_ADDR
// y := GetY ( building ) ;
61953: LD_ADDR_VAR 0 6
61957: PUSH
61958: LD_VAR 0 2
61962: PPUSH
61963: CALL_OW 251
61967: ST_TO_ADDR
// d := GetDir ( building ) ;
61968: LD_ADDR_VAR 0 8
61972: PUSH
61973: LD_VAR 0 2
61977: PPUSH
61978: CALL_OW 254
61982: ST_TO_ADDR
// r := 4 ;
61983: LD_ADDR_VAR 0 9
61987: PUSH
61988: LD_INT 4
61990: ST_TO_ADDR
// for i := 1 to 5 do
61991: LD_ADDR_VAR 0 10
61995: PUSH
61996: DOUBLE
61997: LD_INT 1
61999: DEC
62000: ST_TO_ADDR
62001: LD_INT 5
62003: PUSH
62004: FOR_TO
62005: IFFALSE 62162
// begin _x := ShiftX ( x , d , r + i ) ;
62007: LD_ADDR_VAR 0 5
62011: PUSH
62012: LD_VAR 0 4
62016: PPUSH
62017: LD_VAR 0 8
62021: PPUSH
62022: LD_VAR 0 9
62026: PUSH
62027: LD_VAR 0 10
62031: PLUS
62032: PPUSH
62033: CALL_OW 272
62037: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62038: LD_ADDR_VAR 0 7
62042: PUSH
62043: LD_VAR 0 6
62047: PPUSH
62048: LD_VAR 0 8
62052: PPUSH
62053: LD_VAR 0 9
62057: PUSH
62058: LD_VAR 0 10
62062: PLUS
62063: PPUSH
62064: CALL_OW 273
62068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62069: LD_VAR 0 5
62073: PPUSH
62074: LD_VAR 0 7
62078: PPUSH
62079: CALL_OW 488
62083: PUSH
62084: LD_VAR 0 5
62088: PPUSH
62089: LD_VAR 0 7
62093: PPUSH
62094: CALL_OW 428
62098: PPUSH
62099: CALL_OW 247
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: IN
62114: NOT
62115: AND
62116: IFFALSE 62160
// begin ComMoveXY ( unit , _x , _y ) ;
62118: LD_VAR 0 1
62122: PPUSH
62123: LD_VAR 0 5
62127: PPUSH
62128: LD_VAR 0 7
62132: PPUSH
62133: CALL_OW 111
// result := [ _x , _y ] ;
62137: LD_ADDR_VAR 0 3
62141: PUSH
62142: LD_VAR 0 5
62146: PUSH
62147: LD_VAR 0 7
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: ST_TO_ADDR
// exit ;
62156: POP
62157: POP
62158: GO 62164
// end ; end ;
62160: GO 62004
62162: POP
62163: POP
// end ;
62164: LD_VAR 0 3
62168: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62169: LD_INT 0
62171: PPUSH
62172: PPUSH
62173: PPUSH
// result := 0 ;
62174: LD_ADDR_VAR 0 3
62178: PUSH
62179: LD_INT 0
62181: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62182: LD_VAR 0 1
62186: PUSH
62187: LD_INT 0
62189: LESS
62190: PUSH
62191: LD_VAR 0 1
62195: PUSH
62196: LD_INT 8
62198: GREATER
62199: OR
62200: PUSH
62201: LD_VAR 0 2
62205: PUSH
62206: LD_INT 0
62208: LESS
62209: OR
62210: PUSH
62211: LD_VAR 0 2
62215: PUSH
62216: LD_INT 8
62218: GREATER
62219: OR
62220: IFFALSE 62224
// exit ;
62222: GO 62299
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62224: LD_ADDR_VAR 0 4
62228: PUSH
62229: LD_INT 22
62231: PUSH
62232: LD_VAR 0 2
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PPUSH
62241: CALL_OW 69
62245: PUSH
62246: FOR_IN
62247: IFFALSE 62297
// begin un := UnitShoot ( i ) ;
62249: LD_ADDR_VAR 0 5
62253: PUSH
62254: LD_VAR 0 4
62258: PPUSH
62259: CALL_OW 504
62263: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62264: LD_VAR 0 5
62268: PPUSH
62269: CALL_OW 255
62273: PUSH
62274: LD_VAR 0 1
62278: EQUAL
62279: IFFALSE 62295
// begin result := un ;
62281: LD_ADDR_VAR 0 3
62285: PUSH
62286: LD_VAR 0 5
62290: ST_TO_ADDR
// exit ;
62291: POP
62292: POP
62293: GO 62299
// end ; end ;
62295: GO 62246
62297: POP
62298: POP
// end ;
62299: LD_VAR 0 3
62303: RET
// export function GetCargoBay ( units ) ; begin
62304: LD_INT 0
62306: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62307: LD_ADDR_VAR 0 2
62311: PUSH
62312: LD_VAR 0 1
62316: PPUSH
62317: LD_INT 2
62319: PUSH
62320: LD_INT 34
62322: PUSH
62323: LD_INT 12
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 34
62332: PUSH
62333: LD_INT 51
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 34
62342: PUSH
62343: LD_INT 32
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 34
62352: PUSH
62353: LD_EXP 94
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: PPUSH
62369: CALL_OW 72
62373: ST_TO_ADDR
// end ;
62374: LD_VAR 0 2
62378: RET
// export function Negate ( value ) ; begin
62379: LD_INT 0
62381: PPUSH
// result := not value ;
62382: LD_ADDR_VAR 0 2
62386: PUSH
62387: LD_VAR 0 1
62391: NOT
62392: ST_TO_ADDR
// end ;
62393: LD_VAR 0 2
62397: RET
// export function Inc ( value ) ; begin
62398: LD_INT 0
62400: PPUSH
// result := value + 1 ;
62401: LD_ADDR_VAR 0 2
62405: PUSH
62406: LD_VAR 0 1
62410: PUSH
62411: LD_INT 1
62413: PLUS
62414: ST_TO_ADDR
// end ;
62415: LD_VAR 0 2
62419: RET
// export function Dec ( value ) ; begin
62420: LD_INT 0
62422: PPUSH
// result := value - 1 ;
62423: LD_ADDR_VAR 0 2
62427: PUSH
62428: LD_VAR 0 1
62432: PUSH
62433: LD_INT 1
62435: MINUS
62436: ST_TO_ADDR
// end ;
62437: LD_VAR 0 2
62441: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62442: LD_INT 0
62444: PPUSH
62445: PPUSH
62446: PPUSH
62447: PPUSH
62448: PPUSH
62449: PPUSH
62450: PPUSH
62451: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62452: LD_VAR 0 1
62456: PPUSH
62457: LD_VAR 0 2
62461: PPUSH
62462: CALL_OW 488
62466: NOT
62467: PUSH
62468: LD_VAR 0 3
62472: PPUSH
62473: LD_VAR 0 4
62477: PPUSH
62478: CALL_OW 488
62482: NOT
62483: OR
62484: IFFALSE 62497
// begin result := - 1 ;
62486: LD_ADDR_VAR 0 5
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: ST_TO_ADDR
// exit ;
62495: GO 62732
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62497: LD_ADDR_VAR 0 12
62501: PUSH
62502: LD_VAR 0 1
62506: PPUSH
62507: LD_VAR 0 2
62511: PPUSH
62512: LD_VAR 0 3
62516: PPUSH
62517: LD_VAR 0 4
62521: PPUSH
62522: CALL 61580 0 4
62526: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62527: LD_ADDR_VAR 0 11
62531: PUSH
62532: LD_VAR 0 1
62536: PPUSH
62537: LD_VAR 0 2
62541: PPUSH
62542: LD_VAR 0 12
62546: PUSH
62547: LD_INT 1
62549: ARRAY
62550: PPUSH
62551: LD_VAR 0 12
62555: PUSH
62556: LD_INT 2
62558: ARRAY
62559: PPUSH
62560: CALL_OW 298
62564: ST_TO_ADDR
// distance := 9999 ;
62565: LD_ADDR_VAR 0 10
62569: PUSH
62570: LD_INT 9999
62572: ST_TO_ADDR
// for i := 0 to 5 do
62573: LD_ADDR_VAR 0 6
62577: PUSH
62578: DOUBLE
62579: LD_INT 0
62581: DEC
62582: ST_TO_ADDR
62583: LD_INT 5
62585: PUSH
62586: FOR_TO
62587: IFFALSE 62730
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62589: LD_ADDR_VAR 0 7
62593: PUSH
62594: LD_VAR 0 1
62598: PPUSH
62599: LD_VAR 0 6
62603: PPUSH
62604: LD_VAR 0 11
62608: PPUSH
62609: CALL_OW 272
62613: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62614: LD_ADDR_VAR 0 8
62618: PUSH
62619: LD_VAR 0 2
62623: PPUSH
62624: LD_VAR 0 6
62628: PPUSH
62629: LD_VAR 0 11
62633: PPUSH
62634: CALL_OW 273
62638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62639: LD_VAR 0 7
62643: PPUSH
62644: LD_VAR 0 8
62648: PPUSH
62649: CALL_OW 488
62653: NOT
62654: IFFALSE 62658
// continue ;
62656: GO 62586
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62658: LD_ADDR_VAR 0 9
62662: PUSH
62663: LD_VAR 0 12
62667: PUSH
62668: LD_INT 1
62670: ARRAY
62671: PPUSH
62672: LD_VAR 0 12
62676: PUSH
62677: LD_INT 2
62679: ARRAY
62680: PPUSH
62681: LD_VAR 0 7
62685: PPUSH
62686: LD_VAR 0 8
62690: PPUSH
62691: CALL_OW 298
62695: ST_TO_ADDR
// if tmp < distance then
62696: LD_VAR 0 9
62700: PUSH
62701: LD_VAR 0 10
62705: LESS
62706: IFFALSE 62728
// begin result := i ;
62708: LD_ADDR_VAR 0 5
62712: PUSH
62713: LD_VAR 0 6
62717: ST_TO_ADDR
// distance := tmp ;
62718: LD_ADDR_VAR 0 10
62722: PUSH
62723: LD_VAR 0 9
62727: ST_TO_ADDR
// end ; end ;
62728: GO 62586
62730: POP
62731: POP
// end ;
62732: LD_VAR 0 5
62736: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62737: LD_INT 0
62739: PPUSH
62740: PPUSH
// if not driver or not IsInUnit ( driver ) then
62741: LD_VAR 0 1
62745: NOT
62746: PUSH
62747: LD_VAR 0 1
62751: PPUSH
62752: CALL_OW 310
62756: NOT
62757: OR
62758: IFFALSE 62762
// exit ;
62760: GO 62852
// vehicle := IsInUnit ( driver ) ;
62762: LD_ADDR_VAR 0 3
62766: PUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: CALL_OW 310
62776: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62777: LD_VAR 0 1
62781: PPUSH
62782: LD_STRING \
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: PUSH
62812: LD_STRING E
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: LD_VAR 0 3
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PPUSH
62848: CALL_OW 446
// end ;
62852: LD_VAR 0 2
62856: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62857: LD_INT 0
62859: PPUSH
62860: PPUSH
// if not driver or not IsInUnit ( driver ) then
62861: LD_VAR 0 1
62865: NOT
62866: PUSH
62867: LD_VAR 0 1
62871: PPUSH
62872: CALL_OW 310
62876: NOT
62877: OR
62878: IFFALSE 62882
// exit ;
62880: GO 62972
// vehicle := IsInUnit ( driver ) ;
62882: LD_ADDR_VAR 0 3
62886: PUSH
62887: LD_VAR 0 1
62891: PPUSH
62892: CALL_OW 310
62896: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62897: LD_VAR 0 1
62901: PPUSH
62902: LD_STRING \
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: PUSH
62932: LD_STRING E
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_VAR 0 3
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PPUSH
62968: CALL_OW 447
// end ;
62972: LD_VAR 0 2
62976: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62977: LD_INT 0
62979: PPUSH
62980: PPUSH
62981: PPUSH
// tmp := [ ] ;
62982: LD_ADDR_VAR 0 5
62986: PUSH
62987: EMPTY
62988: ST_TO_ADDR
// for i in units do
62989: LD_ADDR_VAR 0 4
62993: PUSH
62994: LD_VAR 0 1
62998: PUSH
62999: FOR_IN
63000: IFFALSE 63038
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63002: LD_ADDR_VAR 0 5
63006: PUSH
63007: LD_VAR 0 5
63011: PPUSH
63012: LD_VAR 0 5
63016: PUSH
63017: LD_INT 1
63019: PLUS
63020: PPUSH
63021: LD_VAR 0 4
63025: PPUSH
63026: CALL_OW 256
63030: PPUSH
63031: CALL_OW 2
63035: ST_TO_ADDR
63036: GO 62999
63038: POP
63039: POP
// if not tmp then
63040: LD_VAR 0 5
63044: NOT
63045: IFFALSE 63049
// exit ;
63047: GO 63097
// if asc then
63049: LD_VAR 0 2
63053: IFFALSE 63077
// result := SortListByListAsc ( units , tmp ) else
63055: LD_ADDR_VAR 0 3
63059: PUSH
63060: LD_VAR 0 1
63064: PPUSH
63065: LD_VAR 0 5
63069: PPUSH
63070: CALL_OW 76
63074: ST_TO_ADDR
63075: GO 63097
// result := SortListByListDesc ( units , tmp ) ;
63077: LD_ADDR_VAR 0 3
63081: PUSH
63082: LD_VAR 0 1
63086: PPUSH
63087: LD_VAR 0 5
63091: PPUSH
63092: CALL_OW 77
63096: ST_TO_ADDR
// end ;
63097: LD_VAR 0 3
63101: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63102: LD_INT 0
63104: PPUSH
63105: PPUSH
// task := GetTaskList ( mech ) ;
63106: LD_ADDR_VAR 0 4
63110: PUSH
63111: LD_VAR 0 1
63115: PPUSH
63116: CALL_OW 437
63120: ST_TO_ADDR
// if not task then
63121: LD_VAR 0 4
63125: NOT
63126: IFFALSE 63130
// exit ;
63128: GO 63172
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63130: LD_ADDR_VAR 0 3
63134: PUSH
63135: LD_VAR 0 4
63139: PUSH
63140: LD_INT 1
63142: ARRAY
63143: PUSH
63144: LD_INT 1
63146: ARRAY
63147: PUSH
63148: LD_STRING r
63150: EQUAL
63151: PUSH
63152: LD_VAR 0 4
63156: PUSH
63157: LD_INT 1
63159: ARRAY
63160: PUSH
63161: LD_INT 4
63163: ARRAY
63164: PUSH
63165: LD_VAR 0 2
63169: EQUAL
63170: AND
63171: ST_TO_ADDR
// end ;
63172: LD_VAR 0 3
63176: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63177: LD_INT 0
63179: PPUSH
// SetDir ( unit , d ) ;
63180: LD_VAR 0 1
63184: PPUSH
63185: LD_VAR 0 4
63189: PPUSH
63190: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63194: LD_VAR 0 1
63198: PPUSH
63199: LD_VAR 0 2
63203: PPUSH
63204: LD_VAR 0 3
63208: PPUSH
63209: LD_VAR 0 5
63213: PPUSH
63214: CALL_OW 48
// end ;
63218: LD_VAR 0 6
63222: RET
// export function ToNaturalNumber ( number ) ; begin
63223: LD_INT 0
63225: PPUSH
// result := number div 1 ;
63226: LD_ADDR_VAR 0 2
63230: PUSH
63231: LD_VAR 0 1
63235: PUSH
63236: LD_INT 1
63238: DIV
63239: ST_TO_ADDR
// if number < 0 then
63240: LD_VAR 0 1
63244: PUSH
63245: LD_INT 0
63247: LESS
63248: IFFALSE 63258
// result := 0 ;
63250: LD_ADDR_VAR 0 2
63254: PUSH
63255: LD_INT 0
63257: ST_TO_ADDR
// end ;
63258: LD_VAR 0 2
63262: RET
// export function SortByClass ( units , class ) ; var un ; begin
63263: LD_INT 0
63265: PPUSH
63266: PPUSH
// if not units or not class then
63267: LD_VAR 0 1
63271: NOT
63272: PUSH
63273: LD_VAR 0 2
63277: NOT
63278: OR
63279: IFFALSE 63283
// exit ;
63281: GO 63378
// result := [ ] ;
63283: LD_ADDR_VAR 0 3
63287: PUSH
63288: EMPTY
63289: ST_TO_ADDR
// for un in units do
63290: LD_ADDR_VAR 0 4
63294: PUSH
63295: LD_VAR 0 1
63299: PUSH
63300: FOR_IN
63301: IFFALSE 63376
// if GetClass ( un ) = class then
63303: LD_VAR 0 4
63307: PPUSH
63308: CALL_OW 257
63312: PUSH
63313: LD_VAR 0 2
63317: EQUAL
63318: IFFALSE 63345
// result := Insert ( result , 1 , un ) else
63320: LD_ADDR_VAR 0 3
63324: PUSH
63325: LD_VAR 0 3
63329: PPUSH
63330: LD_INT 1
63332: PPUSH
63333: LD_VAR 0 4
63337: PPUSH
63338: CALL_OW 2
63342: ST_TO_ADDR
63343: GO 63374
// result := Replace ( result , result + 1 , un ) ;
63345: LD_ADDR_VAR 0 3
63349: PUSH
63350: LD_VAR 0 3
63354: PPUSH
63355: LD_VAR 0 3
63359: PUSH
63360: LD_INT 1
63362: PLUS
63363: PPUSH
63364: LD_VAR 0 4
63368: PPUSH
63369: CALL_OW 1
63373: ST_TO_ADDR
63374: GO 63300
63376: POP
63377: POP
// end ;
63378: LD_VAR 0 3
63382: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63383: LD_INT 0
63385: PPUSH
63386: PPUSH
63387: PPUSH
63388: PPUSH
63389: PPUSH
63390: PPUSH
63391: PPUSH
// result := [ ] ;
63392: LD_ADDR_VAR 0 4
63396: PUSH
63397: EMPTY
63398: ST_TO_ADDR
// if x - r < 0 then
63399: LD_VAR 0 1
63403: PUSH
63404: LD_VAR 0 3
63408: MINUS
63409: PUSH
63410: LD_INT 0
63412: LESS
63413: IFFALSE 63425
// min_x := 0 else
63415: LD_ADDR_VAR 0 8
63419: PUSH
63420: LD_INT 0
63422: ST_TO_ADDR
63423: GO 63441
// min_x := x - r ;
63425: LD_ADDR_VAR 0 8
63429: PUSH
63430: LD_VAR 0 1
63434: PUSH
63435: LD_VAR 0 3
63439: MINUS
63440: ST_TO_ADDR
// if y - r < 0 then
63441: LD_VAR 0 2
63445: PUSH
63446: LD_VAR 0 3
63450: MINUS
63451: PUSH
63452: LD_INT 0
63454: LESS
63455: IFFALSE 63467
// min_y := 0 else
63457: LD_ADDR_VAR 0 7
63461: PUSH
63462: LD_INT 0
63464: ST_TO_ADDR
63465: GO 63483
// min_y := y - r ;
63467: LD_ADDR_VAR 0 7
63471: PUSH
63472: LD_VAR 0 2
63476: PUSH
63477: LD_VAR 0 3
63481: MINUS
63482: ST_TO_ADDR
// max_x := x + r ;
63483: LD_ADDR_VAR 0 9
63487: PUSH
63488: LD_VAR 0 1
63492: PUSH
63493: LD_VAR 0 3
63497: PLUS
63498: ST_TO_ADDR
// max_y := y + r ;
63499: LD_ADDR_VAR 0 10
63503: PUSH
63504: LD_VAR 0 2
63508: PUSH
63509: LD_VAR 0 3
63513: PLUS
63514: ST_TO_ADDR
// for _x = min_x to max_x do
63515: LD_ADDR_VAR 0 5
63519: PUSH
63520: DOUBLE
63521: LD_VAR 0 8
63525: DEC
63526: ST_TO_ADDR
63527: LD_VAR 0 9
63531: PUSH
63532: FOR_TO
63533: IFFALSE 63634
// for _y = min_y to max_y do
63535: LD_ADDR_VAR 0 6
63539: PUSH
63540: DOUBLE
63541: LD_VAR 0 7
63545: DEC
63546: ST_TO_ADDR
63547: LD_VAR 0 10
63551: PUSH
63552: FOR_TO
63553: IFFALSE 63630
// begin if not ValidHex ( _x , _y ) then
63555: LD_VAR 0 5
63559: PPUSH
63560: LD_VAR 0 6
63564: PPUSH
63565: CALL_OW 488
63569: NOT
63570: IFFALSE 63574
// continue ;
63572: GO 63552
// if GetResourceTypeXY ( _x , _y ) then
63574: LD_VAR 0 5
63578: PPUSH
63579: LD_VAR 0 6
63583: PPUSH
63584: CALL_OW 283
63588: IFFALSE 63628
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63590: LD_ADDR_VAR 0 4
63594: PUSH
63595: LD_VAR 0 4
63599: PPUSH
63600: LD_VAR 0 4
63604: PUSH
63605: LD_INT 1
63607: PLUS
63608: PPUSH
63609: LD_VAR 0 5
63613: PUSH
63614: LD_VAR 0 6
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PPUSH
63623: CALL_OW 1
63627: ST_TO_ADDR
// end ;
63628: GO 63552
63630: POP
63631: POP
63632: GO 63532
63634: POP
63635: POP
// end ;
63636: LD_VAR 0 4
63640: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63641: LD_INT 0
63643: PPUSH
63644: PPUSH
63645: PPUSH
63646: PPUSH
63647: PPUSH
63648: PPUSH
63649: PPUSH
63650: PPUSH
// if not units then
63651: LD_VAR 0 1
63655: NOT
63656: IFFALSE 63660
// exit ;
63658: GO 64085
// result := UnitFilter ( units , [ f_ok ] ) ;
63660: LD_ADDR_VAR 0 3
63664: PUSH
63665: LD_VAR 0 1
63669: PPUSH
63670: LD_INT 50
63672: PUSH
63673: EMPTY
63674: LIST
63675: PPUSH
63676: CALL_OW 72
63680: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63681: LD_ADDR_VAR 0 8
63685: PUSH
63686: LD_VAR 0 1
63690: PUSH
63691: LD_INT 1
63693: ARRAY
63694: PPUSH
63695: CALL_OW 255
63699: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
63700: LD_ADDR_VAR 0 10
63704: PUSH
63705: LD_INT 29
63707: PUSH
63708: LD_EXP 97
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: ST_TO_ADDR
// if not result then
63717: LD_VAR 0 3
63721: NOT
63722: IFFALSE 63726
// exit ;
63724: GO 64085
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63726: LD_ADDR_VAR 0 5
63730: PUSH
63731: LD_INT 81
63733: PUSH
63734: LD_VAR 0 8
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PPUSH
63743: CALL_OW 69
63747: ST_TO_ADDR
// for i in result do
63748: LD_ADDR_VAR 0 4
63752: PUSH
63753: LD_VAR 0 3
63757: PUSH
63758: FOR_IN
63759: IFFALSE 64083
// begin tag := GetTag ( i ) + 1 ;
63761: LD_ADDR_VAR 0 9
63765: PUSH
63766: LD_VAR 0 4
63770: PPUSH
63771: CALL_OW 110
63775: PUSH
63776: LD_INT 1
63778: PLUS
63779: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63780: LD_ADDR_VAR 0 7
63784: PUSH
63785: LD_VAR 0 4
63789: PPUSH
63790: CALL_OW 250
63794: PPUSH
63795: LD_VAR 0 4
63799: PPUSH
63800: CALL_OW 251
63804: PPUSH
63805: LD_INT 6
63807: PPUSH
63808: CALL 63383 0 3
63812: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63813: LD_VAR 0 7
63817: PUSH
63818: LD_VAR 0 4
63822: PPUSH
63823: CALL_OW 264
63827: PUSH
63828: LD_VAR 0 10
63832: IN
63833: NOT
63834: AND
63835: IFFALSE 63874
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63837: LD_VAR 0 4
63841: PPUSH
63842: LD_VAR 0 7
63846: PUSH
63847: LD_INT 1
63849: ARRAY
63850: PUSH
63851: LD_INT 1
63853: ARRAY
63854: PPUSH
63855: LD_VAR 0 7
63859: PUSH
63860: LD_INT 1
63862: ARRAY
63863: PUSH
63864: LD_INT 2
63866: ARRAY
63867: PPUSH
63868: CALL_OW 116
63872: GO 64081
// if path > tag then
63874: LD_VAR 0 2
63878: PUSH
63879: LD_VAR 0 9
63883: GREATER
63884: IFFALSE 64051
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63886: LD_ADDR_VAR 0 6
63890: PUSH
63891: LD_VAR 0 5
63895: PPUSH
63896: LD_INT 91
63898: PUSH
63899: LD_VAR 0 4
63903: PUSH
63904: LD_INT 12
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: PPUSH
63912: CALL_OW 72
63916: ST_TO_ADDR
// if nearEnemy then
63917: LD_VAR 0 6
63921: IFFALSE 63949
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63923: LD_VAR 0 4
63927: PPUSH
63928: LD_VAR 0 6
63932: PPUSH
63933: LD_VAR 0 4
63937: PPUSH
63938: CALL_OW 74
63942: PPUSH
63943: CALL_OW 115
63947: GO 64049
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63949: LD_VAR 0 4
63953: PPUSH
63954: LD_VAR 0 2
63958: PUSH
63959: LD_VAR 0 9
63963: ARRAY
63964: PUSH
63965: LD_INT 1
63967: ARRAY
63968: PPUSH
63969: LD_VAR 0 2
63973: PUSH
63974: LD_VAR 0 9
63978: ARRAY
63979: PUSH
63980: LD_INT 2
63982: ARRAY
63983: PPUSH
63984: CALL_OW 297
63988: PUSH
63989: LD_INT 6
63991: GREATER
63992: IFFALSE 64035
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63994: LD_VAR 0 4
63998: PPUSH
63999: LD_VAR 0 2
64003: PUSH
64004: LD_VAR 0 9
64008: ARRAY
64009: PUSH
64010: LD_INT 1
64012: ARRAY
64013: PPUSH
64014: LD_VAR 0 2
64018: PUSH
64019: LD_VAR 0 9
64023: ARRAY
64024: PUSH
64025: LD_INT 2
64027: ARRAY
64028: PPUSH
64029: CALL_OW 114
64033: GO 64049
// SetTag ( i , tag ) ;
64035: LD_VAR 0 4
64039: PPUSH
64040: LD_VAR 0 9
64044: PPUSH
64045: CALL_OW 109
// end else
64049: GO 64081
// if enemy then
64051: LD_VAR 0 5
64055: IFFALSE 64081
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64057: LD_VAR 0 4
64061: PPUSH
64062: LD_VAR 0 5
64066: PPUSH
64067: LD_VAR 0 4
64071: PPUSH
64072: CALL_OW 74
64076: PPUSH
64077: CALL_OW 115
// end ;
64081: GO 63758
64083: POP
64084: POP
// end ;
64085: LD_VAR 0 3
64089: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64090: LD_INT 0
64092: PPUSH
64093: PPUSH
64094: PPUSH
// if not unit or IsInUnit ( unit ) then
64095: LD_VAR 0 1
64099: NOT
64100: PUSH
64101: LD_VAR 0 1
64105: PPUSH
64106: CALL_OW 310
64110: OR
64111: IFFALSE 64115
// exit ;
64113: GO 64206
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64115: LD_ADDR_VAR 0 4
64119: PUSH
64120: LD_VAR 0 1
64124: PPUSH
64125: CALL_OW 250
64129: PPUSH
64130: LD_VAR 0 2
64134: PPUSH
64135: LD_INT 1
64137: PPUSH
64138: CALL_OW 272
64142: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64143: LD_ADDR_VAR 0 5
64147: PUSH
64148: LD_VAR 0 1
64152: PPUSH
64153: CALL_OW 251
64157: PPUSH
64158: LD_VAR 0 2
64162: PPUSH
64163: LD_INT 1
64165: PPUSH
64166: CALL_OW 273
64170: ST_TO_ADDR
// if ValidHex ( x , y ) then
64171: LD_VAR 0 4
64175: PPUSH
64176: LD_VAR 0 5
64180: PPUSH
64181: CALL_OW 488
64185: IFFALSE 64206
// ComTurnXY ( unit , x , y ) ;
64187: LD_VAR 0 1
64191: PPUSH
64192: LD_VAR 0 4
64196: PPUSH
64197: LD_VAR 0 5
64201: PPUSH
64202: CALL_OW 118
// end ;
64206: LD_VAR 0 3
64210: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64211: LD_INT 0
64213: PPUSH
64214: PPUSH
// result := false ;
64215: LD_ADDR_VAR 0 3
64219: PUSH
64220: LD_INT 0
64222: ST_TO_ADDR
// if not units then
64223: LD_VAR 0 2
64227: NOT
64228: IFFALSE 64232
// exit ;
64230: GO 64277
// for i in units do
64232: LD_ADDR_VAR 0 4
64236: PUSH
64237: LD_VAR 0 2
64241: PUSH
64242: FOR_IN
64243: IFFALSE 64275
// if See ( side , i ) then
64245: LD_VAR 0 1
64249: PPUSH
64250: LD_VAR 0 4
64254: PPUSH
64255: CALL_OW 292
64259: IFFALSE 64273
// begin result := true ;
64261: LD_ADDR_VAR 0 3
64265: PUSH
64266: LD_INT 1
64268: ST_TO_ADDR
// exit ;
64269: POP
64270: POP
64271: GO 64277
// end ;
64273: GO 64242
64275: POP
64276: POP
// end ;
64277: LD_VAR 0 3
64281: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64282: LD_INT 0
64284: PPUSH
64285: PPUSH
64286: PPUSH
64287: PPUSH
// if not unit or not points then
64288: LD_VAR 0 1
64292: NOT
64293: PUSH
64294: LD_VAR 0 2
64298: NOT
64299: OR
64300: IFFALSE 64304
// exit ;
64302: GO 64394
// dist := 99999 ;
64304: LD_ADDR_VAR 0 5
64308: PUSH
64309: LD_INT 99999
64311: ST_TO_ADDR
// for i in points do
64312: LD_ADDR_VAR 0 4
64316: PUSH
64317: LD_VAR 0 2
64321: PUSH
64322: FOR_IN
64323: IFFALSE 64392
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64325: LD_ADDR_VAR 0 6
64329: PUSH
64330: LD_VAR 0 1
64334: PPUSH
64335: LD_VAR 0 4
64339: PUSH
64340: LD_INT 1
64342: ARRAY
64343: PPUSH
64344: LD_VAR 0 4
64348: PUSH
64349: LD_INT 2
64351: ARRAY
64352: PPUSH
64353: CALL_OW 297
64357: ST_TO_ADDR
// if tmpDist < dist then
64358: LD_VAR 0 6
64362: PUSH
64363: LD_VAR 0 5
64367: LESS
64368: IFFALSE 64390
// begin result := i ;
64370: LD_ADDR_VAR 0 3
64374: PUSH
64375: LD_VAR 0 4
64379: ST_TO_ADDR
// dist := tmpDist ;
64380: LD_ADDR_VAR 0 5
64384: PUSH
64385: LD_VAR 0 6
64389: ST_TO_ADDR
// end ; end ;
64390: GO 64322
64392: POP
64393: POP
// end ;
64394: LD_VAR 0 3
64398: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64399: LD_INT 0
64401: PPUSH
// uc_side := side ;
64402: LD_ADDR_OWVAR 20
64406: PUSH
64407: LD_VAR 0 1
64411: ST_TO_ADDR
// uc_nation := 3 ;
64412: LD_ADDR_OWVAR 21
64416: PUSH
64417: LD_INT 3
64419: ST_TO_ADDR
// vc_chassis := 25 ;
64420: LD_ADDR_OWVAR 37
64424: PUSH
64425: LD_INT 25
64427: ST_TO_ADDR
// vc_engine := engine_siberite ;
64428: LD_ADDR_OWVAR 39
64432: PUSH
64433: LD_INT 3
64435: ST_TO_ADDR
// vc_control := control_computer ;
64436: LD_ADDR_OWVAR 38
64440: PUSH
64441: LD_INT 3
64443: ST_TO_ADDR
// vc_weapon := 59 ;
64444: LD_ADDR_OWVAR 40
64448: PUSH
64449: LD_INT 59
64451: ST_TO_ADDR
// result := CreateVehicle ;
64452: LD_ADDR_VAR 0 5
64456: PUSH
64457: CALL_OW 45
64461: ST_TO_ADDR
// SetDir ( result , d ) ;
64462: LD_VAR 0 5
64466: PPUSH
64467: LD_VAR 0 4
64471: PPUSH
64472: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64476: LD_VAR 0 5
64480: PPUSH
64481: LD_VAR 0 2
64485: PPUSH
64486: LD_VAR 0 3
64490: PPUSH
64491: LD_INT 0
64493: PPUSH
64494: CALL_OW 48
// end ;
64498: LD_VAR 0 5
64502: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64503: LD_INT 0
64505: PPUSH
64506: PPUSH
64507: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64508: LD_ADDR_VAR 0 2
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64531: LD_VAR 0 1
64535: NOT
64536: PUSH
64537: LD_VAR 0 1
64541: PPUSH
64542: CALL_OW 264
64546: PUSH
64547: LD_INT 12
64549: PUSH
64550: LD_INT 51
64552: PUSH
64553: LD_INT 32
64555: PUSH
64556: LD_EXP 94
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: IN
64567: NOT
64568: OR
64569: IFFALSE 64573
// exit ;
64571: GO 64671
// for i := 1 to 3 do
64573: LD_ADDR_VAR 0 3
64577: PUSH
64578: DOUBLE
64579: LD_INT 1
64581: DEC
64582: ST_TO_ADDR
64583: LD_INT 3
64585: PUSH
64586: FOR_TO
64587: IFFALSE 64669
// begin tmp := GetCargo ( cargo , i ) ;
64589: LD_ADDR_VAR 0 4
64593: PUSH
64594: LD_VAR 0 1
64598: PPUSH
64599: LD_VAR 0 3
64603: PPUSH
64604: CALL_OW 289
64608: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64609: LD_ADDR_VAR 0 2
64613: PUSH
64614: LD_VAR 0 2
64618: PPUSH
64619: LD_VAR 0 3
64623: PPUSH
64624: LD_VAR 0 4
64628: PPUSH
64629: CALL_OW 1
64633: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64634: LD_ADDR_VAR 0 2
64638: PUSH
64639: LD_VAR 0 2
64643: PPUSH
64644: LD_INT 4
64646: PPUSH
64647: LD_VAR 0 2
64651: PUSH
64652: LD_INT 4
64654: ARRAY
64655: PUSH
64656: LD_VAR 0 4
64660: PLUS
64661: PPUSH
64662: CALL_OW 1
64666: ST_TO_ADDR
// end ;
64667: GO 64586
64669: POP
64670: POP
// end ;
64671: LD_VAR 0 2
64675: RET
