// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 1059 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// InGameOn ;
  70: CALL_OW 8
// mission_prefix_prev = 12_ ;
  74: LD_ADDR_EXP 21
  78: PUSH
  79: LD_STRING 12_
  81: ST_TO_ADDR
// PrepareEpsilonBase ;
  82: CALL 2398 0 0
// PrepareHeroes ;
  86: CALL 1239 0 0
// PrepareRandoms ;
  90: CALL 3682 0 0
// CenterNowOnUnits ( JMM ) ;
  94: LD_EXP 1
  98: PPUSH
  99: CALL_OW 87
// wait ( 0 0$1 ) ;
 103: LD_INT 35
 105: PPUSH
 106: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
 110: LD_EXP 1
 114: PPUSH
 115: LD_STRING D1-JMM-1
 117: PPUSH
 118: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
 122: LD_EXP 2
 126: PPUSH
 127: LD_STRING D1-Pow-1
 129: PPUSH
 130: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
 134: LD_EXP 2
 138: PPUSH
 139: LD_STRING D1-Pow-1a
 141: PPUSH
 142: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 146: LD_EXP 2
 150: PPUSH
 151: LD_STRING D1-Pow-1b
 153: PPUSH
 154: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 158: LD_EXP 2
 162: PPUSH
 163: LD_STRING D1-Pow-1c
 165: PPUSH
 166: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING D1-JMM-2
 177: PPUSH
 178: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 182: LD_EXP 2
 186: PPUSH
 187: LD_STRING D1-Pow-2
 189: PPUSH
 190: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 194: LD_EXP 1
 198: PPUSH
 199: LD_STRING D1-JMM-3
 201: PPUSH
 202: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 206: LD_EXP 2
 210: PPUSH
 211: LD_STRING D1-Pow-3
 213: PPUSH
 214: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 218: LD_EXP 1
 222: PPUSH
 223: LD_STRING D1-JMM-4
 225: PPUSH
 226: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 230: LD_EXP 2
 234: PPUSH
 235: LD_STRING D1-Pow-4
 237: PPUSH
 238: CALL_OW 94
// SelectAndSaveCharacters ;
 242: CALL 4278 0 0
// InGameOff ;
 246: CALL_OW 9
// Query ( Q1 ) ;
 250: LD_STRING Q1
 252: PPUSH
 253: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 257: LD_INT 2
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 424
// end ;
 267: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 268: LD_INT 2
 270: PPUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 21
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PPUSH
 295: CALL_OW 71
 299: PUSH
 300: LD_INT 0
 302: EQUAL
 303: PUSH
 304: LD_INT 2
 306: PPUSH
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 21
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 32
 329: PUSH
 330: LD_INT 3
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 33
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: LD_INT 3
 349: PUSH
 350: LD_INT 58
 352: PUSH
 353: EMPTY
 354: LIST
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: PPUSH
 367: CALL_OW 70
 371: PUSH
 372: LD_INT 8
 374: EQUAL
 375: AND
 376: IFFALSE 956
 378: GO 380
 380: DISABLE
 381: LD_INT 0
 383: PPUSH
 384: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 385: LD_INT 2
 387: PPUSH
 388: LD_INT 21
 390: PUSH
 391: LD_INT 2
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 33
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: LD_INT 58
 413: PUSH
 414: EMPTY
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 70
 430: PUSH
 431: LD_INT 0
 433: GREATER
 434: IFFALSE 702
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 436: LD_ADDR_VAR 0 1
 440: PUSH
 441: LD_INT 2
 443: PPUSH
 444: LD_INT 21
 446: PUSH
 447: LD_INT 2
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 33
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 3
 466: PUSH
 467: LD_INT 58
 469: PUSH
 470: EMPTY
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PPUSH
 482: CALL_OW 70
 486: PUSH
 487: FOR_IN
 488: IFFALSE 688
// begin cargoType = GetCargoType ( i ) ;
 490: LD_ADDR_VAR 0 2
 494: PUSH
 495: LD_VAR 0 1
 499: PPUSH
 500: CALL_OW 288
 504: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 505: LD_VAR 0 1
 509: PPUSH
 510: CALL_OW 264
 514: PUSH
 515: LD_INT 12
 517: EQUAL
 518: IFFALSE 615
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 520: LD_ADDR_EXP 19
 524: PUSH
 525: LD_EXP 19
 529: PUSH
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 248
 539: PUSH
 540: LD_VAR 0 1
 544: PPUSH
 545: CALL_OW 265
 549: PUSH
 550: LD_VAR 0 1
 554: PPUSH
 555: CALL_OW 262
 559: PUSH
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 263
 569: PUSH
 570: LD_VAR 0 1
 574: PPUSH
 575: CALL_OW 264
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_VAR 0 2
 594: PPUSH
 595: CALL_OW 289
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: ADD
 612: ST_TO_ADDR
// end else
 613: GO 686
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 615: LD_ADDR_EXP 19
 619: PUSH
 620: LD_EXP 19
 624: PUSH
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 248
 634: PUSH
 635: LD_VAR 0 1
 639: PPUSH
 640: CALL_OW 265
 644: PUSH
 645: LD_VAR 0 1
 649: PPUSH
 650: CALL_OW 262
 654: PUSH
 655: LD_VAR 0 1
 659: PPUSH
 660: CALL_OW 263
 664: PUSH
 665: LD_VAR 0 1
 669: PPUSH
 670: CALL_OW 264
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: PUSH
 682: EMPTY
 683: LIST
 684: ADD
 685: ST_TO_ADDR
// end ; end ;
 686: GO 487
 688: POP
 689: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 690: LD_EXP 19
 694: PPUSH
 695: LD_STRING 13_VehiclesIn13_1
 697: PPUSH
 698: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 702: LD_EXP 23
 706: PPUSH
 707: LD_STRING 13c_others
 709: PPUSH
 710: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_STRING 13c_JMM
 721: PPUSH
 722: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 726: LD_EXP 15
 730: PPUSH
 731: LD_STRING 13c_Stevens
 733: PPUSH
 734: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 738: LD_EXP 3
 742: PPUSH
 743: LD_STRING Lisa
 745: PPUSH
 746: LD_EXP 22
 750: PPUSH
 751: CALL 4220 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 755: LD_EXP 8
 759: PPUSH
 760: LD_STRING Brown
 762: PPUSH
 763: LD_EXP 22
 767: PPUSH
 768: CALL 4220 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 772: LD_EXP 4
 776: PPUSH
 777: LD_STRING Donaldson
 779: PPUSH
 780: LD_EXP 22
 784: PPUSH
 785: CALL 4220 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 789: LD_EXP 5
 793: PPUSH
 794: LD_STRING Bobby
 796: PPUSH
 797: LD_EXP 22
 801: PPUSH
 802: CALL 4220 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 806: LD_EXP 6
 810: PPUSH
 811: LD_STRING Cyrus
 813: PPUSH
 814: LD_EXP 22
 818: PPUSH
 819: CALL 4220 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 823: LD_EXP 7
 827: PPUSH
 828: LD_STRING Denis
 830: PPUSH
 831: LD_EXP 22
 835: PPUSH
 836: CALL 4220 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 840: LD_EXP 9
 844: PPUSH
 845: LD_STRING Gladstone
 847: PPUSH
 848: LD_EXP 22
 852: PPUSH
 853: CALL 4220 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 857: LD_EXP 10
 861: PPUSH
 862: LD_STRING Houten
 864: PPUSH
 865: LD_EXP 22
 869: PPUSH
 870: CALL 4220 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 874: LD_EXP 11
 878: PPUSH
 879: LD_STRING Cornel
 881: PPUSH
 882: LD_EXP 22
 886: PPUSH
 887: CALL 4220 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 891: LD_EXP 12
 895: PPUSH
 896: LD_STRING Gary
 898: PPUSH
 899: LD_EXP 22
 903: PPUSH
 904: CALL 4220 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 908: LD_EXP 13
 912: PPUSH
 913: LD_STRING Frank
 915: PPUSH
 916: LD_EXP 22
 920: PPUSH
 921: CALL 4220 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 925: LD_EXP 14
 929: PPUSH
 930: LD_STRING Kikuchi
 932: PPUSH
 933: LD_EXP 22
 937: PPUSH
 938: CALL 4220 0 3
// SaveCargos ;
 942: CALL 959 0 0
// ChangeMap ( 13 , %_cont ) ;
 946: LD_INT 13
 948: PPUSH
 949: LD_STRING %_cont
 951: PPUSH
 952: CALL_OW 340
// end ;
 956: PPOPN 2
 958: END
// export function SaveCargos ; var i ; begin
 959: LD_INT 0
 961: PPUSH
 962: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 963: LD_ADDR_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: PPUSH
 971: LD_INT 22
 973: PUSH
 974: LD_INT 1
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 33
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 34
 993: PUSH
 994: LD_INT 12
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 70
1010: PUSH
1011: FOR_IN
1012: IFFALSE 1040
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
1014: LD_ADDR_EXP 20
1018: PUSH
1019: LD_EXP 20
1023: PUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL 5166 0 1
1033: PUSH
1034: EMPTY
1035: LIST
1036: ADD
1037: ST_TO_ADDR
1038: GO 1011
1040: POP
1041: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
1042: LD_EXP 20
1046: PPUSH
1047: LD_STRING 13_ResourcesInCargo13_1
1049: PPUSH
1050: CALL_OW 39
// end ;
1054: LD_VAR 0 1
1058: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
1059: LD_INT 0
1061: PPUSH
1062: PPUSH
1063: PPUSH
1064: PPUSH
1065: PPUSH
1066: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_STRING 10_EpsilonEnv
1074: PPUSH
1075: EMPTY
1076: PPUSH
1077: CALL_OW 30
1081: ST_TO_ADDR
// if not tmp then
1082: LD_VAR 0 2
1086: NOT
1087: IFFALSE 1091
// exit ;
1089: GO 1234
// list := ListEnvironmentArea ( epsilonTerrain ) ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_INT 1
1098: PPUSH
1099: CALL_OW 353
1103: ST_TO_ADDR
// if not list then
1104: LD_VAR 0 3
1108: NOT
1109: IFFALSE 1113
// exit ;
1111: GO 1234
// for i in list do
1113: LD_ADDR_VAR 0 4
1117: PUSH
1118: LD_VAR 0 3
1122: PUSH
1123: FOR_IN
1124: IFFALSE 1232
// begin exist := false ;
1126: LD_ADDR_VAR 0 6
1130: PUSH
1131: LD_INT 0
1133: ST_TO_ADDR
// for j in tmp do
1134: LD_ADDR_VAR 0 5
1138: PUSH
1139: LD_VAR 0 2
1143: PUSH
1144: FOR_IN
1145: IFFALSE 1199
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
1147: LD_VAR 0 4
1151: PUSH
1152: LD_INT 1
1154: ARRAY
1155: PUSH
1156: LD_VAR 0 5
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: EQUAL
1165: PUSH
1166: LD_VAR 0 4
1170: PUSH
1171: LD_INT 2
1173: ARRAY
1174: PUSH
1175: LD_VAR 0 5
1179: PUSH
1180: LD_INT 2
1182: ARRAY
1183: EQUAL
1184: AND
1185: IFFALSE 1197
// begin exist := true ;
1187: LD_ADDR_VAR 0 6
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// break ;
1195: GO 1199
// end ;
1197: GO 1144
1199: POP
1200: POP
// if not exist then
1201: LD_VAR 0 6
1205: NOT
1206: IFFALSE 1230
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1208: LD_VAR 0 4
1212: PUSH
1213: LD_INT 1
1215: ARRAY
1216: PPUSH
1217: LD_VAR 0 4
1221: PUSH
1222: LD_INT 2
1224: ARRAY
1225: PPUSH
1226: CALL_OW 347
// end ;
1230: GO 1123
1232: POP
1233: POP
// end ; end_of_file
1234: LD_VAR 0 1
1238: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
1245: LD_ADDR_VAR 0 4
1249: PUSH
1250: LD_INT 22
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 2
1262: PUSH
1263: LD_INT 30
1265: PUSH
1266: LD_INT 0
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: LD_INT 30
1275: PUSH
1276: LD_INT 1
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: ST_TO_ADDR
// uc_side = 1 ;
1297: LD_ADDR_OWVAR 20
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
1305: LD_ADDR_EXP 1
1309: PUSH
1310: LD_STRING JMM
1312: PPUSH
1313: LD_INT 1
1315: PPUSH
1316: CALL 4035 0 2
1320: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
1321: LD_ADDR_EXP 3
1325: PUSH
1326: LD_STRING Lisa
1328: PPUSH
1329: LD_INT 1
1331: PPUSH
1332: CALL 4035 0 2
1336: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
1337: LD_ADDR_EXP 4
1341: PUSH
1342: LD_STRING Donaldson
1344: PPUSH
1345: LD_INT 1
1347: PPUSH
1348: CALL 4035 0 2
1352: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
1353: LD_ADDR_EXP 5
1357: PUSH
1358: LD_STRING Bobby
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL 4035 0 2
1368: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
1369: LD_ADDR_EXP 6
1373: PUSH
1374: LD_STRING Cyrus
1376: PPUSH
1377: LD_INT 1
1379: PPUSH
1380: CALL 4035 0 2
1384: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
1385: LD_ADDR_EXP 7
1389: PUSH
1390: LD_STRING Denis
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: CALL 4035 0 2
1400: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
1401: LD_ADDR_EXP 8
1405: PUSH
1406: LD_STRING Brown
1408: PPUSH
1409: LD_INT 1
1411: PPUSH
1412: CALL 4035 0 2
1416: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
1417: LD_ADDR_EXP 9
1421: PUSH
1422: LD_STRING Gladstone
1424: PPUSH
1425: LD_INT 1
1427: PPUSH
1428: CALL 4035 0 2
1432: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
1433: LD_ADDR_EXP 10
1437: PUSH
1438: LD_STRING Houten
1440: PPUSH
1441: LD_INT 1
1443: PPUSH
1444: CALL 4035 0 2
1448: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
1449: LD_ADDR_EXP 11
1453: PUSH
1454: LD_STRING Cornell
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: CALL 4035 0 2
1464: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1465: LD_ADDR_EXP 12
1469: PUSH
1470: LD_STRING Gary
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 4035 0 2
1480: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1481: LD_ADDR_EXP 13
1485: PUSH
1486: LD_STRING Frank
1488: PPUSH
1489: LD_INT 1
1491: PPUSH
1492: CALL 4035 0 2
1496: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1497: LD_ADDR_EXP 14
1501: PUSH
1502: LD_STRING Kikuchi
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL 4035 0 2
1512: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1513: LD_ADDR_EXP 15
1517: PUSH
1518: LD_STRING Stevens
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL 4035 0 2
1528: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1529: LD_ADDR_EXP 2
1533: PUSH
1534: LD_STRING Powell
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL 4035 0 2
1544: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1545: LD_EXP 1
1549: PPUSH
1550: LD_VAR 0 4
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 250
1563: PPUSH
1564: LD_VAR 0 4
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: CALL_OW 251
1577: PPUSH
1578: LD_INT 4
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_VAR 0 4
1597: PUSH
1598: LD_INT 1
1600: ARRAY
1601: PPUSH
1602: CALL_OW 250
1606: PPUSH
1607: LD_VAR 0 4
1611: PUSH
1612: LD_INT 1
1614: ARRAY
1615: PPUSH
1616: CALL_OW 251
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: LD_INT 0
1626: PPUSH
1627: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1631: LD_EXP 3
1635: PPUSH
1636: LD_VAR 0 4
1640: PUSH
1641: LD_INT 1
1643: ARRAY
1644: PPUSH
1645: CALL_OW 250
1649: PPUSH
1650: LD_VAR 0 4
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: CALL_OW 251
1663: PPUSH
1664: LD_INT 35
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1674: LD_EXP 4
1678: PPUSH
1679: LD_VAR 0 4
1683: PUSH
1684: LD_INT 1
1686: ARRAY
1687: PPUSH
1688: CALL_OW 250
1692: PPUSH
1693: LD_VAR 0 4
1697: PUSH
1698: LD_INT 1
1700: ARRAY
1701: PPUSH
1702: CALL_OW 251
1706: PPUSH
1707: LD_INT 35
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1717: LD_EXP 5
1721: PPUSH
1722: LD_VAR 0 4
1726: PUSH
1727: LD_INT 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 250
1735: PPUSH
1736: LD_VAR 0 4
1740: PUSH
1741: LD_INT 1
1743: ARRAY
1744: PPUSH
1745: CALL_OW 251
1749: PPUSH
1750: LD_INT 35
1752: PPUSH
1753: LD_INT 0
1755: PPUSH
1756: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1760: LD_EXP 6
1764: PPUSH
1765: LD_VAR 0 4
1769: PUSH
1770: LD_INT 1
1772: ARRAY
1773: PPUSH
1774: CALL_OW 250
1778: PPUSH
1779: LD_VAR 0 4
1783: PUSH
1784: LD_INT 1
1786: ARRAY
1787: PPUSH
1788: CALL_OW 251
1792: PPUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_INT 0
1798: PPUSH
1799: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1803: LD_EXP 7
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: ARRAY
1816: PPUSH
1817: CALL_OW 250
1821: PPUSH
1822: LD_VAR 0 4
1826: PUSH
1827: LD_INT 1
1829: ARRAY
1830: PPUSH
1831: CALL_OW 251
1835: PPUSH
1836: LD_INT 35
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1846: LD_EXP 8
1850: PPUSH
1851: LD_VAR 0 4
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 250
1864: PPUSH
1865: LD_VAR 0 4
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: CALL_OW 251
1878: PPUSH
1879: LD_INT 35
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1889: LD_EXP 9
1893: PPUSH
1894: LD_VAR 0 4
1898: PUSH
1899: LD_INT 1
1901: ARRAY
1902: PPUSH
1903: CALL_OW 250
1907: PPUSH
1908: LD_VAR 0 4
1912: PUSH
1913: LD_INT 1
1915: ARRAY
1916: PPUSH
1917: CALL_OW 251
1921: PPUSH
1922: LD_INT 35
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1932: LD_EXP 10
1936: PPUSH
1937: LD_VAR 0 4
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PUSH
1956: LD_INT 1
1958: ARRAY
1959: PPUSH
1960: CALL_OW 251
1964: PPUSH
1965: LD_INT 35
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1975: LD_EXP 11
1979: PPUSH
1980: LD_VAR 0 4
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: CALL_OW 250
1993: PPUSH
1994: LD_VAR 0 4
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: PPUSH
2003: CALL_OW 251
2007: PPUSH
2008: LD_INT 35
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2018: LD_EXP 12
2022: PPUSH
2023: LD_VAR 0 4
2027: PUSH
2028: LD_INT 1
2030: ARRAY
2031: PPUSH
2032: CALL_OW 250
2036: PPUSH
2037: LD_VAR 0 4
2041: PUSH
2042: LD_INT 1
2044: ARRAY
2045: PPUSH
2046: CALL_OW 251
2050: PPUSH
2051: LD_INT 35
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2061: LD_EXP 13
2065: PPUSH
2066: LD_VAR 0 4
2070: PUSH
2071: LD_INT 1
2073: ARRAY
2074: PPUSH
2075: CALL_OW 250
2079: PPUSH
2080: LD_VAR 0 4
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 251
2093: PPUSH
2094: LD_INT 35
2096: PPUSH
2097: LD_INT 0
2099: PPUSH
2100: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2104: LD_EXP 14
2108: PPUSH
2109: LD_VAR 0 4
2113: PUSH
2114: LD_INT 1
2116: ARRAY
2117: PPUSH
2118: CALL_OW 250
2122: PPUSH
2123: LD_VAR 0 4
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 251
2136: PPUSH
2137: LD_INT 35
2139: PPUSH
2140: LD_INT 0
2142: PPUSH
2143: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
2147: LD_VAR 0 4
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PPUSH
2156: LD_STRING epsilon
2158: PPUSH
2159: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
2163: LD_VAR 0 4
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: CALL_OW 274
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 3000
2182: PPUSH
2183: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
2187: LD_VAR 0 4
2191: PUSH
2192: LD_INT 1
2194: ARRAY
2195: PPUSH
2196: CALL_OW 274
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 500
2206: PPUSH
2207: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
2211: LD_VAR 0 4
2215: PUSH
2216: LD_INT 1
2218: ARRAY
2219: PPUSH
2220: CALL_OW 274
2224: PPUSH
2225: LD_INT 3
2227: PPUSH
2228: LD_INT 200
2230: PPUSH
2231: CALL_OW 277
// SetClass ( JMM , 1 ) ;
2235: LD_EXP 1
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
2247: LD_ADDR_EXP 16
2251: PUSH
2252: LD_STRING 12_other_survivors
2254: PPUSH
2255: CALL_OW 31
2259: ST_TO_ADDR
// others11 = CreateCharacterSet ( 12_others ) ;
2260: LD_ADDR_EXP 17
2264: PUSH
2265: LD_STRING 12_others
2267: PPUSH
2268: CALL_OW 31
2272: ST_TO_ADDR
// for i in others11 do
2273: LD_ADDR_VAR 0 2
2277: PUSH
2278: LD_EXP 17
2282: PUSH
2283: FOR_IN
2284: IFFALSE 2331
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 4
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PPUSH
2300: CALL_OW 250
2304: PPUSH
2305: LD_VAR 0 4
2309: PUSH
2310: LD_INT 1
2312: ARRAY
2313: PPUSH
2314: CALL_OW 251
2318: PPUSH
2319: LD_INT 15
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 50
2329: GO 2283
2331: POP
2332: POP
// for i in others12 do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: LD_EXP 16
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2391
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 4
2355: PUSH
2356: LD_INT 1
2358: ARRAY
2359: PPUSH
2360: CALL_OW 250
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 251
2378: PPUSH
2379: LD_INT 15
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: CALL_OW 50
2389: GO 2343
2391: POP
2392: POP
// end ;
2393: LD_VAR 0 1
2397: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2398: LD_INT 0
2400: PPUSH
2401: PPUSH
2402: PPUSH
2403: PPUSH
2404: PPUSH
2405: PPUSH
2406: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2407: LD_INT 113
2409: PPUSH
2410: LD_INT 50
2412: PPUSH
2413: LD_INT 1
2415: PPUSH
2416: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2420: LD_INT 104
2422: PPUSH
2423: LD_INT 24
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2433: LD_INT 43
2435: PPUSH
2436: LD_INT 79
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2446: LD_INT 43
2448: PPUSH
2449: LD_INT 68
2451: PPUSH
2452: LD_INT 1
2454: PPUSH
2455: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2459: LD_INT 99
2461: PPUSH
2462: LD_INT 114
2464: PPUSH
2465: LD_INT 1
2467: PPUSH
2468: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2472: LD_INT 103
2474: PPUSH
2475: LD_INT 114
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2485: LD_INT 152
2487: PPUSH
2488: LD_INT 85
2490: PPUSH
2491: LD_INT 1
2493: PPUSH
2494: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2498: LD_INT 156
2500: PPUSH
2501: LD_INT 92
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2511: LD_ADDR_VAR 0 2
2515: PUSH
2516: LD_STRING 10_EpsilonBase
2518: PPUSH
2519: EMPTY
2520: PPUSH
2521: CALL_OW 30
2525: ST_TO_ADDR
// if not blist then
2526: LD_VAR 0 2
2530: NOT
2531: IFFALSE 2535
// exit ;
2533: GO 3677
// for i in blist do
2535: LD_ADDR_VAR 0 3
2539: PUSH
2540: LD_VAR 0 2
2544: PUSH
2545: FOR_IN
2546: IFFALSE 2586
// if i [ 1 ] = 0 or i [ 1 ] = 1 then
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: ARRAY
2556: PUSH
2557: LD_INT 0
2559: EQUAL
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 1
2568: ARRAY
2569: PUSH
2570: LD_INT 1
2572: EQUAL
2573: OR
2574: IFFALSE 2584
// baseCorrect = 1 ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
2584: GO 2545
2586: POP
2587: POP
// if baseCorrect = 0 then
2588: LD_VAR 0 6
2592: PUSH
2593: LD_INT 0
2595: EQUAL
2596: IFFALSE 3303
// begin uc_side = 1 ;
2598: LD_ADDR_OWVAR 20
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// uc_nation = 1 ;
2606: LD_ADDR_OWVAR 21
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// bc_level = 10 ;
2614: LD_ADDR_OWVAR 43
2618: PUSH
2619: LD_INT 10
2621: ST_TO_ADDR
// bc_type = b_warehouse ;
2622: LD_ADDR_OWVAR 42
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2630: LD_INT 99
2632: PPUSH
2633: LD_INT 24
2635: PPUSH
2636: LD_INT 2
2638: PPUSH
2639: CALL_OW 47
// bc_type = b_bunker ;
2643: LD_ADDR_OWVAR 42
2647: PUSH
2648: LD_INT 32
2650: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2651: LD_ADDR_VAR 0 7
2655: PUSH
2656: LD_INT 124
2658: PPUSH
2659: LD_INT 42
2661: PPUSH
2662: LD_INT 4
2664: PPUSH
2665: CALL_OW 47
2669: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2670: LD_VAR 0 7
2674: PPUSH
2675: LD_INT 4
2677: PUSH
2678: LD_INT 5
2680: PUSH
2681: LD_INT 6
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: PUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: CALL_OW 12
2699: ARRAY
2700: PPUSH
2701: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2705: LD_ADDR_VAR 0 7
2709: PUSH
2710: LD_INT 111
2712: PPUSH
2713: LD_INT 16
2715: PPUSH
2716: LD_INT 4
2718: PPUSH
2719: CALL_OW 47
2723: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2724: LD_VAR 0 7
2728: PPUSH
2729: LD_INT 4
2731: PUSH
2732: LD_INT 5
2734: PUSH
2735: LD_INT 6
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 1
2745: PPUSH
2746: LD_INT 3
2748: PPUSH
2749: CALL_OW 12
2753: ARRAY
2754: PPUSH
2755: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2759: LD_ADDR_VAR 0 7
2763: PUSH
2764: LD_INT 113
2766: PPUSH
2767: LD_INT 21
2769: PPUSH
2770: LD_INT 4
2772: PPUSH
2773: CALL_OW 47
2777: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2778: LD_VAR 0 7
2782: PPUSH
2783: LD_INT 4
2785: PUSH
2786: LD_INT 5
2788: PUSH
2789: LD_INT 6
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PPUSH
2803: CALL_OW 12
2807: ARRAY
2808: PPUSH
2809: CALL_OW 431
// bc_type = 33 ;
2813: LD_ADDR_OWVAR 42
2817: PUSH
2818: LD_INT 33
2820: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2821: LD_ADDR_VAR 0 7
2825: PUSH
2826: LD_INT 95
2828: PPUSH
2829: LD_INT 41
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 47
2839: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2840: LD_VAR 0 7
2844: PPUSH
2845: LD_INT 4
2847: PUSH
2848: LD_INT 5
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: CALL_OW 12
2869: ARRAY
2870: PPUSH
2871: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2875: LD_ADDR_VAR 0 7
2879: PUSH
2880: LD_INT 97
2882: PPUSH
2883: LD_INT 48
2885: PPUSH
2886: LD_INT 1
2888: PPUSH
2889: CALL_OW 47
2893: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2894: LD_VAR 0 7
2898: PPUSH
2899: LD_INT 4
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 1
2915: PPUSH
2916: LD_INT 3
2918: PPUSH
2919: CALL_OW 12
2923: ARRAY
2924: PPUSH
2925: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2929: LD_ADDR_VAR 0 7
2933: PUSH
2934: LD_INT 86
2936: PPUSH
2937: LD_INT 19
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: CALL_OW 47
2947: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2948: LD_VAR 0 7
2952: PPUSH
2953: LD_INT 4
2955: PUSH
2956: LD_INT 5
2958: PUSH
2959: LD_INT 6
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 1
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 12
2977: ARRAY
2978: PPUSH
2979: CALL_OW 431
// bc_type = 30 ;
2983: LD_ADDR_OWVAR 42
2987: PUSH
2988: LD_INT 30
2990: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2991: LD_INT 104
2993: PPUSH
2994: LD_INT 24
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: CALL_OW 47
// bc_type = 29 ;
3004: LD_ADDR_OWVAR 42
3008: PUSH
3009: LD_INT 29
3011: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
3012: LD_INT 113
3014: PPUSH
3015: LD_INT 50
3017: PPUSH
3018: LD_INT 3
3020: PPUSH
3021: CALL_OW 47
// bc_type = 27 ;
3025: LD_ADDR_OWVAR 42
3029: PUSH
3030: LD_INT 27
3032: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
3033: LD_INT 98
3035: PPUSH
3036: LD_INT 26
3038: PPUSH
3039: LD_INT 2
3041: PPUSH
3042: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
3046: LD_INT 95
3048: PPUSH
3049: LD_INT 23
3051: PPUSH
3052: LD_INT 3
3054: PPUSH
3055: CALL_OW 47
// bc_type = 28 ;
3059: LD_ADDR_OWVAR 42
3063: PUSH
3064: LD_INT 28
3066: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
3067: LD_INT 107
3069: PPUSH
3070: LD_INT 32
3072: PPUSH
3073: LD_INT 1
3075: PPUSH
3076: CALL_OW 47
// bc_type = 3 ;
3080: LD_ADDR_OWVAR 42
3084: PUSH
3085: LD_INT 3
3087: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
3088: LD_INT 106
3090: PPUSH
3091: LD_INT 42
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 47
// bc_type = 16 ;
3101: LD_ADDR_OWVAR 42
3105: PUSH
3106: LD_INT 16
3108: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
3109: LD_INT 109
3111: PPUSH
3112: LD_INT 45
3114: PPUSH
3115: LD_INT 5
3117: PPUSH
3118: CALL_OW 47
// bc_type = 17 ;
3122: LD_ADDR_OWVAR 42
3126: PUSH
3127: LD_INT 17
3129: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
3130: LD_INT 106
3132: PPUSH
3133: LD_INT 46
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 47
// bc_type = 19 ;
3143: LD_ADDR_OWVAR 42
3147: PUSH
3148: LD_INT 19
3150: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
3151: LD_INT 103
3153: PPUSH
3154: LD_INT 42
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: CALL_OW 47
// bc_type = 21 ;
3164: LD_ADDR_OWVAR 42
3168: PUSH
3169: LD_INT 21
3171: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
3172: LD_INT 110
3174: PPUSH
3175: LD_INT 42
3177: PPUSH
3178: LD_INT 4
3180: PPUSH
3181: CALL_OW 47
// bc_type = 5 ;
3185: LD_ADDR_OWVAR 42
3189: PUSH
3190: LD_INT 5
3192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
3193: LD_INT 114
3195: PPUSH
3196: LD_INT 55
3198: PPUSH
3199: LD_INT 5
3201: PPUSH
3202: CALL_OW 47
// bc_type = 36 ;
3206: LD_ADDR_OWVAR 42
3210: PUSH
3211: LD_INT 36
3213: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
3214: LD_INT 96
3216: PPUSH
3217: LD_INT 28
3219: PPUSH
3220: LD_INT 2
3222: PPUSH
3223: CALL_OW 47
// bc_type = b_lab_full ;
3227: LD_ADDR_OWVAR 42
3231: PUSH
3232: LD_INT 8
3234: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3235: LD_ADDR_OWVAR 44
3239: PUSH
3240: LD_INT 15
3242: ST_TO_ADDR
// bc_kind2 = b_lab_siberium ;
3243: LD_ADDR_OWVAR 45
3247: PUSH
3248: LD_INT 11
3250: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
3251: LD_INT 116
3253: PPUSH
3254: LD_INT 38
3256: PPUSH
3257: LD_INT 4
3259: PPUSH
3260: CALL_OW 47
// bc_type = b_lab_full ;
3264: LD_ADDR_OWVAR 42
3268: PUSH
3269: LD_INT 8
3271: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
3272: LD_ADDR_OWVAR 44
3276: PUSH
3277: LD_INT 10
3279: ST_TO_ADDR
// bc_kind2 = b_lab_computer ;
3280: LD_ADDR_OWVAR 45
3284: PUSH
3285: LD_INT 12
3287: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
3288: LD_INT 112
3290: PPUSH
3291: LD_INT 29
3293: PPUSH
3294: LD_INT 4
3296: PPUSH
3297: CALL_OW 47
// end else
3301: GO 3498
// begin uc_side := 1 ;
3303: LD_ADDR_OWVAR 20
3307: PUSH
3308: LD_INT 1
3310: ST_TO_ADDR
// uc_nation := 1 ;
3311: LD_ADDR_OWVAR 21
3315: PUSH
3316: LD_INT 1
3318: ST_TO_ADDR
// for i in blist do
3319: LD_ADDR_VAR 0 3
3323: PUSH
3324: LD_VAR 0 2
3328: PUSH
3329: FOR_IN
3330: IFFALSE 3496
// begin bc_type := i [ 1 ] ;
3332: LD_ADDR_OWVAR 42
3336: PUSH
3337: LD_VAR 0 3
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3346: LD_ADDR_OWVAR 43
3350: PUSH
3351: LD_VAR 0 3
3355: PUSH
3356: LD_INT 5
3358: ARRAY
3359: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3360: LD_VAR 0 3
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: PUSH
3369: LD_INT 7
3371: PUSH
3372: LD_INT 8
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: IN
3379: IFFALSE 3409
// begin bc_kind1 := i [ 7 ] ;
3381: LD_ADDR_OWVAR 44
3385: PUSH
3386: LD_VAR 0 3
3390: PUSH
3391: LD_INT 7
3393: ARRAY
3394: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3395: LD_ADDR_OWVAR 45
3399: PUSH
3400: LD_VAR 0 3
3404: PUSH
3405: LD_INT 8
3407: ARRAY
3408: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3409: LD_ADDR_VAR 0 4
3413: PUSH
3414: LD_VAR 0 3
3418: PUSH
3419: LD_INT 2
3421: ARRAY
3422: PPUSH
3423: LD_VAR 0 3
3427: PUSH
3428: LD_INT 3
3430: ARRAY
3431: PPUSH
3432: LD_VAR 0 3
3436: PUSH
3437: LD_INT 4
3439: ARRAY
3440: PPUSH
3441: CALL_OW 47
3445: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3446: LD_VAR 0 4
3450: PPUSH
3451: CALL_OW 266
3455: PUSH
3456: LD_INT 32
3458: EQUAL
3459: PUSH
3460: LD_VAR 0 4
3464: PPUSH
3465: CALL_OW 266
3469: PUSH
3470: LD_INT 33
3472: EQUAL
3473: OR
3474: IFFALSE 3494
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
3476: LD_VAR 0 4
3480: PPUSH
3481: LD_VAR 0 3
3485: PUSH
3486: LD_INT 7
3488: ARRAY
3489: PPUSH
3490: CALL_OW 431
// end ; end ;
3494: GO 3329
3496: POP
3497: POP
// end ; uc_side := 1 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 1
3505: ST_TO_ADDR
// uc_nation := 1 ;
3506: LD_ADDR_OWVAR 21
3510: PUSH
3511: LD_INT 1
3513: ST_TO_ADDR
// for i := 1 to 8 do
3514: LD_ADDR_VAR 0 3
3518: PUSH
3519: DOUBLE
3520: LD_INT 1
3522: DEC
3523: ST_TO_ADDR
3524: LD_INT 8
3526: PUSH
3527: FOR_TO
3528: IFFALSE 3675
// begin vc_chassis := [ us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3530: LD_ADDR_OWVAR 37
3534: PUSH
3535: LD_INT 5
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 1
3551: PPUSH
3552: LD_INT 3
3554: PPUSH
3555: CALL_OW 12
3559: ARRAY
3560: ST_TO_ADDR
// vc_engine := engine_siberite ;
3561: LD_ADDR_OWVAR 39
3565: PUSH
3566: LD_INT 3
3568: ST_TO_ADDR
// vc_control := control_manual ;
3569: LD_ADDR_OWVAR 38
3573: PUSH
3574: LD_INT 1
3576: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_double_gun , us_laser ] [ i mod 6 + 1 ] ;
3577: LD_ADDR_OWVAR 40
3581: PUSH
3582: LD_INT 7
3584: PUSH
3585: LD_INT 9
3587: PUSH
3588: LD_INT 12
3590: PUSH
3591: LD_INT 13
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: LD_INT 9
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: PUSH
3608: LD_VAR 0 3
3612: PUSH
3613: LD_INT 6
3615: MOD
3616: PUSH
3617: LD_INT 1
3619: PLUS
3620: ARRAY
3621: ST_TO_ADDR
// un := CreateVehicle ;
3622: LD_ADDR_VAR 0 5
3626: PUSH
3627: CALL_OW 45
3631: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3632: LD_VAR 0 5
3636: PPUSH
3637: LD_INT 0
3639: PPUSH
3640: LD_INT 5
3642: PPUSH
3643: CALL_OW 12
3647: PPUSH
3648: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3652: LD_VAR 0 5
3656: PPUSH
3657: LD_INT 78
3659: PPUSH
3660: LD_INT 31
3662: PPUSH
3663: LD_INT 8
3665: PPUSH
3666: LD_INT 0
3668: PPUSH
3669: CALL_OW 50
// end ;
3673: GO 3527
3675: POP
3676: POP
// end ;
3677: LD_VAR 0 1
3681: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3682: LD_INT 0
3684: PPUSH
3685: PPUSH
3686: PPUSH
3687: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
3688: LD_INT 22
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 21
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PPUSH
3712: CALL_OW 69
3716: PUSH
3717: LD_EXP 1
3721: PUSH
3722: LD_EXP 3
3726: PUSH
3727: LD_EXP 4
3731: PUSH
3732: LD_EXP 5
3736: PUSH
3737: LD_EXP 6
3741: PUSH
3742: LD_EXP 7
3746: PUSH
3747: LD_EXP 8
3751: PUSH
3752: LD_EXP 9
3756: PUSH
3757: LD_EXP 10
3761: PUSH
3762: LD_EXP 11
3766: PUSH
3767: LD_EXP 12
3771: PUSH
3772: LD_EXP 13
3776: PUSH
3777: LD_EXP 14
3781: PUSH
3782: LD_EXP 15
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 6
3805: LESS
3806: DIFF
3807: IFFALSE 4030
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3809: LD_ADDR_VAR 0 4
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 1
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 2
3826: PUSH
3827: LD_INT 30
3829: PUSH
3830: LD_INT 0
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 1
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 69
3860: ST_TO_ADDR
// uc_side = 1 ;
3861: LD_ADDR_OWVAR 20
3865: PUSH
3866: LD_INT 1
3868: ST_TO_ADDR
// uc_nation = 1 ;
3869: LD_ADDR_OWVAR 21
3873: PUSH
3874: LD_INT 1
3876: ST_TO_ADDR
// for i = 1 to 6 do
3877: LD_ADDR_VAR 0 2
3881: PUSH
3882: DOUBLE
3883: LD_INT 1
3885: DEC
3886: ST_TO_ADDR
3887: LD_INT 6
3889: PUSH
3890: FOR_TO
3891: IFFALSE 4028
// begin hc_gallery =  ;
3893: LD_ADDR_OWVAR 33
3897: PUSH
3898: LD_STRING 
3900: ST_TO_ADDR
// hc_name =  ;
3901: LD_ADDR_OWVAR 26
3905: PUSH
3906: LD_STRING 
3908: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3909: LD_INT 0
3911: PPUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 2
3917: PUSH
3918: LD_INT 3
3920: PUSH
3921: LD_INT 4
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 4
3935: PPUSH
3936: CALL_OW 12
3940: ARRAY
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_INT 8
3947: PPUSH
3948: CALL_OW 12
3952: PPUSH
3953: CALL_OW 380
// un = CreateHuman ;
3957: LD_ADDR_VAR 0 3
3961: PUSH
3962: CALL_OW 44
3966: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
3967: LD_ADDR_EXP 18
3971: PUSH
3972: LD_EXP 18
3976: PUSH
3977: LD_VAR 0 3
3981: ADD
3982: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_VAR 0 4
3992: PUSH
3993: LD_INT 1
3995: ARRAY
3996: PPUSH
3997: CALL_OW 250
4001: PPUSH
4002: LD_VAR 0 4
4006: PUSH
4007: LD_INT 1
4009: ARRAY
4010: PPUSH
4011: CALL_OW 251
4015: PPUSH
4016: LD_INT 15
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 50
// end ;
4026: GO 3890
4028: POP
4029: POP
// end ; end ; end_of_file
4030: LD_VAR 0 1
4034: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4035: LD_INT 0
4037: PPUSH
4038: PPUSH
// if exist_mode then
4039: LD_VAR 0 2
4043: IFFALSE 4190
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
4045: LD_EXP 21
4049: PUSH
4050: LD_VAR 0 1
4054: STR
4055: PPUSH
4056: CALL_OW 28
4060: PUSH
4061: LD_INT 1
4063: EQUAL
4064: IFFALSE 4089
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4066: LD_ADDR_VAR 0 4
4070: PUSH
4071: LD_EXP 21
4075: PUSH
4076: LD_VAR 0 1
4080: STR
4081: PPUSH
4082: CALL_OW 34
4086: ST_TO_ADDR
// end else
4087: GO 4188
// begin if TestCharacters ( 11_ & ident ) = true then
4089: LD_STRING 11_
4091: PUSH
4092: LD_VAR 0 1
4096: STR
4097: PPUSH
4098: CALL_OW 28
4102: PUSH
4103: LD_INT 1
4105: EQUAL
4106: IFFALSE 4129
// begin unit := CreateCharacter ( 11_ & ident ) ;
4108: LD_ADDR_VAR 0 4
4112: PUSH
4113: LD_STRING 11_
4115: PUSH
4116: LD_VAR 0 1
4120: STR
4121: PPUSH
4122: CALL_OW 34
4126: ST_TO_ADDR
// end else
4127: GO 4188
// begin if TestCharacters ( 10c_ & ident ) = true then
4129: LD_STRING 10c_
4131: PUSH
4132: LD_VAR 0 1
4136: STR
4137: PPUSH
4138: CALL_OW 28
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4169
// unit := CreateCharacter ( 10c_ & ident ) else
4148: LD_ADDR_VAR 0 4
4152: PUSH
4153: LD_STRING 10c_
4155: PUSH
4156: LD_VAR 0 1
4160: STR
4161: PPUSH
4162: CALL_OW 34
4166: ST_TO_ADDR
4167: GO 4188
// unit := CreateCharacter ( 10_ & ident ) ;
4169: LD_ADDR_VAR 0 4
4173: PUSH
4174: LD_STRING 10_
4176: PUSH
4177: LD_VAR 0 1
4181: STR
4182: PPUSH
4183: CALL_OW 34
4187: ST_TO_ADDR
// end ; end ; end else
4188: GO 4205
// begin unit := NewCharacter ( ident ) ;
4190: LD_ADDR_VAR 0 4
4194: PUSH
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 25
4204: ST_TO_ADDR
// end ; result := unit ;
4205: LD_ADDR_VAR 0 3
4209: PUSH
4210: LD_VAR 0 4
4214: ST_TO_ADDR
// end ;
4215: LD_VAR 0 3
4219: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4220: LD_INT 0
4222: PPUSH
// if unit in selectedTab then
4223: LD_VAR 0 1
4227: PUSH
4228: LD_VAR 0 3
4232: IN
4233: IFFALSE 4255
// SaveCharacters ( unit , 13c_ & unitString ) else
4235: LD_VAR 0 1
4239: PPUSH
4240: LD_STRING 13c_
4242: PUSH
4243: LD_VAR 0 2
4247: STR
4248: PPUSH
4249: CALL_OW 38
4253: GO 4273
// SaveCharacters ( unit , 13s_ & unitString ) ;
4255: LD_VAR 0 1
4259: PPUSH
4260: LD_STRING 13s_
4262: PUSH
4263: LD_VAR 0 2
4267: STR
4268: PPUSH
4269: CALL_OW 38
// end ;
4273: LD_VAR 0 4
4277: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4278: LD_INT 0
4280: PPUSH
4281: PPUSH
4282: PPUSH
4283: PPUSH
// selected := [ ] ;
4284: LD_ADDR_EXP 22
4288: PUSH
4289: EMPTY
4290: ST_TO_ADDR
// othersSelect := [ ] ;
4291: LD_ADDR_EXP 23
4295: PUSH
4296: EMPTY
4297: ST_TO_ADDR
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: LD_EXP 3
4307: PUSH
4308: LD_EXP 4
4312: PUSH
4313: LD_EXP 5
4317: PUSH
4318: LD_EXP 6
4322: PUSH
4323: LD_EXP 8
4327: PUSH
4328: LD_EXP 9
4332: PUSH
4333: LD_EXP 10
4337: PUSH
4338: LD_EXP 11
4342: PUSH
4343: LD_EXP 12
4347: PUSH
4348: LD_EXP 13
4352: PUSH
4353: LD_EXP 14
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: ST_TO_ADDR
// tmp = tmp ^ others11 ;
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: LD_VAR 0 3
4380: PUSH
4381: LD_EXP 17
4385: ADD
4386: ST_TO_ADDR
// tmp = tmp ^ others12 ;
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: LD_VAR 0 3
4396: PUSH
4397: LD_EXP 16
4401: ADD
4402: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
4403: LD_ADDR_VAR 0 3
4407: PUSH
4408: LD_VAR 0 3
4412: PUSH
4413: LD_EXP 18
4417: ADD
4418: ST_TO_ADDR
// for i in tmp do
4419: LD_ADDR_VAR 0 2
4423: PUSH
4424: LD_VAR 0 3
4428: PUSH
4429: FOR_IN
4430: IFFALSE 4469
// if GetClass ( i ) = 8 then
4432: LD_VAR 0 2
4436: PPUSH
4437: CALL_OW 257
4441: PUSH
4442: LD_INT 8
4444: EQUAL
4445: IFFALSE 4467
// SetClass ( i , rand ( 1 , 4 ) ) ;
4447: LD_VAR 0 2
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: LD_INT 4
4457: PPUSH
4458: CALL_OW 12
4462: PPUSH
4463: CALL_OW 336
4467: GO 4429
4469: POP
4470: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4471: LD_ADDR_EXP 22
4475: PUSH
4476: LD_STRING 1
4478: PPUSH
4479: LD_INT 6
4481: PPUSH
4482: LD_INT 6
4484: PPUSH
4485: LD_INT -5
4487: PUSH
4488: LD_EXP 1
4492: PUSH
4493: LD_EXP 15
4497: PUSH
4498: LD_INT -2
4500: PUSH
4501: LD_INT -3
4503: PUSH
4504: LD_INT -5
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: PUSH
4515: LD_VAR 0 3
4519: ADD
4520: PUSH
4521: LD_INT -6
4523: PUSH
4524: LD_INT -4
4526: PUSH
4527: LD_EXP 2
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: ADD
4537: PPUSH
4538: LD_INT 1
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 2
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 3
4560: PUSH
4561: LD_INT 0
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 4
4570: PUSH
4571: LD_INT 2
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: LD_INT 5
4580: PUSH
4581: LD_INT 0
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: PPUSH
4599: CALL_OW 42
4603: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4604: LD_ADDR_EXP 23
4608: PUSH
4609: LD_EXP 22
4613: PUSH
4614: LD_EXP 3
4618: PUSH
4619: LD_EXP 4
4623: PUSH
4624: LD_EXP 5
4628: PUSH
4629: LD_EXP 6
4633: PUSH
4634: LD_EXP 7
4638: PUSH
4639: LD_EXP 8
4643: PUSH
4644: LD_EXP 9
4648: PUSH
4649: LD_EXP 10
4653: PUSH
4654: LD_EXP 11
4658: PUSH
4659: LD_EXP 12
4663: PUSH
4664: LD_EXP 13
4668: PUSH
4669: LD_EXP 14
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: DIFF
4688: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4689: LD_ADDR_VAR 0 4
4693: PUSH
4694: LD_VAR 0 3
4698: PUSH
4699: LD_EXP 22
4703: DIFF
4704: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4705: LD_ADDR_VAR 0 4
4709: PUSH
4710: LD_VAR 0 4
4714: PUSH
4715: LD_EXP 3
4719: PUSH
4720: LD_EXP 4
4724: PUSH
4725: LD_EXP 5
4729: PUSH
4730: LD_EXP 6
4734: PUSH
4735: LD_EXP 7
4739: PUSH
4740: LD_EXP 8
4744: PUSH
4745: LD_EXP 9
4749: PUSH
4750: LD_EXP 10
4754: PUSH
4755: LD_EXP 11
4759: PUSH
4760: LD_EXP 12
4764: PUSH
4765: LD_EXP 13
4769: PUSH
4770: LD_EXP 14
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: DIFF
4789: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4790: LD_VAR 0 4
4794: PPUSH
4795: LD_STRING 13s_others
4797: PPUSH
4798: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4802: LD_EXP 23
4806: PPUSH
4807: LD_STRING 13c_others
4809: PPUSH
4810: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4814: LD_EXP 1
4818: PPUSH
4819: LD_STRING 13c_JMM
4821: PPUSH
4822: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4826: LD_EXP 15
4830: PPUSH
4831: LD_STRING 13c_Stevens
4833: PPUSH
4834: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4838: LD_EXP 3
4842: PPUSH
4843: LD_STRING Lisa
4845: PPUSH
4846: LD_EXP 22
4850: PPUSH
4851: CALL 4220 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4855: LD_EXP 8
4859: PPUSH
4860: LD_STRING Brown
4862: PPUSH
4863: LD_EXP 22
4867: PPUSH
4868: CALL 4220 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4872: LD_EXP 4
4876: PPUSH
4877: LD_STRING Donaldson
4879: PPUSH
4880: LD_EXP 22
4884: PPUSH
4885: CALL 4220 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4889: LD_EXP 5
4893: PPUSH
4894: LD_STRING Bobby
4896: PPUSH
4897: LD_EXP 22
4901: PPUSH
4902: CALL 4220 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4906: LD_EXP 6
4910: PPUSH
4911: LD_STRING Cyrus
4913: PPUSH
4914: LD_EXP 22
4918: PPUSH
4919: CALL 4220 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4923: LD_EXP 7
4927: PPUSH
4928: LD_STRING Denis
4930: PPUSH
4931: LD_EXP 22
4935: PPUSH
4936: CALL 4220 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4940: LD_EXP 9
4944: PPUSH
4945: LD_STRING Gladstone
4947: PPUSH
4948: LD_EXP 22
4952: PPUSH
4953: CALL 4220 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4957: LD_EXP 10
4961: PPUSH
4962: LD_STRING Houten
4964: PPUSH
4965: LD_EXP 22
4969: PPUSH
4970: CALL 4220 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4974: LD_EXP 11
4978: PPUSH
4979: LD_STRING Cornel
4981: PPUSH
4982: LD_EXP 22
4986: PPUSH
4987: CALL 4220 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4991: LD_EXP 12
4995: PPUSH
4996: LD_STRING Gary
4998: PPUSH
4999: LD_EXP 22
5003: PPUSH
5004: CALL 4220 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5008: LD_EXP 13
5012: PPUSH
5013: LD_STRING Frank
5015: PPUSH
5016: LD_EXP 22
5020: PPUSH
5021: CALL 4220 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5025: LD_EXP 14
5029: PPUSH
5030: LD_STRING Kikuchi
5032: PPUSH
5033: LD_EXP 22
5037: PPUSH
5038: CALL 4220 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5042: LD_INT 22
5044: PUSH
5045: LD_INT 1
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: LD_INT 21
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PPUSH
5066: CALL_OW 69
5070: PPUSH
5071: LD_INT 4
5073: PPUSH
5074: CALL_OW 235
// SetSide ( selected , 1 ) ;
5078: LD_EXP 22
5082: PPUSH
5083: LD_INT 1
5085: PPUSH
5086: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5090: LD_EXP 1
5094: PUSH
5095: LD_EXP 15
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , 4 ] ] ) do
5111: LD_ADDR_VAR 0 2
5115: PUSH
5116: LD_INT 21
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_INT 4
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PPUSH
5140: CALL_OW 69
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5159
// RemoveUnit ( i ) ;
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 64
5157: GO 5145
5159: POP
5160: POP
// end ;
5161: LD_VAR 0 1
5165: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5170: LD_ADDR_VAR 0 2
5174: PUSH
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 289
5187: PUSH
5188: LD_VAR 0 1
5192: PPUSH
5193: LD_INT 2
5195: PPUSH
5196: CALL_OW 289
5200: PUSH
5201: LD_VAR 0 1
5205: PPUSH
5206: LD_INT 3
5208: PPUSH
5209: CALL_OW 289
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: LIST
5218: ST_TO_ADDR
// end ; end_of_file
5219: LD_VAR 0 2
5223: RET
// on Command ( comandid ) do var i ;
5224: LD_INT 0
5226: PPUSH
// begin if comandid = 65 then
5227: LD_VAR 0 1
5231: PUSH
5232: LD_INT 65
5234: EQUAL
5235: IFFALSE 5276
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: PUSH
5260: FOR_IN
5261: IFFALSE 5274
// ComStop ( i ) ;
5263: LD_VAR 0 2
5267: PPUSH
5268: CALL_OW 141
5272: GO 5260
5274: POP
5275: POP
// end ;
5276: PPOPN 2
5278: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5279: LD_VAR 0 1
5283: PUSH
5284: LD_EXP 1
5288: EQUAL
5289: IFFALSE 5298
// YouLost ( JMM ) ;
5291: LD_STRING JMM
5293: PPUSH
5294: CALL_OW 104
// end ;
5298: PPOPN 1
5300: END
