// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 909 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2064 0 0
// PrepareHeroes ;
  82: CALL 1089 0 0
// PrepareRandoms ;
  86: CALL 3427 0 0
// Action ;
  90: CALL 5217 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 806
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 581: LD_STRING enableBioCharacter(BIO_HUGH)
 583: PPUSH
 584: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_STRING Lisa
 595: PPUSH
 596: LD_EXP 22
 600: PPUSH
 601: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 605: LD_EXP 8
 609: PPUSH
 610: LD_STRING Brown
 612: PPUSH
 613: LD_EXP 22
 617: PPUSH
 618: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 622: LD_EXP 4
 626: PPUSH
 627: LD_STRING Donaldson
 629: PPUSH
 630: LD_EXP 22
 634: PPUSH
 635: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_STRING Bobby
 646: PPUSH
 647: LD_EXP 22
 651: PPUSH
 652: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_STRING Cyrus
 663: PPUSH
 664: LD_EXP 22
 668: PPUSH
 669: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 673: LD_EXP 7
 677: PPUSH
 678: LD_STRING Denis
 680: PPUSH
 681: LD_EXP 22
 685: PPUSH
 686: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 690: LD_EXP 9
 694: PPUSH
 695: LD_STRING Gladstone
 697: PPUSH
 698: LD_EXP 22
 702: PPUSH
 703: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 707: LD_EXP 10
 711: PPUSH
 712: LD_STRING Houten
 714: PPUSH
 715: LD_EXP 22
 719: PPUSH
 720: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_STRING Cornel
 731: PPUSH
 732: LD_EXP 22
 736: PPUSH
 737: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 741: LD_EXP 12
 745: PPUSH
 746: LD_STRING Gary
 748: PPUSH
 749: LD_EXP 22
 753: PPUSH
 754: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 758: LD_EXP 13
 762: PPUSH
 763: LD_STRING Frank
 765: PPUSH
 766: LD_EXP 22
 770: PPUSH
 771: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 775: LD_EXP 14
 779: PPUSH
 780: LD_STRING Kikuchi
 782: PPUSH
 783: LD_EXP 22
 787: PPUSH
 788: CALL 4223 0 3
// SaveCargos ;
 792: CALL 809 0 0
// ChangeMap ( 13 , %_cont ) ;
 796: LD_INT 13
 798: PPUSH
 799: LD_STRING %_cont
 801: PPUSH
 802: CALL_OW 340
// end ;
 806: PPOPN 2
 808: END
// export function SaveCargos ; var i ; begin
 809: LD_INT 0
 811: PPUSH
 812: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: LD_INT 2
 820: PPUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 33
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 34
 843: PUSH
 844: LD_INT 12
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL_OW 70
 860: PUSH
 861: FOR_IN
 862: IFFALSE 890
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 864: LD_ADDR_EXP 20
 868: PUSH
 869: LD_EXP 20
 873: PUSH
 874: LD_VAR 0 2
 878: PPUSH
 879: CALL 66623 0 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: ADD
 887: ST_TO_ADDR
 888: GO 861
 890: POP
 891: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 892: LD_EXP 20
 896: PPUSH
 897: LD_STRING 13_ResourcesInCargo13_1
 899: PPUSH
 900: CALL_OW 39
// end ;
 904: LD_VAR 0 1
 908: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_STRING 10_EpsilonEnv
 924: PPUSH
 925: EMPTY
 926: PPUSH
 927: CALL_OW 30
 931: ST_TO_ADDR
// if not tmp then
 932: LD_VAR 0 2
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1084
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 941: LD_ADDR_VAR 0 3
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 353
 953: ST_TO_ADDR
// if not list then
 954: LD_VAR 0 3
 958: NOT
 959: IFFALSE 963
// exit ;
 961: GO 1084
// for i in list do
 963: LD_ADDR_VAR 0 4
 967: PUSH
 968: LD_VAR 0 3
 972: PUSH
 973: FOR_IN
 974: IFFALSE 1082
// begin exist := false ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: LD_INT 0
 983: ST_TO_ADDR
// for j in tmp do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: LD_VAR 0 2
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1049
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 997: LD_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PUSH
1006: LD_VAR 0 5
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: EQUAL
1015: PUSH
1016: LD_VAR 0 4
1020: PUSH
1021: LD_INT 2
1023: ARRAY
1024: PUSH
1025: LD_VAR 0 5
1029: PUSH
1030: LD_INT 2
1032: ARRAY
1033: EQUAL
1034: AND
1035: IFFALSE 1047
// begin exist := true ;
1037: LD_ADDR_VAR 0 6
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// break ;
1045: GO 1049
// end ;
1047: GO 994
1049: POP
1050: POP
// if not exist then
1051: LD_VAR 0 6
1055: NOT
1056: IFFALSE 1080
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 4
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 347
// end ;
1080: GO 973
1082: POP
1083: POP
// end ; end_of_file
1084: LD_VAR 0 1
1088: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: LD_INT 22
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 23
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 30
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// if tmp then
1161: LD_VAR 0 4
1165: IFFALSE 1287
// begin x := GetX ( tmp [ 1 ] ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1186: LD_ADDR_VAR 0 6
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 251
1204: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1205: LD_VAR 0 4
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_STRING epsilon
1216: PPUSH
1217: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1221: LD_ADDR_VAR 0 7
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 274
1239: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1240: LD_VAR 0 7
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 3000
1250: PPUSH
1251: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1255: LD_VAR 0 7
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 500
1265: PPUSH
1266: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1270: LD_VAR 0 7
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 200
1280: PPUSH
1281: CALL_OW 277
// end else
1285: GO 1303
// begin x := 104 ;
1287: LD_ADDR_VAR 0 5
1291: PUSH
1292: LD_INT 104
1294: ST_TO_ADDR
// y := 32 ;
1295: LD_ADDR_VAR 0 6
1299: PUSH
1300: LD_INT 32
1302: ST_TO_ADDR
// end ; uc_side := 1 ;
1303: LD_ADDR_OWVAR 20
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1311: LD_ADDR_EXP 1
1315: PUSH
1316: LD_STRING JMM
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 3697 0 2
1326: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1327: LD_ADDR_EXP 3
1331: PUSH
1332: LD_STRING Lisa
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 3697 0 2
1342: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1343: LD_ADDR_EXP 4
1347: PUSH
1348: LD_STRING Donaldson
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 3697 0 2
1358: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1359: LD_ADDR_EXP 5
1363: PUSH
1364: LD_STRING Bobby
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 3697 0 2
1374: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1375: LD_ADDR_EXP 6
1379: PUSH
1380: LD_STRING Cyrus
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL 3697 0 2
1390: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1391: LD_ADDR_EXP 7
1395: PUSH
1396: LD_STRING Denis
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: CALL 3697 0 2
1406: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1407: LD_ADDR_EXP 8
1411: PUSH
1412: LD_STRING Brown
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 3697 0 2
1422: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: LD_STRING Gladstone
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL 3697 0 2
1438: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_STRING Houten
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL 3697 0 2
1454: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1455: LD_ADDR_EXP 11
1459: PUSH
1460: LD_STRING Cornell
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL 3697 0 2
1470: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_STRING Gary
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL 3697 0 2
1486: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1487: LD_ADDR_EXP 13
1491: PUSH
1492: LD_STRING Frank
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL 3697 0 2
1502: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1503: LD_ADDR_EXP 14
1507: PUSH
1508: LD_STRING Kikuchi
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL 3697 0 2
1518: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_STRING Stevens
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL 3697 0 2
1534: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_STRING Powell
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL 3697 0 2
1550: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_VAR 0 6
1565: PPUSH
1566: LD_INT 4
1568: PPUSH
1569: LD_INT 0
1571: PPUSH
1572: CALL 3870 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1576: LD_EXP 15
1580: PPUSH
1581: LD_VAR 0 5
1585: PPUSH
1586: LD_VAR 0 6
1590: PPUSH
1591: LD_INT 4
1593: PPUSH
1594: LD_INT 0
1596: PPUSH
1597: CALL 3870 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1601: LD_EXP 3
1605: PPUSH
1606: LD_VAR 0 5
1610: PPUSH
1611: LD_VAR 0 6
1615: PPUSH
1616: LD_INT 35
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 3870 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1626: LD_EXP 4
1630: PPUSH
1631: LD_VAR 0 5
1635: PPUSH
1636: LD_VAR 0 6
1640: PPUSH
1641: LD_INT 35
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: CALL 3870 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 6
1665: PPUSH
1666: LD_INT 35
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL 3870 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_VAR 0 5
1685: PPUSH
1686: LD_VAR 0 6
1690: PPUSH
1691: LD_INT 35
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: CALL 3870 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1701: LD_EXP 7
1705: PPUSH
1706: LD_VAR 0 5
1710: PPUSH
1711: LD_VAR 0 6
1715: PPUSH
1716: LD_INT 35
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL 3870 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_VAR 0 5
1735: PPUSH
1736: LD_VAR 0 6
1740: PPUSH
1741: LD_INT 35
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 3870 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1751: LD_EXP 9
1755: PPUSH
1756: LD_VAR 0 5
1760: PPUSH
1761: LD_VAR 0 6
1765: PPUSH
1766: LD_INT 35
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL 3870 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1776: LD_EXP 10
1780: PPUSH
1781: LD_VAR 0 5
1785: PPUSH
1786: LD_VAR 0 6
1790: PPUSH
1791: LD_INT 35
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL 3870 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1801: LD_EXP 11
1805: PPUSH
1806: LD_VAR 0 5
1810: PPUSH
1811: LD_VAR 0 6
1815: PPUSH
1816: LD_INT 35
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL 3870 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1826: LD_EXP 12
1830: PPUSH
1831: LD_VAR 0 5
1835: PPUSH
1836: LD_VAR 0 6
1840: PPUSH
1841: LD_INT 35
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL 3870 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1851: LD_EXP 13
1855: PPUSH
1856: LD_VAR 0 5
1860: PPUSH
1861: LD_VAR 0 6
1865: PPUSH
1866: LD_INT 35
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL 3870 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1876: LD_EXP 14
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: LD_VAR 0 6
1890: PPUSH
1891: LD_INT 35
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL 3870 0 5
// SetClass ( JMM , 1 ) ;
1901: LD_EXP 1
1905: PPUSH
1906: LD_INT 1
1908: PPUSH
1909: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1913: LD_ADDR_EXP 16
1917: PUSH
1918: LD_STRING 12_other_survivors
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1926: LD_ADDR_EXP 17
1930: PUSH
1931: LD_STRING 12_others
1933: PPUSH
1934: CALL_OW 31
1938: ST_TO_ADDR
// for i in others11 do
1939: LD_ADDR_VAR 0 2
1943: PUSH
1944: LD_EXP 17
1948: PUSH
1949: FOR_IN
1950: IFFALSE 1997
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 4
1961: PUSH
1962: LD_INT 1
1964: ARRAY
1965: PPUSH
1966: CALL_OW 250
1970: PPUSH
1971: LD_VAR 0 4
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 251
1984: PPUSH
1985: LD_INT 15
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL 3870 0 5
1995: GO 1949
1997: POP
1998: POP
// for i in others12 do
1999: LD_ADDR_VAR 0 2
2003: PUSH
2004: LD_EXP 16
2008: PUSH
2009: FOR_IN
2010: IFFALSE 2057
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_VAR 0 4
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 250
2030: PPUSH
2031: LD_VAR 0 4
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: PPUSH
2040: CALL_OW 251
2044: PPUSH
2045: LD_INT 15
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL 3870 0 5
2055: GO 2009
2057: POP
2058: POP
// end ;
2059: LD_VAR 0 1
2063: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2064: LD_INT 0
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
2070: PPUSH
2071: PPUSH
2072: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2073: LD_INT 113
2075: PPUSH
2076: LD_INT 50
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2086: LD_INT 99
2088: PPUSH
2089: LD_INT 19
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2099: LD_INT 43
2101: PPUSH
2102: LD_INT 79
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2112: LD_INT 43
2114: PPUSH
2115: LD_INT 68
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2125: LD_INT 99
2127: PPUSH
2128: LD_INT 114
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 114
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2151: LD_INT 152
2153: PPUSH
2154: LD_INT 85
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2164: LD_INT 156
2166: PPUSH
2167: LD_INT 92
2169: PPUSH
2170: LD_INT 1
2172: PPUSH
2173: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: LD_STRING 10_EpsilonBase
2184: PPUSH
2185: EMPTY
2186: PPUSH
2187: CALL_OW 30
2191: ST_TO_ADDR
// if not blist then
2192: LD_VAR 0 2
2196: NOT
2197: IFFALSE 2201
// exit ;
2199: GO 3422
// for i in blist do
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: LD_VAR 0 2
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2254
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: PUSH
2227: LD_VAR 0 3
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PUSH
2236: LD_INT 1
2238: EQUAL
2239: OR
2240: IFFALSE 2252
// begin baseCorrect := 1 ;
2242: LD_ADDR_VAR 0 6
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// break ;
2250: GO 2254
// end ;
2252: GO 2211
2254: POP
2255: POP
// if baseCorrect = 0 then
2256: LD_VAR 0 6
2260: PUSH
2261: LD_INT 0
2263: EQUAL
2264: IFFALSE 2971
// begin uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// bc_level := 10 ;
2282: LD_ADDR_OWVAR 43
2286: PUSH
2287: LD_INT 10
2289: ST_TO_ADDR
// bc_type := b_warehouse ;
2290: LD_ADDR_OWVAR 42
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2298: LD_INT 99
2300: PPUSH
2301: LD_INT 24
2303: PPUSH
2304: LD_INT 2
2306: PPUSH
2307: CALL_OW 47
// bc_type := b_bunker ;
2311: LD_ADDR_OWVAR 42
2315: PUSH
2316: LD_INT 32
2318: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2319: LD_ADDR_VAR 0 7
2323: PUSH
2324: LD_INT 124
2326: PPUSH
2327: LD_INT 42
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 47
2337: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2338: LD_VAR 0 7
2342: PPUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 5
2348: PUSH
2349: LD_INT 6
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: CALL_OW 12
2367: ARRAY
2368: PPUSH
2369: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2373: LD_ADDR_VAR 0 7
2377: PUSH
2378: LD_INT 111
2380: PPUSH
2381: LD_INT 16
2383: PPUSH
2384: LD_INT 4
2386: PPUSH
2387: CALL_OW 47
2391: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2392: LD_VAR 0 7
2396: PPUSH
2397: LD_INT 4
2399: PUSH
2400: LD_INT 5
2402: PUSH
2403: LD_INT 6
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 3
2416: PPUSH
2417: CALL_OW 12
2421: ARRAY
2422: PPUSH
2423: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2427: LD_ADDR_VAR 0 7
2431: PUSH
2432: LD_INT 113
2434: PPUSH
2435: LD_INT 21
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: CALL_OW 47
2445: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2446: LD_VAR 0 7
2450: PPUSH
2451: LD_INT 4
2453: PUSH
2454: LD_INT 5
2456: PUSH
2457: LD_INT 6
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 1
2467: PPUSH
2468: LD_INT 3
2470: PPUSH
2471: CALL_OW 12
2475: ARRAY
2476: PPUSH
2477: CALL_OW 431
// bc_type := 33 ;
2481: LD_ADDR_OWVAR 42
2485: PUSH
2486: LD_INT 33
2488: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_INT 95
2496: PPUSH
2497: LD_INT 41
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 47
2507: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2508: LD_VAR 0 7
2512: PPUSH
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ARRAY
2538: PPUSH
2539: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2543: LD_ADDR_VAR 0 7
2547: PUSH
2548: LD_INT 97
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: CALL_OW 47
2561: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2562: LD_VAR 0 7
2566: PPUSH
2567: LD_INT 4
2569: PUSH
2570: LD_INT 5
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 1
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL_OW 12
2591: ARRAY
2592: PPUSH
2593: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2597: LD_ADDR_VAR 0 7
2601: PUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 19
2607: PPUSH
2608: LD_INT 1
2610: PPUSH
2611: CALL_OW 47
2615: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2616: LD_VAR 0 7
2620: PPUSH
2621: LD_INT 4
2623: PUSH
2624: LD_INT 5
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 1
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: CALL_OW 12
2645: ARRAY
2646: PPUSH
2647: CALL_OW 431
// bc_type := 30 ;
2651: LD_ADDR_OWVAR 42
2655: PUSH
2656: LD_INT 30
2658: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2659: LD_INT 104
2661: PPUSH
2662: LD_INT 24
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 47
// bc_type := 29 ;
2672: LD_ADDR_OWVAR 42
2676: PUSH
2677: LD_INT 29
2679: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2680: LD_INT 113
2682: PPUSH
2683: LD_INT 50
2685: PPUSH
2686: LD_INT 3
2688: PPUSH
2689: CALL_OW 47
// bc_type := 27 ;
2693: LD_ADDR_OWVAR 42
2697: PUSH
2698: LD_INT 27
2700: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2701: LD_INT 98
2703: PPUSH
2704: LD_INT 26
2706: PPUSH
2707: LD_INT 2
2709: PPUSH
2710: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2714: LD_INT 95
2716: PPUSH
2717: LD_INT 23
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: CALL_OW 47
// bc_type := 28 ;
2727: LD_ADDR_OWVAR 42
2731: PUSH
2732: LD_INT 28
2734: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2735: LD_INT 107
2737: PPUSH
2738: LD_INT 32
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 47
// bc_type := 3 ;
2748: LD_ADDR_OWVAR 42
2752: PUSH
2753: LD_INT 3
2755: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2756: LD_INT 106
2758: PPUSH
2759: LD_INT 42
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL_OW 47
// bc_type := 16 ;
2769: LD_ADDR_OWVAR 42
2773: PUSH
2774: LD_INT 16
2776: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2777: LD_INT 109
2779: PPUSH
2780: LD_INT 45
2782: PPUSH
2783: LD_INT 5
2785: PPUSH
2786: CALL_OW 47
// bc_type := 17 ;
2790: LD_ADDR_OWVAR 42
2794: PUSH
2795: LD_INT 17
2797: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2798: LD_INT 106
2800: PPUSH
2801: LD_INT 46
2803: PPUSH
2804: LD_INT 0
2806: PPUSH
2807: CALL_OW 47
// bc_type := 19 ;
2811: LD_ADDR_OWVAR 42
2815: PUSH
2816: LD_INT 19
2818: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2819: LD_INT 103
2821: PPUSH
2822: LD_INT 42
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: CALL_OW 47
// bc_type := 21 ;
2832: LD_ADDR_OWVAR 42
2836: PUSH
2837: LD_INT 21
2839: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2840: LD_INT 110
2842: PPUSH
2843: LD_INT 42
2845: PPUSH
2846: LD_INT 4
2848: PPUSH
2849: CALL_OW 47
// bc_type := 5 ;
2853: LD_ADDR_OWVAR 42
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2861: LD_INT 114
2863: PPUSH
2864: LD_INT 55
2866: PPUSH
2867: LD_INT 5
2869: PPUSH
2870: CALL_OW 47
// bc_type := 36 ;
2874: LD_ADDR_OWVAR 42
2878: PUSH
2879: LD_INT 36
2881: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2882: LD_INT 96
2884: PPUSH
2885: LD_INT 28
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 47
// bc_type := b_lab_full ;
2895: LD_ADDR_OWVAR 42
2899: PUSH
2900: LD_INT 8
2902: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2903: LD_ADDR_OWVAR 44
2907: PUSH
2908: LD_INT 15
2910: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2911: LD_ADDR_OWVAR 45
2915: PUSH
2916: LD_INT 11
2918: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2919: LD_INT 116
2921: PPUSH
2922: LD_INT 38
2924: PPUSH
2925: LD_INT 4
2927: PPUSH
2928: CALL_OW 47
// bc_type := b_lab_full ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 8
2939: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2940: LD_ADDR_OWVAR 44
2944: PUSH
2945: LD_INT 10
2947: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2948: LD_ADDR_OWVAR 45
2952: PUSH
2953: LD_INT 12
2955: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2956: LD_INT 112
2958: PPUSH
2959: LD_INT 29
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 47
// end else
2969: GO 3219
// begin uc_side := 1 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// for i in blist do
2979: LD_ADDR_VAR 0 3
2983: PUSH
2984: LD_VAR 0 2
2988: PUSH
2989: FOR_IN
2990: IFFALSE 3217
// begin InitBc ;
2992: CALL_OW 21
// uc_nation := i [ 6 ] ;
2996: LD_ADDR_OWVAR 21
3000: PUSH
3001: LD_VAR 0 3
3005: PUSH
3006: LD_INT 6
3008: ARRAY
3009: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3010: LD_ADDR_OWVAR 42
3014: PUSH
3015: LD_VAR 0 3
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3024: LD_ADDR_OWVAR 43
3028: PUSH
3029: LD_VAR 0 3
3033: PUSH
3034: LD_INT 5
3036: ARRAY
3037: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3038: LD_VAR 0 3
3042: PUSH
3043: LD_INT 1
3045: ARRAY
3046: PUSH
3047: LD_INT 7
3049: PUSH
3050: LD_INT 8
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: IN
3057: IFFALSE 3087
// begin bc_kind1 := i [ 7 ] ;
3059: LD_ADDR_OWVAR 44
3063: PUSH
3064: LD_VAR 0 3
3068: PUSH
3069: LD_INT 7
3071: ARRAY
3072: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3073: LD_ADDR_OWVAR 45
3077: PUSH
3078: LD_VAR 0 3
3082: PUSH
3083: LD_INT 8
3085: ARRAY
3086: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3087: LD_ADDR_VAR 0 4
3091: PUSH
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 2
3099: ARRAY
3100: PPUSH
3101: LD_VAR 0 3
3105: PUSH
3106: LD_INT 3
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 3
3114: PUSH
3115: LD_INT 4
3117: ARRAY
3118: PPUSH
3119: CALL_OW 47
3123: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3124: LD_VAR 0 4
3128: PPUSH
3129: CALL_OW 266
3133: PUSH
3134: LD_INT 32
3136: PUSH
3137: LD_INT 33
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: IN
3144: IFFALSE 3215
// if i [ 7 ] then
3146: LD_VAR 0 3
3150: PUSH
3151: LD_INT 7
3153: ARRAY
3154: IFFALSE 3176
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3156: LD_VAR 0 4
3160: PPUSH
3161: LD_VAR 0 3
3165: PUSH
3166: LD_INT 7
3168: ARRAY
3169: PPUSH
3170: CALL_OW 431
3174: GO 3215
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3176: LD_VAR 0 4
3180: PPUSH
3181: LD_INT 11
3183: PUSH
3184: LD_INT 7
3186: PUSH
3187: LD_INT 4
3189: PUSH
3190: LD_INT 5
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 4
3204: PPUSH
3205: CALL_OW 12
3209: ARRAY
3210: PPUSH
3211: CALL_OW 431
// end ;
3215: GO 2989
3217: POP
3218: POP
// end ; uc_side := 1 ;
3219: LD_ADDR_OWVAR 20
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// uc_nation := 1 ;
3227: LD_ADDR_OWVAR 21
3231: PUSH
3232: LD_INT 1
3234: ST_TO_ADDR
// for i := 1 to 8 do
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: DOUBLE
3241: LD_INT 1
3243: DEC
3244: ST_TO_ADDR
3245: LD_INT 8
3247: PUSH
3248: FOR_TO
3249: IFFALSE 3420
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3251: LD_ADDR_OWVAR 37
3255: PUSH
3256: LD_INT 5
3258: PUSH
3259: LD_INT 5
3261: PUSH
3262: LD_INT 3
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_INT 4
3279: PPUSH
3280: CALL_OW 12
3284: ARRAY
3285: ST_TO_ADDR
// vc_engine := engine_siberite ;
3286: LD_ADDR_OWVAR 39
3290: PUSH
3291: LD_INT 3
3293: ST_TO_ADDR
// vc_control := control_manual ;
3294: LD_ADDR_OWVAR 38
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3302: LD_OWVAR 37
3306: PUSH
3307: LD_INT 4
3309: EQUAL
3310: IFFALSE 3322
// vc_weapon := us_heavy_gun else
3312: LD_ADDR_OWVAR 40
3316: PUSH
3317: LD_INT 6
3319: ST_TO_ADDR
3320: GO 3367
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3322: LD_ADDR_OWVAR 40
3326: PUSH
3327: LD_INT 7
3329: PUSH
3330: LD_INT 9
3332: PUSH
3333: LD_INT 12
3335: PUSH
3336: LD_INT 13
3338: PUSH
3339: LD_INT 9
3341: PUSH
3342: LD_INT 9
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_VAR 0 3
3357: PUSH
3358: LD_INT 6
3360: MOD
3361: PUSH
3362: LD_INT 1
3364: PLUS
3365: ARRAY
3366: ST_TO_ADDR
// un := CreateVehicle ;
3367: LD_ADDR_VAR 0 5
3371: PUSH
3372: CALL_OW 45
3376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3377: LD_VAR 0 5
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: LD_INT 5
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_INT 78
3404: PPUSH
3405: LD_INT 31
3407: PPUSH
3408: LD_INT 8
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 50
// end ;
3418: GO 3248
3420: POP
3421: POP
// end ;
3422: LD_VAR 0 1
3426: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3433: LD_INT 22
3435: PUSH
3436: LD_INT 1
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 69
3461: PUSH
3462: LD_INT 6
3464: LESS
3465: IFFALSE 3692
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3467: LD_ADDR_VAR 0 4
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_INT 1
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 0
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 30
3497: PUSH
3498: LD_INT 1
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 69
3518: ST_TO_ADDR
// uc_side := 1 ;
3519: LD_ADDR_OWVAR 20
3523: PUSH
3524: LD_INT 1
3526: ST_TO_ADDR
// uc_nation := 1 ;
3527: LD_ADDR_OWVAR 21
3531: PUSH
3532: LD_INT 1
3534: ST_TO_ADDR
// for i := 1 to 6 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 6
3547: PUSH
3548: FOR_TO
3549: IFFALSE 3690
// begin hc_gallery :=  ;
3551: LD_ADDR_OWVAR 33
3555: PUSH
3556: LD_STRING 
3558: ST_TO_ADDR
// hc_name :=  ;
3559: LD_ADDR_OWVAR 26
3563: PUSH
3564: LD_STRING 
3566: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 2
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: LD_INT 4
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_INT 4
3593: PPUSH
3594: CALL_OW 12
3598: ARRAY
3599: PPUSH
3600: LD_INT 5
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: CALL_OW 12
3610: PPUSH
3611: CALL_OW 380
// un := CreateHuman ;
3615: LD_ADDR_VAR 0 3
3619: PUSH
3620: CALL_OW 44
3624: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3625: LD_ADDR_EXP 18
3629: PUSH
3630: LD_EXP 18
3634: PPUSH
3635: LD_VAR 0 3
3639: PPUSH
3640: CALL 63058 0 2
3644: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PPUSH
3659: CALL_OW 250
3663: PPUSH
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 1
3671: ARRAY
3672: PPUSH
3673: CALL_OW 251
3677: PPUSH
3678: LD_INT 15
3680: PPUSH
3681: LD_INT 0
3683: PPUSH
3684: CALL 3870 0 5
// end ;
3688: GO 3548
3690: POP
3691: POP
// end ; end ; end_of_file
3692: LD_VAR 0 1
3696: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
// if existMode then
3701: LD_VAR 0 2
3705: IFFALSE 3840
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3707: LD_EXP 21
3711: PUSH
3712: LD_VAR 0 1
3716: STR
3717: PPUSH
3718: CALL_OW 28
3722: IFFALSE 3747
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_EXP 21
3733: PUSH
3734: LD_VAR 0 1
3738: STR
3739: PPUSH
3740: CALL_OW 34
3744: ST_TO_ADDR
3745: GO 3838
// begin if TestCharacters ( 11_ & ident ) then
3747: LD_STRING 11_
3749: PUSH
3750: LD_VAR 0 1
3754: STR
3755: PPUSH
3756: CALL_OW 28
3760: IFFALSE 3783
// unit := CreateCharacter ( 11_ & ident ) else
3762: LD_ADDR_VAR 0 4
3766: PUSH
3767: LD_STRING 11_
3769: PUSH
3770: LD_VAR 0 1
3774: STR
3775: PPUSH
3776: CALL_OW 34
3780: ST_TO_ADDR
3781: GO 3838
// if TestCharacters ( 10c_ & ident ) then
3783: LD_STRING 10c_
3785: PUSH
3786: LD_VAR 0 1
3790: STR
3791: PPUSH
3792: CALL_OW 28
3796: IFFALSE 3819
// unit := CreateCharacter ( 10c_ & ident ) else
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_STRING 10c_
3805: PUSH
3806: LD_VAR 0 1
3810: STR
3811: PPUSH
3812: CALL_OW 34
3816: ST_TO_ADDR
3817: GO 3838
// unit := CreateCharacter ( 10_ & ident ) ;
3819: LD_ADDR_VAR 0 4
3823: PUSH
3824: LD_STRING 10_
3826: PUSH
3827: LD_VAR 0 1
3831: STR
3832: PPUSH
3833: CALL_OW 34
3837: ST_TO_ADDR
// end ; end else
3838: GO 3855
// unit := NewCharacter ( ident ) ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: CALL_OW 25
3854: ST_TO_ADDR
// result := unit ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: LD_VAR 0 4
3864: ST_TO_ADDR
// end ;
3865: LD_VAR 0 3
3869: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
3874: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3875: LD_ADDR_VAR 0 8
3879: PUSH
3880: LD_INT 22
3882: PUSH
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 255
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 21
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: LD_INT 3
3909: PUSH
3910: LD_INT 30
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 69
3933: ST_TO_ADDR
// if not tmp then
3934: LD_VAR 0 8
3938: NOT
3939: IFFALSE 3972
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_VAR 0 2
3950: PPUSH
3951: LD_VAR 0 3
3955: PPUSH
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_VAR 0 5
3965: PPUSH
3966: CALL_OW 50
// exit ;
3970: GO 4218
// end ; for i in tmp do
3972: LD_ADDR_VAR 0 7
3976: PUSH
3977: LD_VAR 0 8
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4187
// if IsNotFull ( i ) then
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL 27941 0 1
3994: IFFALSE 4185
// begin PlaceHumanInUnit ( unit , i ) ;
3996: LD_VAR 0 1
4000: PPUSH
4001: LD_VAR 0 7
4005: PPUSH
4006: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4010: LD_VAR 0 7
4014: PPUSH
4015: CALL_OW 266
4019: PUSH
4020: LD_INT 5
4022: PUSH
4023: LD_INT 4
4025: PUSH
4026: LD_INT 31
4028: PUSH
4029: LD_INT 32
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: IN
4038: IFFALSE 4071
// begin SetClass ( unit , class_soldier ) ;
4040: LD_VAR 0 1
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4052: LD_VAR 0 1
4056: PPUSH
4057: LD_VAR 0 7
4061: PPUSH
4062: CALL 58307 0 1
4066: PPUSH
4067: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4071: LD_VAR 0 7
4075: PPUSH
4076: CALL_OW 266
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: LD_INT 36
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: IN
4095: IFFALSE 4109
// SetClass ( unit , class_mechanic ) ;
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4109: LD_VAR 0 7
4113: PPUSH
4114: CALL_OW 266
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: IN
4129: IFFALSE 4143
// SetClass ( unit , class_engineer ) ;
4131: LD_VAR 0 1
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4143: LD_VAR 0 7
4147: PPUSH
4148: CALL_OW 266
4152: PUSH
4153: LD_INT 6
4155: PUSH
4156: LD_INT 7
4158: PUSH
4159: LD_INT 8
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: IN
4167: IFFALSE 4181
// SetClass ( unit , class_scientistic ) ;
4169: LD_VAR 0 1
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: CALL_OW 336
// exit ;
4181: POP
4182: POP
4183: GO 4218
// end ;
4185: GO 3982
4187: POP
4188: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4189: LD_VAR 0 1
4193: PPUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_VAR 0 4
4208: PPUSH
4209: LD_VAR 0 5
4213: PPUSH
4214: CALL_OW 50
// end ;
4218: LD_VAR 0 6
4222: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4223: LD_INT 0
4225: PPUSH
// if unit in selectedTab then
4226: LD_VAR 0 1
4230: PUSH
4231: LD_VAR 0 3
4235: IN
4236: IFFALSE 4258
// SaveCharacters ( unit , 13c_ & unitString ) else
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_STRING 13c_
4245: PUSH
4246: LD_VAR 0 2
4250: STR
4251: PPUSH
4252: CALL_OW 38
4256: GO 4276
// SaveCharacters ( unit , 13s_ & unitString ) ;
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_STRING 13s_
4265: PUSH
4266: LD_VAR 0 2
4270: STR
4271: PPUSH
4272: CALL_OW 38
// end ;
4276: LD_VAR 0 4
4280: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
// selected := [ ] ;
4287: LD_ADDR_EXP 22
4291: PUSH
4292: EMPTY
4293: ST_TO_ADDR
// othersSelect := [ ] ;
4294: LD_ADDR_EXP 23
4298: PUSH
4299: EMPTY
4300: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: LD_EXP 3
4310: PUSH
4311: LD_EXP 4
4315: PUSH
4316: LD_EXP 5
4320: PUSH
4321: LD_EXP 6
4325: PUSH
4326: LD_EXP 8
4330: PUSH
4331: LD_EXP 9
4335: PUSH
4336: LD_EXP 10
4340: PUSH
4341: LD_EXP 11
4345: PUSH
4346: LD_EXP 12
4350: PUSH
4351: LD_EXP 13
4355: PUSH
4356: LD_EXP 14
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4374: LD_ADDR_VAR 0 3
4378: PUSH
4379: LD_VAR 0 3
4383: PUSH
4384: LD_EXP 17
4388: ADD
4389: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4390: LD_ADDR_VAR 0 3
4394: PUSH
4395: LD_VAR 0 3
4399: PUSH
4400: LD_EXP 16
4404: ADD
4405: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_VAR 0 3
4415: PUSH
4416: LD_EXP 18
4420: ADD
4421: ST_TO_ADDR
// for i in tmp do
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_VAR 0 3
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4472
// if GetClass ( i ) = 8 then
4435: LD_VAR 0 2
4439: PPUSH
4440: CALL_OW 257
4444: PUSH
4445: LD_INT 8
4447: EQUAL
4448: IFFALSE 4470
// SetClass ( i , rand ( 1 , 4 ) ) ;
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 336
4470: GO 4432
4472: POP
4473: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4474: LD_ADDR_EXP 22
4478: PUSH
4479: LD_STRING 1
4481: PPUSH
4482: LD_INT 6
4484: PPUSH
4485: LD_INT 6
4487: PPUSH
4488: LD_INT -5
4490: PUSH
4491: LD_EXP 1
4495: PUSH
4496: LD_EXP 15
4500: PUSH
4501: LD_INT -2
4503: PUSH
4504: LD_INT -3
4506: PUSH
4507: LD_INT -5
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 3
4522: ADD
4523: PUSH
4524: LD_INT -6
4526: PUSH
4527: LD_INT -4
4529: PUSH
4530: LD_EXP 2
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: ADD
4540: PPUSH
4541: LD_INT 1
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 3
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 5
4583: PUSH
4584: LD_INT 0
4586: PUSH
4587: LD_INT 2
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 42
4606: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4607: LD_ADDR_EXP 23
4611: PUSH
4612: LD_EXP 22
4616: PUSH
4617: LD_EXP 3
4621: PUSH
4622: LD_EXP 4
4626: PUSH
4627: LD_EXP 5
4631: PUSH
4632: LD_EXP 6
4636: PUSH
4637: LD_EXP 7
4641: PUSH
4642: LD_EXP 8
4646: PUSH
4647: LD_EXP 9
4651: PUSH
4652: LD_EXP 10
4656: PUSH
4657: LD_EXP 11
4661: PUSH
4662: LD_EXP 12
4666: PUSH
4667: LD_EXP 13
4671: PUSH
4672: LD_EXP 14
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: DIFF
4691: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4692: LD_ADDR_VAR 0 4
4696: PUSH
4697: LD_VAR 0 3
4701: PUSH
4702: LD_EXP 22
4706: DIFF
4707: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 4
4717: PUSH
4718: LD_EXP 3
4722: PUSH
4723: LD_EXP 4
4727: PUSH
4728: LD_EXP 5
4732: PUSH
4733: LD_EXP 6
4737: PUSH
4738: LD_EXP 7
4742: PUSH
4743: LD_EXP 8
4747: PUSH
4748: LD_EXP 9
4752: PUSH
4753: LD_EXP 10
4757: PUSH
4758: LD_EXP 11
4762: PUSH
4763: LD_EXP 12
4767: PUSH
4768: LD_EXP 13
4772: PUSH
4773: LD_EXP 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: DIFF
4792: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4793: LD_VAR 0 4
4797: PPUSH
4798: LD_STRING 13s_others
4800: PPUSH
4801: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4805: LD_EXP 23
4809: PPUSH
4810: LD_STRING 13c_others
4812: PPUSH
4813: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4817: LD_EXP 1
4821: PPUSH
4822: LD_STRING 13c_JMM
4824: PPUSH
4825: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4829: LD_EXP 15
4833: PPUSH
4834: LD_STRING 13c_Stevens
4836: PPUSH
4837: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4841: LD_EXP 3
4845: PPUSH
4846: LD_STRING Lisa
4848: PPUSH
4849: LD_EXP 22
4853: PPUSH
4854: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4858: LD_EXP 8
4862: PPUSH
4863: LD_STRING Brown
4865: PPUSH
4866: LD_EXP 22
4870: PPUSH
4871: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4875: LD_EXP 4
4879: PPUSH
4880: LD_STRING Donaldson
4882: PPUSH
4883: LD_EXP 22
4887: PPUSH
4888: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4892: LD_EXP 5
4896: PPUSH
4897: LD_STRING Bobby
4899: PPUSH
4900: LD_EXP 22
4904: PPUSH
4905: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4909: LD_EXP 6
4913: PPUSH
4914: LD_STRING Cyrus
4916: PPUSH
4917: LD_EXP 22
4921: PPUSH
4922: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4926: LD_EXP 7
4930: PPUSH
4931: LD_STRING Denis
4933: PPUSH
4934: LD_EXP 22
4938: PPUSH
4939: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4943: LD_EXP 9
4947: PPUSH
4948: LD_STRING Gladstone
4950: PPUSH
4951: LD_EXP 22
4955: PPUSH
4956: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4960: LD_EXP 10
4964: PPUSH
4965: LD_STRING Houten
4967: PPUSH
4968: LD_EXP 22
4972: PPUSH
4973: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4977: LD_EXP 11
4981: PPUSH
4982: LD_STRING Cornel
4984: PPUSH
4985: LD_EXP 22
4989: PPUSH
4990: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4994: LD_EXP 12
4998: PPUSH
4999: LD_STRING Gary
5001: PPUSH
5002: LD_EXP 22
5006: PPUSH
5007: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5011: LD_EXP 13
5015: PPUSH
5016: LD_STRING Frank
5018: PPUSH
5019: LD_EXP 22
5023: PPUSH
5024: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5028: LD_EXP 14
5032: PPUSH
5033: LD_STRING Kikuchi
5035: PPUSH
5036: LD_EXP 22
5040: PPUSH
5041: CALL 4223 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5045: LD_INT 22
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 21
5057: PUSH
5058: LD_INT 1
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: LD_INT 4
5076: PPUSH
5077: CALL_OW 235
// SetSide ( selected , 1 ) ;
5081: LD_EXP 22
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5093: LD_EXP 1
5097: PUSH
5098: LD_EXP 15
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 21
5131: PUSH
5132: LD_INT 1
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PPUSH
5143: CALL_OW 69
5147: PUSH
5148: FOR_IN
5149: IFFALSE 5162
// ComExit ( i ) ;
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL 63456 0 1
5160: GO 5148
5162: POP
5163: POP
// end ; end_of_file
5164: LD_VAR 0 1
5168: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5169: LD_VAR 0 1
5173: PPUSH
5174: CALL 21246 0 1
// if un = JMM then
5178: LD_VAR 0 1
5182: PUSH
5183: LD_EXP 1
5187: EQUAL
5188: IFFALSE 5197
// YouLost ( JMM ) ;
5190: LD_STRING JMM
5192: PPUSH
5193: CALL_OW 104
// end ;
5197: PPOPN 1
5199: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_VAR 0 2
5209: PPUSH
5210: CALL 21366 0 2
// end ; end_of_file
5214: PPOPN 2
5216: END
// export function Action ; begin
5217: LD_INT 0
5219: PPUSH
// InGameOn ;
5220: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5224: LD_INT 22
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 30
5239: PUSH
5240: LD_INT 0
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 30
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: CALL_OW 87
// wait ( 0 0$1 ) ;
5275: LD_INT 35
5277: PPUSH
5278: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5282: LD_EXP 1
5286: PPUSH
5287: LD_STRING D1-JMM-1
5289: PPUSH
5290: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5294: LD_EXP 2
5298: PPUSH
5299: LD_STRING D1-Pow-1
5301: PPUSH
5302: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5306: LD_EXP 2
5310: PPUSH
5311: LD_STRING D1-Pow-1a
5313: PPUSH
5314: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5318: LD_EXP 2
5322: PPUSH
5323: LD_STRING D1-Pow-1b
5325: PPUSH
5326: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5330: LD_EXP 2
5334: PPUSH
5335: LD_STRING D1-Pow-1c
5337: PPUSH
5338: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5342: LD_EXP 1
5346: PPUSH
5347: LD_STRING D1-JMM-2
5349: PPUSH
5350: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5354: LD_EXP 2
5358: PPUSH
5359: LD_STRING D1-Pow-2
5361: PPUSH
5362: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5366: LD_EXP 1
5370: PPUSH
5371: LD_STRING D1-JMM-3
5373: PPUSH
5374: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5378: LD_EXP 2
5382: PPUSH
5383: LD_STRING D1-Pow-3
5385: PPUSH
5386: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5390: LD_EXP 1
5394: PPUSH
5395: LD_STRING D1-JMM-4
5397: PPUSH
5398: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5402: LD_EXP 2
5406: PPUSH
5407: LD_STRING D1-Pow-4
5409: PPUSH
5410: CALL_OW 94
// SelectAndSaveCharacters ;
5414: CALL 4281 0 0
// InGameOff ;
5418: CALL_OW 9
// Query ( Q1 ) ;
5422: LD_STRING Q1
5424: PPUSH
5425: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5429: LD_INT 2
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: CALL_OW 424
// end ; end_of_file
5439: LD_VAR 0 1
5443: RET
// export globalGameSaveCounter ; every 0 0$1 do
5444: GO 5446
5446: DISABLE
// begin enable ;
5447: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5448: LD_STRING updateTimer(
5450: PUSH
5451: LD_OWVAR 1
5455: STR
5456: PUSH
5457: LD_STRING );
5459: STR
5460: PPUSH
5461: CALL_OW 559
// end ;
5465: END
// every 0 0$1 do
5466: GO 5468
5468: DISABLE
// begin globalGameSaveCounter := 0 ;
5469: LD_ADDR_EXP 24
5473: PUSH
5474: LD_INT 0
5476: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5477: LD_STRING setGameSaveCounter(0)
5479: PPUSH
5480: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5484: LD_STRING initStreamRollete();
5486: PPUSH
5487: CALL_OW 559
// InitStreamMode ;
5491: CALL 6817 0 0
// DefineStreamItems ( false ) ;
5495: LD_INT 0
5497: PPUSH
5498: CALL 7281 0 1
// end ;
5502: END
// export function SOS_MapStart ( ) ; begin
5503: LD_INT 0
5505: PPUSH
// if streamModeActive then
5506: LD_EXP 25
5510: IFFALSE 5519
// DefineStreamItems ( true ) ;
5512: LD_INT 1
5514: PPUSH
5515: CALL 7281 0 1
// UpdateLuaVariables ( ) ;
5519: CALL 5536 0 0
// UpdateFactoryWaypoints ( ) ;
5523: CALL 20150 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5527: CALL 20407 0 0
// end ;
5531: LD_VAR 0 1
5535: RET
// function UpdateLuaVariables ( ) ; begin
5536: LD_INT 0
5538: PPUSH
// if globalGameSaveCounter then
5539: LD_EXP 24
5543: IFFALSE 5577
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5545: LD_ADDR_EXP 24
5549: PUSH
5550: LD_EXP 24
5554: PPUSH
5555: CALL 64419 0 1
5559: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5560: LD_STRING setGameSaveCounter(
5562: PUSH
5563: LD_EXP 24
5567: STR
5568: PUSH
5569: LD_STRING )
5571: STR
5572: PPUSH
5573: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5577: LD_STRING setGameDifficulty(
5579: PUSH
5580: LD_OWVAR 67
5584: STR
5585: PUSH
5586: LD_STRING )
5588: STR
5589: PPUSH
5590: CALL_OW 559
// end ;
5594: LD_VAR 0 1
5598: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5599: LD_INT 0
5601: PPUSH
// if p2 = stream_mode then
5602: LD_VAR 0 2
5606: PUSH
5607: LD_INT 100
5609: EQUAL
5610: IFFALSE 6613
// begin if not StreamModeActive then
5612: LD_EXP 25
5616: NOT
5617: IFFALSE 5627
// StreamModeActive := true ;
5619: LD_ADDR_EXP 25
5623: PUSH
5624: LD_INT 1
5626: ST_TO_ADDR
// if p3 = 0 then
5627: LD_VAR 0 3
5631: PUSH
5632: LD_INT 0
5634: EQUAL
5635: IFFALSE 5641
// InitStreamMode ;
5637: CALL 6817 0 0
// if p3 = 1 then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 1
5648: EQUAL
5649: IFFALSE 5659
// sRocket := true ;
5651: LD_ADDR_EXP 30
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// if p3 = 2 then
5659: LD_VAR 0 3
5663: PUSH
5664: LD_INT 2
5666: EQUAL
5667: IFFALSE 5677
// sSpeed := true ;
5669: LD_ADDR_EXP 29
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// if p3 = 3 then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 3
5684: EQUAL
5685: IFFALSE 5695
// sEngine := true ;
5687: LD_ADDR_EXP 31
5691: PUSH
5692: LD_INT 1
5694: ST_TO_ADDR
// if p3 = 4 then
5695: LD_VAR 0 3
5699: PUSH
5700: LD_INT 4
5702: EQUAL
5703: IFFALSE 5713
// sSpec := true ;
5705: LD_ADDR_EXP 28
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// if p3 = 5 then
5713: LD_VAR 0 3
5717: PUSH
5718: LD_INT 5
5720: EQUAL
5721: IFFALSE 5731
// sLevel := true ;
5723: LD_ADDR_EXP 32
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// if p3 = 6 then
5731: LD_VAR 0 3
5735: PUSH
5736: LD_INT 6
5738: EQUAL
5739: IFFALSE 5749
// sArmoury := true ;
5741: LD_ADDR_EXP 33
5745: PUSH
5746: LD_INT 1
5748: ST_TO_ADDR
// if p3 = 7 then
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 7
5756: EQUAL
5757: IFFALSE 5767
// sRadar := true ;
5759: LD_ADDR_EXP 34
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// if p3 = 8 then
5767: LD_VAR 0 3
5771: PUSH
5772: LD_INT 8
5774: EQUAL
5775: IFFALSE 5785
// sBunker := true ;
5777: LD_ADDR_EXP 35
5781: PUSH
5782: LD_INT 1
5784: ST_TO_ADDR
// if p3 = 9 then
5785: LD_VAR 0 3
5789: PUSH
5790: LD_INT 9
5792: EQUAL
5793: IFFALSE 5803
// sHack := true ;
5795: LD_ADDR_EXP 36
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// if p3 = 10 then
5803: LD_VAR 0 3
5807: PUSH
5808: LD_INT 10
5810: EQUAL
5811: IFFALSE 5821
// sFire := true ;
5813: LD_ADDR_EXP 37
5817: PUSH
5818: LD_INT 1
5820: ST_TO_ADDR
// if p3 = 11 then
5821: LD_VAR 0 3
5825: PUSH
5826: LD_INT 11
5828: EQUAL
5829: IFFALSE 5839
// sRefresh := true ;
5831: LD_ADDR_EXP 38
5835: PUSH
5836: LD_INT 1
5838: ST_TO_ADDR
// if p3 = 12 then
5839: LD_VAR 0 3
5843: PUSH
5844: LD_INT 12
5846: EQUAL
5847: IFFALSE 5857
// sExp := true ;
5849: LD_ADDR_EXP 39
5853: PUSH
5854: LD_INT 1
5856: ST_TO_ADDR
// if p3 = 13 then
5857: LD_VAR 0 3
5861: PUSH
5862: LD_INT 13
5864: EQUAL
5865: IFFALSE 5875
// sDepot := true ;
5867: LD_ADDR_EXP 40
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// if p3 = 14 then
5875: LD_VAR 0 3
5879: PUSH
5880: LD_INT 14
5882: EQUAL
5883: IFFALSE 5893
// sFlag := true ;
5885: LD_ADDR_EXP 41
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// if p3 = 15 then
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 15
5900: EQUAL
5901: IFFALSE 5911
// sKamikadze := true ;
5903: LD_ADDR_EXP 49
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// if p3 = 16 then
5911: LD_VAR 0 3
5915: PUSH
5916: LD_INT 16
5918: EQUAL
5919: IFFALSE 5929
// sTroll := true ;
5921: LD_ADDR_EXP 50
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// if p3 = 17 then
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 17
5936: EQUAL
5937: IFFALSE 5947
// sSlow := true ;
5939: LD_ADDR_EXP 51
5943: PUSH
5944: LD_INT 1
5946: ST_TO_ADDR
// if p3 = 18 then
5947: LD_VAR 0 3
5951: PUSH
5952: LD_INT 18
5954: EQUAL
5955: IFFALSE 5965
// sLack := true ;
5957: LD_ADDR_EXP 52
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// if p3 = 19 then
5965: LD_VAR 0 3
5969: PUSH
5970: LD_INT 19
5972: EQUAL
5973: IFFALSE 5983
// sTank := true ;
5975: LD_ADDR_EXP 54
5979: PUSH
5980: LD_INT 1
5982: ST_TO_ADDR
// if p3 = 20 then
5983: LD_VAR 0 3
5987: PUSH
5988: LD_INT 20
5990: EQUAL
5991: IFFALSE 6001
// sRemote := true ;
5993: LD_ADDR_EXP 55
5997: PUSH
5998: LD_INT 1
6000: ST_TO_ADDR
// if p3 = 21 then
6001: LD_VAR 0 3
6005: PUSH
6006: LD_INT 21
6008: EQUAL
6009: IFFALSE 6019
// sPowell := true ;
6011: LD_ADDR_EXP 56
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// if p3 = 22 then
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 22
6026: EQUAL
6027: IFFALSE 6037
// sTeleport := true ;
6029: LD_ADDR_EXP 59
6033: PUSH
6034: LD_INT 1
6036: ST_TO_ADDR
// if p3 = 23 then
6037: LD_VAR 0 3
6041: PUSH
6042: LD_INT 23
6044: EQUAL
6045: IFFALSE 6055
// sOilTower := true ;
6047: LD_ADDR_EXP 61
6051: PUSH
6052: LD_INT 1
6054: ST_TO_ADDR
// if p3 = 24 then
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 24
6062: EQUAL
6063: IFFALSE 6073
// sShovel := true ;
6065: LD_ADDR_EXP 62
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// if p3 = 25 then
6073: LD_VAR 0 3
6077: PUSH
6078: LD_INT 25
6080: EQUAL
6081: IFFALSE 6091
// sSheik := true ;
6083: LD_ADDR_EXP 63
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// if p3 = 26 then
6091: LD_VAR 0 3
6095: PUSH
6096: LD_INT 26
6098: EQUAL
6099: IFFALSE 6109
// sEarthquake := true ;
6101: LD_ADDR_EXP 65
6105: PUSH
6106: LD_INT 1
6108: ST_TO_ADDR
// if p3 = 27 then
6109: LD_VAR 0 3
6113: PUSH
6114: LD_INT 27
6116: EQUAL
6117: IFFALSE 6127
// sAI := true ;
6119: LD_ADDR_EXP 66
6123: PUSH
6124: LD_INT 1
6126: ST_TO_ADDR
// if p3 = 28 then
6127: LD_VAR 0 3
6131: PUSH
6132: LD_INT 28
6134: EQUAL
6135: IFFALSE 6145
// sCargo := true ;
6137: LD_ADDR_EXP 69
6141: PUSH
6142: LD_INT 1
6144: ST_TO_ADDR
// if p3 = 29 then
6145: LD_VAR 0 3
6149: PUSH
6150: LD_INT 29
6152: EQUAL
6153: IFFALSE 6163
// sDLaser := true ;
6155: LD_ADDR_EXP 70
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// if p3 = 30 then
6163: LD_VAR 0 3
6167: PUSH
6168: LD_INT 30
6170: EQUAL
6171: IFFALSE 6181
// sExchange := true ;
6173: LD_ADDR_EXP 71
6177: PUSH
6178: LD_INT 1
6180: ST_TO_ADDR
// if p3 = 31 then
6181: LD_VAR 0 3
6185: PUSH
6186: LD_INT 31
6188: EQUAL
6189: IFFALSE 6199
// sFac := true ;
6191: LD_ADDR_EXP 72
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// if p3 = 32 then
6199: LD_VAR 0 3
6203: PUSH
6204: LD_INT 32
6206: EQUAL
6207: IFFALSE 6217
// sPower := true ;
6209: LD_ADDR_EXP 73
6213: PUSH
6214: LD_INT 1
6216: ST_TO_ADDR
// if p3 = 33 then
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 33
6224: EQUAL
6225: IFFALSE 6235
// sRandom := true ;
6227: LD_ADDR_EXP 74
6231: PUSH
6232: LD_INT 1
6234: ST_TO_ADDR
// if p3 = 34 then
6235: LD_VAR 0 3
6239: PUSH
6240: LD_INT 34
6242: EQUAL
6243: IFFALSE 6253
// sShield := true ;
6245: LD_ADDR_EXP 75
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if p3 = 35 then
6253: LD_VAR 0 3
6257: PUSH
6258: LD_INT 35
6260: EQUAL
6261: IFFALSE 6271
// sTime := true ;
6263: LD_ADDR_EXP 76
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// if p3 = 36 then
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 36
6278: EQUAL
6279: IFFALSE 6289
// sTools := true ;
6281: LD_ADDR_EXP 77
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
// if p3 = 101 then
6289: LD_VAR 0 3
6293: PUSH
6294: LD_INT 101
6296: EQUAL
6297: IFFALSE 6307
// sSold := true ;
6299: LD_ADDR_EXP 42
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// if p3 = 102 then
6307: LD_VAR 0 3
6311: PUSH
6312: LD_INT 102
6314: EQUAL
6315: IFFALSE 6325
// sDiff := true ;
6317: LD_ADDR_EXP 43
6321: PUSH
6322: LD_INT 1
6324: ST_TO_ADDR
// if p3 = 103 then
6325: LD_VAR 0 3
6329: PUSH
6330: LD_INT 103
6332: EQUAL
6333: IFFALSE 6343
// sFog := true ;
6335: LD_ADDR_EXP 46
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// if p3 = 104 then
6343: LD_VAR 0 3
6347: PUSH
6348: LD_INT 104
6350: EQUAL
6351: IFFALSE 6361
// sReset := true ;
6353: LD_ADDR_EXP 47
6357: PUSH
6358: LD_INT 1
6360: ST_TO_ADDR
// if p3 = 105 then
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 105
6368: EQUAL
6369: IFFALSE 6379
// sSun := true ;
6371: LD_ADDR_EXP 48
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// if p3 = 106 then
6379: LD_VAR 0 3
6383: PUSH
6384: LD_INT 106
6386: EQUAL
6387: IFFALSE 6397
// sTiger := true ;
6389: LD_ADDR_EXP 44
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// if p3 = 107 then
6397: LD_VAR 0 3
6401: PUSH
6402: LD_INT 107
6404: EQUAL
6405: IFFALSE 6415
// sBomb := true ;
6407: LD_ADDR_EXP 45
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// if p3 = 108 then
6415: LD_VAR 0 3
6419: PUSH
6420: LD_INT 108
6422: EQUAL
6423: IFFALSE 6433
// sWound := true ;
6425: LD_ADDR_EXP 53
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// if p3 = 109 then
6433: LD_VAR 0 3
6437: PUSH
6438: LD_INT 109
6440: EQUAL
6441: IFFALSE 6451
// sBetray := true ;
6443: LD_ADDR_EXP 57
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// if p3 = 110 then
6451: LD_VAR 0 3
6455: PUSH
6456: LD_INT 110
6458: EQUAL
6459: IFFALSE 6469
// sContamin := true ;
6461: LD_ADDR_EXP 58
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// if p3 = 111 then
6469: LD_VAR 0 3
6473: PUSH
6474: LD_INT 111
6476: EQUAL
6477: IFFALSE 6487
// sOil := true ;
6479: LD_ADDR_EXP 60
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// if p3 = 112 then
6487: LD_VAR 0 3
6491: PUSH
6492: LD_INT 112
6494: EQUAL
6495: IFFALSE 6505
// sStu := true ;
6497: LD_ADDR_EXP 64
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// if p3 = 113 then
6505: LD_VAR 0 3
6509: PUSH
6510: LD_INT 113
6512: EQUAL
6513: IFFALSE 6523
// sBazooka := true ;
6515: LD_ADDR_EXP 67
6519: PUSH
6520: LD_INT 1
6522: ST_TO_ADDR
// if p3 = 114 then
6523: LD_VAR 0 3
6527: PUSH
6528: LD_INT 114
6530: EQUAL
6531: IFFALSE 6541
// sMortar := true ;
6533: LD_ADDR_EXP 68
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// if p3 = 115 then
6541: LD_VAR 0 3
6545: PUSH
6546: LD_INT 115
6548: EQUAL
6549: IFFALSE 6559
// sRanger := true ;
6551: LD_ADDR_EXP 78
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// if p3 = 116 then
6559: LD_VAR 0 3
6563: PUSH
6564: LD_INT 116
6566: EQUAL
6567: IFFALSE 6577
// sComputer := true ;
6569: LD_ADDR_EXP 79
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
// if p3 = 117 then
6577: LD_VAR 0 3
6581: PUSH
6582: LD_INT 117
6584: EQUAL
6585: IFFALSE 6595
// s30 := true ;
6587: LD_ADDR_EXP 80
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// if p3 = 118 then
6595: LD_VAR 0 3
6599: PUSH
6600: LD_INT 118
6602: EQUAL
6603: IFFALSE 6613
// s60 := true ;
6605: LD_ADDR_EXP 81
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// end ; if p2 = hack_mode then
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 101
6620: EQUAL
6621: IFFALSE 6749
// begin case p3 of 1 :
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 1
6630: DOUBLE
6631: EQUAL
6632: IFTRUE 6636
6634: GO 6643
6636: POP
// hHackUnlimitedResources ; 2 :
6637: CALL 18896 0 0
6641: GO 6749
6643: LD_INT 2
6645: DOUBLE
6646: EQUAL
6647: IFTRUE 6651
6649: GO 6658
6651: POP
// hHackSetLevel10 ; 3 :
6652: CALL 19029 0 0
6656: GO 6749
6658: LD_INT 3
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6673
6666: POP
// hHackSetLevel10YourUnits ; 4 :
6667: CALL 19114 0 0
6671: GO 6749
6673: LD_INT 4
6675: DOUBLE
6676: EQUAL
6677: IFTRUE 6681
6679: GO 6688
6681: POP
// hHackInvincible ; 5 :
6682: CALL 19562 0 0
6686: GO 6749
6688: LD_INT 5
6690: DOUBLE
6691: EQUAL
6692: IFTRUE 6696
6694: GO 6703
6696: POP
// hHackInvisible ; 6 :
6697: CALL 19673 0 0
6701: GO 6749
6703: LD_INT 6
6705: DOUBLE
6706: EQUAL
6707: IFTRUE 6711
6709: GO 6718
6711: POP
// hHackChangeYourSide ; 7 :
6712: CALL 19730 0 0
6716: GO 6749
6718: LD_INT 7
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6726
6724: GO 6733
6726: POP
// hHackChangeUnitSide ; 8 :
6727: CALL 19772 0 0
6731: GO 6749
6733: LD_INT 8
6735: DOUBLE
6736: EQUAL
6737: IFTRUE 6741
6739: GO 6748
6741: POP
// hHackFog ; end ;
6742: CALL 19873 0 0
6746: GO 6749
6748: POP
// end ; if p2 = game_save_mode then
6749: LD_VAR 0 2
6753: PUSH
6754: LD_INT 102
6756: EQUAL
6757: IFFALSE 6812
// begin if p3 = 1 then
6759: LD_VAR 0 3
6763: PUSH
6764: LD_INT 1
6766: EQUAL
6767: IFFALSE 6779
// globalGameSaveCounter := p4 ;
6769: LD_ADDR_EXP 24
6773: PUSH
6774: LD_VAR 0 4
6778: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6779: LD_VAR 0 3
6783: PUSH
6784: LD_INT 2
6786: EQUAL
6787: PUSH
6788: LD_EXP 24
6792: AND
6793: IFFALSE 6812
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6795: LD_STRING setGameSaveCounter(
6797: PUSH
6798: LD_EXP 24
6802: STR
6803: PUSH
6804: LD_STRING )
6806: STR
6807: PPUSH
6808: CALL_OW 559
// end ; end ;
6812: LD_VAR 0 7
6816: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6817: LD_INT 0
6819: PPUSH
// streamModeActive := false ;
6820: LD_ADDR_EXP 25
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// normalCounter := 36 ;
6828: LD_ADDR_EXP 26
6832: PUSH
6833: LD_INT 36
6835: ST_TO_ADDR
// hardcoreCounter := 18 ;
6836: LD_ADDR_EXP 27
6840: PUSH
6841: LD_INT 18
6843: ST_TO_ADDR
// sRocket := false ;
6844: LD_ADDR_EXP 30
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// sSpeed := false ;
6852: LD_ADDR_EXP 29
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// sEngine := false ;
6860: LD_ADDR_EXP 31
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// sSpec := false ;
6868: LD_ADDR_EXP 28
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// sLevel := false ;
6876: LD_ADDR_EXP 32
6880: PUSH
6881: LD_INT 0
6883: ST_TO_ADDR
// sArmoury := false ;
6884: LD_ADDR_EXP 33
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// sRadar := false ;
6892: LD_ADDR_EXP 34
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// sBunker := false ;
6900: LD_ADDR_EXP 35
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// sHack := false ;
6908: LD_ADDR_EXP 36
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// sFire := false ;
6916: LD_ADDR_EXP 37
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// sRefresh := false ;
6924: LD_ADDR_EXP 38
6928: PUSH
6929: LD_INT 0
6931: ST_TO_ADDR
// sExp := false ;
6932: LD_ADDR_EXP 39
6936: PUSH
6937: LD_INT 0
6939: ST_TO_ADDR
// sDepot := false ;
6940: LD_ADDR_EXP 40
6944: PUSH
6945: LD_INT 0
6947: ST_TO_ADDR
// sFlag := false ;
6948: LD_ADDR_EXP 41
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// sKamikadze := false ;
6956: LD_ADDR_EXP 49
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// sTroll := false ;
6964: LD_ADDR_EXP 50
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// sSlow := false ;
6972: LD_ADDR_EXP 51
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// sLack := false ;
6980: LD_ADDR_EXP 52
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// sTank := false ;
6988: LD_ADDR_EXP 54
6992: PUSH
6993: LD_INT 0
6995: ST_TO_ADDR
// sRemote := false ;
6996: LD_ADDR_EXP 55
7000: PUSH
7001: LD_INT 0
7003: ST_TO_ADDR
// sPowell := false ;
7004: LD_ADDR_EXP 56
7008: PUSH
7009: LD_INT 0
7011: ST_TO_ADDR
// sTeleport := false ;
7012: LD_ADDR_EXP 59
7016: PUSH
7017: LD_INT 0
7019: ST_TO_ADDR
// sOilTower := false ;
7020: LD_ADDR_EXP 61
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// sShovel := false ;
7028: LD_ADDR_EXP 62
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// sSheik := false ;
7036: LD_ADDR_EXP 63
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// sEarthquake := false ;
7044: LD_ADDR_EXP 65
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// sAI := false ;
7052: LD_ADDR_EXP 66
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// sCargo := false ;
7060: LD_ADDR_EXP 69
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// sDLaser := false ;
7068: LD_ADDR_EXP 70
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// sExchange := false ;
7076: LD_ADDR_EXP 71
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// sFac := false ;
7084: LD_ADDR_EXP 72
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// sPower := false ;
7092: LD_ADDR_EXP 73
7096: PUSH
7097: LD_INT 0
7099: ST_TO_ADDR
// sRandom := false ;
7100: LD_ADDR_EXP 74
7104: PUSH
7105: LD_INT 0
7107: ST_TO_ADDR
// sShield := false ;
7108: LD_ADDR_EXP 75
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// sTime := false ;
7116: LD_ADDR_EXP 76
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// sTools := false ;
7124: LD_ADDR_EXP 77
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// sSold := false ;
7132: LD_ADDR_EXP 42
7136: PUSH
7137: LD_INT 0
7139: ST_TO_ADDR
// sDiff := false ;
7140: LD_ADDR_EXP 43
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// sFog := false ;
7148: LD_ADDR_EXP 46
7152: PUSH
7153: LD_INT 0
7155: ST_TO_ADDR
// sReset := false ;
7156: LD_ADDR_EXP 47
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// sSun := false ;
7164: LD_ADDR_EXP 48
7168: PUSH
7169: LD_INT 0
7171: ST_TO_ADDR
// sTiger := false ;
7172: LD_ADDR_EXP 44
7176: PUSH
7177: LD_INT 0
7179: ST_TO_ADDR
// sBomb := false ;
7180: LD_ADDR_EXP 45
7184: PUSH
7185: LD_INT 0
7187: ST_TO_ADDR
// sWound := false ;
7188: LD_ADDR_EXP 53
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// sBetray := false ;
7196: LD_ADDR_EXP 57
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// sContamin := false ;
7204: LD_ADDR_EXP 58
7208: PUSH
7209: LD_INT 0
7211: ST_TO_ADDR
// sOil := false ;
7212: LD_ADDR_EXP 60
7216: PUSH
7217: LD_INT 0
7219: ST_TO_ADDR
// sStu := false ;
7220: LD_ADDR_EXP 64
7224: PUSH
7225: LD_INT 0
7227: ST_TO_ADDR
// sBazooka := false ;
7228: LD_ADDR_EXP 67
7232: PUSH
7233: LD_INT 0
7235: ST_TO_ADDR
// sMortar := false ;
7236: LD_ADDR_EXP 68
7240: PUSH
7241: LD_INT 0
7243: ST_TO_ADDR
// sRanger := false ;
7244: LD_ADDR_EXP 78
7248: PUSH
7249: LD_INT 0
7251: ST_TO_ADDR
// sComputer := false ;
7252: LD_ADDR_EXP 79
7256: PUSH
7257: LD_INT 0
7259: ST_TO_ADDR
// s30 := false ;
7260: LD_ADDR_EXP 80
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// s60 := false ;
7268: LD_ADDR_EXP 81
7272: PUSH
7273: LD_INT 0
7275: ST_TO_ADDR
// end ;
7276: LD_VAR 0 1
7280: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7281: LD_INT 0
7283: PPUSH
7284: PPUSH
7285: PPUSH
7286: PPUSH
7287: PPUSH
7288: PPUSH
7289: PPUSH
// result := [ ] ;
7290: LD_ADDR_VAR 0 2
7294: PUSH
7295: EMPTY
7296: ST_TO_ADDR
// if campaign_id = 1 then
7297: LD_OWVAR 69
7301: PUSH
7302: LD_INT 1
7304: EQUAL
7305: IFFALSE 10471
// begin case mission_number of 1 :
7307: LD_OWVAR 70
7311: PUSH
7312: LD_INT 1
7314: DOUBLE
7315: EQUAL
7316: IFTRUE 7320
7318: GO 7396
7320: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7321: LD_ADDR_VAR 0 2
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 4
7331: PUSH
7332: LD_INT 11
7334: PUSH
7335: LD_INT 12
7337: PUSH
7338: LD_INT 15
7340: PUSH
7341: LD_INT 16
7343: PUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 23
7349: PUSH
7350: LD_INT 26
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 101
7366: PUSH
7367: LD_INT 102
7369: PUSH
7370: LD_INT 106
7372: PUSH
7373: LD_INT 116
7375: PUSH
7376: LD_INT 117
7378: PUSH
7379: LD_INT 118
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: ST_TO_ADDR
7394: GO 10469
7396: LD_INT 2
7398: DOUBLE
7399: EQUAL
7400: IFTRUE 7404
7402: GO 7488
7404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7405: LD_ADDR_VAR 0 2
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 11
7418: PUSH
7419: LD_INT 12
7421: PUSH
7422: LD_INT 15
7424: PUSH
7425: LD_INT 16
7427: PUSH
7428: LD_INT 22
7430: PUSH
7431: LD_INT 23
7433: PUSH
7434: LD_INT 26
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 101
7450: PUSH
7451: LD_INT 102
7453: PUSH
7454: LD_INT 105
7456: PUSH
7457: LD_INT 106
7459: PUSH
7460: LD_INT 108
7462: PUSH
7463: LD_INT 116
7465: PUSH
7466: LD_INT 117
7468: PUSH
7469: LD_INT 118
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: ST_TO_ADDR
7486: GO 10469
7488: LD_INT 3
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7584
7496: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7497: LD_ADDR_VAR 0 2
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: LD_INT 5
7510: PUSH
7511: LD_INT 11
7513: PUSH
7514: LD_INT 12
7516: PUSH
7517: LD_INT 15
7519: PUSH
7520: LD_INT 16
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 26
7528: PUSH
7529: LD_INT 36
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 101
7546: PUSH
7547: LD_INT 102
7549: PUSH
7550: LD_INT 105
7552: PUSH
7553: LD_INT 106
7555: PUSH
7556: LD_INT 108
7558: PUSH
7559: LD_INT 116
7561: PUSH
7562: LD_INT 117
7564: PUSH
7565: LD_INT 118
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: ST_TO_ADDR
7582: GO 10469
7584: LD_INT 4
7586: DOUBLE
7587: EQUAL
7588: IFTRUE 7592
7590: GO 7688
7592: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7593: LD_ADDR_VAR 0 2
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 4
7603: PUSH
7604: LD_INT 5
7606: PUSH
7607: LD_INT 8
7609: PUSH
7610: LD_INT 11
7612: PUSH
7613: LD_INT 12
7615: PUSH
7616: LD_INT 15
7618: PUSH
7619: LD_INT 16
7621: PUSH
7622: LD_INT 22
7624: PUSH
7625: LD_INT 23
7627: PUSH
7628: LD_INT 26
7630: PUSH
7631: LD_INT 36
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 101
7650: PUSH
7651: LD_INT 102
7653: PUSH
7654: LD_INT 105
7656: PUSH
7657: LD_INT 106
7659: PUSH
7660: LD_INT 108
7662: PUSH
7663: LD_INT 116
7665: PUSH
7666: LD_INT 117
7668: PUSH
7669: LD_INT 118
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 10469
7688: LD_INT 5
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7808
7696: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 2
7704: PUSH
7705: LD_INT 4
7707: PUSH
7708: LD_INT 5
7710: PUSH
7711: LD_INT 6
7713: PUSH
7714: LD_INT 8
7716: PUSH
7717: LD_INT 11
7719: PUSH
7720: LD_INT 12
7722: PUSH
7723: LD_INT 15
7725: PUSH
7726: LD_INT 16
7728: PUSH
7729: LD_INT 22
7731: PUSH
7732: LD_INT 23
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 26
7740: PUSH
7741: LD_INT 36
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 101
7762: PUSH
7763: LD_INT 102
7765: PUSH
7766: LD_INT 105
7768: PUSH
7769: LD_INT 106
7771: PUSH
7772: LD_INT 108
7774: PUSH
7775: LD_INT 109
7777: PUSH
7778: LD_INT 112
7780: PUSH
7781: LD_INT 116
7783: PUSH
7784: LD_INT 117
7786: PUSH
7787: LD_INT 118
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: ST_TO_ADDR
7806: GO 10469
7808: LD_INT 6
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7948
7816: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7817: LD_ADDR_VAR 0 2
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 4
7827: PUSH
7828: LD_INT 5
7830: PUSH
7831: LD_INT 6
7833: PUSH
7834: LD_INT 8
7836: PUSH
7837: LD_INT 11
7839: PUSH
7840: LD_INT 12
7842: PUSH
7843: LD_INT 15
7845: PUSH
7846: LD_INT 16
7848: PUSH
7849: LD_INT 20
7851: PUSH
7852: LD_INT 21
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_INT 23
7860: PUSH
7861: LD_INT 25
7863: PUSH
7864: LD_INT 26
7866: PUSH
7867: LD_INT 30
7869: PUSH
7870: LD_INT 31
7872: PUSH
7873: LD_INT 32
7875: PUSH
7876: LD_INT 36
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 101
7902: PUSH
7903: LD_INT 102
7905: PUSH
7906: LD_INT 105
7908: PUSH
7909: LD_INT 106
7911: PUSH
7912: LD_INT 108
7914: PUSH
7915: LD_INT 109
7917: PUSH
7918: LD_INT 112
7920: PUSH
7921: LD_INT 116
7923: PUSH
7924: LD_INT 117
7926: PUSH
7927: LD_INT 118
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: ST_TO_ADDR
7946: GO 10469
7948: LD_INT 7
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 8068
7956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: LD_INT 4
7967: PUSH
7968: LD_INT 5
7970: PUSH
7971: LD_INT 7
7973: PUSH
7974: LD_INT 11
7976: PUSH
7977: LD_INT 12
7979: PUSH
7980: LD_INT 15
7982: PUSH
7983: LD_INT 16
7985: PUSH
7986: LD_INT 20
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 22
7994: PUSH
7995: LD_INT 23
7997: PUSH
7998: LD_INT 25
8000: PUSH
8001: LD_INT 26
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: PUSH
8020: LD_INT 101
8022: PUSH
8023: LD_INT 102
8025: PUSH
8026: LD_INT 103
8028: PUSH
8029: LD_INT 105
8031: PUSH
8032: LD_INT 106
8034: PUSH
8035: LD_INT 108
8037: PUSH
8038: LD_INT 112
8040: PUSH
8041: LD_INT 116
8043: PUSH
8044: LD_INT 117
8046: PUSH
8047: LD_INT 118
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: ST_TO_ADDR
8066: GO 10469
8068: LD_INT 8
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8216
8076: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: LD_INT 6
8093: PUSH
8094: LD_INT 7
8096: PUSH
8097: LD_INT 8
8099: PUSH
8100: LD_INT 11
8102: PUSH
8103: LD_INT 12
8105: PUSH
8106: LD_INT 15
8108: PUSH
8109: LD_INT 16
8111: PUSH
8112: LD_INT 20
8114: PUSH
8115: LD_INT 21
8117: PUSH
8118: LD_INT 22
8120: PUSH
8121: LD_INT 23
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 26
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 31
8135: PUSH
8136: LD_INT 32
8138: PUSH
8139: LD_INT 36
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 101
8166: PUSH
8167: LD_INT 102
8169: PUSH
8170: LD_INT 103
8172: PUSH
8173: LD_INT 105
8175: PUSH
8176: LD_INT 106
8178: PUSH
8179: LD_INT 108
8181: PUSH
8182: LD_INT 109
8184: PUSH
8185: LD_INT 112
8187: PUSH
8188: LD_INT 116
8190: PUSH
8191: LD_INT 117
8193: PUSH
8194: LD_INT 118
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: ST_TO_ADDR
8214: GO 10469
8216: LD_INT 9
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8372
8224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: LD_INT 5
8238: PUSH
8239: LD_INT 6
8241: PUSH
8242: LD_INT 7
8244: PUSH
8245: LD_INT 8
8247: PUSH
8248: LD_INT 11
8250: PUSH
8251: LD_INT 12
8253: PUSH
8254: LD_INT 15
8256: PUSH
8257: LD_INT 16
8259: PUSH
8260: LD_INT 20
8262: PUSH
8263: LD_INT 21
8265: PUSH
8266: LD_INT 22
8268: PUSH
8269: LD_INT 23
8271: PUSH
8272: LD_INT 25
8274: PUSH
8275: LD_INT 26
8277: PUSH
8278: LD_INT 28
8280: PUSH
8281: LD_INT 30
8283: PUSH
8284: LD_INT 31
8286: PUSH
8287: LD_INT 32
8289: PUSH
8290: LD_INT 36
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 101
8318: PUSH
8319: LD_INT 102
8321: PUSH
8322: LD_INT 103
8324: PUSH
8325: LD_INT 105
8327: PUSH
8328: LD_INT 106
8330: PUSH
8331: LD_INT 108
8333: PUSH
8334: LD_INT 109
8336: PUSH
8337: LD_INT 112
8339: PUSH
8340: LD_INT 114
8342: PUSH
8343: LD_INT 116
8345: PUSH
8346: LD_INT 117
8348: PUSH
8349: LD_INT 118
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
8370: GO 10469
8372: LD_INT 10
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8576
8380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8381: LD_ADDR_VAR 0 2
8385: PUSH
8386: LD_INT 2
8388: PUSH
8389: LD_INT 4
8391: PUSH
8392: LD_INT 5
8394: PUSH
8395: LD_INT 6
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 8
8403: PUSH
8404: LD_INT 9
8406: PUSH
8407: LD_INT 10
8409: PUSH
8410: LD_INT 11
8412: PUSH
8413: LD_INT 12
8415: PUSH
8416: LD_INT 13
8418: PUSH
8419: LD_INT 14
8421: PUSH
8422: LD_INT 15
8424: PUSH
8425: LD_INT 16
8427: PUSH
8428: LD_INT 17
8430: PUSH
8431: LD_INT 18
8433: PUSH
8434: LD_INT 19
8436: PUSH
8437: LD_INT 20
8439: PUSH
8440: LD_INT 21
8442: PUSH
8443: LD_INT 22
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 24
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 26
8457: PUSH
8458: LD_INT 28
8460: PUSH
8461: LD_INT 30
8463: PUSH
8464: LD_INT 31
8466: PUSH
8467: LD_INT 32
8469: PUSH
8470: LD_INT 36
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 101
8506: PUSH
8507: LD_INT 102
8509: PUSH
8510: LD_INT 103
8512: PUSH
8513: LD_INT 104
8515: PUSH
8516: LD_INT 105
8518: PUSH
8519: LD_INT 106
8521: PUSH
8522: LD_INT 107
8524: PUSH
8525: LD_INT 108
8527: PUSH
8528: LD_INT 109
8530: PUSH
8531: LD_INT 110
8533: PUSH
8534: LD_INT 111
8536: PUSH
8537: LD_INT 112
8539: PUSH
8540: LD_INT 114
8542: PUSH
8543: LD_INT 116
8545: PUSH
8546: LD_INT 117
8548: PUSH
8549: LD_INT 118
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: ST_TO_ADDR
8574: GO 10469
8576: LD_INT 11
8578: DOUBLE
8579: EQUAL
8580: IFTRUE 8584
8582: GO 8788
8584: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 5
8601: PUSH
8602: LD_INT 6
8604: PUSH
8605: LD_INT 7
8607: PUSH
8608: LD_INT 8
8610: PUSH
8611: LD_INT 9
8613: PUSH
8614: LD_INT 10
8616: PUSH
8617: LD_INT 11
8619: PUSH
8620: LD_INT 12
8622: PUSH
8623: LD_INT 13
8625: PUSH
8626: LD_INT 14
8628: PUSH
8629: LD_INT 15
8631: PUSH
8632: LD_INT 16
8634: PUSH
8635: LD_INT 17
8637: PUSH
8638: LD_INT 18
8640: PUSH
8641: LD_INT 19
8643: PUSH
8644: LD_INT 20
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 22
8652: PUSH
8653: LD_INT 23
8655: PUSH
8656: LD_INT 24
8658: PUSH
8659: LD_INT 25
8661: PUSH
8662: LD_INT 26
8664: PUSH
8665: LD_INT 28
8667: PUSH
8668: LD_INT 30
8670: PUSH
8671: LD_INT 31
8673: PUSH
8674: LD_INT 32
8676: PUSH
8677: LD_INT 34
8679: PUSH
8680: LD_INT 36
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 101
8718: PUSH
8719: LD_INT 102
8721: PUSH
8722: LD_INT 103
8724: PUSH
8725: LD_INT 104
8727: PUSH
8728: LD_INT 105
8730: PUSH
8731: LD_INT 106
8733: PUSH
8734: LD_INT 107
8736: PUSH
8737: LD_INT 108
8739: PUSH
8740: LD_INT 109
8742: PUSH
8743: LD_INT 110
8745: PUSH
8746: LD_INT 111
8748: PUSH
8749: LD_INT 112
8751: PUSH
8752: LD_INT 114
8754: PUSH
8755: LD_INT 116
8757: PUSH
8758: LD_INT 117
8760: PUSH
8761: LD_INT 118
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: ST_TO_ADDR
8786: GO 10469
8788: LD_INT 12
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 9016
8796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 3
8810: PUSH
8811: LD_INT 4
8813: PUSH
8814: LD_INT 5
8816: PUSH
8817: LD_INT 6
8819: PUSH
8820: LD_INT 7
8822: PUSH
8823: LD_INT 8
8825: PUSH
8826: LD_INT 9
8828: PUSH
8829: LD_INT 10
8831: PUSH
8832: LD_INT 11
8834: PUSH
8835: LD_INT 12
8837: PUSH
8838: LD_INT 13
8840: PUSH
8841: LD_INT 14
8843: PUSH
8844: LD_INT 15
8846: PUSH
8847: LD_INT 16
8849: PUSH
8850: LD_INT 17
8852: PUSH
8853: LD_INT 18
8855: PUSH
8856: LD_INT 19
8858: PUSH
8859: LD_INT 20
8861: PUSH
8862: LD_INT 21
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_INT 23
8870: PUSH
8871: LD_INT 24
8873: PUSH
8874: LD_INT 25
8876: PUSH
8877: LD_INT 26
8879: PUSH
8880: LD_INT 27
8882: PUSH
8883: LD_INT 28
8885: PUSH
8886: LD_INT 30
8888: PUSH
8889: LD_INT 31
8891: PUSH
8892: LD_INT 32
8894: PUSH
8895: LD_INT 33
8897: PUSH
8898: LD_INT 34
8900: PUSH
8901: LD_INT 36
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 101
8942: PUSH
8943: LD_INT 102
8945: PUSH
8946: LD_INT 103
8948: PUSH
8949: LD_INT 104
8951: PUSH
8952: LD_INT 105
8954: PUSH
8955: LD_INT 106
8957: PUSH
8958: LD_INT 107
8960: PUSH
8961: LD_INT 108
8963: PUSH
8964: LD_INT 109
8966: PUSH
8967: LD_INT 110
8969: PUSH
8970: LD_INT 111
8972: PUSH
8973: LD_INT 112
8975: PUSH
8976: LD_INT 113
8978: PUSH
8979: LD_INT 114
8981: PUSH
8982: LD_INT 116
8984: PUSH
8985: LD_INT 117
8987: PUSH
8988: LD_INT 118
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: ST_TO_ADDR
9014: GO 10469
9016: LD_INT 13
9018: DOUBLE
9019: EQUAL
9020: IFTRUE 9024
9022: GO 9232
9024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9025: LD_ADDR_VAR 0 2
9029: PUSH
9030: LD_INT 1
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: LD_INT 4
9041: PUSH
9042: LD_INT 5
9044: PUSH
9045: LD_INT 8
9047: PUSH
9048: LD_INT 9
9050: PUSH
9051: LD_INT 10
9053: PUSH
9054: LD_INT 11
9056: PUSH
9057: LD_INT 12
9059: PUSH
9060: LD_INT 14
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: LD_INT 16
9068: PUSH
9069: LD_INT 17
9071: PUSH
9072: LD_INT 18
9074: PUSH
9075: LD_INT 19
9077: PUSH
9078: LD_INT 20
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_INT 23
9089: PUSH
9090: LD_INT 24
9092: PUSH
9093: LD_INT 25
9095: PUSH
9096: LD_INT 26
9098: PUSH
9099: LD_INT 27
9101: PUSH
9102: LD_INT 28
9104: PUSH
9105: LD_INT 30
9107: PUSH
9108: LD_INT 31
9110: PUSH
9111: LD_INT 32
9113: PUSH
9114: LD_INT 33
9116: PUSH
9117: LD_INT 34
9119: PUSH
9120: LD_INT 36
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 101
9158: PUSH
9159: LD_INT 102
9161: PUSH
9162: LD_INT 103
9164: PUSH
9165: LD_INT 104
9167: PUSH
9168: LD_INT 105
9170: PUSH
9171: LD_INT 106
9173: PUSH
9174: LD_INT 107
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 109
9182: PUSH
9183: LD_INT 110
9185: PUSH
9186: LD_INT 111
9188: PUSH
9189: LD_INT 112
9191: PUSH
9192: LD_INT 113
9194: PUSH
9195: LD_INT 114
9197: PUSH
9198: LD_INT 116
9200: PUSH
9201: LD_INT 117
9203: PUSH
9204: LD_INT 118
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: ST_TO_ADDR
9230: GO 10469
9232: LD_INT 14
9234: DOUBLE
9235: EQUAL
9236: IFTRUE 9240
9238: GO 9464
9240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 1
9248: PUSH
9249: LD_INT 2
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: LD_INT 4
9257: PUSH
9258: LD_INT 5
9260: PUSH
9261: LD_INT 6
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: LD_INT 8
9269: PUSH
9270: LD_INT 9
9272: PUSH
9273: LD_INT 10
9275: PUSH
9276: LD_INT 11
9278: PUSH
9279: LD_INT 12
9281: PUSH
9282: LD_INT 13
9284: PUSH
9285: LD_INT 14
9287: PUSH
9288: LD_INT 15
9290: PUSH
9291: LD_INT 16
9293: PUSH
9294: LD_INT 17
9296: PUSH
9297: LD_INT 18
9299: PUSH
9300: LD_INT 19
9302: PUSH
9303: LD_INT 20
9305: PUSH
9306: LD_INT 21
9308: PUSH
9309: LD_INT 22
9311: PUSH
9312: LD_INT 23
9314: PUSH
9315: LD_INT 24
9317: PUSH
9318: LD_INT 25
9320: PUSH
9321: LD_INT 26
9323: PUSH
9324: LD_INT 27
9326: PUSH
9327: LD_INT 28
9329: PUSH
9330: LD_INT 29
9332: PUSH
9333: LD_INT 30
9335: PUSH
9336: LD_INT 31
9338: PUSH
9339: LD_INT 32
9341: PUSH
9342: LD_INT 33
9344: PUSH
9345: LD_INT 34
9347: PUSH
9348: LD_INT 36
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 101
9390: PUSH
9391: LD_INT 102
9393: PUSH
9394: LD_INT 103
9396: PUSH
9397: LD_INT 104
9399: PUSH
9400: LD_INT 105
9402: PUSH
9403: LD_INT 106
9405: PUSH
9406: LD_INT 107
9408: PUSH
9409: LD_INT 108
9411: PUSH
9412: LD_INT 109
9414: PUSH
9415: LD_INT 110
9417: PUSH
9418: LD_INT 111
9420: PUSH
9421: LD_INT 112
9423: PUSH
9424: LD_INT 113
9426: PUSH
9427: LD_INT 114
9429: PUSH
9430: LD_INT 116
9432: PUSH
9433: LD_INT 117
9435: PUSH
9436: LD_INT 118
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: ST_TO_ADDR
9462: GO 10469
9464: LD_INT 15
9466: DOUBLE
9467: EQUAL
9468: IFTRUE 9472
9470: GO 9696
9472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9473: LD_ADDR_VAR 0 2
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: LD_INT 5
9492: PUSH
9493: LD_INT 6
9495: PUSH
9496: LD_INT 7
9498: PUSH
9499: LD_INT 8
9501: PUSH
9502: LD_INT 9
9504: PUSH
9505: LD_INT 10
9507: PUSH
9508: LD_INT 11
9510: PUSH
9511: LD_INT 12
9513: PUSH
9514: LD_INT 13
9516: PUSH
9517: LD_INT 14
9519: PUSH
9520: LD_INT 15
9522: PUSH
9523: LD_INT 16
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 18
9531: PUSH
9532: LD_INT 19
9534: PUSH
9535: LD_INT 20
9537: PUSH
9538: LD_INT 21
9540: PUSH
9541: LD_INT 22
9543: PUSH
9544: LD_INT 23
9546: PUSH
9547: LD_INT 24
9549: PUSH
9550: LD_INT 25
9552: PUSH
9553: LD_INT 26
9555: PUSH
9556: LD_INT 27
9558: PUSH
9559: LD_INT 28
9561: PUSH
9562: LD_INT 29
9564: PUSH
9565: LD_INT 30
9567: PUSH
9568: LD_INT 31
9570: PUSH
9571: LD_INT 32
9573: PUSH
9574: LD_INT 33
9576: PUSH
9577: LD_INT 34
9579: PUSH
9580: LD_INT 36
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 101
9622: PUSH
9623: LD_INT 102
9625: PUSH
9626: LD_INT 103
9628: PUSH
9629: LD_INT 104
9631: PUSH
9632: LD_INT 105
9634: PUSH
9635: LD_INT 106
9637: PUSH
9638: LD_INT 107
9640: PUSH
9641: LD_INT 108
9643: PUSH
9644: LD_INT 109
9646: PUSH
9647: LD_INT 110
9649: PUSH
9650: LD_INT 111
9652: PUSH
9653: LD_INT 112
9655: PUSH
9656: LD_INT 113
9658: PUSH
9659: LD_INT 114
9661: PUSH
9662: LD_INT 116
9664: PUSH
9665: LD_INT 117
9667: PUSH
9668: LD_INT 118
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: ST_TO_ADDR
9694: GO 10469
9696: LD_INT 16
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 9840
9704: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9705: LD_ADDR_VAR 0 2
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 4
9715: PUSH
9716: LD_INT 5
9718: PUSH
9719: LD_INT 7
9721: PUSH
9722: LD_INT 11
9724: PUSH
9725: LD_INT 12
9727: PUSH
9728: LD_INT 15
9730: PUSH
9731: LD_INT 16
9733: PUSH
9734: LD_INT 20
9736: PUSH
9737: LD_INT 21
9739: PUSH
9740: LD_INT 22
9742: PUSH
9743: LD_INT 23
9745: PUSH
9746: LD_INT 25
9748: PUSH
9749: LD_INT 26
9751: PUSH
9752: LD_INT 30
9754: PUSH
9755: LD_INT 31
9757: PUSH
9758: LD_INT 32
9760: PUSH
9761: LD_INT 33
9763: PUSH
9764: LD_INT 34
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 101
9790: PUSH
9791: LD_INT 102
9793: PUSH
9794: LD_INT 103
9796: PUSH
9797: LD_INT 106
9799: PUSH
9800: LD_INT 108
9802: PUSH
9803: LD_INT 112
9805: PUSH
9806: LD_INT 113
9808: PUSH
9809: LD_INT 114
9811: PUSH
9812: LD_INT 116
9814: PUSH
9815: LD_INT 117
9817: PUSH
9818: LD_INT 118
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
9838: GO 10469
9840: LD_INT 17
9842: DOUBLE
9843: EQUAL
9844: IFTRUE 9848
9846: GO 10072
9848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9849: LD_ADDR_VAR 0 2
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: LD_INT 3
9862: PUSH
9863: LD_INT 4
9865: PUSH
9866: LD_INT 5
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: LD_INT 7
9874: PUSH
9875: LD_INT 8
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 11
9886: PUSH
9887: LD_INT 12
9889: PUSH
9890: LD_INT 13
9892: PUSH
9893: LD_INT 14
9895: PUSH
9896: LD_INT 15
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: LD_INT 17
9904: PUSH
9905: LD_INT 18
9907: PUSH
9908: LD_INT 19
9910: PUSH
9911: LD_INT 20
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: LD_INT 24
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 26
9931: PUSH
9932: LD_INT 27
9934: PUSH
9935: LD_INT 28
9937: PUSH
9938: LD_INT 29
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 31
9946: PUSH
9947: LD_INT 32
9949: PUSH
9950: LD_INT 33
9952: PUSH
9953: LD_INT 34
9955: PUSH
9956: LD_INT 36
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 103
10004: PUSH
10005: LD_INT 104
10007: PUSH
10008: LD_INT 105
10010: PUSH
10011: LD_INT 106
10013: PUSH
10014: LD_INT 107
10016: PUSH
10017: LD_INT 108
10019: PUSH
10020: LD_INT 109
10022: PUSH
10023: LD_INT 110
10025: PUSH
10026: LD_INT 111
10028: PUSH
10029: LD_INT 112
10031: PUSH
10032: LD_INT 113
10034: PUSH
10035: LD_INT 114
10037: PUSH
10038: LD_INT 116
10040: PUSH
10041: LD_INT 117
10043: PUSH
10044: LD_INT 118
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10469
10072: LD_INT 18
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10228
10080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 7
10097: PUSH
10098: LD_INT 11
10100: PUSH
10101: LD_INT 12
10103: PUSH
10104: LD_INT 15
10106: PUSH
10107: LD_INT 16
10109: PUSH
10110: LD_INT 20
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 25
10124: PUSH
10125: LD_INT 26
10127: PUSH
10128: LD_INT 30
10130: PUSH
10131: LD_INT 31
10133: PUSH
10134: LD_INT 32
10136: PUSH
10137: LD_INT 33
10139: PUSH
10140: LD_INT 34
10142: PUSH
10143: LD_INT 35
10145: PUSH
10146: LD_INT 36
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 101
10174: PUSH
10175: LD_INT 102
10177: PUSH
10178: LD_INT 103
10180: PUSH
10181: LD_INT 106
10183: PUSH
10184: LD_INT 108
10186: PUSH
10187: LD_INT 112
10189: PUSH
10190: LD_INT 113
10192: PUSH
10193: LD_INT 114
10195: PUSH
10196: LD_INT 115
10198: PUSH
10199: LD_INT 116
10201: PUSH
10202: LD_INT 117
10204: PUSH
10205: LD_INT 118
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: ST_TO_ADDR
10226: GO 10469
10228: LD_INT 19
10230: DOUBLE
10231: EQUAL
10232: IFTRUE 10236
10234: GO 10468
10236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 1
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: LD_INT 3
10250: PUSH
10251: LD_INT 4
10253: PUSH
10254: LD_INT 5
10256: PUSH
10257: LD_INT 6
10259: PUSH
10260: LD_INT 7
10262: PUSH
10263: LD_INT 8
10265: PUSH
10266: LD_INT 9
10268: PUSH
10269: LD_INT 10
10271: PUSH
10272: LD_INT 11
10274: PUSH
10275: LD_INT 12
10277: PUSH
10278: LD_INT 13
10280: PUSH
10281: LD_INT 14
10283: PUSH
10284: LD_INT 15
10286: PUSH
10287: LD_INT 16
10289: PUSH
10290: LD_INT 17
10292: PUSH
10293: LD_INT 18
10295: PUSH
10296: LD_INT 19
10298: PUSH
10299: LD_INT 20
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 22
10307: PUSH
10308: LD_INT 23
10310: PUSH
10311: LD_INT 24
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 26
10319: PUSH
10320: LD_INT 27
10322: PUSH
10323: LD_INT 28
10325: PUSH
10326: LD_INT 29
10328: PUSH
10329: LD_INT 30
10331: PUSH
10332: LD_INT 31
10334: PUSH
10335: LD_INT 32
10337: PUSH
10338: LD_INT 33
10340: PUSH
10341: LD_INT 34
10343: PUSH
10344: LD_INT 35
10346: PUSH
10347: LD_INT 36
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 101
10390: PUSH
10391: LD_INT 102
10393: PUSH
10394: LD_INT 103
10396: PUSH
10397: LD_INT 104
10399: PUSH
10400: LD_INT 105
10402: PUSH
10403: LD_INT 106
10405: PUSH
10406: LD_INT 107
10408: PUSH
10409: LD_INT 108
10411: PUSH
10412: LD_INT 109
10414: PUSH
10415: LD_INT 110
10417: PUSH
10418: LD_INT 111
10420: PUSH
10421: LD_INT 112
10423: PUSH
10424: LD_INT 113
10426: PUSH
10427: LD_INT 114
10429: PUSH
10430: LD_INT 115
10432: PUSH
10433: LD_INT 116
10435: PUSH
10436: LD_INT 117
10438: PUSH
10439: LD_INT 118
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: ST_TO_ADDR
10466: GO 10469
10468: POP
// end else
10469: GO 10700
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10471: LD_ADDR_VAR 0 2
10475: PUSH
10476: LD_INT 1
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: LD_INT 3
10484: PUSH
10485: LD_INT 4
10487: PUSH
10488: LD_INT 5
10490: PUSH
10491: LD_INT 6
10493: PUSH
10494: LD_INT 7
10496: PUSH
10497: LD_INT 8
10499: PUSH
10500: LD_INT 9
10502: PUSH
10503: LD_INT 10
10505: PUSH
10506: LD_INT 11
10508: PUSH
10509: LD_INT 12
10511: PUSH
10512: LD_INT 13
10514: PUSH
10515: LD_INT 14
10517: PUSH
10518: LD_INT 15
10520: PUSH
10521: LD_INT 16
10523: PUSH
10524: LD_INT 17
10526: PUSH
10527: LD_INT 18
10529: PUSH
10530: LD_INT 19
10532: PUSH
10533: LD_INT 20
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 23
10544: PUSH
10545: LD_INT 24
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 26
10553: PUSH
10554: LD_INT 27
10556: PUSH
10557: LD_INT 28
10559: PUSH
10560: LD_INT 29
10562: PUSH
10563: LD_INT 30
10565: PUSH
10566: LD_INT 31
10568: PUSH
10569: LD_INT 32
10571: PUSH
10572: LD_INT 33
10574: PUSH
10575: LD_INT 34
10577: PUSH
10578: LD_INT 35
10580: PUSH
10581: LD_INT 36
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 101
10624: PUSH
10625: LD_INT 102
10627: PUSH
10628: LD_INT 103
10630: PUSH
10631: LD_INT 104
10633: PUSH
10634: LD_INT 105
10636: PUSH
10637: LD_INT 106
10639: PUSH
10640: LD_INT 107
10642: PUSH
10643: LD_INT 108
10645: PUSH
10646: LD_INT 109
10648: PUSH
10649: LD_INT 110
10651: PUSH
10652: LD_INT 111
10654: PUSH
10655: LD_INT 112
10657: PUSH
10658: LD_INT 113
10660: PUSH
10661: LD_INT 114
10663: PUSH
10664: LD_INT 115
10666: PUSH
10667: LD_INT 116
10669: PUSH
10670: LD_INT 117
10672: PUSH
10673: LD_INT 118
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: ST_TO_ADDR
// if result then
10700: LD_VAR 0 2
10704: IFFALSE 11490
// begin normal :=  ;
10706: LD_ADDR_VAR 0 5
10710: PUSH
10711: LD_STRING 
10713: ST_TO_ADDR
// hardcore :=  ;
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: LD_STRING 
10721: ST_TO_ADDR
// active :=  ;
10722: LD_ADDR_VAR 0 7
10726: PUSH
10727: LD_STRING 
10729: ST_TO_ADDR
// for i = 1 to normalCounter do
10730: LD_ADDR_VAR 0 8
10734: PUSH
10735: DOUBLE
10736: LD_INT 1
10738: DEC
10739: ST_TO_ADDR
10740: LD_EXP 26
10744: PUSH
10745: FOR_TO
10746: IFFALSE 10847
// begin tmp := 0 ;
10748: LD_ADDR_VAR 0 3
10752: PUSH
10753: LD_STRING 0
10755: ST_TO_ADDR
// if result [ 1 ] then
10756: LD_VAR 0 2
10760: PUSH
10761: LD_INT 1
10763: ARRAY
10764: IFFALSE 10829
// if result [ 1 ] [ 1 ] = i then
10766: LD_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ARRAY
10774: PUSH
10775: LD_INT 1
10777: ARRAY
10778: PUSH
10779: LD_VAR 0 8
10783: EQUAL
10784: IFFALSE 10829
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10786: LD_ADDR_VAR 0 2
10790: PUSH
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: LD_VAR 0 2
10803: PUSH
10804: LD_INT 1
10806: ARRAY
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 3
10815: PPUSH
10816: CALL_OW 1
10820: ST_TO_ADDR
// tmp := 1 ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_STRING 1
10828: ST_TO_ADDR
// end ; normal := normal & tmp ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_VAR 0 5
10838: PUSH
10839: LD_VAR 0 3
10843: STR
10844: ST_TO_ADDR
// end ;
10845: GO 10745
10847: POP
10848: POP
// for i = 1 to hardcoreCounter do
10849: LD_ADDR_VAR 0 8
10853: PUSH
10854: DOUBLE
10855: LD_INT 1
10857: DEC
10858: ST_TO_ADDR
10859: LD_EXP 27
10863: PUSH
10864: FOR_TO
10865: IFFALSE 10970
// begin tmp := 0 ;
10867: LD_ADDR_VAR 0 3
10871: PUSH
10872: LD_STRING 0
10874: ST_TO_ADDR
// if result [ 2 ] then
10875: LD_VAR 0 2
10879: PUSH
10880: LD_INT 2
10882: ARRAY
10883: IFFALSE 10952
// if result [ 2 ] [ 1 ] = 100 + i then
10885: LD_VAR 0 2
10889: PUSH
10890: LD_INT 2
10892: ARRAY
10893: PUSH
10894: LD_INT 1
10896: ARRAY
10897: PUSH
10898: LD_INT 100
10900: PUSH
10901: LD_VAR 0 8
10905: PLUS
10906: EQUAL
10907: IFFALSE 10952
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_INT 2
10921: PPUSH
10922: LD_VAR 0 2
10926: PUSH
10927: LD_INT 2
10929: ARRAY
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 3
10938: PPUSH
10939: CALL_OW 1
10943: ST_TO_ADDR
// tmp := 1 ;
10944: LD_ADDR_VAR 0 3
10948: PUSH
10949: LD_STRING 1
10951: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10952: LD_ADDR_VAR 0 6
10956: PUSH
10957: LD_VAR 0 6
10961: PUSH
10962: LD_VAR 0 3
10966: STR
10967: ST_TO_ADDR
// end ;
10968: GO 10864
10970: POP
10971: POP
// if isGameLoad then
10972: LD_VAR 0 1
10976: IFFALSE 11451
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10978: LD_ADDR_VAR 0 4
10982: PUSH
10983: LD_EXP 30
10987: PUSH
10988: LD_EXP 29
10992: PUSH
10993: LD_EXP 31
10997: PUSH
10998: LD_EXP 28
11002: PUSH
11003: LD_EXP 32
11007: PUSH
11008: LD_EXP 33
11012: PUSH
11013: LD_EXP 34
11017: PUSH
11018: LD_EXP 35
11022: PUSH
11023: LD_EXP 36
11027: PUSH
11028: LD_EXP 37
11032: PUSH
11033: LD_EXP 38
11037: PUSH
11038: LD_EXP 39
11042: PUSH
11043: LD_EXP 40
11047: PUSH
11048: LD_EXP 41
11052: PUSH
11053: LD_EXP 49
11057: PUSH
11058: LD_EXP 50
11062: PUSH
11063: LD_EXP 51
11067: PUSH
11068: LD_EXP 52
11072: PUSH
11073: LD_EXP 54
11077: PUSH
11078: LD_EXP 55
11082: PUSH
11083: LD_EXP 56
11087: PUSH
11088: LD_EXP 59
11092: PUSH
11093: LD_EXP 61
11097: PUSH
11098: LD_EXP 62
11102: PUSH
11103: LD_EXP 63
11107: PUSH
11108: LD_EXP 65
11112: PUSH
11113: LD_EXP 66
11117: PUSH
11118: LD_EXP 69
11122: PUSH
11123: LD_EXP 70
11127: PUSH
11128: LD_EXP 71
11132: PUSH
11133: LD_EXP 72
11137: PUSH
11138: LD_EXP 73
11142: PUSH
11143: LD_EXP 74
11147: PUSH
11148: LD_EXP 75
11152: PUSH
11153: LD_EXP 76
11157: PUSH
11158: LD_EXP 77
11162: PUSH
11163: LD_EXP 42
11167: PUSH
11168: LD_EXP 43
11172: PUSH
11173: LD_EXP 46
11177: PUSH
11178: LD_EXP 47
11182: PUSH
11183: LD_EXP 48
11187: PUSH
11188: LD_EXP 44
11192: PUSH
11193: LD_EXP 45
11197: PUSH
11198: LD_EXP 53
11202: PUSH
11203: LD_EXP 57
11207: PUSH
11208: LD_EXP 58
11212: PUSH
11213: LD_EXP 60
11217: PUSH
11218: LD_EXP 64
11222: PUSH
11223: LD_EXP 67
11227: PUSH
11228: LD_EXP 68
11232: PUSH
11233: LD_EXP 78
11237: PUSH
11238: LD_EXP 79
11242: PUSH
11243: LD_EXP 80
11247: PUSH
11248: LD_EXP 81
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: ST_TO_ADDR
// tmp :=  ;
11309: LD_ADDR_VAR 0 3
11313: PUSH
11314: LD_STRING 
11316: ST_TO_ADDR
// for i = 1 to normalCounter do
11317: LD_ADDR_VAR 0 8
11321: PUSH
11322: DOUBLE
11323: LD_INT 1
11325: DEC
11326: ST_TO_ADDR
11327: LD_EXP 26
11331: PUSH
11332: FOR_TO
11333: IFFALSE 11369
// begin if flags [ i ] then
11335: LD_VAR 0 4
11339: PUSH
11340: LD_VAR 0 8
11344: ARRAY
11345: IFFALSE 11367
// tmp := tmp & i & ; ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_VAR 0 3
11356: PUSH
11357: LD_VAR 0 8
11361: STR
11362: PUSH
11363: LD_STRING ;
11365: STR
11366: ST_TO_ADDR
// end ;
11367: GO 11332
11369: POP
11370: POP
// for i = 1 to hardcoreCounter do
11371: LD_ADDR_VAR 0 8
11375: PUSH
11376: DOUBLE
11377: LD_INT 1
11379: DEC
11380: ST_TO_ADDR
11381: LD_EXP 27
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11433
// begin if flags [ normalCounter + i ] then
11389: LD_VAR 0 4
11393: PUSH
11394: LD_EXP 26
11398: PUSH
11399: LD_VAR 0 8
11403: PLUS
11404: ARRAY
11405: IFFALSE 11431
// tmp := tmp & ( 100 + i ) & ; ;
11407: LD_ADDR_VAR 0 3
11411: PUSH
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 100
11419: PUSH
11420: LD_VAR 0 8
11424: PLUS
11425: STR
11426: PUSH
11427: LD_STRING ;
11429: STR
11430: ST_TO_ADDR
// end ;
11431: GO 11386
11433: POP
11434: POP
// if tmp then
11435: LD_VAR 0 3
11439: IFFALSE 11451
// active := tmp ;
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_VAR 0 3
11450: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11451: LD_STRING getStreamItemsFromMission("
11453: PUSH
11454: LD_VAR 0 5
11458: STR
11459: PUSH
11460: LD_STRING ","
11462: STR
11463: PUSH
11464: LD_VAR 0 6
11468: STR
11469: PUSH
11470: LD_STRING ","
11472: STR
11473: PUSH
11474: LD_VAR 0 7
11478: STR
11479: PUSH
11480: LD_STRING ")
11482: STR
11483: PPUSH
11484: CALL_OW 559
// end else
11488: GO 11497
// ToLua ( getStreamItemsFromMission("","","") ) ;
11490: LD_STRING getStreamItemsFromMission("","","")
11492: PPUSH
11493: CALL_OW 559
// end ;
11497: LD_VAR 0 2
11501: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11502: LD_EXP 25
11506: PUSH
11507: LD_EXP 30
11511: AND
11512: IFFALSE 11636
11514: GO 11516
11516: DISABLE
11517: LD_INT 0
11519: PPUSH
11520: PPUSH
// begin enable ;
11521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 22
11529: PUSH
11530: LD_OWVAR 2
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: LD_INT 34
11544: PUSH
11545: LD_INT 7
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 34
11554: PUSH
11555: LD_INT 45
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 34
11564: PUSH
11565: LD_INT 28
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 47
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: ST_TO_ADDR
// if not tmp then
11598: LD_VAR 0 2
11602: NOT
11603: IFFALSE 11607
// exit ;
11605: GO 11636
// for i in tmp do
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_VAR 0 2
11616: PUSH
11617: FOR_IN
11618: IFFALSE 11634
// begin SetLives ( i , 0 ) ;
11620: LD_VAR 0 1
11624: PPUSH
11625: LD_INT 0
11627: PPUSH
11628: CALL_OW 234
// end ;
11632: GO 11617
11634: POP
11635: POP
// end ;
11636: PPOPN 2
11638: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11639: LD_EXP 25
11643: PUSH
11644: LD_EXP 31
11648: AND
11649: IFFALSE 11733
11651: GO 11653
11653: DISABLE
11654: LD_INT 0
11656: PPUSH
11657: PPUSH
// begin enable ;
11658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11659: LD_ADDR_VAR 0 2
11663: PUSH
11664: LD_INT 22
11666: PUSH
11667: LD_OWVAR 2
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 32
11678: PUSH
11679: LD_INT 3
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: ST_TO_ADDR
// if not tmp then
11695: LD_VAR 0 2
11699: NOT
11700: IFFALSE 11704
// exit ;
11702: GO 11733
// for i in tmp do
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_VAR 0 2
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11731
// begin SetLives ( i , 0 ) ;
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_INT 0
11724: PPUSH
11725: CALL_OW 234
// end ;
11729: GO 11714
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11736: LD_EXP 25
11740: PUSH
11741: LD_EXP 28
11745: AND
11746: IFFALSE 11839
11748: GO 11750
11750: DISABLE
11751: LD_INT 0
11753: PPUSH
// begin enable ;
11754: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 5
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 25
11787: PUSH
11788: LD_INT 9
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 25
11797: PUSH
11798: LD_INT 8
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: PUSH
11820: FOR_IN
11821: IFFALSE 11837
// begin SetClass ( i , 1 ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 336
// end ;
11835: GO 11820
11837: POP
11838: POP
// end ;
11839: PPOPN 1
11841: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11842: LD_EXP 25
11846: PUSH
11847: LD_EXP 29
11851: AND
11852: PUSH
11853: LD_OWVAR 65
11857: PUSH
11858: LD_INT 7
11860: LESS
11861: AND
11862: IFFALSE 11876
11864: GO 11866
11866: DISABLE
// begin enable ;
11867: ENABLE
// game_speed := 7 ;
11868: LD_ADDR_OWVAR 65
11872: PUSH
11873: LD_INT 7
11875: ST_TO_ADDR
// end ;
11876: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11877: LD_EXP 25
11881: PUSH
11882: LD_EXP 32
11886: AND
11887: IFFALSE 12089
11889: GO 11891
11891: DISABLE
11892: LD_INT 0
11894: PPUSH
11895: PPUSH
11896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11897: LD_ADDR_VAR 0 3
11901: PUSH
11902: LD_INT 81
11904: PUSH
11905: LD_OWVAR 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 1
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 69
11932: ST_TO_ADDR
// if not tmp then
11933: LD_VAR 0 3
11937: NOT
11938: IFFALSE 11942
// exit ;
11940: GO 12089
// if tmp > 5 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 5
11949: GREATER
11950: IFFALSE 11962
// k := 5 else
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: LD_INT 5
11959: ST_TO_ADDR
11960: GO 11972
// k := tmp ;
11962: LD_ADDR_VAR 0 2
11966: PUSH
11967: LD_VAR 0 3
11971: ST_TO_ADDR
// for i := 1 to k do
11972: LD_ADDR_VAR 0 1
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_VAR 0 2
11986: PUSH
11987: FOR_TO
11988: IFFALSE 12087
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_VAR 0 1
11999: ARRAY
12000: PPUSH
12001: LD_VAR 0 1
12005: PUSH
12006: LD_INT 4
12008: MOD
12009: PUSH
12010: LD_INT 1
12012: PLUS
12013: PPUSH
12014: CALL_OW 259
12018: PUSH
12019: LD_INT 10
12021: LESS
12022: IFFALSE 12085
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12024: LD_VAR 0 3
12028: PUSH
12029: LD_VAR 0 1
12033: ARRAY
12034: PPUSH
12035: LD_VAR 0 1
12039: PUSH
12040: LD_INT 4
12042: MOD
12043: PUSH
12044: LD_INT 1
12046: PLUS
12047: PPUSH
12048: LD_VAR 0 3
12052: PUSH
12053: LD_VAR 0 1
12057: ARRAY
12058: PPUSH
12059: LD_VAR 0 1
12063: PUSH
12064: LD_INT 4
12066: MOD
12067: PUSH
12068: LD_INT 1
12070: PLUS
12071: PPUSH
12072: CALL_OW 259
12076: PUSH
12077: LD_INT 1
12079: PLUS
12080: PPUSH
12081: CALL_OW 237
12085: GO 11987
12087: POP
12088: POP
// end ;
12089: PPOPN 3
12091: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12092: LD_EXP 25
12096: PUSH
12097: LD_EXP 33
12101: AND
12102: IFFALSE 12122
12104: GO 12106
12106: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12107: LD_INT 4
12109: PPUSH
12110: LD_OWVAR 2
12114: PPUSH
12115: LD_INT 0
12117: PPUSH
12118: CALL_OW 324
12122: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12123: LD_EXP 25
12127: PUSH
12128: LD_EXP 62
12132: AND
12133: IFFALSE 12153
12135: GO 12137
12137: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12138: LD_INT 19
12140: PPUSH
12141: LD_OWVAR 2
12145: PPUSH
12146: LD_INT 0
12148: PPUSH
12149: CALL_OW 324
12153: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12154: LD_EXP 25
12158: PUSH
12159: LD_EXP 34
12163: AND
12164: IFFALSE 12266
12166: GO 12168
12168: DISABLE
12169: LD_INT 0
12171: PPUSH
12172: PPUSH
// begin enable ;
12173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12174: LD_ADDR_VAR 0 2
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_OWVAR 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 34
12196: PUSH
12197: LD_INT 11
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 34
12206: PUSH
12207: LD_INT 30
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 69
12227: ST_TO_ADDR
// if not tmp then
12228: LD_VAR 0 2
12232: NOT
12233: IFFALSE 12237
// exit ;
12235: GO 12266
// for i in tmp do
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_VAR 0 2
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12264
// begin SetLives ( i , 0 ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_INT 0
12257: PPUSH
12258: CALL_OW 234
// end ;
12262: GO 12247
12264: POP
12265: POP
// end ;
12266: PPOPN 2
12268: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12269: LD_EXP 25
12273: PUSH
12274: LD_EXP 35
12278: AND
12279: IFFALSE 12299
12281: GO 12283
12283: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12284: LD_INT 32
12286: PPUSH
12287: LD_OWVAR 2
12291: PPUSH
12292: LD_INT 0
12294: PPUSH
12295: CALL_OW 324
12299: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12300: LD_EXP 25
12304: PUSH
12305: LD_EXP 36
12309: AND
12310: IFFALSE 12491
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
12319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: LD_OWVAR 2
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 33
12339: PUSH
12340: LD_INT 3
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: ST_TO_ADDR
// if not tmp then
12356: LD_VAR 0 2
12360: NOT
12361: IFFALSE 12365
// exit ;
12363: GO 12491
// side := 0 ;
12365: LD_ADDR_VAR 0 3
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// for i := 1 to 8 do
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: DOUBLE
12379: LD_INT 1
12381: DEC
12382: ST_TO_ADDR
12383: LD_INT 8
12385: PUSH
12386: FOR_TO
12387: IFFALSE 12435
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12389: LD_OWVAR 2
12393: PUSH
12394: LD_VAR 0 1
12398: NONEQUAL
12399: PUSH
12400: LD_OWVAR 2
12404: PPUSH
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 81
12414: PUSH
12415: LD_INT 2
12417: EQUAL
12418: AND
12419: IFFALSE 12433
// begin side := i ;
12421: LD_ADDR_VAR 0 3
12425: PUSH
12426: LD_VAR 0 1
12430: ST_TO_ADDR
// break ;
12431: GO 12435
// end ;
12433: GO 12386
12435: POP
12436: POP
// if not side then
12437: LD_VAR 0 3
12441: NOT
12442: IFFALSE 12446
// exit ;
12444: GO 12491
// for i := 1 to tmp do
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: DOUBLE
12452: LD_INT 1
12454: DEC
12455: ST_TO_ADDR
12456: LD_VAR 0 2
12460: PUSH
12461: FOR_TO
12462: IFFALSE 12489
// if Prob ( 60 ) then
12464: LD_INT 60
12466: PPUSH
12467: CALL_OW 13
12471: IFFALSE 12487
// SetSide ( i , side ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: CALL_OW 235
12487: GO 12461
12489: POP
12490: POP
// end ;
12491: PPOPN 3
12493: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12494: LD_EXP 25
12498: PUSH
12499: LD_EXP 38
12503: AND
12504: IFFALSE 12623
12506: GO 12508
12508: DISABLE
12509: LD_INT 0
12511: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12512: LD_ADDR_VAR 0 1
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_OWVAR 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: LD_INT 23
12544: PUSH
12545: LD_INT 0
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: PPUSH
12561: CALL_OW 69
12565: PUSH
12566: FOR_IN
12567: IFFALSE 12621
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 257
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: IN
12597: IFFALSE 12619
// SetClass ( un , rand ( 1 , 4 ) ) ;
12599: LD_VAR 0 1
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: LD_INT 4
12609: PPUSH
12610: CALL_OW 12
12614: PPUSH
12615: CALL_OW 336
12619: GO 12566
12621: POP
12622: POP
// end ;
12623: PPOPN 1
12625: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12626: LD_EXP 25
12630: PUSH
12631: LD_EXP 37
12635: AND
12636: IFFALSE 12715
12638: GO 12640
12640: DISABLE
12641: LD_INT 0
12643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12644: LD_ADDR_VAR 0 1
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_OWVAR 2
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 3
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PPUSH
12675: CALL_OW 69
12679: ST_TO_ADDR
// if not tmp then
12680: LD_VAR 0 1
12684: NOT
12685: IFFALSE 12689
// exit ;
12687: GO 12715
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12689: LD_VAR 0 1
12693: PUSH
12694: LD_INT 1
12696: PPUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL_OW 12
12706: ARRAY
12707: PPUSH
12708: LD_INT 100
12710: PPUSH
12711: CALL_OW 234
// end ;
12715: PPOPN 1
12717: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12718: LD_EXP 25
12722: PUSH
12723: LD_EXP 39
12727: AND
12728: IFFALSE 12826
12730: GO 12732
12732: DISABLE
12733: LD_INT 0
12735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: LD_INT 22
12743: PUSH
12744: LD_OWVAR 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: ST_TO_ADDR
// if not tmp then
12772: LD_VAR 0 1
12776: NOT
12777: IFFALSE 12781
// exit ;
12779: GO 12826
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12781: LD_VAR 0 1
12785: PUSH
12786: LD_INT 1
12788: PPUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 12
12798: ARRAY
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: LD_INT 4
12805: PPUSH
12806: CALL_OW 12
12810: PPUSH
12811: LD_INT 3000
12813: PPUSH
12814: LD_INT 9000
12816: PPUSH
12817: CALL_OW 12
12821: PPUSH
12822: CALL_OW 492
// end ;
12826: PPOPN 1
12828: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12829: LD_EXP 25
12833: PUSH
12834: LD_EXP 40
12838: AND
12839: IFFALSE 12859
12841: GO 12843
12843: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12844: LD_INT 1
12846: PPUSH
12847: LD_OWVAR 2
12851: PPUSH
12852: LD_INT 0
12854: PPUSH
12855: CALL_OW 324
12859: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12860: LD_EXP 25
12864: PUSH
12865: LD_EXP 41
12869: AND
12870: IFFALSE 12953
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12879: LD_ADDR_VAR 0 2
12883: PUSH
12884: LD_INT 22
12886: PUSH
12887: LD_OWVAR 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 21
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: ST_TO_ADDR
// if not tmp then
12915: LD_VAR 0 2
12919: NOT
12920: IFFALSE 12924
// exit ;
12922: GO 12953
// for i in tmp do
12924: LD_ADDR_VAR 0 1
12928: PUSH
12929: LD_VAR 0 2
12933: PUSH
12934: FOR_IN
12935: IFFALSE 12951
// SetBLevel ( i , 10 ) ;
12937: LD_VAR 0 1
12941: PPUSH
12942: LD_INT 10
12944: PPUSH
12945: CALL_OW 241
12949: GO 12934
12951: POP
12952: POP
// end ;
12953: PPOPN 2
12955: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12956: LD_EXP 25
12960: PUSH
12961: LD_EXP 42
12965: AND
12966: IFFALSE 13077
12968: GO 12970
12970: DISABLE
12971: LD_INT 0
12973: PPUSH
12974: PPUSH
12975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12976: LD_ADDR_VAR 0 3
12980: PUSH
12981: LD_INT 22
12983: PUSH
12984: LD_OWVAR 2
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 1
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: ST_TO_ADDR
// if not tmp then
13012: LD_VAR 0 3
13016: NOT
13017: IFFALSE 13021
// exit ;
13019: GO 13077
// un := tmp [ rand ( 1 , tmp ) ] ;
13021: LD_ADDR_VAR 0 2
13025: PUSH
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: CALL_OW 12
13043: ARRAY
13044: ST_TO_ADDR
// if Crawls ( un ) then
13045: LD_VAR 0 2
13049: PPUSH
13050: CALL_OW 318
13054: IFFALSE 13065
// ComWalk ( un ) ;
13056: LD_VAR 0 2
13060: PPUSH
13061: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13065: LD_VAR 0 2
13069: PPUSH
13070: LD_INT 5
13072: PPUSH
13073: CALL_OW 336
// end ;
13077: PPOPN 3
13079: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13080: LD_EXP 25
13084: PUSH
13085: LD_EXP 43
13089: AND
13090: PUSH
13091: LD_OWVAR 67
13095: PUSH
13096: LD_INT 4
13098: LESS
13099: AND
13100: IFFALSE 13119
13102: GO 13104
13104: DISABLE
// begin Difficulty := Difficulty + 1 ;
13105: LD_ADDR_OWVAR 67
13109: PUSH
13110: LD_OWVAR 67
13114: PUSH
13115: LD_INT 1
13117: PLUS
13118: ST_TO_ADDR
// end ;
13119: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13120: LD_EXP 25
13124: PUSH
13125: LD_EXP 44
13129: AND
13130: IFFALSE 13233
13132: GO 13134
13134: DISABLE
13135: LD_INT 0
13137: PPUSH
// begin for i := 1 to 5 do
13138: LD_ADDR_VAR 0 1
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_INT 5
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13231
// begin uc_nation := nation_nature ;
13154: LD_ADDR_OWVAR 21
13158: PUSH
13159: LD_INT 0
13161: ST_TO_ADDR
// uc_side := 0 ;
13162: LD_ADDR_OWVAR 20
13166: PUSH
13167: LD_INT 0
13169: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13170: LD_ADDR_OWVAR 29
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: ST_TO_ADDR
// hc_agressivity := 20 ;
13185: LD_ADDR_OWVAR 35
13189: PUSH
13190: LD_INT 20
13192: ST_TO_ADDR
// hc_class := class_tiger ;
13193: LD_ADDR_OWVAR 28
13197: PUSH
13198: LD_INT 14
13200: ST_TO_ADDR
// hc_gallery :=  ;
13201: LD_ADDR_OWVAR 33
13205: PUSH
13206: LD_STRING 
13208: ST_TO_ADDR
// hc_name :=  ;
13209: LD_ADDR_OWVAR 26
13213: PUSH
13214: LD_STRING 
13216: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13217: CALL_OW 44
13221: PPUSH
13222: LD_INT 0
13224: PPUSH
13225: CALL_OW 51
// end ;
13229: GO 13151
13231: POP
13232: POP
// end ;
13233: PPOPN 1
13235: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13236: LD_EXP 25
13240: PUSH
13241: LD_EXP 45
13245: AND
13246: IFFALSE 13255
13248: GO 13250
13250: DISABLE
// StreamSibBomb ;
13251: CALL 13256 0 0
13255: END
// export function StreamSibBomb ; var i , x , y ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
// result := false ;
13262: LD_ADDR_VAR 0 1
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// for i := 1 to 16 do
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: DOUBLE
13276: LD_INT 1
13278: DEC
13279: ST_TO_ADDR
13280: LD_INT 16
13282: PUSH
13283: FOR_TO
13284: IFFALSE 13483
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13286: LD_ADDR_VAR 0 3
13290: PUSH
13291: LD_INT 10
13293: PUSH
13294: LD_INT 20
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 40
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 60
13308: PUSH
13309: LD_INT 70
13311: PUSH
13312: LD_INT 80
13314: PUSH
13315: LD_INT 90
13317: PUSH
13318: LD_INT 100
13320: PUSH
13321: LD_INT 110
13323: PUSH
13324: LD_INT 120
13326: PUSH
13327: LD_INT 130
13329: PUSH
13330: LD_INT 140
13332: PUSH
13333: LD_INT 150
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 1
13355: PPUSH
13356: LD_INT 15
13358: PPUSH
13359: CALL_OW 12
13363: ARRAY
13364: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13365: LD_ADDR_VAR 0 4
13369: PUSH
13370: LD_INT 10
13372: PUSH
13373: LD_INT 20
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 40
13381: PUSH
13382: LD_INT 50
13384: PUSH
13385: LD_INT 60
13387: PUSH
13388: LD_INT 70
13390: PUSH
13391: LD_INT 80
13393: PUSH
13394: LD_INT 90
13396: PUSH
13397: LD_INT 100
13399: PUSH
13400: LD_INT 110
13402: PUSH
13403: LD_INT 120
13405: PUSH
13406: LD_INT 130
13408: PUSH
13409: LD_INT 140
13411: PUSH
13412: LD_INT 150
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 1
13434: PPUSH
13435: LD_INT 15
13437: PPUSH
13438: CALL_OW 12
13442: ARRAY
13443: ST_TO_ADDR
// if ValidHex ( x , y ) then
13444: LD_VAR 0 3
13448: PPUSH
13449: LD_VAR 0 4
13453: PPUSH
13454: CALL_OW 488
13458: IFFALSE 13481
// begin result := [ x , y ] ;
13460: LD_ADDR_VAR 0 1
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: LD_VAR 0 4
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// break ;
13479: GO 13483
// end ; end ;
13481: GO 13283
13483: POP
13484: POP
// if result then
13485: LD_VAR 0 1
13489: IFFALSE 13549
// begin ToLua ( playSibBomb() ) ;
13491: LD_STRING playSibBomb()
13493: PPUSH
13494: CALL_OW 559
// wait ( 0 0$14 ) ;
13498: LD_INT 490
13500: PPUSH
13501: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_VAR 0 1
13518: PUSH
13519: LD_INT 2
13521: ARRAY
13522: PPUSH
13523: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13527: LD_VAR 0 1
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 1
13540: PUSH
13541: LD_INT 2
13543: ARRAY
13544: PPUSH
13545: CALL_OW 429
// end ; end ;
13549: LD_VAR 0 1
13553: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13554: LD_EXP 25
13558: PUSH
13559: LD_EXP 47
13563: AND
13564: IFFALSE 13576
13566: GO 13568
13568: DISABLE
// YouLost (  ) ;
13569: LD_STRING 
13571: PPUSH
13572: CALL_OW 104
13576: END
// every 0 0$1 trigger StreamModeActive and sFog do
13577: LD_EXP 25
13581: PUSH
13582: LD_EXP 46
13586: AND
13587: IFFALSE 13601
13589: GO 13591
13591: DISABLE
// FogOff ( your_side ) ;
13592: LD_OWVAR 2
13596: PPUSH
13597: CALL_OW 344
13601: END
// every 0 0$1 trigger StreamModeActive and sSun do
13602: LD_EXP 25
13606: PUSH
13607: LD_EXP 48
13611: AND
13612: IFFALSE 13640
13614: GO 13616
13616: DISABLE
// begin solar_recharge_percent := 0 ;
13617: LD_ADDR_OWVAR 79
13621: PUSH
13622: LD_INT 0
13624: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13625: LD_INT 10500
13627: PPUSH
13628: CALL_OW 67
// solar_recharge_percent := 100 ;
13632: LD_ADDR_OWVAR 79
13636: PUSH
13637: LD_INT 100
13639: ST_TO_ADDR
// end ;
13640: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13641: LD_EXP 25
13645: PUSH
13646: LD_EXP 49
13650: AND
13651: IFFALSE 13890
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
13660: PPUSH
// begin tmp := [ ] ;
13661: LD_ADDR_VAR 0 3
13665: PUSH
13666: EMPTY
13667: ST_TO_ADDR
// for i := 1 to 6 do
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: DOUBLE
13674: LD_INT 1
13676: DEC
13677: ST_TO_ADDR
13678: LD_INT 6
13680: PUSH
13681: FOR_TO
13682: IFFALSE 13787
// begin uc_nation := nation_nature ;
13684: LD_ADDR_OWVAR 21
13688: PUSH
13689: LD_INT 0
13691: ST_TO_ADDR
// uc_side := 0 ;
13692: LD_ADDR_OWVAR 20
13696: PUSH
13697: LD_INT 0
13699: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13700: LD_ADDR_OWVAR 29
13704: PUSH
13705: LD_INT 12
13707: PUSH
13708: LD_INT 12
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: ST_TO_ADDR
// hc_agressivity := 20 ;
13715: LD_ADDR_OWVAR 35
13719: PUSH
13720: LD_INT 20
13722: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13723: LD_ADDR_OWVAR 28
13727: PUSH
13728: LD_INT 17
13730: ST_TO_ADDR
// hc_gallery :=  ;
13731: LD_ADDR_OWVAR 33
13735: PUSH
13736: LD_STRING 
13738: ST_TO_ADDR
// hc_name :=  ;
13739: LD_ADDR_OWVAR 26
13743: PUSH
13744: LD_STRING 
13746: ST_TO_ADDR
// un := CreateHuman ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: CALL_OW 44
13756: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13757: LD_VAR 0 2
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 51
// tmp := tmp ^ un ;
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_VAR 0 3
13778: PUSH
13779: LD_VAR 0 2
13783: ADD
13784: ST_TO_ADDR
// end ;
13785: GO 13681
13787: POP
13788: POP
// repeat wait ( 0 0$1 ) ;
13789: LD_INT 35
13791: PPUSH
13792: CALL_OW 67
// for un in tmp do
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_VAR 0 3
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13881
// begin if IsDead ( un ) then
13809: LD_VAR 0 2
13813: PPUSH
13814: CALL_OW 301
13818: IFFALSE 13838
// begin tmp := tmp diff un ;
13820: LD_ADDR_VAR 0 3
13824: PUSH
13825: LD_VAR 0 3
13829: PUSH
13830: LD_VAR 0 2
13834: DIFF
13835: ST_TO_ADDR
// continue ;
13836: GO 13806
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_INT 3
13845: PUSH
13846: LD_INT 22
13848: PUSH
13849: LD_INT 0
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PPUSH
13860: CALL_OW 69
13864: PPUSH
13865: LD_VAR 0 2
13869: PPUSH
13870: CALL_OW 74
13874: PPUSH
13875: CALL_OW 115
// end ;
13879: GO 13806
13881: POP
13882: POP
// until not tmp ;
13883: LD_VAR 0 3
13887: NOT
13888: IFFALSE 13789
// end ;
13890: PPOPN 3
13892: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13893: LD_EXP 25
13897: PUSH
13898: LD_EXP 50
13902: AND
13903: IFFALSE 13957
13905: GO 13907
13907: DISABLE
// begin ToLua ( displayTroll(); ) ;
13908: LD_STRING displayTroll();
13910: PPUSH
13911: CALL_OW 559
// wait ( 3 3$00 ) ;
13915: LD_INT 6300
13917: PPUSH
13918: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13922: LD_STRING hideTroll();
13924: PPUSH
13925: CALL_OW 559
// wait ( 1 1$00 ) ;
13929: LD_INT 2100
13931: PPUSH
13932: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13936: LD_STRING displayTroll();
13938: PPUSH
13939: CALL_OW 559
// wait ( 1 1$00 ) ;
13943: LD_INT 2100
13945: PPUSH
13946: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13950: LD_STRING hideTroll();
13952: PPUSH
13953: CALL_OW 559
// end ;
13957: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13958: LD_EXP 25
13962: PUSH
13963: LD_EXP 51
13967: AND
13968: IFFALSE 14031
13970: GO 13972
13972: DISABLE
13973: LD_INT 0
13975: PPUSH
// begin p := 0 ;
13976: LD_ADDR_VAR 0 1
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// repeat game_speed := 1 ;
13984: LD_ADDR_OWVAR 65
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13992: LD_INT 35
13994: PPUSH
13995: CALL_OW 67
// p := p + 1 ;
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_VAR 0 1
14008: PUSH
14009: LD_INT 1
14011: PLUS
14012: ST_TO_ADDR
// until p >= 60 ;
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 60
14020: GREATEREQUAL
14021: IFFALSE 13984
// game_speed := 4 ;
14023: LD_ADDR_OWVAR 65
14027: PUSH
14028: LD_INT 4
14030: ST_TO_ADDR
// end ;
14031: PPOPN 1
14033: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14034: LD_EXP 25
14038: PUSH
14039: LD_EXP 52
14043: AND
14044: IFFALSE 14190
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14053: LD_ADDR_VAR 0 1
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_OWVAR 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: LD_INT 30
14075: PUSH
14076: LD_INT 0
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 30
14085: PUSH
14086: LD_INT 1
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not depot then
14107: LD_VAR 0 1
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14190
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_VAR 0 1
14125: PUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_VAR 0 1
14133: PPUSH
14134: CALL_OW 12
14138: ARRAY
14139: PPUSH
14140: CALL_OW 274
14144: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14145: LD_VAR 0 2
14149: PPUSH
14150: LD_INT 1
14152: PPUSH
14153: LD_INT 0
14155: PPUSH
14156: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14160: LD_VAR 0 2
14164: PPUSH
14165: LD_INT 2
14167: PPUSH
14168: LD_INT 0
14170: PPUSH
14171: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14175: LD_VAR 0 2
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: LD_INT 0
14185: PPUSH
14186: CALL_OW 277
// end ;
14190: PPOPN 2
14192: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14193: LD_EXP 25
14197: PUSH
14198: LD_EXP 53
14202: AND
14203: IFFALSE 14300
14205: GO 14207
14207: DISABLE
14208: LD_INT 0
14210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14211: LD_ADDR_VAR 0 1
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_OWVAR 2
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 21
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 0
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: PPUSH
14260: CALL_OW 69
14264: ST_TO_ADDR
// if not tmp then
14265: LD_VAR 0 1
14269: NOT
14270: IFFALSE 14274
// exit ;
14272: GO 14300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14274: LD_VAR 0 1
14278: PUSH
14279: LD_INT 1
14281: PPUSH
14282: LD_VAR 0 1
14286: PPUSH
14287: CALL_OW 12
14291: ARRAY
14292: PPUSH
14293: LD_INT 200
14295: PPUSH
14296: CALL_OW 234
// end ;
14300: PPOPN 1
14302: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14303: LD_EXP 25
14307: PUSH
14308: LD_EXP 54
14312: AND
14313: IFFALSE 14392
14315: GO 14317
14317: DISABLE
14318: LD_INT 0
14320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_OWVAR 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// if not tmp then
14357: LD_VAR 0 1
14361: NOT
14362: IFFALSE 14366
// exit ;
14364: GO 14392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14366: LD_VAR 0 1
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: PPUSH
14385: LD_INT 60
14387: PPUSH
14388: CALL_OW 234
// end ;
14392: PPOPN 1
14394: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14395: LD_EXP 25
14399: PUSH
14400: LD_EXP 55
14404: AND
14405: IFFALSE 14504
14407: GO 14409
14409: DISABLE
14410: LD_INT 0
14412: PPUSH
14413: PPUSH
// begin enable ;
14414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14415: LD_ADDR_VAR 0 1
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_OWVAR 2
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 61
14434: PUSH
14435: EMPTY
14436: LIST
14437: PUSH
14438: LD_INT 33
14440: PUSH
14441: LD_INT 2
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PPUSH
14453: CALL_OW 69
14457: ST_TO_ADDR
// if not tmp then
14458: LD_VAR 0 1
14462: NOT
14463: IFFALSE 14467
// exit ;
14465: GO 14504
// for i in tmp do
14467: LD_ADDR_VAR 0 2
14471: PUSH
14472: LD_VAR 0 1
14476: PUSH
14477: FOR_IN
14478: IFFALSE 14502
// if IsControledBy ( i ) then
14480: LD_VAR 0 2
14484: PPUSH
14485: CALL_OW 312
14489: IFFALSE 14500
// ComUnlink ( i ) ;
14491: LD_VAR 0 2
14495: PPUSH
14496: CALL_OW 136
14500: GO 14477
14502: POP
14503: POP
// end ;
14504: PPOPN 2
14506: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14507: LD_EXP 25
14511: PUSH
14512: LD_EXP 56
14516: AND
14517: IFFALSE 14657
14519: GO 14521
14521: DISABLE
14522: LD_INT 0
14524: PPUSH
14525: PPUSH
// begin ToLua ( displayPowell(); ) ;
14526: LD_STRING displayPowell();
14528: PPUSH
14529: CALL_OW 559
// uc_side := 0 ;
14533: LD_ADDR_OWVAR 20
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// uc_nation := 2 ;
14541: LD_ADDR_OWVAR 21
14545: PUSH
14546: LD_INT 2
14548: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14549: LD_ADDR_OWVAR 37
14553: PUSH
14554: LD_INT 14
14556: ST_TO_ADDR
// vc_engine := engine_siberite ;
14557: LD_ADDR_OWVAR 39
14561: PUSH
14562: LD_INT 3
14564: ST_TO_ADDR
// vc_control := control_apeman ;
14565: LD_ADDR_OWVAR 38
14569: PUSH
14570: LD_INT 5
14572: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14573: LD_ADDR_OWVAR 40
14577: PUSH
14578: LD_INT 29
14580: ST_TO_ADDR
// un := CreateVehicle ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: CALL_OW 45
14590: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14603: LD_INT 35
14605: PPUSH
14606: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14610: LD_VAR 0 2
14614: PPUSH
14615: LD_INT 22
14617: PUSH
14618: LD_OWVAR 2
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PPUSH
14627: CALL_OW 69
14631: PPUSH
14632: LD_VAR 0 2
14636: PPUSH
14637: CALL_OW 74
14641: PPUSH
14642: CALL_OW 115
// until IsDead ( un ) ;
14646: LD_VAR 0 2
14650: PPUSH
14651: CALL_OW 301
14655: IFFALSE 14603
// end ;
14657: PPOPN 2
14659: END
// every 0 0$1 trigger StreamModeActive and sStu do
14660: LD_EXP 25
14664: PUSH
14665: LD_EXP 64
14669: AND
14670: IFFALSE 14686
14672: GO 14674
14674: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14675: LD_STRING displayStucuk();
14677: PPUSH
14678: CALL_OW 559
// ResetFog ;
14682: CALL_OW 335
// end ;
14686: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14687: LD_EXP 25
14691: PUSH
14692: LD_EXP 57
14696: AND
14697: IFFALSE 14838
14699: GO 14701
14701: DISABLE
14702: LD_INT 0
14704: PPUSH
14705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14706: LD_ADDR_VAR 0 2
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_OWVAR 2
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 21
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PPUSH
14737: CALL_OW 69
14741: ST_TO_ADDR
// if not tmp then
14742: LD_VAR 0 2
14746: NOT
14747: IFFALSE 14751
// exit ;
14749: GO 14838
// un := tmp [ rand ( 1 , tmp ) ] ;
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_VAR 0 2
14760: PUSH
14761: LD_INT 1
14763: PPUSH
14764: LD_VAR 0 2
14768: PPUSH
14769: CALL_OW 12
14773: ARRAY
14774: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14787: LD_VAR 0 1
14791: PPUSH
14792: LD_OWVAR 3
14796: PUSH
14797: LD_VAR 0 1
14801: DIFF
14802: PPUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 74
14812: PPUSH
14813: CALL_OW 115
// wait ( 0 0$20 ) ;
14817: LD_INT 700
14819: PPUSH
14820: CALL_OW 67
// SetSide ( un , your_side ) ;
14824: LD_VAR 0 1
14828: PPUSH
14829: LD_OWVAR 2
14833: PPUSH
14834: CALL_OW 235
// end ;
14838: PPOPN 2
14840: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14841: LD_EXP 25
14845: PUSH
14846: LD_EXP 58
14850: AND
14851: IFFALSE 14957
14853: GO 14855
14855: DISABLE
14856: LD_INT 0
14858: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14859: LD_ADDR_VAR 0 1
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_OWVAR 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 30
14881: PUSH
14882: LD_INT 0
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 30
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: ST_TO_ADDR
// if not depot then
14913: LD_VAR 0 1
14917: NOT
14918: IFFALSE 14922
// exit ;
14920: GO 14957
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14922: LD_VAR 0 1
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PPUSH
14931: CALL_OW 250
14935: PPUSH
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 1
14943: ARRAY
14944: PPUSH
14945: CALL_OW 251
14949: PPUSH
14950: LD_INT 70
14952: PPUSH
14953: CALL_OW 495
// end ;
14957: PPOPN 1
14959: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14960: LD_EXP 25
14964: PUSH
14965: LD_EXP 59
14969: AND
14970: IFFALSE 15181
14972: GO 14974
14974: DISABLE
14975: LD_INT 0
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14982: LD_ADDR_VAR 0 5
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 69
15017: ST_TO_ADDR
// if not tmp then
15018: LD_VAR 0 5
15022: NOT
15023: IFFALSE 15027
// exit ;
15025: GO 15181
// for i in tmp do
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_VAR 0 5
15036: PUSH
15037: FOR_IN
15038: IFFALSE 15179
// begin d := rand ( 0 , 5 ) ;
15040: LD_ADDR_VAR 0 4
15044: PUSH
15045: LD_INT 0
15047: PPUSH
15048: LD_INT 5
15050: PPUSH
15051: CALL_OW 12
15055: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15056: LD_ADDR_VAR 0 2
15060: PUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 250
15070: PPUSH
15071: LD_VAR 0 4
15075: PPUSH
15076: LD_INT 3
15078: PPUSH
15079: LD_INT 12
15081: PPUSH
15082: CALL_OW 12
15086: PPUSH
15087: CALL_OW 272
15091: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15092: LD_ADDR_VAR 0 3
15096: PUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 251
15106: PPUSH
15107: LD_VAR 0 4
15111: PPUSH
15112: LD_INT 3
15114: PPUSH
15115: LD_INT 12
15117: PPUSH
15118: CALL_OW 12
15122: PPUSH
15123: CALL_OW 273
15127: ST_TO_ADDR
// if ValidHex ( x , y ) then
15128: LD_VAR 0 2
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: CALL_OW 488
15142: IFFALSE 15177
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15144: LD_VAR 0 1
15148: PPUSH
15149: LD_VAR 0 2
15153: PPUSH
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 3
15161: PPUSH
15162: LD_INT 6
15164: PPUSH
15165: CALL_OW 12
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 483
// end ;
15177: GO 15037
15179: POP
15180: POP
// end ;
15181: PPOPN 5
15183: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15184: LD_EXP 25
15188: PUSH
15189: LD_EXP 60
15193: AND
15194: IFFALSE 15288
15196: GO 15198
15198: DISABLE
15199: LD_INT 0
15201: PPUSH
15202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15203: LD_ADDR_VAR 0 2
15207: PUSH
15208: LD_INT 22
15210: PUSH
15211: LD_OWVAR 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 32
15222: PUSH
15223: LD_INT 1
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 21
15232: PUSH
15233: LD_INT 2
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 69
15249: ST_TO_ADDR
// if not tmp then
15250: LD_VAR 0 2
15254: NOT
15255: IFFALSE 15259
// exit ;
15257: GO 15288
// for i in tmp do
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_VAR 0 2
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15286
// SetFuel ( i , 0 ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 240
15284: GO 15269
15286: POP
15287: POP
// end ;
15288: PPOPN 2
15290: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15291: LD_EXP 25
15295: PUSH
15296: LD_EXP 61
15300: AND
15301: IFFALSE 15367
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 29
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 69
15344: ST_TO_ADDR
// if not tmp then
15345: LD_VAR 0 1
15349: NOT
15350: IFFALSE 15354
// exit ;
15352: GO 15367
// DestroyUnit ( tmp [ 1 ] ) ;
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 1
15361: ARRAY
15362: PPUSH
15363: CALL_OW 65
// end ;
15367: PPOPN 1
15369: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15370: LD_EXP 25
15374: PUSH
15375: LD_EXP 63
15379: AND
15380: IFFALSE 15509
15382: GO 15384
15384: DISABLE
15385: LD_INT 0
15387: PPUSH
// begin uc_side := 0 ;
15388: LD_ADDR_OWVAR 20
15392: PUSH
15393: LD_INT 0
15395: ST_TO_ADDR
// uc_nation := nation_arabian ;
15396: LD_ADDR_OWVAR 21
15400: PUSH
15401: LD_INT 2
15403: ST_TO_ADDR
// hc_gallery :=  ;
15404: LD_ADDR_OWVAR 33
15408: PUSH
15409: LD_STRING 
15411: ST_TO_ADDR
// hc_name :=  ;
15412: LD_ADDR_OWVAR 26
15416: PUSH
15417: LD_STRING 
15419: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 11
15425: PPUSH
15426: LD_INT 10
15428: PPUSH
15429: CALL_OW 380
// un := CreateHuman ;
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15443: LD_VAR 0 1
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15455: LD_INT 35
15457: PPUSH
15458: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15462: LD_VAR 0 1
15466: PPUSH
15467: LD_INT 22
15469: PUSH
15470: LD_OWVAR 2
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PPUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 74
15493: PPUSH
15494: CALL_OW 115
// until IsDead ( un ) ;
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 301
15507: IFFALSE 15455
// end ;
15509: PPOPN 1
15511: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15512: LD_EXP 25
15516: PUSH
15517: LD_EXP 65
15521: AND
15522: IFFALSE 15534
15524: GO 15526
15526: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15527: LD_STRING earthquake(getX(game), 0, 32)
15529: PPUSH
15530: CALL_OW 559
15534: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15535: LD_EXP 25
15539: PUSH
15540: LD_EXP 66
15544: AND
15545: IFFALSE 15636
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
// begin enable ;
15553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15554: LD_ADDR_VAR 0 1
15558: PUSH
15559: LD_INT 22
15561: PUSH
15562: LD_OWVAR 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 21
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 33
15583: PUSH
15584: LD_INT 3
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 69
15600: ST_TO_ADDR
// if not tmp then
15601: LD_VAR 0 1
15605: NOT
15606: IFFALSE 15610
// exit ;
15608: GO 15636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15610: LD_VAR 0 1
15614: PUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 12
15627: ARRAY
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 234
// end ;
15636: PPOPN 1
15638: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15639: LD_EXP 25
15643: PUSH
15644: LD_EXP 67
15648: AND
15649: IFFALSE 15790
15651: GO 15653
15653: DISABLE
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
15658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15659: LD_ADDR_VAR 0 3
15663: PUSH
15664: LD_INT 22
15666: PUSH
15667: LD_OWVAR 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 25
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: ST_TO_ADDR
// if not tmp then
15695: LD_VAR 0 3
15699: NOT
15700: IFFALSE 15704
// exit ;
15702: GO 15790
// un := tmp [ rand ( 1 , tmp ) ] ;
15704: LD_ADDR_VAR 0 2
15708: PUSH
15709: LD_VAR 0 3
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// if Crawls ( un ) then
15728: LD_VAR 0 2
15732: PPUSH
15733: CALL_OW 318
15737: IFFALSE 15748
// ComWalk ( un ) ;
15739: LD_VAR 0 2
15743: PPUSH
15744: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15748: LD_VAR 0 2
15752: PPUSH
15753: LD_INT 9
15755: PPUSH
15756: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15760: LD_INT 28
15762: PPUSH
15763: LD_OWVAR 2
15767: PPUSH
15768: LD_INT 2
15770: PPUSH
15771: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15775: LD_INT 29
15777: PPUSH
15778: LD_OWVAR 2
15782: PPUSH
15783: LD_INT 2
15785: PPUSH
15786: CALL_OW 322
// end ;
15790: PPOPN 3
15792: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15793: LD_EXP 25
15797: PUSH
15798: LD_EXP 68
15802: AND
15803: IFFALSE 15914
15805: GO 15807
15807: DISABLE
15808: LD_INT 0
15810: PPUSH
15811: PPUSH
15812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_INT 22
15820: PUSH
15821: LD_OWVAR 2
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: ST_TO_ADDR
// if not tmp then
15849: LD_VAR 0 3
15853: NOT
15854: IFFALSE 15858
// exit ;
15856: GO 15914
// un := tmp [ rand ( 1 , tmp ) ] ;
15858: LD_ADDR_VAR 0 2
15862: PUSH
15863: LD_VAR 0 3
15867: PUSH
15868: LD_INT 1
15870: PPUSH
15871: LD_VAR 0 3
15875: PPUSH
15876: CALL_OW 12
15880: ARRAY
15881: ST_TO_ADDR
// if Crawls ( un ) then
15882: LD_VAR 0 2
15886: PPUSH
15887: CALL_OW 318
15891: IFFALSE 15902
// ComWalk ( un ) ;
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15902: LD_VAR 0 2
15906: PPUSH
15907: LD_INT 8
15909: PPUSH
15910: CALL_OW 336
// end ;
15914: PPOPN 3
15916: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15917: LD_EXP 25
15921: PUSH
15922: LD_EXP 69
15926: AND
15927: IFFALSE 16071
15929: GO 15931
15931: DISABLE
15932: LD_INT 0
15934: PPUSH
15935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_INT 22
15943: PUSH
15944: LD_OWVAR 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 21
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 2
15965: PUSH
15966: LD_INT 34
15968: PUSH
15969: LD_INT 12
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 34
15978: PUSH
15979: LD_INT 51
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 34
15988: PUSH
15989: LD_INT 32
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: PPUSH
16007: CALL_OW 69
16011: ST_TO_ADDR
// if not tmp then
16012: LD_VAR 0 2
16016: NOT
16017: IFFALSE 16021
// exit ;
16019: GO 16071
// for i in tmp do
16021: LD_ADDR_VAR 0 1
16025: PUSH
16026: LD_VAR 0 2
16030: PUSH
16031: FOR_IN
16032: IFFALSE 16069
// if GetCargo ( i , mat_artifact ) = 0 then
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 4
16041: PPUSH
16042: CALL_OW 289
16046: PUSH
16047: LD_INT 0
16049: EQUAL
16050: IFFALSE 16067
// SetCargo ( i , mat_siberit , 100 ) ;
16052: LD_VAR 0 1
16056: PPUSH
16057: LD_INT 3
16059: PPUSH
16060: LD_INT 100
16062: PPUSH
16063: CALL_OW 290
16067: GO 16031
16069: POP
16070: POP
// end ;
16071: PPOPN 2
16073: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16074: LD_EXP 25
16078: PUSH
16079: LD_EXP 70
16083: AND
16084: IFFALSE 16267
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16093: LD_ADDR_VAR 0 2
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_OWVAR 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 2
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16267
// for i := 1 to 2 do
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: DOUBLE
16130: LD_INT 1
16132: DEC
16133: ST_TO_ADDR
16134: LD_INT 2
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16265
// begin uc_side := your_side ;
16140: LD_ADDR_OWVAR 20
16144: PUSH
16145: LD_OWVAR 2
16149: ST_TO_ADDR
// uc_nation := nation_american ;
16150: LD_ADDR_OWVAR 21
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// vc_chassis := us_morphling ;
16158: LD_ADDR_OWVAR 37
16162: PUSH
16163: LD_INT 5
16165: ST_TO_ADDR
// vc_engine := engine_siberite ;
16166: LD_ADDR_OWVAR 39
16170: PUSH
16171: LD_INT 3
16173: ST_TO_ADDR
// vc_control := control_computer ;
16174: LD_ADDR_OWVAR 38
16178: PUSH
16179: LD_INT 3
16181: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16182: LD_ADDR_OWVAR 40
16186: PUSH
16187: LD_INT 10
16189: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16190: LD_VAR 0 2
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: CALL_OW 310
16203: NOT
16204: IFFALSE 16251
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16206: CALL_OW 45
16210: PPUSH
16211: LD_VAR 0 2
16215: PUSH
16216: LD_INT 1
16218: ARRAY
16219: PPUSH
16220: CALL_OW 250
16224: PPUSH
16225: LD_VAR 0 2
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: CALL_OW 251
16238: PPUSH
16239: LD_INT 12
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: CALL_OW 50
16249: GO 16263
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16251: CALL_OW 45
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: CALL_OW 51
// end ;
16263: GO 16137
16265: POP
16266: POP
// end ;
16267: PPOPN 2
16269: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16270: LD_EXP 25
16274: PUSH
16275: LD_EXP 71
16279: AND
16280: IFFALSE 16502
16282: GO 16284
16284: DISABLE
16285: LD_INT 0
16287: PPUSH
16288: PPUSH
16289: PPUSH
16290: PPUSH
16291: PPUSH
16292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16293: LD_ADDR_VAR 0 6
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_OWVAR 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 3
16322: PUSH
16323: LD_INT 23
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: PPUSH
16342: CALL_OW 69
16346: ST_TO_ADDR
// if not tmp then
16347: LD_VAR 0 6
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 16502
// s1 := rand ( 1 , 4 ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_INT 4
16366: PPUSH
16367: CALL_OW 12
16371: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16372: LD_ADDR_VAR 0 4
16376: PUSH
16377: LD_VAR 0 6
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PPUSH
16386: LD_VAR 0 2
16390: PPUSH
16391: CALL_OW 259
16395: ST_TO_ADDR
// if s1 = 1 then
16396: LD_VAR 0 2
16400: PUSH
16401: LD_INT 1
16403: EQUAL
16404: IFFALSE 16424
// s2 := rand ( 2 , 4 ) else
16406: LD_ADDR_VAR 0 3
16410: PUSH
16411: LD_INT 2
16413: PPUSH
16414: LD_INT 4
16416: PPUSH
16417: CALL_OW 12
16421: ST_TO_ADDR
16422: GO 16432
// s2 := 1 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16432: LD_ADDR_VAR 0 5
16436: PUSH
16437: LD_VAR 0 6
16441: PUSH
16442: LD_INT 1
16444: ARRAY
16445: PPUSH
16446: LD_VAR 0 3
16450: PPUSH
16451: CALL_OW 259
16455: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16456: LD_VAR 0 6
16460: PUSH
16461: LD_INT 1
16463: ARRAY
16464: PPUSH
16465: LD_VAR 0 2
16469: PPUSH
16470: LD_VAR 0 5
16474: PPUSH
16475: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16479: LD_VAR 0 6
16483: PUSH
16484: LD_INT 1
16486: ARRAY
16487: PPUSH
16488: LD_VAR 0 3
16492: PPUSH
16493: LD_VAR 0 4
16497: PPUSH
16498: CALL_OW 237
// end ;
16502: PPOPN 6
16504: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16505: LD_EXP 25
16509: PUSH
16510: LD_EXP 72
16514: AND
16515: IFFALSE 16594
16517: GO 16519
16519: DISABLE
16520: LD_INT 0
16522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_OWVAR 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 30
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: ST_TO_ADDR
// if not tmp then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16568: LD_VAR 0 1
16572: PUSH
16573: LD_INT 1
16575: PPUSH
16576: LD_VAR 0 1
16580: PPUSH
16581: CALL_OW 12
16585: ARRAY
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 234
// end ;
16594: PPOPN 1
16596: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16597: LD_EXP 25
16601: PUSH
16602: LD_EXP 73
16606: AND
16607: IFFALSE 16719
16609: GO 16611
16611: DISABLE
16612: LD_INT 0
16614: PPUSH
16615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16616: LD_ADDR_VAR 0 2
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_OWVAR 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 2
16635: PUSH
16636: LD_INT 30
16638: PUSH
16639: LD_INT 27
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 26
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 30
16658: PUSH
16659: LD_INT 28
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: ST_TO_ADDR
// if not tmp then
16681: LD_VAR 0 2
16685: NOT
16686: IFFALSE 16690
// exit ;
16688: GO 16719
// for i in tmp do
16690: LD_ADDR_VAR 0 1
16694: PUSH
16695: LD_VAR 0 2
16699: PUSH
16700: FOR_IN
16701: IFFALSE 16717
// SetLives ( i , 1 ) ;
16703: LD_VAR 0 1
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 234
16715: GO 16700
16717: POP
16718: POP
// end ;
16719: PPOPN 2
16721: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16722: LD_EXP 25
16726: PUSH
16727: LD_EXP 74
16731: AND
16732: IFFALSE 17019
16734: GO 16736
16736: DISABLE
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
16741: PPUSH
// begin i := rand ( 1 , 7 ) ;
16742: LD_ADDR_VAR 0 1
16746: PUSH
16747: LD_INT 1
16749: PPUSH
16750: LD_INT 7
16752: PPUSH
16753: CALL_OW 12
16757: ST_TO_ADDR
// case i of 1 :
16758: LD_VAR 0 1
16762: PUSH
16763: LD_INT 1
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16781
16771: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16772: LD_STRING earthquake(getX(game), 0, 32)
16774: PPUSH
16775: CALL_OW 559
16779: GO 17019
16781: LD_INT 2
16783: DOUBLE
16784: EQUAL
16785: IFTRUE 16789
16787: GO 16803
16789: POP
// begin ToLua ( displayStucuk(); ) ;
16790: LD_STRING displayStucuk();
16792: PPUSH
16793: CALL_OW 559
// ResetFog ;
16797: CALL_OW 335
// end ; 3 :
16801: GO 17019
16803: LD_INT 3
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 16915
16811: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16812: LD_ADDR_VAR 0 2
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_OWVAR 2
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 25
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PPUSH
16843: CALL_OW 69
16847: ST_TO_ADDR
// if not tmp then
16848: LD_VAR 0 2
16852: NOT
16853: IFFALSE 16857
// exit ;
16855: GO 17019
// un := tmp [ rand ( 1 , tmp ) ] ;
16857: LD_ADDR_VAR 0 3
16861: PUSH
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 1
16869: PPUSH
16870: LD_VAR 0 2
16874: PPUSH
16875: CALL_OW 12
16879: ARRAY
16880: ST_TO_ADDR
// if Crawls ( un ) then
16881: LD_VAR 0 3
16885: PPUSH
16886: CALL_OW 318
16890: IFFALSE 16901
// ComWalk ( un ) ;
16892: LD_VAR 0 3
16896: PPUSH
16897: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_INT 8
16908: PPUSH
16909: CALL_OW 336
// end ; 4 :
16913: GO 17019
16915: LD_INT 4
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16997
16923: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16924: LD_ADDR_VAR 0 2
16928: PUSH
16929: LD_INT 22
16931: PUSH
16932: LD_OWVAR 2
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 29
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PPUSH
16955: CALL_OW 69
16959: ST_TO_ADDR
// if not tmp then
16960: LD_VAR 0 2
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 17019
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16969: LD_VAR 0 2
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PPUSH
16978: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16982: LD_VAR 0 2
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: CALL_OW 65
// end ; 5 .. 7 :
16995: GO 17019
16997: LD_INT 5
16999: DOUBLE
17000: GREATEREQUAL
17001: IFFALSE 17009
17003: LD_INT 7
17005: DOUBLE
17006: LESSEQUAL
17007: IFTRUE 17011
17009: GO 17018
17011: POP
// StreamSibBomb ; end ;
17012: CALL 13256 0 0
17016: GO 17019
17018: POP
// end ;
17019: PPOPN 3
17021: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17022: LD_EXP 25
17026: PUSH
17027: LD_EXP 75
17031: AND
17032: IFFALSE 17188
17034: GO 17036
17036: DISABLE
17037: LD_INT 0
17039: PPUSH
17040: PPUSH
17041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17042: LD_ADDR_VAR 0 2
17046: PUSH
17047: LD_INT 81
17049: PUSH
17050: LD_OWVAR 2
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 21
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: ST_TO_ADDR
// if not tmp then
17096: LD_VAR 0 2
17100: NOT
17101: IFFALSE 17105
// exit ;
17103: GO 17188
// p := 0 ;
17105: LD_ADDR_VAR 0 3
17109: PUSH
17110: LD_INT 0
17112: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17113: LD_INT 35
17115: PPUSH
17116: CALL_OW 67
// p := p + 1 ;
17120: LD_ADDR_VAR 0 3
17124: PUSH
17125: LD_VAR 0 3
17129: PUSH
17130: LD_INT 1
17132: PLUS
17133: ST_TO_ADDR
// for i in tmp do
17134: LD_ADDR_VAR 0 1
17138: PUSH
17139: LD_VAR 0 2
17143: PUSH
17144: FOR_IN
17145: IFFALSE 17176
// if GetLives ( i ) < 1000 then
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 256
17156: PUSH
17157: LD_INT 1000
17159: LESS
17160: IFFALSE 17174
// SetLives ( i , 1000 ) ;
17162: LD_VAR 0 1
17166: PPUSH
17167: LD_INT 1000
17169: PPUSH
17170: CALL_OW 234
17174: GO 17144
17176: POP
17177: POP
// until p > 20 ;
17178: LD_VAR 0 3
17182: PUSH
17183: LD_INT 20
17185: GREATER
17186: IFFALSE 17113
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger StreamModeActive and sTime do
17191: LD_EXP 25
17195: PUSH
17196: LD_EXP 76
17200: AND
17201: IFFALSE 17236
17203: GO 17205
17205: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17206: LD_INT 28
17208: PPUSH
17209: LD_OWVAR 2
17213: PPUSH
17214: LD_INT 2
17216: PPUSH
17217: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17221: LD_INT 30
17223: PPUSH
17224: LD_OWVAR 2
17228: PPUSH
17229: LD_INT 2
17231: PPUSH
17232: CALL_OW 322
// end ;
17236: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17237: LD_EXP 25
17241: PUSH
17242: LD_EXP 77
17246: AND
17247: IFFALSE 17368
17249: GO 17251
17251: DISABLE
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17256: LD_ADDR_VAR 0 2
17260: PUSH
17261: LD_INT 22
17263: PUSH
17264: LD_OWVAR 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 21
17275: PUSH
17276: LD_INT 1
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: LD_INT 23
17288: PUSH
17289: LD_INT 0
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: ST_TO_ADDR
// if not tmp then
17310: LD_VAR 0 2
17314: NOT
17315: IFFALSE 17319
// exit ;
17317: GO 17368
// for i in tmp do
17319: LD_ADDR_VAR 0 1
17323: PUSH
17324: LD_VAR 0 2
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17366
// begin if Crawls ( i ) then
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 318
17341: IFFALSE 17352
// ComWalk ( i ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 138
// SetClass ( i , 2 ) ;
17352: LD_VAR 0 1
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: CALL_OW 336
// end ;
17364: GO 17329
17366: POP
17367: POP
// end ;
17368: PPOPN 2
17370: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17371: LD_EXP 25
17375: PUSH
17376: LD_EXP 78
17380: AND
17381: IFFALSE 17669
17383: GO 17385
17385: DISABLE
17386: LD_INT 0
17388: PPUSH
17389: PPUSH
17390: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17391: LD_OWVAR 2
17395: PPUSH
17396: LD_INT 9
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_INT 1
17404: PPUSH
17405: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17409: LD_INT 9
17411: PPUSH
17412: LD_OWVAR 2
17416: PPUSH
17417: CALL_OW 343
// uc_side := 9 ;
17421: LD_ADDR_OWVAR 20
17425: PUSH
17426: LD_INT 9
17428: ST_TO_ADDR
// uc_nation := 2 ;
17429: LD_ADDR_OWVAR 21
17433: PUSH
17434: LD_INT 2
17436: ST_TO_ADDR
// hc_name := Dark Warrior ;
17437: LD_ADDR_OWVAR 26
17441: PUSH
17442: LD_STRING Dark Warrior
17444: ST_TO_ADDR
// hc_gallery :=  ;
17445: LD_ADDR_OWVAR 33
17449: PUSH
17450: LD_STRING 
17452: ST_TO_ADDR
// hc_noskilllimit := true ;
17453: LD_ADDR_OWVAR 76
17457: PUSH
17458: LD_INT 1
17460: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17461: LD_ADDR_OWVAR 31
17465: PUSH
17466: LD_INT 30
17468: PUSH
17469: LD_INT 30
17471: PUSH
17472: LD_INT 30
17474: PUSH
17475: LD_INT 30
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: ST_TO_ADDR
// un := CreateHuman ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: CALL_OW 44
17493: ST_TO_ADDR
// hc_noskilllimit := false ;
17494: LD_ADDR_OWVAR 76
17498: PUSH
17499: LD_INT 0
17501: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1
17509: PPUSH
17510: CALL_OW 51
// ToLua ( playRanger() ) ;
17514: LD_STRING playRanger()
17516: PPUSH
17517: CALL_OW 559
// p := 0 ;
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_INT 0
17528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17529: LD_INT 35
17531: PPUSH
17532: CALL_OW 67
// p := p + 1 ;
17536: LD_ADDR_VAR 0 2
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: LD_INT 1
17548: PLUS
17549: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17550: LD_VAR 0 3
17554: PPUSH
17555: CALL_OW 256
17559: PUSH
17560: LD_INT 1000
17562: LESS
17563: IFFALSE 17577
// SetLives ( un , 1000 ) ;
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1000
17572: PPUSH
17573: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_INT 81
17584: PUSH
17585: LD_OWVAR 2
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 91
17596: PUSH
17597: LD_VAR 0 3
17601: PUSH
17602: LD_INT 30
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 69
17618: PPUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: CALL_OW 74
17628: PPUSH
17629: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17633: LD_VAR 0 2
17637: PUSH
17638: LD_INT 80
17640: GREATER
17641: PUSH
17642: LD_VAR 0 3
17646: PPUSH
17647: CALL_OW 301
17651: OR
17652: IFFALSE 17529
// if un then
17654: LD_VAR 0 3
17658: IFFALSE 17669
// RemoveUnit ( un ) ;
17660: LD_VAR 0 3
17664: PPUSH
17665: CALL_OW 64
// end ;
17669: PPOPN 3
17671: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17672: LD_EXP 79
17676: IFFALSE 17792
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17686: LD_ADDR_VAR 0 2
17690: PUSH
17691: LD_INT 81
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 69
17721: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17722: LD_STRING playComputer()
17724: PPUSH
17725: CALL_OW 559
// if not tmp then
17729: LD_VAR 0 2
17733: NOT
17734: IFFALSE 17738
// exit ;
17736: GO 17792
// for i in tmp do
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: FOR_IN
17749: IFFALSE 17790
// for j := 1 to 4 do
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 4
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17786
// SetSkill ( i , j , 10 ) ;
17767: LD_VAR 0 1
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 10
17779: PPUSH
17780: CALL_OW 237
17784: GO 17764
17786: POP
17787: POP
17788: GO 17748
17790: POP
17791: POP
// end ;
17792: PPOPN 3
17794: END
// every 0 0$1 trigger s30 do var i , tmp ;
17795: LD_EXP 80
17799: IFFALSE 17868
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: ST_TO_ADDR
// if not tmp then
17830: LD_VAR 0 2
17834: NOT
17835: IFFALSE 17839
// exit ;
17837: GO 17868
// for i in tmp do
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: FOR_IN
17850: IFFALSE 17866
// SetLives ( i , 300 ) ;
17852: LD_VAR 0 1
17856: PPUSH
17857: LD_INT 300
17859: PPUSH
17860: CALL_OW 234
17864: GO 17849
17866: POP
17867: POP
// end ;
17868: PPOPN 2
17870: END
// every 0 0$1 trigger s60 do var i , tmp ;
17871: LD_EXP 81
17875: IFFALSE 17944
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17884: LD_ADDR_VAR 0 2
17888: PUSH
17889: LD_INT 22
17891: PUSH
17892: LD_OWVAR 2
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ST_TO_ADDR
// if not tmp then
17906: LD_VAR 0 2
17910: NOT
17911: IFFALSE 17915
// exit ;
17913: GO 17944
// for i in tmp do
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: FOR_IN
17926: IFFALSE 17942
// SetLives ( i , 600 ) ;
17928: LD_VAR 0 1
17932: PPUSH
17933: LD_INT 600
17935: PPUSH
17936: CALL_OW 234
17940: GO 17925
17942: POP
17943: POP
// end ;
17944: PPOPN 2
17946: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17947: LD_INT 0
17949: PPUSH
// case cmd of 301 :
17950: LD_VAR 0 1
17954: PUSH
17955: LD_INT 301
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17995
17963: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17964: LD_VAR 0 6
17968: PPUSH
17969: LD_VAR 0 7
17973: PPUSH
17974: LD_VAR 0 8
17978: PPUSH
17979: LD_VAR 0 4
17983: PPUSH
17984: LD_VAR 0 5
17988: PPUSH
17989: CALL 19204 0 5
17993: GO 18116
17995: LD_INT 302
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18040
18003: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18004: LD_VAR 0 6
18008: PPUSH
18009: LD_VAR 0 7
18013: PPUSH
18014: LD_VAR 0 8
18018: PPUSH
18019: LD_VAR 0 9
18023: PPUSH
18024: LD_VAR 0 4
18028: PPUSH
18029: LD_VAR 0 5
18033: PPUSH
18034: CALL 19295 0 6
18038: GO 18116
18040: LD_INT 303
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18085
18048: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18049: LD_VAR 0 6
18053: PPUSH
18054: LD_VAR 0 7
18058: PPUSH
18059: LD_VAR 0 8
18063: PPUSH
18064: LD_VAR 0 9
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_VAR 0 5
18078: PPUSH
18079: CALL 18121 0 6
18083: GO 18116
18085: LD_INT 304
18087: DOUBLE
18088: EQUAL
18089: IFTRUE 18093
18091: GO 18115
18093: POP
// hHackTeleport ( unit , x , y ) ; end ;
18094: LD_VAR 0 2
18098: PPUSH
18099: LD_VAR 0 4
18103: PPUSH
18104: LD_VAR 0 5
18108: PPUSH
18109: CALL 19888 0 3
18113: GO 18116
18115: POP
// end ;
18116: LD_VAR 0 12
18120: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18121: LD_INT 0
18123: PPUSH
18124: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18125: LD_VAR 0 1
18129: PUSH
18130: LD_INT 1
18132: LESS
18133: PUSH
18134: LD_VAR 0 1
18138: PUSH
18139: LD_INT 3
18141: GREATER
18142: OR
18143: PUSH
18144: LD_VAR 0 5
18148: PPUSH
18149: LD_VAR 0 6
18153: PPUSH
18154: CALL_OW 428
18158: OR
18159: IFFALSE 18163
// exit ;
18161: GO 18891
// uc_side := your_side ;
18163: LD_ADDR_OWVAR 20
18167: PUSH
18168: LD_OWVAR 2
18172: ST_TO_ADDR
// uc_nation := nation ;
18173: LD_ADDR_OWVAR 21
18177: PUSH
18178: LD_VAR 0 1
18182: ST_TO_ADDR
// bc_level = 1 ;
18183: LD_ADDR_OWVAR 43
18187: PUSH
18188: LD_INT 1
18190: ST_TO_ADDR
// case btype of 1 :
18191: LD_VAR 0 2
18195: PUSH
18196: LD_INT 1
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18215
18204: POP
// bc_type := b_depot ; 2 :
18205: LD_ADDR_OWVAR 42
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
18213: GO 18835
18215: LD_INT 2
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18234
18223: POP
// bc_type := b_warehouse ; 3 :
18224: LD_ADDR_OWVAR 42
18228: PUSH
18229: LD_INT 1
18231: ST_TO_ADDR
18232: GO 18835
18234: LD_INT 3
18236: DOUBLE
18237: EQUAL
18238: IFTRUE 18242
18240: GO 18253
18242: POP
// bc_type := b_lab ; 4 .. 9 :
18243: LD_ADDR_OWVAR 42
18247: PUSH
18248: LD_INT 6
18250: ST_TO_ADDR
18251: GO 18835
18253: LD_INT 4
18255: DOUBLE
18256: GREATEREQUAL
18257: IFFALSE 18265
18259: LD_INT 9
18261: DOUBLE
18262: LESSEQUAL
18263: IFTRUE 18267
18265: GO 18327
18267: POP
// begin bc_type := b_lab_half ;
18268: LD_ADDR_OWVAR 42
18272: PUSH
18273: LD_INT 7
18275: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18276: LD_ADDR_OWVAR 44
18280: PUSH
18281: LD_INT 10
18283: PUSH
18284: LD_INT 11
18286: PUSH
18287: LD_INT 12
18289: PUSH
18290: LD_INT 15
18292: PUSH
18293: LD_INT 14
18295: PUSH
18296: LD_INT 13
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: LD_VAR 0 2
18311: PUSH
18312: LD_INT 3
18314: MINUS
18315: ARRAY
18316: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18317: LD_ADDR_OWVAR 45
18321: PUSH
18322: LD_INT 9
18324: ST_TO_ADDR
// end ; 10 .. 13 :
18325: GO 18835
18327: LD_INT 10
18329: DOUBLE
18330: GREATEREQUAL
18331: IFFALSE 18339
18333: LD_INT 13
18335: DOUBLE
18336: LESSEQUAL
18337: IFTRUE 18341
18339: GO 18418
18341: POP
// begin bc_type := b_lab_full ;
18342: LD_ADDR_OWVAR 42
18346: PUSH
18347: LD_INT 8
18349: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18350: LD_ADDR_OWVAR 44
18354: PUSH
18355: LD_INT 10
18357: PUSH
18358: LD_INT 12
18360: PUSH
18361: LD_INT 14
18363: PUSH
18364: LD_INT 13
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: LD_VAR 0 2
18377: PUSH
18378: LD_INT 9
18380: MINUS
18381: ARRAY
18382: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18383: LD_ADDR_OWVAR 45
18387: PUSH
18388: LD_INT 11
18390: PUSH
18391: LD_INT 15
18393: PUSH
18394: LD_INT 12
18396: PUSH
18397: LD_INT 15
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: PUSH
18406: LD_VAR 0 2
18410: PUSH
18411: LD_INT 9
18413: MINUS
18414: ARRAY
18415: ST_TO_ADDR
// end ; 14 :
18416: GO 18835
18418: LD_INT 14
18420: DOUBLE
18421: EQUAL
18422: IFTRUE 18426
18424: GO 18437
18426: POP
// bc_type := b_workshop ; 15 :
18427: LD_ADDR_OWVAR 42
18431: PUSH
18432: LD_INT 2
18434: ST_TO_ADDR
18435: GO 18835
18437: LD_INT 15
18439: DOUBLE
18440: EQUAL
18441: IFTRUE 18445
18443: GO 18456
18445: POP
// bc_type := b_factory ; 16 :
18446: LD_ADDR_OWVAR 42
18450: PUSH
18451: LD_INT 3
18453: ST_TO_ADDR
18454: GO 18835
18456: LD_INT 16
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18475
18464: POP
// bc_type := b_ext_gun ; 17 :
18465: LD_ADDR_OWVAR 42
18469: PUSH
18470: LD_INT 17
18472: ST_TO_ADDR
18473: GO 18835
18475: LD_INT 17
18477: DOUBLE
18478: EQUAL
18479: IFTRUE 18483
18481: GO 18511
18483: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18484: LD_ADDR_OWVAR 42
18488: PUSH
18489: LD_INT 19
18491: PUSH
18492: LD_INT 23
18494: PUSH
18495: LD_INT 19
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PUSH
18503: LD_VAR 0 1
18507: ARRAY
18508: ST_TO_ADDR
18509: GO 18835
18511: LD_INT 18
18513: DOUBLE
18514: EQUAL
18515: IFTRUE 18519
18517: GO 18530
18519: POP
// bc_type := b_ext_radar ; 19 :
18520: LD_ADDR_OWVAR 42
18524: PUSH
18525: LD_INT 20
18527: ST_TO_ADDR
18528: GO 18835
18530: LD_INT 19
18532: DOUBLE
18533: EQUAL
18534: IFTRUE 18538
18536: GO 18549
18538: POP
// bc_type := b_ext_radio ; 20 :
18539: LD_ADDR_OWVAR 42
18543: PUSH
18544: LD_INT 22
18546: ST_TO_ADDR
18547: GO 18835
18549: LD_INT 20
18551: DOUBLE
18552: EQUAL
18553: IFTRUE 18557
18555: GO 18568
18557: POP
// bc_type := b_ext_siberium ; 21 :
18558: LD_ADDR_OWVAR 42
18562: PUSH
18563: LD_INT 21
18565: ST_TO_ADDR
18566: GO 18835
18568: LD_INT 21
18570: DOUBLE
18571: EQUAL
18572: IFTRUE 18576
18574: GO 18587
18576: POP
// bc_type := b_ext_computer ; 22 :
18577: LD_ADDR_OWVAR 42
18581: PUSH
18582: LD_INT 24
18584: ST_TO_ADDR
18585: GO 18835
18587: LD_INT 22
18589: DOUBLE
18590: EQUAL
18591: IFTRUE 18595
18593: GO 18606
18595: POP
// bc_type := b_ext_track ; 23 :
18596: LD_ADDR_OWVAR 42
18600: PUSH
18601: LD_INT 16
18603: ST_TO_ADDR
18604: GO 18835
18606: LD_INT 23
18608: DOUBLE
18609: EQUAL
18610: IFTRUE 18614
18612: GO 18625
18614: POP
// bc_type := b_ext_laser ; 24 :
18615: LD_ADDR_OWVAR 42
18619: PUSH
18620: LD_INT 25
18622: ST_TO_ADDR
18623: GO 18835
18625: LD_INT 24
18627: DOUBLE
18628: EQUAL
18629: IFTRUE 18633
18631: GO 18644
18633: POP
// bc_type := b_control_tower ; 25 :
18634: LD_ADDR_OWVAR 42
18638: PUSH
18639: LD_INT 36
18641: ST_TO_ADDR
18642: GO 18835
18644: LD_INT 25
18646: DOUBLE
18647: EQUAL
18648: IFTRUE 18652
18650: GO 18663
18652: POP
// bc_type := b_breastwork ; 26 :
18653: LD_ADDR_OWVAR 42
18657: PUSH
18658: LD_INT 31
18660: ST_TO_ADDR
18661: GO 18835
18663: LD_INT 26
18665: DOUBLE
18666: EQUAL
18667: IFTRUE 18671
18669: GO 18682
18671: POP
// bc_type := b_bunker ; 27 :
18672: LD_ADDR_OWVAR 42
18676: PUSH
18677: LD_INT 32
18679: ST_TO_ADDR
18680: GO 18835
18682: LD_INT 27
18684: DOUBLE
18685: EQUAL
18686: IFTRUE 18690
18688: GO 18701
18690: POP
// bc_type := b_turret ; 28 :
18691: LD_ADDR_OWVAR 42
18695: PUSH
18696: LD_INT 33
18698: ST_TO_ADDR
18699: GO 18835
18701: LD_INT 28
18703: DOUBLE
18704: EQUAL
18705: IFTRUE 18709
18707: GO 18720
18709: POP
// bc_type := b_armoury ; 29 :
18710: LD_ADDR_OWVAR 42
18714: PUSH
18715: LD_INT 4
18717: ST_TO_ADDR
18718: GO 18835
18720: LD_INT 29
18722: DOUBLE
18723: EQUAL
18724: IFTRUE 18728
18726: GO 18739
18728: POP
// bc_type := b_barracks ; 30 :
18729: LD_ADDR_OWVAR 42
18733: PUSH
18734: LD_INT 5
18736: ST_TO_ADDR
18737: GO 18835
18739: LD_INT 30
18741: DOUBLE
18742: EQUAL
18743: IFTRUE 18747
18745: GO 18758
18747: POP
// bc_type := b_solar_power ; 31 :
18748: LD_ADDR_OWVAR 42
18752: PUSH
18753: LD_INT 27
18755: ST_TO_ADDR
18756: GO 18835
18758: LD_INT 31
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18777
18766: POP
// bc_type := b_oil_power ; 32 :
18767: LD_ADDR_OWVAR 42
18771: PUSH
18772: LD_INT 26
18774: ST_TO_ADDR
18775: GO 18835
18777: LD_INT 32
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 18796
18785: POP
// bc_type := b_siberite_power ; 33 :
18786: LD_ADDR_OWVAR 42
18790: PUSH
18791: LD_INT 28
18793: ST_TO_ADDR
18794: GO 18835
18796: LD_INT 33
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18815
18804: POP
// bc_type := b_oil_mine ; 34 :
18805: LD_ADDR_OWVAR 42
18809: PUSH
18810: LD_INT 29
18812: ST_TO_ADDR
18813: GO 18835
18815: LD_INT 34
18817: DOUBLE
18818: EQUAL
18819: IFTRUE 18823
18821: GO 18834
18823: POP
// bc_type := b_siberite_mine ; end ;
18824: LD_ADDR_OWVAR 42
18828: PUSH
18829: LD_INT 30
18831: ST_TO_ADDR
18832: GO 18835
18834: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18835: LD_ADDR_VAR 0 8
18839: PUSH
18840: LD_VAR 0 5
18844: PPUSH
18845: LD_VAR 0 6
18849: PPUSH
18850: LD_VAR 0 3
18854: PPUSH
18855: CALL_OW 47
18859: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18860: LD_OWVAR 42
18864: PUSH
18865: LD_INT 32
18867: PUSH
18868: LD_INT 33
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: IN
18875: IFFALSE 18891
// PlaceWeaponTurret ( b , weapon ) ;
18877: LD_VAR 0 8
18881: PPUSH
18882: LD_VAR 0 4
18886: PPUSH
18887: CALL_OW 431
// end ;
18891: LD_VAR 0 7
18895: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18896: LD_INT 0
18898: PPUSH
18899: PPUSH
18900: PPUSH
18901: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18902: LD_ADDR_VAR 0 4
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_OWVAR 2
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: LD_INT 30
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PPUSH
18951: CALL_OW 69
18955: ST_TO_ADDR
// if not tmp then
18956: LD_VAR 0 4
18960: NOT
18961: IFFALSE 18965
// exit ;
18963: GO 19024
// for i in tmp do
18965: LD_ADDR_VAR 0 2
18969: PUSH
18970: LD_VAR 0 4
18974: PUSH
18975: FOR_IN
18976: IFFALSE 19022
// for j = 1 to 3 do
18978: LD_ADDR_VAR 0 3
18982: PUSH
18983: DOUBLE
18984: LD_INT 1
18986: DEC
18987: ST_TO_ADDR
18988: LD_INT 3
18990: PUSH
18991: FOR_TO
18992: IFFALSE 19018
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: CALL_OW 274
19003: PPUSH
19004: LD_VAR 0 3
19008: PPUSH
19009: LD_INT 99999
19011: PPUSH
19012: CALL_OW 277
19016: GO 18991
19018: POP
19019: POP
19020: GO 18975
19022: POP
19023: POP
// end ;
19024: LD_VAR 0 1
19028: RET
// export function hHackSetLevel10 ; var i , j ; begin
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
19033: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19034: LD_ADDR_VAR 0 2
19038: PUSH
19039: LD_INT 21
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PPUSH
19049: CALL_OW 69
19053: PUSH
19054: FOR_IN
19055: IFFALSE 19107
// if IsSelected ( i ) then
19057: LD_VAR 0 2
19061: PPUSH
19062: CALL_OW 306
19066: IFFALSE 19105
// begin for j := 1 to 4 do
19068: LD_ADDR_VAR 0 3
19072: PUSH
19073: DOUBLE
19074: LD_INT 1
19076: DEC
19077: ST_TO_ADDR
19078: LD_INT 4
19080: PUSH
19081: FOR_TO
19082: IFFALSE 19103
// SetSkill ( i , j , 10 ) ;
19084: LD_VAR 0 2
19088: PPUSH
19089: LD_VAR 0 3
19093: PPUSH
19094: LD_INT 10
19096: PPUSH
19097: CALL_OW 237
19101: GO 19081
19103: POP
19104: POP
// end ;
19105: GO 19054
19107: POP
19108: POP
// end ;
19109: LD_VAR 0 1
19113: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19114: LD_INT 0
19116: PPUSH
19117: PPUSH
19118: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19119: LD_ADDR_VAR 0 2
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_OWVAR 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 69
19154: PUSH
19155: FOR_IN
19156: IFFALSE 19197
// begin for j := 1 to 4 do
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: DOUBLE
19164: LD_INT 1
19166: DEC
19167: ST_TO_ADDR
19168: LD_INT 4
19170: PUSH
19171: FOR_TO
19172: IFFALSE 19193
// SetSkill ( i , j , 10 ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 10
19186: PPUSH
19187: CALL_OW 237
19191: GO 19171
19193: POP
19194: POP
// end ;
19195: GO 19155
19197: POP
19198: POP
// end ;
19199: LD_VAR 0 1
19203: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19204: LD_INT 0
19206: PPUSH
// uc_side := your_side ;
19207: LD_ADDR_OWVAR 20
19211: PUSH
19212: LD_OWVAR 2
19216: ST_TO_ADDR
// uc_nation := nation ;
19217: LD_ADDR_OWVAR 21
19221: PUSH
19222: LD_VAR 0 1
19226: ST_TO_ADDR
// InitHc ;
19227: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19231: LD_INT 0
19233: PPUSH
19234: LD_VAR 0 2
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19248: LD_VAR 0 4
19252: PPUSH
19253: LD_VAR 0 5
19257: PPUSH
19258: CALL_OW 428
19262: PUSH
19263: LD_INT 0
19265: EQUAL
19266: IFFALSE 19290
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19268: CALL_OW 44
19272: PPUSH
19273: LD_VAR 0 4
19277: PPUSH
19278: LD_VAR 0 5
19282: PPUSH
19283: LD_INT 1
19285: PPUSH
19286: CALL_OW 48
// end ;
19290: LD_VAR 0 6
19294: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19295: LD_INT 0
19297: PPUSH
19298: PPUSH
// uc_side := your_side ;
19299: LD_ADDR_OWVAR 20
19303: PUSH
19304: LD_OWVAR 2
19308: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19309: LD_VAR 0 1
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 3
19322: PUSH
19323: LD_INT 4
19325: PUSH
19326: LD_INT 5
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: IN
19336: IFFALSE 19348
// uc_nation := nation_american else
19338: LD_ADDR_OWVAR 21
19342: PUSH
19343: LD_INT 1
19345: ST_TO_ADDR
19346: GO 19391
// if chassis in [ 11 , 12 , 13 , 14 ] then
19348: LD_VAR 0 1
19352: PUSH
19353: LD_INT 11
19355: PUSH
19356: LD_INT 12
19358: PUSH
19359: LD_INT 13
19361: PUSH
19362: LD_INT 14
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: IN
19371: IFFALSE 19383
// uc_nation := nation_arabian else
19373: LD_ADDR_OWVAR 21
19377: PUSH
19378: LD_INT 2
19380: ST_TO_ADDR
19381: GO 19391
// uc_nation := nation_russian ;
19383: LD_ADDR_OWVAR 21
19387: PUSH
19388: LD_INT 3
19390: ST_TO_ADDR
// vc_chassis := chassis ;
19391: LD_ADDR_OWVAR 37
19395: PUSH
19396: LD_VAR 0 1
19400: ST_TO_ADDR
// vc_engine := engine ;
19401: LD_ADDR_OWVAR 39
19405: PUSH
19406: LD_VAR 0 2
19410: ST_TO_ADDR
// vc_control := control ;
19411: LD_ADDR_OWVAR 38
19415: PUSH
19416: LD_VAR 0 3
19420: ST_TO_ADDR
// vc_weapon := weapon ;
19421: LD_ADDR_OWVAR 40
19425: PUSH
19426: LD_VAR 0 4
19430: ST_TO_ADDR
// un := CreateVehicle ;
19431: LD_ADDR_VAR 0 8
19435: PUSH
19436: CALL_OW 45
19440: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19441: LD_VAR 0 8
19445: PPUSH
19446: LD_INT 0
19448: PPUSH
19449: LD_INT 5
19451: PPUSH
19452: CALL_OW 12
19456: PPUSH
19457: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19461: LD_VAR 0 8
19465: PPUSH
19466: LD_VAR 0 5
19470: PPUSH
19471: LD_VAR 0 6
19475: PPUSH
19476: LD_INT 1
19478: PPUSH
19479: CALL_OW 48
// end ;
19483: LD_VAR 0 7
19487: RET
// export hInvincible ; every 1 do
19488: GO 19490
19490: DISABLE
// hInvincible := [ ] ;
19491: LD_ADDR_EXP 82
19495: PUSH
19496: EMPTY
19497: ST_TO_ADDR
19498: END
// every 10 do var i ;
19499: GO 19501
19501: DISABLE
19502: LD_INT 0
19504: PPUSH
// begin enable ;
19505: ENABLE
// if not hInvincible then
19506: LD_EXP 82
19510: NOT
19511: IFFALSE 19515
// exit ;
19513: GO 19559
// for i in hInvincible do
19515: LD_ADDR_VAR 0 1
19519: PUSH
19520: LD_EXP 82
19524: PUSH
19525: FOR_IN
19526: IFFALSE 19557
// if GetLives ( i ) < 1000 then
19528: LD_VAR 0 1
19532: PPUSH
19533: CALL_OW 256
19537: PUSH
19538: LD_INT 1000
19540: LESS
19541: IFFALSE 19555
// SetLives ( i , 1000 ) ;
19543: LD_VAR 0 1
19547: PPUSH
19548: LD_INT 1000
19550: PPUSH
19551: CALL_OW 234
19555: GO 19525
19557: POP
19558: POP
// end ;
19559: PPOPN 1
19561: END
// export function hHackInvincible ; var i ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19566: LD_ADDR_VAR 0 2
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 21
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 69
19603: PUSH
19604: FOR_IN
19605: IFFALSE 19666
// if IsSelected ( i ) then
19607: LD_VAR 0 2
19611: PPUSH
19612: CALL_OW 306
19616: IFFALSE 19664
// begin if i in hInvincible then
19618: LD_VAR 0 2
19622: PUSH
19623: LD_EXP 82
19627: IN
19628: IFFALSE 19648
// hInvincible := hInvincible diff i else
19630: LD_ADDR_EXP 82
19634: PUSH
19635: LD_EXP 82
19639: PUSH
19640: LD_VAR 0 2
19644: DIFF
19645: ST_TO_ADDR
19646: GO 19664
// hInvincible := hInvincible union i ;
19648: LD_ADDR_EXP 82
19652: PUSH
19653: LD_EXP 82
19657: PUSH
19658: LD_VAR 0 2
19662: UNION
19663: ST_TO_ADDR
// end ;
19664: GO 19604
19666: POP
19667: POP
// end ;
19668: LD_VAR 0 1
19672: RET
// export function hHackInvisible ; var i , j ; begin
19673: LD_INT 0
19675: PPUSH
19676: PPUSH
19677: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 21
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PPUSH
19693: CALL_OW 69
19697: PUSH
19698: FOR_IN
19699: IFFALSE 19723
// if IsSelected ( i ) then
19701: LD_VAR 0 2
19705: PPUSH
19706: CALL_OW 306
19710: IFFALSE 19721
// ComForceInvisible ( i ) ;
19712: LD_VAR 0 2
19716: PPUSH
19717: CALL_OW 496
19721: GO 19698
19723: POP
19724: POP
// end ;
19725: LD_VAR 0 1
19729: RET
// export function hHackChangeYourSide ; begin
19730: LD_INT 0
19732: PPUSH
// if your_side = 8 then
19733: LD_OWVAR 2
19737: PUSH
19738: LD_INT 8
19740: EQUAL
19741: IFFALSE 19753
// your_side := 0 else
19743: LD_ADDR_OWVAR 2
19747: PUSH
19748: LD_INT 0
19750: ST_TO_ADDR
19751: GO 19767
// your_side := your_side + 1 ;
19753: LD_ADDR_OWVAR 2
19757: PUSH
19758: LD_OWVAR 2
19762: PUSH
19763: LD_INT 1
19765: PLUS
19766: ST_TO_ADDR
// end ;
19767: LD_VAR 0 1
19771: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
19776: PPUSH
// for i in all_units do
19777: LD_ADDR_VAR 0 2
19781: PUSH
19782: LD_OWVAR 3
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19866
// if IsSelected ( i ) then
19790: LD_VAR 0 2
19794: PPUSH
19795: CALL_OW 306
19799: IFFALSE 19864
// begin j := GetSide ( i ) ;
19801: LD_ADDR_VAR 0 3
19805: PUSH
19806: LD_VAR 0 2
19810: PPUSH
19811: CALL_OW 255
19815: ST_TO_ADDR
// if j = 8 then
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 8
19823: EQUAL
19824: IFFALSE 19836
// j := 0 else
19826: LD_ADDR_VAR 0 3
19830: PUSH
19831: LD_INT 0
19833: ST_TO_ADDR
19834: GO 19850
// j := j + 1 ;
19836: LD_ADDR_VAR 0 3
19840: PUSH
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 1
19848: PLUS
19849: ST_TO_ADDR
// SetSide ( i , j ) ;
19850: LD_VAR 0 2
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL_OW 235
// end ;
19864: GO 19787
19866: POP
19867: POP
// end ;
19868: LD_VAR 0 1
19872: RET
// export function hHackFog ; begin
19873: LD_INT 0
19875: PPUSH
// FogOff ( true ) ;
19876: LD_INT 1
19878: PPUSH
19879: CALL_OW 344
// end ;
19883: LD_VAR 0 1
19887: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19888: LD_INT 0
19890: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19891: LD_VAR 0 1
19895: PPUSH
19896: LD_VAR 0 2
19900: PPUSH
19901: LD_VAR 0 3
19905: PPUSH
19906: LD_INT 1
19908: PPUSH
19909: LD_INT 1
19911: PPUSH
19912: CALL_OW 483
// CenterOnXY ( x , y ) ;
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: CALL_OW 84
// end ;
19930: LD_VAR 0 4
19934: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19939: LD_VAR 0 1
19943: NOT
19944: PUSH
19945: LD_VAR 0 2
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: CALL_OW 488
19959: NOT
19960: OR
19961: PUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 266
19971: PUSH
19972: LD_INT 3
19974: NONEQUAL
19975: PUSH
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 247
19985: PUSH
19986: LD_INT 1
19988: EQUAL
19989: NOT
19990: AND
19991: OR
19992: IFFALSE 19996
// exit ;
19994: GO 20145
// if GetType ( factory ) = unit_human then
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 247
20005: PUSH
20006: LD_INT 1
20008: EQUAL
20009: IFFALSE 20026
// factory := IsInUnit ( factory ) ;
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 310
20025: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20026: LD_VAR 0 1
20030: PPUSH
20031: CALL_OW 266
20035: PUSH
20036: LD_INT 3
20038: NONEQUAL
20039: IFFALSE 20043
// exit ;
20041: GO 20145
// if HexInfo ( x , y ) = factory then
20043: LD_VAR 0 2
20047: PPUSH
20048: LD_VAR 0 3
20052: PPUSH
20053: CALL_OW 428
20057: PUSH
20058: LD_VAR 0 1
20062: EQUAL
20063: IFFALSE 20090
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20065: LD_ADDR_EXP 83
20069: PUSH
20070: LD_EXP 83
20074: PPUSH
20075: LD_VAR 0 1
20079: PPUSH
20080: LD_INT 0
20082: PPUSH
20083: CALL_OW 1
20087: ST_TO_ADDR
20088: GO 20141
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20090: LD_ADDR_EXP 83
20094: PUSH
20095: LD_EXP 83
20099: PPUSH
20100: LD_VAR 0 1
20104: PPUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 255
20114: PUSH
20115: LD_VAR 0 1
20119: PUSH
20120: LD_VAR 0 2
20124: PUSH
20125: LD_VAR 0 3
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 1
20140: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20141: CALL 20150 0 0
// end ;
20145: LD_VAR 0 4
20149: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20150: LD_INT 0
20152: PPUSH
20153: PPUSH
20154: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20155: LD_STRING resetFactoryWaypoint();
20157: PPUSH
20158: CALL_OW 559
// if factoryWaypoints then
20162: LD_EXP 83
20166: IFFALSE 20292
// begin list := PrepareArray ( factoryWaypoints ) ;
20168: LD_ADDR_VAR 0 3
20172: PUSH
20173: LD_EXP 83
20177: PPUSH
20178: CALL 66816 0 1
20182: ST_TO_ADDR
// for i := 1 to list do
20183: LD_ADDR_VAR 0 2
20187: PUSH
20188: DOUBLE
20189: LD_INT 1
20191: DEC
20192: ST_TO_ADDR
20193: LD_VAR 0 3
20197: PUSH
20198: FOR_TO
20199: IFFALSE 20290
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20201: LD_STRING setFactoryWaypointXY(
20203: PUSH
20204: LD_VAR 0 3
20208: PUSH
20209: LD_VAR 0 2
20213: ARRAY
20214: PUSH
20215: LD_INT 1
20217: ARRAY
20218: STR
20219: PUSH
20220: LD_STRING ,
20222: STR
20223: PUSH
20224: LD_VAR 0 3
20228: PUSH
20229: LD_VAR 0 2
20233: ARRAY
20234: PUSH
20235: LD_INT 2
20237: ARRAY
20238: STR
20239: PUSH
20240: LD_STRING ,
20242: STR
20243: PUSH
20244: LD_VAR 0 3
20248: PUSH
20249: LD_VAR 0 2
20253: ARRAY
20254: PUSH
20255: LD_INT 3
20257: ARRAY
20258: STR
20259: PUSH
20260: LD_STRING ,
20262: STR
20263: PUSH
20264: LD_VAR 0 3
20268: PUSH
20269: LD_VAR 0 2
20273: ARRAY
20274: PUSH
20275: LD_INT 4
20277: ARRAY
20278: STR
20279: PUSH
20280: LD_STRING )
20282: STR
20283: PPUSH
20284: CALL_OW 559
20288: GO 20198
20290: POP
20291: POP
// end ; end ;
20292: LD_VAR 0 1
20296: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20297: LD_INT 0
20299: PPUSH
// if HexInfo ( x , y ) = warehouse then
20300: LD_VAR 0 2
20304: PPUSH
20305: LD_VAR 0 3
20309: PPUSH
20310: CALL_OW 428
20314: PUSH
20315: LD_VAR 0 1
20319: EQUAL
20320: IFFALSE 20347
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20322: LD_ADDR_EXP 84
20326: PUSH
20327: LD_EXP 84
20331: PPUSH
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: CALL_OW 1
20344: ST_TO_ADDR
20345: GO 20398
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20347: LD_ADDR_EXP 84
20351: PUSH
20352: LD_EXP 84
20356: PPUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_VAR 0 1
20366: PPUSH
20367: CALL_OW 255
20371: PUSH
20372: LD_VAR 0 1
20376: PUSH
20377: LD_VAR 0 2
20381: PUSH
20382: LD_VAR 0 3
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: PPUSH
20393: CALL_OW 1
20397: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20398: CALL 20407 0 0
// end ;
20402: LD_VAR 0 4
20406: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20407: LD_INT 0
20409: PPUSH
20410: PPUSH
20411: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20412: LD_STRING resetWarehouseGatheringPoints();
20414: PPUSH
20415: CALL_OW 559
// if warehouseGatheringPoints then
20419: LD_EXP 84
20423: IFFALSE 20549
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20425: LD_ADDR_VAR 0 3
20429: PUSH
20430: LD_EXP 84
20434: PPUSH
20435: CALL 66816 0 1
20439: ST_TO_ADDR
// for i := 1 to list do
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: DOUBLE
20446: LD_INT 1
20448: DEC
20449: ST_TO_ADDR
20450: LD_VAR 0 3
20454: PUSH
20455: FOR_TO
20456: IFFALSE 20547
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20458: LD_STRING setWarehouseGatheringPointXY(
20460: PUSH
20461: LD_VAR 0 3
20465: PUSH
20466: LD_VAR 0 2
20470: ARRAY
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: STR
20476: PUSH
20477: LD_STRING ,
20479: STR
20480: PUSH
20481: LD_VAR 0 3
20485: PUSH
20486: LD_VAR 0 2
20490: ARRAY
20491: PUSH
20492: LD_INT 2
20494: ARRAY
20495: STR
20496: PUSH
20497: LD_STRING ,
20499: STR
20500: PUSH
20501: LD_VAR 0 3
20505: PUSH
20506: LD_VAR 0 2
20510: ARRAY
20511: PUSH
20512: LD_INT 3
20514: ARRAY
20515: STR
20516: PUSH
20517: LD_STRING ,
20519: STR
20520: PUSH
20521: LD_VAR 0 3
20525: PUSH
20526: LD_VAR 0 2
20530: ARRAY
20531: PUSH
20532: LD_INT 4
20534: ARRAY
20535: STR
20536: PUSH
20537: LD_STRING )
20539: STR
20540: PPUSH
20541: CALL_OW 559
20545: GO 20455
20547: POP
20548: POP
// end ; end ;
20549: LD_VAR 0 1
20553: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20554: LD_EXP 84
20558: IFFALSE 21243
20560: GO 20562
20562: DISABLE
20563: LD_INT 0
20565: PPUSH
20566: PPUSH
20567: PPUSH
20568: PPUSH
20569: PPUSH
20570: PPUSH
20571: PPUSH
20572: PPUSH
20573: PPUSH
// begin enable ;
20574: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20575: LD_ADDR_VAR 0 3
20579: PUSH
20580: LD_EXP 84
20584: PPUSH
20585: CALL 66816 0 1
20589: ST_TO_ADDR
// if not list then
20590: LD_VAR 0 3
20594: NOT
20595: IFFALSE 20599
// exit ;
20597: GO 21243
// for i := 1 to list do
20599: LD_ADDR_VAR 0 1
20603: PUSH
20604: DOUBLE
20605: LD_INT 1
20607: DEC
20608: ST_TO_ADDR
20609: LD_VAR 0 3
20613: PUSH
20614: FOR_TO
20615: IFFALSE 21241
// begin depot := list [ i ] [ 2 ] ;
20617: LD_ADDR_VAR 0 8
20621: PUSH
20622: LD_VAR 0 3
20626: PUSH
20627: LD_VAR 0 1
20631: ARRAY
20632: PUSH
20633: LD_INT 2
20635: ARRAY
20636: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20637: LD_ADDR_VAR 0 5
20641: PUSH
20642: LD_VAR 0 3
20646: PUSH
20647: LD_VAR 0 1
20651: ARRAY
20652: PUSH
20653: LD_INT 1
20655: ARRAY
20656: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20657: LD_VAR 0 8
20661: PPUSH
20662: CALL_OW 301
20666: PUSH
20667: LD_VAR 0 5
20671: PUSH
20672: LD_VAR 0 8
20676: PPUSH
20677: CALL_OW 255
20681: NONEQUAL
20682: OR
20683: IFFALSE 20712
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20685: LD_ADDR_EXP 84
20689: PUSH
20690: LD_EXP 84
20694: PPUSH
20695: LD_VAR 0 8
20699: PPUSH
20700: LD_INT 0
20702: PPUSH
20703: CALL_OW 1
20707: ST_TO_ADDR
// exit ;
20708: POP
20709: POP
20710: GO 21243
// end ; x := list [ i ] [ 3 ] ;
20712: LD_ADDR_VAR 0 6
20716: PUSH
20717: LD_VAR 0 3
20721: PUSH
20722: LD_VAR 0 1
20726: ARRAY
20727: PUSH
20728: LD_INT 3
20730: ARRAY
20731: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20732: LD_ADDR_VAR 0 7
20736: PUSH
20737: LD_VAR 0 3
20741: PUSH
20742: LD_VAR 0 1
20746: ARRAY
20747: PUSH
20748: LD_INT 4
20750: ARRAY
20751: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20752: LD_ADDR_VAR 0 9
20756: PUSH
20757: LD_VAR 0 6
20761: PPUSH
20762: LD_VAR 0 7
20766: PPUSH
20767: LD_INT 16
20769: PPUSH
20770: CALL 65404 0 3
20774: ST_TO_ADDR
// if not cratesNearbyPoint then
20775: LD_VAR 0 9
20779: NOT
20780: IFFALSE 20786
// exit ;
20782: POP
20783: POP
20784: GO 21243
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20786: LD_ADDR_VAR 0 4
20790: PUSH
20791: LD_INT 22
20793: PUSH
20794: LD_VAR 0 5
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: LD_INT 60
20808: PUSH
20809: EMPTY
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 91
20818: PUSH
20819: LD_VAR 0 8
20823: PUSH
20824: LD_INT 6
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 25
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 25
20847: PUSH
20848: LD_INT 16
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: PPUSH
20866: CALL_OW 69
20870: PUSH
20871: LD_VAR 0 8
20875: PPUSH
20876: CALL_OW 313
20880: PPUSH
20881: LD_INT 3
20883: PUSH
20884: LD_INT 60
20886: PUSH
20887: EMPTY
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: LD_INT 25
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 25
20909: PUSH
20910: LD_INT 16
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PPUSH
20926: CALL_OW 72
20930: UNION
20931: ST_TO_ADDR
// if tmp then
20932: LD_VAR 0 4
20936: IFFALSE 21016
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20938: LD_ADDR_VAR 0 4
20942: PUSH
20943: LD_VAR 0 4
20947: PPUSH
20948: LD_INT 3
20950: PPUSH
20951: CALL 63373 0 2
20955: ST_TO_ADDR
// for j in tmp do
20956: LD_ADDR_VAR 0 2
20960: PUSH
20961: LD_VAR 0 4
20965: PUSH
20966: FOR_IN
20967: IFFALSE 21010
// begin if IsInUnit ( j ) then
20969: LD_VAR 0 2
20973: PPUSH
20974: CALL_OW 310
20978: IFFALSE 20989
// ComExit ( j ) ;
20980: LD_VAR 0 2
20984: PPUSH
20985: CALL 63456 0 1
// AddComCollect ( j , x , y ) ;
20989: LD_VAR 0 2
20993: PPUSH
20994: LD_VAR 0 6
20998: PPUSH
20999: LD_VAR 0 7
21003: PPUSH
21004: CALL_OW 177
// end ;
21008: GO 20966
21010: POP
21011: POP
// exit ;
21012: POP
21013: POP
21014: GO 21243
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21016: LD_ADDR_VAR 0 4
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_VAR 0 5
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 91
21035: PUSH
21036: LD_VAR 0 8
21040: PUSH
21041: LD_INT 8
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 2
21051: PUSH
21052: LD_INT 34
21054: PUSH
21055: LD_INT 12
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 34
21064: PUSH
21065: LD_INT 51
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 34
21074: PUSH
21075: LD_INT 32
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 34
21084: PUSH
21085: LD_INT 89
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 69
21108: ST_TO_ADDR
// if tmp then
21109: LD_VAR 0 4
21113: IFFALSE 21239
// begin for j in tmp do
21115: LD_ADDR_VAR 0 2
21119: PUSH
21120: LD_VAR 0 4
21124: PUSH
21125: FOR_IN
21126: IFFALSE 21237
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21128: LD_VAR 0 2
21132: PPUSH
21133: CALL_OW 262
21137: PUSH
21138: LD_INT 3
21140: EQUAL
21141: PUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: CALL_OW 261
21151: PUSH
21152: LD_INT 20
21154: GREATER
21155: OR
21156: PUSH
21157: LD_VAR 0 2
21161: PPUSH
21162: CALL_OW 314
21166: NOT
21167: AND
21168: PUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: CALL_OW 263
21178: PUSH
21179: LD_INT 1
21181: NONEQUAL
21182: PUSH
21183: LD_VAR 0 2
21187: PPUSH
21188: CALL_OW 311
21192: OR
21193: AND
21194: IFFALSE 21235
// begin ComCollect ( j , x , y ) ;
21196: LD_VAR 0 2
21200: PPUSH
21201: LD_VAR 0 6
21205: PPUSH
21206: LD_VAR 0 7
21210: PPUSH
21211: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21215: LD_VAR 0 2
21219: PPUSH
21220: LD_VAR 0 8
21224: PPUSH
21225: CALL_OW 172
// exit ;
21229: POP
21230: POP
21231: POP
21232: POP
21233: GO 21243
// end ;
21235: GO 21125
21237: POP
21238: POP
// end ; end ;
21239: GO 20614
21241: POP
21242: POP
// end ; end_of_file
21243: PPOPN 9
21245: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21246: LD_INT 0
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 264
21261: PUSH
21262: LD_INT 91
21264: EQUAL
21265: IFFALSE 21337
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21267: LD_INT 68
21269: PPUSH
21270: LD_VAR 0 1
21274: PPUSH
21275: CALL_OW 255
21279: PPUSH
21280: CALL_OW 321
21284: PUSH
21285: LD_INT 2
21287: EQUAL
21288: IFFALSE 21300
// eff := 70 else
21290: LD_ADDR_VAR 0 4
21294: PUSH
21295: LD_INT 70
21297: ST_TO_ADDR
21298: GO 21308
// eff := 30 ;
21300: LD_ADDR_VAR 0 4
21304: PUSH
21305: LD_INT 30
21307: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21308: LD_VAR 0 1
21312: PPUSH
21313: CALL_OW 250
21317: PPUSH
21318: LD_VAR 0 1
21322: PPUSH
21323: CALL_OW 251
21327: PPUSH
21328: LD_VAR 0 4
21332: PPUSH
21333: CALL_OW 495
// end ; end ;
21337: LD_VAR 0 2
21341: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21342: LD_INT 0
21344: PPUSH
// end ;
21345: LD_VAR 0 4
21349: RET
// export function SOS_Command ( cmd ) ; begin
21350: LD_INT 0
21352: PPUSH
// end ;
21353: LD_VAR 0 2
21357: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21358: LD_INT 0
21360: PPUSH
// end ;
21361: LD_VAR 0 6
21365: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21366: LD_INT 0
21368: PPUSH
21369: PPUSH
// if not vehicle or not factory then
21370: LD_VAR 0 1
21374: NOT
21375: PUSH
21376: LD_VAR 0 2
21380: NOT
21381: OR
21382: IFFALSE 21386
// exit ;
21384: GO 21617
// if factoryWaypoints >= factory then
21386: LD_EXP 83
21390: PUSH
21391: LD_VAR 0 2
21395: GREATEREQUAL
21396: IFFALSE 21617
// if factoryWaypoints [ factory ] then
21398: LD_EXP 83
21402: PUSH
21403: LD_VAR 0 2
21407: ARRAY
21408: IFFALSE 21617
// begin if GetControl ( vehicle ) = control_manual then
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 263
21419: PUSH
21420: LD_INT 1
21422: EQUAL
21423: IFFALSE 21504
// begin driver := IsDrivenBy ( vehicle ) ;
21425: LD_ADDR_VAR 0 4
21429: PUSH
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 311
21439: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21440: LD_VAR 0 4
21444: PPUSH
21445: LD_EXP 83
21449: PUSH
21450: LD_VAR 0 2
21454: ARRAY
21455: PUSH
21456: LD_INT 3
21458: ARRAY
21459: PPUSH
21460: LD_EXP 83
21464: PUSH
21465: LD_VAR 0 2
21469: ARRAY
21470: PUSH
21471: LD_INT 4
21473: ARRAY
21474: PPUSH
21475: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21479: LD_VAR 0 4
21483: PPUSH
21484: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21488: LD_VAR 0 4
21492: PPUSH
21493: LD_VAR 0 2
21497: PPUSH
21498: CALL_OW 180
// end else
21502: GO 21617
// if GetControl ( vehicle ) = control_remote then
21504: LD_VAR 0 1
21508: PPUSH
21509: CALL_OW 263
21513: PUSH
21514: LD_INT 2
21516: EQUAL
21517: IFFALSE 21578
// begin wait ( 0 0$2 ) ;
21519: LD_INT 70
21521: PPUSH
21522: CALL_OW 67
// if Connect ( vehicle ) then
21526: LD_VAR 0 1
21530: PPUSH
21531: CALL 33697 0 1
21535: IFFALSE 21576
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21537: LD_VAR 0 1
21541: PPUSH
21542: LD_EXP 83
21546: PUSH
21547: LD_VAR 0 2
21551: ARRAY
21552: PUSH
21553: LD_INT 3
21555: ARRAY
21556: PPUSH
21557: LD_EXP 83
21561: PUSH
21562: LD_VAR 0 2
21566: ARRAY
21567: PUSH
21568: LD_INT 4
21570: ARRAY
21571: PPUSH
21572: CALL_OW 171
// end else
21576: GO 21617
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_EXP 83
21587: PUSH
21588: LD_VAR 0 2
21592: ARRAY
21593: PUSH
21594: LD_INT 3
21596: ARRAY
21597: PPUSH
21598: LD_EXP 83
21602: PUSH
21603: LD_VAR 0 2
21607: ARRAY
21608: PUSH
21609: LD_INT 4
21611: ARRAY
21612: PPUSH
21613: CALL_OW 171
// end ; end ;
21617: LD_VAR 0 3
21621: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21622: LD_INT 0
21624: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21625: LD_VAR 0 1
21629: PUSH
21630: LD_INT 250
21632: EQUAL
21633: PUSH
21634: LD_VAR 0 2
21638: PPUSH
21639: CALL_OW 264
21643: PUSH
21644: LD_INT 81
21646: EQUAL
21647: AND
21648: IFFALSE 21669
// MinerPlaceMine ( unit , x , y ) ;
21650: LD_VAR 0 2
21654: PPUSH
21655: LD_VAR 0 4
21659: PPUSH
21660: LD_VAR 0 5
21664: PPUSH
21665: CALL 24054 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21669: LD_VAR 0 1
21673: PUSH
21674: LD_INT 251
21676: EQUAL
21677: PUSH
21678: LD_VAR 0 2
21682: PPUSH
21683: CALL_OW 264
21687: PUSH
21688: LD_INT 81
21690: EQUAL
21691: AND
21692: IFFALSE 21713
// MinerDetonateMine ( unit , x , y ) ;
21694: LD_VAR 0 2
21698: PPUSH
21699: LD_VAR 0 4
21703: PPUSH
21704: LD_VAR 0 5
21708: PPUSH
21709: CALL 24329 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21713: LD_VAR 0 1
21717: PUSH
21718: LD_INT 252
21720: EQUAL
21721: PUSH
21722: LD_VAR 0 2
21726: PPUSH
21727: CALL_OW 264
21731: PUSH
21732: LD_INT 81
21734: EQUAL
21735: AND
21736: IFFALSE 21757
// MinerCreateMinefield ( unit , x , y ) ;
21738: LD_VAR 0 2
21742: PPUSH
21743: LD_VAR 0 4
21747: PPUSH
21748: LD_VAR 0 5
21752: PPUSH
21753: CALL 24746 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21757: LD_VAR 0 1
21761: PUSH
21762: LD_INT 253
21764: EQUAL
21765: PUSH
21766: LD_VAR 0 2
21770: PPUSH
21771: CALL_OW 257
21775: PUSH
21776: LD_INT 5
21778: EQUAL
21779: AND
21780: IFFALSE 21801
// ComBinocular ( unit , x , y ) ;
21782: LD_VAR 0 2
21786: PPUSH
21787: LD_VAR 0 4
21791: PPUSH
21792: LD_VAR 0 5
21796: PPUSH
21797: CALL 25115 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21801: LD_VAR 0 1
21805: PUSH
21806: LD_INT 254
21808: EQUAL
21809: PUSH
21810: LD_VAR 0 2
21814: PPUSH
21815: CALL_OW 264
21819: PUSH
21820: LD_INT 99
21822: EQUAL
21823: AND
21824: PUSH
21825: LD_VAR 0 3
21829: PPUSH
21830: CALL_OW 263
21834: PUSH
21835: LD_INT 3
21837: EQUAL
21838: AND
21839: IFFALSE 21855
// HackDestroyVehicle ( unit , selectedUnit ) ;
21841: LD_VAR 0 2
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL 23418 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21855: LD_VAR 0 1
21859: PUSH
21860: LD_INT 255
21862: EQUAL
21863: PUSH
21864: LD_VAR 0 2
21868: PPUSH
21869: CALL_OW 264
21873: PUSH
21874: LD_INT 14
21876: PUSH
21877: LD_INT 53
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: IN
21884: AND
21885: PUSH
21886: LD_VAR 0 4
21890: PPUSH
21891: LD_VAR 0 5
21895: PPUSH
21896: CALL_OW 488
21900: AND
21901: IFFALSE 21925
// CutTreeXYR ( unit , x , y , 12 ) ;
21903: LD_VAR 0 2
21907: PPUSH
21908: LD_VAR 0 4
21912: PPUSH
21913: LD_VAR 0 5
21917: PPUSH
21918: LD_INT 12
21920: PPUSH
21921: CALL 21988 0 4
// if cmd = 256 then
21925: LD_VAR 0 1
21929: PUSH
21930: LD_INT 256
21932: EQUAL
21933: IFFALSE 21954
// SetFactoryWaypoint ( unit , x , y ) ;
21935: LD_VAR 0 2
21939: PPUSH
21940: LD_VAR 0 4
21944: PPUSH
21945: LD_VAR 0 5
21949: PPUSH
21950: CALL 19935 0 3
// if cmd = 257 then
21954: LD_VAR 0 1
21958: PUSH
21959: LD_INT 257
21961: EQUAL
21962: IFFALSE 21983
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21964: LD_VAR 0 2
21968: PPUSH
21969: LD_VAR 0 4
21973: PPUSH
21974: LD_VAR 0 5
21978: PPUSH
21979: CALL 20297 0 3
// end ;
21983: LD_VAR 0 6
21987: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21988: LD_INT 0
21990: PPUSH
21991: PPUSH
21992: PPUSH
21993: PPUSH
21994: PPUSH
21995: PPUSH
21996: PPUSH
21997: PPUSH
21998: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21999: LD_VAR 0 1
22003: NOT
22004: PUSH
22005: LD_VAR 0 2
22009: PPUSH
22010: LD_VAR 0 3
22014: PPUSH
22015: CALL_OW 488
22019: NOT
22020: OR
22021: PUSH
22022: LD_VAR 0 4
22026: NOT
22027: OR
22028: IFFALSE 22032
// exit ;
22030: GO 22372
// list := [ ] ;
22032: LD_ADDR_VAR 0 13
22036: PUSH
22037: EMPTY
22038: ST_TO_ADDR
// if x - r < 0 then
22039: LD_VAR 0 2
22043: PUSH
22044: LD_VAR 0 4
22048: MINUS
22049: PUSH
22050: LD_INT 0
22052: LESS
22053: IFFALSE 22065
// min_x := 0 else
22055: LD_ADDR_VAR 0 7
22059: PUSH
22060: LD_INT 0
22062: ST_TO_ADDR
22063: GO 22081
// min_x := x - r ;
22065: LD_ADDR_VAR 0 7
22069: PUSH
22070: LD_VAR 0 2
22074: PUSH
22075: LD_VAR 0 4
22079: MINUS
22080: ST_TO_ADDR
// if y - r < 0 then
22081: LD_VAR 0 3
22085: PUSH
22086: LD_VAR 0 4
22090: MINUS
22091: PUSH
22092: LD_INT 0
22094: LESS
22095: IFFALSE 22107
// min_y := 0 else
22097: LD_ADDR_VAR 0 8
22101: PUSH
22102: LD_INT 0
22104: ST_TO_ADDR
22105: GO 22123
// min_y := y - r ;
22107: LD_ADDR_VAR 0 8
22111: PUSH
22112: LD_VAR 0 3
22116: PUSH
22117: LD_VAR 0 4
22121: MINUS
22122: ST_TO_ADDR
// max_x := x + r ;
22123: LD_ADDR_VAR 0 9
22127: PUSH
22128: LD_VAR 0 2
22132: PUSH
22133: LD_VAR 0 4
22137: PLUS
22138: ST_TO_ADDR
// max_y := y + r ;
22139: LD_ADDR_VAR 0 10
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: LD_VAR 0 4
22153: PLUS
22154: ST_TO_ADDR
// for _x = min_x to max_x do
22155: LD_ADDR_VAR 0 11
22159: PUSH
22160: DOUBLE
22161: LD_VAR 0 7
22165: DEC
22166: ST_TO_ADDR
22167: LD_VAR 0 9
22171: PUSH
22172: FOR_TO
22173: IFFALSE 22290
// for _y = min_y to max_y do
22175: LD_ADDR_VAR 0 12
22179: PUSH
22180: DOUBLE
22181: LD_VAR 0 8
22185: DEC
22186: ST_TO_ADDR
22187: LD_VAR 0 10
22191: PUSH
22192: FOR_TO
22193: IFFALSE 22286
// begin if not ValidHex ( _x , _y ) then
22195: LD_VAR 0 11
22199: PPUSH
22200: LD_VAR 0 12
22204: PPUSH
22205: CALL_OW 488
22209: NOT
22210: IFFALSE 22214
// continue ;
22212: GO 22192
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22214: LD_VAR 0 11
22218: PPUSH
22219: LD_VAR 0 12
22223: PPUSH
22224: CALL_OW 351
22228: PUSH
22229: LD_VAR 0 11
22233: PPUSH
22234: LD_VAR 0 12
22238: PPUSH
22239: CALL_OW 554
22243: AND
22244: IFFALSE 22284
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22246: LD_ADDR_VAR 0 13
22250: PUSH
22251: LD_VAR 0 13
22255: PPUSH
22256: LD_VAR 0 13
22260: PUSH
22261: LD_INT 1
22263: PLUS
22264: PPUSH
22265: LD_VAR 0 11
22269: PUSH
22270: LD_VAR 0 12
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PPUSH
22279: CALL_OW 2
22283: ST_TO_ADDR
// end ;
22284: GO 22192
22286: POP
22287: POP
22288: GO 22172
22290: POP
22291: POP
// if not list then
22292: LD_VAR 0 13
22296: NOT
22297: IFFALSE 22301
// exit ;
22299: GO 22372
// for i in list do
22301: LD_ADDR_VAR 0 6
22305: PUSH
22306: LD_VAR 0 13
22310: PUSH
22311: FOR_IN
22312: IFFALSE 22370
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_STRING M
22321: PUSH
22322: LD_VAR 0 6
22326: PUSH
22327: LD_INT 1
22329: ARRAY
22330: PUSH
22331: LD_VAR 0 6
22335: PUSH
22336: LD_INT 2
22338: ARRAY
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: LD_INT 0
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: PPUSH
22364: CALL_OW 447
22368: GO 22311
22370: POP
22371: POP
// end ;
22372: LD_VAR 0 5
22376: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22377: LD_EXP 86
22381: NOT
22382: IFFALSE 22432
22384: GO 22386
22386: DISABLE
// begin initHack := true ;
22387: LD_ADDR_EXP 86
22391: PUSH
22392: LD_INT 1
22394: ST_TO_ADDR
// hackTanks := [ ] ;
22395: LD_ADDR_EXP 87
22399: PUSH
22400: EMPTY
22401: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22402: LD_ADDR_EXP 88
22406: PUSH
22407: EMPTY
22408: ST_TO_ADDR
// hackLimit := 3 ;
22409: LD_ADDR_EXP 89
22413: PUSH
22414: LD_INT 3
22416: ST_TO_ADDR
// hackDist := 12 ;
22417: LD_ADDR_EXP 90
22421: PUSH
22422: LD_INT 12
22424: ST_TO_ADDR
// hackCounter := [ ] ;
22425: LD_ADDR_EXP 91
22429: PUSH
22430: EMPTY
22431: ST_TO_ADDR
// end ;
22432: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22433: LD_EXP 86
22437: PUSH
22438: LD_INT 34
22440: PUSH
22441: LD_INT 99
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PPUSH
22448: CALL_OW 69
22452: AND
22453: IFFALSE 22706
22455: GO 22457
22457: DISABLE
22458: LD_INT 0
22460: PPUSH
22461: PPUSH
// begin enable ;
22462: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22463: LD_ADDR_VAR 0 1
22467: PUSH
22468: LD_INT 34
22470: PUSH
22471: LD_INT 99
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PPUSH
22478: CALL_OW 69
22482: PUSH
22483: FOR_IN
22484: IFFALSE 22704
// begin if not i in hackTanks then
22486: LD_VAR 0 1
22490: PUSH
22491: LD_EXP 87
22495: IN
22496: NOT
22497: IFFALSE 22580
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22499: LD_ADDR_EXP 87
22503: PUSH
22504: LD_EXP 87
22508: PPUSH
22509: LD_EXP 87
22513: PUSH
22514: LD_INT 1
22516: PLUS
22517: PPUSH
22518: LD_VAR 0 1
22522: PPUSH
22523: CALL_OW 1
22527: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22528: LD_ADDR_EXP 88
22532: PUSH
22533: LD_EXP 88
22537: PPUSH
22538: LD_EXP 88
22542: PUSH
22543: LD_INT 1
22545: PLUS
22546: PPUSH
22547: EMPTY
22548: PPUSH
22549: CALL_OW 1
22553: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22554: LD_ADDR_EXP 91
22558: PUSH
22559: LD_EXP 91
22563: PPUSH
22564: LD_EXP 91
22568: PUSH
22569: LD_INT 1
22571: PLUS
22572: PPUSH
22573: EMPTY
22574: PPUSH
22575: CALL_OW 1
22579: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22580: LD_VAR 0 1
22584: PPUSH
22585: CALL_OW 302
22589: NOT
22590: IFFALSE 22603
// begin HackUnlinkAll ( i ) ;
22592: LD_VAR 0 1
22596: PPUSH
22597: CALL 22709 0 1
// continue ;
22601: GO 22483
// end ; HackCheckCapturedStatus ( i ) ;
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL 23152 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22612: LD_ADDR_VAR 0 2
22616: PUSH
22617: LD_INT 81
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 255
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 33
22636: PUSH
22637: LD_INT 3
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 91
22646: PUSH
22647: LD_VAR 0 1
22651: PUSH
22652: LD_EXP 90
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 50
22664: PUSH
22665: EMPTY
22666: LIST
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: PPUSH
22674: CALL_OW 69
22678: ST_TO_ADDR
// if not tmp then
22679: LD_VAR 0 2
22683: NOT
22684: IFFALSE 22688
// continue ;
22686: GO 22483
// HackLink ( i , tmp ) ;
22688: LD_VAR 0 1
22692: PPUSH
22693: LD_VAR 0 2
22697: PPUSH
22698: CALL 22845 0 2
// end ;
22702: GO 22483
22704: POP
22705: POP
// end ;
22706: PPOPN 2
22708: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22709: LD_INT 0
22711: PPUSH
22712: PPUSH
22713: PPUSH
// if not hack in hackTanks then
22714: LD_VAR 0 1
22718: PUSH
22719: LD_EXP 87
22723: IN
22724: NOT
22725: IFFALSE 22729
// exit ;
22727: GO 22840
// index := GetElementIndex ( hackTanks , hack ) ;
22729: LD_ADDR_VAR 0 4
22733: PUSH
22734: LD_EXP 87
22738: PPUSH
22739: LD_VAR 0 1
22743: PPUSH
22744: CALL 30504 0 2
22748: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22749: LD_EXP 88
22753: PUSH
22754: LD_VAR 0 4
22758: ARRAY
22759: IFFALSE 22840
// begin for i in hackTanksCaptured [ index ] do
22761: LD_ADDR_VAR 0 3
22765: PUSH
22766: LD_EXP 88
22770: PUSH
22771: LD_VAR 0 4
22775: ARRAY
22776: PUSH
22777: FOR_IN
22778: IFFALSE 22804
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22780: LD_VAR 0 3
22784: PUSH
22785: LD_INT 1
22787: ARRAY
22788: PPUSH
22789: LD_VAR 0 3
22793: PUSH
22794: LD_INT 2
22796: ARRAY
22797: PPUSH
22798: CALL_OW 235
22802: GO 22777
22804: POP
22805: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22806: LD_ADDR_EXP 88
22810: PUSH
22811: LD_EXP 88
22815: PPUSH
22816: LD_VAR 0 4
22820: PPUSH
22821: EMPTY
22822: PPUSH
22823: CALL_OW 1
22827: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22828: LD_VAR 0 1
22832: PPUSH
22833: LD_INT 0
22835: PPUSH
22836: CALL_OW 505
// end ; end ;
22840: LD_VAR 0 2
22844: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22845: LD_INT 0
22847: PPUSH
22848: PPUSH
22849: PPUSH
// if not hack in hackTanks or not vehicles then
22850: LD_VAR 0 1
22854: PUSH
22855: LD_EXP 87
22859: IN
22860: NOT
22861: PUSH
22862: LD_VAR 0 2
22866: NOT
22867: OR
22868: IFFALSE 22872
// exit ;
22870: GO 23147
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22872: LD_ADDR_VAR 0 2
22876: PUSH
22877: LD_VAR 0 1
22881: PPUSH
22882: LD_VAR 0 2
22886: PPUSH
22887: LD_INT 1
22889: PPUSH
22890: LD_INT 1
22892: PPUSH
22893: CALL 31154 0 4
22897: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22898: LD_ADDR_VAR 0 5
22902: PUSH
22903: LD_EXP 87
22907: PPUSH
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL 30504 0 2
22917: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22918: LD_EXP 88
22922: PUSH
22923: LD_VAR 0 5
22927: ARRAY
22928: PUSH
22929: LD_EXP 89
22933: LESS
22934: IFFALSE 23123
// begin for i := 1 to vehicles do
22936: LD_ADDR_VAR 0 4
22940: PUSH
22941: DOUBLE
22942: LD_INT 1
22944: DEC
22945: ST_TO_ADDR
22946: LD_VAR 0 2
22950: PUSH
22951: FOR_TO
22952: IFFALSE 23121
// begin if hackTanksCaptured [ index ] = hackLimit then
22954: LD_EXP 88
22958: PUSH
22959: LD_VAR 0 5
22963: ARRAY
22964: PUSH
22965: LD_EXP 89
22969: EQUAL
22970: IFFALSE 22974
// break ;
22972: GO 23121
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22974: LD_ADDR_EXP 91
22978: PUSH
22979: LD_EXP 91
22983: PPUSH
22984: LD_VAR 0 5
22988: PPUSH
22989: LD_EXP 91
22993: PUSH
22994: LD_VAR 0 5
22998: ARRAY
22999: PUSH
23000: LD_INT 1
23002: PLUS
23003: PPUSH
23004: CALL_OW 1
23008: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23009: LD_ADDR_EXP 88
23013: PUSH
23014: LD_EXP 88
23018: PPUSH
23019: LD_VAR 0 5
23023: PUSH
23024: LD_EXP 88
23028: PUSH
23029: LD_VAR 0 5
23033: ARRAY
23034: PUSH
23035: LD_INT 1
23037: PLUS
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PPUSH
23043: LD_VAR 0 2
23047: PUSH
23048: LD_VAR 0 4
23052: ARRAY
23053: PUSH
23054: LD_VAR 0 2
23058: PUSH
23059: LD_VAR 0 4
23063: ARRAY
23064: PPUSH
23065: CALL_OW 255
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PPUSH
23074: CALL 30719 0 3
23078: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23079: LD_VAR 0 2
23083: PUSH
23084: LD_VAR 0 4
23088: ARRAY
23089: PPUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 255
23099: PPUSH
23100: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23104: LD_VAR 0 2
23108: PUSH
23109: LD_VAR 0 4
23113: ARRAY
23114: PPUSH
23115: CALL_OW 141
// end ;
23119: GO 22951
23121: POP
23122: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23123: LD_VAR 0 1
23127: PPUSH
23128: LD_EXP 88
23132: PUSH
23133: LD_VAR 0 5
23137: ARRAY
23138: PUSH
23139: LD_INT 0
23141: PLUS
23142: PPUSH
23143: CALL_OW 505
// end ;
23147: LD_VAR 0 3
23151: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
// if not hack in hackTanks then
23158: LD_VAR 0 1
23162: PUSH
23163: LD_EXP 87
23167: IN
23168: NOT
23169: IFFALSE 23173
// exit ;
23171: GO 23413
// index := GetElementIndex ( hackTanks , hack ) ;
23173: LD_ADDR_VAR 0 4
23177: PUSH
23178: LD_EXP 87
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL 30504 0 2
23192: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: DOUBLE
23199: LD_EXP 88
23203: PUSH
23204: LD_VAR 0 4
23208: ARRAY
23209: INC
23210: ST_TO_ADDR
23211: LD_INT 1
23213: PUSH
23214: FOR_DOWNTO
23215: IFFALSE 23387
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23217: LD_ADDR_VAR 0 5
23221: PUSH
23222: LD_EXP 88
23226: PUSH
23227: LD_VAR 0 4
23231: ARRAY
23232: PUSH
23233: LD_VAR 0 3
23237: ARRAY
23238: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23239: LD_VAR 0 5
23243: PUSH
23244: LD_INT 1
23246: ARRAY
23247: PPUSH
23248: CALL_OW 302
23252: NOT
23253: PUSH
23254: LD_VAR 0 5
23258: PUSH
23259: LD_INT 1
23261: ARRAY
23262: PPUSH
23263: CALL_OW 255
23267: PUSH
23268: LD_VAR 0 1
23272: PPUSH
23273: CALL_OW 255
23277: NONEQUAL
23278: OR
23279: IFFALSE 23385
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23281: LD_VAR 0 5
23285: PUSH
23286: LD_INT 1
23288: ARRAY
23289: PPUSH
23290: CALL_OW 305
23294: PUSH
23295: LD_VAR 0 5
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: PPUSH
23304: CALL_OW 255
23308: PUSH
23309: LD_VAR 0 1
23313: PPUSH
23314: CALL_OW 255
23318: EQUAL
23319: AND
23320: IFFALSE 23344
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23322: LD_VAR 0 5
23326: PUSH
23327: LD_INT 1
23329: ARRAY
23330: PPUSH
23331: LD_VAR 0 5
23335: PUSH
23336: LD_INT 2
23338: ARRAY
23339: PPUSH
23340: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23344: LD_ADDR_EXP 88
23348: PUSH
23349: LD_EXP 88
23353: PPUSH
23354: LD_VAR 0 4
23358: PPUSH
23359: LD_EXP 88
23363: PUSH
23364: LD_VAR 0 4
23368: ARRAY
23369: PPUSH
23370: LD_VAR 0 3
23374: PPUSH
23375: CALL_OW 3
23379: PPUSH
23380: CALL_OW 1
23384: ST_TO_ADDR
// end ; end ;
23385: GO 23214
23387: POP
23388: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23389: LD_VAR 0 1
23393: PPUSH
23394: LD_EXP 88
23398: PUSH
23399: LD_VAR 0 4
23403: ARRAY
23404: PUSH
23405: LD_INT 0
23407: PLUS
23408: PPUSH
23409: CALL_OW 505
// end ;
23413: LD_VAR 0 2
23417: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23418: LD_INT 0
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
// if not hack in hackTanks then
23424: LD_VAR 0 1
23428: PUSH
23429: LD_EXP 87
23433: IN
23434: NOT
23435: IFFALSE 23439
// exit ;
23437: GO 23524
// index := GetElementIndex ( hackTanks , hack ) ;
23439: LD_ADDR_VAR 0 5
23443: PUSH
23444: LD_EXP 87
23448: PPUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL 30504 0 2
23458: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23459: LD_ADDR_VAR 0 4
23463: PUSH
23464: DOUBLE
23465: LD_INT 1
23467: DEC
23468: ST_TO_ADDR
23469: LD_EXP 88
23473: PUSH
23474: LD_VAR 0 5
23478: ARRAY
23479: PUSH
23480: FOR_TO
23481: IFFALSE 23522
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23483: LD_EXP 88
23487: PUSH
23488: LD_VAR 0 5
23492: ARRAY
23493: PUSH
23494: LD_VAR 0 4
23498: ARRAY
23499: PUSH
23500: LD_INT 1
23502: ARRAY
23503: PUSH
23504: LD_VAR 0 2
23508: EQUAL
23509: IFFALSE 23520
// KillUnit ( vehicle ) ;
23511: LD_VAR 0 2
23515: PPUSH
23516: CALL_OW 66
23520: GO 23480
23522: POP
23523: POP
// end ;
23524: LD_VAR 0 3
23528: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23529: LD_EXP 92
23533: NOT
23534: IFFALSE 23569
23536: GO 23538
23538: DISABLE
// begin initMiner := true ;
23539: LD_ADDR_EXP 92
23543: PUSH
23544: LD_INT 1
23546: ST_TO_ADDR
// minersList := [ ] ;
23547: LD_ADDR_EXP 93
23551: PUSH
23552: EMPTY
23553: ST_TO_ADDR
// minerMinesList := [ ] ;
23554: LD_ADDR_EXP 94
23558: PUSH
23559: EMPTY
23560: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23561: LD_ADDR_EXP 95
23565: PUSH
23566: LD_INT 5
23568: ST_TO_ADDR
// end ;
23569: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23570: LD_EXP 92
23574: PUSH
23575: LD_INT 34
23577: PUSH
23578: LD_INT 81
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PPUSH
23585: CALL_OW 69
23589: AND
23590: IFFALSE 24051
23592: GO 23594
23594: DISABLE
23595: LD_INT 0
23597: PPUSH
23598: PPUSH
23599: PPUSH
23600: PPUSH
// begin enable ;
23601: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23602: LD_ADDR_VAR 0 1
23606: PUSH
23607: LD_INT 34
23609: PUSH
23610: LD_INT 81
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PPUSH
23617: CALL_OW 69
23621: PUSH
23622: FOR_IN
23623: IFFALSE 23695
// begin if not i in minersList then
23625: LD_VAR 0 1
23629: PUSH
23630: LD_EXP 93
23634: IN
23635: NOT
23636: IFFALSE 23693
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23638: LD_ADDR_EXP 93
23642: PUSH
23643: LD_EXP 93
23647: PPUSH
23648: LD_EXP 93
23652: PUSH
23653: LD_INT 1
23655: PLUS
23656: PPUSH
23657: LD_VAR 0 1
23661: PPUSH
23662: CALL_OW 1
23666: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23667: LD_ADDR_EXP 94
23671: PUSH
23672: LD_EXP 94
23676: PPUSH
23677: LD_EXP 94
23681: PUSH
23682: LD_INT 1
23684: PLUS
23685: PPUSH
23686: EMPTY
23687: PPUSH
23688: CALL_OW 1
23692: ST_TO_ADDR
// end end ;
23693: GO 23622
23695: POP
23696: POP
// for i := minerMinesList downto 1 do
23697: LD_ADDR_VAR 0 1
23701: PUSH
23702: DOUBLE
23703: LD_EXP 94
23707: INC
23708: ST_TO_ADDR
23709: LD_INT 1
23711: PUSH
23712: FOR_DOWNTO
23713: IFFALSE 24049
// begin if IsLive ( minersList [ i ] ) then
23715: LD_EXP 93
23719: PUSH
23720: LD_VAR 0 1
23724: ARRAY
23725: PPUSH
23726: CALL_OW 300
23730: IFFALSE 23758
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23732: LD_EXP 93
23736: PUSH
23737: LD_VAR 0 1
23741: ARRAY
23742: PPUSH
23743: LD_EXP 94
23747: PUSH
23748: LD_VAR 0 1
23752: ARRAY
23753: PPUSH
23754: CALL_OW 505
// if not minerMinesList [ i ] then
23758: LD_EXP 94
23762: PUSH
23763: LD_VAR 0 1
23767: ARRAY
23768: NOT
23769: IFFALSE 23773
// continue ;
23771: GO 23712
// for j := minerMinesList [ i ] downto 1 do
23773: LD_ADDR_VAR 0 2
23777: PUSH
23778: DOUBLE
23779: LD_EXP 94
23783: PUSH
23784: LD_VAR 0 1
23788: ARRAY
23789: INC
23790: ST_TO_ADDR
23791: LD_INT 1
23793: PUSH
23794: FOR_DOWNTO
23795: IFFALSE 24045
// begin side := GetSide ( minersList [ i ] ) ;
23797: LD_ADDR_VAR 0 3
23801: PUSH
23802: LD_EXP 93
23806: PUSH
23807: LD_VAR 0 1
23811: ARRAY
23812: PPUSH
23813: CALL_OW 255
23817: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23818: LD_ADDR_VAR 0 4
23822: PUSH
23823: LD_EXP 94
23827: PUSH
23828: LD_VAR 0 1
23832: ARRAY
23833: PUSH
23834: LD_VAR 0 2
23838: ARRAY
23839: PUSH
23840: LD_INT 1
23842: ARRAY
23843: PPUSH
23844: LD_EXP 94
23848: PUSH
23849: LD_VAR 0 1
23853: ARRAY
23854: PUSH
23855: LD_VAR 0 2
23859: ARRAY
23860: PUSH
23861: LD_INT 2
23863: ARRAY
23864: PPUSH
23865: CALL_OW 428
23869: ST_TO_ADDR
// if not tmp then
23870: LD_VAR 0 4
23874: NOT
23875: IFFALSE 23879
// continue ;
23877: GO 23794
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23879: LD_VAR 0 4
23883: PUSH
23884: LD_INT 81
23886: PUSH
23887: LD_VAR 0 3
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PPUSH
23896: CALL_OW 69
23900: IN
23901: PUSH
23902: LD_EXP 94
23906: PUSH
23907: LD_VAR 0 1
23911: ARRAY
23912: PUSH
23913: LD_VAR 0 2
23917: ARRAY
23918: PUSH
23919: LD_INT 1
23921: ARRAY
23922: PPUSH
23923: LD_EXP 94
23927: PUSH
23928: LD_VAR 0 1
23932: ARRAY
23933: PUSH
23934: LD_VAR 0 2
23938: ARRAY
23939: PUSH
23940: LD_INT 2
23942: ARRAY
23943: PPUSH
23944: CALL_OW 458
23948: AND
23949: IFFALSE 24043
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23951: LD_EXP 94
23955: PUSH
23956: LD_VAR 0 1
23960: ARRAY
23961: PUSH
23962: LD_VAR 0 2
23966: ARRAY
23967: PUSH
23968: LD_INT 1
23970: ARRAY
23971: PPUSH
23972: LD_EXP 94
23976: PUSH
23977: LD_VAR 0 1
23981: ARRAY
23982: PUSH
23983: LD_VAR 0 2
23987: ARRAY
23988: PUSH
23989: LD_INT 2
23991: ARRAY
23992: PPUSH
23993: LD_VAR 0 3
23997: PPUSH
23998: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24002: LD_ADDR_EXP 94
24006: PUSH
24007: LD_EXP 94
24011: PPUSH
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 94
24021: PUSH
24022: LD_VAR 0 1
24026: ARRAY
24027: PPUSH
24028: LD_VAR 0 2
24032: PPUSH
24033: CALL_OW 3
24037: PPUSH
24038: CALL_OW 1
24042: ST_TO_ADDR
// end ; end ;
24043: GO 23794
24045: POP
24046: POP
// end ;
24047: GO 23712
24049: POP
24050: POP
// end ;
24051: PPOPN 4
24053: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24054: LD_INT 0
24056: PPUSH
24057: PPUSH
// result := false ;
24058: LD_ADDR_VAR 0 4
24062: PUSH
24063: LD_INT 0
24065: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24066: LD_VAR 0 1
24070: PPUSH
24071: CALL_OW 264
24075: PUSH
24076: LD_INT 81
24078: EQUAL
24079: NOT
24080: IFFALSE 24084
// exit ;
24082: GO 24324
// index := GetElementIndex ( minersList , unit ) ;
24084: LD_ADDR_VAR 0 5
24088: PUSH
24089: LD_EXP 93
24093: PPUSH
24094: LD_VAR 0 1
24098: PPUSH
24099: CALL 30504 0 2
24103: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24104: LD_EXP 94
24108: PUSH
24109: LD_VAR 0 5
24113: ARRAY
24114: PUSH
24115: LD_EXP 95
24119: GREATEREQUAL
24120: IFFALSE 24124
// exit ;
24122: GO 24324
// ComMoveXY ( unit , x , y ) ;
24124: LD_VAR 0 1
24128: PPUSH
24129: LD_VAR 0 2
24133: PPUSH
24134: LD_VAR 0 3
24138: PPUSH
24139: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24143: LD_INT 35
24145: PPUSH
24146: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24150: LD_VAR 0 1
24154: PPUSH
24155: LD_VAR 0 2
24159: PPUSH
24160: LD_VAR 0 3
24164: PPUSH
24165: CALL 61868 0 3
24169: NOT
24170: PUSH
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 314
24180: AND
24181: IFFALSE 24185
// exit ;
24183: GO 24324
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24185: LD_VAR 0 2
24189: PPUSH
24190: LD_VAR 0 3
24194: PPUSH
24195: CALL_OW 428
24199: PUSH
24200: LD_VAR 0 1
24204: EQUAL
24205: PUSH
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 314
24215: NOT
24216: AND
24217: IFFALSE 24143
// PlaySoundXY ( x , y , PlantMine ) ;
24219: LD_VAR 0 2
24223: PPUSH
24224: LD_VAR 0 3
24228: PPUSH
24229: LD_STRING PlantMine
24231: PPUSH
24232: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24236: LD_VAR 0 2
24240: PPUSH
24241: LD_VAR 0 3
24245: PPUSH
24246: LD_VAR 0 1
24250: PPUSH
24251: CALL_OW 255
24255: PPUSH
24256: LD_INT 0
24258: PPUSH
24259: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24263: LD_ADDR_EXP 94
24267: PUSH
24268: LD_EXP 94
24272: PPUSH
24273: LD_VAR 0 5
24277: PUSH
24278: LD_EXP 94
24282: PUSH
24283: LD_VAR 0 5
24287: ARRAY
24288: PUSH
24289: LD_INT 1
24291: PLUS
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PPUSH
24297: LD_VAR 0 2
24301: PUSH
24302: LD_VAR 0 3
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL 30719 0 3
24315: ST_TO_ADDR
// result := true ;
24316: LD_ADDR_VAR 0 4
24320: PUSH
24321: LD_INT 1
24323: ST_TO_ADDR
// end ;
24324: LD_VAR 0 4
24328: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24329: LD_INT 0
24331: PPUSH
24332: PPUSH
24333: PPUSH
// if not unit in minersList then
24334: LD_VAR 0 1
24338: PUSH
24339: LD_EXP 93
24343: IN
24344: NOT
24345: IFFALSE 24349
// exit ;
24347: GO 24741
// index := GetElementIndex ( minersList , unit ) ;
24349: LD_ADDR_VAR 0 6
24353: PUSH
24354: LD_EXP 93
24358: PPUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL 30504 0 2
24368: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24369: LD_ADDR_VAR 0 5
24373: PUSH
24374: DOUBLE
24375: LD_EXP 94
24379: PUSH
24380: LD_VAR 0 6
24384: ARRAY
24385: INC
24386: ST_TO_ADDR
24387: LD_INT 1
24389: PUSH
24390: FOR_DOWNTO
24391: IFFALSE 24552
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24393: LD_EXP 94
24397: PUSH
24398: LD_VAR 0 6
24402: ARRAY
24403: PUSH
24404: LD_VAR 0 5
24408: ARRAY
24409: PUSH
24410: LD_INT 1
24412: ARRAY
24413: PUSH
24414: LD_VAR 0 2
24418: EQUAL
24419: PUSH
24420: LD_EXP 94
24424: PUSH
24425: LD_VAR 0 6
24429: ARRAY
24430: PUSH
24431: LD_VAR 0 5
24435: ARRAY
24436: PUSH
24437: LD_INT 2
24439: ARRAY
24440: PUSH
24441: LD_VAR 0 3
24445: EQUAL
24446: AND
24447: IFFALSE 24550
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24449: LD_EXP 94
24453: PUSH
24454: LD_VAR 0 6
24458: ARRAY
24459: PUSH
24460: LD_VAR 0 5
24464: ARRAY
24465: PUSH
24466: LD_INT 1
24468: ARRAY
24469: PPUSH
24470: LD_EXP 94
24474: PUSH
24475: LD_VAR 0 6
24479: ARRAY
24480: PUSH
24481: LD_VAR 0 5
24485: ARRAY
24486: PUSH
24487: LD_INT 2
24489: ARRAY
24490: PPUSH
24491: LD_VAR 0 1
24495: PPUSH
24496: CALL_OW 255
24500: PPUSH
24501: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24505: LD_ADDR_EXP 94
24509: PUSH
24510: LD_EXP 94
24514: PPUSH
24515: LD_VAR 0 6
24519: PPUSH
24520: LD_EXP 94
24524: PUSH
24525: LD_VAR 0 6
24529: ARRAY
24530: PPUSH
24531: LD_VAR 0 5
24535: PPUSH
24536: CALL_OW 3
24540: PPUSH
24541: CALL_OW 1
24545: ST_TO_ADDR
// exit ;
24546: POP
24547: POP
24548: GO 24741
// end ; end ;
24550: GO 24390
24552: POP
24553: POP
// for i := minerMinesList [ index ] downto 1 do
24554: LD_ADDR_VAR 0 5
24558: PUSH
24559: DOUBLE
24560: LD_EXP 94
24564: PUSH
24565: LD_VAR 0 6
24569: ARRAY
24570: INC
24571: ST_TO_ADDR
24572: LD_INT 1
24574: PUSH
24575: FOR_DOWNTO
24576: IFFALSE 24739
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24578: LD_EXP 94
24582: PUSH
24583: LD_VAR 0 6
24587: ARRAY
24588: PUSH
24589: LD_VAR 0 5
24593: ARRAY
24594: PUSH
24595: LD_INT 1
24597: ARRAY
24598: PPUSH
24599: LD_EXP 94
24603: PUSH
24604: LD_VAR 0 6
24608: ARRAY
24609: PUSH
24610: LD_VAR 0 5
24614: ARRAY
24615: PUSH
24616: LD_INT 2
24618: ARRAY
24619: PPUSH
24620: LD_VAR 0 2
24624: PPUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: CALL_OW 298
24634: PUSH
24635: LD_INT 6
24637: LESS
24638: IFFALSE 24737
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24640: LD_EXP 94
24644: PUSH
24645: LD_VAR 0 6
24649: ARRAY
24650: PUSH
24651: LD_VAR 0 5
24655: ARRAY
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: PPUSH
24661: LD_EXP 94
24665: PUSH
24666: LD_VAR 0 6
24670: ARRAY
24671: PUSH
24672: LD_VAR 0 5
24676: ARRAY
24677: PUSH
24678: LD_INT 2
24680: ARRAY
24681: PPUSH
24682: LD_VAR 0 1
24686: PPUSH
24687: CALL_OW 255
24691: PPUSH
24692: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24696: LD_ADDR_EXP 94
24700: PUSH
24701: LD_EXP 94
24705: PPUSH
24706: LD_VAR 0 6
24710: PPUSH
24711: LD_EXP 94
24715: PUSH
24716: LD_VAR 0 6
24720: ARRAY
24721: PPUSH
24722: LD_VAR 0 5
24726: PPUSH
24727: CALL_OW 3
24731: PPUSH
24732: CALL_OW 1
24736: ST_TO_ADDR
// end ; end ;
24737: GO 24575
24739: POP
24740: POP
// end ;
24741: LD_VAR 0 4
24745: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24746: LD_INT 0
24748: PPUSH
24749: PPUSH
24750: PPUSH
24751: PPUSH
24752: PPUSH
24753: PPUSH
24754: PPUSH
24755: PPUSH
24756: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24757: LD_VAR 0 1
24761: PPUSH
24762: CALL_OW 264
24766: PUSH
24767: LD_INT 81
24769: EQUAL
24770: NOT
24771: PUSH
24772: LD_VAR 0 1
24776: PUSH
24777: LD_EXP 93
24781: IN
24782: NOT
24783: OR
24784: IFFALSE 24788
// exit ;
24786: GO 25110
// index := GetElementIndex ( minersList , unit ) ;
24788: LD_ADDR_VAR 0 6
24792: PUSH
24793: LD_EXP 93
24797: PPUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL 30504 0 2
24807: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24808: LD_ADDR_VAR 0 8
24812: PUSH
24813: LD_EXP 95
24817: PUSH
24818: LD_EXP 94
24822: PUSH
24823: LD_VAR 0 6
24827: ARRAY
24828: MINUS
24829: ST_TO_ADDR
// if not minesFreeAmount then
24830: LD_VAR 0 8
24834: NOT
24835: IFFALSE 24839
// exit ;
24837: GO 25110
// tmp := [ ] ;
24839: LD_ADDR_VAR 0 7
24843: PUSH
24844: EMPTY
24845: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24846: LD_ADDR_VAR 0 5
24850: PUSH
24851: DOUBLE
24852: LD_INT 1
24854: DEC
24855: ST_TO_ADDR
24856: LD_VAR 0 8
24860: PUSH
24861: FOR_TO
24862: IFFALSE 25057
// begin _d := rand ( 0 , 5 ) ;
24864: LD_ADDR_VAR 0 11
24868: PUSH
24869: LD_INT 0
24871: PPUSH
24872: LD_INT 5
24874: PPUSH
24875: CALL_OW 12
24879: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24880: LD_ADDR_VAR 0 12
24884: PUSH
24885: LD_INT 2
24887: PPUSH
24888: LD_INT 6
24890: PPUSH
24891: CALL_OW 12
24895: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24896: LD_ADDR_VAR 0 9
24900: PUSH
24901: LD_VAR 0 2
24905: PPUSH
24906: LD_VAR 0 11
24910: PPUSH
24911: LD_VAR 0 12
24915: PPUSH
24916: CALL_OW 272
24920: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24921: LD_ADDR_VAR 0 10
24925: PUSH
24926: LD_VAR 0 3
24930: PPUSH
24931: LD_VAR 0 11
24935: PPUSH
24936: LD_VAR 0 12
24940: PPUSH
24941: CALL_OW 273
24945: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24946: LD_VAR 0 9
24950: PPUSH
24951: LD_VAR 0 10
24955: PPUSH
24956: CALL_OW 488
24960: PUSH
24961: LD_VAR 0 9
24965: PUSH
24966: LD_VAR 0 10
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_VAR 0 7
24979: IN
24980: NOT
24981: AND
24982: PUSH
24983: LD_VAR 0 9
24987: PPUSH
24988: LD_VAR 0 10
24992: PPUSH
24993: CALL_OW 458
24997: NOT
24998: AND
24999: IFFALSE 25041
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25001: LD_ADDR_VAR 0 7
25005: PUSH
25006: LD_VAR 0 7
25010: PPUSH
25011: LD_VAR 0 7
25015: PUSH
25016: LD_INT 1
25018: PLUS
25019: PPUSH
25020: LD_VAR 0 9
25024: PUSH
25025: LD_VAR 0 10
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PPUSH
25034: CALL_OW 1
25038: ST_TO_ADDR
25039: GO 25055
// i := i - 1 ;
25041: LD_ADDR_VAR 0 5
25045: PUSH
25046: LD_VAR 0 5
25050: PUSH
25051: LD_INT 1
25053: MINUS
25054: ST_TO_ADDR
// end ;
25055: GO 24861
25057: POP
25058: POP
// for i in tmp do
25059: LD_ADDR_VAR 0 5
25063: PUSH
25064: LD_VAR 0 7
25068: PUSH
25069: FOR_IN
25070: IFFALSE 25108
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25072: LD_VAR 0 1
25076: PPUSH
25077: LD_VAR 0 5
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: PPUSH
25086: LD_VAR 0 5
25090: PUSH
25091: LD_INT 2
25093: ARRAY
25094: PPUSH
25095: CALL 24054 0 3
25099: NOT
25100: IFFALSE 25106
// exit ;
25102: POP
25103: POP
25104: GO 25110
25106: GO 25069
25108: POP
25109: POP
// end ;
25110: LD_VAR 0 4
25114: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25115: LD_INT 0
25117: PPUSH
25118: PPUSH
25119: PPUSH
25120: PPUSH
25121: PPUSH
25122: PPUSH
25123: PPUSH
// if not GetClass ( unit ) = class_sniper then
25124: LD_VAR 0 1
25128: PPUSH
25129: CALL_OW 257
25133: PUSH
25134: LD_INT 5
25136: EQUAL
25137: NOT
25138: IFFALSE 25142
// exit ;
25140: GO 25530
// dist := 8 ;
25142: LD_ADDR_VAR 0 5
25146: PUSH
25147: LD_INT 8
25149: ST_TO_ADDR
// viewRange := 12 ;
25150: LD_ADDR_VAR 0 7
25154: PUSH
25155: LD_INT 12
25157: ST_TO_ADDR
// side := GetSide ( unit ) ;
25158: LD_ADDR_VAR 0 6
25162: PUSH
25163: LD_VAR 0 1
25167: PPUSH
25168: CALL_OW 255
25172: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25173: LD_INT 61
25175: PPUSH
25176: LD_VAR 0 6
25180: PPUSH
25181: CALL_OW 321
25185: PUSH
25186: LD_INT 2
25188: EQUAL
25189: IFFALSE 25199
// viewRange := 16 ;
25191: LD_ADDR_VAR 0 7
25195: PUSH
25196: LD_INT 16
25198: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25199: LD_VAR 0 1
25203: PPUSH
25204: LD_VAR 0 2
25208: PPUSH
25209: LD_VAR 0 3
25213: PPUSH
25214: CALL_OW 297
25218: PUSH
25219: LD_VAR 0 5
25223: GREATER
25224: IFFALSE 25303
// begin ComMoveXY ( unit , x , y ) ;
25226: LD_VAR 0 1
25230: PPUSH
25231: LD_VAR 0 2
25235: PPUSH
25236: LD_VAR 0 3
25240: PPUSH
25241: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25245: LD_INT 35
25247: PPUSH
25248: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25252: LD_VAR 0 1
25256: PPUSH
25257: LD_VAR 0 2
25261: PPUSH
25262: LD_VAR 0 3
25266: PPUSH
25267: CALL 61868 0 3
25271: NOT
25272: IFFALSE 25276
// exit ;
25274: GO 25530
// until GetDistUnitXY ( unit , x , y ) < dist ;
25276: LD_VAR 0 1
25280: PPUSH
25281: LD_VAR 0 2
25285: PPUSH
25286: LD_VAR 0 3
25290: PPUSH
25291: CALL_OW 297
25295: PUSH
25296: LD_VAR 0 5
25300: LESS
25301: IFFALSE 25245
// end ; ComTurnXY ( unit , x , y ) ;
25303: LD_VAR 0 1
25307: PPUSH
25308: LD_VAR 0 2
25312: PPUSH
25313: LD_VAR 0 3
25317: PPUSH
25318: CALL_OW 118
// wait ( 5 ) ;
25322: LD_INT 5
25324: PPUSH
25325: CALL_OW 67
// _d := GetDir ( unit ) ;
25329: LD_ADDR_VAR 0 10
25333: PUSH
25334: LD_VAR 0 1
25338: PPUSH
25339: CALL_OW 254
25343: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25344: LD_ADDR_VAR 0 8
25348: PUSH
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 250
25358: PPUSH
25359: LD_VAR 0 10
25363: PPUSH
25364: LD_VAR 0 5
25368: PPUSH
25369: CALL_OW 272
25373: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25374: LD_ADDR_VAR 0 9
25378: PUSH
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL_OW 251
25388: PPUSH
25389: LD_VAR 0 10
25393: PPUSH
25394: LD_VAR 0 5
25398: PPUSH
25399: CALL_OW 273
25403: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25404: LD_VAR 0 8
25408: PPUSH
25409: LD_VAR 0 9
25413: PPUSH
25414: CALL_OW 488
25418: NOT
25419: IFFALSE 25423
// exit ;
25421: GO 25530
// ComAnimCustom ( unit , 1 ) ;
25423: LD_VAR 0 1
25427: PPUSH
25428: LD_INT 1
25430: PPUSH
25431: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25435: LD_VAR 0 8
25439: PPUSH
25440: LD_VAR 0 9
25444: PPUSH
25445: LD_VAR 0 6
25449: PPUSH
25450: LD_VAR 0 7
25454: PPUSH
25455: CALL_OW 330
// repeat wait ( 1 ) ;
25459: LD_INT 1
25461: PPUSH
25462: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25466: LD_VAR 0 1
25470: PPUSH
25471: CALL_OW 316
25475: PUSH
25476: LD_VAR 0 1
25480: PPUSH
25481: CALL_OW 314
25485: OR
25486: PUSH
25487: LD_VAR 0 1
25491: PPUSH
25492: CALL_OW 302
25496: NOT
25497: OR
25498: PUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL_OW 301
25508: OR
25509: IFFALSE 25459
// RemoveSeeing ( _x , _y , side ) ;
25511: LD_VAR 0 8
25515: PPUSH
25516: LD_VAR 0 9
25520: PPUSH
25521: LD_VAR 0 6
25525: PPUSH
25526: CALL_OW 331
// end ; end_of_file
25530: LD_VAR 0 4
25534: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25535: LD_VAR 0 1
25539: PUSH
25540: LD_INT 200
25542: DOUBLE
25543: GREATEREQUAL
25544: IFFALSE 25552
25546: LD_INT 299
25548: DOUBLE
25549: LESSEQUAL
25550: IFTRUE 25554
25552: GO 25586
25554: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25555: LD_VAR 0 1
25559: PPUSH
25560: LD_VAR 0 2
25564: PPUSH
25565: LD_VAR 0 3
25569: PPUSH
25570: LD_VAR 0 4
25574: PPUSH
25575: LD_VAR 0 5
25579: PPUSH
25580: CALL 21622 0 5
25584: GO 25663
25586: LD_INT 300
25588: DOUBLE
25589: GREATEREQUAL
25590: IFFALSE 25598
25592: LD_INT 399
25594: DOUBLE
25595: LESSEQUAL
25596: IFTRUE 25600
25598: GO 25662
25600: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25601: LD_VAR 0 1
25605: PPUSH
25606: LD_VAR 0 2
25610: PPUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: LD_VAR 0 4
25620: PPUSH
25621: LD_VAR 0 5
25625: PPUSH
25626: LD_VAR 0 6
25630: PPUSH
25631: LD_VAR 0 7
25635: PPUSH
25636: LD_VAR 0 8
25640: PPUSH
25641: LD_VAR 0 9
25645: PPUSH
25646: LD_VAR 0 10
25650: PPUSH
25651: LD_VAR 0 11
25655: PPUSH
25656: CALL 17947 0 11
25660: GO 25663
25662: POP
// end ;
25663: PPOPN 11
25665: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25666: LD_VAR 0 1
25670: PPUSH
25671: LD_VAR 0 2
25675: PPUSH
25676: LD_VAR 0 3
25680: PPUSH
25681: LD_VAR 0 4
25685: PPUSH
25686: LD_VAR 0 5
25690: PPUSH
25691: CALL 21358 0 5
// end ; end_of_file
25695: PPOPN 5
25697: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: LD_VAR 0 4
25717: PPUSH
25718: LD_VAR 0 5
25722: PPUSH
25723: LD_VAR 0 6
25727: PPUSH
25728: CALL 5599 0 6
// end ;
25732: PPOPN 6
25734: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
25735: LD_INT 0
25737: PPUSH
// begin if not units then
25738: LD_VAR 0 1
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25747
// end ;
25747: PPOPN 7
25749: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
25750: CALL 5503 0 0
// end ; end_of_file end_of_file
25754: PPOPN 1
25756: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25757: LD_INT 0
25759: PPUSH
25760: PPUSH
// if exist_mode then
25761: LD_VAR 0 2
25765: IFFALSE 25790
// unit := CreateCharacter ( prefix & ident ) else
25767: LD_ADDR_VAR 0 5
25771: PUSH
25772: LD_VAR 0 3
25776: PUSH
25777: LD_VAR 0 1
25781: STR
25782: PPUSH
25783: CALL_OW 34
25787: ST_TO_ADDR
25788: GO 25805
// unit := NewCharacter ( ident ) ;
25790: LD_ADDR_VAR 0 5
25794: PUSH
25795: LD_VAR 0 1
25799: PPUSH
25800: CALL_OW 25
25804: ST_TO_ADDR
// result := unit ;
25805: LD_ADDR_VAR 0 4
25809: PUSH
25810: LD_VAR 0 5
25814: ST_TO_ADDR
// end ;
25815: LD_VAR 0 4
25819: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25820: LD_INT 0
25822: PPUSH
25823: PPUSH
// if not side or not nation then
25824: LD_VAR 0 1
25828: NOT
25829: PUSH
25830: LD_VAR 0 2
25834: NOT
25835: OR
25836: IFFALSE 25840
// exit ;
25838: GO 26608
// case nation of nation_american :
25840: LD_VAR 0 2
25844: PUSH
25845: LD_INT 1
25847: DOUBLE
25848: EQUAL
25849: IFTRUE 25853
25851: GO 26067
25853: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25854: LD_ADDR_VAR 0 4
25858: PUSH
25859: LD_INT 35
25861: PUSH
25862: LD_INT 45
25864: PUSH
25865: LD_INT 46
25867: PUSH
25868: LD_INT 47
25870: PUSH
25871: LD_INT 82
25873: PUSH
25874: LD_INT 83
25876: PUSH
25877: LD_INT 84
25879: PUSH
25880: LD_INT 85
25882: PUSH
25883: LD_INT 86
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 6
25894: PUSH
25895: LD_INT 15
25897: PUSH
25898: LD_INT 16
25900: PUSH
25901: LD_INT 7
25903: PUSH
25904: LD_INT 12
25906: PUSH
25907: LD_INT 13
25909: PUSH
25910: LD_INT 10
25912: PUSH
25913: LD_INT 14
25915: PUSH
25916: LD_INT 20
25918: PUSH
25919: LD_INT 21
25921: PUSH
25922: LD_INT 22
25924: PUSH
25925: LD_INT 25
25927: PUSH
25928: LD_INT 32
25930: PUSH
25931: LD_INT 27
25933: PUSH
25934: LD_INT 36
25936: PUSH
25937: LD_INT 69
25939: PUSH
25940: LD_INT 39
25942: PUSH
25943: LD_INT 34
25945: PUSH
25946: LD_INT 40
25948: PUSH
25949: LD_INT 48
25951: PUSH
25952: LD_INT 49
25954: PUSH
25955: LD_INT 50
25957: PUSH
25958: LD_INT 51
25960: PUSH
25961: LD_INT 52
25963: PUSH
25964: LD_INT 53
25966: PUSH
25967: LD_INT 54
25969: PUSH
25970: LD_INT 55
25972: PUSH
25973: LD_INT 56
25975: PUSH
25976: LD_INT 57
25978: PUSH
25979: LD_INT 58
25981: PUSH
25982: LD_INT 59
25984: PUSH
25985: LD_INT 60
25987: PUSH
25988: LD_INT 61
25990: PUSH
25991: LD_INT 62
25993: PUSH
25994: LD_INT 80
25996: PUSH
25997: LD_INT 82
25999: PUSH
26000: LD_INT 83
26002: PUSH
26003: LD_INT 84
26005: PUSH
26006: LD_INT 85
26008: PUSH
26009: LD_INT 86
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: ST_TO_ADDR
26065: GO 26532
26067: LD_INT 2
26069: DOUBLE
26070: EQUAL
26071: IFTRUE 26075
26073: GO 26301
26075: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26076: LD_ADDR_VAR 0 4
26080: PUSH
26081: LD_INT 35
26083: PUSH
26084: LD_INT 45
26086: PUSH
26087: LD_INT 46
26089: PUSH
26090: LD_INT 47
26092: PUSH
26093: LD_INT 82
26095: PUSH
26096: LD_INT 83
26098: PUSH
26099: LD_INT 84
26101: PUSH
26102: LD_INT 85
26104: PUSH
26105: LD_INT 87
26107: PUSH
26108: LD_INT 70
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 11
26116: PUSH
26117: LD_INT 3
26119: PUSH
26120: LD_INT 4
26122: PUSH
26123: LD_INT 5
26125: PUSH
26126: LD_INT 6
26128: PUSH
26129: LD_INT 15
26131: PUSH
26132: LD_INT 18
26134: PUSH
26135: LD_INT 7
26137: PUSH
26138: LD_INT 17
26140: PUSH
26141: LD_INT 8
26143: PUSH
26144: LD_INT 20
26146: PUSH
26147: LD_INT 21
26149: PUSH
26150: LD_INT 22
26152: PUSH
26153: LD_INT 72
26155: PUSH
26156: LD_INT 26
26158: PUSH
26159: LD_INT 69
26161: PUSH
26162: LD_INT 39
26164: PUSH
26165: LD_INT 40
26167: PUSH
26168: LD_INT 41
26170: PUSH
26171: LD_INT 42
26173: PUSH
26174: LD_INT 43
26176: PUSH
26177: LD_INT 48
26179: PUSH
26180: LD_INT 49
26182: PUSH
26183: LD_INT 50
26185: PUSH
26186: LD_INT 51
26188: PUSH
26189: LD_INT 52
26191: PUSH
26192: LD_INT 53
26194: PUSH
26195: LD_INT 54
26197: PUSH
26198: LD_INT 55
26200: PUSH
26201: LD_INT 56
26203: PUSH
26204: LD_INT 60
26206: PUSH
26207: LD_INT 61
26209: PUSH
26210: LD_INT 62
26212: PUSH
26213: LD_INT 66
26215: PUSH
26216: LD_INT 67
26218: PUSH
26219: LD_INT 68
26221: PUSH
26222: LD_INT 81
26224: PUSH
26225: LD_INT 82
26227: PUSH
26228: LD_INT 83
26230: PUSH
26231: LD_INT 84
26233: PUSH
26234: LD_INT 85
26236: PUSH
26237: LD_INT 87
26239: PUSH
26240: LD_INT 88
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: ST_TO_ADDR
26299: GO 26532
26301: LD_INT 3
26303: DOUBLE
26304: EQUAL
26305: IFTRUE 26309
26307: GO 26531
26309: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26310: LD_ADDR_VAR 0 4
26314: PUSH
26315: LD_INT 46
26317: PUSH
26318: LD_INT 47
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: LD_INT 82
26329: PUSH
26330: LD_INT 83
26332: PUSH
26333: LD_INT 84
26335: PUSH
26336: LD_INT 85
26338: PUSH
26339: LD_INT 86
26341: PUSH
26342: LD_INT 11
26344: PUSH
26345: LD_INT 9
26347: PUSH
26348: LD_INT 20
26350: PUSH
26351: LD_INT 19
26353: PUSH
26354: LD_INT 21
26356: PUSH
26357: LD_INT 24
26359: PUSH
26360: LD_INT 22
26362: PUSH
26363: LD_INT 25
26365: PUSH
26366: LD_INT 28
26368: PUSH
26369: LD_INT 29
26371: PUSH
26372: LD_INT 30
26374: PUSH
26375: LD_INT 31
26377: PUSH
26378: LD_INT 37
26380: PUSH
26381: LD_INT 38
26383: PUSH
26384: LD_INT 32
26386: PUSH
26387: LD_INT 27
26389: PUSH
26390: LD_INT 33
26392: PUSH
26393: LD_INT 69
26395: PUSH
26396: LD_INT 39
26398: PUSH
26399: LD_INT 34
26401: PUSH
26402: LD_INT 40
26404: PUSH
26405: LD_INT 71
26407: PUSH
26408: LD_INT 23
26410: PUSH
26411: LD_INT 44
26413: PUSH
26414: LD_INT 48
26416: PUSH
26417: LD_INT 49
26419: PUSH
26420: LD_INT 50
26422: PUSH
26423: LD_INT 51
26425: PUSH
26426: LD_INT 52
26428: PUSH
26429: LD_INT 53
26431: PUSH
26432: LD_INT 54
26434: PUSH
26435: LD_INT 55
26437: PUSH
26438: LD_INT 56
26440: PUSH
26441: LD_INT 57
26443: PUSH
26444: LD_INT 58
26446: PUSH
26447: LD_INT 59
26449: PUSH
26450: LD_INT 63
26452: PUSH
26453: LD_INT 64
26455: PUSH
26456: LD_INT 65
26458: PUSH
26459: LD_INT 82
26461: PUSH
26462: LD_INT 83
26464: PUSH
26465: LD_INT 84
26467: PUSH
26468: LD_INT 85
26470: PUSH
26471: LD_INT 86
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: ST_TO_ADDR
26529: GO 26532
26531: POP
// if state > - 1 and state < 3 then
26532: LD_VAR 0 3
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: GREATER
26541: PUSH
26542: LD_VAR 0 3
26546: PUSH
26547: LD_INT 3
26549: LESS
26550: AND
26551: IFFALSE 26608
// for i in result do
26553: LD_ADDR_VAR 0 5
26557: PUSH
26558: LD_VAR 0 4
26562: PUSH
26563: FOR_IN
26564: IFFALSE 26606
// if GetTech ( i , side ) <> state then
26566: LD_VAR 0 5
26570: PPUSH
26571: LD_VAR 0 1
26575: PPUSH
26576: CALL_OW 321
26580: PUSH
26581: LD_VAR 0 3
26585: NONEQUAL
26586: IFFALSE 26604
// result := result diff i ;
26588: LD_ADDR_VAR 0 4
26592: PUSH
26593: LD_VAR 0 4
26597: PUSH
26598: LD_VAR 0 5
26602: DIFF
26603: ST_TO_ADDR
26604: GO 26563
26606: POP
26607: POP
// end ;
26608: LD_VAR 0 4
26612: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26613: LD_INT 0
26615: PPUSH
26616: PPUSH
26617: PPUSH
// result := true ;
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: LD_INT 1
26625: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26626: LD_ADDR_VAR 0 5
26630: PUSH
26631: LD_VAR 0 2
26635: PPUSH
26636: CALL_OW 480
26640: ST_TO_ADDR
// if not tmp then
26641: LD_VAR 0 5
26645: NOT
26646: IFFALSE 26650
// exit ;
26648: GO 26699
// for i in tmp do
26650: LD_ADDR_VAR 0 4
26654: PUSH
26655: LD_VAR 0 5
26659: PUSH
26660: FOR_IN
26661: IFFALSE 26697
// if GetTech ( i , side ) <> state_researched then
26663: LD_VAR 0 4
26667: PPUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL_OW 321
26677: PUSH
26678: LD_INT 2
26680: NONEQUAL
26681: IFFALSE 26695
// begin result := false ;
26683: LD_ADDR_VAR 0 3
26687: PUSH
26688: LD_INT 0
26690: ST_TO_ADDR
// exit ;
26691: POP
26692: POP
26693: GO 26699
// end ;
26695: GO 26660
26697: POP
26698: POP
// end ;
26699: LD_VAR 0 3
26703: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26704: LD_INT 0
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26719: LD_VAR 0 1
26723: NOT
26724: PUSH
26725: LD_VAR 0 1
26729: PPUSH
26730: CALL_OW 257
26734: PUSH
26735: LD_INT 9
26737: NONEQUAL
26738: OR
26739: IFFALSE 26743
// exit ;
26741: GO 27316
// side := GetSide ( unit ) ;
26743: LD_ADDR_VAR 0 9
26747: PUSH
26748: LD_VAR 0 1
26752: PPUSH
26753: CALL_OW 255
26757: ST_TO_ADDR
// tech_space := tech_spacanom ;
26758: LD_ADDR_VAR 0 12
26762: PUSH
26763: LD_INT 29
26765: ST_TO_ADDR
// tech_time := tech_taurad ;
26766: LD_ADDR_VAR 0 13
26770: PUSH
26771: LD_INT 28
26773: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26774: LD_ADDR_VAR 0 11
26778: PUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 310
26788: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26789: LD_VAR 0 11
26793: PPUSH
26794: CALL_OW 247
26798: PUSH
26799: LD_INT 2
26801: EQUAL
26802: IFFALSE 26806
// exit ;
26804: GO 27316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26806: LD_ADDR_VAR 0 8
26810: PUSH
26811: LD_INT 81
26813: PUSH
26814: LD_VAR 0 9
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 3
26825: PUSH
26826: LD_INT 21
26828: PUSH
26829: LD_INT 3
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PPUSH
26844: CALL_OW 69
26848: ST_TO_ADDR
// if not tmp then
26849: LD_VAR 0 8
26853: NOT
26854: IFFALSE 26858
// exit ;
26856: GO 27316
// if in_unit then
26858: LD_VAR 0 11
26862: IFFALSE 26886
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26864: LD_ADDR_VAR 0 10
26868: PUSH
26869: LD_VAR 0 8
26873: PPUSH
26874: LD_VAR 0 11
26878: PPUSH
26879: CALL_OW 74
26883: ST_TO_ADDR
26884: GO 26906
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26886: LD_ADDR_VAR 0 10
26890: PUSH
26891: LD_VAR 0 8
26895: PPUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 74
26905: ST_TO_ADDR
// if not enemy then
26906: LD_VAR 0 10
26910: NOT
26911: IFFALSE 26915
// exit ;
26913: GO 27316
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26915: LD_VAR 0 11
26919: PUSH
26920: LD_VAR 0 11
26924: PPUSH
26925: LD_VAR 0 10
26929: PPUSH
26930: CALL_OW 296
26934: PUSH
26935: LD_INT 13
26937: GREATER
26938: AND
26939: PUSH
26940: LD_VAR 0 1
26944: PPUSH
26945: LD_VAR 0 10
26949: PPUSH
26950: CALL_OW 296
26954: PUSH
26955: LD_INT 12
26957: GREATER
26958: OR
26959: IFFALSE 26963
// exit ;
26961: GO 27316
// missile := [ 1 ] ;
26963: LD_ADDR_VAR 0 14
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26974: LD_VAR 0 9
26978: PPUSH
26979: LD_VAR 0 12
26983: PPUSH
26984: CALL_OW 325
26988: IFFALSE 27017
// missile := Replace ( missile , missile + 1 , 2 ) ;
26990: LD_ADDR_VAR 0 14
26994: PUSH
26995: LD_VAR 0 14
26999: PPUSH
27000: LD_VAR 0 14
27004: PUSH
27005: LD_INT 1
27007: PLUS
27008: PPUSH
27009: LD_INT 2
27011: PPUSH
27012: CALL_OW 1
27016: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27017: LD_VAR 0 9
27021: PPUSH
27022: LD_VAR 0 13
27026: PPUSH
27027: CALL_OW 325
27031: PUSH
27032: LD_VAR 0 10
27036: PPUSH
27037: CALL_OW 255
27041: PPUSH
27042: LD_VAR 0 13
27046: PPUSH
27047: CALL_OW 325
27051: NOT
27052: AND
27053: IFFALSE 27082
// missile := Replace ( missile , missile + 1 , 3 ) ;
27055: LD_ADDR_VAR 0 14
27059: PUSH
27060: LD_VAR 0 14
27064: PPUSH
27065: LD_VAR 0 14
27069: PUSH
27070: LD_INT 1
27072: PLUS
27073: PPUSH
27074: LD_INT 3
27076: PPUSH
27077: CALL_OW 1
27081: ST_TO_ADDR
// if missile < 2 then
27082: LD_VAR 0 14
27086: PUSH
27087: LD_INT 2
27089: LESS
27090: IFFALSE 27094
// exit ;
27092: GO 27316
// x := GetX ( enemy ) ;
27094: LD_ADDR_VAR 0 4
27098: PUSH
27099: LD_VAR 0 10
27103: PPUSH
27104: CALL_OW 250
27108: ST_TO_ADDR
// y := GetY ( enemy ) ;
27109: LD_ADDR_VAR 0 5
27113: PUSH
27114: LD_VAR 0 10
27118: PPUSH
27119: CALL_OW 251
27123: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27124: LD_ADDR_VAR 0 6
27128: PUSH
27129: LD_VAR 0 4
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PPUSH
27138: LD_INT 1
27140: PPUSH
27141: CALL_OW 12
27145: PLUS
27146: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27147: LD_ADDR_VAR 0 7
27151: PUSH
27152: LD_VAR 0 5
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PPUSH
27161: LD_INT 1
27163: PPUSH
27164: CALL_OW 12
27168: PLUS
27169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27170: LD_VAR 0 6
27174: PPUSH
27175: LD_VAR 0 7
27179: PPUSH
27180: CALL_OW 488
27184: NOT
27185: IFFALSE 27207
// begin _x := x ;
27187: LD_ADDR_VAR 0 6
27191: PUSH
27192: LD_VAR 0 4
27196: ST_TO_ADDR
// _y := y ;
27197: LD_ADDR_VAR 0 7
27201: PUSH
27202: LD_VAR 0 5
27206: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27207: LD_ADDR_VAR 0 3
27211: PUSH
27212: LD_INT 1
27214: PPUSH
27215: LD_VAR 0 14
27219: PPUSH
27220: CALL_OW 12
27224: ST_TO_ADDR
// case i of 1 :
27225: LD_VAR 0 3
27229: PUSH
27230: LD_INT 1
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27255
27238: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27239: LD_VAR 0 1
27243: PPUSH
27244: LD_VAR 0 10
27248: PPUSH
27249: CALL_OW 115
27253: GO 27316
27255: LD_INT 2
27257: DOUBLE
27258: EQUAL
27259: IFTRUE 27263
27261: GO 27285
27263: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27264: LD_VAR 0 1
27268: PPUSH
27269: LD_VAR 0 6
27273: PPUSH
27274: LD_VAR 0 7
27278: PPUSH
27279: CALL_OW 153
27283: GO 27316
27285: LD_INT 3
27287: DOUBLE
27288: EQUAL
27289: IFTRUE 27293
27291: GO 27315
27293: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27294: LD_VAR 0 1
27298: PPUSH
27299: LD_VAR 0 6
27303: PPUSH
27304: LD_VAR 0 7
27308: PPUSH
27309: CALL_OW 154
27313: GO 27316
27315: POP
// end ;
27316: LD_VAR 0 2
27320: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27321: LD_INT 0
27323: PPUSH
27324: PPUSH
27325: PPUSH
27326: PPUSH
27327: PPUSH
27328: PPUSH
// if not unit or not building then
27329: LD_VAR 0 1
27333: NOT
27334: PUSH
27335: LD_VAR 0 2
27339: NOT
27340: OR
27341: IFFALSE 27345
// exit ;
27343: GO 27503
// x := GetX ( building ) ;
27345: LD_ADDR_VAR 0 5
27349: PUSH
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 250
27359: ST_TO_ADDR
// y := GetY ( building ) ;
27360: LD_ADDR_VAR 0 6
27364: PUSH
27365: LD_VAR 0 2
27369: PPUSH
27370: CALL_OW 251
27374: ST_TO_ADDR
// for i = 0 to 5 do
27375: LD_ADDR_VAR 0 4
27379: PUSH
27380: DOUBLE
27381: LD_INT 0
27383: DEC
27384: ST_TO_ADDR
27385: LD_INT 5
27387: PUSH
27388: FOR_TO
27389: IFFALSE 27501
// begin _x := ShiftX ( x , i , 3 ) ;
27391: LD_ADDR_VAR 0 7
27395: PUSH
27396: LD_VAR 0 5
27400: PPUSH
27401: LD_VAR 0 4
27405: PPUSH
27406: LD_INT 3
27408: PPUSH
27409: CALL_OW 272
27413: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27414: LD_ADDR_VAR 0 8
27418: PUSH
27419: LD_VAR 0 6
27423: PPUSH
27424: LD_VAR 0 4
27428: PPUSH
27429: LD_INT 3
27431: PPUSH
27432: CALL_OW 273
27436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27437: LD_VAR 0 7
27441: PPUSH
27442: LD_VAR 0 8
27446: PPUSH
27447: CALL_OW 488
27451: NOT
27452: IFFALSE 27456
// continue ;
27454: GO 27388
// if HexInfo ( _x , _y ) = 0 then
27456: LD_VAR 0 7
27460: PPUSH
27461: LD_VAR 0 8
27465: PPUSH
27466: CALL_OW 428
27470: PUSH
27471: LD_INT 0
27473: EQUAL
27474: IFFALSE 27499
// begin ComMoveXY ( unit , _x , _y ) ;
27476: LD_VAR 0 1
27480: PPUSH
27481: LD_VAR 0 7
27485: PPUSH
27486: LD_VAR 0 8
27490: PPUSH
27491: CALL_OW 111
// exit ;
27495: POP
27496: POP
27497: GO 27503
// end ; end ;
27499: GO 27388
27501: POP
27502: POP
// end ;
27503: LD_VAR 0 3
27507: RET
// export function ScanBase ( side , base_area ) ; begin
27508: LD_INT 0
27510: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27511: LD_ADDR_VAR 0 3
27515: PUSH
27516: LD_VAR 0 2
27520: PPUSH
27521: LD_INT 81
27523: PUSH
27524: LD_VAR 0 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PPUSH
27533: CALL_OW 70
27537: ST_TO_ADDR
// end ;
27538: LD_VAR 0 3
27542: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27543: LD_INT 0
27545: PPUSH
27546: PPUSH
27547: PPUSH
27548: PPUSH
// result := false ;
27549: LD_ADDR_VAR 0 2
27553: PUSH
27554: LD_INT 0
27556: ST_TO_ADDR
// side := GetSide ( unit ) ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: CALL_OW 255
27571: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27572: LD_ADDR_VAR 0 4
27576: PUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 248
27586: ST_TO_ADDR
// case nat of 1 :
27587: LD_VAR 0 4
27591: PUSH
27592: LD_INT 1
27594: DOUBLE
27595: EQUAL
27596: IFTRUE 27600
27598: GO 27611
27600: POP
// tech := tech_lassight ; 2 :
27601: LD_ADDR_VAR 0 5
27605: PUSH
27606: LD_INT 12
27608: ST_TO_ADDR
27609: GO 27650
27611: LD_INT 2
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27619
27617: GO 27630
27619: POP
// tech := tech_mortar ; 3 :
27620: LD_ADDR_VAR 0 5
27624: PUSH
27625: LD_INT 41
27627: ST_TO_ADDR
27628: GO 27650
27630: LD_INT 3
27632: DOUBLE
27633: EQUAL
27634: IFTRUE 27638
27636: GO 27649
27638: POP
// tech := tech_bazooka ; end ;
27639: LD_ADDR_VAR 0 5
27643: PUSH
27644: LD_INT 44
27646: ST_TO_ADDR
27647: GO 27650
27649: POP
// if Researched ( side , tech ) then
27650: LD_VAR 0 3
27654: PPUSH
27655: LD_VAR 0 5
27659: PPUSH
27660: CALL_OW 325
27664: IFFALSE 27691
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27666: LD_ADDR_VAR 0 2
27670: PUSH
27671: LD_INT 5
27673: PUSH
27674: LD_INT 8
27676: PUSH
27677: LD_INT 9
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: PUSH
27685: LD_VAR 0 4
27689: ARRAY
27690: ST_TO_ADDR
// end ;
27691: LD_VAR 0 2
27695: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27696: LD_INT 0
27698: PPUSH
27699: PPUSH
27700: PPUSH
// if not mines then
27701: LD_VAR 0 2
27705: NOT
27706: IFFALSE 27710
// exit ;
27708: GO 27854
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27710: LD_ADDR_VAR 0 5
27714: PUSH
27715: LD_INT 81
27717: PUSH
27718: LD_VAR 0 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 3
27729: PUSH
27730: LD_INT 21
27732: PUSH
27733: LD_INT 3
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PPUSH
27748: CALL_OW 69
27752: ST_TO_ADDR
// for i in mines do
27753: LD_ADDR_VAR 0 4
27757: PUSH
27758: LD_VAR 0 2
27762: PUSH
27763: FOR_IN
27764: IFFALSE 27852
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27766: LD_VAR 0 4
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PPUSH
27775: LD_VAR 0 4
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PPUSH
27784: CALL_OW 458
27788: NOT
27789: IFFALSE 27793
// continue ;
27791: GO 27763
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27793: LD_VAR 0 4
27797: PUSH
27798: LD_INT 1
27800: ARRAY
27801: PPUSH
27802: LD_VAR 0 4
27806: PUSH
27807: LD_INT 2
27809: ARRAY
27810: PPUSH
27811: CALL_OW 428
27815: PUSH
27816: LD_VAR 0 5
27820: IN
27821: IFFALSE 27850
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27823: LD_VAR 0 4
27827: PUSH
27828: LD_INT 1
27830: ARRAY
27831: PPUSH
27832: LD_VAR 0 4
27836: PUSH
27837: LD_INT 2
27839: ARRAY
27840: PPUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL_OW 456
// end ;
27850: GO 27763
27852: POP
27853: POP
// end ;
27854: LD_VAR 0 3
27858: RET
// export function Count ( array ) ; begin
27859: LD_INT 0
27861: PPUSH
// result := array + 0 ;
27862: LD_ADDR_VAR 0 2
27866: PUSH
27867: LD_VAR 0 1
27871: PUSH
27872: LD_INT 0
27874: PLUS
27875: ST_TO_ADDR
// end ;
27876: LD_VAR 0 2
27880: RET
// export function IsEmpty ( building ) ; begin
27881: LD_INT 0
27883: PPUSH
// if not building then
27884: LD_VAR 0 1
27888: NOT
27889: IFFALSE 27893
// exit ;
27891: GO 27936
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27893: LD_ADDR_VAR 0 2
27897: PUSH
27898: LD_VAR 0 1
27902: PUSH
27903: LD_INT 22
27905: PUSH
27906: LD_VAR 0 1
27910: PPUSH
27911: CALL_OW 255
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 58
27922: PUSH
27923: EMPTY
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PPUSH
27930: CALL_OW 69
27934: IN
27935: ST_TO_ADDR
// end ;
27936: LD_VAR 0 2
27940: RET
// export function IsNotFull ( building ) ; var places ; begin
27941: LD_INT 0
27943: PPUSH
27944: PPUSH
// if not building then
27945: LD_VAR 0 1
27949: NOT
27950: IFFALSE 27954
// exit ;
27952: GO 27982
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27954: LD_ADDR_VAR 0 2
27958: PUSH
27959: LD_VAR 0 1
27963: PPUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 62
27969: PUSH
27970: EMPTY
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 72
27981: ST_TO_ADDR
// end ;
27982: LD_VAR 0 2
27986: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27987: LD_INT 0
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
// tmp := [ ] ;
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: EMPTY
27999: ST_TO_ADDR
// list := [ ] ;
28000: LD_ADDR_VAR 0 5
28004: PUSH
28005: EMPTY
28006: ST_TO_ADDR
// for i = 16 to 25 do
28007: LD_ADDR_VAR 0 4
28011: PUSH
28012: DOUBLE
28013: LD_INT 16
28015: DEC
28016: ST_TO_ADDR
28017: LD_INT 25
28019: PUSH
28020: FOR_TO
28021: IFFALSE 28094
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_VAR 0 3
28032: PUSH
28033: LD_INT 22
28035: PUSH
28036: LD_VAR 0 1
28040: PPUSH
28041: CALL_OW 255
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 91
28052: PUSH
28053: LD_VAR 0 1
28057: PUSH
28058: LD_INT 6
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 30
28068: PUSH
28069: LD_VAR 0 4
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: ADD
28091: ST_TO_ADDR
28092: GO 28020
28094: POP
28095: POP
// for i = 1 to tmp do
28096: LD_ADDR_VAR 0 4
28100: PUSH
28101: DOUBLE
28102: LD_INT 1
28104: DEC
28105: ST_TO_ADDR
28106: LD_VAR 0 3
28110: PUSH
28111: FOR_TO
28112: IFFALSE 28200
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28114: LD_ADDR_VAR 0 5
28118: PUSH
28119: LD_VAR 0 5
28123: PUSH
28124: LD_VAR 0 3
28128: PUSH
28129: LD_VAR 0 4
28133: ARRAY
28134: PPUSH
28135: CALL_OW 266
28139: PUSH
28140: LD_VAR 0 3
28144: PUSH
28145: LD_VAR 0 4
28149: ARRAY
28150: PPUSH
28151: CALL_OW 250
28155: PUSH
28156: LD_VAR 0 3
28160: PUSH
28161: LD_VAR 0 4
28165: ARRAY
28166: PPUSH
28167: CALL_OW 251
28171: PUSH
28172: LD_VAR 0 3
28176: PUSH
28177: LD_VAR 0 4
28181: ARRAY
28182: PPUSH
28183: CALL_OW 254
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: ADD
28197: ST_TO_ADDR
28198: GO 28111
28200: POP
28201: POP
// result := list ;
28202: LD_ADDR_VAR 0 2
28206: PUSH
28207: LD_VAR 0 5
28211: ST_TO_ADDR
// end ;
28212: LD_VAR 0 2
28216: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28217: LD_INT 0
28219: PPUSH
28220: PPUSH
28221: PPUSH
28222: PPUSH
28223: PPUSH
28224: PPUSH
28225: PPUSH
// if not factory then
28226: LD_VAR 0 1
28230: NOT
28231: IFFALSE 28235
// exit ;
28233: GO 28828
// if control = control_apeman then
28235: LD_VAR 0 4
28239: PUSH
28240: LD_INT 5
28242: EQUAL
28243: IFFALSE 28352
// begin tmp := UnitsInside ( factory ) ;
28245: LD_ADDR_VAR 0 8
28249: PUSH
28250: LD_VAR 0 1
28254: PPUSH
28255: CALL_OW 313
28259: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28260: LD_VAR 0 8
28264: PPUSH
28265: LD_INT 25
28267: PUSH
28268: LD_INT 12
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PPUSH
28275: CALL_OW 72
28279: NOT
28280: IFFALSE 28290
// control := control_manual ;
28282: LD_ADDR_VAR 0 4
28286: PUSH
28287: LD_INT 1
28289: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28290: LD_ADDR_VAR 0 8
28294: PUSH
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL 27987 0 1
28304: ST_TO_ADDR
// if tmp then
28305: LD_VAR 0 8
28309: IFFALSE 28352
// begin for i in tmp do
28311: LD_ADDR_VAR 0 7
28315: PUSH
28316: LD_VAR 0 8
28320: PUSH
28321: FOR_IN
28322: IFFALSE 28350
// if i [ 1 ] = b_ext_radio then
28324: LD_VAR 0 7
28328: PUSH
28329: LD_INT 1
28331: ARRAY
28332: PUSH
28333: LD_INT 22
28335: EQUAL
28336: IFFALSE 28348
// begin control := control_remote ;
28338: LD_ADDR_VAR 0 4
28342: PUSH
28343: LD_INT 2
28345: ST_TO_ADDR
// break ;
28346: GO 28350
// end ;
28348: GO 28321
28350: POP
28351: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28352: LD_VAR 0 1
28356: PPUSH
28357: LD_VAR 0 2
28361: PPUSH
28362: LD_VAR 0 3
28366: PPUSH
28367: LD_VAR 0 4
28371: PPUSH
28372: LD_VAR 0 5
28376: PPUSH
28377: CALL_OW 448
28381: IFFALSE 28416
// begin result := [ chassis , engine , control , weapon ] ;
28383: LD_ADDR_VAR 0 6
28387: PUSH
28388: LD_VAR 0 2
28392: PUSH
28393: LD_VAR 0 3
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: LD_VAR 0 5
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: ST_TO_ADDR
// exit ;
28414: GO 28828
// end ; _chassis := AvailableChassisList ( factory ) ;
28416: LD_ADDR_VAR 0 9
28420: PUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 475
28430: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28431: LD_ADDR_VAR 0 11
28435: PUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 476
28445: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28446: LD_ADDR_VAR 0 12
28450: PUSH
28451: LD_VAR 0 1
28455: PPUSH
28456: CALL_OW 477
28460: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28461: LD_ADDR_VAR 0 10
28465: PUSH
28466: LD_VAR 0 1
28470: PPUSH
28471: CALL_OW 478
28475: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28476: LD_VAR 0 9
28480: NOT
28481: PUSH
28482: LD_VAR 0 11
28486: NOT
28487: OR
28488: PUSH
28489: LD_VAR 0 12
28493: NOT
28494: OR
28495: PUSH
28496: LD_VAR 0 10
28500: NOT
28501: OR
28502: IFFALSE 28537
// begin result := [ chassis , engine , control , weapon ] ;
28504: LD_ADDR_VAR 0 6
28508: PUSH
28509: LD_VAR 0 2
28513: PUSH
28514: LD_VAR 0 3
28518: PUSH
28519: LD_VAR 0 4
28523: PUSH
28524: LD_VAR 0 5
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// exit ;
28535: GO 28828
// end ; if not chassis in _chassis then
28537: LD_VAR 0 2
28541: PUSH
28542: LD_VAR 0 9
28546: IN
28547: NOT
28548: IFFALSE 28574
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28550: LD_ADDR_VAR 0 2
28554: PUSH
28555: LD_VAR 0 9
28559: PUSH
28560: LD_INT 1
28562: PPUSH
28563: LD_VAR 0 9
28567: PPUSH
28568: CALL_OW 12
28572: ARRAY
28573: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28574: LD_VAR 0 2
28578: PPUSH
28579: LD_VAR 0 3
28583: PPUSH
28584: CALL 28833 0 2
28588: NOT
28589: IFFALSE 28648
// repeat engine := _engine [ 1 ] ;
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: LD_VAR 0 11
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28605: LD_ADDR_VAR 0 11
28609: PUSH
28610: LD_VAR 0 11
28614: PPUSH
28615: LD_INT 1
28617: PPUSH
28618: CALL_OW 3
28622: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28623: LD_VAR 0 2
28627: PPUSH
28628: LD_VAR 0 3
28632: PPUSH
28633: CALL 28833 0 2
28637: PUSH
28638: LD_VAR 0 11
28642: PUSH
28643: EMPTY
28644: EQUAL
28645: OR
28646: IFFALSE 28591
// if not control in _control then
28648: LD_VAR 0 4
28652: PUSH
28653: LD_VAR 0 12
28657: IN
28658: NOT
28659: IFFALSE 28685
// control := _control [ rand ( 1 , _control ) ] ;
28661: LD_ADDR_VAR 0 4
28665: PUSH
28666: LD_VAR 0 12
28670: PUSH
28671: LD_INT 1
28673: PPUSH
28674: LD_VAR 0 12
28678: PPUSH
28679: CALL_OW 12
28683: ARRAY
28684: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28685: LD_VAR 0 2
28689: PPUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: CALL 29053 0 2
28699: NOT
28700: IFFALSE 28759
// repeat weapon := _weapon [ 1 ] ;
28702: LD_ADDR_VAR 0 5
28706: PUSH
28707: LD_VAR 0 10
28711: PUSH
28712: LD_INT 1
28714: ARRAY
28715: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28716: LD_ADDR_VAR 0 10
28720: PUSH
28721: LD_VAR 0 10
28725: PPUSH
28726: LD_INT 1
28728: PPUSH
28729: CALL_OW 3
28733: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28734: LD_VAR 0 2
28738: PPUSH
28739: LD_VAR 0 5
28743: PPUSH
28744: CALL 29053 0 2
28748: PUSH
28749: LD_VAR 0 10
28753: PUSH
28754: EMPTY
28755: EQUAL
28756: OR
28757: IFFALSE 28702
// result := [ ] ;
28759: LD_ADDR_VAR 0 6
28763: PUSH
28764: EMPTY
28765: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28766: LD_VAR 0 1
28770: PPUSH
28771: LD_VAR 0 2
28775: PPUSH
28776: LD_VAR 0 3
28780: PPUSH
28781: LD_VAR 0 4
28785: PPUSH
28786: LD_VAR 0 5
28790: PPUSH
28791: CALL_OW 448
28795: IFFALSE 28828
// result := [ chassis , engine , control , weapon ] ;
28797: LD_ADDR_VAR 0 6
28801: PUSH
28802: LD_VAR 0 2
28806: PUSH
28807: LD_VAR 0 3
28811: PUSH
28812: LD_VAR 0 4
28816: PUSH
28817: LD_VAR 0 5
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// end ;
28828: LD_VAR 0 6
28832: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28833: LD_INT 0
28835: PPUSH
// if not chassis or not engine then
28836: LD_VAR 0 1
28840: NOT
28841: PUSH
28842: LD_VAR 0 2
28846: NOT
28847: OR
28848: IFFALSE 28852
// exit ;
28850: GO 29048
// case engine of engine_solar :
28852: LD_VAR 0 2
28856: PUSH
28857: LD_INT 2
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 28903
28865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 11
28873: PUSH
28874: LD_INT 12
28876: PUSH
28877: LD_INT 13
28879: PUSH
28880: LD_INT 14
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 2
28888: PUSH
28889: LD_INT 3
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: ST_TO_ADDR
28901: GO 29032
28903: LD_INT 1
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28973
28911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_INT 11
28919: PUSH
28920: LD_INT 12
28922: PUSH
28923: LD_INT 13
28925: PUSH
28926: LD_INT 14
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: LD_INT 4
28940: PUSH
28941: LD_INT 5
28943: PUSH
28944: LD_INT 21
28946: PUSH
28947: LD_INT 23
28949: PUSH
28950: LD_INT 22
28952: PUSH
28953: LD_INT 24
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
28971: GO 29032
28973: LD_INT 3
28975: DOUBLE
28976: EQUAL
28977: IFTRUE 28981
28979: GO 29031
28981: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28982: LD_ADDR_VAR 0 3
28986: PUSH
28987: LD_INT 13
28989: PUSH
28990: LD_INT 14
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 3
28998: PUSH
28999: LD_INT 4
29001: PUSH
29002: LD_INT 5
29004: PUSH
29005: LD_INT 21
29007: PUSH
29008: LD_INT 22
29010: PUSH
29011: LD_INT 23
29013: PUSH
29014: LD_INT 24
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: ST_TO_ADDR
29029: GO 29032
29031: POP
// result := ( chassis in result ) ;
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_VAR 0 1
29041: PUSH
29042: LD_VAR 0 3
29046: IN
29047: ST_TO_ADDR
// end ;
29048: LD_VAR 0 3
29052: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29053: LD_INT 0
29055: PPUSH
// if not chassis or not weapon then
29056: LD_VAR 0 1
29060: NOT
29061: PUSH
29062: LD_VAR 0 2
29066: NOT
29067: OR
29068: IFFALSE 29072
// exit ;
29070: GO 30132
// case weapon of us_machine_gun :
29072: LD_VAR 0 2
29076: PUSH
29077: LD_INT 2
29079: DOUBLE
29080: EQUAL
29081: IFTRUE 29085
29083: GO 29115
29085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: LD_INT 4
29102: PUSH
29103: LD_INT 5
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: ST_TO_ADDR
29113: GO 30116
29115: LD_INT 3
29117: DOUBLE
29118: EQUAL
29119: IFTRUE 29123
29121: GO 29153
29123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29124: LD_ADDR_VAR 0 3
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 3
29137: PUSH
29138: LD_INT 4
29140: PUSH
29141: LD_INT 5
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: ST_TO_ADDR
29151: GO 30116
29153: LD_INT 11
29155: DOUBLE
29156: EQUAL
29157: IFTRUE 29161
29159: GO 29191
29161: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29162: LD_ADDR_VAR 0 3
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: LD_INT 2
29172: PUSH
29173: LD_INT 3
29175: PUSH
29176: LD_INT 4
29178: PUSH
29179: LD_INT 5
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: ST_TO_ADDR
29189: GO 30116
29191: LD_INT 4
29193: DOUBLE
29194: EQUAL
29195: IFTRUE 29199
29197: GO 29225
29199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29200: LD_ADDR_VAR 0 3
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: LD_INT 4
29213: PUSH
29214: LD_INT 5
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
29223: GO 30116
29225: LD_INT 5
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29259
29233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29234: LD_ADDR_VAR 0 3
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: LD_INT 3
29244: PUSH
29245: LD_INT 4
29247: PUSH
29248: LD_INT 5
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
29257: GO 30116
29259: LD_INT 9
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29293
29267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: LD_INT 4
29281: PUSH
29282: LD_INT 5
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 30116
29293: LD_INT 7
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29327
29301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: LD_INT 5
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 30116
29327: LD_INT 12
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29361
29335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: LD_INT 4
29349: PUSH
29350: LD_INT 5
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 30116
29361: LD_INT 13
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29395
29369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 4
29383: PUSH
29384: LD_INT 5
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
29393: GO 30116
29395: LD_INT 14
29397: DOUBLE
29398: EQUAL
29399: IFTRUE 29403
29401: GO 29421
29403: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29404: LD_ADDR_VAR 0 3
29408: PUSH
29409: LD_INT 4
29411: PUSH
29412: LD_INT 5
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: ST_TO_ADDR
29419: GO 30116
29421: LD_INT 6
29423: DOUBLE
29424: EQUAL
29425: IFTRUE 29429
29427: GO 29447
29429: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29430: LD_ADDR_VAR 0 3
29434: PUSH
29435: LD_INT 4
29437: PUSH
29438: LD_INT 5
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: ST_TO_ADDR
29445: GO 30116
29447: LD_INT 10
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29473
29455: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 4
29463: PUSH
29464: LD_INT 5
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: ST_TO_ADDR
29471: GO 30116
29473: LD_INT 22
29475: DOUBLE
29476: EQUAL
29477: IFTRUE 29481
29479: GO 29507
29481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29482: LD_ADDR_VAR 0 3
29486: PUSH
29487: LD_INT 11
29489: PUSH
29490: LD_INT 12
29492: PUSH
29493: LD_INT 13
29495: PUSH
29496: LD_INT 14
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
29505: GO 30116
29507: LD_INT 23
29509: DOUBLE
29510: EQUAL
29511: IFTRUE 29515
29513: GO 29541
29515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29516: LD_ADDR_VAR 0 3
29520: PUSH
29521: LD_INT 11
29523: PUSH
29524: LD_INT 12
29526: PUSH
29527: LD_INT 13
29529: PUSH
29530: LD_INT 14
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: ST_TO_ADDR
29539: GO 30116
29541: LD_INT 24
29543: DOUBLE
29544: EQUAL
29545: IFTRUE 29549
29547: GO 29575
29549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_INT 11
29557: PUSH
29558: LD_INT 12
29560: PUSH
29561: LD_INT 13
29563: PUSH
29564: LD_INT 14
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: ST_TO_ADDR
29573: GO 30116
29575: LD_INT 30
29577: DOUBLE
29578: EQUAL
29579: IFTRUE 29583
29581: GO 29609
29583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_INT 11
29591: PUSH
29592: LD_INT 12
29594: PUSH
29595: LD_INT 13
29597: PUSH
29598: LD_INT 14
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
29607: GO 30116
29609: LD_INT 25
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29635
29617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29618: LD_ADDR_VAR 0 3
29622: PUSH
29623: LD_INT 13
29625: PUSH
29626: LD_INT 14
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: ST_TO_ADDR
29633: GO 30116
29635: LD_INT 27
29637: DOUBLE
29638: EQUAL
29639: IFTRUE 29643
29641: GO 29661
29643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29644: LD_ADDR_VAR 0 3
29648: PUSH
29649: LD_INT 13
29651: PUSH
29652: LD_INT 14
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: ST_TO_ADDR
29659: GO 30116
29661: LD_INT 92
29663: DOUBLE
29664: EQUAL
29665: IFTRUE 29669
29667: GO 29695
29669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29670: LD_ADDR_VAR 0 3
29674: PUSH
29675: LD_INT 11
29677: PUSH
29678: LD_INT 12
29680: PUSH
29681: LD_INT 13
29683: PUSH
29684: LD_INT 14
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: ST_TO_ADDR
29693: GO 30116
29695: LD_INT 28
29697: DOUBLE
29698: EQUAL
29699: IFTRUE 29703
29701: GO 29721
29703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29704: LD_ADDR_VAR 0 3
29708: PUSH
29709: LD_INT 13
29711: PUSH
29712: LD_INT 14
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: ST_TO_ADDR
29719: GO 30116
29721: LD_INT 29
29723: DOUBLE
29724: EQUAL
29725: IFTRUE 29729
29727: GO 29747
29729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29730: LD_ADDR_VAR 0 3
29734: PUSH
29735: LD_INT 13
29737: PUSH
29738: LD_INT 14
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: ST_TO_ADDR
29745: GO 30116
29747: LD_INT 31
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29773
29755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29756: LD_ADDR_VAR 0 3
29760: PUSH
29761: LD_INT 13
29763: PUSH
29764: LD_INT 14
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: ST_TO_ADDR
29771: GO 30116
29773: LD_INT 26
29775: DOUBLE
29776: EQUAL
29777: IFTRUE 29781
29779: GO 29799
29781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: LD_INT 13
29789: PUSH
29790: LD_INT 14
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: ST_TO_ADDR
29797: GO 30116
29799: LD_INT 42
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 29833
29807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29808: LD_ADDR_VAR 0 3
29812: PUSH
29813: LD_INT 21
29815: PUSH
29816: LD_INT 22
29818: PUSH
29819: LD_INT 23
29821: PUSH
29822: LD_INT 24
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: ST_TO_ADDR
29831: GO 30116
29833: LD_INT 43
29835: DOUBLE
29836: EQUAL
29837: IFTRUE 29841
29839: GO 29867
29841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29842: LD_ADDR_VAR 0 3
29846: PUSH
29847: LD_INT 21
29849: PUSH
29850: LD_INT 22
29852: PUSH
29853: LD_INT 23
29855: PUSH
29856: LD_INT 24
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: ST_TO_ADDR
29865: GO 30116
29867: LD_INT 44
29869: DOUBLE
29870: EQUAL
29871: IFTRUE 29875
29873: GO 29901
29875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29876: LD_ADDR_VAR 0 3
29880: PUSH
29881: LD_INT 21
29883: PUSH
29884: LD_INT 22
29886: PUSH
29887: LD_INT 23
29889: PUSH
29890: LD_INT 24
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: ST_TO_ADDR
29899: GO 30116
29901: LD_INT 45
29903: DOUBLE
29904: EQUAL
29905: IFTRUE 29909
29907: GO 29935
29909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29910: LD_ADDR_VAR 0 3
29914: PUSH
29915: LD_INT 21
29917: PUSH
29918: LD_INT 22
29920: PUSH
29921: LD_INT 23
29923: PUSH
29924: LD_INT 24
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: ST_TO_ADDR
29933: GO 30116
29935: LD_INT 49
29937: DOUBLE
29938: EQUAL
29939: IFTRUE 29943
29941: GO 29969
29943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29944: LD_ADDR_VAR 0 3
29948: PUSH
29949: LD_INT 21
29951: PUSH
29952: LD_INT 22
29954: PUSH
29955: LD_INT 23
29957: PUSH
29958: LD_INT 24
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
29967: GO 30116
29969: LD_INT 51
29971: DOUBLE
29972: EQUAL
29973: IFTRUE 29977
29975: GO 30003
29977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29978: LD_ADDR_VAR 0 3
29982: PUSH
29983: LD_INT 21
29985: PUSH
29986: LD_INT 22
29988: PUSH
29989: LD_INT 23
29991: PUSH
29992: LD_INT 24
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: ST_TO_ADDR
30001: GO 30116
30003: LD_INT 52
30005: DOUBLE
30006: EQUAL
30007: IFTRUE 30011
30009: GO 30037
30011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30012: LD_ADDR_VAR 0 3
30016: PUSH
30017: LD_INT 21
30019: PUSH
30020: LD_INT 22
30022: PUSH
30023: LD_INT 23
30025: PUSH
30026: LD_INT 24
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: ST_TO_ADDR
30035: GO 30116
30037: LD_INT 53
30039: DOUBLE
30040: EQUAL
30041: IFTRUE 30045
30043: GO 30063
30045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30046: LD_ADDR_VAR 0 3
30050: PUSH
30051: LD_INT 23
30053: PUSH
30054: LD_INT 24
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: ST_TO_ADDR
30061: GO 30116
30063: LD_INT 46
30065: DOUBLE
30066: EQUAL
30067: IFTRUE 30071
30069: GO 30089
30071: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 23
30079: PUSH
30080: LD_INT 24
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: ST_TO_ADDR
30087: GO 30116
30089: LD_INT 47
30091: DOUBLE
30092: EQUAL
30093: IFTRUE 30097
30095: GO 30115
30097: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30098: LD_ADDR_VAR 0 3
30102: PUSH
30103: LD_INT 23
30105: PUSH
30106: LD_INT 24
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: ST_TO_ADDR
30113: GO 30116
30115: POP
// result := ( chassis in result ) ;
30116: LD_ADDR_VAR 0 3
30120: PUSH
30121: LD_VAR 0 1
30125: PUSH
30126: LD_VAR 0 3
30130: IN
30131: ST_TO_ADDR
// end ;
30132: LD_VAR 0 3
30136: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
// result := array ;
30146: LD_ADDR_VAR 0 5
30150: PUSH
30151: LD_VAR 0 1
30155: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30156: LD_VAR 0 1
30160: NOT
30161: PUSH
30162: LD_VAR 0 2
30166: NOT
30167: OR
30168: PUSH
30169: LD_VAR 0 3
30173: NOT
30174: OR
30175: PUSH
30176: LD_VAR 0 2
30180: PUSH
30181: LD_VAR 0 1
30185: GREATER
30186: OR
30187: PUSH
30188: LD_VAR 0 3
30192: PUSH
30193: LD_VAR 0 1
30197: GREATER
30198: OR
30199: IFFALSE 30203
// exit ;
30201: GO 30499
// if direction then
30203: LD_VAR 0 4
30207: IFFALSE 30271
// begin d := 1 ;
30209: LD_ADDR_VAR 0 9
30213: PUSH
30214: LD_INT 1
30216: ST_TO_ADDR
// if i_from > i_to then
30217: LD_VAR 0 2
30221: PUSH
30222: LD_VAR 0 3
30226: GREATER
30227: IFFALSE 30253
// length := ( array - i_from ) + i_to else
30229: LD_ADDR_VAR 0 11
30233: PUSH
30234: LD_VAR 0 1
30238: PUSH
30239: LD_VAR 0 2
30243: MINUS
30244: PUSH
30245: LD_VAR 0 3
30249: PLUS
30250: ST_TO_ADDR
30251: GO 30269
// length := i_to - i_from ;
30253: LD_ADDR_VAR 0 11
30257: PUSH
30258: LD_VAR 0 3
30262: PUSH
30263: LD_VAR 0 2
30267: MINUS
30268: ST_TO_ADDR
// end else
30269: GO 30332
// begin d := - 1 ;
30271: LD_ADDR_VAR 0 9
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: ST_TO_ADDR
// if i_from > i_to then
30280: LD_VAR 0 2
30284: PUSH
30285: LD_VAR 0 3
30289: GREATER
30290: IFFALSE 30310
// length := i_from - i_to else
30292: LD_ADDR_VAR 0 11
30296: PUSH
30297: LD_VAR 0 2
30301: PUSH
30302: LD_VAR 0 3
30306: MINUS
30307: ST_TO_ADDR
30308: GO 30332
// length := ( array - i_to ) + i_from ;
30310: LD_ADDR_VAR 0 11
30314: PUSH
30315: LD_VAR 0 1
30319: PUSH
30320: LD_VAR 0 3
30324: MINUS
30325: PUSH
30326: LD_VAR 0 2
30330: PLUS
30331: ST_TO_ADDR
// end ; if not length then
30332: LD_VAR 0 11
30336: NOT
30337: IFFALSE 30341
// exit ;
30339: GO 30499
// tmp := array ;
30341: LD_ADDR_VAR 0 10
30345: PUSH
30346: LD_VAR 0 1
30350: ST_TO_ADDR
// for i = 1 to length do
30351: LD_ADDR_VAR 0 6
30355: PUSH
30356: DOUBLE
30357: LD_INT 1
30359: DEC
30360: ST_TO_ADDR
30361: LD_VAR 0 11
30365: PUSH
30366: FOR_TO
30367: IFFALSE 30487
// begin for j = 1 to array do
30369: LD_ADDR_VAR 0 7
30373: PUSH
30374: DOUBLE
30375: LD_INT 1
30377: DEC
30378: ST_TO_ADDR
30379: LD_VAR 0 1
30383: PUSH
30384: FOR_TO
30385: IFFALSE 30473
// begin k := j + d ;
30387: LD_ADDR_VAR 0 8
30391: PUSH
30392: LD_VAR 0 7
30396: PUSH
30397: LD_VAR 0 9
30401: PLUS
30402: ST_TO_ADDR
// if k > array then
30403: LD_VAR 0 8
30407: PUSH
30408: LD_VAR 0 1
30412: GREATER
30413: IFFALSE 30423
// k := 1 ;
30415: LD_ADDR_VAR 0 8
30419: PUSH
30420: LD_INT 1
30422: ST_TO_ADDR
// if not k then
30423: LD_VAR 0 8
30427: NOT
30428: IFFALSE 30440
// k := array ;
30430: LD_ADDR_VAR 0 8
30434: PUSH
30435: LD_VAR 0 1
30439: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30440: LD_ADDR_VAR 0 10
30444: PUSH
30445: LD_VAR 0 10
30449: PPUSH
30450: LD_VAR 0 8
30454: PPUSH
30455: LD_VAR 0 1
30459: PUSH
30460: LD_VAR 0 7
30464: ARRAY
30465: PPUSH
30466: CALL_OW 1
30470: ST_TO_ADDR
// end ;
30471: GO 30384
30473: POP
30474: POP
// array := tmp ;
30475: LD_ADDR_VAR 0 1
30479: PUSH
30480: LD_VAR 0 10
30484: ST_TO_ADDR
// end ;
30485: GO 30366
30487: POP
30488: POP
// result := array ;
30489: LD_ADDR_VAR 0 5
30493: PUSH
30494: LD_VAR 0 1
30498: ST_TO_ADDR
// end ;
30499: LD_VAR 0 5
30503: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30504: LD_INT 0
30506: PPUSH
30507: PPUSH
// result := 0 ;
30508: LD_ADDR_VAR 0 3
30512: PUSH
30513: LD_INT 0
30515: ST_TO_ADDR
// if not array or not value in array then
30516: LD_VAR 0 1
30520: NOT
30521: PUSH
30522: LD_VAR 0 2
30526: PUSH
30527: LD_VAR 0 1
30531: IN
30532: NOT
30533: OR
30534: IFFALSE 30538
// exit ;
30536: GO 30592
// for i = 1 to array do
30538: LD_ADDR_VAR 0 4
30542: PUSH
30543: DOUBLE
30544: LD_INT 1
30546: DEC
30547: ST_TO_ADDR
30548: LD_VAR 0 1
30552: PUSH
30553: FOR_TO
30554: IFFALSE 30590
// if value = array [ i ] then
30556: LD_VAR 0 2
30560: PUSH
30561: LD_VAR 0 1
30565: PUSH
30566: LD_VAR 0 4
30570: ARRAY
30571: EQUAL
30572: IFFALSE 30588
// begin result := i ;
30574: LD_ADDR_VAR 0 3
30578: PUSH
30579: LD_VAR 0 4
30583: ST_TO_ADDR
// exit ;
30584: POP
30585: POP
30586: GO 30592
// end ;
30588: GO 30553
30590: POP
30591: POP
// end ;
30592: LD_VAR 0 3
30596: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30597: LD_INT 0
30599: PPUSH
// vc_chassis := chassis ;
30600: LD_ADDR_OWVAR 37
30604: PUSH
30605: LD_VAR 0 1
30609: ST_TO_ADDR
// vc_engine := engine ;
30610: LD_ADDR_OWVAR 39
30614: PUSH
30615: LD_VAR 0 2
30619: ST_TO_ADDR
// vc_control := control ;
30620: LD_ADDR_OWVAR 38
30624: PUSH
30625: LD_VAR 0 3
30629: ST_TO_ADDR
// vc_weapon := weapon ;
30630: LD_ADDR_OWVAR 40
30634: PUSH
30635: LD_VAR 0 4
30639: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30640: LD_ADDR_OWVAR 41
30644: PUSH
30645: LD_VAR 0 5
30649: ST_TO_ADDR
// end ;
30650: LD_VAR 0 6
30654: RET
// export function WantPlant ( unit ) ; var task ; begin
30655: LD_INT 0
30657: PPUSH
30658: PPUSH
// result := false ;
30659: LD_ADDR_VAR 0 2
30663: PUSH
30664: LD_INT 0
30666: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30667: LD_ADDR_VAR 0 3
30671: PUSH
30672: LD_VAR 0 1
30676: PPUSH
30677: CALL_OW 437
30681: ST_TO_ADDR
// if task then
30682: LD_VAR 0 3
30686: IFFALSE 30714
// if task [ 1 ] [ 1 ] = p then
30688: LD_VAR 0 3
30692: PUSH
30693: LD_INT 1
30695: ARRAY
30696: PUSH
30697: LD_INT 1
30699: ARRAY
30700: PUSH
30701: LD_STRING p
30703: EQUAL
30704: IFFALSE 30714
// result := true ;
30706: LD_ADDR_VAR 0 2
30710: PUSH
30711: LD_INT 1
30713: ST_TO_ADDR
// end ;
30714: LD_VAR 0 2
30718: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30719: LD_INT 0
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
// if pos < 1 then
30725: LD_VAR 0 2
30729: PUSH
30730: LD_INT 1
30732: LESS
30733: IFFALSE 30737
// exit ;
30735: GO 31040
// if pos = 1 then
30737: LD_VAR 0 2
30741: PUSH
30742: LD_INT 1
30744: EQUAL
30745: IFFALSE 30778
// result := Replace ( arr , pos [ 1 ] , value ) else
30747: LD_ADDR_VAR 0 4
30751: PUSH
30752: LD_VAR 0 1
30756: PPUSH
30757: LD_VAR 0 2
30761: PUSH
30762: LD_INT 1
30764: ARRAY
30765: PPUSH
30766: LD_VAR 0 3
30770: PPUSH
30771: CALL_OW 1
30775: ST_TO_ADDR
30776: GO 31040
// begin tmp := arr ;
30778: LD_ADDR_VAR 0 6
30782: PUSH
30783: LD_VAR 0 1
30787: ST_TO_ADDR
// s_arr := [ tmp ] ;
30788: LD_ADDR_VAR 0 7
30792: PUSH
30793: LD_VAR 0 6
30797: PUSH
30798: EMPTY
30799: LIST
30800: ST_TO_ADDR
// for i = 1 to pos - 1 do
30801: LD_ADDR_VAR 0 5
30805: PUSH
30806: DOUBLE
30807: LD_INT 1
30809: DEC
30810: ST_TO_ADDR
30811: LD_VAR 0 2
30815: PUSH
30816: LD_INT 1
30818: MINUS
30819: PUSH
30820: FOR_TO
30821: IFFALSE 30866
// begin tmp := tmp [ pos [ i ] ] ;
30823: LD_ADDR_VAR 0 6
30827: PUSH
30828: LD_VAR 0 6
30832: PUSH
30833: LD_VAR 0 2
30837: PUSH
30838: LD_VAR 0 5
30842: ARRAY
30843: ARRAY
30844: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30845: LD_ADDR_VAR 0 7
30849: PUSH
30850: LD_VAR 0 7
30854: PUSH
30855: LD_VAR 0 6
30859: PUSH
30860: EMPTY
30861: LIST
30862: ADD
30863: ST_TO_ADDR
// end ;
30864: GO 30820
30866: POP
30867: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30868: LD_ADDR_VAR 0 6
30872: PUSH
30873: LD_VAR 0 6
30877: PPUSH
30878: LD_VAR 0 2
30882: PUSH
30883: LD_VAR 0 2
30887: ARRAY
30888: PPUSH
30889: LD_VAR 0 3
30893: PPUSH
30894: CALL_OW 1
30898: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30899: LD_ADDR_VAR 0 7
30903: PUSH
30904: LD_VAR 0 7
30908: PPUSH
30909: LD_VAR 0 7
30913: PPUSH
30914: LD_VAR 0 6
30918: PPUSH
30919: CALL_OW 1
30923: ST_TO_ADDR
// for i = s_arr downto 2 do
30924: LD_ADDR_VAR 0 5
30928: PUSH
30929: DOUBLE
30930: LD_VAR 0 7
30934: INC
30935: ST_TO_ADDR
30936: LD_INT 2
30938: PUSH
30939: FOR_DOWNTO
30940: IFFALSE 31024
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30942: LD_ADDR_VAR 0 6
30946: PUSH
30947: LD_VAR 0 7
30951: PUSH
30952: LD_VAR 0 5
30956: PUSH
30957: LD_INT 1
30959: MINUS
30960: ARRAY
30961: PPUSH
30962: LD_VAR 0 2
30966: PUSH
30967: LD_VAR 0 5
30971: PUSH
30972: LD_INT 1
30974: MINUS
30975: ARRAY
30976: PPUSH
30977: LD_VAR 0 7
30981: PUSH
30982: LD_VAR 0 5
30986: ARRAY
30987: PPUSH
30988: CALL_OW 1
30992: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30993: LD_ADDR_VAR 0 7
30997: PUSH
30998: LD_VAR 0 7
31002: PPUSH
31003: LD_VAR 0 5
31007: PUSH
31008: LD_INT 1
31010: MINUS
31011: PPUSH
31012: LD_VAR 0 6
31016: PPUSH
31017: CALL_OW 1
31021: ST_TO_ADDR
// end ;
31022: GO 30939
31024: POP
31025: POP
// result := s_arr [ 1 ] ;
31026: LD_ADDR_VAR 0 4
31030: PUSH
31031: LD_VAR 0 7
31035: PUSH
31036: LD_INT 1
31038: ARRAY
31039: ST_TO_ADDR
// end ; end ;
31040: LD_VAR 0 4
31044: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31045: LD_INT 0
31047: PPUSH
31048: PPUSH
// if not list then
31049: LD_VAR 0 1
31053: NOT
31054: IFFALSE 31058
// exit ;
31056: GO 31149
// i := list [ pos1 ] ;
31058: LD_ADDR_VAR 0 5
31062: PUSH
31063: LD_VAR 0 1
31067: PUSH
31068: LD_VAR 0 2
31072: ARRAY
31073: ST_TO_ADDR
// if not i then
31074: LD_VAR 0 5
31078: NOT
31079: IFFALSE 31083
// exit ;
31081: GO 31149
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31083: LD_ADDR_VAR 0 1
31087: PUSH
31088: LD_VAR 0 1
31092: PPUSH
31093: LD_VAR 0 2
31097: PPUSH
31098: LD_VAR 0 1
31102: PUSH
31103: LD_VAR 0 3
31107: ARRAY
31108: PPUSH
31109: CALL_OW 1
31113: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31114: LD_ADDR_VAR 0 1
31118: PUSH
31119: LD_VAR 0 1
31123: PPUSH
31124: LD_VAR 0 3
31128: PPUSH
31129: LD_VAR 0 5
31133: PPUSH
31134: CALL_OW 1
31138: ST_TO_ADDR
// result := list ;
31139: LD_ADDR_VAR 0 4
31143: PUSH
31144: LD_VAR 0 1
31148: ST_TO_ADDR
// end ;
31149: LD_VAR 0 4
31153: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31154: LD_INT 0
31156: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31157: LD_ADDR_VAR 0 5
31161: PUSH
31162: LD_VAR 0 1
31166: PPUSH
31167: CALL_OW 250
31171: PPUSH
31172: LD_VAR 0 1
31176: PPUSH
31177: CALL_OW 251
31181: PPUSH
31182: LD_VAR 0 2
31186: PPUSH
31187: LD_VAR 0 3
31191: PPUSH
31192: LD_VAR 0 4
31196: PPUSH
31197: CALL 31207 0 5
31201: ST_TO_ADDR
// end ;
31202: LD_VAR 0 5
31206: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31207: LD_INT 0
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
// if not list then
31213: LD_VAR 0 3
31217: NOT
31218: IFFALSE 31222
// exit ;
31220: GO 31610
// result := [ ] ;
31222: LD_ADDR_VAR 0 6
31226: PUSH
31227: EMPTY
31228: ST_TO_ADDR
// for i in list do
31229: LD_ADDR_VAR 0 7
31233: PUSH
31234: LD_VAR 0 3
31238: PUSH
31239: FOR_IN
31240: IFFALSE 31442
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31242: LD_ADDR_VAR 0 9
31246: PUSH
31247: LD_VAR 0 7
31251: PPUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: LD_VAR 0 2
31261: PPUSH
31262: CALL_OW 297
31266: ST_TO_ADDR
// if not result then
31267: LD_VAR 0 6
31271: NOT
31272: IFFALSE 31298
// result := [ [ i , tmp ] ] else
31274: LD_ADDR_VAR 0 6
31278: PUSH
31279: LD_VAR 0 7
31283: PUSH
31284: LD_VAR 0 9
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: EMPTY
31294: LIST
31295: ST_TO_ADDR
31296: GO 31440
// begin if result [ result ] [ 2 ] < tmp then
31298: LD_VAR 0 6
31302: PUSH
31303: LD_VAR 0 6
31307: ARRAY
31308: PUSH
31309: LD_INT 2
31311: ARRAY
31312: PUSH
31313: LD_VAR 0 9
31317: LESS
31318: IFFALSE 31360
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31320: LD_ADDR_VAR 0 6
31324: PUSH
31325: LD_VAR 0 6
31329: PPUSH
31330: LD_VAR 0 6
31334: PUSH
31335: LD_INT 1
31337: PLUS
31338: PPUSH
31339: LD_VAR 0 7
31343: PUSH
31344: LD_VAR 0 9
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PPUSH
31353: CALL_OW 2
31357: ST_TO_ADDR
31358: GO 31440
// for j = 1 to result do
31360: LD_ADDR_VAR 0 8
31364: PUSH
31365: DOUBLE
31366: LD_INT 1
31368: DEC
31369: ST_TO_ADDR
31370: LD_VAR 0 6
31374: PUSH
31375: FOR_TO
31376: IFFALSE 31438
// begin if tmp < result [ j ] [ 2 ] then
31378: LD_VAR 0 9
31382: PUSH
31383: LD_VAR 0 6
31387: PUSH
31388: LD_VAR 0 8
31392: ARRAY
31393: PUSH
31394: LD_INT 2
31396: ARRAY
31397: LESS
31398: IFFALSE 31436
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31400: LD_ADDR_VAR 0 6
31404: PUSH
31405: LD_VAR 0 6
31409: PPUSH
31410: LD_VAR 0 8
31414: PPUSH
31415: LD_VAR 0 7
31419: PUSH
31420: LD_VAR 0 9
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PPUSH
31429: CALL_OW 2
31433: ST_TO_ADDR
// break ;
31434: GO 31438
// end ; end ;
31436: GO 31375
31438: POP
31439: POP
// end ; end ;
31440: GO 31239
31442: POP
31443: POP
// if result and not asc then
31444: LD_VAR 0 6
31448: PUSH
31449: LD_VAR 0 4
31453: NOT
31454: AND
31455: IFFALSE 31530
// begin tmp := result ;
31457: LD_ADDR_VAR 0 9
31461: PUSH
31462: LD_VAR 0 6
31466: ST_TO_ADDR
// for i = tmp downto 1 do
31467: LD_ADDR_VAR 0 7
31471: PUSH
31472: DOUBLE
31473: LD_VAR 0 9
31477: INC
31478: ST_TO_ADDR
31479: LD_INT 1
31481: PUSH
31482: FOR_DOWNTO
31483: IFFALSE 31528
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31485: LD_ADDR_VAR 0 6
31489: PUSH
31490: LD_VAR 0 6
31494: PPUSH
31495: LD_VAR 0 9
31499: PUSH
31500: LD_VAR 0 7
31504: MINUS
31505: PUSH
31506: LD_INT 1
31508: PLUS
31509: PPUSH
31510: LD_VAR 0 9
31514: PUSH
31515: LD_VAR 0 7
31519: ARRAY
31520: PPUSH
31521: CALL_OW 1
31525: ST_TO_ADDR
31526: GO 31482
31528: POP
31529: POP
// end ; tmp := [ ] ;
31530: LD_ADDR_VAR 0 9
31534: PUSH
31535: EMPTY
31536: ST_TO_ADDR
// if mode then
31537: LD_VAR 0 5
31541: IFFALSE 31610
// begin for i = 1 to result do
31543: LD_ADDR_VAR 0 7
31547: PUSH
31548: DOUBLE
31549: LD_INT 1
31551: DEC
31552: ST_TO_ADDR
31553: LD_VAR 0 6
31557: PUSH
31558: FOR_TO
31559: IFFALSE 31598
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31561: LD_ADDR_VAR 0 9
31565: PUSH
31566: LD_VAR 0 9
31570: PPUSH
31571: LD_VAR 0 7
31575: PPUSH
31576: LD_VAR 0 6
31580: PUSH
31581: LD_VAR 0 7
31585: ARRAY
31586: PUSH
31587: LD_INT 1
31589: ARRAY
31590: PPUSH
31591: CALL_OW 1
31595: ST_TO_ADDR
31596: GO 31558
31598: POP
31599: POP
// result := tmp ;
31600: LD_ADDR_VAR 0 6
31604: PUSH
31605: LD_VAR 0 9
31609: ST_TO_ADDR
// end ; end ;
31610: LD_VAR 0 6
31614: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31615: LD_INT 0
31617: PPUSH
31618: PPUSH
31619: PPUSH
31620: PPUSH
31621: PPUSH
31622: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31623: LD_ADDR_VAR 0 5
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
// if not x or not y then
31645: LD_VAR 0 2
31649: NOT
31650: PUSH
31651: LD_VAR 0 3
31655: NOT
31656: OR
31657: IFFALSE 31661
// exit ;
31659: GO 33311
// if not range then
31661: LD_VAR 0 4
31665: NOT
31666: IFFALSE 31676
// range := 10 ;
31668: LD_ADDR_VAR 0 4
31672: PUSH
31673: LD_INT 10
31675: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31676: LD_ADDR_VAR 0 8
31680: PUSH
31681: LD_INT 81
31683: PUSH
31684: LD_VAR 0 1
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 92
31695: PUSH
31696: LD_VAR 0 2
31700: PUSH
31701: LD_VAR 0 3
31705: PUSH
31706: LD_VAR 0 4
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 3
31719: PUSH
31720: LD_INT 21
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: LIST
31738: PPUSH
31739: CALL_OW 69
31743: ST_TO_ADDR
// if not tmp then
31744: LD_VAR 0 8
31748: NOT
31749: IFFALSE 31753
// exit ;
31751: GO 33311
// for i in tmp do
31753: LD_ADDR_VAR 0 6
31757: PUSH
31758: LD_VAR 0 8
31762: PUSH
31763: FOR_IN
31764: IFFALSE 33286
// begin points := [ 0 , 0 , 0 ] ;
31766: LD_ADDR_VAR 0 9
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: ST_TO_ADDR
// bpoints := 1 ;
31785: LD_ADDR_VAR 0 10
31789: PUSH
31790: LD_INT 1
31792: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31793: LD_VAR 0 6
31797: PPUSH
31798: CALL_OW 247
31802: PUSH
31803: LD_INT 1
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 32389
31811: POP
// begin if GetClass ( i ) = 1 then
31812: LD_VAR 0 6
31816: PPUSH
31817: CALL_OW 257
31821: PUSH
31822: LD_INT 1
31824: EQUAL
31825: IFFALSE 31846
// points := [ 10 , 5 , 3 ] ;
31827: LD_ADDR_VAR 0 9
31831: PUSH
31832: LD_INT 10
31834: PUSH
31835: LD_INT 5
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31846: LD_VAR 0 6
31850: PPUSH
31851: CALL_OW 257
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 4
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: LIST
31869: IN
31870: IFFALSE 31891
// points := [ 3 , 2 , 1 ] ;
31872: LD_ADDR_VAR 0 9
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31891: LD_VAR 0 6
31895: PPUSH
31896: CALL_OW 257
31900: PUSH
31901: LD_INT 5
31903: EQUAL
31904: IFFALSE 31925
// points := [ 130 , 5 , 2 ] ;
31906: LD_ADDR_VAR 0 9
31910: PUSH
31911: LD_INT 130
31913: PUSH
31914: LD_INT 5
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31925: LD_VAR 0 6
31929: PPUSH
31930: CALL_OW 257
31934: PUSH
31935: LD_INT 8
31937: EQUAL
31938: IFFALSE 31959
// points := [ 35 , 35 , 30 ] ;
31940: LD_ADDR_VAR 0 9
31944: PUSH
31945: LD_INT 35
31947: PUSH
31948: LD_INT 35
31950: PUSH
31951: LD_INT 30
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31959: LD_VAR 0 6
31963: PPUSH
31964: CALL_OW 257
31968: PUSH
31969: LD_INT 9
31971: EQUAL
31972: IFFALSE 31993
// points := [ 20 , 55 , 40 ] ;
31974: LD_ADDR_VAR 0 9
31978: PUSH
31979: LD_INT 20
31981: PUSH
31982: LD_INT 55
31984: PUSH
31985: LD_INT 40
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31993: LD_VAR 0 6
31997: PPUSH
31998: CALL_OW 257
32002: PUSH
32003: LD_INT 12
32005: PUSH
32006: LD_INT 16
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: IN
32013: IFFALSE 32034
// points := [ 5 , 3 , 2 ] ;
32015: LD_ADDR_VAR 0 9
32019: PUSH
32020: LD_INT 5
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: LD_INT 2
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32034: LD_VAR 0 6
32038: PPUSH
32039: CALL_OW 257
32043: PUSH
32044: LD_INT 17
32046: EQUAL
32047: IFFALSE 32068
// points := [ 100 , 50 , 75 ] ;
32049: LD_ADDR_VAR 0 9
32053: PUSH
32054: LD_INT 100
32056: PUSH
32057: LD_INT 50
32059: PUSH
32060: LD_INT 75
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32068: LD_VAR 0 6
32072: PPUSH
32073: CALL_OW 257
32077: PUSH
32078: LD_INT 15
32080: EQUAL
32081: IFFALSE 32102
// points := [ 10 , 5 , 3 ] ;
32083: LD_ADDR_VAR 0 9
32087: PUSH
32088: LD_INT 10
32090: PUSH
32091: LD_INT 5
32093: PUSH
32094: LD_INT 3
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32102: LD_VAR 0 6
32106: PPUSH
32107: CALL_OW 257
32111: PUSH
32112: LD_INT 14
32114: EQUAL
32115: IFFALSE 32136
// points := [ 10 , 0 , 0 ] ;
32117: LD_ADDR_VAR 0 9
32121: PUSH
32122: LD_INT 10
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32136: LD_VAR 0 6
32140: PPUSH
32141: CALL_OW 257
32145: PUSH
32146: LD_INT 11
32148: EQUAL
32149: IFFALSE 32170
// points := [ 30 , 10 , 5 ] ;
32151: LD_ADDR_VAR 0 9
32155: PUSH
32156: LD_INT 30
32158: PUSH
32159: LD_INT 10
32161: PUSH
32162: LD_INT 5
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32170: LD_VAR 0 1
32174: PPUSH
32175: LD_INT 5
32177: PPUSH
32178: CALL_OW 321
32182: PUSH
32183: LD_INT 2
32185: EQUAL
32186: IFFALSE 32203
// bpoints := bpoints * 1.8 ;
32188: LD_ADDR_VAR 0 10
32192: PUSH
32193: LD_VAR 0 10
32197: PUSH
32198: LD_REAL  1.80000000000000E+0000
32201: MUL
32202: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32203: LD_VAR 0 6
32207: PPUSH
32208: CALL_OW 257
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: IN
32231: PUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: LD_INT 51
32239: PPUSH
32240: CALL_OW 321
32244: PUSH
32245: LD_INT 2
32247: EQUAL
32248: AND
32249: IFFALSE 32266
// bpoints := bpoints * 1.2 ;
32251: LD_ADDR_VAR 0 10
32255: PUSH
32256: LD_VAR 0 10
32260: PUSH
32261: LD_REAL  1.20000000000000E+0000
32264: MUL
32265: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32266: LD_VAR 0 6
32270: PPUSH
32271: CALL_OW 257
32275: PUSH
32276: LD_INT 5
32278: PUSH
32279: LD_INT 7
32281: PUSH
32282: LD_INT 9
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: IN
32290: PUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: LD_INT 52
32298: PPUSH
32299: CALL_OW 321
32303: PUSH
32304: LD_INT 2
32306: EQUAL
32307: AND
32308: IFFALSE 32325
// bpoints := bpoints * 1.5 ;
32310: LD_ADDR_VAR 0 10
32314: PUSH
32315: LD_VAR 0 10
32319: PUSH
32320: LD_REAL  1.50000000000000E+0000
32323: MUL
32324: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32325: LD_VAR 0 1
32329: PPUSH
32330: LD_INT 66
32332: PPUSH
32333: CALL_OW 321
32337: PUSH
32338: LD_INT 2
32340: EQUAL
32341: IFFALSE 32358
// bpoints := bpoints * 1.1 ;
32343: LD_ADDR_VAR 0 10
32347: PUSH
32348: LD_VAR 0 10
32352: PUSH
32353: LD_REAL  1.10000000000000E+0000
32356: MUL
32357: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32358: LD_ADDR_VAR 0 10
32362: PUSH
32363: LD_VAR 0 10
32367: PUSH
32368: LD_VAR 0 6
32372: PPUSH
32373: LD_INT 1
32375: PPUSH
32376: CALL_OW 259
32380: PUSH
32381: LD_REAL  1.15000000000000E+0000
32384: MUL
32385: MUL
32386: ST_TO_ADDR
// end ; unit_vehicle :
32387: GO 33215
32389: LD_INT 2
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 33203
32397: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32398: LD_VAR 0 6
32402: PPUSH
32403: CALL_OW 264
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 42
32413: PUSH
32414: LD_INT 24
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: IN
32422: IFFALSE 32443
// points := [ 25 , 5 , 3 ] ;
32424: LD_ADDR_VAR 0 9
32428: PUSH
32429: LD_INT 25
32431: PUSH
32432: LD_INT 5
32434: PUSH
32435: LD_INT 3
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32443: LD_VAR 0 6
32447: PPUSH
32448: CALL_OW 264
32452: PUSH
32453: LD_INT 4
32455: PUSH
32456: LD_INT 43
32458: PUSH
32459: LD_INT 25
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: IN
32467: IFFALSE 32488
// points := [ 40 , 15 , 5 ] ;
32469: LD_ADDR_VAR 0 9
32473: PUSH
32474: LD_INT 40
32476: PUSH
32477: LD_INT 15
32479: PUSH
32480: LD_INT 5
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32488: LD_VAR 0 6
32492: PPUSH
32493: CALL_OW 264
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: LD_INT 23
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: IN
32508: IFFALSE 32529
// points := [ 7 , 25 , 8 ] ;
32510: LD_ADDR_VAR 0 9
32514: PUSH
32515: LD_INT 7
32517: PUSH
32518: LD_INT 25
32520: PUSH
32521: LD_INT 8
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32529: LD_VAR 0 6
32533: PPUSH
32534: CALL_OW 264
32538: PUSH
32539: LD_INT 5
32541: PUSH
32542: LD_INT 27
32544: PUSH
32545: LD_INT 44
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: IN
32553: IFFALSE 32574
// points := [ 14 , 50 , 16 ] ;
32555: LD_ADDR_VAR 0 9
32559: PUSH
32560: LD_INT 14
32562: PUSH
32563: LD_INT 50
32565: PUSH
32566: LD_INT 16
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32574: LD_VAR 0 6
32578: PPUSH
32579: CALL_OW 264
32583: PUSH
32584: LD_INT 6
32586: PUSH
32587: LD_INT 46
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: IN
32594: IFFALSE 32615
// points := [ 32 , 120 , 70 ] ;
32596: LD_ADDR_VAR 0 9
32600: PUSH
32601: LD_INT 32
32603: PUSH
32604: LD_INT 120
32606: PUSH
32607: LD_INT 70
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32615: LD_VAR 0 6
32619: PPUSH
32620: CALL_OW 264
32624: PUSH
32625: LD_INT 7
32627: PUSH
32628: LD_INT 28
32630: PUSH
32631: LD_INT 45
32633: PUSH
32634: LD_INT 92
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: IN
32643: IFFALSE 32664
// points := [ 35 , 20 , 45 ] ;
32645: LD_ADDR_VAR 0 9
32649: PUSH
32650: LD_INT 35
32652: PUSH
32653: LD_INT 20
32655: PUSH
32656: LD_INT 45
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32664: LD_VAR 0 6
32668: PPUSH
32669: CALL_OW 264
32673: PUSH
32674: LD_INT 47
32676: PUSH
32677: EMPTY
32678: LIST
32679: IN
32680: IFFALSE 32701
// points := [ 67 , 45 , 75 ] ;
32682: LD_ADDR_VAR 0 9
32686: PUSH
32687: LD_INT 67
32689: PUSH
32690: LD_INT 45
32692: PUSH
32693: LD_INT 75
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32701: LD_VAR 0 6
32705: PPUSH
32706: CALL_OW 264
32710: PUSH
32711: LD_INT 26
32713: PUSH
32714: EMPTY
32715: LIST
32716: IN
32717: IFFALSE 32738
// points := [ 120 , 30 , 80 ] ;
32719: LD_ADDR_VAR 0 9
32723: PUSH
32724: LD_INT 120
32726: PUSH
32727: LD_INT 30
32729: PUSH
32730: LD_INT 80
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32738: LD_VAR 0 6
32742: PPUSH
32743: CALL_OW 264
32747: PUSH
32748: LD_INT 22
32750: PUSH
32751: EMPTY
32752: LIST
32753: IN
32754: IFFALSE 32775
// points := [ 40 , 1 , 1 ] ;
32756: LD_ADDR_VAR 0 9
32760: PUSH
32761: LD_INT 40
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32775: LD_VAR 0 6
32779: PPUSH
32780: CALL_OW 264
32784: PUSH
32785: LD_INT 29
32787: PUSH
32788: EMPTY
32789: LIST
32790: IN
32791: IFFALSE 32812
// points := [ 70 , 200 , 400 ] ;
32793: LD_ADDR_VAR 0 9
32797: PUSH
32798: LD_INT 70
32800: PUSH
32801: LD_INT 200
32803: PUSH
32804: LD_INT 400
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32812: LD_VAR 0 6
32816: PPUSH
32817: CALL_OW 264
32821: PUSH
32822: LD_INT 14
32824: PUSH
32825: LD_INT 53
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: IN
32832: IFFALSE 32853
// points := [ 40 , 10 , 20 ] ;
32834: LD_ADDR_VAR 0 9
32838: PUSH
32839: LD_INT 40
32841: PUSH
32842: LD_INT 10
32844: PUSH
32845: LD_INT 20
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32853: LD_VAR 0 6
32857: PPUSH
32858: CALL_OW 264
32862: PUSH
32863: LD_INT 9
32865: PUSH
32866: EMPTY
32867: LIST
32868: IN
32869: IFFALSE 32890
// points := [ 5 , 70 , 20 ] ;
32871: LD_ADDR_VAR 0 9
32875: PUSH
32876: LD_INT 5
32878: PUSH
32879: LD_INT 70
32881: PUSH
32882: LD_INT 20
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: LIST
32889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32890: LD_VAR 0 6
32894: PPUSH
32895: CALL_OW 264
32899: PUSH
32900: LD_INT 10
32902: PUSH
32903: EMPTY
32904: LIST
32905: IN
32906: IFFALSE 32927
// points := [ 35 , 110 , 70 ] ;
32908: LD_ADDR_VAR 0 9
32912: PUSH
32913: LD_INT 35
32915: PUSH
32916: LD_INT 110
32918: PUSH
32919: LD_INT 70
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32927: LD_VAR 0 6
32931: PPUSH
32932: CALL_OW 265
32936: PUSH
32937: LD_INT 25
32939: EQUAL
32940: IFFALSE 32961
// points := [ 80 , 65 , 100 ] ;
32942: LD_ADDR_VAR 0 9
32946: PUSH
32947: LD_INT 80
32949: PUSH
32950: LD_INT 65
32952: PUSH
32953: LD_INT 100
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: LIST
32960: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32961: LD_VAR 0 6
32965: PPUSH
32966: CALL_OW 263
32970: PUSH
32971: LD_INT 1
32973: EQUAL
32974: IFFALSE 33009
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32976: LD_ADDR_VAR 0 10
32980: PUSH
32981: LD_VAR 0 10
32985: PUSH
32986: LD_VAR 0 6
32990: PPUSH
32991: CALL_OW 311
32995: PPUSH
32996: LD_INT 3
32998: PPUSH
32999: CALL_OW 259
33003: PUSH
33004: LD_INT 4
33006: MUL
33007: MUL
33008: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33009: LD_VAR 0 6
33013: PPUSH
33014: CALL_OW 263
33018: PUSH
33019: LD_INT 2
33021: EQUAL
33022: IFFALSE 33073
// begin j := IsControledBy ( i ) ;
33024: LD_ADDR_VAR 0 7
33028: PUSH
33029: LD_VAR 0 6
33033: PPUSH
33034: CALL_OW 312
33038: ST_TO_ADDR
// if j then
33039: LD_VAR 0 7
33043: IFFALSE 33073
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33045: LD_ADDR_VAR 0 10
33049: PUSH
33050: LD_VAR 0 10
33054: PUSH
33055: LD_VAR 0 7
33059: PPUSH
33060: LD_INT 3
33062: PPUSH
33063: CALL_OW 259
33067: PUSH
33068: LD_INT 3
33070: MUL
33071: MUL
33072: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33073: LD_VAR 0 6
33077: PPUSH
33078: CALL_OW 264
33082: PUSH
33083: LD_INT 5
33085: PUSH
33086: LD_INT 6
33088: PUSH
33089: LD_INT 46
33091: PUSH
33092: LD_INT 44
33094: PUSH
33095: LD_INT 47
33097: PUSH
33098: LD_INT 45
33100: PUSH
33101: LD_INT 28
33103: PUSH
33104: LD_INT 7
33106: PUSH
33107: LD_INT 27
33109: PUSH
33110: LD_INT 29
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: IN
33125: PUSH
33126: LD_VAR 0 1
33130: PPUSH
33131: LD_INT 52
33133: PPUSH
33134: CALL_OW 321
33138: PUSH
33139: LD_INT 2
33141: EQUAL
33142: AND
33143: IFFALSE 33160
// bpoints := bpoints * 1.2 ;
33145: LD_ADDR_VAR 0 10
33149: PUSH
33150: LD_VAR 0 10
33154: PUSH
33155: LD_REAL  1.20000000000000E+0000
33158: MUL
33159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33160: LD_VAR 0 6
33164: PPUSH
33165: CALL_OW 264
33169: PUSH
33170: LD_INT 6
33172: PUSH
33173: LD_INT 46
33175: PUSH
33176: LD_INT 47
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: IN
33184: IFFALSE 33201
// bpoints := bpoints * 1.2 ;
33186: LD_ADDR_VAR 0 10
33190: PUSH
33191: LD_VAR 0 10
33195: PUSH
33196: LD_REAL  1.20000000000000E+0000
33199: MUL
33200: ST_TO_ADDR
// end ; unit_building :
33201: GO 33215
33203: LD_INT 3
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33214
33211: POP
// ; end ;
33212: GO 33215
33214: POP
// for j = 1 to 3 do
33215: LD_ADDR_VAR 0 7
33219: PUSH
33220: DOUBLE
33221: LD_INT 1
33223: DEC
33224: ST_TO_ADDR
33225: LD_INT 3
33227: PUSH
33228: FOR_TO
33229: IFFALSE 33282
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33231: LD_ADDR_VAR 0 5
33235: PUSH
33236: LD_VAR 0 5
33240: PPUSH
33241: LD_VAR 0 7
33245: PPUSH
33246: LD_VAR 0 5
33250: PUSH
33251: LD_VAR 0 7
33255: ARRAY
33256: PUSH
33257: LD_VAR 0 9
33261: PUSH
33262: LD_VAR 0 7
33266: ARRAY
33267: PUSH
33268: LD_VAR 0 10
33272: MUL
33273: PLUS
33274: PPUSH
33275: CALL_OW 1
33279: ST_TO_ADDR
33280: GO 33228
33282: POP
33283: POP
// end ;
33284: GO 31763
33286: POP
33287: POP
// result := Replace ( result , 4 , tmp ) ;
33288: LD_ADDR_VAR 0 5
33292: PUSH
33293: LD_VAR 0 5
33297: PPUSH
33298: LD_INT 4
33300: PPUSH
33301: LD_VAR 0 8
33305: PPUSH
33306: CALL_OW 1
33310: ST_TO_ADDR
// end ;
33311: LD_VAR 0 5
33315: RET
// export function DangerAtRange ( unit , range ) ; begin
33316: LD_INT 0
33318: PPUSH
// if not unit then
33319: LD_VAR 0 1
33323: NOT
33324: IFFALSE 33328
// exit ;
33326: GO 33373
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 255
33342: PPUSH
33343: LD_VAR 0 1
33347: PPUSH
33348: CALL_OW 250
33352: PPUSH
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 251
33362: PPUSH
33363: LD_VAR 0 2
33367: PPUSH
33368: CALL 31615 0 4
33372: ST_TO_ADDR
// end ;
33373: LD_VAR 0 3
33377: RET
// export function DangerInArea ( side , area ) ; begin
33378: LD_INT 0
33380: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33381: LD_ADDR_VAR 0 3
33385: PUSH
33386: LD_VAR 0 2
33390: PPUSH
33391: LD_INT 81
33393: PUSH
33394: LD_VAR 0 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PPUSH
33403: CALL_OW 70
33407: ST_TO_ADDR
// end ;
33408: LD_VAR 0 3
33412: RET
// export function IsExtension ( b ) ; begin
33413: LD_INT 0
33415: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33416: LD_ADDR_VAR 0 2
33420: PUSH
33421: LD_VAR 0 1
33425: PUSH
33426: LD_INT 23
33428: PUSH
33429: LD_INT 20
33431: PUSH
33432: LD_INT 22
33434: PUSH
33435: LD_INT 17
33437: PUSH
33438: LD_INT 24
33440: PUSH
33441: LD_INT 21
33443: PUSH
33444: LD_INT 19
33446: PUSH
33447: LD_INT 16
33449: PUSH
33450: LD_INT 25
33452: PUSH
33453: LD_INT 18
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: IN
33468: ST_TO_ADDR
// end ;
33469: LD_VAR 0 2
33473: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33474: LD_INT 0
33476: PPUSH
33477: PPUSH
33478: PPUSH
// result := [ ] ;
33479: LD_ADDR_VAR 0 4
33483: PUSH
33484: EMPTY
33485: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33486: LD_ADDR_VAR 0 5
33490: PUSH
33491: LD_VAR 0 2
33495: PPUSH
33496: LD_INT 21
33498: PUSH
33499: LD_INT 3
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 70
33510: ST_TO_ADDR
// if not tmp then
33511: LD_VAR 0 5
33515: NOT
33516: IFFALSE 33520
// exit ;
33518: GO 33584
// if checkLink then
33520: LD_VAR 0 3
33524: IFFALSE 33574
// begin for i in tmp do
33526: LD_ADDR_VAR 0 6
33530: PUSH
33531: LD_VAR 0 5
33535: PUSH
33536: FOR_IN
33537: IFFALSE 33572
// if GetBase ( i ) <> base then
33539: LD_VAR 0 6
33543: PPUSH
33544: CALL_OW 274
33548: PUSH
33549: LD_VAR 0 1
33553: NONEQUAL
33554: IFFALSE 33570
// ComLinkToBase ( base , i ) ;
33556: LD_VAR 0 1
33560: PPUSH
33561: LD_VAR 0 6
33565: PPUSH
33566: CALL_OW 169
33570: GO 33536
33572: POP
33573: POP
// end ; result := tmp ;
33574: LD_ADDR_VAR 0 4
33578: PUSH
33579: LD_VAR 0 5
33583: ST_TO_ADDR
// end ;
33584: LD_VAR 0 4
33588: RET
// export function ComComplete ( units , b ) ; var i ; begin
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
// if not units then
33593: LD_VAR 0 1
33597: NOT
33598: IFFALSE 33602
// exit ;
33600: GO 33692
// for i in units do
33602: LD_ADDR_VAR 0 4
33606: PUSH
33607: LD_VAR 0 1
33611: PUSH
33612: FOR_IN
33613: IFFALSE 33690
// if BuildingStatus ( b ) = bs_build then
33615: LD_VAR 0 2
33619: PPUSH
33620: CALL_OW 461
33624: PUSH
33625: LD_INT 1
33627: EQUAL
33628: IFFALSE 33688
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33630: LD_VAR 0 4
33634: PPUSH
33635: LD_STRING h
33637: PUSH
33638: LD_VAR 0 2
33642: PPUSH
33643: CALL_OW 250
33647: PUSH
33648: LD_VAR 0 2
33652: PPUSH
33653: CALL_OW 251
33657: PUSH
33658: LD_VAR 0 2
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: PPUSH
33684: CALL_OW 446
33688: GO 33612
33690: POP
33691: POP
// end ;
33692: LD_VAR 0 3
33696: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33697: LD_INT 0
33699: PPUSH
33700: PPUSH
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33705: LD_VAR 0 1
33709: NOT
33710: PUSH
33711: LD_VAR 0 1
33715: PPUSH
33716: CALL_OW 263
33720: PUSH
33721: LD_INT 2
33723: NONEQUAL
33724: OR
33725: IFFALSE 33729
// exit ;
33727: GO 34045
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33729: LD_ADDR_VAR 0 6
33733: PUSH
33734: LD_INT 22
33736: PUSH
33737: LD_VAR 0 1
33741: PPUSH
33742: CALL_OW 255
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: LD_INT 30
33756: PUSH
33757: LD_INT 36
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 34
33766: PUSH
33767: LD_INT 31
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PPUSH
33783: CALL_OW 69
33787: ST_TO_ADDR
// if not tmp then
33788: LD_VAR 0 6
33792: NOT
33793: IFFALSE 33797
// exit ;
33795: GO 34045
// result := [ ] ;
33797: LD_ADDR_VAR 0 2
33801: PUSH
33802: EMPTY
33803: ST_TO_ADDR
// for i in tmp do
33804: LD_ADDR_VAR 0 3
33808: PUSH
33809: LD_VAR 0 6
33813: PUSH
33814: FOR_IN
33815: IFFALSE 33886
// begin t := UnitsInside ( i ) ;
33817: LD_ADDR_VAR 0 4
33821: PUSH
33822: LD_VAR 0 3
33826: PPUSH
33827: CALL_OW 313
33831: ST_TO_ADDR
// if t then
33832: LD_VAR 0 4
33836: IFFALSE 33884
// for j in t do
33838: LD_ADDR_VAR 0 7
33842: PUSH
33843: LD_VAR 0 4
33847: PUSH
33848: FOR_IN
33849: IFFALSE 33882
// result := Replace ( result , result + 1 , j ) ;
33851: LD_ADDR_VAR 0 2
33855: PUSH
33856: LD_VAR 0 2
33860: PPUSH
33861: LD_VAR 0 2
33865: PUSH
33866: LD_INT 1
33868: PLUS
33869: PPUSH
33870: LD_VAR 0 7
33874: PPUSH
33875: CALL_OW 1
33879: ST_TO_ADDR
33880: GO 33848
33882: POP
33883: POP
// end ;
33884: GO 33814
33886: POP
33887: POP
// if not result then
33888: LD_VAR 0 2
33892: NOT
33893: IFFALSE 33897
// exit ;
33895: GO 34045
// mech := result [ 1 ] ;
33897: LD_ADDR_VAR 0 5
33901: PUSH
33902: LD_VAR 0 2
33906: PUSH
33907: LD_INT 1
33909: ARRAY
33910: ST_TO_ADDR
// if result > 1 then
33911: LD_VAR 0 2
33915: PUSH
33916: LD_INT 1
33918: GREATER
33919: IFFALSE 34031
// begin for i = 2 to result do
33921: LD_ADDR_VAR 0 3
33925: PUSH
33926: DOUBLE
33927: LD_INT 2
33929: DEC
33930: ST_TO_ADDR
33931: LD_VAR 0 2
33935: PUSH
33936: FOR_TO
33937: IFFALSE 34029
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33939: LD_ADDR_VAR 0 4
33943: PUSH
33944: LD_VAR 0 2
33948: PUSH
33949: LD_VAR 0 3
33953: ARRAY
33954: PPUSH
33955: LD_INT 3
33957: PPUSH
33958: CALL_OW 259
33962: PUSH
33963: LD_VAR 0 2
33967: PUSH
33968: LD_VAR 0 3
33972: ARRAY
33973: PPUSH
33974: CALL_OW 432
33978: MINUS
33979: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33980: LD_VAR 0 4
33984: PUSH
33985: LD_VAR 0 5
33989: PPUSH
33990: LD_INT 3
33992: PPUSH
33993: CALL_OW 259
33997: PUSH
33998: LD_VAR 0 5
34002: PPUSH
34003: CALL_OW 432
34007: MINUS
34008: GREATEREQUAL
34009: IFFALSE 34027
// mech := result [ i ] ;
34011: LD_ADDR_VAR 0 5
34015: PUSH
34016: LD_VAR 0 2
34020: PUSH
34021: LD_VAR 0 3
34025: ARRAY
34026: ST_TO_ADDR
// end ;
34027: GO 33936
34029: POP
34030: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34031: LD_VAR 0 1
34035: PPUSH
34036: LD_VAR 0 5
34040: PPUSH
34041: CALL_OW 135
// end ;
34045: LD_VAR 0 2
34049: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34050: LD_INT 0
34052: PPUSH
34053: PPUSH
34054: PPUSH
34055: PPUSH
34056: PPUSH
34057: PPUSH
34058: PPUSH
34059: PPUSH
34060: PPUSH
34061: PPUSH
34062: PPUSH
34063: PPUSH
34064: PPUSH
// result := [ ] ;
34065: LD_ADDR_VAR 0 7
34069: PUSH
34070: EMPTY
34071: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34072: LD_VAR 0 1
34076: PPUSH
34077: CALL_OW 266
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: IN
34092: NOT
34093: IFFALSE 34097
// exit ;
34095: GO 35731
// if name then
34097: LD_VAR 0 3
34101: IFFALSE 34117
// SetBName ( base_dep , name ) ;
34103: LD_VAR 0 1
34107: PPUSH
34108: LD_VAR 0 3
34112: PPUSH
34113: CALL_OW 500
// base := GetBase ( base_dep ) ;
34117: LD_ADDR_VAR 0 15
34121: PUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 274
34131: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34132: LD_ADDR_VAR 0 16
34136: PUSH
34137: LD_VAR 0 1
34141: PPUSH
34142: CALL_OW 255
34146: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34147: LD_ADDR_VAR 0 17
34151: PUSH
34152: LD_VAR 0 1
34156: PPUSH
34157: CALL_OW 248
34161: ST_TO_ADDR
// if sources then
34162: LD_VAR 0 5
34166: IFFALSE 34213
// for i = 1 to 3 do
34168: LD_ADDR_VAR 0 8
34172: PUSH
34173: DOUBLE
34174: LD_INT 1
34176: DEC
34177: ST_TO_ADDR
34178: LD_INT 3
34180: PUSH
34181: FOR_TO
34182: IFFALSE 34211
// AddResourceType ( base , i , sources [ i ] ) ;
34184: LD_VAR 0 15
34188: PPUSH
34189: LD_VAR 0 8
34193: PPUSH
34194: LD_VAR 0 5
34198: PUSH
34199: LD_VAR 0 8
34203: ARRAY
34204: PPUSH
34205: CALL_OW 276
34209: GO 34181
34211: POP
34212: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34213: LD_ADDR_VAR 0 18
34217: PUSH
34218: LD_VAR 0 15
34222: PPUSH
34223: LD_VAR 0 2
34227: PPUSH
34228: LD_INT 1
34230: PPUSH
34231: CALL 33474 0 3
34235: ST_TO_ADDR
// InitHc ;
34236: CALL_OW 19
// InitUc ;
34240: CALL_OW 18
// uc_side := side ;
34244: LD_ADDR_OWVAR 20
34248: PUSH
34249: LD_VAR 0 16
34253: ST_TO_ADDR
// uc_nation := nation ;
34254: LD_ADDR_OWVAR 21
34258: PUSH
34259: LD_VAR 0 17
34263: ST_TO_ADDR
// if buildings then
34264: LD_VAR 0 18
34268: IFFALSE 35590
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34270: LD_ADDR_VAR 0 19
34274: PUSH
34275: LD_VAR 0 18
34279: PPUSH
34280: LD_INT 2
34282: PUSH
34283: LD_INT 30
34285: PUSH
34286: LD_INT 29
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 30
34295: PUSH
34296: LD_INT 30
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: PPUSH
34308: CALL_OW 72
34312: ST_TO_ADDR
// if tmp then
34313: LD_VAR 0 19
34317: IFFALSE 34365
// for i in tmp do
34319: LD_ADDR_VAR 0 8
34323: PUSH
34324: LD_VAR 0 19
34328: PUSH
34329: FOR_IN
34330: IFFALSE 34363
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34332: LD_VAR 0 8
34336: PPUSH
34337: CALL_OW 250
34341: PPUSH
34342: LD_VAR 0 8
34346: PPUSH
34347: CALL_OW 251
34351: PPUSH
34352: LD_VAR 0 16
34356: PPUSH
34357: CALL_OW 441
34361: GO 34329
34363: POP
34364: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34365: LD_VAR 0 18
34369: PPUSH
34370: LD_INT 2
34372: PUSH
34373: LD_INT 30
34375: PUSH
34376: LD_INT 32
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 30
34385: PUSH
34386: LD_INT 33
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: PPUSH
34398: CALL_OW 72
34402: IFFALSE 34490
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34404: LD_ADDR_VAR 0 8
34408: PUSH
34409: LD_VAR 0 18
34413: PPUSH
34414: LD_INT 2
34416: PUSH
34417: LD_INT 30
34419: PUSH
34420: LD_INT 32
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 30
34429: PUSH
34430: LD_INT 33
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: PPUSH
34442: CALL_OW 72
34446: PUSH
34447: FOR_IN
34448: IFFALSE 34488
// begin if not GetBWeapon ( i ) then
34450: LD_VAR 0 8
34454: PPUSH
34455: CALL_OW 269
34459: NOT
34460: IFFALSE 34486
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34462: LD_VAR 0 8
34466: PPUSH
34467: LD_VAR 0 8
34471: PPUSH
34472: LD_VAR 0 2
34476: PPUSH
34477: CALL 35736 0 2
34481: PPUSH
34482: CALL_OW 431
// end ;
34486: GO 34447
34488: POP
34489: POP
// end ; for i = 1 to personel do
34490: LD_ADDR_VAR 0 8
34494: PUSH
34495: DOUBLE
34496: LD_INT 1
34498: DEC
34499: ST_TO_ADDR
34500: LD_VAR 0 6
34504: PUSH
34505: FOR_TO
34506: IFFALSE 35570
// begin if i > 4 then
34508: LD_VAR 0 8
34512: PUSH
34513: LD_INT 4
34515: GREATER
34516: IFFALSE 34520
// break ;
34518: GO 35570
// case i of 1 :
34520: LD_VAR 0 8
34524: PUSH
34525: LD_INT 1
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34533
34531: GO 34613
34533: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34534: LD_ADDR_VAR 0 12
34538: PUSH
34539: LD_VAR 0 18
34543: PPUSH
34544: LD_INT 22
34546: PUSH
34547: LD_VAR 0 16
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 58
34558: PUSH
34559: EMPTY
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 30
34567: PUSH
34568: LD_INT 32
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 30
34577: PUSH
34578: LD_INT 4
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 30
34587: PUSH
34588: LD_INT 5
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: PPUSH
34606: CALL_OW 72
34610: ST_TO_ADDR
34611: GO 34835
34613: LD_INT 2
34615: DOUBLE
34616: EQUAL
34617: IFTRUE 34621
34619: GO 34683
34621: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34622: LD_ADDR_VAR 0 12
34626: PUSH
34627: LD_VAR 0 18
34631: PPUSH
34632: LD_INT 22
34634: PUSH
34635: LD_VAR 0 16
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: LD_INT 30
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 30
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PPUSH
34676: CALL_OW 72
34680: ST_TO_ADDR
34681: GO 34835
34683: LD_INT 3
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34753
34691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34692: LD_ADDR_VAR 0 12
34696: PUSH
34697: LD_VAR 0 18
34701: PPUSH
34702: LD_INT 22
34704: PUSH
34705: LD_VAR 0 16
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 30
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 30
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PPUSH
34746: CALL_OW 72
34750: ST_TO_ADDR
34751: GO 34835
34753: LD_INT 4
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 34834
34761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34762: LD_ADDR_VAR 0 12
34766: PUSH
34767: LD_VAR 0 18
34771: PPUSH
34772: LD_INT 22
34774: PUSH
34775: LD_VAR 0 16
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: LD_INT 30
34789: PUSH
34790: LD_INT 6
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 30
34799: PUSH
34800: LD_INT 7
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 30
34809: PUSH
34810: LD_INT 8
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PPUSH
34827: CALL_OW 72
34831: ST_TO_ADDR
34832: GO 34835
34834: POP
// if i = 1 then
34835: LD_VAR 0 8
34839: PUSH
34840: LD_INT 1
34842: EQUAL
34843: IFFALSE 34954
// begin tmp := [ ] ;
34845: LD_ADDR_VAR 0 19
34849: PUSH
34850: EMPTY
34851: ST_TO_ADDR
// for j in f do
34852: LD_ADDR_VAR 0 9
34856: PUSH
34857: LD_VAR 0 12
34861: PUSH
34862: FOR_IN
34863: IFFALSE 34936
// if GetBType ( j ) = b_bunker then
34865: LD_VAR 0 9
34869: PPUSH
34870: CALL_OW 266
34874: PUSH
34875: LD_INT 32
34877: EQUAL
34878: IFFALSE 34905
// tmp := Insert ( tmp , 1 , j ) else
34880: LD_ADDR_VAR 0 19
34884: PUSH
34885: LD_VAR 0 19
34889: PPUSH
34890: LD_INT 1
34892: PPUSH
34893: LD_VAR 0 9
34897: PPUSH
34898: CALL_OW 2
34902: ST_TO_ADDR
34903: GO 34934
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34905: LD_ADDR_VAR 0 19
34909: PUSH
34910: LD_VAR 0 19
34914: PPUSH
34915: LD_VAR 0 19
34919: PUSH
34920: LD_INT 1
34922: PLUS
34923: PPUSH
34924: LD_VAR 0 9
34928: PPUSH
34929: CALL_OW 2
34933: ST_TO_ADDR
34934: GO 34862
34936: POP
34937: POP
// if tmp then
34938: LD_VAR 0 19
34942: IFFALSE 34954
// f := tmp ;
34944: LD_ADDR_VAR 0 12
34948: PUSH
34949: LD_VAR 0 19
34953: ST_TO_ADDR
// end ; x := personel [ i ] ;
34954: LD_ADDR_VAR 0 13
34958: PUSH
34959: LD_VAR 0 6
34963: PUSH
34964: LD_VAR 0 8
34968: ARRAY
34969: ST_TO_ADDR
// if x = - 1 then
34970: LD_VAR 0 13
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: EQUAL
34979: IFFALSE 35188
// begin for j in f do
34981: LD_ADDR_VAR 0 9
34985: PUSH
34986: LD_VAR 0 12
34990: PUSH
34991: FOR_IN
34992: IFFALSE 35184
// repeat InitHc ;
34994: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34998: LD_VAR 0 9
35002: PPUSH
35003: CALL_OW 266
35007: PUSH
35008: LD_INT 5
35010: EQUAL
35011: IFFALSE 35081
// begin if UnitsInside ( j ) < 3 then
35013: LD_VAR 0 9
35017: PPUSH
35018: CALL_OW 313
35022: PUSH
35023: LD_INT 3
35025: LESS
35026: IFFALSE 35062
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35028: LD_INT 0
35030: PPUSH
35031: LD_INT 5
35033: PUSH
35034: LD_INT 8
35036: PUSH
35037: LD_INT 9
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: PUSH
35045: LD_VAR 0 17
35049: ARRAY
35050: PPUSH
35051: LD_VAR 0 4
35055: PPUSH
35056: CALL_OW 380
35060: GO 35079
// PrepareHuman ( false , i , skill ) ;
35062: LD_INT 0
35064: PPUSH
35065: LD_VAR 0 8
35069: PPUSH
35070: LD_VAR 0 4
35074: PPUSH
35075: CALL_OW 380
// end else
35079: GO 35098
// PrepareHuman ( false , i , skill ) ;
35081: LD_INT 0
35083: PPUSH
35084: LD_VAR 0 8
35088: PPUSH
35089: LD_VAR 0 4
35093: PPUSH
35094: CALL_OW 380
// un := CreateHuman ;
35098: LD_ADDR_VAR 0 14
35102: PUSH
35103: CALL_OW 44
35107: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35108: LD_ADDR_VAR 0 7
35112: PUSH
35113: LD_VAR 0 7
35117: PPUSH
35118: LD_INT 1
35120: PPUSH
35121: LD_VAR 0 14
35125: PPUSH
35126: CALL_OW 2
35130: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35131: LD_VAR 0 14
35135: PPUSH
35136: LD_VAR 0 9
35140: PPUSH
35141: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35145: LD_VAR 0 9
35149: PPUSH
35150: CALL_OW 313
35154: PUSH
35155: LD_INT 6
35157: EQUAL
35158: PUSH
35159: LD_VAR 0 9
35163: PPUSH
35164: CALL_OW 266
35168: PUSH
35169: LD_INT 32
35171: PUSH
35172: LD_INT 31
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: IN
35179: OR
35180: IFFALSE 34994
35182: GO 34991
35184: POP
35185: POP
// end else
35186: GO 35568
// for j = 1 to x do
35188: LD_ADDR_VAR 0 9
35192: PUSH
35193: DOUBLE
35194: LD_INT 1
35196: DEC
35197: ST_TO_ADDR
35198: LD_VAR 0 13
35202: PUSH
35203: FOR_TO
35204: IFFALSE 35566
// begin InitHc ;
35206: CALL_OW 19
// if not f then
35210: LD_VAR 0 12
35214: NOT
35215: IFFALSE 35304
// begin PrepareHuman ( false , i , skill ) ;
35217: LD_INT 0
35219: PPUSH
35220: LD_VAR 0 8
35224: PPUSH
35225: LD_VAR 0 4
35229: PPUSH
35230: CALL_OW 380
// un := CreateHuman ;
35234: LD_ADDR_VAR 0 14
35238: PUSH
35239: CALL_OW 44
35243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35244: LD_ADDR_VAR 0 7
35248: PUSH
35249: LD_VAR 0 7
35253: PPUSH
35254: LD_INT 1
35256: PPUSH
35257: LD_VAR 0 14
35261: PPUSH
35262: CALL_OW 2
35266: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35267: LD_VAR 0 14
35271: PPUSH
35272: LD_VAR 0 1
35276: PPUSH
35277: CALL_OW 250
35281: PPUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 251
35291: PPUSH
35292: LD_INT 10
35294: PPUSH
35295: LD_INT 0
35297: PPUSH
35298: CALL_OW 50
// continue ;
35302: GO 35203
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35304: LD_VAR 0 12
35308: PUSH
35309: LD_INT 1
35311: ARRAY
35312: PPUSH
35313: CALL_OW 313
35317: PUSH
35318: LD_VAR 0 12
35322: PUSH
35323: LD_INT 1
35325: ARRAY
35326: PPUSH
35327: CALL_OW 266
35331: PUSH
35332: LD_INT 32
35334: PUSH
35335: LD_INT 31
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: IN
35342: AND
35343: PUSH
35344: LD_VAR 0 12
35348: PUSH
35349: LD_INT 1
35351: ARRAY
35352: PPUSH
35353: CALL_OW 313
35357: PUSH
35358: LD_INT 6
35360: EQUAL
35361: OR
35362: IFFALSE 35382
// f := Delete ( f , 1 ) ;
35364: LD_ADDR_VAR 0 12
35368: PUSH
35369: LD_VAR 0 12
35373: PPUSH
35374: LD_INT 1
35376: PPUSH
35377: CALL_OW 3
35381: ST_TO_ADDR
// if not f then
35382: LD_VAR 0 12
35386: NOT
35387: IFFALSE 35405
// begin x := x + 2 ;
35389: LD_ADDR_VAR 0 13
35393: PUSH
35394: LD_VAR 0 13
35398: PUSH
35399: LD_INT 2
35401: PLUS
35402: ST_TO_ADDR
// continue ;
35403: GO 35203
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35405: LD_VAR 0 12
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: PPUSH
35414: CALL_OW 266
35418: PUSH
35419: LD_INT 5
35421: EQUAL
35422: IFFALSE 35496
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35424: LD_VAR 0 12
35428: PUSH
35429: LD_INT 1
35431: ARRAY
35432: PPUSH
35433: CALL_OW 313
35437: PUSH
35438: LD_INT 3
35440: LESS
35441: IFFALSE 35477
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35443: LD_INT 0
35445: PPUSH
35446: LD_INT 5
35448: PUSH
35449: LD_INT 8
35451: PUSH
35452: LD_INT 9
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: PUSH
35460: LD_VAR 0 17
35464: ARRAY
35465: PPUSH
35466: LD_VAR 0 4
35470: PPUSH
35471: CALL_OW 380
35475: GO 35494
// PrepareHuman ( false , i , skill ) ;
35477: LD_INT 0
35479: PPUSH
35480: LD_VAR 0 8
35484: PPUSH
35485: LD_VAR 0 4
35489: PPUSH
35490: CALL_OW 380
// end else
35494: GO 35513
// PrepareHuman ( false , i , skill ) ;
35496: LD_INT 0
35498: PPUSH
35499: LD_VAR 0 8
35503: PPUSH
35504: LD_VAR 0 4
35508: PPUSH
35509: CALL_OW 380
// un := CreateHuman ;
35513: LD_ADDR_VAR 0 14
35517: PUSH
35518: CALL_OW 44
35522: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35523: LD_ADDR_VAR 0 7
35527: PUSH
35528: LD_VAR 0 7
35532: PPUSH
35533: LD_INT 1
35535: PPUSH
35536: LD_VAR 0 14
35540: PPUSH
35541: CALL_OW 2
35545: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35546: LD_VAR 0 14
35550: PPUSH
35551: LD_VAR 0 12
35555: PUSH
35556: LD_INT 1
35558: ARRAY
35559: PPUSH
35560: CALL_OW 52
// end ;
35564: GO 35203
35566: POP
35567: POP
// end ;
35568: GO 34505
35570: POP
35571: POP
// result := result ^ buildings ;
35572: LD_ADDR_VAR 0 7
35576: PUSH
35577: LD_VAR 0 7
35581: PUSH
35582: LD_VAR 0 18
35586: ADD
35587: ST_TO_ADDR
// end else
35588: GO 35731
// begin for i = 1 to personel do
35590: LD_ADDR_VAR 0 8
35594: PUSH
35595: DOUBLE
35596: LD_INT 1
35598: DEC
35599: ST_TO_ADDR
35600: LD_VAR 0 6
35604: PUSH
35605: FOR_TO
35606: IFFALSE 35729
// begin if i > 4 then
35608: LD_VAR 0 8
35612: PUSH
35613: LD_INT 4
35615: GREATER
35616: IFFALSE 35620
// break ;
35618: GO 35729
// x := personel [ i ] ;
35620: LD_ADDR_VAR 0 13
35624: PUSH
35625: LD_VAR 0 6
35629: PUSH
35630: LD_VAR 0 8
35634: ARRAY
35635: ST_TO_ADDR
// if x = - 1 then
35636: LD_VAR 0 13
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: EQUAL
35645: IFFALSE 35649
// continue ;
35647: GO 35605
// PrepareHuman ( false , i , skill ) ;
35649: LD_INT 0
35651: PPUSH
35652: LD_VAR 0 8
35656: PPUSH
35657: LD_VAR 0 4
35661: PPUSH
35662: CALL_OW 380
// un := CreateHuman ;
35666: LD_ADDR_VAR 0 14
35670: PUSH
35671: CALL_OW 44
35675: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35676: LD_VAR 0 14
35680: PPUSH
35681: LD_VAR 0 1
35685: PPUSH
35686: CALL_OW 250
35690: PPUSH
35691: LD_VAR 0 1
35695: PPUSH
35696: CALL_OW 251
35700: PPUSH
35701: LD_INT 10
35703: PPUSH
35704: LD_INT 0
35706: PPUSH
35707: CALL_OW 50
// result := result ^ un ;
35711: LD_ADDR_VAR 0 7
35715: PUSH
35716: LD_VAR 0 7
35720: PUSH
35721: LD_VAR 0 14
35725: ADD
35726: ST_TO_ADDR
// end ;
35727: GO 35605
35729: POP
35730: POP
// end ; end ;
35731: LD_VAR 0 7
35735: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35736: LD_INT 0
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
35753: PPUSH
// result := false ;
35754: LD_ADDR_VAR 0 3
35758: PUSH
35759: LD_INT 0
35761: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35762: LD_VAR 0 1
35766: NOT
35767: PUSH
35768: LD_VAR 0 1
35772: PPUSH
35773: CALL_OW 266
35777: PUSH
35778: LD_INT 32
35780: PUSH
35781: LD_INT 33
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: IN
35788: NOT
35789: OR
35790: IFFALSE 35794
// exit ;
35792: GO 36903
// nat := GetNation ( tower ) ;
35794: LD_ADDR_VAR 0 12
35798: PUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL_OW 248
35808: ST_TO_ADDR
// side := GetSide ( tower ) ;
35809: LD_ADDR_VAR 0 16
35813: PUSH
35814: LD_VAR 0 1
35818: PPUSH
35819: CALL_OW 255
35823: ST_TO_ADDR
// x := GetX ( tower ) ;
35824: LD_ADDR_VAR 0 10
35828: PUSH
35829: LD_VAR 0 1
35833: PPUSH
35834: CALL_OW 250
35838: ST_TO_ADDR
// y := GetY ( tower ) ;
35839: LD_ADDR_VAR 0 11
35843: PUSH
35844: LD_VAR 0 1
35848: PPUSH
35849: CALL_OW 251
35853: ST_TO_ADDR
// if not x or not y then
35854: LD_VAR 0 10
35858: NOT
35859: PUSH
35860: LD_VAR 0 11
35864: NOT
35865: OR
35866: IFFALSE 35870
// exit ;
35868: GO 36903
// weapon := 0 ;
35870: LD_ADDR_VAR 0 18
35874: PUSH
35875: LD_INT 0
35877: ST_TO_ADDR
// fac_list := [ ] ;
35878: LD_ADDR_VAR 0 17
35882: PUSH
35883: EMPTY
35884: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35885: LD_ADDR_VAR 0 6
35889: PUSH
35890: LD_VAR 0 1
35894: PPUSH
35895: CALL_OW 274
35899: PPUSH
35900: LD_VAR 0 2
35904: PPUSH
35905: LD_INT 0
35907: PPUSH
35908: CALL 33474 0 3
35912: PPUSH
35913: LD_INT 30
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PPUSH
35923: CALL_OW 72
35927: ST_TO_ADDR
// if not factories then
35928: LD_VAR 0 6
35932: NOT
35933: IFFALSE 35937
// exit ;
35935: GO 36903
// for i in factories do
35937: LD_ADDR_VAR 0 8
35941: PUSH
35942: LD_VAR 0 6
35946: PUSH
35947: FOR_IN
35948: IFFALSE 35973
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35950: LD_ADDR_VAR 0 17
35954: PUSH
35955: LD_VAR 0 17
35959: PUSH
35960: LD_VAR 0 8
35964: PPUSH
35965: CALL_OW 478
35969: UNION
35970: ST_TO_ADDR
35971: GO 35947
35973: POP
35974: POP
// if not fac_list then
35975: LD_VAR 0 17
35979: NOT
35980: IFFALSE 35984
// exit ;
35982: GO 36903
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35984: LD_ADDR_VAR 0 5
35988: PUSH
35989: LD_INT 4
35991: PUSH
35992: LD_INT 5
35994: PUSH
35995: LD_INT 9
35997: PUSH
35998: LD_INT 10
36000: PUSH
36001: LD_INT 6
36003: PUSH
36004: LD_INT 7
36006: PUSH
36007: LD_INT 11
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 27
36021: PUSH
36022: LD_INT 28
36024: PUSH
36025: LD_INT 26
36027: PUSH
36028: LD_INT 30
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 43
36039: PUSH
36040: LD_INT 44
36042: PUSH
36043: LD_INT 46
36045: PUSH
36046: LD_INT 45
36048: PUSH
36049: LD_INT 47
36051: PUSH
36052: LD_INT 49
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: PUSH
36068: LD_VAR 0 12
36072: ARRAY
36073: ST_TO_ADDR
// list := list isect fac_list ;
36074: LD_ADDR_VAR 0 5
36078: PUSH
36079: LD_VAR 0 5
36083: PUSH
36084: LD_VAR 0 17
36088: ISECT
36089: ST_TO_ADDR
// if not list then
36090: LD_VAR 0 5
36094: NOT
36095: IFFALSE 36099
// exit ;
36097: GO 36903
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36099: LD_VAR 0 12
36103: PUSH
36104: LD_INT 3
36106: EQUAL
36107: PUSH
36108: LD_INT 49
36110: PUSH
36111: LD_VAR 0 5
36115: IN
36116: AND
36117: PUSH
36118: LD_INT 31
36120: PPUSH
36121: LD_VAR 0 16
36125: PPUSH
36126: CALL_OW 321
36130: PUSH
36131: LD_INT 2
36133: EQUAL
36134: AND
36135: IFFALSE 36195
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36137: LD_INT 22
36139: PUSH
36140: LD_VAR 0 16
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 35
36151: PUSH
36152: LD_INT 49
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 91
36161: PUSH
36162: LD_VAR 0 1
36166: PUSH
36167: LD_INT 10
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: PPUSH
36180: CALL_OW 69
36184: NOT
36185: IFFALSE 36195
// weapon := ru_time_lapser ;
36187: LD_ADDR_VAR 0 18
36191: PUSH
36192: LD_INT 49
36194: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36195: LD_VAR 0 12
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: IN
36210: PUSH
36211: LD_INT 11
36213: PUSH
36214: LD_VAR 0 5
36218: IN
36219: PUSH
36220: LD_INT 30
36222: PUSH
36223: LD_VAR 0 5
36227: IN
36228: OR
36229: AND
36230: PUSH
36231: LD_INT 6
36233: PPUSH
36234: LD_VAR 0 16
36238: PPUSH
36239: CALL_OW 321
36243: PUSH
36244: LD_INT 2
36246: EQUAL
36247: AND
36248: IFFALSE 36413
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36250: LD_INT 22
36252: PUSH
36253: LD_VAR 0 16
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: LD_INT 35
36267: PUSH
36268: LD_INT 11
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 35
36277: PUSH
36278: LD_INT 30
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 91
36292: PUSH
36293: LD_VAR 0 1
36297: PUSH
36298: LD_INT 18
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: PPUSH
36311: CALL_OW 69
36315: NOT
36316: PUSH
36317: LD_INT 22
36319: PUSH
36320: LD_VAR 0 16
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: LD_INT 30
36334: PUSH
36335: LD_INT 32
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 33
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 91
36359: PUSH
36360: LD_VAR 0 1
36364: PUSH
36365: LD_INT 12
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: PUSH
36378: EMPTY
36379: LIST
36380: PPUSH
36381: CALL_OW 69
36385: PUSH
36386: LD_INT 2
36388: GREATER
36389: AND
36390: IFFALSE 36413
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36392: LD_ADDR_VAR 0 18
36396: PUSH
36397: LD_INT 11
36399: PUSH
36400: LD_INT 30
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_VAR 0 12
36411: ARRAY
36412: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36413: LD_VAR 0 18
36417: NOT
36418: PUSH
36419: LD_INT 40
36421: PPUSH
36422: LD_VAR 0 16
36426: PPUSH
36427: CALL_OW 321
36431: PUSH
36432: LD_INT 2
36434: EQUAL
36435: AND
36436: PUSH
36437: LD_INT 7
36439: PUSH
36440: LD_VAR 0 5
36444: IN
36445: PUSH
36446: LD_INT 28
36448: PUSH
36449: LD_VAR 0 5
36453: IN
36454: OR
36455: PUSH
36456: LD_INT 45
36458: PUSH
36459: LD_VAR 0 5
36463: IN
36464: OR
36465: AND
36466: IFFALSE 36720
// begin hex := GetHexInfo ( x , y ) ;
36468: LD_ADDR_VAR 0 4
36472: PUSH
36473: LD_VAR 0 10
36477: PPUSH
36478: LD_VAR 0 11
36482: PPUSH
36483: CALL_OW 546
36487: ST_TO_ADDR
// if hex [ 1 ] then
36488: LD_VAR 0 4
36492: PUSH
36493: LD_INT 1
36495: ARRAY
36496: IFFALSE 36500
// exit ;
36498: GO 36903
// height := hex [ 2 ] ;
36500: LD_ADDR_VAR 0 15
36504: PUSH
36505: LD_VAR 0 4
36509: PUSH
36510: LD_INT 2
36512: ARRAY
36513: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36514: LD_ADDR_VAR 0 14
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: LD_INT 5
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: ST_TO_ADDR
// for i in tmp do
36537: LD_ADDR_VAR 0 8
36541: PUSH
36542: LD_VAR 0 14
36546: PUSH
36547: FOR_IN
36548: IFFALSE 36718
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36550: LD_ADDR_VAR 0 9
36554: PUSH
36555: LD_VAR 0 10
36559: PPUSH
36560: LD_VAR 0 8
36564: PPUSH
36565: LD_INT 5
36567: PPUSH
36568: CALL_OW 272
36572: PUSH
36573: LD_VAR 0 11
36577: PPUSH
36578: LD_VAR 0 8
36582: PPUSH
36583: LD_INT 5
36585: PPUSH
36586: CALL_OW 273
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36595: LD_VAR 0 9
36599: PUSH
36600: LD_INT 1
36602: ARRAY
36603: PPUSH
36604: LD_VAR 0 9
36608: PUSH
36609: LD_INT 2
36611: ARRAY
36612: PPUSH
36613: CALL_OW 488
36617: IFFALSE 36716
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36619: LD_ADDR_VAR 0 4
36623: PUSH
36624: LD_VAR 0 9
36628: PUSH
36629: LD_INT 1
36631: ARRAY
36632: PPUSH
36633: LD_VAR 0 9
36637: PUSH
36638: LD_INT 2
36640: ARRAY
36641: PPUSH
36642: CALL_OW 546
36646: ST_TO_ADDR
// if hex [ 1 ] then
36647: LD_VAR 0 4
36651: PUSH
36652: LD_INT 1
36654: ARRAY
36655: IFFALSE 36659
// continue ;
36657: GO 36547
// h := hex [ 2 ] ;
36659: LD_ADDR_VAR 0 13
36663: PUSH
36664: LD_VAR 0 4
36668: PUSH
36669: LD_INT 2
36671: ARRAY
36672: ST_TO_ADDR
// if h + 7 < height then
36673: LD_VAR 0 13
36677: PUSH
36678: LD_INT 7
36680: PLUS
36681: PUSH
36682: LD_VAR 0 15
36686: LESS
36687: IFFALSE 36716
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36689: LD_ADDR_VAR 0 18
36693: PUSH
36694: LD_INT 7
36696: PUSH
36697: LD_INT 28
36699: PUSH
36700: LD_INT 45
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: PUSH
36708: LD_VAR 0 12
36712: ARRAY
36713: ST_TO_ADDR
// break ;
36714: GO 36718
// end ; end ; end ;
36716: GO 36547
36718: POP
36719: POP
// end ; if not weapon then
36720: LD_VAR 0 18
36724: NOT
36725: IFFALSE 36785
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36727: LD_ADDR_VAR 0 5
36731: PUSH
36732: LD_VAR 0 5
36736: PUSH
36737: LD_INT 11
36739: PUSH
36740: LD_INT 30
36742: PUSH
36743: LD_INT 49
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: DIFF
36751: ST_TO_ADDR
// if not list then
36752: LD_VAR 0 5
36756: NOT
36757: IFFALSE 36761
// exit ;
36759: GO 36903
// weapon := list [ rand ( 1 , list ) ] ;
36761: LD_ADDR_VAR 0 18
36765: PUSH
36766: LD_VAR 0 5
36770: PUSH
36771: LD_INT 1
36773: PPUSH
36774: LD_VAR 0 5
36778: PPUSH
36779: CALL_OW 12
36783: ARRAY
36784: ST_TO_ADDR
// end ; if weapon then
36785: LD_VAR 0 18
36789: IFFALSE 36903
// begin tmp := CostOfWeapon ( weapon ) ;
36791: LD_ADDR_VAR 0 14
36795: PUSH
36796: LD_VAR 0 18
36800: PPUSH
36801: CALL_OW 451
36805: ST_TO_ADDR
// j := GetBase ( tower ) ;
36806: LD_ADDR_VAR 0 9
36810: PUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: CALL_OW 274
36820: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36821: LD_VAR 0 9
36825: PPUSH
36826: LD_INT 1
36828: PPUSH
36829: CALL_OW 275
36833: PUSH
36834: LD_VAR 0 14
36838: PUSH
36839: LD_INT 1
36841: ARRAY
36842: GREATEREQUAL
36843: PUSH
36844: LD_VAR 0 9
36848: PPUSH
36849: LD_INT 2
36851: PPUSH
36852: CALL_OW 275
36856: PUSH
36857: LD_VAR 0 14
36861: PUSH
36862: LD_INT 2
36864: ARRAY
36865: GREATEREQUAL
36866: AND
36867: PUSH
36868: LD_VAR 0 9
36872: PPUSH
36873: LD_INT 3
36875: PPUSH
36876: CALL_OW 275
36880: PUSH
36881: LD_VAR 0 14
36885: PUSH
36886: LD_INT 3
36888: ARRAY
36889: GREATEREQUAL
36890: AND
36891: IFFALSE 36903
// result := weapon ;
36893: LD_ADDR_VAR 0 3
36897: PUSH
36898: LD_VAR 0 18
36902: ST_TO_ADDR
// end ; end ;
36903: LD_VAR 0 3
36907: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36908: LD_INT 0
36910: PPUSH
36911: PPUSH
// result := true ;
36912: LD_ADDR_VAR 0 3
36916: PUSH
36917: LD_INT 1
36919: ST_TO_ADDR
// if array1 = array2 then
36920: LD_VAR 0 1
36924: PUSH
36925: LD_VAR 0 2
36929: EQUAL
36930: IFFALSE 36990
// begin for i = 1 to array1 do
36932: LD_ADDR_VAR 0 4
36936: PUSH
36937: DOUBLE
36938: LD_INT 1
36940: DEC
36941: ST_TO_ADDR
36942: LD_VAR 0 1
36946: PUSH
36947: FOR_TO
36948: IFFALSE 36986
// if array1 [ i ] <> array2 [ i ] then
36950: LD_VAR 0 1
36954: PUSH
36955: LD_VAR 0 4
36959: ARRAY
36960: PUSH
36961: LD_VAR 0 2
36965: PUSH
36966: LD_VAR 0 4
36970: ARRAY
36971: NONEQUAL
36972: IFFALSE 36984
// begin result := false ;
36974: LD_ADDR_VAR 0 3
36978: PUSH
36979: LD_INT 0
36981: ST_TO_ADDR
// break ;
36982: GO 36986
// end ;
36984: GO 36947
36986: POP
36987: POP
// end else
36988: GO 36998
// result := false ;
36990: LD_ADDR_VAR 0 3
36994: PUSH
36995: LD_INT 0
36997: ST_TO_ADDR
// end ;
36998: LD_VAR 0 3
37002: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37003: LD_INT 0
37005: PPUSH
37006: PPUSH
// if not array1 or not array2 then
37007: LD_VAR 0 1
37011: NOT
37012: PUSH
37013: LD_VAR 0 2
37017: NOT
37018: OR
37019: IFFALSE 37023
// exit ;
37021: GO 37087
// result := true ;
37023: LD_ADDR_VAR 0 3
37027: PUSH
37028: LD_INT 1
37030: ST_TO_ADDR
// for i = 1 to array1 do
37031: LD_ADDR_VAR 0 4
37035: PUSH
37036: DOUBLE
37037: LD_INT 1
37039: DEC
37040: ST_TO_ADDR
37041: LD_VAR 0 1
37045: PUSH
37046: FOR_TO
37047: IFFALSE 37085
// if array1 [ i ] <> array2 [ i ] then
37049: LD_VAR 0 1
37053: PUSH
37054: LD_VAR 0 4
37058: ARRAY
37059: PUSH
37060: LD_VAR 0 2
37064: PUSH
37065: LD_VAR 0 4
37069: ARRAY
37070: NONEQUAL
37071: IFFALSE 37083
// begin result := false ;
37073: LD_ADDR_VAR 0 3
37077: PUSH
37078: LD_INT 0
37080: ST_TO_ADDR
// break ;
37081: GO 37085
// end ;
37083: GO 37046
37085: POP
37086: POP
// end ;
37087: LD_VAR 0 3
37091: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37092: LD_INT 0
37094: PPUSH
37095: PPUSH
37096: PPUSH
// pom := GetBase ( fac ) ;
37097: LD_ADDR_VAR 0 5
37101: PUSH
37102: LD_VAR 0 1
37106: PPUSH
37107: CALL_OW 274
37111: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37112: LD_ADDR_VAR 0 4
37116: PUSH
37117: LD_VAR 0 2
37121: PUSH
37122: LD_INT 1
37124: ARRAY
37125: PPUSH
37126: LD_VAR 0 2
37130: PUSH
37131: LD_INT 2
37133: ARRAY
37134: PPUSH
37135: LD_VAR 0 2
37139: PUSH
37140: LD_INT 3
37142: ARRAY
37143: PPUSH
37144: LD_VAR 0 2
37148: PUSH
37149: LD_INT 4
37151: ARRAY
37152: PPUSH
37153: CALL_OW 449
37157: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: LD_VAR 0 5
37167: PPUSH
37168: LD_INT 1
37170: PPUSH
37171: CALL_OW 275
37175: PUSH
37176: LD_VAR 0 4
37180: PUSH
37181: LD_INT 1
37183: ARRAY
37184: GREATEREQUAL
37185: PUSH
37186: LD_VAR 0 5
37190: PPUSH
37191: LD_INT 2
37193: PPUSH
37194: CALL_OW 275
37198: PUSH
37199: LD_VAR 0 4
37203: PUSH
37204: LD_INT 2
37206: ARRAY
37207: GREATEREQUAL
37208: AND
37209: PUSH
37210: LD_VAR 0 5
37214: PPUSH
37215: LD_INT 3
37217: PPUSH
37218: CALL_OW 275
37222: PUSH
37223: LD_VAR 0 4
37227: PUSH
37228: LD_INT 3
37230: ARRAY
37231: GREATEREQUAL
37232: AND
37233: ST_TO_ADDR
// end ;
37234: LD_VAR 0 3
37238: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37239: LD_INT 0
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
// pom := GetBase ( building ) ;
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_VAR 0 1
37254: PPUSH
37255: CALL_OW 274
37259: ST_TO_ADDR
// if not pom then
37260: LD_VAR 0 3
37264: NOT
37265: IFFALSE 37269
// exit ;
37267: GO 37439
// btype := GetBType ( building ) ;
37269: LD_ADDR_VAR 0 5
37273: PUSH
37274: LD_VAR 0 1
37278: PPUSH
37279: CALL_OW 266
37283: ST_TO_ADDR
// if btype = b_armoury then
37284: LD_VAR 0 5
37288: PUSH
37289: LD_INT 4
37291: EQUAL
37292: IFFALSE 37302
// btype := b_barracks ;
37294: LD_ADDR_VAR 0 5
37298: PUSH
37299: LD_INT 5
37301: ST_TO_ADDR
// if btype = b_depot then
37302: LD_VAR 0 5
37306: PUSH
37307: LD_INT 0
37309: EQUAL
37310: IFFALSE 37320
// btype := b_warehouse ;
37312: LD_ADDR_VAR 0 5
37316: PUSH
37317: LD_INT 1
37319: ST_TO_ADDR
// if btype = b_workshop then
37320: LD_VAR 0 5
37324: PUSH
37325: LD_INT 2
37327: EQUAL
37328: IFFALSE 37338
// btype := b_factory ;
37330: LD_ADDR_VAR 0 5
37334: PUSH
37335: LD_INT 3
37337: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37338: LD_ADDR_VAR 0 4
37342: PUSH
37343: LD_VAR 0 5
37347: PPUSH
37348: LD_VAR 0 1
37352: PPUSH
37353: CALL_OW 248
37357: PPUSH
37358: CALL_OW 450
37362: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37363: LD_ADDR_VAR 0 2
37367: PUSH
37368: LD_VAR 0 3
37372: PPUSH
37373: LD_INT 1
37375: PPUSH
37376: CALL_OW 275
37380: PUSH
37381: LD_VAR 0 4
37385: PUSH
37386: LD_INT 1
37388: ARRAY
37389: GREATEREQUAL
37390: PUSH
37391: LD_VAR 0 3
37395: PPUSH
37396: LD_INT 2
37398: PPUSH
37399: CALL_OW 275
37403: PUSH
37404: LD_VAR 0 4
37408: PUSH
37409: LD_INT 2
37411: ARRAY
37412: GREATEREQUAL
37413: AND
37414: PUSH
37415: LD_VAR 0 3
37419: PPUSH
37420: LD_INT 3
37422: PPUSH
37423: CALL_OW 275
37427: PUSH
37428: LD_VAR 0 4
37432: PUSH
37433: LD_INT 3
37435: ARRAY
37436: GREATEREQUAL
37437: AND
37438: ST_TO_ADDR
// end ;
37439: LD_VAR 0 2
37443: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37444: LD_INT 0
37446: PPUSH
37447: PPUSH
37448: PPUSH
// pom := GetBase ( building ) ;
37449: LD_ADDR_VAR 0 4
37453: PUSH
37454: LD_VAR 0 1
37458: PPUSH
37459: CALL_OW 274
37463: ST_TO_ADDR
// if not pom then
37464: LD_VAR 0 4
37468: NOT
37469: IFFALSE 37473
// exit ;
37471: GO 37574
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37473: LD_ADDR_VAR 0 5
37477: PUSH
37478: LD_VAR 0 2
37482: PPUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 248
37492: PPUSH
37493: CALL_OW 450
37497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_VAR 0 4
37507: PPUSH
37508: LD_INT 1
37510: PPUSH
37511: CALL_OW 275
37515: PUSH
37516: LD_VAR 0 5
37520: PUSH
37521: LD_INT 1
37523: ARRAY
37524: GREATEREQUAL
37525: PUSH
37526: LD_VAR 0 4
37530: PPUSH
37531: LD_INT 2
37533: PPUSH
37534: CALL_OW 275
37538: PUSH
37539: LD_VAR 0 5
37543: PUSH
37544: LD_INT 2
37546: ARRAY
37547: GREATEREQUAL
37548: AND
37549: PUSH
37550: LD_VAR 0 4
37554: PPUSH
37555: LD_INT 3
37557: PPUSH
37558: CALL_OW 275
37562: PUSH
37563: LD_VAR 0 5
37567: PUSH
37568: LD_INT 3
37570: ARRAY
37571: GREATEREQUAL
37572: AND
37573: ST_TO_ADDR
// end ;
37574: LD_VAR 0 3
37578: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37579: LD_INT 0
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
// result := false ;
37592: LD_ADDR_VAR 0 8
37596: PUSH
37597: LD_INT 0
37599: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37600: LD_VAR 0 5
37604: NOT
37605: PUSH
37606: LD_VAR 0 1
37610: NOT
37611: OR
37612: PUSH
37613: LD_VAR 0 2
37617: NOT
37618: OR
37619: PUSH
37620: LD_VAR 0 3
37624: NOT
37625: OR
37626: IFFALSE 37630
// exit ;
37628: GO 38444
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37630: LD_ADDR_VAR 0 14
37634: PUSH
37635: LD_VAR 0 1
37639: PPUSH
37640: LD_VAR 0 2
37644: PPUSH
37645: LD_VAR 0 3
37649: PPUSH
37650: LD_VAR 0 4
37654: PPUSH
37655: LD_VAR 0 5
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: CALL_OW 248
37668: PPUSH
37669: LD_INT 0
37671: PPUSH
37672: CALL 39677 0 6
37676: ST_TO_ADDR
// if not hexes then
37677: LD_VAR 0 14
37681: NOT
37682: IFFALSE 37686
// exit ;
37684: GO 38444
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37686: LD_ADDR_VAR 0 17
37690: PUSH
37691: LD_VAR 0 5
37695: PPUSH
37696: LD_INT 22
37698: PUSH
37699: LD_VAR 0 13
37703: PPUSH
37704: CALL_OW 255
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 30
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 30
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PPUSH
37745: CALL_OW 72
37749: ST_TO_ADDR
// for i = 1 to hexes do
37750: LD_ADDR_VAR 0 9
37754: PUSH
37755: DOUBLE
37756: LD_INT 1
37758: DEC
37759: ST_TO_ADDR
37760: LD_VAR 0 14
37764: PUSH
37765: FOR_TO
37766: IFFALSE 38442
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37768: LD_ADDR_VAR 0 13
37772: PUSH
37773: LD_VAR 0 14
37777: PUSH
37778: LD_VAR 0 9
37782: ARRAY
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: PPUSH
37788: LD_VAR 0 14
37792: PUSH
37793: LD_VAR 0 9
37797: ARRAY
37798: PUSH
37799: LD_INT 2
37801: ARRAY
37802: PPUSH
37803: CALL_OW 428
37807: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37808: LD_VAR 0 14
37812: PUSH
37813: LD_VAR 0 9
37817: ARRAY
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PPUSH
37823: LD_VAR 0 14
37827: PUSH
37828: LD_VAR 0 9
37832: ARRAY
37833: PUSH
37834: LD_INT 2
37836: ARRAY
37837: PPUSH
37838: CALL_OW 351
37842: PUSH
37843: LD_VAR 0 14
37847: PUSH
37848: LD_VAR 0 9
37852: ARRAY
37853: PUSH
37854: LD_INT 1
37856: ARRAY
37857: PPUSH
37858: LD_VAR 0 14
37862: PUSH
37863: LD_VAR 0 9
37867: ARRAY
37868: PUSH
37869: LD_INT 2
37871: ARRAY
37872: PPUSH
37873: CALL_OW 488
37877: NOT
37878: OR
37879: PUSH
37880: LD_VAR 0 13
37884: PPUSH
37885: CALL_OW 247
37889: PUSH
37890: LD_INT 3
37892: EQUAL
37893: OR
37894: IFFALSE 37900
// exit ;
37896: POP
37897: POP
37898: GO 38444
// if not tmp then
37900: LD_VAR 0 13
37904: NOT
37905: IFFALSE 37909
// continue ;
37907: GO 37765
// result := true ;
37909: LD_ADDR_VAR 0 8
37913: PUSH
37914: LD_INT 1
37916: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37917: LD_VAR 0 6
37921: PUSH
37922: LD_VAR 0 13
37926: PPUSH
37927: CALL_OW 247
37931: PUSH
37932: LD_INT 2
37934: EQUAL
37935: AND
37936: PUSH
37937: LD_VAR 0 13
37941: PPUSH
37942: CALL_OW 263
37946: PUSH
37947: LD_INT 1
37949: EQUAL
37950: AND
37951: IFFALSE 38115
// begin if IsDrivenBy ( tmp ) then
37953: LD_VAR 0 13
37957: PPUSH
37958: CALL_OW 311
37962: IFFALSE 37966
// continue ;
37964: GO 37765
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37966: LD_VAR 0 6
37970: PPUSH
37971: LD_INT 3
37973: PUSH
37974: LD_INT 60
37976: PUSH
37977: EMPTY
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: LD_INT 55
37989: PUSH
37990: EMPTY
37991: LIST
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PPUSH
38001: CALL_OW 72
38005: IFFALSE 38113
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38007: LD_ADDR_VAR 0 18
38011: PUSH
38012: LD_VAR 0 6
38016: PPUSH
38017: LD_INT 3
38019: PUSH
38020: LD_INT 60
38022: PUSH
38023: EMPTY
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 55
38035: PUSH
38036: EMPTY
38037: LIST
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PPUSH
38047: CALL_OW 72
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: ST_TO_ADDR
// if IsInUnit ( driver ) then
38056: LD_VAR 0 18
38060: PPUSH
38061: CALL_OW 310
38065: IFFALSE 38076
// ComExit ( driver ) ;
38067: LD_VAR 0 18
38071: PPUSH
38072: CALL 63456 0 1
// AddComEnterUnit ( driver , tmp ) ;
38076: LD_VAR 0 18
38080: PPUSH
38081: LD_VAR 0 13
38085: PPUSH
38086: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38090: LD_VAR 0 18
38094: PPUSH
38095: LD_VAR 0 7
38099: PPUSH
38100: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38104: LD_VAR 0 18
38108: PPUSH
38109: CALL_OW 181
// end ; continue ;
38113: GO 37765
// end ; if not cleaners or not tmp in cleaners then
38115: LD_VAR 0 6
38119: NOT
38120: PUSH
38121: LD_VAR 0 13
38125: PUSH
38126: LD_VAR 0 6
38130: IN
38131: NOT
38132: OR
38133: IFFALSE 38440
// begin if dep then
38135: LD_VAR 0 17
38139: IFFALSE 38275
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38141: LD_ADDR_VAR 0 16
38145: PUSH
38146: LD_VAR 0 17
38150: PUSH
38151: LD_INT 1
38153: ARRAY
38154: PPUSH
38155: CALL_OW 250
38159: PPUSH
38160: LD_VAR 0 17
38164: PUSH
38165: LD_INT 1
38167: ARRAY
38168: PPUSH
38169: CALL_OW 254
38173: PPUSH
38174: LD_INT 5
38176: PPUSH
38177: CALL_OW 272
38181: PUSH
38182: LD_VAR 0 17
38186: PUSH
38187: LD_INT 1
38189: ARRAY
38190: PPUSH
38191: CALL_OW 251
38195: PPUSH
38196: LD_VAR 0 17
38200: PUSH
38201: LD_INT 1
38203: ARRAY
38204: PPUSH
38205: CALL_OW 254
38209: PPUSH
38210: LD_INT 5
38212: PPUSH
38213: CALL_OW 273
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38222: LD_VAR 0 16
38226: PUSH
38227: LD_INT 1
38229: ARRAY
38230: PPUSH
38231: LD_VAR 0 16
38235: PUSH
38236: LD_INT 2
38238: ARRAY
38239: PPUSH
38240: CALL_OW 488
38244: IFFALSE 38275
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38246: LD_VAR 0 13
38250: PPUSH
38251: LD_VAR 0 16
38255: PUSH
38256: LD_INT 1
38258: ARRAY
38259: PPUSH
38260: LD_VAR 0 16
38264: PUSH
38265: LD_INT 2
38267: ARRAY
38268: PPUSH
38269: CALL_OW 111
// continue ;
38273: GO 37765
// end ; end ; r := GetDir ( tmp ) ;
38275: LD_ADDR_VAR 0 15
38279: PUSH
38280: LD_VAR 0 13
38284: PPUSH
38285: CALL_OW 254
38289: ST_TO_ADDR
// if r = 5 then
38290: LD_VAR 0 15
38294: PUSH
38295: LD_INT 5
38297: EQUAL
38298: IFFALSE 38308
// r := 0 ;
38300: LD_ADDR_VAR 0 15
38304: PUSH
38305: LD_INT 0
38307: ST_TO_ADDR
// for j = r to 5 do
38308: LD_ADDR_VAR 0 10
38312: PUSH
38313: DOUBLE
38314: LD_VAR 0 15
38318: DEC
38319: ST_TO_ADDR
38320: LD_INT 5
38322: PUSH
38323: FOR_TO
38324: IFFALSE 38438
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38326: LD_ADDR_VAR 0 11
38330: PUSH
38331: LD_VAR 0 13
38335: PPUSH
38336: CALL_OW 250
38340: PPUSH
38341: LD_VAR 0 10
38345: PPUSH
38346: LD_INT 2
38348: PPUSH
38349: CALL_OW 272
38353: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38354: LD_ADDR_VAR 0 12
38358: PUSH
38359: LD_VAR 0 13
38363: PPUSH
38364: CALL_OW 251
38368: PPUSH
38369: LD_VAR 0 10
38373: PPUSH
38374: LD_INT 2
38376: PPUSH
38377: CALL_OW 273
38381: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38382: LD_VAR 0 11
38386: PPUSH
38387: LD_VAR 0 12
38391: PPUSH
38392: CALL_OW 488
38396: PUSH
38397: LD_VAR 0 11
38401: PPUSH
38402: LD_VAR 0 12
38406: PPUSH
38407: CALL_OW 428
38411: NOT
38412: AND
38413: IFFALSE 38436
// begin ComMoveXY ( tmp , _x , _y ) ;
38415: LD_VAR 0 13
38419: PPUSH
38420: LD_VAR 0 11
38424: PPUSH
38425: LD_VAR 0 12
38429: PPUSH
38430: CALL_OW 111
// break ;
38434: GO 38438
// end ; end ;
38436: GO 38323
38438: POP
38439: POP
// end ; end ;
38440: GO 37765
38442: POP
38443: POP
// end ;
38444: LD_VAR 0 8
38448: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38449: LD_INT 0
38451: PPUSH
// result := true ;
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: LD_INT 1
38459: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38460: LD_VAR 0 2
38464: PUSH
38465: LD_INT 24
38467: DOUBLE
38468: EQUAL
38469: IFTRUE 38479
38471: LD_INT 33
38473: DOUBLE
38474: EQUAL
38475: IFTRUE 38479
38477: GO 38504
38479: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38480: LD_ADDR_VAR 0 3
38484: PUSH
38485: LD_INT 32
38487: PPUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 321
38497: PUSH
38498: LD_INT 2
38500: EQUAL
38501: ST_TO_ADDR
38502: GO 38820
38504: LD_INT 20
38506: DOUBLE
38507: EQUAL
38508: IFTRUE 38512
38510: GO 38537
38512: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38513: LD_ADDR_VAR 0 3
38517: PUSH
38518: LD_INT 6
38520: PPUSH
38521: LD_VAR 0 1
38525: PPUSH
38526: CALL_OW 321
38530: PUSH
38531: LD_INT 2
38533: EQUAL
38534: ST_TO_ADDR
38535: GO 38820
38537: LD_INT 22
38539: DOUBLE
38540: EQUAL
38541: IFTRUE 38551
38543: LD_INT 36
38545: DOUBLE
38546: EQUAL
38547: IFTRUE 38551
38549: GO 38576
38551: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38552: LD_ADDR_VAR 0 3
38556: PUSH
38557: LD_INT 15
38559: PPUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL_OW 321
38569: PUSH
38570: LD_INT 2
38572: EQUAL
38573: ST_TO_ADDR
38574: GO 38820
38576: LD_INT 30
38578: DOUBLE
38579: EQUAL
38580: IFTRUE 38584
38582: GO 38609
38584: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38585: LD_ADDR_VAR 0 3
38589: PUSH
38590: LD_INT 20
38592: PPUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 321
38602: PUSH
38603: LD_INT 2
38605: EQUAL
38606: ST_TO_ADDR
38607: GO 38820
38609: LD_INT 28
38611: DOUBLE
38612: EQUAL
38613: IFTRUE 38623
38615: LD_INT 21
38617: DOUBLE
38618: EQUAL
38619: IFTRUE 38623
38621: GO 38648
38623: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38624: LD_ADDR_VAR 0 3
38628: PUSH
38629: LD_INT 21
38631: PPUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 321
38641: PUSH
38642: LD_INT 2
38644: EQUAL
38645: ST_TO_ADDR
38646: GO 38820
38648: LD_INT 16
38650: DOUBLE
38651: EQUAL
38652: IFTRUE 38656
38654: GO 38681
38656: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38657: LD_ADDR_VAR 0 3
38661: PUSH
38662: LD_INT 84
38664: PPUSH
38665: LD_VAR 0 1
38669: PPUSH
38670: CALL_OW 321
38674: PUSH
38675: LD_INT 2
38677: EQUAL
38678: ST_TO_ADDR
38679: GO 38820
38681: LD_INT 19
38683: DOUBLE
38684: EQUAL
38685: IFTRUE 38695
38687: LD_INT 23
38689: DOUBLE
38690: EQUAL
38691: IFTRUE 38695
38693: GO 38720
38695: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_INT 83
38703: PPUSH
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 321
38713: PUSH
38714: LD_INT 2
38716: EQUAL
38717: ST_TO_ADDR
38718: GO 38820
38720: LD_INT 17
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38728
38726: GO 38753
38728: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38729: LD_ADDR_VAR 0 3
38733: PUSH
38734: LD_INT 39
38736: PPUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL_OW 321
38746: PUSH
38747: LD_INT 2
38749: EQUAL
38750: ST_TO_ADDR
38751: GO 38820
38753: LD_INT 18
38755: DOUBLE
38756: EQUAL
38757: IFTRUE 38761
38759: GO 38786
38761: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38762: LD_ADDR_VAR 0 3
38766: PUSH
38767: LD_INT 40
38769: PPUSH
38770: LD_VAR 0 1
38774: PPUSH
38775: CALL_OW 321
38779: PUSH
38780: LD_INT 2
38782: EQUAL
38783: ST_TO_ADDR
38784: GO 38820
38786: LD_INT 27
38788: DOUBLE
38789: EQUAL
38790: IFTRUE 38794
38792: GO 38819
38794: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38795: LD_ADDR_VAR 0 3
38799: PUSH
38800: LD_INT 35
38802: PPUSH
38803: LD_VAR 0 1
38807: PPUSH
38808: CALL_OW 321
38812: PUSH
38813: LD_INT 2
38815: EQUAL
38816: ST_TO_ADDR
38817: GO 38820
38819: POP
// end ;
38820: LD_VAR 0 3
38824: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38825: LD_INT 0
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
// result := false ;
38838: LD_ADDR_VAR 0 6
38842: PUSH
38843: LD_INT 0
38845: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38846: LD_VAR 0 1
38850: NOT
38851: PUSH
38852: LD_VAR 0 1
38856: PPUSH
38857: CALL_OW 266
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: IN
38872: NOT
38873: OR
38874: PUSH
38875: LD_VAR 0 2
38879: NOT
38880: OR
38881: PUSH
38882: LD_VAR 0 5
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: LD_INT 3
38898: PUSH
38899: LD_INT 4
38901: PUSH
38902: LD_INT 5
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: IN
38913: NOT
38914: OR
38915: PUSH
38916: LD_VAR 0 3
38920: PPUSH
38921: LD_VAR 0 4
38925: PPUSH
38926: CALL_OW 488
38930: NOT
38931: OR
38932: IFFALSE 38936
// exit ;
38934: GO 39672
// side := GetSide ( depot ) ;
38936: LD_ADDR_VAR 0 9
38940: PUSH
38941: LD_VAR 0 1
38945: PPUSH
38946: CALL_OW 255
38950: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38951: LD_VAR 0 9
38955: PPUSH
38956: LD_VAR 0 2
38960: PPUSH
38961: CALL 38449 0 2
38965: NOT
38966: IFFALSE 38970
// exit ;
38968: GO 39672
// pom := GetBase ( depot ) ;
38970: LD_ADDR_VAR 0 10
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 274
38984: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38985: LD_ADDR_VAR 0 11
38989: PUSH
38990: LD_VAR 0 2
38994: PPUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 248
39004: PPUSH
39005: CALL_OW 450
39009: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39010: LD_VAR 0 10
39014: PPUSH
39015: LD_INT 1
39017: PPUSH
39018: CALL_OW 275
39022: PUSH
39023: LD_VAR 0 11
39027: PUSH
39028: LD_INT 1
39030: ARRAY
39031: GREATEREQUAL
39032: PUSH
39033: LD_VAR 0 10
39037: PPUSH
39038: LD_INT 2
39040: PPUSH
39041: CALL_OW 275
39045: PUSH
39046: LD_VAR 0 11
39050: PUSH
39051: LD_INT 2
39053: ARRAY
39054: GREATEREQUAL
39055: AND
39056: PUSH
39057: LD_VAR 0 10
39061: PPUSH
39062: LD_INT 3
39064: PPUSH
39065: CALL_OW 275
39069: PUSH
39070: LD_VAR 0 11
39074: PUSH
39075: LD_INT 3
39077: ARRAY
39078: GREATEREQUAL
39079: AND
39080: NOT
39081: IFFALSE 39085
// exit ;
39083: GO 39672
// if GetBType ( depot ) = b_depot then
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 266
39094: PUSH
39095: LD_INT 0
39097: EQUAL
39098: IFFALSE 39110
// dist := 28 else
39100: LD_ADDR_VAR 0 14
39104: PUSH
39105: LD_INT 28
39107: ST_TO_ADDR
39108: GO 39118
// dist := 36 ;
39110: LD_ADDR_VAR 0 14
39114: PUSH
39115: LD_INT 36
39117: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39118: LD_VAR 0 1
39122: PPUSH
39123: LD_VAR 0 3
39127: PPUSH
39128: LD_VAR 0 4
39132: PPUSH
39133: CALL_OW 297
39137: PUSH
39138: LD_VAR 0 14
39142: GREATER
39143: IFFALSE 39147
// exit ;
39145: GO 39672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39147: LD_ADDR_VAR 0 12
39151: PUSH
39152: LD_VAR 0 2
39156: PPUSH
39157: LD_VAR 0 3
39161: PPUSH
39162: LD_VAR 0 4
39166: PPUSH
39167: LD_VAR 0 5
39171: PPUSH
39172: LD_VAR 0 1
39176: PPUSH
39177: CALL_OW 248
39181: PPUSH
39182: LD_INT 0
39184: PPUSH
39185: CALL 39677 0 6
39189: ST_TO_ADDR
// if not hexes then
39190: LD_VAR 0 12
39194: NOT
39195: IFFALSE 39199
// exit ;
39197: GO 39672
// hex := GetHexInfo ( x , y ) ;
39199: LD_ADDR_VAR 0 15
39203: PUSH
39204: LD_VAR 0 3
39208: PPUSH
39209: LD_VAR 0 4
39213: PPUSH
39214: CALL_OW 546
39218: ST_TO_ADDR
// if hex [ 1 ] then
39219: LD_VAR 0 15
39223: PUSH
39224: LD_INT 1
39226: ARRAY
39227: IFFALSE 39231
// exit ;
39229: GO 39672
// height := hex [ 2 ] ;
39231: LD_ADDR_VAR 0 13
39235: PUSH
39236: LD_VAR 0 15
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: ST_TO_ADDR
// for i = 1 to hexes do
39245: LD_ADDR_VAR 0 7
39249: PUSH
39250: DOUBLE
39251: LD_INT 1
39253: DEC
39254: ST_TO_ADDR
39255: LD_VAR 0 12
39259: PUSH
39260: FOR_TO
39261: IFFALSE 39591
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39263: LD_VAR 0 12
39267: PUSH
39268: LD_VAR 0 7
39272: ARRAY
39273: PUSH
39274: LD_INT 1
39276: ARRAY
39277: PPUSH
39278: LD_VAR 0 12
39282: PUSH
39283: LD_VAR 0 7
39287: ARRAY
39288: PUSH
39289: LD_INT 2
39291: ARRAY
39292: PPUSH
39293: CALL_OW 488
39297: NOT
39298: PUSH
39299: LD_VAR 0 12
39303: PUSH
39304: LD_VAR 0 7
39308: ARRAY
39309: PUSH
39310: LD_INT 1
39312: ARRAY
39313: PPUSH
39314: LD_VAR 0 12
39318: PUSH
39319: LD_VAR 0 7
39323: ARRAY
39324: PUSH
39325: LD_INT 2
39327: ARRAY
39328: PPUSH
39329: CALL_OW 428
39333: PUSH
39334: LD_INT 0
39336: GREATER
39337: OR
39338: PUSH
39339: LD_VAR 0 12
39343: PUSH
39344: LD_VAR 0 7
39348: ARRAY
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: LD_VAR 0 12
39358: PUSH
39359: LD_VAR 0 7
39363: ARRAY
39364: PUSH
39365: LD_INT 2
39367: ARRAY
39368: PPUSH
39369: CALL_OW 351
39373: OR
39374: IFFALSE 39380
// exit ;
39376: POP
39377: POP
39378: GO 39672
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39380: LD_ADDR_VAR 0 8
39384: PUSH
39385: LD_VAR 0 12
39389: PUSH
39390: LD_VAR 0 7
39394: ARRAY
39395: PUSH
39396: LD_INT 1
39398: ARRAY
39399: PPUSH
39400: LD_VAR 0 12
39404: PUSH
39405: LD_VAR 0 7
39409: ARRAY
39410: PUSH
39411: LD_INT 2
39413: ARRAY
39414: PPUSH
39415: CALL_OW 546
39419: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39420: LD_VAR 0 8
39424: PUSH
39425: LD_INT 1
39427: ARRAY
39428: PUSH
39429: LD_VAR 0 8
39433: PUSH
39434: LD_INT 2
39436: ARRAY
39437: PUSH
39438: LD_VAR 0 13
39442: PUSH
39443: LD_INT 2
39445: PLUS
39446: GREATER
39447: OR
39448: PUSH
39449: LD_VAR 0 8
39453: PUSH
39454: LD_INT 2
39456: ARRAY
39457: PUSH
39458: LD_VAR 0 13
39462: PUSH
39463: LD_INT 2
39465: MINUS
39466: LESS
39467: OR
39468: PUSH
39469: LD_VAR 0 8
39473: PUSH
39474: LD_INT 3
39476: ARRAY
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 8
39483: PUSH
39484: LD_INT 9
39486: PUSH
39487: LD_INT 10
39489: PUSH
39490: LD_INT 11
39492: PUSH
39493: LD_INT 12
39495: PUSH
39496: LD_INT 13
39498: PUSH
39499: LD_INT 16
39501: PUSH
39502: LD_INT 17
39504: PUSH
39505: LD_INT 18
39507: PUSH
39508: LD_INT 19
39510: PUSH
39511: LD_INT 20
39513: PUSH
39514: LD_INT 21
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: IN
39532: NOT
39533: OR
39534: PUSH
39535: LD_VAR 0 8
39539: PUSH
39540: LD_INT 5
39542: ARRAY
39543: NOT
39544: OR
39545: PUSH
39546: LD_VAR 0 8
39550: PUSH
39551: LD_INT 6
39553: ARRAY
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: LD_INT 7
39563: PUSH
39564: LD_INT 9
39566: PUSH
39567: LD_INT 10
39569: PUSH
39570: LD_INT 11
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: IN
39581: NOT
39582: OR
39583: IFFALSE 39589
// exit ;
39585: POP
39586: POP
39587: GO 39672
// end ;
39589: GO 39260
39591: POP
39592: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39593: LD_VAR 0 9
39597: PPUSH
39598: LD_VAR 0 3
39602: PPUSH
39603: LD_VAR 0 4
39607: PPUSH
39608: LD_INT 20
39610: PPUSH
39611: CALL 31615 0 4
39615: PUSH
39616: LD_INT 4
39618: ARRAY
39619: IFFALSE 39623
// exit ;
39621: GO 39672
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39623: LD_VAR 0 2
39627: PUSH
39628: LD_INT 29
39630: PUSH
39631: LD_INT 30
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: IN
39638: PUSH
39639: LD_VAR 0 3
39643: PPUSH
39644: LD_VAR 0 4
39648: PPUSH
39649: LD_VAR 0 9
39653: PPUSH
39654: CALL_OW 440
39658: NOT
39659: AND
39660: IFFALSE 39664
// exit ;
39662: GO 39672
// result := true ;
39664: LD_ADDR_VAR 0 6
39668: PUSH
39669: LD_INT 1
39671: ST_TO_ADDR
// end ;
39672: LD_VAR 0 6
39676: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39677: LD_INT 0
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
39720: PPUSH
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
39728: PPUSH
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
// result = [ ] ;
39737: LD_ADDR_VAR 0 7
39741: PUSH
39742: EMPTY
39743: ST_TO_ADDR
// temp_list = [ ] ;
39744: LD_ADDR_VAR 0 9
39748: PUSH
39749: EMPTY
39750: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39751: LD_VAR 0 4
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: LD_INT 4
39770: PUSH
39771: LD_INT 5
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: IN
39782: NOT
39783: PUSH
39784: LD_VAR 0 1
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: IN
39799: PUSH
39800: LD_VAR 0 5
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: IN
39819: NOT
39820: AND
39821: OR
39822: IFFALSE 39826
// exit ;
39824: GO 58217
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39826: LD_VAR 0 1
39830: PUSH
39831: LD_INT 6
39833: PUSH
39834: LD_INT 7
39836: PUSH
39837: LD_INT 8
39839: PUSH
39840: LD_INT 13
39842: PUSH
39843: LD_INT 12
39845: PUSH
39846: LD_INT 15
39848: PUSH
39849: LD_INT 11
39851: PUSH
39852: LD_INT 14
39854: PUSH
39855: LD_INT 10
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: IN
39869: IFFALSE 39879
// btype = b_lab ;
39871: LD_ADDR_VAR 0 1
39875: PUSH
39876: LD_INT 6
39878: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39879: LD_VAR 0 6
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: LIST
39897: IN
39898: NOT
39899: PUSH
39900: LD_VAR 0 1
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 3
39916: PUSH
39917: LD_INT 6
39919: PUSH
39920: LD_INT 36
39922: PUSH
39923: LD_INT 4
39925: PUSH
39926: LD_INT 5
39928: PUSH
39929: LD_INT 31
39931: PUSH
39932: LD_INT 32
39934: PUSH
39935: LD_INT 33
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: IN
39951: NOT
39952: PUSH
39953: LD_VAR 0 6
39957: PUSH
39958: LD_INT 1
39960: EQUAL
39961: AND
39962: OR
39963: PUSH
39964: LD_VAR 0 1
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: LD_INT 3
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: IN
39979: NOT
39980: PUSH
39981: LD_VAR 0 6
39985: PUSH
39986: LD_INT 2
39988: EQUAL
39989: AND
39990: OR
39991: IFFALSE 40001
// mode = 0 ;
39993: LD_ADDR_VAR 0 6
39997: PUSH
39998: LD_INT 0
40000: ST_TO_ADDR
// case mode of 0 :
40001: LD_VAR 0 6
40005: PUSH
40006: LD_INT 0
40008: DOUBLE
40009: EQUAL
40010: IFTRUE 40014
40012: GO 51467
40014: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40015: LD_ADDR_VAR 0 11
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 2
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40208: LD_ADDR_VAR 0 12
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40404: LD_ADDR_VAR 0 13
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: LD_INT 3
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 3
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 3
40575: NEG
40576: PUSH
40577: LD_INT 3
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40603: LD_ADDR_VAR 0 14
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: LD_INT 3
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 3
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40799: LD_ADDR_VAR 0 15
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40992: LD_ADDR_VAR 0 16
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41185: LD_ADDR_VAR 0 17
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 2
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41415: LD_ADDR_VAR 0 18
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41645: LD_ADDR_VAR 0 19
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: NEG
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41875: LD_ADDR_VAR 0 20
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42105: LD_ADDR_VAR 0 21
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42335: LD_ADDR_VAR 0 22
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42565: LD_ADDR_VAR 0 23
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: LD_INT 3
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: LD_INT 3
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42845: LD_ADDR_VAR 0 24
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 3
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43121: LD_ADDR_VAR 0 25
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43395: LD_ADDR_VAR 0 26
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: LD_INT 3
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43671: LD_ADDR_VAR 0 27
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 3
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43951: LD_ADDR_VAR 0 28
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 3
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 3
44186: NEG
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44233: LD_ADDR_VAR 0 29
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: LD_INT 3
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: NEG
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44512: LD_ADDR_VAR 0 30
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 3
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 3
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: LD_INT 3
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 3
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44790: LD_ADDR_VAR 0 31
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 3
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 3
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 3
45033: NEG
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45068: LD_ADDR_VAR 0 32
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 3
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 3
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 3
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45346: LD_ADDR_VAR 0 33
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 3
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45625: LD_ADDR_VAR 0 34
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 3
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45905: LD_ADDR_VAR 0 35
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46017: LD_ADDR_VAR 0 36
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46129: LD_ADDR_VAR 0 37
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46241: LD_ADDR_VAR 0 38
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46353: LD_ADDR_VAR 0 39
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46465: LD_ADDR_VAR 0 40
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46577: LD_ADDR_VAR 0 41
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: LD_INT 3
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: LD_INT 3
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46927: LD_ADDR_VAR 0 42
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: LD_INT 3
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 3
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 3
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: LD_INT 3
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47277: LD_ADDR_VAR 0 43
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 3
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47625: LD_ADDR_VAR 0 44
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 3
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 3
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: LD_INT 3
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 3
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 3
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: NEG
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47975: LD_ADDR_VAR 0 45
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 3
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 3
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 3
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: LD_INT 3
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 3
48272: NEG
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: NEG
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48325: LD_ADDR_VAR 0 46
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 3
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 3
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 3
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 3
48632: NEG
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48673: LD_ADDR_VAR 0 47
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48824: LD_ADDR_VAR 0 48
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48971: LD_ADDR_VAR 0 49
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49115: LD_ADDR_VAR 0 50
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49259: LD_ADDR_VAR 0 51
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49406: LD_ADDR_VAR 0 52
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49557: LD_ADDR_VAR 0 53
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49787: LD_ADDR_VAR 0 54
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50017: LD_ADDR_VAR 0 55
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50247: LD_ADDR_VAR 0 56
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50477: LD_ADDR_VAR 0 57
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50707: LD_ADDR_VAR 0 58
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50937: LD_ADDR_VAR 0 59
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51025: LD_ADDR_VAR 0 60
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51113: LD_ADDR_VAR 0 61
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51201: LD_ADDR_VAR 0 62
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51289: LD_ADDR_VAR 0 63
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51377: LD_ADDR_VAR 0 64
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// end ; 1 :
51465: GO 57362
51467: LD_INT 1
51469: DOUBLE
51470: EQUAL
51471: IFTRUE 51475
51473: GO 54098
51475: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51476: LD_ADDR_VAR 0 11
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: LD_INT 3
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: LIST
51519: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51520: LD_ADDR_VAR 0 12
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51561: LD_ADDR_VAR 0 13
51565: PUSH
51566: LD_INT 3
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: LD_INT 3
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51601: LD_ADDR_VAR 0 14
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 3
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: LIST
51641: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51642: LD_ADDR_VAR 0 15
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 3
51660: NEG
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51686: LD_ADDR_VAR 0 16
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: NEG
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: LD_INT 3
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: LIST
51731: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51732: LD_ADDR_VAR 0 17
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 3
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: LIST
51775: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51776: LD_ADDR_VAR 0 18
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51817: LD_ADDR_VAR 0 19
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 3
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 3
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: LIST
51856: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51857: LD_ADDR_VAR 0 20
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 3
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: LIST
51897: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51898: LD_ADDR_VAR 0 21
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: NEG
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: LIST
51941: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51942: LD_ADDR_VAR 0 22
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 3
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 3
51961: NEG
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 3
51973: NEG
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51988: LD_ADDR_VAR 0 23
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 4
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 3
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52032: LD_ADDR_VAR 0 24
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 3
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 4
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52073: LD_ADDR_VAR 0 25
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 4
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: LD_INT 4
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52113: LD_ADDR_VAR 0 26
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 4
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52154: LD_ADDR_VAR 0 27
52158: PUSH
52159: LD_INT 3
52161: NEG
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 4
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52198: LD_ADDR_VAR 0 28
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 4
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 4
52229: NEG
52230: PUSH
52231: LD_INT 3
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: LIST
52243: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52244: LD_ADDR_VAR 0 29
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 4
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 4
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 5
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 5
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 4
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 6
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 6
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 5
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52399: LD_ADDR_VAR 0 30
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 3
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 4
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 4
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 4
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 5
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 5
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 5
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 6
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 6
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52542: LD_ADDR_VAR 0 31
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 4
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 4
52589: PUSH
52590: LD_INT 4
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: LD_INT 4
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 5
52609: PUSH
52610: LD_INT 4
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 5
52619: PUSH
52620: LD_INT 5
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 4
52629: PUSH
52630: LD_INT 5
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 6
52639: PUSH
52640: LD_INT 5
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 6
52649: PUSH
52650: LD_INT 6
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 5
52659: PUSH
52660: LD_INT 6
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52681: LD_ADDR_VAR 0 32
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 4
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 4
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 5
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 5
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 4
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 6
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 6
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 5
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52824: LD_ADDR_VAR 0 33
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: NEG
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 4
52876: NEG
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 4
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 4
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 5
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 5
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 5
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 6
52944: NEG
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 6
52955: NEG
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52979: LD_ADDR_VAR 0 34
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 3
53010: NEG
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: LD_INT 4
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 4
53034: NEG
53035: PUSH
53036: LD_INT 3
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: LD_INT 4
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 4
53058: NEG
53059: PUSH
53060: LD_INT 5
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 5
53070: NEG
53071: PUSH
53072: LD_INT 4
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 5
53082: NEG
53083: PUSH
53084: LD_INT 5
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 5
53094: NEG
53095: PUSH
53096: LD_INT 6
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 6
53106: NEG
53107: PUSH
53108: LD_INT 5
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 6
53118: NEG
53119: PUSH
53120: LD_INT 6
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53142: LD_ADDR_VAR 0 41
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53186: LD_ADDR_VAR 0 42
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53227: LD_ADDR_VAR 0 43
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53267: LD_ADDR_VAR 0 44
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: LIST
53307: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53308: LD_ADDR_VAR 0 45
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53352: LD_ADDR_VAR 0 46
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: LD_INT 3
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: NEG
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53398: LD_ADDR_VAR 0 47
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: LD_INT 3
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 3
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53431: LD_ADDR_VAR 0 48
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53462: LD_ADDR_VAR 0 49
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53491: LD_ADDR_VAR 0 50
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 3
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53520: LD_ADDR_VAR 0 51
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53551: LD_ADDR_VAR 0 52
53555: PUSH
53556: LD_INT 3
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53584: LD_ADDR_VAR 0 53
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 3
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53628: LD_ADDR_VAR 0 54
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53669: LD_ADDR_VAR 0 55
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53709: LD_ADDR_VAR 0 56
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 3
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53750: LD_ADDR_VAR 0 57
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: LIST
53793: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53794: LD_ADDR_VAR 0 58
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: LIST
53839: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53840: LD_ADDR_VAR 0 59
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53884: LD_ADDR_VAR 0 60
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: LIST
53924: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53925: LD_ADDR_VAR 0 61
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53965: LD_ADDR_VAR 0 62
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: LIST
54005: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54006: LD_ADDR_VAR 0 63
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54050: LD_ADDR_VAR 0 64
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: ST_TO_ADDR
// end ; 2 :
54096: GO 57362
54098: LD_INT 2
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54106
54104: GO 57361
54106: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54107: LD_ADDR_VAR 0 29
54111: PUSH
54112: LD_INT 4
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 4
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 5
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 5
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 4
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 3
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 5
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: LD_INT 3
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 4
54227: PUSH
54228: LD_INT 3
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 4
54237: PUSH
54238: LD_INT 4
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: LD_INT 4
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: LD_INT 3
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 4
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 4
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 4
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 5
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 5
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 4
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 3
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 5
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 4
54446: NEG
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 4
54457: NEG
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 4
54492: NEG
54493: PUSH
54494: LD_INT 4
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 4
54504: NEG
54505: PUSH
54506: LD_INT 5
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: LD_INT 4
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 3
54528: NEG
54529: PUSH
54530: LD_INT 3
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 4
54540: NEG
54541: PUSH
54542: LD_INT 3
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 5
54552: NEG
54553: PUSH
54554: LD_INT 4
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 5
54564: NEG
54565: PUSH
54566: LD_INT 5
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: NEG
54577: PUSH
54578: LD_INT 5
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 5
54588: NEG
54589: PUSH
54590: LD_INT 3
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54645: LD_ADDR_VAR 0 30
54649: PUSH
54650: LD_INT 4
54652: PUSH
54653: LD_INT 4
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 5
54672: PUSH
54673: LD_INT 4
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 5
54682: PUSH
54683: LD_INT 5
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 4
54692: PUSH
54693: LD_INT 5
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 3
54702: PUSH
54703: LD_INT 4
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 3
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 5
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 5
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 4
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 4
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 4
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 4
54835: NEG
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 4
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 3
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 4
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 5
54891: NEG
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 5
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 5
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 3
54937: NEG
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 3
54949: NEG
54950: PUSH
54951: LD_INT 4
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 4
54997: NEG
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 4
55009: NEG
55010: PUSH
55011: LD_INT 4
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 4
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 4
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 5
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 4
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 4
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 5
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 5
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55192: LD_ADDR_VAR 0 31
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 4
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 3
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 5
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 5
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 4
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 3
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 5
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 4
55348: NEG
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 4
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 4
55371: NEG
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 4
55394: NEG
55395: PUSH
55396: LD_INT 4
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 4
55406: NEG
55407: PUSH
55408: LD_INT 5
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: LD_INT 4
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 3
55430: NEG
55431: PUSH
55432: LD_INT 3
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 4
55442: NEG
55443: PUSH
55444: LD_INT 3
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 5
55454: NEG
55455: PUSH
55456: LD_INT 4
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 5
55466: NEG
55467: PUSH
55468: LD_INT 5
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: LD_INT 5
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 5
55490: NEG
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 3
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 4
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 3
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 3
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: LD_INT 4
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 4
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 4
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 5
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 5
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 4
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 5
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55742: LD_ADDR_VAR 0 32
55746: PUSH
55747: LD_INT 4
55749: NEG
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 4
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 3
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 3
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 4
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 5
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 5
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 5
55828: NEG
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: NEG
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: LD_INT 4
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 4
55911: NEG
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 4
55923: NEG
55924: PUSH
55925: LD_INT 4
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: LD_INT 4
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 4
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 5
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 4
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 4
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 5
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 5
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 4
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 4
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 4
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 4
56154: PUSH
56155: LD_INT 4
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 4
56164: PUSH
56165: LD_INT 3
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 5
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: LD_INT 5
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 4
56194: PUSH
56195: LD_INT 5
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 5
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: LD_INT 5
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56289: LD_ADDR_VAR 0 33
56293: PUSH
56294: LD_INT 4
56296: NEG
56297: PUSH
56298: LD_INT 4
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 4
56308: NEG
56309: PUSH
56310: LD_INT 5
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 4
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 3
56332: NEG
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 4
56344: NEG
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 5
56356: NEG
56357: PUSH
56358: LD_INT 4
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 5
56368: NEG
56369: PUSH
56370: LD_INT 5
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: LD_INT 5
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 5
56392: NEG
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 3
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 4
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 3
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: LD_INT 4
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 4
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 5
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 5
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 4
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 3
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 5
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 4
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 4
56629: PUSH
56630: LD_INT 4
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: LD_INT 4
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 4
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 4
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 4
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 5
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 5
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 4
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 5
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56827: LD_ADDR_VAR 0 34
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 4
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 5
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 4
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 3
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 4
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 5
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: LD_INT 5
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 4
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 4
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 4
57029: PUSH
57030: LD_INT 4
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 4
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 5
57049: PUSH
57050: LD_INT 4
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 5
57059: PUSH
57060: LD_INT 5
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 4
57069: PUSH
57070: LD_INT 5
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: PUSH
57080: LD_INT 4
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 5
57099: PUSH
57100: LD_INT 3
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: LD_INT 5
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 4
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 3
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: LD_INT 4
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 4
57212: NEG
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 4
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 5
57268: NEG
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 5
57279: NEG
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 5
57291: NEG
57292: PUSH
57293: LD_INT 2
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// end ; end ;
57359: GO 57362
57361: POP
// case btype of b_depot , b_warehouse :
57362: LD_VAR 0 1
57366: PUSH
57367: LD_INT 0
57369: DOUBLE
57370: EQUAL
57371: IFTRUE 57381
57373: LD_INT 1
57375: DOUBLE
57376: EQUAL
57377: IFTRUE 57381
57379: GO 57582
57381: POP
// case nation of nation_american :
57382: LD_VAR 0 5
57386: PUSH
57387: LD_INT 1
57389: DOUBLE
57390: EQUAL
57391: IFTRUE 57395
57393: GO 57451
57395: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57396: LD_ADDR_VAR 0 9
57400: PUSH
57401: LD_VAR 0 11
57405: PUSH
57406: LD_VAR 0 12
57410: PUSH
57411: LD_VAR 0 13
57415: PUSH
57416: LD_VAR 0 14
57420: PUSH
57421: LD_VAR 0 15
57425: PUSH
57426: LD_VAR 0 16
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: PUSH
57439: LD_VAR 0 4
57443: PUSH
57444: LD_INT 1
57446: PLUS
57447: ARRAY
57448: ST_TO_ADDR
57449: GO 57580
57451: LD_INT 2
57453: DOUBLE
57454: EQUAL
57455: IFTRUE 57459
57457: GO 57515
57459: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57460: LD_ADDR_VAR 0 9
57464: PUSH
57465: LD_VAR 0 17
57469: PUSH
57470: LD_VAR 0 18
57474: PUSH
57475: LD_VAR 0 19
57479: PUSH
57480: LD_VAR 0 20
57484: PUSH
57485: LD_VAR 0 21
57489: PUSH
57490: LD_VAR 0 22
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: PUSH
57503: LD_VAR 0 4
57507: PUSH
57508: LD_INT 1
57510: PLUS
57511: ARRAY
57512: ST_TO_ADDR
57513: GO 57580
57515: LD_INT 3
57517: DOUBLE
57518: EQUAL
57519: IFTRUE 57523
57521: GO 57579
57523: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57524: LD_ADDR_VAR 0 9
57528: PUSH
57529: LD_VAR 0 23
57533: PUSH
57534: LD_VAR 0 24
57538: PUSH
57539: LD_VAR 0 25
57543: PUSH
57544: LD_VAR 0 26
57548: PUSH
57549: LD_VAR 0 27
57553: PUSH
57554: LD_VAR 0 28
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: PUSH
57567: LD_VAR 0 4
57571: PUSH
57572: LD_INT 1
57574: PLUS
57575: ARRAY
57576: ST_TO_ADDR
57577: GO 57580
57579: POP
57580: GO 58135
57582: LD_INT 2
57584: DOUBLE
57585: EQUAL
57586: IFTRUE 57596
57588: LD_INT 3
57590: DOUBLE
57591: EQUAL
57592: IFTRUE 57596
57594: GO 57652
57596: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57597: LD_ADDR_VAR 0 9
57601: PUSH
57602: LD_VAR 0 29
57606: PUSH
57607: LD_VAR 0 30
57611: PUSH
57612: LD_VAR 0 31
57616: PUSH
57617: LD_VAR 0 32
57621: PUSH
57622: LD_VAR 0 33
57626: PUSH
57627: LD_VAR 0 34
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: PUSH
57640: LD_VAR 0 4
57644: PUSH
57645: LD_INT 1
57647: PLUS
57648: ARRAY
57649: ST_TO_ADDR
57650: GO 58135
57652: LD_INT 16
57654: DOUBLE
57655: EQUAL
57656: IFTRUE 57714
57658: LD_INT 17
57660: DOUBLE
57661: EQUAL
57662: IFTRUE 57714
57664: LD_INT 18
57666: DOUBLE
57667: EQUAL
57668: IFTRUE 57714
57670: LD_INT 19
57672: DOUBLE
57673: EQUAL
57674: IFTRUE 57714
57676: LD_INT 22
57678: DOUBLE
57679: EQUAL
57680: IFTRUE 57714
57682: LD_INT 20
57684: DOUBLE
57685: EQUAL
57686: IFTRUE 57714
57688: LD_INT 21
57690: DOUBLE
57691: EQUAL
57692: IFTRUE 57714
57694: LD_INT 23
57696: DOUBLE
57697: EQUAL
57698: IFTRUE 57714
57700: LD_INT 24
57702: DOUBLE
57703: EQUAL
57704: IFTRUE 57714
57706: LD_INT 25
57708: DOUBLE
57709: EQUAL
57710: IFTRUE 57714
57712: GO 57770
57714: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57715: LD_ADDR_VAR 0 9
57719: PUSH
57720: LD_VAR 0 35
57724: PUSH
57725: LD_VAR 0 36
57729: PUSH
57730: LD_VAR 0 37
57734: PUSH
57735: LD_VAR 0 38
57739: PUSH
57740: LD_VAR 0 39
57744: PUSH
57745: LD_VAR 0 40
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: PUSH
57758: LD_VAR 0 4
57762: PUSH
57763: LD_INT 1
57765: PLUS
57766: ARRAY
57767: ST_TO_ADDR
57768: GO 58135
57770: LD_INT 6
57772: DOUBLE
57773: EQUAL
57774: IFTRUE 57826
57776: LD_INT 7
57778: DOUBLE
57779: EQUAL
57780: IFTRUE 57826
57782: LD_INT 8
57784: DOUBLE
57785: EQUAL
57786: IFTRUE 57826
57788: LD_INT 13
57790: DOUBLE
57791: EQUAL
57792: IFTRUE 57826
57794: LD_INT 12
57796: DOUBLE
57797: EQUAL
57798: IFTRUE 57826
57800: LD_INT 15
57802: DOUBLE
57803: EQUAL
57804: IFTRUE 57826
57806: LD_INT 11
57808: DOUBLE
57809: EQUAL
57810: IFTRUE 57826
57812: LD_INT 14
57814: DOUBLE
57815: EQUAL
57816: IFTRUE 57826
57818: LD_INT 10
57820: DOUBLE
57821: EQUAL
57822: IFTRUE 57826
57824: GO 57882
57826: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57827: LD_ADDR_VAR 0 9
57831: PUSH
57832: LD_VAR 0 41
57836: PUSH
57837: LD_VAR 0 42
57841: PUSH
57842: LD_VAR 0 43
57846: PUSH
57847: LD_VAR 0 44
57851: PUSH
57852: LD_VAR 0 45
57856: PUSH
57857: LD_VAR 0 46
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: PUSH
57870: LD_VAR 0 4
57874: PUSH
57875: LD_INT 1
57877: PLUS
57878: ARRAY
57879: ST_TO_ADDR
57880: GO 58135
57882: LD_INT 36
57884: DOUBLE
57885: EQUAL
57886: IFTRUE 57890
57888: GO 57946
57890: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57891: LD_ADDR_VAR 0 9
57895: PUSH
57896: LD_VAR 0 47
57900: PUSH
57901: LD_VAR 0 48
57905: PUSH
57906: LD_VAR 0 49
57910: PUSH
57911: LD_VAR 0 50
57915: PUSH
57916: LD_VAR 0 51
57920: PUSH
57921: LD_VAR 0 52
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: PUSH
57934: LD_VAR 0 4
57938: PUSH
57939: LD_INT 1
57941: PLUS
57942: ARRAY
57943: ST_TO_ADDR
57944: GO 58135
57946: LD_INT 4
57948: DOUBLE
57949: EQUAL
57950: IFTRUE 57972
57952: LD_INT 5
57954: DOUBLE
57955: EQUAL
57956: IFTRUE 57972
57958: LD_INT 34
57960: DOUBLE
57961: EQUAL
57962: IFTRUE 57972
57964: LD_INT 37
57966: DOUBLE
57967: EQUAL
57968: IFTRUE 57972
57970: GO 58028
57972: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57973: LD_ADDR_VAR 0 9
57977: PUSH
57978: LD_VAR 0 53
57982: PUSH
57983: LD_VAR 0 54
57987: PUSH
57988: LD_VAR 0 55
57992: PUSH
57993: LD_VAR 0 56
57997: PUSH
57998: LD_VAR 0 57
58002: PUSH
58003: LD_VAR 0 58
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: PUSH
58016: LD_VAR 0 4
58020: PUSH
58021: LD_INT 1
58023: PLUS
58024: ARRAY
58025: ST_TO_ADDR
58026: GO 58135
58028: LD_INT 31
58030: DOUBLE
58031: EQUAL
58032: IFTRUE 58078
58034: LD_INT 32
58036: DOUBLE
58037: EQUAL
58038: IFTRUE 58078
58040: LD_INT 33
58042: DOUBLE
58043: EQUAL
58044: IFTRUE 58078
58046: LD_INT 27
58048: DOUBLE
58049: EQUAL
58050: IFTRUE 58078
58052: LD_INT 26
58054: DOUBLE
58055: EQUAL
58056: IFTRUE 58078
58058: LD_INT 28
58060: DOUBLE
58061: EQUAL
58062: IFTRUE 58078
58064: LD_INT 29
58066: DOUBLE
58067: EQUAL
58068: IFTRUE 58078
58070: LD_INT 30
58072: DOUBLE
58073: EQUAL
58074: IFTRUE 58078
58076: GO 58134
58078: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58079: LD_ADDR_VAR 0 9
58083: PUSH
58084: LD_VAR 0 59
58088: PUSH
58089: LD_VAR 0 60
58093: PUSH
58094: LD_VAR 0 61
58098: PUSH
58099: LD_VAR 0 62
58103: PUSH
58104: LD_VAR 0 63
58108: PUSH
58109: LD_VAR 0 64
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: PUSH
58122: LD_VAR 0 4
58126: PUSH
58127: LD_INT 1
58129: PLUS
58130: ARRAY
58131: ST_TO_ADDR
58132: GO 58135
58134: POP
// temp_list2 = [ ] ;
58135: LD_ADDR_VAR 0 10
58139: PUSH
58140: EMPTY
58141: ST_TO_ADDR
// for i in temp_list do
58142: LD_ADDR_VAR 0 8
58146: PUSH
58147: LD_VAR 0 9
58151: PUSH
58152: FOR_IN
58153: IFFALSE 58205
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58155: LD_ADDR_VAR 0 10
58159: PUSH
58160: LD_VAR 0 10
58164: PUSH
58165: LD_VAR 0 8
58169: PUSH
58170: LD_INT 1
58172: ARRAY
58173: PUSH
58174: LD_VAR 0 2
58178: PLUS
58179: PUSH
58180: LD_VAR 0 8
58184: PUSH
58185: LD_INT 2
58187: ARRAY
58188: PUSH
58189: LD_VAR 0 3
58193: PLUS
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: ADD
58202: ST_TO_ADDR
58203: GO 58152
58205: POP
58206: POP
// result = temp_list2 ;
58207: LD_ADDR_VAR 0 7
58211: PUSH
58212: LD_VAR 0 10
58216: ST_TO_ADDR
// end ;
58217: LD_VAR 0 7
58221: RET
// export function EnemyInRange ( unit , dist ) ; begin
58222: LD_INT 0
58224: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58225: LD_ADDR_VAR 0 3
58229: PUSH
58230: LD_VAR 0 1
58234: PPUSH
58235: CALL_OW 255
58239: PPUSH
58240: LD_VAR 0 1
58244: PPUSH
58245: CALL_OW 250
58249: PPUSH
58250: LD_VAR 0 1
58254: PPUSH
58255: CALL_OW 251
58259: PPUSH
58260: LD_VAR 0 2
58264: PPUSH
58265: CALL 31615 0 4
58269: PUSH
58270: LD_INT 4
58272: ARRAY
58273: ST_TO_ADDR
// end ;
58274: LD_VAR 0 3
58278: RET
// export function PlayerSeeMe ( unit ) ; begin
58279: LD_INT 0
58281: PPUSH
// result := See ( your_side , unit ) ;
58282: LD_ADDR_VAR 0 2
58286: PUSH
58287: LD_OWVAR 2
58291: PPUSH
58292: LD_VAR 0 1
58296: PPUSH
58297: CALL_OW 292
58301: ST_TO_ADDR
// end ;
58302: LD_VAR 0 2
58306: RET
// export function ReverseDir ( unit ) ; begin
58307: LD_INT 0
58309: PPUSH
// if not unit then
58310: LD_VAR 0 1
58314: NOT
58315: IFFALSE 58319
// exit ;
58317: GO 58342
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58319: LD_ADDR_VAR 0 2
58323: PUSH
58324: LD_VAR 0 1
58328: PPUSH
58329: CALL_OW 254
58333: PUSH
58334: LD_INT 3
58336: PLUS
58337: PUSH
58338: LD_INT 6
58340: MOD
58341: ST_TO_ADDR
// end ;
58342: LD_VAR 0 2
58346: RET
// export function ReverseArray ( array ) ; var i ; begin
58347: LD_INT 0
58349: PPUSH
58350: PPUSH
// if not array then
58351: LD_VAR 0 1
58355: NOT
58356: IFFALSE 58360
// exit ;
58358: GO 58415
// result := [ ] ;
58360: LD_ADDR_VAR 0 2
58364: PUSH
58365: EMPTY
58366: ST_TO_ADDR
// for i := array downto 1 do
58367: LD_ADDR_VAR 0 3
58371: PUSH
58372: DOUBLE
58373: LD_VAR 0 1
58377: INC
58378: ST_TO_ADDR
58379: LD_INT 1
58381: PUSH
58382: FOR_DOWNTO
58383: IFFALSE 58413
// result := Join ( result , array [ i ] ) ;
58385: LD_ADDR_VAR 0 2
58389: PUSH
58390: LD_VAR 0 2
58394: PPUSH
58395: LD_VAR 0 1
58399: PUSH
58400: LD_VAR 0 3
58404: ARRAY
58405: PPUSH
58406: CALL 63058 0 2
58410: ST_TO_ADDR
58411: GO 58382
58413: POP
58414: POP
// end ;
58415: LD_VAR 0 2
58419: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58420: LD_INT 0
58422: PPUSH
58423: PPUSH
58424: PPUSH
58425: PPUSH
58426: PPUSH
58427: PPUSH
// if not unit or not hexes then
58428: LD_VAR 0 1
58432: NOT
58433: PUSH
58434: LD_VAR 0 2
58438: NOT
58439: OR
58440: IFFALSE 58444
// exit ;
58442: GO 58567
// dist := 9999 ;
58444: LD_ADDR_VAR 0 5
58448: PUSH
58449: LD_INT 9999
58451: ST_TO_ADDR
// for i = 1 to hexes do
58452: LD_ADDR_VAR 0 4
58456: PUSH
58457: DOUBLE
58458: LD_INT 1
58460: DEC
58461: ST_TO_ADDR
58462: LD_VAR 0 2
58466: PUSH
58467: FOR_TO
58468: IFFALSE 58555
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58470: LD_ADDR_VAR 0 6
58474: PUSH
58475: LD_VAR 0 1
58479: PPUSH
58480: LD_VAR 0 2
58484: PUSH
58485: LD_VAR 0 4
58489: ARRAY
58490: PUSH
58491: LD_INT 1
58493: ARRAY
58494: PPUSH
58495: LD_VAR 0 2
58499: PUSH
58500: LD_VAR 0 4
58504: ARRAY
58505: PUSH
58506: LD_INT 2
58508: ARRAY
58509: PPUSH
58510: CALL_OW 297
58514: ST_TO_ADDR
// if tdist < dist then
58515: LD_VAR 0 6
58519: PUSH
58520: LD_VAR 0 5
58524: LESS
58525: IFFALSE 58553
// begin hex := hexes [ i ] ;
58527: LD_ADDR_VAR 0 8
58531: PUSH
58532: LD_VAR 0 2
58536: PUSH
58537: LD_VAR 0 4
58541: ARRAY
58542: ST_TO_ADDR
// dist := tdist ;
58543: LD_ADDR_VAR 0 5
58547: PUSH
58548: LD_VAR 0 6
58552: ST_TO_ADDR
// end ; end ;
58553: GO 58467
58555: POP
58556: POP
// result := hex ;
58557: LD_ADDR_VAR 0 3
58561: PUSH
58562: LD_VAR 0 8
58566: ST_TO_ADDR
// end ;
58567: LD_VAR 0 3
58571: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58572: LD_INT 0
58574: PPUSH
58575: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58576: LD_VAR 0 1
58580: NOT
58581: PUSH
58582: LD_VAR 0 1
58586: PUSH
58587: LD_INT 21
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 23
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PPUSH
58611: CALL_OW 69
58615: IN
58616: NOT
58617: OR
58618: IFFALSE 58622
// exit ;
58620: GO 58669
// for i = 1 to 3 do
58622: LD_ADDR_VAR 0 3
58626: PUSH
58627: DOUBLE
58628: LD_INT 1
58630: DEC
58631: ST_TO_ADDR
58632: LD_INT 3
58634: PUSH
58635: FOR_TO
58636: IFFALSE 58667
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58638: LD_VAR 0 1
58642: PPUSH
58643: CALL_OW 250
58647: PPUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: CALL_OW 251
58657: PPUSH
58658: LD_INT 1
58660: PPUSH
58661: CALL_OW 453
58665: GO 58635
58667: POP
58668: POP
// end ;
58669: LD_VAR 0 2
58673: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58674: LD_INT 0
58676: PPUSH
58677: PPUSH
58678: PPUSH
58679: PPUSH
58680: PPUSH
58681: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58682: LD_VAR 0 1
58686: NOT
58687: PUSH
58688: LD_VAR 0 2
58692: NOT
58693: OR
58694: PUSH
58695: LD_VAR 0 1
58699: PPUSH
58700: CALL_OW 314
58704: OR
58705: IFFALSE 58709
// exit ;
58707: GO 59176
// if GetLives ( i ) < 250 then
58709: LD_VAR 0 4
58713: PPUSH
58714: CALL_OW 256
58718: PUSH
58719: LD_INT 250
58721: LESS
58722: IFFALSE 58735
// begin ComAutodestruct ( i ) ;
58724: LD_VAR 0 4
58728: PPUSH
58729: CALL 58572 0 1
// exit ;
58733: GO 59176
// end ; x := GetX ( enemy_unit ) ;
58735: LD_ADDR_VAR 0 7
58739: PUSH
58740: LD_VAR 0 2
58744: PPUSH
58745: CALL_OW 250
58749: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58750: LD_ADDR_VAR 0 8
58754: PUSH
58755: LD_VAR 0 2
58759: PPUSH
58760: CALL_OW 251
58764: ST_TO_ADDR
// if not x or not y then
58765: LD_VAR 0 7
58769: NOT
58770: PUSH
58771: LD_VAR 0 8
58775: NOT
58776: OR
58777: IFFALSE 58781
// exit ;
58779: GO 59176
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58781: LD_ADDR_VAR 0 6
58785: PUSH
58786: LD_VAR 0 7
58790: PPUSH
58791: LD_INT 0
58793: PPUSH
58794: LD_INT 4
58796: PPUSH
58797: CALL_OW 272
58801: PUSH
58802: LD_VAR 0 8
58806: PPUSH
58807: LD_INT 0
58809: PPUSH
58810: LD_INT 4
58812: PPUSH
58813: CALL_OW 273
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_VAR 0 7
58826: PPUSH
58827: LD_INT 1
58829: PPUSH
58830: LD_INT 4
58832: PPUSH
58833: CALL_OW 272
58837: PUSH
58838: LD_VAR 0 8
58842: PPUSH
58843: LD_INT 1
58845: PPUSH
58846: LD_INT 4
58848: PPUSH
58849: CALL_OW 273
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_VAR 0 7
58862: PPUSH
58863: LD_INT 2
58865: PPUSH
58866: LD_INT 4
58868: PPUSH
58869: CALL_OW 272
58873: PUSH
58874: LD_VAR 0 8
58878: PPUSH
58879: LD_INT 2
58881: PPUSH
58882: LD_INT 4
58884: PPUSH
58885: CALL_OW 273
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_VAR 0 7
58898: PPUSH
58899: LD_INT 3
58901: PPUSH
58902: LD_INT 4
58904: PPUSH
58905: CALL_OW 272
58909: PUSH
58910: LD_VAR 0 8
58914: PPUSH
58915: LD_INT 3
58917: PPUSH
58918: LD_INT 4
58920: PPUSH
58921: CALL_OW 273
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_VAR 0 7
58934: PPUSH
58935: LD_INT 4
58937: PPUSH
58938: LD_INT 4
58940: PPUSH
58941: CALL_OW 272
58945: PUSH
58946: LD_VAR 0 8
58950: PPUSH
58951: LD_INT 4
58953: PPUSH
58954: LD_INT 4
58956: PPUSH
58957: CALL_OW 273
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_VAR 0 7
58970: PPUSH
58971: LD_INT 5
58973: PPUSH
58974: LD_INT 4
58976: PPUSH
58977: CALL_OW 272
58981: PUSH
58982: LD_VAR 0 8
58986: PPUSH
58987: LD_INT 5
58989: PPUSH
58990: LD_INT 4
58992: PPUSH
58993: CALL_OW 273
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: ST_TO_ADDR
// for i = tmp downto 1 do
59010: LD_ADDR_VAR 0 4
59014: PUSH
59015: DOUBLE
59016: LD_VAR 0 6
59020: INC
59021: ST_TO_ADDR
59022: LD_INT 1
59024: PUSH
59025: FOR_DOWNTO
59026: IFFALSE 59127
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59028: LD_VAR 0 6
59032: PUSH
59033: LD_VAR 0 4
59037: ARRAY
59038: PUSH
59039: LD_INT 1
59041: ARRAY
59042: PPUSH
59043: LD_VAR 0 6
59047: PUSH
59048: LD_VAR 0 4
59052: ARRAY
59053: PUSH
59054: LD_INT 2
59056: ARRAY
59057: PPUSH
59058: CALL_OW 488
59062: NOT
59063: PUSH
59064: LD_VAR 0 6
59068: PUSH
59069: LD_VAR 0 4
59073: ARRAY
59074: PUSH
59075: LD_INT 1
59077: ARRAY
59078: PPUSH
59079: LD_VAR 0 6
59083: PUSH
59084: LD_VAR 0 4
59088: ARRAY
59089: PUSH
59090: LD_INT 2
59092: ARRAY
59093: PPUSH
59094: CALL_OW 428
59098: PUSH
59099: LD_INT 0
59101: NONEQUAL
59102: OR
59103: IFFALSE 59125
// tmp := Delete ( tmp , i ) ;
59105: LD_ADDR_VAR 0 6
59109: PUSH
59110: LD_VAR 0 6
59114: PPUSH
59115: LD_VAR 0 4
59119: PPUSH
59120: CALL_OW 3
59124: ST_TO_ADDR
59125: GO 59025
59127: POP
59128: POP
// j := GetClosestHex ( unit , tmp ) ;
59129: LD_ADDR_VAR 0 5
59133: PUSH
59134: LD_VAR 0 1
59138: PPUSH
59139: LD_VAR 0 6
59143: PPUSH
59144: CALL 58420 0 2
59148: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59149: LD_VAR 0 1
59153: PPUSH
59154: LD_VAR 0 5
59158: PUSH
59159: LD_INT 1
59161: ARRAY
59162: PPUSH
59163: LD_VAR 0 5
59167: PUSH
59168: LD_INT 2
59170: ARRAY
59171: PPUSH
59172: CALL_OW 111
// end ;
59176: LD_VAR 0 3
59180: RET
// export function PrepareApemanSoldier ( ) ; begin
59181: LD_INT 0
59183: PPUSH
// uc_nation := 0 ;
59184: LD_ADDR_OWVAR 21
59188: PUSH
59189: LD_INT 0
59191: ST_TO_ADDR
// hc_sex := sex_male ;
59192: LD_ADDR_OWVAR 27
59196: PUSH
59197: LD_INT 1
59199: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59200: LD_ADDR_OWVAR 28
59204: PUSH
59205: LD_INT 15
59207: ST_TO_ADDR
// hc_gallery :=  ;
59208: LD_ADDR_OWVAR 33
59212: PUSH
59213: LD_STRING 
59215: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59216: LD_ADDR_OWVAR 31
59220: PUSH
59221: LD_INT 0
59223: PPUSH
59224: LD_INT 3
59226: PPUSH
59227: CALL_OW 12
59231: PUSH
59232: LD_INT 0
59234: PPUSH
59235: LD_INT 3
59237: PPUSH
59238: CALL_OW 12
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: ST_TO_ADDR
// end ;
59255: LD_VAR 0 1
59259: RET
// export function PrepareApemanEngineer ( ) ; begin
59260: LD_INT 0
59262: PPUSH
// uc_nation := 0 ;
59263: LD_ADDR_OWVAR 21
59267: PUSH
59268: LD_INT 0
59270: ST_TO_ADDR
// hc_sex := sex_male ;
59271: LD_ADDR_OWVAR 27
59275: PUSH
59276: LD_INT 1
59278: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59279: LD_ADDR_OWVAR 28
59283: PUSH
59284: LD_INT 16
59286: ST_TO_ADDR
// hc_gallery :=  ;
59287: LD_ADDR_OWVAR 33
59291: PUSH
59292: LD_STRING 
59294: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59295: LD_ADDR_OWVAR 31
59299: PUSH
59300: LD_INT 0
59302: PPUSH
59303: LD_INT 3
59305: PPUSH
59306: CALL_OW 12
59310: PUSH
59311: LD_INT 0
59313: PPUSH
59314: LD_INT 3
59316: PPUSH
59317: CALL_OW 12
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// end ;
59334: LD_VAR 0 1
59338: RET
// export function PrepareApeman ( agressivity ) ; begin
59339: LD_INT 0
59341: PPUSH
// uc_side := 0 ;
59342: LD_ADDR_OWVAR 20
59346: PUSH
59347: LD_INT 0
59349: ST_TO_ADDR
// uc_nation := 0 ;
59350: LD_ADDR_OWVAR 21
59354: PUSH
59355: LD_INT 0
59357: ST_TO_ADDR
// hc_sex := sex_male ;
59358: LD_ADDR_OWVAR 27
59362: PUSH
59363: LD_INT 1
59365: ST_TO_ADDR
// hc_class := class_apeman ;
59366: LD_ADDR_OWVAR 28
59370: PUSH
59371: LD_INT 12
59373: ST_TO_ADDR
// hc_gallery :=  ;
59374: LD_ADDR_OWVAR 33
59378: PUSH
59379: LD_STRING 
59381: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59382: LD_ADDR_OWVAR 35
59386: PUSH
59387: LD_VAR 0 1
59391: NEG
59392: PPUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 12
59402: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59403: LD_ADDR_OWVAR 31
59407: PUSH
59408: LD_INT 0
59410: PPUSH
59411: LD_INT 3
59413: PPUSH
59414: CALL_OW 12
59418: PUSH
59419: LD_INT 0
59421: PPUSH
59422: LD_INT 3
59424: PPUSH
59425: CALL_OW 12
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: ST_TO_ADDR
// end ;
59442: LD_VAR 0 2
59446: RET
// export function PrepareTiger ( agressivity ) ; begin
59447: LD_INT 0
59449: PPUSH
// uc_side := 0 ;
59450: LD_ADDR_OWVAR 20
59454: PUSH
59455: LD_INT 0
59457: ST_TO_ADDR
// uc_nation := 0 ;
59458: LD_ADDR_OWVAR 21
59462: PUSH
59463: LD_INT 0
59465: ST_TO_ADDR
// hc_class := class_tiger ;
59466: LD_ADDR_OWVAR 28
59470: PUSH
59471: LD_INT 14
59473: ST_TO_ADDR
// hc_gallery :=  ;
59474: LD_ADDR_OWVAR 33
59478: PUSH
59479: LD_STRING 
59481: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59482: LD_ADDR_OWVAR 35
59486: PUSH
59487: LD_VAR 0 1
59491: NEG
59492: PPUSH
59493: LD_VAR 0 1
59497: PPUSH
59498: CALL_OW 12
59502: ST_TO_ADDR
// end ;
59503: LD_VAR 0 2
59507: RET
// export function PrepareEnchidna ( ) ; begin
59508: LD_INT 0
59510: PPUSH
// uc_side := 0 ;
59511: LD_ADDR_OWVAR 20
59515: PUSH
59516: LD_INT 0
59518: ST_TO_ADDR
// uc_nation := 0 ;
59519: LD_ADDR_OWVAR 21
59523: PUSH
59524: LD_INT 0
59526: ST_TO_ADDR
// hc_class := class_baggie ;
59527: LD_ADDR_OWVAR 28
59531: PUSH
59532: LD_INT 13
59534: ST_TO_ADDR
// hc_gallery :=  ;
59535: LD_ADDR_OWVAR 33
59539: PUSH
59540: LD_STRING 
59542: ST_TO_ADDR
// end ;
59543: LD_VAR 0 1
59547: RET
// export function PrepareFrog ( ) ; begin
59548: LD_INT 0
59550: PPUSH
// uc_side := 0 ;
59551: LD_ADDR_OWVAR 20
59555: PUSH
59556: LD_INT 0
59558: ST_TO_ADDR
// uc_nation := 0 ;
59559: LD_ADDR_OWVAR 21
59563: PUSH
59564: LD_INT 0
59566: ST_TO_ADDR
// hc_class := class_frog ;
59567: LD_ADDR_OWVAR 28
59571: PUSH
59572: LD_INT 19
59574: ST_TO_ADDR
// hc_gallery :=  ;
59575: LD_ADDR_OWVAR 33
59579: PUSH
59580: LD_STRING 
59582: ST_TO_ADDR
// end ;
59583: LD_VAR 0 1
59587: RET
// export function PrepareFish ( ) ; begin
59588: LD_INT 0
59590: PPUSH
// uc_side := 0 ;
59591: LD_ADDR_OWVAR 20
59595: PUSH
59596: LD_INT 0
59598: ST_TO_ADDR
// uc_nation := 0 ;
59599: LD_ADDR_OWVAR 21
59603: PUSH
59604: LD_INT 0
59606: ST_TO_ADDR
// hc_class := class_fish ;
59607: LD_ADDR_OWVAR 28
59611: PUSH
59612: LD_INT 20
59614: ST_TO_ADDR
// hc_gallery :=  ;
59615: LD_ADDR_OWVAR 33
59619: PUSH
59620: LD_STRING 
59622: ST_TO_ADDR
// end ;
59623: LD_VAR 0 1
59627: RET
// export function PrepareBird ( ) ; begin
59628: LD_INT 0
59630: PPUSH
// uc_side := 0 ;
59631: LD_ADDR_OWVAR 20
59635: PUSH
59636: LD_INT 0
59638: ST_TO_ADDR
// uc_nation := 0 ;
59639: LD_ADDR_OWVAR 21
59643: PUSH
59644: LD_INT 0
59646: ST_TO_ADDR
// hc_class := class_phororhacos ;
59647: LD_ADDR_OWVAR 28
59651: PUSH
59652: LD_INT 18
59654: ST_TO_ADDR
// hc_gallery :=  ;
59655: LD_ADDR_OWVAR 33
59659: PUSH
59660: LD_STRING 
59662: ST_TO_ADDR
// end ;
59663: LD_VAR 0 1
59667: RET
// export function PrepareHorse ( ) ; begin
59668: LD_INT 0
59670: PPUSH
// uc_side := 0 ;
59671: LD_ADDR_OWVAR 20
59675: PUSH
59676: LD_INT 0
59678: ST_TO_ADDR
// uc_nation := 0 ;
59679: LD_ADDR_OWVAR 21
59683: PUSH
59684: LD_INT 0
59686: ST_TO_ADDR
// hc_class := class_horse ;
59687: LD_ADDR_OWVAR 28
59691: PUSH
59692: LD_INT 21
59694: ST_TO_ADDR
// hc_gallery :=  ;
59695: LD_ADDR_OWVAR 33
59699: PUSH
59700: LD_STRING 
59702: ST_TO_ADDR
// end ;
59703: LD_VAR 0 1
59707: RET
// export function PrepareMastodont ( ) ; begin
59708: LD_INT 0
59710: PPUSH
// uc_side := 0 ;
59711: LD_ADDR_OWVAR 20
59715: PUSH
59716: LD_INT 0
59718: ST_TO_ADDR
// uc_nation := 0 ;
59719: LD_ADDR_OWVAR 21
59723: PUSH
59724: LD_INT 0
59726: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59727: LD_ADDR_OWVAR 37
59731: PUSH
59732: LD_INT 31
59734: ST_TO_ADDR
// vc_control := control_rider ;
59735: LD_ADDR_OWVAR 38
59739: PUSH
59740: LD_INT 4
59742: ST_TO_ADDR
// end ;
59743: LD_VAR 0 1
59747: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59748: LD_INT 0
59750: PPUSH
59751: PPUSH
59752: PPUSH
// uc_side = 0 ;
59753: LD_ADDR_OWVAR 20
59757: PUSH
59758: LD_INT 0
59760: ST_TO_ADDR
// uc_nation = 0 ;
59761: LD_ADDR_OWVAR 21
59765: PUSH
59766: LD_INT 0
59768: ST_TO_ADDR
// InitHc_All ( ) ;
59769: CALL_OW 584
// InitVc ;
59773: CALL_OW 20
// if mastodonts then
59777: LD_VAR 0 6
59781: IFFALSE 59848
// for i = 1 to mastodonts do
59783: LD_ADDR_VAR 0 11
59787: PUSH
59788: DOUBLE
59789: LD_INT 1
59791: DEC
59792: ST_TO_ADDR
59793: LD_VAR 0 6
59797: PUSH
59798: FOR_TO
59799: IFFALSE 59846
// begin vc_chassis := 31 ;
59801: LD_ADDR_OWVAR 37
59805: PUSH
59806: LD_INT 31
59808: ST_TO_ADDR
// vc_control := control_rider ;
59809: LD_ADDR_OWVAR 38
59813: PUSH
59814: LD_INT 4
59816: ST_TO_ADDR
// animal := CreateVehicle ;
59817: LD_ADDR_VAR 0 12
59821: PUSH
59822: CALL_OW 45
59826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59827: LD_VAR 0 12
59831: PPUSH
59832: LD_VAR 0 8
59836: PPUSH
59837: LD_INT 0
59839: PPUSH
59840: CALL 61976 0 3
// end ;
59844: GO 59798
59846: POP
59847: POP
// if horses then
59848: LD_VAR 0 5
59852: IFFALSE 59919
// for i = 1 to horses do
59854: LD_ADDR_VAR 0 11
59858: PUSH
59859: DOUBLE
59860: LD_INT 1
59862: DEC
59863: ST_TO_ADDR
59864: LD_VAR 0 5
59868: PUSH
59869: FOR_TO
59870: IFFALSE 59917
// begin hc_class := 21 ;
59872: LD_ADDR_OWVAR 28
59876: PUSH
59877: LD_INT 21
59879: ST_TO_ADDR
// hc_gallery :=  ;
59880: LD_ADDR_OWVAR 33
59884: PUSH
59885: LD_STRING 
59887: ST_TO_ADDR
// animal := CreateHuman ;
59888: LD_ADDR_VAR 0 12
59892: PUSH
59893: CALL_OW 44
59897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59898: LD_VAR 0 12
59902: PPUSH
59903: LD_VAR 0 8
59907: PPUSH
59908: LD_INT 0
59910: PPUSH
59911: CALL 61976 0 3
// end ;
59915: GO 59869
59917: POP
59918: POP
// if birds then
59919: LD_VAR 0 1
59923: IFFALSE 59990
// for i = 1 to birds do
59925: LD_ADDR_VAR 0 11
59929: PUSH
59930: DOUBLE
59931: LD_INT 1
59933: DEC
59934: ST_TO_ADDR
59935: LD_VAR 0 1
59939: PUSH
59940: FOR_TO
59941: IFFALSE 59988
// begin hc_class = 18 ;
59943: LD_ADDR_OWVAR 28
59947: PUSH
59948: LD_INT 18
59950: ST_TO_ADDR
// hc_gallery =  ;
59951: LD_ADDR_OWVAR 33
59955: PUSH
59956: LD_STRING 
59958: ST_TO_ADDR
// animal := CreateHuman ;
59959: LD_ADDR_VAR 0 12
59963: PUSH
59964: CALL_OW 44
59968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59969: LD_VAR 0 12
59973: PPUSH
59974: LD_VAR 0 8
59978: PPUSH
59979: LD_INT 0
59981: PPUSH
59982: CALL 61976 0 3
// end ;
59986: GO 59940
59988: POP
59989: POP
// if tigers then
59990: LD_VAR 0 2
59994: IFFALSE 60078
// for i = 1 to tigers do
59996: LD_ADDR_VAR 0 11
60000: PUSH
60001: DOUBLE
60002: LD_INT 1
60004: DEC
60005: ST_TO_ADDR
60006: LD_VAR 0 2
60010: PUSH
60011: FOR_TO
60012: IFFALSE 60076
// begin hc_class = class_tiger ;
60014: LD_ADDR_OWVAR 28
60018: PUSH
60019: LD_INT 14
60021: ST_TO_ADDR
// hc_gallery =  ;
60022: LD_ADDR_OWVAR 33
60026: PUSH
60027: LD_STRING 
60029: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60030: LD_ADDR_OWVAR 35
60034: PUSH
60035: LD_INT 7
60037: NEG
60038: PPUSH
60039: LD_INT 7
60041: PPUSH
60042: CALL_OW 12
60046: ST_TO_ADDR
// animal := CreateHuman ;
60047: LD_ADDR_VAR 0 12
60051: PUSH
60052: CALL_OW 44
60056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60057: LD_VAR 0 12
60061: PPUSH
60062: LD_VAR 0 8
60066: PPUSH
60067: LD_INT 0
60069: PPUSH
60070: CALL 61976 0 3
// end ;
60074: GO 60011
60076: POP
60077: POP
// if apemans then
60078: LD_VAR 0 3
60082: IFFALSE 60205
// for i = 1 to apemans do
60084: LD_ADDR_VAR 0 11
60088: PUSH
60089: DOUBLE
60090: LD_INT 1
60092: DEC
60093: ST_TO_ADDR
60094: LD_VAR 0 3
60098: PUSH
60099: FOR_TO
60100: IFFALSE 60203
// begin hc_class = class_apeman ;
60102: LD_ADDR_OWVAR 28
60106: PUSH
60107: LD_INT 12
60109: ST_TO_ADDR
// hc_gallery =  ;
60110: LD_ADDR_OWVAR 33
60114: PUSH
60115: LD_STRING 
60117: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60118: LD_ADDR_OWVAR 35
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PPUSH
60127: LD_INT 2
60129: PPUSH
60130: CALL_OW 12
60134: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60135: LD_ADDR_OWVAR 31
60139: PUSH
60140: LD_INT 1
60142: PPUSH
60143: LD_INT 3
60145: PPUSH
60146: CALL_OW 12
60150: PUSH
60151: LD_INT 1
60153: PPUSH
60154: LD_INT 3
60156: PPUSH
60157: CALL_OW 12
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: ST_TO_ADDR
// animal := CreateHuman ;
60174: LD_ADDR_VAR 0 12
60178: PUSH
60179: CALL_OW 44
60183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60184: LD_VAR 0 12
60188: PPUSH
60189: LD_VAR 0 8
60193: PPUSH
60194: LD_INT 0
60196: PPUSH
60197: CALL 61976 0 3
// end ;
60201: GO 60099
60203: POP
60204: POP
// if enchidnas then
60205: LD_VAR 0 4
60209: IFFALSE 60276
// for i = 1 to enchidnas do
60211: LD_ADDR_VAR 0 11
60215: PUSH
60216: DOUBLE
60217: LD_INT 1
60219: DEC
60220: ST_TO_ADDR
60221: LD_VAR 0 4
60225: PUSH
60226: FOR_TO
60227: IFFALSE 60274
// begin hc_class = 13 ;
60229: LD_ADDR_OWVAR 28
60233: PUSH
60234: LD_INT 13
60236: ST_TO_ADDR
// hc_gallery =  ;
60237: LD_ADDR_OWVAR 33
60241: PUSH
60242: LD_STRING 
60244: ST_TO_ADDR
// animal := CreateHuman ;
60245: LD_ADDR_VAR 0 12
60249: PUSH
60250: CALL_OW 44
60254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60255: LD_VAR 0 12
60259: PPUSH
60260: LD_VAR 0 8
60264: PPUSH
60265: LD_INT 0
60267: PPUSH
60268: CALL 61976 0 3
// end ;
60272: GO 60226
60274: POP
60275: POP
// if fishes then
60276: LD_VAR 0 7
60280: IFFALSE 60347
// for i = 1 to fishes do
60282: LD_ADDR_VAR 0 11
60286: PUSH
60287: DOUBLE
60288: LD_INT 1
60290: DEC
60291: ST_TO_ADDR
60292: LD_VAR 0 7
60296: PUSH
60297: FOR_TO
60298: IFFALSE 60345
// begin hc_class = 20 ;
60300: LD_ADDR_OWVAR 28
60304: PUSH
60305: LD_INT 20
60307: ST_TO_ADDR
// hc_gallery =  ;
60308: LD_ADDR_OWVAR 33
60312: PUSH
60313: LD_STRING 
60315: ST_TO_ADDR
// animal := CreateHuman ;
60316: LD_ADDR_VAR 0 12
60320: PUSH
60321: CALL_OW 44
60325: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60326: LD_VAR 0 12
60330: PPUSH
60331: LD_VAR 0 9
60335: PPUSH
60336: LD_INT 0
60338: PPUSH
60339: CALL 61976 0 3
// end ;
60343: GO 60297
60345: POP
60346: POP
// end ;
60347: LD_VAR 0 10
60351: RET
// export function WantHeal ( sci , unit ) ; begin
60352: LD_INT 0
60354: PPUSH
// if GetTaskList ( sci ) > 0 then
60355: LD_VAR 0 1
60359: PPUSH
60360: CALL_OW 437
60364: PUSH
60365: LD_INT 0
60367: GREATER
60368: IFFALSE 60438
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60370: LD_VAR 0 1
60374: PPUSH
60375: CALL_OW 437
60379: PUSH
60380: LD_INT 1
60382: ARRAY
60383: PUSH
60384: LD_INT 1
60386: ARRAY
60387: PUSH
60388: LD_STRING l
60390: EQUAL
60391: PUSH
60392: LD_VAR 0 1
60396: PPUSH
60397: CALL_OW 437
60401: PUSH
60402: LD_INT 1
60404: ARRAY
60405: PUSH
60406: LD_INT 4
60408: ARRAY
60409: PUSH
60410: LD_VAR 0 2
60414: EQUAL
60415: AND
60416: IFFALSE 60428
// result := true else
60418: LD_ADDR_VAR 0 3
60422: PUSH
60423: LD_INT 1
60425: ST_TO_ADDR
60426: GO 60436
// result := false ;
60428: LD_ADDR_VAR 0 3
60432: PUSH
60433: LD_INT 0
60435: ST_TO_ADDR
// end else
60436: GO 60446
// result := false ;
60438: LD_ADDR_VAR 0 3
60442: PUSH
60443: LD_INT 0
60445: ST_TO_ADDR
// end ;
60446: LD_VAR 0 3
60450: RET
// export function HealTarget ( sci ) ; begin
60451: LD_INT 0
60453: PPUSH
// if not sci then
60454: LD_VAR 0 1
60458: NOT
60459: IFFALSE 60463
// exit ;
60461: GO 60528
// result := 0 ;
60463: LD_ADDR_VAR 0 2
60467: PUSH
60468: LD_INT 0
60470: ST_TO_ADDR
// if GetTaskList ( sci ) then
60471: LD_VAR 0 1
60475: PPUSH
60476: CALL_OW 437
60480: IFFALSE 60528
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 437
60491: PUSH
60492: LD_INT 1
60494: ARRAY
60495: PUSH
60496: LD_INT 1
60498: ARRAY
60499: PUSH
60500: LD_STRING l
60502: EQUAL
60503: IFFALSE 60528
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60505: LD_ADDR_VAR 0 2
60509: PUSH
60510: LD_VAR 0 1
60514: PPUSH
60515: CALL_OW 437
60519: PUSH
60520: LD_INT 1
60522: ARRAY
60523: PUSH
60524: LD_INT 4
60526: ARRAY
60527: ST_TO_ADDR
// end ;
60528: LD_VAR 0 2
60532: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60533: LD_INT 0
60535: PPUSH
60536: PPUSH
60537: PPUSH
60538: PPUSH
// if not base_units then
60539: LD_VAR 0 1
60543: NOT
60544: IFFALSE 60548
// exit ;
60546: GO 60635
// result := false ;
60548: LD_ADDR_VAR 0 2
60552: PUSH
60553: LD_INT 0
60555: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60556: LD_ADDR_VAR 0 5
60560: PUSH
60561: LD_VAR 0 1
60565: PPUSH
60566: LD_INT 21
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PPUSH
60576: CALL_OW 72
60580: ST_TO_ADDR
// if not tmp then
60581: LD_VAR 0 5
60585: NOT
60586: IFFALSE 60590
// exit ;
60588: GO 60635
// for i in tmp do
60590: LD_ADDR_VAR 0 3
60594: PUSH
60595: LD_VAR 0 5
60599: PUSH
60600: FOR_IN
60601: IFFALSE 60633
// begin result := EnemyInRange ( i , 22 ) ;
60603: LD_ADDR_VAR 0 2
60607: PUSH
60608: LD_VAR 0 3
60612: PPUSH
60613: LD_INT 22
60615: PPUSH
60616: CALL 58222 0 2
60620: ST_TO_ADDR
// if result then
60621: LD_VAR 0 2
60625: IFFALSE 60631
// exit ;
60627: POP
60628: POP
60629: GO 60635
// end ;
60631: GO 60600
60633: POP
60634: POP
// end ;
60635: LD_VAR 0 2
60639: RET
// export function FilterByTag ( units , tag ) ; begin
60640: LD_INT 0
60642: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60643: LD_ADDR_VAR 0 3
60647: PUSH
60648: LD_VAR 0 1
60652: PPUSH
60653: LD_INT 120
60655: PUSH
60656: LD_VAR 0 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PPUSH
60665: CALL_OW 72
60669: ST_TO_ADDR
// end ;
60670: LD_VAR 0 3
60674: RET
// export function IsDriver ( un ) ; begin
60675: LD_INT 0
60677: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60678: LD_ADDR_VAR 0 2
60682: PUSH
60683: LD_VAR 0 1
60687: PUSH
60688: LD_INT 55
60690: PUSH
60691: EMPTY
60692: LIST
60693: PPUSH
60694: CALL_OW 69
60698: IN
60699: ST_TO_ADDR
// end ;
60700: LD_VAR 0 2
60704: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60705: LD_INT 0
60707: PPUSH
60708: PPUSH
// list := [ ] ;
60709: LD_ADDR_VAR 0 5
60713: PUSH
60714: EMPTY
60715: ST_TO_ADDR
// case d of 0 :
60716: LD_VAR 0 3
60720: PUSH
60721: LD_INT 0
60723: DOUBLE
60724: EQUAL
60725: IFTRUE 60729
60727: GO 60862
60729: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60730: LD_ADDR_VAR 0 5
60734: PUSH
60735: LD_VAR 0 1
60739: PUSH
60740: LD_INT 4
60742: MINUS
60743: PUSH
60744: LD_VAR 0 2
60748: PUSH
60749: LD_INT 4
60751: MINUS
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: PUSH
60761: LD_VAR 0 1
60765: PUSH
60766: LD_INT 3
60768: MINUS
60769: PUSH
60770: LD_VAR 0 2
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: PUSH
60783: LD_VAR 0 1
60787: PUSH
60788: LD_INT 4
60790: PLUS
60791: PUSH
60792: LD_VAR 0 2
60796: PUSH
60797: LD_INT 4
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: PUSH
60805: LD_VAR 0 1
60809: PUSH
60810: LD_INT 3
60812: PLUS
60813: PUSH
60814: LD_VAR 0 2
60818: PUSH
60819: LD_INT 3
60821: PLUS
60822: PUSH
60823: LD_INT 5
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: PUSH
60831: LD_VAR 0 1
60835: PUSH
60836: LD_VAR 0 2
60840: PUSH
60841: LD_INT 4
60843: PLUS
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: LIST
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: ST_TO_ADDR
// end ; 1 :
60860: GO 61560
60862: LD_INT 1
60864: DOUBLE
60865: EQUAL
60866: IFTRUE 60870
60868: GO 61003
60870: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60871: LD_ADDR_VAR 0 5
60875: PUSH
60876: LD_VAR 0 1
60880: PUSH
60881: LD_VAR 0 2
60885: PUSH
60886: LD_INT 4
60888: MINUS
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: LIST
60897: PUSH
60898: LD_VAR 0 1
60902: PUSH
60903: LD_INT 3
60905: MINUS
60906: PUSH
60907: LD_VAR 0 2
60911: PUSH
60912: LD_INT 3
60914: MINUS
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: PUSH
60924: LD_VAR 0 1
60928: PUSH
60929: LD_INT 4
60931: MINUS
60932: PUSH
60933: LD_VAR 0 2
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: LIST
60945: PUSH
60946: LD_VAR 0 1
60950: PUSH
60951: LD_VAR 0 2
60955: PUSH
60956: LD_INT 3
60958: PLUS
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: LIST
60967: PUSH
60968: LD_VAR 0 1
60972: PUSH
60973: LD_INT 4
60975: PLUS
60976: PUSH
60977: LD_VAR 0 2
60981: PUSH
60982: LD_INT 4
60984: PLUS
60985: PUSH
60986: LD_INT 5
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: ST_TO_ADDR
// end ; 2 :
61001: GO 61560
61003: LD_INT 2
61005: DOUBLE
61006: EQUAL
61007: IFTRUE 61011
61009: GO 61140
61011: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61012: LD_ADDR_VAR 0 5
61016: PUSH
61017: LD_VAR 0 1
61021: PUSH
61022: LD_VAR 0 2
61026: PUSH
61027: LD_INT 3
61029: MINUS
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: PUSH
61039: LD_VAR 0 1
61043: PUSH
61044: LD_INT 4
61046: PLUS
61047: PUSH
61048: LD_VAR 0 2
61052: PUSH
61053: LD_INT 4
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: LIST
61060: PUSH
61061: LD_VAR 0 1
61065: PUSH
61066: LD_VAR 0 2
61070: PUSH
61071: LD_INT 4
61073: PLUS
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: LIST
61082: PUSH
61083: LD_VAR 0 1
61087: PUSH
61088: LD_INT 3
61090: MINUS
61091: PUSH
61092: LD_VAR 0 2
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: PUSH
61105: LD_VAR 0 1
61109: PUSH
61110: LD_INT 4
61112: MINUS
61113: PUSH
61114: LD_VAR 0 2
61118: PUSH
61119: LD_INT 4
61121: MINUS
61122: PUSH
61123: LD_INT 2
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: ST_TO_ADDR
// end ; 3 :
61138: GO 61560
61140: LD_INT 3
61142: DOUBLE
61143: EQUAL
61144: IFTRUE 61148
61146: GO 61281
61148: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61149: LD_ADDR_VAR 0 5
61153: PUSH
61154: LD_VAR 0 1
61158: PUSH
61159: LD_INT 3
61161: PLUS
61162: PUSH
61163: LD_VAR 0 2
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: LIST
61175: PUSH
61176: LD_VAR 0 1
61180: PUSH
61181: LD_INT 4
61183: PLUS
61184: PUSH
61185: LD_VAR 0 2
61189: PUSH
61190: LD_INT 4
61192: PLUS
61193: PUSH
61194: LD_INT 5
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: LIST
61201: PUSH
61202: LD_VAR 0 1
61206: PUSH
61207: LD_INT 4
61209: MINUS
61210: PUSH
61211: LD_VAR 0 2
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: LIST
61223: PUSH
61224: LD_VAR 0 1
61228: PUSH
61229: LD_VAR 0 2
61233: PUSH
61234: LD_INT 4
61236: MINUS
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: PUSH
61246: LD_VAR 0 1
61250: PUSH
61251: LD_INT 3
61253: MINUS
61254: PUSH
61255: LD_VAR 0 2
61259: PUSH
61260: LD_INT 3
61262: MINUS
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: ST_TO_ADDR
// end ; 4 :
61279: GO 61560
61281: LD_INT 4
61283: DOUBLE
61284: EQUAL
61285: IFTRUE 61289
61287: GO 61422
61289: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61290: LD_ADDR_VAR 0 5
61294: PUSH
61295: LD_VAR 0 1
61299: PUSH
61300: LD_VAR 0 2
61304: PUSH
61305: LD_INT 4
61307: PLUS
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: LIST
61316: PUSH
61317: LD_VAR 0 1
61321: PUSH
61322: LD_INT 3
61324: PLUS
61325: PUSH
61326: LD_VAR 0 2
61330: PUSH
61331: LD_INT 3
61333: PLUS
61334: PUSH
61335: LD_INT 5
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: PUSH
61343: LD_VAR 0 1
61347: PUSH
61348: LD_INT 4
61350: PLUS
61351: PUSH
61352: LD_VAR 0 2
61356: PUSH
61357: LD_INT 4
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: LIST
61364: PUSH
61365: LD_VAR 0 1
61369: PUSH
61370: LD_VAR 0 2
61374: PUSH
61375: LD_INT 3
61377: MINUS
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: LIST
61386: PUSH
61387: LD_VAR 0 1
61391: PUSH
61392: LD_INT 4
61394: MINUS
61395: PUSH
61396: LD_VAR 0 2
61400: PUSH
61401: LD_INT 4
61403: MINUS
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: ST_TO_ADDR
// end ; 5 :
61420: GO 61560
61422: LD_INT 5
61424: DOUBLE
61425: EQUAL
61426: IFTRUE 61430
61428: GO 61559
61430: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61431: LD_ADDR_VAR 0 5
61435: PUSH
61436: LD_VAR 0 1
61440: PUSH
61441: LD_INT 4
61443: MINUS
61444: PUSH
61445: LD_VAR 0 2
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: PUSH
61458: LD_VAR 0 1
61462: PUSH
61463: LD_VAR 0 2
61467: PUSH
61468: LD_INT 4
61470: MINUS
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: LIST
61479: PUSH
61480: LD_VAR 0 1
61484: PUSH
61485: LD_INT 4
61487: PLUS
61488: PUSH
61489: LD_VAR 0 2
61493: PUSH
61494: LD_INT 4
61496: PLUS
61497: PUSH
61498: LD_INT 5
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: PUSH
61506: LD_VAR 0 1
61510: PUSH
61511: LD_INT 3
61513: PLUS
61514: PUSH
61515: LD_VAR 0 2
61519: PUSH
61520: LD_INT 4
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: PUSH
61528: LD_VAR 0 1
61532: PUSH
61533: LD_VAR 0 2
61537: PUSH
61538: LD_INT 3
61540: PLUS
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: LIST
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: ST_TO_ADDR
// end ; end ;
61557: GO 61560
61559: POP
// result := list ;
61560: LD_ADDR_VAR 0 4
61564: PUSH
61565: LD_VAR 0 5
61569: ST_TO_ADDR
// end ;
61570: LD_VAR 0 4
61574: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61575: LD_INT 0
61577: PPUSH
61578: PPUSH
61579: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61580: LD_VAR 0 1
61584: NOT
61585: PUSH
61586: LD_VAR 0 2
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: IN
61609: NOT
61610: OR
61611: IFFALSE 61615
// exit ;
61613: GO 61698
// tmp := [ ] ;
61615: LD_ADDR_VAR 0 5
61619: PUSH
61620: EMPTY
61621: ST_TO_ADDR
// for i in units do
61622: LD_ADDR_VAR 0 4
61626: PUSH
61627: LD_VAR 0 1
61631: PUSH
61632: FOR_IN
61633: IFFALSE 61667
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61635: LD_ADDR_VAR 0 5
61639: PUSH
61640: LD_VAR 0 5
61644: PPUSH
61645: LD_VAR 0 4
61649: PPUSH
61650: LD_VAR 0 2
61654: PPUSH
61655: CALL_OW 259
61659: PPUSH
61660: CALL 63058 0 2
61664: ST_TO_ADDR
61665: GO 61632
61667: POP
61668: POP
// if not tmp then
61669: LD_VAR 0 5
61673: NOT
61674: IFFALSE 61678
// exit ;
61676: GO 61698
// result := SortListByListDesc ( units , tmp ) ;
61678: LD_ADDR_VAR 0 3
61682: PUSH
61683: LD_VAR 0 1
61687: PPUSH
61688: LD_VAR 0 5
61692: PPUSH
61693: CALL_OW 77
61697: ST_TO_ADDR
// end ;
61698: LD_VAR 0 3
61702: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61703: LD_INT 0
61705: PPUSH
61706: PPUSH
61707: PPUSH
// result := false ;
61708: LD_ADDR_VAR 0 3
61712: PUSH
61713: LD_INT 0
61715: ST_TO_ADDR
// if not building then
61716: LD_VAR 0 2
61720: NOT
61721: IFFALSE 61725
// exit ;
61723: GO 61863
// x := GetX ( building ) ;
61725: LD_ADDR_VAR 0 4
61729: PUSH
61730: LD_VAR 0 2
61734: PPUSH
61735: CALL_OW 250
61739: ST_TO_ADDR
// y := GetY ( building ) ;
61740: LD_ADDR_VAR 0 5
61744: PUSH
61745: LD_VAR 0 2
61749: PPUSH
61750: CALL_OW 251
61754: ST_TO_ADDR
// if not x or not y then
61755: LD_VAR 0 4
61759: NOT
61760: PUSH
61761: LD_VAR 0 5
61765: NOT
61766: OR
61767: IFFALSE 61771
// exit ;
61769: GO 61863
// if GetTaskList ( unit ) then
61771: LD_VAR 0 1
61775: PPUSH
61776: CALL_OW 437
61780: IFFALSE 61863
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61782: LD_STRING e
61784: PUSH
61785: LD_VAR 0 1
61789: PPUSH
61790: CALL_OW 437
61794: PUSH
61795: LD_INT 1
61797: ARRAY
61798: PUSH
61799: LD_INT 1
61801: ARRAY
61802: EQUAL
61803: PUSH
61804: LD_VAR 0 4
61808: PUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: CALL_OW 437
61818: PUSH
61819: LD_INT 1
61821: ARRAY
61822: PUSH
61823: LD_INT 2
61825: ARRAY
61826: EQUAL
61827: AND
61828: PUSH
61829: LD_VAR 0 5
61833: PUSH
61834: LD_VAR 0 1
61838: PPUSH
61839: CALL_OW 437
61843: PUSH
61844: LD_INT 1
61846: ARRAY
61847: PUSH
61848: LD_INT 3
61850: ARRAY
61851: EQUAL
61852: AND
61853: IFFALSE 61863
// result := true end ;
61855: LD_ADDR_VAR 0 3
61859: PUSH
61860: LD_INT 1
61862: ST_TO_ADDR
// end ;
61863: LD_VAR 0 3
61867: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61868: LD_INT 0
61870: PPUSH
// result := false ;
61871: LD_ADDR_VAR 0 4
61875: PUSH
61876: LD_INT 0
61878: ST_TO_ADDR
// if GetTaskList ( unit ) then
61879: LD_VAR 0 1
61883: PPUSH
61884: CALL_OW 437
61888: IFFALSE 61971
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61890: LD_STRING M
61892: PUSH
61893: LD_VAR 0 1
61897: PPUSH
61898: CALL_OW 437
61902: PUSH
61903: LD_INT 1
61905: ARRAY
61906: PUSH
61907: LD_INT 1
61909: ARRAY
61910: EQUAL
61911: PUSH
61912: LD_VAR 0 2
61916: PUSH
61917: LD_VAR 0 1
61921: PPUSH
61922: CALL_OW 437
61926: PUSH
61927: LD_INT 1
61929: ARRAY
61930: PUSH
61931: LD_INT 2
61933: ARRAY
61934: EQUAL
61935: AND
61936: PUSH
61937: LD_VAR 0 3
61941: PUSH
61942: LD_VAR 0 1
61946: PPUSH
61947: CALL_OW 437
61951: PUSH
61952: LD_INT 1
61954: ARRAY
61955: PUSH
61956: LD_INT 3
61958: ARRAY
61959: EQUAL
61960: AND
61961: IFFALSE 61971
// result := true ;
61963: LD_ADDR_VAR 0 4
61967: PUSH
61968: LD_INT 1
61970: ST_TO_ADDR
// end ; end ;
61971: LD_VAR 0 4
61975: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61976: LD_INT 0
61978: PPUSH
61979: PPUSH
61980: PPUSH
61981: PPUSH
// if not unit or not area then
61982: LD_VAR 0 1
61986: NOT
61987: PUSH
61988: LD_VAR 0 2
61992: NOT
61993: OR
61994: IFFALSE 61998
// exit ;
61996: GO 62161
// tmp := AreaToList ( area , i ) ;
61998: LD_ADDR_VAR 0 6
62002: PUSH
62003: LD_VAR 0 2
62007: PPUSH
62008: LD_VAR 0 5
62012: PPUSH
62013: CALL_OW 517
62017: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62018: LD_ADDR_VAR 0 5
62022: PUSH
62023: DOUBLE
62024: LD_INT 1
62026: DEC
62027: ST_TO_ADDR
62028: LD_VAR 0 6
62032: PUSH
62033: LD_INT 1
62035: ARRAY
62036: PUSH
62037: FOR_TO
62038: IFFALSE 62159
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62040: LD_ADDR_VAR 0 7
62044: PUSH
62045: LD_VAR 0 6
62049: PUSH
62050: LD_INT 1
62052: ARRAY
62053: PUSH
62054: LD_VAR 0 5
62058: ARRAY
62059: PUSH
62060: LD_VAR 0 6
62064: PUSH
62065: LD_INT 2
62067: ARRAY
62068: PUSH
62069: LD_VAR 0 5
62073: ARRAY
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
62079: LD_INT 92
62081: PUSH
62082: LD_VAR 0 7
62086: PUSH
62087: LD_INT 1
62089: ARRAY
62090: PUSH
62091: LD_VAR 0 7
62095: PUSH
62096: LD_INT 2
62098: ARRAY
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: PPUSH
62109: CALL_OW 69
62113: PUSH
62114: LD_INT 0
62116: EQUAL
62117: IFFALSE 62157
// begin PlaceUnitArea ( unit , area , mode ) ;
62119: LD_VAR 0 1
62123: PPUSH
62124: LD_VAR 0 2
62128: PPUSH
62129: LD_VAR 0 3
62133: PPUSH
62134: CALL_OW 49
// result := IsPlaced ( unit ) ;
62138: LD_ADDR_VAR 0 4
62142: PUSH
62143: LD_VAR 0 1
62147: PPUSH
62148: CALL_OW 305
62152: ST_TO_ADDR
// exit ;
62153: POP
62154: POP
62155: GO 62161
// end ; end ;
62157: GO 62037
62159: POP
62160: POP
// end ;
62161: LD_VAR 0 4
62165: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62166: LD_INT 0
62168: PPUSH
62169: PPUSH
62170: PPUSH
// if not side or side > 8 then
62171: LD_VAR 0 1
62175: NOT
62176: PUSH
62177: LD_VAR 0 1
62181: PUSH
62182: LD_INT 8
62184: GREATER
62185: OR
62186: IFFALSE 62190
// exit ;
62188: GO 62377
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62190: LD_ADDR_VAR 0 4
62194: PUSH
62195: LD_INT 22
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 21
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PPUSH
62221: CALL_OW 69
62225: ST_TO_ADDR
// if not tmp then
62226: LD_VAR 0 4
62230: NOT
62231: IFFALSE 62235
// exit ;
62233: GO 62377
// enable_addtolog := true ;
62235: LD_ADDR_OWVAR 81
62239: PUSH
62240: LD_INT 1
62242: ST_TO_ADDR
// AddToLog ( [ ) ;
62243: LD_STRING [
62245: PPUSH
62246: CALL_OW 561
// for i in tmp do
62250: LD_ADDR_VAR 0 3
62254: PUSH
62255: LD_VAR 0 4
62259: PUSH
62260: FOR_IN
62261: IFFALSE 62368
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62263: LD_STRING [
62265: PUSH
62266: LD_VAR 0 3
62270: PPUSH
62271: CALL_OW 266
62275: STR
62276: PUSH
62277: LD_STRING , 
62279: STR
62280: PUSH
62281: LD_VAR 0 3
62285: PPUSH
62286: CALL_OW 250
62290: STR
62291: PUSH
62292: LD_STRING , 
62294: STR
62295: PUSH
62296: LD_VAR 0 3
62300: PPUSH
62301: CALL_OW 251
62305: STR
62306: PUSH
62307: LD_STRING , 
62309: STR
62310: PUSH
62311: LD_VAR 0 3
62315: PPUSH
62316: CALL_OW 254
62320: STR
62321: PUSH
62322: LD_STRING , 
62324: STR
62325: PUSH
62326: LD_VAR 0 3
62330: PPUSH
62331: LD_INT 1
62333: PPUSH
62334: CALL_OW 268
62338: STR
62339: PUSH
62340: LD_STRING , 
62342: STR
62343: PUSH
62344: LD_VAR 0 3
62348: PPUSH
62349: LD_INT 2
62351: PPUSH
62352: CALL_OW 268
62356: STR
62357: PUSH
62358: LD_STRING ],
62360: STR
62361: PPUSH
62362: CALL_OW 561
// end ;
62366: GO 62260
62368: POP
62369: POP
// AddToLog ( ]; ) ;
62370: LD_STRING ];
62372: PPUSH
62373: CALL_OW 561
// end ;
62377: LD_VAR 0 2
62381: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62382: LD_INT 0
62384: PPUSH
62385: PPUSH
62386: PPUSH
62387: PPUSH
62388: PPUSH
// if not area or not rate or not max then
62389: LD_VAR 0 1
62393: NOT
62394: PUSH
62395: LD_VAR 0 2
62399: NOT
62400: OR
62401: PUSH
62402: LD_VAR 0 4
62406: NOT
62407: OR
62408: IFFALSE 62412
// exit ;
62410: GO 62601
// while 1 do
62412: LD_INT 1
62414: IFFALSE 62601
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62416: LD_ADDR_VAR 0 9
62420: PUSH
62421: LD_VAR 0 1
62425: PPUSH
62426: LD_INT 1
62428: PPUSH
62429: CALL_OW 287
62433: PUSH
62434: LD_INT 10
62436: MUL
62437: ST_TO_ADDR
// r := rate / 10 ;
62438: LD_ADDR_VAR 0 7
62442: PUSH
62443: LD_VAR 0 2
62447: PUSH
62448: LD_INT 10
62450: DIVREAL
62451: ST_TO_ADDR
// time := 1 1$00 ;
62452: LD_ADDR_VAR 0 8
62456: PUSH
62457: LD_INT 2100
62459: ST_TO_ADDR
// if amount < min then
62460: LD_VAR 0 9
62464: PUSH
62465: LD_VAR 0 3
62469: LESS
62470: IFFALSE 62488
// r := r * 2 else
62472: LD_ADDR_VAR 0 7
62476: PUSH
62477: LD_VAR 0 7
62481: PUSH
62482: LD_INT 2
62484: MUL
62485: ST_TO_ADDR
62486: GO 62514
// if amount > max then
62488: LD_VAR 0 9
62492: PUSH
62493: LD_VAR 0 4
62497: GREATER
62498: IFFALSE 62514
// r := r / 2 ;
62500: LD_ADDR_VAR 0 7
62504: PUSH
62505: LD_VAR 0 7
62509: PUSH
62510: LD_INT 2
62512: DIVREAL
62513: ST_TO_ADDR
// time := time / r ;
62514: LD_ADDR_VAR 0 8
62518: PUSH
62519: LD_VAR 0 8
62523: PUSH
62524: LD_VAR 0 7
62528: DIVREAL
62529: ST_TO_ADDR
// if time < 0 then
62530: LD_VAR 0 8
62534: PUSH
62535: LD_INT 0
62537: LESS
62538: IFFALSE 62555
// time := time * - 1 ;
62540: LD_ADDR_VAR 0 8
62544: PUSH
62545: LD_VAR 0 8
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: MUL
62554: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62555: LD_VAR 0 8
62559: PUSH
62560: LD_INT 35
62562: PPUSH
62563: LD_INT 875
62565: PPUSH
62566: CALL_OW 12
62570: PLUS
62571: PPUSH
62572: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62576: LD_INT 1
62578: PPUSH
62579: LD_INT 5
62581: PPUSH
62582: CALL_OW 12
62586: PPUSH
62587: LD_VAR 0 1
62591: PPUSH
62592: LD_INT 1
62594: PPUSH
62595: CALL_OW 55
// end ;
62599: GO 62412
// end ;
62601: LD_VAR 0 5
62605: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62606: LD_INT 0
62608: PPUSH
62609: PPUSH
62610: PPUSH
62611: PPUSH
62612: PPUSH
62613: PPUSH
62614: PPUSH
62615: PPUSH
// if not turrets or not factories then
62616: LD_VAR 0 1
62620: NOT
62621: PUSH
62622: LD_VAR 0 2
62626: NOT
62627: OR
62628: IFFALSE 62632
// exit ;
62630: GO 62939
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62632: LD_ADDR_VAR 0 10
62636: PUSH
62637: LD_INT 5
62639: PUSH
62640: LD_INT 6
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 4
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: LD_INT 5
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 24
62674: PUSH
62675: LD_INT 25
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 23
62684: PUSH
62685: LD_INT 27
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 42
62698: PUSH
62699: LD_INT 43
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 44
62708: PUSH
62709: LD_INT 46
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 45
62718: PUSH
62719: LD_INT 47
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: ST_TO_ADDR
// result := [ ] ;
62736: LD_ADDR_VAR 0 3
62740: PUSH
62741: EMPTY
62742: ST_TO_ADDR
// for i in turrets do
62743: LD_ADDR_VAR 0 4
62747: PUSH
62748: LD_VAR 0 1
62752: PUSH
62753: FOR_IN
62754: IFFALSE 62937
// begin nat := GetNation ( i ) ;
62756: LD_ADDR_VAR 0 7
62760: PUSH
62761: LD_VAR 0 4
62765: PPUSH
62766: CALL_OW 248
62770: ST_TO_ADDR
// weapon := 0 ;
62771: LD_ADDR_VAR 0 8
62775: PUSH
62776: LD_INT 0
62778: ST_TO_ADDR
// if not nat then
62779: LD_VAR 0 7
62783: NOT
62784: IFFALSE 62788
// continue ;
62786: GO 62753
// for j in list [ nat ] do
62788: LD_ADDR_VAR 0 5
62792: PUSH
62793: LD_VAR 0 10
62797: PUSH
62798: LD_VAR 0 7
62802: ARRAY
62803: PUSH
62804: FOR_IN
62805: IFFALSE 62846
// if GetBWeapon ( i ) = j [ 1 ] then
62807: LD_VAR 0 4
62811: PPUSH
62812: CALL_OW 269
62816: PUSH
62817: LD_VAR 0 5
62821: PUSH
62822: LD_INT 1
62824: ARRAY
62825: EQUAL
62826: IFFALSE 62844
// begin weapon := j [ 2 ] ;
62828: LD_ADDR_VAR 0 8
62832: PUSH
62833: LD_VAR 0 5
62837: PUSH
62838: LD_INT 2
62840: ARRAY
62841: ST_TO_ADDR
// break ;
62842: GO 62846
// end ;
62844: GO 62804
62846: POP
62847: POP
// if not weapon then
62848: LD_VAR 0 8
62852: NOT
62853: IFFALSE 62857
// continue ;
62855: GO 62753
// for k in factories do
62857: LD_ADDR_VAR 0 6
62861: PUSH
62862: LD_VAR 0 2
62866: PUSH
62867: FOR_IN
62868: IFFALSE 62933
// begin weapons := AvailableWeaponList ( k ) ;
62870: LD_ADDR_VAR 0 9
62874: PUSH
62875: LD_VAR 0 6
62879: PPUSH
62880: CALL_OW 478
62884: ST_TO_ADDR
// if not weapons then
62885: LD_VAR 0 9
62889: NOT
62890: IFFALSE 62894
// continue ;
62892: GO 62867
// if weapon in weapons then
62894: LD_VAR 0 8
62898: PUSH
62899: LD_VAR 0 9
62903: IN
62904: IFFALSE 62931
// begin result := [ i , weapon ] ;
62906: LD_ADDR_VAR 0 3
62910: PUSH
62911: LD_VAR 0 4
62915: PUSH
62916: LD_VAR 0 8
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: ST_TO_ADDR
// exit ;
62925: POP
62926: POP
62927: POP
62928: POP
62929: GO 62939
// end ; end ;
62931: GO 62867
62933: POP
62934: POP
// end ;
62935: GO 62753
62937: POP
62938: POP
// end ;
62939: LD_VAR 0 3
62943: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62944: LD_INT 0
62946: PPUSH
// if not side or side > 8 then
62947: LD_VAR 0 3
62951: NOT
62952: PUSH
62953: LD_VAR 0 3
62957: PUSH
62958: LD_INT 8
62960: GREATER
62961: OR
62962: IFFALSE 62966
// exit ;
62964: GO 63025
// if not range then
62966: LD_VAR 0 4
62970: NOT
62971: IFFALSE 62982
// range := - 12 ;
62973: LD_ADDR_VAR 0 4
62977: PUSH
62978: LD_INT 12
62980: NEG
62981: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62982: LD_VAR 0 1
62986: PPUSH
62987: LD_VAR 0 2
62991: PPUSH
62992: LD_VAR 0 3
62996: PPUSH
62997: LD_VAR 0 4
63001: PPUSH
63002: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63006: LD_VAR 0 1
63010: PPUSH
63011: LD_VAR 0 2
63015: PPUSH
63016: LD_VAR 0 3
63020: PPUSH
63021: CALL_OW 331
// end ;
63025: LD_VAR 0 5
63029: RET
// export function Video ( mode ) ; begin
63030: LD_INT 0
63032: PPUSH
// ingame_video = mode ;
63033: LD_ADDR_OWVAR 52
63037: PUSH
63038: LD_VAR 0 1
63042: ST_TO_ADDR
// interface_hidden = mode ;
63043: LD_ADDR_OWVAR 54
63047: PUSH
63048: LD_VAR 0 1
63052: ST_TO_ADDR
// end ;
63053: LD_VAR 0 2
63057: RET
// export function Join ( array , element ) ; begin
63058: LD_INT 0
63060: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63061: LD_ADDR_VAR 0 3
63065: PUSH
63066: LD_VAR 0 1
63070: PPUSH
63071: LD_VAR 0 1
63075: PUSH
63076: LD_INT 1
63078: PLUS
63079: PPUSH
63080: LD_VAR 0 2
63084: PPUSH
63085: CALL_OW 1
63089: ST_TO_ADDR
// end ;
63090: LD_VAR 0 3
63094: RET
// export function JoinUnion ( array , element ) ; begin
63095: LD_INT 0
63097: PPUSH
// result := array union element ;
63098: LD_ADDR_VAR 0 3
63102: PUSH
63103: LD_VAR 0 1
63107: PUSH
63108: LD_VAR 0 2
63112: UNION
63113: ST_TO_ADDR
// end ;
63114: LD_VAR 0 3
63118: RET
// export function GetBehemoths ( side ) ; begin
63119: LD_INT 0
63121: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63122: LD_ADDR_VAR 0 2
63126: PUSH
63127: LD_INT 22
63129: PUSH
63130: LD_VAR 0 1
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 31
63141: PUSH
63142: LD_INT 25
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PPUSH
63153: CALL_OW 69
63157: ST_TO_ADDR
// end ;
63158: LD_VAR 0 2
63162: RET
// export function Shuffle ( array ) ; var i , index ; begin
63163: LD_INT 0
63165: PPUSH
63166: PPUSH
63167: PPUSH
// result := [ ] ;
63168: LD_ADDR_VAR 0 2
63172: PUSH
63173: EMPTY
63174: ST_TO_ADDR
// if not array then
63175: LD_VAR 0 1
63179: NOT
63180: IFFALSE 63184
// exit ;
63182: GO 63283
// Randomize ;
63184: CALL_OW 10
// for i = array downto 1 do
63188: LD_ADDR_VAR 0 3
63192: PUSH
63193: DOUBLE
63194: LD_VAR 0 1
63198: INC
63199: ST_TO_ADDR
63200: LD_INT 1
63202: PUSH
63203: FOR_DOWNTO
63204: IFFALSE 63281
// begin index := rand ( 1 , array ) ;
63206: LD_ADDR_VAR 0 4
63210: PUSH
63211: LD_INT 1
63213: PPUSH
63214: LD_VAR 0 1
63218: PPUSH
63219: CALL_OW 12
63223: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63224: LD_ADDR_VAR 0 2
63228: PUSH
63229: LD_VAR 0 2
63233: PPUSH
63234: LD_VAR 0 2
63238: PUSH
63239: LD_INT 1
63241: PLUS
63242: PPUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_VAR 0 4
63252: ARRAY
63253: PPUSH
63254: CALL_OW 2
63258: ST_TO_ADDR
// array := Delete ( array , index ) ;
63259: LD_ADDR_VAR 0 1
63263: PUSH
63264: LD_VAR 0 1
63268: PPUSH
63269: LD_VAR 0 4
63273: PPUSH
63274: CALL_OW 3
63278: ST_TO_ADDR
// end ;
63279: GO 63203
63281: POP
63282: POP
// end ;
63283: LD_VAR 0 2
63287: RET
// export function GetBaseMaterials ( base ) ; begin
63288: LD_INT 0
63290: PPUSH
// result := [ 0 , 0 , 0 ] ;
63291: LD_ADDR_VAR 0 2
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// if not base then
63310: LD_VAR 0 1
63314: NOT
63315: IFFALSE 63319
// exit ;
63317: GO 63368
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63319: LD_ADDR_VAR 0 2
63323: PUSH
63324: LD_VAR 0 1
63328: PPUSH
63329: LD_INT 1
63331: PPUSH
63332: CALL_OW 275
63336: PUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: LD_INT 2
63344: PPUSH
63345: CALL_OW 275
63349: PUSH
63350: LD_VAR 0 1
63354: PPUSH
63355: LD_INT 3
63357: PPUSH
63358: CALL_OW 275
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: ST_TO_ADDR
// end ;
63368: LD_VAR 0 2
63372: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63373: LD_INT 0
63375: PPUSH
63376: PPUSH
// result := array ;
63377: LD_ADDR_VAR 0 3
63381: PUSH
63382: LD_VAR 0 1
63386: ST_TO_ADDR
// if size >= result then
63387: LD_VAR 0 2
63391: PUSH
63392: LD_VAR 0 3
63396: GREATEREQUAL
63397: IFFALSE 63401
// exit ;
63399: GO 63451
// if size then
63401: LD_VAR 0 2
63405: IFFALSE 63451
// for i := array downto size do
63407: LD_ADDR_VAR 0 4
63411: PUSH
63412: DOUBLE
63413: LD_VAR 0 1
63417: INC
63418: ST_TO_ADDR
63419: LD_VAR 0 2
63423: PUSH
63424: FOR_DOWNTO
63425: IFFALSE 63449
// result := Delete ( result , result ) ;
63427: LD_ADDR_VAR 0 3
63431: PUSH
63432: LD_VAR 0 3
63436: PPUSH
63437: LD_VAR 0 3
63441: PPUSH
63442: CALL_OW 3
63446: ST_TO_ADDR
63447: GO 63424
63449: POP
63450: POP
// end ;
63451: LD_VAR 0 3
63455: RET
// export function ComExit ( unit ) ; var tmp ; begin
63456: LD_INT 0
63458: PPUSH
63459: PPUSH
// if not IsInUnit ( unit ) then
63460: LD_VAR 0 1
63464: PPUSH
63465: CALL_OW 310
63469: NOT
63470: IFFALSE 63474
// exit ;
63472: GO 63534
// tmp := IsInUnit ( unit ) ;
63474: LD_ADDR_VAR 0 3
63478: PUSH
63479: LD_VAR 0 1
63483: PPUSH
63484: CALL_OW 310
63488: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63489: LD_VAR 0 3
63493: PPUSH
63494: CALL_OW 247
63498: PUSH
63499: LD_INT 2
63501: EQUAL
63502: IFFALSE 63515
// ComExitVehicle ( unit ) else
63504: LD_VAR 0 1
63508: PPUSH
63509: CALL_OW 121
63513: GO 63524
// ComExitBuilding ( unit ) ;
63515: LD_VAR 0 1
63519: PPUSH
63520: CALL_OW 122
// result := tmp ;
63524: LD_ADDR_VAR 0 2
63528: PUSH
63529: LD_VAR 0 3
63533: ST_TO_ADDR
// end ;
63534: LD_VAR 0 2
63538: RET
// export function ComExitAll ( units ) ; var i ; begin
63539: LD_INT 0
63541: PPUSH
63542: PPUSH
// if not units then
63543: LD_VAR 0 1
63547: NOT
63548: IFFALSE 63552
// exit ;
63550: GO 63578
// for i in units do
63552: LD_ADDR_VAR 0 3
63556: PUSH
63557: LD_VAR 0 1
63561: PUSH
63562: FOR_IN
63563: IFFALSE 63576
// ComExit ( i ) ;
63565: LD_VAR 0 3
63569: PPUSH
63570: CALL 63456 0 1
63574: GO 63562
63576: POP
63577: POP
// end ;
63578: LD_VAR 0 2
63582: RET
// export function ResetHc ; begin
63583: LD_INT 0
63585: PPUSH
// InitHc ;
63586: CALL_OW 19
// hc_importance := 0 ;
63590: LD_ADDR_OWVAR 32
63594: PUSH
63595: LD_INT 0
63597: ST_TO_ADDR
// end ;
63598: LD_VAR 0 1
63602: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63603: LD_INT 0
63605: PPUSH
63606: PPUSH
63607: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63608: LD_ADDR_VAR 0 6
63612: PUSH
63613: LD_VAR 0 1
63617: PUSH
63618: LD_VAR 0 3
63622: PLUS
63623: PUSH
63624: LD_INT 2
63626: DIV
63627: ST_TO_ADDR
// if _x < 0 then
63628: LD_VAR 0 6
63632: PUSH
63633: LD_INT 0
63635: LESS
63636: IFFALSE 63653
// _x := _x * - 1 ;
63638: LD_ADDR_VAR 0 6
63642: PUSH
63643: LD_VAR 0 6
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: MUL
63652: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63653: LD_ADDR_VAR 0 7
63657: PUSH
63658: LD_VAR 0 2
63662: PUSH
63663: LD_VAR 0 4
63667: PLUS
63668: PUSH
63669: LD_INT 2
63671: DIV
63672: ST_TO_ADDR
// if _y < 0 then
63673: LD_VAR 0 7
63677: PUSH
63678: LD_INT 0
63680: LESS
63681: IFFALSE 63698
// _y := _y * - 1 ;
63683: LD_ADDR_VAR 0 7
63687: PUSH
63688: LD_VAR 0 7
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: MUL
63697: ST_TO_ADDR
// result := [ _x , _y ] ;
63698: LD_ADDR_VAR 0 5
63702: PUSH
63703: LD_VAR 0 6
63707: PUSH
63708: LD_VAR 0 7
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: ST_TO_ADDR
// end ;
63717: LD_VAR 0 5
63721: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63722: LD_INT 0
63724: PPUSH
63725: PPUSH
63726: PPUSH
63727: PPUSH
// task := GetTaskList ( unit ) ;
63728: LD_ADDR_VAR 0 7
63732: PUSH
63733: LD_VAR 0 1
63737: PPUSH
63738: CALL_OW 437
63742: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63743: LD_VAR 0 7
63747: NOT
63748: PUSH
63749: LD_VAR 0 1
63753: PPUSH
63754: LD_VAR 0 2
63758: PPUSH
63759: CALL_OW 308
63763: NOT
63764: AND
63765: IFFALSE 63769
// exit ;
63767: GO 63887
// if IsInArea ( unit , area ) then
63769: LD_VAR 0 1
63773: PPUSH
63774: LD_VAR 0 2
63778: PPUSH
63779: CALL_OW 308
63783: IFFALSE 63801
// begin ComMoveToArea ( unit , goAway ) ;
63785: LD_VAR 0 1
63789: PPUSH
63790: LD_VAR 0 3
63794: PPUSH
63795: CALL_OW 113
// exit ;
63799: GO 63887
// end ; if task [ 1 ] [ 1 ] <> M then
63801: LD_VAR 0 7
63805: PUSH
63806: LD_INT 1
63808: ARRAY
63809: PUSH
63810: LD_INT 1
63812: ARRAY
63813: PUSH
63814: LD_STRING M
63816: NONEQUAL
63817: IFFALSE 63821
// exit ;
63819: GO 63887
// x := task [ 1 ] [ 2 ] ;
63821: LD_ADDR_VAR 0 5
63825: PUSH
63826: LD_VAR 0 7
63830: PUSH
63831: LD_INT 1
63833: ARRAY
63834: PUSH
63835: LD_INT 2
63837: ARRAY
63838: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63839: LD_ADDR_VAR 0 6
63843: PUSH
63844: LD_VAR 0 7
63848: PUSH
63849: LD_INT 1
63851: ARRAY
63852: PUSH
63853: LD_INT 3
63855: ARRAY
63856: ST_TO_ADDR
// if InArea ( x , y , area ) then
63857: LD_VAR 0 5
63861: PPUSH
63862: LD_VAR 0 6
63866: PPUSH
63867: LD_VAR 0 2
63871: PPUSH
63872: CALL_OW 309
63876: IFFALSE 63887
// ComStop ( unit ) ;
63878: LD_VAR 0 1
63882: PPUSH
63883: CALL_OW 141
// end ;
63887: LD_VAR 0 4
63891: RET
// export function Abs ( value ) ; begin
63892: LD_INT 0
63894: PPUSH
// result := value ;
63895: LD_ADDR_VAR 0 2
63899: PUSH
63900: LD_VAR 0 1
63904: ST_TO_ADDR
// if value < 0 then
63905: LD_VAR 0 1
63909: PUSH
63910: LD_INT 0
63912: LESS
63913: IFFALSE 63930
// result := value * - 1 ;
63915: LD_ADDR_VAR 0 2
63919: PUSH
63920: LD_VAR 0 1
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: MUL
63929: ST_TO_ADDR
// end ;
63930: LD_VAR 0 2
63934: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63935: LD_INT 0
63937: PPUSH
63938: PPUSH
63939: PPUSH
63940: PPUSH
63941: PPUSH
63942: PPUSH
63943: PPUSH
63944: PPUSH
// if not unit or not building then
63945: LD_VAR 0 1
63949: NOT
63950: PUSH
63951: LD_VAR 0 2
63955: NOT
63956: OR
63957: IFFALSE 63961
// exit ;
63959: GO 64187
// x := GetX ( building ) ;
63961: LD_ADDR_VAR 0 4
63965: PUSH
63966: LD_VAR 0 2
63970: PPUSH
63971: CALL_OW 250
63975: ST_TO_ADDR
// y := GetY ( building ) ;
63976: LD_ADDR_VAR 0 6
63980: PUSH
63981: LD_VAR 0 2
63985: PPUSH
63986: CALL_OW 251
63990: ST_TO_ADDR
// d := GetDir ( building ) ;
63991: LD_ADDR_VAR 0 8
63995: PUSH
63996: LD_VAR 0 2
64000: PPUSH
64001: CALL_OW 254
64005: ST_TO_ADDR
// r := 4 ;
64006: LD_ADDR_VAR 0 9
64010: PUSH
64011: LD_INT 4
64013: ST_TO_ADDR
// for i := 1 to 5 do
64014: LD_ADDR_VAR 0 10
64018: PUSH
64019: DOUBLE
64020: LD_INT 1
64022: DEC
64023: ST_TO_ADDR
64024: LD_INT 5
64026: PUSH
64027: FOR_TO
64028: IFFALSE 64185
// begin _x := ShiftX ( x , d , r + i ) ;
64030: LD_ADDR_VAR 0 5
64034: PUSH
64035: LD_VAR 0 4
64039: PPUSH
64040: LD_VAR 0 8
64044: PPUSH
64045: LD_VAR 0 9
64049: PUSH
64050: LD_VAR 0 10
64054: PLUS
64055: PPUSH
64056: CALL_OW 272
64060: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64061: LD_ADDR_VAR 0 7
64065: PUSH
64066: LD_VAR 0 6
64070: PPUSH
64071: LD_VAR 0 8
64075: PPUSH
64076: LD_VAR 0 9
64080: PUSH
64081: LD_VAR 0 10
64085: PLUS
64086: PPUSH
64087: CALL_OW 273
64091: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64092: LD_VAR 0 5
64096: PPUSH
64097: LD_VAR 0 7
64101: PPUSH
64102: CALL_OW 488
64106: PUSH
64107: LD_VAR 0 5
64111: PPUSH
64112: LD_VAR 0 7
64116: PPUSH
64117: CALL_OW 428
64121: PPUSH
64122: CALL_OW 247
64126: PUSH
64127: LD_INT 3
64129: PUSH
64130: LD_INT 2
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: IN
64137: NOT
64138: AND
64139: IFFALSE 64183
// begin ComMoveXY ( unit , _x , _y ) ;
64141: LD_VAR 0 1
64145: PPUSH
64146: LD_VAR 0 5
64150: PPUSH
64151: LD_VAR 0 7
64155: PPUSH
64156: CALL_OW 111
// result := [ _x , _y ] ;
64160: LD_ADDR_VAR 0 3
64164: PUSH
64165: LD_VAR 0 5
64169: PUSH
64170: LD_VAR 0 7
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: ST_TO_ADDR
// exit ;
64179: POP
64180: POP
64181: GO 64187
// end ; end ;
64183: GO 64027
64185: POP
64186: POP
// end ;
64187: LD_VAR 0 3
64191: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64192: LD_INT 0
64194: PPUSH
64195: PPUSH
64196: PPUSH
// result := 0 ;
64197: LD_ADDR_VAR 0 3
64201: PUSH
64202: LD_INT 0
64204: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64205: LD_VAR 0 1
64209: PUSH
64210: LD_INT 0
64212: LESS
64213: PUSH
64214: LD_VAR 0 1
64218: PUSH
64219: LD_INT 8
64221: GREATER
64222: OR
64223: PUSH
64224: LD_VAR 0 2
64228: PUSH
64229: LD_INT 0
64231: LESS
64232: OR
64233: PUSH
64234: LD_VAR 0 2
64238: PUSH
64239: LD_INT 8
64241: GREATER
64242: OR
64243: IFFALSE 64247
// exit ;
64245: GO 64322
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64247: LD_ADDR_VAR 0 4
64251: PUSH
64252: LD_INT 22
64254: PUSH
64255: LD_VAR 0 2
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PPUSH
64264: CALL_OW 69
64268: PUSH
64269: FOR_IN
64270: IFFALSE 64320
// begin un := UnitShoot ( i ) ;
64272: LD_ADDR_VAR 0 5
64276: PUSH
64277: LD_VAR 0 4
64281: PPUSH
64282: CALL_OW 504
64286: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64287: LD_VAR 0 5
64291: PPUSH
64292: CALL_OW 255
64296: PUSH
64297: LD_VAR 0 1
64301: EQUAL
64302: IFFALSE 64318
// begin result := un ;
64304: LD_ADDR_VAR 0 3
64308: PUSH
64309: LD_VAR 0 5
64313: ST_TO_ADDR
// exit ;
64314: POP
64315: POP
64316: GO 64322
// end ; end ;
64318: GO 64269
64320: POP
64321: POP
// end ;
64322: LD_VAR 0 3
64326: RET
// export function GetCargoBay ( units ) ; begin
64327: LD_INT 0
64329: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64330: LD_ADDR_VAR 0 2
64334: PUSH
64335: LD_VAR 0 1
64339: PPUSH
64340: LD_INT 2
64342: PUSH
64343: LD_INT 34
64345: PUSH
64346: LD_INT 12
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 34
64355: PUSH
64356: LD_INT 51
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 34
64365: PUSH
64366: LD_INT 32
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 34
64375: PUSH
64376: LD_INT 89
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: PPUSH
64390: CALL_OW 72
64394: ST_TO_ADDR
// end ;
64395: LD_VAR 0 2
64399: RET
// export function Negate ( value ) ; begin
64400: LD_INT 0
64402: PPUSH
// result := not value ;
64403: LD_ADDR_VAR 0 2
64407: PUSH
64408: LD_VAR 0 1
64412: NOT
64413: ST_TO_ADDR
// end ;
64414: LD_VAR 0 2
64418: RET
// export function Inc ( value ) ; begin
64419: LD_INT 0
64421: PPUSH
// result := value + 1 ;
64422: LD_ADDR_VAR 0 2
64426: PUSH
64427: LD_VAR 0 1
64431: PUSH
64432: LD_INT 1
64434: PLUS
64435: ST_TO_ADDR
// end ;
64436: LD_VAR 0 2
64440: RET
// export function Dec ( value ) ; begin
64441: LD_INT 0
64443: PPUSH
// result := value - 1 ;
64444: LD_ADDR_VAR 0 2
64448: PUSH
64449: LD_VAR 0 1
64453: PUSH
64454: LD_INT 1
64456: MINUS
64457: ST_TO_ADDR
// end ;
64458: LD_VAR 0 2
64462: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64463: LD_INT 0
64465: PPUSH
64466: PPUSH
64467: PPUSH
64468: PPUSH
64469: PPUSH
64470: PPUSH
64471: PPUSH
64472: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64473: LD_VAR 0 1
64477: PPUSH
64478: LD_VAR 0 2
64482: PPUSH
64483: CALL_OW 488
64487: NOT
64488: PUSH
64489: LD_VAR 0 3
64493: PPUSH
64494: LD_VAR 0 4
64498: PPUSH
64499: CALL_OW 488
64503: NOT
64504: OR
64505: IFFALSE 64518
// begin result := - 1 ;
64507: LD_ADDR_VAR 0 5
64511: PUSH
64512: LD_INT 1
64514: NEG
64515: ST_TO_ADDR
// exit ;
64516: GO 64753
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64518: LD_ADDR_VAR 0 12
64522: PUSH
64523: LD_VAR 0 1
64527: PPUSH
64528: LD_VAR 0 2
64532: PPUSH
64533: LD_VAR 0 3
64537: PPUSH
64538: LD_VAR 0 4
64542: PPUSH
64543: CALL 63603 0 4
64547: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64548: LD_ADDR_VAR 0 11
64552: PUSH
64553: LD_VAR 0 1
64557: PPUSH
64558: LD_VAR 0 2
64562: PPUSH
64563: LD_VAR 0 12
64567: PUSH
64568: LD_INT 1
64570: ARRAY
64571: PPUSH
64572: LD_VAR 0 12
64576: PUSH
64577: LD_INT 2
64579: ARRAY
64580: PPUSH
64581: CALL_OW 298
64585: ST_TO_ADDR
// distance := 9999 ;
64586: LD_ADDR_VAR 0 10
64590: PUSH
64591: LD_INT 9999
64593: ST_TO_ADDR
// for i := 0 to 5 do
64594: LD_ADDR_VAR 0 6
64598: PUSH
64599: DOUBLE
64600: LD_INT 0
64602: DEC
64603: ST_TO_ADDR
64604: LD_INT 5
64606: PUSH
64607: FOR_TO
64608: IFFALSE 64751
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64610: LD_ADDR_VAR 0 7
64614: PUSH
64615: LD_VAR 0 1
64619: PPUSH
64620: LD_VAR 0 6
64624: PPUSH
64625: LD_VAR 0 11
64629: PPUSH
64630: CALL_OW 272
64634: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64635: LD_ADDR_VAR 0 8
64639: PUSH
64640: LD_VAR 0 2
64644: PPUSH
64645: LD_VAR 0 6
64649: PPUSH
64650: LD_VAR 0 11
64654: PPUSH
64655: CALL_OW 273
64659: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64660: LD_VAR 0 7
64664: PPUSH
64665: LD_VAR 0 8
64669: PPUSH
64670: CALL_OW 488
64674: NOT
64675: IFFALSE 64679
// continue ;
64677: GO 64607
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64679: LD_ADDR_VAR 0 9
64683: PUSH
64684: LD_VAR 0 12
64688: PUSH
64689: LD_INT 1
64691: ARRAY
64692: PPUSH
64693: LD_VAR 0 12
64697: PUSH
64698: LD_INT 2
64700: ARRAY
64701: PPUSH
64702: LD_VAR 0 7
64706: PPUSH
64707: LD_VAR 0 8
64711: PPUSH
64712: CALL_OW 298
64716: ST_TO_ADDR
// if tmp < distance then
64717: LD_VAR 0 9
64721: PUSH
64722: LD_VAR 0 10
64726: LESS
64727: IFFALSE 64749
// begin result := i ;
64729: LD_ADDR_VAR 0 5
64733: PUSH
64734: LD_VAR 0 6
64738: ST_TO_ADDR
// distance := tmp ;
64739: LD_ADDR_VAR 0 10
64743: PUSH
64744: LD_VAR 0 9
64748: ST_TO_ADDR
// end ; end ;
64749: GO 64607
64751: POP
64752: POP
// end ;
64753: LD_VAR 0 5
64757: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64758: LD_INT 0
64760: PPUSH
64761: PPUSH
// if not driver or not IsInUnit ( driver ) then
64762: LD_VAR 0 1
64766: NOT
64767: PUSH
64768: LD_VAR 0 1
64772: PPUSH
64773: CALL_OW 310
64777: NOT
64778: OR
64779: IFFALSE 64783
// exit ;
64781: GO 64873
// vehicle := IsInUnit ( driver ) ;
64783: LD_ADDR_VAR 0 3
64787: PUSH
64788: LD_VAR 0 1
64792: PPUSH
64793: CALL_OW 310
64797: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64798: LD_VAR 0 1
64802: PPUSH
64803: LD_STRING \
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: PUSH
64833: LD_STRING E
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_VAR 0 3
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PPUSH
64869: CALL_OW 446
// end ;
64873: LD_VAR 0 2
64877: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64878: LD_INT 0
64880: PPUSH
64881: PPUSH
// if not driver or not IsInUnit ( driver ) then
64882: LD_VAR 0 1
64886: NOT
64887: PUSH
64888: LD_VAR 0 1
64892: PPUSH
64893: CALL_OW 310
64897: NOT
64898: OR
64899: IFFALSE 64903
// exit ;
64901: GO 64993
// vehicle := IsInUnit ( driver ) ;
64903: LD_ADDR_VAR 0 3
64907: PUSH
64908: LD_VAR 0 1
64912: PPUSH
64913: CALL_OW 310
64917: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64918: LD_VAR 0 1
64922: PPUSH
64923: LD_STRING \
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: PUSH
64953: LD_STRING E
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_VAR 0 3
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PPUSH
64989: CALL_OW 447
// end ;
64993: LD_VAR 0 2
64997: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64998: LD_INT 0
65000: PPUSH
65001: PPUSH
65002: PPUSH
// tmp := [ ] ;
65003: LD_ADDR_VAR 0 5
65007: PUSH
65008: EMPTY
65009: ST_TO_ADDR
// for i in units do
65010: LD_ADDR_VAR 0 4
65014: PUSH
65015: LD_VAR 0 1
65019: PUSH
65020: FOR_IN
65021: IFFALSE 65059
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65023: LD_ADDR_VAR 0 5
65027: PUSH
65028: LD_VAR 0 5
65032: PPUSH
65033: LD_VAR 0 5
65037: PUSH
65038: LD_INT 1
65040: PLUS
65041: PPUSH
65042: LD_VAR 0 4
65046: PPUSH
65047: CALL_OW 256
65051: PPUSH
65052: CALL_OW 2
65056: ST_TO_ADDR
65057: GO 65020
65059: POP
65060: POP
// if not tmp then
65061: LD_VAR 0 5
65065: NOT
65066: IFFALSE 65070
// exit ;
65068: GO 65118
// if asc then
65070: LD_VAR 0 2
65074: IFFALSE 65098
// result := SortListByListAsc ( units , tmp ) else
65076: LD_ADDR_VAR 0 3
65080: PUSH
65081: LD_VAR 0 1
65085: PPUSH
65086: LD_VAR 0 5
65090: PPUSH
65091: CALL_OW 76
65095: ST_TO_ADDR
65096: GO 65118
// result := SortListByListDesc ( units , tmp ) ;
65098: LD_ADDR_VAR 0 3
65102: PUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: LD_VAR 0 5
65112: PPUSH
65113: CALL_OW 77
65117: ST_TO_ADDR
// end ;
65118: LD_VAR 0 3
65122: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65123: LD_INT 0
65125: PPUSH
65126: PPUSH
// task := GetTaskList ( mech ) ;
65127: LD_ADDR_VAR 0 4
65131: PUSH
65132: LD_VAR 0 1
65136: PPUSH
65137: CALL_OW 437
65141: ST_TO_ADDR
// if not task then
65142: LD_VAR 0 4
65146: NOT
65147: IFFALSE 65151
// exit ;
65149: GO 65193
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65151: LD_ADDR_VAR 0 3
65155: PUSH
65156: LD_VAR 0 4
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PUSH
65165: LD_INT 1
65167: ARRAY
65168: PUSH
65169: LD_STRING r
65171: EQUAL
65172: PUSH
65173: LD_VAR 0 4
65177: PUSH
65178: LD_INT 1
65180: ARRAY
65181: PUSH
65182: LD_INT 4
65184: ARRAY
65185: PUSH
65186: LD_VAR 0 2
65190: EQUAL
65191: AND
65192: ST_TO_ADDR
// end ;
65193: LD_VAR 0 3
65197: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65198: LD_INT 0
65200: PPUSH
// SetDir ( unit , d ) ;
65201: LD_VAR 0 1
65205: PPUSH
65206: LD_VAR 0 4
65210: PPUSH
65211: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65215: LD_VAR 0 1
65219: PPUSH
65220: LD_VAR 0 2
65224: PPUSH
65225: LD_VAR 0 3
65229: PPUSH
65230: LD_VAR 0 5
65234: PPUSH
65235: CALL_OW 48
// end ;
65239: LD_VAR 0 6
65243: RET
// export function ToNaturalNumber ( number ) ; begin
65244: LD_INT 0
65246: PPUSH
// result := number div 1 ;
65247: LD_ADDR_VAR 0 2
65251: PUSH
65252: LD_VAR 0 1
65256: PUSH
65257: LD_INT 1
65259: DIV
65260: ST_TO_ADDR
// if number < 0 then
65261: LD_VAR 0 1
65265: PUSH
65266: LD_INT 0
65268: LESS
65269: IFFALSE 65279
// result := 0 ;
65271: LD_ADDR_VAR 0 2
65275: PUSH
65276: LD_INT 0
65278: ST_TO_ADDR
// end ;
65279: LD_VAR 0 2
65283: RET
// export function SortByClass ( units , class ) ; var un ; begin
65284: LD_INT 0
65286: PPUSH
65287: PPUSH
// if not units or not class then
65288: LD_VAR 0 1
65292: NOT
65293: PUSH
65294: LD_VAR 0 2
65298: NOT
65299: OR
65300: IFFALSE 65304
// exit ;
65302: GO 65399
// result := [ ] ;
65304: LD_ADDR_VAR 0 3
65308: PUSH
65309: EMPTY
65310: ST_TO_ADDR
// for un in units do
65311: LD_ADDR_VAR 0 4
65315: PUSH
65316: LD_VAR 0 1
65320: PUSH
65321: FOR_IN
65322: IFFALSE 65397
// if GetClass ( un ) = class then
65324: LD_VAR 0 4
65328: PPUSH
65329: CALL_OW 257
65333: PUSH
65334: LD_VAR 0 2
65338: EQUAL
65339: IFFALSE 65366
// result := Insert ( result , 1 , un ) else
65341: LD_ADDR_VAR 0 3
65345: PUSH
65346: LD_VAR 0 3
65350: PPUSH
65351: LD_INT 1
65353: PPUSH
65354: LD_VAR 0 4
65358: PPUSH
65359: CALL_OW 2
65363: ST_TO_ADDR
65364: GO 65395
// result := Replace ( result , result + 1 , un ) ;
65366: LD_ADDR_VAR 0 3
65370: PUSH
65371: LD_VAR 0 3
65375: PPUSH
65376: LD_VAR 0 3
65380: PUSH
65381: LD_INT 1
65383: PLUS
65384: PPUSH
65385: LD_VAR 0 4
65389: PPUSH
65390: CALL_OW 1
65394: ST_TO_ADDR
65395: GO 65321
65397: POP
65398: POP
// end ;
65399: LD_VAR 0 3
65403: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65404: LD_INT 0
65406: PPUSH
65407: PPUSH
65408: PPUSH
65409: PPUSH
65410: PPUSH
65411: PPUSH
65412: PPUSH
// result := [ ] ;
65413: LD_ADDR_VAR 0 4
65417: PUSH
65418: EMPTY
65419: ST_TO_ADDR
// if x - r < 0 then
65420: LD_VAR 0 1
65424: PUSH
65425: LD_VAR 0 3
65429: MINUS
65430: PUSH
65431: LD_INT 0
65433: LESS
65434: IFFALSE 65446
// min_x := 0 else
65436: LD_ADDR_VAR 0 8
65440: PUSH
65441: LD_INT 0
65443: ST_TO_ADDR
65444: GO 65462
// min_x := x - r ;
65446: LD_ADDR_VAR 0 8
65450: PUSH
65451: LD_VAR 0 1
65455: PUSH
65456: LD_VAR 0 3
65460: MINUS
65461: ST_TO_ADDR
// if y - r < 0 then
65462: LD_VAR 0 2
65466: PUSH
65467: LD_VAR 0 3
65471: MINUS
65472: PUSH
65473: LD_INT 0
65475: LESS
65476: IFFALSE 65488
// min_y := 0 else
65478: LD_ADDR_VAR 0 7
65482: PUSH
65483: LD_INT 0
65485: ST_TO_ADDR
65486: GO 65504
// min_y := y - r ;
65488: LD_ADDR_VAR 0 7
65492: PUSH
65493: LD_VAR 0 2
65497: PUSH
65498: LD_VAR 0 3
65502: MINUS
65503: ST_TO_ADDR
// max_x := x + r ;
65504: LD_ADDR_VAR 0 9
65508: PUSH
65509: LD_VAR 0 1
65513: PUSH
65514: LD_VAR 0 3
65518: PLUS
65519: ST_TO_ADDR
// max_y := y + r ;
65520: LD_ADDR_VAR 0 10
65524: PUSH
65525: LD_VAR 0 2
65529: PUSH
65530: LD_VAR 0 3
65534: PLUS
65535: ST_TO_ADDR
// for _x = min_x to max_x do
65536: LD_ADDR_VAR 0 5
65540: PUSH
65541: DOUBLE
65542: LD_VAR 0 8
65546: DEC
65547: ST_TO_ADDR
65548: LD_VAR 0 9
65552: PUSH
65553: FOR_TO
65554: IFFALSE 65655
// for _y = min_y to max_y do
65556: LD_ADDR_VAR 0 6
65560: PUSH
65561: DOUBLE
65562: LD_VAR 0 7
65566: DEC
65567: ST_TO_ADDR
65568: LD_VAR 0 10
65572: PUSH
65573: FOR_TO
65574: IFFALSE 65651
// begin if not ValidHex ( _x , _y ) then
65576: LD_VAR 0 5
65580: PPUSH
65581: LD_VAR 0 6
65585: PPUSH
65586: CALL_OW 488
65590: NOT
65591: IFFALSE 65595
// continue ;
65593: GO 65573
// if GetResourceTypeXY ( _x , _y ) then
65595: LD_VAR 0 5
65599: PPUSH
65600: LD_VAR 0 6
65604: PPUSH
65605: CALL_OW 283
65609: IFFALSE 65649
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65611: LD_ADDR_VAR 0 4
65615: PUSH
65616: LD_VAR 0 4
65620: PPUSH
65621: LD_VAR 0 4
65625: PUSH
65626: LD_INT 1
65628: PLUS
65629: PPUSH
65630: LD_VAR 0 5
65634: PUSH
65635: LD_VAR 0 6
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PPUSH
65644: CALL_OW 1
65648: ST_TO_ADDR
// end ;
65649: GO 65573
65651: POP
65652: POP
65653: GO 65553
65655: POP
65656: POP
// end ;
65657: LD_VAR 0 4
65661: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65662: LD_INT 0
65664: PPUSH
65665: PPUSH
65666: PPUSH
65667: PPUSH
65668: PPUSH
65669: PPUSH
65670: PPUSH
65671: PPUSH
// if not units then
65672: LD_VAR 0 1
65676: NOT
65677: IFFALSE 65681
// exit ;
65679: GO 66205
// result := UnitFilter ( units , [ f_ok ] ) ;
65681: LD_ADDR_VAR 0 3
65685: PUSH
65686: LD_VAR 0 1
65690: PPUSH
65691: LD_INT 50
65693: PUSH
65694: EMPTY
65695: LIST
65696: PPUSH
65697: CALL_OW 72
65701: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65702: LD_ADDR_VAR 0 8
65706: PUSH
65707: LD_VAR 0 1
65711: PUSH
65712: LD_INT 1
65714: ARRAY
65715: PPUSH
65716: CALL_OW 255
65720: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65721: LD_ADDR_VAR 0 10
65725: PUSH
65726: LD_INT 29
65728: PUSH
65729: LD_INT 91
65731: PUSH
65732: LD_INT 49
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// if not result then
65740: LD_VAR 0 3
65744: NOT
65745: IFFALSE 65749
// exit ;
65747: GO 66205
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65749: LD_ADDR_VAR 0 5
65753: PUSH
65754: LD_INT 81
65756: PUSH
65757: LD_VAR 0 8
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PPUSH
65766: CALL_OW 69
65770: ST_TO_ADDR
// for i in result do
65771: LD_ADDR_VAR 0 4
65775: PUSH
65776: LD_VAR 0 3
65780: PUSH
65781: FOR_IN
65782: IFFALSE 66203
// begin tag := GetTag ( i ) + 1 ;
65784: LD_ADDR_VAR 0 9
65788: PUSH
65789: LD_VAR 0 4
65793: PPUSH
65794: CALL_OW 110
65798: PUSH
65799: LD_INT 1
65801: PLUS
65802: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65803: LD_ADDR_VAR 0 7
65807: PUSH
65808: LD_VAR 0 4
65812: PPUSH
65813: CALL_OW 250
65817: PPUSH
65818: LD_VAR 0 4
65822: PPUSH
65823: CALL_OW 251
65827: PPUSH
65828: LD_INT 6
65830: PPUSH
65831: CALL 65404 0 3
65835: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65836: LD_VAR 0 4
65840: PPUSH
65841: CALL_OW 247
65845: PUSH
65846: LD_INT 2
65848: EQUAL
65849: PUSH
65850: LD_VAR 0 7
65854: AND
65855: PUSH
65856: LD_VAR 0 4
65860: PPUSH
65861: CALL_OW 264
65865: PUSH
65866: LD_VAR 0 10
65870: IN
65871: NOT
65872: AND
65873: IFFALSE 65912
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65875: LD_VAR 0 4
65879: PPUSH
65880: LD_VAR 0 7
65884: PUSH
65885: LD_INT 1
65887: ARRAY
65888: PUSH
65889: LD_INT 1
65891: ARRAY
65892: PPUSH
65893: LD_VAR 0 7
65897: PUSH
65898: LD_INT 1
65900: ARRAY
65901: PUSH
65902: LD_INT 2
65904: ARRAY
65905: PPUSH
65906: CALL_OW 116
65910: GO 66201
// if path > tag then
65912: LD_VAR 0 2
65916: PUSH
65917: LD_VAR 0 9
65921: GREATER
65922: IFFALSE 66130
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65924: LD_ADDR_VAR 0 6
65928: PUSH
65929: LD_VAR 0 5
65933: PPUSH
65934: LD_INT 91
65936: PUSH
65937: LD_VAR 0 4
65941: PUSH
65942: LD_INT 8
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: PPUSH
65950: CALL_OW 72
65954: ST_TO_ADDR
// if nearEnemy then
65955: LD_VAR 0 6
65959: IFFALSE 66028
// begin if GetWeapon ( i ) = ru_time_lapser then
65961: LD_VAR 0 4
65965: PPUSH
65966: CALL_OW 264
65970: PUSH
65971: LD_INT 49
65973: EQUAL
65974: IFFALSE 66002
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65976: LD_VAR 0 4
65980: PPUSH
65981: LD_VAR 0 6
65985: PPUSH
65986: LD_VAR 0 4
65990: PPUSH
65991: CALL_OW 74
65995: PPUSH
65996: CALL_OW 112
66000: GO 66026
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66002: LD_VAR 0 4
66006: PPUSH
66007: LD_VAR 0 6
66011: PPUSH
66012: LD_VAR 0 4
66016: PPUSH
66017: CALL_OW 74
66021: PPUSH
66022: CALL_OW 115
// end else
66026: GO 66128
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66028: LD_VAR 0 4
66032: PPUSH
66033: LD_VAR 0 2
66037: PUSH
66038: LD_VAR 0 9
66042: ARRAY
66043: PUSH
66044: LD_INT 1
66046: ARRAY
66047: PPUSH
66048: LD_VAR 0 2
66052: PUSH
66053: LD_VAR 0 9
66057: ARRAY
66058: PUSH
66059: LD_INT 2
66061: ARRAY
66062: PPUSH
66063: CALL_OW 297
66067: PUSH
66068: LD_INT 6
66070: GREATER
66071: IFFALSE 66114
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66073: LD_VAR 0 4
66077: PPUSH
66078: LD_VAR 0 2
66082: PUSH
66083: LD_VAR 0 9
66087: ARRAY
66088: PUSH
66089: LD_INT 1
66091: ARRAY
66092: PPUSH
66093: LD_VAR 0 2
66097: PUSH
66098: LD_VAR 0 9
66102: ARRAY
66103: PUSH
66104: LD_INT 2
66106: ARRAY
66107: PPUSH
66108: CALL_OW 114
66112: GO 66128
// SetTag ( i , tag ) ;
66114: LD_VAR 0 4
66118: PPUSH
66119: LD_VAR 0 9
66123: PPUSH
66124: CALL_OW 109
// end else
66128: GO 66201
// if enemy then
66130: LD_VAR 0 5
66134: IFFALSE 66201
// begin if GetWeapon ( i ) = ru_time_lapser then
66136: LD_VAR 0 4
66140: PPUSH
66141: CALL_OW 264
66145: PUSH
66146: LD_INT 49
66148: EQUAL
66149: IFFALSE 66177
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66151: LD_VAR 0 4
66155: PPUSH
66156: LD_VAR 0 5
66160: PPUSH
66161: LD_VAR 0 4
66165: PPUSH
66166: CALL_OW 74
66170: PPUSH
66171: CALL_OW 112
66175: GO 66201
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66177: LD_VAR 0 4
66181: PPUSH
66182: LD_VAR 0 5
66186: PPUSH
66187: LD_VAR 0 4
66191: PPUSH
66192: CALL_OW 74
66196: PPUSH
66197: CALL_OW 115
// end ; end ;
66201: GO 65781
66203: POP
66204: POP
// end ;
66205: LD_VAR 0 3
66209: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66210: LD_INT 0
66212: PPUSH
66213: PPUSH
66214: PPUSH
// if not unit or IsInUnit ( unit ) then
66215: LD_VAR 0 1
66219: NOT
66220: PUSH
66221: LD_VAR 0 1
66225: PPUSH
66226: CALL_OW 310
66230: OR
66231: IFFALSE 66235
// exit ;
66233: GO 66326
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66235: LD_ADDR_VAR 0 4
66239: PUSH
66240: LD_VAR 0 1
66244: PPUSH
66245: CALL_OW 250
66249: PPUSH
66250: LD_VAR 0 2
66254: PPUSH
66255: LD_INT 1
66257: PPUSH
66258: CALL_OW 272
66262: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66263: LD_ADDR_VAR 0 5
66267: PUSH
66268: LD_VAR 0 1
66272: PPUSH
66273: CALL_OW 251
66277: PPUSH
66278: LD_VAR 0 2
66282: PPUSH
66283: LD_INT 1
66285: PPUSH
66286: CALL_OW 273
66290: ST_TO_ADDR
// if ValidHex ( x , y ) then
66291: LD_VAR 0 4
66295: PPUSH
66296: LD_VAR 0 5
66300: PPUSH
66301: CALL_OW 488
66305: IFFALSE 66326
// ComTurnXY ( unit , x , y ) ;
66307: LD_VAR 0 1
66311: PPUSH
66312: LD_VAR 0 4
66316: PPUSH
66317: LD_VAR 0 5
66321: PPUSH
66322: CALL_OW 118
// end ;
66326: LD_VAR 0 3
66330: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66331: LD_INT 0
66333: PPUSH
66334: PPUSH
// result := false ;
66335: LD_ADDR_VAR 0 3
66339: PUSH
66340: LD_INT 0
66342: ST_TO_ADDR
// if not units then
66343: LD_VAR 0 2
66347: NOT
66348: IFFALSE 66352
// exit ;
66350: GO 66397
// for i in units do
66352: LD_ADDR_VAR 0 4
66356: PUSH
66357: LD_VAR 0 2
66361: PUSH
66362: FOR_IN
66363: IFFALSE 66395
// if See ( side , i ) then
66365: LD_VAR 0 1
66369: PPUSH
66370: LD_VAR 0 4
66374: PPUSH
66375: CALL_OW 292
66379: IFFALSE 66393
// begin result := true ;
66381: LD_ADDR_VAR 0 3
66385: PUSH
66386: LD_INT 1
66388: ST_TO_ADDR
// exit ;
66389: POP
66390: POP
66391: GO 66397
// end ;
66393: GO 66362
66395: POP
66396: POP
// end ;
66397: LD_VAR 0 3
66401: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66402: LD_INT 0
66404: PPUSH
66405: PPUSH
66406: PPUSH
66407: PPUSH
// if not unit or not points then
66408: LD_VAR 0 1
66412: NOT
66413: PUSH
66414: LD_VAR 0 2
66418: NOT
66419: OR
66420: IFFALSE 66424
// exit ;
66422: GO 66514
// dist := 99999 ;
66424: LD_ADDR_VAR 0 5
66428: PUSH
66429: LD_INT 99999
66431: ST_TO_ADDR
// for i in points do
66432: LD_ADDR_VAR 0 4
66436: PUSH
66437: LD_VAR 0 2
66441: PUSH
66442: FOR_IN
66443: IFFALSE 66512
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66445: LD_ADDR_VAR 0 6
66449: PUSH
66450: LD_VAR 0 1
66454: PPUSH
66455: LD_VAR 0 4
66459: PUSH
66460: LD_INT 1
66462: ARRAY
66463: PPUSH
66464: LD_VAR 0 4
66468: PUSH
66469: LD_INT 2
66471: ARRAY
66472: PPUSH
66473: CALL_OW 297
66477: ST_TO_ADDR
// if tmpDist < dist then
66478: LD_VAR 0 6
66482: PUSH
66483: LD_VAR 0 5
66487: LESS
66488: IFFALSE 66510
// begin result := i ;
66490: LD_ADDR_VAR 0 3
66494: PUSH
66495: LD_VAR 0 4
66499: ST_TO_ADDR
// dist := tmpDist ;
66500: LD_ADDR_VAR 0 5
66504: PUSH
66505: LD_VAR 0 6
66509: ST_TO_ADDR
// end ; end ;
66510: GO 66442
66512: POP
66513: POP
// end ;
66514: LD_VAR 0 3
66518: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66519: LD_INT 0
66521: PPUSH
// uc_side := side ;
66522: LD_ADDR_OWVAR 20
66526: PUSH
66527: LD_VAR 0 1
66531: ST_TO_ADDR
// uc_nation := 3 ;
66532: LD_ADDR_OWVAR 21
66536: PUSH
66537: LD_INT 3
66539: ST_TO_ADDR
// vc_chassis := 25 ;
66540: LD_ADDR_OWVAR 37
66544: PUSH
66545: LD_INT 25
66547: ST_TO_ADDR
// vc_engine := engine_siberite ;
66548: LD_ADDR_OWVAR 39
66552: PUSH
66553: LD_INT 3
66555: ST_TO_ADDR
// vc_control := control_computer ;
66556: LD_ADDR_OWVAR 38
66560: PUSH
66561: LD_INT 3
66563: ST_TO_ADDR
// vc_weapon := 59 ;
66564: LD_ADDR_OWVAR 40
66568: PUSH
66569: LD_INT 59
66571: ST_TO_ADDR
// result := CreateVehicle ;
66572: LD_ADDR_VAR 0 5
66576: PUSH
66577: CALL_OW 45
66581: ST_TO_ADDR
// SetDir ( result , d ) ;
66582: LD_VAR 0 5
66586: PPUSH
66587: LD_VAR 0 4
66591: PPUSH
66592: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66596: LD_VAR 0 5
66600: PPUSH
66601: LD_VAR 0 2
66605: PPUSH
66606: LD_VAR 0 3
66610: PPUSH
66611: LD_INT 0
66613: PPUSH
66614: CALL_OW 48
// end ;
66618: LD_VAR 0 5
66622: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66623: LD_INT 0
66625: PPUSH
66626: PPUSH
66627: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66628: LD_ADDR_VAR 0 2
66632: PUSH
66633: LD_INT 0
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66651: LD_VAR 0 1
66655: NOT
66656: PUSH
66657: LD_VAR 0 1
66661: PPUSH
66662: CALL_OW 264
66666: PUSH
66667: LD_INT 12
66669: PUSH
66670: LD_INT 51
66672: PUSH
66673: LD_INT 32
66675: PUSH
66676: LD_INT 89
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: IN
66685: NOT
66686: OR
66687: IFFALSE 66691
// exit ;
66689: GO 66789
// for i := 1 to 3 do
66691: LD_ADDR_VAR 0 3
66695: PUSH
66696: DOUBLE
66697: LD_INT 1
66699: DEC
66700: ST_TO_ADDR
66701: LD_INT 3
66703: PUSH
66704: FOR_TO
66705: IFFALSE 66787
// begin tmp := GetCargo ( cargo , i ) ;
66707: LD_ADDR_VAR 0 4
66711: PUSH
66712: LD_VAR 0 1
66716: PPUSH
66717: LD_VAR 0 3
66721: PPUSH
66722: CALL_OW 289
66726: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66727: LD_ADDR_VAR 0 2
66731: PUSH
66732: LD_VAR 0 2
66736: PPUSH
66737: LD_VAR 0 3
66741: PPUSH
66742: LD_VAR 0 4
66746: PPUSH
66747: CALL_OW 1
66751: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66752: LD_ADDR_VAR 0 2
66756: PUSH
66757: LD_VAR 0 2
66761: PPUSH
66762: LD_INT 4
66764: PPUSH
66765: LD_VAR 0 2
66769: PUSH
66770: LD_INT 4
66772: ARRAY
66773: PUSH
66774: LD_VAR 0 4
66778: PLUS
66779: PPUSH
66780: CALL_OW 1
66784: ST_TO_ADDR
// end ;
66785: GO 66704
66787: POP
66788: POP
// end ;
66789: LD_VAR 0 2
66793: RET
// export function Length ( array ) ; begin
66794: LD_INT 0
66796: PPUSH
// result := array + 0 ;
66797: LD_ADDR_VAR 0 2
66801: PUSH
66802: LD_VAR 0 1
66806: PUSH
66807: LD_INT 0
66809: PLUS
66810: ST_TO_ADDR
// end ;
66811: LD_VAR 0 2
66815: RET
// export function PrepareArray ( array ) ; begin
66816: LD_INT 0
66818: PPUSH
// result := array diff 0 ;
66819: LD_ADDR_VAR 0 2
66823: PUSH
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 0
66831: DIFF
66832: ST_TO_ADDR
// if not result [ 1 ] then
66833: LD_VAR 0 2
66837: PUSH
66838: LD_INT 1
66840: ARRAY
66841: NOT
66842: IFFALSE 66862
// result := Delete ( result , 1 ) ;
66844: LD_ADDR_VAR 0 2
66848: PUSH
66849: LD_VAR 0 2
66853: PPUSH
66854: LD_INT 1
66856: PPUSH
66857: CALL_OW 3
66861: ST_TO_ADDR
// end ;
66862: LD_VAR 0 2
66866: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66867: LD_INT 0
66869: PPUSH
66870: PPUSH
66871: PPUSH
66872: PPUSH
// sibRocketRange := 25 ;
66873: LD_ADDR_VAR 0 6
66877: PUSH
66878: LD_INT 25
66880: ST_TO_ADDR
// result := false ;
66881: LD_ADDR_VAR 0 4
66885: PUSH
66886: LD_INT 0
66888: ST_TO_ADDR
// for i := 0 to 5 do
66889: LD_ADDR_VAR 0 5
66893: PUSH
66894: DOUBLE
66895: LD_INT 0
66897: DEC
66898: ST_TO_ADDR
66899: LD_INT 5
66901: PUSH
66902: FOR_TO
66903: IFFALSE 66970
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66905: LD_VAR 0 1
66909: PPUSH
66910: LD_VAR 0 5
66914: PPUSH
66915: LD_VAR 0 6
66919: PPUSH
66920: CALL_OW 272
66924: PPUSH
66925: LD_VAR 0 2
66929: PPUSH
66930: LD_VAR 0 5
66934: PPUSH
66935: LD_VAR 0 6
66939: PPUSH
66940: CALL_OW 273
66944: PPUSH
66945: LD_VAR 0 3
66949: PPUSH
66950: CALL_OW 309
66954: IFFALSE 66968
// begin result := true ;
66956: LD_ADDR_VAR 0 4
66960: PUSH
66961: LD_INT 1
66963: ST_TO_ADDR
// exit ;
66964: POP
66965: POP
66966: GO 66972
// end ;
66968: GO 66902
66970: POP
66971: POP
// end ;
66972: LD_VAR 0 4
66976: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66977: LD_INT 0
66979: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66980: LD_VAR 0 1
66984: PPUSH
66985: LD_VAR 0 2
66989: PPUSH
66990: LD_INT 0
66992: PPUSH
66993: LD_INT 0
66995: PPUSH
66996: LD_INT 1
66998: PPUSH
66999: LD_INT 0
67001: PPUSH
67002: CALL_OW 587
// end ;
67006: LD_VAR 0 3
67010: RET
// export function CenterOnNow ( unit ) ; begin
67011: LD_INT 0
67013: PPUSH
// result := IsInUnit ( unit ) ;
67014: LD_ADDR_VAR 0 2
67018: PUSH
67019: LD_VAR 0 1
67023: PPUSH
67024: CALL_OW 310
67028: ST_TO_ADDR
// if not result then
67029: LD_VAR 0 2
67033: NOT
67034: IFFALSE 67046
// result := unit ;
67036: LD_ADDR_VAR 0 2
67040: PUSH
67041: LD_VAR 0 1
67045: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67046: LD_VAR 0 1
67050: PPUSH
67051: CALL_OW 87
// end ;
67055: LD_VAR 0 2
67059: RET
// export function ComMoveHex ( unit , hex ) ; begin
67060: LD_INT 0
67062: PPUSH
// if not hex then
67063: LD_VAR 0 2
67067: NOT
67068: IFFALSE 67072
// exit ;
67070: GO 67125
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67072: LD_VAR 0 2
67076: PUSH
67077: LD_INT 1
67079: ARRAY
67080: PPUSH
67081: LD_VAR 0 2
67085: PUSH
67086: LD_INT 2
67088: ARRAY
67089: PPUSH
67090: CALL_OW 428
67094: IFFALSE 67098
// exit ;
67096: GO 67125
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67098: LD_VAR 0 1
67102: PPUSH
67103: LD_VAR 0 2
67107: PUSH
67108: LD_INT 1
67110: ARRAY
67111: PPUSH
67112: LD_VAR 0 2
67116: PUSH
67117: LD_INT 2
67119: ARRAY
67120: PPUSH
67121: CALL_OW 111
// end ;
67125: LD_VAR 0 3
67129: RET
