// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// RandomizeAll ;
  25: CALL_OW 11
// InGameOn ;
  29: CALL_OW 8
// mission_prefix_prev = 12_ ;
  33: LD_ADDR_EXP 21
  37: PUSH
  38: LD_STRING 12_
  40: ST_TO_ADDR
// PrepareEpsilonBase ;
  41: CALL 2187 0 0
// PrepareHeroes ;
  45: CALL 1028 0 0
// PrepareRandoms ;
  49: CALL 3300 0 0
// CenterNowOnUnits ( JMM ) ;
  53: LD_EXP 1
  57: PPUSH
  58: CALL_OW 87
// DialogueOn ;
  62: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
  66: LD_EXP 1
  70: PPUSH
  71: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
  75: LD_EXP 1
  79: PPUSH
  80: LD_STRING D1-JMM-1
  82: PPUSH
  83: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  87: LD_EXP 2
  91: PPUSH
  92: LD_STRING D1-Pow-1
  94: PPUSH
  95: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
  99: LD_EXP 2
 103: PPUSH
 104: LD_STRING D1-Pow-1a
 106: PPUSH
 107: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 111: LD_EXP 2
 115: PPUSH
 116: LD_STRING D1-Pow-1b
 118: PPUSH
 119: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 123: LD_EXP 2
 127: PPUSH
 128: LD_STRING D1-Pow-1c
 130: PPUSH
 131: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 135: LD_EXP 1
 139: PPUSH
 140: LD_STRING D1-JMM-2
 142: PPUSH
 143: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 147: LD_EXP 2
 151: PPUSH
 152: LD_STRING D1-Pow-2
 154: PPUSH
 155: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_STRING D1-JMM-3
 166: PPUSH
 167: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 171: LD_EXP 2
 175: PPUSH
 176: LD_STRING D1-Pow-3
 178: PPUSH
 179: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 183: LD_EXP 1
 187: PPUSH
 188: LD_STRING D1-JMM-4
 190: PPUSH
 191: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 195: LD_EXP 2
 199: PPUSH
 200: LD_STRING D1-Pow-4
 202: PPUSH
 203: CALL_OW 94
// DialogueOff ;
 207: CALL_OW 7
// SelectAndSaveCharacters ;
 211: CALL 3896 0 0
// InGameOff ;
 215: CALL_OW 9
// Query ( Q1 ) ;
 219: LD_STRING Q1
 221: PPUSH
 222: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 424
// end ;
 236: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 237: LD_INT 1
 239: PPUSH
 240: LD_INT 22
 242: PUSH
 243: LD_INT 1
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 21
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 71
 268: PUSH
 269: LD_INT 0
 271: EQUAL
 272: PUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 21
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 32
 298: PUSH
 299: LD_INT 3
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 33
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: LD_INT 58
 321: PUSH
 322: EMPTY
 323: LIST
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 70
 340: PUSH
 341: LD_INT 8
 343: EQUAL
 344: AND
 345: IFFALSE 925
 347: GO 349
 349: DISABLE
 350: LD_INT 0
 352: PPUSH
 353: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 21
 359: PUSH
 360: LD_INT 2
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 33
 369: PUSH
 370: LD_INT 1
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: LD_INT 3
 379: PUSH
 380: LD_INT 58
 382: PUSH
 383: EMPTY
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 70
 399: PUSH
 400: LD_INT 0
 402: GREATER
 403: IFFALSE 671
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 405: LD_ADDR_VAR 0 1
 409: PUSH
 410: LD_INT 1
 412: PPUSH
 413: LD_INT 21
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: LD_INT 33
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 3
 435: PUSH
 436: LD_INT 58
 438: PUSH
 439: EMPTY
 440: LIST
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: PPUSH
 451: CALL_OW 70
 455: PUSH
 456: FOR_IN
 457: IFFALSE 657
// begin cargoType = GetCargoType ( i ) ;
 459: LD_ADDR_VAR 0 2
 463: PUSH
 464: LD_VAR 0 1
 468: PPUSH
 469: CALL_OW 288
 473: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 264
 483: PUSH
 484: LD_INT 12
 486: EQUAL
 487: IFFALSE 584
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 489: LD_ADDR_EXP 19
 493: PUSH
 494: LD_EXP 19
 498: PUSH
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 248
 508: PUSH
 509: LD_VAR 0 1
 513: PPUSH
 514: CALL_OW 265
 518: PUSH
 519: LD_VAR 0 1
 523: PPUSH
 524: CALL_OW 262
 528: PUSH
 529: LD_VAR 0 1
 533: PPUSH
 534: CALL_OW 263
 538: PUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 264
 548: PUSH
 549: LD_VAR 0 2
 553: PUSH
 554: LD_VAR 0 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PPUSH
 564: CALL_OW 289
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: ADD
 581: ST_TO_ADDR
// end else
 582: GO 655
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 584: LD_ADDR_EXP 19
 588: PUSH
 589: LD_EXP 19
 593: PUSH
 594: LD_VAR 0 1
 598: PPUSH
 599: CALL_OW 248
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: CALL_OW 265
 613: PUSH
 614: LD_VAR 0 1
 618: PPUSH
 619: CALL_OW 262
 623: PUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: CALL_OW 263
 633: PUSH
 634: LD_VAR 0 1
 638: PPUSH
 639: CALL_OW 264
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: ADD
 654: ST_TO_ADDR
// end ; end ;
 655: GO 456
 657: POP
 658: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 659: LD_EXP 19
 663: PPUSH
 664: LD_STRING 13_VehiclesIn13_1
 666: PPUSH
 667: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 671: LD_EXP 23
 675: PPUSH
 676: LD_STRING 13c_others
 678: PPUSH
 679: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 683: LD_EXP 1
 687: PPUSH
 688: LD_STRING 13c_JMM
 690: PPUSH
 691: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 695: LD_EXP 15
 699: PPUSH
 700: LD_STRING 13c_Stevens
 702: PPUSH
 703: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 707: LD_EXP 3
 711: PPUSH
 712: LD_STRING Lisa
 714: PPUSH
 715: LD_EXP 22
 719: PPUSH
 720: CALL 3838 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 724: LD_EXP 8
 728: PPUSH
 729: LD_STRING Brown
 731: PPUSH
 732: LD_EXP 22
 736: PPUSH
 737: CALL 3838 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 741: LD_EXP 4
 745: PPUSH
 746: LD_STRING Donaldson
 748: PPUSH
 749: LD_EXP 22
 753: PPUSH
 754: CALL 3838 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 758: LD_EXP 5
 762: PPUSH
 763: LD_STRING Bobby
 765: PPUSH
 766: LD_EXP 22
 770: PPUSH
 771: CALL 3838 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 775: LD_EXP 6
 779: PPUSH
 780: LD_STRING Cyrus
 782: PPUSH
 783: LD_EXP 22
 787: PPUSH
 788: CALL 3838 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 792: LD_EXP 7
 796: PPUSH
 797: LD_STRING Denis
 799: PPUSH
 800: LD_EXP 22
 804: PPUSH
 805: CALL 3838 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 809: LD_EXP 9
 813: PPUSH
 814: LD_STRING Gladstone
 816: PPUSH
 817: LD_EXP 22
 821: PPUSH
 822: CALL 3838 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 826: LD_EXP 10
 830: PPUSH
 831: LD_STRING Houten
 833: PPUSH
 834: LD_EXP 22
 838: PPUSH
 839: CALL 3838 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 843: LD_EXP 11
 847: PPUSH
 848: LD_STRING Cornel
 850: PPUSH
 851: LD_EXP 22
 855: PPUSH
 856: CALL 3838 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 860: LD_EXP 12
 864: PPUSH
 865: LD_STRING Gary
 867: PPUSH
 868: LD_EXP 22
 872: PPUSH
 873: CALL 3838 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 877: LD_EXP 13
 881: PPUSH
 882: LD_STRING Frank
 884: PPUSH
 885: LD_EXP 22
 889: PPUSH
 890: CALL 3838 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 894: LD_EXP 14
 898: PPUSH
 899: LD_STRING Kikuchi
 901: PPUSH
 902: LD_EXP 22
 906: PPUSH
 907: CALL 3838 0 3
// SaveCargos ;
 911: CALL 928 0 0
// ChangeMap ( 13 , %_cont ) ;
 915: LD_INT 13
 917: PPUSH
 918: LD_STRING %_cont
 920: PPUSH
 921: CALL_OW 340
// end ;
 925: PPOPN 2
 927: END
// export function SaveCargos ; var i ; begin
 928: LD_INT 0
 930: PPUSH
 931: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 932: LD_ADDR_VAR 0 2
 936: PUSH
 937: LD_INT 1
 939: PPUSH
 940: LD_INT 22
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PUSH
 950: LD_INT 33
 952: PUSH
 953: LD_INT 1
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 34
 962: PUSH
 963: LD_INT 12
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 70
 979: PUSH
 980: FOR_IN
 981: IFFALSE 1009
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 983: LD_ADDR_EXP 20
 987: PUSH
 988: LD_EXP 20
 992: PUSH
 993: LD_VAR 0 2
 997: PPUSH
 998: CALL 4494 0 1
1002: PUSH
1003: EMPTY
1004: LIST
1005: ADD
1006: ST_TO_ADDR
1007: GO 980
1009: POP
1010: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
1011: LD_EXP 20
1015: PPUSH
1016: LD_STRING 13_ResourcesInCargo13_1
1018: PPUSH
1019: CALL_OW 39
// end ; end_of_file
1023: LD_VAR 0 1
1027: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
1028: LD_INT 0
1030: PPUSH
1031: PPUSH
1032: PPUSH
1033: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
1034: LD_ADDR_VAR 0 4
1038: PUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 2
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: PUSH
1062: LD_INT 30
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 69
1085: ST_TO_ADDR
// uc_side = 1 ;
1086: LD_ADDR_OWVAR 20
1090: PUSH
1091: LD_INT 1
1093: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
1094: LD_ADDR_EXP 1
1098: PUSH
1099: LD_STRING JMM
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: CALL 3653 0 2
1109: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
1110: LD_ADDR_EXP 3
1114: PUSH
1115: LD_STRING Lisa
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL 3653 0 2
1125: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
1126: LD_ADDR_EXP 4
1130: PUSH
1131: LD_STRING Donaldson
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: CALL 3653 0 2
1141: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Bobby
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: CALL 3653 0 2
1157: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
1158: LD_ADDR_EXP 6
1162: PUSH
1163: LD_STRING Cyrus
1165: PPUSH
1166: LD_INT 1
1168: PPUSH
1169: CALL 3653 0 2
1173: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
1174: LD_ADDR_EXP 7
1178: PUSH
1179: LD_STRING Denis
1181: PPUSH
1182: LD_INT 1
1184: PPUSH
1185: CALL 3653 0 2
1189: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
1190: LD_ADDR_EXP 8
1194: PUSH
1195: LD_STRING Brown
1197: PPUSH
1198: LD_INT 1
1200: PPUSH
1201: CALL 3653 0 2
1205: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
1206: LD_ADDR_EXP 9
1210: PUSH
1211: LD_STRING Gladstone
1213: PPUSH
1214: LD_INT 1
1216: PPUSH
1217: CALL 3653 0 2
1221: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
1222: LD_ADDR_EXP 10
1226: PUSH
1227: LD_STRING Houten
1229: PPUSH
1230: LD_INT 1
1232: PPUSH
1233: CALL 3653 0 2
1237: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
1238: LD_ADDR_EXP 11
1242: PUSH
1243: LD_STRING Cornell
1245: PPUSH
1246: LD_INT 1
1248: PPUSH
1249: CALL 3653 0 2
1253: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1254: LD_ADDR_EXP 12
1258: PUSH
1259: LD_STRING Gary
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: CALL 3653 0 2
1269: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1270: LD_ADDR_EXP 13
1274: PUSH
1275: LD_STRING Frank
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: CALL 3653 0 2
1285: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1286: LD_ADDR_EXP 14
1290: PUSH
1291: LD_STRING Kikuchi
1293: PPUSH
1294: LD_INT 1
1296: PPUSH
1297: CALL 3653 0 2
1301: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1302: LD_ADDR_EXP 15
1306: PUSH
1307: LD_STRING Stevens
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 3653 0 2
1317: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1318: LD_ADDR_EXP 2
1322: PUSH
1323: LD_STRING Powell
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL 3653 0 2
1333: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1334: LD_EXP 1
1338: PPUSH
1339: LD_VAR 0 4
1343: PUSH
1344: LD_INT 1
1346: ARRAY
1347: PPUSH
1348: CALL_OW 250
1352: PPUSH
1353: LD_VAR 0 4
1357: PUSH
1358: LD_INT 1
1360: ARRAY
1361: PPUSH
1362: CALL_OW 251
1366: PPUSH
1367: LD_INT 4
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1377: LD_EXP 15
1381: PPUSH
1382: LD_VAR 0 4
1386: PUSH
1387: LD_INT 1
1389: ARRAY
1390: PPUSH
1391: CALL_OW 250
1395: PPUSH
1396: LD_VAR 0 4
1400: PUSH
1401: LD_INT 1
1403: ARRAY
1404: PPUSH
1405: CALL_OW 251
1409: PPUSH
1410: LD_INT 4
1412: PPUSH
1413: LD_INT 0
1415: PPUSH
1416: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1420: LD_EXP 3
1424: PPUSH
1425: LD_VAR 0 4
1429: PUSH
1430: LD_INT 1
1432: ARRAY
1433: PPUSH
1434: CALL_OW 250
1438: PPUSH
1439: LD_VAR 0 4
1443: PUSH
1444: LD_INT 1
1446: ARRAY
1447: PPUSH
1448: CALL_OW 251
1452: PPUSH
1453: LD_INT 35
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1463: LD_EXP 4
1467: PPUSH
1468: LD_VAR 0 4
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PPUSH
1477: CALL_OW 250
1481: PPUSH
1482: LD_VAR 0 4
1486: PUSH
1487: LD_INT 1
1489: ARRAY
1490: PPUSH
1491: CALL_OW 251
1495: PPUSH
1496: LD_INT 35
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1506: LD_EXP 5
1510: PPUSH
1511: LD_VAR 0 4
1515: PUSH
1516: LD_INT 1
1518: ARRAY
1519: PPUSH
1520: CALL_OW 250
1524: PPUSH
1525: LD_VAR 0 4
1529: PUSH
1530: LD_INT 1
1532: ARRAY
1533: PPUSH
1534: CALL_OW 251
1538: PPUSH
1539: LD_INT 35
1541: PPUSH
1542: LD_INT 0
1544: PPUSH
1545: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1549: LD_EXP 6
1553: PPUSH
1554: LD_VAR 0 4
1558: PUSH
1559: LD_INT 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 250
1567: PPUSH
1568: LD_VAR 0 4
1572: PUSH
1573: LD_INT 1
1575: ARRAY
1576: PPUSH
1577: CALL_OW 251
1581: PPUSH
1582: LD_INT 35
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1592: LD_EXP 7
1596: PPUSH
1597: LD_VAR 0 4
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL_OW 250
1610: PPUSH
1611: LD_VAR 0 4
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 251
1624: PPUSH
1625: LD_INT 35
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1635: LD_EXP 8
1639: PPUSH
1640: LD_VAR 0 4
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PPUSH
1649: CALL_OW 250
1653: PPUSH
1654: LD_VAR 0 4
1658: PUSH
1659: LD_INT 1
1661: ARRAY
1662: PPUSH
1663: CALL_OW 251
1667: PPUSH
1668: LD_INT 35
1670: PPUSH
1671: LD_INT 0
1673: PPUSH
1674: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1678: LD_EXP 9
1682: PPUSH
1683: LD_VAR 0 4
1687: PUSH
1688: LD_INT 1
1690: ARRAY
1691: PPUSH
1692: CALL_OW 250
1696: PPUSH
1697: LD_VAR 0 4
1701: PUSH
1702: LD_INT 1
1704: ARRAY
1705: PPUSH
1706: CALL_OW 251
1710: PPUSH
1711: LD_INT 35
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1721: LD_EXP 10
1725: PPUSH
1726: LD_VAR 0 4
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: CALL_OW 250
1739: PPUSH
1740: LD_VAR 0 4
1744: PUSH
1745: LD_INT 1
1747: ARRAY
1748: PPUSH
1749: CALL_OW 251
1753: PPUSH
1754: LD_INT 35
1756: PPUSH
1757: LD_INT 0
1759: PPUSH
1760: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1764: LD_EXP 11
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: ARRAY
1777: PPUSH
1778: CALL_OW 250
1782: PPUSH
1783: LD_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: ARRAY
1791: PPUSH
1792: CALL_OW 251
1796: PPUSH
1797: LD_INT 35
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1807: LD_EXP 12
1811: PPUSH
1812: LD_VAR 0 4
1816: PUSH
1817: LD_INT 1
1819: ARRAY
1820: PPUSH
1821: CALL_OW 250
1825: PPUSH
1826: LD_VAR 0 4
1830: PUSH
1831: LD_INT 1
1833: ARRAY
1834: PPUSH
1835: CALL_OW 251
1839: PPUSH
1840: LD_INT 35
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1850: LD_EXP 13
1854: PPUSH
1855: LD_VAR 0 4
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PPUSH
1864: CALL_OW 250
1868: PPUSH
1869: LD_VAR 0 4
1873: PUSH
1874: LD_INT 1
1876: ARRAY
1877: PPUSH
1878: CALL_OW 251
1882: PPUSH
1883: LD_INT 35
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1893: LD_EXP 14
1897: PPUSH
1898: LD_VAR 0 4
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: PPUSH
1907: CALL_OW 250
1911: PPUSH
1912: LD_VAR 0 4
1916: PUSH
1917: LD_INT 1
1919: ARRAY
1920: PPUSH
1921: CALL_OW 251
1925: PPUSH
1926: LD_INT 35
1928: PPUSH
1929: LD_INT 0
1931: PPUSH
1932: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
1936: LD_VAR 0 4
1940: PUSH
1941: LD_INT 1
1943: ARRAY
1944: PPUSH
1945: LD_STRING epsilon
1947: PPUSH
1948: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
1952: LD_VAR 0 4
1956: PUSH
1957: LD_INT 1
1959: ARRAY
1960: PPUSH
1961: CALL_OW 274
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 3000
1971: PPUSH
1972: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
1976: LD_VAR 0 4
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PPUSH
1985: CALL_OW 274
1989: PPUSH
1990: LD_INT 2
1992: PPUSH
1993: LD_INT 500
1995: PPUSH
1996: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
2000: LD_VAR 0 4
2004: PUSH
2005: LD_INT 1
2007: ARRAY
2008: PPUSH
2009: CALL_OW 274
2013: PPUSH
2014: LD_INT 3
2016: PPUSH
2017: LD_INT 200
2019: PPUSH
2020: CALL_OW 277
// SetClass ( JMM , 1 ) ;
2024: LD_EXP 1
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
2036: LD_ADDR_EXP 16
2040: PUSH
2041: LD_STRING 12_other_survivors
2043: PPUSH
2044: CALL_OW 31
2048: ST_TO_ADDR
// others11 = CreateCharacterSet ( 12_others ) ;
2049: LD_ADDR_EXP 17
2053: PUSH
2054: LD_STRING 12_others
2056: PPUSH
2057: CALL_OW 31
2061: ST_TO_ADDR
// for i in others11 do
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: LD_EXP 17
2071: PUSH
2072: FOR_IN
2073: IFFALSE 2120
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 4
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 250
2093: PPUSH
2094: LD_VAR 0 4
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: CALL_OW 251
2107: PPUSH
2108: LD_INT 15
2110: PPUSH
2111: LD_INT 0
2113: PPUSH
2114: CALL_OW 50
2118: GO 2072
2120: POP
2121: POP
// for i in others12 do
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: LD_EXP 16
2131: PUSH
2132: FOR_IN
2133: IFFALSE 2180
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2135: LD_VAR 0 2
2139: PPUSH
2140: LD_VAR 0 4
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: CALL_OW 250
2153: PPUSH
2154: LD_VAR 0 4
2158: PUSH
2159: LD_INT 1
2161: ARRAY
2162: PPUSH
2163: CALL_OW 251
2167: PPUSH
2168: LD_INT 15
2170: PPUSH
2171: LD_INT 0
2173: PPUSH
2174: CALL_OW 50
2178: GO 2132
2180: POP
2181: POP
// end ;
2182: LD_VAR 0 1
2186: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2187: LD_INT 0
2189: PPUSH
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
2194: PPUSH
2195: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2196: LD_INT 113
2198: PPUSH
2199: LD_INT 50
2201: PPUSH
2202: LD_INT 1
2204: PPUSH
2205: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2209: LD_INT 104
2211: PPUSH
2212: LD_INT 24
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2222: LD_INT 43
2224: PPUSH
2225: LD_INT 79
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2235: LD_INT 43
2237: PPUSH
2238: LD_INT 68
2240: PPUSH
2241: LD_INT 1
2243: PPUSH
2244: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2248: LD_INT 99
2250: PPUSH
2251: LD_INT 114
2253: PPUSH
2254: LD_INT 1
2256: PPUSH
2257: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2261: LD_INT 103
2263: PPUSH
2264: LD_INT 114
2266: PPUSH
2267: LD_INT 1
2269: PPUSH
2270: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2274: LD_INT 152
2276: PPUSH
2277: LD_INT 85
2279: PPUSH
2280: LD_INT 1
2282: PPUSH
2283: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2287: LD_INT 156
2289: PPUSH
2290: LD_INT 92
2292: PPUSH
2293: LD_INT 1
2295: PPUSH
2296: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: LD_STRING 10_EpsilonBase
2307: PPUSH
2308: EMPTY
2309: PPUSH
2310: CALL_OW 30
2314: ST_TO_ADDR
// if not blist then
2315: LD_VAR 0 2
2319: NOT
2320: IFFALSE 2324
// exit ;
2322: GO 3295
// for i in blist do
2324: LD_ADDR_VAR 0 3
2328: PUSH
2329: LD_VAR 0 2
2333: PUSH
2334: FOR_IN
2335: IFFALSE 2375
// if i [ 1 ] = 0 or i [ 1 ] = 1 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PUSH
2346: LD_INT 0
2348: EQUAL
2349: PUSH
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 1
2357: ARRAY
2358: PUSH
2359: LD_INT 1
2361: EQUAL
2362: OR
2363: IFFALSE 2373
// baseCorrect = 1 ;
2365: LD_ADDR_VAR 0 6
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
2373: GO 2334
2375: POP
2376: POP
// if baseCorrect = 0 then
2377: LD_VAR 0 6
2381: PUSH
2382: LD_INT 0
2384: EQUAL
2385: IFFALSE 3090
// begin uc_side = 1 ;
2387: LD_ADDR_OWVAR 20
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// uc_nation = 1 ;
2395: LD_ADDR_OWVAR 21
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// bc_level = 10 ;
2403: LD_ADDR_OWVAR 43
2407: PUSH
2408: LD_INT 10
2410: ST_TO_ADDR
// bc_type = b_warehouse ;
2411: LD_ADDR_OWVAR 42
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2419: LD_INT 99
2421: PPUSH
2422: LD_INT 24
2424: PPUSH
2425: LD_INT 2
2427: PPUSH
2428: CALL_OW 47
// bc_type = b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 124
2447: PPUSH
2448: LD_INT 42
2450: PPUSH
2451: LD_INT 4
2453: PPUSH
2454: CALL_OW 47
2458: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2459: LD_VAR 0 7
2463: PPUSH
2464: LD_INT 4
2466: PUSH
2467: LD_INT 5
2469: PUSH
2470: LD_INT 6
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: LD_INT 1
2480: PPUSH
2481: LD_INT 3
2483: PPUSH
2484: CALL_OW 12
2488: ARRAY
2489: PPUSH
2490: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2494: LD_ADDR_VAR 0 7
2498: PUSH
2499: LD_INT 111
2501: PPUSH
2502: LD_INT 16
2504: PPUSH
2505: LD_INT 4
2507: PPUSH
2508: CALL_OW 47
2512: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2513: LD_VAR 0 7
2517: PPUSH
2518: LD_INT 4
2520: PUSH
2521: LD_INT 5
2523: PUSH
2524: LD_INT 6
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: PUSH
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 3
2537: PPUSH
2538: CALL_OW 12
2542: ARRAY
2543: PPUSH
2544: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2548: LD_ADDR_VAR 0 7
2552: PUSH
2553: LD_INT 113
2555: PPUSH
2556: LD_INT 21
2558: PPUSH
2559: LD_INT 4
2561: PPUSH
2562: CALL_OW 47
2566: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2567: LD_VAR 0 7
2571: PPUSH
2572: LD_INT 4
2574: PUSH
2575: LD_INT 5
2577: PUSH
2578: LD_INT 6
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 1
2588: PPUSH
2589: LD_INT 3
2591: PPUSH
2592: CALL_OW 12
2596: ARRAY
2597: PPUSH
2598: CALL_OW 431
// bc_type = 33 ;
2602: LD_ADDR_OWVAR 42
2606: PUSH
2607: LD_INT 33
2609: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2610: LD_ADDR_VAR 0 7
2614: PUSH
2615: LD_INT 95
2617: PPUSH
2618: LD_INT 41
2620: PPUSH
2621: LD_INT 1
2623: PPUSH
2624: CALL_OW 47
2628: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2629: LD_VAR 0 7
2633: PPUSH
2634: LD_INT 4
2636: PUSH
2637: LD_INT 5
2639: PUSH
2640: LD_INT 6
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 1
2650: PPUSH
2651: LD_INT 3
2653: PPUSH
2654: CALL_OW 12
2658: ARRAY
2659: PPUSH
2660: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2664: LD_ADDR_VAR 0 7
2668: PUSH
2669: LD_INT 97
2671: PPUSH
2672: LD_INT 48
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: CALL_OW 47
2682: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2683: LD_VAR 0 7
2687: PPUSH
2688: LD_INT 4
2690: PUSH
2691: LD_INT 5
2693: PUSH
2694: LD_INT 6
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 1
2704: PPUSH
2705: LD_INT 3
2707: PPUSH
2708: CALL_OW 12
2712: ARRAY
2713: PPUSH
2714: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2718: LD_ADDR_VAR 0 7
2722: PUSH
2723: LD_INT 86
2725: PPUSH
2726: LD_INT 19
2728: PPUSH
2729: LD_INT 1
2731: PPUSH
2732: CALL_OW 47
2736: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2737: LD_VAR 0 7
2741: PPUSH
2742: LD_INT 4
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: LD_INT 6
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 3
2761: PPUSH
2762: CALL_OW 12
2766: ARRAY
2767: PPUSH
2768: CALL_OW 431
// bc_type = 30 ;
2772: LD_ADDR_OWVAR 42
2776: PUSH
2777: LD_INT 30
2779: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2780: LD_INT 104
2782: PPUSH
2783: LD_INT 24
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 47
// bc_type = 29 ;
2793: LD_ADDR_OWVAR 42
2797: PUSH
2798: LD_INT 29
2800: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2801: LD_INT 113
2803: PPUSH
2804: LD_INT 50
2806: PPUSH
2807: LD_INT 3
2809: PPUSH
2810: CALL_OW 47
// bc_type = 27 ;
2814: LD_ADDR_OWVAR 42
2818: PUSH
2819: LD_INT 27
2821: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2822: LD_INT 98
2824: PPUSH
2825: LD_INT 26
2827: PPUSH
2828: LD_INT 2
2830: PPUSH
2831: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2835: LD_INT 95
2837: PPUSH
2838: LD_INT 23
2840: PPUSH
2841: LD_INT 3
2843: PPUSH
2844: CALL_OW 47
// bc_type = 28 ;
2848: LD_ADDR_OWVAR 42
2852: PUSH
2853: LD_INT 28
2855: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2856: LD_INT 107
2858: PPUSH
2859: LD_INT 32
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: CALL_OW 47
// bc_type = 3 ;
2869: LD_ADDR_OWVAR 42
2873: PUSH
2874: LD_INT 3
2876: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2877: LD_INT 106
2879: PPUSH
2880: LD_INT 42
2882: PPUSH
2883: LD_INT 0
2885: PPUSH
2886: CALL_OW 47
// bc_type = 16 ;
2890: LD_ADDR_OWVAR 42
2894: PUSH
2895: LD_INT 16
2897: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2898: LD_INT 109
2900: PPUSH
2901: LD_INT 45
2903: PPUSH
2904: LD_INT 5
2906: PPUSH
2907: CALL_OW 47
// bc_type = 17 ;
2911: LD_ADDR_OWVAR 42
2915: PUSH
2916: LD_INT 17
2918: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2919: LD_INT 106
2921: PPUSH
2922: LD_INT 46
2924: PPUSH
2925: LD_INT 0
2927: PPUSH
2928: CALL_OW 47
// bc_type = 19 ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 19
2939: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2940: LD_INT 103
2942: PPUSH
2943: LD_INT 42
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 47
// bc_type = 21 ;
2953: LD_ADDR_OWVAR 42
2957: PUSH
2958: LD_INT 21
2960: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2961: LD_INT 110
2963: PPUSH
2964: LD_INT 42
2966: PPUSH
2967: LD_INT 4
2969: PPUSH
2970: CALL_OW 47
// bc_type = 5 ;
2974: LD_ADDR_OWVAR 42
2978: PUSH
2979: LD_INT 5
2981: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2982: LD_INT 114
2984: PPUSH
2985: LD_INT 55
2987: PPUSH
2988: LD_INT 5
2990: PPUSH
2991: CALL_OW 47
// bc_type = 36 ;
2995: LD_ADDR_OWVAR 42
2999: PUSH
3000: LD_INT 36
3002: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
3003: LD_INT 96
3005: PPUSH
3006: LD_INT 28
3008: PPUSH
3009: LD_INT 2
3011: PPUSH
3012: CALL_OW 47
// bc_type = b_lab_full ;
3016: LD_ADDR_OWVAR 42
3020: PUSH
3021: LD_INT 8
3023: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3024: LD_ADDR_OWVAR 44
3028: PUSH
3029: LD_INT 15
3031: ST_TO_ADDR
// bc_kind2 = b_lab_siberium ;
3032: LD_ADDR_OWVAR 45
3036: PUSH
3037: LD_INT 11
3039: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
3040: LD_INT 116
3042: PPUSH
3043: LD_INT 38
3045: PPUSH
3046: LD_INT 4
3048: PPUSH
3049: CALL_OW 47
// bc_type = b_lab_full ;
3053: LD_ADDR_OWVAR 42
3057: PUSH
3058: LD_INT 8
3060: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
3061: LD_ADDR_OWVAR 44
3065: PUSH
3066: LD_INT 10
3068: ST_TO_ADDR
// bc_kind2 = b_lab_computer ;
3069: LD_ADDR_OWVAR 45
3073: PUSH
3074: LD_INT 12
3076: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
3077: LD_INT 112
3079: PPUSH
3080: LD_INT 29
3082: PPUSH
3083: LD_INT 4
3085: PPUSH
3086: CALL_OW 47
// end ; if baseCorrect = 1 then
3090: LD_VAR 0 6
3094: PUSH
3095: LD_INT 1
3097: EQUAL
3098: IFFALSE 3295
// begin uc_side := 1 ;
3100: LD_ADDR_OWVAR 20
3104: PUSH
3105: LD_INT 1
3107: ST_TO_ADDR
// uc_nation := 1 ;
3108: LD_ADDR_OWVAR 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// for i in blist do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 2
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3293
// begin bc_type := i [ 1 ] ;
3129: LD_ADDR_OWVAR 42
3133: PUSH
3134: LD_VAR 0 3
3138: PUSH
3139: LD_INT 1
3141: ARRAY
3142: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3143: LD_ADDR_OWVAR 43
3147: PUSH
3148: LD_VAR 0 3
3152: PUSH
3153: LD_INT 5
3155: ARRAY
3156: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3157: LD_VAR 0 3
3161: PUSH
3162: LD_INT 1
3164: ARRAY
3165: PUSH
3166: LD_INT 7
3168: PUSH
3169: LD_INT 8
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: IN
3176: IFFALSE 3206
// begin bc_kind1 := i [ 7 ] ;
3178: LD_ADDR_OWVAR 44
3182: PUSH
3183: LD_VAR 0 3
3187: PUSH
3188: LD_INT 7
3190: ARRAY
3191: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3192: LD_ADDR_OWVAR 45
3196: PUSH
3197: LD_VAR 0 3
3201: PUSH
3202: LD_INT 8
3204: ARRAY
3205: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3206: LD_ADDR_VAR 0 4
3210: PUSH
3211: LD_VAR 0 3
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PPUSH
3220: LD_VAR 0 3
3224: PUSH
3225: LD_INT 3
3227: ARRAY
3228: PPUSH
3229: LD_VAR 0 3
3233: PUSH
3234: LD_INT 4
3236: ARRAY
3237: PPUSH
3238: CALL_OW 47
3242: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3243: LD_VAR 0 4
3247: PPUSH
3248: CALL_OW 266
3252: PUSH
3253: LD_INT 32
3255: EQUAL
3256: PUSH
3257: LD_VAR 0 4
3261: PPUSH
3262: CALL_OW 266
3266: PUSH
3267: LD_INT 33
3269: EQUAL
3270: OR
3271: IFFALSE 3291
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
3273: LD_VAR 0 4
3277: PPUSH
3278: LD_VAR 0 3
3282: PUSH
3283: LD_INT 7
3285: ARRAY
3286: PPUSH
3287: CALL_OW 431
// end ; end ;
3291: GO 3126
3293: POP
3294: POP
// end ; end ;
3295: LD_VAR 0 1
3299: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3300: LD_INT 0
3302: PPUSH
3303: PPUSH
3304: PPUSH
3305: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
3306: LD_INT 22
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 21
3318: PUSH
3319: LD_INT 1
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 69
3334: PUSH
3335: LD_EXP 1
3339: PUSH
3340: LD_EXP 3
3344: PUSH
3345: LD_EXP 4
3349: PUSH
3350: LD_EXP 5
3354: PUSH
3355: LD_EXP 6
3359: PUSH
3360: LD_EXP 7
3364: PUSH
3365: LD_EXP 8
3369: PUSH
3370: LD_EXP 9
3374: PUSH
3375: LD_EXP 10
3379: PUSH
3380: LD_EXP 11
3384: PUSH
3385: LD_EXP 12
3389: PUSH
3390: LD_EXP 13
3394: PUSH
3395: LD_EXP 14
3399: PUSH
3400: LD_EXP 15
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: LD_INT 6
3423: LESS
3424: DIFF
3425: IFFALSE 3648
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3427: LD_ADDR_VAR 0 4
3431: PUSH
3432: LD_INT 22
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 30
3447: PUSH
3448: LD_INT 0
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 30
3457: PUSH
3458: LD_INT 1
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 69
3478: ST_TO_ADDR
// uc_side = 1 ;
3479: LD_ADDR_OWVAR 20
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// uc_nation = 1 ;
3487: LD_ADDR_OWVAR 21
3491: PUSH
3492: LD_INT 1
3494: ST_TO_ADDR
// for i = 1 to 6 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 6
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3646
// begin hc_gallery =  ;
3511: LD_ADDR_OWVAR 33
3515: PUSH
3516: LD_STRING 
3518: ST_TO_ADDR
// hc_name =  ;
3519: LD_ADDR_OWVAR 26
3523: PUSH
3524: LD_STRING 
3526: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3527: LD_INT 0
3529: PPUSH
3530: LD_INT 1
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: LD_INT 4
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 1
3550: PPUSH
3551: LD_INT 4
3553: PPUSH
3554: CALL_OW 12
3558: ARRAY
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: LD_INT 8
3565: PPUSH
3566: CALL_OW 12
3570: PPUSH
3571: CALL_OW 380
// un = CreateHuman ;
3575: LD_ADDR_VAR 0 3
3579: PUSH
3580: CALL_OW 44
3584: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
3585: LD_ADDR_EXP 18
3589: PUSH
3590: LD_EXP 18
3594: PUSH
3595: LD_VAR 0 3
3599: ADD
3600: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3601: LD_VAR 0 3
3605: PPUSH
3606: LD_VAR 0 4
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: CALL_OW 250
3619: PPUSH
3620: LD_VAR 0 4
3624: PUSH
3625: LD_INT 1
3627: ARRAY
3628: PPUSH
3629: CALL_OW 251
3633: PPUSH
3634: LD_INT 15
3636: PPUSH
3637: LD_INT 0
3639: PPUSH
3640: CALL_OW 50
// end ;
3644: GO 3508
3646: POP
3647: POP
// end ; end ; end_of_file
3648: LD_VAR 0 1
3652: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3653: LD_INT 0
3655: PPUSH
3656: PPUSH
// if exist_mode then
3657: LD_VAR 0 2
3661: IFFALSE 3808
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
3663: LD_EXP 21
3667: PUSH
3668: LD_VAR 0 1
3672: STR
3673: PPUSH
3674: CALL_OW 28
3678: PUSH
3679: LD_INT 1
3681: EQUAL
3682: IFFALSE 3707
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3684: LD_ADDR_VAR 0 4
3688: PUSH
3689: LD_EXP 21
3693: PUSH
3694: LD_VAR 0 1
3698: STR
3699: PPUSH
3700: CALL_OW 34
3704: ST_TO_ADDR
// end else
3705: GO 3806
// begin if TestCharacters ( 11_ & ident ) = true then
3707: LD_STRING 11_
3709: PUSH
3710: LD_VAR 0 1
3714: STR
3715: PPUSH
3716: CALL_OW 28
3720: PUSH
3721: LD_INT 1
3723: EQUAL
3724: IFFALSE 3747
// begin unit := CreateCharacter ( 11_ & ident ) ;
3726: LD_ADDR_VAR 0 4
3730: PUSH
3731: LD_STRING 11_
3733: PUSH
3734: LD_VAR 0 1
3738: STR
3739: PPUSH
3740: CALL_OW 34
3744: ST_TO_ADDR
// end else
3745: GO 3806
// begin if TestCharacters ( 10c_ & ident ) = true then
3747: LD_STRING 10c_
3749: PUSH
3750: LD_VAR 0 1
3754: STR
3755: PPUSH
3756: CALL_OW 28
3760: PUSH
3761: LD_INT 1
3763: EQUAL
3764: IFFALSE 3787
// unit := CreateCharacter ( 10c_ & ident ) else
3766: LD_ADDR_VAR 0 4
3770: PUSH
3771: LD_STRING 10c_
3773: PUSH
3774: LD_VAR 0 1
3778: STR
3779: PPUSH
3780: CALL_OW 34
3784: ST_TO_ADDR
3785: GO 3806
// unit := CreateCharacter ( 10_ & ident ) ;
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_STRING 10_
3794: PUSH
3795: LD_VAR 0 1
3799: STR
3800: PPUSH
3801: CALL_OW 34
3805: ST_TO_ADDR
// end ; end ; end else
3806: GO 3823
// begin unit := NewCharacter ( ident ) ;
3808: LD_ADDR_VAR 0 4
3812: PUSH
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 25
3822: ST_TO_ADDR
// end ; result := unit ;
3823: LD_ADDR_VAR 0 3
3827: PUSH
3828: LD_VAR 0 4
3832: ST_TO_ADDR
// end ;
3833: LD_VAR 0 3
3837: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
3838: LD_INT 0
3840: PPUSH
// if unit in selectedTab then
3841: LD_VAR 0 1
3845: PUSH
3846: LD_VAR 0 3
3850: IN
3851: IFFALSE 3873
// SaveCharacters ( unit , 13c_ & unitString ) else
3853: LD_VAR 0 1
3857: PPUSH
3858: LD_STRING 13c_
3860: PUSH
3861: LD_VAR 0 2
3865: STR
3866: PPUSH
3867: CALL_OW 38
3871: GO 3891
// SaveCharacters ( unit , 13s_ & unitString ) ;
3873: LD_VAR 0 1
3877: PPUSH
3878: LD_STRING 13s_
3880: PUSH
3881: LD_VAR 0 2
3885: STR
3886: PPUSH
3887: CALL_OW 38
// end ;
3891: LD_VAR 0 4
3895: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
3896: LD_INT 0
3898: PPUSH
3899: PPUSH
3900: PPUSH
3901: PPUSH
// selected := [ ] ;
3902: LD_ADDR_EXP 22
3906: PUSH
3907: EMPTY
3908: ST_TO_ADDR
// othersSelect := [ ] ;
3909: LD_ADDR_EXP 23
3913: PUSH
3914: EMPTY
3915: ST_TO_ADDR
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3916: LD_ADDR_VAR 0 3
3920: PUSH
3921: LD_EXP 3
3925: PUSH
3926: LD_EXP 4
3930: PUSH
3931: LD_EXP 5
3935: PUSH
3936: LD_EXP 6
3940: PUSH
3941: LD_EXP 8
3945: PUSH
3946: LD_EXP 9
3950: PUSH
3951: LD_EXP 10
3955: PUSH
3956: LD_EXP 11
3960: PUSH
3961: LD_EXP 12
3965: PUSH
3966: LD_EXP 13
3970: PUSH
3971: LD_EXP 14
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: ST_TO_ADDR
// tmp = tmp ^ others11 ;
3989: LD_ADDR_VAR 0 3
3993: PUSH
3994: LD_VAR 0 3
3998: PUSH
3999: LD_EXP 17
4003: ADD
4004: ST_TO_ADDR
// tmp = tmp ^ others12 ;
4005: LD_ADDR_VAR 0 3
4009: PUSH
4010: LD_VAR 0 3
4014: PUSH
4015: LD_EXP 16
4019: ADD
4020: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_VAR 0 3
4030: PUSH
4031: LD_EXP 18
4035: ADD
4036: ST_TO_ADDR
// for i in tmp do
4037: LD_ADDR_VAR 0 2
4041: PUSH
4042: LD_VAR 0 3
4046: PUSH
4047: FOR_IN
4048: IFFALSE 4087
// if GetClass ( i ) = 8 then
4050: LD_VAR 0 2
4054: PPUSH
4055: CALL_OW 257
4059: PUSH
4060: LD_INT 8
4062: EQUAL
4063: IFFALSE 4085
// SetClass ( i , rand ( 1 , 4 ) ) ;
4065: LD_VAR 0 2
4069: PPUSH
4070: LD_INT 1
4072: PPUSH
4073: LD_INT 4
4075: PPUSH
4076: CALL_OW 12
4080: PPUSH
4081: CALL_OW 336
4085: GO 4047
4087: POP
4088: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4089: LD_ADDR_EXP 22
4093: PUSH
4094: LD_STRING 1
4096: PPUSH
4097: LD_INT 6
4099: PPUSH
4100: LD_INT 6
4102: PPUSH
4103: LD_INT -5
4105: PUSH
4106: LD_EXP 1
4110: PUSH
4111: LD_EXP 15
4115: PUSH
4116: LD_INT -2
4118: PUSH
4119: LD_INT -3
4121: PUSH
4122: LD_INT -5
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: LD_VAR 0 3
4137: ADD
4138: PUSH
4139: LD_INT -6
4141: PUSH
4142: LD_INT -4
4144: PUSH
4145: LD_EXP 2
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: ADD
4155: PPUSH
4156: LD_INT 1
4158: PUSH
4159: LD_INT 0
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 2
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 3
4178: PUSH
4179: LD_INT 0
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 5
4198: PUSH
4199: LD_INT 0
4201: PUSH
4202: LD_INT 2
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 42
4221: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4222: LD_ADDR_EXP 23
4226: PUSH
4227: LD_EXP 22
4231: PUSH
4232: LD_EXP 3
4236: PUSH
4237: LD_EXP 4
4241: PUSH
4242: LD_EXP 5
4246: PUSH
4247: LD_EXP 6
4251: PUSH
4252: LD_EXP 7
4256: PUSH
4257: LD_EXP 8
4261: PUSH
4262: LD_EXP 9
4266: PUSH
4267: LD_EXP 10
4271: PUSH
4272: LD_EXP 11
4276: PUSH
4277: LD_EXP 12
4281: PUSH
4282: LD_EXP 13
4286: PUSH
4287: LD_EXP 14
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: DIFF
4306: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4307: LD_ADDR_VAR 0 4
4311: PUSH
4312: LD_VAR 0 3
4316: PUSH
4317: LD_EXP 22
4321: DIFF
4322: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4323: LD_ADDR_VAR 0 4
4327: PUSH
4328: LD_VAR 0 4
4332: PUSH
4333: LD_EXP 3
4337: PUSH
4338: LD_EXP 4
4342: PUSH
4343: LD_EXP 5
4347: PUSH
4348: LD_EXP 6
4352: PUSH
4353: LD_EXP 7
4357: PUSH
4358: LD_EXP 8
4362: PUSH
4363: LD_EXP 9
4367: PUSH
4368: LD_EXP 10
4372: PUSH
4373: LD_EXP 11
4377: PUSH
4378: LD_EXP 12
4382: PUSH
4383: LD_EXP 13
4387: PUSH
4388: LD_EXP 14
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: DIFF
4407: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4408: LD_VAR 0 4
4412: PPUSH
4413: LD_STRING 13s_others
4415: PPUSH
4416: CALL_OW 38
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4420: LD_INT 22
4422: PUSH
4423: LD_INT 1
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 21
4432: PUSH
4433: LD_INT 1
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 69
4448: PPUSH
4449: LD_INT 4
4451: PPUSH
4452: CALL_OW 235
// SetSide ( selected , 1 ) ;
4456: LD_EXP 22
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4468: LD_EXP 1
4472: PUSH
4473: LD_EXP 15
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PPUSH
4482: LD_INT 1
4484: PPUSH
4485: CALL_OW 235
// end ;
4489: LD_VAR 0 1
4493: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
4494: LD_INT 0
4496: PPUSH
4497: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: CALL_OW 289
4515: PUSH
4516: LD_VAR 0 1
4520: PPUSH
4521: LD_INT 2
4523: PPUSH
4524: CALL_OW 289
4528: PUSH
4529: LD_VAR 0 1
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 289
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: ST_TO_ADDR
// end ; end_of_file
4547: LD_VAR 0 2
4551: RET
// on Command ( comandid ) do var i ;
4552: LD_INT 0
4554: PPUSH
// begin if comandid = 65 then
4555: LD_VAR 0 1
4559: PUSH
4560: LD_INT 65
4562: EQUAL
4563: IFFALSE 4604
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4565: LD_ADDR_VAR 0 2
4569: PUSH
4570: LD_INT 22
4572: PUSH
4573: LD_INT 1
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: FOR_IN
4589: IFFALSE 4602
// ComStop ( i ) ;
4591: LD_VAR 0 2
4595: PPUSH
4596: CALL_OW 141
4600: GO 4588
4602: POP
4603: POP
// end ;
4604: PPOPN 2
4606: END
