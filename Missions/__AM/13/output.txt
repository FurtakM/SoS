// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 20
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 21
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 19
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 909 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 22
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2080 0 0
// PrepareHeroes ;
  82: CALL 1089 0 0
// PrepareRandoms ;
  86: CALL 3451 0 0
// Action ;
  90: CALL 5258 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 806
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 531
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 20
 347: PUSH
 348: LD_EXP 20
 352: PPUSH
 353: LD_EXP 20
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 20
 452: PUSH
 453: LD_EXP 20
 457: PPUSH
 458: LD_EXP 20
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// end ;
 529: GO 310
 531: POP
 532: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 533: LD_EXP 20
 537: PPUSH
 538: LD_STRING 13_VehiclesIn13_1
 540: PPUSH
 541: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 24
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 16
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 581: LD_STRING enableBioCharacter(BIO_HUGH)
 583: PPUSH
 584: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_STRING Lisa
 595: PPUSH
 596: LD_EXP 23
 600: PPUSH
 601: CALL 4247 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 605: LD_EXP 8
 609: PPUSH
 610: LD_STRING Brown
 612: PPUSH
 613: LD_EXP 23
 617: PPUSH
 618: CALL 4247 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 622: LD_EXP 4
 626: PPUSH
 627: LD_STRING Donaldson
 629: PPUSH
 630: LD_EXP 23
 634: PPUSH
 635: CALL 4247 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_STRING Bobby
 646: PPUSH
 647: LD_EXP 23
 651: PPUSH
 652: CALL 4247 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_STRING Cyrus
 663: PPUSH
 664: LD_EXP 23
 668: PPUSH
 669: CALL 4247 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 673: LD_EXP 7
 677: PPUSH
 678: LD_STRING Denis
 680: PPUSH
 681: LD_EXP 23
 685: PPUSH
 686: CALL 4247 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 690: LD_EXP 9
 694: PPUSH
 695: LD_STRING Gladstone
 697: PPUSH
 698: LD_EXP 23
 702: PPUSH
 703: CALL 4247 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 707: LD_EXP 10
 711: PPUSH
 712: LD_STRING Houten
 714: PPUSH
 715: LD_EXP 23
 719: PPUSH
 720: CALL 4247 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_STRING Cornel
 731: PPUSH
 732: LD_EXP 23
 736: PPUSH
 737: CALL 4247 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 741: LD_EXP 12
 745: PPUSH
 746: LD_STRING Gary
 748: PPUSH
 749: LD_EXP 23
 753: PPUSH
 754: CALL 4247 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 758: LD_EXP 13
 762: PPUSH
 763: LD_STRING Frank
 765: PPUSH
 766: LD_EXP 23
 770: PPUSH
 771: CALL 4247 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 775: LD_EXP 14
 779: PPUSH
 780: LD_STRING Kikuchi
 782: PPUSH
 783: LD_EXP 23
 787: PPUSH
 788: CALL 4247 0 3
// SaveCargos ;
 792: CALL 809 0 0
// ChangeMap ( 13 , %_cont ) ;
 796: LD_INT 13
 798: PPUSH
 799: LD_STRING %_cont
 801: PPUSH
 802: CALL_OW 340
// end ;
 806: PPOPN 2
 808: END
// export function SaveCargos ; var i ; begin
 809: LD_INT 0
 811: PPUSH
 812: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: LD_INT 2
 820: PPUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 33
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 34
 843: PUSH
 844: LD_INT 12
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL_OW 70
 860: PUSH
 861: FOR_IN
 862: IFFALSE 890
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 864: LD_ADDR_EXP 21
 868: PUSH
 869: LD_EXP 21
 873: PUSH
 874: LD_VAR 0 2
 878: PPUSH
 879: CALL 67692 0 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: ADD
 887: ST_TO_ADDR
 888: GO 861
 890: POP
 891: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 892: LD_EXP 21
 896: PPUSH
 897: LD_STRING 13_ResourcesInCargo13_1
 899: PPUSH
 900: CALL_OW 39
// end ;
 904: LD_VAR 0 1
 908: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_STRING 10_EpsilonEnv
 924: PPUSH
 925: EMPTY
 926: PPUSH
 927: CALL_OW 30
 931: ST_TO_ADDR
// if not tmp then
 932: LD_VAR 0 2
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1084
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 941: LD_ADDR_VAR 0 3
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 353
 953: ST_TO_ADDR
// if not list then
 954: LD_VAR 0 3
 958: NOT
 959: IFFALSE 963
// exit ;
 961: GO 1084
// for i in list do
 963: LD_ADDR_VAR 0 4
 967: PUSH
 968: LD_VAR 0 3
 972: PUSH
 973: FOR_IN
 974: IFFALSE 1082
// begin exist := false ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: LD_INT 0
 983: ST_TO_ADDR
// for j in tmp do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: LD_VAR 0 2
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1049
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 997: LD_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PUSH
1006: LD_VAR 0 5
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: EQUAL
1015: PUSH
1016: LD_VAR 0 4
1020: PUSH
1021: LD_INT 2
1023: ARRAY
1024: PUSH
1025: LD_VAR 0 5
1029: PUSH
1030: LD_INT 2
1032: ARRAY
1033: EQUAL
1034: AND
1035: IFFALSE 1047
// begin exist := true ;
1037: LD_ADDR_VAR 0 6
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// break ;
1045: GO 1049
// end ;
1047: GO 994
1049: POP
1050: POP
// if not exist then
1051: LD_VAR 0 6
1055: NOT
1056: IFFALSE 1080
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 4
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 347
// end ;
1080: GO 973
1082: POP
1083: POP
// end ; end_of_file
1084: LD_VAR 0 1
1088: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: LD_INT 22
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 23
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 30
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// if tmp then
1161: LD_VAR 0 4
1165: IFFALSE 1287
// begin x := GetX ( tmp [ 1 ] ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1186: LD_ADDR_VAR 0 6
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 251
1204: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1205: LD_VAR 0 4
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_STRING epsilon
1216: PPUSH
1217: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1221: LD_ADDR_VAR 0 7
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 274
1239: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1240: LD_VAR 0 7
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 3000
1250: PPUSH
1251: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1255: LD_VAR 0 7
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 500
1265: PPUSH
1266: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1270: LD_VAR 0 7
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 200
1280: PPUSH
1281: CALL_OW 277
// end else
1285: GO 1303
// begin x := 104 ;
1287: LD_ADDR_VAR 0 5
1291: PUSH
1292: LD_INT 104
1294: ST_TO_ADDR
// y := 32 ;
1295: LD_ADDR_VAR 0 6
1299: PUSH
1300: LD_INT 32
1302: ST_TO_ADDR
// end ; uc_side := 1 ;
1303: LD_ADDR_OWVAR 20
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1311: LD_ADDR_EXP 1
1315: PUSH
1316: LD_STRING JMM
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 3721 0 2
1326: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1327: LD_ADDR_EXP 3
1331: PUSH
1332: LD_STRING Lisa
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 3721 0 2
1342: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1343: LD_ADDR_EXP 4
1347: PUSH
1348: LD_STRING Donaldson
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 3721 0 2
1358: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1359: LD_ADDR_EXP 5
1363: PUSH
1364: LD_STRING Bobby
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 3721 0 2
1374: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1375: LD_ADDR_EXP 6
1379: PUSH
1380: LD_STRING Cyrus
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL 3721 0 2
1390: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1391: LD_ADDR_EXP 7
1395: PUSH
1396: LD_STRING Denis
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: CALL 3721 0 2
1406: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1407: LD_ADDR_EXP 8
1411: PUSH
1412: LD_STRING Brown
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 3721 0 2
1422: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: LD_STRING Gladstone
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL 3721 0 2
1438: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_STRING Houten
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL 3721 0 2
1454: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1455: LD_ADDR_EXP 11
1459: PUSH
1460: LD_STRING Cornell
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL 3721 0 2
1470: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_STRING Gary
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL 3721 0 2
1486: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1487: LD_ADDR_EXP 13
1491: PUSH
1492: LD_STRING Frank
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL 3721 0 2
1502: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1503: LD_ADDR_EXP 14
1507: PUSH
1508: LD_STRING Kikuchi
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL 3721 0 2
1518: ST_TO_ADDR
// DeltaDoctor := PrepareUnit2 ( DeltaDoctor , true ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_STRING DeltaDoctor
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: CALL 3721 0 2
1534: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1535: LD_ADDR_EXP 16
1539: PUSH
1540: LD_STRING Stevens
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL 3721 0 2
1550: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1551: LD_ADDR_EXP 2
1555: PUSH
1556: LD_STRING Powell
1558: PPUSH
1559: LD_INT 0
1561: PPUSH
1562: CALL 3721 0 2
1566: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1567: LD_EXP 1
1571: PPUSH
1572: LD_VAR 0 5
1576: PPUSH
1577: LD_VAR 0 6
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL 3894 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1592: LD_EXP 16
1596: PPUSH
1597: LD_VAR 0 5
1601: PPUSH
1602: LD_VAR 0 6
1606: PPUSH
1607: LD_INT 4
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL 3894 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1617: LD_EXP 3
1621: PPUSH
1622: LD_VAR 0 5
1626: PPUSH
1627: LD_VAR 0 6
1631: PPUSH
1632: LD_INT 35
1634: PPUSH
1635: LD_INT 0
1637: PPUSH
1638: CALL 3894 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1642: LD_EXP 4
1646: PPUSH
1647: LD_VAR 0 5
1651: PPUSH
1652: LD_VAR 0 6
1656: PPUSH
1657: LD_INT 35
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL 3894 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1667: LD_EXP 5
1671: PPUSH
1672: LD_VAR 0 5
1676: PPUSH
1677: LD_VAR 0 6
1681: PPUSH
1682: LD_INT 35
1684: PPUSH
1685: LD_INT 0
1687: PPUSH
1688: CALL 3894 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1692: LD_EXP 6
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: LD_VAR 0 6
1706: PPUSH
1707: LD_INT 35
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL 3894 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1717: LD_EXP 7
1721: PPUSH
1722: LD_VAR 0 5
1726: PPUSH
1727: LD_VAR 0 6
1731: PPUSH
1732: LD_INT 35
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL 3894 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1742: LD_EXP 8
1746: PPUSH
1747: LD_VAR 0 5
1751: PPUSH
1752: LD_VAR 0 6
1756: PPUSH
1757: LD_INT 35
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL 3894 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1767: LD_EXP 9
1771: PPUSH
1772: LD_VAR 0 5
1776: PPUSH
1777: LD_VAR 0 6
1781: PPUSH
1782: LD_INT 35
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL 3894 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1792: LD_EXP 10
1796: PPUSH
1797: LD_VAR 0 5
1801: PPUSH
1802: LD_VAR 0 6
1806: PPUSH
1807: LD_INT 35
1809: PPUSH
1810: LD_INT 0
1812: PPUSH
1813: CALL 3894 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1817: LD_EXP 11
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: LD_VAR 0 6
1831: PPUSH
1832: LD_INT 35
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL 3894 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1842: LD_EXP 12
1846: PPUSH
1847: LD_VAR 0 5
1851: PPUSH
1852: LD_VAR 0 6
1856: PPUSH
1857: LD_INT 35
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL 3894 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1867: LD_EXP 13
1871: PPUSH
1872: LD_VAR 0 5
1876: PPUSH
1877: LD_VAR 0 6
1881: PPUSH
1882: LD_INT 35
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 3894 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1892: LD_EXP 14
1896: PPUSH
1897: LD_VAR 0 5
1901: PPUSH
1902: LD_VAR 0 6
1906: PPUSH
1907: LD_INT 35
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL 3894 0 5
// SetClass ( JMM , 1 ) ;
1917: LD_EXP 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1929: LD_ADDR_EXP 17
1933: PUSH
1934: LD_STRING 12_other_survivors
1936: PPUSH
1937: CALL_OW 31
1941: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1942: LD_ADDR_EXP 18
1946: PUSH
1947: LD_STRING 12_others
1949: PPUSH
1950: CALL_OW 31
1954: ST_TO_ADDR
// for i in others11 do
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: LD_EXP 18
1964: PUSH
1965: FOR_IN
1966: IFFALSE 2013
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_VAR 0 4
1977: PUSH
1978: LD_INT 1
1980: ARRAY
1981: PPUSH
1982: CALL_OW 250
1986: PPUSH
1987: LD_VAR 0 4
1991: PUSH
1992: LD_INT 1
1994: ARRAY
1995: PPUSH
1996: CALL_OW 251
2000: PPUSH
2001: LD_INT 15
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL 3894 0 5
2011: GO 1965
2013: POP
2014: POP
// for i in others12 do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 17
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2073
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2028: LD_VAR 0 2
2032: PPUSH
2033: LD_VAR 0 4
2037: PUSH
2038: LD_INT 1
2040: ARRAY
2041: PPUSH
2042: CALL_OW 250
2046: PPUSH
2047: LD_VAR 0 4
2051: PUSH
2052: LD_INT 1
2054: ARRAY
2055: PPUSH
2056: CALL_OW 251
2060: PPUSH
2061: LD_INT 15
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL 3894 0 5
2071: GO 2025
2073: POP
2074: POP
// end ;
2075: LD_VAR 0 1
2079: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2080: LD_INT 0
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2089: LD_INT 113
2091: PPUSH
2092: LD_INT 50
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2102: LD_INT 99
2104: PPUSH
2105: LD_INT 19
2107: PPUSH
2108: LD_INT 1
2110: PPUSH
2111: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2115: LD_INT 43
2117: PPUSH
2118: LD_INT 79
2120: PPUSH
2121: LD_INT 1
2123: PPUSH
2124: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2128: LD_INT 43
2130: PPUSH
2131: LD_INT 68
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2141: LD_INT 99
2143: PPUSH
2144: LD_INT 114
2146: PPUSH
2147: LD_INT 1
2149: PPUSH
2150: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2154: LD_INT 103
2156: PPUSH
2157: LD_INT 114
2159: PPUSH
2160: LD_INT 1
2162: PPUSH
2163: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2167: LD_INT 152
2169: PPUSH
2170: LD_INT 85
2172: PPUSH
2173: LD_INT 1
2175: PPUSH
2176: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2180: LD_INT 156
2182: PPUSH
2183: LD_INT 92
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: LD_STRING 10_EpsilonBase
2200: PPUSH
2201: EMPTY
2202: PPUSH
2203: CALL_OW 30
2207: ST_TO_ADDR
// if not blist then
2208: LD_VAR 0 2
2212: NOT
2213: IFFALSE 2225
// begin baseCorrect := 0 ;
2215: LD_ADDR_VAR 0 6
2219: PUSH
2220: LD_INT 0
2222: ST_TO_ADDR
// end else
2223: GO 2280
// begin for i in blist do
2225: LD_ADDR_VAR 0 3
2229: PUSH
2230: LD_VAR 0 2
2234: PUSH
2235: FOR_IN
2236: IFFALSE 2278
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2238: LD_VAR 0 3
2242: PUSH
2243: LD_INT 1
2245: ARRAY
2246: PUSH
2247: LD_INT 0
2249: EQUAL
2250: PUSH
2251: LD_VAR 0 3
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PUSH
2260: LD_INT 1
2262: EQUAL
2263: OR
2264: IFFALSE 2276
// begin baseCorrect := 1 ;
2266: LD_ADDR_VAR 0 6
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// break ;
2274: GO 2278
// end ;
2276: GO 2235
2278: POP
2279: POP
// end ; if baseCorrect = 0 then
2280: LD_VAR 0 6
2284: PUSH
2285: LD_INT 0
2287: EQUAL
2288: IFFALSE 2995
// begin uc_side := 1 ;
2290: LD_ADDR_OWVAR 20
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// uc_nation := 1 ;
2298: LD_ADDR_OWVAR 21
2302: PUSH
2303: LD_INT 1
2305: ST_TO_ADDR
// bc_level := 10 ;
2306: LD_ADDR_OWVAR 43
2310: PUSH
2311: LD_INT 10
2313: ST_TO_ADDR
// bc_type := b_warehouse ;
2314: LD_ADDR_OWVAR 42
2318: PUSH
2319: LD_INT 1
2321: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2322: LD_INT 99
2324: PPUSH
2325: LD_INT 24
2327: PPUSH
2328: LD_INT 2
2330: PPUSH
2331: CALL_OW 47
// bc_type := b_bunker ;
2335: LD_ADDR_OWVAR 42
2339: PUSH
2340: LD_INT 32
2342: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2343: LD_ADDR_VAR 0 7
2347: PUSH
2348: LD_INT 124
2350: PPUSH
2351: LD_INT 42
2353: PPUSH
2354: LD_INT 4
2356: PPUSH
2357: CALL_OW 47
2361: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2362: LD_VAR 0 7
2366: PPUSH
2367: LD_INT 4
2369: PUSH
2370: LD_INT 5
2372: PUSH
2373: LD_INT 6
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 1
2383: PPUSH
2384: LD_INT 3
2386: PPUSH
2387: CALL_OW 12
2391: ARRAY
2392: PPUSH
2393: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2397: LD_ADDR_VAR 0 7
2401: PUSH
2402: LD_INT 111
2404: PPUSH
2405: LD_INT 16
2407: PPUSH
2408: LD_INT 4
2410: PPUSH
2411: CALL_OW 47
2415: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2416: LD_VAR 0 7
2420: PPUSH
2421: LD_INT 4
2423: PUSH
2424: LD_INT 5
2426: PUSH
2427: LD_INT 6
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 1
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 12
2445: ARRAY
2446: PPUSH
2447: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2451: LD_ADDR_VAR 0 7
2455: PUSH
2456: LD_INT 113
2458: PPUSH
2459: LD_INT 21
2461: PPUSH
2462: LD_INT 4
2464: PPUSH
2465: CALL_OW 47
2469: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2470: LD_VAR 0 7
2474: PPUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 5
2480: PUSH
2481: LD_INT 6
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 3
2494: PPUSH
2495: CALL_OW 12
2499: ARRAY
2500: PPUSH
2501: CALL_OW 431
// bc_type := 33 ;
2505: LD_ADDR_OWVAR 42
2509: PUSH
2510: LD_INT 33
2512: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2513: LD_ADDR_VAR 0 7
2517: PUSH
2518: LD_INT 95
2520: PPUSH
2521: LD_INT 41
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 47
2531: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2532: LD_VAR 0 7
2536: PPUSH
2537: LD_INT 4
2539: PUSH
2540: LD_INT 5
2542: PUSH
2543: LD_INT 6
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 1
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL_OW 12
2561: ARRAY
2562: PPUSH
2563: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 97
2574: PPUSH
2575: LD_INT 48
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: CALL_OW 47
2585: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2586: LD_VAR 0 7
2590: PPUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 5
2596: PUSH
2597: LD_INT 6
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 1
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: CALL_OW 12
2615: ARRAY
2616: PPUSH
2617: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2621: LD_ADDR_VAR 0 7
2625: PUSH
2626: LD_INT 86
2628: PPUSH
2629: LD_INT 19
2631: PPUSH
2632: LD_INT 1
2634: PPUSH
2635: CALL_OW 47
2639: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2640: LD_VAR 0 7
2644: PPUSH
2645: LD_INT 4
2647: PUSH
2648: LD_INT 5
2650: PUSH
2651: LD_INT 6
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 3
2664: PPUSH
2665: CALL_OW 12
2669: ARRAY
2670: PPUSH
2671: CALL_OW 431
// bc_type := 30 ;
2675: LD_ADDR_OWVAR 42
2679: PUSH
2680: LD_INT 30
2682: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2683: LD_INT 104
2685: PPUSH
2686: LD_INT 24
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: CALL_OW 47
// bc_type := 29 ;
2696: LD_ADDR_OWVAR 42
2700: PUSH
2701: LD_INT 29
2703: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2704: LD_INT 113
2706: PPUSH
2707: LD_INT 50
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 47
// bc_type := 27 ;
2717: LD_ADDR_OWVAR 42
2721: PUSH
2722: LD_INT 27
2724: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2725: LD_INT 98
2727: PPUSH
2728: LD_INT 26
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2738: LD_INT 95
2740: PPUSH
2741: LD_INT 23
2743: PPUSH
2744: LD_INT 3
2746: PPUSH
2747: CALL_OW 47
// bc_type := 28 ;
2751: LD_ADDR_OWVAR 42
2755: PUSH
2756: LD_INT 28
2758: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2759: LD_INT 107
2761: PPUSH
2762: LD_INT 32
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 47
// bc_type := 3 ;
2772: LD_ADDR_OWVAR 42
2776: PUSH
2777: LD_INT 3
2779: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2780: LD_INT 106
2782: PPUSH
2783: LD_INT 42
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL_OW 47
// bc_type := 16 ;
2793: LD_ADDR_OWVAR 42
2797: PUSH
2798: LD_INT 16
2800: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2801: LD_INT 109
2803: PPUSH
2804: LD_INT 45
2806: PPUSH
2807: LD_INT 5
2809: PPUSH
2810: CALL_OW 47
// bc_type := 17 ;
2814: LD_ADDR_OWVAR 42
2818: PUSH
2819: LD_INT 17
2821: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2822: LD_INT 106
2824: PPUSH
2825: LD_INT 46
2827: PPUSH
2828: LD_INT 0
2830: PPUSH
2831: CALL_OW 47
// bc_type := 19 ;
2835: LD_ADDR_OWVAR 42
2839: PUSH
2840: LD_INT 19
2842: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2843: LD_INT 103
2845: PPUSH
2846: LD_INT 42
2848: PPUSH
2849: LD_INT 1
2851: PPUSH
2852: CALL_OW 47
// bc_type := 21 ;
2856: LD_ADDR_OWVAR 42
2860: PUSH
2861: LD_INT 21
2863: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2864: LD_INT 110
2866: PPUSH
2867: LD_INT 42
2869: PPUSH
2870: LD_INT 4
2872: PPUSH
2873: CALL_OW 47
// bc_type := 5 ;
2877: LD_ADDR_OWVAR 42
2881: PUSH
2882: LD_INT 5
2884: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2885: LD_INT 114
2887: PPUSH
2888: LD_INT 55
2890: PPUSH
2891: LD_INT 5
2893: PPUSH
2894: CALL_OW 47
// bc_type := 36 ;
2898: LD_ADDR_OWVAR 42
2902: PUSH
2903: LD_INT 36
2905: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2906: LD_INT 96
2908: PPUSH
2909: LD_INT 28
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 47
// bc_type := b_lab_full ;
2919: LD_ADDR_OWVAR 42
2923: PUSH
2924: LD_INT 8
2926: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2927: LD_ADDR_OWVAR 44
2931: PUSH
2932: LD_INT 15
2934: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2935: LD_ADDR_OWVAR 45
2939: PUSH
2940: LD_INT 11
2942: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2943: LD_INT 116
2945: PPUSH
2946: LD_INT 38
2948: PPUSH
2949: LD_INT 4
2951: PPUSH
2952: CALL_OW 47
// bc_type := b_lab_full ;
2956: LD_ADDR_OWVAR 42
2960: PUSH
2961: LD_INT 8
2963: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2964: LD_ADDR_OWVAR 44
2968: PUSH
2969: LD_INT 10
2971: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2972: LD_ADDR_OWVAR 45
2976: PUSH
2977: LD_INT 12
2979: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2980: LD_INT 112
2982: PPUSH
2983: LD_INT 29
2985: PPUSH
2986: LD_INT 4
2988: PPUSH
2989: CALL_OW 47
// end else
2993: GO 3243
// begin uc_side := 1 ;
2995: LD_ADDR_OWVAR 20
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// for i in blist do
3003: LD_ADDR_VAR 0 3
3007: PUSH
3008: LD_VAR 0 2
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3241
// begin InitBc ;
3016: CALL_OW 21
// uc_nation := i [ 6 ] ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 3
3029: PUSH
3030: LD_INT 6
3032: ARRAY
3033: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3034: LD_ADDR_OWVAR 42
3038: PUSH
3039: LD_VAR 0 3
3043: PUSH
3044: LD_INT 1
3046: ARRAY
3047: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3048: LD_ADDR_OWVAR 43
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 5
3060: ARRAY
3061: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3062: LD_VAR 0 3
3066: PUSH
3067: LD_INT 1
3069: ARRAY
3070: PUSH
3071: LD_INT 7
3073: PUSH
3074: LD_INT 8
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: IN
3081: IFFALSE 3111
// begin bc_kind1 := i [ 7 ] ;
3083: LD_ADDR_OWVAR 44
3087: PUSH
3088: LD_VAR 0 3
3092: PUSH
3093: LD_INT 7
3095: ARRAY
3096: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3097: LD_ADDR_OWVAR 45
3101: PUSH
3102: LD_VAR 0 3
3106: PUSH
3107: LD_INT 8
3109: ARRAY
3110: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3111: LD_ADDR_VAR 0 4
3115: PUSH
3116: LD_VAR 0 3
3120: PUSH
3121: LD_INT 2
3123: ARRAY
3124: PPUSH
3125: LD_VAR 0 3
3129: PUSH
3130: LD_INT 3
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 3
3138: PUSH
3139: LD_INT 4
3141: ARRAY
3142: PPUSH
3143: CALL_OW 47
3147: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3148: LD_VAR 0 4
3152: PPUSH
3153: CALL_OW 266
3157: PUSH
3158: LD_INT 32
3160: PUSH
3161: LD_INT 33
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: IN
3168: IFFALSE 3239
// if i [ 7 ] then
3170: LD_VAR 0 3
3174: PUSH
3175: LD_INT 7
3177: ARRAY
3178: IFFALSE 3200
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3180: LD_VAR 0 4
3184: PPUSH
3185: LD_VAR 0 3
3189: PUSH
3190: LD_INT 7
3192: ARRAY
3193: PPUSH
3194: CALL_OW 431
3198: GO 3239
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3200: LD_VAR 0 4
3204: PPUSH
3205: LD_INT 11
3207: PUSH
3208: LD_INT 7
3210: PUSH
3211: LD_INT 4
3213: PUSH
3214: LD_INT 5
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 1
3225: PPUSH
3226: LD_INT 4
3228: PPUSH
3229: CALL_OW 12
3233: ARRAY
3234: PPUSH
3235: CALL_OW 431
// end ;
3239: GO 3013
3241: POP
3242: POP
// end ; uc_side := 1 ;
3243: LD_ADDR_OWVAR 20
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// uc_nation := 1 ;
3251: LD_ADDR_OWVAR 21
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// for i := 1 to 8 do
3259: LD_ADDR_VAR 0 3
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_INT 8
3271: PUSH
3272: FOR_TO
3273: IFFALSE 3444
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3275: LD_ADDR_OWVAR 37
3279: PUSH
3280: LD_INT 5
3282: PUSH
3283: LD_INT 5
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 1
3300: PPUSH
3301: LD_INT 4
3303: PPUSH
3304: CALL_OW 12
3308: ARRAY
3309: ST_TO_ADDR
// vc_engine := engine_siberite ;
3310: LD_ADDR_OWVAR 39
3314: PUSH
3315: LD_INT 3
3317: ST_TO_ADDR
// vc_control := control_manual ;
3318: LD_ADDR_OWVAR 38
3322: PUSH
3323: LD_INT 1
3325: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3326: LD_OWVAR 37
3330: PUSH
3331: LD_INT 4
3333: EQUAL
3334: IFFALSE 3346
// vc_weapon := us_heavy_gun else
3336: LD_ADDR_OWVAR 40
3340: PUSH
3341: LD_INT 6
3343: ST_TO_ADDR
3344: GO 3391
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3346: LD_ADDR_OWVAR 40
3350: PUSH
3351: LD_INT 7
3353: PUSH
3354: LD_INT 9
3356: PUSH
3357: LD_INT 12
3359: PUSH
3360: LD_INT 13
3362: PUSH
3363: LD_INT 9
3365: PUSH
3366: LD_INT 9
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: PUSH
3377: LD_VAR 0 3
3381: PUSH
3382: LD_INT 6
3384: MOD
3385: PUSH
3386: LD_INT 1
3388: PLUS
3389: ARRAY
3390: ST_TO_ADDR
// un := CreateVehicle ;
3391: LD_ADDR_VAR 0 5
3395: PUSH
3396: CALL_OW 45
3400: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3401: LD_VAR 0 5
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: LD_INT 5
3411: PPUSH
3412: CALL_OW 12
3416: PPUSH
3417: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3421: LD_VAR 0 5
3425: PPUSH
3426: LD_INT 78
3428: PPUSH
3429: LD_INT 31
3431: PPUSH
3432: LD_INT 8
3434: PPUSH
3435: LD_INT 0
3437: PPUSH
3438: CALL_OW 50
// end ;
3442: GO 3272
3444: POP
3445: POP
// end ;
3446: LD_VAR 0 1
3450: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3451: LD_INT 0
3453: PPUSH
3454: PPUSH
3455: PPUSH
3456: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3457: LD_INT 22
3459: PUSH
3460: LD_INT 1
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 21
3469: PUSH
3470: LD_INT 1
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PPUSH
3481: CALL_OW 69
3485: PUSH
3486: LD_INT 6
3488: LESS
3489: IFFALSE 3716
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3491: LD_ADDR_VAR 0 4
3495: PUSH
3496: LD_INT 22
3498: PUSH
3499: LD_INT 1
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: LD_INT 30
3511: PUSH
3512: LD_INT 0
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PUSH
3519: LD_INT 30
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PPUSH
3538: CALL_OW 69
3542: ST_TO_ADDR
// uc_side := 1 ;
3543: LD_ADDR_OWVAR 20
3547: PUSH
3548: LD_INT 1
3550: ST_TO_ADDR
// uc_nation := 1 ;
3551: LD_ADDR_OWVAR 21
3555: PUSH
3556: LD_INT 1
3558: ST_TO_ADDR
// for i := 1 to 6 do
3559: LD_ADDR_VAR 0 2
3563: PUSH
3564: DOUBLE
3565: LD_INT 1
3567: DEC
3568: ST_TO_ADDR
3569: LD_INT 6
3571: PUSH
3572: FOR_TO
3573: IFFALSE 3714
// begin hc_gallery :=  ;
3575: LD_ADDR_OWVAR 33
3579: PUSH
3580: LD_STRING 
3582: ST_TO_ADDR
// hc_name :=  ;
3583: LD_ADDR_OWVAR 26
3587: PUSH
3588: LD_STRING 
3590: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3591: LD_INT 0
3593: PPUSH
3594: LD_INT 1
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 3
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 1
3614: PPUSH
3615: LD_INT 4
3617: PPUSH
3618: CALL_OW 12
3622: ARRAY
3623: PPUSH
3624: LD_INT 5
3626: PPUSH
3627: LD_INT 8
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 380
// un := CreateHuman ;
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: CALL_OW 44
3648: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3649: LD_ADDR_EXP 19
3653: PUSH
3654: LD_EXP 19
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL 64123 0 2
3668: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3669: LD_VAR 0 3
3673: PPUSH
3674: LD_VAR 0 4
3678: PUSH
3679: LD_INT 1
3681: ARRAY
3682: PPUSH
3683: CALL_OW 250
3687: PPUSH
3688: LD_VAR 0 4
3692: PUSH
3693: LD_INT 1
3695: ARRAY
3696: PPUSH
3697: CALL_OW 251
3701: PPUSH
3702: LD_INT 15
3704: PPUSH
3705: LD_INT 0
3707: PPUSH
3708: CALL 3894 0 5
// end ;
3712: GO 3572
3714: POP
3715: POP
// end ; end ; end_of_file
3716: LD_VAR 0 1
3720: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3721: LD_INT 0
3723: PPUSH
3724: PPUSH
// if existMode then
3725: LD_VAR 0 2
3729: IFFALSE 3864
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3731: LD_EXP 22
3735: PUSH
3736: LD_VAR 0 1
3740: STR
3741: PPUSH
3742: CALL_OW 28
3746: IFFALSE 3771
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3748: LD_ADDR_VAR 0 4
3752: PUSH
3753: LD_EXP 22
3757: PUSH
3758: LD_VAR 0 1
3762: STR
3763: PPUSH
3764: CALL_OW 34
3768: ST_TO_ADDR
3769: GO 3862
// begin if TestCharacters ( 11_ & ident ) then
3771: LD_STRING 11_
3773: PUSH
3774: LD_VAR 0 1
3778: STR
3779: PPUSH
3780: CALL_OW 28
3784: IFFALSE 3807
// unit := CreateCharacter ( 11_ & ident ) else
3786: LD_ADDR_VAR 0 4
3790: PUSH
3791: LD_STRING 11_
3793: PUSH
3794: LD_VAR 0 1
3798: STR
3799: PPUSH
3800: CALL_OW 34
3804: ST_TO_ADDR
3805: GO 3862
// if TestCharacters ( 10c_ & ident ) then
3807: LD_STRING 10c_
3809: PUSH
3810: LD_VAR 0 1
3814: STR
3815: PPUSH
3816: CALL_OW 28
3820: IFFALSE 3843
// unit := CreateCharacter ( 10c_ & ident ) else
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: LD_STRING 10c_
3829: PUSH
3830: LD_VAR 0 1
3834: STR
3835: PPUSH
3836: CALL_OW 34
3840: ST_TO_ADDR
3841: GO 3862
// unit := CreateCharacter ( 10_ & ident ) ;
3843: LD_ADDR_VAR 0 4
3847: PUSH
3848: LD_STRING 10_
3850: PUSH
3851: LD_VAR 0 1
3855: STR
3856: PPUSH
3857: CALL_OW 34
3861: ST_TO_ADDR
// end ; end else
3862: GO 3879
// unit := NewCharacter ( ident ) ;
3864: LD_ADDR_VAR 0 4
3868: PUSH
3869: LD_VAR 0 1
3873: PPUSH
3874: CALL_OW 25
3878: ST_TO_ADDR
// result := unit ;
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: LD_VAR 0 4
3888: ST_TO_ADDR
// end ;
3889: LD_VAR 0 3
3893: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3894: LD_INT 0
3896: PPUSH
3897: PPUSH
3898: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3899: LD_ADDR_VAR 0 8
3903: PUSH
3904: LD_INT 22
3906: PUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: CALL_OW 255
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PUSH
3921: LD_INT 21
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 3
3933: PUSH
3934: LD_INT 30
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 69
3957: ST_TO_ADDR
// if not tmp then
3958: LD_VAR 0 8
3962: NOT
3963: IFFALSE 3996
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_VAR 0 2
3974: PPUSH
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_VAR 0 4
3984: PPUSH
3985: LD_VAR 0 5
3989: PPUSH
3990: CALL_OW 50
// exit ;
3994: GO 4242
// end ; for i in tmp do
3996: LD_ADDR_VAR 0 7
4000: PUSH
4001: LD_VAR 0 8
4005: PUSH
4006: FOR_IN
4007: IFFALSE 4211
// if IsNotFull ( i ) then
4009: LD_VAR 0 7
4013: PPUSH
4014: CALL 28616 0 1
4018: IFFALSE 4209
// begin PlaceHumanInUnit ( unit , i ) ;
4020: LD_VAR 0 1
4024: PPUSH
4025: LD_VAR 0 7
4029: PPUSH
4030: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4034: LD_VAR 0 7
4038: PPUSH
4039: CALL_OW 266
4043: PUSH
4044: LD_INT 5
4046: PUSH
4047: LD_INT 4
4049: PUSH
4050: LD_INT 31
4052: PUSH
4053: LD_INT 32
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: IN
4062: IFFALSE 4095
// begin SetClass ( unit , class_soldier ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_VAR 0 7
4085: PPUSH
4086: CALL 59370 0 1
4090: PPUSH
4091: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4095: LD_VAR 0 7
4099: PPUSH
4100: CALL_OW 266
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 36
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: IN
4119: IFFALSE 4133
// SetClass ( unit , class_mechanic ) ;
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 3
4128: PPUSH
4129: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4133: LD_VAR 0 7
4137: PPUSH
4138: CALL_OW 266
4142: PUSH
4143: LD_INT 0
4145: PUSH
4146: LD_INT 1
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: IN
4153: IFFALSE 4167
// SetClass ( unit , class_engineer ) ;
4155: LD_VAR 0 1
4159: PPUSH
4160: LD_INT 2
4162: PPUSH
4163: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4167: LD_VAR 0 7
4171: PPUSH
4172: CALL_OW 266
4176: PUSH
4177: LD_INT 6
4179: PUSH
4180: LD_INT 7
4182: PUSH
4183: LD_INT 8
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: IN
4191: IFFALSE 4205
// SetClass ( unit , class_scientistic ) ;
4193: LD_VAR 0 1
4197: PPUSH
4198: LD_INT 4
4200: PPUSH
4201: CALL_OW 336
// exit ;
4205: POP
4206: POP
4207: GO 4242
// end ;
4209: GO 4006
4211: POP
4212: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4213: LD_VAR 0 1
4217: PPUSH
4218: LD_VAR 0 2
4222: PPUSH
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_VAR 0 4
4232: PPUSH
4233: LD_VAR 0 5
4237: PPUSH
4238: CALL_OW 50
// end ;
4242: LD_VAR 0 6
4246: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4247: LD_INT 0
4249: PPUSH
// if unit in selectedTab then
4250: LD_VAR 0 1
4254: PUSH
4255: LD_VAR 0 3
4259: IN
4260: IFFALSE 4282
// SaveCharacters ( unit , 13c_ & unitString ) else
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_STRING 13c_
4269: PUSH
4270: LD_VAR 0 2
4274: STR
4275: PPUSH
4276: CALL_OW 38
4280: GO 4300
// SaveCharacters ( unit , 13s_ & unitString ) ;
4282: LD_VAR 0 1
4286: PPUSH
4287: LD_STRING 13s_
4289: PUSH
4290: LD_VAR 0 2
4294: STR
4295: PPUSH
4296: CALL_OW 38
// end ;
4300: LD_VAR 0 4
4304: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4305: LD_INT 0
4307: PPUSH
4308: PPUSH
4309: PPUSH
4310: PPUSH
// selected := [ ] ;
4311: LD_ADDR_EXP 23
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// othersSelect := [ ] ;
4318: LD_ADDR_EXP 24
4322: PUSH
4323: EMPTY
4324: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: LD_EXP 3
4334: PUSH
4335: LD_EXP 4
4339: PUSH
4340: LD_EXP 5
4344: PUSH
4345: LD_EXP 6
4349: PUSH
4350: LD_EXP 8
4354: PUSH
4355: LD_EXP 9
4359: PUSH
4360: LD_EXP 10
4364: PUSH
4365: LD_EXP 11
4369: PUSH
4370: LD_EXP 12
4374: PUSH
4375: LD_EXP 13
4379: PUSH
4380: LD_EXP 14
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4398: LD_ADDR_VAR 0 3
4402: PUSH
4403: LD_VAR 0 3
4407: PUSH
4408: LD_EXP 18
4412: ADD
4413: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4414: LD_ADDR_VAR 0 3
4418: PUSH
4419: LD_VAR 0 3
4423: PUSH
4424: LD_EXP 17
4428: ADD
4429: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_EXP 19
4444: ADD
4445: ST_TO_ADDR
// for i in tmp do
4446: LD_ADDR_VAR 0 2
4450: PUSH
4451: LD_VAR 0 3
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4496
// if GetClass ( i ) = 8 then
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 257
4468: PUSH
4469: LD_INT 8
4471: EQUAL
4472: IFFALSE 4494
// SetClass ( i , rand ( 1 , 4 ) ) ;
4474: LD_VAR 0 2
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: LD_INT 4
4484: PPUSH
4485: CALL_OW 12
4489: PPUSH
4490: CALL_OW 336
4494: GO 4456
4496: POP
4497: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4498: LD_ADDR_EXP 23
4502: PUSH
4503: LD_STRING 1
4505: PPUSH
4506: LD_INT 6
4508: PPUSH
4509: LD_INT 6
4511: PPUSH
4512: LD_INT -5
4514: PUSH
4515: LD_EXP 1
4519: PUSH
4520: LD_EXP 16
4524: PUSH
4525: LD_INT -2
4527: PUSH
4528: LD_INT -3
4530: PUSH
4531: LD_INT -5
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: PUSH
4542: LD_VAR 0 3
4546: ADD
4547: PUSH
4548: LD_INT -6
4550: PUSH
4551: LD_INT -4
4553: PUSH
4554: LD_EXP 2
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: ADD
4564: PPUSH
4565: LD_INT 1
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 2
4577: PUSH
4578: LD_INT 1
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 3
4587: PUSH
4588: LD_INT 0
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 4
4597: PUSH
4598: LD_INT 2
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 5
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: LD_INT 2
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 42
4630: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4631: LD_ADDR_EXP 24
4635: PUSH
4636: LD_EXP 23
4640: PUSH
4641: LD_EXP 3
4645: PUSH
4646: LD_EXP 4
4650: PUSH
4651: LD_EXP 5
4655: PUSH
4656: LD_EXP 6
4660: PUSH
4661: LD_EXP 7
4665: PUSH
4666: LD_EXP 8
4670: PUSH
4671: LD_EXP 9
4675: PUSH
4676: LD_EXP 10
4680: PUSH
4681: LD_EXP 11
4685: PUSH
4686: LD_EXP 12
4690: PUSH
4691: LD_EXP 13
4695: PUSH
4696: LD_EXP 14
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: DIFF
4715: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4716: LD_ADDR_VAR 0 4
4720: PUSH
4721: LD_VAR 0 3
4725: PUSH
4726: LD_EXP 23
4730: DIFF
4731: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4732: LD_ADDR_VAR 0 4
4736: PUSH
4737: LD_VAR 0 4
4741: PUSH
4742: LD_EXP 3
4746: PUSH
4747: LD_EXP 4
4751: PUSH
4752: LD_EXP 5
4756: PUSH
4757: LD_EXP 6
4761: PUSH
4762: LD_EXP 7
4766: PUSH
4767: LD_EXP 8
4771: PUSH
4772: LD_EXP 9
4776: PUSH
4777: LD_EXP 10
4781: PUSH
4782: LD_EXP 11
4786: PUSH
4787: LD_EXP 12
4791: PUSH
4792: LD_EXP 13
4796: PUSH
4797: LD_EXP 14
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: DIFF
4816: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4817: LD_VAR 0 4
4821: PPUSH
4822: LD_STRING 13s_others
4824: PPUSH
4825: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4829: LD_EXP 24
4833: PPUSH
4834: LD_STRING 13c_others
4836: PPUSH
4837: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4841: LD_EXP 1
4845: PPUSH
4846: LD_STRING 13c_JMM
4848: PPUSH
4849: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4853: LD_EXP 16
4857: PPUSH
4858: LD_STRING 13c_Stevens
4860: PPUSH
4861: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4865: LD_EXP 3
4869: PPUSH
4870: LD_STRING Lisa
4872: PPUSH
4873: LD_EXP 23
4877: PPUSH
4878: CALL 4247 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4882: LD_EXP 8
4886: PPUSH
4887: LD_STRING Brown
4889: PPUSH
4890: LD_EXP 23
4894: PPUSH
4895: CALL 4247 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4899: LD_EXP 4
4903: PPUSH
4904: LD_STRING Donaldson
4906: PPUSH
4907: LD_EXP 23
4911: PPUSH
4912: CALL 4247 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4916: LD_EXP 5
4920: PPUSH
4921: LD_STRING Bobby
4923: PPUSH
4924: LD_EXP 23
4928: PPUSH
4929: CALL 4247 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4933: LD_EXP 6
4937: PPUSH
4938: LD_STRING Cyrus
4940: PPUSH
4941: LD_EXP 23
4945: PPUSH
4946: CALL 4247 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4950: LD_EXP 7
4954: PPUSH
4955: LD_STRING Denis
4957: PPUSH
4958: LD_EXP 23
4962: PPUSH
4963: CALL 4247 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4967: LD_EXP 9
4971: PPUSH
4972: LD_STRING Gladstone
4974: PPUSH
4975: LD_EXP 23
4979: PPUSH
4980: CALL 4247 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4984: LD_EXP 10
4988: PPUSH
4989: LD_STRING Houten
4991: PPUSH
4992: LD_EXP 23
4996: PPUSH
4997: CALL 4247 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
5001: LD_EXP 11
5005: PPUSH
5006: LD_STRING Cornel
5008: PPUSH
5009: LD_EXP 23
5013: PPUSH
5014: CALL 4247 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
5018: LD_EXP 12
5022: PPUSH
5023: LD_STRING Gary
5025: PPUSH
5026: LD_EXP 23
5030: PPUSH
5031: CALL 4247 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5035: LD_EXP 13
5039: PPUSH
5040: LD_STRING Frank
5042: PPUSH
5043: LD_EXP 23
5047: PPUSH
5048: CALL 4247 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5052: LD_EXP 14
5056: PPUSH
5057: LD_STRING Kikuchi
5059: PPUSH
5060: LD_EXP 23
5064: PPUSH
5065: CALL 4247 0 3
// SaveCharactersAfterSelect ( DeltaDoctor , DeltaDoctor , selected ) ;
5069: LD_EXP 15
5073: PPUSH
5074: LD_STRING DeltaDoctor
5076: PPUSH
5077: LD_EXP 23
5081: PPUSH
5082: CALL 4247 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5086: LD_INT 22
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 1
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PPUSH
5115: LD_INT 4
5117: PPUSH
5118: CALL_OW 235
// SetSide ( selected , 1 ) ;
5122: LD_EXP 23
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5134: LD_EXP 1
5138: PUSH
5139: LD_EXP 16
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5155: LD_ADDR_VAR 0 2
5159: PUSH
5160: LD_INT 22
5162: PUSH
5163: LD_INT 1
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 21
5172: PUSH
5173: LD_INT 1
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PPUSH
5184: CALL_OW 69
5188: PUSH
5189: FOR_IN
5190: IFFALSE 5203
// ComExit ( i ) ;
5192: LD_VAR 0 2
5196: PPUSH
5197: CALL 64521 0 1
5201: GO 5189
5203: POP
5204: POP
// end ; end_of_file
5205: LD_VAR 0 1
5209: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5210: LD_VAR 0 1
5214: PPUSH
5215: CALL 21304 0 1
// if un = JMM then
5219: LD_VAR 0 1
5223: PUSH
5224: LD_EXP 1
5228: EQUAL
5229: IFFALSE 5238
// YouLost ( JMM ) ;
5231: LD_STRING JMM
5233: PPUSH
5234: CALL_OW 104
// end ;
5238: PPOPN 1
5240: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5241: LD_VAR 0 1
5245: PPUSH
5246: LD_VAR 0 2
5250: PPUSH
5251: CALL 21424 0 2
// end ; end_of_file
5255: PPOPN 2
5257: END
// export function Action ; begin
5258: LD_INT 0
5260: PPUSH
// InGameOn ;
5261: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5265: LD_INT 22
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: LD_INT 30
5280: PUSH
5281: LD_INT 0
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 30
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PPUSH
5307: CALL_OW 69
5311: PPUSH
5312: CALL_OW 87
// wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5323: LD_EXP 1
5327: PPUSH
5328: LD_STRING D1-JMM-1
5330: PPUSH
5331: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5335: LD_EXP 2
5339: PPUSH
5340: LD_STRING D1-Pow-1
5342: PPUSH
5343: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5347: LD_EXP 2
5351: PPUSH
5352: LD_STRING D1-Pow-1a
5354: PPUSH
5355: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5359: LD_EXP 2
5363: PPUSH
5364: LD_STRING D1-Pow-1b
5366: PPUSH
5367: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5371: LD_EXP 2
5375: PPUSH
5376: LD_STRING D1-Pow-1c
5378: PPUSH
5379: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5383: LD_EXP 1
5387: PPUSH
5388: LD_STRING D1-JMM-2
5390: PPUSH
5391: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5395: LD_EXP 2
5399: PPUSH
5400: LD_STRING D1-Pow-2
5402: PPUSH
5403: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5407: LD_EXP 1
5411: PPUSH
5412: LD_STRING D1-JMM-3
5414: PPUSH
5415: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5419: LD_EXP 2
5423: PPUSH
5424: LD_STRING D1-Pow-3
5426: PPUSH
5427: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5431: LD_EXP 1
5435: PPUSH
5436: LD_STRING D1-JMM-4
5438: PPUSH
5439: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5443: LD_EXP 2
5447: PPUSH
5448: LD_STRING D1-Pow-4
5450: PPUSH
5451: CALL_OW 94
// SelectAndSaveCharacters ;
5455: CALL 4305 0 0
// InGameOff ;
5459: CALL_OW 9
// Query ( Q1 ) ;
5463: LD_STRING Q1
5465: PPUSH
5466: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5470: LD_INT 2
5472: PPUSH
5473: LD_INT 1
5475: PPUSH
5476: CALL_OW 424
// end ; end_of_file
5480: LD_VAR 0 1
5484: RET
// export globalGameSaveCounter ; every 0 0$1 do
5485: GO 5487
5487: DISABLE
// begin enable ;
5488: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5489: LD_STRING updateTimer(
5491: PUSH
5492: LD_OWVAR 1
5496: STR
5497: PUSH
5498: LD_STRING );
5500: STR
5501: PPUSH
5502: CALL_OW 559
// end ;
5506: END
// every 0 0$1 do
5507: GO 5509
5509: DISABLE
// begin globalGameSaveCounter := 0 ;
5510: LD_ADDR_EXP 25
5514: PUSH
5515: LD_INT 0
5517: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5518: LD_STRING setGameSaveCounter(0)
5520: PPUSH
5521: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5525: LD_STRING initStreamRollete();
5527: PPUSH
5528: CALL_OW 559
// InitStreamMode ;
5532: CALL 6875 0 0
// DefineStreamItems ( false ) ;
5536: LD_INT 0
5538: PPUSH
5539: CALL 7339 0 1
// end ;
5543: END
// export function SOS_MapStart ( ) ; begin
5544: LD_INT 0
5546: PPUSH
// if streamModeActive then
5547: LD_EXP 26
5551: IFFALSE 5560
// DefineStreamItems ( true ) ;
5553: LD_INT 1
5555: PPUSH
5556: CALL 7339 0 1
// UpdateLuaVariables ( ) ;
5560: CALL 5577 0 0
// UpdateFactoryWaypoints ( ) ;
5564: CALL 20208 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5568: CALL 20465 0 0
// end ;
5572: LD_VAR 0 1
5576: RET
// function UpdateLuaVariables ( ) ; begin
5577: LD_INT 0
5579: PPUSH
// if globalGameSaveCounter then
5580: LD_EXP 25
5584: IFFALSE 5618
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5586: LD_ADDR_EXP 25
5590: PUSH
5591: LD_EXP 25
5595: PPUSH
5596: CALL 65484 0 1
5600: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5601: LD_STRING setGameSaveCounter(
5603: PUSH
5604: LD_EXP 25
5608: STR
5609: PUSH
5610: LD_STRING )
5612: STR
5613: PPUSH
5614: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5618: LD_STRING setGameDifficulty(
5620: PUSH
5621: LD_OWVAR 67
5625: STR
5626: PUSH
5627: LD_STRING )
5629: STR
5630: PPUSH
5631: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5635: LD_STRING displayDifficulty(
5637: PUSH
5638: LD_OWVAR 67
5642: STR
5643: PUSH
5644: LD_STRING )
5646: STR
5647: PPUSH
5648: CALL_OW 559
// end ;
5652: LD_VAR 0 1
5656: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5657: LD_INT 0
5659: PPUSH
// if p2 = stream_mode then
5660: LD_VAR 0 2
5664: PUSH
5665: LD_INT 100
5667: EQUAL
5668: IFFALSE 6671
// begin if not StreamModeActive then
5670: LD_EXP 26
5674: NOT
5675: IFFALSE 5685
// StreamModeActive := true ;
5677: LD_ADDR_EXP 26
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// if p3 = 0 then
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 0
5692: EQUAL
5693: IFFALSE 5699
// InitStreamMode ;
5695: CALL 6875 0 0
// if p3 = 1 then
5699: LD_VAR 0 3
5703: PUSH
5704: LD_INT 1
5706: EQUAL
5707: IFFALSE 5717
// sRocket := true ;
5709: LD_ADDR_EXP 31
5713: PUSH
5714: LD_INT 1
5716: ST_TO_ADDR
// if p3 = 2 then
5717: LD_VAR 0 3
5721: PUSH
5722: LD_INT 2
5724: EQUAL
5725: IFFALSE 5735
// sSpeed := true ;
5727: LD_ADDR_EXP 30
5731: PUSH
5732: LD_INT 1
5734: ST_TO_ADDR
// if p3 = 3 then
5735: LD_VAR 0 3
5739: PUSH
5740: LD_INT 3
5742: EQUAL
5743: IFFALSE 5753
// sEngine := true ;
5745: LD_ADDR_EXP 32
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// if p3 = 4 then
5753: LD_VAR 0 3
5757: PUSH
5758: LD_INT 4
5760: EQUAL
5761: IFFALSE 5771
// sSpec := true ;
5763: LD_ADDR_EXP 29
5767: PUSH
5768: LD_INT 1
5770: ST_TO_ADDR
// if p3 = 5 then
5771: LD_VAR 0 3
5775: PUSH
5776: LD_INT 5
5778: EQUAL
5779: IFFALSE 5789
// sLevel := true ;
5781: LD_ADDR_EXP 33
5785: PUSH
5786: LD_INT 1
5788: ST_TO_ADDR
// if p3 = 6 then
5789: LD_VAR 0 3
5793: PUSH
5794: LD_INT 6
5796: EQUAL
5797: IFFALSE 5807
// sArmoury := true ;
5799: LD_ADDR_EXP 34
5803: PUSH
5804: LD_INT 1
5806: ST_TO_ADDR
// if p3 = 7 then
5807: LD_VAR 0 3
5811: PUSH
5812: LD_INT 7
5814: EQUAL
5815: IFFALSE 5825
// sRadar := true ;
5817: LD_ADDR_EXP 35
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// if p3 = 8 then
5825: LD_VAR 0 3
5829: PUSH
5830: LD_INT 8
5832: EQUAL
5833: IFFALSE 5843
// sBunker := true ;
5835: LD_ADDR_EXP 36
5839: PUSH
5840: LD_INT 1
5842: ST_TO_ADDR
// if p3 = 9 then
5843: LD_VAR 0 3
5847: PUSH
5848: LD_INT 9
5850: EQUAL
5851: IFFALSE 5861
// sHack := true ;
5853: LD_ADDR_EXP 37
5857: PUSH
5858: LD_INT 1
5860: ST_TO_ADDR
// if p3 = 10 then
5861: LD_VAR 0 3
5865: PUSH
5866: LD_INT 10
5868: EQUAL
5869: IFFALSE 5879
// sFire := true ;
5871: LD_ADDR_EXP 38
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// if p3 = 11 then
5879: LD_VAR 0 3
5883: PUSH
5884: LD_INT 11
5886: EQUAL
5887: IFFALSE 5897
// sRefresh := true ;
5889: LD_ADDR_EXP 39
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// if p3 = 12 then
5897: LD_VAR 0 3
5901: PUSH
5902: LD_INT 12
5904: EQUAL
5905: IFFALSE 5915
// sExp := true ;
5907: LD_ADDR_EXP 40
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// if p3 = 13 then
5915: LD_VAR 0 3
5919: PUSH
5920: LD_INT 13
5922: EQUAL
5923: IFFALSE 5933
// sDepot := true ;
5925: LD_ADDR_EXP 41
5929: PUSH
5930: LD_INT 1
5932: ST_TO_ADDR
// if p3 = 14 then
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 14
5940: EQUAL
5941: IFFALSE 5951
// sFlag := true ;
5943: LD_ADDR_EXP 42
5947: PUSH
5948: LD_INT 1
5950: ST_TO_ADDR
// if p3 = 15 then
5951: LD_VAR 0 3
5955: PUSH
5956: LD_INT 15
5958: EQUAL
5959: IFFALSE 5969
// sKamikadze := true ;
5961: LD_ADDR_EXP 50
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// if p3 = 16 then
5969: LD_VAR 0 3
5973: PUSH
5974: LD_INT 16
5976: EQUAL
5977: IFFALSE 5987
// sTroll := true ;
5979: LD_ADDR_EXP 51
5983: PUSH
5984: LD_INT 1
5986: ST_TO_ADDR
// if p3 = 17 then
5987: LD_VAR 0 3
5991: PUSH
5992: LD_INT 17
5994: EQUAL
5995: IFFALSE 6005
// sSlow := true ;
5997: LD_ADDR_EXP 52
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// if p3 = 18 then
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 18
6012: EQUAL
6013: IFFALSE 6023
// sLack := true ;
6015: LD_ADDR_EXP 53
6019: PUSH
6020: LD_INT 1
6022: ST_TO_ADDR
// if p3 = 19 then
6023: LD_VAR 0 3
6027: PUSH
6028: LD_INT 19
6030: EQUAL
6031: IFFALSE 6041
// sTank := true ;
6033: LD_ADDR_EXP 55
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// if p3 = 20 then
6041: LD_VAR 0 3
6045: PUSH
6046: LD_INT 20
6048: EQUAL
6049: IFFALSE 6059
// sRemote := true ;
6051: LD_ADDR_EXP 56
6055: PUSH
6056: LD_INT 1
6058: ST_TO_ADDR
// if p3 = 21 then
6059: LD_VAR 0 3
6063: PUSH
6064: LD_INT 21
6066: EQUAL
6067: IFFALSE 6077
// sPowell := true ;
6069: LD_ADDR_EXP 57
6073: PUSH
6074: LD_INT 1
6076: ST_TO_ADDR
// if p3 = 22 then
6077: LD_VAR 0 3
6081: PUSH
6082: LD_INT 22
6084: EQUAL
6085: IFFALSE 6095
// sTeleport := true ;
6087: LD_ADDR_EXP 60
6091: PUSH
6092: LD_INT 1
6094: ST_TO_ADDR
// if p3 = 23 then
6095: LD_VAR 0 3
6099: PUSH
6100: LD_INT 23
6102: EQUAL
6103: IFFALSE 6113
// sOilTower := true ;
6105: LD_ADDR_EXP 62
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// if p3 = 24 then
6113: LD_VAR 0 3
6117: PUSH
6118: LD_INT 24
6120: EQUAL
6121: IFFALSE 6131
// sShovel := true ;
6123: LD_ADDR_EXP 63
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// if p3 = 25 then
6131: LD_VAR 0 3
6135: PUSH
6136: LD_INT 25
6138: EQUAL
6139: IFFALSE 6149
// sSheik := true ;
6141: LD_ADDR_EXP 64
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// if p3 = 26 then
6149: LD_VAR 0 3
6153: PUSH
6154: LD_INT 26
6156: EQUAL
6157: IFFALSE 6167
// sEarthquake := true ;
6159: LD_ADDR_EXP 66
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// if p3 = 27 then
6167: LD_VAR 0 3
6171: PUSH
6172: LD_INT 27
6174: EQUAL
6175: IFFALSE 6185
// sAI := true ;
6177: LD_ADDR_EXP 67
6181: PUSH
6182: LD_INT 1
6184: ST_TO_ADDR
// if p3 = 28 then
6185: LD_VAR 0 3
6189: PUSH
6190: LD_INT 28
6192: EQUAL
6193: IFFALSE 6203
// sCargo := true ;
6195: LD_ADDR_EXP 70
6199: PUSH
6200: LD_INT 1
6202: ST_TO_ADDR
// if p3 = 29 then
6203: LD_VAR 0 3
6207: PUSH
6208: LD_INT 29
6210: EQUAL
6211: IFFALSE 6221
// sDLaser := true ;
6213: LD_ADDR_EXP 71
6217: PUSH
6218: LD_INT 1
6220: ST_TO_ADDR
// if p3 = 30 then
6221: LD_VAR 0 3
6225: PUSH
6226: LD_INT 30
6228: EQUAL
6229: IFFALSE 6239
// sExchange := true ;
6231: LD_ADDR_EXP 72
6235: PUSH
6236: LD_INT 1
6238: ST_TO_ADDR
// if p3 = 31 then
6239: LD_VAR 0 3
6243: PUSH
6244: LD_INT 31
6246: EQUAL
6247: IFFALSE 6257
// sFac := true ;
6249: LD_ADDR_EXP 73
6253: PUSH
6254: LD_INT 1
6256: ST_TO_ADDR
// if p3 = 32 then
6257: LD_VAR 0 3
6261: PUSH
6262: LD_INT 32
6264: EQUAL
6265: IFFALSE 6275
// sPower := true ;
6267: LD_ADDR_EXP 74
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// if p3 = 33 then
6275: LD_VAR 0 3
6279: PUSH
6280: LD_INT 33
6282: EQUAL
6283: IFFALSE 6293
// sRandom := true ;
6285: LD_ADDR_EXP 75
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// if p3 = 34 then
6293: LD_VAR 0 3
6297: PUSH
6298: LD_INT 34
6300: EQUAL
6301: IFFALSE 6311
// sShield := true ;
6303: LD_ADDR_EXP 76
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// if p3 = 35 then
6311: LD_VAR 0 3
6315: PUSH
6316: LD_INT 35
6318: EQUAL
6319: IFFALSE 6329
// sTime := true ;
6321: LD_ADDR_EXP 77
6325: PUSH
6326: LD_INT 1
6328: ST_TO_ADDR
// if p3 = 36 then
6329: LD_VAR 0 3
6333: PUSH
6334: LD_INT 36
6336: EQUAL
6337: IFFALSE 6347
// sTools := true ;
6339: LD_ADDR_EXP 78
6343: PUSH
6344: LD_INT 1
6346: ST_TO_ADDR
// if p3 = 101 then
6347: LD_VAR 0 3
6351: PUSH
6352: LD_INT 101
6354: EQUAL
6355: IFFALSE 6365
// sSold := true ;
6357: LD_ADDR_EXP 43
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// if p3 = 102 then
6365: LD_VAR 0 3
6369: PUSH
6370: LD_INT 102
6372: EQUAL
6373: IFFALSE 6383
// sDiff := true ;
6375: LD_ADDR_EXP 44
6379: PUSH
6380: LD_INT 1
6382: ST_TO_ADDR
// if p3 = 103 then
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 103
6390: EQUAL
6391: IFFALSE 6401
// sFog := true ;
6393: LD_ADDR_EXP 47
6397: PUSH
6398: LD_INT 1
6400: ST_TO_ADDR
// if p3 = 104 then
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 104
6408: EQUAL
6409: IFFALSE 6419
// sReset := true ;
6411: LD_ADDR_EXP 48
6415: PUSH
6416: LD_INT 1
6418: ST_TO_ADDR
// if p3 = 105 then
6419: LD_VAR 0 3
6423: PUSH
6424: LD_INT 105
6426: EQUAL
6427: IFFALSE 6437
// sSun := true ;
6429: LD_ADDR_EXP 49
6433: PUSH
6434: LD_INT 1
6436: ST_TO_ADDR
// if p3 = 106 then
6437: LD_VAR 0 3
6441: PUSH
6442: LD_INT 106
6444: EQUAL
6445: IFFALSE 6455
// sTiger := true ;
6447: LD_ADDR_EXP 45
6451: PUSH
6452: LD_INT 1
6454: ST_TO_ADDR
// if p3 = 107 then
6455: LD_VAR 0 3
6459: PUSH
6460: LD_INT 107
6462: EQUAL
6463: IFFALSE 6473
// sBomb := true ;
6465: LD_ADDR_EXP 46
6469: PUSH
6470: LD_INT 1
6472: ST_TO_ADDR
// if p3 = 108 then
6473: LD_VAR 0 3
6477: PUSH
6478: LD_INT 108
6480: EQUAL
6481: IFFALSE 6491
// sWound := true ;
6483: LD_ADDR_EXP 54
6487: PUSH
6488: LD_INT 1
6490: ST_TO_ADDR
// if p3 = 109 then
6491: LD_VAR 0 3
6495: PUSH
6496: LD_INT 109
6498: EQUAL
6499: IFFALSE 6509
// sBetray := true ;
6501: LD_ADDR_EXP 58
6505: PUSH
6506: LD_INT 1
6508: ST_TO_ADDR
// if p3 = 110 then
6509: LD_VAR 0 3
6513: PUSH
6514: LD_INT 110
6516: EQUAL
6517: IFFALSE 6527
// sContamin := true ;
6519: LD_ADDR_EXP 59
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// if p3 = 111 then
6527: LD_VAR 0 3
6531: PUSH
6532: LD_INT 111
6534: EQUAL
6535: IFFALSE 6545
// sOil := true ;
6537: LD_ADDR_EXP 61
6541: PUSH
6542: LD_INT 1
6544: ST_TO_ADDR
// if p3 = 112 then
6545: LD_VAR 0 3
6549: PUSH
6550: LD_INT 112
6552: EQUAL
6553: IFFALSE 6563
// sStu := true ;
6555: LD_ADDR_EXP 65
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// if p3 = 113 then
6563: LD_VAR 0 3
6567: PUSH
6568: LD_INT 113
6570: EQUAL
6571: IFFALSE 6581
// sBazooka := true ;
6573: LD_ADDR_EXP 68
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// if p3 = 114 then
6581: LD_VAR 0 3
6585: PUSH
6586: LD_INT 114
6588: EQUAL
6589: IFFALSE 6599
// sMortar := true ;
6591: LD_ADDR_EXP 69
6595: PUSH
6596: LD_INT 1
6598: ST_TO_ADDR
// if p3 = 115 then
6599: LD_VAR 0 3
6603: PUSH
6604: LD_INT 115
6606: EQUAL
6607: IFFALSE 6617
// sRanger := true ;
6609: LD_ADDR_EXP 79
6613: PUSH
6614: LD_INT 1
6616: ST_TO_ADDR
// if p3 = 116 then
6617: LD_VAR 0 3
6621: PUSH
6622: LD_INT 116
6624: EQUAL
6625: IFFALSE 6635
// sComputer := true ;
6627: LD_ADDR_EXP 80
6631: PUSH
6632: LD_INT 1
6634: ST_TO_ADDR
// if p3 = 117 then
6635: LD_VAR 0 3
6639: PUSH
6640: LD_INT 117
6642: EQUAL
6643: IFFALSE 6653
// s30 := true ;
6645: LD_ADDR_EXP 81
6649: PUSH
6650: LD_INT 1
6652: ST_TO_ADDR
// if p3 = 118 then
6653: LD_VAR 0 3
6657: PUSH
6658: LD_INT 118
6660: EQUAL
6661: IFFALSE 6671
// s60 := true ;
6663: LD_ADDR_EXP 82
6667: PUSH
6668: LD_INT 1
6670: ST_TO_ADDR
// end ; if p2 = hack_mode then
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 101
6678: EQUAL
6679: IFFALSE 6807
// begin case p3 of 1 :
6681: LD_VAR 0 3
6685: PUSH
6686: LD_INT 1
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6701
6694: POP
// hHackUnlimitedResources ; 2 :
6695: CALL 18954 0 0
6699: GO 6807
6701: LD_INT 2
6703: DOUBLE
6704: EQUAL
6705: IFTRUE 6709
6707: GO 6716
6709: POP
// hHackSetLevel10 ; 3 :
6710: CALL 19087 0 0
6714: GO 6807
6716: LD_INT 3
6718: DOUBLE
6719: EQUAL
6720: IFTRUE 6724
6722: GO 6731
6724: POP
// hHackSetLevel10YourUnits ; 4 :
6725: CALL 19172 0 0
6729: GO 6807
6731: LD_INT 4
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6746
6739: POP
// hHackInvincible ; 5 :
6740: CALL 19620 0 0
6744: GO 6807
6746: LD_INT 5
6748: DOUBLE
6749: EQUAL
6750: IFTRUE 6754
6752: GO 6761
6754: POP
// hHackInvisible ; 6 :
6755: CALL 19731 0 0
6759: GO 6807
6761: LD_INT 6
6763: DOUBLE
6764: EQUAL
6765: IFTRUE 6769
6767: GO 6776
6769: POP
// hHackChangeYourSide ; 7 :
6770: CALL 19788 0 0
6774: GO 6807
6776: LD_INT 7
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6791
6784: POP
// hHackChangeUnitSide ; 8 :
6785: CALL 19830 0 0
6789: GO 6807
6791: LD_INT 8
6793: DOUBLE
6794: EQUAL
6795: IFTRUE 6799
6797: GO 6806
6799: POP
// hHackFog ; end ;
6800: CALL 19931 0 0
6804: GO 6807
6806: POP
// end ; if p2 = game_save_mode then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 102
6814: EQUAL
6815: IFFALSE 6870
// begin if p3 = 1 then
6817: LD_VAR 0 3
6821: PUSH
6822: LD_INT 1
6824: EQUAL
6825: IFFALSE 6837
// globalGameSaveCounter := p4 ;
6827: LD_ADDR_EXP 25
6831: PUSH
6832: LD_VAR 0 4
6836: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6837: LD_VAR 0 3
6841: PUSH
6842: LD_INT 2
6844: EQUAL
6845: PUSH
6846: LD_EXP 25
6850: AND
6851: IFFALSE 6870
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6853: LD_STRING setGameSaveCounter(
6855: PUSH
6856: LD_EXP 25
6860: STR
6861: PUSH
6862: LD_STRING )
6864: STR
6865: PPUSH
6866: CALL_OW 559
// end ; end ;
6870: LD_VAR 0 7
6874: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6875: LD_INT 0
6877: PPUSH
// streamModeActive := false ;
6878: LD_ADDR_EXP 26
6882: PUSH
6883: LD_INT 0
6885: ST_TO_ADDR
// normalCounter := 36 ;
6886: LD_ADDR_EXP 27
6890: PUSH
6891: LD_INT 36
6893: ST_TO_ADDR
// hardcoreCounter := 18 ;
6894: LD_ADDR_EXP 28
6898: PUSH
6899: LD_INT 18
6901: ST_TO_ADDR
// sRocket := false ;
6902: LD_ADDR_EXP 31
6906: PUSH
6907: LD_INT 0
6909: ST_TO_ADDR
// sSpeed := false ;
6910: LD_ADDR_EXP 30
6914: PUSH
6915: LD_INT 0
6917: ST_TO_ADDR
// sEngine := false ;
6918: LD_ADDR_EXP 32
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// sSpec := false ;
6926: LD_ADDR_EXP 29
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// sLevel := false ;
6934: LD_ADDR_EXP 33
6938: PUSH
6939: LD_INT 0
6941: ST_TO_ADDR
// sArmoury := false ;
6942: LD_ADDR_EXP 34
6946: PUSH
6947: LD_INT 0
6949: ST_TO_ADDR
// sRadar := false ;
6950: LD_ADDR_EXP 35
6954: PUSH
6955: LD_INT 0
6957: ST_TO_ADDR
// sBunker := false ;
6958: LD_ADDR_EXP 36
6962: PUSH
6963: LD_INT 0
6965: ST_TO_ADDR
// sHack := false ;
6966: LD_ADDR_EXP 37
6970: PUSH
6971: LD_INT 0
6973: ST_TO_ADDR
// sFire := false ;
6974: LD_ADDR_EXP 38
6978: PUSH
6979: LD_INT 0
6981: ST_TO_ADDR
// sRefresh := false ;
6982: LD_ADDR_EXP 39
6986: PUSH
6987: LD_INT 0
6989: ST_TO_ADDR
// sExp := false ;
6990: LD_ADDR_EXP 40
6994: PUSH
6995: LD_INT 0
6997: ST_TO_ADDR
// sDepot := false ;
6998: LD_ADDR_EXP 41
7002: PUSH
7003: LD_INT 0
7005: ST_TO_ADDR
// sFlag := false ;
7006: LD_ADDR_EXP 42
7010: PUSH
7011: LD_INT 0
7013: ST_TO_ADDR
// sKamikadze := false ;
7014: LD_ADDR_EXP 50
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// sTroll := false ;
7022: LD_ADDR_EXP 51
7026: PUSH
7027: LD_INT 0
7029: ST_TO_ADDR
// sSlow := false ;
7030: LD_ADDR_EXP 52
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// sLack := false ;
7038: LD_ADDR_EXP 53
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// sTank := false ;
7046: LD_ADDR_EXP 55
7050: PUSH
7051: LD_INT 0
7053: ST_TO_ADDR
// sRemote := false ;
7054: LD_ADDR_EXP 56
7058: PUSH
7059: LD_INT 0
7061: ST_TO_ADDR
// sPowell := false ;
7062: LD_ADDR_EXP 57
7066: PUSH
7067: LD_INT 0
7069: ST_TO_ADDR
// sTeleport := false ;
7070: LD_ADDR_EXP 60
7074: PUSH
7075: LD_INT 0
7077: ST_TO_ADDR
// sOilTower := false ;
7078: LD_ADDR_EXP 62
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// sShovel := false ;
7086: LD_ADDR_EXP 63
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// sSheik := false ;
7094: LD_ADDR_EXP 64
7098: PUSH
7099: LD_INT 0
7101: ST_TO_ADDR
// sEarthquake := false ;
7102: LD_ADDR_EXP 66
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// sAI := false ;
7110: LD_ADDR_EXP 67
7114: PUSH
7115: LD_INT 0
7117: ST_TO_ADDR
// sCargo := false ;
7118: LD_ADDR_EXP 70
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// sDLaser := false ;
7126: LD_ADDR_EXP 71
7130: PUSH
7131: LD_INT 0
7133: ST_TO_ADDR
// sExchange := false ;
7134: LD_ADDR_EXP 72
7138: PUSH
7139: LD_INT 0
7141: ST_TO_ADDR
// sFac := false ;
7142: LD_ADDR_EXP 73
7146: PUSH
7147: LD_INT 0
7149: ST_TO_ADDR
// sPower := false ;
7150: LD_ADDR_EXP 74
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// sRandom := false ;
7158: LD_ADDR_EXP 75
7162: PUSH
7163: LD_INT 0
7165: ST_TO_ADDR
// sShield := false ;
7166: LD_ADDR_EXP 76
7170: PUSH
7171: LD_INT 0
7173: ST_TO_ADDR
// sTime := false ;
7174: LD_ADDR_EXP 77
7178: PUSH
7179: LD_INT 0
7181: ST_TO_ADDR
// sTools := false ;
7182: LD_ADDR_EXP 78
7186: PUSH
7187: LD_INT 0
7189: ST_TO_ADDR
// sSold := false ;
7190: LD_ADDR_EXP 43
7194: PUSH
7195: LD_INT 0
7197: ST_TO_ADDR
// sDiff := false ;
7198: LD_ADDR_EXP 44
7202: PUSH
7203: LD_INT 0
7205: ST_TO_ADDR
// sFog := false ;
7206: LD_ADDR_EXP 47
7210: PUSH
7211: LD_INT 0
7213: ST_TO_ADDR
// sReset := false ;
7214: LD_ADDR_EXP 48
7218: PUSH
7219: LD_INT 0
7221: ST_TO_ADDR
// sSun := false ;
7222: LD_ADDR_EXP 49
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// sTiger := false ;
7230: LD_ADDR_EXP 45
7234: PUSH
7235: LD_INT 0
7237: ST_TO_ADDR
// sBomb := false ;
7238: LD_ADDR_EXP 46
7242: PUSH
7243: LD_INT 0
7245: ST_TO_ADDR
// sWound := false ;
7246: LD_ADDR_EXP 54
7250: PUSH
7251: LD_INT 0
7253: ST_TO_ADDR
// sBetray := false ;
7254: LD_ADDR_EXP 58
7258: PUSH
7259: LD_INT 0
7261: ST_TO_ADDR
// sContamin := false ;
7262: LD_ADDR_EXP 59
7266: PUSH
7267: LD_INT 0
7269: ST_TO_ADDR
// sOil := false ;
7270: LD_ADDR_EXP 61
7274: PUSH
7275: LD_INT 0
7277: ST_TO_ADDR
// sStu := false ;
7278: LD_ADDR_EXP 65
7282: PUSH
7283: LD_INT 0
7285: ST_TO_ADDR
// sBazooka := false ;
7286: LD_ADDR_EXP 68
7290: PUSH
7291: LD_INT 0
7293: ST_TO_ADDR
// sMortar := false ;
7294: LD_ADDR_EXP 69
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// sRanger := false ;
7302: LD_ADDR_EXP 79
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// sComputer := false ;
7310: LD_ADDR_EXP 80
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// s30 := false ;
7318: LD_ADDR_EXP 81
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// s60 := false ;
7326: LD_ADDR_EXP 82
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// end ;
7334: LD_VAR 0 1
7338: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7339: LD_INT 0
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
// result := [ ] ;
7348: LD_ADDR_VAR 0 2
7352: PUSH
7353: EMPTY
7354: ST_TO_ADDR
// if campaign_id = 1 then
7355: LD_OWVAR 69
7359: PUSH
7360: LD_INT 1
7362: EQUAL
7363: IFFALSE 10529
// begin case mission_number of 1 :
7365: LD_OWVAR 70
7369: PUSH
7370: LD_INT 1
7372: DOUBLE
7373: EQUAL
7374: IFTRUE 7378
7376: GO 7454
7378: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7379: LD_ADDR_VAR 0 2
7383: PUSH
7384: LD_INT 2
7386: PUSH
7387: LD_INT 4
7389: PUSH
7390: LD_INT 11
7392: PUSH
7393: LD_INT 12
7395: PUSH
7396: LD_INT 15
7398: PUSH
7399: LD_INT 16
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_INT 23
7407: PUSH
7408: LD_INT 26
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 101
7424: PUSH
7425: LD_INT 102
7427: PUSH
7428: LD_INT 106
7430: PUSH
7431: LD_INT 116
7433: PUSH
7434: LD_INT 117
7436: PUSH
7437: LD_INT 118
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: ST_TO_ADDR
7452: GO 10527
7454: LD_INT 2
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7546
7462: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7463: LD_ADDR_VAR 0 2
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: LD_INT 4
7473: PUSH
7474: LD_INT 11
7476: PUSH
7477: LD_INT 12
7479: PUSH
7480: LD_INT 15
7482: PUSH
7483: LD_INT 16
7485: PUSH
7486: LD_INT 22
7488: PUSH
7489: LD_INT 23
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 101
7508: PUSH
7509: LD_INT 102
7511: PUSH
7512: LD_INT 105
7514: PUSH
7515: LD_INT 106
7517: PUSH
7518: LD_INT 108
7520: PUSH
7521: LD_INT 116
7523: PUSH
7524: LD_INT 117
7526: PUSH
7527: LD_INT 118
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: ST_TO_ADDR
7544: GO 10527
7546: LD_INT 3
7548: DOUBLE
7549: EQUAL
7550: IFTRUE 7554
7552: GO 7642
7554: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7555: LD_ADDR_VAR 0 2
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: LD_INT 5
7568: PUSH
7569: LD_INT 11
7571: PUSH
7572: LD_INT 12
7574: PUSH
7575: LD_INT 15
7577: PUSH
7578: LD_INT 16
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 26
7586: PUSH
7587: LD_INT 36
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 101
7604: PUSH
7605: LD_INT 102
7607: PUSH
7608: LD_INT 105
7610: PUSH
7611: LD_INT 106
7613: PUSH
7614: LD_INT 108
7616: PUSH
7617: LD_INT 116
7619: PUSH
7620: LD_INT 117
7622: PUSH
7623: LD_INT 118
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: ST_TO_ADDR
7640: GO 10527
7642: LD_INT 4
7644: DOUBLE
7645: EQUAL
7646: IFTRUE 7650
7648: GO 7746
7650: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7651: LD_ADDR_VAR 0 2
7655: PUSH
7656: LD_INT 2
7658: PUSH
7659: LD_INT 4
7661: PUSH
7662: LD_INT 5
7664: PUSH
7665: LD_INT 8
7667: PUSH
7668: LD_INT 11
7670: PUSH
7671: LD_INT 12
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: LD_INT 16
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_INT 23
7685: PUSH
7686: LD_INT 26
7688: PUSH
7689: LD_INT 36
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 101
7708: PUSH
7709: LD_INT 102
7711: PUSH
7712: LD_INT 105
7714: PUSH
7715: LD_INT 106
7717: PUSH
7718: LD_INT 108
7720: PUSH
7721: LD_INT 116
7723: PUSH
7724: LD_INT 117
7726: PUSH
7727: LD_INT 118
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: ST_TO_ADDR
7744: GO 10527
7746: LD_INT 5
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7866
7754: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: LD_INT 4
7765: PUSH
7766: LD_INT 5
7768: PUSH
7769: LD_INT 6
7771: PUSH
7772: LD_INT 8
7774: PUSH
7775: LD_INT 11
7777: PUSH
7778: LD_INT 12
7780: PUSH
7781: LD_INT 15
7783: PUSH
7784: LD_INT 16
7786: PUSH
7787: LD_INT 22
7789: PUSH
7790: LD_INT 23
7792: PUSH
7793: LD_INT 25
7795: PUSH
7796: LD_INT 26
7798: PUSH
7799: LD_INT 36
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 101
7820: PUSH
7821: LD_INT 102
7823: PUSH
7824: LD_INT 105
7826: PUSH
7827: LD_INT 106
7829: PUSH
7830: LD_INT 108
7832: PUSH
7833: LD_INT 109
7835: PUSH
7836: LD_INT 112
7838: PUSH
7839: LD_INT 116
7841: PUSH
7842: LD_INT 117
7844: PUSH
7845: LD_INT 118
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: ST_TO_ADDR
7864: GO 10527
7866: LD_INT 6
7868: DOUBLE
7869: EQUAL
7870: IFTRUE 7874
7872: GO 8006
7874: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 2
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: LD_INT 5
7888: PUSH
7889: LD_INT 6
7891: PUSH
7892: LD_INT 8
7894: PUSH
7895: LD_INT 11
7897: PUSH
7898: LD_INT 12
7900: PUSH
7901: LD_INT 15
7903: PUSH
7904: LD_INT 16
7906: PUSH
7907: LD_INT 20
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_INT 23
7918: PUSH
7919: LD_INT 25
7921: PUSH
7922: LD_INT 26
7924: PUSH
7925: LD_INT 30
7927: PUSH
7928: LD_INT 31
7930: PUSH
7931: LD_INT 32
7933: PUSH
7934: LD_INT 36
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: PUSH
7958: LD_INT 101
7960: PUSH
7961: LD_INT 102
7963: PUSH
7964: LD_INT 105
7966: PUSH
7967: LD_INT 106
7969: PUSH
7970: LD_INT 108
7972: PUSH
7973: LD_INT 109
7975: PUSH
7976: LD_INT 112
7978: PUSH
7979: LD_INT 116
7981: PUSH
7982: LD_INT 117
7984: PUSH
7985: LD_INT 118
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: ST_TO_ADDR
8004: GO 10527
8006: LD_INT 7
8008: DOUBLE
8009: EQUAL
8010: IFTRUE 8014
8012: GO 8126
8014: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8015: LD_ADDR_VAR 0 2
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: LD_INT 4
8025: PUSH
8026: LD_INT 5
8028: PUSH
8029: LD_INT 7
8031: PUSH
8032: LD_INT 11
8034: PUSH
8035: LD_INT 12
8037: PUSH
8038: LD_INT 15
8040: PUSH
8041: LD_INT 16
8043: PUSH
8044: LD_INT 20
8046: PUSH
8047: LD_INT 21
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 23
8055: PUSH
8056: LD_INT 25
8058: PUSH
8059: LD_INT 26
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 101
8080: PUSH
8081: LD_INT 102
8083: PUSH
8084: LD_INT 103
8086: PUSH
8087: LD_INT 105
8089: PUSH
8090: LD_INT 106
8092: PUSH
8093: LD_INT 108
8095: PUSH
8096: LD_INT 112
8098: PUSH
8099: LD_INT 116
8101: PUSH
8102: LD_INT 117
8104: PUSH
8105: LD_INT 118
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: ST_TO_ADDR
8124: GO 10527
8126: LD_INT 8
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8274
8134: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8135: LD_ADDR_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: PUSH
8143: LD_INT 4
8145: PUSH
8146: LD_INT 5
8148: PUSH
8149: LD_INT 6
8151: PUSH
8152: LD_INT 7
8154: PUSH
8155: LD_INT 8
8157: PUSH
8158: LD_INT 11
8160: PUSH
8161: LD_INT 12
8163: PUSH
8164: LD_INT 15
8166: PUSH
8167: LD_INT 16
8169: PUSH
8170: LD_INT 20
8172: PUSH
8173: LD_INT 21
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_INT 23
8181: PUSH
8182: LD_INT 25
8184: PUSH
8185: LD_INT 26
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 31
8193: PUSH
8194: LD_INT 32
8196: PUSH
8197: LD_INT 36
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 101
8224: PUSH
8225: LD_INT 102
8227: PUSH
8228: LD_INT 103
8230: PUSH
8231: LD_INT 105
8233: PUSH
8234: LD_INT 106
8236: PUSH
8237: LD_INT 108
8239: PUSH
8240: LD_INT 109
8242: PUSH
8243: LD_INT 112
8245: PUSH
8246: LD_INT 116
8248: PUSH
8249: LD_INT 117
8251: PUSH
8252: LD_INT 118
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: ST_TO_ADDR
8272: GO 10527
8274: LD_INT 9
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8430
8282: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_INT 2
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: LD_INT 6
8299: PUSH
8300: LD_INT 7
8302: PUSH
8303: LD_INT 8
8305: PUSH
8306: LD_INT 11
8308: PUSH
8309: LD_INT 12
8311: PUSH
8312: LD_INT 15
8314: PUSH
8315: LD_INT 16
8317: PUSH
8318: LD_INT 20
8320: PUSH
8321: LD_INT 21
8323: PUSH
8324: LD_INT 22
8326: PUSH
8327: LD_INT 23
8329: PUSH
8330: LD_INT 25
8332: PUSH
8333: LD_INT 26
8335: PUSH
8336: LD_INT 28
8338: PUSH
8339: LD_INT 30
8341: PUSH
8342: LD_INT 31
8344: PUSH
8345: LD_INT 32
8347: PUSH
8348: LD_INT 36
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 101
8376: PUSH
8377: LD_INT 102
8379: PUSH
8380: LD_INT 103
8382: PUSH
8383: LD_INT 105
8385: PUSH
8386: LD_INT 106
8388: PUSH
8389: LD_INT 108
8391: PUSH
8392: LD_INT 109
8394: PUSH
8395: LD_INT 112
8397: PUSH
8398: LD_INT 114
8400: PUSH
8401: LD_INT 116
8403: PUSH
8404: LD_INT 117
8406: PUSH
8407: LD_INT 118
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: ST_TO_ADDR
8428: GO 10527
8430: LD_INT 10
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8438
8436: GO 8634
8438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: LD_INT 4
8449: PUSH
8450: LD_INT 5
8452: PUSH
8453: LD_INT 6
8455: PUSH
8456: LD_INT 7
8458: PUSH
8459: LD_INT 8
8461: PUSH
8462: LD_INT 9
8464: PUSH
8465: LD_INT 10
8467: PUSH
8468: LD_INT 11
8470: PUSH
8471: LD_INT 12
8473: PUSH
8474: LD_INT 13
8476: PUSH
8477: LD_INT 14
8479: PUSH
8480: LD_INT 15
8482: PUSH
8483: LD_INT 16
8485: PUSH
8486: LD_INT 17
8488: PUSH
8489: LD_INT 18
8491: PUSH
8492: LD_INT 19
8494: PUSH
8495: LD_INT 20
8497: PUSH
8498: LD_INT 21
8500: PUSH
8501: LD_INT 22
8503: PUSH
8504: LD_INT 23
8506: PUSH
8507: LD_INT 24
8509: PUSH
8510: LD_INT 25
8512: PUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 28
8518: PUSH
8519: LD_INT 30
8521: PUSH
8522: LD_INT 31
8524: PUSH
8525: LD_INT 32
8527: PUSH
8528: LD_INT 36
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 101
8564: PUSH
8565: LD_INT 102
8567: PUSH
8568: LD_INT 103
8570: PUSH
8571: LD_INT 104
8573: PUSH
8574: LD_INT 105
8576: PUSH
8577: LD_INT 106
8579: PUSH
8580: LD_INT 107
8582: PUSH
8583: LD_INT 108
8585: PUSH
8586: LD_INT 109
8588: PUSH
8589: LD_INT 110
8591: PUSH
8592: LD_INT 111
8594: PUSH
8595: LD_INT 112
8597: PUSH
8598: LD_INT 114
8600: PUSH
8601: LD_INT 116
8603: PUSH
8604: LD_INT 117
8606: PUSH
8607: LD_INT 118
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: ST_TO_ADDR
8632: GO 10527
8634: LD_INT 11
8636: DOUBLE
8637: EQUAL
8638: IFTRUE 8642
8640: GO 8846
8642: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: LD_INT 2
8650: PUSH
8651: LD_INT 3
8653: PUSH
8654: LD_INT 4
8656: PUSH
8657: LD_INT 5
8659: PUSH
8660: LD_INT 6
8662: PUSH
8663: LD_INT 7
8665: PUSH
8666: LD_INT 8
8668: PUSH
8669: LD_INT 9
8671: PUSH
8672: LD_INT 10
8674: PUSH
8675: LD_INT 11
8677: PUSH
8678: LD_INT 12
8680: PUSH
8681: LD_INT 13
8683: PUSH
8684: LD_INT 14
8686: PUSH
8687: LD_INT 15
8689: PUSH
8690: LD_INT 16
8692: PUSH
8693: LD_INT 17
8695: PUSH
8696: LD_INT 18
8698: PUSH
8699: LD_INT 19
8701: PUSH
8702: LD_INT 20
8704: PUSH
8705: LD_INT 21
8707: PUSH
8708: LD_INT 22
8710: PUSH
8711: LD_INT 23
8713: PUSH
8714: LD_INT 24
8716: PUSH
8717: LD_INT 25
8719: PUSH
8720: LD_INT 26
8722: PUSH
8723: LD_INT 28
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 31
8731: PUSH
8732: LD_INT 32
8734: PUSH
8735: LD_INT 34
8737: PUSH
8738: LD_INT 36
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 101
8776: PUSH
8777: LD_INT 102
8779: PUSH
8780: LD_INT 103
8782: PUSH
8783: LD_INT 104
8785: PUSH
8786: LD_INT 105
8788: PUSH
8789: LD_INT 106
8791: PUSH
8792: LD_INT 107
8794: PUSH
8795: LD_INT 108
8797: PUSH
8798: LD_INT 109
8800: PUSH
8801: LD_INT 110
8803: PUSH
8804: LD_INT 111
8806: PUSH
8807: LD_INT 112
8809: PUSH
8810: LD_INT 114
8812: PUSH
8813: LD_INT 116
8815: PUSH
8816: LD_INT 117
8818: PUSH
8819: LD_INT 118
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: ST_TO_ADDR
8844: GO 10527
8846: LD_INT 12
8848: DOUBLE
8849: EQUAL
8850: IFTRUE 8854
8852: GO 9074
8854: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8855: LD_ADDR_VAR 0 2
8859: PUSH
8860: LD_INT 1
8862: PUSH
8863: LD_INT 2
8865: PUSH
8866: LD_INT 3
8868: PUSH
8869: LD_INT 4
8871: PUSH
8872: LD_INT 5
8874: PUSH
8875: LD_INT 6
8877: PUSH
8878: LD_INT 7
8880: PUSH
8881: LD_INT 8
8883: PUSH
8884: LD_INT 9
8886: PUSH
8887: LD_INT 10
8889: PUSH
8890: LD_INT 11
8892: PUSH
8893: LD_INT 12
8895: PUSH
8896: LD_INT 13
8898: PUSH
8899: LD_INT 14
8901: PUSH
8902: LD_INT 15
8904: PUSH
8905: LD_INT 16
8907: PUSH
8908: LD_INT 17
8910: PUSH
8911: LD_INT 18
8913: PUSH
8914: LD_INT 19
8916: PUSH
8917: LD_INT 20
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 22
8925: PUSH
8926: LD_INT 23
8928: PUSH
8929: LD_INT 24
8931: PUSH
8932: LD_INT 25
8934: PUSH
8935: LD_INT 26
8937: PUSH
8938: LD_INT 27
8940: PUSH
8941: LD_INT 28
8943: PUSH
8944: LD_INT 30
8946: PUSH
8947: LD_INT 31
8949: PUSH
8950: LD_INT 32
8952: PUSH
8953: LD_INT 33
8955: PUSH
8956: LD_INT 34
8958: PUSH
8959: LD_INT 36
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 101
9000: PUSH
9001: LD_INT 102
9003: PUSH
9004: LD_INT 103
9006: PUSH
9007: LD_INT 104
9009: PUSH
9010: LD_INT 105
9012: PUSH
9013: LD_INT 106
9015: PUSH
9016: LD_INT 107
9018: PUSH
9019: LD_INT 108
9021: PUSH
9022: LD_INT 109
9024: PUSH
9025: LD_INT 110
9027: PUSH
9028: LD_INT 111
9030: PUSH
9031: LD_INT 112
9033: PUSH
9034: LD_INT 113
9036: PUSH
9037: LD_INT 114
9039: PUSH
9040: LD_INT 116
9042: PUSH
9043: LD_INT 117
9045: PUSH
9046: LD_INT 118
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: ST_TO_ADDR
9072: GO 10527
9074: LD_INT 13
9076: DOUBLE
9077: EQUAL
9078: IFTRUE 9082
9080: GO 9290
9082: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9083: LD_ADDR_VAR 0 2
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: LD_INT 2
9093: PUSH
9094: LD_INT 3
9096: PUSH
9097: LD_INT 4
9099: PUSH
9100: LD_INT 5
9102: PUSH
9103: LD_INT 8
9105: PUSH
9106: LD_INT 9
9108: PUSH
9109: LD_INT 10
9111: PUSH
9112: LD_INT 11
9114: PUSH
9115: LD_INT 12
9117: PUSH
9118: LD_INT 14
9120: PUSH
9121: LD_INT 15
9123: PUSH
9124: LD_INT 16
9126: PUSH
9127: LD_INT 17
9129: PUSH
9130: LD_INT 18
9132: PUSH
9133: LD_INT 19
9135: PUSH
9136: LD_INT 20
9138: PUSH
9139: LD_INT 21
9141: PUSH
9142: LD_INT 22
9144: PUSH
9145: LD_INT 23
9147: PUSH
9148: LD_INT 24
9150: PUSH
9151: LD_INT 25
9153: PUSH
9154: LD_INT 26
9156: PUSH
9157: LD_INT 27
9159: PUSH
9160: LD_INT 28
9162: PUSH
9163: LD_INT 30
9165: PUSH
9166: LD_INT 31
9168: PUSH
9169: LD_INT 32
9171: PUSH
9172: LD_INT 33
9174: PUSH
9175: LD_INT 34
9177: PUSH
9178: LD_INT 36
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: PUSH
9214: LD_INT 101
9216: PUSH
9217: LD_INT 102
9219: PUSH
9220: LD_INT 103
9222: PUSH
9223: LD_INT 104
9225: PUSH
9226: LD_INT 105
9228: PUSH
9229: LD_INT 106
9231: PUSH
9232: LD_INT 107
9234: PUSH
9235: LD_INT 108
9237: PUSH
9238: LD_INT 109
9240: PUSH
9241: LD_INT 110
9243: PUSH
9244: LD_INT 111
9246: PUSH
9247: LD_INT 112
9249: PUSH
9250: LD_INT 113
9252: PUSH
9253: LD_INT 114
9255: PUSH
9256: LD_INT 116
9258: PUSH
9259: LD_INT 117
9261: PUSH
9262: LD_INT 118
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: ST_TO_ADDR
9288: GO 10527
9290: LD_INT 14
9292: DOUBLE
9293: EQUAL
9294: IFTRUE 9298
9296: GO 9522
9298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9299: LD_ADDR_VAR 0 2
9303: PUSH
9304: LD_INT 1
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: LD_INT 4
9315: PUSH
9316: LD_INT 5
9318: PUSH
9319: LD_INT 6
9321: PUSH
9322: LD_INT 7
9324: PUSH
9325: LD_INT 8
9327: PUSH
9328: LD_INT 9
9330: PUSH
9331: LD_INT 10
9333: PUSH
9334: LD_INT 11
9336: PUSH
9337: LD_INT 12
9339: PUSH
9340: LD_INT 13
9342: PUSH
9343: LD_INT 14
9345: PUSH
9346: LD_INT 15
9348: PUSH
9349: LD_INT 16
9351: PUSH
9352: LD_INT 17
9354: PUSH
9355: LD_INT 18
9357: PUSH
9358: LD_INT 19
9360: PUSH
9361: LD_INT 20
9363: PUSH
9364: LD_INT 21
9366: PUSH
9367: LD_INT 22
9369: PUSH
9370: LD_INT 23
9372: PUSH
9373: LD_INT 24
9375: PUSH
9376: LD_INT 25
9378: PUSH
9379: LD_INT 26
9381: PUSH
9382: LD_INT 27
9384: PUSH
9385: LD_INT 28
9387: PUSH
9388: LD_INT 29
9390: PUSH
9391: LD_INT 30
9393: PUSH
9394: LD_INT 31
9396: PUSH
9397: LD_INT 32
9399: PUSH
9400: LD_INT 33
9402: PUSH
9403: LD_INT 34
9405: PUSH
9406: LD_INT 36
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 101
9448: PUSH
9449: LD_INT 102
9451: PUSH
9452: LD_INT 103
9454: PUSH
9455: LD_INT 104
9457: PUSH
9458: LD_INT 105
9460: PUSH
9461: LD_INT 106
9463: PUSH
9464: LD_INT 107
9466: PUSH
9467: LD_INT 108
9469: PUSH
9470: LD_INT 109
9472: PUSH
9473: LD_INT 110
9475: PUSH
9476: LD_INT 111
9478: PUSH
9479: LD_INT 112
9481: PUSH
9482: LD_INT 113
9484: PUSH
9485: LD_INT 114
9487: PUSH
9488: LD_INT 116
9490: PUSH
9491: LD_INT 117
9493: PUSH
9494: LD_INT 118
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: ST_TO_ADDR
9520: GO 10527
9522: LD_INT 15
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9754
9530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9531: LD_ADDR_VAR 0 2
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 4
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: LD_INT 6
9553: PUSH
9554: LD_INT 7
9556: PUSH
9557: LD_INT 8
9559: PUSH
9560: LD_INT 9
9562: PUSH
9563: LD_INT 10
9565: PUSH
9566: LD_INT 11
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: LD_INT 13
9574: PUSH
9575: LD_INT 14
9577: PUSH
9578: LD_INT 15
9580: PUSH
9581: LD_INT 16
9583: PUSH
9584: LD_INT 17
9586: PUSH
9587: LD_INT 18
9589: PUSH
9590: LD_INT 19
9592: PUSH
9593: LD_INT 20
9595: PUSH
9596: LD_INT 21
9598: PUSH
9599: LD_INT 22
9601: PUSH
9602: LD_INT 23
9604: PUSH
9605: LD_INT 24
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 26
9613: PUSH
9614: LD_INT 27
9616: PUSH
9617: LD_INT 28
9619: PUSH
9620: LD_INT 29
9622: PUSH
9623: LD_INT 30
9625: PUSH
9626: LD_INT 31
9628: PUSH
9629: LD_INT 32
9631: PUSH
9632: LD_INT 33
9634: PUSH
9635: LD_INT 34
9637: PUSH
9638: LD_INT 36
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 101
9680: PUSH
9681: LD_INT 102
9683: PUSH
9684: LD_INT 103
9686: PUSH
9687: LD_INT 104
9689: PUSH
9690: LD_INT 105
9692: PUSH
9693: LD_INT 106
9695: PUSH
9696: LD_INT 107
9698: PUSH
9699: LD_INT 108
9701: PUSH
9702: LD_INT 109
9704: PUSH
9705: LD_INT 110
9707: PUSH
9708: LD_INT 111
9710: PUSH
9711: LD_INT 112
9713: PUSH
9714: LD_INT 113
9716: PUSH
9717: LD_INT 114
9719: PUSH
9720: LD_INT 116
9722: PUSH
9723: LD_INT 117
9725: PUSH
9726: LD_INT 118
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: ST_TO_ADDR
9752: GO 10527
9754: LD_INT 16
9756: DOUBLE
9757: EQUAL
9758: IFTRUE 9762
9760: GO 9898
9762: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9763: LD_ADDR_VAR 0 2
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: LD_INT 5
9776: PUSH
9777: LD_INT 7
9779: PUSH
9780: LD_INT 11
9782: PUSH
9783: LD_INT 12
9785: PUSH
9786: LD_INT 15
9788: PUSH
9789: LD_INT 16
9791: PUSH
9792: LD_INT 20
9794: PUSH
9795: LD_INT 21
9797: PUSH
9798: LD_INT 22
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 25
9806: PUSH
9807: LD_INT 26
9809: PUSH
9810: LD_INT 30
9812: PUSH
9813: LD_INT 31
9815: PUSH
9816: LD_INT 32
9818: PUSH
9819: LD_INT 33
9821: PUSH
9822: LD_INT 34
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 101
9848: PUSH
9849: LD_INT 102
9851: PUSH
9852: LD_INT 103
9854: PUSH
9855: LD_INT 106
9857: PUSH
9858: LD_INT 108
9860: PUSH
9861: LD_INT 112
9863: PUSH
9864: LD_INT 113
9866: PUSH
9867: LD_INT 114
9869: PUSH
9870: LD_INT 116
9872: PUSH
9873: LD_INT 117
9875: PUSH
9876: LD_INT 118
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: ST_TO_ADDR
9896: GO 10527
9898: LD_INT 17
9900: DOUBLE
9901: EQUAL
9902: IFTRUE 9906
9904: GO 10130
9906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9907: LD_ADDR_VAR 0 2
9911: PUSH
9912: LD_INT 1
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: LD_INT 3
9920: PUSH
9921: LD_INT 4
9923: PUSH
9924: LD_INT 5
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: LD_INT 7
9932: PUSH
9933: LD_INT 8
9935: PUSH
9936: LD_INT 9
9938: PUSH
9939: LD_INT 10
9941: PUSH
9942: LD_INT 11
9944: PUSH
9945: LD_INT 12
9947: PUSH
9948: LD_INT 13
9950: PUSH
9951: LD_INT 14
9953: PUSH
9954: LD_INT 15
9956: PUSH
9957: LD_INT 16
9959: PUSH
9960: LD_INT 17
9962: PUSH
9963: LD_INT 18
9965: PUSH
9966: LD_INT 19
9968: PUSH
9969: LD_INT 20
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 23
9980: PUSH
9981: LD_INT 24
9983: PUSH
9984: LD_INT 25
9986: PUSH
9987: LD_INT 26
9989: PUSH
9990: LD_INT 27
9992: PUSH
9993: LD_INT 28
9995: PUSH
9996: LD_INT 29
9998: PUSH
9999: LD_INT 30
10001: PUSH
10002: LD_INT 31
10004: PUSH
10005: LD_INT 32
10007: PUSH
10008: LD_INT 33
10010: PUSH
10011: LD_INT 34
10013: PUSH
10014: LD_INT 36
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 101
10056: PUSH
10057: LD_INT 102
10059: PUSH
10060: LD_INT 103
10062: PUSH
10063: LD_INT 104
10065: PUSH
10066: LD_INT 105
10068: PUSH
10069: LD_INT 106
10071: PUSH
10072: LD_INT 107
10074: PUSH
10075: LD_INT 108
10077: PUSH
10078: LD_INT 109
10080: PUSH
10081: LD_INT 110
10083: PUSH
10084: LD_INT 111
10086: PUSH
10087: LD_INT 112
10089: PUSH
10090: LD_INT 113
10092: PUSH
10093: LD_INT 114
10095: PUSH
10096: LD_INT 116
10098: PUSH
10099: LD_INT 117
10101: PUSH
10102: LD_INT 118
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: ST_TO_ADDR
10128: GO 10527
10130: LD_INT 18
10132: DOUBLE
10133: EQUAL
10134: IFTRUE 10138
10136: GO 10286
10138: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10139: LD_ADDR_VAR 0 2
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: LD_INT 4
10149: PUSH
10150: LD_INT 5
10152: PUSH
10153: LD_INT 7
10155: PUSH
10156: LD_INT 11
10158: PUSH
10159: LD_INT 12
10161: PUSH
10162: LD_INT 15
10164: PUSH
10165: LD_INT 16
10167: PUSH
10168: LD_INT 20
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 22
10176: PUSH
10177: LD_INT 23
10179: PUSH
10180: LD_INT 25
10182: PUSH
10183: LD_INT 26
10185: PUSH
10186: LD_INT 30
10188: PUSH
10189: LD_INT 31
10191: PUSH
10192: LD_INT 32
10194: PUSH
10195: LD_INT 33
10197: PUSH
10198: LD_INT 34
10200: PUSH
10201: LD_INT 35
10203: PUSH
10204: LD_INT 36
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 101
10232: PUSH
10233: LD_INT 102
10235: PUSH
10236: LD_INT 103
10238: PUSH
10239: LD_INT 106
10241: PUSH
10242: LD_INT 108
10244: PUSH
10245: LD_INT 112
10247: PUSH
10248: LD_INT 113
10250: PUSH
10251: LD_INT 114
10253: PUSH
10254: LD_INT 115
10256: PUSH
10257: LD_INT 116
10259: PUSH
10260: LD_INT 117
10262: PUSH
10263: LD_INT 118
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: ST_TO_ADDR
10284: GO 10527
10286: LD_INT 19
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10526
10294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10295: LD_ADDR_VAR 0 2
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: LD_INT 2
10305: PUSH
10306: LD_INT 3
10308: PUSH
10309: LD_INT 4
10311: PUSH
10312: LD_INT 5
10314: PUSH
10315: LD_INT 6
10317: PUSH
10318: LD_INT 7
10320: PUSH
10321: LD_INT 8
10323: PUSH
10324: LD_INT 9
10326: PUSH
10327: LD_INT 10
10329: PUSH
10330: LD_INT 11
10332: PUSH
10333: LD_INT 12
10335: PUSH
10336: LD_INT 13
10338: PUSH
10339: LD_INT 14
10341: PUSH
10342: LD_INT 15
10344: PUSH
10345: LD_INT 16
10347: PUSH
10348: LD_INT 17
10350: PUSH
10351: LD_INT 18
10353: PUSH
10354: LD_INT 19
10356: PUSH
10357: LD_INT 20
10359: PUSH
10360: LD_INT 21
10362: PUSH
10363: LD_INT 22
10365: PUSH
10366: LD_INT 23
10368: PUSH
10369: LD_INT 24
10371: PUSH
10372: LD_INT 25
10374: PUSH
10375: LD_INT 26
10377: PUSH
10378: LD_INT 27
10380: PUSH
10381: LD_INT 28
10383: PUSH
10384: LD_INT 29
10386: PUSH
10387: LD_INT 30
10389: PUSH
10390: LD_INT 31
10392: PUSH
10393: LD_INT 32
10395: PUSH
10396: LD_INT 33
10398: PUSH
10399: LD_INT 34
10401: PUSH
10402: LD_INT 35
10404: PUSH
10405: LD_INT 36
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 101
10448: PUSH
10449: LD_INT 102
10451: PUSH
10452: LD_INT 103
10454: PUSH
10455: LD_INT 104
10457: PUSH
10458: LD_INT 105
10460: PUSH
10461: LD_INT 106
10463: PUSH
10464: LD_INT 107
10466: PUSH
10467: LD_INT 108
10469: PUSH
10470: LD_INT 109
10472: PUSH
10473: LD_INT 110
10475: PUSH
10476: LD_INT 111
10478: PUSH
10479: LD_INT 112
10481: PUSH
10482: LD_INT 113
10484: PUSH
10485: LD_INT 114
10487: PUSH
10488: LD_INT 115
10490: PUSH
10491: LD_INT 116
10493: PUSH
10494: LD_INT 117
10496: PUSH
10497: LD_INT 118
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: ST_TO_ADDR
10524: GO 10527
10526: POP
// end else
10527: GO 10758
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10529: LD_ADDR_VAR 0 2
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: LD_INT 2
10539: PUSH
10540: LD_INT 3
10542: PUSH
10543: LD_INT 4
10545: PUSH
10546: LD_INT 5
10548: PUSH
10549: LD_INT 6
10551: PUSH
10552: LD_INT 7
10554: PUSH
10555: LD_INT 8
10557: PUSH
10558: LD_INT 9
10560: PUSH
10561: LD_INT 10
10563: PUSH
10564: LD_INT 11
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: LD_INT 13
10572: PUSH
10573: LD_INT 14
10575: PUSH
10576: LD_INT 15
10578: PUSH
10579: LD_INT 16
10581: PUSH
10582: LD_INT 17
10584: PUSH
10585: LD_INT 18
10587: PUSH
10588: LD_INT 19
10590: PUSH
10591: LD_INT 20
10593: PUSH
10594: LD_INT 21
10596: PUSH
10597: LD_INT 22
10599: PUSH
10600: LD_INT 23
10602: PUSH
10603: LD_INT 24
10605: PUSH
10606: LD_INT 25
10608: PUSH
10609: LD_INT 26
10611: PUSH
10612: LD_INT 27
10614: PUSH
10615: LD_INT 28
10617: PUSH
10618: LD_INT 29
10620: PUSH
10621: LD_INT 30
10623: PUSH
10624: LD_INT 31
10626: PUSH
10627: LD_INT 32
10629: PUSH
10630: LD_INT 33
10632: PUSH
10633: LD_INT 34
10635: PUSH
10636: LD_INT 35
10638: PUSH
10639: LD_INT 36
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 101
10682: PUSH
10683: LD_INT 102
10685: PUSH
10686: LD_INT 103
10688: PUSH
10689: LD_INT 104
10691: PUSH
10692: LD_INT 105
10694: PUSH
10695: LD_INT 106
10697: PUSH
10698: LD_INT 107
10700: PUSH
10701: LD_INT 108
10703: PUSH
10704: LD_INT 109
10706: PUSH
10707: LD_INT 110
10709: PUSH
10710: LD_INT 111
10712: PUSH
10713: LD_INT 112
10715: PUSH
10716: LD_INT 113
10718: PUSH
10719: LD_INT 114
10721: PUSH
10722: LD_INT 115
10724: PUSH
10725: LD_INT 116
10727: PUSH
10728: LD_INT 117
10730: PUSH
10731: LD_INT 118
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: ST_TO_ADDR
// if result then
10758: LD_VAR 0 2
10762: IFFALSE 11548
// begin normal :=  ;
10764: LD_ADDR_VAR 0 5
10768: PUSH
10769: LD_STRING 
10771: ST_TO_ADDR
// hardcore :=  ;
10772: LD_ADDR_VAR 0 6
10776: PUSH
10777: LD_STRING 
10779: ST_TO_ADDR
// active :=  ;
10780: LD_ADDR_VAR 0 7
10784: PUSH
10785: LD_STRING 
10787: ST_TO_ADDR
// for i = 1 to normalCounter do
10788: LD_ADDR_VAR 0 8
10792: PUSH
10793: DOUBLE
10794: LD_INT 1
10796: DEC
10797: ST_TO_ADDR
10798: LD_EXP 27
10802: PUSH
10803: FOR_TO
10804: IFFALSE 10905
// begin tmp := 0 ;
10806: LD_ADDR_VAR 0 3
10810: PUSH
10811: LD_STRING 0
10813: ST_TO_ADDR
// if result [ 1 ] then
10814: LD_VAR 0 2
10818: PUSH
10819: LD_INT 1
10821: ARRAY
10822: IFFALSE 10887
// if result [ 1 ] [ 1 ] = i then
10824: LD_VAR 0 2
10828: PUSH
10829: LD_INT 1
10831: ARRAY
10832: PUSH
10833: LD_INT 1
10835: ARRAY
10836: PUSH
10837: LD_VAR 0 8
10841: EQUAL
10842: IFFALSE 10887
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10844: LD_ADDR_VAR 0 2
10848: PUSH
10849: LD_VAR 0 2
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PUSH
10862: LD_INT 1
10864: ARRAY
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 3
10873: PPUSH
10874: CALL_OW 1
10878: ST_TO_ADDR
// tmp := 1 ;
10879: LD_ADDR_VAR 0 3
10883: PUSH
10884: LD_STRING 1
10886: ST_TO_ADDR
// end ; normal := normal & tmp ;
10887: LD_ADDR_VAR 0 5
10891: PUSH
10892: LD_VAR 0 5
10896: PUSH
10897: LD_VAR 0 3
10901: STR
10902: ST_TO_ADDR
// end ;
10903: GO 10803
10905: POP
10906: POP
// for i = 1 to hardcoreCounter do
10907: LD_ADDR_VAR 0 8
10911: PUSH
10912: DOUBLE
10913: LD_INT 1
10915: DEC
10916: ST_TO_ADDR
10917: LD_EXP 28
10921: PUSH
10922: FOR_TO
10923: IFFALSE 11028
// begin tmp := 0 ;
10925: LD_ADDR_VAR 0 3
10929: PUSH
10930: LD_STRING 0
10932: ST_TO_ADDR
// if result [ 2 ] then
10933: LD_VAR 0 2
10937: PUSH
10938: LD_INT 2
10940: ARRAY
10941: IFFALSE 11010
// if result [ 2 ] [ 1 ] = 100 + i then
10943: LD_VAR 0 2
10947: PUSH
10948: LD_INT 2
10950: ARRAY
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: PUSH
10956: LD_INT 100
10958: PUSH
10959: LD_VAR 0 8
10963: PLUS
10964: EQUAL
10965: IFFALSE 11010
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10967: LD_ADDR_VAR 0 2
10971: PUSH
10972: LD_VAR 0 2
10976: PPUSH
10977: LD_INT 2
10979: PPUSH
10980: LD_VAR 0 2
10984: PUSH
10985: LD_INT 2
10987: ARRAY
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 3
10996: PPUSH
10997: CALL_OW 1
11001: ST_TO_ADDR
// tmp := 1 ;
11002: LD_ADDR_VAR 0 3
11006: PUSH
11007: LD_STRING 1
11009: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11010: LD_ADDR_VAR 0 6
11014: PUSH
11015: LD_VAR 0 6
11019: PUSH
11020: LD_VAR 0 3
11024: STR
11025: ST_TO_ADDR
// end ;
11026: GO 10922
11028: POP
11029: POP
// if isGameLoad then
11030: LD_VAR 0 1
11034: IFFALSE 11509
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11036: LD_ADDR_VAR 0 4
11040: PUSH
11041: LD_EXP 31
11045: PUSH
11046: LD_EXP 30
11050: PUSH
11051: LD_EXP 32
11055: PUSH
11056: LD_EXP 29
11060: PUSH
11061: LD_EXP 33
11065: PUSH
11066: LD_EXP 34
11070: PUSH
11071: LD_EXP 35
11075: PUSH
11076: LD_EXP 36
11080: PUSH
11081: LD_EXP 37
11085: PUSH
11086: LD_EXP 38
11090: PUSH
11091: LD_EXP 39
11095: PUSH
11096: LD_EXP 40
11100: PUSH
11101: LD_EXP 41
11105: PUSH
11106: LD_EXP 42
11110: PUSH
11111: LD_EXP 50
11115: PUSH
11116: LD_EXP 51
11120: PUSH
11121: LD_EXP 52
11125: PUSH
11126: LD_EXP 53
11130: PUSH
11131: LD_EXP 55
11135: PUSH
11136: LD_EXP 56
11140: PUSH
11141: LD_EXP 57
11145: PUSH
11146: LD_EXP 60
11150: PUSH
11151: LD_EXP 62
11155: PUSH
11156: LD_EXP 63
11160: PUSH
11161: LD_EXP 64
11165: PUSH
11166: LD_EXP 66
11170: PUSH
11171: LD_EXP 67
11175: PUSH
11176: LD_EXP 70
11180: PUSH
11181: LD_EXP 71
11185: PUSH
11186: LD_EXP 72
11190: PUSH
11191: LD_EXP 73
11195: PUSH
11196: LD_EXP 74
11200: PUSH
11201: LD_EXP 75
11205: PUSH
11206: LD_EXP 76
11210: PUSH
11211: LD_EXP 77
11215: PUSH
11216: LD_EXP 78
11220: PUSH
11221: LD_EXP 43
11225: PUSH
11226: LD_EXP 44
11230: PUSH
11231: LD_EXP 47
11235: PUSH
11236: LD_EXP 48
11240: PUSH
11241: LD_EXP 49
11245: PUSH
11246: LD_EXP 45
11250: PUSH
11251: LD_EXP 46
11255: PUSH
11256: LD_EXP 54
11260: PUSH
11261: LD_EXP 58
11265: PUSH
11266: LD_EXP 59
11270: PUSH
11271: LD_EXP 61
11275: PUSH
11276: LD_EXP 65
11280: PUSH
11281: LD_EXP 68
11285: PUSH
11286: LD_EXP 69
11290: PUSH
11291: LD_EXP 79
11295: PUSH
11296: LD_EXP 80
11300: PUSH
11301: LD_EXP 81
11305: PUSH
11306: LD_EXP 82
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: ST_TO_ADDR
// tmp :=  ;
11367: LD_ADDR_VAR 0 3
11371: PUSH
11372: LD_STRING 
11374: ST_TO_ADDR
// for i = 1 to normalCounter do
11375: LD_ADDR_VAR 0 8
11379: PUSH
11380: DOUBLE
11381: LD_INT 1
11383: DEC
11384: ST_TO_ADDR
11385: LD_EXP 27
11389: PUSH
11390: FOR_TO
11391: IFFALSE 11427
// begin if flags [ i ] then
11393: LD_VAR 0 4
11397: PUSH
11398: LD_VAR 0 8
11402: ARRAY
11403: IFFALSE 11425
// tmp := tmp & i & ; ;
11405: LD_ADDR_VAR 0 3
11409: PUSH
11410: LD_VAR 0 3
11414: PUSH
11415: LD_VAR 0 8
11419: STR
11420: PUSH
11421: LD_STRING ;
11423: STR
11424: ST_TO_ADDR
// end ;
11425: GO 11390
11427: POP
11428: POP
// for i = 1 to hardcoreCounter do
11429: LD_ADDR_VAR 0 8
11433: PUSH
11434: DOUBLE
11435: LD_INT 1
11437: DEC
11438: ST_TO_ADDR
11439: LD_EXP 28
11443: PUSH
11444: FOR_TO
11445: IFFALSE 11491
// begin if flags [ normalCounter + i ] then
11447: LD_VAR 0 4
11451: PUSH
11452: LD_EXP 27
11456: PUSH
11457: LD_VAR 0 8
11461: PLUS
11462: ARRAY
11463: IFFALSE 11489
// tmp := tmp & ( 100 + i ) & ; ;
11465: LD_ADDR_VAR 0 3
11469: PUSH
11470: LD_VAR 0 3
11474: PUSH
11475: LD_INT 100
11477: PUSH
11478: LD_VAR 0 8
11482: PLUS
11483: STR
11484: PUSH
11485: LD_STRING ;
11487: STR
11488: ST_TO_ADDR
// end ;
11489: GO 11444
11491: POP
11492: POP
// if tmp then
11493: LD_VAR 0 3
11497: IFFALSE 11509
// active := tmp ;
11499: LD_ADDR_VAR 0 7
11503: PUSH
11504: LD_VAR 0 3
11508: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11509: LD_STRING getStreamItemsFromMission("
11511: PUSH
11512: LD_VAR 0 5
11516: STR
11517: PUSH
11518: LD_STRING ","
11520: STR
11521: PUSH
11522: LD_VAR 0 6
11526: STR
11527: PUSH
11528: LD_STRING ","
11530: STR
11531: PUSH
11532: LD_VAR 0 7
11536: STR
11537: PUSH
11538: LD_STRING ")
11540: STR
11541: PPUSH
11542: CALL_OW 559
// end else
11546: GO 11555
// ToLua ( getStreamItemsFromMission("","","") ) ;
11548: LD_STRING getStreamItemsFromMission("","","")
11550: PPUSH
11551: CALL_OW 559
// end ;
11555: LD_VAR 0 2
11559: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11560: LD_EXP 26
11564: PUSH
11565: LD_EXP 31
11569: AND
11570: IFFALSE 11694
11572: GO 11574
11574: DISABLE
11575: LD_INT 0
11577: PPUSH
11578: PPUSH
// begin enable ;
11579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11580: LD_ADDR_VAR 0 2
11584: PUSH
11585: LD_INT 22
11587: PUSH
11588: LD_OWVAR 2
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 34
11602: PUSH
11603: LD_INT 7
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 34
11612: PUSH
11613: LD_INT 45
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 34
11622: PUSH
11623: LD_INT 28
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 34
11632: PUSH
11633: LD_INT 47
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PPUSH
11651: CALL_OW 69
11655: ST_TO_ADDR
// if not tmp then
11656: LD_VAR 0 2
11660: NOT
11661: IFFALSE 11665
// exit ;
11663: GO 11694
// for i in tmp do
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: LD_VAR 0 2
11674: PUSH
11675: FOR_IN
11676: IFFALSE 11692
// begin SetLives ( i , 0 ) ;
11678: LD_VAR 0 1
11682: PPUSH
11683: LD_INT 0
11685: PPUSH
11686: CALL_OW 234
// end ;
11690: GO 11675
11692: POP
11693: POP
// end ;
11694: PPOPN 2
11696: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11697: LD_EXP 26
11701: PUSH
11702: LD_EXP 32
11706: AND
11707: IFFALSE 11791
11709: GO 11711
11711: DISABLE
11712: LD_INT 0
11714: PPUSH
11715: PPUSH
// begin enable ;
11716: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_OWVAR 2
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 32
11736: PUSH
11737: LD_INT 3
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 69
11752: ST_TO_ADDR
// if not tmp then
11753: LD_VAR 0 2
11757: NOT
11758: IFFALSE 11762
// exit ;
11760: GO 11791
// for i in tmp do
11762: LD_ADDR_VAR 0 1
11766: PUSH
11767: LD_VAR 0 2
11771: PUSH
11772: FOR_IN
11773: IFFALSE 11789
// begin SetLives ( i , 0 ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: LD_INT 0
11782: PPUSH
11783: CALL_OW 234
// end ;
11787: GO 11772
11789: POP
11790: POP
// end ;
11791: PPOPN 2
11793: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11794: LD_EXP 26
11798: PUSH
11799: LD_EXP 29
11803: AND
11804: IFFALSE 11897
11806: GO 11808
11808: DISABLE
11809: LD_INT 0
11811: PPUSH
// begin enable ;
11812: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11813: LD_ADDR_VAR 0 1
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_OWVAR 2
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 2
11832: PUSH
11833: LD_INT 25
11835: PUSH
11836: LD_INT 5
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 25
11845: PUSH
11846: LD_INT 9
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 25
11855: PUSH
11856: LD_INT 8
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL_OW 69
11877: PUSH
11878: FOR_IN
11879: IFFALSE 11895
// begin SetClass ( i , 1 ) ;
11881: LD_VAR 0 1
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 336
// end ;
11893: GO 11878
11895: POP
11896: POP
// end ;
11897: PPOPN 1
11899: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11900: LD_EXP 26
11904: PUSH
11905: LD_EXP 30
11909: AND
11910: PUSH
11911: LD_OWVAR 65
11915: PUSH
11916: LD_INT 7
11918: LESS
11919: AND
11920: IFFALSE 11934
11922: GO 11924
11924: DISABLE
// begin enable ;
11925: ENABLE
// game_speed := 7 ;
11926: LD_ADDR_OWVAR 65
11930: PUSH
11931: LD_INT 7
11933: ST_TO_ADDR
// end ;
11934: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11935: LD_EXP 26
11939: PUSH
11940: LD_EXP 33
11944: AND
11945: IFFALSE 12147
11947: GO 11949
11949: DISABLE
11950: LD_INT 0
11952: PPUSH
11953: PPUSH
11954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11955: LD_ADDR_VAR 0 3
11959: PUSH
11960: LD_INT 81
11962: PUSH
11963: LD_OWVAR 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 21
11974: PUSH
11975: LD_INT 1
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL_OW 69
11990: ST_TO_ADDR
// if not tmp then
11991: LD_VAR 0 3
11995: NOT
11996: IFFALSE 12000
// exit ;
11998: GO 12147
// if tmp > 5 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 5
12007: GREATER
12008: IFFALSE 12020
// k := 5 else
12010: LD_ADDR_VAR 0 2
12014: PUSH
12015: LD_INT 5
12017: ST_TO_ADDR
12018: GO 12030
// k := tmp ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_VAR 0 3
12029: ST_TO_ADDR
// for i := 1 to k do
12030: LD_ADDR_VAR 0 1
12034: PUSH
12035: DOUBLE
12036: LD_INT 1
12038: DEC
12039: ST_TO_ADDR
12040: LD_VAR 0 2
12044: PUSH
12045: FOR_TO
12046: IFFALSE 12145
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12048: LD_VAR 0 3
12052: PUSH
12053: LD_VAR 0 1
12057: ARRAY
12058: PPUSH
12059: LD_VAR 0 1
12063: PUSH
12064: LD_INT 4
12066: MOD
12067: PUSH
12068: LD_INT 1
12070: PLUS
12071: PPUSH
12072: CALL_OW 259
12076: PUSH
12077: LD_INT 10
12079: LESS
12080: IFFALSE 12143
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12082: LD_VAR 0 3
12086: PUSH
12087: LD_VAR 0 1
12091: ARRAY
12092: PPUSH
12093: LD_VAR 0 1
12097: PUSH
12098: LD_INT 4
12100: MOD
12101: PUSH
12102: LD_INT 1
12104: PLUS
12105: PPUSH
12106: LD_VAR 0 3
12110: PUSH
12111: LD_VAR 0 1
12115: ARRAY
12116: PPUSH
12117: LD_VAR 0 1
12121: PUSH
12122: LD_INT 4
12124: MOD
12125: PUSH
12126: LD_INT 1
12128: PLUS
12129: PPUSH
12130: CALL_OW 259
12134: PUSH
12135: LD_INT 1
12137: PLUS
12138: PPUSH
12139: CALL_OW 237
12143: GO 12045
12145: POP
12146: POP
// end ;
12147: PPOPN 3
12149: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12150: LD_EXP 26
12154: PUSH
12155: LD_EXP 34
12159: AND
12160: IFFALSE 12180
12162: GO 12164
12164: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12165: LD_INT 4
12167: PPUSH
12168: LD_OWVAR 2
12172: PPUSH
12173: LD_INT 0
12175: PPUSH
12176: CALL_OW 324
12180: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12181: LD_EXP 26
12185: PUSH
12186: LD_EXP 63
12190: AND
12191: IFFALSE 12211
12193: GO 12195
12195: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12196: LD_INT 19
12198: PPUSH
12199: LD_OWVAR 2
12203: PPUSH
12204: LD_INT 0
12206: PPUSH
12207: CALL_OW 324
12211: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12212: LD_EXP 26
12216: PUSH
12217: LD_EXP 35
12221: AND
12222: IFFALSE 12324
12224: GO 12226
12226: DISABLE
12227: LD_INT 0
12229: PPUSH
12230: PPUSH
// begin enable ;
12231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_OWVAR 2
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: LD_INT 34
12254: PUSH
12255: LD_INT 11
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 34
12264: PUSH
12265: LD_INT 30
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PPUSH
12281: CALL_OW 69
12285: ST_TO_ADDR
// if not tmp then
12286: LD_VAR 0 2
12290: NOT
12291: IFFALSE 12295
// exit ;
12293: GO 12324
// for i in tmp do
12295: LD_ADDR_VAR 0 1
12299: PUSH
12300: LD_VAR 0 2
12304: PUSH
12305: FOR_IN
12306: IFFALSE 12322
// begin SetLives ( i , 0 ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: LD_INT 0
12315: PPUSH
12316: CALL_OW 234
// end ;
12320: GO 12305
12322: POP
12323: POP
// end ;
12324: PPOPN 2
12326: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12327: LD_EXP 26
12331: PUSH
12332: LD_EXP 36
12336: AND
12337: IFFALSE 12357
12339: GO 12341
12341: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12342: LD_INT 32
12344: PPUSH
12345: LD_OWVAR 2
12349: PPUSH
12350: LD_INT 0
12352: PPUSH
12353: CALL_OW 324
12357: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12358: LD_EXP 26
12362: PUSH
12363: LD_EXP 37
12367: AND
12368: IFFALSE 12549
12370: GO 12372
12372: DISABLE
12373: LD_INT 0
12375: PPUSH
12376: PPUSH
12377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12378: LD_ADDR_VAR 0 2
12382: PUSH
12383: LD_INT 22
12385: PUSH
12386: LD_OWVAR 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 33
12397: PUSH
12398: LD_INT 3
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: ST_TO_ADDR
// if not tmp then
12414: LD_VAR 0 2
12418: NOT
12419: IFFALSE 12423
// exit ;
12421: GO 12549
// side := 0 ;
12423: LD_ADDR_VAR 0 3
12427: PUSH
12428: LD_INT 0
12430: ST_TO_ADDR
// for i := 1 to 8 do
12431: LD_ADDR_VAR 0 1
12435: PUSH
12436: DOUBLE
12437: LD_INT 1
12439: DEC
12440: ST_TO_ADDR
12441: LD_INT 8
12443: PUSH
12444: FOR_TO
12445: IFFALSE 12493
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12447: LD_OWVAR 2
12451: PUSH
12452: LD_VAR 0 1
12456: NONEQUAL
12457: PUSH
12458: LD_OWVAR 2
12462: PPUSH
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL_OW 81
12472: PUSH
12473: LD_INT 2
12475: EQUAL
12476: AND
12477: IFFALSE 12491
// begin side := i ;
12479: LD_ADDR_VAR 0 3
12483: PUSH
12484: LD_VAR 0 1
12488: ST_TO_ADDR
// break ;
12489: GO 12493
// end ;
12491: GO 12444
12493: POP
12494: POP
// if not side then
12495: LD_VAR 0 3
12499: NOT
12500: IFFALSE 12504
// exit ;
12502: GO 12549
// for i := 1 to tmp do
12504: LD_ADDR_VAR 0 1
12508: PUSH
12509: DOUBLE
12510: LD_INT 1
12512: DEC
12513: ST_TO_ADDR
12514: LD_VAR 0 2
12518: PUSH
12519: FOR_TO
12520: IFFALSE 12547
// if Prob ( 60 ) then
12522: LD_INT 60
12524: PPUSH
12525: CALL_OW 13
12529: IFFALSE 12545
// SetSide ( i , side ) ;
12531: LD_VAR 0 1
12535: PPUSH
12536: LD_VAR 0 3
12540: PPUSH
12541: CALL_OW 235
12545: GO 12519
12547: POP
12548: POP
// end ;
12549: PPOPN 3
12551: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12552: LD_EXP 26
12556: PUSH
12557: LD_EXP 39
12561: AND
12562: IFFALSE 12681
12564: GO 12566
12566: DISABLE
12567: LD_INT 0
12569: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12570: LD_ADDR_VAR 0 1
12574: PUSH
12575: LD_INT 22
12577: PUSH
12578: LD_OWVAR 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 21
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: LD_INT 23
12602: PUSH
12603: LD_INT 0
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: PUSH
12624: FOR_IN
12625: IFFALSE 12679
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 257
12636: PUSH
12637: LD_INT 1
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: LD_INT 4
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: IN
12655: IFFALSE 12677
// SetClass ( un , rand ( 1 , 4 ) ) ;
12657: LD_VAR 0 1
12661: PPUSH
12662: LD_INT 1
12664: PPUSH
12665: LD_INT 4
12667: PPUSH
12668: CALL_OW 12
12672: PPUSH
12673: CALL_OW 336
12677: GO 12624
12679: POP
12680: POP
// end ;
12681: PPOPN 1
12683: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12684: LD_EXP 26
12688: PUSH
12689: LD_EXP 38
12693: AND
12694: IFFALSE 12773
12696: GO 12698
12698: DISABLE
12699: LD_INT 0
12701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12702: LD_ADDR_VAR 0 1
12706: PUSH
12707: LD_INT 22
12709: PUSH
12710: LD_OWVAR 2
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 3
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: ST_TO_ADDR
// if not tmp then
12738: LD_VAR 0 1
12742: NOT
12743: IFFALSE 12747
// exit ;
12745: GO 12773
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12747: LD_VAR 0 1
12751: PUSH
12752: LD_INT 1
12754: PPUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 12
12764: ARRAY
12765: PPUSH
12766: LD_INT 100
12768: PPUSH
12769: CALL_OW 234
// end ;
12773: PPOPN 1
12775: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12776: LD_EXP 26
12780: PUSH
12781: LD_EXP 40
12785: AND
12786: IFFALSE 12884
12788: GO 12790
12790: DISABLE
12791: LD_INT 0
12793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12794: LD_ADDR_VAR 0 1
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_OWVAR 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 21
12813: PUSH
12814: LD_INT 1
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PPUSH
12825: CALL_OW 69
12829: ST_TO_ADDR
// if not tmp then
12830: LD_VAR 0 1
12834: NOT
12835: IFFALSE 12839
// exit ;
12837: GO 12884
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12839: LD_VAR 0 1
12843: PUSH
12844: LD_INT 1
12846: PPUSH
12847: LD_VAR 0 1
12851: PPUSH
12852: CALL_OW 12
12856: ARRAY
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: LD_INT 4
12863: PPUSH
12864: CALL_OW 12
12868: PPUSH
12869: LD_INT 3000
12871: PPUSH
12872: LD_INT 9000
12874: PPUSH
12875: CALL_OW 12
12879: PPUSH
12880: CALL_OW 492
// end ;
12884: PPOPN 1
12886: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12887: LD_EXP 26
12891: PUSH
12892: LD_EXP 41
12896: AND
12897: IFFALSE 12917
12899: GO 12901
12901: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12902: LD_INT 1
12904: PPUSH
12905: LD_OWVAR 2
12909: PPUSH
12910: LD_INT 0
12912: PPUSH
12913: CALL_OW 324
12917: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12918: LD_EXP 26
12922: PUSH
12923: LD_EXP 42
12927: AND
12928: IFFALSE 13011
12930: GO 12932
12932: DISABLE
12933: LD_INT 0
12935: PPUSH
12936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12937: LD_ADDR_VAR 0 2
12941: PUSH
12942: LD_INT 22
12944: PUSH
12945: LD_OWVAR 2
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 21
12956: PUSH
12957: LD_INT 3
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PPUSH
12968: CALL_OW 69
12972: ST_TO_ADDR
// if not tmp then
12973: LD_VAR 0 2
12977: NOT
12978: IFFALSE 12982
// exit ;
12980: GO 13011
// for i in tmp do
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: LD_VAR 0 2
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13009
// SetBLevel ( i , 10 ) ;
12995: LD_VAR 0 1
12999: PPUSH
13000: LD_INT 10
13002: PPUSH
13003: CALL_OW 241
13007: GO 12992
13009: POP
13010: POP
// end ;
13011: PPOPN 2
13013: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13014: LD_EXP 26
13018: PUSH
13019: LD_EXP 43
13023: AND
13024: IFFALSE 13135
13026: GO 13028
13028: DISABLE
13029: LD_INT 0
13031: PPUSH
13032: PPUSH
13033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13034: LD_ADDR_VAR 0 3
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_OWVAR 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 25
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: ST_TO_ADDR
// if not tmp then
13070: LD_VAR 0 3
13074: NOT
13075: IFFALSE 13079
// exit ;
13077: GO 13135
// un := tmp [ rand ( 1 , tmp ) ] ;
13079: LD_ADDR_VAR 0 2
13083: PUSH
13084: LD_VAR 0 3
13088: PUSH
13089: LD_INT 1
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: CALL_OW 12
13101: ARRAY
13102: ST_TO_ADDR
// if Crawls ( un ) then
13103: LD_VAR 0 2
13107: PPUSH
13108: CALL_OW 318
13112: IFFALSE 13123
// ComWalk ( un ) ;
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13123: LD_VAR 0 2
13127: PPUSH
13128: LD_INT 5
13130: PPUSH
13131: CALL_OW 336
// end ;
13135: PPOPN 3
13137: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13138: LD_EXP 26
13142: PUSH
13143: LD_EXP 44
13147: AND
13148: PUSH
13149: LD_OWVAR 67
13153: PUSH
13154: LD_INT 4
13156: LESS
13157: AND
13158: IFFALSE 13177
13160: GO 13162
13162: DISABLE
// begin Difficulty := Difficulty + 1 ;
13163: LD_ADDR_OWVAR 67
13167: PUSH
13168: LD_OWVAR 67
13172: PUSH
13173: LD_INT 1
13175: PLUS
13176: ST_TO_ADDR
// end ;
13177: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13178: LD_EXP 26
13182: PUSH
13183: LD_EXP 45
13187: AND
13188: IFFALSE 13291
13190: GO 13192
13192: DISABLE
13193: LD_INT 0
13195: PPUSH
// begin for i := 1 to 5 do
13196: LD_ADDR_VAR 0 1
13200: PUSH
13201: DOUBLE
13202: LD_INT 1
13204: DEC
13205: ST_TO_ADDR
13206: LD_INT 5
13208: PUSH
13209: FOR_TO
13210: IFFALSE 13289
// begin uc_nation := nation_nature ;
13212: LD_ADDR_OWVAR 21
13216: PUSH
13217: LD_INT 0
13219: ST_TO_ADDR
// uc_side := 0 ;
13220: LD_ADDR_OWVAR 20
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13228: LD_ADDR_OWVAR 29
13232: PUSH
13233: LD_INT 12
13235: PUSH
13236: LD_INT 12
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
// hc_agressivity := 20 ;
13243: LD_ADDR_OWVAR 35
13247: PUSH
13248: LD_INT 20
13250: ST_TO_ADDR
// hc_class := class_tiger ;
13251: LD_ADDR_OWVAR 28
13255: PUSH
13256: LD_INT 14
13258: ST_TO_ADDR
// hc_gallery :=  ;
13259: LD_ADDR_OWVAR 33
13263: PUSH
13264: LD_STRING 
13266: ST_TO_ADDR
// hc_name :=  ;
13267: LD_ADDR_OWVAR 26
13271: PUSH
13272: LD_STRING 
13274: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13275: CALL_OW 44
13279: PPUSH
13280: LD_INT 0
13282: PPUSH
13283: CALL_OW 51
// end ;
13287: GO 13209
13289: POP
13290: POP
// end ;
13291: PPOPN 1
13293: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13294: LD_EXP 26
13298: PUSH
13299: LD_EXP 46
13303: AND
13304: IFFALSE 13313
13306: GO 13308
13308: DISABLE
// StreamSibBomb ;
13309: CALL 13314 0 0
13313: END
// export function StreamSibBomb ; var i , x , y ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
// result := false ;
13320: LD_ADDR_VAR 0 1
13324: PUSH
13325: LD_INT 0
13327: ST_TO_ADDR
// for i := 1 to 16 do
13328: LD_ADDR_VAR 0 2
13332: PUSH
13333: DOUBLE
13334: LD_INT 1
13336: DEC
13337: ST_TO_ADDR
13338: LD_INT 16
13340: PUSH
13341: FOR_TO
13342: IFFALSE 13541
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13344: LD_ADDR_VAR 0 3
13348: PUSH
13349: LD_INT 10
13351: PUSH
13352: LD_INT 20
13354: PUSH
13355: LD_INT 30
13357: PUSH
13358: LD_INT 40
13360: PUSH
13361: LD_INT 50
13363: PUSH
13364: LD_INT 60
13366: PUSH
13367: LD_INT 70
13369: PUSH
13370: LD_INT 80
13372: PUSH
13373: LD_INT 90
13375: PUSH
13376: LD_INT 100
13378: PUSH
13379: LD_INT 110
13381: PUSH
13382: LD_INT 120
13384: PUSH
13385: LD_INT 130
13387: PUSH
13388: LD_INT 140
13390: PUSH
13391: LD_INT 150
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 1
13413: PPUSH
13414: LD_INT 15
13416: PPUSH
13417: CALL_OW 12
13421: ARRAY
13422: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13423: LD_ADDR_VAR 0 4
13427: PUSH
13428: LD_INT 10
13430: PUSH
13431: LD_INT 20
13433: PUSH
13434: LD_INT 30
13436: PUSH
13437: LD_INT 40
13439: PUSH
13440: LD_INT 50
13442: PUSH
13443: LD_INT 60
13445: PUSH
13446: LD_INT 70
13448: PUSH
13449: LD_INT 80
13451: PUSH
13452: LD_INT 90
13454: PUSH
13455: LD_INT 100
13457: PUSH
13458: LD_INT 110
13460: PUSH
13461: LD_INT 120
13463: PUSH
13464: LD_INT 130
13466: PUSH
13467: LD_INT 140
13469: PUSH
13470: LD_INT 150
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 1
13492: PPUSH
13493: LD_INT 15
13495: PPUSH
13496: CALL_OW 12
13500: ARRAY
13501: ST_TO_ADDR
// if ValidHex ( x , y ) then
13502: LD_VAR 0 3
13506: PPUSH
13507: LD_VAR 0 4
13511: PPUSH
13512: CALL_OW 488
13516: IFFALSE 13539
// begin result := [ x , y ] ;
13518: LD_ADDR_VAR 0 1
13522: PUSH
13523: LD_VAR 0 3
13527: PUSH
13528: LD_VAR 0 4
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: ST_TO_ADDR
// break ;
13537: GO 13541
// end ; end ;
13539: GO 13341
13541: POP
13542: POP
// if result then
13543: LD_VAR 0 1
13547: IFFALSE 13607
// begin ToLua ( playSibBomb() ) ;
13549: LD_STRING playSibBomb()
13551: PPUSH
13552: CALL_OW 559
// wait ( 0 0$14 ) ;
13556: LD_INT 490
13558: PPUSH
13559: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13563: LD_VAR 0 1
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: PPUSH
13572: LD_VAR 0 1
13576: PUSH
13577: LD_INT 2
13579: ARRAY
13580: PPUSH
13581: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13585: LD_VAR 0 1
13589: PUSH
13590: LD_INT 1
13592: ARRAY
13593: PPUSH
13594: LD_VAR 0 1
13598: PUSH
13599: LD_INT 2
13601: ARRAY
13602: PPUSH
13603: CALL_OW 429
// end ; end ;
13607: LD_VAR 0 1
13611: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13612: LD_EXP 26
13616: PUSH
13617: LD_EXP 48
13621: AND
13622: IFFALSE 13634
13624: GO 13626
13626: DISABLE
// YouLost (  ) ;
13627: LD_STRING 
13629: PPUSH
13630: CALL_OW 104
13634: END
// every 0 0$1 trigger StreamModeActive and sFog do
13635: LD_EXP 26
13639: PUSH
13640: LD_EXP 47
13644: AND
13645: IFFALSE 13659
13647: GO 13649
13649: DISABLE
// FogOff ( your_side ) ;
13650: LD_OWVAR 2
13654: PPUSH
13655: CALL_OW 344
13659: END
// every 0 0$1 trigger StreamModeActive and sSun do
13660: LD_EXP 26
13664: PUSH
13665: LD_EXP 49
13669: AND
13670: IFFALSE 13698
13672: GO 13674
13674: DISABLE
// begin solar_recharge_percent := 0 ;
13675: LD_ADDR_OWVAR 79
13679: PUSH
13680: LD_INT 0
13682: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13683: LD_INT 10500
13685: PPUSH
13686: CALL_OW 67
// solar_recharge_percent := 100 ;
13690: LD_ADDR_OWVAR 79
13694: PUSH
13695: LD_INT 100
13697: ST_TO_ADDR
// end ;
13698: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13699: LD_EXP 26
13703: PUSH
13704: LD_EXP 50
13708: AND
13709: IFFALSE 13948
13711: GO 13713
13713: DISABLE
13714: LD_INT 0
13716: PPUSH
13717: PPUSH
13718: PPUSH
// begin tmp := [ ] ;
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: EMPTY
13725: ST_TO_ADDR
// for i := 1 to 6 do
13726: LD_ADDR_VAR 0 1
13730: PUSH
13731: DOUBLE
13732: LD_INT 1
13734: DEC
13735: ST_TO_ADDR
13736: LD_INT 6
13738: PUSH
13739: FOR_TO
13740: IFFALSE 13845
// begin uc_nation := nation_nature ;
13742: LD_ADDR_OWVAR 21
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// uc_side := 0 ;
13750: LD_ADDR_OWVAR 20
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13758: LD_ADDR_OWVAR 29
13762: PUSH
13763: LD_INT 12
13765: PUSH
13766: LD_INT 12
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: ST_TO_ADDR
// hc_agressivity := 20 ;
13773: LD_ADDR_OWVAR 35
13777: PUSH
13778: LD_INT 20
13780: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13781: LD_ADDR_OWVAR 28
13785: PUSH
13786: LD_INT 17
13788: ST_TO_ADDR
// hc_gallery :=  ;
13789: LD_ADDR_OWVAR 33
13793: PUSH
13794: LD_STRING 
13796: ST_TO_ADDR
// hc_name :=  ;
13797: LD_ADDR_OWVAR 26
13801: PUSH
13802: LD_STRING 
13804: ST_TO_ADDR
// un := CreateHuman ;
13805: LD_ADDR_VAR 0 2
13809: PUSH
13810: CALL_OW 44
13814: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13815: LD_VAR 0 2
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: CALL_OW 51
// tmp := tmp ^ un ;
13827: LD_ADDR_VAR 0 3
13831: PUSH
13832: LD_VAR 0 3
13836: PUSH
13837: LD_VAR 0 2
13841: ADD
13842: ST_TO_ADDR
// end ;
13843: GO 13739
13845: POP
13846: POP
// repeat wait ( 0 0$1 ) ;
13847: LD_INT 35
13849: PPUSH
13850: CALL_OW 67
// for un in tmp do
13854: LD_ADDR_VAR 0 2
13858: PUSH
13859: LD_VAR 0 3
13863: PUSH
13864: FOR_IN
13865: IFFALSE 13939
// begin if IsDead ( un ) then
13867: LD_VAR 0 2
13871: PPUSH
13872: CALL_OW 301
13876: IFFALSE 13896
// begin tmp := tmp diff un ;
13878: LD_ADDR_VAR 0 3
13882: PUSH
13883: LD_VAR 0 3
13887: PUSH
13888: LD_VAR 0 2
13892: DIFF
13893: ST_TO_ADDR
// continue ;
13894: GO 13864
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13896: LD_VAR 0 2
13900: PPUSH
13901: LD_INT 3
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 0
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PPUSH
13918: CALL_OW 69
13922: PPUSH
13923: LD_VAR 0 2
13927: PPUSH
13928: CALL_OW 74
13932: PPUSH
13933: CALL_OW 115
// end ;
13937: GO 13864
13939: POP
13940: POP
// until not tmp ;
13941: LD_VAR 0 3
13945: NOT
13946: IFFALSE 13847
// end ;
13948: PPOPN 3
13950: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13951: LD_EXP 26
13955: PUSH
13956: LD_EXP 51
13960: AND
13961: IFFALSE 14015
13963: GO 13965
13965: DISABLE
// begin ToLua ( displayTroll(); ) ;
13966: LD_STRING displayTroll();
13968: PPUSH
13969: CALL_OW 559
// wait ( 3 3$00 ) ;
13973: LD_INT 6300
13975: PPUSH
13976: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13980: LD_STRING hideTroll();
13982: PPUSH
13983: CALL_OW 559
// wait ( 1 1$00 ) ;
13987: LD_INT 2100
13989: PPUSH
13990: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13994: LD_STRING displayTroll();
13996: PPUSH
13997: CALL_OW 559
// wait ( 1 1$00 ) ;
14001: LD_INT 2100
14003: PPUSH
14004: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14008: LD_STRING hideTroll();
14010: PPUSH
14011: CALL_OW 559
// end ;
14015: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14016: LD_EXP 26
14020: PUSH
14021: LD_EXP 52
14025: AND
14026: IFFALSE 14089
14028: GO 14030
14030: DISABLE
14031: LD_INT 0
14033: PPUSH
// begin p := 0 ;
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: LD_INT 0
14041: ST_TO_ADDR
// repeat game_speed := 1 ;
14042: LD_ADDR_OWVAR 65
14046: PUSH
14047: LD_INT 1
14049: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14050: LD_INT 35
14052: PPUSH
14053: CALL_OW 67
// p := p + 1 ;
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: LD_VAR 0 1
14066: PUSH
14067: LD_INT 1
14069: PLUS
14070: ST_TO_ADDR
// until p >= 60 ;
14071: LD_VAR 0 1
14075: PUSH
14076: LD_INT 60
14078: GREATEREQUAL
14079: IFFALSE 14042
// game_speed := 4 ;
14081: LD_ADDR_OWVAR 65
14085: PUSH
14086: LD_INT 4
14088: ST_TO_ADDR
// end ;
14089: PPOPN 1
14091: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14092: LD_EXP 26
14096: PUSH
14097: LD_EXP 53
14101: AND
14102: IFFALSE 14248
14104: GO 14106
14106: DISABLE
14107: LD_INT 0
14109: PPUSH
14110: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14111: LD_ADDR_VAR 0 1
14115: PUSH
14116: LD_INT 22
14118: PUSH
14119: LD_OWVAR 2
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: LD_INT 30
14133: PUSH
14134: LD_INT 0
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 30
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 69
14164: ST_TO_ADDR
// if not depot then
14165: LD_VAR 0 1
14169: NOT
14170: IFFALSE 14174
// exit ;
14172: GO 14248
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14174: LD_ADDR_VAR 0 2
14178: PUSH
14179: LD_VAR 0 1
14183: PUSH
14184: LD_INT 1
14186: PPUSH
14187: LD_VAR 0 1
14191: PPUSH
14192: CALL_OW 12
14196: ARRAY
14197: PPUSH
14198: CALL_OW 274
14202: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14203: LD_VAR 0 2
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: LD_INT 0
14213: PPUSH
14214: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14218: LD_VAR 0 2
14222: PPUSH
14223: LD_INT 2
14225: PPUSH
14226: LD_INT 0
14228: PPUSH
14229: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_INT 3
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: CALL_OW 277
// end ;
14248: PPOPN 2
14250: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14251: LD_EXP 26
14255: PUSH
14256: LD_EXP 54
14260: AND
14261: IFFALSE 14358
14263: GO 14265
14265: DISABLE
14266: LD_INT 0
14268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14269: LD_ADDR_VAR 0 1
14273: PUSH
14274: LD_INT 22
14276: PUSH
14277: LD_OWVAR 2
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 1
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 3
14298: PUSH
14299: LD_INT 23
14301: PUSH
14302: LD_INT 0
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: PPUSH
14318: CALL_OW 69
14322: ST_TO_ADDR
// if not tmp then
14323: LD_VAR 0 1
14327: NOT
14328: IFFALSE 14332
// exit ;
14330: GO 14358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14332: LD_VAR 0 1
14336: PUSH
14337: LD_INT 1
14339: PPUSH
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 12
14349: ARRAY
14350: PPUSH
14351: LD_INT 200
14353: PPUSH
14354: CALL_OW 234
// end ;
14358: PPOPN 1
14360: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14361: LD_EXP 26
14365: PUSH
14366: LD_EXP 55
14370: AND
14371: IFFALSE 14450
14373: GO 14375
14375: DISABLE
14376: LD_INT 0
14378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: LD_INT 22
14386: PUSH
14387: LD_OWVAR 2
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 21
14398: PUSH
14399: LD_INT 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// if not tmp then
14415: LD_VAR 0 1
14419: NOT
14420: IFFALSE 14424
// exit ;
14422: GO 14450
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14424: LD_VAR 0 1
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 12
14441: ARRAY
14442: PPUSH
14443: LD_INT 60
14445: PPUSH
14446: CALL_OW 234
// end ;
14450: PPOPN 1
14452: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14453: LD_EXP 26
14457: PUSH
14458: LD_EXP 56
14462: AND
14463: IFFALSE 14562
14465: GO 14467
14467: DISABLE
14468: LD_INT 0
14470: PPUSH
14471: PPUSH
// begin enable ;
14472: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14473: LD_ADDR_VAR 0 1
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: LD_OWVAR 2
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 61
14492: PUSH
14493: EMPTY
14494: LIST
14495: PUSH
14496: LD_INT 33
14498: PUSH
14499: LD_INT 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 69
14515: ST_TO_ADDR
// if not tmp then
14516: LD_VAR 0 1
14520: NOT
14521: IFFALSE 14525
// exit ;
14523: GO 14562
// for i in tmp do
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 1
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14560
// if IsControledBy ( i ) then
14538: LD_VAR 0 2
14542: PPUSH
14543: CALL_OW 312
14547: IFFALSE 14558
// ComUnlink ( i ) ;
14549: LD_VAR 0 2
14553: PPUSH
14554: CALL_OW 136
14558: GO 14535
14560: POP
14561: POP
// end ;
14562: PPOPN 2
14564: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14565: LD_EXP 26
14569: PUSH
14570: LD_EXP 57
14574: AND
14575: IFFALSE 14715
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
// begin ToLua ( displayPowell(); ) ;
14584: LD_STRING displayPowell();
14586: PPUSH
14587: CALL_OW 559
// uc_side := 0 ;
14591: LD_ADDR_OWVAR 20
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// uc_nation := 2 ;
14599: LD_ADDR_OWVAR 21
14603: PUSH
14604: LD_INT 2
14606: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14607: LD_ADDR_OWVAR 37
14611: PUSH
14612: LD_INT 14
14614: ST_TO_ADDR
// vc_engine := engine_siberite ;
14615: LD_ADDR_OWVAR 39
14619: PUSH
14620: LD_INT 3
14622: ST_TO_ADDR
// vc_control := control_apeman ;
14623: LD_ADDR_OWVAR 38
14627: PUSH
14628: LD_INT 5
14630: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14631: LD_ADDR_OWVAR 40
14635: PUSH
14636: LD_INT 29
14638: ST_TO_ADDR
// un := CreateVehicle ;
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: CALL_OW 45
14648: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14649: LD_VAR 0 2
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14661: LD_INT 35
14663: PPUSH
14664: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14668: LD_VAR 0 2
14672: PPUSH
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PPUSH
14685: CALL_OW 69
14689: PPUSH
14690: LD_VAR 0 2
14694: PPUSH
14695: CALL_OW 74
14699: PPUSH
14700: CALL_OW 115
// until IsDead ( un ) ;
14704: LD_VAR 0 2
14708: PPUSH
14709: CALL_OW 301
14713: IFFALSE 14661
// end ;
14715: PPOPN 2
14717: END
// every 0 0$1 trigger StreamModeActive and sStu do
14718: LD_EXP 26
14722: PUSH
14723: LD_EXP 65
14727: AND
14728: IFFALSE 14744
14730: GO 14732
14732: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14733: LD_STRING displayStucuk();
14735: PPUSH
14736: CALL_OW 559
// ResetFog ;
14740: CALL_OW 335
// end ;
14744: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14745: LD_EXP 26
14749: PUSH
14750: LD_EXP 58
14754: AND
14755: IFFALSE 14896
14757: GO 14759
14759: DISABLE
14760: LD_INT 0
14762: PPUSH
14763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14764: LD_ADDR_VAR 0 2
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_OWVAR 2
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 21
14783: PUSH
14784: LD_INT 1
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PPUSH
14795: CALL_OW 69
14799: ST_TO_ADDR
// if not tmp then
14800: LD_VAR 0 2
14804: NOT
14805: IFFALSE 14809
// exit ;
14807: GO 14896
// un := tmp [ rand ( 1 , tmp ) ] ;
14809: LD_ADDR_VAR 0 1
14813: PUSH
14814: LD_VAR 0 2
14818: PUSH
14819: LD_INT 1
14821: PPUSH
14822: LD_VAR 0 2
14826: PPUSH
14827: CALL_OW 12
14831: ARRAY
14832: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14833: LD_VAR 0 1
14837: PPUSH
14838: LD_INT 0
14840: PPUSH
14841: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_OWVAR 3
14854: PUSH
14855: LD_VAR 0 1
14859: DIFF
14860: PPUSH
14861: LD_VAR 0 1
14865: PPUSH
14866: CALL_OW 74
14870: PPUSH
14871: CALL_OW 115
// wait ( 0 0$20 ) ;
14875: LD_INT 700
14877: PPUSH
14878: CALL_OW 67
// SetSide ( un , your_side ) ;
14882: LD_VAR 0 1
14886: PPUSH
14887: LD_OWVAR 2
14891: PPUSH
14892: CALL_OW 235
// end ;
14896: PPOPN 2
14898: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14899: LD_EXP 26
14903: PUSH
14904: LD_EXP 59
14908: AND
14909: IFFALSE 15015
14911: GO 14913
14913: DISABLE
14914: LD_INT 0
14916: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14917: LD_ADDR_VAR 0 1
14921: PUSH
14922: LD_INT 22
14924: PUSH
14925: LD_OWVAR 2
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 2
14936: PUSH
14937: LD_INT 30
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 30
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PPUSH
14966: CALL_OW 69
14970: ST_TO_ADDR
// if not depot then
14971: LD_VAR 0 1
14975: NOT
14976: IFFALSE 14980
// exit ;
14978: GO 15015
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14980: LD_VAR 0 1
14984: PUSH
14985: LD_INT 1
14987: ARRAY
14988: PPUSH
14989: CALL_OW 250
14993: PPUSH
14994: LD_VAR 0 1
14998: PUSH
14999: LD_INT 1
15001: ARRAY
15002: PPUSH
15003: CALL_OW 251
15007: PPUSH
15008: LD_INT 70
15010: PPUSH
15011: CALL_OW 495
// end ;
15015: PPOPN 1
15017: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15018: LD_EXP 26
15022: PUSH
15023: LD_EXP 60
15027: AND
15028: IFFALSE 15239
15030: GO 15032
15032: DISABLE
15033: LD_INT 0
15035: PPUSH
15036: PPUSH
15037: PPUSH
15038: PPUSH
15039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15040: LD_ADDR_VAR 0 5
15044: PUSH
15045: LD_INT 22
15047: PUSH
15048: LD_OWVAR 2
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PPUSH
15071: CALL_OW 69
15075: ST_TO_ADDR
// if not tmp then
15076: LD_VAR 0 5
15080: NOT
15081: IFFALSE 15085
// exit ;
15083: GO 15239
// for i in tmp do
15085: LD_ADDR_VAR 0 1
15089: PUSH
15090: LD_VAR 0 5
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15237
// begin d := rand ( 0 , 5 ) ;
15098: LD_ADDR_VAR 0 4
15102: PUSH
15103: LD_INT 0
15105: PPUSH
15106: LD_INT 5
15108: PPUSH
15109: CALL_OW 12
15113: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: CALL_OW 250
15128: PPUSH
15129: LD_VAR 0 4
15133: PPUSH
15134: LD_INT 3
15136: PPUSH
15137: LD_INT 12
15139: PPUSH
15140: CALL_OW 12
15144: PPUSH
15145: CALL_OW 272
15149: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15150: LD_ADDR_VAR 0 3
15154: PUSH
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 251
15164: PPUSH
15165: LD_VAR 0 4
15169: PPUSH
15170: LD_INT 3
15172: PPUSH
15173: LD_INT 12
15175: PPUSH
15176: CALL_OW 12
15180: PPUSH
15181: CALL_OW 273
15185: ST_TO_ADDR
// if ValidHex ( x , y ) then
15186: LD_VAR 0 2
15190: PPUSH
15191: LD_VAR 0 3
15195: PPUSH
15196: CALL_OW 488
15200: IFFALSE 15235
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_VAR 0 2
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: LD_INT 3
15219: PPUSH
15220: LD_INT 6
15222: PPUSH
15223: CALL_OW 12
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: CALL_OW 483
// end ;
15235: GO 15095
15237: POP
15238: POP
// end ;
15239: PPOPN 5
15241: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15242: LD_EXP 26
15246: PUSH
15247: LD_EXP 61
15251: AND
15252: IFFALSE 15346
15254: GO 15256
15256: DISABLE
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15261: LD_ADDR_VAR 0 2
15265: PUSH
15266: LD_INT 22
15268: PUSH
15269: LD_OWVAR 2
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 32
15280: PUSH
15281: LD_INT 1
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 21
15290: PUSH
15291: LD_INT 2
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: PPUSH
15303: CALL_OW 69
15307: ST_TO_ADDR
// if not tmp then
15308: LD_VAR 0 2
15312: NOT
15313: IFFALSE 15317
// exit ;
15315: GO 15346
// for i in tmp do
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: LD_VAR 0 2
15326: PUSH
15327: FOR_IN
15328: IFFALSE 15344
// SetFuel ( i , 0 ) ;
15330: LD_VAR 0 1
15334: PPUSH
15335: LD_INT 0
15337: PPUSH
15338: CALL_OW 240
15342: GO 15327
15344: POP
15345: POP
// end ;
15346: PPOPN 2
15348: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15349: LD_EXP 26
15353: PUSH
15354: LD_EXP 62
15358: AND
15359: IFFALSE 15425
15361: GO 15363
15363: DISABLE
15364: LD_INT 0
15366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15367: LD_ADDR_VAR 0 1
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_OWVAR 2
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: LD_INT 29
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: ST_TO_ADDR
// if not tmp then
15403: LD_VAR 0 1
15407: NOT
15408: IFFALSE 15412
// exit ;
15410: GO 15425
// DestroyUnit ( tmp [ 1 ] ) ;
15412: LD_VAR 0 1
15416: PUSH
15417: LD_INT 1
15419: ARRAY
15420: PPUSH
15421: CALL_OW 65
// end ;
15425: PPOPN 1
15427: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15428: LD_EXP 26
15432: PUSH
15433: LD_EXP 64
15437: AND
15438: IFFALSE 15567
15440: GO 15442
15442: DISABLE
15443: LD_INT 0
15445: PPUSH
// begin uc_side := 0 ;
15446: LD_ADDR_OWVAR 20
15450: PUSH
15451: LD_INT 0
15453: ST_TO_ADDR
// uc_nation := nation_arabian ;
15454: LD_ADDR_OWVAR 21
15458: PUSH
15459: LD_INT 2
15461: ST_TO_ADDR
// hc_gallery :=  ;
15462: LD_ADDR_OWVAR 33
15466: PUSH
15467: LD_STRING 
15469: ST_TO_ADDR
// hc_name :=  ;
15470: LD_ADDR_OWVAR 26
15474: PUSH
15475: LD_STRING 
15477: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15478: LD_INT 1
15480: PPUSH
15481: LD_INT 11
15483: PPUSH
15484: LD_INT 10
15486: PPUSH
15487: CALL_OW 380
// un := CreateHuman ;
15491: LD_ADDR_VAR 0 1
15495: PUSH
15496: CALL_OW 44
15500: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15501: LD_VAR 0 1
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15513: LD_INT 35
15515: PPUSH
15516: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15520: LD_VAR 0 1
15524: PPUSH
15525: LD_INT 22
15527: PUSH
15528: LD_OWVAR 2
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: PPUSH
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL_OW 74
15551: PPUSH
15552: CALL_OW 115
// until IsDead ( un ) ;
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 301
15565: IFFALSE 15513
// end ;
15567: PPOPN 1
15569: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15570: LD_EXP 26
15574: PUSH
15575: LD_EXP 66
15579: AND
15580: IFFALSE 15592
15582: GO 15584
15584: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15585: LD_STRING earthquake(getX(game), 0, 32)
15587: PPUSH
15588: CALL_OW 559
15592: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15593: LD_EXP 26
15597: PUSH
15598: LD_EXP 67
15602: AND
15603: IFFALSE 15694
15605: GO 15607
15607: DISABLE
15608: LD_INT 0
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15612: LD_ADDR_VAR 0 1
15616: PUSH
15617: LD_INT 22
15619: PUSH
15620: LD_OWVAR 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 21
15631: PUSH
15632: LD_INT 2
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 33
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: ST_TO_ADDR
// if not tmp then
15659: LD_VAR 0 1
15663: NOT
15664: IFFALSE 15668
// exit ;
15666: GO 15694
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15668: LD_VAR 0 1
15672: PUSH
15673: LD_INT 1
15675: PPUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 12
15685: ARRAY
15686: PPUSH
15687: LD_INT 1
15689: PPUSH
15690: CALL_OW 234
// end ;
15694: PPOPN 1
15696: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15697: LD_EXP 26
15701: PUSH
15702: LD_EXP 68
15706: AND
15707: IFFALSE 15848
15709: GO 15711
15711: DISABLE
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
15716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15717: LD_ADDR_VAR 0 3
15721: PUSH
15722: LD_INT 22
15724: PUSH
15725: LD_OWVAR 2
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 25
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PPUSH
15748: CALL_OW 69
15752: ST_TO_ADDR
// if not tmp then
15753: LD_VAR 0 3
15757: NOT
15758: IFFALSE 15762
// exit ;
15760: GO 15848
// un := tmp [ rand ( 1 , tmp ) ] ;
15762: LD_ADDR_VAR 0 2
15766: PUSH
15767: LD_VAR 0 3
15771: PUSH
15772: LD_INT 1
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: CALL_OW 12
15784: ARRAY
15785: ST_TO_ADDR
// if Crawls ( un ) then
15786: LD_VAR 0 2
15790: PPUSH
15791: CALL_OW 318
15795: IFFALSE 15806
// ComWalk ( un ) ;
15797: LD_VAR 0 2
15801: PPUSH
15802: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15806: LD_VAR 0 2
15810: PPUSH
15811: LD_INT 9
15813: PPUSH
15814: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15818: LD_INT 28
15820: PPUSH
15821: LD_OWVAR 2
15825: PPUSH
15826: LD_INT 2
15828: PPUSH
15829: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15833: LD_INT 29
15835: PPUSH
15836: LD_OWVAR 2
15840: PPUSH
15841: LD_INT 2
15843: PPUSH
15844: CALL_OW 322
// end ;
15848: PPOPN 3
15850: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15851: LD_EXP 26
15855: PUSH
15856: LD_EXP 69
15860: AND
15861: IFFALSE 15972
15863: GO 15865
15865: DISABLE
15866: LD_INT 0
15868: PPUSH
15869: PPUSH
15870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_OWVAR 2
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 25
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PPUSH
15902: CALL_OW 69
15906: ST_TO_ADDR
// if not tmp then
15907: LD_VAR 0 3
15911: NOT
15912: IFFALSE 15916
// exit ;
15914: GO 15972
// un := tmp [ rand ( 1 , tmp ) ] ;
15916: LD_ADDR_VAR 0 2
15920: PUSH
15921: LD_VAR 0 3
15925: PUSH
15926: LD_INT 1
15928: PPUSH
15929: LD_VAR 0 3
15933: PPUSH
15934: CALL_OW 12
15938: ARRAY
15939: ST_TO_ADDR
// if Crawls ( un ) then
15940: LD_VAR 0 2
15944: PPUSH
15945: CALL_OW 318
15949: IFFALSE 15960
// ComWalk ( un ) ;
15951: LD_VAR 0 2
15955: PPUSH
15956: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15960: LD_VAR 0 2
15964: PPUSH
15965: LD_INT 8
15967: PPUSH
15968: CALL_OW 336
// end ;
15972: PPOPN 3
15974: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15975: LD_EXP 26
15979: PUSH
15980: LD_EXP 70
15984: AND
15985: IFFALSE 16129
15987: GO 15989
15989: DISABLE
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: LD_INT 22
16001: PUSH
16002: LD_OWVAR 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 21
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: LD_INT 34
16026: PUSH
16027: LD_INT 12
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 34
16036: PUSH
16037: LD_INT 51
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 34
16046: PUSH
16047: LD_INT 32
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: PPUSH
16065: CALL_OW 69
16069: ST_TO_ADDR
// if not tmp then
16070: LD_VAR 0 2
16074: NOT
16075: IFFALSE 16079
// exit ;
16077: GO 16129
// for i in tmp do
16079: LD_ADDR_VAR 0 1
16083: PUSH
16084: LD_VAR 0 2
16088: PUSH
16089: FOR_IN
16090: IFFALSE 16127
// if GetCargo ( i , mat_artifact ) = 0 then
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 4
16099: PPUSH
16100: CALL_OW 289
16104: PUSH
16105: LD_INT 0
16107: EQUAL
16108: IFFALSE 16125
// SetCargo ( i , mat_siberit , 100 ) ;
16110: LD_VAR 0 1
16114: PPUSH
16115: LD_INT 3
16117: PPUSH
16118: LD_INT 100
16120: PPUSH
16121: CALL_OW 290
16125: GO 16089
16127: POP
16128: POP
// end ;
16129: PPOPN 2
16131: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16132: LD_EXP 26
16136: PUSH
16137: LD_EXP 71
16141: AND
16142: IFFALSE 16325
16144: GO 16146
16146: DISABLE
16147: LD_INT 0
16149: PPUSH
16150: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16151: LD_ADDR_VAR 0 2
16155: PUSH
16156: LD_INT 22
16158: PUSH
16159: LD_OWVAR 2
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 69
16172: ST_TO_ADDR
// if not tmp then
16173: LD_VAR 0 2
16177: NOT
16178: IFFALSE 16182
// exit ;
16180: GO 16325
// for i := 1 to 2 do
16182: LD_ADDR_VAR 0 1
16186: PUSH
16187: DOUBLE
16188: LD_INT 1
16190: DEC
16191: ST_TO_ADDR
16192: LD_INT 2
16194: PUSH
16195: FOR_TO
16196: IFFALSE 16323
// begin uc_side := your_side ;
16198: LD_ADDR_OWVAR 20
16202: PUSH
16203: LD_OWVAR 2
16207: ST_TO_ADDR
// uc_nation := nation_american ;
16208: LD_ADDR_OWVAR 21
16212: PUSH
16213: LD_INT 1
16215: ST_TO_ADDR
// vc_chassis := us_morphling ;
16216: LD_ADDR_OWVAR 37
16220: PUSH
16221: LD_INT 5
16223: ST_TO_ADDR
// vc_engine := engine_siberite ;
16224: LD_ADDR_OWVAR 39
16228: PUSH
16229: LD_INT 3
16231: ST_TO_ADDR
// vc_control := control_computer ;
16232: LD_ADDR_OWVAR 38
16236: PUSH
16237: LD_INT 3
16239: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16240: LD_ADDR_OWVAR 40
16244: PUSH
16245: LD_INT 10
16247: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16248: LD_VAR 0 2
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: CALL_OW 310
16261: NOT
16262: IFFALSE 16309
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16264: CALL_OW 45
16268: PPUSH
16269: LD_VAR 0 2
16273: PUSH
16274: LD_INT 1
16276: ARRAY
16277: PPUSH
16278: CALL_OW 250
16282: PPUSH
16283: LD_VAR 0 2
16287: PUSH
16288: LD_INT 1
16290: ARRAY
16291: PPUSH
16292: CALL_OW 251
16296: PPUSH
16297: LD_INT 12
16299: PPUSH
16300: LD_INT 1
16302: PPUSH
16303: CALL_OW 50
16307: GO 16321
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16309: CALL_OW 45
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 51
// end ;
16321: GO 16195
16323: POP
16324: POP
// end ;
16325: PPOPN 2
16327: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16328: LD_EXP 26
16332: PUSH
16333: LD_EXP 72
16337: AND
16338: IFFALSE 16560
16340: GO 16342
16342: DISABLE
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
16347: PPUSH
16348: PPUSH
16349: PPUSH
16350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16351: LD_ADDR_VAR 0 6
16355: PUSH
16356: LD_INT 22
16358: PUSH
16359: LD_OWVAR 2
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 21
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 3
16380: PUSH
16381: LD_INT 23
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: PPUSH
16400: CALL_OW 69
16404: ST_TO_ADDR
// if not tmp then
16405: LD_VAR 0 6
16409: NOT
16410: IFFALSE 16414
// exit ;
16412: GO 16560
// s1 := rand ( 1 , 4 ) ;
16414: LD_ADDR_VAR 0 2
16418: PUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 4
16424: PPUSH
16425: CALL_OW 12
16429: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16430: LD_ADDR_VAR 0 4
16434: PUSH
16435: LD_VAR 0 6
16439: PUSH
16440: LD_INT 1
16442: ARRAY
16443: PPUSH
16444: LD_VAR 0 2
16448: PPUSH
16449: CALL_OW 259
16453: ST_TO_ADDR
// if s1 = 1 then
16454: LD_VAR 0 2
16458: PUSH
16459: LD_INT 1
16461: EQUAL
16462: IFFALSE 16482
// s2 := rand ( 2 , 4 ) else
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_INT 2
16471: PPUSH
16472: LD_INT 4
16474: PPUSH
16475: CALL_OW 12
16479: ST_TO_ADDR
16480: GO 16490
// s2 := 1 ;
16482: LD_ADDR_VAR 0 3
16486: PUSH
16487: LD_INT 1
16489: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16490: LD_ADDR_VAR 0 5
16494: PUSH
16495: LD_VAR 0 6
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: CALL_OW 259
16513: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16514: LD_VAR 0 6
16518: PUSH
16519: LD_INT 1
16521: ARRAY
16522: PPUSH
16523: LD_VAR 0 2
16527: PPUSH
16528: LD_VAR 0 5
16532: PPUSH
16533: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16537: LD_VAR 0 6
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: PPUSH
16546: LD_VAR 0 3
16550: PPUSH
16551: LD_VAR 0 4
16555: PPUSH
16556: CALL_OW 237
// end ;
16560: PPOPN 6
16562: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16563: LD_EXP 26
16567: PUSH
16568: LD_EXP 73
16572: AND
16573: IFFALSE 16652
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16581: LD_ADDR_VAR 0 1
16585: PUSH
16586: LD_INT 22
16588: PUSH
16589: LD_OWVAR 2
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 30
16600: PUSH
16601: LD_INT 3
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: ST_TO_ADDR
// if not tmp then
16617: LD_VAR 0 1
16621: NOT
16622: IFFALSE 16626
// exit ;
16624: GO 16652
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16626: LD_VAR 0 1
16630: PUSH
16631: LD_INT 1
16633: PPUSH
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL_OW 12
16643: ARRAY
16644: PPUSH
16645: LD_INT 1
16647: PPUSH
16648: CALL_OW 234
// end ;
16652: PPOPN 1
16654: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16655: LD_EXP 26
16659: PUSH
16660: LD_EXP 74
16664: AND
16665: IFFALSE 16777
16667: GO 16669
16669: DISABLE
16670: LD_INT 0
16672: PPUSH
16673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16674: LD_ADDR_VAR 0 2
16678: PUSH
16679: LD_INT 22
16681: PUSH
16682: LD_OWVAR 2
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 2
16693: PUSH
16694: LD_INT 30
16696: PUSH
16697: LD_INT 27
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 30
16706: PUSH
16707: LD_INT 26
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 30
16716: PUSH
16717: LD_INT 28
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 69
16738: ST_TO_ADDR
// if not tmp then
16739: LD_VAR 0 2
16743: NOT
16744: IFFALSE 16748
// exit ;
16746: GO 16777
// for i in tmp do
16748: LD_ADDR_VAR 0 1
16752: PUSH
16753: LD_VAR 0 2
16757: PUSH
16758: FOR_IN
16759: IFFALSE 16775
// SetLives ( i , 1 ) ;
16761: LD_VAR 0 1
16765: PPUSH
16766: LD_INT 1
16768: PPUSH
16769: CALL_OW 234
16773: GO 16758
16775: POP
16776: POP
// end ;
16777: PPOPN 2
16779: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16780: LD_EXP 26
16784: PUSH
16785: LD_EXP 75
16789: AND
16790: IFFALSE 17077
16792: GO 16794
16794: DISABLE
16795: LD_INT 0
16797: PPUSH
16798: PPUSH
16799: PPUSH
// begin i := rand ( 1 , 7 ) ;
16800: LD_ADDR_VAR 0 1
16804: PUSH
16805: LD_INT 1
16807: PPUSH
16808: LD_INT 7
16810: PPUSH
16811: CALL_OW 12
16815: ST_TO_ADDR
// case i of 1 :
16816: LD_VAR 0 1
16820: PUSH
16821: LD_INT 1
16823: DOUBLE
16824: EQUAL
16825: IFTRUE 16829
16827: GO 16839
16829: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16830: LD_STRING earthquake(getX(game), 0, 32)
16832: PPUSH
16833: CALL_OW 559
16837: GO 17077
16839: LD_INT 2
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16861
16847: POP
// begin ToLua ( displayStucuk(); ) ;
16848: LD_STRING displayStucuk();
16850: PPUSH
16851: CALL_OW 559
// ResetFog ;
16855: CALL_OW 335
// end ; 3 :
16859: GO 17077
16861: LD_INT 3
16863: DOUBLE
16864: EQUAL
16865: IFTRUE 16869
16867: GO 16973
16869: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16870: LD_ADDR_VAR 0 2
16874: PUSH
16875: LD_INT 22
16877: PUSH
16878: LD_OWVAR 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 25
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 69
16905: ST_TO_ADDR
// if not tmp then
16906: LD_VAR 0 2
16910: NOT
16911: IFFALSE 16915
// exit ;
16913: GO 17077
// un := tmp [ rand ( 1 , tmp ) ] ;
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: LD_VAR 0 2
16924: PUSH
16925: LD_INT 1
16927: PPUSH
16928: LD_VAR 0 2
16932: PPUSH
16933: CALL_OW 12
16937: ARRAY
16938: ST_TO_ADDR
// if Crawls ( un ) then
16939: LD_VAR 0 3
16943: PPUSH
16944: CALL_OW 318
16948: IFFALSE 16959
// ComWalk ( un ) ;
16950: LD_VAR 0 3
16954: PPUSH
16955: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16959: LD_VAR 0 3
16963: PPUSH
16964: LD_INT 8
16966: PPUSH
16967: CALL_OW 336
// end ; 4 :
16971: GO 17077
16973: LD_INT 4
16975: DOUBLE
16976: EQUAL
16977: IFTRUE 16981
16979: GO 17055
16981: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16982: LD_ADDR_VAR 0 2
16986: PUSH
16987: LD_INT 22
16989: PUSH
16990: LD_OWVAR 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 30
17001: PUSH
17002: LD_INT 29
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 69
17017: ST_TO_ADDR
// if not tmp then
17018: LD_VAR 0 2
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17077
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17027: LD_VAR 0 2
17031: PUSH
17032: LD_INT 1
17034: ARRAY
17035: PPUSH
17036: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17040: LD_VAR 0 2
17044: PUSH
17045: LD_INT 1
17047: ARRAY
17048: PPUSH
17049: CALL_OW 65
// end ; 5 .. 7 :
17053: GO 17077
17055: LD_INT 5
17057: DOUBLE
17058: GREATEREQUAL
17059: IFFALSE 17067
17061: LD_INT 7
17063: DOUBLE
17064: LESSEQUAL
17065: IFTRUE 17069
17067: GO 17076
17069: POP
// StreamSibBomb ; end ;
17070: CALL 13314 0 0
17074: GO 17077
17076: POP
// end ;
17077: PPOPN 3
17079: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17080: LD_EXP 26
17084: PUSH
17085: LD_EXP 76
17089: AND
17090: IFFALSE 17246
17092: GO 17094
17094: DISABLE
17095: LD_INT 0
17097: PPUSH
17098: PPUSH
17099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 81
17107: PUSH
17108: LD_OWVAR 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: LD_INT 21
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 21
17132: PUSH
17133: LD_INT 2
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PPUSH
17149: CALL_OW 69
17153: ST_TO_ADDR
// if not tmp then
17154: LD_VAR 0 2
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17246
// p := 0 ;
17163: LD_ADDR_VAR 0 3
17167: PUSH
17168: LD_INT 0
17170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17171: LD_INT 35
17173: PPUSH
17174: CALL_OW 67
// p := p + 1 ;
17178: LD_ADDR_VAR 0 3
17182: PUSH
17183: LD_VAR 0 3
17187: PUSH
17188: LD_INT 1
17190: PLUS
17191: ST_TO_ADDR
// for i in tmp do
17192: LD_ADDR_VAR 0 1
17196: PUSH
17197: LD_VAR 0 2
17201: PUSH
17202: FOR_IN
17203: IFFALSE 17234
// if GetLives ( i ) < 1000 then
17205: LD_VAR 0 1
17209: PPUSH
17210: CALL_OW 256
17214: PUSH
17215: LD_INT 1000
17217: LESS
17218: IFFALSE 17232
// SetLives ( i , 1000 ) ;
17220: LD_VAR 0 1
17224: PPUSH
17225: LD_INT 1000
17227: PPUSH
17228: CALL_OW 234
17232: GO 17202
17234: POP
17235: POP
// until p > 20 ;
17236: LD_VAR 0 3
17240: PUSH
17241: LD_INT 20
17243: GREATER
17244: IFFALSE 17171
// end ;
17246: PPOPN 3
17248: END
// every 0 0$1 trigger StreamModeActive and sTime do
17249: LD_EXP 26
17253: PUSH
17254: LD_EXP 77
17258: AND
17259: IFFALSE 17294
17261: GO 17263
17263: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17264: LD_INT 28
17266: PPUSH
17267: LD_OWVAR 2
17271: PPUSH
17272: LD_INT 2
17274: PPUSH
17275: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17279: LD_INT 30
17281: PPUSH
17282: LD_OWVAR 2
17286: PPUSH
17287: LD_INT 2
17289: PPUSH
17290: CALL_OW 322
// end ;
17294: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17295: LD_EXP 26
17299: PUSH
17300: LD_EXP 78
17304: AND
17305: IFFALSE 17426
17307: GO 17309
17309: DISABLE
17310: LD_INT 0
17312: PPUSH
17313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_OWVAR 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 3
17343: PUSH
17344: LD_INT 23
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: PPUSH
17363: CALL_OW 69
17367: ST_TO_ADDR
// if not tmp then
17368: LD_VAR 0 2
17372: NOT
17373: IFFALSE 17377
// exit ;
17375: GO 17426
// for i in tmp do
17377: LD_ADDR_VAR 0 1
17381: PUSH
17382: LD_VAR 0 2
17386: PUSH
17387: FOR_IN
17388: IFFALSE 17424
// begin if Crawls ( i ) then
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 318
17399: IFFALSE 17410
// ComWalk ( i ) ;
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 138
// SetClass ( i , 2 ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_INT 2
17417: PPUSH
17418: CALL_OW 336
// end ;
17422: GO 17387
17424: POP
17425: POP
// end ;
17426: PPOPN 2
17428: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17429: LD_EXP 26
17433: PUSH
17434: LD_EXP 79
17438: AND
17439: IFFALSE 17727
17441: GO 17443
17443: DISABLE
17444: LD_INT 0
17446: PPUSH
17447: PPUSH
17448: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17449: LD_OWVAR 2
17453: PPUSH
17454: LD_INT 9
17456: PPUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17467: LD_INT 9
17469: PPUSH
17470: LD_OWVAR 2
17474: PPUSH
17475: CALL_OW 343
// uc_side := 9 ;
17479: LD_ADDR_OWVAR 20
17483: PUSH
17484: LD_INT 9
17486: ST_TO_ADDR
// uc_nation := 2 ;
17487: LD_ADDR_OWVAR 21
17491: PUSH
17492: LD_INT 2
17494: ST_TO_ADDR
// hc_name := Dark Warrior ;
17495: LD_ADDR_OWVAR 26
17499: PUSH
17500: LD_STRING Dark Warrior
17502: ST_TO_ADDR
// hc_gallery :=  ;
17503: LD_ADDR_OWVAR 33
17507: PUSH
17508: LD_STRING 
17510: ST_TO_ADDR
// hc_noskilllimit := true ;
17511: LD_ADDR_OWVAR 76
17515: PUSH
17516: LD_INT 1
17518: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17519: LD_ADDR_OWVAR 31
17523: PUSH
17524: LD_INT 30
17526: PUSH
17527: LD_INT 30
17529: PUSH
17530: LD_INT 30
17532: PUSH
17533: LD_INT 30
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: ST_TO_ADDR
// un := CreateHuman ;
17542: LD_ADDR_VAR 0 3
17546: PUSH
17547: CALL_OW 44
17551: ST_TO_ADDR
// hc_noskilllimit := false ;
17552: LD_ADDR_OWVAR 76
17556: PUSH
17557: LD_INT 0
17559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17560: LD_VAR 0 3
17564: PPUSH
17565: LD_INT 1
17567: PPUSH
17568: CALL_OW 51
// ToLua ( playRanger() ) ;
17572: LD_STRING playRanger()
17574: PPUSH
17575: CALL_OW 559
// p := 0 ;
17579: LD_ADDR_VAR 0 2
17583: PUSH
17584: LD_INT 0
17586: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// p := p + 1 ;
17594: LD_ADDR_VAR 0 2
17598: PUSH
17599: LD_VAR 0 2
17603: PUSH
17604: LD_INT 1
17606: PLUS
17607: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17608: LD_VAR 0 3
17612: PPUSH
17613: CALL_OW 256
17617: PUSH
17618: LD_INT 1000
17620: LESS
17621: IFFALSE 17635
// SetLives ( un , 1000 ) ;
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 1000
17630: PPUSH
17631: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17635: LD_VAR 0 3
17639: PPUSH
17640: LD_INT 81
17642: PUSH
17643: LD_OWVAR 2
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 91
17654: PUSH
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 30
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PPUSH
17672: CALL_OW 69
17676: PPUSH
17677: LD_VAR 0 3
17681: PPUSH
17682: CALL_OW 74
17686: PPUSH
17687: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17691: LD_VAR 0 2
17695: PUSH
17696: LD_INT 80
17698: GREATER
17699: PUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: CALL_OW 301
17709: OR
17710: IFFALSE 17587
// if un then
17712: LD_VAR 0 3
17716: IFFALSE 17727
// RemoveUnit ( un ) ;
17718: LD_VAR 0 3
17722: PPUSH
17723: CALL_OW 64
// end ;
17727: PPOPN 3
17729: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17730: LD_EXP 80
17734: IFFALSE 17850
17736: GO 17738
17738: DISABLE
17739: LD_INT 0
17741: PPUSH
17742: PPUSH
17743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: LD_INT 81
17751: PUSH
17752: LD_OWVAR 2
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 21
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PPUSH
17775: CALL_OW 69
17779: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17780: LD_STRING playComputer()
17782: PPUSH
17783: CALL_OW 559
// if not tmp then
17787: LD_VAR 0 2
17791: NOT
17792: IFFALSE 17796
// exit ;
17794: GO 17850
// for i in tmp do
17796: LD_ADDR_VAR 0 1
17800: PUSH
17801: LD_VAR 0 2
17805: PUSH
17806: FOR_IN
17807: IFFALSE 17848
// for j := 1 to 4 do
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: DOUBLE
17815: LD_INT 1
17817: DEC
17818: ST_TO_ADDR
17819: LD_INT 4
17821: PUSH
17822: FOR_TO
17823: IFFALSE 17844
// SetSkill ( i , j , 10 ) ;
17825: LD_VAR 0 1
17829: PPUSH
17830: LD_VAR 0 3
17834: PPUSH
17835: LD_INT 10
17837: PPUSH
17838: CALL_OW 237
17842: GO 17822
17844: POP
17845: POP
17846: GO 17806
17848: POP
17849: POP
// end ;
17850: PPOPN 3
17852: END
// every 0 0$1 trigger s30 do var i , tmp ;
17853: LD_EXP 81
17857: IFFALSE 17926
17859: GO 17861
17861: DISABLE
17862: LD_INT 0
17864: PPUSH
17865: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17866: LD_ADDR_VAR 0 2
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_OWVAR 2
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PPUSH
17883: CALL_OW 69
17887: ST_TO_ADDR
// if not tmp then
17888: LD_VAR 0 2
17892: NOT
17893: IFFALSE 17897
// exit ;
17895: GO 17926
// for i in tmp do
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 2
17906: PUSH
17907: FOR_IN
17908: IFFALSE 17924
// SetLives ( i , 300 ) ;
17910: LD_VAR 0 1
17914: PPUSH
17915: LD_INT 300
17917: PPUSH
17918: CALL_OW 234
17922: GO 17907
17924: POP
17925: POP
// end ;
17926: PPOPN 2
17928: END
// every 0 0$1 trigger s60 do var i , tmp ;
17929: LD_EXP 82
17933: IFFALSE 18002
17935: GO 17937
17937: DISABLE
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17942: LD_ADDR_VAR 0 2
17946: PUSH
17947: LD_INT 22
17949: PUSH
17950: LD_OWVAR 2
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PPUSH
17959: CALL_OW 69
17963: ST_TO_ADDR
// if not tmp then
17964: LD_VAR 0 2
17968: NOT
17969: IFFALSE 17973
// exit ;
17971: GO 18002
// for i in tmp do
17973: LD_ADDR_VAR 0 1
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: FOR_IN
17984: IFFALSE 18000
// SetLives ( i , 600 ) ;
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_INT 600
17993: PPUSH
17994: CALL_OW 234
17998: GO 17983
18000: POP
18001: POP
// end ;
18002: PPOPN 2
18004: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18005: LD_INT 0
18007: PPUSH
// case cmd of 301 :
18008: LD_VAR 0 1
18012: PUSH
18013: LD_INT 301
18015: DOUBLE
18016: EQUAL
18017: IFTRUE 18021
18019: GO 18053
18021: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18022: LD_VAR 0 6
18026: PPUSH
18027: LD_VAR 0 7
18031: PPUSH
18032: LD_VAR 0 8
18036: PPUSH
18037: LD_VAR 0 4
18041: PPUSH
18042: LD_VAR 0 5
18046: PPUSH
18047: CALL 19262 0 5
18051: GO 18174
18053: LD_INT 302
18055: DOUBLE
18056: EQUAL
18057: IFTRUE 18061
18059: GO 18098
18061: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18062: LD_VAR 0 6
18066: PPUSH
18067: LD_VAR 0 7
18071: PPUSH
18072: LD_VAR 0 8
18076: PPUSH
18077: LD_VAR 0 9
18081: PPUSH
18082: LD_VAR 0 4
18086: PPUSH
18087: LD_VAR 0 5
18091: PPUSH
18092: CALL 19353 0 6
18096: GO 18174
18098: LD_INT 303
18100: DOUBLE
18101: EQUAL
18102: IFTRUE 18106
18104: GO 18143
18106: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18107: LD_VAR 0 6
18111: PPUSH
18112: LD_VAR 0 7
18116: PPUSH
18117: LD_VAR 0 8
18121: PPUSH
18122: LD_VAR 0 9
18126: PPUSH
18127: LD_VAR 0 4
18131: PPUSH
18132: LD_VAR 0 5
18136: PPUSH
18137: CALL 18179 0 6
18141: GO 18174
18143: LD_INT 304
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18173
18151: POP
// hHackTeleport ( unit , x , y ) ; end ;
18152: LD_VAR 0 2
18156: PPUSH
18157: LD_VAR 0 4
18161: PPUSH
18162: LD_VAR 0 5
18166: PPUSH
18167: CALL 19946 0 3
18171: GO 18174
18173: POP
// end ;
18174: LD_VAR 0 12
18178: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18183: LD_VAR 0 1
18187: PUSH
18188: LD_INT 1
18190: LESS
18191: PUSH
18192: LD_VAR 0 1
18196: PUSH
18197: LD_INT 3
18199: GREATER
18200: OR
18201: PUSH
18202: LD_VAR 0 5
18206: PPUSH
18207: LD_VAR 0 6
18211: PPUSH
18212: CALL_OW 428
18216: OR
18217: IFFALSE 18221
// exit ;
18219: GO 18949
// uc_side := your_side ;
18221: LD_ADDR_OWVAR 20
18225: PUSH
18226: LD_OWVAR 2
18230: ST_TO_ADDR
// uc_nation := nation ;
18231: LD_ADDR_OWVAR 21
18235: PUSH
18236: LD_VAR 0 1
18240: ST_TO_ADDR
// bc_level = 1 ;
18241: LD_ADDR_OWVAR 43
18245: PUSH
18246: LD_INT 1
18248: ST_TO_ADDR
// case btype of 1 :
18249: LD_VAR 0 2
18253: PUSH
18254: LD_INT 1
18256: DOUBLE
18257: EQUAL
18258: IFTRUE 18262
18260: GO 18273
18262: POP
// bc_type := b_depot ; 2 :
18263: LD_ADDR_OWVAR 42
18267: PUSH
18268: LD_INT 0
18270: ST_TO_ADDR
18271: GO 18893
18273: LD_INT 2
18275: DOUBLE
18276: EQUAL
18277: IFTRUE 18281
18279: GO 18292
18281: POP
// bc_type := b_warehouse ; 3 :
18282: LD_ADDR_OWVAR 42
18286: PUSH
18287: LD_INT 1
18289: ST_TO_ADDR
18290: GO 18893
18292: LD_INT 3
18294: DOUBLE
18295: EQUAL
18296: IFTRUE 18300
18298: GO 18311
18300: POP
// bc_type := b_lab ; 4 .. 9 :
18301: LD_ADDR_OWVAR 42
18305: PUSH
18306: LD_INT 6
18308: ST_TO_ADDR
18309: GO 18893
18311: LD_INT 4
18313: DOUBLE
18314: GREATEREQUAL
18315: IFFALSE 18323
18317: LD_INT 9
18319: DOUBLE
18320: LESSEQUAL
18321: IFTRUE 18325
18323: GO 18385
18325: POP
// begin bc_type := b_lab_half ;
18326: LD_ADDR_OWVAR 42
18330: PUSH
18331: LD_INT 7
18333: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18334: LD_ADDR_OWVAR 44
18338: PUSH
18339: LD_INT 10
18341: PUSH
18342: LD_INT 11
18344: PUSH
18345: LD_INT 12
18347: PUSH
18348: LD_INT 15
18350: PUSH
18351: LD_INT 14
18353: PUSH
18354: LD_INT 13
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: LD_VAR 0 2
18369: PUSH
18370: LD_INT 3
18372: MINUS
18373: ARRAY
18374: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18375: LD_ADDR_OWVAR 45
18379: PUSH
18380: LD_INT 9
18382: ST_TO_ADDR
// end ; 10 .. 13 :
18383: GO 18893
18385: LD_INT 10
18387: DOUBLE
18388: GREATEREQUAL
18389: IFFALSE 18397
18391: LD_INT 13
18393: DOUBLE
18394: LESSEQUAL
18395: IFTRUE 18399
18397: GO 18476
18399: POP
// begin bc_type := b_lab_full ;
18400: LD_ADDR_OWVAR 42
18404: PUSH
18405: LD_INT 8
18407: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18408: LD_ADDR_OWVAR 44
18412: PUSH
18413: LD_INT 10
18415: PUSH
18416: LD_INT 12
18418: PUSH
18419: LD_INT 14
18421: PUSH
18422: LD_INT 13
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: LD_VAR 0 2
18435: PUSH
18436: LD_INT 9
18438: MINUS
18439: ARRAY
18440: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18441: LD_ADDR_OWVAR 45
18445: PUSH
18446: LD_INT 11
18448: PUSH
18449: LD_INT 15
18451: PUSH
18452: LD_INT 12
18454: PUSH
18455: LD_INT 15
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: PUSH
18464: LD_VAR 0 2
18468: PUSH
18469: LD_INT 9
18471: MINUS
18472: ARRAY
18473: ST_TO_ADDR
// end ; 14 :
18474: GO 18893
18476: LD_INT 14
18478: DOUBLE
18479: EQUAL
18480: IFTRUE 18484
18482: GO 18495
18484: POP
// bc_type := b_workshop ; 15 :
18485: LD_ADDR_OWVAR 42
18489: PUSH
18490: LD_INT 2
18492: ST_TO_ADDR
18493: GO 18893
18495: LD_INT 15
18497: DOUBLE
18498: EQUAL
18499: IFTRUE 18503
18501: GO 18514
18503: POP
// bc_type := b_factory ; 16 :
18504: LD_ADDR_OWVAR 42
18508: PUSH
18509: LD_INT 3
18511: ST_TO_ADDR
18512: GO 18893
18514: LD_INT 16
18516: DOUBLE
18517: EQUAL
18518: IFTRUE 18522
18520: GO 18533
18522: POP
// bc_type := b_ext_gun ; 17 :
18523: LD_ADDR_OWVAR 42
18527: PUSH
18528: LD_INT 17
18530: ST_TO_ADDR
18531: GO 18893
18533: LD_INT 17
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 18569
18541: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18542: LD_ADDR_OWVAR 42
18546: PUSH
18547: LD_INT 19
18549: PUSH
18550: LD_INT 23
18552: PUSH
18553: LD_INT 19
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: PUSH
18561: LD_VAR 0 1
18565: ARRAY
18566: ST_TO_ADDR
18567: GO 18893
18569: LD_INT 18
18571: DOUBLE
18572: EQUAL
18573: IFTRUE 18577
18575: GO 18588
18577: POP
// bc_type := b_ext_radar ; 19 :
18578: LD_ADDR_OWVAR 42
18582: PUSH
18583: LD_INT 20
18585: ST_TO_ADDR
18586: GO 18893
18588: LD_INT 19
18590: DOUBLE
18591: EQUAL
18592: IFTRUE 18596
18594: GO 18607
18596: POP
// bc_type := b_ext_radio ; 20 :
18597: LD_ADDR_OWVAR 42
18601: PUSH
18602: LD_INT 22
18604: ST_TO_ADDR
18605: GO 18893
18607: LD_INT 20
18609: DOUBLE
18610: EQUAL
18611: IFTRUE 18615
18613: GO 18626
18615: POP
// bc_type := b_ext_siberium ; 21 :
18616: LD_ADDR_OWVAR 42
18620: PUSH
18621: LD_INT 21
18623: ST_TO_ADDR
18624: GO 18893
18626: LD_INT 21
18628: DOUBLE
18629: EQUAL
18630: IFTRUE 18634
18632: GO 18645
18634: POP
// bc_type := b_ext_computer ; 22 :
18635: LD_ADDR_OWVAR 42
18639: PUSH
18640: LD_INT 24
18642: ST_TO_ADDR
18643: GO 18893
18645: LD_INT 22
18647: DOUBLE
18648: EQUAL
18649: IFTRUE 18653
18651: GO 18664
18653: POP
// bc_type := b_ext_track ; 23 :
18654: LD_ADDR_OWVAR 42
18658: PUSH
18659: LD_INT 16
18661: ST_TO_ADDR
18662: GO 18893
18664: LD_INT 23
18666: DOUBLE
18667: EQUAL
18668: IFTRUE 18672
18670: GO 18683
18672: POP
// bc_type := b_ext_laser ; 24 :
18673: LD_ADDR_OWVAR 42
18677: PUSH
18678: LD_INT 25
18680: ST_TO_ADDR
18681: GO 18893
18683: LD_INT 24
18685: DOUBLE
18686: EQUAL
18687: IFTRUE 18691
18689: GO 18702
18691: POP
// bc_type := b_control_tower ; 25 :
18692: LD_ADDR_OWVAR 42
18696: PUSH
18697: LD_INT 36
18699: ST_TO_ADDR
18700: GO 18893
18702: LD_INT 25
18704: DOUBLE
18705: EQUAL
18706: IFTRUE 18710
18708: GO 18721
18710: POP
// bc_type := b_breastwork ; 26 :
18711: LD_ADDR_OWVAR 42
18715: PUSH
18716: LD_INT 31
18718: ST_TO_ADDR
18719: GO 18893
18721: LD_INT 26
18723: DOUBLE
18724: EQUAL
18725: IFTRUE 18729
18727: GO 18740
18729: POP
// bc_type := b_bunker ; 27 :
18730: LD_ADDR_OWVAR 42
18734: PUSH
18735: LD_INT 32
18737: ST_TO_ADDR
18738: GO 18893
18740: LD_INT 27
18742: DOUBLE
18743: EQUAL
18744: IFTRUE 18748
18746: GO 18759
18748: POP
// bc_type := b_turret ; 28 :
18749: LD_ADDR_OWVAR 42
18753: PUSH
18754: LD_INT 33
18756: ST_TO_ADDR
18757: GO 18893
18759: LD_INT 28
18761: DOUBLE
18762: EQUAL
18763: IFTRUE 18767
18765: GO 18778
18767: POP
// bc_type := b_armoury ; 29 :
18768: LD_ADDR_OWVAR 42
18772: PUSH
18773: LD_INT 4
18775: ST_TO_ADDR
18776: GO 18893
18778: LD_INT 29
18780: DOUBLE
18781: EQUAL
18782: IFTRUE 18786
18784: GO 18797
18786: POP
// bc_type := b_barracks ; 30 :
18787: LD_ADDR_OWVAR 42
18791: PUSH
18792: LD_INT 5
18794: ST_TO_ADDR
18795: GO 18893
18797: LD_INT 30
18799: DOUBLE
18800: EQUAL
18801: IFTRUE 18805
18803: GO 18816
18805: POP
// bc_type := b_solar_power ; 31 :
18806: LD_ADDR_OWVAR 42
18810: PUSH
18811: LD_INT 27
18813: ST_TO_ADDR
18814: GO 18893
18816: LD_INT 31
18818: DOUBLE
18819: EQUAL
18820: IFTRUE 18824
18822: GO 18835
18824: POP
// bc_type := b_oil_power ; 32 :
18825: LD_ADDR_OWVAR 42
18829: PUSH
18830: LD_INT 26
18832: ST_TO_ADDR
18833: GO 18893
18835: LD_INT 32
18837: DOUBLE
18838: EQUAL
18839: IFTRUE 18843
18841: GO 18854
18843: POP
// bc_type := b_siberite_power ; 33 :
18844: LD_ADDR_OWVAR 42
18848: PUSH
18849: LD_INT 28
18851: ST_TO_ADDR
18852: GO 18893
18854: LD_INT 33
18856: DOUBLE
18857: EQUAL
18858: IFTRUE 18862
18860: GO 18873
18862: POP
// bc_type := b_oil_mine ; 34 :
18863: LD_ADDR_OWVAR 42
18867: PUSH
18868: LD_INT 29
18870: ST_TO_ADDR
18871: GO 18893
18873: LD_INT 34
18875: DOUBLE
18876: EQUAL
18877: IFTRUE 18881
18879: GO 18892
18881: POP
// bc_type := b_siberite_mine ; end ;
18882: LD_ADDR_OWVAR 42
18886: PUSH
18887: LD_INT 30
18889: ST_TO_ADDR
18890: GO 18893
18892: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18893: LD_ADDR_VAR 0 8
18897: PUSH
18898: LD_VAR 0 5
18902: PPUSH
18903: LD_VAR 0 6
18907: PPUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: CALL_OW 47
18917: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18918: LD_OWVAR 42
18922: PUSH
18923: LD_INT 32
18925: PUSH
18926: LD_INT 33
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: IN
18933: IFFALSE 18949
// PlaceWeaponTurret ( b , weapon ) ;
18935: LD_VAR 0 8
18939: PPUSH
18940: LD_VAR 0 4
18944: PPUSH
18945: CALL_OW 431
// end ;
18949: LD_VAR 0 7
18953: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18954: LD_INT 0
18956: PPUSH
18957: PPUSH
18958: PPUSH
18959: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18960: LD_ADDR_VAR 0 4
18964: PUSH
18965: LD_INT 22
18967: PUSH
18968: LD_OWVAR 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 30
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 30
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PPUSH
19009: CALL_OW 69
19013: ST_TO_ADDR
// if not tmp then
19014: LD_VAR 0 4
19018: NOT
19019: IFFALSE 19023
// exit ;
19021: GO 19082
// for i in tmp do
19023: LD_ADDR_VAR 0 2
19027: PUSH
19028: LD_VAR 0 4
19032: PUSH
19033: FOR_IN
19034: IFFALSE 19080
// for j = 1 to 3 do
19036: LD_ADDR_VAR 0 3
19040: PUSH
19041: DOUBLE
19042: LD_INT 1
19044: DEC
19045: ST_TO_ADDR
19046: LD_INT 3
19048: PUSH
19049: FOR_TO
19050: IFFALSE 19076
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19052: LD_VAR 0 2
19056: PPUSH
19057: CALL_OW 274
19061: PPUSH
19062: LD_VAR 0 3
19066: PPUSH
19067: LD_INT 99999
19069: PPUSH
19070: CALL_OW 277
19074: GO 19049
19076: POP
19077: POP
19078: GO 19033
19080: POP
19081: POP
// end ;
19082: LD_VAR 0 1
19086: RET
// export function hHackSetLevel10 ; var i , j ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19092: LD_ADDR_VAR 0 2
19096: PUSH
19097: LD_INT 21
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PUSH
19112: FOR_IN
19113: IFFALSE 19165
// if IsSelected ( i ) then
19115: LD_VAR 0 2
19119: PPUSH
19120: CALL_OW 306
19124: IFFALSE 19163
// begin for j := 1 to 4 do
19126: LD_ADDR_VAR 0 3
19130: PUSH
19131: DOUBLE
19132: LD_INT 1
19134: DEC
19135: ST_TO_ADDR
19136: LD_INT 4
19138: PUSH
19139: FOR_TO
19140: IFFALSE 19161
// SetSkill ( i , j , 10 ) ;
19142: LD_VAR 0 2
19146: PPUSH
19147: LD_VAR 0 3
19151: PPUSH
19152: LD_INT 10
19154: PPUSH
19155: CALL_OW 237
19159: GO 19139
19161: POP
19162: POP
// end ;
19163: GO 19112
19165: POP
19166: POP
// end ;
19167: LD_VAR 0 1
19171: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19172: LD_INT 0
19174: PPUSH
19175: PPUSH
19176: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19177: LD_ADDR_VAR 0 2
19181: PUSH
19182: LD_INT 22
19184: PUSH
19185: LD_OWVAR 2
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 21
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 69
19212: PUSH
19213: FOR_IN
19214: IFFALSE 19255
// begin for j := 1 to 4 do
19216: LD_ADDR_VAR 0 3
19220: PUSH
19221: DOUBLE
19222: LD_INT 1
19224: DEC
19225: ST_TO_ADDR
19226: LD_INT 4
19228: PUSH
19229: FOR_TO
19230: IFFALSE 19251
// SetSkill ( i , j , 10 ) ;
19232: LD_VAR 0 2
19236: PPUSH
19237: LD_VAR 0 3
19241: PPUSH
19242: LD_INT 10
19244: PPUSH
19245: CALL_OW 237
19249: GO 19229
19251: POP
19252: POP
// end ;
19253: GO 19213
19255: POP
19256: POP
// end ;
19257: LD_VAR 0 1
19261: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19262: LD_INT 0
19264: PPUSH
// uc_side := your_side ;
19265: LD_ADDR_OWVAR 20
19269: PUSH
19270: LD_OWVAR 2
19274: ST_TO_ADDR
// uc_nation := nation ;
19275: LD_ADDR_OWVAR 21
19279: PUSH
19280: LD_VAR 0 1
19284: ST_TO_ADDR
// InitHc ;
19285: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19289: LD_INT 0
19291: PPUSH
19292: LD_VAR 0 2
19296: PPUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19306: LD_VAR 0 4
19310: PPUSH
19311: LD_VAR 0 5
19315: PPUSH
19316: CALL_OW 428
19320: PUSH
19321: LD_INT 0
19323: EQUAL
19324: IFFALSE 19348
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19326: CALL_OW 44
19330: PPUSH
19331: LD_VAR 0 4
19335: PPUSH
19336: LD_VAR 0 5
19340: PPUSH
19341: LD_INT 1
19343: PPUSH
19344: CALL_OW 48
// end ;
19348: LD_VAR 0 6
19352: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19353: LD_INT 0
19355: PPUSH
19356: PPUSH
// uc_side := your_side ;
19357: LD_ADDR_OWVAR 20
19361: PUSH
19362: LD_OWVAR 2
19366: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19367: LD_VAR 0 1
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: LD_INT 3
19380: PUSH
19381: LD_INT 4
19383: PUSH
19384: LD_INT 5
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: IN
19394: IFFALSE 19406
// uc_nation := nation_american else
19396: LD_ADDR_OWVAR 21
19400: PUSH
19401: LD_INT 1
19403: ST_TO_ADDR
19404: GO 19449
// if chassis in [ 11 , 12 , 13 , 14 ] then
19406: LD_VAR 0 1
19410: PUSH
19411: LD_INT 11
19413: PUSH
19414: LD_INT 12
19416: PUSH
19417: LD_INT 13
19419: PUSH
19420: LD_INT 14
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: IN
19429: IFFALSE 19441
// uc_nation := nation_arabian else
19431: LD_ADDR_OWVAR 21
19435: PUSH
19436: LD_INT 2
19438: ST_TO_ADDR
19439: GO 19449
// uc_nation := nation_russian ;
19441: LD_ADDR_OWVAR 21
19445: PUSH
19446: LD_INT 3
19448: ST_TO_ADDR
// vc_chassis := chassis ;
19449: LD_ADDR_OWVAR 37
19453: PUSH
19454: LD_VAR 0 1
19458: ST_TO_ADDR
// vc_engine := engine ;
19459: LD_ADDR_OWVAR 39
19463: PUSH
19464: LD_VAR 0 2
19468: ST_TO_ADDR
// vc_control := control ;
19469: LD_ADDR_OWVAR 38
19473: PUSH
19474: LD_VAR 0 3
19478: ST_TO_ADDR
// vc_weapon := weapon ;
19479: LD_ADDR_OWVAR 40
19483: PUSH
19484: LD_VAR 0 4
19488: ST_TO_ADDR
// un := CreateVehicle ;
19489: LD_ADDR_VAR 0 8
19493: PUSH
19494: CALL_OW 45
19498: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19499: LD_VAR 0 8
19503: PPUSH
19504: LD_INT 0
19506: PPUSH
19507: LD_INT 5
19509: PPUSH
19510: CALL_OW 12
19514: PPUSH
19515: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19519: LD_VAR 0 8
19523: PPUSH
19524: LD_VAR 0 5
19528: PPUSH
19529: LD_VAR 0 6
19533: PPUSH
19534: LD_INT 1
19536: PPUSH
19537: CALL_OW 48
// end ;
19541: LD_VAR 0 7
19545: RET
// export hInvincible ; every 1 do
19546: GO 19548
19548: DISABLE
// hInvincible := [ ] ;
19549: LD_ADDR_EXP 83
19553: PUSH
19554: EMPTY
19555: ST_TO_ADDR
19556: END
// every 10 do var i ;
19557: GO 19559
19559: DISABLE
19560: LD_INT 0
19562: PPUSH
// begin enable ;
19563: ENABLE
// if not hInvincible then
19564: LD_EXP 83
19568: NOT
19569: IFFALSE 19573
// exit ;
19571: GO 19617
// for i in hInvincible do
19573: LD_ADDR_VAR 0 1
19577: PUSH
19578: LD_EXP 83
19582: PUSH
19583: FOR_IN
19584: IFFALSE 19615
// if GetLives ( i ) < 1000 then
19586: LD_VAR 0 1
19590: PPUSH
19591: CALL_OW 256
19595: PUSH
19596: LD_INT 1000
19598: LESS
19599: IFFALSE 19613
// SetLives ( i , 1000 ) ;
19601: LD_VAR 0 1
19605: PPUSH
19606: LD_INT 1000
19608: PPUSH
19609: CALL_OW 234
19613: GO 19583
19615: POP
19616: POP
// end ;
19617: PPOPN 1
19619: END
// export function hHackInvincible ; var i ; begin
19620: LD_INT 0
19622: PPUSH
19623: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19624: LD_ADDR_VAR 0 2
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: LD_INT 21
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 21
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: PPUSH
19657: CALL_OW 69
19661: PUSH
19662: FOR_IN
19663: IFFALSE 19724
// if IsSelected ( i ) then
19665: LD_VAR 0 2
19669: PPUSH
19670: CALL_OW 306
19674: IFFALSE 19722
// begin if i in hInvincible then
19676: LD_VAR 0 2
19680: PUSH
19681: LD_EXP 83
19685: IN
19686: IFFALSE 19706
// hInvincible := hInvincible diff i else
19688: LD_ADDR_EXP 83
19692: PUSH
19693: LD_EXP 83
19697: PUSH
19698: LD_VAR 0 2
19702: DIFF
19703: ST_TO_ADDR
19704: GO 19722
// hInvincible := hInvincible union i ;
19706: LD_ADDR_EXP 83
19710: PUSH
19711: LD_EXP 83
19715: PUSH
19716: LD_VAR 0 2
19720: UNION
19721: ST_TO_ADDR
// end ;
19722: GO 19662
19724: POP
19725: POP
// end ;
19726: LD_VAR 0 1
19730: RET
// export function hHackInvisible ; var i , j ; begin
19731: LD_INT 0
19733: PPUSH
19734: PPUSH
19735: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: LD_INT 21
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PUSH
19756: FOR_IN
19757: IFFALSE 19781
// if IsSelected ( i ) then
19759: LD_VAR 0 2
19763: PPUSH
19764: CALL_OW 306
19768: IFFALSE 19779
// ComForceInvisible ( i ) ;
19770: LD_VAR 0 2
19774: PPUSH
19775: CALL_OW 496
19779: GO 19756
19781: POP
19782: POP
// end ;
19783: LD_VAR 0 1
19787: RET
// export function hHackChangeYourSide ; begin
19788: LD_INT 0
19790: PPUSH
// if your_side = 8 then
19791: LD_OWVAR 2
19795: PUSH
19796: LD_INT 8
19798: EQUAL
19799: IFFALSE 19811
// your_side := 0 else
19801: LD_ADDR_OWVAR 2
19805: PUSH
19806: LD_INT 0
19808: ST_TO_ADDR
19809: GO 19825
// your_side := your_side + 1 ;
19811: LD_ADDR_OWVAR 2
19815: PUSH
19816: LD_OWVAR 2
19820: PUSH
19821: LD_INT 1
19823: PLUS
19824: ST_TO_ADDR
// end ;
19825: LD_VAR 0 1
19829: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19830: LD_INT 0
19832: PPUSH
19833: PPUSH
19834: PPUSH
// for i in all_units do
19835: LD_ADDR_VAR 0 2
19839: PUSH
19840: LD_OWVAR 3
19844: PUSH
19845: FOR_IN
19846: IFFALSE 19924
// if IsSelected ( i ) then
19848: LD_VAR 0 2
19852: PPUSH
19853: CALL_OW 306
19857: IFFALSE 19922
// begin j := GetSide ( i ) ;
19859: LD_ADDR_VAR 0 3
19863: PUSH
19864: LD_VAR 0 2
19868: PPUSH
19869: CALL_OW 255
19873: ST_TO_ADDR
// if j = 8 then
19874: LD_VAR 0 3
19878: PUSH
19879: LD_INT 8
19881: EQUAL
19882: IFFALSE 19894
// j := 0 else
19884: LD_ADDR_VAR 0 3
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
19892: GO 19908
// j := j + 1 ;
19894: LD_ADDR_VAR 0 3
19898: PUSH
19899: LD_VAR 0 3
19903: PUSH
19904: LD_INT 1
19906: PLUS
19907: ST_TO_ADDR
// SetSide ( i , j ) ;
19908: LD_VAR 0 2
19912: PPUSH
19913: LD_VAR 0 3
19917: PPUSH
19918: CALL_OW 235
// end ;
19922: GO 19845
19924: POP
19925: POP
// end ;
19926: LD_VAR 0 1
19930: RET
// export function hHackFog ; begin
19931: LD_INT 0
19933: PPUSH
// FogOff ( true ) ;
19934: LD_INT 1
19936: PPUSH
19937: CALL_OW 344
// end ;
19941: LD_VAR 0 1
19945: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19946: LD_INT 0
19948: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19949: LD_VAR 0 1
19953: PPUSH
19954: LD_VAR 0 2
19958: PPUSH
19959: LD_VAR 0 3
19963: PPUSH
19964: LD_INT 1
19966: PPUSH
19967: LD_INT 1
19969: PPUSH
19970: CALL_OW 483
// CenterOnXY ( x , y ) ;
19974: LD_VAR 0 2
19978: PPUSH
19979: LD_VAR 0 3
19983: PPUSH
19984: CALL_OW 84
// end ;
19988: LD_VAR 0 4
19992: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19993: LD_INT 0
19995: PPUSH
19996: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19997: LD_VAR 0 1
20001: NOT
20002: PUSH
20003: LD_VAR 0 2
20007: PPUSH
20008: LD_VAR 0 3
20012: PPUSH
20013: CALL_OW 488
20017: NOT
20018: OR
20019: PUSH
20020: LD_VAR 0 1
20024: PPUSH
20025: CALL_OW 266
20029: PUSH
20030: LD_INT 3
20032: NONEQUAL
20033: PUSH
20034: LD_VAR 0 1
20038: PPUSH
20039: CALL_OW 247
20043: PUSH
20044: LD_INT 1
20046: EQUAL
20047: NOT
20048: AND
20049: OR
20050: IFFALSE 20054
// exit ;
20052: GO 20203
// if GetType ( factory ) = unit_human then
20054: LD_VAR 0 1
20058: PPUSH
20059: CALL_OW 247
20063: PUSH
20064: LD_INT 1
20066: EQUAL
20067: IFFALSE 20084
// factory := IsInUnit ( factory ) ;
20069: LD_ADDR_VAR 0 1
20073: PUSH
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 310
20083: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20084: LD_VAR 0 1
20088: PPUSH
20089: CALL_OW 266
20093: PUSH
20094: LD_INT 3
20096: NONEQUAL
20097: IFFALSE 20101
// exit ;
20099: GO 20203
// if HexInfo ( x , y ) = factory then
20101: LD_VAR 0 2
20105: PPUSH
20106: LD_VAR 0 3
20110: PPUSH
20111: CALL_OW 428
20115: PUSH
20116: LD_VAR 0 1
20120: EQUAL
20121: IFFALSE 20148
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20123: LD_ADDR_EXP 84
20127: PUSH
20128: LD_EXP 84
20132: PPUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: LD_INT 0
20140: PPUSH
20141: CALL_OW 1
20145: ST_TO_ADDR
20146: GO 20199
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20148: LD_ADDR_EXP 84
20152: PUSH
20153: LD_EXP 84
20157: PPUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: LD_VAR 0 1
20167: PPUSH
20168: CALL_OW 255
20172: PUSH
20173: LD_VAR 0 1
20177: PUSH
20178: LD_VAR 0 2
20182: PUSH
20183: LD_VAR 0 3
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: PPUSH
20194: CALL_OW 1
20198: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20199: CALL 20208 0 0
// end ;
20203: LD_VAR 0 4
20207: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
20212: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20213: LD_STRING resetFactoryWaypoint();
20215: PPUSH
20216: CALL_OW 559
// if factoryWaypoints then
20220: LD_EXP 84
20224: IFFALSE 20350
// begin list := PrepareArray ( factoryWaypoints ) ;
20226: LD_ADDR_VAR 0 3
20230: PUSH
20231: LD_EXP 84
20235: PPUSH
20236: CALL 67885 0 1
20240: ST_TO_ADDR
// for i := 1 to list do
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: DOUBLE
20247: LD_INT 1
20249: DEC
20250: ST_TO_ADDR
20251: LD_VAR 0 3
20255: PUSH
20256: FOR_TO
20257: IFFALSE 20348
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20259: LD_STRING setFactoryWaypointXY(
20261: PUSH
20262: LD_VAR 0 3
20266: PUSH
20267: LD_VAR 0 2
20271: ARRAY
20272: PUSH
20273: LD_INT 1
20275: ARRAY
20276: STR
20277: PUSH
20278: LD_STRING ,
20280: STR
20281: PUSH
20282: LD_VAR 0 3
20286: PUSH
20287: LD_VAR 0 2
20291: ARRAY
20292: PUSH
20293: LD_INT 2
20295: ARRAY
20296: STR
20297: PUSH
20298: LD_STRING ,
20300: STR
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: LD_VAR 0 2
20311: ARRAY
20312: PUSH
20313: LD_INT 3
20315: ARRAY
20316: STR
20317: PUSH
20318: LD_STRING ,
20320: STR
20321: PUSH
20322: LD_VAR 0 3
20326: PUSH
20327: LD_VAR 0 2
20331: ARRAY
20332: PUSH
20333: LD_INT 4
20335: ARRAY
20336: STR
20337: PUSH
20338: LD_STRING )
20340: STR
20341: PPUSH
20342: CALL_OW 559
20346: GO 20256
20348: POP
20349: POP
// end ; end ;
20350: LD_VAR 0 1
20354: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20355: LD_INT 0
20357: PPUSH
// if HexInfo ( x , y ) = warehouse then
20358: LD_VAR 0 2
20362: PPUSH
20363: LD_VAR 0 3
20367: PPUSH
20368: CALL_OW 428
20372: PUSH
20373: LD_VAR 0 1
20377: EQUAL
20378: IFFALSE 20405
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20380: LD_ADDR_EXP 85
20384: PUSH
20385: LD_EXP 85
20389: PPUSH
20390: LD_VAR 0 1
20394: PPUSH
20395: LD_INT 0
20397: PPUSH
20398: CALL_OW 1
20402: ST_TO_ADDR
20403: GO 20456
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20405: LD_ADDR_EXP 85
20409: PUSH
20410: LD_EXP 85
20414: PPUSH
20415: LD_VAR 0 1
20419: PPUSH
20420: LD_VAR 0 1
20424: PPUSH
20425: CALL_OW 255
20429: PUSH
20430: LD_VAR 0 1
20434: PUSH
20435: LD_VAR 0 2
20439: PUSH
20440: LD_VAR 0 3
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: PPUSH
20451: CALL_OW 1
20455: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20456: CALL 20465 0 0
// end ;
20460: LD_VAR 0 4
20464: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20465: LD_INT 0
20467: PPUSH
20468: PPUSH
20469: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20470: LD_STRING resetWarehouseGatheringPoints();
20472: PPUSH
20473: CALL_OW 559
// if warehouseGatheringPoints then
20477: LD_EXP 85
20481: IFFALSE 20607
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20483: LD_ADDR_VAR 0 3
20487: PUSH
20488: LD_EXP 85
20492: PPUSH
20493: CALL 67885 0 1
20497: ST_TO_ADDR
// for i := 1 to list do
20498: LD_ADDR_VAR 0 2
20502: PUSH
20503: DOUBLE
20504: LD_INT 1
20506: DEC
20507: ST_TO_ADDR
20508: LD_VAR 0 3
20512: PUSH
20513: FOR_TO
20514: IFFALSE 20605
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20516: LD_STRING setWarehouseGatheringPointXY(
20518: PUSH
20519: LD_VAR 0 3
20523: PUSH
20524: LD_VAR 0 2
20528: ARRAY
20529: PUSH
20530: LD_INT 1
20532: ARRAY
20533: STR
20534: PUSH
20535: LD_STRING ,
20537: STR
20538: PUSH
20539: LD_VAR 0 3
20543: PUSH
20544: LD_VAR 0 2
20548: ARRAY
20549: PUSH
20550: LD_INT 2
20552: ARRAY
20553: STR
20554: PUSH
20555: LD_STRING ,
20557: STR
20558: PUSH
20559: LD_VAR 0 3
20563: PUSH
20564: LD_VAR 0 2
20568: ARRAY
20569: PUSH
20570: LD_INT 3
20572: ARRAY
20573: STR
20574: PUSH
20575: LD_STRING ,
20577: STR
20578: PUSH
20579: LD_VAR 0 3
20583: PUSH
20584: LD_VAR 0 2
20588: ARRAY
20589: PUSH
20590: LD_INT 4
20592: ARRAY
20593: STR
20594: PUSH
20595: LD_STRING )
20597: STR
20598: PPUSH
20599: CALL_OW 559
20603: GO 20513
20605: POP
20606: POP
// end ; end ;
20607: LD_VAR 0 1
20611: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20612: LD_EXP 85
20616: IFFALSE 21301
20618: GO 20620
20620: DISABLE
20621: LD_INT 0
20623: PPUSH
20624: PPUSH
20625: PPUSH
20626: PPUSH
20627: PPUSH
20628: PPUSH
20629: PPUSH
20630: PPUSH
20631: PPUSH
// begin enable ;
20632: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20633: LD_ADDR_VAR 0 3
20637: PUSH
20638: LD_EXP 85
20642: PPUSH
20643: CALL 67885 0 1
20647: ST_TO_ADDR
// if not list then
20648: LD_VAR 0 3
20652: NOT
20653: IFFALSE 20657
// exit ;
20655: GO 21301
// for i := 1 to list do
20657: LD_ADDR_VAR 0 1
20661: PUSH
20662: DOUBLE
20663: LD_INT 1
20665: DEC
20666: ST_TO_ADDR
20667: LD_VAR 0 3
20671: PUSH
20672: FOR_TO
20673: IFFALSE 21299
// begin depot := list [ i ] [ 2 ] ;
20675: LD_ADDR_VAR 0 8
20679: PUSH
20680: LD_VAR 0 3
20684: PUSH
20685: LD_VAR 0 1
20689: ARRAY
20690: PUSH
20691: LD_INT 2
20693: ARRAY
20694: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20695: LD_ADDR_VAR 0 5
20699: PUSH
20700: LD_VAR 0 3
20704: PUSH
20705: LD_VAR 0 1
20709: ARRAY
20710: PUSH
20711: LD_INT 1
20713: ARRAY
20714: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20715: LD_VAR 0 8
20719: PPUSH
20720: CALL_OW 301
20724: PUSH
20725: LD_VAR 0 5
20729: PUSH
20730: LD_VAR 0 8
20734: PPUSH
20735: CALL_OW 255
20739: NONEQUAL
20740: OR
20741: IFFALSE 20770
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20743: LD_ADDR_EXP 85
20747: PUSH
20748: LD_EXP 85
20752: PPUSH
20753: LD_VAR 0 8
20757: PPUSH
20758: LD_INT 0
20760: PPUSH
20761: CALL_OW 1
20765: ST_TO_ADDR
// exit ;
20766: POP
20767: POP
20768: GO 21301
// end ; x := list [ i ] [ 3 ] ;
20770: LD_ADDR_VAR 0 6
20774: PUSH
20775: LD_VAR 0 3
20779: PUSH
20780: LD_VAR 0 1
20784: ARRAY
20785: PUSH
20786: LD_INT 3
20788: ARRAY
20789: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20790: LD_ADDR_VAR 0 7
20794: PUSH
20795: LD_VAR 0 3
20799: PUSH
20800: LD_VAR 0 1
20804: ARRAY
20805: PUSH
20806: LD_INT 4
20808: ARRAY
20809: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20810: LD_ADDR_VAR 0 9
20814: PUSH
20815: LD_VAR 0 6
20819: PPUSH
20820: LD_VAR 0 7
20824: PPUSH
20825: LD_INT 16
20827: PPUSH
20828: CALL 66469 0 3
20832: ST_TO_ADDR
// if not cratesNearbyPoint then
20833: LD_VAR 0 9
20837: NOT
20838: IFFALSE 20844
// exit ;
20840: POP
20841: POP
20842: GO 21301
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20844: LD_ADDR_VAR 0 4
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_VAR 0 5
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 3
20863: PUSH
20864: LD_INT 60
20866: PUSH
20867: EMPTY
20868: LIST
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 91
20876: PUSH
20877: LD_VAR 0 8
20881: PUSH
20882: LD_INT 6
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: LD_INT 25
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 25
20905: PUSH
20906: LD_INT 16
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: PPUSH
20924: CALL_OW 69
20928: PUSH
20929: LD_VAR 0 8
20933: PPUSH
20934: CALL_OW 313
20938: PPUSH
20939: LD_INT 3
20941: PUSH
20942: LD_INT 60
20944: PUSH
20945: EMPTY
20946: LIST
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 25
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 25
20967: PUSH
20968: LD_INT 16
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: LIST
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PPUSH
20984: CALL_OW 72
20988: UNION
20989: ST_TO_ADDR
// if tmp then
20990: LD_VAR 0 4
20994: IFFALSE 21074
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20996: LD_ADDR_VAR 0 4
21000: PUSH
21001: LD_VAR 0 4
21005: PPUSH
21006: LD_INT 3
21008: PPUSH
21009: CALL 64438 0 2
21013: ST_TO_ADDR
// for j in tmp do
21014: LD_ADDR_VAR 0 2
21018: PUSH
21019: LD_VAR 0 4
21023: PUSH
21024: FOR_IN
21025: IFFALSE 21068
// begin if IsInUnit ( j ) then
21027: LD_VAR 0 2
21031: PPUSH
21032: CALL_OW 310
21036: IFFALSE 21047
// ComExit ( j ) ;
21038: LD_VAR 0 2
21042: PPUSH
21043: CALL 64521 0 1
// AddComCollect ( j , x , y ) ;
21047: LD_VAR 0 2
21051: PPUSH
21052: LD_VAR 0 6
21056: PPUSH
21057: LD_VAR 0 7
21061: PPUSH
21062: CALL_OW 177
// end ;
21066: GO 21024
21068: POP
21069: POP
// exit ;
21070: POP
21071: POP
21072: GO 21301
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21074: LD_ADDR_VAR 0 4
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_VAR 0 5
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 91
21093: PUSH
21094: LD_VAR 0 8
21098: PUSH
21099: LD_INT 8
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: LD_INT 34
21112: PUSH
21113: LD_INT 12
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 34
21122: PUSH
21123: LD_INT 51
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 34
21132: PUSH
21133: LD_INT 32
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 34
21142: PUSH
21143: LD_INT 89
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if tmp then
21167: LD_VAR 0 4
21171: IFFALSE 21297
// begin for j in tmp do
21173: LD_ADDR_VAR 0 2
21177: PUSH
21178: LD_VAR 0 4
21182: PUSH
21183: FOR_IN
21184: IFFALSE 21295
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21186: LD_VAR 0 2
21190: PPUSH
21191: CALL_OW 262
21195: PUSH
21196: LD_INT 3
21198: EQUAL
21199: PUSH
21200: LD_VAR 0 2
21204: PPUSH
21205: CALL_OW 261
21209: PUSH
21210: LD_INT 20
21212: GREATER
21213: OR
21214: PUSH
21215: LD_VAR 0 2
21219: PPUSH
21220: CALL_OW 314
21224: NOT
21225: AND
21226: PUSH
21227: LD_VAR 0 2
21231: PPUSH
21232: CALL_OW 263
21236: PUSH
21237: LD_INT 1
21239: NONEQUAL
21240: PUSH
21241: LD_VAR 0 2
21245: PPUSH
21246: CALL_OW 311
21250: OR
21251: AND
21252: IFFALSE 21293
// begin ComCollect ( j , x , y ) ;
21254: LD_VAR 0 2
21258: PPUSH
21259: LD_VAR 0 6
21263: PPUSH
21264: LD_VAR 0 7
21268: PPUSH
21269: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21273: LD_VAR 0 2
21277: PPUSH
21278: LD_VAR 0 8
21282: PPUSH
21283: CALL_OW 172
// exit ;
21287: POP
21288: POP
21289: POP
21290: POP
21291: GO 21301
// end ;
21293: GO 21183
21295: POP
21296: POP
// end ; end ;
21297: GO 20672
21299: POP
21300: POP
// end ; end_of_file
21301: PPOPN 9
21303: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21304: LD_INT 0
21306: PPUSH
21307: PPUSH
21308: PPUSH
21309: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 264
21319: PUSH
21320: LD_INT 91
21322: EQUAL
21323: IFFALSE 21395
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21325: LD_INT 68
21327: PPUSH
21328: LD_VAR 0 1
21332: PPUSH
21333: CALL_OW 255
21337: PPUSH
21338: CALL_OW 321
21342: PUSH
21343: LD_INT 2
21345: EQUAL
21346: IFFALSE 21358
// eff := 70 else
21348: LD_ADDR_VAR 0 4
21352: PUSH
21353: LD_INT 70
21355: ST_TO_ADDR
21356: GO 21366
// eff := 30 ;
21358: LD_ADDR_VAR 0 4
21362: PUSH
21363: LD_INT 30
21365: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21366: LD_VAR 0 1
21370: PPUSH
21371: CALL_OW 250
21375: PPUSH
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 251
21385: PPUSH
21386: LD_VAR 0 4
21390: PPUSH
21391: CALL_OW 495
// end ; end ;
21395: LD_VAR 0 2
21399: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21400: LD_INT 0
21402: PPUSH
// end ;
21403: LD_VAR 0 4
21407: RET
// export function SOS_Command ( cmd ) ; begin
21408: LD_INT 0
21410: PPUSH
// end ;
21411: LD_VAR 0 2
21415: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21416: LD_INT 0
21418: PPUSH
// end ;
21419: LD_VAR 0 6
21423: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21424: LD_INT 0
21426: PPUSH
21427: PPUSH
// if not vehicle or not factory then
21428: LD_VAR 0 1
21432: NOT
21433: PUSH
21434: LD_VAR 0 2
21438: NOT
21439: OR
21440: IFFALSE 21444
// exit ;
21442: GO 21687
// if factoryWaypoints >= factory then
21444: LD_EXP 84
21448: PUSH
21449: LD_VAR 0 2
21453: GREATEREQUAL
21454: IFFALSE 21687
// if factoryWaypoints [ factory ] then
21456: LD_EXP 84
21460: PUSH
21461: LD_VAR 0 2
21465: ARRAY
21466: IFFALSE 21687
// begin if GetControl ( vehicle ) = control_manual then
21468: LD_VAR 0 1
21472: PPUSH
21473: CALL_OW 263
21477: PUSH
21478: LD_INT 1
21480: EQUAL
21481: IFFALSE 21574
// begin driver := IsDrivenBy ( vehicle ) ;
21483: LD_ADDR_VAR 0 4
21487: PUSH
21488: LD_VAR 0 1
21492: PPUSH
21493: CALL_OW 311
21497: ST_TO_ADDR
// if not HasTask ( driver ) then
21498: LD_VAR 0 4
21502: PPUSH
21503: CALL_OW 314
21507: NOT
21508: IFFALSE 21572
// begin ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21510: LD_VAR 0 4
21514: PPUSH
21515: LD_EXP 84
21519: PUSH
21520: LD_VAR 0 2
21524: ARRAY
21525: PUSH
21526: LD_INT 3
21528: ARRAY
21529: PPUSH
21530: LD_EXP 84
21534: PUSH
21535: LD_VAR 0 2
21539: ARRAY
21540: PUSH
21541: LD_INT 4
21543: ARRAY
21544: PPUSH
21545: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21549: LD_VAR 0 4
21553: PPUSH
21554: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21558: LD_VAR 0 4
21562: PPUSH
21563: LD_VAR 0 2
21567: PPUSH
21568: CALL_OW 180
// end ; end else
21572: GO 21687
// if GetControl ( vehicle ) = control_remote then
21574: LD_VAR 0 1
21578: PPUSH
21579: CALL_OW 263
21583: PUSH
21584: LD_INT 2
21586: EQUAL
21587: IFFALSE 21648
// begin wait ( 0 0$2 ) ;
21589: LD_INT 70
21591: PPUSH
21592: CALL_OW 67
// if Connect ( vehicle ) then
21596: LD_VAR 0 1
21600: PPUSH
21601: CALL 34740 0 1
21605: IFFALSE 21646
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21607: LD_VAR 0 1
21611: PPUSH
21612: LD_EXP 84
21616: PUSH
21617: LD_VAR 0 2
21621: ARRAY
21622: PUSH
21623: LD_INT 3
21625: ARRAY
21626: PPUSH
21627: LD_EXP 84
21631: PUSH
21632: LD_VAR 0 2
21636: ARRAY
21637: PUSH
21638: LD_INT 4
21640: ARRAY
21641: PPUSH
21642: CALL_OW 171
// end else
21646: GO 21687
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21648: LD_VAR 0 1
21652: PPUSH
21653: LD_EXP 84
21657: PUSH
21658: LD_VAR 0 2
21662: ARRAY
21663: PUSH
21664: LD_INT 3
21666: ARRAY
21667: PPUSH
21668: LD_EXP 84
21672: PUSH
21673: LD_VAR 0 2
21677: ARRAY
21678: PUSH
21679: LD_INT 4
21681: ARRAY
21682: PPUSH
21683: CALL_OW 171
// end ; end ;
21687: LD_VAR 0 3
21691: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21692: LD_INT 0
21694: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21695: LD_VAR 0 1
21699: PUSH
21700: LD_INT 250
21702: EQUAL
21703: PUSH
21704: LD_VAR 0 2
21708: PPUSH
21709: CALL_OW 264
21713: PUSH
21714: LD_INT 81
21716: EQUAL
21717: AND
21718: IFFALSE 21739
// MinerPlaceMine ( unit , x , y ) ;
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_VAR 0 4
21729: PPUSH
21730: LD_VAR 0 5
21734: PPUSH
21735: CALL 24729 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21739: LD_VAR 0 1
21743: PUSH
21744: LD_INT 251
21746: EQUAL
21747: PUSH
21748: LD_VAR 0 2
21752: PPUSH
21753: CALL_OW 264
21757: PUSH
21758: LD_INT 81
21760: EQUAL
21761: AND
21762: IFFALSE 21783
// MinerDetonateMine ( unit , x , y ) ;
21764: LD_VAR 0 2
21768: PPUSH
21769: LD_VAR 0 4
21773: PPUSH
21774: LD_VAR 0 5
21778: PPUSH
21779: CALL 25004 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21783: LD_VAR 0 1
21787: PUSH
21788: LD_INT 252
21790: EQUAL
21791: PUSH
21792: LD_VAR 0 2
21796: PPUSH
21797: CALL_OW 264
21801: PUSH
21802: LD_INT 81
21804: EQUAL
21805: AND
21806: IFFALSE 21827
// MinerCreateMinefield ( unit , x , y ) ;
21808: LD_VAR 0 2
21812: PPUSH
21813: LD_VAR 0 4
21817: PPUSH
21818: LD_VAR 0 5
21822: PPUSH
21823: CALL 25421 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21827: LD_VAR 0 1
21831: PUSH
21832: LD_INT 253
21834: EQUAL
21835: PUSH
21836: LD_VAR 0 2
21840: PPUSH
21841: CALL_OW 257
21845: PUSH
21846: LD_INT 5
21848: EQUAL
21849: AND
21850: IFFALSE 21871
// ComBinocular ( unit , x , y ) ;
21852: LD_VAR 0 2
21856: PPUSH
21857: LD_VAR 0 4
21861: PPUSH
21862: LD_VAR 0 5
21866: PPUSH
21867: CALL 25790 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21871: LD_VAR 0 1
21875: PUSH
21876: LD_INT 254
21878: EQUAL
21879: PUSH
21880: LD_VAR 0 2
21884: PPUSH
21885: CALL_OW 264
21889: PUSH
21890: LD_INT 99
21892: EQUAL
21893: AND
21894: PUSH
21895: LD_VAR 0 3
21899: PPUSH
21900: CALL_OW 263
21904: PUSH
21905: LD_INT 3
21907: EQUAL
21908: AND
21909: IFFALSE 21925
// HackDestroyVehicle ( unit , selectedUnit ) ;
21911: LD_VAR 0 2
21915: PPUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL 24093 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21925: LD_VAR 0 1
21929: PUSH
21930: LD_INT 255
21932: EQUAL
21933: PUSH
21934: LD_VAR 0 2
21938: PPUSH
21939: CALL_OW 264
21943: PUSH
21944: LD_INT 14
21946: PUSH
21947: LD_INT 53
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: IN
21954: AND
21955: PUSH
21956: LD_VAR 0 4
21960: PPUSH
21961: LD_VAR 0 5
21965: PPUSH
21966: CALL_OW 488
21970: AND
21971: IFFALSE 21995
// CutTreeXYR ( unit , x , y , 12 ) ;
21973: LD_VAR 0 2
21977: PPUSH
21978: LD_VAR 0 4
21982: PPUSH
21983: LD_VAR 0 5
21987: PPUSH
21988: LD_INT 12
21990: PPUSH
21991: CALL 22090 0 4
// if cmd = 256 then
21995: LD_VAR 0 1
21999: PUSH
22000: LD_INT 256
22002: EQUAL
22003: IFFALSE 22024
// SetFactoryWaypoint ( unit , x , y ) ;
22005: LD_VAR 0 2
22009: PPUSH
22010: LD_VAR 0 4
22014: PPUSH
22015: LD_VAR 0 5
22019: PPUSH
22020: CALL 19993 0 3
// if cmd = 257 then
22024: LD_VAR 0 1
22028: PUSH
22029: LD_INT 257
22031: EQUAL
22032: IFFALSE 22053
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22034: LD_VAR 0 2
22038: PPUSH
22039: LD_VAR 0 4
22043: PPUSH
22044: LD_VAR 0 5
22048: PPUSH
22049: CALL 20355 0 3
// if cmd = 258 then
22053: LD_VAR 0 1
22057: PUSH
22058: LD_INT 258
22060: EQUAL
22061: IFFALSE 22085
// BurnTreeXYR ( unit , x , y , 8 ) ;
22063: LD_VAR 0 2
22067: PPUSH
22068: LD_VAR 0 4
22072: PPUSH
22073: LD_VAR 0 5
22077: PPUSH
22078: LD_INT 8
22080: PPUSH
22081: CALL 22484 0 4
// end ;
22085: LD_VAR 0 6
22089: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22090: LD_INT 0
22092: PPUSH
22093: PPUSH
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22101: LD_VAR 0 1
22105: PPUSH
22106: CALL_OW 302
22110: NOT
22111: PUSH
22112: LD_VAR 0 2
22116: PPUSH
22117: LD_VAR 0 3
22121: PPUSH
22122: CALL_OW 488
22126: NOT
22127: OR
22128: PUSH
22129: LD_VAR 0 4
22133: NOT
22134: OR
22135: IFFALSE 22139
// exit ;
22137: GO 22479
// list := [ ] ;
22139: LD_ADDR_VAR 0 13
22143: PUSH
22144: EMPTY
22145: ST_TO_ADDR
// if x - r < 0 then
22146: LD_VAR 0 2
22150: PUSH
22151: LD_VAR 0 4
22155: MINUS
22156: PUSH
22157: LD_INT 0
22159: LESS
22160: IFFALSE 22172
// min_x := 0 else
22162: LD_ADDR_VAR 0 7
22166: PUSH
22167: LD_INT 0
22169: ST_TO_ADDR
22170: GO 22188
// min_x := x - r ;
22172: LD_ADDR_VAR 0 7
22176: PUSH
22177: LD_VAR 0 2
22181: PUSH
22182: LD_VAR 0 4
22186: MINUS
22187: ST_TO_ADDR
// if y - r < 0 then
22188: LD_VAR 0 3
22192: PUSH
22193: LD_VAR 0 4
22197: MINUS
22198: PUSH
22199: LD_INT 0
22201: LESS
22202: IFFALSE 22214
// min_y := 0 else
22204: LD_ADDR_VAR 0 8
22208: PUSH
22209: LD_INT 0
22211: ST_TO_ADDR
22212: GO 22230
// min_y := y - r ;
22214: LD_ADDR_VAR 0 8
22218: PUSH
22219: LD_VAR 0 3
22223: PUSH
22224: LD_VAR 0 4
22228: MINUS
22229: ST_TO_ADDR
// max_x := x + r ;
22230: LD_ADDR_VAR 0 9
22234: PUSH
22235: LD_VAR 0 2
22239: PUSH
22240: LD_VAR 0 4
22244: PLUS
22245: ST_TO_ADDR
// max_y := y + r ;
22246: LD_ADDR_VAR 0 10
22250: PUSH
22251: LD_VAR 0 3
22255: PUSH
22256: LD_VAR 0 4
22260: PLUS
22261: ST_TO_ADDR
// for _x = min_x to max_x do
22262: LD_ADDR_VAR 0 11
22266: PUSH
22267: DOUBLE
22268: LD_VAR 0 7
22272: DEC
22273: ST_TO_ADDR
22274: LD_VAR 0 9
22278: PUSH
22279: FOR_TO
22280: IFFALSE 22397
// for _y = min_y to max_y do
22282: LD_ADDR_VAR 0 12
22286: PUSH
22287: DOUBLE
22288: LD_VAR 0 8
22292: DEC
22293: ST_TO_ADDR
22294: LD_VAR 0 10
22298: PUSH
22299: FOR_TO
22300: IFFALSE 22393
// begin if not ValidHex ( _x , _y ) then
22302: LD_VAR 0 11
22306: PPUSH
22307: LD_VAR 0 12
22311: PPUSH
22312: CALL_OW 488
22316: NOT
22317: IFFALSE 22321
// continue ;
22319: GO 22299
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22321: LD_VAR 0 11
22325: PPUSH
22326: LD_VAR 0 12
22330: PPUSH
22331: CALL_OW 351
22335: PUSH
22336: LD_VAR 0 11
22340: PPUSH
22341: LD_VAR 0 12
22345: PPUSH
22346: CALL_OW 554
22350: AND
22351: IFFALSE 22391
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22353: LD_ADDR_VAR 0 13
22357: PUSH
22358: LD_VAR 0 13
22362: PPUSH
22363: LD_VAR 0 13
22367: PUSH
22368: LD_INT 1
22370: PLUS
22371: PPUSH
22372: LD_VAR 0 11
22376: PUSH
22377: LD_VAR 0 12
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PPUSH
22386: CALL_OW 2
22390: ST_TO_ADDR
// end ;
22391: GO 22299
22393: POP
22394: POP
22395: GO 22279
22397: POP
22398: POP
// if not list then
22399: LD_VAR 0 13
22403: NOT
22404: IFFALSE 22408
// exit ;
22406: GO 22479
// for i in list do
22408: LD_ADDR_VAR 0 6
22412: PUSH
22413: LD_VAR 0 13
22417: PUSH
22418: FOR_IN
22419: IFFALSE 22477
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22421: LD_VAR 0 1
22425: PPUSH
22426: LD_STRING M
22428: PUSH
22429: LD_VAR 0 6
22433: PUSH
22434: LD_INT 1
22436: ARRAY
22437: PUSH
22438: LD_VAR 0 6
22442: PUSH
22443: LD_INT 2
22445: ARRAY
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: LD_INT 0
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: PPUSH
22471: CALL_OW 447
22475: GO 22418
22477: POP
22478: POP
// end ;
22479: LD_VAR 0 5
22483: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22484: LD_INT 0
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
22490: PPUSH
22491: PPUSH
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22496: LD_VAR 0 1
22500: PPUSH
22501: CALL_OW 302
22505: NOT
22506: PUSH
22507: LD_VAR 0 2
22511: PPUSH
22512: LD_VAR 0 3
22516: PPUSH
22517: CALL_OW 488
22521: NOT
22522: OR
22523: PUSH
22524: LD_VAR 0 4
22528: NOT
22529: OR
22530: IFFALSE 22534
// exit ;
22532: GO 23047
// list := [ ] ;
22534: LD_ADDR_VAR 0 13
22538: PUSH
22539: EMPTY
22540: ST_TO_ADDR
// if x - r < 0 then
22541: LD_VAR 0 2
22545: PUSH
22546: LD_VAR 0 4
22550: MINUS
22551: PUSH
22552: LD_INT 0
22554: LESS
22555: IFFALSE 22567
// min_x := 0 else
22557: LD_ADDR_VAR 0 7
22561: PUSH
22562: LD_INT 0
22564: ST_TO_ADDR
22565: GO 22583
// min_x := x - r ;
22567: LD_ADDR_VAR 0 7
22571: PUSH
22572: LD_VAR 0 2
22576: PUSH
22577: LD_VAR 0 4
22581: MINUS
22582: ST_TO_ADDR
// if y - r < 0 then
22583: LD_VAR 0 3
22587: PUSH
22588: LD_VAR 0 4
22592: MINUS
22593: PUSH
22594: LD_INT 0
22596: LESS
22597: IFFALSE 22609
// min_y := 0 else
22599: LD_ADDR_VAR 0 8
22603: PUSH
22604: LD_INT 0
22606: ST_TO_ADDR
22607: GO 22625
// min_y := y - r ;
22609: LD_ADDR_VAR 0 8
22613: PUSH
22614: LD_VAR 0 3
22618: PUSH
22619: LD_VAR 0 4
22623: MINUS
22624: ST_TO_ADDR
// max_x := x + r ;
22625: LD_ADDR_VAR 0 9
22629: PUSH
22630: LD_VAR 0 2
22634: PUSH
22635: LD_VAR 0 4
22639: PLUS
22640: ST_TO_ADDR
// max_y := y + r ;
22641: LD_ADDR_VAR 0 10
22645: PUSH
22646: LD_VAR 0 3
22650: PUSH
22651: LD_VAR 0 4
22655: PLUS
22656: ST_TO_ADDR
// for _x = min_x to max_x do
22657: LD_ADDR_VAR 0 11
22661: PUSH
22662: DOUBLE
22663: LD_VAR 0 7
22667: DEC
22668: ST_TO_ADDR
22669: LD_VAR 0 9
22673: PUSH
22674: FOR_TO
22675: IFFALSE 22792
// for _y = min_y to max_y do
22677: LD_ADDR_VAR 0 12
22681: PUSH
22682: DOUBLE
22683: LD_VAR 0 8
22687: DEC
22688: ST_TO_ADDR
22689: LD_VAR 0 10
22693: PUSH
22694: FOR_TO
22695: IFFALSE 22788
// begin if not ValidHex ( _x , _y ) then
22697: LD_VAR 0 11
22701: PPUSH
22702: LD_VAR 0 12
22706: PPUSH
22707: CALL_OW 488
22711: NOT
22712: IFFALSE 22716
// continue ;
22714: GO 22694
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22716: LD_VAR 0 11
22720: PPUSH
22721: LD_VAR 0 12
22725: PPUSH
22726: CALL_OW 351
22730: PUSH
22731: LD_VAR 0 11
22735: PPUSH
22736: LD_VAR 0 12
22740: PPUSH
22741: CALL_OW 554
22745: AND
22746: IFFALSE 22786
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22748: LD_ADDR_VAR 0 13
22752: PUSH
22753: LD_VAR 0 13
22757: PPUSH
22758: LD_VAR 0 13
22762: PUSH
22763: LD_INT 1
22765: PLUS
22766: PPUSH
22767: LD_VAR 0 11
22771: PUSH
22772: LD_VAR 0 12
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PPUSH
22781: CALL_OW 2
22785: ST_TO_ADDR
// end ;
22786: GO 22694
22788: POP
22789: POP
22790: GO 22674
22792: POP
22793: POP
// if not list then
22794: LD_VAR 0 13
22798: NOT
22799: IFFALSE 22803
// exit ;
22801: GO 23047
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22803: LD_ADDR_VAR 0 13
22807: PUSH
22808: LD_VAR 0 1
22812: PPUSH
22813: LD_VAR 0 13
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: LD_INT 1
22823: PPUSH
22824: CALL 31882 0 4
22828: ST_TO_ADDR
// ComStop ( flame ) ;
22829: LD_VAR 0 1
22833: PPUSH
22834: CALL_OW 141
// for i in list do
22838: LD_ADDR_VAR 0 6
22842: PUSH
22843: LD_VAR 0 13
22847: PUSH
22848: FOR_IN
22849: IFFALSE 22880
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22851: LD_VAR 0 1
22855: PPUSH
22856: LD_VAR 0 6
22860: PUSH
22861: LD_INT 1
22863: ARRAY
22864: PPUSH
22865: LD_VAR 0 6
22869: PUSH
22870: LD_INT 2
22872: ARRAY
22873: PPUSH
22874: CALL_OW 176
22878: GO 22848
22880: POP
22881: POP
// repeat wait ( 0 0$1 ) ;
22882: LD_INT 35
22884: PPUSH
22885: CALL_OW 67
// task := GetTaskList ( flame ) ;
22889: LD_ADDR_VAR 0 14
22893: PUSH
22894: LD_VAR 0 1
22898: PPUSH
22899: CALL_OW 437
22903: ST_TO_ADDR
// if not task then
22904: LD_VAR 0 14
22908: NOT
22909: IFFALSE 22913
// exit ;
22911: GO 23047
// if task [ 1 ] [ 1 ] <> | then
22913: LD_VAR 0 14
22917: PUSH
22918: LD_INT 1
22920: ARRAY
22921: PUSH
22922: LD_INT 1
22924: ARRAY
22925: PUSH
22926: LD_STRING |
22928: NONEQUAL
22929: IFFALSE 22933
// exit ;
22931: GO 23047
// _x := task [ 1 ] [ 2 ] ;
22933: LD_ADDR_VAR 0 11
22937: PUSH
22938: LD_VAR 0 14
22942: PUSH
22943: LD_INT 1
22945: ARRAY
22946: PUSH
22947: LD_INT 2
22949: ARRAY
22950: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22951: LD_ADDR_VAR 0 12
22955: PUSH
22956: LD_VAR 0 14
22960: PUSH
22961: LD_INT 1
22963: ARRAY
22964: PUSH
22965: LD_INT 3
22967: ARRAY
22968: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22969: LD_VAR 0 11
22973: PPUSH
22974: LD_VAR 0 12
22978: PPUSH
22979: CALL_OW 351
22983: NOT
22984: PUSH
22985: LD_VAR 0 11
22989: PPUSH
22990: LD_VAR 0 12
22994: PPUSH
22995: CALL_OW 554
22999: NOT
23000: OR
23001: IFFALSE 23035
// begin task := Delete ( task , 1 ) ;
23003: LD_ADDR_VAR 0 14
23007: PUSH
23008: LD_VAR 0 14
23012: PPUSH
23013: LD_INT 1
23015: PPUSH
23016: CALL_OW 3
23020: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23021: LD_VAR 0 1
23025: PPUSH
23026: LD_VAR 0 14
23030: PPUSH
23031: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23035: LD_VAR 0 1
23039: PPUSH
23040: CALL_OW 314
23044: NOT
23045: IFFALSE 22882
// end ;
23047: LD_VAR 0 5
23051: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23052: LD_EXP 87
23056: NOT
23057: IFFALSE 23107
23059: GO 23061
23061: DISABLE
// begin initHack := true ;
23062: LD_ADDR_EXP 87
23066: PUSH
23067: LD_INT 1
23069: ST_TO_ADDR
// hackTanks := [ ] ;
23070: LD_ADDR_EXP 88
23074: PUSH
23075: EMPTY
23076: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23077: LD_ADDR_EXP 89
23081: PUSH
23082: EMPTY
23083: ST_TO_ADDR
// hackLimit := 3 ;
23084: LD_ADDR_EXP 90
23088: PUSH
23089: LD_INT 3
23091: ST_TO_ADDR
// hackDist := 12 ;
23092: LD_ADDR_EXP 91
23096: PUSH
23097: LD_INT 12
23099: ST_TO_ADDR
// hackCounter := [ ] ;
23100: LD_ADDR_EXP 92
23104: PUSH
23105: EMPTY
23106: ST_TO_ADDR
// end ;
23107: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23108: LD_EXP 87
23112: PUSH
23113: LD_INT 34
23115: PUSH
23116: LD_INT 99
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 69
23127: AND
23128: IFFALSE 23381
23130: GO 23132
23132: DISABLE
23133: LD_INT 0
23135: PPUSH
23136: PPUSH
// begin enable ;
23137: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23138: LD_ADDR_VAR 0 1
23142: PUSH
23143: LD_INT 34
23145: PUSH
23146: LD_INT 99
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PPUSH
23153: CALL_OW 69
23157: PUSH
23158: FOR_IN
23159: IFFALSE 23379
// begin if not i in hackTanks then
23161: LD_VAR 0 1
23165: PUSH
23166: LD_EXP 88
23170: IN
23171: NOT
23172: IFFALSE 23255
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23174: LD_ADDR_EXP 88
23178: PUSH
23179: LD_EXP 88
23183: PPUSH
23184: LD_EXP 88
23188: PUSH
23189: LD_INT 1
23191: PLUS
23192: PPUSH
23193: LD_VAR 0 1
23197: PPUSH
23198: CALL_OW 1
23202: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23203: LD_ADDR_EXP 89
23207: PUSH
23208: LD_EXP 89
23212: PPUSH
23213: LD_EXP 89
23217: PUSH
23218: LD_INT 1
23220: PLUS
23221: PPUSH
23222: EMPTY
23223: PPUSH
23224: CALL_OW 1
23228: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23229: LD_ADDR_EXP 92
23233: PUSH
23234: LD_EXP 92
23238: PPUSH
23239: LD_EXP 92
23243: PUSH
23244: LD_INT 1
23246: PLUS
23247: PPUSH
23248: EMPTY
23249: PPUSH
23250: CALL_OW 1
23254: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23255: LD_VAR 0 1
23259: PPUSH
23260: CALL_OW 302
23264: NOT
23265: IFFALSE 23278
// begin HackUnlinkAll ( i ) ;
23267: LD_VAR 0 1
23271: PPUSH
23272: CALL 23384 0 1
// continue ;
23276: GO 23158
// end ; HackCheckCapturedStatus ( i ) ;
23278: LD_VAR 0 1
23282: PPUSH
23283: CALL 23827 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_INT 81
23294: PUSH
23295: LD_VAR 0 1
23299: PPUSH
23300: CALL_OW 255
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 33
23311: PUSH
23312: LD_INT 3
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 91
23321: PUSH
23322: LD_VAR 0 1
23326: PUSH
23327: LD_EXP 91
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 50
23339: PUSH
23340: EMPTY
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: PPUSH
23349: CALL_OW 69
23353: ST_TO_ADDR
// if not tmp then
23354: LD_VAR 0 2
23358: NOT
23359: IFFALSE 23363
// continue ;
23361: GO 23158
// HackLink ( i , tmp ) ;
23363: LD_VAR 0 1
23367: PPUSH
23368: LD_VAR 0 2
23372: PPUSH
23373: CALL 23520 0 2
// end ;
23377: GO 23158
23379: POP
23380: POP
// end ;
23381: PPOPN 2
23383: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23384: LD_INT 0
23386: PPUSH
23387: PPUSH
23388: PPUSH
// if not hack in hackTanks then
23389: LD_VAR 0 1
23393: PUSH
23394: LD_EXP 88
23398: IN
23399: NOT
23400: IFFALSE 23404
// exit ;
23402: GO 23515
// index := GetElementIndex ( hackTanks , hack ) ;
23404: LD_ADDR_VAR 0 4
23408: PUSH
23409: LD_EXP 88
23413: PPUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL 31179 0 2
23423: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23424: LD_EXP 89
23428: PUSH
23429: LD_VAR 0 4
23433: ARRAY
23434: IFFALSE 23515
// begin for i in hackTanksCaptured [ index ] do
23436: LD_ADDR_VAR 0 3
23440: PUSH
23441: LD_EXP 89
23445: PUSH
23446: LD_VAR 0 4
23450: ARRAY
23451: PUSH
23452: FOR_IN
23453: IFFALSE 23479
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23455: LD_VAR 0 3
23459: PUSH
23460: LD_INT 1
23462: ARRAY
23463: PPUSH
23464: LD_VAR 0 3
23468: PUSH
23469: LD_INT 2
23471: ARRAY
23472: PPUSH
23473: CALL_OW 235
23477: GO 23452
23479: POP
23480: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23481: LD_ADDR_EXP 89
23485: PUSH
23486: LD_EXP 89
23490: PPUSH
23491: LD_VAR 0 4
23495: PPUSH
23496: EMPTY
23497: PPUSH
23498: CALL_OW 1
23502: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23503: LD_VAR 0 1
23507: PPUSH
23508: LD_INT 0
23510: PPUSH
23511: CALL_OW 505
// end ; end ;
23515: LD_VAR 0 2
23519: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23520: LD_INT 0
23522: PPUSH
23523: PPUSH
23524: PPUSH
// if not hack in hackTanks or not vehicles then
23525: LD_VAR 0 1
23529: PUSH
23530: LD_EXP 88
23534: IN
23535: NOT
23536: PUSH
23537: LD_VAR 0 2
23541: NOT
23542: OR
23543: IFFALSE 23547
// exit ;
23545: GO 23822
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23547: LD_ADDR_VAR 0 2
23551: PUSH
23552: LD_VAR 0 1
23556: PPUSH
23557: LD_VAR 0 2
23561: PPUSH
23562: LD_INT 1
23564: PPUSH
23565: LD_INT 1
23567: PPUSH
23568: CALL 31829 0 4
23572: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23573: LD_ADDR_VAR 0 5
23577: PUSH
23578: LD_EXP 88
23582: PPUSH
23583: LD_VAR 0 1
23587: PPUSH
23588: CALL 31179 0 2
23592: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23593: LD_EXP 89
23597: PUSH
23598: LD_VAR 0 5
23602: ARRAY
23603: PUSH
23604: LD_EXP 90
23608: LESS
23609: IFFALSE 23798
// begin for i := 1 to vehicles do
23611: LD_ADDR_VAR 0 4
23615: PUSH
23616: DOUBLE
23617: LD_INT 1
23619: DEC
23620: ST_TO_ADDR
23621: LD_VAR 0 2
23625: PUSH
23626: FOR_TO
23627: IFFALSE 23796
// begin if hackTanksCaptured [ index ] = hackLimit then
23629: LD_EXP 89
23633: PUSH
23634: LD_VAR 0 5
23638: ARRAY
23639: PUSH
23640: LD_EXP 90
23644: EQUAL
23645: IFFALSE 23649
// break ;
23647: GO 23796
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23649: LD_ADDR_EXP 92
23653: PUSH
23654: LD_EXP 92
23658: PPUSH
23659: LD_VAR 0 5
23663: PPUSH
23664: LD_EXP 92
23668: PUSH
23669: LD_VAR 0 5
23673: ARRAY
23674: PUSH
23675: LD_INT 1
23677: PLUS
23678: PPUSH
23679: CALL_OW 1
23683: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23684: LD_ADDR_EXP 89
23688: PUSH
23689: LD_EXP 89
23693: PPUSH
23694: LD_VAR 0 5
23698: PUSH
23699: LD_EXP 89
23703: PUSH
23704: LD_VAR 0 5
23708: ARRAY
23709: PUSH
23710: LD_INT 1
23712: PLUS
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PPUSH
23718: LD_VAR 0 2
23722: PUSH
23723: LD_VAR 0 4
23727: ARRAY
23728: PUSH
23729: LD_VAR 0 2
23733: PUSH
23734: LD_VAR 0 4
23738: ARRAY
23739: PPUSH
23740: CALL_OW 255
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PPUSH
23749: CALL 31394 0 3
23753: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23754: LD_VAR 0 2
23758: PUSH
23759: LD_VAR 0 4
23763: ARRAY
23764: PPUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 255
23774: PPUSH
23775: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23779: LD_VAR 0 2
23783: PUSH
23784: LD_VAR 0 4
23788: ARRAY
23789: PPUSH
23790: CALL_OW 141
// end ;
23794: GO 23626
23796: POP
23797: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23798: LD_VAR 0 1
23802: PPUSH
23803: LD_EXP 89
23807: PUSH
23808: LD_VAR 0 5
23812: ARRAY
23813: PUSH
23814: LD_INT 0
23816: PLUS
23817: PPUSH
23818: CALL_OW 505
// end ;
23822: LD_VAR 0 3
23826: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23827: LD_INT 0
23829: PPUSH
23830: PPUSH
23831: PPUSH
23832: PPUSH
// if not hack in hackTanks then
23833: LD_VAR 0 1
23837: PUSH
23838: LD_EXP 88
23842: IN
23843: NOT
23844: IFFALSE 23848
// exit ;
23846: GO 24088
// index := GetElementIndex ( hackTanks , hack ) ;
23848: LD_ADDR_VAR 0 4
23852: PUSH
23853: LD_EXP 88
23857: PPUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL 31179 0 2
23867: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23868: LD_ADDR_VAR 0 3
23872: PUSH
23873: DOUBLE
23874: LD_EXP 89
23878: PUSH
23879: LD_VAR 0 4
23883: ARRAY
23884: INC
23885: ST_TO_ADDR
23886: LD_INT 1
23888: PUSH
23889: FOR_DOWNTO
23890: IFFALSE 24062
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23892: LD_ADDR_VAR 0 5
23896: PUSH
23897: LD_EXP 89
23901: PUSH
23902: LD_VAR 0 4
23906: ARRAY
23907: PUSH
23908: LD_VAR 0 3
23912: ARRAY
23913: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23914: LD_VAR 0 5
23918: PUSH
23919: LD_INT 1
23921: ARRAY
23922: PPUSH
23923: CALL_OW 302
23927: NOT
23928: PUSH
23929: LD_VAR 0 5
23933: PUSH
23934: LD_INT 1
23936: ARRAY
23937: PPUSH
23938: CALL_OW 255
23942: PUSH
23943: LD_VAR 0 1
23947: PPUSH
23948: CALL_OW 255
23952: NONEQUAL
23953: OR
23954: IFFALSE 24060
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23956: LD_VAR 0 5
23960: PUSH
23961: LD_INT 1
23963: ARRAY
23964: PPUSH
23965: CALL_OW 305
23969: PUSH
23970: LD_VAR 0 5
23974: PUSH
23975: LD_INT 1
23977: ARRAY
23978: PPUSH
23979: CALL_OW 255
23983: PUSH
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 255
23993: EQUAL
23994: AND
23995: IFFALSE 24019
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23997: LD_VAR 0 5
24001: PUSH
24002: LD_INT 1
24004: ARRAY
24005: PPUSH
24006: LD_VAR 0 5
24010: PUSH
24011: LD_INT 2
24013: ARRAY
24014: PPUSH
24015: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24019: LD_ADDR_EXP 89
24023: PUSH
24024: LD_EXP 89
24028: PPUSH
24029: LD_VAR 0 4
24033: PPUSH
24034: LD_EXP 89
24038: PUSH
24039: LD_VAR 0 4
24043: ARRAY
24044: PPUSH
24045: LD_VAR 0 3
24049: PPUSH
24050: CALL_OW 3
24054: PPUSH
24055: CALL_OW 1
24059: ST_TO_ADDR
// end ; end ;
24060: GO 23889
24062: POP
24063: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24064: LD_VAR 0 1
24068: PPUSH
24069: LD_EXP 89
24073: PUSH
24074: LD_VAR 0 4
24078: ARRAY
24079: PUSH
24080: LD_INT 0
24082: PLUS
24083: PPUSH
24084: CALL_OW 505
// end ;
24088: LD_VAR 0 2
24092: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24093: LD_INT 0
24095: PPUSH
24096: PPUSH
24097: PPUSH
24098: PPUSH
// if not hack in hackTanks then
24099: LD_VAR 0 1
24103: PUSH
24104: LD_EXP 88
24108: IN
24109: NOT
24110: IFFALSE 24114
// exit ;
24112: GO 24199
// index := GetElementIndex ( hackTanks , hack ) ;
24114: LD_ADDR_VAR 0 5
24118: PUSH
24119: LD_EXP 88
24123: PPUSH
24124: LD_VAR 0 1
24128: PPUSH
24129: CALL 31179 0 2
24133: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: DOUBLE
24140: LD_INT 1
24142: DEC
24143: ST_TO_ADDR
24144: LD_EXP 89
24148: PUSH
24149: LD_VAR 0 5
24153: ARRAY
24154: PUSH
24155: FOR_TO
24156: IFFALSE 24197
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24158: LD_EXP 89
24162: PUSH
24163: LD_VAR 0 5
24167: ARRAY
24168: PUSH
24169: LD_VAR 0 4
24173: ARRAY
24174: PUSH
24175: LD_INT 1
24177: ARRAY
24178: PUSH
24179: LD_VAR 0 2
24183: EQUAL
24184: IFFALSE 24195
// KillUnit ( vehicle ) ;
24186: LD_VAR 0 2
24190: PPUSH
24191: CALL_OW 66
24195: GO 24155
24197: POP
24198: POP
// end ;
24199: LD_VAR 0 3
24203: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24204: LD_EXP 93
24208: NOT
24209: IFFALSE 24244
24211: GO 24213
24213: DISABLE
// begin initMiner := true ;
24214: LD_ADDR_EXP 93
24218: PUSH
24219: LD_INT 1
24221: ST_TO_ADDR
// minersList := [ ] ;
24222: LD_ADDR_EXP 94
24226: PUSH
24227: EMPTY
24228: ST_TO_ADDR
// minerMinesList := [ ] ;
24229: LD_ADDR_EXP 95
24233: PUSH
24234: EMPTY
24235: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24236: LD_ADDR_EXP 96
24240: PUSH
24241: LD_INT 5
24243: ST_TO_ADDR
// end ;
24244: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24245: LD_EXP 93
24249: PUSH
24250: LD_INT 34
24252: PUSH
24253: LD_INT 81
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 69
24264: AND
24265: IFFALSE 24726
24267: GO 24269
24269: DISABLE
24270: LD_INT 0
24272: PPUSH
24273: PPUSH
24274: PPUSH
24275: PPUSH
// begin enable ;
24276: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24277: LD_ADDR_VAR 0 1
24281: PUSH
24282: LD_INT 34
24284: PUSH
24285: LD_INT 81
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PPUSH
24292: CALL_OW 69
24296: PUSH
24297: FOR_IN
24298: IFFALSE 24370
// begin if not i in minersList then
24300: LD_VAR 0 1
24304: PUSH
24305: LD_EXP 94
24309: IN
24310: NOT
24311: IFFALSE 24368
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24313: LD_ADDR_EXP 94
24317: PUSH
24318: LD_EXP 94
24322: PPUSH
24323: LD_EXP 94
24327: PUSH
24328: LD_INT 1
24330: PLUS
24331: PPUSH
24332: LD_VAR 0 1
24336: PPUSH
24337: CALL_OW 1
24341: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24342: LD_ADDR_EXP 95
24346: PUSH
24347: LD_EXP 95
24351: PPUSH
24352: LD_EXP 95
24356: PUSH
24357: LD_INT 1
24359: PLUS
24360: PPUSH
24361: EMPTY
24362: PPUSH
24363: CALL_OW 1
24367: ST_TO_ADDR
// end end ;
24368: GO 24297
24370: POP
24371: POP
// for i := minerMinesList downto 1 do
24372: LD_ADDR_VAR 0 1
24376: PUSH
24377: DOUBLE
24378: LD_EXP 95
24382: INC
24383: ST_TO_ADDR
24384: LD_INT 1
24386: PUSH
24387: FOR_DOWNTO
24388: IFFALSE 24724
// begin if IsLive ( minersList [ i ] ) then
24390: LD_EXP 94
24394: PUSH
24395: LD_VAR 0 1
24399: ARRAY
24400: PPUSH
24401: CALL_OW 300
24405: IFFALSE 24433
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24407: LD_EXP 94
24411: PUSH
24412: LD_VAR 0 1
24416: ARRAY
24417: PPUSH
24418: LD_EXP 95
24422: PUSH
24423: LD_VAR 0 1
24427: ARRAY
24428: PPUSH
24429: CALL_OW 505
// if not minerMinesList [ i ] then
24433: LD_EXP 95
24437: PUSH
24438: LD_VAR 0 1
24442: ARRAY
24443: NOT
24444: IFFALSE 24448
// continue ;
24446: GO 24387
// for j := minerMinesList [ i ] downto 1 do
24448: LD_ADDR_VAR 0 2
24452: PUSH
24453: DOUBLE
24454: LD_EXP 95
24458: PUSH
24459: LD_VAR 0 1
24463: ARRAY
24464: INC
24465: ST_TO_ADDR
24466: LD_INT 1
24468: PUSH
24469: FOR_DOWNTO
24470: IFFALSE 24720
// begin side := GetSide ( minersList [ i ] ) ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_EXP 94
24481: PUSH
24482: LD_VAR 0 1
24486: ARRAY
24487: PPUSH
24488: CALL_OW 255
24492: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24493: LD_ADDR_VAR 0 4
24497: PUSH
24498: LD_EXP 95
24502: PUSH
24503: LD_VAR 0 1
24507: ARRAY
24508: PUSH
24509: LD_VAR 0 2
24513: ARRAY
24514: PUSH
24515: LD_INT 1
24517: ARRAY
24518: PPUSH
24519: LD_EXP 95
24523: PUSH
24524: LD_VAR 0 1
24528: ARRAY
24529: PUSH
24530: LD_VAR 0 2
24534: ARRAY
24535: PUSH
24536: LD_INT 2
24538: ARRAY
24539: PPUSH
24540: CALL_OW 428
24544: ST_TO_ADDR
// if not tmp then
24545: LD_VAR 0 4
24549: NOT
24550: IFFALSE 24554
// continue ;
24552: GO 24469
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24554: LD_VAR 0 4
24558: PUSH
24559: LD_INT 81
24561: PUSH
24562: LD_VAR 0 3
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PPUSH
24571: CALL_OW 69
24575: IN
24576: PUSH
24577: LD_EXP 95
24581: PUSH
24582: LD_VAR 0 1
24586: ARRAY
24587: PUSH
24588: LD_VAR 0 2
24592: ARRAY
24593: PUSH
24594: LD_INT 1
24596: ARRAY
24597: PPUSH
24598: LD_EXP 95
24602: PUSH
24603: LD_VAR 0 1
24607: ARRAY
24608: PUSH
24609: LD_VAR 0 2
24613: ARRAY
24614: PUSH
24615: LD_INT 2
24617: ARRAY
24618: PPUSH
24619: CALL_OW 458
24623: AND
24624: IFFALSE 24718
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24626: LD_EXP 95
24630: PUSH
24631: LD_VAR 0 1
24635: ARRAY
24636: PUSH
24637: LD_VAR 0 2
24641: ARRAY
24642: PUSH
24643: LD_INT 1
24645: ARRAY
24646: PPUSH
24647: LD_EXP 95
24651: PUSH
24652: LD_VAR 0 1
24656: ARRAY
24657: PUSH
24658: LD_VAR 0 2
24662: ARRAY
24663: PUSH
24664: LD_INT 2
24666: ARRAY
24667: PPUSH
24668: LD_VAR 0 3
24672: PPUSH
24673: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24677: LD_ADDR_EXP 95
24681: PUSH
24682: LD_EXP 95
24686: PPUSH
24687: LD_VAR 0 1
24691: PPUSH
24692: LD_EXP 95
24696: PUSH
24697: LD_VAR 0 1
24701: ARRAY
24702: PPUSH
24703: LD_VAR 0 2
24707: PPUSH
24708: CALL_OW 3
24712: PPUSH
24713: CALL_OW 1
24717: ST_TO_ADDR
// end ; end ;
24718: GO 24469
24720: POP
24721: POP
// end ;
24722: GO 24387
24724: POP
24725: POP
// end ;
24726: PPOPN 4
24728: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24729: LD_INT 0
24731: PPUSH
24732: PPUSH
// result := false ;
24733: LD_ADDR_VAR 0 4
24737: PUSH
24738: LD_INT 0
24740: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24741: LD_VAR 0 1
24745: PPUSH
24746: CALL_OW 264
24750: PUSH
24751: LD_INT 81
24753: EQUAL
24754: NOT
24755: IFFALSE 24759
// exit ;
24757: GO 24999
// index := GetElementIndex ( minersList , unit ) ;
24759: LD_ADDR_VAR 0 5
24763: PUSH
24764: LD_EXP 94
24768: PPUSH
24769: LD_VAR 0 1
24773: PPUSH
24774: CALL 31179 0 2
24778: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24779: LD_EXP 95
24783: PUSH
24784: LD_VAR 0 5
24788: ARRAY
24789: PUSH
24790: LD_EXP 96
24794: GREATEREQUAL
24795: IFFALSE 24799
// exit ;
24797: GO 24999
// ComMoveXY ( unit , x , y ) ;
24799: LD_VAR 0 1
24803: PPUSH
24804: LD_VAR 0 2
24808: PPUSH
24809: LD_VAR 0 3
24813: PPUSH
24814: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24818: LD_INT 35
24820: PPUSH
24821: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24825: LD_VAR 0 1
24829: PPUSH
24830: LD_VAR 0 2
24834: PPUSH
24835: LD_VAR 0 3
24839: PPUSH
24840: CALL 62920 0 3
24844: NOT
24845: PUSH
24846: LD_VAR 0 1
24850: PPUSH
24851: CALL_OW 314
24855: AND
24856: IFFALSE 24860
// exit ;
24858: GO 24999
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24860: LD_VAR 0 2
24864: PPUSH
24865: LD_VAR 0 3
24869: PPUSH
24870: CALL_OW 428
24874: PUSH
24875: LD_VAR 0 1
24879: EQUAL
24880: PUSH
24881: LD_VAR 0 1
24885: PPUSH
24886: CALL_OW 314
24890: NOT
24891: AND
24892: IFFALSE 24818
// PlaySoundXY ( x , y , PlantMine ) ;
24894: LD_VAR 0 2
24898: PPUSH
24899: LD_VAR 0 3
24903: PPUSH
24904: LD_STRING PlantMine
24906: PPUSH
24907: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24911: LD_VAR 0 2
24915: PPUSH
24916: LD_VAR 0 3
24920: PPUSH
24921: LD_VAR 0 1
24925: PPUSH
24926: CALL_OW 255
24930: PPUSH
24931: LD_INT 0
24933: PPUSH
24934: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24938: LD_ADDR_EXP 95
24942: PUSH
24943: LD_EXP 95
24947: PPUSH
24948: LD_VAR 0 5
24952: PUSH
24953: LD_EXP 95
24957: PUSH
24958: LD_VAR 0 5
24962: ARRAY
24963: PUSH
24964: LD_INT 1
24966: PLUS
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PPUSH
24972: LD_VAR 0 2
24976: PUSH
24977: LD_VAR 0 3
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL 31394 0 3
24990: ST_TO_ADDR
// result := true ;
24991: LD_ADDR_VAR 0 4
24995: PUSH
24996: LD_INT 1
24998: ST_TO_ADDR
// end ;
24999: LD_VAR 0 4
25003: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25004: LD_INT 0
25006: PPUSH
25007: PPUSH
25008: PPUSH
// if not unit in minersList then
25009: LD_VAR 0 1
25013: PUSH
25014: LD_EXP 94
25018: IN
25019: NOT
25020: IFFALSE 25024
// exit ;
25022: GO 25416
// index := GetElementIndex ( minersList , unit ) ;
25024: LD_ADDR_VAR 0 6
25028: PUSH
25029: LD_EXP 94
25033: PPUSH
25034: LD_VAR 0 1
25038: PPUSH
25039: CALL 31179 0 2
25043: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25044: LD_ADDR_VAR 0 5
25048: PUSH
25049: DOUBLE
25050: LD_EXP 95
25054: PUSH
25055: LD_VAR 0 6
25059: ARRAY
25060: INC
25061: ST_TO_ADDR
25062: LD_INT 1
25064: PUSH
25065: FOR_DOWNTO
25066: IFFALSE 25227
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25068: LD_EXP 95
25072: PUSH
25073: LD_VAR 0 6
25077: ARRAY
25078: PUSH
25079: LD_VAR 0 5
25083: ARRAY
25084: PUSH
25085: LD_INT 1
25087: ARRAY
25088: PUSH
25089: LD_VAR 0 2
25093: EQUAL
25094: PUSH
25095: LD_EXP 95
25099: PUSH
25100: LD_VAR 0 6
25104: ARRAY
25105: PUSH
25106: LD_VAR 0 5
25110: ARRAY
25111: PUSH
25112: LD_INT 2
25114: ARRAY
25115: PUSH
25116: LD_VAR 0 3
25120: EQUAL
25121: AND
25122: IFFALSE 25225
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25124: LD_EXP 95
25128: PUSH
25129: LD_VAR 0 6
25133: ARRAY
25134: PUSH
25135: LD_VAR 0 5
25139: ARRAY
25140: PUSH
25141: LD_INT 1
25143: ARRAY
25144: PPUSH
25145: LD_EXP 95
25149: PUSH
25150: LD_VAR 0 6
25154: ARRAY
25155: PUSH
25156: LD_VAR 0 5
25160: ARRAY
25161: PUSH
25162: LD_INT 2
25164: ARRAY
25165: PPUSH
25166: LD_VAR 0 1
25170: PPUSH
25171: CALL_OW 255
25175: PPUSH
25176: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25180: LD_ADDR_EXP 95
25184: PUSH
25185: LD_EXP 95
25189: PPUSH
25190: LD_VAR 0 6
25194: PPUSH
25195: LD_EXP 95
25199: PUSH
25200: LD_VAR 0 6
25204: ARRAY
25205: PPUSH
25206: LD_VAR 0 5
25210: PPUSH
25211: CALL_OW 3
25215: PPUSH
25216: CALL_OW 1
25220: ST_TO_ADDR
// exit ;
25221: POP
25222: POP
25223: GO 25416
// end ; end ;
25225: GO 25065
25227: POP
25228: POP
// for i := minerMinesList [ index ] downto 1 do
25229: LD_ADDR_VAR 0 5
25233: PUSH
25234: DOUBLE
25235: LD_EXP 95
25239: PUSH
25240: LD_VAR 0 6
25244: ARRAY
25245: INC
25246: ST_TO_ADDR
25247: LD_INT 1
25249: PUSH
25250: FOR_DOWNTO
25251: IFFALSE 25414
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25253: LD_EXP 95
25257: PUSH
25258: LD_VAR 0 6
25262: ARRAY
25263: PUSH
25264: LD_VAR 0 5
25268: ARRAY
25269: PUSH
25270: LD_INT 1
25272: ARRAY
25273: PPUSH
25274: LD_EXP 95
25278: PUSH
25279: LD_VAR 0 6
25283: ARRAY
25284: PUSH
25285: LD_VAR 0 5
25289: ARRAY
25290: PUSH
25291: LD_INT 2
25293: ARRAY
25294: PPUSH
25295: LD_VAR 0 2
25299: PPUSH
25300: LD_VAR 0 3
25304: PPUSH
25305: CALL_OW 298
25309: PUSH
25310: LD_INT 6
25312: LESS
25313: IFFALSE 25412
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25315: LD_EXP 95
25319: PUSH
25320: LD_VAR 0 6
25324: ARRAY
25325: PUSH
25326: LD_VAR 0 5
25330: ARRAY
25331: PUSH
25332: LD_INT 1
25334: ARRAY
25335: PPUSH
25336: LD_EXP 95
25340: PUSH
25341: LD_VAR 0 6
25345: ARRAY
25346: PUSH
25347: LD_VAR 0 5
25351: ARRAY
25352: PUSH
25353: LD_INT 2
25355: ARRAY
25356: PPUSH
25357: LD_VAR 0 1
25361: PPUSH
25362: CALL_OW 255
25366: PPUSH
25367: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25371: LD_ADDR_EXP 95
25375: PUSH
25376: LD_EXP 95
25380: PPUSH
25381: LD_VAR 0 6
25385: PPUSH
25386: LD_EXP 95
25390: PUSH
25391: LD_VAR 0 6
25395: ARRAY
25396: PPUSH
25397: LD_VAR 0 5
25401: PPUSH
25402: CALL_OW 3
25406: PPUSH
25407: CALL_OW 1
25411: ST_TO_ADDR
// end ; end ;
25412: GO 25250
25414: POP
25415: POP
// end ;
25416: LD_VAR 0 4
25420: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25421: LD_INT 0
25423: PPUSH
25424: PPUSH
25425: PPUSH
25426: PPUSH
25427: PPUSH
25428: PPUSH
25429: PPUSH
25430: PPUSH
25431: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25432: LD_VAR 0 1
25436: PPUSH
25437: CALL_OW 264
25441: PUSH
25442: LD_INT 81
25444: EQUAL
25445: NOT
25446: PUSH
25447: LD_VAR 0 1
25451: PUSH
25452: LD_EXP 94
25456: IN
25457: NOT
25458: OR
25459: IFFALSE 25463
// exit ;
25461: GO 25785
// index := GetElementIndex ( minersList , unit ) ;
25463: LD_ADDR_VAR 0 6
25467: PUSH
25468: LD_EXP 94
25472: PPUSH
25473: LD_VAR 0 1
25477: PPUSH
25478: CALL 31179 0 2
25482: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25483: LD_ADDR_VAR 0 8
25487: PUSH
25488: LD_EXP 96
25492: PUSH
25493: LD_EXP 95
25497: PUSH
25498: LD_VAR 0 6
25502: ARRAY
25503: MINUS
25504: ST_TO_ADDR
// if not minesFreeAmount then
25505: LD_VAR 0 8
25509: NOT
25510: IFFALSE 25514
// exit ;
25512: GO 25785
// tmp := [ ] ;
25514: LD_ADDR_VAR 0 7
25518: PUSH
25519: EMPTY
25520: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25521: LD_ADDR_VAR 0 5
25525: PUSH
25526: DOUBLE
25527: LD_INT 1
25529: DEC
25530: ST_TO_ADDR
25531: LD_VAR 0 8
25535: PUSH
25536: FOR_TO
25537: IFFALSE 25732
// begin _d := rand ( 0 , 5 ) ;
25539: LD_ADDR_VAR 0 11
25543: PUSH
25544: LD_INT 0
25546: PPUSH
25547: LD_INT 5
25549: PPUSH
25550: CALL_OW 12
25554: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25555: LD_ADDR_VAR 0 12
25559: PUSH
25560: LD_INT 2
25562: PPUSH
25563: LD_INT 6
25565: PPUSH
25566: CALL_OW 12
25570: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25571: LD_ADDR_VAR 0 9
25575: PUSH
25576: LD_VAR 0 2
25580: PPUSH
25581: LD_VAR 0 11
25585: PPUSH
25586: LD_VAR 0 12
25590: PPUSH
25591: CALL_OW 272
25595: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25596: LD_ADDR_VAR 0 10
25600: PUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: LD_VAR 0 11
25610: PPUSH
25611: LD_VAR 0 12
25615: PPUSH
25616: CALL_OW 273
25620: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25621: LD_VAR 0 9
25625: PPUSH
25626: LD_VAR 0 10
25630: PPUSH
25631: CALL_OW 488
25635: PUSH
25636: LD_VAR 0 9
25640: PUSH
25641: LD_VAR 0 10
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_VAR 0 7
25654: IN
25655: NOT
25656: AND
25657: PUSH
25658: LD_VAR 0 9
25662: PPUSH
25663: LD_VAR 0 10
25667: PPUSH
25668: CALL_OW 458
25672: NOT
25673: AND
25674: IFFALSE 25716
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25676: LD_ADDR_VAR 0 7
25680: PUSH
25681: LD_VAR 0 7
25685: PPUSH
25686: LD_VAR 0 7
25690: PUSH
25691: LD_INT 1
25693: PLUS
25694: PPUSH
25695: LD_VAR 0 9
25699: PUSH
25700: LD_VAR 0 10
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 1
25713: ST_TO_ADDR
25714: GO 25730
// i := i - 1 ;
25716: LD_ADDR_VAR 0 5
25720: PUSH
25721: LD_VAR 0 5
25725: PUSH
25726: LD_INT 1
25728: MINUS
25729: ST_TO_ADDR
// end ;
25730: GO 25536
25732: POP
25733: POP
// for i in tmp do
25734: LD_ADDR_VAR 0 5
25738: PUSH
25739: LD_VAR 0 7
25743: PUSH
25744: FOR_IN
25745: IFFALSE 25783
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25747: LD_VAR 0 1
25751: PPUSH
25752: LD_VAR 0 5
25756: PUSH
25757: LD_INT 1
25759: ARRAY
25760: PPUSH
25761: LD_VAR 0 5
25765: PUSH
25766: LD_INT 2
25768: ARRAY
25769: PPUSH
25770: CALL 24729 0 3
25774: NOT
25775: IFFALSE 25781
// exit ;
25777: POP
25778: POP
25779: GO 25785
25781: GO 25744
25783: POP
25784: POP
// end ;
25785: LD_VAR 0 4
25789: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25790: LD_INT 0
25792: PPUSH
25793: PPUSH
25794: PPUSH
25795: PPUSH
25796: PPUSH
25797: PPUSH
25798: PPUSH
// if not GetClass ( unit ) = class_sniper then
25799: LD_VAR 0 1
25803: PPUSH
25804: CALL_OW 257
25808: PUSH
25809: LD_INT 5
25811: EQUAL
25812: NOT
25813: IFFALSE 25817
// exit ;
25815: GO 26205
// dist := 8 ;
25817: LD_ADDR_VAR 0 5
25821: PUSH
25822: LD_INT 8
25824: ST_TO_ADDR
// viewRange := 12 ;
25825: LD_ADDR_VAR 0 7
25829: PUSH
25830: LD_INT 12
25832: ST_TO_ADDR
// side := GetSide ( unit ) ;
25833: LD_ADDR_VAR 0 6
25837: PUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL_OW 255
25847: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25848: LD_INT 61
25850: PPUSH
25851: LD_VAR 0 6
25855: PPUSH
25856: CALL_OW 321
25860: PUSH
25861: LD_INT 2
25863: EQUAL
25864: IFFALSE 25874
// viewRange := 16 ;
25866: LD_ADDR_VAR 0 7
25870: PUSH
25871: LD_INT 16
25873: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25874: LD_VAR 0 1
25878: PPUSH
25879: LD_VAR 0 2
25883: PPUSH
25884: LD_VAR 0 3
25888: PPUSH
25889: CALL_OW 297
25893: PUSH
25894: LD_VAR 0 5
25898: GREATER
25899: IFFALSE 25978
// begin ComMoveXY ( unit , x , y ) ;
25901: LD_VAR 0 1
25905: PPUSH
25906: LD_VAR 0 2
25910: PPUSH
25911: LD_VAR 0 3
25915: PPUSH
25916: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25920: LD_INT 35
25922: PPUSH
25923: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25927: LD_VAR 0 1
25931: PPUSH
25932: LD_VAR 0 2
25936: PPUSH
25937: LD_VAR 0 3
25941: PPUSH
25942: CALL 62920 0 3
25946: NOT
25947: IFFALSE 25951
// exit ;
25949: GO 26205
// until GetDistUnitXY ( unit , x , y ) < dist ;
25951: LD_VAR 0 1
25955: PPUSH
25956: LD_VAR 0 2
25960: PPUSH
25961: LD_VAR 0 3
25965: PPUSH
25966: CALL_OW 297
25970: PUSH
25971: LD_VAR 0 5
25975: LESS
25976: IFFALSE 25920
// end ; ComTurnXY ( unit , x , y ) ;
25978: LD_VAR 0 1
25982: PPUSH
25983: LD_VAR 0 2
25987: PPUSH
25988: LD_VAR 0 3
25992: PPUSH
25993: CALL_OW 118
// wait ( 5 ) ;
25997: LD_INT 5
25999: PPUSH
26000: CALL_OW 67
// _d := GetDir ( unit ) ;
26004: LD_ADDR_VAR 0 10
26008: PUSH
26009: LD_VAR 0 1
26013: PPUSH
26014: CALL_OW 254
26018: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26019: LD_ADDR_VAR 0 8
26023: PUSH
26024: LD_VAR 0 1
26028: PPUSH
26029: CALL_OW 250
26033: PPUSH
26034: LD_VAR 0 10
26038: PPUSH
26039: LD_VAR 0 5
26043: PPUSH
26044: CALL_OW 272
26048: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26049: LD_ADDR_VAR 0 9
26053: PUSH
26054: LD_VAR 0 1
26058: PPUSH
26059: CALL_OW 251
26063: PPUSH
26064: LD_VAR 0 10
26068: PPUSH
26069: LD_VAR 0 5
26073: PPUSH
26074: CALL_OW 273
26078: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26079: LD_VAR 0 8
26083: PPUSH
26084: LD_VAR 0 9
26088: PPUSH
26089: CALL_OW 488
26093: NOT
26094: IFFALSE 26098
// exit ;
26096: GO 26205
// ComAnimCustom ( unit , 1 ) ;
26098: LD_VAR 0 1
26102: PPUSH
26103: LD_INT 1
26105: PPUSH
26106: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26110: LD_VAR 0 8
26114: PPUSH
26115: LD_VAR 0 9
26119: PPUSH
26120: LD_VAR 0 6
26124: PPUSH
26125: LD_VAR 0 7
26129: PPUSH
26130: CALL_OW 330
// repeat wait ( 1 ) ;
26134: LD_INT 1
26136: PPUSH
26137: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26141: LD_VAR 0 1
26145: PPUSH
26146: CALL_OW 316
26150: PUSH
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 314
26160: OR
26161: PUSH
26162: LD_VAR 0 1
26166: PPUSH
26167: CALL_OW 302
26171: NOT
26172: OR
26173: PUSH
26174: LD_VAR 0 1
26178: PPUSH
26179: CALL_OW 301
26183: OR
26184: IFFALSE 26134
// RemoveSeeing ( _x , _y , side ) ;
26186: LD_VAR 0 8
26190: PPUSH
26191: LD_VAR 0 9
26195: PPUSH
26196: LD_VAR 0 6
26200: PPUSH
26201: CALL_OW 331
// end ; end_of_file
26205: LD_VAR 0 4
26209: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26210: LD_VAR 0 1
26214: PUSH
26215: LD_INT 200
26217: DOUBLE
26218: GREATEREQUAL
26219: IFFALSE 26227
26221: LD_INT 299
26223: DOUBLE
26224: LESSEQUAL
26225: IFTRUE 26229
26227: GO 26261
26229: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26230: LD_VAR 0 1
26234: PPUSH
26235: LD_VAR 0 2
26239: PPUSH
26240: LD_VAR 0 3
26244: PPUSH
26245: LD_VAR 0 4
26249: PPUSH
26250: LD_VAR 0 5
26254: PPUSH
26255: CALL 21692 0 5
26259: GO 26338
26261: LD_INT 300
26263: DOUBLE
26264: GREATEREQUAL
26265: IFFALSE 26273
26267: LD_INT 399
26269: DOUBLE
26270: LESSEQUAL
26271: IFTRUE 26275
26273: GO 26337
26275: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26276: LD_VAR 0 1
26280: PPUSH
26281: LD_VAR 0 2
26285: PPUSH
26286: LD_VAR 0 3
26290: PPUSH
26291: LD_VAR 0 4
26295: PPUSH
26296: LD_VAR 0 5
26300: PPUSH
26301: LD_VAR 0 6
26305: PPUSH
26306: LD_VAR 0 7
26310: PPUSH
26311: LD_VAR 0 8
26315: PPUSH
26316: LD_VAR 0 9
26320: PPUSH
26321: LD_VAR 0 10
26325: PPUSH
26326: LD_VAR 0 11
26330: PPUSH
26331: CALL 18005 0 11
26335: GO 26338
26337: POP
// end ;
26338: PPOPN 11
26340: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26341: LD_VAR 0 1
26345: PPUSH
26346: LD_VAR 0 2
26350: PPUSH
26351: LD_VAR 0 3
26355: PPUSH
26356: LD_VAR 0 4
26360: PPUSH
26361: LD_VAR 0 5
26365: PPUSH
26366: CALL 21416 0 5
// end ; end_of_file
26370: PPOPN 5
26372: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
26373: LD_VAR 0 1
26377: PPUSH
26378: LD_VAR 0 2
26382: PPUSH
26383: LD_VAR 0 3
26387: PPUSH
26388: LD_VAR 0 4
26392: PPUSH
26393: LD_VAR 0 5
26397: PPUSH
26398: LD_VAR 0 6
26402: PPUSH
26403: CALL 5657 0 6
// end ;
26407: PPOPN 6
26409: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
26410: LD_INT 0
26412: PPUSH
// begin if not units then
26413: LD_VAR 0 1
26417: NOT
26418: IFFALSE 26422
// exit ;
26420: GO 26422
// end ;
26422: PPOPN 7
26424: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
26425: CALL 5544 0 0
// end ; end_of_file end_of_file
26429: PPOPN 1
26431: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26432: LD_INT 0
26434: PPUSH
26435: PPUSH
// if exist_mode then
26436: LD_VAR 0 2
26440: IFFALSE 26465
// unit := CreateCharacter ( prefix & ident ) else
26442: LD_ADDR_VAR 0 5
26446: PUSH
26447: LD_VAR 0 3
26451: PUSH
26452: LD_VAR 0 1
26456: STR
26457: PPUSH
26458: CALL_OW 34
26462: ST_TO_ADDR
26463: GO 26480
// unit := NewCharacter ( ident ) ;
26465: LD_ADDR_VAR 0 5
26469: PUSH
26470: LD_VAR 0 1
26474: PPUSH
26475: CALL_OW 25
26479: ST_TO_ADDR
// result := unit ;
26480: LD_ADDR_VAR 0 4
26484: PUSH
26485: LD_VAR 0 5
26489: ST_TO_ADDR
// end ;
26490: LD_VAR 0 4
26494: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
// if not side or not nation then
26499: LD_VAR 0 1
26503: NOT
26504: PUSH
26505: LD_VAR 0 2
26509: NOT
26510: OR
26511: IFFALSE 26515
// exit ;
26513: GO 27283
// case nation of nation_american :
26515: LD_VAR 0 2
26519: PUSH
26520: LD_INT 1
26522: DOUBLE
26523: EQUAL
26524: IFTRUE 26528
26526: GO 26742
26528: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26529: LD_ADDR_VAR 0 4
26533: PUSH
26534: LD_INT 35
26536: PUSH
26537: LD_INT 45
26539: PUSH
26540: LD_INT 46
26542: PUSH
26543: LD_INT 47
26545: PUSH
26546: LD_INT 82
26548: PUSH
26549: LD_INT 83
26551: PUSH
26552: LD_INT 84
26554: PUSH
26555: LD_INT 85
26557: PUSH
26558: LD_INT 86
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: LD_INT 6
26569: PUSH
26570: LD_INT 15
26572: PUSH
26573: LD_INT 16
26575: PUSH
26576: LD_INT 7
26578: PUSH
26579: LD_INT 12
26581: PUSH
26582: LD_INT 13
26584: PUSH
26585: LD_INT 10
26587: PUSH
26588: LD_INT 14
26590: PUSH
26591: LD_INT 20
26593: PUSH
26594: LD_INT 21
26596: PUSH
26597: LD_INT 22
26599: PUSH
26600: LD_INT 25
26602: PUSH
26603: LD_INT 32
26605: PUSH
26606: LD_INT 27
26608: PUSH
26609: LD_INT 36
26611: PUSH
26612: LD_INT 69
26614: PUSH
26615: LD_INT 39
26617: PUSH
26618: LD_INT 34
26620: PUSH
26621: LD_INT 40
26623: PUSH
26624: LD_INT 48
26626: PUSH
26627: LD_INT 49
26629: PUSH
26630: LD_INT 50
26632: PUSH
26633: LD_INT 51
26635: PUSH
26636: LD_INT 52
26638: PUSH
26639: LD_INT 53
26641: PUSH
26642: LD_INT 54
26644: PUSH
26645: LD_INT 55
26647: PUSH
26648: LD_INT 56
26650: PUSH
26651: LD_INT 57
26653: PUSH
26654: LD_INT 58
26656: PUSH
26657: LD_INT 59
26659: PUSH
26660: LD_INT 60
26662: PUSH
26663: LD_INT 61
26665: PUSH
26666: LD_INT 62
26668: PUSH
26669: LD_INT 80
26671: PUSH
26672: LD_INT 82
26674: PUSH
26675: LD_INT 83
26677: PUSH
26678: LD_INT 84
26680: PUSH
26681: LD_INT 85
26683: PUSH
26684: LD_INT 86
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: ST_TO_ADDR
26740: GO 27207
26742: LD_INT 2
26744: DOUBLE
26745: EQUAL
26746: IFTRUE 26750
26748: GO 26976
26750: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26751: LD_ADDR_VAR 0 4
26755: PUSH
26756: LD_INT 35
26758: PUSH
26759: LD_INT 45
26761: PUSH
26762: LD_INT 46
26764: PUSH
26765: LD_INT 47
26767: PUSH
26768: LD_INT 82
26770: PUSH
26771: LD_INT 83
26773: PUSH
26774: LD_INT 84
26776: PUSH
26777: LD_INT 85
26779: PUSH
26780: LD_INT 87
26782: PUSH
26783: LD_INT 70
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: LD_INT 11
26791: PUSH
26792: LD_INT 3
26794: PUSH
26795: LD_INT 4
26797: PUSH
26798: LD_INT 5
26800: PUSH
26801: LD_INT 6
26803: PUSH
26804: LD_INT 15
26806: PUSH
26807: LD_INT 18
26809: PUSH
26810: LD_INT 7
26812: PUSH
26813: LD_INT 17
26815: PUSH
26816: LD_INT 8
26818: PUSH
26819: LD_INT 20
26821: PUSH
26822: LD_INT 21
26824: PUSH
26825: LD_INT 22
26827: PUSH
26828: LD_INT 72
26830: PUSH
26831: LD_INT 26
26833: PUSH
26834: LD_INT 69
26836: PUSH
26837: LD_INT 39
26839: PUSH
26840: LD_INT 40
26842: PUSH
26843: LD_INT 41
26845: PUSH
26846: LD_INT 42
26848: PUSH
26849: LD_INT 43
26851: PUSH
26852: LD_INT 48
26854: PUSH
26855: LD_INT 49
26857: PUSH
26858: LD_INT 50
26860: PUSH
26861: LD_INT 51
26863: PUSH
26864: LD_INT 52
26866: PUSH
26867: LD_INT 53
26869: PUSH
26870: LD_INT 54
26872: PUSH
26873: LD_INT 55
26875: PUSH
26876: LD_INT 56
26878: PUSH
26879: LD_INT 60
26881: PUSH
26882: LD_INT 61
26884: PUSH
26885: LD_INT 62
26887: PUSH
26888: LD_INT 66
26890: PUSH
26891: LD_INT 67
26893: PUSH
26894: LD_INT 68
26896: PUSH
26897: LD_INT 81
26899: PUSH
26900: LD_INT 82
26902: PUSH
26903: LD_INT 83
26905: PUSH
26906: LD_INT 84
26908: PUSH
26909: LD_INT 85
26911: PUSH
26912: LD_INT 87
26914: PUSH
26915: LD_INT 88
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: ST_TO_ADDR
26974: GO 27207
26976: LD_INT 3
26978: DOUBLE
26979: EQUAL
26980: IFTRUE 26984
26982: GO 27206
26984: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26985: LD_ADDR_VAR 0 4
26989: PUSH
26990: LD_INT 46
26992: PUSH
26993: LD_INT 47
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: LD_INT 2
27001: PUSH
27002: LD_INT 82
27004: PUSH
27005: LD_INT 83
27007: PUSH
27008: LD_INT 84
27010: PUSH
27011: LD_INT 85
27013: PUSH
27014: LD_INT 86
27016: PUSH
27017: LD_INT 11
27019: PUSH
27020: LD_INT 9
27022: PUSH
27023: LD_INT 20
27025: PUSH
27026: LD_INT 19
27028: PUSH
27029: LD_INT 21
27031: PUSH
27032: LD_INT 24
27034: PUSH
27035: LD_INT 22
27037: PUSH
27038: LD_INT 25
27040: PUSH
27041: LD_INT 28
27043: PUSH
27044: LD_INT 29
27046: PUSH
27047: LD_INT 30
27049: PUSH
27050: LD_INT 31
27052: PUSH
27053: LD_INT 37
27055: PUSH
27056: LD_INT 38
27058: PUSH
27059: LD_INT 32
27061: PUSH
27062: LD_INT 27
27064: PUSH
27065: LD_INT 33
27067: PUSH
27068: LD_INT 69
27070: PUSH
27071: LD_INT 39
27073: PUSH
27074: LD_INT 34
27076: PUSH
27077: LD_INT 40
27079: PUSH
27080: LD_INT 71
27082: PUSH
27083: LD_INT 23
27085: PUSH
27086: LD_INT 44
27088: PUSH
27089: LD_INT 48
27091: PUSH
27092: LD_INT 49
27094: PUSH
27095: LD_INT 50
27097: PUSH
27098: LD_INT 51
27100: PUSH
27101: LD_INT 52
27103: PUSH
27104: LD_INT 53
27106: PUSH
27107: LD_INT 54
27109: PUSH
27110: LD_INT 55
27112: PUSH
27113: LD_INT 56
27115: PUSH
27116: LD_INT 57
27118: PUSH
27119: LD_INT 58
27121: PUSH
27122: LD_INT 59
27124: PUSH
27125: LD_INT 63
27127: PUSH
27128: LD_INT 64
27130: PUSH
27131: LD_INT 65
27133: PUSH
27134: LD_INT 82
27136: PUSH
27137: LD_INT 83
27139: PUSH
27140: LD_INT 84
27142: PUSH
27143: LD_INT 85
27145: PUSH
27146: LD_INT 86
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: ST_TO_ADDR
27204: GO 27207
27206: POP
// if state > - 1 and state < 3 then
27207: LD_VAR 0 3
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: GREATER
27216: PUSH
27217: LD_VAR 0 3
27221: PUSH
27222: LD_INT 3
27224: LESS
27225: AND
27226: IFFALSE 27283
// for i in result do
27228: LD_ADDR_VAR 0 5
27232: PUSH
27233: LD_VAR 0 4
27237: PUSH
27238: FOR_IN
27239: IFFALSE 27281
// if GetTech ( i , side ) <> state then
27241: LD_VAR 0 5
27245: PPUSH
27246: LD_VAR 0 1
27250: PPUSH
27251: CALL_OW 321
27255: PUSH
27256: LD_VAR 0 3
27260: NONEQUAL
27261: IFFALSE 27279
// result := result diff i ;
27263: LD_ADDR_VAR 0 4
27267: PUSH
27268: LD_VAR 0 4
27272: PUSH
27273: LD_VAR 0 5
27277: DIFF
27278: ST_TO_ADDR
27279: GO 27238
27281: POP
27282: POP
// end ;
27283: LD_VAR 0 4
27287: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27288: LD_INT 0
27290: PPUSH
27291: PPUSH
27292: PPUSH
// result := true ;
27293: LD_ADDR_VAR 0 3
27297: PUSH
27298: LD_INT 1
27300: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27301: LD_ADDR_VAR 0 5
27305: PUSH
27306: LD_VAR 0 2
27310: PPUSH
27311: CALL_OW 480
27315: ST_TO_ADDR
// if not tmp then
27316: LD_VAR 0 5
27320: NOT
27321: IFFALSE 27325
// exit ;
27323: GO 27374
// for i in tmp do
27325: LD_ADDR_VAR 0 4
27329: PUSH
27330: LD_VAR 0 5
27334: PUSH
27335: FOR_IN
27336: IFFALSE 27372
// if GetTech ( i , side ) <> state_researched then
27338: LD_VAR 0 4
27342: PPUSH
27343: LD_VAR 0 1
27347: PPUSH
27348: CALL_OW 321
27352: PUSH
27353: LD_INT 2
27355: NONEQUAL
27356: IFFALSE 27370
// begin result := false ;
27358: LD_ADDR_VAR 0 3
27362: PUSH
27363: LD_INT 0
27365: ST_TO_ADDR
// exit ;
27366: POP
27367: POP
27368: GO 27374
// end ;
27370: GO 27335
27372: POP
27373: POP
// end ;
27374: LD_VAR 0 3
27378: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27379: LD_INT 0
27381: PPUSH
27382: PPUSH
27383: PPUSH
27384: PPUSH
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27394: LD_VAR 0 1
27398: NOT
27399: PUSH
27400: LD_VAR 0 1
27404: PPUSH
27405: CALL_OW 257
27409: PUSH
27410: LD_INT 9
27412: NONEQUAL
27413: OR
27414: IFFALSE 27418
// exit ;
27416: GO 27991
// side := GetSide ( unit ) ;
27418: LD_ADDR_VAR 0 9
27422: PUSH
27423: LD_VAR 0 1
27427: PPUSH
27428: CALL_OW 255
27432: ST_TO_ADDR
// tech_space := tech_spacanom ;
27433: LD_ADDR_VAR 0 12
27437: PUSH
27438: LD_INT 29
27440: ST_TO_ADDR
// tech_time := tech_taurad ;
27441: LD_ADDR_VAR 0 13
27445: PUSH
27446: LD_INT 28
27448: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27449: LD_ADDR_VAR 0 11
27453: PUSH
27454: LD_VAR 0 1
27458: PPUSH
27459: CALL_OW 310
27463: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27464: LD_VAR 0 11
27468: PPUSH
27469: CALL_OW 247
27473: PUSH
27474: LD_INT 2
27476: EQUAL
27477: IFFALSE 27481
// exit ;
27479: GO 27991
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27481: LD_ADDR_VAR 0 8
27485: PUSH
27486: LD_INT 81
27488: PUSH
27489: LD_VAR 0 9
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 21
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PPUSH
27519: CALL_OW 69
27523: ST_TO_ADDR
// if not tmp then
27524: LD_VAR 0 8
27528: NOT
27529: IFFALSE 27533
// exit ;
27531: GO 27991
// if in_unit then
27533: LD_VAR 0 11
27537: IFFALSE 27561
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27539: LD_ADDR_VAR 0 10
27543: PUSH
27544: LD_VAR 0 8
27548: PPUSH
27549: LD_VAR 0 11
27553: PPUSH
27554: CALL_OW 74
27558: ST_TO_ADDR
27559: GO 27581
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27561: LD_ADDR_VAR 0 10
27565: PUSH
27566: LD_VAR 0 8
27570: PPUSH
27571: LD_VAR 0 1
27575: PPUSH
27576: CALL_OW 74
27580: ST_TO_ADDR
// if not enemy then
27581: LD_VAR 0 10
27585: NOT
27586: IFFALSE 27590
// exit ;
27588: GO 27991
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27590: LD_VAR 0 11
27594: PUSH
27595: LD_VAR 0 11
27599: PPUSH
27600: LD_VAR 0 10
27604: PPUSH
27605: CALL_OW 296
27609: PUSH
27610: LD_INT 13
27612: GREATER
27613: AND
27614: PUSH
27615: LD_VAR 0 1
27619: PPUSH
27620: LD_VAR 0 10
27624: PPUSH
27625: CALL_OW 296
27629: PUSH
27630: LD_INT 12
27632: GREATER
27633: OR
27634: IFFALSE 27638
// exit ;
27636: GO 27991
// missile := [ 1 ] ;
27638: LD_ADDR_VAR 0 14
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27649: LD_VAR 0 9
27653: PPUSH
27654: LD_VAR 0 12
27658: PPUSH
27659: CALL_OW 325
27663: IFFALSE 27692
// missile := Replace ( missile , missile + 1 , 2 ) ;
27665: LD_ADDR_VAR 0 14
27669: PUSH
27670: LD_VAR 0 14
27674: PPUSH
27675: LD_VAR 0 14
27679: PUSH
27680: LD_INT 1
27682: PLUS
27683: PPUSH
27684: LD_INT 2
27686: PPUSH
27687: CALL_OW 1
27691: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27692: LD_VAR 0 9
27696: PPUSH
27697: LD_VAR 0 13
27701: PPUSH
27702: CALL_OW 325
27706: PUSH
27707: LD_VAR 0 10
27711: PPUSH
27712: CALL_OW 255
27716: PPUSH
27717: LD_VAR 0 13
27721: PPUSH
27722: CALL_OW 325
27726: NOT
27727: AND
27728: IFFALSE 27757
// missile := Replace ( missile , missile + 1 , 3 ) ;
27730: LD_ADDR_VAR 0 14
27734: PUSH
27735: LD_VAR 0 14
27739: PPUSH
27740: LD_VAR 0 14
27744: PUSH
27745: LD_INT 1
27747: PLUS
27748: PPUSH
27749: LD_INT 3
27751: PPUSH
27752: CALL_OW 1
27756: ST_TO_ADDR
// if missile < 2 then
27757: LD_VAR 0 14
27761: PUSH
27762: LD_INT 2
27764: LESS
27765: IFFALSE 27769
// exit ;
27767: GO 27991
// x := GetX ( enemy ) ;
27769: LD_ADDR_VAR 0 4
27773: PUSH
27774: LD_VAR 0 10
27778: PPUSH
27779: CALL_OW 250
27783: ST_TO_ADDR
// y := GetY ( enemy ) ;
27784: LD_ADDR_VAR 0 5
27788: PUSH
27789: LD_VAR 0 10
27793: PPUSH
27794: CALL_OW 251
27798: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27799: LD_ADDR_VAR 0 6
27803: PUSH
27804: LD_VAR 0 4
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PPUSH
27813: LD_INT 1
27815: PPUSH
27816: CALL_OW 12
27820: PLUS
27821: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27822: LD_ADDR_VAR 0 7
27826: PUSH
27827: LD_VAR 0 5
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PPUSH
27836: LD_INT 1
27838: PPUSH
27839: CALL_OW 12
27843: PLUS
27844: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27845: LD_VAR 0 6
27849: PPUSH
27850: LD_VAR 0 7
27854: PPUSH
27855: CALL_OW 488
27859: NOT
27860: IFFALSE 27882
// begin _x := x ;
27862: LD_ADDR_VAR 0 6
27866: PUSH
27867: LD_VAR 0 4
27871: ST_TO_ADDR
// _y := y ;
27872: LD_ADDR_VAR 0 7
27876: PUSH
27877: LD_VAR 0 5
27881: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27882: LD_ADDR_VAR 0 3
27886: PUSH
27887: LD_INT 1
27889: PPUSH
27890: LD_VAR 0 14
27894: PPUSH
27895: CALL_OW 12
27899: ST_TO_ADDR
// case i of 1 :
27900: LD_VAR 0 3
27904: PUSH
27905: LD_INT 1
27907: DOUBLE
27908: EQUAL
27909: IFTRUE 27913
27911: GO 27930
27913: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27914: LD_VAR 0 1
27918: PPUSH
27919: LD_VAR 0 10
27923: PPUSH
27924: CALL_OW 115
27928: GO 27991
27930: LD_INT 2
27932: DOUBLE
27933: EQUAL
27934: IFTRUE 27938
27936: GO 27960
27938: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27939: LD_VAR 0 1
27943: PPUSH
27944: LD_VAR 0 6
27948: PPUSH
27949: LD_VAR 0 7
27953: PPUSH
27954: CALL_OW 153
27958: GO 27991
27960: LD_INT 3
27962: DOUBLE
27963: EQUAL
27964: IFTRUE 27968
27966: GO 27990
27968: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27969: LD_VAR 0 1
27973: PPUSH
27974: LD_VAR 0 6
27978: PPUSH
27979: LD_VAR 0 7
27983: PPUSH
27984: CALL_OW 154
27988: GO 27991
27990: POP
// end ;
27991: LD_VAR 0 2
27995: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27996: LD_INT 0
27998: PPUSH
27999: PPUSH
28000: PPUSH
28001: PPUSH
28002: PPUSH
28003: PPUSH
// if not unit or not building then
28004: LD_VAR 0 1
28008: NOT
28009: PUSH
28010: LD_VAR 0 2
28014: NOT
28015: OR
28016: IFFALSE 28020
// exit ;
28018: GO 28178
// x := GetX ( building ) ;
28020: LD_ADDR_VAR 0 5
28024: PUSH
28025: LD_VAR 0 2
28029: PPUSH
28030: CALL_OW 250
28034: ST_TO_ADDR
// y := GetY ( building ) ;
28035: LD_ADDR_VAR 0 6
28039: PUSH
28040: LD_VAR 0 2
28044: PPUSH
28045: CALL_OW 251
28049: ST_TO_ADDR
// for i = 0 to 5 do
28050: LD_ADDR_VAR 0 4
28054: PUSH
28055: DOUBLE
28056: LD_INT 0
28058: DEC
28059: ST_TO_ADDR
28060: LD_INT 5
28062: PUSH
28063: FOR_TO
28064: IFFALSE 28176
// begin _x := ShiftX ( x , i , 3 ) ;
28066: LD_ADDR_VAR 0 7
28070: PUSH
28071: LD_VAR 0 5
28075: PPUSH
28076: LD_VAR 0 4
28080: PPUSH
28081: LD_INT 3
28083: PPUSH
28084: CALL_OW 272
28088: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28089: LD_ADDR_VAR 0 8
28093: PUSH
28094: LD_VAR 0 6
28098: PPUSH
28099: LD_VAR 0 4
28103: PPUSH
28104: LD_INT 3
28106: PPUSH
28107: CALL_OW 273
28111: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28112: LD_VAR 0 7
28116: PPUSH
28117: LD_VAR 0 8
28121: PPUSH
28122: CALL_OW 488
28126: NOT
28127: IFFALSE 28131
// continue ;
28129: GO 28063
// if HexInfo ( _x , _y ) = 0 then
28131: LD_VAR 0 7
28135: PPUSH
28136: LD_VAR 0 8
28140: PPUSH
28141: CALL_OW 428
28145: PUSH
28146: LD_INT 0
28148: EQUAL
28149: IFFALSE 28174
// begin ComMoveXY ( unit , _x , _y ) ;
28151: LD_VAR 0 1
28155: PPUSH
28156: LD_VAR 0 7
28160: PPUSH
28161: LD_VAR 0 8
28165: PPUSH
28166: CALL_OW 111
// exit ;
28170: POP
28171: POP
28172: GO 28178
// end ; end ;
28174: GO 28063
28176: POP
28177: POP
// end ;
28178: LD_VAR 0 3
28182: RET
// export function ScanBase ( side , base_area ) ; begin
28183: LD_INT 0
28185: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28186: LD_ADDR_VAR 0 3
28190: PUSH
28191: LD_VAR 0 2
28195: PPUSH
28196: LD_INT 81
28198: PUSH
28199: LD_VAR 0 1
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PPUSH
28208: CALL_OW 70
28212: ST_TO_ADDR
// end ;
28213: LD_VAR 0 3
28217: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28218: LD_INT 0
28220: PPUSH
28221: PPUSH
28222: PPUSH
28223: PPUSH
// result := false ;
28224: LD_ADDR_VAR 0 2
28228: PUSH
28229: LD_INT 0
28231: ST_TO_ADDR
// side := GetSide ( unit ) ;
28232: LD_ADDR_VAR 0 3
28236: PUSH
28237: LD_VAR 0 1
28241: PPUSH
28242: CALL_OW 255
28246: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28247: LD_ADDR_VAR 0 4
28251: PUSH
28252: LD_VAR 0 1
28256: PPUSH
28257: CALL_OW 248
28261: ST_TO_ADDR
// case nat of 1 :
28262: LD_VAR 0 4
28266: PUSH
28267: LD_INT 1
28269: DOUBLE
28270: EQUAL
28271: IFTRUE 28275
28273: GO 28286
28275: POP
// tech := tech_lassight ; 2 :
28276: LD_ADDR_VAR 0 5
28280: PUSH
28281: LD_INT 12
28283: ST_TO_ADDR
28284: GO 28325
28286: LD_INT 2
28288: DOUBLE
28289: EQUAL
28290: IFTRUE 28294
28292: GO 28305
28294: POP
// tech := tech_mortar ; 3 :
28295: LD_ADDR_VAR 0 5
28299: PUSH
28300: LD_INT 41
28302: ST_TO_ADDR
28303: GO 28325
28305: LD_INT 3
28307: DOUBLE
28308: EQUAL
28309: IFTRUE 28313
28311: GO 28324
28313: POP
// tech := tech_bazooka ; end ;
28314: LD_ADDR_VAR 0 5
28318: PUSH
28319: LD_INT 44
28321: ST_TO_ADDR
28322: GO 28325
28324: POP
// if Researched ( side , tech ) then
28325: LD_VAR 0 3
28329: PPUSH
28330: LD_VAR 0 5
28334: PPUSH
28335: CALL_OW 325
28339: IFFALSE 28366
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28341: LD_ADDR_VAR 0 2
28345: PUSH
28346: LD_INT 5
28348: PUSH
28349: LD_INT 8
28351: PUSH
28352: LD_INT 9
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: PUSH
28360: LD_VAR 0 4
28364: ARRAY
28365: ST_TO_ADDR
// end ;
28366: LD_VAR 0 2
28370: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28371: LD_INT 0
28373: PPUSH
28374: PPUSH
28375: PPUSH
// if not mines then
28376: LD_VAR 0 2
28380: NOT
28381: IFFALSE 28385
// exit ;
28383: GO 28529
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28385: LD_ADDR_VAR 0 5
28389: PUSH
28390: LD_INT 81
28392: PUSH
28393: LD_VAR 0 1
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 3
28404: PUSH
28405: LD_INT 21
28407: PUSH
28408: LD_INT 3
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PPUSH
28423: CALL_OW 69
28427: ST_TO_ADDR
// for i in mines do
28428: LD_ADDR_VAR 0 4
28432: PUSH
28433: LD_VAR 0 2
28437: PUSH
28438: FOR_IN
28439: IFFALSE 28527
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28441: LD_VAR 0 4
28445: PUSH
28446: LD_INT 1
28448: ARRAY
28449: PPUSH
28450: LD_VAR 0 4
28454: PUSH
28455: LD_INT 2
28457: ARRAY
28458: PPUSH
28459: CALL_OW 458
28463: NOT
28464: IFFALSE 28468
// continue ;
28466: GO 28438
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28468: LD_VAR 0 4
28472: PUSH
28473: LD_INT 1
28475: ARRAY
28476: PPUSH
28477: LD_VAR 0 4
28481: PUSH
28482: LD_INT 2
28484: ARRAY
28485: PPUSH
28486: CALL_OW 428
28490: PUSH
28491: LD_VAR 0 5
28495: IN
28496: IFFALSE 28525
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28498: LD_VAR 0 4
28502: PUSH
28503: LD_INT 1
28505: ARRAY
28506: PPUSH
28507: LD_VAR 0 4
28511: PUSH
28512: LD_INT 2
28514: ARRAY
28515: PPUSH
28516: LD_VAR 0 1
28520: PPUSH
28521: CALL_OW 456
// end ;
28525: GO 28438
28527: POP
28528: POP
// end ;
28529: LD_VAR 0 3
28533: RET
// export function Count ( array ) ; begin
28534: LD_INT 0
28536: PPUSH
// result := array + 0 ;
28537: LD_ADDR_VAR 0 2
28541: PUSH
28542: LD_VAR 0 1
28546: PUSH
28547: LD_INT 0
28549: PLUS
28550: ST_TO_ADDR
// end ;
28551: LD_VAR 0 2
28555: RET
// export function IsEmpty ( building ) ; begin
28556: LD_INT 0
28558: PPUSH
// if not building then
28559: LD_VAR 0 1
28563: NOT
28564: IFFALSE 28568
// exit ;
28566: GO 28611
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28568: LD_ADDR_VAR 0 2
28572: PUSH
28573: LD_VAR 0 1
28577: PUSH
28578: LD_INT 22
28580: PUSH
28581: LD_VAR 0 1
28585: PPUSH
28586: CALL_OW 255
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 58
28597: PUSH
28598: EMPTY
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PPUSH
28605: CALL_OW 69
28609: IN
28610: ST_TO_ADDR
// end ;
28611: LD_VAR 0 2
28615: RET
// export function IsNotFull ( building ) ; var places ; begin
28616: LD_INT 0
28618: PPUSH
28619: PPUSH
// if not building then
28620: LD_VAR 0 1
28624: NOT
28625: IFFALSE 28629
// exit ;
28627: GO 28657
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28629: LD_ADDR_VAR 0 2
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: LD_INT 3
28641: PUSH
28642: LD_INT 62
28644: PUSH
28645: EMPTY
28646: LIST
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 72
28656: ST_TO_ADDR
// end ;
28657: LD_VAR 0 2
28661: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28662: LD_INT 0
28664: PPUSH
28665: PPUSH
28666: PPUSH
28667: PPUSH
// tmp := [ ] ;
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: EMPTY
28674: ST_TO_ADDR
// list := [ ] ;
28675: LD_ADDR_VAR 0 5
28679: PUSH
28680: EMPTY
28681: ST_TO_ADDR
// for i = 16 to 25 do
28682: LD_ADDR_VAR 0 4
28686: PUSH
28687: DOUBLE
28688: LD_INT 16
28690: DEC
28691: ST_TO_ADDR
28692: LD_INT 25
28694: PUSH
28695: FOR_TO
28696: IFFALSE 28769
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28698: LD_ADDR_VAR 0 3
28702: PUSH
28703: LD_VAR 0 3
28707: PUSH
28708: LD_INT 22
28710: PUSH
28711: LD_VAR 0 1
28715: PPUSH
28716: CALL_OW 255
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 91
28727: PUSH
28728: LD_VAR 0 1
28732: PUSH
28733: LD_INT 6
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 30
28743: PUSH
28744: LD_VAR 0 4
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: PPUSH
28761: CALL_OW 69
28765: ADD
28766: ST_TO_ADDR
28767: GO 28695
28769: POP
28770: POP
// for i = 1 to tmp do
28771: LD_ADDR_VAR 0 4
28775: PUSH
28776: DOUBLE
28777: LD_INT 1
28779: DEC
28780: ST_TO_ADDR
28781: LD_VAR 0 3
28785: PUSH
28786: FOR_TO
28787: IFFALSE 28875
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28789: LD_ADDR_VAR 0 5
28793: PUSH
28794: LD_VAR 0 5
28798: PUSH
28799: LD_VAR 0 3
28803: PUSH
28804: LD_VAR 0 4
28808: ARRAY
28809: PPUSH
28810: CALL_OW 266
28814: PUSH
28815: LD_VAR 0 3
28819: PUSH
28820: LD_VAR 0 4
28824: ARRAY
28825: PPUSH
28826: CALL_OW 250
28830: PUSH
28831: LD_VAR 0 3
28835: PUSH
28836: LD_VAR 0 4
28840: ARRAY
28841: PPUSH
28842: CALL_OW 251
28846: PUSH
28847: LD_VAR 0 3
28851: PUSH
28852: LD_VAR 0 4
28856: ARRAY
28857: PPUSH
28858: CALL_OW 254
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: ADD
28872: ST_TO_ADDR
28873: GO 28786
28875: POP
28876: POP
// result := list ;
28877: LD_ADDR_VAR 0 2
28881: PUSH
28882: LD_VAR 0 5
28886: ST_TO_ADDR
// end ;
28887: LD_VAR 0 2
28891: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28892: LD_INT 0
28894: PPUSH
28895: PPUSH
28896: PPUSH
28897: PPUSH
28898: PPUSH
28899: PPUSH
28900: PPUSH
// if not factory then
28901: LD_VAR 0 1
28905: NOT
28906: IFFALSE 28910
// exit ;
28908: GO 29503
// if control = control_apeman then
28910: LD_VAR 0 4
28914: PUSH
28915: LD_INT 5
28917: EQUAL
28918: IFFALSE 29027
// begin tmp := UnitsInside ( factory ) ;
28920: LD_ADDR_VAR 0 8
28924: PUSH
28925: LD_VAR 0 1
28929: PPUSH
28930: CALL_OW 313
28934: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28935: LD_VAR 0 8
28939: PPUSH
28940: LD_INT 25
28942: PUSH
28943: LD_INT 12
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PPUSH
28950: CALL_OW 72
28954: NOT
28955: IFFALSE 28965
// control := control_manual ;
28957: LD_ADDR_VAR 0 4
28961: PUSH
28962: LD_INT 1
28964: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28965: LD_ADDR_VAR 0 8
28969: PUSH
28970: LD_VAR 0 1
28974: PPUSH
28975: CALL 28662 0 1
28979: ST_TO_ADDR
// if tmp then
28980: LD_VAR 0 8
28984: IFFALSE 29027
// begin for i in tmp do
28986: LD_ADDR_VAR 0 7
28990: PUSH
28991: LD_VAR 0 8
28995: PUSH
28996: FOR_IN
28997: IFFALSE 29025
// if i [ 1 ] = b_ext_radio then
28999: LD_VAR 0 7
29003: PUSH
29004: LD_INT 1
29006: ARRAY
29007: PUSH
29008: LD_INT 22
29010: EQUAL
29011: IFFALSE 29023
// begin control := control_remote ;
29013: LD_ADDR_VAR 0 4
29017: PUSH
29018: LD_INT 2
29020: ST_TO_ADDR
// break ;
29021: GO 29025
// end ;
29023: GO 28996
29025: POP
29026: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29027: LD_VAR 0 1
29031: PPUSH
29032: LD_VAR 0 2
29036: PPUSH
29037: LD_VAR 0 3
29041: PPUSH
29042: LD_VAR 0 4
29046: PPUSH
29047: LD_VAR 0 5
29051: PPUSH
29052: CALL_OW 448
29056: IFFALSE 29091
// begin result := [ chassis , engine , control , weapon ] ;
29058: LD_ADDR_VAR 0 6
29062: PUSH
29063: LD_VAR 0 2
29067: PUSH
29068: LD_VAR 0 3
29072: PUSH
29073: LD_VAR 0 4
29077: PUSH
29078: LD_VAR 0 5
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: ST_TO_ADDR
// exit ;
29089: GO 29503
// end ; _chassis := AvailableChassisList ( factory ) ;
29091: LD_ADDR_VAR 0 9
29095: PUSH
29096: LD_VAR 0 1
29100: PPUSH
29101: CALL_OW 475
29105: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29106: LD_ADDR_VAR 0 11
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 476
29120: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29121: LD_ADDR_VAR 0 12
29125: PUSH
29126: LD_VAR 0 1
29130: PPUSH
29131: CALL_OW 477
29135: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29136: LD_ADDR_VAR 0 10
29140: PUSH
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL_OW 478
29150: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29151: LD_VAR 0 9
29155: NOT
29156: PUSH
29157: LD_VAR 0 11
29161: NOT
29162: OR
29163: PUSH
29164: LD_VAR 0 12
29168: NOT
29169: OR
29170: PUSH
29171: LD_VAR 0 10
29175: NOT
29176: OR
29177: IFFALSE 29212
// begin result := [ chassis , engine , control , weapon ] ;
29179: LD_ADDR_VAR 0 6
29183: PUSH
29184: LD_VAR 0 2
29188: PUSH
29189: LD_VAR 0 3
29193: PUSH
29194: LD_VAR 0 4
29198: PUSH
29199: LD_VAR 0 5
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: ST_TO_ADDR
// exit ;
29210: GO 29503
// end ; if not chassis in _chassis then
29212: LD_VAR 0 2
29216: PUSH
29217: LD_VAR 0 9
29221: IN
29222: NOT
29223: IFFALSE 29249
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29225: LD_ADDR_VAR 0 2
29229: PUSH
29230: LD_VAR 0 9
29234: PUSH
29235: LD_INT 1
29237: PPUSH
29238: LD_VAR 0 9
29242: PPUSH
29243: CALL_OW 12
29247: ARRAY
29248: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29249: LD_VAR 0 2
29253: PPUSH
29254: LD_VAR 0 3
29258: PPUSH
29259: CALL 29508 0 2
29263: NOT
29264: IFFALSE 29323
// repeat engine := _engine [ 1 ] ;
29266: LD_ADDR_VAR 0 3
29270: PUSH
29271: LD_VAR 0 11
29275: PUSH
29276: LD_INT 1
29278: ARRAY
29279: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29280: LD_ADDR_VAR 0 11
29284: PUSH
29285: LD_VAR 0 11
29289: PPUSH
29290: LD_INT 1
29292: PPUSH
29293: CALL_OW 3
29297: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29298: LD_VAR 0 2
29302: PPUSH
29303: LD_VAR 0 3
29307: PPUSH
29308: CALL 29508 0 2
29312: PUSH
29313: LD_VAR 0 11
29317: PUSH
29318: EMPTY
29319: EQUAL
29320: OR
29321: IFFALSE 29266
// if not control in _control then
29323: LD_VAR 0 4
29327: PUSH
29328: LD_VAR 0 12
29332: IN
29333: NOT
29334: IFFALSE 29360
// control := _control [ rand ( 1 , _control ) ] ;
29336: LD_ADDR_VAR 0 4
29340: PUSH
29341: LD_VAR 0 12
29345: PUSH
29346: LD_INT 1
29348: PPUSH
29349: LD_VAR 0 12
29353: PPUSH
29354: CALL_OW 12
29358: ARRAY
29359: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29360: LD_VAR 0 2
29364: PPUSH
29365: LD_VAR 0 5
29369: PPUSH
29370: CALL 29728 0 2
29374: NOT
29375: IFFALSE 29434
// repeat weapon := _weapon [ 1 ] ;
29377: LD_ADDR_VAR 0 5
29381: PUSH
29382: LD_VAR 0 10
29386: PUSH
29387: LD_INT 1
29389: ARRAY
29390: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29391: LD_ADDR_VAR 0 10
29395: PUSH
29396: LD_VAR 0 10
29400: PPUSH
29401: LD_INT 1
29403: PPUSH
29404: CALL_OW 3
29408: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29409: LD_VAR 0 2
29413: PPUSH
29414: LD_VAR 0 5
29418: PPUSH
29419: CALL 29728 0 2
29423: PUSH
29424: LD_VAR 0 10
29428: PUSH
29429: EMPTY
29430: EQUAL
29431: OR
29432: IFFALSE 29377
// result := [ ] ;
29434: LD_ADDR_VAR 0 6
29438: PUSH
29439: EMPTY
29440: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29441: LD_VAR 0 1
29445: PPUSH
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_VAR 0 3
29455: PPUSH
29456: LD_VAR 0 4
29460: PPUSH
29461: LD_VAR 0 5
29465: PPUSH
29466: CALL_OW 448
29470: IFFALSE 29503
// result := [ chassis , engine , control , weapon ] ;
29472: LD_ADDR_VAR 0 6
29476: PUSH
29477: LD_VAR 0 2
29481: PUSH
29482: LD_VAR 0 3
29486: PUSH
29487: LD_VAR 0 4
29491: PUSH
29492: LD_VAR 0 5
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: ST_TO_ADDR
// end ;
29503: LD_VAR 0 6
29507: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29508: LD_INT 0
29510: PPUSH
// if not chassis or not engine then
29511: LD_VAR 0 1
29515: NOT
29516: PUSH
29517: LD_VAR 0 2
29521: NOT
29522: OR
29523: IFFALSE 29527
// exit ;
29525: GO 29723
// case engine of engine_solar :
29527: LD_VAR 0 2
29531: PUSH
29532: LD_INT 2
29534: DOUBLE
29535: EQUAL
29536: IFTRUE 29540
29538: GO 29578
29540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29541: LD_ADDR_VAR 0 3
29545: PUSH
29546: LD_INT 11
29548: PUSH
29549: LD_INT 12
29551: PUSH
29552: LD_INT 13
29554: PUSH
29555: LD_INT 14
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: ST_TO_ADDR
29576: GO 29707
29578: LD_INT 1
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29648
29586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29587: LD_ADDR_VAR 0 3
29591: PUSH
29592: LD_INT 11
29594: PUSH
29595: LD_INT 12
29597: PUSH
29598: LD_INT 13
29600: PUSH
29601: LD_INT 14
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: LD_INT 4
29615: PUSH
29616: LD_INT 5
29618: PUSH
29619: LD_INT 21
29621: PUSH
29622: LD_INT 23
29624: PUSH
29625: LD_INT 22
29627: PUSH
29628: LD_INT 24
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: ST_TO_ADDR
29646: GO 29707
29648: LD_INT 3
29650: DOUBLE
29651: EQUAL
29652: IFTRUE 29656
29654: GO 29706
29656: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29657: LD_ADDR_VAR 0 3
29661: PUSH
29662: LD_INT 13
29664: PUSH
29665: LD_INT 14
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: LD_INT 5
29679: PUSH
29680: LD_INT 21
29682: PUSH
29683: LD_INT 22
29685: PUSH
29686: LD_INT 23
29688: PUSH
29689: LD_INT 24
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
29704: GO 29707
29706: POP
// result := ( chassis in result ) ;
29707: LD_ADDR_VAR 0 3
29711: PUSH
29712: LD_VAR 0 1
29716: PUSH
29717: LD_VAR 0 3
29721: IN
29722: ST_TO_ADDR
// end ;
29723: LD_VAR 0 3
29727: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29728: LD_INT 0
29730: PPUSH
// if not chassis or not weapon then
29731: LD_VAR 0 1
29735: NOT
29736: PUSH
29737: LD_VAR 0 2
29741: NOT
29742: OR
29743: IFFALSE 29747
// exit ;
29745: GO 30807
// case weapon of us_machine_gun :
29747: LD_VAR 0 2
29751: PUSH
29752: LD_INT 2
29754: DOUBLE
29755: EQUAL
29756: IFTRUE 29760
29758: GO 29790
29760: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29761: LD_ADDR_VAR 0 3
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: LD_INT 4
29777: PUSH
29778: LD_INT 5
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
29788: GO 30791
29790: LD_INT 3
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29828
29798: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: LD_INT 3
29812: PUSH
29813: LD_INT 4
29815: PUSH
29816: LD_INT 5
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: ST_TO_ADDR
29826: GO 30791
29828: LD_INT 11
29830: DOUBLE
29831: EQUAL
29832: IFTRUE 29836
29834: GO 29866
29836: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29837: LD_ADDR_VAR 0 3
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 3
29850: PUSH
29851: LD_INT 4
29853: PUSH
29854: LD_INT 5
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
29864: GO 30791
29866: LD_INT 4
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29874
29872: GO 29900
29874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29875: LD_ADDR_VAR 0 3
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: LD_INT 4
29888: PUSH
29889: LD_INT 5
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: ST_TO_ADDR
29898: GO 30791
29900: LD_INT 5
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29934
29908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29909: LD_ADDR_VAR 0 3
29913: PUSH
29914: LD_INT 2
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: LD_INT 4
29922: PUSH
29923: LD_INT 5
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: ST_TO_ADDR
29932: GO 30791
29934: LD_INT 9
29936: DOUBLE
29937: EQUAL
29938: IFTRUE 29942
29940: GO 29968
29942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29943: LD_ADDR_VAR 0 3
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 3
29953: PUSH
29954: LD_INT 4
29956: PUSH
29957: LD_INT 5
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
29966: GO 30791
29968: LD_INT 7
29970: DOUBLE
29971: EQUAL
29972: IFTRUE 29976
29974: GO 30002
29976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29977: LD_ADDR_VAR 0 3
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: LD_INT 3
29987: PUSH
29988: LD_INT 4
29990: PUSH
29991: LD_INT 5
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: ST_TO_ADDR
30000: GO 30791
30002: LD_INT 12
30004: DOUBLE
30005: EQUAL
30006: IFTRUE 30010
30008: GO 30036
30010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30011: LD_ADDR_VAR 0 3
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: LD_INT 5
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
30034: GO 30791
30036: LD_INT 13
30038: DOUBLE
30039: EQUAL
30040: IFTRUE 30044
30042: GO 30070
30044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30045: LD_ADDR_VAR 0 3
30049: PUSH
30050: LD_INT 2
30052: PUSH
30053: LD_INT 3
30055: PUSH
30056: LD_INT 4
30058: PUSH
30059: LD_INT 5
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: ST_TO_ADDR
30068: GO 30791
30070: LD_INT 14
30072: DOUBLE
30073: EQUAL
30074: IFTRUE 30078
30076: GO 30096
30078: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30079: LD_ADDR_VAR 0 3
30083: PUSH
30084: LD_INT 4
30086: PUSH
30087: LD_INT 5
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: ST_TO_ADDR
30094: GO 30791
30096: LD_INT 6
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30122
30104: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30105: LD_ADDR_VAR 0 3
30109: PUSH
30110: LD_INT 4
30112: PUSH
30113: LD_INT 5
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: ST_TO_ADDR
30120: GO 30791
30122: LD_INT 10
30124: DOUBLE
30125: EQUAL
30126: IFTRUE 30130
30128: GO 30148
30130: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: LD_INT 4
30138: PUSH
30139: LD_INT 5
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: ST_TO_ADDR
30146: GO 30791
30148: LD_INT 22
30150: DOUBLE
30151: EQUAL
30152: IFTRUE 30156
30154: GO 30182
30156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_INT 11
30164: PUSH
30165: LD_INT 12
30167: PUSH
30168: LD_INT 13
30170: PUSH
30171: LD_INT 14
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: ST_TO_ADDR
30180: GO 30791
30182: LD_INT 23
30184: DOUBLE
30185: EQUAL
30186: IFTRUE 30190
30188: GO 30216
30190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30191: LD_ADDR_VAR 0 3
30195: PUSH
30196: LD_INT 11
30198: PUSH
30199: LD_INT 12
30201: PUSH
30202: LD_INT 13
30204: PUSH
30205: LD_INT 14
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: ST_TO_ADDR
30214: GO 30791
30216: LD_INT 24
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30250
30224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30225: LD_ADDR_VAR 0 3
30229: PUSH
30230: LD_INT 11
30232: PUSH
30233: LD_INT 12
30235: PUSH
30236: LD_INT 13
30238: PUSH
30239: LD_INT 14
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
30248: GO 30791
30250: LD_INT 30
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30258
30256: GO 30284
30258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30259: LD_ADDR_VAR 0 3
30263: PUSH
30264: LD_INT 11
30266: PUSH
30267: LD_INT 12
30269: PUSH
30270: LD_INT 13
30272: PUSH
30273: LD_INT 14
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: ST_TO_ADDR
30282: GO 30791
30284: LD_INT 25
30286: DOUBLE
30287: EQUAL
30288: IFTRUE 30292
30290: GO 30310
30292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30293: LD_ADDR_VAR 0 3
30297: PUSH
30298: LD_INT 13
30300: PUSH
30301: LD_INT 14
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: ST_TO_ADDR
30308: GO 30791
30310: LD_INT 27
30312: DOUBLE
30313: EQUAL
30314: IFTRUE 30318
30316: GO 30336
30318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30319: LD_ADDR_VAR 0 3
30323: PUSH
30324: LD_INT 13
30326: PUSH
30327: LD_INT 14
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: ST_TO_ADDR
30334: GO 30791
30336: LD_INT 92
30338: DOUBLE
30339: EQUAL
30340: IFTRUE 30344
30342: GO 30370
30344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30345: LD_ADDR_VAR 0 3
30349: PUSH
30350: LD_INT 11
30352: PUSH
30353: LD_INT 12
30355: PUSH
30356: LD_INT 13
30358: PUSH
30359: LD_INT 14
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: ST_TO_ADDR
30368: GO 30791
30370: LD_INT 28
30372: DOUBLE
30373: EQUAL
30374: IFTRUE 30378
30376: GO 30396
30378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30379: LD_ADDR_VAR 0 3
30383: PUSH
30384: LD_INT 13
30386: PUSH
30387: LD_INT 14
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: ST_TO_ADDR
30394: GO 30791
30396: LD_INT 29
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30422
30404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 13
30412: PUSH
30413: LD_INT 14
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: ST_TO_ADDR
30420: GO 30791
30422: LD_INT 31
30424: DOUBLE
30425: EQUAL
30426: IFTRUE 30430
30428: GO 30448
30430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30431: LD_ADDR_VAR 0 3
30435: PUSH
30436: LD_INT 13
30438: PUSH
30439: LD_INT 14
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: ST_TO_ADDR
30446: GO 30791
30448: LD_INT 26
30450: DOUBLE
30451: EQUAL
30452: IFTRUE 30456
30454: GO 30474
30456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30457: LD_ADDR_VAR 0 3
30461: PUSH
30462: LD_INT 13
30464: PUSH
30465: LD_INT 14
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: ST_TO_ADDR
30472: GO 30791
30474: LD_INT 42
30476: DOUBLE
30477: EQUAL
30478: IFTRUE 30482
30480: GO 30508
30482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30483: LD_ADDR_VAR 0 3
30487: PUSH
30488: LD_INT 21
30490: PUSH
30491: LD_INT 22
30493: PUSH
30494: LD_INT 23
30496: PUSH
30497: LD_INT 24
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
30506: GO 30791
30508: LD_INT 43
30510: DOUBLE
30511: EQUAL
30512: IFTRUE 30516
30514: GO 30542
30516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30517: LD_ADDR_VAR 0 3
30521: PUSH
30522: LD_INT 21
30524: PUSH
30525: LD_INT 22
30527: PUSH
30528: LD_INT 23
30530: PUSH
30531: LD_INT 24
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
30540: GO 30791
30542: LD_INT 44
30544: DOUBLE
30545: EQUAL
30546: IFTRUE 30550
30548: GO 30576
30550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30551: LD_ADDR_VAR 0 3
30555: PUSH
30556: LD_INT 21
30558: PUSH
30559: LD_INT 22
30561: PUSH
30562: LD_INT 23
30564: PUSH
30565: LD_INT 24
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: ST_TO_ADDR
30574: GO 30791
30576: LD_INT 45
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30610
30584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30585: LD_ADDR_VAR 0 3
30589: PUSH
30590: LD_INT 21
30592: PUSH
30593: LD_INT 22
30595: PUSH
30596: LD_INT 23
30598: PUSH
30599: LD_INT 24
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: ST_TO_ADDR
30608: GO 30791
30610: LD_INT 49
30612: DOUBLE
30613: EQUAL
30614: IFTRUE 30618
30616: GO 30644
30618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30619: LD_ADDR_VAR 0 3
30623: PUSH
30624: LD_INT 21
30626: PUSH
30627: LD_INT 22
30629: PUSH
30630: LD_INT 23
30632: PUSH
30633: LD_INT 24
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: ST_TO_ADDR
30642: GO 30791
30644: LD_INT 51
30646: DOUBLE
30647: EQUAL
30648: IFTRUE 30652
30650: GO 30678
30652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30653: LD_ADDR_VAR 0 3
30657: PUSH
30658: LD_INT 21
30660: PUSH
30661: LD_INT 22
30663: PUSH
30664: LD_INT 23
30666: PUSH
30667: LD_INT 24
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: ST_TO_ADDR
30676: GO 30791
30678: LD_INT 52
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30712
30686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 21
30694: PUSH
30695: LD_INT 22
30697: PUSH
30698: LD_INT 23
30700: PUSH
30701: LD_INT 24
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
30710: GO 30791
30712: LD_INT 53
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30738
30720: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 23
30728: PUSH
30729: LD_INT 24
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: ST_TO_ADDR
30736: GO 30791
30738: LD_INT 46
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30764
30746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30747: LD_ADDR_VAR 0 3
30751: PUSH
30752: LD_INT 23
30754: PUSH
30755: LD_INT 24
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: ST_TO_ADDR
30762: GO 30791
30764: LD_INT 47
30766: DOUBLE
30767: EQUAL
30768: IFTRUE 30772
30770: GO 30790
30772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30773: LD_ADDR_VAR 0 3
30777: PUSH
30778: LD_INT 23
30780: PUSH
30781: LD_INT 24
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: ST_TO_ADDR
30788: GO 30791
30790: POP
// result := ( chassis in result ) ;
30791: LD_ADDR_VAR 0 3
30795: PUSH
30796: LD_VAR 0 1
30800: PUSH
30801: LD_VAR 0 3
30805: IN
30806: ST_TO_ADDR
// end ;
30807: LD_VAR 0 3
30811: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30812: LD_INT 0
30814: PPUSH
30815: PPUSH
30816: PPUSH
30817: PPUSH
30818: PPUSH
30819: PPUSH
30820: PPUSH
// result := array ;
30821: LD_ADDR_VAR 0 5
30825: PUSH
30826: LD_VAR 0 1
30830: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30831: LD_VAR 0 1
30835: NOT
30836: PUSH
30837: LD_VAR 0 2
30841: NOT
30842: OR
30843: PUSH
30844: LD_VAR 0 3
30848: NOT
30849: OR
30850: PUSH
30851: LD_VAR 0 2
30855: PUSH
30856: LD_VAR 0 1
30860: GREATER
30861: OR
30862: PUSH
30863: LD_VAR 0 3
30867: PUSH
30868: LD_VAR 0 1
30872: GREATER
30873: OR
30874: IFFALSE 30878
// exit ;
30876: GO 31174
// if direction then
30878: LD_VAR 0 4
30882: IFFALSE 30946
// begin d := 1 ;
30884: LD_ADDR_VAR 0 9
30888: PUSH
30889: LD_INT 1
30891: ST_TO_ADDR
// if i_from > i_to then
30892: LD_VAR 0 2
30896: PUSH
30897: LD_VAR 0 3
30901: GREATER
30902: IFFALSE 30928
// length := ( array - i_from ) + i_to else
30904: LD_ADDR_VAR 0 11
30908: PUSH
30909: LD_VAR 0 1
30913: PUSH
30914: LD_VAR 0 2
30918: MINUS
30919: PUSH
30920: LD_VAR 0 3
30924: PLUS
30925: ST_TO_ADDR
30926: GO 30944
// length := i_to - i_from ;
30928: LD_ADDR_VAR 0 11
30932: PUSH
30933: LD_VAR 0 3
30937: PUSH
30938: LD_VAR 0 2
30942: MINUS
30943: ST_TO_ADDR
// end else
30944: GO 31007
// begin d := - 1 ;
30946: LD_ADDR_VAR 0 9
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: ST_TO_ADDR
// if i_from > i_to then
30955: LD_VAR 0 2
30959: PUSH
30960: LD_VAR 0 3
30964: GREATER
30965: IFFALSE 30985
// length := i_from - i_to else
30967: LD_ADDR_VAR 0 11
30971: PUSH
30972: LD_VAR 0 2
30976: PUSH
30977: LD_VAR 0 3
30981: MINUS
30982: ST_TO_ADDR
30983: GO 31007
// length := ( array - i_to ) + i_from ;
30985: LD_ADDR_VAR 0 11
30989: PUSH
30990: LD_VAR 0 1
30994: PUSH
30995: LD_VAR 0 3
30999: MINUS
31000: PUSH
31001: LD_VAR 0 2
31005: PLUS
31006: ST_TO_ADDR
// end ; if not length then
31007: LD_VAR 0 11
31011: NOT
31012: IFFALSE 31016
// exit ;
31014: GO 31174
// tmp := array ;
31016: LD_ADDR_VAR 0 10
31020: PUSH
31021: LD_VAR 0 1
31025: ST_TO_ADDR
// for i = 1 to length do
31026: LD_ADDR_VAR 0 6
31030: PUSH
31031: DOUBLE
31032: LD_INT 1
31034: DEC
31035: ST_TO_ADDR
31036: LD_VAR 0 11
31040: PUSH
31041: FOR_TO
31042: IFFALSE 31162
// begin for j = 1 to array do
31044: LD_ADDR_VAR 0 7
31048: PUSH
31049: DOUBLE
31050: LD_INT 1
31052: DEC
31053: ST_TO_ADDR
31054: LD_VAR 0 1
31058: PUSH
31059: FOR_TO
31060: IFFALSE 31148
// begin k := j + d ;
31062: LD_ADDR_VAR 0 8
31066: PUSH
31067: LD_VAR 0 7
31071: PUSH
31072: LD_VAR 0 9
31076: PLUS
31077: ST_TO_ADDR
// if k > array then
31078: LD_VAR 0 8
31082: PUSH
31083: LD_VAR 0 1
31087: GREATER
31088: IFFALSE 31098
// k := 1 ;
31090: LD_ADDR_VAR 0 8
31094: PUSH
31095: LD_INT 1
31097: ST_TO_ADDR
// if not k then
31098: LD_VAR 0 8
31102: NOT
31103: IFFALSE 31115
// k := array ;
31105: LD_ADDR_VAR 0 8
31109: PUSH
31110: LD_VAR 0 1
31114: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31115: LD_ADDR_VAR 0 10
31119: PUSH
31120: LD_VAR 0 10
31124: PPUSH
31125: LD_VAR 0 8
31129: PPUSH
31130: LD_VAR 0 1
31134: PUSH
31135: LD_VAR 0 7
31139: ARRAY
31140: PPUSH
31141: CALL_OW 1
31145: ST_TO_ADDR
// end ;
31146: GO 31059
31148: POP
31149: POP
// array := tmp ;
31150: LD_ADDR_VAR 0 1
31154: PUSH
31155: LD_VAR 0 10
31159: ST_TO_ADDR
// end ;
31160: GO 31041
31162: POP
31163: POP
// result := array ;
31164: LD_ADDR_VAR 0 5
31168: PUSH
31169: LD_VAR 0 1
31173: ST_TO_ADDR
// end ;
31174: LD_VAR 0 5
31178: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31179: LD_INT 0
31181: PPUSH
31182: PPUSH
// result := 0 ;
31183: LD_ADDR_VAR 0 3
31187: PUSH
31188: LD_INT 0
31190: ST_TO_ADDR
// if not array or not value in array then
31191: LD_VAR 0 1
31195: NOT
31196: PUSH
31197: LD_VAR 0 2
31201: PUSH
31202: LD_VAR 0 1
31206: IN
31207: NOT
31208: OR
31209: IFFALSE 31213
// exit ;
31211: GO 31267
// for i = 1 to array do
31213: LD_ADDR_VAR 0 4
31217: PUSH
31218: DOUBLE
31219: LD_INT 1
31221: DEC
31222: ST_TO_ADDR
31223: LD_VAR 0 1
31227: PUSH
31228: FOR_TO
31229: IFFALSE 31265
// if value = array [ i ] then
31231: LD_VAR 0 2
31235: PUSH
31236: LD_VAR 0 1
31240: PUSH
31241: LD_VAR 0 4
31245: ARRAY
31246: EQUAL
31247: IFFALSE 31263
// begin result := i ;
31249: LD_ADDR_VAR 0 3
31253: PUSH
31254: LD_VAR 0 4
31258: ST_TO_ADDR
// exit ;
31259: POP
31260: POP
31261: GO 31267
// end ;
31263: GO 31228
31265: POP
31266: POP
// end ;
31267: LD_VAR 0 3
31271: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31272: LD_INT 0
31274: PPUSH
// vc_chassis := chassis ;
31275: LD_ADDR_OWVAR 37
31279: PUSH
31280: LD_VAR 0 1
31284: ST_TO_ADDR
// vc_engine := engine ;
31285: LD_ADDR_OWVAR 39
31289: PUSH
31290: LD_VAR 0 2
31294: ST_TO_ADDR
// vc_control := control ;
31295: LD_ADDR_OWVAR 38
31299: PUSH
31300: LD_VAR 0 3
31304: ST_TO_ADDR
// vc_weapon := weapon ;
31305: LD_ADDR_OWVAR 40
31309: PUSH
31310: LD_VAR 0 4
31314: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31315: LD_ADDR_OWVAR 41
31319: PUSH
31320: LD_VAR 0 5
31324: ST_TO_ADDR
// end ;
31325: LD_VAR 0 6
31329: RET
// export function WantPlant ( unit ) ; var task ; begin
31330: LD_INT 0
31332: PPUSH
31333: PPUSH
// result := false ;
31334: LD_ADDR_VAR 0 2
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31342: LD_ADDR_VAR 0 3
31346: PUSH
31347: LD_VAR 0 1
31351: PPUSH
31352: CALL_OW 437
31356: ST_TO_ADDR
// if task then
31357: LD_VAR 0 3
31361: IFFALSE 31389
// if task [ 1 ] [ 1 ] = p then
31363: LD_VAR 0 3
31367: PUSH
31368: LD_INT 1
31370: ARRAY
31371: PUSH
31372: LD_INT 1
31374: ARRAY
31375: PUSH
31376: LD_STRING p
31378: EQUAL
31379: IFFALSE 31389
// result := true ;
31381: LD_ADDR_VAR 0 2
31385: PUSH
31386: LD_INT 1
31388: ST_TO_ADDR
// end ;
31389: LD_VAR 0 2
31393: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31394: LD_INT 0
31396: PPUSH
31397: PPUSH
31398: PPUSH
31399: PPUSH
// if pos < 1 then
31400: LD_VAR 0 2
31404: PUSH
31405: LD_INT 1
31407: LESS
31408: IFFALSE 31412
// exit ;
31410: GO 31715
// if pos = 1 then
31412: LD_VAR 0 2
31416: PUSH
31417: LD_INT 1
31419: EQUAL
31420: IFFALSE 31453
// result := Replace ( arr , pos [ 1 ] , value ) else
31422: LD_ADDR_VAR 0 4
31426: PUSH
31427: LD_VAR 0 1
31431: PPUSH
31432: LD_VAR 0 2
31436: PUSH
31437: LD_INT 1
31439: ARRAY
31440: PPUSH
31441: LD_VAR 0 3
31445: PPUSH
31446: CALL_OW 1
31450: ST_TO_ADDR
31451: GO 31715
// begin tmp := arr ;
31453: LD_ADDR_VAR 0 6
31457: PUSH
31458: LD_VAR 0 1
31462: ST_TO_ADDR
// s_arr := [ tmp ] ;
31463: LD_ADDR_VAR 0 7
31467: PUSH
31468: LD_VAR 0 6
31472: PUSH
31473: EMPTY
31474: LIST
31475: ST_TO_ADDR
// for i = 1 to pos - 1 do
31476: LD_ADDR_VAR 0 5
31480: PUSH
31481: DOUBLE
31482: LD_INT 1
31484: DEC
31485: ST_TO_ADDR
31486: LD_VAR 0 2
31490: PUSH
31491: LD_INT 1
31493: MINUS
31494: PUSH
31495: FOR_TO
31496: IFFALSE 31541
// begin tmp := tmp [ pos [ i ] ] ;
31498: LD_ADDR_VAR 0 6
31502: PUSH
31503: LD_VAR 0 6
31507: PUSH
31508: LD_VAR 0 2
31512: PUSH
31513: LD_VAR 0 5
31517: ARRAY
31518: ARRAY
31519: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31520: LD_ADDR_VAR 0 7
31524: PUSH
31525: LD_VAR 0 7
31529: PUSH
31530: LD_VAR 0 6
31534: PUSH
31535: EMPTY
31536: LIST
31537: ADD
31538: ST_TO_ADDR
// end ;
31539: GO 31495
31541: POP
31542: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31543: LD_ADDR_VAR 0 6
31547: PUSH
31548: LD_VAR 0 6
31552: PPUSH
31553: LD_VAR 0 2
31557: PUSH
31558: LD_VAR 0 2
31562: ARRAY
31563: PPUSH
31564: LD_VAR 0 3
31568: PPUSH
31569: CALL_OW 1
31573: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31574: LD_ADDR_VAR 0 7
31578: PUSH
31579: LD_VAR 0 7
31583: PPUSH
31584: LD_VAR 0 7
31588: PPUSH
31589: LD_VAR 0 6
31593: PPUSH
31594: CALL_OW 1
31598: ST_TO_ADDR
// for i = s_arr downto 2 do
31599: LD_ADDR_VAR 0 5
31603: PUSH
31604: DOUBLE
31605: LD_VAR 0 7
31609: INC
31610: ST_TO_ADDR
31611: LD_INT 2
31613: PUSH
31614: FOR_DOWNTO
31615: IFFALSE 31699
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31617: LD_ADDR_VAR 0 6
31621: PUSH
31622: LD_VAR 0 7
31626: PUSH
31627: LD_VAR 0 5
31631: PUSH
31632: LD_INT 1
31634: MINUS
31635: ARRAY
31636: PPUSH
31637: LD_VAR 0 2
31641: PUSH
31642: LD_VAR 0 5
31646: PUSH
31647: LD_INT 1
31649: MINUS
31650: ARRAY
31651: PPUSH
31652: LD_VAR 0 7
31656: PUSH
31657: LD_VAR 0 5
31661: ARRAY
31662: PPUSH
31663: CALL_OW 1
31667: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31668: LD_ADDR_VAR 0 7
31672: PUSH
31673: LD_VAR 0 7
31677: PPUSH
31678: LD_VAR 0 5
31682: PUSH
31683: LD_INT 1
31685: MINUS
31686: PPUSH
31687: LD_VAR 0 6
31691: PPUSH
31692: CALL_OW 1
31696: ST_TO_ADDR
// end ;
31697: GO 31614
31699: POP
31700: POP
// result := s_arr [ 1 ] ;
31701: LD_ADDR_VAR 0 4
31705: PUSH
31706: LD_VAR 0 7
31710: PUSH
31711: LD_INT 1
31713: ARRAY
31714: ST_TO_ADDR
// end ; end ;
31715: LD_VAR 0 4
31719: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31720: LD_INT 0
31722: PPUSH
31723: PPUSH
// if not list then
31724: LD_VAR 0 1
31728: NOT
31729: IFFALSE 31733
// exit ;
31731: GO 31824
// i := list [ pos1 ] ;
31733: LD_ADDR_VAR 0 5
31737: PUSH
31738: LD_VAR 0 1
31742: PUSH
31743: LD_VAR 0 2
31747: ARRAY
31748: ST_TO_ADDR
// if not i then
31749: LD_VAR 0 5
31753: NOT
31754: IFFALSE 31758
// exit ;
31756: GO 31824
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31758: LD_ADDR_VAR 0 1
31762: PUSH
31763: LD_VAR 0 1
31767: PPUSH
31768: LD_VAR 0 2
31772: PPUSH
31773: LD_VAR 0 1
31777: PUSH
31778: LD_VAR 0 3
31782: ARRAY
31783: PPUSH
31784: CALL_OW 1
31788: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31789: LD_ADDR_VAR 0 1
31793: PUSH
31794: LD_VAR 0 1
31798: PPUSH
31799: LD_VAR 0 3
31803: PPUSH
31804: LD_VAR 0 5
31808: PPUSH
31809: CALL_OW 1
31813: ST_TO_ADDR
// result := list ;
31814: LD_ADDR_VAR 0 4
31818: PUSH
31819: LD_VAR 0 1
31823: ST_TO_ADDR
// end ;
31824: LD_VAR 0 4
31828: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31829: LD_INT 0
31831: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31832: LD_ADDR_VAR 0 5
31836: PUSH
31837: LD_VAR 0 1
31841: PPUSH
31842: CALL_OW 250
31846: PPUSH
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 251
31856: PPUSH
31857: LD_VAR 0 2
31861: PPUSH
31862: LD_VAR 0 3
31866: PPUSH
31867: LD_VAR 0 4
31871: PPUSH
31872: CALL 32250 0 5
31876: ST_TO_ADDR
// end ;
31877: LD_VAR 0 5
31881: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31882: LD_INT 0
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
// if not list or not unit then
31888: LD_VAR 0 2
31892: NOT
31893: PUSH
31894: LD_VAR 0 1
31898: NOT
31899: OR
31900: IFFALSE 31904
// exit ;
31902: GO 32245
// result := [ ] ;
31904: LD_ADDR_VAR 0 5
31908: PUSH
31909: EMPTY
31910: ST_TO_ADDR
// for i in list do
31911: LD_ADDR_VAR 0 6
31915: PUSH
31916: LD_VAR 0 2
31920: PUSH
31921: FOR_IN
31922: IFFALSE 32140
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31924: LD_ADDR_VAR 0 8
31928: PUSH
31929: LD_VAR 0 1
31933: PPUSH
31934: LD_VAR 0 6
31938: PUSH
31939: LD_INT 1
31941: ARRAY
31942: PPUSH
31943: LD_VAR 0 6
31947: PUSH
31948: LD_INT 2
31950: ARRAY
31951: PPUSH
31952: CALL_OW 297
31956: ST_TO_ADDR
// if not Count ( result ) then
31957: LD_VAR 0 5
31961: PPUSH
31962: CALL 28534 0 1
31966: NOT
31967: IFFALSE 32000
// begin result := Join ( result , [ i , tmp ] ) ;
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: LD_VAR 0 5
31978: PPUSH
31979: LD_VAR 0 6
31983: PUSH
31984: LD_VAR 0 8
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PPUSH
31993: CALL 64123 0 2
31997: ST_TO_ADDR
// continue ;
31998: GO 31921
// end ; if result [ result ] [ 2 ] <= tmp then
32000: LD_VAR 0 5
32004: PUSH
32005: LD_VAR 0 5
32009: ARRAY
32010: PUSH
32011: LD_INT 2
32013: ARRAY
32014: PUSH
32015: LD_VAR 0 8
32019: LESSEQUAL
32020: IFFALSE 32053
// result := Join ( result , [ i , tmp ] ) else
32022: LD_ADDR_VAR 0 5
32026: PUSH
32027: LD_VAR 0 5
32031: PPUSH
32032: LD_VAR 0 6
32036: PUSH
32037: LD_VAR 0 8
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PPUSH
32046: CALL 64123 0 2
32050: ST_TO_ADDR
32051: GO 32138
// begin for j := 1 to Count ( result ) do
32053: LD_ADDR_VAR 0 7
32057: PUSH
32058: DOUBLE
32059: LD_INT 1
32061: DEC
32062: ST_TO_ADDR
32063: LD_VAR 0 5
32067: PPUSH
32068: CALL 28534 0 1
32072: PUSH
32073: FOR_TO
32074: IFFALSE 32136
// begin if tmp < result [ j ] [ 2 ] then
32076: LD_VAR 0 8
32080: PUSH
32081: LD_VAR 0 5
32085: PUSH
32086: LD_VAR 0 7
32090: ARRAY
32091: PUSH
32092: LD_INT 2
32094: ARRAY
32095: LESS
32096: IFFALSE 32134
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32098: LD_ADDR_VAR 0 5
32102: PUSH
32103: LD_VAR 0 5
32107: PPUSH
32108: LD_VAR 0 7
32112: PPUSH
32113: LD_VAR 0 6
32117: PUSH
32118: LD_VAR 0 8
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PPUSH
32127: CALL_OW 2
32131: ST_TO_ADDR
// break ;
32132: GO 32136
// end ; end ;
32134: GO 32073
32136: POP
32137: POP
// end ; end ;
32138: GO 31921
32140: POP
32141: POP
// if result and not asc then
32142: LD_VAR 0 5
32146: PUSH
32147: LD_VAR 0 3
32151: NOT
32152: AND
32153: IFFALSE 32170
// result := ReverseArray ( result ) ;
32155: LD_ADDR_VAR 0 5
32159: PUSH
32160: LD_VAR 0 5
32164: PPUSH
32165: CALL 59410 0 1
32169: ST_TO_ADDR
// tmp := [ ] ;
32170: LD_ADDR_VAR 0 8
32174: PUSH
32175: EMPTY
32176: ST_TO_ADDR
// if mode then
32177: LD_VAR 0 4
32181: IFFALSE 32245
// begin for i := 1 to result do
32183: LD_ADDR_VAR 0 6
32187: PUSH
32188: DOUBLE
32189: LD_INT 1
32191: DEC
32192: ST_TO_ADDR
32193: LD_VAR 0 5
32197: PUSH
32198: FOR_TO
32199: IFFALSE 32233
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32201: LD_ADDR_VAR 0 8
32205: PUSH
32206: LD_VAR 0 8
32210: PPUSH
32211: LD_VAR 0 5
32215: PUSH
32216: LD_VAR 0 6
32220: ARRAY
32221: PUSH
32222: LD_INT 1
32224: ARRAY
32225: PPUSH
32226: CALL 64123 0 2
32230: ST_TO_ADDR
32231: GO 32198
32233: POP
32234: POP
// result := tmp ;
32235: LD_ADDR_VAR 0 5
32239: PUSH
32240: LD_VAR 0 8
32244: ST_TO_ADDR
// end ; end ;
32245: LD_VAR 0 5
32249: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32250: LD_INT 0
32252: PPUSH
32253: PPUSH
32254: PPUSH
32255: PPUSH
// if not list then
32256: LD_VAR 0 3
32260: NOT
32261: IFFALSE 32265
// exit ;
32263: GO 32653
// result := [ ] ;
32265: LD_ADDR_VAR 0 6
32269: PUSH
32270: EMPTY
32271: ST_TO_ADDR
// for i in list do
32272: LD_ADDR_VAR 0 7
32276: PUSH
32277: LD_VAR 0 3
32281: PUSH
32282: FOR_IN
32283: IFFALSE 32485
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32285: LD_ADDR_VAR 0 9
32289: PUSH
32290: LD_VAR 0 7
32294: PPUSH
32295: LD_VAR 0 1
32299: PPUSH
32300: LD_VAR 0 2
32304: PPUSH
32305: CALL_OW 297
32309: ST_TO_ADDR
// if not result then
32310: LD_VAR 0 6
32314: NOT
32315: IFFALSE 32341
// result := [ [ i , tmp ] ] else
32317: LD_ADDR_VAR 0 6
32321: PUSH
32322: LD_VAR 0 7
32326: PUSH
32327: LD_VAR 0 9
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: EMPTY
32337: LIST
32338: ST_TO_ADDR
32339: GO 32483
// begin if result [ result ] [ 2 ] < tmp then
32341: LD_VAR 0 6
32345: PUSH
32346: LD_VAR 0 6
32350: ARRAY
32351: PUSH
32352: LD_INT 2
32354: ARRAY
32355: PUSH
32356: LD_VAR 0 9
32360: LESS
32361: IFFALSE 32403
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32363: LD_ADDR_VAR 0 6
32367: PUSH
32368: LD_VAR 0 6
32372: PPUSH
32373: LD_VAR 0 6
32377: PUSH
32378: LD_INT 1
32380: PLUS
32381: PPUSH
32382: LD_VAR 0 7
32386: PUSH
32387: LD_VAR 0 9
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PPUSH
32396: CALL_OW 2
32400: ST_TO_ADDR
32401: GO 32483
// for j = 1 to result do
32403: LD_ADDR_VAR 0 8
32407: PUSH
32408: DOUBLE
32409: LD_INT 1
32411: DEC
32412: ST_TO_ADDR
32413: LD_VAR 0 6
32417: PUSH
32418: FOR_TO
32419: IFFALSE 32481
// begin if tmp < result [ j ] [ 2 ] then
32421: LD_VAR 0 9
32425: PUSH
32426: LD_VAR 0 6
32430: PUSH
32431: LD_VAR 0 8
32435: ARRAY
32436: PUSH
32437: LD_INT 2
32439: ARRAY
32440: LESS
32441: IFFALSE 32479
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32443: LD_ADDR_VAR 0 6
32447: PUSH
32448: LD_VAR 0 6
32452: PPUSH
32453: LD_VAR 0 8
32457: PPUSH
32458: LD_VAR 0 7
32462: PUSH
32463: LD_VAR 0 9
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PPUSH
32472: CALL_OW 2
32476: ST_TO_ADDR
// break ;
32477: GO 32481
// end ; end ;
32479: GO 32418
32481: POP
32482: POP
// end ; end ;
32483: GO 32282
32485: POP
32486: POP
// if result and not asc then
32487: LD_VAR 0 6
32491: PUSH
32492: LD_VAR 0 4
32496: NOT
32497: AND
32498: IFFALSE 32573
// begin tmp := result ;
32500: LD_ADDR_VAR 0 9
32504: PUSH
32505: LD_VAR 0 6
32509: ST_TO_ADDR
// for i = tmp downto 1 do
32510: LD_ADDR_VAR 0 7
32514: PUSH
32515: DOUBLE
32516: LD_VAR 0 9
32520: INC
32521: ST_TO_ADDR
32522: LD_INT 1
32524: PUSH
32525: FOR_DOWNTO
32526: IFFALSE 32571
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32528: LD_ADDR_VAR 0 6
32532: PUSH
32533: LD_VAR 0 6
32537: PPUSH
32538: LD_VAR 0 9
32542: PUSH
32543: LD_VAR 0 7
32547: MINUS
32548: PUSH
32549: LD_INT 1
32551: PLUS
32552: PPUSH
32553: LD_VAR 0 9
32557: PUSH
32558: LD_VAR 0 7
32562: ARRAY
32563: PPUSH
32564: CALL_OW 1
32568: ST_TO_ADDR
32569: GO 32525
32571: POP
32572: POP
// end ; tmp := [ ] ;
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: EMPTY
32579: ST_TO_ADDR
// if mode then
32580: LD_VAR 0 5
32584: IFFALSE 32653
// begin for i = 1 to result do
32586: LD_ADDR_VAR 0 7
32590: PUSH
32591: DOUBLE
32592: LD_INT 1
32594: DEC
32595: ST_TO_ADDR
32596: LD_VAR 0 6
32600: PUSH
32601: FOR_TO
32602: IFFALSE 32641
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32604: LD_ADDR_VAR 0 9
32608: PUSH
32609: LD_VAR 0 9
32613: PPUSH
32614: LD_VAR 0 7
32618: PPUSH
32619: LD_VAR 0 6
32623: PUSH
32624: LD_VAR 0 7
32628: ARRAY
32629: PUSH
32630: LD_INT 1
32632: ARRAY
32633: PPUSH
32634: CALL_OW 1
32638: ST_TO_ADDR
32639: GO 32601
32641: POP
32642: POP
// result := tmp ;
32643: LD_ADDR_VAR 0 6
32647: PUSH
32648: LD_VAR 0 9
32652: ST_TO_ADDR
// end ; end ;
32653: LD_VAR 0 6
32657: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32658: LD_INT 0
32660: PPUSH
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32666: LD_ADDR_VAR 0 5
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: ST_TO_ADDR
// if not x or not y then
32688: LD_VAR 0 2
32692: NOT
32693: PUSH
32694: LD_VAR 0 3
32698: NOT
32699: OR
32700: IFFALSE 32704
// exit ;
32702: GO 34354
// if not range then
32704: LD_VAR 0 4
32708: NOT
32709: IFFALSE 32719
// range := 10 ;
32711: LD_ADDR_VAR 0 4
32715: PUSH
32716: LD_INT 10
32718: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32719: LD_ADDR_VAR 0 8
32723: PUSH
32724: LD_INT 81
32726: PUSH
32727: LD_VAR 0 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 92
32738: PUSH
32739: LD_VAR 0 2
32743: PUSH
32744: LD_VAR 0 3
32748: PUSH
32749: LD_VAR 0 4
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 21
32765: PUSH
32766: LD_INT 3
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: LIST
32781: PPUSH
32782: CALL_OW 69
32786: ST_TO_ADDR
// if not tmp then
32787: LD_VAR 0 8
32791: NOT
32792: IFFALSE 32796
// exit ;
32794: GO 34354
// for i in tmp do
32796: LD_ADDR_VAR 0 6
32800: PUSH
32801: LD_VAR 0 8
32805: PUSH
32806: FOR_IN
32807: IFFALSE 34329
// begin points := [ 0 , 0 , 0 ] ;
32809: LD_ADDR_VAR 0 9
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: ST_TO_ADDR
// bpoints := 1 ;
32828: LD_ADDR_VAR 0 10
32832: PUSH
32833: LD_INT 1
32835: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32836: LD_VAR 0 6
32840: PPUSH
32841: CALL_OW 247
32845: PUSH
32846: LD_INT 1
32848: DOUBLE
32849: EQUAL
32850: IFTRUE 32854
32852: GO 33432
32854: POP
// begin if GetClass ( i ) = 1 then
32855: LD_VAR 0 6
32859: PPUSH
32860: CALL_OW 257
32864: PUSH
32865: LD_INT 1
32867: EQUAL
32868: IFFALSE 32889
// points := [ 10 , 5 , 3 ] ;
32870: LD_ADDR_VAR 0 9
32874: PUSH
32875: LD_INT 10
32877: PUSH
32878: LD_INT 5
32880: PUSH
32881: LD_INT 3
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32889: LD_VAR 0 6
32893: PPUSH
32894: CALL_OW 257
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: LD_INT 4
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: IN
32913: IFFALSE 32934
// points := [ 3 , 2 , 1 ] ;
32915: LD_ADDR_VAR 0 9
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32934: LD_VAR 0 6
32938: PPUSH
32939: CALL_OW 257
32943: PUSH
32944: LD_INT 5
32946: EQUAL
32947: IFFALSE 32968
// points := [ 130 , 5 , 2 ] ;
32949: LD_ADDR_VAR 0 9
32953: PUSH
32954: LD_INT 130
32956: PUSH
32957: LD_INT 5
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32968: LD_VAR 0 6
32972: PPUSH
32973: CALL_OW 257
32977: PUSH
32978: LD_INT 8
32980: EQUAL
32981: IFFALSE 33002
// points := [ 35 , 35 , 30 ] ;
32983: LD_ADDR_VAR 0 9
32987: PUSH
32988: LD_INT 35
32990: PUSH
32991: LD_INT 35
32993: PUSH
32994: LD_INT 30
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: LIST
33001: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33002: LD_VAR 0 6
33006: PPUSH
33007: CALL_OW 257
33011: PUSH
33012: LD_INT 9
33014: EQUAL
33015: IFFALSE 33036
// points := [ 20 , 55 , 40 ] ;
33017: LD_ADDR_VAR 0 9
33021: PUSH
33022: LD_INT 20
33024: PUSH
33025: LD_INT 55
33027: PUSH
33028: LD_INT 40
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33036: LD_VAR 0 6
33040: PPUSH
33041: CALL_OW 257
33045: PUSH
33046: LD_INT 12
33048: PUSH
33049: LD_INT 16
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: IN
33056: IFFALSE 33077
// points := [ 5 , 3 , 2 ] ;
33058: LD_ADDR_VAR 0 9
33062: PUSH
33063: LD_INT 5
33065: PUSH
33066: LD_INT 3
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33077: LD_VAR 0 6
33081: PPUSH
33082: CALL_OW 257
33086: PUSH
33087: LD_INT 17
33089: EQUAL
33090: IFFALSE 33111
// points := [ 100 , 50 , 75 ] ;
33092: LD_ADDR_VAR 0 9
33096: PUSH
33097: LD_INT 100
33099: PUSH
33100: LD_INT 50
33102: PUSH
33103: LD_INT 75
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33111: LD_VAR 0 6
33115: PPUSH
33116: CALL_OW 257
33120: PUSH
33121: LD_INT 15
33123: EQUAL
33124: IFFALSE 33145
// points := [ 10 , 5 , 3 ] ;
33126: LD_ADDR_VAR 0 9
33130: PUSH
33131: LD_INT 10
33133: PUSH
33134: LD_INT 5
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33145: LD_VAR 0 6
33149: PPUSH
33150: CALL_OW 257
33154: PUSH
33155: LD_INT 14
33157: EQUAL
33158: IFFALSE 33179
// points := [ 10 , 0 , 0 ] ;
33160: LD_ADDR_VAR 0 9
33164: PUSH
33165: LD_INT 10
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33179: LD_VAR 0 6
33183: PPUSH
33184: CALL_OW 257
33188: PUSH
33189: LD_INT 11
33191: EQUAL
33192: IFFALSE 33213
// points := [ 30 , 10 , 5 ] ;
33194: LD_ADDR_VAR 0 9
33198: PUSH
33199: LD_INT 30
33201: PUSH
33202: LD_INT 10
33204: PUSH
33205: LD_INT 5
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33213: LD_VAR 0 1
33217: PPUSH
33218: LD_INT 5
33220: PPUSH
33221: CALL_OW 321
33225: PUSH
33226: LD_INT 2
33228: EQUAL
33229: IFFALSE 33246
// bpoints := bpoints * 1.8 ;
33231: LD_ADDR_VAR 0 10
33235: PUSH
33236: LD_VAR 0 10
33240: PUSH
33241: LD_REAL  1.80000000000000E+0000
33244: MUL
33245: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33246: LD_VAR 0 6
33250: PPUSH
33251: CALL_OW 257
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: LD_INT 4
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: IN
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: LD_INT 51
33282: PPUSH
33283: CALL_OW 321
33287: PUSH
33288: LD_INT 2
33290: EQUAL
33291: AND
33292: IFFALSE 33309
// bpoints := bpoints * 1.2 ;
33294: LD_ADDR_VAR 0 10
33298: PUSH
33299: LD_VAR 0 10
33303: PUSH
33304: LD_REAL  1.20000000000000E+0000
33307: MUL
33308: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33309: LD_VAR 0 6
33313: PPUSH
33314: CALL_OW 257
33318: PUSH
33319: LD_INT 5
33321: PUSH
33322: LD_INT 7
33324: PUSH
33325: LD_INT 9
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: IN
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: LD_INT 52
33341: PPUSH
33342: CALL_OW 321
33346: PUSH
33347: LD_INT 2
33349: EQUAL
33350: AND
33351: IFFALSE 33368
// bpoints := bpoints * 1.5 ;
33353: LD_ADDR_VAR 0 10
33357: PUSH
33358: LD_VAR 0 10
33362: PUSH
33363: LD_REAL  1.50000000000000E+0000
33366: MUL
33367: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33368: LD_VAR 0 1
33372: PPUSH
33373: LD_INT 66
33375: PPUSH
33376: CALL_OW 321
33380: PUSH
33381: LD_INT 2
33383: EQUAL
33384: IFFALSE 33401
// bpoints := bpoints * 1.1 ;
33386: LD_ADDR_VAR 0 10
33390: PUSH
33391: LD_VAR 0 10
33395: PUSH
33396: LD_REAL  1.10000000000000E+0000
33399: MUL
33400: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33401: LD_ADDR_VAR 0 10
33405: PUSH
33406: LD_VAR 0 10
33410: PUSH
33411: LD_VAR 0 6
33415: PPUSH
33416: LD_INT 1
33418: PPUSH
33419: CALL_OW 259
33423: PUSH
33424: LD_REAL  1.15000000000000E+0000
33427: MUL
33428: MUL
33429: ST_TO_ADDR
// end ; unit_vehicle :
33430: GO 34258
33432: LD_INT 2
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 34246
33440: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33441: LD_VAR 0 6
33445: PPUSH
33446: CALL_OW 264
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 42
33456: PUSH
33457: LD_INT 24
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: IN
33465: IFFALSE 33486
// points := [ 25 , 5 , 3 ] ;
33467: LD_ADDR_VAR 0 9
33471: PUSH
33472: LD_INT 25
33474: PUSH
33475: LD_INT 5
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: LIST
33485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33486: LD_VAR 0 6
33490: PPUSH
33491: CALL_OW 264
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: LD_INT 43
33501: PUSH
33502: LD_INT 25
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: IN
33510: IFFALSE 33531
// points := [ 40 , 15 , 5 ] ;
33512: LD_ADDR_VAR 0 9
33516: PUSH
33517: LD_INT 40
33519: PUSH
33520: LD_INT 15
33522: PUSH
33523: LD_INT 5
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33531: LD_VAR 0 6
33535: PPUSH
33536: CALL_OW 264
33540: PUSH
33541: LD_INT 3
33543: PUSH
33544: LD_INT 23
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: IN
33551: IFFALSE 33572
// points := [ 7 , 25 , 8 ] ;
33553: LD_ADDR_VAR 0 9
33557: PUSH
33558: LD_INT 7
33560: PUSH
33561: LD_INT 25
33563: PUSH
33564: LD_INT 8
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33572: LD_VAR 0 6
33576: PPUSH
33577: CALL_OW 264
33581: PUSH
33582: LD_INT 5
33584: PUSH
33585: LD_INT 27
33587: PUSH
33588: LD_INT 44
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: IN
33596: IFFALSE 33617
// points := [ 14 , 50 , 16 ] ;
33598: LD_ADDR_VAR 0 9
33602: PUSH
33603: LD_INT 14
33605: PUSH
33606: LD_INT 50
33608: PUSH
33609: LD_INT 16
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33617: LD_VAR 0 6
33621: PPUSH
33622: CALL_OW 264
33626: PUSH
33627: LD_INT 6
33629: PUSH
33630: LD_INT 46
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: IN
33637: IFFALSE 33658
// points := [ 32 , 120 , 70 ] ;
33639: LD_ADDR_VAR 0 9
33643: PUSH
33644: LD_INT 32
33646: PUSH
33647: LD_INT 120
33649: PUSH
33650: LD_INT 70
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33658: LD_VAR 0 6
33662: PPUSH
33663: CALL_OW 264
33667: PUSH
33668: LD_INT 7
33670: PUSH
33671: LD_INT 28
33673: PUSH
33674: LD_INT 45
33676: PUSH
33677: LD_INT 92
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: IN
33686: IFFALSE 33707
// points := [ 35 , 20 , 45 ] ;
33688: LD_ADDR_VAR 0 9
33692: PUSH
33693: LD_INT 35
33695: PUSH
33696: LD_INT 20
33698: PUSH
33699: LD_INT 45
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33707: LD_VAR 0 6
33711: PPUSH
33712: CALL_OW 264
33716: PUSH
33717: LD_INT 47
33719: PUSH
33720: EMPTY
33721: LIST
33722: IN
33723: IFFALSE 33744
// points := [ 67 , 45 , 75 ] ;
33725: LD_ADDR_VAR 0 9
33729: PUSH
33730: LD_INT 67
33732: PUSH
33733: LD_INT 45
33735: PUSH
33736: LD_INT 75
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33744: LD_VAR 0 6
33748: PPUSH
33749: CALL_OW 264
33753: PUSH
33754: LD_INT 26
33756: PUSH
33757: EMPTY
33758: LIST
33759: IN
33760: IFFALSE 33781
// points := [ 120 , 30 , 80 ] ;
33762: LD_ADDR_VAR 0 9
33766: PUSH
33767: LD_INT 120
33769: PUSH
33770: LD_INT 30
33772: PUSH
33773: LD_INT 80
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33781: LD_VAR 0 6
33785: PPUSH
33786: CALL_OW 264
33790: PUSH
33791: LD_INT 22
33793: PUSH
33794: EMPTY
33795: LIST
33796: IN
33797: IFFALSE 33818
// points := [ 40 , 1 , 1 ] ;
33799: LD_ADDR_VAR 0 9
33803: PUSH
33804: LD_INT 40
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33818: LD_VAR 0 6
33822: PPUSH
33823: CALL_OW 264
33827: PUSH
33828: LD_INT 29
33830: PUSH
33831: EMPTY
33832: LIST
33833: IN
33834: IFFALSE 33855
// points := [ 70 , 200 , 400 ] ;
33836: LD_ADDR_VAR 0 9
33840: PUSH
33841: LD_INT 70
33843: PUSH
33844: LD_INT 200
33846: PUSH
33847: LD_INT 400
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33855: LD_VAR 0 6
33859: PPUSH
33860: CALL_OW 264
33864: PUSH
33865: LD_INT 14
33867: PUSH
33868: LD_INT 53
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: IN
33875: IFFALSE 33896
// points := [ 40 , 10 , 20 ] ;
33877: LD_ADDR_VAR 0 9
33881: PUSH
33882: LD_INT 40
33884: PUSH
33885: LD_INT 10
33887: PUSH
33888: LD_INT 20
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33896: LD_VAR 0 6
33900: PPUSH
33901: CALL_OW 264
33905: PUSH
33906: LD_INT 9
33908: PUSH
33909: EMPTY
33910: LIST
33911: IN
33912: IFFALSE 33933
// points := [ 5 , 70 , 20 ] ;
33914: LD_ADDR_VAR 0 9
33918: PUSH
33919: LD_INT 5
33921: PUSH
33922: LD_INT 70
33924: PUSH
33925: LD_INT 20
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33933: LD_VAR 0 6
33937: PPUSH
33938: CALL_OW 264
33942: PUSH
33943: LD_INT 10
33945: PUSH
33946: EMPTY
33947: LIST
33948: IN
33949: IFFALSE 33970
// points := [ 35 , 110 , 70 ] ;
33951: LD_ADDR_VAR 0 9
33955: PUSH
33956: LD_INT 35
33958: PUSH
33959: LD_INT 110
33961: PUSH
33962: LD_INT 70
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33970: LD_VAR 0 6
33974: PPUSH
33975: CALL_OW 265
33979: PUSH
33980: LD_INT 25
33982: EQUAL
33983: IFFALSE 34004
// points := [ 80 , 65 , 100 ] ;
33985: LD_ADDR_VAR 0 9
33989: PUSH
33990: LD_INT 80
33992: PUSH
33993: LD_INT 65
33995: PUSH
33996: LD_INT 100
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34004: LD_VAR 0 6
34008: PPUSH
34009: CALL_OW 263
34013: PUSH
34014: LD_INT 1
34016: EQUAL
34017: IFFALSE 34052
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34019: LD_ADDR_VAR 0 10
34023: PUSH
34024: LD_VAR 0 10
34028: PUSH
34029: LD_VAR 0 6
34033: PPUSH
34034: CALL_OW 311
34038: PPUSH
34039: LD_INT 3
34041: PPUSH
34042: CALL_OW 259
34046: PUSH
34047: LD_INT 4
34049: MUL
34050: MUL
34051: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34052: LD_VAR 0 6
34056: PPUSH
34057: CALL_OW 263
34061: PUSH
34062: LD_INT 2
34064: EQUAL
34065: IFFALSE 34116
// begin j := IsControledBy ( i ) ;
34067: LD_ADDR_VAR 0 7
34071: PUSH
34072: LD_VAR 0 6
34076: PPUSH
34077: CALL_OW 312
34081: ST_TO_ADDR
// if j then
34082: LD_VAR 0 7
34086: IFFALSE 34116
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34088: LD_ADDR_VAR 0 10
34092: PUSH
34093: LD_VAR 0 10
34097: PUSH
34098: LD_VAR 0 7
34102: PPUSH
34103: LD_INT 3
34105: PPUSH
34106: CALL_OW 259
34110: PUSH
34111: LD_INT 3
34113: MUL
34114: MUL
34115: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34116: LD_VAR 0 6
34120: PPUSH
34121: CALL_OW 264
34125: PUSH
34126: LD_INT 5
34128: PUSH
34129: LD_INT 6
34131: PUSH
34132: LD_INT 46
34134: PUSH
34135: LD_INT 44
34137: PUSH
34138: LD_INT 47
34140: PUSH
34141: LD_INT 45
34143: PUSH
34144: LD_INT 28
34146: PUSH
34147: LD_INT 7
34149: PUSH
34150: LD_INT 27
34152: PUSH
34153: LD_INT 29
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: IN
34168: PUSH
34169: LD_VAR 0 1
34173: PPUSH
34174: LD_INT 52
34176: PPUSH
34177: CALL_OW 321
34181: PUSH
34182: LD_INT 2
34184: EQUAL
34185: AND
34186: IFFALSE 34203
// bpoints := bpoints * 1.2 ;
34188: LD_ADDR_VAR 0 10
34192: PUSH
34193: LD_VAR 0 10
34197: PUSH
34198: LD_REAL  1.20000000000000E+0000
34201: MUL
34202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34203: LD_VAR 0 6
34207: PPUSH
34208: CALL_OW 264
34212: PUSH
34213: LD_INT 6
34215: PUSH
34216: LD_INT 46
34218: PUSH
34219: LD_INT 47
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: LIST
34226: IN
34227: IFFALSE 34244
// bpoints := bpoints * 1.2 ;
34229: LD_ADDR_VAR 0 10
34233: PUSH
34234: LD_VAR 0 10
34238: PUSH
34239: LD_REAL  1.20000000000000E+0000
34242: MUL
34243: ST_TO_ADDR
// end ; unit_building :
34244: GO 34258
34246: LD_INT 3
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34254
34252: GO 34257
34254: POP
// ; end ;
34255: GO 34258
34257: POP
// for j = 1 to 3 do
34258: LD_ADDR_VAR 0 7
34262: PUSH
34263: DOUBLE
34264: LD_INT 1
34266: DEC
34267: ST_TO_ADDR
34268: LD_INT 3
34270: PUSH
34271: FOR_TO
34272: IFFALSE 34325
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34274: LD_ADDR_VAR 0 5
34278: PUSH
34279: LD_VAR 0 5
34283: PPUSH
34284: LD_VAR 0 7
34288: PPUSH
34289: LD_VAR 0 5
34293: PUSH
34294: LD_VAR 0 7
34298: ARRAY
34299: PUSH
34300: LD_VAR 0 9
34304: PUSH
34305: LD_VAR 0 7
34309: ARRAY
34310: PUSH
34311: LD_VAR 0 10
34315: MUL
34316: PLUS
34317: PPUSH
34318: CALL_OW 1
34322: ST_TO_ADDR
34323: GO 34271
34325: POP
34326: POP
// end ;
34327: GO 32806
34329: POP
34330: POP
// result := Replace ( result , 4 , tmp ) ;
34331: LD_ADDR_VAR 0 5
34335: PUSH
34336: LD_VAR 0 5
34340: PPUSH
34341: LD_INT 4
34343: PPUSH
34344: LD_VAR 0 8
34348: PPUSH
34349: CALL_OW 1
34353: ST_TO_ADDR
// end ;
34354: LD_VAR 0 5
34358: RET
// export function DangerAtRange ( unit , range ) ; begin
34359: LD_INT 0
34361: PPUSH
// if not unit then
34362: LD_VAR 0 1
34366: NOT
34367: IFFALSE 34371
// exit ;
34369: GO 34416
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34371: LD_ADDR_VAR 0 3
34375: PUSH
34376: LD_VAR 0 1
34380: PPUSH
34381: CALL_OW 255
34385: PPUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: CALL_OW 250
34395: PPUSH
34396: LD_VAR 0 1
34400: PPUSH
34401: CALL_OW 251
34405: PPUSH
34406: LD_VAR 0 2
34410: PPUSH
34411: CALL 32658 0 4
34415: ST_TO_ADDR
// end ;
34416: LD_VAR 0 3
34420: RET
// export function DangerInArea ( side , area ) ; begin
34421: LD_INT 0
34423: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_VAR 0 2
34433: PPUSH
34434: LD_INT 81
34436: PUSH
34437: LD_VAR 0 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PPUSH
34446: CALL_OW 70
34450: ST_TO_ADDR
// end ;
34451: LD_VAR 0 3
34455: RET
// export function IsExtension ( b ) ; begin
34456: LD_INT 0
34458: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34459: LD_ADDR_VAR 0 2
34463: PUSH
34464: LD_VAR 0 1
34468: PUSH
34469: LD_INT 23
34471: PUSH
34472: LD_INT 20
34474: PUSH
34475: LD_INT 22
34477: PUSH
34478: LD_INT 17
34480: PUSH
34481: LD_INT 24
34483: PUSH
34484: LD_INT 21
34486: PUSH
34487: LD_INT 19
34489: PUSH
34490: LD_INT 16
34492: PUSH
34493: LD_INT 25
34495: PUSH
34496: LD_INT 18
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: IN
34511: ST_TO_ADDR
// end ;
34512: LD_VAR 0 2
34516: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34517: LD_INT 0
34519: PPUSH
34520: PPUSH
34521: PPUSH
// result := [ ] ;
34522: LD_ADDR_VAR 0 4
34526: PUSH
34527: EMPTY
34528: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34529: LD_ADDR_VAR 0 5
34533: PUSH
34534: LD_VAR 0 2
34538: PPUSH
34539: LD_INT 21
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PPUSH
34549: CALL_OW 70
34553: ST_TO_ADDR
// if not tmp then
34554: LD_VAR 0 5
34558: NOT
34559: IFFALSE 34563
// exit ;
34561: GO 34627
// if checkLink then
34563: LD_VAR 0 3
34567: IFFALSE 34617
// begin for i in tmp do
34569: LD_ADDR_VAR 0 6
34573: PUSH
34574: LD_VAR 0 5
34578: PUSH
34579: FOR_IN
34580: IFFALSE 34615
// if GetBase ( i ) <> base then
34582: LD_VAR 0 6
34586: PPUSH
34587: CALL_OW 274
34591: PUSH
34592: LD_VAR 0 1
34596: NONEQUAL
34597: IFFALSE 34613
// ComLinkToBase ( base , i ) ;
34599: LD_VAR 0 1
34603: PPUSH
34604: LD_VAR 0 6
34608: PPUSH
34609: CALL_OW 169
34613: GO 34579
34615: POP
34616: POP
// end ; result := tmp ;
34617: LD_ADDR_VAR 0 4
34621: PUSH
34622: LD_VAR 0 5
34626: ST_TO_ADDR
// end ;
34627: LD_VAR 0 4
34631: RET
// export function ComComplete ( units , b ) ; var i ; begin
34632: LD_INT 0
34634: PPUSH
34635: PPUSH
// if not units then
34636: LD_VAR 0 1
34640: NOT
34641: IFFALSE 34645
// exit ;
34643: GO 34735
// for i in units do
34645: LD_ADDR_VAR 0 4
34649: PUSH
34650: LD_VAR 0 1
34654: PUSH
34655: FOR_IN
34656: IFFALSE 34733
// if BuildingStatus ( b ) = bs_build then
34658: LD_VAR 0 2
34662: PPUSH
34663: CALL_OW 461
34667: PUSH
34668: LD_INT 1
34670: EQUAL
34671: IFFALSE 34731
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34673: LD_VAR 0 4
34677: PPUSH
34678: LD_STRING h
34680: PUSH
34681: LD_VAR 0 2
34685: PPUSH
34686: CALL_OW 250
34690: PUSH
34691: LD_VAR 0 2
34695: PPUSH
34696: CALL_OW 251
34700: PUSH
34701: LD_VAR 0 2
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: PUSH
34724: EMPTY
34725: LIST
34726: PPUSH
34727: CALL_OW 446
34731: GO 34655
34733: POP
34734: POP
// end ;
34735: LD_VAR 0 3
34739: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34740: LD_INT 0
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34748: LD_VAR 0 1
34752: NOT
34753: PUSH
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 263
34763: PUSH
34764: LD_INT 2
34766: NONEQUAL
34767: OR
34768: IFFALSE 34772
// exit ;
34770: GO 35088
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34772: LD_ADDR_VAR 0 6
34776: PUSH
34777: LD_INT 22
34779: PUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 255
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: LD_INT 30
34799: PUSH
34800: LD_INT 36
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 34
34809: PUSH
34810: LD_INT 31
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PPUSH
34826: CALL_OW 69
34830: ST_TO_ADDR
// if not tmp then
34831: LD_VAR 0 6
34835: NOT
34836: IFFALSE 34840
// exit ;
34838: GO 35088
// result := [ ] ;
34840: LD_ADDR_VAR 0 2
34844: PUSH
34845: EMPTY
34846: ST_TO_ADDR
// for i in tmp do
34847: LD_ADDR_VAR 0 3
34851: PUSH
34852: LD_VAR 0 6
34856: PUSH
34857: FOR_IN
34858: IFFALSE 34929
// begin t := UnitsInside ( i ) ;
34860: LD_ADDR_VAR 0 4
34864: PUSH
34865: LD_VAR 0 3
34869: PPUSH
34870: CALL_OW 313
34874: ST_TO_ADDR
// if t then
34875: LD_VAR 0 4
34879: IFFALSE 34927
// for j in t do
34881: LD_ADDR_VAR 0 7
34885: PUSH
34886: LD_VAR 0 4
34890: PUSH
34891: FOR_IN
34892: IFFALSE 34925
// result := Replace ( result , result + 1 , j ) ;
34894: LD_ADDR_VAR 0 2
34898: PUSH
34899: LD_VAR 0 2
34903: PPUSH
34904: LD_VAR 0 2
34908: PUSH
34909: LD_INT 1
34911: PLUS
34912: PPUSH
34913: LD_VAR 0 7
34917: PPUSH
34918: CALL_OW 1
34922: ST_TO_ADDR
34923: GO 34891
34925: POP
34926: POP
// end ;
34927: GO 34857
34929: POP
34930: POP
// if not result then
34931: LD_VAR 0 2
34935: NOT
34936: IFFALSE 34940
// exit ;
34938: GO 35088
// mech := result [ 1 ] ;
34940: LD_ADDR_VAR 0 5
34944: PUSH
34945: LD_VAR 0 2
34949: PUSH
34950: LD_INT 1
34952: ARRAY
34953: ST_TO_ADDR
// if result > 1 then
34954: LD_VAR 0 2
34958: PUSH
34959: LD_INT 1
34961: GREATER
34962: IFFALSE 35074
// begin for i = 2 to result do
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: DOUBLE
34970: LD_INT 2
34972: DEC
34973: ST_TO_ADDR
34974: LD_VAR 0 2
34978: PUSH
34979: FOR_TO
34980: IFFALSE 35072
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34982: LD_ADDR_VAR 0 4
34986: PUSH
34987: LD_VAR 0 2
34991: PUSH
34992: LD_VAR 0 3
34996: ARRAY
34997: PPUSH
34998: LD_INT 3
35000: PPUSH
35001: CALL_OW 259
35005: PUSH
35006: LD_VAR 0 2
35010: PUSH
35011: LD_VAR 0 3
35015: ARRAY
35016: PPUSH
35017: CALL_OW 432
35021: MINUS
35022: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35023: LD_VAR 0 4
35027: PUSH
35028: LD_VAR 0 5
35032: PPUSH
35033: LD_INT 3
35035: PPUSH
35036: CALL_OW 259
35040: PUSH
35041: LD_VAR 0 5
35045: PPUSH
35046: CALL_OW 432
35050: MINUS
35051: GREATEREQUAL
35052: IFFALSE 35070
// mech := result [ i ] ;
35054: LD_ADDR_VAR 0 5
35058: PUSH
35059: LD_VAR 0 2
35063: PUSH
35064: LD_VAR 0 3
35068: ARRAY
35069: ST_TO_ADDR
// end ;
35070: GO 34979
35072: POP
35073: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35074: LD_VAR 0 1
35078: PPUSH
35079: LD_VAR 0 5
35083: PPUSH
35084: CALL_OW 135
// end ;
35088: LD_VAR 0 2
35092: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35093: LD_INT 0
35095: PPUSH
35096: PPUSH
35097: PPUSH
35098: PPUSH
35099: PPUSH
35100: PPUSH
35101: PPUSH
35102: PPUSH
35103: PPUSH
35104: PPUSH
35105: PPUSH
35106: PPUSH
35107: PPUSH
// result := [ ] ;
35108: LD_ADDR_VAR 0 7
35112: PUSH
35113: EMPTY
35114: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35115: LD_VAR 0 1
35119: PPUSH
35120: CALL_OW 266
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: IN
35135: NOT
35136: IFFALSE 35140
// exit ;
35138: GO 36774
// if name then
35140: LD_VAR 0 3
35144: IFFALSE 35160
// SetBName ( base_dep , name ) ;
35146: LD_VAR 0 1
35150: PPUSH
35151: LD_VAR 0 3
35155: PPUSH
35156: CALL_OW 500
// base := GetBase ( base_dep ) ;
35160: LD_ADDR_VAR 0 15
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: CALL_OW 274
35174: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35175: LD_ADDR_VAR 0 16
35179: PUSH
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 255
35189: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35190: LD_ADDR_VAR 0 17
35194: PUSH
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL_OW 248
35204: ST_TO_ADDR
// if sources then
35205: LD_VAR 0 5
35209: IFFALSE 35256
// for i = 1 to 3 do
35211: LD_ADDR_VAR 0 8
35215: PUSH
35216: DOUBLE
35217: LD_INT 1
35219: DEC
35220: ST_TO_ADDR
35221: LD_INT 3
35223: PUSH
35224: FOR_TO
35225: IFFALSE 35254
// AddResourceType ( base , i , sources [ i ] ) ;
35227: LD_VAR 0 15
35231: PPUSH
35232: LD_VAR 0 8
35236: PPUSH
35237: LD_VAR 0 5
35241: PUSH
35242: LD_VAR 0 8
35246: ARRAY
35247: PPUSH
35248: CALL_OW 276
35252: GO 35224
35254: POP
35255: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35256: LD_ADDR_VAR 0 18
35260: PUSH
35261: LD_VAR 0 15
35265: PPUSH
35266: LD_VAR 0 2
35270: PPUSH
35271: LD_INT 1
35273: PPUSH
35274: CALL 34517 0 3
35278: ST_TO_ADDR
// InitHc ;
35279: CALL_OW 19
// InitUc ;
35283: CALL_OW 18
// uc_side := side ;
35287: LD_ADDR_OWVAR 20
35291: PUSH
35292: LD_VAR 0 16
35296: ST_TO_ADDR
// uc_nation := nation ;
35297: LD_ADDR_OWVAR 21
35301: PUSH
35302: LD_VAR 0 17
35306: ST_TO_ADDR
// if buildings then
35307: LD_VAR 0 18
35311: IFFALSE 36633
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35313: LD_ADDR_VAR 0 19
35317: PUSH
35318: LD_VAR 0 18
35322: PPUSH
35323: LD_INT 2
35325: PUSH
35326: LD_INT 30
35328: PUSH
35329: LD_INT 29
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 30
35338: PUSH
35339: LD_INT 30
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: PPUSH
35351: CALL_OW 72
35355: ST_TO_ADDR
// if tmp then
35356: LD_VAR 0 19
35360: IFFALSE 35408
// for i in tmp do
35362: LD_ADDR_VAR 0 8
35366: PUSH
35367: LD_VAR 0 19
35371: PUSH
35372: FOR_IN
35373: IFFALSE 35406
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35375: LD_VAR 0 8
35379: PPUSH
35380: CALL_OW 250
35384: PPUSH
35385: LD_VAR 0 8
35389: PPUSH
35390: CALL_OW 251
35394: PPUSH
35395: LD_VAR 0 16
35399: PPUSH
35400: CALL_OW 441
35404: GO 35372
35406: POP
35407: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35408: LD_VAR 0 18
35412: PPUSH
35413: LD_INT 2
35415: PUSH
35416: LD_INT 30
35418: PUSH
35419: LD_INT 32
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 30
35428: PUSH
35429: LD_INT 33
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: LIST
35440: PPUSH
35441: CALL_OW 72
35445: IFFALSE 35533
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35447: LD_ADDR_VAR 0 8
35451: PUSH
35452: LD_VAR 0 18
35456: PPUSH
35457: LD_INT 2
35459: PUSH
35460: LD_INT 30
35462: PUSH
35463: LD_INT 32
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 30
35472: PUSH
35473: LD_INT 33
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: LIST
35484: PPUSH
35485: CALL_OW 72
35489: PUSH
35490: FOR_IN
35491: IFFALSE 35531
// begin if not GetBWeapon ( i ) then
35493: LD_VAR 0 8
35497: PPUSH
35498: CALL_OW 269
35502: NOT
35503: IFFALSE 35529
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35505: LD_VAR 0 8
35509: PPUSH
35510: LD_VAR 0 8
35514: PPUSH
35515: LD_VAR 0 2
35519: PPUSH
35520: CALL 36779 0 2
35524: PPUSH
35525: CALL_OW 431
// end ;
35529: GO 35490
35531: POP
35532: POP
// end ; for i = 1 to personel do
35533: LD_ADDR_VAR 0 8
35537: PUSH
35538: DOUBLE
35539: LD_INT 1
35541: DEC
35542: ST_TO_ADDR
35543: LD_VAR 0 6
35547: PUSH
35548: FOR_TO
35549: IFFALSE 36613
// begin if i > 4 then
35551: LD_VAR 0 8
35555: PUSH
35556: LD_INT 4
35558: GREATER
35559: IFFALSE 35563
// break ;
35561: GO 36613
// case i of 1 :
35563: LD_VAR 0 8
35567: PUSH
35568: LD_INT 1
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35576
35574: GO 35656
35576: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35577: LD_ADDR_VAR 0 12
35581: PUSH
35582: LD_VAR 0 18
35586: PPUSH
35587: LD_INT 22
35589: PUSH
35590: LD_VAR 0 16
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 58
35601: PUSH
35602: EMPTY
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: PUSH
35608: LD_INT 30
35610: PUSH
35611: LD_INT 32
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 30
35620: PUSH
35621: LD_INT 4
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 30
35630: PUSH
35631: LD_INT 5
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: PPUSH
35649: CALL_OW 72
35653: ST_TO_ADDR
35654: GO 35878
35656: LD_INT 2
35658: DOUBLE
35659: EQUAL
35660: IFTRUE 35664
35662: GO 35726
35664: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35665: LD_ADDR_VAR 0 12
35669: PUSH
35670: LD_VAR 0 18
35674: PPUSH
35675: LD_INT 22
35677: PUSH
35678: LD_VAR 0 16
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: LD_INT 30
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 30
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PPUSH
35719: CALL_OW 72
35723: ST_TO_ADDR
35724: GO 35878
35726: LD_INT 3
35728: DOUBLE
35729: EQUAL
35730: IFTRUE 35734
35732: GO 35796
35734: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35735: LD_ADDR_VAR 0 12
35739: PUSH
35740: LD_VAR 0 18
35744: PPUSH
35745: LD_INT 22
35747: PUSH
35748: LD_VAR 0 16
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 30
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 30
35772: PUSH
35773: LD_INT 3
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PPUSH
35789: CALL_OW 72
35793: ST_TO_ADDR
35794: GO 35878
35796: LD_INT 4
35798: DOUBLE
35799: EQUAL
35800: IFTRUE 35804
35802: GO 35877
35804: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35805: LD_ADDR_VAR 0 12
35809: PUSH
35810: LD_VAR 0 18
35814: PPUSH
35815: LD_INT 22
35817: PUSH
35818: LD_VAR 0 16
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 30
35832: PUSH
35833: LD_INT 6
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 30
35842: PUSH
35843: LD_INT 7
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 30
35852: PUSH
35853: LD_INT 8
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PPUSH
35870: CALL_OW 72
35874: ST_TO_ADDR
35875: GO 35878
35877: POP
// if i = 1 then
35878: LD_VAR 0 8
35882: PUSH
35883: LD_INT 1
35885: EQUAL
35886: IFFALSE 35997
// begin tmp := [ ] ;
35888: LD_ADDR_VAR 0 19
35892: PUSH
35893: EMPTY
35894: ST_TO_ADDR
// for j in f do
35895: LD_ADDR_VAR 0 9
35899: PUSH
35900: LD_VAR 0 12
35904: PUSH
35905: FOR_IN
35906: IFFALSE 35979
// if GetBType ( j ) = b_bunker then
35908: LD_VAR 0 9
35912: PPUSH
35913: CALL_OW 266
35917: PUSH
35918: LD_INT 32
35920: EQUAL
35921: IFFALSE 35948
// tmp := Insert ( tmp , 1 , j ) else
35923: LD_ADDR_VAR 0 19
35927: PUSH
35928: LD_VAR 0 19
35932: PPUSH
35933: LD_INT 1
35935: PPUSH
35936: LD_VAR 0 9
35940: PPUSH
35941: CALL_OW 2
35945: ST_TO_ADDR
35946: GO 35977
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35948: LD_ADDR_VAR 0 19
35952: PUSH
35953: LD_VAR 0 19
35957: PPUSH
35958: LD_VAR 0 19
35962: PUSH
35963: LD_INT 1
35965: PLUS
35966: PPUSH
35967: LD_VAR 0 9
35971: PPUSH
35972: CALL_OW 2
35976: ST_TO_ADDR
35977: GO 35905
35979: POP
35980: POP
// if tmp then
35981: LD_VAR 0 19
35985: IFFALSE 35997
// f := tmp ;
35987: LD_ADDR_VAR 0 12
35991: PUSH
35992: LD_VAR 0 19
35996: ST_TO_ADDR
// end ; x := personel [ i ] ;
35997: LD_ADDR_VAR 0 13
36001: PUSH
36002: LD_VAR 0 6
36006: PUSH
36007: LD_VAR 0 8
36011: ARRAY
36012: ST_TO_ADDR
// if x = - 1 then
36013: LD_VAR 0 13
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: EQUAL
36022: IFFALSE 36231
// begin for j in f do
36024: LD_ADDR_VAR 0 9
36028: PUSH
36029: LD_VAR 0 12
36033: PUSH
36034: FOR_IN
36035: IFFALSE 36227
// repeat InitHc ;
36037: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36041: LD_VAR 0 9
36045: PPUSH
36046: CALL_OW 266
36050: PUSH
36051: LD_INT 5
36053: EQUAL
36054: IFFALSE 36124
// begin if UnitsInside ( j ) < 3 then
36056: LD_VAR 0 9
36060: PPUSH
36061: CALL_OW 313
36065: PUSH
36066: LD_INT 3
36068: LESS
36069: IFFALSE 36105
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36071: LD_INT 0
36073: PPUSH
36074: LD_INT 5
36076: PUSH
36077: LD_INT 8
36079: PUSH
36080: LD_INT 9
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: PUSH
36088: LD_VAR 0 17
36092: ARRAY
36093: PPUSH
36094: LD_VAR 0 4
36098: PPUSH
36099: CALL_OW 380
36103: GO 36122
// PrepareHuman ( false , i , skill ) ;
36105: LD_INT 0
36107: PPUSH
36108: LD_VAR 0 8
36112: PPUSH
36113: LD_VAR 0 4
36117: PPUSH
36118: CALL_OW 380
// end else
36122: GO 36141
// PrepareHuman ( false , i , skill ) ;
36124: LD_INT 0
36126: PPUSH
36127: LD_VAR 0 8
36131: PPUSH
36132: LD_VAR 0 4
36136: PPUSH
36137: CALL_OW 380
// un := CreateHuman ;
36141: LD_ADDR_VAR 0 14
36145: PUSH
36146: CALL_OW 44
36150: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36151: LD_ADDR_VAR 0 7
36155: PUSH
36156: LD_VAR 0 7
36160: PPUSH
36161: LD_INT 1
36163: PPUSH
36164: LD_VAR 0 14
36168: PPUSH
36169: CALL_OW 2
36173: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36174: LD_VAR 0 14
36178: PPUSH
36179: LD_VAR 0 9
36183: PPUSH
36184: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36188: LD_VAR 0 9
36192: PPUSH
36193: CALL_OW 313
36197: PUSH
36198: LD_INT 6
36200: EQUAL
36201: PUSH
36202: LD_VAR 0 9
36206: PPUSH
36207: CALL_OW 266
36211: PUSH
36212: LD_INT 32
36214: PUSH
36215: LD_INT 31
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: IN
36222: OR
36223: IFFALSE 36037
36225: GO 36034
36227: POP
36228: POP
// end else
36229: GO 36611
// for j = 1 to x do
36231: LD_ADDR_VAR 0 9
36235: PUSH
36236: DOUBLE
36237: LD_INT 1
36239: DEC
36240: ST_TO_ADDR
36241: LD_VAR 0 13
36245: PUSH
36246: FOR_TO
36247: IFFALSE 36609
// begin InitHc ;
36249: CALL_OW 19
// if not f then
36253: LD_VAR 0 12
36257: NOT
36258: IFFALSE 36347
// begin PrepareHuman ( false , i , skill ) ;
36260: LD_INT 0
36262: PPUSH
36263: LD_VAR 0 8
36267: PPUSH
36268: LD_VAR 0 4
36272: PPUSH
36273: CALL_OW 380
// un := CreateHuman ;
36277: LD_ADDR_VAR 0 14
36281: PUSH
36282: CALL_OW 44
36286: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36287: LD_ADDR_VAR 0 7
36291: PUSH
36292: LD_VAR 0 7
36296: PPUSH
36297: LD_INT 1
36299: PPUSH
36300: LD_VAR 0 14
36304: PPUSH
36305: CALL_OW 2
36309: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36310: LD_VAR 0 14
36314: PPUSH
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 250
36324: PPUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 251
36334: PPUSH
36335: LD_INT 10
36337: PPUSH
36338: LD_INT 0
36340: PPUSH
36341: CALL_OW 50
// continue ;
36345: GO 36246
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36347: LD_VAR 0 12
36351: PUSH
36352: LD_INT 1
36354: ARRAY
36355: PPUSH
36356: CALL_OW 313
36360: PUSH
36361: LD_VAR 0 12
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: PPUSH
36370: CALL_OW 266
36374: PUSH
36375: LD_INT 32
36377: PUSH
36378: LD_INT 31
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: IN
36385: AND
36386: PUSH
36387: LD_VAR 0 12
36391: PUSH
36392: LD_INT 1
36394: ARRAY
36395: PPUSH
36396: CALL_OW 313
36400: PUSH
36401: LD_INT 6
36403: EQUAL
36404: OR
36405: IFFALSE 36425
// f := Delete ( f , 1 ) ;
36407: LD_ADDR_VAR 0 12
36411: PUSH
36412: LD_VAR 0 12
36416: PPUSH
36417: LD_INT 1
36419: PPUSH
36420: CALL_OW 3
36424: ST_TO_ADDR
// if not f then
36425: LD_VAR 0 12
36429: NOT
36430: IFFALSE 36448
// begin x := x + 2 ;
36432: LD_ADDR_VAR 0 13
36436: PUSH
36437: LD_VAR 0 13
36441: PUSH
36442: LD_INT 2
36444: PLUS
36445: ST_TO_ADDR
// continue ;
36446: GO 36246
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36448: LD_VAR 0 12
36452: PUSH
36453: LD_INT 1
36455: ARRAY
36456: PPUSH
36457: CALL_OW 266
36461: PUSH
36462: LD_INT 5
36464: EQUAL
36465: IFFALSE 36539
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36467: LD_VAR 0 12
36471: PUSH
36472: LD_INT 1
36474: ARRAY
36475: PPUSH
36476: CALL_OW 313
36480: PUSH
36481: LD_INT 3
36483: LESS
36484: IFFALSE 36520
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36486: LD_INT 0
36488: PPUSH
36489: LD_INT 5
36491: PUSH
36492: LD_INT 8
36494: PUSH
36495: LD_INT 9
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: PUSH
36503: LD_VAR 0 17
36507: ARRAY
36508: PPUSH
36509: LD_VAR 0 4
36513: PPUSH
36514: CALL_OW 380
36518: GO 36537
// PrepareHuman ( false , i , skill ) ;
36520: LD_INT 0
36522: PPUSH
36523: LD_VAR 0 8
36527: PPUSH
36528: LD_VAR 0 4
36532: PPUSH
36533: CALL_OW 380
// end else
36537: GO 36556
// PrepareHuman ( false , i , skill ) ;
36539: LD_INT 0
36541: PPUSH
36542: LD_VAR 0 8
36546: PPUSH
36547: LD_VAR 0 4
36551: PPUSH
36552: CALL_OW 380
// un := CreateHuman ;
36556: LD_ADDR_VAR 0 14
36560: PUSH
36561: CALL_OW 44
36565: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36566: LD_ADDR_VAR 0 7
36570: PUSH
36571: LD_VAR 0 7
36575: PPUSH
36576: LD_INT 1
36578: PPUSH
36579: LD_VAR 0 14
36583: PPUSH
36584: CALL_OW 2
36588: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36589: LD_VAR 0 14
36593: PPUSH
36594: LD_VAR 0 12
36598: PUSH
36599: LD_INT 1
36601: ARRAY
36602: PPUSH
36603: CALL_OW 52
// end ;
36607: GO 36246
36609: POP
36610: POP
// end ;
36611: GO 35548
36613: POP
36614: POP
// result := result ^ buildings ;
36615: LD_ADDR_VAR 0 7
36619: PUSH
36620: LD_VAR 0 7
36624: PUSH
36625: LD_VAR 0 18
36629: ADD
36630: ST_TO_ADDR
// end else
36631: GO 36774
// begin for i = 1 to personel do
36633: LD_ADDR_VAR 0 8
36637: PUSH
36638: DOUBLE
36639: LD_INT 1
36641: DEC
36642: ST_TO_ADDR
36643: LD_VAR 0 6
36647: PUSH
36648: FOR_TO
36649: IFFALSE 36772
// begin if i > 4 then
36651: LD_VAR 0 8
36655: PUSH
36656: LD_INT 4
36658: GREATER
36659: IFFALSE 36663
// break ;
36661: GO 36772
// x := personel [ i ] ;
36663: LD_ADDR_VAR 0 13
36667: PUSH
36668: LD_VAR 0 6
36672: PUSH
36673: LD_VAR 0 8
36677: ARRAY
36678: ST_TO_ADDR
// if x = - 1 then
36679: LD_VAR 0 13
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: EQUAL
36688: IFFALSE 36692
// continue ;
36690: GO 36648
// PrepareHuman ( false , i , skill ) ;
36692: LD_INT 0
36694: PPUSH
36695: LD_VAR 0 8
36699: PPUSH
36700: LD_VAR 0 4
36704: PPUSH
36705: CALL_OW 380
// un := CreateHuman ;
36709: LD_ADDR_VAR 0 14
36713: PUSH
36714: CALL_OW 44
36718: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36719: LD_VAR 0 14
36723: PPUSH
36724: LD_VAR 0 1
36728: PPUSH
36729: CALL_OW 250
36733: PPUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL_OW 251
36743: PPUSH
36744: LD_INT 10
36746: PPUSH
36747: LD_INT 0
36749: PPUSH
36750: CALL_OW 50
// result := result ^ un ;
36754: LD_ADDR_VAR 0 7
36758: PUSH
36759: LD_VAR 0 7
36763: PUSH
36764: LD_VAR 0 14
36768: ADD
36769: ST_TO_ADDR
// end ;
36770: GO 36648
36772: POP
36773: POP
// end ; end ;
36774: LD_VAR 0 7
36778: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36779: LD_INT 0
36781: PPUSH
36782: PPUSH
36783: PPUSH
36784: PPUSH
36785: PPUSH
36786: PPUSH
36787: PPUSH
36788: PPUSH
36789: PPUSH
36790: PPUSH
36791: PPUSH
36792: PPUSH
36793: PPUSH
36794: PPUSH
36795: PPUSH
36796: PPUSH
// result := false ;
36797: LD_ADDR_VAR 0 3
36801: PUSH
36802: LD_INT 0
36804: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36805: LD_VAR 0 1
36809: NOT
36810: PUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: CALL_OW 266
36820: PUSH
36821: LD_INT 32
36823: PUSH
36824: LD_INT 33
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: IN
36831: NOT
36832: OR
36833: IFFALSE 36837
// exit ;
36835: GO 37946
// nat := GetNation ( tower ) ;
36837: LD_ADDR_VAR 0 12
36841: PUSH
36842: LD_VAR 0 1
36846: PPUSH
36847: CALL_OW 248
36851: ST_TO_ADDR
// side := GetSide ( tower ) ;
36852: LD_ADDR_VAR 0 16
36856: PUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 255
36866: ST_TO_ADDR
// x := GetX ( tower ) ;
36867: LD_ADDR_VAR 0 10
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 250
36881: ST_TO_ADDR
// y := GetY ( tower ) ;
36882: LD_ADDR_VAR 0 11
36886: PUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL_OW 251
36896: ST_TO_ADDR
// if not x or not y then
36897: LD_VAR 0 10
36901: NOT
36902: PUSH
36903: LD_VAR 0 11
36907: NOT
36908: OR
36909: IFFALSE 36913
// exit ;
36911: GO 37946
// weapon := 0 ;
36913: LD_ADDR_VAR 0 18
36917: PUSH
36918: LD_INT 0
36920: ST_TO_ADDR
// fac_list := [ ] ;
36921: LD_ADDR_VAR 0 17
36925: PUSH
36926: EMPTY
36927: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36928: LD_ADDR_VAR 0 6
36932: PUSH
36933: LD_VAR 0 1
36937: PPUSH
36938: CALL_OW 274
36942: PPUSH
36943: LD_VAR 0 2
36947: PPUSH
36948: LD_INT 0
36950: PPUSH
36951: CALL 34517 0 3
36955: PPUSH
36956: LD_INT 30
36958: PUSH
36959: LD_INT 3
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PPUSH
36966: CALL_OW 72
36970: ST_TO_ADDR
// if not factories then
36971: LD_VAR 0 6
36975: NOT
36976: IFFALSE 36980
// exit ;
36978: GO 37946
// for i in factories do
36980: LD_ADDR_VAR 0 8
36984: PUSH
36985: LD_VAR 0 6
36989: PUSH
36990: FOR_IN
36991: IFFALSE 37016
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36993: LD_ADDR_VAR 0 17
36997: PUSH
36998: LD_VAR 0 17
37002: PUSH
37003: LD_VAR 0 8
37007: PPUSH
37008: CALL_OW 478
37012: UNION
37013: ST_TO_ADDR
37014: GO 36990
37016: POP
37017: POP
// if not fac_list then
37018: LD_VAR 0 17
37022: NOT
37023: IFFALSE 37027
// exit ;
37025: GO 37946
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37027: LD_ADDR_VAR 0 5
37031: PUSH
37032: LD_INT 4
37034: PUSH
37035: LD_INT 5
37037: PUSH
37038: LD_INT 9
37040: PUSH
37041: LD_INT 10
37043: PUSH
37044: LD_INT 6
37046: PUSH
37047: LD_INT 7
37049: PUSH
37050: LD_INT 11
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 27
37064: PUSH
37065: LD_INT 28
37067: PUSH
37068: LD_INT 26
37070: PUSH
37071: LD_INT 30
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 43
37082: PUSH
37083: LD_INT 44
37085: PUSH
37086: LD_INT 46
37088: PUSH
37089: LD_INT 45
37091: PUSH
37092: LD_INT 47
37094: PUSH
37095: LD_INT 49
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: PUSH
37111: LD_VAR 0 12
37115: ARRAY
37116: ST_TO_ADDR
// list := list isect fac_list ;
37117: LD_ADDR_VAR 0 5
37121: PUSH
37122: LD_VAR 0 5
37126: PUSH
37127: LD_VAR 0 17
37131: ISECT
37132: ST_TO_ADDR
// if not list then
37133: LD_VAR 0 5
37137: NOT
37138: IFFALSE 37142
// exit ;
37140: GO 37946
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37142: LD_VAR 0 12
37146: PUSH
37147: LD_INT 3
37149: EQUAL
37150: PUSH
37151: LD_INT 49
37153: PUSH
37154: LD_VAR 0 5
37158: IN
37159: AND
37160: PUSH
37161: LD_INT 31
37163: PPUSH
37164: LD_VAR 0 16
37168: PPUSH
37169: CALL_OW 321
37173: PUSH
37174: LD_INT 2
37176: EQUAL
37177: AND
37178: IFFALSE 37238
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37180: LD_INT 22
37182: PUSH
37183: LD_VAR 0 16
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 35
37194: PUSH
37195: LD_INT 49
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 91
37204: PUSH
37205: LD_VAR 0 1
37209: PUSH
37210: LD_INT 10
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: PPUSH
37223: CALL_OW 69
37227: NOT
37228: IFFALSE 37238
// weapon := ru_time_lapser ;
37230: LD_ADDR_VAR 0 18
37234: PUSH
37235: LD_INT 49
37237: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37238: LD_VAR 0 12
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: IN
37253: PUSH
37254: LD_INT 11
37256: PUSH
37257: LD_VAR 0 5
37261: IN
37262: PUSH
37263: LD_INT 30
37265: PUSH
37266: LD_VAR 0 5
37270: IN
37271: OR
37272: AND
37273: PUSH
37274: LD_INT 6
37276: PPUSH
37277: LD_VAR 0 16
37281: PPUSH
37282: CALL_OW 321
37286: PUSH
37287: LD_INT 2
37289: EQUAL
37290: AND
37291: IFFALSE 37456
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37293: LD_INT 22
37295: PUSH
37296: LD_VAR 0 16
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 2
37307: PUSH
37308: LD_INT 35
37310: PUSH
37311: LD_INT 11
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 35
37320: PUSH
37321: LD_INT 30
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 91
37335: PUSH
37336: LD_VAR 0 1
37340: PUSH
37341: LD_INT 18
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: PPUSH
37354: CALL_OW 69
37358: NOT
37359: PUSH
37360: LD_INT 22
37362: PUSH
37363: LD_VAR 0 16
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: LD_INT 30
37377: PUSH
37378: LD_INT 32
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 30
37387: PUSH
37388: LD_INT 33
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 91
37402: PUSH
37403: LD_VAR 0 1
37407: PUSH
37408: LD_INT 12
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: PPUSH
37424: CALL_OW 69
37428: PUSH
37429: LD_INT 2
37431: GREATER
37432: AND
37433: IFFALSE 37456
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37435: LD_ADDR_VAR 0 18
37439: PUSH
37440: LD_INT 11
37442: PUSH
37443: LD_INT 30
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_VAR 0 12
37454: ARRAY
37455: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37456: LD_VAR 0 18
37460: NOT
37461: PUSH
37462: LD_INT 40
37464: PPUSH
37465: LD_VAR 0 16
37469: PPUSH
37470: CALL_OW 321
37474: PUSH
37475: LD_INT 2
37477: EQUAL
37478: AND
37479: PUSH
37480: LD_INT 7
37482: PUSH
37483: LD_VAR 0 5
37487: IN
37488: PUSH
37489: LD_INT 28
37491: PUSH
37492: LD_VAR 0 5
37496: IN
37497: OR
37498: PUSH
37499: LD_INT 45
37501: PUSH
37502: LD_VAR 0 5
37506: IN
37507: OR
37508: AND
37509: IFFALSE 37763
// begin hex := GetHexInfo ( x , y ) ;
37511: LD_ADDR_VAR 0 4
37515: PUSH
37516: LD_VAR 0 10
37520: PPUSH
37521: LD_VAR 0 11
37525: PPUSH
37526: CALL_OW 546
37530: ST_TO_ADDR
// if hex [ 1 ] then
37531: LD_VAR 0 4
37535: PUSH
37536: LD_INT 1
37538: ARRAY
37539: IFFALSE 37543
// exit ;
37541: GO 37946
// height := hex [ 2 ] ;
37543: LD_ADDR_VAR 0 15
37547: PUSH
37548: LD_VAR 0 4
37552: PUSH
37553: LD_INT 2
37555: ARRAY
37556: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37557: LD_ADDR_VAR 0 14
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: LD_INT 5
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// for i in tmp do
37580: LD_ADDR_VAR 0 8
37584: PUSH
37585: LD_VAR 0 14
37589: PUSH
37590: FOR_IN
37591: IFFALSE 37761
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37593: LD_ADDR_VAR 0 9
37597: PUSH
37598: LD_VAR 0 10
37602: PPUSH
37603: LD_VAR 0 8
37607: PPUSH
37608: LD_INT 5
37610: PPUSH
37611: CALL_OW 272
37615: PUSH
37616: LD_VAR 0 11
37620: PPUSH
37621: LD_VAR 0 8
37625: PPUSH
37626: LD_INT 5
37628: PPUSH
37629: CALL_OW 273
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37638: LD_VAR 0 9
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PPUSH
37647: LD_VAR 0 9
37651: PUSH
37652: LD_INT 2
37654: ARRAY
37655: PPUSH
37656: CALL_OW 488
37660: IFFALSE 37759
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37662: LD_ADDR_VAR 0 4
37666: PUSH
37667: LD_VAR 0 9
37671: PUSH
37672: LD_INT 1
37674: ARRAY
37675: PPUSH
37676: LD_VAR 0 9
37680: PUSH
37681: LD_INT 2
37683: ARRAY
37684: PPUSH
37685: CALL_OW 546
37689: ST_TO_ADDR
// if hex [ 1 ] then
37690: LD_VAR 0 4
37694: PUSH
37695: LD_INT 1
37697: ARRAY
37698: IFFALSE 37702
// continue ;
37700: GO 37590
// h := hex [ 2 ] ;
37702: LD_ADDR_VAR 0 13
37706: PUSH
37707: LD_VAR 0 4
37711: PUSH
37712: LD_INT 2
37714: ARRAY
37715: ST_TO_ADDR
// if h + 7 < height then
37716: LD_VAR 0 13
37720: PUSH
37721: LD_INT 7
37723: PLUS
37724: PUSH
37725: LD_VAR 0 15
37729: LESS
37730: IFFALSE 37759
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37732: LD_ADDR_VAR 0 18
37736: PUSH
37737: LD_INT 7
37739: PUSH
37740: LD_INT 28
37742: PUSH
37743: LD_INT 45
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: PUSH
37751: LD_VAR 0 12
37755: ARRAY
37756: ST_TO_ADDR
// break ;
37757: GO 37761
// end ; end ; end ;
37759: GO 37590
37761: POP
37762: POP
// end ; if not weapon then
37763: LD_VAR 0 18
37767: NOT
37768: IFFALSE 37828
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37770: LD_ADDR_VAR 0 5
37774: PUSH
37775: LD_VAR 0 5
37779: PUSH
37780: LD_INT 11
37782: PUSH
37783: LD_INT 30
37785: PUSH
37786: LD_INT 49
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: DIFF
37794: ST_TO_ADDR
// if not list then
37795: LD_VAR 0 5
37799: NOT
37800: IFFALSE 37804
// exit ;
37802: GO 37946
// weapon := list [ rand ( 1 , list ) ] ;
37804: LD_ADDR_VAR 0 18
37808: PUSH
37809: LD_VAR 0 5
37813: PUSH
37814: LD_INT 1
37816: PPUSH
37817: LD_VAR 0 5
37821: PPUSH
37822: CALL_OW 12
37826: ARRAY
37827: ST_TO_ADDR
// end ; if weapon then
37828: LD_VAR 0 18
37832: IFFALSE 37946
// begin tmp := CostOfWeapon ( weapon ) ;
37834: LD_ADDR_VAR 0 14
37838: PUSH
37839: LD_VAR 0 18
37843: PPUSH
37844: CALL_OW 451
37848: ST_TO_ADDR
// j := GetBase ( tower ) ;
37849: LD_ADDR_VAR 0 9
37853: PUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 274
37863: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37864: LD_VAR 0 9
37868: PPUSH
37869: LD_INT 1
37871: PPUSH
37872: CALL_OW 275
37876: PUSH
37877: LD_VAR 0 14
37881: PUSH
37882: LD_INT 1
37884: ARRAY
37885: GREATEREQUAL
37886: PUSH
37887: LD_VAR 0 9
37891: PPUSH
37892: LD_INT 2
37894: PPUSH
37895: CALL_OW 275
37899: PUSH
37900: LD_VAR 0 14
37904: PUSH
37905: LD_INT 2
37907: ARRAY
37908: GREATEREQUAL
37909: AND
37910: PUSH
37911: LD_VAR 0 9
37915: PPUSH
37916: LD_INT 3
37918: PPUSH
37919: CALL_OW 275
37923: PUSH
37924: LD_VAR 0 14
37928: PUSH
37929: LD_INT 3
37931: ARRAY
37932: GREATEREQUAL
37933: AND
37934: IFFALSE 37946
// result := weapon ;
37936: LD_ADDR_VAR 0 3
37940: PUSH
37941: LD_VAR 0 18
37945: ST_TO_ADDR
// end ; end ;
37946: LD_VAR 0 3
37950: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37951: LD_INT 0
37953: PPUSH
37954: PPUSH
// result := true ;
37955: LD_ADDR_VAR 0 3
37959: PUSH
37960: LD_INT 1
37962: ST_TO_ADDR
// if array1 = array2 then
37963: LD_VAR 0 1
37967: PUSH
37968: LD_VAR 0 2
37972: EQUAL
37973: IFFALSE 38033
// begin for i = 1 to array1 do
37975: LD_ADDR_VAR 0 4
37979: PUSH
37980: DOUBLE
37981: LD_INT 1
37983: DEC
37984: ST_TO_ADDR
37985: LD_VAR 0 1
37989: PUSH
37990: FOR_TO
37991: IFFALSE 38029
// if array1 [ i ] <> array2 [ i ] then
37993: LD_VAR 0 1
37997: PUSH
37998: LD_VAR 0 4
38002: ARRAY
38003: PUSH
38004: LD_VAR 0 2
38008: PUSH
38009: LD_VAR 0 4
38013: ARRAY
38014: NONEQUAL
38015: IFFALSE 38027
// begin result := false ;
38017: LD_ADDR_VAR 0 3
38021: PUSH
38022: LD_INT 0
38024: ST_TO_ADDR
// break ;
38025: GO 38029
// end ;
38027: GO 37990
38029: POP
38030: POP
// end else
38031: GO 38041
// result := false ;
38033: LD_ADDR_VAR 0 3
38037: PUSH
38038: LD_INT 0
38040: ST_TO_ADDR
// end ;
38041: LD_VAR 0 3
38045: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38046: LD_INT 0
38048: PPUSH
38049: PPUSH
// if not array1 or not array2 then
38050: LD_VAR 0 1
38054: NOT
38055: PUSH
38056: LD_VAR 0 2
38060: NOT
38061: OR
38062: IFFALSE 38066
// exit ;
38064: GO 38130
// result := true ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_INT 1
38073: ST_TO_ADDR
// for i = 1 to array1 do
38074: LD_ADDR_VAR 0 4
38078: PUSH
38079: DOUBLE
38080: LD_INT 1
38082: DEC
38083: ST_TO_ADDR
38084: LD_VAR 0 1
38088: PUSH
38089: FOR_TO
38090: IFFALSE 38128
// if array1 [ i ] <> array2 [ i ] then
38092: LD_VAR 0 1
38096: PUSH
38097: LD_VAR 0 4
38101: ARRAY
38102: PUSH
38103: LD_VAR 0 2
38107: PUSH
38108: LD_VAR 0 4
38112: ARRAY
38113: NONEQUAL
38114: IFFALSE 38126
// begin result := false ;
38116: LD_ADDR_VAR 0 3
38120: PUSH
38121: LD_INT 0
38123: ST_TO_ADDR
// break ;
38124: GO 38128
// end ;
38126: GO 38089
38128: POP
38129: POP
// end ;
38130: LD_VAR 0 3
38134: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38135: LD_INT 0
38137: PPUSH
38138: PPUSH
38139: PPUSH
// pom := GetBase ( fac ) ;
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: LD_VAR 0 1
38149: PPUSH
38150: CALL_OW 274
38154: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38155: LD_ADDR_VAR 0 4
38159: PUSH
38160: LD_VAR 0 2
38164: PUSH
38165: LD_INT 1
38167: ARRAY
38168: PPUSH
38169: LD_VAR 0 2
38173: PUSH
38174: LD_INT 2
38176: ARRAY
38177: PPUSH
38178: LD_VAR 0 2
38182: PUSH
38183: LD_INT 3
38185: ARRAY
38186: PPUSH
38187: LD_VAR 0 2
38191: PUSH
38192: LD_INT 4
38194: ARRAY
38195: PPUSH
38196: CALL_OW 449
38200: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38201: LD_ADDR_VAR 0 3
38205: PUSH
38206: LD_VAR 0 5
38210: PPUSH
38211: LD_INT 1
38213: PPUSH
38214: CALL_OW 275
38218: PUSH
38219: LD_VAR 0 4
38223: PUSH
38224: LD_INT 1
38226: ARRAY
38227: GREATEREQUAL
38228: PUSH
38229: LD_VAR 0 5
38233: PPUSH
38234: LD_INT 2
38236: PPUSH
38237: CALL_OW 275
38241: PUSH
38242: LD_VAR 0 4
38246: PUSH
38247: LD_INT 2
38249: ARRAY
38250: GREATEREQUAL
38251: AND
38252: PUSH
38253: LD_VAR 0 5
38257: PPUSH
38258: LD_INT 3
38260: PPUSH
38261: CALL_OW 275
38265: PUSH
38266: LD_VAR 0 4
38270: PUSH
38271: LD_INT 3
38273: ARRAY
38274: GREATEREQUAL
38275: AND
38276: ST_TO_ADDR
// end ;
38277: LD_VAR 0 3
38281: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38282: LD_INT 0
38284: PPUSH
38285: PPUSH
38286: PPUSH
38287: PPUSH
// pom := GetBase ( building ) ;
38288: LD_ADDR_VAR 0 3
38292: PUSH
38293: LD_VAR 0 1
38297: PPUSH
38298: CALL_OW 274
38302: ST_TO_ADDR
// if not pom then
38303: LD_VAR 0 3
38307: NOT
38308: IFFALSE 38312
// exit ;
38310: GO 38482
// btype := GetBType ( building ) ;
38312: LD_ADDR_VAR 0 5
38316: PUSH
38317: LD_VAR 0 1
38321: PPUSH
38322: CALL_OW 266
38326: ST_TO_ADDR
// if btype = b_armoury then
38327: LD_VAR 0 5
38331: PUSH
38332: LD_INT 4
38334: EQUAL
38335: IFFALSE 38345
// btype := b_barracks ;
38337: LD_ADDR_VAR 0 5
38341: PUSH
38342: LD_INT 5
38344: ST_TO_ADDR
// if btype = b_depot then
38345: LD_VAR 0 5
38349: PUSH
38350: LD_INT 0
38352: EQUAL
38353: IFFALSE 38363
// btype := b_warehouse ;
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_INT 1
38362: ST_TO_ADDR
// if btype = b_workshop then
38363: LD_VAR 0 5
38367: PUSH
38368: LD_INT 2
38370: EQUAL
38371: IFFALSE 38381
// btype := b_factory ;
38373: LD_ADDR_VAR 0 5
38377: PUSH
38378: LD_INT 3
38380: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38381: LD_ADDR_VAR 0 4
38385: PUSH
38386: LD_VAR 0 5
38390: PPUSH
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL_OW 248
38400: PPUSH
38401: CALL_OW 450
38405: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38406: LD_ADDR_VAR 0 2
38410: PUSH
38411: LD_VAR 0 3
38415: PPUSH
38416: LD_INT 1
38418: PPUSH
38419: CALL_OW 275
38423: PUSH
38424: LD_VAR 0 4
38428: PUSH
38429: LD_INT 1
38431: ARRAY
38432: GREATEREQUAL
38433: PUSH
38434: LD_VAR 0 3
38438: PPUSH
38439: LD_INT 2
38441: PPUSH
38442: CALL_OW 275
38446: PUSH
38447: LD_VAR 0 4
38451: PUSH
38452: LD_INT 2
38454: ARRAY
38455: GREATEREQUAL
38456: AND
38457: PUSH
38458: LD_VAR 0 3
38462: PPUSH
38463: LD_INT 3
38465: PPUSH
38466: CALL_OW 275
38470: PUSH
38471: LD_VAR 0 4
38475: PUSH
38476: LD_INT 3
38478: ARRAY
38479: GREATEREQUAL
38480: AND
38481: ST_TO_ADDR
// end ;
38482: LD_VAR 0 2
38486: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38487: LD_INT 0
38489: PPUSH
38490: PPUSH
38491: PPUSH
// pom := GetBase ( building ) ;
38492: LD_ADDR_VAR 0 4
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 274
38506: ST_TO_ADDR
// if not pom then
38507: LD_VAR 0 4
38511: NOT
38512: IFFALSE 38516
// exit ;
38514: GO 38617
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38516: LD_ADDR_VAR 0 5
38520: PUSH
38521: LD_VAR 0 2
38525: PPUSH
38526: LD_VAR 0 1
38530: PPUSH
38531: CALL_OW 248
38535: PPUSH
38536: CALL_OW 450
38540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38541: LD_ADDR_VAR 0 3
38545: PUSH
38546: LD_VAR 0 4
38550: PPUSH
38551: LD_INT 1
38553: PPUSH
38554: CALL_OW 275
38558: PUSH
38559: LD_VAR 0 5
38563: PUSH
38564: LD_INT 1
38566: ARRAY
38567: GREATEREQUAL
38568: PUSH
38569: LD_VAR 0 4
38573: PPUSH
38574: LD_INT 2
38576: PPUSH
38577: CALL_OW 275
38581: PUSH
38582: LD_VAR 0 5
38586: PUSH
38587: LD_INT 2
38589: ARRAY
38590: GREATEREQUAL
38591: AND
38592: PUSH
38593: LD_VAR 0 4
38597: PPUSH
38598: LD_INT 3
38600: PPUSH
38601: CALL_OW 275
38605: PUSH
38606: LD_VAR 0 5
38610: PUSH
38611: LD_INT 3
38613: ARRAY
38614: GREATEREQUAL
38615: AND
38616: ST_TO_ADDR
// end ;
38617: LD_VAR 0 3
38621: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38622: LD_INT 0
38624: PPUSH
38625: PPUSH
38626: PPUSH
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
// result := false ;
38635: LD_ADDR_VAR 0 8
38639: PUSH
38640: LD_INT 0
38642: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38643: LD_VAR 0 5
38647: NOT
38648: PUSH
38649: LD_VAR 0 1
38653: NOT
38654: OR
38655: PUSH
38656: LD_VAR 0 2
38660: NOT
38661: OR
38662: PUSH
38663: LD_VAR 0 3
38667: NOT
38668: OR
38669: IFFALSE 38673
// exit ;
38671: GO 39487
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38673: LD_ADDR_VAR 0 14
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: LD_VAR 0 2
38687: PPUSH
38688: LD_VAR 0 3
38692: PPUSH
38693: LD_VAR 0 4
38697: PPUSH
38698: LD_VAR 0 5
38702: PUSH
38703: LD_INT 1
38705: ARRAY
38706: PPUSH
38707: CALL_OW 248
38711: PPUSH
38712: LD_INT 0
38714: PPUSH
38715: CALL 40740 0 6
38719: ST_TO_ADDR
// if not hexes then
38720: LD_VAR 0 14
38724: NOT
38725: IFFALSE 38729
// exit ;
38727: GO 39487
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38729: LD_ADDR_VAR 0 17
38733: PUSH
38734: LD_VAR 0 5
38738: PPUSH
38739: LD_INT 22
38741: PUSH
38742: LD_VAR 0 13
38746: PPUSH
38747: CALL_OW 255
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 30
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 30
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PPUSH
38788: CALL_OW 72
38792: ST_TO_ADDR
// for i = 1 to hexes do
38793: LD_ADDR_VAR 0 9
38797: PUSH
38798: DOUBLE
38799: LD_INT 1
38801: DEC
38802: ST_TO_ADDR
38803: LD_VAR 0 14
38807: PUSH
38808: FOR_TO
38809: IFFALSE 39485
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38811: LD_ADDR_VAR 0 13
38815: PUSH
38816: LD_VAR 0 14
38820: PUSH
38821: LD_VAR 0 9
38825: ARRAY
38826: PUSH
38827: LD_INT 1
38829: ARRAY
38830: PPUSH
38831: LD_VAR 0 14
38835: PUSH
38836: LD_VAR 0 9
38840: ARRAY
38841: PUSH
38842: LD_INT 2
38844: ARRAY
38845: PPUSH
38846: CALL_OW 428
38850: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38851: LD_VAR 0 14
38855: PUSH
38856: LD_VAR 0 9
38860: ARRAY
38861: PUSH
38862: LD_INT 1
38864: ARRAY
38865: PPUSH
38866: LD_VAR 0 14
38870: PUSH
38871: LD_VAR 0 9
38875: ARRAY
38876: PUSH
38877: LD_INT 2
38879: ARRAY
38880: PPUSH
38881: CALL_OW 351
38885: PUSH
38886: LD_VAR 0 14
38890: PUSH
38891: LD_VAR 0 9
38895: ARRAY
38896: PUSH
38897: LD_INT 1
38899: ARRAY
38900: PPUSH
38901: LD_VAR 0 14
38905: PUSH
38906: LD_VAR 0 9
38910: ARRAY
38911: PUSH
38912: LD_INT 2
38914: ARRAY
38915: PPUSH
38916: CALL_OW 488
38920: NOT
38921: OR
38922: PUSH
38923: LD_VAR 0 13
38927: PPUSH
38928: CALL_OW 247
38932: PUSH
38933: LD_INT 3
38935: EQUAL
38936: OR
38937: IFFALSE 38943
// exit ;
38939: POP
38940: POP
38941: GO 39487
// if not tmp then
38943: LD_VAR 0 13
38947: NOT
38948: IFFALSE 38952
// continue ;
38950: GO 38808
// result := true ;
38952: LD_ADDR_VAR 0 8
38956: PUSH
38957: LD_INT 1
38959: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38960: LD_VAR 0 6
38964: PUSH
38965: LD_VAR 0 13
38969: PPUSH
38970: CALL_OW 247
38974: PUSH
38975: LD_INT 2
38977: EQUAL
38978: AND
38979: PUSH
38980: LD_VAR 0 13
38984: PPUSH
38985: CALL_OW 263
38989: PUSH
38990: LD_INT 1
38992: EQUAL
38993: AND
38994: IFFALSE 39158
// begin if IsDrivenBy ( tmp ) then
38996: LD_VAR 0 13
39000: PPUSH
39001: CALL_OW 311
39005: IFFALSE 39009
// continue ;
39007: GO 38808
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39009: LD_VAR 0 6
39013: PPUSH
39014: LD_INT 3
39016: PUSH
39017: LD_INT 60
39019: PUSH
39020: EMPTY
39021: LIST
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: LD_INT 55
39032: PUSH
39033: EMPTY
39034: LIST
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PPUSH
39044: CALL_OW 72
39048: IFFALSE 39156
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39050: LD_ADDR_VAR 0 18
39054: PUSH
39055: LD_VAR 0 6
39059: PPUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 60
39065: PUSH
39066: EMPTY
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 55
39078: PUSH
39079: EMPTY
39080: LIST
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PPUSH
39090: CALL_OW 72
39094: PUSH
39095: LD_INT 1
39097: ARRAY
39098: ST_TO_ADDR
// if IsInUnit ( driver ) then
39099: LD_VAR 0 18
39103: PPUSH
39104: CALL_OW 310
39108: IFFALSE 39119
// ComExit ( driver ) ;
39110: LD_VAR 0 18
39114: PPUSH
39115: CALL 64521 0 1
// AddComEnterUnit ( driver , tmp ) ;
39119: LD_VAR 0 18
39123: PPUSH
39124: LD_VAR 0 13
39128: PPUSH
39129: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39133: LD_VAR 0 18
39137: PPUSH
39138: LD_VAR 0 7
39142: PPUSH
39143: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39147: LD_VAR 0 18
39151: PPUSH
39152: CALL_OW 181
// end ; continue ;
39156: GO 38808
// end ; if not cleaners or not tmp in cleaners then
39158: LD_VAR 0 6
39162: NOT
39163: PUSH
39164: LD_VAR 0 13
39168: PUSH
39169: LD_VAR 0 6
39173: IN
39174: NOT
39175: OR
39176: IFFALSE 39483
// begin if dep then
39178: LD_VAR 0 17
39182: IFFALSE 39318
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39184: LD_ADDR_VAR 0 16
39188: PUSH
39189: LD_VAR 0 17
39193: PUSH
39194: LD_INT 1
39196: ARRAY
39197: PPUSH
39198: CALL_OW 250
39202: PPUSH
39203: LD_VAR 0 17
39207: PUSH
39208: LD_INT 1
39210: ARRAY
39211: PPUSH
39212: CALL_OW 254
39216: PPUSH
39217: LD_INT 5
39219: PPUSH
39220: CALL_OW 272
39224: PUSH
39225: LD_VAR 0 17
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: PPUSH
39234: CALL_OW 251
39238: PPUSH
39239: LD_VAR 0 17
39243: PUSH
39244: LD_INT 1
39246: ARRAY
39247: PPUSH
39248: CALL_OW 254
39252: PPUSH
39253: LD_INT 5
39255: PPUSH
39256: CALL_OW 273
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39265: LD_VAR 0 16
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: PPUSH
39274: LD_VAR 0 16
39278: PUSH
39279: LD_INT 2
39281: ARRAY
39282: PPUSH
39283: CALL_OW 488
39287: IFFALSE 39318
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39289: LD_VAR 0 13
39293: PPUSH
39294: LD_VAR 0 16
39298: PUSH
39299: LD_INT 1
39301: ARRAY
39302: PPUSH
39303: LD_VAR 0 16
39307: PUSH
39308: LD_INT 2
39310: ARRAY
39311: PPUSH
39312: CALL_OW 111
// continue ;
39316: GO 38808
// end ; end ; r := GetDir ( tmp ) ;
39318: LD_ADDR_VAR 0 15
39322: PUSH
39323: LD_VAR 0 13
39327: PPUSH
39328: CALL_OW 254
39332: ST_TO_ADDR
// if r = 5 then
39333: LD_VAR 0 15
39337: PUSH
39338: LD_INT 5
39340: EQUAL
39341: IFFALSE 39351
// r := 0 ;
39343: LD_ADDR_VAR 0 15
39347: PUSH
39348: LD_INT 0
39350: ST_TO_ADDR
// for j = r to 5 do
39351: LD_ADDR_VAR 0 10
39355: PUSH
39356: DOUBLE
39357: LD_VAR 0 15
39361: DEC
39362: ST_TO_ADDR
39363: LD_INT 5
39365: PUSH
39366: FOR_TO
39367: IFFALSE 39481
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39369: LD_ADDR_VAR 0 11
39373: PUSH
39374: LD_VAR 0 13
39378: PPUSH
39379: CALL_OW 250
39383: PPUSH
39384: LD_VAR 0 10
39388: PPUSH
39389: LD_INT 2
39391: PPUSH
39392: CALL_OW 272
39396: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39397: LD_ADDR_VAR 0 12
39401: PUSH
39402: LD_VAR 0 13
39406: PPUSH
39407: CALL_OW 251
39411: PPUSH
39412: LD_VAR 0 10
39416: PPUSH
39417: LD_INT 2
39419: PPUSH
39420: CALL_OW 273
39424: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39425: LD_VAR 0 11
39429: PPUSH
39430: LD_VAR 0 12
39434: PPUSH
39435: CALL_OW 488
39439: PUSH
39440: LD_VAR 0 11
39444: PPUSH
39445: LD_VAR 0 12
39449: PPUSH
39450: CALL_OW 428
39454: NOT
39455: AND
39456: IFFALSE 39479
// begin ComMoveXY ( tmp , _x , _y ) ;
39458: LD_VAR 0 13
39462: PPUSH
39463: LD_VAR 0 11
39467: PPUSH
39468: LD_VAR 0 12
39472: PPUSH
39473: CALL_OW 111
// break ;
39477: GO 39481
// end ; end ;
39479: GO 39366
39481: POP
39482: POP
// end ; end ;
39483: GO 38808
39485: POP
39486: POP
// end ;
39487: LD_VAR 0 8
39491: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39492: LD_INT 0
39494: PPUSH
// result := true ;
39495: LD_ADDR_VAR 0 3
39499: PUSH
39500: LD_INT 1
39502: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39503: LD_VAR 0 2
39507: PUSH
39508: LD_INT 24
39510: DOUBLE
39511: EQUAL
39512: IFTRUE 39522
39514: LD_INT 33
39516: DOUBLE
39517: EQUAL
39518: IFTRUE 39522
39520: GO 39547
39522: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_INT 32
39530: PPUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: CALL_OW 321
39540: PUSH
39541: LD_INT 2
39543: EQUAL
39544: ST_TO_ADDR
39545: GO 39863
39547: LD_INT 20
39549: DOUBLE
39550: EQUAL
39551: IFTRUE 39555
39553: GO 39580
39555: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39556: LD_ADDR_VAR 0 3
39560: PUSH
39561: LD_INT 6
39563: PPUSH
39564: LD_VAR 0 1
39568: PPUSH
39569: CALL_OW 321
39573: PUSH
39574: LD_INT 2
39576: EQUAL
39577: ST_TO_ADDR
39578: GO 39863
39580: LD_INT 22
39582: DOUBLE
39583: EQUAL
39584: IFTRUE 39594
39586: LD_INT 36
39588: DOUBLE
39589: EQUAL
39590: IFTRUE 39594
39592: GO 39619
39594: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39595: LD_ADDR_VAR 0 3
39599: PUSH
39600: LD_INT 15
39602: PPUSH
39603: LD_VAR 0 1
39607: PPUSH
39608: CALL_OW 321
39612: PUSH
39613: LD_INT 2
39615: EQUAL
39616: ST_TO_ADDR
39617: GO 39863
39619: LD_INT 30
39621: DOUBLE
39622: EQUAL
39623: IFTRUE 39627
39625: GO 39652
39627: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39628: LD_ADDR_VAR 0 3
39632: PUSH
39633: LD_INT 20
39635: PPUSH
39636: LD_VAR 0 1
39640: PPUSH
39641: CALL_OW 321
39645: PUSH
39646: LD_INT 2
39648: EQUAL
39649: ST_TO_ADDR
39650: GO 39863
39652: LD_INT 28
39654: DOUBLE
39655: EQUAL
39656: IFTRUE 39666
39658: LD_INT 21
39660: DOUBLE
39661: EQUAL
39662: IFTRUE 39666
39664: GO 39691
39666: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39667: LD_ADDR_VAR 0 3
39671: PUSH
39672: LD_INT 21
39674: PPUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: CALL_OW 321
39684: PUSH
39685: LD_INT 2
39687: EQUAL
39688: ST_TO_ADDR
39689: GO 39863
39691: LD_INT 16
39693: DOUBLE
39694: EQUAL
39695: IFTRUE 39699
39697: GO 39724
39699: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_INT 84
39707: PPUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 321
39717: PUSH
39718: LD_INT 2
39720: EQUAL
39721: ST_TO_ADDR
39722: GO 39863
39724: LD_INT 19
39726: DOUBLE
39727: EQUAL
39728: IFTRUE 39738
39730: LD_INT 23
39732: DOUBLE
39733: EQUAL
39734: IFTRUE 39738
39736: GO 39763
39738: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39739: LD_ADDR_VAR 0 3
39743: PUSH
39744: LD_INT 83
39746: PPUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 321
39756: PUSH
39757: LD_INT 2
39759: EQUAL
39760: ST_TO_ADDR
39761: GO 39863
39763: LD_INT 17
39765: DOUBLE
39766: EQUAL
39767: IFTRUE 39771
39769: GO 39796
39771: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39772: LD_ADDR_VAR 0 3
39776: PUSH
39777: LD_INT 39
39779: PPUSH
39780: LD_VAR 0 1
39784: PPUSH
39785: CALL_OW 321
39789: PUSH
39790: LD_INT 2
39792: EQUAL
39793: ST_TO_ADDR
39794: GO 39863
39796: LD_INT 18
39798: DOUBLE
39799: EQUAL
39800: IFTRUE 39804
39802: GO 39829
39804: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39805: LD_ADDR_VAR 0 3
39809: PUSH
39810: LD_INT 40
39812: PPUSH
39813: LD_VAR 0 1
39817: PPUSH
39818: CALL_OW 321
39822: PUSH
39823: LD_INT 2
39825: EQUAL
39826: ST_TO_ADDR
39827: GO 39863
39829: LD_INT 27
39831: DOUBLE
39832: EQUAL
39833: IFTRUE 39837
39835: GO 39862
39837: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39838: LD_ADDR_VAR 0 3
39842: PUSH
39843: LD_INT 35
39845: PPUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 321
39855: PUSH
39856: LD_INT 2
39858: EQUAL
39859: ST_TO_ADDR
39860: GO 39863
39862: POP
// end ;
39863: LD_VAR 0 3
39867: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39868: LD_INT 0
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
// result := false ;
39881: LD_ADDR_VAR 0 6
39885: PUSH
39886: LD_INT 0
39888: ST_TO_ADDR
// if btype = b_depot then
39889: LD_VAR 0 2
39893: PUSH
39894: LD_INT 0
39896: EQUAL
39897: IFFALSE 39909
// begin result := true ;
39899: LD_ADDR_VAR 0 6
39903: PUSH
39904: LD_INT 1
39906: ST_TO_ADDR
// exit ;
39907: GO 40735
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39909: LD_VAR 0 1
39913: NOT
39914: PUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 266
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: IN
39935: NOT
39936: OR
39937: PUSH
39938: LD_VAR 0 2
39942: NOT
39943: OR
39944: PUSH
39945: LD_VAR 0 5
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 3
39961: PUSH
39962: LD_INT 4
39964: PUSH
39965: LD_INT 5
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: IN
39976: NOT
39977: OR
39978: PUSH
39979: LD_VAR 0 3
39983: PPUSH
39984: LD_VAR 0 4
39988: PPUSH
39989: CALL_OW 488
39993: NOT
39994: OR
39995: IFFALSE 39999
// exit ;
39997: GO 40735
// side := GetSide ( depot ) ;
39999: LD_ADDR_VAR 0 9
40003: PUSH
40004: LD_VAR 0 1
40008: PPUSH
40009: CALL_OW 255
40013: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40014: LD_VAR 0 9
40018: PPUSH
40019: LD_VAR 0 2
40023: PPUSH
40024: CALL 39492 0 2
40028: NOT
40029: IFFALSE 40033
// exit ;
40031: GO 40735
// pom := GetBase ( depot ) ;
40033: LD_ADDR_VAR 0 10
40037: PUSH
40038: LD_VAR 0 1
40042: PPUSH
40043: CALL_OW 274
40047: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40048: LD_ADDR_VAR 0 11
40052: PUSH
40053: LD_VAR 0 2
40057: PPUSH
40058: LD_VAR 0 1
40062: PPUSH
40063: CALL_OW 248
40067: PPUSH
40068: CALL_OW 450
40072: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40073: LD_VAR 0 10
40077: PPUSH
40078: LD_INT 1
40080: PPUSH
40081: CALL_OW 275
40085: PUSH
40086: LD_VAR 0 11
40090: PUSH
40091: LD_INT 1
40093: ARRAY
40094: GREATEREQUAL
40095: PUSH
40096: LD_VAR 0 10
40100: PPUSH
40101: LD_INT 2
40103: PPUSH
40104: CALL_OW 275
40108: PUSH
40109: LD_VAR 0 11
40113: PUSH
40114: LD_INT 2
40116: ARRAY
40117: GREATEREQUAL
40118: AND
40119: PUSH
40120: LD_VAR 0 10
40124: PPUSH
40125: LD_INT 3
40127: PPUSH
40128: CALL_OW 275
40132: PUSH
40133: LD_VAR 0 11
40137: PUSH
40138: LD_INT 3
40140: ARRAY
40141: GREATEREQUAL
40142: AND
40143: NOT
40144: IFFALSE 40148
// exit ;
40146: GO 40735
// if GetBType ( depot ) = b_depot then
40148: LD_VAR 0 1
40152: PPUSH
40153: CALL_OW 266
40157: PUSH
40158: LD_INT 0
40160: EQUAL
40161: IFFALSE 40173
// dist := 28 else
40163: LD_ADDR_VAR 0 14
40167: PUSH
40168: LD_INT 28
40170: ST_TO_ADDR
40171: GO 40181
// dist := 36 ;
40173: LD_ADDR_VAR 0 14
40177: PUSH
40178: LD_INT 36
40180: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40181: LD_VAR 0 1
40185: PPUSH
40186: LD_VAR 0 3
40190: PPUSH
40191: LD_VAR 0 4
40195: PPUSH
40196: CALL_OW 297
40200: PUSH
40201: LD_VAR 0 14
40205: GREATER
40206: IFFALSE 40210
// exit ;
40208: GO 40735
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40210: LD_ADDR_VAR 0 12
40214: PUSH
40215: LD_VAR 0 2
40219: PPUSH
40220: LD_VAR 0 3
40224: PPUSH
40225: LD_VAR 0 4
40229: PPUSH
40230: LD_VAR 0 5
40234: PPUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: CALL_OW 248
40244: PPUSH
40245: LD_INT 0
40247: PPUSH
40248: CALL 40740 0 6
40252: ST_TO_ADDR
// if not hexes then
40253: LD_VAR 0 12
40257: NOT
40258: IFFALSE 40262
// exit ;
40260: GO 40735
// hex := GetHexInfo ( x , y ) ;
40262: LD_ADDR_VAR 0 15
40266: PUSH
40267: LD_VAR 0 3
40271: PPUSH
40272: LD_VAR 0 4
40276: PPUSH
40277: CALL_OW 546
40281: ST_TO_ADDR
// if hex [ 1 ] then
40282: LD_VAR 0 15
40286: PUSH
40287: LD_INT 1
40289: ARRAY
40290: IFFALSE 40294
// exit ;
40292: GO 40735
// height := hex [ 2 ] ;
40294: LD_ADDR_VAR 0 13
40298: PUSH
40299: LD_VAR 0 15
40303: PUSH
40304: LD_INT 2
40306: ARRAY
40307: ST_TO_ADDR
// for i = 1 to hexes do
40308: LD_ADDR_VAR 0 7
40312: PUSH
40313: DOUBLE
40314: LD_INT 1
40316: DEC
40317: ST_TO_ADDR
40318: LD_VAR 0 12
40322: PUSH
40323: FOR_TO
40324: IFFALSE 40654
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40326: LD_VAR 0 12
40330: PUSH
40331: LD_VAR 0 7
40335: ARRAY
40336: PUSH
40337: LD_INT 1
40339: ARRAY
40340: PPUSH
40341: LD_VAR 0 12
40345: PUSH
40346: LD_VAR 0 7
40350: ARRAY
40351: PUSH
40352: LD_INT 2
40354: ARRAY
40355: PPUSH
40356: CALL_OW 488
40360: NOT
40361: PUSH
40362: LD_VAR 0 12
40366: PUSH
40367: LD_VAR 0 7
40371: ARRAY
40372: PUSH
40373: LD_INT 1
40375: ARRAY
40376: PPUSH
40377: LD_VAR 0 12
40381: PUSH
40382: LD_VAR 0 7
40386: ARRAY
40387: PUSH
40388: LD_INT 2
40390: ARRAY
40391: PPUSH
40392: CALL_OW 428
40396: PUSH
40397: LD_INT 0
40399: GREATER
40400: OR
40401: PUSH
40402: LD_VAR 0 12
40406: PUSH
40407: LD_VAR 0 7
40411: ARRAY
40412: PUSH
40413: LD_INT 1
40415: ARRAY
40416: PPUSH
40417: LD_VAR 0 12
40421: PUSH
40422: LD_VAR 0 7
40426: ARRAY
40427: PUSH
40428: LD_INT 2
40430: ARRAY
40431: PPUSH
40432: CALL_OW 351
40436: OR
40437: IFFALSE 40443
// exit ;
40439: POP
40440: POP
40441: GO 40735
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40443: LD_ADDR_VAR 0 8
40447: PUSH
40448: LD_VAR 0 12
40452: PUSH
40453: LD_VAR 0 7
40457: ARRAY
40458: PUSH
40459: LD_INT 1
40461: ARRAY
40462: PPUSH
40463: LD_VAR 0 12
40467: PUSH
40468: LD_VAR 0 7
40472: ARRAY
40473: PUSH
40474: LD_INT 2
40476: ARRAY
40477: PPUSH
40478: CALL_OW 546
40482: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40483: LD_VAR 0 8
40487: PUSH
40488: LD_INT 1
40490: ARRAY
40491: PUSH
40492: LD_VAR 0 8
40496: PUSH
40497: LD_INT 2
40499: ARRAY
40500: PUSH
40501: LD_VAR 0 13
40505: PUSH
40506: LD_INT 2
40508: PLUS
40509: GREATER
40510: OR
40511: PUSH
40512: LD_VAR 0 8
40516: PUSH
40517: LD_INT 2
40519: ARRAY
40520: PUSH
40521: LD_VAR 0 13
40525: PUSH
40526: LD_INT 2
40528: MINUS
40529: LESS
40530: OR
40531: PUSH
40532: LD_VAR 0 8
40536: PUSH
40537: LD_INT 3
40539: ARRAY
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 8
40546: PUSH
40547: LD_INT 9
40549: PUSH
40550: LD_INT 10
40552: PUSH
40553: LD_INT 11
40555: PUSH
40556: LD_INT 12
40558: PUSH
40559: LD_INT 13
40561: PUSH
40562: LD_INT 16
40564: PUSH
40565: LD_INT 17
40567: PUSH
40568: LD_INT 18
40570: PUSH
40571: LD_INT 19
40573: PUSH
40574: LD_INT 20
40576: PUSH
40577: LD_INT 21
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: IN
40595: NOT
40596: OR
40597: PUSH
40598: LD_VAR 0 8
40602: PUSH
40603: LD_INT 5
40605: ARRAY
40606: NOT
40607: OR
40608: PUSH
40609: LD_VAR 0 8
40613: PUSH
40614: LD_INT 6
40616: ARRAY
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: LD_INT 7
40626: PUSH
40627: LD_INT 9
40629: PUSH
40630: LD_INT 10
40632: PUSH
40633: LD_INT 11
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: IN
40644: NOT
40645: OR
40646: IFFALSE 40652
// exit ;
40648: POP
40649: POP
40650: GO 40735
// end ;
40652: GO 40323
40654: POP
40655: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40656: LD_VAR 0 9
40660: PPUSH
40661: LD_VAR 0 3
40665: PPUSH
40666: LD_VAR 0 4
40670: PPUSH
40671: LD_INT 20
40673: PPUSH
40674: CALL 32658 0 4
40678: PUSH
40679: LD_INT 4
40681: ARRAY
40682: IFFALSE 40686
// exit ;
40684: GO 40735
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40686: LD_VAR 0 2
40690: PUSH
40691: LD_INT 29
40693: PUSH
40694: LD_INT 30
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: IN
40701: PUSH
40702: LD_VAR 0 3
40706: PPUSH
40707: LD_VAR 0 4
40711: PPUSH
40712: LD_VAR 0 9
40716: PPUSH
40717: CALL_OW 440
40721: NOT
40722: AND
40723: IFFALSE 40727
// exit ;
40725: GO 40735
// result := true ;
40727: LD_ADDR_VAR 0 6
40731: PUSH
40732: LD_INT 1
40734: ST_TO_ADDR
// end ;
40735: LD_VAR 0 6
40739: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40740: LD_INT 0
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
// result = [ ] ;
40800: LD_ADDR_VAR 0 7
40804: PUSH
40805: EMPTY
40806: ST_TO_ADDR
// temp_list = [ ] ;
40807: LD_ADDR_VAR 0 9
40811: PUSH
40812: EMPTY
40813: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40814: LD_VAR 0 4
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 3
40830: PUSH
40831: LD_INT 4
40833: PUSH
40834: LD_INT 5
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: IN
40845: NOT
40846: PUSH
40847: LD_VAR 0 1
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: IN
40862: PUSH
40863: LD_VAR 0 5
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 3
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: IN
40882: NOT
40883: AND
40884: OR
40885: IFFALSE 40889
// exit ;
40887: GO 59280
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40889: LD_VAR 0 1
40893: PUSH
40894: LD_INT 6
40896: PUSH
40897: LD_INT 7
40899: PUSH
40900: LD_INT 8
40902: PUSH
40903: LD_INT 13
40905: PUSH
40906: LD_INT 12
40908: PUSH
40909: LD_INT 15
40911: PUSH
40912: LD_INT 11
40914: PUSH
40915: LD_INT 14
40917: PUSH
40918: LD_INT 10
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: IN
40932: IFFALSE 40942
// btype = b_lab ;
40934: LD_ADDR_VAR 0 1
40938: PUSH
40939: LD_INT 6
40941: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40942: LD_VAR 0 6
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: IN
40961: NOT
40962: PUSH
40963: LD_VAR 0 1
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: LD_INT 3
40979: PUSH
40980: LD_INT 6
40982: PUSH
40983: LD_INT 36
40985: PUSH
40986: LD_INT 4
40988: PUSH
40989: LD_INT 5
40991: PUSH
40992: LD_INT 31
40994: PUSH
40995: LD_INT 32
40997: PUSH
40998: LD_INT 33
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: IN
41014: NOT
41015: PUSH
41016: LD_VAR 0 6
41020: PUSH
41021: LD_INT 1
41023: EQUAL
41024: AND
41025: OR
41026: PUSH
41027: LD_VAR 0 1
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: LD_INT 3
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: IN
41042: NOT
41043: PUSH
41044: LD_VAR 0 6
41048: PUSH
41049: LD_INT 2
41051: EQUAL
41052: AND
41053: OR
41054: IFFALSE 41064
// mode = 0 ;
41056: LD_ADDR_VAR 0 6
41060: PUSH
41061: LD_INT 0
41063: ST_TO_ADDR
// case mode of 0 :
41064: LD_VAR 0 6
41068: PUSH
41069: LD_INT 0
41071: DOUBLE
41072: EQUAL
41073: IFTRUE 41077
41075: GO 52530
41077: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41078: LD_ADDR_VAR 0 11
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 3
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41271: LD_ADDR_VAR 0 12
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 3
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41467: LD_ADDR_VAR 0 13
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 3
41626: NEG
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: LD_INT 3
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41666: LD_ADDR_VAR 0 14
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 2
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 3
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 3
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 2
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41862: LD_ADDR_VAR 0 15
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: NEG
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 3
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 3
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42055: LD_ADDR_VAR 0 16
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42248: LD_ADDR_VAR 0 17
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42478: LD_ADDR_VAR 0 18
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42708: LD_ADDR_VAR 0 19
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: LD_INT 2
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42938: LD_ADDR_VAR 0 20
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43168: LD_ADDR_VAR 0 21
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 2
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43398: LD_ADDR_VAR 0 22
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43628: LD_ADDR_VAR 0 23
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 2
43804: NEG
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 3
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43908: LD_ADDR_VAR 0 24
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 2
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44184: LD_ADDR_VAR 0 25
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 3
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44458: LD_ADDR_VAR 0 26
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 3
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 3
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44734: LD_ADDR_VAR 0 27
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 3
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 3
44979: NEG
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45014: LD_ADDR_VAR 0 28
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 3
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 3
45261: NEG
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45296: LD_ADDR_VAR 0 29
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 3
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 3
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45575: LD_ADDR_VAR 0 30
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 3
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45853: LD_ADDR_VAR 0 31
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: NEG
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 3
46096: NEG
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46131: LD_ADDR_VAR 0 32
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 3
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 3
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46409: LD_ADDR_VAR 0 33
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46688: LD_ADDR_VAR 0 34
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 3
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46968: LD_ADDR_VAR 0 35
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47080: LD_ADDR_VAR 0 36
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47192: LD_ADDR_VAR 0 37
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47304: LD_ADDR_VAR 0 38
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47416: LD_ADDR_VAR 0 39
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47528: LD_ADDR_VAR 0 40
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47640: LD_ADDR_VAR 0 41
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 3
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 3
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 3
47914: NEG
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 3
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 3
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: NEG
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47990: LD_ADDR_VAR 0 42
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: LD_INT 3
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 3
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48340: LD_ADDR_VAR 0 43
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 3
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 3
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 3
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48688: LD_ADDR_VAR 0 44
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 3
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 3
48962: NEG
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 3
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 3
48985: NEG
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49038: LD_ADDR_VAR 0 45
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: LD_INT 3
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 3
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 3
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 3
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 3
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 3
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: NEG
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49388: LD_ADDR_VAR 0 46
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 3
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 3
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 3
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 3
49684: NEG
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49736: LD_ADDR_VAR 0 47
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49887: LD_ADDR_VAR 0 48
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50034: LD_ADDR_VAR 0 49
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50178: LD_ADDR_VAR 0 50
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50322: LD_ADDR_VAR 0 51
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50469: LD_ADDR_VAR 0 52
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50620: LD_ADDR_VAR 0 53
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50850: LD_ADDR_VAR 0 54
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51080: LD_ADDR_VAR 0 55
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51310: LD_ADDR_VAR 0 56
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51540: LD_ADDR_VAR 0 57
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51770: LD_ADDR_VAR 0 58
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52000: LD_ADDR_VAR 0 59
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52088: LD_ADDR_VAR 0 60
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52176: LD_ADDR_VAR 0 61
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52264: LD_ADDR_VAR 0 62
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52352: LD_ADDR_VAR 0 63
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52440: LD_ADDR_VAR 0 64
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: ST_TO_ADDR
// end ; 1 :
52528: GO 58425
52530: LD_INT 1
52532: DOUBLE
52533: EQUAL
52534: IFTRUE 52538
52536: GO 55161
52538: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52539: LD_ADDR_VAR 0 11
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 3
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52583: LD_ADDR_VAR 0 12
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52624: LD_ADDR_VAR 0 13
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 3
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52664: LD_ADDR_VAR 0 14
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: LIST
52704: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52705: LD_ADDR_VAR 0 15
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52749: LD_ADDR_VAR 0 16
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: LD_INT 3
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 3
52768: NEG
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52795: LD_ADDR_VAR 0 17
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52839: LD_ADDR_VAR 0 18
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: LIST
52879: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52880: LD_ADDR_VAR 0 19
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52920: LD_ADDR_VAR 0 20
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52961: LD_ADDR_VAR 0 21
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53005: LD_ADDR_VAR 0 22
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53051: LD_ADDR_VAR 0 23
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 4
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 3
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53095: LD_ADDR_VAR 0 24
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 4
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53136: LD_ADDR_VAR 0 25
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 3
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 4
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: LD_INT 4
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53176: LD_ADDR_VAR 0 26
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 3
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 4
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 3
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53217: LD_ADDR_VAR 0 27
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 4
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: LIST
53260: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53261: LD_ADDR_VAR 0 28
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: LD_INT 4
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 4
53292: NEG
53293: PUSH
53294: LD_INT 3
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53307: LD_ADDR_VAR 0 29
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 3
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 4
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 4
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 5
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 5
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 4
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 6
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 6
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 5
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53462: LD_ADDR_VAR 0 30
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 4
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 4
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 4
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 5
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 5
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 5
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 6
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 6
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53605: LD_ADDR_VAR 0 31
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 4
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 4
53652: PUSH
53653: LD_INT 4
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: LD_INT 4
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 5
53672: PUSH
53673: LD_INT 4
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 5
53682: PUSH
53683: LD_INT 5
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 4
53692: PUSH
53693: LD_INT 5
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 6
53702: PUSH
53703: LD_INT 5
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 6
53712: PUSH
53713: LD_INT 6
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 5
53722: PUSH
53723: LD_INT 6
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53744: LD_ADDR_VAR 0 32
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 4
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 4
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 3
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 5
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 5
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 4
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 6
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 6
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 5
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53887: LD_ADDR_VAR 0 33
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 4
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 4
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 4
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 5
53973: NEG
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 5
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 5
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 6
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 6
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54042: LD_ADDR_VAR 0 34
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: NEG
54086: PUSH
54087: LD_INT 4
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 4
54097: NEG
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 4
54109: NEG
54110: PUSH
54111: LD_INT 4
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 4
54121: NEG
54122: PUSH
54123: LD_INT 5
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 5
54133: NEG
54134: PUSH
54135: LD_INT 4
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 5
54145: NEG
54146: PUSH
54147: LD_INT 5
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 5
54157: NEG
54158: PUSH
54159: LD_INT 6
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 6
54169: NEG
54170: PUSH
54171: LD_INT 5
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 6
54181: NEG
54182: PUSH
54183: LD_INT 6
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54205: LD_ADDR_VAR 0 41
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 3
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54249: LD_ADDR_VAR 0 42
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 3
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: LIST
54289: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54290: LD_ADDR_VAR 0 43
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: LIST
54329: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54330: LD_ADDR_VAR 0 44
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54371: LD_ADDR_VAR 0 45
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54415: LD_ADDR_VAR 0 46
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: LD_INT 3
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54461: LD_ADDR_VAR 0 47
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: LD_INT 3
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54494: LD_ADDR_VAR 0 48
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54525: LD_ADDR_VAR 0 49
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54554: LD_ADDR_VAR 0 50
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54583: LD_ADDR_VAR 0 51
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54614: LD_ADDR_VAR 0 52
54618: PUSH
54619: LD_INT 3
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54647: LD_ADDR_VAR 0 53
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54691: LD_ADDR_VAR 0 54
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54732: LD_ADDR_VAR 0 55
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 3
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54772: LD_ADDR_VAR 0 56
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: LIST
54812: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54813: LD_ADDR_VAR 0 57
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: NEG
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: LIST
54856: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54857: LD_ADDR_VAR 0 58
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 3
54888: NEG
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54903: LD_ADDR_VAR 0 59
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54947: LD_ADDR_VAR 0 60
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54988: LD_ADDR_VAR 0 61
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55028: LD_ADDR_VAR 0 62
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55069: LD_ADDR_VAR 0 63
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55113: LD_ADDR_VAR 0 64
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// end ; 2 :
55159: GO 58425
55161: LD_INT 2
55163: DOUBLE
55164: EQUAL
55165: IFTRUE 55169
55167: GO 58424
55169: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55170: LD_ADDR_VAR 0 29
55174: PUSH
55175: LD_INT 4
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 4
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 5
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 5
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 4
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 5
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 3
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 4
55290: PUSH
55291: LD_INT 3
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: LD_INT 4
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 4
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 4
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 4
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 4
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 3
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 4
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 5
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 5
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 4
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 5
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: NEG
55443: PUSH
55444: LD_INT 3
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 3
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: NEG
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 4
55509: NEG
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 4
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 4
55532: NEG
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 4
55555: NEG
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 4
55567: NEG
55568: PUSH
55569: LD_INT 5
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 4
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 4
55603: NEG
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 5
55615: NEG
55616: PUSH
55617: LD_INT 4
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 5
55627: NEG
55628: PUSH
55629: LD_INT 5
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: LD_INT 5
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 5
55651: NEG
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55708: LD_ADDR_VAR 0 30
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 4
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 5
55735: PUSH
55736: LD_INT 4
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 5
55745: PUSH
55746: LD_INT 5
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 4
55755: PUSH
55756: LD_INT 5
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 5
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 3
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 4
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 4
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: LD_INT 4
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 4
55898: NEG
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 4
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 3
55932: NEG
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 4
55943: NEG
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 5
55954: NEG
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 5
55965: NEG
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 5
55977: NEG
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: LD_INT 3
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: NEG
56013: PUSH
56014: LD_INT 4
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 4
56060: NEG
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 4
56072: NEG
56073: PUSH
56074: LD_INT 4
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: LD_INT 4
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 4
56096: NEG
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 4
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 5
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 4
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 4
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 5
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: LD_INT 5
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56255: LD_ADDR_VAR 0 31
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 3
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 5
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 5
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 4
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 5
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 4
56411: NEG
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 4
56434: NEG
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 4
56457: NEG
56458: PUSH
56459: LD_INT 4
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 4
56469: NEG
56470: PUSH
56471: LD_INT 5
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 4
56505: NEG
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 5
56517: NEG
56518: PUSH
56519: LD_INT 4
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 5
56529: NEG
56530: PUSH
56531: LD_INT 5
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 3
56541: NEG
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 5
56553: NEG
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 3
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 4
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 3
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 4
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: LD_INT 4
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 5
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 4
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 3
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 5
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56805: LD_ADDR_VAR 0 32
56809: PUSH
56810: LD_INT 4
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 4
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 4
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 5
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 5
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 5
56891: NEG
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: NEG
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: LD_INT 4
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 4
56974: NEG
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 4
56986: NEG
56987: PUSH
56988: LD_INT 4
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: LD_INT 4
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 5
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 4
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 4
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 5
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 5
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 4
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 4
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 4
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 4
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 5
57237: PUSH
57238: LD_INT 4
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 5
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 5
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: PUSH
57298: LD_INT 5
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57352: LD_ADDR_VAR 0 33
57356: PUSH
57357: LD_INT 4
57359: NEG
57360: PUSH
57361: LD_INT 4
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 4
57371: NEG
57372: PUSH
57373: LD_INT 5
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: LD_INT 4
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 3
57395: NEG
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 4
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 5
57419: NEG
57420: PUSH
57421: LD_INT 4
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 5
57431: NEG
57432: PUSH
57433: LD_INT 5
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: LD_INT 5
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 4
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: LD_INT 3
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 4
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: LD_INT 4
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 4
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 5
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 5
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 3
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 4
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 4
57692: PUSH
57693: LD_INT 4
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: LD_INT 4
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 4
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 4
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 4
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 5
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: LD_INT 4
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 5
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57890: LD_ADDR_VAR 0 34
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: LD_INT 4
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 5
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 4
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 4
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 5
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 3
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: LD_INT 5
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 4
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 4
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 4
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 4
58092: PUSH
58093: LD_INT 4
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 4
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 5
58112: PUSH
58113: LD_INT 4
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 5
58122: PUSH
58123: LD_INT 5
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: LD_INT 5
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 3
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 5
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: LD_INT 5
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 4
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 4
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: LD_INT 4
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 4
58275: NEG
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 4
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 5
58331: NEG
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 5
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 5
58354: NEG
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// end ; end ;
58422: GO 58425
58424: POP
// case btype of b_depot , b_warehouse :
58425: LD_VAR 0 1
58429: PUSH
58430: LD_INT 0
58432: DOUBLE
58433: EQUAL
58434: IFTRUE 58444
58436: LD_INT 1
58438: DOUBLE
58439: EQUAL
58440: IFTRUE 58444
58442: GO 58645
58444: POP
// case nation of nation_american :
58445: LD_VAR 0 5
58449: PUSH
58450: LD_INT 1
58452: DOUBLE
58453: EQUAL
58454: IFTRUE 58458
58456: GO 58514
58458: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58459: LD_ADDR_VAR 0 9
58463: PUSH
58464: LD_VAR 0 11
58468: PUSH
58469: LD_VAR 0 12
58473: PUSH
58474: LD_VAR 0 13
58478: PUSH
58479: LD_VAR 0 14
58483: PUSH
58484: LD_VAR 0 15
58488: PUSH
58489: LD_VAR 0 16
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: PUSH
58502: LD_VAR 0 4
58506: PUSH
58507: LD_INT 1
58509: PLUS
58510: ARRAY
58511: ST_TO_ADDR
58512: GO 58643
58514: LD_INT 2
58516: DOUBLE
58517: EQUAL
58518: IFTRUE 58522
58520: GO 58578
58522: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58523: LD_ADDR_VAR 0 9
58527: PUSH
58528: LD_VAR 0 17
58532: PUSH
58533: LD_VAR 0 18
58537: PUSH
58538: LD_VAR 0 19
58542: PUSH
58543: LD_VAR 0 20
58547: PUSH
58548: LD_VAR 0 21
58552: PUSH
58553: LD_VAR 0 22
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: PUSH
58566: LD_VAR 0 4
58570: PUSH
58571: LD_INT 1
58573: PLUS
58574: ARRAY
58575: ST_TO_ADDR
58576: GO 58643
58578: LD_INT 3
58580: DOUBLE
58581: EQUAL
58582: IFTRUE 58586
58584: GO 58642
58586: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58587: LD_ADDR_VAR 0 9
58591: PUSH
58592: LD_VAR 0 23
58596: PUSH
58597: LD_VAR 0 24
58601: PUSH
58602: LD_VAR 0 25
58606: PUSH
58607: LD_VAR 0 26
58611: PUSH
58612: LD_VAR 0 27
58616: PUSH
58617: LD_VAR 0 28
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: PUSH
58630: LD_VAR 0 4
58634: PUSH
58635: LD_INT 1
58637: PLUS
58638: ARRAY
58639: ST_TO_ADDR
58640: GO 58643
58642: POP
58643: GO 59198
58645: LD_INT 2
58647: DOUBLE
58648: EQUAL
58649: IFTRUE 58659
58651: LD_INT 3
58653: DOUBLE
58654: EQUAL
58655: IFTRUE 58659
58657: GO 58715
58659: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58660: LD_ADDR_VAR 0 9
58664: PUSH
58665: LD_VAR 0 29
58669: PUSH
58670: LD_VAR 0 30
58674: PUSH
58675: LD_VAR 0 31
58679: PUSH
58680: LD_VAR 0 32
58684: PUSH
58685: LD_VAR 0 33
58689: PUSH
58690: LD_VAR 0 34
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: PUSH
58703: LD_VAR 0 4
58707: PUSH
58708: LD_INT 1
58710: PLUS
58711: ARRAY
58712: ST_TO_ADDR
58713: GO 59198
58715: LD_INT 16
58717: DOUBLE
58718: EQUAL
58719: IFTRUE 58777
58721: LD_INT 17
58723: DOUBLE
58724: EQUAL
58725: IFTRUE 58777
58727: LD_INT 18
58729: DOUBLE
58730: EQUAL
58731: IFTRUE 58777
58733: LD_INT 19
58735: DOUBLE
58736: EQUAL
58737: IFTRUE 58777
58739: LD_INT 22
58741: DOUBLE
58742: EQUAL
58743: IFTRUE 58777
58745: LD_INT 20
58747: DOUBLE
58748: EQUAL
58749: IFTRUE 58777
58751: LD_INT 21
58753: DOUBLE
58754: EQUAL
58755: IFTRUE 58777
58757: LD_INT 23
58759: DOUBLE
58760: EQUAL
58761: IFTRUE 58777
58763: LD_INT 24
58765: DOUBLE
58766: EQUAL
58767: IFTRUE 58777
58769: LD_INT 25
58771: DOUBLE
58772: EQUAL
58773: IFTRUE 58777
58775: GO 58833
58777: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58778: LD_ADDR_VAR 0 9
58782: PUSH
58783: LD_VAR 0 35
58787: PUSH
58788: LD_VAR 0 36
58792: PUSH
58793: LD_VAR 0 37
58797: PUSH
58798: LD_VAR 0 38
58802: PUSH
58803: LD_VAR 0 39
58807: PUSH
58808: LD_VAR 0 40
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: PUSH
58821: LD_VAR 0 4
58825: PUSH
58826: LD_INT 1
58828: PLUS
58829: ARRAY
58830: ST_TO_ADDR
58831: GO 59198
58833: LD_INT 6
58835: DOUBLE
58836: EQUAL
58837: IFTRUE 58889
58839: LD_INT 7
58841: DOUBLE
58842: EQUAL
58843: IFTRUE 58889
58845: LD_INT 8
58847: DOUBLE
58848: EQUAL
58849: IFTRUE 58889
58851: LD_INT 13
58853: DOUBLE
58854: EQUAL
58855: IFTRUE 58889
58857: LD_INT 12
58859: DOUBLE
58860: EQUAL
58861: IFTRUE 58889
58863: LD_INT 15
58865: DOUBLE
58866: EQUAL
58867: IFTRUE 58889
58869: LD_INT 11
58871: DOUBLE
58872: EQUAL
58873: IFTRUE 58889
58875: LD_INT 14
58877: DOUBLE
58878: EQUAL
58879: IFTRUE 58889
58881: LD_INT 10
58883: DOUBLE
58884: EQUAL
58885: IFTRUE 58889
58887: GO 58945
58889: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58890: LD_ADDR_VAR 0 9
58894: PUSH
58895: LD_VAR 0 41
58899: PUSH
58900: LD_VAR 0 42
58904: PUSH
58905: LD_VAR 0 43
58909: PUSH
58910: LD_VAR 0 44
58914: PUSH
58915: LD_VAR 0 45
58919: PUSH
58920: LD_VAR 0 46
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: PUSH
58933: LD_VAR 0 4
58937: PUSH
58938: LD_INT 1
58940: PLUS
58941: ARRAY
58942: ST_TO_ADDR
58943: GO 59198
58945: LD_INT 36
58947: DOUBLE
58948: EQUAL
58949: IFTRUE 58953
58951: GO 59009
58953: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58954: LD_ADDR_VAR 0 9
58958: PUSH
58959: LD_VAR 0 47
58963: PUSH
58964: LD_VAR 0 48
58968: PUSH
58969: LD_VAR 0 49
58973: PUSH
58974: LD_VAR 0 50
58978: PUSH
58979: LD_VAR 0 51
58983: PUSH
58984: LD_VAR 0 52
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: PUSH
58997: LD_VAR 0 4
59001: PUSH
59002: LD_INT 1
59004: PLUS
59005: ARRAY
59006: ST_TO_ADDR
59007: GO 59198
59009: LD_INT 4
59011: DOUBLE
59012: EQUAL
59013: IFTRUE 59035
59015: LD_INT 5
59017: DOUBLE
59018: EQUAL
59019: IFTRUE 59035
59021: LD_INT 34
59023: DOUBLE
59024: EQUAL
59025: IFTRUE 59035
59027: LD_INT 37
59029: DOUBLE
59030: EQUAL
59031: IFTRUE 59035
59033: GO 59091
59035: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59036: LD_ADDR_VAR 0 9
59040: PUSH
59041: LD_VAR 0 53
59045: PUSH
59046: LD_VAR 0 54
59050: PUSH
59051: LD_VAR 0 55
59055: PUSH
59056: LD_VAR 0 56
59060: PUSH
59061: LD_VAR 0 57
59065: PUSH
59066: LD_VAR 0 58
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: PUSH
59079: LD_VAR 0 4
59083: PUSH
59084: LD_INT 1
59086: PLUS
59087: ARRAY
59088: ST_TO_ADDR
59089: GO 59198
59091: LD_INT 31
59093: DOUBLE
59094: EQUAL
59095: IFTRUE 59141
59097: LD_INT 32
59099: DOUBLE
59100: EQUAL
59101: IFTRUE 59141
59103: LD_INT 33
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59141
59109: LD_INT 27
59111: DOUBLE
59112: EQUAL
59113: IFTRUE 59141
59115: LD_INT 26
59117: DOUBLE
59118: EQUAL
59119: IFTRUE 59141
59121: LD_INT 28
59123: DOUBLE
59124: EQUAL
59125: IFTRUE 59141
59127: LD_INT 29
59129: DOUBLE
59130: EQUAL
59131: IFTRUE 59141
59133: LD_INT 30
59135: DOUBLE
59136: EQUAL
59137: IFTRUE 59141
59139: GO 59197
59141: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59142: LD_ADDR_VAR 0 9
59146: PUSH
59147: LD_VAR 0 59
59151: PUSH
59152: LD_VAR 0 60
59156: PUSH
59157: LD_VAR 0 61
59161: PUSH
59162: LD_VAR 0 62
59166: PUSH
59167: LD_VAR 0 63
59171: PUSH
59172: LD_VAR 0 64
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: PUSH
59185: LD_VAR 0 4
59189: PUSH
59190: LD_INT 1
59192: PLUS
59193: ARRAY
59194: ST_TO_ADDR
59195: GO 59198
59197: POP
// temp_list2 = [ ] ;
59198: LD_ADDR_VAR 0 10
59202: PUSH
59203: EMPTY
59204: ST_TO_ADDR
// for i in temp_list do
59205: LD_ADDR_VAR 0 8
59209: PUSH
59210: LD_VAR 0 9
59214: PUSH
59215: FOR_IN
59216: IFFALSE 59268
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59218: LD_ADDR_VAR 0 10
59222: PUSH
59223: LD_VAR 0 10
59227: PUSH
59228: LD_VAR 0 8
59232: PUSH
59233: LD_INT 1
59235: ARRAY
59236: PUSH
59237: LD_VAR 0 2
59241: PLUS
59242: PUSH
59243: LD_VAR 0 8
59247: PUSH
59248: LD_INT 2
59250: ARRAY
59251: PUSH
59252: LD_VAR 0 3
59256: PLUS
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: ADD
59265: ST_TO_ADDR
59266: GO 59215
59268: POP
59269: POP
// result = temp_list2 ;
59270: LD_ADDR_VAR 0 7
59274: PUSH
59275: LD_VAR 0 10
59279: ST_TO_ADDR
// end ;
59280: LD_VAR 0 7
59284: RET
// export function EnemyInRange ( unit , dist ) ; begin
59285: LD_INT 0
59287: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59288: LD_ADDR_VAR 0 3
59292: PUSH
59293: LD_VAR 0 1
59297: PPUSH
59298: CALL_OW 255
59302: PPUSH
59303: LD_VAR 0 1
59307: PPUSH
59308: CALL_OW 250
59312: PPUSH
59313: LD_VAR 0 1
59317: PPUSH
59318: CALL_OW 251
59322: PPUSH
59323: LD_VAR 0 2
59327: PPUSH
59328: CALL 32658 0 4
59332: PUSH
59333: LD_INT 4
59335: ARRAY
59336: ST_TO_ADDR
// end ;
59337: LD_VAR 0 3
59341: RET
// export function PlayerSeeMe ( unit ) ; begin
59342: LD_INT 0
59344: PPUSH
// result := See ( your_side , unit ) ;
59345: LD_ADDR_VAR 0 2
59349: PUSH
59350: LD_OWVAR 2
59354: PPUSH
59355: LD_VAR 0 1
59359: PPUSH
59360: CALL_OW 292
59364: ST_TO_ADDR
// end ;
59365: LD_VAR 0 2
59369: RET
// export function ReverseDir ( unit ) ; begin
59370: LD_INT 0
59372: PPUSH
// if not unit then
59373: LD_VAR 0 1
59377: NOT
59378: IFFALSE 59382
// exit ;
59380: GO 59405
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59382: LD_ADDR_VAR 0 2
59386: PUSH
59387: LD_VAR 0 1
59391: PPUSH
59392: CALL_OW 254
59396: PUSH
59397: LD_INT 3
59399: PLUS
59400: PUSH
59401: LD_INT 6
59403: MOD
59404: ST_TO_ADDR
// end ;
59405: LD_VAR 0 2
59409: RET
// export function ReverseArray ( array ) ; var i ; begin
59410: LD_INT 0
59412: PPUSH
59413: PPUSH
// if not array then
59414: LD_VAR 0 1
59418: NOT
59419: IFFALSE 59423
// exit ;
59421: GO 59478
// result := [ ] ;
59423: LD_ADDR_VAR 0 2
59427: PUSH
59428: EMPTY
59429: ST_TO_ADDR
// for i := array downto 1 do
59430: LD_ADDR_VAR 0 3
59434: PUSH
59435: DOUBLE
59436: LD_VAR 0 1
59440: INC
59441: ST_TO_ADDR
59442: LD_INT 1
59444: PUSH
59445: FOR_DOWNTO
59446: IFFALSE 59476
// result := Join ( result , array [ i ] ) ;
59448: LD_ADDR_VAR 0 2
59452: PUSH
59453: LD_VAR 0 2
59457: PPUSH
59458: LD_VAR 0 1
59462: PUSH
59463: LD_VAR 0 3
59467: ARRAY
59468: PPUSH
59469: CALL 64123 0 2
59473: ST_TO_ADDR
59474: GO 59445
59476: POP
59477: POP
// end ;
59478: LD_VAR 0 2
59482: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59483: LD_INT 0
59485: PPUSH
59486: PPUSH
59487: PPUSH
59488: PPUSH
59489: PPUSH
59490: PPUSH
// if not unit or not hexes then
59491: LD_VAR 0 1
59495: NOT
59496: PUSH
59497: LD_VAR 0 2
59501: NOT
59502: OR
59503: IFFALSE 59507
// exit ;
59505: GO 59630
// dist := 9999 ;
59507: LD_ADDR_VAR 0 5
59511: PUSH
59512: LD_INT 9999
59514: ST_TO_ADDR
// for i = 1 to hexes do
59515: LD_ADDR_VAR 0 4
59519: PUSH
59520: DOUBLE
59521: LD_INT 1
59523: DEC
59524: ST_TO_ADDR
59525: LD_VAR 0 2
59529: PUSH
59530: FOR_TO
59531: IFFALSE 59618
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59533: LD_ADDR_VAR 0 6
59537: PUSH
59538: LD_VAR 0 1
59542: PPUSH
59543: LD_VAR 0 2
59547: PUSH
59548: LD_VAR 0 4
59552: ARRAY
59553: PUSH
59554: LD_INT 1
59556: ARRAY
59557: PPUSH
59558: LD_VAR 0 2
59562: PUSH
59563: LD_VAR 0 4
59567: ARRAY
59568: PUSH
59569: LD_INT 2
59571: ARRAY
59572: PPUSH
59573: CALL_OW 297
59577: ST_TO_ADDR
// if tdist < dist then
59578: LD_VAR 0 6
59582: PUSH
59583: LD_VAR 0 5
59587: LESS
59588: IFFALSE 59616
// begin hex := hexes [ i ] ;
59590: LD_ADDR_VAR 0 8
59594: PUSH
59595: LD_VAR 0 2
59599: PUSH
59600: LD_VAR 0 4
59604: ARRAY
59605: ST_TO_ADDR
// dist := tdist ;
59606: LD_ADDR_VAR 0 5
59610: PUSH
59611: LD_VAR 0 6
59615: ST_TO_ADDR
// end ; end ;
59616: GO 59530
59618: POP
59619: POP
// result := hex ;
59620: LD_ADDR_VAR 0 3
59624: PUSH
59625: LD_VAR 0 8
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 3
59634: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59635: LD_INT 0
59637: PPUSH
59638: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59639: LD_VAR 0 1
59643: NOT
59644: PUSH
59645: LD_VAR 0 1
59649: PUSH
59650: LD_INT 21
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 23
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PPUSH
59674: CALL_OW 69
59678: IN
59679: NOT
59680: OR
59681: IFFALSE 59685
// exit ;
59683: GO 59732
// for i = 1 to 3 do
59685: LD_ADDR_VAR 0 3
59689: PUSH
59690: DOUBLE
59691: LD_INT 1
59693: DEC
59694: ST_TO_ADDR
59695: LD_INT 3
59697: PUSH
59698: FOR_TO
59699: IFFALSE 59730
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59701: LD_VAR 0 1
59705: PPUSH
59706: CALL_OW 250
59710: PPUSH
59711: LD_VAR 0 1
59715: PPUSH
59716: CALL_OW 251
59720: PPUSH
59721: LD_INT 1
59723: PPUSH
59724: CALL_OW 453
59728: GO 59698
59730: POP
59731: POP
// end ;
59732: LD_VAR 0 2
59736: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59737: LD_INT 0
59739: PPUSH
59740: PPUSH
59741: PPUSH
59742: PPUSH
59743: PPUSH
59744: PPUSH
// if not unit or not enemy_unit then
59745: LD_VAR 0 1
59749: NOT
59750: PUSH
59751: LD_VAR 0 2
59755: NOT
59756: OR
59757: IFFALSE 59761
// exit ;
59759: GO 60228
// if GetLives ( i ) < 250 then
59761: LD_VAR 0 4
59765: PPUSH
59766: CALL_OW 256
59770: PUSH
59771: LD_INT 250
59773: LESS
59774: IFFALSE 59787
// begin ComAutodestruct ( i ) ;
59776: LD_VAR 0 4
59780: PPUSH
59781: CALL 59635 0 1
// exit ;
59785: GO 60228
// end ; x := GetX ( enemy_unit ) ;
59787: LD_ADDR_VAR 0 7
59791: PUSH
59792: LD_VAR 0 2
59796: PPUSH
59797: CALL_OW 250
59801: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59802: LD_ADDR_VAR 0 8
59806: PUSH
59807: LD_VAR 0 2
59811: PPUSH
59812: CALL_OW 251
59816: ST_TO_ADDR
// if not x or not y then
59817: LD_VAR 0 7
59821: NOT
59822: PUSH
59823: LD_VAR 0 8
59827: NOT
59828: OR
59829: IFFALSE 59833
// exit ;
59831: GO 60228
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59833: LD_ADDR_VAR 0 6
59837: PUSH
59838: LD_VAR 0 7
59842: PPUSH
59843: LD_INT 0
59845: PPUSH
59846: LD_INT 4
59848: PPUSH
59849: CALL_OW 272
59853: PUSH
59854: LD_VAR 0 8
59858: PPUSH
59859: LD_INT 0
59861: PPUSH
59862: LD_INT 4
59864: PPUSH
59865: CALL_OW 273
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_VAR 0 7
59878: PPUSH
59879: LD_INT 1
59881: PPUSH
59882: LD_INT 4
59884: PPUSH
59885: CALL_OW 272
59889: PUSH
59890: LD_VAR 0 8
59894: PPUSH
59895: LD_INT 1
59897: PPUSH
59898: LD_INT 4
59900: PPUSH
59901: CALL_OW 273
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_VAR 0 7
59914: PPUSH
59915: LD_INT 2
59917: PPUSH
59918: LD_INT 4
59920: PPUSH
59921: CALL_OW 272
59925: PUSH
59926: LD_VAR 0 8
59930: PPUSH
59931: LD_INT 2
59933: PPUSH
59934: LD_INT 4
59936: PPUSH
59937: CALL_OW 273
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_VAR 0 7
59950: PPUSH
59951: LD_INT 3
59953: PPUSH
59954: LD_INT 4
59956: PPUSH
59957: CALL_OW 272
59961: PUSH
59962: LD_VAR 0 8
59966: PPUSH
59967: LD_INT 3
59969: PPUSH
59970: LD_INT 4
59972: PPUSH
59973: CALL_OW 273
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_VAR 0 7
59986: PPUSH
59987: LD_INT 4
59989: PPUSH
59990: LD_INT 4
59992: PPUSH
59993: CALL_OW 272
59997: PUSH
59998: LD_VAR 0 8
60002: PPUSH
60003: LD_INT 4
60005: PPUSH
60006: LD_INT 4
60008: PPUSH
60009: CALL_OW 273
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_VAR 0 7
60022: PPUSH
60023: LD_INT 5
60025: PPUSH
60026: LD_INT 4
60028: PPUSH
60029: CALL_OW 272
60033: PUSH
60034: LD_VAR 0 8
60038: PPUSH
60039: LD_INT 5
60041: PPUSH
60042: LD_INT 4
60044: PPUSH
60045: CALL_OW 273
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// for i = tmp downto 1 do
60062: LD_ADDR_VAR 0 4
60066: PUSH
60067: DOUBLE
60068: LD_VAR 0 6
60072: INC
60073: ST_TO_ADDR
60074: LD_INT 1
60076: PUSH
60077: FOR_DOWNTO
60078: IFFALSE 60179
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60080: LD_VAR 0 6
60084: PUSH
60085: LD_VAR 0 4
60089: ARRAY
60090: PUSH
60091: LD_INT 1
60093: ARRAY
60094: PPUSH
60095: LD_VAR 0 6
60099: PUSH
60100: LD_VAR 0 4
60104: ARRAY
60105: PUSH
60106: LD_INT 2
60108: ARRAY
60109: PPUSH
60110: CALL_OW 488
60114: NOT
60115: PUSH
60116: LD_VAR 0 6
60120: PUSH
60121: LD_VAR 0 4
60125: ARRAY
60126: PUSH
60127: LD_INT 1
60129: ARRAY
60130: PPUSH
60131: LD_VAR 0 6
60135: PUSH
60136: LD_VAR 0 4
60140: ARRAY
60141: PUSH
60142: LD_INT 2
60144: ARRAY
60145: PPUSH
60146: CALL_OW 428
60150: PUSH
60151: LD_INT 0
60153: NONEQUAL
60154: OR
60155: IFFALSE 60177
// tmp := Delete ( tmp , i ) ;
60157: LD_ADDR_VAR 0 6
60161: PUSH
60162: LD_VAR 0 6
60166: PPUSH
60167: LD_VAR 0 4
60171: PPUSH
60172: CALL_OW 3
60176: ST_TO_ADDR
60177: GO 60077
60179: POP
60180: POP
// j := GetClosestHex ( unit , tmp ) ;
60181: LD_ADDR_VAR 0 5
60185: PUSH
60186: LD_VAR 0 1
60190: PPUSH
60191: LD_VAR 0 6
60195: PPUSH
60196: CALL 59483 0 2
60200: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60201: LD_VAR 0 1
60205: PPUSH
60206: LD_VAR 0 5
60210: PUSH
60211: LD_INT 1
60213: ARRAY
60214: PPUSH
60215: LD_VAR 0 5
60219: PUSH
60220: LD_INT 2
60222: ARRAY
60223: PPUSH
60224: CALL_OW 111
// end ;
60228: LD_VAR 0 3
60232: RET
// export function PrepareApemanSoldier ( ) ; begin
60233: LD_INT 0
60235: PPUSH
// uc_nation := 0 ;
60236: LD_ADDR_OWVAR 21
60240: PUSH
60241: LD_INT 0
60243: ST_TO_ADDR
// hc_sex := sex_male ;
60244: LD_ADDR_OWVAR 27
60248: PUSH
60249: LD_INT 1
60251: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60252: LD_ADDR_OWVAR 28
60256: PUSH
60257: LD_INT 15
60259: ST_TO_ADDR
// hc_gallery :=  ;
60260: LD_ADDR_OWVAR 33
60264: PUSH
60265: LD_STRING 
60267: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60268: LD_ADDR_OWVAR 31
60272: PUSH
60273: LD_INT 0
60275: PPUSH
60276: LD_INT 3
60278: PPUSH
60279: CALL_OW 12
60283: PUSH
60284: LD_INT 0
60286: PPUSH
60287: LD_INT 3
60289: PPUSH
60290: CALL_OW 12
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: ST_TO_ADDR
// end ;
60307: LD_VAR 0 1
60311: RET
// export function PrepareApemanEngineer ( ) ; begin
60312: LD_INT 0
60314: PPUSH
// uc_nation := 0 ;
60315: LD_ADDR_OWVAR 21
60319: PUSH
60320: LD_INT 0
60322: ST_TO_ADDR
// hc_sex := sex_male ;
60323: LD_ADDR_OWVAR 27
60327: PUSH
60328: LD_INT 1
60330: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60331: LD_ADDR_OWVAR 28
60335: PUSH
60336: LD_INT 16
60338: ST_TO_ADDR
// hc_gallery :=  ;
60339: LD_ADDR_OWVAR 33
60343: PUSH
60344: LD_STRING 
60346: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60347: LD_ADDR_OWVAR 31
60351: PUSH
60352: LD_INT 0
60354: PPUSH
60355: LD_INT 3
60357: PPUSH
60358: CALL_OW 12
60362: PUSH
60363: LD_INT 0
60365: PPUSH
60366: LD_INT 3
60368: PPUSH
60369: CALL_OW 12
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: ST_TO_ADDR
// end ;
60386: LD_VAR 0 1
60390: RET
// export function PrepareApeman ( agressivity ) ; begin
60391: LD_INT 0
60393: PPUSH
// uc_side := 0 ;
60394: LD_ADDR_OWVAR 20
60398: PUSH
60399: LD_INT 0
60401: ST_TO_ADDR
// uc_nation := 0 ;
60402: LD_ADDR_OWVAR 21
60406: PUSH
60407: LD_INT 0
60409: ST_TO_ADDR
// hc_sex := sex_male ;
60410: LD_ADDR_OWVAR 27
60414: PUSH
60415: LD_INT 1
60417: ST_TO_ADDR
// hc_class := class_apeman ;
60418: LD_ADDR_OWVAR 28
60422: PUSH
60423: LD_INT 12
60425: ST_TO_ADDR
// hc_gallery :=  ;
60426: LD_ADDR_OWVAR 33
60430: PUSH
60431: LD_STRING 
60433: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60434: LD_ADDR_OWVAR 35
60438: PUSH
60439: LD_VAR 0 1
60443: NEG
60444: PPUSH
60445: LD_VAR 0 1
60449: PPUSH
60450: CALL_OW 12
60454: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60455: LD_ADDR_OWVAR 31
60459: PUSH
60460: LD_INT 0
60462: PPUSH
60463: LD_INT 3
60465: PPUSH
60466: CALL_OW 12
60470: PUSH
60471: LD_INT 0
60473: PPUSH
60474: LD_INT 3
60476: PPUSH
60477: CALL_OW 12
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: ST_TO_ADDR
// end ;
60494: LD_VAR 0 2
60498: RET
// export function PrepareTiger ( agressivity ) ; begin
60499: LD_INT 0
60501: PPUSH
// uc_side := 0 ;
60502: LD_ADDR_OWVAR 20
60506: PUSH
60507: LD_INT 0
60509: ST_TO_ADDR
// uc_nation := 0 ;
60510: LD_ADDR_OWVAR 21
60514: PUSH
60515: LD_INT 0
60517: ST_TO_ADDR
// hc_class := class_tiger ;
60518: LD_ADDR_OWVAR 28
60522: PUSH
60523: LD_INT 14
60525: ST_TO_ADDR
// hc_gallery :=  ;
60526: LD_ADDR_OWVAR 33
60530: PUSH
60531: LD_STRING 
60533: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60534: LD_ADDR_OWVAR 35
60538: PUSH
60539: LD_VAR 0 1
60543: NEG
60544: PPUSH
60545: LD_VAR 0 1
60549: PPUSH
60550: CALL_OW 12
60554: ST_TO_ADDR
// end ;
60555: LD_VAR 0 2
60559: RET
// export function PrepareEnchidna ( ) ; begin
60560: LD_INT 0
60562: PPUSH
// uc_side := 0 ;
60563: LD_ADDR_OWVAR 20
60567: PUSH
60568: LD_INT 0
60570: ST_TO_ADDR
// uc_nation := 0 ;
60571: LD_ADDR_OWVAR 21
60575: PUSH
60576: LD_INT 0
60578: ST_TO_ADDR
// hc_class := class_baggie ;
60579: LD_ADDR_OWVAR 28
60583: PUSH
60584: LD_INT 13
60586: ST_TO_ADDR
// hc_gallery :=  ;
60587: LD_ADDR_OWVAR 33
60591: PUSH
60592: LD_STRING 
60594: ST_TO_ADDR
// end ;
60595: LD_VAR 0 1
60599: RET
// export function PrepareFrog ( ) ; begin
60600: LD_INT 0
60602: PPUSH
// uc_side := 0 ;
60603: LD_ADDR_OWVAR 20
60607: PUSH
60608: LD_INT 0
60610: ST_TO_ADDR
// uc_nation := 0 ;
60611: LD_ADDR_OWVAR 21
60615: PUSH
60616: LD_INT 0
60618: ST_TO_ADDR
// hc_class := class_frog ;
60619: LD_ADDR_OWVAR 28
60623: PUSH
60624: LD_INT 19
60626: ST_TO_ADDR
// hc_gallery :=  ;
60627: LD_ADDR_OWVAR 33
60631: PUSH
60632: LD_STRING 
60634: ST_TO_ADDR
// end ;
60635: LD_VAR 0 1
60639: RET
// export function PrepareFish ( ) ; begin
60640: LD_INT 0
60642: PPUSH
// uc_side := 0 ;
60643: LD_ADDR_OWVAR 20
60647: PUSH
60648: LD_INT 0
60650: ST_TO_ADDR
// uc_nation := 0 ;
60651: LD_ADDR_OWVAR 21
60655: PUSH
60656: LD_INT 0
60658: ST_TO_ADDR
// hc_class := class_fish ;
60659: LD_ADDR_OWVAR 28
60663: PUSH
60664: LD_INT 20
60666: ST_TO_ADDR
// hc_gallery :=  ;
60667: LD_ADDR_OWVAR 33
60671: PUSH
60672: LD_STRING 
60674: ST_TO_ADDR
// end ;
60675: LD_VAR 0 1
60679: RET
// export function PrepareBird ( ) ; begin
60680: LD_INT 0
60682: PPUSH
// uc_side := 0 ;
60683: LD_ADDR_OWVAR 20
60687: PUSH
60688: LD_INT 0
60690: ST_TO_ADDR
// uc_nation := 0 ;
60691: LD_ADDR_OWVAR 21
60695: PUSH
60696: LD_INT 0
60698: ST_TO_ADDR
// hc_class := class_phororhacos ;
60699: LD_ADDR_OWVAR 28
60703: PUSH
60704: LD_INT 18
60706: ST_TO_ADDR
// hc_gallery :=  ;
60707: LD_ADDR_OWVAR 33
60711: PUSH
60712: LD_STRING 
60714: ST_TO_ADDR
// end ;
60715: LD_VAR 0 1
60719: RET
// export function PrepareHorse ( ) ; begin
60720: LD_INT 0
60722: PPUSH
// uc_side := 0 ;
60723: LD_ADDR_OWVAR 20
60727: PUSH
60728: LD_INT 0
60730: ST_TO_ADDR
// uc_nation := 0 ;
60731: LD_ADDR_OWVAR 21
60735: PUSH
60736: LD_INT 0
60738: ST_TO_ADDR
// hc_class := class_horse ;
60739: LD_ADDR_OWVAR 28
60743: PUSH
60744: LD_INT 21
60746: ST_TO_ADDR
// hc_gallery :=  ;
60747: LD_ADDR_OWVAR 33
60751: PUSH
60752: LD_STRING 
60754: ST_TO_ADDR
// end ;
60755: LD_VAR 0 1
60759: RET
// export function PrepareMastodont ( ) ; begin
60760: LD_INT 0
60762: PPUSH
// uc_side := 0 ;
60763: LD_ADDR_OWVAR 20
60767: PUSH
60768: LD_INT 0
60770: ST_TO_ADDR
// uc_nation := 0 ;
60771: LD_ADDR_OWVAR 21
60775: PUSH
60776: LD_INT 0
60778: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60779: LD_ADDR_OWVAR 37
60783: PUSH
60784: LD_INT 31
60786: ST_TO_ADDR
// vc_control := control_rider ;
60787: LD_ADDR_OWVAR 38
60791: PUSH
60792: LD_INT 4
60794: ST_TO_ADDR
// end ;
60795: LD_VAR 0 1
60799: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60800: LD_INT 0
60802: PPUSH
60803: PPUSH
60804: PPUSH
// uc_side = 0 ;
60805: LD_ADDR_OWVAR 20
60809: PUSH
60810: LD_INT 0
60812: ST_TO_ADDR
// uc_nation = 0 ;
60813: LD_ADDR_OWVAR 21
60817: PUSH
60818: LD_INT 0
60820: ST_TO_ADDR
// InitHc_All ( ) ;
60821: CALL_OW 584
// InitVc ;
60825: CALL_OW 20
// if mastodonts then
60829: LD_VAR 0 6
60833: IFFALSE 60900
// for i = 1 to mastodonts do
60835: LD_ADDR_VAR 0 11
60839: PUSH
60840: DOUBLE
60841: LD_INT 1
60843: DEC
60844: ST_TO_ADDR
60845: LD_VAR 0 6
60849: PUSH
60850: FOR_TO
60851: IFFALSE 60898
// begin vc_chassis := 31 ;
60853: LD_ADDR_OWVAR 37
60857: PUSH
60858: LD_INT 31
60860: ST_TO_ADDR
// vc_control := control_rider ;
60861: LD_ADDR_OWVAR 38
60865: PUSH
60866: LD_INT 4
60868: ST_TO_ADDR
// animal := CreateVehicle ;
60869: LD_ADDR_VAR 0 12
60873: PUSH
60874: CALL_OW 45
60878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60879: LD_VAR 0 12
60883: PPUSH
60884: LD_VAR 0 8
60888: PPUSH
60889: LD_INT 0
60891: PPUSH
60892: CALL 63028 0 3
// end ;
60896: GO 60850
60898: POP
60899: POP
// if horses then
60900: LD_VAR 0 5
60904: IFFALSE 60971
// for i = 1 to horses do
60906: LD_ADDR_VAR 0 11
60910: PUSH
60911: DOUBLE
60912: LD_INT 1
60914: DEC
60915: ST_TO_ADDR
60916: LD_VAR 0 5
60920: PUSH
60921: FOR_TO
60922: IFFALSE 60969
// begin hc_class := 21 ;
60924: LD_ADDR_OWVAR 28
60928: PUSH
60929: LD_INT 21
60931: ST_TO_ADDR
// hc_gallery :=  ;
60932: LD_ADDR_OWVAR 33
60936: PUSH
60937: LD_STRING 
60939: ST_TO_ADDR
// animal := CreateHuman ;
60940: LD_ADDR_VAR 0 12
60944: PUSH
60945: CALL_OW 44
60949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60950: LD_VAR 0 12
60954: PPUSH
60955: LD_VAR 0 8
60959: PPUSH
60960: LD_INT 0
60962: PPUSH
60963: CALL 63028 0 3
// end ;
60967: GO 60921
60969: POP
60970: POP
// if birds then
60971: LD_VAR 0 1
60975: IFFALSE 61042
// for i = 1 to birds do
60977: LD_ADDR_VAR 0 11
60981: PUSH
60982: DOUBLE
60983: LD_INT 1
60985: DEC
60986: ST_TO_ADDR
60987: LD_VAR 0 1
60991: PUSH
60992: FOR_TO
60993: IFFALSE 61040
// begin hc_class := 18 ;
60995: LD_ADDR_OWVAR 28
60999: PUSH
61000: LD_INT 18
61002: ST_TO_ADDR
// hc_gallery =  ;
61003: LD_ADDR_OWVAR 33
61007: PUSH
61008: LD_STRING 
61010: ST_TO_ADDR
// animal := CreateHuman ;
61011: LD_ADDR_VAR 0 12
61015: PUSH
61016: CALL_OW 44
61020: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61021: LD_VAR 0 12
61025: PPUSH
61026: LD_VAR 0 8
61030: PPUSH
61031: LD_INT 0
61033: PPUSH
61034: CALL 63028 0 3
// end ;
61038: GO 60992
61040: POP
61041: POP
// if tigers then
61042: LD_VAR 0 2
61046: IFFALSE 61130
// for i = 1 to tigers do
61048: LD_ADDR_VAR 0 11
61052: PUSH
61053: DOUBLE
61054: LD_INT 1
61056: DEC
61057: ST_TO_ADDR
61058: LD_VAR 0 2
61062: PUSH
61063: FOR_TO
61064: IFFALSE 61128
// begin hc_class = class_tiger ;
61066: LD_ADDR_OWVAR 28
61070: PUSH
61071: LD_INT 14
61073: ST_TO_ADDR
// hc_gallery =  ;
61074: LD_ADDR_OWVAR 33
61078: PUSH
61079: LD_STRING 
61081: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61082: LD_ADDR_OWVAR 35
61086: PUSH
61087: LD_INT 7
61089: NEG
61090: PPUSH
61091: LD_INT 7
61093: PPUSH
61094: CALL_OW 12
61098: ST_TO_ADDR
// animal := CreateHuman ;
61099: LD_ADDR_VAR 0 12
61103: PUSH
61104: CALL_OW 44
61108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61109: LD_VAR 0 12
61113: PPUSH
61114: LD_VAR 0 8
61118: PPUSH
61119: LD_INT 0
61121: PPUSH
61122: CALL 63028 0 3
// end ;
61126: GO 61063
61128: POP
61129: POP
// if apemans then
61130: LD_VAR 0 3
61134: IFFALSE 61257
// for i = 1 to apemans do
61136: LD_ADDR_VAR 0 11
61140: PUSH
61141: DOUBLE
61142: LD_INT 1
61144: DEC
61145: ST_TO_ADDR
61146: LD_VAR 0 3
61150: PUSH
61151: FOR_TO
61152: IFFALSE 61255
// begin hc_class = class_apeman ;
61154: LD_ADDR_OWVAR 28
61158: PUSH
61159: LD_INT 12
61161: ST_TO_ADDR
// hc_gallery =  ;
61162: LD_ADDR_OWVAR 33
61166: PUSH
61167: LD_STRING 
61169: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61170: LD_ADDR_OWVAR 35
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PPUSH
61179: LD_INT 2
61181: PPUSH
61182: CALL_OW 12
61186: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61187: LD_ADDR_OWVAR 31
61191: PUSH
61192: LD_INT 1
61194: PPUSH
61195: LD_INT 3
61197: PPUSH
61198: CALL_OW 12
61202: PUSH
61203: LD_INT 1
61205: PPUSH
61206: LD_INT 3
61208: PPUSH
61209: CALL_OW 12
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: ST_TO_ADDR
// animal := CreateHuman ;
61226: LD_ADDR_VAR 0 12
61230: PUSH
61231: CALL_OW 44
61235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61236: LD_VAR 0 12
61240: PPUSH
61241: LD_VAR 0 8
61245: PPUSH
61246: LD_INT 0
61248: PPUSH
61249: CALL 63028 0 3
// end ;
61253: GO 61151
61255: POP
61256: POP
// if enchidnas then
61257: LD_VAR 0 4
61261: IFFALSE 61328
// for i = 1 to enchidnas do
61263: LD_ADDR_VAR 0 11
61267: PUSH
61268: DOUBLE
61269: LD_INT 1
61271: DEC
61272: ST_TO_ADDR
61273: LD_VAR 0 4
61277: PUSH
61278: FOR_TO
61279: IFFALSE 61326
// begin hc_class = 13 ;
61281: LD_ADDR_OWVAR 28
61285: PUSH
61286: LD_INT 13
61288: ST_TO_ADDR
// hc_gallery =  ;
61289: LD_ADDR_OWVAR 33
61293: PUSH
61294: LD_STRING 
61296: ST_TO_ADDR
// animal := CreateHuman ;
61297: LD_ADDR_VAR 0 12
61301: PUSH
61302: CALL_OW 44
61306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61307: LD_VAR 0 12
61311: PPUSH
61312: LD_VAR 0 8
61316: PPUSH
61317: LD_INT 0
61319: PPUSH
61320: CALL 63028 0 3
// end ;
61324: GO 61278
61326: POP
61327: POP
// if fishes then
61328: LD_VAR 0 7
61332: IFFALSE 61399
// for i = 1 to fishes do
61334: LD_ADDR_VAR 0 11
61338: PUSH
61339: DOUBLE
61340: LD_INT 1
61342: DEC
61343: ST_TO_ADDR
61344: LD_VAR 0 7
61348: PUSH
61349: FOR_TO
61350: IFFALSE 61397
// begin hc_class = 20 ;
61352: LD_ADDR_OWVAR 28
61356: PUSH
61357: LD_INT 20
61359: ST_TO_ADDR
// hc_gallery =  ;
61360: LD_ADDR_OWVAR 33
61364: PUSH
61365: LD_STRING 
61367: ST_TO_ADDR
// animal := CreateHuman ;
61368: LD_ADDR_VAR 0 12
61372: PUSH
61373: CALL_OW 44
61377: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61378: LD_VAR 0 12
61382: PPUSH
61383: LD_VAR 0 9
61387: PPUSH
61388: LD_INT 0
61390: PPUSH
61391: CALL 63028 0 3
// end ;
61395: GO 61349
61397: POP
61398: POP
// end ;
61399: LD_VAR 0 10
61403: RET
// export function WantHeal ( sci , unit ) ; begin
61404: LD_INT 0
61406: PPUSH
// if GetTaskList ( sci ) > 0 then
61407: LD_VAR 0 1
61411: PPUSH
61412: CALL_OW 437
61416: PUSH
61417: LD_INT 0
61419: GREATER
61420: IFFALSE 61490
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL_OW 437
61431: PUSH
61432: LD_INT 1
61434: ARRAY
61435: PUSH
61436: LD_INT 1
61438: ARRAY
61439: PUSH
61440: LD_STRING l
61442: EQUAL
61443: PUSH
61444: LD_VAR 0 1
61448: PPUSH
61449: CALL_OW 437
61453: PUSH
61454: LD_INT 1
61456: ARRAY
61457: PUSH
61458: LD_INT 4
61460: ARRAY
61461: PUSH
61462: LD_VAR 0 2
61466: EQUAL
61467: AND
61468: IFFALSE 61480
// result := true else
61470: LD_ADDR_VAR 0 3
61474: PUSH
61475: LD_INT 1
61477: ST_TO_ADDR
61478: GO 61488
// result := false ;
61480: LD_ADDR_VAR 0 3
61484: PUSH
61485: LD_INT 0
61487: ST_TO_ADDR
// end else
61488: GO 61498
// result := false ;
61490: LD_ADDR_VAR 0 3
61494: PUSH
61495: LD_INT 0
61497: ST_TO_ADDR
// end ;
61498: LD_VAR 0 3
61502: RET
// export function HealTarget ( sci ) ; begin
61503: LD_INT 0
61505: PPUSH
// if not sci then
61506: LD_VAR 0 1
61510: NOT
61511: IFFALSE 61515
// exit ;
61513: GO 61580
// result := 0 ;
61515: LD_ADDR_VAR 0 2
61519: PUSH
61520: LD_INT 0
61522: ST_TO_ADDR
// if GetTaskList ( sci ) then
61523: LD_VAR 0 1
61527: PPUSH
61528: CALL_OW 437
61532: IFFALSE 61580
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61534: LD_VAR 0 1
61538: PPUSH
61539: CALL_OW 437
61543: PUSH
61544: LD_INT 1
61546: ARRAY
61547: PUSH
61548: LD_INT 1
61550: ARRAY
61551: PUSH
61552: LD_STRING l
61554: EQUAL
61555: IFFALSE 61580
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61557: LD_ADDR_VAR 0 2
61561: PUSH
61562: LD_VAR 0 1
61566: PPUSH
61567: CALL_OW 437
61571: PUSH
61572: LD_INT 1
61574: ARRAY
61575: PUSH
61576: LD_INT 4
61578: ARRAY
61579: ST_TO_ADDR
// end ;
61580: LD_VAR 0 2
61584: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61585: LD_INT 0
61587: PPUSH
61588: PPUSH
61589: PPUSH
61590: PPUSH
// if not base_units then
61591: LD_VAR 0 1
61595: NOT
61596: IFFALSE 61600
// exit ;
61598: GO 61687
// result := false ;
61600: LD_ADDR_VAR 0 2
61604: PUSH
61605: LD_INT 0
61607: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61608: LD_ADDR_VAR 0 5
61612: PUSH
61613: LD_VAR 0 1
61617: PPUSH
61618: LD_INT 21
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PPUSH
61628: CALL_OW 72
61632: ST_TO_ADDR
// if not tmp then
61633: LD_VAR 0 5
61637: NOT
61638: IFFALSE 61642
// exit ;
61640: GO 61687
// for i in tmp do
61642: LD_ADDR_VAR 0 3
61646: PUSH
61647: LD_VAR 0 5
61651: PUSH
61652: FOR_IN
61653: IFFALSE 61685
// begin result := EnemyInRange ( i , 22 ) ;
61655: LD_ADDR_VAR 0 2
61659: PUSH
61660: LD_VAR 0 3
61664: PPUSH
61665: LD_INT 22
61667: PPUSH
61668: CALL 59285 0 2
61672: ST_TO_ADDR
// if result then
61673: LD_VAR 0 2
61677: IFFALSE 61683
// exit ;
61679: POP
61680: POP
61681: GO 61687
// end ;
61683: GO 61652
61685: POP
61686: POP
// end ;
61687: LD_VAR 0 2
61691: RET
// export function FilterByTag ( units , tag ) ; begin
61692: LD_INT 0
61694: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61695: LD_ADDR_VAR 0 3
61699: PUSH
61700: LD_VAR 0 1
61704: PPUSH
61705: LD_INT 120
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PPUSH
61717: CALL_OW 72
61721: ST_TO_ADDR
// end ;
61722: LD_VAR 0 3
61726: RET
// export function IsDriver ( un ) ; begin
61727: LD_INT 0
61729: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61730: LD_ADDR_VAR 0 2
61734: PUSH
61735: LD_VAR 0 1
61739: PUSH
61740: LD_INT 55
61742: PUSH
61743: EMPTY
61744: LIST
61745: PPUSH
61746: CALL_OW 69
61750: IN
61751: ST_TO_ADDR
// end ;
61752: LD_VAR 0 2
61756: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61757: LD_INT 0
61759: PPUSH
61760: PPUSH
// list := [ ] ;
61761: LD_ADDR_VAR 0 5
61765: PUSH
61766: EMPTY
61767: ST_TO_ADDR
// case d of 0 :
61768: LD_VAR 0 3
61772: PUSH
61773: LD_INT 0
61775: DOUBLE
61776: EQUAL
61777: IFTRUE 61781
61779: GO 61914
61781: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61782: LD_ADDR_VAR 0 5
61786: PUSH
61787: LD_VAR 0 1
61791: PUSH
61792: LD_INT 4
61794: MINUS
61795: PUSH
61796: LD_VAR 0 2
61800: PUSH
61801: LD_INT 4
61803: MINUS
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: LIST
61812: PUSH
61813: LD_VAR 0 1
61817: PUSH
61818: LD_INT 3
61820: MINUS
61821: PUSH
61822: LD_VAR 0 2
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: LIST
61834: PUSH
61835: LD_VAR 0 1
61839: PUSH
61840: LD_INT 4
61842: PLUS
61843: PUSH
61844: LD_VAR 0 2
61848: PUSH
61849: LD_INT 4
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: PUSH
61857: LD_VAR 0 1
61861: PUSH
61862: LD_INT 3
61864: PLUS
61865: PUSH
61866: LD_VAR 0 2
61870: PUSH
61871: LD_INT 3
61873: PLUS
61874: PUSH
61875: LD_INT 5
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: LIST
61882: PUSH
61883: LD_VAR 0 1
61887: PUSH
61888: LD_VAR 0 2
61892: PUSH
61893: LD_INT 4
61895: PLUS
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// end ; 1 :
61912: GO 62612
61914: LD_INT 1
61916: DOUBLE
61917: EQUAL
61918: IFTRUE 61922
61920: GO 62055
61922: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61923: LD_ADDR_VAR 0 5
61927: PUSH
61928: LD_VAR 0 1
61932: PUSH
61933: LD_VAR 0 2
61937: PUSH
61938: LD_INT 4
61940: MINUS
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: LIST
61949: PUSH
61950: LD_VAR 0 1
61954: PUSH
61955: LD_INT 3
61957: MINUS
61958: PUSH
61959: LD_VAR 0 2
61963: PUSH
61964: LD_INT 3
61966: MINUS
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: PUSH
61976: LD_VAR 0 1
61980: PUSH
61981: LD_INT 4
61983: MINUS
61984: PUSH
61985: LD_VAR 0 2
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: LIST
61997: PUSH
61998: LD_VAR 0 1
62002: PUSH
62003: LD_VAR 0 2
62007: PUSH
62008: LD_INT 3
62010: PLUS
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: LIST
62019: PUSH
62020: LD_VAR 0 1
62024: PUSH
62025: LD_INT 4
62027: PLUS
62028: PUSH
62029: LD_VAR 0 2
62033: PUSH
62034: LD_INT 4
62036: PLUS
62037: PUSH
62038: LD_INT 5
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: ST_TO_ADDR
// end ; 2 :
62053: GO 62612
62055: LD_INT 2
62057: DOUBLE
62058: EQUAL
62059: IFTRUE 62063
62061: GO 62192
62063: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62064: LD_ADDR_VAR 0 5
62068: PUSH
62069: LD_VAR 0 1
62073: PUSH
62074: LD_VAR 0 2
62078: PUSH
62079: LD_INT 3
62081: MINUS
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: LIST
62090: PUSH
62091: LD_VAR 0 1
62095: PUSH
62096: LD_INT 4
62098: PLUS
62099: PUSH
62100: LD_VAR 0 2
62104: PUSH
62105: LD_INT 4
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: PUSH
62113: LD_VAR 0 1
62117: PUSH
62118: LD_VAR 0 2
62122: PUSH
62123: LD_INT 4
62125: PLUS
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: PUSH
62135: LD_VAR 0 1
62139: PUSH
62140: LD_INT 3
62142: MINUS
62143: PUSH
62144: LD_VAR 0 2
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: PUSH
62157: LD_VAR 0 1
62161: PUSH
62162: LD_INT 4
62164: MINUS
62165: PUSH
62166: LD_VAR 0 2
62170: PUSH
62171: LD_INT 4
62173: MINUS
62174: PUSH
62175: LD_INT 2
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: LIST
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: ST_TO_ADDR
// end ; 3 :
62190: GO 62612
62192: LD_INT 3
62194: DOUBLE
62195: EQUAL
62196: IFTRUE 62200
62198: GO 62333
62200: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62201: LD_ADDR_VAR 0 5
62205: PUSH
62206: LD_VAR 0 1
62210: PUSH
62211: LD_INT 3
62213: PLUS
62214: PUSH
62215: LD_VAR 0 2
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: LIST
62227: PUSH
62228: LD_VAR 0 1
62232: PUSH
62233: LD_INT 4
62235: PLUS
62236: PUSH
62237: LD_VAR 0 2
62241: PUSH
62242: LD_INT 4
62244: PLUS
62245: PUSH
62246: LD_INT 5
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: LIST
62253: PUSH
62254: LD_VAR 0 1
62258: PUSH
62259: LD_INT 4
62261: MINUS
62262: PUSH
62263: LD_VAR 0 2
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: LIST
62275: PUSH
62276: LD_VAR 0 1
62280: PUSH
62281: LD_VAR 0 2
62285: PUSH
62286: LD_INT 4
62288: MINUS
62289: PUSH
62290: LD_INT 3
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: PUSH
62298: LD_VAR 0 1
62302: PUSH
62303: LD_INT 3
62305: MINUS
62306: PUSH
62307: LD_VAR 0 2
62311: PUSH
62312: LD_INT 3
62314: MINUS
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: LIST
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: ST_TO_ADDR
// end ; 4 :
62331: GO 62612
62333: LD_INT 4
62335: DOUBLE
62336: EQUAL
62337: IFTRUE 62341
62339: GO 62474
62341: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62342: LD_ADDR_VAR 0 5
62346: PUSH
62347: LD_VAR 0 1
62351: PUSH
62352: LD_VAR 0 2
62356: PUSH
62357: LD_INT 4
62359: PLUS
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: PUSH
62369: LD_VAR 0 1
62373: PUSH
62374: LD_INT 3
62376: PLUS
62377: PUSH
62378: LD_VAR 0 2
62382: PUSH
62383: LD_INT 3
62385: PLUS
62386: PUSH
62387: LD_INT 5
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: PUSH
62395: LD_VAR 0 1
62399: PUSH
62400: LD_INT 4
62402: PLUS
62403: PUSH
62404: LD_VAR 0 2
62408: PUSH
62409: LD_INT 4
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: PUSH
62417: LD_VAR 0 1
62421: PUSH
62422: LD_VAR 0 2
62426: PUSH
62427: LD_INT 3
62429: MINUS
62430: PUSH
62431: LD_INT 3
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: PUSH
62439: LD_VAR 0 1
62443: PUSH
62444: LD_INT 4
62446: MINUS
62447: PUSH
62448: LD_VAR 0 2
62452: PUSH
62453: LD_INT 4
62455: MINUS
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: ST_TO_ADDR
// end ; 5 :
62472: GO 62612
62474: LD_INT 5
62476: DOUBLE
62477: EQUAL
62478: IFTRUE 62482
62480: GO 62611
62482: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62483: LD_ADDR_VAR 0 5
62487: PUSH
62488: LD_VAR 0 1
62492: PUSH
62493: LD_INT 4
62495: MINUS
62496: PUSH
62497: LD_VAR 0 2
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: PUSH
62510: LD_VAR 0 1
62514: PUSH
62515: LD_VAR 0 2
62519: PUSH
62520: LD_INT 4
62522: MINUS
62523: PUSH
62524: LD_INT 3
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: PUSH
62532: LD_VAR 0 1
62536: PUSH
62537: LD_INT 4
62539: PLUS
62540: PUSH
62541: LD_VAR 0 2
62545: PUSH
62546: LD_INT 4
62548: PLUS
62549: PUSH
62550: LD_INT 5
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: PUSH
62558: LD_VAR 0 1
62562: PUSH
62563: LD_INT 3
62565: PLUS
62566: PUSH
62567: LD_VAR 0 2
62571: PUSH
62572: LD_INT 4
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: PUSH
62580: LD_VAR 0 1
62584: PUSH
62585: LD_VAR 0 2
62589: PUSH
62590: LD_INT 3
62592: PLUS
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// end ; end ;
62609: GO 62612
62611: POP
// result := list ;
62612: LD_ADDR_VAR 0 4
62616: PUSH
62617: LD_VAR 0 5
62621: ST_TO_ADDR
// end ;
62622: LD_VAR 0 4
62626: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62627: LD_INT 0
62629: PPUSH
62630: PPUSH
62631: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62632: LD_VAR 0 1
62636: NOT
62637: PUSH
62638: LD_VAR 0 2
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: LD_INT 4
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: IN
62661: NOT
62662: OR
62663: IFFALSE 62667
// exit ;
62665: GO 62750
// tmp := [ ] ;
62667: LD_ADDR_VAR 0 5
62671: PUSH
62672: EMPTY
62673: ST_TO_ADDR
// for i in units do
62674: LD_ADDR_VAR 0 4
62678: PUSH
62679: LD_VAR 0 1
62683: PUSH
62684: FOR_IN
62685: IFFALSE 62719
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62687: LD_ADDR_VAR 0 5
62691: PUSH
62692: LD_VAR 0 5
62696: PPUSH
62697: LD_VAR 0 4
62701: PPUSH
62702: LD_VAR 0 2
62706: PPUSH
62707: CALL_OW 259
62711: PPUSH
62712: CALL 64123 0 2
62716: ST_TO_ADDR
62717: GO 62684
62719: POP
62720: POP
// if not tmp then
62721: LD_VAR 0 5
62725: NOT
62726: IFFALSE 62730
// exit ;
62728: GO 62750
// result := SortListByListDesc ( units , tmp ) ;
62730: LD_ADDR_VAR 0 3
62734: PUSH
62735: LD_VAR 0 1
62739: PPUSH
62740: LD_VAR 0 5
62744: PPUSH
62745: CALL_OW 77
62749: ST_TO_ADDR
// end ;
62750: LD_VAR 0 3
62754: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62755: LD_INT 0
62757: PPUSH
62758: PPUSH
62759: PPUSH
// result := false ;
62760: LD_ADDR_VAR 0 3
62764: PUSH
62765: LD_INT 0
62767: ST_TO_ADDR
// if not building then
62768: LD_VAR 0 2
62772: NOT
62773: IFFALSE 62777
// exit ;
62775: GO 62915
// x := GetX ( building ) ;
62777: LD_ADDR_VAR 0 4
62781: PUSH
62782: LD_VAR 0 2
62786: PPUSH
62787: CALL_OW 250
62791: ST_TO_ADDR
// y := GetY ( building ) ;
62792: LD_ADDR_VAR 0 5
62796: PUSH
62797: LD_VAR 0 2
62801: PPUSH
62802: CALL_OW 251
62806: ST_TO_ADDR
// if not x or not y then
62807: LD_VAR 0 4
62811: NOT
62812: PUSH
62813: LD_VAR 0 5
62817: NOT
62818: OR
62819: IFFALSE 62823
// exit ;
62821: GO 62915
// if GetTaskList ( unit ) then
62823: LD_VAR 0 1
62827: PPUSH
62828: CALL_OW 437
62832: IFFALSE 62915
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62834: LD_STRING e
62836: PUSH
62837: LD_VAR 0 1
62841: PPUSH
62842: CALL_OW 437
62846: PUSH
62847: LD_INT 1
62849: ARRAY
62850: PUSH
62851: LD_INT 1
62853: ARRAY
62854: EQUAL
62855: PUSH
62856: LD_VAR 0 4
62860: PUSH
62861: LD_VAR 0 1
62865: PPUSH
62866: CALL_OW 437
62870: PUSH
62871: LD_INT 1
62873: ARRAY
62874: PUSH
62875: LD_INT 2
62877: ARRAY
62878: EQUAL
62879: AND
62880: PUSH
62881: LD_VAR 0 5
62885: PUSH
62886: LD_VAR 0 1
62890: PPUSH
62891: CALL_OW 437
62895: PUSH
62896: LD_INT 1
62898: ARRAY
62899: PUSH
62900: LD_INT 3
62902: ARRAY
62903: EQUAL
62904: AND
62905: IFFALSE 62915
// result := true end ;
62907: LD_ADDR_VAR 0 3
62911: PUSH
62912: LD_INT 1
62914: ST_TO_ADDR
// end ;
62915: LD_VAR 0 3
62919: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62920: LD_INT 0
62922: PPUSH
// result := false ;
62923: LD_ADDR_VAR 0 4
62927: PUSH
62928: LD_INT 0
62930: ST_TO_ADDR
// if GetTaskList ( unit ) then
62931: LD_VAR 0 1
62935: PPUSH
62936: CALL_OW 437
62940: IFFALSE 63023
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62942: LD_STRING M
62944: PUSH
62945: LD_VAR 0 1
62949: PPUSH
62950: CALL_OW 437
62954: PUSH
62955: LD_INT 1
62957: ARRAY
62958: PUSH
62959: LD_INT 1
62961: ARRAY
62962: EQUAL
62963: PUSH
62964: LD_VAR 0 2
62968: PUSH
62969: LD_VAR 0 1
62973: PPUSH
62974: CALL_OW 437
62978: PUSH
62979: LD_INT 1
62981: ARRAY
62982: PUSH
62983: LD_INT 2
62985: ARRAY
62986: EQUAL
62987: AND
62988: PUSH
62989: LD_VAR 0 3
62993: PUSH
62994: LD_VAR 0 1
62998: PPUSH
62999: CALL_OW 437
63003: PUSH
63004: LD_INT 1
63006: ARRAY
63007: PUSH
63008: LD_INT 3
63010: ARRAY
63011: EQUAL
63012: AND
63013: IFFALSE 63023
// result := true ;
63015: LD_ADDR_VAR 0 4
63019: PUSH
63020: LD_INT 1
63022: ST_TO_ADDR
// end ; end ;
63023: LD_VAR 0 4
63027: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63028: LD_INT 0
63030: PPUSH
63031: PPUSH
63032: PPUSH
63033: PPUSH
// if not unit or not area then
63034: LD_VAR 0 1
63038: NOT
63039: PUSH
63040: LD_VAR 0 2
63044: NOT
63045: OR
63046: IFFALSE 63050
// exit ;
63048: GO 63226
// tmp := AreaToList ( area , i ) ;
63050: LD_ADDR_VAR 0 6
63054: PUSH
63055: LD_VAR 0 2
63059: PPUSH
63060: LD_VAR 0 5
63064: PPUSH
63065: CALL_OW 517
63069: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63070: LD_ADDR_VAR 0 5
63074: PUSH
63075: DOUBLE
63076: LD_INT 1
63078: DEC
63079: ST_TO_ADDR
63080: LD_VAR 0 6
63084: PUSH
63085: LD_INT 1
63087: ARRAY
63088: PUSH
63089: FOR_TO
63090: IFFALSE 63224
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63092: LD_ADDR_VAR 0 7
63096: PUSH
63097: LD_VAR 0 6
63101: PUSH
63102: LD_INT 1
63104: ARRAY
63105: PUSH
63106: LD_VAR 0 5
63110: ARRAY
63111: PUSH
63112: LD_VAR 0 6
63116: PUSH
63117: LD_INT 2
63119: ARRAY
63120: PUSH
63121: LD_VAR 0 5
63125: ARRAY
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63131: LD_INT 92
63133: PUSH
63134: LD_VAR 0 7
63138: PUSH
63139: LD_INT 1
63141: ARRAY
63142: PUSH
63143: LD_VAR 0 7
63147: PUSH
63148: LD_INT 2
63150: ARRAY
63151: PUSH
63152: LD_INT 2
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: PPUSH
63161: CALL_OW 69
63165: PUSH
63166: LD_INT 0
63168: EQUAL
63169: IFFALSE 63222
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63171: LD_VAR 0 1
63175: PPUSH
63176: LD_VAR 0 7
63180: PUSH
63181: LD_INT 1
63183: ARRAY
63184: PPUSH
63185: LD_VAR 0 7
63189: PUSH
63190: LD_INT 2
63192: ARRAY
63193: PPUSH
63194: LD_VAR 0 3
63198: PPUSH
63199: CALL_OW 48
// result := IsPlaced ( unit ) ;
63203: LD_ADDR_VAR 0 4
63207: PUSH
63208: LD_VAR 0 1
63212: PPUSH
63213: CALL_OW 305
63217: ST_TO_ADDR
// exit ;
63218: POP
63219: POP
63220: GO 63226
// end ; end ;
63222: GO 63089
63224: POP
63225: POP
// end ;
63226: LD_VAR 0 4
63230: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63231: LD_INT 0
63233: PPUSH
63234: PPUSH
63235: PPUSH
// if not side or side > 8 then
63236: LD_VAR 0 1
63240: NOT
63241: PUSH
63242: LD_VAR 0 1
63246: PUSH
63247: LD_INT 8
63249: GREATER
63250: OR
63251: IFFALSE 63255
// exit ;
63253: GO 63442
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63255: LD_ADDR_VAR 0 4
63259: PUSH
63260: LD_INT 22
63262: PUSH
63263: LD_VAR 0 1
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 21
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PPUSH
63286: CALL_OW 69
63290: ST_TO_ADDR
// if not tmp then
63291: LD_VAR 0 4
63295: NOT
63296: IFFALSE 63300
// exit ;
63298: GO 63442
// enable_addtolog := true ;
63300: LD_ADDR_OWVAR 81
63304: PUSH
63305: LD_INT 1
63307: ST_TO_ADDR
// AddToLog ( [ ) ;
63308: LD_STRING [
63310: PPUSH
63311: CALL_OW 561
// for i in tmp do
63315: LD_ADDR_VAR 0 3
63319: PUSH
63320: LD_VAR 0 4
63324: PUSH
63325: FOR_IN
63326: IFFALSE 63433
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63328: LD_STRING [
63330: PUSH
63331: LD_VAR 0 3
63335: PPUSH
63336: CALL_OW 266
63340: STR
63341: PUSH
63342: LD_STRING , 
63344: STR
63345: PUSH
63346: LD_VAR 0 3
63350: PPUSH
63351: CALL_OW 250
63355: STR
63356: PUSH
63357: LD_STRING , 
63359: STR
63360: PUSH
63361: LD_VAR 0 3
63365: PPUSH
63366: CALL_OW 251
63370: STR
63371: PUSH
63372: LD_STRING , 
63374: STR
63375: PUSH
63376: LD_VAR 0 3
63380: PPUSH
63381: CALL_OW 254
63385: STR
63386: PUSH
63387: LD_STRING , 
63389: STR
63390: PUSH
63391: LD_VAR 0 3
63395: PPUSH
63396: LD_INT 1
63398: PPUSH
63399: CALL_OW 268
63403: STR
63404: PUSH
63405: LD_STRING , 
63407: STR
63408: PUSH
63409: LD_VAR 0 3
63413: PPUSH
63414: LD_INT 2
63416: PPUSH
63417: CALL_OW 268
63421: STR
63422: PUSH
63423: LD_STRING ],
63425: STR
63426: PPUSH
63427: CALL_OW 561
// end ;
63431: GO 63325
63433: POP
63434: POP
// AddToLog ( ]; ) ;
63435: LD_STRING ];
63437: PPUSH
63438: CALL_OW 561
// end ;
63442: LD_VAR 0 2
63446: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63447: LD_INT 0
63449: PPUSH
63450: PPUSH
63451: PPUSH
63452: PPUSH
63453: PPUSH
// if not area or not rate or not max then
63454: LD_VAR 0 1
63458: NOT
63459: PUSH
63460: LD_VAR 0 2
63464: NOT
63465: OR
63466: PUSH
63467: LD_VAR 0 4
63471: NOT
63472: OR
63473: IFFALSE 63477
// exit ;
63475: GO 63666
// while 1 do
63477: LD_INT 1
63479: IFFALSE 63666
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63481: LD_ADDR_VAR 0 9
63485: PUSH
63486: LD_VAR 0 1
63490: PPUSH
63491: LD_INT 1
63493: PPUSH
63494: CALL_OW 287
63498: PUSH
63499: LD_INT 10
63501: MUL
63502: ST_TO_ADDR
// r := rate / 10 ;
63503: LD_ADDR_VAR 0 7
63507: PUSH
63508: LD_VAR 0 2
63512: PUSH
63513: LD_INT 10
63515: DIVREAL
63516: ST_TO_ADDR
// time := 1 1$00 ;
63517: LD_ADDR_VAR 0 8
63521: PUSH
63522: LD_INT 2100
63524: ST_TO_ADDR
// if amount < min then
63525: LD_VAR 0 9
63529: PUSH
63530: LD_VAR 0 3
63534: LESS
63535: IFFALSE 63553
// r := r * 2 else
63537: LD_ADDR_VAR 0 7
63541: PUSH
63542: LD_VAR 0 7
63546: PUSH
63547: LD_INT 2
63549: MUL
63550: ST_TO_ADDR
63551: GO 63579
// if amount > max then
63553: LD_VAR 0 9
63557: PUSH
63558: LD_VAR 0 4
63562: GREATER
63563: IFFALSE 63579
// r := r / 2 ;
63565: LD_ADDR_VAR 0 7
63569: PUSH
63570: LD_VAR 0 7
63574: PUSH
63575: LD_INT 2
63577: DIVREAL
63578: ST_TO_ADDR
// time := time / r ;
63579: LD_ADDR_VAR 0 8
63583: PUSH
63584: LD_VAR 0 8
63588: PUSH
63589: LD_VAR 0 7
63593: DIVREAL
63594: ST_TO_ADDR
// if time < 0 then
63595: LD_VAR 0 8
63599: PUSH
63600: LD_INT 0
63602: LESS
63603: IFFALSE 63620
// time := time * - 1 ;
63605: LD_ADDR_VAR 0 8
63609: PUSH
63610: LD_VAR 0 8
63614: PUSH
63615: LD_INT 1
63617: NEG
63618: MUL
63619: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63620: LD_VAR 0 8
63624: PUSH
63625: LD_INT 35
63627: PPUSH
63628: LD_INT 875
63630: PPUSH
63631: CALL_OW 12
63635: PLUS
63636: PPUSH
63637: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63641: LD_INT 1
63643: PPUSH
63644: LD_INT 5
63646: PPUSH
63647: CALL_OW 12
63651: PPUSH
63652: LD_VAR 0 1
63656: PPUSH
63657: LD_INT 1
63659: PPUSH
63660: CALL_OW 55
// end ;
63664: GO 63477
// end ;
63666: LD_VAR 0 5
63670: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63671: LD_INT 0
63673: PPUSH
63674: PPUSH
63675: PPUSH
63676: PPUSH
63677: PPUSH
63678: PPUSH
63679: PPUSH
63680: PPUSH
// if not turrets or not factories then
63681: LD_VAR 0 1
63685: NOT
63686: PUSH
63687: LD_VAR 0 2
63691: NOT
63692: OR
63693: IFFALSE 63697
// exit ;
63695: GO 64004
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63697: LD_ADDR_VAR 0 10
63701: PUSH
63702: LD_INT 5
63704: PUSH
63705: LD_INT 6
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: LD_INT 4
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 3
63724: PUSH
63725: LD_INT 5
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 24
63739: PUSH
63740: LD_INT 25
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 23
63749: PUSH
63750: LD_INT 27
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 42
63763: PUSH
63764: LD_INT 43
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 44
63773: PUSH
63774: LD_INT 46
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 45
63783: PUSH
63784: LD_INT 47
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: LIST
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: ST_TO_ADDR
// result := [ ] ;
63801: LD_ADDR_VAR 0 3
63805: PUSH
63806: EMPTY
63807: ST_TO_ADDR
// for i in turrets do
63808: LD_ADDR_VAR 0 4
63812: PUSH
63813: LD_VAR 0 1
63817: PUSH
63818: FOR_IN
63819: IFFALSE 64002
// begin nat := GetNation ( i ) ;
63821: LD_ADDR_VAR 0 7
63825: PUSH
63826: LD_VAR 0 4
63830: PPUSH
63831: CALL_OW 248
63835: ST_TO_ADDR
// weapon := 0 ;
63836: LD_ADDR_VAR 0 8
63840: PUSH
63841: LD_INT 0
63843: ST_TO_ADDR
// if not nat then
63844: LD_VAR 0 7
63848: NOT
63849: IFFALSE 63853
// continue ;
63851: GO 63818
// for j in list [ nat ] do
63853: LD_ADDR_VAR 0 5
63857: PUSH
63858: LD_VAR 0 10
63862: PUSH
63863: LD_VAR 0 7
63867: ARRAY
63868: PUSH
63869: FOR_IN
63870: IFFALSE 63911
// if GetBWeapon ( i ) = j [ 1 ] then
63872: LD_VAR 0 4
63876: PPUSH
63877: CALL_OW 269
63881: PUSH
63882: LD_VAR 0 5
63886: PUSH
63887: LD_INT 1
63889: ARRAY
63890: EQUAL
63891: IFFALSE 63909
// begin weapon := j [ 2 ] ;
63893: LD_ADDR_VAR 0 8
63897: PUSH
63898: LD_VAR 0 5
63902: PUSH
63903: LD_INT 2
63905: ARRAY
63906: ST_TO_ADDR
// break ;
63907: GO 63911
// end ;
63909: GO 63869
63911: POP
63912: POP
// if not weapon then
63913: LD_VAR 0 8
63917: NOT
63918: IFFALSE 63922
// continue ;
63920: GO 63818
// for k in factories do
63922: LD_ADDR_VAR 0 6
63926: PUSH
63927: LD_VAR 0 2
63931: PUSH
63932: FOR_IN
63933: IFFALSE 63998
// begin weapons := AvailableWeaponList ( k ) ;
63935: LD_ADDR_VAR 0 9
63939: PUSH
63940: LD_VAR 0 6
63944: PPUSH
63945: CALL_OW 478
63949: ST_TO_ADDR
// if not weapons then
63950: LD_VAR 0 9
63954: NOT
63955: IFFALSE 63959
// continue ;
63957: GO 63932
// if weapon in weapons then
63959: LD_VAR 0 8
63963: PUSH
63964: LD_VAR 0 9
63968: IN
63969: IFFALSE 63996
// begin result := [ i , weapon ] ;
63971: LD_ADDR_VAR 0 3
63975: PUSH
63976: LD_VAR 0 4
63980: PUSH
63981: LD_VAR 0 8
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: ST_TO_ADDR
// exit ;
63990: POP
63991: POP
63992: POP
63993: POP
63994: GO 64004
// end ; end ;
63996: GO 63932
63998: POP
63999: POP
// end ;
64000: GO 63818
64002: POP
64003: POP
// end ;
64004: LD_VAR 0 3
64008: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64009: LD_INT 0
64011: PPUSH
// if not side or side > 8 then
64012: LD_VAR 0 3
64016: NOT
64017: PUSH
64018: LD_VAR 0 3
64022: PUSH
64023: LD_INT 8
64025: GREATER
64026: OR
64027: IFFALSE 64031
// exit ;
64029: GO 64090
// if not range then
64031: LD_VAR 0 4
64035: NOT
64036: IFFALSE 64047
// range := - 12 ;
64038: LD_ADDR_VAR 0 4
64042: PUSH
64043: LD_INT 12
64045: NEG
64046: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64047: LD_VAR 0 1
64051: PPUSH
64052: LD_VAR 0 2
64056: PPUSH
64057: LD_VAR 0 3
64061: PPUSH
64062: LD_VAR 0 4
64066: PPUSH
64067: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64071: LD_VAR 0 1
64075: PPUSH
64076: LD_VAR 0 2
64080: PPUSH
64081: LD_VAR 0 3
64085: PPUSH
64086: CALL_OW 331
// end ;
64090: LD_VAR 0 5
64094: RET
// export function Video ( mode ) ; begin
64095: LD_INT 0
64097: PPUSH
// ingame_video = mode ;
64098: LD_ADDR_OWVAR 52
64102: PUSH
64103: LD_VAR 0 1
64107: ST_TO_ADDR
// interface_hidden = mode ;
64108: LD_ADDR_OWVAR 54
64112: PUSH
64113: LD_VAR 0 1
64117: ST_TO_ADDR
// end ;
64118: LD_VAR 0 2
64122: RET
// export function Join ( array , element ) ; begin
64123: LD_INT 0
64125: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64126: LD_ADDR_VAR 0 3
64130: PUSH
64131: LD_VAR 0 1
64135: PPUSH
64136: LD_VAR 0 1
64140: PUSH
64141: LD_INT 1
64143: PLUS
64144: PPUSH
64145: LD_VAR 0 2
64149: PPUSH
64150: CALL_OW 1
64154: ST_TO_ADDR
// end ;
64155: LD_VAR 0 3
64159: RET
// export function JoinUnion ( array , element ) ; begin
64160: LD_INT 0
64162: PPUSH
// result := array union element ;
64163: LD_ADDR_VAR 0 3
64167: PUSH
64168: LD_VAR 0 1
64172: PUSH
64173: LD_VAR 0 2
64177: UNION
64178: ST_TO_ADDR
// end ;
64179: LD_VAR 0 3
64183: RET
// export function GetBehemoths ( side ) ; begin
64184: LD_INT 0
64186: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64187: LD_ADDR_VAR 0 2
64191: PUSH
64192: LD_INT 22
64194: PUSH
64195: LD_VAR 0 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 31
64206: PUSH
64207: LD_INT 25
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PPUSH
64218: CALL_OW 69
64222: ST_TO_ADDR
// end ;
64223: LD_VAR 0 2
64227: RET
// export function Shuffle ( array ) ; var i , index ; begin
64228: LD_INT 0
64230: PPUSH
64231: PPUSH
64232: PPUSH
// result := [ ] ;
64233: LD_ADDR_VAR 0 2
64237: PUSH
64238: EMPTY
64239: ST_TO_ADDR
// if not array then
64240: LD_VAR 0 1
64244: NOT
64245: IFFALSE 64249
// exit ;
64247: GO 64348
// Randomize ;
64249: CALL_OW 10
// for i = array downto 1 do
64253: LD_ADDR_VAR 0 3
64257: PUSH
64258: DOUBLE
64259: LD_VAR 0 1
64263: INC
64264: ST_TO_ADDR
64265: LD_INT 1
64267: PUSH
64268: FOR_DOWNTO
64269: IFFALSE 64346
// begin index := rand ( 1 , array ) ;
64271: LD_ADDR_VAR 0 4
64275: PUSH
64276: LD_INT 1
64278: PPUSH
64279: LD_VAR 0 1
64283: PPUSH
64284: CALL_OW 12
64288: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64289: LD_ADDR_VAR 0 2
64293: PUSH
64294: LD_VAR 0 2
64298: PPUSH
64299: LD_VAR 0 2
64303: PUSH
64304: LD_INT 1
64306: PLUS
64307: PPUSH
64308: LD_VAR 0 1
64312: PUSH
64313: LD_VAR 0 4
64317: ARRAY
64318: PPUSH
64319: CALL_OW 2
64323: ST_TO_ADDR
// array := Delete ( array , index ) ;
64324: LD_ADDR_VAR 0 1
64328: PUSH
64329: LD_VAR 0 1
64333: PPUSH
64334: LD_VAR 0 4
64338: PPUSH
64339: CALL_OW 3
64343: ST_TO_ADDR
// end ;
64344: GO 64268
64346: POP
64347: POP
// end ;
64348: LD_VAR 0 2
64352: RET
// export function GetBaseMaterials ( base ) ; begin
64353: LD_INT 0
64355: PPUSH
// result := [ 0 , 0 , 0 ] ;
64356: LD_ADDR_VAR 0 2
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: ST_TO_ADDR
// if not base then
64375: LD_VAR 0 1
64379: NOT
64380: IFFALSE 64384
// exit ;
64382: GO 64433
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64384: LD_ADDR_VAR 0 2
64388: PUSH
64389: LD_VAR 0 1
64393: PPUSH
64394: LD_INT 1
64396: PPUSH
64397: CALL_OW 275
64401: PUSH
64402: LD_VAR 0 1
64406: PPUSH
64407: LD_INT 2
64409: PPUSH
64410: CALL_OW 275
64414: PUSH
64415: LD_VAR 0 1
64419: PPUSH
64420: LD_INT 3
64422: PPUSH
64423: CALL_OW 275
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// end ;
64433: LD_VAR 0 2
64437: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64438: LD_INT 0
64440: PPUSH
64441: PPUSH
// result := array ;
64442: LD_ADDR_VAR 0 3
64446: PUSH
64447: LD_VAR 0 1
64451: ST_TO_ADDR
// if size >= result then
64452: LD_VAR 0 2
64456: PUSH
64457: LD_VAR 0 3
64461: GREATEREQUAL
64462: IFFALSE 64466
// exit ;
64464: GO 64516
// if size then
64466: LD_VAR 0 2
64470: IFFALSE 64516
// for i := array downto size do
64472: LD_ADDR_VAR 0 4
64476: PUSH
64477: DOUBLE
64478: LD_VAR 0 1
64482: INC
64483: ST_TO_ADDR
64484: LD_VAR 0 2
64488: PUSH
64489: FOR_DOWNTO
64490: IFFALSE 64514
// result := Delete ( result , result ) ;
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_VAR 0 3
64501: PPUSH
64502: LD_VAR 0 3
64506: PPUSH
64507: CALL_OW 3
64511: ST_TO_ADDR
64512: GO 64489
64514: POP
64515: POP
// end ;
64516: LD_VAR 0 3
64520: RET
// export function ComExit ( unit ) ; var tmp ; begin
64521: LD_INT 0
64523: PPUSH
64524: PPUSH
// if not IsInUnit ( unit ) then
64525: LD_VAR 0 1
64529: PPUSH
64530: CALL_OW 310
64534: NOT
64535: IFFALSE 64539
// exit ;
64537: GO 64599
// tmp := IsInUnit ( unit ) ;
64539: LD_ADDR_VAR 0 3
64543: PUSH
64544: LD_VAR 0 1
64548: PPUSH
64549: CALL_OW 310
64553: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64554: LD_VAR 0 3
64558: PPUSH
64559: CALL_OW 247
64563: PUSH
64564: LD_INT 2
64566: EQUAL
64567: IFFALSE 64580
// ComExitVehicle ( unit ) else
64569: LD_VAR 0 1
64573: PPUSH
64574: CALL_OW 121
64578: GO 64589
// ComExitBuilding ( unit ) ;
64580: LD_VAR 0 1
64584: PPUSH
64585: CALL_OW 122
// result := tmp ;
64589: LD_ADDR_VAR 0 2
64593: PUSH
64594: LD_VAR 0 3
64598: ST_TO_ADDR
// end ;
64599: LD_VAR 0 2
64603: RET
// export function ComExitAll ( units ) ; var i ; begin
64604: LD_INT 0
64606: PPUSH
64607: PPUSH
// if not units then
64608: LD_VAR 0 1
64612: NOT
64613: IFFALSE 64617
// exit ;
64615: GO 64643
// for i in units do
64617: LD_ADDR_VAR 0 3
64621: PUSH
64622: LD_VAR 0 1
64626: PUSH
64627: FOR_IN
64628: IFFALSE 64641
// ComExit ( i ) ;
64630: LD_VAR 0 3
64634: PPUSH
64635: CALL 64521 0 1
64639: GO 64627
64641: POP
64642: POP
// end ;
64643: LD_VAR 0 2
64647: RET
// export function ResetHc ; begin
64648: LD_INT 0
64650: PPUSH
// InitHc ;
64651: CALL_OW 19
// hc_importance := 0 ;
64655: LD_ADDR_OWVAR 32
64659: PUSH
64660: LD_INT 0
64662: ST_TO_ADDR
// end ;
64663: LD_VAR 0 1
64667: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64668: LD_INT 0
64670: PPUSH
64671: PPUSH
64672: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64673: LD_ADDR_VAR 0 6
64677: PUSH
64678: LD_VAR 0 1
64682: PUSH
64683: LD_VAR 0 3
64687: PLUS
64688: PUSH
64689: LD_INT 2
64691: DIV
64692: ST_TO_ADDR
// if _x < 0 then
64693: LD_VAR 0 6
64697: PUSH
64698: LD_INT 0
64700: LESS
64701: IFFALSE 64718
// _x := _x * - 1 ;
64703: LD_ADDR_VAR 0 6
64707: PUSH
64708: LD_VAR 0 6
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: MUL
64717: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64718: LD_ADDR_VAR 0 7
64722: PUSH
64723: LD_VAR 0 2
64727: PUSH
64728: LD_VAR 0 4
64732: PLUS
64733: PUSH
64734: LD_INT 2
64736: DIV
64737: ST_TO_ADDR
// if _y < 0 then
64738: LD_VAR 0 7
64742: PUSH
64743: LD_INT 0
64745: LESS
64746: IFFALSE 64763
// _y := _y * - 1 ;
64748: LD_ADDR_VAR 0 7
64752: PUSH
64753: LD_VAR 0 7
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: MUL
64762: ST_TO_ADDR
// result := [ _x , _y ] ;
64763: LD_ADDR_VAR 0 5
64767: PUSH
64768: LD_VAR 0 6
64772: PUSH
64773: LD_VAR 0 7
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: ST_TO_ADDR
// end ;
64782: LD_VAR 0 5
64786: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64787: LD_INT 0
64789: PPUSH
64790: PPUSH
64791: PPUSH
64792: PPUSH
// task := GetTaskList ( unit ) ;
64793: LD_ADDR_VAR 0 7
64797: PUSH
64798: LD_VAR 0 1
64802: PPUSH
64803: CALL_OW 437
64807: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64808: LD_VAR 0 7
64812: NOT
64813: PUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: LD_VAR 0 2
64823: PPUSH
64824: CALL_OW 308
64828: NOT
64829: AND
64830: IFFALSE 64834
// exit ;
64832: GO 64952
// if IsInArea ( unit , area ) then
64834: LD_VAR 0 1
64838: PPUSH
64839: LD_VAR 0 2
64843: PPUSH
64844: CALL_OW 308
64848: IFFALSE 64866
// begin ComMoveToArea ( unit , goAway ) ;
64850: LD_VAR 0 1
64854: PPUSH
64855: LD_VAR 0 3
64859: PPUSH
64860: CALL_OW 113
// exit ;
64864: GO 64952
// end ; if task [ 1 ] [ 1 ] <> M then
64866: LD_VAR 0 7
64870: PUSH
64871: LD_INT 1
64873: ARRAY
64874: PUSH
64875: LD_INT 1
64877: ARRAY
64878: PUSH
64879: LD_STRING M
64881: NONEQUAL
64882: IFFALSE 64886
// exit ;
64884: GO 64952
// x := task [ 1 ] [ 2 ] ;
64886: LD_ADDR_VAR 0 5
64890: PUSH
64891: LD_VAR 0 7
64895: PUSH
64896: LD_INT 1
64898: ARRAY
64899: PUSH
64900: LD_INT 2
64902: ARRAY
64903: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64904: LD_ADDR_VAR 0 6
64908: PUSH
64909: LD_VAR 0 7
64913: PUSH
64914: LD_INT 1
64916: ARRAY
64917: PUSH
64918: LD_INT 3
64920: ARRAY
64921: ST_TO_ADDR
// if InArea ( x , y , area ) then
64922: LD_VAR 0 5
64926: PPUSH
64927: LD_VAR 0 6
64931: PPUSH
64932: LD_VAR 0 2
64936: PPUSH
64937: CALL_OW 309
64941: IFFALSE 64952
// ComStop ( unit ) ;
64943: LD_VAR 0 1
64947: PPUSH
64948: CALL_OW 141
// end ;
64952: LD_VAR 0 4
64956: RET
// export function Abs ( value ) ; begin
64957: LD_INT 0
64959: PPUSH
// result := value ;
64960: LD_ADDR_VAR 0 2
64964: PUSH
64965: LD_VAR 0 1
64969: ST_TO_ADDR
// if value < 0 then
64970: LD_VAR 0 1
64974: PUSH
64975: LD_INT 0
64977: LESS
64978: IFFALSE 64995
// result := value * - 1 ;
64980: LD_ADDR_VAR 0 2
64984: PUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: MUL
64994: ST_TO_ADDR
// end ;
64995: LD_VAR 0 2
64999: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65000: LD_INT 0
65002: PPUSH
65003: PPUSH
65004: PPUSH
65005: PPUSH
65006: PPUSH
65007: PPUSH
65008: PPUSH
65009: PPUSH
// if not unit or not building then
65010: LD_VAR 0 1
65014: NOT
65015: PUSH
65016: LD_VAR 0 2
65020: NOT
65021: OR
65022: IFFALSE 65026
// exit ;
65024: GO 65252
// x := GetX ( building ) ;
65026: LD_ADDR_VAR 0 4
65030: PUSH
65031: LD_VAR 0 2
65035: PPUSH
65036: CALL_OW 250
65040: ST_TO_ADDR
// y := GetY ( building ) ;
65041: LD_ADDR_VAR 0 6
65045: PUSH
65046: LD_VAR 0 2
65050: PPUSH
65051: CALL_OW 251
65055: ST_TO_ADDR
// d := GetDir ( building ) ;
65056: LD_ADDR_VAR 0 8
65060: PUSH
65061: LD_VAR 0 2
65065: PPUSH
65066: CALL_OW 254
65070: ST_TO_ADDR
// r := 4 ;
65071: LD_ADDR_VAR 0 9
65075: PUSH
65076: LD_INT 4
65078: ST_TO_ADDR
// for i := 1 to 5 do
65079: LD_ADDR_VAR 0 10
65083: PUSH
65084: DOUBLE
65085: LD_INT 1
65087: DEC
65088: ST_TO_ADDR
65089: LD_INT 5
65091: PUSH
65092: FOR_TO
65093: IFFALSE 65250
// begin _x := ShiftX ( x , d , r + i ) ;
65095: LD_ADDR_VAR 0 5
65099: PUSH
65100: LD_VAR 0 4
65104: PPUSH
65105: LD_VAR 0 8
65109: PPUSH
65110: LD_VAR 0 9
65114: PUSH
65115: LD_VAR 0 10
65119: PLUS
65120: PPUSH
65121: CALL_OW 272
65125: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65126: LD_ADDR_VAR 0 7
65130: PUSH
65131: LD_VAR 0 6
65135: PPUSH
65136: LD_VAR 0 8
65140: PPUSH
65141: LD_VAR 0 9
65145: PUSH
65146: LD_VAR 0 10
65150: PLUS
65151: PPUSH
65152: CALL_OW 273
65156: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65157: LD_VAR 0 5
65161: PPUSH
65162: LD_VAR 0 7
65166: PPUSH
65167: CALL_OW 488
65171: PUSH
65172: LD_VAR 0 5
65176: PPUSH
65177: LD_VAR 0 7
65181: PPUSH
65182: CALL_OW 428
65186: PPUSH
65187: CALL_OW 247
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: LD_INT 2
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: IN
65202: NOT
65203: AND
65204: IFFALSE 65248
// begin ComMoveXY ( unit , _x , _y ) ;
65206: LD_VAR 0 1
65210: PPUSH
65211: LD_VAR 0 5
65215: PPUSH
65216: LD_VAR 0 7
65220: PPUSH
65221: CALL_OW 111
// result := [ _x , _y ] ;
65225: LD_ADDR_VAR 0 3
65229: PUSH
65230: LD_VAR 0 5
65234: PUSH
65235: LD_VAR 0 7
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: ST_TO_ADDR
// exit ;
65244: POP
65245: POP
65246: GO 65252
// end ; end ;
65248: GO 65092
65250: POP
65251: POP
// end ;
65252: LD_VAR 0 3
65256: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65257: LD_INT 0
65259: PPUSH
65260: PPUSH
65261: PPUSH
// result := 0 ;
65262: LD_ADDR_VAR 0 3
65266: PUSH
65267: LD_INT 0
65269: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65270: LD_VAR 0 1
65274: PUSH
65275: LD_INT 0
65277: LESS
65278: PUSH
65279: LD_VAR 0 1
65283: PUSH
65284: LD_INT 8
65286: GREATER
65287: OR
65288: PUSH
65289: LD_VAR 0 2
65293: PUSH
65294: LD_INT 0
65296: LESS
65297: OR
65298: PUSH
65299: LD_VAR 0 2
65303: PUSH
65304: LD_INT 8
65306: GREATER
65307: OR
65308: IFFALSE 65312
// exit ;
65310: GO 65387
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65312: LD_ADDR_VAR 0 4
65316: PUSH
65317: LD_INT 22
65319: PUSH
65320: LD_VAR 0 2
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PPUSH
65329: CALL_OW 69
65333: PUSH
65334: FOR_IN
65335: IFFALSE 65385
// begin un := UnitShoot ( i ) ;
65337: LD_ADDR_VAR 0 5
65341: PUSH
65342: LD_VAR 0 4
65346: PPUSH
65347: CALL_OW 504
65351: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65352: LD_VAR 0 5
65356: PPUSH
65357: CALL_OW 255
65361: PUSH
65362: LD_VAR 0 1
65366: EQUAL
65367: IFFALSE 65383
// begin result := un ;
65369: LD_ADDR_VAR 0 3
65373: PUSH
65374: LD_VAR 0 5
65378: ST_TO_ADDR
// exit ;
65379: POP
65380: POP
65381: GO 65387
// end ; end ;
65383: GO 65334
65385: POP
65386: POP
// end ;
65387: LD_VAR 0 3
65391: RET
// export function GetCargoBay ( units ) ; begin
65392: LD_INT 0
65394: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65395: LD_ADDR_VAR 0 2
65399: PUSH
65400: LD_VAR 0 1
65404: PPUSH
65405: LD_INT 2
65407: PUSH
65408: LD_INT 34
65410: PUSH
65411: LD_INT 12
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 34
65420: PUSH
65421: LD_INT 51
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 34
65430: PUSH
65431: LD_INT 32
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 34
65440: PUSH
65441: LD_INT 89
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: PPUSH
65455: CALL_OW 72
65459: ST_TO_ADDR
// end ;
65460: LD_VAR 0 2
65464: RET
// export function Negate ( value ) ; begin
65465: LD_INT 0
65467: PPUSH
// result := not value ;
65468: LD_ADDR_VAR 0 2
65472: PUSH
65473: LD_VAR 0 1
65477: NOT
65478: ST_TO_ADDR
// end ;
65479: LD_VAR 0 2
65483: RET
// export function Inc ( value ) ; begin
65484: LD_INT 0
65486: PPUSH
// result := value + 1 ;
65487: LD_ADDR_VAR 0 2
65491: PUSH
65492: LD_VAR 0 1
65496: PUSH
65497: LD_INT 1
65499: PLUS
65500: ST_TO_ADDR
// end ;
65501: LD_VAR 0 2
65505: RET
// export function Dec ( value ) ; begin
65506: LD_INT 0
65508: PPUSH
// result := value - 1 ;
65509: LD_ADDR_VAR 0 2
65513: PUSH
65514: LD_VAR 0 1
65518: PUSH
65519: LD_INT 1
65521: MINUS
65522: ST_TO_ADDR
// end ;
65523: LD_VAR 0 2
65527: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65528: LD_INT 0
65530: PPUSH
65531: PPUSH
65532: PPUSH
65533: PPUSH
65534: PPUSH
65535: PPUSH
65536: PPUSH
65537: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65538: LD_VAR 0 1
65542: PPUSH
65543: LD_VAR 0 2
65547: PPUSH
65548: CALL_OW 488
65552: NOT
65553: PUSH
65554: LD_VAR 0 3
65558: PPUSH
65559: LD_VAR 0 4
65563: PPUSH
65564: CALL_OW 488
65568: NOT
65569: OR
65570: IFFALSE 65583
// begin result := - 1 ;
65572: LD_ADDR_VAR 0 5
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: ST_TO_ADDR
// exit ;
65581: GO 65818
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65583: LD_ADDR_VAR 0 12
65587: PUSH
65588: LD_VAR 0 1
65592: PPUSH
65593: LD_VAR 0 2
65597: PPUSH
65598: LD_VAR 0 3
65602: PPUSH
65603: LD_VAR 0 4
65607: PPUSH
65608: CALL 64668 0 4
65612: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65613: LD_ADDR_VAR 0 11
65617: PUSH
65618: LD_VAR 0 1
65622: PPUSH
65623: LD_VAR 0 2
65627: PPUSH
65628: LD_VAR 0 12
65632: PUSH
65633: LD_INT 1
65635: ARRAY
65636: PPUSH
65637: LD_VAR 0 12
65641: PUSH
65642: LD_INT 2
65644: ARRAY
65645: PPUSH
65646: CALL_OW 298
65650: ST_TO_ADDR
// distance := 9999 ;
65651: LD_ADDR_VAR 0 10
65655: PUSH
65656: LD_INT 9999
65658: ST_TO_ADDR
// for i := 0 to 5 do
65659: LD_ADDR_VAR 0 6
65663: PUSH
65664: DOUBLE
65665: LD_INT 0
65667: DEC
65668: ST_TO_ADDR
65669: LD_INT 5
65671: PUSH
65672: FOR_TO
65673: IFFALSE 65816
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65675: LD_ADDR_VAR 0 7
65679: PUSH
65680: LD_VAR 0 1
65684: PPUSH
65685: LD_VAR 0 6
65689: PPUSH
65690: LD_VAR 0 11
65694: PPUSH
65695: CALL_OW 272
65699: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65700: LD_ADDR_VAR 0 8
65704: PUSH
65705: LD_VAR 0 2
65709: PPUSH
65710: LD_VAR 0 6
65714: PPUSH
65715: LD_VAR 0 11
65719: PPUSH
65720: CALL_OW 273
65724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65725: LD_VAR 0 7
65729: PPUSH
65730: LD_VAR 0 8
65734: PPUSH
65735: CALL_OW 488
65739: NOT
65740: IFFALSE 65744
// continue ;
65742: GO 65672
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65744: LD_ADDR_VAR 0 9
65748: PUSH
65749: LD_VAR 0 12
65753: PUSH
65754: LD_INT 1
65756: ARRAY
65757: PPUSH
65758: LD_VAR 0 12
65762: PUSH
65763: LD_INT 2
65765: ARRAY
65766: PPUSH
65767: LD_VAR 0 7
65771: PPUSH
65772: LD_VAR 0 8
65776: PPUSH
65777: CALL_OW 298
65781: ST_TO_ADDR
// if tmp < distance then
65782: LD_VAR 0 9
65786: PUSH
65787: LD_VAR 0 10
65791: LESS
65792: IFFALSE 65814
// begin result := i ;
65794: LD_ADDR_VAR 0 5
65798: PUSH
65799: LD_VAR 0 6
65803: ST_TO_ADDR
// distance := tmp ;
65804: LD_ADDR_VAR 0 10
65808: PUSH
65809: LD_VAR 0 9
65813: ST_TO_ADDR
// end ; end ;
65814: GO 65672
65816: POP
65817: POP
// end ;
65818: LD_VAR 0 5
65822: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65823: LD_INT 0
65825: PPUSH
65826: PPUSH
// if not driver or not IsInUnit ( driver ) then
65827: LD_VAR 0 1
65831: NOT
65832: PUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: CALL_OW 310
65842: NOT
65843: OR
65844: IFFALSE 65848
// exit ;
65846: GO 65938
// vehicle := IsInUnit ( driver ) ;
65848: LD_ADDR_VAR 0 3
65852: PUSH
65853: LD_VAR 0 1
65857: PPUSH
65858: CALL_OW 310
65862: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65863: LD_VAR 0 1
65867: PPUSH
65868: LD_STRING \
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 0
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: PUSH
65898: LD_STRING E
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: LD_VAR 0 3
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PPUSH
65934: CALL_OW 446
// end ;
65938: LD_VAR 0 2
65942: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65943: LD_INT 0
65945: PPUSH
65946: PPUSH
// if not driver or not IsInUnit ( driver ) then
65947: LD_VAR 0 1
65951: NOT
65952: PUSH
65953: LD_VAR 0 1
65957: PPUSH
65958: CALL_OW 310
65962: NOT
65963: OR
65964: IFFALSE 65968
// exit ;
65966: GO 66058
// vehicle := IsInUnit ( driver ) ;
65968: LD_ADDR_VAR 0 3
65972: PUSH
65973: LD_VAR 0 1
65977: PPUSH
65978: CALL_OW 310
65982: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65983: LD_VAR 0 1
65987: PPUSH
65988: LD_STRING \
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: PUSH
66018: LD_STRING E
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: LD_VAR 0 3
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PPUSH
66054: CALL_OW 447
// end ;
66058: LD_VAR 0 2
66062: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66063: LD_INT 0
66065: PPUSH
66066: PPUSH
66067: PPUSH
// tmp := [ ] ;
66068: LD_ADDR_VAR 0 5
66072: PUSH
66073: EMPTY
66074: ST_TO_ADDR
// for i in units do
66075: LD_ADDR_VAR 0 4
66079: PUSH
66080: LD_VAR 0 1
66084: PUSH
66085: FOR_IN
66086: IFFALSE 66124
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66088: LD_ADDR_VAR 0 5
66092: PUSH
66093: LD_VAR 0 5
66097: PPUSH
66098: LD_VAR 0 5
66102: PUSH
66103: LD_INT 1
66105: PLUS
66106: PPUSH
66107: LD_VAR 0 4
66111: PPUSH
66112: CALL_OW 256
66116: PPUSH
66117: CALL_OW 2
66121: ST_TO_ADDR
66122: GO 66085
66124: POP
66125: POP
// if not tmp then
66126: LD_VAR 0 5
66130: NOT
66131: IFFALSE 66135
// exit ;
66133: GO 66183
// if asc then
66135: LD_VAR 0 2
66139: IFFALSE 66163
// result := SortListByListAsc ( units , tmp ) else
66141: LD_ADDR_VAR 0 3
66145: PUSH
66146: LD_VAR 0 1
66150: PPUSH
66151: LD_VAR 0 5
66155: PPUSH
66156: CALL_OW 76
66160: ST_TO_ADDR
66161: GO 66183
// result := SortListByListDesc ( units , tmp ) ;
66163: LD_ADDR_VAR 0 3
66167: PUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: LD_VAR 0 5
66177: PPUSH
66178: CALL_OW 77
66182: ST_TO_ADDR
// end ;
66183: LD_VAR 0 3
66187: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66188: LD_INT 0
66190: PPUSH
66191: PPUSH
// task := GetTaskList ( mech ) ;
66192: LD_ADDR_VAR 0 4
66196: PUSH
66197: LD_VAR 0 1
66201: PPUSH
66202: CALL_OW 437
66206: ST_TO_ADDR
// if not task then
66207: LD_VAR 0 4
66211: NOT
66212: IFFALSE 66216
// exit ;
66214: GO 66258
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66216: LD_ADDR_VAR 0 3
66220: PUSH
66221: LD_VAR 0 4
66225: PUSH
66226: LD_INT 1
66228: ARRAY
66229: PUSH
66230: LD_INT 1
66232: ARRAY
66233: PUSH
66234: LD_STRING r
66236: EQUAL
66237: PUSH
66238: LD_VAR 0 4
66242: PUSH
66243: LD_INT 1
66245: ARRAY
66246: PUSH
66247: LD_INT 4
66249: ARRAY
66250: PUSH
66251: LD_VAR 0 2
66255: EQUAL
66256: AND
66257: ST_TO_ADDR
// end ;
66258: LD_VAR 0 3
66262: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66263: LD_INT 0
66265: PPUSH
// SetDir ( unit , d ) ;
66266: LD_VAR 0 1
66270: PPUSH
66271: LD_VAR 0 4
66275: PPUSH
66276: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66280: LD_VAR 0 1
66284: PPUSH
66285: LD_VAR 0 2
66289: PPUSH
66290: LD_VAR 0 3
66294: PPUSH
66295: LD_VAR 0 5
66299: PPUSH
66300: CALL_OW 48
// end ;
66304: LD_VAR 0 6
66308: RET
// export function ToNaturalNumber ( number ) ; begin
66309: LD_INT 0
66311: PPUSH
// result := number div 1 ;
66312: LD_ADDR_VAR 0 2
66316: PUSH
66317: LD_VAR 0 1
66321: PUSH
66322: LD_INT 1
66324: DIV
66325: ST_TO_ADDR
// if number < 0 then
66326: LD_VAR 0 1
66330: PUSH
66331: LD_INT 0
66333: LESS
66334: IFFALSE 66344
// result := 0 ;
66336: LD_ADDR_VAR 0 2
66340: PUSH
66341: LD_INT 0
66343: ST_TO_ADDR
// end ;
66344: LD_VAR 0 2
66348: RET
// export function SortByClass ( units , class ) ; var un ; begin
66349: LD_INT 0
66351: PPUSH
66352: PPUSH
// if not units or not class then
66353: LD_VAR 0 1
66357: NOT
66358: PUSH
66359: LD_VAR 0 2
66363: NOT
66364: OR
66365: IFFALSE 66369
// exit ;
66367: GO 66464
// result := [ ] ;
66369: LD_ADDR_VAR 0 3
66373: PUSH
66374: EMPTY
66375: ST_TO_ADDR
// for un in units do
66376: LD_ADDR_VAR 0 4
66380: PUSH
66381: LD_VAR 0 1
66385: PUSH
66386: FOR_IN
66387: IFFALSE 66462
// if GetClass ( un ) = class then
66389: LD_VAR 0 4
66393: PPUSH
66394: CALL_OW 257
66398: PUSH
66399: LD_VAR 0 2
66403: EQUAL
66404: IFFALSE 66431
// result := Insert ( result , 1 , un ) else
66406: LD_ADDR_VAR 0 3
66410: PUSH
66411: LD_VAR 0 3
66415: PPUSH
66416: LD_INT 1
66418: PPUSH
66419: LD_VAR 0 4
66423: PPUSH
66424: CALL_OW 2
66428: ST_TO_ADDR
66429: GO 66460
// result := Replace ( result , result + 1 , un ) ;
66431: LD_ADDR_VAR 0 3
66435: PUSH
66436: LD_VAR 0 3
66440: PPUSH
66441: LD_VAR 0 3
66445: PUSH
66446: LD_INT 1
66448: PLUS
66449: PPUSH
66450: LD_VAR 0 4
66454: PPUSH
66455: CALL_OW 1
66459: ST_TO_ADDR
66460: GO 66386
66462: POP
66463: POP
// end ;
66464: LD_VAR 0 3
66468: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66469: LD_INT 0
66471: PPUSH
66472: PPUSH
66473: PPUSH
66474: PPUSH
66475: PPUSH
66476: PPUSH
66477: PPUSH
// result := [ ] ;
66478: LD_ADDR_VAR 0 4
66482: PUSH
66483: EMPTY
66484: ST_TO_ADDR
// if x - r < 0 then
66485: LD_VAR 0 1
66489: PUSH
66490: LD_VAR 0 3
66494: MINUS
66495: PUSH
66496: LD_INT 0
66498: LESS
66499: IFFALSE 66511
// min_x := 0 else
66501: LD_ADDR_VAR 0 8
66505: PUSH
66506: LD_INT 0
66508: ST_TO_ADDR
66509: GO 66527
// min_x := x - r ;
66511: LD_ADDR_VAR 0 8
66515: PUSH
66516: LD_VAR 0 1
66520: PUSH
66521: LD_VAR 0 3
66525: MINUS
66526: ST_TO_ADDR
// if y - r < 0 then
66527: LD_VAR 0 2
66531: PUSH
66532: LD_VAR 0 3
66536: MINUS
66537: PUSH
66538: LD_INT 0
66540: LESS
66541: IFFALSE 66553
// min_y := 0 else
66543: LD_ADDR_VAR 0 7
66547: PUSH
66548: LD_INT 0
66550: ST_TO_ADDR
66551: GO 66569
// min_y := y - r ;
66553: LD_ADDR_VAR 0 7
66557: PUSH
66558: LD_VAR 0 2
66562: PUSH
66563: LD_VAR 0 3
66567: MINUS
66568: ST_TO_ADDR
// max_x := x + r ;
66569: LD_ADDR_VAR 0 9
66573: PUSH
66574: LD_VAR 0 1
66578: PUSH
66579: LD_VAR 0 3
66583: PLUS
66584: ST_TO_ADDR
// max_y := y + r ;
66585: LD_ADDR_VAR 0 10
66589: PUSH
66590: LD_VAR 0 2
66594: PUSH
66595: LD_VAR 0 3
66599: PLUS
66600: ST_TO_ADDR
// for _x = min_x to max_x do
66601: LD_ADDR_VAR 0 5
66605: PUSH
66606: DOUBLE
66607: LD_VAR 0 8
66611: DEC
66612: ST_TO_ADDR
66613: LD_VAR 0 9
66617: PUSH
66618: FOR_TO
66619: IFFALSE 66720
// for _y = min_y to max_y do
66621: LD_ADDR_VAR 0 6
66625: PUSH
66626: DOUBLE
66627: LD_VAR 0 7
66631: DEC
66632: ST_TO_ADDR
66633: LD_VAR 0 10
66637: PUSH
66638: FOR_TO
66639: IFFALSE 66716
// begin if not ValidHex ( _x , _y ) then
66641: LD_VAR 0 5
66645: PPUSH
66646: LD_VAR 0 6
66650: PPUSH
66651: CALL_OW 488
66655: NOT
66656: IFFALSE 66660
// continue ;
66658: GO 66638
// if GetResourceTypeXY ( _x , _y ) then
66660: LD_VAR 0 5
66664: PPUSH
66665: LD_VAR 0 6
66669: PPUSH
66670: CALL_OW 283
66674: IFFALSE 66714
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66676: LD_ADDR_VAR 0 4
66680: PUSH
66681: LD_VAR 0 4
66685: PPUSH
66686: LD_VAR 0 4
66690: PUSH
66691: LD_INT 1
66693: PLUS
66694: PPUSH
66695: LD_VAR 0 5
66699: PUSH
66700: LD_VAR 0 6
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PPUSH
66709: CALL_OW 1
66713: ST_TO_ADDR
// end ;
66714: GO 66638
66716: POP
66717: POP
66718: GO 66618
66720: POP
66721: POP
// end ;
66722: LD_VAR 0 4
66726: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66727: LD_INT 0
66729: PPUSH
66730: PPUSH
66731: PPUSH
66732: PPUSH
66733: PPUSH
66734: PPUSH
66735: PPUSH
66736: PPUSH
// if not units then
66737: LD_VAR 0 1
66741: NOT
66742: IFFALSE 66746
// exit ;
66744: GO 67274
// result := UnitFilter ( units , [ f_ok ] ) ;
66746: LD_ADDR_VAR 0 3
66750: PUSH
66751: LD_VAR 0 1
66755: PPUSH
66756: LD_INT 50
66758: PUSH
66759: EMPTY
66760: LIST
66761: PPUSH
66762: CALL_OW 72
66766: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66767: LD_ADDR_VAR 0 8
66771: PUSH
66772: LD_VAR 0 1
66776: PUSH
66777: LD_INT 1
66779: ARRAY
66780: PPUSH
66781: CALL_OW 255
66785: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66786: LD_ADDR_VAR 0 10
66790: PUSH
66791: LD_INT 29
66793: PUSH
66794: LD_INT 91
66796: PUSH
66797: LD_INT 49
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: ST_TO_ADDR
// if not result then
66805: LD_VAR 0 3
66809: NOT
66810: IFFALSE 66814
// exit ;
66812: GO 67274
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66814: LD_ADDR_VAR 0 5
66818: PUSH
66819: LD_INT 81
66821: PUSH
66822: LD_VAR 0 8
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PPUSH
66831: CALL_OW 69
66835: ST_TO_ADDR
// for i in result do
66836: LD_ADDR_VAR 0 4
66840: PUSH
66841: LD_VAR 0 3
66845: PUSH
66846: FOR_IN
66847: IFFALSE 67272
// begin tag := GetTag ( i ) + 1 ;
66849: LD_ADDR_VAR 0 9
66853: PUSH
66854: LD_VAR 0 4
66858: PPUSH
66859: CALL_OW 110
66863: PUSH
66864: LD_INT 1
66866: PLUS
66867: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
66868: LD_ADDR_VAR 0 7
66872: PUSH
66873: LD_VAR 0 4
66877: PPUSH
66878: CALL_OW 250
66882: PPUSH
66883: LD_VAR 0 4
66887: PPUSH
66888: CALL_OW 251
66892: PPUSH
66893: LD_INT 4
66895: PPUSH
66896: CALL 66469 0 3
66900: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
66901: LD_VAR 0 4
66905: PPUSH
66906: CALL_OW 247
66910: PUSH
66911: LD_INT 2
66913: EQUAL
66914: PUSH
66915: LD_VAR 0 7
66919: PUSH
66920: LD_INT 2
66922: GREATER
66923: AND
66924: PUSH
66925: LD_VAR 0 4
66929: PPUSH
66930: CALL_OW 264
66934: PUSH
66935: LD_VAR 0 10
66939: IN
66940: NOT
66941: AND
66942: IFFALSE 66981
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66944: LD_VAR 0 4
66948: PPUSH
66949: LD_VAR 0 7
66953: PUSH
66954: LD_INT 1
66956: ARRAY
66957: PUSH
66958: LD_INT 1
66960: ARRAY
66961: PPUSH
66962: LD_VAR 0 7
66966: PUSH
66967: LD_INT 1
66969: ARRAY
66970: PUSH
66971: LD_INT 2
66973: ARRAY
66974: PPUSH
66975: CALL_OW 116
66979: GO 67270
// if path > tag then
66981: LD_VAR 0 2
66985: PUSH
66986: LD_VAR 0 9
66990: GREATER
66991: IFFALSE 67199
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66993: LD_ADDR_VAR 0 6
66997: PUSH
66998: LD_VAR 0 5
67002: PPUSH
67003: LD_INT 91
67005: PUSH
67006: LD_VAR 0 4
67010: PUSH
67011: LD_INT 8
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: PPUSH
67019: CALL_OW 72
67023: ST_TO_ADDR
// if nearEnemy then
67024: LD_VAR 0 6
67028: IFFALSE 67097
// begin if GetWeapon ( i ) = ru_time_lapser then
67030: LD_VAR 0 4
67034: PPUSH
67035: CALL_OW 264
67039: PUSH
67040: LD_INT 49
67042: EQUAL
67043: IFFALSE 67071
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67045: LD_VAR 0 4
67049: PPUSH
67050: LD_VAR 0 6
67054: PPUSH
67055: LD_VAR 0 4
67059: PPUSH
67060: CALL_OW 74
67064: PPUSH
67065: CALL_OW 112
67069: GO 67095
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67071: LD_VAR 0 4
67075: PPUSH
67076: LD_VAR 0 6
67080: PPUSH
67081: LD_VAR 0 4
67085: PPUSH
67086: CALL_OW 74
67090: PPUSH
67091: CALL 68345 0 2
// end else
67095: GO 67197
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67097: LD_VAR 0 4
67101: PPUSH
67102: LD_VAR 0 2
67106: PUSH
67107: LD_VAR 0 9
67111: ARRAY
67112: PUSH
67113: LD_INT 1
67115: ARRAY
67116: PPUSH
67117: LD_VAR 0 2
67121: PUSH
67122: LD_VAR 0 9
67126: ARRAY
67127: PUSH
67128: LD_INT 2
67130: ARRAY
67131: PPUSH
67132: CALL_OW 297
67136: PUSH
67137: LD_INT 6
67139: GREATER
67140: IFFALSE 67183
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67142: LD_VAR 0 4
67146: PPUSH
67147: LD_VAR 0 2
67151: PUSH
67152: LD_VAR 0 9
67156: ARRAY
67157: PUSH
67158: LD_INT 1
67160: ARRAY
67161: PPUSH
67162: LD_VAR 0 2
67166: PUSH
67167: LD_VAR 0 9
67171: ARRAY
67172: PUSH
67173: LD_INT 2
67175: ARRAY
67176: PPUSH
67177: CALL_OW 114
67181: GO 67197
// SetTag ( i , tag ) ;
67183: LD_VAR 0 4
67187: PPUSH
67188: LD_VAR 0 9
67192: PPUSH
67193: CALL_OW 109
// end else
67197: GO 67270
// if enemy then
67199: LD_VAR 0 5
67203: IFFALSE 67270
// begin if GetWeapon ( i ) = ru_time_lapser then
67205: LD_VAR 0 4
67209: PPUSH
67210: CALL_OW 264
67214: PUSH
67215: LD_INT 49
67217: EQUAL
67218: IFFALSE 67246
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67220: LD_VAR 0 4
67224: PPUSH
67225: LD_VAR 0 5
67229: PPUSH
67230: LD_VAR 0 4
67234: PPUSH
67235: CALL_OW 74
67239: PPUSH
67240: CALL_OW 112
67244: GO 67270
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67246: LD_VAR 0 4
67250: PPUSH
67251: LD_VAR 0 5
67255: PPUSH
67256: LD_VAR 0 4
67260: PPUSH
67261: CALL_OW 74
67265: PPUSH
67266: CALL 68345 0 2
// end ; end ;
67270: GO 66846
67272: POP
67273: POP
// end ;
67274: LD_VAR 0 3
67278: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67279: LD_INT 0
67281: PPUSH
67282: PPUSH
67283: PPUSH
// if not unit or IsInUnit ( unit ) then
67284: LD_VAR 0 1
67288: NOT
67289: PUSH
67290: LD_VAR 0 1
67294: PPUSH
67295: CALL_OW 310
67299: OR
67300: IFFALSE 67304
// exit ;
67302: GO 67395
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67304: LD_ADDR_VAR 0 4
67308: PUSH
67309: LD_VAR 0 1
67313: PPUSH
67314: CALL_OW 250
67318: PPUSH
67319: LD_VAR 0 2
67323: PPUSH
67324: LD_INT 1
67326: PPUSH
67327: CALL_OW 272
67331: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67332: LD_ADDR_VAR 0 5
67336: PUSH
67337: LD_VAR 0 1
67341: PPUSH
67342: CALL_OW 251
67346: PPUSH
67347: LD_VAR 0 2
67351: PPUSH
67352: LD_INT 1
67354: PPUSH
67355: CALL_OW 273
67359: ST_TO_ADDR
// if ValidHex ( x , y ) then
67360: LD_VAR 0 4
67364: PPUSH
67365: LD_VAR 0 5
67369: PPUSH
67370: CALL_OW 488
67374: IFFALSE 67395
// ComTurnXY ( unit , x , y ) ;
67376: LD_VAR 0 1
67380: PPUSH
67381: LD_VAR 0 4
67385: PPUSH
67386: LD_VAR 0 5
67390: PPUSH
67391: CALL_OW 118
// end ;
67395: LD_VAR 0 3
67399: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67400: LD_INT 0
67402: PPUSH
67403: PPUSH
// result := false ;
67404: LD_ADDR_VAR 0 3
67408: PUSH
67409: LD_INT 0
67411: ST_TO_ADDR
// if not units then
67412: LD_VAR 0 2
67416: NOT
67417: IFFALSE 67421
// exit ;
67419: GO 67466
// for i in units do
67421: LD_ADDR_VAR 0 4
67425: PUSH
67426: LD_VAR 0 2
67430: PUSH
67431: FOR_IN
67432: IFFALSE 67464
// if See ( side , i ) then
67434: LD_VAR 0 1
67438: PPUSH
67439: LD_VAR 0 4
67443: PPUSH
67444: CALL_OW 292
67448: IFFALSE 67462
// begin result := true ;
67450: LD_ADDR_VAR 0 3
67454: PUSH
67455: LD_INT 1
67457: ST_TO_ADDR
// exit ;
67458: POP
67459: POP
67460: GO 67466
// end ;
67462: GO 67431
67464: POP
67465: POP
// end ;
67466: LD_VAR 0 3
67470: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67471: LD_INT 0
67473: PPUSH
67474: PPUSH
67475: PPUSH
67476: PPUSH
// if not unit or not points then
67477: LD_VAR 0 1
67481: NOT
67482: PUSH
67483: LD_VAR 0 2
67487: NOT
67488: OR
67489: IFFALSE 67493
// exit ;
67491: GO 67583
// dist := 99999 ;
67493: LD_ADDR_VAR 0 5
67497: PUSH
67498: LD_INT 99999
67500: ST_TO_ADDR
// for i in points do
67501: LD_ADDR_VAR 0 4
67505: PUSH
67506: LD_VAR 0 2
67510: PUSH
67511: FOR_IN
67512: IFFALSE 67581
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67514: LD_ADDR_VAR 0 6
67518: PUSH
67519: LD_VAR 0 1
67523: PPUSH
67524: LD_VAR 0 4
67528: PUSH
67529: LD_INT 1
67531: ARRAY
67532: PPUSH
67533: LD_VAR 0 4
67537: PUSH
67538: LD_INT 2
67540: ARRAY
67541: PPUSH
67542: CALL_OW 297
67546: ST_TO_ADDR
// if tmpDist < dist then
67547: LD_VAR 0 6
67551: PUSH
67552: LD_VAR 0 5
67556: LESS
67557: IFFALSE 67579
// begin result := i ;
67559: LD_ADDR_VAR 0 3
67563: PUSH
67564: LD_VAR 0 4
67568: ST_TO_ADDR
// dist := tmpDist ;
67569: LD_ADDR_VAR 0 5
67573: PUSH
67574: LD_VAR 0 6
67578: ST_TO_ADDR
// end ; end ;
67579: GO 67511
67581: POP
67582: POP
// end ;
67583: LD_VAR 0 3
67587: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67588: LD_INT 0
67590: PPUSH
// uc_side := side ;
67591: LD_ADDR_OWVAR 20
67595: PUSH
67596: LD_VAR 0 1
67600: ST_TO_ADDR
// uc_nation := 3 ;
67601: LD_ADDR_OWVAR 21
67605: PUSH
67606: LD_INT 3
67608: ST_TO_ADDR
// vc_chassis := 25 ;
67609: LD_ADDR_OWVAR 37
67613: PUSH
67614: LD_INT 25
67616: ST_TO_ADDR
// vc_engine := engine_siberite ;
67617: LD_ADDR_OWVAR 39
67621: PUSH
67622: LD_INT 3
67624: ST_TO_ADDR
// vc_control := control_computer ;
67625: LD_ADDR_OWVAR 38
67629: PUSH
67630: LD_INT 3
67632: ST_TO_ADDR
// vc_weapon := 59 ;
67633: LD_ADDR_OWVAR 40
67637: PUSH
67638: LD_INT 59
67640: ST_TO_ADDR
// result := CreateVehicle ;
67641: LD_ADDR_VAR 0 5
67645: PUSH
67646: CALL_OW 45
67650: ST_TO_ADDR
// SetDir ( result , d ) ;
67651: LD_VAR 0 5
67655: PPUSH
67656: LD_VAR 0 4
67660: PPUSH
67661: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67665: LD_VAR 0 5
67669: PPUSH
67670: LD_VAR 0 2
67674: PPUSH
67675: LD_VAR 0 3
67679: PPUSH
67680: LD_INT 0
67682: PPUSH
67683: CALL_OW 48
// end ;
67687: LD_VAR 0 5
67691: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67692: LD_INT 0
67694: PPUSH
67695: PPUSH
67696: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67697: LD_ADDR_VAR 0 2
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67720: LD_VAR 0 1
67724: NOT
67725: PUSH
67726: LD_VAR 0 1
67730: PPUSH
67731: CALL_OW 264
67735: PUSH
67736: LD_INT 12
67738: PUSH
67739: LD_INT 51
67741: PUSH
67742: LD_INT 32
67744: PUSH
67745: LD_INT 89
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: IN
67754: NOT
67755: OR
67756: IFFALSE 67760
// exit ;
67758: GO 67858
// for i := 1 to 3 do
67760: LD_ADDR_VAR 0 3
67764: PUSH
67765: DOUBLE
67766: LD_INT 1
67768: DEC
67769: ST_TO_ADDR
67770: LD_INT 3
67772: PUSH
67773: FOR_TO
67774: IFFALSE 67856
// begin tmp := GetCargo ( cargo , i ) ;
67776: LD_ADDR_VAR 0 4
67780: PUSH
67781: LD_VAR 0 1
67785: PPUSH
67786: LD_VAR 0 3
67790: PPUSH
67791: CALL_OW 289
67795: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67796: LD_ADDR_VAR 0 2
67800: PUSH
67801: LD_VAR 0 2
67805: PPUSH
67806: LD_VAR 0 3
67810: PPUSH
67811: LD_VAR 0 4
67815: PPUSH
67816: CALL_OW 1
67820: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67821: LD_ADDR_VAR 0 2
67825: PUSH
67826: LD_VAR 0 2
67830: PPUSH
67831: LD_INT 4
67833: PPUSH
67834: LD_VAR 0 2
67838: PUSH
67839: LD_INT 4
67841: ARRAY
67842: PUSH
67843: LD_VAR 0 4
67847: PLUS
67848: PPUSH
67849: CALL_OW 1
67853: ST_TO_ADDR
// end ;
67854: GO 67773
67856: POP
67857: POP
// end ;
67858: LD_VAR 0 2
67862: RET
// export function Length ( array ) ; begin
67863: LD_INT 0
67865: PPUSH
// result := array + 0 ;
67866: LD_ADDR_VAR 0 2
67870: PUSH
67871: LD_VAR 0 1
67875: PUSH
67876: LD_INT 0
67878: PLUS
67879: ST_TO_ADDR
// end ;
67880: LD_VAR 0 2
67884: RET
// export function PrepareArray ( array ) ; begin
67885: LD_INT 0
67887: PPUSH
// result := array diff 0 ;
67888: LD_ADDR_VAR 0 2
67892: PUSH
67893: LD_VAR 0 1
67897: PUSH
67898: LD_INT 0
67900: DIFF
67901: ST_TO_ADDR
// if not result [ 1 ] then
67902: LD_VAR 0 2
67906: PUSH
67907: LD_INT 1
67909: ARRAY
67910: NOT
67911: IFFALSE 67931
// result := Delete ( result , 1 ) ;
67913: LD_ADDR_VAR 0 2
67917: PUSH
67918: LD_VAR 0 2
67922: PPUSH
67923: LD_INT 1
67925: PPUSH
67926: CALL_OW 3
67930: ST_TO_ADDR
// end ;
67931: LD_VAR 0 2
67935: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67936: LD_INT 0
67938: PPUSH
67939: PPUSH
67940: PPUSH
67941: PPUSH
// sibRocketRange := 25 ;
67942: LD_ADDR_VAR 0 6
67946: PUSH
67947: LD_INT 25
67949: ST_TO_ADDR
// result := false ;
67950: LD_ADDR_VAR 0 4
67954: PUSH
67955: LD_INT 0
67957: ST_TO_ADDR
// for i := 0 to 5 do
67958: LD_ADDR_VAR 0 5
67962: PUSH
67963: DOUBLE
67964: LD_INT 0
67966: DEC
67967: ST_TO_ADDR
67968: LD_INT 5
67970: PUSH
67971: FOR_TO
67972: IFFALSE 68039
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67974: LD_VAR 0 1
67978: PPUSH
67979: LD_VAR 0 5
67983: PPUSH
67984: LD_VAR 0 6
67988: PPUSH
67989: CALL_OW 272
67993: PPUSH
67994: LD_VAR 0 2
67998: PPUSH
67999: LD_VAR 0 5
68003: PPUSH
68004: LD_VAR 0 6
68008: PPUSH
68009: CALL_OW 273
68013: PPUSH
68014: LD_VAR 0 3
68018: PPUSH
68019: CALL_OW 309
68023: IFFALSE 68037
// begin result := true ;
68025: LD_ADDR_VAR 0 4
68029: PUSH
68030: LD_INT 1
68032: ST_TO_ADDR
// exit ;
68033: POP
68034: POP
68035: GO 68041
// end ;
68037: GO 67971
68039: POP
68040: POP
// end ;
68041: LD_VAR 0 4
68045: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68046: LD_INT 0
68048: PPUSH
68049: PPUSH
68050: PPUSH
// if btype = b_depot then
68051: LD_VAR 0 2
68055: PUSH
68056: LD_INT 0
68058: EQUAL
68059: IFFALSE 68071
// begin result := true ;
68061: LD_ADDR_VAR 0 3
68065: PUSH
68066: LD_INT 1
68068: ST_TO_ADDR
// exit ;
68069: GO 68187
// end ; pom := GetBase ( depot ) ;
68071: LD_ADDR_VAR 0 4
68075: PUSH
68076: LD_VAR 0 1
68080: PPUSH
68081: CALL_OW 274
68085: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68086: LD_ADDR_VAR 0 5
68090: PUSH
68091: LD_VAR 0 2
68095: PPUSH
68096: LD_VAR 0 1
68100: PPUSH
68101: CALL_OW 248
68105: PPUSH
68106: CALL_OW 450
68110: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68111: LD_ADDR_VAR 0 3
68115: PUSH
68116: LD_VAR 0 4
68120: PPUSH
68121: LD_INT 1
68123: PPUSH
68124: CALL_OW 275
68128: PUSH
68129: LD_VAR 0 5
68133: PUSH
68134: LD_INT 1
68136: ARRAY
68137: GREATEREQUAL
68138: PUSH
68139: LD_VAR 0 4
68143: PPUSH
68144: LD_INT 2
68146: PPUSH
68147: CALL_OW 275
68151: PUSH
68152: LD_VAR 0 5
68156: PUSH
68157: LD_INT 2
68159: ARRAY
68160: GREATEREQUAL
68161: AND
68162: PUSH
68163: LD_VAR 0 4
68167: PPUSH
68168: LD_INT 3
68170: PPUSH
68171: CALL_OW 275
68175: PUSH
68176: LD_VAR 0 5
68180: PUSH
68181: LD_INT 3
68183: ARRAY
68184: GREATEREQUAL
68185: AND
68186: ST_TO_ADDR
// end ;
68187: LD_VAR 0 3
68191: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68192: LD_INT 0
68194: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68195: LD_VAR 0 1
68199: PPUSH
68200: LD_VAR 0 2
68204: PPUSH
68205: LD_INT 0
68207: PPUSH
68208: LD_INT 0
68210: PPUSH
68211: LD_INT 1
68213: PPUSH
68214: LD_INT 0
68216: PPUSH
68217: CALL_OW 587
// end ;
68221: LD_VAR 0 3
68225: RET
// export function CenterOnNow ( unit ) ; begin
68226: LD_INT 0
68228: PPUSH
// result := IsInUnit ( unit ) ;
68229: LD_ADDR_VAR 0 2
68233: PUSH
68234: LD_VAR 0 1
68238: PPUSH
68239: CALL_OW 310
68243: ST_TO_ADDR
// if not result then
68244: LD_VAR 0 2
68248: NOT
68249: IFFALSE 68261
// result := unit ;
68251: LD_ADDR_VAR 0 2
68255: PUSH
68256: LD_VAR 0 1
68260: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68261: LD_VAR 0 1
68265: PPUSH
68266: CALL_OW 87
// end ;
68270: LD_VAR 0 2
68274: RET
// export function ComMoveHex ( unit , hex ) ; begin
68275: LD_INT 0
68277: PPUSH
// if not hex then
68278: LD_VAR 0 2
68282: NOT
68283: IFFALSE 68287
// exit ;
68285: GO 68340
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68287: LD_VAR 0 2
68291: PUSH
68292: LD_INT 1
68294: ARRAY
68295: PPUSH
68296: LD_VAR 0 2
68300: PUSH
68301: LD_INT 2
68303: ARRAY
68304: PPUSH
68305: CALL_OW 428
68309: IFFALSE 68313
// exit ;
68311: GO 68340
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68313: LD_VAR 0 1
68317: PPUSH
68318: LD_VAR 0 2
68322: PUSH
68323: LD_INT 1
68325: ARRAY
68326: PPUSH
68327: LD_VAR 0 2
68331: PUSH
68332: LD_INT 2
68334: ARRAY
68335: PPUSH
68336: CALL_OW 111
// end ;
68340: LD_VAR 0 3
68344: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68345: LD_INT 0
68347: PPUSH
68348: PPUSH
68349: PPUSH
// if not unit or not enemy then
68350: LD_VAR 0 1
68354: NOT
68355: PUSH
68356: LD_VAR 0 2
68360: NOT
68361: OR
68362: IFFALSE 68366
// exit ;
68364: GO 68490
// x := GetX ( enemy ) ;
68366: LD_ADDR_VAR 0 4
68370: PUSH
68371: LD_VAR 0 2
68375: PPUSH
68376: CALL_OW 250
68380: ST_TO_ADDR
// y := GetY ( enemy ) ;
68381: LD_ADDR_VAR 0 5
68385: PUSH
68386: LD_VAR 0 2
68390: PPUSH
68391: CALL_OW 251
68395: ST_TO_ADDR
// if ValidHex ( x , y ) then
68396: LD_VAR 0 4
68400: PPUSH
68401: LD_VAR 0 5
68405: PPUSH
68406: CALL_OW 488
68410: IFFALSE 68490
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68412: LD_VAR 0 2
68416: PPUSH
68417: CALL_OW 247
68421: PUSH
68422: LD_INT 3
68424: PUSH
68425: LD_INT 2
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: IN
68432: PUSH
68433: LD_VAR 0 1
68437: PPUSH
68438: CALL_OW 255
68442: PPUSH
68443: LD_VAR 0 2
68447: PPUSH
68448: CALL_OW 292
68452: OR
68453: IFFALSE 68471
// ComAttackUnit ( unit , enemy ) else
68455: LD_VAR 0 1
68459: PPUSH
68460: LD_VAR 0 2
68464: PPUSH
68465: CALL_OW 115
68469: GO 68490
// ComAgressiveMove ( unit , x , y ) ;
68471: LD_VAR 0 1
68475: PPUSH
68476: LD_VAR 0 4
68480: PPUSH
68481: LD_VAR 0 5
68485: PPUSH
68486: CALL_OW 114
// end ;
68490: LD_VAR 0 3
68494: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68495: LD_INT 0
68497: PPUSH
68498: PPUSH
68499: PPUSH
// list := AreaToList ( area , 0 ) ;
68500: LD_ADDR_VAR 0 5
68504: PUSH
68505: LD_VAR 0 1
68509: PPUSH
68510: LD_INT 0
68512: PPUSH
68513: CALL_OW 517
68517: ST_TO_ADDR
// if not list then
68518: LD_VAR 0 5
68522: NOT
68523: IFFALSE 68527
// exit ;
68525: GO 68657
// if all then
68527: LD_VAR 0 2
68531: IFFALSE 68619
// begin for i := 1 to list [ 1 ] do
68533: LD_ADDR_VAR 0 4
68537: PUSH
68538: DOUBLE
68539: LD_INT 1
68541: DEC
68542: ST_TO_ADDR
68543: LD_VAR 0 5
68547: PUSH
68548: LD_INT 1
68550: ARRAY
68551: PUSH
68552: FOR_TO
68553: IFFALSE 68615
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68555: LD_ADDR_VAR 0 3
68559: PUSH
68560: LD_VAR 0 3
68564: PPUSH
68565: LD_VAR 0 3
68569: PUSH
68570: LD_INT 1
68572: PLUS
68573: PPUSH
68574: LD_VAR 0 5
68578: PUSH
68579: LD_INT 1
68581: ARRAY
68582: PUSH
68583: LD_VAR 0 4
68587: ARRAY
68588: PUSH
68589: LD_VAR 0 5
68593: PUSH
68594: LD_INT 2
68596: ARRAY
68597: PUSH
68598: LD_VAR 0 4
68602: ARRAY
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PPUSH
68608: CALL_OW 1
68612: ST_TO_ADDR
68613: GO 68552
68615: POP
68616: POP
// exit ;
68617: GO 68657
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68619: LD_ADDR_VAR 0 3
68623: PUSH
68624: LD_VAR 0 5
68628: PUSH
68629: LD_INT 1
68631: ARRAY
68632: PUSH
68633: LD_INT 1
68635: ARRAY
68636: PUSH
68637: LD_VAR 0 5
68641: PUSH
68642: LD_INT 2
68644: ARRAY
68645: PUSH
68646: LD_INT 1
68648: ARRAY
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: EMPTY
68655: LIST
68656: ST_TO_ADDR
// end ;
68657: LD_VAR 0 3
68661: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68662: LD_INT 0
68664: PPUSH
68665: PPUSH
// list := AreaToList ( area , 0 ) ;
68666: LD_ADDR_VAR 0 4
68670: PUSH
68671: LD_VAR 0 1
68675: PPUSH
68676: LD_INT 0
68678: PPUSH
68679: CALL_OW 517
68683: ST_TO_ADDR
// if not list then
68684: LD_VAR 0 4
68688: NOT
68689: IFFALSE 68693
// exit ;
68691: GO 68734
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68693: LD_ADDR_VAR 0 3
68697: PUSH
68698: LD_VAR 0 4
68702: PUSH
68703: LD_INT 1
68705: ARRAY
68706: PUSH
68707: LD_INT 1
68709: ARRAY
68710: PUSH
68711: LD_VAR 0 4
68715: PUSH
68716: LD_INT 2
68718: ARRAY
68719: PUSH
68720: LD_INT 1
68722: ARRAY
68723: PUSH
68724: LD_VAR 0 2
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: LIST
68733: ST_TO_ADDR
// end ;
68734: LD_VAR 0 3
68738: RET
// export function First ( array ) ; begin
68739: LD_INT 0
68741: PPUSH
// if not array then
68742: LD_VAR 0 1
68746: NOT
68747: IFFALSE 68751
// exit ;
68749: GO 68765
// result := array [ 1 ] ;
68751: LD_ADDR_VAR 0 2
68755: PUSH
68756: LD_VAR 0 1
68760: PUSH
68761: LD_INT 1
68763: ARRAY
68764: ST_TO_ADDR
// end ;
68765: LD_VAR 0 2
68769: RET
// export function Last ( array ) ; begin
68770: LD_INT 0
68772: PPUSH
// if not array then
68773: LD_VAR 0 1
68777: NOT
68778: IFFALSE 68782
// exit ;
68780: GO 68798
// result := array [ array ] ;
68782: LD_ADDR_VAR 0 2
68786: PUSH
68787: LD_VAR 0 1
68791: PUSH
68792: LD_VAR 0 1
68796: ARRAY
68797: ST_TO_ADDR
// end ;
68798: LD_VAR 0 2
68802: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68803: LD_INT 0
68805: PPUSH
68806: PPUSH
// result := [ ] ;
68807: LD_ADDR_VAR 0 5
68811: PUSH
68812: EMPTY
68813: ST_TO_ADDR
// if not array then
68814: LD_VAR 0 1
68818: NOT
68819: IFFALSE 68823
// exit ;
68821: GO 68935
// for i := 1 to array do
68823: LD_ADDR_VAR 0 6
68827: PUSH
68828: DOUBLE
68829: LD_INT 1
68831: DEC
68832: ST_TO_ADDR
68833: LD_VAR 0 1
68837: PUSH
68838: FOR_TO
68839: IFFALSE 68933
// if array [ i ] [ index ] = value then
68841: LD_VAR 0 1
68845: PUSH
68846: LD_VAR 0 6
68850: ARRAY
68851: PUSH
68852: LD_VAR 0 2
68856: ARRAY
68857: PUSH
68858: LD_VAR 0 3
68862: EQUAL
68863: IFFALSE 68931
// begin if indexColumn then
68865: LD_VAR 0 4
68869: IFFALSE 68905
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68871: LD_ADDR_VAR 0 5
68875: PUSH
68876: LD_VAR 0 5
68880: PPUSH
68881: LD_VAR 0 1
68885: PUSH
68886: LD_VAR 0 6
68890: ARRAY
68891: PUSH
68892: LD_VAR 0 4
68896: ARRAY
68897: PPUSH
68898: CALL 64123 0 2
68902: ST_TO_ADDR
68903: GO 68931
// result := Join ( result , array [ i ] ) ;
68905: LD_ADDR_VAR 0 5
68909: PUSH
68910: LD_VAR 0 5
68914: PPUSH
68915: LD_VAR 0 1
68919: PUSH
68920: LD_VAR 0 6
68924: ARRAY
68925: PPUSH
68926: CALL 64123 0 2
68930: ST_TO_ADDR
// end ;
68931: GO 68838
68933: POP
68934: POP
// end ;
68935: LD_VAR 0 5
68939: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
68940: LD_INT 0
68942: PPUSH
// if not vehicles or not parkingPoint then
68943: LD_VAR 0 1
68947: NOT
68948: PUSH
68949: LD_VAR 0 2
68953: NOT
68954: OR
68955: IFFALSE 68959
// exit ;
68957: GO 69057
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
68959: LD_ADDR_VAR 0 1
68963: PUSH
68964: LD_VAR 0 1
68968: PPUSH
68969: LD_INT 50
68971: PUSH
68972: EMPTY
68973: LIST
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: LD_INT 92
68980: PUSH
68981: LD_VAR 0 2
68985: PUSH
68986: LD_INT 1
68988: ARRAY
68989: PUSH
68990: LD_VAR 0 2
68994: PUSH
68995: LD_INT 2
68997: ARRAY
68998: PUSH
68999: LD_INT 8
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PPUSH
69016: CALL_OW 72
69020: ST_TO_ADDR
// if not vehicles then
69021: LD_VAR 0 1
69025: NOT
69026: IFFALSE 69030
// exit ;
69028: GO 69057
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69030: LD_VAR 0 1
69034: PPUSH
69035: LD_VAR 0 2
69039: PUSH
69040: LD_INT 1
69042: ARRAY
69043: PPUSH
69044: LD_VAR 0 2
69048: PUSH
69049: LD_INT 2
69051: ARRAY
69052: PPUSH
69053: CALL_OW 111
// end ;
69057: LD_VAR 0 3
69061: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69062: LD_INT 0
69064: PPUSH
69065: PPUSH
69066: PPUSH
// if not side or not area then
69067: LD_VAR 0 1
69071: NOT
69072: PUSH
69073: LD_VAR 0 2
69077: NOT
69078: OR
69079: IFFALSE 69083
// exit ;
69081: GO 69202
// tmp := AreaToList ( area , 0 ) ;
69083: LD_ADDR_VAR 0 5
69087: PUSH
69088: LD_VAR 0 2
69092: PPUSH
69093: LD_INT 0
69095: PPUSH
69096: CALL_OW 517
69100: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69101: LD_ADDR_VAR 0 4
69105: PUSH
69106: DOUBLE
69107: LD_INT 1
69109: DEC
69110: ST_TO_ADDR
69111: LD_VAR 0 5
69115: PUSH
69116: LD_INT 1
69118: ARRAY
69119: PUSH
69120: FOR_TO
69121: IFFALSE 69200
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69123: LD_VAR 0 5
69127: PUSH
69128: LD_INT 1
69130: ARRAY
69131: PUSH
69132: LD_VAR 0 4
69136: ARRAY
69137: PPUSH
69138: LD_VAR 0 5
69142: PUSH
69143: LD_INT 2
69145: ARRAY
69146: PUSH
69147: LD_VAR 0 4
69151: ARRAY
69152: PPUSH
69153: CALL_OW 351
69157: IFFALSE 69198
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69159: LD_VAR 0 5
69163: PUSH
69164: LD_INT 1
69166: ARRAY
69167: PUSH
69168: LD_VAR 0 4
69172: ARRAY
69173: PPUSH
69174: LD_VAR 0 5
69178: PUSH
69179: LD_INT 2
69181: ARRAY
69182: PUSH
69183: LD_VAR 0 4
69187: ARRAY
69188: PPUSH
69189: LD_VAR 0 1
69193: PPUSH
69194: CALL_OW 244
// end ;
69198: GO 69120
69200: POP
69201: POP
// end ;
69202: LD_VAR 0 3
69206: RET
