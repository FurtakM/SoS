// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2057 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3416 0 0
// Action ;
  90: CALL 5206 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 4212 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 66771 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 23
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 30
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// if tmp then
1154: LD_VAR 0 4
1158: IFFALSE 1280
// begin x := GetX ( tmp [ 1 ] ) ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: LD_VAR 0 4
1169: PUSH
1170: LD_INT 1
1172: ARRAY
1173: PPUSH
1174: CALL_OW 250
1178: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 251
1197: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1198: LD_VAR 0 4
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: LD_STRING epsilon
1209: PPUSH
1210: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1214: LD_ADDR_VAR 0 7
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 274
1232: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1233: LD_VAR 0 7
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 3000
1243: PPUSH
1244: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1248: LD_VAR 0 7
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 500
1258: PPUSH
1259: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1263: LD_VAR 0 7
1267: PPUSH
1268: LD_INT 3
1270: PPUSH
1271: LD_INT 200
1273: PPUSH
1274: CALL_OW 277
// end else
1278: GO 1296
// begin x := 104 ;
1280: LD_ADDR_VAR 0 5
1284: PUSH
1285: LD_INT 104
1287: ST_TO_ADDR
// y := 32 ;
1288: LD_ADDR_VAR 0 6
1292: PUSH
1293: LD_INT 32
1295: ST_TO_ADDR
// end ; uc_side := 1 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1304: LD_ADDR_EXP 1
1308: PUSH
1309: LD_STRING JMM
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 3686 0 2
1319: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1320: LD_ADDR_EXP 3
1324: PUSH
1325: LD_STRING Lisa
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL 3686 0 2
1335: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1336: LD_ADDR_EXP 4
1340: PUSH
1341: LD_STRING Donaldson
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: CALL 3686 0 2
1351: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1352: LD_ADDR_EXP 5
1356: PUSH
1357: LD_STRING Bobby
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: CALL 3686 0 2
1367: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1368: LD_ADDR_EXP 6
1372: PUSH
1373: LD_STRING Cyrus
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 3686 0 2
1383: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1384: LD_ADDR_EXP 7
1388: PUSH
1389: LD_STRING Denis
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL 3686 0 2
1399: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1400: LD_ADDR_EXP 8
1404: PUSH
1405: LD_STRING Brown
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 3686 0 2
1415: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1416: LD_ADDR_EXP 9
1420: PUSH
1421: LD_STRING Gladstone
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 3686 0 2
1431: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING Houten
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 3686 0 2
1447: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1448: LD_ADDR_EXP 11
1452: PUSH
1453: LD_STRING Cornell
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 3686 0 2
1463: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1464: LD_ADDR_EXP 12
1468: PUSH
1469: LD_STRING Gary
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: CALL 3686 0 2
1479: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1480: LD_ADDR_EXP 13
1484: PUSH
1485: LD_STRING Frank
1487: PPUSH
1488: LD_INT 1
1490: PPUSH
1491: CALL 3686 0 2
1495: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1496: LD_ADDR_EXP 14
1500: PUSH
1501: LD_STRING Kikuchi
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: CALL 3686 0 2
1511: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_STRING Stevens
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL 3686 0 2
1527: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1528: LD_ADDR_EXP 2
1532: PUSH
1533: LD_STRING Powell
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL 3686 0 2
1543: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_VAR 0 5
1553: PPUSH
1554: LD_VAR 0 6
1558: PPUSH
1559: LD_INT 4
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL 3859 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1569: LD_EXP 15
1573: PPUSH
1574: LD_VAR 0 5
1578: PPUSH
1579: LD_VAR 0 6
1583: PPUSH
1584: LD_INT 4
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL 3859 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1594: LD_EXP 3
1598: PPUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: LD_VAR 0 6
1608: PPUSH
1609: LD_INT 35
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL 3859 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1619: LD_EXP 4
1623: PPUSH
1624: LD_VAR 0 5
1628: PPUSH
1629: LD_VAR 0 6
1633: PPUSH
1634: LD_INT 35
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL 3859 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1644: LD_EXP 5
1648: PPUSH
1649: LD_VAR 0 5
1653: PPUSH
1654: LD_VAR 0 6
1658: PPUSH
1659: LD_INT 35
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL 3859 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_VAR 0 5
1678: PPUSH
1679: LD_VAR 0 6
1683: PPUSH
1684: LD_INT 35
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL 3859 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: LD_VAR 0 6
1708: PPUSH
1709: LD_INT 35
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL 3859 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1719: LD_EXP 8
1723: PPUSH
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 35
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL 3859 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1744: LD_EXP 9
1748: PPUSH
1749: LD_VAR 0 5
1753: PPUSH
1754: LD_VAR 0 6
1758: PPUSH
1759: LD_INT 35
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 3859 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1769: LD_EXP 10
1773: PPUSH
1774: LD_VAR 0 5
1778: PPUSH
1779: LD_VAR 0 6
1783: PPUSH
1784: LD_INT 35
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL 3859 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1794: LD_EXP 11
1798: PPUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 6
1808: PPUSH
1809: LD_INT 35
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL 3859 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1819: LD_EXP 12
1823: PPUSH
1824: LD_VAR 0 5
1828: PPUSH
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_INT 35
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL 3859 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1844: LD_EXP 13
1848: PPUSH
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 6
1858: PPUSH
1859: LD_INT 35
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL 3859 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1869: LD_EXP 14
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_INT 35
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL 3859 0 5
// SetClass ( JMM , 1 ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1906: LD_ADDR_EXP 16
1910: PUSH
1911: LD_STRING 12_other_survivors
1913: PPUSH
1914: CALL_OW 31
1918: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1919: LD_ADDR_EXP 17
1923: PUSH
1924: LD_STRING 12_others
1926: PPUSH
1927: CALL_OW 31
1931: ST_TO_ADDR
// for i in others11 do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_EXP 17
1941: PUSH
1942: FOR_IN
1943: IFFALSE 1990
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 4
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: CALL_OW 250
1963: PPUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 251
1977: PPUSH
1978: LD_INT 15
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL 3859 0 5
1988: GO 1942
1990: POP
1991: POP
// for i in others12 do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_EXP 16
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2050
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PPUSH
2019: CALL_OW 250
2023: PPUSH
2024: LD_VAR 0 4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PPUSH
2033: CALL_OW 251
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL 3859 0 5
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
2064: PPUSH
2065: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2066: LD_INT 113
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2079: LD_INT 104
2081: PPUSH
2082: LD_INT 24
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2092: LD_INT 43
2094: PPUSH
2095: LD_INT 79
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2105: LD_INT 43
2107: PPUSH
2108: LD_INT 68
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2118: LD_INT 99
2120: PPUSH
2121: LD_INT 114
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2131: LD_INT 103
2133: PPUSH
2134: LD_INT 114
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2144: LD_INT 152
2146: PPUSH
2147: LD_INT 85
2149: PPUSH
2150: LD_INT 1
2152: PPUSH
2153: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2157: LD_INT 156
2159: PPUSH
2160: LD_INT 92
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: LD_STRING 10_EpsilonBase
2177: PPUSH
2178: EMPTY
2179: PPUSH
2180: CALL_OW 30
2184: ST_TO_ADDR
// if not blist then
2185: LD_VAR 0 2
2189: NOT
2190: IFFALSE 2194
// exit ;
2192: GO 3411
// for i in blist do
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_IN
2205: IFFALSE 2247
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: EQUAL
2232: OR
2233: IFFALSE 2245
// begin baseCorrect := 1 ;
2235: LD_ADDR_VAR 0 6
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// break ;
2243: GO 2247
// end ;
2245: GO 2204
2247: POP
2248: POP
// if baseCorrect = 0 then
2249: LD_VAR 0 6
2253: PUSH
2254: LD_INT 0
2256: EQUAL
2257: IFFALSE 2964
// begin uc_side := 1 ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_nation := 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level := 10 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 10
2282: ST_TO_ADDR
// bc_type := b_warehouse ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2291: LD_INT 99
2293: PPUSH
2294: LD_INT 24
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 47
// bc_type := b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2312: LD_ADDR_VAR 0 7
2316: PUSH
2317: LD_INT 124
2319: PPUSH
2320: LD_INT 42
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 5
2341: PUSH
2342: LD_INT 6
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 3
2355: PPUSH
2356: CALL_OW 12
2360: ARRAY
2361: PPUSH
2362: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2366: LD_ADDR_VAR 0 7
2370: PUSH
2371: LD_INT 111
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 47
2384: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2385: LD_VAR 0 7
2389: PPUSH
2390: LD_INT 4
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2420: LD_ADDR_VAR 0 7
2424: PUSH
2425: LD_INT 113
2427: PPUSH
2428: LD_INT 21
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 47
2438: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 4
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: PPUSH
2470: CALL_OW 431
// bc_type := 33 ;
2474: LD_ADDR_OWVAR 42
2478: PUSH
2479: LD_INT 33
2481: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2482: LD_ADDR_VAR 0 7
2486: PUSH
2487: LD_INT 95
2489: PPUSH
2490: LD_INT 41
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 47
2500: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2501: LD_VAR 0 7
2505: PPUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 6
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: CALL_OW 12
2530: ARRAY
2531: PPUSH
2532: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2536: LD_ADDR_VAR 0 7
2540: PUSH
2541: LD_INT 97
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 47
2554: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2555: LD_VAR 0 7
2559: PPUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 6
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2590: LD_ADDR_VAR 0 7
2594: PUSH
2595: LD_INT 86
2597: PPUSH
2598: LD_INT 19
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 47
2608: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2609: LD_VAR 0 7
2613: PPUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: PPUSH
2640: CALL_OW 431
// bc_type := 30 ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 30
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2652: LD_INT 104
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL_OW 47
// bc_type := 29 ;
2665: LD_ADDR_OWVAR 42
2669: PUSH
2670: LD_INT 29
2672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2673: LD_INT 113
2675: PPUSH
2676: LD_INT 50
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL_OW 47
// bc_type := 27 ;
2686: LD_ADDR_OWVAR 42
2690: PUSH
2691: LD_INT 27
2693: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2694: LD_INT 98
2696: PPUSH
2697: LD_INT 26
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2707: LD_INT 95
2709: PPUSH
2710: LD_INT 23
2712: PPUSH
2713: LD_INT 3
2715: PPUSH
2716: CALL_OW 47
// bc_type := 28 ;
2720: LD_ADDR_OWVAR 42
2724: PUSH
2725: LD_INT 28
2727: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2728: LD_INT 107
2730: PPUSH
2731: LD_INT 32
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 47
// bc_type := 3 ;
2741: LD_ADDR_OWVAR 42
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2749: LD_INT 106
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: LD_INT 0
2757: PPUSH
2758: CALL_OW 47
// bc_type := 16 ;
2762: LD_ADDR_OWVAR 42
2766: PUSH
2767: LD_INT 16
2769: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2770: LD_INT 109
2772: PPUSH
2773: LD_INT 45
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 47
// bc_type := 17 ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2791: LD_INT 106
2793: PPUSH
2794: LD_INT 46
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 47
// bc_type := 19 ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 19
2811: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2812: LD_INT 103
2814: PPUSH
2815: LD_INT 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 47
// bc_type := 21 ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 21
2832: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2833: LD_INT 110
2835: PPUSH
2836: LD_INT 42
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 47
// bc_type := 5 ;
2846: LD_ADDR_OWVAR 42
2850: PUSH
2851: LD_INT 5
2853: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2854: LD_INT 114
2856: PPUSH
2857: LD_INT 55
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 47
// bc_type := 36 ;
2867: LD_ADDR_OWVAR 42
2871: PUSH
2872: LD_INT 36
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2875: LD_INT 96
2877: PPUSH
2878: LD_INT 28
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 47
// bc_type := b_lab_full ;
2888: LD_ADDR_OWVAR 42
2892: PUSH
2893: LD_INT 8
2895: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2896: LD_ADDR_OWVAR 44
2900: PUSH
2901: LD_INT 15
2903: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2904: LD_ADDR_OWVAR 45
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2912: LD_INT 116
2914: PPUSH
2915: LD_INT 38
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 10
2940: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 12
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2949: LD_INT 112
2951: PPUSH
2952: LD_INT 29
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// end else
2962: GO 3208
// begin uc_side := 1 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// for i in blist do
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: LD_VAR 0 2
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3206
// begin uc_nation := i [ 6 ] ;
2985: LD_ADDR_OWVAR 21
2989: PUSH
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 6
2997: ARRAY
2998: ST_TO_ADDR
// bc_type := i [ 1 ] ;
2999: LD_ADDR_OWVAR 42
3003: PUSH
3004: LD_VAR 0 3
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3013: LD_ADDR_OWVAR 43
3017: PUSH
3018: LD_VAR 0 3
3022: PUSH
3023: LD_INT 5
3025: ARRAY
3026: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3027: LD_VAR 0 3
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PUSH
3036: LD_INT 7
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: IFFALSE 3076
// begin bc_kind1 := i [ 7 ] ;
3048: LD_ADDR_OWVAR 44
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 7
3060: ARRAY
3061: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3062: LD_ADDR_OWVAR 45
3066: PUSH
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 8
3074: ARRAY
3075: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_VAR 0 3
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 3
3094: PUSH
3095: LD_INT 3
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 3
3103: PUSH
3104: LD_INT 4
3106: ARRAY
3107: PPUSH
3108: CALL_OW 47
3112: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3113: LD_VAR 0 4
3117: PPUSH
3118: CALL_OW 266
3122: PUSH
3123: LD_INT 32
3125: PUSH
3126: LD_INT 33
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: IN
3133: IFFALSE 3204
// if i [ 7 ] then
3135: LD_VAR 0 3
3139: PUSH
3140: LD_INT 7
3142: ARRAY
3143: IFFALSE 3165
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_VAR 0 3
3154: PUSH
3155: LD_INT 7
3157: ARRAY
3158: PPUSH
3159: CALL_OW 431
3163: GO 3204
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_INT 11
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: LD_INT 4
3178: PUSH
3179: LD_INT 5
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_INT 4
3193: PPUSH
3194: CALL_OW 12
3198: ARRAY
3199: PPUSH
3200: CALL_OW 431
// end ;
3204: GO 2982
3206: POP
3207: POP
// end ; uc_side := 1 ;
3208: LD_ADDR_OWVAR 20
3212: PUSH
3213: LD_INT 1
3215: ST_TO_ADDR
// uc_nation := 1 ;
3216: LD_ADDR_OWVAR 21
3220: PUSH
3221: LD_INT 1
3223: ST_TO_ADDR
// for i := 1 to 8 do
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_INT 8
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3409
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3240: LD_ADDR_OWVAR 37
3244: PUSH
3245: LD_INT 5
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 3
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 4
3268: PPUSH
3269: CALL_OW 12
3273: ARRAY
3274: ST_TO_ADDR
// vc_engine := engine_siberite ;
3275: LD_ADDR_OWVAR 39
3279: PUSH
3280: LD_INT 3
3282: ST_TO_ADDR
// vc_control := control_manual ;
3283: LD_ADDR_OWVAR 38
3287: PUSH
3288: LD_INT 1
3290: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3291: LD_OWVAR 37
3295: PUSH
3296: LD_INT 4
3298: EQUAL
3299: IFFALSE 3311
// vc_weapon := us_heavy_gun else
3301: LD_ADDR_OWVAR 40
3305: PUSH
3306: LD_INT 6
3308: ST_TO_ADDR
3309: GO 3356
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3311: LD_ADDR_OWVAR 40
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 9
3321: PUSH
3322: LD_INT 12
3324: PUSH
3325: LD_INT 13
3327: PUSH
3328: LD_INT 9
3330: PUSH
3331: LD_INT 9
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 6
3349: MOD
3350: PUSH
3351: LD_INT 1
3353: PLUS
3354: ARRAY
3355: ST_TO_ADDR
// un := CreateVehicle ;
3356: LD_ADDR_VAR 0 5
3360: PUSH
3361: CALL_OW 45
3365: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3366: LD_VAR 0 5
3370: PPUSH
3371: LD_INT 0
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: CALL_OW 12
3381: PPUSH
3382: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3386: LD_VAR 0 5
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 31
3396: PPUSH
3397: LD_INT 8
3399: PPUSH
3400: LD_INT 0
3402: PPUSH
3403: CALL_OW 50
// end ;
3407: GO 3237
3409: POP
3410: POP
// end ;
3411: LD_VAR 0 1
3415: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 21
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: PUSH
3451: LD_INT 6
3453: LESS
3454: IFFALSE 3681
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3456: LD_ADDR_VAR 0 4
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 2
3473: PUSH
3474: LD_INT 30
3476: PUSH
3477: LD_INT 0
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: ST_TO_ADDR
// uc_side := 1 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 1
3515: ST_TO_ADDR
// uc_nation := 1 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// for i := 1 to 6 do
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: DOUBLE
3530: LD_INT 1
3532: DEC
3533: ST_TO_ADDR
3534: LD_INT 6
3536: PUSH
3537: FOR_TO
3538: IFFALSE 3679
// begin hc_gallery :=  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name :=  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 1
3561: PUSH
3562: LD_INT 2
3564: PUSH
3565: LD_INT 3
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 1
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: CALL_OW 12
3587: ARRAY
3588: PPUSH
3589: LD_INT 5
3591: PPUSH
3592: LD_INT 8
3594: PPUSH
3595: CALL_OW 12
3599: PPUSH
3600: CALL_OW 380
// un := CreateHuman ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: CALL_OW 44
3613: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3614: LD_ADDR_EXP 18
3618: PUSH
3619: LD_EXP 18
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL 63206 0 2
3633: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_VAR 0 4
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 250
3652: PPUSH
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: CALL_OW 251
3666: PPUSH
3667: LD_INT 15
3669: PPUSH
3670: LD_INT 0
3672: PPUSH
3673: CALL 3859 0 5
// end ;
3677: GO 3537
3679: POP
3680: POP
// end ; end ; end_of_file
3681: LD_VAR 0 1
3685: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// if existMode then
3690: LD_VAR 0 2
3694: IFFALSE 3829
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3696: LD_EXP 21
3700: PUSH
3701: LD_VAR 0 1
3705: STR
3706: PPUSH
3707: CALL_OW 28
3711: IFFALSE 3736
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: LD_EXP 21
3722: PUSH
3723: LD_VAR 0 1
3727: STR
3728: PPUSH
3729: CALL_OW 34
3733: ST_TO_ADDR
3734: GO 3827
// begin if TestCharacters ( 11_ & ident ) then
3736: LD_STRING 11_
3738: PUSH
3739: LD_VAR 0 1
3743: STR
3744: PPUSH
3745: CALL_OW 28
3749: IFFALSE 3772
// unit := CreateCharacter ( 11_ & ident ) else
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_STRING 11_
3758: PUSH
3759: LD_VAR 0 1
3763: STR
3764: PPUSH
3765: CALL_OW 34
3769: ST_TO_ADDR
3770: GO 3827
// if TestCharacters ( 10c_ & ident ) then
3772: LD_STRING 10c_
3774: PUSH
3775: LD_VAR 0 1
3779: STR
3780: PPUSH
3781: CALL_OW 28
3785: IFFALSE 3808
// unit := CreateCharacter ( 10c_ & ident ) else
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_STRING 10c_
3794: PUSH
3795: LD_VAR 0 1
3799: STR
3800: PPUSH
3801: CALL_OW 34
3805: ST_TO_ADDR
3806: GO 3827
// unit := CreateCharacter ( 10_ & ident ) ;
3808: LD_ADDR_VAR 0 4
3812: PUSH
3813: LD_STRING 10_
3815: PUSH
3816: LD_VAR 0 1
3820: STR
3821: PPUSH
3822: CALL_OW 34
3826: ST_TO_ADDR
// end ; end else
3827: GO 3844
// unit := NewCharacter ( ident ) ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 25
3843: ST_TO_ADDR
// result := unit ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// end ;
3854: LD_VAR 0 3
3858: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3859: LD_INT 0
3861: PPUSH
3862: PPUSH
3863: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3864: LD_ADDR_VAR 0 8
3868: PUSH
3869: LD_INT 22
3871: PUSH
3872: LD_VAR 0 1
3876: PPUSH
3877: CALL_OW 255
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 3
3898: PUSH
3899: LD_INT 30
3901: PUSH
3902: LD_INT 3
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: ST_TO_ADDR
// if not tmp then
3923: LD_VAR 0 8
3927: NOT
3928: IFFALSE 3961
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3930: LD_VAR 0 1
3934: PPUSH
3935: LD_VAR 0 2
3939: PPUSH
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 5
3954: PPUSH
3955: CALL_OW 50
// exit ;
3959: GO 4207
// end ; for i in tmp do
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_VAR 0 8
3970: PUSH
3971: FOR_IN
3972: IFFALSE 4176
// if IsNotFull ( i ) then
3974: LD_VAR 0 7
3978: PPUSH
3979: CALL 27954 0 1
3983: IFFALSE 4174
// begin PlaceHumanInUnit ( unit , i ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_VAR 0 7
3994: PPUSH
3995: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
3999: LD_VAR 0 7
4003: PPUSH
4004: CALL_OW 266
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 31
4017: PUSH
4018: LD_INT 32
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: IN
4027: IFFALSE 4060
// begin SetClass ( unit , class_soldier ) ;
4029: LD_VAR 0 1
4033: PPUSH
4034: LD_INT 1
4036: PPUSH
4037: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 7
4050: PPUSH
4051: CALL 58454 0 1
4055: PPUSH
4056: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4060: LD_VAR 0 7
4064: PPUSH
4065: CALL_OW 266
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: LD_INT 3
4075: PUSH
4076: LD_INT 36
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: IN
4084: IFFALSE 4098
// SetClass ( unit , class_mechanic ) ;
4086: LD_VAR 0 1
4090: PPUSH
4091: LD_INT 3
4093: PPUSH
4094: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4098: LD_VAR 0 7
4102: PPUSH
4103: CALL_OW 266
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: IN
4118: IFFALSE 4132
// SetClass ( unit , class_engineer ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4132: LD_VAR 0 7
4136: PPUSH
4137: CALL_OW 266
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: LD_INT 7
4147: PUSH
4148: LD_INT 8
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: IN
4156: IFFALSE 4170
// SetClass ( unit , class_scientistic ) ;
4158: LD_VAR 0 1
4162: PPUSH
4163: LD_INT 4
4165: PPUSH
4166: CALL_OW 336
// exit ;
4170: POP
4171: POP
4172: GO 4207
// end ;
4174: GO 3971
4176: POP
4177: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4178: LD_VAR 0 1
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: LD_VAR 0 4
4197: PPUSH
4198: LD_VAR 0 5
4202: PPUSH
4203: CALL_OW 50
// end ;
4207: LD_VAR 0 6
4211: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4212: LD_INT 0
4214: PPUSH
// if unit in selectedTab then
4215: LD_VAR 0 1
4219: PUSH
4220: LD_VAR 0 3
4224: IN
4225: IFFALSE 4247
// SaveCharacters ( unit , 13c_ & unitString ) else
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_STRING 13c_
4234: PUSH
4235: LD_VAR 0 2
4239: STR
4240: PPUSH
4241: CALL_OW 38
4245: GO 4265
// SaveCharacters ( unit , 13s_ & unitString ) ;
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_STRING 13s_
4254: PUSH
4255: LD_VAR 0 2
4259: STR
4260: PPUSH
4261: CALL_OW 38
// end ;
4265: LD_VAR 0 4
4269: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
// selected := [ ] ;
4276: LD_ADDR_EXP 22
4280: PUSH
4281: EMPTY
4282: ST_TO_ADDR
// othersSelect := [ ] ;
4283: LD_ADDR_EXP 23
4287: PUSH
4288: EMPTY
4289: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_EXP 3
4299: PUSH
4300: LD_EXP 4
4304: PUSH
4305: LD_EXP 5
4309: PUSH
4310: LD_EXP 6
4314: PUSH
4315: LD_EXP 8
4319: PUSH
4320: LD_EXP 9
4324: PUSH
4325: LD_EXP 10
4329: PUSH
4330: LD_EXP 11
4334: PUSH
4335: LD_EXP 12
4339: PUSH
4340: LD_EXP 13
4344: PUSH
4345: LD_EXP 14
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4363: LD_ADDR_VAR 0 3
4367: PUSH
4368: LD_VAR 0 3
4372: PUSH
4373: LD_EXP 17
4377: ADD
4378: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_VAR 0 3
4388: PUSH
4389: LD_EXP 16
4393: ADD
4394: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_VAR 0 3
4404: PUSH
4405: LD_EXP 18
4409: ADD
4410: ST_TO_ADDR
// for i in tmp do
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: LD_VAR 0 3
4420: PUSH
4421: FOR_IN
4422: IFFALSE 4461
// if GetClass ( i ) = 8 then
4424: LD_VAR 0 2
4428: PPUSH
4429: CALL_OW 257
4433: PUSH
4434: LD_INT 8
4436: EQUAL
4437: IFFALSE 4459
// SetClass ( i , rand ( 1 , 4 ) ) ;
4439: LD_VAR 0 2
4443: PPUSH
4444: LD_INT 1
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: CALL_OW 12
4454: PPUSH
4455: CALL_OW 336
4459: GO 4421
4461: POP
4462: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4463: LD_ADDR_EXP 22
4467: PUSH
4468: LD_STRING 1
4470: PPUSH
4471: LD_INT 6
4473: PPUSH
4474: LD_INT 6
4476: PPUSH
4477: LD_INT -5
4479: PUSH
4480: LD_EXP 1
4484: PUSH
4485: LD_EXP 15
4489: PUSH
4490: LD_INT -2
4492: PUSH
4493: LD_INT -3
4495: PUSH
4496: LD_INT -5
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: PUSH
4507: LD_VAR 0 3
4511: ADD
4512: PUSH
4513: LD_INT -6
4515: PUSH
4516: LD_INT -4
4518: PUSH
4519: LD_EXP 2
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: ADD
4529: PPUSH
4530: LD_INT 1
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: PUSH
4540: LD_INT 2
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 4
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 42
4595: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4596: LD_ADDR_EXP 23
4600: PUSH
4601: LD_EXP 22
4605: PUSH
4606: LD_EXP 3
4610: PUSH
4611: LD_EXP 4
4615: PUSH
4616: LD_EXP 5
4620: PUSH
4621: LD_EXP 6
4625: PUSH
4626: LD_EXP 7
4630: PUSH
4631: LD_EXP 8
4635: PUSH
4636: LD_EXP 9
4640: PUSH
4641: LD_EXP 10
4645: PUSH
4646: LD_EXP 11
4650: PUSH
4651: LD_EXP 12
4655: PUSH
4656: LD_EXP 13
4660: PUSH
4661: LD_EXP 14
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: DIFF
4680: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: LD_VAR 0 3
4690: PUSH
4691: LD_EXP 22
4695: DIFF
4696: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 4
4706: PUSH
4707: LD_EXP 3
4711: PUSH
4712: LD_EXP 4
4716: PUSH
4717: LD_EXP 5
4721: PUSH
4722: LD_EXP 6
4726: PUSH
4727: LD_EXP 7
4731: PUSH
4732: LD_EXP 8
4736: PUSH
4737: LD_EXP 9
4741: PUSH
4742: LD_EXP 10
4746: PUSH
4747: LD_EXP 11
4751: PUSH
4752: LD_EXP 12
4756: PUSH
4757: LD_EXP 13
4761: PUSH
4762: LD_EXP 14
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: DIFF
4781: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4782: LD_VAR 0 4
4786: PPUSH
4787: LD_STRING 13s_others
4789: PPUSH
4790: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4794: LD_EXP 23
4798: PPUSH
4799: LD_STRING 13c_others
4801: PPUSH
4802: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4806: LD_EXP 1
4810: PPUSH
4811: LD_STRING 13c_JMM
4813: PPUSH
4814: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4818: LD_EXP 15
4822: PPUSH
4823: LD_STRING 13c_Stevens
4825: PPUSH
4826: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4830: LD_EXP 3
4834: PPUSH
4835: LD_STRING Lisa
4837: PPUSH
4838: LD_EXP 22
4842: PPUSH
4843: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4847: LD_EXP 8
4851: PPUSH
4852: LD_STRING Brown
4854: PPUSH
4855: LD_EXP 22
4859: PPUSH
4860: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4864: LD_EXP 4
4868: PPUSH
4869: LD_STRING Donaldson
4871: PPUSH
4872: LD_EXP 22
4876: PPUSH
4877: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4881: LD_EXP 5
4885: PPUSH
4886: LD_STRING Bobby
4888: PPUSH
4889: LD_EXP 22
4893: PPUSH
4894: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4898: LD_EXP 6
4902: PPUSH
4903: LD_STRING Cyrus
4905: PPUSH
4906: LD_EXP 22
4910: PPUSH
4911: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4915: LD_EXP 7
4919: PPUSH
4920: LD_STRING Denis
4922: PPUSH
4923: LD_EXP 22
4927: PPUSH
4928: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4932: LD_EXP 9
4936: PPUSH
4937: LD_STRING Gladstone
4939: PPUSH
4940: LD_EXP 22
4944: PPUSH
4945: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4949: LD_EXP 10
4953: PPUSH
4954: LD_STRING Houten
4956: PPUSH
4957: LD_EXP 22
4961: PPUSH
4962: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4966: LD_EXP 11
4970: PPUSH
4971: LD_STRING Cornel
4973: PPUSH
4974: LD_EXP 22
4978: PPUSH
4979: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4983: LD_EXP 12
4987: PPUSH
4988: LD_STRING Gary
4990: PPUSH
4991: LD_EXP 22
4995: PPUSH
4996: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5000: LD_EXP 13
5004: PPUSH
5005: LD_STRING Frank
5007: PPUSH
5008: LD_EXP 22
5012: PPUSH
5013: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5017: LD_EXP 14
5021: PPUSH
5022: LD_STRING Kikuchi
5024: PPUSH
5025: LD_EXP 22
5029: PPUSH
5030: CALL 4212 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5034: LD_INT 22
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 21
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 69
5062: PPUSH
5063: LD_INT 4
5065: PPUSH
5066: CALL_OW 235
// SetSide ( selected , 1 ) ;
5070: LD_EXP 22
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5082: LD_EXP 1
5086: PUSH
5087: LD_EXP 15
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5103: LD_ADDR_VAR 0 2
5107: PUSH
5108: LD_INT 22
5110: PUSH
5111: LD_INT 1
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 21
5120: PUSH
5121: LD_INT 1
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 69
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5151
// ComExit ( i ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: CALL 63604 0 1
5149: GO 5137
5151: POP
5152: POP
// end ; end_of_file
5153: LD_VAR 0 1
5157: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL 21227 0 1
// if un = JMM then
5167: LD_VAR 0 1
5171: PUSH
5172: LD_EXP 1
5176: EQUAL
5177: IFFALSE 5186
// YouLost ( JMM ) ;
5179: LD_STRING JMM
5181: PPUSH
5182: CALL_OW 104
// end ;
5186: PPOPN 1
5188: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_VAR 0 2
5198: PPUSH
5199: CALL 21347 0 2
// end ; end_of_file
5203: PPOPN 2
5205: END
// export function Action ; begin
5206: LD_INT 0
5208: PPUSH
// InGameOn ;
5209: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5213: LD_INT 22
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 2
5225: PUSH
5226: LD_INT 30
5228: PUSH
5229: LD_INT 0
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 30
5238: PUSH
5239: LD_INT 1
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: PPUSH
5260: CALL_OW 87
// wait ( 0 0$1 ) ;
5264: LD_INT 35
5266: PPUSH
5267: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5271: LD_EXP 1
5275: PPUSH
5276: LD_STRING D1-JMM-1
5278: PPUSH
5279: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5283: LD_EXP 2
5287: PPUSH
5288: LD_STRING D1-Pow-1
5290: PPUSH
5291: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5295: LD_EXP 2
5299: PPUSH
5300: LD_STRING D1-Pow-1a
5302: PPUSH
5303: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5307: LD_EXP 2
5311: PPUSH
5312: LD_STRING D1-Pow-1b
5314: PPUSH
5315: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5319: LD_EXP 2
5323: PPUSH
5324: LD_STRING D1-Pow-1c
5326: PPUSH
5327: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5331: LD_EXP 1
5335: PPUSH
5336: LD_STRING D1-JMM-2
5338: PPUSH
5339: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5343: LD_EXP 2
5347: PPUSH
5348: LD_STRING D1-Pow-2
5350: PPUSH
5351: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5355: LD_EXP 1
5359: PPUSH
5360: LD_STRING D1-JMM-3
5362: PPUSH
5363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5367: LD_EXP 2
5371: PPUSH
5372: LD_STRING D1-Pow-3
5374: PPUSH
5375: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5379: LD_EXP 1
5383: PPUSH
5384: LD_STRING D1-JMM-4
5386: PPUSH
5387: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5391: LD_EXP 2
5395: PPUSH
5396: LD_STRING D1-Pow-4
5398: PPUSH
5399: CALL_OW 94
// SelectAndSaveCharacters ;
5403: CALL 4270 0 0
// InGameOff ;
5407: CALL_OW 9
// Query ( Q1 ) ;
5411: LD_STRING Q1
5413: PPUSH
5414: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5418: LD_INT 2
5420: PPUSH
5421: LD_INT 1
5423: PPUSH
5424: CALL_OW 424
// end ; end_of_file
5428: LD_VAR 0 1
5432: RET
// export globalGameSaveCounter ; every 0 0$1 do
5433: GO 5435
5435: DISABLE
// begin enable ;
5436: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5437: LD_STRING updateTimer(
5439: PUSH
5440: LD_OWVAR 1
5444: STR
5445: PUSH
5446: LD_STRING );
5448: STR
5449: PPUSH
5450: CALL_OW 559
// end ;
5454: END
// every 0 0$1 do
5455: GO 5457
5457: DISABLE
// begin globalGameSaveCounter := 0 ;
5458: LD_ADDR_EXP 24
5462: PUSH
5463: LD_INT 0
5465: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5466: LD_STRING setGameSaveCounter(0)
5468: PPUSH
5469: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5473: LD_STRING initStreamRollete();
5475: PPUSH
5476: CALL_OW 559
// InitStreamMode ;
5480: CALL 6806 0 0
// DefineStreamItems ( false ) ;
5484: LD_INT 0
5486: PPUSH
5487: CALL 7270 0 1
// end ;
5491: END
// export function SOS_MapStart ( ) ; begin
5492: LD_INT 0
5494: PPUSH
// if streamModeActive then
5495: LD_EXP 25
5499: IFFALSE 5508
// DefineStreamItems ( true ) ;
5501: LD_INT 1
5503: PPUSH
5504: CALL 7270 0 1
// UpdateLuaVariables ( ) ;
5508: CALL 5525 0 0
// UpdateFactoryWaypoints ( ) ;
5512: CALL 20131 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5516: CALL 20388 0 0
// end ;
5520: LD_VAR 0 1
5524: RET
// function UpdateLuaVariables ( ) ; begin
5525: LD_INT 0
5527: PPUSH
// if globalGameSaveCounter then
5528: LD_EXP 24
5532: IFFALSE 5566
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5534: LD_ADDR_EXP 24
5538: PUSH
5539: LD_EXP 24
5543: PPUSH
5544: CALL 64567 0 1
5548: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5549: LD_STRING setGameSaveCounter(
5551: PUSH
5552: LD_EXP 24
5556: STR
5557: PUSH
5558: LD_STRING )
5560: STR
5561: PPUSH
5562: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5566: LD_STRING setGameDifficulty(
5568: PUSH
5569: LD_OWVAR 67
5573: STR
5574: PUSH
5575: LD_STRING )
5577: STR
5578: PPUSH
5579: CALL_OW 559
// end ;
5583: LD_VAR 0 1
5587: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5588: LD_INT 0
5590: PPUSH
// if p2 = stream_mode then
5591: LD_VAR 0 2
5595: PUSH
5596: LD_INT 100
5598: EQUAL
5599: IFFALSE 6602
// begin if not StreamModeActive then
5601: LD_EXP 25
5605: NOT
5606: IFFALSE 5616
// StreamModeActive := true ;
5608: LD_ADDR_EXP 25
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 0 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 0
5623: EQUAL
5624: IFFALSE 5630
// InitStreamMode ;
5626: CALL 6806 0 0
// if p3 = 1 then
5630: LD_VAR 0 3
5634: PUSH
5635: LD_INT 1
5637: EQUAL
5638: IFFALSE 5648
// sRocket := true ;
5640: LD_ADDR_EXP 30
5644: PUSH
5645: LD_INT 1
5647: ST_TO_ADDR
// if p3 = 2 then
5648: LD_VAR 0 3
5652: PUSH
5653: LD_INT 2
5655: EQUAL
5656: IFFALSE 5666
// sSpeed := true ;
5658: LD_ADDR_EXP 29
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// if p3 = 3 then
5666: LD_VAR 0 3
5670: PUSH
5671: LD_INT 3
5673: EQUAL
5674: IFFALSE 5684
// sEngine := true ;
5676: LD_ADDR_EXP 31
5680: PUSH
5681: LD_INT 1
5683: ST_TO_ADDR
// if p3 = 4 then
5684: LD_VAR 0 3
5688: PUSH
5689: LD_INT 4
5691: EQUAL
5692: IFFALSE 5702
// sSpec := true ;
5694: LD_ADDR_EXP 28
5698: PUSH
5699: LD_INT 1
5701: ST_TO_ADDR
// if p3 = 5 then
5702: LD_VAR 0 3
5706: PUSH
5707: LD_INT 5
5709: EQUAL
5710: IFFALSE 5720
// sLevel := true ;
5712: LD_ADDR_EXP 32
5716: PUSH
5717: LD_INT 1
5719: ST_TO_ADDR
// if p3 = 6 then
5720: LD_VAR 0 3
5724: PUSH
5725: LD_INT 6
5727: EQUAL
5728: IFFALSE 5738
// sArmoury := true ;
5730: LD_ADDR_EXP 33
5734: PUSH
5735: LD_INT 1
5737: ST_TO_ADDR
// if p3 = 7 then
5738: LD_VAR 0 3
5742: PUSH
5743: LD_INT 7
5745: EQUAL
5746: IFFALSE 5756
// sRadar := true ;
5748: LD_ADDR_EXP 34
5752: PUSH
5753: LD_INT 1
5755: ST_TO_ADDR
// if p3 = 8 then
5756: LD_VAR 0 3
5760: PUSH
5761: LD_INT 8
5763: EQUAL
5764: IFFALSE 5774
// sBunker := true ;
5766: LD_ADDR_EXP 35
5770: PUSH
5771: LD_INT 1
5773: ST_TO_ADDR
// if p3 = 9 then
5774: LD_VAR 0 3
5778: PUSH
5779: LD_INT 9
5781: EQUAL
5782: IFFALSE 5792
// sHack := true ;
5784: LD_ADDR_EXP 36
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// if p3 = 10 then
5792: LD_VAR 0 3
5796: PUSH
5797: LD_INT 10
5799: EQUAL
5800: IFFALSE 5810
// sFire := true ;
5802: LD_ADDR_EXP 37
5806: PUSH
5807: LD_INT 1
5809: ST_TO_ADDR
// if p3 = 11 then
5810: LD_VAR 0 3
5814: PUSH
5815: LD_INT 11
5817: EQUAL
5818: IFFALSE 5828
// sRefresh := true ;
5820: LD_ADDR_EXP 38
5824: PUSH
5825: LD_INT 1
5827: ST_TO_ADDR
// if p3 = 12 then
5828: LD_VAR 0 3
5832: PUSH
5833: LD_INT 12
5835: EQUAL
5836: IFFALSE 5846
// sExp := true ;
5838: LD_ADDR_EXP 39
5842: PUSH
5843: LD_INT 1
5845: ST_TO_ADDR
// if p3 = 13 then
5846: LD_VAR 0 3
5850: PUSH
5851: LD_INT 13
5853: EQUAL
5854: IFFALSE 5864
// sDepot := true ;
5856: LD_ADDR_EXP 40
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// if p3 = 14 then
5864: LD_VAR 0 3
5868: PUSH
5869: LD_INT 14
5871: EQUAL
5872: IFFALSE 5882
// sFlag := true ;
5874: LD_ADDR_EXP 41
5878: PUSH
5879: LD_INT 1
5881: ST_TO_ADDR
// if p3 = 15 then
5882: LD_VAR 0 3
5886: PUSH
5887: LD_INT 15
5889: EQUAL
5890: IFFALSE 5900
// sKamikadze := true ;
5892: LD_ADDR_EXP 49
5896: PUSH
5897: LD_INT 1
5899: ST_TO_ADDR
// if p3 = 16 then
5900: LD_VAR 0 3
5904: PUSH
5905: LD_INT 16
5907: EQUAL
5908: IFFALSE 5918
// sTroll := true ;
5910: LD_ADDR_EXP 50
5914: PUSH
5915: LD_INT 1
5917: ST_TO_ADDR
// if p3 = 17 then
5918: LD_VAR 0 3
5922: PUSH
5923: LD_INT 17
5925: EQUAL
5926: IFFALSE 5936
// sSlow := true ;
5928: LD_ADDR_EXP 51
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if p3 = 18 then
5936: LD_VAR 0 3
5940: PUSH
5941: LD_INT 18
5943: EQUAL
5944: IFFALSE 5954
// sLack := true ;
5946: LD_ADDR_EXP 52
5950: PUSH
5951: LD_INT 1
5953: ST_TO_ADDR
// if p3 = 19 then
5954: LD_VAR 0 3
5958: PUSH
5959: LD_INT 19
5961: EQUAL
5962: IFFALSE 5972
// sTank := true ;
5964: LD_ADDR_EXP 54
5968: PUSH
5969: LD_INT 1
5971: ST_TO_ADDR
// if p3 = 20 then
5972: LD_VAR 0 3
5976: PUSH
5977: LD_INT 20
5979: EQUAL
5980: IFFALSE 5990
// sRemote := true ;
5982: LD_ADDR_EXP 55
5986: PUSH
5987: LD_INT 1
5989: ST_TO_ADDR
// if p3 = 21 then
5990: LD_VAR 0 3
5994: PUSH
5995: LD_INT 21
5997: EQUAL
5998: IFFALSE 6008
// sPowell := true ;
6000: LD_ADDR_EXP 56
6004: PUSH
6005: LD_INT 1
6007: ST_TO_ADDR
// if p3 = 22 then
6008: LD_VAR 0 3
6012: PUSH
6013: LD_INT 22
6015: EQUAL
6016: IFFALSE 6026
// sTeleport := true ;
6018: LD_ADDR_EXP 59
6022: PUSH
6023: LD_INT 1
6025: ST_TO_ADDR
// if p3 = 23 then
6026: LD_VAR 0 3
6030: PUSH
6031: LD_INT 23
6033: EQUAL
6034: IFFALSE 6044
// sOilTower := true ;
6036: LD_ADDR_EXP 61
6040: PUSH
6041: LD_INT 1
6043: ST_TO_ADDR
// if p3 = 24 then
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 24
6051: EQUAL
6052: IFFALSE 6062
// sShovel := true ;
6054: LD_ADDR_EXP 62
6058: PUSH
6059: LD_INT 1
6061: ST_TO_ADDR
// if p3 = 25 then
6062: LD_VAR 0 3
6066: PUSH
6067: LD_INT 25
6069: EQUAL
6070: IFFALSE 6080
// sSheik := true ;
6072: LD_ADDR_EXP 63
6076: PUSH
6077: LD_INT 1
6079: ST_TO_ADDR
// if p3 = 26 then
6080: LD_VAR 0 3
6084: PUSH
6085: LD_INT 26
6087: EQUAL
6088: IFFALSE 6098
// sEarthquake := true ;
6090: LD_ADDR_EXP 65
6094: PUSH
6095: LD_INT 1
6097: ST_TO_ADDR
// if p3 = 27 then
6098: LD_VAR 0 3
6102: PUSH
6103: LD_INT 27
6105: EQUAL
6106: IFFALSE 6116
// sAI := true ;
6108: LD_ADDR_EXP 66
6112: PUSH
6113: LD_INT 1
6115: ST_TO_ADDR
// if p3 = 28 then
6116: LD_VAR 0 3
6120: PUSH
6121: LD_INT 28
6123: EQUAL
6124: IFFALSE 6134
// sCargo := true ;
6126: LD_ADDR_EXP 69
6130: PUSH
6131: LD_INT 1
6133: ST_TO_ADDR
// if p3 = 29 then
6134: LD_VAR 0 3
6138: PUSH
6139: LD_INT 29
6141: EQUAL
6142: IFFALSE 6152
// sDLaser := true ;
6144: LD_ADDR_EXP 70
6148: PUSH
6149: LD_INT 1
6151: ST_TO_ADDR
// if p3 = 30 then
6152: LD_VAR 0 3
6156: PUSH
6157: LD_INT 30
6159: EQUAL
6160: IFFALSE 6170
// sExchange := true ;
6162: LD_ADDR_EXP 71
6166: PUSH
6167: LD_INT 1
6169: ST_TO_ADDR
// if p3 = 31 then
6170: LD_VAR 0 3
6174: PUSH
6175: LD_INT 31
6177: EQUAL
6178: IFFALSE 6188
// sFac := true ;
6180: LD_ADDR_EXP 72
6184: PUSH
6185: LD_INT 1
6187: ST_TO_ADDR
// if p3 = 32 then
6188: LD_VAR 0 3
6192: PUSH
6193: LD_INT 32
6195: EQUAL
6196: IFFALSE 6206
// sPower := true ;
6198: LD_ADDR_EXP 73
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// if p3 = 33 then
6206: LD_VAR 0 3
6210: PUSH
6211: LD_INT 33
6213: EQUAL
6214: IFFALSE 6224
// sRandom := true ;
6216: LD_ADDR_EXP 74
6220: PUSH
6221: LD_INT 1
6223: ST_TO_ADDR
// if p3 = 34 then
6224: LD_VAR 0 3
6228: PUSH
6229: LD_INT 34
6231: EQUAL
6232: IFFALSE 6242
// sShield := true ;
6234: LD_ADDR_EXP 75
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// if p3 = 35 then
6242: LD_VAR 0 3
6246: PUSH
6247: LD_INT 35
6249: EQUAL
6250: IFFALSE 6260
// sTime := true ;
6252: LD_ADDR_EXP 76
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
// if p3 = 36 then
6260: LD_VAR 0 3
6264: PUSH
6265: LD_INT 36
6267: EQUAL
6268: IFFALSE 6278
// sTools := true ;
6270: LD_ADDR_EXP 77
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// if p3 = 101 then
6278: LD_VAR 0 3
6282: PUSH
6283: LD_INT 101
6285: EQUAL
6286: IFFALSE 6296
// sSold := true ;
6288: LD_ADDR_EXP 42
6292: PUSH
6293: LD_INT 1
6295: ST_TO_ADDR
// if p3 = 102 then
6296: LD_VAR 0 3
6300: PUSH
6301: LD_INT 102
6303: EQUAL
6304: IFFALSE 6314
// sDiff := true ;
6306: LD_ADDR_EXP 43
6310: PUSH
6311: LD_INT 1
6313: ST_TO_ADDR
// if p3 = 103 then
6314: LD_VAR 0 3
6318: PUSH
6319: LD_INT 103
6321: EQUAL
6322: IFFALSE 6332
// sFog := true ;
6324: LD_ADDR_EXP 46
6328: PUSH
6329: LD_INT 1
6331: ST_TO_ADDR
// if p3 = 104 then
6332: LD_VAR 0 3
6336: PUSH
6337: LD_INT 104
6339: EQUAL
6340: IFFALSE 6350
// sReset := true ;
6342: LD_ADDR_EXP 47
6346: PUSH
6347: LD_INT 1
6349: ST_TO_ADDR
// if p3 = 105 then
6350: LD_VAR 0 3
6354: PUSH
6355: LD_INT 105
6357: EQUAL
6358: IFFALSE 6368
// sSun := true ;
6360: LD_ADDR_EXP 48
6364: PUSH
6365: LD_INT 1
6367: ST_TO_ADDR
// if p3 = 106 then
6368: LD_VAR 0 3
6372: PUSH
6373: LD_INT 106
6375: EQUAL
6376: IFFALSE 6386
// sTiger := true ;
6378: LD_ADDR_EXP 44
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// if p3 = 107 then
6386: LD_VAR 0 3
6390: PUSH
6391: LD_INT 107
6393: EQUAL
6394: IFFALSE 6404
// sBomb := true ;
6396: LD_ADDR_EXP 45
6400: PUSH
6401: LD_INT 1
6403: ST_TO_ADDR
// if p3 = 108 then
6404: LD_VAR 0 3
6408: PUSH
6409: LD_INT 108
6411: EQUAL
6412: IFFALSE 6422
// sWound := true ;
6414: LD_ADDR_EXP 53
6418: PUSH
6419: LD_INT 1
6421: ST_TO_ADDR
// if p3 = 109 then
6422: LD_VAR 0 3
6426: PUSH
6427: LD_INT 109
6429: EQUAL
6430: IFFALSE 6440
// sBetray := true ;
6432: LD_ADDR_EXP 57
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// if p3 = 110 then
6440: LD_VAR 0 3
6444: PUSH
6445: LD_INT 110
6447: EQUAL
6448: IFFALSE 6458
// sContamin := true ;
6450: LD_ADDR_EXP 58
6454: PUSH
6455: LD_INT 1
6457: ST_TO_ADDR
// if p3 = 111 then
6458: LD_VAR 0 3
6462: PUSH
6463: LD_INT 111
6465: EQUAL
6466: IFFALSE 6476
// sOil := true ;
6468: LD_ADDR_EXP 60
6472: PUSH
6473: LD_INT 1
6475: ST_TO_ADDR
// if p3 = 112 then
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 112
6483: EQUAL
6484: IFFALSE 6494
// sStu := true ;
6486: LD_ADDR_EXP 64
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// if p3 = 113 then
6494: LD_VAR 0 3
6498: PUSH
6499: LD_INT 113
6501: EQUAL
6502: IFFALSE 6512
// sBazooka := true ;
6504: LD_ADDR_EXP 67
6508: PUSH
6509: LD_INT 1
6511: ST_TO_ADDR
// if p3 = 114 then
6512: LD_VAR 0 3
6516: PUSH
6517: LD_INT 114
6519: EQUAL
6520: IFFALSE 6530
// sMortar := true ;
6522: LD_ADDR_EXP 68
6526: PUSH
6527: LD_INT 1
6529: ST_TO_ADDR
// if p3 = 115 then
6530: LD_VAR 0 3
6534: PUSH
6535: LD_INT 115
6537: EQUAL
6538: IFFALSE 6548
// sRanger := true ;
6540: LD_ADDR_EXP 78
6544: PUSH
6545: LD_INT 1
6547: ST_TO_ADDR
// if p3 = 116 then
6548: LD_VAR 0 3
6552: PUSH
6553: LD_INT 116
6555: EQUAL
6556: IFFALSE 6566
// sComputer := true ;
6558: LD_ADDR_EXP 79
6562: PUSH
6563: LD_INT 1
6565: ST_TO_ADDR
// if p3 = 117 then
6566: LD_VAR 0 3
6570: PUSH
6571: LD_INT 117
6573: EQUAL
6574: IFFALSE 6584
// s30 := true ;
6576: LD_ADDR_EXP 80
6580: PUSH
6581: LD_INT 1
6583: ST_TO_ADDR
// if p3 = 118 then
6584: LD_VAR 0 3
6588: PUSH
6589: LD_INT 118
6591: EQUAL
6592: IFFALSE 6602
// s60 := true ;
6594: LD_ADDR_EXP 81
6598: PUSH
6599: LD_INT 1
6601: ST_TO_ADDR
// end ; if p2 = hack_mode then
6602: LD_VAR 0 2
6606: PUSH
6607: LD_INT 101
6609: EQUAL
6610: IFFALSE 6738
// begin case p3 of 1 :
6612: LD_VAR 0 3
6616: PUSH
6617: LD_INT 1
6619: DOUBLE
6620: EQUAL
6621: IFTRUE 6625
6623: GO 6632
6625: POP
// hHackUnlimitedResources ; 2 :
6626: CALL 18877 0 0
6630: GO 6738
6632: LD_INT 2
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6647
6640: POP
// hHackSetLevel10 ; 3 :
6641: CALL 19010 0 0
6645: GO 6738
6647: LD_INT 3
6649: DOUBLE
6650: EQUAL
6651: IFTRUE 6655
6653: GO 6662
6655: POP
// hHackSetLevel10YourUnits ; 4 :
6656: CALL 19095 0 0
6660: GO 6738
6662: LD_INT 4
6664: DOUBLE
6665: EQUAL
6666: IFTRUE 6670
6668: GO 6677
6670: POP
// hHackInvincible ; 5 :
6671: CALL 19543 0 0
6675: GO 6738
6677: LD_INT 5
6679: DOUBLE
6680: EQUAL
6681: IFTRUE 6685
6683: GO 6692
6685: POP
// hHackInvisible ; 6 :
6686: CALL 19654 0 0
6690: GO 6738
6692: LD_INT 6
6694: DOUBLE
6695: EQUAL
6696: IFTRUE 6700
6698: GO 6707
6700: POP
// hHackChangeYourSide ; 7 :
6701: CALL 19711 0 0
6705: GO 6738
6707: LD_INT 7
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 6722
6715: POP
// hHackChangeUnitSide ; 8 :
6716: CALL 19753 0 0
6720: GO 6738
6722: LD_INT 8
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6737
6730: POP
// hHackFog ; end ;
6731: CALL 19854 0 0
6735: GO 6738
6737: POP
// end ; if p2 = game_save_mode then
6738: LD_VAR 0 2
6742: PUSH
6743: LD_INT 102
6745: EQUAL
6746: IFFALSE 6801
// begin if p3 = 1 then
6748: LD_VAR 0 3
6752: PUSH
6753: LD_INT 1
6755: EQUAL
6756: IFFALSE 6768
// globalGameSaveCounter := p4 ;
6758: LD_ADDR_EXP 24
6762: PUSH
6763: LD_VAR 0 4
6767: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6768: LD_VAR 0 3
6772: PUSH
6773: LD_INT 2
6775: EQUAL
6776: PUSH
6777: LD_EXP 24
6781: AND
6782: IFFALSE 6801
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6784: LD_STRING setGameSaveCounter(
6786: PUSH
6787: LD_EXP 24
6791: STR
6792: PUSH
6793: LD_STRING )
6795: STR
6796: PPUSH
6797: CALL_OW 559
// end ; end ;
6801: LD_VAR 0 7
6805: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6806: LD_INT 0
6808: PPUSH
// streamModeActive := false ;
6809: LD_ADDR_EXP 25
6813: PUSH
6814: LD_INT 0
6816: ST_TO_ADDR
// normalCounter := 36 ;
6817: LD_ADDR_EXP 26
6821: PUSH
6822: LD_INT 36
6824: ST_TO_ADDR
// hardcoreCounter := 18 ;
6825: LD_ADDR_EXP 27
6829: PUSH
6830: LD_INT 18
6832: ST_TO_ADDR
// sRocket := false ;
6833: LD_ADDR_EXP 30
6837: PUSH
6838: LD_INT 0
6840: ST_TO_ADDR
// sSpeed := false ;
6841: LD_ADDR_EXP 29
6845: PUSH
6846: LD_INT 0
6848: ST_TO_ADDR
// sEngine := false ;
6849: LD_ADDR_EXP 31
6853: PUSH
6854: LD_INT 0
6856: ST_TO_ADDR
// sSpec := false ;
6857: LD_ADDR_EXP 28
6861: PUSH
6862: LD_INT 0
6864: ST_TO_ADDR
// sLevel := false ;
6865: LD_ADDR_EXP 32
6869: PUSH
6870: LD_INT 0
6872: ST_TO_ADDR
// sArmoury := false ;
6873: LD_ADDR_EXP 33
6877: PUSH
6878: LD_INT 0
6880: ST_TO_ADDR
// sRadar := false ;
6881: LD_ADDR_EXP 34
6885: PUSH
6886: LD_INT 0
6888: ST_TO_ADDR
// sBunker := false ;
6889: LD_ADDR_EXP 35
6893: PUSH
6894: LD_INT 0
6896: ST_TO_ADDR
// sHack := false ;
6897: LD_ADDR_EXP 36
6901: PUSH
6902: LD_INT 0
6904: ST_TO_ADDR
// sFire := false ;
6905: LD_ADDR_EXP 37
6909: PUSH
6910: LD_INT 0
6912: ST_TO_ADDR
// sRefresh := false ;
6913: LD_ADDR_EXP 38
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// sExp := false ;
6921: LD_ADDR_EXP 39
6925: PUSH
6926: LD_INT 0
6928: ST_TO_ADDR
// sDepot := false ;
6929: LD_ADDR_EXP 40
6933: PUSH
6934: LD_INT 0
6936: ST_TO_ADDR
// sFlag := false ;
6937: LD_ADDR_EXP 41
6941: PUSH
6942: LD_INT 0
6944: ST_TO_ADDR
// sKamikadze := false ;
6945: LD_ADDR_EXP 49
6949: PUSH
6950: LD_INT 0
6952: ST_TO_ADDR
// sTroll := false ;
6953: LD_ADDR_EXP 50
6957: PUSH
6958: LD_INT 0
6960: ST_TO_ADDR
// sSlow := false ;
6961: LD_ADDR_EXP 51
6965: PUSH
6966: LD_INT 0
6968: ST_TO_ADDR
// sLack := false ;
6969: LD_ADDR_EXP 52
6973: PUSH
6974: LD_INT 0
6976: ST_TO_ADDR
// sTank := false ;
6977: LD_ADDR_EXP 54
6981: PUSH
6982: LD_INT 0
6984: ST_TO_ADDR
// sRemote := false ;
6985: LD_ADDR_EXP 55
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// sPowell := false ;
6993: LD_ADDR_EXP 56
6997: PUSH
6998: LD_INT 0
7000: ST_TO_ADDR
// sTeleport := false ;
7001: LD_ADDR_EXP 59
7005: PUSH
7006: LD_INT 0
7008: ST_TO_ADDR
// sOilTower := false ;
7009: LD_ADDR_EXP 61
7013: PUSH
7014: LD_INT 0
7016: ST_TO_ADDR
// sShovel := false ;
7017: LD_ADDR_EXP 62
7021: PUSH
7022: LD_INT 0
7024: ST_TO_ADDR
// sSheik := false ;
7025: LD_ADDR_EXP 63
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
// sEarthquake := false ;
7033: LD_ADDR_EXP 65
7037: PUSH
7038: LD_INT 0
7040: ST_TO_ADDR
// sAI := false ;
7041: LD_ADDR_EXP 66
7045: PUSH
7046: LD_INT 0
7048: ST_TO_ADDR
// sCargo := false ;
7049: LD_ADDR_EXP 69
7053: PUSH
7054: LD_INT 0
7056: ST_TO_ADDR
// sDLaser := false ;
7057: LD_ADDR_EXP 70
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// sExchange := false ;
7065: LD_ADDR_EXP 71
7069: PUSH
7070: LD_INT 0
7072: ST_TO_ADDR
// sFac := false ;
7073: LD_ADDR_EXP 72
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// sPower := false ;
7081: LD_ADDR_EXP 73
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// sRandom := false ;
7089: LD_ADDR_EXP 74
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// sShield := false ;
7097: LD_ADDR_EXP 75
7101: PUSH
7102: LD_INT 0
7104: ST_TO_ADDR
// sTime := false ;
7105: LD_ADDR_EXP 76
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// sTools := false ;
7113: LD_ADDR_EXP 77
7117: PUSH
7118: LD_INT 0
7120: ST_TO_ADDR
// sSold := false ;
7121: LD_ADDR_EXP 42
7125: PUSH
7126: LD_INT 0
7128: ST_TO_ADDR
// sDiff := false ;
7129: LD_ADDR_EXP 43
7133: PUSH
7134: LD_INT 0
7136: ST_TO_ADDR
// sFog := false ;
7137: LD_ADDR_EXP 46
7141: PUSH
7142: LD_INT 0
7144: ST_TO_ADDR
// sReset := false ;
7145: LD_ADDR_EXP 47
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// sSun := false ;
7153: LD_ADDR_EXP 48
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// sTiger := false ;
7161: LD_ADDR_EXP 44
7165: PUSH
7166: LD_INT 0
7168: ST_TO_ADDR
// sBomb := false ;
7169: LD_ADDR_EXP 45
7173: PUSH
7174: LD_INT 0
7176: ST_TO_ADDR
// sWound := false ;
7177: LD_ADDR_EXP 53
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// sBetray := false ;
7185: LD_ADDR_EXP 57
7189: PUSH
7190: LD_INT 0
7192: ST_TO_ADDR
// sContamin := false ;
7193: LD_ADDR_EXP 58
7197: PUSH
7198: LD_INT 0
7200: ST_TO_ADDR
// sOil := false ;
7201: LD_ADDR_EXP 60
7205: PUSH
7206: LD_INT 0
7208: ST_TO_ADDR
// sStu := false ;
7209: LD_ADDR_EXP 64
7213: PUSH
7214: LD_INT 0
7216: ST_TO_ADDR
// sBazooka := false ;
7217: LD_ADDR_EXP 67
7221: PUSH
7222: LD_INT 0
7224: ST_TO_ADDR
// sMortar := false ;
7225: LD_ADDR_EXP 68
7229: PUSH
7230: LD_INT 0
7232: ST_TO_ADDR
// sRanger := false ;
7233: LD_ADDR_EXP 78
7237: PUSH
7238: LD_INT 0
7240: ST_TO_ADDR
// sComputer := false ;
7241: LD_ADDR_EXP 79
7245: PUSH
7246: LD_INT 0
7248: ST_TO_ADDR
// s30 := false ;
7249: LD_ADDR_EXP 80
7253: PUSH
7254: LD_INT 0
7256: ST_TO_ADDR
// s60 := false ;
7257: LD_ADDR_EXP 81
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// end ;
7265: LD_VAR 0 1
7269: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7270: LD_INT 0
7272: PPUSH
7273: PPUSH
7274: PPUSH
7275: PPUSH
7276: PPUSH
7277: PPUSH
7278: PPUSH
// result := [ ] ;
7279: LD_ADDR_VAR 0 2
7283: PUSH
7284: EMPTY
7285: ST_TO_ADDR
// if campaign_id = 1 then
7286: LD_OWVAR 69
7290: PUSH
7291: LD_INT 1
7293: EQUAL
7294: IFFALSE 10460
// begin case mission_number of 1 :
7296: LD_OWVAR 70
7300: PUSH
7301: LD_INT 1
7303: DOUBLE
7304: EQUAL
7305: IFTRUE 7309
7307: GO 7385
7309: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7310: LD_ADDR_VAR 0 2
7314: PUSH
7315: LD_INT 2
7317: PUSH
7318: LD_INT 4
7320: PUSH
7321: LD_INT 11
7323: PUSH
7324: LD_INT 12
7326: PUSH
7327: LD_INT 15
7329: PUSH
7330: LD_INT 16
7332: PUSH
7333: LD_INT 22
7335: PUSH
7336: LD_INT 23
7338: PUSH
7339: LD_INT 26
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 101
7355: PUSH
7356: LD_INT 102
7358: PUSH
7359: LD_INT 106
7361: PUSH
7362: LD_INT 116
7364: PUSH
7365: LD_INT 117
7367: PUSH
7368: LD_INT 118
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: ST_TO_ADDR
7383: GO 10458
7385: LD_INT 2
7387: DOUBLE
7388: EQUAL
7389: IFTRUE 7393
7391: GO 7477
7393: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 2
7401: PUSH
7402: LD_INT 4
7404: PUSH
7405: LD_INT 11
7407: PUSH
7408: LD_INT 12
7410: PUSH
7411: LD_INT 15
7413: PUSH
7414: LD_INT 16
7416: PUSH
7417: LD_INT 22
7419: PUSH
7420: LD_INT 23
7422: PUSH
7423: LD_INT 26
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 101
7439: PUSH
7440: LD_INT 102
7442: PUSH
7443: LD_INT 105
7445: PUSH
7446: LD_INT 106
7448: PUSH
7449: LD_INT 108
7451: PUSH
7452: LD_INT 116
7454: PUSH
7455: LD_INT 117
7457: PUSH
7458: LD_INT 118
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: ST_TO_ADDR
7475: GO 10458
7477: LD_INT 3
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7485
7483: GO 7573
7485: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_INT 2
7493: PUSH
7494: LD_INT 4
7496: PUSH
7497: LD_INT 5
7499: PUSH
7500: LD_INT 11
7502: PUSH
7503: LD_INT 12
7505: PUSH
7506: LD_INT 15
7508: PUSH
7509: LD_INT 16
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 26
7517: PUSH
7518: LD_INT 36
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 101
7535: PUSH
7536: LD_INT 102
7538: PUSH
7539: LD_INT 105
7541: PUSH
7542: LD_INT 106
7544: PUSH
7545: LD_INT 108
7547: PUSH
7548: LD_INT 116
7550: PUSH
7551: LD_INT 117
7553: PUSH
7554: LD_INT 118
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: ST_TO_ADDR
7571: GO 10458
7573: LD_INT 4
7575: DOUBLE
7576: EQUAL
7577: IFTRUE 7581
7579: GO 7677
7581: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_INT 2
7589: PUSH
7590: LD_INT 4
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 8
7598: PUSH
7599: LD_INT 11
7601: PUSH
7602: LD_INT 12
7604: PUSH
7605: LD_INT 15
7607: PUSH
7608: LD_INT 16
7610: PUSH
7611: LD_INT 22
7613: PUSH
7614: LD_INT 23
7616: PUSH
7617: LD_INT 26
7619: PUSH
7620: LD_INT 36
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 101
7639: PUSH
7640: LD_INT 102
7642: PUSH
7643: LD_INT 105
7645: PUSH
7646: LD_INT 106
7648: PUSH
7649: LD_INT 108
7651: PUSH
7652: LD_INT 116
7654: PUSH
7655: LD_INT 117
7657: PUSH
7658: LD_INT 118
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: ST_TO_ADDR
7675: GO 10458
7677: LD_INT 5
7679: DOUBLE
7680: EQUAL
7681: IFTRUE 7685
7683: GO 7797
7685: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7686: LD_ADDR_VAR 0 2
7690: PUSH
7691: LD_INT 2
7693: PUSH
7694: LD_INT 4
7696: PUSH
7697: LD_INT 5
7699: PUSH
7700: LD_INT 6
7702: PUSH
7703: LD_INT 8
7705: PUSH
7706: LD_INT 11
7708: PUSH
7709: LD_INT 12
7711: PUSH
7712: LD_INT 15
7714: PUSH
7715: LD_INT 16
7717: PUSH
7718: LD_INT 22
7720: PUSH
7721: LD_INT 23
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 26
7729: PUSH
7730: LD_INT 36
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 101
7751: PUSH
7752: LD_INT 102
7754: PUSH
7755: LD_INT 105
7757: PUSH
7758: LD_INT 106
7760: PUSH
7761: LD_INT 108
7763: PUSH
7764: LD_INT 109
7766: PUSH
7767: LD_INT 112
7769: PUSH
7770: LD_INT 116
7772: PUSH
7773: LD_INT 117
7775: PUSH
7776: LD_INT 118
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: ST_TO_ADDR
7795: GO 10458
7797: LD_INT 6
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7937
7805: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7806: LD_ADDR_VAR 0 2
7810: PUSH
7811: LD_INT 2
7813: PUSH
7814: LD_INT 4
7816: PUSH
7817: LD_INT 5
7819: PUSH
7820: LD_INT 6
7822: PUSH
7823: LD_INT 8
7825: PUSH
7826: LD_INT 11
7828: PUSH
7829: LD_INT 12
7831: PUSH
7832: LD_INT 15
7834: PUSH
7835: LD_INT 16
7837: PUSH
7838: LD_INT 20
7840: PUSH
7841: LD_INT 21
7843: PUSH
7844: LD_INT 22
7846: PUSH
7847: LD_INT 23
7849: PUSH
7850: LD_INT 25
7852: PUSH
7853: LD_INT 26
7855: PUSH
7856: LD_INT 30
7858: PUSH
7859: LD_INT 31
7861: PUSH
7862: LD_INT 32
7864: PUSH
7865: LD_INT 36
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 101
7891: PUSH
7892: LD_INT 102
7894: PUSH
7895: LD_INT 105
7897: PUSH
7898: LD_INT 106
7900: PUSH
7901: LD_INT 108
7903: PUSH
7904: LD_INT 109
7906: PUSH
7907: LD_INT 112
7909: PUSH
7910: LD_INT 116
7912: PUSH
7913: LD_INT 117
7915: PUSH
7916: LD_INT 118
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: ST_TO_ADDR
7935: GO 10458
7937: LD_INT 7
7939: DOUBLE
7940: EQUAL
7941: IFTRUE 7945
7943: GO 8057
7945: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7946: LD_ADDR_VAR 0 2
7950: PUSH
7951: LD_INT 2
7953: PUSH
7954: LD_INT 4
7956: PUSH
7957: LD_INT 5
7959: PUSH
7960: LD_INT 7
7962: PUSH
7963: LD_INT 11
7965: PUSH
7966: LD_INT 12
7968: PUSH
7969: LD_INT 15
7971: PUSH
7972: LD_INT 16
7974: PUSH
7975: LD_INT 20
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 23
7986: PUSH
7987: LD_INT 25
7989: PUSH
7990: LD_INT 26
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 101
8011: PUSH
8012: LD_INT 102
8014: PUSH
8015: LD_INT 103
8017: PUSH
8018: LD_INT 105
8020: PUSH
8021: LD_INT 106
8023: PUSH
8024: LD_INT 108
8026: PUSH
8027: LD_INT 112
8029: PUSH
8030: LD_INT 116
8032: PUSH
8033: LD_INT 117
8035: PUSH
8036: LD_INT 118
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: ST_TO_ADDR
8055: GO 10458
8057: LD_INT 8
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8205
8065: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8066: LD_ADDR_VAR 0 2
8070: PUSH
8071: LD_INT 2
8073: PUSH
8074: LD_INT 4
8076: PUSH
8077: LD_INT 5
8079: PUSH
8080: LD_INT 6
8082: PUSH
8083: LD_INT 7
8085: PUSH
8086: LD_INT 8
8088: PUSH
8089: LD_INT 11
8091: PUSH
8092: LD_INT 12
8094: PUSH
8095: LD_INT 15
8097: PUSH
8098: LD_INT 16
8100: PUSH
8101: LD_INT 20
8103: PUSH
8104: LD_INT 21
8106: PUSH
8107: LD_INT 22
8109: PUSH
8110: LD_INT 23
8112: PUSH
8113: LD_INT 25
8115: PUSH
8116: LD_INT 26
8118: PUSH
8119: LD_INT 30
8121: PUSH
8122: LD_INT 31
8124: PUSH
8125: LD_INT 32
8127: PUSH
8128: LD_INT 36
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 101
8155: PUSH
8156: LD_INT 102
8158: PUSH
8159: LD_INT 103
8161: PUSH
8162: LD_INT 105
8164: PUSH
8165: LD_INT 106
8167: PUSH
8168: LD_INT 108
8170: PUSH
8171: LD_INT 109
8173: PUSH
8174: LD_INT 112
8176: PUSH
8177: LD_INT 116
8179: PUSH
8180: LD_INT 117
8182: PUSH
8183: LD_INT 118
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: ST_TO_ADDR
8203: GO 10458
8205: LD_INT 9
8207: DOUBLE
8208: EQUAL
8209: IFTRUE 8213
8211: GO 8361
8213: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8214: LD_ADDR_VAR 0 2
8218: PUSH
8219: LD_INT 2
8221: PUSH
8222: LD_INT 4
8224: PUSH
8225: LD_INT 5
8227: PUSH
8228: LD_INT 6
8230: PUSH
8231: LD_INT 7
8233: PUSH
8234: LD_INT 8
8236: PUSH
8237: LD_INT 11
8239: PUSH
8240: LD_INT 12
8242: PUSH
8243: LD_INT 15
8245: PUSH
8246: LD_INT 16
8248: PUSH
8249: LD_INT 20
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 22
8257: PUSH
8258: LD_INT 23
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 26
8266: PUSH
8267: LD_INT 28
8269: PUSH
8270: LD_INT 30
8272: PUSH
8273: LD_INT 31
8275: PUSH
8276: LD_INT 32
8278: PUSH
8279: LD_INT 36
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 101
8307: PUSH
8308: LD_INT 102
8310: PUSH
8311: LD_INT 103
8313: PUSH
8314: LD_INT 105
8316: PUSH
8317: LD_INT 106
8319: PUSH
8320: LD_INT 108
8322: PUSH
8323: LD_INT 109
8325: PUSH
8326: LD_INT 112
8328: PUSH
8329: LD_INT 114
8331: PUSH
8332: LD_INT 116
8334: PUSH
8335: LD_INT 117
8337: PUSH
8338: LD_INT 118
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: ST_TO_ADDR
8359: GO 10458
8361: LD_INT 10
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8565
8369: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8370: LD_ADDR_VAR 0 2
8374: PUSH
8375: LD_INT 2
8377: PUSH
8378: LD_INT 4
8380: PUSH
8381: LD_INT 5
8383: PUSH
8384: LD_INT 6
8386: PUSH
8387: LD_INT 7
8389: PUSH
8390: LD_INT 8
8392: PUSH
8393: LD_INT 9
8395: PUSH
8396: LD_INT 10
8398: PUSH
8399: LD_INT 11
8401: PUSH
8402: LD_INT 12
8404: PUSH
8405: LD_INT 13
8407: PUSH
8408: LD_INT 14
8410: PUSH
8411: LD_INT 15
8413: PUSH
8414: LD_INT 16
8416: PUSH
8417: LD_INT 17
8419: PUSH
8420: LD_INT 18
8422: PUSH
8423: LD_INT 19
8425: PUSH
8426: LD_INT 20
8428: PUSH
8429: LD_INT 21
8431: PUSH
8432: LD_INT 22
8434: PUSH
8435: LD_INT 23
8437: PUSH
8438: LD_INT 24
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 26
8446: PUSH
8447: LD_INT 28
8449: PUSH
8450: LD_INT 30
8452: PUSH
8453: LD_INT 31
8455: PUSH
8456: LD_INT 32
8458: PUSH
8459: LD_INT 36
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 101
8495: PUSH
8496: LD_INT 102
8498: PUSH
8499: LD_INT 103
8501: PUSH
8502: LD_INT 104
8504: PUSH
8505: LD_INT 105
8507: PUSH
8508: LD_INT 106
8510: PUSH
8511: LD_INT 107
8513: PUSH
8514: LD_INT 108
8516: PUSH
8517: LD_INT 109
8519: PUSH
8520: LD_INT 110
8522: PUSH
8523: LD_INT 111
8525: PUSH
8526: LD_INT 112
8528: PUSH
8529: LD_INT 114
8531: PUSH
8532: LD_INT 116
8534: PUSH
8535: LD_INT 117
8537: PUSH
8538: LD_INT 118
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: ST_TO_ADDR
8563: GO 10458
8565: LD_INT 11
8567: DOUBLE
8568: EQUAL
8569: IFTRUE 8573
8571: GO 8777
8573: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8574: LD_ADDR_VAR 0 2
8578: PUSH
8579: LD_INT 2
8581: PUSH
8582: LD_INT 3
8584: PUSH
8585: LD_INT 4
8587: PUSH
8588: LD_INT 5
8590: PUSH
8591: LD_INT 6
8593: PUSH
8594: LD_INT 7
8596: PUSH
8597: LD_INT 8
8599: PUSH
8600: LD_INT 9
8602: PUSH
8603: LD_INT 10
8605: PUSH
8606: LD_INT 11
8608: PUSH
8609: LD_INT 12
8611: PUSH
8612: LD_INT 13
8614: PUSH
8615: LD_INT 14
8617: PUSH
8618: LD_INT 15
8620: PUSH
8621: LD_INT 16
8623: PUSH
8624: LD_INT 17
8626: PUSH
8627: LD_INT 18
8629: PUSH
8630: LD_INT 19
8632: PUSH
8633: LD_INT 20
8635: PUSH
8636: LD_INT 21
8638: PUSH
8639: LD_INT 22
8641: PUSH
8642: LD_INT 23
8644: PUSH
8645: LD_INT 24
8647: PUSH
8648: LD_INT 25
8650: PUSH
8651: LD_INT 26
8653: PUSH
8654: LD_INT 28
8656: PUSH
8657: LD_INT 30
8659: PUSH
8660: LD_INT 31
8662: PUSH
8663: LD_INT 32
8665: PUSH
8666: LD_INT 34
8668: PUSH
8669: LD_INT 36
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: PUSH
8705: LD_INT 101
8707: PUSH
8708: LD_INT 102
8710: PUSH
8711: LD_INT 103
8713: PUSH
8714: LD_INT 104
8716: PUSH
8717: LD_INT 105
8719: PUSH
8720: LD_INT 106
8722: PUSH
8723: LD_INT 107
8725: PUSH
8726: LD_INT 108
8728: PUSH
8729: LD_INT 109
8731: PUSH
8732: LD_INT 110
8734: PUSH
8735: LD_INT 111
8737: PUSH
8738: LD_INT 112
8740: PUSH
8741: LD_INT 114
8743: PUSH
8744: LD_INT 116
8746: PUSH
8747: LD_INT 117
8749: PUSH
8750: LD_INT 118
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: ST_TO_ADDR
8775: GO 10458
8777: LD_INT 12
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 9005
8785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: LD_INT 1
8793: PUSH
8794: LD_INT 2
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: LD_INT 4
8802: PUSH
8803: LD_INT 5
8805: PUSH
8806: LD_INT 6
8808: PUSH
8809: LD_INT 7
8811: PUSH
8812: LD_INT 8
8814: PUSH
8815: LD_INT 9
8817: PUSH
8818: LD_INT 10
8820: PUSH
8821: LD_INT 11
8823: PUSH
8824: LD_INT 12
8826: PUSH
8827: LD_INT 13
8829: PUSH
8830: LD_INT 14
8832: PUSH
8833: LD_INT 15
8835: PUSH
8836: LD_INT 16
8838: PUSH
8839: LD_INT 17
8841: PUSH
8842: LD_INT 18
8844: PUSH
8845: LD_INT 19
8847: PUSH
8848: LD_INT 20
8850: PUSH
8851: LD_INT 21
8853: PUSH
8854: LD_INT 22
8856: PUSH
8857: LD_INT 23
8859: PUSH
8860: LD_INT 24
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 26
8868: PUSH
8869: LD_INT 27
8871: PUSH
8872: LD_INT 28
8874: PUSH
8875: LD_INT 30
8877: PUSH
8878: LD_INT 31
8880: PUSH
8881: LD_INT 32
8883: PUSH
8884: LD_INT 33
8886: PUSH
8887: LD_INT 34
8889: PUSH
8890: LD_INT 36
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 101
8931: PUSH
8932: LD_INT 102
8934: PUSH
8935: LD_INT 103
8937: PUSH
8938: LD_INT 104
8940: PUSH
8941: LD_INT 105
8943: PUSH
8944: LD_INT 106
8946: PUSH
8947: LD_INT 107
8949: PUSH
8950: LD_INT 108
8952: PUSH
8953: LD_INT 109
8955: PUSH
8956: LD_INT 110
8958: PUSH
8959: LD_INT 111
8961: PUSH
8962: LD_INT 112
8964: PUSH
8965: LD_INT 113
8967: PUSH
8968: LD_INT 114
8970: PUSH
8971: LD_INT 116
8973: PUSH
8974: LD_INT 117
8976: PUSH
8977: LD_INT 118
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: ST_TO_ADDR
9003: GO 10458
9005: LD_INT 13
9007: DOUBLE
9008: EQUAL
9009: IFTRUE 9013
9011: GO 9221
9013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_INT 1
9021: PUSH
9022: LD_INT 2
9024: PUSH
9025: LD_INT 3
9027: PUSH
9028: LD_INT 4
9030: PUSH
9031: LD_INT 5
9033: PUSH
9034: LD_INT 8
9036: PUSH
9037: LD_INT 9
9039: PUSH
9040: LD_INT 10
9042: PUSH
9043: LD_INT 11
9045: PUSH
9046: LD_INT 12
9048: PUSH
9049: LD_INT 14
9051: PUSH
9052: LD_INT 15
9054: PUSH
9055: LD_INT 16
9057: PUSH
9058: LD_INT 17
9060: PUSH
9061: LD_INT 18
9063: PUSH
9064: LD_INT 19
9066: PUSH
9067: LD_INT 20
9069: PUSH
9070: LD_INT 21
9072: PUSH
9073: LD_INT 22
9075: PUSH
9076: LD_INT 23
9078: PUSH
9079: LD_INT 24
9081: PUSH
9082: LD_INT 25
9084: PUSH
9085: LD_INT 26
9087: PUSH
9088: LD_INT 27
9090: PUSH
9091: LD_INT 28
9093: PUSH
9094: LD_INT 30
9096: PUSH
9097: LD_INT 31
9099: PUSH
9100: LD_INT 32
9102: PUSH
9103: LD_INT 33
9105: PUSH
9106: LD_INT 34
9108: PUSH
9109: LD_INT 36
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 101
9147: PUSH
9148: LD_INT 102
9150: PUSH
9151: LD_INT 103
9153: PUSH
9154: LD_INT 104
9156: PUSH
9157: LD_INT 105
9159: PUSH
9160: LD_INT 106
9162: PUSH
9163: LD_INT 107
9165: PUSH
9166: LD_INT 108
9168: PUSH
9169: LD_INT 109
9171: PUSH
9172: LD_INT 110
9174: PUSH
9175: LD_INT 111
9177: PUSH
9178: LD_INT 112
9180: PUSH
9181: LD_INT 113
9183: PUSH
9184: LD_INT 114
9186: PUSH
9187: LD_INT 116
9189: PUSH
9190: LD_INT 117
9192: PUSH
9193: LD_INT 118
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: ST_TO_ADDR
9219: GO 10458
9221: LD_INT 14
9223: DOUBLE
9224: EQUAL
9225: IFTRUE 9229
9227: GO 9453
9229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: LD_INT 3
9243: PUSH
9244: LD_INT 4
9246: PUSH
9247: LD_INT 5
9249: PUSH
9250: LD_INT 6
9252: PUSH
9253: LD_INT 7
9255: PUSH
9256: LD_INT 8
9258: PUSH
9259: LD_INT 9
9261: PUSH
9262: LD_INT 10
9264: PUSH
9265: LD_INT 11
9267: PUSH
9268: LD_INT 12
9270: PUSH
9271: LD_INT 13
9273: PUSH
9274: LD_INT 14
9276: PUSH
9277: LD_INT 15
9279: PUSH
9280: LD_INT 16
9282: PUSH
9283: LD_INT 17
9285: PUSH
9286: LD_INT 18
9288: PUSH
9289: LD_INT 19
9291: PUSH
9292: LD_INT 20
9294: PUSH
9295: LD_INT 21
9297: PUSH
9298: LD_INT 22
9300: PUSH
9301: LD_INT 23
9303: PUSH
9304: LD_INT 24
9306: PUSH
9307: LD_INT 25
9309: PUSH
9310: LD_INT 26
9312: PUSH
9313: LD_INT 27
9315: PUSH
9316: LD_INT 28
9318: PUSH
9319: LD_INT 29
9321: PUSH
9322: LD_INT 30
9324: PUSH
9325: LD_INT 31
9327: PUSH
9328: LD_INT 32
9330: PUSH
9331: LD_INT 33
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 36
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 101
9379: PUSH
9380: LD_INT 102
9382: PUSH
9383: LD_INT 103
9385: PUSH
9386: LD_INT 104
9388: PUSH
9389: LD_INT 105
9391: PUSH
9392: LD_INT 106
9394: PUSH
9395: LD_INT 107
9397: PUSH
9398: LD_INT 108
9400: PUSH
9401: LD_INT 109
9403: PUSH
9404: LD_INT 110
9406: PUSH
9407: LD_INT 111
9409: PUSH
9410: LD_INT 112
9412: PUSH
9413: LD_INT 113
9415: PUSH
9416: LD_INT 114
9418: PUSH
9419: LD_INT 116
9421: PUSH
9422: LD_INT 117
9424: PUSH
9425: LD_INT 118
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: ST_TO_ADDR
9451: GO 10458
9453: LD_INT 15
9455: DOUBLE
9456: EQUAL
9457: IFTRUE 9461
9459: GO 9685
9461: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9462: LD_ADDR_VAR 0 2
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: LD_INT 2
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: LD_INT 4
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: LD_INT 6
9484: PUSH
9485: LD_INT 7
9487: PUSH
9488: LD_INT 8
9490: PUSH
9491: LD_INT 9
9493: PUSH
9494: LD_INT 10
9496: PUSH
9497: LD_INT 11
9499: PUSH
9500: LD_INT 12
9502: PUSH
9503: LD_INT 13
9505: PUSH
9506: LD_INT 14
9508: PUSH
9509: LD_INT 15
9511: PUSH
9512: LD_INT 16
9514: PUSH
9515: LD_INT 17
9517: PUSH
9518: LD_INT 18
9520: PUSH
9521: LD_INT 19
9523: PUSH
9524: LD_INT 20
9526: PUSH
9527: LD_INT 21
9529: PUSH
9530: LD_INT 22
9532: PUSH
9533: LD_INT 23
9535: PUSH
9536: LD_INT 24
9538: PUSH
9539: LD_INT 25
9541: PUSH
9542: LD_INT 26
9544: PUSH
9545: LD_INT 27
9547: PUSH
9548: LD_INT 28
9550: PUSH
9551: LD_INT 29
9553: PUSH
9554: LD_INT 30
9556: PUSH
9557: LD_INT 31
9559: PUSH
9560: LD_INT 32
9562: PUSH
9563: LD_INT 33
9565: PUSH
9566: LD_INT 34
9568: PUSH
9569: LD_INT 36
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 101
9611: PUSH
9612: LD_INT 102
9614: PUSH
9615: LD_INT 103
9617: PUSH
9618: LD_INT 104
9620: PUSH
9621: LD_INT 105
9623: PUSH
9624: LD_INT 106
9626: PUSH
9627: LD_INT 107
9629: PUSH
9630: LD_INT 108
9632: PUSH
9633: LD_INT 109
9635: PUSH
9636: LD_INT 110
9638: PUSH
9639: LD_INT 111
9641: PUSH
9642: LD_INT 112
9644: PUSH
9645: LD_INT 113
9647: PUSH
9648: LD_INT 114
9650: PUSH
9651: LD_INT 116
9653: PUSH
9654: LD_INT 117
9656: PUSH
9657: LD_INT 118
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: ST_TO_ADDR
9683: GO 10458
9685: LD_INT 16
9687: DOUBLE
9688: EQUAL
9689: IFTRUE 9693
9691: GO 9829
9693: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9694: LD_ADDR_VAR 0 2
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: LD_INT 4
9704: PUSH
9705: LD_INT 5
9707: PUSH
9708: LD_INT 7
9710: PUSH
9711: LD_INT 11
9713: PUSH
9714: LD_INT 12
9716: PUSH
9717: LD_INT 15
9719: PUSH
9720: LD_INT 16
9722: PUSH
9723: LD_INT 20
9725: PUSH
9726: LD_INT 21
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_INT 23
9734: PUSH
9735: LD_INT 25
9737: PUSH
9738: LD_INT 26
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 31
9746: PUSH
9747: LD_INT 32
9749: PUSH
9750: LD_INT 33
9752: PUSH
9753: LD_INT 34
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 101
9779: PUSH
9780: LD_INT 102
9782: PUSH
9783: LD_INT 103
9785: PUSH
9786: LD_INT 106
9788: PUSH
9789: LD_INT 108
9791: PUSH
9792: LD_INT 112
9794: PUSH
9795: LD_INT 113
9797: PUSH
9798: LD_INT 114
9800: PUSH
9801: LD_INT 116
9803: PUSH
9804: LD_INT 117
9806: PUSH
9807: LD_INT 118
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: ST_TO_ADDR
9827: GO 10458
9829: LD_INT 17
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 10061
9837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9838: LD_ADDR_VAR 0 2
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: LD_INT 2
9848: PUSH
9849: LD_INT 3
9851: PUSH
9852: LD_INT 4
9854: PUSH
9855: LD_INT 5
9857: PUSH
9858: LD_INT 6
9860: PUSH
9861: LD_INT 7
9863: PUSH
9864: LD_INT 8
9866: PUSH
9867: LD_INT 9
9869: PUSH
9870: LD_INT 10
9872: PUSH
9873: LD_INT 11
9875: PUSH
9876: LD_INT 12
9878: PUSH
9879: LD_INT 13
9881: PUSH
9882: LD_INT 14
9884: PUSH
9885: LD_INT 15
9887: PUSH
9888: LD_INT 16
9890: PUSH
9891: LD_INT 17
9893: PUSH
9894: LD_INT 18
9896: PUSH
9897: LD_INT 19
9899: PUSH
9900: LD_INT 20
9902: PUSH
9903: LD_INT 21
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 23
9911: PUSH
9912: LD_INT 24
9914: PUSH
9915: LD_INT 25
9917: PUSH
9918: LD_INT 26
9920: PUSH
9921: LD_INT 27
9923: PUSH
9924: LD_INT 28
9926: PUSH
9927: LD_INT 29
9929: PUSH
9930: LD_INT 30
9932: PUSH
9933: LD_INT 31
9935: PUSH
9936: LD_INT 32
9938: PUSH
9939: LD_INT 33
9941: PUSH
9942: LD_INT 34
9944: PUSH
9945: LD_INT 36
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 101
9987: PUSH
9988: LD_INT 102
9990: PUSH
9991: LD_INT 103
9993: PUSH
9994: LD_INT 104
9996: PUSH
9997: LD_INT 105
9999: PUSH
10000: LD_INT 106
10002: PUSH
10003: LD_INT 107
10005: PUSH
10006: LD_INT 108
10008: PUSH
10009: LD_INT 109
10011: PUSH
10012: LD_INT 110
10014: PUSH
10015: LD_INT 111
10017: PUSH
10018: LD_INT 112
10020: PUSH
10021: LD_INT 113
10023: PUSH
10024: LD_INT 114
10026: PUSH
10027: LD_INT 116
10029: PUSH
10030: LD_INT 117
10032: PUSH
10033: LD_INT 118
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: ST_TO_ADDR
10059: GO 10458
10061: LD_INT 18
10063: DOUBLE
10064: EQUAL
10065: IFTRUE 10069
10067: GO 10217
10069: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10070: LD_ADDR_VAR 0 2
10074: PUSH
10075: LD_INT 2
10077: PUSH
10078: LD_INT 4
10080: PUSH
10081: LD_INT 5
10083: PUSH
10084: LD_INT 7
10086: PUSH
10087: LD_INT 11
10089: PUSH
10090: LD_INT 12
10092: PUSH
10093: LD_INT 15
10095: PUSH
10096: LD_INT 16
10098: PUSH
10099: LD_INT 20
10101: PUSH
10102: LD_INT 21
10104: PUSH
10105: LD_INT 22
10107: PUSH
10108: LD_INT 23
10110: PUSH
10111: LD_INT 25
10113: PUSH
10114: LD_INT 26
10116: PUSH
10117: LD_INT 30
10119: PUSH
10120: LD_INT 31
10122: PUSH
10123: LD_INT 32
10125: PUSH
10126: LD_INT 33
10128: PUSH
10129: LD_INT 34
10131: PUSH
10132: LD_INT 35
10134: PUSH
10135: LD_INT 36
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 101
10163: PUSH
10164: LD_INT 102
10166: PUSH
10167: LD_INT 103
10169: PUSH
10170: LD_INT 106
10172: PUSH
10173: LD_INT 108
10175: PUSH
10176: LD_INT 112
10178: PUSH
10179: LD_INT 113
10181: PUSH
10182: LD_INT 114
10184: PUSH
10185: LD_INT 115
10187: PUSH
10188: LD_INT 116
10190: PUSH
10191: LD_INT 117
10193: PUSH
10194: LD_INT 118
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: ST_TO_ADDR
10215: GO 10458
10217: LD_INT 19
10219: DOUBLE
10220: EQUAL
10221: IFTRUE 10225
10223: GO 10457
10225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10226: LD_ADDR_VAR 0 2
10230: PUSH
10231: LD_INT 1
10233: PUSH
10234: LD_INT 2
10236: PUSH
10237: LD_INT 3
10239: PUSH
10240: LD_INT 4
10242: PUSH
10243: LD_INT 5
10245: PUSH
10246: LD_INT 6
10248: PUSH
10249: LD_INT 7
10251: PUSH
10252: LD_INT 8
10254: PUSH
10255: LD_INT 9
10257: PUSH
10258: LD_INT 10
10260: PUSH
10261: LD_INT 11
10263: PUSH
10264: LD_INT 12
10266: PUSH
10267: LD_INT 13
10269: PUSH
10270: LD_INT 14
10272: PUSH
10273: LD_INT 15
10275: PUSH
10276: LD_INT 16
10278: PUSH
10279: LD_INT 17
10281: PUSH
10282: LD_INT 18
10284: PUSH
10285: LD_INT 19
10287: PUSH
10288: LD_INT 20
10290: PUSH
10291: LD_INT 21
10293: PUSH
10294: LD_INT 22
10296: PUSH
10297: LD_INT 23
10299: PUSH
10300: LD_INT 24
10302: PUSH
10303: LD_INT 25
10305: PUSH
10306: LD_INT 26
10308: PUSH
10309: LD_INT 27
10311: PUSH
10312: LD_INT 28
10314: PUSH
10315: LD_INT 29
10317: PUSH
10318: LD_INT 30
10320: PUSH
10321: LD_INT 31
10323: PUSH
10324: LD_INT 32
10326: PUSH
10327: LD_INT 33
10329: PUSH
10330: LD_INT 34
10332: PUSH
10333: LD_INT 35
10335: PUSH
10336: LD_INT 36
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 101
10379: PUSH
10380: LD_INT 102
10382: PUSH
10383: LD_INT 103
10385: PUSH
10386: LD_INT 104
10388: PUSH
10389: LD_INT 105
10391: PUSH
10392: LD_INT 106
10394: PUSH
10395: LD_INT 107
10397: PUSH
10398: LD_INT 108
10400: PUSH
10401: LD_INT 109
10403: PUSH
10404: LD_INT 110
10406: PUSH
10407: LD_INT 111
10409: PUSH
10410: LD_INT 112
10412: PUSH
10413: LD_INT 113
10415: PUSH
10416: LD_INT 114
10418: PUSH
10419: LD_INT 115
10421: PUSH
10422: LD_INT 116
10424: PUSH
10425: LD_INT 117
10427: PUSH
10428: LD_INT 118
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: ST_TO_ADDR
10455: GO 10458
10457: POP
// end else
10458: GO 10689
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: LD_INT 2
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 4
10476: PUSH
10477: LD_INT 5
10479: PUSH
10480: LD_INT 6
10482: PUSH
10483: LD_INT 7
10485: PUSH
10486: LD_INT 8
10488: PUSH
10489: LD_INT 9
10491: PUSH
10492: LD_INT 10
10494: PUSH
10495: LD_INT 11
10497: PUSH
10498: LD_INT 12
10500: PUSH
10501: LD_INT 13
10503: PUSH
10504: LD_INT 14
10506: PUSH
10507: LD_INT 15
10509: PUSH
10510: LD_INT 16
10512: PUSH
10513: LD_INT 17
10515: PUSH
10516: LD_INT 18
10518: PUSH
10519: LD_INT 19
10521: PUSH
10522: LD_INT 20
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_INT 23
10533: PUSH
10534: LD_INT 24
10536: PUSH
10537: LD_INT 25
10539: PUSH
10540: LD_INT 26
10542: PUSH
10543: LD_INT 27
10545: PUSH
10546: LD_INT 28
10548: PUSH
10549: LD_INT 29
10551: PUSH
10552: LD_INT 30
10554: PUSH
10555: LD_INT 31
10557: PUSH
10558: LD_INT 32
10560: PUSH
10561: LD_INT 33
10563: PUSH
10564: LD_INT 34
10566: PUSH
10567: LD_INT 35
10569: PUSH
10570: LD_INT 36
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 101
10613: PUSH
10614: LD_INT 102
10616: PUSH
10617: LD_INT 103
10619: PUSH
10620: LD_INT 104
10622: PUSH
10623: LD_INT 105
10625: PUSH
10626: LD_INT 106
10628: PUSH
10629: LD_INT 107
10631: PUSH
10632: LD_INT 108
10634: PUSH
10635: LD_INT 109
10637: PUSH
10638: LD_INT 110
10640: PUSH
10641: LD_INT 111
10643: PUSH
10644: LD_INT 112
10646: PUSH
10647: LD_INT 113
10649: PUSH
10650: LD_INT 114
10652: PUSH
10653: LD_INT 115
10655: PUSH
10656: LD_INT 116
10658: PUSH
10659: LD_INT 117
10661: PUSH
10662: LD_INT 118
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: ST_TO_ADDR
// if result then
10689: LD_VAR 0 2
10693: IFFALSE 11479
// begin normal :=  ;
10695: LD_ADDR_VAR 0 5
10699: PUSH
10700: LD_STRING 
10702: ST_TO_ADDR
// hardcore :=  ;
10703: LD_ADDR_VAR 0 6
10707: PUSH
10708: LD_STRING 
10710: ST_TO_ADDR
// active :=  ;
10711: LD_ADDR_VAR 0 7
10715: PUSH
10716: LD_STRING 
10718: ST_TO_ADDR
// for i = 1 to normalCounter do
10719: LD_ADDR_VAR 0 8
10723: PUSH
10724: DOUBLE
10725: LD_INT 1
10727: DEC
10728: ST_TO_ADDR
10729: LD_EXP 26
10733: PUSH
10734: FOR_TO
10735: IFFALSE 10836
// begin tmp := 0 ;
10737: LD_ADDR_VAR 0 3
10741: PUSH
10742: LD_STRING 0
10744: ST_TO_ADDR
// if result [ 1 ] then
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 1
10752: ARRAY
10753: IFFALSE 10818
// if result [ 1 ] [ 1 ] = i then
10755: LD_VAR 0 2
10759: PUSH
10760: LD_INT 1
10762: ARRAY
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PUSH
10768: LD_VAR 0 8
10772: EQUAL
10773: IFFALSE 10818
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10775: LD_ADDR_VAR 0 2
10779: PUSH
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_VAR 0 2
10792: PUSH
10793: LD_INT 1
10795: ARRAY
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: CALL_OW 3
10804: PPUSH
10805: CALL_OW 1
10809: ST_TO_ADDR
// tmp := 1 ;
10810: LD_ADDR_VAR 0 3
10814: PUSH
10815: LD_STRING 1
10817: ST_TO_ADDR
// end ; normal := normal & tmp ;
10818: LD_ADDR_VAR 0 5
10822: PUSH
10823: LD_VAR 0 5
10827: PUSH
10828: LD_VAR 0 3
10832: STR
10833: ST_TO_ADDR
// end ;
10834: GO 10734
10836: POP
10837: POP
// for i = 1 to hardcoreCounter do
10838: LD_ADDR_VAR 0 8
10842: PUSH
10843: DOUBLE
10844: LD_INT 1
10846: DEC
10847: ST_TO_ADDR
10848: LD_EXP 27
10852: PUSH
10853: FOR_TO
10854: IFFALSE 10959
// begin tmp := 0 ;
10856: LD_ADDR_VAR 0 3
10860: PUSH
10861: LD_STRING 0
10863: ST_TO_ADDR
// if result [ 2 ] then
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 2
10871: ARRAY
10872: IFFALSE 10941
// if result [ 2 ] [ 1 ] = 100 + i then
10874: LD_VAR 0 2
10878: PUSH
10879: LD_INT 2
10881: ARRAY
10882: PUSH
10883: LD_INT 1
10885: ARRAY
10886: PUSH
10887: LD_INT 100
10889: PUSH
10890: LD_VAR 0 8
10894: PLUS
10895: EQUAL
10896: IFFALSE 10941
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_VAR 0 2
10907: PPUSH
10908: LD_INT 2
10910: PPUSH
10911: LD_VAR 0 2
10915: PUSH
10916: LD_INT 2
10918: ARRAY
10919: PPUSH
10920: LD_INT 1
10922: PPUSH
10923: CALL_OW 3
10927: PPUSH
10928: CALL_OW 1
10932: ST_TO_ADDR
// tmp := 1 ;
10933: LD_ADDR_VAR 0 3
10937: PUSH
10938: LD_STRING 1
10940: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10941: LD_ADDR_VAR 0 6
10945: PUSH
10946: LD_VAR 0 6
10950: PUSH
10951: LD_VAR 0 3
10955: STR
10956: ST_TO_ADDR
// end ;
10957: GO 10853
10959: POP
10960: POP
// if isGameLoad then
10961: LD_VAR 0 1
10965: IFFALSE 11440
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10967: LD_ADDR_VAR 0 4
10971: PUSH
10972: LD_EXP 30
10976: PUSH
10977: LD_EXP 29
10981: PUSH
10982: LD_EXP 31
10986: PUSH
10987: LD_EXP 28
10991: PUSH
10992: LD_EXP 32
10996: PUSH
10997: LD_EXP 33
11001: PUSH
11002: LD_EXP 34
11006: PUSH
11007: LD_EXP 35
11011: PUSH
11012: LD_EXP 36
11016: PUSH
11017: LD_EXP 37
11021: PUSH
11022: LD_EXP 38
11026: PUSH
11027: LD_EXP 39
11031: PUSH
11032: LD_EXP 40
11036: PUSH
11037: LD_EXP 41
11041: PUSH
11042: LD_EXP 49
11046: PUSH
11047: LD_EXP 50
11051: PUSH
11052: LD_EXP 51
11056: PUSH
11057: LD_EXP 52
11061: PUSH
11062: LD_EXP 54
11066: PUSH
11067: LD_EXP 55
11071: PUSH
11072: LD_EXP 56
11076: PUSH
11077: LD_EXP 59
11081: PUSH
11082: LD_EXP 61
11086: PUSH
11087: LD_EXP 62
11091: PUSH
11092: LD_EXP 63
11096: PUSH
11097: LD_EXP 65
11101: PUSH
11102: LD_EXP 66
11106: PUSH
11107: LD_EXP 69
11111: PUSH
11112: LD_EXP 70
11116: PUSH
11117: LD_EXP 71
11121: PUSH
11122: LD_EXP 72
11126: PUSH
11127: LD_EXP 73
11131: PUSH
11132: LD_EXP 74
11136: PUSH
11137: LD_EXP 75
11141: PUSH
11142: LD_EXP 76
11146: PUSH
11147: LD_EXP 77
11151: PUSH
11152: LD_EXP 42
11156: PUSH
11157: LD_EXP 43
11161: PUSH
11162: LD_EXP 46
11166: PUSH
11167: LD_EXP 47
11171: PUSH
11172: LD_EXP 48
11176: PUSH
11177: LD_EXP 44
11181: PUSH
11182: LD_EXP 45
11186: PUSH
11187: LD_EXP 53
11191: PUSH
11192: LD_EXP 57
11196: PUSH
11197: LD_EXP 58
11201: PUSH
11202: LD_EXP 60
11206: PUSH
11207: LD_EXP 64
11211: PUSH
11212: LD_EXP 67
11216: PUSH
11217: LD_EXP 68
11221: PUSH
11222: LD_EXP 78
11226: PUSH
11227: LD_EXP 79
11231: PUSH
11232: LD_EXP 80
11236: PUSH
11237: LD_EXP 81
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: ST_TO_ADDR
// tmp :=  ;
11298: LD_ADDR_VAR 0 3
11302: PUSH
11303: LD_STRING 
11305: ST_TO_ADDR
// for i = 1 to normalCounter do
11306: LD_ADDR_VAR 0 8
11310: PUSH
11311: DOUBLE
11312: LD_INT 1
11314: DEC
11315: ST_TO_ADDR
11316: LD_EXP 26
11320: PUSH
11321: FOR_TO
11322: IFFALSE 11358
// begin if flags [ i ] then
11324: LD_VAR 0 4
11328: PUSH
11329: LD_VAR 0 8
11333: ARRAY
11334: IFFALSE 11356
// tmp := tmp & i & ; ;
11336: LD_ADDR_VAR 0 3
11340: PUSH
11341: LD_VAR 0 3
11345: PUSH
11346: LD_VAR 0 8
11350: STR
11351: PUSH
11352: LD_STRING ;
11354: STR
11355: ST_TO_ADDR
// end ;
11356: GO 11321
11358: POP
11359: POP
// for i = 1 to hardcoreCounter do
11360: LD_ADDR_VAR 0 8
11364: PUSH
11365: DOUBLE
11366: LD_INT 1
11368: DEC
11369: ST_TO_ADDR
11370: LD_EXP 27
11374: PUSH
11375: FOR_TO
11376: IFFALSE 11422
// begin if flags [ normalCounter + i ] then
11378: LD_VAR 0 4
11382: PUSH
11383: LD_EXP 26
11387: PUSH
11388: LD_VAR 0 8
11392: PLUS
11393: ARRAY
11394: IFFALSE 11420
// tmp := tmp & ( 100 + i ) & ; ;
11396: LD_ADDR_VAR 0 3
11400: PUSH
11401: LD_VAR 0 3
11405: PUSH
11406: LD_INT 100
11408: PUSH
11409: LD_VAR 0 8
11413: PLUS
11414: STR
11415: PUSH
11416: LD_STRING ;
11418: STR
11419: ST_TO_ADDR
// end ;
11420: GO 11375
11422: POP
11423: POP
// if tmp then
11424: LD_VAR 0 3
11428: IFFALSE 11440
// active := tmp ;
11430: LD_ADDR_VAR 0 7
11434: PUSH
11435: LD_VAR 0 3
11439: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11440: LD_STRING getStreamItemsFromMission("
11442: PUSH
11443: LD_VAR 0 5
11447: STR
11448: PUSH
11449: LD_STRING ","
11451: STR
11452: PUSH
11453: LD_VAR 0 6
11457: STR
11458: PUSH
11459: LD_STRING ","
11461: STR
11462: PUSH
11463: LD_VAR 0 7
11467: STR
11468: PUSH
11469: LD_STRING ")
11471: STR
11472: PPUSH
11473: CALL_OW 559
// end else
11477: GO 11486
// ToLua ( getStreamItemsFromMission("","","") ) ;
11479: LD_STRING getStreamItemsFromMission("","","")
11481: PPUSH
11482: CALL_OW 559
// end ;
11486: LD_VAR 0 2
11490: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11491: LD_EXP 25
11495: PUSH
11496: LD_EXP 30
11500: AND
11501: IFFALSE 11625
11503: GO 11505
11505: DISABLE
11506: LD_INT 0
11508: PPUSH
11509: PPUSH
// begin enable ;
11510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11511: LD_ADDR_VAR 0 2
11515: PUSH
11516: LD_INT 22
11518: PUSH
11519: LD_OWVAR 2
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: LD_INT 34
11533: PUSH
11534: LD_INT 7
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 34
11543: PUSH
11544: LD_INT 45
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 34
11553: PUSH
11554: LD_INT 28
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 34
11563: PUSH
11564: LD_INT 47
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: ST_TO_ADDR
// if not tmp then
11587: LD_VAR 0 2
11591: NOT
11592: IFFALSE 11596
// exit ;
11594: GO 11625
// for i in tmp do
11596: LD_ADDR_VAR 0 1
11600: PUSH
11601: LD_VAR 0 2
11605: PUSH
11606: FOR_IN
11607: IFFALSE 11623
// begin SetLives ( i , 0 ) ;
11609: LD_VAR 0 1
11613: PPUSH
11614: LD_INT 0
11616: PPUSH
11617: CALL_OW 234
// end ;
11621: GO 11606
11623: POP
11624: POP
// end ;
11625: PPOPN 2
11627: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11628: LD_EXP 25
11632: PUSH
11633: LD_EXP 31
11637: AND
11638: IFFALSE 11722
11640: GO 11642
11642: DISABLE
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// begin enable ;
11647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: LD_INT 22
11655: PUSH
11656: LD_OWVAR 2
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 32
11667: PUSH
11668: LD_INT 3
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 69
11683: ST_TO_ADDR
// if not tmp then
11684: LD_VAR 0 2
11688: NOT
11689: IFFALSE 11693
// exit ;
11691: GO 11722
// for i in tmp do
11693: LD_ADDR_VAR 0 1
11697: PUSH
11698: LD_VAR 0 2
11702: PUSH
11703: FOR_IN
11704: IFFALSE 11720
// begin SetLives ( i , 0 ) ;
11706: LD_VAR 0 1
11710: PPUSH
11711: LD_INT 0
11713: PPUSH
11714: CALL_OW 234
// end ;
11718: GO 11703
11720: POP
11721: POP
// end ;
11722: PPOPN 2
11724: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11725: LD_EXP 25
11729: PUSH
11730: LD_EXP 28
11734: AND
11735: IFFALSE 11828
11737: GO 11739
11739: DISABLE
11740: LD_INT 0
11742: PPUSH
// begin enable ;
11743: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11744: LD_ADDR_VAR 0 1
11748: PUSH
11749: LD_INT 22
11751: PUSH
11752: LD_OWVAR 2
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 2
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 9
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 25
11786: PUSH
11787: LD_INT 8
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: PUSH
11809: FOR_IN
11810: IFFALSE 11826
// begin SetClass ( i , 1 ) ;
11812: LD_VAR 0 1
11816: PPUSH
11817: LD_INT 1
11819: PPUSH
11820: CALL_OW 336
// end ;
11824: GO 11809
11826: POP
11827: POP
// end ;
11828: PPOPN 1
11830: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11831: LD_EXP 25
11835: PUSH
11836: LD_EXP 29
11840: AND
11841: PUSH
11842: LD_OWVAR 65
11846: PUSH
11847: LD_INT 7
11849: LESS
11850: AND
11851: IFFALSE 11865
11853: GO 11855
11855: DISABLE
// begin enable ;
11856: ENABLE
// game_speed := 7 ;
11857: LD_ADDR_OWVAR 65
11861: PUSH
11862: LD_INT 7
11864: ST_TO_ADDR
// end ;
11865: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11866: LD_EXP 25
11870: PUSH
11871: LD_EXP 32
11875: AND
11876: IFFALSE 12078
11878: GO 11880
11880: DISABLE
11881: LD_INT 0
11883: PPUSH
11884: PPUSH
11885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11886: LD_ADDR_VAR 0 3
11890: PUSH
11891: LD_INT 81
11893: PUSH
11894: LD_OWVAR 2
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 21
11905: PUSH
11906: LD_INT 1
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 69
11921: ST_TO_ADDR
// if not tmp then
11922: LD_VAR 0 3
11926: NOT
11927: IFFALSE 11931
// exit ;
11929: GO 12078
// if tmp > 5 then
11931: LD_VAR 0 3
11935: PUSH
11936: LD_INT 5
11938: GREATER
11939: IFFALSE 11951
// k := 5 else
11941: LD_ADDR_VAR 0 2
11945: PUSH
11946: LD_INT 5
11948: ST_TO_ADDR
11949: GO 11961
// k := tmp ;
11951: LD_ADDR_VAR 0 2
11955: PUSH
11956: LD_VAR 0 3
11960: ST_TO_ADDR
// for i := 1 to k do
11961: LD_ADDR_VAR 0 1
11965: PUSH
11966: DOUBLE
11967: LD_INT 1
11969: DEC
11970: ST_TO_ADDR
11971: LD_VAR 0 2
11975: PUSH
11976: FOR_TO
11977: IFFALSE 12076
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11979: LD_VAR 0 3
11983: PUSH
11984: LD_VAR 0 1
11988: ARRAY
11989: PPUSH
11990: LD_VAR 0 1
11994: PUSH
11995: LD_INT 4
11997: MOD
11998: PUSH
11999: LD_INT 1
12001: PLUS
12002: PPUSH
12003: CALL_OW 259
12007: PUSH
12008: LD_INT 10
12010: LESS
12011: IFFALSE 12074
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12013: LD_VAR 0 3
12017: PUSH
12018: LD_VAR 0 1
12022: ARRAY
12023: PPUSH
12024: LD_VAR 0 1
12028: PUSH
12029: LD_INT 4
12031: MOD
12032: PUSH
12033: LD_INT 1
12035: PLUS
12036: PPUSH
12037: LD_VAR 0 3
12041: PUSH
12042: LD_VAR 0 1
12046: ARRAY
12047: PPUSH
12048: LD_VAR 0 1
12052: PUSH
12053: LD_INT 4
12055: MOD
12056: PUSH
12057: LD_INT 1
12059: PLUS
12060: PPUSH
12061: CALL_OW 259
12065: PUSH
12066: LD_INT 1
12068: PLUS
12069: PPUSH
12070: CALL_OW 237
12074: GO 11976
12076: POP
12077: POP
// end ;
12078: PPOPN 3
12080: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12081: LD_EXP 25
12085: PUSH
12086: LD_EXP 33
12090: AND
12091: IFFALSE 12111
12093: GO 12095
12095: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12096: LD_INT 4
12098: PPUSH
12099: LD_OWVAR 2
12103: PPUSH
12104: LD_INT 0
12106: PPUSH
12107: CALL_OW 324
12111: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12112: LD_EXP 25
12116: PUSH
12117: LD_EXP 62
12121: AND
12122: IFFALSE 12142
12124: GO 12126
12126: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12127: LD_INT 19
12129: PPUSH
12130: LD_OWVAR 2
12134: PPUSH
12135: LD_INT 0
12137: PPUSH
12138: CALL_OW 324
12142: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12143: LD_EXP 25
12147: PUSH
12148: LD_EXP 34
12152: AND
12153: IFFALSE 12255
12155: GO 12157
12157: DISABLE
12158: LD_INT 0
12160: PPUSH
12161: PPUSH
// begin enable ;
12162: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12163: LD_ADDR_VAR 0 2
12167: PUSH
12168: LD_INT 22
12170: PUSH
12171: LD_OWVAR 2
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: LD_INT 34
12185: PUSH
12186: LD_INT 11
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 34
12195: PUSH
12196: LD_INT 30
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PPUSH
12212: CALL_OW 69
12216: ST_TO_ADDR
// if not tmp then
12217: LD_VAR 0 2
12221: NOT
12222: IFFALSE 12226
// exit ;
12224: GO 12255
// for i in tmp do
12226: LD_ADDR_VAR 0 1
12230: PUSH
12231: LD_VAR 0 2
12235: PUSH
12236: FOR_IN
12237: IFFALSE 12253
// begin SetLives ( i , 0 ) ;
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_INT 0
12246: PPUSH
12247: CALL_OW 234
// end ;
12251: GO 12236
12253: POP
12254: POP
// end ;
12255: PPOPN 2
12257: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12258: LD_EXP 25
12262: PUSH
12263: LD_EXP 35
12267: AND
12268: IFFALSE 12288
12270: GO 12272
12272: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12273: LD_INT 32
12275: PPUSH
12276: LD_OWVAR 2
12280: PPUSH
12281: LD_INT 0
12283: PPUSH
12284: CALL_OW 324
12288: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12289: LD_EXP 25
12293: PUSH
12294: LD_EXP 36
12298: AND
12299: IFFALSE 12480
12301: GO 12303
12303: DISABLE
12304: LD_INT 0
12306: PPUSH
12307: PPUSH
12308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12309: LD_ADDR_VAR 0 2
12313: PUSH
12314: LD_INT 22
12316: PUSH
12317: LD_OWVAR 2
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 33
12328: PUSH
12329: LD_INT 3
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PPUSH
12340: CALL_OW 69
12344: ST_TO_ADDR
// if not tmp then
12345: LD_VAR 0 2
12349: NOT
12350: IFFALSE 12354
// exit ;
12352: GO 12480
// side := 0 ;
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: LD_INT 0
12361: ST_TO_ADDR
// for i := 1 to 8 do
12362: LD_ADDR_VAR 0 1
12366: PUSH
12367: DOUBLE
12368: LD_INT 1
12370: DEC
12371: ST_TO_ADDR
12372: LD_INT 8
12374: PUSH
12375: FOR_TO
12376: IFFALSE 12424
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12378: LD_OWVAR 2
12382: PUSH
12383: LD_VAR 0 1
12387: NONEQUAL
12388: PUSH
12389: LD_OWVAR 2
12393: PPUSH
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 81
12403: PUSH
12404: LD_INT 2
12406: EQUAL
12407: AND
12408: IFFALSE 12422
// begin side := i ;
12410: LD_ADDR_VAR 0 3
12414: PUSH
12415: LD_VAR 0 1
12419: ST_TO_ADDR
// break ;
12420: GO 12424
// end ;
12422: GO 12375
12424: POP
12425: POP
// if not side then
12426: LD_VAR 0 3
12430: NOT
12431: IFFALSE 12435
// exit ;
12433: GO 12480
// for i := 1 to tmp do
12435: LD_ADDR_VAR 0 1
12439: PUSH
12440: DOUBLE
12441: LD_INT 1
12443: DEC
12444: ST_TO_ADDR
12445: LD_VAR 0 2
12449: PUSH
12450: FOR_TO
12451: IFFALSE 12478
// if Prob ( 60 ) then
12453: LD_INT 60
12455: PPUSH
12456: CALL_OW 13
12460: IFFALSE 12476
// SetSide ( i , side ) ;
12462: LD_VAR 0 1
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: CALL_OW 235
12476: GO 12450
12478: POP
12479: POP
// end ;
12480: PPOPN 3
12482: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12483: LD_EXP 25
12487: PUSH
12488: LD_EXP 38
12492: AND
12493: IFFALSE 12612
12495: GO 12497
12497: DISABLE
12498: LD_INT 0
12500: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12501: LD_ADDR_VAR 0 1
12505: PUSH
12506: LD_INT 22
12508: PUSH
12509: LD_OWVAR 2
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 21
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 3
12530: PUSH
12531: LD_INT 23
12533: PUSH
12534: LD_INT 0
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: PPUSH
12550: CALL_OW 69
12554: PUSH
12555: FOR_IN
12556: IFFALSE 12610
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12558: LD_VAR 0 1
12562: PPUSH
12563: CALL_OW 257
12567: PUSH
12568: LD_INT 1
12570: PUSH
12571: LD_INT 2
12573: PUSH
12574: LD_INT 3
12576: PUSH
12577: LD_INT 4
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: IN
12586: IFFALSE 12608
// SetClass ( un , rand ( 1 , 4 ) ) ;
12588: LD_VAR 0 1
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: LD_INT 4
12598: PPUSH
12599: CALL_OW 12
12603: PPUSH
12604: CALL_OW 336
12608: GO 12555
12610: POP
12611: POP
// end ;
12612: PPOPN 1
12614: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12615: LD_EXP 25
12619: PUSH
12620: LD_EXP 37
12624: AND
12625: IFFALSE 12704
12627: GO 12629
12629: DISABLE
12630: LD_INT 0
12632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12633: LD_ADDR_VAR 0 1
12637: PUSH
12638: LD_INT 22
12640: PUSH
12641: LD_OWVAR 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 3
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: ST_TO_ADDR
// if not tmp then
12669: LD_VAR 0 1
12673: NOT
12674: IFFALSE 12678
// exit ;
12676: GO 12704
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12678: LD_VAR 0 1
12682: PUSH
12683: LD_INT 1
12685: PPUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 12
12695: ARRAY
12696: PPUSH
12697: LD_INT 100
12699: PPUSH
12700: CALL_OW 234
// end ;
12704: PPOPN 1
12706: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12707: LD_EXP 25
12711: PUSH
12712: LD_EXP 39
12716: AND
12717: IFFALSE 12815
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_OWVAR 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 21
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 69
12760: ST_TO_ADDR
// if not tmp then
12761: LD_VAR 0 1
12765: NOT
12766: IFFALSE 12770
// exit ;
12768: GO 12815
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12770: LD_VAR 0 1
12774: PUSH
12775: LD_INT 1
12777: PPUSH
12778: LD_VAR 0 1
12782: PPUSH
12783: CALL_OW 12
12787: ARRAY
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 4
12794: PPUSH
12795: CALL_OW 12
12799: PPUSH
12800: LD_INT 3000
12802: PPUSH
12803: LD_INT 9000
12805: PPUSH
12806: CALL_OW 12
12810: PPUSH
12811: CALL_OW 492
// end ;
12815: PPOPN 1
12817: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12818: LD_EXP 25
12822: PUSH
12823: LD_EXP 40
12827: AND
12828: IFFALSE 12848
12830: GO 12832
12832: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12833: LD_INT 1
12835: PPUSH
12836: LD_OWVAR 2
12840: PPUSH
12841: LD_INT 0
12843: PPUSH
12844: CALL_OW 324
12848: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12849: LD_EXP 25
12853: PUSH
12854: LD_EXP 41
12858: AND
12859: IFFALSE 12942
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12868: LD_ADDR_VAR 0 2
12872: PUSH
12873: LD_INT 22
12875: PUSH
12876: LD_OWVAR 2
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 3
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 69
12903: ST_TO_ADDR
// if not tmp then
12904: LD_VAR 0 2
12908: NOT
12909: IFFALSE 12913
// exit ;
12911: GO 12942
// for i in tmp do
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_VAR 0 2
12922: PUSH
12923: FOR_IN
12924: IFFALSE 12940
// SetBLevel ( i , 10 ) ;
12926: LD_VAR 0 1
12930: PPUSH
12931: LD_INT 10
12933: PPUSH
12934: CALL_OW 241
12938: GO 12923
12940: POP
12941: POP
// end ;
12942: PPOPN 2
12944: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12945: LD_EXP 25
12949: PUSH
12950: LD_EXP 42
12954: AND
12955: IFFALSE 13066
12957: GO 12959
12959: DISABLE
12960: LD_INT 0
12962: PPUSH
12963: PPUSH
12964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12965: LD_ADDR_VAR 0 3
12969: PUSH
12970: LD_INT 22
12972: PUSH
12973: LD_OWVAR 2
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 25
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PPUSH
12996: CALL_OW 69
13000: ST_TO_ADDR
// if not tmp then
13001: LD_VAR 0 3
13005: NOT
13006: IFFALSE 13010
// exit ;
13008: GO 13066
// un := tmp [ rand ( 1 , tmp ) ] ;
13010: LD_ADDR_VAR 0 2
13014: PUSH
13015: LD_VAR 0 3
13019: PUSH
13020: LD_INT 1
13022: PPUSH
13023: LD_VAR 0 3
13027: PPUSH
13028: CALL_OW 12
13032: ARRAY
13033: ST_TO_ADDR
// if Crawls ( un ) then
13034: LD_VAR 0 2
13038: PPUSH
13039: CALL_OW 318
13043: IFFALSE 13054
// ComWalk ( un ) ;
13045: LD_VAR 0 2
13049: PPUSH
13050: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13054: LD_VAR 0 2
13058: PPUSH
13059: LD_INT 5
13061: PPUSH
13062: CALL_OW 336
// end ;
13066: PPOPN 3
13068: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13069: LD_EXP 25
13073: PUSH
13074: LD_EXP 43
13078: AND
13079: PUSH
13080: LD_OWVAR 67
13084: PUSH
13085: LD_INT 4
13087: LESS
13088: AND
13089: IFFALSE 13108
13091: GO 13093
13093: DISABLE
// begin Difficulty := Difficulty + 1 ;
13094: LD_ADDR_OWVAR 67
13098: PUSH
13099: LD_OWVAR 67
13103: PUSH
13104: LD_INT 1
13106: PLUS
13107: ST_TO_ADDR
// end ;
13108: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13109: LD_EXP 25
13113: PUSH
13114: LD_EXP 44
13118: AND
13119: IFFALSE 13222
13121: GO 13123
13123: DISABLE
13124: LD_INT 0
13126: PPUSH
// begin for i := 1 to 5 do
13127: LD_ADDR_VAR 0 1
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_INT 5
13139: PUSH
13140: FOR_TO
13141: IFFALSE 13220
// begin uc_nation := nation_nature ;
13143: LD_ADDR_OWVAR 21
13147: PUSH
13148: LD_INT 0
13150: ST_TO_ADDR
// uc_side := 0 ;
13151: LD_ADDR_OWVAR 20
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13159: LD_ADDR_OWVAR 29
13163: PUSH
13164: LD_INT 12
13166: PUSH
13167: LD_INT 12
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: ST_TO_ADDR
// hc_agressivity := 20 ;
13174: LD_ADDR_OWVAR 35
13178: PUSH
13179: LD_INT 20
13181: ST_TO_ADDR
// hc_class := class_tiger ;
13182: LD_ADDR_OWVAR 28
13186: PUSH
13187: LD_INT 14
13189: ST_TO_ADDR
// hc_gallery :=  ;
13190: LD_ADDR_OWVAR 33
13194: PUSH
13195: LD_STRING 
13197: ST_TO_ADDR
// hc_name :=  ;
13198: LD_ADDR_OWVAR 26
13202: PUSH
13203: LD_STRING 
13205: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13206: CALL_OW 44
13210: PPUSH
13211: LD_INT 0
13213: PPUSH
13214: CALL_OW 51
// end ;
13218: GO 13140
13220: POP
13221: POP
// end ;
13222: PPOPN 1
13224: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13225: LD_EXP 25
13229: PUSH
13230: LD_EXP 45
13234: AND
13235: IFFALSE 13244
13237: GO 13239
13239: DISABLE
// StreamSibBomb ;
13240: CALL 13245 0 0
13244: END
// export function StreamSibBomb ; var i , x , y ; begin
13245: LD_INT 0
13247: PPUSH
13248: PPUSH
13249: PPUSH
13250: PPUSH
// result := false ;
13251: LD_ADDR_VAR 0 1
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// for i := 1 to 16 do
13259: LD_ADDR_VAR 0 2
13263: PUSH
13264: DOUBLE
13265: LD_INT 1
13267: DEC
13268: ST_TO_ADDR
13269: LD_INT 16
13271: PUSH
13272: FOR_TO
13273: IFFALSE 13472
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13275: LD_ADDR_VAR 0 3
13279: PUSH
13280: LD_INT 10
13282: PUSH
13283: LD_INT 20
13285: PUSH
13286: LD_INT 30
13288: PUSH
13289: LD_INT 40
13291: PUSH
13292: LD_INT 50
13294: PUSH
13295: LD_INT 60
13297: PUSH
13298: LD_INT 70
13300: PUSH
13301: LD_INT 80
13303: PUSH
13304: LD_INT 90
13306: PUSH
13307: LD_INT 100
13309: PUSH
13310: LD_INT 110
13312: PUSH
13313: LD_INT 120
13315: PUSH
13316: LD_INT 130
13318: PUSH
13319: LD_INT 140
13321: PUSH
13322: LD_INT 150
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 1
13344: PPUSH
13345: LD_INT 15
13347: PPUSH
13348: CALL_OW 12
13352: ARRAY
13353: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13354: LD_ADDR_VAR 0 4
13358: PUSH
13359: LD_INT 10
13361: PUSH
13362: LD_INT 20
13364: PUSH
13365: LD_INT 30
13367: PUSH
13368: LD_INT 40
13370: PUSH
13371: LD_INT 50
13373: PUSH
13374: LD_INT 60
13376: PUSH
13377: LD_INT 70
13379: PUSH
13380: LD_INT 80
13382: PUSH
13383: LD_INT 90
13385: PUSH
13386: LD_INT 100
13388: PUSH
13389: LD_INT 110
13391: PUSH
13392: LD_INT 120
13394: PUSH
13395: LD_INT 130
13397: PUSH
13398: LD_INT 140
13400: PUSH
13401: LD_INT 150
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 1
13423: PPUSH
13424: LD_INT 15
13426: PPUSH
13427: CALL_OW 12
13431: ARRAY
13432: ST_TO_ADDR
// if ValidHex ( x , y ) then
13433: LD_VAR 0 3
13437: PPUSH
13438: LD_VAR 0 4
13442: PPUSH
13443: CALL_OW 488
13447: IFFALSE 13470
// begin result := [ x , y ] ;
13449: LD_ADDR_VAR 0 1
13453: PUSH
13454: LD_VAR 0 3
13458: PUSH
13459: LD_VAR 0 4
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: ST_TO_ADDR
// break ;
13468: GO 13472
// end ; end ;
13470: GO 13272
13472: POP
13473: POP
// if result then
13474: LD_VAR 0 1
13478: IFFALSE 13538
// begin ToLua ( playSibBomb() ) ;
13480: LD_STRING playSibBomb()
13482: PPUSH
13483: CALL_OW 559
// wait ( 0 0$14 ) ;
13487: LD_INT 490
13489: PPUSH
13490: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13494: LD_VAR 0 1
13498: PUSH
13499: LD_INT 1
13501: ARRAY
13502: PPUSH
13503: LD_VAR 0 1
13507: PUSH
13508: LD_INT 2
13510: ARRAY
13511: PPUSH
13512: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13516: LD_VAR 0 1
13520: PUSH
13521: LD_INT 1
13523: ARRAY
13524: PPUSH
13525: LD_VAR 0 1
13529: PUSH
13530: LD_INT 2
13532: ARRAY
13533: PPUSH
13534: CALL_OW 429
// end ; end ;
13538: LD_VAR 0 1
13542: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13543: LD_EXP 25
13547: PUSH
13548: LD_EXP 47
13552: AND
13553: IFFALSE 13565
13555: GO 13557
13557: DISABLE
// YouLost (  ) ;
13558: LD_STRING 
13560: PPUSH
13561: CALL_OW 104
13565: END
// every 0 0$1 trigger StreamModeActive and sFog do
13566: LD_EXP 25
13570: PUSH
13571: LD_EXP 46
13575: AND
13576: IFFALSE 13590
13578: GO 13580
13580: DISABLE
// FogOff ( your_side ) ;
13581: LD_OWVAR 2
13585: PPUSH
13586: CALL_OW 344
13590: END
// every 0 0$1 trigger StreamModeActive and sSun do
13591: LD_EXP 25
13595: PUSH
13596: LD_EXP 48
13600: AND
13601: IFFALSE 13629
13603: GO 13605
13605: DISABLE
// begin solar_recharge_percent := 0 ;
13606: LD_ADDR_OWVAR 79
13610: PUSH
13611: LD_INT 0
13613: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13614: LD_INT 10500
13616: PPUSH
13617: CALL_OW 67
// solar_recharge_percent := 100 ;
13621: LD_ADDR_OWVAR 79
13625: PUSH
13626: LD_INT 100
13628: ST_TO_ADDR
// end ;
13629: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13630: LD_EXP 25
13634: PUSH
13635: LD_EXP 49
13639: AND
13640: IFFALSE 13879
13642: GO 13644
13644: DISABLE
13645: LD_INT 0
13647: PPUSH
13648: PPUSH
13649: PPUSH
// begin tmp := [ ] ;
13650: LD_ADDR_VAR 0 3
13654: PUSH
13655: EMPTY
13656: ST_TO_ADDR
// for i := 1 to 6 do
13657: LD_ADDR_VAR 0 1
13661: PUSH
13662: DOUBLE
13663: LD_INT 1
13665: DEC
13666: ST_TO_ADDR
13667: LD_INT 6
13669: PUSH
13670: FOR_TO
13671: IFFALSE 13776
// begin uc_nation := nation_nature ;
13673: LD_ADDR_OWVAR 21
13677: PUSH
13678: LD_INT 0
13680: ST_TO_ADDR
// uc_side := 0 ;
13681: LD_ADDR_OWVAR 20
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13689: LD_ADDR_OWVAR 29
13693: PUSH
13694: LD_INT 12
13696: PUSH
13697: LD_INT 12
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: ST_TO_ADDR
// hc_agressivity := 20 ;
13704: LD_ADDR_OWVAR 35
13708: PUSH
13709: LD_INT 20
13711: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13712: LD_ADDR_OWVAR 28
13716: PUSH
13717: LD_INT 17
13719: ST_TO_ADDR
// hc_gallery :=  ;
13720: LD_ADDR_OWVAR 33
13724: PUSH
13725: LD_STRING 
13727: ST_TO_ADDR
// hc_name :=  ;
13728: LD_ADDR_OWVAR 26
13732: PUSH
13733: LD_STRING 
13735: ST_TO_ADDR
// un := CreateHuman ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: CALL_OW 44
13745: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13746: LD_VAR 0 2
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 51
// tmp := tmp ^ un ;
13758: LD_ADDR_VAR 0 3
13762: PUSH
13763: LD_VAR 0 3
13767: PUSH
13768: LD_VAR 0 2
13772: ADD
13773: ST_TO_ADDR
// end ;
13774: GO 13670
13776: POP
13777: POP
// repeat wait ( 0 0$1 ) ;
13778: LD_INT 35
13780: PPUSH
13781: CALL_OW 67
// for un in tmp do
13785: LD_ADDR_VAR 0 2
13789: PUSH
13790: LD_VAR 0 3
13794: PUSH
13795: FOR_IN
13796: IFFALSE 13870
// begin if IsDead ( un ) then
13798: LD_VAR 0 2
13802: PPUSH
13803: CALL_OW 301
13807: IFFALSE 13827
// begin tmp := tmp diff un ;
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_VAR 0 3
13818: PUSH
13819: LD_VAR 0 2
13823: DIFF
13824: ST_TO_ADDR
// continue ;
13825: GO 13795
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13827: LD_VAR 0 2
13831: PPUSH
13832: LD_INT 3
13834: PUSH
13835: LD_INT 22
13837: PUSH
13838: LD_INT 0
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 69
13853: PPUSH
13854: LD_VAR 0 2
13858: PPUSH
13859: CALL_OW 74
13863: PPUSH
13864: CALL_OW 115
// end ;
13868: GO 13795
13870: POP
13871: POP
// until not tmp ;
13872: LD_VAR 0 3
13876: NOT
13877: IFFALSE 13778
// end ;
13879: PPOPN 3
13881: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13882: LD_EXP 25
13886: PUSH
13887: LD_EXP 50
13891: AND
13892: IFFALSE 13946
13894: GO 13896
13896: DISABLE
// begin ToLua ( displayTroll(); ) ;
13897: LD_STRING displayTroll();
13899: PPUSH
13900: CALL_OW 559
// wait ( 3 3$00 ) ;
13904: LD_INT 6300
13906: PPUSH
13907: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13911: LD_STRING hideTroll();
13913: PPUSH
13914: CALL_OW 559
// wait ( 1 1$00 ) ;
13918: LD_INT 2100
13920: PPUSH
13921: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13925: LD_STRING displayTroll();
13927: PPUSH
13928: CALL_OW 559
// wait ( 1 1$00 ) ;
13932: LD_INT 2100
13934: PPUSH
13935: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13939: LD_STRING hideTroll();
13941: PPUSH
13942: CALL_OW 559
// end ;
13946: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13947: LD_EXP 25
13951: PUSH
13952: LD_EXP 51
13956: AND
13957: IFFALSE 14020
13959: GO 13961
13961: DISABLE
13962: LD_INT 0
13964: PPUSH
// begin p := 0 ;
13965: LD_ADDR_VAR 0 1
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// repeat game_speed := 1 ;
13973: LD_ADDR_OWVAR 65
13977: PUSH
13978: LD_INT 1
13980: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13981: LD_INT 35
13983: PPUSH
13984: CALL_OW 67
// p := p + 1 ;
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: LD_VAR 0 1
13997: PUSH
13998: LD_INT 1
14000: PLUS
14001: ST_TO_ADDR
// until p >= 60 ;
14002: LD_VAR 0 1
14006: PUSH
14007: LD_INT 60
14009: GREATEREQUAL
14010: IFFALSE 13973
// game_speed := 4 ;
14012: LD_ADDR_OWVAR 65
14016: PUSH
14017: LD_INT 4
14019: ST_TO_ADDR
// end ;
14020: PPOPN 1
14022: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14023: LD_EXP 25
14027: PUSH
14028: LD_EXP 52
14032: AND
14033: IFFALSE 14179
14035: GO 14037
14037: DISABLE
14038: LD_INT 0
14040: PPUSH
14041: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_INT 22
14049: PUSH
14050: LD_OWVAR 2
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 2
14061: PUSH
14062: LD_INT 30
14064: PUSH
14065: LD_INT 0
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 30
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 69
14095: ST_TO_ADDR
// if not depot then
14096: LD_VAR 0 1
14100: NOT
14101: IFFALSE 14105
// exit ;
14103: GO 14179
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14105: LD_ADDR_VAR 0 2
14109: PUSH
14110: LD_VAR 0 1
14114: PUSH
14115: LD_INT 1
14117: PPUSH
14118: LD_VAR 0 1
14122: PPUSH
14123: CALL_OW 12
14127: ARRAY
14128: PPUSH
14129: CALL_OW 274
14133: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14134: LD_VAR 0 2
14138: PPUSH
14139: LD_INT 1
14141: PPUSH
14142: LD_INT 0
14144: PPUSH
14145: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_INT 2
14156: PPUSH
14157: LD_INT 0
14159: PPUSH
14160: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14164: LD_VAR 0 2
14168: PPUSH
14169: LD_INT 3
14171: PPUSH
14172: LD_INT 0
14174: PPUSH
14175: CALL_OW 277
// end ;
14179: PPOPN 2
14181: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14182: LD_EXP 25
14186: PUSH
14187: LD_EXP 53
14191: AND
14192: IFFALSE 14289
14194: GO 14196
14196: DISABLE
14197: LD_INT 0
14199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14200: LD_ADDR_VAR 0 1
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_OWVAR 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 21
14219: PUSH
14220: LD_INT 1
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 3
14229: PUSH
14230: LD_INT 23
14232: PUSH
14233: LD_INT 0
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if not tmp then
14254: LD_VAR 0 1
14258: NOT
14259: IFFALSE 14263
// exit ;
14261: GO 14289
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14263: LD_VAR 0 1
14267: PUSH
14268: LD_INT 1
14270: PPUSH
14271: LD_VAR 0 1
14275: PPUSH
14276: CALL_OW 12
14280: ARRAY
14281: PPUSH
14282: LD_INT 200
14284: PPUSH
14285: CALL_OW 234
// end ;
14289: PPOPN 1
14291: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14292: LD_EXP 25
14296: PUSH
14297: LD_EXP 54
14301: AND
14302: IFFALSE 14381
14304: GO 14306
14306: DISABLE
14307: LD_INT 0
14309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14310: LD_ADDR_VAR 0 1
14314: PUSH
14315: LD_INT 22
14317: PUSH
14318: LD_OWVAR 2
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// if not tmp then
14346: LD_VAR 0 1
14350: NOT
14351: IFFALSE 14355
// exit ;
14353: GO 14381
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14355: LD_VAR 0 1
14359: PUSH
14360: LD_INT 1
14362: PPUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 12
14372: ARRAY
14373: PPUSH
14374: LD_INT 60
14376: PPUSH
14377: CALL_OW 234
// end ;
14381: PPOPN 1
14383: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14384: LD_EXP 25
14388: PUSH
14389: LD_EXP 55
14393: AND
14394: IFFALSE 14493
14396: GO 14398
14398: DISABLE
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
// begin enable ;
14403: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14404: LD_ADDR_VAR 0 1
14408: PUSH
14409: LD_INT 22
14411: PUSH
14412: LD_OWVAR 2
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 61
14423: PUSH
14424: EMPTY
14425: LIST
14426: PUSH
14427: LD_INT 33
14429: PUSH
14430: LD_INT 2
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if not tmp then
14447: LD_VAR 0 1
14451: NOT
14452: IFFALSE 14456
// exit ;
14454: GO 14493
// for i in tmp do
14456: LD_ADDR_VAR 0 2
14460: PUSH
14461: LD_VAR 0 1
14465: PUSH
14466: FOR_IN
14467: IFFALSE 14491
// if IsControledBy ( i ) then
14469: LD_VAR 0 2
14473: PPUSH
14474: CALL_OW 312
14478: IFFALSE 14489
// ComUnlink ( i ) ;
14480: LD_VAR 0 2
14484: PPUSH
14485: CALL_OW 136
14489: GO 14466
14491: POP
14492: POP
// end ;
14493: PPOPN 2
14495: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14496: LD_EXP 25
14500: PUSH
14501: LD_EXP 56
14505: AND
14506: IFFALSE 14646
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
// begin ToLua ( displayPowell(); ) ;
14515: LD_STRING displayPowell();
14517: PPUSH
14518: CALL_OW 559
// uc_side := 0 ;
14522: LD_ADDR_OWVAR 20
14526: PUSH
14527: LD_INT 0
14529: ST_TO_ADDR
// uc_nation := 2 ;
14530: LD_ADDR_OWVAR 21
14534: PUSH
14535: LD_INT 2
14537: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14538: LD_ADDR_OWVAR 37
14542: PUSH
14543: LD_INT 14
14545: ST_TO_ADDR
// vc_engine := engine_siberite ;
14546: LD_ADDR_OWVAR 39
14550: PUSH
14551: LD_INT 3
14553: ST_TO_ADDR
// vc_control := control_apeman ;
14554: LD_ADDR_OWVAR 38
14558: PUSH
14559: LD_INT 5
14561: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14562: LD_ADDR_OWVAR 40
14566: PUSH
14567: LD_INT 29
14569: ST_TO_ADDR
// un := CreateVehicle ;
14570: LD_ADDR_VAR 0 2
14574: PUSH
14575: CALL_OW 45
14579: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14580: LD_VAR 0 2
14584: PPUSH
14585: LD_INT 1
14587: PPUSH
14588: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14592: LD_INT 35
14594: PPUSH
14595: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_INT 22
14606: PUSH
14607: LD_OWVAR 2
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PPUSH
14616: CALL_OW 69
14620: PPUSH
14621: LD_VAR 0 2
14625: PPUSH
14626: CALL_OW 74
14630: PPUSH
14631: CALL_OW 115
// until IsDead ( un ) ;
14635: LD_VAR 0 2
14639: PPUSH
14640: CALL_OW 301
14644: IFFALSE 14592
// end ;
14646: PPOPN 2
14648: END
// every 0 0$1 trigger StreamModeActive and sStu do
14649: LD_EXP 25
14653: PUSH
14654: LD_EXP 64
14658: AND
14659: IFFALSE 14675
14661: GO 14663
14663: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14664: LD_STRING displayStucuk();
14666: PPUSH
14667: CALL_OW 559
// ResetFog ;
14671: CALL_OW 335
// end ;
14675: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14676: LD_EXP 25
14680: PUSH
14681: LD_EXP 57
14685: AND
14686: IFFALSE 14827
14688: GO 14690
14690: DISABLE
14691: LD_INT 0
14693: PPUSH
14694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14695: LD_ADDR_VAR 0 2
14699: PUSH
14700: LD_INT 22
14702: PUSH
14703: LD_OWVAR 2
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 21
14714: PUSH
14715: LD_INT 1
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 69
14730: ST_TO_ADDR
// if not tmp then
14731: LD_VAR 0 2
14735: NOT
14736: IFFALSE 14740
// exit ;
14738: GO 14827
// un := tmp [ rand ( 1 , tmp ) ] ;
14740: LD_ADDR_VAR 0 1
14744: PUSH
14745: LD_VAR 0 2
14749: PUSH
14750: LD_INT 1
14752: PPUSH
14753: LD_VAR 0 2
14757: PPUSH
14758: CALL_OW 12
14762: ARRAY
14763: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14764: LD_VAR 0 1
14768: PPUSH
14769: LD_INT 0
14771: PPUSH
14772: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14776: LD_VAR 0 1
14780: PPUSH
14781: LD_OWVAR 3
14785: PUSH
14786: LD_VAR 0 1
14790: DIFF
14791: PPUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 74
14801: PPUSH
14802: CALL_OW 115
// wait ( 0 0$20 ) ;
14806: LD_INT 700
14808: PPUSH
14809: CALL_OW 67
// SetSide ( un , your_side ) ;
14813: LD_VAR 0 1
14817: PPUSH
14818: LD_OWVAR 2
14822: PPUSH
14823: CALL_OW 235
// end ;
14827: PPOPN 2
14829: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14830: LD_EXP 25
14834: PUSH
14835: LD_EXP 58
14839: AND
14840: IFFALSE 14946
14842: GO 14844
14844: DISABLE
14845: LD_INT 0
14847: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14848: LD_ADDR_VAR 0 1
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_OWVAR 2
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 2
14867: PUSH
14868: LD_INT 30
14870: PUSH
14871: LD_INT 0
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 1
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: ST_TO_ADDR
// if not depot then
14902: LD_VAR 0 1
14906: NOT
14907: IFFALSE 14911
// exit ;
14909: GO 14946
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14911: LD_VAR 0 1
14915: PUSH
14916: LD_INT 1
14918: ARRAY
14919: PPUSH
14920: CALL_OW 250
14924: PPUSH
14925: LD_VAR 0 1
14929: PUSH
14930: LD_INT 1
14932: ARRAY
14933: PPUSH
14934: CALL_OW 251
14938: PPUSH
14939: LD_INT 70
14941: PPUSH
14942: CALL_OW 495
// end ;
14946: PPOPN 1
14948: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14949: LD_EXP 25
14953: PUSH
14954: LD_EXP 59
14958: AND
14959: IFFALSE 15170
14961: GO 14963
14963: DISABLE
14964: LD_INT 0
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
14970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14971: LD_ADDR_VAR 0 5
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_OWVAR 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 21
14990: PUSH
14991: LD_INT 1
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 69
15006: ST_TO_ADDR
// if not tmp then
15007: LD_VAR 0 5
15011: NOT
15012: IFFALSE 15016
// exit ;
15014: GO 15170
// for i in tmp do
15016: LD_ADDR_VAR 0 1
15020: PUSH
15021: LD_VAR 0 5
15025: PUSH
15026: FOR_IN
15027: IFFALSE 15168
// begin d := rand ( 0 , 5 ) ;
15029: LD_ADDR_VAR 0 4
15033: PUSH
15034: LD_INT 0
15036: PPUSH
15037: LD_INT 5
15039: PPUSH
15040: CALL_OW 12
15044: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 250
15059: PPUSH
15060: LD_VAR 0 4
15064: PPUSH
15065: LD_INT 3
15067: PPUSH
15068: LD_INT 12
15070: PPUSH
15071: CALL_OW 12
15075: PPUSH
15076: CALL_OW 272
15080: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: LD_VAR 0 1
15090: PPUSH
15091: CALL_OW 251
15095: PPUSH
15096: LD_VAR 0 4
15100: PPUSH
15101: LD_INT 3
15103: PPUSH
15104: LD_INT 12
15106: PPUSH
15107: CALL_OW 12
15111: PPUSH
15112: CALL_OW 273
15116: ST_TO_ADDR
// if ValidHex ( x , y ) then
15117: LD_VAR 0 2
15121: PPUSH
15122: LD_VAR 0 3
15126: PPUSH
15127: CALL_OW 488
15131: IFFALSE 15166
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15133: LD_VAR 0 1
15137: PPUSH
15138: LD_VAR 0 2
15142: PPUSH
15143: LD_VAR 0 3
15147: PPUSH
15148: LD_INT 3
15150: PPUSH
15151: LD_INT 6
15153: PPUSH
15154: CALL_OW 12
15158: PPUSH
15159: LD_INT 1
15161: PPUSH
15162: CALL_OW 483
// end ;
15166: GO 15026
15168: POP
15169: POP
// end ;
15170: PPOPN 5
15172: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15173: LD_EXP 25
15177: PUSH
15178: LD_EXP 60
15182: AND
15183: IFFALSE 15277
15185: GO 15187
15187: DISABLE
15188: LD_INT 0
15190: PPUSH
15191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15192: LD_ADDR_VAR 0 2
15196: PUSH
15197: LD_INT 22
15199: PUSH
15200: LD_OWVAR 2
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 32
15211: PUSH
15212: LD_INT 1
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 21
15221: PUSH
15222: LD_INT 2
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: PPUSH
15234: CALL_OW 69
15238: ST_TO_ADDR
// if not tmp then
15239: LD_VAR 0 2
15243: NOT
15244: IFFALSE 15248
// exit ;
15246: GO 15277
// for i in tmp do
15248: LD_ADDR_VAR 0 1
15252: PUSH
15253: LD_VAR 0 2
15257: PUSH
15258: FOR_IN
15259: IFFALSE 15275
// SetFuel ( i , 0 ) ;
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 240
15273: GO 15258
15275: POP
15276: POP
// end ;
15277: PPOPN 2
15279: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15280: LD_EXP 25
15284: PUSH
15285: LD_EXP 61
15289: AND
15290: IFFALSE 15356
15292: GO 15294
15294: DISABLE
15295: LD_INT 0
15297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15298: LD_ADDR_VAR 0 1
15302: PUSH
15303: LD_INT 22
15305: PUSH
15306: LD_OWVAR 2
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 30
15317: PUSH
15318: LD_INT 29
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: ST_TO_ADDR
// if not tmp then
15334: LD_VAR 0 1
15338: NOT
15339: IFFALSE 15343
// exit ;
15341: GO 15356
// DestroyUnit ( tmp [ 1 ] ) ;
15343: LD_VAR 0 1
15347: PUSH
15348: LD_INT 1
15350: ARRAY
15351: PPUSH
15352: CALL_OW 65
// end ;
15356: PPOPN 1
15358: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15359: LD_EXP 25
15363: PUSH
15364: LD_EXP 63
15368: AND
15369: IFFALSE 15498
15371: GO 15373
15373: DISABLE
15374: LD_INT 0
15376: PPUSH
// begin uc_side := 0 ;
15377: LD_ADDR_OWVAR 20
15381: PUSH
15382: LD_INT 0
15384: ST_TO_ADDR
// uc_nation := nation_arabian ;
15385: LD_ADDR_OWVAR 21
15389: PUSH
15390: LD_INT 2
15392: ST_TO_ADDR
// hc_gallery :=  ;
15393: LD_ADDR_OWVAR 33
15397: PUSH
15398: LD_STRING 
15400: ST_TO_ADDR
// hc_name :=  ;
15401: LD_ADDR_OWVAR 26
15405: PUSH
15406: LD_STRING 
15408: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15409: LD_INT 1
15411: PPUSH
15412: LD_INT 11
15414: PPUSH
15415: LD_INT 10
15417: PPUSH
15418: CALL_OW 380
// un := CreateHuman ;
15422: LD_ADDR_VAR 0 1
15426: PUSH
15427: CALL_OW 44
15431: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15444: LD_INT 35
15446: PPUSH
15447: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15451: LD_VAR 0 1
15455: PPUSH
15456: LD_INT 22
15458: PUSH
15459: LD_OWVAR 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 69
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: CALL_OW 74
15482: PPUSH
15483: CALL_OW 115
// until IsDead ( un ) ;
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 301
15496: IFFALSE 15444
// end ;
15498: PPOPN 1
15500: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15501: LD_EXP 25
15505: PUSH
15506: LD_EXP 65
15510: AND
15511: IFFALSE 15523
15513: GO 15515
15515: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15516: LD_STRING earthquake(getX(game), 0, 32)
15518: PPUSH
15519: CALL_OW 559
15523: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15524: LD_EXP 25
15528: PUSH
15529: LD_EXP 66
15533: AND
15534: IFFALSE 15625
15536: GO 15538
15538: DISABLE
15539: LD_INT 0
15541: PPUSH
// begin enable ;
15542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15543: LD_ADDR_VAR 0 1
15547: PUSH
15548: LD_INT 22
15550: PUSH
15551: LD_OWVAR 2
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 21
15562: PUSH
15563: LD_INT 2
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 33
15572: PUSH
15573: LD_INT 3
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: PPUSH
15585: CALL_OW 69
15589: ST_TO_ADDR
// if not tmp then
15590: LD_VAR 0 1
15594: NOT
15595: IFFALSE 15599
// exit ;
15597: GO 15625
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15599: LD_VAR 0 1
15603: PUSH
15604: LD_INT 1
15606: PPUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 12
15616: ARRAY
15617: PPUSH
15618: LD_INT 1
15620: PPUSH
15621: CALL_OW 234
// end ;
15625: PPOPN 1
15627: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15628: LD_EXP 25
15632: PUSH
15633: LD_EXP 67
15637: AND
15638: IFFALSE 15779
15640: GO 15642
15642: DISABLE
15643: LD_INT 0
15645: PPUSH
15646: PPUSH
15647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15648: LD_ADDR_VAR 0 3
15652: PUSH
15653: LD_INT 22
15655: PUSH
15656: LD_OWVAR 2
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 25
15667: PUSH
15668: LD_INT 1
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: ST_TO_ADDR
// if not tmp then
15684: LD_VAR 0 3
15688: NOT
15689: IFFALSE 15693
// exit ;
15691: GO 15779
// un := tmp [ rand ( 1 , tmp ) ] ;
15693: LD_ADDR_VAR 0 2
15697: PUSH
15698: LD_VAR 0 3
15702: PUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_VAR 0 3
15710: PPUSH
15711: CALL_OW 12
15715: ARRAY
15716: ST_TO_ADDR
// if Crawls ( un ) then
15717: LD_VAR 0 2
15721: PPUSH
15722: CALL_OW 318
15726: IFFALSE 15737
// ComWalk ( un ) ;
15728: LD_VAR 0 2
15732: PPUSH
15733: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15737: LD_VAR 0 2
15741: PPUSH
15742: LD_INT 9
15744: PPUSH
15745: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15749: LD_INT 28
15751: PPUSH
15752: LD_OWVAR 2
15756: PPUSH
15757: LD_INT 2
15759: PPUSH
15760: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15764: LD_INT 29
15766: PPUSH
15767: LD_OWVAR 2
15771: PPUSH
15772: LD_INT 2
15774: PPUSH
15775: CALL_OW 322
// end ;
15779: PPOPN 3
15781: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15782: LD_EXP 25
15786: PUSH
15787: LD_EXP 68
15791: AND
15792: IFFALSE 15903
15794: GO 15796
15796: DISABLE
15797: LD_INT 0
15799: PPUSH
15800: PPUSH
15801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15802: LD_ADDR_VAR 0 3
15806: PUSH
15807: LD_INT 22
15809: PUSH
15810: LD_OWVAR 2
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 25
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 69
15837: ST_TO_ADDR
// if not tmp then
15838: LD_VAR 0 3
15842: NOT
15843: IFFALSE 15847
// exit ;
15845: GO 15903
// un := tmp [ rand ( 1 , tmp ) ] ;
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_VAR 0 3
15856: PUSH
15857: LD_INT 1
15859: PPUSH
15860: LD_VAR 0 3
15864: PPUSH
15865: CALL_OW 12
15869: ARRAY
15870: ST_TO_ADDR
// if Crawls ( un ) then
15871: LD_VAR 0 2
15875: PPUSH
15876: CALL_OW 318
15880: IFFALSE 15891
// ComWalk ( un ) ;
15882: LD_VAR 0 2
15886: PPUSH
15887: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15891: LD_VAR 0 2
15895: PPUSH
15896: LD_INT 8
15898: PPUSH
15899: CALL_OW 336
// end ;
15903: PPOPN 3
15905: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15906: LD_EXP 25
15910: PUSH
15911: LD_EXP 69
15915: AND
15916: IFFALSE 16060
15918: GO 15920
15920: DISABLE
15921: LD_INT 0
15923: PPUSH
15924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15925: LD_ADDR_VAR 0 2
15929: PUSH
15930: LD_INT 22
15932: PUSH
15933: LD_OWVAR 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 2
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: LD_INT 34
15957: PUSH
15958: LD_INT 12
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 34
15967: PUSH
15968: LD_INT 51
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 34
15977: PUSH
15978: LD_INT 32
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 69
16000: ST_TO_ADDR
// if not tmp then
16001: LD_VAR 0 2
16005: NOT
16006: IFFALSE 16010
// exit ;
16008: GO 16060
// for i in tmp do
16010: LD_ADDR_VAR 0 1
16014: PUSH
16015: LD_VAR 0 2
16019: PUSH
16020: FOR_IN
16021: IFFALSE 16058
// if GetCargo ( i , mat_artifact ) = 0 then
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_INT 4
16030: PPUSH
16031: CALL_OW 289
16035: PUSH
16036: LD_INT 0
16038: EQUAL
16039: IFFALSE 16056
// SetCargo ( i , mat_siberit , 100 ) ;
16041: LD_VAR 0 1
16045: PPUSH
16046: LD_INT 3
16048: PPUSH
16049: LD_INT 100
16051: PPUSH
16052: CALL_OW 290
16056: GO 16020
16058: POP
16059: POP
// end ;
16060: PPOPN 2
16062: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16063: LD_EXP 25
16067: PUSH
16068: LD_EXP 70
16072: AND
16073: IFFALSE 16256
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16082: LD_ADDR_VAR 0 2
16086: PUSH
16087: LD_INT 22
16089: PUSH
16090: LD_OWVAR 2
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PPUSH
16099: CALL_OW 69
16103: ST_TO_ADDR
// if not tmp then
16104: LD_VAR 0 2
16108: NOT
16109: IFFALSE 16113
// exit ;
16111: GO 16256
// for i := 1 to 2 do
16113: LD_ADDR_VAR 0 1
16117: PUSH
16118: DOUBLE
16119: LD_INT 1
16121: DEC
16122: ST_TO_ADDR
16123: LD_INT 2
16125: PUSH
16126: FOR_TO
16127: IFFALSE 16254
// begin uc_side := your_side ;
16129: LD_ADDR_OWVAR 20
16133: PUSH
16134: LD_OWVAR 2
16138: ST_TO_ADDR
// uc_nation := nation_american ;
16139: LD_ADDR_OWVAR 21
16143: PUSH
16144: LD_INT 1
16146: ST_TO_ADDR
// vc_chassis := us_morphling ;
16147: LD_ADDR_OWVAR 37
16151: PUSH
16152: LD_INT 5
16154: ST_TO_ADDR
// vc_engine := engine_siberite ;
16155: LD_ADDR_OWVAR 39
16159: PUSH
16160: LD_INT 3
16162: ST_TO_ADDR
// vc_control := control_computer ;
16163: LD_ADDR_OWVAR 38
16167: PUSH
16168: LD_INT 3
16170: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16171: LD_ADDR_OWVAR 40
16175: PUSH
16176: LD_INT 10
16178: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16179: LD_VAR 0 2
16183: PUSH
16184: LD_INT 1
16186: ARRAY
16187: PPUSH
16188: CALL_OW 310
16192: NOT
16193: IFFALSE 16240
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16195: CALL_OW 45
16199: PPUSH
16200: LD_VAR 0 2
16204: PUSH
16205: LD_INT 1
16207: ARRAY
16208: PPUSH
16209: CALL_OW 250
16213: PPUSH
16214: LD_VAR 0 2
16218: PUSH
16219: LD_INT 1
16221: ARRAY
16222: PPUSH
16223: CALL_OW 251
16227: PPUSH
16228: LD_INT 12
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 50
16238: GO 16252
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16240: CALL_OW 45
16244: PPUSH
16245: LD_INT 1
16247: PPUSH
16248: CALL_OW 51
// end ;
16252: GO 16126
16254: POP
16255: POP
// end ;
16256: PPOPN 2
16258: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16259: LD_EXP 25
16263: PUSH
16264: LD_EXP 71
16268: AND
16269: IFFALSE 16491
16271: GO 16273
16273: DISABLE
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16282: LD_ADDR_VAR 0 6
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_OWVAR 2
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 21
16301: PUSH
16302: LD_INT 1
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 3
16311: PUSH
16312: LD_INT 23
16314: PUSH
16315: LD_INT 0
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: PPUSH
16331: CALL_OW 69
16335: ST_TO_ADDR
// if not tmp then
16336: LD_VAR 0 6
16340: NOT
16341: IFFALSE 16345
// exit ;
16343: GO 16491
// s1 := rand ( 1 , 4 ) ;
16345: LD_ADDR_VAR 0 2
16349: PUSH
16350: LD_INT 1
16352: PPUSH
16353: LD_INT 4
16355: PPUSH
16356: CALL_OW 12
16360: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16361: LD_ADDR_VAR 0 4
16365: PUSH
16366: LD_VAR 0 6
16370: PUSH
16371: LD_INT 1
16373: ARRAY
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 259
16384: ST_TO_ADDR
// if s1 = 1 then
16385: LD_VAR 0 2
16389: PUSH
16390: LD_INT 1
16392: EQUAL
16393: IFFALSE 16413
// s2 := rand ( 2 , 4 ) else
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_INT 2
16402: PPUSH
16403: LD_INT 4
16405: PPUSH
16406: CALL_OW 12
16410: ST_TO_ADDR
16411: GO 16421
// s2 := 1 ;
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_INT 1
16420: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16421: LD_ADDR_VAR 0 5
16425: PUSH
16426: LD_VAR 0 6
16430: PUSH
16431: LD_INT 1
16433: ARRAY
16434: PPUSH
16435: LD_VAR 0 3
16439: PPUSH
16440: CALL_OW 259
16444: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16445: LD_VAR 0 6
16449: PUSH
16450: LD_INT 1
16452: ARRAY
16453: PPUSH
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_VAR 0 5
16463: PPUSH
16464: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16468: LD_VAR 0 6
16472: PUSH
16473: LD_INT 1
16475: ARRAY
16476: PPUSH
16477: LD_VAR 0 3
16481: PPUSH
16482: LD_VAR 0 4
16486: PPUSH
16487: CALL_OW 237
// end ;
16491: PPOPN 6
16493: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16494: LD_EXP 25
16498: PUSH
16499: LD_EXP 72
16503: AND
16504: IFFALSE 16583
16506: GO 16508
16508: DISABLE
16509: LD_INT 0
16511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16512: LD_ADDR_VAR 0 1
16516: PUSH
16517: LD_INT 22
16519: PUSH
16520: LD_OWVAR 2
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 30
16531: PUSH
16532: LD_INT 3
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PPUSH
16543: CALL_OW 69
16547: ST_TO_ADDR
// if not tmp then
16548: LD_VAR 0 1
16552: NOT
16553: IFFALSE 16557
// exit ;
16555: GO 16583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16557: LD_VAR 0 1
16561: PUSH
16562: LD_INT 1
16564: PPUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PPUSH
16576: LD_INT 1
16578: PPUSH
16579: CALL_OW 234
// end ;
16583: PPOPN 1
16585: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16586: LD_EXP 25
16590: PUSH
16591: LD_EXP 73
16595: AND
16596: IFFALSE 16708
16598: GO 16600
16600: DISABLE
16601: LD_INT 0
16603: PPUSH
16604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16605: LD_ADDR_VAR 0 2
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_OWVAR 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 2
16624: PUSH
16625: LD_INT 30
16627: PUSH
16628: LD_INT 27
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 30
16637: PUSH
16638: LD_INT 26
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 30
16647: PUSH
16648: LD_INT 28
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PPUSH
16665: CALL_OW 69
16669: ST_TO_ADDR
// if not tmp then
16670: LD_VAR 0 2
16674: NOT
16675: IFFALSE 16679
// exit ;
16677: GO 16708
// for i in tmp do
16679: LD_ADDR_VAR 0 1
16683: PUSH
16684: LD_VAR 0 2
16688: PUSH
16689: FOR_IN
16690: IFFALSE 16706
// SetLives ( i , 1 ) ;
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 234
16704: GO 16689
16706: POP
16707: POP
// end ;
16708: PPOPN 2
16710: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16711: LD_EXP 25
16715: PUSH
16716: LD_EXP 74
16720: AND
16721: IFFALSE 17008
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
16729: PPUSH
16730: PPUSH
// begin i := rand ( 1 , 7 ) ;
16731: LD_ADDR_VAR 0 1
16735: PUSH
16736: LD_INT 1
16738: PPUSH
16739: LD_INT 7
16741: PPUSH
16742: CALL_OW 12
16746: ST_TO_ADDR
// case i of 1 :
16747: LD_VAR 0 1
16751: PUSH
16752: LD_INT 1
16754: DOUBLE
16755: EQUAL
16756: IFTRUE 16760
16758: GO 16770
16760: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16761: LD_STRING earthquake(getX(game), 0, 32)
16763: PPUSH
16764: CALL_OW 559
16768: GO 17008
16770: LD_INT 2
16772: DOUBLE
16773: EQUAL
16774: IFTRUE 16778
16776: GO 16792
16778: POP
// begin ToLua ( displayStucuk(); ) ;
16779: LD_STRING displayStucuk();
16781: PPUSH
16782: CALL_OW 559
// ResetFog ;
16786: CALL_OW 335
// end ; 3 :
16790: GO 17008
16792: LD_INT 3
16794: DOUBLE
16795: EQUAL
16796: IFTRUE 16800
16798: GO 16904
16800: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16801: LD_ADDR_VAR 0 2
16805: PUSH
16806: LD_INT 22
16808: PUSH
16809: LD_OWVAR 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 25
16820: PUSH
16821: LD_INT 1
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 69
16836: ST_TO_ADDR
// if not tmp then
16837: LD_VAR 0 2
16841: NOT
16842: IFFALSE 16846
// exit ;
16844: GO 17008
// un := tmp [ rand ( 1 , tmp ) ] ;
16846: LD_ADDR_VAR 0 3
16850: PUSH
16851: LD_VAR 0 2
16855: PUSH
16856: LD_INT 1
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 12
16868: ARRAY
16869: ST_TO_ADDR
// if Crawls ( un ) then
16870: LD_VAR 0 3
16874: PPUSH
16875: CALL_OW 318
16879: IFFALSE 16890
// ComWalk ( un ) ;
16881: LD_VAR 0 3
16885: PPUSH
16886: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16890: LD_VAR 0 3
16894: PPUSH
16895: LD_INT 8
16897: PPUSH
16898: CALL_OW 336
// end ; 4 :
16902: GO 17008
16904: LD_INT 4
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 16986
16912: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16913: LD_ADDR_VAR 0 2
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_OWVAR 2
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 30
16932: PUSH
16933: LD_INT 29
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PPUSH
16944: CALL_OW 69
16948: ST_TO_ADDR
// if not tmp then
16949: LD_VAR 0 2
16953: NOT
16954: IFFALSE 16958
// exit ;
16956: GO 17008
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16958: LD_VAR 0 2
16962: PUSH
16963: LD_INT 1
16965: ARRAY
16966: PPUSH
16967: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16971: LD_VAR 0 2
16975: PUSH
16976: LD_INT 1
16978: ARRAY
16979: PPUSH
16980: CALL_OW 65
// end ; 5 .. 7 :
16984: GO 17008
16986: LD_INT 5
16988: DOUBLE
16989: GREATEREQUAL
16990: IFFALSE 16998
16992: LD_INT 7
16994: DOUBLE
16995: LESSEQUAL
16996: IFTRUE 17000
16998: GO 17007
17000: POP
// StreamSibBomb ; end ;
17001: CALL 13245 0 0
17005: GO 17008
17007: POP
// end ;
17008: PPOPN 3
17010: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17011: LD_EXP 25
17015: PUSH
17016: LD_EXP 75
17020: AND
17021: IFFALSE 17177
17023: GO 17025
17025: DISABLE
17026: LD_INT 0
17028: PPUSH
17029: PPUSH
17030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17031: LD_ADDR_VAR 0 2
17035: PUSH
17036: LD_INT 81
17038: PUSH
17039: LD_OWVAR 2
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 21
17053: PUSH
17054: LD_INT 1
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 21
17063: PUSH
17064: LD_INT 2
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 69
17084: ST_TO_ADDR
// if not tmp then
17085: LD_VAR 0 2
17089: NOT
17090: IFFALSE 17094
// exit ;
17092: GO 17177
// p := 0 ;
17094: LD_ADDR_VAR 0 3
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17102: LD_INT 35
17104: PPUSH
17105: CALL_OW 67
// p := p + 1 ;
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_VAR 0 3
17118: PUSH
17119: LD_INT 1
17121: PLUS
17122: ST_TO_ADDR
// for i in tmp do
17123: LD_ADDR_VAR 0 1
17127: PUSH
17128: LD_VAR 0 2
17132: PUSH
17133: FOR_IN
17134: IFFALSE 17165
// if GetLives ( i ) < 1000 then
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL_OW 256
17145: PUSH
17146: LD_INT 1000
17148: LESS
17149: IFFALSE 17163
// SetLives ( i , 1000 ) ;
17151: LD_VAR 0 1
17155: PPUSH
17156: LD_INT 1000
17158: PPUSH
17159: CALL_OW 234
17163: GO 17133
17165: POP
17166: POP
// until p > 20 ;
17167: LD_VAR 0 3
17171: PUSH
17172: LD_INT 20
17174: GREATER
17175: IFFALSE 17102
// end ;
17177: PPOPN 3
17179: END
// every 0 0$1 trigger StreamModeActive and sTime do
17180: LD_EXP 25
17184: PUSH
17185: LD_EXP 76
17189: AND
17190: IFFALSE 17225
17192: GO 17194
17194: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17195: LD_INT 28
17197: PPUSH
17198: LD_OWVAR 2
17202: PPUSH
17203: LD_INT 2
17205: PPUSH
17206: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17210: LD_INT 30
17212: PPUSH
17213: LD_OWVAR 2
17217: PPUSH
17218: LD_INT 2
17220: PPUSH
17221: CALL_OW 322
// end ;
17225: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17226: LD_EXP 25
17230: PUSH
17231: LD_EXP 77
17235: AND
17236: IFFALSE 17357
17238: GO 17240
17240: DISABLE
17241: LD_INT 0
17243: PPUSH
17244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17245: LD_ADDR_VAR 0 2
17249: PUSH
17250: LD_INT 22
17252: PUSH
17253: LD_OWVAR 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 21
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 3
17274: PUSH
17275: LD_INT 23
17277: PUSH
17278: LD_INT 0
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: PPUSH
17294: CALL_OW 69
17298: ST_TO_ADDR
// if not tmp then
17299: LD_VAR 0 2
17303: NOT
17304: IFFALSE 17308
// exit ;
17306: GO 17357
// for i in tmp do
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_VAR 0 2
17317: PUSH
17318: FOR_IN
17319: IFFALSE 17355
// begin if Crawls ( i ) then
17321: LD_VAR 0 1
17325: PPUSH
17326: CALL_OW 318
17330: IFFALSE 17341
// ComWalk ( i ) ;
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 138
// SetClass ( i , 2 ) ;
17341: LD_VAR 0 1
17345: PPUSH
17346: LD_INT 2
17348: PPUSH
17349: CALL_OW 336
// end ;
17353: GO 17318
17355: POP
17356: POP
// end ;
17357: PPOPN 2
17359: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17360: LD_EXP 25
17364: PUSH
17365: LD_EXP 78
17369: AND
17370: IFFALSE 17658
17372: GO 17374
17374: DISABLE
17375: LD_INT 0
17377: PPUSH
17378: PPUSH
17379: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17380: LD_OWVAR 2
17384: PPUSH
17385: LD_INT 9
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: LD_INT 1
17393: PPUSH
17394: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17398: LD_INT 9
17400: PPUSH
17401: LD_OWVAR 2
17405: PPUSH
17406: CALL_OW 343
// uc_side := 9 ;
17410: LD_ADDR_OWVAR 20
17414: PUSH
17415: LD_INT 9
17417: ST_TO_ADDR
// uc_nation := 2 ;
17418: LD_ADDR_OWVAR 21
17422: PUSH
17423: LD_INT 2
17425: ST_TO_ADDR
// hc_name := Dark Warrior ;
17426: LD_ADDR_OWVAR 26
17430: PUSH
17431: LD_STRING Dark Warrior
17433: ST_TO_ADDR
// hc_gallery :=  ;
17434: LD_ADDR_OWVAR 33
17438: PUSH
17439: LD_STRING 
17441: ST_TO_ADDR
// hc_noskilllimit := true ;
17442: LD_ADDR_OWVAR 76
17446: PUSH
17447: LD_INT 1
17449: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17450: LD_ADDR_OWVAR 31
17454: PUSH
17455: LD_INT 30
17457: PUSH
17458: LD_INT 30
17460: PUSH
17461: LD_INT 30
17463: PUSH
17464: LD_INT 30
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: ST_TO_ADDR
// un := CreateHuman ;
17473: LD_ADDR_VAR 0 3
17477: PUSH
17478: CALL_OW 44
17482: ST_TO_ADDR
// hc_noskilllimit := false ;
17483: LD_ADDR_OWVAR 76
17487: PUSH
17488: LD_INT 0
17490: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17491: LD_VAR 0 3
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: CALL_OW 51
// ToLua ( playRanger() ) ;
17503: LD_STRING playRanger()
17505: PPUSH
17506: CALL_OW 559
// p := 0 ;
17510: LD_ADDR_VAR 0 2
17514: PUSH
17515: LD_INT 0
17517: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17518: LD_INT 35
17520: PPUSH
17521: CALL_OW 67
// p := p + 1 ;
17525: LD_ADDR_VAR 0 2
17529: PUSH
17530: LD_VAR 0 2
17534: PUSH
17535: LD_INT 1
17537: PLUS
17538: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17539: LD_VAR 0 3
17543: PPUSH
17544: CALL_OW 256
17548: PUSH
17549: LD_INT 1000
17551: LESS
17552: IFFALSE 17566
// SetLives ( un , 1000 ) ;
17554: LD_VAR 0 3
17558: PPUSH
17559: LD_INT 1000
17561: PPUSH
17562: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17566: LD_VAR 0 3
17570: PPUSH
17571: LD_INT 81
17573: PUSH
17574: LD_OWVAR 2
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 91
17585: PUSH
17586: LD_VAR 0 3
17590: PUSH
17591: LD_INT 30
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PPUSH
17603: CALL_OW 69
17607: PPUSH
17608: LD_VAR 0 3
17612: PPUSH
17613: CALL_OW 74
17617: PPUSH
17618: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17622: LD_VAR 0 2
17626: PUSH
17627: LD_INT 80
17629: GREATER
17630: PUSH
17631: LD_VAR 0 3
17635: PPUSH
17636: CALL_OW 301
17640: OR
17641: IFFALSE 17518
// if un then
17643: LD_VAR 0 3
17647: IFFALSE 17658
// RemoveUnit ( un ) ;
17649: LD_VAR 0 3
17653: PPUSH
17654: CALL_OW 64
// end ;
17658: PPOPN 3
17660: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17661: LD_EXP 79
17665: IFFALSE 17781
17667: GO 17669
17669: DISABLE
17670: LD_INT 0
17672: PPUSH
17673: PPUSH
17674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17675: LD_ADDR_VAR 0 2
17679: PUSH
17680: LD_INT 81
17682: PUSH
17683: LD_OWVAR 2
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 21
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PPUSH
17706: CALL_OW 69
17710: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17711: LD_STRING playComputer()
17713: PPUSH
17714: CALL_OW 559
// if not tmp then
17718: LD_VAR 0 2
17722: NOT
17723: IFFALSE 17727
// exit ;
17725: GO 17781
// for i in tmp do
17727: LD_ADDR_VAR 0 1
17731: PUSH
17732: LD_VAR 0 2
17736: PUSH
17737: FOR_IN
17738: IFFALSE 17779
// for j := 1 to 4 do
17740: LD_ADDR_VAR 0 3
17744: PUSH
17745: DOUBLE
17746: LD_INT 1
17748: DEC
17749: ST_TO_ADDR
17750: LD_INT 4
17752: PUSH
17753: FOR_TO
17754: IFFALSE 17775
// SetSkill ( i , j , 10 ) ;
17756: LD_VAR 0 1
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: LD_INT 10
17768: PPUSH
17769: CALL_OW 237
17773: GO 17753
17775: POP
17776: POP
17777: GO 17737
17779: POP
17780: POP
// end ;
17781: PPOPN 3
17783: END
// every 0 0$1 trigger s30 do var i , tmp ;
17784: LD_EXP 80
17788: IFFALSE 17857
17790: GO 17792
17792: DISABLE
17793: LD_INT 0
17795: PPUSH
17796: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17797: LD_ADDR_VAR 0 2
17801: PUSH
17802: LD_INT 22
17804: PUSH
17805: LD_OWVAR 2
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PPUSH
17814: CALL_OW 69
17818: ST_TO_ADDR
// if not tmp then
17819: LD_VAR 0 2
17823: NOT
17824: IFFALSE 17828
// exit ;
17826: GO 17857
// for i in tmp do
17828: LD_ADDR_VAR 0 1
17832: PUSH
17833: LD_VAR 0 2
17837: PUSH
17838: FOR_IN
17839: IFFALSE 17855
// SetLives ( i , 300 ) ;
17841: LD_VAR 0 1
17845: PPUSH
17846: LD_INT 300
17848: PPUSH
17849: CALL_OW 234
17853: GO 17838
17855: POP
17856: POP
// end ;
17857: PPOPN 2
17859: END
// every 0 0$1 trigger s60 do var i , tmp ;
17860: LD_EXP 81
17864: IFFALSE 17933
17866: GO 17868
17868: DISABLE
17869: LD_INT 0
17871: PPUSH
17872: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_INT 22
17880: PUSH
17881: LD_OWVAR 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PPUSH
17890: CALL_OW 69
17894: ST_TO_ADDR
// if not tmp then
17895: LD_VAR 0 2
17899: NOT
17900: IFFALSE 17904
// exit ;
17902: GO 17933
// for i in tmp do
17904: LD_ADDR_VAR 0 1
17908: PUSH
17909: LD_VAR 0 2
17913: PUSH
17914: FOR_IN
17915: IFFALSE 17931
// SetLives ( i , 600 ) ;
17917: LD_VAR 0 1
17921: PPUSH
17922: LD_INT 600
17924: PPUSH
17925: CALL_OW 234
17929: GO 17914
17931: POP
17932: POP
// end ;
17933: PPOPN 2
17935: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17936: LD_INT 0
17938: PPUSH
// case cmd of 301 :
17939: LD_VAR 0 1
17943: PUSH
17944: LD_INT 301
17946: DOUBLE
17947: EQUAL
17948: IFTRUE 17952
17950: GO 17984
17952: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17953: LD_VAR 0 6
17957: PPUSH
17958: LD_VAR 0 7
17962: PPUSH
17963: LD_VAR 0 8
17967: PPUSH
17968: LD_VAR 0 4
17972: PPUSH
17973: LD_VAR 0 5
17977: PPUSH
17978: CALL 19185 0 5
17982: GO 18105
17984: LD_INT 302
17986: DOUBLE
17987: EQUAL
17988: IFTRUE 17992
17990: GO 18029
17992: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17993: LD_VAR 0 6
17997: PPUSH
17998: LD_VAR 0 7
18002: PPUSH
18003: LD_VAR 0 8
18007: PPUSH
18008: LD_VAR 0 9
18012: PPUSH
18013: LD_VAR 0 4
18017: PPUSH
18018: LD_VAR 0 5
18022: PPUSH
18023: CALL 19276 0 6
18027: GO 18105
18029: LD_INT 303
18031: DOUBLE
18032: EQUAL
18033: IFTRUE 18037
18035: GO 18074
18037: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18038: LD_VAR 0 6
18042: PPUSH
18043: LD_VAR 0 7
18047: PPUSH
18048: LD_VAR 0 8
18052: PPUSH
18053: LD_VAR 0 9
18057: PPUSH
18058: LD_VAR 0 4
18062: PPUSH
18063: LD_VAR 0 5
18067: PPUSH
18068: CALL 18110 0 6
18072: GO 18105
18074: LD_INT 304
18076: DOUBLE
18077: EQUAL
18078: IFTRUE 18082
18080: GO 18104
18082: POP
// hHackTeleport ( unit , x , y ) ; end ;
18083: LD_VAR 0 2
18087: PPUSH
18088: LD_VAR 0 4
18092: PPUSH
18093: LD_VAR 0 5
18097: PPUSH
18098: CALL 19869 0 3
18102: GO 18105
18104: POP
// end ;
18105: LD_VAR 0 12
18109: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18110: LD_INT 0
18112: PPUSH
18113: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18114: LD_VAR 0 1
18118: PUSH
18119: LD_INT 1
18121: LESS
18122: PUSH
18123: LD_VAR 0 1
18127: PUSH
18128: LD_INT 3
18130: GREATER
18131: OR
18132: PUSH
18133: LD_VAR 0 5
18137: PPUSH
18138: LD_VAR 0 6
18142: PPUSH
18143: CALL_OW 428
18147: OR
18148: IFFALSE 18152
// exit ;
18150: GO 18872
// uc_side := your_side ;
18152: LD_ADDR_OWVAR 20
18156: PUSH
18157: LD_OWVAR 2
18161: ST_TO_ADDR
// uc_nation := nation ;
18162: LD_ADDR_OWVAR 21
18166: PUSH
18167: LD_VAR 0 1
18171: ST_TO_ADDR
// bc_level = 1 ;
18172: LD_ADDR_OWVAR 43
18176: PUSH
18177: LD_INT 1
18179: ST_TO_ADDR
// case btype of 1 :
18180: LD_VAR 0 2
18184: PUSH
18185: LD_INT 1
18187: DOUBLE
18188: EQUAL
18189: IFTRUE 18193
18191: GO 18204
18193: POP
// bc_type := b_depot ; 2 :
18194: LD_ADDR_OWVAR 42
18198: PUSH
18199: LD_INT 0
18201: ST_TO_ADDR
18202: GO 18816
18204: LD_INT 2
18206: DOUBLE
18207: EQUAL
18208: IFTRUE 18212
18210: GO 18223
18212: POP
// bc_type := b_warehouse ; 3 :
18213: LD_ADDR_OWVAR 42
18217: PUSH
18218: LD_INT 1
18220: ST_TO_ADDR
18221: GO 18816
18223: LD_INT 3
18225: DOUBLE
18226: EQUAL
18227: IFTRUE 18231
18229: GO 18242
18231: POP
// bc_type := b_lab ; 4 .. 9 :
18232: LD_ADDR_OWVAR 42
18236: PUSH
18237: LD_INT 6
18239: ST_TO_ADDR
18240: GO 18816
18242: LD_INT 4
18244: DOUBLE
18245: GREATEREQUAL
18246: IFFALSE 18254
18248: LD_INT 9
18250: DOUBLE
18251: LESSEQUAL
18252: IFTRUE 18256
18254: GO 18308
18256: POP
// begin bc_type := b_lab_half ;
18257: LD_ADDR_OWVAR 42
18261: PUSH
18262: LD_INT 7
18264: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18265: LD_ADDR_OWVAR 44
18269: PUSH
18270: LD_INT 10
18272: PUSH
18273: LD_INT 11
18275: PUSH
18276: LD_INT 12
18278: PUSH
18279: LD_INT 15
18281: PUSH
18282: LD_INT 14
18284: PUSH
18285: LD_INT 13
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: PUSH
18296: LD_VAR 0 2
18300: PUSH
18301: LD_INT 3
18303: MINUS
18304: ARRAY
18305: ST_TO_ADDR
// end ; 10 .. 13 :
18306: GO 18816
18308: LD_INT 10
18310: DOUBLE
18311: GREATEREQUAL
18312: IFFALSE 18320
18314: LD_INT 13
18316: DOUBLE
18317: LESSEQUAL
18318: IFTRUE 18322
18320: GO 18399
18322: POP
// begin bc_type := b_lab_full ;
18323: LD_ADDR_OWVAR 42
18327: PUSH
18328: LD_INT 8
18330: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18331: LD_ADDR_OWVAR 44
18335: PUSH
18336: LD_INT 10
18338: PUSH
18339: LD_INT 12
18341: PUSH
18342: LD_INT 14
18344: PUSH
18345: LD_INT 13
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_VAR 0 2
18358: PUSH
18359: LD_INT 9
18361: MINUS
18362: ARRAY
18363: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18364: LD_ADDR_OWVAR 45
18368: PUSH
18369: LD_INT 11
18371: PUSH
18372: LD_INT 15
18374: PUSH
18375: LD_INT 12
18377: PUSH
18378: LD_INT 15
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: PUSH
18387: LD_VAR 0 2
18391: PUSH
18392: LD_INT 9
18394: MINUS
18395: ARRAY
18396: ST_TO_ADDR
// end ; 14 :
18397: GO 18816
18399: LD_INT 14
18401: DOUBLE
18402: EQUAL
18403: IFTRUE 18407
18405: GO 18418
18407: POP
// bc_type := b_workshop ; 15 :
18408: LD_ADDR_OWVAR 42
18412: PUSH
18413: LD_INT 2
18415: ST_TO_ADDR
18416: GO 18816
18418: LD_INT 15
18420: DOUBLE
18421: EQUAL
18422: IFTRUE 18426
18424: GO 18437
18426: POP
// bc_type := b_factory ; 16 :
18427: LD_ADDR_OWVAR 42
18431: PUSH
18432: LD_INT 3
18434: ST_TO_ADDR
18435: GO 18816
18437: LD_INT 16
18439: DOUBLE
18440: EQUAL
18441: IFTRUE 18445
18443: GO 18456
18445: POP
// bc_type := b_ext_gun ; 17 :
18446: LD_ADDR_OWVAR 42
18450: PUSH
18451: LD_INT 17
18453: ST_TO_ADDR
18454: GO 18816
18456: LD_INT 17
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18492
18464: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18465: LD_ADDR_OWVAR 42
18469: PUSH
18470: LD_INT 19
18472: PUSH
18473: LD_INT 23
18475: PUSH
18476: LD_INT 19
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: PUSH
18484: LD_VAR 0 1
18488: ARRAY
18489: ST_TO_ADDR
18490: GO 18816
18492: LD_INT 18
18494: DOUBLE
18495: EQUAL
18496: IFTRUE 18500
18498: GO 18511
18500: POP
// bc_type := b_ext_radar ; 19 :
18501: LD_ADDR_OWVAR 42
18505: PUSH
18506: LD_INT 20
18508: ST_TO_ADDR
18509: GO 18816
18511: LD_INT 19
18513: DOUBLE
18514: EQUAL
18515: IFTRUE 18519
18517: GO 18530
18519: POP
// bc_type := b_ext_radio ; 20 :
18520: LD_ADDR_OWVAR 42
18524: PUSH
18525: LD_INT 22
18527: ST_TO_ADDR
18528: GO 18816
18530: LD_INT 20
18532: DOUBLE
18533: EQUAL
18534: IFTRUE 18538
18536: GO 18549
18538: POP
// bc_type := b_ext_siberium ; 21 :
18539: LD_ADDR_OWVAR 42
18543: PUSH
18544: LD_INT 21
18546: ST_TO_ADDR
18547: GO 18816
18549: LD_INT 21
18551: DOUBLE
18552: EQUAL
18553: IFTRUE 18557
18555: GO 18568
18557: POP
// bc_type := b_ext_computer ; 22 :
18558: LD_ADDR_OWVAR 42
18562: PUSH
18563: LD_INT 24
18565: ST_TO_ADDR
18566: GO 18816
18568: LD_INT 22
18570: DOUBLE
18571: EQUAL
18572: IFTRUE 18576
18574: GO 18587
18576: POP
// bc_type := b_ext_track ; 23 :
18577: LD_ADDR_OWVAR 42
18581: PUSH
18582: LD_INT 16
18584: ST_TO_ADDR
18585: GO 18816
18587: LD_INT 23
18589: DOUBLE
18590: EQUAL
18591: IFTRUE 18595
18593: GO 18606
18595: POP
// bc_type := b_ext_laser ; 24 :
18596: LD_ADDR_OWVAR 42
18600: PUSH
18601: LD_INT 25
18603: ST_TO_ADDR
18604: GO 18816
18606: LD_INT 24
18608: DOUBLE
18609: EQUAL
18610: IFTRUE 18614
18612: GO 18625
18614: POP
// bc_type := b_control_tower ; 25 :
18615: LD_ADDR_OWVAR 42
18619: PUSH
18620: LD_INT 36
18622: ST_TO_ADDR
18623: GO 18816
18625: LD_INT 25
18627: DOUBLE
18628: EQUAL
18629: IFTRUE 18633
18631: GO 18644
18633: POP
// bc_type := b_breastwork ; 26 :
18634: LD_ADDR_OWVAR 42
18638: PUSH
18639: LD_INT 31
18641: ST_TO_ADDR
18642: GO 18816
18644: LD_INT 26
18646: DOUBLE
18647: EQUAL
18648: IFTRUE 18652
18650: GO 18663
18652: POP
// bc_type := b_bunker ; 27 :
18653: LD_ADDR_OWVAR 42
18657: PUSH
18658: LD_INT 32
18660: ST_TO_ADDR
18661: GO 18816
18663: LD_INT 27
18665: DOUBLE
18666: EQUAL
18667: IFTRUE 18671
18669: GO 18682
18671: POP
// bc_type := b_turret ; 28 :
18672: LD_ADDR_OWVAR 42
18676: PUSH
18677: LD_INT 33
18679: ST_TO_ADDR
18680: GO 18816
18682: LD_INT 28
18684: DOUBLE
18685: EQUAL
18686: IFTRUE 18690
18688: GO 18701
18690: POP
// bc_type := b_armoury ; 29 :
18691: LD_ADDR_OWVAR 42
18695: PUSH
18696: LD_INT 4
18698: ST_TO_ADDR
18699: GO 18816
18701: LD_INT 29
18703: DOUBLE
18704: EQUAL
18705: IFTRUE 18709
18707: GO 18720
18709: POP
// bc_type := b_barracks ; 30 :
18710: LD_ADDR_OWVAR 42
18714: PUSH
18715: LD_INT 5
18717: ST_TO_ADDR
18718: GO 18816
18720: LD_INT 30
18722: DOUBLE
18723: EQUAL
18724: IFTRUE 18728
18726: GO 18739
18728: POP
// bc_type := b_solar_power ; 31 :
18729: LD_ADDR_OWVAR 42
18733: PUSH
18734: LD_INT 27
18736: ST_TO_ADDR
18737: GO 18816
18739: LD_INT 31
18741: DOUBLE
18742: EQUAL
18743: IFTRUE 18747
18745: GO 18758
18747: POP
// bc_type := b_oil_power ; 32 :
18748: LD_ADDR_OWVAR 42
18752: PUSH
18753: LD_INT 26
18755: ST_TO_ADDR
18756: GO 18816
18758: LD_INT 32
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18777
18766: POP
// bc_type := b_siberite_power ; 33 :
18767: LD_ADDR_OWVAR 42
18771: PUSH
18772: LD_INT 28
18774: ST_TO_ADDR
18775: GO 18816
18777: LD_INT 33
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 18796
18785: POP
// bc_type := b_oil_mine ; 34 :
18786: LD_ADDR_OWVAR 42
18790: PUSH
18791: LD_INT 29
18793: ST_TO_ADDR
18794: GO 18816
18796: LD_INT 34
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18815
18804: POP
// bc_type := b_siberite_mine ; end ;
18805: LD_ADDR_OWVAR 42
18809: PUSH
18810: LD_INT 30
18812: ST_TO_ADDR
18813: GO 18816
18815: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18816: LD_ADDR_VAR 0 8
18820: PUSH
18821: LD_VAR 0 5
18825: PPUSH
18826: LD_VAR 0 6
18830: PPUSH
18831: LD_VAR 0 3
18835: PPUSH
18836: CALL_OW 47
18840: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18841: LD_OWVAR 42
18845: PUSH
18846: LD_INT 32
18848: PUSH
18849: LD_INT 33
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: IN
18856: IFFALSE 18872
// PlaceWeaponTurret ( b , weapon ) ;
18858: LD_VAR 0 8
18862: PPUSH
18863: LD_VAR 0 4
18867: PPUSH
18868: CALL_OW 431
// end ;
18872: LD_VAR 0 7
18876: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18877: LD_INT 0
18879: PPUSH
18880: PPUSH
18881: PPUSH
18882: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18883: LD_ADDR_VAR 0 4
18887: PUSH
18888: LD_INT 22
18890: PUSH
18891: LD_OWVAR 2
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: LD_INT 30
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 30
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PPUSH
18932: CALL_OW 69
18936: ST_TO_ADDR
// if not tmp then
18937: LD_VAR 0 4
18941: NOT
18942: IFFALSE 18946
// exit ;
18944: GO 19005
// for i in tmp do
18946: LD_ADDR_VAR 0 2
18950: PUSH
18951: LD_VAR 0 4
18955: PUSH
18956: FOR_IN
18957: IFFALSE 19003
// for j = 1 to 3 do
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: DOUBLE
18965: LD_INT 1
18967: DEC
18968: ST_TO_ADDR
18969: LD_INT 3
18971: PUSH
18972: FOR_TO
18973: IFFALSE 18999
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18975: LD_VAR 0 2
18979: PPUSH
18980: CALL_OW 274
18984: PPUSH
18985: LD_VAR 0 3
18989: PPUSH
18990: LD_INT 99999
18992: PPUSH
18993: CALL_OW 277
18997: GO 18972
18999: POP
19000: POP
19001: GO 18956
19003: POP
19004: POP
// end ;
19005: LD_VAR 0 1
19009: RET
// export function hHackSetLevel10 ; var i , j ; begin
19010: LD_INT 0
19012: PPUSH
19013: PPUSH
19014: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19015: LD_ADDR_VAR 0 2
19019: PUSH
19020: LD_INT 21
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PPUSH
19030: CALL_OW 69
19034: PUSH
19035: FOR_IN
19036: IFFALSE 19088
// if IsSelected ( i ) then
19038: LD_VAR 0 2
19042: PPUSH
19043: CALL_OW 306
19047: IFFALSE 19086
// begin for j := 1 to 4 do
19049: LD_ADDR_VAR 0 3
19053: PUSH
19054: DOUBLE
19055: LD_INT 1
19057: DEC
19058: ST_TO_ADDR
19059: LD_INT 4
19061: PUSH
19062: FOR_TO
19063: IFFALSE 19084
// SetSkill ( i , j , 10 ) ;
19065: LD_VAR 0 2
19069: PPUSH
19070: LD_VAR 0 3
19074: PPUSH
19075: LD_INT 10
19077: PPUSH
19078: CALL_OW 237
19082: GO 19062
19084: POP
19085: POP
// end ;
19086: GO 19035
19088: POP
19089: POP
// end ;
19090: LD_VAR 0 1
19094: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19095: LD_INT 0
19097: PPUSH
19098: PPUSH
19099: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19100: LD_ADDR_VAR 0 2
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_OWVAR 2
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 21
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PPUSH
19131: CALL_OW 69
19135: PUSH
19136: FOR_IN
19137: IFFALSE 19178
// begin for j := 1 to 4 do
19139: LD_ADDR_VAR 0 3
19143: PUSH
19144: DOUBLE
19145: LD_INT 1
19147: DEC
19148: ST_TO_ADDR
19149: LD_INT 4
19151: PUSH
19152: FOR_TO
19153: IFFALSE 19174
// SetSkill ( i , j , 10 ) ;
19155: LD_VAR 0 2
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_INT 10
19167: PPUSH
19168: CALL_OW 237
19172: GO 19152
19174: POP
19175: POP
// end ;
19176: GO 19136
19178: POP
19179: POP
// end ;
19180: LD_VAR 0 1
19184: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19185: LD_INT 0
19187: PPUSH
// uc_side := your_side ;
19188: LD_ADDR_OWVAR 20
19192: PUSH
19193: LD_OWVAR 2
19197: ST_TO_ADDR
// uc_nation := nation ;
19198: LD_ADDR_OWVAR 21
19202: PUSH
19203: LD_VAR 0 1
19207: ST_TO_ADDR
// InitHc ;
19208: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19212: LD_INT 0
19214: PPUSH
19215: LD_VAR 0 2
19219: PPUSH
19220: LD_VAR 0 3
19224: PPUSH
19225: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19229: LD_VAR 0 4
19233: PPUSH
19234: LD_VAR 0 5
19238: PPUSH
19239: CALL_OW 428
19243: PUSH
19244: LD_INT 0
19246: EQUAL
19247: IFFALSE 19271
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19249: CALL_OW 44
19253: PPUSH
19254: LD_VAR 0 4
19258: PPUSH
19259: LD_VAR 0 5
19263: PPUSH
19264: LD_INT 1
19266: PPUSH
19267: CALL_OW 48
// end ;
19271: LD_VAR 0 6
19275: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19276: LD_INT 0
19278: PPUSH
19279: PPUSH
// uc_side := your_side ;
19280: LD_ADDR_OWVAR 20
19284: PUSH
19285: LD_OWVAR 2
19289: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19290: LD_VAR 0 1
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: LD_INT 3
19303: PUSH
19304: LD_INT 4
19306: PUSH
19307: LD_INT 5
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: IN
19317: IFFALSE 19329
// uc_nation := nation_american else
19319: LD_ADDR_OWVAR 21
19323: PUSH
19324: LD_INT 1
19326: ST_TO_ADDR
19327: GO 19372
// if chassis in [ 11 , 12 , 13 , 14 ] then
19329: LD_VAR 0 1
19333: PUSH
19334: LD_INT 11
19336: PUSH
19337: LD_INT 12
19339: PUSH
19340: LD_INT 13
19342: PUSH
19343: LD_INT 14
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: IN
19352: IFFALSE 19364
// uc_nation := nation_arabian else
19354: LD_ADDR_OWVAR 21
19358: PUSH
19359: LD_INT 2
19361: ST_TO_ADDR
19362: GO 19372
// uc_nation := nation_russian ;
19364: LD_ADDR_OWVAR 21
19368: PUSH
19369: LD_INT 3
19371: ST_TO_ADDR
// vc_chassis := chassis ;
19372: LD_ADDR_OWVAR 37
19376: PUSH
19377: LD_VAR 0 1
19381: ST_TO_ADDR
// vc_engine := engine ;
19382: LD_ADDR_OWVAR 39
19386: PUSH
19387: LD_VAR 0 2
19391: ST_TO_ADDR
// vc_control := control ;
19392: LD_ADDR_OWVAR 38
19396: PUSH
19397: LD_VAR 0 3
19401: ST_TO_ADDR
// vc_weapon := weapon ;
19402: LD_ADDR_OWVAR 40
19406: PUSH
19407: LD_VAR 0 4
19411: ST_TO_ADDR
// un := CreateVehicle ;
19412: LD_ADDR_VAR 0 8
19416: PUSH
19417: CALL_OW 45
19421: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19422: LD_VAR 0 8
19426: PPUSH
19427: LD_INT 0
19429: PPUSH
19430: LD_INT 5
19432: PPUSH
19433: CALL_OW 12
19437: PPUSH
19438: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19442: LD_VAR 0 8
19446: PPUSH
19447: LD_VAR 0 5
19451: PPUSH
19452: LD_VAR 0 6
19456: PPUSH
19457: LD_INT 1
19459: PPUSH
19460: CALL_OW 48
// end ;
19464: LD_VAR 0 7
19468: RET
// export hInvincible ; every 1 do
19469: GO 19471
19471: DISABLE
// hInvincible := [ ] ;
19472: LD_ADDR_EXP 82
19476: PUSH
19477: EMPTY
19478: ST_TO_ADDR
19479: END
// every 10 do var i ;
19480: GO 19482
19482: DISABLE
19483: LD_INT 0
19485: PPUSH
// begin enable ;
19486: ENABLE
// if not hInvincible then
19487: LD_EXP 82
19491: NOT
19492: IFFALSE 19496
// exit ;
19494: GO 19540
// for i in hInvincible do
19496: LD_ADDR_VAR 0 1
19500: PUSH
19501: LD_EXP 82
19505: PUSH
19506: FOR_IN
19507: IFFALSE 19538
// if GetLives ( i ) < 1000 then
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL_OW 256
19518: PUSH
19519: LD_INT 1000
19521: LESS
19522: IFFALSE 19536
// SetLives ( i , 1000 ) ;
19524: LD_VAR 0 1
19528: PPUSH
19529: LD_INT 1000
19531: PPUSH
19532: CALL_OW 234
19536: GO 19506
19538: POP
19539: POP
// end ;
19540: PPOPN 1
19542: END
// export function hHackInvincible ; var i ; begin
19543: LD_INT 0
19545: PPUSH
19546: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_INT 2
19554: PUSH
19555: LD_INT 21
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 21
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: PPUSH
19580: CALL_OW 69
19584: PUSH
19585: FOR_IN
19586: IFFALSE 19647
// if IsSelected ( i ) then
19588: LD_VAR 0 2
19592: PPUSH
19593: CALL_OW 306
19597: IFFALSE 19645
// begin if i in hInvincible then
19599: LD_VAR 0 2
19603: PUSH
19604: LD_EXP 82
19608: IN
19609: IFFALSE 19629
// hInvincible := hInvincible diff i else
19611: LD_ADDR_EXP 82
19615: PUSH
19616: LD_EXP 82
19620: PUSH
19621: LD_VAR 0 2
19625: DIFF
19626: ST_TO_ADDR
19627: GO 19645
// hInvincible := hInvincible union i ;
19629: LD_ADDR_EXP 82
19633: PUSH
19634: LD_EXP 82
19638: PUSH
19639: LD_VAR 0 2
19643: UNION
19644: ST_TO_ADDR
// end ;
19645: GO 19585
19647: POP
19648: POP
// end ;
19649: LD_VAR 0 1
19653: RET
// export function hHackInvisible ; var i , j ; begin
19654: LD_INT 0
19656: PPUSH
19657: PPUSH
19658: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19659: LD_ADDR_VAR 0 2
19663: PUSH
19664: LD_INT 21
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 69
19678: PUSH
19679: FOR_IN
19680: IFFALSE 19704
// if IsSelected ( i ) then
19682: LD_VAR 0 2
19686: PPUSH
19687: CALL_OW 306
19691: IFFALSE 19702
// ComForceInvisible ( i ) ;
19693: LD_VAR 0 2
19697: PPUSH
19698: CALL_OW 496
19702: GO 19679
19704: POP
19705: POP
// end ;
19706: LD_VAR 0 1
19710: RET
// export function hHackChangeYourSide ; begin
19711: LD_INT 0
19713: PPUSH
// if your_side = 8 then
19714: LD_OWVAR 2
19718: PUSH
19719: LD_INT 8
19721: EQUAL
19722: IFFALSE 19734
// your_side := 0 else
19724: LD_ADDR_OWVAR 2
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
19732: GO 19748
// your_side := your_side + 1 ;
19734: LD_ADDR_OWVAR 2
19738: PUSH
19739: LD_OWVAR 2
19743: PUSH
19744: LD_INT 1
19746: PLUS
19747: ST_TO_ADDR
// end ;
19748: LD_VAR 0 1
19752: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19753: LD_INT 0
19755: PPUSH
19756: PPUSH
19757: PPUSH
// for i in all_units do
19758: LD_ADDR_VAR 0 2
19762: PUSH
19763: LD_OWVAR 3
19767: PUSH
19768: FOR_IN
19769: IFFALSE 19847
// if IsSelected ( i ) then
19771: LD_VAR 0 2
19775: PPUSH
19776: CALL_OW 306
19780: IFFALSE 19845
// begin j := GetSide ( i ) ;
19782: LD_ADDR_VAR 0 3
19786: PUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: CALL_OW 255
19796: ST_TO_ADDR
// if j = 8 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 8
19804: EQUAL
19805: IFFALSE 19817
// j := 0 else
19807: LD_ADDR_VAR 0 3
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
19815: GO 19831
// j := j + 1 ;
19817: LD_ADDR_VAR 0 3
19821: PUSH
19822: LD_VAR 0 3
19826: PUSH
19827: LD_INT 1
19829: PLUS
19830: ST_TO_ADDR
// SetSide ( i , j ) ;
19831: LD_VAR 0 2
19835: PPUSH
19836: LD_VAR 0 3
19840: PPUSH
19841: CALL_OW 235
// end ;
19845: GO 19768
19847: POP
19848: POP
// end ;
19849: LD_VAR 0 1
19853: RET
// export function hHackFog ; begin
19854: LD_INT 0
19856: PPUSH
// FogOff ( true ) ;
19857: LD_INT 1
19859: PPUSH
19860: CALL_OW 344
// end ;
19864: LD_VAR 0 1
19868: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19869: LD_INT 0
19871: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_VAR 0 3
19886: PPUSH
19887: LD_INT 1
19889: PPUSH
19890: LD_INT 1
19892: PPUSH
19893: CALL_OW 483
// CenterOnXY ( x , y ) ;
19897: LD_VAR 0 2
19901: PPUSH
19902: LD_VAR 0 3
19906: PPUSH
19907: CALL_OW 84
// end ;
19911: LD_VAR 0 4
19915: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19916: LD_INT 0
19918: PPUSH
19919: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19920: LD_VAR 0 1
19924: NOT
19925: PUSH
19926: LD_VAR 0 2
19930: PPUSH
19931: LD_VAR 0 3
19935: PPUSH
19936: CALL_OW 488
19940: NOT
19941: OR
19942: PUSH
19943: LD_VAR 0 1
19947: PPUSH
19948: CALL_OW 266
19952: PUSH
19953: LD_INT 3
19955: NONEQUAL
19956: PUSH
19957: LD_VAR 0 1
19961: PPUSH
19962: CALL_OW 247
19966: PUSH
19967: LD_INT 1
19969: EQUAL
19970: NOT
19971: AND
19972: OR
19973: IFFALSE 19977
// exit ;
19975: GO 20126
// if GetType ( factory ) = unit_human then
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 247
19986: PUSH
19987: LD_INT 1
19989: EQUAL
19990: IFFALSE 20007
// factory := IsInUnit ( factory ) ;
19992: LD_ADDR_VAR 0 1
19996: PUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 310
20006: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20007: LD_VAR 0 1
20011: PPUSH
20012: CALL_OW 266
20016: PUSH
20017: LD_INT 3
20019: NONEQUAL
20020: IFFALSE 20024
// exit ;
20022: GO 20126
// if HexInfo ( x , y ) = factory then
20024: LD_VAR 0 2
20028: PPUSH
20029: LD_VAR 0 3
20033: PPUSH
20034: CALL_OW 428
20038: PUSH
20039: LD_VAR 0 1
20043: EQUAL
20044: IFFALSE 20071
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20046: LD_ADDR_EXP 83
20050: PUSH
20051: LD_EXP 83
20055: PPUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: LD_INT 0
20063: PPUSH
20064: CALL_OW 1
20068: ST_TO_ADDR
20069: GO 20122
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20071: LD_ADDR_EXP 83
20075: PUSH
20076: LD_EXP 83
20080: PPUSH
20081: LD_VAR 0 1
20085: PPUSH
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 255
20095: PUSH
20096: LD_VAR 0 1
20100: PUSH
20101: LD_VAR 0 2
20105: PUSH
20106: LD_VAR 0 3
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: PPUSH
20117: CALL_OW 1
20121: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20122: CALL 20131 0 0
// end ;
20126: LD_VAR 0 4
20130: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20131: LD_INT 0
20133: PPUSH
20134: PPUSH
20135: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20136: LD_STRING resetFactoryWaypoint();
20138: PPUSH
20139: CALL_OW 559
// if factoryWaypoints then
20143: LD_EXP 83
20147: IFFALSE 20273
// begin list := PrepareArray ( factoryWaypoints ) ;
20149: LD_ADDR_VAR 0 3
20153: PUSH
20154: LD_EXP 83
20158: PPUSH
20159: CALL 66964 0 1
20163: ST_TO_ADDR
// for i := 1 to list do
20164: LD_ADDR_VAR 0 2
20168: PUSH
20169: DOUBLE
20170: LD_INT 1
20172: DEC
20173: ST_TO_ADDR
20174: LD_VAR 0 3
20178: PUSH
20179: FOR_TO
20180: IFFALSE 20271
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20182: LD_STRING setFactoryWaypointXY(
20184: PUSH
20185: LD_VAR 0 3
20189: PUSH
20190: LD_VAR 0 2
20194: ARRAY
20195: PUSH
20196: LD_INT 1
20198: ARRAY
20199: STR
20200: PUSH
20201: LD_STRING ,
20203: STR
20204: PUSH
20205: LD_VAR 0 3
20209: PUSH
20210: LD_VAR 0 2
20214: ARRAY
20215: PUSH
20216: LD_INT 2
20218: ARRAY
20219: STR
20220: PUSH
20221: LD_STRING ,
20223: STR
20224: PUSH
20225: LD_VAR 0 3
20229: PUSH
20230: LD_VAR 0 2
20234: ARRAY
20235: PUSH
20236: LD_INT 3
20238: ARRAY
20239: STR
20240: PUSH
20241: LD_STRING ,
20243: STR
20244: PUSH
20245: LD_VAR 0 3
20249: PUSH
20250: LD_VAR 0 2
20254: ARRAY
20255: PUSH
20256: LD_INT 4
20258: ARRAY
20259: STR
20260: PUSH
20261: LD_STRING )
20263: STR
20264: PPUSH
20265: CALL_OW 559
20269: GO 20179
20271: POP
20272: POP
// end ; end ;
20273: LD_VAR 0 1
20277: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20278: LD_INT 0
20280: PPUSH
// if HexInfo ( x , y ) = warehouse then
20281: LD_VAR 0 2
20285: PPUSH
20286: LD_VAR 0 3
20290: PPUSH
20291: CALL_OW 428
20295: PUSH
20296: LD_VAR 0 1
20300: EQUAL
20301: IFFALSE 20328
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20303: LD_ADDR_EXP 84
20307: PUSH
20308: LD_EXP 84
20312: PPUSH
20313: LD_VAR 0 1
20317: PPUSH
20318: LD_INT 0
20320: PPUSH
20321: CALL_OW 1
20325: ST_TO_ADDR
20326: GO 20379
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20328: LD_ADDR_EXP 84
20332: PUSH
20333: LD_EXP 84
20337: PPUSH
20338: LD_VAR 0 1
20342: PPUSH
20343: LD_VAR 0 1
20347: PPUSH
20348: CALL_OW 255
20352: PUSH
20353: LD_VAR 0 1
20357: PUSH
20358: LD_VAR 0 2
20362: PUSH
20363: LD_VAR 0 3
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PPUSH
20374: CALL_OW 1
20378: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20379: CALL 20388 0 0
// end ;
20383: LD_VAR 0 4
20387: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20388: LD_INT 0
20390: PPUSH
20391: PPUSH
20392: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20393: LD_STRING resetWarehouseGatheringPoints();
20395: PPUSH
20396: CALL_OW 559
// if warehouseGatheringPoints then
20400: LD_EXP 84
20404: IFFALSE 20530
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20406: LD_ADDR_VAR 0 3
20410: PUSH
20411: LD_EXP 84
20415: PPUSH
20416: CALL 66964 0 1
20420: ST_TO_ADDR
// for i := 1 to list do
20421: LD_ADDR_VAR 0 2
20425: PUSH
20426: DOUBLE
20427: LD_INT 1
20429: DEC
20430: ST_TO_ADDR
20431: LD_VAR 0 3
20435: PUSH
20436: FOR_TO
20437: IFFALSE 20528
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20439: LD_STRING setWarehouseGatheringPointXY(
20441: PUSH
20442: LD_VAR 0 3
20446: PUSH
20447: LD_VAR 0 2
20451: ARRAY
20452: PUSH
20453: LD_INT 1
20455: ARRAY
20456: STR
20457: PUSH
20458: LD_STRING ,
20460: STR
20461: PUSH
20462: LD_VAR 0 3
20466: PUSH
20467: LD_VAR 0 2
20471: ARRAY
20472: PUSH
20473: LD_INT 2
20475: ARRAY
20476: STR
20477: PUSH
20478: LD_STRING ,
20480: STR
20481: PUSH
20482: LD_VAR 0 3
20486: PUSH
20487: LD_VAR 0 2
20491: ARRAY
20492: PUSH
20493: LD_INT 3
20495: ARRAY
20496: STR
20497: PUSH
20498: LD_STRING ,
20500: STR
20501: PUSH
20502: LD_VAR 0 3
20506: PUSH
20507: LD_VAR 0 2
20511: ARRAY
20512: PUSH
20513: LD_INT 4
20515: ARRAY
20516: STR
20517: PUSH
20518: LD_STRING )
20520: STR
20521: PPUSH
20522: CALL_OW 559
20526: GO 20436
20528: POP
20529: POP
// end ; end ;
20530: LD_VAR 0 1
20534: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20535: LD_EXP 84
20539: IFFALSE 21224
20541: GO 20543
20543: DISABLE
20544: LD_INT 0
20546: PPUSH
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
20553: PPUSH
20554: PPUSH
// begin enable ;
20555: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20556: LD_ADDR_VAR 0 3
20560: PUSH
20561: LD_EXP 84
20565: PPUSH
20566: CALL 66964 0 1
20570: ST_TO_ADDR
// if not list then
20571: LD_VAR 0 3
20575: NOT
20576: IFFALSE 20580
// exit ;
20578: GO 21224
// for i := 1 to list do
20580: LD_ADDR_VAR 0 1
20584: PUSH
20585: DOUBLE
20586: LD_INT 1
20588: DEC
20589: ST_TO_ADDR
20590: LD_VAR 0 3
20594: PUSH
20595: FOR_TO
20596: IFFALSE 21222
// begin depot := list [ i ] [ 2 ] ;
20598: LD_ADDR_VAR 0 8
20602: PUSH
20603: LD_VAR 0 3
20607: PUSH
20608: LD_VAR 0 1
20612: ARRAY
20613: PUSH
20614: LD_INT 2
20616: ARRAY
20617: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20618: LD_ADDR_VAR 0 5
20622: PUSH
20623: LD_VAR 0 3
20627: PUSH
20628: LD_VAR 0 1
20632: ARRAY
20633: PUSH
20634: LD_INT 1
20636: ARRAY
20637: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20638: LD_VAR 0 8
20642: PPUSH
20643: CALL_OW 301
20647: PUSH
20648: LD_VAR 0 5
20652: PUSH
20653: LD_VAR 0 8
20657: PPUSH
20658: CALL_OW 255
20662: NONEQUAL
20663: OR
20664: IFFALSE 20693
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20666: LD_ADDR_EXP 84
20670: PUSH
20671: LD_EXP 84
20675: PPUSH
20676: LD_VAR 0 8
20680: PPUSH
20681: LD_INT 0
20683: PPUSH
20684: CALL_OW 1
20688: ST_TO_ADDR
// exit ;
20689: POP
20690: POP
20691: GO 21224
// end ; x := list [ i ] [ 3 ] ;
20693: LD_ADDR_VAR 0 6
20697: PUSH
20698: LD_VAR 0 3
20702: PUSH
20703: LD_VAR 0 1
20707: ARRAY
20708: PUSH
20709: LD_INT 3
20711: ARRAY
20712: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20713: LD_ADDR_VAR 0 7
20717: PUSH
20718: LD_VAR 0 3
20722: PUSH
20723: LD_VAR 0 1
20727: ARRAY
20728: PUSH
20729: LD_INT 4
20731: ARRAY
20732: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20733: LD_ADDR_VAR 0 9
20737: PUSH
20738: LD_VAR 0 6
20742: PPUSH
20743: LD_VAR 0 7
20747: PPUSH
20748: LD_INT 16
20750: PPUSH
20751: CALL 65552 0 3
20755: ST_TO_ADDR
// if not cratesNearbyPoint then
20756: LD_VAR 0 9
20760: NOT
20761: IFFALSE 20767
// exit ;
20763: POP
20764: POP
20765: GO 21224
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20767: LD_ADDR_VAR 0 4
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_VAR 0 5
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 3
20786: PUSH
20787: LD_INT 60
20789: PUSH
20790: EMPTY
20791: LIST
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 91
20799: PUSH
20800: LD_VAR 0 8
20804: PUSH
20805: LD_INT 6
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: LD_INT 25
20818: PUSH
20819: LD_INT 2
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 25
20828: PUSH
20829: LD_INT 16
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: PPUSH
20847: CALL_OW 69
20851: PUSH
20852: LD_VAR 0 8
20856: PPUSH
20857: CALL_OW 313
20861: PPUSH
20862: LD_INT 3
20864: PUSH
20865: LD_INT 60
20867: PUSH
20868: EMPTY
20869: LIST
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: LD_INT 25
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 25
20890: PUSH
20891: LD_INT 16
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PPUSH
20907: CALL_OW 72
20911: UNION
20912: ST_TO_ADDR
// if tmp then
20913: LD_VAR 0 4
20917: IFFALSE 20997
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20919: LD_ADDR_VAR 0 4
20923: PUSH
20924: LD_VAR 0 4
20928: PPUSH
20929: LD_INT 3
20931: PPUSH
20932: CALL 63521 0 2
20936: ST_TO_ADDR
// for j in tmp do
20937: LD_ADDR_VAR 0 2
20941: PUSH
20942: LD_VAR 0 4
20946: PUSH
20947: FOR_IN
20948: IFFALSE 20991
// begin if IsInUnit ( j ) then
20950: LD_VAR 0 2
20954: PPUSH
20955: CALL_OW 310
20959: IFFALSE 20970
// ComExit ( j ) ;
20961: LD_VAR 0 2
20965: PPUSH
20966: CALL 63604 0 1
// AddComCollect ( j , x , y ) ;
20970: LD_VAR 0 2
20974: PPUSH
20975: LD_VAR 0 6
20979: PPUSH
20980: LD_VAR 0 7
20984: PPUSH
20985: CALL_OW 177
// end ;
20989: GO 20947
20991: POP
20992: POP
// exit ;
20993: POP
20994: POP
20995: GO 21224
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20997: LD_ADDR_VAR 0 4
21001: PUSH
21002: LD_INT 22
21004: PUSH
21005: LD_VAR 0 5
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 91
21016: PUSH
21017: LD_VAR 0 8
21021: PUSH
21022: LD_INT 8
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: LD_INT 34
21035: PUSH
21036: LD_INT 12
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 34
21045: PUSH
21046: LD_INT 51
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 34
21055: PUSH
21056: LD_INT 32
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 34
21065: PUSH
21066: LD_INT 89
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: PPUSH
21085: CALL_OW 69
21089: ST_TO_ADDR
// if tmp then
21090: LD_VAR 0 4
21094: IFFALSE 21220
// begin for j in tmp do
21096: LD_ADDR_VAR 0 2
21100: PUSH
21101: LD_VAR 0 4
21105: PUSH
21106: FOR_IN
21107: IFFALSE 21218
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21109: LD_VAR 0 2
21113: PPUSH
21114: CALL_OW 262
21118: PUSH
21119: LD_INT 3
21121: EQUAL
21122: PUSH
21123: LD_VAR 0 2
21127: PPUSH
21128: CALL_OW 261
21132: PUSH
21133: LD_INT 20
21135: GREATER
21136: OR
21137: PUSH
21138: LD_VAR 0 2
21142: PPUSH
21143: CALL_OW 314
21147: NOT
21148: AND
21149: PUSH
21150: LD_VAR 0 2
21154: PPUSH
21155: CALL_OW 263
21159: PUSH
21160: LD_INT 1
21162: NONEQUAL
21163: PUSH
21164: LD_VAR 0 2
21168: PPUSH
21169: CALL_OW 311
21173: OR
21174: AND
21175: IFFALSE 21216
// begin ComCollect ( j , x , y ) ;
21177: LD_VAR 0 2
21181: PPUSH
21182: LD_VAR 0 6
21186: PPUSH
21187: LD_VAR 0 7
21191: PPUSH
21192: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21196: LD_VAR 0 2
21200: PPUSH
21201: LD_VAR 0 8
21205: PPUSH
21206: CALL_OW 172
// exit ;
21210: POP
21211: POP
21212: POP
21213: POP
21214: GO 21224
// end ;
21216: GO 21106
21218: POP
21219: POP
// end ; end ;
21220: GO 20595
21222: POP
21223: POP
// end ; end_of_file
21224: PPOPN 9
21226: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21227: LD_INT 0
21229: PPUSH
21230: PPUSH
21231: PPUSH
21232: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21233: LD_VAR 0 1
21237: PPUSH
21238: CALL_OW 264
21242: PUSH
21243: LD_INT 91
21245: EQUAL
21246: IFFALSE 21318
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21248: LD_INT 68
21250: PPUSH
21251: LD_VAR 0 1
21255: PPUSH
21256: CALL_OW 255
21260: PPUSH
21261: CALL_OW 321
21265: PUSH
21266: LD_INT 2
21268: EQUAL
21269: IFFALSE 21281
// eff := 70 else
21271: LD_ADDR_VAR 0 4
21275: PUSH
21276: LD_INT 70
21278: ST_TO_ADDR
21279: GO 21289
// eff := 30 ;
21281: LD_ADDR_VAR 0 4
21285: PUSH
21286: LD_INT 30
21288: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21289: LD_VAR 0 1
21293: PPUSH
21294: CALL_OW 250
21298: PPUSH
21299: LD_VAR 0 1
21303: PPUSH
21304: CALL_OW 251
21308: PPUSH
21309: LD_VAR 0 4
21313: PPUSH
21314: CALL_OW 495
// end ; end ;
21318: LD_VAR 0 2
21322: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21323: LD_INT 0
21325: PPUSH
// end ;
21326: LD_VAR 0 4
21330: RET
// export function SOS_Command ( cmd ) ; begin
21331: LD_INT 0
21333: PPUSH
// end ;
21334: LD_VAR 0 2
21338: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21339: LD_INT 0
21341: PPUSH
// end ;
21342: LD_VAR 0 6
21346: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21347: LD_INT 0
21349: PPUSH
21350: PPUSH
// if not vehicle or not factory then
21351: LD_VAR 0 1
21355: NOT
21356: PUSH
21357: LD_VAR 0 2
21361: NOT
21362: OR
21363: IFFALSE 21367
// exit ;
21365: GO 21598
// if factoryWaypoints >= factory then
21367: LD_EXP 83
21371: PUSH
21372: LD_VAR 0 2
21376: GREATEREQUAL
21377: IFFALSE 21598
// if factoryWaypoints [ factory ] then
21379: LD_EXP 83
21383: PUSH
21384: LD_VAR 0 2
21388: ARRAY
21389: IFFALSE 21598
// begin if GetControl ( vehicle ) = control_manual then
21391: LD_VAR 0 1
21395: PPUSH
21396: CALL_OW 263
21400: PUSH
21401: LD_INT 1
21403: EQUAL
21404: IFFALSE 21485
// begin driver := IsDrivenBy ( vehicle ) ;
21406: LD_ADDR_VAR 0 4
21410: PUSH
21411: LD_VAR 0 1
21415: PPUSH
21416: CALL_OW 311
21420: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21421: LD_VAR 0 4
21425: PPUSH
21426: LD_EXP 83
21430: PUSH
21431: LD_VAR 0 2
21435: ARRAY
21436: PUSH
21437: LD_INT 3
21439: ARRAY
21440: PPUSH
21441: LD_EXP 83
21445: PUSH
21446: LD_VAR 0 2
21450: ARRAY
21451: PUSH
21452: LD_INT 4
21454: ARRAY
21455: PPUSH
21456: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21460: LD_VAR 0 4
21464: PPUSH
21465: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21469: LD_VAR 0 4
21473: PPUSH
21474: LD_VAR 0 2
21478: PPUSH
21479: CALL_OW 180
// end else
21483: GO 21598
// if GetControl ( vehicle ) = control_remote then
21485: LD_VAR 0 1
21489: PPUSH
21490: CALL_OW 263
21494: PUSH
21495: LD_INT 2
21497: EQUAL
21498: IFFALSE 21559
// begin wait ( 0 0$2 ) ;
21500: LD_INT 70
21502: PPUSH
21503: CALL_OW 67
// if Connect ( vehicle ) then
21507: LD_VAR 0 1
21511: PPUSH
21512: CALL 33844 0 1
21516: IFFALSE 21557
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21518: LD_VAR 0 1
21522: PPUSH
21523: LD_EXP 83
21527: PUSH
21528: LD_VAR 0 2
21532: ARRAY
21533: PUSH
21534: LD_INT 3
21536: ARRAY
21537: PPUSH
21538: LD_EXP 83
21542: PUSH
21543: LD_VAR 0 2
21547: ARRAY
21548: PUSH
21549: LD_INT 4
21551: ARRAY
21552: PPUSH
21553: CALL_OW 171
// end else
21557: GO 21598
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21559: LD_VAR 0 1
21563: PPUSH
21564: LD_EXP 83
21568: PUSH
21569: LD_VAR 0 2
21573: ARRAY
21574: PUSH
21575: LD_INT 3
21577: ARRAY
21578: PPUSH
21579: LD_EXP 83
21583: PUSH
21584: LD_VAR 0 2
21588: ARRAY
21589: PUSH
21590: LD_INT 4
21592: ARRAY
21593: PPUSH
21594: CALL_OW 171
// end ; end ;
21598: LD_VAR 0 3
21602: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21603: LD_INT 0
21605: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21606: LD_VAR 0 1
21610: PUSH
21611: LD_INT 250
21613: EQUAL
21614: PUSH
21615: LD_VAR 0 2
21619: PPUSH
21620: CALL_OW 264
21624: PUSH
21625: LD_INT 81
21627: EQUAL
21628: AND
21629: IFFALSE 21650
// MinerPlaceMine ( unit , x , y ) ;
21631: LD_VAR 0 2
21635: PPUSH
21636: LD_VAR 0 4
21640: PPUSH
21641: LD_VAR 0 5
21645: PPUSH
21646: CALL 24035 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21650: LD_VAR 0 1
21654: PUSH
21655: LD_INT 251
21657: EQUAL
21658: PUSH
21659: LD_VAR 0 2
21663: PPUSH
21664: CALL_OW 264
21668: PUSH
21669: LD_INT 81
21671: EQUAL
21672: AND
21673: IFFALSE 21694
// MinerDetonateMine ( unit , x , y ) ;
21675: LD_VAR 0 2
21679: PPUSH
21680: LD_VAR 0 4
21684: PPUSH
21685: LD_VAR 0 5
21689: PPUSH
21690: CALL 24310 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21694: LD_VAR 0 1
21698: PUSH
21699: LD_INT 252
21701: EQUAL
21702: PUSH
21703: LD_VAR 0 2
21707: PPUSH
21708: CALL_OW 264
21712: PUSH
21713: LD_INT 81
21715: EQUAL
21716: AND
21717: IFFALSE 21738
// MinerCreateMinefield ( unit , x , y ) ;
21719: LD_VAR 0 2
21723: PPUSH
21724: LD_VAR 0 4
21728: PPUSH
21729: LD_VAR 0 5
21733: PPUSH
21734: CALL 24727 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21738: LD_VAR 0 1
21742: PUSH
21743: LD_INT 253
21745: EQUAL
21746: PUSH
21747: LD_VAR 0 2
21751: PPUSH
21752: CALL_OW 257
21756: PUSH
21757: LD_INT 5
21759: EQUAL
21760: AND
21761: IFFALSE 21782
// ComBinocular ( unit , x , y ) ;
21763: LD_VAR 0 2
21767: PPUSH
21768: LD_VAR 0 4
21772: PPUSH
21773: LD_VAR 0 5
21777: PPUSH
21778: CALL 25096 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21782: LD_VAR 0 1
21786: PUSH
21787: LD_INT 254
21789: EQUAL
21790: PUSH
21791: LD_VAR 0 2
21795: PPUSH
21796: CALL_OW 264
21800: PUSH
21801: LD_INT 99
21803: EQUAL
21804: AND
21805: PUSH
21806: LD_VAR 0 3
21810: PPUSH
21811: CALL_OW 263
21815: PUSH
21816: LD_INT 3
21818: EQUAL
21819: AND
21820: IFFALSE 21836
// HackDestroyVehicle ( unit , selectedUnit ) ;
21822: LD_VAR 0 2
21826: PPUSH
21827: LD_VAR 0 3
21831: PPUSH
21832: CALL 23399 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21836: LD_VAR 0 1
21840: PUSH
21841: LD_INT 255
21843: EQUAL
21844: PUSH
21845: LD_VAR 0 2
21849: PPUSH
21850: CALL_OW 264
21854: PUSH
21855: LD_INT 14
21857: PUSH
21858: LD_INT 53
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: IN
21865: AND
21866: PUSH
21867: LD_VAR 0 4
21871: PPUSH
21872: LD_VAR 0 5
21876: PPUSH
21877: CALL_OW 488
21881: AND
21882: IFFALSE 21906
// CutTreeXYR ( unit , x , y , 12 ) ;
21884: LD_VAR 0 2
21888: PPUSH
21889: LD_VAR 0 4
21893: PPUSH
21894: LD_VAR 0 5
21898: PPUSH
21899: LD_INT 12
21901: PPUSH
21902: CALL 21969 0 4
// if cmd = 256 then
21906: LD_VAR 0 1
21910: PUSH
21911: LD_INT 256
21913: EQUAL
21914: IFFALSE 21935
// SetFactoryWaypoint ( unit , x , y ) ;
21916: LD_VAR 0 2
21920: PPUSH
21921: LD_VAR 0 4
21925: PPUSH
21926: LD_VAR 0 5
21930: PPUSH
21931: CALL 19916 0 3
// if cmd = 257 then
21935: LD_VAR 0 1
21939: PUSH
21940: LD_INT 257
21942: EQUAL
21943: IFFALSE 21964
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21945: LD_VAR 0 2
21949: PPUSH
21950: LD_VAR 0 4
21954: PPUSH
21955: LD_VAR 0 5
21959: PPUSH
21960: CALL 20278 0 3
// end ;
21964: LD_VAR 0 6
21968: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21969: LD_INT 0
21971: PPUSH
21972: PPUSH
21973: PPUSH
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21980: LD_VAR 0 1
21984: NOT
21985: PUSH
21986: LD_VAR 0 2
21990: PPUSH
21991: LD_VAR 0 3
21995: PPUSH
21996: CALL_OW 488
22000: NOT
22001: OR
22002: PUSH
22003: LD_VAR 0 4
22007: NOT
22008: OR
22009: IFFALSE 22013
// exit ;
22011: GO 22353
// list := [ ] ;
22013: LD_ADDR_VAR 0 13
22017: PUSH
22018: EMPTY
22019: ST_TO_ADDR
// if x - r < 0 then
22020: LD_VAR 0 2
22024: PUSH
22025: LD_VAR 0 4
22029: MINUS
22030: PUSH
22031: LD_INT 0
22033: LESS
22034: IFFALSE 22046
// min_x := 0 else
22036: LD_ADDR_VAR 0 7
22040: PUSH
22041: LD_INT 0
22043: ST_TO_ADDR
22044: GO 22062
// min_x := x - r ;
22046: LD_ADDR_VAR 0 7
22050: PUSH
22051: LD_VAR 0 2
22055: PUSH
22056: LD_VAR 0 4
22060: MINUS
22061: ST_TO_ADDR
// if y - r < 0 then
22062: LD_VAR 0 3
22066: PUSH
22067: LD_VAR 0 4
22071: MINUS
22072: PUSH
22073: LD_INT 0
22075: LESS
22076: IFFALSE 22088
// min_y := 0 else
22078: LD_ADDR_VAR 0 8
22082: PUSH
22083: LD_INT 0
22085: ST_TO_ADDR
22086: GO 22104
// min_y := y - r ;
22088: LD_ADDR_VAR 0 8
22092: PUSH
22093: LD_VAR 0 3
22097: PUSH
22098: LD_VAR 0 4
22102: MINUS
22103: ST_TO_ADDR
// max_x := x + r ;
22104: LD_ADDR_VAR 0 9
22108: PUSH
22109: LD_VAR 0 2
22113: PUSH
22114: LD_VAR 0 4
22118: PLUS
22119: ST_TO_ADDR
// max_y := y + r ;
22120: LD_ADDR_VAR 0 10
22124: PUSH
22125: LD_VAR 0 3
22129: PUSH
22130: LD_VAR 0 4
22134: PLUS
22135: ST_TO_ADDR
// for _x = min_x to max_x do
22136: LD_ADDR_VAR 0 11
22140: PUSH
22141: DOUBLE
22142: LD_VAR 0 7
22146: DEC
22147: ST_TO_ADDR
22148: LD_VAR 0 9
22152: PUSH
22153: FOR_TO
22154: IFFALSE 22271
// for _y = min_y to max_y do
22156: LD_ADDR_VAR 0 12
22160: PUSH
22161: DOUBLE
22162: LD_VAR 0 8
22166: DEC
22167: ST_TO_ADDR
22168: LD_VAR 0 10
22172: PUSH
22173: FOR_TO
22174: IFFALSE 22267
// begin if not ValidHex ( _x , _y ) then
22176: LD_VAR 0 11
22180: PPUSH
22181: LD_VAR 0 12
22185: PPUSH
22186: CALL_OW 488
22190: NOT
22191: IFFALSE 22195
// continue ;
22193: GO 22173
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22195: LD_VAR 0 11
22199: PPUSH
22200: LD_VAR 0 12
22204: PPUSH
22205: CALL_OW 351
22209: PUSH
22210: LD_VAR 0 11
22214: PPUSH
22215: LD_VAR 0 12
22219: PPUSH
22220: CALL_OW 554
22224: AND
22225: IFFALSE 22265
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22227: LD_ADDR_VAR 0 13
22231: PUSH
22232: LD_VAR 0 13
22236: PPUSH
22237: LD_VAR 0 13
22241: PUSH
22242: LD_INT 1
22244: PLUS
22245: PPUSH
22246: LD_VAR 0 11
22250: PUSH
22251: LD_VAR 0 12
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PPUSH
22260: CALL_OW 2
22264: ST_TO_ADDR
// end ;
22265: GO 22173
22267: POP
22268: POP
22269: GO 22153
22271: POP
22272: POP
// if not list then
22273: LD_VAR 0 13
22277: NOT
22278: IFFALSE 22282
// exit ;
22280: GO 22353
// for i in list do
22282: LD_ADDR_VAR 0 6
22286: PUSH
22287: LD_VAR 0 13
22291: PUSH
22292: FOR_IN
22293: IFFALSE 22351
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22295: LD_VAR 0 1
22299: PPUSH
22300: LD_STRING M
22302: PUSH
22303: LD_VAR 0 6
22307: PUSH
22308: LD_INT 1
22310: ARRAY
22311: PUSH
22312: LD_VAR 0 6
22316: PUSH
22317: LD_INT 2
22319: ARRAY
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: LD_INT 0
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: PPUSH
22345: CALL_OW 447
22349: GO 22292
22351: POP
22352: POP
// end ;
22353: LD_VAR 0 5
22357: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22358: LD_EXP 86
22362: NOT
22363: IFFALSE 22413
22365: GO 22367
22367: DISABLE
// begin initHack := true ;
22368: LD_ADDR_EXP 86
22372: PUSH
22373: LD_INT 1
22375: ST_TO_ADDR
// hackTanks := [ ] ;
22376: LD_ADDR_EXP 87
22380: PUSH
22381: EMPTY
22382: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22383: LD_ADDR_EXP 88
22387: PUSH
22388: EMPTY
22389: ST_TO_ADDR
// hackLimit := 3 ;
22390: LD_ADDR_EXP 89
22394: PUSH
22395: LD_INT 3
22397: ST_TO_ADDR
// hackDist := 12 ;
22398: LD_ADDR_EXP 90
22402: PUSH
22403: LD_INT 12
22405: ST_TO_ADDR
// hackCounter := [ ] ;
22406: LD_ADDR_EXP 91
22410: PUSH
22411: EMPTY
22412: ST_TO_ADDR
// end ;
22413: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22414: LD_EXP 86
22418: PUSH
22419: LD_INT 34
22421: PUSH
22422: LD_INT 99
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PPUSH
22429: CALL_OW 69
22433: AND
22434: IFFALSE 22687
22436: GO 22438
22438: DISABLE
22439: LD_INT 0
22441: PPUSH
22442: PPUSH
// begin enable ;
22443: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22444: LD_ADDR_VAR 0 1
22448: PUSH
22449: LD_INT 34
22451: PUSH
22452: LD_INT 99
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PPUSH
22459: CALL_OW 69
22463: PUSH
22464: FOR_IN
22465: IFFALSE 22685
// begin if not i in hackTanks then
22467: LD_VAR 0 1
22471: PUSH
22472: LD_EXP 87
22476: IN
22477: NOT
22478: IFFALSE 22561
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22480: LD_ADDR_EXP 87
22484: PUSH
22485: LD_EXP 87
22489: PPUSH
22490: LD_EXP 87
22494: PUSH
22495: LD_INT 1
22497: PLUS
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 1
22508: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22509: LD_ADDR_EXP 88
22513: PUSH
22514: LD_EXP 88
22518: PPUSH
22519: LD_EXP 88
22523: PUSH
22524: LD_INT 1
22526: PLUS
22527: PPUSH
22528: EMPTY
22529: PPUSH
22530: CALL_OW 1
22534: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22535: LD_ADDR_EXP 91
22539: PUSH
22540: LD_EXP 91
22544: PPUSH
22545: LD_EXP 91
22549: PUSH
22550: LD_INT 1
22552: PLUS
22553: PPUSH
22554: EMPTY
22555: PPUSH
22556: CALL_OW 1
22560: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22561: LD_VAR 0 1
22565: PPUSH
22566: CALL_OW 302
22570: NOT
22571: IFFALSE 22584
// begin HackUnlinkAll ( i ) ;
22573: LD_VAR 0 1
22577: PPUSH
22578: CALL 22690 0 1
// continue ;
22582: GO 22464
// end ; HackCheckCapturedStatus ( i ) ;
22584: LD_VAR 0 1
22588: PPUSH
22589: CALL 23133 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22593: LD_ADDR_VAR 0 2
22597: PUSH
22598: LD_INT 81
22600: PUSH
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 255
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 33
22617: PUSH
22618: LD_INT 3
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 91
22627: PUSH
22628: LD_VAR 0 1
22632: PUSH
22633: LD_EXP 90
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 50
22645: PUSH
22646: EMPTY
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: PPUSH
22655: CALL_OW 69
22659: ST_TO_ADDR
// if not tmp then
22660: LD_VAR 0 2
22664: NOT
22665: IFFALSE 22669
// continue ;
22667: GO 22464
// HackLink ( i , tmp ) ;
22669: LD_VAR 0 1
22673: PPUSH
22674: LD_VAR 0 2
22678: PPUSH
22679: CALL 22826 0 2
// end ;
22683: GO 22464
22685: POP
22686: POP
// end ;
22687: PPOPN 2
22689: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22690: LD_INT 0
22692: PPUSH
22693: PPUSH
22694: PPUSH
// if not hack in hackTanks then
22695: LD_VAR 0 1
22699: PUSH
22700: LD_EXP 87
22704: IN
22705: NOT
22706: IFFALSE 22710
// exit ;
22708: GO 22821
// index := GetElementIndex ( hackTanks , hack ) ;
22710: LD_ADDR_VAR 0 4
22714: PUSH
22715: LD_EXP 87
22719: PPUSH
22720: LD_VAR 0 1
22724: PPUSH
22725: CALL 30660 0 2
22729: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22730: LD_EXP 88
22734: PUSH
22735: LD_VAR 0 4
22739: ARRAY
22740: IFFALSE 22821
// begin for i in hackTanksCaptured [ index ] do
22742: LD_ADDR_VAR 0 3
22746: PUSH
22747: LD_EXP 88
22751: PUSH
22752: LD_VAR 0 4
22756: ARRAY
22757: PUSH
22758: FOR_IN
22759: IFFALSE 22785
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22761: LD_VAR 0 3
22765: PUSH
22766: LD_INT 1
22768: ARRAY
22769: PPUSH
22770: LD_VAR 0 3
22774: PUSH
22775: LD_INT 2
22777: ARRAY
22778: PPUSH
22779: CALL_OW 235
22783: GO 22758
22785: POP
22786: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22787: LD_ADDR_EXP 88
22791: PUSH
22792: LD_EXP 88
22796: PPUSH
22797: LD_VAR 0 4
22801: PPUSH
22802: EMPTY
22803: PPUSH
22804: CALL_OW 1
22808: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22809: LD_VAR 0 1
22813: PPUSH
22814: LD_INT 0
22816: PPUSH
22817: CALL_OW 505
// end ; end ;
22821: LD_VAR 0 2
22825: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22826: LD_INT 0
22828: PPUSH
22829: PPUSH
22830: PPUSH
// if not hack in hackTanks or not vehicles then
22831: LD_VAR 0 1
22835: PUSH
22836: LD_EXP 87
22840: IN
22841: NOT
22842: PUSH
22843: LD_VAR 0 2
22847: NOT
22848: OR
22849: IFFALSE 22853
// exit ;
22851: GO 23128
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22853: LD_ADDR_VAR 0 2
22857: PUSH
22858: LD_VAR 0 1
22862: PPUSH
22863: LD_VAR 0 2
22867: PPUSH
22868: LD_INT 1
22870: PPUSH
22871: LD_INT 1
22873: PPUSH
22874: CALL 31310 0 4
22878: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22879: LD_ADDR_VAR 0 5
22883: PUSH
22884: LD_EXP 87
22888: PPUSH
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL 30660 0 2
22898: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22899: LD_EXP 88
22903: PUSH
22904: LD_VAR 0 5
22908: ARRAY
22909: PUSH
22910: LD_EXP 89
22914: LESS
22915: IFFALSE 23104
// begin for i := 1 to vehicles do
22917: LD_ADDR_VAR 0 4
22921: PUSH
22922: DOUBLE
22923: LD_INT 1
22925: DEC
22926: ST_TO_ADDR
22927: LD_VAR 0 2
22931: PUSH
22932: FOR_TO
22933: IFFALSE 23102
// begin if hackTanksCaptured [ index ] = hackLimit then
22935: LD_EXP 88
22939: PUSH
22940: LD_VAR 0 5
22944: ARRAY
22945: PUSH
22946: LD_EXP 89
22950: EQUAL
22951: IFFALSE 22955
// break ;
22953: GO 23102
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22955: LD_ADDR_EXP 91
22959: PUSH
22960: LD_EXP 91
22964: PPUSH
22965: LD_VAR 0 5
22969: PPUSH
22970: LD_EXP 91
22974: PUSH
22975: LD_VAR 0 5
22979: ARRAY
22980: PUSH
22981: LD_INT 1
22983: PLUS
22984: PPUSH
22985: CALL_OW 1
22989: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22990: LD_ADDR_EXP 88
22994: PUSH
22995: LD_EXP 88
22999: PPUSH
23000: LD_VAR 0 5
23004: PUSH
23005: LD_EXP 88
23009: PUSH
23010: LD_VAR 0 5
23014: ARRAY
23015: PUSH
23016: LD_INT 1
23018: PLUS
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PPUSH
23024: LD_VAR 0 2
23028: PUSH
23029: LD_VAR 0 4
23033: ARRAY
23034: PUSH
23035: LD_VAR 0 2
23039: PUSH
23040: LD_VAR 0 4
23044: ARRAY
23045: PPUSH
23046: CALL_OW 255
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PPUSH
23055: CALL 30875 0 3
23059: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23060: LD_VAR 0 2
23064: PUSH
23065: LD_VAR 0 4
23069: ARRAY
23070: PPUSH
23071: LD_VAR 0 1
23075: PPUSH
23076: CALL_OW 255
23080: PPUSH
23081: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23085: LD_VAR 0 2
23089: PUSH
23090: LD_VAR 0 4
23094: ARRAY
23095: PPUSH
23096: CALL_OW 141
// end ;
23100: GO 22932
23102: POP
23103: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23104: LD_VAR 0 1
23108: PPUSH
23109: LD_EXP 88
23113: PUSH
23114: LD_VAR 0 5
23118: ARRAY
23119: PUSH
23120: LD_INT 0
23122: PLUS
23123: PPUSH
23124: CALL_OW 505
// end ;
23128: LD_VAR 0 3
23132: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23133: LD_INT 0
23135: PPUSH
23136: PPUSH
23137: PPUSH
23138: PPUSH
// if not hack in hackTanks then
23139: LD_VAR 0 1
23143: PUSH
23144: LD_EXP 87
23148: IN
23149: NOT
23150: IFFALSE 23154
// exit ;
23152: GO 23394
// index := GetElementIndex ( hackTanks , hack ) ;
23154: LD_ADDR_VAR 0 4
23158: PUSH
23159: LD_EXP 87
23163: PPUSH
23164: LD_VAR 0 1
23168: PPUSH
23169: CALL 30660 0 2
23173: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23174: LD_ADDR_VAR 0 3
23178: PUSH
23179: DOUBLE
23180: LD_EXP 88
23184: PUSH
23185: LD_VAR 0 4
23189: ARRAY
23190: INC
23191: ST_TO_ADDR
23192: LD_INT 1
23194: PUSH
23195: FOR_DOWNTO
23196: IFFALSE 23368
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23198: LD_ADDR_VAR 0 5
23202: PUSH
23203: LD_EXP 88
23207: PUSH
23208: LD_VAR 0 4
23212: ARRAY
23213: PUSH
23214: LD_VAR 0 3
23218: ARRAY
23219: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23220: LD_VAR 0 5
23224: PUSH
23225: LD_INT 1
23227: ARRAY
23228: PPUSH
23229: CALL_OW 302
23233: NOT
23234: PUSH
23235: LD_VAR 0 5
23239: PUSH
23240: LD_INT 1
23242: ARRAY
23243: PPUSH
23244: CALL_OW 255
23248: PUSH
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 255
23258: NONEQUAL
23259: OR
23260: IFFALSE 23366
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23262: LD_VAR 0 5
23266: PUSH
23267: LD_INT 1
23269: ARRAY
23270: PPUSH
23271: CALL_OW 305
23275: PUSH
23276: LD_VAR 0 5
23280: PUSH
23281: LD_INT 1
23283: ARRAY
23284: PPUSH
23285: CALL_OW 255
23289: PUSH
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 255
23299: EQUAL
23300: AND
23301: IFFALSE 23325
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23303: LD_VAR 0 5
23307: PUSH
23308: LD_INT 1
23310: ARRAY
23311: PPUSH
23312: LD_VAR 0 5
23316: PUSH
23317: LD_INT 2
23319: ARRAY
23320: PPUSH
23321: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23325: LD_ADDR_EXP 88
23329: PUSH
23330: LD_EXP 88
23334: PPUSH
23335: LD_VAR 0 4
23339: PPUSH
23340: LD_EXP 88
23344: PUSH
23345: LD_VAR 0 4
23349: ARRAY
23350: PPUSH
23351: LD_VAR 0 3
23355: PPUSH
23356: CALL_OW 3
23360: PPUSH
23361: CALL_OW 1
23365: ST_TO_ADDR
// end ; end ;
23366: GO 23195
23368: POP
23369: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23370: LD_VAR 0 1
23374: PPUSH
23375: LD_EXP 88
23379: PUSH
23380: LD_VAR 0 4
23384: ARRAY
23385: PUSH
23386: LD_INT 0
23388: PLUS
23389: PPUSH
23390: CALL_OW 505
// end ;
23394: LD_VAR 0 2
23398: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23399: LD_INT 0
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
// if not hack in hackTanks then
23405: LD_VAR 0 1
23409: PUSH
23410: LD_EXP 87
23414: IN
23415: NOT
23416: IFFALSE 23420
// exit ;
23418: GO 23505
// index := GetElementIndex ( hackTanks , hack ) ;
23420: LD_ADDR_VAR 0 5
23424: PUSH
23425: LD_EXP 87
23429: PPUSH
23430: LD_VAR 0 1
23434: PPUSH
23435: CALL 30660 0 2
23439: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: DOUBLE
23446: LD_INT 1
23448: DEC
23449: ST_TO_ADDR
23450: LD_EXP 88
23454: PUSH
23455: LD_VAR 0 5
23459: ARRAY
23460: PUSH
23461: FOR_TO
23462: IFFALSE 23503
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23464: LD_EXP 88
23468: PUSH
23469: LD_VAR 0 5
23473: ARRAY
23474: PUSH
23475: LD_VAR 0 4
23479: ARRAY
23480: PUSH
23481: LD_INT 1
23483: ARRAY
23484: PUSH
23485: LD_VAR 0 2
23489: EQUAL
23490: IFFALSE 23501
// KillUnit ( vehicle ) ;
23492: LD_VAR 0 2
23496: PPUSH
23497: CALL_OW 66
23501: GO 23461
23503: POP
23504: POP
// end ;
23505: LD_VAR 0 3
23509: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23510: LD_EXP 92
23514: NOT
23515: IFFALSE 23550
23517: GO 23519
23519: DISABLE
// begin initMiner := true ;
23520: LD_ADDR_EXP 92
23524: PUSH
23525: LD_INT 1
23527: ST_TO_ADDR
// minersList := [ ] ;
23528: LD_ADDR_EXP 93
23532: PUSH
23533: EMPTY
23534: ST_TO_ADDR
// minerMinesList := [ ] ;
23535: LD_ADDR_EXP 94
23539: PUSH
23540: EMPTY
23541: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23542: LD_ADDR_EXP 95
23546: PUSH
23547: LD_INT 5
23549: ST_TO_ADDR
// end ;
23550: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23551: LD_EXP 92
23555: PUSH
23556: LD_INT 34
23558: PUSH
23559: LD_INT 81
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PPUSH
23566: CALL_OW 69
23570: AND
23571: IFFALSE 24032
23573: GO 23575
23575: DISABLE
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
23581: PPUSH
// begin enable ;
23582: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23583: LD_ADDR_VAR 0 1
23587: PUSH
23588: LD_INT 34
23590: PUSH
23591: LD_INT 81
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PPUSH
23598: CALL_OW 69
23602: PUSH
23603: FOR_IN
23604: IFFALSE 23676
// begin if not i in minersList then
23606: LD_VAR 0 1
23610: PUSH
23611: LD_EXP 93
23615: IN
23616: NOT
23617: IFFALSE 23674
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23619: LD_ADDR_EXP 93
23623: PUSH
23624: LD_EXP 93
23628: PPUSH
23629: LD_EXP 93
23633: PUSH
23634: LD_INT 1
23636: PLUS
23637: PPUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 1
23647: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23648: LD_ADDR_EXP 94
23652: PUSH
23653: LD_EXP 94
23657: PPUSH
23658: LD_EXP 94
23662: PUSH
23663: LD_INT 1
23665: PLUS
23666: PPUSH
23667: EMPTY
23668: PPUSH
23669: CALL_OW 1
23673: ST_TO_ADDR
// end end ;
23674: GO 23603
23676: POP
23677: POP
// for i := minerMinesList downto 1 do
23678: LD_ADDR_VAR 0 1
23682: PUSH
23683: DOUBLE
23684: LD_EXP 94
23688: INC
23689: ST_TO_ADDR
23690: LD_INT 1
23692: PUSH
23693: FOR_DOWNTO
23694: IFFALSE 24030
// begin if IsLive ( minersList [ i ] ) then
23696: LD_EXP 93
23700: PUSH
23701: LD_VAR 0 1
23705: ARRAY
23706: PPUSH
23707: CALL_OW 300
23711: IFFALSE 23739
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23713: LD_EXP 93
23717: PUSH
23718: LD_VAR 0 1
23722: ARRAY
23723: PPUSH
23724: LD_EXP 94
23728: PUSH
23729: LD_VAR 0 1
23733: ARRAY
23734: PPUSH
23735: CALL_OW 505
// if not minerMinesList [ i ] then
23739: LD_EXP 94
23743: PUSH
23744: LD_VAR 0 1
23748: ARRAY
23749: NOT
23750: IFFALSE 23754
// continue ;
23752: GO 23693
// for j := minerMinesList [ i ] downto 1 do
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: DOUBLE
23760: LD_EXP 94
23764: PUSH
23765: LD_VAR 0 1
23769: ARRAY
23770: INC
23771: ST_TO_ADDR
23772: LD_INT 1
23774: PUSH
23775: FOR_DOWNTO
23776: IFFALSE 24026
// begin side := GetSide ( minersList [ i ] ) ;
23778: LD_ADDR_VAR 0 3
23782: PUSH
23783: LD_EXP 93
23787: PUSH
23788: LD_VAR 0 1
23792: ARRAY
23793: PPUSH
23794: CALL_OW 255
23798: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23799: LD_ADDR_VAR 0 4
23803: PUSH
23804: LD_EXP 94
23808: PUSH
23809: LD_VAR 0 1
23813: ARRAY
23814: PUSH
23815: LD_VAR 0 2
23819: ARRAY
23820: PUSH
23821: LD_INT 1
23823: ARRAY
23824: PPUSH
23825: LD_EXP 94
23829: PUSH
23830: LD_VAR 0 1
23834: ARRAY
23835: PUSH
23836: LD_VAR 0 2
23840: ARRAY
23841: PUSH
23842: LD_INT 2
23844: ARRAY
23845: PPUSH
23846: CALL_OW 428
23850: ST_TO_ADDR
// if not tmp then
23851: LD_VAR 0 4
23855: NOT
23856: IFFALSE 23860
// continue ;
23858: GO 23775
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23860: LD_VAR 0 4
23864: PUSH
23865: LD_INT 81
23867: PUSH
23868: LD_VAR 0 3
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PPUSH
23877: CALL_OW 69
23881: IN
23882: PUSH
23883: LD_EXP 94
23887: PUSH
23888: LD_VAR 0 1
23892: ARRAY
23893: PUSH
23894: LD_VAR 0 2
23898: ARRAY
23899: PUSH
23900: LD_INT 1
23902: ARRAY
23903: PPUSH
23904: LD_EXP 94
23908: PUSH
23909: LD_VAR 0 1
23913: ARRAY
23914: PUSH
23915: LD_VAR 0 2
23919: ARRAY
23920: PUSH
23921: LD_INT 2
23923: ARRAY
23924: PPUSH
23925: CALL_OW 458
23929: AND
23930: IFFALSE 24024
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23932: LD_EXP 94
23936: PUSH
23937: LD_VAR 0 1
23941: ARRAY
23942: PUSH
23943: LD_VAR 0 2
23947: ARRAY
23948: PUSH
23949: LD_INT 1
23951: ARRAY
23952: PPUSH
23953: LD_EXP 94
23957: PUSH
23958: LD_VAR 0 1
23962: ARRAY
23963: PUSH
23964: LD_VAR 0 2
23968: ARRAY
23969: PUSH
23970: LD_INT 2
23972: ARRAY
23973: PPUSH
23974: LD_VAR 0 3
23978: PPUSH
23979: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23983: LD_ADDR_EXP 94
23987: PUSH
23988: LD_EXP 94
23992: PPUSH
23993: LD_VAR 0 1
23997: PPUSH
23998: LD_EXP 94
24002: PUSH
24003: LD_VAR 0 1
24007: ARRAY
24008: PPUSH
24009: LD_VAR 0 2
24013: PPUSH
24014: CALL_OW 3
24018: PPUSH
24019: CALL_OW 1
24023: ST_TO_ADDR
// end ; end ;
24024: GO 23775
24026: POP
24027: POP
// end ;
24028: GO 23693
24030: POP
24031: POP
// end ;
24032: PPOPN 4
24034: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24035: LD_INT 0
24037: PPUSH
24038: PPUSH
// result := false ;
24039: LD_ADDR_VAR 0 4
24043: PUSH
24044: LD_INT 0
24046: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24047: LD_VAR 0 1
24051: PPUSH
24052: CALL_OW 264
24056: PUSH
24057: LD_INT 81
24059: EQUAL
24060: NOT
24061: IFFALSE 24065
// exit ;
24063: GO 24305
// index := GetElementIndex ( minersList , unit ) ;
24065: LD_ADDR_VAR 0 5
24069: PUSH
24070: LD_EXP 93
24074: PPUSH
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL 30660 0 2
24084: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24085: LD_EXP 94
24089: PUSH
24090: LD_VAR 0 5
24094: ARRAY
24095: PUSH
24096: LD_EXP 95
24100: GREATEREQUAL
24101: IFFALSE 24105
// exit ;
24103: GO 24305
// ComMoveXY ( unit , x , y ) ;
24105: LD_VAR 0 1
24109: PPUSH
24110: LD_VAR 0 2
24114: PPUSH
24115: LD_VAR 0 3
24119: PPUSH
24120: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24124: LD_INT 35
24126: PPUSH
24127: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24131: LD_VAR 0 1
24135: PPUSH
24136: LD_VAR 0 2
24140: PPUSH
24141: LD_VAR 0 3
24145: PPUSH
24146: CALL 62015 0 3
24150: NOT
24151: PUSH
24152: LD_VAR 0 1
24156: PPUSH
24157: CALL_OW 314
24161: AND
24162: IFFALSE 24166
// exit ;
24164: GO 24305
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24166: LD_VAR 0 2
24170: PPUSH
24171: LD_VAR 0 3
24175: PPUSH
24176: CALL_OW 428
24180: PUSH
24181: LD_VAR 0 1
24185: EQUAL
24186: PUSH
24187: LD_VAR 0 1
24191: PPUSH
24192: CALL_OW 314
24196: NOT
24197: AND
24198: IFFALSE 24124
// PlaySoundXY ( x , y , PlantMine ) ;
24200: LD_VAR 0 2
24204: PPUSH
24205: LD_VAR 0 3
24209: PPUSH
24210: LD_STRING PlantMine
24212: PPUSH
24213: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24217: LD_VAR 0 2
24221: PPUSH
24222: LD_VAR 0 3
24226: PPUSH
24227: LD_VAR 0 1
24231: PPUSH
24232: CALL_OW 255
24236: PPUSH
24237: LD_INT 0
24239: PPUSH
24240: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24244: LD_ADDR_EXP 94
24248: PUSH
24249: LD_EXP 94
24253: PPUSH
24254: LD_VAR 0 5
24258: PUSH
24259: LD_EXP 94
24263: PUSH
24264: LD_VAR 0 5
24268: ARRAY
24269: PUSH
24270: LD_INT 1
24272: PLUS
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PPUSH
24278: LD_VAR 0 2
24282: PUSH
24283: LD_VAR 0 3
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PPUSH
24292: CALL 30875 0 3
24296: ST_TO_ADDR
// result := true ;
24297: LD_ADDR_VAR 0 4
24301: PUSH
24302: LD_INT 1
24304: ST_TO_ADDR
// end ;
24305: LD_VAR 0 4
24309: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24310: LD_INT 0
24312: PPUSH
24313: PPUSH
24314: PPUSH
// if not unit in minersList then
24315: LD_VAR 0 1
24319: PUSH
24320: LD_EXP 93
24324: IN
24325: NOT
24326: IFFALSE 24330
// exit ;
24328: GO 24722
// index := GetElementIndex ( minersList , unit ) ;
24330: LD_ADDR_VAR 0 6
24334: PUSH
24335: LD_EXP 93
24339: PPUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL 30660 0 2
24349: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24350: LD_ADDR_VAR 0 5
24354: PUSH
24355: DOUBLE
24356: LD_EXP 94
24360: PUSH
24361: LD_VAR 0 6
24365: ARRAY
24366: INC
24367: ST_TO_ADDR
24368: LD_INT 1
24370: PUSH
24371: FOR_DOWNTO
24372: IFFALSE 24533
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24374: LD_EXP 94
24378: PUSH
24379: LD_VAR 0 6
24383: ARRAY
24384: PUSH
24385: LD_VAR 0 5
24389: ARRAY
24390: PUSH
24391: LD_INT 1
24393: ARRAY
24394: PUSH
24395: LD_VAR 0 2
24399: EQUAL
24400: PUSH
24401: LD_EXP 94
24405: PUSH
24406: LD_VAR 0 6
24410: ARRAY
24411: PUSH
24412: LD_VAR 0 5
24416: ARRAY
24417: PUSH
24418: LD_INT 2
24420: ARRAY
24421: PUSH
24422: LD_VAR 0 3
24426: EQUAL
24427: AND
24428: IFFALSE 24531
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24430: LD_EXP 94
24434: PUSH
24435: LD_VAR 0 6
24439: ARRAY
24440: PUSH
24441: LD_VAR 0 5
24445: ARRAY
24446: PUSH
24447: LD_INT 1
24449: ARRAY
24450: PPUSH
24451: LD_EXP 94
24455: PUSH
24456: LD_VAR 0 6
24460: ARRAY
24461: PUSH
24462: LD_VAR 0 5
24466: ARRAY
24467: PUSH
24468: LD_INT 2
24470: ARRAY
24471: PPUSH
24472: LD_VAR 0 1
24476: PPUSH
24477: CALL_OW 255
24481: PPUSH
24482: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24486: LD_ADDR_EXP 94
24490: PUSH
24491: LD_EXP 94
24495: PPUSH
24496: LD_VAR 0 6
24500: PPUSH
24501: LD_EXP 94
24505: PUSH
24506: LD_VAR 0 6
24510: ARRAY
24511: PPUSH
24512: LD_VAR 0 5
24516: PPUSH
24517: CALL_OW 3
24521: PPUSH
24522: CALL_OW 1
24526: ST_TO_ADDR
// exit ;
24527: POP
24528: POP
24529: GO 24722
// end ; end ;
24531: GO 24371
24533: POP
24534: POP
// for i := minerMinesList [ index ] downto 1 do
24535: LD_ADDR_VAR 0 5
24539: PUSH
24540: DOUBLE
24541: LD_EXP 94
24545: PUSH
24546: LD_VAR 0 6
24550: ARRAY
24551: INC
24552: ST_TO_ADDR
24553: LD_INT 1
24555: PUSH
24556: FOR_DOWNTO
24557: IFFALSE 24720
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24559: LD_EXP 94
24563: PUSH
24564: LD_VAR 0 6
24568: ARRAY
24569: PUSH
24570: LD_VAR 0 5
24574: ARRAY
24575: PUSH
24576: LD_INT 1
24578: ARRAY
24579: PPUSH
24580: LD_EXP 94
24584: PUSH
24585: LD_VAR 0 6
24589: ARRAY
24590: PUSH
24591: LD_VAR 0 5
24595: ARRAY
24596: PUSH
24597: LD_INT 2
24599: ARRAY
24600: PPUSH
24601: LD_VAR 0 2
24605: PPUSH
24606: LD_VAR 0 3
24610: PPUSH
24611: CALL_OW 298
24615: PUSH
24616: LD_INT 6
24618: LESS
24619: IFFALSE 24718
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24621: LD_EXP 94
24625: PUSH
24626: LD_VAR 0 6
24630: ARRAY
24631: PUSH
24632: LD_VAR 0 5
24636: ARRAY
24637: PUSH
24638: LD_INT 1
24640: ARRAY
24641: PPUSH
24642: LD_EXP 94
24646: PUSH
24647: LD_VAR 0 6
24651: ARRAY
24652: PUSH
24653: LD_VAR 0 5
24657: ARRAY
24658: PUSH
24659: LD_INT 2
24661: ARRAY
24662: PPUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 255
24672: PPUSH
24673: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24677: LD_ADDR_EXP 94
24681: PUSH
24682: LD_EXP 94
24686: PPUSH
24687: LD_VAR 0 6
24691: PPUSH
24692: LD_EXP 94
24696: PUSH
24697: LD_VAR 0 6
24701: ARRAY
24702: PPUSH
24703: LD_VAR 0 5
24707: PPUSH
24708: CALL_OW 3
24712: PPUSH
24713: CALL_OW 1
24717: ST_TO_ADDR
// end ; end ;
24718: GO 24556
24720: POP
24721: POP
// end ;
24722: LD_VAR 0 4
24726: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24727: LD_INT 0
24729: PPUSH
24730: PPUSH
24731: PPUSH
24732: PPUSH
24733: PPUSH
24734: PPUSH
24735: PPUSH
24736: PPUSH
24737: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24738: LD_VAR 0 1
24742: PPUSH
24743: CALL_OW 264
24747: PUSH
24748: LD_INT 81
24750: EQUAL
24751: NOT
24752: PUSH
24753: LD_VAR 0 1
24757: PUSH
24758: LD_EXP 93
24762: IN
24763: NOT
24764: OR
24765: IFFALSE 24769
// exit ;
24767: GO 25091
// index := GetElementIndex ( minersList , unit ) ;
24769: LD_ADDR_VAR 0 6
24773: PUSH
24774: LD_EXP 93
24778: PPUSH
24779: LD_VAR 0 1
24783: PPUSH
24784: CALL 30660 0 2
24788: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24789: LD_ADDR_VAR 0 8
24793: PUSH
24794: LD_EXP 95
24798: PUSH
24799: LD_EXP 94
24803: PUSH
24804: LD_VAR 0 6
24808: ARRAY
24809: MINUS
24810: ST_TO_ADDR
// if not minesFreeAmount then
24811: LD_VAR 0 8
24815: NOT
24816: IFFALSE 24820
// exit ;
24818: GO 25091
// tmp := [ ] ;
24820: LD_ADDR_VAR 0 7
24824: PUSH
24825: EMPTY
24826: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24827: LD_ADDR_VAR 0 5
24831: PUSH
24832: DOUBLE
24833: LD_INT 1
24835: DEC
24836: ST_TO_ADDR
24837: LD_VAR 0 8
24841: PUSH
24842: FOR_TO
24843: IFFALSE 25038
// begin _d := rand ( 0 , 5 ) ;
24845: LD_ADDR_VAR 0 11
24849: PUSH
24850: LD_INT 0
24852: PPUSH
24853: LD_INT 5
24855: PPUSH
24856: CALL_OW 12
24860: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24861: LD_ADDR_VAR 0 12
24865: PUSH
24866: LD_INT 2
24868: PPUSH
24869: LD_INT 6
24871: PPUSH
24872: CALL_OW 12
24876: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24877: LD_ADDR_VAR 0 9
24881: PUSH
24882: LD_VAR 0 2
24886: PPUSH
24887: LD_VAR 0 11
24891: PPUSH
24892: LD_VAR 0 12
24896: PPUSH
24897: CALL_OW 272
24901: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24902: LD_ADDR_VAR 0 10
24906: PUSH
24907: LD_VAR 0 3
24911: PPUSH
24912: LD_VAR 0 11
24916: PPUSH
24917: LD_VAR 0 12
24921: PPUSH
24922: CALL_OW 273
24926: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24927: LD_VAR 0 9
24931: PPUSH
24932: LD_VAR 0 10
24936: PPUSH
24937: CALL_OW 488
24941: PUSH
24942: LD_VAR 0 9
24946: PUSH
24947: LD_VAR 0 10
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_VAR 0 7
24960: IN
24961: NOT
24962: AND
24963: PUSH
24964: LD_VAR 0 9
24968: PPUSH
24969: LD_VAR 0 10
24973: PPUSH
24974: CALL_OW 458
24978: NOT
24979: AND
24980: IFFALSE 25022
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24982: LD_ADDR_VAR 0 7
24986: PUSH
24987: LD_VAR 0 7
24991: PPUSH
24992: LD_VAR 0 7
24996: PUSH
24997: LD_INT 1
24999: PLUS
25000: PPUSH
25001: LD_VAR 0 9
25005: PUSH
25006: LD_VAR 0 10
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PPUSH
25015: CALL_OW 1
25019: ST_TO_ADDR
25020: GO 25036
// i := i - 1 ;
25022: LD_ADDR_VAR 0 5
25026: PUSH
25027: LD_VAR 0 5
25031: PUSH
25032: LD_INT 1
25034: MINUS
25035: ST_TO_ADDR
// end ;
25036: GO 24842
25038: POP
25039: POP
// for i in tmp do
25040: LD_ADDR_VAR 0 5
25044: PUSH
25045: LD_VAR 0 7
25049: PUSH
25050: FOR_IN
25051: IFFALSE 25089
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25053: LD_VAR 0 1
25057: PPUSH
25058: LD_VAR 0 5
25062: PUSH
25063: LD_INT 1
25065: ARRAY
25066: PPUSH
25067: LD_VAR 0 5
25071: PUSH
25072: LD_INT 2
25074: ARRAY
25075: PPUSH
25076: CALL 24035 0 3
25080: NOT
25081: IFFALSE 25087
// exit ;
25083: POP
25084: POP
25085: GO 25091
25087: GO 25050
25089: POP
25090: POP
// end ;
25091: LD_VAR 0 4
25095: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25096: LD_INT 0
25098: PPUSH
25099: PPUSH
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
25104: PPUSH
// if not GetClass ( unit ) = class_sniper then
25105: LD_VAR 0 1
25109: PPUSH
25110: CALL_OW 257
25114: PUSH
25115: LD_INT 5
25117: EQUAL
25118: NOT
25119: IFFALSE 25123
// exit ;
25121: GO 25511
// dist := 8 ;
25123: LD_ADDR_VAR 0 5
25127: PUSH
25128: LD_INT 8
25130: ST_TO_ADDR
// viewRange := 12 ;
25131: LD_ADDR_VAR 0 7
25135: PUSH
25136: LD_INT 12
25138: ST_TO_ADDR
// side := GetSide ( unit ) ;
25139: LD_ADDR_VAR 0 6
25143: PUSH
25144: LD_VAR 0 1
25148: PPUSH
25149: CALL_OW 255
25153: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25154: LD_INT 61
25156: PPUSH
25157: LD_VAR 0 6
25161: PPUSH
25162: CALL_OW 321
25166: PUSH
25167: LD_INT 2
25169: EQUAL
25170: IFFALSE 25180
// viewRange := 16 ;
25172: LD_ADDR_VAR 0 7
25176: PUSH
25177: LD_INT 16
25179: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25180: LD_VAR 0 1
25184: PPUSH
25185: LD_VAR 0 2
25189: PPUSH
25190: LD_VAR 0 3
25194: PPUSH
25195: CALL_OW 297
25199: PUSH
25200: LD_VAR 0 5
25204: GREATER
25205: IFFALSE 25284
// begin ComMoveXY ( unit , x , y ) ;
25207: LD_VAR 0 1
25211: PPUSH
25212: LD_VAR 0 2
25216: PPUSH
25217: LD_VAR 0 3
25221: PPUSH
25222: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25226: LD_INT 35
25228: PPUSH
25229: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25233: LD_VAR 0 1
25237: PPUSH
25238: LD_VAR 0 2
25242: PPUSH
25243: LD_VAR 0 3
25247: PPUSH
25248: CALL 62015 0 3
25252: NOT
25253: IFFALSE 25257
// exit ;
25255: GO 25511
// until GetDistUnitXY ( unit , x , y ) < dist ;
25257: LD_VAR 0 1
25261: PPUSH
25262: LD_VAR 0 2
25266: PPUSH
25267: LD_VAR 0 3
25271: PPUSH
25272: CALL_OW 297
25276: PUSH
25277: LD_VAR 0 5
25281: LESS
25282: IFFALSE 25226
// end ; ComTurnXY ( unit , x , y ) ;
25284: LD_VAR 0 1
25288: PPUSH
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_VAR 0 3
25298: PPUSH
25299: CALL_OW 118
// wait ( 5 ) ;
25303: LD_INT 5
25305: PPUSH
25306: CALL_OW 67
// _d := GetDir ( unit ) ;
25310: LD_ADDR_VAR 0 10
25314: PUSH
25315: LD_VAR 0 1
25319: PPUSH
25320: CALL_OW 254
25324: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25325: LD_ADDR_VAR 0 8
25329: PUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 250
25339: PPUSH
25340: LD_VAR 0 10
25344: PPUSH
25345: LD_VAR 0 5
25349: PPUSH
25350: CALL_OW 272
25354: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25355: LD_ADDR_VAR 0 9
25359: PUSH
25360: LD_VAR 0 1
25364: PPUSH
25365: CALL_OW 251
25369: PPUSH
25370: LD_VAR 0 10
25374: PPUSH
25375: LD_VAR 0 5
25379: PPUSH
25380: CALL_OW 273
25384: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25385: LD_VAR 0 8
25389: PPUSH
25390: LD_VAR 0 9
25394: PPUSH
25395: CALL_OW 488
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25511
// ComAnimCustom ( unit , 1 ) ;
25404: LD_VAR 0 1
25408: PPUSH
25409: LD_INT 1
25411: PPUSH
25412: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25416: LD_VAR 0 8
25420: PPUSH
25421: LD_VAR 0 9
25425: PPUSH
25426: LD_VAR 0 6
25430: PPUSH
25431: LD_VAR 0 7
25435: PPUSH
25436: CALL_OW 330
// repeat wait ( 1 ) ;
25440: LD_INT 1
25442: PPUSH
25443: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25447: LD_VAR 0 1
25451: PPUSH
25452: CALL_OW 316
25456: PUSH
25457: LD_VAR 0 1
25461: PPUSH
25462: CALL_OW 314
25466: OR
25467: PUSH
25468: LD_VAR 0 1
25472: PPUSH
25473: CALL_OW 302
25477: NOT
25478: OR
25479: PUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: CALL_OW 301
25489: OR
25490: IFFALSE 25440
// RemoveSeeing ( _x , _y , side ) ;
25492: LD_VAR 0 8
25496: PPUSH
25497: LD_VAR 0 9
25501: PPUSH
25502: LD_VAR 0 6
25506: PPUSH
25507: CALL_OW 331
// end ; end_of_file
25511: LD_VAR 0 4
25515: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25516: LD_VAR 0 1
25520: PUSH
25521: LD_INT 200
25523: DOUBLE
25524: GREATEREQUAL
25525: IFFALSE 25533
25527: LD_INT 299
25529: DOUBLE
25530: LESSEQUAL
25531: IFTRUE 25535
25533: GO 25567
25535: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25536: LD_VAR 0 1
25540: PPUSH
25541: LD_VAR 0 2
25545: PPUSH
25546: LD_VAR 0 3
25550: PPUSH
25551: LD_VAR 0 4
25555: PPUSH
25556: LD_VAR 0 5
25560: PPUSH
25561: CALL 21603 0 5
25565: GO 25644
25567: LD_INT 300
25569: DOUBLE
25570: GREATEREQUAL
25571: IFFALSE 25579
25573: LD_INT 399
25575: DOUBLE
25576: LESSEQUAL
25577: IFTRUE 25581
25579: GO 25643
25581: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25582: LD_VAR 0 1
25586: PPUSH
25587: LD_VAR 0 2
25591: PPUSH
25592: LD_VAR 0 3
25596: PPUSH
25597: LD_VAR 0 4
25601: PPUSH
25602: LD_VAR 0 5
25606: PPUSH
25607: LD_VAR 0 6
25611: PPUSH
25612: LD_VAR 0 7
25616: PPUSH
25617: LD_VAR 0 8
25621: PPUSH
25622: LD_VAR 0 9
25626: PPUSH
25627: LD_VAR 0 10
25631: PPUSH
25632: LD_VAR 0 11
25636: PPUSH
25637: CALL 17936 0 11
25641: GO 25644
25643: POP
// end ;
25644: PPOPN 11
25646: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25647: LD_VAR 0 1
25651: PPUSH
25652: LD_VAR 0 2
25656: PPUSH
25657: LD_VAR 0 3
25661: PPUSH
25662: LD_VAR 0 4
25666: PPUSH
25667: LD_VAR 0 5
25671: PPUSH
25672: CALL 21339 0 5
// end ; end_of_file
25676: PPOPN 5
25678: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
25679: LD_VAR 0 1
25683: PPUSH
25684: LD_VAR 0 2
25688: PPUSH
25689: LD_VAR 0 3
25693: PPUSH
25694: LD_VAR 0 4
25698: PPUSH
25699: LD_VAR 0 5
25703: PPUSH
25704: LD_VAR 0 6
25708: PPUSH
25709: CALL 5588 0 6
// end ;
25713: PPOPN 6
25715: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
25716: LD_INT 0
25718: PPUSH
// begin if not units then
25719: LD_VAR 0 1
25723: NOT
25724: IFFALSE 25728
// exit ;
25726: GO 25728
// end ;
25728: PPOPN 7
25730: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
25731: CALL 5492 0 0
// end ; end_of_file end_of_file
25735: PPOPN 1
25737: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
// if exist_mode then
25742: LD_VAR 0 2
25746: IFFALSE 25771
// unit := CreateCharacter ( prefix & ident ) else
25748: LD_ADDR_VAR 0 5
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: LD_VAR 0 1
25762: STR
25763: PPUSH
25764: CALL_OW 34
25768: ST_TO_ADDR
25769: GO 25786
// unit := NewCharacter ( ident ) ;
25771: LD_ADDR_VAR 0 5
25775: PUSH
25776: LD_VAR 0 1
25780: PPUSH
25781: CALL_OW 25
25785: ST_TO_ADDR
// result := unit ;
25786: LD_ADDR_VAR 0 4
25790: PUSH
25791: LD_VAR 0 5
25795: ST_TO_ADDR
// end ;
25796: LD_VAR 0 4
25800: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25801: LD_INT 0
25803: PPUSH
25804: PPUSH
// if not side or not nation then
25805: LD_VAR 0 1
25809: NOT
25810: PUSH
25811: LD_VAR 0 2
25815: NOT
25816: OR
25817: IFFALSE 25821
// exit ;
25819: GO 26589
// case nation of nation_american :
25821: LD_VAR 0 2
25825: PUSH
25826: LD_INT 1
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 26048
25834: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25835: LD_ADDR_VAR 0 4
25839: PUSH
25840: LD_INT 35
25842: PUSH
25843: LD_INT 45
25845: PUSH
25846: LD_INT 46
25848: PUSH
25849: LD_INT 47
25851: PUSH
25852: LD_INT 82
25854: PUSH
25855: LD_INT 83
25857: PUSH
25858: LD_INT 84
25860: PUSH
25861: LD_INT 85
25863: PUSH
25864: LD_INT 86
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: LD_INT 6
25875: PUSH
25876: LD_INT 15
25878: PUSH
25879: LD_INT 16
25881: PUSH
25882: LD_INT 7
25884: PUSH
25885: LD_INT 12
25887: PUSH
25888: LD_INT 13
25890: PUSH
25891: LD_INT 10
25893: PUSH
25894: LD_INT 14
25896: PUSH
25897: LD_INT 20
25899: PUSH
25900: LD_INT 21
25902: PUSH
25903: LD_INT 22
25905: PUSH
25906: LD_INT 25
25908: PUSH
25909: LD_INT 32
25911: PUSH
25912: LD_INT 27
25914: PUSH
25915: LD_INT 36
25917: PUSH
25918: LD_INT 69
25920: PUSH
25921: LD_INT 39
25923: PUSH
25924: LD_INT 34
25926: PUSH
25927: LD_INT 40
25929: PUSH
25930: LD_INT 48
25932: PUSH
25933: LD_INT 49
25935: PUSH
25936: LD_INT 50
25938: PUSH
25939: LD_INT 51
25941: PUSH
25942: LD_INT 52
25944: PUSH
25945: LD_INT 53
25947: PUSH
25948: LD_INT 54
25950: PUSH
25951: LD_INT 55
25953: PUSH
25954: LD_INT 56
25956: PUSH
25957: LD_INT 57
25959: PUSH
25960: LD_INT 58
25962: PUSH
25963: LD_INT 59
25965: PUSH
25966: LD_INT 60
25968: PUSH
25969: LD_INT 61
25971: PUSH
25972: LD_INT 62
25974: PUSH
25975: LD_INT 80
25977: PUSH
25978: LD_INT 82
25980: PUSH
25981: LD_INT 83
25983: PUSH
25984: LD_INT 84
25986: PUSH
25987: LD_INT 85
25989: PUSH
25990: LD_INT 86
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: ST_TO_ADDR
26046: GO 26513
26048: LD_INT 2
26050: DOUBLE
26051: EQUAL
26052: IFTRUE 26056
26054: GO 26282
26056: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26057: LD_ADDR_VAR 0 4
26061: PUSH
26062: LD_INT 35
26064: PUSH
26065: LD_INT 45
26067: PUSH
26068: LD_INT 46
26070: PUSH
26071: LD_INT 47
26073: PUSH
26074: LD_INT 82
26076: PUSH
26077: LD_INT 83
26079: PUSH
26080: LD_INT 84
26082: PUSH
26083: LD_INT 85
26085: PUSH
26086: LD_INT 87
26088: PUSH
26089: LD_INT 70
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 11
26097: PUSH
26098: LD_INT 3
26100: PUSH
26101: LD_INT 4
26103: PUSH
26104: LD_INT 5
26106: PUSH
26107: LD_INT 6
26109: PUSH
26110: LD_INT 15
26112: PUSH
26113: LD_INT 18
26115: PUSH
26116: LD_INT 7
26118: PUSH
26119: LD_INT 17
26121: PUSH
26122: LD_INT 8
26124: PUSH
26125: LD_INT 20
26127: PUSH
26128: LD_INT 21
26130: PUSH
26131: LD_INT 22
26133: PUSH
26134: LD_INT 72
26136: PUSH
26137: LD_INT 26
26139: PUSH
26140: LD_INT 69
26142: PUSH
26143: LD_INT 39
26145: PUSH
26146: LD_INT 40
26148: PUSH
26149: LD_INT 41
26151: PUSH
26152: LD_INT 42
26154: PUSH
26155: LD_INT 43
26157: PUSH
26158: LD_INT 48
26160: PUSH
26161: LD_INT 49
26163: PUSH
26164: LD_INT 50
26166: PUSH
26167: LD_INT 51
26169: PUSH
26170: LD_INT 52
26172: PUSH
26173: LD_INT 53
26175: PUSH
26176: LD_INT 54
26178: PUSH
26179: LD_INT 55
26181: PUSH
26182: LD_INT 56
26184: PUSH
26185: LD_INT 60
26187: PUSH
26188: LD_INT 61
26190: PUSH
26191: LD_INT 62
26193: PUSH
26194: LD_INT 66
26196: PUSH
26197: LD_INT 67
26199: PUSH
26200: LD_INT 68
26202: PUSH
26203: LD_INT 81
26205: PUSH
26206: LD_INT 82
26208: PUSH
26209: LD_INT 83
26211: PUSH
26212: LD_INT 84
26214: PUSH
26215: LD_INT 85
26217: PUSH
26218: LD_INT 87
26220: PUSH
26221: LD_INT 88
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: ST_TO_ADDR
26280: GO 26513
26282: LD_INT 3
26284: DOUBLE
26285: EQUAL
26286: IFTRUE 26290
26288: GO 26512
26290: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26291: LD_ADDR_VAR 0 4
26295: PUSH
26296: LD_INT 46
26298: PUSH
26299: LD_INT 47
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: LD_INT 2
26307: PUSH
26308: LD_INT 82
26310: PUSH
26311: LD_INT 83
26313: PUSH
26314: LD_INT 84
26316: PUSH
26317: LD_INT 85
26319: PUSH
26320: LD_INT 86
26322: PUSH
26323: LD_INT 11
26325: PUSH
26326: LD_INT 9
26328: PUSH
26329: LD_INT 20
26331: PUSH
26332: LD_INT 19
26334: PUSH
26335: LD_INT 21
26337: PUSH
26338: LD_INT 24
26340: PUSH
26341: LD_INT 22
26343: PUSH
26344: LD_INT 25
26346: PUSH
26347: LD_INT 28
26349: PUSH
26350: LD_INT 29
26352: PUSH
26353: LD_INT 30
26355: PUSH
26356: LD_INT 31
26358: PUSH
26359: LD_INT 37
26361: PUSH
26362: LD_INT 38
26364: PUSH
26365: LD_INT 32
26367: PUSH
26368: LD_INT 27
26370: PUSH
26371: LD_INT 33
26373: PUSH
26374: LD_INT 69
26376: PUSH
26377: LD_INT 39
26379: PUSH
26380: LD_INT 34
26382: PUSH
26383: LD_INT 40
26385: PUSH
26386: LD_INT 71
26388: PUSH
26389: LD_INT 23
26391: PUSH
26392: LD_INT 44
26394: PUSH
26395: LD_INT 48
26397: PUSH
26398: LD_INT 49
26400: PUSH
26401: LD_INT 50
26403: PUSH
26404: LD_INT 51
26406: PUSH
26407: LD_INT 52
26409: PUSH
26410: LD_INT 53
26412: PUSH
26413: LD_INT 54
26415: PUSH
26416: LD_INT 55
26418: PUSH
26419: LD_INT 56
26421: PUSH
26422: LD_INT 57
26424: PUSH
26425: LD_INT 58
26427: PUSH
26428: LD_INT 59
26430: PUSH
26431: LD_INT 63
26433: PUSH
26434: LD_INT 64
26436: PUSH
26437: LD_INT 65
26439: PUSH
26440: LD_INT 82
26442: PUSH
26443: LD_INT 83
26445: PUSH
26446: LD_INT 84
26448: PUSH
26449: LD_INT 85
26451: PUSH
26452: LD_INT 86
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: ST_TO_ADDR
26510: GO 26513
26512: POP
// if state > - 1 and state < 3 then
26513: LD_VAR 0 3
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: GREATER
26522: PUSH
26523: LD_VAR 0 3
26527: PUSH
26528: LD_INT 3
26530: LESS
26531: AND
26532: IFFALSE 26589
// for i in result do
26534: LD_ADDR_VAR 0 5
26538: PUSH
26539: LD_VAR 0 4
26543: PUSH
26544: FOR_IN
26545: IFFALSE 26587
// if GetTech ( i , side ) <> state then
26547: LD_VAR 0 5
26551: PPUSH
26552: LD_VAR 0 1
26556: PPUSH
26557: CALL_OW 321
26561: PUSH
26562: LD_VAR 0 3
26566: NONEQUAL
26567: IFFALSE 26585
// result := result diff i ;
26569: LD_ADDR_VAR 0 4
26573: PUSH
26574: LD_VAR 0 4
26578: PUSH
26579: LD_VAR 0 5
26583: DIFF
26584: ST_TO_ADDR
26585: GO 26544
26587: POP
26588: POP
// end ;
26589: LD_VAR 0 4
26593: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26594: LD_INT 0
26596: PPUSH
26597: PPUSH
26598: PPUSH
// result := true ;
26599: LD_ADDR_VAR 0 3
26603: PUSH
26604: LD_INT 1
26606: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26607: LD_ADDR_VAR 0 5
26611: PUSH
26612: LD_VAR 0 2
26616: PPUSH
26617: CALL_OW 480
26621: ST_TO_ADDR
// if not tmp then
26622: LD_VAR 0 5
26626: NOT
26627: IFFALSE 26631
// exit ;
26629: GO 26680
// for i in tmp do
26631: LD_ADDR_VAR 0 4
26635: PUSH
26636: LD_VAR 0 5
26640: PUSH
26641: FOR_IN
26642: IFFALSE 26678
// if GetTech ( i , side ) <> state_researched then
26644: LD_VAR 0 4
26648: PPUSH
26649: LD_VAR 0 1
26653: PPUSH
26654: CALL_OW 321
26658: PUSH
26659: LD_INT 2
26661: NONEQUAL
26662: IFFALSE 26676
// begin result := false ;
26664: LD_ADDR_VAR 0 3
26668: PUSH
26669: LD_INT 0
26671: ST_TO_ADDR
// exit ;
26672: POP
26673: POP
26674: GO 26680
// end ;
26676: GO 26641
26678: POP
26679: POP
// end ;
26680: LD_VAR 0 3
26684: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26685: LD_INT 0
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26700: LD_VAR 0 1
26704: NOT
26705: PUSH
26706: LD_VAR 0 1
26710: PPUSH
26711: CALL_OW 257
26715: PUSH
26716: LD_INT 9
26718: NONEQUAL
26719: OR
26720: IFFALSE 26724
// exit ;
26722: GO 27297
// side := GetSide ( unit ) ;
26724: LD_ADDR_VAR 0 9
26728: PUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL_OW 255
26738: ST_TO_ADDR
// tech_space := tech_spacanom ;
26739: LD_ADDR_VAR 0 12
26743: PUSH
26744: LD_INT 29
26746: ST_TO_ADDR
// tech_time := tech_taurad ;
26747: LD_ADDR_VAR 0 13
26751: PUSH
26752: LD_INT 28
26754: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26755: LD_ADDR_VAR 0 11
26759: PUSH
26760: LD_VAR 0 1
26764: PPUSH
26765: CALL_OW 310
26769: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26770: LD_VAR 0 11
26774: PPUSH
26775: CALL_OW 247
26779: PUSH
26780: LD_INT 2
26782: EQUAL
26783: IFFALSE 26787
// exit ;
26785: GO 27297
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26787: LD_ADDR_VAR 0 8
26791: PUSH
26792: LD_INT 81
26794: PUSH
26795: LD_VAR 0 9
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 3
26806: PUSH
26807: LD_INT 21
26809: PUSH
26810: LD_INT 3
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PPUSH
26825: CALL_OW 69
26829: ST_TO_ADDR
// if not tmp then
26830: LD_VAR 0 8
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 27297
// if in_unit then
26839: LD_VAR 0 11
26843: IFFALSE 26867
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26845: LD_ADDR_VAR 0 10
26849: PUSH
26850: LD_VAR 0 8
26854: PPUSH
26855: LD_VAR 0 11
26859: PPUSH
26860: CALL_OW 74
26864: ST_TO_ADDR
26865: GO 26887
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26867: LD_ADDR_VAR 0 10
26871: PUSH
26872: LD_VAR 0 8
26876: PPUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 74
26886: ST_TO_ADDR
// if not enemy then
26887: LD_VAR 0 10
26891: NOT
26892: IFFALSE 26896
// exit ;
26894: GO 27297
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26896: LD_VAR 0 11
26900: PUSH
26901: LD_VAR 0 11
26905: PPUSH
26906: LD_VAR 0 10
26910: PPUSH
26911: CALL_OW 296
26915: PUSH
26916: LD_INT 13
26918: GREATER
26919: AND
26920: PUSH
26921: LD_VAR 0 1
26925: PPUSH
26926: LD_VAR 0 10
26930: PPUSH
26931: CALL_OW 296
26935: PUSH
26936: LD_INT 12
26938: GREATER
26939: OR
26940: IFFALSE 26944
// exit ;
26942: GO 27297
// missile := [ 1 ] ;
26944: LD_ADDR_VAR 0 14
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26955: LD_VAR 0 9
26959: PPUSH
26960: LD_VAR 0 12
26964: PPUSH
26965: CALL_OW 325
26969: IFFALSE 26998
// missile := Replace ( missile , missile + 1 , 2 ) ;
26971: LD_ADDR_VAR 0 14
26975: PUSH
26976: LD_VAR 0 14
26980: PPUSH
26981: LD_VAR 0 14
26985: PUSH
26986: LD_INT 1
26988: PLUS
26989: PPUSH
26990: LD_INT 2
26992: PPUSH
26993: CALL_OW 1
26997: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26998: LD_VAR 0 9
27002: PPUSH
27003: LD_VAR 0 13
27007: PPUSH
27008: CALL_OW 325
27012: PUSH
27013: LD_VAR 0 10
27017: PPUSH
27018: CALL_OW 255
27022: PPUSH
27023: LD_VAR 0 13
27027: PPUSH
27028: CALL_OW 325
27032: NOT
27033: AND
27034: IFFALSE 27063
// missile := Replace ( missile , missile + 1 , 3 ) ;
27036: LD_ADDR_VAR 0 14
27040: PUSH
27041: LD_VAR 0 14
27045: PPUSH
27046: LD_VAR 0 14
27050: PUSH
27051: LD_INT 1
27053: PLUS
27054: PPUSH
27055: LD_INT 3
27057: PPUSH
27058: CALL_OW 1
27062: ST_TO_ADDR
// if missile < 2 then
27063: LD_VAR 0 14
27067: PUSH
27068: LD_INT 2
27070: LESS
27071: IFFALSE 27075
// exit ;
27073: GO 27297
// x := GetX ( enemy ) ;
27075: LD_ADDR_VAR 0 4
27079: PUSH
27080: LD_VAR 0 10
27084: PPUSH
27085: CALL_OW 250
27089: ST_TO_ADDR
// y := GetY ( enemy ) ;
27090: LD_ADDR_VAR 0 5
27094: PUSH
27095: LD_VAR 0 10
27099: PPUSH
27100: CALL_OW 251
27104: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27105: LD_ADDR_VAR 0 6
27109: PUSH
27110: LD_VAR 0 4
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PPUSH
27119: LD_INT 1
27121: PPUSH
27122: CALL_OW 12
27126: PLUS
27127: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27128: LD_ADDR_VAR 0 7
27132: PUSH
27133: LD_VAR 0 5
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PPUSH
27142: LD_INT 1
27144: PPUSH
27145: CALL_OW 12
27149: PLUS
27150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27151: LD_VAR 0 6
27155: PPUSH
27156: LD_VAR 0 7
27160: PPUSH
27161: CALL_OW 488
27165: NOT
27166: IFFALSE 27188
// begin _x := x ;
27168: LD_ADDR_VAR 0 6
27172: PUSH
27173: LD_VAR 0 4
27177: ST_TO_ADDR
// _y := y ;
27178: LD_ADDR_VAR 0 7
27182: PUSH
27183: LD_VAR 0 5
27187: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27188: LD_ADDR_VAR 0 3
27192: PUSH
27193: LD_INT 1
27195: PPUSH
27196: LD_VAR 0 14
27200: PPUSH
27201: CALL_OW 12
27205: ST_TO_ADDR
// case i of 1 :
27206: LD_VAR 0 3
27210: PUSH
27211: LD_INT 1
27213: DOUBLE
27214: EQUAL
27215: IFTRUE 27219
27217: GO 27236
27219: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27220: LD_VAR 0 1
27224: PPUSH
27225: LD_VAR 0 10
27229: PPUSH
27230: CALL_OW 115
27234: GO 27297
27236: LD_INT 2
27238: DOUBLE
27239: EQUAL
27240: IFTRUE 27244
27242: GO 27266
27244: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27245: LD_VAR 0 1
27249: PPUSH
27250: LD_VAR 0 6
27254: PPUSH
27255: LD_VAR 0 7
27259: PPUSH
27260: CALL_OW 153
27264: GO 27297
27266: LD_INT 3
27268: DOUBLE
27269: EQUAL
27270: IFTRUE 27274
27272: GO 27296
27274: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27275: LD_VAR 0 1
27279: PPUSH
27280: LD_VAR 0 6
27284: PPUSH
27285: LD_VAR 0 7
27289: PPUSH
27290: CALL_OW 154
27294: GO 27297
27296: POP
// end ;
27297: LD_VAR 0 2
27301: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27302: LD_INT 0
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
// if not unit or not building then
27310: LD_VAR 0 1
27314: NOT
27315: PUSH
27316: LD_VAR 0 2
27320: NOT
27321: OR
27322: IFFALSE 27326
// exit ;
27324: GO 27484
// x := GetX ( building ) ;
27326: LD_ADDR_VAR 0 5
27330: PUSH
27331: LD_VAR 0 2
27335: PPUSH
27336: CALL_OW 250
27340: ST_TO_ADDR
// y := GetY ( building ) ;
27341: LD_ADDR_VAR 0 6
27345: PUSH
27346: LD_VAR 0 2
27350: PPUSH
27351: CALL_OW 251
27355: ST_TO_ADDR
// for i = 0 to 5 do
27356: LD_ADDR_VAR 0 4
27360: PUSH
27361: DOUBLE
27362: LD_INT 0
27364: DEC
27365: ST_TO_ADDR
27366: LD_INT 5
27368: PUSH
27369: FOR_TO
27370: IFFALSE 27482
// begin _x := ShiftX ( x , i , 3 ) ;
27372: LD_ADDR_VAR 0 7
27376: PUSH
27377: LD_VAR 0 5
27381: PPUSH
27382: LD_VAR 0 4
27386: PPUSH
27387: LD_INT 3
27389: PPUSH
27390: CALL_OW 272
27394: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27395: LD_ADDR_VAR 0 8
27399: PUSH
27400: LD_VAR 0 6
27404: PPUSH
27405: LD_VAR 0 4
27409: PPUSH
27410: LD_INT 3
27412: PPUSH
27413: CALL_OW 273
27417: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27418: LD_VAR 0 7
27422: PPUSH
27423: LD_VAR 0 8
27427: PPUSH
27428: CALL_OW 488
27432: NOT
27433: IFFALSE 27437
// continue ;
27435: GO 27369
// if HexInfo ( _x , _y ) = 0 then
27437: LD_VAR 0 7
27441: PPUSH
27442: LD_VAR 0 8
27446: PPUSH
27447: CALL_OW 428
27451: PUSH
27452: LD_INT 0
27454: EQUAL
27455: IFFALSE 27480
// begin ComMoveXY ( unit , _x , _y ) ;
27457: LD_VAR 0 1
27461: PPUSH
27462: LD_VAR 0 7
27466: PPUSH
27467: LD_VAR 0 8
27471: PPUSH
27472: CALL_OW 111
// exit ;
27476: POP
27477: POP
27478: GO 27484
// end ; end ;
27480: GO 27369
27482: POP
27483: POP
// end ;
27484: LD_VAR 0 3
27488: RET
// export function ScanBase ( side , base_area ) ; begin
27489: LD_INT 0
27491: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27492: LD_ADDR_VAR 0 3
27496: PUSH
27497: LD_VAR 0 2
27501: PPUSH
27502: LD_INT 81
27504: PUSH
27505: LD_VAR 0 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PPUSH
27514: CALL_OW 70
27518: ST_TO_ADDR
// end ;
27519: LD_VAR 0 3
27523: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27524: LD_INT 0
27526: PPUSH
27527: PPUSH
27528: PPUSH
27529: PPUSH
// result := false ;
27530: LD_ADDR_VAR 0 2
27534: PUSH
27535: LD_INT 0
27537: ST_TO_ADDR
// side := GetSide ( unit ) ;
27538: LD_ADDR_VAR 0 3
27542: PUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: CALL_OW 255
27552: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27553: LD_ADDR_VAR 0 4
27557: PUSH
27558: LD_VAR 0 1
27562: PPUSH
27563: CALL_OW 248
27567: ST_TO_ADDR
// case nat of 1 :
27568: LD_VAR 0 4
27572: PUSH
27573: LD_INT 1
27575: DOUBLE
27576: EQUAL
27577: IFTRUE 27581
27579: GO 27592
27581: POP
// tech := tech_lassight ; 2 :
27582: LD_ADDR_VAR 0 5
27586: PUSH
27587: LD_INT 12
27589: ST_TO_ADDR
27590: GO 27631
27592: LD_INT 2
27594: DOUBLE
27595: EQUAL
27596: IFTRUE 27600
27598: GO 27611
27600: POP
// tech := tech_mortar ; 3 :
27601: LD_ADDR_VAR 0 5
27605: PUSH
27606: LD_INT 41
27608: ST_TO_ADDR
27609: GO 27631
27611: LD_INT 3
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27619
27617: GO 27630
27619: POP
// tech := tech_bazooka ; end ;
27620: LD_ADDR_VAR 0 5
27624: PUSH
27625: LD_INT 44
27627: ST_TO_ADDR
27628: GO 27631
27630: POP
// if Researched ( side , tech ) then
27631: LD_VAR 0 3
27635: PPUSH
27636: LD_VAR 0 5
27640: PPUSH
27641: CALL_OW 325
27645: IFFALSE 27672
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27647: LD_ADDR_VAR 0 2
27651: PUSH
27652: LD_INT 5
27654: PUSH
27655: LD_INT 8
27657: PUSH
27658: LD_INT 9
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: PUSH
27666: LD_VAR 0 4
27670: ARRAY
27671: ST_TO_ADDR
// end ;
27672: LD_VAR 0 2
27676: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
27681: PPUSH
// if not mines then
27682: LD_VAR 0 2
27686: NOT
27687: IFFALSE 27691
// exit ;
27689: GO 27835
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27691: LD_ADDR_VAR 0 5
27695: PUSH
27696: LD_INT 81
27698: PUSH
27699: LD_VAR 0 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 3
27710: PUSH
27711: LD_INT 21
27713: PUSH
27714: LD_INT 3
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PPUSH
27729: CALL_OW 69
27733: ST_TO_ADDR
// for i in mines do
27734: LD_ADDR_VAR 0 4
27738: PUSH
27739: LD_VAR 0 2
27743: PUSH
27744: FOR_IN
27745: IFFALSE 27833
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27747: LD_VAR 0 4
27751: PUSH
27752: LD_INT 1
27754: ARRAY
27755: PPUSH
27756: LD_VAR 0 4
27760: PUSH
27761: LD_INT 2
27763: ARRAY
27764: PPUSH
27765: CALL_OW 458
27769: NOT
27770: IFFALSE 27774
// continue ;
27772: GO 27744
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27774: LD_VAR 0 4
27778: PUSH
27779: LD_INT 1
27781: ARRAY
27782: PPUSH
27783: LD_VAR 0 4
27787: PUSH
27788: LD_INT 2
27790: ARRAY
27791: PPUSH
27792: CALL_OW 428
27796: PUSH
27797: LD_VAR 0 5
27801: IN
27802: IFFALSE 27831
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27804: LD_VAR 0 4
27808: PUSH
27809: LD_INT 1
27811: ARRAY
27812: PPUSH
27813: LD_VAR 0 4
27817: PUSH
27818: LD_INT 2
27820: ARRAY
27821: PPUSH
27822: LD_VAR 0 1
27826: PPUSH
27827: CALL_OW 456
// end ;
27831: GO 27744
27833: POP
27834: POP
// end ;
27835: LD_VAR 0 3
27839: RET
// export function Count ( array ) ; var i ; begin
27840: LD_INT 0
27842: PPUSH
27843: PPUSH
// result := 0 ;
27844: LD_ADDR_VAR 0 2
27848: PUSH
27849: LD_INT 0
27851: ST_TO_ADDR
// for i in array do
27852: LD_ADDR_VAR 0 3
27856: PUSH
27857: LD_VAR 0 1
27861: PUSH
27862: FOR_IN
27863: IFFALSE 27887
// if i then
27865: LD_VAR 0 3
27869: IFFALSE 27885
// result := result + 1 ;
27871: LD_ADDR_VAR 0 2
27875: PUSH
27876: LD_VAR 0 2
27880: PUSH
27881: LD_INT 1
27883: PLUS
27884: ST_TO_ADDR
27885: GO 27862
27887: POP
27888: POP
// end ;
27889: LD_VAR 0 2
27893: RET
// export function IsEmpty ( building ) ; begin
27894: LD_INT 0
27896: PPUSH
// if not building then
27897: LD_VAR 0 1
27901: NOT
27902: IFFALSE 27906
// exit ;
27904: GO 27949
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27906: LD_ADDR_VAR 0 2
27910: PUSH
27911: LD_VAR 0 1
27915: PUSH
27916: LD_INT 22
27918: PUSH
27919: LD_VAR 0 1
27923: PPUSH
27924: CALL_OW 255
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 58
27935: PUSH
27936: EMPTY
27937: LIST
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PPUSH
27943: CALL_OW 69
27947: IN
27948: ST_TO_ADDR
// end ;
27949: LD_VAR 0 2
27953: RET
// export function IsNotFull ( building ) ; var places ; begin
27954: LD_INT 0
27956: PPUSH
27957: PPUSH
// if not building then
27958: LD_VAR 0 1
27962: NOT
27963: IFFALSE 27967
// exit ;
27965: GO 28138
// result := false ;
27967: LD_ADDR_VAR 0 2
27971: PUSH
27972: LD_INT 0
27974: ST_TO_ADDR
// places := 0 ;
27975: LD_ADDR_VAR 0 3
27979: PUSH
27980: LD_INT 0
27982: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27983: LD_VAR 0 1
27987: PPUSH
27988: CALL_OW 266
27992: PUSH
27993: LD_INT 0
27995: DOUBLE
27996: EQUAL
27997: IFTRUE 28055
27999: LD_INT 1
28001: DOUBLE
28002: EQUAL
28003: IFTRUE 28055
28005: LD_INT 6
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28055
28011: LD_INT 7
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28055
28017: LD_INT 8
28019: DOUBLE
28020: EQUAL
28021: IFTRUE 28055
28023: LD_INT 4
28025: DOUBLE
28026: EQUAL
28027: IFTRUE 28055
28029: LD_INT 5
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28055
28035: LD_INT 2
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28055
28041: LD_INT 3
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28055
28047: LD_INT 35
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28055
28053: GO 28066
28055: POP
// places := 6 ; b_bunker , b_breastwork :
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_INT 6
28063: ST_TO_ADDR
28064: GO 28111
28066: LD_INT 32
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28080
28072: LD_INT 31
28074: DOUBLE
28075: EQUAL
28076: IFTRUE 28080
28078: GO 28091
28080: POP
// places := 1 ; b_control_tower :
28081: LD_ADDR_VAR 0 3
28085: PUSH
28086: LD_INT 1
28088: ST_TO_ADDR
28089: GO 28111
28091: LD_INT 36
28093: DOUBLE
28094: EQUAL
28095: IFTRUE 28099
28097: GO 28110
28099: POP
// places := 3 ; end ;
28100: LD_ADDR_VAR 0 3
28104: PUSH
28105: LD_INT 3
28107: ST_TO_ADDR
28108: GO 28111
28110: POP
// if places then
28111: LD_VAR 0 3
28115: IFFALSE 28138
// result := UnitsInside ( building ) < places ;
28117: LD_ADDR_VAR 0 2
28121: PUSH
28122: LD_VAR 0 1
28126: PPUSH
28127: CALL_OW 313
28131: PUSH
28132: LD_VAR 0 3
28136: LESS
28137: ST_TO_ADDR
// end ;
28138: LD_VAR 0 2
28142: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28143: LD_INT 0
28145: PPUSH
28146: PPUSH
28147: PPUSH
28148: PPUSH
// tmp := [ ] ;
28149: LD_ADDR_VAR 0 3
28153: PUSH
28154: EMPTY
28155: ST_TO_ADDR
// list := [ ] ;
28156: LD_ADDR_VAR 0 5
28160: PUSH
28161: EMPTY
28162: ST_TO_ADDR
// for i = 16 to 25 do
28163: LD_ADDR_VAR 0 4
28167: PUSH
28168: DOUBLE
28169: LD_INT 16
28171: DEC
28172: ST_TO_ADDR
28173: LD_INT 25
28175: PUSH
28176: FOR_TO
28177: IFFALSE 28250
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: LD_VAR 0 3
28188: PUSH
28189: LD_INT 22
28191: PUSH
28192: LD_VAR 0 1
28196: PPUSH
28197: CALL_OW 255
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 91
28208: PUSH
28209: LD_VAR 0 1
28213: PUSH
28214: LD_INT 6
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 30
28224: PUSH
28225: LD_VAR 0 4
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: PPUSH
28242: CALL_OW 69
28246: ADD
28247: ST_TO_ADDR
28248: GO 28176
28250: POP
28251: POP
// for i = 1 to tmp do
28252: LD_ADDR_VAR 0 4
28256: PUSH
28257: DOUBLE
28258: LD_INT 1
28260: DEC
28261: ST_TO_ADDR
28262: LD_VAR 0 3
28266: PUSH
28267: FOR_TO
28268: IFFALSE 28356
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28270: LD_ADDR_VAR 0 5
28274: PUSH
28275: LD_VAR 0 5
28279: PUSH
28280: LD_VAR 0 3
28284: PUSH
28285: LD_VAR 0 4
28289: ARRAY
28290: PPUSH
28291: CALL_OW 266
28295: PUSH
28296: LD_VAR 0 3
28300: PUSH
28301: LD_VAR 0 4
28305: ARRAY
28306: PPUSH
28307: CALL_OW 250
28311: PUSH
28312: LD_VAR 0 3
28316: PUSH
28317: LD_VAR 0 4
28321: ARRAY
28322: PPUSH
28323: CALL_OW 251
28327: PUSH
28328: LD_VAR 0 3
28332: PUSH
28333: LD_VAR 0 4
28337: ARRAY
28338: PPUSH
28339: CALL_OW 254
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: ADD
28353: ST_TO_ADDR
28354: GO 28267
28356: POP
28357: POP
// result := list ;
28358: LD_ADDR_VAR 0 2
28362: PUSH
28363: LD_VAR 0 5
28367: ST_TO_ADDR
// end ;
28368: LD_VAR 0 2
28372: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28373: LD_INT 0
28375: PPUSH
28376: PPUSH
28377: PPUSH
28378: PPUSH
28379: PPUSH
28380: PPUSH
28381: PPUSH
// if not factory then
28382: LD_VAR 0 1
28386: NOT
28387: IFFALSE 28391
// exit ;
28389: GO 28984
// if control = control_apeman then
28391: LD_VAR 0 4
28395: PUSH
28396: LD_INT 5
28398: EQUAL
28399: IFFALSE 28508
// begin tmp := UnitsInside ( factory ) ;
28401: LD_ADDR_VAR 0 8
28405: PUSH
28406: LD_VAR 0 1
28410: PPUSH
28411: CALL_OW 313
28415: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28416: LD_VAR 0 8
28420: PPUSH
28421: LD_INT 25
28423: PUSH
28424: LD_INT 12
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PPUSH
28431: CALL_OW 72
28435: NOT
28436: IFFALSE 28446
// control := control_manual ;
28438: LD_ADDR_VAR 0 4
28442: PUSH
28443: LD_INT 1
28445: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28446: LD_ADDR_VAR 0 8
28450: PUSH
28451: LD_VAR 0 1
28455: PPUSH
28456: CALL 28143 0 1
28460: ST_TO_ADDR
// if tmp then
28461: LD_VAR 0 8
28465: IFFALSE 28508
// begin for i in tmp do
28467: LD_ADDR_VAR 0 7
28471: PUSH
28472: LD_VAR 0 8
28476: PUSH
28477: FOR_IN
28478: IFFALSE 28506
// if i [ 1 ] = b_ext_radio then
28480: LD_VAR 0 7
28484: PUSH
28485: LD_INT 1
28487: ARRAY
28488: PUSH
28489: LD_INT 22
28491: EQUAL
28492: IFFALSE 28504
// begin control := control_remote ;
28494: LD_ADDR_VAR 0 4
28498: PUSH
28499: LD_INT 2
28501: ST_TO_ADDR
// break ;
28502: GO 28506
// end ;
28504: GO 28477
28506: POP
28507: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28508: LD_VAR 0 1
28512: PPUSH
28513: LD_VAR 0 2
28517: PPUSH
28518: LD_VAR 0 3
28522: PPUSH
28523: LD_VAR 0 4
28527: PPUSH
28528: LD_VAR 0 5
28532: PPUSH
28533: CALL_OW 448
28537: IFFALSE 28572
// begin result := [ chassis , engine , control , weapon ] ;
28539: LD_ADDR_VAR 0 6
28543: PUSH
28544: LD_VAR 0 2
28548: PUSH
28549: LD_VAR 0 3
28553: PUSH
28554: LD_VAR 0 4
28558: PUSH
28559: LD_VAR 0 5
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: ST_TO_ADDR
// exit ;
28570: GO 28984
// end ; _chassis := AvailableChassisList ( factory ) ;
28572: LD_ADDR_VAR 0 9
28576: PUSH
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL_OW 475
28586: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28587: LD_ADDR_VAR 0 11
28591: PUSH
28592: LD_VAR 0 1
28596: PPUSH
28597: CALL_OW 476
28601: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28602: LD_ADDR_VAR 0 12
28606: PUSH
28607: LD_VAR 0 1
28611: PPUSH
28612: CALL_OW 477
28616: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28617: LD_ADDR_VAR 0 10
28621: PUSH
28622: LD_VAR 0 1
28626: PPUSH
28627: CALL_OW 478
28631: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28632: LD_VAR 0 9
28636: NOT
28637: PUSH
28638: LD_VAR 0 11
28642: NOT
28643: OR
28644: PUSH
28645: LD_VAR 0 12
28649: NOT
28650: OR
28651: PUSH
28652: LD_VAR 0 10
28656: NOT
28657: OR
28658: IFFALSE 28693
// begin result := [ chassis , engine , control , weapon ] ;
28660: LD_ADDR_VAR 0 6
28664: PUSH
28665: LD_VAR 0 2
28669: PUSH
28670: LD_VAR 0 3
28674: PUSH
28675: LD_VAR 0 4
28679: PUSH
28680: LD_VAR 0 5
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// exit ;
28691: GO 28984
// end ; if not chassis in _chassis then
28693: LD_VAR 0 2
28697: PUSH
28698: LD_VAR 0 9
28702: IN
28703: NOT
28704: IFFALSE 28730
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28706: LD_ADDR_VAR 0 2
28710: PUSH
28711: LD_VAR 0 9
28715: PUSH
28716: LD_INT 1
28718: PPUSH
28719: LD_VAR 0 9
28723: PPUSH
28724: CALL_OW 12
28728: ARRAY
28729: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28730: LD_VAR 0 2
28734: PPUSH
28735: LD_VAR 0 3
28739: PPUSH
28740: CALL 28989 0 2
28744: NOT
28745: IFFALSE 28804
// repeat engine := _engine [ 1 ] ;
28747: LD_ADDR_VAR 0 3
28751: PUSH
28752: LD_VAR 0 11
28756: PUSH
28757: LD_INT 1
28759: ARRAY
28760: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28761: LD_ADDR_VAR 0 11
28765: PUSH
28766: LD_VAR 0 11
28770: PPUSH
28771: LD_INT 1
28773: PPUSH
28774: CALL_OW 3
28778: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28779: LD_VAR 0 2
28783: PPUSH
28784: LD_VAR 0 3
28788: PPUSH
28789: CALL 28989 0 2
28793: PUSH
28794: LD_VAR 0 11
28798: PUSH
28799: EMPTY
28800: EQUAL
28801: OR
28802: IFFALSE 28747
// if not control in _control then
28804: LD_VAR 0 4
28808: PUSH
28809: LD_VAR 0 12
28813: IN
28814: NOT
28815: IFFALSE 28841
// control := _control [ rand ( 1 , _control ) ] ;
28817: LD_ADDR_VAR 0 4
28821: PUSH
28822: LD_VAR 0 12
28826: PUSH
28827: LD_INT 1
28829: PPUSH
28830: LD_VAR 0 12
28834: PPUSH
28835: CALL_OW 12
28839: ARRAY
28840: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28841: LD_VAR 0 2
28845: PPUSH
28846: LD_VAR 0 5
28850: PPUSH
28851: CALL 29209 0 2
28855: NOT
28856: IFFALSE 28915
// repeat weapon := _weapon [ 1 ] ;
28858: LD_ADDR_VAR 0 5
28862: PUSH
28863: LD_VAR 0 10
28867: PUSH
28868: LD_INT 1
28870: ARRAY
28871: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28872: LD_ADDR_VAR 0 10
28876: PUSH
28877: LD_VAR 0 10
28881: PPUSH
28882: LD_INT 1
28884: PPUSH
28885: CALL_OW 3
28889: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28890: LD_VAR 0 2
28894: PPUSH
28895: LD_VAR 0 5
28899: PPUSH
28900: CALL 29209 0 2
28904: PUSH
28905: LD_VAR 0 10
28909: PUSH
28910: EMPTY
28911: EQUAL
28912: OR
28913: IFFALSE 28858
// result := [ ] ;
28915: LD_ADDR_VAR 0 6
28919: PUSH
28920: EMPTY
28921: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28922: LD_VAR 0 1
28926: PPUSH
28927: LD_VAR 0 2
28931: PPUSH
28932: LD_VAR 0 3
28936: PPUSH
28937: LD_VAR 0 4
28941: PPUSH
28942: LD_VAR 0 5
28946: PPUSH
28947: CALL_OW 448
28951: IFFALSE 28984
// result := [ chassis , engine , control , weapon ] ;
28953: LD_ADDR_VAR 0 6
28957: PUSH
28958: LD_VAR 0 2
28962: PUSH
28963: LD_VAR 0 3
28967: PUSH
28968: LD_VAR 0 4
28972: PUSH
28973: LD_VAR 0 5
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
// end ;
28984: LD_VAR 0 6
28988: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28989: LD_INT 0
28991: PPUSH
// if not chassis or not engine then
28992: LD_VAR 0 1
28996: NOT
28997: PUSH
28998: LD_VAR 0 2
29002: NOT
29003: OR
29004: IFFALSE 29008
// exit ;
29006: GO 29204
// case engine of engine_solar :
29008: LD_VAR 0 2
29012: PUSH
29013: LD_INT 2
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29059
29021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: LD_INT 11
29029: PUSH
29030: LD_INT 12
29032: PUSH
29033: LD_INT 13
29035: PUSH
29036: LD_INT 14
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: ST_TO_ADDR
29057: GO 29188
29059: LD_INT 1
29061: DOUBLE
29062: EQUAL
29063: IFTRUE 29067
29065: GO 29129
29067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29068: LD_ADDR_VAR 0 3
29072: PUSH
29073: LD_INT 11
29075: PUSH
29076: LD_INT 12
29078: PUSH
29079: LD_INT 13
29081: PUSH
29082: LD_INT 14
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: LD_INT 2
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: LD_INT 4
29096: PUSH
29097: LD_INT 5
29099: PUSH
29100: LD_INT 21
29102: PUSH
29103: LD_INT 23
29105: PUSH
29106: LD_INT 22
29108: PUSH
29109: LD_INT 24
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: ST_TO_ADDR
29127: GO 29188
29129: LD_INT 3
29131: DOUBLE
29132: EQUAL
29133: IFTRUE 29137
29135: GO 29187
29137: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29138: LD_ADDR_VAR 0 3
29142: PUSH
29143: LD_INT 13
29145: PUSH
29146: LD_INT 14
29148: PUSH
29149: LD_INT 2
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: LD_INT 4
29157: PUSH
29158: LD_INT 5
29160: PUSH
29161: LD_INT 21
29163: PUSH
29164: LD_INT 22
29166: PUSH
29167: LD_INT 23
29169: PUSH
29170: LD_INT 24
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: ST_TO_ADDR
29185: GO 29188
29187: POP
// result := ( chassis in result ) ;
29188: LD_ADDR_VAR 0 3
29192: PUSH
29193: LD_VAR 0 1
29197: PUSH
29198: LD_VAR 0 3
29202: IN
29203: ST_TO_ADDR
// end ;
29204: LD_VAR 0 3
29208: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29209: LD_INT 0
29211: PPUSH
// if not chassis or not weapon then
29212: LD_VAR 0 1
29216: NOT
29217: PUSH
29218: LD_VAR 0 2
29222: NOT
29223: OR
29224: IFFALSE 29228
// exit ;
29226: GO 30288
// case weapon of us_machine_gun :
29228: LD_VAR 0 2
29232: PUSH
29233: LD_INT 2
29235: DOUBLE
29236: EQUAL
29237: IFTRUE 29241
29239: GO 29271
29241: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: LD_INT 3
29255: PUSH
29256: LD_INT 4
29258: PUSH
29259: LD_INT 5
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: ST_TO_ADDR
29269: GO 30272
29271: LD_INT 3
29273: DOUBLE
29274: EQUAL
29275: IFTRUE 29279
29277: GO 29309
29279: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29280: LD_ADDR_VAR 0 3
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: LD_INT 3
29293: PUSH
29294: LD_INT 4
29296: PUSH
29297: LD_INT 5
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: ST_TO_ADDR
29307: GO 30272
29309: LD_INT 11
29311: DOUBLE
29312: EQUAL
29313: IFTRUE 29317
29315: GO 29347
29317: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29318: LD_ADDR_VAR 0 3
29322: PUSH
29323: LD_INT 1
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: LD_INT 3
29331: PUSH
29332: LD_INT 4
29334: PUSH
29335: LD_INT 5
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: ST_TO_ADDR
29345: GO 30272
29347: LD_INT 4
29349: DOUBLE
29350: EQUAL
29351: IFTRUE 29355
29353: GO 29381
29355: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29356: LD_ADDR_VAR 0 3
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: LD_INT 3
29366: PUSH
29367: LD_INT 4
29369: PUSH
29370: LD_INT 5
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: ST_TO_ADDR
29379: GO 30272
29381: LD_INT 5
29383: DOUBLE
29384: EQUAL
29385: IFTRUE 29389
29387: GO 29415
29389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29390: LD_ADDR_VAR 0 3
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: LD_INT 4
29403: PUSH
29404: LD_INT 5
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: ST_TO_ADDR
29413: GO 30272
29415: LD_INT 9
29417: DOUBLE
29418: EQUAL
29419: IFTRUE 29423
29421: GO 29449
29423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: LD_INT 3
29434: PUSH
29435: LD_INT 4
29437: PUSH
29438: LD_INT 5
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: ST_TO_ADDR
29447: GO 30272
29449: LD_INT 7
29451: DOUBLE
29452: EQUAL
29453: IFTRUE 29457
29455: GO 29483
29457: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29458: LD_ADDR_VAR 0 3
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 3
29468: PUSH
29469: LD_INT 4
29471: PUSH
29472: LD_INT 5
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: ST_TO_ADDR
29481: GO 30272
29483: LD_INT 12
29485: DOUBLE
29486: EQUAL
29487: IFTRUE 29491
29489: GO 29517
29491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29492: LD_ADDR_VAR 0 3
29496: PUSH
29497: LD_INT 2
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: LD_INT 4
29505: PUSH
29506: LD_INT 5
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
29515: GO 30272
29517: LD_INT 13
29519: DOUBLE
29520: EQUAL
29521: IFTRUE 29525
29523: GO 29551
29525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29526: LD_ADDR_VAR 0 3
29530: PUSH
29531: LD_INT 2
29533: PUSH
29534: LD_INT 3
29536: PUSH
29537: LD_INT 4
29539: PUSH
29540: LD_INT 5
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
29549: GO 30272
29551: LD_INT 14
29553: DOUBLE
29554: EQUAL
29555: IFTRUE 29559
29557: GO 29577
29559: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29560: LD_ADDR_VAR 0 3
29564: PUSH
29565: LD_INT 4
29567: PUSH
29568: LD_INT 5
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: ST_TO_ADDR
29575: GO 30272
29577: LD_INT 6
29579: DOUBLE
29580: EQUAL
29581: IFTRUE 29585
29583: GO 29603
29585: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29586: LD_ADDR_VAR 0 3
29590: PUSH
29591: LD_INT 4
29593: PUSH
29594: LD_INT 5
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: ST_TO_ADDR
29601: GO 30272
29603: LD_INT 10
29605: DOUBLE
29606: EQUAL
29607: IFTRUE 29611
29609: GO 29629
29611: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29612: LD_ADDR_VAR 0 3
29616: PUSH
29617: LD_INT 4
29619: PUSH
29620: LD_INT 5
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: ST_TO_ADDR
29627: GO 30272
29629: LD_INT 22
29631: DOUBLE
29632: EQUAL
29633: IFTRUE 29637
29635: GO 29663
29637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29638: LD_ADDR_VAR 0 3
29642: PUSH
29643: LD_INT 11
29645: PUSH
29646: LD_INT 12
29648: PUSH
29649: LD_INT 13
29651: PUSH
29652: LD_INT 14
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: ST_TO_ADDR
29661: GO 30272
29663: LD_INT 23
29665: DOUBLE
29666: EQUAL
29667: IFTRUE 29671
29669: GO 29697
29671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29672: LD_ADDR_VAR 0 3
29676: PUSH
29677: LD_INT 11
29679: PUSH
29680: LD_INT 12
29682: PUSH
29683: LD_INT 13
29685: PUSH
29686: LD_INT 14
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: ST_TO_ADDR
29695: GO 30272
29697: LD_INT 24
29699: DOUBLE
29700: EQUAL
29701: IFTRUE 29705
29703: GO 29731
29705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29706: LD_ADDR_VAR 0 3
29710: PUSH
29711: LD_INT 11
29713: PUSH
29714: LD_INT 12
29716: PUSH
29717: LD_INT 13
29719: PUSH
29720: LD_INT 14
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: ST_TO_ADDR
29729: GO 30272
29731: LD_INT 30
29733: DOUBLE
29734: EQUAL
29735: IFTRUE 29739
29737: GO 29765
29739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_INT 11
29747: PUSH
29748: LD_INT 12
29750: PUSH
29751: LD_INT 13
29753: PUSH
29754: LD_INT 14
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: ST_TO_ADDR
29763: GO 30272
29765: LD_INT 25
29767: DOUBLE
29768: EQUAL
29769: IFTRUE 29773
29771: GO 29791
29773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29774: LD_ADDR_VAR 0 3
29778: PUSH
29779: LD_INT 13
29781: PUSH
29782: LD_INT 14
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: ST_TO_ADDR
29789: GO 30272
29791: LD_INT 27
29793: DOUBLE
29794: EQUAL
29795: IFTRUE 29799
29797: GO 29817
29799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29800: LD_ADDR_VAR 0 3
29804: PUSH
29805: LD_INT 13
29807: PUSH
29808: LD_INT 14
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: ST_TO_ADDR
29815: GO 30272
29817: LD_INT 92
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 29851
29825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29826: LD_ADDR_VAR 0 3
29830: PUSH
29831: LD_INT 11
29833: PUSH
29834: LD_INT 12
29836: PUSH
29837: LD_INT 13
29839: PUSH
29840: LD_INT 14
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
29849: GO 30272
29851: LD_INT 28
29853: DOUBLE
29854: EQUAL
29855: IFTRUE 29859
29857: GO 29877
29859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29860: LD_ADDR_VAR 0 3
29864: PUSH
29865: LD_INT 13
29867: PUSH
29868: LD_INT 14
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: ST_TO_ADDR
29875: GO 30272
29877: LD_INT 29
29879: DOUBLE
29880: EQUAL
29881: IFTRUE 29885
29883: GO 29903
29885: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29886: LD_ADDR_VAR 0 3
29890: PUSH
29891: LD_INT 13
29893: PUSH
29894: LD_INT 14
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: ST_TO_ADDR
29901: GO 30272
29903: LD_INT 31
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29929
29911: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: LD_INT 13
29919: PUSH
29920: LD_INT 14
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: ST_TO_ADDR
29927: GO 30272
29929: LD_INT 26
29931: DOUBLE
29932: EQUAL
29933: IFTRUE 29937
29935: GO 29955
29937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29938: LD_ADDR_VAR 0 3
29942: PUSH
29943: LD_INT 13
29945: PUSH
29946: LD_INT 14
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: ST_TO_ADDR
29953: GO 30272
29955: LD_INT 42
29957: DOUBLE
29958: EQUAL
29959: IFTRUE 29963
29961: GO 29989
29963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29964: LD_ADDR_VAR 0 3
29968: PUSH
29969: LD_INT 21
29971: PUSH
29972: LD_INT 22
29974: PUSH
29975: LD_INT 23
29977: PUSH
29978: LD_INT 24
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: ST_TO_ADDR
29987: GO 30272
29989: LD_INT 43
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 30023
29997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29998: LD_ADDR_VAR 0 3
30002: PUSH
30003: LD_INT 21
30005: PUSH
30006: LD_INT 22
30008: PUSH
30009: LD_INT 23
30011: PUSH
30012: LD_INT 24
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: ST_TO_ADDR
30021: GO 30272
30023: LD_INT 44
30025: DOUBLE
30026: EQUAL
30027: IFTRUE 30031
30029: GO 30057
30031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30032: LD_ADDR_VAR 0 3
30036: PUSH
30037: LD_INT 21
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_INT 23
30045: PUSH
30046: LD_INT 24
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
30055: GO 30272
30057: LD_INT 45
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30091
30065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30066: LD_ADDR_VAR 0 3
30070: PUSH
30071: LD_INT 21
30073: PUSH
30074: LD_INT 22
30076: PUSH
30077: LD_INT 23
30079: PUSH
30080: LD_INT 24
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
30089: GO 30272
30091: LD_INT 49
30093: DOUBLE
30094: EQUAL
30095: IFTRUE 30099
30097: GO 30125
30099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: LD_INT 21
30107: PUSH
30108: LD_INT 22
30110: PUSH
30111: LD_INT 23
30113: PUSH
30114: LD_INT 24
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
30123: GO 30272
30125: LD_INT 51
30127: DOUBLE
30128: EQUAL
30129: IFTRUE 30133
30131: GO 30159
30133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30134: LD_ADDR_VAR 0 3
30138: PUSH
30139: LD_INT 21
30141: PUSH
30142: LD_INT 22
30144: PUSH
30145: LD_INT 23
30147: PUSH
30148: LD_INT 24
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
30157: GO 30272
30159: LD_INT 52
30161: DOUBLE
30162: EQUAL
30163: IFTRUE 30167
30165: GO 30193
30167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30168: LD_ADDR_VAR 0 3
30172: PUSH
30173: LD_INT 21
30175: PUSH
30176: LD_INT 22
30178: PUSH
30179: LD_INT 23
30181: PUSH
30182: LD_INT 24
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: ST_TO_ADDR
30191: GO 30272
30193: LD_INT 53
30195: DOUBLE
30196: EQUAL
30197: IFTRUE 30201
30199: GO 30219
30201: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30202: LD_ADDR_VAR 0 3
30206: PUSH
30207: LD_INT 23
30209: PUSH
30210: LD_INT 24
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: ST_TO_ADDR
30217: GO 30272
30219: LD_INT 46
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30227
30225: GO 30245
30227: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30228: LD_ADDR_VAR 0 3
30232: PUSH
30233: LD_INT 23
30235: PUSH
30236: LD_INT 24
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: ST_TO_ADDR
30243: GO 30272
30245: LD_INT 47
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30271
30253: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30254: LD_ADDR_VAR 0 3
30258: PUSH
30259: LD_INT 23
30261: PUSH
30262: LD_INT 24
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: ST_TO_ADDR
30269: GO 30272
30271: POP
// result := ( chassis in result ) ;
30272: LD_ADDR_VAR 0 3
30276: PUSH
30277: LD_VAR 0 1
30281: PUSH
30282: LD_VAR 0 3
30286: IN
30287: ST_TO_ADDR
// end ;
30288: LD_VAR 0 3
30292: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30293: LD_INT 0
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
// result := array ;
30302: LD_ADDR_VAR 0 5
30306: PUSH
30307: LD_VAR 0 1
30311: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30312: LD_VAR 0 1
30316: NOT
30317: PUSH
30318: LD_VAR 0 2
30322: NOT
30323: OR
30324: PUSH
30325: LD_VAR 0 3
30329: NOT
30330: OR
30331: PUSH
30332: LD_VAR 0 2
30336: PUSH
30337: LD_VAR 0 1
30341: GREATER
30342: OR
30343: PUSH
30344: LD_VAR 0 3
30348: PUSH
30349: LD_VAR 0 1
30353: GREATER
30354: OR
30355: IFFALSE 30359
// exit ;
30357: GO 30655
// if direction then
30359: LD_VAR 0 4
30363: IFFALSE 30427
// begin d := 1 ;
30365: LD_ADDR_VAR 0 9
30369: PUSH
30370: LD_INT 1
30372: ST_TO_ADDR
// if i_from > i_to then
30373: LD_VAR 0 2
30377: PUSH
30378: LD_VAR 0 3
30382: GREATER
30383: IFFALSE 30409
// length := ( array - i_from ) + i_to else
30385: LD_ADDR_VAR 0 11
30389: PUSH
30390: LD_VAR 0 1
30394: PUSH
30395: LD_VAR 0 2
30399: MINUS
30400: PUSH
30401: LD_VAR 0 3
30405: PLUS
30406: ST_TO_ADDR
30407: GO 30425
// length := i_to - i_from ;
30409: LD_ADDR_VAR 0 11
30413: PUSH
30414: LD_VAR 0 3
30418: PUSH
30419: LD_VAR 0 2
30423: MINUS
30424: ST_TO_ADDR
// end else
30425: GO 30488
// begin d := - 1 ;
30427: LD_ADDR_VAR 0 9
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: ST_TO_ADDR
// if i_from > i_to then
30436: LD_VAR 0 2
30440: PUSH
30441: LD_VAR 0 3
30445: GREATER
30446: IFFALSE 30466
// length := i_from - i_to else
30448: LD_ADDR_VAR 0 11
30452: PUSH
30453: LD_VAR 0 2
30457: PUSH
30458: LD_VAR 0 3
30462: MINUS
30463: ST_TO_ADDR
30464: GO 30488
// length := ( array - i_to ) + i_from ;
30466: LD_ADDR_VAR 0 11
30470: PUSH
30471: LD_VAR 0 1
30475: PUSH
30476: LD_VAR 0 3
30480: MINUS
30481: PUSH
30482: LD_VAR 0 2
30486: PLUS
30487: ST_TO_ADDR
// end ; if not length then
30488: LD_VAR 0 11
30492: NOT
30493: IFFALSE 30497
// exit ;
30495: GO 30655
// tmp := array ;
30497: LD_ADDR_VAR 0 10
30501: PUSH
30502: LD_VAR 0 1
30506: ST_TO_ADDR
// for i = 1 to length do
30507: LD_ADDR_VAR 0 6
30511: PUSH
30512: DOUBLE
30513: LD_INT 1
30515: DEC
30516: ST_TO_ADDR
30517: LD_VAR 0 11
30521: PUSH
30522: FOR_TO
30523: IFFALSE 30643
// begin for j = 1 to array do
30525: LD_ADDR_VAR 0 7
30529: PUSH
30530: DOUBLE
30531: LD_INT 1
30533: DEC
30534: ST_TO_ADDR
30535: LD_VAR 0 1
30539: PUSH
30540: FOR_TO
30541: IFFALSE 30629
// begin k := j + d ;
30543: LD_ADDR_VAR 0 8
30547: PUSH
30548: LD_VAR 0 7
30552: PUSH
30553: LD_VAR 0 9
30557: PLUS
30558: ST_TO_ADDR
// if k > array then
30559: LD_VAR 0 8
30563: PUSH
30564: LD_VAR 0 1
30568: GREATER
30569: IFFALSE 30579
// k := 1 ;
30571: LD_ADDR_VAR 0 8
30575: PUSH
30576: LD_INT 1
30578: ST_TO_ADDR
// if not k then
30579: LD_VAR 0 8
30583: NOT
30584: IFFALSE 30596
// k := array ;
30586: LD_ADDR_VAR 0 8
30590: PUSH
30591: LD_VAR 0 1
30595: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30596: LD_ADDR_VAR 0 10
30600: PUSH
30601: LD_VAR 0 10
30605: PPUSH
30606: LD_VAR 0 8
30610: PPUSH
30611: LD_VAR 0 1
30615: PUSH
30616: LD_VAR 0 7
30620: ARRAY
30621: PPUSH
30622: CALL_OW 1
30626: ST_TO_ADDR
// end ;
30627: GO 30540
30629: POP
30630: POP
// array := tmp ;
30631: LD_ADDR_VAR 0 1
30635: PUSH
30636: LD_VAR 0 10
30640: ST_TO_ADDR
// end ;
30641: GO 30522
30643: POP
30644: POP
// result := array ;
30645: LD_ADDR_VAR 0 5
30649: PUSH
30650: LD_VAR 0 1
30654: ST_TO_ADDR
// end ;
30655: LD_VAR 0 5
30659: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30660: LD_INT 0
30662: PPUSH
30663: PPUSH
// result := 0 ;
30664: LD_ADDR_VAR 0 3
30668: PUSH
30669: LD_INT 0
30671: ST_TO_ADDR
// if not array or not value in array then
30672: LD_VAR 0 1
30676: NOT
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_VAR 0 1
30687: IN
30688: NOT
30689: OR
30690: IFFALSE 30694
// exit ;
30692: GO 30748
// for i = 1 to array do
30694: LD_ADDR_VAR 0 4
30698: PUSH
30699: DOUBLE
30700: LD_INT 1
30702: DEC
30703: ST_TO_ADDR
30704: LD_VAR 0 1
30708: PUSH
30709: FOR_TO
30710: IFFALSE 30746
// if value = array [ i ] then
30712: LD_VAR 0 2
30716: PUSH
30717: LD_VAR 0 1
30721: PUSH
30722: LD_VAR 0 4
30726: ARRAY
30727: EQUAL
30728: IFFALSE 30744
// begin result := i ;
30730: LD_ADDR_VAR 0 3
30734: PUSH
30735: LD_VAR 0 4
30739: ST_TO_ADDR
// exit ;
30740: POP
30741: POP
30742: GO 30748
// end ;
30744: GO 30709
30746: POP
30747: POP
// end ;
30748: LD_VAR 0 3
30752: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30753: LD_INT 0
30755: PPUSH
// vc_chassis := chassis ;
30756: LD_ADDR_OWVAR 37
30760: PUSH
30761: LD_VAR 0 1
30765: ST_TO_ADDR
// vc_engine := engine ;
30766: LD_ADDR_OWVAR 39
30770: PUSH
30771: LD_VAR 0 2
30775: ST_TO_ADDR
// vc_control := control ;
30776: LD_ADDR_OWVAR 38
30780: PUSH
30781: LD_VAR 0 3
30785: ST_TO_ADDR
// vc_weapon := weapon ;
30786: LD_ADDR_OWVAR 40
30790: PUSH
30791: LD_VAR 0 4
30795: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30796: LD_ADDR_OWVAR 41
30800: PUSH
30801: LD_VAR 0 5
30805: ST_TO_ADDR
// end ;
30806: LD_VAR 0 6
30810: RET
// export function WantPlant ( unit ) ; var task ; begin
30811: LD_INT 0
30813: PPUSH
30814: PPUSH
// result := false ;
30815: LD_ADDR_VAR 0 2
30819: PUSH
30820: LD_INT 0
30822: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30823: LD_ADDR_VAR 0 3
30827: PUSH
30828: LD_VAR 0 1
30832: PPUSH
30833: CALL_OW 437
30837: ST_TO_ADDR
// if task then
30838: LD_VAR 0 3
30842: IFFALSE 30870
// if task [ 1 ] [ 1 ] = p then
30844: LD_VAR 0 3
30848: PUSH
30849: LD_INT 1
30851: ARRAY
30852: PUSH
30853: LD_INT 1
30855: ARRAY
30856: PUSH
30857: LD_STRING p
30859: EQUAL
30860: IFFALSE 30870
// result := true ;
30862: LD_ADDR_VAR 0 2
30866: PUSH
30867: LD_INT 1
30869: ST_TO_ADDR
// end ;
30870: LD_VAR 0 2
30874: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30875: LD_INT 0
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
// if pos < 1 then
30881: LD_VAR 0 2
30885: PUSH
30886: LD_INT 1
30888: LESS
30889: IFFALSE 30893
// exit ;
30891: GO 31196
// if pos = 1 then
30893: LD_VAR 0 2
30897: PUSH
30898: LD_INT 1
30900: EQUAL
30901: IFFALSE 30934
// result := Replace ( arr , pos [ 1 ] , value ) else
30903: LD_ADDR_VAR 0 4
30907: PUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: LD_VAR 0 2
30917: PUSH
30918: LD_INT 1
30920: ARRAY
30921: PPUSH
30922: LD_VAR 0 3
30926: PPUSH
30927: CALL_OW 1
30931: ST_TO_ADDR
30932: GO 31196
// begin tmp := arr ;
30934: LD_ADDR_VAR 0 6
30938: PUSH
30939: LD_VAR 0 1
30943: ST_TO_ADDR
// s_arr := [ tmp ] ;
30944: LD_ADDR_VAR 0 7
30948: PUSH
30949: LD_VAR 0 6
30953: PUSH
30954: EMPTY
30955: LIST
30956: ST_TO_ADDR
// for i = 1 to pos - 1 do
30957: LD_ADDR_VAR 0 5
30961: PUSH
30962: DOUBLE
30963: LD_INT 1
30965: DEC
30966: ST_TO_ADDR
30967: LD_VAR 0 2
30971: PUSH
30972: LD_INT 1
30974: MINUS
30975: PUSH
30976: FOR_TO
30977: IFFALSE 31022
// begin tmp := tmp [ pos [ i ] ] ;
30979: LD_ADDR_VAR 0 6
30983: PUSH
30984: LD_VAR 0 6
30988: PUSH
30989: LD_VAR 0 2
30993: PUSH
30994: LD_VAR 0 5
30998: ARRAY
30999: ARRAY
31000: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31001: LD_ADDR_VAR 0 7
31005: PUSH
31006: LD_VAR 0 7
31010: PUSH
31011: LD_VAR 0 6
31015: PUSH
31016: EMPTY
31017: LIST
31018: ADD
31019: ST_TO_ADDR
// end ;
31020: GO 30976
31022: POP
31023: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31024: LD_ADDR_VAR 0 6
31028: PUSH
31029: LD_VAR 0 6
31033: PPUSH
31034: LD_VAR 0 2
31038: PUSH
31039: LD_VAR 0 2
31043: ARRAY
31044: PPUSH
31045: LD_VAR 0 3
31049: PPUSH
31050: CALL_OW 1
31054: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31055: LD_ADDR_VAR 0 7
31059: PUSH
31060: LD_VAR 0 7
31064: PPUSH
31065: LD_VAR 0 7
31069: PPUSH
31070: LD_VAR 0 6
31074: PPUSH
31075: CALL_OW 1
31079: ST_TO_ADDR
// for i = s_arr downto 2 do
31080: LD_ADDR_VAR 0 5
31084: PUSH
31085: DOUBLE
31086: LD_VAR 0 7
31090: INC
31091: ST_TO_ADDR
31092: LD_INT 2
31094: PUSH
31095: FOR_DOWNTO
31096: IFFALSE 31180
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31098: LD_ADDR_VAR 0 6
31102: PUSH
31103: LD_VAR 0 7
31107: PUSH
31108: LD_VAR 0 5
31112: PUSH
31113: LD_INT 1
31115: MINUS
31116: ARRAY
31117: PPUSH
31118: LD_VAR 0 2
31122: PUSH
31123: LD_VAR 0 5
31127: PUSH
31128: LD_INT 1
31130: MINUS
31131: ARRAY
31132: PPUSH
31133: LD_VAR 0 7
31137: PUSH
31138: LD_VAR 0 5
31142: ARRAY
31143: PPUSH
31144: CALL_OW 1
31148: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31149: LD_ADDR_VAR 0 7
31153: PUSH
31154: LD_VAR 0 7
31158: PPUSH
31159: LD_VAR 0 5
31163: PUSH
31164: LD_INT 1
31166: MINUS
31167: PPUSH
31168: LD_VAR 0 6
31172: PPUSH
31173: CALL_OW 1
31177: ST_TO_ADDR
// end ;
31178: GO 31095
31180: POP
31181: POP
// result := s_arr [ 1 ] ;
31182: LD_ADDR_VAR 0 4
31186: PUSH
31187: LD_VAR 0 7
31191: PUSH
31192: LD_INT 1
31194: ARRAY
31195: ST_TO_ADDR
// end ; end ;
31196: LD_VAR 0 4
31200: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31201: LD_INT 0
31203: PPUSH
31204: PPUSH
// if not list then
31205: LD_VAR 0 1
31209: NOT
31210: IFFALSE 31214
// exit ;
31212: GO 31305
// i := list [ pos1 ] ;
31214: LD_ADDR_VAR 0 5
31218: PUSH
31219: LD_VAR 0 1
31223: PUSH
31224: LD_VAR 0 2
31228: ARRAY
31229: ST_TO_ADDR
// if not i then
31230: LD_VAR 0 5
31234: NOT
31235: IFFALSE 31239
// exit ;
31237: GO 31305
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31239: LD_ADDR_VAR 0 1
31243: PUSH
31244: LD_VAR 0 1
31248: PPUSH
31249: LD_VAR 0 2
31253: PPUSH
31254: LD_VAR 0 1
31258: PUSH
31259: LD_VAR 0 3
31263: ARRAY
31264: PPUSH
31265: CALL_OW 1
31269: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31270: LD_ADDR_VAR 0 1
31274: PUSH
31275: LD_VAR 0 1
31279: PPUSH
31280: LD_VAR 0 3
31284: PPUSH
31285: LD_VAR 0 5
31289: PPUSH
31290: CALL_OW 1
31294: ST_TO_ADDR
// result := list ;
31295: LD_ADDR_VAR 0 4
31299: PUSH
31300: LD_VAR 0 1
31304: ST_TO_ADDR
// end ;
31305: LD_VAR 0 4
31309: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31310: LD_INT 0
31312: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31313: LD_ADDR_VAR 0 5
31317: PUSH
31318: LD_VAR 0 1
31322: PPUSH
31323: CALL_OW 250
31327: PPUSH
31328: LD_VAR 0 1
31332: PPUSH
31333: CALL_OW 251
31337: PPUSH
31338: LD_VAR 0 2
31342: PPUSH
31343: LD_VAR 0 3
31347: PPUSH
31348: LD_VAR 0 4
31352: PPUSH
31353: CALL 31363 0 5
31357: ST_TO_ADDR
// end ;
31358: LD_VAR 0 5
31362: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31363: LD_INT 0
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
// if not list then
31369: LD_VAR 0 3
31373: NOT
31374: IFFALSE 31378
// exit ;
31376: GO 31766
// result := [ ] ;
31378: LD_ADDR_VAR 0 6
31382: PUSH
31383: EMPTY
31384: ST_TO_ADDR
// for i in list do
31385: LD_ADDR_VAR 0 7
31389: PUSH
31390: LD_VAR 0 3
31394: PUSH
31395: FOR_IN
31396: IFFALSE 31598
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31398: LD_ADDR_VAR 0 9
31402: PUSH
31403: LD_VAR 0 7
31407: PPUSH
31408: LD_VAR 0 1
31412: PPUSH
31413: LD_VAR 0 2
31417: PPUSH
31418: CALL_OW 297
31422: ST_TO_ADDR
// if not result then
31423: LD_VAR 0 6
31427: NOT
31428: IFFALSE 31454
// result := [ [ i , tmp ] ] else
31430: LD_ADDR_VAR 0 6
31434: PUSH
31435: LD_VAR 0 7
31439: PUSH
31440: LD_VAR 0 9
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: EMPTY
31450: LIST
31451: ST_TO_ADDR
31452: GO 31596
// begin if result [ result ] [ 2 ] < tmp then
31454: LD_VAR 0 6
31458: PUSH
31459: LD_VAR 0 6
31463: ARRAY
31464: PUSH
31465: LD_INT 2
31467: ARRAY
31468: PUSH
31469: LD_VAR 0 9
31473: LESS
31474: IFFALSE 31516
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31476: LD_ADDR_VAR 0 6
31480: PUSH
31481: LD_VAR 0 6
31485: PPUSH
31486: LD_VAR 0 6
31490: PUSH
31491: LD_INT 1
31493: PLUS
31494: PPUSH
31495: LD_VAR 0 7
31499: PUSH
31500: LD_VAR 0 9
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PPUSH
31509: CALL_OW 2
31513: ST_TO_ADDR
31514: GO 31596
// for j = 1 to result do
31516: LD_ADDR_VAR 0 8
31520: PUSH
31521: DOUBLE
31522: LD_INT 1
31524: DEC
31525: ST_TO_ADDR
31526: LD_VAR 0 6
31530: PUSH
31531: FOR_TO
31532: IFFALSE 31594
// begin if tmp < result [ j ] [ 2 ] then
31534: LD_VAR 0 9
31538: PUSH
31539: LD_VAR 0 6
31543: PUSH
31544: LD_VAR 0 8
31548: ARRAY
31549: PUSH
31550: LD_INT 2
31552: ARRAY
31553: LESS
31554: IFFALSE 31592
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31556: LD_ADDR_VAR 0 6
31560: PUSH
31561: LD_VAR 0 6
31565: PPUSH
31566: LD_VAR 0 8
31570: PPUSH
31571: LD_VAR 0 7
31575: PUSH
31576: LD_VAR 0 9
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PPUSH
31585: CALL_OW 2
31589: ST_TO_ADDR
// break ;
31590: GO 31594
// end ; end ;
31592: GO 31531
31594: POP
31595: POP
// end ; end ;
31596: GO 31395
31598: POP
31599: POP
// if result and not asc then
31600: LD_VAR 0 6
31604: PUSH
31605: LD_VAR 0 4
31609: NOT
31610: AND
31611: IFFALSE 31686
// begin tmp := result ;
31613: LD_ADDR_VAR 0 9
31617: PUSH
31618: LD_VAR 0 6
31622: ST_TO_ADDR
// for i = tmp downto 1 do
31623: LD_ADDR_VAR 0 7
31627: PUSH
31628: DOUBLE
31629: LD_VAR 0 9
31633: INC
31634: ST_TO_ADDR
31635: LD_INT 1
31637: PUSH
31638: FOR_DOWNTO
31639: IFFALSE 31684
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31641: LD_ADDR_VAR 0 6
31645: PUSH
31646: LD_VAR 0 6
31650: PPUSH
31651: LD_VAR 0 9
31655: PUSH
31656: LD_VAR 0 7
31660: MINUS
31661: PUSH
31662: LD_INT 1
31664: PLUS
31665: PPUSH
31666: LD_VAR 0 9
31670: PUSH
31671: LD_VAR 0 7
31675: ARRAY
31676: PPUSH
31677: CALL_OW 1
31681: ST_TO_ADDR
31682: GO 31638
31684: POP
31685: POP
// end ; tmp := [ ] ;
31686: LD_ADDR_VAR 0 9
31690: PUSH
31691: EMPTY
31692: ST_TO_ADDR
// if mode then
31693: LD_VAR 0 5
31697: IFFALSE 31766
// begin for i = 1 to result do
31699: LD_ADDR_VAR 0 7
31703: PUSH
31704: DOUBLE
31705: LD_INT 1
31707: DEC
31708: ST_TO_ADDR
31709: LD_VAR 0 6
31713: PUSH
31714: FOR_TO
31715: IFFALSE 31754
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31717: LD_ADDR_VAR 0 9
31721: PUSH
31722: LD_VAR 0 9
31726: PPUSH
31727: LD_VAR 0 7
31731: PPUSH
31732: LD_VAR 0 6
31736: PUSH
31737: LD_VAR 0 7
31741: ARRAY
31742: PUSH
31743: LD_INT 1
31745: ARRAY
31746: PPUSH
31747: CALL_OW 1
31751: ST_TO_ADDR
31752: GO 31714
31754: POP
31755: POP
// result := tmp ;
31756: LD_ADDR_VAR 0 6
31760: PUSH
31761: LD_VAR 0 9
31765: ST_TO_ADDR
// end ; end ;
31766: LD_VAR 0 6
31770: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31771: LD_INT 0
31773: PPUSH
31774: PPUSH
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31779: LD_ADDR_VAR 0 5
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: ST_TO_ADDR
// if not x or not y then
31801: LD_VAR 0 2
31805: NOT
31806: PUSH
31807: LD_VAR 0 3
31811: NOT
31812: OR
31813: IFFALSE 31817
// exit ;
31815: GO 33467
// if not range then
31817: LD_VAR 0 4
31821: NOT
31822: IFFALSE 31832
// range := 10 ;
31824: LD_ADDR_VAR 0 4
31828: PUSH
31829: LD_INT 10
31831: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31832: LD_ADDR_VAR 0 8
31836: PUSH
31837: LD_INT 81
31839: PUSH
31840: LD_VAR 0 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 92
31851: PUSH
31852: LD_VAR 0 2
31856: PUSH
31857: LD_VAR 0 3
31861: PUSH
31862: LD_VAR 0 4
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 3
31875: PUSH
31876: LD_INT 21
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: PPUSH
31895: CALL_OW 69
31899: ST_TO_ADDR
// if not tmp then
31900: LD_VAR 0 8
31904: NOT
31905: IFFALSE 31909
// exit ;
31907: GO 33467
// for i in tmp do
31909: LD_ADDR_VAR 0 6
31913: PUSH
31914: LD_VAR 0 8
31918: PUSH
31919: FOR_IN
31920: IFFALSE 33442
// begin points := [ 0 , 0 , 0 ] ;
31922: LD_ADDR_VAR 0 9
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: ST_TO_ADDR
// bpoints := 1 ;
31941: LD_ADDR_VAR 0 10
31945: PUSH
31946: LD_INT 1
31948: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31949: LD_VAR 0 6
31953: PPUSH
31954: CALL_OW 247
31958: PUSH
31959: LD_INT 1
31961: DOUBLE
31962: EQUAL
31963: IFTRUE 31967
31965: GO 32545
31967: POP
// begin if GetClass ( i ) = 1 then
31968: LD_VAR 0 6
31972: PPUSH
31973: CALL_OW 257
31977: PUSH
31978: LD_INT 1
31980: EQUAL
31981: IFFALSE 32002
// points := [ 10 , 5 , 3 ] ;
31983: LD_ADDR_VAR 0 9
31987: PUSH
31988: LD_INT 10
31990: PUSH
31991: LD_INT 5
31993: PUSH
31994: LD_INT 3
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32002: LD_VAR 0 6
32006: PPUSH
32007: CALL_OW 257
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 3
32017: PUSH
32018: LD_INT 4
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: IN
32026: IFFALSE 32047
// points := [ 3 , 2 , 1 ] ;
32028: LD_ADDR_VAR 0 9
32032: PUSH
32033: LD_INT 3
32035: PUSH
32036: LD_INT 2
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32047: LD_VAR 0 6
32051: PPUSH
32052: CALL_OW 257
32056: PUSH
32057: LD_INT 5
32059: EQUAL
32060: IFFALSE 32081
// points := [ 130 , 5 , 2 ] ;
32062: LD_ADDR_VAR 0 9
32066: PUSH
32067: LD_INT 130
32069: PUSH
32070: LD_INT 5
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32081: LD_VAR 0 6
32085: PPUSH
32086: CALL_OW 257
32090: PUSH
32091: LD_INT 8
32093: EQUAL
32094: IFFALSE 32115
// points := [ 35 , 35 , 30 ] ;
32096: LD_ADDR_VAR 0 9
32100: PUSH
32101: LD_INT 35
32103: PUSH
32104: LD_INT 35
32106: PUSH
32107: LD_INT 30
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32115: LD_VAR 0 6
32119: PPUSH
32120: CALL_OW 257
32124: PUSH
32125: LD_INT 9
32127: EQUAL
32128: IFFALSE 32149
// points := [ 20 , 55 , 40 ] ;
32130: LD_ADDR_VAR 0 9
32134: PUSH
32135: LD_INT 20
32137: PUSH
32138: LD_INT 55
32140: PUSH
32141: LD_INT 40
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32149: LD_VAR 0 6
32153: PPUSH
32154: CALL_OW 257
32158: PUSH
32159: LD_INT 12
32161: PUSH
32162: LD_INT 16
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: IN
32169: IFFALSE 32190
// points := [ 5 , 3 , 2 ] ;
32171: LD_ADDR_VAR 0 9
32175: PUSH
32176: LD_INT 5
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: LD_INT 2
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32190: LD_VAR 0 6
32194: PPUSH
32195: CALL_OW 257
32199: PUSH
32200: LD_INT 17
32202: EQUAL
32203: IFFALSE 32224
// points := [ 100 , 50 , 75 ] ;
32205: LD_ADDR_VAR 0 9
32209: PUSH
32210: LD_INT 100
32212: PUSH
32213: LD_INT 50
32215: PUSH
32216: LD_INT 75
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32224: LD_VAR 0 6
32228: PPUSH
32229: CALL_OW 257
32233: PUSH
32234: LD_INT 15
32236: EQUAL
32237: IFFALSE 32258
// points := [ 10 , 5 , 3 ] ;
32239: LD_ADDR_VAR 0 9
32243: PUSH
32244: LD_INT 10
32246: PUSH
32247: LD_INT 5
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32258: LD_VAR 0 6
32262: PPUSH
32263: CALL_OW 257
32267: PUSH
32268: LD_INT 14
32270: EQUAL
32271: IFFALSE 32292
// points := [ 10 , 0 , 0 ] ;
32273: LD_ADDR_VAR 0 9
32277: PUSH
32278: LD_INT 10
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32292: LD_VAR 0 6
32296: PPUSH
32297: CALL_OW 257
32301: PUSH
32302: LD_INT 11
32304: EQUAL
32305: IFFALSE 32326
// points := [ 30 , 10 , 5 ] ;
32307: LD_ADDR_VAR 0 9
32311: PUSH
32312: LD_INT 30
32314: PUSH
32315: LD_INT 10
32317: PUSH
32318: LD_INT 5
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32326: LD_VAR 0 1
32330: PPUSH
32331: LD_INT 5
32333: PPUSH
32334: CALL_OW 321
32338: PUSH
32339: LD_INT 2
32341: EQUAL
32342: IFFALSE 32359
// bpoints := bpoints * 1.8 ;
32344: LD_ADDR_VAR 0 10
32348: PUSH
32349: LD_VAR 0 10
32353: PUSH
32354: LD_REAL  1.80000000000000E+0000
32357: MUL
32358: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32359: LD_VAR 0 6
32363: PPUSH
32364: CALL_OW 257
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: LD_INT 3
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: IN
32387: PUSH
32388: LD_VAR 0 1
32392: PPUSH
32393: LD_INT 51
32395: PPUSH
32396: CALL_OW 321
32400: PUSH
32401: LD_INT 2
32403: EQUAL
32404: AND
32405: IFFALSE 32422
// bpoints := bpoints * 1.2 ;
32407: LD_ADDR_VAR 0 10
32411: PUSH
32412: LD_VAR 0 10
32416: PUSH
32417: LD_REAL  1.20000000000000E+0000
32420: MUL
32421: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32422: LD_VAR 0 6
32426: PPUSH
32427: CALL_OW 257
32431: PUSH
32432: LD_INT 5
32434: PUSH
32435: LD_INT 7
32437: PUSH
32438: LD_INT 9
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: IN
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: LD_INT 52
32454: PPUSH
32455: CALL_OW 321
32459: PUSH
32460: LD_INT 2
32462: EQUAL
32463: AND
32464: IFFALSE 32481
// bpoints := bpoints * 1.5 ;
32466: LD_ADDR_VAR 0 10
32470: PUSH
32471: LD_VAR 0 10
32475: PUSH
32476: LD_REAL  1.50000000000000E+0000
32479: MUL
32480: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32481: LD_VAR 0 1
32485: PPUSH
32486: LD_INT 66
32488: PPUSH
32489: CALL_OW 321
32493: PUSH
32494: LD_INT 2
32496: EQUAL
32497: IFFALSE 32514
// bpoints := bpoints * 1.1 ;
32499: LD_ADDR_VAR 0 10
32503: PUSH
32504: LD_VAR 0 10
32508: PUSH
32509: LD_REAL  1.10000000000000E+0000
32512: MUL
32513: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32514: LD_ADDR_VAR 0 10
32518: PUSH
32519: LD_VAR 0 10
32523: PUSH
32524: LD_VAR 0 6
32528: PPUSH
32529: LD_INT 1
32531: PPUSH
32532: CALL_OW 259
32536: PUSH
32537: LD_REAL  1.15000000000000E+0000
32540: MUL
32541: MUL
32542: ST_TO_ADDR
// end ; unit_vehicle :
32543: GO 33371
32545: LD_INT 2
32547: DOUBLE
32548: EQUAL
32549: IFTRUE 32553
32551: GO 33359
32553: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32554: LD_VAR 0 6
32558: PPUSH
32559: CALL_OW 264
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 42
32569: PUSH
32570: LD_INT 24
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: IN
32578: IFFALSE 32599
// points := [ 25 , 5 , 3 ] ;
32580: LD_ADDR_VAR 0 9
32584: PUSH
32585: LD_INT 25
32587: PUSH
32588: LD_INT 5
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32599: LD_VAR 0 6
32603: PPUSH
32604: CALL_OW 264
32608: PUSH
32609: LD_INT 4
32611: PUSH
32612: LD_INT 43
32614: PUSH
32615: LD_INT 25
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: LIST
32622: IN
32623: IFFALSE 32644
// points := [ 40 , 15 , 5 ] ;
32625: LD_ADDR_VAR 0 9
32629: PUSH
32630: LD_INT 40
32632: PUSH
32633: LD_INT 15
32635: PUSH
32636: LD_INT 5
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32644: LD_VAR 0 6
32648: PPUSH
32649: CALL_OW 264
32653: PUSH
32654: LD_INT 3
32656: PUSH
32657: LD_INT 23
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: IN
32664: IFFALSE 32685
// points := [ 7 , 25 , 8 ] ;
32666: LD_ADDR_VAR 0 9
32670: PUSH
32671: LD_INT 7
32673: PUSH
32674: LD_INT 25
32676: PUSH
32677: LD_INT 8
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32685: LD_VAR 0 6
32689: PPUSH
32690: CALL_OW 264
32694: PUSH
32695: LD_INT 5
32697: PUSH
32698: LD_INT 27
32700: PUSH
32701: LD_INT 44
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: IN
32709: IFFALSE 32730
// points := [ 14 , 50 , 16 ] ;
32711: LD_ADDR_VAR 0 9
32715: PUSH
32716: LD_INT 14
32718: PUSH
32719: LD_INT 50
32721: PUSH
32722: LD_INT 16
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32730: LD_VAR 0 6
32734: PPUSH
32735: CALL_OW 264
32739: PUSH
32740: LD_INT 6
32742: PUSH
32743: LD_INT 46
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: IN
32750: IFFALSE 32771
// points := [ 32 , 120 , 70 ] ;
32752: LD_ADDR_VAR 0 9
32756: PUSH
32757: LD_INT 32
32759: PUSH
32760: LD_INT 120
32762: PUSH
32763: LD_INT 70
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32771: LD_VAR 0 6
32775: PPUSH
32776: CALL_OW 264
32780: PUSH
32781: LD_INT 7
32783: PUSH
32784: LD_INT 28
32786: PUSH
32787: LD_INT 45
32789: PUSH
32790: LD_INT 92
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: IN
32799: IFFALSE 32820
// points := [ 35 , 20 , 45 ] ;
32801: LD_ADDR_VAR 0 9
32805: PUSH
32806: LD_INT 35
32808: PUSH
32809: LD_INT 20
32811: PUSH
32812: LD_INT 45
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32820: LD_VAR 0 6
32824: PPUSH
32825: CALL_OW 264
32829: PUSH
32830: LD_INT 47
32832: PUSH
32833: EMPTY
32834: LIST
32835: IN
32836: IFFALSE 32857
// points := [ 67 , 45 , 75 ] ;
32838: LD_ADDR_VAR 0 9
32842: PUSH
32843: LD_INT 67
32845: PUSH
32846: LD_INT 45
32848: PUSH
32849: LD_INT 75
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32857: LD_VAR 0 6
32861: PPUSH
32862: CALL_OW 264
32866: PUSH
32867: LD_INT 26
32869: PUSH
32870: EMPTY
32871: LIST
32872: IN
32873: IFFALSE 32894
// points := [ 120 , 30 , 80 ] ;
32875: LD_ADDR_VAR 0 9
32879: PUSH
32880: LD_INT 120
32882: PUSH
32883: LD_INT 30
32885: PUSH
32886: LD_INT 80
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32894: LD_VAR 0 6
32898: PPUSH
32899: CALL_OW 264
32903: PUSH
32904: LD_INT 22
32906: PUSH
32907: EMPTY
32908: LIST
32909: IN
32910: IFFALSE 32931
// points := [ 40 , 1 , 1 ] ;
32912: LD_ADDR_VAR 0 9
32916: PUSH
32917: LD_INT 40
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32931: LD_VAR 0 6
32935: PPUSH
32936: CALL_OW 264
32940: PUSH
32941: LD_INT 29
32943: PUSH
32944: EMPTY
32945: LIST
32946: IN
32947: IFFALSE 32968
// points := [ 70 , 200 , 400 ] ;
32949: LD_ADDR_VAR 0 9
32953: PUSH
32954: LD_INT 70
32956: PUSH
32957: LD_INT 200
32959: PUSH
32960: LD_INT 400
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32968: LD_VAR 0 6
32972: PPUSH
32973: CALL_OW 264
32977: PUSH
32978: LD_INT 14
32980: PUSH
32981: LD_INT 53
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: IN
32988: IFFALSE 33009
// points := [ 40 , 10 , 20 ] ;
32990: LD_ADDR_VAR 0 9
32994: PUSH
32995: LD_INT 40
32997: PUSH
32998: LD_INT 10
33000: PUSH
33001: LD_INT 20
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33009: LD_VAR 0 6
33013: PPUSH
33014: CALL_OW 264
33018: PUSH
33019: LD_INT 9
33021: PUSH
33022: EMPTY
33023: LIST
33024: IN
33025: IFFALSE 33046
// points := [ 5 , 70 , 20 ] ;
33027: LD_ADDR_VAR 0 9
33031: PUSH
33032: LD_INT 5
33034: PUSH
33035: LD_INT 70
33037: PUSH
33038: LD_INT 20
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33046: LD_VAR 0 6
33050: PPUSH
33051: CALL_OW 264
33055: PUSH
33056: LD_INT 10
33058: PUSH
33059: EMPTY
33060: LIST
33061: IN
33062: IFFALSE 33083
// points := [ 35 , 110 , 70 ] ;
33064: LD_ADDR_VAR 0 9
33068: PUSH
33069: LD_INT 35
33071: PUSH
33072: LD_INT 110
33074: PUSH
33075: LD_INT 70
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33083: LD_VAR 0 6
33087: PPUSH
33088: CALL_OW 265
33092: PUSH
33093: LD_INT 25
33095: EQUAL
33096: IFFALSE 33117
// points := [ 80 , 65 , 100 ] ;
33098: LD_ADDR_VAR 0 9
33102: PUSH
33103: LD_INT 80
33105: PUSH
33106: LD_INT 65
33108: PUSH
33109: LD_INT 100
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33117: LD_VAR 0 6
33121: PPUSH
33122: CALL_OW 263
33126: PUSH
33127: LD_INT 1
33129: EQUAL
33130: IFFALSE 33165
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33132: LD_ADDR_VAR 0 10
33136: PUSH
33137: LD_VAR 0 10
33141: PUSH
33142: LD_VAR 0 6
33146: PPUSH
33147: CALL_OW 311
33151: PPUSH
33152: LD_INT 3
33154: PPUSH
33155: CALL_OW 259
33159: PUSH
33160: LD_INT 4
33162: MUL
33163: MUL
33164: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33165: LD_VAR 0 6
33169: PPUSH
33170: CALL_OW 263
33174: PUSH
33175: LD_INT 2
33177: EQUAL
33178: IFFALSE 33229
// begin j := IsControledBy ( i ) ;
33180: LD_ADDR_VAR 0 7
33184: PUSH
33185: LD_VAR 0 6
33189: PPUSH
33190: CALL_OW 312
33194: ST_TO_ADDR
// if j then
33195: LD_VAR 0 7
33199: IFFALSE 33229
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33201: LD_ADDR_VAR 0 10
33205: PUSH
33206: LD_VAR 0 10
33210: PUSH
33211: LD_VAR 0 7
33215: PPUSH
33216: LD_INT 3
33218: PPUSH
33219: CALL_OW 259
33223: PUSH
33224: LD_INT 3
33226: MUL
33227: MUL
33228: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33229: LD_VAR 0 6
33233: PPUSH
33234: CALL_OW 264
33238: PUSH
33239: LD_INT 5
33241: PUSH
33242: LD_INT 6
33244: PUSH
33245: LD_INT 46
33247: PUSH
33248: LD_INT 44
33250: PUSH
33251: LD_INT 47
33253: PUSH
33254: LD_INT 45
33256: PUSH
33257: LD_INT 28
33259: PUSH
33260: LD_INT 7
33262: PUSH
33263: LD_INT 27
33265: PUSH
33266: LD_INT 29
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: IN
33281: PUSH
33282: LD_VAR 0 1
33286: PPUSH
33287: LD_INT 52
33289: PPUSH
33290: CALL_OW 321
33294: PUSH
33295: LD_INT 2
33297: EQUAL
33298: AND
33299: IFFALSE 33316
// bpoints := bpoints * 1.2 ;
33301: LD_ADDR_VAR 0 10
33305: PUSH
33306: LD_VAR 0 10
33310: PUSH
33311: LD_REAL  1.20000000000000E+0000
33314: MUL
33315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33316: LD_VAR 0 6
33320: PPUSH
33321: CALL_OW 264
33325: PUSH
33326: LD_INT 6
33328: PUSH
33329: LD_INT 46
33331: PUSH
33332: LD_INT 47
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: IN
33340: IFFALSE 33357
// bpoints := bpoints * 1.2 ;
33342: LD_ADDR_VAR 0 10
33346: PUSH
33347: LD_VAR 0 10
33351: PUSH
33352: LD_REAL  1.20000000000000E+0000
33355: MUL
33356: ST_TO_ADDR
// end ; unit_building :
33357: GO 33371
33359: LD_INT 3
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33367
33365: GO 33370
33367: POP
// ; end ;
33368: GO 33371
33370: POP
// for j = 1 to 3 do
33371: LD_ADDR_VAR 0 7
33375: PUSH
33376: DOUBLE
33377: LD_INT 1
33379: DEC
33380: ST_TO_ADDR
33381: LD_INT 3
33383: PUSH
33384: FOR_TO
33385: IFFALSE 33438
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33387: LD_ADDR_VAR 0 5
33391: PUSH
33392: LD_VAR 0 5
33396: PPUSH
33397: LD_VAR 0 7
33401: PPUSH
33402: LD_VAR 0 5
33406: PUSH
33407: LD_VAR 0 7
33411: ARRAY
33412: PUSH
33413: LD_VAR 0 9
33417: PUSH
33418: LD_VAR 0 7
33422: ARRAY
33423: PUSH
33424: LD_VAR 0 10
33428: MUL
33429: PLUS
33430: PPUSH
33431: CALL_OW 1
33435: ST_TO_ADDR
33436: GO 33384
33438: POP
33439: POP
// end ;
33440: GO 31919
33442: POP
33443: POP
// result := Replace ( result , 4 , tmp ) ;
33444: LD_ADDR_VAR 0 5
33448: PUSH
33449: LD_VAR 0 5
33453: PPUSH
33454: LD_INT 4
33456: PPUSH
33457: LD_VAR 0 8
33461: PPUSH
33462: CALL_OW 1
33466: ST_TO_ADDR
// end ;
33467: LD_VAR 0 5
33471: RET
// export function DangerAtRange ( unit , range ) ; begin
33472: LD_INT 0
33474: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33475: LD_ADDR_VAR 0 3
33479: PUSH
33480: LD_VAR 0 1
33484: PPUSH
33485: CALL_OW 255
33489: PPUSH
33490: LD_VAR 0 1
33494: PPUSH
33495: CALL_OW 250
33499: PPUSH
33500: LD_VAR 0 1
33504: PPUSH
33505: CALL_OW 251
33509: PPUSH
33510: LD_VAR 0 2
33514: PPUSH
33515: CALL 31771 0 4
33519: ST_TO_ADDR
// end ;
33520: LD_VAR 0 3
33524: RET
// export function DangerInArea ( side , area ) ; begin
33525: LD_INT 0
33527: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33528: LD_ADDR_VAR 0 3
33532: PUSH
33533: LD_VAR 0 2
33537: PPUSH
33538: LD_INT 81
33540: PUSH
33541: LD_VAR 0 1
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PPUSH
33550: CALL_OW 70
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 3
33559: RET
// export function IsExtension ( b ) ; begin
33560: LD_INT 0
33562: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33563: LD_ADDR_VAR 0 2
33567: PUSH
33568: LD_VAR 0 1
33572: PUSH
33573: LD_INT 23
33575: PUSH
33576: LD_INT 20
33578: PUSH
33579: LD_INT 22
33581: PUSH
33582: LD_INT 17
33584: PUSH
33585: LD_INT 24
33587: PUSH
33588: LD_INT 21
33590: PUSH
33591: LD_INT 19
33593: PUSH
33594: LD_INT 16
33596: PUSH
33597: LD_INT 25
33599: PUSH
33600: LD_INT 18
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: IN
33615: ST_TO_ADDR
// end ;
33616: LD_VAR 0 2
33620: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33621: LD_INT 0
33623: PPUSH
33624: PPUSH
33625: PPUSH
// result := [ ] ;
33626: LD_ADDR_VAR 0 4
33630: PUSH
33631: EMPTY
33632: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33633: LD_ADDR_VAR 0 5
33637: PUSH
33638: LD_VAR 0 2
33642: PPUSH
33643: LD_INT 21
33645: PUSH
33646: LD_INT 3
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PPUSH
33653: CALL_OW 70
33657: ST_TO_ADDR
// if not tmp then
33658: LD_VAR 0 5
33662: NOT
33663: IFFALSE 33667
// exit ;
33665: GO 33731
// if checkLink then
33667: LD_VAR 0 3
33671: IFFALSE 33721
// begin for i in tmp do
33673: LD_ADDR_VAR 0 6
33677: PUSH
33678: LD_VAR 0 5
33682: PUSH
33683: FOR_IN
33684: IFFALSE 33719
// if GetBase ( i ) <> base then
33686: LD_VAR 0 6
33690: PPUSH
33691: CALL_OW 274
33695: PUSH
33696: LD_VAR 0 1
33700: NONEQUAL
33701: IFFALSE 33717
// ComLinkToBase ( base , i ) ;
33703: LD_VAR 0 1
33707: PPUSH
33708: LD_VAR 0 6
33712: PPUSH
33713: CALL_OW 169
33717: GO 33683
33719: POP
33720: POP
// end ; result := tmp ;
33721: LD_ADDR_VAR 0 4
33725: PUSH
33726: LD_VAR 0 5
33730: ST_TO_ADDR
// end ;
33731: LD_VAR 0 4
33735: RET
// export function ComComplete ( units , b ) ; var i ; begin
33736: LD_INT 0
33738: PPUSH
33739: PPUSH
// if not units then
33740: LD_VAR 0 1
33744: NOT
33745: IFFALSE 33749
// exit ;
33747: GO 33839
// for i in units do
33749: LD_ADDR_VAR 0 4
33753: PUSH
33754: LD_VAR 0 1
33758: PUSH
33759: FOR_IN
33760: IFFALSE 33837
// if BuildingStatus ( b ) = bs_build then
33762: LD_VAR 0 2
33766: PPUSH
33767: CALL_OW 461
33771: PUSH
33772: LD_INT 1
33774: EQUAL
33775: IFFALSE 33835
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33777: LD_VAR 0 4
33781: PPUSH
33782: LD_STRING h
33784: PUSH
33785: LD_VAR 0 2
33789: PPUSH
33790: CALL_OW 250
33794: PUSH
33795: LD_VAR 0 2
33799: PPUSH
33800: CALL_OW 251
33804: PUSH
33805: LD_VAR 0 2
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: PUSH
33828: EMPTY
33829: LIST
33830: PPUSH
33831: CALL_OW 446
33835: GO 33759
33837: POP
33838: POP
// end ;
33839: LD_VAR 0 3
33843: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33844: LD_INT 0
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33852: LD_VAR 0 1
33856: NOT
33857: PUSH
33858: LD_VAR 0 1
33862: PPUSH
33863: CALL_OW 263
33867: PUSH
33868: LD_INT 2
33870: NONEQUAL
33871: OR
33872: IFFALSE 33876
// exit ;
33874: GO 34192
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33876: LD_ADDR_VAR 0 6
33880: PUSH
33881: LD_INT 22
33883: PUSH
33884: LD_VAR 0 1
33888: PPUSH
33889: CALL_OW 255
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: LD_INT 30
33903: PUSH
33904: LD_INT 36
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 34
33913: PUSH
33914: LD_INT 31
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PPUSH
33930: CALL_OW 69
33934: ST_TO_ADDR
// if not tmp then
33935: LD_VAR 0 6
33939: NOT
33940: IFFALSE 33944
// exit ;
33942: GO 34192
// result := [ ] ;
33944: LD_ADDR_VAR 0 2
33948: PUSH
33949: EMPTY
33950: ST_TO_ADDR
// for i in tmp do
33951: LD_ADDR_VAR 0 3
33955: PUSH
33956: LD_VAR 0 6
33960: PUSH
33961: FOR_IN
33962: IFFALSE 34033
// begin t := UnitsInside ( i ) ;
33964: LD_ADDR_VAR 0 4
33968: PUSH
33969: LD_VAR 0 3
33973: PPUSH
33974: CALL_OW 313
33978: ST_TO_ADDR
// if t then
33979: LD_VAR 0 4
33983: IFFALSE 34031
// for j in t do
33985: LD_ADDR_VAR 0 7
33989: PUSH
33990: LD_VAR 0 4
33994: PUSH
33995: FOR_IN
33996: IFFALSE 34029
// result := Replace ( result , result + 1 , j ) ;
33998: LD_ADDR_VAR 0 2
34002: PUSH
34003: LD_VAR 0 2
34007: PPUSH
34008: LD_VAR 0 2
34012: PUSH
34013: LD_INT 1
34015: PLUS
34016: PPUSH
34017: LD_VAR 0 7
34021: PPUSH
34022: CALL_OW 1
34026: ST_TO_ADDR
34027: GO 33995
34029: POP
34030: POP
// end ;
34031: GO 33961
34033: POP
34034: POP
// if not result then
34035: LD_VAR 0 2
34039: NOT
34040: IFFALSE 34044
// exit ;
34042: GO 34192
// mech := result [ 1 ] ;
34044: LD_ADDR_VAR 0 5
34048: PUSH
34049: LD_VAR 0 2
34053: PUSH
34054: LD_INT 1
34056: ARRAY
34057: ST_TO_ADDR
// if result > 1 then
34058: LD_VAR 0 2
34062: PUSH
34063: LD_INT 1
34065: GREATER
34066: IFFALSE 34178
// begin for i = 2 to result do
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: DOUBLE
34074: LD_INT 2
34076: DEC
34077: ST_TO_ADDR
34078: LD_VAR 0 2
34082: PUSH
34083: FOR_TO
34084: IFFALSE 34176
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34086: LD_ADDR_VAR 0 4
34090: PUSH
34091: LD_VAR 0 2
34095: PUSH
34096: LD_VAR 0 3
34100: ARRAY
34101: PPUSH
34102: LD_INT 3
34104: PPUSH
34105: CALL_OW 259
34109: PUSH
34110: LD_VAR 0 2
34114: PUSH
34115: LD_VAR 0 3
34119: ARRAY
34120: PPUSH
34121: CALL_OW 432
34125: MINUS
34126: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34127: LD_VAR 0 4
34131: PUSH
34132: LD_VAR 0 5
34136: PPUSH
34137: LD_INT 3
34139: PPUSH
34140: CALL_OW 259
34144: PUSH
34145: LD_VAR 0 5
34149: PPUSH
34150: CALL_OW 432
34154: MINUS
34155: GREATEREQUAL
34156: IFFALSE 34174
// mech := result [ i ] ;
34158: LD_ADDR_VAR 0 5
34162: PUSH
34163: LD_VAR 0 2
34167: PUSH
34168: LD_VAR 0 3
34172: ARRAY
34173: ST_TO_ADDR
// end ;
34174: GO 34083
34176: POP
34177: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34178: LD_VAR 0 1
34182: PPUSH
34183: LD_VAR 0 5
34187: PPUSH
34188: CALL_OW 135
// end ;
34192: LD_VAR 0 2
34196: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
// result := [ ] ;
34212: LD_ADDR_VAR 0 7
34216: PUSH
34217: EMPTY
34218: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34219: LD_VAR 0 1
34223: PPUSH
34224: CALL_OW 266
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: IN
34239: NOT
34240: IFFALSE 34244
// exit ;
34242: GO 35878
// if name then
34244: LD_VAR 0 3
34248: IFFALSE 34264
// SetBName ( base_dep , name ) ;
34250: LD_VAR 0 1
34254: PPUSH
34255: LD_VAR 0 3
34259: PPUSH
34260: CALL_OW 500
// base := GetBase ( base_dep ) ;
34264: LD_ADDR_VAR 0 15
34268: PUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: CALL_OW 274
34278: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34279: LD_ADDR_VAR 0 16
34283: PUSH
34284: LD_VAR 0 1
34288: PPUSH
34289: CALL_OW 255
34293: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34294: LD_ADDR_VAR 0 17
34298: PUSH
34299: LD_VAR 0 1
34303: PPUSH
34304: CALL_OW 248
34308: ST_TO_ADDR
// if sources then
34309: LD_VAR 0 5
34313: IFFALSE 34360
// for i = 1 to 3 do
34315: LD_ADDR_VAR 0 8
34319: PUSH
34320: DOUBLE
34321: LD_INT 1
34323: DEC
34324: ST_TO_ADDR
34325: LD_INT 3
34327: PUSH
34328: FOR_TO
34329: IFFALSE 34358
// AddResourceType ( base , i , sources [ i ] ) ;
34331: LD_VAR 0 15
34335: PPUSH
34336: LD_VAR 0 8
34340: PPUSH
34341: LD_VAR 0 5
34345: PUSH
34346: LD_VAR 0 8
34350: ARRAY
34351: PPUSH
34352: CALL_OW 276
34356: GO 34328
34358: POP
34359: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34360: LD_ADDR_VAR 0 18
34364: PUSH
34365: LD_VAR 0 15
34369: PPUSH
34370: LD_VAR 0 2
34374: PPUSH
34375: LD_INT 1
34377: PPUSH
34378: CALL 33621 0 3
34382: ST_TO_ADDR
// InitHc ;
34383: CALL_OW 19
// InitUc ;
34387: CALL_OW 18
// uc_side := side ;
34391: LD_ADDR_OWVAR 20
34395: PUSH
34396: LD_VAR 0 16
34400: ST_TO_ADDR
// uc_nation := nation ;
34401: LD_ADDR_OWVAR 21
34405: PUSH
34406: LD_VAR 0 17
34410: ST_TO_ADDR
// if buildings then
34411: LD_VAR 0 18
34415: IFFALSE 35737
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34417: LD_ADDR_VAR 0 19
34421: PUSH
34422: LD_VAR 0 18
34426: PPUSH
34427: LD_INT 2
34429: PUSH
34430: LD_INT 30
34432: PUSH
34433: LD_INT 29
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 30
34442: PUSH
34443: LD_INT 30
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 72
34459: ST_TO_ADDR
// if tmp then
34460: LD_VAR 0 19
34464: IFFALSE 34512
// for i in tmp do
34466: LD_ADDR_VAR 0 8
34470: PUSH
34471: LD_VAR 0 19
34475: PUSH
34476: FOR_IN
34477: IFFALSE 34510
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34479: LD_VAR 0 8
34483: PPUSH
34484: CALL_OW 250
34488: PPUSH
34489: LD_VAR 0 8
34493: PPUSH
34494: CALL_OW 251
34498: PPUSH
34499: LD_VAR 0 16
34503: PPUSH
34504: CALL_OW 441
34508: GO 34476
34510: POP
34511: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34512: LD_VAR 0 18
34516: PPUSH
34517: LD_INT 2
34519: PUSH
34520: LD_INT 30
34522: PUSH
34523: LD_INT 32
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 30
34532: PUSH
34533: LD_INT 33
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: LIST
34544: PPUSH
34545: CALL_OW 72
34549: IFFALSE 34637
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34551: LD_ADDR_VAR 0 8
34555: PUSH
34556: LD_VAR 0 18
34560: PPUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 30
34566: PUSH
34567: LD_INT 32
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 30
34576: PUSH
34577: LD_INT 33
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: PPUSH
34589: CALL_OW 72
34593: PUSH
34594: FOR_IN
34595: IFFALSE 34635
// begin if not GetBWeapon ( i ) then
34597: LD_VAR 0 8
34601: PPUSH
34602: CALL_OW 269
34606: NOT
34607: IFFALSE 34633
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34609: LD_VAR 0 8
34613: PPUSH
34614: LD_VAR 0 8
34618: PPUSH
34619: LD_VAR 0 2
34623: PPUSH
34624: CALL 35883 0 2
34628: PPUSH
34629: CALL_OW 431
// end ;
34633: GO 34594
34635: POP
34636: POP
// end ; for i = 1 to personel do
34637: LD_ADDR_VAR 0 8
34641: PUSH
34642: DOUBLE
34643: LD_INT 1
34645: DEC
34646: ST_TO_ADDR
34647: LD_VAR 0 6
34651: PUSH
34652: FOR_TO
34653: IFFALSE 35717
// begin if i > 4 then
34655: LD_VAR 0 8
34659: PUSH
34660: LD_INT 4
34662: GREATER
34663: IFFALSE 34667
// break ;
34665: GO 35717
// case i of 1 :
34667: LD_VAR 0 8
34671: PUSH
34672: LD_INT 1
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34680
34678: GO 34760
34680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34681: LD_ADDR_VAR 0 12
34685: PUSH
34686: LD_VAR 0 18
34690: PPUSH
34691: LD_INT 22
34693: PUSH
34694: LD_VAR 0 16
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 58
34705: PUSH
34706: EMPTY
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: LD_INT 30
34714: PUSH
34715: LD_INT 32
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 30
34724: PUSH
34725: LD_INT 4
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 30
34734: PUSH
34735: LD_INT 5
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: PPUSH
34753: CALL_OW 72
34757: ST_TO_ADDR
34758: GO 34982
34760: LD_INT 2
34762: DOUBLE
34763: EQUAL
34764: IFTRUE 34768
34766: GO 34830
34768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34769: LD_ADDR_VAR 0 12
34773: PUSH
34774: LD_VAR 0 18
34778: PPUSH
34779: LD_INT 22
34781: PUSH
34782: LD_VAR 0 16
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: LD_INT 30
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 30
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PPUSH
34823: CALL_OW 72
34827: ST_TO_ADDR
34828: GO 34982
34830: LD_INT 3
34832: DOUBLE
34833: EQUAL
34834: IFTRUE 34838
34836: GO 34900
34838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34839: LD_ADDR_VAR 0 12
34843: PUSH
34844: LD_VAR 0 18
34848: PPUSH
34849: LD_INT 22
34851: PUSH
34852: LD_VAR 0 16
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: LD_INT 30
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 30
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PPUSH
34893: CALL_OW 72
34897: ST_TO_ADDR
34898: GO 34982
34900: LD_INT 4
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34981
34908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34909: LD_ADDR_VAR 0 12
34913: PUSH
34914: LD_VAR 0 18
34918: PPUSH
34919: LD_INT 22
34921: PUSH
34922: LD_VAR 0 16
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 30
34936: PUSH
34937: LD_INT 6
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 30
34946: PUSH
34947: LD_INT 7
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 30
34956: PUSH
34957: LD_INT 8
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PPUSH
34974: CALL_OW 72
34978: ST_TO_ADDR
34979: GO 34982
34981: POP
// if i = 1 then
34982: LD_VAR 0 8
34986: PUSH
34987: LD_INT 1
34989: EQUAL
34990: IFFALSE 35101
// begin tmp := [ ] ;
34992: LD_ADDR_VAR 0 19
34996: PUSH
34997: EMPTY
34998: ST_TO_ADDR
// for j in f do
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_VAR 0 12
35008: PUSH
35009: FOR_IN
35010: IFFALSE 35083
// if GetBType ( j ) = b_bunker then
35012: LD_VAR 0 9
35016: PPUSH
35017: CALL_OW 266
35021: PUSH
35022: LD_INT 32
35024: EQUAL
35025: IFFALSE 35052
// tmp := Insert ( tmp , 1 , j ) else
35027: LD_ADDR_VAR 0 19
35031: PUSH
35032: LD_VAR 0 19
35036: PPUSH
35037: LD_INT 1
35039: PPUSH
35040: LD_VAR 0 9
35044: PPUSH
35045: CALL_OW 2
35049: ST_TO_ADDR
35050: GO 35081
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35052: LD_ADDR_VAR 0 19
35056: PUSH
35057: LD_VAR 0 19
35061: PPUSH
35062: LD_VAR 0 19
35066: PUSH
35067: LD_INT 1
35069: PLUS
35070: PPUSH
35071: LD_VAR 0 9
35075: PPUSH
35076: CALL_OW 2
35080: ST_TO_ADDR
35081: GO 35009
35083: POP
35084: POP
// if tmp then
35085: LD_VAR 0 19
35089: IFFALSE 35101
// f := tmp ;
35091: LD_ADDR_VAR 0 12
35095: PUSH
35096: LD_VAR 0 19
35100: ST_TO_ADDR
// end ; x := personel [ i ] ;
35101: LD_ADDR_VAR 0 13
35105: PUSH
35106: LD_VAR 0 6
35110: PUSH
35111: LD_VAR 0 8
35115: ARRAY
35116: ST_TO_ADDR
// if x = - 1 then
35117: LD_VAR 0 13
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: EQUAL
35126: IFFALSE 35335
// begin for j in f do
35128: LD_ADDR_VAR 0 9
35132: PUSH
35133: LD_VAR 0 12
35137: PUSH
35138: FOR_IN
35139: IFFALSE 35331
// repeat InitHc ;
35141: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35145: LD_VAR 0 9
35149: PPUSH
35150: CALL_OW 266
35154: PUSH
35155: LD_INT 5
35157: EQUAL
35158: IFFALSE 35228
// begin if UnitsInside ( j ) < 3 then
35160: LD_VAR 0 9
35164: PPUSH
35165: CALL_OW 313
35169: PUSH
35170: LD_INT 3
35172: LESS
35173: IFFALSE 35209
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35175: LD_INT 0
35177: PPUSH
35178: LD_INT 5
35180: PUSH
35181: LD_INT 8
35183: PUSH
35184: LD_INT 9
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: PUSH
35192: LD_VAR 0 17
35196: ARRAY
35197: PPUSH
35198: LD_VAR 0 4
35202: PPUSH
35203: CALL_OW 380
35207: GO 35226
// PrepareHuman ( false , i , skill ) ;
35209: LD_INT 0
35211: PPUSH
35212: LD_VAR 0 8
35216: PPUSH
35217: LD_VAR 0 4
35221: PPUSH
35222: CALL_OW 380
// end else
35226: GO 35245
// PrepareHuman ( false , i , skill ) ;
35228: LD_INT 0
35230: PPUSH
35231: LD_VAR 0 8
35235: PPUSH
35236: LD_VAR 0 4
35240: PPUSH
35241: CALL_OW 380
// un := CreateHuman ;
35245: LD_ADDR_VAR 0 14
35249: PUSH
35250: CALL_OW 44
35254: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35255: LD_ADDR_VAR 0 7
35259: PUSH
35260: LD_VAR 0 7
35264: PPUSH
35265: LD_INT 1
35267: PPUSH
35268: LD_VAR 0 14
35272: PPUSH
35273: CALL_OW 2
35277: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35278: LD_VAR 0 14
35282: PPUSH
35283: LD_VAR 0 9
35287: PPUSH
35288: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35292: LD_VAR 0 9
35296: PPUSH
35297: CALL_OW 313
35301: PUSH
35302: LD_INT 6
35304: EQUAL
35305: PUSH
35306: LD_VAR 0 9
35310: PPUSH
35311: CALL_OW 266
35315: PUSH
35316: LD_INT 32
35318: PUSH
35319: LD_INT 31
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: IN
35326: OR
35327: IFFALSE 35141
35329: GO 35138
35331: POP
35332: POP
// end else
35333: GO 35715
// for j = 1 to x do
35335: LD_ADDR_VAR 0 9
35339: PUSH
35340: DOUBLE
35341: LD_INT 1
35343: DEC
35344: ST_TO_ADDR
35345: LD_VAR 0 13
35349: PUSH
35350: FOR_TO
35351: IFFALSE 35713
// begin InitHc ;
35353: CALL_OW 19
// if not f then
35357: LD_VAR 0 12
35361: NOT
35362: IFFALSE 35451
// begin PrepareHuman ( false , i , skill ) ;
35364: LD_INT 0
35366: PPUSH
35367: LD_VAR 0 8
35371: PPUSH
35372: LD_VAR 0 4
35376: PPUSH
35377: CALL_OW 380
// un := CreateHuman ;
35381: LD_ADDR_VAR 0 14
35385: PUSH
35386: CALL_OW 44
35390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35391: LD_ADDR_VAR 0 7
35395: PUSH
35396: LD_VAR 0 7
35400: PPUSH
35401: LD_INT 1
35403: PPUSH
35404: LD_VAR 0 14
35408: PPUSH
35409: CALL_OW 2
35413: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35414: LD_VAR 0 14
35418: PPUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 250
35428: PPUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 251
35438: PPUSH
35439: LD_INT 10
35441: PPUSH
35442: LD_INT 0
35444: PPUSH
35445: CALL_OW 50
// continue ;
35449: GO 35350
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35451: LD_VAR 0 12
35455: PUSH
35456: LD_INT 1
35458: ARRAY
35459: PPUSH
35460: CALL_OW 313
35464: PUSH
35465: LD_VAR 0 12
35469: PUSH
35470: LD_INT 1
35472: ARRAY
35473: PPUSH
35474: CALL_OW 266
35478: PUSH
35479: LD_INT 32
35481: PUSH
35482: LD_INT 31
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: IN
35489: AND
35490: PUSH
35491: LD_VAR 0 12
35495: PUSH
35496: LD_INT 1
35498: ARRAY
35499: PPUSH
35500: CALL_OW 313
35504: PUSH
35505: LD_INT 6
35507: EQUAL
35508: OR
35509: IFFALSE 35529
// f := Delete ( f , 1 ) ;
35511: LD_ADDR_VAR 0 12
35515: PUSH
35516: LD_VAR 0 12
35520: PPUSH
35521: LD_INT 1
35523: PPUSH
35524: CALL_OW 3
35528: ST_TO_ADDR
// if not f then
35529: LD_VAR 0 12
35533: NOT
35534: IFFALSE 35552
// begin x := x + 2 ;
35536: LD_ADDR_VAR 0 13
35540: PUSH
35541: LD_VAR 0 13
35545: PUSH
35546: LD_INT 2
35548: PLUS
35549: ST_TO_ADDR
// continue ;
35550: GO 35350
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35552: LD_VAR 0 12
35556: PUSH
35557: LD_INT 1
35559: ARRAY
35560: PPUSH
35561: CALL_OW 266
35565: PUSH
35566: LD_INT 5
35568: EQUAL
35569: IFFALSE 35643
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35571: LD_VAR 0 12
35575: PUSH
35576: LD_INT 1
35578: ARRAY
35579: PPUSH
35580: CALL_OW 313
35584: PUSH
35585: LD_INT 3
35587: LESS
35588: IFFALSE 35624
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35590: LD_INT 0
35592: PPUSH
35593: LD_INT 5
35595: PUSH
35596: LD_INT 8
35598: PUSH
35599: LD_INT 9
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: PUSH
35607: LD_VAR 0 17
35611: ARRAY
35612: PPUSH
35613: LD_VAR 0 4
35617: PPUSH
35618: CALL_OW 380
35622: GO 35641
// PrepareHuman ( false , i , skill ) ;
35624: LD_INT 0
35626: PPUSH
35627: LD_VAR 0 8
35631: PPUSH
35632: LD_VAR 0 4
35636: PPUSH
35637: CALL_OW 380
// end else
35641: GO 35660
// PrepareHuman ( false , i , skill ) ;
35643: LD_INT 0
35645: PPUSH
35646: LD_VAR 0 8
35650: PPUSH
35651: LD_VAR 0 4
35655: PPUSH
35656: CALL_OW 380
// un := CreateHuman ;
35660: LD_ADDR_VAR 0 14
35664: PUSH
35665: CALL_OW 44
35669: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35670: LD_ADDR_VAR 0 7
35674: PUSH
35675: LD_VAR 0 7
35679: PPUSH
35680: LD_INT 1
35682: PPUSH
35683: LD_VAR 0 14
35687: PPUSH
35688: CALL_OW 2
35692: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35693: LD_VAR 0 14
35697: PPUSH
35698: LD_VAR 0 12
35702: PUSH
35703: LD_INT 1
35705: ARRAY
35706: PPUSH
35707: CALL_OW 52
// end ;
35711: GO 35350
35713: POP
35714: POP
// end ;
35715: GO 34652
35717: POP
35718: POP
// result := result ^ buildings ;
35719: LD_ADDR_VAR 0 7
35723: PUSH
35724: LD_VAR 0 7
35728: PUSH
35729: LD_VAR 0 18
35733: ADD
35734: ST_TO_ADDR
// end else
35735: GO 35878
// begin for i = 1 to personel do
35737: LD_ADDR_VAR 0 8
35741: PUSH
35742: DOUBLE
35743: LD_INT 1
35745: DEC
35746: ST_TO_ADDR
35747: LD_VAR 0 6
35751: PUSH
35752: FOR_TO
35753: IFFALSE 35876
// begin if i > 4 then
35755: LD_VAR 0 8
35759: PUSH
35760: LD_INT 4
35762: GREATER
35763: IFFALSE 35767
// break ;
35765: GO 35876
// x := personel [ i ] ;
35767: LD_ADDR_VAR 0 13
35771: PUSH
35772: LD_VAR 0 6
35776: PUSH
35777: LD_VAR 0 8
35781: ARRAY
35782: ST_TO_ADDR
// if x = - 1 then
35783: LD_VAR 0 13
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: EQUAL
35792: IFFALSE 35796
// continue ;
35794: GO 35752
// PrepareHuman ( false , i , skill ) ;
35796: LD_INT 0
35798: PPUSH
35799: LD_VAR 0 8
35803: PPUSH
35804: LD_VAR 0 4
35808: PPUSH
35809: CALL_OW 380
// un := CreateHuman ;
35813: LD_ADDR_VAR 0 14
35817: PUSH
35818: CALL_OW 44
35822: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35823: LD_VAR 0 14
35827: PPUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 250
35837: PPUSH
35838: LD_VAR 0 1
35842: PPUSH
35843: CALL_OW 251
35847: PPUSH
35848: LD_INT 10
35850: PPUSH
35851: LD_INT 0
35853: PPUSH
35854: CALL_OW 50
// result := result ^ un ;
35858: LD_ADDR_VAR 0 7
35862: PUSH
35863: LD_VAR 0 7
35867: PUSH
35868: LD_VAR 0 14
35872: ADD
35873: ST_TO_ADDR
// end ;
35874: GO 35752
35876: POP
35877: POP
// end ; end ;
35878: LD_VAR 0 7
35882: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35883: LD_INT 0
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
35889: PPUSH
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
// result := false ;
35901: LD_ADDR_VAR 0 3
35905: PUSH
35906: LD_INT 0
35908: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35909: LD_VAR 0 1
35913: NOT
35914: PUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 266
35924: PUSH
35925: LD_INT 32
35927: PUSH
35928: LD_INT 33
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: IN
35935: NOT
35936: OR
35937: IFFALSE 35941
// exit ;
35939: GO 37050
// nat := GetNation ( tower ) ;
35941: LD_ADDR_VAR 0 12
35945: PUSH
35946: LD_VAR 0 1
35950: PPUSH
35951: CALL_OW 248
35955: ST_TO_ADDR
// side := GetSide ( tower ) ;
35956: LD_ADDR_VAR 0 16
35960: PUSH
35961: LD_VAR 0 1
35965: PPUSH
35966: CALL_OW 255
35970: ST_TO_ADDR
// x := GetX ( tower ) ;
35971: LD_ADDR_VAR 0 10
35975: PUSH
35976: LD_VAR 0 1
35980: PPUSH
35981: CALL_OW 250
35985: ST_TO_ADDR
// y := GetY ( tower ) ;
35986: LD_ADDR_VAR 0 11
35990: PUSH
35991: LD_VAR 0 1
35995: PPUSH
35996: CALL_OW 251
36000: ST_TO_ADDR
// if not x or not y then
36001: LD_VAR 0 10
36005: NOT
36006: PUSH
36007: LD_VAR 0 11
36011: NOT
36012: OR
36013: IFFALSE 36017
// exit ;
36015: GO 37050
// weapon := 0 ;
36017: LD_ADDR_VAR 0 18
36021: PUSH
36022: LD_INT 0
36024: ST_TO_ADDR
// fac_list := [ ] ;
36025: LD_ADDR_VAR 0 17
36029: PUSH
36030: EMPTY
36031: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36032: LD_ADDR_VAR 0 6
36036: PUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL_OW 274
36046: PPUSH
36047: LD_VAR 0 2
36051: PPUSH
36052: LD_INT 0
36054: PPUSH
36055: CALL 33621 0 3
36059: PPUSH
36060: LD_INT 30
36062: PUSH
36063: LD_INT 3
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PPUSH
36070: CALL_OW 72
36074: ST_TO_ADDR
// if not factories then
36075: LD_VAR 0 6
36079: NOT
36080: IFFALSE 36084
// exit ;
36082: GO 37050
// for i in factories do
36084: LD_ADDR_VAR 0 8
36088: PUSH
36089: LD_VAR 0 6
36093: PUSH
36094: FOR_IN
36095: IFFALSE 36120
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36097: LD_ADDR_VAR 0 17
36101: PUSH
36102: LD_VAR 0 17
36106: PUSH
36107: LD_VAR 0 8
36111: PPUSH
36112: CALL_OW 478
36116: UNION
36117: ST_TO_ADDR
36118: GO 36094
36120: POP
36121: POP
// if not fac_list then
36122: LD_VAR 0 17
36126: NOT
36127: IFFALSE 36131
// exit ;
36129: GO 37050
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36131: LD_ADDR_VAR 0 5
36135: PUSH
36136: LD_INT 4
36138: PUSH
36139: LD_INT 5
36141: PUSH
36142: LD_INT 9
36144: PUSH
36145: LD_INT 10
36147: PUSH
36148: LD_INT 6
36150: PUSH
36151: LD_INT 7
36153: PUSH
36154: LD_INT 11
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 27
36168: PUSH
36169: LD_INT 28
36171: PUSH
36172: LD_INT 26
36174: PUSH
36175: LD_INT 30
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 43
36186: PUSH
36187: LD_INT 44
36189: PUSH
36190: LD_INT 46
36192: PUSH
36193: LD_INT 45
36195: PUSH
36196: LD_INT 47
36198: PUSH
36199: LD_INT 49
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: LIST
36214: PUSH
36215: LD_VAR 0 12
36219: ARRAY
36220: ST_TO_ADDR
// list := list isect fac_list ;
36221: LD_ADDR_VAR 0 5
36225: PUSH
36226: LD_VAR 0 5
36230: PUSH
36231: LD_VAR 0 17
36235: ISECT
36236: ST_TO_ADDR
// if not list then
36237: LD_VAR 0 5
36241: NOT
36242: IFFALSE 36246
// exit ;
36244: GO 37050
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36246: LD_VAR 0 12
36250: PUSH
36251: LD_INT 3
36253: EQUAL
36254: PUSH
36255: LD_INT 49
36257: PUSH
36258: LD_VAR 0 5
36262: IN
36263: AND
36264: PUSH
36265: LD_INT 31
36267: PPUSH
36268: LD_VAR 0 16
36272: PPUSH
36273: CALL_OW 321
36277: PUSH
36278: LD_INT 2
36280: EQUAL
36281: AND
36282: IFFALSE 36342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36284: LD_INT 22
36286: PUSH
36287: LD_VAR 0 16
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 35
36298: PUSH
36299: LD_INT 49
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 91
36308: PUSH
36309: LD_VAR 0 1
36313: PUSH
36314: LD_INT 10
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: PPUSH
36327: CALL_OW 69
36331: NOT
36332: IFFALSE 36342
// weapon := ru_time_lapser ;
36334: LD_ADDR_VAR 0 18
36338: PUSH
36339: LD_INT 49
36341: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36342: LD_VAR 0 12
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: IN
36357: PUSH
36358: LD_INT 11
36360: PUSH
36361: LD_VAR 0 5
36365: IN
36366: PUSH
36367: LD_INT 30
36369: PUSH
36370: LD_VAR 0 5
36374: IN
36375: OR
36376: AND
36377: PUSH
36378: LD_INT 6
36380: PPUSH
36381: LD_VAR 0 16
36385: PPUSH
36386: CALL_OW 321
36390: PUSH
36391: LD_INT 2
36393: EQUAL
36394: AND
36395: IFFALSE 36560
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36397: LD_INT 22
36399: PUSH
36400: LD_VAR 0 16
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: LD_INT 35
36414: PUSH
36415: LD_INT 11
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 35
36424: PUSH
36425: LD_INT 30
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 91
36439: PUSH
36440: LD_VAR 0 1
36444: PUSH
36445: LD_INT 18
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: PPUSH
36458: CALL_OW 69
36462: NOT
36463: PUSH
36464: LD_INT 22
36466: PUSH
36467: LD_VAR 0 16
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 30
36481: PUSH
36482: LD_INT 32
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 30
36491: PUSH
36492: LD_INT 33
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 91
36506: PUSH
36507: LD_VAR 0 1
36511: PUSH
36512: LD_INT 12
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: PPUSH
36528: CALL_OW 69
36532: PUSH
36533: LD_INT 2
36535: GREATER
36536: AND
36537: IFFALSE 36560
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36539: LD_ADDR_VAR 0 18
36543: PUSH
36544: LD_INT 11
36546: PUSH
36547: LD_INT 30
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_VAR 0 12
36558: ARRAY
36559: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36560: LD_VAR 0 18
36564: NOT
36565: PUSH
36566: LD_INT 40
36568: PPUSH
36569: LD_VAR 0 16
36573: PPUSH
36574: CALL_OW 321
36578: PUSH
36579: LD_INT 2
36581: EQUAL
36582: AND
36583: PUSH
36584: LD_INT 7
36586: PUSH
36587: LD_VAR 0 5
36591: IN
36592: PUSH
36593: LD_INT 28
36595: PUSH
36596: LD_VAR 0 5
36600: IN
36601: OR
36602: PUSH
36603: LD_INT 45
36605: PUSH
36606: LD_VAR 0 5
36610: IN
36611: OR
36612: AND
36613: IFFALSE 36867
// begin hex := GetHexInfo ( x , y ) ;
36615: LD_ADDR_VAR 0 4
36619: PUSH
36620: LD_VAR 0 10
36624: PPUSH
36625: LD_VAR 0 11
36629: PPUSH
36630: CALL_OW 546
36634: ST_TO_ADDR
// if hex [ 1 ] then
36635: LD_VAR 0 4
36639: PUSH
36640: LD_INT 1
36642: ARRAY
36643: IFFALSE 36647
// exit ;
36645: GO 37050
// height := hex [ 2 ] ;
36647: LD_ADDR_VAR 0 15
36651: PUSH
36652: LD_VAR 0 4
36656: PUSH
36657: LD_INT 2
36659: ARRAY
36660: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36661: LD_ADDR_VAR 0 14
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: LD_INT 5
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
// for i in tmp do
36684: LD_ADDR_VAR 0 8
36688: PUSH
36689: LD_VAR 0 14
36693: PUSH
36694: FOR_IN
36695: IFFALSE 36865
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36697: LD_ADDR_VAR 0 9
36701: PUSH
36702: LD_VAR 0 10
36706: PPUSH
36707: LD_VAR 0 8
36711: PPUSH
36712: LD_INT 5
36714: PPUSH
36715: CALL_OW 272
36719: PUSH
36720: LD_VAR 0 11
36724: PPUSH
36725: LD_VAR 0 8
36729: PPUSH
36730: LD_INT 5
36732: PPUSH
36733: CALL_OW 273
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36742: LD_VAR 0 9
36746: PUSH
36747: LD_INT 1
36749: ARRAY
36750: PPUSH
36751: LD_VAR 0 9
36755: PUSH
36756: LD_INT 2
36758: ARRAY
36759: PPUSH
36760: CALL_OW 488
36764: IFFALSE 36863
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36766: LD_ADDR_VAR 0 4
36770: PUSH
36771: LD_VAR 0 9
36775: PUSH
36776: LD_INT 1
36778: ARRAY
36779: PPUSH
36780: LD_VAR 0 9
36784: PUSH
36785: LD_INT 2
36787: ARRAY
36788: PPUSH
36789: CALL_OW 546
36793: ST_TO_ADDR
// if hex [ 1 ] then
36794: LD_VAR 0 4
36798: PUSH
36799: LD_INT 1
36801: ARRAY
36802: IFFALSE 36806
// continue ;
36804: GO 36694
// h := hex [ 2 ] ;
36806: LD_ADDR_VAR 0 13
36810: PUSH
36811: LD_VAR 0 4
36815: PUSH
36816: LD_INT 2
36818: ARRAY
36819: ST_TO_ADDR
// if h + 7 < height then
36820: LD_VAR 0 13
36824: PUSH
36825: LD_INT 7
36827: PLUS
36828: PUSH
36829: LD_VAR 0 15
36833: LESS
36834: IFFALSE 36863
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36836: LD_ADDR_VAR 0 18
36840: PUSH
36841: LD_INT 7
36843: PUSH
36844: LD_INT 28
36846: PUSH
36847: LD_INT 45
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: LIST
36854: PUSH
36855: LD_VAR 0 12
36859: ARRAY
36860: ST_TO_ADDR
// break ;
36861: GO 36865
// end ; end ; end ;
36863: GO 36694
36865: POP
36866: POP
// end ; if not weapon then
36867: LD_VAR 0 18
36871: NOT
36872: IFFALSE 36932
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36874: LD_ADDR_VAR 0 5
36878: PUSH
36879: LD_VAR 0 5
36883: PUSH
36884: LD_INT 11
36886: PUSH
36887: LD_INT 30
36889: PUSH
36890: LD_INT 49
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: DIFF
36898: ST_TO_ADDR
// if not list then
36899: LD_VAR 0 5
36903: NOT
36904: IFFALSE 36908
// exit ;
36906: GO 37050
// weapon := list [ rand ( 1 , list ) ] ;
36908: LD_ADDR_VAR 0 18
36912: PUSH
36913: LD_VAR 0 5
36917: PUSH
36918: LD_INT 1
36920: PPUSH
36921: LD_VAR 0 5
36925: PPUSH
36926: CALL_OW 12
36930: ARRAY
36931: ST_TO_ADDR
// end ; if weapon then
36932: LD_VAR 0 18
36936: IFFALSE 37050
// begin tmp := CostOfWeapon ( weapon ) ;
36938: LD_ADDR_VAR 0 14
36942: PUSH
36943: LD_VAR 0 18
36947: PPUSH
36948: CALL_OW 451
36952: ST_TO_ADDR
// j := GetBase ( tower ) ;
36953: LD_ADDR_VAR 0 9
36957: PUSH
36958: LD_VAR 0 1
36962: PPUSH
36963: CALL_OW 274
36967: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36968: LD_VAR 0 9
36972: PPUSH
36973: LD_INT 1
36975: PPUSH
36976: CALL_OW 275
36980: PUSH
36981: LD_VAR 0 14
36985: PUSH
36986: LD_INT 1
36988: ARRAY
36989: GREATEREQUAL
36990: PUSH
36991: LD_VAR 0 9
36995: PPUSH
36996: LD_INT 2
36998: PPUSH
36999: CALL_OW 275
37003: PUSH
37004: LD_VAR 0 14
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: GREATEREQUAL
37013: AND
37014: PUSH
37015: LD_VAR 0 9
37019: PPUSH
37020: LD_INT 3
37022: PPUSH
37023: CALL_OW 275
37027: PUSH
37028: LD_VAR 0 14
37032: PUSH
37033: LD_INT 3
37035: ARRAY
37036: GREATEREQUAL
37037: AND
37038: IFFALSE 37050
// result := weapon ;
37040: LD_ADDR_VAR 0 3
37044: PUSH
37045: LD_VAR 0 18
37049: ST_TO_ADDR
// end ; end ;
37050: LD_VAR 0 3
37054: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37055: LD_INT 0
37057: PPUSH
37058: PPUSH
// result := true ;
37059: LD_ADDR_VAR 0 3
37063: PUSH
37064: LD_INT 1
37066: ST_TO_ADDR
// if array1 = array2 then
37067: LD_VAR 0 1
37071: PUSH
37072: LD_VAR 0 2
37076: EQUAL
37077: IFFALSE 37137
// begin for i = 1 to array1 do
37079: LD_ADDR_VAR 0 4
37083: PUSH
37084: DOUBLE
37085: LD_INT 1
37087: DEC
37088: ST_TO_ADDR
37089: LD_VAR 0 1
37093: PUSH
37094: FOR_TO
37095: IFFALSE 37133
// if array1 [ i ] <> array2 [ i ] then
37097: LD_VAR 0 1
37101: PUSH
37102: LD_VAR 0 4
37106: ARRAY
37107: PUSH
37108: LD_VAR 0 2
37112: PUSH
37113: LD_VAR 0 4
37117: ARRAY
37118: NONEQUAL
37119: IFFALSE 37131
// begin result := false ;
37121: LD_ADDR_VAR 0 3
37125: PUSH
37126: LD_INT 0
37128: ST_TO_ADDR
// break ;
37129: GO 37133
// end ;
37131: GO 37094
37133: POP
37134: POP
// end else
37135: GO 37145
// result := false ;
37137: LD_ADDR_VAR 0 3
37141: PUSH
37142: LD_INT 0
37144: ST_TO_ADDR
// end ;
37145: LD_VAR 0 3
37149: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37150: LD_INT 0
37152: PPUSH
37153: PPUSH
// if not array1 or not array2 then
37154: LD_VAR 0 1
37158: NOT
37159: PUSH
37160: LD_VAR 0 2
37164: NOT
37165: OR
37166: IFFALSE 37170
// exit ;
37168: GO 37234
// result := true ;
37170: LD_ADDR_VAR 0 3
37174: PUSH
37175: LD_INT 1
37177: ST_TO_ADDR
// for i = 1 to array1 do
37178: LD_ADDR_VAR 0 4
37182: PUSH
37183: DOUBLE
37184: LD_INT 1
37186: DEC
37187: ST_TO_ADDR
37188: LD_VAR 0 1
37192: PUSH
37193: FOR_TO
37194: IFFALSE 37232
// if array1 [ i ] <> array2 [ i ] then
37196: LD_VAR 0 1
37200: PUSH
37201: LD_VAR 0 4
37205: ARRAY
37206: PUSH
37207: LD_VAR 0 2
37211: PUSH
37212: LD_VAR 0 4
37216: ARRAY
37217: NONEQUAL
37218: IFFALSE 37230
// begin result := false ;
37220: LD_ADDR_VAR 0 3
37224: PUSH
37225: LD_INT 0
37227: ST_TO_ADDR
// break ;
37228: GO 37232
// end ;
37230: GO 37193
37232: POP
37233: POP
// end ;
37234: LD_VAR 0 3
37238: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37239: LD_INT 0
37241: PPUSH
37242: PPUSH
37243: PPUSH
// pom := GetBase ( fac ) ;
37244: LD_ADDR_VAR 0 5
37248: PUSH
37249: LD_VAR 0 1
37253: PPUSH
37254: CALL_OW 274
37258: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37259: LD_ADDR_VAR 0 4
37263: PUSH
37264: LD_VAR 0 2
37268: PUSH
37269: LD_INT 1
37271: ARRAY
37272: PPUSH
37273: LD_VAR 0 2
37277: PUSH
37278: LD_INT 2
37280: ARRAY
37281: PPUSH
37282: LD_VAR 0 2
37286: PUSH
37287: LD_INT 3
37289: ARRAY
37290: PPUSH
37291: LD_VAR 0 2
37295: PUSH
37296: LD_INT 4
37298: ARRAY
37299: PPUSH
37300: CALL_OW 449
37304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37305: LD_ADDR_VAR 0 3
37309: PUSH
37310: LD_VAR 0 5
37314: PPUSH
37315: LD_INT 1
37317: PPUSH
37318: CALL_OW 275
37322: PUSH
37323: LD_VAR 0 4
37327: PUSH
37328: LD_INT 1
37330: ARRAY
37331: GREATEREQUAL
37332: PUSH
37333: LD_VAR 0 5
37337: PPUSH
37338: LD_INT 2
37340: PPUSH
37341: CALL_OW 275
37345: PUSH
37346: LD_VAR 0 4
37350: PUSH
37351: LD_INT 2
37353: ARRAY
37354: GREATEREQUAL
37355: AND
37356: PUSH
37357: LD_VAR 0 5
37361: PPUSH
37362: LD_INT 3
37364: PPUSH
37365: CALL_OW 275
37369: PUSH
37370: LD_VAR 0 4
37374: PUSH
37375: LD_INT 3
37377: ARRAY
37378: GREATEREQUAL
37379: AND
37380: ST_TO_ADDR
// end ;
37381: LD_VAR 0 3
37385: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37386: LD_INT 0
37388: PPUSH
37389: PPUSH
37390: PPUSH
37391: PPUSH
// pom := GetBase ( building ) ;
37392: LD_ADDR_VAR 0 3
37396: PUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 274
37406: ST_TO_ADDR
// if not pom then
37407: LD_VAR 0 3
37411: NOT
37412: IFFALSE 37416
// exit ;
37414: GO 37586
// btype := GetBType ( building ) ;
37416: LD_ADDR_VAR 0 5
37420: PUSH
37421: LD_VAR 0 1
37425: PPUSH
37426: CALL_OW 266
37430: ST_TO_ADDR
// if btype = b_armoury then
37431: LD_VAR 0 5
37435: PUSH
37436: LD_INT 4
37438: EQUAL
37439: IFFALSE 37449
// btype := b_barracks ;
37441: LD_ADDR_VAR 0 5
37445: PUSH
37446: LD_INT 5
37448: ST_TO_ADDR
// if btype = b_depot then
37449: LD_VAR 0 5
37453: PUSH
37454: LD_INT 0
37456: EQUAL
37457: IFFALSE 37467
// btype := b_warehouse ;
37459: LD_ADDR_VAR 0 5
37463: PUSH
37464: LD_INT 1
37466: ST_TO_ADDR
// if btype = b_workshop then
37467: LD_VAR 0 5
37471: PUSH
37472: LD_INT 2
37474: EQUAL
37475: IFFALSE 37485
// btype := b_factory ;
37477: LD_ADDR_VAR 0 5
37481: PUSH
37482: LD_INT 3
37484: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37485: LD_ADDR_VAR 0 4
37489: PUSH
37490: LD_VAR 0 5
37494: PPUSH
37495: LD_VAR 0 1
37499: PPUSH
37500: CALL_OW 248
37504: PPUSH
37505: CALL_OW 450
37509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37510: LD_ADDR_VAR 0 2
37514: PUSH
37515: LD_VAR 0 3
37519: PPUSH
37520: LD_INT 1
37522: PPUSH
37523: CALL_OW 275
37527: PUSH
37528: LD_VAR 0 4
37532: PUSH
37533: LD_INT 1
37535: ARRAY
37536: GREATEREQUAL
37537: PUSH
37538: LD_VAR 0 3
37542: PPUSH
37543: LD_INT 2
37545: PPUSH
37546: CALL_OW 275
37550: PUSH
37551: LD_VAR 0 4
37555: PUSH
37556: LD_INT 2
37558: ARRAY
37559: GREATEREQUAL
37560: AND
37561: PUSH
37562: LD_VAR 0 3
37566: PPUSH
37567: LD_INT 3
37569: PPUSH
37570: CALL_OW 275
37574: PUSH
37575: LD_VAR 0 4
37579: PUSH
37580: LD_INT 3
37582: ARRAY
37583: GREATEREQUAL
37584: AND
37585: ST_TO_ADDR
// end ;
37586: LD_VAR 0 2
37590: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37591: LD_INT 0
37593: PPUSH
37594: PPUSH
37595: PPUSH
// pom := GetBase ( building ) ;
37596: LD_ADDR_VAR 0 4
37600: PUSH
37601: LD_VAR 0 1
37605: PPUSH
37606: CALL_OW 274
37610: ST_TO_ADDR
// if not pom then
37611: LD_VAR 0 4
37615: NOT
37616: IFFALSE 37620
// exit ;
37618: GO 37721
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37620: LD_ADDR_VAR 0 5
37624: PUSH
37625: LD_VAR 0 2
37629: PPUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 248
37639: PPUSH
37640: CALL_OW 450
37644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37645: LD_ADDR_VAR 0 3
37649: PUSH
37650: LD_VAR 0 4
37654: PPUSH
37655: LD_INT 1
37657: PPUSH
37658: CALL_OW 275
37662: PUSH
37663: LD_VAR 0 5
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: GREATEREQUAL
37672: PUSH
37673: LD_VAR 0 4
37677: PPUSH
37678: LD_INT 2
37680: PPUSH
37681: CALL_OW 275
37685: PUSH
37686: LD_VAR 0 5
37690: PUSH
37691: LD_INT 2
37693: ARRAY
37694: GREATEREQUAL
37695: AND
37696: PUSH
37697: LD_VAR 0 4
37701: PPUSH
37702: LD_INT 3
37704: PPUSH
37705: CALL_OW 275
37709: PUSH
37710: LD_VAR 0 5
37714: PUSH
37715: LD_INT 3
37717: ARRAY
37718: GREATEREQUAL
37719: AND
37720: ST_TO_ADDR
// end ;
37721: LD_VAR 0 3
37725: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37726: LD_INT 0
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
// result := false ;
37739: LD_ADDR_VAR 0 8
37743: PUSH
37744: LD_INT 0
37746: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37747: LD_VAR 0 5
37751: NOT
37752: PUSH
37753: LD_VAR 0 1
37757: NOT
37758: OR
37759: PUSH
37760: LD_VAR 0 2
37764: NOT
37765: OR
37766: PUSH
37767: LD_VAR 0 3
37771: NOT
37772: OR
37773: IFFALSE 37777
// exit ;
37775: GO 38591
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37777: LD_ADDR_VAR 0 14
37781: PUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: LD_VAR 0 2
37791: PPUSH
37792: LD_VAR 0 3
37796: PPUSH
37797: LD_VAR 0 4
37801: PPUSH
37802: LD_VAR 0 5
37806: PUSH
37807: LD_INT 1
37809: ARRAY
37810: PPUSH
37811: CALL_OW 248
37815: PPUSH
37816: LD_INT 0
37818: PPUSH
37819: CALL 39824 0 6
37823: ST_TO_ADDR
// if not hexes then
37824: LD_VAR 0 14
37828: NOT
37829: IFFALSE 37833
// exit ;
37831: GO 38591
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37833: LD_ADDR_VAR 0 17
37837: PUSH
37838: LD_VAR 0 5
37842: PPUSH
37843: LD_INT 22
37845: PUSH
37846: LD_VAR 0 13
37850: PPUSH
37851: CALL_OW 255
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 30
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 30
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PPUSH
37892: CALL_OW 72
37896: ST_TO_ADDR
// for i = 1 to hexes do
37897: LD_ADDR_VAR 0 9
37901: PUSH
37902: DOUBLE
37903: LD_INT 1
37905: DEC
37906: ST_TO_ADDR
37907: LD_VAR 0 14
37911: PUSH
37912: FOR_TO
37913: IFFALSE 38589
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37915: LD_ADDR_VAR 0 13
37919: PUSH
37920: LD_VAR 0 14
37924: PUSH
37925: LD_VAR 0 9
37929: ARRAY
37930: PUSH
37931: LD_INT 1
37933: ARRAY
37934: PPUSH
37935: LD_VAR 0 14
37939: PUSH
37940: LD_VAR 0 9
37944: ARRAY
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: PPUSH
37950: CALL_OW 428
37954: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37955: LD_VAR 0 14
37959: PUSH
37960: LD_VAR 0 9
37964: ARRAY
37965: PUSH
37966: LD_INT 1
37968: ARRAY
37969: PPUSH
37970: LD_VAR 0 14
37974: PUSH
37975: LD_VAR 0 9
37979: ARRAY
37980: PUSH
37981: LD_INT 2
37983: ARRAY
37984: PPUSH
37985: CALL_OW 351
37989: PUSH
37990: LD_VAR 0 14
37994: PUSH
37995: LD_VAR 0 9
37999: ARRAY
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: PPUSH
38005: LD_VAR 0 14
38009: PUSH
38010: LD_VAR 0 9
38014: ARRAY
38015: PUSH
38016: LD_INT 2
38018: ARRAY
38019: PPUSH
38020: CALL_OW 488
38024: NOT
38025: OR
38026: PUSH
38027: LD_VAR 0 13
38031: PPUSH
38032: CALL_OW 247
38036: PUSH
38037: LD_INT 3
38039: EQUAL
38040: OR
38041: IFFALSE 38047
// exit ;
38043: POP
38044: POP
38045: GO 38591
// if not tmp then
38047: LD_VAR 0 13
38051: NOT
38052: IFFALSE 38056
// continue ;
38054: GO 37912
// result := true ;
38056: LD_ADDR_VAR 0 8
38060: PUSH
38061: LD_INT 1
38063: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38064: LD_VAR 0 6
38068: PUSH
38069: LD_VAR 0 13
38073: PPUSH
38074: CALL_OW 247
38078: PUSH
38079: LD_INT 2
38081: EQUAL
38082: AND
38083: PUSH
38084: LD_VAR 0 13
38088: PPUSH
38089: CALL_OW 263
38093: PUSH
38094: LD_INT 1
38096: EQUAL
38097: AND
38098: IFFALSE 38262
// begin if IsDrivenBy ( tmp ) then
38100: LD_VAR 0 13
38104: PPUSH
38105: CALL_OW 311
38109: IFFALSE 38113
// continue ;
38111: GO 37912
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38113: LD_VAR 0 6
38117: PPUSH
38118: LD_INT 3
38120: PUSH
38121: LD_INT 60
38123: PUSH
38124: EMPTY
38125: LIST
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: LD_INT 55
38136: PUSH
38137: EMPTY
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PPUSH
38148: CALL_OW 72
38152: IFFALSE 38260
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38154: LD_ADDR_VAR 0 18
38158: PUSH
38159: LD_VAR 0 6
38163: PPUSH
38164: LD_INT 3
38166: PUSH
38167: LD_INT 60
38169: PUSH
38170: EMPTY
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 3
38179: PUSH
38180: LD_INT 55
38182: PUSH
38183: EMPTY
38184: LIST
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PPUSH
38194: CALL_OW 72
38198: PUSH
38199: LD_INT 1
38201: ARRAY
38202: ST_TO_ADDR
// if IsInUnit ( driver ) then
38203: LD_VAR 0 18
38207: PPUSH
38208: CALL_OW 310
38212: IFFALSE 38223
// ComExit ( driver ) ;
38214: LD_VAR 0 18
38218: PPUSH
38219: CALL 63604 0 1
// AddComEnterUnit ( driver , tmp ) ;
38223: LD_VAR 0 18
38227: PPUSH
38228: LD_VAR 0 13
38232: PPUSH
38233: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38237: LD_VAR 0 18
38241: PPUSH
38242: LD_VAR 0 7
38246: PPUSH
38247: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38251: LD_VAR 0 18
38255: PPUSH
38256: CALL_OW 181
// end ; continue ;
38260: GO 37912
// end ; if not cleaners or not tmp in cleaners then
38262: LD_VAR 0 6
38266: NOT
38267: PUSH
38268: LD_VAR 0 13
38272: PUSH
38273: LD_VAR 0 6
38277: IN
38278: NOT
38279: OR
38280: IFFALSE 38587
// begin if dep then
38282: LD_VAR 0 17
38286: IFFALSE 38422
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38288: LD_ADDR_VAR 0 16
38292: PUSH
38293: LD_VAR 0 17
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: CALL_OW 250
38306: PPUSH
38307: LD_VAR 0 17
38311: PUSH
38312: LD_INT 1
38314: ARRAY
38315: PPUSH
38316: CALL_OW 254
38320: PPUSH
38321: LD_INT 5
38323: PPUSH
38324: CALL_OW 272
38328: PUSH
38329: LD_VAR 0 17
38333: PUSH
38334: LD_INT 1
38336: ARRAY
38337: PPUSH
38338: CALL_OW 251
38342: PPUSH
38343: LD_VAR 0 17
38347: PUSH
38348: LD_INT 1
38350: ARRAY
38351: PPUSH
38352: CALL_OW 254
38356: PPUSH
38357: LD_INT 5
38359: PPUSH
38360: CALL_OW 273
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38369: LD_VAR 0 16
38373: PUSH
38374: LD_INT 1
38376: ARRAY
38377: PPUSH
38378: LD_VAR 0 16
38382: PUSH
38383: LD_INT 2
38385: ARRAY
38386: PPUSH
38387: CALL_OW 488
38391: IFFALSE 38422
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38393: LD_VAR 0 13
38397: PPUSH
38398: LD_VAR 0 16
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: LD_VAR 0 16
38411: PUSH
38412: LD_INT 2
38414: ARRAY
38415: PPUSH
38416: CALL_OW 111
// continue ;
38420: GO 37912
// end ; end ; r := GetDir ( tmp ) ;
38422: LD_ADDR_VAR 0 15
38426: PUSH
38427: LD_VAR 0 13
38431: PPUSH
38432: CALL_OW 254
38436: ST_TO_ADDR
// if r = 5 then
38437: LD_VAR 0 15
38441: PUSH
38442: LD_INT 5
38444: EQUAL
38445: IFFALSE 38455
// r := 0 ;
38447: LD_ADDR_VAR 0 15
38451: PUSH
38452: LD_INT 0
38454: ST_TO_ADDR
// for j = r to 5 do
38455: LD_ADDR_VAR 0 10
38459: PUSH
38460: DOUBLE
38461: LD_VAR 0 15
38465: DEC
38466: ST_TO_ADDR
38467: LD_INT 5
38469: PUSH
38470: FOR_TO
38471: IFFALSE 38585
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38473: LD_ADDR_VAR 0 11
38477: PUSH
38478: LD_VAR 0 13
38482: PPUSH
38483: CALL_OW 250
38487: PPUSH
38488: LD_VAR 0 10
38492: PPUSH
38493: LD_INT 2
38495: PPUSH
38496: CALL_OW 272
38500: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38501: LD_ADDR_VAR 0 12
38505: PUSH
38506: LD_VAR 0 13
38510: PPUSH
38511: CALL_OW 251
38515: PPUSH
38516: LD_VAR 0 10
38520: PPUSH
38521: LD_INT 2
38523: PPUSH
38524: CALL_OW 273
38528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38529: LD_VAR 0 11
38533: PPUSH
38534: LD_VAR 0 12
38538: PPUSH
38539: CALL_OW 488
38543: PUSH
38544: LD_VAR 0 11
38548: PPUSH
38549: LD_VAR 0 12
38553: PPUSH
38554: CALL_OW 428
38558: NOT
38559: AND
38560: IFFALSE 38583
// begin ComMoveXY ( tmp , _x , _y ) ;
38562: LD_VAR 0 13
38566: PPUSH
38567: LD_VAR 0 11
38571: PPUSH
38572: LD_VAR 0 12
38576: PPUSH
38577: CALL_OW 111
// break ;
38581: GO 38585
// end ; end ;
38583: GO 38470
38585: POP
38586: POP
// end ; end ;
38587: GO 37912
38589: POP
38590: POP
// end ;
38591: LD_VAR 0 8
38595: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38596: LD_INT 0
38598: PPUSH
// result := true ;
38599: LD_ADDR_VAR 0 3
38603: PUSH
38604: LD_INT 1
38606: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38607: LD_VAR 0 2
38611: PUSH
38612: LD_INT 24
38614: DOUBLE
38615: EQUAL
38616: IFTRUE 38626
38618: LD_INT 33
38620: DOUBLE
38621: EQUAL
38622: IFTRUE 38626
38624: GO 38651
38626: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38627: LD_ADDR_VAR 0 3
38631: PUSH
38632: LD_INT 32
38634: PPUSH
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL_OW 321
38644: PUSH
38645: LD_INT 2
38647: EQUAL
38648: ST_TO_ADDR
38649: GO 38967
38651: LD_INT 20
38653: DOUBLE
38654: EQUAL
38655: IFTRUE 38659
38657: GO 38684
38659: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38660: LD_ADDR_VAR 0 3
38664: PUSH
38665: LD_INT 6
38667: PPUSH
38668: LD_VAR 0 1
38672: PPUSH
38673: CALL_OW 321
38677: PUSH
38678: LD_INT 2
38680: EQUAL
38681: ST_TO_ADDR
38682: GO 38967
38684: LD_INT 22
38686: DOUBLE
38687: EQUAL
38688: IFTRUE 38698
38690: LD_INT 36
38692: DOUBLE
38693: EQUAL
38694: IFTRUE 38698
38696: GO 38723
38698: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38699: LD_ADDR_VAR 0 3
38703: PUSH
38704: LD_INT 15
38706: PPUSH
38707: LD_VAR 0 1
38711: PPUSH
38712: CALL_OW 321
38716: PUSH
38717: LD_INT 2
38719: EQUAL
38720: ST_TO_ADDR
38721: GO 38967
38723: LD_INT 30
38725: DOUBLE
38726: EQUAL
38727: IFTRUE 38731
38729: GO 38756
38731: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38732: LD_ADDR_VAR 0 3
38736: PUSH
38737: LD_INT 20
38739: PPUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 321
38749: PUSH
38750: LD_INT 2
38752: EQUAL
38753: ST_TO_ADDR
38754: GO 38967
38756: LD_INT 28
38758: DOUBLE
38759: EQUAL
38760: IFTRUE 38770
38762: LD_INT 21
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38770
38768: GO 38795
38770: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38771: LD_ADDR_VAR 0 3
38775: PUSH
38776: LD_INT 21
38778: PPUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: CALL_OW 321
38788: PUSH
38789: LD_INT 2
38791: EQUAL
38792: ST_TO_ADDR
38793: GO 38967
38795: LD_INT 16
38797: DOUBLE
38798: EQUAL
38799: IFTRUE 38803
38801: GO 38828
38803: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38804: LD_ADDR_VAR 0 3
38808: PUSH
38809: LD_INT 84
38811: PPUSH
38812: LD_VAR 0 1
38816: PPUSH
38817: CALL_OW 321
38821: PUSH
38822: LD_INT 2
38824: EQUAL
38825: ST_TO_ADDR
38826: GO 38967
38828: LD_INT 19
38830: DOUBLE
38831: EQUAL
38832: IFTRUE 38842
38834: LD_INT 23
38836: DOUBLE
38837: EQUAL
38838: IFTRUE 38842
38840: GO 38867
38842: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38843: LD_ADDR_VAR 0 3
38847: PUSH
38848: LD_INT 83
38850: PPUSH
38851: LD_VAR 0 1
38855: PPUSH
38856: CALL_OW 321
38860: PUSH
38861: LD_INT 2
38863: EQUAL
38864: ST_TO_ADDR
38865: GO 38967
38867: LD_INT 17
38869: DOUBLE
38870: EQUAL
38871: IFTRUE 38875
38873: GO 38900
38875: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38876: LD_ADDR_VAR 0 3
38880: PUSH
38881: LD_INT 39
38883: PPUSH
38884: LD_VAR 0 1
38888: PPUSH
38889: CALL_OW 321
38893: PUSH
38894: LD_INT 2
38896: EQUAL
38897: ST_TO_ADDR
38898: GO 38967
38900: LD_INT 18
38902: DOUBLE
38903: EQUAL
38904: IFTRUE 38908
38906: GO 38933
38908: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38909: LD_ADDR_VAR 0 3
38913: PUSH
38914: LD_INT 40
38916: PPUSH
38917: LD_VAR 0 1
38921: PPUSH
38922: CALL_OW 321
38926: PUSH
38927: LD_INT 2
38929: EQUAL
38930: ST_TO_ADDR
38931: GO 38967
38933: LD_INT 27
38935: DOUBLE
38936: EQUAL
38937: IFTRUE 38941
38939: GO 38966
38941: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38942: LD_ADDR_VAR 0 3
38946: PUSH
38947: LD_INT 35
38949: PPUSH
38950: LD_VAR 0 1
38954: PPUSH
38955: CALL_OW 321
38959: PUSH
38960: LD_INT 2
38962: EQUAL
38963: ST_TO_ADDR
38964: GO 38967
38966: POP
// end ;
38967: LD_VAR 0 3
38971: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38972: LD_INT 0
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
// result := false ;
38985: LD_ADDR_VAR 0 6
38989: PUSH
38990: LD_INT 0
38992: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38993: LD_VAR 0 1
38997: NOT
38998: PUSH
38999: LD_VAR 0 1
39003: PPUSH
39004: CALL_OW 266
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: IN
39019: NOT
39020: OR
39021: PUSH
39022: LD_VAR 0 2
39026: NOT
39027: OR
39028: PUSH
39029: LD_VAR 0 5
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 3
39045: PUSH
39046: LD_INT 4
39048: PUSH
39049: LD_INT 5
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: IN
39060: NOT
39061: OR
39062: PUSH
39063: LD_VAR 0 3
39067: PPUSH
39068: LD_VAR 0 4
39072: PPUSH
39073: CALL_OW 488
39077: NOT
39078: OR
39079: IFFALSE 39083
// exit ;
39081: GO 39819
// side := GetSide ( depot ) ;
39083: LD_ADDR_VAR 0 9
39087: PUSH
39088: LD_VAR 0 1
39092: PPUSH
39093: CALL_OW 255
39097: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39098: LD_VAR 0 9
39102: PPUSH
39103: LD_VAR 0 2
39107: PPUSH
39108: CALL 38596 0 2
39112: NOT
39113: IFFALSE 39117
// exit ;
39115: GO 39819
// pom := GetBase ( depot ) ;
39117: LD_ADDR_VAR 0 10
39121: PUSH
39122: LD_VAR 0 1
39126: PPUSH
39127: CALL_OW 274
39131: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39132: LD_ADDR_VAR 0 11
39136: PUSH
39137: LD_VAR 0 2
39141: PPUSH
39142: LD_VAR 0 1
39146: PPUSH
39147: CALL_OW 248
39151: PPUSH
39152: CALL_OW 450
39156: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39157: LD_VAR 0 10
39161: PPUSH
39162: LD_INT 1
39164: PPUSH
39165: CALL_OW 275
39169: PUSH
39170: LD_VAR 0 11
39174: PUSH
39175: LD_INT 1
39177: ARRAY
39178: GREATEREQUAL
39179: PUSH
39180: LD_VAR 0 10
39184: PPUSH
39185: LD_INT 2
39187: PPUSH
39188: CALL_OW 275
39192: PUSH
39193: LD_VAR 0 11
39197: PUSH
39198: LD_INT 2
39200: ARRAY
39201: GREATEREQUAL
39202: AND
39203: PUSH
39204: LD_VAR 0 10
39208: PPUSH
39209: LD_INT 3
39211: PPUSH
39212: CALL_OW 275
39216: PUSH
39217: LD_VAR 0 11
39221: PUSH
39222: LD_INT 3
39224: ARRAY
39225: GREATEREQUAL
39226: AND
39227: NOT
39228: IFFALSE 39232
// exit ;
39230: GO 39819
// if GetBType ( depot ) = b_depot then
39232: LD_VAR 0 1
39236: PPUSH
39237: CALL_OW 266
39241: PUSH
39242: LD_INT 0
39244: EQUAL
39245: IFFALSE 39257
// dist := 28 else
39247: LD_ADDR_VAR 0 14
39251: PUSH
39252: LD_INT 28
39254: ST_TO_ADDR
39255: GO 39265
// dist := 36 ;
39257: LD_ADDR_VAR 0 14
39261: PUSH
39262: LD_INT 36
39264: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39265: LD_VAR 0 1
39269: PPUSH
39270: LD_VAR 0 3
39274: PPUSH
39275: LD_VAR 0 4
39279: PPUSH
39280: CALL_OW 297
39284: PUSH
39285: LD_VAR 0 14
39289: GREATER
39290: IFFALSE 39294
// exit ;
39292: GO 39819
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39294: LD_ADDR_VAR 0 12
39298: PUSH
39299: LD_VAR 0 2
39303: PPUSH
39304: LD_VAR 0 3
39308: PPUSH
39309: LD_VAR 0 4
39313: PPUSH
39314: LD_VAR 0 5
39318: PPUSH
39319: LD_VAR 0 1
39323: PPUSH
39324: CALL_OW 248
39328: PPUSH
39329: LD_INT 0
39331: PPUSH
39332: CALL 39824 0 6
39336: ST_TO_ADDR
// if not hexes then
39337: LD_VAR 0 12
39341: NOT
39342: IFFALSE 39346
// exit ;
39344: GO 39819
// hex := GetHexInfo ( x , y ) ;
39346: LD_ADDR_VAR 0 15
39350: PUSH
39351: LD_VAR 0 3
39355: PPUSH
39356: LD_VAR 0 4
39360: PPUSH
39361: CALL_OW 546
39365: ST_TO_ADDR
// if hex [ 1 ] then
39366: LD_VAR 0 15
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: IFFALSE 39378
// exit ;
39376: GO 39819
// height := hex [ 2 ] ;
39378: LD_ADDR_VAR 0 13
39382: PUSH
39383: LD_VAR 0 15
39387: PUSH
39388: LD_INT 2
39390: ARRAY
39391: ST_TO_ADDR
// for i = 1 to hexes do
39392: LD_ADDR_VAR 0 7
39396: PUSH
39397: DOUBLE
39398: LD_INT 1
39400: DEC
39401: ST_TO_ADDR
39402: LD_VAR 0 12
39406: PUSH
39407: FOR_TO
39408: IFFALSE 39738
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39410: LD_VAR 0 12
39414: PUSH
39415: LD_VAR 0 7
39419: ARRAY
39420: PUSH
39421: LD_INT 1
39423: ARRAY
39424: PPUSH
39425: LD_VAR 0 12
39429: PUSH
39430: LD_VAR 0 7
39434: ARRAY
39435: PUSH
39436: LD_INT 2
39438: ARRAY
39439: PPUSH
39440: CALL_OW 488
39444: NOT
39445: PUSH
39446: LD_VAR 0 12
39450: PUSH
39451: LD_VAR 0 7
39455: ARRAY
39456: PUSH
39457: LD_INT 1
39459: ARRAY
39460: PPUSH
39461: LD_VAR 0 12
39465: PUSH
39466: LD_VAR 0 7
39470: ARRAY
39471: PUSH
39472: LD_INT 2
39474: ARRAY
39475: PPUSH
39476: CALL_OW 428
39480: PUSH
39481: LD_INT 0
39483: GREATER
39484: OR
39485: PUSH
39486: LD_VAR 0 12
39490: PUSH
39491: LD_VAR 0 7
39495: ARRAY
39496: PUSH
39497: LD_INT 1
39499: ARRAY
39500: PPUSH
39501: LD_VAR 0 12
39505: PUSH
39506: LD_VAR 0 7
39510: ARRAY
39511: PUSH
39512: LD_INT 2
39514: ARRAY
39515: PPUSH
39516: CALL_OW 351
39520: OR
39521: IFFALSE 39527
// exit ;
39523: POP
39524: POP
39525: GO 39819
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39527: LD_ADDR_VAR 0 8
39531: PUSH
39532: LD_VAR 0 12
39536: PUSH
39537: LD_VAR 0 7
39541: ARRAY
39542: PUSH
39543: LD_INT 1
39545: ARRAY
39546: PPUSH
39547: LD_VAR 0 12
39551: PUSH
39552: LD_VAR 0 7
39556: ARRAY
39557: PUSH
39558: LD_INT 2
39560: ARRAY
39561: PPUSH
39562: CALL_OW 546
39566: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39567: LD_VAR 0 8
39571: PUSH
39572: LD_INT 1
39574: ARRAY
39575: PUSH
39576: LD_VAR 0 8
39580: PUSH
39581: LD_INT 2
39583: ARRAY
39584: PUSH
39585: LD_VAR 0 13
39589: PUSH
39590: LD_INT 2
39592: PLUS
39593: GREATER
39594: OR
39595: PUSH
39596: LD_VAR 0 8
39600: PUSH
39601: LD_INT 2
39603: ARRAY
39604: PUSH
39605: LD_VAR 0 13
39609: PUSH
39610: LD_INT 2
39612: MINUS
39613: LESS
39614: OR
39615: PUSH
39616: LD_VAR 0 8
39620: PUSH
39621: LD_INT 3
39623: ARRAY
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 8
39630: PUSH
39631: LD_INT 9
39633: PUSH
39634: LD_INT 10
39636: PUSH
39637: LD_INT 11
39639: PUSH
39640: LD_INT 12
39642: PUSH
39643: LD_INT 13
39645: PUSH
39646: LD_INT 16
39648: PUSH
39649: LD_INT 17
39651: PUSH
39652: LD_INT 18
39654: PUSH
39655: LD_INT 19
39657: PUSH
39658: LD_INT 20
39660: PUSH
39661: LD_INT 21
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: IN
39679: NOT
39680: OR
39681: PUSH
39682: LD_VAR 0 8
39686: PUSH
39687: LD_INT 5
39689: ARRAY
39690: NOT
39691: OR
39692: PUSH
39693: LD_VAR 0 8
39697: PUSH
39698: LD_INT 6
39700: ARRAY
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 7
39710: PUSH
39711: LD_INT 9
39713: PUSH
39714: LD_INT 10
39716: PUSH
39717: LD_INT 11
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: IN
39728: NOT
39729: OR
39730: IFFALSE 39736
// exit ;
39732: POP
39733: POP
39734: GO 39819
// end ;
39736: GO 39407
39738: POP
39739: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39740: LD_VAR 0 9
39744: PPUSH
39745: LD_VAR 0 3
39749: PPUSH
39750: LD_VAR 0 4
39754: PPUSH
39755: LD_INT 20
39757: PPUSH
39758: CALL 31771 0 4
39762: PUSH
39763: LD_INT 4
39765: ARRAY
39766: IFFALSE 39770
// exit ;
39768: GO 39819
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39770: LD_VAR 0 2
39774: PUSH
39775: LD_INT 29
39777: PUSH
39778: LD_INT 30
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: IN
39785: PUSH
39786: LD_VAR 0 3
39790: PPUSH
39791: LD_VAR 0 4
39795: PPUSH
39796: LD_VAR 0 9
39800: PPUSH
39801: CALL_OW 440
39805: NOT
39806: AND
39807: IFFALSE 39811
// exit ;
39809: GO 39819
// result := true ;
39811: LD_ADDR_VAR 0 6
39815: PUSH
39816: LD_INT 1
39818: ST_TO_ADDR
// end ;
39819: LD_VAR 0 6
39823: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39824: LD_INT 0
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
39861: PPUSH
39862: PPUSH
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
// result = [ ] ;
39884: LD_ADDR_VAR 0 7
39888: PUSH
39889: EMPTY
39890: ST_TO_ADDR
// temp_list = [ ] ;
39891: LD_ADDR_VAR 0 9
39895: PUSH
39896: EMPTY
39897: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39898: LD_VAR 0 4
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: LD_INT 4
39917: PUSH
39918: LD_INT 5
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: IN
39929: NOT
39930: PUSH
39931: LD_VAR 0 1
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: IN
39946: PUSH
39947: LD_VAR 0 5
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: LD_INT 3
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: IN
39966: NOT
39967: AND
39968: OR
39969: IFFALSE 39973
// exit ;
39971: GO 58364
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39973: LD_VAR 0 1
39977: PUSH
39978: LD_INT 6
39980: PUSH
39981: LD_INT 7
39983: PUSH
39984: LD_INT 8
39986: PUSH
39987: LD_INT 13
39989: PUSH
39990: LD_INT 12
39992: PUSH
39993: LD_INT 15
39995: PUSH
39996: LD_INT 11
39998: PUSH
39999: LD_INT 14
40001: PUSH
40002: LD_INT 10
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: IN
40016: IFFALSE 40026
// btype = b_lab ;
40018: LD_ADDR_VAR 0 1
40022: PUSH
40023: LD_INT 6
40025: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40026: LD_VAR 0 6
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 2
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: IN
40045: NOT
40046: PUSH
40047: LD_VAR 0 1
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 2
40060: PUSH
40061: LD_INT 3
40063: PUSH
40064: LD_INT 6
40066: PUSH
40067: LD_INT 36
40069: PUSH
40070: LD_INT 4
40072: PUSH
40073: LD_INT 5
40075: PUSH
40076: LD_INT 31
40078: PUSH
40079: LD_INT 32
40081: PUSH
40082: LD_INT 33
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: IN
40098: NOT
40099: PUSH
40100: LD_VAR 0 6
40104: PUSH
40105: LD_INT 1
40107: EQUAL
40108: AND
40109: OR
40110: PUSH
40111: LD_VAR 0 1
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 3
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: IN
40126: NOT
40127: PUSH
40128: LD_VAR 0 6
40132: PUSH
40133: LD_INT 2
40135: EQUAL
40136: AND
40137: OR
40138: IFFALSE 40148
// mode = 0 ;
40140: LD_ADDR_VAR 0 6
40144: PUSH
40145: LD_INT 0
40147: ST_TO_ADDR
// case mode of 0 :
40148: LD_VAR 0 6
40152: PUSH
40153: LD_INT 0
40155: DOUBLE
40156: EQUAL
40157: IFTRUE 40161
40159: GO 51614
40161: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40162: LD_ADDR_VAR 0 11
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: LD_INT 3
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40355: LD_ADDR_VAR 0 12
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 3
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 3
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40551: LD_ADDR_VAR 0 13
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: LD_INT 3
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 3
40710: NEG
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 3
40722: NEG
40723: PUSH
40724: LD_INT 3
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40750: LD_ADDR_VAR 0 14
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 3
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 3
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40946: LD_ADDR_VAR 0 15
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 3
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41139: LD_ADDR_VAR 0 16
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: LD_INT 2
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 3
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41332: LD_ADDR_VAR 0 17
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 2
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 2
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: NEG
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41562: LD_ADDR_VAR 0 18
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 2
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41792: LD_ADDR_VAR 0 19
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 2
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42022: LD_ADDR_VAR 0 20
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 2
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 2
42198: NEG
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42252: LD_ADDR_VAR 0 21
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 2
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42482: LD_ADDR_VAR 0 22
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 2
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 2
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42712: LD_ADDR_VAR 0 23
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 3
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 3
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42992: LD_ADDR_VAR 0 24
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43268: LD_ADDR_VAR 0 25
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 3
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43542: LD_ADDR_VAR 0 26
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: LD_INT 2
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: NEG
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: LD_INT 3
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43818: LD_ADDR_VAR 0 27
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 3
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 3
44063: NEG
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44098: LD_ADDR_VAR 0 28
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 3
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 3
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 3
44333: NEG
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 3
44345: NEG
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44380: LD_ADDR_VAR 0 29
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: LD_INT 3
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 3
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 3
44624: NEG
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44659: LD_ADDR_VAR 0 30
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 3
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 3
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: LD_INT 3
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 3
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44937: LD_ADDR_VAR 0 31
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 3
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 3
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 3
45180: NEG
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45215: LD_ADDR_VAR 0 32
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 3
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 3
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: LD_INT 3
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 3
45458: NEG
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45493: LD_ADDR_VAR 0 33
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 3
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45772: LD_ADDR_VAR 0 34
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 3
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 3
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: LD_INT 3
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 3
46017: NEG
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46052: LD_ADDR_VAR 0 35
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46164: LD_ADDR_VAR 0 36
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46276: LD_ADDR_VAR 0 37
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46388: LD_ADDR_VAR 0 38
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46500: LD_ADDR_VAR 0 39
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46612: LD_ADDR_VAR 0 40
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46724: LD_ADDR_VAR 0 41
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: NEG
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47074: LD_ADDR_VAR 0 42
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 3
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: PUSH
47321: LD_INT 3
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 3
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 3
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 3
47383: NEG
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47424: LD_ADDR_VAR 0 43
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 2
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: LD_INT 3
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 3
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 3
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47772: LD_ADDR_VAR 0 44
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 3
48069: NEG
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: NEG
48082: PUSH
48083: LD_INT 3
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48122: LD_ADDR_VAR 0 45
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 3
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 3
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 3
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 3
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: LD_INT 3
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48472: LD_ADDR_VAR 0 46
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 3
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 3
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 3
48768: NEG
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48820: LD_ADDR_VAR 0 47
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48971: LD_ADDR_VAR 0 48
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49118: LD_ADDR_VAR 0 49
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49262: LD_ADDR_VAR 0 50
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49406: LD_ADDR_VAR 0 51
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49553: LD_ADDR_VAR 0 52
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49704: LD_ADDR_VAR 0 53
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49934: LD_ADDR_VAR 0 54
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50164: LD_ADDR_VAR 0 55
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50394: LD_ADDR_VAR 0 56
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50624: LD_ADDR_VAR 0 57
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50854: LD_ADDR_VAR 0 58
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51084: LD_ADDR_VAR 0 59
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51172: LD_ADDR_VAR 0 60
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51260: LD_ADDR_VAR 0 61
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51348: LD_ADDR_VAR 0 62
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51436: LD_ADDR_VAR 0 63
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51524: LD_ADDR_VAR 0 64
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: ST_TO_ADDR
// end ; 1 :
51612: GO 57509
51614: LD_INT 1
51616: DOUBLE
51617: EQUAL
51618: IFTRUE 51622
51620: GO 54245
51622: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51623: LD_ADDR_VAR 0 11
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51667: LD_ADDR_VAR 0 12
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51708: LD_ADDR_VAR 0 13
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 3
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51748: LD_ADDR_VAR 0 14
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 3
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51789: LD_ADDR_VAR 0 15
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51833: LD_ADDR_VAR 0 16
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: NEG
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51879: LD_ADDR_VAR 0 17
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51923: LD_ADDR_VAR 0 18
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51964: LD_ADDR_VAR 0 19
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52004: LD_ADDR_VAR 0 20
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52045: LD_ADDR_VAR 0 21
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: NEG
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52089: LD_ADDR_VAR 0 22
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 3
52108: NEG
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: LIST
52134: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52135: LD_ADDR_VAR 0 23
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 3
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 4
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52179: LD_ADDR_VAR 0 24
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 4
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52220: LD_ADDR_VAR 0 25
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: LD_INT 3
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 4
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: LD_INT 4
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52260: LD_ADDR_VAR 0 26
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52301: LD_ADDR_VAR 0 27
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 4
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52345: LD_ADDR_VAR 0 28
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: LD_INT 4
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 4
52376: NEG
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52391: LD_ADDR_VAR 0 29
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 4
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 4
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 5
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 5
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 4
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 6
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 6
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 5
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52546: LD_ADDR_VAR 0 30
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 4
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 4
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 4
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 5
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 5
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 5
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 6
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 6
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52689: LD_ADDR_VAR 0 31
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 3
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 4
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 4
52736: PUSH
52737: LD_INT 4
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: LD_INT 4
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 5
52756: PUSH
52757: LD_INT 4
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 5
52766: PUSH
52767: LD_INT 5
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 4
52776: PUSH
52777: LD_INT 5
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 6
52786: PUSH
52787: LD_INT 5
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 6
52796: PUSH
52797: LD_INT 6
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 5
52806: PUSH
52807: LD_INT 6
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52828: LD_ADDR_VAR 0 32
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 3
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 4
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 4
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 3
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 5
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 5
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 4
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 6
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 6
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 5
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52971: LD_ADDR_VAR 0 33
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 4
53023: NEG
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 4
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 5
53057: NEG
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 5
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 5
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 6
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 6
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53126: LD_ADDR_VAR 0 34
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 3
53157: NEG
53158: PUSH
53159: LD_INT 3
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 3
53169: NEG
53170: PUSH
53171: LD_INT 4
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 4
53181: NEG
53182: PUSH
53183: LD_INT 3
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 4
53193: NEG
53194: PUSH
53195: LD_INT 4
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 4
53205: NEG
53206: PUSH
53207: LD_INT 5
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 5
53217: NEG
53218: PUSH
53219: LD_INT 4
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 5
53229: NEG
53230: PUSH
53231: LD_INT 5
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 5
53241: NEG
53242: PUSH
53243: LD_INT 6
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 6
53253: NEG
53254: PUSH
53255: LD_INT 5
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 6
53265: NEG
53266: PUSH
53267: LD_INT 6
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53289: LD_ADDR_VAR 0 41
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53333: LD_ADDR_VAR 0 42
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53374: LD_ADDR_VAR 0 43
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53414: LD_ADDR_VAR 0 44
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53455: LD_ADDR_VAR 0 45
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53499: LD_ADDR_VAR 0 46
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: NEG
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53545: LD_ADDR_VAR 0 47
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: LD_INT 3
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53578: LD_ADDR_VAR 0 48
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53609: LD_ADDR_VAR 0 49
53613: PUSH
53614: LD_INT 3
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53638: LD_ADDR_VAR 0 50
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 3
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53667: LD_ADDR_VAR 0 51
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53698: LD_ADDR_VAR 0 52
53702: PUSH
53703: LD_INT 3
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53731: LD_ADDR_VAR 0 53
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53775: LD_ADDR_VAR 0 54
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53816: LD_ADDR_VAR 0 55
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53856: LD_ADDR_VAR 0 56
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53897: LD_ADDR_VAR 0 57
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: LIST
53940: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53941: LD_ADDR_VAR 0 58
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53987: LD_ADDR_VAR 0 59
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54031: LD_ADDR_VAR 0 60
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54072: LD_ADDR_VAR 0 61
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54112: LD_ADDR_VAR 0 62
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: LIST
54152: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54153: LD_ADDR_VAR 0 63
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54197: LD_ADDR_VAR 0 64
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: LIST
54242: ST_TO_ADDR
// end ; 2 :
54243: GO 57509
54245: LD_INT 2
54247: DOUBLE
54248: EQUAL
54249: IFTRUE 54253
54251: GO 57508
54253: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54254: LD_ADDR_VAR 0 29
54258: PUSH
54259: LD_INT 4
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 4
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 5
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 5
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 4
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 5
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 4
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: PUSH
54385: LD_INT 4
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: LD_INT 4
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 4
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: LD_INT 4
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 4
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 4
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 5
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 5
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 4
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: LD_INT 5
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 4
54593: NEG
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 4
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 4
54616: NEG
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 4
54639: NEG
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 4
54651: NEG
54652: PUSH
54653: LD_INT 5
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: NEG
54664: PUSH
54665: LD_INT 4
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 4
54687: NEG
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 5
54699: NEG
54700: PUSH
54701: LD_INT 4
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 5
54711: NEG
54712: PUSH
54713: LD_INT 5
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 3
54723: NEG
54724: PUSH
54725: LD_INT 5
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 5
54735: NEG
54736: PUSH
54737: LD_INT 3
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54792: LD_ADDR_VAR 0 30
54796: PUSH
54797: LD_INT 4
54799: PUSH
54800: LD_INT 4
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 4
54809: PUSH
54810: LD_INT 3
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 5
54819: PUSH
54820: LD_INT 4
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 5
54829: PUSH
54830: LD_INT 5
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 4
54839: PUSH
54840: LD_INT 5
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: LD_INT 4
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 5
54869: PUSH
54870: LD_INT 3
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: PUSH
54880: LD_INT 5
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 3
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: LD_INT 4
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 4
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 4
54982: NEG
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 4
54993: NEG
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: NEG
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 4
55027: NEG
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 5
55038: NEG
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 5
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 5
55061: NEG
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 3
55073: NEG
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 3
55084: NEG
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: NEG
55097: PUSH
55098: LD_INT 4
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 4
55144: NEG
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: NEG
55157: PUSH
55158: LD_INT 4
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 4
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 4
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 5
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 4
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 4
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 5
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 3
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: LD_INT 5
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55339: LD_ADDR_VAR 0 31
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 4
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 4
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 5
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 5
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 4
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: LD_INT 5
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 3
55439: NEG
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: NEG
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 3
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 4
55495: NEG
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 4
55518: NEG
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 4
55541: NEG
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 4
55553: NEG
55554: PUSH
55555: LD_INT 5
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 4
55589: NEG
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 5
55601: NEG
55602: PUSH
55603: LD_INT 4
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 5
55613: NEG
55614: PUSH
55615: LD_INT 5
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: LD_INT 5
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 5
55637: NEG
55638: PUSH
55639: LD_INT 3
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 3
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 4
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 3
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 4
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: LD_INT 4
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 4
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 5
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 5
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 5
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55889: LD_ADDR_VAR 0 32
55893: PUSH
55894: LD_INT 4
55896: NEG
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 4
55907: NEG
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 4
55941: NEG
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 5
55952: NEG
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 5
55963: NEG
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 5
55975: NEG
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: LD_INT 4
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: LD_INT 3
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 4
56058: NEG
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 4
56070: NEG
56071: PUSH
56072: LD_INT 4
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: LD_INT 4
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 4
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 5
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 4
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 4
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 5
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 3
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 5
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 4
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 4
56301: PUSH
56302: LD_INT 4
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 4
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 5
56321: PUSH
56322: LD_INT 4
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 5
56331: PUSH
56332: LD_INT 5
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 4
56341: PUSH
56342: LD_INT 5
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 5
56371: PUSH
56372: LD_INT 3
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: LD_INT 5
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56436: LD_ADDR_VAR 0 33
56440: PUSH
56441: LD_INT 4
56443: NEG
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 4
56455: NEG
56456: PUSH
56457: LD_INT 5
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: LD_INT 4
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 4
56491: NEG
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 5
56503: NEG
56504: PUSH
56505: LD_INT 4
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 5
56515: NEG
56516: PUSH
56517: LD_INT 5
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 3
56527: NEG
56528: PUSH
56529: LD_INT 5
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 5
56539: NEG
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 4
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: LD_INT 4
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 4
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 4
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 4
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 5
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 5
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 5
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 3
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 4
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: PUSH
56777: LD_INT 4
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: LD_INT 4
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 4
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: LD_INT 4
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 4
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 4
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 5
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 5
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 4
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: LD_INT 3
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 5
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56974: LD_ADDR_VAR 0 34
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 4
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 5
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: LD_INT 4
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 3
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 4
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 5
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: LD_INT 5
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 4
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 4
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: PUSH
57177: LD_INT 4
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 4
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 5
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 5
57206: PUSH
57207: LD_INT 5
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 4
57216: PUSH
57217: LD_INT 5
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 5
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: LD_INT 5
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 3
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 4
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 4
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: NEG
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 4
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 4
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 5
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 5
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 5
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: ST_TO_ADDR
// end ; end ;
57506: GO 57509
57508: POP
// case btype of b_depot , b_warehouse :
57509: LD_VAR 0 1
57513: PUSH
57514: LD_INT 0
57516: DOUBLE
57517: EQUAL
57518: IFTRUE 57528
57520: LD_INT 1
57522: DOUBLE
57523: EQUAL
57524: IFTRUE 57528
57526: GO 57729
57528: POP
// case nation of nation_american :
57529: LD_VAR 0 5
57533: PUSH
57534: LD_INT 1
57536: DOUBLE
57537: EQUAL
57538: IFTRUE 57542
57540: GO 57598
57542: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57543: LD_ADDR_VAR 0 9
57547: PUSH
57548: LD_VAR 0 11
57552: PUSH
57553: LD_VAR 0 12
57557: PUSH
57558: LD_VAR 0 13
57562: PUSH
57563: LD_VAR 0 14
57567: PUSH
57568: LD_VAR 0 15
57572: PUSH
57573: LD_VAR 0 16
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: PUSH
57586: LD_VAR 0 4
57590: PUSH
57591: LD_INT 1
57593: PLUS
57594: ARRAY
57595: ST_TO_ADDR
57596: GO 57727
57598: LD_INT 2
57600: DOUBLE
57601: EQUAL
57602: IFTRUE 57606
57604: GO 57662
57606: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57607: LD_ADDR_VAR 0 9
57611: PUSH
57612: LD_VAR 0 17
57616: PUSH
57617: LD_VAR 0 18
57621: PUSH
57622: LD_VAR 0 19
57626: PUSH
57627: LD_VAR 0 20
57631: PUSH
57632: LD_VAR 0 21
57636: PUSH
57637: LD_VAR 0 22
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: PUSH
57650: LD_VAR 0 4
57654: PUSH
57655: LD_INT 1
57657: PLUS
57658: ARRAY
57659: ST_TO_ADDR
57660: GO 57727
57662: LD_INT 3
57664: DOUBLE
57665: EQUAL
57666: IFTRUE 57670
57668: GO 57726
57670: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57671: LD_ADDR_VAR 0 9
57675: PUSH
57676: LD_VAR 0 23
57680: PUSH
57681: LD_VAR 0 24
57685: PUSH
57686: LD_VAR 0 25
57690: PUSH
57691: LD_VAR 0 26
57695: PUSH
57696: LD_VAR 0 27
57700: PUSH
57701: LD_VAR 0 28
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: PUSH
57714: LD_VAR 0 4
57718: PUSH
57719: LD_INT 1
57721: PLUS
57722: ARRAY
57723: ST_TO_ADDR
57724: GO 57727
57726: POP
57727: GO 58282
57729: LD_INT 2
57731: DOUBLE
57732: EQUAL
57733: IFTRUE 57743
57735: LD_INT 3
57737: DOUBLE
57738: EQUAL
57739: IFTRUE 57743
57741: GO 57799
57743: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57744: LD_ADDR_VAR 0 9
57748: PUSH
57749: LD_VAR 0 29
57753: PUSH
57754: LD_VAR 0 30
57758: PUSH
57759: LD_VAR 0 31
57763: PUSH
57764: LD_VAR 0 32
57768: PUSH
57769: LD_VAR 0 33
57773: PUSH
57774: LD_VAR 0 34
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: PUSH
57787: LD_VAR 0 4
57791: PUSH
57792: LD_INT 1
57794: PLUS
57795: ARRAY
57796: ST_TO_ADDR
57797: GO 58282
57799: LD_INT 16
57801: DOUBLE
57802: EQUAL
57803: IFTRUE 57861
57805: LD_INT 17
57807: DOUBLE
57808: EQUAL
57809: IFTRUE 57861
57811: LD_INT 18
57813: DOUBLE
57814: EQUAL
57815: IFTRUE 57861
57817: LD_INT 19
57819: DOUBLE
57820: EQUAL
57821: IFTRUE 57861
57823: LD_INT 22
57825: DOUBLE
57826: EQUAL
57827: IFTRUE 57861
57829: LD_INT 20
57831: DOUBLE
57832: EQUAL
57833: IFTRUE 57861
57835: LD_INT 21
57837: DOUBLE
57838: EQUAL
57839: IFTRUE 57861
57841: LD_INT 23
57843: DOUBLE
57844: EQUAL
57845: IFTRUE 57861
57847: LD_INT 24
57849: DOUBLE
57850: EQUAL
57851: IFTRUE 57861
57853: LD_INT 25
57855: DOUBLE
57856: EQUAL
57857: IFTRUE 57861
57859: GO 57917
57861: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57862: LD_ADDR_VAR 0 9
57866: PUSH
57867: LD_VAR 0 35
57871: PUSH
57872: LD_VAR 0 36
57876: PUSH
57877: LD_VAR 0 37
57881: PUSH
57882: LD_VAR 0 38
57886: PUSH
57887: LD_VAR 0 39
57891: PUSH
57892: LD_VAR 0 40
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: PUSH
57905: LD_VAR 0 4
57909: PUSH
57910: LD_INT 1
57912: PLUS
57913: ARRAY
57914: ST_TO_ADDR
57915: GO 58282
57917: LD_INT 6
57919: DOUBLE
57920: EQUAL
57921: IFTRUE 57973
57923: LD_INT 7
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57973
57929: LD_INT 8
57931: DOUBLE
57932: EQUAL
57933: IFTRUE 57973
57935: LD_INT 13
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57973
57941: LD_INT 12
57943: DOUBLE
57944: EQUAL
57945: IFTRUE 57973
57947: LD_INT 15
57949: DOUBLE
57950: EQUAL
57951: IFTRUE 57973
57953: LD_INT 11
57955: DOUBLE
57956: EQUAL
57957: IFTRUE 57973
57959: LD_INT 14
57961: DOUBLE
57962: EQUAL
57963: IFTRUE 57973
57965: LD_INT 10
57967: DOUBLE
57968: EQUAL
57969: IFTRUE 57973
57971: GO 58029
57973: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57974: LD_ADDR_VAR 0 9
57978: PUSH
57979: LD_VAR 0 41
57983: PUSH
57984: LD_VAR 0 42
57988: PUSH
57989: LD_VAR 0 43
57993: PUSH
57994: LD_VAR 0 44
57998: PUSH
57999: LD_VAR 0 45
58003: PUSH
58004: LD_VAR 0 46
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: PUSH
58017: LD_VAR 0 4
58021: PUSH
58022: LD_INT 1
58024: PLUS
58025: ARRAY
58026: ST_TO_ADDR
58027: GO 58282
58029: LD_INT 36
58031: DOUBLE
58032: EQUAL
58033: IFTRUE 58037
58035: GO 58093
58037: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58038: LD_ADDR_VAR 0 9
58042: PUSH
58043: LD_VAR 0 47
58047: PUSH
58048: LD_VAR 0 48
58052: PUSH
58053: LD_VAR 0 49
58057: PUSH
58058: LD_VAR 0 50
58062: PUSH
58063: LD_VAR 0 51
58067: PUSH
58068: LD_VAR 0 52
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: PUSH
58081: LD_VAR 0 4
58085: PUSH
58086: LD_INT 1
58088: PLUS
58089: ARRAY
58090: ST_TO_ADDR
58091: GO 58282
58093: LD_INT 4
58095: DOUBLE
58096: EQUAL
58097: IFTRUE 58119
58099: LD_INT 5
58101: DOUBLE
58102: EQUAL
58103: IFTRUE 58119
58105: LD_INT 34
58107: DOUBLE
58108: EQUAL
58109: IFTRUE 58119
58111: LD_INT 37
58113: DOUBLE
58114: EQUAL
58115: IFTRUE 58119
58117: GO 58175
58119: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58120: LD_ADDR_VAR 0 9
58124: PUSH
58125: LD_VAR 0 53
58129: PUSH
58130: LD_VAR 0 54
58134: PUSH
58135: LD_VAR 0 55
58139: PUSH
58140: LD_VAR 0 56
58144: PUSH
58145: LD_VAR 0 57
58149: PUSH
58150: LD_VAR 0 58
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: PUSH
58163: LD_VAR 0 4
58167: PUSH
58168: LD_INT 1
58170: PLUS
58171: ARRAY
58172: ST_TO_ADDR
58173: GO 58282
58175: LD_INT 31
58177: DOUBLE
58178: EQUAL
58179: IFTRUE 58225
58181: LD_INT 32
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58225
58187: LD_INT 33
58189: DOUBLE
58190: EQUAL
58191: IFTRUE 58225
58193: LD_INT 27
58195: DOUBLE
58196: EQUAL
58197: IFTRUE 58225
58199: LD_INT 26
58201: DOUBLE
58202: EQUAL
58203: IFTRUE 58225
58205: LD_INT 28
58207: DOUBLE
58208: EQUAL
58209: IFTRUE 58225
58211: LD_INT 29
58213: DOUBLE
58214: EQUAL
58215: IFTRUE 58225
58217: LD_INT 30
58219: DOUBLE
58220: EQUAL
58221: IFTRUE 58225
58223: GO 58281
58225: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58226: LD_ADDR_VAR 0 9
58230: PUSH
58231: LD_VAR 0 59
58235: PUSH
58236: LD_VAR 0 60
58240: PUSH
58241: LD_VAR 0 61
58245: PUSH
58246: LD_VAR 0 62
58250: PUSH
58251: LD_VAR 0 63
58255: PUSH
58256: LD_VAR 0 64
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: PUSH
58269: LD_VAR 0 4
58273: PUSH
58274: LD_INT 1
58276: PLUS
58277: ARRAY
58278: ST_TO_ADDR
58279: GO 58282
58281: POP
// temp_list2 = [ ] ;
58282: LD_ADDR_VAR 0 10
58286: PUSH
58287: EMPTY
58288: ST_TO_ADDR
// for i in temp_list do
58289: LD_ADDR_VAR 0 8
58293: PUSH
58294: LD_VAR 0 9
58298: PUSH
58299: FOR_IN
58300: IFFALSE 58352
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58302: LD_ADDR_VAR 0 10
58306: PUSH
58307: LD_VAR 0 10
58311: PUSH
58312: LD_VAR 0 8
58316: PUSH
58317: LD_INT 1
58319: ARRAY
58320: PUSH
58321: LD_VAR 0 2
58325: PLUS
58326: PUSH
58327: LD_VAR 0 8
58331: PUSH
58332: LD_INT 2
58334: ARRAY
58335: PUSH
58336: LD_VAR 0 3
58340: PLUS
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: ADD
58349: ST_TO_ADDR
58350: GO 58299
58352: POP
58353: POP
// result = temp_list2 ;
58354: LD_ADDR_VAR 0 7
58358: PUSH
58359: LD_VAR 0 10
58363: ST_TO_ADDR
// end ;
58364: LD_VAR 0 7
58368: RET
// export function EnemyInRange ( unit , dist ) ; begin
58369: LD_INT 0
58371: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58372: LD_ADDR_VAR 0 3
58376: PUSH
58377: LD_VAR 0 1
58381: PPUSH
58382: CALL_OW 255
58386: PPUSH
58387: LD_VAR 0 1
58391: PPUSH
58392: CALL_OW 250
58396: PPUSH
58397: LD_VAR 0 1
58401: PPUSH
58402: CALL_OW 251
58406: PPUSH
58407: LD_VAR 0 2
58411: PPUSH
58412: CALL 31771 0 4
58416: PUSH
58417: LD_INT 4
58419: ARRAY
58420: ST_TO_ADDR
// end ;
58421: LD_VAR 0 3
58425: RET
// export function PlayerSeeMe ( unit ) ; begin
58426: LD_INT 0
58428: PPUSH
// result := See ( your_side , unit ) ;
58429: LD_ADDR_VAR 0 2
58433: PUSH
58434: LD_OWVAR 2
58438: PPUSH
58439: LD_VAR 0 1
58443: PPUSH
58444: CALL_OW 292
58448: ST_TO_ADDR
// end ;
58449: LD_VAR 0 2
58453: RET
// export function ReverseDir ( unit ) ; begin
58454: LD_INT 0
58456: PPUSH
// if not unit then
58457: LD_VAR 0 1
58461: NOT
58462: IFFALSE 58466
// exit ;
58464: GO 58489
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58466: LD_ADDR_VAR 0 2
58470: PUSH
58471: LD_VAR 0 1
58475: PPUSH
58476: CALL_OW 254
58480: PUSH
58481: LD_INT 3
58483: PLUS
58484: PUSH
58485: LD_INT 6
58487: MOD
58488: ST_TO_ADDR
// end ;
58489: LD_VAR 0 2
58493: RET
// export function ReverseArray ( array ) ; var i ; begin
58494: LD_INT 0
58496: PPUSH
58497: PPUSH
// if not array then
58498: LD_VAR 0 1
58502: NOT
58503: IFFALSE 58507
// exit ;
58505: GO 58562
// result := [ ] ;
58507: LD_ADDR_VAR 0 2
58511: PUSH
58512: EMPTY
58513: ST_TO_ADDR
// for i := array downto 1 do
58514: LD_ADDR_VAR 0 3
58518: PUSH
58519: DOUBLE
58520: LD_VAR 0 1
58524: INC
58525: ST_TO_ADDR
58526: LD_INT 1
58528: PUSH
58529: FOR_DOWNTO
58530: IFFALSE 58560
// result := Join ( result , array [ i ] ) ;
58532: LD_ADDR_VAR 0 2
58536: PUSH
58537: LD_VAR 0 2
58541: PPUSH
58542: LD_VAR 0 1
58546: PUSH
58547: LD_VAR 0 3
58551: ARRAY
58552: PPUSH
58553: CALL 63206 0 2
58557: ST_TO_ADDR
58558: GO 58529
58560: POP
58561: POP
// end ;
58562: LD_VAR 0 2
58566: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58567: LD_INT 0
58569: PPUSH
58570: PPUSH
58571: PPUSH
58572: PPUSH
58573: PPUSH
58574: PPUSH
// if not unit or not hexes then
58575: LD_VAR 0 1
58579: NOT
58580: PUSH
58581: LD_VAR 0 2
58585: NOT
58586: OR
58587: IFFALSE 58591
// exit ;
58589: GO 58714
// dist := 9999 ;
58591: LD_ADDR_VAR 0 5
58595: PUSH
58596: LD_INT 9999
58598: ST_TO_ADDR
// for i = 1 to hexes do
58599: LD_ADDR_VAR 0 4
58603: PUSH
58604: DOUBLE
58605: LD_INT 1
58607: DEC
58608: ST_TO_ADDR
58609: LD_VAR 0 2
58613: PUSH
58614: FOR_TO
58615: IFFALSE 58702
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58617: LD_ADDR_VAR 0 6
58621: PUSH
58622: LD_VAR 0 1
58626: PPUSH
58627: LD_VAR 0 2
58631: PUSH
58632: LD_VAR 0 4
58636: ARRAY
58637: PUSH
58638: LD_INT 1
58640: ARRAY
58641: PPUSH
58642: LD_VAR 0 2
58646: PUSH
58647: LD_VAR 0 4
58651: ARRAY
58652: PUSH
58653: LD_INT 2
58655: ARRAY
58656: PPUSH
58657: CALL_OW 297
58661: ST_TO_ADDR
// if tdist < dist then
58662: LD_VAR 0 6
58666: PUSH
58667: LD_VAR 0 5
58671: LESS
58672: IFFALSE 58700
// begin hex := hexes [ i ] ;
58674: LD_ADDR_VAR 0 8
58678: PUSH
58679: LD_VAR 0 2
58683: PUSH
58684: LD_VAR 0 4
58688: ARRAY
58689: ST_TO_ADDR
// dist := tdist ;
58690: LD_ADDR_VAR 0 5
58694: PUSH
58695: LD_VAR 0 6
58699: ST_TO_ADDR
// end ; end ;
58700: GO 58614
58702: POP
58703: POP
// result := hex ;
58704: LD_ADDR_VAR 0 3
58708: PUSH
58709: LD_VAR 0 8
58713: ST_TO_ADDR
// end ;
58714: LD_VAR 0 3
58718: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58719: LD_INT 0
58721: PPUSH
58722: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58723: LD_VAR 0 1
58727: NOT
58728: PUSH
58729: LD_VAR 0 1
58733: PUSH
58734: LD_INT 21
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 23
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PPUSH
58758: CALL_OW 69
58762: IN
58763: NOT
58764: OR
58765: IFFALSE 58769
// exit ;
58767: GO 58816
// for i = 1 to 3 do
58769: LD_ADDR_VAR 0 3
58773: PUSH
58774: DOUBLE
58775: LD_INT 1
58777: DEC
58778: ST_TO_ADDR
58779: LD_INT 3
58781: PUSH
58782: FOR_TO
58783: IFFALSE 58814
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58785: LD_VAR 0 1
58789: PPUSH
58790: CALL_OW 250
58794: PPUSH
58795: LD_VAR 0 1
58799: PPUSH
58800: CALL_OW 251
58804: PPUSH
58805: LD_INT 1
58807: PPUSH
58808: CALL_OW 453
58812: GO 58782
58814: POP
58815: POP
// end ;
58816: LD_VAR 0 2
58820: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58821: LD_INT 0
58823: PPUSH
58824: PPUSH
58825: PPUSH
58826: PPUSH
58827: PPUSH
58828: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58829: LD_VAR 0 1
58833: NOT
58834: PUSH
58835: LD_VAR 0 2
58839: NOT
58840: OR
58841: PUSH
58842: LD_VAR 0 1
58846: PPUSH
58847: CALL_OW 314
58851: OR
58852: IFFALSE 58856
// exit ;
58854: GO 59323
// if GetLives ( i ) < 250 then
58856: LD_VAR 0 4
58860: PPUSH
58861: CALL_OW 256
58865: PUSH
58866: LD_INT 250
58868: LESS
58869: IFFALSE 58882
// begin ComAutodestruct ( i ) ;
58871: LD_VAR 0 4
58875: PPUSH
58876: CALL 58719 0 1
// exit ;
58880: GO 59323
// end ; x := GetX ( enemy_unit ) ;
58882: LD_ADDR_VAR 0 7
58886: PUSH
58887: LD_VAR 0 2
58891: PPUSH
58892: CALL_OW 250
58896: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58897: LD_ADDR_VAR 0 8
58901: PUSH
58902: LD_VAR 0 2
58906: PPUSH
58907: CALL_OW 251
58911: ST_TO_ADDR
// if not x or not y then
58912: LD_VAR 0 7
58916: NOT
58917: PUSH
58918: LD_VAR 0 8
58922: NOT
58923: OR
58924: IFFALSE 58928
// exit ;
58926: GO 59323
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58928: LD_ADDR_VAR 0 6
58932: PUSH
58933: LD_VAR 0 7
58937: PPUSH
58938: LD_INT 0
58940: PPUSH
58941: LD_INT 4
58943: PPUSH
58944: CALL_OW 272
58948: PUSH
58949: LD_VAR 0 8
58953: PPUSH
58954: LD_INT 0
58956: PPUSH
58957: LD_INT 4
58959: PPUSH
58960: CALL_OW 273
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_VAR 0 7
58973: PPUSH
58974: LD_INT 1
58976: PPUSH
58977: LD_INT 4
58979: PPUSH
58980: CALL_OW 272
58984: PUSH
58985: LD_VAR 0 8
58989: PPUSH
58990: LD_INT 1
58992: PPUSH
58993: LD_INT 4
58995: PPUSH
58996: CALL_OW 273
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_VAR 0 7
59009: PPUSH
59010: LD_INT 2
59012: PPUSH
59013: LD_INT 4
59015: PPUSH
59016: CALL_OW 272
59020: PUSH
59021: LD_VAR 0 8
59025: PPUSH
59026: LD_INT 2
59028: PPUSH
59029: LD_INT 4
59031: PPUSH
59032: CALL_OW 273
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_VAR 0 7
59045: PPUSH
59046: LD_INT 3
59048: PPUSH
59049: LD_INT 4
59051: PPUSH
59052: CALL_OW 272
59056: PUSH
59057: LD_VAR 0 8
59061: PPUSH
59062: LD_INT 3
59064: PPUSH
59065: LD_INT 4
59067: PPUSH
59068: CALL_OW 273
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_VAR 0 7
59081: PPUSH
59082: LD_INT 4
59084: PPUSH
59085: LD_INT 4
59087: PPUSH
59088: CALL_OW 272
59092: PUSH
59093: LD_VAR 0 8
59097: PPUSH
59098: LD_INT 4
59100: PPUSH
59101: LD_INT 4
59103: PPUSH
59104: CALL_OW 273
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_VAR 0 7
59117: PPUSH
59118: LD_INT 5
59120: PPUSH
59121: LD_INT 4
59123: PPUSH
59124: CALL_OW 272
59128: PUSH
59129: LD_VAR 0 8
59133: PPUSH
59134: LD_INT 5
59136: PPUSH
59137: LD_INT 4
59139: PPUSH
59140: CALL_OW 273
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: ST_TO_ADDR
// for i = tmp downto 1 do
59157: LD_ADDR_VAR 0 4
59161: PUSH
59162: DOUBLE
59163: LD_VAR 0 6
59167: INC
59168: ST_TO_ADDR
59169: LD_INT 1
59171: PUSH
59172: FOR_DOWNTO
59173: IFFALSE 59274
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59175: LD_VAR 0 6
59179: PUSH
59180: LD_VAR 0 4
59184: ARRAY
59185: PUSH
59186: LD_INT 1
59188: ARRAY
59189: PPUSH
59190: LD_VAR 0 6
59194: PUSH
59195: LD_VAR 0 4
59199: ARRAY
59200: PUSH
59201: LD_INT 2
59203: ARRAY
59204: PPUSH
59205: CALL_OW 488
59209: NOT
59210: PUSH
59211: LD_VAR 0 6
59215: PUSH
59216: LD_VAR 0 4
59220: ARRAY
59221: PUSH
59222: LD_INT 1
59224: ARRAY
59225: PPUSH
59226: LD_VAR 0 6
59230: PUSH
59231: LD_VAR 0 4
59235: ARRAY
59236: PUSH
59237: LD_INT 2
59239: ARRAY
59240: PPUSH
59241: CALL_OW 428
59245: PUSH
59246: LD_INT 0
59248: NONEQUAL
59249: OR
59250: IFFALSE 59272
// tmp := Delete ( tmp , i ) ;
59252: LD_ADDR_VAR 0 6
59256: PUSH
59257: LD_VAR 0 6
59261: PPUSH
59262: LD_VAR 0 4
59266: PPUSH
59267: CALL_OW 3
59271: ST_TO_ADDR
59272: GO 59172
59274: POP
59275: POP
// j := GetClosestHex ( unit , tmp ) ;
59276: LD_ADDR_VAR 0 5
59280: PUSH
59281: LD_VAR 0 1
59285: PPUSH
59286: LD_VAR 0 6
59290: PPUSH
59291: CALL 58567 0 2
59295: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59296: LD_VAR 0 1
59300: PPUSH
59301: LD_VAR 0 5
59305: PUSH
59306: LD_INT 1
59308: ARRAY
59309: PPUSH
59310: LD_VAR 0 5
59314: PUSH
59315: LD_INT 2
59317: ARRAY
59318: PPUSH
59319: CALL_OW 111
// end ;
59323: LD_VAR 0 3
59327: RET
// export function PrepareApemanSoldier ( ) ; begin
59328: LD_INT 0
59330: PPUSH
// uc_nation := 0 ;
59331: LD_ADDR_OWVAR 21
59335: PUSH
59336: LD_INT 0
59338: ST_TO_ADDR
// hc_sex := sex_male ;
59339: LD_ADDR_OWVAR 27
59343: PUSH
59344: LD_INT 1
59346: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59347: LD_ADDR_OWVAR 28
59351: PUSH
59352: LD_INT 15
59354: ST_TO_ADDR
// hc_gallery :=  ;
59355: LD_ADDR_OWVAR 33
59359: PUSH
59360: LD_STRING 
59362: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59363: LD_ADDR_OWVAR 31
59367: PUSH
59368: LD_INT 0
59370: PPUSH
59371: LD_INT 3
59373: PPUSH
59374: CALL_OW 12
59378: PUSH
59379: LD_INT 0
59381: PPUSH
59382: LD_INT 3
59384: PPUSH
59385: CALL_OW 12
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: ST_TO_ADDR
// end ;
59402: LD_VAR 0 1
59406: RET
// export function PrepareApemanEngineer ( ) ; begin
59407: LD_INT 0
59409: PPUSH
// uc_nation := 0 ;
59410: LD_ADDR_OWVAR 21
59414: PUSH
59415: LD_INT 0
59417: ST_TO_ADDR
// hc_sex := sex_male ;
59418: LD_ADDR_OWVAR 27
59422: PUSH
59423: LD_INT 1
59425: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59426: LD_ADDR_OWVAR 28
59430: PUSH
59431: LD_INT 16
59433: ST_TO_ADDR
// hc_gallery :=  ;
59434: LD_ADDR_OWVAR 33
59438: PUSH
59439: LD_STRING 
59441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59442: LD_ADDR_OWVAR 31
59446: PUSH
59447: LD_INT 0
59449: PPUSH
59450: LD_INT 3
59452: PPUSH
59453: CALL_OW 12
59457: PUSH
59458: LD_INT 0
59460: PPUSH
59461: LD_INT 3
59463: PPUSH
59464: CALL_OW 12
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// end ;
59481: LD_VAR 0 1
59485: RET
// export function PrepareApeman ( agressivity ) ; begin
59486: LD_INT 0
59488: PPUSH
// uc_side := 0 ;
59489: LD_ADDR_OWVAR 20
59493: PUSH
59494: LD_INT 0
59496: ST_TO_ADDR
// uc_nation := 0 ;
59497: LD_ADDR_OWVAR 21
59501: PUSH
59502: LD_INT 0
59504: ST_TO_ADDR
// hc_sex := sex_male ;
59505: LD_ADDR_OWVAR 27
59509: PUSH
59510: LD_INT 1
59512: ST_TO_ADDR
// hc_class := class_apeman ;
59513: LD_ADDR_OWVAR 28
59517: PUSH
59518: LD_INT 12
59520: ST_TO_ADDR
// hc_gallery :=  ;
59521: LD_ADDR_OWVAR 33
59525: PUSH
59526: LD_STRING 
59528: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59529: LD_ADDR_OWVAR 35
59533: PUSH
59534: LD_VAR 0 1
59538: NEG
59539: PPUSH
59540: LD_VAR 0 1
59544: PPUSH
59545: CALL_OW 12
59549: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59550: LD_ADDR_OWVAR 31
59554: PUSH
59555: LD_INT 0
59557: PPUSH
59558: LD_INT 3
59560: PPUSH
59561: CALL_OW 12
59565: PUSH
59566: LD_INT 0
59568: PPUSH
59569: LD_INT 3
59571: PPUSH
59572: CALL_OW 12
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: ST_TO_ADDR
// end ;
59589: LD_VAR 0 2
59593: RET
// export function PrepareTiger ( agressivity ) ; begin
59594: LD_INT 0
59596: PPUSH
// uc_side := 0 ;
59597: LD_ADDR_OWVAR 20
59601: PUSH
59602: LD_INT 0
59604: ST_TO_ADDR
// uc_nation := 0 ;
59605: LD_ADDR_OWVAR 21
59609: PUSH
59610: LD_INT 0
59612: ST_TO_ADDR
// hc_class := class_tiger ;
59613: LD_ADDR_OWVAR 28
59617: PUSH
59618: LD_INT 14
59620: ST_TO_ADDR
// hc_gallery :=  ;
59621: LD_ADDR_OWVAR 33
59625: PUSH
59626: LD_STRING 
59628: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59629: LD_ADDR_OWVAR 35
59633: PUSH
59634: LD_VAR 0 1
59638: NEG
59639: PPUSH
59640: LD_VAR 0 1
59644: PPUSH
59645: CALL_OW 12
59649: ST_TO_ADDR
// end ;
59650: LD_VAR 0 2
59654: RET
// export function PrepareEnchidna ( ) ; begin
59655: LD_INT 0
59657: PPUSH
// uc_side := 0 ;
59658: LD_ADDR_OWVAR 20
59662: PUSH
59663: LD_INT 0
59665: ST_TO_ADDR
// uc_nation := 0 ;
59666: LD_ADDR_OWVAR 21
59670: PUSH
59671: LD_INT 0
59673: ST_TO_ADDR
// hc_class := class_baggie ;
59674: LD_ADDR_OWVAR 28
59678: PUSH
59679: LD_INT 13
59681: ST_TO_ADDR
// hc_gallery :=  ;
59682: LD_ADDR_OWVAR 33
59686: PUSH
59687: LD_STRING 
59689: ST_TO_ADDR
// end ;
59690: LD_VAR 0 1
59694: RET
// export function PrepareFrog ( ) ; begin
59695: LD_INT 0
59697: PPUSH
// uc_side := 0 ;
59698: LD_ADDR_OWVAR 20
59702: PUSH
59703: LD_INT 0
59705: ST_TO_ADDR
// uc_nation := 0 ;
59706: LD_ADDR_OWVAR 21
59710: PUSH
59711: LD_INT 0
59713: ST_TO_ADDR
// hc_class := class_frog ;
59714: LD_ADDR_OWVAR 28
59718: PUSH
59719: LD_INT 19
59721: ST_TO_ADDR
// hc_gallery :=  ;
59722: LD_ADDR_OWVAR 33
59726: PUSH
59727: LD_STRING 
59729: ST_TO_ADDR
// end ;
59730: LD_VAR 0 1
59734: RET
// export function PrepareFish ( ) ; begin
59735: LD_INT 0
59737: PPUSH
// uc_side := 0 ;
59738: LD_ADDR_OWVAR 20
59742: PUSH
59743: LD_INT 0
59745: ST_TO_ADDR
// uc_nation := 0 ;
59746: LD_ADDR_OWVAR 21
59750: PUSH
59751: LD_INT 0
59753: ST_TO_ADDR
// hc_class := class_fish ;
59754: LD_ADDR_OWVAR 28
59758: PUSH
59759: LD_INT 20
59761: ST_TO_ADDR
// hc_gallery :=  ;
59762: LD_ADDR_OWVAR 33
59766: PUSH
59767: LD_STRING 
59769: ST_TO_ADDR
// end ;
59770: LD_VAR 0 1
59774: RET
// export function PrepareBird ( ) ; begin
59775: LD_INT 0
59777: PPUSH
// uc_side := 0 ;
59778: LD_ADDR_OWVAR 20
59782: PUSH
59783: LD_INT 0
59785: ST_TO_ADDR
// uc_nation := 0 ;
59786: LD_ADDR_OWVAR 21
59790: PUSH
59791: LD_INT 0
59793: ST_TO_ADDR
// hc_class := class_phororhacos ;
59794: LD_ADDR_OWVAR 28
59798: PUSH
59799: LD_INT 18
59801: ST_TO_ADDR
// hc_gallery :=  ;
59802: LD_ADDR_OWVAR 33
59806: PUSH
59807: LD_STRING 
59809: ST_TO_ADDR
// end ;
59810: LD_VAR 0 1
59814: RET
// export function PrepareHorse ( ) ; begin
59815: LD_INT 0
59817: PPUSH
// uc_side := 0 ;
59818: LD_ADDR_OWVAR 20
59822: PUSH
59823: LD_INT 0
59825: ST_TO_ADDR
// uc_nation := 0 ;
59826: LD_ADDR_OWVAR 21
59830: PUSH
59831: LD_INT 0
59833: ST_TO_ADDR
// hc_class := class_horse ;
59834: LD_ADDR_OWVAR 28
59838: PUSH
59839: LD_INT 21
59841: ST_TO_ADDR
// hc_gallery :=  ;
59842: LD_ADDR_OWVAR 33
59846: PUSH
59847: LD_STRING 
59849: ST_TO_ADDR
// end ;
59850: LD_VAR 0 1
59854: RET
// export function PrepareMastodont ( ) ; begin
59855: LD_INT 0
59857: PPUSH
// uc_side := 0 ;
59858: LD_ADDR_OWVAR 20
59862: PUSH
59863: LD_INT 0
59865: ST_TO_ADDR
// uc_nation := 0 ;
59866: LD_ADDR_OWVAR 21
59870: PUSH
59871: LD_INT 0
59873: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59874: LD_ADDR_OWVAR 37
59878: PUSH
59879: LD_INT 31
59881: ST_TO_ADDR
// vc_control := control_rider ;
59882: LD_ADDR_OWVAR 38
59886: PUSH
59887: LD_INT 4
59889: ST_TO_ADDR
// end ;
59890: LD_VAR 0 1
59894: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59895: LD_INT 0
59897: PPUSH
59898: PPUSH
59899: PPUSH
// uc_side = 0 ;
59900: LD_ADDR_OWVAR 20
59904: PUSH
59905: LD_INT 0
59907: ST_TO_ADDR
// uc_nation = 0 ;
59908: LD_ADDR_OWVAR 21
59912: PUSH
59913: LD_INT 0
59915: ST_TO_ADDR
// InitHc_All ( ) ;
59916: CALL_OW 584
// InitVc ;
59920: CALL_OW 20
// if mastodonts then
59924: LD_VAR 0 6
59928: IFFALSE 59995
// for i = 1 to mastodonts do
59930: LD_ADDR_VAR 0 11
59934: PUSH
59935: DOUBLE
59936: LD_INT 1
59938: DEC
59939: ST_TO_ADDR
59940: LD_VAR 0 6
59944: PUSH
59945: FOR_TO
59946: IFFALSE 59993
// begin vc_chassis := 31 ;
59948: LD_ADDR_OWVAR 37
59952: PUSH
59953: LD_INT 31
59955: ST_TO_ADDR
// vc_control := control_rider ;
59956: LD_ADDR_OWVAR 38
59960: PUSH
59961: LD_INT 4
59963: ST_TO_ADDR
// animal := CreateVehicle ;
59964: LD_ADDR_VAR 0 12
59968: PUSH
59969: CALL_OW 45
59973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59974: LD_VAR 0 12
59978: PPUSH
59979: LD_VAR 0 8
59983: PPUSH
59984: LD_INT 0
59986: PPUSH
59987: CALL 62123 0 3
// end ;
59991: GO 59945
59993: POP
59994: POP
// if horses then
59995: LD_VAR 0 5
59999: IFFALSE 60066
// for i = 1 to horses do
60001: LD_ADDR_VAR 0 11
60005: PUSH
60006: DOUBLE
60007: LD_INT 1
60009: DEC
60010: ST_TO_ADDR
60011: LD_VAR 0 5
60015: PUSH
60016: FOR_TO
60017: IFFALSE 60064
// begin hc_class := 21 ;
60019: LD_ADDR_OWVAR 28
60023: PUSH
60024: LD_INT 21
60026: ST_TO_ADDR
// hc_gallery :=  ;
60027: LD_ADDR_OWVAR 33
60031: PUSH
60032: LD_STRING 
60034: ST_TO_ADDR
// animal := CreateHuman ;
60035: LD_ADDR_VAR 0 12
60039: PUSH
60040: CALL_OW 44
60044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60045: LD_VAR 0 12
60049: PPUSH
60050: LD_VAR 0 8
60054: PPUSH
60055: LD_INT 0
60057: PPUSH
60058: CALL 62123 0 3
// end ;
60062: GO 60016
60064: POP
60065: POP
// if birds then
60066: LD_VAR 0 1
60070: IFFALSE 60137
// for i = 1 to birds do
60072: LD_ADDR_VAR 0 11
60076: PUSH
60077: DOUBLE
60078: LD_INT 1
60080: DEC
60081: ST_TO_ADDR
60082: LD_VAR 0 1
60086: PUSH
60087: FOR_TO
60088: IFFALSE 60135
// begin hc_class = 18 ;
60090: LD_ADDR_OWVAR 28
60094: PUSH
60095: LD_INT 18
60097: ST_TO_ADDR
// hc_gallery =  ;
60098: LD_ADDR_OWVAR 33
60102: PUSH
60103: LD_STRING 
60105: ST_TO_ADDR
// animal := CreateHuman ;
60106: LD_ADDR_VAR 0 12
60110: PUSH
60111: CALL_OW 44
60115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60116: LD_VAR 0 12
60120: PPUSH
60121: LD_VAR 0 8
60125: PPUSH
60126: LD_INT 0
60128: PPUSH
60129: CALL 62123 0 3
// end ;
60133: GO 60087
60135: POP
60136: POP
// if tigers then
60137: LD_VAR 0 2
60141: IFFALSE 60225
// for i = 1 to tigers do
60143: LD_ADDR_VAR 0 11
60147: PUSH
60148: DOUBLE
60149: LD_INT 1
60151: DEC
60152: ST_TO_ADDR
60153: LD_VAR 0 2
60157: PUSH
60158: FOR_TO
60159: IFFALSE 60223
// begin hc_class = class_tiger ;
60161: LD_ADDR_OWVAR 28
60165: PUSH
60166: LD_INT 14
60168: ST_TO_ADDR
// hc_gallery =  ;
60169: LD_ADDR_OWVAR 33
60173: PUSH
60174: LD_STRING 
60176: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60177: LD_ADDR_OWVAR 35
60181: PUSH
60182: LD_INT 7
60184: NEG
60185: PPUSH
60186: LD_INT 7
60188: PPUSH
60189: CALL_OW 12
60193: ST_TO_ADDR
// animal := CreateHuman ;
60194: LD_ADDR_VAR 0 12
60198: PUSH
60199: CALL_OW 44
60203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60204: LD_VAR 0 12
60208: PPUSH
60209: LD_VAR 0 8
60213: PPUSH
60214: LD_INT 0
60216: PPUSH
60217: CALL 62123 0 3
// end ;
60221: GO 60158
60223: POP
60224: POP
// if apemans then
60225: LD_VAR 0 3
60229: IFFALSE 60352
// for i = 1 to apemans do
60231: LD_ADDR_VAR 0 11
60235: PUSH
60236: DOUBLE
60237: LD_INT 1
60239: DEC
60240: ST_TO_ADDR
60241: LD_VAR 0 3
60245: PUSH
60246: FOR_TO
60247: IFFALSE 60350
// begin hc_class = class_apeman ;
60249: LD_ADDR_OWVAR 28
60253: PUSH
60254: LD_INT 12
60256: ST_TO_ADDR
// hc_gallery =  ;
60257: LD_ADDR_OWVAR 33
60261: PUSH
60262: LD_STRING 
60264: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60265: LD_ADDR_OWVAR 35
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PPUSH
60274: LD_INT 2
60276: PPUSH
60277: CALL_OW 12
60281: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60282: LD_ADDR_OWVAR 31
60286: PUSH
60287: LD_INT 1
60289: PPUSH
60290: LD_INT 3
60292: PPUSH
60293: CALL_OW 12
60297: PUSH
60298: LD_INT 1
60300: PPUSH
60301: LD_INT 3
60303: PPUSH
60304: CALL_OW 12
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: ST_TO_ADDR
// animal := CreateHuman ;
60321: LD_ADDR_VAR 0 12
60325: PUSH
60326: CALL_OW 44
60330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60331: LD_VAR 0 12
60335: PPUSH
60336: LD_VAR 0 8
60340: PPUSH
60341: LD_INT 0
60343: PPUSH
60344: CALL 62123 0 3
// end ;
60348: GO 60246
60350: POP
60351: POP
// if enchidnas then
60352: LD_VAR 0 4
60356: IFFALSE 60423
// for i = 1 to enchidnas do
60358: LD_ADDR_VAR 0 11
60362: PUSH
60363: DOUBLE
60364: LD_INT 1
60366: DEC
60367: ST_TO_ADDR
60368: LD_VAR 0 4
60372: PUSH
60373: FOR_TO
60374: IFFALSE 60421
// begin hc_class = 13 ;
60376: LD_ADDR_OWVAR 28
60380: PUSH
60381: LD_INT 13
60383: ST_TO_ADDR
// hc_gallery =  ;
60384: LD_ADDR_OWVAR 33
60388: PUSH
60389: LD_STRING 
60391: ST_TO_ADDR
// animal := CreateHuman ;
60392: LD_ADDR_VAR 0 12
60396: PUSH
60397: CALL_OW 44
60401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60402: LD_VAR 0 12
60406: PPUSH
60407: LD_VAR 0 8
60411: PPUSH
60412: LD_INT 0
60414: PPUSH
60415: CALL 62123 0 3
// end ;
60419: GO 60373
60421: POP
60422: POP
// if fishes then
60423: LD_VAR 0 7
60427: IFFALSE 60494
// for i = 1 to fishes do
60429: LD_ADDR_VAR 0 11
60433: PUSH
60434: DOUBLE
60435: LD_INT 1
60437: DEC
60438: ST_TO_ADDR
60439: LD_VAR 0 7
60443: PUSH
60444: FOR_TO
60445: IFFALSE 60492
// begin hc_class = 20 ;
60447: LD_ADDR_OWVAR 28
60451: PUSH
60452: LD_INT 20
60454: ST_TO_ADDR
// hc_gallery =  ;
60455: LD_ADDR_OWVAR 33
60459: PUSH
60460: LD_STRING 
60462: ST_TO_ADDR
// animal := CreateHuman ;
60463: LD_ADDR_VAR 0 12
60467: PUSH
60468: CALL_OW 44
60472: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60473: LD_VAR 0 12
60477: PPUSH
60478: LD_VAR 0 9
60482: PPUSH
60483: LD_INT 0
60485: PPUSH
60486: CALL 62123 0 3
// end ;
60490: GO 60444
60492: POP
60493: POP
// end ;
60494: LD_VAR 0 10
60498: RET
// export function WantHeal ( sci , unit ) ; begin
60499: LD_INT 0
60501: PPUSH
// if GetTaskList ( sci ) > 0 then
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 437
60511: PUSH
60512: LD_INT 0
60514: GREATER
60515: IFFALSE 60585
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60517: LD_VAR 0 1
60521: PPUSH
60522: CALL_OW 437
60526: PUSH
60527: LD_INT 1
60529: ARRAY
60530: PUSH
60531: LD_INT 1
60533: ARRAY
60534: PUSH
60535: LD_STRING l
60537: EQUAL
60538: PUSH
60539: LD_VAR 0 1
60543: PPUSH
60544: CALL_OW 437
60548: PUSH
60549: LD_INT 1
60551: ARRAY
60552: PUSH
60553: LD_INT 4
60555: ARRAY
60556: PUSH
60557: LD_VAR 0 2
60561: EQUAL
60562: AND
60563: IFFALSE 60575
// result := true else
60565: LD_ADDR_VAR 0 3
60569: PUSH
60570: LD_INT 1
60572: ST_TO_ADDR
60573: GO 60583
// result := false ;
60575: LD_ADDR_VAR 0 3
60579: PUSH
60580: LD_INT 0
60582: ST_TO_ADDR
// end else
60583: GO 60593
// result := false ;
60585: LD_ADDR_VAR 0 3
60589: PUSH
60590: LD_INT 0
60592: ST_TO_ADDR
// end ;
60593: LD_VAR 0 3
60597: RET
// export function HealTarget ( sci ) ; begin
60598: LD_INT 0
60600: PPUSH
// if not sci then
60601: LD_VAR 0 1
60605: NOT
60606: IFFALSE 60610
// exit ;
60608: GO 60675
// result := 0 ;
60610: LD_ADDR_VAR 0 2
60614: PUSH
60615: LD_INT 0
60617: ST_TO_ADDR
// if GetTaskList ( sci ) then
60618: LD_VAR 0 1
60622: PPUSH
60623: CALL_OW 437
60627: IFFALSE 60675
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60629: LD_VAR 0 1
60633: PPUSH
60634: CALL_OW 437
60638: PUSH
60639: LD_INT 1
60641: ARRAY
60642: PUSH
60643: LD_INT 1
60645: ARRAY
60646: PUSH
60647: LD_STRING l
60649: EQUAL
60650: IFFALSE 60675
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60652: LD_ADDR_VAR 0 2
60656: PUSH
60657: LD_VAR 0 1
60661: PPUSH
60662: CALL_OW 437
60666: PUSH
60667: LD_INT 1
60669: ARRAY
60670: PUSH
60671: LD_INT 4
60673: ARRAY
60674: ST_TO_ADDR
// end ;
60675: LD_VAR 0 2
60679: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60680: LD_INT 0
60682: PPUSH
60683: PPUSH
60684: PPUSH
60685: PPUSH
// if not base_units then
60686: LD_VAR 0 1
60690: NOT
60691: IFFALSE 60695
// exit ;
60693: GO 60782
// result := false ;
60695: LD_ADDR_VAR 0 2
60699: PUSH
60700: LD_INT 0
60702: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60703: LD_ADDR_VAR 0 5
60707: PUSH
60708: LD_VAR 0 1
60712: PPUSH
60713: LD_INT 21
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PPUSH
60723: CALL_OW 72
60727: ST_TO_ADDR
// if not tmp then
60728: LD_VAR 0 5
60732: NOT
60733: IFFALSE 60737
// exit ;
60735: GO 60782
// for i in tmp do
60737: LD_ADDR_VAR 0 3
60741: PUSH
60742: LD_VAR 0 5
60746: PUSH
60747: FOR_IN
60748: IFFALSE 60780
// begin result := EnemyInRange ( i , 22 ) ;
60750: LD_ADDR_VAR 0 2
60754: PUSH
60755: LD_VAR 0 3
60759: PPUSH
60760: LD_INT 22
60762: PPUSH
60763: CALL 58369 0 2
60767: ST_TO_ADDR
// if result then
60768: LD_VAR 0 2
60772: IFFALSE 60778
// exit ;
60774: POP
60775: POP
60776: GO 60782
// end ;
60778: GO 60747
60780: POP
60781: POP
// end ;
60782: LD_VAR 0 2
60786: RET
// export function FilterByTag ( units , tag ) ; begin
60787: LD_INT 0
60789: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60790: LD_ADDR_VAR 0 3
60794: PUSH
60795: LD_VAR 0 1
60799: PPUSH
60800: LD_INT 120
60802: PUSH
60803: LD_VAR 0 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PPUSH
60812: CALL_OW 72
60816: ST_TO_ADDR
// end ;
60817: LD_VAR 0 3
60821: RET
// export function IsDriver ( un ) ; begin
60822: LD_INT 0
60824: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60825: LD_ADDR_VAR 0 2
60829: PUSH
60830: LD_VAR 0 1
60834: PUSH
60835: LD_INT 55
60837: PUSH
60838: EMPTY
60839: LIST
60840: PPUSH
60841: CALL_OW 69
60845: IN
60846: ST_TO_ADDR
// end ;
60847: LD_VAR 0 2
60851: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60852: LD_INT 0
60854: PPUSH
60855: PPUSH
// list := [ ] ;
60856: LD_ADDR_VAR 0 5
60860: PUSH
60861: EMPTY
60862: ST_TO_ADDR
// case d of 0 :
60863: LD_VAR 0 3
60867: PUSH
60868: LD_INT 0
60870: DOUBLE
60871: EQUAL
60872: IFTRUE 60876
60874: GO 61009
60876: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60877: LD_ADDR_VAR 0 5
60881: PUSH
60882: LD_VAR 0 1
60886: PUSH
60887: LD_INT 4
60889: MINUS
60890: PUSH
60891: LD_VAR 0 2
60895: PUSH
60896: LD_INT 4
60898: MINUS
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: LIST
60907: PUSH
60908: LD_VAR 0 1
60912: PUSH
60913: LD_INT 3
60915: MINUS
60916: PUSH
60917: LD_VAR 0 2
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: LIST
60929: PUSH
60930: LD_VAR 0 1
60934: PUSH
60935: LD_INT 4
60937: PLUS
60938: PUSH
60939: LD_VAR 0 2
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: PUSH
60952: LD_VAR 0 1
60956: PUSH
60957: LD_INT 3
60959: PLUS
60960: PUSH
60961: LD_VAR 0 2
60965: PUSH
60966: LD_INT 3
60968: PLUS
60969: PUSH
60970: LD_INT 5
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: PUSH
60978: LD_VAR 0 1
60982: PUSH
60983: LD_VAR 0 2
60987: PUSH
60988: LD_INT 4
60990: PLUS
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: ST_TO_ADDR
// end ; 1 :
61007: GO 61707
61009: LD_INT 1
61011: DOUBLE
61012: EQUAL
61013: IFTRUE 61017
61015: GO 61150
61017: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61018: LD_ADDR_VAR 0 5
61022: PUSH
61023: LD_VAR 0 1
61027: PUSH
61028: LD_VAR 0 2
61032: PUSH
61033: LD_INT 4
61035: MINUS
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: LIST
61044: PUSH
61045: LD_VAR 0 1
61049: PUSH
61050: LD_INT 3
61052: MINUS
61053: PUSH
61054: LD_VAR 0 2
61058: PUSH
61059: LD_INT 3
61061: MINUS
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: PUSH
61071: LD_VAR 0 1
61075: PUSH
61076: LD_INT 4
61078: MINUS
61079: PUSH
61080: LD_VAR 0 2
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: PUSH
61093: LD_VAR 0 1
61097: PUSH
61098: LD_VAR 0 2
61102: PUSH
61103: LD_INT 3
61105: PLUS
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: PUSH
61115: LD_VAR 0 1
61119: PUSH
61120: LD_INT 4
61122: PLUS
61123: PUSH
61124: LD_VAR 0 2
61128: PUSH
61129: LD_INT 4
61131: PLUS
61132: PUSH
61133: LD_INT 5
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: LIST
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: ST_TO_ADDR
// end ; 2 :
61148: GO 61707
61150: LD_INT 2
61152: DOUBLE
61153: EQUAL
61154: IFTRUE 61158
61156: GO 61287
61158: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61159: LD_ADDR_VAR 0 5
61163: PUSH
61164: LD_VAR 0 1
61168: PUSH
61169: LD_VAR 0 2
61173: PUSH
61174: LD_INT 3
61176: MINUS
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: PUSH
61186: LD_VAR 0 1
61190: PUSH
61191: LD_INT 4
61193: PLUS
61194: PUSH
61195: LD_VAR 0 2
61199: PUSH
61200: LD_INT 4
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: LIST
61207: PUSH
61208: LD_VAR 0 1
61212: PUSH
61213: LD_VAR 0 2
61217: PUSH
61218: LD_INT 4
61220: PLUS
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: PUSH
61230: LD_VAR 0 1
61234: PUSH
61235: LD_INT 3
61237: MINUS
61238: PUSH
61239: LD_VAR 0 2
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: PUSH
61252: LD_VAR 0 1
61256: PUSH
61257: LD_INT 4
61259: MINUS
61260: PUSH
61261: LD_VAR 0 2
61265: PUSH
61266: LD_INT 4
61268: MINUS
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// end ; 3 :
61285: GO 61707
61287: LD_INT 3
61289: DOUBLE
61290: EQUAL
61291: IFTRUE 61295
61293: GO 61428
61295: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61296: LD_ADDR_VAR 0 5
61300: PUSH
61301: LD_VAR 0 1
61305: PUSH
61306: LD_INT 3
61308: PLUS
61309: PUSH
61310: LD_VAR 0 2
61314: PUSH
61315: LD_INT 4
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: PUSH
61323: LD_VAR 0 1
61327: PUSH
61328: LD_INT 4
61330: PLUS
61331: PUSH
61332: LD_VAR 0 2
61336: PUSH
61337: LD_INT 4
61339: PLUS
61340: PUSH
61341: LD_INT 5
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: LIST
61348: PUSH
61349: LD_VAR 0 1
61353: PUSH
61354: LD_INT 4
61356: MINUS
61357: PUSH
61358: LD_VAR 0 2
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: PUSH
61371: LD_VAR 0 1
61375: PUSH
61376: LD_VAR 0 2
61380: PUSH
61381: LD_INT 4
61383: MINUS
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: PUSH
61393: LD_VAR 0 1
61397: PUSH
61398: LD_INT 3
61400: MINUS
61401: PUSH
61402: LD_VAR 0 2
61406: PUSH
61407: LD_INT 3
61409: MINUS
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: ST_TO_ADDR
// end ; 4 :
61426: GO 61707
61428: LD_INT 4
61430: DOUBLE
61431: EQUAL
61432: IFTRUE 61436
61434: GO 61569
61436: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61437: LD_ADDR_VAR 0 5
61441: PUSH
61442: LD_VAR 0 1
61446: PUSH
61447: LD_VAR 0 2
61451: PUSH
61452: LD_INT 4
61454: PLUS
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: PUSH
61464: LD_VAR 0 1
61468: PUSH
61469: LD_INT 3
61471: PLUS
61472: PUSH
61473: LD_VAR 0 2
61477: PUSH
61478: LD_INT 3
61480: PLUS
61481: PUSH
61482: LD_INT 5
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: PUSH
61490: LD_VAR 0 1
61494: PUSH
61495: LD_INT 4
61497: PLUS
61498: PUSH
61499: LD_VAR 0 2
61503: PUSH
61504: LD_INT 4
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: LIST
61511: PUSH
61512: LD_VAR 0 1
61516: PUSH
61517: LD_VAR 0 2
61521: PUSH
61522: LD_INT 3
61524: MINUS
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: PUSH
61534: LD_VAR 0 1
61538: PUSH
61539: LD_INT 4
61541: MINUS
61542: PUSH
61543: LD_VAR 0 2
61547: PUSH
61548: LD_INT 4
61550: MINUS
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: LIST
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: ST_TO_ADDR
// end ; 5 :
61567: GO 61707
61569: LD_INT 5
61571: DOUBLE
61572: EQUAL
61573: IFTRUE 61577
61575: GO 61706
61577: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61578: LD_ADDR_VAR 0 5
61582: PUSH
61583: LD_VAR 0 1
61587: PUSH
61588: LD_INT 4
61590: MINUS
61591: PUSH
61592: LD_VAR 0 2
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: LIST
61604: PUSH
61605: LD_VAR 0 1
61609: PUSH
61610: LD_VAR 0 2
61614: PUSH
61615: LD_INT 4
61617: MINUS
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: LIST
61626: PUSH
61627: LD_VAR 0 1
61631: PUSH
61632: LD_INT 4
61634: PLUS
61635: PUSH
61636: LD_VAR 0 2
61640: PUSH
61641: LD_INT 4
61643: PLUS
61644: PUSH
61645: LD_INT 5
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: PUSH
61653: LD_VAR 0 1
61657: PUSH
61658: LD_INT 3
61660: PLUS
61661: PUSH
61662: LD_VAR 0 2
61666: PUSH
61667: LD_INT 4
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: PUSH
61675: LD_VAR 0 1
61679: PUSH
61680: LD_VAR 0 2
61684: PUSH
61685: LD_INT 3
61687: PLUS
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: ST_TO_ADDR
// end ; end ;
61704: GO 61707
61706: POP
// result := list ;
61707: LD_ADDR_VAR 0 4
61711: PUSH
61712: LD_VAR 0 5
61716: ST_TO_ADDR
// end ;
61717: LD_VAR 0 4
61721: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61722: LD_INT 0
61724: PPUSH
61725: PPUSH
61726: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61727: LD_VAR 0 1
61731: NOT
61732: PUSH
61733: LD_VAR 0 2
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 4
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: IN
61756: NOT
61757: OR
61758: IFFALSE 61762
// exit ;
61760: GO 61845
// tmp := [ ] ;
61762: LD_ADDR_VAR 0 5
61766: PUSH
61767: EMPTY
61768: ST_TO_ADDR
// for i in units do
61769: LD_ADDR_VAR 0 4
61773: PUSH
61774: LD_VAR 0 1
61778: PUSH
61779: FOR_IN
61780: IFFALSE 61814
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61782: LD_ADDR_VAR 0 5
61786: PUSH
61787: LD_VAR 0 5
61791: PPUSH
61792: LD_VAR 0 4
61796: PPUSH
61797: LD_VAR 0 2
61801: PPUSH
61802: CALL_OW 259
61806: PPUSH
61807: CALL 63206 0 2
61811: ST_TO_ADDR
61812: GO 61779
61814: POP
61815: POP
// if not tmp then
61816: LD_VAR 0 5
61820: NOT
61821: IFFALSE 61825
// exit ;
61823: GO 61845
// result := SortListByListDesc ( units , tmp ) ;
61825: LD_ADDR_VAR 0 3
61829: PUSH
61830: LD_VAR 0 1
61834: PPUSH
61835: LD_VAR 0 5
61839: PPUSH
61840: CALL_OW 77
61844: ST_TO_ADDR
// end ;
61845: LD_VAR 0 3
61849: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61850: LD_INT 0
61852: PPUSH
61853: PPUSH
61854: PPUSH
// result := false ;
61855: LD_ADDR_VAR 0 3
61859: PUSH
61860: LD_INT 0
61862: ST_TO_ADDR
// if not building then
61863: LD_VAR 0 2
61867: NOT
61868: IFFALSE 61872
// exit ;
61870: GO 62010
// x := GetX ( building ) ;
61872: LD_ADDR_VAR 0 4
61876: PUSH
61877: LD_VAR 0 2
61881: PPUSH
61882: CALL_OW 250
61886: ST_TO_ADDR
// y := GetY ( building ) ;
61887: LD_ADDR_VAR 0 5
61891: PUSH
61892: LD_VAR 0 2
61896: PPUSH
61897: CALL_OW 251
61901: ST_TO_ADDR
// if not x or not y then
61902: LD_VAR 0 4
61906: NOT
61907: PUSH
61908: LD_VAR 0 5
61912: NOT
61913: OR
61914: IFFALSE 61918
// exit ;
61916: GO 62010
// if GetTaskList ( unit ) then
61918: LD_VAR 0 1
61922: PPUSH
61923: CALL_OW 437
61927: IFFALSE 62010
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61929: LD_STRING e
61931: PUSH
61932: LD_VAR 0 1
61936: PPUSH
61937: CALL_OW 437
61941: PUSH
61942: LD_INT 1
61944: ARRAY
61945: PUSH
61946: LD_INT 1
61948: ARRAY
61949: EQUAL
61950: PUSH
61951: LD_VAR 0 4
61955: PUSH
61956: LD_VAR 0 1
61960: PPUSH
61961: CALL_OW 437
61965: PUSH
61966: LD_INT 1
61968: ARRAY
61969: PUSH
61970: LD_INT 2
61972: ARRAY
61973: EQUAL
61974: AND
61975: PUSH
61976: LD_VAR 0 5
61980: PUSH
61981: LD_VAR 0 1
61985: PPUSH
61986: CALL_OW 437
61990: PUSH
61991: LD_INT 1
61993: ARRAY
61994: PUSH
61995: LD_INT 3
61997: ARRAY
61998: EQUAL
61999: AND
62000: IFFALSE 62010
// result := true end ;
62002: LD_ADDR_VAR 0 3
62006: PUSH
62007: LD_INT 1
62009: ST_TO_ADDR
// end ;
62010: LD_VAR 0 3
62014: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62015: LD_INT 0
62017: PPUSH
// result := false ;
62018: LD_ADDR_VAR 0 4
62022: PUSH
62023: LD_INT 0
62025: ST_TO_ADDR
// if GetTaskList ( unit ) then
62026: LD_VAR 0 1
62030: PPUSH
62031: CALL_OW 437
62035: IFFALSE 62118
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62037: LD_STRING M
62039: PUSH
62040: LD_VAR 0 1
62044: PPUSH
62045: CALL_OW 437
62049: PUSH
62050: LD_INT 1
62052: ARRAY
62053: PUSH
62054: LD_INT 1
62056: ARRAY
62057: EQUAL
62058: PUSH
62059: LD_VAR 0 2
62063: PUSH
62064: LD_VAR 0 1
62068: PPUSH
62069: CALL_OW 437
62073: PUSH
62074: LD_INT 1
62076: ARRAY
62077: PUSH
62078: LD_INT 2
62080: ARRAY
62081: EQUAL
62082: AND
62083: PUSH
62084: LD_VAR 0 3
62088: PUSH
62089: LD_VAR 0 1
62093: PPUSH
62094: CALL_OW 437
62098: PUSH
62099: LD_INT 1
62101: ARRAY
62102: PUSH
62103: LD_INT 3
62105: ARRAY
62106: EQUAL
62107: AND
62108: IFFALSE 62118
// result := true ;
62110: LD_ADDR_VAR 0 4
62114: PUSH
62115: LD_INT 1
62117: ST_TO_ADDR
// end ; end ;
62118: LD_VAR 0 4
62122: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62123: LD_INT 0
62125: PPUSH
62126: PPUSH
62127: PPUSH
62128: PPUSH
// if not unit or not area then
62129: LD_VAR 0 1
62133: NOT
62134: PUSH
62135: LD_VAR 0 2
62139: NOT
62140: OR
62141: IFFALSE 62145
// exit ;
62143: GO 62309
// tmp := AreaToList ( area , i ) ;
62145: LD_ADDR_VAR 0 6
62149: PUSH
62150: LD_VAR 0 2
62154: PPUSH
62155: LD_VAR 0 5
62159: PPUSH
62160: CALL_OW 517
62164: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62165: LD_ADDR_VAR 0 5
62169: PUSH
62170: DOUBLE
62171: LD_INT 1
62173: DEC
62174: ST_TO_ADDR
62175: LD_VAR 0 6
62179: PUSH
62180: LD_INT 1
62182: ARRAY
62183: PUSH
62184: FOR_TO
62185: IFFALSE 62307
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62187: LD_ADDR_VAR 0 7
62191: PUSH
62192: LD_VAR 0 6
62196: PUSH
62197: LD_INT 1
62199: ARRAY
62200: PUSH
62201: LD_VAR 0 5
62205: ARRAY
62206: PUSH
62207: LD_VAR 0 6
62211: PUSH
62212: LD_INT 2
62214: ARRAY
62215: PUSH
62216: LD_VAR 0 5
62220: ARRAY
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62226: LD_VAR 0 7
62230: PUSH
62231: LD_INT 1
62233: ARRAY
62234: PPUSH
62235: LD_VAR 0 7
62239: PUSH
62240: LD_INT 2
62242: ARRAY
62243: PPUSH
62244: CALL_OW 428
62248: PUSH
62249: LD_INT 0
62251: EQUAL
62252: IFFALSE 62305
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62254: LD_VAR 0 1
62258: PPUSH
62259: LD_VAR 0 7
62263: PUSH
62264: LD_INT 1
62266: ARRAY
62267: PPUSH
62268: LD_VAR 0 7
62272: PUSH
62273: LD_INT 2
62275: ARRAY
62276: PPUSH
62277: LD_VAR 0 3
62281: PPUSH
62282: CALL_OW 48
// result := IsPlaced ( unit ) ;
62286: LD_ADDR_VAR 0 4
62290: PUSH
62291: LD_VAR 0 1
62295: PPUSH
62296: CALL_OW 305
62300: ST_TO_ADDR
// exit ;
62301: POP
62302: POP
62303: GO 62309
// end ; end ;
62305: GO 62184
62307: POP
62308: POP
// end ;
62309: LD_VAR 0 4
62313: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62314: LD_INT 0
62316: PPUSH
62317: PPUSH
62318: PPUSH
// if not side or side > 8 then
62319: LD_VAR 0 1
62323: NOT
62324: PUSH
62325: LD_VAR 0 1
62329: PUSH
62330: LD_INT 8
62332: GREATER
62333: OR
62334: IFFALSE 62338
// exit ;
62336: GO 62525
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62338: LD_ADDR_VAR 0 4
62342: PUSH
62343: LD_INT 22
62345: PUSH
62346: LD_VAR 0 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 21
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PPUSH
62369: CALL_OW 69
62373: ST_TO_ADDR
// if not tmp then
62374: LD_VAR 0 4
62378: NOT
62379: IFFALSE 62383
// exit ;
62381: GO 62525
// enable_addtolog := true ;
62383: LD_ADDR_OWVAR 81
62387: PUSH
62388: LD_INT 1
62390: ST_TO_ADDR
// AddToLog ( [ ) ;
62391: LD_STRING [
62393: PPUSH
62394: CALL_OW 561
// for i in tmp do
62398: LD_ADDR_VAR 0 3
62402: PUSH
62403: LD_VAR 0 4
62407: PUSH
62408: FOR_IN
62409: IFFALSE 62516
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62411: LD_STRING [
62413: PUSH
62414: LD_VAR 0 3
62418: PPUSH
62419: CALL_OW 266
62423: STR
62424: PUSH
62425: LD_STRING , 
62427: STR
62428: PUSH
62429: LD_VAR 0 3
62433: PPUSH
62434: CALL_OW 250
62438: STR
62439: PUSH
62440: LD_STRING , 
62442: STR
62443: PUSH
62444: LD_VAR 0 3
62448: PPUSH
62449: CALL_OW 251
62453: STR
62454: PUSH
62455: LD_STRING , 
62457: STR
62458: PUSH
62459: LD_VAR 0 3
62463: PPUSH
62464: CALL_OW 254
62468: STR
62469: PUSH
62470: LD_STRING , 
62472: STR
62473: PUSH
62474: LD_VAR 0 3
62478: PPUSH
62479: LD_INT 1
62481: PPUSH
62482: CALL_OW 268
62486: STR
62487: PUSH
62488: LD_STRING , 
62490: STR
62491: PUSH
62492: LD_VAR 0 3
62496: PPUSH
62497: LD_INT 2
62499: PPUSH
62500: CALL_OW 268
62504: STR
62505: PUSH
62506: LD_STRING ],
62508: STR
62509: PPUSH
62510: CALL_OW 561
// end ;
62514: GO 62408
62516: POP
62517: POP
// AddToLog ( ]; ) ;
62518: LD_STRING ];
62520: PPUSH
62521: CALL_OW 561
// end ;
62525: LD_VAR 0 2
62529: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62530: LD_INT 0
62532: PPUSH
62533: PPUSH
62534: PPUSH
62535: PPUSH
62536: PPUSH
// if not area or not rate or not max then
62537: LD_VAR 0 1
62541: NOT
62542: PUSH
62543: LD_VAR 0 2
62547: NOT
62548: OR
62549: PUSH
62550: LD_VAR 0 4
62554: NOT
62555: OR
62556: IFFALSE 62560
// exit ;
62558: GO 62749
// while 1 do
62560: LD_INT 1
62562: IFFALSE 62749
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62564: LD_ADDR_VAR 0 9
62568: PUSH
62569: LD_VAR 0 1
62573: PPUSH
62574: LD_INT 1
62576: PPUSH
62577: CALL_OW 287
62581: PUSH
62582: LD_INT 10
62584: MUL
62585: ST_TO_ADDR
// r := rate / 10 ;
62586: LD_ADDR_VAR 0 7
62590: PUSH
62591: LD_VAR 0 2
62595: PUSH
62596: LD_INT 10
62598: DIVREAL
62599: ST_TO_ADDR
// time := 1 1$00 ;
62600: LD_ADDR_VAR 0 8
62604: PUSH
62605: LD_INT 2100
62607: ST_TO_ADDR
// if amount < min then
62608: LD_VAR 0 9
62612: PUSH
62613: LD_VAR 0 3
62617: LESS
62618: IFFALSE 62636
// r := r * 2 else
62620: LD_ADDR_VAR 0 7
62624: PUSH
62625: LD_VAR 0 7
62629: PUSH
62630: LD_INT 2
62632: MUL
62633: ST_TO_ADDR
62634: GO 62662
// if amount > max then
62636: LD_VAR 0 9
62640: PUSH
62641: LD_VAR 0 4
62645: GREATER
62646: IFFALSE 62662
// r := r / 2 ;
62648: LD_ADDR_VAR 0 7
62652: PUSH
62653: LD_VAR 0 7
62657: PUSH
62658: LD_INT 2
62660: DIVREAL
62661: ST_TO_ADDR
// time := time / r ;
62662: LD_ADDR_VAR 0 8
62666: PUSH
62667: LD_VAR 0 8
62671: PUSH
62672: LD_VAR 0 7
62676: DIVREAL
62677: ST_TO_ADDR
// if time < 0 then
62678: LD_VAR 0 8
62682: PUSH
62683: LD_INT 0
62685: LESS
62686: IFFALSE 62703
// time := time * - 1 ;
62688: LD_ADDR_VAR 0 8
62692: PUSH
62693: LD_VAR 0 8
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: MUL
62702: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62703: LD_VAR 0 8
62707: PUSH
62708: LD_INT 35
62710: PPUSH
62711: LD_INT 875
62713: PPUSH
62714: CALL_OW 12
62718: PLUS
62719: PPUSH
62720: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62724: LD_INT 1
62726: PPUSH
62727: LD_INT 5
62729: PPUSH
62730: CALL_OW 12
62734: PPUSH
62735: LD_VAR 0 1
62739: PPUSH
62740: LD_INT 1
62742: PPUSH
62743: CALL_OW 55
// end ;
62747: GO 62560
// end ;
62749: LD_VAR 0 5
62753: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62754: LD_INT 0
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
// if not turrets or not factories then
62764: LD_VAR 0 1
62768: NOT
62769: PUSH
62770: LD_VAR 0 2
62774: NOT
62775: OR
62776: IFFALSE 62780
// exit ;
62778: GO 63087
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62780: LD_ADDR_VAR 0 10
62784: PUSH
62785: LD_INT 5
62787: PUSH
62788: LD_INT 6
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: LD_INT 4
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 5
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 24
62822: PUSH
62823: LD_INT 25
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 23
62832: PUSH
62833: LD_INT 27
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 42
62846: PUSH
62847: LD_INT 43
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 44
62856: PUSH
62857: LD_INT 46
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 45
62866: PUSH
62867: LD_INT 47
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: LIST
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: ST_TO_ADDR
// result := [ ] ;
62884: LD_ADDR_VAR 0 3
62888: PUSH
62889: EMPTY
62890: ST_TO_ADDR
// for i in turrets do
62891: LD_ADDR_VAR 0 4
62895: PUSH
62896: LD_VAR 0 1
62900: PUSH
62901: FOR_IN
62902: IFFALSE 63085
// begin nat := GetNation ( i ) ;
62904: LD_ADDR_VAR 0 7
62908: PUSH
62909: LD_VAR 0 4
62913: PPUSH
62914: CALL_OW 248
62918: ST_TO_ADDR
// weapon := 0 ;
62919: LD_ADDR_VAR 0 8
62923: PUSH
62924: LD_INT 0
62926: ST_TO_ADDR
// if not nat then
62927: LD_VAR 0 7
62931: NOT
62932: IFFALSE 62936
// continue ;
62934: GO 62901
// for j in list [ nat ] do
62936: LD_ADDR_VAR 0 5
62940: PUSH
62941: LD_VAR 0 10
62945: PUSH
62946: LD_VAR 0 7
62950: ARRAY
62951: PUSH
62952: FOR_IN
62953: IFFALSE 62994
// if GetBWeapon ( i ) = j [ 1 ] then
62955: LD_VAR 0 4
62959: PPUSH
62960: CALL_OW 269
62964: PUSH
62965: LD_VAR 0 5
62969: PUSH
62970: LD_INT 1
62972: ARRAY
62973: EQUAL
62974: IFFALSE 62992
// begin weapon := j [ 2 ] ;
62976: LD_ADDR_VAR 0 8
62980: PUSH
62981: LD_VAR 0 5
62985: PUSH
62986: LD_INT 2
62988: ARRAY
62989: ST_TO_ADDR
// break ;
62990: GO 62994
// end ;
62992: GO 62952
62994: POP
62995: POP
// if not weapon then
62996: LD_VAR 0 8
63000: NOT
63001: IFFALSE 63005
// continue ;
63003: GO 62901
// for k in factories do
63005: LD_ADDR_VAR 0 6
63009: PUSH
63010: LD_VAR 0 2
63014: PUSH
63015: FOR_IN
63016: IFFALSE 63081
// begin weapons := AvailableWeaponList ( k ) ;
63018: LD_ADDR_VAR 0 9
63022: PUSH
63023: LD_VAR 0 6
63027: PPUSH
63028: CALL_OW 478
63032: ST_TO_ADDR
// if not weapons then
63033: LD_VAR 0 9
63037: NOT
63038: IFFALSE 63042
// continue ;
63040: GO 63015
// if weapon in weapons then
63042: LD_VAR 0 8
63046: PUSH
63047: LD_VAR 0 9
63051: IN
63052: IFFALSE 63079
// begin result := [ i , weapon ] ;
63054: LD_ADDR_VAR 0 3
63058: PUSH
63059: LD_VAR 0 4
63063: PUSH
63064: LD_VAR 0 8
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: ST_TO_ADDR
// exit ;
63073: POP
63074: POP
63075: POP
63076: POP
63077: GO 63087
// end ; end ;
63079: GO 63015
63081: POP
63082: POP
// end ;
63083: GO 62901
63085: POP
63086: POP
// end ;
63087: LD_VAR 0 3
63091: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63092: LD_INT 0
63094: PPUSH
// if not side or side > 8 then
63095: LD_VAR 0 3
63099: NOT
63100: PUSH
63101: LD_VAR 0 3
63105: PUSH
63106: LD_INT 8
63108: GREATER
63109: OR
63110: IFFALSE 63114
// exit ;
63112: GO 63173
// if not range then
63114: LD_VAR 0 4
63118: NOT
63119: IFFALSE 63130
// range := - 12 ;
63121: LD_ADDR_VAR 0 4
63125: PUSH
63126: LD_INT 12
63128: NEG
63129: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63130: LD_VAR 0 1
63134: PPUSH
63135: LD_VAR 0 2
63139: PPUSH
63140: LD_VAR 0 3
63144: PPUSH
63145: LD_VAR 0 4
63149: PPUSH
63150: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63154: LD_VAR 0 1
63158: PPUSH
63159: LD_VAR 0 2
63163: PPUSH
63164: LD_VAR 0 3
63168: PPUSH
63169: CALL_OW 331
// end ;
63173: LD_VAR 0 5
63177: RET
// export function Video ( mode ) ; begin
63178: LD_INT 0
63180: PPUSH
// ingame_video = mode ;
63181: LD_ADDR_OWVAR 52
63185: PUSH
63186: LD_VAR 0 1
63190: ST_TO_ADDR
// interface_hidden = mode ;
63191: LD_ADDR_OWVAR 54
63195: PUSH
63196: LD_VAR 0 1
63200: ST_TO_ADDR
// end ;
63201: LD_VAR 0 2
63205: RET
// export function Join ( array , element ) ; begin
63206: LD_INT 0
63208: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63209: LD_ADDR_VAR 0 3
63213: PUSH
63214: LD_VAR 0 1
63218: PPUSH
63219: LD_VAR 0 1
63223: PUSH
63224: LD_INT 1
63226: PLUS
63227: PPUSH
63228: LD_VAR 0 2
63232: PPUSH
63233: CALL_OW 1
63237: ST_TO_ADDR
// end ;
63238: LD_VAR 0 3
63242: RET
// export function JoinUnion ( array , element ) ; begin
63243: LD_INT 0
63245: PPUSH
// result := array union element ;
63246: LD_ADDR_VAR 0 3
63250: PUSH
63251: LD_VAR 0 1
63255: PUSH
63256: LD_VAR 0 2
63260: UNION
63261: ST_TO_ADDR
// end ;
63262: LD_VAR 0 3
63266: RET
// export function GetBehemoths ( side ) ; begin
63267: LD_INT 0
63269: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63270: LD_ADDR_VAR 0 2
63274: PUSH
63275: LD_INT 22
63277: PUSH
63278: LD_VAR 0 1
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 31
63289: PUSH
63290: LD_INT 25
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PPUSH
63301: CALL_OW 69
63305: ST_TO_ADDR
// end ;
63306: LD_VAR 0 2
63310: RET
// export function Shuffle ( array ) ; var i , index ; begin
63311: LD_INT 0
63313: PPUSH
63314: PPUSH
63315: PPUSH
// result := [ ] ;
63316: LD_ADDR_VAR 0 2
63320: PUSH
63321: EMPTY
63322: ST_TO_ADDR
// if not array then
63323: LD_VAR 0 1
63327: NOT
63328: IFFALSE 63332
// exit ;
63330: GO 63431
// Randomize ;
63332: CALL_OW 10
// for i = array downto 1 do
63336: LD_ADDR_VAR 0 3
63340: PUSH
63341: DOUBLE
63342: LD_VAR 0 1
63346: INC
63347: ST_TO_ADDR
63348: LD_INT 1
63350: PUSH
63351: FOR_DOWNTO
63352: IFFALSE 63429
// begin index := rand ( 1 , array ) ;
63354: LD_ADDR_VAR 0 4
63358: PUSH
63359: LD_INT 1
63361: PPUSH
63362: LD_VAR 0 1
63366: PPUSH
63367: CALL_OW 12
63371: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63372: LD_ADDR_VAR 0 2
63376: PUSH
63377: LD_VAR 0 2
63381: PPUSH
63382: LD_VAR 0 2
63386: PUSH
63387: LD_INT 1
63389: PLUS
63390: PPUSH
63391: LD_VAR 0 1
63395: PUSH
63396: LD_VAR 0 4
63400: ARRAY
63401: PPUSH
63402: CALL_OW 2
63406: ST_TO_ADDR
// array := Delete ( array , index ) ;
63407: LD_ADDR_VAR 0 1
63411: PUSH
63412: LD_VAR 0 1
63416: PPUSH
63417: LD_VAR 0 4
63421: PPUSH
63422: CALL_OW 3
63426: ST_TO_ADDR
// end ;
63427: GO 63351
63429: POP
63430: POP
// end ;
63431: LD_VAR 0 2
63435: RET
// export function GetBaseMaterials ( base ) ; begin
63436: LD_INT 0
63438: PPUSH
// result := [ 0 , 0 , 0 ] ;
63439: LD_ADDR_VAR 0 2
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: ST_TO_ADDR
// if not base then
63458: LD_VAR 0 1
63462: NOT
63463: IFFALSE 63467
// exit ;
63465: GO 63516
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63467: LD_ADDR_VAR 0 2
63471: PUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: LD_INT 1
63479: PPUSH
63480: CALL_OW 275
63484: PUSH
63485: LD_VAR 0 1
63489: PPUSH
63490: LD_INT 2
63492: PPUSH
63493: CALL_OW 275
63497: PUSH
63498: LD_VAR 0 1
63502: PPUSH
63503: LD_INT 3
63505: PPUSH
63506: CALL_OW 275
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: ST_TO_ADDR
// end ;
63516: LD_VAR 0 2
63520: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63521: LD_INT 0
63523: PPUSH
63524: PPUSH
// result := array ;
63525: LD_ADDR_VAR 0 3
63529: PUSH
63530: LD_VAR 0 1
63534: ST_TO_ADDR
// if size >= result then
63535: LD_VAR 0 2
63539: PUSH
63540: LD_VAR 0 3
63544: GREATEREQUAL
63545: IFFALSE 63549
// exit ;
63547: GO 63599
// if size then
63549: LD_VAR 0 2
63553: IFFALSE 63599
// for i := array downto size do
63555: LD_ADDR_VAR 0 4
63559: PUSH
63560: DOUBLE
63561: LD_VAR 0 1
63565: INC
63566: ST_TO_ADDR
63567: LD_VAR 0 2
63571: PUSH
63572: FOR_DOWNTO
63573: IFFALSE 63597
// result := Delete ( result , result ) ;
63575: LD_ADDR_VAR 0 3
63579: PUSH
63580: LD_VAR 0 3
63584: PPUSH
63585: LD_VAR 0 3
63589: PPUSH
63590: CALL_OW 3
63594: ST_TO_ADDR
63595: GO 63572
63597: POP
63598: POP
// end ;
63599: LD_VAR 0 3
63603: RET
// export function ComExit ( unit ) ; var tmp ; begin
63604: LD_INT 0
63606: PPUSH
63607: PPUSH
// if not IsInUnit ( unit ) then
63608: LD_VAR 0 1
63612: PPUSH
63613: CALL_OW 310
63617: NOT
63618: IFFALSE 63622
// exit ;
63620: GO 63682
// tmp := IsInUnit ( unit ) ;
63622: LD_ADDR_VAR 0 3
63626: PUSH
63627: LD_VAR 0 1
63631: PPUSH
63632: CALL_OW 310
63636: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63637: LD_VAR 0 3
63641: PPUSH
63642: CALL_OW 247
63646: PUSH
63647: LD_INT 2
63649: EQUAL
63650: IFFALSE 63663
// ComExitVehicle ( unit ) else
63652: LD_VAR 0 1
63656: PPUSH
63657: CALL_OW 121
63661: GO 63672
// ComExitBuilding ( unit ) ;
63663: LD_VAR 0 1
63667: PPUSH
63668: CALL_OW 122
// result := tmp ;
63672: LD_ADDR_VAR 0 2
63676: PUSH
63677: LD_VAR 0 3
63681: ST_TO_ADDR
// end ;
63682: LD_VAR 0 2
63686: RET
// export function ComExitAll ( units ) ; var i ; begin
63687: LD_INT 0
63689: PPUSH
63690: PPUSH
// if not units then
63691: LD_VAR 0 1
63695: NOT
63696: IFFALSE 63700
// exit ;
63698: GO 63726
// for i in units do
63700: LD_ADDR_VAR 0 3
63704: PUSH
63705: LD_VAR 0 1
63709: PUSH
63710: FOR_IN
63711: IFFALSE 63724
// ComExit ( i ) ;
63713: LD_VAR 0 3
63717: PPUSH
63718: CALL 63604 0 1
63722: GO 63710
63724: POP
63725: POP
// end ;
63726: LD_VAR 0 2
63730: RET
// export function ResetHc ; begin
63731: LD_INT 0
63733: PPUSH
// InitHc ;
63734: CALL_OW 19
// hc_importance := 0 ;
63738: LD_ADDR_OWVAR 32
63742: PUSH
63743: LD_INT 0
63745: ST_TO_ADDR
// end ;
63746: LD_VAR 0 1
63750: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63751: LD_INT 0
63753: PPUSH
63754: PPUSH
63755: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63756: LD_ADDR_VAR 0 6
63760: PUSH
63761: LD_VAR 0 1
63765: PUSH
63766: LD_VAR 0 3
63770: PLUS
63771: PUSH
63772: LD_INT 2
63774: DIV
63775: ST_TO_ADDR
// if _x < 0 then
63776: LD_VAR 0 6
63780: PUSH
63781: LD_INT 0
63783: LESS
63784: IFFALSE 63801
// _x := _x * - 1 ;
63786: LD_ADDR_VAR 0 6
63790: PUSH
63791: LD_VAR 0 6
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: MUL
63800: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63801: LD_ADDR_VAR 0 7
63805: PUSH
63806: LD_VAR 0 2
63810: PUSH
63811: LD_VAR 0 4
63815: PLUS
63816: PUSH
63817: LD_INT 2
63819: DIV
63820: ST_TO_ADDR
// if _y < 0 then
63821: LD_VAR 0 7
63825: PUSH
63826: LD_INT 0
63828: LESS
63829: IFFALSE 63846
// _y := _y * - 1 ;
63831: LD_ADDR_VAR 0 7
63835: PUSH
63836: LD_VAR 0 7
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: MUL
63845: ST_TO_ADDR
// result := [ _x , _y ] ;
63846: LD_ADDR_VAR 0 5
63850: PUSH
63851: LD_VAR 0 6
63855: PUSH
63856: LD_VAR 0 7
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: ST_TO_ADDR
// end ;
63865: LD_VAR 0 5
63869: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63870: LD_INT 0
63872: PPUSH
63873: PPUSH
63874: PPUSH
63875: PPUSH
// task := GetTaskList ( unit ) ;
63876: LD_ADDR_VAR 0 7
63880: PUSH
63881: LD_VAR 0 1
63885: PPUSH
63886: CALL_OW 437
63890: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63891: LD_VAR 0 7
63895: NOT
63896: PUSH
63897: LD_VAR 0 1
63901: PPUSH
63902: LD_VAR 0 2
63906: PPUSH
63907: CALL_OW 308
63911: NOT
63912: AND
63913: IFFALSE 63917
// exit ;
63915: GO 64035
// if IsInArea ( unit , area ) then
63917: LD_VAR 0 1
63921: PPUSH
63922: LD_VAR 0 2
63926: PPUSH
63927: CALL_OW 308
63931: IFFALSE 63949
// begin ComMoveToArea ( unit , goAway ) ;
63933: LD_VAR 0 1
63937: PPUSH
63938: LD_VAR 0 3
63942: PPUSH
63943: CALL_OW 113
// exit ;
63947: GO 64035
// end ; if task [ 1 ] [ 1 ] <> M then
63949: LD_VAR 0 7
63953: PUSH
63954: LD_INT 1
63956: ARRAY
63957: PUSH
63958: LD_INT 1
63960: ARRAY
63961: PUSH
63962: LD_STRING M
63964: NONEQUAL
63965: IFFALSE 63969
// exit ;
63967: GO 64035
// x := task [ 1 ] [ 2 ] ;
63969: LD_ADDR_VAR 0 5
63973: PUSH
63974: LD_VAR 0 7
63978: PUSH
63979: LD_INT 1
63981: ARRAY
63982: PUSH
63983: LD_INT 2
63985: ARRAY
63986: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63987: LD_ADDR_VAR 0 6
63991: PUSH
63992: LD_VAR 0 7
63996: PUSH
63997: LD_INT 1
63999: ARRAY
64000: PUSH
64001: LD_INT 3
64003: ARRAY
64004: ST_TO_ADDR
// if InArea ( x , y , area ) then
64005: LD_VAR 0 5
64009: PPUSH
64010: LD_VAR 0 6
64014: PPUSH
64015: LD_VAR 0 2
64019: PPUSH
64020: CALL_OW 309
64024: IFFALSE 64035
// ComStop ( unit ) ;
64026: LD_VAR 0 1
64030: PPUSH
64031: CALL_OW 141
// end ;
64035: LD_VAR 0 4
64039: RET
// export function Abs ( value ) ; begin
64040: LD_INT 0
64042: PPUSH
// result := value ;
64043: LD_ADDR_VAR 0 2
64047: PUSH
64048: LD_VAR 0 1
64052: ST_TO_ADDR
// if value < 0 then
64053: LD_VAR 0 1
64057: PUSH
64058: LD_INT 0
64060: LESS
64061: IFFALSE 64078
// result := value * - 1 ;
64063: LD_ADDR_VAR 0 2
64067: PUSH
64068: LD_VAR 0 1
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: MUL
64077: ST_TO_ADDR
// end ;
64078: LD_VAR 0 2
64082: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64083: LD_INT 0
64085: PPUSH
64086: PPUSH
64087: PPUSH
64088: PPUSH
64089: PPUSH
64090: PPUSH
64091: PPUSH
64092: PPUSH
// if not unit or not building then
64093: LD_VAR 0 1
64097: NOT
64098: PUSH
64099: LD_VAR 0 2
64103: NOT
64104: OR
64105: IFFALSE 64109
// exit ;
64107: GO 64335
// x := GetX ( building ) ;
64109: LD_ADDR_VAR 0 4
64113: PUSH
64114: LD_VAR 0 2
64118: PPUSH
64119: CALL_OW 250
64123: ST_TO_ADDR
// y := GetY ( building ) ;
64124: LD_ADDR_VAR 0 6
64128: PUSH
64129: LD_VAR 0 2
64133: PPUSH
64134: CALL_OW 251
64138: ST_TO_ADDR
// d := GetDir ( building ) ;
64139: LD_ADDR_VAR 0 8
64143: PUSH
64144: LD_VAR 0 2
64148: PPUSH
64149: CALL_OW 254
64153: ST_TO_ADDR
// r := 4 ;
64154: LD_ADDR_VAR 0 9
64158: PUSH
64159: LD_INT 4
64161: ST_TO_ADDR
// for i := 1 to 5 do
64162: LD_ADDR_VAR 0 10
64166: PUSH
64167: DOUBLE
64168: LD_INT 1
64170: DEC
64171: ST_TO_ADDR
64172: LD_INT 5
64174: PUSH
64175: FOR_TO
64176: IFFALSE 64333
// begin _x := ShiftX ( x , d , r + i ) ;
64178: LD_ADDR_VAR 0 5
64182: PUSH
64183: LD_VAR 0 4
64187: PPUSH
64188: LD_VAR 0 8
64192: PPUSH
64193: LD_VAR 0 9
64197: PUSH
64198: LD_VAR 0 10
64202: PLUS
64203: PPUSH
64204: CALL_OW 272
64208: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64209: LD_ADDR_VAR 0 7
64213: PUSH
64214: LD_VAR 0 6
64218: PPUSH
64219: LD_VAR 0 8
64223: PPUSH
64224: LD_VAR 0 9
64228: PUSH
64229: LD_VAR 0 10
64233: PLUS
64234: PPUSH
64235: CALL_OW 273
64239: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64240: LD_VAR 0 5
64244: PPUSH
64245: LD_VAR 0 7
64249: PPUSH
64250: CALL_OW 488
64254: PUSH
64255: LD_VAR 0 5
64259: PPUSH
64260: LD_VAR 0 7
64264: PPUSH
64265: CALL_OW 428
64269: PPUSH
64270: CALL_OW 247
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: IN
64285: NOT
64286: AND
64287: IFFALSE 64331
// begin ComMoveXY ( unit , _x , _y ) ;
64289: LD_VAR 0 1
64293: PPUSH
64294: LD_VAR 0 5
64298: PPUSH
64299: LD_VAR 0 7
64303: PPUSH
64304: CALL_OW 111
// result := [ _x , _y ] ;
64308: LD_ADDR_VAR 0 3
64312: PUSH
64313: LD_VAR 0 5
64317: PUSH
64318: LD_VAR 0 7
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: ST_TO_ADDR
// exit ;
64327: POP
64328: POP
64329: GO 64335
// end ; end ;
64331: GO 64175
64333: POP
64334: POP
// end ;
64335: LD_VAR 0 3
64339: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64340: LD_INT 0
64342: PPUSH
64343: PPUSH
64344: PPUSH
// result := 0 ;
64345: LD_ADDR_VAR 0 3
64349: PUSH
64350: LD_INT 0
64352: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64353: LD_VAR 0 1
64357: PUSH
64358: LD_INT 0
64360: LESS
64361: PUSH
64362: LD_VAR 0 1
64366: PUSH
64367: LD_INT 8
64369: GREATER
64370: OR
64371: PUSH
64372: LD_VAR 0 2
64376: PUSH
64377: LD_INT 0
64379: LESS
64380: OR
64381: PUSH
64382: LD_VAR 0 2
64386: PUSH
64387: LD_INT 8
64389: GREATER
64390: OR
64391: IFFALSE 64395
// exit ;
64393: GO 64470
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64395: LD_ADDR_VAR 0 4
64399: PUSH
64400: LD_INT 22
64402: PUSH
64403: LD_VAR 0 2
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PPUSH
64412: CALL_OW 69
64416: PUSH
64417: FOR_IN
64418: IFFALSE 64468
// begin un := UnitShoot ( i ) ;
64420: LD_ADDR_VAR 0 5
64424: PUSH
64425: LD_VAR 0 4
64429: PPUSH
64430: CALL_OW 504
64434: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64435: LD_VAR 0 5
64439: PPUSH
64440: CALL_OW 255
64444: PUSH
64445: LD_VAR 0 1
64449: EQUAL
64450: IFFALSE 64466
// begin result := un ;
64452: LD_ADDR_VAR 0 3
64456: PUSH
64457: LD_VAR 0 5
64461: ST_TO_ADDR
// exit ;
64462: POP
64463: POP
64464: GO 64470
// end ; end ;
64466: GO 64417
64468: POP
64469: POP
// end ;
64470: LD_VAR 0 3
64474: RET
// export function GetCargoBay ( units ) ; begin
64475: LD_INT 0
64477: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64478: LD_ADDR_VAR 0 2
64482: PUSH
64483: LD_VAR 0 1
64487: PPUSH
64488: LD_INT 2
64490: PUSH
64491: LD_INT 34
64493: PUSH
64494: LD_INT 12
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 34
64503: PUSH
64504: LD_INT 51
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 34
64513: PUSH
64514: LD_INT 32
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 34
64523: PUSH
64524: LD_INT 89
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: PPUSH
64538: CALL_OW 72
64542: ST_TO_ADDR
// end ;
64543: LD_VAR 0 2
64547: RET
// export function Negate ( value ) ; begin
64548: LD_INT 0
64550: PPUSH
// result := not value ;
64551: LD_ADDR_VAR 0 2
64555: PUSH
64556: LD_VAR 0 1
64560: NOT
64561: ST_TO_ADDR
// end ;
64562: LD_VAR 0 2
64566: RET
// export function Inc ( value ) ; begin
64567: LD_INT 0
64569: PPUSH
// result := value + 1 ;
64570: LD_ADDR_VAR 0 2
64574: PUSH
64575: LD_VAR 0 1
64579: PUSH
64580: LD_INT 1
64582: PLUS
64583: ST_TO_ADDR
// end ;
64584: LD_VAR 0 2
64588: RET
// export function Dec ( value ) ; begin
64589: LD_INT 0
64591: PPUSH
// result := value - 1 ;
64592: LD_ADDR_VAR 0 2
64596: PUSH
64597: LD_VAR 0 1
64601: PUSH
64602: LD_INT 1
64604: MINUS
64605: ST_TO_ADDR
// end ;
64606: LD_VAR 0 2
64610: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64611: LD_INT 0
64613: PPUSH
64614: PPUSH
64615: PPUSH
64616: PPUSH
64617: PPUSH
64618: PPUSH
64619: PPUSH
64620: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64621: LD_VAR 0 1
64625: PPUSH
64626: LD_VAR 0 2
64630: PPUSH
64631: CALL_OW 488
64635: NOT
64636: PUSH
64637: LD_VAR 0 3
64641: PPUSH
64642: LD_VAR 0 4
64646: PPUSH
64647: CALL_OW 488
64651: NOT
64652: OR
64653: IFFALSE 64666
// begin result := - 1 ;
64655: LD_ADDR_VAR 0 5
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: ST_TO_ADDR
// exit ;
64664: GO 64901
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64666: LD_ADDR_VAR 0 12
64670: PUSH
64671: LD_VAR 0 1
64675: PPUSH
64676: LD_VAR 0 2
64680: PPUSH
64681: LD_VAR 0 3
64685: PPUSH
64686: LD_VAR 0 4
64690: PPUSH
64691: CALL 63751 0 4
64695: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64696: LD_ADDR_VAR 0 11
64700: PUSH
64701: LD_VAR 0 1
64705: PPUSH
64706: LD_VAR 0 2
64710: PPUSH
64711: LD_VAR 0 12
64715: PUSH
64716: LD_INT 1
64718: ARRAY
64719: PPUSH
64720: LD_VAR 0 12
64724: PUSH
64725: LD_INT 2
64727: ARRAY
64728: PPUSH
64729: CALL_OW 298
64733: ST_TO_ADDR
// distance := 9999 ;
64734: LD_ADDR_VAR 0 10
64738: PUSH
64739: LD_INT 9999
64741: ST_TO_ADDR
// for i := 0 to 5 do
64742: LD_ADDR_VAR 0 6
64746: PUSH
64747: DOUBLE
64748: LD_INT 0
64750: DEC
64751: ST_TO_ADDR
64752: LD_INT 5
64754: PUSH
64755: FOR_TO
64756: IFFALSE 64899
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64758: LD_ADDR_VAR 0 7
64762: PUSH
64763: LD_VAR 0 1
64767: PPUSH
64768: LD_VAR 0 6
64772: PPUSH
64773: LD_VAR 0 11
64777: PPUSH
64778: CALL_OW 272
64782: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64783: LD_ADDR_VAR 0 8
64787: PUSH
64788: LD_VAR 0 2
64792: PPUSH
64793: LD_VAR 0 6
64797: PPUSH
64798: LD_VAR 0 11
64802: PPUSH
64803: CALL_OW 273
64807: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64808: LD_VAR 0 7
64812: PPUSH
64813: LD_VAR 0 8
64817: PPUSH
64818: CALL_OW 488
64822: NOT
64823: IFFALSE 64827
// continue ;
64825: GO 64755
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64827: LD_ADDR_VAR 0 9
64831: PUSH
64832: LD_VAR 0 12
64836: PUSH
64837: LD_INT 1
64839: ARRAY
64840: PPUSH
64841: LD_VAR 0 12
64845: PUSH
64846: LD_INT 2
64848: ARRAY
64849: PPUSH
64850: LD_VAR 0 7
64854: PPUSH
64855: LD_VAR 0 8
64859: PPUSH
64860: CALL_OW 298
64864: ST_TO_ADDR
// if tmp < distance then
64865: LD_VAR 0 9
64869: PUSH
64870: LD_VAR 0 10
64874: LESS
64875: IFFALSE 64897
// begin result := i ;
64877: LD_ADDR_VAR 0 5
64881: PUSH
64882: LD_VAR 0 6
64886: ST_TO_ADDR
// distance := tmp ;
64887: LD_ADDR_VAR 0 10
64891: PUSH
64892: LD_VAR 0 9
64896: ST_TO_ADDR
// end ; end ;
64897: GO 64755
64899: POP
64900: POP
// end ;
64901: LD_VAR 0 5
64905: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64906: LD_INT 0
64908: PPUSH
64909: PPUSH
// if not driver or not IsInUnit ( driver ) then
64910: LD_VAR 0 1
64914: NOT
64915: PUSH
64916: LD_VAR 0 1
64920: PPUSH
64921: CALL_OW 310
64925: NOT
64926: OR
64927: IFFALSE 64931
// exit ;
64929: GO 65021
// vehicle := IsInUnit ( driver ) ;
64931: LD_ADDR_VAR 0 3
64935: PUSH
64936: LD_VAR 0 1
64940: PPUSH
64941: CALL_OW 310
64945: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64946: LD_VAR 0 1
64950: PPUSH
64951: LD_STRING \
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: PUSH
64981: LD_STRING E
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_VAR 0 3
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PPUSH
65017: CALL_OW 446
// end ;
65021: LD_VAR 0 2
65025: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65026: LD_INT 0
65028: PPUSH
65029: PPUSH
// if not driver or not IsInUnit ( driver ) then
65030: LD_VAR 0 1
65034: NOT
65035: PUSH
65036: LD_VAR 0 1
65040: PPUSH
65041: CALL_OW 310
65045: NOT
65046: OR
65047: IFFALSE 65051
// exit ;
65049: GO 65141
// vehicle := IsInUnit ( driver ) ;
65051: LD_ADDR_VAR 0 3
65055: PUSH
65056: LD_VAR 0 1
65060: PPUSH
65061: CALL_OW 310
65065: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65066: LD_VAR 0 1
65070: PPUSH
65071: LD_STRING \
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: PUSH
65101: LD_STRING E
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: LD_VAR 0 3
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PPUSH
65137: CALL_OW 447
// end ;
65141: LD_VAR 0 2
65145: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65146: LD_INT 0
65148: PPUSH
65149: PPUSH
65150: PPUSH
// tmp := [ ] ;
65151: LD_ADDR_VAR 0 5
65155: PUSH
65156: EMPTY
65157: ST_TO_ADDR
// for i in units do
65158: LD_ADDR_VAR 0 4
65162: PUSH
65163: LD_VAR 0 1
65167: PUSH
65168: FOR_IN
65169: IFFALSE 65207
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65171: LD_ADDR_VAR 0 5
65175: PUSH
65176: LD_VAR 0 5
65180: PPUSH
65181: LD_VAR 0 5
65185: PUSH
65186: LD_INT 1
65188: PLUS
65189: PPUSH
65190: LD_VAR 0 4
65194: PPUSH
65195: CALL_OW 256
65199: PPUSH
65200: CALL_OW 2
65204: ST_TO_ADDR
65205: GO 65168
65207: POP
65208: POP
// if not tmp then
65209: LD_VAR 0 5
65213: NOT
65214: IFFALSE 65218
// exit ;
65216: GO 65266
// if asc then
65218: LD_VAR 0 2
65222: IFFALSE 65246
// result := SortListByListAsc ( units , tmp ) else
65224: LD_ADDR_VAR 0 3
65228: PUSH
65229: LD_VAR 0 1
65233: PPUSH
65234: LD_VAR 0 5
65238: PPUSH
65239: CALL_OW 76
65243: ST_TO_ADDR
65244: GO 65266
// result := SortListByListDesc ( units , tmp ) ;
65246: LD_ADDR_VAR 0 3
65250: PUSH
65251: LD_VAR 0 1
65255: PPUSH
65256: LD_VAR 0 5
65260: PPUSH
65261: CALL_OW 77
65265: ST_TO_ADDR
// end ;
65266: LD_VAR 0 3
65270: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65271: LD_INT 0
65273: PPUSH
65274: PPUSH
// task := GetTaskList ( mech ) ;
65275: LD_ADDR_VAR 0 4
65279: PUSH
65280: LD_VAR 0 1
65284: PPUSH
65285: CALL_OW 437
65289: ST_TO_ADDR
// if not task then
65290: LD_VAR 0 4
65294: NOT
65295: IFFALSE 65299
// exit ;
65297: GO 65341
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65299: LD_ADDR_VAR 0 3
65303: PUSH
65304: LD_VAR 0 4
65308: PUSH
65309: LD_INT 1
65311: ARRAY
65312: PUSH
65313: LD_INT 1
65315: ARRAY
65316: PUSH
65317: LD_STRING r
65319: EQUAL
65320: PUSH
65321: LD_VAR 0 4
65325: PUSH
65326: LD_INT 1
65328: ARRAY
65329: PUSH
65330: LD_INT 4
65332: ARRAY
65333: PUSH
65334: LD_VAR 0 2
65338: EQUAL
65339: AND
65340: ST_TO_ADDR
// end ;
65341: LD_VAR 0 3
65345: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65346: LD_INT 0
65348: PPUSH
// SetDir ( unit , d ) ;
65349: LD_VAR 0 1
65353: PPUSH
65354: LD_VAR 0 4
65358: PPUSH
65359: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65363: LD_VAR 0 1
65367: PPUSH
65368: LD_VAR 0 2
65372: PPUSH
65373: LD_VAR 0 3
65377: PPUSH
65378: LD_VAR 0 5
65382: PPUSH
65383: CALL_OW 48
// end ;
65387: LD_VAR 0 6
65391: RET
// export function ToNaturalNumber ( number ) ; begin
65392: LD_INT 0
65394: PPUSH
// result := number div 1 ;
65395: LD_ADDR_VAR 0 2
65399: PUSH
65400: LD_VAR 0 1
65404: PUSH
65405: LD_INT 1
65407: DIV
65408: ST_TO_ADDR
// if number < 0 then
65409: LD_VAR 0 1
65413: PUSH
65414: LD_INT 0
65416: LESS
65417: IFFALSE 65427
// result := 0 ;
65419: LD_ADDR_VAR 0 2
65423: PUSH
65424: LD_INT 0
65426: ST_TO_ADDR
// end ;
65427: LD_VAR 0 2
65431: RET
// export function SortByClass ( units , class ) ; var un ; begin
65432: LD_INT 0
65434: PPUSH
65435: PPUSH
// if not units or not class then
65436: LD_VAR 0 1
65440: NOT
65441: PUSH
65442: LD_VAR 0 2
65446: NOT
65447: OR
65448: IFFALSE 65452
// exit ;
65450: GO 65547
// result := [ ] ;
65452: LD_ADDR_VAR 0 3
65456: PUSH
65457: EMPTY
65458: ST_TO_ADDR
// for un in units do
65459: LD_ADDR_VAR 0 4
65463: PUSH
65464: LD_VAR 0 1
65468: PUSH
65469: FOR_IN
65470: IFFALSE 65545
// if GetClass ( un ) = class then
65472: LD_VAR 0 4
65476: PPUSH
65477: CALL_OW 257
65481: PUSH
65482: LD_VAR 0 2
65486: EQUAL
65487: IFFALSE 65514
// result := Insert ( result , 1 , un ) else
65489: LD_ADDR_VAR 0 3
65493: PUSH
65494: LD_VAR 0 3
65498: PPUSH
65499: LD_INT 1
65501: PPUSH
65502: LD_VAR 0 4
65506: PPUSH
65507: CALL_OW 2
65511: ST_TO_ADDR
65512: GO 65543
// result := Replace ( result , result + 1 , un ) ;
65514: LD_ADDR_VAR 0 3
65518: PUSH
65519: LD_VAR 0 3
65523: PPUSH
65524: LD_VAR 0 3
65528: PUSH
65529: LD_INT 1
65531: PLUS
65532: PPUSH
65533: LD_VAR 0 4
65537: PPUSH
65538: CALL_OW 1
65542: ST_TO_ADDR
65543: GO 65469
65545: POP
65546: POP
// end ;
65547: LD_VAR 0 3
65551: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65552: LD_INT 0
65554: PPUSH
65555: PPUSH
65556: PPUSH
65557: PPUSH
65558: PPUSH
65559: PPUSH
65560: PPUSH
// result := [ ] ;
65561: LD_ADDR_VAR 0 4
65565: PUSH
65566: EMPTY
65567: ST_TO_ADDR
// if x - r < 0 then
65568: LD_VAR 0 1
65572: PUSH
65573: LD_VAR 0 3
65577: MINUS
65578: PUSH
65579: LD_INT 0
65581: LESS
65582: IFFALSE 65594
// min_x := 0 else
65584: LD_ADDR_VAR 0 8
65588: PUSH
65589: LD_INT 0
65591: ST_TO_ADDR
65592: GO 65610
// min_x := x - r ;
65594: LD_ADDR_VAR 0 8
65598: PUSH
65599: LD_VAR 0 1
65603: PUSH
65604: LD_VAR 0 3
65608: MINUS
65609: ST_TO_ADDR
// if y - r < 0 then
65610: LD_VAR 0 2
65614: PUSH
65615: LD_VAR 0 3
65619: MINUS
65620: PUSH
65621: LD_INT 0
65623: LESS
65624: IFFALSE 65636
// min_y := 0 else
65626: LD_ADDR_VAR 0 7
65630: PUSH
65631: LD_INT 0
65633: ST_TO_ADDR
65634: GO 65652
// min_y := y - r ;
65636: LD_ADDR_VAR 0 7
65640: PUSH
65641: LD_VAR 0 2
65645: PUSH
65646: LD_VAR 0 3
65650: MINUS
65651: ST_TO_ADDR
// max_x := x + r ;
65652: LD_ADDR_VAR 0 9
65656: PUSH
65657: LD_VAR 0 1
65661: PUSH
65662: LD_VAR 0 3
65666: PLUS
65667: ST_TO_ADDR
// max_y := y + r ;
65668: LD_ADDR_VAR 0 10
65672: PUSH
65673: LD_VAR 0 2
65677: PUSH
65678: LD_VAR 0 3
65682: PLUS
65683: ST_TO_ADDR
// for _x = min_x to max_x do
65684: LD_ADDR_VAR 0 5
65688: PUSH
65689: DOUBLE
65690: LD_VAR 0 8
65694: DEC
65695: ST_TO_ADDR
65696: LD_VAR 0 9
65700: PUSH
65701: FOR_TO
65702: IFFALSE 65803
// for _y = min_y to max_y do
65704: LD_ADDR_VAR 0 6
65708: PUSH
65709: DOUBLE
65710: LD_VAR 0 7
65714: DEC
65715: ST_TO_ADDR
65716: LD_VAR 0 10
65720: PUSH
65721: FOR_TO
65722: IFFALSE 65799
// begin if not ValidHex ( _x , _y ) then
65724: LD_VAR 0 5
65728: PPUSH
65729: LD_VAR 0 6
65733: PPUSH
65734: CALL_OW 488
65738: NOT
65739: IFFALSE 65743
// continue ;
65741: GO 65721
// if GetResourceTypeXY ( _x , _y ) then
65743: LD_VAR 0 5
65747: PPUSH
65748: LD_VAR 0 6
65752: PPUSH
65753: CALL_OW 283
65757: IFFALSE 65797
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65759: LD_ADDR_VAR 0 4
65763: PUSH
65764: LD_VAR 0 4
65768: PPUSH
65769: LD_VAR 0 4
65773: PUSH
65774: LD_INT 1
65776: PLUS
65777: PPUSH
65778: LD_VAR 0 5
65782: PUSH
65783: LD_VAR 0 6
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PPUSH
65792: CALL_OW 1
65796: ST_TO_ADDR
// end ;
65797: GO 65721
65799: POP
65800: POP
65801: GO 65701
65803: POP
65804: POP
// end ;
65805: LD_VAR 0 4
65809: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65810: LD_INT 0
65812: PPUSH
65813: PPUSH
65814: PPUSH
65815: PPUSH
65816: PPUSH
65817: PPUSH
65818: PPUSH
65819: PPUSH
// if not units then
65820: LD_VAR 0 1
65824: NOT
65825: IFFALSE 65829
// exit ;
65827: GO 66353
// result := UnitFilter ( units , [ f_ok ] ) ;
65829: LD_ADDR_VAR 0 3
65833: PUSH
65834: LD_VAR 0 1
65838: PPUSH
65839: LD_INT 50
65841: PUSH
65842: EMPTY
65843: LIST
65844: PPUSH
65845: CALL_OW 72
65849: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65850: LD_ADDR_VAR 0 8
65854: PUSH
65855: LD_VAR 0 1
65859: PUSH
65860: LD_INT 1
65862: ARRAY
65863: PPUSH
65864: CALL_OW 255
65868: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65869: LD_ADDR_VAR 0 10
65873: PUSH
65874: LD_INT 29
65876: PUSH
65877: LD_INT 91
65879: PUSH
65880: LD_INT 49
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: ST_TO_ADDR
// if not result then
65888: LD_VAR 0 3
65892: NOT
65893: IFFALSE 65897
// exit ;
65895: GO 66353
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65897: LD_ADDR_VAR 0 5
65901: PUSH
65902: LD_INT 81
65904: PUSH
65905: LD_VAR 0 8
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PPUSH
65914: CALL_OW 69
65918: ST_TO_ADDR
// for i in result do
65919: LD_ADDR_VAR 0 4
65923: PUSH
65924: LD_VAR 0 3
65928: PUSH
65929: FOR_IN
65930: IFFALSE 66351
// begin tag := GetTag ( i ) + 1 ;
65932: LD_ADDR_VAR 0 9
65936: PUSH
65937: LD_VAR 0 4
65941: PPUSH
65942: CALL_OW 110
65946: PUSH
65947: LD_INT 1
65949: PLUS
65950: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65951: LD_ADDR_VAR 0 7
65955: PUSH
65956: LD_VAR 0 4
65960: PPUSH
65961: CALL_OW 250
65965: PPUSH
65966: LD_VAR 0 4
65970: PPUSH
65971: CALL_OW 251
65975: PPUSH
65976: LD_INT 6
65978: PPUSH
65979: CALL 65552 0 3
65983: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65984: LD_VAR 0 4
65988: PPUSH
65989: CALL_OW 247
65993: PUSH
65994: LD_INT 2
65996: EQUAL
65997: PUSH
65998: LD_VAR 0 7
66002: AND
66003: PUSH
66004: LD_VAR 0 4
66008: PPUSH
66009: CALL_OW 264
66013: PUSH
66014: LD_VAR 0 10
66018: IN
66019: NOT
66020: AND
66021: IFFALSE 66060
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66023: LD_VAR 0 4
66027: PPUSH
66028: LD_VAR 0 7
66032: PUSH
66033: LD_INT 1
66035: ARRAY
66036: PUSH
66037: LD_INT 1
66039: ARRAY
66040: PPUSH
66041: LD_VAR 0 7
66045: PUSH
66046: LD_INT 1
66048: ARRAY
66049: PUSH
66050: LD_INT 2
66052: ARRAY
66053: PPUSH
66054: CALL_OW 116
66058: GO 66349
// if path > tag then
66060: LD_VAR 0 2
66064: PUSH
66065: LD_VAR 0 9
66069: GREATER
66070: IFFALSE 66278
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66072: LD_ADDR_VAR 0 6
66076: PUSH
66077: LD_VAR 0 5
66081: PPUSH
66082: LD_INT 91
66084: PUSH
66085: LD_VAR 0 4
66089: PUSH
66090: LD_INT 8
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: LIST
66097: PPUSH
66098: CALL_OW 72
66102: ST_TO_ADDR
// if nearEnemy then
66103: LD_VAR 0 6
66107: IFFALSE 66176
// begin if GetWeapon ( i ) = ru_time_lapser then
66109: LD_VAR 0 4
66113: PPUSH
66114: CALL_OW 264
66118: PUSH
66119: LD_INT 49
66121: EQUAL
66122: IFFALSE 66150
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66124: LD_VAR 0 4
66128: PPUSH
66129: LD_VAR 0 6
66133: PPUSH
66134: LD_VAR 0 4
66138: PPUSH
66139: CALL_OW 74
66143: PPUSH
66144: CALL_OW 112
66148: GO 66174
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66150: LD_VAR 0 4
66154: PPUSH
66155: LD_VAR 0 6
66159: PPUSH
66160: LD_VAR 0 4
66164: PPUSH
66165: CALL_OW 74
66169: PPUSH
66170: CALL_OW 115
// end else
66174: GO 66276
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66176: LD_VAR 0 4
66180: PPUSH
66181: LD_VAR 0 2
66185: PUSH
66186: LD_VAR 0 9
66190: ARRAY
66191: PUSH
66192: LD_INT 1
66194: ARRAY
66195: PPUSH
66196: LD_VAR 0 2
66200: PUSH
66201: LD_VAR 0 9
66205: ARRAY
66206: PUSH
66207: LD_INT 2
66209: ARRAY
66210: PPUSH
66211: CALL_OW 297
66215: PUSH
66216: LD_INT 6
66218: GREATER
66219: IFFALSE 66262
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66221: LD_VAR 0 4
66225: PPUSH
66226: LD_VAR 0 2
66230: PUSH
66231: LD_VAR 0 9
66235: ARRAY
66236: PUSH
66237: LD_INT 1
66239: ARRAY
66240: PPUSH
66241: LD_VAR 0 2
66245: PUSH
66246: LD_VAR 0 9
66250: ARRAY
66251: PUSH
66252: LD_INT 2
66254: ARRAY
66255: PPUSH
66256: CALL_OW 114
66260: GO 66276
// SetTag ( i , tag ) ;
66262: LD_VAR 0 4
66266: PPUSH
66267: LD_VAR 0 9
66271: PPUSH
66272: CALL_OW 109
// end else
66276: GO 66349
// if enemy then
66278: LD_VAR 0 5
66282: IFFALSE 66349
// begin if GetWeapon ( i ) = ru_time_lapser then
66284: LD_VAR 0 4
66288: PPUSH
66289: CALL_OW 264
66293: PUSH
66294: LD_INT 49
66296: EQUAL
66297: IFFALSE 66325
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66299: LD_VAR 0 4
66303: PPUSH
66304: LD_VAR 0 5
66308: PPUSH
66309: LD_VAR 0 4
66313: PPUSH
66314: CALL_OW 74
66318: PPUSH
66319: CALL_OW 112
66323: GO 66349
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66325: LD_VAR 0 4
66329: PPUSH
66330: LD_VAR 0 5
66334: PPUSH
66335: LD_VAR 0 4
66339: PPUSH
66340: CALL_OW 74
66344: PPUSH
66345: CALL_OW 115
// end ; end ;
66349: GO 65929
66351: POP
66352: POP
// end ;
66353: LD_VAR 0 3
66357: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66358: LD_INT 0
66360: PPUSH
66361: PPUSH
66362: PPUSH
// if not unit or IsInUnit ( unit ) then
66363: LD_VAR 0 1
66367: NOT
66368: PUSH
66369: LD_VAR 0 1
66373: PPUSH
66374: CALL_OW 310
66378: OR
66379: IFFALSE 66383
// exit ;
66381: GO 66474
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66383: LD_ADDR_VAR 0 4
66387: PUSH
66388: LD_VAR 0 1
66392: PPUSH
66393: CALL_OW 250
66397: PPUSH
66398: LD_VAR 0 2
66402: PPUSH
66403: LD_INT 1
66405: PPUSH
66406: CALL_OW 272
66410: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66411: LD_ADDR_VAR 0 5
66415: PUSH
66416: LD_VAR 0 1
66420: PPUSH
66421: CALL_OW 251
66425: PPUSH
66426: LD_VAR 0 2
66430: PPUSH
66431: LD_INT 1
66433: PPUSH
66434: CALL_OW 273
66438: ST_TO_ADDR
// if ValidHex ( x , y ) then
66439: LD_VAR 0 4
66443: PPUSH
66444: LD_VAR 0 5
66448: PPUSH
66449: CALL_OW 488
66453: IFFALSE 66474
// ComTurnXY ( unit , x , y ) ;
66455: LD_VAR 0 1
66459: PPUSH
66460: LD_VAR 0 4
66464: PPUSH
66465: LD_VAR 0 5
66469: PPUSH
66470: CALL_OW 118
// end ;
66474: LD_VAR 0 3
66478: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66479: LD_INT 0
66481: PPUSH
66482: PPUSH
// result := false ;
66483: LD_ADDR_VAR 0 3
66487: PUSH
66488: LD_INT 0
66490: ST_TO_ADDR
// if not units then
66491: LD_VAR 0 2
66495: NOT
66496: IFFALSE 66500
// exit ;
66498: GO 66545
// for i in units do
66500: LD_ADDR_VAR 0 4
66504: PUSH
66505: LD_VAR 0 2
66509: PUSH
66510: FOR_IN
66511: IFFALSE 66543
// if See ( side , i ) then
66513: LD_VAR 0 1
66517: PPUSH
66518: LD_VAR 0 4
66522: PPUSH
66523: CALL_OW 292
66527: IFFALSE 66541
// begin result := true ;
66529: LD_ADDR_VAR 0 3
66533: PUSH
66534: LD_INT 1
66536: ST_TO_ADDR
// exit ;
66537: POP
66538: POP
66539: GO 66545
// end ;
66541: GO 66510
66543: POP
66544: POP
// end ;
66545: LD_VAR 0 3
66549: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66550: LD_INT 0
66552: PPUSH
66553: PPUSH
66554: PPUSH
66555: PPUSH
// if not unit or not points then
66556: LD_VAR 0 1
66560: NOT
66561: PUSH
66562: LD_VAR 0 2
66566: NOT
66567: OR
66568: IFFALSE 66572
// exit ;
66570: GO 66662
// dist := 99999 ;
66572: LD_ADDR_VAR 0 5
66576: PUSH
66577: LD_INT 99999
66579: ST_TO_ADDR
// for i in points do
66580: LD_ADDR_VAR 0 4
66584: PUSH
66585: LD_VAR 0 2
66589: PUSH
66590: FOR_IN
66591: IFFALSE 66660
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66593: LD_ADDR_VAR 0 6
66597: PUSH
66598: LD_VAR 0 1
66602: PPUSH
66603: LD_VAR 0 4
66607: PUSH
66608: LD_INT 1
66610: ARRAY
66611: PPUSH
66612: LD_VAR 0 4
66616: PUSH
66617: LD_INT 2
66619: ARRAY
66620: PPUSH
66621: CALL_OW 297
66625: ST_TO_ADDR
// if tmpDist < dist then
66626: LD_VAR 0 6
66630: PUSH
66631: LD_VAR 0 5
66635: LESS
66636: IFFALSE 66658
// begin result := i ;
66638: LD_ADDR_VAR 0 3
66642: PUSH
66643: LD_VAR 0 4
66647: ST_TO_ADDR
// dist := tmpDist ;
66648: LD_ADDR_VAR 0 5
66652: PUSH
66653: LD_VAR 0 6
66657: ST_TO_ADDR
// end ; end ;
66658: GO 66590
66660: POP
66661: POP
// end ;
66662: LD_VAR 0 3
66666: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66667: LD_INT 0
66669: PPUSH
// uc_side := side ;
66670: LD_ADDR_OWVAR 20
66674: PUSH
66675: LD_VAR 0 1
66679: ST_TO_ADDR
// uc_nation := 3 ;
66680: LD_ADDR_OWVAR 21
66684: PUSH
66685: LD_INT 3
66687: ST_TO_ADDR
// vc_chassis := 25 ;
66688: LD_ADDR_OWVAR 37
66692: PUSH
66693: LD_INT 25
66695: ST_TO_ADDR
// vc_engine := engine_siberite ;
66696: LD_ADDR_OWVAR 39
66700: PUSH
66701: LD_INT 3
66703: ST_TO_ADDR
// vc_control := control_computer ;
66704: LD_ADDR_OWVAR 38
66708: PUSH
66709: LD_INT 3
66711: ST_TO_ADDR
// vc_weapon := 59 ;
66712: LD_ADDR_OWVAR 40
66716: PUSH
66717: LD_INT 59
66719: ST_TO_ADDR
// result := CreateVehicle ;
66720: LD_ADDR_VAR 0 5
66724: PUSH
66725: CALL_OW 45
66729: ST_TO_ADDR
// SetDir ( result , d ) ;
66730: LD_VAR 0 5
66734: PPUSH
66735: LD_VAR 0 4
66739: PPUSH
66740: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66744: LD_VAR 0 5
66748: PPUSH
66749: LD_VAR 0 2
66753: PPUSH
66754: LD_VAR 0 3
66758: PPUSH
66759: LD_INT 0
66761: PPUSH
66762: CALL_OW 48
// end ;
66766: LD_VAR 0 5
66770: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66771: LD_INT 0
66773: PPUSH
66774: PPUSH
66775: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66776: LD_ADDR_VAR 0 2
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66799: LD_VAR 0 1
66803: NOT
66804: PUSH
66805: LD_VAR 0 1
66809: PPUSH
66810: CALL_OW 264
66814: PUSH
66815: LD_INT 12
66817: PUSH
66818: LD_INT 51
66820: PUSH
66821: LD_INT 32
66823: PUSH
66824: LD_INT 89
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: IN
66833: NOT
66834: OR
66835: IFFALSE 66839
// exit ;
66837: GO 66937
// for i := 1 to 3 do
66839: LD_ADDR_VAR 0 3
66843: PUSH
66844: DOUBLE
66845: LD_INT 1
66847: DEC
66848: ST_TO_ADDR
66849: LD_INT 3
66851: PUSH
66852: FOR_TO
66853: IFFALSE 66935
// begin tmp := GetCargo ( cargo , i ) ;
66855: LD_ADDR_VAR 0 4
66859: PUSH
66860: LD_VAR 0 1
66864: PPUSH
66865: LD_VAR 0 3
66869: PPUSH
66870: CALL_OW 289
66874: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66875: LD_ADDR_VAR 0 2
66879: PUSH
66880: LD_VAR 0 2
66884: PPUSH
66885: LD_VAR 0 3
66889: PPUSH
66890: LD_VAR 0 4
66894: PPUSH
66895: CALL_OW 1
66899: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66900: LD_ADDR_VAR 0 2
66904: PUSH
66905: LD_VAR 0 2
66909: PPUSH
66910: LD_INT 4
66912: PPUSH
66913: LD_VAR 0 2
66917: PUSH
66918: LD_INT 4
66920: ARRAY
66921: PUSH
66922: LD_VAR 0 4
66926: PLUS
66927: PPUSH
66928: CALL_OW 1
66932: ST_TO_ADDR
// end ;
66933: GO 66852
66935: POP
66936: POP
// end ;
66937: LD_VAR 0 2
66941: RET
// export function Length ( array ) ; begin
66942: LD_INT 0
66944: PPUSH
// result := array + 0 ;
66945: LD_ADDR_VAR 0 2
66949: PUSH
66950: LD_VAR 0 1
66954: PUSH
66955: LD_INT 0
66957: PLUS
66958: ST_TO_ADDR
// end ;
66959: LD_VAR 0 2
66963: RET
// export function PrepareArray ( array ) ; begin
66964: LD_INT 0
66966: PPUSH
// result := array diff 0 ;
66967: LD_ADDR_VAR 0 2
66971: PUSH
66972: LD_VAR 0 1
66976: PUSH
66977: LD_INT 0
66979: DIFF
66980: ST_TO_ADDR
// if not result [ 1 ] then
66981: LD_VAR 0 2
66985: PUSH
66986: LD_INT 1
66988: ARRAY
66989: NOT
66990: IFFALSE 67010
// result := Delete ( result , 1 ) ;
66992: LD_ADDR_VAR 0 2
66996: PUSH
66997: LD_VAR 0 2
67001: PPUSH
67002: LD_INT 1
67004: PPUSH
67005: CALL_OW 3
67009: ST_TO_ADDR
// end ;
67010: LD_VAR 0 2
67014: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67015: LD_INT 0
67017: PPUSH
67018: PPUSH
67019: PPUSH
67020: PPUSH
// sibRocketRange := 25 ;
67021: LD_ADDR_VAR 0 6
67025: PUSH
67026: LD_INT 25
67028: ST_TO_ADDR
// result := false ;
67029: LD_ADDR_VAR 0 4
67033: PUSH
67034: LD_INT 0
67036: ST_TO_ADDR
// for i := 0 to 5 do
67037: LD_ADDR_VAR 0 5
67041: PUSH
67042: DOUBLE
67043: LD_INT 0
67045: DEC
67046: ST_TO_ADDR
67047: LD_INT 5
67049: PUSH
67050: FOR_TO
67051: IFFALSE 67118
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67053: LD_VAR 0 1
67057: PPUSH
67058: LD_VAR 0 5
67062: PPUSH
67063: LD_VAR 0 6
67067: PPUSH
67068: CALL_OW 272
67072: PPUSH
67073: LD_VAR 0 2
67077: PPUSH
67078: LD_VAR 0 5
67082: PPUSH
67083: LD_VAR 0 6
67087: PPUSH
67088: CALL_OW 273
67092: PPUSH
67093: LD_VAR 0 3
67097: PPUSH
67098: CALL_OW 309
67102: IFFALSE 67116
// begin result := true ;
67104: LD_ADDR_VAR 0 4
67108: PUSH
67109: LD_INT 1
67111: ST_TO_ADDR
// exit ;
67112: POP
67113: POP
67114: GO 67120
// end ;
67116: GO 67050
67118: POP
67119: POP
// end ;
67120: LD_VAR 0 4
67124: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67125: LD_INT 0
67127: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67128: LD_VAR 0 1
67132: PPUSH
67133: LD_VAR 0 2
67137: PPUSH
67138: LD_INT 0
67140: PPUSH
67141: LD_INT 0
67143: PPUSH
67144: LD_INT 1
67146: PPUSH
67147: LD_INT 0
67149: PPUSH
67150: CALL_OW 587
// end ;
67154: LD_VAR 0 3
67158: RET
