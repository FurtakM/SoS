// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 20
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 21
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 19
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 909 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 22
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2080 0 0
// PrepareHeroes ;
  82: CALL 1089 0 0
// PrepareRandoms ;
  86: CALL 3443 0 0
// Action ;
  90: CALL 5250 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 806
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 20
 347: PUSH
 348: LD_EXP 20
 352: PPUSH
 353: LD_EXP 20
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 20
 452: PUSH
 453: LD_EXP 20
 457: PPUSH
 458: LD_EXP 20
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 20
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 24
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 16
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 581: LD_STRING enableBioCharacter(BIO_HUGH)
 583: PPUSH
 584: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_STRING Lisa
 595: PPUSH
 596: LD_EXP 23
 600: PPUSH
 601: CALL 4239 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 605: LD_EXP 8
 609: PPUSH
 610: LD_STRING Brown
 612: PPUSH
 613: LD_EXP 23
 617: PPUSH
 618: CALL 4239 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 622: LD_EXP 4
 626: PPUSH
 627: LD_STRING Donaldson
 629: PPUSH
 630: LD_EXP 23
 634: PPUSH
 635: CALL 4239 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_STRING Bobby
 646: PPUSH
 647: LD_EXP 23
 651: PPUSH
 652: CALL 4239 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_STRING Cyrus
 663: PPUSH
 664: LD_EXP 23
 668: PPUSH
 669: CALL 4239 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 673: LD_EXP 7
 677: PPUSH
 678: LD_STRING Denis
 680: PPUSH
 681: LD_EXP 23
 685: PPUSH
 686: CALL 4239 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 690: LD_EXP 9
 694: PPUSH
 695: LD_STRING Gladstone
 697: PPUSH
 698: LD_EXP 23
 702: PPUSH
 703: CALL 4239 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 707: LD_EXP 10
 711: PPUSH
 712: LD_STRING Houten
 714: PPUSH
 715: LD_EXP 23
 719: PPUSH
 720: CALL 4239 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_STRING Cornel
 731: PPUSH
 732: LD_EXP 23
 736: PPUSH
 737: CALL 4239 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 741: LD_EXP 12
 745: PPUSH
 746: LD_STRING Gary
 748: PPUSH
 749: LD_EXP 23
 753: PPUSH
 754: CALL 4239 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 758: LD_EXP 13
 762: PPUSH
 763: LD_STRING Frank
 765: PPUSH
 766: LD_EXP 23
 770: PPUSH
 771: CALL 4239 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 775: LD_EXP 14
 779: PPUSH
 780: LD_STRING Kikuchi
 782: PPUSH
 783: LD_EXP 23
 787: PPUSH
 788: CALL 4239 0 3
// SaveCargos ;
 792: CALL 809 0 0
// ChangeMap ( 13 , %_cont ) ;
 796: LD_INT 13
 798: PPUSH
 799: LD_STRING %_cont
 801: PPUSH
 802: CALL_OW 340
// end ;
 806: PPOPN 2
 808: END
// export function SaveCargos ; var i ; begin
 809: LD_INT 0
 811: PPUSH
 812: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: LD_INT 2
 820: PPUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 33
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 34
 843: PUSH
 844: LD_INT 12
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL_OW 70
 860: PUSH
 861: FOR_IN
 862: IFFALSE 890
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 864: LD_ADDR_EXP 21
 868: PUSH
 869: LD_EXP 21
 873: PUSH
 874: LD_VAR 0 2
 878: PPUSH
 879: CALL 67668 0 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: ADD
 887: ST_TO_ADDR
 888: GO 861
 890: POP
 891: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 892: LD_EXP 21
 896: PPUSH
 897: LD_STRING 13_ResourcesInCargo13_1
 899: PPUSH
 900: CALL_OW 39
// end ;
 904: LD_VAR 0 1
 908: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_STRING 10_EpsilonEnv
 924: PPUSH
 925: EMPTY
 926: PPUSH
 927: CALL_OW 30
 931: ST_TO_ADDR
// if not tmp then
 932: LD_VAR 0 2
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1084
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 941: LD_ADDR_VAR 0 3
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 353
 953: ST_TO_ADDR
// if not list then
 954: LD_VAR 0 3
 958: NOT
 959: IFFALSE 963
// exit ;
 961: GO 1084
// for i in list do
 963: LD_ADDR_VAR 0 4
 967: PUSH
 968: LD_VAR 0 3
 972: PUSH
 973: FOR_IN
 974: IFFALSE 1082
// begin exist := false ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: LD_INT 0
 983: ST_TO_ADDR
// for j in tmp do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: LD_VAR 0 2
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1049
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 997: LD_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PUSH
1006: LD_VAR 0 5
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: EQUAL
1015: PUSH
1016: LD_VAR 0 4
1020: PUSH
1021: LD_INT 2
1023: ARRAY
1024: PUSH
1025: LD_VAR 0 5
1029: PUSH
1030: LD_INT 2
1032: ARRAY
1033: EQUAL
1034: AND
1035: IFFALSE 1047
// begin exist := true ;
1037: LD_ADDR_VAR 0 6
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// break ;
1045: GO 1049
// end ;
1047: GO 994
1049: POP
1050: POP
// if not exist then
1051: LD_VAR 0 6
1055: NOT
1056: IFFALSE 1080
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 4
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 347
// end ;
1080: GO 973
1082: POP
1083: POP
// end ; end_of_file
1084: LD_VAR 0 1
1088: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: LD_INT 22
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 23
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 30
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// if tmp then
1161: LD_VAR 0 4
1165: IFFALSE 1287
// begin x := GetX ( tmp [ 1 ] ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1186: LD_ADDR_VAR 0 6
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 251
1204: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1205: LD_VAR 0 4
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_STRING epsilon
1216: PPUSH
1217: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1221: LD_ADDR_VAR 0 7
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 274
1239: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1240: LD_VAR 0 7
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 3000
1250: PPUSH
1251: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1255: LD_VAR 0 7
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 500
1265: PPUSH
1266: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1270: LD_VAR 0 7
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 200
1280: PPUSH
1281: CALL_OW 277
// end else
1285: GO 1303
// begin x := 104 ;
1287: LD_ADDR_VAR 0 5
1291: PUSH
1292: LD_INT 104
1294: ST_TO_ADDR
// y := 32 ;
1295: LD_ADDR_VAR 0 6
1299: PUSH
1300: LD_INT 32
1302: ST_TO_ADDR
// end ; uc_side := 1 ;
1303: LD_ADDR_OWVAR 20
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1311: LD_ADDR_EXP 1
1315: PUSH
1316: LD_STRING JMM
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 3713 0 2
1326: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1327: LD_ADDR_EXP 3
1331: PUSH
1332: LD_STRING Lisa
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 3713 0 2
1342: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1343: LD_ADDR_EXP 4
1347: PUSH
1348: LD_STRING Donaldson
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 3713 0 2
1358: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1359: LD_ADDR_EXP 5
1363: PUSH
1364: LD_STRING Bobby
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 3713 0 2
1374: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1375: LD_ADDR_EXP 6
1379: PUSH
1380: LD_STRING Cyrus
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL 3713 0 2
1390: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1391: LD_ADDR_EXP 7
1395: PUSH
1396: LD_STRING Denis
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: CALL 3713 0 2
1406: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1407: LD_ADDR_EXP 8
1411: PUSH
1412: LD_STRING Brown
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 3713 0 2
1422: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: LD_STRING Gladstone
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL 3713 0 2
1438: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_STRING Houten
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL 3713 0 2
1454: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1455: LD_ADDR_EXP 11
1459: PUSH
1460: LD_STRING Cornell
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL 3713 0 2
1470: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_STRING Gary
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL 3713 0 2
1486: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1487: LD_ADDR_EXP 13
1491: PUSH
1492: LD_STRING Frank
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL 3713 0 2
1502: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1503: LD_ADDR_EXP 14
1507: PUSH
1508: LD_STRING Kikuchi
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL 3713 0 2
1518: ST_TO_ADDR
// DeltaDoctor := PrepareUnit2 ( DeltaDoctor , true ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_STRING DeltaDoctor
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: CALL 3713 0 2
1534: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1535: LD_ADDR_EXP 16
1539: PUSH
1540: LD_STRING Stevens
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL 3713 0 2
1550: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1551: LD_ADDR_EXP 2
1555: PUSH
1556: LD_STRING Powell
1558: PPUSH
1559: LD_INT 0
1561: PPUSH
1562: CALL 3713 0 2
1566: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1567: LD_EXP 1
1571: PPUSH
1572: LD_VAR 0 5
1576: PPUSH
1577: LD_VAR 0 6
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL 3886 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1592: LD_EXP 16
1596: PPUSH
1597: LD_VAR 0 5
1601: PPUSH
1602: LD_VAR 0 6
1606: PPUSH
1607: LD_INT 4
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL 3886 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1617: LD_EXP 3
1621: PPUSH
1622: LD_VAR 0 5
1626: PPUSH
1627: LD_VAR 0 6
1631: PPUSH
1632: LD_INT 35
1634: PPUSH
1635: LD_INT 0
1637: PPUSH
1638: CALL 3886 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1642: LD_EXP 4
1646: PPUSH
1647: LD_VAR 0 5
1651: PPUSH
1652: LD_VAR 0 6
1656: PPUSH
1657: LD_INT 35
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL 3886 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1667: LD_EXP 5
1671: PPUSH
1672: LD_VAR 0 5
1676: PPUSH
1677: LD_VAR 0 6
1681: PPUSH
1682: LD_INT 35
1684: PPUSH
1685: LD_INT 0
1687: PPUSH
1688: CALL 3886 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1692: LD_EXP 6
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: LD_VAR 0 6
1706: PPUSH
1707: LD_INT 35
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL 3886 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1717: LD_EXP 7
1721: PPUSH
1722: LD_VAR 0 5
1726: PPUSH
1727: LD_VAR 0 6
1731: PPUSH
1732: LD_INT 35
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL 3886 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1742: LD_EXP 8
1746: PPUSH
1747: LD_VAR 0 5
1751: PPUSH
1752: LD_VAR 0 6
1756: PPUSH
1757: LD_INT 35
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL 3886 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1767: LD_EXP 9
1771: PPUSH
1772: LD_VAR 0 5
1776: PPUSH
1777: LD_VAR 0 6
1781: PPUSH
1782: LD_INT 35
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL 3886 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1792: LD_EXP 10
1796: PPUSH
1797: LD_VAR 0 5
1801: PPUSH
1802: LD_VAR 0 6
1806: PPUSH
1807: LD_INT 35
1809: PPUSH
1810: LD_INT 0
1812: PPUSH
1813: CALL 3886 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1817: LD_EXP 11
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: LD_VAR 0 6
1831: PPUSH
1832: LD_INT 35
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL 3886 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1842: LD_EXP 12
1846: PPUSH
1847: LD_VAR 0 5
1851: PPUSH
1852: LD_VAR 0 6
1856: PPUSH
1857: LD_INT 35
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL 3886 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1867: LD_EXP 13
1871: PPUSH
1872: LD_VAR 0 5
1876: PPUSH
1877: LD_VAR 0 6
1881: PPUSH
1882: LD_INT 35
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 3886 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1892: LD_EXP 14
1896: PPUSH
1897: LD_VAR 0 5
1901: PPUSH
1902: LD_VAR 0 6
1906: PPUSH
1907: LD_INT 35
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL 3886 0 5
// SetClass ( JMM , 1 ) ;
1917: LD_EXP 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1929: LD_ADDR_EXP 17
1933: PUSH
1934: LD_STRING 12_other_survivors
1936: PPUSH
1937: CALL_OW 31
1941: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1942: LD_ADDR_EXP 18
1946: PUSH
1947: LD_STRING 12_others
1949: PPUSH
1950: CALL_OW 31
1954: ST_TO_ADDR
// for i in others11 do
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: LD_EXP 18
1964: PUSH
1965: FOR_IN
1966: IFFALSE 2013
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_VAR 0 4
1977: PUSH
1978: LD_INT 1
1980: ARRAY
1981: PPUSH
1982: CALL_OW 250
1986: PPUSH
1987: LD_VAR 0 4
1991: PUSH
1992: LD_INT 1
1994: ARRAY
1995: PPUSH
1996: CALL_OW 251
2000: PPUSH
2001: LD_INT 15
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL 3886 0 5
2011: GO 1965
2013: POP
2014: POP
// for i in others12 do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 17
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2073
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2028: LD_VAR 0 2
2032: PPUSH
2033: LD_VAR 0 4
2037: PUSH
2038: LD_INT 1
2040: ARRAY
2041: PPUSH
2042: CALL_OW 250
2046: PPUSH
2047: LD_VAR 0 4
2051: PUSH
2052: LD_INT 1
2054: ARRAY
2055: PPUSH
2056: CALL_OW 251
2060: PPUSH
2061: LD_INT 15
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL 3886 0 5
2071: GO 2025
2073: POP
2074: POP
// end ;
2075: LD_VAR 0 1
2079: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2080: LD_INT 0
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2089: LD_INT 113
2091: PPUSH
2092: LD_INT 50
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2102: LD_INT 99
2104: PPUSH
2105: LD_INT 19
2107: PPUSH
2108: LD_INT 1
2110: PPUSH
2111: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2115: LD_INT 43
2117: PPUSH
2118: LD_INT 79
2120: PPUSH
2121: LD_INT 1
2123: PPUSH
2124: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2128: LD_INT 43
2130: PPUSH
2131: LD_INT 68
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2141: LD_INT 99
2143: PPUSH
2144: LD_INT 114
2146: PPUSH
2147: LD_INT 1
2149: PPUSH
2150: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2154: LD_INT 103
2156: PPUSH
2157: LD_INT 114
2159: PPUSH
2160: LD_INT 1
2162: PPUSH
2163: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2167: LD_INT 152
2169: PPUSH
2170: LD_INT 85
2172: PPUSH
2173: LD_INT 1
2175: PPUSH
2176: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2180: LD_INT 156
2182: PPUSH
2183: LD_INT 92
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: LD_STRING 10_EpsilonBase
2200: PPUSH
2201: EMPTY
2202: PPUSH
2203: CALL_OW 30
2207: ST_TO_ADDR
// if not blist then
2208: LD_VAR 0 2
2212: NOT
2213: IFFALSE 2217
// exit ;
2215: GO 3438
// for i in blist do
2217: LD_ADDR_VAR 0 3
2221: PUSH
2222: LD_VAR 0 2
2226: PUSH
2227: FOR_IN
2228: IFFALSE 2270
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2230: LD_VAR 0 3
2234: PUSH
2235: LD_INT 1
2237: ARRAY
2238: PUSH
2239: LD_INT 0
2241: EQUAL
2242: PUSH
2243: LD_VAR 0 3
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PUSH
2252: LD_INT 1
2254: EQUAL
2255: OR
2256: IFFALSE 2268
// begin baseCorrect := 1 ;
2258: LD_ADDR_VAR 0 6
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// break ;
2266: GO 2270
// end ;
2268: GO 2227
2270: POP
2271: POP
// if baseCorrect = 0 then
2272: LD_VAR 0 6
2276: PUSH
2277: LD_INT 0
2279: EQUAL
2280: IFFALSE 2987
// begin uc_side := 1 ;
2282: LD_ADDR_OWVAR 20
2286: PUSH
2287: LD_INT 1
2289: ST_TO_ADDR
// uc_nation := 1 ;
2290: LD_ADDR_OWVAR 21
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// bc_level := 10 ;
2298: LD_ADDR_OWVAR 43
2302: PUSH
2303: LD_INT 10
2305: ST_TO_ADDR
// bc_type := b_warehouse ;
2306: LD_ADDR_OWVAR 42
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2314: LD_INT 99
2316: PPUSH
2317: LD_INT 24
2319: PPUSH
2320: LD_INT 2
2322: PPUSH
2323: CALL_OW 47
// bc_type := b_bunker ;
2327: LD_ADDR_OWVAR 42
2331: PUSH
2332: LD_INT 32
2334: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2335: LD_ADDR_VAR 0 7
2339: PUSH
2340: LD_INT 124
2342: PPUSH
2343: LD_INT 42
2345: PPUSH
2346: LD_INT 4
2348: PPUSH
2349: CALL_OW 47
2353: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2354: LD_VAR 0 7
2358: PPUSH
2359: LD_INT 4
2361: PUSH
2362: LD_INT 5
2364: PUSH
2365: LD_INT 6
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: PUSH
2373: LD_INT 1
2375: PPUSH
2376: LD_INT 3
2378: PPUSH
2379: CALL_OW 12
2383: ARRAY
2384: PPUSH
2385: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2389: LD_ADDR_VAR 0 7
2393: PUSH
2394: LD_INT 111
2396: PPUSH
2397: LD_INT 16
2399: PPUSH
2400: LD_INT 4
2402: PPUSH
2403: CALL_OW 47
2407: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2408: LD_VAR 0 7
2412: PPUSH
2413: LD_INT 4
2415: PUSH
2416: LD_INT 5
2418: PUSH
2419: LD_INT 6
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 1
2429: PPUSH
2430: LD_INT 3
2432: PPUSH
2433: CALL_OW 12
2437: ARRAY
2438: PPUSH
2439: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2443: LD_ADDR_VAR 0 7
2447: PUSH
2448: LD_INT 113
2450: PPUSH
2451: LD_INT 21
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 47
2461: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2462: LD_VAR 0 7
2466: PPUSH
2467: LD_INT 4
2469: PUSH
2470: LD_INT 5
2472: PUSH
2473: LD_INT 6
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 1
2483: PPUSH
2484: LD_INT 3
2486: PPUSH
2487: CALL_OW 12
2491: ARRAY
2492: PPUSH
2493: CALL_OW 431
// bc_type := 33 ;
2497: LD_ADDR_OWVAR 42
2501: PUSH
2502: LD_INT 33
2504: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2505: LD_ADDR_VAR 0 7
2509: PUSH
2510: LD_INT 95
2512: PPUSH
2513: LD_INT 41
2515: PPUSH
2516: LD_INT 1
2518: PPUSH
2519: CALL_OW 47
2523: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2524: LD_VAR 0 7
2528: PPUSH
2529: LD_INT 4
2531: PUSH
2532: LD_INT 5
2534: PUSH
2535: LD_INT 6
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_INT 3
2548: PPUSH
2549: CALL_OW 12
2553: ARRAY
2554: PPUSH
2555: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2559: LD_ADDR_VAR 0 7
2563: PUSH
2564: LD_INT 97
2566: PPUSH
2567: LD_INT 48
2569: PPUSH
2570: LD_INT 1
2572: PPUSH
2573: CALL_OW 47
2577: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2578: LD_VAR 0 7
2582: PPUSH
2583: LD_INT 4
2585: PUSH
2586: LD_INT 5
2588: PUSH
2589: LD_INT 6
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_INT 3
2602: PPUSH
2603: CALL_OW 12
2607: ARRAY
2608: PPUSH
2609: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2613: LD_ADDR_VAR 0 7
2617: PUSH
2618: LD_INT 86
2620: PPUSH
2621: LD_INT 19
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 47
2631: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2632: LD_VAR 0 7
2636: PPUSH
2637: LD_INT 4
2639: PUSH
2640: LD_INT 5
2642: PUSH
2643: LD_INT 6
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 1
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: CALL_OW 12
2661: ARRAY
2662: PPUSH
2663: CALL_OW 431
// bc_type := 30 ;
2667: LD_ADDR_OWVAR 42
2671: PUSH
2672: LD_INT 30
2674: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2675: LD_INT 104
2677: PPUSH
2678: LD_INT 24
2680: PPUSH
2681: LD_INT 1
2683: PPUSH
2684: CALL_OW 47
// bc_type := 29 ;
2688: LD_ADDR_OWVAR 42
2692: PUSH
2693: LD_INT 29
2695: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2696: LD_INT 113
2698: PPUSH
2699: LD_INT 50
2701: PPUSH
2702: LD_INT 3
2704: PPUSH
2705: CALL_OW 47
// bc_type := 27 ;
2709: LD_ADDR_OWVAR 42
2713: PUSH
2714: LD_INT 27
2716: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2717: LD_INT 98
2719: PPUSH
2720: LD_INT 26
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2730: LD_INT 95
2732: PPUSH
2733: LD_INT 23
2735: PPUSH
2736: LD_INT 3
2738: PPUSH
2739: CALL_OW 47
// bc_type := 28 ;
2743: LD_ADDR_OWVAR 42
2747: PUSH
2748: LD_INT 28
2750: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2751: LD_INT 107
2753: PPUSH
2754: LD_INT 32
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: CALL_OW 47
// bc_type := 3 ;
2764: LD_ADDR_OWVAR 42
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2772: LD_INT 106
2774: PPUSH
2775: LD_INT 42
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 47
// bc_type := 16 ;
2785: LD_ADDR_OWVAR 42
2789: PUSH
2790: LD_INT 16
2792: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2793: LD_INT 109
2795: PPUSH
2796: LD_INT 45
2798: PPUSH
2799: LD_INT 5
2801: PPUSH
2802: CALL_OW 47
// bc_type := 17 ;
2806: LD_ADDR_OWVAR 42
2810: PUSH
2811: LD_INT 17
2813: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2814: LD_INT 106
2816: PPUSH
2817: LD_INT 46
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: CALL_OW 47
// bc_type := 19 ;
2827: LD_ADDR_OWVAR 42
2831: PUSH
2832: LD_INT 19
2834: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2835: LD_INT 103
2837: PPUSH
2838: LD_INT 42
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 47
// bc_type := 21 ;
2848: LD_ADDR_OWVAR 42
2852: PUSH
2853: LD_INT 21
2855: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2856: LD_INT 110
2858: PPUSH
2859: LD_INT 42
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: CALL_OW 47
// bc_type := 5 ;
2869: LD_ADDR_OWVAR 42
2873: PUSH
2874: LD_INT 5
2876: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2877: LD_INT 114
2879: PPUSH
2880: LD_INT 55
2882: PPUSH
2883: LD_INT 5
2885: PPUSH
2886: CALL_OW 47
// bc_type := 36 ;
2890: LD_ADDR_OWVAR 42
2894: PUSH
2895: LD_INT 36
2897: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2898: LD_INT 96
2900: PPUSH
2901: LD_INT 28
2903: PPUSH
2904: LD_INT 2
2906: PPUSH
2907: CALL_OW 47
// bc_type := b_lab_full ;
2911: LD_ADDR_OWVAR 42
2915: PUSH
2916: LD_INT 8
2918: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2919: LD_ADDR_OWVAR 44
2923: PUSH
2924: LD_INT 15
2926: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2927: LD_ADDR_OWVAR 45
2931: PUSH
2932: LD_INT 11
2934: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2935: LD_INT 116
2937: PPUSH
2938: LD_INT 38
2940: PPUSH
2941: LD_INT 4
2943: PPUSH
2944: CALL_OW 47
// bc_type := b_lab_full ;
2948: LD_ADDR_OWVAR 42
2952: PUSH
2953: LD_INT 8
2955: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2956: LD_ADDR_OWVAR 44
2960: PUSH
2961: LD_INT 10
2963: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2964: LD_ADDR_OWVAR 45
2968: PUSH
2969: LD_INT 12
2971: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2972: LD_INT 112
2974: PPUSH
2975: LD_INT 29
2977: PPUSH
2978: LD_INT 4
2980: PPUSH
2981: CALL_OW 47
// end else
2985: GO 3235
// begin uc_side := 1 ;
2987: LD_ADDR_OWVAR 20
2991: PUSH
2992: LD_INT 1
2994: ST_TO_ADDR
// for i in blist do
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: LD_VAR 0 2
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3233
// begin InitBc ;
3008: CALL_OW 21
// uc_nation := i [ 6 ] ;
3012: LD_ADDR_OWVAR 21
3016: PUSH
3017: LD_VAR 0 3
3021: PUSH
3022: LD_INT 6
3024: ARRAY
3025: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3026: LD_ADDR_OWVAR 42
3030: PUSH
3031: LD_VAR 0 3
3035: PUSH
3036: LD_INT 1
3038: ARRAY
3039: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3040: LD_ADDR_OWVAR 43
3044: PUSH
3045: LD_VAR 0 3
3049: PUSH
3050: LD_INT 5
3052: ARRAY
3053: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3054: LD_VAR 0 3
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PUSH
3063: LD_INT 7
3065: PUSH
3066: LD_INT 8
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: IN
3073: IFFALSE 3103
// begin bc_kind1 := i [ 7 ] ;
3075: LD_ADDR_OWVAR 44
3079: PUSH
3080: LD_VAR 0 3
3084: PUSH
3085: LD_INT 7
3087: ARRAY
3088: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3089: LD_ADDR_OWVAR 45
3093: PUSH
3094: LD_VAR 0 3
3098: PUSH
3099: LD_INT 8
3101: ARRAY
3102: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3103: LD_ADDR_VAR 0 4
3107: PUSH
3108: LD_VAR 0 3
3112: PUSH
3113: LD_INT 2
3115: ARRAY
3116: PPUSH
3117: LD_VAR 0 3
3121: PUSH
3122: LD_INT 3
3124: ARRAY
3125: PPUSH
3126: LD_VAR 0 3
3130: PUSH
3131: LD_INT 4
3133: ARRAY
3134: PPUSH
3135: CALL_OW 47
3139: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3140: LD_VAR 0 4
3144: PPUSH
3145: CALL_OW 266
3149: PUSH
3150: LD_INT 32
3152: PUSH
3153: LD_INT 33
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: IN
3160: IFFALSE 3231
// if i [ 7 ] then
3162: LD_VAR 0 3
3166: PUSH
3167: LD_INT 7
3169: ARRAY
3170: IFFALSE 3192
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3172: LD_VAR 0 4
3176: PPUSH
3177: LD_VAR 0 3
3181: PUSH
3182: LD_INT 7
3184: ARRAY
3185: PPUSH
3186: CALL_OW 431
3190: GO 3231
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3192: LD_VAR 0 4
3196: PPUSH
3197: LD_INT 11
3199: PUSH
3200: LD_INT 7
3202: PUSH
3203: LD_INT 4
3205: PUSH
3206: LD_INT 5
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 1
3217: PPUSH
3218: LD_INT 4
3220: PPUSH
3221: CALL_OW 12
3225: ARRAY
3226: PPUSH
3227: CALL_OW 431
// end ;
3231: GO 3005
3233: POP
3234: POP
// end ; uc_side := 1 ;
3235: LD_ADDR_OWVAR 20
3239: PUSH
3240: LD_INT 1
3242: ST_TO_ADDR
// uc_nation := 1 ;
3243: LD_ADDR_OWVAR 21
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// for i := 1 to 8 do
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: DOUBLE
3257: LD_INT 1
3259: DEC
3260: ST_TO_ADDR
3261: LD_INT 8
3263: PUSH
3264: FOR_TO
3265: IFFALSE 3436
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3267: LD_ADDR_OWVAR 37
3271: PUSH
3272: LD_INT 5
3274: PUSH
3275: LD_INT 5
3277: PUSH
3278: LD_INT 3
3280: PUSH
3281: LD_INT 4
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 4
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: ST_TO_ADDR
// vc_engine := engine_siberite ;
3302: LD_ADDR_OWVAR 39
3306: PUSH
3307: LD_INT 3
3309: ST_TO_ADDR
// vc_control := control_manual ;
3310: LD_ADDR_OWVAR 38
3314: PUSH
3315: LD_INT 1
3317: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3318: LD_OWVAR 37
3322: PUSH
3323: LD_INT 4
3325: EQUAL
3326: IFFALSE 3338
// vc_weapon := us_heavy_gun else
3328: LD_ADDR_OWVAR 40
3332: PUSH
3333: LD_INT 6
3335: ST_TO_ADDR
3336: GO 3383
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3338: LD_ADDR_OWVAR 40
3342: PUSH
3343: LD_INT 7
3345: PUSH
3346: LD_INT 9
3348: PUSH
3349: LD_INT 12
3351: PUSH
3352: LD_INT 13
3354: PUSH
3355: LD_INT 9
3357: PUSH
3358: LD_INT 9
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 6
3376: MOD
3377: PUSH
3378: LD_INT 1
3380: PLUS
3381: ARRAY
3382: ST_TO_ADDR
// un := CreateVehicle ;
3383: LD_ADDR_VAR 0 5
3387: PUSH
3388: CALL_OW 45
3392: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3393: LD_VAR 0 5
3397: PPUSH
3398: LD_INT 0
3400: PPUSH
3401: LD_INT 5
3403: PPUSH
3404: CALL_OW 12
3408: PPUSH
3409: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3413: LD_VAR 0 5
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 31
3423: PPUSH
3424: LD_INT 8
3426: PPUSH
3427: LD_INT 0
3429: PPUSH
3430: CALL_OW 50
// end ;
3434: GO 3264
3436: POP
3437: POP
// end ;
3438: LD_VAR 0 1
3442: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3443: LD_INT 0
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3449: LD_INT 22
3451: PUSH
3452: LD_INT 1
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PUSH
3459: LD_INT 21
3461: PUSH
3462: LD_INT 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PPUSH
3473: CALL_OW 69
3477: PUSH
3478: LD_INT 6
3480: LESS
3481: IFFALSE 3708
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3483: LD_ADDR_VAR 0 4
3487: PUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 1
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: LD_INT 30
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 30
3513: PUSH
3514: LD_INT 1
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PPUSH
3530: CALL_OW 69
3534: ST_TO_ADDR
// uc_side := 1 ;
3535: LD_ADDR_OWVAR 20
3539: PUSH
3540: LD_INT 1
3542: ST_TO_ADDR
// uc_nation := 1 ;
3543: LD_ADDR_OWVAR 21
3547: PUSH
3548: LD_INT 1
3550: ST_TO_ADDR
// for i := 1 to 6 do
3551: LD_ADDR_VAR 0 2
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3706
// begin hc_gallery :=  ;
3567: LD_ADDR_OWVAR 33
3571: PUSH
3572: LD_STRING 
3574: ST_TO_ADDR
// hc_name :=  ;
3575: LD_ADDR_OWVAR 26
3579: PUSH
3580: LD_STRING 
3582: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3583: LD_INT 0
3585: PPUSH
3586: LD_INT 1
3588: PUSH
3589: LD_INT 2
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: LD_INT 4
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 4
3609: PPUSH
3610: CALL_OW 12
3614: ARRAY
3615: PPUSH
3616: LD_INT 5
3618: PPUSH
3619: LD_INT 8
3621: PPUSH
3622: CALL_OW 12
3626: PPUSH
3627: CALL_OW 380
// un := CreateHuman ;
3631: LD_ADDR_VAR 0 3
3635: PUSH
3636: CALL_OW 44
3640: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3641: LD_ADDR_EXP 19
3645: PUSH
3646: LD_EXP 19
3650: PPUSH
3651: LD_VAR 0 3
3655: PPUSH
3656: CALL 64103 0 2
3660: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3661: LD_VAR 0 3
3665: PPUSH
3666: LD_VAR 0 4
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_VAR 0 4
3684: PUSH
3685: LD_INT 1
3687: ARRAY
3688: PPUSH
3689: CALL_OW 251
3693: PPUSH
3694: LD_INT 15
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL 3886 0 5
// end ;
3704: GO 3564
3706: POP
3707: POP
// end ; end ; end_of_file
3708: LD_VAR 0 1
3712: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
// if existMode then
3717: LD_VAR 0 2
3721: IFFALSE 3856
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3723: LD_EXP 22
3727: PUSH
3728: LD_VAR 0 1
3732: STR
3733: PPUSH
3734: CALL_OW 28
3738: IFFALSE 3763
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3740: LD_ADDR_VAR 0 4
3744: PUSH
3745: LD_EXP 22
3749: PUSH
3750: LD_VAR 0 1
3754: STR
3755: PPUSH
3756: CALL_OW 34
3760: ST_TO_ADDR
3761: GO 3854
// begin if TestCharacters ( 11_ & ident ) then
3763: LD_STRING 11_
3765: PUSH
3766: LD_VAR 0 1
3770: STR
3771: PPUSH
3772: CALL_OW 28
3776: IFFALSE 3799
// unit := CreateCharacter ( 11_ & ident ) else
3778: LD_ADDR_VAR 0 4
3782: PUSH
3783: LD_STRING 11_
3785: PUSH
3786: LD_VAR 0 1
3790: STR
3791: PPUSH
3792: CALL_OW 34
3796: ST_TO_ADDR
3797: GO 3854
// if TestCharacters ( 10c_ & ident ) then
3799: LD_STRING 10c_
3801: PUSH
3802: LD_VAR 0 1
3806: STR
3807: PPUSH
3808: CALL_OW 28
3812: IFFALSE 3835
// unit := CreateCharacter ( 10c_ & ident ) else
3814: LD_ADDR_VAR 0 4
3818: PUSH
3819: LD_STRING 10c_
3821: PUSH
3822: LD_VAR 0 1
3826: STR
3827: PPUSH
3828: CALL_OW 34
3832: ST_TO_ADDR
3833: GO 3854
// unit := CreateCharacter ( 10_ & ident ) ;
3835: LD_ADDR_VAR 0 4
3839: PUSH
3840: LD_STRING 10_
3842: PUSH
3843: LD_VAR 0 1
3847: STR
3848: PPUSH
3849: CALL_OW 34
3853: ST_TO_ADDR
// end ; end else
3854: GO 3871
// unit := NewCharacter ( ident ) ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_VAR 0 1
3865: PPUSH
3866: CALL_OW 25
3870: ST_TO_ADDR
// result := unit ;
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_VAR 0 4
3880: ST_TO_ADDR
// end ;
3881: LD_VAR 0 3
3885: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3886: LD_INT 0
3888: PPUSH
3889: PPUSH
3890: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3891: LD_ADDR_VAR 0 8
3895: PUSH
3896: LD_INT 22
3898: PUSH
3899: LD_VAR 0 1
3903: PPUSH
3904: CALL_OW 255
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 21
3915: PUSH
3916: LD_INT 3
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: LD_INT 3
3925: PUSH
3926: LD_INT 30
3928: PUSH
3929: LD_INT 3
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 69
3949: ST_TO_ADDR
// if not tmp then
3950: LD_VAR 0 8
3954: NOT
3955: IFFALSE 3988
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3957: LD_VAR 0 1
3961: PPUSH
3962: LD_VAR 0 2
3966: PPUSH
3967: LD_VAR 0 3
3971: PPUSH
3972: LD_VAR 0 4
3976: PPUSH
3977: LD_VAR 0 5
3981: PPUSH
3982: CALL_OW 50
// exit ;
3986: GO 4234
// end ; for i in tmp do
3988: LD_ADDR_VAR 0 7
3992: PUSH
3993: LD_VAR 0 8
3997: PUSH
3998: FOR_IN
3999: IFFALSE 4203
// if IsNotFull ( i ) then
4001: LD_VAR 0 7
4005: PPUSH
4006: CALL 28596 0 1
4010: IFFALSE 4201
// begin PlaceHumanInUnit ( unit , i ) ;
4012: LD_VAR 0 1
4016: PPUSH
4017: LD_VAR 0 7
4021: PPUSH
4022: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4026: LD_VAR 0 7
4030: PPUSH
4031: CALL_OW 266
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: LD_INT 4
4041: PUSH
4042: LD_INT 31
4044: PUSH
4045: LD_INT 32
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: IN
4054: IFFALSE 4087
// begin SetClass ( unit , class_soldier ) ;
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4068: LD_VAR 0 1
4072: PPUSH
4073: LD_VAR 0 7
4077: PPUSH
4078: CALL 59350 0 1
4082: PPUSH
4083: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4087: LD_VAR 0 7
4091: PPUSH
4092: CALL_OW 266
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 36
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: IN
4111: IFFALSE 4125
// SetClass ( unit , class_mechanic ) ;
4113: LD_VAR 0 1
4117: PPUSH
4118: LD_INT 3
4120: PPUSH
4121: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4125: LD_VAR 0 7
4129: PPUSH
4130: CALL_OW 266
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: IN
4145: IFFALSE 4159
// SetClass ( unit , class_engineer ) ;
4147: LD_VAR 0 1
4151: PPUSH
4152: LD_INT 2
4154: PPUSH
4155: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4159: LD_VAR 0 7
4163: PPUSH
4164: CALL_OW 266
4168: PUSH
4169: LD_INT 6
4171: PUSH
4172: LD_INT 7
4174: PUSH
4175: LD_INT 8
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: IN
4183: IFFALSE 4197
// SetClass ( unit , class_scientistic ) ;
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_INT 4
4192: PPUSH
4193: CALL_OW 336
// exit ;
4197: POP
4198: POP
4199: GO 4234
// end ;
4201: GO 3998
4203: POP
4204: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4205: LD_VAR 0 1
4209: PPUSH
4210: LD_VAR 0 2
4214: PPUSH
4215: LD_VAR 0 3
4219: PPUSH
4220: LD_VAR 0 4
4224: PPUSH
4225: LD_VAR 0 5
4229: PPUSH
4230: CALL_OW 50
// end ;
4234: LD_VAR 0 6
4238: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4239: LD_INT 0
4241: PPUSH
// if unit in selectedTab then
4242: LD_VAR 0 1
4246: PUSH
4247: LD_VAR 0 3
4251: IN
4252: IFFALSE 4274
// SaveCharacters ( unit , 13c_ & unitString ) else
4254: LD_VAR 0 1
4258: PPUSH
4259: LD_STRING 13c_
4261: PUSH
4262: LD_VAR 0 2
4266: STR
4267: PPUSH
4268: CALL_OW 38
4272: GO 4292
// SaveCharacters ( unit , 13s_ & unitString ) ;
4274: LD_VAR 0 1
4278: PPUSH
4279: LD_STRING 13s_
4281: PUSH
4282: LD_VAR 0 2
4286: STR
4287: PPUSH
4288: CALL_OW 38
// end ;
4292: LD_VAR 0 4
4296: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4297: LD_INT 0
4299: PPUSH
4300: PPUSH
4301: PPUSH
4302: PPUSH
// selected := [ ] ;
4303: LD_ADDR_EXP 23
4307: PUSH
4308: EMPTY
4309: ST_TO_ADDR
// othersSelect := [ ] ;
4310: LD_ADDR_EXP 24
4314: PUSH
4315: EMPTY
4316: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_EXP 3
4326: PUSH
4327: LD_EXP 4
4331: PUSH
4332: LD_EXP 5
4336: PUSH
4337: LD_EXP 6
4341: PUSH
4342: LD_EXP 8
4346: PUSH
4347: LD_EXP 9
4351: PUSH
4352: LD_EXP 10
4356: PUSH
4357: LD_EXP 11
4361: PUSH
4362: LD_EXP 12
4366: PUSH
4367: LD_EXP 13
4371: PUSH
4372: LD_EXP 14
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4390: LD_ADDR_VAR 0 3
4394: PUSH
4395: LD_VAR 0 3
4399: PUSH
4400: LD_EXP 18
4404: ADD
4405: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_VAR 0 3
4415: PUSH
4416: LD_EXP 17
4420: ADD
4421: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4422: LD_ADDR_VAR 0 3
4426: PUSH
4427: LD_VAR 0 3
4431: PUSH
4432: LD_EXP 19
4436: ADD
4437: ST_TO_ADDR
// for i in tmp do
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: LD_VAR 0 3
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4488
// if GetClass ( i ) = 8 then
4451: LD_VAR 0 2
4455: PPUSH
4456: CALL_OW 257
4460: PUSH
4461: LD_INT 8
4463: EQUAL
4464: IFFALSE 4486
// SetClass ( i , rand ( 1 , 4 ) ) ;
4466: LD_VAR 0 2
4470: PPUSH
4471: LD_INT 1
4473: PPUSH
4474: LD_INT 4
4476: PPUSH
4477: CALL_OW 12
4481: PPUSH
4482: CALL_OW 336
4486: GO 4448
4488: POP
4489: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4490: LD_ADDR_EXP 23
4494: PUSH
4495: LD_STRING 1
4497: PPUSH
4498: LD_INT 6
4500: PPUSH
4501: LD_INT 6
4503: PPUSH
4504: LD_INT -5
4506: PUSH
4507: LD_EXP 1
4511: PUSH
4512: LD_EXP 16
4516: PUSH
4517: LD_INT -2
4519: PUSH
4520: LD_INT -3
4522: PUSH
4523: LD_INT -5
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PUSH
4534: LD_VAR 0 3
4538: ADD
4539: PUSH
4540: LD_INT -6
4542: PUSH
4543: LD_INT -4
4545: PUSH
4546: LD_EXP 2
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: ADD
4556: PPUSH
4557: LD_INT 1
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 2
4569: PUSH
4570: LD_INT 1
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 0
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 4
4589: PUSH
4590: LD_INT 2
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 5
4599: PUSH
4600: LD_INT 0
4602: PUSH
4603: LD_INT 2
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: PPUSH
4618: CALL_OW 42
4622: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4623: LD_ADDR_EXP 24
4627: PUSH
4628: LD_EXP 23
4632: PUSH
4633: LD_EXP 3
4637: PUSH
4638: LD_EXP 4
4642: PUSH
4643: LD_EXP 5
4647: PUSH
4648: LD_EXP 6
4652: PUSH
4653: LD_EXP 7
4657: PUSH
4658: LD_EXP 8
4662: PUSH
4663: LD_EXP 9
4667: PUSH
4668: LD_EXP 10
4672: PUSH
4673: LD_EXP 11
4677: PUSH
4678: LD_EXP 12
4682: PUSH
4683: LD_EXP 13
4687: PUSH
4688: LD_EXP 14
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: DIFF
4707: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 3
4717: PUSH
4718: LD_EXP 23
4722: DIFF
4723: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4724: LD_ADDR_VAR 0 4
4728: PUSH
4729: LD_VAR 0 4
4733: PUSH
4734: LD_EXP 3
4738: PUSH
4739: LD_EXP 4
4743: PUSH
4744: LD_EXP 5
4748: PUSH
4749: LD_EXP 6
4753: PUSH
4754: LD_EXP 7
4758: PUSH
4759: LD_EXP 8
4763: PUSH
4764: LD_EXP 9
4768: PUSH
4769: LD_EXP 10
4773: PUSH
4774: LD_EXP 11
4778: PUSH
4779: LD_EXP 12
4783: PUSH
4784: LD_EXP 13
4788: PUSH
4789: LD_EXP 14
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: DIFF
4808: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4809: LD_VAR 0 4
4813: PPUSH
4814: LD_STRING 13s_others
4816: PPUSH
4817: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4821: LD_EXP 24
4825: PPUSH
4826: LD_STRING 13c_others
4828: PPUSH
4829: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4833: LD_EXP 1
4837: PPUSH
4838: LD_STRING 13c_JMM
4840: PPUSH
4841: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4845: LD_EXP 16
4849: PPUSH
4850: LD_STRING 13c_Stevens
4852: PPUSH
4853: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4857: LD_EXP 3
4861: PPUSH
4862: LD_STRING Lisa
4864: PPUSH
4865: LD_EXP 23
4869: PPUSH
4870: CALL 4239 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4874: LD_EXP 8
4878: PPUSH
4879: LD_STRING Brown
4881: PPUSH
4882: LD_EXP 23
4886: PPUSH
4887: CALL 4239 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4891: LD_EXP 4
4895: PPUSH
4896: LD_STRING Donaldson
4898: PPUSH
4899: LD_EXP 23
4903: PPUSH
4904: CALL 4239 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4908: LD_EXP 5
4912: PPUSH
4913: LD_STRING Bobby
4915: PPUSH
4916: LD_EXP 23
4920: PPUSH
4921: CALL 4239 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4925: LD_EXP 6
4929: PPUSH
4930: LD_STRING Cyrus
4932: PPUSH
4933: LD_EXP 23
4937: PPUSH
4938: CALL 4239 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4942: LD_EXP 7
4946: PPUSH
4947: LD_STRING Denis
4949: PPUSH
4950: LD_EXP 23
4954: PPUSH
4955: CALL 4239 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4959: LD_EXP 9
4963: PPUSH
4964: LD_STRING Gladstone
4966: PPUSH
4967: LD_EXP 23
4971: PPUSH
4972: CALL 4239 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4976: LD_EXP 10
4980: PPUSH
4981: LD_STRING Houten
4983: PPUSH
4984: LD_EXP 23
4988: PPUSH
4989: CALL 4239 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4993: LD_EXP 11
4997: PPUSH
4998: LD_STRING Cornel
5000: PPUSH
5001: LD_EXP 23
5005: PPUSH
5006: CALL 4239 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
5010: LD_EXP 12
5014: PPUSH
5015: LD_STRING Gary
5017: PPUSH
5018: LD_EXP 23
5022: PPUSH
5023: CALL 4239 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5027: LD_EXP 13
5031: PPUSH
5032: LD_STRING Frank
5034: PPUSH
5035: LD_EXP 23
5039: PPUSH
5040: CALL 4239 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5044: LD_EXP 14
5048: PPUSH
5049: LD_STRING Kikuchi
5051: PPUSH
5052: LD_EXP 23
5056: PPUSH
5057: CALL 4239 0 3
// SaveCharactersAfterSelect ( DeltaDoctor , DeltaDoctor , selected ) ;
5061: LD_EXP 15
5065: PPUSH
5066: LD_STRING DeltaDoctor
5068: PPUSH
5069: LD_EXP 23
5073: PPUSH
5074: CALL 4239 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5078: LD_INT 22
5080: PUSH
5081: LD_INT 1
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 21
5090: PUSH
5091: LD_INT 1
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 69
5106: PPUSH
5107: LD_INT 4
5109: PPUSH
5110: CALL_OW 235
// SetSide ( selected , 1 ) ;
5114: LD_EXP 23
5118: PPUSH
5119: LD_INT 1
5121: PPUSH
5122: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5126: LD_EXP 1
5130: PUSH
5131: LD_EXP 16
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PPUSH
5140: LD_INT 1
5142: PPUSH
5143: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5147: LD_ADDR_VAR 0 2
5151: PUSH
5152: LD_INT 22
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 21
5164: PUSH
5165: LD_INT 1
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PPUSH
5176: CALL_OW 69
5180: PUSH
5181: FOR_IN
5182: IFFALSE 5195
// ComExit ( i ) ;
5184: LD_VAR 0 2
5188: PPUSH
5189: CALL 64501 0 1
5193: GO 5181
5195: POP
5196: POP
// end ; end_of_file
5197: LD_VAR 0 1
5201: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5202: LD_VAR 0 1
5206: PPUSH
5207: CALL 21296 0 1
// if un = JMM then
5211: LD_VAR 0 1
5215: PUSH
5216: LD_EXP 1
5220: EQUAL
5221: IFFALSE 5230
// YouLost ( JMM ) ;
5223: LD_STRING JMM
5225: PPUSH
5226: CALL_OW 104
// end ;
5230: PPOPN 1
5232: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5233: LD_VAR 0 1
5237: PPUSH
5238: LD_VAR 0 2
5242: PPUSH
5243: CALL 21416 0 2
// end ; end_of_file
5247: PPOPN 2
5249: END
// export function Action ; begin
5250: LD_INT 0
5252: PPUSH
// InGameOn ;
5253: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5257: LD_INT 22
5259: PUSH
5260: LD_INT 1
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 2
5269: PUSH
5270: LD_INT 30
5272: PUSH
5273: LD_INT 0
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 30
5282: PUSH
5283: LD_INT 1
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: LIST
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: CALL_OW 69
5303: PPUSH
5304: CALL_OW 87
// wait ( 0 0$1 ) ;
5308: LD_INT 35
5310: PPUSH
5311: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5315: LD_EXP 1
5319: PPUSH
5320: LD_STRING D1-JMM-1
5322: PPUSH
5323: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5327: LD_EXP 2
5331: PPUSH
5332: LD_STRING D1-Pow-1
5334: PPUSH
5335: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5339: LD_EXP 2
5343: PPUSH
5344: LD_STRING D1-Pow-1a
5346: PPUSH
5347: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5351: LD_EXP 2
5355: PPUSH
5356: LD_STRING D1-Pow-1b
5358: PPUSH
5359: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5363: LD_EXP 2
5367: PPUSH
5368: LD_STRING D1-Pow-1c
5370: PPUSH
5371: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5375: LD_EXP 1
5379: PPUSH
5380: LD_STRING D1-JMM-2
5382: PPUSH
5383: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5387: LD_EXP 2
5391: PPUSH
5392: LD_STRING D1-Pow-2
5394: PPUSH
5395: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5399: LD_EXP 1
5403: PPUSH
5404: LD_STRING D1-JMM-3
5406: PPUSH
5407: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5411: LD_EXP 2
5415: PPUSH
5416: LD_STRING D1-Pow-3
5418: PPUSH
5419: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5423: LD_EXP 1
5427: PPUSH
5428: LD_STRING D1-JMM-4
5430: PPUSH
5431: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5435: LD_EXP 2
5439: PPUSH
5440: LD_STRING D1-Pow-4
5442: PPUSH
5443: CALL_OW 94
// SelectAndSaveCharacters ;
5447: CALL 4297 0 0
// InGameOff ;
5451: CALL_OW 9
// Query ( Q1 ) ;
5455: LD_STRING Q1
5457: PPUSH
5458: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5462: LD_INT 2
5464: PPUSH
5465: LD_INT 1
5467: PPUSH
5468: CALL_OW 424
// end ; end_of_file
5472: LD_VAR 0 1
5476: RET
// export globalGameSaveCounter ; every 0 0$1 do
5477: GO 5479
5479: DISABLE
// begin enable ;
5480: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5481: LD_STRING updateTimer(
5483: PUSH
5484: LD_OWVAR 1
5488: STR
5489: PUSH
5490: LD_STRING );
5492: STR
5493: PPUSH
5494: CALL_OW 559
// end ;
5498: END
// every 0 0$1 do
5499: GO 5501
5501: DISABLE
// begin globalGameSaveCounter := 0 ;
5502: LD_ADDR_EXP 25
5506: PUSH
5507: LD_INT 0
5509: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5510: LD_STRING setGameSaveCounter(0)
5512: PPUSH
5513: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5517: LD_STRING initStreamRollete();
5519: PPUSH
5520: CALL_OW 559
// InitStreamMode ;
5524: CALL 6867 0 0
// DefineStreamItems ( false ) ;
5528: LD_INT 0
5530: PPUSH
5531: CALL 7331 0 1
// end ;
5535: END
// export function SOS_MapStart ( ) ; begin
5536: LD_INT 0
5538: PPUSH
// if streamModeActive then
5539: LD_EXP 26
5543: IFFALSE 5552
// DefineStreamItems ( true ) ;
5545: LD_INT 1
5547: PPUSH
5548: CALL 7331 0 1
// UpdateLuaVariables ( ) ;
5552: CALL 5569 0 0
// UpdateFactoryWaypoints ( ) ;
5556: CALL 20200 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5560: CALL 20457 0 0
// end ;
5564: LD_VAR 0 1
5568: RET
// function UpdateLuaVariables ( ) ; begin
5569: LD_INT 0
5571: PPUSH
// if globalGameSaveCounter then
5572: LD_EXP 25
5576: IFFALSE 5610
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5578: LD_ADDR_EXP 25
5582: PUSH
5583: LD_EXP 25
5587: PPUSH
5588: CALL 65464 0 1
5592: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5593: LD_STRING setGameSaveCounter(
5595: PUSH
5596: LD_EXP 25
5600: STR
5601: PUSH
5602: LD_STRING )
5604: STR
5605: PPUSH
5606: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5610: LD_STRING setGameDifficulty(
5612: PUSH
5613: LD_OWVAR 67
5617: STR
5618: PUSH
5619: LD_STRING )
5621: STR
5622: PPUSH
5623: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5627: LD_STRING displayDifficulty(
5629: PUSH
5630: LD_OWVAR 67
5634: STR
5635: PUSH
5636: LD_STRING )
5638: STR
5639: PPUSH
5640: CALL_OW 559
// end ;
5644: LD_VAR 0 1
5648: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5649: LD_INT 0
5651: PPUSH
// if p2 = stream_mode then
5652: LD_VAR 0 2
5656: PUSH
5657: LD_INT 100
5659: EQUAL
5660: IFFALSE 6663
// begin if not StreamModeActive then
5662: LD_EXP 26
5666: NOT
5667: IFFALSE 5677
// StreamModeActive := true ;
5669: LD_ADDR_EXP 26
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// if p3 = 0 then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 0
5684: EQUAL
5685: IFFALSE 5691
// InitStreamMode ;
5687: CALL 6867 0 0
// if p3 = 1 then
5691: LD_VAR 0 3
5695: PUSH
5696: LD_INT 1
5698: EQUAL
5699: IFFALSE 5709
// sRocket := true ;
5701: LD_ADDR_EXP 31
5705: PUSH
5706: LD_INT 1
5708: ST_TO_ADDR
// if p3 = 2 then
5709: LD_VAR 0 3
5713: PUSH
5714: LD_INT 2
5716: EQUAL
5717: IFFALSE 5727
// sSpeed := true ;
5719: LD_ADDR_EXP 30
5723: PUSH
5724: LD_INT 1
5726: ST_TO_ADDR
// if p3 = 3 then
5727: LD_VAR 0 3
5731: PUSH
5732: LD_INT 3
5734: EQUAL
5735: IFFALSE 5745
// sEngine := true ;
5737: LD_ADDR_EXP 32
5741: PUSH
5742: LD_INT 1
5744: ST_TO_ADDR
// if p3 = 4 then
5745: LD_VAR 0 3
5749: PUSH
5750: LD_INT 4
5752: EQUAL
5753: IFFALSE 5763
// sSpec := true ;
5755: LD_ADDR_EXP 29
5759: PUSH
5760: LD_INT 1
5762: ST_TO_ADDR
// if p3 = 5 then
5763: LD_VAR 0 3
5767: PUSH
5768: LD_INT 5
5770: EQUAL
5771: IFFALSE 5781
// sLevel := true ;
5773: LD_ADDR_EXP 33
5777: PUSH
5778: LD_INT 1
5780: ST_TO_ADDR
// if p3 = 6 then
5781: LD_VAR 0 3
5785: PUSH
5786: LD_INT 6
5788: EQUAL
5789: IFFALSE 5799
// sArmoury := true ;
5791: LD_ADDR_EXP 34
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// if p3 = 7 then
5799: LD_VAR 0 3
5803: PUSH
5804: LD_INT 7
5806: EQUAL
5807: IFFALSE 5817
// sRadar := true ;
5809: LD_ADDR_EXP 35
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// if p3 = 8 then
5817: LD_VAR 0 3
5821: PUSH
5822: LD_INT 8
5824: EQUAL
5825: IFFALSE 5835
// sBunker := true ;
5827: LD_ADDR_EXP 36
5831: PUSH
5832: LD_INT 1
5834: ST_TO_ADDR
// if p3 = 9 then
5835: LD_VAR 0 3
5839: PUSH
5840: LD_INT 9
5842: EQUAL
5843: IFFALSE 5853
// sHack := true ;
5845: LD_ADDR_EXP 37
5849: PUSH
5850: LD_INT 1
5852: ST_TO_ADDR
// if p3 = 10 then
5853: LD_VAR 0 3
5857: PUSH
5858: LD_INT 10
5860: EQUAL
5861: IFFALSE 5871
// sFire := true ;
5863: LD_ADDR_EXP 38
5867: PUSH
5868: LD_INT 1
5870: ST_TO_ADDR
// if p3 = 11 then
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 11
5878: EQUAL
5879: IFFALSE 5889
// sRefresh := true ;
5881: LD_ADDR_EXP 39
5885: PUSH
5886: LD_INT 1
5888: ST_TO_ADDR
// if p3 = 12 then
5889: LD_VAR 0 3
5893: PUSH
5894: LD_INT 12
5896: EQUAL
5897: IFFALSE 5907
// sExp := true ;
5899: LD_ADDR_EXP 40
5903: PUSH
5904: LD_INT 1
5906: ST_TO_ADDR
// if p3 = 13 then
5907: LD_VAR 0 3
5911: PUSH
5912: LD_INT 13
5914: EQUAL
5915: IFFALSE 5925
// sDepot := true ;
5917: LD_ADDR_EXP 41
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// if p3 = 14 then
5925: LD_VAR 0 3
5929: PUSH
5930: LD_INT 14
5932: EQUAL
5933: IFFALSE 5943
// sFlag := true ;
5935: LD_ADDR_EXP 42
5939: PUSH
5940: LD_INT 1
5942: ST_TO_ADDR
// if p3 = 15 then
5943: LD_VAR 0 3
5947: PUSH
5948: LD_INT 15
5950: EQUAL
5951: IFFALSE 5961
// sKamikadze := true ;
5953: LD_ADDR_EXP 50
5957: PUSH
5958: LD_INT 1
5960: ST_TO_ADDR
// if p3 = 16 then
5961: LD_VAR 0 3
5965: PUSH
5966: LD_INT 16
5968: EQUAL
5969: IFFALSE 5979
// sTroll := true ;
5971: LD_ADDR_EXP 51
5975: PUSH
5976: LD_INT 1
5978: ST_TO_ADDR
// if p3 = 17 then
5979: LD_VAR 0 3
5983: PUSH
5984: LD_INT 17
5986: EQUAL
5987: IFFALSE 5997
// sSlow := true ;
5989: LD_ADDR_EXP 52
5993: PUSH
5994: LD_INT 1
5996: ST_TO_ADDR
// if p3 = 18 then
5997: LD_VAR 0 3
6001: PUSH
6002: LD_INT 18
6004: EQUAL
6005: IFFALSE 6015
// sLack := true ;
6007: LD_ADDR_EXP 53
6011: PUSH
6012: LD_INT 1
6014: ST_TO_ADDR
// if p3 = 19 then
6015: LD_VAR 0 3
6019: PUSH
6020: LD_INT 19
6022: EQUAL
6023: IFFALSE 6033
// sTank := true ;
6025: LD_ADDR_EXP 55
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// if p3 = 20 then
6033: LD_VAR 0 3
6037: PUSH
6038: LD_INT 20
6040: EQUAL
6041: IFFALSE 6051
// sRemote := true ;
6043: LD_ADDR_EXP 56
6047: PUSH
6048: LD_INT 1
6050: ST_TO_ADDR
// if p3 = 21 then
6051: LD_VAR 0 3
6055: PUSH
6056: LD_INT 21
6058: EQUAL
6059: IFFALSE 6069
// sPowell := true ;
6061: LD_ADDR_EXP 57
6065: PUSH
6066: LD_INT 1
6068: ST_TO_ADDR
// if p3 = 22 then
6069: LD_VAR 0 3
6073: PUSH
6074: LD_INT 22
6076: EQUAL
6077: IFFALSE 6087
// sTeleport := true ;
6079: LD_ADDR_EXP 60
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// if p3 = 23 then
6087: LD_VAR 0 3
6091: PUSH
6092: LD_INT 23
6094: EQUAL
6095: IFFALSE 6105
// sOilTower := true ;
6097: LD_ADDR_EXP 62
6101: PUSH
6102: LD_INT 1
6104: ST_TO_ADDR
// if p3 = 24 then
6105: LD_VAR 0 3
6109: PUSH
6110: LD_INT 24
6112: EQUAL
6113: IFFALSE 6123
// sShovel := true ;
6115: LD_ADDR_EXP 63
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// if p3 = 25 then
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 25
6130: EQUAL
6131: IFFALSE 6141
// sSheik := true ;
6133: LD_ADDR_EXP 64
6137: PUSH
6138: LD_INT 1
6140: ST_TO_ADDR
// if p3 = 26 then
6141: LD_VAR 0 3
6145: PUSH
6146: LD_INT 26
6148: EQUAL
6149: IFFALSE 6159
// sEarthquake := true ;
6151: LD_ADDR_EXP 66
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// if p3 = 27 then
6159: LD_VAR 0 3
6163: PUSH
6164: LD_INT 27
6166: EQUAL
6167: IFFALSE 6177
// sAI := true ;
6169: LD_ADDR_EXP 67
6173: PUSH
6174: LD_INT 1
6176: ST_TO_ADDR
// if p3 = 28 then
6177: LD_VAR 0 3
6181: PUSH
6182: LD_INT 28
6184: EQUAL
6185: IFFALSE 6195
// sCargo := true ;
6187: LD_ADDR_EXP 70
6191: PUSH
6192: LD_INT 1
6194: ST_TO_ADDR
// if p3 = 29 then
6195: LD_VAR 0 3
6199: PUSH
6200: LD_INT 29
6202: EQUAL
6203: IFFALSE 6213
// sDLaser := true ;
6205: LD_ADDR_EXP 71
6209: PUSH
6210: LD_INT 1
6212: ST_TO_ADDR
// if p3 = 30 then
6213: LD_VAR 0 3
6217: PUSH
6218: LD_INT 30
6220: EQUAL
6221: IFFALSE 6231
// sExchange := true ;
6223: LD_ADDR_EXP 72
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// if p3 = 31 then
6231: LD_VAR 0 3
6235: PUSH
6236: LD_INT 31
6238: EQUAL
6239: IFFALSE 6249
// sFac := true ;
6241: LD_ADDR_EXP 73
6245: PUSH
6246: LD_INT 1
6248: ST_TO_ADDR
// if p3 = 32 then
6249: LD_VAR 0 3
6253: PUSH
6254: LD_INT 32
6256: EQUAL
6257: IFFALSE 6267
// sPower := true ;
6259: LD_ADDR_EXP 74
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// if p3 = 33 then
6267: LD_VAR 0 3
6271: PUSH
6272: LD_INT 33
6274: EQUAL
6275: IFFALSE 6285
// sRandom := true ;
6277: LD_ADDR_EXP 75
6281: PUSH
6282: LD_INT 1
6284: ST_TO_ADDR
// if p3 = 34 then
6285: LD_VAR 0 3
6289: PUSH
6290: LD_INT 34
6292: EQUAL
6293: IFFALSE 6303
// sShield := true ;
6295: LD_ADDR_EXP 76
6299: PUSH
6300: LD_INT 1
6302: ST_TO_ADDR
// if p3 = 35 then
6303: LD_VAR 0 3
6307: PUSH
6308: LD_INT 35
6310: EQUAL
6311: IFFALSE 6321
// sTime := true ;
6313: LD_ADDR_EXP 77
6317: PUSH
6318: LD_INT 1
6320: ST_TO_ADDR
// if p3 = 36 then
6321: LD_VAR 0 3
6325: PUSH
6326: LD_INT 36
6328: EQUAL
6329: IFFALSE 6339
// sTools := true ;
6331: LD_ADDR_EXP 78
6335: PUSH
6336: LD_INT 1
6338: ST_TO_ADDR
// if p3 = 101 then
6339: LD_VAR 0 3
6343: PUSH
6344: LD_INT 101
6346: EQUAL
6347: IFFALSE 6357
// sSold := true ;
6349: LD_ADDR_EXP 43
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// if p3 = 102 then
6357: LD_VAR 0 3
6361: PUSH
6362: LD_INT 102
6364: EQUAL
6365: IFFALSE 6375
// sDiff := true ;
6367: LD_ADDR_EXP 44
6371: PUSH
6372: LD_INT 1
6374: ST_TO_ADDR
// if p3 = 103 then
6375: LD_VAR 0 3
6379: PUSH
6380: LD_INT 103
6382: EQUAL
6383: IFFALSE 6393
// sFog := true ;
6385: LD_ADDR_EXP 47
6389: PUSH
6390: LD_INT 1
6392: ST_TO_ADDR
// if p3 = 104 then
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 104
6400: EQUAL
6401: IFFALSE 6411
// sReset := true ;
6403: LD_ADDR_EXP 48
6407: PUSH
6408: LD_INT 1
6410: ST_TO_ADDR
// if p3 = 105 then
6411: LD_VAR 0 3
6415: PUSH
6416: LD_INT 105
6418: EQUAL
6419: IFFALSE 6429
// sSun := true ;
6421: LD_ADDR_EXP 49
6425: PUSH
6426: LD_INT 1
6428: ST_TO_ADDR
// if p3 = 106 then
6429: LD_VAR 0 3
6433: PUSH
6434: LD_INT 106
6436: EQUAL
6437: IFFALSE 6447
// sTiger := true ;
6439: LD_ADDR_EXP 45
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// if p3 = 107 then
6447: LD_VAR 0 3
6451: PUSH
6452: LD_INT 107
6454: EQUAL
6455: IFFALSE 6465
// sBomb := true ;
6457: LD_ADDR_EXP 46
6461: PUSH
6462: LD_INT 1
6464: ST_TO_ADDR
// if p3 = 108 then
6465: LD_VAR 0 3
6469: PUSH
6470: LD_INT 108
6472: EQUAL
6473: IFFALSE 6483
// sWound := true ;
6475: LD_ADDR_EXP 54
6479: PUSH
6480: LD_INT 1
6482: ST_TO_ADDR
// if p3 = 109 then
6483: LD_VAR 0 3
6487: PUSH
6488: LD_INT 109
6490: EQUAL
6491: IFFALSE 6501
// sBetray := true ;
6493: LD_ADDR_EXP 58
6497: PUSH
6498: LD_INT 1
6500: ST_TO_ADDR
// if p3 = 110 then
6501: LD_VAR 0 3
6505: PUSH
6506: LD_INT 110
6508: EQUAL
6509: IFFALSE 6519
// sContamin := true ;
6511: LD_ADDR_EXP 59
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// if p3 = 111 then
6519: LD_VAR 0 3
6523: PUSH
6524: LD_INT 111
6526: EQUAL
6527: IFFALSE 6537
// sOil := true ;
6529: LD_ADDR_EXP 61
6533: PUSH
6534: LD_INT 1
6536: ST_TO_ADDR
// if p3 = 112 then
6537: LD_VAR 0 3
6541: PUSH
6542: LD_INT 112
6544: EQUAL
6545: IFFALSE 6555
// sStu := true ;
6547: LD_ADDR_EXP 65
6551: PUSH
6552: LD_INT 1
6554: ST_TO_ADDR
// if p3 = 113 then
6555: LD_VAR 0 3
6559: PUSH
6560: LD_INT 113
6562: EQUAL
6563: IFFALSE 6573
// sBazooka := true ;
6565: LD_ADDR_EXP 68
6569: PUSH
6570: LD_INT 1
6572: ST_TO_ADDR
// if p3 = 114 then
6573: LD_VAR 0 3
6577: PUSH
6578: LD_INT 114
6580: EQUAL
6581: IFFALSE 6591
// sMortar := true ;
6583: LD_ADDR_EXP 69
6587: PUSH
6588: LD_INT 1
6590: ST_TO_ADDR
// if p3 = 115 then
6591: LD_VAR 0 3
6595: PUSH
6596: LD_INT 115
6598: EQUAL
6599: IFFALSE 6609
// sRanger := true ;
6601: LD_ADDR_EXP 79
6605: PUSH
6606: LD_INT 1
6608: ST_TO_ADDR
// if p3 = 116 then
6609: LD_VAR 0 3
6613: PUSH
6614: LD_INT 116
6616: EQUAL
6617: IFFALSE 6627
// sComputer := true ;
6619: LD_ADDR_EXP 80
6623: PUSH
6624: LD_INT 1
6626: ST_TO_ADDR
// if p3 = 117 then
6627: LD_VAR 0 3
6631: PUSH
6632: LD_INT 117
6634: EQUAL
6635: IFFALSE 6645
// s30 := true ;
6637: LD_ADDR_EXP 81
6641: PUSH
6642: LD_INT 1
6644: ST_TO_ADDR
// if p3 = 118 then
6645: LD_VAR 0 3
6649: PUSH
6650: LD_INT 118
6652: EQUAL
6653: IFFALSE 6663
// s60 := true ;
6655: LD_ADDR_EXP 82
6659: PUSH
6660: LD_INT 1
6662: ST_TO_ADDR
// end ; if p2 = hack_mode then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 101
6670: EQUAL
6671: IFFALSE 6799
// begin case p3 of 1 :
6673: LD_VAR 0 3
6677: PUSH
6678: LD_INT 1
6680: DOUBLE
6681: EQUAL
6682: IFTRUE 6686
6684: GO 6693
6686: POP
// hHackUnlimitedResources ; 2 :
6687: CALL 18946 0 0
6691: GO 6799
6693: LD_INT 2
6695: DOUBLE
6696: EQUAL
6697: IFTRUE 6701
6699: GO 6708
6701: POP
// hHackSetLevel10 ; 3 :
6702: CALL 19079 0 0
6706: GO 6799
6708: LD_INT 3
6710: DOUBLE
6711: EQUAL
6712: IFTRUE 6716
6714: GO 6723
6716: POP
// hHackSetLevel10YourUnits ; 4 :
6717: CALL 19164 0 0
6721: GO 6799
6723: LD_INT 4
6725: DOUBLE
6726: EQUAL
6727: IFTRUE 6731
6729: GO 6738
6731: POP
// hHackInvincible ; 5 :
6732: CALL 19612 0 0
6736: GO 6799
6738: LD_INT 5
6740: DOUBLE
6741: EQUAL
6742: IFTRUE 6746
6744: GO 6753
6746: POP
// hHackInvisible ; 6 :
6747: CALL 19723 0 0
6751: GO 6799
6753: LD_INT 6
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6768
6761: POP
// hHackChangeYourSide ; 7 :
6762: CALL 19780 0 0
6766: GO 6799
6768: LD_INT 7
6770: DOUBLE
6771: EQUAL
6772: IFTRUE 6776
6774: GO 6783
6776: POP
// hHackChangeUnitSide ; 8 :
6777: CALL 19822 0 0
6781: GO 6799
6783: LD_INT 8
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6798
6791: POP
// hHackFog ; end ;
6792: CALL 19923 0 0
6796: GO 6799
6798: POP
// end ; if p2 = game_save_mode then
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 102
6806: EQUAL
6807: IFFALSE 6862
// begin if p3 = 1 then
6809: LD_VAR 0 3
6813: PUSH
6814: LD_INT 1
6816: EQUAL
6817: IFFALSE 6829
// globalGameSaveCounter := p4 ;
6819: LD_ADDR_EXP 25
6823: PUSH
6824: LD_VAR 0 4
6828: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6829: LD_VAR 0 3
6833: PUSH
6834: LD_INT 2
6836: EQUAL
6837: PUSH
6838: LD_EXP 25
6842: AND
6843: IFFALSE 6862
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6845: LD_STRING setGameSaveCounter(
6847: PUSH
6848: LD_EXP 25
6852: STR
6853: PUSH
6854: LD_STRING )
6856: STR
6857: PPUSH
6858: CALL_OW 559
// end ; end ;
6862: LD_VAR 0 7
6866: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6867: LD_INT 0
6869: PPUSH
// streamModeActive := false ;
6870: LD_ADDR_EXP 26
6874: PUSH
6875: LD_INT 0
6877: ST_TO_ADDR
// normalCounter := 36 ;
6878: LD_ADDR_EXP 27
6882: PUSH
6883: LD_INT 36
6885: ST_TO_ADDR
// hardcoreCounter := 18 ;
6886: LD_ADDR_EXP 28
6890: PUSH
6891: LD_INT 18
6893: ST_TO_ADDR
// sRocket := false ;
6894: LD_ADDR_EXP 31
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// sSpeed := false ;
6902: LD_ADDR_EXP 30
6906: PUSH
6907: LD_INT 0
6909: ST_TO_ADDR
// sEngine := false ;
6910: LD_ADDR_EXP 32
6914: PUSH
6915: LD_INT 0
6917: ST_TO_ADDR
// sSpec := false ;
6918: LD_ADDR_EXP 29
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// sLevel := false ;
6926: LD_ADDR_EXP 33
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// sArmoury := false ;
6934: LD_ADDR_EXP 34
6938: PUSH
6939: LD_INT 0
6941: ST_TO_ADDR
// sRadar := false ;
6942: LD_ADDR_EXP 35
6946: PUSH
6947: LD_INT 0
6949: ST_TO_ADDR
// sBunker := false ;
6950: LD_ADDR_EXP 36
6954: PUSH
6955: LD_INT 0
6957: ST_TO_ADDR
// sHack := false ;
6958: LD_ADDR_EXP 37
6962: PUSH
6963: LD_INT 0
6965: ST_TO_ADDR
// sFire := false ;
6966: LD_ADDR_EXP 38
6970: PUSH
6971: LD_INT 0
6973: ST_TO_ADDR
// sRefresh := false ;
6974: LD_ADDR_EXP 39
6978: PUSH
6979: LD_INT 0
6981: ST_TO_ADDR
// sExp := false ;
6982: LD_ADDR_EXP 40
6986: PUSH
6987: LD_INT 0
6989: ST_TO_ADDR
// sDepot := false ;
6990: LD_ADDR_EXP 41
6994: PUSH
6995: LD_INT 0
6997: ST_TO_ADDR
// sFlag := false ;
6998: LD_ADDR_EXP 42
7002: PUSH
7003: LD_INT 0
7005: ST_TO_ADDR
// sKamikadze := false ;
7006: LD_ADDR_EXP 50
7010: PUSH
7011: LD_INT 0
7013: ST_TO_ADDR
// sTroll := false ;
7014: LD_ADDR_EXP 51
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// sSlow := false ;
7022: LD_ADDR_EXP 52
7026: PUSH
7027: LD_INT 0
7029: ST_TO_ADDR
// sLack := false ;
7030: LD_ADDR_EXP 53
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// sTank := false ;
7038: LD_ADDR_EXP 55
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// sRemote := false ;
7046: LD_ADDR_EXP 56
7050: PUSH
7051: LD_INT 0
7053: ST_TO_ADDR
// sPowell := false ;
7054: LD_ADDR_EXP 57
7058: PUSH
7059: LD_INT 0
7061: ST_TO_ADDR
// sTeleport := false ;
7062: LD_ADDR_EXP 60
7066: PUSH
7067: LD_INT 0
7069: ST_TO_ADDR
// sOilTower := false ;
7070: LD_ADDR_EXP 62
7074: PUSH
7075: LD_INT 0
7077: ST_TO_ADDR
// sShovel := false ;
7078: LD_ADDR_EXP 63
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// sSheik := false ;
7086: LD_ADDR_EXP 64
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// sEarthquake := false ;
7094: LD_ADDR_EXP 66
7098: PUSH
7099: LD_INT 0
7101: ST_TO_ADDR
// sAI := false ;
7102: LD_ADDR_EXP 67
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// sCargo := false ;
7110: LD_ADDR_EXP 70
7114: PUSH
7115: LD_INT 0
7117: ST_TO_ADDR
// sDLaser := false ;
7118: LD_ADDR_EXP 71
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// sExchange := false ;
7126: LD_ADDR_EXP 72
7130: PUSH
7131: LD_INT 0
7133: ST_TO_ADDR
// sFac := false ;
7134: LD_ADDR_EXP 73
7138: PUSH
7139: LD_INT 0
7141: ST_TO_ADDR
// sPower := false ;
7142: LD_ADDR_EXP 74
7146: PUSH
7147: LD_INT 0
7149: ST_TO_ADDR
// sRandom := false ;
7150: LD_ADDR_EXP 75
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// sShield := false ;
7158: LD_ADDR_EXP 76
7162: PUSH
7163: LD_INT 0
7165: ST_TO_ADDR
// sTime := false ;
7166: LD_ADDR_EXP 77
7170: PUSH
7171: LD_INT 0
7173: ST_TO_ADDR
// sTools := false ;
7174: LD_ADDR_EXP 78
7178: PUSH
7179: LD_INT 0
7181: ST_TO_ADDR
// sSold := false ;
7182: LD_ADDR_EXP 43
7186: PUSH
7187: LD_INT 0
7189: ST_TO_ADDR
// sDiff := false ;
7190: LD_ADDR_EXP 44
7194: PUSH
7195: LD_INT 0
7197: ST_TO_ADDR
// sFog := false ;
7198: LD_ADDR_EXP 47
7202: PUSH
7203: LD_INT 0
7205: ST_TO_ADDR
// sReset := false ;
7206: LD_ADDR_EXP 48
7210: PUSH
7211: LD_INT 0
7213: ST_TO_ADDR
// sSun := false ;
7214: LD_ADDR_EXP 49
7218: PUSH
7219: LD_INT 0
7221: ST_TO_ADDR
// sTiger := false ;
7222: LD_ADDR_EXP 45
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// sBomb := false ;
7230: LD_ADDR_EXP 46
7234: PUSH
7235: LD_INT 0
7237: ST_TO_ADDR
// sWound := false ;
7238: LD_ADDR_EXP 54
7242: PUSH
7243: LD_INT 0
7245: ST_TO_ADDR
// sBetray := false ;
7246: LD_ADDR_EXP 58
7250: PUSH
7251: LD_INT 0
7253: ST_TO_ADDR
// sContamin := false ;
7254: LD_ADDR_EXP 59
7258: PUSH
7259: LD_INT 0
7261: ST_TO_ADDR
// sOil := false ;
7262: LD_ADDR_EXP 61
7266: PUSH
7267: LD_INT 0
7269: ST_TO_ADDR
// sStu := false ;
7270: LD_ADDR_EXP 65
7274: PUSH
7275: LD_INT 0
7277: ST_TO_ADDR
// sBazooka := false ;
7278: LD_ADDR_EXP 68
7282: PUSH
7283: LD_INT 0
7285: ST_TO_ADDR
// sMortar := false ;
7286: LD_ADDR_EXP 69
7290: PUSH
7291: LD_INT 0
7293: ST_TO_ADDR
// sRanger := false ;
7294: LD_ADDR_EXP 79
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// sComputer := false ;
7302: LD_ADDR_EXP 80
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// s30 := false ;
7310: LD_ADDR_EXP 81
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// s60 := false ;
7318: LD_ADDR_EXP 82
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// end ;
7326: LD_VAR 0 1
7330: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7331: LD_INT 0
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
// result := [ ] ;
7340: LD_ADDR_VAR 0 2
7344: PUSH
7345: EMPTY
7346: ST_TO_ADDR
// if campaign_id = 1 then
7347: LD_OWVAR 69
7351: PUSH
7352: LD_INT 1
7354: EQUAL
7355: IFFALSE 10521
// begin case mission_number of 1 :
7357: LD_OWVAR 70
7361: PUSH
7362: LD_INT 1
7364: DOUBLE
7365: EQUAL
7366: IFTRUE 7370
7368: GO 7446
7370: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7371: LD_ADDR_VAR 0 2
7375: PUSH
7376: LD_INT 2
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: LD_INT 11
7384: PUSH
7385: LD_INT 12
7387: PUSH
7388: LD_INT 15
7390: PUSH
7391: LD_INT 16
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_INT 23
7399: PUSH
7400: LD_INT 26
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 101
7416: PUSH
7417: LD_INT 102
7419: PUSH
7420: LD_INT 106
7422: PUSH
7423: LD_INT 116
7425: PUSH
7426: LD_INT 117
7428: PUSH
7429: LD_INT 118
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
7444: GO 10519
7446: LD_INT 2
7448: DOUBLE
7449: EQUAL
7450: IFTRUE 7454
7452: GO 7538
7454: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: LD_INT 2
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: LD_INT 15
7474: PUSH
7475: LD_INT 16
7477: PUSH
7478: LD_INT 22
7480: PUSH
7481: LD_INT 23
7483: PUSH
7484: LD_INT 26
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 101
7500: PUSH
7501: LD_INT 102
7503: PUSH
7504: LD_INT 105
7506: PUSH
7507: LD_INT 106
7509: PUSH
7510: LD_INT 108
7512: PUSH
7513: LD_INT 116
7515: PUSH
7516: LD_INT 117
7518: PUSH
7519: LD_INT 118
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: ST_TO_ADDR
7536: GO 10519
7538: LD_INT 3
7540: DOUBLE
7541: EQUAL
7542: IFTRUE 7546
7544: GO 7634
7546: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7547: LD_ADDR_VAR 0 2
7551: PUSH
7552: LD_INT 2
7554: PUSH
7555: LD_INT 4
7557: PUSH
7558: LD_INT 5
7560: PUSH
7561: LD_INT 11
7563: PUSH
7564: LD_INT 12
7566: PUSH
7567: LD_INT 15
7569: PUSH
7570: LD_INT 16
7572: PUSH
7573: LD_INT 22
7575: PUSH
7576: LD_INT 26
7578: PUSH
7579: LD_INT 36
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 101
7596: PUSH
7597: LD_INT 102
7599: PUSH
7600: LD_INT 105
7602: PUSH
7603: LD_INT 106
7605: PUSH
7606: LD_INT 108
7608: PUSH
7609: LD_INT 116
7611: PUSH
7612: LD_INT 117
7614: PUSH
7615: LD_INT 118
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: ST_TO_ADDR
7632: GO 10519
7634: LD_INT 4
7636: DOUBLE
7637: EQUAL
7638: IFTRUE 7642
7640: GO 7738
7642: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7643: LD_ADDR_VAR 0 2
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 5
7656: PUSH
7657: LD_INT 8
7659: PUSH
7660: LD_INT 11
7662: PUSH
7663: LD_INT 12
7665: PUSH
7666: LD_INT 15
7668: PUSH
7669: LD_INT 16
7671: PUSH
7672: LD_INT 22
7674: PUSH
7675: LD_INT 23
7677: PUSH
7678: LD_INT 26
7680: PUSH
7681: LD_INT 36
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 101
7700: PUSH
7701: LD_INT 102
7703: PUSH
7704: LD_INT 105
7706: PUSH
7707: LD_INT 106
7709: PUSH
7710: LD_INT 108
7712: PUSH
7713: LD_INT 116
7715: PUSH
7716: LD_INT 117
7718: PUSH
7719: LD_INT 118
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: ST_TO_ADDR
7736: GO 10519
7738: LD_INT 5
7740: DOUBLE
7741: EQUAL
7742: IFTRUE 7746
7744: GO 7858
7746: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_INT 2
7754: PUSH
7755: LD_INT 4
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: LD_INT 6
7763: PUSH
7764: LD_INT 8
7766: PUSH
7767: LD_INT 11
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: LD_INT 15
7775: PUSH
7776: LD_INT 16
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_INT 23
7784: PUSH
7785: LD_INT 25
7787: PUSH
7788: LD_INT 26
7790: PUSH
7791: LD_INT 36
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 101
7812: PUSH
7813: LD_INT 102
7815: PUSH
7816: LD_INT 105
7818: PUSH
7819: LD_INT 106
7821: PUSH
7822: LD_INT 108
7824: PUSH
7825: LD_INT 109
7827: PUSH
7828: LD_INT 112
7830: PUSH
7831: LD_INT 116
7833: PUSH
7834: LD_INT 117
7836: PUSH
7837: LD_INT 118
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: ST_TO_ADDR
7856: GO 10519
7858: LD_INT 6
7860: DOUBLE
7861: EQUAL
7862: IFTRUE 7866
7864: GO 7998
7866: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7867: LD_ADDR_VAR 0 2
7871: PUSH
7872: LD_INT 2
7874: PUSH
7875: LD_INT 4
7877: PUSH
7878: LD_INT 5
7880: PUSH
7881: LD_INT 6
7883: PUSH
7884: LD_INT 8
7886: PUSH
7887: LD_INT 11
7889: PUSH
7890: LD_INT 12
7892: PUSH
7893: LD_INT 15
7895: PUSH
7896: LD_INT 16
7898: PUSH
7899: LD_INT 20
7901: PUSH
7902: LD_INT 21
7904: PUSH
7905: LD_INT 22
7907: PUSH
7908: LD_INT 23
7910: PUSH
7911: LD_INT 25
7913: PUSH
7914: LD_INT 26
7916: PUSH
7917: LD_INT 30
7919: PUSH
7920: LD_INT 31
7922: PUSH
7923: LD_INT 32
7925: PUSH
7926: LD_INT 36
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 101
7952: PUSH
7953: LD_INT 102
7955: PUSH
7956: LD_INT 105
7958: PUSH
7959: LD_INT 106
7961: PUSH
7962: LD_INT 108
7964: PUSH
7965: LD_INT 109
7967: PUSH
7968: LD_INT 112
7970: PUSH
7971: LD_INT 116
7973: PUSH
7974: LD_INT 117
7976: PUSH
7977: LD_INT 118
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: ST_TO_ADDR
7996: GO 10519
7998: LD_INT 7
8000: DOUBLE
8001: EQUAL
8002: IFTRUE 8006
8004: GO 8118
8006: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8007: LD_ADDR_VAR 0 2
8011: PUSH
8012: LD_INT 2
8014: PUSH
8015: LD_INT 4
8017: PUSH
8018: LD_INT 5
8020: PUSH
8021: LD_INT 7
8023: PUSH
8024: LD_INT 11
8026: PUSH
8027: LD_INT 12
8029: PUSH
8030: LD_INT 15
8032: PUSH
8033: LD_INT 16
8035: PUSH
8036: LD_INT 20
8038: PUSH
8039: LD_INT 21
8041: PUSH
8042: LD_INT 22
8044: PUSH
8045: LD_INT 23
8047: PUSH
8048: LD_INT 25
8050: PUSH
8051: LD_INT 26
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: PUSH
8070: LD_INT 101
8072: PUSH
8073: LD_INT 102
8075: PUSH
8076: LD_INT 103
8078: PUSH
8079: LD_INT 105
8081: PUSH
8082: LD_INT 106
8084: PUSH
8085: LD_INT 108
8087: PUSH
8088: LD_INT 112
8090: PUSH
8091: LD_INT 116
8093: PUSH
8094: LD_INT 117
8096: PUSH
8097: LD_INT 118
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: ST_TO_ADDR
8116: GO 10519
8118: LD_INT 8
8120: DOUBLE
8121: EQUAL
8122: IFTRUE 8126
8124: GO 8266
8126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8127: LD_ADDR_VAR 0 2
8131: PUSH
8132: LD_INT 2
8134: PUSH
8135: LD_INT 4
8137: PUSH
8138: LD_INT 5
8140: PUSH
8141: LD_INT 6
8143: PUSH
8144: LD_INT 7
8146: PUSH
8147: LD_INT 8
8149: PUSH
8150: LD_INT 11
8152: PUSH
8153: LD_INT 12
8155: PUSH
8156: LD_INT 15
8158: PUSH
8159: LD_INT 16
8161: PUSH
8162: LD_INT 20
8164: PUSH
8165: LD_INT 21
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_INT 23
8173: PUSH
8174: LD_INT 25
8176: PUSH
8177: LD_INT 26
8179: PUSH
8180: LD_INT 30
8182: PUSH
8183: LD_INT 31
8185: PUSH
8186: LD_INT 32
8188: PUSH
8189: LD_INT 36
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 101
8216: PUSH
8217: LD_INT 102
8219: PUSH
8220: LD_INT 103
8222: PUSH
8223: LD_INT 105
8225: PUSH
8226: LD_INT 106
8228: PUSH
8229: LD_INT 108
8231: PUSH
8232: LD_INT 109
8234: PUSH
8235: LD_INT 112
8237: PUSH
8238: LD_INT 116
8240: PUSH
8241: LD_INT 117
8243: PUSH
8244: LD_INT 118
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: ST_TO_ADDR
8264: GO 10519
8266: LD_INT 9
8268: DOUBLE
8269: EQUAL
8270: IFTRUE 8274
8272: GO 8422
8274: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: LD_INT 2
8282: PUSH
8283: LD_INT 4
8285: PUSH
8286: LD_INT 5
8288: PUSH
8289: LD_INT 6
8291: PUSH
8292: LD_INT 7
8294: PUSH
8295: LD_INT 8
8297: PUSH
8298: LD_INT 11
8300: PUSH
8301: LD_INT 12
8303: PUSH
8304: LD_INT 15
8306: PUSH
8307: LD_INT 16
8309: PUSH
8310: LD_INT 20
8312: PUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 22
8318: PUSH
8319: LD_INT 23
8321: PUSH
8322: LD_INT 25
8324: PUSH
8325: LD_INT 26
8327: PUSH
8328: LD_INT 28
8330: PUSH
8331: LD_INT 30
8333: PUSH
8334: LD_INT 31
8336: PUSH
8337: LD_INT 32
8339: PUSH
8340: LD_INT 36
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 101
8368: PUSH
8369: LD_INT 102
8371: PUSH
8372: LD_INT 103
8374: PUSH
8375: LD_INT 105
8377: PUSH
8378: LD_INT 106
8380: PUSH
8381: LD_INT 108
8383: PUSH
8384: LD_INT 109
8386: PUSH
8387: LD_INT 112
8389: PUSH
8390: LD_INT 114
8392: PUSH
8393: LD_INT 116
8395: PUSH
8396: LD_INT 117
8398: PUSH
8399: LD_INT 118
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: ST_TO_ADDR
8420: GO 10519
8422: LD_INT 10
8424: DOUBLE
8425: EQUAL
8426: IFTRUE 8430
8428: GO 8626
8430: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8431: LD_ADDR_VAR 0 2
8435: PUSH
8436: LD_INT 2
8438: PUSH
8439: LD_INT 4
8441: PUSH
8442: LD_INT 5
8444: PUSH
8445: LD_INT 6
8447: PUSH
8448: LD_INT 7
8450: PUSH
8451: LD_INT 8
8453: PUSH
8454: LD_INT 9
8456: PUSH
8457: LD_INT 10
8459: PUSH
8460: LD_INT 11
8462: PUSH
8463: LD_INT 12
8465: PUSH
8466: LD_INT 13
8468: PUSH
8469: LD_INT 14
8471: PUSH
8472: LD_INT 15
8474: PUSH
8475: LD_INT 16
8477: PUSH
8478: LD_INT 17
8480: PUSH
8481: LD_INT 18
8483: PUSH
8484: LD_INT 19
8486: PUSH
8487: LD_INT 20
8489: PUSH
8490: LD_INT 21
8492: PUSH
8493: LD_INT 22
8495: PUSH
8496: LD_INT 23
8498: PUSH
8499: LD_INT 24
8501: PUSH
8502: LD_INT 25
8504: PUSH
8505: LD_INT 26
8507: PUSH
8508: LD_INT 28
8510: PUSH
8511: LD_INT 30
8513: PUSH
8514: LD_INT 31
8516: PUSH
8517: LD_INT 32
8519: PUSH
8520: LD_INT 36
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: PUSH
8554: LD_INT 101
8556: PUSH
8557: LD_INT 102
8559: PUSH
8560: LD_INT 103
8562: PUSH
8563: LD_INT 104
8565: PUSH
8566: LD_INT 105
8568: PUSH
8569: LD_INT 106
8571: PUSH
8572: LD_INT 107
8574: PUSH
8575: LD_INT 108
8577: PUSH
8578: LD_INT 109
8580: PUSH
8581: LD_INT 110
8583: PUSH
8584: LD_INT 111
8586: PUSH
8587: LD_INT 112
8589: PUSH
8590: LD_INT 114
8592: PUSH
8593: LD_INT 116
8595: PUSH
8596: LD_INT 117
8598: PUSH
8599: LD_INT 118
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: ST_TO_ADDR
8624: GO 10519
8626: LD_INT 11
8628: DOUBLE
8629: EQUAL
8630: IFTRUE 8634
8632: GO 8838
8634: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8635: LD_ADDR_VAR 0 2
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: LD_INT 3
8645: PUSH
8646: LD_INT 4
8648: PUSH
8649: LD_INT 5
8651: PUSH
8652: LD_INT 6
8654: PUSH
8655: LD_INT 7
8657: PUSH
8658: LD_INT 8
8660: PUSH
8661: LD_INT 9
8663: PUSH
8664: LD_INT 10
8666: PUSH
8667: LD_INT 11
8669: PUSH
8670: LD_INT 12
8672: PUSH
8673: LD_INT 13
8675: PUSH
8676: LD_INT 14
8678: PUSH
8679: LD_INT 15
8681: PUSH
8682: LD_INT 16
8684: PUSH
8685: LD_INT 17
8687: PUSH
8688: LD_INT 18
8690: PUSH
8691: LD_INT 19
8693: PUSH
8694: LD_INT 20
8696: PUSH
8697: LD_INT 21
8699: PUSH
8700: LD_INT 22
8702: PUSH
8703: LD_INT 23
8705: PUSH
8706: LD_INT 24
8708: PUSH
8709: LD_INT 25
8711: PUSH
8712: LD_INT 26
8714: PUSH
8715: LD_INT 28
8717: PUSH
8718: LD_INT 30
8720: PUSH
8721: LD_INT 31
8723: PUSH
8724: LD_INT 32
8726: PUSH
8727: LD_INT 34
8729: PUSH
8730: LD_INT 36
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 101
8768: PUSH
8769: LD_INT 102
8771: PUSH
8772: LD_INT 103
8774: PUSH
8775: LD_INT 104
8777: PUSH
8778: LD_INT 105
8780: PUSH
8781: LD_INT 106
8783: PUSH
8784: LD_INT 107
8786: PUSH
8787: LD_INT 108
8789: PUSH
8790: LD_INT 109
8792: PUSH
8793: LD_INT 110
8795: PUSH
8796: LD_INT 111
8798: PUSH
8799: LD_INT 112
8801: PUSH
8802: LD_INT 114
8804: PUSH
8805: LD_INT 116
8807: PUSH
8808: LD_INT 117
8810: PUSH
8811: LD_INT 118
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 10519
8838: LD_INT 12
8840: DOUBLE
8841: EQUAL
8842: IFTRUE 8846
8844: GO 9066
8846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: LD_INT 2
8857: PUSH
8858: LD_INT 3
8860: PUSH
8861: LD_INT 4
8863: PUSH
8864: LD_INT 5
8866: PUSH
8867: LD_INT 6
8869: PUSH
8870: LD_INT 7
8872: PUSH
8873: LD_INT 8
8875: PUSH
8876: LD_INT 9
8878: PUSH
8879: LD_INT 10
8881: PUSH
8882: LD_INT 11
8884: PUSH
8885: LD_INT 12
8887: PUSH
8888: LD_INT 13
8890: PUSH
8891: LD_INT 14
8893: PUSH
8894: LD_INT 15
8896: PUSH
8897: LD_INT 16
8899: PUSH
8900: LD_INT 17
8902: PUSH
8903: LD_INT 18
8905: PUSH
8906: LD_INT 19
8908: PUSH
8909: LD_INT 20
8911: PUSH
8912: LD_INT 21
8914: PUSH
8915: LD_INT 22
8917: PUSH
8918: LD_INT 23
8920: PUSH
8921: LD_INT 24
8923: PUSH
8924: LD_INT 25
8926: PUSH
8927: LD_INT 26
8929: PUSH
8930: LD_INT 27
8932: PUSH
8933: LD_INT 28
8935: PUSH
8936: LD_INT 30
8938: PUSH
8939: LD_INT 31
8941: PUSH
8942: LD_INT 32
8944: PUSH
8945: LD_INT 33
8947: PUSH
8948: LD_INT 34
8950: PUSH
8951: LD_INT 36
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: PUSH
8990: LD_INT 101
8992: PUSH
8993: LD_INT 102
8995: PUSH
8996: LD_INT 103
8998: PUSH
8999: LD_INT 104
9001: PUSH
9002: LD_INT 105
9004: PUSH
9005: LD_INT 106
9007: PUSH
9008: LD_INT 107
9010: PUSH
9011: LD_INT 108
9013: PUSH
9014: LD_INT 109
9016: PUSH
9017: LD_INT 110
9019: PUSH
9020: LD_INT 111
9022: PUSH
9023: LD_INT 112
9025: PUSH
9026: LD_INT 113
9028: PUSH
9029: LD_INT 114
9031: PUSH
9032: LD_INT 116
9034: PUSH
9035: LD_INT 117
9037: PUSH
9038: LD_INT 118
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: ST_TO_ADDR
9064: GO 10519
9066: LD_INT 13
9068: DOUBLE
9069: EQUAL
9070: IFTRUE 9074
9072: GO 9282
9074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: LD_INT 3
9088: PUSH
9089: LD_INT 4
9091: PUSH
9092: LD_INT 5
9094: PUSH
9095: LD_INT 8
9097: PUSH
9098: LD_INT 9
9100: PUSH
9101: LD_INT 10
9103: PUSH
9104: LD_INT 11
9106: PUSH
9107: LD_INT 12
9109: PUSH
9110: LD_INT 14
9112: PUSH
9113: LD_INT 15
9115: PUSH
9116: LD_INT 16
9118: PUSH
9119: LD_INT 17
9121: PUSH
9122: LD_INT 18
9124: PUSH
9125: LD_INT 19
9127: PUSH
9128: LD_INT 20
9130: PUSH
9131: LD_INT 21
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_INT 23
9139: PUSH
9140: LD_INT 24
9142: PUSH
9143: LD_INT 25
9145: PUSH
9146: LD_INT 26
9148: PUSH
9149: LD_INT 27
9151: PUSH
9152: LD_INT 28
9154: PUSH
9155: LD_INT 30
9157: PUSH
9158: LD_INT 31
9160: PUSH
9161: LD_INT 32
9163: PUSH
9164: LD_INT 33
9166: PUSH
9167: LD_INT 34
9169: PUSH
9170: LD_INT 36
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 101
9208: PUSH
9209: LD_INT 102
9211: PUSH
9212: LD_INT 103
9214: PUSH
9215: LD_INT 104
9217: PUSH
9218: LD_INT 105
9220: PUSH
9221: LD_INT 106
9223: PUSH
9224: LD_INT 107
9226: PUSH
9227: LD_INT 108
9229: PUSH
9230: LD_INT 109
9232: PUSH
9233: LD_INT 110
9235: PUSH
9236: LD_INT 111
9238: PUSH
9239: LD_INT 112
9241: PUSH
9242: LD_INT 113
9244: PUSH
9245: LD_INT 114
9247: PUSH
9248: LD_INT 116
9250: PUSH
9251: LD_INT 117
9253: PUSH
9254: LD_INT 118
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: ST_TO_ADDR
9280: GO 10519
9282: LD_INT 14
9284: DOUBLE
9285: EQUAL
9286: IFTRUE 9290
9288: GO 9514
9290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9291: LD_ADDR_VAR 0 2
9295: PUSH
9296: LD_INT 1
9298: PUSH
9299: LD_INT 2
9301: PUSH
9302: LD_INT 3
9304: PUSH
9305: LD_INT 4
9307: PUSH
9308: LD_INT 5
9310: PUSH
9311: LD_INT 6
9313: PUSH
9314: LD_INT 7
9316: PUSH
9317: LD_INT 8
9319: PUSH
9320: LD_INT 9
9322: PUSH
9323: LD_INT 10
9325: PUSH
9326: LD_INT 11
9328: PUSH
9329: LD_INT 12
9331: PUSH
9332: LD_INT 13
9334: PUSH
9335: LD_INT 14
9337: PUSH
9338: LD_INT 15
9340: PUSH
9341: LD_INT 16
9343: PUSH
9344: LD_INT 17
9346: PUSH
9347: LD_INT 18
9349: PUSH
9350: LD_INT 19
9352: PUSH
9353: LD_INT 20
9355: PUSH
9356: LD_INT 21
9358: PUSH
9359: LD_INT 22
9361: PUSH
9362: LD_INT 23
9364: PUSH
9365: LD_INT 24
9367: PUSH
9368: LD_INT 25
9370: PUSH
9371: LD_INT 26
9373: PUSH
9374: LD_INT 27
9376: PUSH
9377: LD_INT 28
9379: PUSH
9380: LD_INT 29
9382: PUSH
9383: LD_INT 30
9385: PUSH
9386: LD_INT 31
9388: PUSH
9389: LD_INT 32
9391: PUSH
9392: LD_INT 33
9394: PUSH
9395: LD_INT 34
9397: PUSH
9398: LD_INT 36
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 101
9440: PUSH
9441: LD_INT 102
9443: PUSH
9444: LD_INT 103
9446: PUSH
9447: LD_INT 104
9449: PUSH
9450: LD_INT 105
9452: PUSH
9453: LD_INT 106
9455: PUSH
9456: LD_INT 107
9458: PUSH
9459: LD_INT 108
9461: PUSH
9462: LD_INT 109
9464: PUSH
9465: LD_INT 110
9467: PUSH
9468: LD_INT 111
9470: PUSH
9471: LD_INT 112
9473: PUSH
9474: LD_INT 113
9476: PUSH
9477: LD_INT 114
9479: PUSH
9480: LD_INT 116
9482: PUSH
9483: LD_INT 117
9485: PUSH
9486: LD_INT 118
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: ST_TO_ADDR
9512: GO 10519
9514: LD_INT 15
9516: DOUBLE
9517: EQUAL
9518: IFTRUE 9522
9520: GO 9746
9522: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9523: LD_ADDR_VAR 0 2
9527: PUSH
9528: LD_INT 1
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: LD_INT 3
9536: PUSH
9537: LD_INT 4
9539: PUSH
9540: LD_INT 5
9542: PUSH
9543: LD_INT 6
9545: PUSH
9546: LD_INT 7
9548: PUSH
9549: LD_INT 8
9551: PUSH
9552: LD_INT 9
9554: PUSH
9555: LD_INT 10
9557: PUSH
9558: LD_INT 11
9560: PUSH
9561: LD_INT 12
9563: PUSH
9564: LD_INT 13
9566: PUSH
9567: LD_INT 14
9569: PUSH
9570: LD_INT 15
9572: PUSH
9573: LD_INT 16
9575: PUSH
9576: LD_INT 17
9578: PUSH
9579: LD_INT 18
9581: PUSH
9582: LD_INT 19
9584: PUSH
9585: LD_INT 20
9587: PUSH
9588: LD_INT 21
9590: PUSH
9591: LD_INT 22
9593: PUSH
9594: LD_INT 23
9596: PUSH
9597: LD_INT 24
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 26
9605: PUSH
9606: LD_INT 27
9608: PUSH
9609: LD_INT 28
9611: PUSH
9612: LD_INT 29
9614: PUSH
9615: LD_INT 30
9617: PUSH
9618: LD_INT 31
9620: PUSH
9621: LD_INT 32
9623: PUSH
9624: LD_INT 33
9626: PUSH
9627: LD_INT 34
9629: PUSH
9630: LD_INT 36
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 101
9672: PUSH
9673: LD_INT 102
9675: PUSH
9676: LD_INT 103
9678: PUSH
9679: LD_INT 104
9681: PUSH
9682: LD_INT 105
9684: PUSH
9685: LD_INT 106
9687: PUSH
9688: LD_INT 107
9690: PUSH
9691: LD_INT 108
9693: PUSH
9694: LD_INT 109
9696: PUSH
9697: LD_INT 110
9699: PUSH
9700: LD_INT 111
9702: PUSH
9703: LD_INT 112
9705: PUSH
9706: LD_INT 113
9708: PUSH
9709: LD_INT 114
9711: PUSH
9712: LD_INT 116
9714: PUSH
9715: LD_INT 117
9717: PUSH
9718: LD_INT 118
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: ST_TO_ADDR
9744: GO 10519
9746: LD_INT 16
9748: DOUBLE
9749: EQUAL
9750: IFTRUE 9754
9752: GO 9890
9754: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9755: LD_ADDR_VAR 0 2
9759: PUSH
9760: LD_INT 2
9762: PUSH
9763: LD_INT 4
9765: PUSH
9766: LD_INT 5
9768: PUSH
9769: LD_INT 7
9771: PUSH
9772: LD_INT 11
9774: PUSH
9775: LD_INT 12
9777: PUSH
9778: LD_INT 15
9780: PUSH
9781: LD_INT 16
9783: PUSH
9784: LD_INT 20
9786: PUSH
9787: LD_INT 21
9789: PUSH
9790: LD_INT 22
9792: PUSH
9793: LD_INT 23
9795: PUSH
9796: LD_INT 25
9798: PUSH
9799: LD_INT 26
9801: PUSH
9802: LD_INT 30
9804: PUSH
9805: LD_INT 31
9807: PUSH
9808: LD_INT 32
9810: PUSH
9811: LD_INT 33
9813: PUSH
9814: LD_INT 34
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 101
9840: PUSH
9841: LD_INT 102
9843: PUSH
9844: LD_INT 103
9846: PUSH
9847: LD_INT 106
9849: PUSH
9850: LD_INT 108
9852: PUSH
9853: LD_INT 112
9855: PUSH
9856: LD_INT 113
9858: PUSH
9859: LD_INT 114
9861: PUSH
9862: LD_INT 116
9864: PUSH
9865: LD_INT 117
9867: PUSH
9868: LD_INT 118
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: ST_TO_ADDR
9888: GO 10519
9890: LD_INT 17
9892: DOUBLE
9893: EQUAL
9894: IFTRUE 9898
9896: GO 10122
9898: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9899: LD_ADDR_VAR 0 2
9903: PUSH
9904: LD_INT 1
9906: PUSH
9907: LD_INT 2
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: LD_INT 4
9915: PUSH
9916: LD_INT 5
9918: PUSH
9919: LD_INT 6
9921: PUSH
9922: LD_INT 7
9924: PUSH
9925: LD_INT 8
9927: PUSH
9928: LD_INT 9
9930: PUSH
9931: LD_INT 10
9933: PUSH
9934: LD_INT 11
9936: PUSH
9937: LD_INT 12
9939: PUSH
9940: LD_INT 13
9942: PUSH
9943: LD_INT 14
9945: PUSH
9946: LD_INT 15
9948: PUSH
9949: LD_INT 16
9951: PUSH
9952: LD_INT 17
9954: PUSH
9955: LD_INT 18
9957: PUSH
9958: LD_INT 19
9960: PUSH
9961: LD_INT 20
9963: PUSH
9964: LD_INT 21
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 23
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: LD_INT 25
9978: PUSH
9979: LD_INT 26
9981: PUSH
9982: LD_INT 27
9984: PUSH
9985: LD_INT 28
9987: PUSH
9988: LD_INT 29
9990: PUSH
9991: LD_INT 30
9993: PUSH
9994: LD_INT 31
9996: PUSH
9997: LD_INT 32
9999: PUSH
10000: LD_INT 33
10002: PUSH
10003: LD_INT 34
10005: PUSH
10006: LD_INT 36
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 101
10048: PUSH
10049: LD_INT 102
10051: PUSH
10052: LD_INT 103
10054: PUSH
10055: LD_INT 104
10057: PUSH
10058: LD_INT 105
10060: PUSH
10061: LD_INT 106
10063: PUSH
10064: LD_INT 107
10066: PUSH
10067: LD_INT 108
10069: PUSH
10070: LD_INT 109
10072: PUSH
10073: LD_INT 110
10075: PUSH
10076: LD_INT 111
10078: PUSH
10079: LD_INT 112
10081: PUSH
10082: LD_INT 113
10084: PUSH
10085: LD_INT 114
10087: PUSH
10088: LD_INT 116
10090: PUSH
10091: LD_INT 117
10093: PUSH
10094: LD_INT 118
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: ST_TO_ADDR
10120: GO 10519
10122: LD_INT 18
10124: DOUBLE
10125: EQUAL
10126: IFTRUE 10130
10128: GO 10278
10130: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: LD_INT 4
10141: PUSH
10142: LD_INT 5
10144: PUSH
10145: LD_INT 7
10147: PUSH
10148: LD_INT 11
10150: PUSH
10151: LD_INT 12
10153: PUSH
10154: LD_INT 15
10156: PUSH
10157: LD_INT 16
10159: PUSH
10160: LD_INT 20
10162: PUSH
10163: LD_INT 21
10165: PUSH
10166: LD_INT 22
10168: PUSH
10169: LD_INT 23
10171: PUSH
10172: LD_INT 25
10174: PUSH
10175: LD_INT 26
10177: PUSH
10178: LD_INT 30
10180: PUSH
10181: LD_INT 31
10183: PUSH
10184: LD_INT 32
10186: PUSH
10187: LD_INT 33
10189: PUSH
10190: LD_INT 34
10192: PUSH
10193: LD_INT 35
10195: PUSH
10196: LD_INT 36
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 101
10224: PUSH
10225: LD_INT 102
10227: PUSH
10228: LD_INT 103
10230: PUSH
10231: LD_INT 106
10233: PUSH
10234: LD_INT 108
10236: PUSH
10237: LD_INT 112
10239: PUSH
10240: LD_INT 113
10242: PUSH
10243: LD_INT 114
10245: PUSH
10246: LD_INT 115
10248: PUSH
10249: LD_INT 116
10251: PUSH
10252: LD_INT 117
10254: PUSH
10255: LD_INT 118
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: ST_TO_ADDR
10276: GO 10519
10278: LD_INT 19
10280: DOUBLE
10281: EQUAL
10282: IFTRUE 10286
10284: GO 10518
10286: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10287: LD_ADDR_VAR 0 2
10291: PUSH
10292: LD_INT 1
10294: PUSH
10295: LD_INT 2
10297: PUSH
10298: LD_INT 3
10300: PUSH
10301: LD_INT 4
10303: PUSH
10304: LD_INT 5
10306: PUSH
10307: LD_INT 6
10309: PUSH
10310: LD_INT 7
10312: PUSH
10313: LD_INT 8
10315: PUSH
10316: LD_INT 9
10318: PUSH
10319: LD_INT 10
10321: PUSH
10322: LD_INT 11
10324: PUSH
10325: LD_INT 12
10327: PUSH
10328: LD_INT 13
10330: PUSH
10331: LD_INT 14
10333: PUSH
10334: LD_INT 15
10336: PUSH
10337: LD_INT 16
10339: PUSH
10340: LD_INT 17
10342: PUSH
10343: LD_INT 18
10345: PUSH
10346: LD_INT 19
10348: PUSH
10349: LD_INT 20
10351: PUSH
10352: LD_INT 21
10354: PUSH
10355: LD_INT 22
10357: PUSH
10358: LD_INT 23
10360: PUSH
10361: LD_INT 24
10363: PUSH
10364: LD_INT 25
10366: PUSH
10367: LD_INT 26
10369: PUSH
10370: LD_INT 27
10372: PUSH
10373: LD_INT 28
10375: PUSH
10376: LD_INT 29
10378: PUSH
10379: LD_INT 30
10381: PUSH
10382: LD_INT 31
10384: PUSH
10385: LD_INT 32
10387: PUSH
10388: LD_INT 33
10390: PUSH
10391: LD_INT 34
10393: PUSH
10394: LD_INT 35
10396: PUSH
10397: LD_INT 36
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 101
10440: PUSH
10441: LD_INT 102
10443: PUSH
10444: LD_INT 103
10446: PUSH
10447: LD_INT 104
10449: PUSH
10450: LD_INT 105
10452: PUSH
10453: LD_INT 106
10455: PUSH
10456: LD_INT 107
10458: PUSH
10459: LD_INT 108
10461: PUSH
10462: LD_INT 109
10464: PUSH
10465: LD_INT 110
10467: PUSH
10468: LD_INT 111
10470: PUSH
10471: LD_INT 112
10473: PUSH
10474: LD_INT 113
10476: PUSH
10477: LD_INT 114
10479: PUSH
10480: LD_INT 115
10482: PUSH
10483: LD_INT 116
10485: PUSH
10486: LD_INT 117
10488: PUSH
10489: LD_INT 118
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: ST_TO_ADDR
10516: GO 10519
10518: POP
// end else
10519: GO 10750
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: LD_INT 3
10534: PUSH
10535: LD_INT 4
10537: PUSH
10538: LD_INT 5
10540: PUSH
10541: LD_INT 6
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: LD_INT 8
10549: PUSH
10550: LD_INT 9
10552: PUSH
10553: LD_INT 10
10555: PUSH
10556: LD_INT 11
10558: PUSH
10559: LD_INT 12
10561: PUSH
10562: LD_INT 13
10564: PUSH
10565: LD_INT 14
10567: PUSH
10568: LD_INT 15
10570: PUSH
10571: LD_INT 16
10573: PUSH
10574: LD_INT 17
10576: PUSH
10577: LD_INT 18
10579: PUSH
10580: LD_INT 19
10582: PUSH
10583: LD_INT 20
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 22
10591: PUSH
10592: LD_INT 23
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 25
10600: PUSH
10601: LD_INT 26
10603: PUSH
10604: LD_INT 27
10606: PUSH
10607: LD_INT 28
10609: PUSH
10610: LD_INT 29
10612: PUSH
10613: LD_INT 30
10615: PUSH
10616: LD_INT 31
10618: PUSH
10619: LD_INT 32
10621: PUSH
10622: LD_INT 33
10624: PUSH
10625: LD_INT 34
10627: PUSH
10628: LD_INT 35
10630: PUSH
10631: LD_INT 36
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 101
10674: PUSH
10675: LD_INT 102
10677: PUSH
10678: LD_INT 103
10680: PUSH
10681: LD_INT 104
10683: PUSH
10684: LD_INT 105
10686: PUSH
10687: LD_INT 106
10689: PUSH
10690: LD_INT 107
10692: PUSH
10693: LD_INT 108
10695: PUSH
10696: LD_INT 109
10698: PUSH
10699: LD_INT 110
10701: PUSH
10702: LD_INT 111
10704: PUSH
10705: LD_INT 112
10707: PUSH
10708: LD_INT 113
10710: PUSH
10711: LD_INT 114
10713: PUSH
10714: LD_INT 115
10716: PUSH
10717: LD_INT 116
10719: PUSH
10720: LD_INT 117
10722: PUSH
10723: LD_INT 118
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: ST_TO_ADDR
// if result then
10750: LD_VAR 0 2
10754: IFFALSE 11540
// begin normal :=  ;
10756: LD_ADDR_VAR 0 5
10760: PUSH
10761: LD_STRING 
10763: ST_TO_ADDR
// hardcore :=  ;
10764: LD_ADDR_VAR 0 6
10768: PUSH
10769: LD_STRING 
10771: ST_TO_ADDR
// active :=  ;
10772: LD_ADDR_VAR 0 7
10776: PUSH
10777: LD_STRING 
10779: ST_TO_ADDR
// for i = 1 to normalCounter do
10780: LD_ADDR_VAR 0 8
10784: PUSH
10785: DOUBLE
10786: LD_INT 1
10788: DEC
10789: ST_TO_ADDR
10790: LD_EXP 27
10794: PUSH
10795: FOR_TO
10796: IFFALSE 10897
// begin tmp := 0 ;
10798: LD_ADDR_VAR 0 3
10802: PUSH
10803: LD_STRING 0
10805: ST_TO_ADDR
// if result [ 1 ] then
10806: LD_VAR 0 2
10810: PUSH
10811: LD_INT 1
10813: ARRAY
10814: IFFALSE 10879
// if result [ 1 ] [ 1 ] = i then
10816: LD_VAR 0 2
10820: PUSH
10821: LD_INT 1
10823: ARRAY
10824: PUSH
10825: LD_INT 1
10827: ARRAY
10828: PUSH
10829: LD_VAR 0 8
10833: EQUAL
10834: IFFALSE 10879
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_VAR 0 2
10845: PPUSH
10846: LD_INT 1
10848: PPUSH
10849: LD_VAR 0 2
10853: PUSH
10854: LD_INT 1
10856: ARRAY
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 3
10865: PPUSH
10866: CALL_OW 1
10870: ST_TO_ADDR
// tmp := 1 ;
10871: LD_ADDR_VAR 0 3
10875: PUSH
10876: LD_STRING 1
10878: ST_TO_ADDR
// end ; normal := normal & tmp ;
10879: LD_ADDR_VAR 0 5
10883: PUSH
10884: LD_VAR 0 5
10888: PUSH
10889: LD_VAR 0 3
10893: STR
10894: ST_TO_ADDR
// end ;
10895: GO 10795
10897: POP
10898: POP
// for i = 1 to hardcoreCounter do
10899: LD_ADDR_VAR 0 8
10903: PUSH
10904: DOUBLE
10905: LD_INT 1
10907: DEC
10908: ST_TO_ADDR
10909: LD_EXP 28
10913: PUSH
10914: FOR_TO
10915: IFFALSE 11020
// begin tmp := 0 ;
10917: LD_ADDR_VAR 0 3
10921: PUSH
10922: LD_STRING 0
10924: ST_TO_ADDR
// if result [ 2 ] then
10925: LD_VAR 0 2
10929: PUSH
10930: LD_INT 2
10932: ARRAY
10933: IFFALSE 11002
// if result [ 2 ] [ 1 ] = 100 + i then
10935: LD_VAR 0 2
10939: PUSH
10940: LD_INT 2
10942: ARRAY
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: PUSH
10948: LD_INT 100
10950: PUSH
10951: LD_VAR 0 8
10955: PLUS
10956: EQUAL
10957: IFFALSE 11002
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10959: LD_ADDR_VAR 0 2
10963: PUSH
10964: LD_VAR 0 2
10968: PPUSH
10969: LD_INT 2
10971: PPUSH
10972: LD_VAR 0 2
10976: PUSH
10977: LD_INT 2
10979: ARRAY
10980: PPUSH
10981: LD_INT 1
10983: PPUSH
10984: CALL_OW 3
10988: PPUSH
10989: CALL_OW 1
10993: ST_TO_ADDR
// tmp := 1 ;
10994: LD_ADDR_VAR 0 3
10998: PUSH
10999: LD_STRING 1
11001: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11002: LD_ADDR_VAR 0 6
11006: PUSH
11007: LD_VAR 0 6
11011: PUSH
11012: LD_VAR 0 3
11016: STR
11017: ST_TO_ADDR
// end ;
11018: GO 10914
11020: POP
11021: POP
// if isGameLoad then
11022: LD_VAR 0 1
11026: IFFALSE 11501
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11028: LD_ADDR_VAR 0 4
11032: PUSH
11033: LD_EXP 31
11037: PUSH
11038: LD_EXP 30
11042: PUSH
11043: LD_EXP 32
11047: PUSH
11048: LD_EXP 29
11052: PUSH
11053: LD_EXP 33
11057: PUSH
11058: LD_EXP 34
11062: PUSH
11063: LD_EXP 35
11067: PUSH
11068: LD_EXP 36
11072: PUSH
11073: LD_EXP 37
11077: PUSH
11078: LD_EXP 38
11082: PUSH
11083: LD_EXP 39
11087: PUSH
11088: LD_EXP 40
11092: PUSH
11093: LD_EXP 41
11097: PUSH
11098: LD_EXP 42
11102: PUSH
11103: LD_EXP 50
11107: PUSH
11108: LD_EXP 51
11112: PUSH
11113: LD_EXP 52
11117: PUSH
11118: LD_EXP 53
11122: PUSH
11123: LD_EXP 55
11127: PUSH
11128: LD_EXP 56
11132: PUSH
11133: LD_EXP 57
11137: PUSH
11138: LD_EXP 60
11142: PUSH
11143: LD_EXP 62
11147: PUSH
11148: LD_EXP 63
11152: PUSH
11153: LD_EXP 64
11157: PUSH
11158: LD_EXP 66
11162: PUSH
11163: LD_EXP 67
11167: PUSH
11168: LD_EXP 70
11172: PUSH
11173: LD_EXP 71
11177: PUSH
11178: LD_EXP 72
11182: PUSH
11183: LD_EXP 73
11187: PUSH
11188: LD_EXP 74
11192: PUSH
11193: LD_EXP 75
11197: PUSH
11198: LD_EXP 76
11202: PUSH
11203: LD_EXP 77
11207: PUSH
11208: LD_EXP 78
11212: PUSH
11213: LD_EXP 43
11217: PUSH
11218: LD_EXP 44
11222: PUSH
11223: LD_EXP 47
11227: PUSH
11228: LD_EXP 48
11232: PUSH
11233: LD_EXP 49
11237: PUSH
11238: LD_EXP 45
11242: PUSH
11243: LD_EXP 46
11247: PUSH
11248: LD_EXP 54
11252: PUSH
11253: LD_EXP 58
11257: PUSH
11258: LD_EXP 59
11262: PUSH
11263: LD_EXP 61
11267: PUSH
11268: LD_EXP 65
11272: PUSH
11273: LD_EXP 68
11277: PUSH
11278: LD_EXP 69
11282: PUSH
11283: LD_EXP 79
11287: PUSH
11288: LD_EXP 80
11292: PUSH
11293: LD_EXP 81
11297: PUSH
11298: LD_EXP 82
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: ST_TO_ADDR
// tmp :=  ;
11359: LD_ADDR_VAR 0 3
11363: PUSH
11364: LD_STRING 
11366: ST_TO_ADDR
// for i = 1 to normalCounter do
11367: LD_ADDR_VAR 0 8
11371: PUSH
11372: DOUBLE
11373: LD_INT 1
11375: DEC
11376: ST_TO_ADDR
11377: LD_EXP 27
11381: PUSH
11382: FOR_TO
11383: IFFALSE 11419
// begin if flags [ i ] then
11385: LD_VAR 0 4
11389: PUSH
11390: LD_VAR 0 8
11394: ARRAY
11395: IFFALSE 11417
// tmp := tmp & i & ; ;
11397: LD_ADDR_VAR 0 3
11401: PUSH
11402: LD_VAR 0 3
11406: PUSH
11407: LD_VAR 0 8
11411: STR
11412: PUSH
11413: LD_STRING ;
11415: STR
11416: ST_TO_ADDR
// end ;
11417: GO 11382
11419: POP
11420: POP
// for i = 1 to hardcoreCounter do
11421: LD_ADDR_VAR 0 8
11425: PUSH
11426: DOUBLE
11427: LD_INT 1
11429: DEC
11430: ST_TO_ADDR
11431: LD_EXP 28
11435: PUSH
11436: FOR_TO
11437: IFFALSE 11483
// begin if flags [ normalCounter + i ] then
11439: LD_VAR 0 4
11443: PUSH
11444: LD_EXP 27
11448: PUSH
11449: LD_VAR 0 8
11453: PLUS
11454: ARRAY
11455: IFFALSE 11481
// tmp := tmp & ( 100 + i ) & ; ;
11457: LD_ADDR_VAR 0 3
11461: PUSH
11462: LD_VAR 0 3
11466: PUSH
11467: LD_INT 100
11469: PUSH
11470: LD_VAR 0 8
11474: PLUS
11475: STR
11476: PUSH
11477: LD_STRING ;
11479: STR
11480: ST_TO_ADDR
// end ;
11481: GO 11436
11483: POP
11484: POP
// if tmp then
11485: LD_VAR 0 3
11489: IFFALSE 11501
// active := tmp ;
11491: LD_ADDR_VAR 0 7
11495: PUSH
11496: LD_VAR 0 3
11500: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11501: LD_STRING getStreamItemsFromMission("
11503: PUSH
11504: LD_VAR 0 5
11508: STR
11509: PUSH
11510: LD_STRING ","
11512: STR
11513: PUSH
11514: LD_VAR 0 6
11518: STR
11519: PUSH
11520: LD_STRING ","
11522: STR
11523: PUSH
11524: LD_VAR 0 7
11528: STR
11529: PUSH
11530: LD_STRING ")
11532: STR
11533: PPUSH
11534: CALL_OW 559
// end else
11538: GO 11547
// ToLua ( getStreamItemsFromMission("","","") ) ;
11540: LD_STRING getStreamItemsFromMission("","","")
11542: PPUSH
11543: CALL_OW 559
// end ;
11547: LD_VAR 0 2
11551: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11552: LD_EXP 26
11556: PUSH
11557: LD_EXP 31
11561: AND
11562: IFFALSE 11686
11564: GO 11566
11566: DISABLE
11567: LD_INT 0
11569: PPUSH
11570: PPUSH
// begin enable ;
11571: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11572: LD_ADDR_VAR 0 2
11576: PUSH
11577: LD_INT 22
11579: PUSH
11580: LD_OWVAR 2
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 2
11591: PUSH
11592: LD_INT 34
11594: PUSH
11595: LD_INT 7
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 34
11604: PUSH
11605: LD_INT 45
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 34
11614: PUSH
11615: LD_INT 28
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 34
11624: PUSH
11625: LD_INT 47
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: ST_TO_ADDR
// if not tmp then
11648: LD_VAR 0 2
11652: NOT
11653: IFFALSE 11657
// exit ;
11655: GO 11686
// for i in tmp do
11657: LD_ADDR_VAR 0 1
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: FOR_IN
11668: IFFALSE 11684
// begin SetLives ( i , 0 ) ;
11670: LD_VAR 0 1
11674: PPUSH
11675: LD_INT 0
11677: PPUSH
11678: CALL_OW 234
// end ;
11682: GO 11667
11684: POP
11685: POP
// end ;
11686: PPOPN 2
11688: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11689: LD_EXP 26
11693: PUSH
11694: LD_EXP 32
11698: AND
11699: IFFALSE 11783
11701: GO 11703
11703: DISABLE
11704: LD_INT 0
11706: PPUSH
11707: PPUSH
// begin enable ;
11708: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11709: LD_ADDR_VAR 0 2
11713: PUSH
11714: LD_INT 22
11716: PUSH
11717: LD_OWVAR 2
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 32
11728: PUSH
11729: LD_INT 3
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PPUSH
11740: CALL_OW 69
11744: ST_TO_ADDR
// if not tmp then
11745: LD_VAR 0 2
11749: NOT
11750: IFFALSE 11754
// exit ;
11752: GO 11783
// for i in tmp do
11754: LD_ADDR_VAR 0 1
11758: PUSH
11759: LD_VAR 0 2
11763: PUSH
11764: FOR_IN
11765: IFFALSE 11781
// begin SetLives ( i , 0 ) ;
11767: LD_VAR 0 1
11771: PPUSH
11772: LD_INT 0
11774: PPUSH
11775: CALL_OW 234
// end ;
11779: GO 11764
11781: POP
11782: POP
// end ;
11783: PPOPN 2
11785: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11786: LD_EXP 26
11790: PUSH
11791: LD_EXP 29
11795: AND
11796: IFFALSE 11889
11798: GO 11800
11800: DISABLE
11801: LD_INT 0
11803: PPUSH
// begin enable ;
11804: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11805: LD_ADDR_VAR 0 1
11809: PUSH
11810: LD_INT 22
11812: PUSH
11813: LD_OWVAR 2
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 2
11824: PUSH
11825: LD_INT 25
11827: PUSH
11828: LD_INT 5
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 25
11837: PUSH
11838: LD_INT 9
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: LD_INT 25
11847: PUSH
11848: LD_INT 8
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PPUSH
11865: CALL_OW 69
11869: PUSH
11870: FOR_IN
11871: IFFALSE 11887
// begin SetClass ( i , 1 ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: CALL_OW 336
// end ;
11885: GO 11870
11887: POP
11888: POP
// end ;
11889: PPOPN 1
11891: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11892: LD_EXP 26
11896: PUSH
11897: LD_EXP 30
11901: AND
11902: PUSH
11903: LD_OWVAR 65
11907: PUSH
11908: LD_INT 7
11910: LESS
11911: AND
11912: IFFALSE 11926
11914: GO 11916
11916: DISABLE
// begin enable ;
11917: ENABLE
// game_speed := 7 ;
11918: LD_ADDR_OWVAR 65
11922: PUSH
11923: LD_INT 7
11925: ST_TO_ADDR
// end ;
11926: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11927: LD_EXP 26
11931: PUSH
11932: LD_EXP 33
11936: AND
11937: IFFALSE 12139
11939: GO 11941
11941: DISABLE
11942: LD_INT 0
11944: PPUSH
11945: PPUSH
11946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11947: LD_ADDR_VAR 0 3
11951: PUSH
11952: LD_INT 81
11954: PUSH
11955: LD_OWVAR 2
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 21
11966: PUSH
11967: LD_INT 1
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PPUSH
11978: CALL_OW 69
11982: ST_TO_ADDR
// if not tmp then
11983: LD_VAR 0 3
11987: NOT
11988: IFFALSE 11992
// exit ;
11990: GO 12139
// if tmp > 5 then
11992: LD_VAR 0 3
11996: PUSH
11997: LD_INT 5
11999: GREATER
12000: IFFALSE 12012
// k := 5 else
12002: LD_ADDR_VAR 0 2
12006: PUSH
12007: LD_INT 5
12009: ST_TO_ADDR
12010: GO 12022
// k := tmp ;
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_VAR 0 3
12021: ST_TO_ADDR
// for i := 1 to k do
12022: LD_ADDR_VAR 0 1
12026: PUSH
12027: DOUBLE
12028: LD_INT 1
12030: DEC
12031: ST_TO_ADDR
12032: LD_VAR 0 2
12036: PUSH
12037: FOR_TO
12038: IFFALSE 12137
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12040: LD_VAR 0 3
12044: PUSH
12045: LD_VAR 0 1
12049: ARRAY
12050: PPUSH
12051: LD_VAR 0 1
12055: PUSH
12056: LD_INT 4
12058: MOD
12059: PUSH
12060: LD_INT 1
12062: PLUS
12063: PPUSH
12064: CALL_OW 259
12068: PUSH
12069: LD_INT 10
12071: LESS
12072: IFFALSE 12135
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12074: LD_VAR 0 3
12078: PUSH
12079: LD_VAR 0 1
12083: ARRAY
12084: PPUSH
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 4
12092: MOD
12093: PUSH
12094: LD_INT 1
12096: PLUS
12097: PPUSH
12098: LD_VAR 0 3
12102: PUSH
12103: LD_VAR 0 1
12107: ARRAY
12108: PPUSH
12109: LD_VAR 0 1
12113: PUSH
12114: LD_INT 4
12116: MOD
12117: PUSH
12118: LD_INT 1
12120: PLUS
12121: PPUSH
12122: CALL_OW 259
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: CALL_OW 237
12135: GO 12037
12137: POP
12138: POP
// end ;
12139: PPOPN 3
12141: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12142: LD_EXP 26
12146: PUSH
12147: LD_EXP 34
12151: AND
12152: IFFALSE 12172
12154: GO 12156
12156: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12157: LD_INT 4
12159: PPUSH
12160: LD_OWVAR 2
12164: PPUSH
12165: LD_INT 0
12167: PPUSH
12168: CALL_OW 324
12172: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12173: LD_EXP 26
12177: PUSH
12178: LD_EXP 63
12182: AND
12183: IFFALSE 12203
12185: GO 12187
12187: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12188: LD_INT 19
12190: PPUSH
12191: LD_OWVAR 2
12195: PPUSH
12196: LD_INT 0
12198: PPUSH
12199: CALL_OW 324
12203: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12204: LD_EXP 26
12208: PUSH
12209: LD_EXP 35
12213: AND
12214: IFFALSE 12316
12216: GO 12218
12218: DISABLE
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
// begin enable ;
12223: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12224: LD_ADDR_VAR 0 2
12228: PUSH
12229: LD_INT 22
12231: PUSH
12232: LD_OWVAR 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 2
12243: PUSH
12244: LD_INT 34
12246: PUSH
12247: LD_INT 11
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 34
12256: PUSH
12257: LD_INT 30
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PPUSH
12273: CALL_OW 69
12277: ST_TO_ADDR
// if not tmp then
12278: LD_VAR 0 2
12282: NOT
12283: IFFALSE 12287
// exit ;
12285: GO 12316
// for i in tmp do
12287: LD_ADDR_VAR 0 1
12291: PUSH
12292: LD_VAR 0 2
12296: PUSH
12297: FOR_IN
12298: IFFALSE 12314
// begin SetLives ( i , 0 ) ;
12300: LD_VAR 0 1
12304: PPUSH
12305: LD_INT 0
12307: PPUSH
12308: CALL_OW 234
// end ;
12312: GO 12297
12314: POP
12315: POP
// end ;
12316: PPOPN 2
12318: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12319: LD_EXP 26
12323: PUSH
12324: LD_EXP 36
12328: AND
12329: IFFALSE 12349
12331: GO 12333
12333: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12334: LD_INT 32
12336: PPUSH
12337: LD_OWVAR 2
12341: PPUSH
12342: LD_INT 0
12344: PPUSH
12345: CALL_OW 324
12349: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12350: LD_EXP 26
12354: PUSH
12355: LD_EXP 37
12359: AND
12360: IFFALSE 12541
12362: GO 12364
12364: DISABLE
12365: LD_INT 0
12367: PPUSH
12368: PPUSH
12369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12370: LD_ADDR_VAR 0 2
12374: PUSH
12375: LD_INT 22
12377: PUSH
12378: LD_OWVAR 2
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 33
12389: PUSH
12390: LD_INT 3
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: ST_TO_ADDR
// if not tmp then
12406: LD_VAR 0 2
12410: NOT
12411: IFFALSE 12415
// exit ;
12413: GO 12541
// side := 0 ;
12415: LD_ADDR_VAR 0 3
12419: PUSH
12420: LD_INT 0
12422: ST_TO_ADDR
// for i := 1 to 8 do
12423: LD_ADDR_VAR 0 1
12427: PUSH
12428: DOUBLE
12429: LD_INT 1
12431: DEC
12432: ST_TO_ADDR
12433: LD_INT 8
12435: PUSH
12436: FOR_TO
12437: IFFALSE 12485
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12439: LD_OWVAR 2
12443: PUSH
12444: LD_VAR 0 1
12448: NONEQUAL
12449: PUSH
12450: LD_OWVAR 2
12454: PPUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 81
12464: PUSH
12465: LD_INT 2
12467: EQUAL
12468: AND
12469: IFFALSE 12483
// begin side := i ;
12471: LD_ADDR_VAR 0 3
12475: PUSH
12476: LD_VAR 0 1
12480: ST_TO_ADDR
// break ;
12481: GO 12485
// end ;
12483: GO 12436
12485: POP
12486: POP
// if not side then
12487: LD_VAR 0 3
12491: NOT
12492: IFFALSE 12496
// exit ;
12494: GO 12541
// for i := 1 to tmp do
12496: LD_ADDR_VAR 0 1
12500: PUSH
12501: DOUBLE
12502: LD_INT 1
12504: DEC
12505: ST_TO_ADDR
12506: LD_VAR 0 2
12510: PUSH
12511: FOR_TO
12512: IFFALSE 12539
// if Prob ( 60 ) then
12514: LD_INT 60
12516: PPUSH
12517: CALL_OW 13
12521: IFFALSE 12537
// SetSide ( i , side ) ;
12523: LD_VAR 0 1
12527: PPUSH
12528: LD_VAR 0 3
12532: PPUSH
12533: CALL_OW 235
12537: GO 12511
12539: POP
12540: POP
// end ;
12541: PPOPN 3
12543: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12544: LD_EXP 26
12548: PUSH
12549: LD_EXP 39
12553: AND
12554: IFFALSE 12673
12556: GO 12558
12558: DISABLE
12559: LD_INT 0
12561: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12562: LD_ADDR_VAR 0 1
12566: PUSH
12567: LD_INT 22
12569: PUSH
12570: LD_OWVAR 2
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 21
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 3
12591: PUSH
12592: LD_INT 23
12594: PUSH
12595: LD_INT 0
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: PPUSH
12611: CALL_OW 69
12615: PUSH
12616: FOR_IN
12617: IFFALSE 12671
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12619: LD_VAR 0 1
12623: PPUSH
12624: CALL_OW 257
12628: PUSH
12629: LD_INT 1
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: LD_INT 3
12637: PUSH
12638: LD_INT 4
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: IN
12647: IFFALSE 12669
// SetClass ( un , rand ( 1 , 4 ) ) ;
12649: LD_VAR 0 1
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: LD_INT 4
12659: PPUSH
12660: CALL_OW 12
12664: PPUSH
12665: CALL_OW 336
12669: GO 12616
12671: POP
12672: POP
// end ;
12673: PPOPN 1
12675: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12676: LD_EXP 26
12680: PUSH
12681: LD_EXP 38
12685: AND
12686: IFFALSE 12765
12688: GO 12690
12690: DISABLE
12691: LD_INT 0
12693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12694: LD_ADDR_VAR 0 1
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_OWVAR 2
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 21
12713: PUSH
12714: LD_INT 3
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PPUSH
12725: CALL_OW 69
12729: ST_TO_ADDR
// if not tmp then
12730: LD_VAR 0 1
12734: NOT
12735: IFFALSE 12739
// exit ;
12737: GO 12765
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12739: LD_VAR 0 1
12743: PUSH
12744: LD_INT 1
12746: PPUSH
12747: LD_VAR 0 1
12751: PPUSH
12752: CALL_OW 12
12756: ARRAY
12757: PPUSH
12758: LD_INT 100
12760: PPUSH
12761: CALL_OW 234
// end ;
12765: PPOPN 1
12767: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12768: LD_EXP 26
12772: PUSH
12773: LD_EXP 40
12777: AND
12778: IFFALSE 12876
12780: GO 12782
12782: DISABLE
12783: LD_INT 0
12785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12786: LD_ADDR_VAR 0 1
12790: PUSH
12791: LD_INT 22
12793: PUSH
12794: LD_OWVAR 2
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 21
12805: PUSH
12806: LD_INT 1
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: ST_TO_ADDR
// if not tmp then
12822: LD_VAR 0 1
12826: NOT
12827: IFFALSE 12831
// exit ;
12829: GO 12876
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12831: LD_VAR 0 1
12835: PUSH
12836: LD_INT 1
12838: PPUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 12
12848: ARRAY
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: LD_INT 4
12855: PPUSH
12856: CALL_OW 12
12860: PPUSH
12861: LD_INT 3000
12863: PPUSH
12864: LD_INT 9000
12866: PPUSH
12867: CALL_OW 12
12871: PPUSH
12872: CALL_OW 492
// end ;
12876: PPOPN 1
12878: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12879: LD_EXP 26
12883: PUSH
12884: LD_EXP 41
12888: AND
12889: IFFALSE 12909
12891: GO 12893
12893: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12894: LD_INT 1
12896: PPUSH
12897: LD_OWVAR 2
12901: PPUSH
12902: LD_INT 0
12904: PPUSH
12905: CALL_OW 324
12909: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12910: LD_EXP 26
12914: PUSH
12915: LD_EXP 42
12919: AND
12920: IFFALSE 13003
12922: GO 12924
12924: DISABLE
12925: LD_INT 0
12927: PPUSH
12928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_OWVAR 2
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 21
12948: PUSH
12949: LD_INT 3
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 69
12964: ST_TO_ADDR
// if not tmp then
12965: LD_VAR 0 2
12969: NOT
12970: IFFALSE 12974
// exit ;
12972: GO 13003
// for i in tmp do
12974: LD_ADDR_VAR 0 1
12978: PUSH
12979: LD_VAR 0 2
12983: PUSH
12984: FOR_IN
12985: IFFALSE 13001
// SetBLevel ( i , 10 ) ;
12987: LD_VAR 0 1
12991: PPUSH
12992: LD_INT 10
12994: PPUSH
12995: CALL_OW 241
12999: GO 12984
13001: POP
13002: POP
// end ;
13003: PPOPN 2
13005: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13006: LD_EXP 26
13010: PUSH
13011: LD_EXP 43
13015: AND
13016: IFFALSE 13127
13018: GO 13020
13020: DISABLE
13021: LD_INT 0
13023: PPUSH
13024: PPUSH
13025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: LD_INT 22
13033: PUSH
13034: LD_OWVAR 2
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 25
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PPUSH
13057: CALL_OW 69
13061: ST_TO_ADDR
// if not tmp then
13062: LD_VAR 0 3
13066: NOT
13067: IFFALSE 13071
// exit ;
13069: GO 13127
// un := tmp [ rand ( 1 , tmp ) ] ;
13071: LD_ADDR_VAR 0 2
13075: PUSH
13076: LD_VAR 0 3
13080: PUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_VAR 0 3
13088: PPUSH
13089: CALL_OW 12
13093: ARRAY
13094: ST_TO_ADDR
// if Crawls ( un ) then
13095: LD_VAR 0 2
13099: PPUSH
13100: CALL_OW 318
13104: IFFALSE 13115
// ComWalk ( un ) ;
13106: LD_VAR 0 2
13110: PPUSH
13111: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13115: LD_VAR 0 2
13119: PPUSH
13120: LD_INT 5
13122: PPUSH
13123: CALL_OW 336
// end ;
13127: PPOPN 3
13129: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13130: LD_EXP 26
13134: PUSH
13135: LD_EXP 44
13139: AND
13140: PUSH
13141: LD_OWVAR 67
13145: PUSH
13146: LD_INT 4
13148: LESS
13149: AND
13150: IFFALSE 13169
13152: GO 13154
13154: DISABLE
// begin Difficulty := Difficulty + 1 ;
13155: LD_ADDR_OWVAR 67
13159: PUSH
13160: LD_OWVAR 67
13164: PUSH
13165: LD_INT 1
13167: PLUS
13168: ST_TO_ADDR
// end ;
13169: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13170: LD_EXP 26
13174: PUSH
13175: LD_EXP 45
13179: AND
13180: IFFALSE 13283
13182: GO 13184
13184: DISABLE
13185: LD_INT 0
13187: PPUSH
// begin for i := 1 to 5 do
13188: LD_ADDR_VAR 0 1
13192: PUSH
13193: DOUBLE
13194: LD_INT 1
13196: DEC
13197: ST_TO_ADDR
13198: LD_INT 5
13200: PUSH
13201: FOR_TO
13202: IFFALSE 13281
// begin uc_nation := nation_nature ;
13204: LD_ADDR_OWVAR 21
13208: PUSH
13209: LD_INT 0
13211: ST_TO_ADDR
// uc_side := 0 ;
13212: LD_ADDR_OWVAR 20
13216: PUSH
13217: LD_INT 0
13219: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13220: LD_ADDR_OWVAR 29
13224: PUSH
13225: LD_INT 12
13227: PUSH
13228: LD_INT 12
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: ST_TO_ADDR
// hc_agressivity := 20 ;
13235: LD_ADDR_OWVAR 35
13239: PUSH
13240: LD_INT 20
13242: ST_TO_ADDR
// hc_class := class_tiger ;
13243: LD_ADDR_OWVAR 28
13247: PUSH
13248: LD_INT 14
13250: ST_TO_ADDR
// hc_gallery :=  ;
13251: LD_ADDR_OWVAR 33
13255: PUSH
13256: LD_STRING 
13258: ST_TO_ADDR
// hc_name :=  ;
13259: LD_ADDR_OWVAR 26
13263: PUSH
13264: LD_STRING 
13266: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13267: CALL_OW 44
13271: PPUSH
13272: LD_INT 0
13274: PPUSH
13275: CALL_OW 51
// end ;
13279: GO 13201
13281: POP
13282: POP
// end ;
13283: PPOPN 1
13285: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13286: LD_EXP 26
13290: PUSH
13291: LD_EXP 46
13295: AND
13296: IFFALSE 13305
13298: GO 13300
13300: DISABLE
// StreamSibBomb ;
13301: CALL 13306 0 0
13305: END
// export function StreamSibBomb ; var i , x , y ; begin
13306: LD_INT 0
13308: PPUSH
13309: PPUSH
13310: PPUSH
13311: PPUSH
// result := false ;
13312: LD_ADDR_VAR 0 1
13316: PUSH
13317: LD_INT 0
13319: ST_TO_ADDR
// for i := 1 to 16 do
13320: LD_ADDR_VAR 0 2
13324: PUSH
13325: DOUBLE
13326: LD_INT 1
13328: DEC
13329: ST_TO_ADDR
13330: LD_INT 16
13332: PUSH
13333: FOR_TO
13334: IFFALSE 13533
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13336: LD_ADDR_VAR 0 3
13340: PUSH
13341: LD_INT 10
13343: PUSH
13344: LD_INT 20
13346: PUSH
13347: LD_INT 30
13349: PUSH
13350: LD_INT 40
13352: PUSH
13353: LD_INT 50
13355: PUSH
13356: LD_INT 60
13358: PUSH
13359: LD_INT 70
13361: PUSH
13362: LD_INT 80
13364: PUSH
13365: LD_INT 90
13367: PUSH
13368: LD_INT 100
13370: PUSH
13371: LD_INT 110
13373: PUSH
13374: LD_INT 120
13376: PUSH
13377: LD_INT 130
13379: PUSH
13380: LD_INT 140
13382: PUSH
13383: LD_INT 150
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 1
13405: PPUSH
13406: LD_INT 15
13408: PPUSH
13409: CALL_OW 12
13413: ARRAY
13414: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13415: LD_ADDR_VAR 0 4
13419: PUSH
13420: LD_INT 10
13422: PUSH
13423: LD_INT 20
13425: PUSH
13426: LD_INT 30
13428: PUSH
13429: LD_INT 40
13431: PUSH
13432: LD_INT 50
13434: PUSH
13435: LD_INT 60
13437: PUSH
13438: LD_INT 70
13440: PUSH
13441: LD_INT 80
13443: PUSH
13444: LD_INT 90
13446: PUSH
13447: LD_INT 100
13449: PUSH
13450: LD_INT 110
13452: PUSH
13453: LD_INT 120
13455: PUSH
13456: LD_INT 130
13458: PUSH
13459: LD_INT 140
13461: PUSH
13462: LD_INT 150
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 1
13484: PPUSH
13485: LD_INT 15
13487: PPUSH
13488: CALL_OW 12
13492: ARRAY
13493: ST_TO_ADDR
// if ValidHex ( x , y ) then
13494: LD_VAR 0 3
13498: PPUSH
13499: LD_VAR 0 4
13503: PPUSH
13504: CALL_OW 488
13508: IFFALSE 13531
// begin result := [ x , y ] ;
13510: LD_ADDR_VAR 0 1
13514: PUSH
13515: LD_VAR 0 3
13519: PUSH
13520: LD_VAR 0 4
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: ST_TO_ADDR
// break ;
13529: GO 13533
// end ; end ;
13531: GO 13333
13533: POP
13534: POP
// if result then
13535: LD_VAR 0 1
13539: IFFALSE 13599
// begin ToLua ( playSibBomb() ) ;
13541: LD_STRING playSibBomb()
13543: PPUSH
13544: CALL_OW 559
// wait ( 0 0$14 ) ;
13548: LD_INT 490
13550: PPUSH
13551: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13555: LD_VAR 0 1
13559: PUSH
13560: LD_INT 1
13562: ARRAY
13563: PPUSH
13564: LD_VAR 0 1
13568: PUSH
13569: LD_INT 2
13571: ARRAY
13572: PPUSH
13573: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13577: LD_VAR 0 1
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: LD_VAR 0 1
13590: PUSH
13591: LD_INT 2
13593: ARRAY
13594: PPUSH
13595: CALL_OW 429
// end ; end ;
13599: LD_VAR 0 1
13603: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13604: LD_EXP 26
13608: PUSH
13609: LD_EXP 48
13613: AND
13614: IFFALSE 13626
13616: GO 13618
13618: DISABLE
// YouLost (  ) ;
13619: LD_STRING 
13621: PPUSH
13622: CALL_OW 104
13626: END
// every 0 0$1 trigger StreamModeActive and sFog do
13627: LD_EXP 26
13631: PUSH
13632: LD_EXP 47
13636: AND
13637: IFFALSE 13651
13639: GO 13641
13641: DISABLE
// FogOff ( your_side ) ;
13642: LD_OWVAR 2
13646: PPUSH
13647: CALL_OW 344
13651: END
// every 0 0$1 trigger StreamModeActive and sSun do
13652: LD_EXP 26
13656: PUSH
13657: LD_EXP 49
13661: AND
13662: IFFALSE 13690
13664: GO 13666
13666: DISABLE
// begin solar_recharge_percent := 0 ;
13667: LD_ADDR_OWVAR 79
13671: PUSH
13672: LD_INT 0
13674: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13675: LD_INT 10500
13677: PPUSH
13678: CALL_OW 67
// solar_recharge_percent := 100 ;
13682: LD_ADDR_OWVAR 79
13686: PUSH
13687: LD_INT 100
13689: ST_TO_ADDR
// end ;
13690: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13691: LD_EXP 26
13695: PUSH
13696: LD_EXP 50
13700: AND
13701: IFFALSE 13940
13703: GO 13705
13705: DISABLE
13706: LD_INT 0
13708: PPUSH
13709: PPUSH
13710: PPUSH
// begin tmp := [ ] ;
13711: LD_ADDR_VAR 0 3
13715: PUSH
13716: EMPTY
13717: ST_TO_ADDR
// for i := 1 to 6 do
13718: LD_ADDR_VAR 0 1
13722: PUSH
13723: DOUBLE
13724: LD_INT 1
13726: DEC
13727: ST_TO_ADDR
13728: LD_INT 6
13730: PUSH
13731: FOR_TO
13732: IFFALSE 13837
// begin uc_nation := nation_nature ;
13734: LD_ADDR_OWVAR 21
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// uc_side := 0 ;
13742: LD_ADDR_OWVAR 20
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13750: LD_ADDR_OWVAR 29
13754: PUSH
13755: LD_INT 12
13757: PUSH
13758: LD_INT 12
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: ST_TO_ADDR
// hc_agressivity := 20 ;
13765: LD_ADDR_OWVAR 35
13769: PUSH
13770: LD_INT 20
13772: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13773: LD_ADDR_OWVAR 28
13777: PUSH
13778: LD_INT 17
13780: ST_TO_ADDR
// hc_gallery :=  ;
13781: LD_ADDR_OWVAR 33
13785: PUSH
13786: LD_STRING 
13788: ST_TO_ADDR
// hc_name :=  ;
13789: LD_ADDR_OWVAR 26
13793: PUSH
13794: LD_STRING 
13796: ST_TO_ADDR
// un := CreateHuman ;
13797: LD_ADDR_VAR 0 2
13801: PUSH
13802: CALL_OW 44
13806: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13807: LD_VAR 0 2
13811: PPUSH
13812: LD_INT 1
13814: PPUSH
13815: CALL_OW 51
// tmp := tmp ^ un ;
13819: LD_ADDR_VAR 0 3
13823: PUSH
13824: LD_VAR 0 3
13828: PUSH
13829: LD_VAR 0 2
13833: ADD
13834: ST_TO_ADDR
// end ;
13835: GO 13731
13837: POP
13838: POP
// repeat wait ( 0 0$1 ) ;
13839: LD_INT 35
13841: PPUSH
13842: CALL_OW 67
// for un in tmp do
13846: LD_ADDR_VAR 0 2
13850: PUSH
13851: LD_VAR 0 3
13855: PUSH
13856: FOR_IN
13857: IFFALSE 13931
// begin if IsDead ( un ) then
13859: LD_VAR 0 2
13863: PPUSH
13864: CALL_OW 301
13868: IFFALSE 13888
// begin tmp := tmp diff un ;
13870: LD_ADDR_VAR 0 3
13874: PUSH
13875: LD_VAR 0 3
13879: PUSH
13880: LD_VAR 0 2
13884: DIFF
13885: ST_TO_ADDR
// continue ;
13886: GO 13856
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13888: LD_VAR 0 2
13892: PPUSH
13893: LD_INT 3
13895: PUSH
13896: LD_INT 22
13898: PUSH
13899: LD_INT 0
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PPUSH
13910: CALL_OW 69
13914: PPUSH
13915: LD_VAR 0 2
13919: PPUSH
13920: CALL_OW 74
13924: PPUSH
13925: CALL_OW 115
// end ;
13929: GO 13856
13931: POP
13932: POP
// until not tmp ;
13933: LD_VAR 0 3
13937: NOT
13938: IFFALSE 13839
// end ;
13940: PPOPN 3
13942: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13943: LD_EXP 26
13947: PUSH
13948: LD_EXP 51
13952: AND
13953: IFFALSE 14007
13955: GO 13957
13957: DISABLE
// begin ToLua ( displayTroll(); ) ;
13958: LD_STRING displayTroll();
13960: PPUSH
13961: CALL_OW 559
// wait ( 3 3$00 ) ;
13965: LD_INT 6300
13967: PPUSH
13968: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13972: LD_STRING hideTroll();
13974: PPUSH
13975: CALL_OW 559
// wait ( 1 1$00 ) ;
13979: LD_INT 2100
13981: PPUSH
13982: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13986: LD_STRING displayTroll();
13988: PPUSH
13989: CALL_OW 559
// wait ( 1 1$00 ) ;
13993: LD_INT 2100
13995: PPUSH
13996: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14000: LD_STRING hideTroll();
14002: PPUSH
14003: CALL_OW 559
// end ;
14007: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14008: LD_EXP 26
14012: PUSH
14013: LD_EXP 52
14017: AND
14018: IFFALSE 14081
14020: GO 14022
14022: DISABLE
14023: LD_INT 0
14025: PPUSH
// begin p := 0 ;
14026: LD_ADDR_VAR 0 1
14030: PUSH
14031: LD_INT 0
14033: ST_TO_ADDR
// repeat game_speed := 1 ;
14034: LD_ADDR_OWVAR 65
14038: PUSH
14039: LD_INT 1
14041: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14042: LD_INT 35
14044: PPUSH
14045: CALL_OW 67
// p := p + 1 ;
14049: LD_ADDR_VAR 0 1
14053: PUSH
14054: LD_VAR 0 1
14058: PUSH
14059: LD_INT 1
14061: PLUS
14062: ST_TO_ADDR
// until p >= 60 ;
14063: LD_VAR 0 1
14067: PUSH
14068: LD_INT 60
14070: GREATEREQUAL
14071: IFFALSE 14034
// game_speed := 4 ;
14073: LD_ADDR_OWVAR 65
14077: PUSH
14078: LD_INT 4
14080: ST_TO_ADDR
// end ;
14081: PPOPN 1
14083: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14084: LD_EXP 26
14088: PUSH
14089: LD_EXP 53
14093: AND
14094: IFFALSE 14240
14096: GO 14098
14098: DISABLE
14099: LD_INT 0
14101: PPUSH
14102: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14103: LD_ADDR_VAR 0 1
14107: PUSH
14108: LD_INT 22
14110: PUSH
14111: LD_OWVAR 2
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 2
14122: PUSH
14123: LD_INT 30
14125: PUSH
14126: LD_INT 0
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 30
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: ST_TO_ADDR
// if not depot then
14157: LD_VAR 0 1
14161: NOT
14162: IFFALSE 14166
// exit ;
14164: GO 14240
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14166: LD_ADDR_VAR 0 2
14170: PUSH
14171: LD_VAR 0 1
14175: PUSH
14176: LD_INT 1
14178: PPUSH
14179: LD_VAR 0 1
14183: PPUSH
14184: CALL_OW 12
14188: ARRAY
14189: PPUSH
14190: CALL_OW 274
14194: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14195: LD_VAR 0 2
14199: PPUSH
14200: LD_INT 1
14202: PPUSH
14203: LD_INT 0
14205: PPUSH
14206: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14210: LD_VAR 0 2
14214: PPUSH
14215: LD_INT 2
14217: PPUSH
14218: LD_INT 0
14220: PPUSH
14221: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14225: LD_VAR 0 2
14229: PPUSH
14230: LD_INT 3
14232: PPUSH
14233: LD_INT 0
14235: PPUSH
14236: CALL_OW 277
// end ;
14240: PPOPN 2
14242: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14243: LD_EXP 26
14247: PUSH
14248: LD_EXP 54
14252: AND
14253: IFFALSE 14350
14255: GO 14257
14257: DISABLE
14258: LD_INT 0
14260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14261: LD_ADDR_VAR 0 1
14265: PUSH
14266: LD_INT 22
14268: PUSH
14269: LD_OWVAR 2
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 21
14280: PUSH
14281: LD_INT 1
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 3
14290: PUSH
14291: LD_INT 23
14293: PUSH
14294: LD_INT 0
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: ST_TO_ADDR
// if not tmp then
14315: LD_VAR 0 1
14319: NOT
14320: IFFALSE 14324
// exit ;
14322: GO 14350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14324: LD_VAR 0 1
14328: PUSH
14329: LD_INT 1
14331: PPUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 12
14341: ARRAY
14342: PPUSH
14343: LD_INT 200
14345: PPUSH
14346: CALL_OW 234
// end ;
14350: PPOPN 1
14352: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14353: LD_EXP 26
14357: PUSH
14358: LD_EXP 55
14362: AND
14363: IFFALSE 14442
14365: GO 14367
14367: DISABLE
14368: LD_INT 0
14370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14371: LD_ADDR_VAR 0 1
14375: PUSH
14376: LD_INT 22
14378: PUSH
14379: LD_OWVAR 2
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 2
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 69
14406: ST_TO_ADDR
// if not tmp then
14407: LD_VAR 0 1
14411: NOT
14412: IFFALSE 14416
// exit ;
14414: GO 14442
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14416: LD_VAR 0 1
14420: PUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_VAR 0 1
14428: PPUSH
14429: CALL_OW 12
14433: ARRAY
14434: PPUSH
14435: LD_INT 60
14437: PPUSH
14438: CALL_OW 234
// end ;
14442: PPOPN 1
14444: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14445: LD_EXP 26
14449: PUSH
14450: LD_EXP 56
14454: AND
14455: IFFALSE 14554
14457: GO 14459
14459: DISABLE
14460: LD_INT 0
14462: PPUSH
14463: PPUSH
// begin enable ;
14464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14465: LD_ADDR_VAR 0 1
14469: PUSH
14470: LD_INT 22
14472: PUSH
14473: LD_OWVAR 2
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 61
14484: PUSH
14485: EMPTY
14486: LIST
14487: PUSH
14488: LD_INT 33
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: PPUSH
14503: CALL_OW 69
14507: ST_TO_ADDR
// if not tmp then
14508: LD_VAR 0 1
14512: NOT
14513: IFFALSE 14517
// exit ;
14515: GO 14554
// for i in tmp do
14517: LD_ADDR_VAR 0 2
14521: PUSH
14522: LD_VAR 0 1
14526: PUSH
14527: FOR_IN
14528: IFFALSE 14552
// if IsControledBy ( i ) then
14530: LD_VAR 0 2
14534: PPUSH
14535: CALL_OW 312
14539: IFFALSE 14550
// ComUnlink ( i ) ;
14541: LD_VAR 0 2
14545: PPUSH
14546: CALL_OW 136
14550: GO 14527
14552: POP
14553: POP
// end ;
14554: PPOPN 2
14556: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14557: LD_EXP 26
14561: PUSH
14562: LD_EXP 57
14566: AND
14567: IFFALSE 14707
14569: GO 14571
14571: DISABLE
14572: LD_INT 0
14574: PPUSH
14575: PPUSH
// begin ToLua ( displayPowell(); ) ;
14576: LD_STRING displayPowell();
14578: PPUSH
14579: CALL_OW 559
// uc_side := 0 ;
14583: LD_ADDR_OWVAR 20
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
// uc_nation := 2 ;
14591: LD_ADDR_OWVAR 21
14595: PUSH
14596: LD_INT 2
14598: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14599: LD_ADDR_OWVAR 37
14603: PUSH
14604: LD_INT 14
14606: ST_TO_ADDR
// vc_engine := engine_siberite ;
14607: LD_ADDR_OWVAR 39
14611: PUSH
14612: LD_INT 3
14614: ST_TO_ADDR
// vc_control := control_apeman ;
14615: LD_ADDR_OWVAR 38
14619: PUSH
14620: LD_INT 5
14622: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14623: LD_ADDR_OWVAR 40
14627: PUSH
14628: LD_INT 29
14630: ST_TO_ADDR
// un := CreateVehicle ;
14631: LD_ADDR_VAR 0 2
14635: PUSH
14636: CALL_OW 45
14640: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14641: LD_VAR 0 2
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14653: LD_INT 35
14655: PPUSH
14656: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14660: LD_VAR 0 2
14664: PPUSH
14665: LD_INT 22
14667: PUSH
14668: LD_OWVAR 2
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PPUSH
14677: CALL_OW 69
14681: PPUSH
14682: LD_VAR 0 2
14686: PPUSH
14687: CALL_OW 74
14691: PPUSH
14692: CALL_OW 115
// until IsDead ( un ) ;
14696: LD_VAR 0 2
14700: PPUSH
14701: CALL_OW 301
14705: IFFALSE 14653
// end ;
14707: PPOPN 2
14709: END
// every 0 0$1 trigger StreamModeActive and sStu do
14710: LD_EXP 26
14714: PUSH
14715: LD_EXP 65
14719: AND
14720: IFFALSE 14736
14722: GO 14724
14724: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14725: LD_STRING displayStucuk();
14727: PPUSH
14728: CALL_OW 559
// ResetFog ;
14732: CALL_OW 335
// end ;
14736: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14737: LD_EXP 26
14741: PUSH
14742: LD_EXP 58
14746: AND
14747: IFFALSE 14888
14749: GO 14751
14751: DISABLE
14752: LD_INT 0
14754: PPUSH
14755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14756: LD_ADDR_VAR 0 2
14760: PUSH
14761: LD_INT 22
14763: PUSH
14764: LD_OWVAR 2
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 21
14775: PUSH
14776: LD_INT 1
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PPUSH
14787: CALL_OW 69
14791: ST_TO_ADDR
// if not tmp then
14792: LD_VAR 0 2
14796: NOT
14797: IFFALSE 14801
// exit ;
14799: GO 14888
// un := tmp [ rand ( 1 , tmp ) ] ;
14801: LD_ADDR_VAR 0 1
14805: PUSH
14806: LD_VAR 0 2
14810: PUSH
14811: LD_INT 1
14813: PPUSH
14814: LD_VAR 0 2
14818: PPUSH
14819: CALL_OW 12
14823: ARRAY
14824: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14825: LD_VAR 0 1
14829: PPUSH
14830: LD_INT 0
14832: PPUSH
14833: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_OWVAR 3
14846: PUSH
14847: LD_VAR 0 1
14851: DIFF
14852: PPUSH
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 74
14862: PPUSH
14863: CALL_OW 115
// wait ( 0 0$20 ) ;
14867: LD_INT 700
14869: PPUSH
14870: CALL_OW 67
// SetSide ( un , your_side ) ;
14874: LD_VAR 0 1
14878: PPUSH
14879: LD_OWVAR 2
14883: PPUSH
14884: CALL_OW 235
// end ;
14888: PPOPN 2
14890: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14891: LD_EXP 26
14895: PUSH
14896: LD_EXP 59
14900: AND
14901: IFFALSE 15007
14903: GO 14905
14905: DISABLE
14906: LD_INT 0
14908: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14909: LD_ADDR_VAR 0 1
14913: PUSH
14914: LD_INT 22
14916: PUSH
14917: LD_OWVAR 2
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 2
14928: PUSH
14929: LD_INT 30
14931: PUSH
14932: LD_INT 0
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: LD_INT 30
14941: PUSH
14942: LD_INT 1
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PPUSH
14958: CALL_OW 69
14962: ST_TO_ADDR
// if not depot then
14963: LD_VAR 0 1
14967: NOT
14968: IFFALSE 14972
// exit ;
14970: GO 15007
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14972: LD_VAR 0 1
14976: PUSH
14977: LD_INT 1
14979: ARRAY
14980: PPUSH
14981: CALL_OW 250
14985: PPUSH
14986: LD_VAR 0 1
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: CALL_OW 251
14999: PPUSH
15000: LD_INT 70
15002: PPUSH
15003: CALL_OW 495
// end ;
15007: PPOPN 1
15009: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15010: LD_EXP 26
15014: PUSH
15015: LD_EXP 60
15019: AND
15020: IFFALSE 15231
15022: GO 15024
15024: DISABLE
15025: LD_INT 0
15027: PPUSH
15028: PPUSH
15029: PPUSH
15030: PPUSH
15031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15032: LD_ADDR_VAR 0 5
15036: PUSH
15037: LD_INT 22
15039: PUSH
15040: LD_OWVAR 2
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 21
15051: PUSH
15052: LD_INT 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 69
15067: ST_TO_ADDR
// if not tmp then
15068: LD_VAR 0 5
15072: NOT
15073: IFFALSE 15077
// exit ;
15075: GO 15231
// for i in tmp do
15077: LD_ADDR_VAR 0 1
15081: PUSH
15082: LD_VAR 0 5
15086: PUSH
15087: FOR_IN
15088: IFFALSE 15229
// begin d := rand ( 0 , 5 ) ;
15090: LD_ADDR_VAR 0 4
15094: PUSH
15095: LD_INT 0
15097: PPUSH
15098: LD_INT 5
15100: PPUSH
15101: CALL_OW 12
15105: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL_OW 250
15120: PPUSH
15121: LD_VAR 0 4
15125: PPUSH
15126: LD_INT 3
15128: PPUSH
15129: LD_INT 12
15131: PPUSH
15132: CALL_OW 12
15136: PPUSH
15137: CALL_OW 272
15141: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15142: LD_ADDR_VAR 0 3
15146: PUSH
15147: LD_VAR 0 1
15151: PPUSH
15152: CALL_OW 251
15156: PPUSH
15157: LD_VAR 0 4
15161: PPUSH
15162: LD_INT 3
15164: PPUSH
15165: LD_INT 12
15167: PPUSH
15168: CALL_OW 12
15172: PPUSH
15173: CALL_OW 273
15177: ST_TO_ADDR
// if ValidHex ( x , y ) then
15178: LD_VAR 0 2
15182: PPUSH
15183: LD_VAR 0 3
15187: PPUSH
15188: CALL_OW 488
15192: IFFALSE 15227
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15194: LD_VAR 0 1
15198: PPUSH
15199: LD_VAR 0 2
15203: PPUSH
15204: LD_VAR 0 3
15208: PPUSH
15209: LD_INT 3
15211: PPUSH
15212: LD_INT 6
15214: PPUSH
15215: CALL_OW 12
15219: PPUSH
15220: LD_INT 1
15222: PPUSH
15223: CALL_OW 483
// end ;
15227: GO 15087
15229: POP
15230: POP
// end ;
15231: PPOPN 5
15233: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15234: LD_EXP 26
15238: PUSH
15239: LD_EXP 61
15243: AND
15244: IFFALSE 15338
15246: GO 15248
15248: DISABLE
15249: LD_INT 0
15251: PPUSH
15252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15253: LD_ADDR_VAR 0 2
15257: PUSH
15258: LD_INT 22
15260: PUSH
15261: LD_OWVAR 2
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 32
15272: PUSH
15273: LD_INT 1
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 21
15282: PUSH
15283: LD_INT 2
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: PPUSH
15295: CALL_OW 69
15299: ST_TO_ADDR
// if not tmp then
15300: LD_VAR 0 2
15304: NOT
15305: IFFALSE 15309
// exit ;
15307: GO 15338
// for i in tmp do
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: LD_VAR 0 2
15318: PUSH
15319: FOR_IN
15320: IFFALSE 15336
// SetFuel ( i , 0 ) ;
15322: LD_VAR 0 1
15326: PPUSH
15327: LD_INT 0
15329: PPUSH
15330: CALL_OW 240
15334: GO 15319
15336: POP
15337: POP
// end ;
15338: PPOPN 2
15340: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15341: LD_EXP 26
15345: PUSH
15346: LD_EXP 62
15350: AND
15351: IFFALSE 15417
15353: GO 15355
15355: DISABLE
15356: LD_INT 0
15358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15359: LD_ADDR_VAR 0 1
15363: PUSH
15364: LD_INT 22
15366: PUSH
15367: LD_OWVAR 2
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 29
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PPUSH
15390: CALL_OW 69
15394: ST_TO_ADDR
// if not tmp then
15395: LD_VAR 0 1
15399: NOT
15400: IFFALSE 15404
// exit ;
15402: GO 15417
// DestroyUnit ( tmp [ 1 ] ) ;
15404: LD_VAR 0 1
15408: PUSH
15409: LD_INT 1
15411: ARRAY
15412: PPUSH
15413: CALL_OW 65
// end ;
15417: PPOPN 1
15419: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15420: LD_EXP 26
15424: PUSH
15425: LD_EXP 64
15429: AND
15430: IFFALSE 15559
15432: GO 15434
15434: DISABLE
15435: LD_INT 0
15437: PPUSH
// begin uc_side := 0 ;
15438: LD_ADDR_OWVAR 20
15442: PUSH
15443: LD_INT 0
15445: ST_TO_ADDR
// uc_nation := nation_arabian ;
15446: LD_ADDR_OWVAR 21
15450: PUSH
15451: LD_INT 2
15453: ST_TO_ADDR
// hc_gallery :=  ;
15454: LD_ADDR_OWVAR 33
15458: PUSH
15459: LD_STRING 
15461: ST_TO_ADDR
// hc_name :=  ;
15462: LD_ADDR_OWVAR 26
15466: PUSH
15467: LD_STRING 
15469: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15470: LD_INT 1
15472: PPUSH
15473: LD_INT 11
15475: PPUSH
15476: LD_INT 10
15478: PPUSH
15479: CALL_OW 380
// un := CreateHuman ;
15483: LD_ADDR_VAR 0 1
15487: PUSH
15488: CALL_OW 44
15492: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 1
15500: PPUSH
15501: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15505: LD_INT 35
15507: PPUSH
15508: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: LD_INT 22
15519: PUSH
15520: LD_OWVAR 2
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PPUSH
15529: CALL_OW 69
15533: PPUSH
15534: LD_VAR 0 1
15538: PPUSH
15539: CALL_OW 74
15543: PPUSH
15544: CALL_OW 115
// until IsDead ( un ) ;
15548: LD_VAR 0 1
15552: PPUSH
15553: CALL_OW 301
15557: IFFALSE 15505
// end ;
15559: PPOPN 1
15561: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15562: LD_EXP 26
15566: PUSH
15567: LD_EXP 66
15571: AND
15572: IFFALSE 15584
15574: GO 15576
15576: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15577: LD_STRING earthquake(getX(game), 0, 32)
15579: PPUSH
15580: CALL_OW 559
15584: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15585: LD_EXP 26
15589: PUSH
15590: LD_EXP 67
15594: AND
15595: IFFALSE 15686
15597: GO 15599
15599: DISABLE
15600: LD_INT 0
15602: PPUSH
// begin enable ;
15603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15604: LD_ADDR_VAR 0 1
15608: PUSH
15609: LD_INT 22
15611: PUSH
15612: LD_OWVAR 2
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 21
15623: PUSH
15624: LD_INT 2
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 33
15633: PUSH
15634: LD_INT 3
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 69
15650: ST_TO_ADDR
// if not tmp then
15651: LD_VAR 0 1
15655: NOT
15656: IFFALSE 15660
// exit ;
15658: GO 15686
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15660: LD_VAR 0 1
15664: PUSH
15665: LD_INT 1
15667: PPUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 12
15677: ARRAY
15678: PPUSH
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 234
// end ;
15686: PPOPN 1
15688: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15689: LD_EXP 26
15693: PUSH
15694: LD_EXP 68
15698: AND
15699: IFFALSE 15840
15701: GO 15703
15703: DISABLE
15704: LD_INT 0
15706: PPUSH
15707: PPUSH
15708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15709: LD_ADDR_VAR 0 3
15713: PUSH
15714: LD_INT 22
15716: PUSH
15717: LD_OWVAR 2
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 25
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: ST_TO_ADDR
// if not tmp then
15745: LD_VAR 0 3
15749: NOT
15750: IFFALSE 15754
// exit ;
15752: GO 15840
// un := tmp [ rand ( 1 , tmp ) ] ;
15754: LD_ADDR_VAR 0 2
15758: PUSH
15759: LD_VAR 0 3
15763: PUSH
15764: LD_INT 1
15766: PPUSH
15767: LD_VAR 0 3
15771: PPUSH
15772: CALL_OW 12
15776: ARRAY
15777: ST_TO_ADDR
// if Crawls ( un ) then
15778: LD_VAR 0 2
15782: PPUSH
15783: CALL_OW 318
15787: IFFALSE 15798
// ComWalk ( un ) ;
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15798: LD_VAR 0 2
15802: PPUSH
15803: LD_INT 9
15805: PPUSH
15806: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15810: LD_INT 28
15812: PPUSH
15813: LD_OWVAR 2
15817: PPUSH
15818: LD_INT 2
15820: PPUSH
15821: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15825: LD_INT 29
15827: PPUSH
15828: LD_OWVAR 2
15832: PPUSH
15833: LD_INT 2
15835: PPUSH
15836: CALL_OW 322
// end ;
15840: PPOPN 3
15842: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15843: LD_EXP 26
15847: PUSH
15848: LD_EXP 69
15852: AND
15853: IFFALSE 15964
15855: GO 15857
15857: DISABLE
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
15862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15863: LD_ADDR_VAR 0 3
15867: PUSH
15868: LD_INT 22
15870: PUSH
15871: LD_OWVAR 2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 25
15882: PUSH
15883: LD_INT 1
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 69
15898: ST_TO_ADDR
// if not tmp then
15899: LD_VAR 0 3
15903: NOT
15904: IFFALSE 15908
// exit ;
15906: GO 15964
// un := tmp [ rand ( 1 , tmp ) ] ;
15908: LD_ADDR_VAR 0 2
15912: PUSH
15913: LD_VAR 0 3
15917: PUSH
15918: LD_INT 1
15920: PPUSH
15921: LD_VAR 0 3
15925: PPUSH
15926: CALL_OW 12
15930: ARRAY
15931: ST_TO_ADDR
// if Crawls ( un ) then
15932: LD_VAR 0 2
15936: PPUSH
15937: CALL_OW 318
15941: IFFALSE 15952
// ComWalk ( un ) ;
15943: LD_VAR 0 2
15947: PPUSH
15948: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15952: LD_VAR 0 2
15956: PPUSH
15957: LD_INT 8
15959: PPUSH
15960: CALL_OW 336
// end ;
15964: PPOPN 3
15966: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15967: LD_EXP 26
15971: PUSH
15972: LD_EXP 70
15976: AND
15977: IFFALSE 16121
15979: GO 15981
15981: DISABLE
15982: LD_INT 0
15984: PPUSH
15985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: LD_INT 22
15993: PUSH
15994: LD_OWVAR 2
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 21
16005: PUSH
16006: LD_INT 2
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: LD_INT 34
16018: PUSH
16019: LD_INT 12
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 34
16028: PUSH
16029: LD_INT 51
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 34
16038: PUSH
16039: LD_INT 32
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: ST_TO_ADDR
// if not tmp then
16062: LD_VAR 0 2
16066: NOT
16067: IFFALSE 16071
// exit ;
16069: GO 16121
// for i in tmp do
16071: LD_ADDR_VAR 0 1
16075: PUSH
16076: LD_VAR 0 2
16080: PUSH
16081: FOR_IN
16082: IFFALSE 16119
// if GetCargo ( i , mat_artifact ) = 0 then
16084: LD_VAR 0 1
16088: PPUSH
16089: LD_INT 4
16091: PPUSH
16092: CALL_OW 289
16096: PUSH
16097: LD_INT 0
16099: EQUAL
16100: IFFALSE 16117
// SetCargo ( i , mat_siberit , 100 ) ;
16102: LD_VAR 0 1
16106: PPUSH
16107: LD_INT 3
16109: PPUSH
16110: LD_INT 100
16112: PPUSH
16113: CALL_OW 290
16117: GO 16081
16119: POP
16120: POP
// end ;
16121: PPOPN 2
16123: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16124: LD_EXP 26
16128: PUSH
16129: LD_EXP 71
16133: AND
16134: IFFALSE 16317
16136: GO 16138
16138: DISABLE
16139: LD_INT 0
16141: PPUSH
16142: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16143: LD_ADDR_VAR 0 2
16147: PUSH
16148: LD_INT 22
16150: PUSH
16151: LD_OWVAR 2
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PPUSH
16160: CALL_OW 69
16164: ST_TO_ADDR
// if not tmp then
16165: LD_VAR 0 2
16169: NOT
16170: IFFALSE 16174
// exit ;
16172: GO 16317
// for i := 1 to 2 do
16174: LD_ADDR_VAR 0 1
16178: PUSH
16179: DOUBLE
16180: LD_INT 1
16182: DEC
16183: ST_TO_ADDR
16184: LD_INT 2
16186: PUSH
16187: FOR_TO
16188: IFFALSE 16315
// begin uc_side := your_side ;
16190: LD_ADDR_OWVAR 20
16194: PUSH
16195: LD_OWVAR 2
16199: ST_TO_ADDR
// uc_nation := nation_american ;
16200: LD_ADDR_OWVAR 21
16204: PUSH
16205: LD_INT 1
16207: ST_TO_ADDR
// vc_chassis := us_morphling ;
16208: LD_ADDR_OWVAR 37
16212: PUSH
16213: LD_INT 5
16215: ST_TO_ADDR
// vc_engine := engine_siberite ;
16216: LD_ADDR_OWVAR 39
16220: PUSH
16221: LD_INT 3
16223: ST_TO_ADDR
// vc_control := control_computer ;
16224: LD_ADDR_OWVAR 38
16228: PUSH
16229: LD_INT 3
16231: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16232: LD_ADDR_OWVAR 40
16236: PUSH
16237: LD_INT 10
16239: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16240: LD_VAR 0 2
16244: PUSH
16245: LD_INT 1
16247: ARRAY
16248: PPUSH
16249: CALL_OW 310
16253: NOT
16254: IFFALSE 16301
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16256: CALL_OW 45
16260: PPUSH
16261: LD_VAR 0 2
16265: PUSH
16266: LD_INT 1
16268: ARRAY
16269: PPUSH
16270: CALL_OW 250
16274: PPUSH
16275: LD_VAR 0 2
16279: PUSH
16280: LD_INT 1
16282: ARRAY
16283: PPUSH
16284: CALL_OW 251
16288: PPUSH
16289: LD_INT 12
16291: PPUSH
16292: LD_INT 1
16294: PPUSH
16295: CALL_OW 50
16299: GO 16313
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16301: CALL_OW 45
16305: PPUSH
16306: LD_INT 1
16308: PPUSH
16309: CALL_OW 51
// end ;
16313: GO 16187
16315: POP
16316: POP
// end ;
16317: PPOPN 2
16319: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16320: LD_EXP 26
16324: PUSH
16325: LD_EXP 72
16329: AND
16330: IFFALSE 16552
16332: GO 16334
16334: DISABLE
16335: LD_INT 0
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
16342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16343: LD_ADDR_VAR 0 6
16347: PUSH
16348: LD_INT 22
16350: PUSH
16351: LD_OWVAR 2
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 21
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 3
16372: PUSH
16373: LD_INT 23
16375: PUSH
16376: LD_INT 0
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: LIST
16391: PPUSH
16392: CALL_OW 69
16396: ST_TO_ADDR
// if not tmp then
16397: LD_VAR 0 6
16401: NOT
16402: IFFALSE 16406
// exit ;
16404: GO 16552
// s1 := rand ( 1 , 4 ) ;
16406: LD_ADDR_VAR 0 2
16410: PUSH
16411: LD_INT 1
16413: PPUSH
16414: LD_INT 4
16416: PPUSH
16417: CALL_OW 12
16421: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16422: LD_ADDR_VAR 0 4
16426: PUSH
16427: LD_VAR 0 6
16431: PUSH
16432: LD_INT 1
16434: ARRAY
16435: PPUSH
16436: LD_VAR 0 2
16440: PPUSH
16441: CALL_OW 259
16445: ST_TO_ADDR
// if s1 = 1 then
16446: LD_VAR 0 2
16450: PUSH
16451: LD_INT 1
16453: EQUAL
16454: IFFALSE 16474
// s2 := rand ( 2 , 4 ) else
16456: LD_ADDR_VAR 0 3
16460: PUSH
16461: LD_INT 2
16463: PPUSH
16464: LD_INT 4
16466: PPUSH
16467: CALL_OW 12
16471: ST_TO_ADDR
16472: GO 16482
// s2 := 1 ;
16474: LD_ADDR_VAR 0 3
16478: PUSH
16479: LD_INT 1
16481: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16482: LD_ADDR_VAR 0 5
16486: PUSH
16487: LD_VAR 0 6
16491: PUSH
16492: LD_INT 1
16494: ARRAY
16495: PPUSH
16496: LD_VAR 0 3
16500: PPUSH
16501: CALL_OW 259
16505: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16506: LD_VAR 0 6
16510: PUSH
16511: LD_INT 1
16513: ARRAY
16514: PPUSH
16515: LD_VAR 0 2
16519: PPUSH
16520: LD_VAR 0 5
16524: PPUSH
16525: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16529: LD_VAR 0 6
16533: PUSH
16534: LD_INT 1
16536: ARRAY
16537: PPUSH
16538: LD_VAR 0 3
16542: PPUSH
16543: LD_VAR 0 4
16547: PPUSH
16548: CALL_OW 237
// end ;
16552: PPOPN 6
16554: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16555: LD_EXP 26
16559: PUSH
16560: LD_EXP 73
16564: AND
16565: IFFALSE 16644
16567: GO 16569
16569: DISABLE
16570: LD_INT 0
16572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 30
16592: PUSH
16593: LD_INT 3
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PPUSH
16604: CALL_OW 69
16608: ST_TO_ADDR
// if not tmp then
16609: LD_VAR 0 1
16613: NOT
16614: IFFALSE 16618
// exit ;
16616: GO 16644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16618: LD_VAR 0 1
16622: PUSH
16623: LD_INT 1
16625: PPUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL_OW 12
16635: ARRAY
16636: PPUSH
16637: LD_INT 1
16639: PPUSH
16640: CALL_OW 234
// end ;
16644: PPOPN 1
16646: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16647: LD_EXP 26
16651: PUSH
16652: LD_EXP 74
16656: AND
16657: IFFALSE 16769
16659: GO 16661
16661: DISABLE
16662: LD_INT 0
16664: PPUSH
16665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16666: LD_ADDR_VAR 0 2
16670: PUSH
16671: LD_INT 22
16673: PUSH
16674: LD_OWVAR 2
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: LD_INT 30
16688: PUSH
16689: LD_INT 27
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 30
16698: PUSH
16699: LD_INT 26
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 30
16708: PUSH
16709: LD_INT 28
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL_OW 69
16730: ST_TO_ADDR
// if not tmp then
16731: LD_VAR 0 2
16735: NOT
16736: IFFALSE 16740
// exit ;
16738: GO 16769
// for i in tmp do
16740: LD_ADDR_VAR 0 1
16744: PUSH
16745: LD_VAR 0 2
16749: PUSH
16750: FOR_IN
16751: IFFALSE 16767
// SetLives ( i , 1 ) ;
16753: LD_VAR 0 1
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL_OW 234
16765: GO 16750
16767: POP
16768: POP
// end ;
16769: PPOPN 2
16771: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16772: LD_EXP 26
16776: PUSH
16777: LD_EXP 75
16781: AND
16782: IFFALSE 17069
16784: GO 16786
16786: DISABLE
16787: LD_INT 0
16789: PPUSH
16790: PPUSH
16791: PPUSH
// begin i := rand ( 1 , 7 ) ;
16792: LD_ADDR_VAR 0 1
16796: PUSH
16797: LD_INT 1
16799: PPUSH
16800: LD_INT 7
16802: PPUSH
16803: CALL_OW 12
16807: ST_TO_ADDR
// case i of 1 :
16808: LD_VAR 0 1
16812: PUSH
16813: LD_INT 1
16815: DOUBLE
16816: EQUAL
16817: IFTRUE 16821
16819: GO 16831
16821: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16822: LD_STRING earthquake(getX(game), 0, 32)
16824: PPUSH
16825: CALL_OW 559
16829: GO 17069
16831: LD_INT 2
16833: DOUBLE
16834: EQUAL
16835: IFTRUE 16839
16837: GO 16853
16839: POP
// begin ToLua ( displayStucuk(); ) ;
16840: LD_STRING displayStucuk();
16842: PPUSH
16843: CALL_OW 559
// ResetFog ;
16847: CALL_OW 335
// end ; 3 :
16851: GO 17069
16853: LD_INT 3
16855: DOUBLE
16856: EQUAL
16857: IFTRUE 16861
16859: GO 16965
16861: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16862: LD_ADDR_VAR 0 2
16866: PUSH
16867: LD_INT 22
16869: PUSH
16870: LD_OWVAR 2
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 25
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PPUSH
16893: CALL_OW 69
16897: ST_TO_ADDR
// if not tmp then
16898: LD_VAR 0 2
16902: NOT
16903: IFFALSE 16907
// exit ;
16905: GO 17069
// un := tmp [ rand ( 1 , tmp ) ] ;
16907: LD_ADDR_VAR 0 3
16911: PUSH
16912: LD_VAR 0 2
16916: PUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_VAR 0 2
16924: PPUSH
16925: CALL_OW 12
16929: ARRAY
16930: ST_TO_ADDR
// if Crawls ( un ) then
16931: LD_VAR 0 3
16935: PPUSH
16936: CALL_OW 318
16940: IFFALSE 16951
// ComWalk ( un ) ;
16942: LD_VAR 0 3
16946: PPUSH
16947: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_INT 8
16958: PPUSH
16959: CALL_OW 336
// end ; 4 :
16963: GO 17069
16965: LD_INT 4
16967: DOUBLE
16968: EQUAL
16969: IFTRUE 16973
16971: GO 17047
16973: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16974: LD_ADDR_VAR 0 2
16978: PUSH
16979: LD_INT 22
16981: PUSH
16982: LD_OWVAR 2
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 30
16993: PUSH
16994: LD_INT 29
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PPUSH
17005: CALL_OW 69
17009: ST_TO_ADDR
// if not tmp then
17010: LD_VAR 0 2
17014: NOT
17015: IFFALSE 17019
// exit ;
17017: GO 17069
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17019: LD_VAR 0 2
17023: PUSH
17024: LD_INT 1
17026: ARRAY
17027: PPUSH
17028: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17032: LD_VAR 0 2
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PPUSH
17041: CALL_OW 65
// end ; 5 .. 7 :
17045: GO 17069
17047: LD_INT 5
17049: DOUBLE
17050: GREATEREQUAL
17051: IFFALSE 17059
17053: LD_INT 7
17055: DOUBLE
17056: LESSEQUAL
17057: IFTRUE 17061
17059: GO 17068
17061: POP
// StreamSibBomb ; end ;
17062: CALL 13306 0 0
17066: GO 17069
17068: POP
// end ;
17069: PPOPN 3
17071: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17072: LD_EXP 26
17076: PUSH
17077: LD_EXP 76
17081: AND
17082: IFFALSE 17238
17084: GO 17086
17086: DISABLE
17087: LD_INT 0
17089: PPUSH
17090: PPUSH
17091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17092: LD_ADDR_VAR 0 2
17096: PUSH
17097: LD_INT 81
17099: PUSH
17100: LD_OWVAR 2
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 2
17111: PUSH
17112: LD_INT 21
17114: PUSH
17115: LD_INT 1
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 21
17124: PUSH
17125: LD_INT 2
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 69
17145: ST_TO_ADDR
// if not tmp then
17146: LD_VAR 0 2
17150: NOT
17151: IFFALSE 17155
// exit ;
17153: GO 17238
// p := 0 ;
17155: LD_ADDR_VAR 0 3
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17163: LD_INT 35
17165: PPUSH
17166: CALL_OW 67
// p := p + 1 ;
17170: LD_ADDR_VAR 0 3
17174: PUSH
17175: LD_VAR 0 3
17179: PUSH
17180: LD_INT 1
17182: PLUS
17183: ST_TO_ADDR
// for i in tmp do
17184: LD_ADDR_VAR 0 1
17188: PUSH
17189: LD_VAR 0 2
17193: PUSH
17194: FOR_IN
17195: IFFALSE 17226
// if GetLives ( i ) < 1000 then
17197: LD_VAR 0 1
17201: PPUSH
17202: CALL_OW 256
17206: PUSH
17207: LD_INT 1000
17209: LESS
17210: IFFALSE 17224
// SetLives ( i , 1000 ) ;
17212: LD_VAR 0 1
17216: PPUSH
17217: LD_INT 1000
17219: PPUSH
17220: CALL_OW 234
17224: GO 17194
17226: POP
17227: POP
// until p > 20 ;
17228: LD_VAR 0 3
17232: PUSH
17233: LD_INT 20
17235: GREATER
17236: IFFALSE 17163
// end ;
17238: PPOPN 3
17240: END
// every 0 0$1 trigger StreamModeActive and sTime do
17241: LD_EXP 26
17245: PUSH
17246: LD_EXP 77
17250: AND
17251: IFFALSE 17286
17253: GO 17255
17255: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17256: LD_INT 28
17258: PPUSH
17259: LD_OWVAR 2
17263: PPUSH
17264: LD_INT 2
17266: PPUSH
17267: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17271: LD_INT 30
17273: PPUSH
17274: LD_OWVAR 2
17278: PPUSH
17279: LD_INT 2
17281: PPUSH
17282: CALL_OW 322
// end ;
17286: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17287: LD_EXP 26
17291: PUSH
17292: LD_EXP 78
17296: AND
17297: IFFALSE 17418
17299: GO 17301
17301: DISABLE
17302: LD_INT 0
17304: PPUSH
17305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17306: LD_ADDR_VAR 0 2
17310: PUSH
17311: LD_INT 22
17313: PUSH
17314: LD_OWVAR 2
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 21
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 3
17335: PUSH
17336: LD_INT 23
17338: PUSH
17339: LD_INT 0
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: PPUSH
17355: CALL_OW 69
17359: ST_TO_ADDR
// if not tmp then
17360: LD_VAR 0 2
17364: NOT
17365: IFFALSE 17369
// exit ;
17367: GO 17418
// for i in tmp do
17369: LD_ADDR_VAR 0 1
17373: PUSH
17374: LD_VAR 0 2
17378: PUSH
17379: FOR_IN
17380: IFFALSE 17416
// begin if Crawls ( i ) then
17382: LD_VAR 0 1
17386: PPUSH
17387: CALL_OW 318
17391: IFFALSE 17402
// ComWalk ( i ) ;
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 138
// SetClass ( i , 2 ) ;
17402: LD_VAR 0 1
17406: PPUSH
17407: LD_INT 2
17409: PPUSH
17410: CALL_OW 336
// end ;
17414: GO 17379
17416: POP
17417: POP
// end ;
17418: PPOPN 2
17420: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17421: LD_EXP 26
17425: PUSH
17426: LD_EXP 79
17430: AND
17431: IFFALSE 17719
17433: GO 17435
17435: DISABLE
17436: LD_INT 0
17438: PPUSH
17439: PPUSH
17440: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17441: LD_OWVAR 2
17445: PPUSH
17446: LD_INT 9
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_INT 1
17454: PPUSH
17455: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17459: LD_INT 9
17461: PPUSH
17462: LD_OWVAR 2
17466: PPUSH
17467: CALL_OW 343
// uc_side := 9 ;
17471: LD_ADDR_OWVAR 20
17475: PUSH
17476: LD_INT 9
17478: ST_TO_ADDR
// uc_nation := 2 ;
17479: LD_ADDR_OWVAR 21
17483: PUSH
17484: LD_INT 2
17486: ST_TO_ADDR
// hc_name := Dark Warrior ;
17487: LD_ADDR_OWVAR 26
17491: PUSH
17492: LD_STRING Dark Warrior
17494: ST_TO_ADDR
// hc_gallery :=  ;
17495: LD_ADDR_OWVAR 33
17499: PUSH
17500: LD_STRING 
17502: ST_TO_ADDR
// hc_noskilllimit := true ;
17503: LD_ADDR_OWVAR 76
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17511: LD_ADDR_OWVAR 31
17515: PUSH
17516: LD_INT 30
17518: PUSH
17519: LD_INT 30
17521: PUSH
17522: LD_INT 30
17524: PUSH
17525: LD_INT 30
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: ST_TO_ADDR
// un := CreateHuman ;
17534: LD_ADDR_VAR 0 3
17538: PUSH
17539: CALL_OW 44
17543: ST_TO_ADDR
// hc_noskilllimit := false ;
17544: LD_ADDR_OWVAR 76
17548: PUSH
17549: LD_INT 0
17551: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17552: LD_VAR 0 3
17556: PPUSH
17557: LD_INT 1
17559: PPUSH
17560: CALL_OW 51
// ToLua ( playRanger() ) ;
17564: LD_STRING playRanger()
17566: PPUSH
17567: CALL_OW 559
// p := 0 ;
17571: LD_ADDR_VAR 0 2
17575: PUSH
17576: LD_INT 0
17578: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17579: LD_INT 35
17581: PPUSH
17582: CALL_OW 67
// p := p + 1 ;
17586: LD_ADDR_VAR 0 2
17590: PUSH
17591: LD_VAR 0 2
17595: PUSH
17596: LD_INT 1
17598: PLUS
17599: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17600: LD_VAR 0 3
17604: PPUSH
17605: CALL_OW 256
17609: PUSH
17610: LD_INT 1000
17612: LESS
17613: IFFALSE 17627
// SetLives ( un , 1000 ) ;
17615: LD_VAR 0 3
17619: PPUSH
17620: LD_INT 1000
17622: PPUSH
17623: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17627: LD_VAR 0 3
17631: PPUSH
17632: LD_INT 81
17634: PUSH
17635: LD_OWVAR 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 91
17646: PUSH
17647: LD_VAR 0 3
17651: PUSH
17652: LD_INT 30
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PPUSH
17664: CALL_OW 69
17668: PPUSH
17669: LD_VAR 0 3
17673: PPUSH
17674: CALL_OW 74
17678: PPUSH
17679: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17683: LD_VAR 0 2
17687: PUSH
17688: LD_INT 80
17690: GREATER
17691: PUSH
17692: LD_VAR 0 3
17696: PPUSH
17697: CALL_OW 301
17701: OR
17702: IFFALSE 17579
// if un then
17704: LD_VAR 0 3
17708: IFFALSE 17719
// RemoveUnit ( un ) ;
17710: LD_VAR 0 3
17714: PPUSH
17715: CALL_OW 64
// end ;
17719: PPOPN 3
17721: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17722: LD_EXP 80
17726: IFFALSE 17842
17728: GO 17730
17730: DISABLE
17731: LD_INT 0
17733: PPUSH
17734: PPUSH
17735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17736: LD_ADDR_VAR 0 2
17740: PUSH
17741: LD_INT 81
17743: PUSH
17744: LD_OWVAR 2
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 21
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PPUSH
17767: CALL_OW 69
17771: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17772: LD_STRING playComputer()
17774: PPUSH
17775: CALL_OW 559
// if not tmp then
17779: LD_VAR 0 2
17783: NOT
17784: IFFALSE 17788
// exit ;
17786: GO 17842
// for i in tmp do
17788: LD_ADDR_VAR 0 1
17792: PUSH
17793: LD_VAR 0 2
17797: PUSH
17798: FOR_IN
17799: IFFALSE 17840
// for j := 1 to 4 do
17801: LD_ADDR_VAR 0 3
17805: PUSH
17806: DOUBLE
17807: LD_INT 1
17809: DEC
17810: ST_TO_ADDR
17811: LD_INT 4
17813: PUSH
17814: FOR_TO
17815: IFFALSE 17836
// SetSkill ( i , j , 10 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_VAR 0 3
17826: PPUSH
17827: LD_INT 10
17829: PPUSH
17830: CALL_OW 237
17834: GO 17814
17836: POP
17837: POP
17838: GO 17798
17840: POP
17841: POP
// end ;
17842: PPOPN 3
17844: END
// every 0 0$1 trigger s30 do var i , tmp ;
17845: LD_EXP 81
17849: IFFALSE 17918
17851: GO 17853
17853: DISABLE
17854: LD_INT 0
17856: PPUSH
17857: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17858: LD_ADDR_VAR 0 2
17862: PUSH
17863: LD_INT 22
17865: PUSH
17866: LD_OWVAR 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PPUSH
17875: CALL_OW 69
17879: ST_TO_ADDR
// if not tmp then
17880: LD_VAR 0 2
17884: NOT
17885: IFFALSE 17889
// exit ;
17887: GO 17918
// for i in tmp do
17889: LD_ADDR_VAR 0 1
17893: PUSH
17894: LD_VAR 0 2
17898: PUSH
17899: FOR_IN
17900: IFFALSE 17916
// SetLives ( i , 300 ) ;
17902: LD_VAR 0 1
17906: PPUSH
17907: LD_INT 300
17909: PPUSH
17910: CALL_OW 234
17914: GO 17899
17916: POP
17917: POP
// end ;
17918: PPOPN 2
17920: END
// every 0 0$1 trigger s60 do var i , tmp ;
17921: LD_EXP 82
17925: IFFALSE 17994
17927: GO 17929
17929: DISABLE
17930: LD_INT 0
17932: PPUSH
17933: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17934: LD_ADDR_VAR 0 2
17938: PUSH
17939: LD_INT 22
17941: PUSH
17942: LD_OWVAR 2
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 69
17955: ST_TO_ADDR
// if not tmp then
17956: LD_VAR 0 2
17960: NOT
17961: IFFALSE 17965
// exit ;
17963: GO 17994
// for i in tmp do
17965: LD_ADDR_VAR 0 1
17969: PUSH
17970: LD_VAR 0 2
17974: PUSH
17975: FOR_IN
17976: IFFALSE 17992
// SetLives ( i , 600 ) ;
17978: LD_VAR 0 1
17982: PPUSH
17983: LD_INT 600
17985: PPUSH
17986: CALL_OW 234
17990: GO 17975
17992: POP
17993: POP
// end ;
17994: PPOPN 2
17996: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17997: LD_INT 0
17999: PPUSH
// case cmd of 301 :
18000: LD_VAR 0 1
18004: PUSH
18005: LD_INT 301
18007: DOUBLE
18008: EQUAL
18009: IFTRUE 18013
18011: GO 18045
18013: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18014: LD_VAR 0 6
18018: PPUSH
18019: LD_VAR 0 7
18023: PPUSH
18024: LD_VAR 0 8
18028: PPUSH
18029: LD_VAR 0 4
18033: PPUSH
18034: LD_VAR 0 5
18038: PPUSH
18039: CALL 19254 0 5
18043: GO 18166
18045: LD_INT 302
18047: DOUBLE
18048: EQUAL
18049: IFTRUE 18053
18051: GO 18090
18053: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18054: LD_VAR 0 6
18058: PPUSH
18059: LD_VAR 0 7
18063: PPUSH
18064: LD_VAR 0 8
18068: PPUSH
18069: LD_VAR 0 9
18073: PPUSH
18074: LD_VAR 0 4
18078: PPUSH
18079: LD_VAR 0 5
18083: PPUSH
18084: CALL 19345 0 6
18088: GO 18166
18090: LD_INT 303
18092: DOUBLE
18093: EQUAL
18094: IFTRUE 18098
18096: GO 18135
18098: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18099: LD_VAR 0 6
18103: PPUSH
18104: LD_VAR 0 7
18108: PPUSH
18109: LD_VAR 0 8
18113: PPUSH
18114: LD_VAR 0 9
18118: PPUSH
18119: LD_VAR 0 4
18123: PPUSH
18124: LD_VAR 0 5
18128: PPUSH
18129: CALL 18171 0 6
18133: GO 18166
18135: LD_INT 304
18137: DOUBLE
18138: EQUAL
18139: IFTRUE 18143
18141: GO 18165
18143: POP
// hHackTeleport ( unit , x , y ) ; end ;
18144: LD_VAR 0 2
18148: PPUSH
18149: LD_VAR 0 4
18153: PPUSH
18154: LD_VAR 0 5
18158: PPUSH
18159: CALL 19938 0 3
18163: GO 18166
18165: POP
// end ;
18166: LD_VAR 0 12
18170: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18171: LD_INT 0
18173: PPUSH
18174: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18175: LD_VAR 0 1
18179: PUSH
18180: LD_INT 1
18182: LESS
18183: PUSH
18184: LD_VAR 0 1
18188: PUSH
18189: LD_INT 3
18191: GREATER
18192: OR
18193: PUSH
18194: LD_VAR 0 5
18198: PPUSH
18199: LD_VAR 0 6
18203: PPUSH
18204: CALL_OW 428
18208: OR
18209: IFFALSE 18213
// exit ;
18211: GO 18941
// uc_side := your_side ;
18213: LD_ADDR_OWVAR 20
18217: PUSH
18218: LD_OWVAR 2
18222: ST_TO_ADDR
// uc_nation := nation ;
18223: LD_ADDR_OWVAR 21
18227: PUSH
18228: LD_VAR 0 1
18232: ST_TO_ADDR
// bc_level = 1 ;
18233: LD_ADDR_OWVAR 43
18237: PUSH
18238: LD_INT 1
18240: ST_TO_ADDR
// case btype of 1 :
18241: LD_VAR 0 2
18245: PUSH
18246: LD_INT 1
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 18265
18254: POP
// bc_type := b_depot ; 2 :
18255: LD_ADDR_OWVAR 42
18259: PUSH
18260: LD_INT 0
18262: ST_TO_ADDR
18263: GO 18885
18265: LD_INT 2
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18284
18273: POP
// bc_type := b_warehouse ; 3 :
18274: LD_ADDR_OWVAR 42
18278: PUSH
18279: LD_INT 1
18281: ST_TO_ADDR
18282: GO 18885
18284: LD_INT 3
18286: DOUBLE
18287: EQUAL
18288: IFTRUE 18292
18290: GO 18303
18292: POP
// bc_type := b_lab ; 4 .. 9 :
18293: LD_ADDR_OWVAR 42
18297: PUSH
18298: LD_INT 6
18300: ST_TO_ADDR
18301: GO 18885
18303: LD_INT 4
18305: DOUBLE
18306: GREATEREQUAL
18307: IFFALSE 18315
18309: LD_INT 9
18311: DOUBLE
18312: LESSEQUAL
18313: IFTRUE 18317
18315: GO 18377
18317: POP
// begin bc_type := b_lab_half ;
18318: LD_ADDR_OWVAR 42
18322: PUSH
18323: LD_INT 7
18325: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18326: LD_ADDR_OWVAR 44
18330: PUSH
18331: LD_INT 10
18333: PUSH
18334: LD_INT 11
18336: PUSH
18337: LD_INT 12
18339: PUSH
18340: LD_INT 15
18342: PUSH
18343: LD_INT 14
18345: PUSH
18346: LD_INT 13
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: PUSH
18357: LD_VAR 0 2
18361: PUSH
18362: LD_INT 3
18364: MINUS
18365: ARRAY
18366: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18367: LD_ADDR_OWVAR 45
18371: PUSH
18372: LD_INT 9
18374: ST_TO_ADDR
// end ; 10 .. 13 :
18375: GO 18885
18377: LD_INT 10
18379: DOUBLE
18380: GREATEREQUAL
18381: IFFALSE 18389
18383: LD_INT 13
18385: DOUBLE
18386: LESSEQUAL
18387: IFTRUE 18391
18389: GO 18468
18391: POP
// begin bc_type := b_lab_full ;
18392: LD_ADDR_OWVAR 42
18396: PUSH
18397: LD_INT 8
18399: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18400: LD_ADDR_OWVAR 44
18404: PUSH
18405: LD_INT 10
18407: PUSH
18408: LD_INT 12
18410: PUSH
18411: LD_INT 14
18413: PUSH
18414: LD_INT 13
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: PUSH
18423: LD_VAR 0 2
18427: PUSH
18428: LD_INT 9
18430: MINUS
18431: ARRAY
18432: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18433: LD_ADDR_OWVAR 45
18437: PUSH
18438: LD_INT 11
18440: PUSH
18441: LD_INT 15
18443: PUSH
18444: LD_INT 12
18446: PUSH
18447: LD_INT 15
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: PUSH
18456: LD_VAR 0 2
18460: PUSH
18461: LD_INT 9
18463: MINUS
18464: ARRAY
18465: ST_TO_ADDR
// end ; 14 :
18466: GO 18885
18468: LD_INT 14
18470: DOUBLE
18471: EQUAL
18472: IFTRUE 18476
18474: GO 18487
18476: POP
// bc_type := b_workshop ; 15 :
18477: LD_ADDR_OWVAR 42
18481: PUSH
18482: LD_INT 2
18484: ST_TO_ADDR
18485: GO 18885
18487: LD_INT 15
18489: DOUBLE
18490: EQUAL
18491: IFTRUE 18495
18493: GO 18506
18495: POP
// bc_type := b_factory ; 16 :
18496: LD_ADDR_OWVAR 42
18500: PUSH
18501: LD_INT 3
18503: ST_TO_ADDR
18504: GO 18885
18506: LD_INT 16
18508: DOUBLE
18509: EQUAL
18510: IFTRUE 18514
18512: GO 18525
18514: POP
// bc_type := b_ext_gun ; 17 :
18515: LD_ADDR_OWVAR 42
18519: PUSH
18520: LD_INT 17
18522: ST_TO_ADDR
18523: GO 18885
18525: LD_INT 17
18527: DOUBLE
18528: EQUAL
18529: IFTRUE 18533
18531: GO 18561
18533: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18534: LD_ADDR_OWVAR 42
18538: PUSH
18539: LD_INT 19
18541: PUSH
18542: LD_INT 23
18544: PUSH
18545: LD_INT 19
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: LD_VAR 0 1
18557: ARRAY
18558: ST_TO_ADDR
18559: GO 18885
18561: LD_INT 18
18563: DOUBLE
18564: EQUAL
18565: IFTRUE 18569
18567: GO 18580
18569: POP
// bc_type := b_ext_radar ; 19 :
18570: LD_ADDR_OWVAR 42
18574: PUSH
18575: LD_INT 20
18577: ST_TO_ADDR
18578: GO 18885
18580: LD_INT 19
18582: DOUBLE
18583: EQUAL
18584: IFTRUE 18588
18586: GO 18599
18588: POP
// bc_type := b_ext_radio ; 20 :
18589: LD_ADDR_OWVAR 42
18593: PUSH
18594: LD_INT 22
18596: ST_TO_ADDR
18597: GO 18885
18599: LD_INT 20
18601: DOUBLE
18602: EQUAL
18603: IFTRUE 18607
18605: GO 18618
18607: POP
// bc_type := b_ext_siberium ; 21 :
18608: LD_ADDR_OWVAR 42
18612: PUSH
18613: LD_INT 21
18615: ST_TO_ADDR
18616: GO 18885
18618: LD_INT 21
18620: DOUBLE
18621: EQUAL
18622: IFTRUE 18626
18624: GO 18637
18626: POP
// bc_type := b_ext_computer ; 22 :
18627: LD_ADDR_OWVAR 42
18631: PUSH
18632: LD_INT 24
18634: ST_TO_ADDR
18635: GO 18885
18637: LD_INT 22
18639: DOUBLE
18640: EQUAL
18641: IFTRUE 18645
18643: GO 18656
18645: POP
// bc_type := b_ext_track ; 23 :
18646: LD_ADDR_OWVAR 42
18650: PUSH
18651: LD_INT 16
18653: ST_TO_ADDR
18654: GO 18885
18656: LD_INT 23
18658: DOUBLE
18659: EQUAL
18660: IFTRUE 18664
18662: GO 18675
18664: POP
// bc_type := b_ext_laser ; 24 :
18665: LD_ADDR_OWVAR 42
18669: PUSH
18670: LD_INT 25
18672: ST_TO_ADDR
18673: GO 18885
18675: LD_INT 24
18677: DOUBLE
18678: EQUAL
18679: IFTRUE 18683
18681: GO 18694
18683: POP
// bc_type := b_control_tower ; 25 :
18684: LD_ADDR_OWVAR 42
18688: PUSH
18689: LD_INT 36
18691: ST_TO_ADDR
18692: GO 18885
18694: LD_INT 25
18696: DOUBLE
18697: EQUAL
18698: IFTRUE 18702
18700: GO 18713
18702: POP
// bc_type := b_breastwork ; 26 :
18703: LD_ADDR_OWVAR 42
18707: PUSH
18708: LD_INT 31
18710: ST_TO_ADDR
18711: GO 18885
18713: LD_INT 26
18715: DOUBLE
18716: EQUAL
18717: IFTRUE 18721
18719: GO 18732
18721: POP
// bc_type := b_bunker ; 27 :
18722: LD_ADDR_OWVAR 42
18726: PUSH
18727: LD_INT 32
18729: ST_TO_ADDR
18730: GO 18885
18732: LD_INT 27
18734: DOUBLE
18735: EQUAL
18736: IFTRUE 18740
18738: GO 18751
18740: POP
// bc_type := b_turret ; 28 :
18741: LD_ADDR_OWVAR 42
18745: PUSH
18746: LD_INT 33
18748: ST_TO_ADDR
18749: GO 18885
18751: LD_INT 28
18753: DOUBLE
18754: EQUAL
18755: IFTRUE 18759
18757: GO 18770
18759: POP
// bc_type := b_armoury ; 29 :
18760: LD_ADDR_OWVAR 42
18764: PUSH
18765: LD_INT 4
18767: ST_TO_ADDR
18768: GO 18885
18770: LD_INT 29
18772: DOUBLE
18773: EQUAL
18774: IFTRUE 18778
18776: GO 18789
18778: POP
// bc_type := b_barracks ; 30 :
18779: LD_ADDR_OWVAR 42
18783: PUSH
18784: LD_INT 5
18786: ST_TO_ADDR
18787: GO 18885
18789: LD_INT 30
18791: DOUBLE
18792: EQUAL
18793: IFTRUE 18797
18795: GO 18808
18797: POP
// bc_type := b_solar_power ; 31 :
18798: LD_ADDR_OWVAR 42
18802: PUSH
18803: LD_INT 27
18805: ST_TO_ADDR
18806: GO 18885
18808: LD_INT 31
18810: DOUBLE
18811: EQUAL
18812: IFTRUE 18816
18814: GO 18827
18816: POP
// bc_type := b_oil_power ; 32 :
18817: LD_ADDR_OWVAR 42
18821: PUSH
18822: LD_INT 26
18824: ST_TO_ADDR
18825: GO 18885
18827: LD_INT 32
18829: DOUBLE
18830: EQUAL
18831: IFTRUE 18835
18833: GO 18846
18835: POP
// bc_type := b_siberite_power ; 33 :
18836: LD_ADDR_OWVAR 42
18840: PUSH
18841: LD_INT 28
18843: ST_TO_ADDR
18844: GO 18885
18846: LD_INT 33
18848: DOUBLE
18849: EQUAL
18850: IFTRUE 18854
18852: GO 18865
18854: POP
// bc_type := b_oil_mine ; 34 :
18855: LD_ADDR_OWVAR 42
18859: PUSH
18860: LD_INT 29
18862: ST_TO_ADDR
18863: GO 18885
18865: LD_INT 34
18867: DOUBLE
18868: EQUAL
18869: IFTRUE 18873
18871: GO 18884
18873: POP
// bc_type := b_siberite_mine ; end ;
18874: LD_ADDR_OWVAR 42
18878: PUSH
18879: LD_INT 30
18881: ST_TO_ADDR
18882: GO 18885
18884: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18885: LD_ADDR_VAR 0 8
18889: PUSH
18890: LD_VAR 0 5
18894: PPUSH
18895: LD_VAR 0 6
18899: PPUSH
18900: LD_VAR 0 3
18904: PPUSH
18905: CALL_OW 47
18909: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18910: LD_OWVAR 42
18914: PUSH
18915: LD_INT 32
18917: PUSH
18918: LD_INT 33
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: IN
18925: IFFALSE 18941
// PlaceWeaponTurret ( b , weapon ) ;
18927: LD_VAR 0 8
18931: PPUSH
18932: LD_VAR 0 4
18936: PPUSH
18937: CALL_OW 431
// end ;
18941: LD_VAR 0 7
18945: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18946: LD_INT 0
18948: PPUSH
18949: PPUSH
18950: PPUSH
18951: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18952: LD_ADDR_VAR 0 4
18956: PUSH
18957: LD_INT 22
18959: PUSH
18960: LD_OWVAR 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 2
18971: PUSH
18972: LD_INT 30
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: LIST
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PPUSH
19001: CALL_OW 69
19005: ST_TO_ADDR
// if not tmp then
19006: LD_VAR 0 4
19010: NOT
19011: IFFALSE 19015
// exit ;
19013: GO 19074
// for i in tmp do
19015: LD_ADDR_VAR 0 2
19019: PUSH
19020: LD_VAR 0 4
19024: PUSH
19025: FOR_IN
19026: IFFALSE 19072
// for j = 1 to 3 do
19028: LD_ADDR_VAR 0 3
19032: PUSH
19033: DOUBLE
19034: LD_INT 1
19036: DEC
19037: ST_TO_ADDR
19038: LD_INT 3
19040: PUSH
19041: FOR_TO
19042: IFFALSE 19068
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19044: LD_VAR 0 2
19048: PPUSH
19049: CALL_OW 274
19053: PPUSH
19054: LD_VAR 0 3
19058: PPUSH
19059: LD_INT 99999
19061: PPUSH
19062: CALL_OW 277
19066: GO 19041
19068: POP
19069: POP
19070: GO 19025
19072: POP
19073: POP
// end ;
19074: LD_VAR 0 1
19078: RET
// export function hHackSetLevel10 ; var i , j ; begin
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
19083: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19084: LD_ADDR_VAR 0 2
19088: PUSH
19089: LD_INT 21
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PPUSH
19099: CALL_OW 69
19103: PUSH
19104: FOR_IN
19105: IFFALSE 19157
// if IsSelected ( i ) then
19107: LD_VAR 0 2
19111: PPUSH
19112: CALL_OW 306
19116: IFFALSE 19155
// begin for j := 1 to 4 do
19118: LD_ADDR_VAR 0 3
19122: PUSH
19123: DOUBLE
19124: LD_INT 1
19126: DEC
19127: ST_TO_ADDR
19128: LD_INT 4
19130: PUSH
19131: FOR_TO
19132: IFFALSE 19153
// SetSkill ( i , j , 10 ) ;
19134: LD_VAR 0 2
19138: PPUSH
19139: LD_VAR 0 3
19143: PPUSH
19144: LD_INT 10
19146: PPUSH
19147: CALL_OW 237
19151: GO 19131
19153: POP
19154: POP
// end ;
19155: GO 19104
19157: POP
19158: POP
// end ;
19159: LD_VAR 0 1
19163: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19164: LD_INT 0
19166: PPUSH
19167: PPUSH
19168: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19169: LD_ADDR_VAR 0 2
19173: PUSH
19174: LD_INT 22
19176: PUSH
19177: LD_OWVAR 2
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 21
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PPUSH
19200: CALL_OW 69
19204: PUSH
19205: FOR_IN
19206: IFFALSE 19247
// begin for j := 1 to 4 do
19208: LD_ADDR_VAR 0 3
19212: PUSH
19213: DOUBLE
19214: LD_INT 1
19216: DEC
19217: ST_TO_ADDR
19218: LD_INT 4
19220: PUSH
19221: FOR_TO
19222: IFFALSE 19243
// SetSkill ( i , j , 10 ) ;
19224: LD_VAR 0 2
19228: PPUSH
19229: LD_VAR 0 3
19233: PPUSH
19234: LD_INT 10
19236: PPUSH
19237: CALL_OW 237
19241: GO 19221
19243: POP
19244: POP
// end ;
19245: GO 19205
19247: POP
19248: POP
// end ;
19249: LD_VAR 0 1
19253: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19254: LD_INT 0
19256: PPUSH
// uc_side := your_side ;
19257: LD_ADDR_OWVAR 20
19261: PUSH
19262: LD_OWVAR 2
19266: ST_TO_ADDR
// uc_nation := nation ;
19267: LD_ADDR_OWVAR 21
19271: PUSH
19272: LD_VAR 0 1
19276: ST_TO_ADDR
// InitHc ;
19277: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19281: LD_INT 0
19283: PPUSH
19284: LD_VAR 0 2
19288: PPUSH
19289: LD_VAR 0 3
19293: PPUSH
19294: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19298: LD_VAR 0 4
19302: PPUSH
19303: LD_VAR 0 5
19307: PPUSH
19308: CALL_OW 428
19312: PUSH
19313: LD_INT 0
19315: EQUAL
19316: IFFALSE 19340
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19318: CALL_OW 44
19322: PPUSH
19323: LD_VAR 0 4
19327: PPUSH
19328: LD_VAR 0 5
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 48
// end ;
19340: LD_VAR 0 6
19344: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19345: LD_INT 0
19347: PPUSH
19348: PPUSH
// uc_side := your_side ;
19349: LD_ADDR_OWVAR 20
19353: PUSH
19354: LD_OWVAR 2
19358: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19359: LD_VAR 0 1
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: LD_INT 4
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: IN
19386: IFFALSE 19398
// uc_nation := nation_american else
19388: LD_ADDR_OWVAR 21
19392: PUSH
19393: LD_INT 1
19395: ST_TO_ADDR
19396: GO 19441
// if chassis in [ 11 , 12 , 13 , 14 ] then
19398: LD_VAR 0 1
19402: PUSH
19403: LD_INT 11
19405: PUSH
19406: LD_INT 12
19408: PUSH
19409: LD_INT 13
19411: PUSH
19412: LD_INT 14
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: IN
19421: IFFALSE 19433
// uc_nation := nation_arabian else
19423: LD_ADDR_OWVAR 21
19427: PUSH
19428: LD_INT 2
19430: ST_TO_ADDR
19431: GO 19441
// uc_nation := nation_russian ;
19433: LD_ADDR_OWVAR 21
19437: PUSH
19438: LD_INT 3
19440: ST_TO_ADDR
// vc_chassis := chassis ;
19441: LD_ADDR_OWVAR 37
19445: PUSH
19446: LD_VAR 0 1
19450: ST_TO_ADDR
// vc_engine := engine ;
19451: LD_ADDR_OWVAR 39
19455: PUSH
19456: LD_VAR 0 2
19460: ST_TO_ADDR
// vc_control := control ;
19461: LD_ADDR_OWVAR 38
19465: PUSH
19466: LD_VAR 0 3
19470: ST_TO_ADDR
// vc_weapon := weapon ;
19471: LD_ADDR_OWVAR 40
19475: PUSH
19476: LD_VAR 0 4
19480: ST_TO_ADDR
// un := CreateVehicle ;
19481: LD_ADDR_VAR 0 8
19485: PUSH
19486: CALL_OW 45
19490: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19491: LD_VAR 0 8
19495: PPUSH
19496: LD_INT 0
19498: PPUSH
19499: LD_INT 5
19501: PPUSH
19502: CALL_OW 12
19506: PPUSH
19507: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19511: LD_VAR 0 8
19515: PPUSH
19516: LD_VAR 0 5
19520: PPUSH
19521: LD_VAR 0 6
19525: PPUSH
19526: LD_INT 1
19528: PPUSH
19529: CALL_OW 48
// end ;
19533: LD_VAR 0 7
19537: RET
// export hInvincible ; every 1 do
19538: GO 19540
19540: DISABLE
// hInvincible := [ ] ;
19541: LD_ADDR_EXP 83
19545: PUSH
19546: EMPTY
19547: ST_TO_ADDR
19548: END
// every 10 do var i ;
19549: GO 19551
19551: DISABLE
19552: LD_INT 0
19554: PPUSH
// begin enable ;
19555: ENABLE
// if not hInvincible then
19556: LD_EXP 83
19560: NOT
19561: IFFALSE 19565
// exit ;
19563: GO 19609
// for i in hInvincible do
19565: LD_ADDR_VAR 0 1
19569: PUSH
19570: LD_EXP 83
19574: PUSH
19575: FOR_IN
19576: IFFALSE 19607
// if GetLives ( i ) < 1000 then
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 256
19587: PUSH
19588: LD_INT 1000
19590: LESS
19591: IFFALSE 19605
// SetLives ( i , 1000 ) ;
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_INT 1000
19600: PPUSH
19601: CALL_OW 234
19605: GO 19575
19607: POP
19608: POP
// end ;
19609: PPOPN 1
19611: END
// export function hHackInvincible ; var i ; begin
19612: LD_INT 0
19614: PPUSH
19615: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19616: LD_ADDR_VAR 0 2
19620: PUSH
19621: LD_INT 2
19623: PUSH
19624: LD_INT 21
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: PUSH
19654: FOR_IN
19655: IFFALSE 19716
// if IsSelected ( i ) then
19657: LD_VAR 0 2
19661: PPUSH
19662: CALL_OW 306
19666: IFFALSE 19714
// begin if i in hInvincible then
19668: LD_VAR 0 2
19672: PUSH
19673: LD_EXP 83
19677: IN
19678: IFFALSE 19698
// hInvincible := hInvincible diff i else
19680: LD_ADDR_EXP 83
19684: PUSH
19685: LD_EXP 83
19689: PUSH
19690: LD_VAR 0 2
19694: DIFF
19695: ST_TO_ADDR
19696: GO 19714
// hInvincible := hInvincible union i ;
19698: LD_ADDR_EXP 83
19702: PUSH
19703: LD_EXP 83
19707: PUSH
19708: LD_VAR 0 2
19712: UNION
19713: ST_TO_ADDR
// end ;
19714: GO 19654
19716: POP
19717: POP
// end ;
19718: LD_VAR 0 1
19722: RET
// export function hHackInvisible ; var i , j ; begin
19723: LD_INT 0
19725: PPUSH
19726: PPUSH
19727: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19728: LD_ADDR_VAR 0 2
19732: PUSH
19733: LD_INT 21
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PPUSH
19743: CALL_OW 69
19747: PUSH
19748: FOR_IN
19749: IFFALSE 19773
// if IsSelected ( i ) then
19751: LD_VAR 0 2
19755: PPUSH
19756: CALL_OW 306
19760: IFFALSE 19771
// ComForceInvisible ( i ) ;
19762: LD_VAR 0 2
19766: PPUSH
19767: CALL_OW 496
19771: GO 19748
19773: POP
19774: POP
// end ;
19775: LD_VAR 0 1
19779: RET
// export function hHackChangeYourSide ; begin
19780: LD_INT 0
19782: PPUSH
// if your_side = 8 then
19783: LD_OWVAR 2
19787: PUSH
19788: LD_INT 8
19790: EQUAL
19791: IFFALSE 19803
// your_side := 0 else
19793: LD_ADDR_OWVAR 2
19797: PUSH
19798: LD_INT 0
19800: ST_TO_ADDR
19801: GO 19817
// your_side := your_side + 1 ;
19803: LD_ADDR_OWVAR 2
19807: PUSH
19808: LD_OWVAR 2
19812: PUSH
19813: LD_INT 1
19815: PLUS
19816: ST_TO_ADDR
// end ;
19817: LD_VAR 0 1
19821: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19822: LD_INT 0
19824: PPUSH
19825: PPUSH
19826: PPUSH
// for i in all_units do
19827: LD_ADDR_VAR 0 2
19831: PUSH
19832: LD_OWVAR 3
19836: PUSH
19837: FOR_IN
19838: IFFALSE 19916
// if IsSelected ( i ) then
19840: LD_VAR 0 2
19844: PPUSH
19845: CALL_OW 306
19849: IFFALSE 19914
// begin j := GetSide ( i ) ;
19851: LD_ADDR_VAR 0 3
19855: PUSH
19856: LD_VAR 0 2
19860: PPUSH
19861: CALL_OW 255
19865: ST_TO_ADDR
// if j = 8 then
19866: LD_VAR 0 3
19870: PUSH
19871: LD_INT 8
19873: EQUAL
19874: IFFALSE 19886
// j := 0 else
19876: LD_ADDR_VAR 0 3
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
19884: GO 19900
// j := j + 1 ;
19886: LD_ADDR_VAR 0 3
19890: PUSH
19891: LD_VAR 0 3
19895: PUSH
19896: LD_INT 1
19898: PLUS
19899: ST_TO_ADDR
// SetSide ( i , j ) ;
19900: LD_VAR 0 2
19904: PPUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: CALL_OW 235
// end ;
19914: GO 19837
19916: POP
19917: POP
// end ;
19918: LD_VAR 0 1
19922: RET
// export function hHackFog ; begin
19923: LD_INT 0
19925: PPUSH
// FogOff ( true ) ;
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 344
// end ;
19933: LD_VAR 0 1
19937: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19938: LD_INT 0
19940: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19941: LD_VAR 0 1
19945: PPUSH
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: LD_INT 1
19961: PPUSH
19962: CALL_OW 483
// CenterOnXY ( x , y ) ;
19966: LD_VAR 0 2
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: CALL_OW 84
// end ;
19980: LD_VAR 0 4
19984: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19985: LD_INT 0
19987: PPUSH
19988: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19989: LD_VAR 0 1
19993: NOT
19994: PUSH
19995: LD_VAR 0 2
19999: PPUSH
20000: LD_VAR 0 3
20004: PPUSH
20005: CALL_OW 488
20009: NOT
20010: OR
20011: PUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL_OW 266
20021: PUSH
20022: LD_INT 3
20024: NONEQUAL
20025: PUSH
20026: LD_VAR 0 1
20030: PPUSH
20031: CALL_OW 247
20035: PUSH
20036: LD_INT 1
20038: EQUAL
20039: NOT
20040: AND
20041: OR
20042: IFFALSE 20046
// exit ;
20044: GO 20195
// if GetType ( factory ) = unit_human then
20046: LD_VAR 0 1
20050: PPUSH
20051: CALL_OW 247
20055: PUSH
20056: LD_INT 1
20058: EQUAL
20059: IFFALSE 20076
// factory := IsInUnit ( factory ) ;
20061: LD_ADDR_VAR 0 1
20065: PUSH
20066: LD_VAR 0 1
20070: PPUSH
20071: CALL_OW 310
20075: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20076: LD_VAR 0 1
20080: PPUSH
20081: CALL_OW 266
20085: PUSH
20086: LD_INT 3
20088: NONEQUAL
20089: IFFALSE 20093
// exit ;
20091: GO 20195
// if HexInfo ( x , y ) = factory then
20093: LD_VAR 0 2
20097: PPUSH
20098: LD_VAR 0 3
20102: PPUSH
20103: CALL_OW 428
20107: PUSH
20108: LD_VAR 0 1
20112: EQUAL
20113: IFFALSE 20140
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20115: LD_ADDR_EXP 84
20119: PUSH
20120: LD_EXP 84
20124: PPUSH
20125: LD_VAR 0 1
20129: PPUSH
20130: LD_INT 0
20132: PPUSH
20133: CALL_OW 1
20137: ST_TO_ADDR
20138: GO 20191
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20140: LD_ADDR_EXP 84
20144: PUSH
20145: LD_EXP 84
20149: PPUSH
20150: LD_VAR 0 1
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 255
20164: PUSH
20165: LD_VAR 0 1
20169: PUSH
20170: LD_VAR 0 2
20174: PUSH
20175: LD_VAR 0 3
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: PPUSH
20186: CALL_OW 1
20190: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20191: CALL 20200 0 0
// end ;
20195: LD_VAR 0 4
20199: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
20204: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20205: LD_STRING resetFactoryWaypoint();
20207: PPUSH
20208: CALL_OW 559
// if factoryWaypoints then
20212: LD_EXP 84
20216: IFFALSE 20342
// begin list := PrepareArray ( factoryWaypoints ) ;
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: LD_EXP 84
20227: PPUSH
20228: CALL 67861 0 1
20232: ST_TO_ADDR
// for i := 1 to list do
20233: LD_ADDR_VAR 0 2
20237: PUSH
20238: DOUBLE
20239: LD_INT 1
20241: DEC
20242: ST_TO_ADDR
20243: LD_VAR 0 3
20247: PUSH
20248: FOR_TO
20249: IFFALSE 20340
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20251: LD_STRING setFactoryWaypointXY(
20253: PUSH
20254: LD_VAR 0 3
20258: PUSH
20259: LD_VAR 0 2
20263: ARRAY
20264: PUSH
20265: LD_INT 1
20267: ARRAY
20268: STR
20269: PUSH
20270: LD_STRING ,
20272: STR
20273: PUSH
20274: LD_VAR 0 3
20278: PUSH
20279: LD_VAR 0 2
20283: ARRAY
20284: PUSH
20285: LD_INT 2
20287: ARRAY
20288: STR
20289: PUSH
20290: LD_STRING ,
20292: STR
20293: PUSH
20294: LD_VAR 0 3
20298: PUSH
20299: LD_VAR 0 2
20303: ARRAY
20304: PUSH
20305: LD_INT 3
20307: ARRAY
20308: STR
20309: PUSH
20310: LD_STRING ,
20312: STR
20313: PUSH
20314: LD_VAR 0 3
20318: PUSH
20319: LD_VAR 0 2
20323: ARRAY
20324: PUSH
20325: LD_INT 4
20327: ARRAY
20328: STR
20329: PUSH
20330: LD_STRING )
20332: STR
20333: PPUSH
20334: CALL_OW 559
20338: GO 20248
20340: POP
20341: POP
// end ; end ;
20342: LD_VAR 0 1
20346: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20347: LD_INT 0
20349: PPUSH
// if HexInfo ( x , y ) = warehouse then
20350: LD_VAR 0 2
20354: PPUSH
20355: LD_VAR 0 3
20359: PPUSH
20360: CALL_OW 428
20364: PUSH
20365: LD_VAR 0 1
20369: EQUAL
20370: IFFALSE 20397
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20372: LD_ADDR_EXP 85
20376: PUSH
20377: LD_EXP 85
20381: PPUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: LD_INT 0
20389: PPUSH
20390: CALL_OW 1
20394: ST_TO_ADDR
20395: GO 20448
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20397: LD_ADDR_EXP 85
20401: PUSH
20402: LD_EXP 85
20406: PPUSH
20407: LD_VAR 0 1
20411: PPUSH
20412: LD_VAR 0 1
20416: PPUSH
20417: CALL_OW 255
20421: PUSH
20422: LD_VAR 0 1
20426: PUSH
20427: LD_VAR 0 2
20431: PUSH
20432: LD_VAR 0 3
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: PPUSH
20443: CALL_OW 1
20447: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20448: CALL 20457 0 0
// end ;
20452: LD_VAR 0 4
20456: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
20461: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20462: LD_STRING resetWarehouseGatheringPoints();
20464: PPUSH
20465: CALL_OW 559
// if warehouseGatheringPoints then
20469: LD_EXP 85
20473: IFFALSE 20599
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20475: LD_ADDR_VAR 0 3
20479: PUSH
20480: LD_EXP 85
20484: PPUSH
20485: CALL 67861 0 1
20489: ST_TO_ADDR
// for i := 1 to list do
20490: LD_ADDR_VAR 0 2
20494: PUSH
20495: DOUBLE
20496: LD_INT 1
20498: DEC
20499: ST_TO_ADDR
20500: LD_VAR 0 3
20504: PUSH
20505: FOR_TO
20506: IFFALSE 20597
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20508: LD_STRING setWarehouseGatheringPointXY(
20510: PUSH
20511: LD_VAR 0 3
20515: PUSH
20516: LD_VAR 0 2
20520: ARRAY
20521: PUSH
20522: LD_INT 1
20524: ARRAY
20525: STR
20526: PUSH
20527: LD_STRING ,
20529: STR
20530: PUSH
20531: LD_VAR 0 3
20535: PUSH
20536: LD_VAR 0 2
20540: ARRAY
20541: PUSH
20542: LD_INT 2
20544: ARRAY
20545: STR
20546: PUSH
20547: LD_STRING ,
20549: STR
20550: PUSH
20551: LD_VAR 0 3
20555: PUSH
20556: LD_VAR 0 2
20560: ARRAY
20561: PUSH
20562: LD_INT 3
20564: ARRAY
20565: STR
20566: PUSH
20567: LD_STRING ,
20569: STR
20570: PUSH
20571: LD_VAR 0 3
20575: PUSH
20576: LD_VAR 0 2
20580: ARRAY
20581: PUSH
20582: LD_INT 4
20584: ARRAY
20585: STR
20586: PUSH
20587: LD_STRING )
20589: STR
20590: PPUSH
20591: CALL_OW 559
20595: GO 20505
20597: POP
20598: POP
// end ; end ;
20599: LD_VAR 0 1
20603: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20604: LD_EXP 85
20608: IFFALSE 21293
20610: GO 20612
20612: DISABLE
20613: LD_INT 0
20615: PPUSH
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
20620: PPUSH
20621: PPUSH
20622: PPUSH
20623: PPUSH
// begin enable ;
20624: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20625: LD_ADDR_VAR 0 3
20629: PUSH
20630: LD_EXP 85
20634: PPUSH
20635: CALL 67861 0 1
20639: ST_TO_ADDR
// if not list then
20640: LD_VAR 0 3
20644: NOT
20645: IFFALSE 20649
// exit ;
20647: GO 21293
// for i := 1 to list do
20649: LD_ADDR_VAR 0 1
20653: PUSH
20654: DOUBLE
20655: LD_INT 1
20657: DEC
20658: ST_TO_ADDR
20659: LD_VAR 0 3
20663: PUSH
20664: FOR_TO
20665: IFFALSE 21291
// begin depot := list [ i ] [ 2 ] ;
20667: LD_ADDR_VAR 0 8
20671: PUSH
20672: LD_VAR 0 3
20676: PUSH
20677: LD_VAR 0 1
20681: ARRAY
20682: PUSH
20683: LD_INT 2
20685: ARRAY
20686: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20687: LD_ADDR_VAR 0 5
20691: PUSH
20692: LD_VAR 0 3
20696: PUSH
20697: LD_VAR 0 1
20701: ARRAY
20702: PUSH
20703: LD_INT 1
20705: ARRAY
20706: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20707: LD_VAR 0 8
20711: PPUSH
20712: CALL_OW 301
20716: PUSH
20717: LD_VAR 0 5
20721: PUSH
20722: LD_VAR 0 8
20726: PPUSH
20727: CALL_OW 255
20731: NONEQUAL
20732: OR
20733: IFFALSE 20762
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20735: LD_ADDR_EXP 85
20739: PUSH
20740: LD_EXP 85
20744: PPUSH
20745: LD_VAR 0 8
20749: PPUSH
20750: LD_INT 0
20752: PPUSH
20753: CALL_OW 1
20757: ST_TO_ADDR
// exit ;
20758: POP
20759: POP
20760: GO 21293
// end ; x := list [ i ] [ 3 ] ;
20762: LD_ADDR_VAR 0 6
20766: PUSH
20767: LD_VAR 0 3
20771: PUSH
20772: LD_VAR 0 1
20776: ARRAY
20777: PUSH
20778: LD_INT 3
20780: ARRAY
20781: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20782: LD_ADDR_VAR 0 7
20786: PUSH
20787: LD_VAR 0 3
20791: PUSH
20792: LD_VAR 0 1
20796: ARRAY
20797: PUSH
20798: LD_INT 4
20800: ARRAY
20801: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20802: LD_ADDR_VAR 0 9
20806: PUSH
20807: LD_VAR 0 6
20811: PPUSH
20812: LD_VAR 0 7
20816: PPUSH
20817: LD_INT 16
20819: PPUSH
20820: CALL 66449 0 3
20824: ST_TO_ADDR
// if not cratesNearbyPoint then
20825: LD_VAR 0 9
20829: NOT
20830: IFFALSE 20836
// exit ;
20832: POP
20833: POP
20834: GO 21293
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20836: LD_ADDR_VAR 0 4
20840: PUSH
20841: LD_INT 22
20843: PUSH
20844: LD_VAR 0 5
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 3
20855: PUSH
20856: LD_INT 60
20858: PUSH
20859: EMPTY
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 91
20868: PUSH
20869: LD_VAR 0 8
20873: PUSH
20874: LD_INT 6
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: LD_INT 25
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 25
20897: PUSH
20898: LD_INT 16
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: LIST
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 69
20920: PUSH
20921: LD_VAR 0 8
20925: PPUSH
20926: CALL_OW 313
20930: PPUSH
20931: LD_INT 3
20933: PUSH
20934: LD_INT 60
20936: PUSH
20937: EMPTY
20938: LIST
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 25
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 25
20959: PUSH
20960: LD_INT 16
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 72
20980: UNION
20981: ST_TO_ADDR
// if tmp then
20982: LD_VAR 0 4
20986: IFFALSE 21066
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20988: LD_ADDR_VAR 0 4
20992: PUSH
20993: LD_VAR 0 4
20997: PPUSH
20998: LD_INT 3
21000: PPUSH
21001: CALL 64418 0 2
21005: ST_TO_ADDR
// for j in tmp do
21006: LD_ADDR_VAR 0 2
21010: PUSH
21011: LD_VAR 0 4
21015: PUSH
21016: FOR_IN
21017: IFFALSE 21060
// begin if IsInUnit ( j ) then
21019: LD_VAR 0 2
21023: PPUSH
21024: CALL_OW 310
21028: IFFALSE 21039
// ComExit ( j ) ;
21030: LD_VAR 0 2
21034: PPUSH
21035: CALL 64501 0 1
// AddComCollect ( j , x , y ) ;
21039: LD_VAR 0 2
21043: PPUSH
21044: LD_VAR 0 6
21048: PPUSH
21049: LD_VAR 0 7
21053: PPUSH
21054: CALL_OW 177
// end ;
21058: GO 21016
21060: POP
21061: POP
// exit ;
21062: POP
21063: POP
21064: GO 21293
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21066: LD_ADDR_VAR 0 4
21070: PUSH
21071: LD_INT 22
21073: PUSH
21074: LD_VAR 0 5
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 91
21085: PUSH
21086: LD_VAR 0 8
21090: PUSH
21091: LD_INT 8
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 2
21101: PUSH
21102: LD_INT 34
21104: PUSH
21105: LD_INT 12
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 34
21114: PUSH
21115: LD_INT 51
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 34
21124: PUSH
21125: LD_INT 32
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 34
21134: PUSH
21135: LD_INT 89
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: LIST
21153: PPUSH
21154: CALL_OW 69
21158: ST_TO_ADDR
// if tmp then
21159: LD_VAR 0 4
21163: IFFALSE 21289
// begin for j in tmp do
21165: LD_ADDR_VAR 0 2
21169: PUSH
21170: LD_VAR 0 4
21174: PUSH
21175: FOR_IN
21176: IFFALSE 21287
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21178: LD_VAR 0 2
21182: PPUSH
21183: CALL_OW 262
21187: PUSH
21188: LD_INT 3
21190: EQUAL
21191: PUSH
21192: LD_VAR 0 2
21196: PPUSH
21197: CALL_OW 261
21201: PUSH
21202: LD_INT 20
21204: GREATER
21205: OR
21206: PUSH
21207: LD_VAR 0 2
21211: PPUSH
21212: CALL_OW 314
21216: NOT
21217: AND
21218: PUSH
21219: LD_VAR 0 2
21223: PPUSH
21224: CALL_OW 263
21228: PUSH
21229: LD_INT 1
21231: NONEQUAL
21232: PUSH
21233: LD_VAR 0 2
21237: PPUSH
21238: CALL_OW 311
21242: OR
21243: AND
21244: IFFALSE 21285
// begin ComCollect ( j , x , y ) ;
21246: LD_VAR 0 2
21250: PPUSH
21251: LD_VAR 0 6
21255: PPUSH
21256: LD_VAR 0 7
21260: PPUSH
21261: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21265: LD_VAR 0 2
21269: PPUSH
21270: LD_VAR 0 8
21274: PPUSH
21275: CALL_OW 172
// exit ;
21279: POP
21280: POP
21281: POP
21282: POP
21283: GO 21293
// end ;
21285: GO 21175
21287: POP
21288: POP
// end ; end ;
21289: GO 20664
21291: POP
21292: POP
// end ; end_of_file
21293: PPOPN 9
21295: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21296: LD_INT 0
21298: PPUSH
21299: PPUSH
21300: PPUSH
21301: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21302: LD_VAR 0 1
21306: PPUSH
21307: CALL_OW 264
21311: PUSH
21312: LD_INT 91
21314: EQUAL
21315: IFFALSE 21387
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21317: LD_INT 68
21319: PPUSH
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 255
21329: PPUSH
21330: CALL_OW 321
21334: PUSH
21335: LD_INT 2
21337: EQUAL
21338: IFFALSE 21350
// eff := 70 else
21340: LD_ADDR_VAR 0 4
21344: PUSH
21345: LD_INT 70
21347: ST_TO_ADDR
21348: GO 21358
// eff := 30 ;
21350: LD_ADDR_VAR 0 4
21354: PUSH
21355: LD_INT 30
21357: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21358: LD_VAR 0 1
21362: PPUSH
21363: CALL_OW 250
21367: PPUSH
21368: LD_VAR 0 1
21372: PPUSH
21373: CALL_OW 251
21377: PPUSH
21378: LD_VAR 0 4
21382: PPUSH
21383: CALL_OW 495
// end ; end ;
21387: LD_VAR 0 2
21391: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21392: LD_INT 0
21394: PPUSH
// end ;
21395: LD_VAR 0 4
21399: RET
// export function SOS_Command ( cmd ) ; begin
21400: LD_INT 0
21402: PPUSH
// end ;
21403: LD_VAR 0 2
21407: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21408: LD_INT 0
21410: PPUSH
// end ;
21411: LD_VAR 0 6
21415: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21416: LD_INT 0
21418: PPUSH
21419: PPUSH
// if not vehicle or not factory then
21420: LD_VAR 0 1
21424: NOT
21425: PUSH
21426: LD_VAR 0 2
21430: NOT
21431: OR
21432: IFFALSE 21436
// exit ;
21434: GO 21667
// if factoryWaypoints >= factory then
21436: LD_EXP 84
21440: PUSH
21441: LD_VAR 0 2
21445: GREATEREQUAL
21446: IFFALSE 21667
// if factoryWaypoints [ factory ] then
21448: LD_EXP 84
21452: PUSH
21453: LD_VAR 0 2
21457: ARRAY
21458: IFFALSE 21667
// begin if GetControl ( vehicle ) = control_manual then
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL_OW 263
21469: PUSH
21470: LD_INT 1
21472: EQUAL
21473: IFFALSE 21554
// begin driver := IsDrivenBy ( vehicle ) ;
21475: LD_ADDR_VAR 0 4
21479: PUSH
21480: LD_VAR 0 1
21484: PPUSH
21485: CALL_OW 311
21489: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21490: LD_VAR 0 4
21494: PPUSH
21495: LD_EXP 84
21499: PUSH
21500: LD_VAR 0 2
21504: ARRAY
21505: PUSH
21506: LD_INT 3
21508: ARRAY
21509: PPUSH
21510: LD_EXP 84
21514: PUSH
21515: LD_VAR 0 2
21519: ARRAY
21520: PUSH
21521: LD_INT 4
21523: ARRAY
21524: PPUSH
21525: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21529: LD_VAR 0 4
21533: PPUSH
21534: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21538: LD_VAR 0 4
21542: PPUSH
21543: LD_VAR 0 2
21547: PPUSH
21548: CALL_OW 180
// end else
21552: GO 21667
// if GetControl ( vehicle ) = control_remote then
21554: LD_VAR 0 1
21558: PPUSH
21559: CALL_OW 263
21563: PUSH
21564: LD_INT 2
21566: EQUAL
21567: IFFALSE 21628
// begin wait ( 0 0$2 ) ;
21569: LD_INT 70
21571: PPUSH
21572: CALL_OW 67
// if Connect ( vehicle ) then
21576: LD_VAR 0 1
21580: PPUSH
21581: CALL 34720 0 1
21585: IFFALSE 21626
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21587: LD_VAR 0 1
21591: PPUSH
21592: LD_EXP 84
21596: PUSH
21597: LD_VAR 0 2
21601: ARRAY
21602: PUSH
21603: LD_INT 3
21605: ARRAY
21606: PPUSH
21607: LD_EXP 84
21611: PUSH
21612: LD_VAR 0 2
21616: ARRAY
21617: PUSH
21618: LD_INT 4
21620: ARRAY
21621: PPUSH
21622: CALL_OW 171
// end else
21626: GO 21667
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21628: LD_VAR 0 1
21632: PPUSH
21633: LD_EXP 84
21637: PUSH
21638: LD_VAR 0 2
21642: ARRAY
21643: PUSH
21644: LD_INT 3
21646: ARRAY
21647: PPUSH
21648: LD_EXP 84
21652: PUSH
21653: LD_VAR 0 2
21657: ARRAY
21658: PUSH
21659: LD_INT 4
21661: ARRAY
21662: PPUSH
21663: CALL_OW 171
// end ; end ;
21667: LD_VAR 0 3
21671: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21672: LD_INT 0
21674: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21675: LD_VAR 0 1
21679: PUSH
21680: LD_INT 250
21682: EQUAL
21683: PUSH
21684: LD_VAR 0 2
21688: PPUSH
21689: CALL_OW 264
21693: PUSH
21694: LD_INT 81
21696: EQUAL
21697: AND
21698: IFFALSE 21719
// MinerPlaceMine ( unit , x , y ) ;
21700: LD_VAR 0 2
21704: PPUSH
21705: LD_VAR 0 4
21709: PPUSH
21710: LD_VAR 0 5
21714: PPUSH
21715: CALL 24709 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21719: LD_VAR 0 1
21723: PUSH
21724: LD_INT 251
21726: EQUAL
21727: PUSH
21728: LD_VAR 0 2
21732: PPUSH
21733: CALL_OW 264
21737: PUSH
21738: LD_INT 81
21740: EQUAL
21741: AND
21742: IFFALSE 21763
// MinerDetonateMine ( unit , x , y ) ;
21744: LD_VAR 0 2
21748: PPUSH
21749: LD_VAR 0 4
21753: PPUSH
21754: LD_VAR 0 5
21758: PPUSH
21759: CALL 24984 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21763: LD_VAR 0 1
21767: PUSH
21768: LD_INT 252
21770: EQUAL
21771: PUSH
21772: LD_VAR 0 2
21776: PPUSH
21777: CALL_OW 264
21781: PUSH
21782: LD_INT 81
21784: EQUAL
21785: AND
21786: IFFALSE 21807
// MinerCreateMinefield ( unit , x , y ) ;
21788: LD_VAR 0 2
21792: PPUSH
21793: LD_VAR 0 4
21797: PPUSH
21798: LD_VAR 0 5
21802: PPUSH
21803: CALL 25401 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21807: LD_VAR 0 1
21811: PUSH
21812: LD_INT 253
21814: EQUAL
21815: PUSH
21816: LD_VAR 0 2
21820: PPUSH
21821: CALL_OW 257
21825: PUSH
21826: LD_INT 5
21828: EQUAL
21829: AND
21830: IFFALSE 21851
// ComBinocular ( unit , x , y ) ;
21832: LD_VAR 0 2
21836: PPUSH
21837: LD_VAR 0 4
21841: PPUSH
21842: LD_VAR 0 5
21846: PPUSH
21847: CALL 25770 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21851: LD_VAR 0 1
21855: PUSH
21856: LD_INT 254
21858: EQUAL
21859: PUSH
21860: LD_VAR 0 2
21864: PPUSH
21865: CALL_OW 264
21869: PUSH
21870: LD_INT 99
21872: EQUAL
21873: AND
21874: PUSH
21875: LD_VAR 0 3
21879: PPUSH
21880: CALL_OW 263
21884: PUSH
21885: LD_INT 3
21887: EQUAL
21888: AND
21889: IFFALSE 21905
// HackDestroyVehicle ( unit , selectedUnit ) ;
21891: LD_VAR 0 2
21895: PPUSH
21896: LD_VAR 0 3
21900: PPUSH
21901: CALL 24073 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21905: LD_VAR 0 1
21909: PUSH
21910: LD_INT 255
21912: EQUAL
21913: PUSH
21914: LD_VAR 0 2
21918: PPUSH
21919: CALL_OW 264
21923: PUSH
21924: LD_INT 14
21926: PUSH
21927: LD_INT 53
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: IN
21934: AND
21935: PUSH
21936: LD_VAR 0 4
21940: PPUSH
21941: LD_VAR 0 5
21945: PPUSH
21946: CALL_OW 488
21950: AND
21951: IFFALSE 21975
// CutTreeXYR ( unit , x , y , 12 ) ;
21953: LD_VAR 0 2
21957: PPUSH
21958: LD_VAR 0 4
21962: PPUSH
21963: LD_VAR 0 5
21967: PPUSH
21968: LD_INT 12
21970: PPUSH
21971: CALL 22070 0 4
// if cmd = 256 then
21975: LD_VAR 0 1
21979: PUSH
21980: LD_INT 256
21982: EQUAL
21983: IFFALSE 22004
// SetFactoryWaypoint ( unit , x , y ) ;
21985: LD_VAR 0 2
21989: PPUSH
21990: LD_VAR 0 4
21994: PPUSH
21995: LD_VAR 0 5
21999: PPUSH
22000: CALL 19985 0 3
// if cmd = 257 then
22004: LD_VAR 0 1
22008: PUSH
22009: LD_INT 257
22011: EQUAL
22012: IFFALSE 22033
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22014: LD_VAR 0 2
22018: PPUSH
22019: LD_VAR 0 4
22023: PPUSH
22024: LD_VAR 0 5
22028: PPUSH
22029: CALL 20347 0 3
// if cmd = 258 then
22033: LD_VAR 0 1
22037: PUSH
22038: LD_INT 258
22040: EQUAL
22041: IFFALSE 22065
// BurnTreeXYR ( unit , x , y , 8 ) ;
22043: LD_VAR 0 2
22047: PPUSH
22048: LD_VAR 0 4
22052: PPUSH
22053: LD_VAR 0 5
22057: PPUSH
22058: LD_INT 8
22060: PPUSH
22061: CALL 22464 0 4
// end ;
22065: LD_VAR 0 6
22069: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22070: LD_INT 0
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 302
22090: NOT
22091: PUSH
22092: LD_VAR 0 2
22096: PPUSH
22097: LD_VAR 0 3
22101: PPUSH
22102: CALL_OW 488
22106: NOT
22107: OR
22108: PUSH
22109: LD_VAR 0 4
22113: NOT
22114: OR
22115: IFFALSE 22119
// exit ;
22117: GO 22459
// list := [ ] ;
22119: LD_ADDR_VAR 0 13
22123: PUSH
22124: EMPTY
22125: ST_TO_ADDR
// if x - r < 0 then
22126: LD_VAR 0 2
22130: PUSH
22131: LD_VAR 0 4
22135: MINUS
22136: PUSH
22137: LD_INT 0
22139: LESS
22140: IFFALSE 22152
// min_x := 0 else
22142: LD_ADDR_VAR 0 7
22146: PUSH
22147: LD_INT 0
22149: ST_TO_ADDR
22150: GO 22168
// min_x := x - r ;
22152: LD_ADDR_VAR 0 7
22156: PUSH
22157: LD_VAR 0 2
22161: PUSH
22162: LD_VAR 0 4
22166: MINUS
22167: ST_TO_ADDR
// if y - r < 0 then
22168: LD_VAR 0 3
22172: PUSH
22173: LD_VAR 0 4
22177: MINUS
22178: PUSH
22179: LD_INT 0
22181: LESS
22182: IFFALSE 22194
// min_y := 0 else
22184: LD_ADDR_VAR 0 8
22188: PUSH
22189: LD_INT 0
22191: ST_TO_ADDR
22192: GO 22210
// min_y := y - r ;
22194: LD_ADDR_VAR 0 8
22198: PUSH
22199: LD_VAR 0 3
22203: PUSH
22204: LD_VAR 0 4
22208: MINUS
22209: ST_TO_ADDR
// max_x := x + r ;
22210: LD_ADDR_VAR 0 9
22214: PUSH
22215: LD_VAR 0 2
22219: PUSH
22220: LD_VAR 0 4
22224: PLUS
22225: ST_TO_ADDR
// max_y := y + r ;
22226: LD_ADDR_VAR 0 10
22230: PUSH
22231: LD_VAR 0 3
22235: PUSH
22236: LD_VAR 0 4
22240: PLUS
22241: ST_TO_ADDR
// for _x = min_x to max_x do
22242: LD_ADDR_VAR 0 11
22246: PUSH
22247: DOUBLE
22248: LD_VAR 0 7
22252: DEC
22253: ST_TO_ADDR
22254: LD_VAR 0 9
22258: PUSH
22259: FOR_TO
22260: IFFALSE 22377
// for _y = min_y to max_y do
22262: LD_ADDR_VAR 0 12
22266: PUSH
22267: DOUBLE
22268: LD_VAR 0 8
22272: DEC
22273: ST_TO_ADDR
22274: LD_VAR 0 10
22278: PUSH
22279: FOR_TO
22280: IFFALSE 22373
// begin if not ValidHex ( _x , _y ) then
22282: LD_VAR 0 11
22286: PPUSH
22287: LD_VAR 0 12
22291: PPUSH
22292: CALL_OW 488
22296: NOT
22297: IFFALSE 22301
// continue ;
22299: GO 22279
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22301: LD_VAR 0 11
22305: PPUSH
22306: LD_VAR 0 12
22310: PPUSH
22311: CALL_OW 351
22315: PUSH
22316: LD_VAR 0 11
22320: PPUSH
22321: LD_VAR 0 12
22325: PPUSH
22326: CALL_OW 554
22330: AND
22331: IFFALSE 22371
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22333: LD_ADDR_VAR 0 13
22337: PUSH
22338: LD_VAR 0 13
22342: PPUSH
22343: LD_VAR 0 13
22347: PUSH
22348: LD_INT 1
22350: PLUS
22351: PPUSH
22352: LD_VAR 0 11
22356: PUSH
22357: LD_VAR 0 12
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PPUSH
22366: CALL_OW 2
22370: ST_TO_ADDR
// end ;
22371: GO 22279
22373: POP
22374: POP
22375: GO 22259
22377: POP
22378: POP
// if not list then
22379: LD_VAR 0 13
22383: NOT
22384: IFFALSE 22388
// exit ;
22386: GO 22459
// for i in list do
22388: LD_ADDR_VAR 0 6
22392: PUSH
22393: LD_VAR 0 13
22397: PUSH
22398: FOR_IN
22399: IFFALSE 22457
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_STRING M
22408: PUSH
22409: LD_VAR 0 6
22413: PUSH
22414: LD_INT 1
22416: ARRAY
22417: PUSH
22418: LD_VAR 0 6
22422: PUSH
22423: LD_INT 2
22425: ARRAY
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: LD_INT 0
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: PUSH
22448: EMPTY
22449: LIST
22450: PPUSH
22451: CALL_OW 447
22455: GO 22398
22457: POP
22458: POP
// end ;
22459: LD_VAR 0 5
22463: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
22468: PPUSH
22469: PPUSH
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL_OW 302
22485: NOT
22486: PUSH
22487: LD_VAR 0 2
22491: PPUSH
22492: LD_VAR 0 3
22496: PPUSH
22497: CALL_OW 488
22501: NOT
22502: OR
22503: PUSH
22504: LD_VAR 0 4
22508: NOT
22509: OR
22510: IFFALSE 22514
// exit ;
22512: GO 23027
// list := [ ] ;
22514: LD_ADDR_VAR 0 13
22518: PUSH
22519: EMPTY
22520: ST_TO_ADDR
// if x - r < 0 then
22521: LD_VAR 0 2
22525: PUSH
22526: LD_VAR 0 4
22530: MINUS
22531: PUSH
22532: LD_INT 0
22534: LESS
22535: IFFALSE 22547
// min_x := 0 else
22537: LD_ADDR_VAR 0 7
22541: PUSH
22542: LD_INT 0
22544: ST_TO_ADDR
22545: GO 22563
// min_x := x - r ;
22547: LD_ADDR_VAR 0 7
22551: PUSH
22552: LD_VAR 0 2
22556: PUSH
22557: LD_VAR 0 4
22561: MINUS
22562: ST_TO_ADDR
// if y - r < 0 then
22563: LD_VAR 0 3
22567: PUSH
22568: LD_VAR 0 4
22572: MINUS
22573: PUSH
22574: LD_INT 0
22576: LESS
22577: IFFALSE 22589
// min_y := 0 else
22579: LD_ADDR_VAR 0 8
22583: PUSH
22584: LD_INT 0
22586: ST_TO_ADDR
22587: GO 22605
// min_y := y - r ;
22589: LD_ADDR_VAR 0 8
22593: PUSH
22594: LD_VAR 0 3
22598: PUSH
22599: LD_VAR 0 4
22603: MINUS
22604: ST_TO_ADDR
// max_x := x + r ;
22605: LD_ADDR_VAR 0 9
22609: PUSH
22610: LD_VAR 0 2
22614: PUSH
22615: LD_VAR 0 4
22619: PLUS
22620: ST_TO_ADDR
// max_y := y + r ;
22621: LD_ADDR_VAR 0 10
22625: PUSH
22626: LD_VAR 0 3
22630: PUSH
22631: LD_VAR 0 4
22635: PLUS
22636: ST_TO_ADDR
// for _x = min_x to max_x do
22637: LD_ADDR_VAR 0 11
22641: PUSH
22642: DOUBLE
22643: LD_VAR 0 7
22647: DEC
22648: ST_TO_ADDR
22649: LD_VAR 0 9
22653: PUSH
22654: FOR_TO
22655: IFFALSE 22772
// for _y = min_y to max_y do
22657: LD_ADDR_VAR 0 12
22661: PUSH
22662: DOUBLE
22663: LD_VAR 0 8
22667: DEC
22668: ST_TO_ADDR
22669: LD_VAR 0 10
22673: PUSH
22674: FOR_TO
22675: IFFALSE 22768
// begin if not ValidHex ( _x , _y ) then
22677: LD_VAR 0 11
22681: PPUSH
22682: LD_VAR 0 12
22686: PPUSH
22687: CALL_OW 488
22691: NOT
22692: IFFALSE 22696
// continue ;
22694: GO 22674
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22696: LD_VAR 0 11
22700: PPUSH
22701: LD_VAR 0 12
22705: PPUSH
22706: CALL_OW 351
22710: PUSH
22711: LD_VAR 0 11
22715: PPUSH
22716: LD_VAR 0 12
22720: PPUSH
22721: CALL_OW 554
22725: AND
22726: IFFALSE 22766
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22728: LD_ADDR_VAR 0 13
22732: PUSH
22733: LD_VAR 0 13
22737: PPUSH
22738: LD_VAR 0 13
22742: PUSH
22743: LD_INT 1
22745: PLUS
22746: PPUSH
22747: LD_VAR 0 11
22751: PUSH
22752: LD_VAR 0 12
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PPUSH
22761: CALL_OW 2
22765: ST_TO_ADDR
// end ;
22766: GO 22674
22768: POP
22769: POP
22770: GO 22654
22772: POP
22773: POP
// if not list then
22774: LD_VAR 0 13
22778: NOT
22779: IFFALSE 22783
// exit ;
22781: GO 23027
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22783: LD_ADDR_VAR 0 13
22787: PUSH
22788: LD_VAR 0 1
22792: PPUSH
22793: LD_VAR 0 13
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: LD_INT 1
22803: PPUSH
22804: CALL 31862 0 4
22808: ST_TO_ADDR
// ComStop ( flame ) ;
22809: LD_VAR 0 1
22813: PPUSH
22814: CALL_OW 141
// for i in list do
22818: LD_ADDR_VAR 0 6
22822: PUSH
22823: LD_VAR 0 13
22827: PUSH
22828: FOR_IN
22829: IFFALSE 22860
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22831: LD_VAR 0 1
22835: PPUSH
22836: LD_VAR 0 6
22840: PUSH
22841: LD_INT 1
22843: ARRAY
22844: PPUSH
22845: LD_VAR 0 6
22849: PUSH
22850: LD_INT 2
22852: ARRAY
22853: PPUSH
22854: CALL_OW 176
22858: GO 22828
22860: POP
22861: POP
// repeat wait ( 0 0$1 ) ;
22862: LD_INT 35
22864: PPUSH
22865: CALL_OW 67
// task := GetTaskList ( flame ) ;
22869: LD_ADDR_VAR 0 14
22873: PUSH
22874: LD_VAR 0 1
22878: PPUSH
22879: CALL_OW 437
22883: ST_TO_ADDR
// if not task then
22884: LD_VAR 0 14
22888: NOT
22889: IFFALSE 22893
// exit ;
22891: GO 23027
// if task [ 1 ] [ 1 ] <> | then
22893: LD_VAR 0 14
22897: PUSH
22898: LD_INT 1
22900: ARRAY
22901: PUSH
22902: LD_INT 1
22904: ARRAY
22905: PUSH
22906: LD_STRING |
22908: NONEQUAL
22909: IFFALSE 22913
// exit ;
22911: GO 23027
// _x := task [ 1 ] [ 2 ] ;
22913: LD_ADDR_VAR 0 11
22917: PUSH
22918: LD_VAR 0 14
22922: PUSH
22923: LD_INT 1
22925: ARRAY
22926: PUSH
22927: LD_INT 2
22929: ARRAY
22930: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22931: LD_ADDR_VAR 0 12
22935: PUSH
22936: LD_VAR 0 14
22940: PUSH
22941: LD_INT 1
22943: ARRAY
22944: PUSH
22945: LD_INT 3
22947: ARRAY
22948: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22949: LD_VAR 0 11
22953: PPUSH
22954: LD_VAR 0 12
22958: PPUSH
22959: CALL_OW 351
22963: NOT
22964: PUSH
22965: LD_VAR 0 11
22969: PPUSH
22970: LD_VAR 0 12
22974: PPUSH
22975: CALL_OW 554
22979: NOT
22980: OR
22981: IFFALSE 23015
// begin task := Delete ( task , 1 ) ;
22983: LD_ADDR_VAR 0 14
22987: PUSH
22988: LD_VAR 0 14
22992: PPUSH
22993: LD_INT 1
22995: PPUSH
22996: CALL_OW 3
23000: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23001: LD_VAR 0 1
23005: PPUSH
23006: LD_VAR 0 14
23010: PPUSH
23011: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 314
23024: NOT
23025: IFFALSE 22862
// end ;
23027: LD_VAR 0 5
23031: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23032: LD_EXP 87
23036: NOT
23037: IFFALSE 23087
23039: GO 23041
23041: DISABLE
// begin initHack := true ;
23042: LD_ADDR_EXP 87
23046: PUSH
23047: LD_INT 1
23049: ST_TO_ADDR
// hackTanks := [ ] ;
23050: LD_ADDR_EXP 88
23054: PUSH
23055: EMPTY
23056: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23057: LD_ADDR_EXP 89
23061: PUSH
23062: EMPTY
23063: ST_TO_ADDR
// hackLimit := 3 ;
23064: LD_ADDR_EXP 90
23068: PUSH
23069: LD_INT 3
23071: ST_TO_ADDR
// hackDist := 12 ;
23072: LD_ADDR_EXP 91
23076: PUSH
23077: LD_INT 12
23079: ST_TO_ADDR
// hackCounter := [ ] ;
23080: LD_ADDR_EXP 92
23084: PUSH
23085: EMPTY
23086: ST_TO_ADDR
// end ;
23087: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23088: LD_EXP 87
23092: PUSH
23093: LD_INT 34
23095: PUSH
23096: LD_INT 99
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PPUSH
23103: CALL_OW 69
23107: AND
23108: IFFALSE 23361
23110: GO 23112
23112: DISABLE
23113: LD_INT 0
23115: PPUSH
23116: PPUSH
// begin enable ;
23117: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23118: LD_ADDR_VAR 0 1
23122: PUSH
23123: LD_INT 34
23125: PUSH
23126: LD_INT 99
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PPUSH
23133: CALL_OW 69
23137: PUSH
23138: FOR_IN
23139: IFFALSE 23359
// begin if not i in hackTanks then
23141: LD_VAR 0 1
23145: PUSH
23146: LD_EXP 88
23150: IN
23151: NOT
23152: IFFALSE 23235
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23154: LD_ADDR_EXP 88
23158: PUSH
23159: LD_EXP 88
23163: PPUSH
23164: LD_EXP 88
23168: PUSH
23169: LD_INT 1
23171: PLUS
23172: PPUSH
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 1
23182: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23183: LD_ADDR_EXP 89
23187: PUSH
23188: LD_EXP 89
23192: PPUSH
23193: LD_EXP 89
23197: PUSH
23198: LD_INT 1
23200: PLUS
23201: PPUSH
23202: EMPTY
23203: PPUSH
23204: CALL_OW 1
23208: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23209: LD_ADDR_EXP 92
23213: PUSH
23214: LD_EXP 92
23218: PPUSH
23219: LD_EXP 92
23223: PUSH
23224: LD_INT 1
23226: PLUS
23227: PPUSH
23228: EMPTY
23229: PPUSH
23230: CALL_OW 1
23234: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23235: LD_VAR 0 1
23239: PPUSH
23240: CALL_OW 302
23244: NOT
23245: IFFALSE 23258
// begin HackUnlinkAll ( i ) ;
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL 23364 0 1
// continue ;
23256: GO 23138
// end ; HackCheckCapturedStatus ( i ) ;
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL 23807 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23267: LD_ADDR_VAR 0 2
23271: PUSH
23272: LD_INT 81
23274: PUSH
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 255
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 33
23291: PUSH
23292: LD_INT 3
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 91
23301: PUSH
23302: LD_VAR 0 1
23306: PUSH
23307: LD_EXP 91
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 50
23319: PUSH
23320: EMPTY
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: PPUSH
23329: CALL_OW 69
23333: ST_TO_ADDR
// if not tmp then
23334: LD_VAR 0 2
23338: NOT
23339: IFFALSE 23343
// continue ;
23341: GO 23138
// HackLink ( i , tmp ) ;
23343: LD_VAR 0 1
23347: PPUSH
23348: LD_VAR 0 2
23352: PPUSH
23353: CALL 23500 0 2
// end ;
23357: GO 23138
23359: POP
23360: POP
// end ;
23361: PPOPN 2
23363: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23364: LD_INT 0
23366: PPUSH
23367: PPUSH
23368: PPUSH
// if not hack in hackTanks then
23369: LD_VAR 0 1
23373: PUSH
23374: LD_EXP 88
23378: IN
23379: NOT
23380: IFFALSE 23384
// exit ;
23382: GO 23495
// index := GetElementIndex ( hackTanks , hack ) ;
23384: LD_ADDR_VAR 0 4
23388: PUSH
23389: LD_EXP 88
23393: PPUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL 31159 0 2
23403: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23404: LD_EXP 89
23408: PUSH
23409: LD_VAR 0 4
23413: ARRAY
23414: IFFALSE 23495
// begin for i in hackTanksCaptured [ index ] do
23416: LD_ADDR_VAR 0 3
23420: PUSH
23421: LD_EXP 89
23425: PUSH
23426: LD_VAR 0 4
23430: ARRAY
23431: PUSH
23432: FOR_IN
23433: IFFALSE 23459
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23435: LD_VAR 0 3
23439: PUSH
23440: LD_INT 1
23442: ARRAY
23443: PPUSH
23444: LD_VAR 0 3
23448: PUSH
23449: LD_INT 2
23451: ARRAY
23452: PPUSH
23453: CALL_OW 235
23457: GO 23432
23459: POP
23460: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23461: LD_ADDR_EXP 89
23465: PUSH
23466: LD_EXP 89
23470: PPUSH
23471: LD_VAR 0 4
23475: PPUSH
23476: EMPTY
23477: PPUSH
23478: CALL_OW 1
23482: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: LD_INT 0
23490: PPUSH
23491: CALL_OW 505
// end ; end ;
23495: LD_VAR 0 2
23499: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23500: LD_INT 0
23502: PPUSH
23503: PPUSH
23504: PPUSH
// if not hack in hackTanks or not vehicles then
23505: LD_VAR 0 1
23509: PUSH
23510: LD_EXP 88
23514: IN
23515: NOT
23516: PUSH
23517: LD_VAR 0 2
23521: NOT
23522: OR
23523: IFFALSE 23527
// exit ;
23525: GO 23802
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_VAR 0 1
23536: PPUSH
23537: LD_VAR 0 2
23541: PPUSH
23542: LD_INT 1
23544: PPUSH
23545: LD_INT 1
23547: PPUSH
23548: CALL 31809 0 4
23552: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23553: LD_ADDR_VAR 0 5
23557: PUSH
23558: LD_EXP 88
23562: PPUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: CALL 31159 0 2
23572: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23573: LD_EXP 89
23577: PUSH
23578: LD_VAR 0 5
23582: ARRAY
23583: PUSH
23584: LD_EXP 90
23588: LESS
23589: IFFALSE 23778
// begin for i := 1 to vehicles do
23591: LD_ADDR_VAR 0 4
23595: PUSH
23596: DOUBLE
23597: LD_INT 1
23599: DEC
23600: ST_TO_ADDR
23601: LD_VAR 0 2
23605: PUSH
23606: FOR_TO
23607: IFFALSE 23776
// begin if hackTanksCaptured [ index ] = hackLimit then
23609: LD_EXP 89
23613: PUSH
23614: LD_VAR 0 5
23618: ARRAY
23619: PUSH
23620: LD_EXP 90
23624: EQUAL
23625: IFFALSE 23629
// break ;
23627: GO 23776
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23629: LD_ADDR_EXP 92
23633: PUSH
23634: LD_EXP 92
23638: PPUSH
23639: LD_VAR 0 5
23643: PPUSH
23644: LD_EXP 92
23648: PUSH
23649: LD_VAR 0 5
23653: ARRAY
23654: PUSH
23655: LD_INT 1
23657: PLUS
23658: PPUSH
23659: CALL_OW 1
23663: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23664: LD_ADDR_EXP 89
23668: PUSH
23669: LD_EXP 89
23673: PPUSH
23674: LD_VAR 0 5
23678: PUSH
23679: LD_EXP 89
23683: PUSH
23684: LD_VAR 0 5
23688: ARRAY
23689: PUSH
23690: LD_INT 1
23692: PLUS
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: LD_VAR 0 2
23702: PUSH
23703: LD_VAR 0 4
23707: ARRAY
23708: PUSH
23709: LD_VAR 0 2
23713: PUSH
23714: LD_VAR 0 4
23718: ARRAY
23719: PPUSH
23720: CALL_OW 255
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PPUSH
23729: CALL 31374 0 3
23733: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23734: LD_VAR 0 2
23738: PUSH
23739: LD_VAR 0 4
23743: ARRAY
23744: PPUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 255
23754: PPUSH
23755: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23759: LD_VAR 0 2
23763: PUSH
23764: LD_VAR 0 4
23768: ARRAY
23769: PPUSH
23770: CALL_OW 141
// end ;
23774: GO 23606
23776: POP
23777: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23778: LD_VAR 0 1
23782: PPUSH
23783: LD_EXP 89
23787: PUSH
23788: LD_VAR 0 5
23792: ARRAY
23793: PUSH
23794: LD_INT 0
23796: PLUS
23797: PPUSH
23798: CALL_OW 505
// end ;
23802: LD_VAR 0 3
23806: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23807: LD_INT 0
23809: PPUSH
23810: PPUSH
23811: PPUSH
23812: PPUSH
// if not hack in hackTanks then
23813: LD_VAR 0 1
23817: PUSH
23818: LD_EXP 88
23822: IN
23823: NOT
23824: IFFALSE 23828
// exit ;
23826: GO 24068
// index := GetElementIndex ( hackTanks , hack ) ;
23828: LD_ADDR_VAR 0 4
23832: PUSH
23833: LD_EXP 88
23837: PPUSH
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL 31159 0 2
23847: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23848: LD_ADDR_VAR 0 3
23852: PUSH
23853: DOUBLE
23854: LD_EXP 89
23858: PUSH
23859: LD_VAR 0 4
23863: ARRAY
23864: INC
23865: ST_TO_ADDR
23866: LD_INT 1
23868: PUSH
23869: FOR_DOWNTO
23870: IFFALSE 24042
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23872: LD_ADDR_VAR 0 5
23876: PUSH
23877: LD_EXP 89
23881: PUSH
23882: LD_VAR 0 4
23886: ARRAY
23887: PUSH
23888: LD_VAR 0 3
23892: ARRAY
23893: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23894: LD_VAR 0 5
23898: PUSH
23899: LD_INT 1
23901: ARRAY
23902: PPUSH
23903: CALL_OW 302
23907: NOT
23908: PUSH
23909: LD_VAR 0 5
23913: PUSH
23914: LD_INT 1
23916: ARRAY
23917: PPUSH
23918: CALL_OW 255
23922: PUSH
23923: LD_VAR 0 1
23927: PPUSH
23928: CALL_OW 255
23932: NONEQUAL
23933: OR
23934: IFFALSE 24040
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23936: LD_VAR 0 5
23940: PUSH
23941: LD_INT 1
23943: ARRAY
23944: PPUSH
23945: CALL_OW 305
23949: PUSH
23950: LD_VAR 0 5
23954: PUSH
23955: LD_INT 1
23957: ARRAY
23958: PPUSH
23959: CALL_OW 255
23963: PUSH
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 255
23973: EQUAL
23974: AND
23975: IFFALSE 23999
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23977: LD_VAR 0 5
23981: PUSH
23982: LD_INT 1
23984: ARRAY
23985: PPUSH
23986: LD_VAR 0 5
23990: PUSH
23991: LD_INT 2
23993: ARRAY
23994: PPUSH
23995: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23999: LD_ADDR_EXP 89
24003: PUSH
24004: LD_EXP 89
24008: PPUSH
24009: LD_VAR 0 4
24013: PPUSH
24014: LD_EXP 89
24018: PUSH
24019: LD_VAR 0 4
24023: ARRAY
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: CALL_OW 3
24034: PPUSH
24035: CALL_OW 1
24039: ST_TO_ADDR
// end ; end ;
24040: GO 23869
24042: POP
24043: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24044: LD_VAR 0 1
24048: PPUSH
24049: LD_EXP 89
24053: PUSH
24054: LD_VAR 0 4
24058: ARRAY
24059: PUSH
24060: LD_INT 0
24062: PLUS
24063: PPUSH
24064: CALL_OW 505
// end ;
24068: LD_VAR 0 2
24072: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24073: LD_INT 0
24075: PPUSH
24076: PPUSH
24077: PPUSH
24078: PPUSH
// if not hack in hackTanks then
24079: LD_VAR 0 1
24083: PUSH
24084: LD_EXP 88
24088: IN
24089: NOT
24090: IFFALSE 24094
// exit ;
24092: GO 24179
// index := GetElementIndex ( hackTanks , hack ) ;
24094: LD_ADDR_VAR 0 5
24098: PUSH
24099: LD_EXP 88
24103: PPUSH
24104: LD_VAR 0 1
24108: PPUSH
24109: CALL 31159 0 2
24113: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24114: LD_ADDR_VAR 0 4
24118: PUSH
24119: DOUBLE
24120: LD_INT 1
24122: DEC
24123: ST_TO_ADDR
24124: LD_EXP 89
24128: PUSH
24129: LD_VAR 0 5
24133: ARRAY
24134: PUSH
24135: FOR_TO
24136: IFFALSE 24177
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24138: LD_EXP 89
24142: PUSH
24143: LD_VAR 0 5
24147: ARRAY
24148: PUSH
24149: LD_VAR 0 4
24153: ARRAY
24154: PUSH
24155: LD_INT 1
24157: ARRAY
24158: PUSH
24159: LD_VAR 0 2
24163: EQUAL
24164: IFFALSE 24175
// KillUnit ( vehicle ) ;
24166: LD_VAR 0 2
24170: PPUSH
24171: CALL_OW 66
24175: GO 24135
24177: POP
24178: POP
// end ;
24179: LD_VAR 0 3
24183: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24184: LD_EXP 93
24188: NOT
24189: IFFALSE 24224
24191: GO 24193
24193: DISABLE
// begin initMiner := true ;
24194: LD_ADDR_EXP 93
24198: PUSH
24199: LD_INT 1
24201: ST_TO_ADDR
// minersList := [ ] ;
24202: LD_ADDR_EXP 94
24206: PUSH
24207: EMPTY
24208: ST_TO_ADDR
// minerMinesList := [ ] ;
24209: LD_ADDR_EXP 95
24213: PUSH
24214: EMPTY
24215: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24216: LD_ADDR_EXP 96
24220: PUSH
24221: LD_INT 5
24223: ST_TO_ADDR
// end ;
24224: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24225: LD_EXP 93
24229: PUSH
24230: LD_INT 34
24232: PUSH
24233: LD_INT 81
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PPUSH
24240: CALL_OW 69
24244: AND
24245: IFFALSE 24706
24247: GO 24249
24249: DISABLE
24250: LD_INT 0
24252: PPUSH
24253: PPUSH
24254: PPUSH
24255: PPUSH
// begin enable ;
24256: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24257: LD_ADDR_VAR 0 1
24261: PUSH
24262: LD_INT 34
24264: PUSH
24265: LD_INT 81
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PPUSH
24272: CALL_OW 69
24276: PUSH
24277: FOR_IN
24278: IFFALSE 24350
// begin if not i in minersList then
24280: LD_VAR 0 1
24284: PUSH
24285: LD_EXP 94
24289: IN
24290: NOT
24291: IFFALSE 24348
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24293: LD_ADDR_EXP 94
24297: PUSH
24298: LD_EXP 94
24302: PPUSH
24303: LD_EXP 94
24307: PUSH
24308: LD_INT 1
24310: PLUS
24311: PPUSH
24312: LD_VAR 0 1
24316: PPUSH
24317: CALL_OW 1
24321: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24322: LD_ADDR_EXP 95
24326: PUSH
24327: LD_EXP 95
24331: PPUSH
24332: LD_EXP 95
24336: PUSH
24337: LD_INT 1
24339: PLUS
24340: PPUSH
24341: EMPTY
24342: PPUSH
24343: CALL_OW 1
24347: ST_TO_ADDR
// end end ;
24348: GO 24277
24350: POP
24351: POP
// for i := minerMinesList downto 1 do
24352: LD_ADDR_VAR 0 1
24356: PUSH
24357: DOUBLE
24358: LD_EXP 95
24362: INC
24363: ST_TO_ADDR
24364: LD_INT 1
24366: PUSH
24367: FOR_DOWNTO
24368: IFFALSE 24704
// begin if IsLive ( minersList [ i ] ) then
24370: LD_EXP 94
24374: PUSH
24375: LD_VAR 0 1
24379: ARRAY
24380: PPUSH
24381: CALL_OW 300
24385: IFFALSE 24413
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24387: LD_EXP 94
24391: PUSH
24392: LD_VAR 0 1
24396: ARRAY
24397: PPUSH
24398: LD_EXP 95
24402: PUSH
24403: LD_VAR 0 1
24407: ARRAY
24408: PPUSH
24409: CALL_OW 505
// if not minerMinesList [ i ] then
24413: LD_EXP 95
24417: PUSH
24418: LD_VAR 0 1
24422: ARRAY
24423: NOT
24424: IFFALSE 24428
// continue ;
24426: GO 24367
// for j := minerMinesList [ i ] downto 1 do
24428: LD_ADDR_VAR 0 2
24432: PUSH
24433: DOUBLE
24434: LD_EXP 95
24438: PUSH
24439: LD_VAR 0 1
24443: ARRAY
24444: INC
24445: ST_TO_ADDR
24446: LD_INT 1
24448: PUSH
24449: FOR_DOWNTO
24450: IFFALSE 24700
// begin side := GetSide ( minersList [ i ] ) ;
24452: LD_ADDR_VAR 0 3
24456: PUSH
24457: LD_EXP 94
24461: PUSH
24462: LD_VAR 0 1
24466: ARRAY
24467: PPUSH
24468: CALL_OW 255
24472: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24473: LD_ADDR_VAR 0 4
24477: PUSH
24478: LD_EXP 95
24482: PUSH
24483: LD_VAR 0 1
24487: ARRAY
24488: PUSH
24489: LD_VAR 0 2
24493: ARRAY
24494: PUSH
24495: LD_INT 1
24497: ARRAY
24498: PPUSH
24499: LD_EXP 95
24503: PUSH
24504: LD_VAR 0 1
24508: ARRAY
24509: PUSH
24510: LD_VAR 0 2
24514: ARRAY
24515: PUSH
24516: LD_INT 2
24518: ARRAY
24519: PPUSH
24520: CALL_OW 428
24524: ST_TO_ADDR
// if not tmp then
24525: LD_VAR 0 4
24529: NOT
24530: IFFALSE 24534
// continue ;
24532: GO 24449
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24534: LD_VAR 0 4
24538: PUSH
24539: LD_INT 81
24541: PUSH
24542: LD_VAR 0 3
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PPUSH
24551: CALL_OW 69
24555: IN
24556: PUSH
24557: LD_EXP 95
24561: PUSH
24562: LD_VAR 0 1
24566: ARRAY
24567: PUSH
24568: LD_VAR 0 2
24572: ARRAY
24573: PUSH
24574: LD_INT 1
24576: ARRAY
24577: PPUSH
24578: LD_EXP 95
24582: PUSH
24583: LD_VAR 0 1
24587: ARRAY
24588: PUSH
24589: LD_VAR 0 2
24593: ARRAY
24594: PUSH
24595: LD_INT 2
24597: ARRAY
24598: PPUSH
24599: CALL_OW 458
24603: AND
24604: IFFALSE 24698
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24606: LD_EXP 95
24610: PUSH
24611: LD_VAR 0 1
24615: ARRAY
24616: PUSH
24617: LD_VAR 0 2
24621: ARRAY
24622: PUSH
24623: LD_INT 1
24625: ARRAY
24626: PPUSH
24627: LD_EXP 95
24631: PUSH
24632: LD_VAR 0 1
24636: ARRAY
24637: PUSH
24638: LD_VAR 0 2
24642: ARRAY
24643: PUSH
24644: LD_INT 2
24646: ARRAY
24647: PPUSH
24648: LD_VAR 0 3
24652: PPUSH
24653: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24657: LD_ADDR_EXP 95
24661: PUSH
24662: LD_EXP 95
24666: PPUSH
24667: LD_VAR 0 1
24671: PPUSH
24672: LD_EXP 95
24676: PUSH
24677: LD_VAR 0 1
24681: ARRAY
24682: PPUSH
24683: LD_VAR 0 2
24687: PPUSH
24688: CALL_OW 3
24692: PPUSH
24693: CALL_OW 1
24697: ST_TO_ADDR
// end ; end ;
24698: GO 24449
24700: POP
24701: POP
// end ;
24702: GO 24367
24704: POP
24705: POP
// end ;
24706: PPOPN 4
24708: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24709: LD_INT 0
24711: PPUSH
24712: PPUSH
// result := false ;
24713: LD_ADDR_VAR 0 4
24717: PUSH
24718: LD_INT 0
24720: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24721: LD_VAR 0 1
24725: PPUSH
24726: CALL_OW 264
24730: PUSH
24731: LD_INT 81
24733: EQUAL
24734: NOT
24735: IFFALSE 24739
// exit ;
24737: GO 24979
// index := GetElementIndex ( minersList , unit ) ;
24739: LD_ADDR_VAR 0 5
24743: PUSH
24744: LD_EXP 94
24748: PPUSH
24749: LD_VAR 0 1
24753: PPUSH
24754: CALL 31159 0 2
24758: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24759: LD_EXP 95
24763: PUSH
24764: LD_VAR 0 5
24768: ARRAY
24769: PUSH
24770: LD_EXP 96
24774: GREATEREQUAL
24775: IFFALSE 24779
// exit ;
24777: GO 24979
// ComMoveXY ( unit , x , y ) ;
24779: LD_VAR 0 1
24783: PPUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: LD_VAR 0 3
24793: PPUSH
24794: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24798: LD_INT 35
24800: PPUSH
24801: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24805: LD_VAR 0 1
24809: PPUSH
24810: LD_VAR 0 2
24814: PPUSH
24815: LD_VAR 0 3
24819: PPUSH
24820: CALL 62900 0 3
24824: NOT
24825: PUSH
24826: LD_VAR 0 1
24830: PPUSH
24831: CALL_OW 314
24835: AND
24836: IFFALSE 24840
// exit ;
24838: GO 24979
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24840: LD_VAR 0 2
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: CALL_OW 428
24854: PUSH
24855: LD_VAR 0 1
24859: EQUAL
24860: PUSH
24861: LD_VAR 0 1
24865: PPUSH
24866: CALL_OW 314
24870: NOT
24871: AND
24872: IFFALSE 24798
// PlaySoundXY ( x , y , PlantMine ) ;
24874: LD_VAR 0 2
24878: PPUSH
24879: LD_VAR 0 3
24883: PPUSH
24884: LD_STRING PlantMine
24886: PPUSH
24887: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24891: LD_VAR 0 2
24895: PPUSH
24896: LD_VAR 0 3
24900: PPUSH
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL_OW 255
24910: PPUSH
24911: LD_INT 0
24913: PPUSH
24914: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24918: LD_ADDR_EXP 95
24922: PUSH
24923: LD_EXP 95
24927: PPUSH
24928: LD_VAR 0 5
24932: PUSH
24933: LD_EXP 95
24937: PUSH
24938: LD_VAR 0 5
24942: ARRAY
24943: PUSH
24944: LD_INT 1
24946: PLUS
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PPUSH
24952: LD_VAR 0 2
24956: PUSH
24957: LD_VAR 0 3
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PPUSH
24966: CALL 31374 0 3
24970: ST_TO_ADDR
// result := true ;
24971: LD_ADDR_VAR 0 4
24975: PUSH
24976: LD_INT 1
24978: ST_TO_ADDR
// end ;
24979: LD_VAR 0 4
24983: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24984: LD_INT 0
24986: PPUSH
24987: PPUSH
24988: PPUSH
// if not unit in minersList then
24989: LD_VAR 0 1
24993: PUSH
24994: LD_EXP 94
24998: IN
24999: NOT
25000: IFFALSE 25004
// exit ;
25002: GO 25396
// index := GetElementIndex ( minersList , unit ) ;
25004: LD_ADDR_VAR 0 6
25008: PUSH
25009: LD_EXP 94
25013: PPUSH
25014: LD_VAR 0 1
25018: PPUSH
25019: CALL 31159 0 2
25023: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25024: LD_ADDR_VAR 0 5
25028: PUSH
25029: DOUBLE
25030: LD_EXP 95
25034: PUSH
25035: LD_VAR 0 6
25039: ARRAY
25040: INC
25041: ST_TO_ADDR
25042: LD_INT 1
25044: PUSH
25045: FOR_DOWNTO
25046: IFFALSE 25207
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25048: LD_EXP 95
25052: PUSH
25053: LD_VAR 0 6
25057: ARRAY
25058: PUSH
25059: LD_VAR 0 5
25063: ARRAY
25064: PUSH
25065: LD_INT 1
25067: ARRAY
25068: PUSH
25069: LD_VAR 0 2
25073: EQUAL
25074: PUSH
25075: LD_EXP 95
25079: PUSH
25080: LD_VAR 0 6
25084: ARRAY
25085: PUSH
25086: LD_VAR 0 5
25090: ARRAY
25091: PUSH
25092: LD_INT 2
25094: ARRAY
25095: PUSH
25096: LD_VAR 0 3
25100: EQUAL
25101: AND
25102: IFFALSE 25205
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25104: LD_EXP 95
25108: PUSH
25109: LD_VAR 0 6
25113: ARRAY
25114: PUSH
25115: LD_VAR 0 5
25119: ARRAY
25120: PUSH
25121: LD_INT 1
25123: ARRAY
25124: PPUSH
25125: LD_EXP 95
25129: PUSH
25130: LD_VAR 0 6
25134: ARRAY
25135: PUSH
25136: LD_VAR 0 5
25140: ARRAY
25141: PUSH
25142: LD_INT 2
25144: ARRAY
25145: PPUSH
25146: LD_VAR 0 1
25150: PPUSH
25151: CALL_OW 255
25155: PPUSH
25156: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25160: LD_ADDR_EXP 95
25164: PUSH
25165: LD_EXP 95
25169: PPUSH
25170: LD_VAR 0 6
25174: PPUSH
25175: LD_EXP 95
25179: PUSH
25180: LD_VAR 0 6
25184: ARRAY
25185: PPUSH
25186: LD_VAR 0 5
25190: PPUSH
25191: CALL_OW 3
25195: PPUSH
25196: CALL_OW 1
25200: ST_TO_ADDR
// exit ;
25201: POP
25202: POP
25203: GO 25396
// end ; end ;
25205: GO 25045
25207: POP
25208: POP
// for i := minerMinesList [ index ] downto 1 do
25209: LD_ADDR_VAR 0 5
25213: PUSH
25214: DOUBLE
25215: LD_EXP 95
25219: PUSH
25220: LD_VAR 0 6
25224: ARRAY
25225: INC
25226: ST_TO_ADDR
25227: LD_INT 1
25229: PUSH
25230: FOR_DOWNTO
25231: IFFALSE 25394
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25233: LD_EXP 95
25237: PUSH
25238: LD_VAR 0 6
25242: ARRAY
25243: PUSH
25244: LD_VAR 0 5
25248: ARRAY
25249: PUSH
25250: LD_INT 1
25252: ARRAY
25253: PPUSH
25254: LD_EXP 95
25258: PUSH
25259: LD_VAR 0 6
25263: ARRAY
25264: PUSH
25265: LD_VAR 0 5
25269: ARRAY
25270: PUSH
25271: LD_INT 2
25273: ARRAY
25274: PPUSH
25275: LD_VAR 0 2
25279: PPUSH
25280: LD_VAR 0 3
25284: PPUSH
25285: CALL_OW 298
25289: PUSH
25290: LD_INT 6
25292: LESS
25293: IFFALSE 25392
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25295: LD_EXP 95
25299: PUSH
25300: LD_VAR 0 6
25304: ARRAY
25305: PUSH
25306: LD_VAR 0 5
25310: ARRAY
25311: PUSH
25312: LD_INT 1
25314: ARRAY
25315: PPUSH
25316: LD_EXP 95
25320: PUSH
25321: LD_VAR 0 6
25325: ARRAY
25326: PUSH
25327: LD_VAR 0 5
25331: ARRAY
25332: PUSH
25333: LD_INT 2
25335: ARRAY
25336: PPUSH
25337: LD_VAR 0 1
25341: PPUSH
25342: CALL_OW 255
25346: PPUSH
25347: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25351: LD_ADDR_EXP 95
25355: PUSH
25356: LD_EXP 95
25360: PPUSH
25361: LD_VAR 0 6
25365: PPUSH
25366: LD_EXP 95
25370: PUSH
25371: LD_VAR 0 6
25375: ARRAY
25376: PPUSH
25377: LD_VAR 0 5
25381: PPUSH
25382: CALL_OW 3
25386: PPUSH
25387: CALL_OW 1
25391: ST_TO_ADDR
// end ; end ;
25392: GO 25230
25394: POP
25395: POP
// end ;
25396: LD_VAR 0 4
25400: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25401: LD_INT 0
25403: PPUSH
25404: PPUSH
25405: PPUSH
25406: PPUSH
25407: PPUSH
25408: PPUSH
25409: PPUSH
25410: PPUSH
25411: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 264
25421: PUSH
25422: LD_INT 81
25424: EQUAL
25425: NOT
25426: PUSH
25427: LD_VAR 0 1
25431: PUSH
25432: LD_EXP 94
25436: IN
25437: NOT
25438: OR
25439: IFFALSE 25443
// exit ;
25441: GO 25765
// index := GetElementIndex ( minersList , unit ) ;
25443: LD_ADDR_VAR 0 6
25447: PUSH
25448: LD_EXP 94
25452: PPUSH
25453: LD_VAR 0 1
25457: PPUSH
25458: CALL 31159 0 2
25462: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25463: LD_ADDR_VAR 0 8
25467: PUSH
25468: LD_EXP 96
25472: PUSH
25473: LD_EXP 95
25477: PUSH
25478: LD_VAR 0 6
25482: ARRAY
25483: MINUS
25484: ST_TO_ADDR
// if not minesFreeAmount then
25485: LD_VAR 0 8
25489: NOT
25490: IFFALSE 25494
// exit ;
25492: GO 25765
// tmp := [ ] ;
25494: LD_ADDR_VAR 0 7
25498: PUSH
25499: EMPTY
25500: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25501: LD_ADDR_VAR 0 5
25505: PUSH
25506: DOUBLE
25507: LD_INT 1
25509: DEC
25510: ST_TO_ADDR
25511: LD_VAR 0 8
25515: PUSH
25516: FOR_TO
25517: IFFALSE 25712
// begin _d := rand ( 0 , 5 ) ;
25519: LD_ADDR_VAR 0 11
25523: PUSH
25524: LD_INT 0
25526: PPUSH
25527: LD_INT 5
25529: PPUSH
25530: CALL_OW 12
25534: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25535: LD_ADDR_VAR 0 12
25539: PUSH
25540: LD_INT 2
25542: PPUSH
25543: LD_INT 6
25545: PPUSH
25546: CALL_OW 12
25550: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25551: LD_ADDR_VAR 0 9
25555: PUSH
25556: LD_VAR 0 2
25560: PPUSH
25561: LD_VAR 0 11
25565: PPUSH
25566: LD_VAR 0 12
25570: PPUSH
25571: CALL_OW 272
25575: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25576: LD_ADDR_VAR 0 10
25580: PUSH
25581: LD_VAR 0 3
25585: PPUSH
25586: LD_VAR 0 11
25590: PPUSH
25591: LD_VAR 0 12
25595: PPUSH
25596: CALL_OW 273
25600: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25601: LD_VAR 0 9
25605: PPUSH
25606: LD_VAR 0 10
25610: PPUSH
25611: CALL_OW 488
25615: PUSH
25616: LD_VAR 0 9
25620: PUSH
25621: LD_VAR 0 10
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_VAR 0 7
25634: IN
25635: NOT
25636: AND
25637: PUSH
25638: LD_VAR 0 9
25642: PPUSH
25643: LD_VAR 0 10
25647: PPUSH
25648: CALL_OW 458
25652: NOT
25653: AND
25654: IFFALSE 25696
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25656: LD_ADDR_VAR 0 7
25660: PUSH
25661: LD_VAR 0 7
25665: PPUSH
25666: LD_VAR 0 7
25670: PUSH
25671: LD_INT 1
25673: PLUS
25674: PPUSH
25675: LD_VAR 0 9
25679: PUSH
25680: LD_VAR 0 10
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PPUSH
25689: CALL_OW 1
25693: ST_TO_ADDR
25694: GO 25710
// i := i - 1 ;
25696: LD_ADDR_VAR 0 5
25700: PUSH
25701: LD_VAR 0 5
25705: PUSH
25706: LD_INT 1
25708: MINUS
25709: ST_TO_ADDR
// end ;
25710: GO 25516
25712: POP
25713: POP
// for i in tmp do
25714: LD_ADDR_VAR 0 5
25718: PUSH
25719: LD_VAR 0 7
25723: PUSH
25724: FOR_IN
25725: IFFALSE 25763
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25727: LD_VAR 0 1
25731: PPUSH
25732: LD_VAR 0 5
25736: PUSH
25737: LD_INT 1
25739: ARRAY
25740: PPUSH
25741: LD_VAR 0 5
25745: PUSH
25746: LD_INT 2
25748: ARRAY
25749: PPUSH
25750: CALL 24709 0 3
25754: NOT
25755: IFFALSE 25761
// exit ;
25757: POP
25758: POP
25759: GO 25765
25761: GO 25724
25763: POP
25764: POP
// end ;
25765: LD_VAR 0 4
25769: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25770: LD_INT 0
25772: PPUSH
25773: PPUSH
25774: PPUSH
25775: PPUSH
25776: PPUSH
25777: PPUSH
25778: PPUSH
// if not GetClass ( unit ) = class_sniper then
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 257
25788: PUSH
25789: LD_INT 5
25791: EQUAL
25792: NOT
25793: IFFALSE 25797
// exit ;
25795: GO 26185
// dist := 8 ;
25797: LD_ADDR_VAR 0 5
25801: PUSH
25802: LD_INT 8
25804: ST_TO_ADDR
// viewRange := 12 ;
25805: LD_ADDR_VAR 0 7
25809: PUSH
25810: LD_INT 12
25812: ST_TO_ADDR
// side := GetSide ( unit ) ;
25813: LD_ADDR_VAR 0 6
25817: PUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL_OW 255
25827: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25828: LD_INT 61
25830: PPUSH
25831: LD_VAR 0 6
25835: PPUSH
25836: CALL_OW 321
25840: PUSH
25841: LD_INT 2
25843: EQUAL
25844: IFFALSE 25854
// viewRange := 16 ;
25846: LD_ADDR_VAR 0 7
25850: PUSH
25851: LD_INT 16
25853: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25854: LD_VAR 0 1
25858: PPUSH
25859: LD_VAR 0 2
25863: PPUSH
25864: LD_VAR 0 3
25868: PPUSH
25869: CALL_OW 297
25873: PUSH
25874: LD_VAR 0 5
25878: GREATER
25879: IFFALSE 25958
// begin ComMoveXY ( unit , x , y ) ;
25881: LD_VAR 0 1
25885: PPUSH
25886: LD_VAR 0 2
25890: PPUSH
25891: LD_VAR 0 3
25895: PPUSH
25896: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25900: LD_INT 35
25902: PPUSH
25903: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_VAR 0 2
25916: PPUSH
25917: LD_VAR 0 3
25921: PPUSH
25922: CALL 62900 0 3
25926: NOT
25927: IFFALSE 25931
// exit ;
25929: GO 26185
// until GetDistUnitXY ( unit , x , y ) < dist ;
25931: LD_VAR 0 1
25935: PPUSH
25936: LD_VAR 0 2
25940: PPUSH
25941: LD_VAR 0 3
25945: PPUSH
25946: CALL_OW 297
25950: PUSH
25951: LD_VAR 0 5
25955: LESS
25956: IFFALSE 25900
// end ; ComTurnXY ( unit , x , y ) ;
25958: LD_VAR 0 1
25962: PPUSH
25963: LD_VAR 0 2
25967: PPUSH
25968: LD_VAR 0 3
25972: PPUSH
25973: CALL_OW 118
// wait ( 5 ) ;
25977: LD_INT 5
25979: PPUSH
25980: CALL_OW 67
// _d := GetDir ( unit ) ;
25984: LD_ADDR_VAR 0 10
25988: PUSH
25989: LD_VAR 0 1
25993: PPUSH
25994: CALL_OW 254
25998: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25999: LD_ADDR_VAR 0 8
26003: PUSH
26004: LD_VAR 0 1
26008: PPUSH
26009: CALL_OW 250
26013: PPUSH
26014: LD_VAR 0 10
26018: PPUSH
26019: LD_VAR 0 5
26023: PPUSH
26024: CALL_OW 272
26028: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26029: LD_ADDR_VAR 0 9
26033: PUSH
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 251
26043: PPUSH
26044: LD_VAR 0 10
26048: PPUSH
26049: LD_VAR 0 5
26053: PPUSH
26054: CALL_OW 273
26058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26059: LD_VAR 0 8
26063: PPUSH
26064: LD_VAR 0 9
26068: PPUSH
26069: CALL_OW 488
26073: NOT
26074: IFFALSE 26078
// exit ;
26076: GO 26185
// ComAnimCustom ( unit , 1 ) ;
26078: LD_VAR 0 1
26082: PPUSH
26083: LD_INT 1
26085: PPUSH
26086: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26090: LD_VAR 0 8
26094: PPUSH
26095: LD_VAR 0 9
26099: PPUSH
26100: LD_VAR 0 6
26104: PPUSH
26105: LD_VAR 0 7
26109: PPUSH
26110: CALL_OW 330
// repeat wait ( 1 ) ;
26114: LD_INT 1
26116: PPUSH
26117: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26121: LD_VAR 0 1
26125: PPUSH
26126: CALL_OW 316
26130: PUSH
26131: LD_VAR 0 1
26135: PPUSH
26136: CALL_OW 314
26140: OR
26141: PUSH
26142: LD_VAR 0 1
26146: PPUSH
26147: CALL_OW 302
26151: NOT
26152: OR
26153: PUSH
26154: LD_VAR 0 1
26158: PPUSH
26159: CALL_OW 301
26163: OR
26164: IFFALSE 26114
// RemoveSeeing ( _x , _y , side ) ;
26166: LD_VAR 0 8
26170: PPUSH
26171: LD_VAR 0 9
26175: PPUSH
26176: LD_VAR 0 6
26180: PPUSH
26181: CALL_OW 331
// end ; end_of_file
26185: LD_VAR 0 4
26189: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26190: LD_VAR 0 1
26194: PUSH
26195: LD_INT 200
26197: DOUBLE
26198: GREATEREQUAL
26199: IFFALSE 26207
26201: LD_INT 299
26203: DOUBLE
26204: LESSEQUAL
26205: IFTRUE 26209
26207: GO 26241
26209: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26210: LD_VAR 0 1
26214: PPUSH
26215: LD_VAR 0 2
26219: PPUSH
26220: LD_VAR 0 3
26224: PPUSH
26225: LD_VAR 0 4
26229: PPUSH
26230: LD_VAR 0 5
26234: PPUSH
26235: CALL 21672 0 5
26239: GO 26318
26241: LD_INT 300
26243: DOUBLE
26244: GREATEREQUAL
26245: IFFALSE 26253
26247: LD_INT 399
26249: DOUBLE
26250: LESSEQUAL
26251: IFTRUE 26255
26253: GO 26317
26255: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26256: LD_VAR 0 1
26260: PPUSH
26261: LD_VAR 0 2
26265: PPUSH
26266: LD_VAR 0 3
26270: PPUSH
26271: LD_VAR 0 4
26275: PPUSH
26276: LD_VAR 0 5
26280: PPUSH
26281: LD_VAR 0 6
26285: PPUSH
26286: LD_VAR 0 7
26290: PPUSH
26291: LD_VAR 0 8
26295: PPUSH
26296: LD_VAR 0 9
26300: PPUSH
26301: LD_VAR 0 10
26305: PPUSH
26306: LD_VAR 0 11
26310: PPUSH
26311: CALL 17997 0 11
26315: GO 26318
26317: POP
// end ;
26318: PPOPN 11
26320: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26321: LD_VAR 0 1
26325: PPUSH
26326: LD_VAR 0 2
26330: PPUSH
26331: LD_VAR 0 3
26335: PPUSH
26336: LD_VAR 0 4
26340: PPUSH
26341: LD_VAR 0 5
26345: PPUSH
26346: CALL 21408 0 5
// end ; end_of_file
26350: PPOPN 5
26352: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
26353: LD_VAR 0 1
26357: PPUSH
26358: LD_VAR 0 2
26362: PPUSH
26363: LD_VAR 0 3
26367: PPUSH
26368: LD_VAR 0 4
26372: PPUSH
26373: LD_VAR 0 5
26377: PPUSH
26378: LD_VAR 0 6
26382: PPUSH
26383: CALL 5649 0 6
// end ;
26387: PPOPN 6
26389: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
26390: LD_INT 0
26392: PPUSH
// begin if not units then
26393: LD_VAR 0 1
26397: NOT
26398: IFFALSE 26402
// exit ;
26400: GO 26402
// end ;
26402: PPOPN 7
26404: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
26405: CALL 5536 0 0
// end ; end_of_file end_of_file
26409: PPOPN 1
26411: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26412: LD_INT 0
26414: PPUSH
26415: PPUSH
// if exist_mode then
26416: LD_VAR 0 2
26420: IFFALSE 26445
// unit := CreateCharacter ( prefix & ident ) else
26422: LD_ADDR_VAR 0 5
26426: PUSH
26427: LD_VAR 0 3
26431: PUSH
26432: LD_VAR 0 1
26436: STR
26437: PPUSH
26438: CALL_OW 34
26442: ST_TO_ADDR
26443: GO 26460
// unit := NewCharacter ( ident ) ;
26445: LD_ADDR_VAR 0 5
26449: PUSH
26450: LD_VAR 0 1
26454: PPUSH
26455: CALL_OW 25
26459: ST_TO_ADDR
// result := unit ;
26460: LD_ADDR_VAR 0 4
26464: PUSH
26465: LD_VAR 0 5
26469: ST_TO_ADDR
// end ;
26470: LD_VAR 0 4
26474: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
// if not side or not nation then
26479: LD_VAR 0 1
26483: NOT
26484: PUSH
26485: LD_VAR 0 2
26489: NOT
26490: OR
26491: IFFALSE 26495
// exit ;
26493: GO 27263
// case nation of nation_american :
26495: LD_VAR 0 2
26499: PUSH
26500: LD_INT 1
26502: DOUBLE
26503: EQUAL
26504: IFTRUE 26508
26506: GO 26722
26508: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26509: LD_ADDR_VAR 0 4
26513: PUSH
26514: LD_INT 35
26516: PUSH
26517: LD_INT 45
26519: PUSH
26520: LD_INT 46
26522: PUSH
26523: LD_INT 47
26525: PUSH
26526: LD_INT 82
26528: PUSH
26529: LD_INT 83
26531: PUSH
26532: LD_INT 84
26534: PUSH
26535: LD_INT 85
26537: PUSH
26538: LD_INT 86
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: LD_INT 6
26549: PUSH
26550: LD_INT 15
26552: PUSH
26553: LD_INT 16
26555: PUSH
26556: LD_INT 7
26558: PUSH
26559: LD_INT 12
26561: PUSH
26562: LD_INT 13
26564: PUSH
26565: LD_INT 10
26567: PUSH
26568: LD_INT 14
26570: PUSH
26571: LD_INT 20
26573: PUSH
26574: LD_INT 21
26576: PUSH
26577: LD_INT 22
26579: PUSH
26580: LD_INT 25
26582: PUSH
26583: LD_INT 32
26585: PUSH
26586: LD_INT 27
26588: PUSH
26589: LD_INT 36
26591: PUSH
26592: LD_INT 69
26594: PUSH
26595: LD_INT 39
26597: PUSH
26598: LD_INT 34
26600: PUSH
26601: LD_INT 40
26603: PUSH
26604: LD_INT 48
26606: PUSH
26607: LD_INT 49
26609: PUSH
26610: LD_INT 50
26612: PUSH
26613: LD_INT 51
26615: PUSH
26616: LD_INT 52
26618: PUSH
26619: LD_INT 53
26621: PUSH
26622: LD_INT 54
26624: PUSH
26625: LD_INT 55
26627: PUSH
26628: LD_INT 56
26630: PUSH
26631: LD_INT 57
26633: PUSH
26634: LD_INT 58
26636: PUSH
26637: LD_INT 59
26639: PUSH
26640: LD_INT 60
26642: PUSH
26643: LD_INT 61
26645: PUSH
26646: LD_INT 62
26648: PUSH
26649: LD_INT 80
26651: PUSH
26652: LD_INT 82
26654: PUSH
26655: LD_INT 83
26657: PUSH
26658: LD_INT 84
26660: PUSH
26661: LD_INT 85
26663: PUSH
26664: LD_INT 86
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: ST_TO_ADDR
26720: GO 27187
26722: LD_INT 2
26724: DOUBLE
26725: EQUAL
26726: IFTRUE 26730
26728: GO 26956
26730: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26731: LD_ADDR_VAR 0 4
26735: PUSH
26736: LD_INT 35
26738: PUSH
26739: LD_INT 45
26741: PUSH
26742: LD_INT 46
26744: PUSH
26745: LD_INT 47
26747: PUSH
26748: LD_INT 82
26750: PUSH
26751: LD_INT 83
26753: PUSH
26754: LD_INT 84
26756: PUSH
26757: LD_INT 85
26759: PUSH
26760: LD_INT 87
26762: PUSH
26763: LD_INT 70
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: LD_INT 11
26771: PUSH
26772: LD_INT 3
26774: PUSH
26775: LD_INT 4
26777: PUSH
26778: LD_INT 5
26780: PUSH
26781: LD_INT 6
26783: PUSH
26784: LD_INT 15
26786: PUSH
26787: LD_INT 18
26789: PUSH
26790: LD_INT 7
26792: PUSH
26793: LD_INT 17
26795: PUSH
26796: LD_INT 8
26798: PUSH
26799: LD_INT 20
26801: PUSH
26802: LD_INT 21
26804: PUSH
26805: LD_INT 22
26807: PUSH
26808: LD_INT 72
26810: PUSH
26811: LD_INT 26
26813: PUSH
26814: LD_INT 69
26816: PUSH
26817: LD_INT 39
26819: PUSH
26820: LD_INT 40
26822: PUSH
26823: LD_INT 41
26825: PUSH
26826: LD_INT 42
26828: PUSH
26829: LD_INT 43
26831: PUSH
26832: LD_INT 48
26834: PUSH
26835: LD_INT 49
26837: PUSH
26838: LD_INT 50
26840: PUSH
26841: LD_INT 51
26843: PUSH
26844: LD_INT 52
26846: PUSH
26847: LD_INT 53
26849: PUSH
26850: LD_INT 54
26852: PUSH
26853: LD_INT 55
26855: PUSH
26856: LD_INT 56
26858: PUSH
26859: LD_INT 60
26861: PUSH
26862: LD_INT 61
26864: PUSH
26865: LD_INT 62
26867: PUSH
26868: LD_INT 66
26870: PUSH
26871: LD_INT 67
26873: PUSH
26874: LD_INT 68
26876: PUSH
26877: LD_INT 81
26879: PUSH
26880: LD_INT 82
26882: PUSH
26883: LD_INT 83
26885: PUSH
26886: LD_INT 84
26888: PUSH
26889: LD_INT 85
26891: PUSH
26892: LD_INT 87
26894: PUSH
26895: LD_INT 88
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
26954: GO 27187
26956: LD_INT 3
26958: DOUBLE
26959: EQUAL
26960: IFTRUE 26964
26962: GO 27186
26964: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26965: LD_ADDR_VAR 0 4
26969: PUSH
26970: LD_INT 46
26972: PUSH
26973: LD_INT 47
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: LD_INT 82
26984: PUSH
26985: LD_INT 83
26987: PUSH
26988: LD_INT 84
26990: PUSH
26991: LD_INT 85
26993: PUSH
26994: LD_INT 86
26996: PUSH
26997: LD_INT 11
26999: PUSH
27000: LD_INT 9
27002: PUSH
27003: LD_INT 20
27005: PUSH
27006: LD_INT 19
27008: PUSH
27009: LD_INT 21
27011: PUSH
27012: LD_INT 24
27014: PUSH
27015: LD_INT 22
27017: PUSH
27018: LD_INT 25
27020: PUSH
27021: LD_INT 28
27023: PUSH
27024: LD_INT 29
27026: PUSH
27027: LD_INT 30
27029: PUSH
27030: LD_INT 31
27032: PUSH
27033: LD_INT 37
27035: PUSH
27036: LD_INT 38
27038: PUSH
27039: LD_INT 32
27041: PUSH
27042: LD_INT 27
27044: PUSH
27045: LD_INT 33
27047: PUSH
27048: LD_INT 69
27050: PUSH
27051: LD_INT 39
27053: PUSH
27054: LD_INT 34
27056: PUSH
27057: LD_INT 40
27059: PUSH
27060: LD_INT 71
27062: PUSH
27063: LD_INT 23
27065: PUSH
27066: LD_INT 44
27068: PUSH
27069: LD_INT 48
27071: PUSH
27072: LD_INT 49
27074: PUSH
27075: LD_INT 50
27077: PUSH
27078: LD_INT 51
27080: PUSH
27081: LD_INT 52
27083: PUSH
27084: LD_INT 53
27086: PUSH
27087: LD_INT 54
27089: PUSH
27090: LD_INT 55
27092: PUSH
27093: LD_INT 56
27095: PUSH
27096: LD_INT 57
27098: PUSH
27099: LD_INT 58
27101: PUSH
27102: LD_INT 59
27104: PUSH
27105: LD_INT 63
27107: PUSH
27108: LD_INT 64
27110: PUSH
27111: LD_INT 65
27113: PUSH
27114: LD_INT 82
27116: PUSH
27117: LD_INT 83
27119: PUSH
27120: LD_INT 84
27122: PUSH
27123: LD_INT 85
27125: PUSH
27126: LD_INT 86
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: ST_TO_ADDR
27184: GO 27187
27186: POP
// if state > - 1 and state < 3 then
27187: LD_VAR 0 3
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: GREATER
27196: PUSH
27197: LD_VAR 0 3
27201: PUSH
27202: LD_INT 3
27204: LESS
27205: AND
27206: IFFALSE 27263
// for i in result do
27208: LD_ADDR_VAR 0 5
27212: PUSH
27213: LD_VAR 0 4
27217: PUSH
27218: FOR_IN
27219: IFFALSE 27261
// if GetTech ( i , side ) <> state then
27221: LD_VAR 0 5
27225: PPUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL_OW 321
27235: PUSH
27236: LD_VAR 0 3
27240: NONEQUAL
27241: IFFALSE 27259
// result := result diff i ;
27243: LD_ADDR_VAR 0 4
27247: PUSH
27248: LD_VAR 0 4
27252: PUSH
27253: LD_VAR 0 5
27257: DIFF
27258: ST_TO_ADDR
27259: GO 27218
27261: POP
27262: POP
// end ;
27263: LD_VAR 0 4
27267: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27268: LD_INT 0
27270: PPUSH
27271: PPUSH
27272: PPUSH
// result := true ;
27273: LD_ADDR_VAR 0 3
27277: PUSH
27278: LD_INT 1
27280: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27281: LD_ADDR_VAR 0 5
27285: PUSH
27286: LD_VAR 0 2
27290: PPUSH
27291: CALL_OW 480
27295: ST_TO_ADDR
// if not tmp then
27296: LD_VAR 0 5
27300: NOT
27301: IFFALSE 27305
// exit ;
27303: GO 27354
// for i in tmp do
27305: LD_ADDR_VAR 0 4
27309: PUSH
27310: LD_VAR 0 5
27314: PUSH
27315: FOR_IN
27316: IFFALSE 27352
// if GetTech ( i , side ) <> state_researched then
27318: LD_VAR 0 4
27322: PPUSH
27323: LD_VAR 0 1
27327: PPUSH
27328: CALL_OW 321
27332: PUSH
27333: LD_INT 2
27335: NONEQUAL
27336: IFFALSE 27350
// begin result := false ;
27338: LD_ADDR_VAR 0 3
27342: PUSH
27343: LD_INT 0
27345: ST_TO_ADDR
// exit ;
27346: POP
27347: POP
27348: GO 27354
// end ;
27350: GO 27315
27352: POP
27353: POP
// end ;
27354: LD_VAR 0 3
27358: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27359: LD_INT 0
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
27365: PPUSH
27366: PPUSH
27367: PPUSH
27368: PPUSH
27369: PPUSH
27370: PPUSH
27371: PPUSH
27372: PPUSH
27373: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27374: LD_VAR 0 1
27378: NOT
27379: PUSH
27380: LD_VAR 0 1
27384: PPUSH
27385: CALL_OW 257
27389: PUSH
27390: LD_INT 9
27392: NONEQUAL
27393: OR
27394: IFFALSE 27398
// exit ;
27396: GO 27971
// side := GetSide ( unit ) ;
27398: LD_ADDR_VAR 0 9
27402: PUSH
27403: LD_VAR 0 1
27407: PPUSH
27408: CALL_OW 255
27412: ST_TO_ADDR
// tech_space := tech_spacanom ;
27413: LD_ADDR_VAR 0 12
27417: PUSH
27418: LD_INT 29
27420: ST_TO_ADDR
// tech_time := tech_taurad ;
27421: LD_ADDR_VAR 0 13
27425: PUSH
27426: LD_INT 28
27428: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27429: LD_ADDR_VAR 0 11
27433: PUSH
27434: LD_VAR 0 1
27438: PPUSH
27439: CALL_OW 310
27443: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27444: LD_VAR 0 11
27448: PPUSH
27449: CALL_OW 247
27453: PUSH
27454: LD_INT 2
27456: EQUAL
27457: IFFALSE 27461
// exit ;
27459: GO 27971
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27461: LD_ADDR_VAR 0 8
27465: PUSH
27466: LD_INT 81
27468: PUSH
27469: LD_VAR 0 9
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: LD_INT 21
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 69
27503: ST_TO_ADDR
// if not tmp then
27504: LD_VAR 0 8
27508: NOT
27509: IFFALSE 27513
// exit ;
27511: GO 27971
// if in_unit then
27513: LD_VAR 0 11
27517: IFFALSE 27541
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27519: LD_ADDR_VAR 0 10
27523: PUSH
27524: LD_VAR 0 8
27528: PPUSH
27529: LD_VAR 0 11
27533: PPUSH
27534: CALL_OW 74
27538: ST_TO_ADDR
27539: GO 27561
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27541: LD_ADDR_VAR 0 10
27545: PUSH
27546: LD_VAR 0 8
27550: PPUSH
27551: LD_VAR 0 1
27555: PPUSH
27556: CALL_OW 74
27560: ST_TO_ADDR
// if not enemy then
27561: LD_VAR 0 10
27565: NOT
27566: IFFALSE 27570
// exit ;
27568: GO 27971
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27570: LD_VAR 0 11
27574: PUSH
27575: LD_VAR 0 11
27579: PPUSH
27580: LD_VAR 0 10
27584: PPUSH
27585: CALL_OW 296
27589: PUSH
27590: LD_INT 13
27592: GREATER
27593: AND
27594: PUSH
27595: LD_VAR 0 1
27599: PPUSH
27600: LD_VAR 0 10
27604: PPUSH
27605: CALL_OW 296
27609: PUSH
27610: LD_INT 12
27612: GREATER
27613: OR
27614: IFFALSE 27618
// exit ;
27616: GO 27971
// missile := [ 1 ] ;
27618: LD_ADDR_VAR 0 14
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27629: LD_VAR 0 9
27633: PPUSH
27634: LD_VAR 0 12
27638: PPUSH
27639: CALL_OW 325
27643: IFFALSE 27672
// missile := Replace ( missile , missile + 1 , 2 ) ;
27645: LD_ADDR_VAR 0 14
27649: PUSH
27650: LD_VAR 0 14
27654: PPUSH
27655: LD_VAR 0 14
27659: PUSH
27660: LD_INT 1
27662: PLUS
27663: PPUSH
27664: LD_INT 2
27666: PPUSH
27667: CALL_OW 1
27671: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27672: LD_VAR 0 9
27676: PPUSH
27677: LD_VAR 0 13
27681: PPUSH
27682: CALL_OW 325
27686: PUSH
27687: LD_VAR 0 10
27691: PPUSH
27692: CALL_OW 255
27696: PPUSH
27697: LD_VAR 0 13
27701: PPUSH
27702: CALL_OW 325
27706: NOT
27707: AND
27708: IFFALSE 27737
// missile := Replace ( missile , missile + 1 , 3 ) ;
27710: LD_ADDR_VAR 0 14
27714: PUSH
27715: LD_VAR 0 14
27719: PPUSH
27720: LD_VAR 0 14
27724: PUSH
27725: LD_INT 1
27727: PLUS
27728: PPUSH
27729: LD_INT 3
27731: PPUSH
27732: CALL_OW 1
27736: ST_TO_ADDR
// if missile < 2 then
27737: LD_VAR 0 14
27741: PUSH
27742: LD_INT 2
27744: LESS
27745: IFFALSE 27749
// exit ;
27747: GO 27971
// x := GetX ( enemy ) ;
27749: LD_ADDR_VAR 0 4
27753: PUSH
27754: LD_VAR 0 10
27758: PPUSH
27759: CALL_OW 250
27763: ST_TO_ADDR
// y := GetY ( enemy ) ;
27764: LD_ADDR_VAR 0 5
27768: PUSH
27769: LD_VAR 0 10
27773: PPUSH
27774: CALL_OW 251
27778: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27779: LD_ADDR_VAR 0 6
27783: PUSH
27784: LD_VAR 0 4
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PPUSH
27793: LD_INT 1
27795: PPUSH
27796: CALL_OW 12
27800: PLUS
27801: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27802: LD_ADDR_VAR 0 7
27806: PUSH
27807: LD_VAR 0 5
27811: PUSH
27812: LD_INT 1
27814: NEG
27815: PPUSH
27816: LD_INT 1
27818: PPUSH
27819: CALL_OW 12
27823: PLUS
27824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27825: LD_VAR 0 6
27829: PPUSH
27830: LD_VAR 0 7
27834: PPUSH
27835: CALL_OW 488
27839: NOT
27840: IFFALSE 27862
// begin _x := x ;
27842: LD_ADDR_VAR 0 6
27846: PUSH
27847: LD_VAR 0 4
27851: ST_TO_ADDR
// _y := y ;
27852: LD_ADDR_VAR 0 7
27856: PUSH
27857: LD_VAR 0 5
27861: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27862: LD_ADDR_VAR 0 3
27866: PUSH
27867: LD_INT 1
27869: PPUSH
27870: LD_VAR 0 14
27874: PPUSH
27875: CALL_OW 12
27879: ST_TO_ADDR
// case i of 1 :
27880: LD_VAR 0 3
27884: PUSH
27885: LD_INT 1
27887: DOUBLE
27888: EQUAL
27889: IFTRUE 27893
27891: GO 27910
27893: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27894: LD_VAR 0 1
27898: PPUSH
27899: LD_VAR 0 10
27903: PPUSH
27904: CALL_OW 115
27908: GO 27971
27910: LD_INT 2
27912: DOUBLE
27913: EQUAL
27914: IFTRUE 27918
27916: GO 27940
27918: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27919: LD_VAR 0 1
27923: PPUSH
27924: LD_VAR 0 6
27928: PPUSH
27929: LD_VAR 0 7
27933: PPUSH
27934: CALL_OW 153
27938: GO 27971
27940: LD_INT 3
27942: DOUBLE
27943: EQUAL
27944: IFTRUE 27948
27946: GO 27970
27948: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27949: LD_VAR 0 1
27953: PPUSH
27954: LD_VAR 0 6
27958: PPUSH
27959: LD_VAR 0 7
27963: PPUSH
27964: CALL_OW 154
27968: GO 27971
27970: POP
// end ;
27971: LD_VAR 0 2
27975: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27976: LD_INT 0
27978: PPUSH
27979: PPUSH
27980: PPUSH
27981: PPUSH
27982: PPUSH
27983: PPUSH
// if not unit or not building then
27984: LD_VAR 0 1
27988: NOT
27989: PUSH
27990: LD_VAR 0 2
27994: NOT
27995: OR
27996: IFFALSE 28000
// exit ;
27998: GO 28158
// x := GetX ( building ) ;
28000: LD_ADDR_VAR 0 5
28004: PUSH
28005: LD_VAR 0 2
28009: PPUSH
28010: CALL_OW 250
28014: ST_TO_ADDR
// y := GetY ( building ) ;
28015: LD_ADDR_VAR 0 6
28019: PUSH
28020: LD_VAR 0 2
28024: PPUSH
28025: CALL_OW 251
28029: ST_TO_ADDR
// for i = 0 to 5 do
28030: LD_ADDR_VAR 0 4
28034: PUSH
28035: DOUBLE
28036: LD_INT 0
28038: DEC
28039: ST_TO_ADDR
28040: LD_INT 5
28042: PUSH
28043: FOR_TO
28044: IFFALSE 28156
// begin _x := ShiftX ( x , i , 3 ) ;
28046: LD_ADDR_VAR 0 7
28050: PUSH
28051: LD_VAR 0 5
28055: PPUSH
28056: LD_VAR 0 4
28060: PPUSH
28061: LD_INT 3
28063: PPUSH
28064: CALL_OW 272
28068: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28069: LD_ADDR_VAR 0 8
28073: PUSH
28074: LD_VAR 0 6
28078: PPUSH
28079: LD_VAR 0 4
28083: PPUSH
28084: LD_INT 3
28086: PPUSH
28087: CALL_OW 273
28091: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28092: LD_VAR 0 7
28096: PPUSH
28097: LD_VAR 0 8
28101: PPUSH
28102: CALL_OW 488
28106: NOT
28107: IFFALSE 28111
// continue ;
28109: GO 28043
// if HexInfo ( _x , _y ) = 0 then
28111: LD_VAR 0 7
28115: PPUSH
28116: LD_VAR 0 8
28120: PPUSH
28121: CALL_OW 428
28125: PUSH
28126: LD_INT 0
28128: EQUAL
28129: IFFALSE 28154
// begin ComMoveXY ( unit , _x , _y ) ;
28131: LD_VAR 0 1
28135: PPUSH
28136: LD_VAR 0 7
28140: PPUSH
28141: LD_VAR 0 8
28145: PPUSH
28146: CALL_OW 111
// exit ;
28150: POP
28151: POP
28152: GO 28158
// end ; end ;
28154: GO 28043
28156: POP
28157: POP
// end ;
28158: LD_VAR 0 3
28162: RET
// export function ScanBase ( side , base_area ) ; begin
28163: LD_INT 0
28165: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28166: LD_ADDR_VAR 0 3
28170: PUSH
28171: LD_VAR 0 2
28175: PPUSH
28176: LD_INT 81
28178: PUSH
28179: LD_VAR 0 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PPUSH
28188: CALL_OW 70
28192: ST_TO_ADDR
// end ;
28193: LD_VAR 0 3
28197: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28198: LD_INT 0
28200: PPUSH
28201: PPUSH
28202: PPUSH
28203: PPUSH
// result := false ;
28204: LD_ADDR_VAR 0 2
28208: PUSH
28209: LD_INT 0
28211: ST_TO_ADDR
// side := GetSide ( unit ) ;
28212: LD_ADDR_VAR 0 3
28216: PUSH
28217: LD_VAR 0 1
28221: PPUSH
28222: CALL_OW 255
28226: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28227: LD_ADDR_VAR 0 4
28231: PUSH
28232: LD_VAR 0 1
28236: PPUSH
28237: CALL_OW 248
28241: ST_TO_ADDR
// case nat of 1 :
28242: LD_VAR 0 4
28246: PUSH
28247: LD_INT 1
28249: DOUBLE
28250: EQUAL
28251: IFTRUE 28255
28253: GO 28266
28255: POP
// tech := tech_lassight ; 2 :
28256: LD_ADDR_VAR 0 5
28260: PUSH
28261: LD_INT 12
28263: ST_TO_ADDR
28264: GO 28305
28266: LD_INT 2
28268: DOUBLE
28269: EQUAL
28270: IFTRUE 28274
28272: GO 28285
28274: POP
// tech := tech_mortar ; 3 :
28275: LD_ADDR_VAR 0 5
28279: PUSH
28280: LD_INT 41
28282: ST_TO_ADDR
28283: GO 28305
28285: LD_INT 3
28287: DOUBLE
28288: EQUAL
28289: IFTRUE 28293
28291: GO 28304
28293: POP
// tech := tech_bazooka ; end ;
28294: LD_ADDR_VAR 0 5
28298: PUSH
28299: LD_INT 44
28301: ST_TO_ADDR
28302: GO 28305
28304: POP
// if Researched ( side , tech ) then
28305: LD_VAR 0 3
28309: PPUSH
28310: LD_VAR 0 5
28314: PPUSH
28315: CALL_OW 325
28319: IFFALSE 28346
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28321: LD_ADDR_VAR 0 2
28325: PUSH
28326: LD_INT 5
28328: PUSH
28329: LD_INT 8
28331: PUSH
28332: LD_INT 9
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: PUSH
28340: LD_VAR 0 4
28344: ARRAY
28345: ST_TO_ADDR
// end ;
28346: LD_VAR 0 2
28350: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28351: LD_INT 0
28353: PPUSH
28354: PPUSH
28355: PPUSH
// if not mines then
28356: LD_VAR 0 2
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28509
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28365: LD_ADDR_VAR 0 5
28369: PUSH
28370: LD_INT 81
28372: PUSH
28373: LD_VAR 0 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 3
28384: PUSH
28385: LD_INT 21
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 69
28407: ST_TO_ADDR
// for i in mines do
28408: LD_ADDR_VAR 0 4
28412: PUSH
28413: LD_VAR 0 2
28417: PUSH
28418: FOR_IN
28419: IFFALSE 28507
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28421: LD_VAR 0 4
28425: PUSH
28426: LD_INT 1
28428: ARRAY
28429: PPUSH
28430: LD_VAR 0 4
28434: PUSH
28435: LD_INT 2
28437: ARRAY
28438: PPUSH
28439: CALL_OW 458
28443: NOT
28444: IFFALSE 28448
// continue ;
28446: GO 28418
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28448: LD_VAR 0 4
28452: PUSH
28453: LD_INT 1
28455: ARRAY
28456: PPUSH
28457: LD_VAR 0 4
28461: PUSH
28462: LD_INT 2
28464: ARRAY
28465: PPUSH
28466: CALL_OW 428
28470: PUSH
28471: LD_VAR 0 5
28475: IN
28476: IFFALSE 28505
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28478: LD_VAR 0 4
28482: PUSH
28483: LD_INT 1
28485: ARRAY
28486: PPUSH
28487: LD_VAR 0 4
28491: PUSH
28492: LD_INT 2
28494: ARRAY
28495: PPUSH
28496: LD_VAR 0 1
28500: PPUSH
28501: CALL_OW 456
// end ;
28505: GO 28418
28507: POP
28508: POP
// end ;
28509: LD_VAR 0 3
28513: RET
// export function Count ( array ) ; begin
28514: LD_INT 0
28516: PPUSH
// result := array + 0 ;
28517: LD_ADDR_VAR 0 2
28521: PUSH
28522: LD_VAR 0 1
28526: PUSH
28527: LD_INT 0
28529: PLUS
28530: ST_TO_ADDR
// end ;
28531: LD_VAR 0 2
28535: RET
// export function IsEmpty ( building ) ; begin
28536: LD_INT 0
28538: PPUSH
// if not building then
28539: LD_VAR 0 1
28543: NOT
28544: IFFALSE 28548
// exit ;
28546: GO 28591
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28548: LD_ADDR_VAR 0 2
28552: PUSH
28553: LD_VAR 0 1
28557: PUSH
28558: LD_INT 22
28560: PUSH
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 255
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 58
28577: PUSH
28578: EMPTY
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PPUSH
28585: CALL_OW 69
28589: IN
28590: ST_TO_ADDR
// end ;
28591: LD_VAR 0 2
28595: RET
// export function IsNotFull ( building ) ; var places ; begin
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
// if not building then
28600: LD_VAR 0 1
28604: NOT
28605: IFFALSE 28609
// exit ;
28607: GO 28637
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28609: LD_ADDR_VAR 0 2
28613: PUSH
28614: LD_VAR 0 1
28618: PPUSH
28619: LD_INT 3
28621: PUSH
28622: LD_INT 62
28624: PUSH
28625: EMPTY
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PPUSH
28632: CALL_OW 72
28636: ST_TO_ADDR
// end ;
28637: LD_VAR 0 2
28641: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28642: LD_INT 0
28644: PPUSH
28645: PPUSH
28646: PPUSH
28647: PPUSH
// tmp := [ ] ;
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: EMPTY
28654: ST_TO_ADDR
// list := [ ] ;
28655: LD_ADDR_VAR 0 5
28659: PUSH
28660: EMPTY
28661: ST_TO_ADDR
// for i = 16 to 25 do
28662: LD_ADDR_VAR 0 4
28666: PUSH
28667: DOUBLE
28668: LD_INT 16
28670: DEC
28671: ST_TO_ADDR
28672: LD_INT 25
28674: PUSH
28675: FOR_TO
28676: IFFALSE 28749
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28678: LD_ADDR_VAR 0 3
28682: PUSH
28683: LD_VAR 0 3
28687: PUSH
28688: LD_INT 22
28690: PUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: CALL_OW 255
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 91
28707: PUSH
28708: LD_VAR 0 1
28712: PUSH
28713: LD_INT 6
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 30
28723: PUSH
28724: LD_VAR 0 4
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: PUSH
28738: EMPTY
28739: LIST
28740: PPUSH
28741: CALL_OW 69
28745: ADD
28746: ST_TO_ADDR
28747: GO 28675
28749: POP
28750: POP
// for i = 1 to tmp do
28751: LD_ADDR_VAR 0 4
28755: PUSH
28756: DOUBLE
28757: LD_INT 1
28759: DEC
28760: ST_TO_ADDR
28761: LD_VAR 0 3
28765: PUSH
28766: FOR_TO
28767: IFFALSE 28855
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28769: LD_ADDR_VAR 0 5
28773: PUSH
28774: LD_VAR 0 5
28778: PUSH
28779: LD_VAR 0 3
28783: PUSH
28784: LD_VAR 0 4
28788: ARRAY
28789: PPUSH
28790: CALL_OW 266
28794: PUSH
28795: LD_VAR 0 3
28799: PUSH
28800: LD_VAR 0 4
28804: ARRAY
28805: PPUSH
28806: CALL_OW 250
28810: PUSH
28811: LD_VAR 0 3
28815: PUSH
28816: LD_VAR 0 4
28820: ARRAY
28821: PPUSH
28822: CALL_OW 251
28826: PUSH
28827: LD_VAR 0 3
28831: PUSH
28832: LD_VAR 0 4
28836: ARRAY
28837: PPUSH
28838: CALL_OW 254
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: ADD
28852: ST_TO_ADDR
28853: GO 28766
28855: POP
28856: POP
// result := list ;
28857: LD_ADDR_VAR 0 2
28861: PUSH
28862: LD_VAR 0 5
28866: ST_TO_ADDR
// end ;
28867: LD_VAR 0 2
28871: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28872: LD_INT 0
28874: PPUSH
28875: PPUSH
28876: PPUSH
28877: PPUSH
28878: PPUSH
28879: PPUSH
28880: PPUSH
// if not factory then
28881: LD_VAR 0 1
28885: NOT
28886: IFFALSE 28890
// exit ;
28888: GO 29483
// if control = control_apeman then
28890: LD_VAR 0 4
28894: PUSH
28895: LD_INT 5
28897: EQUAL
28898: IFFALSE 29007
// begin tmp := UnitsInside ( factory ) ;
28900: LD_ADDR_VAR 0 8
28904: PUSH
28905: LD_VAR 0 1
28909: PPUSH
28910: CALL_OW 313
28914: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28915: LD_VAR 0 8
28919: PPUSH
28920: LD_INT 25
28922: PUSH
28923: LD_INT 12
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PPUSH
28930: CALL_OW 72
28934: NOT
28935: IFFALSE 28945
// control := control_manual ;
28937: LD_ADDR_VAR 0 4
28941: PUSH
28942: LD_INT 1
28944: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28945: LD_ADDR_VAR 0 8
28949: PUSH
28950: LD_VAR 0 1
28954: PPUSH
28955: CALL 28642 0 1
28959: ST_TO_ADDR
// if tmp then
28960: LD_VAR 0 8
28964: IFFALSE 29007
// begin for i in tmp do
28966: LD_ADDR_VAR 0 7
28970: PUSH
28971: LD_VAR 0 8
28975: PUSH
28976: FOR_IN
28977: IFFALSE 29005
// if i [ 1 ] = b_ext_radio then
28979: LD_VAR 0 7
28983: PUSH
28984: LD_INT 1
28986: ARRAY
28987: PUSH
28988: LD_INT 22
28990: EQUAL
28991: IFFALSE 29003
// begin control := control_remote ;
28993: LD_ADDR_VAR 0 4
28997: PUSH
28998: LD_INT 2
29000: ST_TO_ADDR
// break ;
29001: GO 29005
// end ;
29003: GO 28976
29005: POP
29006: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29007: LD_VAR 0 1
29011: PPUSH
29012: LD_VAR 0 2
29016: PPUSH
29017: LD_VAR 0 3
29021: PPUSH
29022: LD_VAR 0 4
29026: PPUSH
29027: LD_VAR 0 5
29031: PPUSH
29032: CALL_OW 448
29036: IFFALSE 29071
// begin result := [ chassis , engine , control , weapon ] ;
29038: LD_ADDR_VAR 0 6
29042: PUSH
29043: LD_VAR 0 2
29047: PUSH
29048: LD_VAR 0 3
29052: PUSH
29053: LD_VAR 0 4
29057: PUSH
29058: LD_VAR 0 5
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// exit ;
29069: GO 29483
// end ; _chassis := AvailableChassisList ( factory ) ;
29071: LD_ADDR_VAR 0 9
29075: PUSH
29076: LD_VAR 0 1
29080: PPUSH
29081: CALL_OW 475
29085: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29086: LD_ADDR_VAR 0 11
29090: PUSH
29091: LD_VAR 0 1
29095: PPUSH
29096: CALL_OW 476
29100: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29101: LD_ADDR_VAR 0 12
29105: PUSH
29106: LD_VAR 0 1
29110: PPUSH
29111: CALL_OW 477
29115: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29116: LD_ADDR_VAR 0 10
29120: PUSH
29121: LD_VAR 0 1
29125: PPUSH
29126: CALL_OW 478
29130: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29131: LD_VAR 0 9
29135: NOT
29136: PUSH
29137: LD_VAR 0 11
29141: NOT
29142: OR
29143: PUSH
29144: LD_VAR 0 12
29148: NOT
29149: OR
29150: PUSH
29151: LD_VAR 0 10
29155: NOT
29156: OR
29157: IFFALSE 29192
// begin result := [ chassis , engine , control , weapon ] ;
29159: LD_ADDR_VAR 0 6
29163: PUSH
29164: LD_VAR 0 2
29168: PUSH
29169: LD_VAR 0 3
29173: PUSH
29174: LD_VAR 0 4
29178: PUSH
29179: LD_VAR 0 5
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: ST_TO_ADDR
// exit ;
29190: GO 29483
// end ; if not chassis in _chassis then
29192: LD_VAR 0 2
29196: PUSH
29197: LD_VAR 0 9
29201: IN
29202: NOT
29203: IFFALSE 29229
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29205: LD_ADDR_VAR 0 2
29209: PUSH
29210: LD_VAR 0 9
29214: PUSH
29215: LD_INT 1
29217: PPUSH
29218: LD_VAR 0 9
29222: PPUSH
29223: CALL_OW 12
29227: ARRAY
29228: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_VAR 0 3
29238: PPUSH
29239: CALL 29488 0 2
29243: NOT
29244: IFFALSE 29303
// repeat engine := _engine [ 1 ] ;
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: LD_VAR 0 11
29255: PUSH
29256: LD_INT 1
29258: ARRAY
29259: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29260: LD_ADDR_VAR 0 11
29264: PUSH
29265: LD_VAR 0 11
29269: PPUSH
29270: LD_INT 1
29272: PPUSH
29273: CALL_OW 3
29277: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29278: LD_VAR 0 2
29282: PPUSH
29283: LD_VAR 0 3
29287: PPUSH
29288: CALL 29488 0 2
29292: PUSH
29293: LD_VAR 0 11
29297: PUSH
29298: EMPTY
29299: EQUAL
29300: OR
29301: IFFALSE 29246
// if not control in _control then
29303: LD_VAR 0 4
29307: PUSH
29308: LD_VAR 0 12
29312: IN
29313: NOT
29314: IFFALSE 29340
// control := _control [ rand ( 1 , _control ) ] ;
29316: LD_ADDR_VAR 0 4
29320: PUSH
29321: LD_VAR 0 12
29325: PUSH
29326: LD_INT 1
29328: PPUSH
29329: LD_VAR 0 12
29333: PPUSH
29334: CALL_OW 12
29338: ARRAY
29339: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29340: LD_VAR 0 2
29344: PPUSH
29345: LD_VAR 0 5
29349: PPUSH
29350: CALL 29708 0 2
29354: NOT
29355: IFFALSE 29414
// repeat weapon := _weapon [ 1 ] ;
29357: LD_ADDR_VAR 0 5
29361: PUSH
29362: LD_VAR 0 10
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29371: LD_ADDR_VAR 0 10
29375: PUSH
29376: LD_VAR 0 10
29380: PPUSH
29381: LD_INT 1
29383: PPUSH
29384: CALL_OW 3
29388: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29389: LD_VAR 0 2
29393: PPUSH
29394: LD_VAR 0 5
29398: PPUSH
29399: CALL 29708 0 2
29403: PUSH
29404: LD_VAR 0 10
29408: PUSH
29409: EMPTY
29410: EQUAL
29411: OR
29412: IFFALSE 29357
// result := [ ] ;
29414: LD_ADDR_VAR 0 6
29418: PUSH
29419: EMPTY
29420: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29421: LD_VAR 0 1
29425: PPUSH
29426: LD_VAR 0 2
29430: PPUSH
29431: LD_VAR 0 3
29435: PPUSH
29436: LD_VAR 0 4
29440: PPUSH
29441: LD_VAR 0 5
29445: PPUSH
29446: CALL_OW 448
29450: IFFALSE 29483
// result := [ chassis , engine , control , weapon ] ;
29452: LD_ADDR_VAR 0 6
29456: PUSH
29457: LD_VAR 0 2
29461: PUSH
29462: LD_VAR 0 3
29466: PUSH
29467: LD_VAR 0 4
29471: PUSH
29472: LD_VAR 0 5
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: ST_TO_ADDR
// end ;
29483: LD_VAR 0 6
29487: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29488: LD_INT 0
29490: PPUSH
// if not chassis or not engine then
29491: LD_VAR 0 1
29495: NOT
29496: PUSH
29497: LD_VAR 0 2
29501: NOT
29502: OR
29503: IFFALSE 29507
// exit ;
29505: GO 29703
// case engine of engine_solar :
29507: LD_VAR 0 2
29511: PUSH
29512: LD_INT 2
29514: DOUBLE
29515: EQUAL
29516: IFTRUE 29520
29518: GO 29558
29520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29521: LD_ADDR_VAR 0 3
29525: PUSH
29526: LD_INT 11
29528: PUSH
29529: LD_INT 12
29531: PUSH
29532: LD_INT 13
29534: PUSH
29535: LD_INT 14
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: LD_INT 3
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: ST_TO_ADDR
29556: GO 29687
29558: LD_INT 1
29560: DOUBLE
29561: EQUAL
29562: IFTRUE 29566
29564: GO 29628
29566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29567: LD_ADDR_VAR 0 3
29571: PUSH
29572: LD_INT 11
29574: PUSH
29575: LD_INT 12
29577: PUSH
29578: LD_INT 13
29580: PUSH
29581: LD_INT 14
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: LD_INT 2
29589: PUSH
29590: LD_INT 3
29592: PUSH
29593: LD_INT 4
29595: PUSH
29596: LD_INT 5
29598: PUSH
29599: LD_INT 21
29601: PUSH
29602: LD_INT 23
29604: PUSH
29605: LD_INT 22
29607: PUSH
29608: LD_INT 24
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: ST_TO_ADDR
29626: GO 29687
29628: LD_INT 3
29630: DOUBLE
29631: EQUAL
29632: IFTRUE 29636
29634: GO 29686
29636: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29637: LD_ADDR_VAR 0 3
29641: PUSH
29642: LD_INT 13
29644: PUSH
29645: LD_INT 14
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 4
29656: PUSH
29657: LD_INT 5
29659: PUSH
29660: LD_INT 21
29662: PUSH
29663: LD_INT 22
29665: PUSH
29666: LD_INT 23
29668: PUSH
29669: LD_INT 24
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: ST_TO_ADDR
29684: GO 29687
29686: POP
// result := ( chassis in result ) ;
29687: LD_ADDR_VAR 0 3
29691: PUSH
29692: LD_VAR 0 1
29696: PUSH
29697: LD_VAR 0 3
29701: IN
29702: ST_TO_ADDR
// end ;
29703: LD_VAR 0 3
29707: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29708: LD_INT 0
29710: PPUSH
// if not chassis or not weapon then
29711: LD_VAR 0 1
29715: NOT
29716: PUSH
29717: LD_VAR 0 2
29721: NOT
29722: OR
29723: IFFALSE 29727
// exit ;
29725: GO 30787
// case weapon of us_machine_gun :
29727: LD_VAR 0 2
29731: PUSH
29732: LD_INT 2
29734: DOUBLE
29735: EQUAL
29736: IFTRUE 29740
29738: GO 29770
29740: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: LD_INT 4
29757: PUSH
29758: LD_INT 5
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: ST_TO_ADDR
29768: GO 30771
29770: LD_INT 3
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 29808
29778: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29779: LD_ADDR_VAR 0 3
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: LD_INT 3
29792: PUSH
29793: LD_INT 4
29795: PUSH
29796: LD_INT 5
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: ST_TO_ADDR
29806: GO 30771
29808: LD_INT 11
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29846
29816: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29817: LD_ADDR_VAR 0 3
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: LD_INT 4
29833: PUSH
29834: LD_INT 5
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: ST_TO_ADDR
29844: GO 30771
29846: LD_INT 4
29848: DOUBLE
29849: EQUAL
29850: IFTRUE 29854
29852: GO 29880
29854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 3
29865: PUSH
29866: LD_INT 4
29868: PUSH
29869: LD_INT 5
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: ST_TO_ADDR
29878: GO 30771
29880: LD_INT 5
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29914
29888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29889: LD_ADDR_VAR 0 3
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: LD_INT 3
29899: PUSH
29900: LD_INT 4
29902: PUSH
29903: LD_INT 5
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: ST_TO_ADDR
29912: GO 30771
29914: LD_INT 9
29916: DOUBLE
29917: EQUAL
29918: IFTRUE 29922
29920: GO 29948
29922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29923: LD_ADDR_VAR 0 3
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 4
29936: PUSH
29937: LD_INT 5
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
29946: GO 30771
29948: LD_INT 7
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 29982
29956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29957: LD_ADDR_VAR 0 3
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: LD_INT 4
29970: PUSH
29971: LD_INT 5
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
29980: GO 30771
29982: LD_INT 12
29984: DOUBLE
29985: EQUAL
29986: IFTRUE 29990
29988: GO 30016
29990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29991: LD_ADDR_VAR 0 3
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: LD_INT 4
30004: PUSH
30005: LD_INT 5
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: ST_TO_ADDR
30014: GO 30771
30016: LD_INT 13
30018: DOUBLE
30019: EQUAL
30020: IFTRUE 30024
30022: GO 30050
30024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30025: LD_ADDR_VAR 0 3
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: LD_INT 4
30038: PUSH
30039: LD_INT 5
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: ST_TO_ADDR
30048: GO 30771
30050: LD_INT 14
30052: DOUBLE
30053: EQUAL
30054: IFTRUE 30058
30056: GO 30076
30058: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30059: LD_ADDR_VAR 0 3
30063: PUSH
30064: LD_INT 4
30066: PUSH
30067: LD_INT 5
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: ST_TO_ADDR
30074: GO 30771
30076: LD_INT 6
30078: DOUBLE
30079: EQUAL
30080: IFTRUE 30084
30082: GO 30102
30084: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30085: LD_ADDR_VAR 0 3
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: LD_INT 5
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: ST_TO_ADDR
30100: GO 30771
30102: LD_INT 10
30104: DOUBLE
30105: EQUAL
30106: IFTRUE 30110
30108: GO 30128
30110: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30111: LD_ADDR_VAR 0 3
30115: PUSH
30116: LD_INT 4
30118: PUSH
30119: LD_INT 5
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: ST_TO_ADDR
30126: GO 30771
30128: LD_INT 22
30130: DOUBLE
30131: EQUAL
30132: IFTRUE 30136
30134: GO 30162
30136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30137: LD_ADDR_VAR 0 3
30141: PUSH
30142: LD_INT 11
30144: PUSH
30145: LD_INT 12
30147: PUSH
30148: LD_INT 13
30150: PUSH
30151: LD_INT 14
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: ST_TO_ADDR
30160: GO 30771
30162: LD_INT 23
30164: DOUBLE
30165: EQUAL
30166: IFTRUE 30170
30168: GO 30196
30170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30171: LD_ADDR_VAR 0 3
30175: PUSH
30176: LD_INT 11
30178: PUSH
30179: LD_INT 12
30181: PUSH
30182: LD_INT 13
30184: PUSH
30185: LD_INT 14
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: ST_TO_ADDR
30194: GO 30771
30196: LD_INT 24
30198: DOUBLE
30199: EQUAL
30200: IFTRUE 30204
30202: GO 30230
30204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30205: LD_ADDR_VAR 0 3
30209: PUSH
30210: LD_INT 11
30212: PUSH
30213: LD_INT 12
30215: PUSH
30216: LD_INT 13
30218: PUSH
30219: LD_INT 14
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: ST_TO_ADDR
30228: GO 30771
30230: LD_INT 30
30232: DOUBLE
30233: EQUAL
30234: IFTRUE 30238
30236: GO 30264
30238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30239: LD_ADDR_VAR 0 3
30243: PUSH
30244: LD_INT 11
30246: PUSH
30247: LD_INT 12
30249: PUSH
30250: LD_INT 13
30252: PUSH
30253: LD_INT 14
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: ST_TO_ADDR
30262: GO 30771
30264: LD_INT 25
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30290
30272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30273: LD_ADDR_VAR 0 3
30277: PUSH
30278: LD_INT 13
30280: PUSH
30281: LD_INT 14
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: ST_TO_ADDR
30288: GO 30771
30290: LD_INT 27
30292: DOUBLE
30293: EQUAL
30294: IFTRUE 30298
30296: GO 30316
30298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30299: LD_ADDR_VAR 0 3
30303: PUSH
30304: LD_INT 13
30306: PUSH
30307: LD_INT 14
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: ST_TO_ADDR
30314: GO 30771
30316: LD_INT 92
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 30350
30324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: LD_INT 11
30332: PUSH
30333: LD_INT 12
30335: PUSH
30336: LD_INT 13
30338: PUSH
30339: LD_INT 14
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
30348: GO 30771
30350: LD_INT 28
30352: DOUBLE
30353: EQUAL
30354: IFTRUE 30358
30356: GO 30376
30358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30359: LD_ADDR_VAR 0 3
30363: PUSH
30364: LD_INT 13
30366: PUSH
30367: LD_INT 14
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: ST_TO_ADDR
30374: GO 30771
30376: LD_INT 29
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30402
30384: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30385: LD_ADDR_VAR 0 3
30389: PUSH
30390: LD_INT 13
30392: PUSH
30393: LD_INT 14
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: ST_TO_ADDR
30400: GO 30771
30402: LD_INT 31
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30428
30410: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_INT 13
30418: PUSH
30419: LD_INT 14
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: ST_TO_ADDR
30426: GO 30771
30428: LD_INT 26
30430: DOUBLE
30431: EQUAL
30432: IFTRUE 30436
30434: GO 30454
30436: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30437: LD_ADDR_VAR 0 3
30441: PUSH
30442: LD_INT 13
30444: PUSH
30445: LD_INT 14
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: ST_TO_ADDR
30452: GO 30771
30454: LD_INT 42
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30488
30462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30463: LD_ADDR_VAR 0 3
30467: PUSH
30468: LD_INT 21
30470: PUSH
30471: LD_INT 22
30473: PUSH
30474: LD_INT 23
30476: PUSH
30477: LD_INT 24
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
30486: GO 30771
30488: LD_INT 43
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30522
30496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30497: LD_ADDR_VAR 0 3
30501: PUSH
30502: LD_INT 21
30504: PUSH
30505: LD_INT 22
30507: PUSH
30508: LD_INT 23
30510: PUSH
30511: LD_INT 24
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
30520: GO 30771
30522: LD_INT 44
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30556
30530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30531: LD_ADDR_VAR 0 3
30535: PUSH
30536: LD_INT 21
30538: PUSH
30539: LD_INT 22
30541: PUSH
30542: LD_INT 23
30544: PUSH
30545: LD_INT 24
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: ST_TO_ADDR
30554: GO 30771
30556: LD_INT 45
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30590
30564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30565: LD_ADDR_VAR 0 3
30569: PUSH
30570: LD_INT 21
30572: PUSH
30573: LD_INT 22
30575: PUSH
30576: LD_INT 23
30578: PUSH
30579: LD_INT 24
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: ST_TO_ADDR
30588: GO 30771
30590: LD_INT 49
30592: DOUBLE
30593: EQUAL
30594: IFTRUE 30598
30596: GO 30624
30598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30599: LD_ADDR_VAR 0 3
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: LD_INT 22
30609: PUSH
30610: LD_INT 23
30612: PUSH
30613: LD_INT 24
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
30622: GO 30771
30624: LD_INT 51
30626: DOUBLE
30627: EQUAL
30628: IFTRUE 30632
30630: GO 30658
30632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: LD_INT 21
30640: PUSH
30641: LD_INT 22
30643: PUSH
30644: LD_INT 23
30646: PUSH
30647: LD_INT 24
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: ST_TO_ADDR
30656: GO 30771
30658: LD_INT 52
30660: DOUBLE
30661: EQUAL
30662: IFTRUE 30666
30664: GO 30692
30666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30667: LD_ADDR_VAR 0 3
30671: PUSH
30672: LD_INT 21
30674: PUSH
30675: LD_INT 22
30677: PUSH
30678: LD_INT 23
30680: PUSH
30681: LD_INT 24
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
30690: GO 30771
30692: LD_INT 53
30694: DOUBLE
30695: EQUAL
30696: IFTRUE 30700
30698: GO 30718
30700: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30701: LD_ADDR_VAR 0 3
30705: PUSH
30706: LD_INT 23
30708: PUSH
30709: LD_INT 24
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: ST_TO_ADDR
30716: GO 30771
30718: LD_INT 46
30720: DOUBLE
30721: EQUAL
30722: IFTRUE 30726
30724: GO 30744
30726: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30727: LD_ADDR_VAR 0 3
30731: PUSH
30732: LD_INT 23
30734: PUSH
30735: LD_INT 24
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: ST_TO_ADDR
30742: GO 30771
30744: LD_INT 47
30746: DOUBLE
30747: EQUAL
30748: IFTRUE 30752
30750: GO 30770
30752: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30753: LD_ADDR_VAR 0 3
30757: PUSH
30758: LD_INT 23
30760: PUSH
30761: LD_INT 24
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: ST_TO_ADDR
30768: GO 30771
30770: POP
// result := ( chassis in result ) ;
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_VAR 0 1
30780: PUSH
30781: LD_VAR 0 3
30785: IN
30786: ST_TO_ADDR
// end ;
30787: LD_VAR 0 3
30791: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30792: LD_INT 0
30794: PPUSH
30795: PPUSH
30796: PPUSH
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
// result := array ;
30801: LD_ADDR_VAR 0 5
30805: PUSH
30806: LD_VAR 0 1
30810: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30811: LD_VAR 0 1
30815: NOT
30816: PUSH
30817: LD_VAR 0 2
30821: NOT
30822: OR
30823: PUSH
30824: LD_VAR 0 3
30828: NOT
30829: OR
30830: PUSH
30831: LD_VAR 0 2
30835: PUSH
30836: LD_VAR 0 1
30840: GREATER
30841: OR
30842: PUSH
30843: LD_VAR 0 3
30847: PUSH
30848: LD_VAR 0 1
30852: GREATER
30853: OR
30854: IFFALSE 30858
// exit ;
30856: GO 31154
// if direction then
30858: LD_VAR 0 4
30862: IFFALSE 30926
// begin d := 1 ;
30864: LD_ADDR_VAR 0 9
30868: PUSH
30869: LD_INT 1
30871: ST_TO_ADDR
// if i_from > i_to then
30872: LD_VAR 0 2
30876: PUSH
30877: LD_VAR 0 3
30881: GREATER
30882: IFFALSE 30908
// length := ( array - i_from ) + i_to else
30884: LD_ADDR_VAR 0 11
30888: PUSH
30889: LD_VAR 0 1
30893: PUSH
30894: LD_VAR 0 2
30898: MINUS
30899: PUSH
30900: LD_VAR 0 3
30904: PLUS
30905: ST_TO_ADDR
30906: GO 30924
// length := i_to - i_from ;
30908: LD_ADDR_VAR 0 11
30912: PUSH
30913: LD_VAR 0 3
30917: PUSH
30918: LD_VAR 0 2
30922: MINUS
30923: ST_TO_ADDR
// end else
30924: GO 30987
// begin d := - 1 ;
30926: LD_ADDR_VAR 0 9
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: ST_TO_ADDR
// if i_from > i_to then
30935: LD_VAR 0 2
30939: PUSH
30940: LD_VAR 0 3
30944: GREATER
30945: IFFALSE 30965
// length := i_from - i_to else
30947: LD_ADDR_VAR 0 11
30951: PUSH
30952: LD_VAR 0 2
30956: PUSH
30957: LD_VAR 0 3
30961: MINUS
30962: ST_TO_ADDR
30963: GO 30987
// length := ( array - i_to ) + i_from ;
30965: LD_ADDR_VAR 0 11
30969: PUSH
30970: LD_VAR 0 1
30974: PUSH
30975: LD_VAR 0 3
30979: MINUS
30980: PUSH
30981: LD_VAR 0 2
30985: PLUS
30986: ST_TO_ADDR
// end ; if not length then
30987: LD_VAR 0 11
30991: NOT
30992: IFFALSE 30996
// exit ;
30994: GO 31154
// tmp := array ;
30996: LD_ADDR_VAR 0 10
31000: PUSH
31001: LD_VAR 0 1
31005: ST_TO_ADDR
// for i = 1 to length do
31006: LD_ADDR_VAR 0 6
31010: PUSH
31011: DOUBLE
31012: LD_INT 1
31014: DEC
31015: ST_TO_ADDR
31016: LD_VAR 0 11
31020: PUSH
31021: FOR_TO
31022: IFFALSE 31142
// begin for j = 1 to array do
31024: LD_ADDR_VAR 0 7
31028: PUSH
31029: DOUBLE
31030: LD_INT 1
31032: DEC
31033: ST_TO_ADDR
31034: LD_VAR 0 1
31038: PUSH
31039: FOR_TO
31040: IFFALSE 31128
// begin k := j + d ;
31042: LD_ADDR_VAR 0 8
31046: PUSH
31047: LD_VAR 0 7
31051: PUSH
31052: LD_VAR 0 9
31056: PLUS
31057: ST_TO_ADDR
// if k > array then
31058: LD_VAR 0 8
31062: PUSH
31063: LD_VAR 0 1
31067: GREATER
31068: IFFALSE 31078
// k := 1 ;
31070: LD_ADDR_VAR 0 8
31074: PUSH
31075: LD_INT 1
31077: ST_TO_ADDR
// if not k then
31078: LD_VAR 0 8
31082: NOT
31083: IFFALSE 31095
// k := array ;
31085: LD_ADDR_VAR 0 8
31089: PUSH
31090: LD_VAR 0 1
31094: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31095: LD_ADDR_VAR 0 10
31099: PUSH
31100: LD_VAR 0 10
31104: PPUSH
31105: LD_VAR 0 8
31109: PPUSH
31110: LD_VAR 0 1
31114: PUSH
31115: LD_VAR 0 7
31119: ARRAY
31120: PPUSH
31121: CALL_OW 1
31125: ST_TO_ADDR
// end ;
31126: GO 31039
31128: POP
31129: POP
// array := tmp ;
31130: LD_ADDR_VAR 0 1
31134: PUSH
31135: LD_VAR 0 10
31139: ST_TO_ADDR
// end ;
31140: GO 31021
31142: POP
31143: POP
// result := array ;
31144: LD_ADDR_VAR 0 5
31148: PUSH
31149: LD_VAR 0 1
31153: ST_TO_ADDR
// end ;
31154: LD_VAR 0 5
31158: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31159: LD_INT 0
31161: PPUSH
31162: PPUSH
// result := 0 ;
31163: LD_ADDR_VAR 0 3
31167: PUSH
31168: LD_INT 0
31170: ST_TO_ADDR
// if not array or not value in array then
31171: LD_VAR 0 1
31175: NOT
31176: PUSH
31177: LD_VAR 0 2
31181: PUSH
31182: LD_VAR 0 1
31186: IN
31187: NOT
31188: OR
31189: IFFALSE 31193
// exit ;
31191: GO 31247
// for i = 1 to array do
31193: LD_ADDR_VAR 0 4
31197: PUSH
31198: DOUBLE
31199: LD_INT 1
31201: DEC
31202: ST_TO_ADDR
31203: LD_VAR 0 1
31207: PUSH
31208: FOR_TO
31209: IFFALSE 31245
// if value = array [ i ] then
31211: LD_VAR 0 2
31215: PUSH
31216: LD_VAR 0 1
31220: PUSH
31221: LD_VAR 0 4
31225: ARRAY
31226: EQUAL
31227: IFFALSE 31243
// begin result := i ;
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: LD_VAR 0 4
31238: ST_TO_ADDR
// exit ;
31239: POP
31240: POP
31241: GO 31247
// end ;
31243: GO 31208
31245: POP
31246: POP
// end ;
31247: LD_VAR 0 3
31251: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31252: LD_INT 0
31254: PPUSH
// vc_chassis := chassis ;
31255: LD_ADDR_OWVAR 37
31259: PUSH
31260: LD_VAR 0 1
31264: ST_TO_ADDR
// vc_engine := engine ;
31265: LD_ADDR_OWVAR 39
31269: PUSH
31270: LD_VAR 0 2
31274: ST_TO_ADDR
// vc_control := control ;
31275: LD_ADDR_OWVAR 38
31279: PUSH
31280: LD_VAR 0 3
31284: ST_TO_ADDR
// vc_weapon := weapon ;
31285: LD_ADDR_OWVAR 40
31289: PUSH
31290: LD_VAR 0 4
31294: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31295: LD_ADDR_OWVAR 41
31299: PUSH
31300: LD_VAR 0 5
31304: ST_TO_ADDR
// end ;
31305: LD_VAR 0 6
31309: RET
// export function WantPlant ( unit ) ; var task ; begin
31310: LD_INT 0
31312: PPUSH
31313: PPUSH
// result := false ;
31314: LD_ADDR_VAR 0 2
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31322: LD_ADDR_VAR 0 3
31326: PUSH
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL_OW 437
31336: ST_TO_ADDR
// if task then
31337: LD_VAR 0 3
31341: IFFALSE 31369
// if task [ 1 ] [ 1 ] = p then
31343: LD_VAR 0 3
31347: PUSH
31348: LD_INT 1
31350: ARRAY
31351: PUSH
31352: LD_INT 1
31354: ARRAY
31355: PUSH
31356: LD_STRING p
31358: EQUAL
31359: IFFALSE 31369
// result := true ;
31361: LD_ADDR_VAR 0 2
31365: PUSH
31366: LD_INT 1
31368: ST_TO_ADDR
// end ;
31369: LD_VAR 0 2
31373: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31374: LD_INT 0
31376: PPUSH
31377: PPUSH
31378: PPUSH
31379: PPUSH
// if pos < 1 then
31380: LD_VAR 0 2
31384: PUSH
31385: LD_INT 1
31387: LESS
31388: IFFALSE 31392
// exit ;
31390: GO 31695
// if pos = 1 then
31392: LD_VAR 0 2
31396: PUSH
31397: LD_INT 1
31399: EQUAL
31400: IFFALSE 31433
// result := Replace ( arr , pos [ 1 ] , value ) else
31402: LD_ADDR_VAR 0 4
31406: PUSH
31407: LD_VAR 0 1
31411: PPUSH
31412: LD_VAR 0 2
31416: PUSH
31417: LD_INT 1
31419: ARRAY
31420: PPUSH
31421: LD_VAR 0 3
31425: PPUSH
31426: CALL_OW 1
31430: ST_TO_ADDR
31431: GO 31695
// begin tmp := arr ;
31433: LD_ADDR_VAR 0 6
31437: PUSH
31438: LD_VAR 0 1
31442: ST_TO_ADDR
// s_arr := [ tmp ] ;
31443: LD_ADDR_VAR 0 7
31447: PUSH
31448: LD_VAR 0 6
31452: PUSH
31453: EMPTY
31454: LIST
31455: ST_TO_ADDR
// for i = 1 to pos - 1 do
31456: LD_ADDR_VAR 0 5
31460: PUSH
31461: DOUBLE
31462: LD_INT 1
31464: DEC
31465: ST_TO_ADDR
31466: LD_VAR 0 2
31470: PUSH
31471: LD_INT 1
31473: MINUS
31474: PUSH
31475: FOR_TO
31476: IFFALSE 31521
// begin tmp := tmp [ pos [ i ] ] ;
31478: LD_ADDR_VAR 0 6
31482: PUSH
31483: LD_VAR 0 6
31487: PUSH
31488: LD_VAR 0 2
31492: PUSH
31493: LD_VAR 0 5
31497: ARRAY
31498: ARRAY
31499: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31500: LD_ADDR_VAR 0 7
31504: PUSH
31505: LD_VAR 0 7
31509: PUSH
31510: LD_VAR 0 6
31514: PUSH
31515: EMPTY
31516: LIST
31517: ADD
31518: ST_TO_ADDR
// end ;
31519: GO 31475
31521: POP
31522: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31523: LD_ADDR_VAR 0 6
31527: PUSH
31528: LD_VAR 0 6
31532: PPUSH
31533: LD_VAR 0 2
31537: PUSH
31538: LD_VAR 0 2
31542: ARRAY
31543: PPUSH
31544: LD_VAR 0 3
31548: PPUSH
31549: CALL_OW 1
31553: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31554: LD_ADDR_VAR 0 7
31558: PUSH
31559: LD_VAR 0 7
31563: PPUSH
31564: LD_VAR 0 7
31568: PPUSH
31569: LD_VAR 0 6
31573: PPUSH
31574: CALL_OW 1
31578: ST_TO_ADDR
// for i = s_arr downto 2 do
31579: LD_ADDR_VAR 0 5
31583: PUSH
31584: DOUBLE
31585: LD_VAR 0 7
31589: INC
31590: ST_TO_ADDR
31591: LD_INT 2
31593: PUSH
31594: FOR_DOWNTO
31595: IFFALSE 31679
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31597: LD_ADDR_VAR 0 6
31601: PUSH
31602: LD_VAR 0 7
31606: PUSH
31607: LD_VAR 0 5
31611: PUSH
31612: LD_INT 1
31614: MINUS
31615: ARRAY
31616: PPUSH
31617: LD_VAR 0 2
31621: PUSH
31622: LD_VAR 0 5
31626: PUSH
31627: LD_INT 1
31629: MINUS
31630: ARRAY
31631: PPUSH
31632: LD_VAR 0 7
31636: PUSH
31637: LD_VAR 0 5
31641: ARRAY
31642: PPUSH
31643: CALL_OW 1
31647: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31648: LD_ADDR_VAR 0 7
31652: PUSH
31653: LD_VAR 0 7
31657: PPUSH
31658: LD_VAR 0 5
31662: PUSH
31663: LD_INT 1
31665: MINUS
31666: PPUSH
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 1
31676: ST_TO_ADDR
// end ;
31677: GO 31594
31679: POP
31680: POP
// result := s_arr [ 1 ] ;
31681: LD_ADDR_VAR 0 4
31685: PUSH
31686: LD_VAR 0 7
31690: PUSH
31691: LD_INT 1
31693: ARRAY
31694: ST_TO_ADDR
// end ; end ;
31695: LD_VAR 0 4
31699: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31700: LD_INT 0
31702: PPUSH
31703: PPUSH
// if not list then
31704: LD_VAR 0 1
31708: NOT
31709: IFFALSE 31713
// exit ;
31711: GO 31804
// i := list [ pos1 ] ;
31713: LD_ADDR_VAR 0 5
31717: PUSH
31718: LD_VAR 0 1
31722: PUSH
31723: LD_VAR 0 2
31727: ARRAY
31728: ST_TO_ADDR
// if not i then
31729: LD_VAR 0 5
31733: NOT
31734: IFFALSE 31738
// exit ;
31736: GO 31804
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31738: LD_ADDR_VAR 0 1
31742: PUSH
31743: LD_VAR 0 1
31747: PPUSH
31748: LD_VAR 0 2
31752: PPUSH
31753: LD_VAR 0 1
31757: PUSH
31758: LD_VAR 0 3
31762: ARRAY
31763: PPUSH
31764: CALL_OW 1
31768: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31769: LD_ADDR_VAR 0 1
31773: PUSH
31774: LD_VAR 0 1
31778: PPUSH
31779: LD_VAR 0 3
31783: PPUSH
31784: LD_VAR 0 5
31788: PPUSH
31789: CALL_OW 1
31793: ST_TO_ADDR
// result := list ;
31794: LD_ADDR_VAR 0 4
31798: PUSH
31799: LD_VAR 0 1
31803: ST_TO_ADDR
// end ;
31804: LD_VAR 0 4
31808: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31809: LD_INT 0
31811: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31812: LD_ADDR_VAR 0 5
31816: PUSH
31817: LD_VAR 0 1
31821: PPUSH
31822: CALL_OW 250
31826: PPUSH
31827: LD_VAR 0 1
31831: PPUSH
31832: CALL_OW 251
31836: PPUSH
31837: LD_VAR 0 2
31841: PPUSH
31842: LD_VAR 0 3
31846: PPUSH
31847: LD_VAR 0 4
31851: PPUSH
31852: CALL 32230 0 5
31856: ST_TO_ADDR
// end ;
31857: LD_VAR 0 5
31861: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31862: LD_INT 0
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
// if not list or not unit then
31868: LD_VAR 0 2
31872: NOT
31873: PUSH
31874: LD_VAR 0 1
31878: NOT
31879: OR
31880: IFFALSE 31884
// exit ;
31882: GO 32225
// result := [ ] ;
31884: LD_ADDR_VAR 0 5
31888: PUSH
31889: EMPTY
31890: ST_TO_ADDR
// for i in list do
31891: LD_ADDR_VAR 0 6
31895: PUSH
31896: LD_VAR 0 2
31900: PUSH
31901: FOR_IN
31902: IFFALSE 32120
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31904: LD_ADDR_VAR 0 8
31908: PUSH
31909: LD_VAR 0 1
31913: PPUSH
31914: LD_VAR 0 6
31918: PUSH
31919: LD_INT 1
31921: ARRAY
31922: PPUSH
31923: LD_VAR 0 6
31927: PUSH
31928: LD_INT 2
31930: ARRAY
31931: PPUSH
31932: CALL_OW 297
31936: ST_TO_ADDR
// if not Count ( result ) then
31937: LD_VAR 0 5
31941: PPUSH
31942: CALL 28514 0 1
31946: NOT
31947: IFFALSE 31980
// begin result := Join ( result , [ i , tmp ] ) ;
31949: LD_ADDR_VAR 0 5
31953: PUSH
31954: LD_VAR 0 5
31958: PPUSH
31959: LD_VAR 0 6
31963: PUSH
31964: LD_VAR 0 8
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PPUSH
31973: CALL 64103 0 2
31977: ST_TO_ADDR
// continue ;
31978: GO 31901
// end ; if result [ result ] [ 2 ] <= tmp then
31980: LD_VAR 0 5
31984: PUSH
31985: LD_VAR 0 5
31989: ARRAY
31990: PUSH
31991: LD_INT 2
31993: ARRAY
31994: PUSH
31995: LD_VAR 0 8
31999: LESSEQUAL
32000: IFFALSE 32033
// result := Join ( result , [ i , tmp ] ) else
32002: LD_ADDR_VAR 0 5
32006: PUSH
32007: LD_VAR 0 5
32011: PPUSH
32012: LD_VAR 0 6
32016: PUSH
32017: LD_VAR 0 8
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PPUSH
32026: CALL 64103 0 2
32030: ST_TO_ADDR
32031: GO 32118
// begin for j := 1 to Count ( result ) do
32033: LD_ADDR_VAR 0 7
32037: PUSH
32038: DOUBLE
32039: LD_INT 1
32041: DEC
32042: ST_TO_ADDR
32043: LD_VAR 0 5
32047: PPUSH
32048: CALL 28514 0 1
32052: PUSH
32053: FOR_TO
32054: IFFALSE 32116
// begin if tmp < result [ j ] [ 2 ] then
32056: LD_VAR 0 8
32060: PUSH
32061: LD_VAR 0 5
32065: PUSH
32066: LD_VAR 0 7
32070: ARRAY
32071: PUSH
32072: LD_INT 2
32074: ARRAY
32075: LESS
32076: IFFALSE 32114
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32078: LD_ADDR_VAR 0 5
32082: PUSH
32083: LD_VAR 0 5
32087: PPUSH
32088: LD_VAR 0 7
32092: PPUSH
32093: LD_VAR 0 6
32097: PUSH
32098: LD_VAR 0 8
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PPUSH
32107: CALL_OW 2
32111: ST_TO_ADDR
// break ;
32112: GO 32116
// end ; end ;
32114: GO 32053
32116: POP
32117: POP
// end ; end ;
32118: GO 31901
32120: POP
32121: POP
// if result and not asc then
32122: LD_VAR 0 5
32126: PUSH
32127: LD_VAR 0 3
32131: NOT
32132: AND
32133: IFFALSE 32150
// result := ReverseArray ( result ) ;
32135: LD_ADDR_VAR 0 5
32139: PUSH
32140: LD_VAR 0 5
32144: PPUSH
32145: CALL 59390 0 1
32149: ST_TO_ADDR
// tmp := [ ] ;
32150: LD_ADDR_VAR 0 8
32154: PUSH
32155: EMPTY
32156: ST_TO_ADDR
// if mode then
32157: LD_VAR 0 4
32161: IFFALSE 32225
// begin for i := 1 to result do
32163: LD_ADDR_VAR 0 6
32167: PUSH
32168: DOUBLE
32169: LD_INT 1
32171: DEC
32172: ST_TO_ADDR
32173: LD_VAR 0 5
32177: PUSH
32178: FOR_TO
32179: IFFALSE 32213
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32181: LD_ADDR_VAR 0 8
32185: PUSH
32186: LD_VAR 0 8
32190: PPUSH
32191: LD_VAR 0 5
32195: PUSH
32196: LD_VAR 0 6
32200: ARRAY
32201: PUSH
32202: LD_INT 1
32204: ARRAY
32205: PPUSH
32206: CALL 64103 0 2
32210: ST_TO_ADDR
32211: GO 32178
32213: POP
32214: POP
// result := tmp ;
32215: LD_ADDR_VAR 0 5
32219: PUSH
32220: LD_VAR 0 8
32224: ST_TO_ADDR
// end ; end ;
32225: LD_VAR 0 5
32229: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32230: LD_INT 0
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
// if not list then
32236: LD_VAR 0 3
32240: NOT
32241: IFFALSE 32245
// exit ;
32243: GO 32633
// result := [ ] ;
32245: LD_ADDR_VAR 0 6
32249: PUSH
32250: EMPTY
32251: ST_TO_ADDR
// for i in list do
32252: LD_ADDR_VAR 0 7
32256: PUSH
32257: LD_VAR 0 3
32261: PUSH
32262: FOR_IN
32263: IFFALSE 32465
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32265: LD_ADDR_VAR 0 9
32269: PUSH
32270: LD_VAR 0 7
32274: PPUSH
32275: LD_VAR 0 1
32279: PPUSH
32280: LD_VAR 0 2
32284: PPUSH
32285: CALL_OW 297
32289: ST_TO_ADDR
// if not result then
32290: LD_VAR 0 6
32294: NOT
32295: IFFALSE 32321
// result := [ [ i , tmp ] ] else
32297: LD_ADDR_VAR 0 6
32301: PUSH
32302: LD_VAR 0 7
32306: PUSH
32307: LD_VAR 0 9
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: EMPTY
32317: LIST
32318: ST_TO_ADDR
32319: GO 32463
// begin if result [ result ] [ 2 ] < tmp then
32321: LD_VAR 0 6
32325: PUSH
32326: LD_VAR 0 6
32330: ARRAY
32331: PUSH
32332: LD_INT 2
32334: ARRAY
32335: PUSH
32336: LD_VAR 0 9
32340: LESS
32341: IFFALSE 32383
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32343: LD_ADDR_VAR 0 6
32347: PUSH
32348: LD_VAR 0 6
32352: PPUSH
32353: LD_VAR 0 6
32357: PUSH
32358: LD_INT 1
32360: PLUS
32361: PPUSH
32362: LD_VAR 0 7
32366: PUSH
32367: LD_VAR 0 9
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PPUSH
32376: CALL_OW 2
32380: ST_TO_ADDR
32381: GO 32463
// for j = 1 to result do
32383: LD_ADDR_VAR 0 8
32387: PUSH
32388: DOUBLE
32389: LD_INT 1
32391: DEC
32392: ST_TO_ADDR
32393: LD_VAR 0 6
32397: PUSH
32398: FOR_TO
32399: IFFALSE 32461
// begin if tmp < result [ j ] [ 2 ] then
32401: LD_VAR 0 9
32405: PUSH
32406: LD_VAR 0 6
32410: PUSH
32411: LD_VAR 0 8
32415: ARRAY
32416: PUSH
32417: LD_INT 2
32419: ARRAY
32420: LESS
32421: IFFALSE 32459
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32423: LD_ADDR_VAR 0 6
32427: PUSH
32428: LD_VAR 0 6
32432: PPUSH
32433: LD_VAR 0 8
32437: PPUSH
32438: LD_VAR 0 7
32442: PUSH
32443: LD_VAR 0 9
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PPUSH
32452: CALL_OW 2
32456: ST_TO_ADDR
// break ;
32457: GO 32461
// end ; end ;
32459: GO 32398
32461: POP
32462: POP
// end ; end ;
32463: GO 32262
32465: POP
32466: POP
// if result and not asc then
32467: LD_VAR 0 6
32471: PUSH
32472: LD_VAR 0 4
32476: NOT
32477: AND
32478: IFFALSE 32553
// begin tmp := result ;
32480: LD_ADDR_VAR 0 9
32484: PUSH
32485: LD_VAR 0 6
32489: ST_TO_ADDR
// for i = tmp downto 1 do
32490: LD_ADDR_VAR 0 7
32494: PUSH
32495: DOUBLE
32496: LD_VAR 0 9
32500: INC
32501: ST_TO_ADDR
32502: LD_INT 1
32504: PUSH
32505: FOR_DOWNTO
32506: IFFALSE 32551
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32508: LD_ADDR_VAR 0 6
32512: PUSH
32513: LD_VAR 0 6
32517: PPUSH
32518: LD_VAR 0 9
32522: PUSH
32523: LD_VAR 0 7
32527: MINUS
32528: PUSH
32529: LD_INT 1
32531: PLUS
32532: PPUSH
32533: LD_VAR 0 9
32537: PUSH
32538: LD_VAR 0 7
32542: ARRAY
32543: PPUSH
32544: CALL_OW 1
32548: ST_TO_ADDR
32549: GO 32505
32551: POP
32552: POP
// end ; tmp := [ ] ;
32553: LD_ADDR_VAR 0 9
32557: PUSH
32558: EMPTY
32559: ST_TO_ADDR
// if mode then
32560: LD_VAR 0 5
32564: IFFALSE 32633
// begin for i = 1 to result do
32566: LD_ADDR_VAR 0 7
32570: PUSH
32571: DOUBLE
32572: LD_INT 1
32574: DEC
32575: ST_TO_ADDR
32576: LD_VAR 0 6
32580: PUSH
32581: FOR_TO
32582: IFFALSE 32621
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32584: LD_ADDR_VAR 0 9
32588: PUSH
32589: LD_VAR 0 9
32593: PPUSH
32594: LD_VAR 0 7
32598: PPUSH
32599: LD_VAR 0 6
32603: PUSH
32604: LD_VAR 0 7
32608: ARRAY
32609: PUSH
32610: LD_INT 1
32612: ARRAY
32613: PPUSH
32614: CALL_OW 1
32618: ST_TO_ADDR
32619: GO 32581
32621: POP
32622: POP
// result := tmp ;
32623: LD_ADDR_VAR 0 6
32627: PUSH
32628: LD_VAR 0 9
32632: ST_TO_ADDR
// end ; end ;
32633: LD_VAR 0 6
32637: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32638: LD_INT 0
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
32645: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32646: LD_ADDR_VAR 0 5
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: EMPTY
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
// if not x or not y then
32668: LD_VAR 0 2
32672: NOT
32673: PUSH
32674: LD_VAR 0 3
32678: NOT
32679: OR
32680: IFFALSE 32684
// exit ;
32682: GO 34334
// if not range then
32684: LD_VAR 0 4
32688: NOT
32689: IFFALSE 32699
// range := 10 ;
32691: LD_ADDR_VAR 0 4
32695: PUSH
32696: LD_INT 10
32698: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32699: LD_ADDR_VAR 0 8
32703: PUSH
32704: LD_INT 81
32706: PUSH
32707: LD_VAR 0 1
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 92
32718: PUSH
32719: LD_VAR 0 2
32723: PUSH
32724: LD_VAR 0 3
32728: PUSH
32729: LD_VAR 0 4
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 3
32742: PUSH
32743: LD_INT 21
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: PPUSH
32762: CALL_OW 69
32766: ST_TO_ADDR
// if not tmp then
32767: LD_VAR 0 8
32771: NOT
32772: IFFALSE 32776
// exit ;
32774: GO 34334
// for i in tmp do
32776: LD_ADDR_VAR 0 6
32780: PUSH
32781: LD_VAR 0 8
32785: PUSH
32786: FOR_IN
32787: IFFALSE 34309
// begin points := [ 0 , 0 , 0 ] ;
32789: LD_ADDR_VAR 0 9
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: ST_TO_ADDR
// bpoints := 1 ;
32808: LD_ADDR_VAR 0 10
32812: PUSH
32813: LD_INT 1
32815: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32816: LD_VAR 0 6
32820: PPUSH
32821: CALL_OW 247
32825: PUSH
32826: LD_INT 1
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 33412
32834: POP
// begin if GetClass ( i ) = 1 then
32835: LD_VAR 0 6
32839: PPUSH
32840: CALL_OW 257
32844: PUSH
32845: LD_INT 1
32847: EQUAL
32848: IFFALSE 32869
// points := [ 10 , 5 , 3 ] ;
32850: LD_ADDR_VAR 0 9
32854: PUSH
32855: LD_INT 10
32857: PUSH
32858: LD_INT 5
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: LIST
32868: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32869: LD_VAR 0 6
32873: PPUSH
32874: CALL_OW 257
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: LD_INT 3
32884: PUSH
32885: LD_INT 4
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: IN
32893: IFFALSE 32914
// points := [ 3 , 2 , 1 ] ;
32895: LD_ADDR_VAR 0 9
32899: PUSH
32900: LD_INT 3
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32914: LD_VAR 0 6
32918: PPUSH
32919: CALL_OW 257
32923: PUSH
32924: LD_INT 5
32926: EQUAL
32927: IFFALSE 32948
// points := [ 130 , 5 , 2 ] ;
32929: LD_ADDR_VAR 0 9
32933: PUSH
32934: LD_INT 130
32936: PUSH
32937: LD_INT 5
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32948: LD_VAR 0 6
32952: PPUSH
32953: CALL_OW 257
32957: PUSH
32958: LD_INT 8
32960: EQUAL
32961: IFFALSE 32982
// points := [ 35 , 35 , 30 ] ;
32963: LD_ADDR_VAR 0 9
32967: PUSH
32968: LD_INT 35
32970: PUSH
32971: LD_INT 35
32973: PUSH
32974: LD_INT 30
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32982: LD_VAR 0 6
32986: PPUSH
32987: CALL_OW 257
32991: PUSH
32992: LD_INT 9
32994: EQUAL
32995: IFFALSE 33016
// points := [ 20 , 55 , 40 ] ;
32997: LD_ADDR_VAR 0 9
33001: PUSH
33002: LD_INT 20
33004: PUSH
33005: LD_INT 55
33007: PUSH
33008: LD_INT 40
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33016: LD_VAR 0 6
33020: PPUSH
33021: CALL_OW 257
33025: PUSH
33026: LD_INT 12
33028: PUSH
33029: LD_INT 16
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: IN
33036: IFFALSE 33057
// points := [ 5 , 3 , 2 ] ;
33038: LD_ADDR_VAR 0 9
33042: PUSH
33043: LD_INT 5
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: LD_INT 2
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: LIST
33056: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33057: LD_VAR 0 6
33061: PPUSH
33062: CALL_OW 257
33066: PUSH
33067: LD_INT 17
33069: EQUAL
33070: IFFALSE 33091
// points := [ 100 , 50 , 75 ] ;
33072: LD_ADDR_VAR 0 9
33076: PUSH
33077: LD_INT 100
33079: PUSH
33080: LD_INT 50
33082: PUSH
33083: LD_INT 75
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33091: LD_VAR 0 6
33095: PPUSH
33096: CALL_OW 257
33100: PUSH
33101: LD_INT 15
33103: EQUAL
33104: IFFALSE 33125
// points := [ 10 , 5 , 3 ] ;
33106: LD_ADDR_VAR 0 9
33110: PUSH
33111: LD_INT 10
33113: PUSH
33114: LD_INT 5
33116: PUSH
33117: LD_INT 3
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: LIST
33124: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33125: LD_VAR 0 6
33129: PPUSH
33130: CALL_OW 257
33134: PUSH
33135: LD_INT 14
33137: EQUAL
33138: IFFALSE 33159
// points := [ 10 , 0 , 0 ] ;
33140: LD_ADDR_VAR 0 9
33144: PUSH
33145: LD_INT 10
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: LIST
33158: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33159: LD_VAR 0 6
33163: PPUSH
33164: CALL_OW 257
33168: PUSH
33169: LD_INT 11
33171: EQUAL
33172: IFFALSE 33193
// points := [ 30 , 10 , 5 ] ;
33174: LD_ADDR_VAR 0 9
33178: PUSH
33179: LD_INT 30
33181: PUSH
33182: LD_INT 10
33184: PUSH
33185: LD_INT 5
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33193: LD_VAR 0 1
33197: PPUSH
33198: LD_INT 5
33200: PPUSH
33201: CALL_OW 321
33205: PUSH
33206: LD_INT 2
33208: EQUAL
33209: IFFALSE 33226
// bpoints := bpoints * 1.8 ;
33211: LD_ADDR_VAR 0 10
33215: PUSH
33216: LD_VAR 0 10
33220: PUSH
33221: LD_REAL  1.80000000000000E+0000
33224: MUL
33225: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33226: LD_VAR 0 6
33230: PPUSH
33231: CALL_OW 257
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: LD_INT 4
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: IN
33254: PUSH
33255: LD_VAR 0 1
33259: PPUSH
33260: LD_INT 51
33262: PPUSH
33263: CALL_OW 321
33267: PUSH
33268: LD_INT 2
33270: EQUAL
33271: AND
33272: IFFALSE 33289
// bpoints := bpoints * 1.2 ;
33274: LD_ADDR_VAR 0 10
33278: PUSH
33279: LD_VAR 0 10
33283: PUSH
33284: LD_REAL  1.20000000000000E+0000
33287: MUL
33288: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33289: LD_VAR 0 6
33293: PPUSH
33294: CALL_OW 257
33298: PUSH
33299: LD_INT 5
33301: PUSH
33302: LD_INT 7
33304: PUSH
33305: LD_INT 9
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: IN
33313: PUSH
33314: LD_VAR 0 1
33318: PPUSH
33319: LD_INT 52
33321: PPUSH
33322: CALL_OW 321
33326: PUSH
33327: LD_INT 2
33329: EQUAL
33330: AND
33331: IFFALSE 33348
// bpoints := bpoints * 1.5 ;
33333: LD_ADDR_VAR 0 10
33337: PUSH
33338: LD_VAR 0 10
33342: PUSH
33343: LD_REAL  1.50000000000000E+0000
33346: MUL
33347: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33348: LD_VAR 0 1
33352: PPUSH
33353: LD_INT 66
33355: PPUSH
33356: CALL_OW 321
33360: PUSH
33361: LD_INT 2
33363: EQUAL
33364: IFFALSE 33381
// bpoints := bpoints * 1.1 ;
33366: LD_ADDR_VAR 0 10
33370: PUSH
33371: LD_VAR 0 10
33375: PUSH
33376: LD_REAL  1.10000000000000E+0000
33379: MUL
33380: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33381: LD_ADDR_VAR 0 10
33385: PUSH
33386: LD_VAR 0 10
33390: PUSH
33391: LD_VAR 0 6
33395: PPUSH
33396: LD_INT 1
33398: PPUSH
33399: CALL_OW 259
33403: PUSH
33404: LD_REAL  1.15000000000000E+0000
33407: MUL
33408: MUL
33409: ST_TO_ADDR
// end ; unit_vehicle :
33410: GO 34238
33412: LD_INT 2
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 34226
33420: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33421: LD_VAR 0 6
33425: PPUSH
33426: CALL_OW 264
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 42
33436: PUSH
33437: LD_INT 24
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: IN
33445: IFFALSE 33466
// points := [ 25 , 5 , 3 ] ;
33447: LD_ADDR_VAR 0 9
33451: PUSH
33452: LD_INT 25
33454: PUSH
33455: LD_INT 5
33457: PUSH
33458: LD_INT 3
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33466: LD_VAR 0 6
33470: PPUSH
33471: CALL_OW 264
33475: PUSH
33476: LD_INT 4
33478: PUSH
33479: LD_INT 43
33481: PUSH
33482: LD_INT 25
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: IN
33490: IFFALSE 33511
// points := [ 40 , 15 , 5 ] ;
33492: LD_ADDR_VAR 0 9
33496: PUSH
33497: LD_INT 40
33499: PUSH
33500: LD_INT 15
33502: PUSH
33503: LD_INT 5
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33511: LD_VAR 0 6
33515: PPUSH
33516: CALL_OW 264
33520: PUSH
33521: LD_INT 3
33523: PUSH
33524: LD_INT 23
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: IN
33531: IFFALSE 33552
// points := [ 7 , 25 , 8 ] ;
33533: LD_ADDR_VAR 0 9
33537: PUSH
33538: LD_INT 7
33540: PUSH
33541: LD_INT 25
33543: PUSH
33544: LD_INT 8
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33552: LD_VAR 0 6
33556: PPUSH
33557: CALL_OW 264
33561: PUSH
33562: LD_INT 5
33564: PUSH
33565: LD_INT 27
33567: PUSH
33568: LD_INT 44
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: IN
33576: IFFALSE 33597
// points := [ 14 , 50 , 16 ] ;
33578: LD_ADDR_VAR 0 9
33582: PUSH
33583: LD_INT 14
33585: PUSH
33586: LD_INT 50
33588: PUSH
33589: LD_INT 16
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33597: LD_VAR 0 6
33601: PPUSH
33602: CALL_OW 264
33606: PUSH
33607: LD_INT 6
33609: PUSH
33610: LD_INT 46
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: IN
33617: IFFALSE 33638
// points := [ 32 , 120 , 70 ] ;
33619: LD_ADDR_VAR 0 9
33623: PUSH
33624: LD_INT 32
33626: PUSH
33627: LD_INT 120
33629: PUSH
33630: LD_INT 70
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33638: LD_VAR 0 6
33642: PPUSH
33643: CALL_OW 264
33647: PUSH
33648: LD_INT 7
33650: PUSH
33651: LD_INT 28
33653: PUSH
33654: LD_INT 45
33656: PUSH
33657: LD_INT 92
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: IN
33666: IFFALSE 33687
// points := [ 35 , 20 , 45 ] ;
33668: LD_ADDR_VAR 0 9
33672: PUSH
33673: LD_INT 35
33675: PUSH
33676: LD_INT 20
33678: PUSH
33679: LD_INT 45
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33687: LD_VAR 0 6
33691: PPUSH
33692: CALL_OW 264
33696: PUSH
33697: LD_INT 47
33699: PUSH
33700: EMPTY
33701: LIST
33702: IN
33703: IFFALSE 33724
// points := [ 67 , 45 , 75 ] ;
33705: LD_ADDR_VAR 0 9
33709: PUSH
33710: LD_INT 67
33712: PUSH
33713: LD_INT 45
33715: PUSH
33716: LD_INT 75
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33724: LD_VAR 0 6
33728: PPUSH
33729: CALL_OW 264
33733: PUSH
33734: LD_INT 26
33736: PUSH
33737: EMPTY
33738: LIST
33739: IN
33740: IFFALSE 33761
// points := [ 120 , 30 , 80 ] ;
33742: LD_ADDR_VAR 0 9
33746: PUSH
33747: LD_INT 120
33749: PUSH
33750: LD_INT 30
33752: PUSH
33753: LD_INT 80
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: LIST
33760: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33761: LD_VAR 0 6
33765: PPUSH
33766: CALL_OW 264
33770: PUSH
33771: LD_INT 22
33773: PUSH
33774: EMPTY
33775: LIST
33776: IN
33777: IFFALSE 33798
// points := [ 40 , 1 , 1 ] ;
33779: LD_ADDR_VAR 0 9
33783: PUSH
33784: LD_INT 40
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: LIST
33797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33798: LD_VAR 0 6
33802: PPUSH
33803: CALL_OW 264
33807: PUSH
33808: LD_INT 29
33810: PUSH
33811: EMPTY
33812: LIST
33813: IN
33814: IFFALSE 33835
// points := [ 70 , 200 , 400 ] ;
33816: LD_ADDR_VAR 0 9
33820: PUSH
33821: LD_INT 70
33823: PUSH
33824: LD_INT 200
33826: PUSH
33827: LD_INT 400
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33835: LD_VAR 0 6
33839: PPUSH
33840: CALL_OW 264
33844: PUSH
33845: LD_INT 14
33847: PUSH
33848: LD_INT 53
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: IN
33855: IFFALSE 33876
// points := [ 40 , 10 , 20 ] ;
33857: LD_ADDR_VAR 0 9
33861: PUSH
33862: LD_INT 40
33864: PUSH
33865: LD_INT 10
33867: PUSH
33868: LD_INT 20
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33876: LD_VAR 0 6
33880: PPUSH
33881: CALL_OW 264
33885: PUSH
33886: LD_INT 9
33888: PUSH
33889: EMPTY
33890: LIST
33891: IN
33892: IFFALSE 33913
// points := [ 5 , 70 , 20 ] ;
33894: LD_ADDR_VAR 0 9
33898: PUSH
33899: LD_INT 5
33901: PUSH
33902: LD_INT 70
33904: PUSH
33905: LD_INT 20
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33913: LD_VAR 0 6
33917: PPUSH
33918: CALL_OW 264
33922: PUSH
33923: LD_INT 10
33925: PUSH
33926: EMPTY
33927: LIST
33928: IN
33929: IFFALSE 33950
// points := [ 35 , 110 , 70 ] ;
33931: LD_ADDR_VAR 0 9
33935: PUSH
33936: LD_INT 35
33938: PUSH
33939: LD_INT 110
33941: PUSH
33942: LD_INT 70
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33950: LD_VAR 0 6
33954: PPUSH
33955: CALL_OW 265
33959: PUSH
33960: LD_INT 25
33962: EQUAL
33963: IFFALSE 33984
// points := [ 80 , 65 , 100 ] ;
33965: LD_ADDR_VAR 0 9
33969: PUSH
33970: LD_INT 80
33972: PUSH
33973: LD_INT 65
33975: PUSH
33976: LD_INT 100
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33984: LD_VAR 0 6
33988: PPUSH
33989: CALL_OW 263
33993: PUSH
33994: LD_INT 1
33996: EQUAL
33997: IFFALSE 34032
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33999: LD_ADDR_VAR 0 10
34003: PUSH
34004: LD_VAR 0 10
34008: PUSH
34009: LD_VAR 0 6
34013: PPUSH
34014: CALL_OW 311
34018: PPUSH
34019: LD_INT 3
34021: PPUSH
34022: CALL_OW 259
34026: PUSH
34027: LD_INT 4
34029: MUL
34030: MUL
34031: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34032: LD_VAR 0 6
34036: PPUSH
34037: CALL_OW 263
34041: PUSH
34042: LD_INT 2
34044: EQUAL
34045: IFFALSE 34096
// begin j := IsControledBy ( i ) ;
34047: LD_ADDR_VAR 0 7
34051: PUSH
34052: LD_VAR 0 6
34056: PPUSH
34057: CALL_OW 312
34061: ST_TO_ADDR
// if j then
34062: LD_VAR 0 7
34066: IFFALSE 34096
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34068: LD_ADDR_VAR 0 10
34072: PUSH
34073: LD_VAR 0 10
34077: PUSH
34078: LD_VAR 0 7
34082: PPUSH
34083: LD_INT 3
34085: PPUSH
34086: CALL_OW 259
34090: PUSH
34091: LD_INT 3
34093: MUL
34094: MUL
34095: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34096: LD_VAR 0 6
34100: PPUSH
34101: CALL_OW 264
34105: PUSH
34106: LD_INT 5
34108: PUSH
34109: LD_INT 6
34111: PUSH
34112: LD_INT 46
34114: PUSH
34115: LD_INT 44
34117: PUSH
34118: LD_INT 47
34120: PUSH
34121: LD_INT 45
34123: PUSH
34124: LD_INT 28
34126: PUSH
34127: LD_INT 7
34129: PUSH
34130: LD_INT 27
34132: PUSH
34133: LD_INT 29
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: IN
34148: PUSH
34149: LD_VAR 0 1
34153: PPUSH
34154: LD_INT 52
34156: PPUSH
34157: CALL_OW 321
34161: PUSH
34162: LD_INT 2
34164: EQUAL
34165: AND
34166: IFFALSE 34183
// bpoints := bpoints * 1.2 ;
34168: LD_ADDR_VAR 0 10
34172: PUSH
34173: LD_VAR 0 10
34177: PUSH
34178: LD_REAL  1.20000000000000E+0000
34181: MUL
34182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34183: LD_VAR 0 6
34187: PPUSH
34188: CALL_OW 264
34192: PUSH
34193: LD_INT 6
34195: PUSH
34196: LD_INT 46
34198: PUSH
34199: LD_INT 47
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: LIST
34206: IN
34207: IFFALSE 34224
// bpoints := bpoints * 1.2 ;
34209: LD_ADDR_VAR 0 10
34213: PUSH
34214: LD_VAR 0 10
34218: PUSH
34219: LD_REAL  1.20000000000000E+0000
34222: MUL
34223: ST_TO_ADDR
// end ; unit_building :
34224: GO 34238
34226: LD_INT 3
34228: DOUBLE
34229: EQUAL
34230: IFTRUE 34234
34232: GO 34237
34234: POP
// ; end ;
34235: GO 34238
34237: POP
// for j = 1 to 3 do
34238: LD_ADDR_VAR 0 7
34242: PUSH
34243: DOUBLE
34244: LD_INT 1
34246: DEC
34247: ST_TO_ADDR
34248: LD_INT 3
34250: PUSH
34251: FOR_TO
34252: IFFALSE 34305
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34254: LD_ADDR_VAR 0 5
34258: PUSH
34259: LD_VAR 0 5
34263: PPUSH
34264: LD_VAR 0 7
34268: PPUSH
34269: LD_VAR 0 5
34273: PUSH
34274: LD_VAR 0 7
34278: ARRAY
34279: PUSH
34280: LD_VAR 0 9
34284: PUSH
34285: LD_VAR 0 7
34289: ARRAY
34290: PUSH
34291: LD_VAR 0 10
34295: MUL
34296: PLUS
34297: PPUSH
34298: CALL_OW 1
34302: ST_TO_ADDR
34303: GO 34251
34305: POP
34306: POP
// end ;
34307: GO 32786
34309: POP
34310: POP
// result := Replace ( result , 4 , tmp ) ;
34311: LD_ADDR_VAR 0 5
34315: PUSH
34316: LD_VAR 0 5
34320: PPUSH
34321: LD_INT 4
34323: PPUSH
34324: LD_VAR 0 8
34328: PPUSH
34329: CALL_OW 1
34333: ST_TO_ADDR
// end ;
34334: LD_VAR 0 5
34338: RET
// export function DangerAtRange ( unit , range ) ; begin
34339: LD_INT 0
34341: PPUSH
// if not unit then
34342: LD_VAR 0 1
34346: NOT
34347: IFFALSE 34351
// exit ;
34349: GO 34396
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34351: LD_ADDR_VAR 0 3
34355: PUSH
34356: LD_VAR 0 1
34360: PPUSH
34361: CALL_OW 255
34365: PPUSH
34366: LD_VAR 0 1
34370: PPUSH
34371: CALL_OW 250
34375: PPUSH
34376: LD_VAR 0 1
34380: PPUSH
34381: CALL_OW 251
34385: PPUSH
34386: LD_VAR 0 2
34390: PPUSH
34391: CALL 32638 0 4
34395: ST_TO_ADDR
// end ;
34396: LD_VAR 0 3
34400: RET
// export function DangerInArea ( side , area ) ; begin
34401: LD_INT 0
34403: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34404: LD_ADDR_VAR 0 3
34408: PUSH
34409: LD_VAR 0 2
34413: PPUSH
34414: LD_INT 81
34416: PUSH
34417: LD_VAR 0 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PPUSH
34426: CALL_OW 70
34430: ST_TO_ADDR
// end ;
34431: LD_VAR 0 3
34435: RET
// export function IsExtension ( b ) ; begin
34436: LD_INT 0
34438: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34439: LD_ADDR_VAR 0 2
34443: PUSH
34444: LD_VAR 0 1
34448: PUSH
34449: LD_INT 23
34451: PUSH
34452: LD_INT 20
34454: PUSH
34455: LD_INT 22
34457: PUSH
34458: LD_INT 17
34460: PUSH
34461: LD_INT 24
34463: PUSH
34464: LD_INT 21
34466: PUSH
34467: LD_INT 19
34469: PUSH
34470: LD_INT 16
34472: PUSH
34473: LD_INT 25
34475: PUSH
34476: LD_INT 18
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: IN
34491: ST_TO_ADDR
// end ;
34492: LD_VAR 0 2
34496: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34497: LD_INT 0
34499: PPUSH
34500: PPUSH
34501: PPUSH
// result := [ ] ;
34502: LD_ADDR_VAR 0 4
34506: PUSH
34507: EMPTY
34508: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34509: LD_ADDR_VAR 0 5
34513: PUSH
34514: LD_VAR 0 2
34518: PPUSH
34519: LD_INT 21
34521: PUSH
34522: LD_INT 3
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PPUSH
34529: CALL_OW 70
34533: ST_TO_ADDR
// if not tmp then
34534: LD_VAR 0 5
34538: NOT
34539: IFFALSE 34543
// exit ;
34541: GO 34607
// if checkLink then
34543: LD_VAR 0 3
34547: IFFALSE 34597
// begin for i in tmp do
34549: LD_ADDR_VAR 0 6
34553: PUSH
34554: LD_VAR 0 5
34558: PUSH
34559: FOR_IN
34560: IFFALSE 34595
// if GetBase ( i ) <> base then
34562: LD_VAR 0 6
34566: PPUSH
34567: CALL_OW 274
34571: PUSH
34572: LD_VAR 0 1
34576: NONEQUAL
34577: IFFALSE 34593
// ComLinkToBase ( base , i ) ;
34579: LD_VAR 0 1
34583: PPUSH
34584: LD_VAR 0 6
34588: PPUSH
34589: CALL_OW 169
34593: GO 34559
34595: POP
34596: POP
// end ; result := tmp ;
34597: LD_ADDR_VAR 0 4
34601: PUSH
34602: LD_VAR 0 5
34606: ST_TO_ADDR
// end ;
34607: LD_VAR 0 4
34611: RET
// export function ComComplete ( units , b ) ; var i ; begin
34612: LD_INT 0
34614: PPUSH
34615: PPUSH
// if not units then
34616: LD_VAR 0 1
34620: NOT
34621: IFFALSE 34625
// exit ;
34623: GO 34715
// for i in units do
34625: LD_ADDR_VAR 0 4
34629: PUSH
34630: LD_VAR 0 1
34634: PUSH
34635: FOR_IN
34636: IFFALSE 34713
// if BuildingStatus ( b ) = bs_build then
34638: LD_VAR 0 2
34642: PPUSH
34643: CALL_OW 461
34647: PUSH
34648: LD_INT 1
34650: EQUAL
34651: IFFALSE 34711
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34653: LD_VAR 0 4
34657: PPUSH
34658: LD_STRING h
34660: PUSH
34661: LD_VAR 0 2
34665: PPUSH
34666: CALL_OW 250
34670: PUSH
34671: LD_VAR 0 2
34675: PPUSH
34676: CALL_OW 251
34680: PUSH
34681: LD_VAR 0 2
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: PPUSH
34707: CALL_OW 446
34711: GO 34635
34713: POP
34714: POP
// end ;
34715: LD_VAR 0 3
34719: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34720: LD_INT 0
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34728: LD_VAR 0 1
34732: NOT
34733: PUSH
34734: LD_VAR 0 1
34738: PPUSH
34739: CALL_OW 263
34743: PUSH
34744: LD_INT 2
34746: NONEQUAL
34747: OR
34748: IFFALSE 34752
// exit ;
34750: GO 35068
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34752: LD_ADDR_VAR 0 6
34756: PUSH
34757: LD_INT 22
34759: PUSH
34760: LD_VAR 0 1
34764: PPUSH
34765: CALL_OW 255
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: LD_INT 30
34779: PUSH
34780: LD_INT 36
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 34
34789: PUSH
34790: LD_INT 31
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PPUSH
34806: CALL_OW 69
34810: ST_TO_ADDR
// if not tmp then
34811: LD_VAR 0 6
34815: NOT
34816: IFFALSE 34820
// exit ;
34818: GO 35068
// result := [ ] ;
34820: LD_ADDR_VAR 0 2
34824: PUSH
34825: EMPTY
34826: ST_TO_ADDR
// for i in tmp do
34827: LD_ADDR_VAR 0 3
34831: PUSH
34832: LD_VAR 0 6
34836: PUSH
34837: FOR_IN
34838: IFFALSE 34909
// begin t := UnitsInside ( i ) ;
34840: LD_ADDR_VAR 0 4
34844: PUSH
34845: LD_VAR 0 3
34849: PPUSH
34850: CALL_OW 313
34854: ST_TO_ADDR
// if t then
34855: LD_VAR 0 4
34859: IFFALSE 34907
// for j in t do
34861: LD_ADDR_VAR 0 7
34865: PUSH
34866: LD_VAR 0 4
34870: PUSH
34871: FOR_IN
34872: IFFALSE 34905
// result := Replace ( result , result + 1 , j ) ;
34874: LD_ADDR_VAR 0 2
34878: PUSH
34879: LD_VAR 0 2
34883: PPUSH
34884: LD_VAR 0 2
34888: PUSH
34889: LD_INT 1
34891: PLUS
34892: PPUSH
34893: LD_VAR 0 7
34897: PPUSH
34898: CALL_OW 1
34902: ST_TO_ADDR
34903: GO 34871
34905: POP
34906: POP
// end ;
34907: GO 34837
34909: POP
34910: POP
// if not result then
34911: LD_VAR 0 2
34915: NOT
34916: IFFALSE 34920
// exit ;
34918: GO 35068
// mech := result [ 1 ] ;
34920: LD_ADDR_VAR 0 5
34924: PUSH
34925: LD_VAR 0 2
34929: PUSH
34930: LD_INT 1
34932: ARRAY
34933: ST_TO_ADDR
// if result > 1 then
34934: LD_VAR 0 2
34938: PUSH
34939: LD_INT 1
34941: GREATER
34942: IFFALSE 35054
// begin for i = 2 to result do
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: DOUBLE
34950: LD_INT 2
34952: DEC
34953: ST_TO_ADDR
34954: LD_VAR 0 2
34958: PUSH
34959: FOR_TO
34960: IFFALSE 35052
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34962: LD_ADDR_VAR 0 4
34966: PUSH
34967: LD_VAR 0 2
34971: PUSH
34972: LD_VAR 0 3
34976: ARRAY
34977: PPUSH
34978: LD_INT 3
34980: PPUSH
34981: CALL_OW 259
34985: PUSH
34986: LD_VAR 0 2
34990: PUSH
34991: LD_VAR 0 3
34995: ARRAY
34996: PPUSH
34997: CALL_OW 432
35001: MINUS
35002: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35003: LD_VAR 0 4
35007: PUSH
35008: LD_VAR 0 5
35012: PPUSH
35013: LD_INT 3
35015: PPUSH
35016: CALL_OW 259
35020: PUSH
35021: LD_VAR 0 5
35025: PPUSH
35026: CALL_OW 432
35030: MINUS
35031: GREATEREQUAL
35032: IFFALSE 35050
// mech := result [ i ] ;
35034: LD_ADDR_VAR 0 5
35038: PUSH
35039: LD_VAR 0 2
35043: PUSH
35044: LD_VAR 0 3
35048: ARRAY
35049: ST_TO_ADDR
// end ;
35050: GO 34959
35052: POP
35053: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35054: LD_VAR 0 1
35058: PPUSH
35059: LD_VAR 0 5
35063: PPUSH
35064: CALL_OW 135
// end ;
35068: LD_VAR 0 2
35072: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35073: LD_INT 0
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
// result := [ ] ;
35088: LD_ADDR_VAR 0 7
35092: PUSH
35093: EMPTY
35094: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35095: LD_VAR 0 1
35099: PPUSH
35100: CALL_OW 266
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: IN
35115: NOT
35116: IFFALSE 35120
// exit ;
35118: GO 36754
// if name then
35120: LD_VAR 0 3
35124: IFFALSE 35140
// SetBName ( base_dep , name ) ;
35126: LD_VAR 0 1
35130: PPUSH
35131: LD_VAR 0 3
35135: PPUSH
35136: CALL_OW 500
// base := GetBase ( base_dep ) ;
35140: LD_ADDR_VAR 0 15
35144: PUSH
35145: LD_VAR 0 1
35149: PPUSH
35150: CALL_OW 274
35154: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35155: LD_ADDR_VAR 0 16
35159: PUSH
35160: LD_VAR 0 1
35164: PPUSH
35165: CALL_OW 255
35169: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35170: LD_ADDR_VAR 0 17
35174: PUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 248
35184: ST_TO_ADDR
// if sources then
35185: LD_VAR 0 5
35189: IFFALSE 35236
// for i = 1 to 3 do
35191: LD_ADDR_VAR 0 8
35195: PUSH
35196: DOUBLE
35197: LD_INT 1
35199: DEC
35200: ST_TO_ADDR
35201: LD_INT 3
35203: PUSH
35204: FOR_TO
35205: IFFALSE 35234
// AddResourceType ( base , i , sources [ i ] ) ;
35207: LD_VAR 0 15
35211: PPUSH
35212: LD_VAR 0 8
35216: PPUSH
35217: LD_VAR 0 5
35221: PUSH
35222: LD_VAR 0 8
35226: ARRAY
35227: PPUSH
35228: CALL_OW 276
35232: GO 35204
35234: POP
35235: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35236: LD_ADDR_VAR 0 18
35240: PUSH
35241: LD_VAR 0 15
35245: PPUSH
35246: LD_VAR 0 2
35250: PPUSH
35251: LD_INT 1
35253: PPUSH
35254: CALL 34497 0 3
35258: ST_TO_ADDR
// InitHc ;
35259: CALL_OW 19
// InitUc ;
35263: CALL_OW 18
// uc_side := side ;
35267: LD_ADDR_OWVAR 20
35271: PUSH
35272: LD_VAR 0 16
35276: ST_TO_ADDR
// uc_nation := nation ;
35277: LD_ADDR_OWVAR 21
35281: PUSH
35282: LD_VAR 0 17
35286: ST_TO_ADDR
// if buildings then
35287: LD_VAR 0 18
35291: IFFALSE 36613
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35293: LD_ADDR_VAR 0 19
35297: PUSH
35298: LD_VAR 0 18
35302: PPUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 30
35308: PUSH
35309: LD_INT 29
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 30
35318: PUSH
35319: LD_INT 30
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: PPUSH
35331: CALL_OW 72
35335: ST_TO_ADDR
// if tmp then
35336: LD_VAR 0 19
35340: IFFALSE 35388
// for i in tmp do
35342: LD_ADDR_VAR 0 8
35346: PUSH
35347: LD_VAR 0 19
35351: PUSH
35352: FOR_IN
35353: IFFALSE 35386
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35355: LD_VAR 0 8
35359: PPUSH
35360: CALL_OW 250
35364: PPUSH
35365: LD_VAR 0 8
35369: PPUSH
35370: CALL_OW 251
35374: PPUSH
35375: LD_VAR 0 16
35379: PPUSH
35380: CALL_OW 441
35384: GO 35352
35386: POP
35387: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35388: LD_VAR 0 18
35392: PPUSH
35393: LD_INT 2
35395: PUSH
35396: LD_INT 30
35398: PUSH
35399: LD_INT 32
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 30
35408: PUSH
35409: LD_INT 33
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: PPUSH
35421: CALL_OW 72
35425: IFFALSE 35513
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35427: LD_ADDR_VAR 0 8
35431: PUSH
35432: LD_VAR 0 18
35436: PPUSH
35437: LD_INT 2
35439: PUSH
35440: LD_INT 30
35442: PUSH
35443: LD_INT 32
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 30
35452: PUSH
35453: LD_INT 33
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: PPUSH
35465: CALL_OW 72
35469: PUSH
35470: FOR_IN
35471: IFFALSE 35511
// begin if not GetBWeapon ( i ) then
35473: LD_VAR 0 8
35477: PPUSH
35478: CALL_OW 269
35482: NOT
35483: IFFALSE 35509
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35485: LD_VAR 0 8
35489: PPUSH
35490: LD_VAR 0 8
35494: PPUSH
35495: LD_VAR 0 2
35499: PPUSH
35500: CALL 36759 0 2
35504: PPUSH
35505: CALL_OW 431
// end ;
35509: GO 35470
35511: POP
35512: POP
// end ; for i = 1 to personel do
35513: LD_ADDR_VAR 0 8
35517: PUSH
35518: DOUBLE
35519: LD_INT 1
35521: DEC
35522: ST_TO_ADDR
35523: LD_VAR 0 6
35527: PUSH
35528: FOR_TO
35529: IFFALSE 36593
// begin if i > 4 then
35531: LD_VAR 0 8
35535: PUSH
35536: LD_INT 4
35538: GREATER
35539: IFFALSE 35543
// break ;
35541: GO 36593
// case i of 1 :
35543: LD_VAR 0 8
35547: PUSH
35548: LD_INT 1
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35556
35554: GO 35636
35556: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35557: LD_ADDR_VAR 0 12
35561: PUSH
35562: LD_VAR 0 18
35566: PPUSH
35567: LD_INT 22
35569: PUSH
35570: LD_VAR 0 16
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 58
35581: PUSH
35582: EMPTY
35583: LIST
35584: PUSH
35585: LD_INT 2
35587: PUSH
35588: LD_INT 30
35590: PUSH
35591: LD_INT 32
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 30
35600: PUSH
35601: LD_INT 4
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 30
35610: PUSH
35611: LD_INT 5
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: PPUSH
35629: CALL_OW 72
35633: ST_TO_ADDR
35634: GO 35858
35636: LD_INT 2
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35644
35642: GO 35706
35644: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35645: LD_ADDR_VAR 0 12
35649: PUSH
35650: LD_VAR 0 18
35654: PPUSH
35655: LD_INT 22
35657: PUSH
35658: LD_VAR 0 16
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 30
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 30
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PPUSH
35699: CALL_OW 72
35703: ST_TO_ADDR
35704: GO 35858
35706: LD_INT 3
35708: DOUBLE
35709: EQUAL
35710: IFTRUE 35714
35712: GO 35776
35714: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35715: LD_ADDR_VAR 0 12
35719: PUSH
35720: LD_VAR 0 18
35724: PPUSH
35725: LD_INT 22
35727: PUSH
35728: LD_VAR 0 16
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 30
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 30
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PPUSH
35769: CALL_OW 72
35773: ST_TO_ADDR
35774: GO 35858
35776: LD_INT 4
35778: DOUBLE
35779: EQUAL
35780: IFTRUE 35784
35782: GO 35857
35784: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35785: LD_ADDR_VAR 0 12
35789: PUSH
35790: LD_VAR 0 18
35794: PPUSH
35795: LD_INT 22
35797: PUSH
35798: LD_VAR 0 16
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: PUSH
35810: LD_INT 30
35812: PUSH
35813: LD_INT 6
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 30
35822: PUSH
35823: LD_INT 7
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 30
35832: PUSH
35833: LD_INT 8
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PPUSH
35850: CALL_OW 72
35854: ST_TO_ADDR
35855: GO 35858
35857: POP
// if i = 1 then
35858: LD_VAR 0 8
35862: PUSH
35863: LD_INT 1
35865: EQUAL
35866: IFFALSE 35977
// begin tmp := [ ] ;
35868: LD_ADDR_VAR 0 19
35872: PUSH
35873: EMPTY
35874: ST_TO_ADDR
// for j in f do
35875: LD_ADDR_VAR 0 9
35879: PUSH
35880: LD_VAR 0 12
35884: PUSH
35885: FOR_IN
35886: IFFALSE 35959
// if GetBType ( j ) = b_bunker then
35888: LD_VAR 0 9
35892: PPUSH
35893: CALL_OW 266
35897: PUSH
35898: LD_INT 32
35900: EQUAL
35901: IFFALSE 35928
// tmp := Insert ( tmp , 1 , j ) else
35903: LD_ADDR_VAR 0 19
35907: PUSH
35908: LD_VAR 0 19
35912: PPUSH
35913: LD_INT 1
35915: PPUSH
35916: LD_VAR 0 9
35920: PPUSH
35921: CALL_OW 2
35925: ST_TO_ADDR
35926: GO 35957
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35928: LD_ADDR_VAR 0 19
35932: PUSH
35933: LD_VAR 0 19
35937: PPUSH
35938: LD_VAR 0 19
35942: PUSH
35943: LD_INT 1
35945: PLUS
35946: PPUSH
35947: LD_VAR 0 9
35951: PPUSH
35952: CALL_OW 2
35956: ST_TO_ADDR
35957: GO 35885
35959: POP
35960: POP
// if tmp then
35961: LD_VAR 0 19
35965: IFFALSE 35977
// f := tmp ;
35967: LD_ADDR_VAR 0 12
35971: PUSH
35972: LD_VAR 0 19
35976: ST_TO_ADDR
// end ; x := personel [ i ] ;
35977: LD_ADDR_VAR 0 13
35981: PUSH
35982: LD_VAR 0 6
35986: PUSH
35987: LD_VAR 0 8
35991: ARRAY
35992: ST_TO_ADDR
// if x = - 1 then
35993: LD_VAR 0 13
35997: PUSH
35998: LD_INT 1
36000: NEG
36001: EQUAL
36002: IFFALSE 36211
// begin for j in f do
36004: LD_ADDR_VAR 0 9
36008: PUSH
36009: LD_VAR 0 12
36013: PUSH
36014: FOR_IN
36015: IFFALSE 36207
// repeat InitHc ;
36017: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36021: LD_VAR 0 9
36025: PPUSH
36026: CALL_OW 266
36030: PUSH
36031: LD_INT 5
36033: EQUAL
36034: IFFALSE 36104
// begin if UnitsInside ( j ) < 3 then
36036: LD_VAR 0 9
36040: PPUSH
36041: CALL_OW 313
36045: PUSH
36046: LD_INT 3
36048: LESS
36049: IFFALSE 36085
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36051: LD_INT 0
36053: PPUSH
36054: LD_INT 5
36056: PUSH
36057: LD_INT 8
36059: PUSH
36060: LD_INT 9
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: PUSH
36068: LD_VAR 0 17
36072: ARRAY
36073: PPUSH
36074: LD_VAR 0 4
36078: PPUSH
36079: CALL_OW 380
36083: GO 36102
// PrepareHuman ( false , i , skill ) ;
36085: LD_INT 0
36087: PPUSH
36088: LD_VAR 0 8
36092: PPUSH
36093: LD_VAR 0 4
36097: PPUSH
36098: CALL_OW 380
// end else
36102: GO 36121
// PrepareHuman ( false , i , skill ) ;
36104: LD_INT 0
36106: PPUSH
36107: LD_VAR 0 8
36111: PPUSH
36112: LD_VAR 0 4
36116: PPUSH
36117: CALL_OW 380
// un := CreateHuman ;
36121: LD_ADDR_VAR 0 14
36125: PUSH
36126: CALL_OW 44
36130: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36131: LD_ADDR_VAR 0 7
36135: PUSH
36136: LD_VAR 0 7
36140: PPUSH
36141: LD_INT 1
36143: PPUSH
36144: LD_VAR 0 14
36148: PPUSH
36149: CALL_OW 2
36153: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36154: LD_VAR 0 14
36158: PPUSH
36159: LD_VAR 0 9
36163: PPUSH
36164: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36168: LD_VAR 0 9
36172: PPUSH
36173: CALL_OW 313
36177: PUSH
36178: LD_INT 6
36180: EQUAL
36181: PUSH
36182: LD_VAR 0 9
36186: PPUSH
36187: CALL_OW 266
36191: PUSH
36192: LD_INT 32
36194: PUSH
36195: LD_INT 31
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: IN
36202: OR
36203: IFFALSE 36017
36205: GO 36014
36207: POP
36208: POP
// end else
36209: GO 36591
// for j = 1 to x do
36211: LD_ADDR_VAR 0 9
36215: PUSH
36216: DOUBLE
36217: LD_INT 1
36219: DEC
36220: ST_TO_ADDR
36221: LD_VAR 0 13
36225: PUSH
36226: FOR_TO
36227: IFFALSE 36589
// begin InitHc ;
36229: CALL_OW 19
// if not f then
36233: LD_VAR 0 12
36237: NOT
36238: IFFALSE 36327
// begin PrepareHuman ( false , i , skill ) ;
36240: LD_INT 0
36242: PPUSH
36243: LD_VAR 0 8
36247: PPUSH
36248: LD_VAR 0 4
36252: PPUSH
36253: CALL_OW 380
// un := CreateHuman ;
36257: LD_ADDR_VAR 0 14
36261: PUSH
36262: CALL_OW 44
36266: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36267: LD_ADDR_VAR 0 7
36271: PUSH
36272: LD_VAR 0 7
36276: PPUSH
36277: LD_INT 1
36279: PPUSH
36280: LD_VAR 0 14
36284: PPUSH
36285: CALL_OW 2
36289: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36290: LD_VAR 0 14
36294: PPUSH
36295: LD_VAR 0 1
36299: PPUSH
36300: CALL_OW 250
36304: PPUSH
36305: LD_VAR 0 1
36309: PPUSH
36310: CALL_OW 251
36314: PPUSH
36315: LD_INT 10
36317: PPUSH
36318: LD_INT 0
36320: PPUSH
36321: CALL_OW 50
// continue ;
36325: GO 36226
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36327: LD_VAR 0 12
36331: PUSH
36332: LD_INT 1
36334: ARRAY
36335: PPUSH
36336: CALL_OW 313
36340: PUSH
36341: LD_VAR 0 12
36345: PUSH
36346: LD_INT 1
36348: ARRAY
36349: PPUSH
36350: CALL_OW 266
36354: PUSH
36355: LD_INT 32
36357: PUSH
36358: LD_INT 31
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: IN
36365: AND
36366: PUSH
36367: LD_VAR 0 12
36371: PUSH
36372: LD_INT 1
36374: ARRAY
36375: PPUSH
36376: CALL_OW 313
36380: PUSH
36381: LD_INT 6
36383: EQUAL
36384: OR
36385: IFFALSE 36405
// f := Delete ( f , 1 ) ;
36387: LD_ADDR_VAR 0 12
36391: PUSH
36392: LD_VAR 0 12
36396: PPUSH
36397: LD_INT 1
36399: PPUSH
36400: CALL_OW 3
36404: ST_TO_ADDR
// if not f then
36405: LD_VAR 0 12
36409: NOT
36410: IFFALSE 36428
// begin x := x + 2 ;
36412: LD_ADDR_VAR 0 13
36416: PUSH
36417: LD_VAR 0 13
36421: PUSH
36422: LD_INT 2
36424: PLUS
36425: ST_TO_ADDR
// continue ;
36426: GO 36226
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36428: LD_VAR 0 12
36432: PUSH
36433: LD_INT 1
36435: ARRAY
36436: PPUSH
36437: CALL_OW 266
36441: PUSH
36442: LD_INT 5
36444: EQUAL
36445: IFFALSE 36519
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36447: LD_VAR 0 12
36451: PUSH
36452: LD_INT 1
36454: ARRAY
36455: PPUSH
36456: CALL_OW 313
36460: PUSH
36461: LD_INT 3
36463: LESS
36464: IFFALSE 36500
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36466: LD_INT 0
36468: PPUSH
36469: LD_INT 5
36471: PUSH
36472: LD_INT 8
36474: PUSH
36475: LD_INT 9
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: LIST
36482: PUSH
36483: LD_VAR 0 17
36487: ARRAY
36488: PPUSH
36489: LD_VAR 0 4
36493: PPUSH
36494: CALL_OW 380
36498: GO 36517
// PrepareHuman ( false , i , skill ) ;
36500: LD_INT 0
36502: PPUSH
36503: LD_VAR 0 8
36507: PPUSH
36508: LD_VAR 0 4
36512: PPUSH
36513: CALL_OW 380
// end else
36517: GO 36536
// PrepareHuman ( false , i , skill ) ;
36519: LD_INT 0
36521: PPUSH
36522: LD_VAR 0 8
36526: PPUSH
36527: LD_VAR 0 4
36531: PPUSH
36532: CALL_OW 380
// un := CreateHuman ;
36536: LD_ADDR_VAR 0 14
36540: PUSH
36541: CALL_OW 44
36545: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36546: LD_ADDR_VAR 0 7
36550: PUSH
36551: LD_VAR 0 7
36555: PPUSH
36556: LD_INT 1
36558: PPUSH
36559: LD_VAR 0 14
36563: PPUSH
36564: CALL_OW 2
36568: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36569: LD_VAR 0 14
36573: PPUSH
36574: LD_VAR 0 12
36578: PUSH
36579: LD_INT 1
36581: ARRAY
36582: PPUSH
36583: CALL_OW 52
// end ;
36587: GO 36226
36589: POP
36590: POP
// end ;
36591: GO 35528
36593: POP
36594: POP
// result := result ^ buildings ;
36595: LD_ADDR_VAR 0 7
36599: PUSH
36600: LD_VAR 0 7
36604: PUSH
36605: LD_VAR 0 18
36609: ADD
36610: ST_TO_ADDR
// end else
36611: GO 36754
// begin for i = 1 to personel do
36613: LD_ADDR_VAR 0 8
36617: PUSH
36618: DOUBLE
36619: LD_INT 1
36621: DEC
36622: ST_TO_ADDR
36623: LD_VAR 0 6
36627: PUSH
36628: FOR_TO
36629: IFFALSE 36752
// begin if i > 4 then
36631: LD_VAR 0 8
36635: PUSH
36636: LD_INT 4
36638: GREATER
36639: IFFALSE 36643
// break ;
36641: GO 36752
// x := personel [ i ] ;
36643: LD_ADDR_VAR 0 13
36647: PUSH
36648: LD_VAR 0 6
36652: PUSH
36653: LD_VAR 0 8
36657: ARRAY
36658: ST_TO_ADDR
// if x = - 1 then
36659: LD_VAR 0 13
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: EQUAL
36668: IFFALSE 36672
// continue ;
36670: GO 36628
// PrepareHuman ( false , i , skill ) ;
36672: LD_INT 0
36674: PPUSH
36675: LD_VAR 0 8
36679: PPUSH
36680: LD_VAR 0 4
36684: PPUSH
36685: CALL_OW 380
// un := CreateHuman ;
36689: LD_ADDR_VAR 0 14
36693: PUSH
36694: CALL_OW 44
36698: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36699: LD_VAR 0 14
36703: PPUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 250
36713: PPUSH
36714: LD_VAR 0 1
36718: PPUSH
36719: CALL_OW 251
36723: PPUSH
36724: LD_INT 10
36726: PPUSH
36727: LD_INT 0
36729: PPUSH
36730: CALL_OW 50
// result := result ^ un ;
36734: LD_ADDR_VAR 0 7
36738: PUSH
36739: LD_VAR 0 7
36743: PUSH
36744: LD_VAR 0 14
36748: ADD
36749: ST_TO_ADDR
// end ;
36750: GO 36628
36752: POP
36753: POP
// end ; end ;
36754: LD_VAR 0 7
36758: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36759: LD_INT 0
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
36769: PPUSH
36770: PPUSH
36771: PPUSH
36772: PPUSH
36773: PPUSH
36774: PPUSH
36775: PPUSH
36776: PPUSH
// result := false ;
36777: LD_ADDR_VAR 0 3
36781: PUSH
36782: LD_INT 0
36784: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36785: LD_VAR 0 1
36789: NOT
36790: PUSH
36791: LD_VAR 0 1
36795: PPUSH
36796: CALL_OW 266
36800: PUSH
36801: LD_INT 32
36803: PUSH
36804: LD_INT 33
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: IN
36811: NOT
36812: OR
36813: IFFALSE 36817
// exit ;
36815: GO 37926
// nat := GetNation ( tower ) ;
36817: LD_ADDR_VAR 0 12
36821: PUSH
36822: LD_VAR 0 1
36826: PPUSH
36827: CALL_OW 248
36831: ST_TO_ADDR
// side := GetSide ( tower ) ;
36832: LD_ADDR_VAR 0 16
36836: PUSH
36837: LD_VAR 0 1
36841: PPUSH
36842: CALL_OW 255
36846: ST_TO_ADDR
// x := GetX ( tower ) ;
36847: LD_ADDR_VAR 0 10
36851: PUSH
36852: LD_VAR 0 1
36856: PPUSH
36857: CALL_OW 250
36861: ST_TO_ADDR
// y := GetY ( tower ) ;
36862: LD_ADDR_VAR 0 11
36866: PUSH
36867: LD_VAR 0 1
36871: PPUSH
36872: CALL_OW 251
36876: ST_TO_ADDR
// if not x or not y then
36877: LD_VAR 0 10
36881: NOT
36882: PUSH
36883: LD_VAR 0 11
36887: NOT
36888: OR
36889: IFFALSE 36893
// exit ;
36891: GO 37926
// weapon := 0 ;
36893: LD_ADDR_VAR 0 18
36897: PUSH
36898: LD_INT 0
36900: ST_TO_ADDR
// fac_list := [ ] ;
36901: LD_ADDR_VAR 0 17
36905: PUSH
36906: EMPTY
36907: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36908: LD_ADDR_VAR 0 6
36912: PUSH
36913: LD_VAR 0 1
36917: PPUSH
36918: CALL_OW 274
36922: PPUSH
36923: LD_VAR 0 2
36927: PPUSH
36928: LD_INT 0
36930: PPUSH
36931: CALL 34497 0 3
36935: PPUSH
36936: LD_INT 30
36938: PUSH
36939: LD_INT 3
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PPUSH
36946: CALL_OW 72
36950: ST_TO_ADDR
// if not factories then
36951: LD_VAR 0 6
36955: NOT
36956: IFFALSE 36960
// exit ;
36958: GO 37926
// for i in factories do
36960: LD_ADDR_VAR 0 8
36964: PUSH
36965: LD_VAR 0 6
36969: PUSH
36970: FOR_IN
36971: IFFALSE 36996
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36973: LD_ADDR_VAR 0 17
36977: PUSH
36978: LD_VAR 0 17
36982: PUSH
36983: LD_VAR 0 8
36987: PPUSH
36988: CALL_OW 478
36992: UNION
36993: ST_TO_ADDR
36994: GO 36970
36996: POP
36997: POP
// if not fac_list then
36998: LD_VAR 0 17
37002: NOT
37003: IFFALSE 37007
// exit ;
37005: GO 37926
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37007: LD_ADDR_VAR 0 5
37011: PUSH
37012: LD_INT 4
37014: PUSH
37015: LD_INT 5
37017: PUSH
37018: LD_INT 9
37020: PUSH
37021: LD_INT 10
37023: PUSH
37024: LD_INT 6
37026: PUSH
37027: LD_INT 7
37029: PUSH
37030: LD_INT 11
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 27
37044: PUSH
37045: LD_INT 28
37047: PUSH
37048: LD_INT 26
37050: PUSH
37051: LD_INT 30
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 43
37062: PUSH
37063: LD_INT 44
37065: PUSH
37066: LD_INT 46
37068: PUSH
37069: LD_INT 45
37071: PUSH
37072: LD_INT 47
37074: PUSH
37075: LD_INT 49
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: PUSH
37091: LD_VAR 0 12
37095: ARRAY
37096: ST_TO_ADDR
// list := list isect fac_list ;
37097: LD_ADDR_VAR 0 5
37101: PUSH
37102: LD_VAR 0 5
37106: PUSH
37107: LD_VAR 0 17
37111: ISECT
37112: ST_TO_ADDR
// if not list then
37113: LD_VAR 0 5
37117: NOT
37118: IFFALSE 37122
// exit ;
37120: GO 37926
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37122: LD_VAR 0 12
37126: PUSH
37127: LD_INT 3
37129: EQUAL
37130: PUSH
37131: LD_INT 49
37133: PUSH
37134: LD_VAR 0 5
37138: IN
37139: AND
37140: PUSH
37141: LD_INT 31
37143: PPUSH
37144: LD_VAR 0 16
37148: PPUSH
37149: CALL_OW 321
37153: PUSH
37154: LD_INT 2
37156: EQUAL
37157: AND
37158: IFFALSE 37218
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37160: LD_INT 22
37162: PUSH
37163: LD_VAR 0 16
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 35
37174: PUSH
37175: LD_INT 49
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 91
37184: PUSH
37185: LD_VAR 0 1
37189: PUSH
37190: LD_INT 10
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: PPUSH
37203: CALL_OW 69
37207: NOT
37208: IFFALSE 37218
// weapon := ru_time_lapser ;
37210: LD_ADDR_VAR 0 18
37214: PUSH
37215: LD_INT 49
37217: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37218: LD_VAR 0 12
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: IN
37233: PUSH
37234: LD_INT 11
37236: PUSH
37237: LD_VAR 0 5
37241: IN
37242: PUSH
37243: LD_INT 30
37245: PUSH
37246: LD_VAR 0 5
37250: IN
37251: OR
37252: AND
37253: PUSH
37254: LD_INT 6
37256: PPUSH
37257: LD_VAR 0 16
37261: PPUSH
37262: CALL_OW 321
37266: PUSH
37267: LD_INT 2
37269: EQUAL
37270: AND
37271: IFFALSE 37436
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37273: LD_INT 22
37275: PUSH
37276: LD_VAR 0 16
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 35
37290: PUSH
37291: LD_INT 11
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 35
37300: PUSH
37301: LD_INT 30
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 91
37315: PUSH
37316: LD_VAR 0 1
37320: PUSH
37321: LD_INT 18
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 69
37338: NOT
37339: PUSH
37340: LD_INT 22
37342: PUSH
37343: LD_VAR 0 16
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 30
37357: PUSH
37358: LD_INT 32
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 30
37367: PUSH
37368: LD_INT 33
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 91
37382: PUSH
37383: LD_VAR 0 1
37387: PUSH
37388: LD_INT 12
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: PUSH
37401: EMPTY
37402: LIST
37403: PPUSH
37404: CALL_OW 69
37408: PUSH
37409: LD_INT 2
37411: GREATER
37412: AND
37413: IFFALSE 37436
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37415: LD_ADDR_VAR 0 18
37419: PUSH
37420: LD_INT 11
37422: PUSH
37423: LD_INT 30
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_VAR 0 12
37434: ARRAY
37435: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37436: LD_VAR 0 18
37440: NOT
37441: PUSH
37442: LD_INT 40
37444: PPUSH
37445: LD_VAR 0 16
37449: PPUSH
37450: CALL_OW 321
37454: PUSH
37455: LD_INT 2
37457: EQUAL
37458: AND
37459: PUSH
37460: LD_INT 7
37462: PUSH
37463: LD_VAR 0 5
37467: IN
37468: PUSH
37469: LD_INT 28
37471: PUSH
37472: LD_VAR 0 5
37476: IN
37477: OR
37478: PUSH
37479: LD_INT 45
37481: PUSH
37482: LD_VAR 0 5
37486: IN
37487: OR
37488: AND
37489: IFFALSE 37743
// begin hex := GetHexInfo ( x , y ) ;
37491: LD_ADDR_VAR 0 4
37495: PUSH
37496: LD_VAR 0 10
37500: PPUSH
37501: LD_VAR 0 11
37505: PPUSH
37506: CALL_OW 546
37510: ST_TO_ADDR
// if hex [ 1 ] then
37511: LD_VAR 0 4
37515: PUSH
37516: LD_INT 1
37518: ARRAY
37519: IFFALSE 37523
// exit ;
37521: GO 37926
// height := hex [ 2 ] ;
37523: LD_ADDR_VAR 0 15
37527: PUSH
37528: LD_VAR 0 4
37532: PUSH
37533: LD_INT 2
37535: ARRAY
37536: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37537: LD_ADDR_VAR 0 14
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: LD_INT 5
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: ST_TO_ADDR
// for i in tmp do
37560: LD_ADDR_VAR 0 8
37564: PUSH
37565: LD_VAR 0 14
37569: PUSH
37570: FOR_IN
37571: IFFALSE 37741
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37573: LD_ADDR_VAR 0 9
37577: PUSH
37578: LD_VAR 0 10
37582: PPUSH
37583: LD_VAR 0 8
37587: PPUSH
37588: LD_INT 5
37590: PPUSH
37591: CALL_OW 272
37595: PUSH
37596: LD_VAR 0 11
37600: PPUSH
37601: LD_VAR 0 8
37605: PPUSH
37606: LD_INT 5
37608: PPUSH
37609: CALL_OW 273
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37618: LD_VAR 0 9
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: PPUSH
37627: LD_VAR 0 9
37631: PUSH
37632: LD_INT 2
37634: ARRAY
37635: PPUSH
37636: CALL_OW 488
37640: IFFALSE 37739
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37642: LD_ADDR_VAR 0 4
37646: PUSH
37647: LD_VAR 0 9
37651: PUSH
37652: LD_INT 1
37654: ARRAY
37655: PPUSH
37656: LD_VAR 0 9
37660: PUSH
37661: LD_INT 2
37663: ARRAY
37664: PPUSH
37665: CALL_OW 546
37669: ST_TO_ADDR
// if hex [ 1 ] then
37670: LD_VAR 0 4
37674: PUSH
37675: LD_INT 1
37677: ARRAY
37678: IFFALSE 37682
// continue ;
37680: GO 37570
// h := hex [ 2 ] ;
37682: LD_ADDR_VAR 0 13
37686: PUSH
37687: LD_VAR 0 4
37691: PUSH
37692: LD_INT 2
37694: ARRAY
37695: ST_TO_ADDR
// if h + 7 < height then
37696: LD_VAR 0 13
37700: PUSH
37701: LD_INT 7
37703: PLUS
37704: PUSH
37705: LD_VAR 0 15
37709: LESS
37710: IFFALSE 37739
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37712: LD_ADDR_VAR 0 18
37716: PUSH
37717: LD_INT 7
37719: PUSH
37720: LD_INT 28
37722: PUSH
37723: LD_INT 45
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: PUSH
37731: LD_VAR 0 12
37735: ARRAY
37736: ST_TO_ADDR
// break ;
37737: GO 37741
// end ; end ; end ;
37739: GO 37570
37741: POP
37742: POP
// end ; if not weapon then
37743: LD_VAR 0 18
37747: NOT
37748: IFFALSE 37808
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37750: LD_ADDR_VAR 0 5
37754: PUSH
37755: LD_VAR 0 5
37759: PUSH
37760: LD_INT 11
37762: PUSH
37763: LD_INT 30
37765: PUSH
37766: LD_INT 49
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: DIFF
37774: ST_TO_ADDR
// if not list then
37775: LD_VAR 0 5
37779: NOT
37780: IFFALSE 37784
// exit ;
37782: GO 37926
// weapon := list [ rand ( 1 , list ) ] ;
37784: LD_ADDR_VAR 0 18
37788: PUSH
37789: LD_VAR 0 5
37793: PUSH
37794: LD_INT 1
37796: PPUSH
37797: LD_VAR 0 5
37801: PPUSH
37802: CALL_OW 12
37806: ARRAY
37807: ST_TO_ADDR
// end ; if weapon then
37808: LD_VAR 0 18
37812: IFFALSE 37926
// begin tmp := CostOfWeapon ( weapon ) ;
37814: LD_ADDR_VAR 0 14
37818: PUSH
37819: LD_VAR 0 18
37823: PPUSH
37824: CALL_OW 451
37828: ST_TO_ADDR
// j := GetBase ( tower ) ;
37829: LD_ADDR_VAR 0 9
37833: PUSH
37834: LD_VAR 0 1
37838: PPUSH
37839: CALL_OW 274
37843: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37844: LD_VAR 0 9
37848: PPUSH
37849: LD_INT 1
37851: PPUSH
37852: CALL_OW 275
37856: PUSH
37857: LD_VAR 0 14
37861: PUSH
37862: LD_INT 1
37864: ARRAY
37865: GREATEREQUAL
37866: PUSH
37867: LD_VAR 0 9
37871: PPUSH
37872: LD_INT 2
37874: PPUSH
37875: CALL_OW 275
37879: PUSH
37880: LD_VAR 0 14
37884: PUSH
37885: LD_INT 2
37887: ARRAY
37888: GREATEREQUAL
37889: AND
37890: PUSH
37891: LD_VAR 0 9
37895: PPUSH
37896: LD_INT 3
37898: PPUSH
37899: CALL_OW 275
37903: PUSH
37904: LD_VAR 0 14
37908: PUSH
37909: LD_INT 3
37911: ARRAY
37912: GREATEREQUAL
37913: AND
37914: IFFALSE 37926
// result := weapon ;
37916: LD_ADDR_VAR 0 3
37920: PUSH
37921: LD_VAR 0 18
37925: ST_TO_ADDR
// end ; end ;
37926: LD_VAR 0 3
37930: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37931: LD_INT 0
37933: PPUSH
37934: PPUSH
// result := true ;
37935: LD_ADDR_VAR 0 3
37939: PUSH
37940: LD_INT 1
37942: ST_TO_ADDR
// if array1 = array2 then
37943: LD_VAR 0 1
37947: PUSH
37948: LD_VAR 0 2
37952: EQUAL
37953: IFFALSE 38013
// begin for i = 1 to array1 do
37955: LD_ADDR_VAR 0 4
37959: PUSH
37960: DOUBLE
37961: LD_INT 1
37963: DEC
37964: ST_TO_ADDR
37965: LD_VAR 0 1
37969: PUSH
37970: FOR_TO
37971: IFFALSE 38009
// if array1 [ i ] <> array2 [ i ] then
37973: LD_VAR 0 1
37977: PUSH
37978: LD_VAR 0 4
37982: ARRAY
37983: PUSH
37984: LD_VAR 0 2
37988: PUSH
37989: LD_VAR 0 4
37993: ARRAY
37994: NONEQUAL
37995: IFFALSE 38007
// begin result := false ;
37997: LD_ADDR_VAR 0 3
38001: PUSH
38002: LD_INT 0
38004: ST_TO_ADDR
// break ;
38005: GO 38009
// end ;
38007: GO 37970
38009: POP
38010: POP
// end else
38011: GO 38021
// result := false ;
38013: LD_ADDR_VAR 0 3
38017: PUSH
38018: LD_INT 0
38020: ST_TO_ADDR
// end ;
38021: LD_VAR 0 3
38025: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38026: LD_INT 0
38028: PPUSH
38029: PPUSH
// if not array1 or not array2 then
38030: LD_VAR 0 1
38034: NOT
38035: PUSH
38036: LD_VAR 0 2
38040: NOT
38041: OR
38042: IFFALSE 38046
// exit ;
38044: GO 38110
// result := true ;
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_INT 1
38053: ST_TO_ADDR
// for i = 1 to array1 do
38054: LD_ADDR_VAR 0 4
38058: PUSH
38059: DOUBLE
38060: LD_INT 1
38062: DEC
38063: ST_TO_ADDR
38064: LD_VAR 0 1
38068: PUSH
38069: FOR_TO
38070: IFFALSE 38108
// if array1 [ i ] <> array2 [ i ] then
38072: LD_VAR 0 1
38076: PUSH
38077: LD_VAR 0 4
38081: ARRAY
38082: PUSH
38083: LD_VAR 0 2
38087: PUSH
38088: LD_VAR 0 4
38092: ARRAY
38093: NONEQUAL
38094: IFFALSE 38106
// begin result := false ;
38096: LD_ADDR_VAR 0 3
38100: PUSH
38101: LD_INT 0
38103: ST_TO_ADDR
// break ;
38104: GO 38108
// end ;
38106: GO 38069
38108: POP
38109: POP
// end ;
38110: LD_VAR 0 3
38114: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38115: LD_INT 0
38117: PPUSH
38118: PPUSH
38119: PPUSH
// pom := GetBase ( fac ) ;
38120: LD_ADDR_VAR 0 5
38124: PUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: CALL_OW 274
38134: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38135: LD_ADDR_VAR 0 4
38139: PUSH
38140: LD_VAR 0 2
38144: PUSH
38145: LD_INT 1
38147: ARRAY
38148: PPUSH
38149: LD_VAR 0 2
38153: PUSH
38154: LD_INT 2
38156: ARRAY
38157: PPUSH
38158: LD_VAR 0 2
38162: PUSH
38163: LD_INT 3
38165: ARRAY
38166: PPUSH
38167: LD_VAR 0 2
38171: PUSH
38172: LD_INT 4
38174: ARRAY
38175: PPUSH
38176: CALL_OW 449
38180: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38181: LD_ADDR_VAR 0 3
38185: PUSH
38186: LD_VAR 0 5
38190: PPUSH
38191: LD_INT 1
38193: PPUSH
38194: CALL_OW 275
38198: PUSH
38199: LD_VAR 0 4
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: GREATEREQUAL
38208: PUSH
38209: LD_VAR 0 5
38213: PPUSH
38214: LD_INT 2
38216: PPUSH
38217: CALL_OW 275
38221: PUSH
38222: LD_VAR 0 4
38226: PUSH
38227: LD_INT 2
38229: ARRAY
38230: GREATEREQUAL
38231: AND
38232: PUSH
38233: LD_VAR 0 5
38237: PPUSH
38238: LD_INT 3
38240: PPUSH
38241: CALL_OW 275
38245: PUSH
38246: LD_VAR 0 4
38250: PUSH
38251: LD_INT 3
38253: ARRAY
38254: GREATEREQUAL
38255: AND
38256: ST_TO_ADDR
// end ;
38257: LD_VAR 0 3
38261: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38262: LD_INT 0
38264: PPUSH
38265: PPUSH
38266: PPUSH
38267: PPUSH
// pom := GetBase ( building ) ;
38268: LD_ADDR_VAR 0 3
38272: PUSH
38273: LD_VAR 0 1
38277: PPUSH
38278: CALL_OW 274
38282: ST_TO_ADDR
// if not pom then
38283: LD_VAR 0 3
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 38462
// btype := GetBType ( building ) ;
38292: LD_ADDR_VAR 0 5
38296: PUSH
38297: LD_VAR 0 1
38301: PPUSH
38302: CALL_OW 266
38306: ST_TO_ADDR
// if btype = b_armoury then
38307: LD_VAR 0 5
38311: PUSH
38312: LD_INT 4
38314: EQUAL
38315: IFFALSE 38325
// btype := b_barracks ;
38317: LD_ADDR_VAR 0 5
38321: PUSH
38322: LD_INT 5
38324: ST_TO_ADDR
// if btype = b_depot then
38325: LD_VAR 0 5
38329: PUSH
38330: LD_INT 0
38332: EQUAL
38333: IFFALSE 38343
// btype := b_warehouse ;
38335: LD_ADDR_VAR 0 5
38339: PUSH
38340: LD_INT 1
38342: ST_TO_ADDR
// if btype = b_workshop then
38343: LD_VAR 0 5
38347: PUSH
38348: LD_INT 2
38350: EQUAL
38351: IFFALSE 38361
// btype := b_factory ;
38353: LD_ADDR_VAR 0 5
38357: PUSH
38358: LD_INT 3
38360: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38361: LD_ADDR_VAR 0 4
38365: PUSH
38366: LD_VAR 0 5
38370: PPUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: CALL_OW 248
38380: PPUSH
38381: CALL_OW 450
38385: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38386: LD_ADDR_VAR 0 2
38390: PUSH
38391: LD_VAR 0 3
38395: PPUSH
38396: LD_INT 1
38398: PPUSH
38399: CALL_OW 275
38403: PUSH
38404: LD_VAR 0 4
38408: PUSH
38409: LD_INT 1
38411: ARRAY
38412: GREATEREQUAL
38413: PUSH
38414: LD_VAR 0 3
38418: PPUSH
38419: LD_INT 2
38421: PPUSH
38422: CALL_OW 275
38426: PUSH
38427: LD_VAR 0 4
38431: PUSH
38432: LD_INT 2
38434: ARRAY
38435: GREATEREQUAL
38436: AND
38437: PUSH
38438: LD_VAR 0 3
38442: PPUSH
38443: LD_INT 3
38445: PPUSH
38446: CALL_OW 275
38450: PUSH
38451: LD_VAR 0 4
38455: PUSH
38456: LD_INT 3
38458: ARRAY
38459: GREATEREQUAL
38460: AND
38461: ST_TO_ADDR
// end ;
38462: LD_VAR 0 2
38466: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38467: LD_INT 0
38469: PPUSH
38470: PPUSH
38471: PPUSH
// pom := GetBase ( building ) ;
38472: LD_ADDR_VAR 0 4
38476: PUSH
38477: LD_VAR 0 1
38481: PPUSH
38482: CALL_OW 274
38486: ST_TO_ADDR
// if not pom then
38487: LD_VAR 0 4
38491: NOT
38492: IFFALSE 38496
// exit ;
38494: GO 38597
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38496: LD_ADDR_VAR 0 5
38500: PUSH
38501: LD_VAR 0 2
38505: PPUSH
38506: LD_VAR 0 1
38510: PPUSH
38511: CALL_OW 248
38515: PPUSH
38516: CALL_OW 450
38520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38521: LD_ADDR_VAR 0 3
38525: PUSH
38526: LD_VAR 0 4
38530: PPUSH
38531: LD_INT 1
38533: PPUSH
38534: CALL_OW 275
38538: PUSH
38539: LD_VAR 0 5
38543: PUSH
38544: LD_INT 1
38546: ARRAY
38547: GREATEREQUAL
38548: PUSH
38549: LD_VAR 0 4
38553: PPUSH
38554: LD_INT 2
38556: PPUSH
38557: CALL_OW 275
38561: PUSH
38562: LD_VAR 0 5
38566: PUSH
38567: LD_INT 2
38569: ARRAY
38570: GREATEREQUAL
38571: AND
38572: PUSH
38573: LD_VAR 0 4
38577: PPUSH
38578: LD_INT 3
38580: PPUSH
38581: CALL_OW 275
38585: PUSH
38586: LD_VAR 0 5
38590: PUSH
38591: LD_INT 3
38593: ARRAY
38594: GREATEREQUAL
38595: AND
38596: ST_TO_ADDR
// end ;
38597: LD_VAR 0 3
38601: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38602: LD_INT 0
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
// result := false ;
38615: LD_ADDR_VAR 0 8
38619: PUSH
38620: LD_INT 0
38622: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38623: LD_VAR 0 5
38627: NOT
38628: PUSH
38629: LD_VAR 0 1
38633: NOT
38634: OR
38635: PUSH
38636: LD_VAR 0 2
38640: NOT
38641: OR
38642: PUSH
38643: LD_VAR 0 3
38647: NOT
38648: OR
38649: IFFALSE 38653
// exit ;
38651: GO 39467
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38653: LD_ADDR_VAR 0 14
38657: PUSH
38658: LD_VAR 0 1
38662: PPUSH
38663: LD_VAR 0 2
38667: PPUSH
38668: LD_VAR 0 3
38672: PPUSH
38673: LD_VAR 0 4
38677: PPUSH
38678: LD_VAR 0 5
38682: PUSH
38683: LD_INT 1
38685: ARRAY
38686: PPUSH
38687: CALL_OW 248
38691: PPUSH
38692: LD_INT 0
38694: PPUSH
38695: CALL 40720 0 6
38699: ST_TO_ADDR
// if not hexes then
38700: LD_VAR 0 14
38704: NOT
38705: IFFALSE 38709
// exit ;
38707: GO 39467
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38709: LD_ADDR_VAR 0 17
38713: PUSH
38714: LD_VAR 0 5
38718: PPUSH
38719: LD_INT 22
38721: PUSH
38722: LD_VAR 0 13
38726: PPUSH
38727: CALL_OW 255
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 30
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 30
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PPUSH
38768: CALL_OW 72
38772: ST_TO_ADDR
// for i = 1 to hexes do
38773: LD_ADDR_VAR 0 9
38777: PUSH
38778: DOUBLE
38779: LD_INT 1
38781: DEC
38782: ST_TO_ADDR
38783: LD_VAR 0 14
38787: PUSH
38788: FOR_TO
38789: IFFALSE 39465
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38791: LD_ADDR_VAR 0 13
38795: PUSH
38796: LD_VAR 0 14
38800: PUSH
38801: LD_VAR 0 9
38805: ARRAY
38806: PUSH
38807: LD_INT 1
38809: ARRAY
38810: PPUSH
38811: LD_VAR 0 14
38815: PUSH
38816: LD_VAR 0 9
38820: ARRAY
38821: PUSH
38822: LD_INT 2
38824: ARRAY
38825: PPUSH
38826: CALL_OW 428
38830: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38831: LD_VAR 0 14
38835: PUSH
38836: LD_VAR 0 9
38840: ARRAY
38841: PUSH
38842: LD_INT 1
38844: ARRAY
38845: PPUSH
38846: LD_VAR 0 14
38850: PUSH
38851: LD_VAR 0 9
38855: ARRAY
38856: PUSH
38857: LD_INT 2
38859: ARRAY
38860: PPUSH
38861: CALL_OW 351
38865: PUSH
38866: LD_VAR 0 14
38870: PUSH
38871: LD_VAR 0 9
38875: ARRAY
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PPUSH
38881: LD_VAR 0 14
38885: PUSH
38886: LD_VAR 0 9
38890: ARRAY
38891: PUSH
38892: LD_INT 2
38894: ARRAY
38895: PPUSH
38896: CALL_OW 488
38900: NOT
38901: OR
38902: PUSH
38903: LD_VAR 0 13
38907: PPUSH
38908: CALL_OW 247
38912: PUSH
38913: LD_INT 3
38915: EQUAL
38916: OR
38917: IFFALSE 38923
// exit ;
38919: POP
38920: POP
38921: GO 39467
// if not tmp then
38923: LD_VAR 0 13
38927: NOT
38928: IFFALSE 38932
// continue ;
38930: GO 38788
// result := true ;
38932: LD_ADDR_VAR 0 8
38936: PUSH
38937: LD_INT 1
38939: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38940: LD_VAR 0 6
38944: PUSH
38945: LD_VAR 0 13
38949: PPUSH
38950: CALL_OW 247
38954: PUSH
38955: LD_INT 2
38957: EQUAL
38958: AND
38959: PUSH
38960: LD_VAR 0 13
38964: PPUSH
38965: CALL_OW 263
38969: PUSH
38970: LD_INT 1
38972: EQUAL
38973: AND
38974: IFFALSE 39138
// begin if IsDrivenBy ( tmp ) then
38976: LD_VAR 0 13
38980: PPUSH
38981: CALL_OW 311
38985: IFFALSE 38989
// continue ;
38987: GO 38788
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38989: LD_VAR 0 6
38993: PPUSH
38994: LD_INT 3
38996: PUSH
38997: LD_INT 60
38999: PUSH
39000: EMPTY
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: LD_INT 55
39012: PUSH
39013: EMPTY
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PPUSH
39024: CALL_OW 72
39028: IFFALSE 39136
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39030: LD_ADDR_VAR 0 18
39034: PUSH
39035: LD_VAR 0 6
39039: PPUSH
39040: LD_INT 3
39042: PUSH
39043: LD_INT 60
39045: PUSH
39046: EMPTY
39047: LIST
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 3
39055: PUSH
39056: LD_INT 55
39058: PUSH
39059: EMPTY
39060: LIST
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PPUSH
39070: CALL_OW 72
39074: PUSH
39075: LD_INT 1
39077: ARRAY
39078: ST_TO_ADDR
// if IsInUnit ( driver ) then
39079: LD_VAR 0 18
39083: PPUSH
39084: CALL_OW 310
39088: IFFALSE 39099
// ComExit ( driver ) ;
39090: LD_VAR 0 18
39094: PPUSH
39095: CALL 64501 0 1
// AddComEnterUnit ( driver , tmp ) ;
39099: LD_VAR 0 18
39103: PPUSH
39104: LD_VAR 0 13
39108: PPUSH
39109: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39113: LD_VAR 0 18
39117: PPUSH
39118: LD_VAR 0 7
39122: PPUSH
39123: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39127: LD_VAR 0 18
39131: PPUSH
39132: CALL_OW 181
// end ; continue ;
39136: GO 38788
// end ; if not cleaners or not tmp in cleaners then
39138: LD_VAR 0 6
39142: NOT
39143: PUSH
39144: LD_VAR 0 13
39148: PUSH
39149: LD_VAR 0 6
39153: IN
39154: NOT
39155: OR
39156: IFFALSE 39463
// begin if dep then
39158: LD_VAR 0 17
39162: IFFALSE 39298
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39164: LD_ADDR_VAR 0 16
39168: PUSH
39169: LD_VAR 0 17
39173: PUSH
39174: LD_INT 1
39176: ARRAY
39177: PPUSH
39178: CALL_OW 250
39182: PPUSH
39183: LD_VAR 0 17
39187: PUSH
39188: LD_INT 1
39190: ARRAY
39191: PPUSH
39192: CALL_OW 254
39196: PPUSH
39197: LD_INT 5
39199: PPUSH
39200: CALL_OW 272
39204: PUSH
39205: LD_VAR 0 17
39209: PUSH
39210: LD_INT 1
39212: ARRAY
39213: PPUSH
39214: CALL_OW 251
39218: PPUSH
39219: LD_VAR 0 17
39223: PUSH
39224: LD_INT 1
39226: ARRAY
39227: PPUSH
39228: CALL_OW 254
39232: PPUSH
39233: LD_INT 5
39235: PPUSH
39236: CALL_OW 273
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39245: LD_VAR 0 16
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PPUSH
39254: LD_VAR 0 16
39258: PUSH
39259: LD_INT 2
39261: ARRAY
39262: PPUSH
39263: CALL_OW 488
39267: IFFALSE 39298
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39269: LD_VAR 0 13
39273: PPUSH
39274: LD_VAR 0 16
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PPUSH
39283: LD_VAR 0 16
39287: PUSH
39288: LD_INT 2
39290: ARRAY
39291: PPUSH
39292: CALL_OW 111
// continue ;
39296: GO 38788
// end ; end ; r := GetDir ( tmp ) ;
39298: LD_ADDR_VAR 0 15
39302: PUSH
39303: LD_VAR 0 13
39307: PPUSH
39308: CALL_OW 254
39312: ST_TO_ADDR
// if r = 5 then
39313: LD_VAR 0 15
39317: PUSH
39318: LD_INT 5
39320: EQUAL
39321: IFFALSE 39331
// r := 0 ;
39323: LD_ADDR_VAR 0 15
39327: PUSH
39328: LD_INT 0
39330: ST_TO_ADDR
// for j = r to 5 do
39331: LD_ADDR_VAR 0 10
39335: PUSH
39336: DOUBLE
39337: LD_VAR 0 15
39341: DEC
39342: ST_TO_ADDR
39343: LD_INT 5
39345: PUSH
39346: FOR_TO
39347: IFFALSE 39461
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39349: LD_ADDR_VAR 0 11
39353: PUSH
39354: LD_VAR 0 13
39358: PPUSH
39359: CALL_OW 250
39363: PPUSH
39364: LD_VAR 0 10
39368: PPUSH
39369: LD_INT 2
39371: PPUSH
39372: CALL_OW 272
39376: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39377: LD_ADDR_VAR 0 12
39381: PUSH
39382: LD_VAR 0 13
39386: PPUSH
39387: CALL_OW 251
39391: PPUSH
39392: LD_VAR 0 10
39396: PPUSH
39397: LD_INT 2
39399: PPUSH
39400: CALL_OW 273
39404: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39405: LD_VAR 0 11
39409: PPUSH
39410: LD_VAR 0 12
39414: PPUSH
39415: CALL_OW 488
39419: PUSH
39420: LD_VAR 0 11
39424: PPUSH
39425: LD_VAR 0 12
39429: PPUSH
39430: CALL_OW 428
39434: NOT
39435: AND
39436: IFFALSE 39459
// begin ComMoveXY ( tmp , _x , _y ) ;
39438: LD_VAR 0 13
39442: PPUSH
39443: LD_VAR 0 11
39447: PPUSH
39448: LD_VAR 0 12
39452: PPUSH
39453: CALL_OW 111
// break ;
39457: GO 39461
// end ; end ;
39459: GO 39346
39461: POP
39462: POP
// end ; end ;
39463: GO 38788
39465: POP
39466: POP
// end ;
39467: LD_VAR 0 8
39471: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39472: LD_INT 0
39474: PPUSH
// result := true ;
39475: LD_ADDR_VAR 0 3
39479: PUSH
39480: LD_INT 1
39482: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39483: LD_VAR 0 2
39487: PUSH
39488: LD_INT 24
39490: DOUBLE
39491: EQUAL
39492: IFTRUE 39502
39494: LD_INT 33
39496: DOUBLE
39497: EQUAL
39498: IFTRUE 39502
39500: GO 39527
39502: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39503: LD_ADDR_VAR 0 3
39507: PUSH
39508: LD_INT 32
39510: PPUSH
39511: LD_VAR 0 1
39515: PPUSH
39516: CALL_OW 321
39520: PUSH
39521: LD_INT 2
39523: EQUAL
39524: ST_TO_ADDR
39525: GO 39843
39527: LD_INT 20
39529: DOUBLE
39530: EQUAL
39531: IFTRUE 39535
39533: GO 39560
39535: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39536: LD_ADDR_VAR 0 3
39540: PUSH
39541: LD_INT 6
39543: PPUSH
39544: LD_VAR 0 1
39548: PPUSH
39549: CALL_OW 321
39553: PUSH
39554: LD_INT 2
39556: EQUAL
39557: ST_TO_ADDR
39558: GO 39843
39560: LD_INT 22
39562: DOUBLE
39563: EQUAL
39564: IFTRUE 39574
39566: LD_INT 36
39568: DOUBLE
39569: EQUAL
39570: IFTRUE 39574
39572: GO 39599
39574: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39575: LD_ADDR_VAR 0 3
39579: PUSH
39580: LD_INT 15
39582: PPUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 321
39592: PUSH
39593: LD_INT 2
39595: EQUAL
39596: ST_TO_ADDR
39597: GO 39843
39599: LD_INT 30
39601: DOUBLE
39602: EQUAL
39603: IFTRUE 39607
39605: GO 39632
39607: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39608: LD_ADDR_VAR 0 3
39612: PUSH
39613: LD_INT 20
39615: PPUSH
39616: LD_VAR 0 1
39620: PPUSH
39621: CALL_OW 321
39625: PUSH
39626: LD_INT 2
39628: EQUAL
39629: ST_TO_ADDR
39630: GO 39843
39632: LD_INT 28
39634: DOUBLE
39635: EQUAL
39636: IFTRUE 39646
39638: LD_INT 21
39640: DOUBLE
39641: EQUAL
39642: IFTRUE 39646
39644: GO 39671
39646: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39647: LD_ADDR_VAR 0 3
39651: PUSH
39652: LD_INT 21
39654: PPUSH
39655: LD_VAR 0 1
39659: PPUSH
39660: CALL_OW 321
39664: PUSH
39665: LD_INT 2
39667: EQUAL
39668: ST_TO_ADDR
39669: GO 39843
39671: LD_INT 16
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39679
39677: GO 39704
39679: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39680: LD_ADDR_VAR 0 3
39684: PUSH
39685: LD_INT 84
39687: PPUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 321
39697: PUSH
39698: LD_INT 2
39700: EQUAL
39701: ST_TO_ADDR
39702: GO 39843
39704: LD_INT 19
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39718
39710: LD_INT 23
39712: DOUBLE
39713: EQUAL
39714: IFTRUE 39718
39716: GO 39743
39718: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_INT 83
39726: PPUSH
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 321
39736: PUSH
39737: LD_INT 2
39739: EQUAL
39740: ST_TO_ADDR
39741: GO 39843
39743: LD_INT 17
39745: DOUBLE
39746: EQUAL
39747: IFTRUE 39751
39749: GO 39776
39751: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39752: LD_ADDR_VAR 0 3
39756: PUSH
39757: LD_INT 39
39759: PPUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 321
39769: PUSH
39770: LD_INT 2
39772: EQUAL
39773: ST_TO_ADDR
39774: GO 39843
39776: LD_INT 18
39778: DOUBLE
39779: EQUAL
39780: IFTRUE 39784
39782: GO 39809
39784: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39785: LD_ADDR_VAR 0 3
39789: PUSH
39790: LD_INT 40
39792: PPUSH
39793: LD_VAR 0 1
39797: PPUSH
39798: CALL_OW 321
39802: PUSH
39803: LD_INT 2
39805: EQUAL
39806: ST_TO_ADDR
39807: GO 39843
39809: LD_INT 27
39811: DOUBLE
39812: EQUAL
39813: IFTRUE 39817
39815: GO 39842
39817: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39818: LD_ADDR_VAR 0 3
39822: PUSH
39823: LD_INT 35
39825: PPUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: CALL_OW 321
39835: PUSH
39836: LD_INT 2
39838: EQUAL
39839: ST_TO_ADDR
39840: GO 39843
39842: POP
// end ;
39843: LD_VAR 0 3
39847: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39848: LD_INT 0
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
// result := false ;
39861: LD_ADDR_VAR 0 6
39865: PUSH
39866: LD_INT 0
39868: ST_TO_ADDR
// if btype = b_depot then
39869: LD_VAR 0 2
39873: PUSH
39874: LD_INT 0
39876: EQUAL
39877: IFFALSE 39889
// begin result := true ;
39879: LD_ADDR_VAR 0 6
39883: PUSH
39884: LD_INT 1
39886: ST_TO_ADDR
// exit ;
39887: GO 40715
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39889: LD_VAR 0 1
39893: NOT
39894: PUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 266
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: IN
39915: NOT
39916: OR
39917: PUSH
39918: LD_VAR 0 2
39922: NOT
39923: OR
39924: PUSH
39925: LD_VAR 0 5
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: LD_INT 4
39944: PUSH
39945: LD_INT 5
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: IN
39956: NOT
39957: OR
39958: PUSH
39959: LD_VAR 0 3
39963: PPUSH
39964: LD_VAR 0 4
39968: PPUSH
39969: CALL_OW 488
39973: NOT
39974: OR
39975: IFFALSE 39979
// exit ;
39977: GO 40715
// side := GetSide ( depot ) ;
39979: LD_ADDR_VAR 0 9
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 255
39993: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39994: LD_VAR 0 9
39998: PPUSH
39999: LD_VAR 0 2
40003: PPUSH
40004: CALL 39472 0 2
40008: NOT
40009: IFFALSE 40013
// exit ;
40011: GO 40715
// pom := GetBase ( depot ) ;
40013: LD_ADDR_VAR 0 10
40017: PUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 274
40027: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40028: LD_ADDR_VAR 0 11
40032: PUSH
40033: LD_VAR 0 2
40037: PPUSH
40038: LD_VAR 0 1
40042: PPUSH
40043: CALL_OW 248
40047: PPUSH
40048: CALL_OW 450
40052: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40053: LD_VAR 0 10
40057: PPUSH
40058: LD_INT 1
40060: PPUSH
40061: CALL_OW 275
40065: PUSH
40066: LD_VAR 0 11
40070: PUSH
40071: LD_INT 1
40073: ARRAY
40074: GREATEREQUAL
40075: PUSH
40076: LD_VAR 0 10
40080: PPUSH
40081: LD_INT 2
40083: PPUSH
40084: CALL_OW 275
40088: PUSH
40089: LD_VAR 0 11
40093: PUSH
40094: LD_INT 2
40096: ARRAY
40097: GREATEREQUAL
40098: AND
40099: PUSH
40100: LD_VAR 0 10
40104: PPUSH
40105: LD_INT 3
40107: PPUSH
40108: CALL_OW 275
40112: PUSH
40113: LD_VAR 0 11
40117: PUSH
40118: LD_INT 3
40120: ARRAY
40121: GREATEREQUAL
40122: AND
40123: NOT
40124: IFFALSE 40128
// exit ;
40126: GO 40715
// if GetBType ( depot ) = b_depot then
40128: LD_VAR 0 1
40132: PPUSH
40133: CALL_OW 266
40137: PUSH
40138: LD_INT 0
40140: EQUAL
40141: IFFALSE 40153
// dist := 28 else
40143: LD_ADDR_VAR 0 14
40147: PUSH
40148: LD_INT 28
40150: ST_TO_ADDR
40151: GO 40161
// dist := 36 ;
40153: LD_ADDR_VAR 0 14
40157: PUSH
40158: LD_INT 36
40160: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40161: LD_VAR 0 1
40165: PPUSH
40166: LD_VAR 0 3
40170: PPUSH
40171: LD_VAR 0 4
40175: PPUSH
40176: CALL_OW 297
40180: PUSH
40181: LD_VAR 0 14
40185: GREATER
40186: IFFALSE 40190
// exit ;
40188: GO 40715
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40190: LD_ADDR_VAR 0 12
40194: PUSH
40195: LD_VAR 0 2
40199: PPUSH
40200: LD_VAR 0 3
40204: PPUSH
40205: LD_VAR 0 4
40209: PPUSH
40210: LD_VAR 0 5
40214: PPUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 248
40224: PPUSH
40225: LD_INT 0
40227: PPUSH
40228: CALL 40720 0 6
40232: ST_TO_ADDR
// if not hexes then
40233: LD_VAR 0 12
40237: NOT
40238: IFFALSE 40242
// exit ;
40240: GO 40715
// hex := GetHexInfo ( x , y ) ;
40242: LD_ADDR_VAR 0 15
40246: PUSH
40247: LD_VAR 0 3
40251: PPUSH
40252: LD_VAR 0 4
40256: PPUSH
40257: CALL_OW 546
40261: ST_TO_ADDR
// if hex [ 1 ] then
40262: LD_VAR 0 15
40266: PUSH
40267: LD_INT 1
40269: ARRAY
40270: IFFALSE 40274
// exit ;
40272: GO 40715
// height := hex [ 2 ] ;
40274: LD_ADDR_VAR 0 13
40278: PUSH
40279: LD_VAR 0 15
40283: PUSH
40284: LD_INT 2
40286: ARRAY
40287: ST_TO_ADDR
// for i = 1 to hexes do
40288: LD_ADDR_VAR 0 7
40292: PUSH
40293: DOUBLE
40294: LD_INT 1
40296: DEC
40297: ST_TO_ADDR
40298: LD_VAR 0 12
40302: PUSH
40303: FOR_TO
40304: IFFALSE 40634
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40306: LD_VAR 0 12
40310: PUSH
40311: LD_VAR 0 7
40315: ARRAY
40316: PUSH
40317: LD_INT 1
40319: ARRAY
40320: PPUSH
40321: LD_VAR 0 12
40325: PUSH
40326: LD_VAR 0 7
40330: ARRAY
40331: PUSH
40332: LD_INT 2
40334: ARRAY
40335: PPUSH
40336: CALL_OW 488
40340: NOT
40341: PUSH
40342: LD_VAR 0 12
40346: PUSH
40347: LD_VAR 0 7
40351: ARRAY
40352: PUSH
40353: LD_INT 1
40355: ARRAY
40356: PPUSH
40357: LD_VAR 0 12
40361: PUSH
40362: LD_VAR 0 7
40366: ARRAY
40367: PUSH
40368: LD_INT 2
40370: ARRAY
40371: PPUSH
40372: CALL_OW 428
40376: PUSH
40377: LD_INT 0
40379: GREATER
40380: OR
40381: PUSH
40382: LD_VAR 0 12
40386: PUSH
40387: LD_VAR 0 7
40391: ARRAY
40392: PUSH
40393: LD_INT 1
40395: ARRAY
40396: PPUSH
40397: LD_VAR 0 12
40401: PUSH
40402: LD_VAR 0 7
40406: ARRAY
40407: PUSH
40408: LD_INT 2
40410: ARRAY
40411: PPUSH
40412: CALL_OW 351
40416: OR
40417: IFFALSE 40423
// exit ;
40419: POP
40420: POP
40421: GO 40715
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40423: LD_ADDR_VAR 0 8
40427: PUSH
40428: LD_VAR 0 12
40432: PUSH
40433: LD_VAR 0 7
40437: ARRAY
40438: PUSH
40439: LD_INT 1
40441: ARRAY
40442: PPUSH
40443: LD_VAR 0 12
40447: PUSH
40448: LD_VAR 0 7
40452: ARRAY
40453: PUSH
40454: LD_INT 2
40456: ARRAY
40457: PPUSH
40458: CALL_OW 546
40462: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40463: LD_VAR 0 8
40467: PUSH
40468: LD_INT 1
40470: ARRAY
40471: PUSH
40472: LD_VAR 0 8
40476: PUSH
40477: LD_INT 2
40479: ARRAY
40480: PUSH
40481: LD_VAR 0 13
40485: PUSH
40486: LD_INT 2
40488: PLUS
40489: GREATER
40490: OR
40491: PUSH
40492: LD_VAR 0 8
40496: PUSH
40497: LD_INT 2
40499: ARRAY
40500: PUSH
40501: LD_VAR 0 13
40505: PUSH
40506: LD_INT 2
40508: MINUS
40509: LESS
40510: OR
40511: PUSH
40512: LD_VAR 0 8
40516: PUSH
40517: LD_INT 3
40519: ARRAY
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 8
40526: PUSH
40527: LD_INT 9
40529: PUSH
40530: LD_INT 10
40532: PUSH
40533: LD_INT 11
40535: PUSH
40536: LD_INT 12
40538: PUSH
40539: LD_INT 13
40541: PUSH
40542: LD_INT 16
40544: PUSH
40545: LD_INT 17
40547: PUSH
40548: LD_INT 18
40550: PUSH
40551: LD_INT 19
40553: PUSH
40554: LD_INT 20
40556: PUSH
40557: LD_INT 21
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: IN
40575: NOT
40576: OR
40577: PUSH
40578: LD_VAR 0 8
40582: PUSH
40583: LD_INT 5
40585: ARRAY
40586: NOT
40587: OR
40588: PUSH
40589: LD_VAR 0 8
40593: PUSH
40594: LD_INT 6
40596: ARRAY
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 7
40606: PUSH
40607: LD_INT 9
40609: PUSH
40610: LD_INT 10
40612: PUSH
40613: LD_INT 11
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: IN
40624: NOT
40625: OR
40626: IFFALSE 40632
// exit ;
40628: POP
40629: POP
40630: GO 40715
// end ;
40632: GO 40303
40634: POP
40635: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40636: LD_VAR 0 9
40640: PPUSH
40641: LD_VAR 0 3
40645: PPUSH
40646: LD_VAR 0 4
40650: PPUSH
40651: LD_INT 20
40653: PPUSH
40654: CALL 32638 0 4
40658: PUSH
40659: LD_INT 4
40661: ARRAY
40662: IFFALSE 40666
// exit ;
40664: GO 40715
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40666: LD_VAR 0 2
40670: PUSH
40671: LD_INT 29
40673: PUSH
40674: LD_INT 30
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: IN
40681: PUSH
40682: LD_VAR 0 3
40686: PPUSH
40687: LD_VAR 0 4
40691: PPUSH
40692: LD_VAR 0 9
40696: PPUSH
40697: CALL_OW 440
40701: NOT
40702: AND
40703: IFFALSE 40707
// exit ;
40705: GO 40715
// result := true ;
40707: LD_ADDR_VAR 0 6
40711: PUSH
40712: LD_INT 1
40714: ST_TO_ADDR
// end ;
40715: LD_VAR 0 6
40719: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40720: LD_INT 0
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
// result = [ ] ;
40780: LD_ADDR_VAR 0 7
40784: PUSH
40785: EMPTY
40786: ST_TO_ADDR
// temp_list = [ ] ;
40787: LD_ADDR_VAR 0 9
40791: PUSH
40792: EMPTY
40793: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40794: LD_VAR 0 4
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: LD_INT 3
40810: PUSH
40811: LD_INT 4
40813: PUSH
40814: LD_INT 5
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: IN
40825: NOT
40826: PUSH
40827: LD_VAR 0 1
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: IN
40842: PUSH
40843: LD_VAR 0 5
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: LIST
40861: IN
40862: NOT
40863: AND
40864: OR
40865: IFFALSE 40869
// exit ;
40867: GO 59260
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40869: LD_VAR 0 1
40873: PUSH
40874: LD_INT 6
40876: PUSH
40877: LD_INT 7
40879: PUSH
40880: LD_INT 8
40882: PUSH
40883: LD_INT 13
40885: PUSH
40886: LD_INT 12
40888: PUSH
40889: LD_INT 15
40891: PUSH
40892: LD_INT 11
40894: PUSH
40895: LD_INT 14
40897: PUSH
40898: LD_INT 10
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: IN
40912: IFFALSE 40922
// btype = b_lab ;
40914: LD_ADDR_VAR 0 1
40918: PUSH
40919: LD_INT 6
40921: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40922: LD_VAR 0 6
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: LIST
40940: IN
40941: NOT
40942: PUSH
40943: LD_VAR 0 1
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: LD_INT 6
40962: PUSH
40963: LD_INT 36
40965: PUSH
40966: LD_INT 4
40968: PUSH
40969: LD_INT 5
40971: PUSH
40972: LD_INT 31
40974: PUSH
40975: LD_INT 32
40977: PUSH
40978: LD_INT 33
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: IN
40994: NOT
40995: PUSH
40996: LD_VAR 0 6
41000: PUSH
41001: LD_INT 1
41003: EQUAL
41004: AND
41005: OR
41006: PUSH
41007: LD_VAR 0 1
41011: PUSH
41012: LD_INT 2
41014: PUSH
41015: LD_INT 3
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: IN
41022: NOT
41023: PUSH
41024: LD_VAR 0 6
41028: PUSH
41029: LD_INT 2
41031: EQUAL
41032: AND
41033: OR
41034: IFFALSE 41044
// mode = 0 ;
41036: LD_ADDR_VAR 0 6
41040: PUSH
41041: LD_INT 0
41043: ST_TO_ADDR
// case mode of 0 :
41044: LD_VAR 0 6
41048: PUSH
41049: LD_INT 0
41051: DOUBLE
41052: EQUAL
41053: IFTRUE 41057
41055: GO 52510
41057: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41058: LD_ADDR_VAR 0 11
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41251: LD_ADDR_VAR 0 12
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 3
41408: NEG
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 3
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41447: LD_ADDR_VAR 0 13
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: LD_INT 3
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41646: LD_ADDR_VAR 0 14
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 2
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41842: LD_ADDR_VAR 0 15
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 3
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42035: LD_ADDR_VAR 0 16
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: LD_INT 3
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42228: LD_ADDR_VAR 0 17
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42458: LD_ADDR_VAR 0 18
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42688: LD_ADDR_VAR 0 19
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42918: LD_ADDR_VAR 0 20
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43148: LD_ADDR_VAR 0 21
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43378: LD_ADDR_VAR 0 22
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43608: LD_ADDR_VAR 0 23
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 3
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43888: LD_ADDR_VAR 0 24
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44164: LD_ADDR_VAR 0 25
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 2
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: LD_INT 3
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44438: LD_ADDR_VAR 0 26
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: LD_INT 3
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 3
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44714: LD_ADDR_VAR 0 27
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 3
44947: NEG
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44994: LD_ADDR_VAR 0 28
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 3
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 3
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45276: LD_ADDR_VAR 0 29
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 2
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: LD_INT 3
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 3
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 3
45520: NEG
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45555: LD_ADDR_VAR 0 30
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 3
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45833: LD_ADDR_VAR 0 31
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: LD_INT 3
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 3
46076: NEG
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46111: LD_ADDR_VAR 0 32
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 3
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 3
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46389: LD_ADDR_VAR 0 33
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 3
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46668: LD_ADDR_VAR 0 34
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 3
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46948: LD_ADDR_VAR 0 35
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47060: LD_ADDR_VAR 0 36
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47172: LD_ADDR_VAR 0 37
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47284: LD_ADDR_VAR 0 38
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47396: LD_ADDR_VAR 0 39
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47508: LD_ADDR_VAR 0 40
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47620: LD_ADDR_VAR 0 41
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 3
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 3
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 3
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 3
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 3
47894: NEG
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 3
47905: NEG
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: NEG
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: LD_INT 3
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47970: LD_ADDR_VAR 0 42
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 3
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 3
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: NEG
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 3
48279: NEG
48280: PUSH
48281: LD_INT 3
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48320: LD_ADDR_VAR 0 43
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 3
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48668: LD_ADDR_VAR 0 44
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 2
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: LD_INT 3
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 3
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 3
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 3
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49018: LD_ADDR_VAR 0 45
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 2
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: NEG
49209: PUSH
49210: LD_INT 3
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: LD_INT 3
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 3
49327: NEG
49328: PUSH
49329: LD_INT 3
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49368: LD_ADDR_VAR 0 46
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 3
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: NEG
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49716: LD_ADDR_VAR 0 47
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49867: LD_ADDR_VAR 0 48
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50014: LD_ADDR_VAR 0 49
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50158: LD_ADDR_VAR 0 50
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50302: LD_ADDR_VAR 0 51
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50449: LD_ADDR_VAR 0 52
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50600: LD_ADDR_VAR 0 53
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50830: LD_ADDR_VAR 0 54
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51060: LD_ADDR_VAR 0 55
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51290: LD_ADDR_VAR 0 56
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51520: LD_ADDR_VAR 0 57
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51750: LD_ADDR_VAR 0 58
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51980: LD_ADDR_VAR 0 59
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52068: LD_ADDR_VAR 0 60
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52156: LD_ADDR_VAR 0 61
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52244: LD_ADDR_VAR 0 62
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52332: LD_ADDR_VAR 0 63
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52420: LD_ADDR_VAR 0 64
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: ST_TO_ADDR
// end ; 1 :
52508: GO 58405
52510: LD_INT 1
52512: DOUBLE
52513: EQUAL
52514: IFTRUE 52518
52516: GO 55141
52518: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52519: LD_ADDR_VAR 0 11
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 3
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52563: LD_ADDR_VAR 0 12
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52604: LD_ADDR_VAR 0 13
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52644: LD_ADDR_VAR 0 14
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52685: LD_ADDR_VAR 0 15
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52729: LD_ADDR_VAR 0 16
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 3
52760: NEG
52761: PUSH
52762: LD_INT 3
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52775: LD_ADDR_VAR 0 17
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52819: LD_ADDR_VAR 0 18
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52860: LD_ADDR_VAR 0 19
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: LD_INT 3
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52900: LD_ADDR_VAR 0 20
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52941: LD_ADDR_VAR 0 21
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: NEG
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: LIST
52984: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52985: LD_ADDR_VAR 0 22
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 3
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: NEG
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: LD_INT 3
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53031: LD_ADDR_VAR 0 23
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 3
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 4
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 3
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53075: LD_ADDR_VAR 0 24
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 4
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53116: LD_ADDR_VAR 0 25
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 4
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53156: LD_ADDR_VAR 0 26
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 4
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 3
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53197: LD_ADDR_VAR 0 27
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 4
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53241: LD_ADDR_VAR 0 28
53245: PUSH
53246: LD_INT 3
53248: NEG
53249: PUSH
53250: LD_INT 3
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: LD_INT 4
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 4
53272: NEG
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53287: LD_ADDR_VAR 0 29
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 4
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 4
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 5
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 5
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 4
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 6
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 6
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 5
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53442: LD_ADDR_VAR 0 30
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 4
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 4
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 4
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 5
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 5
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 5
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 6
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 6
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53585: LD_ADDR_VAR 0 31
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 4
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 4
53632: PUSH
53633: LD_INT 4
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: LD_INT 4
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 5
53652: PUSH
53653: LD_INT 4
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 5
53662: PUSH
53663: LD_INT 5
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 4
53672: PUSH
53673: LD_INT 5
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 6
53682: PUSH
53683: LD_INT 5
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 6
53692: PUSH
53693: LD_INT 6
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 5
53702: PUSH
53703: LD_INT 6
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53724: LD_ADDR_VAR 0 32
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 4
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 4
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 3
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 5
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 5
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 4
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 6
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 6
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 5
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53867: LD_ADDR_VAR 0 33
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: NEG
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 4
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 4
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 4
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 5
53953: NEG
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 5
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 5
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 6
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 6
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54022: LD_ADDR_VAR 0 34
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 3
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: LD_INT 4
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 4
54077: NEG
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 4
54089: NEG
54090: PUSH
54091: LD_INT 4
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 4
54101: NEG
54102: PUSH
54103: LD_INT 5
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 5
54113: NEG
54114: PUSH
54115: LD_INT 4
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 5
54125: NEG
54126: PUSH
54127: LD_INT 5
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 5
54137: NEG
54138: PUSH
54139: LD_INT 6
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 6
54149: NEG
54150: PUSH
54151: LD_INT 5
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 6
54161: NEG
54162: PUSH
54163: LD_INT 6
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54185: LD_ADDR_VAR 0 41
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54229: LD_ADDR_VAR 0 42
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54270: LD_ADDR_VAR 0 43
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54310: LD_ADDR_VAR 0 44
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54351: LD_ADDR_VAR 0 45
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54395: LD_ADDR_VAR 0 46
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54441: LD_ADDR_VAR 0 47
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54474: LD_ADDR_VAR 0 48
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54505: LD_ADDR_VAR 0 49
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54534: LD_ADDR_VAR 0 50
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54563: LD_ADDR_VAR 0 51
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54594: LD_ADDR_VAR 0 52
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: NEG
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54627: LD_ADDR_VAR 0 53
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54671: LD_ADDR_VAR 0 54
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 3
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54712: LD_ADDR_VAR 0 55
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: LIST
54751: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54752: LD_ADDR_VAR 0 56
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54793: LD_ADDR_VAR 0 57
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54837: LD_ADDR_VAR 0 58
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54883: LD_ADDR_VAR 0 59
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54927: LD_ADDR_VAR 0 60
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54968: LD_ADDR_VAR 0 61
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55008: LD_ADDR_VAR 0 62
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: LIST
55048: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55049: LD_ADDR_VAR 0 63
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55093: LD_ADDR_VAR 0 64
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: LIST
55138: ST_TO_ADDR
// end ; 2 :
55139: GO 58405
55141: LD_INT 2
55143: DOUBLE
55144: EQUAL
55145: IFTRUE 55149
55147: GO 58404
55149: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55150: LD_ADDR_VAR 0 29
55154: PUSH
55155: LD_INT 4
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 4
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 5
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 5
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 4
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 5
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 3
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 4
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 4
55280: PUSH
55281: LD_INT 4
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: LD_INT 4
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: LD_INT 3
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 4
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 4
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 4
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 5
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 5
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 4
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: LD_INT 5
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 4
55489: NEG
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 4
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 4
55512: NEG
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 4
55535: NEG
55536: PUSH
55537: LD_INT 4
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: LD_INT 5
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: LD_INT 4
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 4
55583: NEG
55584: PUSH
55585: LD_INT 3
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 5
55595: NEG
55596: PUSH
55597: LD_INT 4
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 5
55607: NEG
55608: PUSH
55609: LD_INT 5
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 5
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 5
55631: NEG
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55688: LD_ADDR_VAR 0 30
55692: PUSH
55693: LD_INT 4
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 5
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 5
55725: PUSH
55726: LD_INT 5
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 4
55735: PUSH
55736: LD_INT 5
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 3
55745: PUSH
55746: LD_INT 4
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 5
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: LD_INT 5
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 4
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 4
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 4
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 4
55878: NEG
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 4
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 4
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 5
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 5
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 5
55957: NEG
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: NEG
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: LD_INT 4
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: LD_INT 3
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 4
56040: NEG
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 4
56052: NEG
56053: PUSH
56054: LD_INT 4
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: LD_INT 4
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 4
56076: NEG
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 4
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 5
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 4
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 5
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 5
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56235: LD_ADDR_VAR 0 31
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 5
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 4
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 5
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 3
56346: NEG
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 4
56391: NEG
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 4
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 4
56414: NEG
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 4
56437: NEG
56438: PUSH
56439: LD_INT 4
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 4
56449: NEG
56450: PUSH
56451: LD_INT 5
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: LD_INT 4
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 5
56497: NEG
56498: PUSH
56499: LD_INT 4
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 5
56509: NEG
56510: PUSH
56511: LD_INT 5
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: LD_INT 5
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 5
56533: NEG
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 4
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: LD_INT 4
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 4
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 5
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 5
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 4
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 5
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56785: LD_ADDR_VAR 0 32
56789: PUSH
56790: LD_INT 4
56792: NEG
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 4
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 5
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 5
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 5
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 3
56883: NEG
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: LD_INT 3
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 3
56906: NEG
56907: PUSH
56908: LD_INT 4
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: LD_INT 3
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 4
56954: NEG
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 4
56966: NEG
56967: PUSH
56968: LD_INT 4
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: LD_INT 4
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 4
56990: NEG
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 4
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 5
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 3
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 4
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 5
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: LD_INT 5
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 4
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 4
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 4
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 4
57197: PUSH
57198: LD_INT 4
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 4
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 5
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 5
57227: PUSH
57228: LD_INT 5
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 4
57237: PUSH
57238: LD_INT 5
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 5
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 5
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57332: LD_ADDR_VAR 0 33
57336: PUSH
57337: LD_INT 4
57339: NEG
57340: PUSH
57341: LD_INT 4
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 4
57351: NEG
57352: PUSH
57353: LD_INT 5
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 3
57363: NEG
57364: PUSH
57365: LD_INT 4
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: LD_INT 3
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 4
57387: NEG
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 5
57399: NEG
57400: PUSH
57401: LD_INT 4
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 5
57411: NEG
57412: PUSH
57413: LD_INT 5
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: LD_INT 5
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 5
57435: NEG
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 4
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: LD_INT 4
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 4
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 4
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 5
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 5
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 4
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 5
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 4
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 4
57672: PUSH
57673: LD_INT 4
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: LD_INT 4
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 4
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 4
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 4
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 3
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 4
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 5
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 5
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 4
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 5
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 3
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57870: LD_ADDR_VAR 0 34
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 4
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 5
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 4
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 4
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 5
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: LD_INT 5
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 3
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 4
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 4
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 4
58072: PUSH
58073: LD_INT 4
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 4
58082: PUSH
58083: LD_INT 3
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 5
58092: PUSH
58093: LD_INT 4
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 5
58102: PUSH
58103: LD_INT 5
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 4
58112: PUSH
58113: LD_INT 5
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: LD_INT 4
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 5
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: LD_INT 5
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 4
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 4
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 4
58255: NEG
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 4
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 5
58311: NEG
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 5
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 5
58334: NEG
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: ST_TO_ADDR
// end ; end ;
58402: GO 58405
58404: POP
// case btype of b_depot , b_warehouse :
58405: LD_VAR 0 1
58409: PUSH
58410: LD_INT 0
58412: DOUBLE
58413: EQUAL
58414: IFTRUE 58424
58416: LD_INT 1
58418: DOUBLE
58419: EQUAL
58420: IFTRUE 58424
58422: GO 58625
58424: POP
// case nation of nation_american :
58425: LD_VAR 0 5
58429: PUSH
58430: LD_INT 1
58432: DOUBLE
58433: EQUAL
58434: IFTRUE 58438
58436: GO 58494
58438: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58439: LD_ADDR_VAR 0 9
58443: PUSH
58444: LD_VAR 0 11
58448: PUSH
58449: LD_VAR 0 12
58453: PUSH
58454: LD_VAR 0 13
58458: PUSH
58459: LD_VAR 0 14
58463: PUSH
58464: LD_VAR 0 15
58468: PUSH
58469: LD_VAR 0 16
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: PUSH
58482: LD_VAR 0 4
58486: PUSH
58487: LD_INT 1
58489: PLUS
58490: ARRAY
58491: ST_TO_ADDR
58492: GO 58623
58494: LD_INT 2
58496: DOUBLE
58497: EQUAL
58498: IFTRUE 58502
58500: GO 58558
58502: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58503: LD_ADDR_VAR 0 9
58507: PUSH
58508: LD_VAR 0 17
58512: PUSH
58513: LD_VAR 0 18
58517: PUSH
58518: LD_VAR 0 19
58522: PUSH
58523: LD_VAR 0 20
58527: PUSH
58528: LD_VAR 0 21
58532: PUSH
58533: LD_VAR 0 22
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: PUSH
58546: LD_VAR 0 4
58550: PUSH
58551: LD_INT 1
58553: PLUS
58554: ARRAY
58555: ST_TO_ADDR
58556: GO 58623
58558: LD_INT 3
58560: DOUBLE
58561: EQUAL
58562: IFTRUE 58566
58564: GO 58622
58566: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58567: LD_ADDR_VAR 0 9
58571: PUSH
58572: LD_VAR 0 23
58576: PUSH
58577: LD_VAR 0 24
58581: PUSH
58582: LD_VAR 0 25
58586: PUSH
58587: LD_VAR 0 26
58591: PUSH
58592: LD_VAR 0 27
58596: PUSH
58597: LD_VAR 0 28
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: PUSH
58610: LD_VAR 0 4
58614: PUSH
58615: LD_INT 1
58617: PLUS
58618: ARRAY
58619: ST_TO_ADDR
58620: GO 58623
58622: POP
58623: GO 59178
58625: LD_INT 2
58627: DOUBLE
58628: EQUAL
58629: IFTRUE 58639
58631: LD_INT 3
58633: DOUBLE
58634: EQUAL
58635: IFTRUE 58639
58637: GO 58695
58639: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58640: LD_ADDR_VAR 0 9
58644: PUSH
58645: LD_VAR 0 29
58649: PUSH
58650: LD_VAR 0 30
58654: PUSH
58655: LD_VAR 0 31
58659: PUSH
58660: LD_VAR 0 32
58664: PUSH
58665: LD_VAR 0 33
58669: PUSH
58670: LD_VAR 0 34
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: PUSH
58683: LD_VAR 0 4
58687: PUSH
58688: LD_INT 1
58690: PLUS
58691: ARRAY
58692: ST_TO_ADDR
58693: GO 59178
58695: LD_INT 16
58697: DOUBLE
58698: EQUAL
58699: IFTRUE 58757
58701: LD_INT 17
58703: DOUBLE
58704: EQUAL
58705: IFTRUE 58757
58707: LD_INT 18
58709: DOUBLE
58710: EQUAL
58711: IFTRUE 58757
58713: LD_INT 19
58715: DOUBLE
58716: EQUAL
58717: IFTRUE 58757
58719: LD_INT 22
58721: DOUBLE
58722: EQUAL
58723: IFTRUE 58757
58725: LD_INT 20
58727: DOUBLE
58728: EQUAL
58729: IFTRUE 58757
58731: LD_INT 21
58733: DOUBLE
58734: EQUAL
58735: IFTRUE 58757
58737: LD_INT 23
58739: DOUBLE
58740: EQUAL
58741: IFTRUE 58757
58743: LD_INT 24
58745: DOUBLE
58746: EQUAL
58747: IFTRUE 58757
58749: LD_INT 25
58751: DOUBLE
58752: EQUAL
58753: IFTRUE 58757
58755: GO 58813
58757: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58758: LD_ADDR_VAR 0 9
58762: PUSH
58763: LD_VAR 0 35
58767: PUSH
58768: LD_VAR 0 36
58772: PUSH
58773: LD_VAR 0 37
58777: PUSH
58778: LD_VAR 0 38
58782: PUSH
58783: LD_VAR 0 39
58787: PUSH
58788: LD_VAR 0 40
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: PUSH
58801: LD_VAR 0 4
58805: PUSH
58806: LD_INT 1
58808: PLUS
58809: ARRAY
58810: ST_TO_ADDR
58811: GO 59178
58813: LD_INT 6
58815: DOUBLE
58816: EQUAL
58817: IFTRUE 58869
58819: LD_INT 7
58821: DOUBLE
58822: EQUAL
58823: IFTRUE 58869
58825: LD_INT 8
58827: DOUBLE
58828: EQUAL
58829: IFTRUE 58869
58831: LD_INT 13
58833: DOUBLE
58834: EQUAL
58835: IFTRUE 58869
58837: LD_INT 12
58839: DOUBLE
58840: EQUAL
58841: IFTRUE 58869
58843: LD_INT 15
58845: DOUBLE
58846: EQUAL
58847: IFTRUE 58869
58849: LD_INT 11
58851: DOUBLE
58852: EQUAL
58853: IFTRUE 58869
58855: LD_INT 14
58857: DOUBLE
58858: EQUAL
58859: IFTRUE 58869
58861: LD_INT 10
58863: DOUBLE
58864: EQUAL
58865: IFTRUE 58869
58867: GO 58925
58869: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58870: LD_ADDR_VAR 0 9
58874: PUSH
58875: LD_VAR 0 41
58879: PUSH
58880: LD_VAR 0 42
58884: PUSH
58885: LD_VAR 0 43
58889: PUSH
58890: LD_VAR 0 44
58894: PUSH
58895: LD_VAR 0 45
58899: PUSH
58900: LD_VAR 0 46
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: PUSH
58913: LD_VAR 0 4
58917: PUSH
58918: LD_INT 1
58920: PLUS
58921: ARRAY
58922: ST_TO_ADDR
58923: GO 59178
58925: LD_INT 36
58927: DOUBLE
58928: EQUAL
58929: IFTRUE 58933
58931: GO 58989
58933: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58934: LD_ADDR_VAR 0 9
58938: PUSH
58939: LD_VAR 0 47
58943: PUSH
58944: LD_VAR 0 48
58948: PUSH
58949: LD_VAR 0 49
58953: PUSH
58954: LD_VAR 0 50
58958: PUSH
58959: LD_VAR 0 51
58963: PUSH
58964: LD_VAR 0 52
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: PUSH
58977: LD_VAR 0 4
58981: PUSH
58982: LD_INT 1
58984: PLUS
58985: ARRAY
58986: ST_TO_ADDR
58987: GO 59178
58989: LD_INT 4
58991: DOUBLE
58992: EQUAL
58993: IFTRUE 59015
58995: LD_INT 5
58997: DOUBLE
58998: EQUAL
58999: IFTRUE 59015
59001: LD_INT 34
59003: DOUBLE
59004: EQUAL
59005: IFTRUE 59015
59007: LD_INT 37
59009: DOUBLE
59010: EQUAL
59011: IFTRUE 59015
59013: GO 59071
59015: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59016: LD_ADDR_VAR 0 9
59020: PUSH
59021: LD_VAR 0 53
59025: PUSH
59026: LD_VAR 0 54
59030: PUSH
59031: LD_VAR 0 55
59035: PUSH
59036: LD_VAR 0 56
59040: PUSH
59041: LD_VAR 0 57
59045: PUSH
59046: LD_VAR 0 58
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: PUSH
59059: LD_VAR 0 4
59063: PUSH
59064: LD_INT 1
59066: PLUS
59067: ARRAY
59068: ST_TO_ADDR
59069: GO 59178
59071: LD_INT 31
59073: DOUBLE
59074: EQUAL
59075: IFTRUE 59121
59077: LD_INT 32
59079: DOUBLE
59080: EQUAL
59081: IFTRUE 59121
59083: LD_INT 33
59085: DOUBLE
59086: EQUAL
59087: IFTRUE 59121
59089: LD_INT 27
59091: DOUBLE
59092: EQUAL
59093: IFTRUE 59121
59095: LD_INT 26
59097: DOUBLE
59098: EQUAL
59099: IFTRUE 59121
59101: LD_INT 28
59103: DOUBLE
59104: EQUAL
59105: IFTRUE 59121
59107: LD_INT 29
59109: DOUBLE
59110: EQUAL
59111: IFTRUE 59121
59113: LD_INT 30
59115: DOUBLE
59116: EQUAL
59117: IFTRUE 59121
59119: GO 59177
59121: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59122: LD_ADDR_VAR 0 9
59126: PUSH
59127: LD_VAR 0 59
59131: PUSH
59132: LD_VAR 0 60
59136: PUSH
59137: LD_VAR 0 61
59141: PUSH
59142: LD_VAR 0 62
59146: PUSH
59147: LD_VAR 0 63
59151: PUSH
59152: LD_VAR 0 64
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: PUSH
59165: LD_VAR 0 4
59169: PUSH
59170: LD_INT 1
59172: PLUS
59173: ARRAY
59174: ST_TO_ADDR
59175: GO 59178
59177: POP
// temp_list2 = [ ] ;
59178: LD_ADDR_VAR 0 10
59182: PUSH
59183: EMPTY
59184: ST_TO_ADDR
// for i in temp_list do
59185: LD_ADDR_VAR 0 8
59189: PUSH
59190: LD_VAR 0 9
59194: PUSH
59195: FOR_IN
59196: IFFALSE 59248
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59198: LD_ADDR_VAR 0 10
59202: PUSH
59203: LD_VAR 0 10
59207: PUSH
59208: LD_VAR 0 8
59212: PUSH
59213: LD_INT 1
59215: ARRAY
59216: PUSH
59217: LD_VAR 0 2
59221: PLUS
59222: PUSH
59223: LD_VAR 0 8
59227: PUSH
59228: LD_INT 2
59230: ARRAY
59231: PUSH
59232: LD_VAR 0 3
59236: PLUS
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: ADD
59245: ST_TO_ADDR
59246: GO 59195
59248: POP
59249: POP
// result = temp_list2 ;
59250: LD_ADDR_VAR 0 7
59254: PUSH
59255: LD_VAR 0 10
59259: ST_TO_ADDR
// end ;
59260: LD_VAR 0 7
59264: RET
// export function EnemyInRange ( unit , dist ) ; begin
59265: LD_INT 0
59267: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59268: LD_ADDR_VAR 0 3
59272: PUSH
59273: LD_VAR 0 1
59277: PPUSH
59278: CALL_OW 255
59282: PPUSH
59283: LD_VAR 0 1
59287: PPUSH
59288: CALL_OW 250
59292: PPUSH
59293: LD_VAR 0 1
59297: PPUSH
59298: CALL_OW 251
59302: PPUSH
59303: LD_VAR 0 2
59307: PPUSH
59308: CALL 32638 0 4
59312: PUSH
59313: LD_INT 4
59315: ARRAY
59316: ST_TO_ADDR
// end ;
59317: LD_VAR 0 3
59321: RET
// export function PlayerSeeMe ( unit ) ; begin
59322: LD_INT 0
59324: PPUSH
// result := See ( your_side , unit ) ;
59325: LD_ADDR_VAR 0 2
59329: PUSH
59330: LD_OWVAR 2
59334: PPUSH
59335: LD_VAR 0 1
59339: PPUSH
59340: CALL_OW 292
59344: ST_TO_ADDR
// end ;
59345: LD_VAR 0 2
59349: RET
// export function ReverseDir ( unit ) ; begin
59350: LD_INT 0
59352: PPUSH
// if not unit then
59353: LD_VAR 0 1
59357: NOT
59358: IFFALSE 59362
// exit ;
59360: GO 59385
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59362: LD_ADDR_VAR 0 2
59366: PUSH
59367: LD_VAR 0 1
59371: PPUSH
59372: CALL_OW 254
59376: PUSH
59377: LD_INT 3
59379: PLUS
59380: PUSH
59381: LD_INT 6
59383: MOD
59384: ST_TO_ADDR
// end ;
59385: LD_VAR 0 2
59389: RET
// export function ReverseArray ( array ) ; var i ; begin
59390: LD_INT 0
59392: PPUSH
59393: PPUSH
// if not array then
59394: LD_VAR 0 1
59398: NOT
59399: IFFALSE 59403
// exit ;
59401: GO 59458
// result := [ ] ;
59403: LD_ADDR_VAR 0 2
59407: PUSH
59408: EMPTY
59409: ST_TO_ADDR
// for i := array downto 1 do
59410: LD_ADDR_VAR 0 3
59414: PUSH
59415: DOUBLE
59416: LD_VAR 0 1
59420: INC
59421: ST_TO_ADDR
59422: LD_INT 1
59424: PUSH
59425: FOR_DOWNTO
59426: IFFALSE 59456
// result := Join ( result , array [ i ] ) ;
59428: LD_ADDR_VAR 0 2
59432: PUSH
59433: LD_VAR 0 2
59437: PPUSH
59438: LD_VAR 0 1
59442: PUSH
59443: LD_VAR 0 3
59447: ARRAY
59448: PPUSH
59449: CALL 64103 0 2
59453: ST_TO_ADDR
59454: GO 59425
59456: POP
59457: POP
// end ;
59458: LD_VAR 0 2
59462: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59463: LD_INT 0
59465: PPUSH
59466: PPUSH
59467: PPUSH
59468: PPUSH
59469: PPUSH
59470: PPUSH
// if not unit or not hexes then
59471: LD_VAR 0 1
59475: NOT
59476: PUSH
59477: LD_VAR 0 2
59481: NOT
59482: OR
59483: IFFALSE 59487
// exit ;
59485: GO 59610
// dist := 9999 ;
59487: LD_ADDR_VAR 0 5
59491: PUSH
59492: LD_INT 9999
59494: ST_TO_ADDR
// for i = 1 to hexes do
59495: LD_ADDR_VAR 0 4
59499: PUSH
59500: DOUBLE
59501: LD_INT 1
59503: DEC
59504: ST_TO_ADDR
59505: LD_VAR 0 2
59509: PUSH
59510: FOR_TO
59511: IFFALSE 59598
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59513: LD_ADDR_VAR 0 6
59517: PUSH
59518: LD_VAR 0 1
59522: PPUSH
59523: LD_VAR 0 2
59527: PUSH
59528: LD_VAR 0 4
59532: ARRAY
59533: PUSH
59534: LD_INT 1
59536: ARRAY
59537: PPUSH
59538: LD_VAR 0 2
59542: PUSH
59543: LD_VAR 0 4
59547: ARRAY
59548: PUSH
59549: LD_INT 2
59551: ARRAY
59552: PPUSH
59553: CALL_OW 297
59557: ST_TO_ADDR
// if tdist < dist then
59558: LD_VAR 0 6
59562: PUSH
59563: LD_VAR 0 5
59567: LESS
59568: IFFALSE 59596
// begin hex := hexes [ i ] ;
59570: LD_ADDR_VAR 0 8
59574: PUSH
59575: LD_VAR 0 2
59579: PUSH
59580: LD_VAR 0 4
59584: ARRAY
59585: ST_TO_ADDR
// dist := tdist ;
59586: LD_ADDR_VAR 0 5
59590: PUSH
59591: LD_VAR 0 6
59595: ST_TO_ADDR
// end ; end ;
59596: GO 59510
59598: POP
59599: POP
// result := hex ;
59600: LD_ADDR_VAR 0 3
59604: PUSH
59605: LD_VAR 0 8
59609: ST_TO_ADDR
// end ;
59610: LD_VAR 0 3
59614: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59615: LD_INT 0
59617: PPUSH
59618: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59619: LD_VAR 0 1
59623: NOT
59624: PUSH
59625: LD_VAR 0 1
59629: PUSH
59630: LD_INT 21
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 23
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PPUSH
59654: CALL_OW 69
59658: IN
59659: NOT
59660: OR
59661: IFFALSE 59665
// exit ;
59663: GO 59712
// for i = 1 to 3 do
59665: LD_ADDR_VAR 0 3
59669: PUSH
59670: DOUBLE
59671: LD_INT 1
59673: DEC
59674: ST_TO_ADDR
59675: LD_INT 3
59677: PUSH
59678: FOR_TO
59679: IFFALSE 59710
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59681: LD_VAR 0 1
59685: PPUSH
59686: CALL_OW 250
59690: PPUSH
59691: LD_VAR 0 1
59695: PPUSH
59696: CALL_OW 251
59700: PPUSH
59701: LD_INT 1
59703: PPUSH
59704: CALL_OW 453
59708: GO 59678
59710: POP
59711: POP
// end ;
59712: LD_VAR 0 2
59716: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59717: LD_INT 0
59719: PPUSH
59720: PPUSH
59721: PPUSH
59722: PPUSH
59723: PPUSH
59724: PPUSH
// if not unit or not enemy_unit then
59725: LD_VAR 0 1
59729: NOT
59730: PUSH
59731: LD_VAR 0 2
59735: NOT
59736: OR
59737: IFFALSE 59741
// exit ;
59739: GO 60208
// if GetLives ( i ) < 250 then
59741: LD_VAR 0 4
59745: PPUSH
59746: CALL_OW 256
59750: PUSH
59751: LD_INT 250
59753: LESS
59754: IFFALSE 59767
// begin ComAutodestruct ( i ) ;
59756: LD_VAR 0 4
59760: PPUSH
59761: CALL 59615 0 1
// exit ;
59765: GO 60208
// end ; x := GetX ( enemy_unit ) ;
59767: LD_ADDR_VAR 0 7
59771: PUSH
59772: LD_VAR 0 2
59776: PPUSH
59777: CALL_OW 250
59781: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59782: LD_ADDR_VAR 0 8
59786: PUSH
59787: LD_VAR 0 2
59791: PPUSH
59792: CALL_OW 251
59796: ST_TO_ADDR
// if not x or not y then
59797: LD_VAR 0 7
59801: NOT
59802: PUSH
59803: LD_VAR 0 8
59807: NOT
59808: OR
59809: IFFALSE 59813
// exit ;
59811: GO 60208
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59813: LD_ADDR_VAR 0 6
59817: PUSH
59818: LD_VAR 0 7
59822: PPUSH
59823: LD_INT 0
59825: PPUSH
59826: LD_INT 4
59828: PPUSH
59829: CALL_OW 272
59833: PUSH
59834: LD_VAR 0 8
59838: PPUSH
59839: LD_INT 0
59841: PPUSH
59842: LD_INT 4
59844: PPUSH
59845: CALL_OW 273
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_VAR 0 7
59858: PPUSH
59859: LD_INT 1
59861: PPUSH
59862: LD_INT 4
59864: PPUSH
59865: CALL_OW 272
59869: PUSH
59870: LD_VAR 0 8
59874: PPUSH
59875: LD_INT 1
59877: PPUSH
59878: LD_INT 4
59880: PPUSH
59881: CALL_OW 273
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_VAR 0 7
59894: PPUSH
59895: LD_INT 2
59897: PPUSH
59898: LD_INT 4
59900: PPUSH
59901: CALL_OW 272
59905: PUSH
59906: LD_VAR 0 8
59910: PPUSH
59911: LD_INT 2
59913: PPUSH
59914: LD_INT 4
59916: PPUSH
59917: CALL_OW 273
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_VAR 0 7
59930: PPUSH
59931: LD_INT 3
59933: PPUSH
59934: LD_INT 4
59936: PPUSH
59937: CALL_OW 272
59941: PUSH
59942: LD_VAR 0 8
59946: PPUSH
59947: LD_INT 3
59949: PPUSH
59950: LD_INT 4
59952: PPUSH
59953: CALL_OW 273
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_VAR 0 7
59966: PPUSH
59967: LD_INT 4
59969: PPUSH
59970: LD_INT 4
59972: PPUSH
59973: CALL_OW 272
59977: PUSH
59978: LD_VAR 0 8
59982: PPUSH
59983: LD_INT 4
59985: PPUSH
59986: LD_INT 4
59988: PPUSH
59989: CALL_OW 273
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_VAR 0 7
60002: PPUSH
60003: LD_INT 5
60005: PPUSH
60006: LD_INT 4
60008: PPUSH
60009: CALL_OW 272
60013: PUSH
60014: LD_VAR 0 8
60018: PPUSH
60019: LD_INT 5
60021: PPUSH
60022: LD_INT 4
60024: PPUSH
60025: CALL_OW 273
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: ST_TO_ADDR
// for i = tmp downto 1 do
60042: LD_ADDR_VAR 0 4
60046: PUSH
60047: DOUBLE
60048: LD_VAR 0 6
60052: INC
60053: ST_TO_ADDR
60054: LD_INT 1
60056: PUSH
60057: FOR_DOWNTO
60058: IFFALSE 60159
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60060: LD_VAR 0 6
60064: PUSH
60065: LD_VAR 0 4
60069: ARRAY
60070: PUSH
60071: LD_INT 1
60073: ARRAY
60074: PPUSH
60075: LD_VAR 0 6
60079: PUSH
60080: LD_VAR 0 4
60084: ARRAY
60085: PUSH
60086: LD_INT 2
60088: ARRAY
60089: PPUSH
60090: CALL_OW 488
60094: NOT
60095: PUSH
60096: LD_VAR 0 6
60100: PUSH
60101: LD_VAR 0 4
60105: ARRAY
60106: PUSH
60107: LD_INT 1
60109: ARRAY
60110: PPUSH
60111: LD_VAR 0 6
60115: PUSH
60116: LD_VAR 0 4
60120: ARRAY
60121: PUSH
60122: LD_INT 2
60124: ARRAY
60125: PPUSH
60126: CALL_OW 428
60130: PUSH
60131: LD_INT 0
60133: NONEQUAL
60134: OR
60135: IFFALSE 60157
// tmp := Delete ( tmp , i ) ;
60137: LD_ADDR_VAR 0 6
60141: PUSH
60142: LD_VAR 0 6
60146: PPUSH
60147: LD_VAR 0 4
60151: PPUSH
60152: CALL_OW 3
60156: ST_TO_ADDR
60157: GO 60057
60159: POP
60160: POP
// j := GetClosestHex ( unit , tmp ) ;
60161: LD_ADDR_VAR 0 5
60165: PUSH
60166: LD_VAR 0 1
60170: PPUSH
60171: LD_VAR 0 6
60175: PPUSH
60176: CALL 59463 0 2
60180: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60181: LD_VAR 0 1
60185: PPUSH
60186: LD_VAR 0 5
60190: PUSH
60191: LD_INT 1
60193: ARRAY
60194: PPUSH
60195: LD_VAR 0 5
60199: PUSH
60200: LD_INT 2
60202: ARRAY
60203: PPUSH
60204: CALL_OW 111
// end ;
60208: LD_VAR 0 3
60212: RET
// export function PrepareApemanSoldier ( ) ; begin
60213: LD_INT 0
60215: PPUSH
// uc_nation := 0 ;
60216: LD_ADDR_OWVAR 21
60220: PUSH
60221: LD_INT 0
60223: ST_TO_ADDR
// hc_sex := sex_male ;
60224: LD_ADDR_OWVAR 27
60228: PUSH
60229: LD_INT 1
60231: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60232: LD_ADDR_OWVAR 28
60236: PUSH
60237: LD_INT 15
60239: ST_TO_ADDR
// hc_gallery :=  ;
60240: LD_ADDR_OWVAR 33
60244: PUSH
60245: LD_STRING 
60247: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60248: LD_ADDR_OWVAR 31
60252: PUSH
60253: LD_INT 0
60255: PPUSH
60256: LD_INT 3
60258: PPUSH
60259: CALL_OW 12
60263: PUSH
60264: LD_INT 0
60266: PPUSH
60267: LD_INT 3
60269: PPUSH
60270: CALL_OW 12
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: ST_TO_ADDR
// end ;
60287: LD_VAR 0 1
60291: RET
// export function PrepareApemanEngineer ( ) ; begin
60292: LD_INT 0
60294: PPUSH
// uc_nation := 0 ;
60295: LD_ADDR_OWVAR 21
60299: PUSH
60300: LD_INT 0
60302: ST_TO_ADDR
// hc_sex := sex_male ;
60303: LD_ADDR_OWVAR 27
60307: PUSH
60308: LD_INT 1
60310: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60311: LD_ADDR_OWVAR 28
60315: PUSH
60316: LD_INT 16
60318: ST_TO_ADDR
// hc_gallery :=  ;
60319: LD_ADDR_OWVAR 33
60323: PUSH
60324: LD_STRING 
60326: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60327: LD_ADDR_OWVAR 31
60331: PUSH
60332: LD_INT 0
60334: PPUSH
60335: LD_INT 3
60337: PPUSH
60338: CALL_OW 12
60342: PUSH
60343: LD_INT 0
60345: PPUSH
60346: LD_INT 3
60348: PPUSH
60349: CALL_OW 12
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: ST_TO_ADDR
// end ;
60366: LD_VAR 0 1
60370: RET
// export function PrepareApeman ( agressivity ) ; begin
60371: LD_INT 0
60373: PPUSH
// uc_side := 0 ;
60374: LD_ADDR_OWVAR 20
60378: PUSH
60379: LD_INT 0
60381: ST_TO_ADDR
// uc_nation := 0 ;
60382: LD_ADDR_OWVAR 21
60386: PUSH
60387: LD_INT 0
60389: ST_TO_ADDR
// hc_sex := sex_male ;
60390: LD_ADDR_OWVAR 27
60394: PUSH
60395: LD_INT 1
60397: ST_TO_ADDR
// hc_class := class_apeman ;
60398: LD_ADDR_OWVAR 28
60402: PUSH
60403: LD_INT 12
60405: ST_TO_ADDR
// hc_gallery :=  ;
60406: LD_ADDR_OWVAR 33
60410: PUSH
60411: LD_STRING 
60413: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60414: LD_ADDR_OWVAR 35
60418: PUSH
60419: LD_VAR 0 1
60423: NEG
60424: PPUSH
60425: LD_VAR 0 1
60429: PPUSH
60430: CALL_OW 12
60434: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60435: LD_ADDR_OWVAR 31
60439: PUSH
60440: LD_INT 0
60442: PPUSH
60443: LD_INT 3
60445: PPUSH
60446: CALL_OW 12
60450: PUSH
60451: LD_INT 0
60453: PPUSH
60454: LD_INT 3
60456: PPUSH
60457: CALL_OW 12
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// end ;
60474: LD_VAR 0 2
60478: RET
// export function PrepareTiger ( agressivity ) ; begin
60479: LD_INT 0
60481: PPUSH
// uc_side := 0 ;
60482: LD_ADDR_OWVAR 20
60486: PUSH
60487: LD_INT 0
60489: ST_TO_ADDR
// uc_nation := 0 ;
60490: LD_ADDR_OWVAR 21
60494: PUSH
60495: LD_INT 0
60497: ST_TO_ADDR
// hc_class := class_tiger ;
60498: LD_ADDR_OWVAR 28
60502: PUSH
60503: LD_INT 14
60505: ST_TO_ADDR
// hc_gallery :=  ;
60506: LD_ADDR_OWVAR 33
60510: PUSH
60511: LD_STRING 
60513: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60514: LD_ADDR_OWVAR 35
60518: PUSH
60519: LD_VAR 0 1
60523: NEG
60524: PPUSH
60525: LD_VAR 0 1
60529: PPUSH
60530: CALL_OW 12
60534: ST_TO_ADDR
// end ;
60535: LD_VAR 0 2
60539: RET
// export function PrepareEnchidna ( ) ; begin
60540: LD_INT 0
60542: PPUSH
// uc_side := 0 ;
60543: LD_ADDR_OWVAR 20
60547: PUSH
60548: LD_INT 0
60550: ST_TO_ADDR
// uc_nation := 0 ;
60551: LD_ADDR_OWVAR 21
60555: PUSH
60556: LD_INT 0
60558: ST_TO_ADDR
// hc_class := class_baggie ;
60559: LD_ADDR_OWVAR 28
60563: PUSH
60564: LD_INT 13
60566: ST_TO_ADDR
// hc_gallery :=  ;
60567: LD_ADDR_OWVAR 33
60571: PUSH
60572: LD_STRING 
60574: ST_TO_ADDR
// end ;
60575: LD_VAR 0 1
60579: RET
// export function PrepareFrog ( ) ; begin
60580: LD_INT 0
60582: PPUSH
// uc_side := 0 ;
60583: LD_ADDR_OWVAR 20
60587: PUSH
60588: LD_INT 0
60590: ST_TO_ADDR
// uc_nation := 0 ;
60591: LD_ADDR_OWVAR 21
60595: PUSH
60596: LD_INT 0
60598: ST_TO_ADDR
// hc_class := class_frog ;
60599: LD_ADDR_OWVAR 28
60603: PUSH
60604: LD_INT 19
60606: ST_TO_ADDR
// hc_gallery :=  ;
60607: LD_ADDR_OWVAR 33
60611: PUSH
60612: LD_STRING 
60614: ST_TO_ADDR
// end ;
60615: LD_VAR 0 1
60619: RET
// export function PrepareFish ( ) ; begin
60620: LD_INT 0
60622: PPUSH
// uc_side := 0 ;
60623: LD_ADDR_OWVAR 20
60627: PUSH
60628: LD_INT 0
60630: ST_TO_ADDR
// uc_nation := 0 ;
60631: LD_ADDR_OWVAR 21
60635: PUSH
60636: LD_INT 0
60638: ST_TO_ADDR
// hc_class := class_fish ;
60639: LD_ADDR_OWVAR 28
60643: PUSH
60644: LD_INT 20
60646: ST_TO_ADDR
// hc_gallery :=  ;
60647: LD_ADDR_OWVAR 33
60651: PUSH
60652: LD_STRING 
60654: ST_TO_ADDR
// end ;
60655: LD_VAR 0 1
60659: RET
// export function PrepareBird ( ) ; begin
60660: LD_INT 0
60662: PPUSH
// uc_side := 0 ;
60663: LD_ADDR_OWVAR 20
60667: PUSH
60668: LD_INT 0
60670: ST_TO_ADDR
// uc_nation := 0 ;
60671: LD_ADDR_OWVAR 21
60675: PUSH
60676: LD_INT 0
60678: ST_TO_ADDR
// hc_class := class_phororhacos ;
60679: LD_ADDR_OWVAR 28
60683: PUSH
60684: LD_INT 18
60686: ST_TO_ADDR
// hc_gallery :=  ;
60687: LD_ADDR_OWVAR 33
60691: PUSH
60692: LD_STRING 
60694: ST_TO_ADDR
// end ;
60695: LD_VAR 0 1
60699: RET
// export function PrepareHorse ( ) ; begin
60700: LD_INT 0
60702: PPUSH
// uc_side := 0 ;
60703: LD_ADDR_OWVAR 20
60707: PUSH
60708: LD_INT 0
60710: ST_TO_ADDR
// uc_nation := 0 ;
60711: LD_ADDR_OWVAR 21
60715: PUSH
60716: LD_INT 0
60718: ST_TO_ADDR
// hc_class := class_horse ;
60719: LD_ADDR_OWVAR 28
60723: PUSH
60724: LD_INT 21
60726: ST_TO_ADDR
// hc_gallery :=  ;
60727: LD_ADDR_OWVAR 33
60731: PUSH
60732: LD_STRING 
60734: ST_TO_ADDR
// end ;
60735: LD_VAR 0 1
60739: RET
// export function PrepareMastodont ( ) ; begin
60740: LD_INT 0
60742: PPUSH
// uc_side := 0 ;
60743: LD_ADDR_OWVAR 20
60747: PUSH
60748: LD_INT 0
60750: ST_TO_ADDR
// uc_nation := 0 ;
60751: LD_ADDR_OWVAR 21
60755: PUSH
60756: LD_INT 0
60758: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60759: LD_ADDR_OWVAR 37
60763: PUSH
60764: LD_INT 31
60766: ST_TO_ADDR
// vc_control := control_rider ;
60767: LD_ADDR_OWVAR 38
60771: PUSH
60772: LD_INT 4
60774: ST_TO_ADDR
// end ;
60775: LD_VAR 0 1
60779: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60780: LD_INT 0
60782: PPUSH
60783: PPUSH
60784: PPUSH
// uc_side = 0 ;
60785: LD_ADDR_OWVAR 20
60789: PUSH
60790: LD_INT 0
60792: ST_TO_ADDR
// uc_nation = 0 ;
60793: LD_ADDR_OWVAR 21
60797: PUSH
60798: LD_INT 0
60800: ST_TO_ADDR
// InitHc_All ( ) ;
60801: CALL_OW 584
// InitVc ;
60805: CALL_OW 20
// if mastodonts then
60809: LD_VAR 0 6
60813: IFFALSE 60880
// for i = 1 to mastodonts do
60815: LD_ADDR_VAR 0 11
60819: PUSH
60820: DOUBLE
60821: LD_INT 1
60823: DEC
60824: ST_TO_ADDR
60825: LD_VAR 0 6
60829: PUSH
60830: FOR_TO
60831: IFFALSE 60878
// begin vc_chassis := 31 ;
60833: LD_ADDR_OWVAR 37
60837: PUSH
60838: LD_INT 31
60840: ST_TO_ADDR
// vc_control := control_rider ;
60841: LD_ADDR_OWVAR 38
60845: PUSH
60846: LD_INT 4
60848: ST_TO_ADDR
// animal := CreateVehicle ;
60849: LD_ADDR_VAR 0 12
60853: PUSH
60854: CALL_OW 45
60858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60859: LD_VAR 0 12
60863: PPUSH
60864: LD_VAR 0 8
60868: PPUSH
60869: LD_INT 0
60871: PPUSH
60872: CALL 63008 0 3
// end ;
60876: GO 60830
60878: POP
60879: POP
// if horses then
60880: LD_VAR 0 5
60884: IFFALSE 60951
// for i = 1 to horses do
60886: LD_ADDR_VAR 0 11
60890: PUSH
60891: DOUBLE
60892: LD_INT 1
60894: DEC
60895: ST_TO_ADDR
60896: LD_VAR 0 5
60900: PUSH
60901: FOR_TO
60902: IFFALSE 60949
// begin hc_class := 21 ;
60904: LD_ADDR_OWVAR 28
60908: PUSH
60909: LD_INT 21
60911: ST_TO_ADDR
// hc_gallery :=  ;
60912: LD_ADDR_OWVAR 33
60916: PUSH
60917: LD_STRING 
60919: ST_TO_ADDR
// animal := CreateHuman ;
60920: LD_ADDR_VAR 0 12
60924: PUSH
60925: CALL_OW 44
60929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60930: LD_VAR 0 12
60934: PPUSH
60935: LD_VAR 0 8
60939: PPUSH
60940: LD_INT 0
60942: PPUSH
60943: CALL 63008 0 3
// end ;
60947: GO 60901
60949: POP
60950: POP
// if birds then
60951: LD_VAR 0 1
60955: IFFALSE 61022
// for i = 1 to birds do
60957: LD_ADDR_VAR 0 11
60961: PUSH
60962: DOUBLE
60963: LD_INT 1
60965: DEC
60966: ST_TO_ADDR
60967: LD_VAR 0 1
60971: PUSH
60972: FOR_TO
60973: IFFALSE 61020
// begin hc_class := 18 ;
60975: LD_ADDR_OWVAR 28
60979: PUSH
60980: LD_INT 18
60982: ST_TO_ADDR
// hc_gallery =  ;
60983: LD_ADDR_OWVAR 33
60987: PUSH
60988: LD_STRING 
60990: ST_TO_ADDR
// animal := CreateHuman ;
60991: LD_ADDR_VAR 0 12
60995: PUSH
60996: CALL_OW 44
61000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61001: LD_VAR 0 12
61005: PPUSH
61006: LD_VAR 0 8
61010: PPUSH
61011: LD_INT 0
61013: PPUSH
61014: CALL 63008 0 3
// end ;
61018: GO 60972
61020: POP
61021: POP
// if tigers then
61022: LD_VAR 0 2
61026: IFFALSE 61110
// for i = 1 to tigers do
61028: LD_ADDR_VAR 0 11
61032: PUSH
61033: DOUBLE
61034: LD_INT 1
61036: DEC
61037: ST_TO_ADDR
61038: LD_VAR 0 2
61042: PUSH
61043: FOR_TO
61044: IFFALSE 61108
// begin hc_class = class_tiger ;
61046: LD_ADDR_OWVAR 28
61050: PUSH
61051: LD_INT 14
61053: ST_TO_ADDR
// hc_gallery =  ;
61054: LD_ADDR_OWVAR 33
61058: PUSH
61059: LD_STRING 
61061: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61062: LD_ADDR_OWVAR 35
61066: PUSH
61067: LD_INT 7
61069: NEG
61070: PPUSH
61071: LD_INT 7
61073: PPUSH
61074: CALL_OW 12
61078: ST_TO_ADDR
// animal := CreateHuman ;
61079: LD_ADDR_VAR 0 12
61083: PUSH
61084: CALL_OW 44
61088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61089: LD_VAR 0 12
61093: PPUSH
61094: LD_VAR 0 8
61098: PPUSH
61099: LD_INT 0
61101: PPUSH
61102: CALL 63008 0 3
// end ;
61106: GO 61043
61108: POP
61109: POP
// if apemans then
61110: LD_VAR 0 3
61114: IFFALSE 61237
// for i = 1 to apemans do
61116: LD_ADDR_VAR 0 11
61120: PUSH
61121: DOUBLE
61122: LD_INT 1
61124: DEC
61125: ST_TO_ADDR
61126: LD_VAR 0 3
61130: PUSH
61131: FOR_TO
61132: IFFALSE 61235
// begin hc_class = class_apeman ;
61134: LD_ADDR_OWVAR 28
61138: PUSH
61139: LD_INT 12
61141: ST_TO_ADDR
// hc_gallery =  ;
61142: LD_ADDR_OWVAR 33
61146: PUSH
61147: LD_STRING 
61149: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61150: LD_ADDR_OWVAR 35
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PPUSH
61159: LD_INT 2
61161: PPUSH
61162: CALL_OW 12
61166: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61167: LD_ADDR_OWVAR 31
61171: PUSH
61172: LD_INT 1
61174: PPUSH
61175: LD_INT 3
61177: PPUSH
61178: CALL_OW 12
61182: PUSH
61183: LD_INT 1
61185: PPUSH
61186: LD_INT 3
61188: PPUSH
61189: CALL_OW 12
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// animal := CreateHuman ;
61206: LD_ADDR_VAR 0 12
61210: PUSH
61211: CALL_OW 44
61215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61216: LD_VAR 0 12
61220: PPUSH
61221: LD_VAR 0 8
61225: PPUSH
61226: LD_INT 0
61228: PPUSH
61229: CALL 63008 0 3
// end ;
61233: GO 61131
61235: POP
61236: POP
// if enchidnas then
61237: LD_VAR 0 4
61241: IFFALSE 61308
// for i = 1 to enchidnas do
61243: LD_ADDR_VAR 0 11
61247: PUSH
61248: DOUBLE
61249: LD_INT 1
61251: DEC
61252: ST_TO_ADDR
61253: LD_VAR 0 4
61257: PUSH
61258: FOR_TO
61259: IFFALSE 61306
// begin hc_class = 13 ;
61261: LD_ADDR_OWVAR 28
61265: PUSH
61266: LD_INT 13
61268: ST_TO_ADDR
// hc_gallery =  ;
61269: LD_ADDR_OWVAR 33
61273: PUSH
61274: LD_STRING 
61276: ST_TO_ADDR
// animal := CreateHuman ;
61277: LD_ADDR_VAR 0 12
61281: PUSH
61282: CALL_OW 44
61286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61287: LD_VAR 0 12
61291: PPUSH
61292: LD_VAR 0 8
61296: PPUSH
61297: LD_INT 0
61299: PPUSH
61300: CALL 63008 0 3
// end ;
61304: GO 61258
61306: POP
61307: POP
// if fishes then
61308: LD_VAR 0 7
61312: IFFALSE 61379
// for i = 1 to fishes do
61314: LD_ADDR_VAR 0 11
61318: PUSH
61319: DOUBLE
61320: LD_INT 1
61322: DEC
61323: ST_TO_ADDR
61324: LD_VAR 0 7
61328: PUSH
61329: FOR_TO
61330: IFFALSE 61377
// begin hc_class = 20 ;
61332: LD_ADDR_OWVAR 28
61336: PUSH
61337: LD_INT 20
61339: ST_TO_ADDR
// hc_gallery =  ;
61340: LD_ADDR_OWVAR 33
61344: PUSH
61345: LD_STRING 
61347: ST_TO_ADDR
// animal := CreateHuman ;
61348: LD_ADDR_VAR 0 12
61352: PUSH
61353: CALL_OW 44
61357: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61358: LD_VAR 0 12
61362: PPUSH
61363: LD_VAR 0 9
61367: PPUSH
61368: LD_INT 0
61370: PPUSH
61371: CALL 63008 0 3
// end ;
61375: GO 61329
61377: POP
61378: POP
// end ;
61379: LD_VAR 0 10
61383: RET
// export function WantHeal ( sci , unit ) ; begin
61384: LD_INT 0
61386: PPUSH
// if GetTaskList ( sci ) > 0 then
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 437
61396: PUSH
61397: LD_INT 0
61399: GREATER
61400: IFFALSE 61470
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61402: LD_VAR 0 1
61406: PPUSH
61407: CALL_OW 437
61411: PUSH
61412: LD_INT 1
61414: ARRAY
61415: PUSH
61416: LD_INT 1
61418: ARRAY
61419: PUSH
61420: LD_STRING l
61422: EQUAL
61423: PUSH
61424: LD_VAR 0 1
61428: PPUSH
61429: CALL_OW 437
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: PUSH
61438: LD_INT 4
61440: ARRAY
61441: PUSH
61442: LD_VAR 0 2
61446: EQUAL
61447: AND
61448: IFFALSE 61460
// result := true else
61450: LD_ADDR_VAR 0 3
61454: PUSH
61455: LD_INT 1
61457: ST_TO_ADDR
61458: GO 61468
// result := false ;
61460: LD_ADDR_VAR 0 3
61464: PUSH
61465: LD_INT 0
61467: ST_TO_ADDR
// end else
61468: GO 61478
// result := false ;
61470: LD_ADDR_VAR 0 3
61474: PUSH
61475: LD_INT 0
61477: ST_TO_ADDR
// end ;
61478: LD_VAR 0 3
61482: RET
// export function HealTarget ( sci ) ; begin
61483: LD_INT 0
61485: PPUSH
// if not sci then
61486: LD_VAR 0 1
61490: NOT
61491: IFFALSE 61495
// exit ;
61493: GO 61560
// result := 0 ;
61495: LD_ADDR_VAR 0 2
61499: PUSH
61500: LD_INT 0
61502: ST_TO_ADDR
// if GetTaskList ( sci ) then
61503: LD_VAR 0 1
61507: PPUSH
61508: CALL_OW 437
61512: IFFALSE 61560
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 437
61523: PUSH
61524: LD_INT 1
61526: ARRAY
61527: PUSH
61528: LD_INT 1
61530: ARRAY
61531: PUSH
61532: LD_STRING l
61534: EQUAL
61535: IFFALSE 61560
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61537: LD_ADDR_VAR 0 2
61541: PUSH
61542: LD_VAR 0 1
61546: PPUSH
61547: CALL_OW 437
61551: PUSH
61552: LD_INT 1
61554: ARRAY
61555: PUSH
61556: LD_INT 4
61558: ARRAY
61559: ST_TO_ADDR
// end ;
61560: LD_VAR 0 2
61564: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61565: LD_INT 0
61567: PPUSH
61568: PPUSH
61569: PPUSH
61570: PPUSH
// if not base_units then
61571: LD_VAR 0 1
61575: NOT
61576: IFFALSE 61580
// exit ;
61578: GO 61667
// result := false ;
61580: LD_ADDR_VAR 0 2
61584: PUSH
61585: LD_INT 0
61587: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61588: LD_ADDR_VAR 0 5
61592: PUSH
61593: LD_VAR 0 1
61597: PPUSH
61598: LD_INT 21
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PPUSH
61608: CALL_OW 72
61612: ST_TO_ADDR
// if not tmp then
61613: LD_VAR 0 5
61617: NOT
61618: IFFALSE 61622
// exit ;
61620: GO 61667
// for i in tmp do
61622: LD_ADDR_VAR 0 3
61626: PUSH
61627: LD_VAR 0 5
61631: PUSH
61632: FOR_IN
61633: IFFALSE 61665
// begin result := EnemyInRange ( i , 22 ) ;
61635: LD_ADDR_VAR 0 2
61639: PUSH
61640: LD_VAR 0 3
61644: PPUSH
61645: LD_INT 22
61647: PPUSH
61648: CALL 59265 0 2
61652: ST_TO_ADDR
// if result then
61653: LD_VAR 0 2
61657: IFFALSE 61663
// exit ;
61659: POP
61660: POP
61661: GO 61667
// end ;
61663: GO 61632
61665: POP
61666: POP
// end ;
61667: LD_VAR 0 2
61671: RET
// export function FilterByTag ( units , tag ) ; begin
61672: LD_INT 0
61674: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61675: LD_ADDR_VAR 0 3
61679: PUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: LD_INT 120
61687: PUSH
61688: LD_VAR 0 2
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PPUSH
61697: CALL_OW 72
61701: ST_TO_ADDR
// end ;
61702: LD_VAR 0 3
61706: RET
// export function IsDriver ( un ) ; begin
61707: LD_INT 0
61709: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61710: LD_ADDR_VAR 0 2
61714: PUSH
61715: LD_VAR 0 1
61719: PUSH
61720: LD_INT 55
61722: PUSH
61723: EMPTY
61724: LIST
61725: PPUSH
61726: CALL_OW 69
61730: IN
61731: ST_TO_ADDR
// end ;
61732: LD_VAR 0 2
61736: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61737: LD_INT 0
61739: PPUSH
61740: PPUSH
// list := [ ] ;
61741: LD_ADDR_VAR 0 5
61745: PUSH
61746: EMPTY
61747: ST_TO_ADDR
// case d of 0 :
61748: LD_VAR 0 3
61752: PUSH
61753: LD_INT 0
61755: DOUBLE
61756: EQUAL
61757: IFTRUE 61761
61759: GO 61894
61761: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61762: LD_ADDR_VAR 0 5
61766: PUSH
61767: LD_VAR 0 1
61771: PUSH
61772: LD_INT 4
61774: MINUS
61775: PUSH
61776: LD_VAR 0 2
61780: PUSH
61781: LD_INT 4
61783: MINUS
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: PUSH
61793: LD_VAR 0 1
61797: PUSH
61798: LD_INT 3
61800: MINUS
61801: PUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: PUSH
61815: LD_VAR 0 1
61819: PUSH
61820: LD_INT 4
61822: PLUS
61823: PUSH
61824: LD_VAR 0 2
61828: PUSH
61829: LD_INT 4
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: PUSH
61837: LD_VAR 0 1
61841: PUSH
61842: LD_INT 3
61844: PLUS
61845: PUSH
61846: LD_VAR 0 2
61850: PUSH
61851: LD_INT 3
61853: PLUS
61854: PUSH
61855: LD_INT 5
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: PUSH
61863: LD_VAR 0 1
61867: PUSH
61868: LD_VAR 0 2
61872: PUSH
61873: LD_INT 4
61875: PLUS
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: ST_TO_ADDR
// end ; 1 :
61892: GO 62592
61894: LD_INT 1
61896: DOUBLE
61897: EQUAL
61898: IFTRUE 61902
61900: GO 62035
61902: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61903: LD_ADDR_VAR 0 5
61907: PUSH
61908: LD_VAR 0 1
61912: PUSH
61913: LD_VAR 0 2
61917: PUSH
61918: LD_INT 4
61920: MINUS
61921: PUSH
61922: LD_INT 3
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: PUSH
61930: LD_VAR 0 1
61934: PUSH
61935: LD_INT 3
61937: MINUS
61938: PUSH
61939: LD_VAR 0 2
61943: PUSH
61944: LD_INT 3
61946: MINUS
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: PUSH
61956: LD_VAR 0 1
61960: PUSH
61961: LD_INT 4
61963: MINUS
61964: PUSH
61965: LD_VAR 0 2
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: LIST
61977: PUSH
61978: LD_VAR 0 1
61982: PUSH
61983: LD_VAR 0 2
61987: PUSH
61988: LD_INT 3
61990: PLUS
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: LIST
61999: PUSH
62000: LD_VAR 0 1
62004: PUSH
62005: LD_INT 4
62007: PLUS
62008: PUSH
62009: LD_VAR 0 2
62013: PUSH
62014: LD_INT 4
62016: PLUS
62017: PUSH
62018: LD_INT 5
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// end ; 2 :
62033: GO 62592
62035: LD_INT 2
62037: DOUBLE
62038: EQUAL
62039: IFTRUE 62043
62041: GO 62172
62043: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62044: LD_ADDR_VAR 0 5
62048: PUSH
62049: LD_VAR 0 1
62053: PUSH
62054: LD_VAR 0 2
62058: PUSH
62059: LD_INT 3
62061: MINUS
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: PUSH
62071: LD_VAR 0 1
62075: PUSH
62076: LD_INT 4
62078: PLUS
62079: PUSH
62080: LD_VAR 0 2
62084: PUSH
62085: LD_INT 4
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: PUSH
62093: LD_VAR 0 1
62097: PUSH
62098: LD_VAR 0 2
62102: PUSH
62103: LD_INT 4
62105: PLUS
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: PUSH
62115: LD_VAR 0 1
62119: PUSH
62120: LD_INT 3
62122: MINUS
62123: PUSH
62124: LD_VAR 0 2
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: PUSH
62137: LD_VAR 0 1
62141: PUSH
62142: LD_INT 4
62144: MINUS
62145: PUSH
62146: LD_VAR 0 2
62150: PUSH
62151: LD_INT 4
62153: MINUS
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: LIST
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: ST_TO_ADDR
// end ; 3 :
62170: GO 62592
62172: LD_INT 3
62174: DOUBLE
62175: EQUAL
62176: IFTRUE 62180
62178: GO 62313
62180: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62181: LD_ADDR_VAR 0 5
62185: PUSH
62186: LD_VAR 0 1
62190: PUSH
62191: LD_INT 3
62193: PLUS
62194: PUSH
62195: LD_VAR 0 2
62199: PUSH
62200: LD_INT 4
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: PUSH
62208: LD_VAR 0 1
62212: PUSH
62213: LD_INT 4
62215: PLUS
62216: PUSH
62217: LD_VAR 0 2
62221: PUSH
62222: LD_INT 4
62224: PLUS
62225: PUSH
62226: LD_INT 5
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: PUSH
62234: LD_VAR 0 1
62238: PUSH
62239: LD_INT 4
62241: MINUS
62242: PUSH
62243: LD_VAR 0 2
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: PUSH
62256: LD_VAR 0 1
62260: PUSH
62261: LD_VAR 0 2
62265: PUSH
62266: LD_INT 4
62268: MINUS
62269: PUSH
62270: LD_INT 3
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: PUSH
62278: LD_VAR 0 1
62282: PUSH
62283: LD_INT 3
62285: MINUS
62286: PUSH
62287: LD_VAR 0 2
62291: PUSH
62292: LD_INT 3
62294: MINUS
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: ST_TO_ADDR
// end ; 4 :
62311: GO 62592
62313: LD_INT 4
62315: DOUBLE
62316: EQUAL
62317: IFTRUE 62321
62319: GO 62454
62321: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62322: LD_ADDR_VAR 0 5
62326: PUSH
62327: LD_VAR 0 1
62331: PUSH
62332: LD_VAR 0 2
62336: PUSH
62337: LD_INT 4
62339: PLUS
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: PUSH
62349: LD_VAR 0 1
62353: PUSH
62354: LD_INT 3
62356: PLUS
62357: PUSH
62358: LD_VAR 0 2
62362: PUSH
62363: LD_INT 3
62365: PLUS
62366: PUSH
62367: LD_INT 5
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: PUSH
62375: LD_VAR 0 1
62379: PUSH
62380: LD_INT 4
62382: PLUS
62383: PUSH
62384: LD_VAR 0 2
62388: PUSH
62389: LD_INT 4
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: PUSH
62397: LD_VAR 0 1
62401: PUSH
62402: LD_VAR 0 2
62406: PUSH
62407: LD_INT 3
62409: MINUS
62410: PUSH
62411: LD_INT 3
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: PUSH
62419: LD_VAR 0 1
62423: PUSH
62424: LD_INT 4
62426: MINUS
62427: PUSH
62428: LD_VAR 0 2
62432: PUSH
62433: LD_INT 4
62435: MINUS
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: ST_TO_ADDR
// end ; 5 :
62452: GO 62592
62454: LD_INT 5
62456: DOUBLE
62457: EQUAL
62458: IFTRUE 62462
62460: GO 62591
62462: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62463: LD_ADDR_VAR 0 5
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_INT 4
62475: MINUS
62476: PUSH
62477: LD_VAR 0 2
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: PUSH
62490: LD_VAR 0 1
62494: PUSH
62495: LD_VAR 0 2
62499: PUSH
62500: LD_INT 4
62502: MINUS
62503: PUSH
62504: LD_INT 3
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: LIST
62511: PUSH
62512: LD_VAR 0 1
62516: PUSH
62517: LD_INT 4
62519: PLUS
62520: PUSH
62521: LD_VAR 0 2
62525: PUSH
62526: LD_INT 4
62528: PLUS
62529: PUSH
62530: LD_INT 5
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: PUSH
62538: LD_VAR 0 1
62542: PUSH
62543: LD_INT 3
62545: PLUS
62546: PUSH
62547: LD_VAR 0 2
62551: PUSH
62552: LD_INT 4
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: PUSH
62560: LD_VAR 0 1
62564: PUSH
62565: LD_VAR 0 2
62569: PUSH
62570: LD_INT 3
62572: PLUS
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: ST_TO_ADDR
// end ; end ;
62589: GO 62592
62591: POP
// result := list ;
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: LD_VAR 0 5
62601: ST_TO_ADDR
// end ;
62602: LD_VAR 0 4
62606: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62607: LD_INT 0
62609: PPUSH
62610: PPUSH
62611: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62612: LD_VAR 0 1
62616: NOT
62617: PUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: LD_INT 3
62631: PUSH
62632: LD_INT 4
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: IN
62641: NOT
62642: OR
62643: IFFALSE 62647
// exit ;
62645: GO 62730
// tmp := [ ] ;
62647: LD_ADDR_VAR 0 5
62651: PUSH
62652: EMPTY
62653: ST_TO_ADDR
// for i in units do
62654: LD_ADDR_VAR 0 4
62658: PUSH
62659: LD_VAR 0 1
62663: PUSH
62664: FOR_IN
62665: IFFALSE 62699
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62667: LD_ADDR_VAR 0 5
62671: PUSH
62672: LD_VAR 0 5
62676: PPUSH
62677: LD_VAR 0 4
62681: PPUSH
62682: LD_VAR 0 2
62686: PPUSH
62687: CALL_OW 259
62691: PPUSH
62692: CALL 64103 0 2
62696: ST_TO_ADDR
62697: GO 62664
62699: POP
62700: POP
// if not tmp then
62701: LD_VAR 0 5
62705: NOT
62706: IFFALSE 62710
// exit ;
62708: GO 62730
// result := SortListByListDesc ( units , tmp ) ;
62710: LD_ADDR_VAR 0 3
62714: PUSH
62715: LD_VAR 0 1
62719: PPUSH
62720: LD_VAR 0 5
62724: PPUSH
62725: CALL_OW 77
62729: ST_TO_ADDR
// end ;
62730: LD_VAR 0 3
62734: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62735: LD_INT 0
62737: PPUSH
62738: PPUSH
62739: PPUSH
// result := false ;
62740: LD_ADDR_VAR 0 3
62744: PUSH
62745: LD_INT 0
62747: ST_TO_ADDR
// if not building then
62748: LD_VAR 0 2
62752: NOT
62753: IFFALSE 62757
// exit ;
62755: GO 62895
// x := GetX ( building ) ;
62757: LD_ADDR_VAR 0 4
62761: PUSH
62762: LD_VAR 0 2
62766: PPUSH
62767: CALL_OW 250
62771: ST_TO_ADDR
// y := GetY ( building ) ;
62772: LD_ADDR_VAR 0 5
62776: PUSH
62777: LD_VAR 0 2
62781: PPUSH
62782: CALL_OW 251
62786: ST_TO_ADDR
// if not x or not y then
62787: LD_VAR 0 4
62791: NOT
62792: PUSH
62793: LD_VAR 0 5
62797: NOT
62798: OR
62799: IFFALSE 62803
// exit ;
62801: GO 62895
// if GetTaskList ( unit ) then
62803: LD_VAR 0 1
62807: PPUSH
62808: CALL_OW 437
62812: IFFALSE 62895
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62814: LD_STRING e
62816: PUSH
62817: LD_VAR 0 1
62821: PPUSH
62822: CALL_OW 437
62826: PUSH
62827: LD_INT 1
62829: ARRAY
62830: PUSH
62831: LD_INT 1
62833: ARRAY
62834: EQUAL
62835: PUSH
62836: LD_VAR 0 4
62840: PUSH
62841: LD_VAR 0 1
62845: PPUSH
62846: CALL_OW 437
62850: PUSH
62851: LD_INT 1
62853: ARRAY
62854: PUSH
62855: LD_INT 2
62857: ARRAY
62858: EQUAL
62859: AND
62860: PUSH
62861: LD_VAR 0 5
62865: PUSH
62866: LD_VAR 0 1
62870: PPUSH
62871: CALL_OW 437
62875: PUSH
62876: LD_INT 1
62878: ARRAY
62879: PUSH
62880: LD_INT 3
62882: ARRAY
62883: EQUAL
62884: AND
62885: IFFALSE 62895
// result := true end ;
62887: LD_ADDR_VAR 0 3
62891: PUSH
62892: LD_INT 1
62894: ST_TO_ADDR
// end ;
62895: LD_VAR 0 3
62899: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62900: LD_INT 0
62902: PPUSH
// result := false ;
62903: LD_ADDR_VAR 0 4
62907: PUSH
62908: LD_INT 0
62910: ST_TO_ADDR
// if GetTaskList ( unit ) then
62911: LD_VAR 0 1
62915: PPUSH
62916: CALL_OW 437
62920: IFFALSE 63003
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62922: LD_STRING M
62924: PUSH
62925: LD_VAR 0 1
62929: PPUSH
62930: CALL_OW 437
62934: PUSH
62935: LD_INT 1
62937: ARRAY
62938: PUSH
62939: LD_INT 1
62941: ARRAY
62942: EQUAL
62943: PUSH
62944: LD_VAR 0 2
62948: PUSH
62949: LD_VAR 0 1
62953: PPUSH
62954: CALL_OW 437
62958: PUSH
62959: LD_INT 1
62961: ARRAY
62962: PUSH
62963: LD_INT 2
62965: ARRAY
62966: EQUAL
62967: AND
62968: PUSH
62969: LD_VAR 0 3
62973: PUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: CALL_OW 437
62983: PUSH
62984: LD_INT 1
62986: ARRAY
62987: PUSH
62988: LD_INT 3
62990: ARRAY
62991: EQUAL
62992: AND
62993: IFFALSE 63003
// result := true ;
62995: LD_ADDR_VAR 0 4
62999: PUSH
63000: LD_INT 1
63002: ST_TO_ADDR
// end ; end ;
63003: LD_VAR 0 4
63007: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63008: LD_INT 0
63010: PPUSH
63011: PPUSH
63012: PPUSH
63013: PPUSH
// if not unit or not area then
63014: LD_VAR 0 1
63018: NOT
63019: PUSH
63020: LD_VAR 0 2
63024: NOT
63025: OR
63026: IFFALSE 63030
// exit ;
63028: GO 63206
// tmp := AreaToList ( area , i ) ;
63030: LD_ADDR_VAR 0 6
63034: PUSH
63035: LD_VAR 0 2
63039: PPUSH
63040: LD_VAR 0 5
63044: PPUSH
63045: CALL_OW 517
63049: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63050: LD_ADDR_VAR 0 5
63054: PUSH
63055: DOUBLE
63056: LD_INT 1
63058: DEC
63059: ST_TO_ADDR
63060: LD_VAR 0 6
63064: PUSH
63065: LD_INT 1
63067: ARRAY
63068: PUSH
63069: FOR_TO
63070: IFFALSE 63204
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63072: LD_ADDR_VAR 0 7
63076: PUSH
63077: LD_VAR 0 6
63081: PUSH
63082: LD_INT 1
63084: ARRAY
63085: PUSH
63086: LD_VAR 0 5
63090: ARRAY
63091: PUSH
63092: LD_VAR 0 6
63096: PUSH
63097: LD_INT 2
63099: ARRAY
63100: PUSH
63101: LD_VAR 0 5
63105: ARRAY
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63111: LD_INT 92
63113: PUSH
63114: LD_VAR 0 7
63118: PUSH
63119: LD_INT 1
63121: ARRAY
63122: PUSH
63123: LD_VAR 0 7
63127: PUSH
63128: LD_INT 2
63130: ARRAY
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: PPUSH
63141: CALL_OW 69
63145: PUSH
63146: LD_INT 0
63148: EQUAL
63149: IFFALSE 63202
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63151: LD_VAR 0 1
63155: PPUSH
63156: LD_VAR 0 7
63160: PUSH
63161: LD_INT 1
63163: ARRAY
63164: PPUSH
63165: LD_VAR 0 7
63169: PUSH
63170: LD_INT 2
63172: ARRAY
63173: PPUSH
63174: LD_VAR 0 3
63178: PPUSH
63179: CALL_OW 48
// result := IsPlaced ( unit ) ;
63183: LD_ADDR_VAR 0 4
63187: PUSH
63188: LD_VAR 0 1
63192: PPUSH
63193: CALL_OW 305
63197: ST_TO_ADDR
// exit ;
63198: POP
63199: POP
63200: GO 63206
// end ; end ;
63202: GO 63069
63204: POP
63205: POP
// end ;
63206: LD_VAR 0 4
63210: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63211: LD_INT 0
63213: PPUSH
63214: PPUSH
63215: PPUSH
// if not side or side > 8 then
63216: LD_VAR 0 1
63220: NOT
63221: PUSH
63222: LD_VAR 0 1
63226: PUSH
63227: LD_INT 8
63229: GREATER
63230: OR
63231: IFFALSE 63235
// exit ;
63233: GO 63422
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63235: LD_ADDR_VAR 0 4
63239: PUSH
63240: LD_INT 22
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 21
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PPUSH
63266: CALL_OW 69
63270: ST_TO_ADDR
// if not tmp then
63271: LD_VAR 0 4
63275: NOT
63276: IFFALSE 63280
// exit ;
63278: GO 63422
// enable_addtolog := true ;
63280: LD_ADDR_OWVAR 81
63284: PUSH
63285: LD_INT 1
63287: ST_TO_ADDR
// AddToLog ( [ ) ;
63288: LD_STRING [
63290: PPUSH
63291: CALL_OW 561
// for i in tmp do
63295: LD_ADDR_VAR 0 3
63299: PUSH
63300: LD_VAR 0 4
63304: PUSH
63305: FOR_IN
63306: IFFALSE 63413
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63308: LD_STRING [
63310: PUSH
63311: LD_VAR 0 3
63315: PPUSH
63316: CALL_OW 266
63320: STR
63321: PUSH
63322: LD_STRING , 
63324: STR
63325: PUSH
63326: LD_VAR 0 3
63330: PPUSH
63331: CALL_OW 250
63335: STR
63336: PUSH
63337: LD_STRING , 
63339: STR
63340: PUSH
63341: LD_VAR 0 3
63345: PPUSH
63346: CALL_OW 251
63350: STR
63351: PUSH
63352: LD_STRING , 
63354: STR
63355: PUSH
63356: LD_VAR 0 3
63360: PPUSH
63361: CALL_OW 254
63365: STR
63366: PUSH
63367: LD_STRING , 
63369: STR
63370: PUSH
63371: LD_VAR 0 3
63375: PPUSH
63376: LD_INT 1
63378: PPUSH
63379: CALL_OW 268
63383: STR
63384: PUSH
63385: LD_STRING , 
63387: STR
63388: PUSH
63389: LD_VAR 0 3
63393: PPUSH
63394: LD_INT 2
63396: PPUSH
63397: CALL_OW 268
63401: STR
63402: PUSH
63403: LD_STRING ],
63405: STR
63406: PPUSH
63407: CALL_OW 561
// end ;
63411: GO 63305
63413: POP
63414: POP
// AddToLog ( ]; ) ;
63415: LD_STRING ];
63417: PPUSH
63418: CALL_OW 561
// end ;
63422: LD_VAR 0 2
63426: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63427: LD_INT 0
63429: PPUSH
63430: PPUSH
63431: PPUSH
63432: PPUSH
63433: PPUSH
// if not area or not rate or not max then
63434: LD_VAR 0 1
63438: NOT
63439: PUSH
63440: LD_VAR 0 2
63444: NOT
63445: OR
63446: PUSH
63447: LD_VAR 0 4
63451: NOT
63452: OR
63453: IFFALSE 63457
// exit ;
63455: GO 63646
// while 1 do
63457: LD_INT 1
63459: IFFALSE 63646
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63461: LD_ADDR_VAR 0 9
63465: PUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: LD_INT 1
63473: PPUSH
63474: CALL_OW 287
63478: PUSH
63479: LD_INT 10
63481: MUL
63482: ST_TO_ADDR
// r := rate / 10 ;
63483: LD_ADDR_VAR 0 7
63487: PUSH
63488: LD_VAR 0 2
63492: PUSH
63493: LD_INT 10
63495: DIVREAL
63496: ST_TO_ADDR
// time := 1 1$00 ;
63497: LD_ADDR_VAR 0 8
63501: PUSH
63502: LD_INT 2100
63504: ST_TO_ADDR
// if amount < min then
63505: LD_VAR 0 9
63509: PUSH
63510: LD_VAR 0 3
63514: LESS
63515: IFFALSE 63533
// r := r * 2 else
63517: LD_ADDR_VAR 0 7
63521: PUSH
63522: LD_VAR 0 7
63526: PUSH
63527: LD_INT 2
63529: MUL
63530: ST_TO_ADDR
63531: GO 63559
// if amount > max then
63533: LD_VAR 0 9
63537: PUSH
63538: LD_VAR 0 4
63542: GREATER
63543: IFFALSE 63559
// r := r / 2 ;
63545: LD_ADDR_VAR 0 7
63549: PUSH
63550: LD_VAR 0 7
63554: PUSH
63555: LD_INT 2
63557: DIVREAL
63558: ST_TO_ADDR
// time := time / r ;
63559: LD_ADDR_VAR 0 8
63563: PUSH
63564: LD_VAR 0 8
63568: PUSH
63569: LD_VAR 0 7
63573: DIVREAL
63574: ST_TO_ADDR
// if time < 0 then
63575: LD_VAR 0 8
63579: PUSH
63580: LD_INT 0
63582: LESS
63583: IFFALSE 63600
// time := time * - 1 ;
63585: LD_ADDR_VAR 0 8
63589: PUSH
63590: LD_VAR 0 8
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: MUL
63599: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63600: LD_VAR 0 8
63604: PUSH
63605: LD_INT 35
63607: PPUSH
63608: LD_INT 875
63610: PPUSH
63611: CALL_OW 12
63615: PLUS
63616: PPUSH
63617: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63621: LD_INT 1
63623: PPUSH
63624: LD_INT 5
63626: PPUSH
63627: CALL_OW 12
63631: PPUSH
63632: LD_VAR 0 1
63636: PPUSH
63637: LD_INT 1
63639: PPUSH
63640: CALL_OW 55
// end ;
63644: GO 63457
// end ;
63646: LD_VAR 0 5
63650: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63651: LD_INT 0
63653: PPUSH
63654: PPUSH
63655: PPUSH
63656: PPUSH
63657: PPUSH
63658: PPUSH
63659: PPUSH
63660: PPUSH
// if not turrets or not factories then
63661: LD_VAR 0 1
63665: NOT
63666: PUSH
63667: LD_VAR 0 2
63671: NOT
63672: OR
63673: IFFALSE 63677
// exit ;
63675: GO 63984
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63677: LD_ADDR_VAR 0 10
63681: PUSH
63682: LD_INT 5
63684: PUSH
63685: LD_INT 6
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 4
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: LD_INT 5
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 24
63719: PUSH
63720: LD_INT 25
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 23
63729: PUSH
63730: LD_INT 27
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 42
63743: PUSH
63744: LD_INT 43
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 44
63753: PUSH
63754: LD_INT 46
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 45
63763: PUSH
63764: LD_INT 47
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: LIST
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: ST_TO_ADDR
// result := [ ] ;
63781: LD_ADDR_VAR 0 3
63785: PUSH
63786: EMPTY
63787: ST_TO_ADDR
// for i in turrets do
63788: LD_ADDR_VAR 0 4
63792: PUSH
63793: LD_VAR 0 1
63797: PUSH
63798: FOR_IN
63799: IFFALSE 63982
// begin nat := GetNation ( i ) ;
63801: LD_ADDR_VAR 0 7
63805: PUSH
63806: LD_VAR 0 4
63810: PPUSH
63811: CALL_OW 248
63815: ST_TO_ADDR
// weapon := 0 ;
63816: LD_ADDR_VAR 0 8
63820: PUSH
63821: LD_INT 0
63823: ST_TO_ADDR
// if not nat then
63824: LD_VAR 0 7
63828: NOT
63829: IFFALSE 63833
// continue ;
63831: GO 63798
// for j in list [ nat ] do
63833: LD_ADDR_VAR 0 5
63837: PUSH
63838: LD_VAR 0 10
63842: PUSH
63843: LD_VAR 0 7
63847: ARRAY
63848: PUSH
63849: FOR_IN
63850: IFFALSE 63891
// if GetBWeapon ( i ) = j [ 1 ] then
63852: LD_VAR 0 4
63856: PPUSH
63857: CALL_OW 269
63861: PUSH
63862: LD_VAR 0 5
63866: PUSH
63867: LD_INT 1
63869: ARRAY
63870: EQUAL
63871: IFFALSE 63889
// begin weapon := j [ 2 ] ;
63873: LD_ADDR_VAR 0 8
63877: PUSH
63878: LD_VAR 0 5
63882: PUSH
63883: LD_INT 2
63885: ARRAY
63886: ST_TO_ADDR
// break ;
63887: GO 63891
// end ;
63889: GO 63849
63891: POP
63892: POP
// if not weapon then
63893: LD_VAR 0 8
63897: NOT
63898: IFFALSE 63902
// continue ;
63900: GO 63798
// for k in factories do
63902: LD_ADDR_VAR 0 6
63906: PUSH
63907: LD_VAR 0 2
63911: PUSH
63912: FOR_IN
63913: IFFALSE 63978
// begin weapons := AvailableWeaponList ( k ) ;
63915: LD_ADDR_VAR 0 9
63919: PUSH
63920: LD_VAR 0 6
63924: PPUSH
63925: CALL_OW 478
63929: ST_TO_ADDR
// if not weapons then
63930: LD_VAR 0 9
63934: NOT
63935: IFFALSE 63939
// continue ;
63937: GO 63912
// if weapon in weapons then
63939: LD_VAR 0 8
63943: PUSH
63944: LD_VAR 0 9
63948: IN
63949: IFFALSE 63976
// begin result := [ i , weapon ] ;
63951: LD_ADDR_VAR 0 3
63955: PUSH
63956: LD_VAR 0 4
63960: PUSH
63961: LD_VAR 0 8
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: ST_TO_ADDR
// exit ;
63970: POP
63971: POP
63972: POP
63973: POP
63974: GO 63984
// end ; end ;
63976: GO 63912
63978: POP
63979: POP
// end ;
63980: GO 63798
63982: POP
63983: POP
// end ;
63984: LD_VAR 0 3
63988: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63989: LD_INT 0
63991: PPUSH
// if not side or side > 8 then
63992: LD_VAR 0 3
63996: NOT
63997: PUSH
63998: LD_VAR 0 3
64002: PUSH
64003: LD_INT 8
64005: GREATER
64006: OR
64007: IFFALSE 64011
// exit ;
64009: GO 64070
// if not range then
64011: LD_VAR 0 4
64015: NOT
64016: IFFALSE 64027
// range := - 12 ;
64018: LD_ADDR_VAR 0 4
64022: PUSH
64023: LD_INT 12
64025: NEG
64026: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64027: LD_VAR 0 1
64031: PPUSH
64032: LD_VAR 0 2
64036: PPUSH
64037: LD_VAR 0 3
64041: PPUSH
64042: LD_VAR 0 4
64046: PPUSH
64047: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64051: LD_VAR 0 1
64055: PPUSH
64056: LD_VAR 0 2
64060: PPUSH
64061: LD_VAR 0 3
64065: PPUSH
64066: CALL_OW 331
// end ;
64070: LD_VAR 0 5
64074: RET
// export function Video ( mode ) ; begin
64075: LD_INT 0
64077: PPUSH
// ingame_video = mode ;
64078: LD_ADDR_OWVAR 52
64082: PUSH
64083: LD_VAR 0 1
64087: ST_TO_ADDR
// interface_hidden = mode ;
64088: LD_ADDR_OWVAR 54
64092: PUSH
64093: LD_VAR 0 1
64097: ST_TO_ADDR
// end ;
64098: LD_VAR 0 2
64102: RET
// export function Join ( array , element ) ; begin
64103: LD_INT 0
64105: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64106: LD_ADDR_VAR 0 3
64110: PUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: LD_VAR 0 1
64120: PUSH
64121: LD_INT 1
64123: PLUS
64124: PPUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: CALL_OW 1
64134: ST_TO_ADDR
// end ;
64135: LD_VAR 0 3
64139: RET
// export function JoinUnion ( array , element ) ; begin
64140: LD_INT 0
64142: PPUSH
// result := array union element ;
64143: LD_ADDR_VAR 0 3
64147: PUSH
64148: LD_VAR 0 1
64152: PUSH
64153: LD_VAR 0 2
64157: UNION
64158: ST_TO_ADDR
// end ;
64159: LD_VAR 0 3
64163: RET
// export function GetBehemoths ( side ) ; begin
64164: LD_INT 0
64166: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64167: LD_ADDR_VAR 0 2
64171: PUSH
64172: LD_INT 22
64174: PUSH
64175: LD_VAR 0 1
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 31
64186: PUSH
64187: LD_INT 25
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PPUSH
64198: CALL_OW 69
64202: ST_TO_ADDR
// end ;
64203: LD_VAR 0 2
64207: RET
// export function Shuffle ( array ) ; var i , index ; begin
64208: LD_INT 0
64210: PPUSH
64211: PPUSH
64212: PPUSH
// result := [ ] ;
64213: LD_ADDR_VAR 0 2
64217: PUSH
64218: EMPTY
64219: ST_TO_ADDR
// if not array then
64220: LD_VAR 0 1
64224: NOT
64225: IFFALSE 64229
// exit ;
64227: GO 64328
// Randomize ;
64229: CALL_OW 10
// for i = array downto 1 do
64233: LD_ADDR_VAR 0 3
64237: PUSH
64238: DOUBLE
64239: LD_VAR 0 1
64243: INC
64244: ST_TO_ADDR
64245: LD_INT 1
64247: PUSH
64248: FOR_DOWNTO
64249: IFFALSE 64326
// begin index := rand ( 1 , array ) ;
64251: LD_ADDR_VAR 0 4
64255: PUSH
64256: LD_INT 1
64258: PPUSH
64259: LD_VAR 0 1
64263: PPUSH
64264: CALL_OW 12
64268: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64269: LD_ADDR_VAR 0 2
64273: PUSH
64274: LD_VAR 0 2
64278: PPUSH
64279: LD_VAR 0 2
64283: PUSH
64284: LD_INT 1
64286: PLUS
64287: PPUSH
64288: LD_VAR 0 1
64292: PUSH
64293: LD_VAR 0 4
64297: ARRAY
64298: PPUSH
64299: CALL_OW 2
64303: ST_TO_ADDR
// array := Delete ( array , index ) ;
64304: LD_ADDR_VAR 0 1
64308: PUSH
64309: LD_VAR 0 1
64313: PPUSH
64314: LD_VAR 0 4
64318: PPUSH
64319: CALL_OW 3
64323: ST_TO_ADDR
// end ;
64324: GO 64248
64326: POP
64327: POP
// end ;
64328: LD_VAR 0 2
64332: RET
// export function GetBaseMaterials ( base ) ; begin
64333: LD_INT 0
64335: PPUSH
// result := [ 0 , 0 , 0 ] ;
64336: LD_ADDR_VAR 0 2
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// if not base then
64355: LD_VAR 0 1
64359: NOT
64360: IFFALSE 64364
// exit ;
64362: GO 64413
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64364: LD_ADDR_VAR 0 2
64368: PUSH
64369: LD_VAR 0 1
64373: PPUSH
64374: LD_INT 1
64376: PPUSH
64377: CALL_OW 275
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: LD_INT 2
64389: PPUSH
64390: CALL_OW 275
64394: PUSH
64395: LD_VAR 0 1
64399: PPUSH
64400: LD_INT 3
64402: PPUSH
64403: CALL_OW 275
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: ST_TO_ADDR
// end ;
64413: LD_VAR 0 2
64417: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64418: LD_INT 0
64420: PPUSH
64421: PPUSH
// result := array ;
64422: LD_ADDR_VAR 0 3
64426: PUSH
64427: LD_VAR 0 1
64431: ST_TO_ADDR
// if size >= result then
64432: LD_VAR 0 2
64436: PUSH
64437: LD_VAR 0 3
64441: GREATEREQUAL
64442: IFFALSE 64446
// exit ;
64444: GO 64496
// if size then
64446: LD_VAR 0 2
64450: IFFALSE 64496
// for i := array downto size do
64452: LD_ADDR_VAR 0 4
64456: PUSH
64457: DOUBLE
64458: LD_VAR 0 1
64462: INC
64463: ST_TO_ADDR
64464: LD_VAR 0 2
64468: PUSH
64469: FOR_DOWNTO
64470: IFFALSE 64494
// result := Delete ( result , result ) ;
64472: LD_ADDR_VAR 0 3
64476: PUSH
64477: LD_VAR 0 3
64481: PPUSH
64482: LD_VAR 0 3
64486: PPUSH
64487: CALL_OW 3
64491: ST_TO_ADDR
64492: GO 64469
64494: POP
64495: POP
// end ;
64496: LD_VAR 0 3
64500: RET
// export function ComExit ( unit ) ; var tmp ; begin
64501: LD_INT 0
64503: PPUSH
64504: PPUSH
// if not IsInUnit ( unit ) then
64505: LD_VAR 0 1
64509: PPUSH
64510: CALL_OW 310
64514: NOT
64515: IFFALSE 64519
// exit ;
64517: GO 64579
// tmp := IsInUnit ( unit ) ;
64519: LD_ADDR_VAR 0 3
64523: PUSH
64524: LD_VAR 0 1
64528: PPUSH
64529: CALL_OW 310
64533: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64534: LD_VAR 0 3
64538: PPUSH
64539: CALL_OW 247
64543: PUSH
64544: LD_INT 2
64546: EQUAL
64547: IFFALSE 64560
// ComExitVehicle ( unit ) else
64549: LD_VAR 0 1
64553: PPUSH
64554: CALL_OW 121
64558: GO 64569
// ComExitBuilding ( unit ) ;
64560: LD_VAR 0 1
64564: PPUSH
64565: CALL_OW 122
// result := tmp ;
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: LD_VAR 0 3
64578: ST_TO_ADDR
// end ;
64579: LD_VAR 0 2
64583: RET
// export function ComExitAll ( units ) ; var i ; begin
64584: LD_INT 0
64586: PPUSH
64587: PPUSH
// if not units then
64588: LD_VAR 0 1
64592: NOT
64593: IFFALSE 64597
// exit ;
64595: GO 64623
// for i in units do
64597: LD_ADDR_VAR 0 3
64601: PUSH
64602: LD_VAR 0 1
64606: PUSH
64607: FOR_IN
64608: IFFALSE 64621
// ComExit ( i ) ;
64610: LD_VAR 0 3
64614: PPUSH
64615: CALL 64501 0 1
64619: GO 64607
64621: POP
64622: POP
// end ;
64623: LD_VAR 0 2
64627: RET
// export function ResetHc ; begin
64628: LD_INT 0
64630: PPUSH
// InitHc ;
64631: CALL_OW 19
// hc_importance := 0 ;
64635: LD_ADDR_OWVAR 32
64639: PUSH
64640: LD_INT 0
64642: ST_TO_ADDR
// end ;
64643: LD_VAR 0 1
64647: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64648: LD_INT 0
64650: PPUSH
64651: PPUSH
64652: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64653: LD_ADDR_VAR 0 6
64657: PUSH
64658: LD_VAR 0 1
64662: PUSH
64663: LD_VAR 0 3
64667: PLUS
64668: PUSH
64669: LD_INT 2
64671: DIV
64672: ST_TO_ADDR
// if _x < 0 then
64673: LD_VAR 0 6
64677: PUSH
64678: LD_INT 0
64680: LESS
64681: IFFALSE 64698
// _x := _x * - 1 ;
64683: LD_ADDR_VAR 0 6
64687: PUSH
64688: LD_VAR 0 6
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: MUL
64697: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64698: LD_ADDR_VAR 0 7
64702: PUSH
64703: LD_VAR 0 2
64707: PUSH
64708: LD_VAR 0 4
64712: PLUS
64713: PUSH
64714: LD_INT 2
64716: DIV
64717: ST_TO_ADDR
// if _y < 0 then
64718: LD_VAR 0 7
64722: PUSH
64723: LD_INT 0
64725: LESS
64726: IFFALSE 64743
// _y := _y * - 1 ;
64728: LD_ADDR_VAR 0 7
64732: PUSH
64733: LD_VAR 0 7
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: MUL
64742: ST_TO_ADDR
// result := [ _x , _y ] ;
64743: LD_ADDR_VAR 0 5
64747: PUSH
64748: LD_VAR 0 6
64752: PUSH
64753: LD_VAR 0 7
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// end ;
64762: LD_VAR 0 5
64766: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64767: LD_INT 0
64769: PPUSH
64770: PPUSH
64771: PPUSH
64772: PPUSH
// task := GetTaskList ( unit ) ;
64773: LD_ADDR_VAR 0 7
64777: PUSH
64778: LD_VAR 0 1
64782: PPUSH
64783: CALL_OW 437
64787: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64788: LD_VAR 0 7
64792: NOT
64793: PUSH
64794: LD_VAR 0 1
64798: PPUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: CALL_OW 308
64808: NOT
64809: AND
64810: IFFALSE 64814
// exit ;
64812: GO 64932
// if IsInArea ( unit , area ) then
64814: LD_VAR 0 1
64818: PPUSH
64819: LD_VAR 0 2
64823: PPUSH
64824: CALL_OW 308
64828: IFFALSE 64846
// begin ComMoveToArea ( unit , goAway ) ;
64830: LD_VAR 0 1
64834: PPUSH
64835: LD_VAR 0 3
64839: PPUSH
64840: CALL_OW 113
// exit ;
64844: GO 64932
// end ; if task [ 1 ] [ 1 ] <> M then
64846: LD_VAR 0 7
64850: PUSH
64851: LD_INT 1
64853: ARRAY
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PUSH
64859: LD_STRING M
64861: NONEQUAL
64862: IFFALSE 64866
// exit ;
64864: GO 64932
// x := task [ 1 ] [ 2 ] ;
64866: LD_ADDR_VAR 0 5
64870: PUSH
64871: LD_VAR 0 7
64875: PUSH
64876: LD_INT 1
64878: ARRAY
64879: PUSH
64880: LD_INT 2
64882: ARRAY
64883: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64884: LD_ADDR_VAR 0 6
64888: PUSH
64889: LD_VAR 0 7
64893: PUSH
64894: LD_INT 1
64896: ARRAY
64897: PUSH
64898: LD_INT 3
64900: ARRAY
64901: ST_TO_ADDR
// if InArea ( x , y , area ) then
64902: LD_VAR 0 5
64906: PPUSH
64907: LD_VAR 0 6
64911: PPUSH
64912: LD_VAR 0 2
64916: PPUSH
64917: CALL_OW 309
64921: IFFALSE 64932
// ComStop ( unit ) ;
64923: LD_VAR 0 1
64927: PPUSH
64928: CALL_OW 141
// end ;
64932: LD_VAR 0 4
64936: RET
// export function Abs ( value ) ; begin
64937: LD_INT 0
64939: PPUSH
// result := value ;
64940: LD_ADDR_VAR 0 2
64944: PUSH
64945: LD_VAR 0 1
64949: ST_TO_ADDR
// if value < 0 then
64950: LD_VAR 0 1
64954: PUSH
64955: LD_INT 0
64957: LESS
64958: IFFALSE 64975
// result := value * - 1 ;
64960: LD_ADDR_VAR 0 2
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: MUL
64974: ST_TO_ADDR
// end ;
64975: LD_VAR 0 2
64979: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64980: LD_INT 0
64982: PPUSH
64983: PPUSH
64984: PPUSH
64985: PPUSH
64986: PPUSH
64987: PPUSH
64988: PPUSH
64989: PPUSH
// if not unit or not building then
64990: LD_VAR 0 1
64994: NOT
64995: PUSH
64996: LD_VAR 0 2
65000: NOT
65001: OR
65002: IFFALSE 65006
// exit ;
65004: GO 65232
// x := GetX ( building ) ;
65006: LD_ADDR_VAR 0 4
65010: PUSH
65011: LD_VAR 0 2
65015: PPUSH
65016: CALL_OW 250
65020: ST_TO_ADDR
// y := GetY ( building ) ;
65021: LD_ADDR_VAR 0 6
65025: PUSH
65026: LD_VAR 0 2
65030: PPUSH
65031: CALL_OW 251
65035: ST_TO_ADDR
// d := GetDir ( building ) ;
65036: LD_ADDR_VAR 0 8
65040: PUSH
65041: LD_VAR 0 2
65045: PPUSH
65046: CALL_OW 254
65050: ST_TO_ADDR
// r := 4 ;
65051: LD_ADDR_VAR 0 9
65055: PUSH
65056: LD_INT 4
65058: ST_TO_ADDR
// for i := 1 to 5 do
65059: LD_ADDR_VAR 0 10
65063: PUSH
65064: DOUBLE
65065: LD_INT 1
65067: DEC
65068: ST_TO_ADDR
65069: LD_INT 5
65071: PUSH
65072: FOR_TO
65073: IFFALSE 65230
// begin _x := ShiftX ( x , d , r + i ) ;
65075: LD_ADDR_VAR 0 5
65079: PUSH
65080: LD_VAR 0 4
65084: PPUSH
65085: LD_VAR 0 8
65089: PPUSH
65090: LD_VAR 0 9
65094: PUSH
65095: LD_VAR 0 10
65099: PLUS
65100: PPUSH
65101: CALL_OW 272
65105: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65106: LD_ADDR_VAR 0 7
65110: PUSH
65111: LD_VAR 0 6
65115: PPUSH
65116: LD_VAR 0 8
65120: PPUSH
65121: LD_VAR 0 9
65125: PUSH
65126: LD_VAR 0 10
65130: PLUS
65131: PPUSH
65132: CALL_OW 273
65136: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65137: LD_VAR 0 5
65141: PPUSH
65142: LD_VAR 0 7
65146: PPUSH
65147: CALL_OW 488
65151: PUSH
65152: LD_VAR 0 5
65156: PPUSH
65157: LD_VAR 0 7
65161: PPUSH
65162: CALL_OW 428
65166: PPUSH
65167: CALL_OW 247
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: IN
65182: NOT
65183: AND
65184: IFFALSE 65228
// begin ComMoveXY ( unit , _x , _y ) ;
65186: LD_VAR 0 1
65190: PPUSH
65191: LD_VAR 0 5
65195: PPUSH
65196: LD_VAR 0 7
65200: PPUSH
65201: CALL_OW 111
// result := [ _x , _y ] ;
65205: LD_ADDR_VAR 0 3
65209: PUSH
65210: LD_VAR 0 5
65214: PUSH
65215: LD_VAR 0 7
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// exit ;
65224: POP
65225: POP
65226: GO 65232
// end ; end ;
65228: GO 65072
65230: POP
65231: POP
// end ;
65232: LD_VAR 0 3
65236: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65237: LD_INT 0
65239: PPUSH
65240: PPUSH
65241: PPUSH
// result := 0 ;
65242: LD_ADDR_VAR 0 3
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65250: LD_VAR 0 1
65254: PUSH
65255: LD_INT 0
65257: LESS
65258: PUSH
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 8
65266: GREATER
65267: OR
65268: PUSH
65269: LD_VAR 0 2
65273: PUSH
65274: LD_INT 0
65276: LESS
65277: OR
65278: PUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_INT 8
65286: GREATER
65287: OR
65288: IFFALSE 65292
// exit ;
65290: GO 65367
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65292: LD_ADDR_VAR 0 4
65296: PUSH
65297: LD_INT 22
65299: PUSH
65300: LD_VAR 0 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PPUSH
65309: CALL_OW 69
65313: PUSH
65314: FOR_IN
65315: IFFALSE 65365
// begin un := UnitShoot ( i ) ;
65317: LD_ADDR_VAR 0 5
65321: PUSH
65322: LD_VAR 0 4
65326: PPUSH
65327: CALL_OW 504
65331: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65332: LD_VAR 0 5
65336: PPUSH
65337: CALL_OW 255
65341: PUSH
65342: LD_VAR 0 1
65346: EQUAL
65347: IFFALSE 65363
// begin result := un ;
65349: LD_ADDR_VAR 0 3
65353: PUSH
65354: LD_VAR 0 5
65358: ST_TO_ADDR
// exit ;
65359: POP
65360: POP
65361: GO 65367
// end ; end ;
65363: GO 65314
65365: POP
65366: POP
// end ;
65367: LD_VAR 0 3
65371: RET
// export function GetCargoBay ( units ) ; begin
65372: LD_INT 0
65374: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65375: LD_ADDR_VAR 0 2
65379: PUSH
65380: LD_VAR 0 1
65384: PPUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 34
65390: PUSH
65391: LD_INT 12
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 34
65400: PUSH
65401: LD_INT 51
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 34
65410: PUSH
65411: LD_INT 32
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 34
65420: PUSH
65421: LD_INT 89
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: PPUSH
65435: CALL_OW 72
65439: ST_TO_ADDR
// end ;
65440: LD_VAR 0 2
65444: RET
// export function Negate ( value ) ; begin
65445: LD_INT 0
65447: PPUSH
// result := not value ;
65448: LD_ADDR_VAR 0 2
65452: PUSH
65453: LD_VAR 0 1
65457: NOT
65458: ST_TO_ADDR
// end ;
65459: LD_VAR 0 2
65463: RET
// export function Inc ( value ) ; begin
65464: LD_INT 0
65466: PPUSH
// result := value + 1 ;
65467: LD_ADDR_VAR 0 2
65471: PUSH
65472: LD_VAR 0 1
65476: PUSH
65477: LD_INT 1
65479: PLUS
65480: ST_TO_ADDR
// end ;
65481: LD_VAR 0 2
65485: RET
// export function Dec ( value ) ; begin
65486: LD_INT 0
65488: PPUSH
// result := value - 1 ;
65489: LD_ADDR_VAR 0 2
65493: PUSH
65494: LD_VAR 0 1
65498: PUSH
65499: LD_INT 1
65501: MINUS
65502: ST_TO_ADDR
// end ;
65503: LD_VAR 0 2
65507: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65508: LD_INT 0
65510: PPUSH
65511: PPUSH
65512: PPUSH
65513: PPUSH
65514: PPUSH
65515: PPUSH
65516: PPUSH
65517: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65518: LD_VAR 0 1
65522: PPUSH
65523: LD_VAR 0 2
65527: PPUSH
65528: CALL_OW 488
65532: NOT
65533: PUSH
65534: LD_VAR 0 3
65538: PPUSH
65539: LD_VAR 0 4
65543: PPUSH
65544: CALL_OW 488
65548: NOT
65549: OR
65550: IFFALSE 65563
// begin result := - 1 ;
65552: LD_ADDR_VAR 0 5
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: ST_TO_ADDR
// exit ;
65561: GO 65798
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65563: LD_ADDR_VAR 0 12
65567: PUSH
65568: LD_VAR 0 1
65572: PPUSH
65573: LD_VAR 0 2
65577: PPUSH
65578: LD_VAR 0 3
65582: PPUSH
65583: LD_VAR 0 4
65587: PPUSH
65588: CALL 64648 0 4
65592: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65593: LD_ADDR_VAR 0 11
65597: PUSH
65598: LD_VAR 0 1
65602: PPUSH
65603: LD_VAR 0 2
65607: PPUSH
65608: LD_VAR 0 12
65612: PUSH
65613: LD_INT 1
65615: ARRAY
65616: PPUSH
65617: LD_VAR 0 12
65621: PUSH
65622: LD_INT 2
65624: ARRAY
65625: PPUSH
65626: CALL_OW 298
65630: ST_TO_ADDR
// distance := 9999 ;
65631: LD_ADDR_VAR 0 10
65635: PUSH
65636: LD_INT 9999
65638: ST_TO_ADDR
// for i := 0 to 5 do
65639: LD_ADDR_VAR 0 6
65643: PUSH
65644: DOUBLE
65645: LD_INT 0
65647: DEC
65648: ST_TO_ADDR
65649: LD_INT 5
65651: PUSH
65652: FOR_TO
65653: IFFALSE 65796
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65655: LD_ADDR_VAR 0 7
65659: PUSH
65660: LD_VAR 0 1
65664: PPUSH
65665: LD_VAR 0 6
65669: PPUSH
65670: LD_VAR 0 11
65674: PPUSH
65675: CALL_OW 272
65679: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65680: LD_ADDR_VAR 0 8
65684: PUSH
65685: LD_VAR 0 2
65689: PPUSH
65690: LD_VAR 0 6
65694: PPUSH
65695: LD_VAR 0 11
65699: PPUSH
65700: CALL_OW 273
65704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65705: LD_VAR 0 7
65709: PPUSH
65710: LD_VAR 0 8
65714: PPUSH
65715: CALL_OW 488
65719: NOT
65720: IFFALSE 65724
// continue ;
65722: GO 65652
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65724: LD_ADDR_VAR 0 9
65728: PUSH
65729: LD_VAR 0 12
65733: PUSH
65734: LD_INT 1
65736: ARRAY
65737: PPUSH
65738: LD_VAR 0 12
65742: PUSH
65743: LD_INT 2
65745: ARRAY
65746: PPUSH
65747: LD_VAR 0 7
65751: PPUSH
65752: LD_VAR 0 8
65756: PPUSH
65757: CALL_OW 298
65761: ST_TO_ADDR
// if tmp < distance then
65762: LD_VAR 0 9
65766: PUSH
65767: LD_VAR 0 10
65771: LESS
65772: IFFALSE 65794
// begin result := i ;
65774: LD_ADDR_VAR 0 5
65778: PUSH
65779: LD_VAR 0 6
65783: ST_TO_ADDR
// distance := tmp ;
65784: LD_ADDR_VAR 0 10
65788: PUSH
65789: LD_VAR 0 9
65793: ST_TO_ADDR
// end ; end ;
65794: GO 65652
65796: POP
65797: POP
// end ;
65798: LD_VAR 0 5
65802: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65803: LD_INT 0
65805: PPUSH
65806: PPUSH
// if not driver or not IsInUnit ( driver ) then
65807: LD_VAR 0 1
65811: NOT
65812: PUSH
65813: LD_VAR 0 1
65817: PPUSH
65818: CALL_OW 310
65822: NOT
65823: OR
65824: IFFALSE 65828
// exit ;
65826: GO 65918
// vehicle := IsInUnit ( driver ) ;
65828: LD_ADDR_VAR 0 3
65832: PUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: CALL_OW 310
65842: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65843: LD_VAR 0 1
65847: PPUSH
65848: LD_STRING \
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: PUSH
65878: LD_STRING E
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_VAR 0 3
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PPUSH
65914: CALL_OW 446
// end ;
65918: LD_VAR 0 2
65922: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65923: LD_INT 0
65925: PPUSH
65926: PPUSH
// if not driver or not IsInUnit ( driver ) then
65927: LD_VAR 0 1
65931: NOT
65932: PUSH
65933: LD_VAR 0 1
65937: PPUSH
65938: CALL_OW 310
65942: NOT
65943: OR
65944: IFFALSE 65948
// exit ;
65946: GO 66038
// vehicle := IsInUnit ( driver ) ;
65948: LD_ADDR_VAR 0 3
65952: PUSH
65953: LD_VAR 0 1
65957: PPUSH
65958: CALL_OW 310
65962: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65963: LD_VAR 0 1
65967: PPUSH
65968: LD_STRING \
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: PUSH
65998: LD_STRING E
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_VAR 0 3
66011: PUSH
66012: LD_INT 0
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PPUSH
66034: CALL_OW 447
// end ;
66038: LD_VAR 0 2
66042: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66043: LD_INT 0
66045: PPUSH
66046: PPUSH
66047: PPUSH
// tmp := [ ] ;
66048: LD_ADDR_VAR 0 5
66052: PUSH
66053: EMPTY
66054: ST_TO_ADDR
// for i in units do
66055: LD_ADDR_VAR 0 4
66059: PUSH
66060: LD_VAR 0 1
66064: PUSH
66065: FOR_IN
66066: IFFALSE 66104
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66068: LD_ADDR_VAR 0 5
66072: PUSH
66073: LD_VAR 0 5
66077: PPUSH
66078: LD_VAR 0 5
66082: PUSH
66083: LD_INT 1
66085: PLUS
66086: PPUSH
66087: LD_VAR 0 4
66091: PPUSH
66092: CALL_OW 256
66096: PPUSH
66097: CALL_OW 2
66101: ST_TO_ADDR
66102: GO 66065
66104: POP
66105: POP
// if not tmp then
66106: LD_VAR 0 5
66110: NOT
66111: IFFALSE 66115
// exit ;
66113: GO 66163
// if asc then
66115: LD_VAR 0 2
66119: IFFALSE 66143
// result := SortListByListAsc ( units , tmp ) else
66121: LD_ADDR_VAR 0 3
66125: PUSH
66126: LD_VAR 0 1
66130: PPUSH
66131: LD_VAR 0 5
66135: PPUSH
66136: CALL_OW 76
66140: ST_TO_ADDR
66141: GO 66163
// result := SortListByListDesc ( units , tmp ) ;
66143: LD_ADDR_VAR 0 3
66147: PUSH
66148: LD_VAR 0 1
66152: PPUSH
66153: LD_VAR 0 5
66157: PPUSH
66158: CALL_OW 77
66162: ST_TO_ADDR
// end ;
66163: LD_VAR 0 3
66167: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66168: LD_INT 0
66170: PPUSH
66171: PPUSH
// task := GetTaskList ( mech ) ;
66172: LD_ADDR_VAR 0 4
66176: PUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: CALL_OW 437
66186: ST_TO_ADDR
// if not task then
66187: LD_VAR 0 4
66191: NOT
66192: IFFALSE 66196
// exit ;
66194: GO 66238
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66196: LD_ADDR_VAR 0 3
66200: PUSH
66201: LD_VAR 0 4
66205: PUSH
66206: LD_INT 1
66208: ARRAY
66209: PUSH
66210: LD_INT 1
66212: ARRAY
66213: PUSH
66214: LD_STRING r
66216: EQUAL
66217: PUSH
66218: LD_VAR 0 4
66222: PUSH
66223: LD_INT 1
66225: ARRAY
66226: PUSH
66227: LD_INT 4
66229: ARRAY
66230: PUSH
66231: LD_VAR 0 2
66235: EQUAL
66236: AND
66237: ST_TO_ADDR
// end ;
66238: LD_VAR 0 3
66242: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66243: LD_INT 0
66245: PPUSH
// SetDir ( unit , d ) ;
66246: LD_VAR 0 1
66250: PPUSH
66251: LD_VAR 0 4
66255: PPUSH
66256: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66260: LD_VAR 0 1
66264: PPUSH
66265: LD_VAR 0 2
66269: PPUSH
66270: LD_VAR 0 3
66274: PPUSH
66275: LD_VAR 0 5
66279: PPUSH
66280: CALL_OW 48
// end ;
66284: LD_VAR 0 6
66288: RET
// export function ToNaturalNumber ( number ) ; begin
66289: LD_INT 0
66291: PPUSH
// result := number div 1 ;
66292: LD_ADDR_VAR 0 2
66296: PUSH
66297: LD_VAR 0 1
66301: PUSH
66302: LD_INT 1
66304: DIV
66305: ST_TO_ADDR
// if number < 0 then
66306: LD_VAR 0 1
66310: PUSH
66311: LD_INT 0
66313: LESS
66314: IFFALSE 66324
// result := 0 ;
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_INT 0
66323: ST_TO_ADDR
// end ;
66324: LD_VAR 0 2
66328: RET
// export function SortByClass ( units , class ) ; var un ; begin
66329: LD_INT 0
66331: PPUSH
66332: PPUSH
// if not units or not class then
66333: LD_VAR 0 1
66337: NOT
66338: PUSH
66339: LD_VAR 0 2
66343: NOT
66344: OR
66345: IFFALSE 66349
// exit ;
66347: GO 66444
// result := [ ] ;
66349: LD_ADDR_VAR 0 3
66353: PUSH
66354: EMPTY
66355: ST_TO_ADDR
// for un in units do
66356: LD_ADDR_VAR 0 4
66360: PUSH
66361: LD_VAR 0 1
66365: PUSH
66366: FOR_IN
66367: IFFALSE 66442
// if GetClass ( un ) = class then
66369: LD_VAR 0 4
66373: PPUSH
66374: CALL_OW 257
66378: PUSH
66379: LD_VAR 0 2
66383: EQUAL
66384: IFFALSE 66411
// result := Insert ( result , 1 , un ) else
66386: LD_ADDR_VAR 0 3
66390: PUSH
66391: LD_VAR 0 3
66395: PPUSH
66396: LD_INT 1
66398: PPUSH
66399: LD_VAR 0 4
66403: PPUSH
66404: CALL_OW 2
66408: ST_TO_ADDR
66409: GO 66440
// result := Replace ( result , result + 1 , un ) ;
66411: LD_ADDR_VAR 0 3
66415: PUSH
66416: LD_VAR 0 3
66420: PPUSH
66421: LD_VAR 0 3
66425: PUSH
66426: LD_INT 1
66428: PLUS
66429: PPUSH
66430: LD_VAR 0 4
66434: PPUSH
66435: CALL_OW 1
66439: ST_TO_ADDR
66440: GO 66366
66442: POP
66443: POP
// end ;
66444: LD_VAR 0 3
66448: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66449: LD_INT 0
66451: PPUSH
66452: PPUSH
66453: PPUSH
66454: PPUSH
66455: PPUSH
66456: PPUSH
66457: PPUSH
// result := [ ] ;
66458: LD_ADDR_VAR 0 4
66462: PUSH
66463: EMPTY
66464: ST_TO_ADDR
// if x - r < 0 then
66465: LD_VAR 0 1
66469: PUSH
66470: LD_VAR 0 3
66474: MINUS
66475: PUSH
66476: LD_INT 0
66478: LESS
66479: IFFALSE 66491
// min_x := 0 else
66481: LD_ADDR_VAR 0 8
66485: PUSH
66486: LD_INT 0
66488: ST_TO_ADDR
66489: GO 66507
// min_x := x - r ;
66491: LD_ADDR_VAR 0 8
66495: PUSH
66496: LD_VAR 0 1
66500: PUSH
66501: LD_VAR 0 3
66505: MINUS
66506: ST_TO_ADDR
// if y - r < 0 then
66507: LD_VAR 0 2
66511: PUSH
66512: LD_VAR 0 3
66516: MINUS
66517: PUSH
66518: LD_INT 0
66520: LESS
66521: IFFALSE 66533
// min_y := 0 else
66523: LD_ADDR_VAR 0 7
66527: PUSH
66528: LD_INT 0
66530: ST_TO_ADDR
66531: GO 66549
// min_y := y - r ;
66533: LD_ADDR_VAR 0 7
66537: PUSH
66538: LD_VAR 0 2
66542: PUSH
66543: LD_VAR 0 3
66547: MINUS
66548: ST_TO_ADDR
// max_x := x + r ;
66549: LD_ADDR_VAR 0 9
66553: PUSH
66554: LD_VAR 0 1
66558: PUSH
66559: LD_VAR 0 3
66563: PLUS
66564: ST_TO_ADDR
// max_y := y + r ;
66565: LD_ADDR_VAR 0 10
66569: PUSH
66570: LD_VAR 0 2
66574: PUSH
66575: LD_VAR 0 3
66579: PLUS
66580: ST_TO_ADDR
// for _x = min_x to max_x do
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: DOUBLE
66587: LD_VAR 0 8
66591: DEC
66592: ST_TO_ADDR
66593: LD_VAR 0 9
66597: PUSH
66598: FOR_TO
66599: IFFALSE 66700
// for _y = min_y to max_y do
66601: LD_ADDR_VAR 0 6
66605: PUSH
66606: DOUBLE
66607: LD_VAR 0 7
66611: DEC
66612: ST_TO_ADDR
66613: LD_VAR 0 10
66617: PUSH
66618: FOR_TO
66619: IFFALSE 66696
// begin if not ValidHex ( _x , _y ) then
66621: LD_VAR 0 5
66625: PPUSH
66626: LD_VAR 0 6
66630: PPUSH
66631: CALL_OW 488
66635: NOT
66636: IFFALSE 66640
// continue ;
66638: GO 66618
// if GetResourceTypeXY ( _x , _y ) then
66640: LD_VAR 0 5
66644: PPUSH
66645: LD_VAR 0 6
66649: PPUSH
66650: CALL_OW 283
66654: IFFALSE 66694
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66656: LD_ADDR_VAR 0 4
66660: PUSH
66661: LD_VAR 0 4
66665: PPUSH
66666: LD_VAR 0 4
66670: PUSH
66671: LD_INT 1
66673: PLUS
66674: PPUSH
66675: LD_VAR 0 5
66679: PUSH
66680: LD_VAR 0 6
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PPUSH
66689: CALL_OW 1
66693: ST_TO_ADDR
// end ;
66694: GO 66618
66696: POP
66697: POP
66698: GO 66598
66700: POP
66701: POP
// end ;
66702: LD_VAR 0 4
66706: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66707: LD_INT 0
66709: PPUSH
66710: PPUSH
66711: PPUSH
66712: PPUSH
66713: PPUSH
66714: PPUSH
66715: PPUSH
66716: PPUSH
// if not units then
66717: LD_VAR 0 1
66721: NOT
66722: IFFALSE 66726
// exit ;
66724: GO 67250
// result := UnitFilter ( units , [ f_ok ] ) ;
66726: LD_ADDR_VAR 0 3
66730: PUSH
66731: LD_VAR 0 1
66735: PPUSH
66736: LD_INT 50
66738: PUSH
66739: EMPTY
66740: LIST
66741: PPUSH
66742: CALL_OW 72
66746: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66747: LD_ADDR_VAR 0 8
66751: PUSH
66752: LD_VAR 0 1
66756: PUSH
66757: LD_INT 1
66759: ARRAY
66760: PPUSH
66761: CALL_OW 255
66765: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66766: LD_ADDR_VAR 0 10
66770: PUSH
66771: LD_INT 29
66773: PUSH
66774: LD_INT 91
66776: PUSH
66777: LD_INT 49
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: ST_TO_ADDR
// if not result then
66785: LD_VAR 0 3
66789: NOT
66790: IFFALSE 66794
// exit ;
66792: GO 67250
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66794: LD_ADDR_VAR 0 5
66798: PUSH
66799: LD_INT 81
66801: PUSH
66802: LD_VAR 0 8
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PPUSH
66811: CALL_OW 69
66815: ST_TO_ADDR
// for i in result do
66816: LD_ADDR_VAR 0 4
66820: PUSH
66821: LD_VAR 0 3
66825: PUSH
66826: FOR_IN
66827: IFFALSE 67248
// begin tag := GetTag ( i ) + 1 ;
66829: LD_ADDR_VAR 0 9
66833: PUSH
66834: LD_VAR 0 4
66838: PPUSH
66839: CALL_OW 110
66843: PUSH
66844: LD_INT 1
66846: PLUS
66847: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66848: LD_ADDR_VAR 0 7
66852: PUSH
66853: LD_VAR 0 4
66857: PPUSH
66858: CALL_OW 250
66862: PPUSH
66863: LD_VAR 0 4
66867: PPUSH
66868: CALL_OW 251
66872: PPUSH
66873: LD_INT 6
66875: PPUSH
66876: CALL 66449 0 3
66880: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66881: LD_VAR 0 4
66885: PPUSH
66886: CALL_OW 247
66890: PUSH
66891: LD_INT 2
66893: EQUAL
66894: PUSH
66895: LD_VAR 0 7
66899: AND
66900: PUSH
66901: LD_VAR 0 4
66905: PPUSH
66906: CALL_OW 264
66910: PUSH
66911: LD_VAR 0 10
66915: IN
66916: NOT
66917: AND
66918: IFFALSE 66957
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66920: LD_VAR 0 4
66924: PPUSH
66925: LD_VAR 0 7
66929: PUSH
66930: LD_INT 1
66932: ARRAY
66933: PUSH
66934: LD_INT 1
66936: ARRAY
66937: PPUSH
66938: LD_VAR 0 7
66942: PUSH
66943: LD_INT 1
66945: ARRAY
66946: PUSH
66947: LD_INT 2
66949: ARRAY
66950: PPUSH
66951: CALL_OW 116
66955: GO 67246
// if path > tag then
66957: LD_VAR 0 2
66961: PUSH
66962: LD_VAR 0 9
66966: GREATER
66967: IFFALSE 67175
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66969: LD_ADDR_VAR 0 6
66973: PUSH
66974: LD_VAR 0 5
66978: PPUSH
66979: LD_INT 91
66981: PUSH
66982: LD_VAR 0 4
66986: PUSH
66987: LD_INT 8
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: PPUSH
66995: CALL_OW 72
66999: ST_TO_ADDR
// if nearEnemy then
67000: LD_VAR 0 6
67004: IFFALSE 67073
// begin if GetWeapon ( i ) = ru_time_lapser then
67006: LD_VAR 0 4
67010: PPUSH
67011: CALL_OW 264
67015: PUSH
67016: LD_INT 49
67018: EQUAL
67019: IFFALSE 67047
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67021: LD_VAR 0 4
67025: PPUSH
67026: LD_VAR 0 6
67030: PPUSH
67031: LD_VAR 0 4
67035: PPUSH
67036: CALL_OW 74
67040: PPUSH
67041: CALL_OW 112
67045: GO 67071
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67047: LD_VAR 0 4
67051: PPUSH
67052: LD_VAR 0 6
67056: PPUSH
67057: LD_VAR 0 4
67061: PPUSH
67062: CALL_OW 74
67066: PPUSH
67067: CALL 68321 0 2
// end else
67071: GO 67173
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67073: LD_VAR 0 4
67077: PPUSH
67078: LD_VAR 0 2
67082: PUSH
67083: LD_VAR 0 9
67087: ARRAY
67088: PUSH
67089: LD_INT 1
67091: ARRAY
67092: PPUSH
67093: LD_VAR 0 2
67097: PUSH
67098: LD_VAR 0 9
67102: ARRAY
67103: PUSH
67104: LD_INT 2
67106: ARRAY
67107: PPUSH
67108: CALL_OW 297
67112: PUSH
67113: LD_INT 6
67115: GREATER
67116: IFFALSE 67159
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67118: LD_VAR 0 4
67122: PPUSH
67123: LD_VAR 0 2
67127: PUSH
67128: LD_VAR 0 9
67132: ARRAY
67133: PUSH
67134: LD_INT 1
67136: ARRAY
67137: PPUSH
67138: LD_VAR 0 2
67142: PUSH
67143: LD_VAR 0 9
67147: ARRAY
67148: PUSH
67149: LD_INT 2
67151: ARRAY
67152: PPUSH
67153: CALL_OW 114
67157: GO 67173
// SetTag ( i , tag ) ;
67159: LD_VAR 0 4
67163: PPUSH
67164: LD_VAR 0 9
67168: PPUSH
67169: CALL_OW 109
// end else
67173: GO 67246
// if enemy then
67175: LD_VAR 0 5
67179: IFFALSE 67246
// begin if GetWeapon ( i ) = ru_time_lapser then
67181: LD_VAR 0 4
67185: PPUSH
67186: CALL_OW 264
67190: PUSH
67191: LD_INT 49
67193: EQUAL
67194: IFFALSE 67222
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67196: LD_VAR 0 4
67200: PPUSH
67201: LD_VAR 0 5
67205: PPUSH
67206: LD_VAR 0 4
67210: PPUSH
67211: CALL_OW 74
67215: PPUSH
67216: CALL_OW 112
67220: GO 67246
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67222: LD_VAR 0 4
67226: PPUSH
67227: LD_VAR 0 5
67231: PPUSH
67232: LD_VAR 0 4
67236: PPUSH
67237: CALL_OW 74
67241: PPUSH
67242: CALL 68321 0 2
// end ; end ;
67246: GO 66826
67248: POP
67249: POP
// end ;
67250: LD_VAR 0 3
67254: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
67259: PPUSH
// if not unit or IsInUnit ( unit ) then
67260: LD_VAR 0 1
67264: NOT
67265: PUSH
67266: LD_VAR 0 1
67270: PPUSH
67271: CALL_OW 310
67275: OR
67276: IFFALSE 67280
// exit ;
67278: GO 67371
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67280: LD_ADDR_VAR 0 4
67284: PUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: CALL_OW 250
67294: PPUSH
67295: LD_VAR 0 2
67299: PPUSH
67300: LD_INT 1
67302: PPUSH
67303: CALL_OW 272
67307: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67308: LD_ADDR_VAR 0 5
67312: PUSH
67313: LD_VAR 0 1
67317: PPUSH
67318: CALL_OW 251
67322: PPUSH
67323: LD_VAR 0 2
67327: PPUSH
67328: LD_INT 1
67330: PPUSH
67331: CALL_OW 273
67335: ST_TO_ADDR
// if ValidHex ( x , y ) then
67336: LD_VAR 0 4
67340: PPUSH
67341: LD_VAR 0 5
67345: PPUSH
67346: CALL_OW 488
67350: IFFALSE 67371
// ComTurnXY ( unit , x , y ) ;
67352: LD_VAR 0 1
67356: PPUSH
67357: LD_VAR 0 4
67361: PPUSH
67362: LD_VAR 0 5
67366: PPUSH
67367: CALL_OW 118
// end ;
67371: LD_VAR 0 3
67375: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67376: LD_INT 0
67378: PPUSH
67379: PPUSH
// result := false ;
67380: LD_ADDR_VAR 0 3
67384: PUSH
67385: LD_INT 0
67387: ST_TO_ADDR
// if not units then
67388: LD_VAR 0 2
67392: NOT
67393: IFFALSE 67397
// exit ;
67395: GO 67442
// for i in units do
67397: LD_ADDR_VAR 0 4
67401: PUSH
67402: LD_VAR 0 2
67406: PUSH
67407: FOR_IN
67408: IFFALSE 67440
// if See ( side , i ) then
67410: LD_VAR 0 1
67414: PPUSH
67415: LD_VAR 0 4
67419: PPUSH
67420: CALL_OW 292
67424: IFFALSE 67438
// begin result := true ;
67426: LD_ADDR_VAR 0 3
67430: PUSH
67431: LD_INT 1
67433: ST_TO_ADDR
// exit ;
67434: POP
67435: POP
67436: GO 67442
// end ;
67438: GO 67407
67440: POP
67441: POP
// end ;
67442: LD_VAR 0 3
67446: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67447: LD_INT 0
67449: PPUSH
67450: PPUSH
67451: PPUSH
67452: PPUSH
// if not unit or not points then
67453: LD_VAR 0 1
67457: NOT
67458: PUSH
67459: LD_VAR 0 2
67463: NOT
67464: OR
67465: IFFALSE 67469
// exit ;
67467: GO 67559
// dist := 99999 ;
67469: LD_ADDR_VAR 0 5
67473: PUSH
67474: LD_INT 99999
67476: ST_TO_ADDR
// for i in points do
67477: LD_ADDR_VAR 0 4
67481: PUSH
67482: LD_VAR 0 2
67486: PUSH
67487: FOR_IN
67488: IFFALSE 67557
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67490: LD_ADDR_VAR 0 6
67494: PUSH
67495: LD_VAR 0 1
67499: PPUSH
67500: LD_VAR 0 4
67504: PUSH
67505: LD_INT 1
67507: ARRAY
67508: PPUSH
67509: LD_VAR 0 4
67513: PUSH
67514: LD_INT 2
67516: ARRAY
67517: PPUSH
67518: CALL_OW 297
67522: ST_TO_ADDR
// if tmpDist < dist then
67523: LD_VAR 0 6
67527: PUSH
67528: LD_VAR 0 5
67532: LESS
67533: IFFALSE 67555
// begin result := i ;
67535: LD_ADDR_VAR 0 3
67539: PUSH
67540: LD_VAR 0 4
67544: ST_TO_ADDR
// dist := tmpDist ;
67545: LD_ADDR_VAR 0 5
67549: PUSH
67550: LD_VAR 0 6
67554: ST_TO_ADDR
// end ; end ;
67555: GO 67487
67557: POP
67558: POP
// end ;
67559: LD_VAR 0 3
67563: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67564: LD_INT 0
67566: PPUSH
// uc_side := side ;
67567: LD_ADDR_OWVAR 20
67571: PUSH
67572: LD_VAR 0 1
67576: ST_TO_ADDR
// uc_nation := 3 ;
67577: LD_ADDR_OWVAR 21
67581: PUSH
67582: LD_INT 3
67584: ST_TO_ADDR
// vc_chassis := 25 ;
67585: LD_ADDR_OWVAR 37
67589: PUSH
67590: LD_INT 25
67592: ST_TO_ADDR
// vc_engine := engine_siberite ;
67593: LD_ADDR_OWVAR 39
67597: PUSH
67598: LD_INT 3
67600: ST_TO_ADDR
// vc_control := control_computer ;
67601: LD_ADDR_OWVAR 38
67605: PUSH
67606: LD_INT 3
67608: ST_TO_ADDR
// vc_weapon := 59 ;
67609: LD_ADDR_OWVAR 40
67613: PUSH
67614: LD_INT 59
67616: ST_TO_ADDR
// result := CreateVehicle ;
67617: LD_ADDR_VAR 0 5
67621: PUSH
67622: CALL_OW 45
67626: ST_TO_ADDR
// SetDir ( result , d ) ;
67627: LD_VAR 0 5
67631: PPUSH
67632: LD_VAR 0 4
67636: PPUSH
67637: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67641: LD_VAR 0 5
67645: PPUSH
67646: LD_VAR 0 2
67650: PPUSH
67651: LD_VAR 0 3
67655: PPUSH
67656: LD_INT 0
67658: PPUSH
67659: CALL_OW 48
// end ;
67663: LD_VAR 0 5
67667: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67668: LD_INT 0
67670: PPUSH
67671: PPUSH
67672: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67673: LD_ADDR_VAR 0 2
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67696: LD_VAR 0 1
67700: NOT
67701: PUSH
67702: LD_VAR 0 1
67706: PPUSH
67707: CALL_OW 264
67711: PUSH
67712: LD_INT 12
67714: PUSH
67715: LD_INT 51
67717: PUSH
67718: LD_INT 32
67720: PUSH
67721: LD_INT 89
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: IN
67730: NOT
67731: OR
67732: IFFALSE 67736
// exit ;
67734: GO 67834
// for i := 1 to 3 do
67736: LD_ADDR_VAR 0 3
67740: PUSH
67741: DOUBLE
67742: LD_INT 1
67744: DEC
67745: ST_TO_ADDR
67746: LD_INT 3
67748: PUSH
67749: FOR_TO
67750: IFFALSE 67832
// begin tmp := GetCargo ( cargo , i ) ;
67752: LD_ADDR_VAR 0 4
67756: PUSH
67757: LD_VAR 0 1
67761: PPUSH
67762: LD_VAR 0 3
67766: PPUSH
67767: CALL_OW 289
67771: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67772: LD_ADDR_VAR 0 2
67776: PUSH
67777: LD_VAR 0 2
67781: PPUSH
67782: LD_VAR 0 3
67786: PPUSH
67787: LD_VAR 0 4
67791: PPUSH
67792: CALL_OW 1
67796: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67797: LD_ADDR_VAR 0 2
67801: PUSH
67802: LD_VAR 0 2
67806: PPUSH
67807: LD_INT 4
67809: PPUSH
67810: LD_VAR 0 2
67814: PUSH
67815: LD_INT 4
67817: ARRAY
67818: PUSH
67819: LD_VAR 0 4
67823: PLUS
67824: PPUSH
67825: CALL_OW 1
67829: ST_TO_ADDR
// end ;
67830: GO 67749
67832: POP
67833: POP
// end ;
67834: LD_VAR 0 2
67838: RET
// export function Length ( array ) ; begin
67839: LD_INT 0
67841: PPUSH
// result := array + 0 ;
67842: LD_ADDR_VAR 0 2
67846: PUSH
67847: LD_VAR 0 1
67851: PUSH
67852: LD_INT 0
67854: PLUS
67855: ST_TO_ADDR
// end ;
67856: LD_VAR 0 2
67860: RET
// export function PrepareArray ( array ) ; begin
67861: LD_INT 0
67863: PPUSH
// result := array diff 0 ;
67864: LD_ADDR_VAR 0 2
67868: PUSH
67869: LD_VAR 0 1
67873: PUSH
67874: LD_INT 0
67876: DIFF
67877: ST_TO_ADDR
// if not result [ 1 ] then
67878: LD_VAR 0 2
67882: PUSH
67883: LD_INT 1
67885: ARRAY
67886: NOT
67887: IFFALSE 67907
// result := Delete ( result , 1 ) ;
67889: LD_ADDR_VAR 0 2
67893: PUSH
67894: LD_VAR 0 2
67898: PPUSH
67899: LD_INT 1
67901: PPUSH
67902: CALL_OW 3
67906: ST_TO_ADDR
// end ;
67907: LD_VAR 0 2
67911: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67912: LD_INT 0
67914: PPUSH
67915: PPUSH
67916: PPUSH
67917: PPUSH
// sibRocketRange := 25 ;
67918: LD_ADDR_VAR 0 6
67922: PUSH
67923: LD_INT 25
67925: ST_TO_ADDR
// result := false ;
67926: LD_ADDR_VAR 0 4
67930: PUSH
67931: LD_INT 0
67933: ST_TO_ADDR
// for i := 0 to 5 do
67934: LD_ADDR_VAR 0 5
67938: PUSH
67939: DOUBLE
67940: LD_INT 0
67942: DEC
67943: ST_TO_ADDR
67944: LD_INT 5
67946: PUSH
67947: FOR_TO
67948: IFFALSE 68015
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67950: LD_VAR 0 1
67954: PPUSH
67955: LD_VAR 0 5
67959: PPUSH
67960: LD_VAR 0 6
67964: PPUSH
67965: CALL_OW 272
67969: PPUSH
67970: LD_VAR 0 2
67974: PPUSH
67975: LD_VAR 0 5
67979: PPUSH
67980: LD_VAR 0 6
67984: PPUSH
67985: CALL_OW 273
67989: PPUSH
67990: LD_VAR 0 3
67994: PPUSH
67995: CALL_OW 309
67999: IFFALSE 68013
// begin result := true ;
68001: LD_ADDR_VAR 0 4
68005: PUSH
68006: LD_INT 1
68008: ST_TO_ADDR
// exit ;
68009: POP
68010: POP
68011: GO 68017
// end ;
68013: GO 67947
68015: POP
68016: POP
// end ;
68017: LD_VAR 0 4
68021: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68022: LD_INT 0
68024: PPUSH
68025: PPUSH
68026: PPUSH
// if btype = b_depot then
68027: LD_VAR 0 2
68031: PUSH
68032: LD_INT 0
68034: EQUAL
68035: IFFALSE 68047
// begin result := true ;
68037: LD_ADDR_VAR 0 3
68041: PUSH
68042: LD_INT 1
68044: ST_TO_ADDR
// exit ;
68045: GO 68163
// end ; pom := GetBase ( depot ) ;
68047: LD_ADDR_VAR 0 4
68051: PUSH
68052: LD_VAR 0 1
68056: PPUSH
68057: CALL_OW 274
68061: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68062: LD_ADDR_VAR 0 5
68066: PUSH
68067: LD_VAR 0 2
68071: PPUSH
68072: LD_VAR 0 1
68076: PPUSH
68077: CALL_OW 248
68081: PPUSH
68082: CALL_OW 450
68086: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68087: LD_ADDR_VAR 0 3
68091: PUSH
68092: LD_VAR 0 4
68096: PPUSH
68097: LD_INT 1
68099: PPUSH
68100: CALL_OW 275
68104: PUSH
68105: LD_VAR 0 5
68109: PUSH
68110: LD_INT 1
68112: ARRAY
68113: GREATEREQUAL
68114: PUSH
68115: LD_VAR 0 4
68119: PPUSH
68120: LD_INT 2
68122: PPUSH
68123: CALL_OW 275
68127: PUSH
68128: LD_VAR 0 5
68132: PUSH
68133: LD_INT 2
68135: ARRAY
68136: GREATEREQUAL
68137: AND
68138: PUSH
68139: LD_VAR 0 4
68143: PPUSH
68144: LD_INT 3
68146: PPUSH
68147: CALL_OW 275
68151: PUSH
68152: LD_VAR 0 5
68156: PUSH
68157: LD_INT 3
68159: ARRAY
68160: GREATEREQUAL
68161: AND
68162: ST_TO_ADDR
// end ;
68163: LD_VAR 0 3
68167: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68168: LD_INT 0
68170: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68171: LD_VAR 0 1
68175: PPUSH
68176: LD_VAR 0 2
68180: PPUSH
68181: LD_INT 0
68183: PPUSH
68184: LD_INT 0
68186: PPUSH
68187: LD_INT 1
68189: PPUSH
68190: LD_INT 0
68192: PPUSH
68193: CALL_OW 587
// end ;
68197: LD_VAR 0 3
68201: RET
// export function CenterOnNow ( unit ) ; begin
68202: LD_INT 0
68204: PPUSH
// result := IsInUnit ( unit ) ;
68205: LD_ADDR_VAR 0 2
68209: PUSH
68210: LD_VAR 0 1
68214: PPUSH
68215: CALL_OW 310
68219: ST_TO_ADDR
// if not result then
68220: LD_VAR 0 2
68224: NOT
68225: IFFALSE 68237
// result := unit ;
68227: LD_ADDR_VAR 0 2
68231: PUSH
68232: LD_VAR 0 1
68236: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68237: LD_VAR 0 1
68241: PPUSH
68242: CALL_OW 87
// end ;
68246: LD_VAR 0 2
68250: RET
// export function ComMoveHex ( unit , hex ) ; begin
68251: LD_INT 0
68253: PPUSH
// if not hex then
68254: LD_VAR 0 2
68258: NOT
68259: IFFALSE 68263
// exit ;
68261: GO 68316
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68263: LD_VAR 0 2
68267: PUSH
68268: LD_INT 1
68270: ARRAY
68271: PPUSH
68272: LD_VAR 0 2
68276: PUSH
68277: LD_INT 2
68279: ARRAY
68280: PPUSH
68281: CALL_OW 428
68285: IFFALSE 68289
// exit ;
68287: GO 68316
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68289: LD_VAR 0 1
68293: PPUSH
68294: LD_VAR 0 2
68298: PUSH
68299: LD_INT 1
68301: ARRAY
68302: PPUSH
68303: LD_VAR 0 2
68307: PUSH
68308: LD_INT 2
68310: ARRAY
68311: PPUSH
68312: CALL_OW 111
// end ;
68316: LD_VAR 0 3
68320: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68321: LD_INT 0
68323: PPUSH
68324: PPUSH
68325: PPUSH
// if not unit or not enemy then
68326: LD_VAR 0 1
68330: NOT
68331: PUSH
68332: LD_VAR 0 2
68336: NOT
68337: OR
68338: IFFALSE 68342
// exit ;
68340: GO 68466
// x := GetX ( enemy ) ;
68342: LD_ADDR_VAR 0 4
68346: PUSH
68347: LD_VAR 0 2
68351: PPUSH
68352: CALL_OW 250
68356: ST_TO_ADDR
// y := GetY ( enemy ) ;
68357: LD_ADDR_VAR 0 5
68361: PUSH
68362: LD_VAR 0 2
68366: PPUSH
68367: CALL_OW 251
68371: ST_TO_ADDR
// if ValidHex ( x , y ) then
68372: LD_VAR 0 4
68376: PPUSH
68377: LD_VAR 0 5
68381: PPUSH
68382: CALL_OW 488
68386: IFFALSE 68466
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68388: LD_VAR 0 2
68392: PPUSH
68393: CALL_OW 247
68397: PUSH
68398: LD_INT 3
68400: PUSH
68401: LD_INT 2
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: IN
68408: PUSH
68409: LD_VAR 0 1
68413: PPUSH
68414: CALL_OW 255
68418: PPUSH
68419: LD_VAR 0 2
68423: PPUSH
68424: CALL_OW 292
68428: OR
68429: IFFALSE 68447
// ComAttackUnit ( unit , enemy ) else
68431: LD_VAR 0 1
68435: PPUSH
68436: LD_VAR 0 2
68440: PPUSH
68441: CALL_OW 115
68445: GO 68466
// ComAgressiveMove ( unit , x , y ) ;
68447: LD_VAR 0 1
68451: PPUSH
68452: LD_VAR 0 4
68456: PPUSH
68457: LD_VAR 0 5
68461: PPUSH
68462: CALL_OW 114
// end ;
68466: LD_VAR 0 3
68470: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68471: LD_INT 0
68473: PPUSH
68474: PPUSH
68475: PPUSH
// list := AreaToList ( area , 0 ) ;
68476: LD_ADDR_VAR 0 5
68480: PUSH
68481: LD_VAR 0 1
68485: PPUSH
68486: LD_INT 0
68488: PPUSH
68489: CALL_OW 517
68493: ST_TO_ADDR
// if not list then
68494: LD_VAR 0 5
68498: NOT
68499: IFFALSE 68503
// exit ;
68501: GO 68633
// if all then
68503: LD_VAR 0 2
68507: IFFALSE 68595
// begin for i := 1 to list [ 1 ] do
68509: LD_ADDR_VAR 0 4
68513: PUSH
68514: DOUBLE
68515: LD_INT 1
68517: DEC
68518: ST_TO_ADDR
68519: LD_VAR 0 5
68523: PUSH
68524: LD_INT 1
68526: ARRAY
68527: PUSH
68528: FOR_TO
68529: IFFALSE 68591
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68531: LD_ADDR_VAR 0 3
68535: PUSH
68536: LD_VAR 0 3
68540: PPUSH
68541: LD_VAR 0 3
68545: PUSH
68546: LD_INT 1
68548: PLUS
68549: PPUSH
68550: LD_VAR 0 5
68554: PUSH
68555: LD_INT 1
68557: ARRAY
68558: PUSH
68559: LD_VAR 0 4
68563: ARRAY
68564: PUSH
68565: LD_VAR 0 5
68569: PUSH
68570: LD_INT 2
68572: ARRAY
68573: PUSH
68574: LD_VAR 0 4
68578: ARRAY
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PPUSH
68584: CALL_OW 1
68588: ST_TO_ADDR
68589: GO 68528
68591: POP
68592: POP
// exit ;
68593: GO 68633
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68595: LD_ADDR_VAR 0 3
68599: PUSH
68600: LD_VAR 0 5
68604: PUSH
68605: LD_INT 1
68607: ARRAY
68608: PUSH
68609: LD_INT 1
68611: ARRAY
68612: PUSH
68613: LD_VAR 0 5
68617: PUSH
68618: LD_INT 2
68620: ARRAY
68621: PUSH
68622: LD_INT 1
68624: ARRAY
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: EMPTY
68631: LIST
68632: ST_TO_ADDR
// end ;
68633: LD_VAR 0 3
68637: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68638: LD_INT 0
68640: PPUSH
68641: PPUSH
// list := AreaToList ( area , 0 ) ;
68642: LD_ADDR_VAR 0 4
68646: PUSH
68647: LD_VAR 0 1
68651: PPUSH
68652: LD_INT 0
68654: PPUSH
68655: CALL_OW 517
68659: ST_TO_ADDR
// if not list then
68660: LD_VAR 0 4
68664: NOT
68665: IFFALSE 68669
// exit ;
68667: GO 68710
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68669: LD_ADDR_VAR 0 3
68673: PUSH
68674: LD_VAR 0 4
68678: PUSH
68679: LD_INT 1
68681: ARRAY
68682: PUSH
68683: LD_INT 1
68685: ARRAY
68686: PUSH
68687: LD_VAR 0 4
68691: PUSH
68692: LD_INT 2
68694: ARRAY
68695: PUSH
68696: LD_INT 1
68698: ARRAY
68699: PUSH
68700: LD_VAR 0 2
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: LIST
68709: ST_TO_ADDR
// end ;
68710: LD_VAR 0 3
68714: RET
// export function First ( array ) ; begin
68715: LD_INT 0
68717: PPUSH
// if not array then
68718: LD_VAR 0 1
68722: NOT
68723: IFFALSE 68727
// exit ;
68725: GO 68741
// result := array [ 1 ] ;
68727: LD_ADDR_VAR 0 2
68731: PUSH
68732: LD_VAR 0 1
68736: PUSH
68737: LD_INT 1
68739: ARRAY
68740: ST_TO_ADDR
// end ;
68741: LD_VAR 0 2
68745: RET
// export function Last ( array ) ; begin
68746: LD_INT 0
68748: PPUSH
// if not array then
68749: LD_VAR 0 1
68753: NOT
68754: IFFALSE 68758
// exit ;
68756: GO 68774
// result := array [ array ] ;
68758: LD_ADDR_VAR 0 2
68762: PUSH
68763: LD_VAR 0 1
68767: PUSH
68768: LD_VAR 0 1
68772: ARRAY
68773: ST_TO_ADDR
// end ;
68774: LD_VAR 0 2
68778: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68779: LD_INT 0
68781: PPUSH
68782: PPUSH
// result := [ ] ;
68783: LD_ADDR_VAR 0 5
68787: PUSH
68788: EMPTY
68789: ST_TO_ADDR
// if not array then
68790: LD_VAR 0 1
68794: NOT
68795: IFFALSE 68799
// exit ;
68797: GO 68911
// for i := 1 to array do
68799: LD_ADDR_VAR 0 6
68803: PUSH
68804: DOUBLE
68805: LD_INT 1
68807: DEC
68808: ST_TO_ADDR
68809: LD_VAR 0 1
68813: PUSH
68814: FOR_TO
68815: IFFALSE 68909
// if array [ i ] [ index ] = value then
68817: LD_VAR 0 1
68821: PUSH
68822: LD_VAR 0 6
68826: ARRAY
68827: PUSH
68828: LD_VAR 0 2
68832: ARRAY
68833: PUSH
68834: LD_VAR 0 3
68838: EQUAL
68839: IFFALSE 68907
// begin if indexColumn then
68841: LD_VAR 0 4
68845: IFFALSE 68881
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68847: LD_ADDR_VAR 0 5
68851: PUSH
68852: LD_VAR 0 5
68856: PPUSH
68857: LD_VAR 0 1
68861: PUSH
68862: LD_VAR 0 6
68866: ARRAY
68867: PUSH
68868: LD_VAR 0 4
68872: ARRAY
68873: PPUSH
68874: CALL 64103 0 2
68878: ST_TO_ADDR
68879: GO 68907
// result := Join ( result , array [ i ] ) ;
68881: LD_ADDR_VAR 0 5
68885: PUSH
68886: LD_VAR 0 5
68890: PPUSH
68891: LD_VAR 0 1
68895: PUSH
68896: LD_VAR 0 6
68900: ARRAY
68901: PPUSH
68902: CALL 64103 0 2
68906: ST_TO_ADDR
// end ;
68907: GO 68814
68909: POP
68910: POP
// end ;
68911: LD_VAR 0 5
68915: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
68916: LD_INT 0
68918: PPUSH
// if not vehicles or not parkingPoint then
68919: LD_VAR 0 1
68923: NOT
68924: PUSH
68925: LD_VAR 0 2
68929: NOT
68930: OR
68931: IFFALSE 68935
// exit ;
68933: GO 69033
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
68935: LD_ADDR_VAR 0 1
68939: PUSH
68940: LD_VAR 0 1
68944: PPUSH
68945: LD_INT 50
68947: PUSH
68948: EMPTY
68949: LIST
68950: PUSH
68951: LD_INT 3
68953: PUSH
68954: LD_INT 92
68956: PUSH
68957: LD_VAR 0 2
68961: PUSH
68962: LD_INT 1
68964: ARRAY
68965: PUSH
68966: LD_VAR 0 2
68970: PUSH
68971: LD_INT 2
68973: ARRAY
68974: PUSH
68975: LD_INT 8
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PPUSH
68992: CALL_OW 72
68996: ST_TO_ADDR
// if not vehicles then
68997: LD_VAR 0 1
69001: NOT
69002: IFFALSE 69006
// exit ;
69004: GO 69033
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69006: LD_VAR 0 1
69010: PPUSH
69011: LD_VAR 0 2
69015: PUSH
69016: LD_INT 1
69018: ARRAY
69019: PPUSH
69020: LD_VAR 0 2
69024: PUSH
69025: LD_INT 2
69027: ARRAY
69028: PPUSH
69029: CALL_OW 111
// end ;
69033: LD_VAR 0 3
69037: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69038: LD_INT 0
69040: PPUSH
69041: PPUSH
69042: PPUSH
// if not side or not area then
69043: LD_VAR 0 1
69047: NOT
69048: PUSH
69049: LD_VAR 0 2
69053: NOT
69054: OR
69055: IFFALSE 69059
// exit ;
69057: GO 69178
// tmp := AreaToList ( area , 0 ) ;
69059: LD_ADDR_VAR 0 5
69063: PUSH
69064: LD_VAR 0 2
69068: PPUSH
69069: LD_INT 0
69071: PPUSH
69072: CALL_OW 517
69076: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69077: LD_ADDR_VAR 0 4
69081: PUSH
69082: DOUBLE
69083: LD_INT 1
69085: DEC
69086: ST_TO_ADDR
69087: LD_VAR 0 5
69091: PUSH
69092: LD_INT 1
69094: ARRAY
69095: PUSH
69096: FOR_TO
69097: IFFALSE 69176
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69099: LD_VAR 0 5
69103: PUSH
69104: LD_INT 1
69106: ARRAY
69107: PUSH
69108: LD_VAR 0 4
69112: ARRAY
69113: PPUSH
69114: LD_VAR 0 5
69118: PUSH
69119: LD_INT 2
69121: ARRAY
69122: PUSH
69123: LD_VAR 0 4
69127: ARRAY
69128: PPUSH
69129: CALL_OW 351
69133: IFFALSE 69174
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69135: LD_VAR 0 5
69139: PUSH
69140: LD_INT 1
69142: ARRAY
69143: PUSH
69144: LD_VAR 0 4
69148: ARRAY
69149: PPUSH
69150: LD_VAR 0 5
69154: PUSH
69155: LD_INT 2
69157: ARRAY
69158: PUSH
69159: LD_VAR 0 4
69163: ARRAY
69164: PPUSH
69165: LD_VAR 0 1
69169: PPUSH
69170: CALL_OW 244
// end ;
69174: GO 69096
69176: POP
69177: POP
// end ;
69178: LD_VAR 0 3
69182: RET
