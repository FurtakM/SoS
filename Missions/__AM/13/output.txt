// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 909 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2064 0 0
// PrepareHeroes ;
  82: CALL 1089 0 0
// PrepareRandoms ;
  86: CALL 3427 0 0
// Action ;
  90: CALL 5217 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 806
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 581: LD_STRING enableBioCharacter(BIO_HUGH)
 583: PPUSH
 584: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_STRING Lisa
 595: PPUSH
 596: LD_EXP 22
 600: PPUSH
 601: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 605: LD_EXP 8
 609: PPUSH
 610: LD_STRING Brown
 612: PPUSH
 613: LD_EXP 22
 617: PPUSH
 618: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 622: LD_EXP 4
 626: PPUSH
 627: LD_STRING Donaldson
 629: PPUSH
 630: LD_EXP 22
 634: PPUSH
 635: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_STRING Bobby
 646: PPUSH
 647: LD_EXP 22
 651: PPUSH
 652: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_STRING Cyrus
 663: PPUSH
 664: LD_EXP 22
 668: PPUSH
 669: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 673: LD_EXP 7
 677: PPUSH
 678: LD_STRING Denis
 680: PPUSH
 681: LD_EXP 22
 685: PPUSH
 686: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 690: LD_EXP 9
 694: PPUSH
 695: LD_STRING Gladstone
 697: PPUSH
 698: LD_EXP 22
 702: PPUSH
 703: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 707: LD_EXP 10
 711: PPUSH
 712: LD_STRING Houten
 714: PPUSH
 715: LD_EXP 22
 719: PPUSH
 720: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_STRING Cornel
 731: PPUSH
 732: LD_EXP 22
 736: PPUSH
 737: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 741: LD_EXP 12
 745: PPUSH
 746: LD_STRING Gary
 748: PPUSH
 749: LD_EXP 22
 753: PPUSH
 754: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 758: LD_EXP 13
 762: PPUSH
 763: LD_STRING Frank
 765: PPUSH
 766: LD_EXP 22
 770: PPUSH
 771: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 775: LD_EXP 14
 779: PPUSH
 780: LD_STRING Kikuchi
 782: PPUSH
 783: LD_EXP 22
 787: PPUSH
 788: CALL 4223 0 3
// SaveCargos ;
 792: CALL 809 0 0
// ChangeMap ( 13 , %_cont ) ;
 796: LD_INT 13
 798: PPUSH
 799: LD_STRING %_cont
 801: PPUSH
 802: CALL_OW 340
// end ;
 806: PPOPN 2
 808: END
// export function SaveCargos ; var i ; begin
 809: LD_INT 0
 811: PPUSH
 812: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: LD_INT 2
 820: PPUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 33
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 34
 843: PUSH
 844: LD_INT 12
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL_OW 70
 860: PUSH
 861: FOR_IN
 862: IFFALSE 890
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 864: LD_ADDR_EXP 20
 868: PUSH
 869: LD_EXP 20
 873: PUSH
 874: LD_VAR 0 2
 878: PPUSH
 879: CALL 67635 0 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: ADD
 887: ST_TO_ADDR
 888: GO 861
 890: POP
 891: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 892: LD_EXP 20
 896: PPUSH
 897: LD_STRING 13_ResourcesInCargo13_1
 899: PPUSH
 900: CALL_OW 39
// end ;
 904: LD_VAR 0 1
 908: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_STRING 10_EpsilonEnv
 924: PPUSH
 925: EMPTY
 926: PPUSH
 927: CALL_OW 30
 931: ST_TO_ADDR
// if not tmp then
 932: LD_VAR 0 2
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1084
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 941: LD_ADDR_VAR 0 3
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 353
 953: ST_TO_ADDR
// if not list then
 954: LD_VAR 0 3
 958: NOT
 959: IFFALSE 963
// exit ;
 961: GO 1084
// for i in list do
 963: LD_ADDR_VAR 0 4
 967: PUSH
 968: LD_VAR 0 3
 972: PUSH
 973: FOR_IN
 974: IFFALSE 1082
// begin exist := false ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: LD_INT 0
 983: ST_TO_ADDR
// for j in tmp do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: LD_VAR 0 2
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1049
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 997: LD_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PUSH
1006: LD_VAR 0 5
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: EQUAL
1015: PUSH
1016: LD_VAR 0 4
1020: PUSH
1021: LD_INT 2
1023: ARRAY
1024: PUSH
1025: LD_VAR 0 5
1029: PUSH
1030: LD_INT 2
1032: ARRAY
1033: EQUAL
1034: AND
1035: IFFALSE 1047
// begin exist := true ;
1037: LD_ADDR_VAR 0 6
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// break ;
1045: GO 1049
// end ;
1047: GO 994
1049: POP
1050: POP
// if not exist then
1051: LD_VAR 0 6
1055: NOT
1056: IFFALSE 1080
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 4
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 347
// end ;
1080: GO 973
1082: POP
1083: POP
// end ; end_of_file
1084: LD_VAR 0 1
1088: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: LD_INT 22
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 23
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 30
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// if tmp then
1161: LD_VAR 0 4
1165: IFFALSE 1287
// begin x := GetX ( tmp [ 1 ] ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1186: LD_ADDR_VAR 0 6
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 251
1204: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1205: LD_VAR 0 4
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_STRING epsilon
1216: PPUSH
1217: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1221: LD_ADDR_VAR 0 7
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 274
1239: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1240: LD_VAR 0 7
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 3000
1250: PPUSH
1251: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1255: LD_VAR 0 7
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 500
1265: PPUSH
1266: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1270: LD_VAR 0 7
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 200
1280: PPUSH
1281: CALL_OW 277
// end else
1285: GO 1303
// begin x := 104 ;
1287: LD_ADDR_VAR 0 5
1291: PUSH
1292: LD_INT 104
1294: ST_TO_ADDR
// y := 32 ;
1295: LD_ADDR_VAR 0 6
1299: PUSH
1300: LD_INT 32
1302: ST_TO_ADDR
// end ; uc_side := 1 ;
1303: LD_ADDR_OWVAR 20
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1311: LD_ADDR_EXP 1
1315: PUSH
1316: LD_STRING JMM
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 3697 0 2
1326: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1327: LD_ADDR_EXP 3
1331: PUSH
1332: LD_STRING Lisa
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 3697 0 2
1342: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1343: LD_ADDR_EXP 4
1347: PUSH
1348: LD_STRING Donaldson
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 3697 0 2
1358: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1359: LD_ADDR_EXP 5
1363: PUSH
1364: LD_STRING Bobby
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 3697 0 2
1374: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1375: LD_ADDR_EXP 6
1379: PUSH
1380: LD_STRING Cyrus
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL 3697 0 2
1390: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1391: LD_ADDR_EXP 7
1395: PUSH
1396: LD_STRING Denis
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: CALL 3697 0 2
1406: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1407: LD_ADDR_EXP 8
1411: PUSH
1412: LD_STRING Brown
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 3697 0 2
1422: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: LD_STRING Gladstone
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL 3697 0 2
1438: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_STRING Houten
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL 3697 0 2
1454: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1455: LD_ADDR_EXP 11
1459: PUSH
1460: LD_STRING Cornell
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL 3697 0 2
1470: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_STRING Gary
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL 3697 0 2
1486: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1487: LD_ADDR_EXP 13
1491: PUSH
1492: LD_STRING Frank
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL 3697 0 2
1502: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1503: LD_ADDR_EXP 14
1507: PUSH
1508: LD_STRING Kikuchi
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL 3697 0 2
1518: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_STRING Stevens
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL 3697 0 2
1534: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_STRING Powell
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL 3697 0 2
1550: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_VAR 0 6
1565: PPUSH
1566: LD_INT 4
1568: PPUSH
1569: LD_INT 0
1571: PPUSH
1572: CALL 3870 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1576: LD_EXP 15
1580: PPUSH
1581: LD_VAR 0 5
1585: PPUSH
1586: LD_VAR 0 6
1590: PPUSH
1591: LD_INT 4
1593: PPUSH
1594: LD_INT 0
1596: PPUSH
1597: CALL 3870 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1601: LD_EXP 3
1605: PPUSH
1606: LD_VAR 0 5
1610: PPUSH
1611: LD_VAR 0 6
1615: PPUSH
1616: LD_INT 35
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 3870 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1626: LD_EXP 4
1630: PPUSH
1631: LD_VAR 0 5
1635: PPUSH
1636: LD_VAR 0 6
1640: PPUSH
1641: LD_INT 35
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: CALL 3870 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 6
1665: PPUSH
1666: LD_INT 35
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL 3870 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_VAR 0 5
1685: PPUSH
1686: LD_VAR 0 6
1690: PPUSH
1691: LD_INT 35
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: CALL 3870 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1701: LD_EXP 7
1705: PPUSH
1706: LD_VAR 0 5
1710: PPUSH
1711: LD_VAR 0 6
1715: PPUSH
1716: LD_INT 35
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL 3870 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_VAR 0 5
1735: PPUSH
1736: LD_VAR 0 6
1740: PPUSH
1741: LD_INT 35
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 3870 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1751: LD_EXP 9
1755: PPUSH
1756: LD_VAR 0 5
1760: PPUSH
1761: LD_VAR 0 6
1765: PPUSH
1766: LD_INT 35
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL 3870 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1776: LD_EXP 10
1780: PPUSH
1781: LD_VAR 0 5
1785: PPUSH
1786: LD_VAR 0 6
1790: PPUSH
1791: LD_INT 35
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL 3870 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1801: LD_EXP 11
1805: PPUSH
1806: LD_VAR 0 5
1810: PPUSH
1811: LD_VAR 0 6
1815: PPUSH
1816: LD_INT 35
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL 3870 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1826: LD_EXP 12
1830: PPUSH
1831: LD_VAR 0 5
1835: PPUSH
1836: LD_VAR 0 6
1840: PPUSH
1841: LD_INT 35
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL 3870 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1851: LD_EXP 13
1855: PPUSH
1856: LD_VAR 0 5
1860: PPUSH
1861: LD_VAR 0 6
1865: PPUSH
1866: LD_INT 35
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL 3870 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1876: LD_EXP 14
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: LD_VAR 0 6
1890: PPUSH
1891: LD_INT 35
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL 3870 0 5
// SetClass ( JMM , 1 ) ;
1901: LD_EXP 1
1905: PPUSH
1906: LD_INT 1
1908: PPUSH
1909: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1913: LD_ADDR_EXP 16
1917: PUSH
1918: LD_STRING 12_other_survivors
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1926: LD_ADDR_EXP 17
1930: PUSH
1931: LD_STRING 12_others
1933: PPUSH
1934: CALL_OW 31
1938: ST_TO_ADDR
// for i in others11 do
1939: LD_ADDR_VAR 0 2
1943: PUSH
1944: LD_EXP 17
1948: PUSH
1949: FOR_IN
1950: IFFALSE 1997
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 4
1961: PUSH
1962: LD_INT 1
1964: ARRAY
1965: PPUSH
1966: CALL_OW 250
1970: PPUSH
1971: LD_VAR 0 4
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 251
1984: PPUSH
1985: LD_INT 15
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL 3870 0 5
1995: GO 1949
1997: POP
1998: POP
// for i in others12 do
1999: LD_ADDR_VAR 0 2
2003: PUSH
2004: LD_EXP 16
2008: PUSH
2009: FOR_IN
2010: IFFALSE 2057
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_VAR 0 4
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 250
2030: PPUSH
2031: LD_VAR 0 4
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: PPUSH
2040: CALL_OW 251
2044: PPUSH
2045: LD_INT 15
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL 3870 0 5
2055: GO 2009
2057: POP
2058: POP
// end ;
2059: LD_VAR 0 1
2063: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2064: LD_INT 0
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
2070: PPUSH
2071: PPUSH
2072: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2073: LD_INT 113
2075: PPUSH
2076: LD_INT 50
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2086: LD_INT 99
2088: PPUSH
2089: LD_INT 19
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2099: LD_INT 43
2101: PPUSH
2102: LD_INT 79
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2112: LD_INT 43
2114: PPUSH
2115: LD_INT 68
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2125: LD_INT 99
2127: PPUSH
2128: LD_INT 114
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 114
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2151: LD_INT 152
2153: PPUSH
2154: LD_INT 85
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2164: LD_INT 156
2166: PPUSH
2167: LD_INT 92
2169: PPUSH
2170: LD_INT 1
2172: PPUSH
2173: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: LD_STRING 10_EpsilonBase
2184: PPUSH
2185: EMPTY
2186: PPUSH
2187: CALL_OW 30
2191: ST_TO_ADDR
// if not blist then
2192: LD_VAR 0 2
2196: NOT
2197: IFFALSE 2201
// exit ;
2199: GO 3422
// for i in blist do
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: LD_VAR 0 2
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2254
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: PUSH
2227: LD_VAR 0 3
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PUSH
2236: LD_INT 1
2238: EQUAL
2239: OR
2240: IFFALSE 2252
// begin baseCorrect := 1 ;
2242: LD_ADDR_VAR 0 6
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// break ;
2250: GO 2254
// end ;
2252: GO 2211
2254: POP
2255: POP
// if baseCorrect = 0 then
2256: LD_VAR 0 6
2260: PUSH
2261: LD_INT 0
2263: EQUAL
2264: IFFALSE 2971
// begin uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// bc_level := 10 ;
2282: LD_ADDR_OWVAR 43
2286: PUSH
2287: LD_INT 10
2289: ST_TO_ADDR
// bc_type := b_warehouse ;
2290: LD_ADDR_OWVAR 42
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2298: LD_INT 99
2300: PPUSH
2301: LD_INT 24
2303: PPUSH
2304: LD_INT 2
2306: PPUSH
2307: CALL_OW 47
// bc_type := b_bunker ;
2311: LD_ADDR_OWVAR 42
2315: PUSH
2316: LD_INT 32
2318: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2319: LD_ADDR_VAR 0 7
2323: PUSH
2324: LD_INT 124
2326: PPUSH
2327: LD_INT 42
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 47
2337: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2338: LD_VAR 0 7
2342: PPUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 5
2348: PUSH
2349: LD_INT 6
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: CALL_OW 12
2367: ARRAY
2368: PPUSH
2369: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2373: LD_ADDR_VAR 0 7
2377: PUSH
2378: LD_INT 111
2380: PPUSH
2381: LD_INT 16
2383: PPUSH
2384: LD_INT 4
2386: PPUSH
2387: CALL_OW 47
2391: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2392: LD_VAR 0 7
2396: PPUSH
2397: LD_INT 4
2399: PUSH
2400: LD_INT 5
2402: PUSH
2403: LD_INT 6
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 3
2416: PPUSH
2417: CALL_OW 12
2421: ARRAY
2422: PPUSH
2423: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2427: LD_ADDR_VAR 0 7
2431: PUSH
2432: LD_INT 113
2434: PPUSH
2435: LD_INT 21
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: CALL_OW 47
2445: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2446: LD_VAR 0 7
2450: PPUSH
2451: LD_INT 4
2453: PUSH
2454: LD_INT 5
2456: PUSH
2457: LD_INT 6
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 1
2467: PPUSH
2468: LD_INT 3
2470: PPUSH
2471: CALL_OW 12
2475: ARRAY
2476: PPUSH
2477: CALL_OW 431
// bc_type := 33 ;
2481: LD_ADDR_OWVAR 42
2485: PUSH
2486: LD_INT 33
2488: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_INT 95
2496: PPUSH
2497: LD_INT 41
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 47
2507: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2508: LD_VAR 0 7
2512: PPUSH
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ARRAY
2538: PPUSH
2539: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2543: LD_ADDR_VAR 0 7
2547: PUSH
2548: LD_INT 97
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: CALL_OW 47
2561: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2562: LD_VAR 0 7
2566: PPUSH
2567: LD_INT 4
2569: PUSH
2570: LD_INT 5
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 1
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL_OW 12
2591: ARRAY
2592: PPUSH
2593: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2597: LD_ADDR_VAR 0 7
2601: PUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 19
2607: PPUSH
2608: LD_INT 1
2610: PPUSH
2611: CALL_OW 47
2615: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2616: LD_VAR 0 7
2620: PPUSH
2621: LD_INT 4
2623: PUSH
2624: LD_INT 5
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 1
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: CALL_OW 12
2645: ARRAY
2646: PPUSH
2647: CALL_OW 431
// bc_type := 30 ;
2651: LD_ADDR_OWVAR 42
2655: PUSH
2656: LD_INT 30
2658: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2659: LD_INT 104
2661: PPUSH
2662: LD_INT 24
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 47
// bc_type := 29 ;
2672: LD_ADDR_OWVAR 42
2676: PUSH
2677: LD_INT 29
2679: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2680: LD_INT 113
2682: PPUSH
2683: LD_INT 50
2685: PPUSH
2686: LD_INT 3
2688: PPUSH
2689: CALL_OW 47
// bc_type := 27 ;
2693: LD_ADDR_OWVAR 42
2697: PUSH
2698: LD_INT 27
2700: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2701: LD_INT 98
2703: PPUSH
2704: LD_INT 26
2706: PPUSH
2707: LD_INT 2
2709: PPUSH
2710: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2714: LD_INT 95
2716: PPUSH
2717: LD_INT 23
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: CALL_OW 47
// bc_type := 28 ;
2727: LD_ADDR_OWVAR 42
2731: PUSH
2732: LD_INT 28
2734: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2735: LD_INT 107
2737: PPUSH
2738: LD_INT 32
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 47
// bc_type := 3 ;
2748: LD_ADDR_OWVAR 42
2752: PUSH
2753: LD_INT 3
2755: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2756: LD_INT 106
2758: PPUSH
2759: LD_INT 42
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL_OW 47
// bc_type := 16 ;
2769: LD_ADDR_OWVAR 42
2773: PUSH
2774: LD_INT 16
2776: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2777: LD_INT 109
2779: PPUSH
2780: LD_INT 45
2782: PPUSH
2783: LD_INT 5
2785: PPUSH
2786: CALL_OW 47
// bc_type := 17 ;
2790: LD_ADDR_OWVAR 42
2794: PUSH
2795: LD_INT 17
2797: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2798: LD_INT 106
2800: PPUSH
2801: LD_INT 46
2803: PPUSH
2804: LD_INT 0
2806: PPUSH
2807: CALL_OW 47
// bc_type := 19 ;
2811: LD_ADDR_OWVAR 42
2815: PUSH
2816: LD_INT 19
2818: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2819: LD_INT 103
2821: PPUSH
2822: LD_INT 42
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: CALL_OW 47
// bc_type := 21 ;
2832: LD_ADDR_OWVAR 42
2836: PUSH
2837: LD_INT 21
2839: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2840: LD_INT 110
2842: PPUSH
2843: LD_INT 42
2845: PPUSH
2846: LD_INT 4
2848: PPUSH
2849: CALL_OW 47
// bc_type := 5 ;
2853: LD_ADDR_OWVAR 42
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2861: LD_INT 114
2863: PPUSH
2864: LD_INT 55
2866: PPUSH
2867: LD_INT 5
2869: PPUSH
2870: CALL_OW 47
// bc_type := 36 ;
2874: LD_ADDR_OWVAR 42
2878: PUSH
2879: LD_INT 36
2881: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2882: LD_INT 96
2884: PPUSH
2885: LD_INT 28
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 47
// bc_type := b_lab_full ;
2895: LD_ADDR_OWVAR 42
2899: PUSH
2900: LD_INT 8
2902: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2903: LD_ADDR_OWVAR 44
2907: PUSH
2908: LD_INT 15
2910: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2911: LD_ADDR_OWVAR 45
2915: PUSH
2916: LD_INT 11
2918: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2919: LD_INT 116
2921: PPUSH
2922: LD_INT 38
2924: PPUSH
2925: LD_INT 4
2927: PPUSH
2928: CALL_OW 47
// bc_type := b_lab_full ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 8
2939: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2940: LD_ADDR_OWVAR 44
2944: PUSH
2945: LD_INT 10
2947: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2948: LD_ADDR_OWVAR 45
2952: PUSH
2953: LD_INT 12
2955: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2956: LD_INT 112
2958: PPUSH
2959: LD_INT 29
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 47
// end else
2969: GO 3219
// begin uc_side := 1 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// for i in blist do
2979: LD_ADDR_VAR 0 3
2983: PUSH
2984: LD_VAR 0 2
2988: PUSH
2989: FOR_IN
2990: IFFALSE 3217
// begin InitBc ;
2992: CALL_OW 21
// uc_nation := i [ 6 ] ;
2996: LD_ADDR_OWVAR 21
3000: PUSH
3001: LD_VAR 0 3
3005: PUSH
3006: LD_INT 6
3008: ARRAY
3009: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3010: LD_ADDR_OWVAR 42
3014: PUSH
3015: LD_VAR 0 3
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3024: LD_ADDR_OWVAR 43
3028: PUSH
3029: LD_VAR 0 3
3033: PUSH
3034: LD_INT 5
3036: ARRAY
3037: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3038: LD_VAR 0 3
3042: PUSH
3043: LD_INT 1
3045: ARRAY
3046: PUSH
3047: LD_INT 7
3049: PUSH
3050: LD_INT 8
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: IN
3057: IFFALSE 3087
// begin bc_kind1 := i [ 7 ] ;
3059: LD_ADDR_OWVAR 44
3063: PUSH
3064: LD_VAR 0 3
3068: PUSH
3069: LD_INT 7
3071: ARRAY
3072: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3073: LD_ADDR_OWVAR 45
3077: PUSH
3078: LD_VAR 0 3
3082: PUSH
3083: LD_INT 8
3085: ARRAY
3086: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3087: LD_ADDR_VAR 0 4
3091: PUSH
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 2
3099: ARRAY
3100: PPUSH
3101: LD_VAR 0 3
3105: PUSH
3106: LD_INT 3
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 3
3114: PUSH
3115: LD_INT 4
3117: ARRAY
3118: PPUSH
3119: CALL_OW 47
3123: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3124: LD_VAR 0 4
3128: PPUSH
3129: CALL_OW 266
3133: PUSH
3134: LD_INT 32
3136: PUSH
3137: LD_INT 33
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: IN
3144: IFFALSE 3215
// if i [ 7 ] then
3146: LD_VAR 0 3
3150: PUSH
3151: LD_INT 7
3153: ARRAY
3154: IFFALSE 3176
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3156: LD_VAR 0 4
3160: PPUSH
3161: LD_VAR 0 3
3165: PUSH
3166: LD_INT 7
3168: ARRAY
3169: PPUSH
3170: CALL_OW 431
3174: GO 3215
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3176: LD_VAR 0 4
3180: PPUSH
3181: LD_INT 11
3183: PUSH
3184: LD_INT 7
3186: PUSH
3187: LD_INT 4
3189: PUSH
3190: LD_INT 5
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 4
3204: PPUSH
3205: CALL_OW 12
3209: ARRAY
3210: PPUSH
3211: CALL_OW 431
// end ;
3215: GO 2989
3217: POP
3218: POP
// end ; uc_side := 1 ;
3219: LD_ADDR_OWVAR 20
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// uc_nation := 1 ;
3227: LD_ADDR_OWVAR 21
3231: PUSH
3232: LD_INT 1
3234: ST_TO_ADDR
// for i := 1 to 8 do
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: DOUBLE
3241: LD_INT 1
3243: DEC
3244: ST_TO_ADDR
3245: LD_INT 8
3247: PUSH
3248: FOR_TO
3249: IFFALSE 3420
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3251: LD_ADDR_OWVAR 37
3255: PUSH
3256: LD_INT 5
3258: PUSH
3259: LD_INT 5
3261: PUSH
3262: LD_INT 3
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_INT 4
3279: PPUSH
3280: CALL_OW 12
3284: ARRAY
3285: ST_TO_ADDR
// vc_engine := engine_siberite ;
3286: LD_ADDR_OWVAR 39
3290: PUSH
3291: LD_INT 3
3293: ST_TO_ADDR
// vc_control := control_manual ;
3294: LD_ADDR_OWVAR 38
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3302: LD_OWVAR 37
3306: PUSH
3307: LD_INT 4
3309: EQUAL
3310: IFFALSE 3322
// vc_weapon := us_heavy_gun else
3312: LD_ADDR_OWVAR 40
3316: PUSH
3317: LD_INT 6
3319: ST_TO_ADDR
3320: GO 3367
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3322: LD_ADDR_OWVAR 40
3326: PUSH
3327: LD_INT 7
3329: PUSH
3330: LD_INT 9
3332: PUSH
3333: LD_INT 12
3335: PUSH
3336: LD_INT 13
3338: PUSH
3339: LD_INT 9
3341: PUSH
3342: LD_INT 9
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_VAR 0 3
3357: PUSH
3358: LD_INT 6
3360: MOD
3361: PUSH
3362: LD_INT 1
3364: PLUS
3365: ARRAY
3366: ST_TO_ADDR
// un := CreateVehicle ;
3367: LD_ADDR_VAR 0 5
3371: PUSH
3372: CALL_OW 45
3376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3377: LD_VAR 0 5
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: LD_INT 5
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_INT 78
3404: PPUSH
3405: LD_INT 31
3407: PPUSH
3408: LD_INT 8
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 50
// end ;
3418: GO 3248
3420: POP
3421: POP
// end ;
3422: LD_VAR 0 1
3426: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3433: LD_INT 22
3435: PUSH
3436: LD_INT 1
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 69
3461: PUSH
3462: LD_INT 6
3464: LESS
3465: IFFALSE 3692
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3467: LD_ADDR_VAR 0 4
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_INT 1
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 0
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 30
3497: PUSH
3498: LD_INT 1
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 69
3518: ST_TO_ADDR
// uc_side := 1 ;
3519: LD_ADDR_OWVAR 20
3523: PUSH
3524: LD_INT 1
3526: ST_TO_ADDR
// uc_nation := 1 ;
3527: LD_ADDR_OWVAR 21
3531: PUSH
3532: LD_INT 1
3534: ST_TO_ADDR
// for i := 1 to 6 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 6
3547: PUSH
3548: FOR_TO
3549: IFFALSE 3690
// begin hc_gallery :=  ;
3551: LD_ADDR_OWVAR 33
3555: PUSH
3556: LD_STRING 
3558: ST_TO_ADDR
// hc_name :=  ;
3559: LD_ADDR_OWVAR 26
3563: PUSH
3564: LD_STRING 
3566: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 2
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: LD_INT 4
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_INT 4
3593: PPUSH
3594: CALL_OW 12
3598: ARRAY
3599: PPUSH
3600: LD_INT 5
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: CALL_OW 12
3610: PPUSH
3611: CALL_OW 380
// un := CreateHuman ;
3615: LD_ADDR_VAR 0 3
3619: PUSH
3620: CALL_OW 44
3624: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3625: LD_ADDR_EXP 18
3629: PUSH
3630: LD_EXP 18
3634: PPUSH
3635: LD_VAR 0 3
3639: PPUSH
3640: CALL 64070 0 2
3644: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PPUSH
3659: CALL_OW 250
3663: PPUSH
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 1
3671: ARRAY
3672: PPUSH
3673: CALL_OW 251
3677: PPUSH
3678: LD_INT 15
3680: PPUSH
3681: LD_INT 0
3683: PPUSH
3684: CALL 3870 0 5
// end ;
3688: GO 3548
3690: POP
3691: POP
// end ; end ; end_of_file
3692: LD_VAR 0 1
3696: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
// if existMode then
3701: LD_VAR 0 2
3705: IFFALSE 3840
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3707: LD_EXP 21
3711: PUSH
3712: LD_VAR 0 1
3716: STR
3717: PPUSH
3718: CALL_OW 28
3722: IFFALSE 3747
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_EXP 21
3733: PUSH
3734: LD_VAR 0 1
3738: STR
3739: PPUSH
3740: CALL_OW 34
3744: ST_TO_ADDR
3745: GO 3838
// begin if TestCharacters ( 11_ & ident ) then
3747: LD_STRING 11_
3749: PUSH
3750: LD_VAR 0 1
3754: STR
3755: PPUSH
3756: CALL_OW 28
3760: IFFALSE 3783
// unit := CreateCharacter ( 11_ & ident ) else
3762: LD_ADDR_VAR 0 4
3766: PUSH
3767: LD_STRING 11_
3769: PUSH
3770: LD_VAR 0 1
3774: STR
3775: PPUSH
3776: CALL_OW 34
3780: ST_TO_ADDR
3781: GO 3838
// if TestCharacters ( 10c_ & ident ) then
3783: LD_STRING 10c_
3785: PUSH
3786: LD_VAR 0 1
3790: STR
3791: PPUSH
3792: CALL_OW 28
3796: IFFALSE 3819
// unit := CreateCharacter ( 10c_ & ident ) else
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_STRING 10c_
3805: PUSH
3806: LD_VAR 0 1
3810: STR
3811: PPUSH
3812: CALL_OW 34
3816: ST_TO_ADDR
3817: GO 3838
// unit := CreateCharacter ( 10_ & ident ) ;
3819: LD_ADDR_VAR 0 4
3823: PUSH
3824: LD_STRING 10_
3826: PUSH
3827: LD_VAR 0 1
3831: STR
3832: PPUSH
3833: CALL_OW 34
3837: ST_TO_ADDR
// end ; end else
3838: GO 3855
// unit := NewCharacter ( ident ) ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: CALL_OW 25
3854: ST_TO_ADDR
// result := unit ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: LD_VAR 0 4
3864: ST_TO_ADDR
// end ;
3865: LD_VAR 0 3
3869: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
3874: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3875: LD_ADDR_VAR 0 8
3879: PUSH
3880: LD_INT 22
3882: PUSH
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 255
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 21
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: LD_INT 3
3909: PUSH
3910: LD_INT 30
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 69
3933: ST_TO_ADDR
// if not tmp then
3934: LD_VAR 0 8
3938: NOT
3939: IFFALSE 3972
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_VAR 0 2
3950: PPUSH
3951: LD_VAR 0 3
3955: PPUSH
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_VAR 0 5
3965: PPUSH
3966: CALL_OW 50
// exit ;
3970: GO 4218
// end ; for i in tmp do
3972: LD_ADDR_VAR 0 7
3976: PUSH
3977: LD_VAR 0 8
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4187
// if IsNotFull ( i ) then
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL 28563 0 1
3994: IFFALSE 4185
// begin PlaceHumanInUnit ( unit , i ) ;
3996: LD_VAR 0 1
4000: PPUSH
4001: LD_VAR 0 7
4005: PPUSH
4006: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4010: LD_VAR 0 7
4014: PPUSH
4015: CALL_OW 266
4019: PUSH
4020: LD_INT 5
4022: PUSH
4023: LD_INT 4
4025: PUSH
4026: LD_INT 31
4028: PUSH
4029: LD_INT 32
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: IN
4038: IFFALSE 4071
// begin SetClass ( unit , class_soldier ) ;
4040: LD_VAR 0 1
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4052: LD_VAR 0 1
4056: PPUSH
4057: LD_VAR 0 7
4061: PPUSH
4062: CALL 59317 0 1
4066: PPUSH
4067: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4071: LD_VAR 0 7
4075: PPUSH
4076: CALL_OW 266
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: LD_INT 36
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: IN
4095: IFFALSE 4109
// SetClass ( unit , class_mechanic ) ;
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4109: LD_VAR 0 7
4113: PPUSH
4114: CALL_OW 266
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: IN
4129: IFFALSE 4143
// SetClass ( unit , class_engineer ) ;
4131: LD_VAR 0 1
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4143: LD_VAR 0 7
4147: PPUSH
4148: CALL_OW 266
4152: PUSH
4153: LD_INT 6
4155: PUSH
4156: LD_INT 7
4158: PUSH
4159: LD_INT 8
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: IN
4167: IFFALSE 4181
// SetClass ( unit , class_scientistic ) ;
4169: LD_VAR 0 1
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: CALL_OW 336
// exit ;
4181: POP
4182: POP
4183: GO 4218
// end ;
4185: GO 3982
4187: POP
4188: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4189: LD_VAR 0 1
4193: PPUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_VAR 0 4
4208: PPUSH
4209: LD_VAR 0 5
4213: PPUSH
4214: CALL_OW 50
// end ;
4218: LD_VAR 0 6
4222: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4223: LD_INT 0
4225: PPUSH
// if unit in selectedTab then
4226: LD_VAR 0 1
4230: PUSH
4231: LD_VAR 0 3
4235: IN
4236: IFFALSE 4258
// SaveCharacters ( unit , 13c_ & unitString ) else
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_STRING 13c_
4245: PUSH
4246: LD_VAR 0 2
4250: STR
4251: PPUSH
4252: CALL_OW 38
4256: GO 4276
// SaveCharacters ( unit , 13s_ & unitString ) ;
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_STRING 13s_
4265: PUSH
4266: LD_VAR 0 2
4270: STR
4271: PPUSH
4272: CALL_OW 38
// end ;
4276: LD_VAR 0 4
4280: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
// selected := [ ] ;
4287: LD_ADDR_EXP 22
4291: PUSH
4292: EMPTY
4293: ST_TO_ADDR
// othersSelect := [ ] ;
4294: LD_ADDR_EXP 23
4298: PUSH
4299: EMPTY
4300: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: LD_EXP 3
4310: PUSH
4311: LD_EXP 4
4315: PUSH
4316: LD_EXP 5
4320: PUSH
4321: LD_EXP 6
4325: PUSH
4326: LD_EXP 8
4330: PUSH
4331: LD_EXP 9
4335: PUSH
4336: LD_EXP 10
4340: PUSH
4341: LD_EXP 11
4345: PUSH
4346: LD_EXP 12
4350: PUSH
4351: LD_EXP 13
4355: PUSH
4356: LD_EXP 14
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4374: LD_ADDR_VAR 0 3
4378: PUSH
4379: LD_VAR 0 3
4383: PUSH
4384: LD_EXP 17
4388: ADD
4389: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4390: LD_ADDR_VAR 0 3
4394: PUSH
4395: LD_VAR 0 3
4399: PUSH
4400: LD_EXP 16
4404: ADD
4405: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_VAR 0 3
4415: PUSH
4416: LD_EXP 18
4420: ADD
4421: ST_TO_ADDR
// for i in tmp do
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_VAR 0 3
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4472
// if GetClass ( i ) = 8 then
4435: LD_VAR 0 2
4439: PPUSH
4440: CALL_OW 257
4444: PUSH
4445: LD_INT 8
4447: EQUAL
4448: IFFALSE 4470
// SetClass ( i , rand ( 1 , 4 ) ) ;
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 336
4470: GO 4432
4472: POP
4473: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4474: LD_ADDR_EXP 22
4478: PUSH
4479: LD_STRING 1
4481: PPUSH
4482: LD_INT 6
4484: PPUSH
4485: LD_INT 6
4487: PPUSH
4488: LD_INT -5
4490: PUSH
4491: LD_EXP 1
4495: PUSH
4496: LD_EXP 15
4500: PUSH
4501: LD_INT -2
4503: PUSH
4504: LD_INT -3
4506: PUSH
4507: LD_INT -5
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 3
4522: ADD
4523: PUSH
4524: LD_INT -6
4526: PUSH
4527: LD_INT -4
4529: PUSH
4530: LD_EXP 2
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: ADD
4540: PPUSH
4541: LD_INT 1
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 3
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 5
4583: PUSH
4584: LD_INT 0
4586: PUSH
4587: LD_INT 2
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 42
4606: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4607: LD_ADDR_EXP 23
4611: PUSH
4612: LD_EXP 22
4616: PUSH
4617: LD_EXP 3
4621: PUSH
4622: LD_EXP 4
4626: PUSH
4627: LD_EXP 5
4631: PUSH
4632: LD_EXP 6
4636: PUSH
4637: LD_EXP 7
4641: PUSH
4642: LD_EXP 8
4646: PUSH
4647: LD_EXP 9
4651: PUSH
4652: LD_EXP 10
4656: PUSH
4657: LD_EXP 11
4661: PUSH
4662: LD_EXP 12
4666: PUSH
4667: LD_EXP 13
4671: PUSH
4672: LD_EXP 14
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: DIFF
4691: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4692: LD_ADDR_VAR 0 4
4696: PUSH
4697: LD_VAR 0 3
4701: PUSH
4702: LD_EXP 22
4706: DIFF
4707: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 4
4717: PUSH
4718: LD_EXP 3
4722: PUSH
4723: LD_EXP 4
4727: PUSH
4728: LD_EXP 5
4732: PUSH
4733: LD_EXP 6
4737: PUSH
4738: LD_EXP 7
4742: PUSH
4743: LD_EXP 8
4747: PUSH
4748: LD_EXP 9
4752: PUSH
4753: LD_EXP 10
4757: PUSH
4758: LD_EXP 11
4762: PUSH
4763: LD_EXP 12
4767: PUSH
4768: LD_EXP 13
4772: PUSH
4773: LD_EXP 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: DIFF
4792: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4793: LD_VAR 0 4
4797: PPUSH
4798: LD_STRING 13s_others
4800: PPUSH
4801: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4805: LD_EXP 23
4809: PPUSH
4810: LD_STRING 13c_others
4812: PPUSH
4813: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4817: LD_EXP 1
4821: PPUSH
4822: LD_STRING 13c_JMM
4824: PPUSH
4825: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4829: LD_EXP 15
4833: PPUSH
4834: LD_STRING 13c_Stevens
4836: PPUSH
4837: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4841: LD_EXP 3
4845: PPUSH
4846: LD_STRING Lisa
4848: PPUSH
4849: LD_EXP 22
4853: PPUSH
4854: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4858: LD_EXP 8
4862: PPUSH
4863: LD_STRING Brown
4865: PPUSH
4866: LD_EXP 22
4870: PPUSH
4871: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4875: LD_EXP 4
4879: PPUSH
4880: LD_STRING Donaldson
4882: PPUSH
4883: LD_EXP 22
4887: PPUSH
4888: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4892: LD_EXP 5
4896: PPUSH
4897: LD_STRING Bobby
4899: PPUSH
4900: LD_EXP 22
4904: PPUSH
4905: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4909: LD_EXP 6
4913: PPUSH
4914: LD_STRING Cyrus
4916: PPUSH
4917: LD_EXP 22
4921: PPUSH
4922: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4926: LD_EXP 7
4930: PPUSH
4931: LD_STRING Denis
4933: PPUSH
4934: LD_EXP 22
4938: PPUSH
4939: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4943: LD_EXP 9
4947: PPUSH
4948: LD_STRING Gladstone
4950: PPUSH
4951: LD_EXP 22
4955: PPUSH
4956: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4960: LD_EXP 10
4964: PPUSH
4965: LD_STRING Houten
4967: PPUSH
4968: LD_EXP 22
4972: PPUSH
4973: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4977: LD_EXP 11
4981: PPUSH
4982: LD_STRING Cornel
4984: PPUSH
4985: LD_EXP 22
4989: PPUSH
4990: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4994: LD_EXP 12
4998: PPUSH
4999: LD_STRING Gary
5001: PPUSH
5002: LD_EXP 22
5006: PPUSH
5007: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5011: LD_EXP 13
5015: PPUSH
5016: LD_STRING Frank
5018: PPUSH
5019: LD_EXP 22
5023: PPUSH
5024: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5028: LD_EXP 14
5032: PPUSH
5033: LD_STRING Kikuchi
5035: PPUSH
5036: LD_EXP 22
5040: PPUSH
5041: CALL 4223 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5045: LD_INT 22
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 21
5057: PUSH
5058: LD_INT 1
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: LD_INT 4
5076: PPUSH
5077: CALL_OW 235
// SetSide ( selected , 1 ) ;
5081: LD_EXP 22
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5093: LD_EXP 1
5097: PUSH
5098: LD_EXP 15
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 21
5131: PUSH
5132: LD_INT 1
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PPUSH
5143: CALL_OW 69
5147: PUSH
5148: FOR_IN
5149: IFFALSE 5162
// ComExit ( i ) ;
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL 64468 0 1
5160: GO 5148
5162: POP
5163: POP
// end ; end_of_file
5164: LD_VAR 0 1
5168: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5169: LD_VAR 0 1
5173: PPUSH
5174: CALL 21263 0 1
// if un = JMM then
5178: LD_VAR 0 1
5182: PUSH
5183: LD_EXP 1
5187: EQUAL
5188: IFFALSE 5197
// YouLost ( JMM ) ;
5190: LD_STRING JMM
5192: PPUSH
5193: CALL_OW 104
// end ;
5197: PPOPN 1
5199: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_VAR 0 2
5209: PPUSH
5210: CALL 21383 0 2
// end ; end_of_file
5214: PPOPN 2
5216: END
// export function Action ; begin
5217: LD_INT 0
5219: PPUSH
// InGameOn ;
5220: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5224: LD_INT 22
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 30
5239: PUSH
5240: LD_INT 0
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 30
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: CALL_OW 87
// wait ( 0 0$1 ) ;
5275: LD_INT 35
5277: PPUSH
5278: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5282: LD_EXP 1
5286: PPUSH
5287: LD_STRING D1-JMM-1
5289: PPUSH
5290: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5294: LD_EXP 2
5298: PPUSH
5299: LD_STRING D1-Pow-1
5301: PPUSH
5302: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5306: LD_EXP 2
5310: PPUSH
5311: LD_STRING D1-Pow-1a
5313: PPUSH
5314: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5318: LD_EXP 2
5322: PPUSH
5323: LD_STRING D1-Pow-1b
5325: PPUSH
5326: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5330: LD_EXP 2
5334: PPUSH
5335: LD_STRING D1-Pow-1c
5337: PPUSH
5338: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5342: LD_EXP 1
5346: PPUSH
5347: LD_STRING D1-JMM-2
5349: PPUSH
5350: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5354: LD_EXP 2
5358: PPUSH
5359: LD_STRING D1-Pow-2
5361: PPUSH
5362: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5366: LD_EXP 1
5370: PPUSH
5371: LD_STRING D1-JMM-3
5373: PPUSH
5374: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5378: LD_EXP 2
5382: PPUSH
5383: LD_STRING D1-Pow-3
5385: PPUSH
5386: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5390: LD_EXP 1
5394: PPUSH
5395: LD_STRING D1-JMM-4
5397: PPUSH
5398: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5402: LD_EXP 2
5406: PPUSH
5407: LD_STRING D1-Pow-4
5409: PPUSH
5410: CALL_OW 94
// SelectAndSaveCharacters ;
5414: CALL 4281 0 0
// InGameOff ;
5418: CALL_OW 9
// Query ( Q1 ) ;
5422: LD_STRING Q1
5424: PPUSH
5425: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5429: LD_INT 2
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: CALL_OW 424
// end ; end_of_file
5439: LD_VAR 0 1
5443: RET
// export globalGameSaveCounter ; every 0 0$1 do
5444: GO 5446
5446: DISABLE
// begin enable ;
5447: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5448: LD_STRING updateTimer(
5450: PUSH
5451: LD_OWVAR 1
5455: STR
5456: PUSH
5457: LD_STRING );
5459: STR
5460: PPUSH
5461: CALL_OW 559
// end ;
5465: END
// every 0 0$1 do
5466: GO 5468
5468: DISABLE
// begin globalGameSaveCounter := 0 ;
5469: LD_ADDR_EXP 24
5473: PUSH
5474: LD_INT 0
5476: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5477: LD_STRING setGameSaveCounter(0)
5479: PPUSH
5480: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5484: LD_STRING initStreamRollete();
5486: PPUSH
5487: CALL_OW 559
// InitStreamMode ;
5491: CALL 6834 0 0
// DefineStreamItems ( false ) ;
5495: LD_INT 0
5497: PPUSH
5498: CALL 7298 0 1
// end ;
5502: END
// export function SOS_MapStart ( ) ; begin
5503: LD_INT 0
5505: PPUSH
// if streamModeActive then
5506: LD_EXP 25
5510: IFFALSE 5519
// DefineStreamItems ( true ) ;
5512: LD_INT 1
5514: PPUSH
5515: CALL 7298 0 1
// UpdateLuaVariables ( ) ;
5519: CALL 5536 0 0
// UpdateFactoryWaypoints ( ) ;
5523: CALL 20167 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5527: CALL 20424 0 0
// end ;
5531: LD_VAR 0 1
5535: RET
// function UpdateLuaVariables ( ) ; begin
5536: LD_INT 0
5538: PPUSH
// if globalGameSaveCounter then
5539: LD_EXP 24
5543: IFFALSE 5577
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5545: LD_ADDR_EXP 24
5549: PUSH
5550: LD_EXP 24
5554: PPUSH
5555: CALL 65431 0 1
5559: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5560: LD_STRING setGameSaveCounter(
5562: PUSH
5563: LD_EXP 24
5567: STR
5568: PUSH
5569: LD_STRING )
5571: STR
5572: PPUSH
5573: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5577: LD_STRING setGameDifficulty(
5579: PUSH
5580: LD_OWVAR 67
5584: STR
5585: PUSH
5586: LD_STRING )
5588: STR
5589: PPUSH
5590: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5594: LD_STRING displayDifficulty(
5596: PUSH
5597: LD_OWVAR 67
5601: STR
5602: PUSH
5603: LD_STRING )
5605: STR
5606: PPUSH
5607: CALL_OW 559
// end ;
5611: LD_VAR 0 1
5615: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5616: LD_INT 0
5618: PPUSH
// if p2 = stream_mode then
5619: LD_VAR 0 2
5623: PUSH
5624: LD_INT 100
5626: EQUAL
5627: IFFALSE 6630
// begin if not StreamModeActive then
5629: LD_EXP 25
5633: NOT
5634: IFFALSE 5644
// StreamModeActive := true ;
5636: LD_ADDR_EXP 25
5640: PUSH
5641: LD_INT 1
5643: ST_TO_ADDR
// if p3 = 0 then
5644: LD_VAR 0 3
5648: PUSH
5649: LD_INT 0
5651: EQUAL
5652: IFFALSE 5658
// InitStreamMode ;
5654: CALL 6834 0 0
// if p3 = 1 then
5658: LD_VAR 0 3
5662: PUSH
5663: LD_INT 1
5665: EQUAL
5666: IFFALSE 5676
// sRocket := true ;
5668: LD_ADDR_EXP 30
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// if p3 = 2 then
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 2
5683: EQUAL
5684: IFFALSE 5694
// sSpeed := true ;
5686: LD_ADDR_EXP 29
5690: PUSH
5691: LD_INT 1
5693: ST_TO_ADDR
// if p3 = 3 then
5694: LD_VAR 0 3
5698: PUSH
5699: LD_INT 3
5701: EQUAL
5702: IFFALSE 5712
// sEngine := true ;
5704: LD_ADDR_EXP 31
5708: PUSH
5709: LD_INT 1
5711: ST_TO_ADDR
// if p3 = 4 then
5712: LD_VAR 0 3
5716: PUSH
5717: LD_INT 4
5719: EQUAL
5720: IFFALSE 5730
// sSpec := true ;
5722: LD_ADDR_EXP 28
5726: PUSH
5727: LD_INT 1
5729: ST_TO_ADDR
// if p3 = 5 then
5730: LD_VAR 0 3
5734: PUSH
5735: LD_INT 5
5737: EQUAL
5738: IFFALSE 5748
// sLevel := true ;
5740: LD_ADDR_EXP 32
5744: PUSH
5745: LD_INT 1
5747: ST_TO_ADDR
// if p3 = 6 then
5748: LD_VAR 0 3
5752: PUSH
5753: LD_INT 6
5755: EQUAL
5756: IFFALSE 5766
// sArmoury := true ;
5758: LD_ADDR_EXP 33
5762: PUSH
5763: LD_INT 1
5765: ST_TO_ADDR
// if p3 = 7 then
5766: LD_VAR 0 3
5770: PUSH
5771: LD_INT 7
5773: EQUAL
5774: IFFALSE 5784
// sRadar := true ;
5776: LD_ADDR_EXP 34
5780: PUSH
5781: LD_INT 1
5783: ST_TO_ADDR
// if p3 = 8 then
5784: LD_VAR 0 3
5788: PUSH
5789: LD_INT 8
5791: EQUAL
5792: IFFALSE 5802
// sBunker := true ;
5794: LD_ADDR_EXP 35
5798: PUSH
5799: LD_INT 1
5801: ST_TO_ADDR
// if p3 = 9 then
5802: LD_VAR 0 3
5806: PUSH
5807: LD_INT 9
5809: EQUAL
5810: IFFALSE 5820
// sHack := true ;
5812: LD_ADDR_EXP 36
5816: PUSH
5817: LD_INT 1
5819: ST_TO_ADDR
// if p3 = 10 then
5820: LD_VAR 0 3
5824: PUSH
5825: LD_INT 10
5827: EQUAL
5828: IFFALSE 5838
// sFire := true ;
5830: LD_ADDR_EXP 37
5834: PUSH
5835: LD_INT 1
5837: ST_TO_ADDR
// if p3 = 11 then
5838: LD_VAR 0 3
5842: PUSH
5843: LD_INT 11
5845: EQUAL
5846: IFFALSE 5856
// sRefresh := true ;
5848: LD_ADDR_EXP 38
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// if p3 = 12 then
5856: LD_VAR 0 3
5860: PUSH
5861: LD_INT 12
5863: EQUAL
5864: IFFALSE 5874
// sExp := true ;
5866: LD_ADDR_EXP 39
5870: PUSH
5871: LD_INT 1
5873: ST_TO_ADDR
// if p3 = 13 then
5874: LD_VAR 0 3
5878: PUSH
5879: LD_INT 13
5881: EQUAL
5882: IFFALSE 5892
// sDepot := true ;
5884: LD_ADDR_EXP 40
5888: PUSH
5889: LD_INT 1
5891: ST_TO_ADDR
// if p3 = 14 then
5892: LD_VAR 0 3
5896: PUSH
5897: LD_INT 14
5899: EQUAL
5900: IFFALSE 5910
// sFlag := true ;
5902: LD_ADDR_EXP 41
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// if p3 = 15 then
5910: LD_VAR 0 3
5914: PUSH
5915: LD_INT 15
5917: EQUAL
5918: IFFALSE 5928
// sKamikadze := true ;
5920: LD_ADDR_EXP 49
5924: PUSH
5925: LD_INT 1
5927: ST_TO_ADDR
// if p3 = 16 then
5928: LD_VAR 0 3
5932: PUSH
5933: LD_INT 16
5935: EQUAL
5936: IFFALSE 5946
// sTroll := true ;
5938: LD_ADDR_EXP 50
5942: PUSH
5943: LD_INT 1
5945: ST_TO_ADDR
// if p3 = 17 then
5946: LD_VAR 0 3
5950: PUSH
5951: LD_INT 17
5953: EQUAL
5954: IFFALSE 5964
// sSlow := true ;
5956: LD_ADDR_EXP 51
5960: PUSH
5961: LD_INT 1
5963: ST_TO_ADDR
// if p3 = 18 then
5964: LD_VAR 0 3
5968: PUSH
5969: LD_INT 18
5971: EQUAL
5972: IFFALSE 5982
// sLack := true ;
5974: LD_ADDR_EXP 52
5978: PUSH
5979: LD_INT 1
5981: ST_TO_ADDR
// if p3 = 19 then
5982: LD_VAR 0 3
5986: PUSH
5987: LD_INT 19
5989: EQUAL
5990: IFFALSE 6000
// sTank := true ;
5992: LD_ADDR_EXP 54
5996: PUSH
5997: LD_INT 1
5999: ST_TO_ADDR
// if p3 = 20 then
6000: LD_VAR 0 3
6004: PUSH
6005: LD_INT 20
6007: EQUAL
6008: IFFALSE 6018
// sRemote := true ;
6010: LD_ADDR_EXP 55
6014: PUSH
6015: LD_INT 1
6017: ST_TO_ADDR
// if p3 = 21 then
6018: LD_VAR 0 3
6022: PUSH
6023: LD_INT 21
6025: EQUAL
6026: IFFALSE 6036
// sPowell := true ;
6028: LD_ADDR_EXP 56
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// if p3 = 22 then
6036: LD_VAR 0 3
6040: PUSH
6041: LD_INT 22
6043: EQUAL
6044: IFFALSE 6054
// sTeleport := true ;
6046: LD_ADDR_EXP 59
6050: PUSH
6051: LD_INT 1
6053: ST_TO_ADDR
// if p3 = 23 then
6054: LD_VAR 0 3
6058: PUSH
6059: LD_INT 23
6061: EQUAL
6062: IFFALSE 6072
// sOilTower := true ;
6064: LD_ADDR_EXP 61
6068: PUSH
6069: LD_INT 1
6071: ST_TO_ADDR
// if p3 = 24 then
6072: LD_VAR 0 3
6076: PUSH
6077: LD_INT 24
6079: EQUAL
6080: IFFALSE 6090
// sShovel := true ;
6082: LD_ADDR_EXP 62
6086: PUSH
6087: LD_INT 1
6089: ST_TO_ADDR
// if p3 = 25 then
6090: LD_VAR 0 3
6094: PUSH
6095: LD_INT 25
6097: EQUAL
6098: IFFALSE 6108
// sSheik := true ;
6100: LD_ADDR_EXP 63
6104: PUSH
6105: LD_INT 1
6107: ST_TO_ADDR
// if p3 = 26 then
6108: LD_VAR 0 3
6112: PUSH
6113: LD_INT 26
6115: EQUAL
6116: IFFALSE 6126
// sEarthquake := true ;
6118: LD_ADDR_EXP 65
6122: PUSH
6123: LD_INT 1
6125: ST_TO_ADDR
// if p3 = 27 then
6126: LD_VAR 0 3
6130: PUSH
6131: LD_INT 27
6133: EQUAL
6134: IFFALSE 6144
// sAI := true ;
6136: LD_ADDR_EXP 66
6140: PUSH
6141: LD_INT 1
6143: ST_TO_ADDR
// if p3 = 28 then
6144: LD_VAR 0 3
6148: PUSH
6149: LD_INT 28
6151: EQUAL
6152: IFFALSE 6162
// sCargo := true ;
6154: LD_ADDR_EXP 69
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// if p3 = 29 then
6162: LD_VAR 0 3
6166: PUSH
6167: LD_INT 29
6169: EQUAL
6170: IFFALSE 6180
// sDLaser := true ;
6172: LD_ADDR_EXP 70
6176: PUSH
6177: LD_INT 1
6179: ST_TO_ADDR
// if p3 = 30 then
6180: LD_VAR 0 3
6184: PUSH
6185: LD_INT 30
6187: EQUAL
6188: IFFALSE 6198
// sExchange := true ;
6190: LD_ADDR_EXP 71
6194: PUSH
6195: LD_INT 1
6197: ST_TO_ADDR
// if p3 = 31 then
6198: LD_VAR 0 3
6202: PUSH
6203: LD_INT 31
6205: EQUAL
6206: IFFALSE 6216
// sFac := true ;
6208: LD_ADDR_EXP 72
6212: PUSH
6213: LD_INT 1
6215: ST_TO_ADDR
// if p3 = 32 then
6216: LD_VAR 0 3
6220: PUSH
6221: LD_INT 32
6223: EQUAL
6224: IFFALSE 6234
// sPower := true ;
6226: LD_ADDR_EXP 73
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// if p3 = 33 then
6234: LD_VAR 0 3
6238: PUSH
6239: LD_INT 33
6241: EQUAL
6242: IFFALSE 6252
// sRandom := true ;
6244: LD_ADDR_EXP 74
6248: PUSH
6249: LD_INT 1
6251: ST_TO_ADDR
// if p3 = 34 then
6252: LD_VAR 0 3
6256: PUSH
6257: LD_INT 34
6259: EQUAL
6260: IFFALSE 6270
// sShield := true ;
6262: LD_ADDR_EXP 75
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// if p3 = 35 then
6270: LD_VAR 0 3
6274: PUSH
6275: LD_INT 35
6277: EQUAL
6278: IFFALSE 6288
// sTime := true ;
6280: LD_ADDR_EXP 76
6284: PUSH
6285: LD_INT 1
6287: ST_TO_ADDR
// if p3 = 36 then
6288: LD_VAR 0 3
6292: PUSH
6293: LD_INT 36
6295: EQUAL
6296: IFFALSE 6306
// sTools := true ;
6298: LD_ADDR_EXP 77
6302: PUSH
6303: LD_INT 1
6305: ST_TO_ADDR
// if p3 = 101 then
6306: LD_VAR 0 3
6310: PUSH
6311: LD_INT 101
6313: EQUAL
6314: IFFALSE 6324
// sSold := true ;
6316: LD_ADDR_EXP 42
6320: PUSH
6321: LD_INT 1
6323: ST_TO_ADDR
// if p3 = 102 then
6324: LD_VAR 0 3
6328: PUSH
6329: LD_INT 102
6331: EQUAL
6332: IFFALSE 6342
// sDiff := true ;
6334: LD_ADDR_EXP 43
6338: PUSH
6339: LD_INT 1
6341: ST_TO_ADDR
// if p3 = 103 then
6342: LD_VAR 0 3
6346: PUSH
6347: LD_INT 103
6349: EQUAL
6350: IFFALSE 6360
// sFog := true ;
6352: LD_ADDR_EXP 46
6356: PUSH
6357: LD_INT 1
6359: ST_TO_ADDR
// if p3 = 104 then
6360: LD_VAR 0 3
6364: PUSH
6365: LD_INT 104
6367: EQUAL
6368: IFFALSE 6378
// sReset := true ;
6370: LD_ADDR_EXP 47
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// if p3 = 105 then
6378: LD_VAR 0 3
6382: PUSH
6383: LD_INT 105
6385: EQUAL
6386: IFFALSE 6396
// sSun := true ;
6388: LD_ADDR_EXP 48
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// if p3 = 106 then
6396: LD_VAR 0 3
6400: PUSH
6401: LD_INT 106
6403: EQUAL
6404: IFFALSE 6414
// sTiger := true ;
6406: LD_ADDR_EXP 44
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// if p3 = 107 then
6414: LD_VAR 0 3
6418: PUSH
6419: LD_INT 107
6421: EQUAL
6422: IFFALSE 6432
// sBomb := true ;
6424: LD_ADDR_EXP 45
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// if p3 = 108 then
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 108
6439: EQUAL
6440: IFFALSE 6450
// sWound := true ;
6442: LD_ADDR_EXP 53
6446: PUSH
6447: LD_INT 1
6449: ST_TO_ADDR
// if p3 = 109 then
6450: LD_VAR 0 3
6454: PUSH
6455: LD_INT 109
6457: EQUAL
6458: IFFALSE 6468
// sBetray := true ;
6460: LD_ADDR_EXP 57
6464: PUSH
6465: LD_INT 1
6467: ST_TO_ADDR
// if p3 = 110 then
6468: LD_VAR 0 3
6472: PUSH
6473: LD_INT 110
6475: EQUAL
6476: IFFALSE 6486
// sContamin := true ;
6478: LD_ADDR_EXP 58
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// if p3 = 111 then
6486: LD_VAR 0 3
6490: PUSH
6491: LD_INT 111
6493: EQUAL
6494: IFFALSE 6504
// sOil := true ;
6496: LD_ADDR_EXP 60
6500: PUSH
6501: LD_INT 1
6503: ST_TO_ADDR
// if p3 = 112 then
6504: LD_VAR 0 3
6508: PUSH
6509: LD_INT 112
6511: EQUAL
6512: IFFALSE 6522
// sStu := true ;
6514: LD_ADDR_EXP 64
6518: PUSH
6519: LD_INT 1
6521: ST_TO_ADDR
// if p3 = 113 then
6522: LD_VAR 0 3
6526: PUSH
6527: LD_INT 113
6529: EQUAL
6530: IFFALSE 6540
// sBazooka := true ;
6532: LD_ADDR_EXP 67
6536: PUSH
6537: LD_INT 1
6539: ST_TO_ADDR
// if p3 = 114 then
6540: LD_VAR 0 3
6544: PUSH
6545: LD_INT 114
6547: EQUAL
6548: IFFALSE 6558
// sMortar := true ;
6550: LD_ADDR_EXP 68
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// if p3 = 115 then
6558: LD_VAR 0 3
6562: PUSH
6563: LD_INT 115
6565: EQUAL
6566: IFFALSE 6576
// sRanger := true ;
6568: LD_ADDR_EXP 78
6572: PUSH
6573: LD_INT 1
6575: ST_TO_ADDR
// if p3 = 116 then
6576: LD_VAR 0 3
6580: PUSH
6581: LD_INT 116
6583: EQUAL
6584: IFFALSE 6594
// sComputer := true ;
6586: LD_ADDR_EXP 79
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// if p3 = 117 then
6594: LD_VAR 0 3
6598: PUSH
6599: LD_INT 117
6601: EQUAL
6602: IFFALSE 6612
// s30 := true ;
6604: LD_ADDR_EXP 80
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// if p3 = 118 then
6612: LD_VAR 0 3
6616: PUSH
6617: LD_INT 118
6619: EQUAL
6620: IFFALSE 6630
// s60 := true ;
6622: LD_ADDR_EXP 81
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// end ; if p2 = hack_mode then
6630: LD_VAR 0 2
6634: PUSH
6635: LD_INT 101
6637: EQUAL
6638: IFFALSE 6766
// begin case p3 of 1 :
6640: LD_VAR 0 3
6644: PUSH
6645: LD_INT 1
6647: DOUBLE
6648: EQUAL
6649: IFTRUE 6653
6651: GO 6660
6653: POP
// hHackUnlimitedResources ; 2 :
6654: CALL 18913 0 0
6658: GO 6766
6660: LD_INT 2
6662: DOUBLE
6663: EQUAL
6664: IFTRUE 6668
6666: GO 6675
6668: POP
// hHackSetLevel10 ; 3 :
6669: CALL 19046 0 0
6673: GO 6766
6675: LD_INT 3
6677: DOUBLE
6678: EQUAL
6679: IFTRUE 6683
6681: GO 6690
6683: POP
// hHackSetLevel10YourUnits ; 4 :
6684: CALL 19131 0 0
6688: GO 6766
6690: LD_INT 4
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6705
6698: POP
// hHackInvincible ; 5 :
6699: CALL 19579 0 0
6703: GO 6766
6705: LD_INT 5
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6713
6711: GO 6720
6713: POP
// hHackInvisible ; 6 :
6714: CALL 19690 0 0
6718: GO 6766
6720: LD_INT 6
6722: DOUBLE
6723: EQUAL
6724: IFTRUE 6728
6726: GO 6735
6728: POP
// hHackChangeYourSide ; 7 :
6729: CALL 19747 0 0
6733: GO 6766
6735: LD_INT 7
6737: DOUBLE
6738: EQUAL
6739: IFTRUE 6743
6741: GO 6750
6743: POP
// hHackChangeUnitSide ; 8 :
6744: CALL 19789 0 0
6748: GO 6766
6750: LD_INT 8
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6765
6758: POP
// hHackFog ; end ;
6759: CALL 19890 0 0
6763: GO 6766
6765: POP
// end ; if p2 = game_save_mode then
6766: LD_VAR 0 2
6770: PUSH
6771: LD_INT 102
6773: EQUAL
6774: IFFALSE 6829
// begin if p3 = 1 then
6776: LD_VAR 0 3
6780: PUSH
6781: LD_INT 1
6783: EQUAL
6784: IFFALSE 6796
// globalGameSaveCounter := p4 ;
6786: LD_ADDR_EXP 24
6790: PUSH
6791: LD_VAR 0 4
6795: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6796: LD_VAR 0 3
6800: PUSH
6801: LD_INT 2
6803: EQUAL
6804: PUSH
6805: LD_EXP 24
6809: AND
6810: IFFALSE 6829
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6812: LD_STRING setGameSaveCounter(
6814: PUSH
6815: LD_EXP 24
6819: STR
6820: PUSH
6821: LD_STRING )
6823: STR
6824: PPUSH
6825: CALL_OW 559
// end ; end ;
6829: LD_VAR 0 7
6833: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6834: LD_INT 0
6836: PPUSH
// streamModeActive := false ;
6837: LD_ADDR_EXP 25
6841: PUSH
6842: LD_INT 0
6844: ST_TO_ADDR
// normalCounter := 36 ;
6845: LD_ADDR_EXP 26
6849: PUSH
6850: LD_INT 36
6852: ST_TO_ADDR
// hardcoreCounter := 18 ;
6853: LD_ADDR_EXP 27
6857: PUSH
6858: LD_INT 18
6860: ST_TO_ADDR
// sRocket := false ;
6861: LD_ADDR_EXP 30
6865: PUSH
6866: LD_INT 0
6868: ST_TO_ADDR
// sSpeed := false ;
6869: LD_ADDR_EXP 29
6873: PUSH
6874: LD_INT 0
6876: ST_TO_ADDR
// sEngine := false ;
6877: LD_ADDR_EXP 31
6881: PUSH
6882: LD_INT 0
6884: ST_TO_ADDR
// sSpec := false ;
6885: LD_ADDR_EXP 28
6889: PUSH
6890: LD_INT 0
6892: ST_TO_ADDR
// sLevel := false ;
6893: LD_ADDR_EXP 32
6897: PUSH
6898: LD_INT 0
6900: ST_TO_ADDR
// sArmoury := false ;
6901: LD_ADDR_EXP 33
6905: PUSH
6906: LD_INT 0
6908: ST_TO_ADDR
// sRadar := false ;
6909: LD_ADDR_EXP 34
6913: PUSH
6914: LD_INT 0
6916: ST_TO_ADDR
// sBunker := false ;
6917: LD_ADDR_EXP 35
6921: PUSH
6922: LD_INT 0
6924: ST_TO_ADDR
// sHack := false ;
6925: LD_ADDR_EXP 36
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// sFire := false ;
6933: LD_ADDR_EXP 37
6937: PUSH
6938: LD_INT 0
6940: ST_TO_ADDR
// sRefresh := false ;
6941: LD_ADDR_EXP 38
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// sExp := false ;
6949: LD_ADDR_EXP 39
6953: PUSH
6954: LD_INT 0
6956: ST_TO_ADDR
// sDepot := false ;
6957: LD_ADDR_EXP 40
6961: PUSH
6962: LD_INT 0
6964: ST_TO_ADDR
// sFlag := false ;
6965: LD_ADDR_EXP 41
6969: PUSH
6970: LD_INT 0
6972: ST_TO_ADDR
// sKamikadze := false ;
6973: LD_ADDR_EXP 49
6977: PUSH
6978: LD_INT 0
6980: ST_TO_ADDR
// sTroll := false ;
6981: LD_ADDR_EXP 50
6985: PUSH
6986: LD_INT 0
6988: ST_TO_ADDR
// sSlow := false ;
6989: LD_ADDR_EXP 51
6993: PUSH
6994: LD_INT 0
6996: ST_TO_ADDR
// sLack := false ;
6997: LD_ADDR_EXP 52
7001: PUSH
7002: LD_INT 0
7004: ST_TO_ADDR
// sTank := false ;
7005: LD_ADDR_EXP 54
7009: PUSH
7010: LD_INT 0
7012: ST_TO_ADDR
// sRemote := false ;
7013: LD_ADDR_EXP 55
7017: PUSH
7018: LD_INT 0
7020: ST_TO_ADDR
// sPowell := false ;
7021: LD_ADDR_EXP 56
7025: PUSH
7026: LD_INT 0
7028: ST_TO_ADDR
// sTeleport := false ;
7029: LD_ADDR_EXP 59
7033: PUSH
7034: LD_INT 0
7036: ST_TO_ADDR
// sOilTower := false ;
7037: LD_ADDR_EXP 61
7041: PUSH
7042: LD_INT 0
7044: ST_TO_ADDR
// sShovel := false ;
7045: LD_ADDR_EXP 62
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// sSheik := false ;
7053: LD_ADDR_EXP 63
7057: PUSH
7058: LD_INT 0
7060: ST_TO_ADDR
// sEarthquake := false ;
7061: LD_ADDR_EXP 65
7065: PUSH
7066: LD_INT 0
7068: ST_TO_ADDR
// sAI := false ;
7069: LD_ADDR_EXP 66
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// sCargo := false ;
7077: LD_ADDR_EXP 69
7081: PUSH
7082: LD_INT 0
7084: ST_TO_ADDR
// sDLaser := false ;
7085: LD_ADDR_EXP 70
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// sExchange := false ;
7093: LD_ADDR_EXP 71
7097: PUSH
7098: LD_INT 0
7100: ST_TO_ADDR
// sFac := false ;
7101: LD_ADDR_EXP 72
7105: PUSH
7106: LD_INT 0
7108: ST_TO_ADDR
// sPower := false ;
7109: LD_ADDR_EXP 73
7113: PUSH
7114: LD_INT 0
7116: ST_TO_ADDR
// sRandom := false ;
7117: LD_ADDR_EXP 74
7121: PUSH
7122: LD_INT 0
7124: ST_TO_ADDR
// sShield := false ;
7125: LD_ADDR_EXP 75
7129: PUSH
7130: LD_INT 0
7132: ST_TO_ADDR
// sTime := false ;
7133: LD_ADDR_EXP 76
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// sTools := false ;
7141: LD_ADDR_EXP 77
7145: PUSH
7146: LD_INT 0
7148: ST_TO_ADDR
// sSold := false ;
7149: LD_ADDR_EXP 42
7153: PUSH
7154: LD_INT 0
7156: ST_TO_ADDR
// sDiff := false ;
7157: LD_ADDR_EXP 43
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// sFog := false ;
7165: LD_ADDR_EXP 46
7169: PUSH
7170: LD_INT 0
7172: ST_TO_ADDR
// sReset := false ;
7173: LD_ADDR_EXP 47
7177: PUSH
7178: LD_INT 0
7180: ST_TO_ADDR
// sSun := false ;
7181: LD_ADDR_EXP 48
7185: PUSH
7186: LD_INT 0
7188: ST_TO_ADDR
// sTiger := false ;
7189: LD_ADDR_EXP 44
7193: PUSH
7194: LD_INT 0
7196: ST_TO_ADDR
// sBomb := false ;
7197: LD_ADDR_EXP 45
7201: PUSH
7202: LD_INT 0
7204: ST_TO_ADDR
// sWound := false ;
7205: LD_ADDR_EXP 53
7209: PUSH
7210: LD_INT 0
7212: ST_TO_ADDR
// sBetray := false ;
7213: LD_ADDR_EXP 57
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// sContamin := false ;
7221: LD_ADDR_EXP 58
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// sOil := false ;
7229: LD_ADDR_EXP 60
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// sStu := false ;
7237: LD_ADDR_EXP 64
7241: PUSH
7242: LD_INT 0
7244: ST_TO_ADDR
// sBazooka := false ;
7245: LD_ADDR_EXP 67
7249: PUSH
7250: LD_INT 0
7252: ST_TO_ADDR
// sMortar := false ;
7253: LD_ADDR_EXP 68
7257: PUSH
7258: LD_INT 0
7260: ST_TO_ADDR
// sRanger := false ;
7261: LD_ADDR_EXP 78
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// sComputer := false ;
7269: LD_ADDR_EXP 79
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// s30 := false ;
7277: LD_ADDR_EXP 80
7281: PUSH
7282: LD_INT 0
7284: ST_TO_ADDR
// s60 := false ;
7285: LD_ADDR_EXP 81
7289: PUSH
7290: LD_INT 0
7292: ST_TO_ADDR
// end ;
7293: LD_VAR 0 1
7297: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
// result := [ ] ;
7307: LD_ADDR_VAR 0 2
7311: PUSH
7312: EMPTY
7313: ST_TO_ADDR
// if campaign_id = 1 then
7314: LD_OWVAR 69
7318: PUSH
7319: LD_INT 1
7321: EQUAL
7322: IFFALSE 10488
// begin case mission_number of 1 :
7324: LD_OWVAR 70
7328: PUSH
7329: LD_INT 1
7331: DOUBLE
7332: EQUAL
7333: IFTRUE 7337
7335: GO 7413
7337: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7338: LD_ADDR_VAR 0 2
7342: PUSH
7343: LD_INT 2
7345: PUSH
7346: LD_INT 4
7348: PUSH
7349: LD_INT 11
7351: PUSH
7352: LD_INT 12
7354: PUSH
7355: LD_INT 15
7357: PUSH
7358: LD_INT 16
7360: PUSH
7361: LD_INT 22
7363: PUSH
7364: LD_INT 23
7366: PUSH
7367: LD_INT 26
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 101
7383: PUSH
7384: LD_INT 102
7386: PUSH
7387: LD_INT 106
7389: PUSH
7390: LD_INT 116
7392: PUSH
7393: LD_INT 117
7395: PUSH
7396: LD_INT 118
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: ST_TO_ADDR
7411: GO 10486
7413: LD_INT 2
7415: DOUBLE
7416: EQUAL
7417: IFTRUE 7421
7419: GO 7505
7421: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7422: LD_ADDR_VAR 0 2
7426: PUSH
7427: LD_INT 2
7429: PUSH
7430: LD_INT 4
7432: PUSH
7433: LD_INT 11
7435: PUSH
7436: LD_INT 12
7438: PUSH
7439: LD_INT 15
7441: PUSH
7442: LD_INT 16
7444: PUSH
7445: LD_INT 22
7447: PUSH
7448: LD_INT 23
7450: PUSH
7451: LD_INT 26
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 101
7467: PUSH
7468: LD_INT 102
7470: PUSH
7471: LD_INT 105
7473: PUSH
7474: LD_INT 106
7476: PUSH
7477: LD_INT 108
7479: PUSH
7480: LD_INT 116
7482: PUSH
7483: LD_INT 117
7485: PUSH
7486: LD_INT 118
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: ST_TO_ADDR
7503: GO 10486
7505: LD_INT 3
7507: DOUBLE
7508: EQUAL
7509: IFTRUE 7513
7511: GO 7601
7513: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 2
7521: PUSH
7522: LD_INT 4
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: LD_INT 11
7530: PUSH
7531: LD_INT 12
7533: PUSH
7534: LD_INT 15
7536: PUSH
7537: LD_INT 16
7539: PUSH
7540: LD_INT 22
7542: PUSH
7543: LD_INT 26
7545: PUSH
7546: LD_INT 36
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 101
7563: PUSH
7564: LD_INT 102
7566: PUSH
7567: LD_INT 105
7569: PUSH
7570: LD_INT 106
7572: PUSH
7573: LD_INT 108
7575: PUSH
7576: LD_INT 116
7578: PUSH
7579: LD_INT 117
7581: PUSH
7582: LD_INT 118
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: ST_TO_ADDR
7599: GO 10486
7601: LD_INT 4
7603: DOUBLE
7604: EQUAL
7605: IFTRUE 7609
7607: GO 7705
7609: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 2
7617: PUSH
7618: LD_INT 4
7620: PUSH
7621: LD_INT 5
7623: PUSH
7624: LD_INT 8
7626: PUSH
7627: LD_INT 11
7629: PUSH
7630: LD_INT 12
7632: PUSH
7633: LD_INT 15
7635: PUSH
7636: LD_INT 16
7638: PUSH
7639: LD_INT 22
7641: PUSH
7642: LD_INT 23
7644: PUSH
7645: LD_INT 26
7647: PUSH
7648: LD_INT 36
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 101
7667: PUSH
7668: LD_INT 102
7670: PUSH
7671: LD_INT 105
7673: PUSH
7674: LD_INT 106
7676: PUSH
7677: LD_INT 108
7679: PUSH
7680: LD_INT 116
7682: PUSH
7683: LD_INT 117
7685: PUSH
7686: LD_INT 118
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: ST_TO_ADDR
7703: GO 10486
7705: LD_INT 5
7707: DOUBLE
7708: EQUAL
7709: IFTRUE 7713
7711: GO 7825
7713: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7714: LD_ADDR_VAR 0 2
7718: PUSH
7719: LD_INT 2
7721: PUSH
7722: LD_INT 4
7724: PUSH
7725: LD_INT 5
7727: PUSH
7728: LD_INT 6
7730: PUSH
7731: LD_INT 8
7733: PUSH
7734: LD_INT 11
7736: PUSH
7737: LD_INT 12
7739: PUSH
7740: LD_INT 15
7742: PUSH
7743: LD_INT 16
7745: PUSH
7746: LD_INT 22
7748: PUSH
7749: LD_INT 23
7751: PUSH
7752: LD_INT 25
7754: PUSH
7755: LD_INT 26
7757: PUSH
7758: LD_INT 36
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 101
7779: PUSH
7780: LD_INT 102
7782: PUSH
7783: LD_INT 105
7785: PUSH
7786: LD_INT 106
7788: PUSH
7789: LD_INT 108
7791: PUSH
7792: LD_INT 109
7794: PUSH
7795: LD_INT 112
7797: PUSH
7798: LD_INT 116
7800: PUSH
7801: LD_INT 117
7803: PUSH
7804: LD_INT 118
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: ST_TO_ADDR
7823: GO 10486
7825: LD_INT 6
7827: DOUBLE
7828: EQUAL
7829: IFTRUE 7833
7831: GO 7965
7833: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7834: LD_ADDR_VAR 0 2
7838: PUSH
7839: LD_INT 2
7841: PUSH
7842: LD_INT 4
7844: PUSH
7845: LD_INT 5
7847: PUSH
7848: LD_INT 6
7850: PUSH
7851: LD_INT 8
7853: PUSH
7854: LD_INT 11
7856: PUSH
7857: LD_INT 12
7859: PUSH
7860: LD_INT 15
7862: PUSH
7863: LD_INT 16
7865: PUSH
7866: LD_INT 20
7868: PUSH
7869: LD_INT 21
7871: PUSH
7872: LD_INT 22
7874: PUSH
7875: LD_INT 23
7877: PUSH
7878: LD_INT 25
7880: PUSH
7881: LD_INT 26
7883: PUSH
7884: LD_INT 30
7886: PUSH
7887: LD_INT 31
7889: PUSH
7890: LD_INT 32
7892: PUSH
7893: LD_INT 36
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 101
7919: PUSH
7920: LD_INT 102
7922: PUSH
7923: LD_INT 105
7925: PUSH
7926: LD_INT 106
7928: PUSH
7929: LD_INT 108
7931: PUSH
7932: LD_INT 109
7934: PUSH
7935: LD_INT 112
7937: PUSH
7938: LD_INT 116
7940: PUSH
7941: LD_INT 117
7943: PUSH
7944: LD_INT 118
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: ST_TO_ADDR
7963: GO 10486
7965: LD_INT 7
7967: DOUBLE
7968: EQUAL
7969: IFTRUE 7973
7971: GO 8085
7973: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: LD_INT 2
7981: PUSH
7982: LD_INT 4
7984: PUSH
7985: LD_INT 5
7987: PUSH
7988: LD_INT 7
7990: PUSH
7991: LD_INT 11
7993: PUSH
7994: LD_INT 12
7996: PUSH
7997: LD_INT 15
7999: PUSH
8000: LD_INT 16
8002: PUSH
8003: LD_INT 20
8005: PUSH
8006: LD_INT 21
8008: PUSH
8009: LD_INT 22
8011: PUSH
8012: LD_INT 23
8014: PUSH
8015: LD_INT 25
8017: PUSH
8018: LD_INT 26
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 101
8039: PUSH
8040: LD_INT 102
8042: PUSH
8043: LD_INT 103
8045: PUSH
8046: LD_INT 105
8048: PUSH
8049: LD_INT 106
8051: PUSH
8052: LD_INT 108
8054: PUSH
8055: LD_INT 112
8057: PUSH
8058: LD_INT 116
8060: PUSH
8061: LD_INT 117
8063: PUSH
8064: LD_INT 118
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: ST_TO_ADDR
8083: GO 10486
8085: LD_INT 8
8087: DOUBLE
8088: EQUAL
8089: IFTRUE 8093
8091: GO 8233
8093: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8094: LD_ADDR_VAR 0 2
8098: PUSH
8099: LD_INT 2
8101: PUSH
8102: LD_INT 4
8104: PUSH
8105: LD_INT 5
8107: PUSH
8108: LD_INT 6
8110: PUSH
8111: LD_INT 7
8113: PUSH
8114: LD_INT 8
8116: PUSH
8117: LD_INT 11
8119: PUSH
8120: LD_INT 12
8122: PUSH
8123: LD_INT 15
8125: PUSH
8126: LD_INT 16
8128: PUSH
8129: LD_INT 20
8131: PUSH
8132: LD_INT 21
8134: PUSH
8135: LD_INT 22
8137: PUSH
8138: LD_INT 23
8140: PUSH
8141: LD_INT 25
8143: PUSH
8144: LD_INT 26
8146: PUSH
8147: LD_INT 30
8149: PUSH
8150: LD_INT 31
8152: PUSH
8153: LD_INT 32
8155: PUSH
8156: LD_INT 36
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 101
8183: PUSH
8184: LD_INT 102
8186: PUSH
8187: LD_INT 103
8189: PUSH
8190: LD_INT 105
8192: PUSH
8193: LD_INT 106
8195: PUSH
8196: LD_INT 108
8198: PUSH
8199: LD_INT 109
8201: PUSH
8202: LD_INT 112
8204: PUSH
8205: LD_INT 116
8207: PUSH
8208: LD_INT 117
8210: PUSH
8211: LD_INT 118
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: ST_TO_ADDR
8231: GO 10486
8233: LD_INT 9
8235: DOUBLE
8236: EQUAL
8237: IFTRUE 8241
8239: GO 8389
8241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8242: LD_ADDR_VAR 0 2
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: LD_INT 4
8252: PUSH
8253: LD_INT 5
8255: PUSH
8256: LD_INT 6
8258: PUSH
8259: LD_INT 7
8261: PUSH
8262: LD_INT 8
8264: PUSH
8265: LD_INT 11
8267: PUSH
8268: LD_INT 12
8270: PUSH
8271: LD_INT 15
8273: PUSH
8274: LD_INT 16
8276: PUSH
8277: LD_INT 20
8279: PUSH
8280: LD_INT 21
8282: PUSH
8283: LD_INT 22
8285: PUSH
8286: LD_INT 23
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 26
8294: PUSH
8295: LD_INT 28
8297: PUSH
8298: LD_INT 30
8300: PUSH
8301: LD_INT 31
8303: PUSH
8304: LD_INT 32
8306: PUSH
8307: LD_INT 36
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 101
8335: PUSH
8336: LD_INT 102
8338: PUSH
8339: LD_INT 103
8341: PUSH
8342: LD_INT 105
8344: PUSH
8345: LD_INT 106
8347: PUSH
8348: LD_INT 108
8350: PUSH
8351: LD_INT 109
8353: PUSH
8354: LD_INT 112
8356: PUSH
8357: LD_INT 114
8359: PUSH
8360: LD_INT 116
8362: PUSH
8363: LD_INT 117
8365: PUSH
8366: LD_INT 118
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: ST_TO_ADDR
8387: GO 10486
8389: LD_INT 10
8391: DOUBLE
8392: EQUAL
8393: IFTRUE 8397
8395: GO 8593
8397: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8398: LD_ADDR_VAR 0 2
8402: PUSH
8403: LD_INT 2
8405: PUSH
8406: LD_INT 4
8408: PUSH
8409: LD_INT 5
8411: PUSH
8412: LD_INT 6
8414: PUSH
8415: LD_INT 7
8417: PUSH
8418: LD_INT 8
8420: PUSH
8421: LD_INT 9
8423: PUSH
8424: LD_INT 10
8426: PUSH
8427: LD_INT 11
8429: PUSH
8430: LD_INT 12
8432: PUSH
8433: LD_INT 13
8435: PUSH
8436: LD_INT 14
8438: PUSH
8439: LD_INT 15
8441: PUSH
8442: LD_INT 16
8444: PUSH
8445: LD_INT 17
8447: PUSH
8448: LD_INT 18
8450: PUSH
8451: LD_INT 19
8453: PUSH
8454: LD_INT 20
8456: PUSH
8457: LD_INT 21
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_INT 23
8465: PUSH
8466: LD_INT 24
8468: PUSH
8469: LD_INT 25
8471: PUSH
8472: LD_INT 26
8474: PUSH
8475: LD_INT 28
8477: PUSH
8478: LD_INT 30
8480: PUSH
8481: LD_INT 31
8483: PUSH
8484: LD_INT 32
8486: PUSH
8487: LD_INT 36
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 101
8523: PUSH
8524: LD_INT 102
8526: PUSH
8527: LD_INT 103
8529: PUSH
8530: LD_INT 104
8532: PUSH
8533: LD_INT 105
8535: PUSH
8536: LD_INT 106
8538: PUSH
8539: LD_INT 107
8541: PUSH
8542: LD_INT 108
8544: PUSH
8545: LD_INT 109
8547: PUSH
8548: LD_INT 110
8550: PUSH
8551: LD_INT 111
8553: PUSH
8554: LD_INT 112
8556: PUSH
8557: LD_INT 114
8559: PUSH
8560: LD_INT 116
8562: PUSH
8563: LD_INT 117
8565: PUSH
8566: LD_INT 118
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: ST_TO_ADDR
8591: GO 10486
8593: LD_INT 11
8595: DOUBLE
8596: EQUAL
8597: IFTRUE 8601
8599: GO 8805
8601: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8602: LD_ADDR_VAR 0 2
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: LD_INT 3
8612: PUSH
8613: LD_INT 4
8615: PUSH
8616: LD_INT 5
8618: PUSH
8619: LD_INT 6
8621: PUSH
8622: LD_INT 7
8624: PUSH
8625: LD_INT 8
8627: PUSH
8628: LD_INT 9
8630: PUSH
8631: LD_INT 10
8633: PUSH
8634: LD_INT 11
8636: PUSH
8637: LD_INT 12
8639: PUSH
8640: LD_INT 13
8642: PUSH
8643: LD_INT 14
8645: PUSH
8646: LD_INT 15
8648: PUSH
8649: LD_INT 16
8651: PUSH
8652: LD_INT 17
8654: PUSH
8655: LD_INT 18
8657: PUSH
8658: LD_INT 19
8660: PUSH
8661: LD_INT 20
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 22
8669: PUSH
8670: LD_INT 23
8672: PUSH
8673: LD_INT 24
8675: PUSH
8676: LD_INT 25
8678: PUSH
8679: LD_INT 26
8681: PUSH
8682: LD_INT 28
8684: PUSH
8685: LD_INT 30
8687: PUSH
8688: LD_INT 31
8690: PUSH
8691: LD_INT 32
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 36
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 101
8735: PUSH
8736: LD_INT 102
8738: PUSH
8739: LD_INT 103
8741: PUSH
8742: LD_INT 104
8744: PUSH
8745: LD_INT 105
8747: PUSH
8748: LD_INT 106
8750: PUSH
8751: LD_INT 107
8753: PUSH
8754: LD_INT 108
8756: PUSH
8757: LD_INT 109
8759: PUSH
8760: LD_INT 110
8762: PUSH
8763: LD_INT 111
8765: PUSH
8766: LD_INT 112
8768: PUSH
8769: LD_INT 114
8771: PUSH
8772: LD_INT 116
8774: PUSH
8775: LD_INT 117
8777: PUSH
8778: LD_INT 118
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: ST_TO_ADDR
8803: GO 10486
8805: LD_INT 12
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 9033
8813: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8814: LD_ADDR_VAR 0 2
8818: PUSH
8819: LD_INT 1
8821: PUSH
8822: LD_INT 2
8824: PUSH
8825: LD_INT 3
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: LD_INT 5
8833: PUSH
8834: LD_INT 6
8836: PUSH
8837: LD_INT 7
8839: PUSH
8840: LD_INT 8
8842: PUSH
8843: LD_INT 9
8845: PUSH
8846: LD_INT 10
8848: PUSH
8849: LD_INT 11
8851: PUSH
8852: LD_INT 12
8854: PUSH
8855: LD_INT 13
8857: PUSH
8858: LD_INT 14
8860: PUSH
8861: LD_INT 15
8863: PUSH
8864: LD_INT 16
8866: PUSH
8867: LD_INT 17
8869: PUSH
8870: LD_INT 18
8872: PUSH
8873: LD_INT 19
8875: PUSH
8876: LD_INT 20
8878: PUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_INT 23
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 25
8893: PUSH
8894: LD_INT 26
8896: PUSH
8897: LD_INT 27
8899: PUSH
8900: LD_INT 28
8902: PUSH
8903: LD_INT 30
8905: PUSH
8906: LD_INT 31
8908: PUSH
8909: LD_INT 32
8911: PUSH
8912: LD_INT 33
8914: PUSH
8915: LD_INT 34
8917: PUSH
8918: LD_INT 36
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 101
8959: PUSH
8960: LD_INT 102
8962: PUSH
8963: LD_INT 103
8965: PUSH
8966: LD_INT 104
8968: PUSH
8969: LD_INT 105
8971: PUSH
8972: LD_INT 106
8974: PUSH
8975: LD_INT 107
8977: PUSH
8978: LD_INT 108
8980: PUSH
8981: LD_INT 109
8983: PUSH
8984: LD_INT 110
8986: PUSH
8987: LD_INT 111
8989: PUSH
8990: LD_INT 112
8992: PUSH
8993: LD_INT 113
8995: PUSH
8996: LD_INT 114
8998: PUSH
8999: LD_INT 116
9001: PUSH
9002: LD_INT 117
9004: PUSH
9005: LD_INT 118
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: ST_TO_ADDR
9031: GO 10486
9033: LD_INT 13
9035: DOUBLE
9036: EQUAL
9037: IFTRUE 9041
9039: GO 9249
9041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9042: LD_ADDR_VAR 0 2
9046: PUSH
9047: LD_INT 1
9049: PUSH
9050: LD_INT 2
9052: PUSH
9053: LD_INT 3
9055: PUSH
9056: LD_INT 4
9058: PUSH
9059: LD_INT 5
9061: PUSH
9062: LD_INT 8
9064: PUSH
9065: LD_INT 9
9067: PUSH
9068: LD_INT 10
9070: PUSH
9071: LD_INT 11
9073: PUSH
9074: LD_INT 12
9076: PUSH
9077: LD_INT 14
9079: PUSH
9080: LD_INT 15
9082: PUSH
9083: LD_INT 16
9085: PUSH
9086: LD_INT 17
9088: PUSH
9089: LD_INT 18
9091: PUSH
9092: LD_INT 19
9094: PUSH
9095: LD_INT 20
9097: PUSH
9098: LD_INT 21
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: LD_INT 23
9106: PUSH
9107: LD_INT 24
9109: PUSH
9110: LD_INT 25
9112: PUSH
9113: LD_INT 26
9115: PUSH
9116: LD_INT 27
9118: PUSH
9119: LD_INT 28
9121: PUSH
9122: LD_INT 30
9124: PUSH
9125: LD_INT 31
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 33
9133: PUSH
9134: LD_INT 34
9136: PUSH
9137: LD_INT 36
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 101
9175: PUSH
9176: LD_INT 102
9178: PUSH
9179: LD_INT 103
9181: PUSH
9182: LD_INT 104
9184: PUSH
9185: LD_INT 105
9187: PUSH
9188: LD_INT 106
9190: PUSH
9191: LD_INT 107
9193: PUSH
9194: LD_INT 108
9196: PUSH
9197: LD_INT 109
9199: PUSH
9200: LD_INT 110
9202: PUSH
9203: LD_INT 111
9205: PUSH
9206: LD_INT 112
9208: PUSH
9209: LD_INT 113
9211: PUSH
9212: LD_INT 114
9214: PUSH
9215: LD_INT 116
9217: PUSH
9218: LD_INT 117
9220: PUSH
9221: LD_INT 118
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: ST_TO_ADDR
9247: GO 10486
9249: LD_INT 14
9251: DOUBLE
9252: EQUAL
9253: IFTRUE 9257
9255: GO 9481
9257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9258: LD_ADDR_VAR 0 2
9262: PUSH
9263: LD_INT 1
9265: PUSH
9266: LD_INT 2
9268: PUSH
9269: LD_INT 3
9271: PUSH
9272: LD_INT 4
9274: PUSH
9275: LD_INT 5
9277: PUSH
9278: LD_INT 6
9280: PUSH
9281: LD_INT 7
9283: PUSH
9284: LD_INT 8
9286: PUSH
9287: LD_INT 9
9289: PUSH
9290: LD_INT 10
9292: PUSH
9293: LD_INT 11
9295: PUSH
9296: LD_INT 12
9298: PUSH
9299: LD_INT 13
9301: PUSH
9302: LD_INT 14
9304: PUSH
9305: LD_INT 15
9307: PUSH
9308: LD_INT 16
9310: PUSH
9311: LD_INT 17
9313: PUSH
9314: LD_INT 18
9316: PUSH
9317: LD_INT 19
9319: PUSH
9320: LD_INT 20
9322: PUSH
9323: LD_INT 21
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 23
9331: PUSH
9332: LD_INT 24
9334: PUSH
9335: LD_INT 25
9337: PUSH
9338: LD_INT 26
9340: PUSH
9341: LD_INT 27
9343: PUSH
9344: LD_INT 28
9346: PUSH
9347: LD_INT 29
9349: PUSH
9350: LD_INT 30
9352: PUSH
9353: LD_INT 31
9355: PUSH
9356: LD_INT 32
9358: PUSH
9359: LD_INT 33
9361: PUSH
9362: LD_INT 34
9364: PUSH
9365: LD_INT 36
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 101
9407: PUSH
9408: LD_INT 102
9410: PUSH
9411: LD_INT 103
9413: PUSH
9414: LD_INT 104
9416: PUSH
9417: LD_INT 105
9419: PUSH
9420: LD_INT 106
9422: PUSH
9423: LD_INT 107
9425: PUSH
9426: LD_INT 108
9428: PUSH
9429: LD_INT 109
9431: PUSH
9432: LD_INT 110
9434: PUSH
9435: LD_INT 111
9437: PUSH
9438: LD_INT 112
9440: PUSH
9441: LD_INT 113
9443: PUSH
9444: LD_INT 114
9446: PUSH
9447: LD_INT 116
9449: PUSH
9450: LD_INT 117
9452: PUSH
9453: LD_INT 118
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: ST_TO_ADDR
9479: GO 10486
9481: LD_INT 15
9483: DOUBLE
9484: EQUAL
9485: IFTRUE 9489
9487: GO 9713
9489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9490: LD_ADDR_VAR 0 2
9494: PUSH
9495: LD_INT 1
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 3
9503: PUSH
9504: LD_INT 4
9506: PUSH
9507: LD_INT 5
9509: PUSH
9510: LD_INT 6
9512: PUSH
9513: LD_INT 7
9515: PUSH
9516: LD_INT 8
9518: PUSH
9519: LD_INT 9
9521: PUSH
9522: LD_INT 10
9524: PUSH
9525: LD_INT 11
9527: PUSH
9528: LD_INT 12
9530: PUSH
9531: LD_INT 13
9533: PUSH
9534: LD_INT 14
9536: PUSH
9537: LD_INT 15
9539: PUSH
9540: LD_INT 16
9542: PUSH
9543: LD_INT 17
9545: PUSH
9546: LD_INT 18
9548: PUSH
9549: LD_INT 19
9551: PUSH
9552: LD_INT 20
9554: PUSH
9555: LD_INT 21
9557: PUSH
9558: LD_INT 22
9560: PUSH
9561: LD_INT 23
9563: PUSH
9564: LD_INT 24
9566: PUSH
9567: LD_INT 25
9569: PUSH
9570: LD_INT 26
9572: PUSH
9573: LD_INT 27
9575: PUSH
9576: LD_INT 28
9578: PUSH
9579: LD_INT 29
9581: PUSH
9582: LD_INT 30
9584: PUSH
9585: LD_INT 31
9587: PUSH
9588: LD_INT 32
9590: PUSH
9591: LD_INT 33
9593: PUSH
9594: LD_INT 34
9596: PUSH
9597: LD_INT 36
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 101
9639: PUSH
9640: LD_INT 102
9642: PUSH
9643: LD_INT 103
9645: PUSH
9646: LD_INT 104
9648: PUSH
9649: LD_INT 105
9651: PUSH
9652: LD_INT 106
9654: PUSH
9655: LD_INT 107
9657: PUSH
9658: LD_INT 108
9660: PUSH
9661: LD_INT 109
9663: PUSH
9664: LD_INT 110
9666: PUSH
9667: LD_INT 111
9669: PUSH
9670: LD_INT 112
9672: PUSH
9673: LD_INT 113
9675: PUSH
9676: LD_INT 114
9678: PUSH
9679: LD_INT 116
9681: PUSH
9682: LD_INT 117
9684: PUSH
9685: LD_INT 118
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: ST_TO_ADDR
9711: GO 10486
9713: LD_INT 16
9715: DOUBLE
9716: EQUAL
9717: IFTRUE 9721
9719: GO 9857
9721: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: LD_INT 2
9729: PUSH
9730: LD_INT 4
9732: PUSH
9733: LD_INT 5
9735: PUSH
9736: LD_INT 7
9738: PUSH
9739: LD_INT 11
9741: PUSH
9742: LD_INT 12
9744: PUSH
9745: LD_INT 15
9747: PUSH
9748: LD_INT 16
9750: PUSH
9751: LD_INT 20
9753: PUSH
9754: LD_INT 21
9756: PUSH
9757: LD_INT 22
9759: PUSH
9760: LD_INT 23
9762: PUSH
9763: LD_INT 25
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: LD_INT 30
9771: PUSH
9772: LD_INT 31
9774: PUSH
9775: LD_INT 32
9777: PUSH
9778: LD_INT 33
9780: PUSH
9781: LD_INT 34
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 101
9807: PUSH
9808: LD_INT 102
9810: PUSH
9811: LD_INT 103
9813: PUSH
9814: LD_INT 106
9816: PUSH
9817: LD_INT 108
9819: PUSH
9820: LD_INT 112
9822: PUSH
9823: LD_INT 113
9825: PUSH
9826: LD_INT 114
9828: PUSH
9829: LD_INT 116
9831: PUSH
9832: LD_INT 117
9834: PUSH
9835: LD_INT 118
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: ST_TO_ADDR
9855: GO 10486
9857: LD_INT 17
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 10089
9865: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9866: LD_ADDR_VAR 0 2
9870: PUSH
9871: LD_INT 1
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: LD_INT 3
9879: PUSH
9880: LD_INT 4
9882: PUSH
9883: LD_INT 5
9885: PUSH
9886: LD_INT 6
9888: PUSH
9889: LD_INT 7
9891: PUSH
9892: LD_INT 8
9894: PUSH
9895: LD_INT 9
9897: PUSH
9898: LD_INT 10
9900: PUSH
9901: LD_INT 11
9903: PUSH
9904: LD_INT 12
9906: PUSH
9907: LD_INT 13
9909: PUSH
9910: LD_INT 14
9912: PUSH
9913: LD_INT 15
9915: PUSH
9916: LD_INT 16
9918: PUSH
9919: LD_INT 17
9921: PUSH
9922: LD_INT 18
9924: PUSH
9925: LD_INT 19
9927: PUSH
9928: LD_INT 20
9930: PUSH
9931: LD_INT 21
9933: PUSH
9934: LD_INT 22
9936: PUSH
9937: LD_INT 23
9939: PUSH
9940: LD_INT 24
9942: PUSH
9943: LD_INT 25
9945: PUSH
9946: LD_INT 26
9948: PUSH
9949: LD_INT 27
9951: PUSH
9952: LD_INT 28
9954: PUSH
9955: LD_INT 29
9957: PUSH
9958: LD_INT 30
9960: PUSH
9961: LD_INT 31
9963: PUSH
9964: LD_INT 32
9966: PUSH
9967: LD_INT 33
9969: PUSH
9970: LD_INT 34
9972: PUSH
9973: LD_INT 36
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 101
10015: PUSH
10016: LD_INT 102
10018: PUSH
10019: LD_INT 103
10021: PUSH
10022: LD_INT 104
10024: PUSH
10025: LD_INT 105
10027: PUSH
10028: LD_INT 106
10030: PUSH
10031: LD_INT 107
10033: PUSH
10034: LD_INT 108
10036: PUSH
10037: LD_INT 109
10039: PUSH
10040: LD_INT 110
10042: PUSH
10043: LD_INT 111
10045: PUSH
10046: LD_INT 112
10048: PUSH
10049: LD_INT 113
10051: PUSH
10052: LD_INT 114
10054: PUSH
10055: LD_INT 116
10057: PUSH
10058: LD_INT 117
10060: PUSH
10061: LD_INT 118
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: ST_TO_ADDR
10087: GO 10486
10089: LD_INT 18
10091: DOUBLE
10092: EQUAL
10093: IFTRUE 10097
10095: GO 10245
10097: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10098: LD_ADDR_VAR 0 2
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: LD_INT 4
10108: PUSH
10109: LD_INT 5
10111: PUSH
10112: LD_INT 7
10114: PUSH
10115: LD_INT 11
10117: PUSH
10118: LD_INT 12
10120: PUSH
10121: LD_INT 15
10123: PUSH
10124: LD_INT 16
10126: PUSH
10127: LD_INT 20
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 22
10135: PUSH
10136: LD_INT 23
10138: PUSH
10139: LD_INT 25
10141: PUSH
10142: LD_INT 26
10144: PUSH
10145: LD_INT 30
10147: PUSH
10148: LD_INT 31
10150: PUSH
10151: LD_INT 32
10153: PUSH
10154: LD_INT 33
10156: PUSH
10157: LD_INT 34
10159: PUSH
10160: LD_INT 35
10162: PUSH
10163: LD_INT 36
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 101
10191: PUSH
10192: LD_INT 102
10194: PUSH
10195: LD_INT 103
10197: PUSH
10198: LD_INT 106
10200: PUSH
10201: LD_INT 108
10203: PUSH
10204: LD_INT 112
10206: PUSH
10207: LD_INT 113
10209: PUSH
10210: LD_INT 114
10212: PUSH
10213: LD_INT 115
10215: PUSH
10216: LD_INT 116
10218: PUSH
10219: LD_INT 117
10221: PUSH
10222: LD_INT 118
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: ST_TO_ADDR
10243: GO 10486
10245: LD_INT 19
10247: DOUBLE
10248: EQUAL
10249: IFTRUE 10253
10251: GO 10485
10253: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10254: LD_ADDR_VAR 0 2
10258: PUSH
10259: LD_INT 1
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: LD_INT 3
10267: PUSH
10268: LD_INT 4
10270: PUSH
10271: LD_INT 5
10273: PUSH
10274: LD_INT 6
10276: PUSH
10277: LD_INT 7
10279: PUSH
10280: LD_INT 8
10282: PUSH
10283: LD_INT 9
10285: PUSH
10286: LD_INT 10
10288: PUSH
10289: LD_INT 11
10291: PUSH
10292: LD_INT 12
10294: PUSH
10295: LD_INT 13
10297: PUSH
10298: LD_INT 14
10300: PUSH
10301: LD_INT 15
10303: PUSH
10304: LD_INT 16
10306: PUSH
10307: LD_INT 17
10309: PUSH
10310: LD_INT 18
10312: PUSH
10313: LD_INT 19
10315: PUSH
10316: LD_INT 20
10318: PUSH
10319: LD_INT 21
10321: PUSH
10322: LD_INT 22
10324: PUSH
10325: LD_INT 23
10327: PUSH
10328: LD_INT 24
10330: PUSH
10331: LD_INT 25
10333: PUSH
10334: LD_INT 26
10336: PUSH
10337: LD_INT 27
10339: PUSH
10340: LD_INT 28
10342: PUSH
10343: LD_INT 29
10345: PUSH
10346: LD_INT 30
10348: PUSH
10349: LD_INT 31
10351: PUSH
10352: LD_INT 32
10354: PUSH
10355: LD_INT 33
10357: PUSH
10358: LD_INT 34
10360: PUSH
10361: LD_INT 35
10363: PUSH
10364: LD_INT 36
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 101
10407: PUSH
10408: LD_INT 102
10410: PUSH
10411: LD_INT 103
10413: PUSH
10414: LD_INT 104
10416: PUSH
10417: LD_INT 105
10419: PUSH
10420: LD_INT 106
10422: PUSH
10423: LD_INT 107
10425: PUSH
10426: LD_INT 108
10428: PUSH
10429: LD_INT 109
10431: PUSH
10432: LD_INT 110
10434: PUSH
10435: LD_INT 111
10437: PUSH
10438: LD_INT 112
10440: PUSH
10441: LD_INT 113
10443: PUSH
10444: LD_INT 114
10446: PUSH
10447: LD_INT 115
10449: PUSH
10450: LD_INT 116
10452: PUSH
10453: LD_INT 117
10455: PUSH
10456: LD_INT 118
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: ST_TO_ADDR
10483: GO 10486
10485: POP
// end else
10486: GO 10717
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10488: LD_ADDR_VAR 0 2
10492: PUSH
10493: LD_INT 1
10495: PUSH
10496: LD_INT 2
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: LD_INT 4
10504: PUSH
10505: LD_INT 5
10507: PUSH
10508: LD_INT 6
10510: PUSH
10511: LD_INT 7
10513: PUSH
10514: LD_INT 8
10516: PUSH
10517: LD_INT 9
10519: PUSH
10520: LD_INT 10
10522: PUSH
10523: LD_INT 11
10525: PUSH
10526: LD_INT 12
10528: PUSH
10529: LD_INT 13
10531: PUSH
10532: LD_INT 14
10534: PUSH
10535: LD_INT 15
10537: PUSH
10538: LD_INT 16
10540: PUSH
10541: LD_INT 17
10543: PUSH
10544: LD_INT 18
10546: PUSH
10547: LD_INT 19
10549: PUSH
10550: LD_INT 20
10552: PUSH
10553: LD_INT 21
10555: PUSH
10556: LD_INT 22
10558: PUSH
10559: LD_INT 23
10561: PUSH
10562: LD_INT 24
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: LD_INT 26
10570: PUSH
10571: LD_INT 27
10573: PUSH
10574: LD_INT 28
10576: PUSH
10577: LD_INT 29
10579: PUSH
10580: LD_INT 30
10582: PUSH
10583: LD_INT 31
10585: PUSH
10586: LD_INT 32
10588: PUSH
10589: LD_INT 33
10591: PUSH
10592: LD_INT 34
10594: PUSH
10595: LD_INT 35
10597: PUSH
10598: LD_INT 36
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 101
10641: PUSH
10642: LD_INT 102
10644: PUSH
10645: LD_INT 103
10647: PUSH
10648: LD_INT 104
10650: PUSH
10651: LD_INT 105
10653: PUSH
10654: LD_INT 106
10656: PUSH
10657: LD_INT 107
10659: PUSH
10660: LD_INT 108
10662: PUSH
10663: LD_INT 109
10665: PUSH
10666: LD_INT 110
10668: PUSH
10669: LD_INT 111
10671: PUSH
10672: LD_INT 112
10674: PUSH
10675: LD_INT 113
10677: PUSH
10678: LD_INT 114
10680: PUSH
10681: LD_INT 115
10683: PUSH
10684: LD_INT 116
10686: PUSH
10687: LD_INT 117
10689: PUSH
10690: LD_INT 118
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: ST_TO_ADDR
// if result then
10717: LD_VAR 0 2
10721: IFFALSE 11507
// begin normal :=  ;
10723: LD_ADDR_VAR 0 5
10727: PUSH
10728: LD_STRING 
10730: ST_TO_ADDR
// hardcore :=  ;
10731: LD_ADDR_VAR 0 6
10735: PUSH
10736: LD_STRING 
10738: ST_TO_ADDR
// active :=  ;
10739: LD_ADDR_VAR 0 7
10743: PUSH
10744: LD_STRING 
10746: ST_TO_ADDR
// for i = 1 to normalCounter do
10747: LD_ADDR_VAR 0 8
10751: PUSH
10752: DOUBLE
10753: LD_INT 1
10755: DEC
10756: ST_TO_ADDR
10757: LD_EXP 26
10761: PUSH
10762: FOR_TO
10763: IFFALSE 10864
// begin tmp := 0 ;
10765: LD_ADDR_VAR 0 3
10769: PUSH
10770: LD_STRING 0
10772: ST_TO_ADDR
// if result [ 1 ] then
10773: LD_VAR 0 2
10777: PUSH
10778: LD_INT 1
10780: ARRAY
10781: IFFALSE 10846
// if result [ 1 ] [ 1 ] = i then
10783: LD_VAR 0 2
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PUSH
10792: LD_INT 1
10794: ARRAY
10795: PUSH
10796: LD_VAR 0 8
10800: EQUAL
10801: IFFALSE 10846
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10803: LD_ADDR_VAR 0 2
10807: PUSH
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: LD_VAR 0 2
10820: PUSH
10821: LD_INT 1
10823: ARRAY
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: CALL_OW 3
10832: PPUSH
10833: CALL_OW 1
10837: ST_TO_ADDR
// tmp := 1 ;
10838: LD_ADDR_VAR 0 3
10842: PUSH
10843: LD_STRING 1
10845: ST_TO_ADDR
// end ; normal := normal & tmp ;
10846: LD_ADDR_VAR 0 5
10850: PUSH
10851: LD_VAR 0 5
10855: PUSH
10856: LD_VAR 0 3
10860: STR
10861: ST_TO_ADDR
// end ;
10862: GO 10762
10864: POP
10865: POP
// for i = 1 to hardcoreCounter do
10866: LD_ADDR_VAR 0 8
10870: PUSH
10871: DOUBLE
10872: LD_INT 1
10874: DEC
10875: ST_TO_ADDR
10876: LD_EXP 27
10880: PUSH
10881: FOR_TO
10882: IFFALSE 10987
// begin tmp := 0 ;
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: LD_STRING 0
10891: ST_TO_ADDR
// if result [ 2 ] then
10892: LD_VAR 0 2
10896: PUSH
10897: LD_INT 2
10899: ARRAY
10900: IFFALSE 10969
// if result [ 2 ] [ 1 ] = 100 + i then
10902: LD_VAR 0 2
10906: PUSH
10907: LD_INT 2
10909: ARRAY
10910: PUSH
10911: LD_INT 1
10913: ARRAY
10914: PUSH
10915: LD_INT 100
10917: PUSH
10918: LD_VAR 0 8
10922: PLUS
10923: EQUAL
10924: IFFALSE 10969
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10926: LD_ADDR_VAR 0 2
10930: PUSH
10931: LD_VAR 0 2
10935: PPUSH
10936: LD_INT 2
10938: PPUSH
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 2
10946: ARRAY
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 3
10955: PPUSH
10956: CALL_OW 1
10960: ST_TO_ADDR
// tmp := 1 ;
10961: LD_ADDR_VAR 0 3
10965: PUSH
10966: LD_STRING 1
10968: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10969: LD_ADDR_VAR 0 6
10973: PUSH
10974: LD_VAR 0 6
10978: PUSH
10979: LD_VAR 0 3
10983: STR
10984: ST_TO_ADDR
// end ;
10985: GO 10881
10987: POP
10988: POP
// if isGameLoad then
10989: LD_VAR 0 1
10993: IFFALSE 11468
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10995: LD_ADDR_VAR 0 4
10999: PUSH
11000: LD_EXP 30
11004: PUSH
11005: LD_EXP 29
11009: PUSH
11010: LD_EXP 31
11014: PUSH
11015: LD_EXP 28
11019: PUSH
11020: LD_EXP 32
11024: PUSH
11025: LD_EXP 33
11029: PUSH
11030: LD_EXP 34
11034: PUSH
11035: LD_EXP 35
11039: PUSH
11040: LD_EXP 36
11044: PUSH
11045: LD_EXP 37
11049: PUSH
11050: LD_EXP 38
11054: PUSH
11055: LD_EXP 39
11059: PUSH
11060: LD_EXP 40
11064: PUSH
11065: LD_EXP 41
11069: PUSH
11070: LD_EXP 49
11074: PUSH
11075: LD_EXP 50
11079: PUSH
11080: LD_EXP 51
11084: PUSH
11085: LD_EXP 52
11089: PUSH
11090: LD_EXP 54
11094: PUSH
11095: LD_EXP 55
11099: PUSH
11100: LD_EXP 56
11104: PUSH
11105: LD_EXP 59
11109: PUSH
11110: LD_EXP 61
11114: PUSH
11115: LD_EXP 62
11119: PUSH
11120: LD_EXP 63
11124: PUSH
11125: LD_EXP 65
11129: PUSH
11130: LD_EXP 66
11134: PUSH
11135: LD_EXP 69
11139: PUSH
11140: LD_EXP 70
11144: PUSH
11145: LD_EXP 71
11149: PUSH
11150: LD_EXP 72
11154: PUSH
11155: LD_EXP 73
11159: PUSH
11160: LD_EXP 74
11164: PUSH
11165: LD_EXP 75
11169: PUSH
11170: LD_EXP 76
11174: PUSH
11175: LD_EXP 77
11179: PUSH
11180: LD_EXP 42
11184: PUSH
11185: LD_EXP 43
11189: PUSH
11190: LD_EXP 46
11194: PUSH
11195: LD_EXP 47
11199: PUSH
11200: LD_EXP 48
11204: PUSH
11205: LD_EXP 44
11209: PUSH
11210: LD_EXP 45
11214: PUSH
11215: LD_EXP 53
11219: PUSH
11220: LD_EXP 57
11224: PUSH
11225: LD_EXP 58
11229: PUSH
11230: LD_EXP 60
11234: PUSH
11235: LD_EXP 64
11239: PUSH
11240: LD_EXP 67
11244: PUSH
11245: LD_EXP 68
11249: PUSH
11250: LD_EXP 78
11254: PUSH
11255: LD_EXP 79
11259: PUSH
11260: LD_EXP 80
11264: PUSH
11265: LD_EXP 81
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: ST_TO_ADDR
// tmp :=  ;
11326: LD_ADDR_VAR 0 3
11330: PUSH
11331: LD_STRING 
11333: ST_TO_ADDR
// for i = 1 to normalCounter do
11334: LD_ADDR_VAR 0 8
11338: PUSH
11339: DOUBLE
11340: LD_INT 1
11342: DEC
11343: ST_TO_ADDR
11344: LD_EXP 26
11348: PUSH
11349: FOR_TO
11350: IFFALSE 11386
// begin if flags [ i ] then
11352: LD_VAR 0 4
11356: PUSH
11357: LD_VAR 0 8
11361: ARRAY
11362: IFFALSE 11384
// tmp := tmp & i & ; ;
11364: LD_ADDR_VAR 0 3
11368: PUSH
11369: LD_VAR 0 3
11373: PUSH
11374: LD_VAR 0 8
11378: STR
11379: PUSH
11380: LD_STRING ;
11382: STR
11383: ST_TO_ADDR
// end ;
11384: GO 11349
11386: POP
11387: POP
// for i = 1 to hardcoreCounter do
11388: LD_ADDR_VAR 0 8
11392: PUSH
11393: DOUBLE
11394: LD_INT 1
11396: DEC
11397: ST_TO_ADDR
11398: LD_EXP 27
11402: PUSH
11403: FOR_TO
11404: IFFALSE 11450
// begin if flags [ normalCounter + i ] then
11406: LD_VAR 0 4
11410: PUSH
11411: LD_EXP 26
11415: PUSH
11416: LD_VAR 0 8
11420: PLUS
11421: ARRAY
11422: IFFALSE 11448
// tmp := tmp & ( 100 + i ) & ; ;
11424: LD_ADDR_VAR 0 3
11428: PUSH
11429: LD_VAR 0 3
11433: PUSH
11434: LD_INT 100
11436: PUSH
11437: LD_VAR 0 8
11441: PLUS
11442: STR
11443: PUSH
11444: LD_STRING ;
11446: STR
11447: ST_TO_ADDR
// end ;
11448: GO 11403
11450: POP
11451: POP
// if tmp then
11452: LD_VAR 0 3
11456: IFFALSE 11468
// active := tmp ;
11458: LD_ADDR_VAR 0 7
11462: PUSH
11463: LD_VAR 0 3
11467: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11468: LD_STRING getStreamItemsFromMission("
11470: PUSH
11471: LD_VAR 0 5
11475: STR
11476: PUSH
11477: LD_STRING ","
11479: STR
11480: PUSH
11481: LD_VAR 0 6
11485: STR
11486: PUSH
11487: LD_STRING ","
11489: STR
11490: PUSH
11491: LD_VAR 0 7
11495: STR
11496: PUSH
11497: LD_STRING ")
11499: STR
11500: PPUSH
11501: CALL_OW 559
// end else
11505: GO 11514
// ToLua ( getStreamItemsFromMission("","","") ) ;
11507: LD_STRING getStreamItemsFromMission("","","")
11509: PPUSH
11510: CALL_OW 559
// end ;
11514: LD_VAR 0 2
11518: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11519: LD_EXP 25
11523: PUSH
11524: LD_EXP 30
11528: AND
11529: IFFALSE 11653
11531: GO 11533
11533: DISABLE
11534: LD_INT 0
11536: PPUSH
11537: PPUSH
// begin enable ;
11538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_OWVAR 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 34
11561: PUSH
11562: LD_INT 7
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 45
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 34
11581: PUSH
11582: LD_INT 28
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 34
11591: PUSH
11592: LD_INT 47
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PPUSH
11610: CALL_OW 69
11614: ST_TO_ADDR
// if not tmp then
11615: LD_VAR 0 2
11619: NOT
11620: IFFALSE 11624
// exit ;
11622: GO 11653
// for i in tmp do
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_VAR 0 2
11633: PUSH
11634: FOR_IN
11635: IFFALSE 11651
// begin SetLives ( i , 0 ) ;
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_INT 0
11644: PPUSH
11645: CALL_OW 234
// end ;
11649: GO 11634
11651: POP
11652: POP
// end ;
11653: PPOPN 2
11655: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11656: LD_EXP 25
11660: PUSH
11661: LD_EXP 31
11665: AND
11666: IFFALSE 11750
11668: GO 11670
11670: DISABLE
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
// begin enable ;
11675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11676: LD_ADDR_VAR 0 2
11680: PUSH
11681: LD_INT 22
11683: PUSH
11684: LD_OWVAR 2
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 32
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PPUSH
11707: CALL_OW 69
11711: ST_TO_ADDR
// if not tmp then
11712: LD_VAR 0 2
11716: NOT
11717: IFFALSE 11721
// exit ;
11719: GO 11750
// for i in tmp do
11721: LD_ADDR_VAR 0 1
11725: PUSH
11726: LD_VAR 0 2
11730: PUSH
11731: FOR_IN
11732: IFFALSE 11748
// begin SetLives ( i , 0 ) ;
11734: LD_VAR 0 1
11738: PPUSH
11739: LD_INT 0
11741: PPUSH
11742: CALL_OW 234
// end ;
11746: GO 11731
11748: POP
11749: POP
// end ;
11750: PPOPN 2
11752: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11753: LD_EXP 25
11757: PUSH
11758: LD_EXP 28
11762: AND
11763: IFFALSE 11856
11765: GO 11767
11767: DISABLE
11768: LD_INT 0
11770: PPUSH
// begin enable ;
11771: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: LD_OWVAR 2
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 25
11794: PUSH
11795: LD_INT 5
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 25
11804: PUSH
11805: LD_INT 9
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 25
11814: PUSH
11815: LD_INT 8
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL_OW 69
11836: PUSH
11837: FOR_IN
11838: IFFALSE 11854
// begin SetClass ( i , 1 ) ;
11840: LD_VAR 0 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: CALL_OW 336
// end ;
11852: GO 11837
11854: POP
11855: POP
// end ;
11856: PPOPN 1
11858: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11859: LD_EXP 25
11863: PUSH
11864: LD_EXP 29
11868: AND
11869: PUSH
11870: LD_OWVAR 65
11874: PUSH
11875: LD_INT 7
11877: LESS
11878: AND
11879: IFFALSE 11893
11881: GO 11883
11883: DISABLE
// begin enable ;
11884: ENABLE
// game_speed := 7 ;
11885: LD_ADDR_OWVAR 65
11889: PUSH
11890: LD_INT 7
11892: ST_TO_ADDR
// end ;
11893: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11894: LD_EXP 25
11898: PUSH
11899: LD_EXP 32
11903: AND
11904: IFFALSE 12106
11906: GO 11908
11908: DISABLE
11909: LD_INT 0
11911: PPUSH
11912: PPUSH
11913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11914: LD_ADDR_VAR 0 3
11918: PUSH
11919: LD_INT 81
11921: PUSH
11922: LD_OWVAR 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 21
11933: PUSH
11934: LD_INT 1
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PPUSH
11945: CALL_OW 69
11949: ST_TO_ADDR
// if not tmp then
11950: LD_VAR 0 3
11954: NOT
11955: IFFALSE 11959
// exit ;
11957: GO 12106
// if tmp > 5 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 5
11966: GREATER
11967: IFFALSE 11979
// k := 5 else
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_INT 5
11976: ST_TO_ADDR
11977: GO 11989
// k := tmp ;
11979: LD_ADDR_VAR 0 2
11983: PUSH
11984: LD_VAR 0 3
11988: ST_TO_ADDR
// for i := 1 to k do
11989: LD_ADDR_VAR 0 1
11993: PUSH
11994: DOUBLE
11995: LD_INT 1
11997: DEC
11998: ST_TO_ADDR
11999: LD_VAR 0 2
12003: PUSH
12004: FOR_TO
12005: IFFALSE 12104
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12007: LD_VAR 0 3
12011: PUSH
12012: LD_VAR 0 1
12016: ARRAY
12017: PPUSH
12018: LD_VAR 0 1
12022: PUSH
12023: LD_INT 4
12025: MOD
12026: PUSH
12027: LD_INT 1
12029: PLUS
12030: PPUSH
12031: CALL_OW 259
12035: PUSH
12036: LD_INT 10
12038: LESS
12039: IFFALSE 12102
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12041: LD_VAR 0 3
12045: PUSH
12046: LD_VAR 0 1
12050: ARRAY
12051: PPUSH
12052: LD_VAR 0 1
12056: PUSH
12057: LD_INT 4
12059: MOD
12060: PUSH
12061: LD_INT 1
12063: PLUS
12064: PPUSH
12065: LD_VAR 0 3
12069: PUSH
12070: LD_VAR 0 1
12074: ARRAY
12075: PPUSH
12076: LD_VAR 0 1
12080: PUSH
12081: LD_INT 4
12083: MOD
12084: PUSH
12085: LD_INT 1
12087: PLUS
12088: PPUSH
12089: CALL_OW 259
12093: PUSH
12094: LD_INT 1
12096: PLUS
12097: PPUSH
12098: CALL_OW 237
12102: GO 12004
12104: POP
12105: POP
// end ;
12106: PPOPN 3
12108: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12109: LD_EXP 25
12113: PUSH
12114: LD_EXP 33
12118: AND
12119: IFFALSE 12139
12121: GO 12123
12123: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12124: LD_INT 4
12126: PPUSH
12127: LD_OWVAR 2
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: CALL_OW 324
12139: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12140: LD_EXP 25
12144: PUSH
12145: LD_EXP 62
12149: AND
12150: IFFALSE 12170
12152: GO 12154
12154: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12155: LD_INT 19
12157: PPUSH
12158: LD_OWVAR 2
12162: PPUSH
12163: LD_INT 0
12165: PPUSH
12166: CALL_OW 324
12170: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12171: LD_EXP 25
12175: PUSH
12176: LD_EXP 34
12180: AND
12181: IFFALSE 12283
12183: GO 12185
12185: DISABLE
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
// begin enable ;
12190: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12191: LD_ADDR_VAR 0 2
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_OWVAR 2
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 2
12210: PUSH
12211: LD_INT 34
12213: PUSH
12214: LD_INT 11
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 34
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 69
12244: ST_TO_ADDR
// if not tmp then
12245: LD_VAR 0 2
12249: NOT
12250: IFFALSE 12254
// exit ;
12252: GO 12283
// for i in tmp do
12254: LD_ADDR_VAR 0 1
12258: PUSH
12259: LD_VAR 0 2
12263: PUSH
12264: FOR_IN
12265: IFFALSE 12281
// begin SetLives ( i , 0 ) ;
12267: LD_VAR 0 1
12271: PPUSH
12272: LD_INT 0
12274: PPUSH
12275: CALL_OW 234
// end ;
12279: GO 12264
12281: POP
12282: POP
// end ;
12283: PPOPN 2
12285: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12286: LD_EXP 25
12290: PUSH
12291: LD_EXP 35
12295: AND
12296: IFFALSE 12316
12298: GO 12300
12300: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12301: LD_INT 32
12303: PPUSH
12304: LD_OWVAR 2
12308: PPUSH
12309: LD_INT 0
12311: PPUSH
12312: CALL_OW 324
12316: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12317: LD_EXP 25
12321: PUSH
12322: LD_EXP 36
12326: AND
12327: IFFALSE 12508
12329: GO 12331
12331: DISABLE
12332: LD_INT 0
12334: PPUSH
12335: PPUSH
12336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_OWVAR 2
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 33
12356: PUSH
12357: LD_INT 3
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: ST_TO_ADDR
// if not tmp then
12373: LD_VAR 0 2
12377: NOT
12378: IFFALSE 12382
// exit ;
12380: GO 12508
// side := 0 ;
12382: LD_ADDR_VAR 0 3
12386: PUSH
12387: LD_INT 0
12389: ST_TO_ADDR
// for i := 1 to 8 do
12390: LD_ADDR_VAR 0 1
12394: PUSH
12395: DOUBLE
12396: LD_INT 1
12398: DEC
12399: ST_TO_ADDR
12400: LD_INT 8
12402: PUSH
12403: FOR_TO
12404: IFFALSE 12452
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12406: LD_OWVAR 2
12410: PUSH
12411: LD_VAR 0 1
12415: NONEQUAL
12416: PUSH
12417: LD_OWVAR 2
12421: PPUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: CALL_OW 81
12431: PUSH
12432: LD_INT 2
12434: EQUAL
12435: AND
12436: IFFALSE 12450
// begin side := i ;
12438: LD_ADDR_VAR 0 3
12442: PUSH
12443: LD_VAR 0 1
12447: ST_TO_ADDR
// break ;
12448: GO 12452
// end ;
12450: GO 12403
12452: POP
12453: POP
// if not side then
12454: LD_VAR 0 3
12458: NOT
12459: IFFALSE 12463
// exit ;
12461: GO 12508
// for i := 1 to tmp do
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: DOUBLE
12469: LD_INT 1
12471: DEC
12472: ST_TO_ADDR
12473: LD_VAR 0 2
12477: PUSH
12478: FOR_TO
12479: IFFALSE 12506
// if Prob ( 60 ) then
12481: LD_INT 60
12483: PPUSH
12484: CALL_OW 13
12488: IFFALSE 12504
// SetSide ( i , side ) ;
12490: LD_VAR 0 1
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: CALL_OW 235
12504: GO 12478
12506: POP
12507: POP
// end ;
12508: PPOPN 3
12510: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12511: LD_EXP 25
12515: PUSH
12516: LD_EXP 38
12520: AND
12521: IFFALSE 12640
12523: GO 12525
12525: DISABLE
12526: LD_INT 0
12528: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12529: LD_ADDR_VAR 0 1
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_OWVAR 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 21
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: LD_INT 23
12561: PUSH
12562: LD_INT 0
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: PUSH
12583: FOR_IN
12584: IFFALSE 12638
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12586: LD_VAR 0 1
12590: PPUSH
12591: CALL_OW 257
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: LD_INT 4
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: IN
12614: IFFALSE 12636
// SetClass ( un , rand ( 1 , 4 ) ) ;
12616: LD_VAR 0 1
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: LD_INT 4
12626: PPUSH
12627: CALL_OW 12
12631: PPUSH
12632: CALL_OW 336
12636: GO 12583
12638: POP
12639: POP
// end ;
12640: PPOPN 1
12642: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12643: LD_EXP 25
12647: PUSH
12648: LD_EXP 37
12652: AND
12653: IFFALSE 12732
12655: GO 12657
12657: DISABLE
12658: LD_INT 0
12660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12661: LD_ADDR_VAR 0 1
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_OWVAR 2
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 21
12680: PUSH
12681: LD_INT 3
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PPUSH
12692: CALL_OW 69
12696: ST_TO_ADDR
// if not tmp then
12697: LD_VAR 0 1
12701: NOT
12702: IFFALSE 12706
// exit ;
12704: GO 12732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 12
12723: ARRAY
12724: PPUSH
12725: LD_INT 100
12727: PPUSH
12728: CALL_OW 234
// end ;
12732: PPOPN 1
12734: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12735: LD_EXP 25
12739: PUSH
12740: LD_EXP 39
12744: AND
12745: IFFALSE 12843
12747: GO 12749
12749: DISABLE
12750: LD_INT 0
12752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12753: LD_ADDR_VAR 0 1
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_OWVAR 2
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 21
12772: PUSH
12773: LD_INT 1
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 69
12788: ST_TO_ADDR
// if not tmp then
12789: LD_VAR 0 1
12793: NOT
12794: IFFALSE 12798
// exit ;
12796: GO 12843
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12798: LD_VAR 0 1
12802: PUSH
12803: LD_INT 1
12805: PPUSH
12806: LD_VAR 0 1
12810: PPUSH
12811: CALL_OW 12
12815: ARRAY
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: LD_INT 4
12822: PPUSH
12823: CALL_OW 12
12827: PPUSH
12828: LD_INT 3000
12830: PPUSH
12831: LD_INT 9000
12833: PPUSH
12834: CALL_OW 12
12838: PPUSH
12839: CALL_OW 492
// end ;
12843: PPOPN 1
12845: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12846: LD_EXP 25
12850: PUSH
12851: LD_EXP 40
12855: AND
12856: IFFALSE 12876
12858: GO 12860
12860: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12861: LD_INT 1
12863: PPUSH
12864: LD_OWVAR 2
12868: PPUSH
12869: LD_INT 0
12871: PPUSH
12872: CALL_OW 324
12876: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12877: LD_EXP 25
12881: PUSH
12882: LD_EXP 41
12886: AND
12887: IFFALSE 12970
12889: GO 12891
12891: DISABLE
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_OWVAR 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 21
12915: PUSH
12916: LD_INT 3
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: ST_TO_ADDR
// if not tmp then
12932: LD_VAR 0 2
12936: NOT
12937: IFFALSE 12941
// exit ;
12939: GO 12970
// for i in tmp do
12941: LD_ADDR_VAR 0 1
12945: PUSH
12946: LD_VAR 0 2
12950: PUSH
12951: FOR_IN
12952: IFFALSE 12968
// SetBLevel ( i , 10 ) ;
12954: LD_VAR 0 1
12958: PPUSH
12959: LD_INT 10
12961: PPUSH
12962: CALL_OW 241
12966: GO 12951
12968: POP
12969: POP
// end ;
12970: PPOPN 2
12972: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12973: LD_EXP 25
12977: PUSH
12978: LD_EXP 42
12982: AND
12983: IFFALSE 13094
12985: GO 12987
12987: DISABLE
12988: LD_INT 0
12990: PPUSH
12991: PPUSH
12992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_OWVAR 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 25
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: ST_TO_ADDR
// if not tmp then
13029: LD_VAR 0 3
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13094
// un := tmp [ rand ( 1 , tmp ) ] ;
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: CALL_OW 12
13060: ARRAY
13061: ST_TO_ADDR
// if Crawls ( un ) then
13062: LD_VAR 0 2
13066: PPUSH
13067: CALL_OW 318
13071: IFFALSE 13082
// ComWalk ( un ) ;
13073: LD_VAR 0 2
13077: PPUSH
13078: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13082: LD_VAR 0 2
13086: PPUSH
13087: LD_INT 5
13089: PPUSH
13090: CALL_OW 336
// end ;
13094: PPOPN 3
13096: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13097: LD_EXP 25
13101: PUSH
13102: LD_EXP 43
13106: AND
13107: PUSH
13108: LD_OWVAR 67
13112: PUSH
13113: LD_INT 4
13115: LESS
13116: AND
13117: IFFALSE 13136
13119: GO 13121
13121: DISABLE
// begin Difficulty := Difficulty + 1 ;
13122: LD_ADDR_OWVAR 67
13126: PUSH
13127: LD_OWVAR 67
13131: PUSH
13132: LD_INT 1
13134: PLUS
13135: ST_TO_ADDR
// end ;
13136: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13137: LD_EXP 25
13141: PUSH
13142: LD_EXP 44
13146: AND
13147: IFFALSE 13250
13149: GO 13151
13151: DISABLE
13152: LD_INT 0
13154: PPUSH
// begin for i := 1 to 5 do
13155: LD_ADDR_VAR 0 1
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_INT 5
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13248
// begin uc_nation := nation_nature ;
13171: LD_ADDR_OWVAR 21
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// uc_side := 0 ;
13179: LD_ADDR_OWVAR 20
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13187: LD_ADDR_OWVAR 29
13191: PUSH
13192: LD_INT 12
13194: PUSH
13195: LD_INT 12
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: ST_TO_ADDR
// hc_agressivity := 20 ;
13202: LD_ADDR_OWVAR 35
13206: PUSH
13207: LD_INT 20
13209: ST_TO_ADDR
// hc_class := class_tiger ;
13210: LD_ADDR_OWVAR 28
13214: PUSH
13215: LD_INT 14
13217: ST_TO_ADDR
// hc_gallery :=  ;
13218: LD_ADDR_OWVAR 33
13222: PUSH
13223: LD_STRING 
13225: ST_TO_ADDR
// hc_name :=  ;
13226: LD_ADDR_OWVAR 26
13230: PUSH
13231: LD_STRING 
13233: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13234: CALL_OW 44
13238: PPUSH
13239: LD_INT 0
13241: PPUSH
13242: CALL_OW 51
// end ;
13246: GO 13168
13248: POP
13249: POP
// end ;
13250: PPOPN 1
13252: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13253: LD_EXP 25
13257: PUSH
13258: LD_EXP 45
13262: AND
13263: IFFALSE 13272
13265: GO 13267
13267: DISABLE
// StreamSibBomb ;
13268: CALL 13273 0 0
13272: END
// export function StreamSibBomb ; var i , x , y ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
// result := false ;
13279: LD_ADDR_VAR 0 1
13283: PUSH
13284: LD_INT 0
13286: ST_TO_ADDR
// for i := 1 to 16 do
13287: LD_ADDR_VAR 0 2
13291: PUSH
13292: DOUBLE
13293: LD_INT 1
13295: DEC
13296: ST_TO_ADDR
13297: LD_INT 16
13299: PUSH
13300: FOR_TO
13301: IFFALSE 13500
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13303: LD_ADDR_VAR 0 3
13307: PUSH
13308: LD_INT 10
13310: PUSH
13311: LD_INT 20
13313: PUSH
13314: LD_INT 30
13316: PUSH
13317: LD_INT 40
13319: PUSH
13320: LD_INT 50
13322: PUSH
13323: LD_INT 60
13325: PUSH
13326: LD_INT 70
13328: PUSH
13329: LD_INT 80
13331: PUSH
13332: LD_INT 90
13334: PUSH
13335: LD_INT 100
13337: PUSH
13338: LD_INT 110
13340: PUSH
13341: LD_INT 120
13343: PUSH
13344: LD_INT 130
13346: PUSH
13347: LD_INT 140
13349: PUSH
13350: LD_INT 150
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 1
13372: PPUSH
13373: LD_INT 15
13375: PPUSH
13376: CALL_OW 12
13380: ARRAY
13381: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13382: LD_ADDR_VAR 0 4
13386: PUSH
13387: LD_INT 10
13389: PUSH
13390: LD_INT 20
13392: PUSH
13393: LD_INT 30
13395: PUSH
13396: LD_INT 40
13398: PUSH
13399: LD_INT 50
13401: PUSH
13402: LD_INT 60
13404: PUSH
13405: LD_INT 70
13407: PUSH
13408: LD_INT 80
13410: PUSH
13411: LD_INT 90
13413: PUSH
13414: LD_INT 100
13416: PUSH
13417: LD_INT 110
13419: PUSH
13420: LD_INT 120
13422: PUSH
13423: LD_INT 130
13425: PUSH
13426: LD_INT 140
13428: PUSH
13429: LD_INT 150
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 1
13451: PPUSH
13452: LD_INT 15
13454: PPUSH
13455: CALL_OW 12
13459: ARRAY
13460: ST_TO_ADDR
// if ValidHex ( x , y ) then
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_VAR 0 4
13470: PPUSH
13471: CALL_OW 488
13475: IFFALSE 13498
// begin result := [ x , y ] ;
13477: LD_ADDR_VAR 0 1
13481: PUSH
13482: LD_VAR 0 3
13486: PUSH
13487: LD_VAR 0 4
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: ST_TO_ADDR
// break ;
13496: GO 13500
// end ; end ;
13498: GO 13300
13500: POP
13501: POP
// if result then
13502: LD_VAR 0 1
13506: IFFALSE 13566
// begin ToLua ( playSibBomb() ) ;
13508: LD_STRING playSibBomb()
13510: PPUSH
13511: CALL_OW 559
// wait ( 0 0$14 ) ;
13515: LD_INT 490
13517: PPUSH
13518: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13522: LD_VAR 0 1
13526: PUSH
13527: LD_INT 1
13529: ARRAY
13530: PPUSH
13531: LD_VAR 0 1
13535: PUSH
13536: LD_INT 2
13538: ARRAY
13539: PPUSH
13540: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13544: LD_VAR 0 1
13548: PUSH
13549: LD_INT 1
13551: ARRAY
13552: PPUSH
13553: LD_VAR 0 1
13557: PUSH
13558: LD_INT 2
13560: ARRAY
13561: PPUSH
13562: CALL_OW 429
// end ; end ;
13566: LD_VAR 0 1
13570: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13571: LD_EXP 25
13575: PUSH
13576: LD_EXP 47
13580: AND
13581: IFFALSE 13593
13583: GO 13585
13585: DISABLE
// YouLost (  ) ;
13586: LD_STRING 
13588: PPUSH
13589: CALL_OW 104
13593: END
// every 0 0$1 trigger StreamModeActive and sFog do
13594: LD_EXP 25
13598: PUSH
13599: LD_EXP 46
13603: AND
13604: IFFALSE 13618
13606: GO 13608
13608: DISABLE
// FogOff ( your_side ) ;
13609: LD_OWVAR 2
13613: PPUSH
13614: CALL_OW 344
13618: END
// every 0 0$1 trigger StreamModeActive and sSun do
13619: LD_EXP 25
13623: PUSH
13624: LD_EXP 48
13628: AND
13629: IFFALSE 13657
13631: GO 13633
13633: DISABLE
// begin solar_recharge_percent := 0 ;
13634: LD_ADDR_OWVAR 79
13638: PUSH
13639: LD_INT 0
13641: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13642: LD_INT 10500
13644: PPUSH
13645: CALL_OW 67
// solar_recharge_percent := 100 ;
13649: LD_ADDR_OWVAR 79
13653: PUSH
13654: LD_INT 100
13656: ST_TO_ADDR
// end ;
13657: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13658: LD_EXP 25
13662: PUSH
13663: LD_EXP 49
13667: AND
13668: IFFALSE 13907
13670: GO 13672
13672: DISABLE
13673: LD_INT 0
13675: PPUSH
13676: PPUSH
13677: PPUSH
// begin tmp := [ ] ;
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: EMPTY
13684: ST_TO_ADDR
// for i := 1 to 6 do
13685: LD_ADDR_VAR 0 1
13689: PUSH
13690: DOUBLE
13691: LD_INT 1
13693: DEC
13694: ST_TO_ADDR
13695: LD_INT 6
13697: PUSH
13698: FOR_TO
13699: IFFALSE 13804
// begin uc_nation := nation_nature ;
13701: LD_ADDR_OWVAR 21
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// uc_side := 0 ;
13709: LD_ADDR_OWVAR 20
13713: PUSH
13714: LD_INT 0
13716: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13717: LD_ADDR_OWVAR 29
13721: PUSH
13722: LD_INT 12
13724: PUSH
13725: LD_INT 12
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: ST_TO_ADDR
// hc_agressivity := 20 ;
13732: LD_ADDR_OWVAR 35
13736: PUSH
13737: LD_INT 20
13739: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13740: LD_ADDR_OWVAR 28
13744: PUSH
13745: LD_INT 17
13747: ST_TO_ADDR
// hc_gallery :=  ;
13748: LD_ADDR_OWVAR 33
13752: PUSH
13753: LD_STRING 
13755: ST_TO_ADDR
// hc_name :=  ;
13756: LD_ADDR_OWVAR 26
13760: PUSH
13761: LD_STRING 
13763: ST_TO_ADDR
// un := CreateHuman ;
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: CALL_OW 44
13773: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13774: LD_VAR 0 2
13778: PPUSH
13779: LD_INT 1
13781: PPUSH
13782: CALL_OW 51
// tmp := tmp ^ un ;
13786: LD_ADDR_VAR 0 3
13790: PUSH
13791: LD_VAR 0 3
13795: PUSH
13796: LD_VAR 0 2
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13698
13804: POP
13805: POP
// repeat wait ( 0 0$1 ) ;
13806: LD_INT 35
13808: PPUSH
13809: CALL_OW 67
// for un in tmp do
13813: LD_ADDR_VAR 0 2
13817: PUSH
13818: LD_VAR 0 3
13822: PUSH
13823: FOR_IN
13824: IFFALSE 13898
// begin if IsDead ( un ) then
13826: LD_VAR 0 2
13830: PPUSH
13831: CALL_OW 301
13835: IFFALSE 13855
// begin tmp := tmp diff un ;
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_VAR 0 3
13846: PUSH
13847: LD_VAR 0 2
13851: DIFF
13852: ST_TO_ADDR
// continue ;
13853: GO 13823
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13855: LD_VAR 0 2
13859: PPUSH
13860: LD_INT 3
13862: PUSH
13863: LD_INT 22
13865: PUSH
13866: LD_INT 0
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: PPUSH
13882: LD_VAR 0 2
13886: PPUSH
13887: CALL_OW 74
13891: PPUSH
13892: CALL_OW 115
// end ;
13896: GO 13823
13898: POP
13899: POP
// until not tmp ;
13900: LD_VAR 0 3
13904: NOT
13905: IFFALSE 13806
// end ;
13907: PPOPN 3
13909: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13910: LD_EXP 25
13914: PUSH
13915: LD_EXP 50
13919: AND
13920: IFFALSE 13974
13922: GO 13924
13924: DISABLE
// begin ToLua ( displayTroll(); ) ;
13925: LD_STRING displayTroll();
13927: PPUSH
13928: CALL_OW 559
// wait ( 3 3$00 ) ;
13932: LD_INT 6300
13934: PPUSH
13935: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13939: LD_STRING hideTroll();
13941: PPUSH
13942: CALL_OW 559
// wait ( 1 1$00 ) ;
13946: LD_INT 2100
13948: PPUSH
13949: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13953: LD_STRING displayTroll();
13955: PPUSH
13956: CALL_OW 559
// wait ( 1 1$00 ) ;
13960: LD_INT 2100
13962: PPUSH
13963: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13967: LD_STRING hideTroll();
13969: PPUSH
13970: CALL_OW 559
// end ;
13974: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13975: LD_EXP 25
13979: PUSH
13980: LD_EXP 51
13984: AND
13985: IFFALSE 14048
13987: GO 13989
13989: DISABLE
13990: LD_INT 0
13992: PPUSH
// begin p := 0 ;
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// repeat game_speed := 1 ;
14001: LD_ADDR_OWVAR 65
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14009: LD_INT 35
14011: PPUSH
14012: CALL_OW 67
// p := p + 1 ;
14016: LD_ADDR_VAR 0 1
14020: PUSH
14021: LD_VAR 0 1
14025: PUSH
14026: LD_INT 1
14028: PLUS
14029: ST_TO_ADDR
// until p >= 60 ;
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 60
14037: GREATEREQUAL
14038: IFFALSE 14001
// game_speed := 4 ;
14040: LD_ADDR_OWVAR 65
14044: PUSH
14045: LD_INT 4
14047: ST_TO_ADDR
// end ;
14048: PPOPN 1
14050: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14051: LD_EXP 25
14055: PUSH
14056: LD_EXP 52
14060: AND
14061: IFFALSE 14207
14063: GO 14065
14065: DISABLE
14066: LD_INT 0
14068: PPUSH
14069: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14070: LD_ADDR_VAR 0 1
14074: PUSH
14075: LD_INT 22
14077: PUSH
14078: LD_OWVAR 2
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: LD_INT 30
14092: PUSH
14093: LD_INT 0
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 30
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: ST_TO_ADDR
// if not depot then
14124: LD_VAR 0 1
14128: NOT
14129: IFFALSE 14133
// exit ;
14131: GO 14207
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14133: LD_ADDR_VAR 0 2
14137: PUSH
14138: LD_VAR 0 1
14142: PUSH
14143: LD_INT 1
14145: PPUSH
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 12
14155: ARRAY
14156: PPUSH
14157: CALL_OW 274
14161: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14162: LD_VAR 0 2
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: LD_INT 0
14172: PPUSH
14173: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14177: LD_VAR 0 2
14181: PPUSH
14182: LD_INT 2
14184: PPUSH
14185: LD_INT 0
14187: PPUSH
14188: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14192: LD_VAR 0 2
14196: PPUSH
14197: LD_INT 3
14199: PPUSH
14200: LD_INT 0
14202: PPUSH
14203: CALL_OW 277
// end ;
14207: PPOPN 2
14209: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14210: LD_EXP 25
14214: PUSH
14215: LD_EXP 53
14219: AND
14220: IFFALSE 14317
14222: GO 14224
14224: DISABLE
14225: LD_INT 0
14227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14228: LD_ADDR_VAR 0 1
14232: PUSH
14233: LD_INT 22
14235: PUSH
14236: LD_OWVAR 2
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 21
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 3
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// if not tmp then
14282: LD_VAR 0 1
14286: NOT
14287: IFFALSE 14291
// exit ;
14289: GO 14317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14291: LD_VAR 0 1
14295: PUSH
14296: LD_INT 1
14298: PPUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 12
14308: ARRAY
14309: PPUSH
14310: LD_INT 200
14312: PPUSH
14313: CALL_OW 234
// end ;
14317: PPOPN 1
14319: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14320: LD_EXP 25
14324: PUSH
14325: LD_EXP 54
14329: AND
14330: IFFALSE 14409
14332: GO 14334
14334: DISABLE
14335: LD_INT 0
14337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: LD_INT 22
14345: PUSH
14346: LD_OWVAR 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: ST_TO_ADDR
// if not tmp then
14374: LD_VAR 0 1
14378: NOT
14379: IFFALSE 14383
// exit ;
14381: GO 14409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14383: LD_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: PPUSH
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL_OW 12
14400: ARRAY
14401: PPUSH
14402: LD_INT 60
14404: PPUSH
14405: CALL_OW 234
// end ;
14409: PPOPN 1
14411: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14412: LD_EXP 25
14416: PUSH
14417: LD_EXP 55
14421: AND
14422: IFFALSE 14521
14424: GO 14426
14426: DISABLE
14427: LD_INT 0
14429: PPUSH
14430: PPUSH
// begin enable ;
14431: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14432: LD_ADDR_VAR 0 1
14436: PUSH
14437: LD_INT 22
14439: PUSH
14440: LD_OWVAR 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 61
14451: PUSH
14452: EMPTY
14453: LIST
14454: PUSH
14455: LD_INT 33
14457: PUSH
14458: LD_INT 2
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: PPUSH
14470: CALL_OW 69
14474: ST_TO_ADDR
// if not tmp then
14475: LD_VAR 0 1
14479: NOT
14480: IFFALSE 14484
// exit ;
14482: GO 14521
// for i in tmp do
14484: LD_ADDR_VAR 0 2
14488: PUSH
14489: LD_VAR 0 1
14493: PUSH
14494: FOR_IN
14495: IFFALSE 14519
// if IsControledBy ( i ) then
14497: LD_VAR 0 2
14501: PPUSH
14502: CALL_OW 312
14506: IFFALSE 14517
// ComUnlink ( i ) ;
14508: LD_VAR 0 2
14512: PPUSH
14513: CALL_OW 136
14517: GO 14494
14519: POP
14520: POP
// end ;
14521: PPOPN 2
14523: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14524: LD_EXP 25
14528: PUSH
14529: LD_EXP 56
14533: AND
14534: IFFALSE 14674
14536: GO 14538
14538: DISABLE
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
// begin ToLua ( displayPowell(); ) ;
14543: LD_STRING displayPowell();
14545: PPUSH
14546: CALL_OW 559
// uc_side := 0 ;
14550: LD_ADDR_OWVAR 20
14554: PUSH
14555: LD_INT 0
14557: ST_TO_ADDR
// uc_nation := 2 ;
14558: LD_ADDR_OWVAR 21
14562: PUSH
14563: LD_INT 2
14565: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14566: LD_ADDR_OWVAR 37
14570: PUSH
14571: LD_INT 14
14573: ST_TO_ADDR
// vc_engine := engine_siberite ;
14574: LD_ADDR_OWVAR 39
14578: PUSH
14579: LD_INT 3
14581: ST_TO_ADDR
// vc_control := control_apeman ;
14582: LD_ADDR_OWVAR 38
14586: PUSH
14587: LD_INT 5
14589: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14590: LD_ADDR_OWVAR 40
14594: PUSH
14595: LD_INT 29
14597: ST_TO_ADDR
// un := CreateVehicle ;
14598: LD_ADDR_VAR 0 2
14602: PUSH
14603: CALL_OW 45
14607: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14608: LD_VAR 0 2
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14620: LD_INT 35
14622: PPUSH
14623: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_INT 22
14634: PUSH
14635: LD_OWVAR 2
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: PPUSH
14649: LD_VAR 0 2
14653: PPUSH
14654: CALL_OW 74
14658: PPUSH
14659: CALL_OW 115
// until IsDead ( un ) ;
14663: LD_VAR 0 2
14667: PPUSH
14668: CALL_OW 301
14672: IFFALSE 14620
// end ;
14674: PPOPN 2
14676: END
// every 0 0$1 trigger StreamModeActive and sStu do
14677: LD_EXP 25
14681: PUSH
14682: LD_EXP 64
14686: AND
14687: IFFALSE 14703
14689: GO 14691
14691: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14692: LD_STRING displayStucuk();
14694: PPUSH
14695: CALL_OW 559
// ResetFog ;
14699: CALL_OW 335
// end ;
14703: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14704: LD_EXP 25
14708: PUSH
14709: LD_EXP 57
14713: AND
14714: IFFALSE 14855
14716: GO 14718
14718: DISABLE
14719: LD_INT 0
14721: PPUSH
14722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_OWVAR 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: ST_TO_ADDR
// if not tmp then
14759: LD_VAR 0 2
14763: NOT
14764: IFFALSE 14768
// exit ;
14766: GO 14855
// un := tmp [ rand ( 1 , tmp ) ] ;
14768: LD_ADDR_VAR 0 1
14772: PUSH
14773: LD_VAR 0 2
14777: PUSH
14778: LD_INT 1
14780: PPUSH
14781: LD_VAR 0 2
14785: PPUSH
14786: CALL_OW 12
14790: ARRAY
14791: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14792: LD_VAR 0 1
14796: PPUSH
14797: LD_INT 0
14799: PPUSH
14800: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14804: LD_VAR 0 1
14808: PPUSH
14809: LD_OWVAR 3
14813: PUSH
14814: LD_VAR 0 1
14818: DIFF
14819: PPUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 74
14829: PPUSH
14830: CALL_OW 115
// wait ( 0 0$20 ) ;
14834: LD_INT 700
14836: PPUSH
14837: CALL_OW 67
// SetSide ( un , your_side ) ;
14841: LD_VAR 0 1
14845: PPUSH
14846: LD_OWVAR 2
14850: PPUSH
14851: CALL_OW 235
// end ;
14855: PPOPN 2
14857: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14858: LD_EXP 25
14862: PUSH
14863: LD_EXP 58
14867: AND
14868: IFFALSE 14974
14870: GO 14872
14872: DISABLE
14873: LD_INT 0
14875: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: LD_INT 22
14883: PUSH
14884: LD_OWVAR 2
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 2
14895: PUSH
14896: LD_INT 30
14898: PUSH
14899: LD_INT 0
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 30
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: ST_TO_ADDR
// if not depot then
14930: LD_VAR 0 1
14934: NOT
14935: IFFALSE 14939
// exit ;
14937: GO 14974
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14939: LD_VAR 0 1
14943: PUSH
14944: LD_INT 1
14946: ARRAY
14947: PPUSH
14948: CALL_OW 250
14952: PPUSH
14953: LD_VAR 0 1
14957: PUSH
14958: LD_INT 1
14960: ARRAY
14961: PPUSH
14962: CALL_OW 251
14966: PPUSH
14967: LD_INT 70
14969: PPUSH
14970: CALL_OW 495
// end ;
14974: PPOPN 1
14976: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14977: LD_EXP 25
14981: PUSH
14982: LD_EXP 59
14986: AND
14987: IFFALSE 15198
14989: GO 14991
14991: DISABLE
14992: LD_INT 0
14994: PPUSH
14995: PPUSH
14996: PPUSH
14997: PPUSH
14998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14999: LD_ADDR_VAR 0 5
15003: PUSH
15004: LD_INT 22
15006: PUSH
15007: LD_OWVAR 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 21
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PPUSH
15030: CALL_OW 69
15034: ST_TO_ADDR
// if not tmp then
15035: LD_VAR 0 5
15039: NOT
15040: IFFALSE 15044
// exit ;
15042: GO 15198
// for i in tmp do
15044: LD_ADDR_VAR 0 1
15048: PUSH
15049: LD_VAR 0 5
15053: PUSH
15054: FOR_IN
15055: IFFALSE 15196
// begin d := rand ( 0 , 5 ) ;
15057: LD_ADDR_VAR 0 4
15061: PUSH
15062: LD_INT 0
15064: PPUSH
15065: LD_INT 5
15067: PPUSH
15068: CALL_OW 12
15072: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15073: LD_ADDR_VAR 0 2
15077: PUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 250
15087: PPUSH
15088: LD_VAR 0 4
15092: PPUSH
15093: LD_INT 3
15095: PPUSH
15096: LD_INT 12
15098: PPUSH
15099: CALL_OW 12
15103: PPUSH
15104: CALL_OW 272
15108: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 251
15123: PPUSH
15124: LD_VAR 0 4
15128: PPUSH
15129: LD_INT 3
15131: PPUSH
15132: LD_INT 12
15134: PPUSH
15135: CALL_OW 12
15139: PPUSH
15140: CALL_OW 273
15144: ST_TO_ADDR
// if ValidHex ( x , y ) then
15145: LD_VAR 0 2
15149: PPUSH
15150: LD_VAR 0 3
15154: PPUSH
15155: CALL_OW 488
15159: IFFALSE 15194
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_VAR 0 2
15170: PPUSH
15171: LD_VAR 0 3
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 6
15181: PPUSH
15182: CALL_OW 12
15186: PPUSH
15187: LD_INT 1
15189: PPUSH
15190: CALL_OW 483
// end ;
15194: GO 15054
15196: POP
15197: POP
// end ;
15198: PPOPN 5
15200: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15201: LD_EXP 25
15205: PUSH
15206: LD_EXP 60
15210: AND
15211: IFFALSE 15305
15213: GO 15215
15215: DISABLE
15216: LD_INT 0
15218: PPUSH
15219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15220: LD_ADDR_VAR 0 2
15224: PUSH
15225: LD_INT 22
15227: PUSH
15228: LD_OWVAR 2
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 32
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 21
15249: PUSH
15250: LD_INT 2
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: ST_TO_ADDR
// if not tmp then
15267: LD_VAR 0 2
15271: NOT
15272: IFFALSE 15276
// exit ;
15274: GO 15305
// for i in tmp do
15276: LD_ADDR_VAR 0 1
15280: PUSH
15281: LD_VAR 0 2
15285: PUSH
15286: FOR_IN
15287: IFFALSE 15303
// SetFuel ( i , 0 ) ;
15289: LD_VAR 0 1
15293: PPUSH
15294: LD_INT 0
15296: PPUSH
15297: CALL_OW 240
15301: GO 15286
15303: POP
15304: POP
// end ;
15305: PPOPN 2
15307: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15308: LD_EXP 25
15312: PUSH
15313: LD_EXP 61
15317: AND
15318: IFFALSE 15384
15320: GO 15322
15322: DISABLE
15323: LD_INT 0
15325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15326: LD_ADDR_VAR 0 1
15330: PUSH
15331: LD_INT 22
15333: PUSH
15334: LD_OWVAR 2
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 30
15345: PUSH
15346: LD_INT 29
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PPUSH
15357: CALL_OW 69
15361: ST_TO_ADDR
// if not tmp then
15362: LD_VAR 0 1
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 15384
// DestroyUnit ( tmp [ 1 ] ) ;
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 1
15378: ARRAY
15379: PPUSH
15380: CALL_OW 65
// end ;
15384: PPOPN 1
15386: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15387: LD_EXP 25
15391: PUSH
15392: LD_EXP 63
15396: AND
15397: IFFALSE 15526
15399: GO 15401
15401: DISABLE
15402: LD_INT 0
15404: PPUSH
// begin uc_side := 0 ;
15405: LD_ADDR_OWVAR 20
15409: PUSH
15410: LD_INT 0
15412: ST_TO_ADDR
// uc_nation := nation_arabian ;
15413: LD_ADDR_OWVAR 21
15417: PUSH
15418: LD_INT 2
15420: ST_TO_ADDR
// hc_gallery :=  ;
15421: LD_ADDR_OWVAR 33
15425: PUSH
15426: LD_STRING 
15428: ST_TO_ADDR
// hc_name :=  ;
15429: LD_ADDR_OWVAR 26
15433: PUSH
15434: LD_STRING 
15436: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 11
15442: PPUSH
15443: LD_INT 10
15445: PPUSH
15446: CALL_OW 380
// un := CreateHuman ;
15450: LD_ADDR_VAR 0 1
15454: PUSH
15455: CALL_OW 44
15459: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 1
15467: PPUSH
15468: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15472: LD_INT 35
15474: PPUSH
15475: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15479: LD_VAR 0 1
15483: PPUSH
15484: LD_INT 22
15486: PUSH
15487: LD_OWVAR 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 69
15500: PPUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: CALL_OW 74
15510: PPUSH
15511: CALL_OW 115
// until IsDead ( un ) ;
15515: LD_VAR 0 1
15519: PPUSH
15520: CALL_OW 301
15524: IFFALSE 15472
// end ;
15526: PPOPN 1
15528: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15529: LD_EXP 25
15533: PUSH
15534: LD_EXP 65
15538: AND
15539: IFFALSE 15551
15541: GO 15543
15543: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15544: LD_STRING earthquake(getX(game), 0, 32)
15546: PPUSH
15547: CALL_OW 559
15551: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15552: LD_EXP 25
15556: PUSH
15557: LD_EXP 66
15561: AND
15562: IFFALSE 15653
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
// begin enable ;
15570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15571: LD_ADDR_VAR 0 1
15575: PUSH
15576: LD_INT 22
15578: PUSH
15579: LD_OWVAR 2
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 33
15600: PUSH
15601: LD_INT 3
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: ST_TO_ADDR
// if not tmp then
15618: LD_VAR 0 1
15622: NOT
15623: IFFALSE 15627
// exit ;
15625: GO 15653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15627: LD_VAR 0 1
15631: PUSH
15632: LD_INT 1
15634: PPUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 12
15644: ARRAY
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 234
// end ;
15653: PPOPN 1
15655: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15656: LD_EXP 25
15660: PUSH
15661: LD_EXP 67
15665: AND
15666: IFFALSE 15807
15668: GO 15670
15670: DISABLE
15671: LD_INT 0
15673: PPUSH
15674: PPUSH
15675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15676: LD_ADDR_VAR 0 3
15680: PUSH
15681: LD_INT 22
15683: PUSH
15684: LD_OWVAR 2
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 25
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 69
15711: ST_TO_ADDR
// if not tmp then
15712: LD_VAR 0 3
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15807
// un := tmp [ rand ( 1 , tmp ) ] ;
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_VAR 0 3
15730: PUSH
15731: LD_INT 1
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: CALL_OW 12
15743: ARRAY
15744: ST_TO_ADDR
// if Crawls ( un ) then
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 318
15754: IFFALSE 15765
// ComWalk ( un ) ;
15756: LD_VAR 0 2
15760: PPUSH
15761: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15765: LD_VAR 0 2
15769: PPUSH
15770: LD_INT 9
15772: PPUSH
15773: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15777: LD_INT 28
15779: PPUSH
15780: LD_OWVAR 2
15784: PPUSH
15785: LD_INT 2
15787: PPUSH
15788: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15792: LD_INT 29
15794: PPUSH
15795: LD_OWVAR 2
15799: PPUSH
15800: LD_INT 2
15802: PPUSH
15803: CALL_OW 322
// end ;
15807: PPOPN 3
15809: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15810: LD_EXP 25
15814: PUSH
15815: LD_EXP 68
15819: AND
15820: IFFALSE 15931
15822: GO 15824
15824: DISABLE
15825: LD_INT 0
15827: PPUSH
15828: PPUSH
15829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15830: LD_ADDR_VAR 0 3
15834: PUSH
15835: LD_INT 22
15837: PUSH
15838: LD_OWVAR 2
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 25
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: ST_TO_ADDR
// if not tmp then
15866: LD_VAR 0 3
15870: NOT
15871: IFFALSE 15875
// exit ;
15873: GO 15931
// un := tmp [ rand ( 1 , tmp ) ] ;
15875: LD_ADDR_VAR 0 2
15879: PUSH
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 1
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: CALL_OW 12
15897: ARRAY
15898: ST_TO_ADDR
// if Crawls ( un ) then
15899: LD_VAR 0 2
15903: PPUSH
15904: CALL_OW 318
15908: IFFALSE 15919
// ComWalk ( un ) ;
15910: LD_VAR 0 2
15914: PPUSH
15915: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15919: LD_VAR 0 2
15923: PPUSH
15924: LD_INT 8
15926: PPUSH
15927: CALL_OW 336
// end ;
15931: PPOPN 3
15933: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15934: LD_EXP 25
15938: PUSH
15939: LD_EXP 69
15943: AND
15944: IFFALSE 16088
15946: GO 15948
15948: DISABLE
15949: LD_INT 0
15951: PPUSH
15952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15953: LD_ADDR_VAR 0 2
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_OWVAR 2
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 2
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: LD_INT 34
15985: PUSH
15986: LD_INT 12
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 34
15995: PUSH
15996: LD_INT 51
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 34
16005: PUSH
16006: LD_INT 32
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: PPUSH
16024: CALL_OW 69
16028: ST_TO_ADDR
// if not tmp then
16029: LD_VAR 0 2
16033: NOT
16034: IFFALSE 16038
// exit ;
16036: GO 16088
// for i in tmp do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: LD_VAR 0 2
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16086
// if GetCargo ( i , mat_artifact ) = 0 then
16051: LD_VAR 0 1
16055: PPUSH
16056: LD_INT 4
16058: PPUSH
16059: CALL_OW 289
16063: PUSH
16064: LD_INT 0
16066: EQUAL
16067: IFFALSE 16084
// SetCargo ( i , mat_siberit , 100 ) ;
16069: LD_VAR 0 1
16073: PPUSH
16074: LD_INT 3
16076: PPUSH
16077: LD_INT 100
16079: PPUSH
16080: CALL_OW 290
16084: GO 16048
16086: POP
16087: POP
// end ;
16088: PPOPN 2
16090: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16091: LD_EXP 25
16095: PUSH
16096: LD_EXP 70
16100: AND
16101: IFFALSE 16284
16103: GO 16105
16105: DISABLE
16106: LD_INT 0
16108: PPUSH
16109: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16110: LD_ADDR_VAR 0 2
16114: PUSH
16115: LD_INT 22
16117: PUSH
16118: LD_OWVAR 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 69
16131: ST_TO_ADDR
// if not tmp then
16132: LD_VAR 0 2
16136: NOT
16137: IFFALSE 16141
// exit ;
16139: GO 16284
// for i := 1 to 2 do
16141: LD_ADDR_VAR 0 1
16145: PUSH
16146: DOUBLE
16147: LD_INT 1
16149: DEC
16150: ST_TO_ADDR
16151: LD_INT 2
16153: PUSH
16154: FOR_TO
16155: IFFALSE 16282
// begin uc_side := your_side ;
16157: LD_ADDR_OWVAR 20
16161: PUSH
16162: LD_OWVAR 2
16166: ST_TO_ADDR
// uc_nation := nation_american ;
16167: LD_ADDR_OWVAR 21
16171: PUSH
16172: LD_INT 1
16174: ST_TO_ADDR
// vc_chassis := us_morphling ;
16175: LD_ADDR_OWVAR 37
16179: PUSH
16180: LD_INT 5
16182: ST_TO_ADDR
// vc_engine := engine_siberite ;
16183: LD_ADDR_OWVAR 39
16187: PUSH
16188: LD_INT 3
16190: ST_TO_ADDR
// vc_control := control_computer ;
16191: LD_ADDR_OWVAR 38
16195: PUSH
16196: LD_INT 3
16198: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16199: LD_ADDR_OWVAR 40
16203: PUSH
16204: LD_INT 10
16206: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16207: LD_VAR 0 2
16211: PUSH
16212: LD_INT 1
16214: ARRAY
16215: PPUSH
16216: CALL_OW 310
16220: NOT
16221: IFFALSE 16268
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16223: CALL_OW 45
16227: PPUSH
16228: LD_VAR 0 2
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: PPUSH
16237: CALL_OW 250
16241: PPUSH
16242: LD_VAR 0 2
16246: PUSH
16247: LD_INT 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 251
16255: PPUSH
16256: LD_INT 12
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 50
16266: GO 16280
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16268: CALL_OW 45
16272: PPUSH
16273: LD_INT 1
16275: PPUSH
16276: CALL_OW 51
// end ;
16280: GO 16154
16282: POP
16283: POP
// end ;
16284: PPOPN 2
16286: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16287: LD_EXP 25
16291: PUSH
16292: LD_EXP 71
16296: AND
16297: IFFALSE 16519
16299: GO 16301
16301: DISABLE
16302: LD_INT 0
16304: PPUSH
16305: PPUSH
16306: PPUSH
16307: PPUSH
16308: PPUSH
16309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16310: LD_ADDR_VAR 0 6
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_OWVAR 2
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 21
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 3
16339: PUSH
16340: LD_INT 23
16342: PUSH
16343: LD_INT 0
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: PPUSH
16359: CALL_OW 69
16363: ST_TO_ADDR
// if not tmp then
16364: LD_VAR 0 6
16368: NOT
16369: IFFALSE 16373
// exit ;
16371: GO 16519
// s1 := rand ( 1 , 4 ) ;
16373: LD_ADDR_VAR 0 2
16377: PUSH
16378: LD_INT 1
16380: PPUSH
16381: LD_INT 4
16383: PPUSH
16384: CALL_OW 12
16388: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16389: LD_ADDR_VAR 0 4
16393: PUSH
16394: LD_VAR 0 6
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: PPUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 259
16412: ST_TO_ADDR
// if s1 = 1 then
16413: LD_VAR 0 2
16417: PUSH
16418: LD_INT 1
16420: EQUAL
16421: IFFALSE 16441
// s2 := rand ( 2 , 4 ) else
16423: LD_ADDR_VAR 0 3
16427: PUSH
16428: LD_INT 2
16430: PPUSH
16431: LD_INT 4
16433: PPUSH
16434: CALL_OW 12
16438: ST_TO_ADDR
16439: GO 16449
// s2 := 1 ;
16441: LD_ADDR_VAR 0 3
16445: PUSH
16446: LD_INT 1
16448: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16449: LD_ADDR_VAR 0 5
16453: PUSH
16454: LD_VAR 0 6
16458: PUSH
16459: LD_INT 1
16461: ARRAY
16462: PPUSH
16463: LD_VAR 0 3
16467: PPUSH
16468: CALL_OW 259
16472: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16473: LD_VAR 0 6
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PPUSH
16482: LD_VAR 0 2
16486: PPUSH
16487: LD_VAR 0 5
16491: PPUSH
16492: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16496: LD_VAR 0 6
16500: PUSH
16501: LD_INT 1
16503: ARRAY
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_VAR 0 4
16514: PPUSH
16515: CALL_OW 237
// end ;
16519: PPOPN 6
16521: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16522: LD_EXP 25
16526: PUSH
16527: LD_EXP 72
16531: AND
16532: IFFALSE 16611
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 30
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// if not tmp then
16576: LD_VAR 0 1
16580: NOT
16581: IFFALSE 16585
// exit ;
16583: GO 16611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16585: LD_VAR 0 1
16589: PUSH
16590: LD_INT 1
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 12
16602: ARRAY
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: CALL_OW 234
// end ;
16611: PPOPN 1
16613: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16614: LD_EXP 25
16618: PUSH
16619: LD_EXP 73
16623: AND
16624: IFFALSE 16736
16626: GO 16628
16628: DISABLE
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16633: LD_ADDR_VAR 0 2
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_OWVAR 2
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 27
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 30
16665: PUSH
16666: LD_INT 26
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 30
16675: PUSH
16676: LD_INT 28
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// if not tmp then
16698: LD_VAR 0 2
16702: NOT
16703: IFFALSE 16707
// exit ;
16705: GO 16736
// for i in tmp do
16707: LD_ADDR_VAR 0 1
16711: PUSH
16712: LD_VAR 0 2
16716: PUSH
16717: FOR_IN
16718: IFFALSE 16734
// SetLives ( i , 1 ) ;
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 1
16727: PPUSH
16728: CALL_OW 234
16732: GO 16717
16734: POP
16735: POP
// end ;
16736: PPOPN 2
16738: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16739: LD_EXP 25
16743: PUSH
16744: LD_EXP 74
16748: AND
16749: IFFALSE 17036
16751: GO 16753
16753: DISABLE
16754: LD_INT 0
16756: PPUSH
16757: PPUSH
16758: PPUSH
// begin i := rand ( 1 , 7 ) ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_INT 1
16766: PPUSH
16767: LD_INT 7
16769: PPUSH
16770: CALL_OW 12
16774: ST_TO_ADDR
// case i of 1 :
16775: LD_VAR 0 1
16779: PUSH
16780: LD_INT 1
16782: DOUBLE
16783: EQUAL
16784: IFTRUE 16788
16786: GO 16798
16788: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16789: LD_STRING earthquake(getX(game), 0, 32)
16791: PPUSH
16792: CALL_OW 559
16796: GO 17036
16798: LD_INT 2
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16820
16806: POP
// begin ToLua ( displayStucuk(); ) ;
16807: LD_STRING displayStucuk();
16809: PPUSH
16810: CALL_OW 559
// ResetFog ;
16814: CALL_OW 335
// end ; 3 :
16818: GO 17036
16820: LD_INT 3
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16932
16828: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 25
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: ST_TO_ADDR
// if not tmp then
16865: LD_VAR 0 2
16869: NOT
16870: IFFALSE 16874
// exit ;
16872: GO 17036
// un := tmp [ rand ( 1 , tmp ) ] ;
16874: LD_ADDR_VAR 0 3
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_VAR 0 2
16891: PPUSH
16892: CALL_OW 12
16896: ARRAY
16897: ST_TO_ADDR
// if Crawls ( un ) then
16898: LD_VAR 0 3
16902: PPUSH
16903: CALL_OW 318
16907: IFFALSE 16918
// ComWalk ( un ) ;
16909: LD_VAR 0 3
16913: PPUSH
16914: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_INT 8
16925: PPUSH
16926: CALL_OW 336
// end ; 4 :
16930: GO 17036
16932: LD_INT 4
16934: DOUBLE
16935: EQUAL
16936: IFTRUE 16940
16938: GO 17014
16940: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16941: LD_ADDR_VAR 0 2
16945: PUSH
16946: LD_INT 22
16948: PUSH
16949: LD_OWVAR 2
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 30
16960: PUSH
16961: LD_INT 29
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PPUSH
16972: CALL_OW 69
16976: ST_TO_ADDR
// if not tmp then
16977: LD_VAR 0 2
16981: NOT
16982: IFFALSE 16986
// exit ;
16984: GO 17036
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16986: LD_VAR 0 2
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PPUSH
16995: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16999: LD_VAR 0 2
17003: PUSH
17004: LD_INT 1
17006: ARRAY
17007: PPUSH
17008: CALL_OW 65
// end ; 5 .. 7 :
17012: GO 17036
17014: LD_INT 5
17016: DOUBLE
17017: GREATEREQUAL
17018: IFFALSE 17026
17020: LD_INT 7
17022: DOUBLE
17023: LESSEQUAL
17024: IFTRUE 17028
17026: GO 17035
17028: POP
// StreamSibBomb ; end ;
17029: CALL 13273 0 0
17033: GO 17036
17035: POP
// end ;
17036: PPOPN 3
17038: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17039: LD_EXP 25
17043: PUSH
17044: LD_EXP 75
17048: AND
17049: IFFALSE 17205
17051: GO 17053
17053: DISABLE
17054: LD_INT 0
17056: PPUSH
17057: PPUSH
17058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17059: LD_ADDR_VAR 0 2
17063: PUSH
17064: LD_INT 81
17066: PUSH
17067: LD_OWVAR 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 21
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 21
17091: PUSH
17092: LD_INT 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 69
17112: ST_TO_ADDR
// if not tmp then
17113: LD_VAR 0 2
17117: NOT
17118: IFFALSE 17122
// exit ;
17120: GO 17205
// p := 0 ;
17122: LD_ADDR_VAR 0 3
17126: PUSH
17127: LD_INT 0
17129: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17130: LD_INT 35
17132: PPUSH
17133: CALL_OW 67
// p := p + 1 ;
17137: LD_ADDR_VAR 0 3
17141: PUSH
17142: LD_VAR 0 3
17146: PUSH
17147: LD_INT 1
17149: PLUS
17150: ST_TO_ADDR
// for i in tmp do
17151: LD_ADDR_VAR 0 1
17155: PUSH
17156: LD_VAR 0 2
17160: PUSH
17161: FOR_IN
17162: IFFALSE 17193
// if GetLives ( i ) < 1000 then
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 256
17173: PUSH
17174: LD_INT 1000
17176: LESS
17177: IFFALSE 17191
// SetLives ( i , 1000 ) ;
17179: LD_VAR 0 1
17183: PPUSH
17184: LD_INT 1000
17186: PPUSH
17187: CALL_OW 234
17191: GO 17161
17193: POP
17194: POP
// until p > 20 ;
17195: LD_VAR 0 3
17199: PUSH
17200: LD_INT 20
17202: GREATER
17203: IFFALSE 17130
// end ;
17205: PPOPN 3
17207: END
// every 0 0$1 trigger StreamModeActive and sTime do
17208: LD_EXP 25
17212: PUSH
17213: LD_EXP 76
17217: AND
17218: IFFALSE 17253
17220: GO 17222
17222: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17223: LD_INT 28
17225: PPUSH
17226: LD_OWVAR 2
17230: PPUSH
17231: LD_INT 2
17233: PPUSH
17234: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17238: LD_INT 30
17240: PPUSH
17241: LD_OWVAR 2
17245: PPUSH
17246: LD_INT 2
17248: PPUSH
17249: CALL_OW 322
// end ;
17253: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17254: LD_EXP 25
17258: PUSH
17259: LD_EXP 77
17263: AND
17264: IFFALSE 17385
17266: GO 17268
17268: DISABLE
17269: LD_INT 0
17271: PPUSH
17272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_INT 22
17280: PUSH
17281: LD_OWVAR 2
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 21
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: LD_INT 23
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: LIST
17321: PPUSH
17322: CALL_OW 69
17326: ST_TO_ADDR
// if not tmp then
17327: LD_VAR 0 2
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17385
// for i in tmp do
17336: LD_ADDR_VAR 0 1
17340: PUSH
17341: LD_VAR 0 2
17345: PUSH
17346: FOR_IN
17347: IFFALSE 17383
// begin if Crawls ( i ) then
17349: LD_VAR 0 1
17353: PPUSH
17354: CALL_OW 318
17358: IFFALSE 17369
// ComWalk ( i ) ;
17360: LD_VAR 0 1
17364: PPUSH
17365: CALL_OW 138
// SetClass ( i , 2 ) ;
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_INT 2
17376: PPUSH
17377: CALL_OW 336
// end ;
17381: GO 17346
17383: POP
17384: POP
// end ;
17385: PPOPN 2
17387: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17388: LD_EXP 25
17392: PUSH
17393: LD_EXP 78
17397: AND
17398: IFFALSE 17686
17400: GO 17402
17402: DISABLE
17403: LD_INT 0
17405: PPUSH
17406: PPUSH
17407: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17408: LD_OWVAR 2
17412: PPUSH
17413: LD_INT 9
17415: PPUSH
17416: LD_INT 1
17418: PPUSH
17419: LD_INT 1
17421: PPUSH
17422: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17426: LD_INT 9
17428: PPUSH
17429: LD_OWVAR 2
17433: PPUSH
17434: CALL_OW 343
// uc_side := 9 ;
17438: LD_ADDR_OWVAR 20
17442: PUSH
17443: LD_INT 9
17445: ST_TO_ADDR
// uc_nation := 2 ;
17446: LD_ADDR_OWVAR 21
17450: PUSH
17451: LD_INT 2
17453: ST_TO_ADDR
// hc_name := Dark Warrior ;
17454: LD_ADDR_OWVAR 26
17458: PUSH
17459: LD_STRING Dark Warrior
17461: ST_TO_ADDR
// hc_gallery :=  ;
17462: LD_ADDR_OWVAR 33
17466: PUSH
17467: LD_STRING 
17469: ST_TO_ADDR
// hc_noskilllimit := true ;
17470: LD_ADDR_OWVAR 76
17474: PUSH
17475: LD_INT 1
17477: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17478: LD_ADDR_OWVAR 31
17482: PUSH
17483: LD_INT 30
17485: PUSH
17486: LD_INT 30
17488: PUSH
17489: LD_INT 30
17491: PUSH
17492: LD_INT 30
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: ST_TO_ADDR
// un := CreateHuman ;
17501: LD_ADDR_VAR 0 3
17505: PUSH
17506: CALL_OW 44
17510: ST_TO_ADDR
// hc_noskilllimit := false ;
17511: LD_ADDR_OWVAR 76
17515: PUSH
17516: LD_INT 0
17518: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17519: LD_VAR 0 3
17523: PPUSH
17524: LD_INT 1
17526: PPUSH
17527: CALL_OW 51
// ToLua ( playRanger() ) ;
17531: LD_STRING playRanger()
17533: PPUSH
17534: CALL_OW 559
// p := 0 ;
17538: LD_ADDR_VAR 0 2
17542: PUSH
17543: LD_INT 0
17545: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17546: LD_INT 35
17548: PPUSH
17549: CALL_OW 67
// p := p + 1 ;
17553: LD_ADDR_VAR 0 2
17557: PUSH
17558: LD_VAR 0 2
17562: PUSH
17563: LD_INT 1
17565: PLUS
17566: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17567: LD_VAR 0 3
17571: PPUSH
17572: CALL_OW 256
17576: PUSH
17577: LD_INT 1000
17579: LESS
17580: IFFALSE 17594
// SetLives ( un , 1000 ) ;
17582: LD_VAR 0 3
17586: PPUSH
17587: LD_INT 1000
17589: PPUSH
17590: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17594: LD_VAR 0 3
17598: PPUSH
17599: LD_INT 81
17601: PUSH
17602: LD_OWVAR 2
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 91
17613: PUSH
17614: LD_VAR 0 3
17618: PUSH
17619: LD_INT 30
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: LIST
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PPUSH
17631: CALL_OW 69
17635: PPUSH
17636: LD_VAR 0 3
17640: PPUSH
17641: CALL_OW 74
17645: PPUSH
17646: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17650: LD_VAR 0 2
17654: PUSH
17655: LD_INT 80
17657: GREATER
17658: PUSH
17659: LD_VAR 0 3
17663: PPUSH
17664: CALL_OW 301
17668: OR
17669: IFFALSE 17546
// if un then
17671: LD_VAR 0 3
17675: IFFALSE 17686
// RemoveUnit ( un ) ;
17677: LD_VAR 0 3
17681: PPUSH
17682: CALL_OW 64
// end ;
17686: PPOPN 3
17688: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17689: LD_EXP 79
17693: IFFALSE 17809
17695: GO 17697
17697: DISABLE
17698: LD_INT 0
17700: PPUSH
17701: PPUSH
17702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17703: LD_ADDR_VAR 0 2
17707: PUSH
17708: LD_INT 81
17710: PUSH
17711: LD_OWVAR 2
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 21
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PPUSH
17734: CALL_OW 69
17738: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17739: LD_STRING playComputer()
17741: PPUSH
17742: CALL_OW 559
// if not tmp then
17746: LD_VAR 0 2
17750: NOT
17751: IFFALSE 17755
// exit ;
17753: GO 17809
// for i in tmp do
17755: LD_ADDR_VAR 0 1
17759: PUSH
17760: LD_VAR 0 2
17764: PUSH
17765: FOR_IN
17766: IFFALSE 17807
// for j := 1 to 4 do
17768: LD_ADDR_VAR 0 3
17772: PUSH
17773: DOUBLE
17774: LD_INT 1
17776: DEC
17777: ST_TO_ADDR
17778: LD_INT 4
17780: PUSH
17781: FOR_TO
17782: IFFALSE 17803
// SetSkill ( i , j , 10 ) ;
17784: LD_VAR 0 1
17788: PPUSH
17789: LD_VAR 0 3
17793: PPUSH
17794: LD_INT 10
17796: PPUSH
17797: CALL_OW 237
17801: GO 17781
17803: POP
17804: POP
17805: GO 17765
17807: POP
17808: POP
// end ;
17809: PPOPN 3
17811: END
// every 0 0$1 trigger s30 do var i , tmp ;
17812: LD_EXP 80
17816: IFFALSE 17885
17818: GO 17820
17820: DISABLE
17821: LD_INT 0
17823: PPUSH
17824: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17825: LD_ADDR_VAR 0 2
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_OWVAR 2
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 69
17846: ST_TO_ADDR
// if not tmp then
17847: LD_VAR 0 2
17851: NOT
17852: IFFALSE 17856
// exit ;
17854: GO 17885
// for i in tmp do
17856: LD_ADDR_VAR 0 1
17860: PUSH
17861: LD_VAR 0 2
17865: PUSH
17866: FOR_IN
17867: IFFALSE 17883
// SetLives ( i , 300 ) ;
17869: LD_VAR 0 1
17873: PPUSH
17874: LD_INT 300
17876: PPUSH
17877: CALL_OW 234
17881: GO 17866
17883: POP
17884: POP
// end ;
17885: PPOPN 2
17887: END
// every 0 0$1 trigger s60 do var i , tmp ;
17888: LD_EXP 81
17892: IFFALSE 17961
17894: GO 17896
17896: DISABLE
17897: LD_INT 0
17899: PPUSH
17900: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17901: LD_ADDR_VAR 0 2
17905: PUSH
17906: LD_INT 22
17908: PUSH
17909: LD_OWVAR 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PPUSH
17918: CALL_OW 69
17922: ST_TO_ADDR
// if not tmp then
17923: LD_VAR 0 2
17927: NOT
17928: IFFALSE 17932
// exit ;
17930: GO 17961
// for i in tmp do
17932: LD_ADDR_VAR 0 1
17936: PUSH
17937: LD_VAR 0 2
17941: PUSH
17942: FOR_IN
17943: IFFALSE 17959
// SetLives ( i , 600 ) ;
17945: LD_VAR 0 1
17949: PPUSH
17950: LD_INT 600
17952: PPUSH
17953: CALL_OW 234
17957: GO 17942
17959: POP
17960: POP
// end ;
17961: PPOPN 2
17963: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17964: LD_INT 0
17966: PPUSH
// case cmd of 301 :
17967: LD_VAR 0 1
17971: PUSH
17972: LD_INT 301
17974: DOUBLE
17975: EQUAL
17976: IFTRUE 17980
17978: GO 18012
17980: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17981: LD_VAR 0 6
17985: PPUSH
17986: LD_VAR 0 7
17990: PPUSH
17991: LD_VAR 0 8
17995: PPUSH
17996: LD_VAR 0 4
18000: PPUSH
18001: LD_VAR 0 5
18005: PPUSH
18006: CALL 19221 0 5
18010: GO 18133
18012: LD_INT 302
18014: DOUBLE
18015: EQUAL
18016: IFTRUE 18020
18018: GO 18057
18020: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18021: LD_VAR 0 6
18025: PPUSH
18026: LD_VAR 0 7
18030: PPUSH
18031: LD_VAR 0 8
18035: PPUSH
18036: LD_VAR 0 9
18040: PPUSH
18041: LD_VAR 0 4
18045: PPUSH
18046: LD_VAR 0 5
18050: PPUSH
18051: CALL 19312 0 6
18055: GO 18133
18057: LD_INT 303
18059: DOUBLE
18060: EQUAL
18061: IFTRUE 18065
18063: GO 18102
18065: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18066: LD_VAR 0 6
18070: PPUSH
18071: LD_VAR 0 7
18075: PPUSH
18076: LD_VAR 0 8
18080: PPUSH
18081: LD_VAR 0 9
18085: PPUSH
18086: LD_VAR 0 4
18090: PPUSH
18091: LD_VAR 0 5
18095: PPUSH
18096: CALL 18138 0 6
18100: GO 18133
18102: LD_INT 304
18104: DOUBLE
18105: EQUAL
18106: IFTRUE 18110
18108: GO 18132
18110: POP
// hHackTeleport ( unit , x , y ) ; end ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_VAR 0 4
18120: PPUSH
18121: LD_VAR 0 5
18125: PPUSH
18126: CALL 19905 0 3
18130: GO 18133
18132: POP
// end ;
18133: LD_VAR 0 12
18137: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18138: LD_INT 0
18140: PPUSH
18141: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18142: LD_VAR 0 1
18146: PUSH
18147: LD_INT 1
18149: LESS
18150: PUSH
18151: LD_VAR 0 1
18155: PUSH
18156: LD_INT 3
18158: GREATER
18159: OR
18160: PUSH
18161: LD_VAR 0 5
18165: PPUSH
18166: LD_VAR 0 6
18170: PPUSH
18171: CALL_OW 428
18175: OR
18176: IFFALSE 18180
// exit ;
18178: GO 18908
// uc_side := your_side ;
18180: LD_ADDR_OWVAR 20
18184: PUSH
18185: LD_OWVAR 2
18189: ST_TO_ADDR
// uc_nation := nation ;
18190: LD_ADDR_OWVAR 21
18194: PUSH
18195: LD_VAR 0 1
18199: ST_TO_ADDR
// bc_level = 1 ;
18200: LD_ADDR_OWVAR 43
18204: PUSH
18205: LD_INT 1
18207: ST_TO_ADDR
// case btype of 1 :
18208: LD_VAR 0 2
18212: PUSH
18213: LD_INT 1
18215: DOUBLE
18216: EQUAL
18217: IFTRUE 18221
18219: GO 18232
18221: POP
// bc_type := b_depot ; 2 :
18222: LD_ADDR_OWVAR 42
18226: PUSH
18227: LD_INT 0
18229: ST_TO_ADDR
18230: GO 18852
18232: LD_INT 2
18234: DOUBLE
18235: EQUAL
18236: IFTRUE 18240
18238: GO 18251
18240: POP
// bc_type := b_warehouse ; 3 :
18241: LD_ADDR_OWVAR 42
18245: PUSH
18246: LD_INT 1
18248: ST_TO_ADDR
18249: GO 18852
18251: LD_INT 3
18253: DOUBLE
18254: EQUAL
18255: IFTRUE 18259
18257: GO 18270
18259: POP
// bc_type := b_lab ; 4 .. 9 :
18260: LD_ADDR_OWVAR 42
18264: PUSH
18265: LD_INT 6
18267: ST_TO_ADDR
18268: GO 18852
18270: LD_INT 4
18272: DOUBLE
18273: GREATEREQUAL
18274: IFFALSE 18282
18276: LD_INT 9
18278: DOUBLE
18279: LESSEQUAL
18280: IFTRUE 18284
18282: GO 18344
18284: POP
// begin bc_type := b_lab_half ;
18285: LD_ADDR_OWVAR 42
18289: PUSH
18290: LD_INT 7
18292: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18293: LD_ADDR_OWVAR 44
18297: PUSH
18298: LD_INT 10
18300: PUSH
18301: LD_INT 11
18303: PUSH
18304: LD_INT 12
18306: PUSH
18307: LD_INT 15
18309: PUSH
18310: LD_INT 14
18312: PUSH
18313: LD_INT 13
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: PUSH
18324: LD_VAR 0 2
18328: PUSH
18329: LD_INT 3
18331: MINUS
18332: ARRAY
18333: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18334: LD_ADDR_OWVAR 45
18338: PUSH
18339: LD_INT 9
18341: ST_TO_ADDR
// end ; 10 .. 13 :
18342: GO 18852
18344: LD_INT 10
18346: DOUBLE
18347: GREATEREQUAL
18348: IFFALSE 18356
18350: LD_INT 13
18352: DOUBLE
18353: LESSEQUAL
18354: IFTRUE 18358
18356: GO 18435
18358: POP
// begin bc_type := b_lab_full ;
18359: LD_ADDR_OWVAR 42
18363: PUSH
18364: LD_INT 8
18366: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18367: LD_ADDR_OWVAR 44
18371: PUSH
18372: LD_INT 10
18374: PUSH
18375: LD_INT 12
18377: PUSH
18378: LD_INT 14
18380: PUSH
18381: LD_INT 13
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: PUSH
18390: LD_VAR 0 2
18394: PUSH
18395: LD_INT 9
18397: MINUS
18398: ARRAY
18399: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18400: LD_ADDR_OWVAR 45
18404: PUSH
18405: LD_INT 11
18407: PUSH
18408: LD_INT 15
18410: PUSH
18411: LD_INT 12
18413: PUSH
18414: LD_INT 15
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: PUSH
18423: LD_VAR 0 2
18427: PUSH
18428: LD_INT 9
18430: MINUS
18431: ARRAY
18432: ST_TO_ADDR
// end ; 14 :
18433: GO 18852
18435: LD_INT 14
18437: DOUBLE
18438: EQUAL
18439: IFTRUE 18443
18441: GO 18454
18443: POP
// bc_type := b_workshop ; 15 :
18444: LD_ADDR_OWVAR 42
18448: PUSH
18449: LD_INT 2
18451: ST_TO_ADDR
18452: GO 18852
18454: LD_INT 15
18456: DOUBLE
18457: EQUAL
18458: IFTRUE 18462
18460: GO 18473
18462: POP
// bc_type := b_factory ; 16 :
18463: LD_ADDR_OWVAR 42
18467: PUSH
18468: LD_INT 3
18470: ST_TO_ADDR
18471: GO 18852
18473: LD_INT 16
18475: DOUBLE
18476: EQUAL
18477: IFTRUE 18481
18479: GO 18492
18481: POP
// bc_type := b_ext_gun ; 17 :
18482: LD_ADDR_OWVAR 42
18486: PUSH
18487: LD_INT 17
18489: ST_TO_ADDR
18490: GO 18852
18492: LD_INT 17
18494: DOUBLE
18495: EQUAL
18496: IFTRUE 18500
18498: GO 18528
18500: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18501: LD_ADDR_OWVAR 42
18505: PUSH
18506: LD_INT 19
18508: PUSH
18509: LD_INT 23
18511: PUSH
18512: LD_INT 19
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_VAR 0 1
18524: ARRAY
18525: ST_TO_ADDR
18526: GO 18852
18528: LD_INT 18
18530: DOUBLE
18531: EQUAL
18532: IFTRUE 18536
18534: GO 18547
18536: POP
// bc_type := b_ext_radar ; 19 :
18537: LD_ADDR_OWVAR 42
18541: PUSH
18542: LD_INT 20
18544: ST_TO_ADDR
18545: GO 18852
18547: LD_INT 19
18549: DOUBLE
18550: EQUAL
18551: IFTRUE 18555
18553: GO 18566
18555: POP
// bc_type := b_ext_radio ; 20 :
18556: LD_ADDR_OWVAR 42
18560: PUSH
18561: LD_INT 22
18563: ST_TO_ADDR
18564: GO 18852
18566: LD_INT 20
18568: DOUBLE
18569: EQUAL
18570: IFTRUE 18574
18572: GO 18585
18574: POP
// bc_type := b_ext_siberium ; 21 :
18575: LD_ADDR_OWVAR 42
18579: PUSH
18580: LD_INT 21
18582: ST_TO_ADDR
18583: GO 18852
18585: LD_INT 21
18587: DOUBLE
18588: EQUAL
18589: IFTRUE 18593
18591: GO 18604
18593: POP
// bc_type := b_ext_computer ; 22 :
18594: LD_ADDR_OWVAR 42
18598: PUSH
18599: LD_INT 24
18601: ST_TO_ADDR
18602: GO 18852
18604: LD_INT 22
18606: DOUBLE
18607: EQUAL
18608: IFTRUE 18612
18610: GO 18623
18612: POP
// bc_type := b_ext_track ; 23 :
18613: LD_ADDR_OWVAR 42
18617: PUSH
18618: LD_INT 16
18620: ST_TO_ADDR
18621: GO 18852
18623: LD_INT 23
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18642
18631: POP
// bc_type := b_ext_laser ; 24 :
18632: LD_ADDR_OWVAR 42
18636: PUSH
18637: LD_INT 25
18639: ST_TO_ADDR
18640: GO 18852
18642: LD_INT 24
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18661
18650: POP
// bc_type := b_control_tower ; 25 :
18651: LD_ADDR_OWVAR 42
18655: PUSH
18656: LD_INT 36
18658: ST_TO_ADDR
18659: GO 18852
18661: LD_INT 25
18663: DOUBLE
18664: EQUAL
18665: IFTRUE 18669
18667: GO 18680
18669: POP
// bc_type := b_breastwork ; 26 :
18670: LD_ADDR_OWVAR 42
18674: PUSH
18675: LD_INT 31
18677: ST_TO_ADDR
18678: GO 18852
18680: LD_INT 26
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18699
18688: POP
// bc_type := b_bunker ; 27 :
18689: LD_ADDR_OWVAR 42
18693: PUSH
18694: LD_INT 32
18696: ST_TO_ADDR
18697: GO 18852
18699: LD_INT 27
18701: DOUBLE
18702: EQUAL
18703: IFTRUE 18707
18705: GO 18718
18707: POP
// bc_type := b_turret ; 28 :
18708: LD_ADDR_OWVAR 42
18712: PUSH
18713: LD_INT 33
18715: ST_TO_ADDR
18716: GO 18852
18718: LD_INT 28
18720: DOUBLE
18721: EQUAL
18722: IFTRUE 18726
18724: GO 18737
18726: POP
// bc_type := b_armoury ; 29 :
18727: LD_ADDR_OWVAR 42
18731: PUSH
18732: LD_INT 4
18734: ST_TO_ADDR
18735: GO 18852
18737: LD_INT 29
18739: DOUBLE
18740: EQUAL
18741: IFTRUE 18745
18743: GO 18756
18745: POP
// bc_type := b_barracks ; 30 :
18746: LD_ADDR_OWVAR 42
18750: PUSH
18751: LD_INT 5
18753: ST_TO_ADDR
18754: GO 18852
18756: LD_INT 30
18758: DOUBLE
18759: EQUAL
18760: IFTRUE 18764
18762: GO 18775
18764: POP
// bc_type := b_solar_power ; 31 :
18765: LD_ADDR_OWVAR 42
18769: PUSH
18770: LD_INT 27
18772: ST_TO_ADDR
18773: GO 18852
18775: LD_INT 31
18777: DOUBLE
18778: EQUAL
18779: IFTRUE 18783
18781: GO 18794
18783: POP
// bc_type := b_oil_power ; 32 :
18784: LD_ADDR_OWVAR 42
18788: PUSH
18789: LD_INT 26
18791: ST_TO_ADDR
18792: GO 18852
18794: LD_INT 32
18796: DOUBLE
18797: EQUAL
18798: IFTRUE 18802
18800: GO 18813
18802: POP
// bc_type := b_siberite_power ; 33 :
18803: LD_ADDR_OWVAR 42
18807: PUSH
18808: LD_INT 28
18810: ST_TO_ADDR
18811: GO 18852
18813: LD_INT 33
18815: DOUBLE
18816: EQUAL
18817: IFTRUE 18821
18819: GO 18832
18821: POP
// bc_type := b_oil_mine ; 34 :
18822: LD_ADDR_OWVAR 42
18826: PUSH
18827: LD_INT 29
18829: ST_TO_ADDR
18830: GO 18852
18832: LD_INT 34
18834: DOUBLE
18835: EQUAL
18836: IFTRUE 18840
18838: GO 18851
18840: POP
// bc_type := b_siberite_mine ; end ;
18841: LD_ADDR_OWVAR 42
18845: PUSH
18846: LD_INT 30
18848: ST_TO_ADDR
18849: GO 18852
18851: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18852: LD_ADDR_VAR 0 8
18856: PUSH
18857: LD_VAR 0 5
18861: PPUSH
18862: LD_VAR 0 6
18866: PPUSH
18867: LD_VAR 0 3
18871: PPUSH
18872: CALL_OW 47
18876: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18877: LD_OWVAR 42
18881: PUSH
18882: LD_INT 32
18884: PUSH
18885: LD_INT 33
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: IN
18892: IFFALSE 18908
// PlaceWeaponTurret ( b , weapon ) ;
18894: LD_VAR 0 8
18898: PPUSH
18899: LD_VAR 0 4
18903: PPUSH
18904: CALL_OW 431
// end ;
18908: LD_VAR 0 7
18912: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18913: LD_INT 0
18915: PPUSH
18916: PPUSH
18917: PPUSH
18918: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18919: LD_ADDR_VAR 0 4
18923: PUSH
18924: LD_INT 22
18926: PUSH
18927: LD_OWVAR 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: LD_INT 30
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 30
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 69
18972: ST_TO_ADDR
// if not tmp then
18973: LD_VAR 0 4
18977: NOT
18978: IFFALSE 18982
// exit ;
18980: GO 19041
// for i in tmp do
18982: LD_ADDR_VAR 0 2
18986: PUSH
18987: LD_VAR 0 4
18991: PUSH
18992: FOR_IN
18993: IFFALSE 19039
// for j = 1 to 3 do
18995: LD_ADDR_VAR 0 3
18999: PUSH
19000: DOUBLE
19001: LD_INT 1
19003: DEC
19004: ST_TO_ADDR
19005: LD_INT 3
19007: PUSH
19008: FOR_TO
19009: IFFALSE 19035
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19011: LD_VAR 0 2
19015: PPUSH
19016: CALL_OW 274
19020: PPUSH
19021: LD_VAR 0 3
19025: PPUSH
19026: LD_INT 99999
19028: PPUSH
19029: CALL_OW 277
19033: GO 19008
19035: POP
19036: POP
19037: GO 18992
19039: POP
19040: POP
// end ;
19041: LD_VAR 0 1
19045: RET
// export function hHackSetLevel10 ; var i , j ; begin
19046: LD_INT 0
19048: PPUSH
19049: PPUSH
19050: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19051: LD_ADDR_VAR 0 2
19055: PUSH
19056: LD_INT 21
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 69
19070: PUSH
19071: FOR_IN
19072: IFFALSE 19124
// if IsSelected ( i ) then
19074: LD_VAR 0 2
19078: PPUSH
19079: CALL_OW 306
19083: IFFALSE 19122
// begin for j := 1 to 4 do
19085: LD_ADDR_VAR 0 3
19089: PUSH
19090: DOUBLE
19091: LD_INT 1
19093: DEC
19094: ST_TO_ADDR
19095: LD_INT 4
19097: PUSH
19098: FOR_TO
19099: IFFALSE 19120
// SetSkill ( i , j , 10 ) ;
19101: LD_VAR 0 2
19105: PPUSH
19106: LD_VAR 0 3
19110: PPUSH
19111: LD_INT 10
19113: PPUSH
19114: CALL_OW 237
19118: GO 19098
19120: POP
19121: POP
// end ;
19122: GO 19071
19124: POP
19125: POP
// end ;
19126: LD_VAR 0 1
19130: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19131: LD_INT 0
19133: PPUSH
19134: PPUSH
19135: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19136: LD_ADDR_VAR 0 2
19140: PUSH
19141: LD_INT 22
19143: PUSH
19144: LD_OWVAR 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 21
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PPUSH
19167: CALL_OW 69
19171: PUSH
19172: FOR_IN
19173: IFFALSE 19214
// begin for j := 1 to 4 do
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: DOUBLE
19181: LD_INT 1
19183: DEC
19184: ST_TO_ADDR
19185: LD_INT 4
19187: PUSH
19188: FOR_TO
19189: IFFALSE 19210
// SetSkill ( i , j , 10 ) ;
19191: LD_VAR 0 2
19195: PPUSH
19196: LD_VAR 0 3
19200: PPUSH
19201: LD_INT 10
19203: PPUSH
19204: CALL_OW 237
19208: GO 19188
19210: POP
19211: POP
// end ;
19212: GO 19172
19214: POP
19215: POP
// end ;
19216: LD_VAR 0 1
19220: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19221: LD_INT 0
19223: PPUSH
// uc_side := your_side ;
19224: LD_ADDR_OWVAR 20
19228: PUSH
19229: LD_OWVAR 2
19233: ST_TO_ADDR
// uc_nation := nation ;
19234: LD_ADDR_OWVAR 21
19238: PUSH
19239: LD_VAR 0 1
19243: ST_TO_ADDR
// InitHc ;
19244: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19248: LD_INT 0
19250: PPUSH
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_VAR 0 3
19260: PPUSH
19261: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19265: LD_VAR 0 4
19269: PPUSH
19270: LD_VAR 0 5
19274: PPUSH
19275: CALL_OW 428
19279: PUSH
19280: LD_INT 0
19282: EQUAL
19283: IFFALSE 19307
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19285: CALL_OW 44
19289: PPUSH
19290: LD_VAR 0 4
19294: PPUSH
19295: LD_VAR 0 5
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 48
// end ;
19307: LD_VAR 0 6
19311: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19312: LD_INT 0
19314: PPUSH
19315: PPUSH
// uc_side := your_side ;
19316: LD_ADDR_OWVAR 20
19320: PUSH
19321: LD_OWVAR 2
19325: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19326: LD_VAR 0 1
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 3
19339: PUSH
19340: LD_INT 4
19342: PUSH
19343: LD_INT 5
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: IN
19353: IFFALSE 19365
// uc_nation := nation_american else
19355: LD_ADDR_OWVAR 21
19359: PUSH
19360: LD_INT 1
19362: ST_TO_ADDR
19363: GO 19408
// if chassis in [ 11 , 12 , 13 , 14 ] then
19365: LD_VAR 0 1
19369: PUSH
19370: LD_INT 11
19372: PUSH
19373: LD_INT 12
19375: PUSH
19376: LD_INT 13
19378: PUSH
19379: LD_INT 14
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: IN
19388: IFFALSE 19400
// uc_nation := nation_arabian else
19390: LD_ADDR_OWVAR 21
19394: PUSH
19395: LD_INT 2
19397: ST_TO_ADDR
19398: GO 19408
// uc_nation := nation_russian ;
19400: LD_ADDR_OWVAR 21
19404: PUSH
19405: LD_INT 3
19407: ST_TO_ADDR
// vc_chassis := chassis ;
19408: LD_ADDR_OWVAR 37
19412: PUSH
19413: LD_VAR 0 1
19417: ST_TO_ADDR
// vc_engine := engine ;
19418: LD_ADDR_OWVAR 39
19422: PUSH
19423: LD_VAR 0 2
19427: ST_TO_ADDR
// vc_control := control ;
19428: LD_ADDR_OWVAR 38
19432: PUSH
19433: LD_VAR 0 3
19437: ST_TO_ADDR
// vc_weapon := weapon ;
19438: LD_ADDR_OWVAR 40
19442: PUSH
19443: LD_VAR 0 4
19447: ST_TO_ADDR
// un := CreateVehicle ;
19448: LD_ADDR_VAR 0 8
19452: PUSH
19453: CALL_OW 45
19457: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19458: LD_VAR 0 8
19462: PPUSH
19463: LD_INT 0
19465: PPUSH
19466: LD_INT 5
19468: PPUSH
19469: CALL_OW 12
19473: PPUSH
19474: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19478: LD_VAR 0 8
19482: PPUSH
19483: LD_VAR 0 5
19487: PPUSH
19488: LD_VAR 0 6
19492: PPUSH
19493: LD_INT 1
19495: PPUSH
19496: CALL_OW 48
// end ;
19500: LD_VAR 0 7
19504: RET
// export hInvincible ; every 1 do
19505: GO 19507
19507: DISABLE
// hInvincible := [ ] ;
19508: LD_ADDR_EXP 82
19512: PUSH
19513: EMPTY
19514: ST_TO_ADDR
19515: END
// every 10 do var i ;
19516: GO 19518
19518: DISABLE
19519: LD_INT 0
19521: PPUSH
// begin enable ;
19522: ENABLE
// if not hInvincible then
19523: LD_EXP 82
19527: NOT
19528: IFFALSE 19532
// exit ;
19530: GO 19576
// for i in hInvincible do
19532: LD_ADDR_VAR 0 1
19536: PUSH
19537: LD_EXP 82
19541: PUSH
19542: FOR_IN
19543: IFFALSE 19574
// if GetLives ( i ) < 1000 then
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL_OW 256
19554: PUSH
19555: LD_INT 1000
19557: LESS
19558: IFFALSE 19572
// SetLives ( i , 1000 ) ;
19560: LD_VAR 0 1
19564: PPUSH
19565: LD_INT 1000
19567: PPUSH
19568: CALL_OW 234
19572: GO 19542
19574: POP
19575: POP
// end ;
19576: PPOPN 1
19578: END
// export function hHackInvincible ; var i ; begin
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19583: LD_ADDR_VAR 0 2
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: LD_INT 21
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 21
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PUSH
19621: FOR_IN
19622: IFFALSE 19683
// if IsSelected ( i ) then
19624: LD_VAR 0 2
19628: PPUSH
19629: CALL_OW 306
19633: IFFALSE 19681
// begin if i in hInvincible then
19635: LD_VAR 0 2
19639: PUSH
19640: LD_EXP 82
19644: IN
19645: IFFALSE 19665
// hInvincible := hInvincible diff i else
19647: LD_ADDR_EXP 82
19651: PUSH
19652: LD_EXP 82
19656: PUSH
19657: LD_VAR 0 2
19661: DIFF
19662: ST_TO_ADDR
19663: GO 19681
// hInvincible := hInvincible union i ;
19665: LD_ADDR_EXP 82
19669: PUSH
19670: LD_EXP 82
19674: PUSH
19675: LD_VAR 0 2
19679: UNION
19680: ST_TO_ADDR
// end ;
19681: GO 19621
19683: POP
19684: POP
// end ;
19685: LD_VAR 0 1
19689: RET
// export function hHackInvisible ; var i , j ; begin
19690: LD_INT 0
19692: PPUSH
19693: PPUSH
19694: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19695: LD_ADDR_VAR 0 2
19699: PUSH
19700: LD_INT 21
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PPUSH
19710: CALL_OW 69
19714: PUSH
19715: FOR_IN
19716: IFFALSE 19740
// if IsSelected ( i ) then
19718: LD_VAR 0 2
19722: PPUSH
19723: CALL_OW 306
19727: IFFALSE 19738
// ComForceInvisible ( i ) ;
19729: LD_VAR 0 2
19733: PPUSH
19734: CALL_OW 496
19738: GO 19715
19740: POP
19741: POP
// end ;
19742: LD_VAR 0 1
19746: RET
// export function hHackChangeYourSide ; begin
19747: LD_INT 0
19749: PPUSH
// if your_side = 8 then
19750: LD_OWVAR 2
19754: PUSH
19755: LD_INT 8
19757: EQUAL
19758: IFFALSE 19770
// your_side := 0 else
19760: LD_ADDR_OWVAR 2
19764: PUSH
19765: LD_INT 0
19767: ST_TO_ADDR
19768: GO 19784
// your_side := your_side + 1 ;
19770: LD_ADDR_OWVAR 2
19774: PUSH
19775: LD_OWVAR 2
19779: PUSH
19780: LD_INT 1
19782: PLUS
19783: ST_TO_ADDR
// end ;
19784: LD_VAR 0 1
19788: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19789: LD_INT 0
19791: PPUSH
19792: PPUSH
19793: PPUSH
// for i in all_units do
19794: LD_ADDR_VAR 0 2
19798: PUSH
19799: LD_OWVAR 3
19803: PUSH
19804: FOR_IN
19805: IFFALSE 19883
// if IsSelected ( i ) then
19807: LD_VAR 0 2
19811: PPUSH
19812: CALL_OW 306
19816: IFFALSE 19881
// begin j := GetSide ( i ) ;
19818: LD_ADDR_VAR 0 3
19822: PUSH
19823: LD_VAR 0 2
19827: PPUSH
19828: CALL_OW 255
19832: ST_TO_ADDR
// if j = 8 then
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 8
19840: EQUAL
19841: IFFALSE 19853
// j := 0 else
19843: LD_ADDR_VAR 0 3
19847: PUSH
19848: LD_INT 0
19850: ST_TO_ADDR
19851: GO 19867
// j := j + 1 ;
19853: LD_ADDR_VAR 0 3
19857: PUSH
19858: LD_VAR 0 3
19862: PUSH
19863: LD_INT 1
19865: PLUS
19866: ST_TO_ADDR
// SetSide ( i , j ) ;
19867: LD_VAR 0 2
19871: PPUSH
19872: LD_VAR 0 3
19876: PPUSH
19877: CALL_OW 235
// end ;
19881: GO 19804
19883: POP
19884: POP
// end ;
19885: LD_VAR 0 1
19889: RET
// export function hHackFog ; begin
19890: LD_INT 0
19892: PPUSH
// FogOff ( true ) ;
19893: LD_INT 1
19895: PPUSH
19896: CALL_OW 344
// end ;
19900: LD_VAR 0 1
19904: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19905: LD_INT 0
19907: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19908: LD_VAR 0 1
19912: PPUSH
19913: LD_VAR 0 2
19917: PPUSH
19918: LD_VAR 0 3
19922: PPUSH
19923: LD_INT 1
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 483
// CenterOnXY ( x , y ) ;
19933: LD_VAR 0 2
19937: PPUSH
19938: LD_VAR 0 3
19942: PPUSH
19943: CALL_OW 84
// end ;
19947: LD_VAR 0 4
19951: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19952: LD_INT 0
19954: PPUSH
19955: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19956: LD_VAR 0 1
19960: NOT
19961: PUSH
19962: LD_VAR 0 2
19966: PPUSH
19967: LD_VAR 0 3
19971: PPUSH
19972: CALL_OW 488
19976: NOT
19977: OR
19978: PUSH
19979: LD_VAR 0 1
19983: PPUSH
19984: CALL_OW 266
19988: PUSH
19989: LD_INT 3
19991: NONEQUAL
19992: PUSH
19993: LD_VAR 0 1
19997: PPUSH
19998: CALL_OW 247
20002: PUSH
20003: LD_INT 1
20005: EQUAL
20006: NOT
20007: AND
20008: OR
20009: IFFALSE 20013
// exit ;
20011: GO 20162
// if GetType ( factory ) = unit_human then
20013: LD_VAR 0 1
20017: PPUSH
20018: CALL_OW 247
20022: PUSH
20023: LD_INT 1
20025: EQUAL
20026: IFFALSE 20043
// factory := IsInUnit ( factory ) ;
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_VAR 0 1
20037: PPUSH
20038: CALL_OW 310
20042: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20043: LD_VAR 0 1
20047: PPUSH
20048: CALL_OW 266
20052: PUSH
20053: LD_INT 3
20055: NONEQUAL
20056: IFFALSE 20060
// exit ;
20058: GO 20162
// if HexInfo ( x , y ) = factory then
20060: LD_VAR 0 2
20064: PPUSH
20065: LD_VAR 0 3
20069: PPUSH
20070: CALL_OW 428
20074: PUSH
20075: LD_VAR 0 1
20079: EQUAL
20080: IFFALSE 20107
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20082: LD_ADDR_EXP 83
20086: PUSH
20087: LD_EXP 83
20091: PPUSH
20092: LD_VAR 0 1
20096: PPUSH
20097: LD_INT 0
20099: PPUSH
20100: CALL_OW 1
20104: ST_TO_ADDR
20105: GO 20158
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20107: LD_ADDR_EXP 83
20111: PUSH
20112: LD_EXP 83
20116: PPUSH
20117: LD_VAR 0 1
20121: PPUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 255
20131: PUSH
20132: LD_VAR 0 1
20136: PUSH
20137: LD_VAR 0 2
20141: PUSH
20142: LD_VAR 0 3
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: PPUSH
20153: CALL_OW 1
20157: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20158: CALL 20167 0 0
// end ;
20162: LD_VAR 0 4
20166: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20167: LD_INT 0
20169: PPUSH
20170: PPUSH
20171: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20172: LD_STRING resetFactoryWaypoint();
20174: PPUSH
20175: CALL_OW 559
// if factoryWaypoints then
20179: LD_EXP 83
20183: IFFALSE 20309
// begin list := PrepareArray ( factoryWaypoints ) ;
20185: LD_ADDR_VAR 0 3
20189: PUSH
20190: LD_EXP 83
20194: PPUSH
20195: CALL 67828 0 1
20199: ST_TO_ADDR
// for i := 1 to list do
20200: LD_ADDR_VAR 0 2
20204: PUSH
20205: DOUBLE
20206: LD_INT 1
20208: DEC
20209: ST_TO_ADDR
20210: LD_VAR 0 3
20214: PUSH
20215: FOR_TO
20216: IFFALSE 20307
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20218: LD_STRING setFactoryWaypointXY(
20220: PUSH
20221: LD_VAR 0 3
20225: PUSH
20226: LD_VAR 0 2
20230: ARRAY
20231: PUSH
20232: LD_INT 1
20234: ARRAY
20235: STR
20236: PUSH
20237: LD_STRING ,
20239: STR
20240: PUSH
20241: LD_VAR 0 3
20245: PUSH
20246: LD_VAR 0 2
20250: ARRAY
20251: PUSH
20252: LD_INT 2
20254: ARRAY
20255: STR
20256: PUSH
20257: LD_STRING ,
20259: STR
20260: PUSH
20261: LD_VAR 0 3
20265: PUSH
20266: LD_VAR 0 2
20270: ARRAY
20271: PUSH
20272: LD_INT 3
20274: ARRAY
20275: STR
20276: PUSH
20277: LD_STRING ,
20279: STR
20280: PUSH
20281: LD_VAR 0 3
20285: PUSH
20286: LD_VAR 0 2
20290: ARRAY
20291: PUSH
20292: LD_INT 4
20294: ARRAY
20295: STR
20296: PUSH
20297: LD_STRING )
20299: STR
20300: PPUSH
20301: CALL_OW 559
20305: GO 20215
20307: POP
20308: POP
// end ; end ;
20309: LD_VAR 0 1
20313: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20314: LD_INT 0
20316: PPUSH
// if HexInfo ( x , y ) = warehouse then
20317: LD_VAR 0 2
20321: PPUSH
20322: LD_VAR 0 3
20326: PPUSH
20327: CALL_OW 428
20331: PUSH
20332: LD_VAR 0 1
20336: EQUAL
20337: IFFALSE 20364
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20339: LD_ADDR_EXP 84
20343: PUSH
20344: LD_EXP 84
20348: PPUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: LD_INT 0
20356: PPUSH
20357: CALL_OW 1
20361: ST_TO_ADDR
20362: GO 20415
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20364: LD_ADDR_EXP 84
20368: PUSH
20369: LD_EXP 84
20373: PPUSH
20374: LD_VAR 0 1
20378: PPUSH
20379: LD_VAR 0 1
20383: PPUSH
20384: CALL_OW 255
20388: PUSH
20389: LD_VAR 0 1
20393: PUSH
20394: LD_VAR 0 2
20398: PUSH
20399: LD_VAR 0 3
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: PPUSH
20410: CALL_OW 1
20414: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20415: CALL 20424 0 0
// end ;
20419: LD_VAR 0 4
20423: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
20428: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20429: LD_STRING resetWarehouseGatheringPoints();
20431: PPUSH
20432: CALL_OW 559
// if warehouseGatheringPoints then
20436: LD_EXP 84
20440: IFFALSE 20566
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20442: LD_ADDR_VAR 0 3
20446: PUSH
20447: LD_EXP 84
20451: PPUSH
20452: CALL 67828 0 1
20456: ST_TO_ADDR
// for i := 1 to list do
20457: LD_ADDR_VAR 0 2
20461: PUSH
20462: DOUBLE
20463: LD_INT 1
20465: DEC
20466: ST_TO_ADDR
20467: LD_VAR 0 3
20471: PUSH
20472: FOR_TO
20473: IFFALSE 20564
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20475: LD_STRING setWarehouseGatheringPointXY(
20477: PUSH
20478: LD_VAR 0 3
20482: PUSH
20483: LD_VAR 0 2
20487: ARRAY
20488: PUSH
20489: LD_INT 1
20491: ARRAY
20492: STR
20493: PUSH
20494: LD_STRING ,
20496: STR
20497: PUSH
20498: LD_VAR 0 3
20502: PUSH
20503: LD_VAR 0 2
20507: ARRAY
20508: PUSH
20509: LD_INT 2
20511: ARRAY
20512: STR
20513: PUSH
20514: LD_STRING ,
20516: STR
20517: PUSH
20518: LD_VAR 0 3
20522: PUSH
20523: LD_VAR 0 2
20527: ARRAY
20528: PUSH
20529: LD_INT 3
20531: ARRAY
20532: STR
20533: PUSH
20534: LD_STRING ,
20536: STR
20537: PUSH
20538: LD_VAR 0 3
20542: PUSH
20543: LD_VAR 0 2
20547: ARRAY
20548: PUSH
20549: LD_INT 4
20551: ARRAY
20552: STR
20553: PUSH
20554: LD_STRING )
20556: STR
20557: PPUSH
20558: CALL_OW 559
20562: GO 20472
20564: POP
20565: POP
// end ; end ;
20566: LD_VAR 0 1
20570: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20571: LD_EXP 84
20575: IFFALSE 21260
20577: GO 20579
20579: DISABLE
20580: LD_INT 0
20582: PPUSH
20583: PPUSH
20584: PPUSH
20585: PPUSH
20586: PPUSH
20587: PPUSH
20588: PPUSH
20589: PPUSH
20590: PPUSH
// begin enable ;
20591: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20592: LD_ADDR_VAR 0 3
20596: PUSH
20597: LD_EXP 84
20601: PPUSH
20602: CALL 67828 0 1
20606: ST_TO_ADDR
// if not list then
20607: LD_VAR 0 3
20611: NOT
20612: IFFALSE 20616
// exit ;
20614: GO 21260
// for i := 1 to list do
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: DOUBLE
20622: LD_INT 1
20624: DEC
20625: ST_TO_ADDR
20626: LD_VAR 0 3
20630: PUSH
20631: FOR_TO
20632: IFFALSE 21258
// begin depot := list [ i ] [ 2 ] ;
20634: LD_ADDR_VAR 0 8
20638: PUSH
20639: LD_VAR 0 3
20643: PUSH
20644: LD_VAR 0 1
20648: ARRAY
20649: PUSH
20650: LD_INT 2
20652: ARRAY
20653: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20654: LD_ADDR_VAR 0 5
20658: PUSH
20659: LD_VAR 0 3
20663: PUSH
20664: LD_VAR 0 1
20668: ARRAY
20669: PUSH
20670: LD_INT 1
20672: ARRAY
20673: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20674: LD_VAR 0 8
20678: PPUSH
20679: CALL_OW 301
20683: PUSH
20684: LD_VAR 0 5
20688: PUSH
20689: LD_VAR 0 8
20693: PPUSH
20694: CALL_OW 255
20698: NONEQUAL
20699: OR
20700: IFFALSE 20729
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20702: LD_ADDR_EXP 84
20706: PUSH
20707: LD_EXP 84
20711: PPUSH
20712: LD_VAR 0 8
20716: PPUSH
20717: LD_INT 0
20719: PPUSH
20720: CALL_OW 1
20724: ST_TO_ADDR
// exit ;
20725: POP
20726: POP
20727: GO 21260
// end ; x := list [ i ] [ 3 ] ;
20729: LD_ADDR_VAR 0 6
20733: PUSH
20734: LD_VAR 0 3
20738: PUSH
20739: LD_VAR 0 1
20743: ARRAY
20744: PUSH
20745: LD_INT 3
20747: ARRAY
20748: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20749: LD_ADDR_VAR 0 7
20753: PUSH
20754: LD_VAR 0 3
20758: PUSH
20759: LD_VAR 0 1
20763: ARRAY
20764: PUSH
20765: LD_INT 4
20767: ARRAY
20768: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20769: LD_ADDR_VAR 0 9
20773: PUSH
20774: LD_VAR 0 6
20778: PPUSH
20779: LD_VAR 0 7
20783: PPUSH
20784: LD_INT 16
20786: PPUSH
20787: CALL 66416 0 3
20791: ST_TO_ADDR
// if not cratesNearbyPoint then
20792: LD_VAR 0 9
20796: NOT
20797: IFFALSE 20803
// exit ;
20799: POP
20800: POP
20801: GO 21260
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20803: LD_ADDR_VAR 0 4
20807: PUSH
20808: LD_INT 22
20810: PUSH
20811: LD_VAR 0 5
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 3
20822: PUSH
20823: LD_INT 60
20825: PUSH
20826: EMPTY
20827: LIST
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 91
20835: PUSH
20836: LD_VAR 0 8
20840: PUSH
20841: LD_INT 6
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: LD_INT 25
20854: PUSH
20855: LD_INT 2
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 25
20864: PUSH
20865: LD_INT 16
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: PUSH
20888: LD_VAR 0 8
20892: PPUSH
20893: CALL_OW 313
20897: PPUSH
20898: LD_INT 3
20900: PUSH
20901: LD_INT 60
20903: PUSH
20904: EMPTY
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: LD_INT 25
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 25
20926: PUSH
20927: LD_INT 16
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 72
20947: UNION
20948: ST_TO_ADDR
// if tmp then
20949: LD_VAR 0 4
20953: IFFALSE 21033
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20955: LD_ADDR_VAR 0 4
20959: PUSH
20960: LD_VAR 0 4
20964: PPUSH
20965: LD_INT 3
20967: PPUSH
20968: CALL 64385 0 2
20972: ST_TO_ADDR
// for j in tmp do
20973: LD_ADDR_VAR 0 2
20977: PUSH
20978: LD_VAR 0 4
20982: PUSH
20983: FOR_IN
20984: IFFALSE 21027
// begin if IsInUnit ( j ) then
20986: LD_VAR 0 2
20990: PPUSH
20991: CALL_OW 310
20995: IFFALSE 21006
// ComExit ( j ) ;
20997: LD_VAR 0 2
21001: PPUSH
21002: CALL 64468 0 1
// AddComCollect ( j , x , y ) ;
21006: LD_VAR 0 2
21010: PPUSH
21011: LD_VAR 0 6
21015: PPUSH
21016: LD_VAR 0 7
21020: PPUSH
21021: CALL_OW 177
// end ;
21025: GO 20983
21027: POP
21028: POP
// exit ;
21029: POP
21030: POP
21031: GO 21260
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21033: LD_ADDR_VAR 0 4
21037: PUSH
21038: LD_INT 22
21040: PUSH
21041: LD_VAR 0 5
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 91
21052: PUSH
21053: LD_VAR 0 8
21057: PUSH
21058: LD_INT 8
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 34
21071: PUSH
21072: LD_INT 12
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 34
21081: PUSH
21082: LD_INT 51
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 34
21091: PUSH
21092: LD_INT 32
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 34
21101: PUSH
21102: LD_INT 89
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: LIST
21120: PPUSH
21121: CALL_OW 69
21125: ST_TO_ADDR
// if tmp then
21126: LD_VAR 0 4
21130: IFFALSE 21256
// begin for j in tmp do
21132: LD_ADDR_VAR 0 2
21136: PUSH
21137: LD_VAR 0 4
21141: PUSH
21142: FOR_IN
21143: IFFALSE 21254
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21145: LD_VAR 0 2
21149: PPUSH
21150: CALL_OW 262
21154: PUSH
21155: LD_INT 3
21157: EQUAL
21158: PUSH
21159: LD_VAR 0 2
21163: PPUSH
21164: CALL_OW 261
21168: PUSH
21169: LD_INT 20
21171: GREATER
21172: OR
21173: PUSH
21174: LD_VAR 0 2
21178: PPUSH
21179: CALL_OW 314
21183: NOT
21184: AND
21185: PUSH
21186: LD_VAR 0 2
21190: PPUSH
21191: CALL_OW 263
21195: PUSH
21196: LD_INT 1
21198: NONEQUAL
21199: PUSH
21200: LD_VAR 0 2
21204: PPUSH
21205: CALL_OW 311
21209: OR
21210: AND
21211: IFFALSE 21252
// begin ComCollect ( j , x , y ) ;
21213: LD_VAR 0 2
21217: PPUSH
21218: LD_VAR 0 6
21222: PPUSH
21223: LD_VAR 0 7
21227: PPUSH
21228: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21232: LD_VAR 0 2
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: CALL_OW 172
// exit ;
21246: POP
21247: POP
21248: POP
21249: POP
21250: GO 21260
// end ;
21252: GO 21142
21254: POP
21255: POP
// end ; end ;
21256: GO 20631
21258: POP
21259: POP
// end ; end_of_file
21260: PPOPN 9
21262: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21263: LD_INT 0
21265: PPUSH
21266: PPUSH
21267: PPUSH
21268: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21269: LD_VAR 0 1
21273: PPUSH
21274: CALL_OW 264
21278: PUSH
21279: LD_INT 91
21281: EQUAL
21282: IFFALSE 21354
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21284: LD_INT 68
21286: PPUSH
21287: LD_VAR 0 1
21291: PPUSH
21292: CALL_OW 255
21296: PPUSH
21297: CALL_OW 321
21301: PUSH
21302: LD_INT 2
21304: EQUAL
21305: IFFALSE 21317
// eff := 70 else
21307: LD_ADDR_VAR 0 4
21311: PUSH
21312: LD_INT 70
21314: ST_TO_ADDR
21315: GO 21325
// eff := 30 ;
21317: LD_ADDR_VAR 0 4
21321: PUSH
21322: LD_INT 30
21324: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21325: LD_VAR 0 1
21329: PPUSH
21330: CALL_OW 250
21334: PPUSH
21335: LD_VAR 0 1
21339: PPUSH
21340: CALL_OW 251
21344: PPUSH
21345: LD_VAR 0 4
21349: PPUSH
21350: CALL_OW 495
// end ; end ;
21354: LD_VAR 0 2
21358: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21359: LD_INT 0
21361: PPUSH
// end ;
21362: LD_VAR 0 4
21366: RET
// export function SOS_Command ( cmd ) ; begin
21367: LD_INT 0
21369: PPUSH
// end ;
21370: LD_VAR 0 2
21374: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21375: LD_INT 0
21377: PPUSH
// end ;
21378: LD_VAR 0 6
21382: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
// if not vehicle or not factory then
21387: LD_VAR 0 1
21391: NOT
21392: PUSH
21393: LD_VAR 0 2
21397: NOT
21398: OR
21399: IFFALSE 21403
// exit ;
21401: GO 21634
// if factoryWaypoints >= factory then
21403: LD_EXP 83
21407: PUSH
21408: LD_VAR 0 2
21412: GREATEREQUAL
21413: IFFALSE 21634
// if factoryWaypoints [ factory ] then
21415: LD_EXP 83
21419: PUSH
21420: LD_VAR 0 2
21424: ARRAY
21425: IFFALSE 21634
// begin if GetControl ( vehicle ) = control_manual then
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL_OW 263
21436: PUSH
21437: LD_INT 1
21439: EQUAL
21440: IFFALSE 21521
// begin driver := IsDrivenBy ( vehicle ) ;
21442: LD_ADDR_VAR 0 4
21446: PUSH
21447: LD_VAR 0 1
21451: PPUSH
21452: CALL_OW 311
21456: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21457: LD_VAR 0 4
21461: PPUSH
21462: LD_EXP 83
21466: PUSH
21467: LD_VAR 0 2
21471: ARRAY
21472: PUSH
21473: LD_INT 3
21475: ARRAY
21476: PPUSH
21477: LD_EXP 83
21481: PUSH
21482: LD_VAR 0 2
21486: ARRAY
21487: PUSH
21488: LD_INT 4
21490: ARRAY
21491: PPUSH
21492: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21496: LD_VAR 0 4
21500: PPUSH
21501: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21505: LD_VAR 0 4
21509: PPUSH
21510: LD_VAR 0 2
21514: PPUSH
21515: CALL_OW 180
// end else
21519: GO 21634
// if GetControl ( vehicle ) = control_remote then
21521: LD_VAR 0 1
21525: PPUSH
21526: CALL_OW 263
21530: PUSH
21531: LD_INT 2
21533: EQUAL
21534: IFFALSE 21595
// begin wait ( 0 0$2 ) ;
21536: LD_INT 70
21538: PPUSH
21539: CALL_OW 67
// if Connect ( vehicle ) then
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL 34687 0 1
21552: IFFALSE 21593
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21554: LD_VAR 0 1
21558: PPUSH
21559: LD_EXP 83
21563: PUSH
21564: LD_VAR 0 2
21568: ARRAY
21569: PUSH
21570: LD_INT 3
21572: ARRAY
21573: PPUSH
21574: LD_EXP 83
21578: PUSH
21579: LD_VAR 0 2
21583: ARRAY
21584: PUSH
21585: LD_INT 4
21587: ARRAY
21588: PPUSH
21589: CALL_OW 171
// end else
21593: GO 21634
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21595: LD_VAR 0 1
21599: PPUSH
21600: LD_EXP 83
21604: PUSH
21605: LD_VAR 0 2
21609: ARRAY
21610: PUSH
21611: LD_INT 3
21613: ARRAY
21614: PPUSH
21615: LD_EXP 83
21619: PUSH
21620: LD_VAR 0 2
21624: ARRAY
21625: PUSH
21626: LD_INT 4
21628: ARRAY
21629: PPUSH
21630: CALL_OW 171
// end ; end ;
21634: LD_VAR 0 3
21638: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21639: LD_INT 0
21641: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21642: LD_VAR 0 1
21646: PUSH
21647: LD_INT 250
21649: EQUAL
21650: PUSH
21651: LD_VAR 0 2
21655: PPUSH
21656: CALL_OW 264
21660: PUSH
21661: LD_INT 81
21663: EQUAL
21664: AND
21665: IFFALSE 21686
// MinerPlaceMine ( unit , x , y ) ;
21667: LD_VAR 0 2
21671: PPUSH
21672: LD_VAR 0 4
21676: PPUSH
21677: LD_VAR 0 5
21681: PPUSH
21682: CALL 24676 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21686: LD_VAR 0 1
21690: PUSH
21691: LD_INT 251
21693: EQUAL
21694: PUSH
21695: LD_VAR 0 2
21699: PPUSH
21700: CALL_OW 264
21704: PUSH
21705: LD_INT 81
21707: EQUAL
21708: AND
21709: IFFALSE 21730
// MinerDetonateMine ( unit , x , y ) ;
21711: LD_VAR 0 2
21715: PPUSH
21716: LD_VAR 0 4
21720: PPUSH
21721: LD_VAR 0 5
21725: PPUSH
21726: CALL 24951 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21730: LD_VAR 0 1
21734: PUSH
21735: LD_INT 252
21737: EQUAL
21738: PUSH
21739: LD_VAR 0 2
21743: PPUSH
21744: CALL_OW 264
21748: PUSH
21749: LD_INT 81
21751: EQUAL
21752: AND
21753: IFFALSE 21774
// MinerCreateMinefield ( unit , x , y ) ;
21755: LD_VAR 0 2
21759: PPUSH
21760: LD_VAR 0 4
21764: PPUSH
21765: LD_VAR 0 5
21769: PPUSH
21770: CALL 25368 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21774: LD_VAR 0 1
21778: PUSH
21779: LD_INT 253
21781: EQUAL
21782: PUSH
21783: LD_VAR 0 2
21787: PPUSH
21788: CALL_OW 257
21792: PUSH
21793: LD_INT 5
21795: EQUAL
21796: AND
21797: IFFALSE 21818
// ComBinocular ( unit , x , y ) ;
21799: LD_VAR 0 2
21803: PPUSH
21804: LD_VAR 0 4
21808: PPUSH
21809: LD_VAR 0 5
21813: PPUSH
21814: CALL 25737 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21818: LD_VAR 0 1
21822: PUSH
21823: LD_INT 254
21825: EQUAL
21826: PUSH
21827: LD_VAR 0 2
21831: PPUSH
21832: CALL_OW 264
21836: PUSH
21837: LD_INT 99
21839: EQUAL
21840: AND
21841: PUSH
21842: LD_VAR 0 3
21846: PPUSH
21847: CALL_OW 263
21851: PUSH
21852: LD_INT 3
21854: EQUAL
21855: AND
21856: IFFALSE 21872
// HackDestroyVehicle ( unit , selectedUnit ) ;
21858: LD_VAR 0 2
21862: PPUSH
21863: LD_VAR 0 3
21867: PPUSH
21868: CALL 24040 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21872: LD_VAR 0 1
21876: PUSH
21877: LD_INT 255
21879: EQUAL
21880: PUSH
21881: LD_VAR 0 2
21885: PPUSH
21886: CALL_OW 264
21890: PUSH
21891: LD_INT 14
21893: PUSH
21894: LD_INT 53
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: IN
21901: AND
21902: PUSH
21903: LD_VAR 0 4
21907: PPUSH
21908: LD_VAR 0 5
21912: PPUSH
21913: CALL_OW 488
21917: AND
21918: IFFALSE 21942
// CutTreeXYR ( unit , x , y , 12 ) ;
21920: LD_VAR 0 2
21924: PPUSH
21925: LD_VAR 0 4
21929: PPUSH
21930: LD_VAR 0 5
21934: PPUSH
21935: LD_INT 12
21937: PPUSH
21938: CALL 22037 0 4
// if cmd = 256 then
21942: LD_VAR 0 1
21946: PUSH
21947: LD_INT 256
21949: EQUAL
21950: IFFALSE 21971
// SetFactoryWaypoint ( unit , x , y ) ;
21952: LD_VAR 0 2
21956: PPUSH
21957: LD_VAR 0 4
21961: PPUSH
21962: LD_VAR 0 5
21966: PPUSH
21967: CALL 19952 0 3
// if cmd = 257 then
21971: LD_VAR 0 1
21975: PUSH
21976: LD_INT 257
21978: EQUAL
21979: IFFALSE 22000
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21981: LD_VAR 0 2
21985: PPUSH
21986: LD_VAR 0 4
21990: PPUSH
21991: LD_VAR 0 5
21995: PPUSH
21996: CALL 20314 0 3
// if cmd = 258 then
22000: LD_VAR 0 1
22004: PUSH
22005: LD_INT 258
22007: EQUAL
22008: IFFALSE 22032
// BurnTreeXYR ( unit , x , y , 8 ) ;
22010: LD_VAR 0 2
22014: PPUSH
22015: LD_VAR 0 4
22019: PPUSH
22020: LD_VAR 0 5
22024: PPUSH
22025: LD_INT 8
22027: PPUSH
22028: CALL 22431 0 4
// end ;
22032: LD_VAR 0 6
22036: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22037: LD_INT 0
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22048: LD_VAR 0 1
22052: PPUSH
22053: CALL_OW 302
22057: NOT
22058: PUSH
22059: LD_VAR 0 2
22063: PPUSH
22064: LD_VAR 0 3
22068: PPUSH
22069: CALL_OW 488
22073: NOT
22074: OR
22075: PUSH
22076: LD_VAR 0 4
22080: NOT
22081: OR
22082: IFFALSE 22086
// exit ;
22084: GO 22426
// list := [ ] ;
22086: LD_ADDR_VAR 0 13
22090: PUSH
22091: EMPTY
22092: ST_TO_ADDR
// if x - r < 0 then
22093: LD_VAR 0 2
22097: PUSH
22098: LD_VAR 0 4
22102: MINUS
22103: PUSH
22104: LD_INT 0
22106: LESS
22107: IFFALSE 22119
// min_x := 0 else
22109: LD_ADDR_VAR 0 7
22113: PUSH
22114: LD_INT 0
22116: ST_TO_ADDR
22117: GO 22135
// min_x := x - r ;
22119: LD_ADDR_VAR 0 7
22123: PUSH
22124: LD_VAR 0 2
22128: PUSH
22129: LD_VAR 0 4
22133: MINUS
22134: ST_TO_ADDR
// if y - r < 0 then
22135: LD_VAR 0 3
22139: PUSH
22140: LD_VAR 0 4
22144: MINUS
22145: PUSH
22146: LD_INT 0
22148: LESS
22149: IFFALSE 22161
// min_y := 0 else
22151: LD_ADDR_VAR 0 8
22155: PUSH
22156: LD_INT 0
22158: ST_TO_ADDR
22159: GO 22177
// min_y := y - r ;
22161: LD_ADDR_VAR 0 8
22165: PUSH
22166: LD_VAR 0 3
22170: PUSH
22171: LD_VAR 0 4
22175: MINUS
22176: ST_TO_ADDR
// max_x := x + r ;
22177: LD_ADDR_VAR 0 9
22181: PUSH
22182: LD_VAR 0 2
22186: PUSH
22187: LD_VAR 0 4
22191: PLUS
22192: ST_TO_ADDR
// max_y := y + r ;
22193: LD_ADDR_VAR 0 10
22197: PUSH
22198: LD_VAR 0 3
22202: PUSH
22203: LD_VAR 0 4
22207: PLUS
22208: ST_TO_ADDR
// for _x = min_x to max_x do
22209: LD_ADDR_VAR 0 11
22213: PUSH
22214: DOUBLE
22215: LD_VAR 0 7
22219: DEC
22220: ST_TO_ADDR
22221: LD_VAR 0 9
22225: PUSH
22226: FOR_TO
22227: IFFALSE 22344
// for _y = min_y to max_y do
22229: LD_ADDR_VAR 0 12
22233: PUSH
22234: DOUBLE
22235: LD_VAR 0 8
22239: DEC
22240: ST_TO_ADDR
22241: LD_VAR 0 10
22245: PUSH
22246: FOR_TO
22247: IFFALSE 22340
// begin if not ValidHex ( _x , _y ) then
22249: LD_VAR 0 11
22253: PPUSH
22254: LD_VAR 0 12
22258: PPUSH
22259: CALL_OW 488
22263: NOT
22264: IFFALSE 22268
// continue ;
22266: GO 22246
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22268: LD_VAR 0 11
22272: PPUSH
22273: LD_VAR 0 12
22277: PPUSH
22278: CALL_OW 351
22282: PUSH
22283: LD_VAR 0 11
22287: PPUSH
22288: LD_VAR 0 12
22292: PPUSH
22293: CALL_OW 554
22297: AND
22298: IFFALSE 22338
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22300: LD_ADDR_VAR 0 13
22304: PUSH
22305: LD_VAR 0 13
22309: PPUSH
22310: LD_VAR 0 13
22314: PUSH
22315: LD_INT 1
22317: PLUS
22318: PPUSH
22319: LD_VAR 0 11
22323: PUSH
22324: LD_VAR 0 12
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PPUSH
22333: CALL_OW 2
22337: ST_TO_ADDR
// end ;
22338: GO 22246
22340: POP
22341: POP
22342: GO 22226
22344: POP
22345: POP
// if not list then
22346: LD_VAR 0 13
22350: NOT
22351: IFFALSE 22355
// exit ;
22353: GO 22426
// for i in list do
22355: LD_ADDR_VAR 0 6
22359: PUSH
22360: LD_VAR 0 13
22364: PUSH
22365: FOR_IN
22366: IFFALSE 22424
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22368: LD_VAR 0 1
22372: PPUSH
22373: LD_STRING M
22375: PUSH
22376: LD_VAR 0 6
22380: PUSH
22381: LD_INT 1
22383: ARRAY
22384: PUSH
22385: LD_VAR 0 6
22389: PUSH
22390: LD_INT 2
22392: ARRAY
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: LD_INT 0
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: PPUSH
22418: CALL_OW 447
22422: GO 22365
22424: POP
22425: POP
// end ;
22426: LD_VAR 0 5
22430: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22431: LD_INT 0
22433: PPUSH
22434: PPUSH
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22443: LD_VAR 0 1
22447: PPUSH
22448: CALL_OW 302
22452: NOT
22453: PUSH
22454: LD_VAR 0 2
22458: PPUSH
22459: LD_VAR 0 3
22463: PPUSH
22464: CALL_OW 488
22468: NOT
22469: OR
22470: PUSH
22471: LD_VAR 0 4
22475: NOT
22476: OR
22477: IFFALSE 22481
// exit ;
22479: GO 22994
// list := [ ] ;
22481: LD_ADDR_VAR 0 13
22485: PUSH
22486: EMPTY
22487: ST_TO_ADDR
// if x - r < 0 then
22488: LD_VAR 0 2
22492: PUSH
22493: LD_VAR 0 4
22497: MINUS
22498: PUSH
22499: LD_INT 0
22501: LESS
22502: IFFALSE 22514
// min_x := 0 else
22504: LD_ADDR_VAR 0 7
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
22512: GO 22530
// min_x := x - r ;
22514: LD_ADDR_VAR 0 7
22518: PUSH
22519: LD_VAR 0 2
22523: PUSH
22524: LD_VAR 0 4
22528: MINUS
22529: ST_TO_ADDR
// if y - r < 0 then
22530: LD_VAR 0 3
22534: PUSH
22535: LD_VAR 0 4
22539: MINUS
22540: PUSH
22541: LD_INT 0
22543: LESS
22544: IFFALSE 22556
// min_y := 0 else
22546: LD_ADDR_VAR 0 8
22550: PUSH
22551: LD_INT 0
22553: ST_TO_ADDR
22554: GO 22572
// min_y := y - r ;
22556: LD_ADDR_VAR 0 8
22560: PUSH
22561: LD_VAR 0 3
22565: PUSH
22566: LD_VAR 0 4
22570: MINUS
22571: ST_TO_ADDR
// max_x := x + r ;
22572: LD_ADDR_VAR 0 9
22576: PUSH
22577: LD_VAR 0 2
22581: PUSH
22582: LD_VAR 0 4
22586: PLUS
22587: ST_TO_ADDR
// max_y := y + r ;
22588: LD_ADDR_VAR 0 10
22592: PUSH
22593: LD_VAR 0 3
22597: PUSH
22598: LD_VAR 0 4
22602: PLUS
22603: ST_TO_ADDR
// for _x = min_x to max_x do
22604: LD_ADDR_VAR 0 11
22608: PUSH
22609: DOUBLE
22610: LD_VAR 0 7
22614: DEC
22615: ST_TO_ADDR
22616: LD_VAR 0 9
22620: PUSH
22621: FOR_TO
22622: IFFALSE 22739
// for _y = min_y to max_y do
22624: LD_ADDR_VAR 0 12
22628: PUSH
22629: DOUBLE
22630: LD_VAR 0 8
22634: DEC
22635: ST_TO_ADDR
22636: LD_VAR 0 10
22640: PUSH
22641: FOR_TO
22642: IFFALSE 22735
// begin if not ValidHex ( _x , _y ) then
22644: LD_VAR 0 11
22648: PPUSH
22649: LD_VAR 0 12
22653: PPUSH
22654: CALL_OW 488
22658: NOT
22659: IFFALSE 22663
// continue ;
22661: GO 22641
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22663: LD_VAR 0 11
22667: PPUSH
22668: LD_VAR 0 12
22672: PPUSH
22673: CALL_OW 351
22677: PUSH
22678: LD_VAR 0 11
22682: PPUSH
22683: LD_VAR 0 12
22687: PPUSH
22688: CALL_OW 554
22692: AND
22693: IFFALSE 22733
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22695: LD_ADDR_VAR 0 13
22699: PUSH
22700: LD_VAR 0 13
22704: PPUSH
22705: LD_VAR 0 13
22709: PUSH
22710: LD_INT 1
22712: PLUS
22713: PPUSH
22714: LD_VAR 0 11
22718: PUSH
22719: LD_VAR 0 12
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PPUSH
22728: CALL_OW 2
22732: ST_TO_ADDR
// end ;
22733: GO 22641
22735: POP
22736: POP
22737: GO 22621
22739: POP
22740: POP
// if not list then
22741: LD_VAR 0 13
22745: NOT
22746: IFFALSE 22750
// exit ;
22748: GO 22994
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22750: LD_ADDR_VAR 0 13
22754: PUSH
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_VAR 0 13
22764: PPUSH
22765: LD_INT 1
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL 31829 0 4
22775: ST_TO_ADDR
// ComStop ( flame ) ;
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 141
// for i in list do
22785: LD_ADDR_VAR 0 6
22789: PUSH
22790: LD_VAR 0 13
22794: PUSH
22795: FOR_IN
22796: IFFALSE 22827
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22798: LD_VAR 0 1
22802: PPUSH
22803: LD_VAR 0 6
22807: PUSH
22808: LD_INT 1
22810: ARRAY
22811: PPUSH
22812: LD_VAR 0 6
22816: PUSH
22817: LD_INT 2
22819: ARRAY
22820: PPUSH
22821: CALL_OW 176
22825: GO 22795
22827: POP
22828: POP
// repeat wait ( 0 0$1 ) ;
22829: LD_INT 35
22831: PPUSH
22832: CALL_OW 67
// task := GetTaskList ( flame ) ;
22836: LD_ADDR_VAR 0 14
22840: PUSH
22841: LD_VAR 0 1
22845: PPUSH
22846: CALL_OW 437
22850: ST_TO_ADDR
// if not task then
22851: LD_VAR 0 14
22855: NOT
22856: IFFALSE 22860
// exit ;
22858: GO 22994
// if task [ 1 ] [ 1 ] <> | then
22860: LD_VAR 0 14
22864: PUSH
22865: LD_INT 1
22867: ARRAY
22868: PUSH
22869: LD_INT 1
22871: ARRAY
22872: PUSH
22873: LD_STRING |
22875: NONEQUAL
22876: IFFALSE 22880
// exit ;
22878: GO 22994
// _x := task [ 1 ] [ 2 ] ;
22880: LD_ADDR_VAR 0 11
22884: PUSH
22885: LD_VAR 0 14
22889: PUSH
22890: LD_INT 1
22892: ARRAY
22893: PUSH
22894: LD_INT 2
22896: ARRAY
22897: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22898: LD_ADDR_VAR 0 12
22902: PUSH
22903: LD_VAR 0 14
22907: PUSH
22908: LD_INT 1
22910: ARRAY
22911: PUSH
22912: LD_INT 3
22914: ARRAY
22915: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22916: LD_VAR 0 11
22920: PPUSH
22921: LD_VAR 0 12
22925: PPUSH
22926: CALL_OW 351
22930: NOT
22931: PUSH
22932: LD_VAR 0 11
22936: PPUSH
22937: LD_VAR 0 12
22941: PPUSH
22942: CALL_OW 554
22946: NOT
22947: OR
22948: IFFALSE 22982
// begin task := Delete ( task , 1 ) ;
22950: LD_ADDR_VAR 0 14
22954: PUSH
22955: LD_VAR 0 14
22959: PPUSH
22960: LD_INT 1
22962: PPUSH
22963: CALL_OW 3
22967: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22968: LD_VAR 0 1
22972: PPUSH
22973: LD_VAR 0 14
22977: PPUSH
22978: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 314
22991: NOT
22992: IFFALSE 22829
// end ;
22994: LD_VAR 0 5
22998: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22999: LD_EXP 86
23003: NOT
23004: IFFALSE 23054
23006: GO 23008
23008: DISABLE
// begin initHack := true ;
23009: LD_ADDR_EXP 86
23013: PUSH
23014: LD_INT 1
23016: ST_TO_ADDR
// hackTanks := [ ] ;
23017: LD_ADDR_EXP 87
23021: PUSH
23022: EMPTY
23023: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23024: LD_ADDR_EXP 88
23028: PUSH
23029: EMPTY
23030: ST_TO_ADDR
// hackLimit := 3 ;
23031: LD_ADDR_EXP 89
23035: PUSH
23036: LD_INT 3
23038: ST_TO_ADDR
// hackDist := 12 ;
23039: LD_ADDR_EXP 90
23043: PUSH
23044: LD_INT 12
23046: ST_TO_ADDR
// hackCounter := [ ] ;
23047: LD_ADDR_EXP 91
23051: PUSH
23052: EMPTY
23053: ST_TO_ADDR
// end ;
23054: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23055: LD_EXP 86
23059: PUSH
23060: LD_INT 34
23062: PUSH
23063: LD_INT 99
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PPUSH
23070: CALL_OW 69
23074: AND
23075: IFFALSE 23328
23077: GO 23079
23079: DISABLE
23080: LD_INT 0
23082: PPUSH
23083: PPUSH
// begin enable ;
23084: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23085: LD_ADDR_VAR 0 1
23089: PUSH
23090: LD_INT 34
23092: PUSH
23093: LD_INT 99
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PPUSH
23100: CALL_OW 69
23104: PUSH
23105: FOR_IN
23106: IFFALSE 23326
// begin if not i in hackTanks then
23108: LD_VAR 0 1
23112: PUSH
23113: LD_EXP 87
23117: IN
23118: NOT
23119: IFFALSE 23202
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23121: LD_ADDR_EXP 87
23125: PUSH
23126: LD_EXP 87
23130: PPUSH
23131: LD_EXP 87
23135: PUSH
23136: LD_INT 1
23138: PLUS
23139: PPUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 1
23149: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23150: LD_ADDR_EXP 88
23154: PUSH
23155: LD_EXP 88
23159: PPUSH
23160: LD_EXP 88
23164: PUSH
23165: LD_INT 1
23167: PLUS
23168: PPUSH
23169: EMPTY
23170: PPUSH
23171: CALL_OW 1
23175: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23176: LD_ADDR_EXP 91
23180: PUSH
23181: LD_EXP 91
23185: PPUSH
23186: LD_EXP 91
23190: PUSH
23191: LD_INT 1
23193: PLUS
23194: PPUSH
23195: EMPTY
23196: PPUSH
23197: CALL_OW 1
23201: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23202: LD_VAR 0 1
23206: PPUSH
23207: CALL_OW 302
23211: NOT
23212: IFFALSE 23225
// begin HackUnlinkAll ( i ) ;
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL 23331 0 1
// continue ;
23223: GO 23105
// end ; HackCheckCapturedStatus ( i ) ;
23225: LD_VAR 0 1
23229: PPUSH
23230: CALL 23774 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23234: LD_ADDR_VAR 0 2
23238: PUSH
23239: LD_INT 81
23241: PUSH
23242: LD_VAR 0 1
23246: PPUSH
23247: CALL_OW 255
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 33
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 91
23268: PUSH
23269: LD_VAR 0 1
23273: PUSH
23274: LD_EXP 90
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 50
23286: PUSH
23287: EMPTY
23288: LIST
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: PPUSH
23296: CALL_OW 69
23300: ST_TO_ADDR
// if not tmp then
23301: LD_VAR 0 2
23305: NOT
23306: IFFALSE 23310
// continue ;
23308: GO 23105
// HackLink ( i , tmp ) ;
23310: LD_VAR 0 1
23314: PPUSH
23315: LD_VAR 0 2
23319: PPUSH
23320: CALL 23467 0 2
// end ;
23324: GO 23105
23326: POP
23327: POP
// end ;
23328: PPOPN 2
23330: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23331: LD_INT 0
23333: PPUSH
23334: PPUSH
23335: PPUSH
// if not hack in hackTanks then
23336: LD_VAR 0 1
23340: PUSH
23341: LD_EXP 87
23345: IN
23346: NOT
23347: IFFALSE 23351
// exit ;
23349: GO 23462
// index := GetElementIndex ( hackTanks , hack ) ;
23351: LD_ADDR_VAR 0 4
23355: PUSH
23356: LD_EXP 87
23360: PPUSH
23361: LD_VAR 0 1
23365: PPUSH
23366: CALL 31126 0 2
23370: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23371: LD_EXP 88
23375: PUSH
23376: LD_VAR 0 4
23380: ARRAY
23381: IFFALSE 23462
// begin for i in hackTanksCaptured [ index ] do
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: LD_EXP 88
23392: PUSH
23393: LD_VAR 0 4
23397: ARRAY
23398: PUSH
23399: FOR_IN
23400: IFFALSE 23426
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23402: LD_VAR 0 3
23406: PUSH
23407: LD_INT 1
23409: ARRAY
23410: PPUSH
23411: LD_VAR 0 3
23415: PUSH
23416: LD_INT 2
23418: ARRAY
23419: PPUSH
23420: CALL_OW 235
23424: GO 23399
23426: POP
23427: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23428: LD_ADDR_EXP 88
23432: PUSH
23433: LD_EXP 88
23437: PPUSH
23438: LD_VAR 0 4
23442: PPUSH
23443: EMPTY
23444: PPUSH
23445: CALL_OW 1
23449: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23450: LD_VAR 0 1
23454: PPUSH
23455: LD_INT 0
23457: PPUSH
23458: CALL_OW 505
// end ; end ;
23462: LD_VAR 0 2
23466: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23467: LD_INT 0
23469: PPUSH
23470: PPUSH
23471: PPUSH
// if not hack in hackTanks or not vehicles then
23472: LD_VAR 0 1
23476: PUSH
23477: LD_EXP 87
23481: IN
23482: NOT
23483: PUSH
23484: LD_VAR 0 2
23488: NOT
23489: OR
23490: IFFALSE 23494
// exit ;
23492: GO 23769
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23494: LD_ADDR_VAR 0 2
23498: PUSH
23499: LD_VAR 0 1
23503: PPUSH
23504: LD_VAR 0 2
23508: PPUSH
23509: LD_INT 1
23511: PPUSH
23512: LD_INT 1
23514: PPUSH
23515: CALL 31776 0 4
23519: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23520: LD_ADDR_VAR 0 5
23524: PUSH
23525: LD_EXP 87
23529: PPUSH
23530: LD_VAR 0 1
23534: PPUSH
23535: CALL 31126 0 2
23539: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23540: LD_EXP 88
23544: PUSH
23545: LD_VAR 0 5
23549: ARRAY
23550: PUSH
23551: LD_EXP 89
23555: LESS
23556: IFFALSE 23745
// begin for i := 1 to vehicles do
23558: LD_ADDR_VAR 0 4
23562: PUSH
23563: DOUBLE
23564: LD_INT 1
23566: DEC
23567: ST_TO_ADDR
23568: LD_VAR 0 2
23572: PUSH
23573: FOR_TO
23574: IFFALSE 23743
// begin if hackTanksCaptured [ index ] = hackLimit then
23576: LD_EXP 88
23580: PUSH
23581: LD_VAR 0 5
23585: ARRAY
23586: PUSH
23587: LD_EXP 89
23591: EQUAL
23592: IFFALSE 23596
// break ;
23594: GO 23743
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23596: LD_ADDR_EXP 91
23600: PUSH
23601: LD_EXP 91
23605: PPUSH
23606: LD_VAR 0 5
23610: PPUSH
23611: LD_EXP 91
23615: PUSH
23616: LD_VAR 0 5
23620: ARRAY
23621: PUSH
23622: LD_INT 1
23624: PLUS
23625: PPUSH
23626: CALL_OW 1
23630: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23631: LD_ADDR_EXP 88
23635: PUSH
23636: LD_EXP 88
23640: PPUSH
23641: LD_VAR 0 5
23645: PUSH
23646: LD_EXP 88
23650: PUSH
23651: LD_VAR 0 5
23655: ARRAY
23656: PUSH
23657: LD_INT 1
23659: PLUS
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PPUSH
23665: LD_VAR 0 2
23669: PUSH
23670: LD_VAR 0 4
23674: ARRAY
23675: PUSH
23676: LD_VAR 0 2
23680: PUSH
23681: LD_VAR 0 4
23685: ARRAY
23686: PPUSH
23687: CALL_OW 255
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PPUSH
23696: CALL 31341 0 3
23700: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23701: LD_VAR 0 2
23705: PUSH
23706: LD_VAR 0 4
23710: ARRAY
23711: PPUSH
23712: LD_VAR 0 1
23716: PPUSH
23717: CALL_OW 255
23721: PPUSH
23722: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23726: LD_VAR 0 2
23730: PUSH
23731: LD_VAR 0 4
23735: ARRAY
23736: PPUSH
23737: CALL_OW 141
// end ;
23741: GO 23573
23743: POP
23744: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23745: LD_VAR 0 1
23749: PPUSH
23750: LD_EXP 88
23754: PUSH
23755: LD_VAR 0 5
23759: ARRAY
23760: PUSH
23761: LD_INT 0
23763: PLUS
23764: PPUSH
23765: CALL_OW 505
// end ;
23769: LD_VAR 0 3
23773: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23774: LD_INT 0
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
// if not hack in hackTanks then
23780: LD_VAR 0 1
23784: PUSH
23785: LD_EXP 87
23789: IN
23790: NOT
23791: IFFALSE 23795
// exit ;
23793: GO 24035
// index := GetElementIndex ( hackTanks , hack ) ;
23795: LD_ADDR_VAR 0 4
23799: PUSH
23800: LD_EXP 87
23804: PPUSH
23805: LD_VAR 0 1
23809: PPUSH
23810: CALL 31126 0 2
23814: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23815: LD_ADDR_VAR 0 3
23819: PUSH
23820: DOUBLE
23821: LD_EXP 88
23825: PUSH
23826: LD_VAR 0 4
23830: ARRAY
23831: INC
23832: ST_TO_ADDR
23833: LD_INT 1
23835: PUSH
23836: FOR_DOWNTO
23837: IFFALSE 24009
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23839: LD_ADDR_VAR 0 5
23843: PUSH
23844: LD_EXP 88
23848: PUSH
23849: LD_VAR 0 4
23853: ARRAY
23854: PUSH
23855: LD_VAR 0 3
23859: ARRAY
23860: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23861: LD_VAR 0 5
23865: PUSH
23866: LD_INT 1
23868: ARRAY
23869: PPUSH
23870: CALL_OW 302
23874: NOT
23875: PUSH
23876: LD_VAR 0 5
23880: PUSH
23881: LD_INT 1
23883: ARRAY
23884: PPUSH
23885: CALL_OW 255
23889: PUSH
23890: LD_VAR 0 1
23894: PPUSH
23895: CALL_OW 255
23899: NONEQUAL
23900: OR
23901: IFFALSE 24007
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23903: LD_VAR 0 5
23907: PUSH
23908: LD_INT 1
23910: ARRAY
23911: PPUSH
23912: CALL_OW 305
23916: PUSH
23917: LD_VAR 0 5
23921: PUSH
23922: LD_INT 1
23924: ARRAY
23925: PPUSH
23926: CALL_OW 255
23930: PUSH
23931: LD_VAR 0 1
23935: PPUSH
23936: CALL_OW 255
23940: EQUAL
23941: AND
23942: IFFALSE 23966
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23944: LD_VAR 0 5
23948: PUSH
23949: LD_INT 1
23951: ARRAY
23952: PPUSH
23953: LD_VAR 0 5
23957: PUSH
23958: LD_INT 2
23960: ARRAY
23961: PPUSH
23962: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23966: LD_ADDR_EXP 88
23970: PUSH
23971: LD_EXP 88
23975: PPUSH
23976: LD_VAR 0 4
23980: PPUSH
23981: LD_EXP 88
23985: PUSH
23986: LD_VAR 0 4
23990: ARRAY
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: CALL_OW 3
24001: PPUSH
24002: CALL_OW 1
24006: ST_TO_ADDR
// end ; end ;
24007: GO 23836
24009: POP
24010: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24011: LD_VAR 0 1
24015: PPUSH
24016: LD_EXP 88
24020: PUSH
24021: LD_VAR 0 4
24025: ARRAY
24026: PUSH
24027: LD_INT 0
24029: PLUS
24030: PPUSH
24031: CALL_OW 505
// end ;
24035: LD_VAR 0 2
24039: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24040: LD_INT 0
24042: PPUSH
24043: PPUSH
24044: PPUSH
24045: PPUSH
// if not hack in hackTanks then
24046: LD_VAR 0 1
24050: PUSH
24051: LD_EXP 87
24055: IN
24056: NOT
24057: IFFALSE 24061
// exit ;
24059: GO 24146
// index := GetElementIndex ( hackTanks , hack ) ;
24061: LD_ADDR_VAR 0 5
24065: PUSH
24066: LD_EXP 87
24070: PPUSH
24071: LD_VAR 0 1
24075: PPUSH
24076: CALL 31126 0 2
24080: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24081: LD_ADDR_VAR 0 4
24085: PUSH
24086: DOUBLE
24087: LD_INT 1
24089: DEC
24090: ST_TO_ADDR
24091: LD_EXP 88
24095: PUSH
24096: LD_VAR 0 5
24100: ARRAY
24101: PUSH
24102: FOR_TO
24103: IFFALSE 24144
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24105: LD_EXP 88
24109: PUSH
24110: LD_VAR 0 5
24114: ARRAY
24115: PUSH
24116: LD_VAR 0 4
24120: ARRAY
24121: PUSH
24122: LD_INT 1
24124: ARRAY
24125: PUSH
24126: LD_VAR 0 2
24130: EQUAL
24131: IFFALSE 24142
// KillUnit ( vehicle ) ;
24133: LD_VAR 0 2
24137: PPUSH
24138: CALL_OW 66
24142: GO 24102
24144: POP
24145: POP
// end ;
24146: LD_VAR 0 3
24150: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24151: LD_EXP 92
24155: NOT
24156: IFFALSE 24191
24158: GO 24160
24160: DISABLE
// begin initMiner := true ;
24161: LD_ADDR_EXP 92
24165: PUSH
24166: LD_INT 1
24168: ST_TO_ADDR
// minersList := [ ] ;
24169: LD_ADDR_EXP 93
24173: PUSH
24174: EMPTY
24175: ST_TO_ADDR
// minerMinesList := [ ] ;
24176: LD_ADDR_EXP 94
24180: PUSH
24181: EMPTY
24182: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24183: LD_ADDR_EXP 95
24187: PUSH
24188: LD_INT 5
24190: ST_TO_ADDR
// end ;
24191: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24192: LD_EXP 92
24196: PUSH
24197: LD_INT 34
24199: PUSH
24200: LD_INT 81
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PPUSH
24207: CALL_OW 69
24211: AND
24212: IFFALSE 24673
24214: GO 24216
24216: DISABLE
24217: LD_INT 0
24219: PPUSH
24220: PPUSH
24221: PPUSH
24222: PPUSH
// begin enable ;
24223: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24224: LD_ADDR_VAR 0 1
24228: PUSH
24229: LD_INT 34
24231: PUSH
24232: LD_INT 81
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PPUSH
24239: CALL_OW 69
24243: PUSH
24244: FOR_IN
24245: IFFALSE 24317
// begin if not i in minersList then
24247: LD_VAR 0 1
24251: PUSH
24252: LD_EXP 93
24256: IN
24257: NOT
24258: IFFALSE 24315
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24260: LD_ADDR_EXP 93
24264: PUSH
24265: LD_EXP 93
24269: PPUSH
24270: LD_EXP 93
24274: PUSH
24275: LD_INT 1
24277: PLUS
24278: PPUSH
24279: LD_VAR 0 1
24283: PPUSH
24284: CALL_OW 1
24288: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24289: LD_ADDR_EXP 94
24293: PUSH
24294: LD_EXP 94
24298: PPUSH
24299: LD_EXP 94
24303: PUSH
24304: LD_INT 1
24306: PLUS
24307: PPUSH
24308: EMPTY
24309: PPUSH
24310: CALL_OW 1
24314: ST_TO_ADDR
// end end ;
24315: GO 24244
24317: POP
24318: POP
// for i := minerMinesList downto 1 do
24319: LD_ADDR_VAR 0 1
24323: PUSH
24324: DOUBLE
24325: LD_EXP 94
24329: INC
24330: ST_TO_ADDR
24331: LD_INT 1
24333: PUSH
24334: FOR_DOWNTO
24335: IFFALSE 24671
// begin if IsLive ( minersList [ i ] ) then
24337: LD_EXP 93
24341: PUSH
24342: LD_VAR 0 1
24346: ARRAY
24347: PPUSH
24348: CALL_OW 300
24352: IFFALSE 24380
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24354: LD_EXP 93
24358: PUSH
24359: LD_VAR 0 1
24363: ARRAY
24364: PPUSH
24365: LD_EXP 94
24369: PUSH
24370: LD_VAR 0 1
24374: ARRAY
24375: PPUSH
24376: CALL_OW 505
// if not minerMinesList [ i ] then
24380: LD_EXP 94
24384: PUSH
24385: LD_VAR 0 1
24389: ARRAY
24390: NOT
24391: IFFALSE 24395
// continue ;
24393: GO 24334
// for j := minerMinesList [ i ] downto 1 do
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: DOUBLE
24401: LD_EXP 94
24405: PUSH
24406: LD_VAR 0 1
24410: ARRAY
24411: INC
24412: ST_TO_ADDR
24413: LD_INT 1
24415: PUSH
24416: FOR_DOWNTO
24417: IFFALSE 24667
// begin side := GetSide ( minersList [ i ] ) ;
24419: LD_ADDR_VAR 0 3
24423: PUSH
24424: LD_EXP 93
24428: PUSH
24429: LD_VAR 0 1
24433: ARRAY
24434: PPUSH
24435: CALL_OW 255
24439: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24440: LD_ADDR_VAR 0 4
24444: PUSH
24445: LD_EXP 94
24449: PUSH
24450: LD_VAR 0 1
24454: ARRAY
24455: PUSH
24456: LD_VAR 0 2
24460: ARRAY
24461: PUSH
24462: LD_INT 1
24464: ARRAY
24465: PPUSH
24466: LD_EXP 94
24470: PUSH
24471: LD_VAR 0 1
24475: ARRAY
24476: PUSH
24477: LD_VAR 0 2
24481: ARRAY
24482: PUSH
24483: LD_INT 2
24485: ARRAY
24486: PPUSH
24487: CALL_OW 428
24491: ST_TO_ADDR
// if not tmp then
24492: LD_VAR 0 4
24496: NOT
24497: IFFALSE 24501
// continue ;
24499: GO 24416
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24501: LD_VAR 0 4
24505: PUSH
24506: LD_INT 81
24508: PUSH
24509: LD_VAR 0 3
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PPUSH
24518: CALL_OW 69
24522: IN
24523: PUSH
24524: LD_EXP 94
24528: PUSH
24529: LD_VAR 0 1
24533: ARRAY
24534: PUSH
24535: LD_VAR 0 2
24539: ARRAY
24540: PUSH
24541: LD_INT 1
24543: ARRAY
24544: PPUSH
24545: LD_EXP 94
24549: PUSH
24550: LD_VAR 0 1
24554: ARRAY
24555: PUSH
24556: LD_VAR 0 2
24560: ARRAY
24561: PUSH
24562: LD_INT 2
24564: ARRAY
24565: PPUSH
24566: CALL_OW 458
24570: AND
24571: IFFALSE 24665
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24573: LD_EXP 94
24577: PUSH
24578: LD_VAR 0 1
24582: ARRAY
24583: PUSH
24584: LD_VAR 0 2
24588: ARRAY
24589: PUSH
24590: LD_INT 1
24592: ARRAY
24593: PPUSH
24594: LD_EXP 94
24598: PUSH
24599: LD_VAR 0 1
24603: ARRAY
24604: PUSH
24605: LD_VAR 0 2
24609: ARRAY
24610: PUSH
24611: LD_INT 2
24613: ARRAY
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24624: LD_ADDR_EXP 94
24628: PUSH
24629: LD_EXP 94
24633: PPUSH
24634: LD_VAR 0 1
24638: PPUSH
24639: LD_EXP 94
24643: PUSH
24644: LD_VAR 0 1
24648: ARRAY
24649: PPUSH
24650: LD_VAR 0 2
24654: PPUSH
24655: CALL_OW 3
24659: PPUSH
24660: CALL_OW 1
24664: ST_TO_ADDR
// end ; end ;
24665: GO 24416
24667: POP
24668: POP
// end ;
24669: GO 24334
24671: POP
24672: POP
// end ;
24673: PPOPN 4
24675: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24676: LD_INT 0
24678: PPUSH
24679: PPUSH
// result := false ;
24680: LD_ADDR_VAR 0 4
24684: PUSH
24685: LD_INT 0
24687: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24688: LD_VAR 0 1
24692: PPUSH
24693: CALL_OW 264
24697: PUSH
24698: LD_INT 81
24700: EQUAL
24701: NOT
24702: IFFALSE 24706
// exit ;
24704: GO 24946
// index := GetElementIndex ( minersList , unit ) ;
24706: LD_ADDR_VAR 0 5
24710: PUSH
24711: LD_EXP 93
24715: PPUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL 31126 0 2
24725: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24726: LD_EXP 94
24730: PUSH
24731: LD_VAR 0 5
24735: ARRAY
24736: PUSH
24737: LD_EXP 95
24741: GREATEREQUAL
24742: IFFALSE 24746
// exit ;
24744: GO 24946
// ComMoveXY ( unit , x , y ) ;
24746: LD_VAR 0 1
24750: PPUSH
24751: LD_VAR 0 2
24755: PPUSH
24756: LD_VAR 0 3
24760: PPUSH
24761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24765: LD_INT 35
24767: PPUSH
24768: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24772: LD_VAR 0 1
24776: PPUSH
24777: LD_VAR 0 2
24781: PPUSH
24782: LD_VAR 0 3
24786: PPUSH
24787: CALL 62867 0 3
24791: NOT
24792: PUSH
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 314
24802: AND
24803: IFFALSE 24807
// exit ;
24805: GO 24946
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24807: LD_VAR 0 2
24811: PPUSH
24812: LD_VAR 0 3
24816: PPUSH
24817: CALL_OW 428
24821: PUSH
24822: LD_VAR 0 1
24826: EQUAL
24827: PUSH
24828: LD_VAR 0 1
24832: PPUSH
24833: CALL_OW 314
24837: NOT
24838: AND
24839: IFFALSE 24765
// PlaySoundXY ( x , y , PlantMine ) ;
24841: LD_VAR 0 2
24845: PPUSH
24846: LD_VAR 0 3
24850: PPUSH
24851: LD_STRING PlantMine
24853: PPUSH
24854: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_VAR 0 3
24867: PPUSH
24868: LD_VAR 0 1
24872: PPUSH
24873: CALL_OW 255
24877: PPUSH
24878: LD_INT 0
24880: PPUSH
24881: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24885: LD_ADDR_EXP 94
24889: PUSH
24890: LD_EXP 94
24894: PPUSH
24895: LD_VAR 0 5
24899: PUSH
24900: LD_EXP 94
24904: PUSH
24905: LD_VAR 0 5
24909: ARRAY
24910: PUSH
24911: LD_INT 1
24913: PLUS
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PPUSH
24919: LD_VAR 0 2
24923: PUSH
24924: LD_VAR 0 3
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL 31341 0 3
24937: ST_TO_ADDR
// result := true ;
24938: LD_ADDR_VAR 0 4
24942: PUSH
24943: LD_INT 1
24945: ST_TO_ADDR
// end ;
24946: LD_VAR 0 4
24950: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24951: LD_INT 0
24953: PPUSH
24954: PPUSH
24955: PPUSH
// if not unit in minersList then
24956: LD_VAR 0 1
24960: PUSH
24961: LD_EXP 93
24965: IN
24966: NOT
24967: IFFALSE 24971
// exit ;
24969: GO 25363
// index := GetElementIndex ( minersList , unit ) ;
24971: LD_ADDR_VAR 0 6
24975: PUSH
24976: LD_EXP 93
24980: PPUSH
24981: LD_VAR 0 1
24985: PPUSH
24986: CALL 31126 0 2
24990: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24991: LD_ADDR_VAR 0 5
24995: PUSH
24996: DOUBLE
24997: LD_EXP 94
25001: PUSH
25002: LD_VAR 0 6
25006: ARRAY
25007: INC
25008: ST_TO_ADDR
25009: LD_INT 1
25011: PUSH
25012: FOR_DOWNTO
25013: IFFALSE 25174
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25015: LD_EXP 94
25019: PUSH
25020: LD_VAR 0 6
25024: ARRAY
25025: PUSH
25026: LD_VAR 0 5
25030: ARRAY
25031: PUSH
25032: LD_INT 1
25034: ARRAY
25035: PUSH
25036: LD_VAR 0 2
25040: EQUAL
25041: PUSH
25042: LD_EXP 94
25046: PUSH
25047: LD_VAR 0 6
25051: ARRAY
25052: PUSH
25053: LD_VAR 0 5
25057: ARRAY
25058: PUSH
25059: LD_INT 2
25061: ARRAY
25062: PUSH
25063: LD_VAR 0 3
25067: EQUAL
25068: AND
25069: IFFALSE 25172
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25071: LD_EXP 94
25075: PUSH
25076: LD_VAR 0 6
25080: ARRAY
25081: PUSH
25082: LD_VAR 0 5
25086: ARRAY
25087: PUSH
25088: LD_INT 1
25090: ARRAY
25091: PPUSH
25092: LD_EXP 94
25096: PUSH
25097: LD_VAR 0 6
25101: ARRAY
25102: PUSH
25103: LD_VAR 0 5
25107: ARRAY
25108: PUSH
25109: LD_INT 2
25111: ARRAY
25112: PPUSH
25113: LD_VAR 0 1
25117: PPUSH
25118: CALL_OW 255
25122: PPUSH
25123: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25127: LD_ADDR_EXP 94
25131: PUSH
25132: LD_EXP 94
25136: PPUSH
25137: LD_VAR 0 6
25141: PPUSH
25142: LD_EXP 94
25146: PUSH
25147: LD_VAR 0 6
25151: ARRAY
25152: PPUSH
25153: LD_VAR 0 5
25157: PPUSH
25158: CALL_OW 3
25162: PPUSH
25163: CALL_OW 1
25167: ST_TO_ADDR
// exit ;
25168: POP
25169: POP
25170: GO 25363
// end ; end ;
25172: GO 25012
25174: POP
25175: POP
// for i := minerMinesList [ index ] downto 1 do
25176: LD_ADDR_VAR 0 5
25180: PUSH
25181: DOUBLE
25182: LD_EXP 94
25186: PUSH
25187: LD_VAR 0 6
25191: ARRAY
25192: INC
25193: ST_TO_ADDR
25194: LD_INT 1
25196: PUSH
25197: FOR_DOWNTO
25198: IFFALSE 25361
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25200: LD_EXP 94
25204: PUSH
25205: LD_VAR 0 6
25209: ARRAY
25210: PUSH
25211: LD_VAR 0 5
25215: ARRAY
25216: PUSH
25217: LD_INT 1
25219: ARRAY
25220: PPUSH
25221: LD_EXP 94
25225: PUSH
25226: LD_VAR 0 6
25230: ARRAY
25231: PUSH
25232: LD_VAR 0 5
25236: ARRAY
25237: PUSH
25238: LD_INT 2
25240: ARRAY
25241: PPUSH
25242: LD_VAR 0 2
25246: PPUSH
25247: LD_VAR 0 3
25251: PPUSH
25252: CALL_OW 298
25256: PUSH
25257: LD_INT 6
25259: LESS
25260: IFFALSE 25359
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25262: LD_EXP 94
25266: PUSH
25267: LD_VAR 0 6
25271: ARRAY
25272: PUSH
25273: LD_VAR 0 5
25277: ARRAY
25278: PUSH
25279: LD_INT 1
25281: ARRAY
25282: PPUSH
25283: LD_EXP 94
25287: PUSH
25288: LD_VAR 0 6
25292: ARRAY
25293: PUSH
25294: LD_VAR 0 5
25298: ARRAY
25299: PUSH
25300: LD_INT 2
25302: ARRAY
25303: PPUSH
25304: LD_VAR 0 1
25308: PPUSH
25309: CALL_OW 255
25313: PPUSH
25314: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25318: LD_ADDR_EXP 94
25322: PUSH
25323: LD_EXP 94
25327: PPUSH
25328: LD_VAR 0 6
25332: PPUSH
25333: LD_EXP 94
25337: PUSH
25338: LD_VAR 0 6
25342: ARRAY
25343: PPUSH
25344: LD_VAR 0 5
25348: PPUSH
25349: CALL_OW 3
25353: PPUSH
25354: CALL_OW 1
25358: ST_TO_ADDR
// end ; end ;
25359: GO 25197
25361: POP
25362: POP
// end ;
25363: LD_VAR 0 4
25367: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25368: LD_INT 0
25370: PPUSH
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL_OW 264
25388: PUSH
25389: LD_INT 81
25391: EQUAL
25392: NOT
25393: PUSH
25394: LD_VAR 0 1
25398: PUSH
25399: LD_EXP 93
25403: IN
25404: NOT
25405: OR
25406: IFFALSE 25410
// exit ;
25408: GO 25732
// index := GetElementIndex ( minersList , unit ) ;
25410: LD_ADDR_VAR 0 6
25414: PUSH
25415: LD_EXP 93
25419: PPUSH
25420: LD_VAR 0 1
25424: PPUSH
25425: CALL 31126 0 2
25429: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25430: LD_ADDR_VAR 0 8
25434: PUSH
25435: LD_EXP 95
25439: PUSH
25440: LD_EXP 94
25444: PUSH
25445: LD_VAR 0 6
25449: ARRAY
25450: MINUS
25451: ST_TO_ADDR
// if not minesFreeAmount then
25452: LD_VAR 0 8
25456: NOT
25457: IFFALSE 25461
// exit ;
25459: GO 25732
// tmp := [ ] ;
25461: LD_ADDR_VAR 0 7
25465: PUSH
25466: EMPTY
25467: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25468: LD_ADDR_VAR 0 5
25472: PUSH
25473: DOUBLE
25474: LD_INT 1
25476: DEC
25477: ST_TO_ADDR
25478: LD_VAR 0 8
25482: PUSH
25483: FOR_TO
25484: IFFALSE 25679
// begin _d := rand ( 0 , 5 ) ;
25486: LD_ADDR_VAR 0 11
25490: PUSH
25491: LD_INT 0
25493: PPUSH
25494: LD_INT 5
25496: PPUSH
25497: CALL_OW 12
25501: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25502: LD_ADDR_VAR 0 12
25506: PUSH
25507: LD_INT 2
25509: PPUSH
25510: LD_INT 6
25512: PPUSH
25513: CALL_OW 12
25517: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25518: LD_ADDR_VAR 0 9
25522: PUSH
25523: LD_VAR 0 2
25527: PPUSH
25528: LD_VAR 0 11
25532: PPUSH
25533: LD_VAR 0 12
25537: PPUSH
25538: CALL_OW 272
25542: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25543: LD_ADDR_VAR 0 10
25547: PUSH
25548: LD_VAR 0 3
25552: PPUSH
25553: LD_VAR 0 11
25557: PPUSH
25558: LD_VAR 0 12
25562: PPUSH
25563: CALL_OW 273
25567: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25568: LD_VAR 0 9
25572: PPUSH
25573: LD_VAR 0 10
25577: PPUSH
25578: CALL_OW 488
25582: PUSH
25583: LD_VAR 0 9
25587: PUSH
25588: LD_VAR 0 10
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_VAR 0 7
25601: IN
25602: NOT
25603: AND
25604: PUSH
25605: LD_VAR 0 9
25609: PPUSH
25610: LD_VAR 0 10
25614: PPUSH
25615: CALL_OW 458
25619: NOT
25620: AND
25621: IFFALSE 25663
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25623: LD_ADDR_VAR 0 7
25627: PUSH
25628: LD_VAR 0 7
25632: PPUSH
25633: LD_VAR 0 7
25637: PUSH
25638: LD_INT 1
25640: PLUS
25641: PPUSH
25642: LD_VAR 0 9
25646: PUSH
25647: LD_VAR 0 10
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PPUSH
25656: CALL_OW 1
25660: ST_TO_ADDR
25661: GO 25677
// i := i - 1 ;
25663: LD_ADDR_VAR 0 5
25667: PUSH
25668: LD_VAR 0 5
25672: PUSH
25673: LD_INT 1
25675: MINUS
25676: ST_TO_ADDR
// end ;
25677: GO 25483
25679: POP
25680: POP
// for i in tmp do
25681: LD_ADDR_VAR 0 5
25685: PUSH
25686: LD_VAR 0 7
25690: PUSH
25691: FOR_IN
25692: IFFALSE 25730
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25694: LD_VAR 0 1
25698: PPUSH
25699: LD_VAR 0 5
25703: PUSH
25704: LD_INT 1
25706: ARRAY
25707: PPUSH
25708: LD_VAR 0 5
25712: PUSH
25713: LD_INT 2
25715: ARRAY
25716: PPUSH
25717: CALL 24676 0 3
25721: NOT
25722: IFFALSE 25728
// exit ;
25724: POP
25725: POP
25726: GO 25732
25728: GO 25691
25730: POP
25731: POP
// end ;
25732: LD_VAR 0 4
25736: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25737: LD_INT 0
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
25745: PPUSH
// if not GetClass ( unit ) = class_sniper then
25746: LD_VAR 0 1
25750: PPUSH
25751: CALL_OW 257
25755: PUSH
25756: LD_INT 5
25758: EQUAL
25759: NOT
25760: IFFALSE 25764
// exit ;
25762: GO 26152
// dist := 8 ;
25764: LD_ADDR_VAR 0 5
25768: PUSH
25769: LD_INT 8
25771: ST_TO_ADDR
// viewRange := 12 ;
25772: LD_ADDR_VAR 0 7
25776: PUSH
25777: LD_INT 12
25779: ST_TO_ADDR
// side := GetSide ( unit ) ;
25780: LD_ADDR_VAR 0 6
25784: PUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 255
25794: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25795: LD_INT 61
25797: PPUSH
25798: LD_VAR 0 6
25802: PPUSH
25803: CALL_OW 321
25807: PUSH
25808: LD_INT 2
25810: EQUAL
25811: IFFALSE 25821
// viewRange := 16 ;
25813: LD_ADDR_VAR 0 7
25817: PUSH
25818: LD_INT 16
25820: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25821: LD_VAR 0 1
25825: PPUSH
25826: LD_VAR 0 2
25830: PPUSH
25831: LD_VAR 0 3
25835: PPUSH
25836: CALL_OW 297
25840: PUSH
25841: LD_VAR 0 5
25845: GREATER
25846: IFFALSE 25925
// begin ComMoveXY ( unit , x , y ) ;
25848: LD_VAR 0 1
25852: PPUSH
25853: LD_VAR 0 2
25857: PPUSH
25858: LD_VAR 0 3
25862: PPUSH
25863: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25867: LD_INT 35
25869: PPUSH
25870: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25874: LD_VAR 0 1
25878: PPUSH
25879: LD_VAR 0 2
25883: PPUSH
25884: LD_VAR 0 3
25888: PPUSH
25889: CALL 62867 0 3
25893: NOT
25894: IFFALSE 25898
// exit ;
25896: GO 26152
// until GetDistUnitXY ( unit , x , y ) < dist ;
25898: LD_VAR 0 1
25902: PPUSH
25903: LD_VAR 0 2
25907: PPUSH
25908: LD_VAR 0 3
25912: PPUSH
25913: CALL_OW 297
25917: PUSH
25918: LD_VAR 0 5
25922: LESS
25923: IFFALSE 25867
// end ; ComTurnXY ( unit , x , y ) ;
25925: LD_VAR 0 1
25929: PPUSH
25930: LD_VAR 0 2
25934: PPUSH
25935: LD_VAR 0 3
25939: PPUSH
25940: CALL_OW 118
// wait ( 5 ) ;
25944: LD_INT 5
25946: PPUSH
25947: CALL_OW 67
// _d := GetDir ( unit ) ;
25951: LD_ADDR_VAR 0 10
25955: PUSH
25956: LD_VAR 0 1
25960: PPUSH
25961: CALL_OW 254
25965: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25966: LD_ADDR_VAR 0 8
25970: PUSH
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 250
25980: PPUSH
25981: LD_VAR 0 10
25985: PPUSH
25986: LD_VAR 0 5
25990: PPUSH
25991: CALL_OW 272
25995: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25996: LD_ADDR_VAR 0 9
26000: PUSH
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 251
26010: PPUSH
26011: LD_VAR 0 10
26015: PPUSH
26016: LD_VAR 0 5
26020: PPUSH
26021: CALL_OW 273
26025: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26026: LD_VAR 0 8
26030: PPUSH
26031: LD_VAR 0 9
26035: PPUSH
26036: CALL_OW 488
26040: NOT
26041: IFFALSE 26045
// exit ;
26043: GO 26152
// ComAnimCustom ( unit , 1 ) ;
26045: LD_VAR 0 1
26049: PPUSH
26050: LD_INT 1
26052: PPUSH
26053: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26057: LD_VAR 0 8
26061: PPUSH
26062: LD_VAR 0 9
26066: PPUSH
26067: LD_VAR 0 6
26071: PPUSH
26072: LD_VAR 0 7
26076: PPUSH
26077: CALL_OW 330
// repeat wait ( 1 ) ;
26081: LD_INT 1
26083: PPUSH
26084: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26088: LD_VAR 0 1
26092: PPUSH
26093: CALL_OW 316
26097: PUSH
26098: LD_VAR 0 1
26102: PPUSH
26103: CALL_OW 314
26107: OR
26108: PUSH
26109: LD_VAR 0 1
26113: PPUSH
26114: CALL_OW 302
26118: NOT
26119: OR
26120: PUSH
26121: LD_VAR 0 1
26125: PPUSH
26126: CALL_OW 301
26130: OR
26131: IFFALSE 26081
// RemoveSeeing ( _x , _y , side ) ;
26133: LD_VAR 0 8
26137: PPUSH
26138: LD_VAR 0 9
26142: PPUSH
26143: LD_VAR 0 6
26147: PPUSH
26148: CALL_OW 331
// end ; end_of_file
26152: LD_VAR 0 4
26156: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26157: LD_VAR 0 1
26161: PUSH
26162: LD_INT 200
26164: DOUBLE
26165: GREATEREQUAL
26166: IFFALSE 26174
26168: LD_INT 299
26170: DOUBLE
26171: LESSEQUAL
26172: IFTRUE 26176
26174: GO 26208
26176: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26177: LD_VAR 0 1
26181: PPUSH
26182: LD_VAR 0 2
26186: PPUSH
26187: LD_VAR 0 3
26191: PPUSH
26192: LD_VAR 0 4
26196: PPUSH
26197: LD_VAR 0 5
26201: PPUSH
26202: CALL 21639 0 5
26206: GO 26285
26208: LD_INT 300
26210: DOUBLE
26211: GREATEREQUAL
26212: IFFALSE 26220
26214: LD_INT 399
26216: DOUBLE
26217: LESSEQUAL
26218: IFTRUE 26222
26220: GO 26284
26222: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26223: LD_VAR 0 1
26227: PPUSH
26228: LD_VAR 0 2
26232: PPUSH
26233: LD_VAR 0 3
26237: PPUSH
26238: LD_VAR 0 4
26242: PPUSH
26243: LD_VAR 0 5
26247: PPUSH
26248: LD_VAR 0 6
26252: PPUSH
26253: LD_VAR 0 7
26257: PPUSH
26258: LD_VAR 0 8
26262: PPUSH
26263: LD_VAR 0 9
26267: PPUSH
26268: LD_VAR 0 10
26272: PPUSH
26273: LD_VAR 0 11
26277: PPUSH
26278: CALL 17964 0 11
26282: GO 26285
26284: POP
// end ;
26285: PPOPN 11
26287: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26288: LD_VAR 0 1
26292: PPUSH
26293: LD_VAR 0 2
26297: PPUSH
26298: LD_VAR 0 3
26302: PPUSH
26303: LD_VAR 0 4
26307: PPUSH
26308: LD_VAR 0 5
26312: PPUSH
26313: CALL 21375 0 5
// end ; end_of_file
26317: PPOPN 5
26319: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
26320: LD_VAR 0 1
26324: PPUSH
26325: LD_VAR 0 2
26329: PPUSH
26330: LD_VAR 0 3
26334: PPUSH
26335: LD_VAR 0 4
26339: PPUSH
26340: LD_VAR 0 5
26344: PPUSH
26345: LD_VAR 0 6
26349: PPUSH
26350: CALL 5616 0 6
// end ;
26354: PPOPN 6
26356: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
26357: LD_INT 0
26359: PPUSH
// begin if not units then
26360: LD_VAR 0 1
26364: NOT
26365: IFFALSE 26369
// exit ;
26367: GO 26369
// end ;
26369: PPOPN 7
26371: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
26372: CALL 5503 0 0
// end ; end_of_file end_of_file
26376: PPOPN 1
26378: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26379: LD_INT 0
26381: PPUSH
26382: PPUSH
// if exist_mode then
26383: LD_VAR 0 2
26387: IFFALSE 26412
// unit := CreateCharacter ( prefix & ident ) else
26389: LD_ADDR_VAR 0 5
26393: PUSH
26394: LD_VAR 0 3
26398: PUSH
26399: LD_VAR 0 1
26403: STR
26404: PPUSH
26405: CALL_OW 34
26409: ST_TO_ADDR
26410: GO 26427
// unit := NewCharacter ( ident ) ;
26412: LD_ADDR_VAR 0 5
26416: PUSH
26417: LD_VAR 0 1
26421: PPUSH
26422: CALL_OW 25
26426: ST_TO_ADDR
// result := unit ;
26427: LD_ADDR_VAR 0 4
26431: PUSH
26432: LD_VAR 0 5
26436: ST_TO_ADDR
// end ;
26437: LD_VAR 0 4
26441: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26442: LD_INT 0
26444: PPUSH
26445: PPUSH
// if not side or not nation then
26446: LD_VAR 0 1
26450: NOT
26451: PUSH
26452: LD_VAR 0 2
26456: NOT
26457: OR
26458: IFFALSE 26462
// exit ;
26460: GO 27230
// case nation of nation_american :
26462: LD_VAR 0 2
26466: PUSH
26467: LD_INT 1
26469: DOUBLE
26470: EQUAL
26471: IFTRUE 26475
26473: GO 26689
26475: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26476: LD_ADDR_VAR 0 4
26480: PUSH
26481: LD_INT 35
26483: PUSH
26484: LD_INT 45
26486: PUSH
26487: LD_INT 46
26489: PUSH
26490: LD_INT 47
26492: PUSH
26493: LD_INT 82
26495: PUSH
26496: LD_INT 83
26498: PUSH
26499: LD_INT 84
26501: PUSH
26502: LD_INT 85
26504: PUSH
26505: LD_INT 86
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 6
26516: PUSH
26517: LD_INT 15
26519: PUSH
26520: LD_INT 16
26522: PUSH
26523: LD_INT 7
26525: PUSH
26526: LD_INT 12
26528: PUSH
26529: LD_INT 13
26531: PUSH
26532: LD_INT 10
26534: PUSH
26535: LD_INT 14
26537: PUSH
26538: LD_INT 20
26540: PUSH
26541: LD_INT 21
26543: PUSH
26544: LD_INT 22
26546: PUSH
26547: LD_INT 25
26549: PUSH
26550: LD_INT 32
26552: PUSH
26553: LD_INT 27
26555: PUSH
26556: LD_INT 36
26558: PUSH
26559: LD_INT 69
26561: PUSH
26562: LD_INT 39
26564: PUSH
26565: LD_INT 34
26567: PUSH
26568: LD_INT 40
26570: PUSH
26571: LD_INT 48
26573: PUSH
26574: LD_INT 49
26576: PUSH
26577: LD_INT 50
26579: PUSH
26580: LD_INT 51
26582: PUSH
26583: LD_INT 52
26585: PUSH
26586: LD_INT 53
26588: PUSH
26589: LD_INT 54
26591: PUSH
26592: LD_INT 55
26594: PUSH
26595: LD_INT 56
26597: PUSH
26598: LD_INT 57
26600: PUSH
26601: LD_INT 58
26603: PUSH
26604: LD_INT 59
26606: PUSH
26607: LD_INT 60
26609: PUSH
26610: LD_INT 61
26612: PUSH
26613: LD_INT 62
26615: PUSH
26616: LD_INT 80
26618: PUSH
26619: LD_INT 82
26621: PUSH
26622: LD_INT 83
26624: PUSH
26625: LD_INT 84
26627: PUSH
26628: LD_INT 85
26630: PUSH
26631: LD_INT 86
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: ST_TO_ADDR
26687: GO 27154
26689: LD_INT 2
26691: DOUBLE
26692: EQUAL
26693: IFTRUE 26697
26695: GO 26923
26697: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26698: LD_ADDR_VAR 0 4
26702: PUSH
26703: LD_INT 35
26705: PUSH
26706: LD_INT 45
26708: PUSH
26709: LD_INT 46
26711: PUSH
26712: LD_INT 47
26714: PUSH
26715: LD_INT 82
26717: PUSH
26718: LD_INT 83
26720: PUSH
26721: LD_INT 84
26723: PUSH
26724: LD_INT 85
26726: PUSH
26727: LD_INT 87
26729: PUSH
26730: LD_INT 70
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 11
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: LD_INT 4
26744: PUSH
26745: LD_INT 5
26747: PUSH
26748: LD_INT 6
26750: PUSH
26751: LD_INT 15
26753: PUSH
26754: LD_INT 18
26756: PUSH
26757: LD_INT 7
26759: PUSH
26760: LD_INT 17
26762: PUSH
26763: LD_INT 8
26765: PUSH
26766: LD_INT 20
26768: PUSH
26769: LD_INT 21
26771: PUSH
26772: LD_INT 22
26774: PUSH
26775: LD_INT 72
26777: PUSH
26778: LD_INT 26
26780: PUSH
26781: LD_INT 69
26783: PUSH
26784: LD_INT 39
26786: PUSH
26787: LD_INT 40
26789: PUSH
26790: LD_INT 41
26792: PUSH
26793: LD_INT 42
26795: PUSH
26796: LD_INT 43
26798: PUSH
26799: LD_INT 48
26801: PUSH
26802: LD_INT 49
26804: PUSH
26805: LD_INT 50
26807: PUSH
26808: LD_INT 51
26810: PUSH
26811: LD_INT 52
26813: PUSH
26814: LD_INT 53
26816: PUSH
26817: LD_INT 54
26819: PUSH
26820: LD_INT 55
26822: PUSH
26823: LD_INT 56
26825: PUSH
26826: LD_INT 60
26828: PUSH
26829: LD_INT 61
26831: PUSH
26832: LD_INT 62
26834: PUSH
26835: LD_INT 66
26837: PUSH
26838: LD_INT 67
26840: PUSH
26841: LD_INT 68
26843: PUSH
26844: LD_INT 81
26846: PUSH
26847: LD_INT 82
26849: PUSH
26850: LD_INT 83
26852: PUSH
26853: LD_INT 84
26855: PUSH
26856: LD_INT 85
26858: PUSH
26859: LD_INT 87
26861: PUSH
26862: LD_INT 88
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
26921: GO 27154
26923: LD_INT 3
26925: DOUBLE
26926: EQUAL
26927: IFTRUE 26931
26929: GO 27153
26931: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26932: LD_ADDR_VAR 0 4
26936: PUSH
26937: LD_INT 46
26939: PUSH
26940: LD_INT 47
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: LD_INT 82
26951: PUSH
26952: LD_INT 83
26954: PUSH
26955: LD_INT 84
26957: PUSH
26958: LD_INT 85
26960: PUSH
26961: LD_INT 86
26963: PUSH
26964: LD_INT 11
26966: PUSH
26967: LD_INT 9
26969: PUSH
26970: LD_INT 20
26972: PUSH
26973: LD_INT 19
26975: PUSH
26976: LD_INT 21
26978: PUSH
26979: LD_INT 24
26981: PUSH
26982: LD_INT 22
26984: PUSH
26985: LD_INT 25
26987: PUSH
26988: LD_INT 28
26990: PUSH
26991: LD_INT 29
26993: PUSH
26994: LD_INT 30
26996: PUSH
26997: LD_INT 31
26999: PUSH
27000: LD_INT 37
27002: PUSH
27003: LD_INT 38
27005: PUSH
27006: LD_INT 32
27008: PUSH
27009: LD_INT 27
27011: PUSH
27012: LD_INT 33
27014: PUSH
27015: LD_INT 69
27017: PUSH
27018: LD_INT 39
27020: PUSH
27021: LD_INT 34
27023: PUSH
27024: LD_INT 40
27026: PUSH
27027: LD_INT 71
27029: PUSH
27030: LD_INT 23
27032: PUSH
27033: LD_INT 44
27035: PUSH
27036: LD_INT 48
27038: PUSH
27039: LD_INT 49
27041: PUSH
27042: LD_INT 50
27044: PUSH
27045: LD_INT 51
27047: PUSH
27048: LD_INT 52
27050: PUSH
27051: LD_INT 53
27053: PUSH
27054: LD_INT 54
27056: PUSH
27057: LD_INT 55
27059: PUSH
27060: LD_INT 56
27062: PUSH
27063: LD_INT 57
27065: PUSH
27066: LD_INT 58
27068: PUSH
27069: LD_INT 59
27071: PUSH
27072: LD_INT 63
27074: PUSH
27075: LD_INT 64
27077: PUSH
27078: LD_INT 65
27080: PUSH
27081: LD_INT 82
27083: PUSH
27084: LD_INT 83
27086: PUSH
27087: LD_INT 84
27089: PUSH
27090: LD_INT 85
27092: PUSH
27093: LD_INT 86
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
27151: GO 27154
27153: POP
// if state > - 1 and state < 3 then
27154: LD_VAR 0 3
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: GREATER
27163: PUSH
27164: LD_VAR 0 3
27168: PUSH
27169: LD_INT 3
27171: LESS
27172: AND
27173: IFFALSE 27230
// for i in result do
27175: LD_ADDR_VAR 0 5
27179: PUSH
27180: LD_VAR 0 4
27184: PUSH
27185: FOR_IN
27186: IFFALSE 27228
// if GetTech ( i , side ) <> state then
27188: LD_VAR 0 5
27192: PPUSH
27193: LD_VAR 0 1
27197: PPUSH
27198: CALL_OW 321
27202: PUSH
27203: LD_VAR 0 3
27207: NONEQUAL
27208: IFFALSE 27226
// result := result diff i ;
27210: LD_ADDR_VAR 0 4
27214: PUSH
27215: LD_VAR 0 4
27219: PUSH
27220: LD_VAR 0 5
27224: DIFF
27225: ST_TO_ADDR
27226: GO 27185
27228: POP
27229: POP
// end ;
27230: LD_VAR 0 4
27234: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27235: LD_INT 0
27237: PPUSH
27238: PPUSH
27239: PPUSH
// result := true ;
27240: LD_ADDR_VAR 0 3
27244: PUSH
27245: LD_INT 1
27247: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27248: LD_ADDR_VAR 0 5
27252: PUSH
27253: LD_VAR 0 2
27257: PPUSH
27258: CALL_OW 480
27262: ST_TO_ADDR
// if not tmp then
27263: LD_VAR 0 5
27267: NOT
27268: IFFALSE 27272
// exit ;
27270: GO 27321
// for i in tmp do
27272: LD_ADDR_VAR 0 4
27276: PUSH
27277: LD_VAR 0 5
27281: PUSH
27282: FOR_IN
27283: IFFALSE 27319
// if GetTech ( i , side ) <> state_researched then
27285: LD_VAR 0 4
27289: PPUSH
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 321
27299: PUSH
27300: LD_INT 2
27302: NONEQUAL
27303: IFFALSE 27317
// begin result := false ;
27305: LD_ADDR_VAR 0 3
27309: PUSH
27310: LD_INT 0
27312: ST_TO_ADDR
// exit ;
27313: POP
27314: POP
27315: GO 27321
// end ;
27317: GO 27282
27319: POP
27320: POP
// end ;
27321: LD_VAR 0 3
27325: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27326: LD_INT 0
27328: PPUSH
27329: PPUSH
27330: PPUSH
27331: PPUSH
27332: PPUSH
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
27340: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27341: LD_VAR 0 1
27345: NOT
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 257
27356: PUSH
27357: LD_INT 9
27359: NONEQUAL
27360: OR
27361: IFFALSE 27365
// exit ;
27363: GO 27938
// side := GetSide ( unit ) ;
27365: LD_ADDR_VAR 0 9
27369: PUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 255
27379: ST_TO_ADDR
// tech_space := tech_spacanom ;
27380: LD_ADDR_VAR 0 12
27384: PUSH
27385: LD_INT 29
27387: ST_TO_ADDR
// tech_time := tech_taurad ;
27388: LD_ADDR_VAR 0 13
27392: PUSH
27393: LD_INT 28
27395: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27396: LD_ADDR_VAR 0 11
27400: PUSH
27401: LD_VAR 0 1
27405: PPUSH
27406: CALL_OW 310
27410: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27411: LD_VAR 0 11
27415: PPUSH
27416: CALL_OW 247
27420: PUSH
27421: LD_INT 2
27423: EQUAL
27424: IFFALSE 27428
// exit ;
27426: GO 27938
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27428: LD_ADDR_VAR 0 8
27432: PUSH
27433: LD_INT 81
27435: PUSH
27436: LD_VAR 0 9
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 3
27447: PUSH
27448: LD_INT 21
27450: PUSH
27451: LD_INT 3
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PPUSH
27466: CALL_OW 69
27470: ST_TO_ADDR
// if not tmp then
27471: LD_VAR 0 8
27475: NOT
27476: IFFALSE 27480
// exit ;
27478: GO 27938
// if in_unit then
27480: LD_VAR 0 11
27484: IFFALSE 27508
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27486: LD_ADDR_VAR 0 10
27490: PUSH
27491: LD_VAR 0 8
27495: PPUSH
27496: LD_VAR 0 11
27500: PPUSH
27501: CALL_OW 74
27505: ST_TO_ADDR
27506: GO 27528
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27508: LD_ADDR_VAR 0 10
27512: PUSH
27513: LD_VAR 0 8
27517: PPUSH
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL_OW 74
27527: ST_TO_ADDR
// if not enemy then
27528: LD_VAR 0 10
27532: NOT
27533: IFFALSE 27537
// exit ;
27535: GO 27938
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27537: LD_VAR 0 11
27541: PUSH
27542: LD_VAR 0 11
27546: PPUSH
27547: LD_VAR 0 10
27551: PPUSH
27552: CALL_OW 296
27556: PUSH
27557: LD_INT 13
27559: GREATER
27560: AND
27561: PUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_VAR 0 10
27571: PPUSH
27572: CALL_OW 296
27576: PUSH
27577: LD_INT 12
27579: GREATER
27580: OR
27581: IFFALSE 27585
// exit ;
27583: GO 27938
// missile := [ 1 ] ;
27585: LD_ADDR_VAR 0 14
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27596: LD_VAR 0 9
27600: PPUSH
27601: LD_VAR 0 12
27605: PPUSH
27606: CALL_OW 325
27610: IFFALSE 27639
// missile := Replace ( missile , missile + 1 , 2 ) ;
27612: LD_ADDR_VAR 0 14
27616: PUSH
27617: LD_VAR 0 14
27621: PPUSH
27622: LD_VAR 0 14
27626: PUSH
27627: LD_INT 1
27629: PLUS
27630: PPUSH
27631: LD_INT 2
27633: PPUSH
27634: CALL_OW 1
27638: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27639: LD_VAR 0 9
27643: PPUSH
27644: LD_VAR 0 13
27648: PPUSH
27649: CALL_OW 325
27653: PUSH
27654: LD_VAR 0 10
27658: PPUSH
27659: CALL_OW 255
27663: PPUSH
27664: LD_VAR 0 13
27668: PPUSH
27669: CALL_OW 325
27673: NOT
27674: AND
27675: IFFALSE 27704
// missile := Replace ( missile , missile + 1 , 3 ) ;
27677: LD_ADDR_VAR 0 14
27681: PUSH
27682: LD_VAR 0 14
27686: PPUSH
27687: LD_VAR 0 14
27691: PUSH
27692: LD_INT 1
27694: PLUS
27695: PPUSH
27696: LD_INT 3
27698: PPUSH
27699: CALL_OW 1
27703: ST_TO_ADDR
// if missile < 2 then
27704: LD_VAR 0 14
27708: PUSH
27709: LD_INT 2
27711: LESS
27712: IFFALSE 27716
// exit ;
27714: GO 27938
// x := GetX ( enemy ) ;
27716: LD_ADDR_VAR 0 4
27720: PUSH
27721: LD_VAR 0 10
27725: PPUSH
27726: CALL_OW 250
27730: ST_TO_ADDR
// y := GetY ( enemy ) ;
27731: LD_ADDR_VAR 0 5
27735: PUSH
27736: LD_VAR 0 10
27740: PPUSH
27741: CALL_OW 251
27745: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27746: LD_ADDR_VAR 0 6
27750: PUSH
27751: LD_VAR 0 4
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PPUSH
27760: LD_INT 1
27762: PPUSH
27763: CALL_OW 12
27767: PLUS
27768: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27769: LD_ADDR_VAR 0 7
27773: PUSH
27774: LD_VAR 0 5
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PPUSH
27783: LD_INT 1
27785: PPUSH
27786: CALL_OW 12
27790: PLUS
27791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27792: LD_VAR 0 6
27796: PPUSH
27797: LD_VAR 0 7
27801: PPUSH
27802: CALL_OW 488
27806: NOT
27807: IFFALSE 27829
// begin _x := x ;
27809: LD_ADDR_VAR 0 6
27813: PUSH
27814: LD_VAR 0 4
27818: ST_TO_ADDR
// _y := y ;
27819: LD_ADDR_VAR 0 7
27823: PUSH
27824: LD_VAR 0 5
27828: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27829: LD_ADDR_VAR 0 3
27833: PUSH
27834: LD_INT 1
27836: PPUSH
27837: LD_VAR 0 14
27841: PPUSH
27842: CALL_OW 12
27846: ST_TO_ADDR
// case i of 1 :
27847: LD_VAR 0 3
27851: PUSH
27852: LD_INT 1
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 27877
27860: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27861: LD_VAR 0 1
27865: PPUSH
27866: LD_VAR 0 10
27870: PPUSH
27871: CALL_OW 115
27875: GO 27938
27877: LD_INT 2
27879: DOUBLE
27880: EQUAL
27881: IFTRUE 27885
27883: GO 27907
27885: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27886: LD_VAR 0 1
27890: PPUSH
27891: LD_VAR 0 6
27895: PPUSH
27896: LD_VAR 0 7
27900: PPUSH
27901: CALL_OW 153
27905: GO 27938
27907: LD_INT 3
27909: DOUBLE
27910: EQUAL
27911: IFTRUE 27915
27913: GO 27937
27915: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_VAR 0 6
27925: PPUSH
27926: LD_VAR 0 7
27930: PPUSH
27931: CALL_OW 154
27935: GO 27938
27937: POP
// end ;
27938: LD_VAR 0 2
27942: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27943: LD_INT 0
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
// if not unit or not building then
27951: LD_VAR 0 1
27955: NOT
27956: PUSH
27957: LD_VAR 0 2
27961: NOT
27962: OR
27963: IFFALSE 27967
// exit ;
27965: GO 28125
// x := GetX ( building ) ;
27967: LD_ADDR_VAR 0 5
27971: PUSH
27972: LD_VAR 0 2
27976: PPUSH
27977: CALL_OW 250
27981: ST_TO_ADDR
// y := GetY ( building ) ;
27982: LD_ADDR_VAR 0 6
27986: PUSH
27987: LD_VAR 0 2
27991: PPUSH
27992: CALL_OW 251
27996: ST_TO_ADDR
// for i = 0 to 5 do
27997: LD_ADDR_VAR 0 4
28001: PUSH
28002: DOUBLE
28003: LD_INT 0
28005: DEC
28006: ST_TO_ADDR
28007: LD_INT 5
28009: PUSH
28010: FOR_TO
28011: IFFALSE 28123
// begin _x := ShiftX ( x , i , 3 ) ;
28013: LD_ADDR_VAR 0 7
28017: PUSH
28018: LD_VAR 0 5
28022: PPUSH
28023: LD_VAR 0 4
28027: PPUSH
28028: LD_INT 3
28030: PPUSH
28031: CALL_OW 272
28035: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28036: LD_ADDR_VAR 0 8
28040: PUSH
28041: LD_VAR 0 6
28045: PPUSH
28046: LD_VAR 0 4
28050: PPUSH
28051: LD_INT 3
28053: PPUSH
28054: CALL_OW 273
28058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28059: LD_VAR 0 7
28063: PPUSH
28064: LD_VAR 0 8
28068: PPUSH
28069: CALL_OW 488
28073: NOT
28074: IFFALSE 28078
// continue ;
28076: GO 28010
// if HexInfo ( _x , _y ) = 0 then
28078: LD_VAR 0 7
28082: PPUSH
28083: LD_VAR 0 8
28087: PPUSH
28088: CALL_OW 428
28092: PUSH
28093: LD_INT 0
28095: EQUAL
28096: IFFALSE 28121
// begin ComMoveXY ( unit , _x , _y ) ;
28098: LD_VAR 0 1
28102: PPUSH
28103: LD_VAR 0 7
28107: PPUSH
28108: LD_VAR 0 8
28112: PPUSH
28113: CALL_OW 111
// exit ;
28117: POP
28118: POP
28119: GO 28125
// end ; end ;
28121: GO 28010
28123: POP
28124: POP
// end ;
28125: LD_VAR 0 3
28129: RET
// export function ScanBase ( side , base_area ) ; begin
28130: LD_INT 0
28132: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_VAR 0 2
28142: PPUSH
28143: LD_INT 81
28145: PUSH
28146: LD_VAR 0 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PPUSH
28155: CALL_OW 70
28159: ST_TO_ADDR
// end ;
28160: LD_VAR 0 3
28164: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28165: LD_INT 0
28167: PPUSH
28168: PPUSH
28169: PPUSH
28170: PPUSH
// result := false ;
28171: LD_ADDR_VAR 0 2
28175: PUSH
28176: LD_INT 0
28178: ST_TO_ADDR
// side := GetSide ( unit ) ;
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: LD_VAR 0 1
28188: PPUSH
28189: CALL_OW 255
28193: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28194: LD_ADDR_VAR 0 4
28198: PUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: CALL_OW 248
28208: ST_TO_ADDR
// case nat of 1 :
28209: LD_VAR 0 4
28213: PUSH
28214: LD_INT 1
28216: DOUBLE
28217: EQUAL
28218: IFTRUE 28222
28220: GO 28233
28222: POP
// tech := tech_lassight ; 2 :
28223: LD_ADDR_VAR 0 5
28227: PUSH
28228: LD_INT 12
28230: ST_TO_ADDR
28231: GO 28272
28233: LD_INT 2
28235: DOUBLE
28236: EQUAL
28237: IFTRUE 28241
28239: GO 28252
28241: POP
// tech := tech_mortar ; 3 :
28242: LD_ADDR_VAR 0 5
28246: PUSH
28247: LD_INT 41
28249: ST_TO_ADDR
28250: GO 28272
28252: LD_INT 3
28254: DOUBLE
28255: EQUAL
28256: IFTRUE 28260
28258: GO 28271
28260: POP
// tech := tech_bazooka ; end ;
28261: LD_ADDR_VAR 0 5
28265: PUSH
28266: LD_INT 44
28268: ST_TO_ADDR
28269: GO 28272
28271: POP
// if Researched ( side , tech ) then
28272: LD_VAR 0 3
28276: PPUSH
28277: LD_VAR 0 5
28281: PPUSH
28282: CALL_OW 325
28286: IFFALSE 28313
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28288: LD_ADDR_VAR 0 2
28292: PUSH
28293: LD_INT 5
28295: PUSH
28296: LD_INT 8
28298: PUSH
28299: LD_INT 9
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: PUSH
28307: LD_VAR 0 4
28311: ARRAY
28312: ST_TO_ADDR
// end ;
28313: LD_VAR 0 2
28317: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28318: LD_INT 0
28320: PPUSH
28321: PPUSH
28322: PPUSH
// if not mines then
28323: LD_VAR 0 2
28327: NOT
28328: IFFALSE 28332
// exit ;
28330: GO 28476
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28332: LD_ADDR_VAR 0 5
28336: PUSH
28337: LD_INT 81
28339: PUSH
28340: LD_VAR 0 1
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 3
28351: PUSH
28352: LD_INT 21
28354: PUSH
28355: LD_INT 3
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PPUSH
28370: CALL_OW 69
28374: ST_TO_ADDR
// for i in mines do
28375: LD_ADDR_VAR 0 4
28379: PUSH
28380: LD_VAR 0 2
28384: PUSH
28385: FOR_IN
28386: IFFALSE 28474
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28388: LD_VAR 0 4
28392: PUSH
28393: LD_INT 1
28395: ARRAY
28396: PPUSH
28397: LD_VAR 0 4
28401: PUSH
28402: LD_INT 2
28404: ARRAY
28405: PPUSH
28406: CALL_OW 458
28410: NOT
28411: IFFALSE 28415
// continue ;
28413: GO 28385
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28415: LD_VAR 0 4
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PPUSH
28424: LD_VAR 0 4
28428: PUSH
28429: LD_INT 2
28431: ARRAY
28432: PPUSH
28433: CALL_OW 428
28437: PUSH
28438: LD_VAR 0 5
28442: IN
28443: IFFALSE 28472
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28445: LD_VAR 0 4
28449: PUSH
28450: LD_INT 1
28452: ARRAY
28453: PPUSH
28454: LD_VAR 0 4
28458: PUSH
28459: LD_INT 2
28461: ARRAY
28462: PPUSH
28463: LD_VAR 0 1
28467: PPUSH
28468: CALL_OW 456
// end ;
28472: GO 28385
28474: POP
28475: POP
// end ;
28476: LD_VAR 0 3
28480: RET
// export function Count ( array ) ; begin
28481: LD_INT 0
28483: PPUSH
// result := array + 0 ;
28484: LD_ADDR_VAR 0 2
28488: PUSH
28489: LD_VAR 0 1
28493: PUSH
28494: LD_INT 0
28496: PLUS
28497: ST_TO_ADDR
// end ;
28498: LD_VAR 0 2
28502: RET
// export function IsEmpty ( building ) ; begin
28503: LD_INT 0
28505: PPUSH
// if not building then
28506: LD_VAR 0 1
28510: NOT
28511: IFFALSE 28515
// exit ;
28513: GO 28558
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28515: LD_ADDR_VAR 0 2
28519: PUSH
28520: LD_VAR 0 1
28524: PUSH
28525: LD_INT 22
28527: PUSH
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 255
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 58
28544: PUSH
28545: EMPTY
28546: LIST
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PPUSH
28552: CALL_OW 69
28556: IN
28557: ST_TO_ADDR
// end ;
28558: LD_VAR 0 2
28562: RET
// export function IsNotFull ( building ) ; var places ; begin
28563: LD_INT 0
28565: PPUSH
28566: PPUSH
// if not building then
28567: LD_VAR 0 1
28571: NOT
28572: IFFALSE 28576
// exit ;
28574: GO 28604
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28576: LD_ADDR_VAR 0 2
28580: PUSH
28581: LD_VAR 0 1
28585: PPUSH
28586: LD_INT 3
28588: PUSH
28589: LD_INT 62
28591: PUSH
28592: EMPTY
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 72
28603: ST_TO_ADDR
// end ;
28604: LD_VAR 0 2
28608: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28609: LD_INT 0
28611: PPUSH
28612: PPUSH
28613: PPUSH
28614: PPUSH
// tmp := [ ] ;
28615: LD_ADDR_VAR 0 3
28619: PUSH
28620: EMPTY
28621: ST_TO_ADDR
// list := [ ] ;
28622: LD_ADDR_VAR 0 5
28626: PUSH
28627: EMPTY
28628: ST_TO_ADDR
// for i = 16 to 25 do
28629: LD_ADDR_VAR 0 4
28633: PUSH
28634: DOUBLE
28635: LD_INT 16
28637: DEC
28638: ST_TO_ADDR
28639: LD_INT 25
28641: PUSH
28642: FOR_TO
28643: IFFALSE 28716
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28645: LD_ADDR_VAR 0 3
28649: PUSH
28650: LD_VAR 0 3
28654: PUSH
28655: LD_INT 22
28657: PUSH
28658: LD_VAR 0 1
28662: PPUSH
28663: CALL_OW 255
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 91
28674: PUSH
28675: LD_VAR 0 1
28679: PUSH
28680: LD_INT 6
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 30
28690: PUSH
28691: LD_VAR 0 4
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: PUSH
28705: EMPTY
28706: LIST
28707: PPUSH
28708: CALL_OW 69
28712: ADD
28713: ST_TO_ADDR
28714: GO 28642
28716: POP
28717: POP
// for i = 1 to tmp do
28718: LD_ADDR_VAR 0 4
28722: PUSH
28723: DOUBLE
28724: LD_INT 1
28726: DEC
28727: ST_TO_ADDR
28728: LD_VAR 0 3
28732: PUSH
28733: FOR_TO
28734: IFFALSE 28822
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28736: LD_ADDR_VAR 0 5
28740: PUSH
28741: LD_VAR 0 5
28745: PUSH
28746: LD_VAR 0 3
28750: PUSH
28751: LD_VAR 0 4
28755: ARRAY
28756: PPUSH
28757: CALL_OW 266
28761: PUSH
28762: LD_VAR 0 3
28766: PUSH
28767: LD_VAR 0 4
28771: ARRAY
28772: PPUSH
28773: CALL_OW 250
28777: PUSH
28778: LD_VAR 0 3
28782: PUSH
28783: LD_VAR 0 4
28787: ARRAY
28788: PPUSH
28789: CALL_OW 251
28793: PUSH
28794: LD_VAR 0 3
28798: PUSH
28799: LD_VAR 0 4
28803: ARRAY
28804: PPUSH
28805: CALL_OW 254
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: ADD
28819: ST_TO_ADDR
28820: GO 28733
28822: POP
28823: POP
// result := list ;
28824: LD_ADDR_VAR 0 2
28828: PUSH
28829: LD_VAR 0 5
28833: ST_TO_ADDR
// end ;
28834: LD_VAR 0 2
28838: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28839: LD_INT 0
28841: PPUSH
28842: PPUSH
28843: PPUSH
28844: PPUSH
28845: PPUSH
28846: PPUSH
28847: PPUSH
// if not factory then
28848: LD_VAR 0 1
28852: NOT
28853: IFFALSE 28857
// exit ;
28855: GO 29450
// if control = control_apeman then
28857: LD_VAR 0 4
28861: PUSH
28862: LD_INT 5
28864: EQUAL
28865: IFFALSE 28974
// begin tmp := UnitsInside ( factory ) ;
28867: LD_ADDR_VAR 0 8
28871: PUSH
28872: LD_VAR 0 1
28876: PPUSH
28877: CALL_OW 313
28881: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28882: LD_VAR 0 8
28886: PPUSH
28887: LD_INT 25
28889: PUSH
28890: LD_INT 12
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PPUSH
28897: CALL_OW 72
28901: NOT
28902: IFFALSE 28912
// control := control_manual ;
28904: LD_ADDR_VAR 0 4
28908: PUSH
28909: LD_INT 1
28911: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28912: LD_ADDR_VAR 0 8
28916: PUSH
28917: LD_VAR 0 1
28921: PPUSH
28922: CALL 28609 0 1
28926: ST_TO_ADDR
// if tmp then
28927: LD_VAR 0 8
28931: IFFALSE 28974
// begin for i in tmp do
28933: LD_ADDR_VAR 0 7
28937: PUSH
28938: LD_VAR 0 8
28942: PUSH
28943: FOR_IN
28944: IFFALSE 28972
// if i [ 1 ] = b_ext_radio then
28946: LD_VAR 0 7
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: PUSH
28955: LD_INT 22
28957: EQUAL
28958: IFFALSE 28970
// begin control := control_remote ;
28960: LD_ADDR_VAR 0 4
28964: PUSH
28965: LD_INT 2
28967: ST_TO_ADDR
// break ;
28968: GO 28972
// end ;
28970: GO 28943
28972: POP
28973: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28974: LD_VAR 0 1
28978: PPUSH
28979: LD_VAR 0 2
28983: PPUSH
28984: LD_VAR 0 3
28988: PPUSH
28989: LD_VAR 0 4
28993: PPUSH
28994: LD_VAR 0 5
28998: PPUSH
28999: CALL_OW 448
29003: IFFALSE 29038
// begin result := [ chassis , engine , control , weapon ] ;
29005: LD_ADDR_VAR 0 6
29009: PUSH
29010: LD_VAR 0 2
29014: PUSH
29015: LD_VAR 0 3
29019: PUSH
29020: LD_VAR 0 4
29024: PUSH
29025: LD_VAR 0 5
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
// exit ;
29036: GO 29450
// end ; _chassis := AvailableChassisList ( factory ) ;
29038: LD_ADDR_VAR 0 9
29042: PUSH
29043: LD_VAR 0 1
29047: PPUSH
29048: CALL_OW 475
29052: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29053: LD_ADDR_VAR 0 11
29057: PUSH
29058: LD_VAR 0 1
29062: PPUSH
29063: CALL_OW 476
29067: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29068: LD_ADDR_VAR 0 12
29072: PUSH
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL_OW 477
29082: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29083: LD_ADDR_VAR 0 10
29087: PUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 478
29097: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29098: LD_VAR 0 9
29102: NOT
29103: PUSH
29104: LD_VAR 0 11
29108: NOT
29109: OR
29110: PUSH
29111: LD_VAR 0 12
29115: NOT
29116: OR
29117: PUSH
29118: LD_VAR 0 10
29122: NOT
29123: OR
29124: IFFALSE 29159
// begin result := [ chassis , engine , control , weapon ] ;
29126: LD_ADDR_VAR 0 6
29130: PUSH
29131: LD_VAR 0 2
29135: PUSH
29136: LD_VAR 0 3
29140: PUSH
29141: LD_VAR 0 4
29145: PUSH
29146: LD_VAR 0 5
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: ST_TO_ADDR
// exit ;
29157: GO 29450
// end ; if not chassis in _chassis then
29159: LD_VAR 0 2
29163: PUSH
29164: LD_VAR 0 9
29168: IN
29169: NOT
29170: IFFALSE 29196
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29172: LD_ADDR_VAR 0 2
29176: PUSH
29177: LD_VAR 0 9
29181: PUSH
29182: LD_INT 1
29184: PPUSH
29185: LD_VAR 0 9
29189: PPUSH
29190: CALL_OW 12
29194: ARRAY
29195: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29196: LD_VAR 0 2
29200: PPUSH
29201: LD_VAR 0 3
29205: PPUSH
29206: CALL 29455 0 2
29210: NOT
29211: IFFALSE 29270
// repeat engine := _engine [ 1 ] ;
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_VAR 0 11
29222: PUSH
29223: LD_INT 1
29225: ARRAY
29226: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29227: LD_ADDR_VAR 0 11
29231: PUSH
29232: LD_VAR 0 11
29236: PPUSH
29237: LD_INT 1
29239: PPUSH
29240: CALL_OW 3
29244: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29245: LD_VAR 0 2
29249: PPUSH
29250: LD_VAR 0 3
29254: PPUSH
29255: CALL 29455 0 2
29259: PUSH
29260: LD_VAR 0 11
29264: PUSH
29265: EMPTY
29266: EQUAL
29267: OR
29268: IFFALSE 29213
// if not control in _control then
29270: LD_VAR 0 4
29274: PUSH
29275: LD_VAR 0 12
29279: IN
29280: NOT
29281: IFFALSE 29307
// control := _control [ rand ( 1 , _control ) ] ;
29283: LD_ADDR_VAR 0 4
29287: PUSH
29288: LD_VAR 0 12
29292: PUSH
29293: LD_INT 1
29295: PPUSH
29296: LD_VAR 0 12
29300: PPUSH
29301: CALL_OW 12
29305: ARRAY
29306: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29307: LD_VAR 0 2
29311: PPUSH
29312: LD_VAR 0 5
29316: PPUSH
29317: CALL 29675 0 2
29321: NOT
29322: IFFALSE 29381
// repeat weapon := _weapon [ 1 ] ;
29324: LD_ADDR_VAR 0 5
29328: PUSH
29329: LD_VAR 0 10
29333: PUSH
29334: LD_INT 1
29336: ARRAY
29337: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29338: LD_ADDR_VAR 0 10
29342: PUSH
29343: LD_VAR 0 10
29347: PPUSH
29348: LD_INT 1
29350: PPUSH
29351: CALL_OW 3
29355: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29356: LD_VAR 0 2
29360: PPUSH
29361: LD_VAR 0 5
29365: PPUSH
29366: CALL 29675 0 2
29370: PUSH
29371: LD_VAR 0 10
29375: PUSH
29376: EMPTY
29377: EQUAL
29378: OR
29379: IFFALSE 29324
// result := [ ] ;
29381: LD_ADDR_VAR 0 6
29385: PUSH
29386: EMPTY
29387: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29388: LD_VAR 0 1
29392: PPUSH
29393: LD_VAR 0 2
29397: PPUSH
29398: LD_VAR 0 3
29402: PPUSH
29403: LD_VAR 0 4
29407: PPUSH
29408: LD_VAR 0 5
29412: PPUSH
29413: CALL_OW 448
29417: IFFALSE 29450
// result := [ chassis , engine , control , weapon ] ;
29419: LD_ADDR_VAR 0 6
29423: PUSH
29424: LD_VAR 0 2
29428: PUSH
29429: LD_VAR 0 3
29433: PUSH
29434: LD_VAR 0 4
29438: PUSH
29439: LD_VAR 0 5
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: ST_TO_ADDR
// end ;
29450: LD_VAR 0 6
29454: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29455: LD_INT 0
29457: PPUSH
// if not chassis or not engine then
29458: LD_VAR 0 1
29462: NOT
29463: PUSH
29464: LD_VAR 0 2
29468: NOT
29469: OR
29470: IFFALSE 29474
// exit ;
29472: GO 29670
// case engine of engine_solar :
29474: LD_VAR 0 2
29478: PUSH
29479: LD_INT 2
29481: DOUBLE
29482: EQUAL
29483: IFTRUE 29487
29485: GO 29525
29487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29488: LD_ADDR_VAR 0 3
29492: PUSH
29493: LD_INT 11
29495: PUSH
29496: LD_INT 12
29498: PUSH
29499: LD_INT 13
29501: PUSH
29502: LD_INT 14
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: LD_INT 3
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: ST_TO_ADDR
29523: GO 29654
29525: LD_INT 1
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29595
29533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29534: LD_ADDR_VAR 0 3
29538: PUSH
29539: LD_INT 11
29541: PUSH
29542: LD_INT 12
29544: PUSH
29545: LD_INT 13
29547: PUSH
29548: LD_INT 14
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: LD_INT 3
29559: PUSH
29560: LD_INT 4
29562: PUSH
29563: LD_INT 5
29565: PUSH
29566: LD_INT 21
29568: PUSH
29569: LD_INT 23
29571: PUSH
29572: LD_INT 22
29574: PUSH
29575: LD_INT 24
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
29593: GO 29654
29595: LD_INT 3
29597: DOUBLE
29598: EQUAL
29599: IFTRUE 29603
29601: GO 29653
29603: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29604: LD_ADDR_VAR 0 3
29608: PUSH
29609: LD_INT 13
29611: PUSH
29612: LD_INT 14
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 3
29620: PUSH
29621: LD_INT 4
29623: PUSH
29624: LD_INT 5
29626: PUSH
29627: LD_INT 21
29629: PUSH
29630: LD_INT 22
29632: PUSH
29633: LD_INT 23
29635: PUSH
29636: LD_INT 24
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: ST_TO_ADDR
29651: GO 29654
29653: POP
// result := ( chassis in result ) ;
29654: LD_ADDR_VAR 0 3
29658: PUSH
29659: LD_VAR 0 1
29663: PUSH
29664: LD_VAR 0 3
29668: IN
29669: ST_TO_ADDR
// end ;
29670: LD_VAR 0 3
29674: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29675: LD_INT 0
29677: PPUSH
// if not chassis or not weapon then
29678: LD_VAR 0 1
29682: NOT
29683: PUSH
29684: LD_VAR 0 2
29688: NOT
29689: OR
29690: IFFALSE 29694
// exit ;
29692: GO 30754
// case weapon of us_machine_gun :
29694: LD_VAR 0 2
29698: PUSH
29699: LD_INT 2
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29707
29705: GO 29737
29707: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: LD_INT 4
29724: PUSH
29725: LD_INT 5
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: ST_TO_ADDR
29735: GO 30738
29737: LD_INT 3
29739: DOUBLE
29740: EQUAL
29741: IFTRUE 29745
29743: GO 29775
29745: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29746: LD_ADDR_VAR 0 3
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 4
29762: PUSH
29763: LD_INT 5
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: ST_TO_ADDR
29773: GO 30738
29775: LD_INT 11
29777: DOUBLE
29778: EQUAL
29779: IFTRUE 29783
29781: GO 29813
29783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29784: LD_ADDR_VAR 0 3
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: LD_INT 3
29797: PUSH
29798: LD_INT 4
29800: PUSH
29801: LD_INT 5
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
29811: GO 30738
29813: LD_INT 4
29815: DOUBLE
29816: EQUAL
29817: IFTRUE 29821
29819: GO 29847
29821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29822: LD_ADDR_VAR 0 3
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: LD_INT 4
29835: PUSH
29836: LD_INT 5
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: ST_TO_ADDR
29845: GO 30738
29847: LD_INT 5
29849: DOUBLE
29850: EQUAL
29851: IFTRUE 29855
29853: GO 29881
29855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29856: LD_ADDR_VAR 0 3
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 3
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: LD_INT 5
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
29879: GO 30738
29881: LD_INT 9
29883: DOUBLE
29884: EQUAL
29885: IFTRUE 29889
29887: GO 29915
29889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29890: LD_ADDR_VAR 0 3
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 4
29903: PUSH
29904: LD_INT 5
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
29913: GO 30738
29915: LD_INT 7
29917: DOUBLE
29918: EQUAL
29919: IFTRUE 29923
29921: GO 29949
29923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29924: LD_ADDR_VAR 0 3
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: LD_INT 3
29934: PUSH
29935: LD_INT 4
29937: PUSH
29938: LD_INT 5
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: ST_TO_ADDR
29947: GO 30738
29949: LD_INT 12
29951: DOUBLE
29952: EQUAL
29953: IFTRUE 29957
29955: GO 29983
29957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29958: LD_ADDR_VAR 0 3
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: LD_INT 3
29968: PUSH
29969: LD_INT 4
29971: PUSH
29972: LD_INT 5
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: ST_TO_ADDR
29981: GO 30738
29983: LD_INT 13
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30017
29991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29992: LD_ADDR_VAR 0 3
29996: PUSH
29997: LD_INT 2
29999: PUSH
30000: LD_INT 3
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: LD_INT 5
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
30015: GO 30738
30017: LD_INT 14
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30025
30023: GO 30043
30025: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30026: LD_ADDR_VAR 0 3
30030: PUSH
30031: LD_INT 4
30033: PUSH
30034: LD_INT 5
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: ST_TO_ADDR
30041: GO 30738
30043: LD_INT 6
30045: DOUBLE
30046: EQUAL
30047: IFTRUE 30051
30049: GO 30069
30051: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30052: LD_ADDR_VAR 0 3
30056: PUSH
30057: LD_INT 4
30059: PUSH
30060: LD_INT 5
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: ST_TO_ADDR
30067: GO 30738
30069: LD_INT 10
30071: DOUBLE
30072: EQUAL
30073: IFTRUE 30077
30075: GO 30095
30077: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30078: LD_ADDR_VAR 0 3
30082: PUSH
30083: LD_INT 4
30085: PUSH
30086: LD_INT 5
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: ST_TO_ADDR
30093: GO 30738
30095: LD_INT 22
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30129
30103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30104: LD_ADDR_VAR 0 3
30108: PUSH
30109: LD_INT 11
30111: PUSH
30112: LD_INT 12
30114: PUSH
30115: LD_INT 13
30117: PUSH
30118: LD_INT 14
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: ST_TO_ADDR
30127: GO 30738
30129: LD_INT 23
30131: DOUBLE
30132: EQUAL
30133: IFTRUE 30137
30135: GO 30163
30137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30138: LD_ADDR_VAR 0 3
30142: PUSH
30143: LD_INT 11
30145: PUSH
30146: LD_INT 12
30148: PUSH
30149: LD_INT 13
30151: PUSH
30152: LD_INT 14
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: ST_TO_ADDR
30161: GO 30738
30163: LD_INT 24
30165: DOUBLE
30166: EQUAL
30167: IFTRUE 30171
30169: GO 30197
30171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30172: LD_ADDR_VAR 0 3
30176: PUSH
30177: LD_INT 11
30179: PUSH
30180: LD_INT 12
30182: PUSH
30183: LD_INT 13
30185: PUSH
30186: LD_INT 14
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
30195: GO 30738
30197: LD_INT 30
30199: DOUBLE
30200: EQUAL
30201: IFTRUE 30205
30203: GO 30231
30205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30206: LD_ADDR_VAR 0 3
30210: PUSH
30211: LD_INT 11
30213: PUSH
30214: LD_INT 12
30216: PUSH
30217: LD_INT 13
30219: PUSH
30220: LD_INT 14
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: ST_TO_ADDR
30229: GO 30738
30231: LD_INT 25
30233: DOUBLE
30234: EQUAL
30235: IFTRUE 30239
30237: GO 30257
30239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30240: LD_ADDR_VAR 0 3
30244: PUSH
30245: LD_INT 13
30247: PUSH
30248: LD_INT 14
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: ST_TO_ADDR
30255: GO 30738
30257: LD_INT 27
30259: DOUBLE
30260: EQUAL
30261: IFTRUE 30265
30263: GO 30283
30265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30266: LD_ADDR_VAR 0 3
30270: PUSH
30271: LD_INT 13
30273: PUSH
30274: LD_INT 14
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: ST_TO_ADDR
30281: GO 30738
30283: LD_INT 92
30285: DOUBLE
30286: EQUAL
30287: IFTRUE 30291
30289: GO 30317
30291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30292: LD_ADDR_VAR 0 3
30296: PUSH
30297: LD_INT 11
30299: PUSH
30300: LD_INT 12
30302: PUSH
30303: LD_INT 13
30305: PUSH
30306: LD_INT 14
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
30315: GO 30738
30317: LD_INT 28
30319: DOUBLE
30320: EQUAL
30321: IFTRUE 30325
30323: GO 30343
30325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30326: LD_ADDR_VAR 0 3
30330: PUSH
30331: LD_INT 13
30333: PUSH
30334: LD_INT 14
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: ST_TO_ADDR
30341: GO 30738
30343: LD_INT 29
30345: DOUBLE
30346: EQUAL
30347: IFTRUE 30351
30349: GO 30369
30351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30352: LD_ADDR_VAR 0 3
30356: PUSH
30357: LD_INT 13
30359: PUSH
30360: LD_INT 14
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: ST_TO_ADDR
30367: GO 30738
30369: LD_INT 31
30371: DOUBLE
30372: EQUAL
30373: IFTRUE 30377
30375: GO 30395
30377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_INT 13
30385: PUSH
30386: LD_INT 14
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: ST_TO_ADDR
30393: GO 30738
30395: LD_INT 26
30397: DOUBLE
30398: EQUAL
30399: IFTRUE 30403
30401: GO 30421
30403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30404: LD_ADDR_VAR 0 3
30408: PUSH
30409: LD_INT 13
30411: PUSH
30412: LD_INT 14
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: ST_TO_ADDR
30419: GO 30738
30421: LD_INT 42
30423: DOUBLE
30424: EQUAL
30425: IFTRUE 30429
30427: GO 30455
30429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30430: LD_ADDR_VAR 0 3
30434: PUSH
30435: LD_INT 21
30437: PUSH
30438: LD_INT 22
30440: PUSH
30441: LD_INT 23
30443: PUSH
30444: LD_INT 24
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: ST_TO_ADDR
30453: GO 30738
30455: LD_INT 43
30457: DOUBLE
30458: EQUAL
30459: IFTRUE 30463
30461: GO 30489
30463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30464: LD_ADDR_VAR 0 3
30468: PUSH
30469: LD_INT 21
30471: PUSH
30472: LD_INT 22
30474: PUSH
30475: LD_INT 23
30477: PUSH
30478: LD_INT 24
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
30487: GO 30738
30489: LD_INT 44
30491: DOUBLE
30492: EQUAL
30493: IFTRUE 30497
30495: GO 30523
30497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_INT 21
30505: PUSH
30506: LD_INT 22
30508: PUSH
30509: LD_INT 23
30511: PUSH
30512: LD_INT 24
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
30521: GO 30738
30523: LD_INT 45
30525: DOUBLE
30526: EQUAL
30527: IFTRUE 30531
30529: GO 30557
30531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30532: LD_ADDR_VAR 0 3
30536: PUSH
30537: LD_INT 21
30539: PUSH
30540: LD_INT 22
30542: PUSH
30543: LD_INT 23
30545: PUSH
30546: LD_INT 24
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: ST_TO_ADDR
30555: GO 30738
30557: LD_INT 49
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30591
30565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 21
30573: PUSH
30574: LD_INT 22
30576: PUSH
30577: LD_INT 23
30579: PUSH
30580: LD_INT 24
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: ST_TO_ADDR
30589: GO 30738
30591: LD_INT 51
30593: DOUBLE
30594: EQUAL
30595: IFTRUE 30599
30597: GO 30625
30599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30600: LD_ADDR_VAR 0 3
30604: PUSH
30605: LD_INT 21
30607: PUSH
30608: LD_INT 22
30610: PUSH
30611: LD_INT 23
30613: PUSH
30614: LD_INT 24
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
30623: GO 30738
30625: LD_INT 52
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30659
30633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30634: LD_ADDR_VAR 0 3
30638: PUSH
30639: LD_INT 21
30641: PUSH
30642: LD_INT 22
30644: PUSH
30645: LD_INT 23
30647: PUSH
30648: LD_INT 24
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
30657: GO 30738
30659: LD_INT 53
30661: DOUBLE
30662: EQUAL
30663: IFTRUE 30667
30665: GO 30685
30667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: LD_INT 23
30675: PUSH
30676: LD_INT 24
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: ST_TO_ADDR
30683: GO 30738
30685: LD_INT 46
30687: DOUBLE
30688: EQUAL
30689: IFTRUE 30693
30691: GO 30711
30693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_INT 23
30701: PUSH
30702: LD_INT 24
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: ST_TO_ADDR
30709: GO 30738
30711: LD_INT 47
30713: DOUBLE
30714: EQUAL
30715: IFTRUE 30719
30717: GO 30737
30719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30720: LD_ADDR_VAR 0 3
30724: PUSH
30725: LD_INT 23
30727: PUSH
30728: LD_INT 24
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: ST_TO_ADDR
30735: GO 30738
30737: POP
// result := ( chassis in result ) ;
30738: LD_ADDR_VAR 0 3
30742: PUSH
30743: LD_VAR 0 1
30747: PUSH
30748: LD_VAR 0 3
30752: IN
30753: ST_TO_ADDR
// end ;
30754: LD_VAR 0 3
30758: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30759: LD_INT 0
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
30767: PPUSH
// result := array ;
30768: LD_ADDR_VAR 0 5
30772: PUSH
30773: LD_VAR 0 1
30777: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30778: LD_VAR 0 1
30782: NOT
30783: PUSH
30784: LD_VAR 0 2
30788: NOT
30789: OR
30790: PUSH
30791: LD_VAR 0 3
30795: NOT
30796: OR
30797: PUSH
30798: LD_VAR 0 2
30802: PUSH
30803: LD_VAR 0 1
30807: GREATER
30808: OR
30809: PUSH
30810: LD_VAR 0 3
30814: PUSH
30815: LD_VAR 0 1
30819: GREATER
30820: OR
30821: IFFALSE 30825
// exit ;
30823: GO 31121
// if direction then
30825: LD_VAR 0 4
30829: IFFALSE 30893
// begin d := 1 ;
30831: LD_ADDR_VAR 0 9
30835: PUSH
30836: LD_INT 1
30838: ST_TO_ADDR
// if i_from > i_to then
30839: LD_VAR 0 2
30843: PUSH
30844: LD_VAR 0 3
30848: GREATER
30849: IFFALSE 30875
// length := ( array - i_from ) + i_to else
30851: LD_ADDR_VAR 0 11
30855: PUSH
30856: LD_VAR 0 1
30860: PUSH
30861: LD_VAR 0 2
30865: MINUS
30866: PUSH
30867: LD_VAR 0 3
30871: PLUS
30872: ST_TO_ADDR
30873: GO 30891
// length := i_to - i_from ;
30875: LD_ADDR_VAR 0 11
30879: PUSH
30880: LD_VAR 0 3
30884: PUSH
30885: LD_VAR 0 2
30889: MINUS
30890: ST_TO_ADDR
// end else
30891: GO 30954
// begin d := - 1 ;
30893: LD_ADDR_VAR 0 9
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: ST_TO_ADDR
// if i_from > i_to then
30902: LD_VAR 0 2
30906: PUSH
30907: LD_VAR 0 3
30911: GREATER
30912: IFFALSE 30932
// length := i_from - i_to else
30914: LD_ADDR_VAR 0 11
30918: PUSH
30919: LD_VAR 0 2
30923: PUSH
30924: LD_VAR 0 3
30928: MINUS
30929: ST_TO_ADDR
30930: GO 30954
// length := ( array - i_to ) + i_from ;
30932: LD_ADDR_VAR 0 11
30936: PUSH
30937: LD_VAR 0 1
30941: PUSH
30942: LD_VAR 0 3
30946: MINUS
30947: PUSH
30948: LD_VAR 0 2
30952: PLUS
30953: ST_TO_ADDR
// end ; if not length then
30954: LD_VAR 0 11
30958: NOT
30959: IFFALSE 30963
// exit ;
30961: GO 31121
// tmp := array ;
30963: LD_ADDR_VAR 0 10
30967: PUSH
30968: LD_VAR 0 1
30972: ST_TO_ADDR
// for i = 1 to length do
30973: LD_ADDR_VAR 0 6
30977: PUSH
30978: DOUBLE
30979: LD_INT 1
30981: DEC
30982: ST_TO_ADDR
30983: LD_VAR 0 11
30987: PUSH
30988: FOR_TO
30989: IFFALSE 31109
// begin for j = 1 to array do
30991: LD_ADDR_VAR 0 7
30995: PUSH
30996: DOUBLE
30997: LD_INT 1
30999: DEC
31000: ST_TO_ADDR
31001: LD_VAR 0 1
31005: PUSH
31006: FOR_TO
31007: IFFALSE 31095
// begin k := j + d ;
31009: LD_ADDR_VAR 0 8
31013: PUSH
31014: LD_VAR 0 7
31018: PUSH
31019: LD_VAR 0 9
31023: PLUS
31024: ST_TO_ADDR
// if k > array then
31025: LD_VAR 0 8
31029: PUSH
31030: LD_VAR 0 1
31034: GREATER
31035: IFFALSE 31045
// k := 1 ;
31037: LD_ADDR_VAR 0 8
31041: PUSH
31042: LD_INT 1
31044: ST_TO_ADDR
// if not k then
31045: LD_VAR 0 8
31049: NOT
31050: IFFALSE 31062
// k := array ;
31052: LD_ADDR_VAR 0 8
31056: PUSH
31057: LD_VAR 0 1
31061: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31062: LD_ADDR_VAR 0 10
31066: PUSH
31067: LD_VAR 0 10
31071: PPUSH
31072: LD_VAR 0 8
31076: PPUSH
31077: LD_VAR 0 1
31081: PUSH
31082: LD_VAR 0 7
31086: ARRAY
31087: PPUSH
31088: CALL_OW 1
31092: ST_TO_ADDR
// end ;
31093: GO 31006
31095: POP
31096: POP
// array := tmp ;
31097: LD_ADDR_VAR 0 1
31101: PUSH
31102: LD_VAR 0 10
31106: ST_TO_ADDR
// end ;
31107: GO 30988
31109: POP
31110: POP
// result := array ;
31111: LD_ADDR_VAR 0 5
31115: PUSH
31116: LD_VAR 0 1
31120: ST_TO_ADDR
// end ;
31121: LD_VAR 0 5
31125: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31126: LD_INT 0
31128: PPUSH
31129: PPUSH
// result := 0 ;
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 0
31137: ST_TO_ADDR
// if not array or not value in array then
31138: LD_VAR 0 1
31142: NOT
31143: PUSH
31144: LD_VAR 0 2
31148: PUSH
31149: LD_VAR 0 1
31153: IN
31154: NOT
31155: OR
31156: IFFALSE 31160
// exit ;
31158: GO 31214
// for i = 1 to array do
31160: LD_ADDR_VAR 0 4
31164: PUSH
31165: DOUBLE
31166: LD_INT 1
31168: DEC
31169: ST_TO_ADDR
31170: LD_VAR 0 1
31174: PUSH
31175: FOR_TO
31176: IFFALSE 31212
// if value = array [ i ] then
31178: LD_VAR 0 2
31182: PUSH
31183: LD_VAR 0 1
31187: PUSH
31188: LD_VAR 0 4
31192: ARRAY
31193: EQUAL
31194: IFFALSE 31210
// begin result := i ;
31196: LD_ADDR_VAR 0 3
31200: PUSH
31201: LD_VAR 0 4
31205: ST_TO_ADDR
// exit ;
31206: POP
31207: POP
31208: GO 31214
// end ;
31210: GO 31175
31212: POP
31213: POP
// end ;
31214: LD_VAR 0 3
31218: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31219: LD_INT 0
31221: PPUSH
// vc_chassis := chassis ;
31222: LD_ADDR_OWVAR 37
31226: PUSH
31227: LD_VAR 0 1
31231: ST_TO_ADDR
// vc_engine := engine ;
31232: LD_ADDR_OWVAR 39
31236: PUSH
31237: LD_VAR 0 2
31241: ST_TO_ADDR
// vc_control := control ;
31242: LD_ADDR_OWVAR 38
31246: PUSH
31247: LD_VAR 0 3
31251: ST_TO_ADDR
// vc_weapon := weapon ;
31252: LD_ADDR_OWVAR 40
31256: PUSH
31257: LD_VAR 0 4
31261: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31262: LD_ADDR_OWVAR 41
31266: PUSH
31267: LD_VAR 0 5
31271: ST_TO_ADDR
// end ;
31272: LD_VAR 0 6
31276: RET
// export function WantPlant ( unit ) ; var task ; begin
31277: LD_INT 0
31279: PPUSH
31280: PPUSH
// result := false ;
31281: LD_ADDR_VAR 0 2
31285: PUSH
31286: LD_INT 0
31288: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31289: LD_ADDR_VAR 0 3
31293: PUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 437
31303: ST_TO_ADDR
// if task then
31304: LD_VAR 0 3
31308: IFFALSE 31336
// if task [ 1 ] [ 1 ] = p then
31310: LD_VAR 0 3
31314: PUSH
31315: LD_INT 1
31317: ARRAY
31318: PUSH
31319: LD_INT 1
31321: ARRAY
31322: PUSH
31323: LD_STRING p
31325: EQUAL
31326: IFFALSE 31336
// result := true ;
31328: LD_ADDR_VAR 0 2
31332: PUSH
31333: LD_INT 1
31335: ST_TO_ADDR
// end ;
31336: LD_VAR 0 2
31340: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31341: LD_INT 0
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
// if pos < 1 then
31347: LD_VAR 0 2
31351: PUSH
31352: LD_INT 1
31354: LESS
31355: IFFALSE 31359
// exit ;
31357: GO 31662
// if pos = 1 then
31359: LD_VAR 0 2
31363: PUSH
31364: LD_INT 1
31366: EQUAL
31367: IFFALSE 31400
// result := Replace ( arr , pos [ 1 ] , value ) else
31369: LD_ADDR_VAR 0 4
31373: PUSH
31374: LD_VAR 0 1
31378: PPUSH
31379: LD_VAR 0 2
31383: PUSH
31384: LD_INT 1
31386: ARRAY
31387: PPUSH
31388: LD_VAR 0 3
31392: PPUSH
31393: CALL_OW 1
31397: ST_TO_ADDR
31398: GO 31662
// begin tmp := arr ;
31400: LD_ADDR_VAR 0 6
31404: PUSH
31405: LD_VAR 0 1
31409: ST_TO_ADDR
// s_arr := [ tmp ] ;
31410: LD_ADDR_VAR 0 7
31414: PUSH
31415: LD_VAR 0 6
31419: PUSH
31420: EMPTY
31421: LIST
31422: ST_TO_ADDR
// for i = 1 to pos - 1 do
31423: LD_ADDR_VAR 0 5
31427: PUSH
31428: DOUBLE
31429: LD_INT 1
31431: DEC
31432: ST_TO_ADDR
31433: LD_VAR 0 2
31437: PUSH
31438: LD_INT 1
31440: MINUS
31441: PUSH
31442: FOR_TO
31443: IFFALSE 31488
// begin tmp := tmp [ pos [ i ] ] ;
31445: LD_ADDR_VAR 0 6
31449: PUSH
31450: LD_VAR 0 6
31454: PUSH
31455: LD_VAR 0 2
31459: PUSH
31460: LD_VAR 0 5
31464: ARRAY
31465: ARRAY
31466: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31467: LD_ADDR_VAR 0 7
31471: PUSH
31472: LD_VAR 0 7
31476: PUSH
31477: LD_VAR 0 6
31481: PUSH
31482: EMPTY
31483: LIST
31484: ADD
31485: ST_TO_ADDR
// end ;
31486: GO 31442
31488: POP
31489: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31490: LD_ADDR_VAR 0 6
31494: PUSH
31495: LD_VAR 0 6
31499: PPUSH
31500: LD_VAR 0 2
31504: PUSH
31505: LD_VAR 0 2
31509: ARRAY
31510: PPUSH
31511: LD_VAR 0 3
31515: PPUSH
31516: CALL_OW 1
31520: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31521: LD_ADDR_VAR 0 7
31525: PUSH
31526: LD_VAR 0 7
31530: PPUSH
31531: LD_VAR 0 7
31535: PPUSH
31536: LD_VAR 0 6
31540: PPUSH
31541: CALL_OW 1
31545: ST_TO_ADDR
// for i = s_arr downto 2 do
31546: LD_ADDR_VAR 0 5
31550: PUSH
31551: DOUBLE
31552: LD_VAR 0 7
31556: INC
31557: ST_TO_ADDR
31558: LD_INT 2
31560: PUSH
31561: FOR_DOWNTO
31562: IFFALSE 31646
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31564: LD_ADDR_VAR 0 6
31568: PUSH
31569: LD_VAR 0 7
31573: PUSH
31574: LD_VAR 0 5
31578: PUSH
31579: LD_INT 1
31581: MINUS
31582: ARRAY
31583: PPUSH
31584: LD_VAR 0 2
31588: PUSH
31589: LD_VAR 0 5
31593: PUSH
31594: LD_INT 1
31596: MINUS
31597: ARRAY
31598: PPUSH
31599: LD_VAR 0 7
31603: PUSH
31604: LD_VAR 0 5
31608: ARRAY
31609: PPUSH
31610: CALL_OW 1
31614: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31615: LD_ADDR_VAR 0 7
31619: PUSH
31620: LD_VAR 0 7
31624: PPUSH
31625: LD_VAR 0 5
31629: PUSH
31630: LD_INT 1
31632: MINUS
31633: PPUSH
31634: LD_VAR 0 6
31638: PPUSH
31639: CALL_OW 1
31643: ST_TO_ADDR
// end ;
31644: GO 31561
31646: POP
31647: POP
// result := s_arr [ 1 ] ;
31648: LD_ADDR_VAR 0 4
31652: PUSH
31653: LD_VAR 0 7
31657: PUSH
31658: LD_INT 1
31660: ARRAY
31661: ST_TO_ADDR
// end ; end ;
31662: LD_VAR 0 4
31666: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31667: LD_INT 0
31669: PPUSH
31670: PPUSH
// if not list then
31671: LD_VAR 0 1
31675: NOT
31676: IFFALSE 31680
// exit ;
31678: GO 31771
// i := list [ pos1 ] ;
31680: LD_ADDR_VAR 0 5
31684: PUSH
31685: LD_VAR 0 1
31689: PUSH
31690: LD_VAR 0 2
31694: ARRAY
31695: ST_TO_ADDR
// if not i then
31696: LD_VAR 0 5
31700: NOT
31701: IFFALSE 31705
// exit ;
31703: GO 31771
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31705: LD_ADDR_VAR 0 1
31709: PUSH
31710: LD_VAR 0 1
31714: PPUSH
31715: LD_VAR 0 2
31719: PPUSH
31720: LD_VAR 0 1
31724: PUSH
31725: LD_VAR 0 3
31729: ARRAY
31730: PPUSH
31731: CALL_OW 1
31735: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31736: LD_ADDR_VAR 0 1
31740: PUSH
31741: LD_VAR 0 1
31745: PPUSH
31746: LD_VAR 0 3
31750: PPUSH
31751: LD_VAR 0 5
31755: PPUSH
31756: CALL_OW 1
31760: ST_TO_ADDR
// result := list ;
31761: LD_ADDR_VAR 0 4
31765: PUSH
31766: LD_VAR 0 1
31770: ST_TO_ADDR
// end ;
31771: LD_VAR 0 4
31775: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31776: LD_INT 0
31778: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31779: LD_ADDR_VAR 0 5
31783: PUSH
31784: LD_VAR 0 1
31788: PPUSH
31789: CALL_OW 250
31793: PPUSH
31794: LD_VAR 0 1
31798: PPUSH
31799: CALL_OW 251
31803: PPUSH
31804: LD_VAR 0 2
31808: PPUSH
31809: LD_VAR 0 3
31813: PPUSH
31814: LD_VAR 0 4
31818: PPUSH
31819: CALL 32197 0 5
31823: ST_TO_ADDR
// end ;
31824: LD_VAR 0 5
31828: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31829: LD_INT 0
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
// if not list or not unit then
31835: LD_VAR 0 2
31839: NOT
31840: PUSH
31841: LD_VAR 0 1
31845: NOT
31846: OR
31847: IFFALSE 31851
// exit ;
31849: GO 32192
// result := [ ] ;
31851: LD_ADDR_VAR 0 5
31855: PUSH
31856: EMPTY
31857: ST_TO_ADDR
// for i in list do
31858: LD_ADDR_VAR 0 6
31862: PUSH
31863: LD_VAR 0 2
31867: PUSH
31868: FOR_IN
31869: IFFALSE 32087
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31871: LD_ADDR_VAR 0 8
31875: PUSH
31876: LD_VAR 0 1
31880: PPUSH
31881: LD_VAR 0 6
31885: PUSH
31886: LD_INT 1
31888: ARRAY
31889: PPUSH
31890: LD_VAR 0 6
31894: PUSH
31895: LD_INT 2
31897: ARRAY
31898: PPUSH
31899: CALL_OW 297
31903: ST_TO_ADDR
// if not Count ( result ) then
31904: LD_VAR 0 5
31908: PPUSH
31909: CALL 28481 0 1
31913: NOT
31914: IFFALSE 31947
// begin result := Join ( result , [ i , tmp ] ) ;
31916: LD_ADDR_VAR 0 5
31920: PUSH
31921: LD_VAR 0 5
31925: PPUSH
31926: LD_VAR 0 6
31930: PUSH
31931: LD_VAR 0 8
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PPUSH
31940: CALL 64070 0 2
31944: ST_TO_ADDR
// continue ;
31945: GO 31868
// end ; if result [ result ] [ 2 ] <= tmp then
31947: LD_VAR 0 5
31951: PUSH
31952: LD_VAR 0 5
31956: ARRAY
31957: PUSH
31958: LD_INT 2
31960: ARRAY
31961: PUSH
31962: LD_VAR 0 8
31966: LESSEQUAL
31967: IFFALSE 32000
// result := Join ( result , [ i , tmp ] ) else
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: LD_VAR 0 5
31978: PPUSH
31979: LD_VAR 0 6
31983: PUSH
31984: LD_VAR 0 8
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PPUSH
31993: CALL 64070 0 2
31997: ST_TO_ADDR
31998: GO 32085
// begin for j := 1 to Count ( result ) do
32000: LD_ADDR_VAR 0 7
32004: PUSH
32005: DOUBLE
32006: LD_INT 1
32008: DEC
32009: ST_TO_ADDR
32010: LD_VAR 0 5
32014: PPUSH
32015: CALL 28481 0 1
32019: PUSH
32020: FOR_TO
32021: IFFALSE 32083
// begin if tmp < result [ j ] [ 2 ] then
32023: LD_VAR 0 8
32027: PUSH
32028: LD_VAR 0 5
32032: PUSH
32033: LD_VAR 0 7
32037: ARRAY
32038: PUSH
32039: LD_INT 2
32041: ARRAY
32042: LESS
32043: IFFALSE 32081
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32045: LD_ADDR_VAR 0 5
32049: PUSH
32050: LD_VAR 0 5
32054: PPUSH
32055: LD_VAR 0 7
32059: PPUSH
32060: LD_VAR 0 6
32064: PUSH
32065: LD_VAR 0 8
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PPUSH
32074: CALL_OW 2
32078: ST_TO_ADDR
// break ;
32079: GO 32083
// end ; end ;
32081: GO 32020
32083: POP
32084: POP
// end ; end ;
32085: GO 31868
32087: POP
32088: POP
// if result and not asc then
32089: LD_VAR 0 5
32093: PUSH
32094: LD_VAR 0 3
32098: NOT
32099: AND
32100: IFFALSE 32117
// result := ReverseArray ( result ) ;
32102: LD_ADDR_VAR 0 5
32106: PUSH
32107: LD_VAR 0 5
32111: PPUSH
32112: CALL 59357 0 1
32116: ST_TO_ADDR
// tmp := [ ] ;
32117: LD_ADDR_VAR 0 8
32121: PUSH
32122: EMPTY
32123: ST_TO_ADDR
// if mode then
32124: LD_VAR 0 4
32128: IFFALSE 32192
// begin for i := 1 to result do
32130: LD_ADDR_VAR 0 6
32134: PUSH
32135: DOUBLE
32136: LD_INT 1
32138: DEC
32139: ST_TO_ADDR
32140: LD_VAR 0 5
32144: PUSH
32145: FOR_TO
32146: IFFALSE 32180
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32148: LD_ADDR_VAR 0 8
32152: PUSH
32153: LD_VAR 0 8
32157: PPUSH
32158: LD_VAR 0 5
32162: PUSH
32163: LD_VAR 0 6
32167: ARRAY
32168: PUSH
32169: LD_INT 1
32171: ARRAY
32172: PPUSH
32173: CALL 64070 0 2
32177: ST_TO_ADDR
32178: GO 32145
32180: POP
32181: POP
// result := tmp ;
32182: LD_ADDR_VAR 0 5
32186: PUSH
32187: LD_VAR 0 8
32191: ST_TO_ADDR
// end ; end ;
32192: LD_VAR 0 5
32196: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32197: LD_INT 0
32199: PPUSH
32200: PPUSH
32201: PPUSH
32202: PPUSH
// if not list then
32203: LD_VAR 0 3
32207: NOT
32208: IFFALSE 32212
// exit ;
32210: GO 32600
// result := [ ] ;
32212: LD_ADDR_VAR 0 6
32216: PUSH
32217: EMPTY
32218: ST_TO_ADDR
// for i in list do
32219: LD_ADDR_VAR 0 7
32223: PUSH
32224: LD_VAR 0 3
32228: PUSH
32229: FOR_IN
32230: IFFALSE 32432
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32232: LD_ADDR_VAR 0 9
32236: PUSH
32237: LD_VAR 0 7
32241: PPUSH
32242: LD_VAR 0 1
32246: PPUSH
32247: LD_VAR 0 2
32251: PPUSH
32252: CALL_OW 297
32256: ST_TO_ADDR
// if not result then
32257: LD_VAR 0 6
32261: NOT
32262: IFFALSE 32288
// result := [ [ i , tmp ] ] else
32264: LD_ADDR_VAR 0 6
32268: PUSH
32269: LD_VAR 0 7
32273: PUSH
32274: LD_VAR 0 9
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: EMPTY
32284: LIST
32285: ST_TO_ADDR
32286: GO 32430
// begin if result [ result ] [ 2 ] < tmp then
32288: LD_VAR 0 6
32292: PUSH
32293: LD_VAR 0 6
32297: ARRAY
32298: PUSH
32299: LD_INT 2
32301: ARRAY
32302: PUSH
32303: LD_VAR 0 9
32307: LESS
32308: IFFALSE 32350
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32310: LD_ADDR_VAR 0 6
32314: PUSH
32315: LD_VAR 0 6
32319: PPUSH
32320: LD_VAR 0 6
32324: PUSH
32325: LD_INT 1
32327: PLUS
32328: PPUSH
32329: LD_VAR 0 7
32333: PUSH
32334: LD_VAR 0 9
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PPUSH
32343: CALL_OW 2
32347: ST_TO_ADDR
32348: GO 32430
// for j = 1 to result do
32350: LD_ADDR_VAR 0 8
32354: PUSH
32355: DOUBLE
32356: LD_INT 1
32358: DEC
32359: ST_TO_ADDR
32360: LD_VAR 0 6
32364: PUSH
32365: FOR_TO
32366: IFFALSE 32428
// begin if tmp < result [ j ] [ 2 ] then
32368: LD_VAR 0 9
32372: PUSH
32373: LD_VAR 0 6
32377: PUSH
32378: LD_VAR 0 8
32382: ARRAY
32383: PUSH
32384: LD_INT 2
32386: ARRAY
32387: LESS
32388: IFFALSE 32426
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32390: LD_ADDR_VAR 0 6
32394: PUSH
32395: LD_VAR 0 6
32399: PPUSH
32400: LD_VAR 0 8
32404: PPUSH
32405: LD_VAR 0 7
32409: PUSH
32410: LD_VAR 0 9
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PPUSH
32419: CALL_OW 2
32423: ST_TO_ADDR
// break ;
32424: GO 32428
// end ; end ;
32426: GO 32365
32428: POP
32429: POP
// end ; end ;
32430: GO 32229
32432: POP
32433: POP
// if result and not asc then
32434: LD_VAR 0 6
32438: PUSH
32439: LD_VAR 0 4
32443: NOT
32444: AND
32445: IFFALSE 32520
// begin tmp := result ;
32447: LD_ADDR_VAR 0 9
32451: PUSH
32452: LD_VAR 0 6
32456: ST_TO_ADDR
// for i = tmp downto 1 do
32457: LD_ADDR_VAR 0 7
32461: PUSH
32462: DOUBLE
32463: LD_VAR 0 9
32467: INC
32468: ST_TO_ADDR
32469: LD_INT 1
32471: PUSH
32472: FOR_DOWNTO
32473: IFFALSE 32518
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32475: LD_ADDR_VAR 0 6
32479: PUSH
32480: LD_VAR 0 6
32484: PPUSH
32485: LD_VAR 0 9
32489: PUSH
32490: LD_VAR 0 7
32494: MINUS
32495: PUSH
32496: LD_INT 1
32498: PLUS
32499: PPUSH
32500: LD_VAR 0 9
32504: PUSH
32505: LD_VAR 0 7
32509: ARRAY
32510: PPUSH
32511: CALL_OW 1
32515: ST_TO_ADDR
32516: GO 32472
32518: POP
32519: POP
// end ; tmp := [ ] ;
32520: LD_ADDR_VAR 0 9
32524: PUSH
32525: EMPTY
32526: ST_TO_ADDR
// if mode then
32527: LD_VAR 0 5
32531: IFFALSE 32600
// begin for i = 1 to result do
32533: LD_ADDR_VAR 0 7
32537: PUSH
32538: DOUBLE
32539: LD_INT 1
32541: DEC
32542: ST_TO_ADDR
32543: LD_VAR 0 6
32547: PUSH
32548: FOR_TO
32549: IFFALSE 32588
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32551: LD_ADDR_VAR 0 9
32555: PUSH
32556: LD_VAR 0 9
32560: PPUSH
32561: LD_VAR 0 7
32565: PPUSH
32566: LD_VAR 0 6
32570: PUSH
32571: LD_VAR 0 7
32575: ARRAY
32576: PUSH
32577: LD_INT 1
32579: ARRAY
32580: PPUSH
32581: CALL_OW 1
32585: ST_TO_ADDR
32586: GO 32548
32588: POP
32589: POP
// result := tmp ;
32590: LD_ADDR_VAR 0 6
32594: PUSH
32595: LD_VAR 0 9
32599: ST_TO_ADDR
// end ; end ;
32600: LD_VAR 0 6
32604: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32605: LD_INT 0
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
32612: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32613: LD_ADDR_VAR 0 5
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: ST_TO_ADDR
// if not x or not y then
32635: LD_VAR 0 2
32639: NOT
32640: PUSH
32641: LD_VAR 0 3
32645: NOT
32646: OR
32647: IFFALSE 32651
// exit ;
32649: GO 34301
// if not range then
32651: LD_VAR 0 4
32655: NOT
32656: IFFALSE 32666
// range := 10 ;
32658: LD_ADDR_VAR 0 4
32662: PUSH
32663: LD_INT 10
32665: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32666: LD_ADDR_VAR 0 8
32670: PUSH
32671: LD_INT 81
32673: PUSH
32674: LD_VAR 0 1
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 92
32685: PUSH
32686: LD_VAR 0 2
32690: PUSH
32691: LD_VAR 0 3
32695: PUSH
32696: LD_VAR 0 4
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: LD_INT 21
32712: PUSH
32713: LD_INT 3
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: PPUSH
32729: CALL_OW 69
32733: ST_TO_ADDR
// if not tmp then
32734: LD_VAR 0 8
32738: NOT
32739: IFFALSE 32743
// exit ;
32741: GO 34301
// for i in tmp do
32743: LD_ADDR_VAR 0 6
32747: PUSH
32748: LD_VAR 0 8
32752: PUSH
32753: FOR_IN
32754: IFFALSE 34276
// begin points := [ 0 , 0 , 0 ] ;
32756: LD_ADDR_VAR 0 9
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// bpoints := 1 ;
32775: LD_ADDR_VAR 0 10
32779: PUSH
32780: LD_INT 1
32782: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32783: LD_VAR 0 6
32787: PPUSH
32788: CALL_OW 247
32792: PUSH
32793: LD_INT 1
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 33379
32801: POP
// begin if GetClass ( i ) = 1 then
32802: LD_VAR 0 6
32806: PPUSH
32807: CALL_OW 257
32811: PUSH
32812: LD_INT 1
32814: EQUAL
32815: IFFALSE 32836
// points := [ 10 , 5 , 3 ] ;
32817: LD_ADDR_VAR 0 9
32821: PUSH
32822: LD_INT 10
32824: PUSH
32825: LD_INT 5
32827: PUSH
32828: LD_INT 3
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32836: LD_VAR 0 6
32840: PPUSH
32841: CALL_OW 257
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 4
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: LIST
32859: IN
32860: IFFALSE 32881
// points := [ 3 , 2 , 1 ] ;
32862: LD_ADDR_VAR 0 9
32866: PUSH
32867: LD_INT 3
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: LIST
32880: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32881: LD_VAR 0 6
32885: PPUSH
32886: CALL_OW 257
32890: PUSH
32891: LD_INT 5
32893: EQUAL
32894: IFFALSE 32915
// points := [ 130 , 5 , 2 ] ;
32896: LD_ADDR_VAR 0 9
32900: PUSH
32901: LD_INT 130
32903: PUSH
32904: LD_INT 5
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32915: LD_VAR 0 6
32919: PPUSH
32920: CALL_OW 257
32924: PUSH
32925: LD_INT 8
32927: EQUAL
32928: IFFALSE 32949
// points := [ 35 , 35 , 30 ] ;
32930: LD_ADDR_VAR 0 9
32934: PUSH
32935: LD_INT 35
32937: PUSH
32938: LD_INT 35
32940: PUSH
32941: LD_INT 30
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: LIST
32948: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32949: LD_VAR 0 6
32953: PPUSH
32954: CALL_OW 257
32958: PUSH
32959: LD_INT 9
32961: EQUAL
32962: IFFALSE 32983
// points := [ 20 , 55 , 40 ] ;
32964: LD_ADDR_VAR 0 9
32968: PUSH
32969: LD_INT 20
32971: PUSH
32972: LD_INT 55
32974: PUSH
32975: LD_INT 40
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32983: LD_VAR 0 6
32987: PPUSH
32988: CALL_OW 257
32992: PUSH
32993: LD_INT 12
32995: PUSH
32996: LD_INT 16
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: IN
33003: IFFALSE 33024
// points := [ 5 , 3 , 2 ] ;
33005: LD_ADDR_VAR 0 9
33009: PUSH
33010: LD_INT 5
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33024: LD_VAR 0 6
33028: PPUSH
33029: CALL_OW 257
33033: PUSH
33034: LD_INT 17
33036: EQUAL
33037: IFFALSE 33058
// points := [ 100 , 50 , 75 ] ;
33039: LD_ADDR_VAR 0 9
33043: PUSH
33044: LD_INT 100
33046: PUSH
33047: LD_INT 50
33049: PUSH
33050: LD_INT 75
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33058: LD_VAR 0 6
33062: PPUSH
33063: CALL_OW 257
33067: PUSH
33068: LD_INT 15
33070: EQUAL
33071: IFFALSE 33092
// points := [ 10 , 5 , 3 ] ;
33073: LD_ADDR_VAR 0 9
33077: PUSH
33078: LD_INT 10
33080: PUSH
33081: LD_INT 5
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33092: LD_VAR 0 6
33096: PPUSH
33097: CALL_OW 257
33101: PUSH
33102: LD_INT 14
33104: EQUAL
33105: IFFALSE 33126
// points := [ 10 , 0 , 0 ] ;
33107: LD_ADDR_VAR 0 9
33111: PUSH
33112: LD_INT 10
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33126: LD_VAR 0 6
33130: PPUSH
33131: CALL_OW 257
33135: PUSH
33136: LD_INT 11
33138: EQUAL
33139: IFFALSE 33160
// points := [ 30 , 10 , 5 ] ;
33141: LD_ADDR_VAR 0 9
33145: PUSH
33146: LD_INT 30
33148: PUSH
33149: LD_INT 10
33151: PUSH
33152: LD_INT 5
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33160: LD_VAR 0 1
33164: PPUSH
33165: LD_INT 5
33167: PPUSH
33168: CALL_OW 321
33172: PUSH
33173: LD_INT 2
33175: EQUAL
33176: IFFALSE 33193
// bpoints := bpoints * 1.8 ;
33178: LD_ADDR_VAR 0 10
33182: PUSH
33183: LD_VAR 0 10
33187: PUSH
33188: LD_REAL  1.80000000000000E+0000
33191: MUL
33192: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33193: LD_VAR 0 6
33197: PPUSH
33198: CALL_OW 257
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: LD_INT 3
33211: PUSH
33212: LD_INT 4
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: IN
33221: PUSH
33222: LD_VAR 0 1
33226: PPUSH
33227: LD_INT 51
33229: PPUSH
33230: CALL_OW 321
33234: PUSH
33235: LD_INT 2
33237: EQUAL
33238: AND
33239: IFFALSE 33256
// bpoints := bpoints * 1.2 ;
33241: LD_ADDR_VAR 0 10
33245: PUSH
33246: LD_VAR 0 10
33250: PUSH
33251: LD_REAL  1.20000000000000E+0000
33254: MUL
33255: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33256: LD_VAR 0 6
33260: PPUSH
33261: CALL_OW 257
33265: PUSH
33266: LD_INT 5
33268: PUSH
33269: LD_INT 7
33271: PUSH
33272: LD_INT 9
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: IN
33280: PUSH
33281: LD_VAR 0 1
33285: PPUSH
33286: LD_INT 52
33288: PPUSH
33289: CALL_OW 321
33293: PUSH
33294: LD_INT 2
33296: EQUAL
33297: AND
33298: IFFALSE 33315
// bpoints := bpoints * 1.5 ;
33300: LD_ADDR_VAR 0 10
33304: PUSH
33305: LD_VAR 0 10
33309: PUSH
33310: LD_REAL  1.50000000000000E+0000
33313: MUL
33314: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33315: LD_VAR 0 1
33319: PPUSH
33320: LD_INT 66
33322: PPUSH
33323: CALL_OW 321
33327: PUSH
33328: LD_INT 2
33330: EQUAL
33331: IFFALSE 33348
// bpoints := bpoints * 1.1 ;
33333: LD_ADDR_VAR 0 10
33337: PUSH
33338: LD_VAR 0 10
33342: PUSH
33343: LD_REAL  1.10000000000000E+0000
33346: MUL
33347: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33348: LD_ADDR_VAR 0 10
33352: PUSH
33353: LD_VAR 0 10
33357: PUSH
33358: LD_VAR 0 6
33362: PPUSH
33363: LD_INT 1
33365: PPUSH
33366: CALL_OW 259
33370: PUSH
33371: LD_REAL  1.15000000000000E+0000
33374: MUL
33375: MUL
33376: ST_TO_ADDR
// end ; unit_vehicle :
33377: GO 34205
33379: LD_INT 2
33381: DOUBLE
33382: EQUAL
33383: IFTRUE 33387
33385: GO 34193
33387: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33388: LD_VAR 0 6
33392: PPUSH
33393: CALL_OW 264
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 42
33403: PUSH
33404: LD_INT 24
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: IN
33412: IFFALSE 33433
// points := [ 25 , 5 , 3 ] ;
33414: LD_ADDR_VAR 0 9
33418: PUSH
33419: LD_INT 25
33421: PUSH
33422: LD_INT 5
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33433: LD_VAR 0 6
33437: PPUSH
33438: CALL_OW 264
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: LD_INT 43
33448: PUSH
33449: LD_INT 25
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: IN
33457: IFFALSE 33478
// points := [ 40 , 15 , 5 ] ;
33459: LD_ADDR_VAR 0 9
33463: PUSH
33464: LD_INT 40
33466: PUSH
33467: LD_INT 15
33469: PUSH
33470: LD_INT 5
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33478: LD_VAR 0 6
33482: PPUSH
33483: CALL_OW 264
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: LD_INT 23
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: IN
33498: IFFALSE 33519
// points := [ 7 , 25 , 8 ] ;
33500: LD_ADDR_VAR 0 9
33504: PUSH
33505: LD_INT 7
33507: PUSH
33508: LD_INT 25
33510: PUSH
33511: LD_INT 8
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33519: LD_VAR 0 6
33523: PPUSH
33524: CALL_OW 264
33528: PUSH
33529: LD_INT 5
33531: PUSH
33532: LD_INT 27
33534: PUSH
33535: LD_INT 44
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: LIST
33542: IN
33543: IFFALSE 33564
// points := [ 14 , 50 , 16 ] ;
33545: LD_ADDR_VAR 0 9
33549: PUSH
33550: LD_INT 14
33552: PUSH
33553: LD_INT 50
33555: PUSH
33556: LD_INT 16
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: LIST
33563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33564: LD_VAR 0 6
33568: PPUSH
33569: CALL_OW 264
33573: PUSH
33574: LD_INT 6
33576: PUSH
33577: LD_INT 46
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: IN
33584: IFFALSE 33605
// points := [ 32 , 120 , 70 ] ;
33586: LD_ADDR_VAR 0 9
33590: PUSH
33591: LD_INT 32
33593: PUSH
33594: LD_INT 120
33596: PUSH
33597: LD_INT 70
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33605: LD_VAR 0 6
33609: PPUSH
33610: CALL_OW 264
33614: PUSH
33615: LD_INT 7
33617: PUSH
33618: LD_INT 28
33620: PUSH
33621: LD_INT 45
33623: PUSH
33624: LD_INT 92
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: IN
33633: IFFALSE 33654
// points := [ 35 , 20 , 45 ] ;
33635: LD_ADDR_VAR 0 9
33639: PUSH
33640: LD_INT 35
33642: PUSH
33643: LD_INT 20
33645: PUSH
33646: LD_INT 45
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: LIST
33653: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33654: LD_VAR 0 6
33658: PPUSH
33659: CALL_OW 264
33663: PUSH
33664: LD_INT 47
33666: PUSH
33667: EMPTY
33668: LIST
33669: IN
33670: IFFALSE 33691
// points := [ 67 , 45 , 75 ] ;
33672: LD_ADDR_VAR 0 9
33676: PUSH
33677: LD_INT 67
33679: PUSH
33680: LD_INT 45
33682: PUSH
33683: LD_INT 75
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33691: LD_VAR 0 6
33695: PPUSH
33696: CALL_OW 264
33700: PUSH
33701: LD_INT 26
33703: PUSH
33704: EMPTY
33705: LIST
33706: IN
33707: IFFALSE 33728
// points := [ 120 , 30 , 80 ] ;
33709: LD_ADDR_VAR 0 9
33713: PUSH
33714: LD_INT 120
33716: PUSH
33717: LD_INT 30
33719: PUSH
33720: LD_INT 80
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33728: LD_VAR 0 6
33732: PPUSH
33733: CALL_OW 264
33737: PUSH
33738: LD_INT 22
33740: PUSH
33741: EMPTY
33742: LIST
33743: IN
33744: IFFALSE 33765
// points := [ 40 , 1 , 1 ] ;
33746: LD_ADDR_VAR 0 9
33750: PUSH
33751: LD_INT 40
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33765: LD_VAR 0 6
33769: PPUSH
33770: CALL_OW 264
33774: PUSH
33775: LD_INT 29
33777: PUSH
33778: EMPTY
33779: LIST
33780: IN
33781: IFFALSE 33802
// points := [ 70 , 200 , 400 ] ;
33783: LD_ADDR_VAR 0 9
33787: PUSH
33788: LD_INT 70
33790: PUSH
33791: LD_INT 200
33793: PUSH
33794: LD_INT 400
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33802: LD_VAR 0 6
33806: PPUSH
33807: CALL_OW 264
33811: PUSH
33812: LD_INT 14
33814: PUSH
33815: LD_INT 53
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: IN
33822: IFFALSE 33843
// points := [ 40 , 10 , 20 ] ;
33824: LD_ADDR_VAR 0 9
33828: PUSH
33829: LD_INT 40
33831: PUSH
33832: LD_INT 10
33834: PUSH
33835: LD_INT 20
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33843: LD_VAR 0 6
33847: PPUSH
33848: CALL_OW 264
33852: PUSH
33853: LD_INT 9
33855: PUSH
33856: EMPTY
33857: LIST
33858: IN
33859: IFFALSE 33880
// points := [ 5 , 70 , 20 ] ;
33861: LD_ADDR_VAR 0 9
33865: PUSH
33866: LD_INT 5
33868: PUSH
33869: LD_INT 70
33871: PUSH
33872: LD_INT 20
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33880: LD_VAR 0 6
33884: PPUSH
33885: CALL_OW 264
33889: PUSH
33890: LD_INT 10
33892: PUSH
33893: EMPTY
33894: LIST
33895: IN
33896: IFFALSE 33917
// points := [ 35 , 110 , 70 ] ;
33898: LD_ADDR_VAR 0 9
33902: PUSH
33903: LD_INT 35
33905: PUSH
33906: LD_INT 110
33908: PUSH
33909: LD_INT 70
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33917: LD_VAR 0 6
33921: PPUSH
33922: CALL_OW 265
33926: PUSH
33927: LD_INT 25
33929: EQUAL
33930: IFFALSE 33951
// points := [ 80 , 65 , 100 ] ;
33932: LD_ADDR_VAR 0 9
33936: PUSH
33937: LD_INT 80
33939: PUSH
33940: LD_INT 65
33942: PUSH
33943: LD_INT 100
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33951: LD_VAR 0 6
33955: PPUSH
33956: CALL_OW 263
33960: PUSH
33961: LD_INT 1
33963: EQUAL
33964: IFFALSE 33999
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33966: LD_ADDR_VAR 0 10
33970: PUSH
33971: LD_VAR 0 10
33975: PUSH
33976: LD_VAR 0 6
33980: PPUSH
33981: CALL_OW 311
33985: PPUSH
33986: LD_INT 3
33988: PPUSH
33989: CALL_OW 259
33993: PUSH
33994: LD_INT 4
33996: MUL
33997: MUL
33998: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33999: LD_VAR 0 6
34003: PPUSH
34004: CALL_OW 263
34008: PUSH
34009: LD_INT 2
34011: EQUAL
34012: IFFALSE 34063
// begin j := IsControledBy ( i ) ;
34014: LD_ADDR_VAR 0 7
34018: PUSH
34019: LD_VAR 0 6
34023: PPUSH
34024: CALL_OW 312
34028: ST_TO_ADDR
// if j then
34029: LD_VAR 0 7
34033: IFFALSE 34063
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34035: LD_ADDR_VAR 0 10
34039: PUSH
34040: LD_VAR 0 10
34044: PUSH
34045: LD_VAR 0 7
34049: PPUSH
34050: LD_INT 3
34052: PPUSH
34053: CALL_OW 259
34057: PUSH
34058: LD_INT 3
34060: MUL
34061: MUL
34062: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34063: LD_VAR 0 6
34067: PPUSH
34068: CALL_OW 264
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: LD_INT 6
34078: PUSH
34079: LD_INT 46
34081: PUSH
34082: LD_INT 44
34084: PUSH
34085: LD_INT 47
34087: PUSH
34088: LD_INT 45
34090: PUSH
34091: LD_INT 28
34093: PUSH
34094: LD_INT 7
34096: PUSH
34097: LD_INT 27
34099: PUSH
34100: LD_INT 29
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: IN
34115: PUSH
34116: LD_VAR 0 1
34120: PPUSH
34121: LD_INT 52
34123: PPUSH
34124: CALL_OW 321
34128: PUSH
34129: LD_INT 2
34131: EQUAL
34132: AND
34133: IFFALSE 34150
// bpoints := bpoints * 1.2 ;
34135: LD_ADDR_VAR 0 10
34139: PUSH
34140: LD_VAR 0 10
34144: PUSH
34145: LD_REAL  1.20000000000000E+0000
34148: MUL
34149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34150: LD_VAR 0 6
34154: PPUSH
34155: CALL_OW 264
34159: PUSH
34160: LD_INT 6
34162: PUSH
34163: LD_INT 46
34165: PUSH
34166: LD_INT 47
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: IN
34174: IFFALSE 34191
// bpoints := bpoints * 1.2 ;
34176: LD_ADDR_VAR 0 10
34180: PUSH
34181: LD_VAR 0 10
34185: PUSH
34186: LD_REAL  1.20000000000000E+0000
34189: MUL
34190: ST_TO_ADDR
// end ; unit_building :
34191: GO 34205
34193: LD_INT 3
34195: DOUBLE
34196: EQUAL
34197: IFTRUE 34201
34199: GO 34204
34201: POP
// ; end ;
34202: GO 34205
34204: POP
// for j = 1 to 3 do
34205: LD_ADDR_VAR 0 7
34209: PUSH
34210: DOUBLE
34211: LD_INT 1
34213: DEC
34214: ST_TO_ADDR
34215: LD_INT 3
34217: PUSH
34218: FOR_TO
34219: IFFALSE 34272
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34221: LD_ADDR_VAR 0 5
34225: PUSH
34226: LD_VAR 0 5
34230: PPUSH
34231: LD_VAR 0 7
34235: PPUSH
34236: LD_VAR 0 5
34240: PUSH
34241: LD_VAR 0 7
34245: ARRAY
34246: PUSH
34247: LD_VAR 0 9
34251: PUSH
34252: LD_VAR 0 7
34256: ARRAY
34257: PUSH
34258: LD_VAR 0 10
34262: MUL
34263: PLUS
34264: PPUSH
34265: CALL_OW 1
34269: ST_TO_ADDR
34270: GO 34218
34272: POP
34273: POP
// end ;
34274: GO 32753
34276: POP
34277: POP
// result := Replace ( result , 4 , tmp ) ;
34278: LD_ADDR_VAR 0 5
34282: PUSH
34283: LD_VAR 0 5
34287: PPUSH
34288: LD_INT 4
34290: PPUSH
34291: LD_VAR 0 8
34295: PPUSH
34296: CALL_OW 1
34300: ST_TO_ADDR
// end ;
34301: LD_VAR 0 5
34305: RET
// export function DangerAtRange ( unit , range ) ; begin
34306: LD_INT 0
34308: PPUSH
// if not unit then
34309: LD_VAR 0 1
34313: NOT
34314: IFFALSE 34318
// exit ;
34316: GO 34363
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 255
34332: PPUSH
34333: LD_VAR 0 1
34337: PPUSH
34338: CALL_OW 250
34342: PPUSH
34343: LD_VAR 0 1
34347: PPUSH
34348: CALL_OW 251
34352: PPUSH
34353: LD_VAR 0 2
34357: PPUSH
34358: CALL 32605 0 4
34362: ST_TO_ADDR
// end ;
34363: LD_VAR 0 3
34367: RET
// export function DangerInArea ( side , area ) ; begin
34368: LD_INT 0
34370: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34371: LD_ADDR_VAR 0 3
34375: PUSH
34376: LD_VAR 0 2
34380: PPUSH
34381: LD_INT 81
34383: PUSH
34384: LD_VAR 0 1
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PPUSH
34393: CALL_OW 70
34397: ST_TO_ADDR
// end ;
34398: LD_VAR 0 3
34402: RET
// export function IsExtension ( b ) ; begin
34403: LD_INT 0
34405: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34406: LD_ADDR_VAR 0 2
34410: PUSH
34411: LD_VAR 0 1
34415: PUSH
34416: LD_INT 23
34418: PUSH
34419: LD_INT 20
34421: PUSH
34422: LD_INT 22
34424: PUSH
34425: LD_INT 17
34427: PUSH
34428: LD_INT 24
34430: PUSH
34431: LD_INT 21
34433: PUSH
34434: LD_INT 19
34436: PUSH
34437: LD_INT 16
34439: PUSH
34440: LD_INT 25
34442: PUSH
34443: LD_INT 18
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: IN
34458: ST_TO_ADDR
// end ;
34459: LD_VAR 0 2
34463: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34464: LD_INT 0
34466: PPUSH
34467: PPUSH
34468: PPUSH
// result := [ ] ;
34469: LD_ADDR_VAR 0 4
34473: PUSH
34474: EMPTY
34475: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34476: LD_ADDR_VAR 0 5
34480: PUSH
34481: LD_VAR 0 2
34485: PPUSH
34486: LD_INT 21
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PPUSH
34496: CALL_OW 70
34500: ST_TO_ADDR
// if not tmp then
34501: LD_VAR 0 5
34505: NOT
34506: IFFALSE 34510
// exit ;
34508: GO 34574
// if checkLink then
34510: LD_VAR 0 3
34514: IFFALSE 34564
// begin for i in tmp do
34516: LD_ADDR_VAR 0 6
34520: PUSH
34521: LD_VAR 0 5
34525: PUSH
34526: FOR_IN
34527: IFFALSE 34562
// if GetBase ( i ) <> base then
34529: LD_VAR 0 6
34533: PPUSH
34534: CALL_OW 274
34538: PUSH
34539: LD_VAR 0 1
34543: NONEQUAL
34544: IFFALSE 34560
// ComLinkToBase ( base , i ) ;
34546: LD_VAR 0 1
34550: PPUSH
34551: LD_VAR 0 6
34555: PPUSH
34556: CALL_OW 169
34560: GO 34526
34562: POP
34563: POP
// end ; result := tmp ;
34564: LD_ADDR_VAR 0 4
34568: PUSH
34569: LD_VAR 0 5
34573: ST_TO_ADDR
// end ;
34574: LD_VAR 0 4
34578: RET
// export function ComComplete ( units , b ) ; var i ; begin
34579: LD_INT 0
34581: PPUSH
34582: PPUSH
// if not units then
34583: LD_VAR 0 1
34587: NOT
34588: IFFALSE 34592
// exit ;
34590: GO 34682
// for i in units do
34592: LD_ADDR_VAR 0 4
34596: PUSH
34597: LD_VAR 0 1
34601: PUSH
34602: FOR_IN
34603: IFFALSE 34680
// if BuildingStatus ( b ) = bs_build then
34605: LD_VAR 0 2
34609: PPUSH
34610: CALL_OW 461
34614: PUSH
34615: LD_INT 1
34617: EQUAL
34618: IFFALSE 34678
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34620: LD_VAR 0 4
34624: PPUSH
34625: LD_STRING h
34627: PUSH
34628: LD_VAR 0 2
34632: PPUSH
34633: CALL_OW 250
34637: PUSH
34638: LD_VAR 0 2
34642: PPUSH
34643: CALL_OW 251
34647: PUSH
34648: LD_VAR 0 2
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: PUSH
34671: EMPTY
34672: LIST
34673: PPUSH
34674: CALL_OW 446
34678: GO 34602
34680: POP
34681: POP
// end ;
34682: LD_VAR 0 3
34686: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34687: LD_INT 0
34689: PPUSH
34690: PPUSH
34691: PPUSH
34692: PPUSH
34693: PPUSH
34694: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34695: LD_VAR 0 1
34699: NOT
34700: PUSH
34701: LD_VAR 0 1
34705: PPUSH
34706: CALL_OW 263
34710: PUSH
34711: LD_INT 2
34713: NONEQUAL
34714: OR
34715: IFFALSE 34719
// exit ;
34717: GO 35035
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34719: LD_ADDR_VAR 0 6
34723: PUSH
34724: LD_INT 22
34726: PUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL_OW 255
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: LD_INT 30
34746: PUSH
34747: LD_INT 36
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 34
34756: PUSH
34757: LD_INT 31
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 69
34777: ST_TO_ADDR
// if not tmp then
34778: LD_VAR 0 6
34782: NOT
34783: IFFALSE 34787
// exit ;
34785: GO 35035
// result := [ ] ;
34787: LD_ADDR_VAR 0 2
34791: PUSH
34792: EMPTY
34793: ST_TO_ADDR
// for i in tmp do
34794: LD_ADDR_VAR 0 3
34798: PUSH
34799: LD_VAR 0 6
34803: PUSH
34804: FOR_IN
34805: IFFALSE 34876
// begin t := UnitsInside ( i ) ;
34807: LD_ADDR_VAR 0 4
34811: PUSH
34812: LD_VAR 0 3
34816: PPUSH
34817: CALL_OW 313
34821: ST_TO_ADDR
// if t then
34822: LD_VAR 0 4
34826: IFFALSE 34874
// for j in t do
34828: LD_ADDR_VAR 0 7
34832: PUSH
34833: LD_VAR 0 4
34837: PUSH
34838: FOR_IN
34839: IFFALSE 34872
// result := Replace ( result , result + 1 , j ) ;
34841: LD_ADDR_VAR 0 2
34845: PUSH
34846: LD_VAR 0 2
34850: PPUSH
34851: LD_VAR 0 2
34855: PUSH
34856: LD_INT 1
34858: PLUS
34859: PPUSH
34860: LD_VAR 0 7
34864: PPUSH
34865: CALL_OW 1
34869: ST_TO_ADDR
34870: GO 34838
34872: POP
34873: POP
// end ;
34874: GO 34804
34876: POP
34877: POP
// if not result then
34878: LD_VAR 0 2
34882: NOT
34883: IFFALSE 34887
// exit ;
34885: GO 35035
// mech := result [ 1 ] ;
34887: LD_ADDR_VAR 0 5
34891: PUSH
34892: LD_VAR 0 2
34896: PUSH
34897: LD_INT 1
34899: ARRAY
34900: ST_TO_ADDR
// if result > 1 then
34901: LD_VAR 0 2
34905: PUSH
34906: LD_INT 1
34908: GREATER
34909: IFFALSE 35021
// begin for i = 2 to result do
34911: LD_ADDR_VAR 0 3
34915: PUSH
34916: DOUBLE
34917: LD_INT 2
34919: DEC
34920: ST_TO_ADDR
34921: LD_VAR 0 2
34925: PUSH
34926: FOR_TO
34927: IFFALSE 35019
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34929: LD_ADDR_VAR 0 4
34933: PUSH
34934: LD_VAR 0 2
34938: PUSH
34939: LD_VAR 0 3
34943: ARRAY
34944: PPUSH
34945: LD_INT 3
34947: PPUSH
34948: CALL_OW 259
34952: PUSH
34953: LD_VAR 0 2
34957: PUSH
34958: LD_VAR 0 3
34962: ARRAY
34963: PPUSH
34964: CALL_OW 432
34968: MINUS
34969: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34970: LD_VAR 0 4
34974: PUSH
34975: LD_VAR 0 5
34979: PPUSH
34980: LD_INT 3
34982: PPUSH
34983: CALL_OW 259
34987: PUSH
34988: LD_VAR 0 5
34992: PPUSH
34993: CALL_OW 432
34997: MINUS
34998: GREATEREQUAL
34999: IFFALSE 35017
// mech := result [ i ] ;
35001: LD_ADDR_VAR 0 5
35005: PUSH
35006: LD_VAR 0 2
35010: PUSH
35011: LD_VAR 0 3
35015: ARRAY
35016: ST_TO_ADDR
// end ;
35017: GO 34926
35019: POP
35020: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35021: LD_VAR 0 1
35025: PPUSH
35026: LD_VAR 0 5
35030: PPUSH
35031: CALL_OW 135
// end ;
35035: LD_VAR 0 2
35039: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35040: LD_INT 0
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
35046: PPUSH
35047: PPUSH
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
// result := [ ] ;
35055: LD_ADDR_VAR 0 7
35059: PUSH
35060: EMPTY
35061: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35062: LD_VAR 0 1
35066: PPUSH
35067: CALL_OW 266
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: IN
35082: NOT
35083: IFFALSE 35087
// exit ;
35085: GO 36721
// if name then
35087: LD_VAR 0 3
35091: IFFALSE 35107
// SetBName ( base_dep , name ) ;
35093: LD_VAR 0 1
35097: PPUSH
35098: LD_VAR 0 3
35102: PPUSH
35103: CALL_OW 500
// base := GetBase ( base_dep ) ;
35107: LD_ADDR_VAR 0 15
35111: PUSH
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 274
35121: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35122: LD_ADDR_VAR 0 16
35126: PUSH
35127: LD_VAR 0 1
35131: PPUSH
35132: CALL_OW 255
35136: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35137: LD_ADDR_VAR 0 17
35141: PUSH
35142: LD_VAR 0 1
35146: PPUSH
35147: CALL_OW 248
35151: ST_TO_ADDR
// if sources then
35152: LD_VAR 0 5
35156: IFFALSE 35203
// for i = 1 to 3 do
35158: LD_ADDR_VAR 0 8
35162: PUSH
35163: DOUBLE
35164: LD_INT 1
35166: DEC
35167: ST_TO_ADDR
35168: LD_INT 3
35170: PUSH
35171: FOR_TO
35172: IFFALSE 35201
// AddResourceType ( base , i , sources [ i ] ) ;
35174: LD_VAR 0 15
35178: PPUSH
35179: LD_VAR 0 8
35183: PPUSH
35184: LD_VAR 0 5
35188: PUSH
35189: LD_VAR 0 8
35193: ARRAY
35194: PPUSH
35195: CALL_OW 276
35199: GO 35171
35201: POP
35202: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35203: LD_ADDR_VAR 0 18
35207: PUSH
35208: LD_VAR 0 15
35212: PPUSH
35213: LD_VAR 0 2
35217: PPUSH
35218: LD_INT 1
35220: PPUSH
35221: CALL 34464 0 3
35225: ST_TO_ADDR
// InitHc ;
35226: CALL_OW 19
// InitUc ;
35230: CALL_OW 18
// uc_side := side ;
35234: LD_ADDR_OWVAR 20
35238: PUSH
35239: LD_VAR 0 16
35243: ST_TO_ADDR
// uc_nation := nation ;
35244: LD_ADDR_OWVAR 21
35248: PUSH
35249: LD_VAR 0 17
35253: ST_TO_ADDR
// if buildings then
35254: LD_VAR 0 18
35258: IFFALSE 36580
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35260: LD_ADDR_VAR 0 19
35264: PUSH
35265: LD_VAR 0 18
35269: PPUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 30
35275: PUSH
35276: LD_INT 29
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 30
35285: PUSH
35286: LD_INT 30
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: PPUSH
35298: CALL_OW 72
35302: ST_TO_ADDR
// if tmp then
35303: LD_VAR 0 19
35307: IFFALSE 35355
// for i in tmp do
35309: LD_ADDR_VAR 0 8
35313: PUSH
35314: LD_VAR 0 19
35318: PUSH
35319: FOR_IN
35320: IFFALSE 35353
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35322: LD_VAR 0 8
35326: PPUSH
35327: CALL_OW 250
35331: PPUSH
35332: LD_VAR 0 8
35336: PPUSH
35337: CALL_OW 251
35341: PPUSH
35342: LD_VAR 0 16
35346: PPUSH
35347: CALL_OW 441
35351: GO 35319
35353: POP
35354: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35355: LD_VAR 0 18
35359: PPUSH
35360: LD_INT 2
35362: PUSH
35363: LD_INT 30
35365: PUSH
35366: LD_INT 32
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 30
35375: PUSH
35376: LD_INT 33
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: PPUSH
35388: CALL_OW 72
35392: IFFALSE 35480
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35394: LD_ADDR_VAR 0 8
35398: PUSH
35399: LD_VAR 0 18
35403: PPUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 30
35409: PUSH
35410: LD_INT 32
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 30
35419: PUSH
35420: LD_INT 33
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: PPUSH
35432: CALL_OW 72
35436: PUSH
35437: FOR_IN
35438: IFFALSE 35478
// begin if not GetBWeapon ( i ) then
35440: LD_VAR 0 8
35444: PPUSH
35445: CALL_OW 269
35449: NOT
35450: IFFALSE 35476
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35452: LD_VAR 0 8
35456: PPUSH
35457: LD_VAR 0 8
35461: PPUSH
35462: LD_VAR 0 2
35466: PPUSH
35467: CALL 36726 0 2
35471: PPUSH
35472: CALL_OW 431
// end ;
35476: GO 35437
35478: POP
35479: POP
// end ; for i = 1 to personel do
35480: LD_ADDR_VAR 0 8
35484: PUSH
35485: DOUBLE
35486: LD_INT 1
35488: DEC
35489: ST_TO_ADDR
35490: LD_VAR 0 6
35494: PUSH
35495: FOR_TO
35496: IFFALSE 36560
// begin if i > 4 then
35498: LD_VAR 0 8
35502: PUSH
35503: LD_INT 4
35505: GREATER
35506: IFFALSE 35510
// break ;
35508: GO 36560
// case i of 1 :
35510: LD_VAR 0 8
35514: PUSH
35515: LD_INT 1
35517: DOUBLE
35518: EQUAL
35519: IFTRUE 35523
35521: GO 35603
35523: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35524: LD_ADDR_VAR 0 12
35528: PUSH
35529: LD_VAR 0 18
35533: PPUSH
35534: LD_INT 22
35536: PUSH
35537: LD_VAR 0 16
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 58
35548: PUSH
35549: EMPTY
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 30
35557: PUSH
35558: LD_INT 32
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 30
35567: PUSH
35568: LD_INT 4
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 30
35577: PUSH
35578: LD_INT 5
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 72
35600: ST_TO_ADDR
35601: GO 35825
35603: LD_INT 2
35605: DOUBLE
35606: EQUAL
35607: IFTRUE 35611
35609: GO 35673
35611: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35612: LD_ADDR_VAR 0 12
35616: PUSH
35617: LD_VAR 0 18
35621: PPUSH
35622: LD_INT 22
35624: PUSH
35625: LD_VAR 0 16
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: LD_INT 30
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 30
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PPUSH
35666: CALL_OW 72
35670: ST_TO_ADDR
35671: GO 35825
35673: LD_INT 3
35675: DOUBLE
35676: EQUAL
35677: IFTRUE 35681
35679: GO 35743
35681: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35682: LD_ADDR_VAR 0 12
35686: PUSH
35687: LD_VAR 0 18
35691: PPUSH
35692: LD_INT 22
35694: PUSH
35695: LD_VAR 0 16
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 30
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 30
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PPUSH
35736: CALL_OW 72
35740: ST_TO_ADDR
35741: GO 35825
35743: LD_INT 4
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35824
35751: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35752: LD_ADDR_VAR 0 12
35756: PUSH
35757: LD_VAR 0 18
35761: PPUSH
35762: LD_INT 22
35764: PUSH
35765: LD_VAR 0 16
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: LD_INT 30
35779: PUSH
35780: LD_INT 6
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 30
35789: PUSH
35790: LD_INT 7
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 30
35799: PUSH
35800: LD_INT 8
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PPUSH
35817: CALL_OW 72
35821: ST_TO_ADDR
35822: GO 35825
35824: POP
// if i = 1 then
35825: LD_VAR 0 8
35829: PUSH
35830: LD_INT 1
35832: EQUAL
35833: IFFALSE 35944
// begin tmp := [ ] ;
35835: LD_ADDR_VAR 0 19
35839: PUSH
35840: EMPTY
35841: ST_TO_ADDR
// for j in f do
35842: LD_ADDR_VAR 0 9
35846: PUSH
35847: LD_VAR 0 12
35851: PUSH
35852: FOR_IN
35853: IFFALSE 35926
// if GetBType ( j ) = b_bunker then
35855: LD_VAR 0 9
35859: PPUSH
35860: CALL_OW 266
35864: PUSH
35865: LD_INT 32
35867: EQUAL
35868: IFFALSE 35895
// tmp := Insert ( tmp , 1 , j ) else
35870: LD_ADDR_VAR 0 19
35874: PUSH
35875: LD_VAR 0 19
35879: PPUSH
35880: LD_INT 1
35882: PPUSH
35883: LD_VAR 0 9
35887: PPUSH
35888: CALL_OW 2
35892: ST_TO_ADDR
35893: GO 35924
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35895: LD_ADDR_VAR 0 19
35899: PUSH
35900: LD_VAR 0 19
35904: PPUSH
35905: LD_VAR 0 19
35909: PUSH
35910: LD_INT 1
35912: PLUS
35913: PPUSH
35914: LD_VAR 0 9
35918: PPUSH
35919: CALL_OW 2
35923: ST_TO_ADDR
35924: GO 35852
35926: POP
35927: POP
// if tmp then
35928: LD_VAR 0 19
35932: IFFALSE 35944
// f := tmp ;
35934: LD_ADDR_VAR 0 12
35938: PUSH
35939: LD_VAR 0 19
35943: ST_TO_ADDR
// end ; x := personel [ i ] ;
35944: LD_ADDR_VAR 0 13
35948: PUSH
35949: LD_VAR 0 6
35953: PUSH
35954: LD_VAR 0 8
35958: ARRAY
35959: ST_TO_ADDR
// if x = - 1 then
35960: LD_VAR 0 13
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: EQUAL
35969: IFFALSE 36178
// begin for j in f do
35971: LD_ADDR_VAR 0 9
35975: PUSH
35976: LD_VAR 0 12
35980: PUSH
35981: FOR_IN
35982: IFFALSE 36174
// repeat InitHc ;
35984: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35988: LD_VAR 0 9
35992: PPUSH
35993: CALL_OW 266
35997: PUSH
35998: LD_INT 5
36000: EQUAL
36001: IFFALSE 36071
// begin if UnitsInside ( j ) < 3 then
36003: LD_VAR 0 9
36007: PPUSH
36008: CALL_OW 313
36012: PUSH
36013: LD_INT 3
36015: LESS
36016: IFFALSE 36052
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36018: LD_INT 0
36020: PPUSH
36021: LD_INT 5
36023: PUSH
36024: LD_INT 8
36026: PUSH
36027: LD_INT 9
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: PUSH
36035: LD_VAR 0 17
36039: ARRAY
36040: PPUSH
36041: LD_VAR 0 4
36045: PPUSH
36046: CALL_OW 380
36050: GO 36069
// PrepareHuman ( false , i , skill ) ;
36052: LD_INT 0
36054: PPUSH
36055: LD_VAR 0 8
36059: PPUSH
36060: LD_VAR 0 4
36064: PPUSH
36065: CALL_OW 380
// end else
36069: GO 36088
// PrepareHuman ( false , i , skill ) ;
36071: LD_INT 0
36073: PPUSH
36074: LD_VAR 0 8
36078: PPUSH
36079: LD_VAR 0 4
36083: PPUSH
36084: CALL_OW 380
// un := CreateHuman ;
36088: LD_ADDR_VAR 0 14
36092: PUSH
36093: CALL_OW 44
36097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36098: LD_ADDR_VAR 0 7
36102: PUSH
36103: LD_VAR 0 7
36107: PPUSH
36108: LD_INT 1
36110: PPUSH
36111: LD_VAR 0 14
36115: PPUSH
36116: CALL_OW 2
36120: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36121: LD_VAR 0 14
36125: PPUSH
36126: LD_VAR 0 9
36130: PPUSH
36131: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36135: LD_VAR 0 9
36139: PPUSH
36140: CALL_OW 313
36144: PUSH
36145: LD_INT 6
36147: EQUAL
36148: PUSH
36149: LD_VAR 0 9
36153: PPUSH
36154: CALL_OW 266
36158: PUSH
36159: LD_INT 32
36161: PUSH
36162: LD_INT 31
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: IN
36169: OR
36170: IFFALSE 35984
36172: GO 35981
36174: POP
36175: POP
// end else
36176: GO 36558
// for j = 1 to x do
36178: LD_ADDR_VAR 0 9
36182: PUSH
36183: DOUBLE
36184: LD_INT 1
36186: DEC
36187: ST_TO_ADDR
36188: LD_VAR 0 13
36192: PUSH
36193: FOR_TO
36194: IFFALSE 36556
// begin InitHc ;
36196: CALL_OW 19
// if not f then
36200: LD_VAR 0 12
36204: NOT
36205: IFFALSE 36294
// begin PrepareHuman ( false , i , skill ) ;
36207: LD_INT 0
36209: PPUSH
36210: LD_VAR 0 8
36214: PPUSH
36215: LD_VAR 0 4
36219: PPUSH
36220: CALL_OW 380
// un := CreateHuman ;
36224: LD_ADDR_VAR 0 14
36228: PUSH
36229: CALL_OW 44
36233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36234: LD_ADDR_VAR 0 7
36238: PUSH
36239: LD_VAR 0 7
36243: PPUSH
36244: LD_INT 1
36246: PPUSH
36247: LD_VAR 0 14
36251: PPUSH
36252: CALL_OW 2
36256: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36257: LD_VAR 0 14
36261: PPUSH
36262: LD_VAR 0 1
36266: PPUSH
36267: CALL_OW 250
36271: PPUSH
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL_OW 251
36281: PPUSH
36282: LD_INT 10
36284: PPUSH
36285: LD_INT 0
36287: PPUSH
36288: CALL_OW 50
// continue ;
36292: GO 36193
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36294: LD_VAR 0 12
36298: PUSH
36299: LD_INT 1
36301: ARRAY
36302: PPUSH
36303: CALL_OW 313
36307: PUSH
36308: LD_VAR 0 12
36312: PUSH
36313: LD_INT 1
36315: ARRAY
36316: PPUSH
36317: CALL_OW 266
36321: PUSH
36322: LD_INT 32
36324: PUSH
36325: LD_INT 31
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: IN
36332: AND
36333: PUSH
36334: LD_VAR 0 12
36338: PUSH
36339: LD_INT 1
36341: ARRAY
36342: PPUSH
36343: CALL_OW 313
36347: PUSH
36348: LD_INT 6
36350: EQUAL
36351: OR
36352: IFFALSE 36372
// f := Delete ( f , 1 ) ;
36354: LD_ADDR_VAR 0 12
36358: PUSH
36359: LD_VAR 0 12
36363: PPUSH
36364: LD_INT 1
36366: PPUSH
36367: CALL_OW 3
36371: ST_TO_ADDR
// if not f then
36372: LD_VAR 0 12
36376: NOT
36377: IFFALSE 36395
// begin x := x + 2 ;
36379: LD_ADDR_VAR 0 13
36383: PUSH
36384: LD_VAR 0 13
36388: PUSH
36389: LD_INT 2
36391: PLUS
36392: ST_TO_ADDR
// continue ;
36393: GO 36193
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36395: LD_VAR 0 12
36399: PUSH
36400: LD_INT 1
36402: ARRAY
36403: PPUSH
36404: CALL_OW 266
36408: PUSH
36409: LD_INT 5
36411: EQUAL
36412: IFFALSE 36486
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36414: LD_VAR 0 12
36418: PUSH
36419: LD_INT 1
36421: ARRAY
36422: PPUSH
36423: CALL_OW 313
36427: PUSH
36428: LD_INT 3
36430: LESS
36431: IFFALSE 36467
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36433: LD_INT 0
36435: PPUSH
36436: LD_INT 5
36438: PUSH
36439: LD_INT 8
36441: PUSH
36442: LD_INT 9
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: PUSH
36450: LD_VAR 0 17
36454: ARRAY
36455: PPUSH
36456: LD_VAR 0 4
36460: PPUSH
36461: CALL_OW 380
36465: GO 36484
// PrepareHuman ( false , i , skill ) ;
36467: LD_INT 0
36469: PPUSH
36470: LD_VAR 0 8
36474: PPUSH
36475: LD_VAR 0 4
36479: PPUSH
36480: CALL_OW 380
// end else
36484: GO 36503
// PrepareHuman ( false , i , skill ) ;
36486: LD_INT 0
36488: PPUSH
36489: LD_VAR 0 8
36493: PPUSH
36494: LD_VAR 0 4
36498: PPUSH
36499: CALL_OW 380
// un := CreateHuman ;
36503: LD_ADDR_VAR 0 14
36507: PUSH
36508: CALL_OW 44
36512: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36513: LD_ADDR_VAR 0 7
36517: PUSH
36518: LD_VAR 0 7
36522: PPUSH
36523: LD_INT 1
36525: PPUSH
36526: LD_VAR 0 14
36530: PPUSH
36531: CALL_OW 2
36535: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36536: LD_VAR 0 14
36540: PPUSH
36541: LD_VAR 0 12
36545: PUSH
36546: LD_INT 1
36548: ARRAY
36549: PPUSH
36550: CALL_OW 52
// end ;
36554: GO 36193
36556: POP
36557: POP
// end ;
36558: GO 35495
36560: POP
36561: POP
// result := result ^ buildings ;
36562: LD_ADDR_VAR 0 7
36566: PUSH
36567: LD_VAR 0 7
36571: PUSH
36572: LD_VAR 0 18
36576: ADD
36577: ST_TO_ADDR
// end else
36578: GO 36721
// begin for i = 1 to personel do
36580: LD_ADDR_VAR 0 8
36584: PUSH
36585: DOUBLE
36586: LD_INT 1
36588: DEC
36589: ST_TO_ADDR
36590: LD_VAR 0 6
36594: PUSH
36595: FOR_TO
36596: IFFALSE 36719
// begin if i > 4 then
36598: LD_VAR 0 8
36602: PUSH
36603: LD_INT 4
36605: GREATER
36606: IFFALSE 36610
// break ;
36608: GO 36719
// x := personel [ i ] ;
36610: LD_ADDR_VAR 0 13
36614: PUSH
36615: LD_VAR 0 6
36619: PUSH
36620: LD_VAR 0 8
36624: ARRAY
36625: ST_TO_ADDR
// if x = - 1 then
36626: LD_VAR 0 13
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: EQUAL
36635: IFFALSE 36639
// continue ;
36637: GO 36595
// PrepareHuman ( false , i , skill ) ;
36639: LD_INT 0
36641: PPUSH
36642: LD_VAR 0 8
36646: PPUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: CALL_OW 380
// un := CreateHuman ;
36656: LD_ADDR_VAR 0 14
36660: PUSH
36661: CALL_OW 44
36665: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36666: LD_VAR 0 14
36670: PPUSH
36671: LD_VAR 0 1
36675: PPUSH
36676: CALL_OW 250
36680: PPUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 251
36690: PPUSH
36691: LD_INT 10
36693: PPUSH
36694: LD_INT 0
36696: PPUSH
36697: CALL_OW 50
// result := result ^ un ;
36701: LD_ADDR_VAR 0 7
36705: PUSH
36706: LD_VAR 0 7
36710: PUSH
36711: LD_VAR 0 14
36715: ADD
36716: ST_TO_ADDR
// end ;
36717: GO 36595
36719: POP
36720: POP
// end ; end ;
36721: LD_VAR 0 7
36725: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36726: LD_INT 0
36728: PPUSH
36729: PPUSH
36730: PPUSH
36731: PPUSH
36732: PPUSH
36733: PPUSH
36734: PPUSH
36735: PPUSH
36736: PPUSH
36737: PPUSH
36738: PPUSH
36739: PPUSH
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
// result := false ;
36744: LD_ADDR_VAR 0 3
36748: PUSH
36749: LD_INT 0
36751: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36752: LD_VAR 0 1
36756: NOT
36757: PUSH
36758: LD_VAR 0 1
36762: PPUSH
36763: CALL_OW 266
36767: PUSH
36768: LD_INT 32
36770: PUSH
36771: LD_INT 33
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: IN
36778: NOT
36779: OR
36780: IFFALSE 36784
// exit ;
36782: GO 37893
// nat := GetNation ( tower ) ;
36784: LD_ADDR_VAR 0 12
36788: PUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 248
36798: ST_TO_ADDR
// side := GetSide ( tower ) ;
36799: LD_ADDR_VAR 0 16
36803: PUSH
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL_OW 255
36813: ST_TO_ADDR
// x := GetX ( tower ) ;
36814: LD_ADDR_VAR 0 10
36818: PUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 250
36828: ST_TO_ADDR
// y := GetY ( tower ) ;
36829: LD_ADDR_VAR 0 11
36833: PUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 251
36843: ST_TO_ADDR
// if not x or not y then
36844: LD_VAR 0 10
36848: NOT
36849: PUSH
36850: LD_VAR 0 11
36854: NOT
36855: OR
36856: IFFALSE 36860
// exit ;
36858: GO 37893
// weapon := 0 ;
36860: LD_ADDR_VAR 0 18
36864: PUSH
36865: LD_INT 0
36867: ST_TO_ADDR
// fac_list := [ ] ;
36868: LD_ADDR_VAR 0 17
36872: PUSH
36873: EMPTY
36874: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36875: LD_ADDR_VAR 0 6
36879: PUSH
36880: LD_VAR 0 1
36884: PPUSH
36885: CALL_OW 274
36889: PPUSH
36890: LD_VAR 0 2
36894: PPUSH
36895: LD_INT 0
36897: PPUSH
36898: CALL 34464 0 3
36902: PPUSH
36903: LD_INT 30
36905: PUSH
36906: LD_INT 3
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PPUSH
36913: CALL_OW 72
36917: ST_TO_ADDR
// if not factories then
36918: LD_VAR 0 6
36922: NOT
36923: IFFALSE 36927
// exit ;
36925: GO 37893
// for i in factories do
36927: LD_ADDR_VAR 0 8
36931: PUSH
36932: LD_VAR 0 6
36936: PUSH
36937: FOR_IN
36938: IFFALSE 36963
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36940: LD_ADDR_VAR 0 17
36944: PUSH
36945: LD_VAR 0 17
36949: PUSH
36950: LD_VAR 0 8
36954: PPUSH
36955: CALL_OW 478
36959: UNION
36960: ST_TO_ADDR
36961: GO 36937
36963: POP
36964: POP
// if not fac_list then
36965: LD_VAR 0 17
36969: NOT
36970: IFFALSE 36974
// exit ;
36972: GO 37893
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36974: LD_ADDR_VAR 0 5
36978: PUSH
36979: LD_INT 4
36981: PUSH
36982: LD_INT 5
36984: PUSH
36985: LD_INT 9
36987: PUSH
36988: LD_INT 10
36990: PUSH
36991: LD_INT 6
36993: PUSH
36994: LD_INT 7
36996: PUSH
36997: LD_INT 11
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 27
37011: PUSH
37012: LD_INT 28
37014: PUSH
37015: LD_INT 26
37017: PUSH
37018: LD_INT 30
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 43
37029: PUSH
37030: LD_INT 44
37032: PUSH
37033: LD_INT 46
37035: PUSH
37036: LD_INT 45
37038: PUSH
37039: LD_INT 47
37041: PUSH
37042: LD_INT 49
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: PUSH
37058: LD_VAR 0 12
37062: ARRAY
37063: ST_TO_ADDR
// list := list isect fac_list ;
37064: LD_ADDR_VAR 0 5
37068: PUSH
37069: LD_VAR 0 5
37073: PUSH
37074: LD_VAR 0 17
37078: ISECT
37079: ST_TO_ADDR
// if not list then
37080: LD_VAR 0 5
37084: NOT
37085: IFFALSE 37089
// exit ;
37087: GO 37893
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37089: LD_VAR 0 12
37093: PUSH
37094: LD_INT 3
37096: EQUAL
37097: PUSH
37098: LD_INT 49
37100: PUSH
37101: LD_VAR 0 5
37105: IN
37106: AND
37107: PUSH
37108: LD_INT 31
37110: PPUSH
37111: LD_VAR 0 16
37115: PPUSH
37116: CALL_OW 321
37120: PUSH
37121: LD_INT 2
37123: EQUAL
37124: AND
37125: IFFALSE 37185
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37127: LD_INT 22
37129: PUSH
37130: LD_VAR 0 16
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 35
37141: PUSH
37142: LD_INT 49
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 91
37151: PUSH
37152: LD_VAR 0 1
37156: PUSH
37157: LD_INT 10
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: PPUSH
37170: CALL_OW 69
37174: NOT
37175: IFFALSE 37185
// weapon := ru_time_lapser ;
37177: LD_ADDR_VAR 0 18
37181: PUSH
37182: LD_INT 49
37184: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37185: LD_VAR 0 12
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: IN
37200: PUSH
37201: LD_INT 11
37203: PUSH
37204: LD_VAR 0 5
37208: IN
37209: PUSH
37210: LD_INT 30
37212: PUSH
37213: LD_VAR 0 5
37217: IN
37218: OR
37219: AND
37220: PUSH
37221: LD_INT 6
37223: PPUSH
37224: LD_VAR 0 16
37228: PPUSH
37229: CALL_OW 321
37233: PUSH
37234: LD_INT 2
37236: EQUAL
37237: AND
37238: IFFALSE 37403
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37240: LD_INT 22
37242: PUSH
37243: LD_VAR 0 16
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: LD_INT 35
37257: PUSH
37258: LD_INT 11
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 35
37267: PUSH
37268: LD_INT 30
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 91
37282: PUSH
37283: LD_VAR 0 1
37287: PUSH
37288: LD_INT 18
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: PPUSH
37301: CALL_OW 69
37305: NOT
37306: PUSH
37307: LD_INT 22
37309: PUSH
37310: LD_VAR 0 16
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 30
37324: PUSH
37325: LD_INT 32
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 30
37334: PUSH
37335: LD_INT 33
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 91
37349: PUSH
37350: LD_VAR 0 1
37354: PUSH
37355: LD_INT 12
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: PUSH
37368: EMPTY
37369: LIST
37370: PPUSH
37371: CALL_OW 69
37375: PUSH
37376: LD_INT 2
37378: GREATER
37379: AND
37380: IFFALSE 37403
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37382: LD_ADDR_VAR 0 18
37386: PUSH
37387: LD_INT 11
37389: PUSH
37390: LD_INT 30
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_VAR 0 12
37401: ARRAY
37402: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37403: LD_VAR 0 18
37407: NOT
37408: PUSH
37409: LD_INT 40
37411: PPUSH
37412: LD_VAR 0 16
37416: PPUSH
37417: CALL_OW 321
37421: PUSH
37422: LD_INT 2
37424: EQUAL
37425: AND
37426: PUSH
37427: LD_INT 7
37429: PUSH
37430: LD_VAR 0 5
37434: IN
37435: PUSH
37436: LD_INT 28
37438: PUSH
37439: LD_VAR 0 5
37443: IN
37444: OR
37445: PUSH
37446: LD_INT 45
37448: PUSH
37449: LD_VAR 0 5
37453: IN
37454: OR
37455: AND
37456: IFFALSE 37710
// begin hex := GetHexInfo ( x , y ) ;
37458: LD_ADDR_VAR 0 4
37462: PUSH
37463: LD_VAR 0 10
37467: PPUSH
37468: LD_VAR 0 11
37472: PPUSH
37473: CALL_OW 546
37477: ST_TO_ADDR
// if hex [ 1 ] then
37478: LD_VAR 0 4
37482: PUSH
37483: LD_INT 1
37485: ARRAY
37486: IFFALSE 37490
// exit ;
37488: GO 37893
// height := hex [ 2 ] ;
37490: LD_ADDR_VAR 0 15
37494: PUSH
37495: LD_VAR 0 4
37499: PUSH
37500: LD_INT 2
37502: ARRAY
37503: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37504: LD_ADDR_VAR 0 14
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: LD_INT 3
37517: PUSH
37518: LD_INT 5
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: ST_TO_ADDR
// for i in tmp do
37527: LD_ADDR_VAR 0 8
37531: PUSH
37532: LD_VAR 0 14
37536: PUSH
37537: FOR_IN
37538: IFFALSE 37708
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37540: LD_ADDR_VAR 0 9
37544: PUSH
37545: LD_VAR 0 10
37549: PPUSH
37550: LD_VAR 0 8
37554: PPUSH
37555: LD_INT 5
37557: PPUSH
37558: CALL_OW 272
37562: PUSH
37563: LD_VAR 0 11
37567: PPUSH
37568: LD_VAR 0 8
37572: PPUSH
37573: LD_INT 5
37575: PPUSH
37576: CALL_OW 273
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37585: LD_VAR 0 9
37589: PUSH
37590: LD_INT 1
37592: ARRAY
37593: PPUSH
37594: LD_VAR 0 9
37598: PUSH
37599: LD_INT 2
37601: ARRAY
37602: PPUSH
37603: CALL_OW 488
37607: IFFALSE 37706
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37609: LD_ADDR_VAR 0 4
37613: PUSH
37614: LD_VAR 0 9
37618: PUSH
37619: LD_INT 1
37621: ARRAY
37622: PPUSH
37623: LD_VAR 0 9
37627: PUSH
37628: LD_INT 2
37630: ARRAY
37631: PPUSH
37632: CALL_OW 546
37636: ST_TO_ADDR
// if hex [ 1 ] then
37637: LD_VAR 0 4
37641: PUSH
37642: LD_INT 1
37644: ARRAY
37645: IFFALSE 37649
// continue ;
37647: GO 37537
// h := hex [ 2 ] ;
37649: LD_ADDR_VAR 0 13
37653: PUSH
37654: LD_VAR 0 4
37658: PUSH
37659: LD_INT 2
37661: ARRAY
37662: ST_TO_ADDR
// if h + 7 < height then
37663: LD_VAR 0 13
37667: PUSH
37668: LD_INT 7
37670: PLUS
37671: PUSH
37672: LD_VAR 0 15
37676: LESS
37677: IFFALSE 37706
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37679: LD_ADDR_VAR 0 18
37683: PUSH
37684: LD_INT 7
37686: PUSH
37687: LD_INT 28
37689: PUSH
37690: LD_INT 45
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: PUSH
37698: LD_VAR 0 12
37702: ARRAY
37703: ST_TO_ADDR
// break ;
37704: GO 37708
// end ; end ; end ;
37706: GO 37537
37708: POP
37709: POP
// end ; if not weapon then
37710: LD_VAR 0 18
37714: NOT
37715: IFFALSE 37775
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37717: LD_ADDR_VAR 0 5
37721: PUSH
37722: LD_VAR 0 5
37726: PUSH
37727: LD_INT 11
37729: PUSH
37730: LD_INT 30
37732: PUSH
37733: LD_INT 49
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: DIFF
37741: ST_TO_ADDR
// if not list then
37742: LD_VAR 0 5
37746: NOT
37747: IFFALSE 37751
// exit ;
37749: GO 37893
// weapon := list [ rand ( 1 , list ) ] ;
37751: LD_ADDR_VAR 0 18
37755: PUSH
37756: LD_VAR 0 5
37760: PUSH
37761: LD_INT 1
37763: PPUSH
37764: LD_VAR 0 5
37768: PPUSH
37769: CALL_OW 12
37773: ARRAY
37774: ST_TO_ADDR
// end ; if weapon then
37775: LD_VAR 0 18
37779: IFFALSE 37893
// begin tmp := CostOfWeapon ( weapon ) ;
37781: LD_ADDR_VAR 0 14
37785: PUSH
37786: LD_VAR 0 18
37790: PPUSH
37791: CALL_OW 451
37795: ST_TO_ADDR
// j := GetBase ( tower ) ;
37796: LD_ADDR_VAR 0 9
37800: PUSH
37801: LD_VAR 0 1
37805: PPUSH
37806: CALL_OW 274
37810: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37811: LD_VAR 0 9
37815: PPUSH
37816: LD_INT 1
37818: PPUSH
37819: CALL_OW 275
37823: PUSH
37824: LD_VAR 0 14
37828: PUSH
37829: LD_INT 1
37831: ARRAY
37832: GREATEREQUAL
37833: PUSH
37834: LD_VAR 0 9
37838: PPUSH
37839: LD_INT 2
37841: PPUSH
37842: CALL_OW 275
37846: PUSH
37847: LD_VAR 0 14
37851: PUSH
37852: LD_INT 2
37854: ARRAY
37855: GREATEREQUAL
37856: AND
37857: PUSH
37858: LD_VAR 0 9
37862: PPUSH
37863: LD_INT 3
37865: PPUSH
37866: CALL_OW 275
37870: PUSH
37871: LD_VAR 0 14
37875: PUSH
37876: LD_INT 3
37878: ARRAY
37879: GREATEREQUAL
37880: AND
37881: IFFALSE 37893
// result := weapon ;
37883: LD_ADDR_VAR 0 3
37887: PUSH
37888: LD_VAR 0 18
37892: ST_TO_ADDR
// end ; end ;
37893: LD_VAR 0 3
37897: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37898: LD_INT 0
37900: PPUSH
37901: PPUSH
// result := true ;
37902: LD_ADDR_VAR 0 3
37906: PUSH
37907: LD_INT 1
37909: ST_TO_ADDR
// if array1 = array2 then
37910: LD_VAR 0 1
37914: PUSH
37915: LD_VAR 0 2
37919: EQUAL
37920: IFFALSE 37980
// begin for i = 1 to array1 do
37922: LD_ADDR_VAR 0 4
37926: PUSH
37927: DOUBLE
37928: LD_INT 1
37930: DEC
37931: ST_TO_ADDR
37932: LD_VAR 0 1
37936: PUSH
37937: FOR_TO
37938: IFFALSE 37976
// if array1 [ i ] <> array2 [ i ] then
37940: LD_VAR 0 1
37944: PUSH
37945: LD_VAR 0 4
37949: ARRAY
37950: PUSH
37951: LD_VAR 0 2
37955: PUSH
37956: LD_VAR 0 4
37960: ARRAY
37961: NONEQUAL
37962: IFFALSE 37974
// begin result := false ;
37964: LD_ADDR_VAR 0 3
37968: PUSH
37969: LD_INT 0
37971: ST_TO_ADDR
// break ;
37972: GO 37976
// end ;
37974: GO 37937
37976: POP
37977: POP
// end else
37978: GO 37988
// result := false ;
37980: LD_ADDR_VAR 0 3
37984: PUSH
37985: LD_INT 0
37987: ST_TO_ADDR
// end ;
37988: LD_VAR 0 3
37992: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37993: LD_INT 0
37995: PPUSH
37996: PPUSH
// if not array1 or not array2 then
37997: LD_VAR 0 1
38001: NOT
38002: PUSH
38003: LD_VAR 0 2
38007: NOT
38008: OR
38009: IFFALSE 38013
// exit ;
38011: GO 38077
// result := true ;
38013: LD_ADDR_VAR 0 3
38017: PUSH
38018: LD_INT 1
38020: ST_TO_ADDR
// for i = 1 to array1 do
38021: LD_ADDR_VAR 0 4
38025: PUSH
38026: DOUBLE
38027: LD_INT 1
38029: DEC
38030: ST_TO_ADDR
38031: LD_VAR 0 1
38035: PUSH
38036: FOR_TO
38037: IFFALSE 38075
// if array1 [ i ] <> array2 [ i ] then
38039: LD_VAR 0 1
38043: PUSH
38044: LD_VAR 0 4
38048: ARRAY
38049: PUSH
38050: LD_VAR 0 2
38054: PUSH
38055: LD_VAR 0 4
38059: ARRAY
38060: NONEQUAL
38061: IFFALSE 38073
// begin result := false ;
38063: LD_ADDR_VAR 0 3
38067: PUSH
38068: LD_INT 0
38070: ST_TO_ADDR
// break ;
38071: GO 38075
// end ;
38073: GO 38036
38075: POP
38076: POP
// end ;
38077: LD_VAR 0 3
38081: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38082: LD_INT 0
38084: PPUSH
38085: PPUSH
38086: PPUSH
// pom := GetBase ( fac ) ;
38087: LD_ADDR_VAR 0 5
38091: PUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 274
38101: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38102: LD_ADDR_VAR 0 4
38106: PUSH
38107: LD_VAR 0 2
38111: PUSH
38112: LD_INT 1
38114: ARRAY
38115: PPUSH
38116: LD_VAR 0 2
38120: PUSH
38121: LD_INT 2
38123: ARRAY
38124: PPUSH
38125: LD_VAR 0 2
38129: PUSH
38130: LD_INT 3
38132: ARRAY
38133: PPUSH
38134: LD_VAR 0 2
38138: PUSH
38139: LD_INT 4
38141: ARRAY
38142: PPUSH
38143: CALL_OW 449
38147: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38148: LD_ADDR_VAR 0 3
38152: PUSH
38153: LD_VAR 0 5
38157: PPUSH
38158: LD_INT 1
38160: PPUSH
38161: CALL_OW 275
38165: PUSH
38166: LD_VAR 0 4
38170: PUSH
38171: LD_INT 1
38173: ARRAY
38174: GREATEREQUAL
38175: PUSH
38176: LD_VAR 0 5
38180: PPUSH
38181: LD_INT 2
38183: PPUSH
38184: CALL_OW 275
38188: PUSH
38189: LD_VAR 0 4
38193: PUSH
38194: LD_INT 2
38196: ARRAY
38197: GREATEREQUAL
38198: AND
38199: PUSH
38200: LD_VAR 0 5
38204: PPUSH
38205: LD_INT 3
38207: PPUSH
38208: CALL_OW 275
38212: PUSH
38213: LD_VAR 0 4
38217: PUSH
38218: LD_INT 3
38220: ARRAY
38221: GREATEREQUAL
38222: AND
38223: ST_TO_ADDR
// end ;
38224: LD_VAR 0 3
38228: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38229: LD_INT 0
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
// pom := GetBase ( building ) ;
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_VAR 0 1
38244: PPUSH
38245: CALL_OW 274
38249: ST_TO_ADDR
// if not pom then
38250: LD_VAR 0 3
38254: NOT
38255: IFFALSE 38259
// exit ;
38257: GO 38429
// btype := GetBType ( building ) ;
38259: LD_ADDR_VAR 0 5
38263: PUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 266
38273: ST_TO_ADDR
// if btype = b_armoury then
38274: LD_VAR 0 5
38278: PUSH
38279: LD_INT 4
38281: EQUAL
38282: IFFALSE 38292
// btype := b_barracks ;
38284: LD_ADDR_VAR 0 5
38288: PUSH
38289: LD_INT 5
38291: ST_TO_ADDR
// if btype = b_depot then
38292: LD_VAR 0 5
38296: PUSH
38297: LD_INT 0
38299: EQUAL
38300: IFFALSE 38310
// btype := b_warehouse ;
38302: LD_ADDR_VAR 0 5
38306: PUSH
38307: LD_INT 1
38309: ST_TO_ADDR
// if btype = b_workshop then
38310: LD_VAR 0 5
38314: PUSH
38315: LD_INT 2
38317: EQUAL
38318: IFFALSE 38328
// btype := b_factory ;
38320: LD_ADDR_VAR 0 5
38324: PUSH
38325: LD_INT 3
38327: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38328: LD_ADDR_VAR 0 4
38332: PUSH
38333: LD_VAR 0 5
38337: PPUSH
38338: LD_VAR 0 1
38342: PPUSH
38343: CALL_OW 248
38347: PPUSH
38348: CALL_OW 450
38352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38353: LD_ADDR_VAR 0 2
38357: PUSH
38358: LD_VAR 0 3
38362: PPUSH
38363: LD_INT 1
38365: PPUSH
38366: CALL_OW 275
38370: PUSH
38371: LD_VAR 0 4
38375: PUSH
38376: LD_INT 1
38378: ARRAY
38379: GREATEREQUAL
38380: PUSH
38381: LD_VAR 0 3
38385: PPUSH
38386: LD_INT 2
38388: PPUSH
38389: CALL_OW 275
38393: PUSH
38394: LD_VAR 0 4
38398: PUSH
38399: LD_INT 2
38401: ARRAY
38402: GREATEREQUAL
38403: AND
38404: PUSH
38405: LD_VAR 0 3
38409: PPUSH
38410: LD_INT 3
38412: PPUSH
38413: CALL_OW 275
38417: PUSH
38418: LD_VAR 0 4
38422: PUSH
38423: LD_INT 3
38425: ARRAY
38426: GREATEREQUAL
38427: AND
38428: ST_TO_ADDR
// end ;
38429: LD_VAR 0 2
38433: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38434: LD_INT 0
38436: PPUSH
38437: PPUSH
38438: PPUSH
// pom := GetBase ( building ) ;
38439: LD_ADDR_VAR 0 4
38443: PUSH
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 274
38453: ST_TO_ADDR
// if not pom then
38454: LD_VAR 0 4
38458: NOT
38459: IFFALSE 38463
// exit ;
38461: GO 38564
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38463: LD_ADDR_VAR 0 5
38467: PUSH
38468: LD_VAR 0 2
38472: PPUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 248
38482: PPUSH
38483: CALL_OW 450
38487: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38488: LD_ADDR_VAR 0 3
38492: PUSH
38493: LD_VAR 0 4
38497: PPUSH
38498: LD_INT 1
38500: PPUSH
38501: CALL_OW 275
38505: PUSH
38506: LD_VAR 0 5
38510: PUSH
38511: LD_INT 1
38513: ARRAY
38514: GREATEREQUAL
38515: PUSH
38516: LD_VAR 0 4
38520: PPUSH
38521: LD_INT 2
38523: PPUSH
38524: CALL_OW 275
38528: PUSH
38529: LD_VAR 0 5
38533: PUSH
38534: LD_INT 2
38536: ARRAY
38537: GREATEREQUAL
38538: AND
38539: PUSH
38540: LD_VAR 0 4
38544: PPUSH
38545: LD_INT 3
38547: PPUSH
38548: CALL_OW 275
38552: PUSH
38553: LD_VAR 0 5
38557: PUSH
38558: LD_INT 3
38560: ARRAY
38561: GREATEREQUAL
38562: AND
38563: ST_TO_ADDR
// end ;
38564: LD_VAR 0 3
38568: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38569: LD_INT 0
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
// result := false ;
38582: LD_ADDR_VAR 0 8
38586: PUSH
38587: LD_INT 0
38589: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38590: LD_VAR 0 5
38594: NOT
38595: PUSH
38596: LD_VAR 0 1
38600: NOT
38601: OR
38602: PUSH
38603: LD_VAR 0 2
38607: NOT
38608: OR
38609: PUSH
38610: LD_VAR 0 3
38614: NOT
38615: OR
38616: IFFALSE 38620
// exit ;
38618: GO 39434
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38620: LD_ADDR_VAR 0 14
38624: PUSH
38625: LD_VAR 0 1
38629: PPUSH
38630: LD_VAR 0 2
38634: PPUSH
38635: LD_VAR 0 3
38639: PPUSH
38640: LD_VAR 0 4
38644: PPUSH
38645: LD_VAR 0 5
38649: PUSH
38650: LD_INT 1
38652: ARRAY
38653: PPUSH
38654: CALL_OW 248
38658: PPUSH
38659: LD_INT 0
38661: PPUSH
38662: CALL 40687 0 6
38666: ST_TO_ADDR
// if not hexes then
38667: LD_VAR 0 14
38671: NOT
38672: IFFALSE 38676
// exit ;
38674: GO 39434
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38676: LD_ADDR_VAR 0 17
38680: PUSH
38681: LD_VAR 0 5
38685: PPUSH
38686: LD_INT 22
38688: PUSH
38689: LD_VAR 0 13
38693: PPUSH
38694: CALL_OW 255
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 30
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 30
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PPUSH
38735: CALL_OW 72
38739: ST_TO_ADDR
// for i = 1 to hexes do
38740: LD_ADDR_VAR 0 9
38744: PUSH
38745: DOUBLE
38746: LD_INT 1
38748: DEC
38749: ST_TO_ADDR
38750: LD_VAR 0 14
38754: PUSH
38755: FOR_TO
38756: IFFALSE 39432
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38758: LD_ADDR_VAR 0 13
38762: PUSH
38763: LD_VAR 0 14
38767: PUSH
38768: LD_VAR 0 9
38772: ARRAY
38773: PUSH
38774: LD_INT 1
38776: ARRAY
38777: PPUSH
38778: LD_VAR 0 14
38782: PUSH
38783: LD_VAR 0 9
38787: ARRAY
38788: PUSH
38789: LD_INT 2
38791: ARRAY
38792: PPUSH
38793: CALL_OW 428
38797: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38798: LD_VAR 0 14
38802: PUSH
38803: LD_VAR 0 9
38807: ARRAY
38808: PUSH
38809: LD_INT 1
38811: ARRAY
38812: PPUSH
38813: LD_VAR 0 14
38817: PUSH
38818: LD_VAR 0 9
38822: ARRAY
38823: PUSH
38824: LD_INT 2
38826: ARRAY
38827: PPUSH
38828: CALL_OW 351
38832: PUSH
38833: LD_VAR 0 14
38837: PUSH
38838: LD_VAR 0 9
38842: ARRAY
38843: PUSH
38844: LD_INT 1
38846: ARRAY
38847: PPUSH
38848: LD_VAR 0 14
38852: PUSH
38853: LD_VAR 0 9
38857: ARRAY
38858: PUSH
38859: LD_INT 2
38861: ARRAY
38862: PPUSH
38863: CALL_OW 488
38867: NOT
38868: OR
38869: PUSH
38870: LD_VAR 0 13
38874: PPUSH
38875: CALL_OW 247
38879: PUSH
38880: LD_INT 3
38882: EQUAL
38883: OR
38884: IFFALSE 38890
// exit ;
38886: POP
38887: POP
38888: GO 39434
// if not tmp then
38890: LD_VAR 0 13
38894: NOT
38895: IFFALSE 38899
// continue ;
38897: GO 38755
// result := true ;
38899: LD_ADDR_VAR 0 8
38903: PUSH
38904: LD_INT 1
38906: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38907: LD_VAR 0 6
38911: PUSH
38912: LD_VAR 0 13
38916: PPUSH
38917: CALL_OW 247
38921: PUSH
38922: LD_INT 2
38924: EQUAL
38925: AND
38926: PUSH
38927: LD_VAR 0 13
38931: PPUSH
38932: CALL_OW 263
38936: PUSH
38937: LD_INT 1
38939: EQUAL
38940: AND
38941: IFFALSE 39105
// begin if IsDrivenBy ( tmp ) then
38943: LD_VAR 0 13
38947: PPUSH
38948: CALL_OW 311
38952: IFFALSE 38956
// continue ;
38954: GO 38755
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38956: LD_VAR 0 6
38960: PPUSH
38961: LD_INT 3
38963: PUSH
38964: LD_INT 60
38966: PUSH
38967: EMPTY
38968: LIST
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: LD_INT 55
38979: PUSH
38980: EMPTY
38981: LIST
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PPUSH
38991: CALL_OW 72
38995: IFFALSE 39103
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38997: LD_ADDR_VAR 0 18
39001: PUSH
39002: LD_VAR 0 6
39006: PPUSH
39007: LD_INT 3
39009: PUSH
39010: LD_INT 60
39012: PUSH
39013: EMPTY
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: LD_INT 55
39025: PUSH
39026: EMPTY
39027: LIST
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PPUSH
39037: CALL_OW 72
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: ST_TO_ADDR
// if IsInUnit ( driver ) then
39046: LD_VAR 0 18
39050: PPUSH
39051: CALL_OW 310
39055: IFFALSE 39066
// ComExit ( driver ) ;
39057: LD_VAR 0 18
39061: PPUSH
39062: CALL 64468 0 1
// AddComEnterUnit ( driver , tmp ) ;
39066: LD_VAR 0 18
39070: PPUSH
39071: LD_VAR 0 13
39075: PPUSH
39076: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39080: LD_VAR 0 18
39084: PPUSH
39085: LD_VAR 0 7
39089: PPUSH
39090: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39094: LD_VAR 0 18
39098: PPUSH
39099: CALL_OW 181
// end ; continue ;
39103: GO 38755
// end ; if not cleaners or not tmp in cleaners then
39105: LD_VAR 0 6
39109: NOT
39110: PUSH
39111: LD_VAR 0 13
39115: PUSH
39116: LD_VAR 0 6
39120: IN
39121: NOT
39122: OR
39123: IFFALSE 39430
// begin if dep then
39125: LD_VAR 0 17
39129: IFFALSE 39265
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39131: LD_ADDR_VAR 0 16
39135: PUSH
39136: LD_VAR 0 17
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PPUSH
39145: CALL_OW 250
39149: PPUSH
39150: LD_VAR 0 17
39154: PUSH
39155: LD_INT 1
39157: ARRAY
39158: PPUSH
39159: CALL_OW 254
39163: PPUSH
39164: LD_INT 5
39166: PPUSH
39167: CALL_OW 272
39171: PUSH
39172: LD_VAR 0 17
39176: PUSH
39177: LD_INT 1
39179: ARRAY
39180: PPUSH
39181: CALL_OW 251
39185: PPUSH
39186: LD_VAR 0 17
39190: PUSH
39191: LD_INT 1
39193: ARRAY
39194: PPUSH
39195: CALL_OW 254
39199: PPUSH
39200: LD_INT 5
39202: PPUSH
39203: CALL_OW 273
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39212: LD_VAR 0 16
39216: PUSH
39217: LD_INT 1
39219: ARRAY
39220: PPUSH
39221: LD_VAR 0 16
39225: PUSH
39226: LD_INT 2
39228: ARRAY
39229: PPUSH
39230: CALL_OW 488
39234: IFFALSE 39265
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39236: LD_VAR 0 13
39240: PPUSH
39241: LD_VAR 0 16
39245: PUSH
39246: LD_INT 1
39248: ARRAY
39249: PPUSH
39250: LD_VAR 0 16
39254: PUSH
39255: LD_INT 2
39257: ARRAY
39258: PPUSH
39259: CALL_OW 111
// continue ;
39263: GO 38755
// end ; end ; r := GetDir ( tmp ) ;
39265: LD_ADDR_VAR 0 15
39269: PUSH
39270: LD_VAR 0 13
39274: PPUSH
39275: CALL_OW 254
39279: ST_TO_ADDR
// if r = 5 then
39280: LD_VAR 0 15
39284: PUSH
39285: LD_INT 5
39287: EQUAL
39288: IFFALSE 39298
// r := 0 ;
39290: LD_ADDR_VAR 0 15
39294: PUSH
39295: LD_INT 0
39297: ST_TO_ADDR
// for j = r to 5 do
39298: LD_ADDR_VAR 0 10
39302: PUSH
39303: DOUBLE
39304: LD_VAR 0 15
39308: DEC
39309: ST_TO_ADDR
39310: LD_INT 5
39312: PUSH
39313: FOR_TO
39314: IFFALSE 39428
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39316: LD_ADDR_VAR 0 11
39320: PUSH
39321: LD_VAR 0 13
39325: PPUSH
39326: CALL_OW 250
39330: PPUSH
39331: LD_VAR 0 10
39335: PPUSH
39336: LD_INT 2
39338: PPUSH
39339: CALL_OW 272
39343: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39344: LD_ADDR_VAR 0 12
39348: PUSH
39349: LD_VAR 0 13
39353: PPUSH
39354: CALL_OW 251
39358: PPUSH
39359: LD_VAR 0 10
39363: PPUSH
39364: LD_INT 2
39366: PPUSH
39367: CALL_OW 273
39371: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39372: LD_VAR 0 11
39376: PPUSH
39377: LD_VAR 0 12
39381: PPUSH
39382: CALL_OW 488
39386: PUSH
39387: LD_VAR 0 11
39391: PPUSH
39392: LD_VAR 0 12
39396: PPUSH
39397: CALL_OW 428
39401: NOT
39402: AND
39403: IFFALSE 39426
// begin ComMoveXY ( tmp , _x , _y ) ;
39405: LD_VAR 0 13
39409: PPUSH
39410: LD_VAR 0 11
39414: PPUSH
39415: LD_VAR 0 12
39419: PPUSH
39420: CALL_OW 111
// break ;
39424: GO 39428
// end ; end ;
39426: GO 39313
39428: POP
39429: POP
// end ; end ;
39430: GO 38755
39432: POP
39433: POP
// end ;
39434: LD_VAR 0 8
39438: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39439: LD_INT 0
39441: PPUSH
// result := true ;
39442: LD_ADDR_VAR 0 3
39446: PUSH
39447: LD_INT 1
39449: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39450: LD_VAR 0 2
39454: PUSH
39455: LD_INT 24
39457: DOUBLE
39458: EQUAL
39459: IFTRUE 39469
39461: LD_INT 33
39463: DOUBLE
39464: EQUAL
39465: IFTRUE 39469
39467: GO 39494
39469: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: LD_INT 32
39477: PPUSH
39478: LD_VAR 0 1
39482: PPUSH
39483: CALL_OW 321
39487: PUSH
39488: LD_INT 2
39490: EQUAL
39491: ST_TO_ADDR
39492: GO 39810
39494: LD_INT 20
39496: DOUBLE
39497: EQUAL
39498: IFTRUE 39502
39500: GO 39527
39502: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39503: LD_ADDR_VAR 0 3
39507: PUSH
39508: LD_INT 6
39510: PPUSH
39511: LD_VAR 0 1
39515: PPUSH
39516: CALL_OW 321
39520: PUSH
39521: LD_INT 2
39523: EQUAL
39524: ST_TO_ADDR
39525: GO 39810
39527: LD_INT 22
39529: DOUBLE
39530: EQUAL
39531: IFTRUE 39541
39533: LD_INT 36
39535: DOUBLE
39536: EQUAL
39537: IFTRUE 39541
39539: GO 39566
39541: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39542: LD_ADDR_VAR 0 3
39546: PUSH
39547: LD_INT 15
39549: PPUSH
39550: LD_VAR 0 1
39554: PPUSH
39555: CALL_OW 321
39559: PUSH
39560: LD_INT 2
39562: EQUAL
39563: ST_TO_ADDR
39564: GO 39810
39566: LD_INT 30
39568: DOUBLE
39569: EQUAL
39570: IFTRUE 39574
39572: GO 39599
39574: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39575: LD_ADDR_VAR 0 3
39579: PUSH
39580: LD_INT 20
39582: PPUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 321
39592: PUSH
39593: LD_INT 2
39595: EQUAL
39596: ST_TO_ADDR
39597: GO 39810
39599: LD_INT 28
39601: DOUBLE
39602: EQUAL
39603: IFTRUE 39613
39605: LD_INT 21
39607: DOUBLE
39608: EQUAL
39609: IFTRUE 39613
39611: GO 39638
39613: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39614: LD_ADDR_VAR 0 3
39618: PUSH
39619: LD_INT 21
39621: PPUSH
39622: LD_VAR 0 1
39626: PPUSH
39627: CALL_OW 321
39631: PUSH
39632: LD_INT 2
39634: EQUAL
39635: ST_TO_ADDR
39636: GO 39810
39638: LD_INT 16
39640: DOUBLE
39641: EQUAL
39642: IFTRUE 39646
39644: GO 39671
39646: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39647: LD_ADDR_VAR 0 3
39651: PUSH
39652: LD_INT 84
39654: PPUSH
39655: LD_VAR 0 1
39659: PPUSH
39660: CALL_OW 321
39664: PUSH
39665: LD_INT 2
39667: EQUAL
39668: ST_TO_ADDR
39669: GO 39810
39671: LD_INT 19
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39685
39677: LD_INT 23
39679: DOUBLE
39680: EQUAL
39681: IFTRUE 39685
39683: GO 39710
39685: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39686: LD_ADDR_VAR 0 3
39690: PUSH
39691: LD_INT 83
39693: PPUSH
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 321
39703: PUSH
39704: LD_INT 2
39706: EQUAL
39707: ST_TO_ADDR
39708: GO 39810
39710: LD_INT 17
39712: DOUBLE
39713: EQUAL
39714: IFTRUE 39718
39716: GO 39743
39718: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_INT 39
39726: PPUSH
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 321
39736: PUSH
39737: LD_INT 2
39739: EQUAL
39740: ST_TO_ADDR
39741: GO 39810
39743: LD_INT 18
39745: DOUBLE
39746: EQUAL
39747: IFTRUE 39751
39749: GO 39776
39751: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39752: LD_ADDR_VAR 0 3
39756: PUSH
39757: LD_INT 40
39759: PPUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 321
39769: PUSH
39770: LD_INT 2
39772: EQUAL
39773: ST_TO_ADDR
39774: GO 39810
39776: LD_INT 27
39778: DOUBLE
39779: EQUAL
39780: IFTRUE 39784
39782: GO 39809
39784: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39785: LD_ADDR_VAR 0 3
39789: PUSH
39790: LD_INT 35
39792: PPUSH
39793: LD_VAR 0 1
39797: PPUSH
39798: CALL_OW 321
39802: PUSH
39803: LD_INT 2
39805: EQUAL
39806: ST_TO_ADDR
39807: GO 39810
39809: POP
// end ;
39810: LD_VAR 0 3
39814: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39815: LD_INT 0
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
// result := false ;
39828: LD_ADDR_VAR 0 6
39832: PUSH
39833: LD_INT 0
39835: ST_TO_ADDR
// if btype = b_depot then
39836: LD_VAR 0 2
39840: PUSH
39841: LD_INT 0
39843: EQUAL
39844: IFFALSE 39856
// begin result := true ;
39846: LD_ADDR_VAR 0 6
39850: PUSH
39851: LD_INT 1
39853: ST_TO_ADDR
// exit ;
39854: GO 40682
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39856: LD_VAR 0 1
39860: NOT
39861: PUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 266
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: IN
39882: NOT
39883: OR
39884: PUSH
39885: LD_VAR 0 2
39889: NOT
39890: OR
39891: PUSH
39892: LD_VAR 0 5
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: LD_INT 3
39908: PUSH
39909: LD_INT 4
39911: PUSH
39912: LD_INT 5
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: IN
39923: NOT
39924: OR
39925: PUSH
39926: LD_VAR 0 3
39930: PPUSH
39931: LD_VAR 0 4
39935: PPUSH
39936: CALL_OW 488
39940: NOT
39941: OR
39942: IFFALSE 39946
// exit ;
39944: GO 40682
// side := GetSide ( depot ) ;
39946: LD_ADDR_VAR 0 9
39950: PUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: CALL_OW 255
39960: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39961: LD_VAR 0 9
39965: PPUSH
39966: LD_VAR 0 2
39970: PPUSH
39971: CALL 39439 0 2
39975: NOT
39976: IFFALSE 39980
// exit ;
39978: GO 40682
// pom := GetBase ( depot ) ;
39980: LD_ADDR_VAR 0 10
39984: PUSH
39985: LD_VAR 0 1
39989: PPUSH
39990: CALL_OW 274
39994: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39995: LD_ADDR_VAR 0 11
39999: PUSH
40000: LD_VAR 0 2
40004: PPUSH
40005: LD_VAR 0 1
40009: PPUSH
40010: CALL_OW 248
40014: PPUSH
40015: CALL_OW 450
40019: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40020: LD_VAR 0 10
40024: PPUSH
40025: LD_INT 1
40027: PPUSH
40028: CALL_OW 275
40032: PUSH
40033: LD_VAR 0 11
40037: PUSH
40038: LD_INT 1
40040: ARRAY
40041: GREATEREQUAL
40042: PUSH
40043: LD_VAR 0 10
40047: PPUSH
40048: LD_INT 2
40050: PPUSH
40051: CALL_OW 275
40055: PUSH
40056: LD_VAR 0 11
40060: PUSH
40061: LD_INT 2
40063: ARRAY
40064: GREATEREQUAL
40065: AND
40066: PUSH
40067: LD_VAR 0 10
40071: PPUSH
40072: LD_INT 3
40074: PPUSH
40075: CALL_OW 275
40079: PUSH
40080: LD_VAR 0 11
40084: PUSH
40085: LD_INT 3
40087: ARRAY
40088: GREATEREQUAL
40089: AND
40090: NOT
40091: IFFALSE 40095
// exit ;
40093: GO 40682
// if GetBType ( depot ) = b_depot then
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 266
40104: PUSH
40105: LD_INT 0
40107: EQUAL
40108: IFFALSE 40120
// dist := 28 else
40110: LD_ADDR_VAR 0 14
40114: PUSH
40115: LD_INT 28
40117: ST_TO_ADDR
40118: GO 40128
// dist := 36 ;
40120: LD_ADDR_VAR 0 14
40124: PUSH
40125: LD_INT 36
40127: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40128: LD_VAR 0 1
40132: PPUSH
40133: LD_VAR 0 3
40137: PPUSH
40138: LD_VAR 0 4
40142: PPUSH
40143: CALL_OW 297
40147: PUSH
40148: LD_VAR 0 14
40152: GREATER
40153: IFFALSE 40157
// exit ;
40155: GO 40682
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40157: LD_ADDR_VAR 0 12
40161: PUSH
40162: LD_VAR 0 2
40166: PPUSH
40167: LD_VAR 0 3
40171: PPUSH
40172: LD_VAR 0 4
40176: PPUSH
40177: LD_VAR 0 5
40181: PPUSH
40182: LD_VAR 0 1
40186: PPUSH
40187: CALL_OW 248
40191: PPUSH
40192: LD_INT 0
40194: PPUSH
40195: CALL 40687 0 6
40199: ST_TO_ADDR
// if not hexes then
40200: LD_VAR 0 12
40204: NOT
40205: IFFALSE 40209
// exit ;
40207: GO 40682
// hex := GetHexInfo ( x , y ) ;
40209: LD_ADDR_VAR 0 15
40213: PUSH
40214: LD_VAR 0 3
40218: PPUSH
40219: LD_VAR 0 4
40223: PPUSH
40224: CALL_OW 546
40228: ST_TO_ADDR
// if hex [ 1 ] then
40229: LD_VAR 0 15
40233: PUSH
40234: LD_INT 1
40236: ARRAY
40237: IFFALSE 40241
// exit ;
40239: GO 40682
// height := hex [ 2 ] ;
40241: LD_ADDR_VAR 0 13
40245: PUSH
40246: LD_VAR 0 15
40250: PUSH
40251: LD_INT 2
40253: ARRAY
40254: ST_TO_ADDR
// for i = 1 to hexes do
40255: LD_ADDR_VAR 0 7
40259: PUSH
40260: DOUBLE
40261: LD_INT 1
40263: DEC
40264: ST_TO_ADDR
40265: LD_VAR 0 12
40269: PUSH
40270: FOR_TO
40271: IFFALSE 40601
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40273: LD_VAR 0 12
40277: PUSH
40278: LD_VAR 0 7
40282: ARRAY
40283: PUSH
40284: LD_INT 1
40286: ARRAY
40287: PPUSH
40288: LD_VAR 0 12
40292: PUSH
40293: LD_VAR 0 7
40297: ARRAY
40298: PUSH
40299: LD_INT 2
40301: ARRAY
40302: PPUSH
40303: CALL_OW 488
40307: NOT
40308: PUSH
40309: LD_VAR 0 12
40313: PUSH
40314: LD_VAR 0 7
40318: ARRAY
40319: PUSH
40320: LD_INT 1
40322: ARRAY
40323: PPUSH
40324: LD_VAR 0 12
40328: PUSH
40329: LD_VAR 0 7
40333: ARRAY
40334: PUSH
40335: LD_INT 2
40337: ARRAY
40338: PPUSH
40339: CALL_OW 428
40343: PUSH
40344: LD_INT 0
40346: GREATER
40347: OR
40348: PUSH
40349: LD_VAR 0 12
40353: PUSH
40354: LD_VAR 0 7
40358: ARRAY
40359: PUSH
40360: LD_INT 1
40362: ARRAY
40363: PPUSH
40364: LD_VAR 0 12
40368: PUSH
40369: LD_VAR 0 7
40373: ARRAY
40374: PUSH
40375: LD_INT 2
40377: ARRAY
40378: PPUSH
40379: CALL_OW 351
40383: OR
40384: IFFALSE 40390
// exit ;
40386: POP
40387: POP
40388: GO 40682
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40390: LD_ADDR_VAR 0 8
40394: PUSH
40395: LD_VAR 0 12
40399: PUSH
40400: LD_VAR 0 7
40404: ARRAY
40405: PUSH
40406: LD_INT 1
40408: ARRAY
40409: PPUSH
40410: LD_VAR 0 12
40414: PUSH
40415: LD_VAR 0 7
40419: ARRAY
40420: PUSH
40421: LD_INT 2
40423: ARRAY
40424: PPUSH
40425: CALL_OW 546
40429: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40430: LD_VAR 0 8
40434: PUSH
40435: LD_INT 1
40437: ARRAY
40438: PUSH
40439: LD_VAR 0 8
40443: PUSH
40444: LD_INT 2
40446: ARRAY
40447: PUSH
40448: LD_VAR 0 13
40452: PUSH
40453: LD_INT 2
40455: PLUS
40456: GREATER
40457: OR
40458: PUSH
40459: LD_VAR 0 8
40463: PUSH
40464: LD_INT 2
40466: ARRAY
40467: PUSH
40468: LD_VAR 0 13
40472: PUSH
40473: LD_INT 2
40475: MINUS
40476: LESS
40477: OR
40478: PUSH
40479: LD_VAR 0 8
40483: PUSH
40484: LD_INT 3
40486: ARRAY
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 8
40493: PUSH
40494: LD_INT 9
40496: PUSH
40497: LD_INT 10
40499: PUSH
40500: LD_INT 11
40502: PUSH
40503: LD_INT 12
40505: PUSH
40506: LD_INT 13
40508: PUSH
40509: LD_INT 16
40511: PUSH
40512: LD_INT 17
40514: PUSH
40515: LD_INT 18
40517: PUSH
40518: LD_INT 19
40520: PUSH
40521: LD_INT 20
40523: PUSH
40524: LD_INT 21
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: IN
40542: NOT
40543: OR
40544: PUSH
40545: LD_VAR 0 8
40549: PUSH
40550: LD_INT 5
40552: ARRAY
40553: NOT
40554: OR
40555: PUSH
40556: LD_VAR 0 8
40560: PUSH
40561: LD_INT 6
40563: ARRAY
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 7
40573: PUSH
40574: LD_INT 9
40576: PUSH
40577: LD_INT 10
40579: PUSH
40580: LD_INT 11
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: IN
40591: NOT
40592: OR
40593: IFFALSE 40599
// exit ;
40595: POP
40596: POP
40597: GO 40682
// end ;
40599: GO 40270
40601: POP
40602: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40603: LD_VAR 0 9
40607: PPUSH
40608: LD_VAR 0 3
40612: PPUSH
40613: LD_VAR 0 4
40617: PPUSH
40618: LD_INT 20
40620: PPUSH
40621: CALL 32605 0 4
40625: PUSH
40626: LD_INT 4
40628: ARRAY
40629: IFFALSE 40633
// exit ;
40631: GO 40682
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40633: LD_VAR 0 2
40637: PUSH
40638: LD_INT 29
40640: PUSH
40641: LD_INT 30
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: IN
40648: PUSH
40649: LD_VAR 0 3
40653: PPUSH
40654: LD_VAR 0 4
40658: PPUSH
40659: LD_VAR 0 9
40663: PPUSH
40664: CALL_OW 440
40668: NOT
40669: AND
40670: IFFALSE 40674
// exit ;
40672: GO 40682
// result := true ;
40674: LD_ADDR_VAR 0 6
40678: PUSH
40679: LD_INT 1
40681: ST_TO_ADDR
// end ;
40682: LD_VAR 0 6
40686: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40687: LD_INT 0
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
40709: PPUSH
40710: PPUSH
40711: PPUSH
40712: PPUSH
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
// result = [ ] ;
40747: LD_ADDR_VAR 0 7
40751: PUSH
40752: EMPTY
40753: ST_TO_ADDR
// temp_list = [ ] ;
40754: LD_ADDR_VAR 0 9
40758: PUSH
40759: EMPTY
40760: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40761: LD_VAR 0 4
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: LD_INT 3
40777: PUSH
40778: LD_INT 4
40780: PUSH
40781: LD_INT 5
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: IN
40792: NOT
40793: PUSH
40794: LD_VAR 0 1
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: IN
40809: PUSH
40810: LD_VAR 0 5
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: IN
40829: NOT
40830: AND
40831: OR
40832: IFFALSE 40836
// exit ;
40834: GO 59227
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40836: LD_VAR 0 1
40840: PUSH
40841: LD_INT 6
40843: PUSH
40844: LD_INT 7
40846: PUSH
40847: LD_INT 8
40849: PUSH
40850: LD_INT 13
40852: PUSH
40853: LD_INT 12
40855: PUSH
40856: LD_INT 15
40858: PUSH
40859: LD_INT 11
40861: PUSH
40862: LD_INT 14
40864: PUSH
40865: LD_INT 10
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: IN
40879: IFFALSE 40889
// btype = b_lab ;
40881: LD_ADDR_VAR 0 1
40885: PUSH
40886: LD_INT 6
40888: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40889: LD_VAR 0 6
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: IN
40908: NOT
40909: PUSH
40910: LD_VAR 0 1
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 3
40926: PUSH
40927: LD_INT 6
40929: PUSH
40930: LD_INT 36
40932: PUSH
40933: LD_INT 4
40935: PUSH
40936: LD_INT 5
40938: PUSH
40939: LD_INT 31
40941: PUSH
40942: LD_INT 32
40944: PUSH
40945: LD_INT 33
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: IN
40961: NOT
40962: PUSH
40963: LD_VAR 0 6
40967: PUSH
40968: LD_INT 1
40970: EQUAL
40971: AND
40972: OR
40973: PUSH
40974: LD_VAR 0 1
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: LD_INT 3
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: IN
40989: NOT
40990: PUSH
40991: LD_VAR 0 6
40995: PUSH
40996: LD_INT 2
40998: EQUAL
40999: AND
41000: OR
41001: IFFALSE 41011
// mode = 0 ;
41003: LD_ADDR_VAR 0 6
41007: PUSH
41008: LD_INT 0
41010: ST_TO_ADDR
// case mode of 0 :
41011: LD_VAR 0 6
41015: PUSH
41016: LD_INT 0
41018: DOUBLE
41019: EQUAL
41020: IFTRUE 41024
41022: GO 52477
41024: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41025: LD_ADDR_VAR 0 11
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 3
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 3
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41218: LD_ADDR_VAR 0 12
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 3
41375: NEG
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 3
41386: NEG
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41414: LD_ADDR_VAR 0 13
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 2
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: NEG
41562: PUSH
41563: LD_INT 3
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 3
41573: NEG
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: LD_INT 3
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41613: LD_ADDR_VAR 0 14
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 3
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 3
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 2
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41809: LD_ADDR_VAR 0 15
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42002: LD_ADDR_VAR 0 16
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42195: LD_ADDR_VAR 0 17
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42425: LD_ADDR_VAR 0 18
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 2
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42655: LD_ADDR_VAR 0 19
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: LD_INT 2
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42885: LD_ADDR_VAR 0 20
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43115: LD_ADDR_VAR 0 21
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43345: LD_ADDR_VAR 0 22
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43575: LD_ADDR_VAR 0 23
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: LD_INT 3
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43855: LD_ADDR_VAR 0 24
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 3
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44131: LD_ADDR_VAR 0 25
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44405: LD_ADDR_VAR 0 26
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 3
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44681: LD_ADDR_VAR 0 27
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 3
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44961: LD_ADDR_VAR 0 28
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 3
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45243: LD_ADDR_VAR 0 29
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 3
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45522: LD_ADDR_VAR 0 30
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 3
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 3
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45800: LD_ADDR_VAR 0 31
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 3
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 3
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46078: LD_ADDR_VAR 0 32
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 3
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46356: LD_ADDR_VAR 0 33
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: LD_INT 3
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46635: LD_ADDR_VAR 0 34
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46915: LD_ADDR_VAR 0 35
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47027: LD_ADDR_VAR 0 36
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47139: LD_ADDR_VAR 0 37
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47251: LD_ADDR_VAR 0 38
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47363: LD_ADDR_VAR 0 39
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47475: LD_ADDR_VAR 0 40
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47587: LD_ADDR_VAR 0 41
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: LD_INT 3
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 3
47830: PUSH
47831: LD_INT 3
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 3
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 3
47861: NEG
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: NEG
47897: PUSH
47898: LD_INT 3
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47937: LD_ADDR_VAR 0 42
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: LD_INT 3
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 3
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 3
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 3
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 3
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 3
48234: NEG
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 3
48246: NEG
48247: PUSH
48248: LD_INT 3
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48287: LD_ADDR_VAR 0 43
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 3
48583: NEG
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 3
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48635: LD_ADDR_VAR 0 44
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 3
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 3
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 3
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48985: LD_ADDR_VAR 0 45
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 2
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: LD_INT 3
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 3
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 3
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 3
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 3
49294: NEG
49295: PUSH
49296: LD_INT 3
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49335: LD_ADDR_VAR 0 46
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 3
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 3
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 3
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 3
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49683: LD_ADDR_VAR 0 47
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49834: LD_ADDR_VAR 0 48
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49981: LD_ADDR_VAR 0 49
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50125: LD_ADDR_VAR 0 50
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50269: LD_ADDR_VAR 0 51
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50416: LD_ADDR_VAR 0 52
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50567: LD_ADDR_VAR 0 53
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50797: LD_ADDR_VAR 0 54
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51027: LD_ADDR_VAR 0 55
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51257: LD_ADDR_VAR 0 56
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51487: LD_ADDR_VAR 0 57
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51717: LD_ADDR_VAR 0 58
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51947: LD_ADDR_VAR 0 59
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52035: LD_ADDR_VAR 0 60
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52123: LD_ADDR_VAR 0 61
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52211: LD_ADDR_VAR 0 62
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52299: LD_ADDR_VAR 0 63
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52387: LD_ADDR_VAR 0 64
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// end ; 1 :
52475: GO 58372
52477: LD_INT 1
52479: DOUBLE
52480: EQUAL
52481: IFTRUE 52485
52483: GO 55108
52485: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52486: LD_ADDR_VAR 0 11
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 3
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52530: LD_ADDR_VAR 0 12
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: LIST
52570: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52571: LD_ADDR_VAR 0 13
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52611: LD_ADDR_VAR 0 14
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52652: LD_ADDR_VAR 0 15
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: NEG
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 3
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52696: LD_ADDR_VAR 0 16
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52742: LD_ADDR_VAR 0 17
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 3
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 3
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: LIST
52785: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52786: LD_ADDR_VAR 0 18
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 3
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: LIST
52826: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52827: LD_ADDR_VAR 0 19
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: LD_INT 3
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52867: LD_ADDR_VAR 0 20
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52908: LD_ADDR_VAR 0 21
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 3
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 3
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52952: LD_ADDR_VAR 0 22
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: NEG
52984: PUSH
52985: LD_INT 3
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52998: LD_ADDR_VAR 0 23
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 3
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 4
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53042: LD_ADDR_VAR 0 24
53046: PUSH
53047: LD_INT 3
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 4
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53083: LD_ADDR_VAR 0 25
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 4
53100: PUSH
53101: LD_INT 3
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: LD_INT 4
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53123: LD_ADDR_VAR 0 26
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 4
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53164: LD_ADDR_VAR 0 27
53168: PUSH
53169: LD_INT 3
53171: NEG
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: NEG
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 4
53193: NEG
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: LIST
53207: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53208: LD_ADDR_VAR 0 28
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: LD_INT 3
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: LD_INT 4
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 4
53239: NEG
53240: PUSH
53241: LD_INT 3
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53254: LD_ADDR_VAR 0 29
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 4
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 4
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 5
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 5
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 4
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 6
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 6
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 5
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53409: LD_ADDR_VAR 0 30
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 4
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 4
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 4
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 5
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 5
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 5
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 6
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 6
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53552: LD_ADDR_VAR 0 31
53556: PUSH
53557: LD_INT 3
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 4
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 4
53599: PUSH
53600: LD_INT 4
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: LD_INT 4
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 5
53619: PUSH
53620: LD_INT 4
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 5
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 4
53639: PUSH
53640: LD_INT 5
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 6
53649: PUSH
53650: LD_INT 5
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 6
53659: PUSH
53660: LD_INT 6
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 5
53669: PUSH
53670: LD_INT 6
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53691: LD_ADDR_VAR 0 32
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 4
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 5
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 5
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 4
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 6
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 6
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 5
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53834: LD_ADDR_VAR 0 33
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 4
53886: NEG
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 4
53897: NEG
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 4
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 5
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 5
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 5
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 6
53954: NEG
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 6
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53989: LD_ADDR_VAR 0 34
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 3
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: LD_INT 4
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 4
54044: NEG
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 4
54056: NEG
54057: PUSH
54058: LD_INT 4
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 4
54068: NEG
54069: PUSH
54070: LD_INT 5
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 5
54080: NEG
54081: PUSH
54082: LD_INT 4
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 5
54092: NEG
54093: PUSH
54094: LD_INT 5
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 5
54104: NEG
54105: PUSH
54106: LD_INT 6
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 6
54116: NEG
54117: PUSH
54118: LD_INT 5
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 6
54128: NEG
54129: PUSH
54130: LD_INT 6
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54152: LD_ADDR_VAR 0 41
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54196: LD_ADDR_VAR 0 42
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54237: LD_ADDR_VAR 0 43
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 3
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54277: LD_ADDR_VAR 0 44
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54318: LD_ADDR_VAR 0 45
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54362: LD_ADDR_VAR 0 46
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 3
54393: NEG
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54408: LD_ADDR_VAR 0 47
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54441: LD_ADDR_VAR 0 48
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54472: LD_ADDR_VAR 0 49
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54501: LD_ADDR_VAR 0 50
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54530: LD_ADDR_VAR 0 51
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54561: LD_ADDR_VAR 0 52
54565: PUSH
54566: LD_INT 3
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54594: LD_ADDR_VAR 0 53
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 3
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54638: LD_ADDR_VAR 0 54
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54679: LD_ADDR_VAR 0 55
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 3
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54719: LD_ADDR_VAR 0 56
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54760: LD_ADDR_VAR 0 57
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 3
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54804: LD_ADDR_VAR 0 58
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: NEG
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 3
54835: NEG
54836: PUSH
54837: LD_INT 3
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54850: LD_ADDR_VAR 0 59
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54894: LD_ADDR_VAR 0 60
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54935: LD_ADDR_VAR 0 61
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: LIST
54974: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54975: LD_ADDR_VAR 0 62
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55016: LD_ADDR_VAR 0 63
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55060: LD_ADDR_VAR 0 64
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// end ; 2 :
55106: GO 58372
55108: LD_INT 2
55110: DOUBLE
55111: EQUAL
55112: IFTRUE 55116
55114: GO 58371
55116: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55117: LD_ADDR_VAR 0 29
55121: PUSH
55122: LD_INT 4
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 5
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 4
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 5
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 3
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 4
55237: PUSH
55238: LD_INT 3
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 4
55247: PUSH
55248: LD_INT 4
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 3
55257: PUSH
55258: LD_INT 4
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 3
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 4
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 4
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 4
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 5
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 5
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 5
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: LD_INT 3
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 2
55423: NEG
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 4
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 4
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 4
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 4
55502: NEG
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 4
55514: NEG
55515: PUSH
55516: LD_INT 5
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 3
55526: NEG
55527: PUSH
55528: LD_INT 4
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: LD_INT 3
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 4
55550: NEG
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 5
55562: NEG
55563: PUSH
55564: LD_INT 4
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 5
55574: NEG
55575: PUSH
55576: LD_INT 5
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: LD_INT 5
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 5
55598: NEG
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55655: LD_ADDR_VAR 0 30
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: LD_INT 4
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 4
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 5
55682: PUSH
55683: LD_INT 4
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 5
55692: PUSH
55693: LD_INT 5
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 4
55702: PUSH
55703: LD_INT 5
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 5
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 3
55742: PUSH
55743: LD_INT 5
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 4
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 4
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 4
55845: NEG
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 4
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 4
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 5
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 5
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 5
55924: NEG
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: LD_INT 4
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 4
56007: NEG
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 4
56019: NEG
56020: PUSH
56021: LD_INT 4
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 4
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 4
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 5
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 4
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 3
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 3
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 4
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 5
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 5
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56202: LD_ADDR_VAR 0 31
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 4
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 4
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 5
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 5
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 4
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 5
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 4
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 4
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 4
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 4
56404: NEG
56405: PUSH
56406: LD_INT 4
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 4
56416: NEG
56417: PUSH
56418: LD_INT 5
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 3
56428: NEG
56429: PUSH
56430: LD_INT 4
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 4
56452: NEG
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 5
56464: NEG
56465: PUSH
56466: LD_INT 4
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 5
56476: NEG
56477: PUSH
56478: LD_INT 5
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: NEG
56489: PUSH
56490: LD_INT 5
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 5
56500: NEG
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 4
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 4
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 4
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 5
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 5
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 4
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 5
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56752: LD_ADDR_VAR 0 32
56756: PUSH
56757: LD_INT 4
56759: NEG
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 4
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 4
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 5
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 5
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 5
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: LD_INT 3
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 4
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: NEG
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 4
56921: NEG
56922: PUSH
56923: LD_INT 3
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 4
56933: NEG
56934: PUSH
56935: LD_INT 4
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 4
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 4
56957: NEG
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 4
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 5
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 4
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 5
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 5
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 4
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 4
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 3
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 4
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 4
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 5
57184: PUSH
57185: LD_INT 4
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 5
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: LD_INT 5
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: LD_INT 4
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: LD_INT 3
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 5
57234: PUSH
57235: LD_INT 3
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: LD_INT 5
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57299: LD_ADDR_VAR 0 33
57303: PUSH
57304: LD_INT 4
57306: NEG
57307: PUSH
57308: LD_INT 4
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 4
57318: NEG
57319: PUSH
57320: LD_INT 5
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: NEG
57331: PUSH
57332: LD_INT 4
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: LD_INT 3
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 4
57354: NEG
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 5
57366: NEG
57367: PUSH
57368: LD_INT 4
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 5
57378: NEG
57379: PUSH
57380: LD_INT 5
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 3
57390: NEG
57391: PUSH
57392: LD_INT 5
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 5
57402: NEG
57403: PUSH
57404: LD_INT 3
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 4
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 3
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 4
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 4
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 5
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 5
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 4
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 5
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: LD_INT 4
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: LD_INT 4
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 3
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 4
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 4
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: LD_INT 4
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 4
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 5
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 5
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 4
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: LD_INT 5
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57837: LD_ADDR_VAR 0 34
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 4
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 5
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 4
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 3
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 3
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: LD_INT 4
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 5
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: LD_INT 5
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 3
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 4
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: PUSH
58040: LD_INT 4
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 5
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 5
58069: PUSH
58070: LD_INT 5
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: LD_INT 5
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 4
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 5
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 5
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 4
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: LD_INT 4
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 4
58222: NEG
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 4
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 3
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 4
58267: NEG
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 5
58278: NEG
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 5
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 5
58301: NEG
58302: PUSH
58303: LD_INT 2
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 2
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: ST_TO_ADDR
// end ; end ;
58369: GO 58372
58371: POP
// case btype of b_depot , b_warehouse :
58372: LD_VAR 0 1
58376: PUSH
58377: LD_INT 0
58379: DOUBLE
58380: EQUAL
58381: IFTRUE 58391
58383: LD_INT 1
58385: DOUBLE
58386: EQUAL
58387: IFTRUE 58391
58389: GO 58592
58391: POP
// case nation of nation_american :
58392: LD_VAR 0 5
58396: PUSH
58397: LD_INT 1
58399: DOUBLE
58400: EQUAL
58401: IFTRUE 58405
58403: GO 58461
58405: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58406: LD_ADDR_VAR 0 9
58410: PUSH
58411: LD_VAR 0 11
58415: PUSH
58416: LD_VAR 0 12
58420: PUSH
58421: LD_VAR 0 13
58425: PUSH
58426: LD_VAR 0 14
58430: PUSH
58431: LD_VAR 0 15
58435: PUSH
58436: LD_VAR 0 16
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: PUSH
58449: LD_VAR 0 4
58453: PUSH
58454: LD_INT 1
58456: PLUS
58457: ARRAY
58458: ST_TO_ADDR
58459: GO 58590
58461: LD_INT 2
58463: DOUBLE
58464: EQUAL
58465: IFTRUE 58469
58467: GO 58525
58469: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58470: LD_ADDR_VAR 0 9
58474: PUSH
58475: LD_VAR 0 17
58479: PUSH
58480: LD_VAR 0 18
58484: PUSH
58485: LD_VAR 0 19
58489: PUSH
58490: LD_VAR 0 20
58494: PUSH
58495: LD_VAR 0 21
58499: PUSH
58500: LD_VAR 0 22
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: PUSH
58513: LD_VAR 0 4
58517: PUSH
58518: LD_INT 1
58520: PLUS
58521: ARRAY
58522: ST_TO_ADDR
58523: GO 58590
58525: LD_INT 3
58527: DOUBLE
58528: EQUAL
58529: IFTRUE 58533
58531: GO 58589
58533: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58534: LD_ADDR_VAR 0 9
58538: PUSH
58539: LD_VAR 0 23
58543: PUSH
58544: LD_VAR 0 24
58548: PUSH
58549: LD_VAR 0 25
58553: PUSH
58554: LD_VAR 0 26
58558: PUSH
58559: LD_VAR 0 27
58563: PUSH
58564: LD_VAR 0 28
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: PUSH
58577: LD_VAR 0 4
58581: PUSH
58582: LD_INT 1
58584: PLUS
58585: ARRAY
58586: ST_TO_ADDR
58587: GO 58590
58589: POP
58590: GO 59145
58592: LD_INT 2
58594: DOUBLE
58595: EQUAL
58596: IFTRUE 58606
58598: LD_INT 3
58600: DOUBLE
58601: EQUAL
58602: IFTRUE 58606
58604: GO 58662
58606: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58607: LD_ADDR_VAR 0 9
58611: PUSH
58612: LD_VAR 0 29
58616: PUSH
58617: LD_VAR 0 30
58621: PUSH
58622: LD_VAR 0 31
58626: PUSH
58627: LD_VAR 0 32
58631: PUSH
58632: LD_VAR 0 33
58636: PUSH
58637: LD_VAR 0 34
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: PUSH
58650: LD_VAR 0 4
58654: PUSH
58655: LD_INT 1
58657: PLUS
58658: ARRAY
58659: ST_TO_ADDR
58660: GO 59145
58662: LD_INT 16
58664: DOUBLE
58665: EQUAL
58666: IFTRUE 58724
58668: LD_INT 17
58670: DOUBLE
58671: EQUAL
58672: IFTRUE 58724
58674: LD_INT 18
58676: DOUBLE
58677: EQUAL
58678: IFTRUE 58724
58680: LD_INT 19
58682: DOUBLE
58683: EQUAL
58684: IFTRUE 58724
58686: LD_INT 22
58688: DOUBLE
58689: EQUAL
58690: IFTRUE 58724
58692: LD_INT 20
58694: DOUBLE
58695: EQUAL
58696: IFTRUE 58724
58698: LD_INT 21
58700: DOUBLE
58701: EQUAL
58702: IFTRUE 58724
58704: LD_INT 23
58706: DOUBLE
58707: EQUAL
58708: IFTRUE 58724
58710: LD_INT 24
58712: DOUBLE
58713: EQUAL
58714: IFTRUE 58724
58716: LD_INT 25
58718: DOUBLE
58719: EQUAL
58720: IFTRUE 58724
58722: GO 58780
58724: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58725: LD_ADDR_VAR 0 9
58729: PUSH
58730: LD_VAR 0 35
58734: PUSH
58735: LD_VAR 0 36
58739: PUSH
58740: LD_VAR 0 37
58744: PUSH
58745: LD_VAR 0 38
58749: PUSH
58750: LD_VAR 0 39
58754: PUSH
58755: LD_VAR 0 40
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: PUSH
58768: LD_VAR 0 4
58772: PUSH
58773: LD_INT 1
58775: PLUS
58776: ARRAY
58777: ST_TO_ADDR
58778: GO 59145
58780: LD_INT 6
58782: DOUBLE
58783: EQUAL
58784: IFTRUE 58836
58786: LD_INT 7
58788: DOUBLE
58789: EQUAL
58790: IFTRUE 58836
58792: LD_INT 8
58794: DOUBLE
58795: EQUAL
58796: IFTRUE 58836
58798: LD_INT 13
58800: DOUBLE
58801: EQUAL
58802: IFTRUE 58836
58804: LD_INT 12
58806: DOUBLE
58807: EQUAL
58808: IFTRUE 58836
58810: LD_INT 15
58812: DOUBLE
58813: EQUAL
58814: IFTRUE 58836
58816: LD_INT 11
58818: DOUBLE
58819: EQUAL
58820: IFTRUE 58836
58822: LD_INT 14
58824: DOUBLE
58825: EQUAL
58826: IFTRUE 58836
58828: LD_INT 10
58830: DOUBLE
58831: EQUAL
58832: IFTRUE 58836
58834: GO 58892
58836: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58837: LD_ADDR_VAR 0 9
58841: PUSH
58842: LD_VAR 0 41
58846: PUSH
58847: LD_VAR 0 42
58851: PUSH
58852: LD_VAR 0 43
58856: PUSH
58857: LD_VAR 0 44
58861: PUSH
58862: LD_VAR 0 45
58866: PUSH
58867: LD_VAR 0 46
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: PUSH
58880: LD_VAR 0 4
58884: PUSH
58885: LD_INT 1
58887: PLUS
58888: ARRAY
58889: ST_TO_ADDR
58890: GO 59145
58892: LD_INT 36
58894: DOUBLE
58895: EQUAL
58896: IFTRUE 58900
58898: GO 58956
58900: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58901: LD_ADDR_VAR 0 9
58905: PUSH
58906: LD_VAR 0 47
58910: PUSH
58911: LD_VAR 0 48
58915: PUSH
58916: LD_VAR 0 49
58920: PUSH
58921: LD_VAR 0 50
58925: PUSH
58926: LD_VAR 0 51
58930: PUSH
58931: LD_VAR 0 52
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: PUSH
58944: LD_VAR 0 4
58948: PUSH
58949: LD_INT 1
58951: PLUS
58952: ARRAY
58953: ST_TO_ADDR
58954: GO 59145
58956: LD_INT 4
58958: DOUBLE
58959: EQUAL
58960: IFTRUE 58982
58962: LD_INT 5
58964: DOUBLE
58965: EQUAL
58966: IFTRUE 58982
58968: LD_INT 34
58970: DOUBLE
58971: EQUAL
58972: IFTRUE 58982
58974: LD_INT 37
58976: DOUBLE
58977: EQUAL
58978: IFTRUE 58982
58980: GO 59038
58982: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58983: LD_ADDR_VAR 0 9
58987: PUSH
58988: LD_VAR 0 53
58992: PUSH
58993: LD_VAR 0 54
58997: PUSH
58998: LD_VAR 0 55
59002: PUSH
59003: LD_VAR 0 56
59007: PUSH
59008: LD_VAR 0 57
59012: PUSH
59013: LD_VAR 0 58
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: PUSH
59026: LD_VAR 0 4
59030: PUSH
59031: LD_INT 1
59033: PLUS
59034: ARRAY
59035: ST_TO_ADDR
59036: GO 59145
59038: LD_INT 31
59040: DOUBLE
59041: EQUAL
59042: IFTRUE 59088
59044: LD_INT 32
59046: DOUBLE
59047: EQUAL
59048: IFTRUE 59088
59050: LD_INT 33
59052: DOUBLE
59053: EQUAL
59054: IFTRUE 59088
59056: LD_INT 27
59058: DOUBLE
59059: EQUAL
59060: IFTRUE 59088
59062: LD_INT 26
59064: DOUBLE
59065: EQUAL
59066: IFTRUE 59088
59068: LD_INT 28
59070: DOUBLE
59071: EQUAL
59072: IFTRUE 59088
59074: LD_INT 29
59076: DOUBLE
59077: EQUAL
59078: IFTRUE 59088
59080: LD_INT 30
59082: DOUBLE
59083: EQUAL
59084: IFTRUE 59088
59086: GO 59144
59088: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59089: LD_ADDR_VAR 0 9
59093: PUSH
59094: LD_VAR 0 59
59098: PUSH
59099: LD_VAR 0 60
59103: PUSH
59104: LD_VAR 0 61
59108: PUSH
59109: LD_VAR 0 62
59113: PUSH
59114: LD_VAR 0 63
59118: PUSH
59119: LD_VAR 0 64
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: PUSH
59132: LD_VAR 0 4
59136: PUSH
59137: LD_INT 1
59139: PLUS
59140: ARRAY
59141: ST_TO_ADDR
59142: GO 59145
59144: POP
// temp_list2 = [ ] ;
59145: LD_ADDR_VAR 0 10
59149: PUSH
59150: EMPTY
59151: ST_TO_ADDR
// for i in temp_list do
59152: LD_ADDR_VAR 0 8
59156: PUSH
59157: LD_VAR 0 9
59161: PUSH
59162: FOR_IN
59163: IFFALSE 59215
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59165: LD_ADDR_VAR 0 10
59169: PUSH
59170: LD_VAR 0 10
59174: PUSH
59175: LD_VAR 0 8
59179: PUSH
59180: LD_INT 1
59182: ARRAY
59183: PUSH
59184: LD_VAR 0 2
59188: PLUS
59189: PUSH
59190: LD_VAR 0 8
59194: PUSH
59195: LD_INT 2
59197: ARRAY
59198: PUSH
59199: LD_VAR 0 3
59203: PLUS
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: EMPTY
59210: LIST
59211: ADD
59212: ST_TO_ADDR
59213: GO 59162
59215: POP
59216: POP
// result = temp_list2 ;
59217: LD_ADDR_VAR 0 7
59221: PUSH
59222: LD_VAR 0 10
59226: ST_TO_ADDR
// end ;
59227: LD_VAR 0 7
59231: RET
// export function EnemyInRange ( unit , dist ) ; begin
59232: LD_INT 0
59234: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59235: LD_ADDR_VAR 0 3
59239: PUSH
59240: LD_VAR 0 1
59244: PPUSH
59245: CALL_OW 255
59249: PPUSH
59250: LD_VAR 0 1
59254: PPUSH
59255: CALL_OW 250
59259: PPUSH
59260: LD_VAR 0 1
59264: PPUSH
59265: CALL_OW 251
59269: PPUSH
59270: LD_VAR 0 2
59274: PPUSH
59275: CALL 32605 0 4
59279: PUSH
59280: LD_INT 4
59282: ARRAY
59283: ST_TO_ADDR
// end ;
59284: LD_VAR 0 3
59288: RET
// export function PlayerSeeMe ( unit ) ; begin
59289: LD_INT 0
59291: PPUSH
// result := See ( your_side , unit ) ;
59292: LD_ADDR_VAR 0 2
59296: PUSH
59297: LD_OWVAR 2
59301: PPUSH
59302: LD_VAR 0 1
59306: PPUSH
59307: CALL_OW 292
59311: ST_TO_ADDR
// end ;
59312: LD_VAR 0 2
59316: RET
// export function ReverseDir ( unit ) ; begin
59317: LD_INT 0
59319: PPUSH
// if not unit then
59320: LD_VAR 0 1
59324: NOT
59325: IFFALSE 59329
// exit ;
59327: GO 59352
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59329: LD_ADDR_VAR 0 2
59333: PUSH
59334: LD_VAR 0 1
59338: PPUSH
59339: CALL_OW 254
59343: PUSH
59344: LD_INT 3
59346: PLUS
59347: PUSH
59348: LD_INT 6
59350: MOD
59351: ST_TO_ADDR
// end ;
59352: LD_VAR 0 2
59356: RET
// export function ReverseArray ( array ) ; var i ; begin
59357: LD_INT 0
59359: PPUSH
59360: PPUSH
// if not array then
59361: LD_VAR 0 1
59365: NOT
59366: IFFALSE 59370
// exit ;
59368: GO 59425
// result := [ ] ;
59370: LD_ADDR_VAR 0 2
59374: PUSH
59375: EMPTY
59376: ST_TO_ADDR
// for i := array downto 1 do
59377: LD_ADDR_VAR 0 3
59381: PUSH
59382: DOUBLE
59383: LD_VAR 0 1
59387: INC
59388: ST_TO_ADDR
59389: LD_INT 1
59391: PUSH
59392: FOR_DOWNTO
59393: IFFALSE 59423
// result := Join ( result , array [ i ] ) ;
59395: LD_ADDR_VAR 0 2
59399: PUSH
59400: LD_VAR 0 2
59404: PPUSH
59405: LD_VAR 0 1
59409: PUSH
59410: LD_VAR 0 3
59414: ARRAY
59415: PPUSH
59416: CALL 64070 0 2
59420: ST_TO_ADDR
59421: GO 59392
59423: POP
59424: POP
// end ;
59425: LD_VAR 0 2
59429: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59430: LD_INT 0
59432: PPUSH
59433: PPUSH
59434: PPUSH
59435: PPUSH
59436: PPUSH
59437: PPUSH
// if not unit or not hexes then
59438: LD_VAR 0 1
59442: NOT
59443: PUSH
59444: LD_VAR 0 2
59448: NOT
59449: OR
59450: IFFALSE 59454
// exit ;
59452: GO 59577
// dist := 9999 ;
59454: LD_ADDR_VAR 0 5
59458: PUSH
59459: LD_INT 9999
59461: ST_TO_ADDR
// for i = 1 to hexes do
59462: LD_ADDR_VAR 0 4
59466: PUSH
59467: DOUBLE
59468: LD_INT 1
59470: DEC
59471: ST_TO_ADDR
59472: LD_VAR 0 2
59476: PUSH
59477: FOR_TO
59478: IFFALSE 59565
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59480: LD_ADDR_VAR 0 6
59484: PUSH
59485: LD_VAR 0 1
59489: PPUSH
59490: LD_VAR 0 2
59494: PUSH
59495: LD_VAR 0 4
59499: ARRAY
59500: PUSH
59501: LD_INT 1
59503: ARRAY
59504: PPUSH
59505: LD_VAR 0 2
59509: PUSH
59510: LD_VAR 0 4
59514: ARRAY
59515: PUSH
59516: LD_INT 2
59518: ARRAY
59519: PPUSH
59520: CALL_OW 297
59524: ST_TO_ADDR
// if tdist < dist then
59525: LD_VAR 0 6
59529: PUSH
59530: LD_VAR 0 5
59534: LESS
59535: IFFALSE 59563
// begin hex := hexes [ i ] ;
59537: LD_ADDR_VAR 0 8
59541: PUSH
59542: LD_VAR 0 2
59546: PUSH
59547: LD_VAR 0 4
59551: ARRAY
59552: ST_TO_ADDR
// dist := tdist ;
59553: LD_ADDR_VAR 0 5
59557: PUSH
59558: LD_VAR 0 6
59562: ST_TO_ADDR
// end ; end ;
59563: GO 59477
59565: POP
59566: POP
// result := hex ;
59567: LD_ADDR_VAR 0 3
59571: PUSH
59572: LD_VAR 0 8
59576: ST_TO_ADDR
// end ;
59577: LD_VAR 0 3
59581: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59582: LD_INT 0
59584: PPUSH
59585: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59586: LD_VAR 0 1
59590: NOT
59591: PUSH
59592: LD_VAR 0 1
59596: PUSH
59597: LD_INT 21
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 23
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PPUSH
59621: CALL_OW 69
59625: IN
59626: NOT
59627: OR
59628: IFFALSE 59632
// exit ;
59630: GO 59679
// for i = 1 to 3 do
59632: LD_ADDR_VAR 0 3
59636: PUSH
59637: DOUBLE
59638: LD_INT 1
59640: DEC
59641: ST_TO_ADDR
59642: LD_INT 3
59644: PUSH
59645: FOR_TO
59646: IFFALSE 59677
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59648: LD_VAR 0 1
59652: PPUSH
59653: CALL_OW 250
59657: PPUSH
59658: LD_VAR 0 1
59662: PPUSH
59663: CALL_OW 251
59667: PPUSH
59668: LD_INT 1
59670: PPUSH
59671: CALL_OW 453
59675: GO 59645
59677: POP
59678: POP
// end ;
59679: LD_VAR 0 2
59683: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59684: LD_INT 0
59686: PPUSH
59687: PPUSH
59688: PPUSH
59689: PPUSH
59690: PPUSH
59691: PPUSH
// if not unit or not enemy_unit then
59692: LD_VAR 0 1
59696: NOT
59697: PUSH
59698: LD_VAR 0 2
59702: NOT
59703: OR
59704: IFFALSE 59708
// exit ;
59706: GO 60175
// if GetLives ( i ) < 250 then
59708: LD_VAR 0 4
59712: PPUSH
59713: CALL_OW 256
59717: PUSH
59718: LD_INT 250
59720: LESS
59721: IFFALSE 59734
// begin ComAutodestruct ( i ) ;
59723: LD_VAR 0 4
59727: PPUSH
59728: CALL 59582 0 1
// exit ;
59732: GO 60175
// end ; x := GetX ( enemy_unit ) ;
59734: LD_ADDR_VAR 0 7
59738: PUSH
59739: LD_VAR 0 2
59743: PPUSH
59744: CALL_OW 250
59748: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59749: LD_ADDR_VAR 0 8
59753: PUSH
59754: LD_VAR 0 2
59758: PPUSH
59759: CALL_OW 251
59763: ST_TO_ADDR
// if not x or not y then
59764: LD_VAR 0 7
59768: NOT
59769: PUSH
59770: LD_VAR 0 8
59774: NOT
59775: OR
59776: IFFALSE 59780
// exit ;
59778: GO 60175
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59780: LD_ADDR_VAR 0 6
59784: PUSH
59785: LD_VAR 0 7
59789: PPUSH
59790: LD_INT 0
59792: PPUSH
59793: LD_INT 4
59795: PPUSH
59796: CALL_OW 272
59800: PUSH
59801: LD_VAR 0 8
59805: PPUSH
59806: LD_INT 0
59808: PPUSH
59809: LD_INT 4
59811: PPUSH
59812: CALL_OW 273
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_VAR 0 7
59825: PPUSH
59826: LD_INT 1
59828: PPUSH
59829: LD_INT 4
59831: PPUSH
59832: CALL_OW 272
59836: PUSH
59837: LD_VAR 0 8
59841: PPUSH
59842: LD_INT 1
59844: PPUSH
59845: LD_INT 4
59847: PPUSH
59848: CALL_OW 273
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_VAR 0 7
59861: PPUSH
59862: LD_INT 2
59864: PPUSH
59865: LD_INT 4
59867: PPUSH
59868: CALL_OW 272
59872: PUSH
59873: LD_VAR 0 8
59877: PPUSH
59878: LD_INT 2
59880: PPUSH
59881: LD_INT 4
59883: PPUSH
59884: CALL_OW 273
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_VAR 0 7
59897: PPUSH
59898: LD_INT 3
59900: PPUSH
59901: LD_INT 4
59903: PPUSH
59904: CALL_OW 272
59908: PUSH
59909: LD_VAR 0 8
59913: PPUSH
59914: LD_INT 3
59916: PPUSH
59917: LD_INT 4
59919: PPUSH
59920: CALL_OW 273
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_VAR 0 7
59933: PPUSH
59934: LD_INT 4
59936: PPUSH
59937: LD_INT 4
59939: PPUSH
59940: CALL_OW 272
59944: PUSH
59945: LD_VAR 0 8
59949: PPUSH
59950: LD_INT 4
59952: PPUSH
59953: LD_INT 4
59955: PPUSH
59956: CALL_OW 273
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_VAR 0 7
59969: PPUSH
59970: LD_INT 5
59972: PPUSH
59973: LD_INT 4
59975: PPUSH
59976: CALL_OW 272
59980: PUSH
59981: LD_VAR 0 8
59985: PPUSH
59986: LD_INT 5
59988: PPUSH
59989: LD_INT 4
59991: PPUSH
59992: CALL_OW 273
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: ST_TO_ADDR
// for i = tmp downto 1 do
60009: LD_ADDR_VAR 0 4
60013: PUSH
60014: DOUBLE
60015: LD_VAR 0 6
60019: INC
60020: ST_TO_ADDR
60021: LD_INT 1
60023: PUSH
60024: FOR_DOWNTO
60025: IFFALSE 60126
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60027: LD_VAR 0 6
60031: PUSH
60032: LD_VAR 0 4
60036: ARRAY
60037: PUSH
60038: LD_INT 1
60040: ARRAY
60041: PPUSH
60042: LD_VAR 0 6
60046: PUSH
60047: LD_VAR 0 4
60051: ARRAY
60052: PUSH
60053: LD_INT 2
60055: ARRAY
60056: PPUSH
60057: CALL_OW 488
60061: NOT
60062: PUSH
60063: LD_VAR 0 6
60067: PUSH
60068: LD_VAR 0 4
60072: ARRAY
60073: PUSH
60074: LD_INT 1
60076: ARRAY
60077: PPUSH
60078: LD_VAR 0 6
60082: PUSH
60083: LD_VAR 0 4
60087: ARRAY
60088: PUSH
60089: LD_INT 2
60091: ARRAY
60092: PPUSH
60093: CALL_OW 428
60097: PUSH
60098: LD_INT 0
60100: NONEQUAL
60101: OR
60102: IFFALSE 60124
// tmp := Delete ( tmp , i ) ;
60104: LD_ADDR_VAR 0 6
60108: PUSH
60109: LD_VAR 0 6
60113: PPUSH
60114: LD_VAR 0 4
60118: PPUSH
60119: CALL_OW 3
60123: ST_TO_ADDR
60124: GO 60024
60126: POP
60127: POP
// j := GetClosestHex ( unit , tmp ) ;
60128: LD_ADDR_VAR 0 5
60132: PUSH
60133: LD_VAR 0 1
60137: PPUSH
60138: LD_VAR 0 6
60142: PPUSH
60143: CALL 59430 0 2
60147: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60148: LD_VAR 0 1
60152: PPUSH
60153: LD_VAR 0 5
60157: PUSH
60158: LD_INT 1
60160: ARRAY
60161: PPUSH
60162: LD_VAR 0 5
60166: PUSH
60167: LD_INT 2
60169: ARRAY
60170: PPUSH
60171: CALL_OW 111
// end ;
60175: LD_VAR 0 3
60179: RET
// export function PrepareApemanSoldier ( ) ; begin
60180: LD_INT 0
60182: PPUSH
// uc_nation := 0 ;
60183: LD_ADDR_OWVAR 21
60187: PUSH
60188: LD_INT 0
60190: ST_TO_ADDR
// hc_sex := sex_male ;
60191: LD_ADDR_OWVAR 27
60195: PUSH
60196: LD_INT 1
60198: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60199: LD_ADDR_OWVAR 28
60203: PUSH
60204: LD_INT 15
60206: ST_TO_ADDR
// hc_gallery :=  ;
60207: LD_ADDR_OWVAR 33
60211: PUSH
60212: LD_STRING 
60214: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60215: LD_ADDR_OWVAR 31
60219: PUSH
60220: LD_INT 0
60222: PPUSH
60223: LD_INT 3
60225: PPUSH
60226: CALL_OW 12
60230: PUSH
60231: LD_INT 0
60233: PPUSH
60234: LD_INT 3
60236: PPUSH
60237: CALL_OW 12
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: ST_TO_ADDR
// end ;
60254: LD_VAR 0 1
60258: RET
// export function PrepareApemanEngineer ( ) ; begin
60259: LD_INT 0
60261: PPUSH
// uc_nation := 0 ;
60262: LD_ADDR_OWVAR 21
60266: PUSH
60267: LD_INT 0
60269: ST_TO_ADDR
// hc_sex := sex_male ;
60270: LD_ADDR_OWVAR 27
60274: PUSH
60275: LD_INT 1
60277: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60278: LD_ADDR_OWVAR 28
60282: PUSH
60283: LD_INT 16
60285: ST_TO_ADDR
// hc_gallery :=  ;
60286: LD_ADDR_OWVAR 33
60290: PUSH
60291: LD_STRING 
60293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60294: LD_ADDR_OWVAR 31
60298: PUSH
60299: LD_INT 0
60301: PPUSH
60302: LD_INT 3
60304: PPUSH
60305: CALL_OW 12
60309: PUSH
60310: LD_INT 0
60312: PPUSH
60313: LD_INT 3
60315: PPUSH
60316: CALL_OW 12
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: ST_TO_ADDR
// end ;
60333: LD_VAR 0 1
60337: RET
// export function PrepareApeman ( agressivity ) ; begin
60338: LD_INT 0
60340: PPUSH
// uc_side := 0 ;
60341: LD_ADDR_OWVAR 20
60345: PUSH
60346: LD_INT 0
60348: ST_TO_ADDR
// uc_nation := 0 ;
60349: LD_ADDR_OWVAR 21
60353: PUSH
60354: LD_INT 0
60356: ST_TO_ADDR
// hc_sex := sex_male ;
60357: LD_ADDR_OWVAR 27
60361: PUSH
60362: LD_INT 1
60364: ST_TO_ADDR
// hc_class := class_apeman ;
60365: LD_ADDR_OWVAR 28
60369: PUSH
60370: LD_INT 12
60372: ST_TO_ADDR
// hc_gallery :=  ;
60373: LD_ADDR_OWVAR 33
60377: PUSH
60378: LD_STRING 
60380: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60381: LD_ADDR_OWVAR 35
60385: PUSH
60386: LD_VAR 0 1
60390: NEG
60391: PPUSH
60392: LD_VAR 0 1
60396: PPUSH
60397: CALL_OW 12
60401: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60402: LD_ADDR_OWVAR 31
60406: PUSH
60407: LD_INT 0
60409: PPUSH
60410: LD_INT 3
60412: PPUSH
60413: CALL_OW 12
60417: PUSH
60418: LD_INT 0
60420: PPUSH
60421: LD_INT 3
60423: PPUSH
60424: CALL_OW 12
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: ST_TO_ADDR
// end ;
60441: LD_VAR 0 2
60445: RET
// export function PrepareTiger ( agressivity ) ; begin
60446: LD_INT 0
60448: PPUSH
// uc_side := 0 ;
60449: LD_ADDR_OWVAR 20
60453: PUSH
60454: LD_INT 0
60456: ST_TO_ADDR
// uc_nation := 0 ;
60457: LD_ADDR_OWVAR 21
60461: PUSH
60462: LD_INT 0
60464: ST_TO_ADDR
// hc_class := class_tiger ;
60465: LD_ADDR_OWVAR 28
60469: PUSH
60470: LD_INT 14
60472: ST_TO_ADDR
// hc_gallery :=  ;
60473: LD_ADDR_OWVAR 33
60477: PUSH
60478: LD_STRING 
60480: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60481: LD_ADDR_OWVAR 35
60485: PUSH
60486: LD_VAR 0 1
60490: NEG
60491: PPUSH
60492: LD_VAR 0 1
60496: PPUSH
60497: CALL_OW 12
60501: ST_TO_ADDR
// end ;
60502: LD_VAR 0 2
60506: RET
// export function PrepareEnchidna ( ) ; begin
60507: LD_INT 0
60509: PPUSH
// uc_side := 0 ;
60510: LD_ADDR_OWVAR 20
60514: PUSH
60515: LD_INT 0
60517: ST_TO_ADDR
// uc_nation := 0 ;
60518: LD_ADDR_OWVAR 21
60522: PUSH
60523: LD_INT 0
60525: ST_TO_ADDR
// hc_class := class_baggie ;
60526: LD_ADDR_OWVAR 28
60530: PUSH
60531: LD_INT 13
60533: ST_TO_ADDR
// hc_gallery :=  ;
60534: LD_ADDR_OWVAR 33
60538: PUSH
60539: LD_STRING 
60541: ST_TO_ADDR
// end ;
60542: LD_VAR 0 1
60546: RET
// export function PrepareFrog ( ) ; begin
60547: LD_INT 0
60549: PPUSH
// uc_side := 0 ;
60550: LD_ADDR_OWVAR 20
60554: PUSH
60555: LD_INT 0
60557: ST_TO_ADDR
// uc_nation := 0 ;
60558: LD_ADDR_OWVAR 21
60562: PUSH
60563: LD_INT 0
60565: ST_TO_ADDR
// hc_class := class_frog ;
60566: LD_ADDR_OWVAR 28
60570: PUSH
60571: LD_INT 19
60573: ST_TO_ADDR
// hc_gallery :=  ;
60574: LD_ADDR_OWVAR 33
60578: PUSH
60579: LD_STRING 
60581: ST_TO_ADDR
// end ;
60582: LD_VAR 0 1
60586: RET
// export function PrepareFish ( ) ; begin
60587: LD_INT 0
60589: PPUSH
// uc_side := 0 ;
60590: LD_ADDR_OWVAR 20
60594: PUSH
60595: LD_INT 0
60597: ST_TO_ADDR
// uc_nation := 0 ;
60598: LD_ADDR_OWVAR 21
60602: PUSH
60603: LD_INT 0
60605: ST_TO_ADDR
// hc_class := class_fish ;
60606: LD_ADDR_OWVAR 28
60610: PUSH
60611: LD_INT 20
60613: ST_TO_ADDR
// hc_gallery :=  ;
60614: LD_ADDR_OWVAR 33
60618: PUSH
60619: LD_STRING 
60621: ST_TO_ADDR
// end ;
60622: LD_VAR 0 1
60626: RET
// export function PrepareBird ( ) ; begin
60627: LD_INT 0
60629: PPUSH
// uc_side := 0 ;
60630: LD_ADDR_OWVAR 20
60634: PUSH
60635: LD_INT 0
60637: ST_TO_ADDR
// uc_nation := 0 ;
60638: LD_ADDR_OWVAR 21
60642: PUSH
60643: LD_INT 0
60645: ST_TO_ADDR
// hc_class := class_phororhacos ;
60646: LD_ADDR_OWVAR 28
60650: PUSH
60651: LD_INT 18
60653: ST_TO_ADDR
// hc_gallery :=  ;
60654: LD_ADDR_OWVAR 33
60658: PUSH
60659: LD_STRING 
60661: ST_TO_ADDR
// end ;
60662: LD_VAR 0 1
60666: RET
// export function PrepareHorse ( ) ; begin
60667: LD_INT 0
60669: PPUSH
// uc_side := 0 ;
60670: LD_ADDR_OWVAR 20
60674: PUSH
60675: LD_INT 0
60677: ST_TO_ADDR
// uc_nation := 0 ;
60678: LD_ADDR_OWVAR 21
60682: PUSH
60683: LD_INT 0
60685: ST_TO_ADDR
// hc_class := class_horse ;
60686: LD_ADDR_OWVAR 28
60690: PUSH
60691: LD_INT 21
60693: ST_TO_ADDR
// hc_gallery :=  ;
60694: LD_ADDR_OWVAR 33
60698: PUSH
60699: LD_STRING 
60701: ST_TO_ADDR
// end ;
60702: LD_VAR 0 1
60706: RET
// export function PrepareMastodont ( ) ; begin
60707: LD_INT 0
60709: PPUSH
// uc_side := 0 ;
60710: LD_ADDR_OWVAR 20
60714: PUSH
60715: LD_INT 0
60717: ST_TO_ADDR
// uc_nation := 0 ;
60718: LD_ADDR_OWVAR 21
60722: PUSH
60723: LD_INT 0
60725: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60726: LD_ADDR_OWVAR 37
60730: PUSH
60731: LD_INT 31
60733: ST_TO_ADDR
// vc_control := control_rider ;
60734: LD_ADDR_OWVAR 38
60738: PUSH
60739: LD_INT 4
60741: ST_TO_ADDR
// end ;
60742: LD_VAR 0 1
60746: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60747: LD_INT 0
60749: PPUSH
60750: PPUSH
60751: PPUSH
// uc_side = 0 ;
60752: LD_ADDR_OWVAR 20
60756: PUSH
60757: LD_INT 0
60759: ST_TO_ADDR
// uc_nation = 0 ;
60760: LD_ADDR_OWVAR 21
60764: PUSH
60765: LD_INT 0
60767: ST_TO_ADDR
// InitHc_All ( ) ;
60768: CALL_OW 584
// InitVc ;
60772: CALL_OW 20
// if mastodonts then
60776: LD_VAR 0 6
60780: IFFALSE 60847
// for i = 1 to mastodonts do
60782: LD_ADDR_VAR 0 11
60786: PUSH
60787: DOUBLE
60788: LD_INT 1
60790: DEC
60791: ST_TO_ADDR
60792: LD_VAR 0 6
60796: PUSH
60797: FOR_TO
60798: IFFALSE 60845
// begin vc_chassis := 31 ;
60800: LD_ADDR_OWVAR 37
60804: PUSH
60805: LD_INT 31
60807: ST_TO_ADDR
// vc_control := control_rider ;
60808: LD_ADDR_OWVAR 38
60812: PUSH
60813: LD_INT 4
60815: ST_TO_ADDR
// animal := CreateVehicle ;
60816: LD_ADDR_VAR 0 12
60820: PUSH
60821: CALL_OW 45
60825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60826: LD_VAR 0 12
60830: PPUSH
60831: LD_VAR 0 8
60835: PPUSH
60836: LD_INT 0
60838: PPUSH
60839: CALL 62975 0 3
// end ;
60843: GO 60797
60845: POP
60846: POP
// if horses then
60847: LD_VAR 0 5
60851: IFFALSE 60918
// for i = 1 to horses do
60853: LD_ADDR_VAR 0 11
60857: PUSH
60858: DOUBLE
60859: LD_INT 1
60861: DEC
60862: ST_TO_ADDR
60863: LD_VAR 0 5
60867: PUSH
60868: FOR_TO
60869: IFFALSE 60916
// begin hc_class := 21 ;
60871: LD_ADDR_OWVAR 28
60875: PUSH
60876: LD_INT 21
60878: ST_TO_ADDR
// hc_gallery :=  ;
60879: LD_ADDR_OWVAR 33
60883: PUSH
60884: LD_STRING 
60886: ST_TO_ADDR
// animal := CreateHuman ;
60887: LD_ADDR_VAR 0 12
60891: PUSH
60892: CALL_OW 44
60896: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60897: LD_VAR 0 12
60901: PPUSH
60902: LD_VAR 0 8
60906: PPUSH
60907: LD_INT 0
60909: PPUSH
60910: CALL 62975 0 3
// end ;
60914: GO 60868
60916: POP
60917: POP
// if birds then
60918: LD_VAR 0 1
60922: IFFALSE 60989
// for i = 1 to birds do
60924: LD_ADDR_VAR 0 11
60928: PUSH
60929: DOUBLE
60930: LD_INT 1
60932: DEC
60933: ST_TO_ADDR
60934: LD_VAR 0 1
60938: PUSH
60939: FOR_TO
60940: IFFALSE 60987
// begin hc_class := 18 ;
60942: LD_ADDR_OWVAR 28
60946: PUSH
60947: LD_INT 18
60949: ST_TO_ADDR
// hc_gallery =  ;
60950: LD_ADDR_OWVAR 33
60954: PUSH
60955: LD_STRING 
60957: ST_TO_ADDR
// animal := CreateHuman ;
60958: LD_ADDR_VAR 0 12
60962: PUSH
60963: CALL_OW 44
60967: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60968: LD_VAR 0 12
60972: PPUSH
60973: LD_VAR 0 8
60977: PPUSH
60978: LD_INT 0
60980: PPUSH
60981: CALL 62975 0 3
// end ;
60985: GO 60939
60987: POP
60988: POP
// if tigers then
60989: LD_VAR 0 2
60993: IFFALSE 61077
// for i = 1 to tigers do
60995: LD_ADDR_VAR 0 11
60999: PUSH
61000: DOUBLE
61001: LD_INT 1
61003: DEC
61004: ST_TO_ADDR
61005: LD_VAR 0 2
61009: PUSH
61010: FOR_TO
61011: IFFALSE 61075
// begin hc_class = class_tiger ;
61013: LD_ADDR_OWVAR 28
61017: PUSH
61018: LD_INT 14
61020: ST_TO_ADDR
// hc_gallery =  ;
61021: LD_ADDR_OWVAR 33
61025: PUSH
61026: LD_STRING 
61028: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61029: LD_ADDR_OWVAR 35
61033: PUSH
61034: LD_INT 7
61036: NEG
61037: PPUSH
61038: LD_INT 7
61040: PPUSH
61041: CALL_OW 12
61045: ST_TO_ADDR
// animal := CreateHuman ;
61046: LD_ADDR_VAR 0 12
61050: PUSH
61051: CALL_OW 44
61055: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61056: LD_VAR 0 12
61060: PPUSH
61061: LD_VAR 0 8
61065: PPUSH
61066: LD_INT 0
61068: PPUSH
61069: CALL 62975 0 3
// end ;
61073: GO 61010
61075: POP
61076: POP
// if apemans then
61077: LD_VAR 0 3
61081: IFFALSE 61204
// for i = 1 to apemans do
61083: LD_ADDR_VAR 0 11
61087: PUSH
61088: DOUBLE
61089: LD_INT 1
61091: DEC
61092: ST_TO_ADDR
61093: LD_VAR 0 3
61097: PUSH
61098: FOR_TO
61099: IFFALSE 61202
// begin hc_class = class_apeman ;
61101: LD_ADDR_OWVAR 28
61105: PUSH
61106: LD_INT 12
61108: ST_TO_ADDR
// hc_gallery =  ;
61109: LD_ADDR_OWVAR 33
61113: PUSH
61114: LD_STRING 
61116: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61117: LD_ADDR_OWVAR 35
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PPUSH
61126: LD_INT 2
61128: PPUSH
61129: CALL_OW 12
61133: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61134: LD_ADDR_OWVAR 31
61138: PUSH
61139: LD_INT 1
61141: PPUSH
61142: LD_INT 3
61144: PPUSH
61145: CALL_OW 12
61149: PUSH
61150: LD_INT 1
61152: PPUSH
61153: LD_INT 3
61155: PPUSH
61156: CALL_OW 12
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: ST_TO_ADDR
// animal := CreateHuman ;
61173: LD_ADDR_VAR 0 12
61177: PUSH
61178: CALL_OW 44
61182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61183: LD_VAR 0 12
61187: PPUSH
61188: LD_VAR 0 8
61192: PPUSH
61193: LD_INT 0
61195: PPUSH
61196: CALL 62975 0 3
// end ;
61200: GO 61098
61202: POP
61203: POP
// if enchidnas then
61204: LD_VAR 0 4
61208: IFFALSE 61275
// for i = 1 to enchidnas do
61210: LD_ADDR_VAR 0 11
61214: PUSH
61215: DOUBLE
61216: LD_INT 1
61218: DEC
61219: ST_TO_ADDR
61220: LD_VAR 0 4
61224: PUSH
61225: FOR_TO
61226: IFFALSE 61273
// begin hc_class = 13 ;
61228: LD_ADDR_OWVAR 28
61232: PUSH
61233: LD_INT 13
61235: ST_TO_ADDR
// hc_gallery =  ;
61236: LD_ADDR_OWVAR 33
61240: PUSH
61241: LD_STRING 
61243: ST_TO_ADDR
// animal := CreateHuman ;
61244: LD_ADDR_VAR 0 12
61248: PUSH
61249: CALL_OW 44
61253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61254: LD_VAR 0 12
61258: PPUSH
61259: LD_VAR 0 8
61263: PPUSH
61264: LD_INT 0
61266: PPUSH
61267: CALL 62975 0 3
// end ;
61271: GO 61225
61273: POP
61274: POP
// if fishes then
61275: LD_VAR 0 7
61279: IFFALSE 61346
// for i = 1 to fishes do
61281: LD_ADDR_VAR 0 11
61285: PUSH
61286: DOUBLE
61287: LD_INT 1
61289: DEC
61290: ST_TO_ADDR
61291: LD_VAR 0 7
61295: PUSH
61296: FOR_TO
61297: IFFALSE 61344
// begin hc_class = 20 ;
61299: LD_ADDR_OWVAR 28
61303: PUSH
61304: LD_INT 20
61306: ST_TO_ADDR
// hc_gallery =  ;
61307: LD_ADDR_OWVAR 33
61311: PUSH
61312: LD_STRING 
61314: ST_TO_ADDR
// animal := CreateHuman ;
61315: LD_ADDR_VAR 0 12
61319: PUSH
61320: CALL_OW 44
61324: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61325: LD_VAR 0 12
61329: PPUSH
61330: LD_VAR 0 9
61334: PPUSH
61335: LD_INT 0
61337: PPUSH
61338: CALL 62975 0 3
// end ;
61342: GO 61296
61344: POP
61345: POP
// end ;
61346: LD_VAR 0 10
61350: RET
// export function WantHeal ( sci , unit ) ; begin
61351: LD_INT 0
61353: PPUSH
// if GetTaskList ( sci ) > 0 then
61354: LD_VAR 0 1
61358: PPUSH
61359: CALL_OW 437
61363: PUSH
61364: LD_INT 0
61366: GREATER
61367: IFFALSE 61437
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61369: LD_VAR 0 1
61373: PPUSH
61374: CALL_OW 437
61378: PUSH
61379: LD_INT 1
61381: ARRAY
61382: PUSH
61383: LD_INT 1
61385: ARRAY
61386: PUSH
61387: LD_STRING l
61389: EQUAL
61390: PUSH
61391: LD_VAR 0 1
61395: PPUSH
61396: CALL_OW 437
61400: PUSH
61401: LD_INT 1
61403: ARRAY
61404: PUSH
61405: LD_INT 4
61407: ARRAY
61408: PUSH
61409: LD_VAR 0 2
61413: EQUAL
61414: AND
61415: IFFALSE 61427
// result := true else
61417: LD_ADDR_VAR 0 3
61421: PUSH
61422: LD_INT 1
61424: ST_TO_ADDR
61425: GO 61435
// result := false ;
61427: LD_ADDR_VAR 0 3
61431: PUSH
61432: LD_INT 0
61434: ST_TO_ADDR
// end else
61435: GO 61445
// result := false ;
61437: LD_ADDR_VAR 0 3
61441: PUSH
61442: LD_INT 0
61444: ST_TO_ADDR
// end ;
61445: LD_VAR 0 3
61449: RET
// export function HealTarget ( sci ) ; begin
61450: LD_INT 0
61452: PPUSH
// if not sci then
61453: LD_VAR 0 1
61457: NOT
61458: IFFALSE 61462
// exit ;
61460: GO 61527
// result := 0 ;
61462: LD_ADDR_VAR 0 2
61466: PUSH
61467: LD_INT 0
61469: ST_TO_ADDR
// if GetTaskList ( sci ) then
61470: LD_VAR 0 1
61474: PPUSH
61475: CALL_OW 437
61479: IFFALSE 61527
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61481: LD_VAR 0 1
61485: PPUSH
61486: CALL_OW 437
61490: PUSH
61491: LD_INT 1
61493: ARRAY
61494: PUSH
61495: LD_INT 1
61497: ARRAY
61498: PUSH
61499: LD_STRING l
61501: EQUAL
61502: IFFALSE 61527
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61504: LD_ADDR_VAR 0 2
61508: PUSH
61509: LD_VAR 0 1
61513: PPUSH
61514: CALL_OW 437
61518: PUSH
61519: LD_INT 1
61521: ARRAY
61522: PUSH
61523: LD_INT 4
61525: ARRAY
61526: ST_TO_ADDR
// end ;
61527: LD_VAR 0 2
61531: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61532: LD_INT 0
61534: PPUSH
61535: PPUSH
61536: PPUSH
61537: PPUSH
// if not base_units then
61538: LD_VAR 0 1
61542: NOT
61543: IFFALSE 61547
// exit ;
61545: GO 61634
// result := false ;
61547: LD_ADDR_VAR 0 2
61551: PUSH
61552: LD_INT 0
61554: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61555: LD_ADDR_VAR 0 5
61559: PUSH
61560: LD_VAR 0 1
61564: PPUSH
61565: LD_INT 21
61567: PUSH
61568: LD_INT 3
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PPUSH
61575: CALL_OW 72
61579: ST_TO_ADDR
// if not tmp then
61580: LD_VAR 0 5
61584: NOT
61585: IFFALSE 61589
// exit ;
61587: GO 61634
// for i in tmp do
61589: LD_ADDR_VAR 0 3
61593: PUSH
61594: LD_VAR 0 5
61598: PUSH
61599: FOR_IN
61600: IFFALSE 61632
// begin result := EnemyInRange ( i , 22 ) ;
61602: LD_ADDR_VAR 0 2
61606: PUSH
61607: LD_VAR 0 3
61611: PPUSH
61612: LD_INT 22
61614: PPUSH
61615: CALL 59232 0 2
61619: ST_TO_ADDR
// if result then
61620: LD_VAR 0 2
61624: IFFALSE 61630
// exit ;
61626: POP
61627: POP
61628: GO 61634
// end ;
61630: GO 61599
61632: POP
61633: POP
// end ;
61634: LD_VAR 0 2
61638: RET
// export function FilterByTag ( units , tag ) ; begin
61639: LD_INT 0
61641: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61642: LD_ADDR_VAR 0 3
61646: PUSH
61647: LD_VAR 0 1
61651: PPUSH
61652: LD_INT 120
61654: PUSH
61655: LD_VAR 0 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PPUSH
61664: CALL_OW 72
61668: ST_TO_ADDR
// end ;
61669: LD_VAR 0 3
61673: RET
// export function IsDriver ( un ) ; begin
61674: LD_INT 0
61676: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61677: LD_ADDR_VAR 0 2
61681: PUSH
61682: LD_VAR 0 1
61686: PUSH
61687: LD_INT 55
61689: PUSH
61690: EMPTY
61691: LIST
61692: PPUSH
61693: CALL_OW 69
61697: IN
61698: ST_TO_ADDR
// end ;
61699: LD_VAR 0 2
61703: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61704: LD_INT 0
61706: PPUSH
61707: PPUSH
// list := [ ] ;
61708: LD_ADDR_VAR 0 5
61712: PUSH
61713: EMPTY
61714: ST_TO_ADDR
// case d of 0 :
61715: LD_VAR 0 3
61719: PUSH
61720: LD_INT 0
61722: DOUBLE
61723: EQUAL
61724: IFTRUE 61728
61726: GO 61861
61728: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61729: LD_ADDR_VAR 0 5
61733: PUSH
61734: LD_VAR 0 1
61738: PUSH
61739: LD_INT 4
61741: MINUS
61742: PUSH
61743: LD_VAR 0 2
61747: PUSH
61748: LD_INT 4
61750: MINUS
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: PUSH
61760: LD_VAR 0 1
61764: PUSH
61765: LD_INT 3
61767: MINUS
61768: PUSH
61769: LD_VAR 0 2
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: LIST
61781: PUSH
61782: LD_VAR 0 1
61786: PUSH
61787: LD_INT 4
61789: PLUS
61790: PUSH
61791: LD_VAR 0 2
61795: PUSH
61796: LD_INT 4
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: LIST
61803: PUSH
61804: LD_VAR 0 1
61808: PUSH
61809: LD_INT 3
61811: PLUS
61812: PUSH
61813: LD_VAR 0 2
61817: PUSH
61818: LD_INT 3
61820: PLUS
61821: PUSH
61822: LD_INT 5
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: LIST
61829: PUSH
61830: LD_VAR 0 1
61834: PUSH
61835: LD_VAR 0 2
61839: PUSH
61840: LD_INT 4
61842: PLUS
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: LIST
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: ST_TO_ADDR
// end ; 1 :
61859: GO 62559
61861: LD_INT 1
61863: DOUBLE
61864: EQUAL
61865: IFTRUE 61869
61867: GO 62002
61869: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61870: LD_ADDR_VAR 0 5
61874: PUSH
61875: LD_VAR 0 1
61879: PUSH
61880: LD_VAR 0 2
61884: PUSH
61885: LD_INT 4
61887: MINUS
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: LIST
61896: PUSH
61897: LD_VAR 0 1
61901: PUSH
61902: LD_INT 3
61904: MINUS
61905: PUSH
61906: LD_VAR 0 2
61910: PUSH
61911: LD_INT 3
61913: MINUS
61914: PUSH
61915: LD_INT 2
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: PUSH
61923: LD_VAR 0 1
61927: PUSH
61928: LD_INT 4
61930: MINUS
61931: PUSH
61932: LD_VAR 0 2
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: PUSH
61945: LD_VAR 0 1
61949: PUSH
61950: LD_VAR 0 2
61954: PUSH
61955: LD_INT 3
61957: PLUS
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: LIST
61966: PUSH
61967: LD_VAR 0 1
61971: PUSH
61972: LD_INT 4
61974: PLUS
61975: PUSH
61976: LD_VAR 0 2
61980: PUSH
61981: LD_INT 4
61983: PLUS
61984: PUSH
61985: LD_INT 5
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: ST_TO_ADDR
// end ; 2 :
62000: GO 62559
62002: LD_INT 2
62004: DOUBLE
62005: EQUAL
62006: IFTRUE 62010
62008: GO 62139
62010: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62011: LD_ADDR_VAR 0 5
62015: PUSH
62016: LD_VAR 0 1
62020: PUSH
62021: LD_VAR 0 2
62025: PUSH
62026: LD_INT 3
62028: MINUS
62029: PUSH
62030: LD_INT 3
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: PUSH
62038: LD_VAR 0 1
62042: PUSH
62043: LD_INT 4
62045: PLUS
62046: PUSH
62047: LD_VAR 0 2
62051: PUSH
62052: LD_INT 4
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: LIST
62059: PUSH
62060: LD_VAR 0 1
62064: PUSH
62065: LD_VAR 0 2
62069: PUSH
62070: LD_INT 4
62072: PLUS
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: PUSH
62082: LD_VAR 0 1
62086: PUSH
62087: LD_INT 3
62089: MINUS
62090: PUSH
62091: LD_VAR 0 2
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: PUSH
62104: LD_VAR 0 1
62108: PUSH
62109: LD_INT 4
62111: MINUS
62112: PUSH
62113: LD_VAR 0 2
62117: PUSH
62118: LD_INT 4
62120: MINUS
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: ST_TO_ADDR
// end ; 3 :
62137: GO 62559
62139: LD_INT 3
62141: DOUBLE
62142: EQUAL
62143: IFTRUE 62147
62145: GO 62280
62147: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62148: LD_ADDR_VAR 0 5
62152: PUSH
62153: LD_VAR 0 1
62157: PUSH
62158: LD_INT 3
62160: PLUS
62161: PUSH
62162: LD_VAR 0 2
62166: PUSH
62167: LD_INT 4
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: PUSH
62175: LD_VAR 0 1
62179: PUSH
62180: LD_INT 4
62182: PLUS
62183: PUSH
62184: LD_VAR 0 2
62188: PUSH
62189: LD_INT 4
62191: PLUS
62192: PUSH
62193: LD_INT 5
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: LD_INT 4
62208: MINUS
62209: PUSH
62210: LD_VAR 0 2
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: PUSH
62223: LD_VAR 0 1
62227: PUSH
62228: LD_VAR 0 2
62232: PUSH
62233: LD_INT 4
62235: MINUS
62236: PUSH
62237: LD_INT 3
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: PUSH
62245: LD_VAR 0 1
62249: PUSH
62250: LD_INT 3
62252: MINUS
62253: PUSH
62254: LD_VAR 0 2
62258: PUSH
62259: LD_INT 3
62261: MINUS
62262: PUSH
62263: LD_INT 2
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: ST_TO_ADDR
// end ; 4 :
62278: GO 62559
62280: LD_INT 4
62282: DOUBLE
62283: EQUAL
62284: IFTRUE 62288
62286: GO 62421
62288: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62289: LD_ADDR_VAR 0 5
62293: PUSH
62294: LD_VAR 0 1
62298: PUSH
62299: LD_VAR 0 2
62303: PUSH
62304: LD_INT 4
62306: PLUS
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: PUSH
62316: LD_VAR 0 1
62320: PUSH
62321: LD_INT 3
62323: PLUS
62324: PUSH
62325: LD_VAR 0 2
62329: PUSH
62330: LD_INT 3
62332: PLUS
62333: PUSH
62334: LD_INT 5
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: LIST
62341: PUSH
62342: LD_VAR 0 1
62346: PUSH
62347: LD_INT 4
62349: PLUS
62350: PUSH
62351: LD_VAR 0 2
62355: PUSH
62356: LD_INT 4
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: LIST
62363: PUSH
62364: LD_VAR 0 1
62368: PUSH
62369: LD_VAR 0 2
62373: PUSH
62374: LD_INT 3
62376: MINUS
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: LD_VAR 0 1
62390: PUSH
62391: LD_INT 4
62393: MINUS
62394: PUSH
62395: LD_VAR 0 2
62399: PUSH
62400: LD_INT 4
62402: MINUS
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: ST_TO_ADDR
// end ; 5 :
62419: GO 62559
62421: LD_INT 5
62423: DOUBLE
62424: EQUAL
62425: IFTRUE 62429
62427: GO 62558
62429: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62430: LD_ADDR_VAR 0 5
62434: PUSH
62435: LD_VAR 0 1
62439: PUSH
62440: LD_INT 4
62442: MINUS
62443: PUSH
62444: LD_VAR 0 2
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: PUSH
62457: LD_VAR 0 1
62461: PUSH
62462: LD_VAR 0 2
62466: PUSH
62467: LD_INT 4
62469: MINUS
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: PUSH
62479: LD_VAR 0 1
62483: PUSH
62484: LD_INT 4
62486: PLUS
62487: PUSH
62488: LD_VAR 0 2
62492: PUSH
62493: LD_INT 4
62495: PLUS
62496: PUSH
62497: LD_INT 5
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: PUSH
62505: LD_VAR 0 1
62509: PUSH
62510: LD_INT 3
62512: PLUS
62513: PUSH
62514: LD_VAR 0 2
62518: PUSH
62519: LD_INT 4
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: PUSH
62527: LD_VAR 0 1
62531: PUSH
62532: LD_VAR 0 2
62536: PUSH
62537: LD_INT 3
62539: PLUS
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: ST_TO_ADDR
// end ; end ;
62556: GO 62559
62558: POP
// result := list ;
62559: LD_ADDR_VAR 0 4
62563: PUSH
62564: LD_VAR 0 5
62568: ST_TO_ADDR
// end ;
62569: LD_VAR 0 4
62573: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62574: LD_INT 0
62576: PPUSH
62577: PPUSH
62578: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62579: LD_VAR 0 1
62583: NOT
62584: PUSH
62585: LD_VAR 0 2
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: LD_INT 4
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: IN
62608: NOT
62609: OR
62610: IFFALSE 62614
// exit ;
62612: GO 62697
// tmp := [ ] ;
62614: LD_ADDR_VAR 0 5
62618: PUSH
62619: EMPTY
62620: ST_TO_ADDR
// for i in units do
62621: LD_ADDR_VAR 0 4
62625: PUSH
62626: LD_VAR 0 1
62630: PUSH
62631: FOR_IN
62632: IFFALSE 62666
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62634: LD_ADDR_VAR 0 5
62638: PUSH
62639: LD_VAR 0 5
62643: PPUSH
62644: LD_VAR 0 4
62648: PPUSH
62649: LD_VAR 0 2
62653: PPUSH
62654: CALL_OW 259
62658: PPUSH
62659: CALL 64070 0 2
62663: ST_TO_ADDR
62664: GO 62631
62666: POP
62667: POP
// if not tmp then
62668: LD_VAR 0 5
62672: NOT
62673: IFFALSE 62677
// exit ;
62675: GO 62697
// result := SortListByListDesc ( units , tmp ) ;
62677: LD_ADDR_VAR 0 3
62681: PUSH
62682: LD_VAR 0 1
62686: PPUSH
62687: LD_VAR 0 5
62691: PPUSH
62692: CALL_OW 77
62696: ST_TO_ADDR
// end ;
62697: LD_VAR 0 3
62701: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62702: LD_INT 0
62704: PPUSH
62705: PPUSH
62706: PPUSH
// result := false ;
62707: LD_ADDR_VAR 0 3
62711: PUSH
62712: LD_INT 0
62714: ST_TO_ADDR
// if not building then
62715: LD_VAR 0 2
62719: NOT
62720: IFFALSE 62724
// exit ;
62722: GO 62862
// x := GetX ( building ) ;
62724: LD_ADDR_VAR 0 4
62728: PUSH
62729: LD_VAR 0 2
62733: PPUSH
62734: CALL_OW 250
62738: ST_TO_ADDR
// y := GetY ( building ) ;
62739: LD_ADDR_VAR 0 5
62743: PUSH
62744: LD_VAR 0 2
62748: PPUSH
62749: CALL_OW 251
62753: ST_TO_ADDR
// if not x or not y then
62754: LD_VAR 0 4
62758: NOT
62759: PUSH
62760: LD_VAR 0 5
62764: NOT
62765: OR
62766: IFFALSE 62770
// exit ;
62768: GO 62862
// if GetTaskList ( unit ) then
62770: LD_VAR 0 1
62774: PPUSH
62775: CALL_OW 437
62779: IFFALSE 62862
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62781: LD_STRING e
62783: PUSH
62784: LD_VAR 0 1
62788: PPUSH
62789: CALL_OW 437
62793: PUSH
62794: LD_INT 1
62796: ARRAY
62797: PUSH
62798: LD_INT 1
62800: ARRAY
62801: EQUAL
62802: PUSH
62803: LD_VAR 0 4
62807: PUSH
62808: LD_VAR 0 1
62812: PPUSH
62813: CALL_OW 437
62817: PUSH
62818: LD_INT 1
62820: ARRAY
62821: PUSH
62822: LD_INT 2
62824: ARRAY
62825: EQUAL
62826: AND
62827: PUSH
62828: LD_VAR 0 5
62832: PUSH
62833: LD_VAR 0 1
62837: PPUSH
62838: CALL_OW 437
62842: PUSH
62843: LD_INT 1
62845: ARRAY
62846: PUSH
62847: LD_INT 3
62849: ARRAY
62850: EQUAL
62851: AND
62852: IFFALSE 62862
// result := true end ;
62854: LD_ADDR_VAR 0 3
62858: PUSH
62859: LD_INT 1
62861: ST_TO_ADDR
// end ;
62862: LD_VAR 0 3
62866: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62867: LD_INT 0
62869: PPUSH
// result := false ;
62870: LD_ADDR_VAR 0 4
62874: PUSH
62875: LD_INT 0
62877: ST_TO_ADDR
// if GetTaskList ( unit ) then
62878: LD_VAR 0 1
62882: PPUSH
62883: CALL_OW 437
62887: IFFALSE 62970
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62889: LD_STRING M
62891: PUSH
62892: LD_VAR 0 1
62896: PPUSH
62897: CALL_OW 437
62901: PUSH
62902: LD_INT 1
62904: ARRAY
62905: PUSH
62906: LD_INT 1
62908: ARRAY
62909: EQUAL
62910: PUSH
62911: LD_VAR 0 2
62915: PUSH
62916: LD_VAR 0 1
62920: PPUSH
62921: CALL_OW 437
62925: PUSH
62926: LD_INT 1
62928: ARRAY
62929: PUSH
62930: LD_INT 2
62932: ARRAY
62933: EQUAL
62934: AND
62935: PUSH
62936: LD_VAR 0 3
62940: PUSH
62941: LD_VAR 0 1
62945: PPUSH
62946: CALL_OW 437
62950: PUSH
62951: LD_INT 1
62953: ARRAY
62954: PUSH
62955: LD_INT 3
62957: ARRAY
62958: EQUAL
62959: AND
62960: IFFALSE 62970
// result := true ;
62962: LD_ADDR_VAR 0 4
62966: PUSH
62967: LD_INT 1
62969: ST_TO_ADDR
// end ; end ;
62970: LD_VAR 0 4
62974: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62975: LD_INT 0
62977: PPUSH
62978: PPUSH
62979: PPUSH
62980: PPUSH
// if not unit or not area then
62981: LD_VAR 0 1
62985: NOT
62986: PUSH
62987: LD_VAR 0 2
62991: NOT
62992: OR
62993: IFFALSE 62997
// exit ;
62995: GO 63173
// tmp := AreaToList ( area , i ) ;
62997: LD_ADDR_VAR 0 6
63001: PUSH
63002: LD_VAR 0 2
63006: PPUSH
63007: LD_VAR 0 5
63011: PPUSH
63012: CALL_OW 517
63016: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63017: LD_ADDR_VAR 0 5
63021: PUSH
63022: DOUBLE
63023: LD_INT 1
63025: DEC
63026: ST_TO_ADDR
63027: LD_VAR 0 6
63031: PUSH
63032: LD_INT 1
63034: ARRAY
63035: PUSH
63036: FOR_TO
63037: IFFALSE 63171
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63039: LD_ADDR_VAR 0 7
63043: PUSH
63044: LD_VAR 0 6
63048: PUSH
63049: LD_INT 1
63051: ARRAY
63052: PUSH
63053: LD_VAR 0 5
63057: ARRAY
63058: PUSH
63059: LD_VAR 0 6
63063: PUSH
63064: LD_INT 2
63066: ARRAY
63067: PUSH
63068: LD_VAR 0 5
63072: ARRAY
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63078: LD_INT 92
63080: PUSH
63081: LD_VAR 0 7
63085: PUSH
63086: LD_INT 1
63088: ARRAY
63089: PUSH
63090: LD_VAR 0 7
63094: PUSH
63095: LD_INT 2
63097: ARRAY
63098: PUSH
63099: LD_INT 2
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: PPUSH
63108: CALL_OW 69
63112: PUSH
63113: LD_INT 0
63115: EQUAL
63116: IFFALSE 63169
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63118: LD_VAR 0 1
63122: PPUSH
63123: LD_VAR 0 7
63127: PUSH
63128: LD_INT 1
63130: ARRAY
63131: PPUSH
63132: LD_VAR 0 7
63136: PUSH
63137: LD_INT 2
63139: ARRAY
63140: PPUSH
63141: LD_VAR 0 3
63145: PPUSH
63146: CALL_OW 48
// result := IsPlaced ( unit ) ;
63150: LD_ADDR_VAR 0 4
63154: PUSH
63155: LD_VAR 0 1
63159: PPUSH
63160: CALL_OW 305
63164: ST_TO_ADDR
// exit ;
63165: POP
63166: POP
63167: GO 63173
// end ; end ;
63169: GO 63036
63171: POP
63172: POP
// end ;
63173: LD_VAR 0 4
63177: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63178: LD_INT 0
63180: PPUSH
63181: PPUSH
63182: PPUSH
// if not side or side > 8 then
63183: LD_VAR 0 1
63187: NOT
63188: PUSH
63189: LD_VAR 0 1
63193: PUSH
63194: LD_INT 8
63196: GREATER
63197: OR
63198: IFFALSE 63202
// exit ;
63200: GO 63389
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63202: LD_ADDR_VAR 0 4
63206: PUSH
63207: LD_INT 22
63209: PUSH
63210: LD_VAR 0 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 21
63221: PUSH
63222: LD_INT 3
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PPUSH
63233: CALL_OW 69
63237: ST_TO_ADDR
// if not tmp then
63238: LD_VAR 0 4
63242: NOT
63243: IFFALSE 63247
// exit ;
63245: GO 63389
// enable_addtolog := true ;
63247: LD_ADDR_OWVAR 81
63251: PUSH
63252: LD_INT 1
63254: ST_TO_ADDR
// AddToLog ( [ ) ;
63255: LD_STRING [
63257: PPUSH
63258: CALL_OW 561
// for i in tmp do
63262: LD_ADDR_VAR 0 3
63266: PUSH
63267: LD_VAR 0 4
63271: PUSH
63272: FOR_IN
63273: IFFALSE 63380
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63275: LD_STRING [
63277: PUSH
63278: LD_VAR 0 3
63282: PPUSH
63283: CALL_OW 266
63287: STR
63288: PUSH
63289: LD_STRING , 
63291: STR
63292: PUSH
63293: LD_VAR 0 3
63297: PPUSH
63298: CALL_OW 250
63302: STR
63303: PUSH
63304: LD_STRING , 
63306: STR
63307: PUSH
63308: LD_VAR 0 3
63312: PPUSH
63313: CALL_OW 251
63317: STR
63318: PUSH
63319: LD_STRING , 
63321: STR
63322: PUSH
63323: LD_VAR 0 3
63327: PPUSH
63328: CALL_OW 254
63332: STR
63333: PUSH
63334: LD_STRING , 
63336: STR
63337: PUSH
63338: LD_VAR 0 3
63342: PPUSH
63343: LD_INT 1
63345: PPUSH
63346: CALL_OW 268
63350: STR
63351: PUSH
63352: LD_STRING , 
63354: STR
63355: PUSH
63356: LD_VAR 0 3
63360: PPUSH
63361: LD_INT 2
63363: PPUSH
63364: CALL_OW 268
63368: STR
63369: PUSH
63370: LD_STRING ],
63372: STR
63373: PPUSH
63374: CALL_OW 561
// end ;
63378: GO 63272
63380: POP
63381: POP
// AddToLog ( ]; ) ;
63382: LD_STRING ];
63384: PPUSH
63385: CALL_OW 561
// end ;
63389: LD_VAR 0 2
63393: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63394: LD_INT 0
63396: PPUSH
63397: PPUSH
63398: PPUSH
63399: PPUSH
63400: PPUSH
// if not area or not rate or not max then
63401: LD_VAR 0 1
63405: NOT
63406: PUSH
63407: LD_VAR 0 2
63411: NOT
63412: OR
63413: PUSH
63414: LD_VAR 0 4
63418: NOT
63419: OR
63420: IFFALSE 63424
// exit ;
63422: GO 63613
// while 1 do
63424: LD_INT 1
63426: IFFALSE 63613
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63428: LD_ADDR_VAR 0 9
63432: PUSH
63433: LD_VAR 0 1
63437: PPUSH
63438: LD_INT 1
63440: PPUSH
63441: CALL_OW 287
63445: PUSH
63446: LD_INT 10
63448: MUL
63449: ST_TO_ADDR
// r := rate / 10 ;
63450: LD_ADDR_VAR 0 7
63454: PUSH
63455: LD_VAR 0 2
63459: PUSH
63460: LD_INT 10
63462: DIVREAL
63463: ST_TO_ADDR
// time := 1 1$00 ;
63464: LD_ADDR_VAR 0 8
63468: PUSH
63469: LD_INT 2100
63471: ST_TO_ADDR
// if amount < min then
63472: LD_VAR 0 9
63476: PUSH
63477: LD_VAR 0 3
63481: LESS
63482: IFFALSE 63500
// r := r * 2 else
63484: LD_ADDR_VAR 0 7
63488: PUSH
63489: LD_VAR 0 7
63493: PUSH
63494: LD_INT 2
63496: MUL
63497: ST_TO_ADDR
63498: GO 63526
// if amount > max then
63500: LD_VAR 0 9
63504: PUSH
63505: LD_VAR 0 4
63509: GREATER
63510: IFFALSE 63526
// r := r / 2 ;
63512: LD_ADDR_VAR 0 7
63516: PUSH
63517: LD_VAR 0 7
63521: PUSH
63522: LD_INT 2
63524: DIVREAL
63525: ST_TO_ADDR
// time := time / r ;
63526: LD_ADDR_VAR 0 8
63530: PUSH
63531: LD_VAR 0 8
63535: PUSH
63536: LD_VAR 0 7
63540: DIVREAL
63541: ST_TO_ADDR
// if time < 0 then
63542: LD_VAR 0 8
63546: PUSH
63547: LD_INT 0
63549: LESS
63550: IFFALSE 63567
// time := time * - 1 ;
63552: LD_ADDR_VAR 0 8
63556: PUSH
63557: LD_VAR 0 8
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: MUL
63566: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63567: LD_VAR 0 8
63571: PUSH
63572: LD_INT 35
63574: PPUSH
63575: LD_INT 875
63577: PPUSH
63578: CALL_OW 12
63582: PLUS
63583: PPUSH
63584: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63588: LD_INT 1
63590: PPUSH
63591: LD_INT 5
63593: PPUSH
63594: CALL_OW 12
63598: PPUSH
63599: LD_VAR 0 1
63603: PPUSH
63604: LD_INT 1
63606: PPUSH
63607: CALL_OW 55
// end ;
63611: GO 63424
// end ;
63613: LD_VAR 0 5
63617: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63618: LD_INT 0
63620: PPUSH
63621: PPUSH
63622: PPUSH
63623: PPUSH
63624: PPUSH
63625: PPUSH
63626: PPUSH
63627: PPUSH
// if not turrets or not factories then
63628: LD_VAR 0 1
63632: NOT
63633: PUSH
63634: LD_VAR 0 2
63638: NOT
63639: OR
63640: IFFALSE 63644
// exit ;
63642: GO 63951
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63644: LD_ADDR_VAR 0 10
63648: PUSH
63649: LD_INT 5
63651: PUSH
63652: LD_INT 6
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: LD_INT 4
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: LD_INT 5
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 24
63686: PUSH
63687: LD_INT 25
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 23
63696: PUSH
63697: LD_INT 27
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 42
63710: PUSH
63711: LD_INT 43
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 44
63720: PUSH
63721: LD_INT 46
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 45
63730: PUSH
63731: LD_INT 47
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: ST_TO_ADDR
// result := [ ] ;
63748: LD_ADDR_VAR 0 3
63752: PUSH
63753: EMPTY
63754: ST_TO_ADDR
// for i in turrets do
63755: LD_ADDR_VAR 0 4
63759: PUSH
63760: LD_VAR 0 1
63764: PUSH
63765: FOR_IN
63766: IFFALSE 63949
// begin nat := GetNation ( i ) ;
63768: LD_ADDR_VAR 0 7
63772: PUSH
63773: LD_VAR 0 4
63777: PPUSH
63778: CALL_OW 248
63782: ST_TO_ADDR
// weapon := 0 ;
63783: LD_ADDR_VAR 0 8
63787: PUSH
63788: LD_INT 0
63790: ST_TO_ADDR
// if not nat then
63791: LD_VAR 0 7
63795: NOT
63796: IFFALSE 63800
// continue ;
63798: GO 63765
// for j in list [ nat ] do
63800: LD_ADDR_VAR 0 5
63804: PUSH
63805: LD_VAR 0 10
63809: PUSH
63810: LD_VAR 0 7
63814: ARRAY
63815: PUSH
63816: FOR_IN
63817: IFFALSE 63858
// if GetBWeapon ( i ) = j [ 1 ] then
63819: LD_VAR 0 4
63823: PPUSH
63824: CALL_OW 269
63828: PUSH
63829: LD_VAR 0 5
63833: PUSH
63834: LD_INT 1
63836: ARRAY
63837: EQUAL
63838: IFFALSE 63856
// begin weapon := j [ 2 ] ;
63840: LD_ADDR_VAR 0 8
63844: PUSH
63845: LD_VAR 0 5
63849: PUSH
63850: LD_INT 2
63852: ARRAY
63853: ST_TO_ADDR
// break ;
63854: GO 63858
// end ;
63856: GO 63816
63858: POP
63859: POP
// if not weapon then
63860: LD_VAR 0 8
63864: NOT
63865: IFFALSE 63869
// continue ;
63867: GO 63765
// for k in factories do
63869: LD_ADDR_VAR 0 6
63873: PUSH
63874: LD_VAR 0 2
63878: PUSH
63879: FOR_IN
63880: IFFALSE 63945
// begin weapons := AvailableWeaponList ( k ) ;
63882: LD_ADDR_VAR 0 9
63886: PUSH
63887: LD_VAR 0 6
63891: PPUSH
63892: CALL_OW 478
63896: ST_TO_ADDR
// if not weapons then
63897: LD_VAR 0 9
63901: NOT
63902: IFFALSE 63906
// continue ;
63904: GO 63879
// if weapon in weapons then
63906: LD_VAR 0 8
63910: PUSH
63911: LD_VAR 0 9
63915: IN
63916: IFFALSE 63943
// begin result := [ i , weapon ] ;
63918: LD_ADDR_VAR 0 3
63922: PUSH
63923: LD_VAR 0 4
63927: PUSH
63928: LD_VAR 0 8
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: ST_TO_ADDR
// exit ;
63937: POP
63938: POP
63939: POP
63940: POP
63941: GO 63951
// end ; end ;
63943: GO 63879
63945: POP
63946: POP
// end ;
63947: GO 63765
63949: POP
63950: POP
// end ;
63951: LD_VAR 0 3
63955: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63956: LD_INT 0
63958: PPUSH
// if not side or side > 8 then
63959: LD_VAR 0 3
63963: NOT
63964: PUSH
63965: LD_VAR 0 3
63969: PUSH
63970: LD_INT 8
63972: GREATER
63973: OR
63974: IFFALSE 63978
// exit ;
63976: GO 64037
// if not range then
63978: LD_VAR 0 4
63982: NOT
63983: IFFALSE 63994
// range := - 12 ;
63985: LD_ADDR_VAR 0 4
63989: PUSH
63990: LD_INT 12
63992: NEG
63993: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63994: LD_VAR 0 1
63998: PPUSH
63999: LD_VAR 0 2
64003: PPUSH
64004: LD_VAR 0 3
64008: PPUSH
64009: LD_VAR 0 4
64013: PPUSH
64014: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64018: LD_VAR 0 1
64022: PPUSH
64023: LD_VAR 0 2
64027: PPUSH
64028: LD_VAR 0 3
64032: PPUSH
64033: CALL_OW 331
// end ;
64037: LD_VAR 0 5
64041: RET
// export function Video ( mode ) ; begin
64042: LD_INT 0
64044: PPUSH
// ingame_video = mode ;
64045: LD_ADDR_OWVAR 52
64049: PUSH
64050: LD_VAR 0 1
64054: ST_TO_ADDR
// interface_hidden = mode ;
64055: LD_ADDR_OWVAR 54
64059: PUSH
64060: LD_VAR 0 1
64064: ST_TO_ADDR
// end ;
64065: LD_VAR 0 2
64069: RET
// export function Join ( array , element ) ; begin
64070: LD_INT 0
64072: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64073: LD_ADDR_VAR 0 3
64077: PUSH
64078: LD_VAR 0 1
64082: PPUSH
64083: LD_VAR 0 1
64087: PUSH
64088: LD_INT 1
64090: PLUS
64091: PPUSH
64092: LD_VAR 0 2
64096: PPUSH
64097: CALL_OW 1
64101: ST_TO_ADDR
// end ;
64102: LD_VAR 0 3
64106: RET
// export function JoinUnion ( array , element ) ; begin
64107: LD_INT 0
64109: PPUSH
// result := array union element ;
64110: LD_ADDR_VAR 0 3
64114: PUSH
64115: LD_VAR 0 1
64119: PUSH
64120: LD_VAR 0 2
64124: UNION
64125: ST_TO_ADDR
// end ;
64126: LD_VAR 0 3
64130: RET
// export function GetBehemoths ( side ) ; begin
64131: LD_INT 0
64133: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64134: LD_ADDR_VAR 0 2
64138: PUSH
64139: LD_INT 22
64141: PUSH
64142: LD_VAR 0 1
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 31
64153: PUSH
64154: LD_INT 25
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PPUSH
64165: CALL_OW 69
64169: ST_TO_ADDR
// end ;
64170: LD_VAR 0 2
64174: RET
// export function Shuffle ( array ) ; var i , index ; begin
64175: LD_INT 0
64177: PPUSH
64178: PPUSH
64179: PPUSH
// result := [ ] ;
64180: LD_ADDR_VAR 0 2
64184: PUSH
64185: EMPTY
64186: ST_TO_ADDR
// if not array then
64187: LD_VAR 0 1
64191: NOT
64192: IFFALSE 64196
// exit ;
64194: GO 64295
// Randomize ;
64196: CALL_OW 10
// for i = array downto 1 do
64200: LD_ADDR_VAR 0 3
64204: PUSH
64205: DOUBLE
64206: LD_VAR 0 1
64210: INC
64211: ST_TO_ADDR
64212: LD_INT 1
64214: PUSH
64215: FOR_DOWNTO
64216: IFFALSE 64293
// begin index := rand ( 1 , array ) ;
64218: LD_ADDR_VAR 0 4
64222: PUSH
64223: LD_INT 1
64225: PPUSH
64226: LD_VAR 0 1
64230: PPUSH
64231: CALL_OW 12
64235: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64236: LD_ADDR_VAR 0 2
64240: PUSH
64241: LD_VAR 0 2
64245: PPUSH
64246: LD_VAR 0 2
64250: PUSH
64251: LD_INT 1
64253: PLUS
64254: PPUSH
64255: LD_VAR 0 1
64259: PUSH
64260: LD_VAR 0 4
64264: ARRAY
64265: PPUSH
64266: CALL_OW 2
64270: ST_TO_ADDR
// array := Delete ( array , index ) ;
64271: LD_ADDR_VAR 0 1
64275: PUSH
64276: LD_VAR 0 1
64280: PPUSH
64281: LD_VAR 0 4
64285: PPUSH
64286: CALL_OW 3
64290: ST_TO_ADDR
// end ;
64291: GO 64215
64293: POP
64294: POP
// end ;
64295: LD_VAR 0 2
64299: RET
// export function GetBaseMaterials ( base ) ; begin
64300: LD_INT 0
64302: PPUSH
// result := [ 0 , 0 , 0 ] ;
64303: LD_ADDR_VAR 0 2
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: LIST
64321: ST_TO_ADDR
// if not base then
64322: LD_VAR 0 1
64326: NOT
64327: IFFALSE 64331
// exit ;
64329: GO 64380
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64331: LD_ADDR_VAR 0 2
64335: PUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: LD_INT 1
64343: PPUSH
64344: CALL_OW 275
64348: PUSH
64349: LD_VAR 0 1
64353: PPUSH
64354: LD_INT 2
64356: PPUSH
64357: CALL_OW 275
64361: PUSH
64362: LD_VAR 0 1
64366: PPUSH
64367: LD_INT 3
64369: PPUSH
64370: CALL_OW 275
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: LIST
64379: ST_TO_ADDR
// end ;
64380: LD_VAR 0 2
64384: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64385: LD_INT 0
64387: PPUSH
64388: PPUSH
// result := array ;
64389: LD_ADDR_VAR 0 3
64393: PUSH
64394: LD_VAR 0 1
64398: ST_TO_ADDR
// if size >= result then
64399: LD_VAR 0 2
64403: PUSH
64404: LD_VAR 0 3
64408: GREATEREQUAL
64409: IFFALSE 64413
// exit ;
64411: GO 64463
// if size then
64413: LD_VAR 0 2
64417: IFFALSE 64463
// for i := array downto size do
64419: LD_ADDR_VAR 0 4
64423: PUSH
64424: DOUBLE
64425: LD_VAR 0 1
64429: INC
64430: ST_TO_ADDR
64431: LD_VAR 0 2
64435: PUSH
64436: FOR_DOWNTO
64437: IFFALSE 64461
// result := Delete ( result , result ) ;
64439: LD_ADDR_VAR 0 3
64443: PUSH
64444: LD_VAR 0 3
64448: PPUSH
64449: LD_VAR 0 3
64453: PPUSH
64454: CALL_OW 3
64458: ST_TO_ADDR
64459: GO 64436
64461: POP
64462: POP
// end ;
64463: LD_VAR 0 3
64467: RET
// export function ComExit ( unit ) ; var tmp ; begin
64468: LD_INT 0
64470: PPUSH
64471: PPUSH
// if not IsInUnit ( unit ) then
64472: LD_VAR 0 1
64476: PPUSH
64477: CALL_OW 310
64481: NOT
64482: IFFALSE 64486
// exit ;
64484: GO 64546
// tmp := IsInUnit ( unit ) ;
64486: LD_ADDR_VAR 0 3
64490: PUSH
64491: LD_VAR 0 1
64495: PPUSH
64496: CALL_OW 310
64500: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64501: LD_VAR 0 3
64505: PPUSH
64506: CALL_OW 247
64510: PUSH
64511: LD_INT 2
64513: EQUAL
64514: IFFALSE 64527
// ComExitVehicle ( unit ) else
64516: LD_VAR 0 1
64520: PPUSH
64521: CALL_OW 121
64525: GO 64536
// ComExitBuilding ( unit ) ;
64527: LD_VAR 0 1
64531: PPUSH
64532: CALL_OW 122
// result := tmp ;
64536: LD_ADDR_VAR 0 2
64540: PUSH
64541: LD_VAR 0 3
64545: ST_TO_ADDR
// end ;
64546: LD_VAR 0 2
64550: RET
// export function ComExitAll ( units ) ; var i ; begin
64551: LD_INT 0
64553: PPUSH
64554: PPUSH
// if not units then
64555: LD_VAR 0 1
64559: NOT
64560: IFFALSE 64564
// exit ;
64562: GO 64590
// for i in units do
64564: LD_ADDR_VAR 0 3
64568: PUSH
64569: LD_VAR 0 1
64573: PUSH
64574: FOR_IN
64575: IFFALSE 64588
// ComExit ( i ) ;
64577: LD_VAR 0 3
64581: PPUSH
64582: CALL 64468 0 1
64586: GO 64574
64588: POP
64589: POP
// end ;
64590: LD_VAR 0 2
64594: RET
// export function ResetHc ; begin
64595: LD_INT 0
64597: PPUSH
// InitHc ;
64598: CALL_OW 19
// hc_importance := 0 ;
64602: LD_ADDR_OWVAR 32
64606: PUSH
64607: LD_INT 0
64609: ST_TO_ADDR
// end ;
64610: LD_VAR 0 1
64614: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64615: LD_INT 0
64617: PPUSH
64618: PPUSH
64619: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64620: LD_ADDR_VAR 0 6
64624: PUSH
64625: LD_VAR 0 1
64629: PUSH
64630: LD_VAR 0 3
64634: PLUS
64635: PUSH
64636: LD_INT 2
64638: DIV
64639: ST_TO_ADDR
// if _x < 0 then
64640: LD_VAR 0 6
64644: PUSH
64645: LD_INT 0
64647: LESS
64648: IFFALSE 64665
// _x := _x * - 1 ;
64650: LD_ADDR_VAR 0 6
64654: PUSH
64655: LD_VAR 0 6
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: MUL
64664: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64665: LD_ADDR_VAR 0 7
64669: PUSH
64670: LD_VAR 0 2
64674: PUSH
64675: LD_VAR 0 4
64679: PLUS
64680: PUSH
64681: LD_INT 2
64683: DIV
64684: ST_TO_ADDR
// if _y < 0 then
64685: LD_VAR 0 7
64689: PUSH
64690: LD_INT 0
64692: LESS
64693: IFFALSE 64710
// _y := _y * - 1 ;
64695: LD_ADDR_VAR 0 7
64699: PUSH
64700: LD_VAR 0 7
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: MUL
64709: ST_TO_ADDR
// result := [ _x , _y ] ;
64710: LD_ADDR_VAR 0 5
64714: PUSH
64715: LD_VAR 0 6
64719: PUSH
64720: LD_VAR 0 7
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: ST_TO_ADDR
// end ;
64729: LD_VAR 0 5
64733: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64734: LD_INT 0
64736: PPUSH
64737: PPUSH
64738: PPUSH
64739: PPUSH
// task := GetTaskList ( unit ) ;
64740: LD_ADDR_VAR 0 7
64744: PUSH
64745: LD_VAR 0 1
64749: PPUSH
64750: CALL_OW 437
64754: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64755: LD_VAR 0 7
64759: NOT
64760: PUSH
64761: LD_VAR 0 1
64765: PPUSH
64766: LD_VAR 0 2
64770: PPUSH
64771: CALL_OW 308
64775: NOT
64776: AND
64777: IFFALSE 64781
// exit ;
64779: GO 64899
// if IsInArea ( unit , area ) then
64781: LD_VAR 0 1
64785: PPUSH
64786: LD_VAR 0 2
64790: PPUSH
64791: CALL_OW 308
64795: IFFALSE 64813
// begin ComMoveToArea ( unit , goAway ) ;
64797: LD_VAR 0 1
64801: PPUSH
64802: LD_VAR 0 3
64806: PPUSH
64807: CALL_OW 113
// exit ;
64811: GO 64899
// end ; if task [ 1 ] [ 1 ] <> M then
64813: LD_VAR 0 7
64817: PUSH
64818: LD_INT 1
64820: ARRAY
64821: PUSH
64822: LD_INT 1
64824: ARRAY
64825: PUSH
64826: LD_STRING M
64828: NONEQUAL
64829: IFFALSE 64833
// exit ;
64831: GO 64899
// x := task [ 1 ] [ 2 ] ;
64833: LD_ADDR_VAR 0 5
64837: PUSH
64838: LD_VAR 0 7
64842: PUSH
64843: LD_INT 1
64845: ARRAY
64846: PUSH
64847: LD_INT 2
64849: ARRAY
64850: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64851: LD_ADDR_VAR 0 6
64855: PUSH
64856: LD_VAR 0 7
64860: PUSH
64861: LD_INT 1
64863: ARRAY
64864: PUSH
64865: LD_INT 3
64867: ARRAY
64868: ST_TO_ADDR
// if InArea ( x , y , area ) then
64869: LD_VAR 0 5
64873: PPUSH
64874: LD_VAR 0 6
64878: PPUSH
64879: LD_VAR 0 2
64883: PPUSH
64884: CALL_OW 309
64888: IFFALSE 64899
// ComStop ( unit ) ;
64890: LD_VAR 0 1
64894: PPUSH
64895: CALL_OW 141
// end ;
64899: LD_VAR 0 4
64903: RET
// export function Abs ( value ) ; begin
64904: LD_INT 0
64906: PPUSH
// result := value ;
64907: LD_ADDR_VAR 0 2
64911: PUSH
64912: LD_VAR 0 1
64916: ST_TO_ADDR
// if value < 0 then
64917: LD_VAR 0 1
64921: PUSH
64922: LD_INT 0
64924: LESS
64925: IFFALSE 64942
// result := value * - 1 ;
64927: LD_ADDR_VAR 0 2
64931: PUSH
64932: LD_VAR 0 1
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: MUL
64941: ST_TO_ADDR
// end ;
64942: LD_VAR 0 2
64946: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64947: LD_INT 0
64949: PPUSH
64950: PPUSH
64951: PPUSH
64952: PPUSH
64953: PPUSH
64954: PPUSH
64955: PPUSH
64956: PPUSH
// if not unit or not building then
64957: LD_VAR 0 1
64961: NOT
64962: PUSH
64963: LD_VAR 0 2
64967: NOT
64968: OR
64969: IFFALSE 64973
// exit ;
64971: GO 65199
// x := GetX ( building ) ;
64973: LD_ADDR_VAR 0 4
64977: PUSH
64978: LD_VAR 0 2
64982: PPUSH
64983: CALL_OW 250
64987: ST_TO_ADDR
// y := GetY ( building ) ;
64988: LD_ADDR_VAR 0 6
64992: PUSH
64993: LD_VAR 0 2
64997: PPUSH
64998: CALL_OW 251
65002: ST_TO_ADDR
// d := GetDir ( building ) ;
65003: LD_ADDR_VAR 0 8
65007: PUSH
65008: LD_VAR 0 2
65012: PPUSH
65013: CALL_OW 254
65017: ST_TO_ADDR
// r := 4 ;
65018: LD_ADDR_VAR 0 9
65022: PUSH
65023: LD_INT 4
65025: ST_TO_ADDR
// for i := 1 to 5 do
65026: LD_ADDR_VAR 0 10
65030: PUSH
65031: DOUBLE
65032: LD_INT 1
65034: DEC
65035: ST_TO_ADDR
65036: LD_INT 5
65038: PUSH
65039: FOR_TO
65040: IFFALSE 65197
// begin _x := ShiftX ( x , d , r + i ) ;
65042: LD_ADDR_VAR 0 5
65046: PUSH
65047: LD_VAR 0 4
65051: PPUSH
65052: LD_VAR 0 8
65056: PPUSH
65057: LD_VAR 0 9
65061: PUSH
65062: LD_VAR 0 10
65066: PLUS
65067: PPUSH
65068: CALL_OW 272
65072: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65073: LD_ADDR_VAR 0 7
65077: PUSH
65078: LD_VAR 0 6
65082: PPUSH
65083: LD_VAR 0 8
65087: PPUSH
65088: LD_VAR 0 9
65092: PUSH
65093: LD_VAR 0 10
65097: PLUS
65098: PPUSH
65099: CALL_OW 273
65103: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65104: LD_VAR 0 5
65108: PPUSH
65109: LD_VAR 0 7
65113: PPUSH
65114: CALL_OW 488
65118: PUSH
65119: LD_VAR 0 5
65123: PPUSH
65124: LD_VAR 0 7
65128: PPUSH
65129: CALL_OW 428
65133: PPUSH
65134: CALL_OW 247
65138: PUSH
65139: LD_INT 3
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: IN
65149: NOT
65150: AND
65151: IFFALSE 65195
// begin ComMoveXY ( unit , _x , _y ) ;
65153: LD_VAR 0 1
65157: PPUSH
65158: LD_VAR 0 5
65162: PPUSH
65163: LD_VAR 0 7
65167: PPUSH
65168: CALL_OW 111
// result := [ _x , _y ] ;
65172: LD_ADDR_VAR 0 3
65176: PUSH
65177: LD_VAR 0 5
65181: PUSH
65182: LD_VAR 0 7
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: ST_TO_ADDR
// exit ;
65191: POP
65192: POP
65193: GO 65199
// end ; end ;
65195: GO 65039
65197: POP
65198: POP
// end ;
65199: LD_VAR 0 3
65203: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65204: LD_INT 0
65206: PPUSH
65207: PPUSH
65208: PPUSH
// result := 0 ;
65209: LD_ADDR_VAR 0 3
65213: PUSH
65214: LD_INT 0
65216: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65217: LD_VAR 0 1
65221: PUSH
65222: LD_INT 0
65224: LESS
65225: PUSH
65226: LD_VAR 0 1
65230: PUSH
65231: LD_INT 8
65233: GREATER
65234: OR
65235: PUSH
65236: LD_VAR 0 2
65240: PUSH
65241: LD_INT 0
65243: LESS
65244: OR
65245: PUSH
65246: LD_VAR 0 2
65250: PUSH
65251: LD_INT 8
65253: GREATER
65254: OR
65255: IFFALSE 65259
// exit ;
65257: GO 65334
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65259: LD_ADDR_VAR 0 4
65263: PUSH
65264: LD_INT 22
65266: PUSH
65267: LD_VAR 0 2
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PPUSH
65276: CALL_OW 69
65280: PUSH
65281: FOR_IN
65282: IFFALSE 65332
// begin un := UnitShoot ( i ) ;
65284: LD_ADDR_VAR 0 5
65288: PUSH
65289: LD_VAR 0 4
65293: PPUSH
65294: CALL_OW 504
65298: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65299: LD_VAR 0 5
65303: PPUSH
65304: CALL_OW 255
65308: PUSH
65309: LD_VAR 0 1
65313: EQUAL
65314: IFFALSE 65330
// begin result := un ;
65316: LD_ADDR_VAR 0 3
65320: PUSH
65321: LD_VAR 0 5
65325: ST_TO_ADDR
// exit ;
65326: POP
65327: POP
65328: GO 65334
// end ; end ;
65330: GO 65281
65332: POP
65333: POP
// end ;
65334: LD_VAR 0 3
65338: RET
// export function GetCargoBay ( units ) ; begin
65339: LD_INT 0
65341: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65342: LD_ADDR_VAR 0 2
65346: PUSH
65347: LD_VAR 0 1
65351: PPUSH
65352: LD_INT 2
65354: PUSH
65355: LD_INT 34
65357: PUSH
65358: LD_INT 12
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 34
65367: PUSH
65368: LD_INT 51
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 34
65377: PUSH
65378: LD_INT 32
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 34
65387: PUSH
65388: LD_INT 89
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: PPUSH
65402: CALL_OW 72
65406: ST_TO_ADDR
// end ;
65407: LD_VAR 0 2
65411: RET
// export function Negate ( value ) ; begin
65412: LD_INT 0
65414: PPUSH
// result := not value ;
65415: LD_ADDR_VAR 0 2
65419: PUSH
65420: LD_VAR 0 1
65424: NOT
65425: ST_TO_ADDR
// end ;
65426: LD_VAR 0 2
65430: RET
// export function Inc ( value ) ; begin
65431: LD_INT 0
65433: PPUSH
// result := value + 1 ;
65434: LD_ADDR_VAR 0 2
65438: PUSH
65439: LD_VAR 0 1
65443: PUSH
65444: LD_INT 1
65446: PLUS
65447: ST_TO_ADDR
// end ;
65448: LD_VAR 0 2
65452: RET
// export function Dec ( value ) ; begin
65453: LD_INT 0
65455: PPUSH
// result := value - 1 ;
65456: LD_ADDR_VAR 0 2
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: LD_INT 1
65468: MINUS
65469: ST_TO_ADDR
// end ;
65470: LD_VAR 0 2
65474: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65475: LD_INT 0
65477: PPUSH
65478: PPUSH
65479: PPUSH
65480: PPUSH
65481: PPUSH
65482: PPUSH
65483: PPUSH
65484: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65485: LD_VAR 0 1
65489: PPUSH
65490: LD_VAR 0 2
65494: PPUSH
65495: CALL_OW 488
65499: NOT
65500: PUSH
65501: LD_VAR 0 3
65505: PPUSH
65506: LD_VAR 0 4
65510: PPUSH
65511: CALL_OW 488
65515: NOT
65516: OR
65517: IFFALSE 65530
// begin result := - 1 ;
65519: LD_ADDR_VAR 0 5
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: ST_TO_ADDR
// exit ;
65528: GO 65765
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65530: LD_ADDR_VAR 0 12
65534: PUSH
65535: LD_VAR 0 1
65539: PPUSH
65540: LD_VAR 0 2
65544: PPUSH
65545: LD_VAR 0 3
65549: PPUSH
65550: LD_VAR 0 4
65554: PPUSH
65555: CALL 64615 0 4
65559: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65560: LD_ADDR_VAR 0 11
65564: PUSH
65565: LD_VAR 0 1
65569: PPUSH
65570: LD_VAR 0 2
65574: PPUSH
65575: LD_VAR 0 12
65579: PUSH
65580: LD_INT 1
65582: ARRAY
65583: PPUSH
65584: LD_VAR 0 12
65588: PUSH
65589: LD_INT 2
65591: ARRAY
65592: PPUSH
65593: CALL_OW 298
65597: ST_TO_ADDR
// distance := 9999 ;
65598: LD_ADDR_VAR 0 10
65602: PUSH
65603: LD_INT 9999
65605: ST_TO_ADDR
// for i := 0 to 5 do
65606: LD_ADDR_VAR 0 6
65610: PUSH
65611: DOUBLE
65612: LD_INT 0
65614: DEC
65615: ST_TO_ADDR
65616: LD_INT 5
65618: PUSH
65619: FOR_TO
65620: IFFALSE 65763
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65622: LD_ADDR_VAR 0 7
65626: PUSH
65627: LD_VAR 0 1
65631: PPUSH
65632: LD_VAR 0 6
65636: PPUSH
65637: LD_VAR 0 11
65641: PPUSH
65642: CALL_OW 272
65646: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65647: LD_ADDR_VAR 0 8
65651: PUSH
65652: LD_VAR 0 2
65656: PPUSH
65657: LD_VAR 0 6
65661: PPUSH
65662: LD_VAR 0 11
65666: PPUSH
65667: CALL_OW 273
65671: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65672: LD_VAR 0 7
65676: PPUSH
65677: LD_VAR 0 8
65681: PPUSH
65682: CALL_OW 488
65686: NOT
65687: IFFALSE 65691
// continue ;
65689: GO 65619
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65691: LD_ADDR_VAR 0 9
65695: PUSH
65696: LD_VAR 0 12
65700: PUSH
65701: LD_INT 1
65703: ARRAY
65704: PPUSH
65705: LD_VAR 0 12
65709: PUSH
65710: LD_INT 2
65712: ARRAY
65713: PPUSH
65714: LD_VAR 0 7
65718: PPUSH
65719: LD_VAR 0 8
65723: PPUSH
65724: CALL_OW 298
65728: ST_TO_ADDR
// if tmp < distance then
65729: LD_VAR 0 9
65733: PUSH
65734: LD_VAR 0 10
65738: LESS
65739: IFFALSE 65761
// begin result := i ;
65741: LD_ADDR_VAR 0 5
65745: PUSH
65746: LD_VAR 0 6
65750: ST_TO_ADDR
// distance := tmp ;
65751: LD_ADDR_VAR 0 10
65755: PUSH
65756: LD_VAR 0 9
65760: ST_TO_ADDR
// end ; end ;
65761: GO 65619
65763: POP
65764: POP
// end ;
65765: LD_VAR 0 5
65769: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65770: LD_INT 0
65772: PPUSH
65773: PPUSH
// if not driver or not IsInUnit ( driver ) then
65774: LD_VAR 0 1
65778: NOT
65779: PUSH
65780: LD_VAR 0 1
65784: PPUSH
65785: CALL_OW 310
65789: NOT
65790: OR
65791: IFFALSE 65795
// exit ;
65793: GO 65885
// vehicle := IsInUnit ( driver ) ;
65795: LD_ADDR_VAR 0 3
65799: PUSH
65800: LD_VAR 0 1
65804: PPUSH
65805: CALL_OW 310
65809: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65810: LD_VAR 0 1
65814: PPUSH
65815: LD_STRING \
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: PUSH
65845: LD_STRING E
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_VAR 0 3
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PPUSH
65881: CALL_OW 446
// end ;
65885: LD_VAR 0 2
65889: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65890: LD_INT 0
65892: PPUSH
65893: PPUSH
// if not driver or not IsInUnit ( driver ) then
65894: LD_VAR 0 1
65898: NOT
65899: PUSH
65900: LD_VAR 0 1
65904: PPUSH
65905: CALL_OW 310
65909: NOT
65910: OR
65911: IFFALSE 65915
// exit ;
65913: GO 66005
// vehicle := IsInUnit ( driver ) ;
65915: LD_ADDR_VAR 0 3
65919: PUSH
65920: LD_VAR 0 1
65924: PPUSH
65925: CALL_OW 310
65929: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65930: LD_VAR 0 1
65934: PPUSH
65935: LD_STRING \
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: PUSH
65965: LD_STRING E
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: LD_VAR 0 3
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PPUSH
66001: CALL_OW 447
// end ;
66005: LD_VAR 0 2
66009: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66010: LD_INT 0
66012: PPUSH
66013: PPUSH
66014: PPUSH
// tmp := [ ] ;
66015: LD_ADDR_VAR 0 5
66019: PUSH
66020: EMPTY
66021: ST_TO_ADDR
// for i in units do
66022: LD_ADDR_VAR 0 4
66026: PUSH
66027: LD_VAR 0 1
66031: PUSH
66032: FOR_IN
66033: IFFALSE 66071
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66035: LD_ADDR_VAR 0 5
66039: PUSH
66040: LD_VAR 0 5
66044: PPUSH
66045: LD_VAR 0 5
66049: PUSH
66050: LD_INT 1
66052: PLUS
66053: PPUSH
66054: LD_VAR 0 4
66058: PPUSH
66059: CALL_OW 256
66063: PPUSH
66064: CALL_OW 2
66068: ST_TO_ADDR
66069: GO 66032
66071: POP
66072: POP
// if not tmp then
66073: LD_VAR 0 5
66077: NOT
66078: IFFALSE 66082
// exit ;
66080: GO 66130
// if asc then
66082: LD_VAR 0 2
66086: IFFALSE 66110
// result := SortListByListAsc ( units , tmp ) else
66088: LD_ADDR_VAR 0 3
66092: PUSH
66093: LD_VAR 0 1
66097: PPUSH
66098: LD_VAR 0 5
66102: PPUSH
66103: CALL_OW 76
66107: ST_TO_ADDR
66108: GO 66130
// result := SortListByListDesc ( units , tmp ) ;
66110: LD_ADDR_VAR 0 3
66114: PUSH
66115: LD_VAR 0 1
66119: PPUSH
66120: LD_VAR 0 5
66124: PPUSH
66125: CALL_OW 77
66129: ST_TO_ADDR
// end ;
66130: LD_VAR 0 3
66134: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66135: LD_INT 0
66137: PPUSH
66138: PPUSH
// task := GetTaskList ( mech ) ;
66139: LD_ADDR_VAR 0 4
66143: PUSH
66144: LD_VAR 0 1
66148: PPUSH
66149: CALL_OW 437
66153: ST_TO_ADDR
// if not task then
66154: LD_VAR 0 4
66158: NOT
66159: IFFALSE 66163
// exit ;
66161: GO 66205
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66163: LD_ADDR_VAR 0 3
66167: PUSH
66168: LD_VAR 0 4
66172: PUSH
66173: LD_INT 1
66175: ARRAY
66176: PUSH
66177: LD_INT 1
66179: ARRAY
66180: PUSH
66181: LD_STRING r
66183: EQUAL
66184: PUSH
66185: LD_VAR 0 4
66189: PUSH
66190: LD_INT 1
66192: ARRAY
66193: PUSH
66194: LD_INT 4
66196: ARRAY
66197: PUSH
66198: LD_VAR 0 2
66202: EQUAL
66203: AND
66204: ST_TO_ADDR
// end ;
66205: LD_VAR 0 3
66209: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66210: LD_INT 0
66212: PPUSH
// SetDir ( unit , d ) ;
66213: LD_VAR 0 1
66217: PPUSH
66218: LD_VAR 0 4
66222: PPUSH
66223: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66227: LD_VAR 0 1
66231: PPUSH
66232: LD_VAR 0 2
66236: PPUSH
66237: LD_VAR 0 3
66241: PPUSH
66242: LD_VAR 0 5
66246: PPUSH
66247: CALL_OW 48
// end ;
66251: LD_VAR 0 6
66255: RET
// export function ToNaturalNumber ( number ) ; begin
66256: LD_INT 0
66258: PPUSH
// result := number div 1 ;
66259: LD_ADDR_VAR 0 2
66263: PUSH
66264: LD_VAR 0 1
66268: PUSH
66269: LD_INT 1
66271: DIV
66272: ST_TO_ADDR
// if number < 0 then
66273: LD_VAR 0 1
66277: PUSH
66278: LD_INT 0
66280: LESS
66281: IFFALSE 66291
// result := 0 ;
66283: LD_ADDR_VAR 0 2
66287: PUSH
66288: LD_INT 0
66290: ST_TO_ADDR
// end ;
66291: LD_VAR 0 2
66295: RET
// export function SortByClass ( units , class ) ; var un ; begin
66296: LD_INT 0
66298: PPUSH
66299: PPUSH
// if not units or not class then
66300: LD_VAR 0 1
66304: NOT
66305: PUSH
66306: LD_VAR 0 2
66310: NOT
66311: OR
66312: IFFALSE 66316
// exit ;
66314: GO 66411
// result := [ ] ;
66316: LD_ADDR_VAR 0 3
66320: PUSH
66321: EMPTY
66322: ST_TO_ADDR
// for un in units do
66323: LD_ADDR_VAR 0 4
66327: PUSH
66328: LD_VAR 0 1
66332: PUSH
66333: FOR_IN
66334: IFFALSE 66409
// if GetClass ( un ) = class then
66336: LD_VAR 0 4
66340: PPUSH
66341: CALL_OW 257
66345: PUSH
66346: LD_VAR 0 2
66350: EQUAL
66351: IFFALSE 66378
// result := Insert ( result , 1 , un ) else
66353: LD_ADDR_VAR 0 3
66357: PUSH
66358: LD_VAR 0 3
66362: PPUSH
66363: LD_INT 1
66365: PPUSH
66366: LD_VAR 0 4
66370: PPUSH
66371: CALL_OW 2
66375: ST_TO_ADDR
66376: GO 66407
// result := Replace ( result , result + 1 , un ) ;
66378: LD_ADDR_VAR 0 3
66382: PUSH
66383: LD_VAR 0 3
66387: PPUSH
66388: LD_VAR 0 3
66392: PUSH
66393: LD_INT 1
66395: PLUS
66396: PPUSH
66397: LD_VAR 0 4
66401: PPUSH
66402: CALL_OW 1
66406: ST_TO_ADDR
66407: GO 66333
66409: POP
66410: POP
// end ;
66411: LD_VAR 0 3
66415: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66416: LD_INT 0
66418: PPUSH
66419: PPUSH
66420: PPUSH
66421: PPUSH
66422: PPUSH
66423: PPUSH
66424: PPUSH
// result := [ ] ;
66425: LD_ADDR_VAR 0 4
66429: PUSH
66430: EMPTY
66431: ST_TO_ADDR
// if x - r < 0 then
66432: LD_VAR 0 1
66436: PUSH
66437: LD_VAR 0 3
66441: MINUS
66442: PUSH
66443: LD_INT 0
66445: LESS
66446: IFFALSE 66458
// min_x := 0 else
66448: LD_ADDR_VAR 0 8
66452: PUSH
66453: LD_INT 0
66455: ST_TO_ADDR
66456: GO 66474
// min_x := x - r ;
66458: LD_ADDR_VAR 0 8
66462: PUSH
66463: LD_VAR 0 1
66467: PUSH
66468: LD_VAR 0 3
66472: MINUS
66473: ST_TO_ADDR
// if y - r < 0 then
66474: LD_VAR 0 2
66478: PUSH
66479: LD_VAR 0 3
66483: MINUS
66484: PUSH
66485: LD_INT 0
66487: LESS
66488: IFFALSE 66500
// min_y := 0 else
66490: LD_ADDR_VAR 0 7
66494: PUSH
66495: LD_INT 0
66497: ST_TO_ADDR
66498: GO 66516
// min_y := y - r ;
66500: LD_ADDR_VAR 0 7
66504: PUSH
66505: LD_VAR 0 2
66509: PUSH
66510: LD_VAR 0 3
66514: MINUS
66515: ST_TO_ADDR
// max_x := x + r ;
66516: LD_ADDR_VAR 0 9
66520: PUSH
66521: LD_VAR 0 1
66525: PUSH
66526: LD_VAR 0 3
66530: PLUS
66531: ST_TO_ADDR
// max_y := y + r ;
66532: LD_ADDR_VAR 0 10
66536: PUSH
66537: LD_VAR 0 2
66541: PUSH
66542: LD_VAR 0 3
66546: PLUS
66547: ST_TO_ADDR
// for _x = min_x to max_x do
66548: LD_ADDR_VAR 0 5
66552: PUSH
66553: DOUBLE
66554: LD_VAR 0 8
66558: DEC
66559: ST_TO_ADDR
66560: LD_VAR 0 9
66564: PUSH
66565: FOR_TO
66566: IFFALSE 66667
// for _y = min_y to max_y do
66568: LD_ADDR_VAR 0 6
66572: PUSH
66573: DOUBLE
66574: LD_VAR 0 7
66578: DEC
66579: ST_TO_ADDR
66580: LD_VAR 0 10
66584: PUSH
66585: FOR_TO
66586: IFFALSE 66663
// begin if not ValidHex ( _x , _y ) then
66588: LD_VAR 0 5
66592: PPUSH
66593: LD_VAR 0 6
66597: PPUSH
66598: CALL_OW 488
66602: NOT
66603: IFFALSE 66607
// continue ;
66605: GO 66585
// if GetResourceTypeXY ( _x , _y ) then
66607: LD_VAR 0 5
66611: PPUSH
66612: LD_VAR 0 6
66616: PPUSH
66617: CALL_OW 283
66621: IFFALSE 66661
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66623: LD_ADDR_VAR 0 4
66627: PUSH
66628: LD_VAR 0 4
66632: PPUSH
66633: LD_VAR 0 4
66637: PUSH
66638: LD_INT 1
66640: PLUS
66641: PPUSH
66642: LD_VAR 0 5
66646: PUSH
66647: LD_VAR 0 6
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PPUSH
66656: CALL_OW 1
66660: ST_TO_ADDR
// end ;
66661: GO 66585
66663: POP
66664: POP
66665: GO 66565
66667: POP
66668: POP
// end ;
66669: LD_VAR 0 4
66673: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66674: LD_INT 0
66676: PPUSH
66677: PPUSH
66678: PPUSH
66679: PPUSH
66680: PPUSH
66681: PPUSH
66682: PPUSH
66683: PPUSH
// if not units then
66684: LD_VAR 0 1
66688: NOT
66689: IFFALSE 66693
// exit ;
66691: GO 67217
// result := UnitFilter ( units , [ f_ok ] ) ;
66693: LD_ADDR_VAR 0 3
66697: PUSH
66698: LD_VAR 0 1
66702: PPUSH
66703: LD_INT 50
66705: PUSH
66706: EMPTY
66707: LIST
66708: PPUSH
66709: CALL_OW 72
66713: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66714: LD_ADDR_VAR 0 8
66718: PUSH
66719: LD_VAR 0 1
66723: PUSH
66724: LD_INT 1
66726: ARRAY
66727: PPUSH
66728: CALL_OW 255
66732: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66733: LD_ADDR_VAR 0 10
66737: PUSH
66738: LD_INT 29
66740: PUSH
66741: LD_INT 91
66743: PUSH
66744: LD_INT 49
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: ST_TO_ADDR
// if not result then
66752: LD_VAR 0 3
66756: NOT
66757: IFFALSE 66761
// exit ;
66759: GO 67217
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66761: LD_ADDR_VAR 0 5
66765: PUSH
66766: LD_INT 81
66768: PUSH
66769: LD_VAR 0 8
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PPUSH
66778: CALL_OW 69
66782: ST_TO_ADDR
// for i in result do
66783: LD_ADDR_VAR 0 4
66787: PUSH
66788: LD_VAR 0 3
66792: PUSH
66793: FOR_IN
66794: IFFALSE 67215
// begin tag := GetTag ( i ) + 1 ;
66796: LD_ADDR_VAR 0 9
66800: PUSH
66801: LD_VAR 0 4
66805: PPUSH
66806: CALL_OW 110
66810: PUSH
66811: LD_INT 1
66813: PLUS
66814: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66815: LD_ADDR_VAR 0 7
66819: PUSH
66820: LD_VAR 0 4
66824: PPUSH
66825: CALL_OW 250
66829: PPUSH
66830: LD_VAR 0 4
66834: PPUSH
66835: CALL_OW 251
66839: PPUSH
66840: LD_INT 6
66842: PPUSH
66843: CALL 66416 0 3
66847: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66848: LD_VAR 0 4
66852: PPUSH
66853: CALL_OW 247
66857: PUSH
66858: LD_INT 2
66860: EQUAL
66861: PUSH
66862: LD_VAR 0 7
66866: AND
66867: PUSH
66868: LD_VAR 0 4
66872: PPUSH
66873: CALL_OW 264
66877: PUSH
66878: LD_VAR 0 10
66882: IN
66883: NOT
66884: AND
66885: IFFALSE 66924
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66887: LD_VAR 0 4
66891: PPUSH
66892: LD_VAR 0 7
66896: PUSH
66897: LD_INT 1
66899: ARRAY
66900: PUSH
66901: LD_INT 1
66903: ARRAY
66904: PPUSH
66905: LD_VAR 0 7
66909: PUSH
66910: LD_INT 1
66912: ARRAY
66913: PUSH
66914: LD_INT 2
66916: ARRAY
66917: PPUSH
66918: CALL_OW 116
66922: GO 67213
// if path > tag then
66924: LD_VAR 0 2
66928: PUSH
66929: LD_VAR 0 9
66933: GREATER
66934: IFFALSE 67142
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66936: LD_ADDR_VAR 0 6
66940: PUSH
66941: LD_VAR 0 5
66945: PPUSH
66946: LD_INT 91
66948: PUSH
66949: LD_VAR 0 4
66953: PUSH
66954: LD_INT 8
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: LIST
66961: PPUSH
66962: CALL_OW 72
66966: ST_TO_ADDR
// if nearEnemy then
66967: LD_VAR 0 6
66971: IFFALSE 67040
// begin if GetWeapon ( i ) = ru_time_lapser then
66973: LD_VAR 0 4
66977: PPUSH
66978: CALL_OW 264
66982: PUSH
66983: LD_INT 49
66985: EQUAL
66986: IFFALSE 67014
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66988: LD_VAR 0 4
66992: PPUSH
66993: LD_VAR 0 6
66997: PPUSH
66998: LD_VAR 0 4
67002: PPUSH
67003: CALL_OW 74
67007: PPUSH
67008: CALL_OW 112
67012: GO 67038
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67014: LD_VAR 0 4
67018: PPUSH
67019: LD_VAR 0 6
67023: PPUSH
67024: LD_VAR 0 4
67028: PPUSH
67029: CALL_OW 74
67033: PPUSH
67034: CALL 68142 0 2
// end else
67038: GO 67140
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67040: LD_VAR 0 4
67044: PPUSH
67045: LD_VAR 0 2
67049: PUSH
67050: LD_VAR 0 9
67054: ARRAY
67055: PUSH
67056: LD_INT 1
67058: ARRAY
67059: PPUSH
67060: LD_VAR 0 2
67064: PUSH
67065: LD_VAR 0 9
67069: ARRAY
67070: PUSH
67071: LD_INT 2
67073: ARRAY
67074: PPUSH
67075: CALL_OW 297
67079: PUSH
67080: LD_INT 6
67082: GREATER
67083: IFFALSE 67126
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67085: LD_VAR 0 4
67089: PPUSH
67090: LD_VAR 0 2
67094: PUSH
67095: LD_VAR 0 9
67099: ARRAY
67100: PUSH
67101: LD_INT 1
67103: ARRAY
67104: PPUSH
67105: LD_VAR 0 2
67109: PUSH
67110: LD_VAR 0 9
67114: ARRAY
67115: PUSH
67116: LD_INT 2
67118: ARRAY
67119: PPUSH
67120: CALL_OW 114
67124: GO 67140
// SetTag ( i , tag ) ;
67126: LD_VAR 0 4
67130: PPUSH
67131: LD_VAR 0 9
67135: PPUSH
67136: CALL_OW 109
// end else
67140: GO 67213
// if enemy then
67142: LD_VAR 0 5
67146: IFFALSE 67213
// begin if GetWeapon ( i ) = ru_time_lapser then
67148: LD_VAR 0 4
67152: PPUSH
67153: CALL_OW 264
67157: PUSH
67158: LD_INT 49
67160: EQUAL
67161: IFFALSE 67189
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67163: LD_VAR 0 4
67167: PPUSH
67168: LD_VAR 0 5
67172: PPUSH
67173: LD_VAR 0 4
67177: PPUSH
67178: CALL_OW 74
67182: PPUSH
67183: CALL_OW 112
67187: GO 67213
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67189: LD_VAR 0 4
67193: PPUSH
67194: LD_VAR 0 5
67198: PPUSH
67199: LD_VAR 0 4
67203: PPUSH
67204: CALL_OW 74
67208: PPUSH
67209: CALL 68142 0 2
// end ; end ;
67213: GO 66793
67215: POP
67216: POP
// end ;
67217: LD_VAR 0 3
67221: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67222: LD_INT 0
67224: PPUSH
67225: PPUSH
67226: PPUSH
// if not unit or IsInUnit ( unit ) then
67227: LD_VAR 0 1
67231: NOT
67232: PUSH
67233: LD_VAR 0 1
67237: PPUSH
67238: CALL_OW 310
67242: OR
67243: IFFALSE 67247
// exit ;
67245: GO 67338
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67247: LD_ADDR_VAR 0 4
67251: PUSH
67252: LD_VAR 0 1
67256: PPUSH
67257: CALL_OW 250
67261: PPUSH
67262: LD_VAR 0 2
67266: PPUSH
67267: LD_INT 1
67269: PPUSH
67270: CALL_OW 272
67274: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67275: LD_ADDR_VAR 0 5
67279: PUSH
67280: LD_VAR 0 1
67284: PPUSH
67285: CALL_OW 251
67289: PPUSH
67290: LD_VAR 0 2
67294: PPUSH
67295: LD_INT 1
67297: PPUSH
67298: CALL_OW 273
67302: ST_TO_ADDR
// if ValidHex ( x , y ) then
67303: LD_VAR 0 4
67307: PPUSH
67308: LD_VAR 0 5
67312: PPUSH
67313: CALL_OW 488
67317: IFFALSE 67338
// ComTurnXY ( unit , x , y ) ;
67319: LD_VAR 0 1
67323: PPUSH
67324: LD_VAR 0 4
67328: PPUSH
67329: LD_VAR 0 5
67333: PPUSH
67334: CALL_OW 118
// end ;
67338: LD_VAR 0 3
67342: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67343: LD_INT 0
67345: PPUSH
67346: PPUSH
// result := false ;
67347: LD_ADDR_VAR 0 3
67351: PUSH
67352: LD_INT 0
67354: ST_TO_ADDR
// if not units then
67355: LD_VAR 0 2
67359: NOT
67360: IFFALSE 67364
// exit ;
67362: GO 67409
// for i in units do
67364: LD_ADDR_VAR 0 4
67368: PUSH
67369: LD_VAR 0 2
67373: PUSH
67374: FOR_IN
67375: IFFALSE 67407
// if See ( side , i ) then
67377: LD_VAR 0 1
67381: PPUSH
67382: LD_VAR 0 4
67386: PPUSH
67387: CALL_OW 292
67391: IFFALSE 67405
// begin result := true ;
67393: LD_ADDR_VAR 0 3
67397: PUSH
67398: LD_INT 1
67400: ST_TO_ADDR
// exit ;
67401: POP
67402: POP
67403: GO 67409
// end ;
67405: GO 67374
67407: POP
67408: POP
// end ;
67409: LD_VAR 0 3
67413: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67414: LD_INT 0
67416: PPUSH
67417: PPUSH
67418: PPUSH
67419: PPUSH
// if not unit or not points then
67420: LD_VAR 0 1
67424: NOT
67425: PUSH
67426: LD_VAR 0 2
67430: NOT
67431: OR
67432: IFFALSE 67436
// exit ;
67434: GO 67526
// dist := 99999 ;
67436: LD_ADDR_VAR 0 5
67440: PUSH
67441: LD_INT 99999
67443: ST_TO_ADDR
// for i in points do
67444: LD_ADDR_VAR 0 4
67448: PUSH
67449: LD_VAR 0 2
67453: PUSH
67454: FOR_IN
67455: IFFALSE 67524
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67457: LD_ADDR_VAR 0 6
67461: PUSH
67462: LD_VAR 0 1
67466: PPUSH
67467: LD_VAR 0 4
67471: PUSH
67472: LD_INT 1
67474: ARRAY
67475: PPUSH
67476: LD_VAR 0 4
67480: PUSH
67481: LD_INT 2
67483: ARRAY
67484: PPUSH
67485: CALL_OW 297
67489: ST_TO_ADDR
// if tmpDist < dist then
67490: LD_VAR 0 6
67494: PUSH
67495: LD_VAR 0 5
67499: LESS
67500: IFFALSE 67522
// begin result := i ;
67502: LD_ADDR_VAR 0 3
67506: PUSH
67507: LD_VAR 0 4
67511: ST_TO_ADDR
// dist := tmpDist ;
67512: LD_ADDR_VAR 0 5
67516: PUSH
67517: LD_VAR 0 6
67521: ST_TO_ADDR
// end ; end ;
67522: GO 67454
67524: POP
67525: POP
// end ;
67526: LD_VAR 0 3
67530: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67531: LD_INT 0
67533: PPUSH
// uc_side := side ;
67534: LD_ADDR_OWVAR 20
67538: PUSH
67539: LD_VAR 0 1
67543: ST_TO_ADDR
// uc_nation := 3 ;
67544: LD_ADDR_OWVAR 21
67548: PUSH
67549: LD_INT 3
67551: ST_TO_ADDR
// vc_chassis := 25 ;
67552: LD_ADDR_OWVAR 37
67556: PUSH
67557: LD_INT 25
67559: ST_TO_ADDR
// vc_engine := engine_siberite ;
67560: LD_ADDR_OWVAR 39
67564: PUSH
67565: LD_INT 3
67567: ST_TO_ADDR
// vc_control := control_computer ;
67568: LD_ADDR_OWVAR 38
67572: PUSH
67573: LD_INT 3
67575: ST_TO_ADDR
// vc_weapon := 59 ;
67576: LD_ADDR_OWVAR 40
67580: PUSH
67581: LD_INT 59
67583: ST_TO_ADDR
// result := CreateVehicle ;
67584: LD_ADDR_VAR 0 5
67588: PUSH
67589: CALL_OW 45
67593: ST_TO_ADDR
// SetDir ( result , d ) ;
67594: LD_VAR 0 5
67598: PPUSH
67599: LD_VAR 0 4
67603: PPUSH
67604: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67608: LD_VAR 0 5
67612: PPUSH
67613: LD_VAR 0 2
67617: PPUSH
67618: LD_VAR 0 3
67622: PPUSH
67623: LD_INT 0
67625: PPUSH
67626: CALL_OW 48
// end ;
67630: LD_VAR 0 5
67634: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67635: LD_INT 0
67637: PPUSH
67638: PPUSH
67639: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67640: LD_ADDR_VAR 0 2
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: LD_INT 0
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67663: LD_VAR 0 1
67667: NOT
67668: PUSH
67669: LD_VAR 0 1
67673: PPUSH
67674: CALL_OW 264
67678: PUSH
67679: LD_INT 12
67681: PUSH
67682: LD_INT 51
67684: PUSH
67685: LD_INT 32
67687: PUSH
67688: LD_INT 89
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: IN
67697: NOT
67698: OR
67699: IFFALSE 67703
// exit ;
67701: GO 67801
// for i := 1 to 3 do
67703: LD_ADDR_VAR 0 3
67707: PUSH
67708: DOUBLE
67709: LD_INT 1
67711: DEC
67712: ST_TO_ADDR
67713: LD_INT 3
67715: PUSH
67716: FOR_TO
67717: IFFALSE 67799
// begin tmp := GetCargo ( cargo , i ) ;
67719: LD_ADDR_VAR 0 4
67723: PUSH
67724: LD_VAR 0 1
67728: PPUSH
67729: LD_VAR 0 3
67733: PPUSH
67734: CALL_OW 289
67738: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67739: LD_ADDR_VAR 0 2
67743: PUSH
67744: LD_VAR 0 2
67748: PPUSH
67749: LD_VAR 0 3
67753: PPUSH
67754: LD_VAR 0 4
67758: PPUSH
67759: CALL_OW 1
67763: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67764: LD_ADDR_VAR 0 2
67768: PUSH
67769: LD_VAR 0 2
67773: PPUSH
67774: LD_INT 4
67776: PPUSH
67777: LD_VAR 0 2
67781: PUSH
67782: LD_INT 4
67784: ARRAY
67785: PUSH
67786: LD_VAR 0 4
67790: PLUS
67791: PPUSH
67792: CALL_OW 1
67796: ST_TO_ADDR
// end ;
67797: GO 67716
67799: POP
67800: POP
// end ;
67801: LD_VAR 0 2
67805: RET
// export function Length ( array ) ; begin
67806: LD_INT 0
67808: PPUSH
// result := array + 0 ;
67809: LD_ADDR_VAR 0 2
67813: PUSH
67814: LD_VAR 0 1
67818: PUSH
67819: LD_INT 0
67821: PLUS
67822: ST_TO_ADDR
// end ;
67823: LD_VAR 0 2
67827: RET
// export function PrepareArray ( array ) ; begin
67828: LD_INT 0
67830: PPUSH
// result := array diff 0 ;
67831: LD_ADDR_VAR 0 2
67835: PUSH
67836: LD_VAR 0 1
67840: PUSH
67841: LD_INT 0
67843: DIFF
67844: ST_TO_ADDR
// if not result [ 1 ] then
67845: LD_VAR 0 2
67849: PUSH
67850: LD_INT 1
67852: ARRAY
67853: NOT
67854: IFFALSE 67874
// result := Delete ( result , 1 ) ;
67856: LD_ADDR_VAR 0 2
67860: PUSH
67861: LD_VAR 0 2
67865: PPUSH
67866: LD_INT 1
67868: PPUSH
67869: CALL_OW 3
67873: ST_TO_ADDR
// end ;
67874: LD_VAR 0 2
67878: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67879: LD_INT 0
67881: PPUSH
67882: PPUSH
67883: PPUSH
67884: PPUSH
// sibRocketRange := 25 ;
67885: LD_ADDR_VAR 0 6
67889: PUSH
67890: LD_INT 25
67892: ST_TO_ADDR
// result := false ;
67893: LD_ADDR_VAR 0 4
67897: PUSH
67898: LD_INT 0
67900: ST_TO_ADDR
// for i := 0 to 5 do
67901: LD_ADDR_VAR 0 5
67905: PUSH
67906: DOUBLE
67907: LD_INT 0
67909: DEC
67910: ST_TO_ADDR
67911: LD_INT 5
67913: PUSH
67914: FOR_TO
67915: IFFALSE 67982
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67917: LD_VAR 0 1
67921: PPUSH
67922: LD_VAR 0 5
67926: PPUSH
67927: LD_VAR 0 6
67931: PPUSH
67932: CALL_OW 272
67936: PPUSH
67937: LD_VAR 0 2
67941: PPUSH
67942: LD_VAR 0 5
67946: PPUSH
67947: LD_VAR 0 6
67951: PPUSH
67952: CALL_OW 273
67956: PPUSH
67957: LD_VAR 0 3
67961: PPUSH
67962: CALL_OW 309
67966: IFFALSE 67980
// begin result := true ;
67968: LD_ADDR_VAR 0 4
67972: PUSH
67973: LD_INT 1
67975: ST_TO_ADDR
// exit ;
67976: POP
67977: POP
67978: GO 67984
// end ;
67980: GO 67914
67982: POP
67983: POP
// end ;
67984: LD_VAR 0 4
67988: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67989: LD_INT 0
67991: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67992: LD_VAR 0 1
67996: PPUSH
67997: LD_VAR 0 2
68001: PPUSH
68002: LD_INT 0
68004: PPUSH
68005: LD_INT 0
68007: PPUSH
68008: LD_INT 1
68010: PPUSH
68011: LD_INT 0
68013: PPUSH
68014: CALL_OW 587
// end ;
68018: LD_VAR 0 3
68022: RET
// export function CenterOnNow ( unit ) ; begin
68023: LD_INT 0
68025: PPUSH
// result := IsInUnit ( unit ) ;
68026: LD_ADDR_VAR 0 2
68030: PUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: CALL_OW 310
68040: ST_TO_ADDR
// if not result then
68041: LD_VAR 0 2
68045: NOT
68046: IFFALSE 68058
// result := unit ;
68048: LD_ADDR_VAR 0 2
68052: PUSH
68053: LD_VAR 0 1
68057: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68058: LD_VAR 0 1
68062: PPUSH
68063: CALL_OW 87
// end ;
68067: LD_VAR 0 2
68071: RET
// export function ComMoveHex ( unit , hex ) ; begin
68072: LD_INT 0
68074: PPUSH
// if not hex then
68075: LD_VAR 0 2
68079: NOT
68080: IFFALSE 68084
// exit ;
68082: GO 68137
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68084: LD_VAR 0 2
68088: PUSH
68089: LD_INT 1
68091: ARRAY
68092: PPUSH
68093: LD_VAR 0 2
68097: PUSH
68098: LD_INT 2
68100: ARRAY
68101: PPUSH
68102: CALL_OW 428
68106: IFFALSE 68110
// exit ;
68108: GO 68137
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68110: LD_VAR 0 1
68114: PPUSH
68115: LD_VAR 0 2
68119: PUSH
68120: LD_INT 1
68122: ARRAY
68123: PPUSH
68124: LD_VAR 0 2
68128: PUSH
68129: LD_INT 2
68131: ARRAY
68132: PPUSH
68133: CALL_OW 111
// end ;
68137: LD_VAR 0 3
68141: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68142: LD_INT 0
68144: PPUSH
68145: PPUSH
68146: PPUSH
// if not unit or not enemy then
68147: LD_VAR 0 1
68151: NOT
68152: PUSH
68153: LD_VAR 0 2
68157: NOT
68158: OR
68159: IFFALSE 68163
// exit ;
68161: GO 68287
// x := GetX ( enemy ) ;
68163: LD_ADDR_VAR 0 4
68167: PUSH
68168: LD_VAR 0 2
68172: PPUSH
68173: CALL_OW 250
68177: ST_TO_ADDR
// y := GetY ( enemy ) ;
68178: LD_ADDR_VAR 0 5
68182: PUSH
68183: LD_VAR 0 2
68187: PPUSH
68188: CALL_OW 251
68192: ST_TO_ADDR
// if ValidHex ( x , y ) then
68193: LD_VAR 0 4
68197: PPUSH
68198: LD_VAR 0 5
68202: PPUSH
68203: CALL_OW 488
68207: IFFALSE 68287
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68209: LD_VAR 0 2
68213: PPUSH
68214: CALL_OW 247
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: LD_INT 2
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: IN
68229: PUSH
68230: LD_VAR 0 1
68234: PPUSH
68235: CALL_OW 255
68239: PPUSH
68240: LD_VAR 0 2
68244: PPUSH
68245: CALL_OW 292
68249: OR
68250: IFFALSE 68268
// ComAttackUnit ( unit , enemy ) else
68252: LD_VAR 0 1
68256: PPUSH
68257: LD_VAR 0 2
68261: PPUSH
68262: CALL_OW 115
68266: GO 68287
// ComAgressiveMove ( unit , x , y ) ;
68268: LD_VAR 0 1
68272: PPUSH
68273: LD_VAR 0 4
68277: PPUSH
68278: LD_VAR 0 5
68282: PPUSH
68283: CALL_OW 114
// end ;
68287: LD_VAR 0 3
68291: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68292: LD_INT 0
68294: PPUSH
68295: PPUSH
68296: PPUSH
// list := AreaToList ( area , 0 ) ;
68297: LD_ADDR_VAR 0 5
68301: PUSH
68302: LD_VAR 0 1
68306: PPUSH
68307: LD_INT 0
68309: PPUSH
68310: CALL_OW 517
68314: ST_TO_ADDR
// if not list then
68315: LD_VAR 0 5
68319: NOT
68320: IFFALSE 68324
// exit ;
68322: GO 68454
// if all then
68324: LD_VAR 0 2
68328: IFFALSE 68416
// begin for i := 1 to list [ 1 ] do
68330: LD_ADDR_VAR 0 4
68334: PUSH
68335: DOUBLE
68336: LD_INT 1
68338: DEC
68339: ST_TO_ADDR
68340: LD_VAR 0 5
68344: PUSH
68345: LD_INT 1
68347: ARRAY
68348: PUSH
68349: FOR_TO
68350: IFFALSE 68412
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68352: LD_ADDR_VAR 0 3
68356: PUSH
68357: LD_VAR 0 3
68361: PPUSH
68362: LD_VAR 0 3
68366: PUSH
68367: LD_INT 1
68369: PLUS
68370: PPUSH
68371: LD_VAR 0 5
68375: PUSH
68376: LD_INT 1
68378: ARRAY
68379: PUSH
68380: LD_VAR 0 4
68384: ARRAY
68385: PUSH
68386: LD_VAR 0 5
68390: PUSH
68391: LD_INT 2
68393: ARRAY
68394: PUSH
68395: LD_VAR 0 4
68399: ARRAY
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PPUSH
68405: CALL_OW 1
68409: ST_TO_ADDR
68410: GO 68349
68412: POP
68413: POP
// exit ;
68414: GO 68454
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68416: LD_ADDR_VAR 0 3
68420: PUSH
68421: LD_VAR 0 5
68425: PUSH
68426: LD_INT 1
68428: ARRAY
68429: PUSH
68430: LD_INT 1
68432: ARRAY
68433: PUSH
68434: LD_VAR 0 5
68438: PUSH
68439: LD_INT 2
68441: ARRAY
68442: PUSH
68443: LD_INT 1
68445: ARRAY
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: EMPTY
68452: LIST
68453: ST_TO_ADDR
// end ;
68454: LD_VAR 0 3
68458: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68459: LD_INT 0
68461: PPUSH
68462: PPUSH
// list := AreaToList ( area , 0 ) ;
68463: LD_ADDR_VAR 0 4
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_INT 0
68475: PPUSH
68476: CALL_OW 517
68480: ST_TO_ADDR
// if not list then
68481: LD_VAR 0 4
68485: NOT
68486: IFFALSE 68490
// exit ;
68488: GO 68531
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68490: LD_ADDR_VAR 0 3
68494: PUSH
68495: LD_VAR 0 4
68499: PUSH
68500: LD_INT 1
68502: ARRAY
68503: PUSH
68504: LD_INT 1
68506: ARRAY
68507: PUSH
68508: LD_VAR 0 4
68512: PUSH
68513: LD_INT 2
68515: ARRAY
68516: PUSH
68517: LD_INT 1
68519: ARRAY
68520: PUSH
68521: LD_VAR 0 2
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: LIST
68530: ST_TO_ADDR
// end ;
68531: LD_VAR 0 3
68535: RET
// export function First ( array ) ; begin
68536: LD_INT 0
68538: PPUSH
// if not array then
68539: LD_VAR 0 1
68543: NOT
68544: IFFALSE 68548
// exit ;
68546: GO 68562
// result := array [ 1 ] ;
68548: LD_ADDR_VAR 0 2
68552: PUSH
68553: LD_VAR 0 1
68557: PUSH
68558: LD_INT 1
68560: ARRAY
68561: ST_TO_ADDR
// end ;
68562: LD_VAR 0 2
68566: RET
// export function Last ( array ) ; begin
68567: LD_INT 0
68569: PPUSH
// if not array then
68570: LD_VAR 0 1
68574: NOT
68575: IFFALSE 68579
// exit ;
68577: GO 68595
// result := array [ array ] ;
68579: LD_ADDR_VAR 0 2
68583: PUSH
68584: LD_VAR 0 1
68588: PUSH
68589: LD_VAR 0 1
68593: ARRAY
68594: ST_TO_ADDR
// end ;
68595: LD_VAR 0 2
68599: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68600: LD_INT 0
68602: PPUSH
68603: PPUSH
// result := [ ] ;
68604: LD_ADDR_VAR 0 5
68608: PUSH
68609: EMPTY
68610: ST_TO_ADDR
// if not array then
68611: LD_VAR 0 1
68615: NOT
68616: IFFALSE 68620
// exit ;
68618: GO 68732
// for i := 1 to array do
68620: LD_ADDR_VAR 0 6
68624: PUSH
68625: DOUBLE
68626: LD_INT 1
68628: DEC
68629: ST_TO_ADDR
68630: LD_VAR 0 1
68634: PUSH
68635: FOR_TO
68636: IFFALSE 68730
// if array [ i ] [ index ] = value then
68638: LD_VAR 0 1
68642: PUSH
68643: LD_VAR 0 6
68647: ARRAY
68648: PUSH
68649: LD_VAR 0 2
68653: ARRAY
68654: PUSH
68655: LD_VAR 0 3
68659: EQUAL
68660: IFFALSE 68728
// begin if indexColumn then
68662: LD_VAR 0 4
68666: IFFALSE 68702
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68668: LD_ADDR_VAR 0 5
68672: PUSH
68673: LD_VAR 0 5
68677: PPUSH
68678: LD_VAR 0 1
68682: PUSH
68683: LD_VAR 0 6
68687: ARRAY
68688: PUSH
68689: LD_VAR 0 4
68693: ARRAY
68694: PPUSH
68695: CALL 64070 0 2
68699: ST_TO_ADDR
68700: GO 68728
// result := Join ( result , array [ i ] ) ;
68702: LD_ADDR_VAR 0 5
68706: PUSH
68707: LD_VAR 0 5
68711: PPUSH
68712: LD_VAR 0 1
68716: PUSH
68717: LD_VAR 0 6
68721: ARRAY
68722: PPUSH
68723: CALL 64070 0 2
68727: ST_TO_ADDR
// end ;
68728: GO 68635
68730: POP
68731: POP
// end ;
68732: LD_VAR 0 5
68736: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68737: LD_INT 0
68739: PPUSH
68740: PPUSH
68741: PPUSH
// if btype = b_depot then
68742: LD_VAR 0 2
68746: PUSH
68747: LD_INT 0
68749: EQUAL
68750: IFFALSE 68762
// begin result := true ;
68752: LD_ADDR_VAR 0 3
68756: PUSH
68757: LD_INT 1
68759: ST_TO_ADDR
// exit ;
68760: GO 68878
// end ; pom := GetBase ( depot ) ;
68762: LD_ADDR_VAR 0 4
68766: PUSH
68767: LD_VAR 0 1
68771: PPUSH
68772: CALL_OW 274
68776: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68777: LD_ADDR_VAR 0 5
68781: PUSH
68782: LD_VAR 0 2
68786: PPUSH
68787: LD_VAR 0 1
68791: PPUSH
68792: CALL_OW 248
68796: PPUSH
68797: CALL_OW 450
68801: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68802: LD_ADDR_VAR 0 3
68806: PUSH
68807: LD_VAR 0 4
68811: PPUSH
68812: LD_INT 1
68814: PPUSH
68815: CALL_OW 275
68819: PUSH
68820: LD_VAR 0 5
68824: PUSH
68825: LD_INT 1
68827: ARRAY
68828: GREATEREQUAL
68829: PUSH
68830: LD_VAR 0 4
68834: PPUSH
68835: LD_INT 2
68837: PPUSH
68838: CALL_OW 275
68842: PUSH
68843: LD_VAR 0 5
68847: PUSH
68848: LD_INT 2
68850: ARRAY
68851: GREATEREQUAL
68852: AND
68853: PUSH
68854: LD_VAR 0 4
68858: PPUSH
68859: LD_INT 3
68861: PPUSH
68862: CALL_OW 275
68866: PUSH
68867: LD_VAR 0 5
68871: PUSH
68872: LD_INT 3
68874: ARRAY
68875: GREATEREQUAL
68876: AND
68877: ST_TO_ADDR
// end ;
68878: LD_VAR 0 3
68882: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
68883: LD_INT 0
68885: PPUSH
// if not vehicles or not parkingPoint then
68886: LD_VAR 0 1
68890: NOT
68891: PUSH
68892: LD_VAR 0 2
68896: NOT
68897: OR
68898: IFFALSE 68902
// exit ;
68900: GO 69000
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
68902: LD_ADDR_VAR 0 1
68906: PUSH
68907: LD_VAR 0 1
68911: PPUSH
68912: LD_INT 50
68914: PUSH
68915: EMPTY
68916: LIST
68917: PUSH
68918: LD_INT 3
68920: PUSH
68921: LD_INT 92
68923: PUSH
68924: LD_VAR 0 2
68928: PUSH
68929: LD_INT 1
68931: ARRAY
68932: PUSH
68933: LD_VAR 0 2
68937: PUSH
68938: LD_INT 2
68940: ARRAY
68941: PUSH
68942: LD_INT 8
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PPUSH
68959: CALL_OW 72
68963: ST_TO_ADDR
// if not vehicles then
68964: LD_VAR 0 1
68968: NOT
68969: IFFALSE 68973
// exit ;
68971: GO 69000
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
68973: LD_VAR 0 1
68977: PPUSH
68978: LD_VAR 0 2
68982: PUSH
68983: LD_INT 1
68985: ARRAY
68986: PPUSH
68987: LD_VAR 0 2
68991: PUSH
68992: LD_INT 2
68994: ARRAY
68995: PPUSH
68996: CALL_OW 111
// end ;
69000: LD_VAR 0 3
69004: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69005: LD_INT 0
69007: PPUSH
69008: PPUSH
69009: PPUSH
// if not side or not area then
69010: LD_VAR 0 1
69014: NOT
69015: PUSH
69016: LD_VAR 0 2
69020: NOT
69021: OR
69022: IFFALSE 69026
// exit ;
69024: GO 69145
// tmp := AreaToList ( area , 0 ) ;
69026: LD_ADDR_VAR 0 5
69030: PUSH
69031: LD_VAR 0 2
69035: PPUSH
69036: LD_INT 0
69038: PPUSH
69039: CALL_OW 517
69043: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69044: LD_ADDR_VAR 0 4
69048: PUSH
69049: DOUBLE
69050: LD_INT 1
69052: DEC
69053: ST_TO_ADDR
69054: LD_VAR 0 5
69058: PUSH
69059: LD_INT 1
69061: ARRAY
69062: PUSH
69063: FOR_TO
69064: IFFALSE 69143
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69066: LD_VAR 0 5
69070: PUSH
69071: LD_INT 1
69073: ARRAY
69074: PUSH
69075: LD_VAR 0 4
69079: ARRAY
69080: PPUSH
69081: LD_VAR 0 5
69085: PUSH
69086: LD_INT 2
69088: ARRAY
69089: PUSH
69090: LD_VAR 0 4
69094: ARRAY
69095: PPUSH
69096: CALL_OW 351
69100: IFFALSE 69141
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69102: LD_VAR 0 5
69106: PUSH
69107: LD_INT 1
69109: ARRAY
69110: PUSH
69111: LD_VAR 0 4
69115: ARRAY
69116: PPUSH
69117: LD_VAR 0 5
69121: PUSH
69122: LD_INT 2
69124: ARRAY
69125: PUSH
69126: LD_VAR 0 4
69130: ARRAY
69131: PPUSH
69132: LD_VAR 0 1
69136: PPUSH
69137: CALL_OW 244
// end ;
69141: GO 69063
69143: POP
69144: POP
// end ;
69145: LD_VAR 0 3
69149: RET
