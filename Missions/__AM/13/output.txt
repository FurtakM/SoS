// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// AnimateTrees ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL_OW 573
// RandomizeAll ;
  32: CALL_OW 11
// InGameOn ;
  36: CALL_OW 8
// mission_prefix_prev = 12_ ;
  40: LD_ADDR_EXP 21
  44: PUSH
  45: LD_STRING 12_
  47: ST_TO_ADDR
// PrepareEpsilonBase ;
  48: CALL 2194 0 0
// PrepareHeroes ;
  52: CALL 1035 0 0
// PrepareRandoms ;
  56: CALL 3307 0 0
// CenterNowOnUnits ( JMM ) ;
  60: LD_EXP 1
  64: PPUSH
  65: CALL_OW 87
// DialogueOn ;
  69: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
  73: LD_EXP 1
  77: PPUSH
  78: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
  82: LD_EXP 1
  86: PPUSH
  87: LD_STRING D1-JMM-1
  89: PPUSH
  90: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  94: LD_EXP 2
  98: PPUSH
  99: LD_STRING D1-Pow-1
 101: PPUSH
 102: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
 106: LD_EXP 2
 110: PPUSH
 111: LD_STRING D1-Pow-1a
 113: PPUSH
 114: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 118: LD_EXP 2
 122: PPUSH
 123: LD_STRING D1-Pow-1b
 125: PPUSH
 126: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 130: LD_EXP 2
 134: PPUSH
 135: LD_STRING D1-Pow-1c
 137: PPUSH
 138: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 142: LD_EXP 1
 146: PPUSH
 147: LD_STRING D1-JMM-2
 149: PPUSH
 150: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 154: LD_EXP 2
 158: PPUSH
 159: LD_STRING D1-Pow-2
 161: PPUSH
 162: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 166: LD_EXP 1
 170: PPUSH
 171: LD_STRING D1-JMM-3
 173: PPUSH
 174: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 178: LD_EXP 2
 182: PPUSH
 183: LD_STRING D1-Pow-3
 185: PPUSH
 186: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 190: LD_EXP 1
 194: PPUSH
 195: LD_STRING D1-JMM-4
 197: PPUSH
 198: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 202: LD_EXP 2
 206: PPUSH
 207: LD_STRING D1-Pow-4
 209: PPUSH
 210: CALL_OW 94
// DialogueOff ;
 214: CALL_OW 7
// SelectAndSaveCharacters ;
 218: CALL 3903 0 0
// InGameOff ;
 222: CALL_OW 9
// Query ( Q1 ) ;
 226: LD_STRING Q1
 228: PPUSH
 229: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 233: LD_INT 1
 235: PPUSH
 236: LD_INT 1
 238: PPUSH
 239: CALL_OW 424
// end ;
 243: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 244: LD_INT 1
 246: PPUSH
 247: LD_INT 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PUSH
 257: LD_INT 21
 259: PUSH
 260: LD_INT 1
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PPUSH
 271: CALL_OW 71
 275: PUSH
 276: LD_INT 0
 278: EQUAL
 279: PUSH
 280: LD_INT 1
 282: PPUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 2
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: LD_INT 32
 305: PUSH
 306: LD_INT 3
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 33
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: LD_INT 3
 325: PUSH
 326: LD_INT 58
 328: PUSH
 329: EMPTY
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: LIST
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 70
 347: PUSH
 348: LD_INT 8
 350: EQUAL
 351: AND
 352: IFFALSE 932
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
 360: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 361: LD_INT 1
 363: PPUSH
 364: LD_INT 21
 366: PUSH
 367: LD_INT 2
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 33
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 3
 386: PUSH
 387: LD_INT 58
 389: PUSH
 390: EMPTY
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PPUSH
 402: CALL_OW 70
 406: PUSH
 407: LD_INT 0
 409: GREATER
 410: IFFALSE 678
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 1
 419: PPUSH
 420: LD_INT 21
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: PUSH
 430: LD_INT 33
 432: PUSH
 433: LD_INT 1
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 3
 442: PUSH
 443: LD_INT 58
 445: PUSH
 446: EMPTY
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PPUSH
 458: CALL_OW 70
 462: PUSH
 463: FOR_IN
 464: IFFALSE 664
// begin cargoType = GetCargoType ( i ) ;
 466: LD_ADDR_VAR 0 2
 470: PUSH
 471: LD_VAR 0 1
 475: PPUSH
 476: CALL_OW 288
 480: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 481: LD_VAR 0 1
 485: PPUSH
 486: CALL_OW 264
 490: PUSH
 491: LD_INT 12
 493: EQUAL
 494: IFFALSE 591
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 496: LD_ADDR_EXP 19
 500: PUSH
 501: LD_EXP 19
 505: PUSH
 506: LD_VAR 0 1
 510: PPUSH
 511: CALL_OW 248
 515: PUSH
 516: LD_VAR 0 1
 520: PPUSH
 521: CALL_OW 265
 525: PUSH
 526: LD_VAR 0 1
 530: PPUSH
 531: CALL_OW 262
 535: PUSH
 536: LD_VAR 0 1
 540: PPUSH
 541: CALL_OW 263
 545: PUSH
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 264
 555: PUSH
 556: LD_VAR 0 2
 560: PUSH
 561: LD_VAR 0 1
 565: PPUSH
 566: LD_VAR 0 2
 570: PPUSH
 571: CALL_OW 289
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: ADD
 588: ST_TO_ADDR
// end else
 589: GO 662
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 591: LD_ADDR_EXP 19
 595: PUSH
 596: LD_EXP 19
 600: PUSH
 601: LD_VAR 0 1
 605: PPUSH
 606: CALL_OW 248
 610: PUSH
 611: LD_VAR 0 1
 615: PPUSH
 616: CALL_OW 265
 620: PUSH
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 262
 630: PUSH
 631: LD_VAR 0 1
 635: PPUSH
 636: CALL_OW 263
 640: PUSH
 641: LD_VAR 0 1
 645: PPUSH
 646: CALL_OW 264
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: ADD
 661: ST_TO_ADDR
// end ; end ;
 662: GO 463
 664: POP
 665: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 666: LD_EXP 19
 670: PPUSH
 671: LD_STRING 13_VehiclesIn13_1
 673: PPUSH
 674: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 678: LD_EXP 23
 682: PPUSH
 683: LD_STRING 13c_others
 685: PPUSH
 686: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 690: LD_EXP 1
 694: PPUSH
 695: LD_STRING 13c_JMM
 697: PPUSH
 698: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 702: LD_EXP 15
 706: PPUSH
 707: LD_STRING 13c_Stevens
 709: PPUSH
 710: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 714: LD_EXP 3
 718: PPUSH
 719: LD_STRING Lisa
 721: PPUSH
 722: LD_EXP 22
 726: PPUSH
 727: CALL 3845 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 731: LD_EXP 8
 735: PPUSH
 736: LD_STRING Brown
 738: PPUSH
 739: LD_EXP 22
 743: PPUSH
 744: CALL 3845 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 748: LD_EXP 4
 752: PPUSH
 753: LD_STRING Donaldson
 755: PPUSH
 756: LD_EXP 22
 760: PPUSH
 761: CALL 3845 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 765: LD_EXP 5
 769: PPUSH
 770: LD_STRING Bobby
 772: PPUSH
 773: LD_EXP 22
 777: PPUSH
 778: CALL 3845 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 782: LD_EXP 6
 786: PPUSH
 787: LD_STRING Cyrus
 789: PPUSH
 790: LD_EXP 22
 794: PPUSH
 795: CALL 3845 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 799: LD_EXP 7
 803: PPUSH
 804: LD_STRING Denis
 806: PPUSH
 807: LD_EXP 22
 811: PPUSH
 812: CALL 3845 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 816: LD_EXP 9
 820: PPUSH
 821: LD_STRING Gladstone
 823: PPUSH
 824: LD_EXP 22
 828: PPUSH
 829: CALL 3845 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 833: LD_EXP 10
 837: PPUSH
 838: LD_STRING Houten
 840: PPUSH
 841: LD_EXP 22
 845: PPUSH
 846: CALL 3845 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 850: LD_EXP 11
 854: PPUSH
 855: LD_STRING Cornel
 857: PPUSH
 858: LD_EXP 22
 862: PPUSH
 863: CALL 3845 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 867: LD_EXP 12
 871: PPUSH
 872: LD_STRING Gary
 874: PPUSH
 875: LD_EXP 22
 879: PPUSH
 880: CALL 3845 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 884: LD_EXP 13
 888: PPUSH
 889: LD_STRING Frank
 891: PPUSH
 892: LD_EXP 22
 896: PPUSH
 897: CALL 3845 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 901: LD_EXP 14
 905: PPUSH
 906: LD_STRING Kikuchi
 908: PPUSH
 909: LD_EXP 22
 913: PPUSH
 914: CALL 3845 0 3
// SaveCargos ;
 918: CALL 935 0 0
// ChangeMap ( 13 , %_cont ) ;
 922: LD_INT 13
 924: PPUSH
 925: LD_STRING %_cont
 927: PPUSH
 928: CALL_OW 340
// end ;
 932: PPOPN 2
 934: END
// export function SaveCargos ; var i ; begin
 935: LD_INT 0
 937: PPUSH
 938: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 939: LD_ADDR_VAR 0 2
 943: PUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 22
 949: PUSH
 950: LD_INT 1
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PUSH
 957: LD_INT 33
 959: PUSH
 960: LD_INT 1
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 34
 969: PUSH
 970: LD_INT 12
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PPUSH
 982: CALL_OW 70
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1016
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 990: LD_ADDR_EXP 20
 994: PUSH
 995: LD_EXP 20
 999: PUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: CALL 4501 0 1
1009: PUSH
1010: EMPTY
1011: LIST
1012: ADD
1013: ST_TO_ADDR
1014: GO 987
1016: POP
1017: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
1018: LD_EXP 20
1022: PPUSH
1023: LD_STRING 13_ResourcesInCargo13_1
1025: PPUSH
1026: CALL_OW 39
// end ; end_of_file
1030: LD_VAR 0 1
1034: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
1035: LD_INT 0
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 22
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: PUSH
1069: LD_INT 30
1071: PUSH
1072: LD_INT 1
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: ST_TO_ADDR
// uc_side = 1 ;
1093: LD_ADDR_OWVAR 20
1097: PUSH
1098: LD_INT 1
1100: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
1101: LD_ADDR_EXP 1
1105: PUSH
1106: LD_STRING JMM
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: CALL 3660 0 2
1116: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
1117: LD_ADDR_EXP 3
1121: PUSH
1122: LD_STRING Lisa
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: CALL 3660 0 2
1132: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
1133: LD_ADDR_EXP 4
1137: PUSH
1138: LD_STRING Donaldson
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: CALL 3660 0 2
1148: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
1149: LD_ADDR_EXP 5
1153: PUSH
1154: LD_STRING Bobby
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: CALL 3660 0 2
1164: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
1165: LD_ADDR_EXP 6
1169: PUSH
1170: LD_STRING Cyrus
1172: PPUSH
1173: LD_INT 1
1175: PPUSH
1176: CALL 3660 0 2
1180: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
1181: LD_ADDR_EXP 7
1185: PUSH
1186: LD_STRING Denis
1188: PPUSH
1189: LD_INT 1
1191: PPUSH
1192: CALL 3660 0 2
1196: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
1197: LD_ADDR_EXP 8
1201: PUSH
1202: LD_STRING Brown
1204: PPUSH
1205: LD_INT 1
1207: PPUSH
1208: CALL 3660 0 2
1212: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_STRING Gladstone
1220: PPUSH
1221: LD_INT 1
1223: PPUSH
1224: CALL 3660 0 2
1228: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
1229: LD_ADDR_EXP 10
1233: PUSH
1234: LD_STRING Houten
1236: PPUSH
1237: LD_INT 1
1239: PPUSH
1240: CALL 3660 0 2
1244: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
1245: LD_ADDR_EXP 11
1249: PUSH
1250: LD_STRING Cornell
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL 3660 0 2
1260: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1261: LD_ADDR_EXP 12
1265: PUSH
1266: LD_STRING Gary
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: CALL 3660 0 2
1276: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1277: LD_ADDR_EXP 13
1281: PUSH
1282: LD_STRING Frank
1284: PPUSH
1285: LD_INT 1
1287: PPUSH
1288: CALL 3660 0 2
1292: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1293: LD_ADDR_EXP 14
1297: PUSH
1298: LD_STRING Kikuchi
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: CALL 3660 0 2
1308: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1309: LD_ADDR_EXP 15
1313: PUSH
1314: LD_STRING Stevens
1316: PPUSH
1317: LD_INT 0
1319: PPUSH
1320: CALL 3660 0 2
1324: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1325: LD_ADDR_EXP 2
1329: PUSH
1330: LD_STRING Powell
1332: PPUSH
1333: LD_INT 0
1335: PPUSH
1336: CALL 3660 0 2
1340: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1341: LD_EXP 1
1345: PPUSH
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: ARRAY
1354: PPUSH
1355: CALL_OW 250
1359: PPUSH
1360: LD_VAR 0 4
1364: PUSH
1365: LD_INT 1
1367: ARRAY
1368: PPUSH
1369: CALL_OW 251
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1384: LD_EXP 15
1388: PPUSH
1389: LD_VAR 0 4
1393: PUSH
1394: LD_INT 1
1396: ARRAY
1397: PPUSH
1398: CALL_OW 250
1402: PPUSH
1403: LD_VAR 0 4
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 251
1416: PPUSH
1417: LD_INT 4
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1427: LD_EXP 3
1431: PPUSH
1432: LD_VAR 0 4
1436: PUSH
1437: LD_INT 1
1439: ARRAY
1440: PPUSH
1441: CALL_OW 250
1445: PPUSH
1446: LD_VAR 0 4
1450: PUSH
1451: LD_INT 1
1453: ARRAY
1454: PPUSH
1455: CALL_OW 251
1459: PPUSH
1460: LD_INT 35
1462: PPUSH
1463: LD_INT 0
1465: PPUSH
1466: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1470: LD_EXP 4
1474: PPUSH
1475: LD_VAR 0 4
1479: PUSH
1480: LD_INT 1
1482: ARRAY
1483: PPUSH
1484: CALL_OW 250
1488: PPUSH
1489: LD_VAR 0 4
1493: PUSH
1494: LD_INT 1
1496: ARRAY
1497: PPUSH
1498: CALL_OW 251
1502: PPUSH
1503: LD_INT 35
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_VAR 0 4
1522: PUSH
1523: LD_INT 1
1525: ARRAY
1526: PPUSH
1527: CALL_OW 250
1531: PPUSH
1532: LD_VAR 0 4
1536: PUSH
1537: LD_INT 1
1539: ARRAY
1540: PPUSH
1541: CALL_OW 251
1545: PPUSH
1546: LD_INT 35
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1556: LD_EXP 6
1560: PPUSH
1561: LD_VAR 0 4
1565: PUSH
1566: LD_INT 1
1568: ARRAY
1569: PPUSH
1570: CALL_OW 250
1574: PPUSH
1575: LD_VAR 0 4
1579: PUSH
1580: LD_INT 1
1582: ARRAY
1583: PPUSH
1584: CALL_OW 251
1588: PPUSH
1589: LD_INT 35
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1599: LD_EXP 7
1603: PPUSH
1604: LD_VAR 0 4
1608: PUSH
1609: LD_INT 1
1611: ARRAY
1612: PPUSH
1613: CALL_OW 250
1617: PPUSH
1618: LD_VAR 0 4
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: PPUSH
1627: CALL_OW 251
1631: PPUSH
1632: LD_INT 35
1634: PPUSH
1635: LD_INT 0
1637: PPUSH
1638: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1642: LD_EXP 8
1646: PPUSH
1647: LD_VAR 0 4
1651: PUSH
1652: LD_INT 1
1654: ARRAY
1655: PPUSH
1656: CALL_OW 250
1660: PPUSH
1661: LD_VAR 0 4
1665: PUSH
1666: LD_INT 1
1668: ARRAY
1669: PPUSH
1670: CALL_OW 251
1674: PPUSH
1675: LD_INT 35
1677: PPUSH
1678: LD_INT 0
1680: PPUSH
1681: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1685: LD_EXP 9
1689: PPUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_INT 1
1697: ARRAY
1698: PPUSH
1699: CALL_OW 250
1703: PPUSH
1704: LD_VAR 0 4
1708: PUSH
1709: LD_INT 1
1711: ARRAY
1712: PPUSH
1713: CALL_OW 251
1717: PPUSH
1718: LD_INT 35
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1728: LD_EXP 10
1732: PPUSH
1733: LD_VAR 0 4
1737: PUSH
1738: LD_INT 1
1740: ARRAY
1741: PPUSH
1742: CALL_OW 250
1746: PPUSH
1747: LD_VAR 0 4
1751: PUSH
1752: LD_INT 1
1754: ARRAY
1755: PPUSH
1756: CALL_OW 251
1760: PPUSH
1761: LD_INT 35
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1771: LD_EXP 11
1775: PPUSH
1776: LD_VAR 0 4
1780: PUSH
1781: LD_INT 1
1783: ARRAY
1784: PPUSH
1785: CALL_OW 250
1789: PPUSH
1790: LD_VAR 0 4
1794: PUSH
1795: LD_INT 1
1797: ARRAY
1798: PPUSH
1799: CALL_OW 251
1803: PPUSH
1804: LD_INT 35
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1814: LD_EXP 12
1818: PPUSH
1819: LD_VAR 0 4
1823: PUSH
1824: LD_INT 1
1826: ARRAY
1827: PPUSH
1828: CALL_OW 250
1832: PPUSH
1833: LD_VAR 0 4
1837: PUSH
1838: LD_INT 1
1840: ARRAY
1841: PPUSH
1842: CALL_OW 251
1846: PPUSH
1847: LD_INT 35
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1857: LD_EXP 13
1861: PPUSH
1862: LD_VAR 0 4
1866: PUSH
1867: LD_INT 1
1869: ARRAY
1870: PPUSH
1871: CALL_OW 250
1875: PPUSH
1876: LD_VAR 0 4
1880: PUSH
1881: LD_INT 1
1883: ARRAY
1884: PPUSH
1885: CALL_OW 251
1889: PPUSH
1890: LD_INT 35
1892: PPUSH
1893: LD_INT 0
1895: PPUSH
1896: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1900: LD_EXP 14
1904: PPUSH
1905: LD_VAR 0 4
1909: PUSH
1910: LD_INT 1
1912: ARRAY
1913: PPUSH
1914: CALL_OW 250
1918: PPUSH
1919: LD_VAR 0 4
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 251
1932: PPUSH
1933: LD_INT 35
1935: PPUSH
1936: LD_INT 0
1938: PPUSH
1939: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
1943: LD_VAR 0 4
1947: PUSH
1948: LD_INT 1
1950: ARRAY
1951: PPUSH
1952: LD_STRING epsilon
1954: PPUSH
1955: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
1959: LD_VAR 0 4
1963: PUSH
1964: LD_INT 1
1966: ARRAY
1967: PPUSH
1968: CALL_OW 274
1972: PPUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3000
1978: PPUSH
1979: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
1983: LD_VAR 0 4
1987: PUSH
1988: LD_INT 1
1990: ARRAY
1991: PPUSH
1992: CALL_OW 274
1996: PPUSH
1997: LD_INT 2
1999: PPUSH
2000: LD_INT 500
2002: PPUSH
2003: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
2007: LD_VAR 0 4
2011: PUSH
2012: LD_INT 1
2014: ARRAY
2015: PPUSH
2016: CALL_OW 274
2020: PPUSH
2021: LD_INT 3
2023: PPUSH
2024: LD_INT 200
2026: PPUSH
2027: CALL_OW 277
// SetClass ( JMM , 1 ) ;
2031: LD_EXP 1
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
2043: LD_ADDR_EXP 16
2047: PUSH
2048: LD_STRING 12_other_survivors
2050: PPUSH
2051: CALL_OW 31
2055: ST_TO_ADDR
// others11 = CreateCharacterSet ( 12_others ) ;
2056: LD_ADDR_EXP 17
2060: PUSH
2061: LD_STRING 12_others
2063: PPUSH
2064: CALL_OW 31
2068: ST_TO_ADDR
// for i in others11 do
2069: LD_ADDR_VAR 0 2
2073: PUSH
2074: LD_EXP 17
2078: PUSH
2079: FOR_IN
2080: IFFALSE 2127
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2082: LD_VAR 0 2
2086: PPUSH
2087: LD_VAR 0 4
2091: PUSH
2092: LD_INT 1
2094: ARRAY
2095: PPUSH
2096: CALL_OW 250
2100: PPUSH
2101: LD_VAR 0 4
2105: PUSH
2106: LD_INT 1
2108: ARRAY
2109: PPUSH
2110: CALL_OW 251
2114: PPUSH
2115: LD_INT 15
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 50
2125: GO 2079
2127: POP
2128: POP
// for i in others12 do
2129: LD_ADDR_VAR 0 2
2133: PUSH
2134: LD_EXP 16
2138: PUSH
2139: FOR_IN
2140: IFFALSE 2187
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2142: LD_VAR 0 2
2146: PPUSH
2147: LD_VAR 0 4
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PPUSH
2156: CALL_OW 250
2160: PPUSH
2161: LD_VAR 0 4
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 251
2174: PPUSH
2175: LD_INT 15
2177: PPUSH
2178: LD_INT 0
2180: PPUSH
2181: CALL_OW 50
2185: GO 2139
2187: POP
2188: POP
// end ;
2189: LD_VAR 0 1
2193: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2194: LD_INT 0
2196: PPUSH
2197: PPUSH
2198: PPUSH
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2203: LD_INT 113
2205: PPUSH
2206: LD_INT 50
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2216: LD_INT 104
2218: PPUSH
2219: LD_INT 24
2221: PPUSH
2222: LD_INT 1
2224: PPUSH
2225: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2229: LD_INT 43
2231: PPUSH
2232: LD_INT 79
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2242: LD_INT 43
2244: PPUSH
2245: LD_INT 68
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2255: LD_INT 99
2257: PPUSH
2258: LD_INT 114
2260: PPUSH
2261: LD_INT 1
2263: PPUSH
2264: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2268: LD_INT 103
2270: PPUSH
2271: LD_INT 114
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2281: LD_INT 152
2283: PPUSH
2284: LD_INT 85
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2294: LD_INT 156
2296: PPUSH
2297: LD_INT 92
2299: PPUSH
2300: LD_INT 1
2302: PPUSH
2303: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2307: LD_ADDR_VAR 0 2
2311: PUSH
2312: LD_STRING 10_EpsilonBase
2314: PPUSH
2315: EMPTY
2316: PPUSH
2317: CALL_OW 30
2321: ST_TO_ADDR
// if not blist then
2322: LD_VAR 0 2
2326: NOT
2327: IFFALSE 2331
// exit ;
2329: GO 3302
// for i in blist do
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_VAR 0 2
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2382
// if i [ 1 ] = 0 or i [ 1 ] = 1 then
2344: LD_VAR 0 3
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PUSH
2353: LD_INT 0
2355: EQUAL
2356: PUSH
2357: LD_VAR 0 3
2361: PUSH
2362: LD_INT 1
2364: ARRAY
2365: PUSH
2366: LD_INT 1
2368: EQUAL
2369: OR
2370: IFFALSE 2380
// baseCorrect = 1 ;
2372: LD_ADDR_VAR 0 6
2376: PUSH
2377: LD_INT 1
2379: ST_TO_ADDR
2380: GO 2341
2382: POP
2383: POP
// if baseCorrect = 0 then
2384: LD_VAR 0 6
2388: PUSH
2389: LD_INT 0
2391: EQUAL
2392: IFFALSE 3097
// begin uc_side = 1 ;
2394: LD_ADDR_OWVAR 20
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// uc_nation = 1 ;
2402: LD_ADDR_OWVAR 21
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// bc_level = 10 ;
2410: LD_ADDR_OWVAR 43
2414: PUSH
2415: LD_INT 10
2417: ST_TO_ADDR
// bc_type = b_warehouse ;
2418: LD_ADDR_OWVAR 42
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2426: LD_INT 99
2428: PPUSH
2429: LD_INT 24
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: CALL_OW 47
// bc_type = b_bunker ;
2439: LD_ADDR_OWVAR 42
2443: PUSH
2444: LD_INT 32
2446: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2447: LD_ADDR_VAR 0 7
2451: PUSH
2452: LD_INT 124
2454: PPUSH
2455: LD_INT 42
2457: PPUSH
2458: LD_INT 4
2460: PPUSH
2461: CALL_OW 47
2465: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2466: LD_VAR 0 7
2470: PPUSH
2471: LD_INT 4
2473: PUSH
2474: LD_INT 5
2476: PUSH
2477: LD_INT 6
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: PUSH
2485: LD_INT 1
2487: PPUSH
2488: LD_INT 3
2490: PPUSH
2491: CALL_OW 12
2495: ARRAY
2496: PPUSH
2497: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2501: LD_ADDR_VAR 0 7
2505: PUSH
2506: LD_INT 111
2508: PPUSH
2509: LD_INT 16
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 47
2519: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2520: LD_VAR 0 7
2524: PPUSH
2525: LD_INT 4
2527: PUSH
2528: LD_INT 5
2530: PUSH
2531: LD_INT 6
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 1
2541: PPUSH
2542: LD_INT 3
2544: PPUSH
2545: CALL_OW 12
2549: ARRAY
2550: PPUSH
2551: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2555: LD_ADDR_VAR 0 7
2559: PUSH
2560: LD_INT 113
2562: PPUSH
2563: LD_INT 21
2565: PPUSH
2566: LD_INT 4
2568: PPUSH
2569: CALL_OW 47
2573: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2574: LD_VAR 0 7
2578: PPUSH
2579: LD_INT 4
2581: PUSH
2582: LD_INT 5
2584: PUSH
2585: LD_INT 6
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: PUSH
2593: LD_INT 1
2595: PPUSH
2596: LD_INT 3
2598: PPUSH
2599: CALL_OW 12
2603: ARRAY
2604: PPUSH
2605: CALL_OW 431
// bc_type = 33 ;
2609: LD_ADDR_OWVAR 42
2613: PUSH
2614: LD_INT 33
2616: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2617: LD_ADDR_VAR 0 7
2621: PUSH
2622: LD_INT 95
2624: PPUSH
2625: LD_INT 41
2627: PPUSH
2628: LD_INT 1
2630: PPUSH
2631: CALL_OW 47
2635: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2636: LD_VAR 0 7
2640: PPUSH
2641: LD_INT 4
2643: PUSH
2644: LD_INT 5
2646: PUSH
2647: LD_INT 6
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: CALL_OW 12
2665: ARRAY
2666: PPUSH
2667: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2671: LD_ADDR_VAR 0 7
2675: PUSH
2676: LD_INT 97
2678: PPUSH
2679: LD_INT 48
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: CALL_OW 47
2689: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2690: LD_VAR 0 7
2694: PPUSH
2695: LD_INT 4
2697: PUSH
2698: LD_INT 5
2700: PUSH
2701: LD_INT 6
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 3
2714: PPUSH
2715: CALL_OW 12
2719: ARRAY
2720: PPUSH
2721: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2725: LD_ADDR_VAR 0 7
2729: PUSH
2730: LD_INT 86
2732: PPUSH
2733: LD_INT 19
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: CALL_OW 47
2743: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2744: LD_VAR 0 7
2748: PPUSH
2749: LD_INT 4
2751: PUSH
2752: LD_INT 5
2754: PUSH
2755: LD_INT 6
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 1
2765: PPUSH
2766: LD_INT 3
2768: PPUSH
2769: CALL_OW 12
2773: ARRAY
2774: PPUSH
2775: CALL_OW 431
// bc_type = 30 ;
2779: LD_ADDR_OWVAR 42
2783: PUSH
2784: LD_INT 30
2786: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2787: LD_INT 104
2789: PPUSH
2790: LD_INT 24
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: CALL_OW 47
// bc_type = 29 ;
2800: LD_ADDR_OWVAR 42
2804: PUSH
2805: LD_INT 29
2807: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2808: LD_INT 113
2810: PPUSH
2811: LD_INT 50
2813: PPUSH
2814: LD_INT 3
2816: PPUSH
2817: CALL_OW 47
// bc_type = 27 ;
2821: LD_ADDR_OWVAR 42
2825: PUSH
2826: LD_INT 27
2828: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2829: LD_INT 98
2831: PPUSH
2832: LD_INT 26
2834: PPUSH
2835: LD_INT 2
2837: PPUSH
2838: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2842: LD_INT 95
2844: PPUSH
2845: LD_INT 23
2847: PPUSH
2848: LD_INT 3
2850: PPUSH
2851: CALL_OW 47
// bc_type = 28 ;
2855: LD_ADDR_OWVAR 42
2859: PUSH
2860: LD_INT 28
2862: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2863: LD_INT 107
2865: PPUSH
2866: LD_INT 32
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: CALL_OW 47
// bc_type = 3 ;
2876: LD_ADDR_OWVAR 42
2880: PUSH
2881: LD_INT 3
2883: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2884: LD_INT 106
2886: PPUSH
2887: LD_INT 42
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 47
// bc_type = 16 ;
2897: LD_ADDR_OWVAR 42
2901: PUSH
2902: LD_INT 16
2904: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2905: LD_INT 109
2907: PPUSH
2908: LD_INT 45
2910: PPUSH
2911: LD_INT 5
2913: PPUSH
2914: CALL_OW 47
// bc_type = 17 ;
2918: LD_ADDR_OWVAR 42
2922: PUSH
2923: LD_INT 17
2925: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2926: LD_INT 106
2928: PPUSH
2929: LD_INT 46
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 47
// bc_type = 19 ;
2939: LD_ADDR_OWVAR 42
2943: PUSH
2944: LD_INT 19
2946: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2947: LD_INT 103
2949: PPUSH
2950: LD_INT 42
2952: PPUSH
2953: LD_INT 1
2955: PPUSH
2956: CALL_OW 47
// bc_type = 21 ;
2960: LD_ADDR_OWVAR 42
2964: PUSH
2965: LD_INT 21
2967: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2968: LD_INT 110
2970: PPUSH
2971: LD_INT 42
2973: PPUSH
2974: LD_INT 4
2976: PPUSH
2977: CALL_OW 47
// bc_type = 5 ;
2981: LD_ADDR_OWVAR 42
2985: PUSH
2986: LD_INT 5
2988: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2989: LD_INT 114
2991: PPUSH
2992: LD_INT 55
2994: PPUSH
2995: LD_INT 5
2997: PPUSH
2998: CALL_OW 47
// bc_type = 36 ;
3002: LD_ADDR_OWVAR 42
3006: PUSH
3007: LD_INT 36
3009: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
3010: LD_INT 96
3012: PPUSH
3013: LD_INT 28
3015: PPUSH
3016: LD_INT 2
3018: PPUSH
3019: CALL_OW 47
// bc_type = b_lab_full ;
3023: LD_ADDR_OWVAR 42
3027: PUSH
3028: LD_INT 8
3030: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3031: LD_ADDR_OWVAR 44
3035: PUSH
3036: LD_INT 15
3038: ST_TO_ADDR
// bc_kind2 = b_lab_siberium ;
3039: LD_ADDR_OWVAR 45
3043: PUSH
3044: LD_INT 11
3046: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
3047: LD_INT 116
3049: PPUSH
3050: LD_INT 38
3052: PPUSH
3053: LD_INT 4
3055: PPUSH
3056: CALL_OW 47
// bc_type = b_lab_full ;
3060: LD_ADDR_OWVAR 42
3064: PUSH
3065: LD_INT 8
3067: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
3068: LD_ADDR_OWVAR 44
3072: PUSH
3073: LD_INT 10
3075: ST_TO_ADDR
// bc_kind2 = b_lab_computer ;
3076: LD_ADDR_OWVAR 45
3080: PUSH
3081: LD_INT 12
3083: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
3084: LD_INT 112
3086: PPUSH
3087: LD_INT 29
3089: PPUSH
3090: LD_INT 4
3092: PPUSH
3093: CALL_OW 47
// end ; if baseCorrect = 1 then
3097: LD_VAR 0 6
3101: PUSH
3102: LD_INT 1
3104: EQUAL
3105: IFFALSE 3302
// begin uc_side := 1 ;
3107: LD_ADDR_OWVAR 20
3111: PUSH
3112: LD_INT 1
3114: ST_TO_ADDR
// uc_nation := 1 ;
3115: LD_ADDR_OWVAR 21
3119: PUSH
3120: LD_INT 1
3122: ST_TO_ADDR
// for i in blist do
3123: LD_ADDR_VAR 0 3
3127: PUSH
3128: LD_VAR 0 2
3132: PUSH
3133: FOR_IN
3134: IFFALSE 3300
// begin bc_type := i [ 1 ] ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_VAR 0 3
3145: PUSH
3146: LD_INT 1
3148: ARRAY
3149: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3150: LD_ADDR_OWVAR 43
3154: PUSH
3155: LD_VAR 0 3
3159: PUSH
3160: LD_INT 5
3162: ARRAY
3163: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3164: LD_VAR 0 3
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: LD_INT 8
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: IN
3183: IFFALSE 3213
// begin bc_kind1 := i [ 7 ] ;
3185: LD_ADDR_OWVAR 44
3189: PUSH
3190: LD_VAR 0 3
3194: PUSH
3195: LD_INT 7
3197: ARRAY
3198: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3199: LD_ADDR_OWVAR 45
3203: PUSH
3204: LD_VAR 0 3
3208: PUSH
3209: LD_INT 8
3211: ARRAY
3212: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3213: LD_ADDR_VAR 0 4
3217: PUSH
3218: LD_VAR 0 3
3222: PUSH
3223: LD_INT 2
3225: ARRAY
3226: PPUSH
3227: LD_VAR 0 3
3231: PUSH
3232: LD_INT 3
3234: ARRAY
3235: PPUSH
3236: LD_VAR 0 3
3240: PUSH
3241: LD_INT 4
3243: ARRAY
3244: PPUSH
3245: CALL_OW 47
3249: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3250: LD_VAR 0 4
3254: PPUSH
3255: CALL_OW 266
3259: PUSH
3260: LD_INT 32
3262: EQUAL
3263: PUSH
3264: LD_VAR 0 4
3268: PPUSH
3269: CALL_OW 266
3273: PUSH
3274: LD_INT 33
3276: EQUAL
3277: OR
3278: IFFALSE 3298
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_VAR 0 3
3289: PUSH
3290: LD_INT 7
3292: ARRAY
3293: PPUSH
3294: CALL_OW 431
// end ; end ;
3298: GO 3133
3300: POP
3301: POP
// end ; end ;
3302: LD_VAR 0 1
3306: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3307: LD_INT 0
3309: PPUSH
3310: PPUSH
3311: PPUSH
3312: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
3313: LD_INT 22
3315: PUSH
3316: LD_INT 1
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: LD_INT 21
3325: PUSH
3326: LD_INT 1
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PPUSH
3337: CALL_OW 69
3341: PUSH
3342: LD_EXP 1
3346: PUSH
3347: LD_EXP 3
3351: PUSH
3352: LD_EXP 4
3356: PUSH
3357: LD_EXP 5
3361: PUSH
3362: LD_EXP 6
3366: PUSH
3367: LD_EXP 7
3371: PUSH
3372: LD_EXP 8
3376: PUSH
3377: LD_EXP 9
3381: PUSH
3382: LD_EXP 10
3386: PUSH
3387: LD_EXP 11
3391: PUSH
3392: LD_EXP 12
3396: PUSH
3397: LD_EXP 13
3401: PUSH
3402: LD_EXP 14
3406: PUSH
3407: LD_EXP 15
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: PUSH
3428: LD_INT 6
3430: LESS
3431: DIFF
3432: IFFALSE 3655
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3434: LD_ADDR_VAR 0 4
3438: PUSH
3439: LD_INT 22
3441: PUSH
3442: LD_INT 1
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 2
3451: PUSH
3452: LD_INT 30
3454: PUSH
3455: LD_INT 0
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: LD_INT 30
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PPUSH
3481: CALL_OW 69
3485: ST_TO_ADDR
// uc_side = 1 ;
3486: LD_ADDR_OWVAR 20
3490: PUSH
3491: LD_INT 1
3493: ST_TO_ADDR
// uc_nation = 1 ;
3494: LD_ADDR_OWVAR 21
3498: PUSH
3499: LD_INT 1
3501: ST_TO_ADDR
// for i = 1 to 6 do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: DOUBLE
3508: LD_INT 1
3510: DEC
3511: ST_TO_ADDR
3512: LD_INT 6
3514: PUSH
3515: FOR_TO
3516: IFFALSE 3653
// begin hc_gallery =  ;
3518: LD_ADDR_OWVAR 33
3522: PUSH
3523: LD_STRING 
3525: ST_TO_ADDR
// hc_name =  ;
3526: LD_ADDR_OWVAR 26
3530: PUSH
3531: LD_STRING 
3533: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3534: LD_INT 0
3536: PPUSH
3537: LD_INT 1
3539: PUSH
3540: LD_INT 2
3542: PUSH
3543: LD_INT 3
3545: PUSH
3546: LD_INT 4
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 1
3557: PPUSH
3558: LD_INT 4
3560: PPUSH
3561: CALL_OW 12
3565: ARRAY
3566: PPUSH
3567: LD_INT 5
3569: PPUSH
3570: LD_INT 8
3572: PPUSH
3573: CALL_OW 12
3577: PPUSH
3578: CALL_OW 380
// un = CreateHuman ;
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: CALL_OW 44
3591: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
3592: LD_ADDR_EXP 18
3596: PUSH
3597: LD_EXP 18
3601: PUSH
3602: LD_VAR 0 3
3606: ADD
3607: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3608: LD_VAR 0 3
3612: PPUSH
3613: LD_VAR 0 4
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 250
3626: PPUSH
3627: LD_VAR 0 4
3631: PUSH
3632: LD_INT 1
3634: ARRAY
3635: PPUSH
3636: CALL_OW 251
3640: PPUSH
3641: LD_INT 15
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL_OW 50
// end ;
3651: GO 3515
3653: POP
3654: POP
// end ; end ; end_of_file
3655: LD_VAR 0 1
3659: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3660: LD_INT 0
3662: PPUSH
3663: PPUSH
// if exist_mode then
3664: LD_VAR 0 2
3668: IFFALSE 3815
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
3670: LD_EXP 21
3674: PUSH
3675: LD_VAR 0 1
3679: STR
3680: PPUSH
3681: CALL_OW 28
3685: PUSH
3686: LD_INT 1
3688: EQUAL
3689: IFFALSE 3714
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3691: LD_ADDR_VAR 0 4
3695: PUSH
3696: LD_EXP 21
3700: PUSH
3701: LD_VAR 0 1
3705: STR
3706: PPUSH
3707: CALL_OW 34
3711: ST_TO_ADDR
// end else
3712: GO 3813
// begin if TestCharacters ( 11_ & ident ) = true then
3714: LD_STRING 11_
3716: PUSH
3717: LD_VAR 0 1
3721: STR
3722: PPUSH
3723: CALL_OW 28
3727: PUSH
3728: LD_INT 1
3730: EQUAL
3731: IFFALSE 3754
// begin unit := CreateCharacter ( 11_ & ident ) ;
3733: LD_ADDR_VAR 0 4
3737: PUSH
3738: LD_STRING 11_
3740: PUSH
3741: LD_VAR 0 1
3745: STR
3746: PPUSH
3747: CALL_OW 34
3751: ST_TO_ADDR
// end else
3752: GO 3813
// begin if TestCharacters ( 10c_ & ident ) = true then
3754: LD_STRING 10c_
3756: PUSH
3757: LD_VAR 0 1
3761: STR
3762: PPUSH
3763: CALL_OW 28
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 3794
// unit := CreateCharacter ( 10c_ & ident ) else
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_STRING 10c_
3780: PUSH
3781: LD_VAR 0 1
3785: STR
3786: PPUSH
3787: CALL_OW 34
3791: ST_TO_ADDR
3792: GO 3813
// unit := CreateCharacter ( 10_ & ident ) ;
3794: LD_ADDR_VAR 0 4
3798: PUSH
3799: LD_STRING 10_
3801: PUSH
3802: LD_VAR 0 1
3806: STR
3807: PPUSH
3808: CALL_OW 34
3812: ST_TO_ADDR
// end ; end ; end else
3813: GO 3830
// begin unit := NewCharacter ( ident ) ;
3815: LD_ADDR_VAR 0 4
3819: PUSH
3820: LD_VAR 0 1
3824: PPUSH
3825: CALL_OW 25
3829: ST_TO_ADDR
// end ; result := unit ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: LD_VAR 0 4
3839: ST_TO_ADDR
// end ;
3840: LD_VAR 0 3
3844: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
3845: LD_INT 0
3847: PPUSH
// if unit in selectedTab then
3848: LD_VAR 0 1
3852: PUSH
3853: LD_VAR 0 3
3857: IN
3858: IFFALSE 3880
// SaveCharacters ( unit , 13c_ & unitString ) else
3860: LD_VAR 0 1
3864: PPUSH
3865: LD_STRING 13c_
3867: PUSH
3868: LD_VAR 0 2
3872: STR
3873: PPUSH
3874: CALL_OW 38
3878: GO 3898
// SaveCharacters ( unit , 13s_ & unitString ) ;
3880: LD_VAR 0 1
3884: PPUSH
3885: LD_STRING 13s_
3887: PUSH
3888: LD_VAR 0 2
3892: STR
3893: PPUSH
3894: CALL_OW 38
// end ;
3898: LD_VAR 0 4
3902: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
3903: LD_INT 0
3905: PPUSH
3906: PPUSH
3907: PPUSH
3908: PPUSH
// selected := [ ] ;
3909: LD_ADDR_EXP 22
3913: PUSH
3914: EMPTY
3915: ST_TO_ADDR
// othersSelect := [ ] ;
3916: LD_ADDR_EXP 23
3920: PUSH
3921: EMPTY
3922: ST_TO_ADDR
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_EXP 3
3932: PUSH
3933: LD_EXP 4
3937: PUSH
3938: LD_EXP 5
3942: PUSH
3943: LD_EXP 6
3947: PUSH
3948: LD_EXP 8
3952: PUSH
3953: LD_EXP 9
3957: PUSH
3958: LD_EXP 10
3962: PUSH
3963: LD_EXP 11
3967: PUSH
3968: LD_EXP 12
3972: PUSH
3973: LD_EXP 13
3977: PUSH
3978: LD_EXP 14
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: ST_TO_ADDR
// tmp = tmp ^ others11 ;
3996: LD_ADDR_VAR 0 3
4000: PUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_EXP 17
4010: ADD
4011: ST_TO_ADDR
// tmp = tmp ^ others12 ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: LD_VAR 0 3
4021: PUSH
4022: LD_EXP 16
4026: ADD
4027: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: LD_VAR 0 3
4037: PUSH
4038: LD_EXP 18
4042: ADD
4043: ST_TO_ADDR
// for i in tmp do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: LD_VAR 0 3
4053: PUSH
4054: FOR_IN
4055: IFFALSE 4094
// if GetClass ( i ) = 8 then
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 257
4066: PUSH
4067: LD_INT 8
4069: EQUAL
4070: IFFALSE 4092
// SetClass ( i , rand ( 1 , 4 ) ) ;
4072: LD_VAR 0 2
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: LD_INT 4
4082: PPUSH
4083: CALL_OW 12
4087: PPUSH
4088: CALL_OW 336
4092: GO 4054
4094: POP
4095: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4096: LD_ADDR_EXP 22
4100: PUSH
4101: LD_STRING 1
4103: PPUSH
4104: LD_INT 6
4106: PPUSH
4107: LD_INT 6
4109: PPUSH
4110: LD_INT -5
4112: PUSH
4113: LD_EXP 1
4117: PUSH
4118: LD_EXP 15
4122: PUSH
4123: LD_INT -2
4125: PUSH
4126: LD_INT -3
4128: PUSH
4129: LD_INT -5
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_VAR 0 3
4144: ADD
4145: PUSH
4146: LD_INT -6
4148: PUSH
4149: LD_INT -4
4151: PUSH
4152: LD_EXP 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: ADD
4162: PPUSH
4163: LD_INT 1
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 1
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 0
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 4
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 5
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: LD_INT 2
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 42
4228: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4229: LD_ADDR_EXP 23
4233: PUSH
4234: LD_EXP 22
4238: PUSH
4239: LD_EXP 3
4243: PUSH
4244: LD_EXP 4
4248: PUSH
4249: LD_EXP 5
4253: PUSH
4254: LD_EXP 6
4258: PUSH
4259: LD_EXP 7
4263: PUSH
4264: LD_EXP 8
4268: PUSH
4269: LD_EXP 9
4273: PUSH
4274: LD_EXP 10
4278: PUSH
4279: LD_EXP 11
4283: PUSH
4284: LD_EXP 12
4288: PUSH
4289: LD_EXP 13
4293: PUSH
4294: LD_EXP 14
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: DIFF
4313: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4314: LD_ADDR_VAR 0 4
4318: PUSH
4319: LD_VAR 0 3
4323: PUSH
4324: LD_EXP 22
4328: DIFF
4329: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4330: LD_ADDR_VAR 0 4
4334: PUSH
4335: LD_VAR 0 4
4339: PUSH
4340: LD_EXP 3
4344: PUSH
4345: LD_EXP 4
4349: PUSH
4350: LD_EXP 5
4354: PUSH
4355: LD_EXP 6
4359: PUSH
4360: LD_EXP 7
4364: PUSH
4365: LD_EXP 8
4369: PUSH
4370: LD_EXP 9
4374: PUSH
4375: LD_EXP 10
4379: PUSH
4380: LD_EXP 11
4384: PUSH
4385: LD_EXP 12
4389: PUSH
4390: LD_EXP 13
4394: PUSH
4395: LD_EXP 14
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: DIFF
4414: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4415: LD_VAR 0 4
4419: PPUSH
4420: LD_STRING 13s_others
4422: PPUSH
4423: CALL_OW 38
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4427: LD_INT 22
4429: PUSH
4430: LD_INT 1
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 21
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PPUSH
4451: CALL_OW 69
4455: PPUSH
4456: LD_INT 4
4458: PPUSH
4459: CALL_OW 235
// SetSide ( selected , 1 ) ;
4463: LD_EXP 22
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4475: LD_EXP 1
4479: PUSH
4480: LD_EXP 15
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PPUSH
4489: LD_INT 1
4491: PPUSH
4492: CALL_OW 235
// end ;
4496: LD_VAR 0 1
4500: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_INT 1
4517: PPUSH
4518: CALL_OW 289
4522: PUSH
4523: LD_VAR 0 1
4527: PPUSH
4528: LD_INT 2
4530: PPUSH
4531: CALL_OW 289
4535: PUSH
4536: LD_VAR 0 1
4540: PPUSH
4541: LD_INT 3
4543: PPUSH
4544: CALL_OW 289
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: ST_TO_ADDR
// end ; end_of_file
4554: LD_VAR 0 2
4558: RET
// on Command ( comandid ) do var i ;
4559: LD_INT 0
4561: PPUSH
// begin if comandid = 65 then
4562: LD_VAR 0 1
4566: PUSH
4567: LD_INT 65
4569: EQUAL
4570: IFFALSE 4611
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4572: LD_ADDR_VAR 0 2
4576: PUSH
4577: LD_INT 22
4579: PUSH
4580: LD_INT 1
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: EMPTY
4588: LIST
4589: PPUSH
4590: CALL_OW 69
4594: PUSH
4595: FOR_IN
4596: IFFALSE 4609
// ComStop ( i ) ;
4598: LD_VAR 0 2
4602: PPUSH
4603: CALL_OW 141
4607: GO 4595
4609: POP
4610: POP
// end ;
4611: PPOPN 2
4613: END
