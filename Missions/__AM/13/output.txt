// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2057 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3416 0 0
// Action ;
  90: CALL 5206 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 4212 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 66747 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 23
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 30
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// if tmp then
1154: LD_VAR 0 4
1158: IFFALSE 1280
// begin x := GetX ( tmp [ 1 ] ) ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: LD_VAR 0 4
1169: PUSH
1170: LD_INT 1
1172: ARRAY
1173: PPUSH
1174: CALL_OW 250
1178: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 251
1197: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1198: LD_VAR 0 4
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: LD_STRING epsilon
1209: PPUSH
1210: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1214: LD_ADDR_VAR 0 7
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 274
1232: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1233: LD_VAR 0 7
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 3000
1243: PPUSH
1244: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1248: LD_VAR 0 7
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 500
1258: PPUSH
1259: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1263: LD_VAR 0 7
1267: PPUSH
1268: LD_INT 3
1270: PPUSH
1271: LD_INT 200
1273: PPUSH
1274: CALL_OW 277
// end else
1278: GO 1296
// begin x := 104 ;
1280: LD_ADDR_VAR 0 5
1284: PUSH
1285: LD_INT 104
1287: ST_TO_ADDR
// y := 32 ;
1288: LD_ADDR_VAR 0 6
1292: PUSH
1293: LD_INT 32
1295: ST_TO_ADDR
// end ; uc_side := 1 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1304: LD_ADDR_EXP 1
1308: PUSH
1309: LD_STRING JMM
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 3686 0 2
1319: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1320: LD_ADDR_EXP 3
1324: PUSH
1325: LD_STRING Lisa
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL 3686 0 2
1335: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1336: LD_ADDR_EXP 4
1340: PUSH
1341: LD_STRING Donaldson
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: CALL 3686 0 2
1351: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1352: LD_ADDR_EXP 5
1356: PUSH
1357: LD_STRING Bobby
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: CALL 3686 0 2
1367: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1368: LD_ADDR_EXP 6
1372: PUSH
1373: LD_STRING Cyrus
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 3686 0 2
1383: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1384: LD_ADDR_EXP 7
1388: PUSH
1389: LD_STRING Denis
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL 3686 0 2
1399: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1400: LD_ADDR_EXP 8
1404: PUSH
1405: LD_STRING Brown
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 3686 0 2
1415: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1416: LD_ADDR_EXP 9
1420: PUSH
1421: LD_STRING Gladstone
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 3686 0 2
1431: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING Houten
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 3686 0 2
1447: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1448: LD_ADDR_EXP 11
1452: PUSH
1453: LD_STRING Cornell
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 3686 0 2
1463: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1464: LD_ADDR_EXP 12
1468: PUSH
1469: LD_STRING Gary
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: CALL 3686 0 2
1479: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1480: LD_ADDR_EXP 13
1484: PUSH
1485: LD_STRING Frank
1487: PPUSH
1488: LD_INT 1
1490: PPUSH
1491: CALL 3686 0 2
1495: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1496: LD_ADDR_EXP 14
1500: PUSH
1501: LD_STRING Kikuchi
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: CALL 3686 0 2
1511: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_STRING Stevens
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL 3686 0 2
1527: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1528: LD_ADDR_EXP 2
1532: PUSH
1533: LD_STRING Powell
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL 3686 0 2
1543: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_VAR 0 5
1553: PPUSH
1554: LD_VAR 0 6
1558: PPUSH
1559: LD_INT 4
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL 3859 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1569: LD_EXP 15
1573: PPUSH
1574: LD_VAR 0 5
1578: PPUSH
1579: LD_VAR 0 6
1583: PPUSH
1584: LD_INT 4
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL 3859 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1594: LD_EXP 3
1598: PPUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: LD_VAR 0 6
1608: PPUSH
1609: LD_INT 35
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL 3859 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1619: LD_EXP 4
1623: PPUSH
1624: LD_VAR 0 5
1628: PPUSH
1629: LD_VAR 0 6
1633: PPUSH
1634: LD_INT 35
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL 3859 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1644: LD_EXP 5
1648: PPUSH
1649: LD_VAR 0 5
1653: PPUSH
1654: LD_VAR 0 6
1658: PPUSH
1659: LD_INT 35
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL 3859 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_VAR 0 5
1678: PPUSH
1679: LD_VAR 0 6
1683: PPUSH
1684: LD_INT 35
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL 3859 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: LD_VAR 0 6
1708: PPUSH
1709: LD_INT 35
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL 3859 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1719: LD_EXP 8
1723: PPUSH
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 35
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL 3859 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1744: LD_EXP 9
1748: PPUSH
1749: LD_VAR 0 5
1753: PPUSH
1754: LD_VAR 0 6
1758: PPUSH
1759: LD_INT 35
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 3859 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1769: LD_EXP 10
1773: PPUSH
1774: LD_VAR 0 5
1778: PPUSH
1779: LD_VAR 0 6
1783: PPUSH
1784: LD_INT 35
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL 3859 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1794: LD_EXP 11
1798: PPUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 6
1808: PPUSH
1809: LD_INT 35
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL 3859 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1819: LD_EXP 12
1823: PPUSH
1824: LD_VAR 0 5
1828: PPUSH
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_INT 35
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL 3859 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1844: LD_EXP 13
1848: PPUSH
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 6
1858: PPUSH
1859: LD_INT 35
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL 3859 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1869: LD_EXP 14
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_INT 35
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL 3859 0 5
// SetClass ( JMM , 1 ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1906: LD_ADDR_EXP 16
1910: PUSH
1911: LD_STRING 12_other_survivors
1913: PPUSH
1914: CALL_OW 31
1918: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1919: LD_ADDR_EXP 17
1923: PUSH
1924: LD_STRING 12_others
1926: PPUSH
1927: CALL_OW 31
1931: ST_TO_ADDR
// for i in others11 do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_EXP 17
1941: PUSH
1942: FOR_IN
1943: IFFALSE 1990
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 4
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: CALL_OW 250
1963: PPUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 251
1977: PPUSH
1978: LD_INT 15
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL 3859 0 5
1988: GO 1942
1990: POP
1991: POP
// for i in others12 do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_EXP 16
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2050
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PPUSH
2019: CALL_OW 250
2023: PPUSH
2024: LD_VAR 0 4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PPUSH
2033: CALL_OW 251
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL 3859 0 5
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
2064: PPUSH
2065: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2066: LD_INT 113
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2079: LD_INT 104
2081: PPUSH
2082: LD_INT 24
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2092: LD_INT 43
2094: PPUSH
2095: LD_INT 79
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2105: LD_INT 43
2107: PPUSH
2108: LD_INT 68
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2118: LD_INT 99
2120: PPUSH
2121: LD_INT 114
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2131: LD_INT 103
2133: PPUSH
2134: LD_INT 114
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2144: LD_INT 152
2146: PPUSH
2147: LD_INT 85
2149: PPUSH
2150: LD_INT 1
2152: PPUSH
2153: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2157: LD_INT 156
2159: PPUSH
2160: LD_INT 92
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: LD_STRING 10_EpsilonBase
2177: PPUSH
2178: EMPTY
2179: PPUSH
2180: CALL_OW 30
2184: ST_TO_ADDR
// if not blist then
2185: LD_VAR 0 2
2189: NOT
2190: IFFALSE 2194
// exit ;
2192: GO 3411
// for i in blist do
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_IN
2205: IFFALSE 2247
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: EQUAL
2232: OR
2233: IFFALSE 2245
// begin baseCorrect := 1 ;
2235: LD_ADDR_VAR 0 6
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// break ;
2243: GO 2247
// end ;
2245: GO 2204
2247: POP
2248: POP
// if baseCorrect = 0 then
2249: LD_VAR 0 6
2253: PUSH
2254: LD_INT 0
2256: EQUAL
2257: IFFALSE 2964
// begin uc_side := 1 ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_nation := 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level := 10 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 10
2282: ST_TO_ADDR
// bc_type := b_warehouse ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2291: LD_INT 99
2293: PPUSH
2294: LD_INT 24
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 47
// bc_type := b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2312: LD_ADDR_VAR 0 7
2316: PUSH
2317: LD_INT 124
2319: PPUSH
2320: LD_INT 42
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 5
2341: PUSH
2342: LD_INT 6
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 3
2355: PPUSH
2356: CALL_OW 12
2360: ARRAY
2361: PPUSH
2362: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2366: LD_ADDR_VAR 0 7
2370: PUSH
2371: LD_INT 111
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 47
2384: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2385: LD_VAR 0 7
2389: PPUSH
2390: LD_INT 4
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2420: LD_ADDR_VAR 0 7
2424: PUSH
2425: LD_INT 113
2427: PPUSH
2428: LD_INT 21
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 47
2438: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 4
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: PPUSH
2470: CALL_OW 431
// bc_type := 33 ;
2474: LD_ADDR_OWVAR 42
2478: PUSH
2479: LD_INT 33
2481: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2482: LD_ADDR_VAR 0 7
2486: PUSH
2487: LD_INT 95
2489: PPUSH
2490: LD_INT 41
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 47
2500: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2501: LD_VAR 0 7
2505: PPUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 6
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: CALL_OW 12
2530: ARRAY
2531: PPUSH
2532: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2536: LD_ADDR_VAR 0 7
2540: PUSH
2541: LD_INT 97
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 47
2554: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2555: LD_VAR 0 7
2559: PPUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 6
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2590: LD_ADDR_VAR 0 7
2594: PUSH
2595: LD_INT 86
2597: PPUSH
2598: LD_INT 19
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 47
2608: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2609: LD_VAR 0 7
2613: PPUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: PPUSH
2640: CALL_OW 431
// bc_type := 30 ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 30
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2652: LD_INT 104
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL_OW 47
// bc_type := 29 ;
2665: LD_ADDR_OWVAR 42
2669: PUSH
2670: LD_INT 29
2672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2673: LD_INT 113
2675: PPUSH
2676: LD_INT 50
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL_OW 47
// bc_type := 27 ;
2686: LD_ADDR_OWVAR 42
2690: PUSH
2691: LD_INT 27
2693: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2694: LD_INT 98
2696: PPUSH
2697: LD_INT 26
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2707: LD_INT 95
2709: PPUSH
2710: LD_INT 23
2712: PPUSH
2713: LD_INT 3
2715: PPUSH
2716: CALL_OW 47
// bc_type := 28 ;
2720: LD_ADDR_OWVAR 42
2724: PUSH
2725: LD_INT 28
2727: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2728: LD_INT 107
2730: PPUSH
2731: LD_INT 32
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 47
// bc_type := 3 ;
2741: LD_ADDR_OWVAR 42
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2749: LD_INT 106
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: LD_INT 0
2757: PPUSH
2758: CALL_OW 47
// bc_type := 16 ;
2762: LD_ADDR_OWVAR 42
2766: PUSH
2767: LD_INT 16
2769: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2770: LD_INT 109
2772: PPUSH
2773: LD_INT 45
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 47
// bc_type := 17 ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2791: LD_INT 106
2793: PPUSH
2794: LD_INT 46
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 47
// bc_type := 19 ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 19
2811: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2812: LD_INT 103
2814: PPUSH
2815: LD_INT 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 47
// bc_type := 21 ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 21
2832: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2833: LD_INT 110
2835: PPUSH
2836: LD_INT 42
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 47
// bc_type := 5 ;
2846: LD_ADDR_OWVAR 42
2850: PUSH
2851: LD_INT 5
2853: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2854: LD_INT 114
2856: PPUSH
2857: LD_INT 55
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 47
// bc_type := 36 ;
2867: LD_ADDR_OWVAR 42
2871: PUSH
2872: LD_INT 36
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2875: LD_INT 96
2877: PPUSH
2878: LD_INT 28
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 47
// bc_type := b_lab_full ;
2888: LD_ADDR_OWVAR 42
2892: PUSH
2893: LD_INT 8
2895: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2896: LD_ADDR_OWVAR 44
2900: PUSH
2901: LD_INT 15
2903: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2904: LD_ADDR_OWVAR 45
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2912: LD_INT 116
2914: PPUSH
2915: LD_INT 38
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 10
2940: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 12
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2949: LD_INT 112
2951: PPUSH
2952: LD_INT 29
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// end else
2962: GO 3208
// begin uc_side := 1 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// for i in blist do
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: LD_VAR 0 2
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3206
// begin uc_nation := i [ 6 ] ;
2985: LD_ADDR_OWVAR 21
2989: PUSH
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 6
2997: ARRAY
2998: ST_TO_ADDR
// bc_type := i [ 1 ] ;
2999: LD_ADDR_OWVAR 42
3003: PUSH
3004: LD_VAR 0 3
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3013: LD_ADDR_OWVAR 43
3017: PUSH
3018: LD_VAR 0 3
3022: PUSH
3023: LD_INT 5
3025: ARRAY
3026: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3027: LD_VAR 0 3
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PUSH
3036: LD_INT 7
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: IFFALSE 3076
// begin bc_kind1 := i [ 7 ] ;
3048: LD_ADDR_OWVAR 44
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 7
3060: ARRAY
3061: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3062: LD_ADDR_OWVAR 45
3066: PUSH
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 8
3074: ARRAY
3075: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_VAR 0 3
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 3
3094: PUSH
3095: LD_INT 3
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 3
3103: PUSH
3104: LD_INT 4
3106: ARRAY
3107: PPUSH
3108: CALL_OW 47
3112: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3113: LD_VAR 0 4
3117: PPUSH
3118: CALL_OW 266
3122: PUSH
3123: LD_INT 32
3125: PUSH
3126: LD_INT 33
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: IN
3133: IFFALSE 3204
// if i [ 7 ] then
3135: LD_VAR 0 3
3139: PUSH
3140: LD_INT 7
3142: ARRAY
3143: IFFALSE 3165
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_VAR 0 3
3154: PUSH
3155: LD_INT 7
3157: ARRAY
3158: PPUSH
3159: CALL_OW 431
3163: GO 3204
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_INT 11
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: LD_INT 4
3178: PUSH
3179: LD_INT 5
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_INT 4
3193: PPUSH
3194: CALL_OW 12
3198: ARRAY
3199: PPUSH
3200: CALL_OW 431
// end ;
3204: GO 2982
3206: POP
3207: POP
// end ; uc_side := 1 ;
3208: LD_ADDR_OWVAR 20
3212: PUSH
3213: LD_INT 1
3215: ST_TO_ADDR
// uc_nation := 1 ;
3216: LD_ADDR_OWVAR 21
3220: PUSH
3221: LD_INT 1
3223: ST_TO_ADDR
// for i := 1 to 8 do
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_INT 8
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3409
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3240: LD_ADDR_OWVAR 37
3244: PUSH
3245: LD_INT 5
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 3
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 4
3268: PPUSH
3269: CALL_OW 12
3273: ARRAY
3274: ST_TO_ADDR
// vc_engine := engine_siberite ;
3275: LD_ADDR_OWVAR 39
3279: PUSH
3280: LD_INT 3
3282: ST_TO_ADDR
// vc_control := control_manual ;
3283: LD_ADDR_OWVAR 38
3287: PUSH
3288: LD_INT 1
3290: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3291: LD_OWVAR 37
3295: PUSH
3296: LD_INT 4
3298: EQUAL
3299: IFFALSE 3311
// vc_weapon := us_heavy_gun else
3301: LD_ADDR_OWVAR 40
3305: PUSH
3306: LD_INT 6
3308: ST_TO_ADDR
3309: GO 3356
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3311: LD_ADDR_OWVAR 40
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 9
3321: PUSH
3322: LD_INT 12
3324: PUSH
3325: LD_INT 13
3327: PUSH
3328: LD_INT 9
3330: PUSH
3331: LD_INT 9
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 6
3349: MOD
3350: PUSH
3351: LD_INT 1
3353: PLUS
3354: ARRAY
3355: ST_TO_ADDR
// un := CreateVehicle ;
3356: LD_ADDR_VAR 0 5
3360: PUSH
3361: CALL_OW 45
3365: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3366: LD_VAR 0 5
3370: PPUSH
3371: LD_INT 0
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: CALL_OW 12
3381: PPUSH
3382: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3386: LD_VAR 0 5
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 31
3396: PPUSH
3397: LD_INT 8
3399: PPUSH
3400: LD_INT 0
3402: PPUSH
3403: CALL_OW 50
// end ;
3407: GO 3237
3409: POP
3410: POP
// end ;
3411: LD_VAR 0 1
3415: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 21
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: PUSH
3451: LD_INT 6
3453: LESS
3454: IFFALSE 3681
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3456: LD_ADDR_VAR 0 4
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 2
3473: PUSH
3474: LD_INT 30
3476: PUSH
3477: LD_INT 0
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: ST_TO_ADDR
// uc_side := 1 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 1
3515: ST_TO_ADDR
// uc_nation := 1 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// for i := 1 to 6 do
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: DOUBLE
3530: LD_INT 1
3532: DEC
3533: ST_TO_ADDR
3534: LD_INT 6
3536: PUSH
3537: FOR_TO
3538: IFFALSE 3679
// begin hc_gallery :=  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name :=  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 1
3561: PUSH
3562: LD_INT 2
3564: PUSH
3565: LD_INT 3
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 1
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: CALL_OW 12
3587: ARRAY
3588: PPUSH
3589: LD_INT 5
3591: PPUSH
3592: LD_INT 8
3594: PPUSH
3595: CALL_OW 12
3599: PPUSH
3600: CALL_OW 380
// un := CreateHuman ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: CALL_OW 44
3613: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3614: LD_ADDR_EXP 18
3618: PUSH
3619: LD_EXP 18
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL 63178 0 2
3633: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_VAR 0 4
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 250
3652: PPUSH
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: CALL_OW 251
3666: PPUSH
3667: LD_INT 15
3669: PPUSH
3670: LD_INT 0
3672: PPUSH
3673: CALL 3859 0 5
// end ;
3677: GO 3537
3679: POP
3680: POP
// end ; end ; end_of_file
3681: LD_VAR 0 1
3685: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// if existMode then
3690: LD_VAR 0 2
3694: IFFALSE 3829
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3696: LD_EXP 21
3700: PUSH
3701: LD_VAR 0 1
3705: STR
3706: PPUSH
3707: CALL_OW 28
3711: IFFALSE 3736
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: LD_EXP 21
3722: PUSH
3723: LD_VAR 0 1
3727: STR
3728: PPUSH
3729: CALL_OW 34
3733: ST_TO_ADDR
3734: GO 3827
// begin if TestCharacters ( 11_ & ident ) then
3736: LD_STRING 11_
3738: PUSH
3739: LD_VAR 0 1
3743: STR
3744: PPUSH
3745: CALL_OW 28
3749: IFFALSE 3772
// unit := CreateCharacter ( 11_ & ident ) else
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_STRING 11_
3758: PUSH
3759: LD_VAR 0 1
3763: STR
3764: PPUSH
3765: CALL_OW 34
3769: ST_TO_ADDR
3770: GO 3827
// if TestCharacters ( 10c_ & ident ) then
3772: LD_STRING 10c_
3774: PUSH
3775: LD_VAR 0 1
3779: STR
3780: PPUSH
3781: CALL_OW 28
3785: IFFALSE 3808
// unit := CreateCharacter ( 10c_ & ident ) else
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_STRING 10c_
3794: PUSH
3795: LD_VAR 0 1
3799: STR
3800: PPUSH
3801: CALL_OW 34
3805: ST_TO_ADDR
3806: GO 3827
// unit := CreateCharacter ( 10_ & ident ) ;
3808: LD_ADDR_VAR 0 4
3812: PUSH
3813: LD_STRING 10_
3815: PUSH
3816: LD_VAR 0 1
3820: STR
3821: PPUSH
3822: CALL_OW 34
3826: ST_TO_ADDR
// end ; end else
3827: GO 3844
// unit := NewCharacter ( ident ) ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 25
3843: ST_TO_ADDR
// result := unit ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// end ;
3854: LD_VAR 0 3
3858: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3859: LD_INT 0
3861: PPUSH
3862: PPUSH
3863: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3864: LD_ADDR_VAR 0 8
3868: PUSH
3869: LD_INT 22
3871: PUSH
3872: LD_VAR 0 1
3876: PPUSH
3877: CALL_OW 255
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 3
3898: PUSH
3899: LD_INT 30
3901: PUSH
3902: LD_INT 3
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: ST_TO_ADDR
// if not tmp then
3923: LD_VAR 0 8
3927: NOT
3928: IFFALSE 3961
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3930: LD_VAR 0 1
3934: PPUSH
3935: LD_VAR 0 2
3939: PPUSH
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 5
3954: PPUSH
3955: CALL_OW 50
// exit ;
3959: GO 4207
// end ; for i in tmp do
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_VAR 0 8
3970: PUSH
3971: FOR_IN
3972: IFFALSE 4176
// if IsNotFull ( i ) then
3974: LD_VAR 0 7
3978: PPUSH
3979: CALL 27993 0 1
3983: IFFALSE 4174
// begin PlaceHumanInUnit ( unit , i ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_VAR 0 7
3994: PPUSH
3995: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
3999: LD_VAR 0 7
4003: PPUSH
4004: CALL_OW 266
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 31
4017: PUSH
4018: LD_INT 32
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: IN
4027: IFFALSE 4060
// begin SetClass ( unit , class_soldier ) ;
4029: LD_VAR 0 1
4033: PPUSH
4034: LD_INT 1
4036: PPUSH
4037: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 7
4050: PPUSH
4051: CALL 58501 0 1
4055: PPUSH
4056: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4060: LD_VAR 0 7
4064: PPUSH
4065: CALL_OW 266
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: LD_INT 3
4075: PUSH
4076: LD_INT 36
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: IN
4084: IFFALSE 4098
// SetClass ( unit , class_mechanic ) ;
4086: LD_VAR 0 1
4090: PPUSH
4091: LD_INT 3
4093: PPUSH
4094: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4098: LD_VAR 0 7
4102: PPUSH
4103: CALL_OW 266
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: IN
4118: IFFALSE 4132
// SetClass ( unit , class_engineer ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4132: LD_VAR 0 7
4136: PPUSH
4137: CALL_OW 266
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: LD_INT 7
4147: PUSH
4148: LD_INT 8
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: IN
4156: IFFALSE 4170
// SetClass ( unit , class_scientistic ) ;
4158: LD_VAR 0 1
4162: PPUSH
4163: LD_INT 4
4165: PPUSH
4166: CALL_OW 336
// exit ;
4170: POP
4171: POP
4172: GO 4207
// end ;
4174: GO 3971
4176: POP
4177: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4178: LD_VAR 0 1
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: LD_VAR 0 4
4197: PPUSH
4198: LD_VAR 0 5
4202: PPUSH
4203: CALL_OW 50
// end ;
4207: LD_VAR 0 6
4211: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4212: LD_INT 0
4214: PPUSH
// if unit in selectedTab then
4215: LD_VAR 0 1
4219: PUSH
4220: LD_VAR 0 3
4224: IN
4225: IFFALSE 4247
// SaveCharacters ( unit , 13c_ & unitString ) else
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_STRING 13c_
4234: PUSH
4235: LD_VAR 0 2
4239: STR
4240: PPUSH
4241: CALL_OW 38
4245: GO 4265
// SaveCharacters ( unit , 13s_ & unitString ) ;
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_STRING 13s_
4254: PUSH
4255: LD_VAR 0 2
4259: STR
4260: PPUSH
4261: CALL_OW 38
// end ;
4265: LD_VAR 0 4
4269: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
// selected := [ ] ;
4276: LD_ADDR_EXP 22
4280: PUSH
4281: EMPTY
4282: ST_TO_ADDR
// othersSelect := [ ] ;
4283: LD_ADDR_EXP 23
4287: PUSH
4288: EMPTY
4289: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_EXP 3
4299: PUSH
4300: LD_EXP 4
4304: PUSH
4305: LD_EXP 5
4309: PUSH
4310: LD_EXP 6
4314: PUSH
4315: LD_EXP 8
4319: PUSH
4320: LD_EXP 9
4324: PUSH
4325: LD_EXP 10
4329: PUSH
4330: LD_EXP 11
4334: PUSH
4335: LD_EXP 12
4339: PUSH
4340: LD_EXP 13
4344: PUSH
4345: LD_EXP 14
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4363: LD_ADDR_VAR 0 3
4367: PUSH
4368: LD_VAR 0 3
4372: PUSH
4373: LD_EXP 17
4377: ADD
4378: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_VAR 0 3
4388: PUSH
4389: LD_EXP 16
4393: ADD
4394: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_VAR 0 3
4404: PUSH
4405: LD_EXP 18
4409: ADD
4410: ST_TO_ADDR
// for i in tmp do
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: LD_VAR 0 3
4420: PUSH
4421: FOR_IN
4422: IFFALSE 4461
// if GetClass ( i ) = 8 then
4424: LD_VAR 0 2
4428: PPUSH
4429: CALL_OW 257
4433: PUSH
4434: LD_INT 8
4436: EQUAL
4437: IFFALSE 4459
// SetClass ( i , rand ( 1 , 4 ) ) ;
4439: LD_VAR 0 2
4443: PPUSH
4444: LD_INT 1
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: CALL_OW 12
4454: PPUSH
4455: CALL_OW 336
4459: GO 4421
4461: POP
4462: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4463: LD_ADDR_EXP 22
4467: PUSH
4468: LD_STRING 1
4470: PPUSH
4471: LD_INT 6
4473: PPUSH
4474: LD_INT 6
4476: PPUSH
4477: LD_INT -5
4479: PUSH
4480: LD_EXP 1
4484: PUSH
4485: LD_EXP 15
4489: PUSH
4490: LD_INT -2
4492: PUSH
4493: LD_INT -3
4495: PUSH
4496: LD_INT -5
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: PUSH
4507: LD_VAR 0 3
4511: ADD
4512: PUSH
4513: LD_INT -6
4515: PUSH
4516: LD_INT -4
4518: PUSH
4519: LD_EXP 2
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: ADD
4529: PPUSH
4530: LD_INT 1
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: PUSH
4540: LD_INT 2
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 4
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 42
4595: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4596: LD_ADDR_EXP 23
4600: PUSH
4601: LD_EXP 22
4605: PUSH
4606: LD_EXP 3
4610: PUSH
4611: LD_EXP 4
4615: PUSH
4616: LD_EXP 5
4620: PUSH
4621: LD_EXP 6
4625: PUSH
4626: LD_EXP 7
4630: PUSH
4631: LD_EXP 8
4635: PUSH
4636: LD_EXP 9
4640: PUSH
4641: LD_EXP 10
4645: PUSH
4646: LD_EXP 11
4650: PUSH
4651: LD_EXP 12
4655: PUSH
4656: LD_EXP 13
4660: PUSH
4661: LD_EXP 14
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: DIFF
4680: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: LD_VAR 0 3
4690: PUSH
4691: LD_EXP 22
4695: DIFF
4696: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 4
4706: PUSH
4707: LD_EXP 3
4711: PUSH
4712: LD_EXP 4
4716: PUSH
4717: LD_EXP 5
4721: PUSH
4722: LD_EXP 6
4726: PUSH
4727: LD_EXP 7
4731: PUSH
4732: LD_EXP 8
4736: PUSH
4737: LD_EXP 9
4741: PUSH
4742: LD_EXP 10
4746: PUSH
4747: LD_EXP 11
4751: PUSH
4752: LD_EXP 12
4756: PUSH
4757: LD_EXP 13
4761: PUSH
4762: LD_EXP 14
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: DIFF
4781: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4782: LD_VAR 0 4
4786: PPUSH
4787: LD_STRING 13s_others
4789: PPUSH
4790: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4794: LD_EXP 23
4798: PPUSH
4799: LD_STRING 13c_others
4801: PPUSH
4802: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4806: LD_EXP 1
4810: PPUSH
4811: LD_STRING 13c_JMM
4813: PPUSH
4814: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4818: LD_EXP 15
4822: PPUSH
4823: LD_STRING 13c_Stevens
4825: PPUSH
4826: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4830: LD_EXP 3
4834: PPUSH
4835: LD_STRING Lisa
4837: PPUSH
4838: LD_EXP 22
4842: PPUSH
4843: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4847: LD_EXP 8
4851: PPUSH
4852: LD_STRING Brown
4854: PPUSH
4855: LD_EXP 22
4859: PPUSH
4860: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4864: LD_EXP 4
4868: PPUSH
4869: LD_STRING Donaldson
4871: PPUSH
4872: LD_EXP 22
4876: PPUSH
4877: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4881: LD_EXP 5
4885: PPUSH
4886: LD_STRING Bobby
4888: PPUSH
4889: LD_EXP 22
4893: PPUSH
4894: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4898: LD_EXP 6
4902: PPUSH
4903: LD_STRING Cyrus
4905: PPUSH
4906: LD_EXP 22
4910: PPUSH
4911: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4915: LD_EXP 7
4919: PPUSH
4920: LD_STRING Denis
4922: PPUSH
4923: LD_EXP 22
4927: PPUSH
4928: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4932: LD_EXP 9
4936: PPUSH
4937: LD_STRING Gladstone
4939: PPUSH
4940: LD_EXP 22
4944: PPUSH
4945: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4949: LD_EXP 10
4953: PPUSH
4954: LD_STRING Houten
4956: PPUSH
4957: LD_EXP 22
4961: PPUSH
4962: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4966: LD_EXP 11
4970: PPUSH
4971: LD_STRING Cornel
4973: PPUSH
4974: LD_EXP 22
4978: PPUSH
4979: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4983: LD_EXP 12
4987: PPUSH
4988: LD_STRING Gary
4990: PPUSH
4991: LD_EXP 22
4995: PPUSH
4996: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5000: LD_EXP 13
5004: PPUSH
5005: LD_STRING Frank
5007: PPUSH
5008: LD_EXP 22
5012: PPUSH
5013: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5017: LD_EXP 14
5021: PPUSH
5022: LD_STRING Kikuchi
5024: PPUSH
5025: LD_EXP 22
5029: PPUSH
5030: CALL 4212 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5034: LD_INT 22
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 21
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 69
5062: PPUSH
5063: LD_INT 4
5065: PPUSH
5066: CALL_OW 235
// SetSide ( selected , 1 ) ;
5070: LD_EXP 22
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5082: LD_EXP 1
5086: PUSH
5087: LD_EXP 15
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5103: LD_ADDR_VAR 0 2
5107: PUSH
5108: LD_INT 22
5110: PUSH
5111: LD_INT 1
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 21
5120: PUSH
5121: LD_INT 1
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 69
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5151
// ComExit ( i ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: CALL 63576 0 1
5149: GO 5137
5151: POP
5152: POP
// end ; end_of_file
5153: LD_VAR 0 1
5157: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL 21084 0 1
// if un = JMM then
5167: LD_VAR 0 1
5171: PUSH
5172: LD_EXP 1
5176: EQUAL
5177: IFFALSE 5186
// YouLost ( JMM ) ;
5179: LD_STRING JMM
5181: PPUSH
5182: CALL_OW 104
// end ;
5186: PPOPN 1
5188: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_VAR 0 2
5198: PPUSH
5199: CALL 21206 0 2
// end ; end_of_file
5203: PPOPN 2
5205: END
// export function Action ; begin
5206: LD_INT 0
5208: PPUSH
// InGameOn ;
5209: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5213: LD_INT 22
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 2
5225: PUSH
5226: LD_INT 30
5228: PUSH
5229: LD_INT 0
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 30
5238: PUSH
5239: LD_INT 1
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: PPUSH
5260: CALL_OW 87
// wait ( 0 0$1 ) ;
5264: LD_INT 35
5266: PPUSH
5267: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5271: LD_EXP 1
5275: PPUSH
5276: LD_STRING D1-JMM-1
5278: PPUSH
5279: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5283: LD_EXP 2
5287: PPUSH
5288: LD_STRING D1-Pow-1
5290: PPUSH
5291: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5295: LD_EXP 2
5299: PPUSH
5300: LD_STRING D1-Pow-1a
5302: PPUSH
5303: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5307: LD_EXP 2
5311: PPUSH
5312: LD_STRING D1-Pow-1b
5314: PPUSH
5315: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5319: LD_EXP 2
5323: PPUSH
5324: LD_STRING D1-Pow-1c
5326: PPUSH
5327: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5331: LD_EXP 1
5335: PPUSH
5336: LD_STRING D1-JMM-2
5338: PPUSH
5339: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5343: LD_EXP 2
5347: PPUSH
5348: LD_STRING D1-Pow-2
5350: PPUSH
5351: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5355: LD_EXP 1
5359: PPUSH
5360: LD_STRING D1-JMM-3
5362: PPUSH
5363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5367: LD_EXP 2
5371: PPUSH
5372: LD_STRING D1-Pow-3
5374: PPUSH
5375: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5379: LD_EXP 1
5383: PPUSH
5384: LD_STRING D1-JMM-4
5386: PPUSH
5387: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5391: LD_EXP 2
5395: PPUSH
5396: LD_STRING D1-Pow-4
5398: PPUSH
5399: CALL_OW 94
// SelectAndSaveCharacters ;
5403: CALL 4270 0 0
// InGameOff ;
5407: CALL_OW 9
// Query ( Q1 ) ;
5411: LD_STRING Q1
5413: PPUSH
5414: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5418: LD_INT 2
5420: PPUSH
5421: LD_INT 1
5423: PPUSH
5424: CALL_OW 424
// end ; end_of_file
5428: LD_VAR 0 1
5432: RET
// every 0 0$1 do
5433: GO 5435
5435: DISABLE
// begin enable ;
5436: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5437: LD_STRING updateTimer(
5439: PUSH
5440: LD_OWVAR 1
5444: STR
5445: PUSH
5446: LD_STRING );
5448: STR
5449: PPUSH
5450: CALL_OW 559
// end ;
5454: END
// export function SOS_MapStart ( ) ; begin
5455: LD_INT 0
5457: PPUSH
// if streamModeActive then
5458: LD_EXP 24
5462: IFFALSE 5471
// DefineStreamItems ( true ) ;
5464: LD_INT 1
5466: PPUSH
5467: CALL 7125 0 1
// UpdateFactoryWaypoints ( ) ;
5471: CALL 19986 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5475: CALL 20243 0 0
// end ;
5479: LD_VAR 0 1
5483: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5484: LD_INT 0
5486: PPUSH
// if p2 = 100 then
5487: LD_VAR 0 2
5491: PUSH
5492: LD_INT 100
5494: EQUAL
5495: IFFALSE 6498
// begin if not StreamModeActive then
5497: LD_EXP 24
5501: NOT
5502: IFFALSE 5512
// StreamModeActive := true ;
5504: LD_ADDR_EXP 24
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// if p3 = 0 then
5512: LD_VAR 0 3
5516: PUSH
5517: LD_INT 0
5519: EQUAL
5520: IFFALSE 5526
// InitStreamMode ;
5522: CALL 6661 0 0
// if p3 = 1 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 1
5533: EQUAL
5534: IFFALSE 5544
// sRocket := true ;
5536: LD_ADDR_EXP 29
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 2 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 2
5551: EQUAL
5552: IFFALSE 5562
// sSpeed := true ;
5554: LD_ADDR_EXP 28
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 3 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 3
5569: EQUAL
5570: IFFALSE 5580
// sEngine := true ;
5572: LD_ADDR_EXP 30
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 4 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 4
5587: EQUAL
5588: IFFALSE 5598
// sSpec := true ;
5590: LD_ADDR_EXP 27
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 5 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 5
5605: EQUAL
5606: IFFALSE 5616
// sLevel := true ;
5608: LD_ADDR_EXP 31
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 6 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 6
5623: EQUAL
5624: IFFALSE 5634
// sArmoury := true ;
5626: LD_ADDR_EXP 32
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// if p3 = 7 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 7
5641: EQUAL
5642: IFFALSE 5652
// sRadar := true ;
5644: LD_ADDR_EXP 33
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// if p3 = 8 then
5652: LD_VAR 0 3
5656: PUSH
5657: LD_INT 8
5659: EQUAL
5660: IFFALSE 5670
// sBunker := true ;
5662: LD_ADDR_EXP 34
5666: PUSH
5667: LD_INT 1
5669: ST_TO_ADDR
// if p3 = 9 then
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 9
5677: EQUAL
5678: IFFALSE 5688
// sHack := true ;
5680: LD_ADDR_EXP 35
5684: PUSH
5685: LD_INT 1
5687: ST_TO_ADDR
// if p3 = 10 then
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 10
5695: EQUAL
5696: IFFALSE 5706
// sFire := true ;
5698: LD_ADDR_EXP 36
5702: PUSH
5703: LD_INT 1
5705: ST_TO_ADDR
// if p3 = 11 then
5706: LD_VAR 0 3
5710: PUSH
5711: LD_INT 11
5713: EQUAL
5714: IFFALSE 5724
// sRefresh := true ;
5716: LD_ADDR_EXP 37
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// if p3 = 12 then
5724: LD_VAR 0 3
5728: PUSH
5729: LD_INT 12
5731: EQUAL
5732: IFFALSE 5742
// sExp := true ;
5734: LD_ADDR_EXP 38
5738: PUSH
5739: LD_INT 1
5741: ST_TO_ADDR
// if p3 = 13 then
5742: LD_VAR 0 3
5746: PUSH
5747: LD_INT 13
5749: EQUAL
5750: IFFALSE 5760
// sDepot := true ;
5752: LD_ADDR_EXP 39
5756: PUSH
5757: LD_INT 1
5759: ST_TO_ADDR
// if p3 = 14 then
5760: LD_VAR 0 3
5764: PUSH
5765: LD_INT 14
5767: EQUAL
5768: IFFALSE 5778
// sFlag := true ;
5770: LD_ADDR_EXP 40
5774: PUSH
5775: LD_INT 1
5777: ST_TO_ADDR
// if p3 = 15 then
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 15
5785: EQUAL
5786: IFFALSE 5796
// sKamikadze := true ;
5788: LD_ADDR_EXP 48
5792: PUSH
5793: LD_INT 1
5795: ST_TO_ADDR
// if p3 = 16 then
5796: LD_VAR 0 3
5800: PUSH
5801: LD_INT 16
5803: EQUAL
5804: IFFALSE 5814
// sTroll := true ;
5806: LD_ADDR_EXP 49
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
// if p3 = 17 then
5814: LD_VAR 0 3
5818: PUSH
5819: LD_INT 17
5821: EQUAL
5822: IFFALSE 5832
// sSlow := true ;
5824: LD_ADDR_EXP 50
5828: PUSH
5829: LD_INT 1
5831: ST_TO_ADDR
// if p3 = 18 then
5832: LD_VAR 0 3
5836: PUSH
5837: LD_INT 18
5839: EQUAL
5840: IFFALSE 5850
// sLack := true ;
5842: LD_ADDR_EXP 51
5846: PUSH
5847: LD_INT 1
5849: ST_TO_ADDR
// if p3 = 19 then
5850: LD_VAR 0 3
5854: PUSH
5855: LD_INT 19
5857: EQUAL
5858: IFFALSE 5868
// sTank := true ;
5860: LD_ADDR_EXP 53
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// if p3 = 20 then
5868: LD_VAR 0 3
5872: PUSH
5873: LD_INT 20
5875: EQUAL
5876: IFFALSE 5886
// sRemote := true ;
5878: LD_ADDR_EXP 54
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// if p3 = 21 then
5886: LD_VAR 0 3
5890: PUSH
5891: LD_INT 21
5893: EQUAL
5894: IFFALSE 5904
// sPowell := true ;
5896: LD_ADDR_EXP 55
5900: PUSH
5901: LD_INT 1
5903: ST_TO_ADDR
// if p3 = 22 then
5904: LD_VAR 0 3
5908: PUSH
5909: LD_INT 22
5911: EQUAL
5912: IFFALSE 5922
// sTeleport := true ;
5914: LD_ADDR_EXP 58
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
// if p3 = 23 then
5922: LD_VAR 0 3
5926: PUSH
5927: LD_INT 23
5929: EQUAL
5930: IFFALSE 5940
// sOilTower := true ;
5932: LD_ADDR_EXP 60
5936: PUSH
5937: LD_INT 1
5939: ST_TO_ADDR
// if p3 = 24 then
5940: LD_VAR 0 3
5944: PUSH
5945: LD_INT 24
5947: EQUAL
5948: IFFALSE 5958
// sShovel := true ;
5950: LD_ADDR_EXP 61
5954: PUSH
5955: LD_INT 1
5957: ST_TO_ADDR
// if p3 = 25 then
5958: LD_VAR 0 3
5962: PUSH
5963: LD_INT 25
5965: EQUAL
5966: IFFALSE 5976
// sSheik := true ;
5968: LD_ADDR_EXP 62
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// if p3 = 26 then
5976: LD_VAR 0 3
5980: PUSH
5981: LD_INT 26
5983: EQUAL
5984: IFFALSE 5994
// sEarthquake := true ;
5986: LD_ADDR_EXP 64
5990: PUSH
5991: LD_INT 1
5993: ST_TO_ADDR
// if p3 = 27 then
5994: LD_VAR 0 3
5998: PUSH
5999: LD_INT 27
6001: EQUAL
6002: IFFALSE 6012
// sAI := true ;
6004: LD_ADDR_EXP 65
6008: PUSH
6009: LD_INT 1
6011: ST_TO_ADDR
// if p3 = 28 then
6012: LD_VAR 0 3
6016: PUSH
6017: LD_INT 28
6019: EQUAL
6020: IFFALSE 6030
// sCargo := true ;
6022: LD_ADDR_EXP 68
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// if p3 = 29 then
6030: LD_VAR 0 3
6034: PUSH
6035: LD_INT 29
6037: EQUAL
6038: IFFALSE 6048
// sDLaser := true ;
6040: LD_ADDR_EXP 69
6044: PUSH
6045: LD_INT 1
6047: ST_TO_ADDR
// if p3 = 30 then
6048: LD_VAR 0 3
6052: PUSH
6053: LD_INT 30
6055: EQUAL
6056: IFFALSE 6066
// sExchange := true ;
6058: LD_ADDR_EXP 70
6062: PUSH
6063: LD_INT 1
6065: ST_TO_ADDR
// if p3 = 31 then
6066: LD_VAR 0 3
6070: PUSH
6071: LD_INT 31
6073: EQUAL
6074: IFFALSE 6084
// sFac := true ;
6076: LD_ADDR_EXP 71
6080: PUSH
6081: LD_INT 1
6083: ST_TO_ADDR
// if p3 = 32 then
6084: LD_VAR 0 3
6088: PUSH
6089: LD_INT 32
6091: EQUAL
6092: IFFALSE 6102
// sPower := true ;
6094: LD_ADDR_EXP 72
6098: PUSH
6099: LD_INT 1
6101: ST_TO_ADDR
// if p3 = 33 then
6102: LD_VAR 0 3
6106: PUSH
6107: LD_INT 33
6109: EQUAL
6110: IFFALSE 6120
// sRandom := true ;
6112: LD_ADDR_EXP 73
6116: PUSH
6117: LD_INT 1
6119: ST_TO_ADDR
// if p3 = 34 then
6120: LD_VAR 0 3
6124: PUSH
6125: LD_INT 34
6127: EQUAL
6128: IFFALSE 6138
// sShield := true ;
6130: LD_ADDR_EXP 74
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// if p3 = 35 then
6138: LD_VAR 0 3
6142: PUSH
6143: LD_INT 35
6145: EQUAL
6146: IFFALSE 6156
// sTime := true ;
6148: LD_ADDR_EXP 75
6152: PUSH
6153: LD_INT 1
6155: ST_TO_ADDR
// if p3 = 36 then
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 36
6163: EQUAL
6164: IFFALSE 6174
// sTools := true ;
6166: LD_ADDR_EXP 76
6170: PUSH
6171: LD_INT 1
6173: ST_TO_ADDR
// if p3 = 101 then
6174: LD_VAR 0 3
6178: PUSH
6179: LD_INT 101
6181: EQUAL
6182: IFFALSE 6192
// sSold := true ;
6184: LD_ADDR_EXP 41
6188: PUSH
6189: LD_INT 1
6191: ST_TO_ADDR
// if p3 = 102 then
6192: LD_VAR 0 3
6196: PUSH
6197: LD_INT 102
6199: EQUAL
6200: IFFALSE 6210
// sDiff := true ;
6202: LD_ADDR_EXP 42
6206: PUSH
6207: LD_INT 1
6209: ST_TO_ADDR
// if p3 = 103 then
6210: LD_VAR 0 3
6214: PUSH
6215: LD_INT 103
6217: EQUAL
6218: IFFALSE 6228
// sFog := true ;
6220: LD_ADDR_EXP 45
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// if p3 = 104 then
6228: LD_VAR 0 3
6232: PUSH
6233: LD_INT 104
6235: EQUAL
6236: IFFALSE 6246
// sReset := true ;
6238: LD_ADDR_EXP 46
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// if p3 = 105 then
6246: LD_VAR 0 3
6250: PUSH
6251: LD_INT 105
6253: EQUAL
6254: IFFALSE 6264
// sSun := true ;
6256: LD_ADDR_EXP 47
6260: PUSH
6261: LD_INT 1
6263: ST_TO_ADDR
// if p3 = 106 then
6264: LD_VAR 0 3
6268: PUSH
6269: LD_INT 106
6271: EQUAL
6272: IFFALSE 6282
// sTiger := true ;
6274: LD_ADDR_EXP 43
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// if p3 = 107 then
6282: LD_VAR 0 3
6286: PUSH
6287: LD_INT 107
6289: EQUAL
6290: IFFALSE 6300
// sBomb := true ;
6292: LD_ADDR_EXP 44
6296: PUSH
6297: LD_INT 1
6299: ST_TO_ADDR
// if p3 = 108 then
6300: LD_VAR 0 3
6304: PUSH
6305: LD_INT 108
6307: EQUAL
6308: IFFALSE 6318
// sWound := true ;
6310: LD_ADDR_EXP 52
6314: PUSH
6315: LD_INT 1
6317: ST_TO_ADDR
// if p3 = 109 then
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 109
6325: EQUAL
6326: IFFALSE 6336
// sBetray := true ;
6328: LD_ADDR_EXP 56
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// if p3 = 110 then
6336: LD_VAR 0 3
6340: PUSH
6341: LD_INT 110
6343: EQUAL
6344: IFFALSE 6354
// sContamin := true ;
6346: LD_ADDR_EXP 57
6350: PUSH
6351: LD_INT 1
6353: ST_TO_ADDR
// if p3 = 111 then
6354: LD_VAR 0 3
6358: PUSH
6359: LD_INT 111
6361: EQUAL
6362: IFFALSE 6372
// sOil := true ;
6364: LD_ADDR_EXP 59
6368: PUSH
6369: LD_INT 1
6371: ST_TO_ADDR
// if p3 = 112 then
6372: LD_VAR 0 3
6376: PUSH
6377: LD_INT 112
6379: EQUAL
6380: IFFALSE 6390
// sStu := true ;
6382: LD_ADDR_EXP 63
6386: PUSH
6387: LD_INT 1
6389: ST_TO_ADDR
// if p3 = 113 then
6390: LD_VAR 0 3
6394: PUSH
6395: LD_INT 113
6397: EQUAL
6398: IFFALSE 6408
// sBazooka := true ;
6400: LD_ADDR_EXP 66
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// if p3 = 114 then
6408: LD_VAR 0 3
6412: PUSH
6413: LD_INT 114
6415: EQUAL
6416: IFFALSE 6426
// sMortar := true ;
6418: LD_ADDR_EXP 67
6422: PUSH
6423: LD_INT 1
6425: ST_TO_ADDR
// if p3 = 115 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 115
6433: EQUAL
6434: IFFALSE 6444
// sRanger := true ;
6436: LD_ADDR_EXP 77
6440: PUSH
6441: LD_INT 1
6443: ST_TO_ADDR
// if p3 = 116 then
6444: LD_VAR 0 3
6448: PUSH
6449: LD_INT 116
6451: EQUAL
6452: IFFALSE 6462
// sComputer := true ;
6454: LD_ADDR_EXP 78
6458: PUSH
6459: LD_INT 1
6461: ST_TO_ADDR
// if p3 = 117 then
6462: LD_VAR 0 3
6466: PUSH
6467: LD_INT 117
6469: EQUAL
6470: IFFALSE 6480
// s30 := true ;
6472: LD_ADDR_EXP 79
6476: PUSH
6477: LD_INT 1
6479: ST_TO_ADDR
// if p3 = 118 then
6480: LD_VAR 0 3
6484: PUSH
6485: LD_INT 118
6487: EQUAL
6488: IFFALSE 6498
// s60 := true ;
6490: LD_ADDR_EXP 80
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// end ; if p2 = 101 then
6498: LD_VAR 0 2
6502: PUSH
6503: LD_INT 101
6505: EQUAL
6506: IFFALSE 6634
// begin case p3 of 1 :
6508: LD_VAR 0 3
6512: PUSH
6513: LD_INT 1
6515: DOUBLE
6516: EQUAL
6517: IFTRUE 6521
6519: GO 6528
6521: POP
// hHackUnlimitedResources ; 2 :
6522: CALL 18732 0 0
6526: GO 6634
6528: LD_INT 2
6530: DOUBLE
6531: EQUAL
6532: IFTRUE 6536
6534: GO 6543
6536: POP
// hHackSetLevel10 ; 3 :
6537: CALL 18865 0 0
6541: GO 6634
6543: LD_INT 3
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6551
6549: GO 6558
6551: POP
// hHackSetLevel10YourUnits ; 4 :
6552: CALL 18950 0 0
6556: GO 6634
6558: LD_INT 4
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6566
6564: GO 6573
6566: POP
// hHackInvincible ; 5 :
6567: CALL 19398 0 0
6571: GO 6634
6573: LD_INT 5
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6588
6581: POP
// hHackInvisible ; 6 :
6582: CALL 19509 0 0
6586: GO 6634
6588: LD_INT 6
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6603
6596: POP
// hHackChangeYourSide ; 7 :
6597: CALL 19566 0 0
6601: GO 6634
6603: LD_INT 7
6605: DOUBLE
6606: EQUAL
6607: IFTRUE 6611
6609: GO 6618
6611: POP
// hHackChangeUnitSide ; 8 :
6612: CALL 19608 0 0
6616: GO 6634
6618: LD_INT 8
6620: DOUBLE
6621: EQUAL
6622: IFTRUE 6626
6624: GO 6633
6626: POP
// hHackFog ; end ;
6627: CALL 19709 0 0
6631: GO 6634
6633: POP
// end ; end ;
6634: LD_VAR 0 7
6638: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6639: GO 6641
6641: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6642: LD_STRING initStreamRollete();
6644: PPUSH
6645: CALL_OW 559
// InitStreamMode ;
6649: CALL 6661 0 0
// DefineStreamItems ( false ) ;
6653: LD_INT 0
6655: PPUSH
6656: CALL 7125 0 1
// end ;
6660: END
// function InitStreamMode ; begin
6661: LD_INT 0
6663: PPUSH
// streamModeActive := false ;
6664: LD_ADDR_EXP 24
6668: PUSH
6669: LD_INT 0
6671: ST_TO_ADDR
// normalCounter := 36 ;
6672: LD_ADDR_EXP 25
6676: PUSH
6677: LD_INT 36
6679: ST_TO_ADDR
// hardcoreCounter := 18 ;
6680: LD_ADDR_EXP 26
6684: PUSH
6685: LD_INT 18
6687: ST_TO_ADDR
// sRocket := false ;
6688: LD_ADDR_EXP 29
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// sSpeed := false ;
6696: LD_ADDR_EXP 28
6700: PUSH
6701: LD_INT 0
6703: ST_TO_ADDR
// sEngine := false ;
6704: LD_ADDR_EXP 30
6708: PUSH
6709: LD_INT 0
6711: ST_TO_ADDR
// sSpec := false ;
6712: LD_ADDR_EXP 27
6716: PUSH
6717: LD_INT 0
6719: ST_TO_ADDR
// sLevel := false ;
6720: LD_ADDR_EXP 31
6724: PUSH
6725: LD_INT 0
6727: ST_TO_ADDR
// sArmoury := false ;
6728: LD_ADDR_EXP 32
6732: PUSH
6733: LD_INT 0
6735: ST_TO_ADDR
// sRadar := false ;
6736: LD_ADDR_EXP 33
6740: PUSH
6741: LD_INT 0
6743: ST_TO_ADDR
// sBunker := false ;
6744: LD_ADDR_EXP 34
6748: PUSH
6749: LD_INT 0
6751: ST_TO_ADDR
// sHack := false ;
6752: LD_ADDR_EXP 35
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// sFire := false ;
6760: LD_ADDR_EXP 36
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// sRefresh := false ;
6768: LD_ADDR_EXP 37
6772: PUSH
6773: LD_INT 0
6775: ST_TO_ADDR
// sExp := false ;
6776: LD_ADDR_EXP 38
6780: PUSH
6781: LD_INT 0
6783: ST_TO_ADDR
// sDepot := false ;
6784: LD_ADDR_EXP 39
6788: PUSH
6789: LD_INT 0
6791: ST_TO_ADDR
// sFlag := false ;
6792: LD_ADDR_EXP 40
6796: PUSH
6797: LD_INT 0
6799: ST_TO_ADDR
// sKamikadze := false ;
6800: LD_ADDR_EXP 48
6804: PUSH
6805: LD_INT 0
6807: ST_TO_ADDR
// sTroll := false ;
6808: LD_ADDR_EXP 49
6812: PUSH
6813: LD_INT 0
6815: ST_TO_ADDR
// sSlow := false ;
6816: LD_ADDR_EXP 50
6820: PUSH
6821: LD_INT 0
6823: ST_TO_ADDR
// sLack := false ;
6824: LD_ADDR_EXP 51
6828: PUSH
6829: LD_INT 0
6831: ST_TO_ADDR
// sTank := false ;
6832: LD_ADDR_EXP 53
6836: PUSH
6837: LD_INT 0
6839: ST_TO_ADDR
// sRemote := false ;
6840: LD_ADDR_EXP 54
6844: PUSH
6845: LD_INT 0
6847: ST_TO_ADDR
// sPowell := false ;
6848: LD_ADDR_EXP 55
6852: PUSH
6853: LD_INT 0
6855: ST_TO_ADDR
// sTeleport := false ;
6856: LD_ADDR_EXP 58
6860: PUSH
6861: LD_INT 0
6863: ST_TO_ADDR
// sOilTower := false ;
6864: LD_ADDR_EXP 60
6868: PUSH
6869: LD_INT 0
6871: ST_TO_ADDR
// sShovel := false ;
6872: LD_ADDR_EXP 61
6876: PUSH
6877: LD_INT 0
6879: ST_TO_ADDR
// sSheik := false ;
6880: LD_ADDR_EXP 62
6884: PUSH
6885: LD_INT 0
6887: ST_TO_ADDR
// sEarthquake := false ;
6888: LD_ADDR_EXP 64
6892: PUSH
6893: LD_INT 0
6895: ST_TO_ADDR
// sAI := false ;
6896: LD_ADDR_EXP 65
6900: PUSH
6901: LD_INT 0
6903: ST_TO_ADDR
// sCargo := false ;
6904: LD_ADDR_EXP 68
6908: PUSH
6909: LD_INT 0
6911: ST_TO_ADDR
// sDLaser := false ;
6912: LD_ADDR_EXP 69
6916: PUSH
6917: LD_INT 0
6919: ST_TO_ADDR
// sExchange := false ;
6920: LD_ADDR_EXP 70
6924: PUSH
6925: LD_INT 0
6927: ST_TO_ADDR
// sFac := false ;
6928: LD_ADDR_EXP 71
6932: PUSH
6933: LD_INT 0
6935: ST_TO_ADDR
// sPower := false ;
6936: LD_ADDR_EXP 72
6940: PUSH
6941: LD_INT 0
6943: ST_TO_ADDR
// sRandom := false ;
6944: LD_ADDR_EXP 73
6948: PUSH
6949: LD_INT 0
6951: ST_TO_ADDR
// sShield := false ;
6952: LD_ADDR_EXP 74
6956: PUSH
6957: LD_INT 0
6959: ST_TO_ADDR
// sTime := false ;
6960: LD_ADDR_EXP 75
6964: PUSH
6965: LD_INT 0
6967: ST_TO_ADDR
// sTools := false ;
6968: LD_ADDR_EXP 76
6972: PUSH
6973: LD_INT 0
6975: ST_TO_ADDR
// sSold := false ;
6976: LD_ADDR_EXP 41
6980: PUSH
6981: LD_INT 0
6983: ST_TO_ADDR
// sDiff := false ;
6984: LD_ADDR_EXP 42
6988: PUSH
6989: LD_INT 0
6991: ST_TO_ADDR
// sFog := false ;
6992: LD_ADDR_EXP 45
6996: PUSH
6997: LD_INT 0
6999: ST_TO_ADDR
// sReset := false ;
7000: LD_ADDR_EXP 46
7004: PUSH
7005: LD_INT 0
7007: ST_TO_ADDR
// sSun := false ;
7008: LD_ADDR_EXP 47
7012: PUSH
7013: LD_INT 0
7015: ST_TO_ADDR
// sTiger := false ;
7016: LD_ADDR_EXP 43
7020: PUSH
7021: LD_INT 0
7023: ST_TO_ADDR
// sBomb := false ;
7024: LD_ADDR_EXP 44
7028: PUSH
7029: LD_INT 0
7031: ST_TO_ADDR
// sWound := false ;
7032: LD_ADDR_EXP 52
7036: PUSH
7037: LD_INT 0
7039: ST_TO_ADDR
// sBetray := false ;
7040: LD_ADDR_EXP 56
7044: PUSH
7045: LD_INT 0
7047: ST_TO_ADDR
// sContamin := false ;
7048: LD_ADDR_EXP 57
7052: PUSH
7053: LD_INT 0
7055: ST_TO_ADDR
// sOil := false ;
7056: LD_ADDR_EXP 59
7060: PUSH
7061: LD_INT 0
7063: ST_TO_ADDR
// sStu := false ;
7064: LD_ADDR_EXP 63
7068: PUSH
7069: LD_INT 0
7071: ST_TO_ADDR
// sBazooka := false ;
7072: LD_ADDR_EXP 66
7076: PUSH
7077: LD_INT 0
7079: ST_TO_ADDR
// sMortar := false ;
7080: LD_ADDR_EXP 67
7084: PUSH
7085: LD_INT 0
7087: ST_TO_ADDR
// sRanger := false ;
7088: LD_ADDR_EXP 77
7092: PUSH
7093: LD_INT 0
7095: ST_TO_ADDR
// sComputer := false ;
7096: LD_ADDR_EXP 78
7100: PUSH
7101: LD_INT 0
7103: ST_TO_ADDR
// s30 := false ;
7104: LD_ADDR_EXP 79
7108: PUSH
7109: LD_INT 0
7111: ST_TO_ADDR
// s60 := false ;
7112: LD_ADDR_EXP 80
7116: PUSH
7117: LD_INT 0
7119: ST_TO_ADDR
// end ;
7120: LD_VAR 0 1
7124: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7125: LD_INT 0
7127: PPUSH
7128: PPUSH
7129: PPUSH
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// result := [ ] ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: EMPTY
7140: ST_TO_ADDR
// if campaign_id = 1 then
7141: LD_OWVAR 69
7145: PUSH
7146: LD_INT 1
7148: EQUAL
7149: IFFALSE 10315
// begin case mission_number of 1 :
7151: LD_OWVAR 70
7155: PUSH
7156: LD_INT 1
7158: DOUBLE
7159: EQUAL
7160: IFTRUE 7164
7162: GO 7240
7164: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 4
7175: PUSH
7176: LD_INT 11
7178: PUSH
7179: LD_INT 12
7181: PUSH
7182: LD_INT 15
7184: PUSH
7185: LD_INT 16
7187: PUSH
7188: LD_INT 22
7190: PUSH
7191: LD_INT 23
7193: PUSH
7194: LD_INT 26
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 101
7210: PUSH
7211: LD_INT 102
7213: PUSH
7214: LD_INT 106
7216: PUSH
7217: LD_INT 116
7219: PUSH
7220: LD_INT 117
7222: PUSH
7223: LD_INT 118
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: ST_TO_ADDR
7238: GO 10313
7240: LD_INT 2
7242: DOUBLE
7243: EQUAL
7244: IFTRUE 7248
7246: GO 7332
7248: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7249: LD_ADDR_VAR 0 2
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: LD_INT 4
7259: PUSH
7260: LD_INT 11
7262: PUSH
7263: LD_INT 12
7265: PUSH
7266: LD_INT 15
7268: PUSH
7269: LD_INT 16
7271: PUSH
7272: LD_INT 22
7274: PUSH
7275: LD_INT 23
7277: PUSH
7278: LD_INT 26
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 101
7294: PUSH
7295: LD_INT 102
7297: PUSH
7298: LD_INT 105
7300: PUSH
7301: LD_INT 106
7303: PUSH
7304: LD_INT 108
7306: PUSH
7307: LD_INT 116
7309: PUSH
7310: LD_INT 117
7312: PUSH
7313: LD_INT 118
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: ST_TO_ADDR
7330: GO 10313
7332: LD_INT 3
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7428
7340: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 2
7348: PUSH
7349: LD_INT 4
7351: PUSH
7352: LD_INT 5
7354: PUSH
7355: LD_INT 11
7357: PUSH
7358: LD_INT 12
7360: PUSH
7361: LD_INT 15
7363: PUSH
7364: LD_INT 16
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: LD_INT 26
7372: PUSH
7373: LD_INT 36
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 101
7390: PUSH
7391: LD_INT 102
7393: PUSH
7394: LD_INT 105
7396: PUSH
7397: LD_INT 106
7399: PUSH
7400: LD_INT 108
7402: PUSH
7403: LD_INT 116
7405: PUSH
7406: LD_INT 117
7408: PUSH
7409: LD_INT 118
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: ST_TO_ADDR
7426: GO 10313
7428: LD_INT 4
7430: DOUBLE
7431: EQUAL
7432: IFTRUE 7436
7434: GO 7532
7436: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7437: LD_ADDR_VAR 0 2
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 4
7447: PUSH
7448: LD_INT 5
7450: PUSH
7451: LD_INT 8
7453: PUSH
7454: LD_INT 11
7456: PUSH
7457: LD_INT 12
7459: PUSH
7460: LD_INT 15
7462: PUSH
7463: LD_INT 16
7465: PUSH
7466: LD_INT 22
7468: PUSH
7469: LD_INT 23
7471: PUSH
7472: LD_INT 26
7474: PUSH
7475: LD_INT 36
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 101
7494: PUSH
7495: LD_INT 102
7497: PUSH
7498: LD_INT 105
7500: PUSH
7501: LD_INT 106
7503: PUSH
7504: LD_INT 108
7506: PUSH
7507: LD_INT 116
7509: PUSH
7510: LD_INT 117
7512: PUSH
7513: LD_INT 118
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
7530: GO 10313
7532: LD_INT 5
7534: DOUBLE
7535: EQUAL
7536: IFTRUE 7540
7538: GO 7652
7540: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_INT 2
7548: PUSH
7549: LD_INT 4
7551: PUSH
7552: LD_INT 5
7554: PUSH
7555: LD_INT 6
7557: PUSH
7558: LD_INT 8
7560: PUSH
7561: LD_INT 11
7563: PUSH
7564: LD_INT 12
7566: PUSH
7567: LD_INT 15
7569: PUSH
7570: LD_INT 16
7572: PUSH
7573: LD_INT 22
7575: PUSH
7576: LD_INT 23
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 26
7584: PUSH
7585: LD_INT 36
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 101
7606: PUSH
7607: LD_INT 102
7609: PUSH
7610: LD_INT 105
7612: PUSH
7613: LD_INT 106
7615: PUSH
7616: LD_INT 108
7618: PUSH
7619: LD_INT 109
7621: PUSH
7622: LD_INT 112
7624: PUSH
7625: LD_INT 116
7627: PUSH
7628: LD_INT 117
7630: PUSH
7631: LD_INT 118
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: ST_TO_ADDR
7650: GO 10313
7652: LD_INT 6
7654: DOUBLE
7655: EQUAL
7656: IFTRUE 7660
7658: GO 7792
7660: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7661: LD_ADDR_VAR 0 2
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: LD_INT 4
7671: PUSH
7672: LD_INT 5
7674: PUSH
7675: LD_INT 6
7677: PUSH
7678: LD_INT 8
7680: PUSH
7681: LD_INT 11
7683: PUSH
7684: LD_INT 12
7686: PUSH
7687: LD_INT 15
7689: PUSH
7690: LD_INT 16
7692: PUSH
7693: LD_INT 20
7695: PUSH
7696: LD_INT 21
7698: PUSH
7699: LD_INT 22
7701: PUSH
7702: LD_INT 23
7704: PUSH
7705: LD_INT 25
7707: PUSH
7708: LD_INT 26
7710: PUSH
7711: LD_INT 30
7713: PUSH
7714: LD_INT 31
7716: PUSH
7717: LD_INT 32
7719: PUSH
7720: LD_INT 36
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 101
7746: PUSH
7747: LD_INT 102
7749: PUSH
7750: LD_INT 105
7752: PUSH
7753: LD_INT 106
7755: PUSH
7756: LD_INT 108
7758: PUSH
7759: LD_INT 109
7761: PUSH
7762: LD_INT 112
7764: PUSH
7765: LD_INT 116
7767: PUSH
7768: LD_INT 117
7770: PUSH
7771: LD_INT 118
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: ST_TO_ADDR
7790: GO 10313
7792: LD_INT 7
7794: DOUBLE
7795: EQUAL
7796: IFTRUE 7800
7798: GO 7912
7800: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7801: LD_ADDR_VAR 0 2
7805: PUSH
7806: LD_INT 2
7808: PUSH
7809: LD_INT 4
7811: PUSH
7812: LD_INT 5
7814: PUSH
7815: LD_INT 7
7817: PUSH
7818: LD_INT 11
7820: PUSH
7821: LD_INT 12
7823: PUSH
7824: LD_INT 15
7826: PUSH
7827: LD_INT 16
7829: PUSH
7830: LD_INT 20
7832: PUSH
7833: LD_INT 21
7835: PUSH
7836: LD_INT 22
7838: PUSH
7839: LD_INT 23
7841: PUSH
7842: LD_INT 25
7844: PUSH
7845: LD_INT 26
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 101
7866: PUSH
7867: LD_INT 102
7869: PUSH
7870: LD_INT 103
7872: PUSH
7873: LD_INT 105
7875: PUSH
7876: LD_INT 106
7878: PUSH
7879: LD_INT 108
7881: PUSH
7882: LD_INT 112
7884: PUSH
7885: LD_INT 116
7887: PUSH
7888: LD_INT 117
7890: PUSH
7891: LD_INT 118
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: ST_TO_ADDR
7910: GO 10313
7912: LD_INT 8
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 8060
7920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 4
7931: PUSH
7932: LD_INT 5
7934: PUSH
7935: LD_INT 6
7937: PUSH
7938: LD_INT 7
7940: PUSH
7941: LD_INT 8
7943: PUSH
7944: LD_INT 11
7946: PUSH
7947: LD_INT 12
7949: PUSH
7950: LD_INT 15
7952: PUSH
7953: LD_INT 16
7955: PUSH
7956: LD_INT 20
7958: PUSH
7959: LD_INT 21
7961: PUSH
7962: LD_INT 22
7964: PUSH
7965: LD_INT 23
7967: PUSH
7968: LD_INT 25
7970: PUSH
7971: LD_INT 26
7973: PUSH
7974: LD_INT 30
7976: PUSH
7977: LD_INT 31
7979: PUSH
7980: LD_INT 32
7982: PUSH
7983: LD_INT 36
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 101
8010: PUSH
8011: LD_INT 102
8013: PUSH
8014: LD_INT 103
8016: PUSH
8017: LD_INT 105
8019: PUSH
8020: LD_INT 106
8022: PUSH
8023: LD_INT 108
8025: PUSH
8026: LD_INT 109
8028: PUSH
8029: LD_INT 112
8031: PUSH
8032: LD_INT 116
8034: PUSH
8035: LD_INT 117
8037: PUSH
8038: LD_INT 118
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: ST_TO_ADDR
8058: GO 10313
8060: LD_INT 9
8062: DOUBLE
8063: EQUAL
8064: IFTRUE 8068
8066: GO 8216
8068: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8069: LD_ADDR_VAR 0 2
8073: PUSH
8074: LD_INT 2
8076: PUSH
8077: LD_INT 4
8079: PUSH
8080: LD_INT 5
8082: PUSH
8083: LD_INT 6
8085: PUSH
8086: LD_INT 7
8088: PUSH
8089: LD_INT 8
8091: PUSH
8092: LD_INT 11
8094: PUSH
8095: LD_INT 12
8097: PUSH
8098: LD_INT 15
8100: PUSH
8101: LD_INT 16
8103: PUSH
8104: LD_INT 20
8106: PUSH
8107: LD_INT 21
8109: PUSH
8110: LD_INT 22
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 25
8118: PUSH
8119: LD_INT 26
8121: PUSH
8122: LD_INT 28
8124: PUSH
8125: LD_INT 30
8127: PUSH
8128: LD_INT 31
8130: PUSH
8131: LD_INT 32
8133: PUSH
8134: LD_INT 36
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 101
8162: PUSH
8163: LD_INT 102
8165: PUSH
8166: LD_INT 103
8168: PUSH
8169: LD_INT 105
8171: PUSH
8172: LD_INT 106
8174: PUSH
8175: LD_INT 108
8177: PUSH
8178: LD_INT 109
8180: PUSH
8181: LD_INT 112
8183: PUSH
8184: LD_INT 114
8186: PUSH
8187: LD_INT 116
8189: PUSH
8190: LD_INT 117
8192: PUSH
8193: LD_INT 118
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: ST_TO_ADDR
8214: GO 10313
8216: LD_INT 10
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8420
8224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: LD_INT 5
8238: PUSH
8239: LD_INT 6
8241: PUSH
8242: LD_INT 7
8244: PUSH
8245: LD_INT 8
8247: PUSH
8248: LD_INT 9
8250: PUSH
8251: LD_INT 10
8253: PUSH
8254: LD_INT 11
8256: PUSH
8257: LD_INT 12
8259: PUSH
8260: LD_INT 13
8262: PUSH
8263: LD_INT 14
8265: PUSH
8266: LD_INT 15
8268: PUSH
8269: LD_INT 16
8271: PUSH
8272: LD_INT 17
8274: PUSH
8275: LD_INT 18
8277: PUSH
8278: LD_INT 19
8280: PUSH
8281: LD_INT 20
8283: PUSH
8284: LD_INT 21
8286: PUSH
8287: LD_INT 22
8289: PUSH
8290: LD_INT 23
8292: PUSH
8293: LD_INT 24
8295: PUSH
8296: LD_INT 25
8298: PUSH
8299: LD_INT 26
8301: PUSH
8302: LD_INT 28
8304: PUSH
8305: LD_INT 30
8307: PUSH
8308: LD_INT 31
8310: PUSH
8311: LD_INT 32
8313: PUSH
8314: LD_INT 36
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 101
8350: PUSH
8351: LD_INT 102
8353: PUSH
8354: LD_INT 103
8356: PUSH
8357: LD_INT 104
8359: PUSH
8360: LD_INT 105
8362: PUSH
8363: LD_INT 106
8365: PUSH
8366: LD_INT 107
8368: PUSH
8369: LD_INT 108
8371: PUSH
8372: LD_INT 109
8374: PUSH
8375: LD_INT 110
8377: PUSH
8378: LD_INT 111
8380: PUSH
8381: LD_INT 112
8383: PUSH
8384: LD_INT 114
8386: PUSH
8387: LD_INT 116
8389: PUSH
8390: LD_INT 117
8392: PUSH
8393: LD_INT 118
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: ST_TO_ADDR
8418: GO 10313
8420: LD_INT 11
8422: DOUBLE
8423: EQUAL
8424: IFTRUE 8428
8426: GO 8632
8428: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8429: LD_ADDR_VAR 0 2
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: LD_INT 3
8439: PUSH
8440: LD_INT 4
8442: PUSH
8443: LD_INT 5
8445: PUSH
8446: LD_INT 6
8448: PUSH
8449: LD_INT 7
8451: PUSH
8452: LD_INT 8
8454: PUSH
8455: LD_INT 9
8457: PUSH
8458: LD_INT 10
8460: PUSH
8461: LD_INT 11
8463: PUSH
8464: LD_INT 12
8466: PUSH
8467: LD_INT 13
8469: PUSH
8470: LD_INT 14
8472: PUSH
8473: LD_INT 15
8475: PUSH
8476: LD_INT 16
8478: PUSH
8479: LD_INT 17
8481: PUSH
8482: LD_INT 18
8484: PUSH
8485: LD_INT 19
8487: PUSH
8488: LD_INT 20
8490: PUSH
8491: LD_INT 21
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 23
8499: PUSH
8500: LD_INT 24
8502: PUSH
8503: LD_INT 25
8505: PUSH
8506: LD_INT 26
8508: PUSH
8509: LD_INT 28
8511: PUSH
8512: LD_INT 30
8514: PUSH
8515: LD_INT 31
8517: PUSH
8518: LD_INT 32
8520: PUSH
8521: LD_INT 34
8523: PUSH
8524: LD_INT 36
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 101
8562: PUSH
8563: LD_INT 102
8565: PUSH
8566: LD_INT 103
8568: PUSH
8569: LD_INT 104
8571: PUSH
8572: LD_INT 105
8574: PUSH
8575: LD_INT 106
8577: PUSH
8578: LD_INT 107
8580: PUSH
8581: LD_INT 108
8583: PUSH
8584: LD_INT 109
8586: PUSH
8587: LD_INT 110
8589: PUSH
8590: LD_INT 111
8592: PUSH
8593: LD_INT 112
8595: PUSH
8596: LD_INT 114
8598: PUSH
8599: LD_INT 116
8601: PUSH
8602: LD_INT 117
8604: PUSH
8605: LD_INT 118
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: ST_TO_ADDR
8630: GO 10313
8632: LD_INT 12
8634: DOUBLE
8635: EQUAL
8636: IFTRUE 8640
8638: GO 8860
8640: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8641: LD_ADDR_VAR 0 2
8645: PUSH
8646: LD_INT 1
8648: PUSH
8649: LD_INT 2
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: LD_INT 4
8657: PUSH
8658: LD_INT 5
8660: PUSH
8661: LD_INT 6
8663: PUSH
8664: LD_INT 7
8666: PUSH
8667: LD_INT 8
8669: PUSH
8670: LD_INT 9
8672: PUSH
8673: LD_INT 10
8675: PUSH
8676: LD_INT 11
8678: PUSH
8679: LD_INT 12
8681: PUSH
8682: LD_INT 13
8684: PUSH
8685: LD_INT 14
8687: PUSH
8688: LD_INT 15
8690: PUSH
8691: LD_INT 16
8693: PUSH
8694: LD_INT 17
8696: PUSH
8697: LD_INT 18
8699: PUSH
8700: LD_INT 19
8702: PUSH
8703: LD_INT 20
8705: PUSH
8706: LD_INT 21
8708: PUSH
8709: LD_INT 22
8711: PUSH
8712: LD_INT 23
8714: PUSH
8715: LD_INT 24
8717: PUSH
8718: LD_INT 25
8720: PUSH
8721: LD_INT 26
8723: PUSH
8724: LD_INT 27
8726: PUSH
8727: LD_INT 28
8729: PUSH
8730: LD_INT 30
8732: PUSH
8733: LD_INT 31
8735: PUSH
8736: LD_INT 32
8738: PUSH
8739: LD_INT 33
8741: PUSH
8742: LD_INT 34
8744: PUSH
8745: LD_INT 36
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 101
8786: PUSH
8787: LD_INT 102
8789: PUSH
8790: LD_INT 103
8792: PUSH
8793: LD_INT 104
8795: PUSH
8796: LD_INT 105
8798: PUSH
8799: LD_INT 106
8801: PUSH
8802: LD_INT 107
8804: PUSH
8805: LD_INT 108
8807: PUSH
8808: LD_INT 109
8810: PUSH
8811: LD_INT 110
8813: PUSH
8814: LD_INT 111
8816: PUSH
8817: LD_INT 112
8819: PUSH
8820: LD_INT 113
8822: PUSH
8823: LD_INT 114
8825: PUSH
8826: LD_INT 116
8828: PUSH
8829: LD_INT 117
8831: PUSH
8832: LD_INT 118
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: ST_TO_ADDR
8858: GO 10313
8860: LD_INT 13
8862: DOUBLE
8863: EQUAL
8864: IFTRUE 8868
8866: GO 9076
8868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8869: LD_ADDR_VAR 0 2
8873: PUSH
8874: LD_INT 1
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: LD_INT 3
8882: PUSH
8883: LD_INT 4
8885: PUSH
8886: LD_INT 5
8888: PUSH
8889: LD_INT 8
8891: PUSH
8892: LD_INT 9
8894: PUSH
8895: LD_INT 10
8897: PUSH
8898: LD_INT 11
8900: PUSH
8901: LD_INT 12
8903: PUSH
8904: LD_INT 14
8906: PUSH
8907: LD_INT 15
8909: PUSH
8910: LD_INT 16
8912: PUSH
8913: LD_INT 17
8915: PUSH
8916: LD_INT 18
8918: PUSH
8919: LD_INT 19
8921: PUSH
8922: LD_INT 20
8924: PUSH
8925: LD_INT 21
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_INT 23
8933: PUSH
8934: LD_INT 24
8936: PUSH
8937: LD_INT 25
8939: PUSH
8940: LD_INT 26
8942: PUSH
8943: LD_INT 27
8945: PUSH
8946: LD_INT 28
8948: PUSH
8949: LD_INT 30
8951: PUSH
8952: LD_INT 31
8954: PUSH
8955: LD_INT 32
8957: PUSH
8958: LD_INT 33
8960: PUSH
8961: LD_INT 34
8963: PUSH
8964: LD_INT 36
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 101
9002: PUSH
9003: LD_INT 102
9005: PUSH
9006: LD_INT 103
9008: PUSH
9009: LD_INT 104
9011: PUSH
9012: LD_INT 105
9014: PUSH
9015: LD_INT 106
9017: PUSH
9018: LD_INT 107
9020: PUSH
9021: LD_INT 108
9023: PUSH
9024: LD_INT 109
9026: PUSH
9027: LD_INT 110
9029: PUSH
9030: LD_INT 111
9032: PUSH
9033: LD_INT 112
9035: PUSH
9036: LD_INT 113
9038: PUSH
9039: LD_INT 114
9041: PUSH
9042: LD_INT 116
9044: PUSH
9045: LD_INT 117
9047: PUSH
9048: LD_INT 118
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: ST_TO_ADDR
9074: GO 10313
9076: LD_INT 14
9078: DOUBLE
9079: EQUAL
9080: IFTRUE 9084
9082: GO 9308
9084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9085: LD_ADDR_VAR 0 2
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 4
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 6
9107: PUSH
9108: LD_INT 7
9110: PUSH
9111: LD_INT 8
9113: PUSH
9114: LD_INT 9
9116: PUSH
9117: LD_INT 10
9119: PUSH
9120: LD_INT 11
9122: PUSH
9123: LD_INT 12
9125: PUSH
9126: LD_INT 13
9128: PUSH
9129: LD_INT 14
9131: PUSH
9132: LD_INT 15
9134: PUSH
9135: LD_INT 16
9137: PUSH
9138: LD_INT 17
9140: PUSH
9141: LD_INT 18
9143: PUSH
9144: LD_INT 19
9146: PUSH
9147: LD_INT 20
9149: PUSH
9150: LD_INT 21
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 23
9158: PUSH
9159: LD_INT 24
9161: PUSH
9162: LD_INT 25
9164: PUSH
9165: LD_INT 26
9167: PUSH
9168: LD_INT 27
9170: PUSH
9171: LD_INT 28
9173: PUSH
9174: LD_INT 29
9176: PUSH
9177: LD_INT 30
9179: PUSH
9180: LD_INT 31
9182: PUSH
9183: LD_INT 32
9185: PUSH
9186: LD_INT 33
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 36
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 101
9234: PUSH
9235: LD_INT 102
9237: PUSH
9238: LD_INT 103
9240: PUSH
9241: LD_INT 104
9243: PUSH
9244: LD_INT 105
9246: PUSH
9247: LD_INT 106
9249: PUSH
9250: LD_INT 107
9252: PUSH
9253: LD_INT 108
9255: PUSH
9256: LD_INT 109
9258: PUSH
9259: LD_INT 110
9261: PUSH
9262: LD_INT 111
9264: PUSH
9265: LD_INT 112
9267: PUSH
9268: LD_INT 113
9270: PUSH
9271: LD_INT 114
9273: PUSH
9274: LD_INT 116
9276: PUSH
9277: LD_INT 117
9279: PUSH
9280: LD_INT 118
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: ST_TO_ADDR
9306: GO 10313
9308: LD_INT 15
9310: DOUBLE
9311: EQUAL
9312: IFTRUE 9316
9314: GO 9540
9316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9317: LD_ADDR_VAR 0 2
9321: PUSH
9322: LD_INT 1
9324: PUSH
9325: LD_INT 2
9327: PUSH
9328: LD_INT 3
9330: PUSH
9331: LD_INT 4
9333: PUSH
9334: LD_INT 5
9336: PUSH
9337: LD_INT 6
9339: PUSH
9340: LD_INT 7
9342: PUSH
9343: LD_INT 8
9345: PUSH
9346: LD_INT 9
9348: PUSH
9349: LD_INT 10
9351: PUSH
9352: LD_INT 11
9354: PUSH
9355: LD_INT 12
9357: PUSH
9358: LD_INT 13
9360: PUSH
9361: LD_INT 14
9363: PUSH
9364: LD_INT 15
9366: PUSH
9367: LD_INT 16
9369: PUSH
9370: LD_INT 17
9372: PUSH
9373: LD_INT 18
9375: PUSH
9376: LD_INT 19
9378: PUSH
9379: LD_INT 20
9381: PUSH
9382: LD_INT 21
9384: PUSH
9385: LD_INT 22
9387: PUSH
9388: LD_INT 23
9390: PUSH
9391: LD_INT 24
9393: PUSH
9394: LD_INT 25
9396: PUSH
9397: LD_INT 26
9399: PUSH
9400: LD_INT 27
9402: PUSH
9403: LD_INT 28
9405: PUSH
9406: LD_INT 29
9408: PUSH
9409: LD_INT 30
9411: PUSH
9412: LD_INT 31
9414: PUSH
9415: LD_INT 32
9417: PUSH
9418: LD_INT 33
9420: PUSH
9421: LD_INT 34
9423: PUSH
9424: LD_INT 36
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 101
9466: PUSH
9467: LD_INT 102
9469: PUSH
9470: LD_INT 103
9472: PUSH
9473: LD_INT 104
9475: PUSH
9476: LD_INT 105
9478: PUSH
9479: LD_INT 106
9481: PUSH
9482: LD_INT 107
9484: PUSH
9485: LD_INT 108
9487: PUSH
9488: LD_INT 109
9490: PUSH
9491: LD_INT 110
9493: PUSH
9494: LD_INT 111
9496: PUSH
9497: LD_INT 112
9499: PUSH
9500: LD_INT 113
9502: PUSH
9503: LD_INT 114
9505: PUSH
9506: LD_INT 116
9508: PUSH
9509: LD_INT 117
9511: PUSH
9512: LD_INT 118
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: ST_TO_ADDR
9538: GO 10313
9540: LD_INT 16
9542: DOUBLE
9543: EQUAL
9544: IFTRUE 9548
9546: GO 9684
9548: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9549: LD_ADDR_VAR 0 2
9553: PUSH
9554: LD_INT 2
9556: PUSH
9557: LD_INT 4
9559: PUSH
9560: LD_INT 5
9562: PUSH
9563: LD_INT 7
9565: PUSH
9566: LD_INT 11
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: LD_INT 15
9574: PUSH
9575: LD_INT 16
9577: PUSH
9578: LD_INT 20
9580: PUSH
9581: LD_INT 21
9583: PUSH
9584: LD_INT 22
9586: PUSH
9587: LD_INT 23
9589: PUSH
9590: LD_INT 25
9592: PUSH
9593: LD_INT 26
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 31
9601: PUSH
9602: LD_INT 32
9604: PUSH
9605: LD_INT 33
9607: PUSH
9608: LD_INT 34
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 101
9634: PUSH
9635: LD_INT 102
9637: PUSH
9638: LD_INT 103
9640: PUSH
9641: LD_INT 106
9643: PUSH
9644: LD_INT 108
9646: PUSH
9647: LD_INT 112
9649: PUSH
9650: LD_INT 113
9652: PUSH
9653: LD_INT 114
9655: PUSH
9656: LD_INT 116
9658: PUSH
9659: LD_INT 117
9661: PUSH
9662: LD_INT 118
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: ST_TO_ADDR
9682: GO 10313
9684: LD_INT 17
9686: DOUBLE
9687: EQUAL
9688: IFTRUE 9692
9690: GO 9916
9692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9693: LD_ADDR_VAR 0 2
9697: PUSH
9698: LD_INT 1
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: LD_INT 3
9706: PUSH
9707: LD_INT 4
9709: PUSH
9710: LD_INT 5
9712: PUSH
9713: LD_INT 6
9715: PUSH
9716: LD_INT 7
9718: PUSH
9719: LD_INT 8
9721: PUSH
9722: LD_INT 9
9724: PUSH
9725: LD_INT 10
9727: PUSH
9728: LD_INT 11
9730: PUSH
9731: LD_INT 12
9733: PUSH
9734: LD_INT 13
9736: PUSH
9737: LD_INT 14
9739: PUSH
9740: LD_INT 15
9742: PUSH
9743: LD_INT 16
9745: PUSH
9746: LD_INT 17
9748: PUSH
9749: LD_INT 18
9751: PUSH
9752: LD_INT 19
9754: PUSH
9755: LD_INT 20
9757: PUSH
9758: LD_INT 21
9760: PUSH
9761: LD_INT 22
9763: PUSH
9764: LD_INT 23
9766: PUSH
9767: LD_INT 24
9769: PUSH
9770: LD_INT 25
9772: PUSH
9773: LD_INT 26
9775: PUSH
9776: LD_INT 27
9778: PUSH
9779: LD_INT 28
9781: PUSH
9782: LD_INT 29
9784: PUSH
9785: LD_INT 30
9787: PUSH
9788: LD_INT 31
9790: PUSH
9791: LD_INT 32
9793: PUSH
9794: LD_INT 33
9796: PUSH
9797: LD_INT 34
9799: PUSH
9800: LD_INT 36
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 101
9842: PUSH
9843: LD_INT 102
9845: PUSH
9846: LD_INT 103
9848: PUSH
9849: LD_INT 104
9851: PUSH
9852: LD_INT 105
9854: PUSH
9855: LD_INT 106
9857: PUSH
9858: LD_INT 107
9860: PUSH
9861: LD_INT 108
9863: PUSH
9864: LD_INT 109
9866: PUSH
9867: LD_INT 110
9869: PUSH
9870: LD_INT 111
9872: PUSH
9873: LD_INT 112
9875: PUSH
9876: LD_INT 113
9878: PUSH
9879: LD_INT 114
9881: PUSH
9882: LD_INT 116
9884: PUSH
9885: LD_INT 117
9887: PUSH
9888: LD_INT 118
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: ST_TO_ADDR
9914: GO 10313
9916: LD_INT 18
9918: DOUBLE
9919: EQUAL
9920: IFTRUE 9924
9922: GO 10072
9924: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: LD_INT 4
9935: PUSH
9936: LD_INT 5
9938: PUSH
9939: LD_INT 7
9941: PUSH
9942: LD_INT 11
9944: PUSH
9945: LD_INT 12
9947: PUSH
9948: LD_INT 15
9950: PUSH
9951: LD_INT 16
9953: PUSH
9954: LD_INT 20
9956: PUSH
9957: LD_INT 21
9959: PUSH
9960: LD_INT 22
9962: PUSH
9963: LD_INT 23
9965: PUSH
9966: LD_INT 25
9968: PUSH
9969: LD_INT 26
9971: PUSH
9972: LD_INT 30
9974: PUSH
9975: LD_INT 31
9977: PUSH
9978: LD_INT 32
9980: PUSH
9981: LD_INT 33
9983: PUSH
9984: LD_INT 34
9986: PUSH
9987: LD_INT 35
9989: PUSH
9990: LD_INT 36
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 101
10018: PUSH
10019: LD_INT 102
10021: PUSH
10022: LD_INT 103
10024: PUSH
10025: LD_INT 106
10027: PUSH
10028: LD_INT 108
10030: PUSH
10031: LD_INT 112
10033: PUSH
10034: LD_INT 113
10036: PUSH
10037: LD_INT 114
10039: PUSH
10040: LD_INT 115
10042: PUSH
10043: LD_INT 116
10045: PUSH
10046: LD_INT 117
10048: PUSH
10049: LD_INT 118
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10313
10072: LD_INT 19
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10312
10080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 1
10088: PUSH
10089: LD_INT 2
10091: PUSH
10092: LD_INT 3
10094: PUSH
10095: LD_INT 4
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: LD_INT 6
10103: PUSH
10104: LD_INT 7
10106: PUSH
10107: LD_INT 8
10109: PUSH
10110: LD_INT 9
10112: PUSH
10113: LD_INT 10
10115: PUSH
10116: LD_INT 11
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: LD_INT 13
10124: PUSH
10125: LD_INT 14
10127: PUSH
10128: LD_INT 15
10130: PUSH
10131: LD_INT 16
10133: PUSH
10134: LD_INT 17
10136: PUSH
10137: LD_INT 18
10139: PUSH
10140: LD_INT 19
10142: PUSH
10143: LD_INT 20
10145: PUSH
10146: LD_INT 21
10148: PUSH
10149: LD_INT 22
10151: PUSH
10152: LD_INT 23
10154: PUSH
10155: LD_INT 24
10157: PUSH
10158: LD_INT 25
10160: PUSH
10161: LD_INT 26
10163: PUSH
10164: LD_INT 27
10166: PUSH
10167: LD_INT 28
10169: PUSH
10170: LD_INT 29
10172: PUSH
10173: LD_INT 30
10175: PUSH
10176: LD_INT 31
10178: PUSH
10179: LD_INT 32
10181: PUSH
10182: LD_INT 33
10184: PUSH
10185: LD_INT 34
10187: PUSH
10188: LD_INT 35
10190: PUSH
10191: LD_INT 36
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 101
10234: PUSH
10235: LD_INT 102
10237: PUSH
10238: LD_INT 103
10240: PUSH
10241: LD_INT 104
10243: PUSH
10244: LD_INT 105
10246: PUSH
10247: LD_INT 106
10249: PUSH
10250: LD_INT 107
10252: PUSH
10253: LD_INT 108
10255: PUSH
10256: LD_INT 109
10258: PUSH
10259: LD_INT 110
10261: PUSH
10262: LD_INT 111
10264: PUSH
10265: LD_INT 112
10267: PUSH
10268: LD_INT 113
10270: PUSH
10271: LD_INT 114
10273: PUSH
10274: LD_INT 115
10276: PUSH
10277: LD_INT 116
10279: PUSH
10280: LD_INT 117
10282: PUSH
10283: LD_INT 118
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: ST_TO_ADDR
10310: GO 10313
10312: POP
// end else
10313: GO 10544
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10315: LD_ADDR_VAR 0 2
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: LD_INT 6
10337: PUSH
10338: LD_INT 7
10340: PUSH
10341: LD_INT 8
10343: PUSH
10344: LD_INT 9
10346: PUSH
10347: LD_INT 10
10349: PUSH
10350: LD_INT 11
10352: PUSH
10353: LD_INT 12
10355: PUSH
10356: LD_INT 13
10358: PUSH
10359: LD_INT 14
10361: PUSH
10362: LD_INT 15
10364: PUSH
10365: LD_INT 16
10367: PUSH
10368: LD_INT 17
10370: PUSH
10371: LD_INT 18
10373: PUSH
10374: LD_INT 19
10376: PUSH
10377: LD_INT 20
10379: PUSH
10380: LD_INT 21
10382: PUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 23
10388: PUSH
10389: LD_INT 24
10391: PUSH
10392: LD_INT 25
10394: PUSH
10395: LD_INT 26
10397: PUSH
10398: LD_INT 27
10400: PUSH
10401: LD_INT 28
10403: PUSH
10404: LD_INT 29
10406: PUSH
10407: LD_INT 30
10409: PUSH
10410: LD_INT 31
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: LD_INT 33
10418: PUSH
10419: LD_INT 34
10421: PUSH
10422: LD_INT 35
10424: PUSH
10425: LD_INT 36
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 101
10468: PUSH
10469: LD_INT 102
10471: PUSH
10472: LD_INT 103
10474: PUSH
10475: LD_INT 104
10477: PUSH
10478: LD_INT 105
10480: PUSH
10481: LD_INT 106
10483: PUSH
10484: LD_INT 107
10486: PUSH
10487: LD_INT 108
10489: PUSH
10490: LD_INT 109
10492: PUSH
10493: LD_INT 110
10495: PUSH
10496: LD_INT 111
10498: PUSH
10499: LD_INT 112
10501: PUSH
10502: LD_INT 113
10504: PUSH
10505: LD_INT 114
10507: PUSH
10508: LD_INT 115
10510: PUSH
10511: LD_INT 116
10513: PUSH
10514: LD_INT 117
10516: PUSH
10517: LD_INT 118
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: ST_TO_ADDR
// if result then
10544: LD_VAR 0 2
10548: IFFALSE 11334
// begin normal :=  ;
10550: LD_ADDR_VAR 0 5
10554: PUSH
10555: LD_STRING 
10557: ST_TO_ADDR
// hardcore :=  ;
10558: LD_ADDR_VAR 0 6
10562: PUSH
10563: LD_STRING 
10565: ST_TO_ADDR
// active :=  ;
10566: LD_ADDR_VAR 0 7
10570: PUSH
10571: LD_STRING 
10573: ST_TO_ADDR
// for i = 1 to normalCounter do
10574: LD_ADDR_VAR 0 8
10578: PUSH
10579: DOUBLE
10580: LD_INT 1
10582: DEC
10583: ST_TO_ADDR
10584: LD_EXP 25
10588: PUSH
10589: FOR_TO
10590: IFFALSE 10691
// begin tmp := 0 ;
10592: LD_ADDR_VAR 0 3
10596: PUSH
10597: LD_STRING 0
10599: ST_TO_ADDR
// if result [ 1 ] then
10600: LD_VAR 0 2
10604: PUSH
10605: LD_INT 1
10607: ARRAY
10608: IFFALSE 10673
// if result [ 1 ] [ 1 ] = i then
10610: LD_VAR 0 2
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PUSH
10619: LD_INT 1
10621: ARRAY
10622: PUSH
10623: LD_VAR 0 8
10627: EQUAL
10628: IFFALSE 10673
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10630: LD_ADDR_VAR 0 2
10634: PUSH
10635: LD_VAR 0 2
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: LD_VAR 0 2
10647: PUSH
10648: LD_INT 1
10650: ARRAY
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 3
10659: PPUSH
10660: CALL_OW 1
10664: ST_TO_ADDR
// tmp := 1 ;
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_STRING 1
10672: ST_TO_ADDR
// end ; normal := normal & tmp ;
10673: LD_ADDR_VAR 0 5
10677: PUSH
10678: LD_VAR 0 5
10682: PUSH
10683: LD_VAR 0 3
10687: STR
10688: ST_TO_ADDR
// end ;
10689: GO 10589
10691: POP
10692: POP
// for i = 1 to hardcoreCounter do
10693: LD_ADDR_VAR 0 8
10697: PUSH
10698: DOUBLE
10699: LD_INT 1
10701: DEC
10702: ST_TO_ADDR
10703: LD_EXP 26
10707: PUSH
10708: FOR_TO
10709: IFFALSE 10814
// begin tmp := 0 ;
10711: LD_ADDR_VAR 0 3
10715: PUSH
10716: LD_STRING 0
10718: ST_TO_ADDR
// if result [ 2 ] then
10719: LD_VAR 0 2
10723: PUSH
10724: LD_INT 2
10726: ARRAY
10727: IFFALSE 10796
// if result [ 2 ] [ 1 ] = 100 + i then
10729: LD_VAR 0 2
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: PUSH
10738: LD_INT 1
10740: ARRAY
10741: PUSH
10742: LD_INT 100
10744: PUSH
10745: LD_VAR 0 8
10749: PLUS
10750: EQUAL
10751: IFFALSE 10796
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10753: LD_ADDR_VAR 0 2
10757: PUSH
10758: LD_VAR 0 2
10762: PPUSH
10763: LD_INT 2
10765: PPUSH
10766: LD_VAR 0 2
10770: PUSH
10771: LD_INT 2
10773: ARRAY
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 3
10782: PPUSH
10783: CALL_OW 1
10787: ST_TO_ADDR
// tmp := 1 ;
10788: LD_ADDR_VAR 0 3
10792: PUSH
10793: LD_STRING 1
10795: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10796: LD_ADDR_VAR 0 6
10800: PUSH
10801: LD_VAR 0 6
10805: PUSH
10806: LD_VAR 0 3
10810: STR
10811: ST_TO_ADDR
// end ;
10812: GO 10708
10814: POP
10815: POP
// if isGameLoad then
10816: LD_VAR 0 1
10820: IFFALSE 11295
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10822: LD_ADDR_VAR 0 4
10826: PUSH
10827: LD_EXP 29
10831: PUSH
10832: LD_EXP 28
10836: PUSH
10837: LD_EXP 30
10841: PUSH
10842: LD_EXP 27
10846: PUSH
10847: LD_EXP 31
10851: PUSH
10852: LD_EXP 32
10856: PUSH
10857: LD_EXP 33
10861: PUSH
10862: LD_EXP 34
10866: PUSH
10867: LD_EXP 35
10871: PUSH
10872: LD_EXP 36
10876: PUSH
10877: LD_EXP 37
10881: PUSH
10882: LD_EXP 38
10886: PUSH
10887: LD_EXP 39
10891: PUSH
10892: LD_EXP 40
10896: PUSH
10897: LD_EXP 48
10901: PUSH
10902: LD_EXP 49
10906: PUSH
10907: LD_EXP 50
10911: PUSH
10912: LD_EXP 51
10916: PUSH
10917: LD_EXP 53
10921: PUSH
10922: LD_EXP 54
10926: PUSH
10927: LD_EXP 55
10931: PUSH
10932: LD_EXP 58
10936: PUSH
10937: LD_EXP 60
10941: PUSH
10942: LD_EXP 61
10946: PUSH
10947: LD_EXP 62
10951: PUSH
10952: LD_EXP 64
10956: PUSH
10957: LD_EXP 65
10961: PUSH
10962: LD_EXP 68
10966: PUSH
10967: LD_EXP 69
10971: PUSH
10972: LD_EXP 70
10976: PUSH
10977: LD_EXP 71
10981: PUSH
10982: LD_EXP 72
10986: PUSH
10987: LD_EXP 73
10991: PUSH
10992: LD_EXP 74
10996: PUSH
10997: LD_EXP 75
11001: PUSH
11002: LD_EXP 76
11006: PUSH
11007: LD_EXP 41
11011: PUSH
11012: LD_EXP 42
11016: PUSH
11017: LD_EXP 45
11021: PUSH
11022: LD_EXP 46
11026: PUSH
11027: LD_EXP 47
11031: PUSH
11032: LD_EXP 43
11036: PUSH
11037: LD_EXP 44
11041: PUSH
11042: LD_EXP 52
11046: PUSH
11047: LD_EXP 56
11051: PUSH
11052: LD_EXP 57
11056: PUSH
11057: LD_EXP 59
11061: PUSH
11062: LD_EXP 63
11066: PUSH
11067: LD_EXP 66
11071: PUSH
11072: LD_EXP 67
11076: PUSH
11077: LD_EXP 77
11081: PUSH
11082: LD_EXP 78
11086: PUSH
11087: LD_EXP 79
11091: PUSH
11092: LD_EXP 80
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: ST_TO_ADDR
// tmp :=  ;
11153: LD_ADDR_VAR 0 3
11157: PUSH
11158: LD_STRING 
11160: ST_TO_ADDR
// for i = 1 to normalCounter do
11161: LD_ADDR_VAR 0 8
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_EXP 25
11175: PUSH
11176: FOR_TO
11177: IFFALSE 11213
// begin if flags [ i ] then
11179: LD_VAR 0 4
11183: PUSH
11184: LD_VAR 0 8
11188: ARRAY
11189: IFFALSE 11211
// tmp := tmp & i & ; ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: LD_VAR 0 3
11200: PUSH
11201: LD_VAR 0 8
11205: STR
11206: PUSH
11207: LD_STRING ;
11209: STR
11210: ST_TO_ADDR
// end ;
11211: GO 11176
11213: POP
11214: POP
// for i = 1 to hardcoreCounter do
11215: LD_ADDR_VAR 0 8
11219: PUSH
11220: DOUBLE
11221: LD_INT 1
11223: DEC
11224: ST_TO_ADDR
11225: LD_EXP 26
11229: PUSH
11230: FOR_TO
11231: IFFALSE 11277
// begin if flags [ normalCounter + i ] then
11233: LD_VAR 0 4
11237: PUSH
11238: LD_EXP 25
11242: PUSH
11243: LD_VAR 0 8
11247: PLUS
11248: ARRAY
11249: IFFALSE 11275
// tmp := tmp & ( 100 + i ) & ; ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: LD_VAR 0 3
11260: PUSH
11261: LD_INT 100
11263: PUSH
11264: LD_VAR 0 8
11268: PLUS
11269: STR
11270: PUSH
11271: LD_STRING ;
11273: STR
11274: ST_TO_ADDR
// end ;
11275: GO 11230
11277: POP
11278: POP
// if tmp then
11279: LD_VAR 0 3
11283: IFFALSE 11295
// active := tmp ;
11285: LD_ADDR_VAR 0 7
11289: PUSH
11290: LD_VAR 0 3
11294: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11295: LD_STRING getStreamItemsFromMission("
11297: PUSH
11298: LD_VAR 0 5
11302: STR
11303: PUSH
11304: LD_STRING ","
11306: STR
11307: PUSH
11308: LD_VAR 0 6
11312: STR
11313: PUSH
11314: LD_STRING ","
11316: STR
11317: PUSH
11318: LD_VAR 0 7
11322: STR
11323: PUSH
11324: LD_STRING ")
11326: STR
11327: PPUSH
11328: CALL_OW 559
// end else
11332: GO 11341
// ToLua ( getStreamItemsFromMission("","","") ) ;
11334: LD_STRING getStreamItemsFromMission("","","")
11336: PPUSH
11337: CALL_OW 559
// end ;
11341: LD_VAR 0 2
11345: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11346: LD_EXP 24
11350: PUSH
11351: LD_EXP 29
11355: AND
11356: IFFALSE 11480
11358: GO 11360
11360: DISABLE
11361: LD_INT 0
11363: PPUSH
11364: PPUSH
// begin enable ;
11365: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_INT 22
11373: PUSH
11374: LD_OWVAR 2
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 2
11385: PUSH
11386: LD_INT 34
11388: PUSH
11389: LD_INT 7
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 34
11398: PUSH
11399: LD_INT 45
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 34
11408: PUSH
11409: LD_INT 28
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 34
11418: PUSH
11419: LD_INT 47
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 69
11441: ST_TO_ADDR
// if not tmp then
11442: LD_VAR 0 2
11446: NOT
11447: IFFALSE 11451
// exit ;
11449: GO 11480
// for i in tmp do
11451: LD_ADDR_VAR 0 1
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: FOR_IN
11462: IFFALSE 11478
// begin SetLives ( i , 0 ) ;
11464: LD_VAR 0 1
11468: PPUSH
11469: LD_INT 0
11471: PPUSH
11472: CALL_OW 234
// end ;
11476: GO 11461
11478: POP
11479: POP
// end ;
11480: PPOPN 2
11482: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11483: LD_EXP 24
11487: PUSH
11488: LD_EXP 30
11492: AND
11493: IFFALSE 11577
11495: GO 11497
11497: DISABLE
11498: LD_INT 0
11500: PPUSH
11501: PPUSH
// begin enable ;
11502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 22
11510: PUSH
11511: LD_OWVAR 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 32
11522: PUSH
11523: LD_INT 3
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PPUSH
11534: CALL_OW 69
11538: ST_TO_ADDR
// if not tmp then
11539: LD_VAR 0 2
11543: NOT
11544: IFFALSE 11548
// exit ;
11546: GO 11577
// for i in tmp do
11548: LD_ADDR_VAR 0 1
11552: PUSH
11553: LD_VAR 0 2
11557: PUSH
11558: FOR_IN
11559: IFFALSE 11575
// begin SetLives ( i , 0 ) ;
11561: LD_VAR 0 1
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 234
// end ;
11573: GO 11558
11575: POP
11576: POP
// end ;
11577: PPOPN 2
11579: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11580: LD_EXP 24
11584: PUSH
11585: LD_EXP 27
11589: AND
11590: IFFALSE 11683
11592: GO 11594
11594: DISABLE
11595: LD_INT 0
11597: PPUSH
// begin enable ;
11598: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11599: LD_ADDR_VAR 0 1
11603: PUSH
11604: LD_INT 22
11606: PUSH
11607: LD_OWVAR 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 2
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 5
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 25
11631: PUSH
11632: LD_INT 9
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 25
11641: PUSH
11642: LD_INT 8
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: PUSH
11664: FOR_IN
11665: IFFALSE 11681
// begin SetClass ( i , 1 ) ;
11667: LD_VAR 0 1
11671: PPUSH
11672: LD_INT 1
11674: PPUSH
11675: CALL_OW 336
// end ;
11679: GO 11664
11681: POP
11682: POP
// end ;
11683: PPOPN 1
11685: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11686: LD_EXP 24
11690: PUSH
11691: LD_EXP 28
11695: AND
11696: PUSH
11697: LD_OWVAR 65
11701: PUSH
11702: LD_INT 7
11704: LESS
11705: AND
11706: IFFALSE 11720
11708: GO 11710
11710: DISABLE
// begin enable ;
11711: ENABLE
// game_speed := 7 ;
11712: LD_ADDR_OWVAR 65
11716: PUSH
11717: LD_INT 7
11719: ST_TO_ADDR
// end ;
11720: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11721: LD_EXP 24
11725: PUSH
11726: LD_EXP 31
11730: AND
11731: IFFALSE 11933
11733: GO 11735
11735: DISABLE
11736: LD_INT 0
11738: PPUSH
11739: PPUSH
11740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11741: LD_ADDR_VAR 0 3
11745: PUSH
11746: LD_INT 81
11748: PUSH
11749: LD_OWVAR 2
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 21
11760: PUSH
11761: LD_INT 1
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PPUSH
11772: CALL_OW 69
11776: ST_TO_ADDR
// if not tmp then
11777: LD_VAR 0 3
11781: NOT
11782: IFFALSE 11786
// exit ;
11784: GO 11933
// if tmp > 5 then
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 5
11793: GREATER
11794: IFFALSE 11806
// k := 5 else
11796: LD_ADDR_VAR 0 2
11800: PUSH
11801: LD_INT 5
11803: ST_TO_ADDR
11804: GO 11816
// k := tmp ;
11806: LD_ADDR_VAR 0 2
11810: PUSH
11811: LD_VAR 0 3
11815: ST_TO_ADDR
// for i := 1 to k do
11816: LD_ADDR_VAR 0 1
11820: PUSH
11821: DOUBLE
11822: LD_INT 1
11824: DEC
11825: ST_TO_ADDR
11826: LD_VAR 0 2
11830: PUSH
11831: FOR_TO
11832: IFFALSE 11931
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_VAR 0 1
11843: ARRAY
11844: PPUSH
11845: LD_VAR 0 1
11849: PUSH
11850: LD_INT 4
11852: MOD
11853: PUSH
11854: LD_INT 1
11856: PLUS
11857: PPUSH
11858: CALL_OW 259
11862: PUSH
11863: LD_INT 10
11865: LESS
11866: IFFALSE 11929
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11868: LD_VAR 0 3
11872: PUSH
11873: LD_VAR 0 1
11877: ARRAY
11878: PPUSH
11879: LD_VAR 0 1
11883: PUSH
11884: LD_INT 4
11886: MOD
11887: PUSH
11888: LD_INT 1
11890: PLUS
11891: PPUSH
11892: LD_VAR 0 3
11896: PUSH
11897: LD_VAR 0 1
11901: ARRAY
11902: PPUSH
11903: LD_VAR 0 1
11907: PUSH
11908: LD_INT 4
11910: MOD
11911: PUSH
11912: LD_INT 1
11914: PLUS
11915: PPUSH
11916: CALL_OW 259
11920: PUSH
11921: LD_INT 1
11923: PLUS
11924: PPUSH
11925: CALL_OW 237
11929: GO 11831
11931: POP
11932: POP
// end ;
11933: PPOPN 3
11935: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11936: LD_EXP 24
11940: PUSH
11941: LD_EXP 32
11945: AND
11946: IFFALSE 11966
11948: GO 11950
11950: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11951: LD_INT 4
11953: PPUSH
11954: LD_OWVAR 2
11958: PPUSH
11959: LD_INT 0
11961: PPUSH
11962: CALL_OW 324
11966: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11967: LD_EXP 24
11971: PUSH
11972: LD_EXP 61
11976: AND
11977: IFFALSE 11997
11979: GO 11981
11981: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11982: LD_INT 19
11984: PPUSH
11985: LD_OWVAR 2
11989: PPUSH
11990: LD_INT 0
11992: PPUSH
11993: CALL_OW 324
11997: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11998: LD_EXP 24
12002: PUSH
12003: LD_EXP 33
12007: AND
12008: IFFALSE 12110
12010: GO 12012
12012: DISABLE
12013: LD_INT 0
12015: PPUSH
12016: PPUSH
// begin enable ;
12017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12018: LD_ADDR_VAR 0 2
12022: PUSH
12023: LD_INT 22
12025: PUSH
12026: LD_OWVAR 2
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 2
12037: PUSH
12038: LD_INT 34
12040: PUSH
12041: LD_INT 11
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 34
12050: PUSH
12051: LD_INT 30
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: CALL_OW 69
12071: ST_TO_ADDR
// if not tmp then
12072: LD_VAR 0 2
12076: NOT
12077: IFFALSE 12081
// exit ;
12079: GO 12110
// for i in tmp do
12081: LD_ADDR_VAR 0 1
12085: PUSH
12086: LD_VAR 0 2
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12108
// begin SetLives ( i , 0 ) ;
12094: LD_VAR 0 1
12098: PPUSH
12099: LD_INT 0
12101: PPUSH
12102: CALL_OW 234
// end ;
12106: GO 12091
12108: POP
12109: POP
// end ;
12110: PPOPN 2
12112: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12113: LD_EXP 24
12117: PUSH
12118: LD_EXP 34
12122: AND
12123: IFFALSE 12143
12125: GO 12127
12127: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12128: LD_INT 32
12130: PPUSH
12131: LD_OWVAR 2
12135: PPUSH
12136: LD_INT 0
12138: PPUSH
12139: CALL_OW 324
12143: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12144: LD_EXP 24
12148: PUSH
12149: LD_EXP 35
12153: AND
12154: IFFALSE 12335
12156: GO 12158
12158: DISABLE
12159: LD_INT 0
12161: PPUSH
12162: PPUSH
12163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12164: LD_ADDR_VAR 0 2
12168: PUSH
12169: LD_INT 22
12171: PUSH
12172: LD_OWVAR 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 33
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PPUSH
12195: CALL_OW 69
12199: ST_TO_ADDR
// if not tmp then
12200: LD_VAR 0 2
12204: NOT
12205: IFFALSE 12209
// exit ;
12207: GO 12335
// side := 0 ;
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 0
12216: ST_TO_ADDR
// for i := 1 to 8 do
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: DOUBLE
12223: LD_INT 1
12225: DEC
12226: ST_TO_ADDR
12227: LD_INT 8
12229: PUSH
12230: FOR_TO
12231: IFFALSE 12279
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12233: LD_OWVAR 2
12237: PUSH
12238: LD_VAR 0 1
12242: NONEQUAL
12243: PUSH
12244: LD_OWVAR 2
12248: PPUSH
12249: LD_VAR 0 1
12253: PPUSH
12254: CALL_OW 81
12258: PUSH
12259: LD_INT 2
12261: EQUAL
12262: AND
12263: IFFALSE 12277
// begin side := i ;
12265: LD_ADDR_VAR 0 3
12269: PUSH
12270: LD_VAR 0 1
12274: ST_TO_ADDR
// break ;
12275: GO 12279
// end ;
12277: GO 12230
12279: POP
12280: POP
// if not side then
12281: LD_VAR 0 3
12285: NOT
12286: IFFALSE 12290
// exit ;
12288: GO 12335
// for i := 1 to tmp do
12290: LD_ADDR_VAR 0 1
12294: PUSH
12295: DOUBLE
12296: LD_INT 1
12298: DEC
12299: ST_TO_ADDR
12300: LD_VAR 0 2
12304: PUSH
12305: FOR_TO
12306: IFFALSE 12333
// if Prob ( 60 ) then
12308: LD_INT 60
12310: PPUSH
12311: CALL_OW 13
12315: IFFALSE 12331
// SetSide ( i , side ) ;
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_VAR 0 3
12326: PPUSH
12327: CALL_OW 235
12331: GO 12305
12333: POP
12334: POP
// end ;
12335: PPOPN 3
12337: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12338: LD_EXP 24
12342: PUSH
12343: LD_EXP 37
12347: AND
12348: IFFALSE 12467
12350: GO 12352
12352: DISABLE
12353: LD_INT 0
12355: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12356: LD_ADDR_VAR 0 1
12360: PUSH
12361: LD_INT 22
12363: PUSH
12364: LD_OWVAR 2
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 21
12375: PUSH
12376: LD_INT 1
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 3
12385: PUSH
12386: LD_INT 23
12388: PUSH
12389: LD_INT 0
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: PPUSH
12405: CALL_OW 69
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12465
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12413: LD_VAR 0 1
12417: PPUSH
12418: CALL_OW 257
12422: PUSH
12423: LD_INT 1
12425: PUSH
12426: LD_INT 2
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: LD_INT 4
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: IN
12441: IFFALSE 12463
// SetClass ( un , rand ( 1 , 4 ) ) ;
12443: LD_VAR 0 1
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: LD_INT 4
12453: PPUSH
12454: CALL_OW 12
12458: PPUSH
12459: CALL_OW 336
12463: GO 12410
12465: POP
12466: POP
// end ;
12467: PPOPN 1
12469: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12470: LD_EXP 24
12474: PUSH
12475: LD_EXP 36
12479: AND
12480: IFFALSE 12559
12482: GO 12484
12484: DISABLE
12485: LD_INT 0
12487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12488: LD_ADDR_VAR 0 1
12492: PUSH
12493: LD_INT 22
12495: PUSH
12496: LD_OWVAR 2
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 21
12507: PUSH
12508: LD_INT 3
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 69
12523: ST_TO_ADDR
// if not tmp then
12524: LD_VAR 0 1
12528: NOT
12529: IFFALSE 12533
// exit ;
12531: GO 12559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12533: LD_VAR 0 1
12537: PUSH
12538: LD_INT 1
12540: PPUSH
12541: LD_VAR 0 1
12545: PPUSH
12546: CALL_OW 12
12550: ARRAY
12551: PPUSH
12552: LD_INT 100
12554: PPUSH
12555: CALL_OW 234
// end ;
12559: PPOPN 1
12561: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12562: LD_EXP 24
12566: PUSH
12567: LD_EXP 38
12571: AND
12572: IFFALSE 12670
12574: GO 12576
12576: DISABLE
12577: LD_INT 0
12579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12580: LD_ADDR_VAR 0 1
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_OWVAR 2
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 21
12599: PUSH
12600: LD_INT 1
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PPUSH
12611: CALL_OW 69
12615: ST_TO_ADDR
// if not tmp then
12616: LD_VAR 0 1
12620: NOT
12621: IFFALSE 12625
// exit ;
12623: GO 12670
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 1
12632: PPUSH
12633: LD_VAR 0 1
12637: PPUSH
12638: CALL_OW 12
12642: ARRAY
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: LD_INT 4
12649: PPUSH
12650: CALL_OW 12
12654: PPUSH
12655: LD_INT 3000
12657: PPUSH
12658: LD_INT 9000
12660: PPUSH
12661: CALL_OW 12
12665: PPUSH
12666: CALL_OW 492
// end ;
12670: PPOPN 1
12672: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12673: LD_EXP 24
12677: PUSH
12678: LD_EXP 39
12682: AND
12683: IFFALSE 12703
12685: GO 12687
12687: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12688: LD_INT 1
12690: PPUSH
12691: LD_OWVAR 2
12695: PPUSH
12696: LD_INT 0
12698: PPUSH
12699: CALL_OW 324
12703: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12704: LD_EXP 24
12708: PUSH
12709: LD_EXP 40
12713: AND
12714: IFFALSE 12797
12716: GO 12718
12718: DISABLE
12719: LD_INT 0
12721: PPUSH
12722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12723: LD_ADDR_VAR 0 2
12727: PUSH
12728: LD_INT 22
12730: PUSH
12731: LD_OWVAR 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 21
12742: PUSH
12743: LD_INT 3
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 69
12758: ST_TO_ADDR
// if not tmp then
12759: LD_VAR 0 2
12763: NOT
12764: IFFALSE 12768
// exit ;
12766: GO 12797
// for i in tmp do
12768: LD_ADDR_VAR 0 1
12772: PUSH
12773: LD_VAR 0 2
12777: PUSH
12778: FOR_IN
12779: IFFALSE 12795
// SetBLevel ( i , 10 ) ;
12781: LD_VAR 0 1
12785: PPUSH
12786: LD_INT 10
12788: PPUSH
12789: CALL_OW 241
12793: GO 12778
12795: POP
12796: POP
// end ;
12797: PPOPN 2
12799: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12800: LD_EXP 24
12804: PUSH
12805: LD_EXP 41
12809: AND
12810: IFFALSE 12921
12812: GO 12814
12814: DISABLE
12815: LD_INT 0
12817: PPUSH
12818: PPUSH
12819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 22
12827: PUSH
12828: LD_OWVAR 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 25
12839: PUSH
12840: LD_INT 1
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PPUSH
12851: CALL_OW 69
12855: ST_TO_ADDR
// if not tmp then
12856: LD_VAR 0 3
12860: NOT
12861: IFFALSE 12865
// exit ;
12863: GO 12921
// un := tmp [ rand ( 1 , tmp ) ] ;
12865: LD_ADDR_VAR 0 2
12869: PUSH
12870: LD_VAR 0 3
12874: PUSH
12875: LD_INT 1
12877: PPUSH
12878: LD_VAR 0 3
12882: PPUSH
12883: CALL_OW 12
12887: ARRAY
12888: ST_TO_ADDR
// if Crawls ( un ) then
12889: LD_VAR 0 2
12893: PPUSH
12894: CALL_OW 318
12898: IFFALSE 12909
// ComWalk ( un ) ;
12900: LD_VAR 0 2
12904: PPUSH
12905: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12909: LD_VAR 0 2
12913: PPUSH
12914: LD_INT 5
12916: PPUSH
12917: CALL_OW 336
// end ;
12921: PPOPN 3
12923: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12924: LD_EXP 24
12928: PUSH
12929: LD_EXP 42
12933: AND
12934: PUSH
12935: LD_OWVAR 67
12939: PUSH
12940: LD_INT 4
12942: LESS
12943: AND
12944: IFFALSE 12963
12946: GO 12948
12948: DISABLE
// begin Difficulty := Difficulty + 1 ;
12949: LD_ADDR_OWVAR 67
12953: PUSH
12954: LD_OWVAR 67
12958: PUSH
12959: LD_INT 1
12961: PLUS
12962: ST_TO_ADDR
// end ;
12963: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12964: LD_EXP 24
12968: PUSH
12969: LD_EXP 43
12973: AND
12974: IFFALSE 13077
12976: GO 12978
12978: DISABLE
12979: LD_INT 0
12981: PPUSH
// begin for i := 1 to 5 do
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_INT 5
12994: PUSH
12995: FOR_TO
12996: IFFALSE 13075
// begin uc_nation := nation_nature ;
12998: LD_ADDR_OWVAR 21
13002: PUSH
13003: LD_INT 0
13005: ST_TO_ADDR
// uc_side := 0 ;
13006: LD_ADDR_OWVAR 20
13010: PUSH
13011: LD_INT 0
13013: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13014: LD_ADDR_OWVAR 29
13018: PUSH
13019: LD_INT 12
13021: PUSH
13022: LD_INT 12
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: ST_TO_ADDR
// hc_agressivity := 20 ;
13029: LD_ADDR_OWVAR 35
13033: PUSH
13034: LD_INT 20
13036: ST_TO_ADDR
// hc_class := class_tiger ;
13037: LD_ADDR_OWVAR 28
13041: PUSH
13042: LD_INT 14
13044: ST_TO_ADDR
// hc_gallery :=  ;
13045: LD_ADDR_OWVAR 33
13049: PUSH
13050: LD_STRING 
13052: ST_TO_ADDR
// hc_name :=  ;
13053: LD_ADDR_OWVAR 26
13057: PUSH
13058: LD_STRING 
13060: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13061: CALL_OW 44
13065: PPUSH
13066: LD_INT 0
13068: PPUSH
13069: CALL_OW 51
// end ;
13073: GO 12995
13075: POP
13076: POP
// end ;
13077: PPOPN 1
13079: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13080: LD_EXP 24
13084: PUSH
13085: LD_EXP 44
13089: AND
13090: IFFALSE 13099
13092: GO 13094
13094: DISABLE
// StreamSibBomb ;
13095: CALL 13100 0 0
13099: END
// export function StreamSibBomb ; var i , x , y ; begin
13100: LD_INT 0
13102: PPUSH
13103: PPUSH
13104: PPUSH
13105: PPUSH
// result := false ;
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// for i := 1 to 16 do
13114: LD_ADDR_VAR 0 2
13118: PUSH
13119: DOUBLE
13120: LD_INT 1
13122: DEC
13123: ST_TO_ADDR
13124: LD_INT 16
13126: PUSH
13127: FOR_TO
13128: IFFALSE 13327
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13130: LD_ADDR_VAR 0 3
13134: PUSH
13135: LD_INT 10
13137: PUSH
13138: LD_INT 20
13140: PUSH
13141: LD_INT 30
13143: PUSH
13144: LD_INT 40
13146: PUSH
13147: LD_INT 50
13149: PUSH
13150: LD_INT 60
13152: PUSH
13153: LD_INT 70
13155: PUSH
13156: LD_INT 80
13158: PUSH
13159: LD_INT 90
13161: PUSH
13162: LD_INT 100
13164: PUSH
13165: LD_INT 110
13167: PUSH
13168: LD_INT 120
13170: PUSH
13171: LD_INT 130
13173: PUSH
13174: LD_INT 140
13176: PUSH
13177: LD_INT 150
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 1
13199: PPUSH
13200: LD_INT 15
13202: PPUSH
13203: CALL_OW 12
13207: ARRAY
13208: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13209: LD_ADDR_VAR 0 4
13213: PUSH
13214: LD_INT 10
13216: PUSH
13217: LD_INT 20
13219: PUSH
13220: LD_INT 30
13222: PUSH
13223: LD_INT 40
13225: PUSH
13226: LD_INT 50
13228: PUSH
13229: LD_INT 60
13231: PUSH
13232: LD_INT 70
13234: PUSH
13235: LD_INT 80
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 100
13243: PUSH
13244: LD_INT 110
13246: PUSH
13247: LD_INT 120
13249: PUSH
13250: LD_INT 130
13252: PUSH
13253: LD_INT 140
13255: PUSH
13256: LD_INT 150
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 1
13278: PPUSH
13279: LD_INT 15
13281: PPUSH
13282: CALL_OW 12
13286: ARRAY
13287: ST_TO_ADDR
// if ValidHex ( x , y ) then
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_VAR 0 4
13297: PPUSH
13298: CALL_OW 488
13302: IFFALSE 13325
// begin result := [ x , y ] ;
13304: LD_ADDR_VAR 0 1
13308: PUSH
13309: LD_VAR 0 3
13313: PUSH
13314: LD_VAR 0 4
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: ST_TO_ADDR
// break ;
13323: GO 13327
// end ; end ;
13325: GO 13127
13327: POP
13328: POP
// if result then
13329: LD_VAR 0 1
13333: IFFALSE 13393
// begin ToLua ( playSibBomb() ) ;
13335: LD_STRING playSibBomb()
13337: PPUSH
13338: CALL_OW 559
// wait ( 0 0$14 ) ;
13342: LD_INT 490
13344: PPUSH
13345: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13349: LD_VAR 0 1
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: LD_VAR 0 1
13362: PUSH
13363: LD_INT 2
13365: ARRAY
13366: PPUSH
13367: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13371: LD_VAR 0 1
13375: PUSH
13376: LD_INT 1
13378: ARRAY
13379: PPUSH
13380: LD_VAR 0 1
13384: PUSH
13385: LD_INT 2
13387: ARRAY
13388: PPUSH
13389: CALL_OW 429
// end ; end ;
13393: LD_VAR 0 1
13397: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13398: LD_EXP 24
13402: PUSH
13403: LD_EXP 46
13407: AND
13408: IFFALSE 13420
13410: GO 13412
13412: DISABLE
// YouLost (  ) ;
13413: LD_STRING 
13415: PPUSH
13416: CALL_OW 104
13420: END
// every 0 0$1 trigger StreamModeActive and sFog do
13421: LD_EXP 24
13425: PUSH
13426: LD_EXP 45
13430: AND
13431: IFFALSE 13445
13433: GO 13435
13435: DISABLE
// FogOff ( your_side ) ;
13436: LD_OWVAR 2
13440: PPUSH
13441: CALL_OW 344
13445: END
// every 0 0$1 trigger StreamModeActive and sSun do
13446: LD_EXP 24
13450: PUSH
13451: LD_EXP 47
13455: AND
13456: IFFALSE 13484
13458: GO 13460
13460: DISABLE
// begin solar_recharge_percent := 0 ;
13461: LD_ADDR_OWVAR 79
13465: PUSH
13466: LD_INT 0
13468: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13469: LD_INT 10500
13471: PPUSH
13472: CALL_OW 67
// solar_recharge_percent := 100 ;
13476: LD_ADDR_OWVAR 79
13480: PUSH
13481: LD_INT 100
13483: ST_TO_ADDR
// end ;
13484: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13485: LD_EXP 24
13489: PUSH
13490: LD_EXP 48
13494: AND
13495: IFFALSE 13734
13497: GO 13499
13499: DISABLE
13500: LD_INT 0
13502: PPUSH
13503: PPUSH
13504: PPUSH
// begin tmp := [ ] ;
13505: LD_ADDR_VAR 0 3
13509: PUSH
13510: EMPTY
13511: ST_TO_ADDR
// for i := 1 to 6 do
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_INT 6
13524: PUSH
13525: FOR_TO
13526: IFFALSE 13631
// begin uc_nation := nation_nature ;
13528: LD_ADDR_OWVAR 21
13532: PUSH
13533: LD_INT 0
13535: ST_TO_ADDR
// uc_side := 0 ;
13536: LD_ADDR_OWVAR 20
13540: PUSH
13541: LD_INT 0
13543: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13544: LD_ADDR_OWVAR 29
13548: PUSH
13549: LD_INT 12
13551: PUSH
13552: LD_INT 12
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: ST_TO_ADDR
// hc_agressivity := 20 ;
13559: LD_ADDR_OWVAR 35
13563: PUSH
13564: LD_INT 20
13566: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13567: LD_ADDR_OWVAR 28
13571: PUSH
13572: LD_INT 17
13574: ST_TO_ADDR
// hc_gallery :=  ;
13575: LD_ADDR_OWVAR 33
13579: PUSH
13580: LD_STRING 
13582: ST_TO_ADDR
// hc_name :=  ;
13583: LD_ADDR_OWVAR 26
13587: PUSH
13588: LD_STRING 
13590: ST_TO_ADDR
// un := CreateHuman ;
13591: LD_ADDR_VAR 0 2
13595: PUSH
13596: CALL_OW 44
13600: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13601: LD_VAR 0 2
13605: PPUSH
13606: LD_INT 1
13608: PPUSH
13609: CALL_OW 51
// tmp := tmp ^ un ;
13613: LD_ADDR_VAR 0 3
13617: PUSH
13618: LD_VAR 0 3
13622: PUSH
13623: LD_VAR 0 2
13627: ADD
13628: ST_TO_ADDR
// end ;
13629: GO 13525
13631: POP
13632: POP
// repeat wait ( 0 0$1 ) ;
13633: LD_INT 35
13635: PPUSH
13636: CALL_OW 67
// for un in tmp do
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_VAR 0 3
13649: PUSH
13650: FOR_IN
13651: IFFALSE 13725
// begin if IsDead ( un ) then
13653: LD_VAR 0 2
13657: PPUSH
13658: CALL_OW 301
13662: IFFALSE 13682
// begin tmp := tmp diff un ;
13664: LD_ADDR_VAR 0 3
13668: PUSH
13669: LD_VAR 0 3
13673: PUSH
13674: LD_VAR 0 2
13678: DIFF
13679: ST_TO_ADDR
// continue ;
13680: GO 13650
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13682: LD_VAR 0 2
13686: PPUSH
13687: LD_INT 3
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_INT 0
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 69
13708: PPUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: CALL_OW 74
13718: PPUSH
13719: CALL_OW 115
// end ;
13723: GO 13650
13725: POP
13726: POP
// until not tmp ;
13727: LD_VAR 0 3
13731: NOT
13732: IFFALSE 13633
// end ;
13734: PPOPN 3
13736: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13737: LD_EXP 24
13741: PUSH
13742: LD_EXP 49
13746: AND
13747: IFFALSE 13801
13749: GO 13751
13751: DISABLE
// begin ToLua ( displayTroll(); ) ;
13752: LD_STRING displayTroll();
13754: PPUSH
13755: CALL_OW 559
// wait ( 3 3$00 ) ;
13759: LD_INT 6300
13761: PPUSH
13762: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13766: LD_STRING hideTroll();
13768: PPUSH
13769: CALL_OW 559
// wait ( 1 1$00 ) ;
13773: LD_INT 2100
13775: PPUSH
13776: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13780: LD_STRING displayTroll();
13782: PPUSH
13783: CALL_OW 559
// wait ( 1 1$00 ) ;
13787: LD_INT 2100
13789: PPUSH
13790: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13794: LD_STRING hideTroll();
13796: PPUSH
13797: CALL_OW 559
// end ;
13801: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13802: LD_EXP 24
13806: PUSH
13807: LD_EXP 50
13811: AND
13812: IFFALSE 13875
13814: GO 13816
13816: DISABLE
13817: LD_INT 0
13819: PPUSH
// begin p := 0 ;
13820: LD_ADDR_VAR 0 1
13824: PUSH
13825: LD_INT 0
13827: ST_TO_ADDR
// repeat game_speed := 1 ;
13828: LD_ADDR_OWVAR 65
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13836: LD_INT 35
13838: PPUSH
13839: CALL_OW 67
// p := p + 1 ;
13843: LD_ADDR_VAR 0 1
13847: PUSH
13848: LD_VAR 0 1
13852: PUSH
13853: LD_INT 1
13855: PLUS
13856: ST_TO_ADDR
// until p >= 60 ;
13857: LD_VAR 0 1
13861: PUSH
13862: LD_INT 60
13864: GREATEREQUAL
13865: IFFALSE 13828
// game_speed := 4 ;
13867: LD_ADDR_OWVAR 65
13871: PUSH
13872: LD_INT 4
13874: ST_TO_ADDR
// end ;
13875: PPOPN 1
13877: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13878: LD_EXP 24
13882: PUSH
13883: LD_EXP 51
13887: AND
13888: IFFALSE 14034
13890: GO 13892
13892: DISABLE
13893: LD_INT 0
13895: PPUSH
13896: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13897: LD_ADDR_VAR 0 1
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_OWVAR 2
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 2
13916: PUSH
13917: LD_INT 30
13919: PUSH
13920: LD_INT 0
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 30
13929: PUSH
13930: LD_INT 1
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// if not depot then
13951: LD_VAR 0 1
13955: NOT
13956: IFFALSE 13960
// exit ;
13958: GO 14034
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: LD_VAR 0 1
13969: PUSH
13970: LD_INT 1
13972: PPUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 12
13982: ARRAY
13983: PPUSH
13984: CALL_OW 274
13988: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13989: LD_VAR 0 2
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: LD_INT 0
13999: PPUSH
14000: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14004: LD_VAR 0 2
14008: PPUSH
14009: LD_INT 2
14011: PPUSH
14012: LD_INT 0
14014: PPUSH
14015: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14019: LD_VAR 0 2
14023: PPUSH
14024: LD_INT 3
14026: PPUSH
14027: LD_INT 0
14029: PPUSH
14030: CALL_OW 277
// end ;
14034: PPOPN 2
14036: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14037: LD_EXP 24
14041: PUSH
14042: LD_EXP 52
14046: AND
14047: IFFALSE 14144
14049: GO 14051
14051: DISABLE
14052: LD_INT 0
14054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14055: LD_ADDR_VAR 0 1
14059: PUSH
14060: LD_INT 22
14062: PUSH
14063: LD_OWVAR 2
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: LD_INT 23
14087: PUSH
14088: LD_INT 0
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 69
14108: ST_TO_ADDR
// if not tmp then
14109: LD_VAR 0 1
14113: NOT
14114: IFFALSE 14118
// exit ;
14116: GO 14144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14118: LD_VAR 0 1
14122: PUSH
14123: LD_INT 1
14125: PPUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 12
14135: ARRAY
14136: PPUSH
14137: LD_INT 200
14139: PPUSH
14140: CALL_OW 234
// end ;
14144: PPOPN 1
14146: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14147: LD_EXP 24
14151: PUSH
14152: LD_EXP 53
14156: AND
14157: IFFALSE 14236
14159: GO 14161
14161: DISABLE
14162: LD_INT 0
14164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14165: LD_ADDR_VAR 0 1
14169: PUSH
14170: LD_INT 22
14172: PUSH
14173: LD_OWVAR 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 21
14184: PUSH
14185: LD_INT 2
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: ST_TO_ADDR
// if not tmp then
14201: LD_VAR 0 1
14205: NOT
14206: IFFALSE 14210
// exit ;
14208: GO 14236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14210: LD_VAR 0 1
14214: PUSH
14215: LD_INT 1
14217: PPUSH
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 12
14227: ARRAY
14228: PPUSH
14229: LD_INT 60
14231: PPUSH
14232: CALL_OW 234
// end ;
14236: PPOPN 1
14238: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14239: LD_EXP 24
14243: PUSH
14244: LD_EXP 54
14248: AND
14249: IFFALSE 14348
14251: GO 14253
14253: DISABLE
14254: LD_INT 0
14256: PPUSH
14257: PPUSH
// begin enable ;
14258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14259: LD_ADDR_VAR 0 1
14263: PUSH
14264: LD_INT 22
14266: PUSH
14267: LD_OWVAR 2
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 61
14278: PUSH
14279: EMPTY
14280: LIST
14281: PUSH
14282: LD_INT 33
14284: PUSH
14285: LD_INT 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: PPUSH
14297: CALL_OW 69
14301: ST_TO_ADDR
// if not tmp then
14302: LD_VAR 0 1
14306: NOT
14307: IFFALSE 14311
// exit ;
14309: GO 14348
// for i in tmp do
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_VAR 0 1
14320: PUSH
14321: FOR_IN
14322: IFFALSE 14346
// if IsControledBy ( i ) then
14324: LD_VAR 0 2
14328: PPUSH
14329: CALL_OW 312
14333: IFFALSE 14344
// ComUnlink ( i ) ;
14335: LD_VAR 0 2
14339: PPUSH
14340: CALL_OW 136
14344: GO 14321
14346: POP
14347: POP
// end ;
14348: PPOPN 2
14350: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14351: LD_EXP 24
14355: PUSH
14356: LD_EXP 55
14360: AND
14361: IFFALSE 14501
14363: GO 14365
14365: DISABLE
14366: LD_INT 0
14368: PPUSH
14369: PPUSH
// begin ToLua ( displayPowell(); ) ;
14370: LD_STRING displayPowell();
14372: PPUSH
14373: CALL_OW 559
// uc_side := 0 ;
14377: LD_ADDR_OWVAR 20
14381: PUSH
14382: LD_INT 0
14384: ST_TO_ADDR
// uc_nation := 2 ;
14385: LD_ADDR_OWVAR 21
14389: PUSH
14390: LD_INT 2
14392: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14393: LD_ADDR_OWVAR 37
14397: PUSH
14398: LD_INT 14
14400: ST_TO_ADDR
// vc_engine := engine_siberite ;
14401: LD_ADDR_OWVAR 39
14405: PUSH
14406: LD_INT 3
14408: ST_TO_ADDR
// vc_control := control_apeman ;
14409: LD_ADDR_OWVAR 38
14413: PUSH
14414: LD_INT 5
14416: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14417: LD_ADDR_OWVAR 40
14421: PUSH
14422: LD_INT 29
14424: ST_TO_ADDR
// un := CreateVehicle ;
14425: LD_ADDR_VAR 0 2
14429: PUSH
14430: CALL_OW 45
14434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14435: LD_VAR 0 2
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14447: LD_INT 35
14449: PPUSH
14450: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14454: LD_VAR 0 2
14458: PPUSH
14459: LD_INT 22
14461: PUSH
14462: LD_OWVAR 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL_OW 69
14475: PPUSH
14476: LD_VAR 0 2
14480: PPUSH
14481: CALL_OW 74
14485: PPUSH
14486: CALL_OW 115
// until IsDead ( un ) ;
14490: LD_VAR 0 2
14494: PPUSH
14495: CALL_OW 301
14499: IFFALSE 14447
// end ;
14501: PPOPN 2
14503: END
// every 0 0$1 trigger StreamModeActive and sStu do
14504: LD_EXP 24
14508: PUSH
14509: LD_EXP 63
14513: AND
14514: IFFALSE 14530
14516: GO 14518
14518: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14519: LD_STRING displayStucuk();
14521: PPUSH
14522: CALL_OW 559
// ResetFog ;
14526: CALL_OW 335
// end ;
14530: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14531: LD_EXP 24
14535: PUSH
14536: LD_EXP 56
14540: AND
14541: IFFALSE 14682
14543: GO 14545
14545: DISABLE
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14550: LD_ADDR_VAR 0 2
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_OWVAR 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PPUSH
14581: CALL_OW 69
14585: ST_TO_ADDR
// if not tmp then
14586: LD_VAR 0 2
14590: NOT
14591: IFFALSE 14595
// exit ;
14593: GO 14682
// un := tmp [ rand ( 1 , tmp ) ] ;
14595: LD_ADDR_VAR 0 1
14599: PUSH
14600: LD_VAR 0 2
14604: PUSH
14605: LD_INT 1
14607: PPUSH
14608: LD_VAR 0 2
14612: PPUSH
14613: CALL_OW 12
14617: ARRAY
14618: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14619: LD_VAR 0 1
14623: PPUSH
14624: LD_INT 0
14626: PPUSH
14627: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14631: LD_VAR 0 1
14635: PPUSH
14636: LD_OWVAR 3
14640: PUSH
14641: LD_VAR 0 1
14645: DIFF
14646: PPUSH
14647: LD_VAR 0 1
14651: PPUSH
14652: CALL_OW 74
14656: PPUSH
14657: CALL_OW 115
// wait ( 0 0$20 ) ;
14661: LD_INT 700
14663: PPUSH
14664: CALL_OW 67
// SetSide ( un , your_side ) ;
14668: LD_VAR 0 1
14672: PPUSH
14673: LD_OWVAR 2
14677: PPUSH
14678: CALL_OW 235
// end ;
14682: PPOPN 2
14684: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14685: LD_EXP 24
14689: PUSH
14690: LD_EXP 57
14694: AND
14695: IFFALSE 14801
14697: GO 14699
14699: DISABLE
14700: LD_INT 0
14702: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14703: LD_ADDR_VAR 0 1
14707: PUSH
14708: LD_INT 22
14710: PUSH
14711: LD_OWVAR 2
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 2
14722: PUSH
14723: LD_INT 30
14725: PUSH
14726: LD_INT 0
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 30
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 69
14756: ST_TO_ADDR
// if not depot then
14757: LD_VAR 0 1
14761: NOT
14762: IFFALSE 14766
// exit ;
14764: GO 14801
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14766: LD_VAR 0 1
14770: PUSH
14771: LD_INT 1
14773: ARRAY
14774: PPUSH
14775: CALL_OW 250
14779: PPUSH
14780: LD_VAR 0 1
14784: PUSH
14785: LD_INT 1
14787: ARRAY
14788: PPUSH
14789: CALL_OW 251
14793: PPUSH
14794: LD_INT 70
14796: PPUSH
14797: CALL_OW 495
// end ;
14801: PPOPN 1
14803: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14804: LD_EXP 24
14808: PUSH
14809: LD_EXP 58
14813: AND
14814: IFFALSE 15025
14816: GO 14818
14818: DISABLE
14819: LD_INT 0
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14826: LD_ADDR_VAR 0 5
14830: PUSH
14831: LD_INT 22
14833: PUSH
14834: LD_OWVAR 2
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 21
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: ST_TO_ADDR
// if not tmp then
14862: LD_VAR 0 5
14866: NOT
14867: IFFALSE 14871
// exit ;
14869: GO 15025
// for i in tmp do
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_VAR 0 5
14880: PUSH
14881: FOR_IN
14882: IFFALSE 15023
// begin d := rand ( 0 , 5 ) ;
14884: LD_ADDR_VAR 0 4
14888: PUSH
14889: LD_INT 0
14891: PPUSH
14892: LD_INT 5
14894: PPUSH
14895: CALL_OW 12
14899: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14900: LD_ADDR_VAR 0 2
14904: PUSH
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 250
14914: PPUSH
14915: LD_VAR 0 4
14919: PPUSH
14920: LD_INT 3
14922: PPUSH
14923: LD_INT 12
14925: PPUSH
14926: CALL_OW 12
14930: PPUSH
14931: CALL_OW 272
14935: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14936: LD_ADDR_VAR 0 3
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 251
14950: PPUSH
14951: LD_VAR 0 4
14955: PPUSH
14956: LD_INT 3
14958: PPUSH
14959: LD_INT 12
14961: PPUSH
14962: CALL_OW 12
14966: PPUSH
14967: CALL_OW 273
14971: ST_TO_ADDR
// if ValidHex ( x , y ) then
14972: LD_VAR 0 2
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: CALL_OW 488
14986: IFFALSE 15021
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: LD_VAR 0 3
15002: PPUSH
15003: LD_INT 3
15005: PPUSH
15006: LD_INT 6
15008: PPUSH
15009: CALL_OW 12
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 483
// end ;
15021: GO 14881
15023: POP
15024: POP
// end ;
15025: PPOPN 5
15027: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15028: LD_EXP 24
15032: PUSH
15033: LD_EXP 59
15037: AND
15038: IFFALSE 15132
15040: GO 15042
15042: DISABLE
15043: LD_INT 0
15045: PPUSH
15046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_OWVAR 2
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 32
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 21
15076: PUSH
15077: LD_INT 2
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: LIST
15088: PPUSH
15089: CALL_OW 69
15093: ST_TO_ADDR
// if not tmp then
15094: LD_VAR 0 2
15098: NOT
15099: IFFALSE 15103
// exit ;
15101: GO 15132
// for i in tmp do
15103: LD_ADDR_VAR 0 1
15107: PUSH
15108: LD_VAR 0 2
15112: PUSH
15113: FOR_IN
15114: IFFALSE 15130
// SetFuel ( i , 0 ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: LD_INT 0
15123: PPUSH
15124: CALL_OW 240
15128: GO 15113
15130: POP
15131: POP
// end ;
15132: PPOPN 2
15134: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15135: LD_EXP 24
15139: PUSH
15140: LD_EXP 60
15144: AND
15145: IFFALSE 15211
15147: GO 15149
15149: DISABLE
15150: LD_INT 0
15152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15153: LD_ADDR_VAR 0 1
15157: PUSH
15158: LD_INT 22
15160: PUSH
15161: LD_OWVAR 2
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 30
15172: PUSH
15173: LD_INT 29
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: ST_TO_ADDR
// if not tmp then
15189: LD_VAR 0 1
15193: NOT
15194: IFFALSE 15198
// exit ;
15196: GO 15211
// DestroyUnit ( tmp [ 1 ] ) ;
15198: LD_VAR 0 1
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PPUSH
15207: CALL_OW 65
// end ;
15211: PPOPN 1
15213: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15214: LD_EXP 24
15218: PUSH
15219: LD_EXP 62
15223: AND
15224: IFFALSE 15353
15226: GO 15228
15228: DISABLE
15229: LD_INT 0
15231: PPUSH
// begin uc_side := 0 ;
15232: LD_ADDR_OWVAR 20
15236: PUSH
15237: LD_INT 0
15239: ST_TO_ADDR
// uc_nation := nation_arabian ;
15240: LD_ADDR_OWVAR 21
15244: PUSH
15245: LD_INT 2
15247: ST_TO_ADDR
// hc_gallery :=  ;
15248: LD_ADDR_OWVAR 33
15252: PUSH
15253: LD_STRING 
15255: ST_TO_ADDR
// hc_name :=  ;
15256: LD_ADDR_OWVAR 26
15260: PUSH
15261: LD_STRING 
15263: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15264: LD_INT 1
15266: PPUSH
15267: LD_INT 11
15269: PPUSH
15270: LD_INT 10
15272: PPUSH
15273: CALL_OW 380
// un := CreateHuman ;
15277: LD_ADDR_VAR 0 1
15281: PUSH
15282: CALL_OW 44
15286: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15287: LD_VAR 0 1
15291: PPUSH
15292: LD_INT 1
15294: PPUSH
15295: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15299: LD_INT 35
15301: PPUSH
15302: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15306: LD_VAR 0 1
15310: PPUSH
15311: LD_INT 22
15313: PUSH
15314: LD_OWVAR 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PPUSH
15323: CALL_OW 69
15327: PPUSH
15328: LD_VAR 0 1
15332: PPUSH
15333: CALL_OW 74
15337: PPUSH
15338: CALL_OW 115
// until IsDead ( un ) ;
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 301
15351: IFFALSE 15299
// end ;
15353: PPOPN 1
15355: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15356: LD_EXP 24
15360: PUSH
15361: LD_EXP 64
15365: AND
15366: IFFALSE 15378
15368: GO 15370
15370: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15371: LD_STRING earthquake(getX(game), 0, 32)
15373: PPUSH
15374: CALL_OW 559
15378: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15379: LD_EXP 24
15383: PUSH
15384: LD_EXP 65
15388: AND
15389: IFFALSE 15480
15391: GO 15393
15393: DISABLE
15394: LD_INT 0
15396: PPUSH
// begin enable ;
15397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15398: LD_ADDR_VAR 0 1
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_OWVAR 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 21
15417: PUSH
15418: LD_INT 2
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 33
15427: PUSH
15428: LD_INT 3
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: PPUSH
15440: CALL_OW 69
15444: ST_TO_ADDR
// if not tmp then
15445: LD_VAR 0 1
15449: NOT
15450: IFFALSE 15454
// exit ;
15452: GO 15480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15454: LD_VAR 0 1
15458: PUSH
15459: LD_INT 1
15461: PPUSH
15462: LD_VAR 0 1
15466: PPUSH
15467: CALL_OW 12
15471: ARRAY
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: CALL_OW 234
// end ;
15480: PPOPN 1
15482: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15483: LD_EXP 24
15487: PUSH
15488: LD_EXP 66
15492: AND
15493: IFFALSE 15634
15495: GO 15497
15497: DISABLE
15498: LD_INT 0
15500: PPUSH
15501: PPUSH
15502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_OWVAR 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 25
15522: PUSH
15523: LD_INT 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// if not tmp then
15539: LD_VAR 0 3
15543: NOT
15544: IFFALSE 15548
// exit ;
15546: GO 15634
// un := tmp [ rand ( 1 , tmp ) ] ;
15548: LD_ADDR_VAR 0 2
15552: PUSH
15553: LD_VAR 0 3
15557: PUSH
15558: LD_INT 1
15560: PPUSH
15561: LD_VAR 0 3
15565: PPUSH
15566: CALL_OW 12
15570: ARRAY
15571: ST_TO_ADDR
// if Crawls ( un ) then
15572: LD_VAR 0 2
15576: PPUSH
15577: CALL_OW 318
15581: IFFALSE 15592
// ComWalk ( un ) ;
15583: LD_VAR 0 2
15587: PPUSH
15588: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15592: LD_VAR 0 2
15596: PPUSH
15597: LD_INT 9
15599: PPUSH
15600: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15604: LD_INT 28
15606: PPUSH
15607: LD_OWVAR 2
15611: PPUSH
15612: LD_INT 2
15614: PPUSH
15615: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15619: LD_INT 29
15621: PPUSH
15622: LD_OWVAR 2
15626: PPUSH
15627: LD_INT 2
15629: PPUSH
15630: CALL_OW 322
// end ;
15634: PPOPN 3
15636: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15637: LD_EXP 24
15641: PUSH
15642: LD_EXP 67
15646: AND
15647: IFFALSE 15758
15649: GO 15651
15651: DISABLE
15652: LD_INT 0
15654: PPUSH
15655: PPUSH
15656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15657: LD_ADDR_VAR 0 3
15661: PUSH
15662: LD_INT 22
15664: PUSH
15665: LD_OWVAR 2
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 25
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: ST_TO_ADDR
// if not tmp then
15693: LD_VAR 0 3
15697: NOT
15698: IFFALSE 15702
// exit ;
15700: GO 15758
// un := tmp [ rand ( 1 , tmp ) ] ;
15702: LD_ADDR_VAR 0 2
15706: PUSH
15707: LD_VAR 0 3
15711: PUSH
15712: LD_INT 1
15714: PPUSH
15715: LD_VAR 0 3
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: ST_TO_ADDR
// if Crawls ( un ) then
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 318
15735: IFFALSE 15746
// ComWalk ( un ) ;
15737: LD_VAR 0 2
15741: PPUSH
15742: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15746: LD_VAR 0 2
15750: PPUSH
15751: LD_INT 8
15753: PPUSH
15754: CALL_OW 336
// end ;
15758: PPOPN 3
15760: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15761: LD_EXP 24
15765: PUSH
15766: LD_EXP 68
15770: AND
15771: IFFALSE 15915
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
15779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15780: LD_ADDR_VAR 0 2
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_OWVAR 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 21
15799: PUSH
15800: LD_INT 2
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 2
15809: PUSH
15810: LD_INT 34
15812: PUSH
15813: LD_INT 12
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 34
15822: PUSH
15823: LD_INT 51
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 34
15832: PUSH
15833: LD_INT 32
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: ST_TO_ADDR
// if not tmp then
15856: LD_VAR 0 2
15860: NOT
15861: IFFALSE 15865
// exit ;
15863: GO 15915
// for i in tmp do
15865: LD_ADDR_VAR 0 1
15869: PUSH
15870: LD_VAR 0 2
15874: PUSH
15875: FOR_IN
15876: IFFALSE 15913
// if GetCargo ( i , mat_artifact ) = 0 then
15878: LD_VAR 0 1
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 289
15890: PUSH
15891: LD_INT 0
15893: EQUAL
15894: IFFALSE 15911
// SetCargo ( i , mat_siberit , 100 ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_INT 3
15903: PPUSH
15904: LD_INT 100
15906: PPUSH
15907: CALL_OW 290
15911: GO 15875
15913: POP
15914: POP
// end ;
15915: PPOPN 2
15917: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15918: LD_EXP 24
15922: PUSH
15923: LD_EXP 69
15927: AND
15928: IFFALSE 16111
15930: GO 15932
15932: DISABLE
15933: LD_INT 0
15935: PPUSH
15936: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15937: LD_ADDR_VAR 0 2
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_OWVAR 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PPUSH
15954: CALL_OW 69
15958: ST_TO_ADDR
// if not tmp then
15959: LD_VAR 0 2
15963: NOT
15964: IFFALSE 15968
// exit ;
15966: GO 16111
// for i := 1 to 2 do
15968: LD_ADDR_VAR 0 1
15972: PUSH
15973: DOUBLE
15974: LD_INT 1
15976: DEC
15977: ST_TO_ADDR
15978: LD_INT 2
15980: PUSH
15981: FOR_TO
15982: IFFALSE 16109
// begin uc_side := your_side ;
15984: LD_ADDR_OWVAR 20
15988: PUSH
15989: LD_OWVAR 2
15993: ST_TO_ADDR
// uc_nation := nation_american ;
15994: LD_ADDR_OWVAR 21
15998: PUSH
15999: LD_INT 1
16001: ST_TO_ADDR
// vc_chassis := us_morphling ;
16002: LD_ADDR_OWVAR 37
16006: PUSH
16007: LD_INT 5
16009: ST_TO_ADDR
// vc_engine := engine_siberite ;
16010: LD_ADDR_OWVAR 39
16014: PUSH
16015: LD_INT 3
16017: ST_TO_ADDR
// vc_control := control_computer ;
16018: LD_ADDR_OWVAR 38
16022: PUSH
16023: LD_INT 3
16025: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16026: LD_ADDR_OWVAR 40
16030: PUSH
16031: LD_INT 10
16033: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16034: LD_VAR 0 2
16038: PUSH
16039: LD_INT 1
16041: ARRAY
16042: PPUSH
16043: CALL_OW 310
16047: NOT
16048: IFFALSE 16095
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16050: CALL_OW 45
16054: PPUSH
16055: LD_VAR 0 2
16059: PUSH
16060: LD_INT 1
16062: ARRAY
16063: PPUSH
16064: CALL_OW 250
16068: PPUSH
16069: LD_VAR 0 2
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 251
16082: PPUSH
16083: LD_INT 12
16085: PPUSH
16086: LD_INT 1
16088: PPUSH
16089: CALL_OW 50
16093: GO 16107
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16095: CALL_OW 45
16099: PPUSH
16100: LD_INT 1
16102: PPUSH
16103: CALL_OW 51
// end ;
16107: GO 15981
16109: POP
16110: POP
// end ;
16111: PPOPN 2
16113: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16114: LD_EXP 24
16118: PUSH
16119: LD_EXP 70
16123: AND
16124: IFFALSE 16346
16126: GO 16128
16128: DISABLE
16129: LD_INT 0
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16137: LD_ADDR_VAR 0 6
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_OWVAR 2
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 3
16166: PUSH
16167: LD_INT 23
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: PPUSH
16186: CALL_OW 69
16190: ST_TO_ADDR
// if not tmp then
16191: LD_VAR 0 6
16195: NOT
16196: IFFALSE 16200
// exit ;
16198: GO 16346
// s1 := rand ( 1 , 4 ) ;
16200: LD_ADDR_VAR 0 2
16204: PUSH
16205: LD_INT 1
16207: PPUSH
16208: LD_INT 4
16210: PPUSH
16211: CALL_OW 12
16215: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16216: LD_ADDR_VAR 0 4
16220: PUSH
16221: LD_VAR 0 6
16225: PUSH
16226: LD_INT 1
16228: ARRAY
16229: PPUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 259
16239: ST_TO_ADDR
// if s1 = 1 then
16240: LD_VAR 0 2
16244: PUSH
16245: LD_INT 1
16247: EQUAL
16248: IFFALSE 16268
// s2 := rand ( 2 , 4 ) else
16250: LD_ADDR_VAR 0 3
16254: PUSH
16255: LD_INT 2
16257: PPUSH
16258: LD_INT 4
16260: PPUSH
16261: CALL_OW 12
16265: ST_TO_ADDR
16266: GO 16276
// s2 := 1 ;
16268: LD_ADDR_VAR 0 3
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16276: LD_ADDR_VAR 0 5
16280: PUSH
16281: LD_VAR 0 6
16285: PUSH
16286: LD_INT 1
16288: ARRAY
16289: PPUSH
16290: LD_VAR 0 3
16294: PPUSH
16295: CALL_OW 259
16299: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16300: LD_VAR 0 6
16304: PUSH
16305: LD_INT 1
16307: ARRAY
16308: PPUSH
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_VAR 0 5
16318: PPUSH
16319: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16323: LD_VAR 0 6
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: LD_VAR 0 4
16341: PPUSH
16342: CALL_OW 237
// end ;
16346: PPOPN 6
16348: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16349: LD_EXP 24
16353: PUSH
16354: LD_EXP 71
16358: AND
16359: IFFALSE 16438
16361: GO 16363
16363: DISABLE
16364: LD_INT 0
16366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_OWVAR 2
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 30
16386: PUSH
16387: LD_INT 3
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: ST_TO_ADDR
// if not tmp then
16403: LD_VAR 0 1
16407: NOT
16408: IFFALSE 16412
// exit ;
16410: GO 16438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16412: LD_VAR 0 1
16416: PUSH
16417: LD_INT 1
16419: PPUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 234
// end ;
16438: PPOPN 1
16440: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16441: LD_EXP 24
16445: PUSH
16446: LD_EXP 72
16450: AND
16451: IFFALSE 16563
16453: GO 16455
16455: DISABLE
16456: LD_INT 0
16458: PPUSH
16459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16460: LD_ADDR_VAR 0 2
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_OWVAR 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 2
16479: PUSH
16480: LD_INT 30
16482: PUSH
16483: LD_INT 27
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 26
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 28
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: ST_TO_ADDR
// if not tmp then
16525: LD_VAR 0 2
16529: NOT
16530: IFFALSE 16534
// exit ;
16532: GO 16563
// for i in tmp do
16534: LD_ADDR_VAR 0 1
16538: PUSH
16539: LD_VAR 0 2
16543: PUSH
16544: FOR_IN
16545: IFFALSE 16561
// SetLives ( i , 1 ) ;
16547: LD_VAR 0 1
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: CALL_OW 234
16559: GO 16544
16561: POP
16562: POP
// end ;
16563: PPOPN 2
16565: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16566: LD_EXP 24
16570: PUSH
16571: LD_EXP 73
16575: AND
16576: IFFALSE 16863
16578: GO 16580
16580: DISABLE
16581: LD_INT 0
16583: PPUSH
16584: PPUSH
16585: PPUSH
// begin i := rand ( 1 , 7 ) ;
16586: LD_ADDR_VAR 0 1
16590: PUSH
16591: LD_INT 1
16593: PPUSH
16594: LD_INT 7
16596: PPUSH
16597: CALL_OW 12
16601: ST_TO_ADDR
// case i of 1 :
16602: LD_VAR 0 1
16606: PUSH
16607: LD_INT 1
16609: DOUBLE
16610: EQUAL
16611: IFTRUE 16615
16613: GO 16625
16615: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16616: LD_STRING earthquake(getX(game), 0, 32)
16618: PPUSH
16619: CALL_OW 559
16623: GO 16863
16625: LD_INT 2
16627: DOUBLE
16628: EQUAL
16629: IFTRUE 16633
16631: GO 16647
16633: POP
// begin ToLua ( displayStucuk(); ) ;
16634: LD_STRING displayStucuk();
16636: PPUSH
16637: CALL_OW 559
// ResetFog ;
16641: CALL_OW 335
// end ; 3 :
16645: GO 16863
16647: LD_INT 3
16649: DOUBLE
16650: EQUAL
16651: IFTRUE 16655
16653: GO 16759
16655: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16656: LD_ADDR_VAR 0 2
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_OWVAR 2
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 25
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PPUSH
16687: CALL_OW 69
16691: ST_TO_ADDR
// if not tmp then
16692: LD_VAR 0 2
16696: NOT
16697: IFFALSE 16701
// exit ;
16699: GO 16863
// un := tmp [ rand ( 1 , tmp ) ] ;
16701: LD_ADDR_VAR 0 3
16705: PUSH
16706: LD_VAR 0 2
16710: PUSH
16711: LD_INT 1
16713: PPUSH
16714: LD_VAR 0 2
16718: PPUSH
16719: CALL_OW 12
16723: ARRAY
16724: ST_TO_ADDR
// if Crawls ( un ) then
16725: LD_VAR 0 3
16729: PPUSH
16730: CALL_OW 318
16734: IFFALSE 16745
// ComWalk ( un ) ;
16736: LD_VAR 0 3
16740: PPUSH
16741: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16745: LD_VAR 0 3
16749: PPUSH
16750: LD_INT 8
16752: PPUSH
16753: CALL_OW 336
// end ; 4 :
16757: GO 16863
16759: LD_INT 4
16761: DOUBLE
16762: EQUAL
16763: IFTRUE 16767
16765: GO 16841
16767: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: LD_INT 22
16775: PUSH
16776: LD_OWVAR 2
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 30
16787: PUSH
16788: LD_INT 29
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: ST_TO_ADDR
// if not tmp then
16804: LD_VAR 0 2
16808: NOT
16809: IFFALSE 16813
// exit ;
16811: GO 16863
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16813: LD_VAR 0 2
16817: PUSH
16818: LD_INT 1
16820: ARRAY
16821: PPUSH
16822: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16826: LD_VAR 0 2
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 65
// end ; 5 .. 7 :
16839: GO 16863
16841: LD_INT 5
16843: DOUBLE
16844: GREATEREQUAL
16845: IFFALSE 16853
16847: LD_INT 7
16849: DOUBLE
16850: LESSEQUAL
16851: IFTRUE 16855
16853: GO 16862
16855: POP
// StreamSibBomb ; end ;
16856: CALL 13100 0 0
16860: GO 16863
16862: POP
// end ;
16863: PPOPN 3
16865: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16866: LD_EXP 24
16870: PUSH
16871: LD_EXP 74
16875: AND
16876: IFFALSE 17032
16878: GO 16880
16880: DISABLE
16881: LD_INT 0
16883: PPUSH
16884: PPUSH
16885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16886: LD_ADDR_VAR 0 2
16890: PUSH
16891: LD_INT 81
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: LD_INT 21
16908: PUSH
16909: LD_INT 1
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 21
16918: PUSH
16919: LD_INT 2
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// if not tmp then
16940: LD_VAR 0 2
16944: NOT
16945: IFFALSE 16949
// exit ;
16947: GO 17032
// p := 0 ;
16949: LD_ADDR_VAR 0 3
16953: PUSH
16954: LD_INT 0
16956: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16957: LD_INT 35
16959: PPUSH
16960: CALL_OW 67
// p := p + 1 ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 1
16976: PLUS
16977: ST_TO_ADDR
// for i in tmp do
16978: LD_ADDR_VAR 0 1
16982: PUSH
16983: LD_VAR 0 2
16987: PUSH
16988: FOR_IN
16989: IFFALSE 17020
// if GetLives ( i ) < 1000 then
16991: LD_VAR 0 1
16995: PPUSH
16996: CALL_OW 256
17000: PUSH
17001: LD_INT 1000
17003: LESS
17004: IFFALSE 17018
// SetLives ( i , 1000 ) ;
17006: LD_VAR 0 1
17010: PPUSH
17011: LD_INT 1000
17013: PPUSH
17014: CALL_OW 234
17018: GO 16988
17020: POP
17021: POP
// until p > 20 ;
17022: LD_VAR 0 3
17026: PUSH
17027: LD_INT 20
17029: GREATER
17030: IFFALSE 16957
// end ;
17032: PPOPN 3
17034: END
// every 0 0$1 trigger StreamModeActive and sTime do
17035: LD_EXP 24
17039: PUSH
17040: LD_EXP 75
17044: AND
17045: IFFALSE 17080
17047: GO 17049
17049: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17050: LD_INT 28
17052: PPUSH
17053: LD_OWVAR 2
17057: PPUSH
17058: LD_INT 2
17060: PPUSH
17061: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17065: LD_INT 30
17067: PPUSH
17068: LD_OWVAR 2
17072: PPUSH
17073: LD_INT 2
17075: PPUSH
17076: CALL_OW 322
// end ;
17080: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17081: LD_EXP 24
17085: PUSH
17086: LD_EXP 76
17090: AND
17091: IFFALSE 17212
17093: GO 17095
17095: DISABLE
17096: LD_INT 0
17098: PPUSH
17099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_OWVAR 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 21
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 3
17129: PUSH
17130: LD_INT 23
17132: PUSH
17133: LD_INT 0
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: PPUSH
17149: CALL_OW 69
17153: ST_TO_ADDR
// if not tmp then
17154: LD_VAR 0 2
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17212
// for i in tmp do
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: LD_VAR 0 2
17172: PUSH
17173: FOR_IN
17174: IFFALSE 17210
// begin if Crawls ( i ) then
17176: LD_VAR 0 1
17180: PPUSH
17181: CALL_OW 318
17185: IFFALSE 17196
// ComWalk ( i ) ;
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 138
// SetClass ( i , 2 ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_INT 2
17203: PPUSH
17204: CALL_OW 336
// end ;
17208: GO 17173
17210: POP
17211: POP
// end ;
17212: PPOPN 2
17214: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17215: LD_EXP 24
17219: PUSH
17220: LD_EXP 77
17224: AND
17225: IFFALSE 17513
17227: GO 17229
17229: DISABLE
17230: LD_INT 0
17232: PPUSH
17233: PPUSH
17234: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17235: LD_OWVAR 2
17239: PPUSH
17240: LD_INT 9
17242: PPUSH
17243: LD_INT 1
17245: PPUSH
17246: LD_INT 1
17248: PPUSH
17249: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17253: LD_INT 9
17255: PPUSH
17256: LD_OWVAR 2
17260: PPUSH
17261: CALL_OW 343
// uc_side := 9 ;
17265: LD_ADDR_OWVAR 20
17269: PUSH
17270: LD_INT 9
17272: ST_TO_ADDR
// uc_nation := 2 ;
17273: LD_ADDR_OWVAR 21
17277: PUSH
17278: LD_INT 2
17280: ST_TO_ADDR
// hc_name := Dark Warrior ;
17281: LD_ADDR_OWVAR 26
17285: PUSH
17286: LD_STRING Dark Warrior
17288: ST_TO_ADDR
// hc_gallery :=  ;
17289: LD_ADDR_OWVAR 33
17293: PUSH
17294: LD_STRING 
17296: ST_TO_ADDR
// hc_noskilllimit := true ;
17297: LD_ADDR_OWVAR 76
17301: PUSH
17302: LD_INT 1
17304: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17305: LD_ADDR_OWVAR 31
17309: PUSH
17310: LD_INT 30
17312: PUSH
17313: LD_INT 30
17315: PUSH
17316: LD_INT 30
17318: PUSH
17319: LD_INT 30
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: ST_TO_ADDR
// un := CreateHuman ;
17328: LD_ADDR_VAR 0 3
17332: PUSH
17333: CALL_OW 44
17337: ST_TO_ADDR
// hc_noskilllimit := false ;
17338: LD_ADDR_OWVAR 76
17342: PUSH
17343: LD_INT 0
17345: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17346: LD_VAR 0 3
17350: PPUSH
17351: LD_INT 1
17353: PPUSH
17354: CALL_OW 51
// ToLua ( playRanger() ) ;
17358: LD_STRING playRanger()
17360: PPUSH
17361: CALL_OW 559
// p := 0 ;
17365: LD_ADDR_VAR 0 2
17369: PUSH
17370: LD_INT 0
17372: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17373: LD_INT 35
17375: PPUSH
17376: CALL_OW 67
// p := p + 1 ;
17380: LD_ADDR_VAR 0 2
17384: PUSH
17385: LD_VAR 0 2
17389: PUSH
17390: LD_INT 1
17392: PLUS
17393: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17394: LD_VAR 0 3
17398: PPUSH
17399: CALL_OW 256
17403: PUSH
17404: LD_INT 1000
17406: LESS
17407: IFFALSE 17421
// SetLives ( un , 1000 ) ;
17409: LD_VAR 0 3
17413: PPUSH
17414: LD_INT 1000
17416: PPUSH
17417: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17421: LD_VAR 0 3
17425: PPUSH
17426: LD_INT 81
17428: PUSH
17429: LD_OWVAR 2
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 91
17440: PUSH
17441: LD_VAR 0 3
17445: PUSH
17446: LD_INT 30
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL_OW 69
17462: PPUSH
17463: LD_VAR 0 3
17467: PPUSH
17468: CALL_OW 74
17472: PPUSH
17473: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17477: LD_VAR 0 2
17481: PUSH
17482: LD_INT 80
17484: GREATER
17485: PUSH
17486: LD_VAR 0 3
17490: PPUSH
17491: CALL_OW 301
17495: OR
17496: IFFALSE 17373
// if un then
17498: LD_VAR 0 3
17502: IFFALSE 17513
// RemoveUnit ( un ) ;
17504: LD_VAR 0 3
17508: PPUSH
17509: CALL_OW 64
// end ;
17513: PPOPN 3
17515: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17516: LD_EXP 78
17520: IFFALSE 17636
17522: GO 17524
17524: DISABLE
17525: LD_INT 0
17527: PPUSH
17528: PPUSH
17529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17530: LD_ADDR_VAR 0 2
17534: PUSH
17535: LD_INT 81
17537: PUSH
17538: LD_OWVAR 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 21
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PPUSH
17561: CALL_OW 69
17565: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17566: LD_STRING playComputer()
17568: PPUSH
17569: CALL_OW 559
// if not tmp then
17573: LD_VAR 0 2
17577: NOT
17578: IFFALSE 17582
// exit ;
17580: GO 17636
// for i in tmp do
17582: LD_ADDR_VAR 0 1
17586: PUSH
17587: LD_VAR 0 2
17591: PUSH
17592: FOR_IN
17593: IFFALSE 17634
// for j := 1 to 4 do
17595: LD_ADDR_VAR 0 3
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_INT 4
17607: PUSH
17608: FOR_TO
17609: IFFALSE 17630
// SetSkill ( i , j , 10 ) ;
17611: LD_VAR 0 1
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: LD_INT 10
17623: PPUSH
17624: CALL_OW 237
17628: GO 17608
17630: POP
17631: POP
17632: GO 17592
17634: POP
17635: POP
// end ;
17636: PPOPN 3
17638: END
// every 0 0$1 trigger s30 do var i , tmp ;
17639: LD_EXP 79
17643: IFFALSE 17712
17645: GO 17647
17647: DISABLE
17648: LD_INT 0
17650: PPUSH
17651: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17652: LD_ADDR_VAR 0 2
17656: PUSH
17657: LD_INT 22
17659: PUSH
17660: LD_OWVAR 2
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PPUSH
17669: CALL_OW 69
17673: ST_TO_ADDR
// if not tmp then
17674: LD_VAR 0 2
17678: NOT
17679: IFFALSE 17683
// exit ;
17681: GO 17712
// for i in tmp do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_VAR 0 2
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( i , 300 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 300
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 2
17714: END
// every 0 0$1 trigger s60 do var i , tmp ;
17715: LD_EXP 80
17719: IFFALSE 17788
17721: GO 17723
17723: DISABLE
17724: LD_INT 0
17726: PPUSH
17727: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_INT 22
17735: PUSH
17736: LD_OWVAR 2
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 69
17749: ST_TO_ADDR
// if not tmp then
17750: LD_VAR 0 2
17754: NOT
17755: IFFALSE 17759
// exit ;
17757: GO 17788
// for i in tmp do
17759: LD_ADDR_VAR 0 1
17763: PUSH
17764: LD_VAR 0 2
17768: PUSH
17769: FOR_IN
17770: IFFALSE 17786
// SetLives ( i , 600 ) ;
17772: LD_VAR 0 1
17776: PPUSH
17777: LD_INT 600
17779: PPUSH
17780: CALL_OW 234
17784: GO 17769
17786: POP
17787: POP
// end ;
17788: PPOPN 2
17790: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17791: LD_INT 0
17793: PPUSH
// case cmd of 301 :
17794: LD_VAR 0 1
17798: PUSH
17799: LD_INT 301
17801: DOUBLE
17802: EQUAL
17803: IFTRUE 17807
17805: GO 17839
17807: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17808: LD_VAR 0 6
17812: PPUSH
17813: LD_VAR 0 7
17817: PPUSH
17818: LD_VAR 0 8
17822: PPUSH
17823: LD_VAR 0 4
17827: PPUSH
17828: LD_VAR 0 5
17832: PPUSH
17833: CALL 19040 0 5
17837: GO 17960
17839: LD_INT 302
17841: DOUBLE
17842: EQUAL
17843: IFTRUE 17847
17845: GO 17884
17847: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17848: LD_VAR 0 6
17852: PPUSH
17853: LD_VAR 0 7
17857: PPUSH
17858: LD_VAR 0 8
17862: PPUSH
17863: LD_VAR 0 9
17867: PPUSH
17868: LD_VAR 0 4
17872: PPUSH
17873: LD_VAR 0 5
17877: PPUSH
17878: CALL 19131 0 6
17882: GO 17960
17884: LD_INT 303
17886: DOUBLE
17887: EQUAL
17888: IFTRUE 17892
17890: GO 17929
17892: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17893: LD_VAR 0 6
17897: PPUSH
17898: LD_VAR 0 7
17902: PPUSH
17903: LD_VAR 0 8
17907: PPUSH
17908: LD_VAR 0 9
17912: PPUSH
17913: LD_VAR 0 4
17917: PPUSH
17918: LD_VAR 0 5
17922: PPUSH
17923: CALL 17965 0 6
17927: GO 17960
17929: LD_INT 304
17931: DOUBLE
17932: EQUAL
17933: IFTRUE 17937
17935: GO 17959
17937: POP
// hHackTeleport ( unit , x , y ) ; end ;
17938: LD_VAR 0 2
17942: PPUSH
17943: LD_VAR 0 4
17947: PPUSH
17948: LD_VAR 0 5
17952: PPUSH
17953: CALL 19724 0 3
17957: GO 17960
17959: POP
// end ;
17960: LD_VAR 0 12
17964: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17965: LD_INT 0
17967: PPUSH
17968: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17969: LD_VAR 0 1
17973: PUSH
17974: LD_INT 1
17976: LESS
17977: PUSH
17978: LD_VAR 0 1
17982: PUSH
17983: LD_INT 3
17985: GREATER
17986: OR
17987: PUSH
17988: LD_VAR 0 5
17992: PPUSH
17993: LD_VAR 0 6
17997: PPUSH
17998: CALL_OW 428
18002: OR
18003: IFFALSE 18007
// exit ;
18005: GO 18727
// uc_side := your_side ;
18007: LD_ADDR_OWVAR 20
18011: PUSH
18012: LD_OWVAR 2
18016: ST_TO_ADDR
// uc_nation := nation ;
18017: LD_ADDR_OWVAR 21
18021: PUSH
18022: LD_VAR 0 1
18026: ST_TO_ADDR
// bc_level = 1 ;
18027: LD_ADDR_OWVAR 43
18031: PUSH
18032: LD_INT 1
18034: ST_TO_ADDR
// case btype of 1 :
18035: LD_VAR 0 2
18039: PUSH
18040: LD_INT 1
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18059
18048: POP
// bc_type := b_depot ; 2 :
18049: LD_ADDR_OWVAR 42
18053: PUSH
18054: LD_INT 0
18056: ST_TO_ADDR
18057: GO 18671
18059: LD_INT 2
18061: DOUBLE
18062: EQUAL
18063: IFTRUE 18067
18065: GO 18078
18067: POP
// bc_type := b_warehouse ; 3 :
18068: LD_ADDR_OWVAR 42
18072: PUSH
18073: LD_INT 1
18075: ST_TO_ADDR
18076: GO 18671
18078: LD_INT 3
18080: DOUBLE
18081: EQUAL
18082: IFTRUE 18086
18084: GO 18097
18086: POP
// bc_type := b_lab ; 4 .. 9 :
18087: LD_ADDR_OWVAR 42
18091: PUSH
18092: LD_INT 6
18094: ST_TO_ADDR
18095: GO 18671
18097: LD_INT 4
18099: DOUBLE
18100: GREATEREQUAL
18101: IFFALSE 18109
18103: LD_INT 9
18105: DOUBLE
18106: LESSEQUAL
18107: IFTRUE 18111
18109: GO 18163
18111: POP
// begin bc_type := b_lab_half ;
18112: LD_ADDR_OWVAR 42
18116: PUSH
18117: LD_INT 7
18119: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18120: LD_ADDR_OWVAR 44
18124: PUSH
18125: LD_INT 10
18127: PUSH
18128: LD_INT 11
18130: PUSH
18131: LD_INT 12
18133: PUSH
18134: LD_INT 15
18136: PUSH
18137: LD_INT 14
18139: PUSH
18140: LD_INT 13
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: PUSH
18151: LD_VAR 0 2
18155: PUSH
18156: LD_INT 3
18158: MINUS
18159: ARRAY
18160: ST_TO_ADDR
// end ; 10 .. 13 :
18161: GO 18671
18163: LD_INT 10
18165: DOUBLE
18166: GREATEREQUAL
18167: IFFALSE 18175
18169: LD_INT 13
18171: DOUBLE
18172: LESSEQUAL
18173: IFTRUE 18177
18175: GO 18254
18177: POP
// begin bc_type := b_lab_full ;
18178: LD_ADDR_OWVAR 42
18182: PUSH
18183: LD_INT 8
18185: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18186: LD_ADDR_OWVAR 44
18190: PUSH
18191: LD_INT 10
18193: PUSH
18194: LD_INT 12
18196: PUSH
18197: LD_INT 14
18199: PUSH
18200: LD_INT 13
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: PUSH
18209: LD_VAR 0 2
18213: PUSH
18214: LD_INT 9
18216: MINUS
18217: ARRAY
18218: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18219: LD_ADDR_OWVAR 45
18223: PUSH
18224: LD_INT 11
18226: PUSH
18227: LD_INT 15
18229: PUSH
18230: LD_INT 12
18232: PUSH
18233: LD_INT 15
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: PUSH
18242: LD_VAR 0 2
18246: PUSH
18247: LD_INT 9
18249: MINUS
18250: ARRAY
18251: ST_TO_ADDR
// end ; 14 :
18252: GO 18671
18254: LD_INT 14
18256: DOUBLE
18257: EQUAL
18258: IFTRUE 18262
18260: GO 18273
18262: POP
// bc_type := b_workshop ; 15 :
18263: LD_ADDR_OWVAR 42
18267: PUSH
18268: LD_INT 2
18270: ST_TO_ADDR
18271: GO 18671
18273: LD_INT 15
18275: DOUBLE
18276: EQUAL
18277: IFTRUE 18281
18279: GO 18292
18281: POP
// bc_type := b_factory ; 16 :
18282: LD_ADDR_OWVAR 42
18286: PUSH
18287: LD_INT 3
18289: ST_TO_ADDR
18290: GO 18671
18292: LD_INT 16
18294: DOUBLE
18295: EQUAL
18296: IFTRUE 18300
18298: GO 18311
18300: POP
// bc_type := b_ext_gun ; 17 :
18301: LD_ADDR_OWVAR 42
18305: PUSH
18306: LD_INT 17
18308: ST_TO_ADDR
18309: GO 18671
18311: LD_INT 17
18313: DOUBLE
18314: EQUAL
18315: IFTRUE 18319
18317: GO 18347
18319: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18320: LD_ADDR_OWVAR 42
18324: PUSH
18325: LD_INT 19
18327: PUSH
18328: LD_INT 23
18330: PUSH
18331: LD_INT 19
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: LIST
18338: PUSH
18339: LD_VAR 0 1
18343: ARRAY
18344: ST_TO_ADDR
18345: GO 18671
18347: LD_INT 18
18349: DOUBLE
18350: EQUAL
18351: IFTRUE 18355
18353: GO 18366
18355: POP
// bc_type := b_ext_radar ; 19 :
18356: LD_ADDR_OWVAR 42
18360: PUSH
18361: LD_INT 20
18363: ST_TO_ADDR
18364: GO 18671
18366: LD_INT 19
18368: DOUBLE
18369: EQUAL
18370: IFTRUE 18374
18372: GO 18385
18374: POP
// bc_type := b_ext_radio ; 20 :
18375: LD_ADDR_OWVAR 42
18379: PUSH
18380: LD_INT 22
18382: ST_TO_ADDR
18383: GO 18671
18385: LD_INT 20
18387: DOUBLE
18388: EQUAL
18389: IFTRUE 18393
18391: GO 18404
18393: POP
// bc_type := b_ext_siberium ; 21 :
18394: LD_ADDR_OWVAR 42
18398: PUSH
18399: LD_INT 21
18401: ST_TO_ADDR
18402: GO 18671
18404: LD_INT 21
18406: DOUBLE
18407: EQUAL
18408: IFTRUE 18412
18410: GO 18423
18412: POP
// bc_type := b_ext_computer ; 22 :
18413: LD_ADDR_OWVAR 42
18417: PUSH
18418: LD_INT 24
18420: ST_TO_ADDR
18421: GO 18671
18423: LD_INT 22
18425: DOUBLE
18426: EQUAL
18427: IFTRUE 18431
18429: GO 18442
18431: POP
// bc_type := b_ext_track ; 23 :
18432: LD_ADDR_OWVAR 42
18436: PUSH
18437: LD_INT 16
18439: ST_TO_ADDR
18440: GO 18671
18442: LD_INT 23
18444: DOUBLE
18445: EQUAL
18446: IFTRUE 18450
18448: GO 18461
18450: POP
// bc_type := b_ext_laser ; 24 :
18451: LD_ADDR_OWVAR 42
18455: PUSH
18456: LD_INT 25
18458: ST_TO_ADDR
18459: GO 18671
18461: LD_INT 24
18463: DOUBLE
18464: EQUAL
18465: IFTRUE 18469
18467: GO 18480
18469: POP
// bc_type := b_control_tower ; 25 :
18470: LD_ADDR_OWVAR 42
18474: PUSH
18475: LD_INT 36
18477: ST_TO_ADDR
18478: GO 18671
18480: LD_INT 25
18482: DOUBLE
18483: EQUAL
18484: IFTRUE 18488
18486: GO 18499
18488: POP
// bc_type := b_breastwork ; 26 :
18489: LD_ADDR_OWVAR 42
18493: PUSH
18494: LD_INT 31
18496: ST_TO_ADDR
18497: GO 18671
18499: LD_INT 26
18501: DOUBLE
18502: EQUAL
18503: IFTRUE 18507
18505: GO 18518
18507: POP
// bc_type := b_bunker ; 27 :
18508: LD_ADDR_OWVAR 42
18512: PUSH
18513: LD_INT 32
18515: ST_TO_ADDR
18516: GO 18671
18518: LD_INT 27
18520: DOUBLE
18521: EQUAL
18522: IFTRUE 18526
18524: GO 18537
18526: POP
// bc_type := b_turret ; 28 :
18527: LD_ADDR_OWVAR 42
18531: PUSH
18532: LD_INT 33
18534: ST_TO_ADDR
18535: GO 18671
18537: LD_INT 28
18539: DOUBLE
18540: EQUAL
18541: IFTRUE 18545
18543: GO 18556
18545: POP
// bc_type := b_armoury ; 29 :
18546: LD_ADDR_OWVAR 42
18550: PUSH
18551: LD_INT 4
18553: ST_TO_ADDR
18554: GO 18671
18556: LD_INT 29
18558: DOUBLE
18559: EQUAL
18560: IFTRUE 18564
18562: GO 18575
18564: POP
// bc_type := b_barracks ; 30 :
18565: LD_ADDR_OWVAR 42
18569: PUSH
18570: LD_INT 5
18572: ST_TO_ADDR
18573: GO 18671
18575: LD_INT 30
18577: DOUBLE
18578: EQUAL
18579: IFTRUE 18583
18581: GO 18594
18583: POP
// bc_type := b_solar_power ; 31 :
18584: LD_ADDR_OWVAR 42
18588: PUSH
18589: LD_INT 27
18591: ST_TO_ADDR
18592: GO 18671
18594: LD_INT 31
18596: DOUBLE
18597: EQUAL
18598: IFTRUE 18602
18600: GO 18613
18602: POP
// bc_type := b_oil_power ; 32 :
18603: LD_ADDR_OWVAR 42
18607: PUSH
18608: LD_INT 26
18610: ST_TO_ADDR
18611: GO 18671
18613: LD_INT 32
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18632
18621: POP
// bc_type := b_siberite_power ; 33 :
18622: LD_ADDR_OWVAR 42
18626: PUSH
18627: LD_INT 28
18629: ST_TO_ADDR
18630: GO 18671
18632: LD_INT 33
18634: DOUBLE
18635: EQUAL
18636: IFTRUE 18640
18638: GO 18651
18640: POP
// bc_type := b_oil_mine ; 34 :
18641: LD_ADDR_OWVAR 42
18645: PUSH
18646: LD_INT 29
18648: ST_TO_ADDR
18649: GO 18671
18651: LD_INT 34
18653: DOUBLE
18654: EQUAL
18655: IFTRUE 18659
18657: GO 18670
18659: POP
// bc_type := b_siberite_mine ; end ;
18660: LD_ADDR_OWVAR 42
18664: PUSH
18665: LD_INT 30
18667: ST_TO_ADDR
18668: GO 18671
18670: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18671: LD_ADDR_VAR 0 8
18675: PUSH
18676: LD_VAR 0 5
18680: PPUSH
18681: LD_VAR 0 6
18685: PPUSH
18686: LD_VAR 0 3
18690: PPUSH
18691: CALL_OW 47
18695: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18696: LD_OWVAR 42
18700: PUSH
18701: LD_INT 32
18703: PUSH
18704: LD_INT 33
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: IN
18711: IFFALSE 18727
// PlaceWeaponTurret ( b , weapon ) ;
18713: LD_VAR 0 8
18717: PPUSH
18718: LD_VAR 0 4
18722: PPUSH
18723: CALL_OW 431
// end ;
18727: LD_VAR 0 7
18731: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
18736: PPUSH
18737: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18738: LD_ADDR_VAR 0 4
18742: PUSH
18743: LD_INT 22
18745: PUSH
18746: LD_OWVAR 2
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 30
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: ST_TO_ADDR
// if not tmp then
18792: LD_VAR 0 4
18796: NOT
18797: IFFALSE 18801
// exit ;
18799: GO 18860
// for i in tmp do
18801: LD_ADDR_VAR 0 2
18805: PUSH
18806: LD_VAR 0 4
18810: PUSH
18811: FOR_IN
18812: IFFALSE 18858
// for j = 1 to 3 do
18814: LD_ADDR_VAR 0 3
18818: PUSH
18819: DOUBLE
18820: LD_INT 1
18822: DEC
18823: ST_TO_ADDR
18824: LD_INT 3
18826: PUSH
18827: FOR_TO
18828: IFFALSE 18854
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18830: LD_VAR 0 2
18834: PPUSH
18835: CALL_OW 274
18839: PPUSH
18840: LD_VAR 0 3
18844: PPUSH
18845: LD_INT 99999
18847: PPUSH
18848: CALL_OW 277
18852: GO 18827
18854: POP
18855: POP
18856: GO 18811
18858: POP
18859: POP
// end ;
18860: LD_VAR 0 1
18864: RET
// export function hHackSetLevel10 ; var i , j ; begin
18865: LD_INT 0
18867: PPUSH
18868: PPUSH
18869: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18870: LD_ADDR_VAR 0 2
18874: PUSH
18875: LD_INT 21
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PPUSH
18885: CALL_OW 69
18889: PUSH
18890: FOR_IN
18891: IFFALSE 18943
// if IsSelected ( i ) then
18893: LD_VAR 0 2
18897: PPUSH
18898: CALL_OW 306
18902: IFFALSE 18941
// begin for j := 1 to 4 do
18904: LD_ADDR_VAR 0 3
18908: PUSH
18909: DOUBLE
18910: LD_INT 1
18912: DEC
18913: ST_TO_ADDR
18914: LD_INT 4
18916: PUSH
18917: FOR_TO
18918: IFFALSE 18939
// SetSkill ( i , j , 10 ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: LD_VAR 0 3
18929: PPUSH
18930: LD_INT 10
18932: PPUSH
18933: CALL_OW 237
18937: GO 18917
18939: POP
18940: POP
// end ;
18941: GO 18890
18943: POP
18944: POP
// end ;
18945: LD_VAR 0 1
18949: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18950: LD_INT 0
18952: PPUSH
18953: PPUSH
18954: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18955: LD_ADDR_VAR 0 2
18959: PUSH
18960: LD_INT 22
18962: PUSH
18963: LD_OWVAR 2
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 21
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PPUSH
18986: CALL_OW 69
18990: PUSH
18991: FOR_IN
18992: IFFALSE 19033
// begin for j := 1 to 4 do
18994: LD_ADDR_VAR 0 3
18998: PUSH
18999: DOUBLE
19000: LD_INT 1
19002: DEC
19003: ST_TO_ADDR
19004: LD_INT 4
19006: PUSH
19007: FOR_TO
19008: IFFALSE 19029
// SetSkill ( i , j , 10 ) ;
19010: LD_VAR 0 2
19014: PPUSH
19015: LD_VAR 0 3
19019: PPUSH
19020: LD_INT 10
19022: PPUSH
19023: CALL_OW 237
19027: GO 19007
19029: POP
19030: POP
// end ;
19031: GO 18991
19033: POP
19034: POP
// end ;
19035: LD_VAR 0 1
19039: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19040: LD_INT 0
19042: PPUSH
// uc_side := your_side ;
19043: LD_ADDR_OWVAR 20
19047: PUSH
19048: LD_OWVAR 2
19052: ST_TO_ADDR
// uc_nation := nation ;
19053: LD_ADDR_OWVAR 21
19057: PUSH
19058: LD_VAR 0 1
19062: ST_TO_ADDR
// InitHc ;
19063: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19067: LD_INT 0
19069: PPUSH
19070: LD_VAR 0 2
19074: PPUSH
19075: LD_VAR 0 3
19079: PPUSH
19080: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19084: LD_VAR 0 4
19088: PPUSH
19089: LD_VAR 0 5
19093: PPUSH
19094: CALL_OW 428
19098: PUSH
19099: LD_INT 0
19101: EQUAL
19102: IFFALSE 19126
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19104: CALL_OW 44
19108: PPUSH
19109: LD_VAR 0 4
19113: PPUSH
19114: LD_VAR 0 5
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 48
// end ;
19126: LD_VAR 0 6
19130: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19131: LD_INT 0
19133: PPUSH
19134: PPUSH
// uc_side := your_side ;
19135: LD_ADDR_OWVAR 20
19139: PUSH
19140: LD_OWVAR 2
19144: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19145: LD_VAR 0 1
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: LD_INT 4
19161: PUSH
19162: LD_INT 5
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: IN
19172: IFFALSE 19184
// uc_nation := nation_american else
19174: LD_ADDR_OWVAR 21
19178: PUSH
19179: LD_INT 1
19181: ST_TO_ADDR
19182: GO 19227
// if chassis in [ 11 , 12 , 13 , 14 ] then
19184: LD_VAR 0 1
19188: PUSH
19189: LD_INT 11
19191: PUSH
19192: LD_INT 12
19194: PUSH
19195: LD_INT 13
19197: PUSH
19198: LD_INT 14
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: IN
19207: IFFALSE 19219
// uc_nation := nation_arabian else
19209: LD_ADDR_OWVAR 21
19213: PUSH
19214: LD_INT 2
19216: ST_TO_ADDR
19217: GO 19227
// uc_nation := nation_russian ;
19219: LD_ADDR_OWVAR 21
19223: PUSH
19224: LD_INT 3
19226: ST_TO_ADDR
// vc_chassis := chassis ;
19227: LD_ADDR_OWVAR 37
19231: PUSH
19232: LD_VAR 0 1
19236: ST_TO_ADDR
// vc_engine := engine ;
19237: LD_ADDR_OWVAR 39
19241: PUSH
19242: LD_VAR 0 2
19246: ST_TO_ADDR
// vc_control := control ;
19247: LD_ADDR_OWVAR 38
19251: PUSH
19252: LD_VAR 0 3
19256: ST_TO_ADDR
// vc_weapon := weapon ;
19257: LD_ADDR_OWVAR 40
19261: PUSH
19262: LD_VAR 0 4
19266: ST_TO_ADDR
// un := CreateVehicle ;
19267: LD_ADDR_VAR 0 8
19271: PUSH
19272: CALL_OW 45
19276: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19277: LD_VAR 0 8
19281: PPUSH
19282: LD_INT 0
19284: PPUSH
19285: LD_INT 5
19287: PPUSH
19288: CALL_OW 12
19292: PPUSH
19293: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19297: LD_VAR 0 8
19301: PPUSH
19302: LD_VAR 0 5
19306: PPUSH
19307: LD_VAR 0 6
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 48
// end ;
19319: LD_VAR 0 7
19323: RET
// export hInvincible ; every 1 do
19324: GO 19326
19326: DISABLE
// hInvincible := [ ] ;
19327: LD_ADDR_EXP 81
19331: PUSH
19332: EMPTY
19333: ST_TO_ADDR
19334: END
// every 10 do var i ;
19335: GO 19337
19337: DISABLE
19338: LD_INT 0
19340: PPUSH
// begin enable ;
19341: ENABLE
// if not hInvincible then
19342: LD_EXP 81
19346: NOT
19347: IFFALSE 19351
// exit ;
19349: GO 19395
// for i in hInvincible do
19351: LD_ADDR_VAR 0 1
19355: PUSH
19356: LD_EXP 81
19360: PUSH
19361: FOR_IN
19362: IFFALSE 19393
// if GetLives ( i ) < 1000 then
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 256
19373: PUSH
19374: LD_INT 1000
19376: LESS
19377: IFFALSE 19391
// SetLives ( i , 1000 ) ;
19379: LD_VAR 0 1
19383: PPUSH
19384: LD_INT 1000
19386: PPUSH
19387: CALL_OW 234
19391: GO 19361
19393: POP
19394: POP
// end ;
19395: PPOPN 1
19397: END
// export function hHackInvincible ; var i ; begin
19398: LD_INT 0
19400: PPUSH
19401: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19402: LD_ADDR_VAR 0 2
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 21
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 21
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: PPUSH
19435: CALL_OW 69
19439: PUSH
19440: FOR_IN
19441: IFFALSE 19502
// if IsSelected ( i ) then
19443: LD_VAR 0 2
19447: PPUSH
19448: CALL_OW 306
19452: IFFALSE 19500
// begin if i in hInvincible then
19454: LD_VAR 0 2
19458: PUSH
19459: LD_EXP 81
19463: IN
19464: IFFALSE 19484
// hInvincible := hInvincible diff i else
19466: LD_ADDR_EXP 81
19470: PUSH
19471: LD_EXP 81
19475: PUSH
19476: LD_VAR 0 2
19480: DIFF
19481: ST_TO_ADDR
19482: GO 19500
// hInvincible := hInvincible union i ;
19484: LD_ADDR_EXP 81
19488: PUSH
19489: LD_EXP 81
19493: PUSH
19494: LD_VAR 0 2
19498: UNION
19499: ST_TO_ADDR
// end ;
19500: GO 19440
19502: POP
19503: POP
// end ;
19504: LD_VAR 0 1
19508: RET
// export function hHackInvisible ; var i , j ; begin
19509: LD_INT 0
19511: PPUSH
19512: PPUSH
19513: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: LD_INT 21
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PPUSH
19529: CALL_OW 69
19533: PUSH
19534: FOR_IN
19535: IFFALSE 19559
// if IsSelected ( i ) then
19537: LD_VAR 0 2
19541: PPUSH
19542: CALL_OW 306
19546: IFFALSE 19557
// ComForceInvisible ( i ) ;
19548: LD_VAR 0 2
19552: PPUSH
19553: CALL_OW 496
19557: GO 19534
19559: POP
19560: POP
// end ;
19561: LD_VAR 0 1
19565: RET
// export function hHackChangeYourSide ; begin
19566: LD_INT 0
19568: PPUSH
// if your_side = 8 then
19569: LD_OWVAR 2
19573: PUSH
19574: LD_INT 8
19576: EQUAL
19577: IFFALSE 19589
// your_side := 0 else
19579: LD_ADDR_OWVAR 2
19583: PUSH
19584: LD_INT 0
19586: ST_TO_ADDR
19587: GO 19603
// your_side := your_side + 1 ;
19589: LD_ADDR_OWVAR 2
19593: PUSH
19594: LD_OWVAR 2
19598: PUSH
19599: LD_INT 1
19601: PLUS
19602: ST_TO_ADDR
// end ;
19603: LD_VAR 0 1
19607: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19608: LD_INT 0
19610: PPUSH
19611: PPUSH
19612: PPUSH
// for i in all_units do
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_OWVAR 3
19622: PUSH
19623: FOR_IN
19624: IFFALSE 19702
// if IsSelected ( i ) then
19626: LD_VAR 0 2
19630: PPUSH
19631: CALL_OW 306
19635: IFFALSE 19700
// begin j := GetSide ( i ) ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_VAR 0 2
19646: PPUSH
19647: CALL_OW 255
19651: ST_TO_ADDR
// if j = 8 then
19652: LD_VAR 0 3
19656: PUSH
19657: LD_INT 8
19659: EQUAL
19660: IFFALSE 19672
// j := 0 else
19662: LD_ADDR_VAR 0 3
19666: PUSH
19667: LD_INT 0
19669: ST_TO_ADDR
19670: GO 19686
// j := j + 1 ;
19672: LD_ADDR_VAR 0 3
19676: PUSH
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 1
19684: PLUS
19685: ST_TO_ADDR
// SetSide ( i , j ) ;
19686: LD_VAR 0 2
19690: PPUSH
19691: LD_VAR 0 3
19695: PPUSH
19696: CALL_OW 235
// end ;
19700: GO 19623
19702: POP
19703: POP
// end ;
19704: LD_VAR 0 1
19708: RET
// export function hHackFog ; begin
19709: LD_INT 0
19711: PPUSH
// FogOff ( true ) ;
19712: LD_INT 1
19714: PPUSH
19715: CALL_OW 344
// end ;
19719: LD_VAR 0 1
19723: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19724: LD_INT 0
19726: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19727: LD_VAR 0 1
19731: PPUSH
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_VAR 0 3
19741: PPUSH
19742: LD_INT 1
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 483
// CenterOnXY ( x , y ) ;
19752: LD_VAR 0 2
19756: PPUSH
19757: LD_VAR 0 3
19761: PPUSH
19762: CALL_OW 84
// end ;
19766: LD_VAR 0 4
19770: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19771: LD_INT 0
19773: PPUSH
19774: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19775: LD_VAR 0 1
19779: NOT
19780: PUSH
19781: LD_VAR 0 2
19785: PPUSH
19786: LD_VAR 0 3
19790: PPUSH
19791: CALL_OW 488
19795: NOT
19796: OR
19797: PUSH
19798: LD_VAR 0 1
19802: PPUSH
19803: CALL_OW 266
19807: PUSH
19808: LD_INT 3
19810: NONEQUAL
19811: PUSH
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 247
19821: PUSH
19822: LD_INT 1
19824: EQUAL
19825: NOT
19826: AND
19827: OR
19828: IFFALSE 19832
// exit ;
19830: GO 19981
// if GetType ( factory ) = unit_human then
19832: LD_VAR 0 1
19836: PPUSH
19837: CALL_OW 247
19841: PUSH
19842: LD_INT 1
19844: EQUAL
19845: IFFALSE 19862
// factory := IsInUnit ( factory ) ;
19847: LD_ADDR_VAR 0 1
19851: PUSH
19852: LD_VAR 0 1
19856: PPUSH
19857: CALL_OW 310
19861: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19862: LD_VAR 0 1
19866: PPUSH
19867: CALL_OW 266
19871: PUSH
19872: LD_INT 3
19874: NONEQUAL
19875: IFFALSE 19879
// exit ;
19877: GO 19981
// if HexInfo ( x , y ) = factory then
19879: LD_VAR 0 2
19883: PPUSH
19884: LD_VAR 0 3
19888: PPUSH
19889: CALL_OW 428
19893: PUSH
19894: LD_VAR 0 1
19898: EQUAL
19899: IFFALSE 19926
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19901: LD_ADDR_EXP 82
19905: PUSH
19906: LD_EXP 82
19910: PPUSH
19911: LD_VAR 0 1
19915: PPUSH
19916: LD_INT 0
19918: PPUSH
19919: CALL_OW 1
19923: ST_TO_ADDR
19924: GO 19977
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19926: LD_ADDR_EXP 82
19930: PUSH
19931: LD_EXP 82
19935: PPUSH
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 255
19950: PUSH
19951: LD_VAR 0 1
19955: PUSH
19956: LD_VAR 0 2
19960: PUSH
19961: LD_VAR 0 3
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: PPUSH
19972: CALL_OW 1
19976: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19977: CALL 19986 0 0
// end ;
19981: LD_VAR 0 4
19985: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19986: LD_INT 0
19988: PPUSH
19989: PPUSH
19990: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19991: LD_STRING resetFactoryWaypoint();
19993: PPUSH
19994: CALL_OW 559
// if factoryWaypoints then
19998: LD_EXP 82
20002: IFFALSE 20128
// begin list := PrepareArray ( factoryWaypoints ) ;
20004: LD_ADDR_VAR 0 3
20008: PUSH
20009: LD_EXP 82
20013: PPUSH
20014: CALL 66942 0 1
20018: ST_TO_ADDR
// for i := 1 to list do
20019: LD_ADDR_VAR 0 2
20023: PUSH
20024: DOUBLE
20025: LD_INT 1
20027: DEC
20028: ST_TO_ADDR
20029: LD_VAR 0 3
20033: PUSH
20034: FOR_TO
20035: IFFALSE 20126
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20037: LD_STRING setFactoryWaypointXY(
20039: PUSH
20040: LD_VAR 0 3
20044: PUSH
20045: LD_VAR 0 2
20049: ARRAY
20050: PUSH
20051: LD_INT 1
20053: ARRAY
20054: STR
20055: PUSH
20056: LD_STRING ,
20058: STR
20059: PUSH
20060: LD_VAR 0 3
20064: PUSH
20065: LD_VAR 0 2
20069: ARRAY
20070: PUSH
20071: LD_INT 2
20073: ARRAY
20074: STR
20075: PUSH
20076: LD_STRING ,
20078: STR
20079: PUSH
20080: LD_VAR 0 3
20084: PUSH
20085: LD_VAR 0 2
20089: ARRAY
20090: PUSH
20091: LD_INT 3
20093: ARRAY
20094: STR
20095: PUSH
20096: LD_STRING ,
20098: STR
20099: PUSH
20100: LD_VAR 0 3
20104: PUSH
20105: LD_VAR 0 2
20109: ARRAY
20110: PUSH
20111: LD_INT 4
20113: ARRAY
20114: STR
20115: PUSH
20116: LD_STRING )
20118: STR
20119: PPUSH
20120: CALL_OW 559
20124: GO 20034
20126: POP
20127: POP
// end ; end ;
20128: LD_VAR 0 1
20132: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20133: LD_INT 0
20135: PPUSH
// if HexInfo ( x , y ) = warehouse then
20136: LD_VAR 0 2
20140: PPUSH
20141: LD_VAR 0 3
20145: PPUSH
20146: CALL_OW 428
20150: PUSH
20151: LD_VAR 0 1
20155: EQUAL
20156: IFFALSE 20183
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20158: LD_ADDR_EXP 83
20162: PUSH
20163: LD_EXP 83
20167: PPUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_INT 0
20175: PPUSH
20176: CALL_OW 1
20180: ST_TO_ADDR
20181: GO 20234
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20183: LD_ADDR_EXP 83
20187: PUSH
20188: LD_EXP 83
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 255
20207: PUSH
20208: LD_VAR 0 1
20212: PUSH
20213: LD_VAR 0 2
20217: PUSH
20218: LD_VAR 0 3
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: PPUSH
20229: CALL_OW 1
20233: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20234: CALL 20243 0 0
// end ;
20238: LD_VAR 0 4
20242: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20243: LD_INT 0
20245: PPUSH
20246: PPUSH
20247: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20248: LD_STRING resetWarehouseGatheringPoints();
20250: PPUSH
20251: CALL_OW 559
// if warehouseGatheringPoints then
20255: LD_EXP 83
20259: IFFALSE 20385
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20261: LD_ADDR_VAR 0 3
20265: PUSH
20266: LD_EXP 83
20270: PPUSH
20271: CALL 66942 0 1
20275: ST_TO_ADDR
// for i := 1 to list do
20276: LD_ADDR_VAR 0 2
20280: PUSH
20281: DOUBLE
20282: LD_INT 1
20284: DEC
20285: ST_TO_ADDR
20286: LD_VAR 0 3
20290: PUSH
20291: FOR_TO
20292: IFFALSE 20383
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20294: LD_STRING setWarehouseGatheringPointXY(
20296: PUSH
20297: LD_VAR 0 3
20301: PUSH
20302: LD_VAR 0 2
20306: ARRAY
20307: PUSH
20308: LD_INT 1
20310: ARRAY
20311: STR
20312: PUSH
20313: LD_STRING ,
20315: STR
20316: PUSH
20317: LD_VAR 0 3
20321: PUSH
20322: LD_VAR 0 2
20326: ARRAY
20327: PUSH
20328: LD_INT 2
20330: ARRAY
20331: STR
20332: PUSH
20333: LD_STRING ,
20335: STR
20336: PUSH
20337: LD_VAR 0 3
20341: PUSH
20342: LD_VAR 0 2
20346: ARRAY
20347: PUSH
20348: LD_INT 3
20350: ARRAY
20351: STR
20352: PUSH
20353: LD_STRING ,
20355: STR
20356: PUSH
20357: LD_VAR 0 3
20361: PUSH
20362: LD_VAR 0 2
20366: ARRAY
20367: PUSH
20368: LD_INT 4
20370: ARRAY
20371: STR
20372: PUSH
20373: LD_STRING )
20375: STR
20376: PPUSH
20377: CALL_OW 559
20381: GO 20291
20383: POP
20384: POP
// end ; end ;
20385: LD_VAR 0 1
20389: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20390: LD_EXP 83
20394: IFFALSE 21081
20396: GO 20398
20398: DISABLE
20399: LD_INT 0
20401: PPUSH
20402: PPUSH
20403: PPUSH
20404: PPUSH
20405: PPUSH
20406: PPUSH
20407: PPUSH
20408: PPUSH
20409: PPUSH
// begin enable ;
20410: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20411: LD_ADDR_VAR 0 3
20415: PUSH
20416: LD_EXP 83
20420: PPUSH
20421: CALL 66942 0 1
20425: ST_TO_ADDR
// if not list then
20426: LD_VAR 0 3
20430: NOT
20431: IFFALSE 20435
// exit ;
20433: GO 21081
// for i := 1 to list do
20435: LD_ADDR_VAR 0 1
20439: PUSH
20440: DOUBLE
20441: LD_INT 1
20443: DEC
20444: ST_TO_ADDR
20445: LD_VAR 0 3
20449: PUSH
20450: FOR_TO
20451: IFFALSE 21079
// begin depot := list [ i ] [ 2 ] ;
20453: LD_ADDR_VAR 0 8
20457: PUSH
20458: LD_VAR 0 3
20462: PUSH
20463: LD_VAR 0 1
20467: ARRAY
20468: PUSH
20469: LD_INT 2
20471: ARRAY
20472: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20473: LD_ADDR_VAR 0 5
20477: PUSH
20478: LD_VAR 0 3
20482: PUSH
20483: LD_VAR 0 1
20487: ARRAY
20488: PUSH
20489: LD_INT 1
20491: ARRAY
20492: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20493: LD_VAR 0 8
20497: PPUSH
20498: CALL_OW 301
20502: PUSH
20503: LD_VAR 0 5
20507: PUSH
20508: LD_VAR 0 8
20512: PPUSH
20513: CALL_OW 255
20517: NONEQUAL
20518: OR
20519: IFFALSE 20548
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20521: LD_ADDR_EXP 83
20525: PUSH
20526: LD_EXP 83
20530: PPUSH
20531: LD_VAR 0 8
20535: PPUSH
20536: LD_INT 0
20538: PPUSH
20539: CALL_OW 1
20543: ST_TO_ADDR
// exit ;
20544: POP
20545: POP
20546: GO 21081
// end ; x := list [ i ] [ 3 ] ;
20548: LD_ADDR_VAR 0 6
20552: PUSH
20553: LD_VAR 0 3
20557: PUSH
20558: LD_VAR 0 1
20562: ARRAY
20563: PUSH
20564: LD_INT 3
20566: ARRAY
20567: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20568: LD_ADDR_VAR 0 7
20572: PUSH
20573: LD_VAR 0 3
20577: PUSH
20578: LD_VAR 0 1
20582: ARRAY
20583: PUSH
20584: LD_INT 4
20586: ARRAY
20587: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20588: LD_ADDR_VAR 0 9
20592: PUSH
20593: LD_VAR 0 6
20597: PPUSH
20598: LD_VAR 0 7
20602: PPUSH
20603: LD_INT 16
20605: PPUSH
20606: CALL 65526 0 3
20610: ST_TO_ADDR
// if not cratesNearbyPoint then
20611: LD_VAR 0 9
20615: NOT
20616: IFFALSE 20622
// exit ;
20618: POP
20619: POP
20620: GO 21081
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20622: LD_ADDR_VAR 0 4
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_VAR 0 5
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 3
20641: PUSH
20642: LD_INT 60
20644: PUSH
20645: EMPTY
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 91
20654: PUSH
20655: LD_VAR 0 8
20659: PUSH
20660: LD_INT 6
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 25
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 25
20683: PUSH
20684: LD_INT 16
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: PPUSH
20702: CALL_OW 69
20706: PUSH
20707: LD_VAR 0 8
20711: PPUSH
20712: CALL_OW 313
20716: PPUSH
20717: LD_INT 3
20719: PUSH
20720: LD_INT 60
20722: PUSH
20723: EMPTY
20724: LIST
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 25
20735: PUSH
20736: LD_INT 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 25
20745: PUSH
20746: LD_INT 16
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: LIST
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PPUSH
20762: CALL_OW 72
20766: UNION
20767: ST_TO_ADDR
// if tmp then
20768: LD_VAR 0 4
20772: IFFALSE 20852
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20774: LD_ADDR_VAR 0 4
20778: PUSH
20779: LD_VAR 0 4
20783: PPUSH
20784: LD_INT 3
20786: PPUSH
20787: CALL 63493 0 2
20791: ST_TO_ADDR
// for j in tmp do
20792: LD_ADDR_VAR 0 2
20796: PUSH
20797: LD_VAR 0 4
20801: PUSH
20802: FOR_IN
20803: IFFALSE 20846
// begin if IsInUnit ( j ) then
20805: LD_VAR 0 2
20809: PPUSH
20810: CALL_OW 310
20814: IFFALSE 20825
// ComExit ( j ) ;
20816: LD_VAR 0 2
20820: PPUSH
20821: CALL 63576 0 1
// AddComCollect ( j , x , y ) ;
20825: LD_VAR 0 2
20829: PPUSH
20830: LD_VAR 0 6
20834: PPUSH
20835: LD_VAR 0 7
20839: PPUSH
20840: CALL_OW 177
// end ;
20844: GO 20802
20846: POP
20847: POP
// exit ;
20848: POP
20849: POP
20850: GO 21081
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20852: LD_ADDR_VAR 0 4
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_VAR 0 5
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 91
20871: PUSH
20872: LD_VAR 0 8
20876: PUSH
20877: LD_INT 8
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: LD_INT 34
20890: PUSH
20891: LD_INT 12
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 34
20900: PUSH
20901: LD_INT 51
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 34
20910: PUSH
20911: LD_INT 32
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 34
20920: PUSH
20921: LD_EXP 96
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: PPUSH
20942: CALL_OW 69
20946: ST_TO_ADDR
// if tmp then
20947: LD_VAR 0 4
20951: IFFALSE 21077
// begin for j in tmp do
20953: LD_ADDR_VAR 0 2
20957: PUSH
20958: LD_VAR 0 4
20962: PUSH
20963: FOR_IN
20964: IFFALSE 21075
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20966: LD_VAR 0 2
20970: PPUSH
20971: CALL_OW 262
20975: PUSH
20976: LD_INT 3
20978: EQUAL
20979: PUSH
20980: LD_VAR 0 2
20984: PPUSH
20985: CALL_OW 261
20989: PUSH
20990: LD_INT 20
20992: GREATER
20993: OR
20994: PUSH
20995: LD_VAR 0 2
20999: PPUSH
21000: CALL_OW 314
21004: NOT
21005: AND
21006: PUSH
21007: LD_VAR 0 2
21011: PPUSH
21012: CALL_OW 263
21016: PUSH
21017: LD_INT 1
21019: NONEQUAL
21020: PUSH
21021: LD_VAR 0 2
21025: PPUSH
21026: CALL_OW 311
21030: OR
21031: AND
21032: IFFALSE 21073
// begin ComCollect ( j , x , y ) ;
21034: LD_VAR 0 2
21038: PPUSH
21039: LD_VAR 0 6
21043: PPUSH
21044: LD_VAR 0 7
21048: PPUSH
21049: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21053: LD_VAR 0 2
21057: PPUSH
21058: LD_VAR 0 8
21062: PPUSH
21063: CALL_OW 172
// exit ;
21067: POP
21068: POP
21069: POP
21070: POP
21071: GO 21081
// end ;
21073: GO 20963
21075: POP
21076: POP
// end ; end ;
21077: GO 20450
21079: POP
21080: POP
// end ; end_of_file
21081: PPOPN 9
21083: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21084: LD_INT 0
21086: PPUSH
21087: PPUSH
21088: PPUSH
21089: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21090: LD_VAR 0 1
21094: PPUSH
21095: CALL_OW 264
21099: PUSH
21100: LD_EXP 99
21104: EQUAL
21105: IFFALSE 21177
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21107: LD_INT 68
21109: PPUSH
21110: LD_VAR 0 1
21114: PPUSH
21115: CALL_OW 255
21119: PPUSH
21120: CALL_OW 321
21124: PUSH
21125: LD_INT 2
21127: EQUAL
21128: IFFALSE 21140
// eff := 70 else
21130: LD_ADDR_VAR 0 4
21134: PUSH
21135: LD_INT 70
21137: ST_TO_ADDR
21138: GO 21148
// eff := 30 ;
21140: LD_ADDR_VAR 0 4
21144: PUSH
21145: LD_INT 30
21147: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21148: LD_VAR 0 1
21152: PPUSH
21153: CALL_OW 250
21157: PPUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 251
21167: PPUSH
21168: LD_VAR 0 4
21172: PPUSH
21173: CALL_OW 495
// end ; end ;
21177: LD_VAR 0 2
21181: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21182: LD_INT 0
21184: PPUSH
// end ;
21185: LD_VAR 0 4
21189: RET
// export function SOS_Command ( cmd ) ; begin
21190: LD_INT 0
21192: PPUSH
// end ;
21193: LD_VAR 0 2
21197: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21198: LD_INT 0
21200: PPUSH
// end ;
21201: LD_VAR 0 6
21205: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21206: LD_INT 0
21208: PPUSH
21209: PPUSH
// if not vehicle or not factory then
21210: LD_VAR 0 1
21214: NOT
21215: PUSH
21216: LD_VAR 0 2
21220: NOT
21221: OR
21222: IFFALSE 21226
// exit ;
21224: GO 21457
// if factoryWaypoints >= factory then
21226: LD_EXP 82
21230: PUSH
21231: LD_VAR 0 2
21235: GREATEREQUAL
21236: IFFALSE 21457
// if factoryWaypoints [ factory ] then
21238: LD_EXP 82
21242: PUSH
21243: LD_VAR 0 2
21247: ARRAY
21248: IFFALSE 21457
// begin if GetControl ( vehicle ) = control_manual then
21250: LD_VAR 0 1
21254: PPUSH
21255: CALL_OW 263
21259: PUSH
21260: LD_INT 1
21262: EQUAL
21263: IFFALSE 21344
// begin driver := IsDrivenBy ( vehicle ) ;
21265: LD_ADDR_VAR 0 4
21269: PUSH
21270: LD_VAR 0 1
21274: PPUSH
21275: CALL_OW 311
21279: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21280: LD_VAR 0 4
21284: PPUSH
21285: LD_EXP 82
21289: PUSH
21290: LD_VAR 0 2
21294: ARRAY
21295: PUSH
21296: LD_INT 3
21298: ARRAY
21299: PPUSH
21300: LD_EXP 82
21304: PUSH
21305: LD_VAR 0 2
21309: ARRAY
21310: PUSH
21311: LD_INT 4
21313: ARRAY
21314: PPUSH
21315: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21319: LD_VAR 0 4
21323: PPUSH
21324: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21328: LD_VAR 0 4
21332: PPUSH
21333: LD_VAR 0 2
21337: PPUSH
21338: CALL_OW 180
// end else
21342: GO 21457
// if GetControl ( vehicle ) = control_remote then
21344: LD_VAR 0 1
21348: PPUSH
21349: CALL_OW 263
21353: PUSH
21354: LD_INT 2
21356: EQUAL
21357: IFFALSE 21418
// begin wait ( 0 0$2 ) ;
21359: LD_INT 70
21361: PPUSH
21362: CALL_OW 67
// if Connect ( vehicle ) then
21366: LD_VAR 0 1
21370: PPUSH
21371: CALL 33887 0 1
21375: IFFALSE 21416
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_EXP 82
21386: PUSH
21387: LD_VAR 0 2
21391: ARRAY
21392: PUSH
21393: LD_INT 3
21395: ARRAY
21396: PPUSH
21397: LD_EXP 82
21401: PUSH
21402: LD_VAR 0 2
21406: ARRAY
21407: PUSH
21408: LD_INT 4
21410: ARRAY
21411: PPUSH
21412: CALL_OW 171
// end else
21416: GO 21457
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21418: LD_VAR 0 1
21422: PPUSH
21423: LD_EXP 82
21427: PUSH
21428: LD_VAR 0 2
21432: ARRAY
21433: PUSH
21434: LD_INT 3
21436: ARRAY
21437: PPUSH
21438: LD_EXP 82
21442: PUSH
21443: LD_VAR 0 2
21447: ARRAY
21448: PUSH
21449: LD_INT 4
21451: ARRAY
21452: PPUSH
21453: CALL_OW 171
// end ; end ;
21457: LD_VAR 0 3
21461: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21462: LD_INT 0
21464: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21465: LD_VAR 0 1
21469: PUSH
21470: LD_INT 250
21472: EQUAL
21473: PUSH
21474: LD_VAR 0 2
21478: PPUSH
21479: CALL_OW 264
21483: PUSH
21484: LD_EXP 102
21488: EQUAL
21489: AND
21490: IFFALSE 21511
// MinerPlaceMine ( unit , x , y ) ;
21492: LD_VAR 0 2
21496: PPUSH
21497: LD_VAR 0 4
21501: PPUSH
21502: LD_VAR 0 5
21506: PPUSH
21507: CALL 23910 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21511: LD_VAR 0 1
21515: PUSH
21516: LD_INT 251
21518: EQUAL
21519: PUSH
21520: LD_VAR 0 2
21524: PPUSH
21525: CALL_OW 264
21529: PUSH
21530: LD_EXP 102
21534: EQUAL
21535: AND
21536: IFFALSE 21557
// MinerDetonateMine ( unit , x , y ) ;
21538: LD_VAR 0 2
21542: PPUSH
21543: LD_VAR 0 4
21547: PPUSH
21548: LD_VAR 0 5
21552: PPUSH
21553: CALL 24187 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21557: LD_VAR 0 1
21561: PUSH
21562: LD_INT 252
21564: EQUAL
21565: PUSH
21566: LD_VAR 0 2
21570: PPUSH
21571: CALL_OW 264
21575: PUSH
21576: LD_EXP 102
21580: EQUAL
21581: AND
21582: IFFALSE 21603
// MinerCreateMinefield ( unit , x , y ) ;
21584: LD_VAR 0 2
21588: PPUSH
21589: LD_VAR 0 4
21593: PPUSH
21594: LD_VAR 0 5
21598: PPUSH
21599: CALL 24604 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21603: LD_VAR 0 1
21607: PUSH
21608: LD_INT 253
21610: EQUAL
21611: PUSH
21612: LD_VAR 0 2
21616: PPUSH
21617: CALL_OW 257
21621: PUSH
21622: LD_INT 5
21624: EQUAL
21625: AND
21626: IFFALSE 21647
// ComBinocular ( unit , x , y ) ;
21628: LD_VAR 0 2
21632: PPUSH
21633: LD_VAR 0 4
21637: PPUSH
21638: LD_VAR 0 5
21642: PPUSH
21643: CALL 24975 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21647: LD_VAR 0 1
21651: PUSH
21652: LD_INT 254
21654: EQUAL
21655: PUSH
21656: LD_VAR 0 2
21660: PPUSH
21661: CALL_OW 264
21665: PUSH
21666: LD_EXP 97
21670: EQUAL
21671: AND
21672: PUSH
21673: LD_VAR 0 3
21677: PPUSH
21678: CALL_OW 263
21682: PUSH
21683: LD_INT 3
21685: EQUAL
21686: AND
21687: IFFALSE 21703
// HackDestroyVehicle ( unit , selectedUnit ) ;
21689: LD_VAR 0 2
21693: PPUSH
21694: LD_VAR 0 3
21698: PPUSH
21699: CALL 23270 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21703: LD_VAR 0 1
21707: PUSH
21708: LD_INT 255
21710: EQUAL
21711: PUSH
21712: LD_VAR 0 2
21716: PPUSH
21717: CALL_OW 264
21721: PUSH
21722: LD_INT 14
21724: PUSH
21725: LD_INT 53
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: IN
21732: AND
21733: PUSH
21734: LD_VAR 0 4
21738: PPUSH
21739: LD_VAR 0 5
21743: PPUSH
21744: CALL_OW 488
21748: AND
21749: IFFALSE 21773
// CutTreeXYR ( unit , x , y , 12 ) ;
21751: LD_VAR 0 2
21755: PPUSH
21756: LD_VAR 0 4
21760: PPUSH
21761: LD_VAR 0 5
21765: PPUSH
21766: LD_INT 12
21768: PPUSH
21769: CALL 21836 0 4
// if cmd = 256 then
21773: LD_VAR 0 1
21777: PUSH
21778: LD_INT 256
21780: EQUAL
21781: IFFALSE 21802
// SetFactoryWaypoint ( unit , x , y ) ;
21783: LD_VAR 0 2
21787: PPUSH
21788: LD_VAR 0 4
21792: PPUSH
21793: LD_VAR 0 5
21797: PPUSH
21798: CALL 19771 0 3
// if cmd = 257 then
21802: LD_VAR 0 1
21806: PUSH
21807: LD_INT 257
21809: EQUAL
21810: IFFALSE 21831
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21812: LD_VAR 0 2
21816: PPUSH
21817: LD_VAR 0 4
21821: PPUSH
21822: LD_VAR 0 5
21826: PPUSH
21827: CALL 20133 0 3
// end ;
21831: LD_VAR 0 6
21835: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21836: LD_INT 0
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
21842: PPUSH
21843: PPUSH
21844: PPUSH
21845: PPUSH
21846: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21847: LD_VAR 0 1
21851: NOT
21852: PUSH
21853: LD_VAR 0 2
21857: PPUSH
21858: LD_VAR 0 3
21862: PPUSH
21863: CALL_OW 488
21867: NOT
21868: OR
21869: PUSH
21870: LD_VAR 0 4
21874: NOT
21875: OR
21876: IFFALSE 21880
// exit ;
21878: GO 22220
// list := [ ] ;
21880: LD_ADDR_VAR 0 13
21884: PUSH
21885: EMPTY
21886: ST_TO_ADDR
// if x - r < 0 then
21887: LD_VAR 0 2
21891: PUSH
21892: LD_VAR 0 4
21896: MINUS
21897: PUSH
21898: LD_INT 0
21900: LESS
21901: IFFALSE 21913
// min_x := 0 else
21903: LD_ADDR_VAR 0 7
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
21911: GO 21929
// min_x := x - r ;
21913: LD_ADDR_VAR 0 7
21917: PUSH
21918: LD_VAR 0 2
21922: PUSH
21923: LD_VAR 0 4
21927: MINUS
21928: ST_TO_ADDR
// if y - r < 0 then
21929: LD_VAR 0 3
21933: PUSH
21934: LD_VAR 0 4
21938: MINUS
21939: PUSH
21940: LD_INT 0
21942: LESS
21943: IFFALSE 21955
// min_y := 0 else
21945: LD_ADDR_VAR 0 8
21949: PUSH
21950: LD_INT 0
21952: ST_TO_ADDR
21953: GO 21971
// min_y := y - r ;
21955: LD_ADDR_VAR 0 8
21959: PUSH
21960: LD_VAR 0 3
21964: PUSH
21965: LD_VAR 0 4
21969: MINUS
21970: ST_TO_ADDR
// max_x := x + r ;
21971: LD_ADDR_VAR 0 9
21975: PUSH
21976: LD_VAR 0 2
21980: PUSH
21981: LD_VAR 0 4
21985: PLUS
21986: ST_TO_ADDR
// max_y := y + r ;
21987: LD_ADDR_VAR 0 10
21991: PUSH
21992: LD_VAR 0 3
21996: PUSH
21997: LD_VAR 0 4
22001: PLUS
22002: ST_TO_ADDR
// for _x = min_x to max_x do
22003: LD_ADDR_VAR 0 11
22007: PUSH
22008: DOUBLE
22009: LD_VAR 0 7
22013: DEC
22014: ST_TO_ADDR
22015: LD_VAR 0 9
22019: PUSH
22020: FOR_TO
22021: IFFALSE 22138
// for _y = min_y to max_y do
22023: LD_ADDR_VAR 0 12
22027: PUSH
22028: DOUBLE
22029: LD_VAR 0 8
22033: DEC
22034: ST_TO_ADDR
22035: LD_VAR 0 10
22039: PUSH
22040: FOR_TO
22041: IFFALSE 22134
// begin if not ValidHex ( _x , _y ) then
22043: LD_VAR 0 11
22047: PPUSH
22048: LD_VAR 0 12
22052: PPUSH
22053: CALL_OW 488
22057: NOT
22058: IFFALSE 22062
// continue ;
22060: GO 22040
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22062: LD_VAR 0 11
22066: PPUSH
22067: LD_VAR 0 12
22071: PPUSH
22072: CALL_OW 351
22076: PUSH
22077: LD_VAR 0 11
22081: PPUSH
22082: LD_VAR 0 12
22086: PPUSH
22087: CALL_OW 554
22091: AND
22092: IFFALSE 22132
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22094: LD_ADDR_VAR 0 13
22098: PUSH
22099: LD_VAR 0 13
22103: PPUSH
22104: LD_VAR 0 13
22108: PUSH
22109: LD_INT 1
22111: PLUS
22112: PPUSH
22113: LD_VAR 0 11
22117: PUSH
22118: LD_VAR 0 12
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PPUSH
22127: CALL_OW 2
22131: ST_TO_ADDR
// end ;
22132: GO 22040
22134: POP
22135: POP
22136: GO 22020
22138: POP
22139: POP
// if not list then
22140: LD_VAR 0 13
22144: NOT
22145: IFFALSE 22149
// exit ;
22147: GO 22220
// for i in list do
22149: LD_ADDR_VAR 0 6
22153: PUSH
22154: LD_VAR 0 13
22158: PUSH
22159: FOR_IN
22160: IFFALSE 22218
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22162: LD_VAR 0 1
22166: PPUSH
22167: LD_STRING M
22169: PUSH
22170: LD_VAR 0 6
22174: PUSH
22175: LD_INT 1
22177: ARRAY
22178: PUSH
22179: LD_VAR 0 6
22183: PUSH
22184: LD_INT 2
22186: ARRAY
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: LD_INT 0
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: PUSH
22209: EMPTY
22210: LIST
22211: PPUSH
22212: CALL_OW 447
22216: GO 22159
22218: POP
22219: POP
// end ;
22220: LD_VAR 0 5
22224: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22225: LD_EXP 85
22229: NOT
22230: IFFALSE 22280
22232: GO 22234
22234: DISABLE
// begin initHack := true ;
22235: LD_ADDR_EXP 85
22239: PUSH
22240: LD_INT 1
22242: ST_TO_ADDR
// hackTanks := [ ] ;
22243: LD_ADDR_EXP 86
22247: PUSH
22248: EMPTY
22249: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22250: LD_ADDR_EXP 87
22254: PUSH
22255: EMPTY
22256: ST_TO_ADDR
// hackLimit := 3 ;
22257: LD_ADDR_EXP 88
22261: PUSH
22262: LD_INT 3
22264: ST_TO_ADDR
// hackDist := 12 ;
22265: LD_ADDR_EXP 89
22269: PUSH
22270: LD_INT 12
22272: ST_TO_ADDR
// hackCounter := [ ] ;
22273: LD_ADDR_EXP 90
22277: PUSH
22278: EMPTY
22279: ST_TO_ADDR
// end ;
22280: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22281: LD_EXP 85
22285: PUSH
22286: LD_INT 34
22288: PUSH
22289: LD_EXP 97
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PPUSH
22298: CALL_OW 69
22302: AND
22303: IFFALSE 22558
22305: GO 22307
22307: DISABLE
22308: LD_INT 0
22310: PPUSH
22311: PPUSH
// begin enable ;
22312: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22313: LD_ADDR_VAR 0 1
22317: PUSH
22318: LD_INT 34
22320: PUSH
22321: LD_EXP 97
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 69
22334: PUSH
22335: FOR_IN
22336: IFFALSE 22556
// begin if not i in hackTanks then
22338: LD_VAR 0 1
22342: PUSH
22343: LD_EXP 86
22347: IN
22348: NOT
22349: IFFALSE 22432
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22351: LD_ADDR_EXP 86
22355: PUSH
22356: LD_EXP 86
22360: PPUSH
22361: LD_EXP 86
22365: PUSH
22366: LD_INT 1
22368: PLUS
22369: PPUSH
22370: LD_VAR 0 1
22374: PPUSH
22375: CALL_OW 1
22379: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22380: LD_ADDR_EXP 87
22384: PUSH
22385: LD_EXP 87
22389: PPUSH
22390: LD_EXP 87
22394: PUSH
22395: LD_INT 1
22397: PLUS
22398: PPUSH
22399: EMPTY
22400: PPUSH
22401: CALL_OW 1
22405: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22406: LD_ADDR_EXP 90
22410: PUSH
22411: LD_EXP 90
22415: PPUSH
22416: LD_EXP 90
22420: PUSH
22421: LD_INT 1
22423: PLUS
22424: PPUSH
22425: EMPTY
22426: PPUSH
22427: CALL_OW 1
22431: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 302
22441: NOT
22442: IFFALSE 22455
// begin HackUnlinkAll ( i ) ;
22444: LD_VAR 0 1
22448: PPUSH
22449: CALL 22561 0 1
// continue ;
22453: GO 22335
// end ; HackCheckCapturedStatus ( i ) ;
22455: LD_VAR 0 1
22459: PPUSH
22460: CALL 23004 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22464: LD_ADDR_VAR 0 2
22468: PUSH
22469: LD_INT 81
22471: PUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 255
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 33
22488: PUSH
22489: LD_INT 3
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 91
22498: PUSH
22499: LD_VAR 0 1
22503: PUSH
22504: LD_EXP 89
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 50
22516: PUSH
22517: EMPTY
22518: LIST
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: PPUSH
22526: CALL_OW 69
22530: ST_TO_ADDR
// if not tmp then
22531: LD_VAR 0 2
22535: NOT
22536: IFFALSE 22540
// continue ;
22538: GO 22335
// HackLink ( i , tmp ) ;
22540: LD_VAR 0 1
22544: PPUSH
22545: LD_VAR 0 2
22549: PPUSH
22550: CALL 22697 0 2
// end ;
22554: GO 22335
22556: POP
22557: POP
// end ;
22558: PPOPN 2
22560: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22561: LD_INT 0
22563: PPUSH
22564: PPUSH
22565: PPUSH
// if not hack in hackTanks then
22566: LD_VAR 0 1
22570: PUSH
22571: LD_EXP 86
22575: IN
22576: NOT
22577: IFFALSE 22581
// exit ;
22579: GO 22692
// index := GetElementIndex ( hackTanks , hack ) ;
22581: LD_ADDR_VAR 0 4
22585: PUSH
22586: LD_EXP 86
22590: PPUSH
22591: LD_VAR 0 1
22595: PPUSH
22596: CALL 30701 0 2
22600: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22601: LD_EXP 87
22605: PUSH
22606: LD_VAR 0 4
22610: ARRAY
22611: IFFALSE 22692
// begin for i in hackTanksCaptured [ index ] do
22613: LD_ADDR_VAR 0 3
22617: PUSH
22618: LD_EXP 87
22622: PUSH
22623: LD_VAR 0 4
22627: ARRAY
22628: PUSH
22629: FOR_IN
22630: IFFALSE 22656
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22632: LD_VAR 0 3
22636: PUSH
22637: LD_INT 1
22639: ARRAY
22640: PPUSH
22641: LD_VAR 0 3
22645: PUSH
22646: LD_INT 2
22648: ARRAY
22649: PPUSH
22650: CALL_OW 235
22654: GO 22629
22656: POP
22657: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22658: LD_ADDR_EXP 87
22662: PUSH
22663: LD_EXP 87
22667: PPUSH
22668: LD_VAR 0 4
22672: PPUSH
22673: EMPTY
22674: PPUSH
22675: CALL_OW 1
22679: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22680: LD_VAR 0 1
22684: PPUSH
22685: LD_INT 0
22687: PPUSH
22688: CALL_OW 505
// end ; end ;
22692: LD_VAR 0 2
22696: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22697: LD_INT 0
22699: PPUSH
22700: PPUSH
22701: PPUSH
// if not hack in hackTanks or not vehicles then
22702: LD_VAR 0 1
22706: PUSH
22707: LD_EXP 86
22711: IN
22712: NOT
22713: PUSH
22714: LD_VAR 0 2
22718: NOT
22719: OR
22720: IFFALSE 22724
// exit ;
22722: GO 22999
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22724: LD_ADDR_VAR 0 2
22728: PUSH
22729: LD_VAR 0 1
22733: PPUSH
22734: LD_VAR 0 2
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: LD_INT 1
22744: PPUSH
22745: CALL 31351 0 4
22749: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22750: LD_ADDR_VAR 0 5
22754: PUSH
22755: LD_EXP 86
22759: PPUSH
22760: LD_VAR 0 1
22764: PPUSH
22765: CALL 30701 0 2
22769: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22770: LD_EXP 87
22774: PUSH
22775: LD_VAR 0 5
22779: ARRAY
22780: PUSH
22781: LD_EXP 88
22785: LESS
22786: IFFALSE 22975
// begin for i := 1 to vehicles do
22788: LD_ADDR_VAR 0 4
22792: PUSH
22793: DOUBLE
22794: LD_INT 1
22796: DEC
22797: ST_TO_ADDR
22798: LD_VAR 0 2
22802: PUSH
22803: FOR_TO
22804: IFFALSE 22973
// begin if hackTanksCaptured [ index ] = hackLimit then
22806: LD_EXP 87
22810: PUSH
22811: LD_VAR 0 5
22815: ARRAY
22816: PUSH
22817: LD_EXP 88
22821: EQUAL
22822: IFFALSE 22826
// break ;
22824: GO 22973
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22826: LD_ADDR_EXP 90
22830: PUSH
22831: LD_EXP 90
22835: PPUSH
22836: LD_VAR 0 5
22840: PPUSH
22841: LD_EXP 90
22845: PUSH
22846: LD_VAR 0 5
22850: ARRAY
22851: PUSH
22852: LD_INT 1
22854: PLUS
22855: PPUSH
22856: CALL_OW 1
22860: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22861: LD_ADDR_EXP 87
22865: PUSH
22866: LD_EXP 87
22870: PPUSH
22871: LD_VAR 0 5
22875: PUSH
22876: LD_EXP 87
22880: PUSH
22881: LD_VAR 0 5
22885: ARRAY
22886: PUSH
22887: LD_INT 1
22889: PLUS
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PPUSH
22895: LD_VAR 0 2
22899: PUSH
22900: LD_VAR 0 4
22904: ARRAY
22905: PUSH
22906: LD_VAR 0 2
22910: PUSH
22911: LD_VAR 0 4
22915: ARRAY
22916: PPUSH
22917: CALL_OW 255
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PPUSH
22926: CALL 30916 0 3
22930: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22931: LD_VAR 0 2
22935: PUSH
22936: LD_VAR 0 4
22940: ARRAY
22941: PPUSH
22942: LD_VAR 0 1
22946: PPUSH
22947: CALL_OW 255
22951: PPUSH
22952: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22956: LD_VAR 0 2
22960: PUSH
22961: LD_VAR 0 4
22965: ARRAY
22966: PPUSH
22967: CALL_OW 141
// end ;
22971: GO 22803
22973: POP
22974: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22975: LD_VAR 0 1
22979: PPUSH
22980: LD_EXP 87
22984: PUSH
22985: LD_VAR 0 5
22989: ARRAY
22990: PUSH
22991: LD_INT 0
22993: PLUS
22994: PPUSH
22995: CALL_OW 505
// end ;
22999: LD_VAR 0 3
23003: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23004: LD_INT 0
23006: PPUSH
23007: PPUSH
23008: PPUSH
23009: PPUSH
// if not hack in hackTanks then
23010: LD_VAR 0 1
23014: PUSH
23015: LD_EXP 86
23019: IN
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23265
// index := GetElementIndex ( hackTanks , hack ) ;
23025: LD_ADDR_VAR 0 4
23029: PUSH
23030: LD_EXP 86
23034: PPUSH
23035: LD_VAR 0 1
23039: PPUSH
23040: CALL 30701 0 2
23044: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23045: LD_ADDR_VAR 0 3
23049: PUSH
23050: DOUBLE
23051: LD_EXP 87
23055: PUSH
23056: LD_VAR 0 4
23060: ARRAY
23061: INC
23062: ST_TO_ADDR
23063: LD_INT 1
23065: PUSH
23066: FOR_DOWNTO
23067: IFFALSE 23239
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23069: LD_ADDR_VAR 0 5
23073: PUSH
23074: LD_EXP 87
23078: PUSH
23079: LD_VAR 0 4
23083: ARRAY
23084: PUSH
23085: LD_VAR 0 3
23089: ARRAY
23090: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23091: LD_VAR 0 5
23095: PUSH
23096: LD_INT 1
23098: ARRAY
23099: PPUSH
23100: CALL_OW 302
23104: NOT
23105: PUSH
23106: LD_VAR 0 5
23110: PUSH
23111: LD_INT 1
23113: ARRAY
23114: PPUSH
23115: CALL_OW 255
23119: PUSH
23120: LD_VAR 0 1
23124: PPUSH
23125: CALL_OW 255
23129: NONEQUAL
23130: OR
23131: IFFALSE 23237
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23133: LD_VAR 0 5
23137: PUSH
23138: LD_INT 1
23140: ARRAY
23141: PPUSH
23142: CALL_OW 305
23146: PUSH
23147: LD_VAR 0 5
23151: PUSH
23152: LD_INT 1
23154: ARRAY
23155: PPUSH
23156: CALL_OW 255
23160: PUSH
23161: LD_VAR 0 1
23165: PPUSH
23166: CALL_OW 255
23170: EQUAL
23171: AND
23172: IFFALSE 23196
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23174: LD_VAR 0 5
23178: PUSH
23179: LD_INT 1
23181: ARRAY
23182: PPUSH
23183: LD_VAR 0 5
23187: PUSH
23188: LD_INT 2
23190: ARRAY
23191: PPUSH
23192: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23196: LD_ADDR_EXP 87
23200: PUSH
23201: LD_EXP 87
23205: PPUSH
23206: LD_VAR 0 4
23210: PPUSH
23211: LD_EXP 87
23215: PUSH
23216: LD_VAR 0 4
23220: ARRAY
23221: PPUSH
23222: LD_VAR 0 3
23226: PPUSH
23227: CALL_OW 3
23231: PPUSH
23232: CALL_OW 1
23236: ST_TO_ADDR
// end ; end ;
23237: GO 23066
23239: POP
23240: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23241: LD_VAR 0 1
23245: PPUSH
23246: LD_EXP 87
23250: PUSH
23251: LD_VAR 0 4
23255: ARRAY
23256: PUSH
23257: LD_INT 0
23259: PLUS
23260: PPUSH
23261: CALL_OW 505
// end ;
23265: LD_VAR 0 2
23269: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23270: LD_INT 0
23272: PPUSH
23273: PPUSH
23274: PPUSH
23275: PPUSH
// if not hack in hackTanks then
23276: LD_VAR 0 1
23280: PUSH
23281: LD_EXP 86
23285: IN
23286: NOT
23287: IFFALSE 23291
// exit ;
23289: GO 23376
// index := GetElementIndex ( hackTanks , hack ) ;
23291: LD_ADDR_VAR 0 5
23295: PUSH
23296: LD_EXP 86
23300: PPUSH
23301: LD_VAR 0 1
23305: PPUSH
23306: CALL 30701 0 2
23310: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23311: LD_ADDR_VAR 0 4
23315: PUSH
23316: DOUBLE
23317: LD_INT 1
23319: DEC
23320: ST_TO_ADDR
23321: LD_EXP 87
23325: PUSH
23326: LD_VAR 0 5
23330: ARRAY
23331: PUSH
23332: FOR_TO
23333: IFFALSE 23374
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23335: LD_EXP 87
23339: PUSH
23340: LD_VAR 0 5
23344: ARRAY
23345: PUSH
23346: LD_VAR 0 4
23350: ARRAY
23351: PUSH
23352: LD_INT 1
23354: ARRAY
23355: PUSH
23356: LD_VAR 0 2
23360: EQUAL
23361: IFFALSE 23372
// KillUnit ( vehicle ) ;
23363: LD_VAR 0 2
23367: PPUSH
23368: CALL_OW 66
23372: GO 23332
23374: POP
23375: POP
// end ;
23376: LD_VAR 0 3
23380: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23381: LD_EXP 91
23385: NOT
23386: IFFALSE 23421
23388: GO 23390
23390: DISABLE
// begin initMiner := true ;
23391: LD_ADDR_EXP 91
23395: PUSH
23396: LD_INT 1
23398: ST_TO_ADDR
// minersList := [ ] ;
23399: LD_ADDR_EXP 92
23403: PUSH
23404: EMPTY
23405: ST_TO_ADDR
// minerMinesList := [ ] ;
23406: LD_ADDR_EXP 93
23410: PUSH
23411: EMPTY
23412: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23413: LD_ADDR_EXP 94
23417: PUSH
23418: LD_INT 5
23420: ST_TO_ADDR
// end ;
23421: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23422: LD_EXP 91
23426: PUSH
23427: LD_INT 34
23429: PUSH
23430: LD_EXP 102
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PPUSH
23439: CALL_OW 69
23443: AND
23444: IFFALSE 23907
23446: GO 23448
23448: DISABLE
23449: LD_INT 0
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
// begin enable ;
23455: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23456: LD_ADDR_VAR 0 1
23460: PUSH
23461: LD_INT 34
23463: PUSH
23464: LD_EXP 102
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PPUSH
23473: CALL_OW 69
23477: PUSH
23478: FOR_IN
23479: IFFALSE 23551
// begin if not i in minersList then
23481: LD_VAR 0 1
23485: PUSH
23486: LD_EXP 92
23490: IN
23491: NOT
23492: IFFALSE 23549
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23494: LD_ADDR_EXP 92
23498: PUSH
23499: LD_EXP 92
23503: PPUSH
23504: LD_EXP 92
23508: PUSH
23509: LD_INT 1
23511: PLUS
23512: PPUSH
23513: LD_VAR 0 1
23517: PPUSH
23518: CALL_OW 1
23522: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23523: LD_ADDR_EXP 93
23527: PUSH
23528: LD_EXP 93
23532: PPUSH
23533: LD_EXP 93
23537: PUSH
23538: LD_INT 1
23540: PLUS
23541: PPUSH
23542: EMPTY
23543: PPUSH
23544: CALL_OW 1
23548: ST_TO_ADDR
// end end ;
23549: GO 23478
23551: POP
23552: POP
// for i := minerMinesList downto 1 do
23553: LD_ADDR_VAR 0 1
23557: PUSH
23558: DOUBLE
23559: LD_EXP 93
23563: INC
23564: ST_TO_ADDR
23565: LD_INT 1
23567: PUSH
23568: FOR_DOWNTO
23569: IFFALSE 23905
// begin if IsLive ( minersList [ i ] ) then
23571: LD_EXP 92
23575: PUSH
23576: LD_VAR 0 1
23580: ARRAY
23581: PPUSH
23582: CALL_OW 300
23586: IFFALSE 23614
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23588: LD_EXP 92
23592: PUSH
23593: LD_VAR 0 1
23597: ARRAY
23598: PPUSH
23599: LD_EXP 93
23603: PUSH
23604: LD_VAR 0 1
23608: ARRAY
23609: PPUSH
23610: CALL_OW 505
// if not minerMinesList [ i ] then
23614: LD_EXP 93
23618: PUSH
23619: LD_VAR 0 1
23623: ARRAY
23624: NOT
23625: IFFALSE 23629
// continue ;
23627: GO 23568
// for j := minerMinesList [ i ] downto 1 do
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: DOUBLE
23635: LD_EXP 93
23639: PUSH
23640: LD_VAR 0 1
23644: ARRAY
23645: INC
23646: ST_TO_ADDR
23647: LD_INT 1
23649: PUSH
23650: FOR_DOWNTO
23651: IFFALSE 23901
// begin side := GetSide ( minersList [ i ] ) ;
23653: LD_ADDR_VAR 0 3
23657: PUSH
23658: LD_EXP 92
23662: PUSH
23663: LD_VAR 0 1
23667: ARRAY
23668: PPUSH
23669: CALL_OW 255
23673: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23674: LD_ADDR_VAR 0 4
23678: PUSH
23679: LD_EXP 93
23683: PUSH
23684: LD_VAR 0 1
23688: ARRAY
23689: PUSH
23690: LD_VAR 0 2
23694: ARRAY
23695: PUSH
23696: LD_INT 1
23698: ARRAY
23699: PPUSH
23700: LD_EXP 93
23704: PUSH
23705: LD_VAR 0 1
23709: ARRAY
23710: PUSH
23711: LD_VAR 0 2
23715: ARRAY
23716: PUSH
23717: LD_INT 2
23719: ARRAY
23720: PPUSH
23721: CALL_OW 428
23725: ST_TO_ADDR
// if not tmp then
23726: LD_VAR 0 4
23730: NOT
23731: IFFALSE 23735
// continue ;
23733: GO 23650
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23735: LD_VAR 0 4
23739: PUSH
23740: LD_INT 81
23742: PUSH
23743: LD_VAR 0 3
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PPUSH
23752: CALL_OW 69
23756: IN
23757: PUSH
23758: LD_EXP 93
23762: PUSH
23763: LD_VAR 0 1
23767: ARRAY
23768: PUSH
23769: LD_VAR 0 2
23773: ARRAY
23774: PUSH
23775: LD_INT 1
23777: ARRAY
23778: PPUSH
23779: LD_EXP 93
23783: PUSH
23784: LD_VAR 0 1
23788: ARRAY
23789: PUSH
23790: LD_VAR 0 2
23794: ARRAY
23795: PUSH
23796: LD_INT 2
23798: ARRAY
23799: PPUSH
23800: CALL_OW 458
23804: AND
23805: IFFALSE 23899
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23807: LD_EXP 93
23811: PUSH
23812: LD_VAR 0 1
23816: ARRAY
23817: PUSH
23818: LD_VAR 0 2
23822: ARRAY
23823: PUSH
23824: LD_INT 1
23826: ARRAY
23827: PPUSH
23828: LD_EXP 93
23832: PUSH
23833: LD_VAR 0 1
23837: ARRAY
23838: PUSH
23839: LD_VAR 0 2
23843: ARRAY
23844: PUSH
23845: LD_INT 2
23847: ARRAY
23848: PPUSH
23849: LD_VAR 0 3
23853: PPUSH
23854: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23858: LD_ADDR_EXP 93
23862: PUSH
23863: LD_EXP 93
23867: PPUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: LD_EXP 93
23877: PUSH
23878: LD_VAR 0 1
23882: ARRAY
23883: PPUSH
23884: LD_VAR 0 2
23888: PPUSH
23889: CALL_OW 3
23893: PPUSH
23894: CALL_OW 1
23898: ST_TO_ADDR
// end ; end ;
23899: GO 23650
23901: POP
23902: POP
// end ;
23903: GO 23568
23905: POP
23906: POP
// end ;
23907: PPOPN 4
23909: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23910: LD_INT 0
23912: PPUSH
23913: PPUSH
// result := false ;
23914: LD_ADDR_VAR 0 4
23918: PUSH
23919: LD_INT 0
23921: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23922: LD_VAR 0 1
23926: PPUSH
23927: CALL_OW 264
23931: PUSH
23932: LD_EXP 102
23936: EQUAL
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 24182
// index := GetElementIndex ( minersList , unit ) ;
23942: LD_ADDR_VAR 0 5
23946: PUSH
23947: LD_EXP 92
23951: PPUSH
23952: LD_VAR 0 1
23956: PPUSH
23957: CALL 30701 0 2
23961: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23962: LD_EXP 93
23966: PUSH
23967: LD_VAR 0 5
23971: ARRAY
23972: PUSH
23973: LD_EXP 94
23977: GREATEREQUAL
23978: IFFALSE 23982
// exit ;
23980: GO 24182
// ComMoveXY ( unit , x , y ) ;
23982: LD_VAR 0 1
23986: PPUSH
23987: LD_VAR 0 2
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24001: LD_INT 35
24003: PPUSH
24004: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24008: LD_VAR 0 1
24012: PPUSH
24013: LD_VAR 0 2
24017: PPUSH
24018: LD_VAR 0 3
24022: PPUSH
24023: CALL 61987 0 3
24027: NOT
24028: PUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL_OW 314
24038: AND
24039: IFFALSE 24043
// exit ;
24041: GO 24182
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24043: LD_VAR 0 2
24047: PPUSH
24048: LD_VAR 0 3
24052: PPUSH
24053: CALL_OW 428
24057: PUSH
24058: LD_VAR 0 1
24062: EQUAL
24063: PUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 314
24073: NOT
24074: AND
24075: IFFALSE 24001
// PlaySoundXY ( x , y , PlantMine ) ;
24077: LD_VAR 0 2
24081: PPUSH
24082: LD_VAR 0 3
24086: PPUSH
24087: LD_STRING PlantMine
24089: PPUSH
24090: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24094: LD_VAR 0 2
24098: PPUSH
24099: LD_VAR 0 3
24103: PPUSH
24104: LD_VAR 0 1
24108: PPUSH
24109: CALL_OW 255
24113: PPUSH
24114: LD_INT 0
24116: PPUSH
24117: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24121: LD_ADDR_EXP 93
24125: PUSH
24126: LD_EXP 93
24130: PPUSH
24131: LD_VAR 0 5
24135: PUSH
24136: LD_EXP 93
24140: PUSH
24141: LD_VAR 0 5
24145: ARRAY
24146: PUSH
24147: LD_INT 1
24149: PLUS
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PPUSH
24155: LD_VAR 0 2
24159: PUSH
24160: LD_VAR 0 3
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PPUSH
24169: CALL 30916 0 3
24173: ST_TO_ADDR
// result := true ;
24174: LD_ADDR_VAR 0 4
24178: PUSH
24179: LD_INT 1
24181: ST_TO_ADDR
// end ;
24182: LD_VAR 0 4
24186: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24187: LD_INT 0
24189: PPUSH
24190: PPUSH
24191: PPUSH
// if not unit in minersList then
24192: LD_VAR 0 1
24196: PUSH
24197: LD_EXP 92
24201: IN
24202: NOT
24203: IFFALSE 24207
// exit ;
24205: GO 24599
// index := GetElementIndex ( minersList , unit ) ;
24207: LD_ADDR_VAR 0 6
24211: PUSH
24212: LD_EXP 92
24216: PPUSH
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL 30701 0 2
24226: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24227: LD_ADDR_VAR 0 5
24231: PUSH
24232: DOUBLE
24233: LD_EXP 93
24237: PUSH
24238: LD_VAR 0 6
24242: ARRAY
24243: INC
24244: ST_TO_ADDR
24245: LD_INT 1
24247: PUSH
24248: FOR_DOWNTO
24249: IFFALSE 24410
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24251: LD_EXP 93
24255: PUSH
24256: LD_VAR 0 6
24260: ARRAY
24261: PUSH
24262: LD_VAR 0 5
24266: ARRAY
24267: PUSH
24268: LD_INT 1
24270: ARRAY
24271: PUSH
24272: LD_VAR 0 2
24276: EQUAL
24277: PUSH
24278: LD_EXP 93
24282: PUSH
24283: LD_VAR 0 6
24287: ARRAY
24288: PUSH
24289: LD_VAR 0 5
24293: ARRAY
24294: PUSH
24295: LD_INT 2
24297: ARRAY
24298: PUSH
24299: LD_VAR 0 3
24303: EQUAL
24304: AND
24305: IFFALSE 24408
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24307: LD_EXP 93
24311: PUSH
24312: LD_VAR 0 6
24316: ARRAY
24317: PUSH
24318: LD_VAR 0 5
24322: ARRAY
24323: PUSH
24324: LD_INT 1
24326: ARRAY
24327: PPUSH
24328: LD_EXP 93
24332: PUSH
24333: LD_VAR 0 6
24337: ARRAY
24338: PUSH
24339: LD_VAR 0 5
24343: ARRAY
24344: PUSH
24345: LD_INT 2
24347: ARRAY
24348: PPUSH
24349: LD_VAR 0 1
24353: PPUSH
24354: CALL_OW 255
24358: PPUSH
24359: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24363: LD_ADDR_EXP 93
24367: PUSH
24368: LD_EXP 93
24372: PPUSH
24373: LD_VAR 0 6
24377: PPUSH
24378: LD_EXP 93
24382: PUSH
24383: LD_VAR 0 6
24387: ARRAY
24388: PPUSH
24389: LD_VAR 0 5
24393: PPUSH
24394: CALL_OW 3
24398: PPUSH
24399: CALL_OW 1
24403: ST_TO_ADDR
// exit ;
24404: POP
24405: POP
24406: GO 24599
// end ; end ;
24408: GO 24248
24410: POP
24411: POP
// for i := minerMinesList [ index ] downto 1 do
24412: LD_ADDR_VAR 0 5
24416: PUSH
24417: DOUBLE
24418: LD_EXP 93
24422: PUSH
24423: LD_VAR 0 6
24427: ARRAY
24428: INC
24429: ST_TO_ADDR
24430: LD_INT 1
24432: PUSH
24433: FOR_DOWNTO
24434: IFFALSE 24597
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24436: LD_EXP 93
24440: PUSH
24441: LD_VAR 0 6
24445: ARRAY
24446: PUSH
24447: LD_VAR 0 5
24451: ARRAY
24452: PUSH
24453: LD_INT 1
24455: ARRAY
24456: PPUSH
24457: LD_EXP 93
24461: PUSH
24462: LD_VAR 0 6
24466: ARRAY
24467: PUSH
24468: LD_VAR 0 5
24472: ARRAY
24473: PUSH
24474: LD_INT 2
24476: ARRAY
24477: PPUSH
24478: LD_VAR 0 2
24482: PPUSH
24483: LD_VAR 0 3
24487: PPUSH
24488: CALL_OW 298
24492: PUSH
24493: LD_INT 6
24495: LESS
24496: IFFALSE 24595
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24498: LD_EXP 93
24502: PUSH
24503: LD_VAR 0 6
24507: ARRAY
24508: PUSH
24509: LD_VAR 0 5
24513: ARRAY
24514: PUSH
24515: LD_INT 1
24517: ARRAY
24518: PPUSH
24519: LD_EXP 93
24523: PUSH
24524: LD_VAR 0 6
24528: ARRAY
24529: PUSH
24530: LD_VAR 0 5
24534: ARRAY
24535: PUSH
24536: LD_INT 2
24538: ARRAY
24539: PPUSH
24540: LD_VAR 0 1
24544: PPUSH
24545: CALL_OW 255
24549: PPUSH
24550: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24554: LD_ADDR_EXP 93
24558: PUSH
24559: LD_EXP 93
24563: PPUSH
24564: LD_VAR 0 6
24568: PPUSH
24569: LD_EXP 93
24573: PUSH
24574: LD_VAR 0 6
24578: ARRAY
24579: PPUSH
24580: LD_VAR 0 5
24584: PPUSH
24585: CALL_OW 3
24589: PPUSH
24590: CALL_OW 1
24594: ST_TO_ADDR
// end ; end ;
24595: GO 24433
24597: POP
24598: POP
// end ;
24599: LD_VAR 0 4
24603: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24604: LD_INT 0
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24615: LD_VAR 0 1
24619: PPUSH
24620: CALL_OW 264
24624: PUSH
24625: LD_EXP 102
24629: EQUAL
24630: NOT
24631: PUSH
24632: LD_VAR 0 1
24636: PUSH
24637: LD_EXP 92
24641: IN
24642: NOT
24643: OR
24644: IFFALSE 24648
// exit ;
24646: GO 24970
// index := GetElementIndex ( minersList , unit ) ;
24648: LD_ADDR_VAR 0 6
24652: PUSH
24653: LD_EXP 92
24657: PPUSH
24658: LD_VAR 0 1
24662: PPUSH
24663: CALL 30701 0 2
24667: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24668: LD_ADDR_VAR 0 8
24672: PUSH
24673: LD_EXP 94
24677: PUSH
24678: LD_EXP 93
24682: PUSH
24683: LD_VAR 0 6
24687: ARRAY
24688: MINUS
24689: ST_TO_ADDR
// if not minesFreeAmount then
24690: LD_VAR 0 8
24694: NOT
24695: IFFALSE 24699
// exit ;
24697: GO 24970
// tmp := [ ] ;
24699: LD_ADDR_VAR 0 7
24703: PUSH
24704: EMPTY
24705: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24706: LD_ADDR_VAR 0 5
24710: PUSH
24711: DOUBLE
24712: LD_INT 1
24714: DEC
24715: ST_TO_ADDR
24716: LD_VAR 0 8
24720: PUSH
24721: FOR_TO
24722: IFFALSE 24917
// begin _d := rand ( 0 , 5 ) ;
24724: LD_ADDR_VAR 0 11
24728: PUSH
24729: LD_INT 0
24731: PPUSH
24732: LD_INT 5
24734: PPUSH
24735: CALL_OW 12
24739: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24740: LD_ADDR_VAR 0 12
24744: PUSH
24745: LD_INT 2
24747: PPUSH
24748: LD_INT 6
24750: PPUSH
24751: CALL_OW 12
24755: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24756: LD_ADDR_VAR 0 9
24760: PUSH
24761: LD_VAR 0 2
24765: PPUSH
24766: LD_VAR 0 11
24770: PPUSH
24771: LD_VAR 0 12
24775: PPUSH
24776: CALL_OW 272
24780: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24781: LD_ADDR_VAR 0 10
24785: PUSH
24786: LD_VAR 0 3
24790: PPUSH
24791: LD_VAR 0 11
24795: PPUSH
24796: LD_VAR 0 12
24800: PPUSH
24801: CALL_OW 273
24805: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24806: LD_VAR 0 9
24810: PPUSH
24811: LD_VAR 0 10
24815: PPUSH
24816: CALL_OW 488
24820: PUSH
24821: LD_VAR 0 9
24825: PUSH
24826: LD_VAR 0 10
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_VAR 0 7
24839: IN
24840: NOT
24841: AND
24842: PUSH
24843: LD_VAR 0 9
24847: PPUSH
24848: LD_VAR 0 10
24852: PPUSH
24853: CALL_OW 458
24857: NOT
24858: AND
24859: IFFALSE 24901
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24861: LD_ADDR_VAR 0 7
24865: PUSH
24866: LD_VAR 0 7
24870: PPUSH
24871: LD_VAR 0 7
24875: PUSH
24876: LD_INT 1
24878: PLUS
24879: PPUSH
24880: LD_VAR 0 9
24884: PUSH
24885: LD_VAR 0 10
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 1
24898: ST_TO_ADDR
24899: GO 24915
// i := i - 1 ;
24901: LD_ADDR_VAR 0 5
24905: PUSH
24906: LD_VAR 0 5
24910: PUSH
24911: LD_INT 1
24913: MINUS
24914: ST_TO_ADDR
// end ;
24915: GO 24721
24917: POP
24918: POP
// for i in tmp do
24919: LD_ADDR_VAR 0 5
24923: PUSH
24924: LD_VAR 0 7
24928: PUSH
24929: FOR_IN
24930: IFFALSE 24968
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24932: LD_VAR 0 1
24936: PPUSH
24937: LD_VAR 0 5
24941: PUSH
24942: LD_INT 1
24944: ARRAY
24945: PPUSH
24946: LD_VAR 0 5
24950: PUSH
24951: LD_INT 2
24953: ARRAY
24954: PPUSH
24955: CALL 23910 0 3
24959: NOT
24960: IFFALSE 24966
// exit ;
24962: POP
24963: POP
24964: GO 24970
24966: GO 24929
24968: POP
24969: POP
// end ;
24970: LD_VAR 0 4
24974: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24975: LD_INT 0
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
24982: PPUSH
24983: PPUSH
// if not GetClass ( unit ) = class_sniper then
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 257
24993: PUSH
24994: LD_INT 5
24996: EQUAL
24997: NOT
24998: IFFALSE 25002
// exit ;
25000: GO 25390
// dist := 8 ;
25002: LD_ADDR_VAR 0 5
25006: PUSH
25007: LD_INT 8
25009: ST_TO_ADDR
// viewRange := 12 ;
25010: LD_ADDR_VAR 0 7
25014: PUSH
25015: LD_INT 12
25017: ST_TO_ADDR
// side := GetSide ( unit ) ;
25018: LD_ADDR_VAR 0 6
25022: PUSH
25023: LD_VAR 0 1
25027: PPUSH
25028: CALL_OW 255
25032: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25033: LD_INT 61
25035: PPUSH
25036: LD_VAR 0 6
25040: PPUSH
25041: CALL_OW 321
25045: PUSH
25046: LD_INT 2
25048: EQUAL
25049: IFFALSE 25059
// viewRange := 16 ;
25051: LD_ADDR_VAR 0 7
25055: PUSH
25056: LD_INT 16
25058: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25059: LD_VAR 0 1
25063: PPUSH
25064: LD_VAR 0 2
25068: PPUSH
25069: LD_VAR 0 3
25073: PPUSH
25074: CALL_OW 297
25078: PUSH
25079: LD_VAR 0 5
25083: GREATER
25084: IFFALSE 25163
// begin ComMoveXY ( unit , x , y ) ;
25086: LD_VAR 0 1
25090: PPUSH
25091: LD_VAR 0 2
25095: PPUSH
25096: LD_VAR 0 3
25100: PPUSH
25101: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25105: LD_INT 35
25107: PPUSH
25108: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25112: LD_VAR 0 1
25116: PPUSH
25117: LD_VAR 0 2
25121: PPUSH
25122: LD_VAR 0 3
25126: PPUSH
25127: CALL 61987 0 3
25131: NOT
25132: IFFALSE 25136
// exit ;
25134: GO 25390
// until GetDistUnitXY ( unit , x , y ) < dist ;
25136: LD_VAR 0 1
25140: PPUSH
25141: LD_VAR 0 2
25145: PPUSH
25146: LD_VAR 0 3
25150: PPUSH
25151: CALL_OW 297
25155: PUSH
25156: LD_VAR 0 5
25160: LESS
25161: IFFALSE 25105
// end ; ComTurnXY ( unit , x , y ) ;
25163: LD_VAR 0 1
25167: PPUSH
25168: LD_VAR 0 2
25172: PPUSH
25173: LD_VAR 0 3
25177: PPUSH
25178: CALL_OW 118
// wait ( 5 ) ;
25182: LD_INT 5
25184: PPUSH
25185: CALL_OW 67
// _d := GetDir ( unit ) ;
25189: LD_ADDR_VAR 0 10
25193: PUSH
25194: LD_VAR 0 1
25198: PPUSH
25199: CALL_OW 254
25203: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25204: LD_ADDR_VAR 0 8
25208: PUSH
25209: LD_VAR 0 1
25213: PPUSH
25214: CALL_OW 250
25218: PPUSH
25219: LD_VAR 0 10
25223: PPUSH
25224: LD_VAR 0 5
25228: PPUSH
25229: CALL_OW 272
25233: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25234: LD_ADDR_VAR 0 9
25238: PUSH
25239: LD_VAR 0 1
25243: PPUSH
25244: CALL_OW 251
25248: PPUSH
25249: LD_VAR 0 10
25253: PPUSH
25254: LD_VAR 0 5
25258: PPUSH
25259: CALL_OW 273
25263: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25264: LD_VAR 0 8
25268: PPUSH
25269: LD_VAR 0 9
25273: PPUSH
25274: CALL_OW 488
25278: NOT
25279: IFFALSE 25283
// exit ;
25281: GO 25390
// ComAnimCustom ( unit , 1 ) ;
25283: LD_VAR 0 1
25287: PPUSH
25288: LD_INT 1
25290: PPUSH
25291: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25295: LD_VAR 0 8
25299: PPUSH
25300: LD_VAR 0 9
25304: PPUSH
25305: LD_VAR 0 6
25309: PPUSH
25310: LD_VAR 0 7
25314: PPUSH
25315: CALL_OW 330
// repeat wait ( 1 ) ;
25319: LD_INT 1
25321: PPUSH
25322: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 316
25335: PUSH
25336: LD_VAR 0 1
25340: PPUSH
25341: CALL_OW 314
25345: OR
25346: PUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 302
25356: NOT
25357: OR
25358: PUSH
25359: LD_VAR 0 1
25363: PPUSH
25364: CALL_OW 301
25368: OR
25369: IFFALSE 25319
// RemoveSeeing ( _x , _y , side ) ;
25371: LD_VAR 0 8
25375: PPUSH
25376: LD_VAR 0 9
25380: PPUSH
25381: LD_VAR 0 6
25385: PPUSH
25386: CALL_OW 331
// end ; end_of_file
25390: LD_VAR 0 4
25394: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25395: LD_VAR 0 1
25399: PUSH
25400: LD_INT 200
25402: DOUBLE
25403: GREATEREQUAL
25404: IFFALSE 25412
25406: LD_INT 299
25408: DOUBLE
25409: LESSEQUAL
25410: IFTRUE 25414
25412: GO 25446
25414: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25415: LD_VAR 0 1
25419: PPUSH
25420: LD_VAR 0 2
25424: PPUSH
25425: LD_VAR 0 3
25429: PPUSH
25430: LD_VAR 0 4
25434: PPUSH
25435: LD_VAR 0 5
25439: PPUSH
25440: CALL 21462 0 5
25444: GO 25523
25446: LD_INT 300
25448: DOUBLE
25449: GREATEREQUAL
25450: IFFALSE 25458
25452: LD_INT 399
25454: DOUBLE
25455: LESSEQUAL
25456: IFTRUE 25460
25458: GO 25522
25460: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25461: LD_VAR 0 1
25465: PPUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: LD_VAR 0 3
25475: PPUSH
25476: LD_VAR 0 4
25480: PPUSH
25481: LD_VAR 0 5
25485: PPUSH
25486: LD_VAR 0 6
25490: PPUSH
25491: LD_VAR 0 7
25495: PPUSH
25496: LD_VAR 0 8
25500: PPUSH
25501: LD_VAR 0 9
25505: PPUSH
25506: LD_VAR 0 10
25510: PPUSH
25511: LD_VAR 0 11
25515: PPUSH
25516: CALL 17791 0 11
25520: GO 25523
25522: POP
// end ;
25523: PPOPN 11
25525: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25526: LD_VAR 0 1
25530: PPUSH
25531: LD_VAR 0 2
25535: PPUSH
25536: LD_VAR 0 3
25540: PPUSH
25541: LD_VAR 0 4
25545: PPUSH
25546: LD_VAR 0 5
25550: PPUSH
25551: CALL 21198 0 5
// end ; end_of_file
25555: PPOPN 5
25557: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
25558: LD_VAR 0 1
25562: PPUSH
25563: LD_VAR 0 2
25567: PPUSH
25568: LD_VAR 0 3
25572: PPUSH
25573: LD_VAR 0 4
25577: PPUSH
25578: LD_VAR 0 5
25582: PPUSH
25583: LD_VAR 0 6
25587: PPUSH
25588: CALL 5484 0 6
// end ;
25592: PPOPN 6
25594: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
25595: LD_INT 0
25597: PPUSH
// begin if not units then
25598: LD_VAR 0 1
25602: NOT
25603: IFFALSE 25607
// exit ;
25605: GO 25607
// end ;
25607: PPOPN 7
25609: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
25610: CALL 5455 0 0
// end ; end_of_file end_of_file
25614: PPOPN 1
25616: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
25617: LD_INT 0
25619: PPUSH
// ar_miner := 81 ;
25620: LD_ADDR_EXP 102
25624: PUSH
25625: LD_INT 81
25627: ST_TO_ADDR
// ar_crane := 88 ;
25628: LD_ADDR_EXP 101
25632: PUSH
25633: LD_INT 88
25635: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
25636: LD_ADDR_EXP 96
25640: PUSH
25641: LD_INT 89
25643: ST_TO_ADDR
// us_hack := 99 ;
25644: LD_ADDR_EXP 97
25648: PUSH
25649: LD_INT 99
25651: ST_TO_ADDR
// us_artillery := 97 ;
25652: LD_ADDR_EXP 98
25656: PUSH
25657: LD_INT 97
25659: ST_TO_ADDR
// ar_bio_bomb := 91 ;
25660: LD_ADDR_EXP 99
25664: PUSH
25665: LD_INT 91
25667: ST_TO_ADDR
// ar_mortar := 92 ;
25668: LD_ADDR_EXP 100
25672: PUSH
25673: LD_INT 92
25675: ST_TO_ADDR
// ru_flamethrower := 93 ;
25676: LD_ADDR_EXP 103
25680: PUSH
25681: LD_INT 93
25683: ST_TO_ADDR
// ru_radar := 98 ;
25684: LD_ADDR_EXP 95
25688: PUSH
25689: LD_INT 98
25691: ST_TO_ADDR
// tech_Artillery := 80 ;
25692: LD_ADDR_EXP 104
25696: PUSH
25697: LD_INT 80
25699: ST_TO_ADDR
// tech_RadMat := 81 ;
25700: LD_ADDR_EXP 105
25704: PUSH
25705: LD_INT 81
25707: ST_TO_ADDR
// tech_BasicTools := 82 ;
25708: LD_ADDR_EXP 106
25712: PUSH
25713: LD_INT 82
25715: ST_TO_ADDR
// tech_Cargo := 83 ;
25716: LD_ADDR_EXP 107
25720: PUSH
25721: LD_INT 83
25723: ST_TO_ADDR
// tech_Track := 84 ;
25724: LD_ADDR_EXP 108
25728: PUSH
25729: LD_INT 84
25731: ST_TO_ADDR
// tech_Crane := 85 ;
25732: LD_ADDR_EXP 109
25736: PUSH
25737: LD_INT 85
25739: ST_TO_ADDR
// tech_Bulldozer := 86 ;
25740: LD_ADDR_EXP 110
25744: PUSH
25745: LD_INT 86
25747: ST_TO_ADDR
// tech_Hovercraft := 87 ;
25748: LD_ADDR_EXP 111
25752: PUSH
25753: LD_INT 87
25755: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
25756: LD_ADDR_EXP 112
25760: PUSH
25761: LD_INT 88
25763: ST_TO_ADDR
// end ;
25764: LD_VAR 0 1
25768: RET
// every 1 do
25769: GO 25771
25771: DISABLE
// InitGlobalVariables ; end_of_file
25772: CALL 25617 0 0
25776: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
// if exist_mode then
25781: LD_VAR 0 2
25785: IFFALSE 25810
// unit := CreateCharacter ( prefix & ident ) else
25787: LD_ADDR_VAR 0 5
25791: PUSH
25792: LD_VAR 0 3
25796: PUSH
25797: LD_VAR 0 1
25801: STR
25802: PPUSH
25803: CALL_OW 34
25807: ST_TO_ADDR
25808: GO 25825
// unit := NewCharacter ( ident ) ;
25810: LD_ADDR_VAR 0 5
25814: PUSH
25815: LD_VAR 0 1
25819: PPUSH
25820: CALL_OW 25
25824: ST_TO_ADDR
// result := unit ;
25825: LD_ADDR_VAR 0 4
25829: PUSH
25830: LD_VAR 0 5
25834: ST_TO_ADDR
// end ;
25835: LD_VAR 0 4
25839: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25840: LD_INT 0
25842: PPUSH
25843: PPUSH
// if not side or not nation then
25844: LD_VAR 0 1
25848: NOT
25849: PUSH
25850: LD_VAR 0 2
25854: NOT
25855: OR
25856: IFFALSE 25860
// exit ;
25858: GO 26628
// case nation of nation_american :
25860: LD_VAR 0 2
25864: PUSH
25865: LD_INT 1
25867: DOUBLE
25868: EQUAL
25869: IFTRUE 25873
25871: GO 26087
25873: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25874: LD_ADDR_VAR 0 4
25878: PUSH
25879: LD_INT 35
25881: PUSH
25882: LD_INT 45
25884: PUSH
25885: LD_INT 46
25887: PUSH
25888: LD_INT 47
25890: PUSH
25891: LD_INT 82
25893: PUSH
25894: LD_INT 83
25896: PUSH
25897: LD_INT 84
25899: PUSH
25900: LD_INT 85
25902: PUSH
25903: LD_INT 86
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 6
25914: PUSH
25915: LD_INT 15
25917: PUSH
25918: LD_INT 16
25920: PUSH
25921: LD_INT 7
25923: PUSH
25924: LD_INT 12
25926: PUSH
25927: LD_INT 13
25929: PUSH
25930: LD_INT 10
25932: PUSH
25933: LD_INT 14
25935: PUSH
25936: LD_INT 20
25938: PUSH
25939: LD_INT 21
25941: PUSH
25942: LD_INT 22
25944: PUSH
25945: LD_INT 25
25947: PUSH
25948: LD_INT 32
25950: PUSH
25951: LD_INT 27
25953: PUSH
25954: LD_INT 36
25956: PUSH
25957: LD_INT 69
25959: PUSH
25960: LD_INT 39
25962: PUSH
25963: LD_INT 34
25965: PUSH
25966: LD_INT 40
25968: PUSH
25969: LD_INT 48
25971: PUSH
25972: LD_INT 49
25974: PUSH
25975: LD_INT 50
25977: PUSH
25978: LD_INT 51
25980: PUSH
25981: LD_INT 52
25983: PUSH
25984: LD_INT 53
25986: PUSH
25987: LD_INT 54
25989: PUSH
25990: LD_INT 55
25992: PUSH
25993: LD_INT 56
25995: PUSH
25996: LD_INT 57
25998: PUSH
25999: LD_INT 58
26001: PUSH
26002: LD_INT 59
26004: PUSH
26005: LD_INT 60
26007: PUSH
26008: LD_INT 61
26010: PUSH
26011: LD_INT 62
26013: PUSH
26014: LD_INT 80
26016: PUSH
26017: LD_INT 82
26019: PUSH
26020: LD_INT 83
26022: PUSH
26023: LD_INT 84
26025: PUSH
26026: LD_INT 85
26028: PUSH
26029: LD_INT 86
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: ST_TO_ADDR
26085: GO 26552
26087: LD_INT 2
26089: DOUBLE
26090: EQUAL
26091: IFTRUE 26095
26093: GO 26321
26095: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26096: LD_ADDR_VAR 0 4
26100: PUSH
26101: LD_INT 35
26103: PUSH
26104: LD_INT 45
26106: PUSH
26107: LD_INT 46
26109: PUSH
26110: LD_INT 47
26112: PUSH
26113: LD_INT 82
26115: PUSH
26116: LD_INT 83
26118: PUSH
26119: LD_INT 84
26121: PUSH
26122: LD_INT 85
26124: PUSH
26125: LD_INT 87
26127: PUSH
26128: LD_INT 70
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 11
26136: PUSH
26137: LD_INT 3
26139: PUSH
26140: LD_INT 4
26142: PUSH
26143: LD_INT 5
26145: PUSH
26146: LD_INT 6
26148: PUSH
26149: LD_INT 15
26151: PUSH
26152: LD_INT 18
26154: PUSH
26155: LD_INT 7
26157: PUSH
26158: LD_INT 17
26160: PUSH
26161: LD_INT 8
26163: PUSH
26164: LD_INT 20
26166: PUSH
26167: LD_INT 21
26169: PUSH
26170: LD_INT 22
26172: PUSH
26173: LD_INT 72
26175: PUSH
26176: LD_INT 26
26178: PUSH
26179: LD_INT 69
26181: PUSH
26182: LD_INT 39
26184: PUSH
26185: LD_INT 40
26187: PUSH
26188: LD_INT 41
26190: PUSH
26191: LD_INT 42
26193: PUSH
26194: LD_INT 43
26196: PUSH
26197: LD_INT 48
26199: PUSH
26200: LD_INT 49
26202: PUSH
26203: LD_INT 50
26205: PUSH
26206: LD_INT 51
26208: PUSH
26209: LD_INT 52
26211: PUSH
26212: LD_INT 53
26214: PUSH
26215: LD_INT 54
26217: PUSH
26218: LD_INT 55
26220: PUSH
26221: LD_INT 56
26223: PUSH
26224: LD_INT 60
26226: PUSH
26227: LD_INT 61
26229: PUSH
26230: LD_INT 62
26232: PUSH
26233: LD_INT 66
26235: PUSH
26236: LD_INT 67
26238: PUSH
26239: LD_INT 68
26241: PUSH
26242: LD_INT 81
26244: PUSH
26245: LD_INT 82
26247: PUSH
26248: LD_INT 83
26250: PUSH
26251: LD_INT 84
26253: PUSH
26254: LD_INT 85
26256: PUSH
26257: LD_INT 87
26259: PUSH
26260: LD_INT 88
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
26319: GO 26552
26321: LD_INT 3
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26329
26327: GO 26551
26329: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26330: LD_ADDR_VAR 0 4
26334: PUSH
26335: LD_INT 46
26337: PUSH
26338: LD_INT 47
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: LD_INT 82
26349: PUSH
26350: LD_INT 83
26352: PUSH
26353: LD_INT 84
26355: PUSH
26356: LD_INT 85
26358: PUSH
26359: LD_INT 86
26361: PUSH
26362: LD_INT 11
26364: PUSH
26365: LD_INT 9
26367: PUSH
26368: LD_INT 20
26370: PUSH
26371: LD_INT 19
26373: PUSH
26374: LD_INT 21
26376: PUSH
26377: LD_INT 24
26379: PUSH
26380: LD_INT 22
26382: PUSH
26383: LD_INT 25
26385: PUSH
26386: LD_INT 28
26388: PUSH
26389: LD_INT 29
26391: PUSH
26392: LD_INT 30
26394: PUSH
26395: LD_INT 31
26397: PUSH
26398: LD_INT 37
26400: PUSH
26401: LD_INT 38
26403: PUSH
26404: LD_INT 32
26406: PUSH
26407: LD_INT 27
26409: PUSH
26410: LD_INT 33
26412: PUSH
26413: LD_INT 69
26415: PUSH
26416: LD_INT 39
26418: PUSH
26419: LD_INT 34
26421: PUSH
26422: LD_INT 40
26424: PUSH
26425: LD_INT 71
26427: PUSH
26428: LD_INT 23
26430: PUSH
26431: LD_INT 44
26433: PUSH
26434: LD_INT 48
26436: PUSH
26437: LD_INT 49
26439: PUSH
26440: LD_INT 50
26442: PUSH
26443: LD_INT 51
26445: PUSH
26446: LD_INT 52
26448: PUSH
26449: LD_INT 53
26451: PUSH
26452: LD_INT 54
26454: PUSH
26455: LD_INT 55
26457: PUSH
26458: LD_INT 56
26460: PUSH
26461: LD_INT 57
26463: PUSH
26464: LD_INT 58
26466: PUSH
26467: LD_INT 59
26469: PUSH
26470: LD_INT 63
26472: PUSH
26473: LD_INT 64
26475: PUSH
26476: LD_INT 65
26478: PUSH
26479: LD_INT 82
26481: PUSH
26482: LD_INT 83
26484: PUSH
26485: LD_INT 84
26487: PUSH
26488: LD_INT 85
26490: PUSH
26491: LD_INT 86
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: ST_TO_ADDR
26549: GO 26552
26551: POP
// if state > - 1 and state < 3 then
26552: LD_VAR 0 3
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: GREATER
26561: PUSH
26562: LD_VAR 0 3
26566: PUSH
26567: LD_INT 3
26569: LESS
26570: AND
26571: IFFALSE 26628
// for i in result do
26573: LD_ADDR_VAR 0 5
26577: PUSH
26578: LD_VAR 0 4
26582: PUSH
26583: FOR_IN
26584: IFFALSE 26626
// if GetTech ( i , side ) <> state then
26586: LD_VAR 0 5
26590: PPUSH
26591: LD_VAR 0 1
26595: PPUSH
26596: CALL_OW 321
26600: PUSH
26601: LD_VAR 0 3
26605: NONEQUAL
26606: IFFALSE 26624
// result := result diff i ;
26608: LD_ADDR_VAR 0 4
26612: PUSH
26613: LD_VAR 0 4
26617: PUSH
26618: LD_VAR 0 5
26622: DIFF
26623: ST_TO_ADDR
26624: GO 26583
26626: POP
26627: POP
// end ;
26628: LD_VAR 0 4
26632: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26633: LD_INT 0
26635: PPUSH
26636: PPUSH
26637: PPUSH
// result := true ;
26638: LD_ADDR_VAR 0 3
26642: PUSH
26643: LD_INT 1
26645: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26646: LD_ADDR_VAR 0 5
26650: PUSH
26651: LD_VAR 0 2
26655: PPUSH
26656: CALL_OW 480
26660: ST_TO_ADDR
// if not tmp then
26661: LD_VAR 0 5
26665: NOT
26666: IFFALSE 26670
// exit ;
26668: GO 26719
// for i in tmp do
26670: LD_ADDR_VAR 0 4
26674: PUSH
26675: LD_VAR 0 5
26679: PUSH
26680: FOR_IN
26681: IFFALSE 26717
// if GetTech ( i , side ) <> state_researched then
26683: LD_VAR 0 4
26687: PPUSH
26688: LD_VAR 0 1
26692: PPUSH
26693: CALL_OW 321
26697: PUSH
26698: LD_INT 2
26700: NONEQUAL
26701: IFFALSE 26715
// begin result := false ;
26703: LD_ADDR_VAR 0 3
26707: PUSH
26708: LD_INT 0
26710: ST_TO_ADDR
// exit ;
26711: POP
26712: POP
26713: GO 26719
// end ;
26715: GO 26680
26717: POP
26718: POP
// end ;
26719: LD_VAR 0 3
26723: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26724: LD_INT 0
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26739: LD_VAR 0 1
26743: NOT
26744: PUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 257
26754: PUSH
26755: LD_INT 9
26757: NONEQUAL
26758: OR
26759: IFFALSE 26763
// exit ;
26761: GO 27336
// side := GetSide ( unit ) ;
26763: LD_ADDR_VAR 0 9
26767: PUSH
26768: LD_VAR 0 1
26772: PPUSH
26773: CALL_OW 255
26777: ST_TO_ADDR
// tech_space := tech_spacanom ;
26778: LD_ADDR_VAR 0 12
26782: PUSH
26783: LD_INT 29
26785: ST_TO_ADDR
// tech_time := tech_taurad ;
26786: LD_ADDR_VAR 0 13
26790: PUSH
26791: LD_INT 28
26793: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26794: LD_ADDR_VAR 0 11
26798: PUSH
26799: LD_VAR 0 1
26803: PPUSH
26804: CALL_OW 310
26808: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26809: LD_VAR 0 11
26813: PPUSH
26814: CALL_OW 247
26818: PUSH
26819: LD_INT 2
26821: EQUAL
26822: IFFALSE 26826
// exit ;
26824: GO 27336
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26826: LD_ADDR_VAR 0 8
26830: PUSH
26831: LD_INT 81
26833: PUSH
26834: LD_VAR 0 9
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 3
26845: PUSH
26846: LD_INT 21
26848: PUSH
26849: LD_INT 3
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PPUSH
26864: CALL_OW 69
26868: ST_TO_ADDR
// if not tmp then
26869: LD_VAR 0 8
26873: NOT
26874: IFFALSE 26878
// exit ;
26876: GO 27336
// if in_unit then
26878: LD_VAR 0 11
26882: IFFALSE 26906
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26884: LD_ADDR_VAR 0 10
26888: PUSH
26889: LD_VAR 0 8
26893: PPUSH
26894: LD_VAR 0 11
26898: PPUSH
26899: CALL_OW 74
26903: ST_TO_ADDR
26904: GO 26926
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26906: LD_ADDR_VAR 0 10
26910: PUSH
26911: LD_VAR 0 8
26915: PPUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 74
26925: ST_TO_ADDR
// if not enemy then
26926: LD_VAR 0 10
26930: NOT
26931: IFFALSE 26935
// exit ;
26933: GO 27336
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26935: LD_VAR 0 11
26939: PUSH
26940: LD_VAR 0 11
26944: PPUSH
26945: LD_VAR 0 10
26949: PPUSH
26950: CALL_OW 296
26954: PUSH
26955: LD_INT 13
26957: GREATER
26958: AND
26959: PUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: LD_VAR 0 10
26969: PPUSH
26970: CALL_OW 296
26974: PUSH
26975: LD_INT 12
26977: GREATER
26978: OR
26979: IFFALSE 26983
// exit ;
26981: GO 27336
// missile := [ 1 ] ;
26983: LD_ADDR_VAR 0 14
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26994: LD_VAR 0 9
26998: PPUSH
26999: LD_VAR 0 12
27003: PPUSH
27004: CALL_OW 325
27008: IFFALSE 27037
// missile := Replace ( missile , missile + 1 , 2 ) ;
27010: LD_ADDR_VAR 0 14
27014: PUSH
27015: LD_VAR 0 14
27019: PPUSH
27020: LD_VAR 0 14
27024: PUSH
27025: LD_INT 1
27027: PLUS
27028: PPUSH
27029: LD_INT 2
27031: PPUSH
27032: CALL_OW 1
27036: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27037: LD_VAR 0 9
27041: PPUSH
27042: LD_VAR 0 13
27046: PPUSH
27047: CALL_OW 325
27051: PUSH
27052: LD_VAR 0 10
27056: PPUSH
27057: CALL_OW 255
27061: PPUSH
27062: LD_VAR 0 13
27066: PPUSH
27067: CALL_OW 325
27071: NOT
27072: AND
27073: IFFALSE 27102
// missile := Replace ( missile , missile + 1 , 3 ) ;
27075: LD_ADDR_VAR 0 14
27079: PUSH
27080: LD_VAR 0 14
27084: PPUSH
27085: LD_VAR 0 14
27089: PUSH
27090: LD_INT 1
27092: PLUS
27093: PPUSH
27094: LD_INT 3
27096: PPUSH
27097: CALL_OW 1
27101: ST_TO_ADDR
// if missile < 2 then
27102: LD_VAR 0 14
27106: PUSH
27107: LD_INT 2
27109: LESS
27110: IFFALSE 27114
// exit ;
27112: GO 27336
// x := GetX ( enemy ) ;
27114: LD_ADDR_VAR 0 4
27118: PUSH
27119: LD_VAR 0 10
27123: PPUSH
27124: CALL_OW 250
27128: ST_TO_ADDR
// y := GetY ( enemy ) ;
27129: LD_ADDR_VAR 0 5
27133: PUSH
27134: LD_VAR 0 10
27138: PPUSH
27139: CALL_OW 251
27143: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27144: LD_ADDR_VAR 0 6
27148: PUSH
27149: LD_VAR 0 4
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PPUSH
27158: LD_INT 1
27160: PPUSH
27161: CALL_OW 12
27165: PLUS
27166: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27167: LD_ADDR_VAR 0 7
27171: PUSH
27172: LD_VAR 0 5
27176: PUSH
27177: LD_INT 1
27179: NEG
27180: PPUSH
27181: LD_INT 1
27183: PPUSH
27184: CALL_OW 12
27188: PLUS
27189: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27190: LD_VAR 0 6
27194: PPUSH
27195: LD_VAR 0 7
27199: PPUSH
27200: CALL_OW 488
27204: NOT
27205: IFFALSE 27227
// begin _x := x ;
27207: LD_ADDR_VAR 0 6
27211: PUSH
27212: LD_VAR 0 4
27216: ST_TO_ADDR
// _y := y ;
27217: LD_ADDR_VAR 0 7
27221: PUSH
27222: LD_VAR 0 5
27226: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27227: LD_ADDR_VAR 0 3
27231: PUSH
27232: LD_INT 1
27234: PPUSH
27235: LD_VAR 0 14
27239: PPUSH
27240: CALL_OW 12
27244: ST_TO_ADDR
// case i of 1 :
27245: LD_VAR 0 3
27249: PUSH
27250: LD_INT 1
27252: DOUBLE
27253: EQUAL
27254: IFTRUE 27258
27256: GO 27275
27258: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27259: LD_VAR 0 1
27263: PPUSH
27264: LD_VAR 0 10
27268: PPUSH
27269: CALL_OW 115
27273: GO 27336
27275: LD_INT 2
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27283
27281: GO 27305
27283: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27284: LD_VAR 0 1
27288: PPUSH
27289: LD_VAR 0 6
27293: PPUSH
27294: LD_VAR 0 7
27298: PPUSH
27299: CALL_OW 153
27303: GO 27336
27305: LD_INT 3
27307: DOUBLE
27308: EQUAL
27309: IFTRUE 27313
27311: GO 27335
27313: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27314: LD_VAR 0 1
27318: PPUSH
27319: LD_VAR 0 6
27323: PPUSH
27324: LD_VAR 0 7
27328: PPUSH
27329: CALL_OW 154
27333: GO 27336
27335: POP
// end ;
27336: LD_VAR 0 2
27340: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27341: LD_INT 0
27343: PPUSH
27344: PPUSH
27345: PPUSH
27346: PPUSH
27347: PPUSH
27348: PPUSH
// if not unit or not building then
27349: LD_VAR 0 1
27353: NOT
27354: PUSH
27355: LD_VAR 0 2
27359: NOT
27360: OR
27361: IFFALSE 27365
// exit ;
27363: GO 27523
// x := GetX ( building ) ;
27365: LD_ADDR_VAR 0 5
27369: PUSH
27370: LD_VAR 0 2
27374: PPUSH
27375: CALL_OW 250
27379: ST_TO_ADDR
// y := GetY ( building ) ;
27380: LD_ADDR_VAR 0 6
27384: PUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL_OW 251
27394: ST_TO_ADDR
// for i = 0 to 5 do
27395: LD_ADDR_VAR 0 4
27399: PUSH
27400: DOUBLE
27401: LD_INT 0
27403: DEC
27404: ST_TO_ADDR
27405: LD_INT 5
27407: PUSH
27408: FOR_TO
27409: IFFALSE 27521
// begin _x := ShiftX ( x , i , 3 ) ;
27411: LD_ADDR_VAR 0 7
27415: PUSH
27416: LD_VAR 0 5
27420: PPUSH
27421: LD_VAR 0 4
27425: PPUSH
27426: LD_INT 3
27428: PPUSH
27429: CALL_OW 272
27433: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27434: LD_ADDR_VAR 0 8
27438: PUSH
27439: LD_VAR 0 6
27443: PPUSH
27444: LD_VAR 0 4
27448: PPUSH
27449: LD_INT 3
27451: PPUSH
27452: CALL_OW 273
27456: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27457: LD_VAR 0 7
27461: PPUSH
27462: LD_VAR 0 8
27466: PPUSH
27467: CALL_OW 488
27471: NOT
27472: IFFALSE 27476
// continue ;
27474: GO 27408
// if HexInfo ( _x , _y ) = 0 then
27476: LD_VAR 0 7
27480: PPUSH
27481: LD_VAR 0 8
27485: PPUSH
27486: CALL_OW 428
27490: PUSH
27491: LD_INT 0
27493: EQUAL
27494: IFFALSE 27519
// begin ComMoveXY ( unit , _x , _y ) ;
27496: LD_VAR 0 1
27500: PPUSH
27501: LD_VAR 0 7
27505: PPUSH
27506: LD_VAR 0 8
27510: PPUSH
27511: CALL_OW 111
// exit ;
27515: POP
27516: POP
27517: GO 27523
// end ; end ;
27519: GO 27408
27521: POP
27522: POP
// end ;
27523: LD_VAR 0 3
27527: RET
// export function ScanBase ( side , base_area ) ; begin
27528: LD_INT 0
27530: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27531: LD_ADDR_VAR 0 3
27535: PUSH
27536: LD_VAR 0 2
27540: PPUSH
27541: LD_INT 81
27543: PUSH
27544: LD_VAR 0 1
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PPUSH
27553: CALL_OW 70
27557: ST_TO_ADDR
// end ;
27558: LD_VAR 0 3
27562: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27563: LD_INT 0
27565: PPUSH
27566: PPUSH
27567: PPUSH
27568: PPUSH
// result := false ;
27569: LD_ADDR_VAR 0 2
27573: PUSH
27574: LD_INT 0
27576: ST_TO_ADDR
// side := GetSide ( unit ) ;
27577: LD_ADDR_VAR 0 3
27581: PUSH
27582: LD_VAR 0 1
27586: PPUSH
27587: CALL_OW 255
27591: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27592: LD_ADDR_VAR 0 4
27596: PUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL_OW 248
27606: ST_TO_ADDR
// case nat of 1 :
27607: LD_VAR 0 4
27611: PUSH
27612: LD_INT 1
27614: DOUBLE
27615: EQUAL
27616: IFTRUE 27620
27618: GO 27631
27620: POP
// tech := tech_lassight ; 2 :
27621: LD_ADDR_VAR 0 5
27625: PUSH
27626: LD_INT 12
27628: ST_TO_ADDR
27629: GO 27670
27631: LD_INT 2
27633: DOUBLE
27634: EQUAL
27635: IFTRUE 27639
27637: GO 27650
27639: POP
// tech := tech_mortar ; 3 :
27640: LD_ADDR_VAR 0 5
27644: PUSH
27645: LD_INT 41
27647: ST_TO_ADDR
27648: GO 27670
27650: LD_INT 3
27652: DOUBLE
27653: EQUAL
27654: IFTRUE 27658
27656: GO 27669
27658: POP
// tech := tech_bazooka ; end ;
27659: LD_ADDR_VAR 0 5
27663: PUSH
27664: LD_INT 44
27666: ST_TO_ADDR
27667: GO 27670
27669: POP
// if Researched ( side , tech ) then
27670: LD_VAR 0 3
27674: PPUSH
27675: LD_VAR 0 5
27679: PPUSH
27680: CALL_OW 325
27684: IFFALSE 27711
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27686: LD_ADDR_VAR 0 2
27690: PUSH
27691: LD_INT 5
27693: PUSH
27694: LD_INT 8
27696: PUSH
27697: LD_INT 9
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: PUSH
27705: LD_VAR 0 4
27709: ARRAY
27710: ST_TO_ADDR
// end ;
27711: LD_VAR 0 2
27715: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27716: LD_INT 0
27718: PPUSH
27719: PPUSH
27720: PPUSH
// if not mines then
27721: LD_VAR 0 2
27725: NOT
27726: IFFALSE 27730
// exit ;
27728: GO 27874
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27730: LD_ADDR_VAR 0 5
27734: PUSH
27735: LD_INT 81
27737: PUSH
27738: LD_VAR 0 1
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 3
27749: PUSH
27750: LD_INT 21
27752: PUSH
27753: LD_INT 3
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PPUSH
27768: CALL_OW 69
27772: ST_TO_ADDR
// for i in mines do
27773: LD_ADDR_VAR 0 4
27777: PUSH
27778: LD_VAR 0 2
27782: PUSH
27783: FOR_IN
27784: IFFALSE 27872
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27786: LD_VAR 0 4
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: PPUSH
27795: LD_VAR 0 4
27799: PUSH
27800: LD_INT 2
27802: ARRAY
27803: PPUSH
27804: CALL_OW 458
27808: NOT
27809: IFFALSE 27813
// continue ;
27811: GO 27783
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27813: LD_VAR 0 4
27817: PUSH
27818: LD_INT 1
27820: ARRAY
27821: PPUSH
27822: LD_VAR 0 4
27826: PUSH
27827: LD_INT 2
27829: ARRAY
27830: PPUSH
27831: CALL_OW 428
27835: PUSH
27836: LD_VAR 0 5
27840: IN
27841: IFFALSE 27870
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27843: LD_VAR 0 4
27847: PUSH
27848: LD_INT 1
27850: ARRAY
27851: PPUSH
27852: LD_VAR 0 4
27856: PUSH
27857: LD_INT 2
27859: ARRAY
27860: PPUSH
27861: LD_VAR 0 1
27865: PPUSH
27866: CALL_OW 456
// end ;
27870: GO 27783
27872: POP
27873: POP
// end ;
27874: LD_VAR 0 3
27878: RET
// export function Count ( array ) ; var i ; begin
27879: LD_INT 0
27881: PPUSH
27882: PPUSH
// result := 0 ;
27883: LD_ADDR_VAR 0 2
27887: PUSH
27888: LD_INT 0
27890: ST_TO_ADDR
// for i in array do
27891: LD_ADDR_VAR 0 3
27895: PUSH
27896: LD_VAR 0 1
27900: PUSH
27901: FOR_IN
27902: IFFALSE 27926
// if i then
27904: LD_VAR 0 3
27908: IFFALSE 27924
// result := result + 1 ;
27910: LD_ADDR_VAR 0 2
27914: PUSH
27915: LD_VAR 0 2
27919: PUSH
27920: LD_INT 1
27922: PLUS
27923: ST_TO_ADDR
27924: GO 27901
27926: POP
27927: POP
// end ;
27928: LD_VAR 0 2
27932: RET
// export function IsEmpty ( building ) ; begin
27933: LD_INT 0
27935: PPUSH
// if not building then
27936: LD_VAR 0 1
27940: NOT
27941: IFFALSE 27945
// exit ;
27943: GO 27988
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27945: LD_ADDR_VAR 0 2
27949: PUSH
27950: LD_VAR 0 1
27954: PUSH
27955: LD_INT 22
27957: PUSH
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL_OW 255
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 58
27974: PUSH
27975: EMPTY
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PPUSH
27982: CALL_OW 69
27986: IN
27987: ST_TO_ADDR
// end ;
27988: LD_VAR 0 2
27992: RET
// export function IsNotFull ( building ) ; var places ; begin
27993: LD_INT 0
27995: PPUSH
27996: PPUSH
// if not building then
27997: LD_VAR 0 1
28001: NOT
28002: IFFALSE 28006
// exit ;
28004: GO 28177
// result := false ;
28006: LD_ADDR_VAR 0 2
28010: PUSH
28011: LD_INT 0
28013: ST_TO_ADDR
// places := 0 ;
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: LD_INT 0
28021: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28022: LD_VAR 0 1
28026: PPUSH
28027: CALL_OW 266
28031: PUSH
28032: LD_INT 0
28034: DOUBLE
28035: EQUAL
28036: IFTRUE 28094
28038: LD_INT 1
28040: DOUBLE
28041: EQUAL
28042: IFTRUE 28094
28044: LD_INT 6
28046: DOUBLE
28047: EQUAL
28048: IFTRUE 28094
28050: LD_INT 7
28052: DOUBLE
28053: EQUAL
28054: IFTRUE 28094
28056: LD_INT 8
28058: DOUBLE
28059: EQUAL
28060: IFTRUE 28094
28062: LD_INT 4
28064: DOUBLE
28065: EQUAL
28066: IFTRUE 28094
28068: LD_INT 5
28070: DOUBLE
28071: EQUAL
28072: IFTRUE 28094
28074: LD_INT 2
28076: DOUBLE
28077: EQUAL
28078: IFTRUE 28094
28080: LD_INT 3
28082: DOUBLE
28083: EQUAL
28084: IFTRUE 28094
28086: LD_INT 35
28088: DOUBLE
28089: EQUAL
28090: IFTRUE 28094
28092: GO 28105
28094: POP
// places := 6 ; b_bunker , b_breastwork :
28095: LD_ADDR_VAR 0 3
28099: PUSH
28100: LD_INT 6
28102: ST_TO_ADDR
28103: GO 28150
28105: LD_INT 32
28107: DOUBLE
28108: EQUAL
28109: IFTRUE 28119
28111: LD_INT 31
28113: DOUBLE
28114: EQUAL
28115: IFTRUE 28119
28117: GO 28130
28119: POP
// places := 1 ; b_control_tower :
28120: LD_ADDR_VAR 0 3
28124: PUSH
28125: LD_INT 1
28127: ST_TO_ADDR
28128: GO 28150
28130: LD_INT 36
28132: DOUBLE
28133: EQUAL
28134: IFTRUE 28138
28136: GO 28149
28138: POP
// places := 3 ; end ;
28139: LD_ADDR_VAR 0 3
28143: PUSH
28144: LD_INT 3
28146: ST_TO_ADDR
28147: GO 28150
28149: POP
// if places then
28150: LD_VAR 0 3
28154: IFFALSE 28177
// result := UnitsInside ( building ) < places ;
28156: LD_ADDR_VAR 0 2
28160: PUSH
28161: LD_VAR 0 1
28165: PPUSH
28166: CALL_OW 313
28170: PUSH
28171: LD_VAR 0 3
28175: LESS
28176: ST_TO_ADDR
// end ;
28177: LD_VAR 0 2
28181: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28182: LD_INT 0
28184: PPUSH
28185: PPUSH
28186: PPUSH
28187: PPUSH
// tmp := [ ] ;
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: EMPTY
28194: ST_TO_ADDR
// list := [ ] ;
28195: LD_ADDR_VAR 0 5
28199: PUSH
28200: EMPTY
28201: ST_TO_ADDR
// for i = 16 to 25 do
28202: LD_ADDR_VAR 0 4
28206: PUSH
28207: DOUBLE
28208: LD_INT 16
28210: DEC
28211: ST_TO_ADDR
28212: LD_INT 25
28214: PUSH
28215: FOR_TO
28216: IFFALSE 28289
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28218: LD_ADDR_VAR 0 3
28222: PUSH
28223: LD_VAR 0 3
28227: PUSH
28228: LD_INT 22
28230: PUSH
28231: LD_VAR 0 1
28235: PPUSH
28236: CALL_OW 255
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 91
28247: PUSH
28248: LD_VAR 0 1
28252: PUSH
28253: LD_INT 6
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 30
28263: PUSH
28264: LD_VAR 0 4
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: PPUSH
28281: CALL_OW 69
28285: ADD
28286: ST_TO_ADDR
28287: GO 28215
28289: POP
28290: POP
// for i = 1 to tmp do
28291: LD_ADDR_VAR 0 4
28295: PUSH
28296: DOUBLE
28297: LD_INT 1
28299: DEC
28300: ST_TO_ADDR
28301: LD_VAR 0 3
28305: PUSH
28306: FOR_TO
28307: IFFALSE 28395
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28309: LD_ADDR_VAR 0 5
28313: PUSH
28314: LD_VAR 0 5
28318: PUSH
28319: LD_VAR 0 3
28323: PUSH
28324: LD_VAR 0 4
28328: ARRAY
28329: PPUSH
28330: CALL_OW 266
28334: PUSH
28335: LD_VAR 0 3
28339: PUSH
28340: LD_VAR 0 4
28344: ARRAY
28345: PPUSH
28346: CALL_OW 250
28350: PUSH
28351: LD_VAR 0 3
28355: PUSH
28356: LD_VAR 0 4
28360: ARRAY
28361: PPUSH
28362: CALL_OW 251
28366: PUSH
28367: LD_VAR 0 3
28371: PUSH
28372: LD_VAR 0 4
28376: ARRAY
28377: PPUSH
28378: CALL_OW 254
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: PUSH
28389: EMPTY
28390: LIST
28391: ADD
28392: ST_TO_ADDR
28393: GO 28306
28395: POP
28396: POP
// result := list ;
28397: LD_ADDR_VAR 0 2
28401: PUSH
28402: LD_VAR 0 5
28406: ST_TO_ADDR
// end ;
28407: LD_VAR 0 2
28411: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28412: LD_INT 0
28414: PPUSH
28415: PPUSH
28416: PPUSH
28417: PPUSH
28418: PPUSH
28419: PPUSH
28420: PPUSH
// if not factory then
28421: LD_VAR 0 1
28425: NOT
28426: IFFALSE 28430
// exit ;
28428: GO 29023
// if control = control_apeman then
28430: LD_VAR 0 4
28434: PUSH
28435: LD_INT 5
28437: EQUAL
28438: IFFALSE 28547
// begin tmp := UnitsInside ( factory ) ;
28440: LD_ADDR_VAR 0 8
28444: PUSH
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL_OW 313
28454: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28455: LD_VAR 0 8
28459: PPUSH
28460: LD_INT 25
28462: PUSH
28463: LD_INT 12
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PPUSH
28470: CALL_OW 72
28474: NOT
28475: IFFALSE 28485
// control := control_manual ;
28477: LD_ADDR_VAR 0 4
28481: PUSH
28482: LD_INT 1
28484: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28485: LD_ADDR_VAR 0 8
28489: PUSH
28490: LD_VAR 0 1
28494: PPUSH
28495: CALL 28182 0 1
28499: ST_TO_ADDR
// if tmp then
28500: LD_VAR 0 8
28504: IFFALSE 28547
// begin for i in tmp do
28506: LD_ADDR_VAR 0 7
28510: PUSH
28511: LD_VAR 0 8
28515: PUSH
28516: FOR_IN
28517: IFFALSE 28545
// if i [ 1 ] = b_ext_radio then
28519: LD_VAR 0 7
28523: PUSH
28524: LD_INT 1
28526: ARRAY
28527: PUSH
28528: LD_INT 22
28530: EQUAL
28531: IFFALSE 28543
// begin control := control_remote ;
28533: LD_ADDR_VAR 0 4
28537: PUSH
28538: LD_INT 2
28540: ST_TO_ADDR
// break ;
28541: GO 28545
// end ;
28543: GO 28516
28545: POP
28546: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28547: LD_VAR 0 1
28551: PPUSH
28552: LD_VAR 0 2
28556: PPUSH
28557: LD_VAR 0 3
28561: PPUSH
28562: LD_VAR 0 4
28566: PPUSH
28567: LD_VAR 0 5
28571: PPUSH
28572: CALL_OW 448
28576: IFFALSE 28611
// begin result := [ chassis , engine , control , weapon ] ;
28578: LD_ADDR_VAR 0 6
28582: PUSH
28583: LD_VAR 0 2
28587: PUSH
28588: LD_VAR 0 3
28592: PUSH
28593: LD_VAR 0 4
28597: PUSH
28598: LD_VAR 0 5
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: ST_TO_ADDR
// exit ;
28609: GO 29023
// end ; _chassis := AvailableChassisList ( factory ) ;
28611: LD_ADDR_VAR 0 9
28615: PUSH
28616: LD_VAR 0 1
28620: PPUSH
28621: CALL_OW 475
28625: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28626: LD_ADDR_VAR 0 11
28630: PUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 476
28640: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28641: LD_ADDR_VAR 0 12
28645: PUSH
28646: LD_VAR 0 1
28650: PPUSH
28651: CALL_OW 477
28655: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28656: LD_ADDR_VAR 0 10
28660: PUSH
28661: LD_VAR 0 1
28665: PPUSH
28666: CALL_OW 478
28670: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28671: LD_VAR 0 9
28675: NOT
28676: PUSH
28677: LD_VAR 0 11
28681: NOT
28682: OR
28683: PUSH
28684: LD_VAR 0 12
28688: NOT
28689: OR
28690: PUSH
28691: LD_VAR 0 10
28695: NOT
28696: OR
28697: IFFALSE 28732
// begin result := [ chassis , engine , control , weapon ] ;
28699: LD_ADDR_VAR 0 6
28703: PUSH
28704: LD_VAR 0 2
28708: PUSH
28709: LD_VAR 0 3
28713: PUSH
28714: LD_VAR 0 4
28718: PUSH
28719: LD_VAR 0 5
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: ST_TO_ADDR
// exit ;
28730: GO 29023
// end ; if not chassis in _chassis then
28732: LD_VAR 0 2
28736: PUSH
28737: LD_VAR 0 9
28741: IN
28742: NOT
28743: IFFALSE 28769
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28745: LD_ADDR_VAR 0 2
28749: PUSH
28750: LD_VAR 0 9
28754: PUSH
28755: LD_INT 1
28757: PPUSH
28758: LD_VAR 0 9
28762: PPUSH
28763: CALL_OW 12
28767: ARRAY
28768: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28769: LD_VAR 0 2
28773: PPUSH
28774: LD_VAR 0 3
28778: PPUSH
28779: CALL 29028 0 2
28783: NOT
28784: IFFALSE 28843
// repeat engine := _engine [ 1 ] ;
28786: LD_ADDR_VAR 0 3
28790: PUSH
28791: LD_VAR 0 11
28795: PUSH
28796: LD_INT 1
28798: ARRAY
28799: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28800: LD_ADDR_VAR 0 11
28804: PUSH
28805: LD_VAR 0 11
28809: PPUSH
28810: LD_INT 1
28812: PPUSH
28813: CALL_OW 3
28817: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28818: LD_VAR 0 2
28822: PPUSH
28823: LD_VAR 0 3
28827: PPUSH
28828: CALL 29028 0 2
28832: PUSH
28833: LD_VAR 0 11
28837: PUSH
28838: EMPTY
28839: EQUAL
28840: OR
28841: IFFALSE 28786
// if not control in _control then
28843: LD_VAR 0 4
28847: PUSH
28848: LD_VAR 0 12
28852: IN
28853: NOT
28854: IFFALSE 28880
// control := _control [ rand ( 1 , _control ) ] ;
28856: LD_ADDR_VAR 0 4
28860: PUSH
28861: LD_VAR 0 12
28865: PUSH
28866: LD_INT 1
28868: PPUSH
28869: LD_VAR 0 12
28873: PPUSH
28874: CALL_OW 12
28878: ARRAY
28879: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28880: LD_VAR 0 2
28884: PPUSH
28885: LD_VAR 0 5
28889: PPUSH
28890: CALL 29248 0 2
28894: NOT
28895: IFFALSE 28954
// repeat weapon := _weapon [ 1 ] ;
28897: LD_ADDR_VAR 0 5
28901: PUSH
28902: LD_VAR 0 10
28906: PUSH
28907: LD_INT 1
28909: ARRAY
28910: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28911: LD_ADDR_VAR 0 10
28915: PUSH
28916: LD_VAR 0 10
28920: PPUSH
28921: LD_INT 1
28923: PPUSH
28924: CALL_OW 3
28928: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28929: LD_VAR 0 2
28933: PPUSH
28934: LD_VAR 0 5
28938: PPUSH
28939: CALL 29248 0 2
28943: PUSH
28944: LD_VAR 0 10
28948: PUSH
28949: EMPTY
28950: EQUAL
28951: OR
28952: IFFALSE 28897
// result := [ ] ;
28954: LD_ADDR_VAR 0 6
28958: PUSH
28959: EMPTY
28960: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28961: LD_VAR 0 1
28965: PPUSH
28966: LD_VAR 0 2
28970: PPUSH
28971: LD_VAR 0 3
28975: PPUSH
28976: LD_VAR 0 4
28980: PPUSH
28981: LD_VAR 0 5
28985: PPUSH
28986: CALL_OW 448
28990: IFFALSE 29023
// result := [ chassis , engine , control , weapon ] ;
28992: LD_ADDR_VAR 0 6
28996: PUSH
28997: LD_VAR 0 2
29001: PUSH
29002: LD_VAR 0 3
29006: PUSH
29007: LD_VAR 0 4
29011: PUSH
29012: LD_VAR 0 5
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: ST_TO_ADDR
// end ;
29023: LD_VAR 0 6
29027: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29028: LD_INT 0
29030: PPUSH
// if not chassis or not engine then
29031: LD_VAR 0 1
29035: NOT
29036: PUSH
29037: LD_VAR 0 2
29041: NOT
29042: OR
29043: IFFALSE 29047
// exit ;
29045: GO 29243
// case engine of engine_solar :
29047: LD_VAR 0 2
29051: PUSH
29052: LD_INT 2
29054: DOUBLE
29055: EQUAL
29056: IFTRUE 29060
29058: GO 29098
29060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_INT 11
29068: PUSH
29069: LD_INT 12
29071: PUSH
29072: LD_INT 13
29074: PUSH
29075: LD_INT 14
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: ST_TO_ADDR
29096: GO 29227
29098: LD_INT 1
29100: DOUBLE
29101: EQUAL
29102: IFTRUE 29106
29104: GO 29168
29106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29107: LD_ADDR_VAR 0 3
29111: PUSH
29112: LD_INT 11
29114: PUSH
29115: LD_INT 12
29117: PUSH
29118: LD_INT 13
29120: PUSH
29121: LD_INT 14
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: LD_INT 2
29129: PUSH
29130: LD_INT 3
29132: PUSH
29133: LD_INT 4
29135: PUSH
29136: LD_INT 5
29138: PUSH
29139: LD_INT 21
29141: PUSH
29142: LD_INT 23
29144: PUSH
29145: LD_INT 22
29147: PUSH
29148: LD_INT 24
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: ST_TO_ADDR
29166: GO 29227
29168: LD_INT 3
29170: DOUBLE
29171: EQUAL
29172: IFTRUE 29176
29174: GO 29226
29176: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29177: LD_ADDR_VAR 0 3
29181: PUSH
29182: LD_INT 13
29184: PUSH
29185: LD_INT 14
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: LD_INT 3
29193: PUSH
29194: LD_INT 4
29196: PUSH
29197: LD_INT 5
29199: PUSH
29200: LD_INT 21
29202: PUSH
29203: LD_INT 22
29205: PUSH
29206: LD_INT 23
29208: PUSH
29209: LD_INT 24
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: ST_TO_ADDR
29224: GO 29227
29226: POP
// result := ( chassis in result ) ;
29227: LD_ADDR_VAR 0 3
29231: PUSH
29232: LD_VAR 0 1
29236: PUSH
29237: LD_VAR 0 3
29241: IN
29242: ST_TO_ADDR
// end ;
29243: LD_VAR 0 3
29247: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29248: LD_INT 0
29250: PPUSH
// if not chassis or not weapon then
29251: LD_VAR 0 1
29255: NOT
29256: PUSH
29257: LD_VAR 0 2
29261: NOT
29262: OR
29263: IFFALSE 29267
// exit ;
29265: GO 30329
// case weapon of us_machine_gun :
29267: LD_VAR 0 2
29271: PUSH
29272: LD_INT 2
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29280
29278: GO 29310
29280: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29281: LD_ADDR_VAR 0 3
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: LD_INT 3
29294: PUSH
29295: LD_INT 4
29297: PUSH
29298: LD_INT 5
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: ST_TO_ADDR
29308: GO 30313
29310: LD_INT 3
29312: DOUBLE
29313: EQUAL
29314: IFTRUE 29318
29316: GO 29348
29318: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29319: LD_ADDR_VAR 0 3
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: LD_INT 3
29332: PUSH
29333: LD_INT 4
29335: PUSH
29336: LD_INT 5
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: ST_TO_ADDR
29346: GO 30313
29348: LD_INT 11
29350: DOUBLE
29351: EQUAL
29352: IFTRUE 29356
29354: GO 29386
29356: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29357: LD_ADDR_VAR 0 3
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: LD_INT 3
29370: PUSH
29371: LD_INT 4
29373: PUSH
29374: LD_INT 5
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: ST_TO_ADDR
29384: GO 30313
29386: LD_INT 4
29388: DOUBLE
29389: EQUAL
29390: IFTRUE 29394
29392: GO 29420
29394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29395: LD_ADDR_VAR 0 3
29399: PUSH
29400: LD_INT 2
29402: PUSH
29403: LD_INT 3
29405: PUSH
29406: LD_INT 4
29408: PUSH
29409: LD_INT 5
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
29418: GO 30313
29420: LD_INT 5
29422: DOUBLE
29423: EQUAL
29424: IFTRUE 29428
29426: GO 29454
29428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: LD_INT 2
29436: PUSH
29437: LD_INT 3
29439: PUSH
29440: LD_INT 4
29442: PUSH
29443: LD_INT 5
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: ST_TO_ADDR
29452: GO 30313
29454: LD_INT 9
29456: DOUBLE
29457: EQUAL
29458: IFTRUE 29462
29460: GO 29488
29462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29463: LD_ADDR_VAR 0 3
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: LD_INT 4
29476: PUSH
29477: LD_INT 5
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
29486: GO 30313
29488: LD_INT 7
29490: DOUBLE
29491: EQUAL
29492: IFTRUE 29496
29494: GO 29522
29496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29497: LD_ADDR_VAR 0 3
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: LD_INT 3
29507: PUSH
29508: LD_INT 4
29510: PUSH
29511: LD_INT 5
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
29520: GO 30313
29522: LD_INT 12
29524: DOUBLE
29525: EQUAL
29526: IFTRUE 29530
29528: GO 29556
29530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29531: LD_ADDR_VAR 0 3
29535: PUSH
29536: LD_INT 2
29538: PUSH
29539: LD_INT 3
29541: PUSH
29542: LD_INT 4
29544: PUSH
29545: LD_INT 5
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
29554: GO 30313
29556: LD_INT 13
29558: DOUBLE
29559: EQUAL
29560: IFTRUE 29564
29562: GO 29590
29564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29565: LD_ADDR_VAR 0 3
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 4
29578: PUSH
29579: LD_INT 5
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
29588: GO 30313
29590: LD_INT 14
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29616
29598: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29599: LD_ADDR_VAR 0 3
29603: PUSH
29604: LD_INT 4
29606: PUSH
29607: LD_INT 5
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: ST_TO_ADDR
29614: GO 30313
29616: LD_INT 6
29618: DOUBLE
29619: EQUAL
29620: IFTRUE 29624
29622: GO 29642
29624: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29625: LD_ADDR_VAR 0 3
29629: PUSH
29630: LD_INT 4
29632: PUSH
29633: LD_INT 5
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: ST_TO_ADDR
29640: GO 30313
29642: LD_INT 10
29644: DOUBLE
29645: EQUAL
29646: IFTRUE 29650
29648: GO 29668
29650: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29651: LD_ADDR_VAR 0 3
29655: PUSH
29656: LD_INT 4
29658: PUSH
29659: LD_INT 5
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: ST_TO_ADDR
29666: GO 30313
29668: LD_INT 22
29670: DOUBLE
29671: EQUAL
29672: IFTRUE 29676
29674: GO 29702
29676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29677: LD_ADDR_VAR 0 3
29681: PUSH
29682: LD_INT 11
29684: PUSH
29685: LD_INT 12
29687: PUSH
29688: LD_INT 13
29690: PUSH
29691: LD_INT 14
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
29700: GO 30313
29702: LD_INT 23
29704: DOUBLE
29705: EQUAL
29706: IFTRUE 29710
29708: GO 29736
29710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29711: LD_ADDR_VAR 0 3
29715: PUSH
29716: LD_INT 11
29718: PUSH
29719: LD_INT 12
29721: PUSH
29722: LD_INT 13
29724: PUSH
29725: LD_INT 14
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
29734: GO 30313
29736: LD_INT 24
29738: DOUBLE
29739: EQUAL
29740: IFTRUE 29744
29742: GO 29770
29744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29745: LD_ADDR_VAR 0 3
29749: PUSH
29750: LD_INT 11
29752: PUSH
29753: LD_INT 12
29755: PUSH
29756: LD_INT 13
29758: PUSH
29759: LD_INT 14
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: ST_TO_ADDR
29768: GO 30313
29770: LD_INT 30
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 29804
29778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29779: LD_ADDR_VAR 0 3
29783: PUSH
29784: LD_INT 11
29786: PUSH
29787: LD_INT 12
29789: PUSH
29790: LD_INT 13
29792: PUSH
29793: LD_INT 14
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: ST_TO_ADDR
29802: GO 30313
29804: LD_INT 25
29806: DOUBLE
29807: EQUAL
29808: IFTRUE 29812
29810: GO 29830
29812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29813: LD_ADDR_VAR 0 3
29817: PUSH
29818: LD_INT 13
29820: PUSH
29821: LD_INT 14
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: ST_TO_ADDR
29828: GO 30313
29830: LD_INT 27
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29856
29838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29839: LD_ADDR_VAR 0 3
29843: PUSH
29844: LD_INT 13
29846: PUSH
29847: LD_INT 14
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: ST_TO_ADDR
29854: GO 30313
29856: LD_EXP 100
29860: DOUBLE
29861: EQUAL
29862: IFTRUE 29866
29864: GO 29892
29866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29867: LD_ADDR_VAR 0 3
29871: PUSH
29872: LD_INT 11
29874: PUSH
29875: LD_INT 12
29877: PUSH
29878: LD_INT 13
29880: PUSH
29881: LD_INT 14
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: ST_TO_ADDR
29890: GO 30313
29892: LD_INT 28
29894: DOUBLE
29895: EQUAL
29896: IFTRUE 29900
29898: GO 29918
29900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29901: LD_ADDR_VAR 0 3
29905: PUSH
29906: LD_INT 13
29908: PUSH
29909: LD_INT 14
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: ST_TO_ADDR
29916: GO 30313
29918: LD_INT 29
29920: DOUBLE
29921: EQUAL
29922: IFTRUE 29926
29924: GO 29944
29926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29927: LD_ADDR_VAR 0 3
29931: PUSH
29932: LD_INT 13
29934: PUSH
29935: LD_INT 14
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: ST_TO_ADDR
29942: GO 30313
29944: LD_INT 31
29946: DOUBLE
29947: EQUAL
29948: IFTRUE 29952
29950: GO 29970
29952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_INT 13
29960: PUSH
29961: LD_INT 14
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: ST_TO_ADDR
29968: GO 30313
29970: LD_INT 26
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 29996
29978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29979: LD_ADDR_VAR 0 3
29983: PUSH
29984: LD_INT 13
29986: PUSH
29987: LD_INT 14
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: ST_TO_ADDR
29994: GO 30313
29996: LD_INT 42
29998: DOUBLE
29999: EQUAL
30000: IFTRUE 30004
30002: GO 30030
30004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30005: LD_ADDR_VAR 0 3
30009: PUSH
30010: LD_INT 21
30012: PUSH
30013: LD_INT 22
30015: PUSH
30016: LD_INT 23
30018: PUSH
30019: LD_INT 24
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: ST_TO_ADDR
30028: GO 30313
30030: LD_INT 43
30032: DOUBLE
30033: EQUAL
30034: IFTRUE 30038
30036: GO 30064
30038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30039: LD_ADDR_VAR 0 3
30043: PUSH
30044: LD_INT 21
30046: PUSH
30047: LD_INT 22
30049: PUSH
30050: LD_INT 23
30052: PUSH
30053: LD_INT 24
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
30062: GO 30313
30064: LD_INT 44
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30098
30072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 21
30080: PUSH
30081: LD_INT 22
30083: PUSH
30084: LD_INT 23
30086: PUSH
30087: LD_INT 24
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
30096: GO 30313
30098: LD_INT 45
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30106
30104: GO 30132
30106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_INT 21
30114: PUSH
30115: LD_INT 22
30117: PUSH
30118: LD_INT 23
30120: PUSH
30121: LD_INT 24
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: ST_TO_ADDR
30130: GO 30313
30132: LD_INT 49
30134: DOUBLE
30135: EQUAL
30136: IFTRUE 30140
30138: GO 30166
30140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30141: LD_ADDR_VAR 0 3
30145: PUSH
30146: LD_INT 21
30148: PUSH
30149: LD_INT 22
30151: PUSH
30152: LD_INT 23
30154: PUSH
30155: LD_INT 24
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: ST_TO_ADDR
30164: GO 30313
30166: LD_INT 51
30168: DOUBLE
30169: EQUAL
30170: IFTRUE 30174
30172: GO 30200
30174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30175: LD_ADDR_VAR 0 3
30179: PUSH
30180: LD_INT 21
30182: PUSH
30183: LD_INT 22
30185: PUSH
30186: LD_INT 23
30188: PUSH
30189: LD_INT 24
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: ST_TO_ADDR
30198: GO 30313
30200: LD_INT 52
30202: DOUBLE
30203: EQUAL
30204: IFTRUE 30208
30206: GO 30234
30208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30209: LD_ADDR_VAR 0 3
30213: PUSH
30214: LD_INT 21
30216: PUSH
30217: LD_INT 22
30219: PUSH
30220: LD_INT 23
30222: PUSH
30223: LD_INT 24
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: ST_TO_ADDR
30232: GO 30313
30234: LD_INT 53
30236: DOUBLE
30237: EQUAL
30238: IFTRUE 30242
30240: GO 30260
30242: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30243: LD_ADDR_VAR 0 3
30247: PUSH
30248: LD_INT 23
30250: PUSH
30251: LD_INT 24
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: ST_TO_ADDR
30258: GO 30313
30260: LD_INT 46
30262: DOUBLE
30263: EQUAL
30264: IFTRUE 30268
30266: GO 30286
30268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30269: LD_ADDR_VAR 0 3
30273: PUSH
30274: LD_INT 23
30276: PUSH
30277: LD_INT 24
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: ST_TO_ADDR
30284: GO 30313
30286: LD_INT 47
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30294
30292: GO 30312
30294: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30295: LD_ADDR_VAR 0 3
30299: PUSH
30300: LD_INT 23
30302: PUSH
30303: LD_INT 24
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: ST_TO_ADDR
30310: GO 30313
30312: POP
// result := ( chassis in result ) ;
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_VAR 0 1
30322: PUSH
30323: LD_VAR 0 3
30327: IN
30328: ST_TO_ADDR
// end ;
30329: LD_VAR 0 3
30333: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30334: LD_INT 0
30336: PPUSH
30337: PPUSH
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
// result := array ;
30343: LD_ADDR_VAR 0 5
30347: PUSH
30348: LD_VAR 0 1
30352: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30353: LD_VAR 0 1
30357: NOT
30358: PUSH
30359: LD_VAR 0 2
30363: NOT
30364: OR
30365: PUSH
30366: LD_VAR 0 3
30370: NOT
30371: OR
30372: PUSH
30373: LD_VAR 0 2
30377: PUSH
30378: LD_VAR 0 1
30382: GREATER
30383: OR
30384: PUSH
30385: LD_VAR 0 3
30389: PUSH
30390: LD_VAR 0 1
30394: GREATER
30395: OR
30396: IFFALSE 30400
// exit ;
30398: GO 30696
// if direction then
30400: LD_VAR 0 4
30404: IFFALSE 30468
// begin d := 1 ;
30406: LD_ADDR_VAR 0 9
30410: PUSH
30411: LD_INT 1
30413: ST_TO_ADDR
// if i_from > i_to then
30414: LD_VAR 0 2
30418: PUSH
30419: LD_VAR 0 3
30423: GREATER
30424: IFFALSE 30450
// length := ( array - i_from ) + i_to else
30426: LD_ADDR_VAR 0 11
30430: PUSH
30431: LD_VAR 0 1
30435: PUSH
30436: LD_VAR 0 2
30440: MINUS
30441: PUSH
30442: LD_VAR 0 3
30446: PLUS
30447: ST_TO_ADDR
30448: GO 30466
// length := i_to - i_from ;
30450: LD_ADDR_VAR 0 11
30454: PUSH
30455: LD_VAR 0 3
30459: PUSH
30460: LD_VAR 0 2
30464: MINUS
30465: ST_TO_ADDR
// end else
30466: GO 30529
// begin d := - 1 ;
30468: LD_ADDR_VAR 0 9
30472: PUSH
30473: LD_INT 1
30475: NEG
30476: ST_TO_ADDR
// if i_from > i_to then
30477: LD_VAR 0 2
30481: PUSH
30482: LD_VAR 0 3
30486: GREATER
30487: IFFALSE 30507
// length := i_from - i_to else
30489: LD_ADDR_VAR 0 11
30493: PUSH
30494: LD_VAR 0 2
30498: PUSH
30499: LD_VAR 0 3
30503: MINUS
30504: ST_TO_ADDR
30505: GO 30529
// length := ( array - i_to ) + i_from ;
30507: LD_ADDR_VAR 0 11
30511: PUSH
30512: LD_VAR 0 1
30516: PUSH
30517: LD_VAR 0 3
30521: MINUS
30522: PUSH
30523: LD_VAR 0 2
30527: PLUS
30528: ST_TO_ADDR
// end ; if not length then
30529: LD_VAR 0 11
30533: NOT
30534: IFFALSE 30538
// exit ;
30536: GO 30696
// tmp := array ;
30538: LD_ADDR_VAR 0 10
30542: PUSH
30543: LD_VAR 0 1
30547: ST_TO_ADDR
// for i = 1 to length do
30548: LD_ADDR_VAR 0 6
30552: PUSH
30553: DOUBLE
30554: LD_INT 1
30556: DEC
30557: ST_TO_ADDR
30558: LD_VAR 0 11
30562: PUSH
30563: FOR_TO
30564: IFFALSE 30684
// begin for j = 1 to array do
30566: LD_ADDR_VAR 0 7
30570: PUSH
30571: DOUBLE
30572: LD_INT 1
30574: DEC
30575: ST_TO_ADDR
30576: LD_VAR 0 1
30580: PUSH
30581: FOR_TO
30582: IFFALSE 30670
// begin k := j + d ;
30584: LD_ADDR_VAR 0 8
30588: PUSH
30589: LD_VAR 0 7
30593: PUSH
30594: LD_VAR 0 9
30598: PLUS
30599: ST_TO_ADDR
// if k > array then
30600: LD_VAR 0 8
30604: PUSH
30605: LD_VAR 0 1
30609: GREATER
30610: IFFALSE 30620
// k := 1 ;
30612: LD_ADDR_VAR 0 8
30616: PUSH
30617: LD_INT 1
30619: ST_TO_ADDR
// if not k then
30620: LD_VAR 0 8
30624: NOT
30625: IFFALSE 30637
// k := array ;
30627: LD_ADDR_VAR 0 8
30631: PUSH
30632: LD_VAR 0 1
30636: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30637: LD_ADDR_VAR 0 10
30641: PUSH
30642: LD_VAR 0 10
30646: PPUSH
30647: LD_VAR 0 8
30651: PPUSH
30652: LD_VAR 0 1
30656: PUSH
30657: LD_VAR 0 7
30661: ARRAY
30662: PPUSH
30663: CALL_OW 1
30667: ST_TO_ADDR
// end ;
30668: GO 30581
30670: POP
30671: POP
// array := tmp ;
30672: LD_ADDR_VAR 0 1
30676: PUSH
30677: LD_VAR 0 10
30681: ST_TO_ADDR
// end ;
30682: GO 30563
30684: POP
30685: POP
// result := array ;
30686: LD_ADDR_VAR 0 5
30690: PUSH
30691: LD_VAR 0 1
30695: ST_TO_ADDR
// end ;
30696: LD_VAR 0 5
30700: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30701: LD_INT 0
30703: PPUSH
30704: PPUSH
// result := 0 ;
30705: LD_ADDR_VAR 0 3
30709: PUSH
30710: LD_INT 0
30712: ST_TO_ADDR
// if not array or not value in array then
30713: LD_VAR 0 1
30717: NOT
30718: PUSH
30719: LD_VAR 0 2
30723: PUSH
30724: LD_VAR 0 1
30728: IN
30729: NOT
30730: OR
30731: IFFALSE 30735
// exit ;
30733: GO 30789
// for i = 1 to array do
30735: LD_ADDR_VAR 0 4
30739: PUSH
30740: DOUBLE
30741: LD_INT 1
30743: DEC
30744: ST_TO_ADDR
30745: LD_VAR 0 1
30749: PUSH
30750: FOR_TO
30751: IFFALSE 30787
// if value = array [ i ] then
30753: LD_VAR 0 2
30757: PUSH
30758: LD_VAR 0 1
30762: PUSH
30763: LD_VAR 0 4
30767: ARRAY
30768: EQUAL
30769: IFFALSE 30785
// begin result := i ;
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_VAR 0 4
30780: ST_TO_ADDR
// exit ;
30781: POP
30782: POP
30783: GO 30789
// end ;
30785: GO 30750
30787: POP
30788: POP
// end ;
30789: LD_VAR 0 3
30793: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30794: LD_INT 0
30796: PPUSH
// vc_chassis := chassis ;
30797: LD_ADDR_OWVAR 37
30801: PUSH
30802: LD_VAR 0 1
30806: ST_TO_ADDR
// vc_engine := engine ;
30807: LD_ADDR_OWVAR 39
30811: PUSH
30812: LD_VAR 0 2
30816: ST_TO_ADDR
// vc_control := control ;
30817: LD_ADDR_OWVAR 38
30821: PUSH
30822: LD_VAR 0 3
30826: ST_TO_ADDR
// vc_weapon := weapon ;
30827: LD_ADDR_OWVAR 40
30831: PUSH
30832: LD_VAR 0 4
30836: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30837: LD_ADDR_OWVAR 41
30841: PUSH
30842: LD_VAR 0 5
30846: ST_TO_ADDR
// end ;
30847: LD_VAR 0 6
30851: RET
// export function WantPlant ( unit ) ; var task ; begin
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
// result := false ;
30856: LD_ADDR_VAR 0 2
30860: PUSH
30861: LD_INT 0
30863: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_VAR 0 1
30873: PPUSH
30874: CALL_OW 437
30878: ST_TO_ADDR
// if task then
30879: LD_VAR 0 3
30883: IFFALSE 30911
// if task [ 1 ] [ 1 ] = p then
30885: LD_VAR 0 3
30889: PUSH
30890: LD_INT 1
30892: ARRAY
30893: PUSH
30894: LD_INT 1
30896: ARRAY
30897: PUSH
30898: LD_STRING p
30900: EQUAL
30901: IFFALSE 30911
// result := true ;
30903: LD_ADDR_VAR 0 2
30907: PUSH
30908: LD_INT 1
30910: ST_TO_ADDR
// end ;
30911: LD_VAR 0 2
30915: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30916: LD_INT 0
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
// if pos < 1 then
30922: LD_VAR 0 2
30926: PUSH
30927: LD_INT 1
30929: LESS
30930: IFFALSE 30934
// exit ;
30932: GO 31237
// if pos = 1 then
30934: LD_VAR 0 2
30938: PUSH
30939: LD_INT 1
30941: EQUAL
30942: IFFALSE 30975
// result := Replace ( arr , pos [ 1 ] , value ) else
30944: LD_ADDR_VAR 0 4
30948: PUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: LD_VAR 0 2
30958: PUSH
30959: LD_INT 1
30961: ARRAY
30962: PPUSH
30963: LD_VAR 0 3
30967: PPUSH
30968: CALL_OW 1
30972: ST_TO_ADDR
30973: GO 31237
// begin tmp := arr ;
30975: LD_ADDR_VAR 0 6
30979: PUSH
30980: LD_VAR 0 1
30984: ST_TO_ADDR
// s_arr := [ tmp ] ;
30985: LD_ADDR_VAR 0 7
30989: PUSH
30990: LD_VAR 0 6
30994: PUSH
30995: EMPTY
30996: LIST
30997: ST_TO_ADDR
// for i = 1 to pos - 1 do
30998: LD_ADDR_VAR 0 5
31002: PUSH
31003: DOUBLE
31004: LD_INT 1
31006: DEC
31007: ST_TO_ADDR
31008: LD_VAR 0 2
31012: PUSH
31013: LD_INT 1
31015: MINUS
31016: PUSH
31017: FOR_TO
31018: IFFALSE 31063
// begin tmp := tmp [ pos [ i ] ] ;
31020: LD_ADDR_VAR 0 6
31024: PUSH
31025: LD_VAR 0 6
31029: PUSH
31030: LD_VAR 0 2
31034: PUSH
31035: LD_VAR 0 5
31039: ARRAY
31040: ARRAY
31041: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31042: LD_ADDR_VAR 0 7
31046: PUSH
31047: LD_VAR 0 7
31051: PUSH
31052: LD_VAR 0 6
31056: PUSH
31057: EMPTY
31058: LIST
31059: ADD
31060: ST_TO_ADDR
// end ;
31061: GO 31017
31063: POP
31064: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31065: LD_ADDR_VAR 0 6
31069: PUSH
31070: LD_VAR 0 6
31074: PPUSH
31075: LD_VAR 0 2
31079: PUSH
31080: LD_VAR 0 2
31084: ARRAY
31085: PPUSH
31086: LD_VAR 0 3
31090: PPUSH
31091: CALL_OW 1
31095: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31096: LD_ADDR_VAR 0 7
31100: PUSH
31101: LD_VAR 0 7
31105: PPUSH
31106: LD_VAR 0 7
31110: PPUSH
31111: LD_VAR 0 6
31115: PPUSH
31116: CALL_OW 1
31120: ST_TO_ADDR
// for i = s_arr downto 2 do
31121: LD_ADDR_VAR 0 5
31125: PUSH
31126: DOUBLE
31127: LD_VAR 0 7
31131: INC
31132: ST_TO_ADDR
31133: LD_INT 2
31135: PUSH
31136: FOR_DOWNTO
31137: IFFALSE 31221
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31139: LD_ADDR_VAR 0 6
31143: PUSH
31144: LD_VAR 0 7
31148: PUSH
31149: LD_VAR 0 5
31153: PUSH
31154: LD_INT 1
31156: MINUS
31157: ARRAY
31158: PPUSH
31159: LD_VAR 0 2
31163: PUSH
31164: LD_VAR 0 5
31168: PUSH
31169: LD_INT 1
31171: MINUS
31172: ARRAY
31173: PPUSH
31174: LD_VAR 0 7
31178: PUSH
31179: LD_VAR 0 5
31183: ARRAY
31184: PPUSH
31185: CALL_OW 1
31189: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31190: LD_ADDR_VAR 0 7
31194: PUSH
31195: LD_VAR 0 7
31199: PPUSH
31200: LD_VAR 0 5
31204: PUSH
31205: LD_INT 1
31207: MINUS
31208: PPUSH
31209: LD_VAR 0 6
31213: PPUSH
31214: CALL_OW 1
31218: ST_TO_ADDR
// end ;
31219: GO 31136
31221: POP
31222: POP
// result := s_arr [ 1 ] ;
31223: LD_ADDR_VAR 0 4
31227: PUSH
31228: LD_VAR 0 7
31232: PUSH
31233: LD_INT 1
31235: ARRAY
31236: ST_TO_ADDR
// end ; end ;
31237: LD_VAR 0 4
31241: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31242: LD_INT 0
31244: PPUSH
31245: PPUSH
// if not list then
31246: LD_VAR 0 1
31250: NOT
31251: IFFALSE 31255
// exit ;
31253: GO 31346
// i := list [ pos1 ] ;
31255: LD_ADDR_VAR 0 5
31259: PUSH
31260: LD_VAR 0 1
31264: PUSH
31265: LD_VAR 0 2
31269: ARRAY
31270: ST_TO_ADDR
// if not i then
31271: LD_VAR 0 5
31275: NOT
31276: IFFALSE 31280
// exit ;
31278: GO 31346
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31280: LD_ADDR_VAR 0 1
31284: PUSH
31285: LD_VAR 0 1
31289: PPUSH
31290: LD_VAR 0 2
31294: PPUSH
31295: LD_VAR 0 1
31299: PUSH
31300: LD_VAR 0 3
31304: ARRAY
31305: PPUSH
31306: CALL_OW 1
31310: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31311: LD_ADDR_VAR 0 1
31315: PUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: LD_VAR 0 3
31325: PPUSH
31326: LD_VAR 0 5
31330: PPUSH
31331: CALL_OW 1
31335: ST_TO_ADDR
// result := list ;
31336: LD_ADDR_VAR 0 4
31340: PUSH
31341: LD_VAR 0 1
31345: ST_TO_ADDR
// end ;
31346: LD_VAR 0 4
31350: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31351: LD_INT 0
31353: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31354: LD_ADDR_VAR 0 5
31358: PUSH
31359: LD_VAR 0 1
31363: PPUSH
31364: CALL_OW 250
31368: PPUSH
31369: LD_VAR 0 1
31373: PPUSH
31374: CALL_OW 251
31378: PPUSH
31379: LD_VAR 0 2
31383: PPUSH
31384: LD_VAR 0 3
31388: PPUSH
31389: LD_VAR 0 4
31393: PPUSH
31394: CALL 31404 0 5
31398: ST_TO_ADDR
// end ;
31399: LD_VAR 0 5
31403: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31404: LD_INT 0
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
// if not list then
31410: LD_VAR 0 3
31414: NOT
31415: IFFALSE 31419
// exit ;
31417: GO 31807
// result := [ ] ;
31419: LD_ADDR_VAR 0 6
31423: PUSH
31424: EMPTY
31425: ST_TO_ADDR
// for i in list do
31426: LD_ADDR_VAR 0 7
31430: PUSH
31431: LD_VAR 0 3
31435: PUSH
31436: FOR_IN
31437: IFFALSE 31639
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31439: LD_ADDR_VAR 0 9
31443: PUSH
31444: LD_VAR 0 7
31448: PPUSH
31449: LD_VAR 0 1
31453: PPUSH
31454: LD_VAR 0 2
31458: PPUSH
31459: CALL_OW 297
31463: ST_TO_ADDR
// if not result then
31464: LD_VAR 0 6
31468: NOT
31469: IFFALSE 31495
// result := [ [ i , tmp ] ] else
31471: LD_ADDR_VAR 0 6
31475: PUSH
31476: LD_VAR 0 7
31480: PUSH
31481: LD_VAR 0 9
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: EMPTY
31491: LIST
31492: ST_TO_ADDR
31493: GO 31637
// begin if result [ result ] [ 2 ] < tmp then
31495: LD_VAR 0 6
31499: PUSH
31500: LD_VAR 0 6
31504: ARRAY
31505: PUSH
31506: LD_INT 2
31508: ARRAY
31509: PUSH
31510: LD_VAR 0 9
31514: LESS
31515: IFFALSE 31557
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31517: LD_ADDR_VAR 0 6
31521: PUSH
31522: LD_VAR 0 6
31526: PPUSH
31527: LD_VAR 0 6
31531: PUSH
31532: LD_INT 1
31534: PLUS
31535: PPUSH
31536: LD_VAR 0 7
31540: PUSH
31541: LD_VAR 0 9
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PPUSH
31550: CALL_OW 2
31554: ST_TO_ADDR
31555: GO 31637
// for j = 1 to result do
31557: LD_ADDR_VAR 0 8
31561: PUSH
31562: DOUBLE
31563: LD_INT 1
31565: DEC
31566: ST_TO_ADDR
31567: LD_VAR 0 6
31571: PUSH
31572: FOR_TO
31573: IFFALSE 31635
// begin if tmp < result [ j ] [ 2 ] then
31575: LD_VAR 0 9
31579: PUSH
31580: LD_VAR 0 6
31584: PUSH
31585: LD_VAR 0 8
31589: ARRAY
31590: PUSH
31591: LD_INT 2
31593: ARRAY
31594: LESS
31595: IFFALSE 31633
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31597: LD_ADDR_VAR 0 6
31601: PUSH
31602: LD_VAR 0 6
31606: PPUSH
31607: LD_VAR 0 8
31611: PPUSH
31612: LD_VAR 0 7
31616: PUSH
31617: LD_VAR 0 9
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PPUSH
31626: CALL_OW 2
31630: ST_TO_ADDR
// break ;
31631: GO 31635
// end ; end ;
31633: GO 31572
31635: POP
31636: POP
// end ; end ;
31637: GO 31436
31639: POP
31640: POP
// if result and not asc then
31641: LD_VAR 0 6
31645: PUSH
31646: LD_VAR 0 4
31650: NOT
31651: AND
31652: IFFALSE 31727
// begin tmp := result ;
31654: LD_ADDR_VAR 0 9
31658: PUSH
31659: LD_VAR 0 6
31663: ST_TO_ADDR
// for i = tmp downto 1 do
31664: LD_ADDR_VAR 0 7
31668: PUSH
31669: DOUBLE
31670: LD_VAR 0 9
31674: INC
31675: ST_TO_ADDR
31676: LD_INT 1
31678: PUSH
31679: FOR_DOWNTO
31680: IFFALSE 31725
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31682: LD_ADDR_VAR 0 6
31686: PUSH
31687: LD_VAR 0 6
31691: PPUSH
31692: LD_VAR 0 9
31696: PUSH
31697: LD_VAR 0 7
31701: MINUS
31702: PUSH
31703: LD_INT 1
31705: PLUS
31706: PPUSH
31707: LD_VAR 0 9
31711: PUSH
31712: LD_VAR 0 7
31716: ARRAY
31717: PPUSH
31718: CALL_OW 1
31722: ST_TO_ADDR
31723: GO 31679
31725: POP
31726: POP
// end ; tmp := [ ] ;
31727: LD_ADDR_VAR 0 9
31731: PUSH
31732: EMPTY
31733: ST_TO_ADDR
// if mode then
31734: LD_VAR 0 5
31738: IFFALSE 31807
// begin for i = 1 to result do
31740: LD_ADDR_VAR 0 7
31744: PUSH
31745: DOUBLE
31746: LD_INT 1
31748: DEC
31749: ST_TO_ADDR
31750: LD_VAR 0 6
31754: PUSH
31755: FOR_TO
31756: IFFALSE 31795
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31758: LD_ADDR_VAR 0 9
31762: PUSH
31763: LD_VAR 0 9
31767: PPUSH
31768: LD_VAR 0 7
31772: PPUSH
31773: LD_VAR 0 6
31777: PUSH
31778: LD_VAR 0 7
31782: ARRAY
31783: PUSH
31784: LD_INT 1
31786: ARRAY
31787: PPUSH
31788: CALL_OW 1
31792: ST_TO_ADDR
31793: GO 31755
31795: POP
31796: POP
// result := tmp ;
31797: LD_ADDR_VAR 0 6
31801: PUSH
31802: LD_VAR 0 9
31806: ST_TO_ADDR
// end ; end ;
31807: LD_VAR 0 6
31811: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31812: LD_INT 0
31814: PPUSH
31815: PPUSH
31816: PPUSH
31817: PPUSH
31818: PPUSH
31819: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31820: LD_ADDR_VAR 0 5
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: ST_TO_ADDR
// if not x or not y then
31842: LD_VAR 0 2
31846: NOT
31847: PUSH
31848: LD_VAR 0 3
31852: NOT
31853: OR
31854: IFFALSE 31858
// exit ;
31856: GO 33510
// if not range then
31858: LD_VAR 0 4
31862: NOT
31863: IFFALSE 31873
// range := 10 ;
31865: LD_ADDR_VAR 0 4
31869: PUSH
31870: LD_INT 10
31872: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31873: LD_ADDR_VAR 0 8
31877: PUSH
31878: LD_INT 81
31880: PUSH
31881: LD_VAR 0 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 92
31892: PUSH
31893: LD_VAR 0 2
31897: PUSH
31898: LD_VAR 0 3
31902: PUSH
31903: LD_VAR 0 4
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 3
31916: PUSH
31917: LD_INT 21
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: PPUSH
31936: CALL_OW 69
31940: ST_TO_ADDR
// if not tmp then
31941: LD_VAR 0 8
31945: NOT
31946: IFFALSE 31950
// exit ;
31948: GO 33510
// for i in tmp do
31950: LD_ADDR_VAR 0 6
31954: PUSH
31955: LD_VAR 0 8
31959: PUSH
31960: FOR_IN
31961: IFFALSE 33485
// begin points := [ 0 , 0 , 0 ] ;
31963: LD_ADDR_VAR 0 9
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: ST_TO_ADDR
// bpoints := 1 ;
31982: LD_ADDR_VAR 0 10
31986: PUSH
31987: LD_INT 1
31989: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31990: LD_VAR 0 6
31994: PPUSH
31995: CALL_OW 247
31999: PUSH
32000: LD_INT 1
32002: DOUBLE
32003: EQUAL
32004: IFTRUE 32008
32006: GO 32586
32008: POP
// begin if GetClass ( i ) = 1 then
32009: LD_VAR 0 6
32013: PPUSH
32014: CALL_OW 257
32018: PUSH
32019: LD_INT 1
32021: EQUAL
32022: IFFALSE 32043
// points := [ 10 , 5 , 3 ] ;
32024: LD_ADDR_VAR 0 9
32028: PUSH
32029: LD_INT 10
32031: PUSH
32032: LD_INT 5
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32043: LD_VAR 0 6
32047: PPUSH
32048: CALL_OW 257
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: LD_INT 4
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: IN
32067: IFFALSE 32088
// points := [ 3 , 2 , 1 ] ;
32069: LD_ADDR_VAR 0 9
32073: PUSH
32074: LD_INT 3
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32088: LD_VAR 0 6
32092: PPUSH
32093: CALL_OW 257
32097: PUSH
32098: LD_INT 5
32100: EQUAL
32101: IFFALSE 32122
// points := [ 130 , 5 , 2 ] ;
32103: LD_ADDR_VAR 0 9
32107: PUSH
32108: LD_INT 130
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32122: LD_VAR 0 6
32126: PPUSH
32127: CALL_OW 257
32131: PUSH
32132: LD_INT 8
32134: EQUAL
32135: IFFALSE 32156
// points := [ 35 , 35 , 30 ] ;
32137: LD_ADDR_VAR 0 9
32141: PUSH
32142: LD_INT 35
32144: PUSH
32145: LD_INT 35
32147: PUSH
32148: LD_INT 30
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32156: LD_VAR 0 6
32160: PPUSH
32161: CALL_OW 257
32165: PUSH
32166: LD_INT 9
32168: EQUAL
32169: IFFALSE 32190
// points := [ 20 , 55 , 40 ] ;
32171: LD_ADDR_VAR 0 9
32175: PUSH
32176: LD_INT 20
32178: PUSH
32179: LD_INT 55
32181: PUSH
32182: LD_INT 40
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32190: LD_VAR 0 6
32194: PPUSH
32195: CALL_OW 257
32199: PUSH
32200: LD_INT 12
32202: PUSH
32203: LD_INT 16
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: IN
32210: IFFALSE 32231
// points := [ 5 , 3 , 2 ] ;
32212: LD_ADDR_VAR 0 9
32216: PUSH
32217: LD_INT 5
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: LIST
32230: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32231: LD_VAR 0 6
32235: PPUSH
32236: CALL_OW 257
32240: PUSH
32241: LD_INT 17
32243: EQUAL
32244: IFFALSE 32265
// points := [ 100 , 50 , 75 ] ;
32246: LD_ADDR_VAR 0 9
32250: PUSH
32251: LD_INT 100
32253: PUSH
32254: LD_INT 50
32256: PUSH
32257: LD_INT 75
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32265: LD_VAR 0 6
32269: PPUSH
32270: CALL_OW 257
32274: PUSH
32275: LD_INT 15
32277: EQUAL
32278: IFFALSE 32299
// points := [ 10 , 5 , 3 ] ;
32280: LD_ADDR_VAR 0 9
32284: PUSH
32285: LD_INT 10
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: LIST
32298: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32299: LD_VAR 0 6
32303: PPUSH
32304: CALL_OW 257
32308: PUSH
32309: LD_INT 14
32311: EQUAL
32312: IFFALSE 32333
// points := [ 10 , 0 , 0 ] ;
32314: LD_ADDR_VAR 0 9
32318: PUSH
32319: LD_INT 10
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: LIST
32332: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32333: LD_VAR 0 6
32337: PPUSH
32338: CALL_OW 257
32342: PUSH
32343: LD_INT 11
32345: EQUAL
32346: IFFALSE 32367
// points := [ 30 , 10 , 5 ] ;
32348: LD_ADDR_VAR 0 9
32352: PUSH
32353: LD_INT 30
32355: PUSH
32356: LD_INT 10
32358: PUSH
32359: LD_INT 5
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32367: LD_VAR 0 1
32371: PPUSH
32372: LD_INT 5
32374: PPUSH
32375: CALL_OW 321
32379: PUSH
32380: LD_INT 2
32382: EQUAL
32383: IFFALSE 32400
// bpoints := bpoints * 1.8 ;
32385: LD_ADDR_VAR 0 10
32389: PUSH
32390: LD_VAR 0 10
32394: PUSH
32395: LD_REAL  1.80000000000000E+0000
32398: MUL
32399: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32400: LD_VAR 0 6
32404: PPUSH
32405: CALL_OW 257
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: LD_INT 3
32418: PUSH
32419: LD_INT 4
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: IN
32428: PUSH
32429: LD_VAR 0 1
32433: PPUSH
32434: LD_INT 51
32436: PPUSH
32437: CALL_OW 321
32441: PUSH
32442: LD_INT 2
32444: EQUAL
32445: AND
32446: IFFALSE 32463
// bpoints := bpoints * 1.2 ;
32448: LD_ADDR_VAR 0 10
32452: PUSH
32453: LD_VAR 0 10
32457: PUSH
32458: LD_REAL  1.20000000000000E+0000
32461: MUL
32462: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32463: LD_VAR 0 6
32467: PPUSH
32468: CALL_OW 257
32472: PUSH
32473: LD_INT 5
32475: PUSH
32476: LD_INT 7
32478: PUSH
32479: LD_INT 9
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: IN
32487: PUSH
32488: LD_VAR 0 1
32492: PPUSH
32493: LD_INT 52
32495: PPUSH
32496: CALL_OW 321
32500: PUSH
32501: LD_INT 2
32503: EQUAL
32504: AND
32505: IFFALSE 32522
// bpoints := bpoints * 1.5 ;
32507: LD_ADDR_VAR 0 10
32511: PUSH
32512: LD_VAR 0 10
32516: PUSH
32517: LD_REAL  1.50000000000000E+0000
32520: MUL
32521: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_INT 66
32529: PPUSH
32530: CALL_OW 321
32534: PUSH
32535: LD_INT 2
32537: EQUAL
32538: IFFALSE 32555
// bpoints := bpoints * 1.1 ;
32540: LD_ADDR_VAR 0 10
32544: PUSH
32545: LD_VAR 0 10
32549: PUSH
32550: LD_REAL  1.10000000000000E+0000
32553: MUL
32554: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32555: LD_ADDR_VAR 0 10
32559: PUSH
32560: LD_VAR 0 10
32564: PUSH
32565: LD_VAR 0 6
32569: PPUSH
32570: LD_INT 1
32572: PPUSH
32573: CALL_OW 259
32577: PUSH
32578: LD_REAL  1.15000000000000E+0000
32581: MUL
32582: MUL
32583: ST_TO_ADDR
// end ; unit_vehicle :
32584: GO 33414
32586: LD_INT 2
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 33402
32594: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32595: LD_VAR 0 6
32599: PPUSH
32600: CALL_OW 264
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 42
32610: PUSH
32611: LD_INT 24
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: LIST
32618: IN
32619: IFFALSE 32640
// points := [ 25 , 5 , 3 ] ;
32621: LD_ADDR_VAR 0 9
32625: PUSH
32626: LD_INT 25
32628: PUSH
32629: LD_INT 5
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32640: LD_VAR 0 6
32644: PPUSH
32645: CALL_OW 264
32649: PUSH
32650: LD_INT 4
32652: PUSH
32653: LD_INT 43
32655: PUSH
32656: LD_INT 25
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: IN
32664: IFFALSE 32685
// points := [ 40 , 15 , 5 ] ;
32666: LD_ADDR_VAR 0 9
32670: PUSH
32671: LD_INT 40
32673: PUSH
32674: LD_INT 15
32676: PUSH
32677: LD_INT 5
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32685: LD_VAR 0 6
32689: PPUSH
32690: CALL_OW 264
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: LD_INT 23
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: IN
32705: IFFALSE 32726
// points := [ 7 , 25 , 8 ] ;
32707: LD_ADDR_VAR 0 9
32711: PUSH
32712: LD_INT 7
32714: PUSH
32715: LD_INT 25
32717: PUSH
32718: LD_INT 8
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32726: LD_VAR 0 6
32730: PPUSH
32731: CALL_OW 264
32735: PUSH
32736: LD_INT 5
32738: PUSH
32739: LD_INT 27
32741: PUSH
32742: LD_INT 44
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: IN
32750: IFFALSE 32771
// points := [ 14 , 50 , 16 ] ;
32752: LD_ADDR_VAR 0 9
32756: PUSH
32757: LD_INT 14
32759: PUSH
32760: LD_INT 50
32762: PUSH
32763: LD_INT 16
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32771: LD_VAR 0 6
32775: PPUSH
32776: CALL_OW 264
32780: PUSH
32781: LD_INT 6
32783: PUSH
32784: LD_INT 46
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: IN
32791: IFFALSE 32812
// points := [ 32 , 120 , 70 ] ;
32793: LD_ADDR_VAR 0 9
32797: PUSH
32798: LD_INT 32
32800: PUSH
32801: LD_INT 120
32803: PUSH
32804: LD_INT 70
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32812: LD_VAR 0 6
32816: PPUSH
32817: CALL_OW 264
32821: PUSH
32822: LD_INT 7
32824: PUSH
32825: LD_INT 28
32827: PUSH
32828: LD_INT 45
32830: PUSH
32831: LD_EXP 100
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: IN
32842: IFFALSE 32863
// points := [ 35 , 20 , 45 ] ;
32844: LD_ADDR_VAR 0 9
32848: PUSH
32849: LD_INT 35
32851: PUSH
32852: LD_INT 20
32854: PUSH
32855: LD_INT 45
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32863: LD_VAR 0 6
32867: PPUSH
32868: CALL_OW 264
32872: PUSH
32873: LD_INT 47
32875: PUSH
32876: EMPTY
32877: LIST
32878: IN
32879: IFFALSE 32900
// points := [ 67 , 45 , 75 ] ;
32881: LD_ADDR_VAR 0 9
32885: PUSH
32886: LD_INT 67
32888: PUSH
32889: LD_INT 45
32891: PUSH
32892: LD_INT 75
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32900: LD_VAR 0 6
32904: PPUSH
32905: CALL_OW 264
32909: PUSH
32910: LD_INT 26
32912: PUSH
32913: EMPTY
32914: LIST
32915: IN
32916: IFFALSE 32937
// points := [ 120 , 30 , 80 ] ;
32918: LD_ADDR_VAR 0 9
32922: PUSH
32923: LD_INT 120
32925: PUSH
32926: LD_INT 30
32928: PUSH
32929: LD_INT 80
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32937: LD_VAR 0 6
32941: PPUSH
32942: CALL_OW 264
32946: PUSH
32947: LD_INT 22
32949: PUSH
32950: EMPTY
32951: LIST
32952: IN
32953: IFFALSE 32974
// points := [ 40 , 1 , 1 ] ;
32955: LD_ADDR_VAR 0 9
32959: PUSH
32960: LD_INT 40
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32974: LD_VAR 0 6
32978: PPUSH
32979: CALL_OW 264
32983: PUSH
32984: LD_INT 29
32986: PUSH
32987: EMPTY
32988: LIST
32989: IN
32990: IFFALSE 33011
// points := [ 70 , 200 , 400 ] ;
32992: LD_ADDR_VAR 0 9
32996: PUSH
32997: LD_INT 70
32999: PUSH
33000: LD_INT 200
33002: PUSH
33003: LD_INT 400
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: LIST
33010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33011: LD_VAR 0 6
33015: PPUSH
33016: CALL_OW 264
33020: PUSH
33021: LD_INT 14
33023: PUSH
33024: LD_INT 53
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: IN
33031: IFFALSE 33052
// points := [ 40 , 10 , 20 ] ;
33033: LD_ADDR_VAR 0 9
33037: PUSH
33038: LD_INT 40
33040: PUSH
33041: LD_INT 10
33043: PUSH
33044: LD_INT 20
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33052: LD_VAR 0 6
33056: PPUSH
33057: CALL_OW 264
33061: PUSH
33062: LD_INT 9
33064: PUSH
33065: EMPTY
33066: LIST
33067: IN
33068: IFFALSE 33089
// points := [ 5 , 70 , 20 ] ;
33070: LD_ADDR_VAR 0 9
33074: PUSH
33075: LD_INT 5
33077: PUSH
33078: LD_INT 70
33080: PUSH
33081: LD_INT 20
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33089: LD_VAR 0 6
33093: PPUSH
33094: CALL_OW 264
33098: PUSH
33099: LD_INT 10
33101: PUSH
33102: EMPTY
33103: LIST
33104: IN
33105: IFFALSE 33126
// points := [ 35 , 110 , 70 ] ;
33107: LD_ADDR_VAR 0 9
33111: PUSH
33112: LD_INT 35
33114: PUSH
33115: LD_INT 110
33117: PUSH
33118: LD_INT 70
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33126: LD_VAR 0 6
33130: PPUSH
33131: CALL_OW 265
33135: PUSH
33136: LD_INT 25
33138: EQUAL
33139: IFFALSE 33160
// points := [ 80 , 65 , 100 ] ;
33141: LD_ADDR_VAR 0 9
33145: PUSH
33146: LD_INT 80
33148: PUSH
33149: LD_INT 65
33151: PUSH
33152: LD_INT 100
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33160: LD_VAR 0 6
33164: PPUSH
33165: CALL_OW 263
33169: PUSH
33170: LD_INT 1
33172: EQUAL
33173: IFFALSE 33208
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33175: LD_ADDR_VAR 0 10
33179: PUSH
33180: LD_VAR 0 10
33184: PUSH
33185: LD_VAR 0 6
33189: PPUSH
33190: CALL_OW 311
33194: PPUSH
33195: LD_INT 3
33197: PPUSH
33198: CALL_OW 259
33202: PUSH
33203: LD_INT 4
33205: MUL
33206: MUL
33207: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33208: LD_VAR 0 6
33212: PPUSH
33213: CALL_OW 263
33217: PUSH
33218: LD_INT 2
33220: EQUAL
33221: IFFALSE 33272
// begin j := IsControledBy ( i ) ;
33223: LD_ADDR_VAR 0 7
33227: PUSH
33228: LD_VAR 0 6
33232: PPUSH
33233: CALL_OW 312
33237: ST_TO_ADDR
// if j then
33238: LD_VAR 0 7
33242: IFFALSE 33272
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33244: LD_ADDR_VAR 0 10
33248: PUSH
33249: LD_VAR 0 10
33253: PUSH
33254: LD_VAR 0 7
33258: PPUSH
33259: LD_INT 3
33261: PPUSH
33262: CALL_OW 259
33266: PUSH
33267: LD_INT 3
33269: MUL
33270: MUL
33271: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33272: LD_VAR 0 6
33276: PPUSH
33277: CALL_OW 264
33281: PUSH
33282: LD_INT 5
33284: PUSH
33285: LD_INT 6
33287: PUSH
33288: LD_INT 46
33290: PUSH
33291: LD_INT 44
33293: PUSH
33294: LD_INT 47
33296: PUSH
33297: LD_INT 45
33299: PUSH
33300: LD_INT 28
33302: PUSH
33303: LD_INT 7
33305: PUSH
33306: LD_INT 27
33308: PUSH
33309: LD_INT 29
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: IN
33324: PUSH
33325: LD_VAR 0 1
33329: PPUSH
33330: LD_INT 52
33332: PPUSH
33333: CALL_OW 321
33337: PUSH
33338: LD_INT 2
33340: EQUAL
33341: AND
33342: IFFALSE 33359
// bpoints := bpoints * 1.2 ;
33344: LD_ADDR_VAR 0 10
33348: PUSH
33349: LD_VAR 0 10
33353: PUSH
33354: LD_REAL  1.20000000000000E+0000
33357: MUL
33358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33359: LD_VAR 0 6
33363: PPUSH
33364: CALL_OW 264
33368: PUSH
33369: LD_INT 6
33371: PUSH
33372: LD_INT 46
33374: PUSH
33375: LD_INT 47
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: IN
33383: IFFALSE 33400
// bpoints := bpoints * 1.2 ;
33385: LD_ADDR_VAR 0 10
33389: PUSH
33390: LD_VAR 0 10
33394: PUSH
33395: LD_REAL  1.20000000000000E+0000
33398: MUL
33399: ST_TO_ADDR
// end ; unit_building :
33400: GO 33414
33402: LD_INT 3
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33410
33408: GO 33413
33410: POP
// ; end ;
33411: GO 33414
33413: POP
// for j = 1 to 3 do
33414: LD_ADDR_VAR 0 7
33418: PUSH
33419: DOUBLE
33420: LD_INT 1
33422: DEC
33423: ST_TO_ADDR
33424: LD_INT 3
33426: PUSH
33427: FOR_TO
33428: IFFALSE 33481
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33430: LD_ADDR_VAR 0 5
33434: PUSH
33435: LD_VAR 0 5
33439: PPUSH
33440: LD_VAR 0 7
33444: PPUSH
33445: LD_VAR 0 5
33449: PUSH
33450: LD_VAR 0 7
33454: ARRAY
33455: PUSH
33456: LD_VAR 0 9
33460: PUSH
33461: LD_VAR 0 7
33465: ARRAY
33466: PUSH
33467: LD_VAR 0 10
33471: MUL
33472: PLUS
33473: PPUSH
33474: CALL_OW 1
33478: ST_TO_ADDR
33479: GO 33427
33481: POP
33482: POP
// end ;
33483: GO 31960
33485: POP
33486: POP
// result := Replace ( result , 4 , tmp ) ;
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: LD_VAR 0 5
33496: PPUSH
33497: LD_INT 4
33499: PPUSH
33500: LD_VAR 0 8
33504: PPUSH
33505: CALL_OW 1
33509: ST_TO_ADDR
// end ;
33510: LD_VAR 0 5
33514: RET
// export function DangerAtRange ( unit , range ) ; begin
33515: LD_INT 0
33517: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33518: LD_ADDR_VAR 0 3
33522: PUSH
33523: LD_VAR 0 1
33527: PPUSH
33528: CALL_OW 255
33532: PPUSH
33533: LD_VAR 0 1
33537: PPUSH
33538: CALL_OW 250
33542: PPUSH
33543: LD_VAR 0 1
33547: PPUSH
33548: CALL_OW 251
33552: PPUSH
33553: LD_VAR 0 2
33557: PPUSH
33558: CALL 31812 0 4
33562: ST_TO_ADDR
// end ;
33563: LD_VAR 0 3
33567: RET
// export function DangerInArea ( side , area ) ; begin
33568: LD_INT 0
33570: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33571: LD_ADDR_VAR 0 3
33575: PUSH
33576: LD_VAR 0 2
33580: PPUSH
33581: LD_INT 81
33583: PUSH
33584: LD_VAR 0 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PPUSH
33593: CALL_OW 70
33597: ST_TO_ADDR
// end ;
33598: LD_VAR 0 3
33602: RET
// export function IsExtension ( b ) ; begin
33603: LD_INT 0
33605: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33606: LD_ADDR_VAR 0 2
33610: PUSH
33611: LD_VAR 0 1
33615: PUSH
33616: LD_INT 23
33618: PUSH
33619: LD_INT 20
33621: PUSH
33622: LD_INT 22
33624: PUSH
33625: LD_INT 17
33627: PUSH
33628: LD_INT 24
33630: PUSH
33631: LD_INT 21
33633: PUSH
33634: LD_INT 19
33636: PUSH
33637: LD_INT 16
33639: PUSH
33640: LD_INT 25
33642: PUSH
33643: LD_INT 18
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: IN
33658: ST_TO_ADDR
// end ;
33659: LD_VAR 0 2
33663: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33664: LD_INT 0
33666: PPUSH
33667: PPUSH
33668: PPUSH
// result := [ ] ;
33669: LD_ADDR_VAR 0 4
33673: PUSH
33674: EMPTY
33675: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33676: LD_ADDR_VAR 0 5
33680: PUSH
33681: LD_VAR 0 2
33685: PPUSH
33686: LD_INT 21
33688: PUSH
33689: LD_INT 3
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PPUSH
33696: CALL_OW 70
33700: ST_TO_ADDR
// if not tmp then
33701: LD_VAR 0 5
33705: NOT
33706: IFFALSE 33710
// exit ;
33708: GO 33774
// if checkLink then
33710: LD_VAR 0 3
33714: IFFALSE 33764
// begin for i in tmp do
33716: LD_ADDR_VAR 0 6
33720: PUSH
33721: LD_VAR 0 5
33725: PUSH
33726: FOR_IN
33727: IFFALSE 33762
// if GetBase ( i ) <> base then
33729: LD_VAR 0 6
33733: PPUSH
33734: CALL_OW 274
33738: PUSH
33739: LD_VAR 0 1
33743: NONEQUAL
33744: IFFALSE 33760
// ComLinkToBase ( base , i ) ;
33746: LD_VAR 0 1
33750: PPUSH
33751: LD_VAR 0 6
33755: PPUSH
33756: CALL_OW 169
33760: GO 33726
33762: POP
33763: POP
// end ; result := tmp ;
33764: LD_ADDR_VAR 0 4
33768: PUSH
33769: LD_VAR 0 5
33773: ST_TO_ADDR
// end ;
33774: LD_VAR 0 4
33778: RET
// export function ComComplete ( units , b ) ; var i ; begin
33779: LD_INT 0
33781: PPUSH
33782: PPUSH
// if not units then
33783: LD_VAR 0 1
33787: NOT
33788: IFFALSE 33792
// exit ;
33790: GO 33882
// for i in units do
33792: LD_ADDR_VAR 0 4
33796: PUSH
33797: LD_VAR 0 1
33801: PUSH
33802: FOR_IN
33803: IFFALSE 33880
// if BuildingStatus ( b ) = bs_build then
33805: LD_VAR 0 2
33809: PPUSH
33810: CALL_OW 461
33814: PUSH
33815: LD_INT 1
33817: EQUAL
33818: IFFALSE 33878
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33820: LD_VAR 0 4
33824: PPUSH
33825: LD_STRING h
33827: PUSH
33828: LD_VAR 0 2
33832: PPUSH
33833: CALL_OW 250
33837: PUSH
33838: LD_VAR 0 2
33842: PPUSH
33843: CALL_OW 251
33847: PUSH
33848: LD_VAR 0 2
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: PPUSH
33874: CALL_OW 446
33878: GO 33802
33880: POP
33881: POP
// end ;
33882: LD_VAR 0 3
33886: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33887: LD_INT 0
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33895: LD_VAR 0 1
33899: NOT
33900: PUSH
33901: LD_VAR 0 1
33905: PPUSH
33906: CALL_OW 263
33910: PUSH
33911: LD_INT 2
33913: NONEQUAL
33914: OR
33915: IFFALSE 33919
// exit ;
33917: GO 34235
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33919: LD_ADDR_VAR 0 6
33923: PUSH
33924: LD_INT 22
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 255
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 30
33946: PUSH
33947: LD_INT 36
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 34
33956: PUSH
33957: LD_INT 31
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PPUSH
33973: CALL_OW 69
33977: ST_TO_ADDR
// if not tmp then
33978: LD_VAR 0 6
33982: NOT
33983: IFFALSE 33987
// exit ;
33985: GO 34235
// result := [ ] ;
33987: LD_ADDR_VAR 0 2
33991: PUSH
33992: EMPTY
33993: ST_TO_ADDR
// for i in tmp do
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: LD_VAR 0 6
34003: PUSH
34004: FOR_IN
34005: IFFALSE 34076
// begin t := UnitsInside ( i ) ;
34007: LD_ADDR_VAR 0 4
34011: PUSH
34012: LD_VAR 0 3
34016: PPUSH
34017: CALL_OW 313
34021: ST_TO_ADDR
// if t then
34022: LD_VAR 0 4
34026: IFFALSE 34074
// for j in t do
34028: LD_ADDR_VAR 0 7
34032: PUSH
34033: LD_VAR 0 4
34037: PUSH
34038: FOR_IN
34039: IFFALSE 34072
// result := Replace ( result , result + 1 , j ) ;
34041: LD_ADDR_VAR 0 2
34045: PUSH
34046: LD_VAR 0 2
34050: PPUSH
34051: LD_VAR 0 2
34055: PUSH
34056: LD_INT 1
34058: PLUS
34059: PPUSH
34060: LD_VAR 0 7
34064: PPUSH
34065: CALL_OW 1
34069: ST_TO_ADDR
34070: GO 34038
34072: POP
34073: POP
// end ;
34074: GO 34004
34076: POP
34077: POP
// if not result then
34078: LD_VAR 0 2
34082: NOT
34083: IFFALSE 34087
// exit ;
34085: GO 34235
// mech := result [ 1 ] ;
34087: LD_ADDR_VAR 0 5
34091: PUSH
34092: LD_VAR 0 2
34096: PUSH
34097: LD_INT 1
34099: ARRAY
34100: ST_TO_ADDR
// if result > 1 then
34101: LD_VAR 0 2
34105: PUSH
34106: LD_INT 1
34108: GREATER
34109: IFFALSE 34221
// begin for i = 2 to result do
34111: LD_ADDR_VAR 0 3
34115: PUSH
34116: DOUBLE
34117: LD_INT 2
34119: DEC
34120: ST_TO_ADDR
34121: LD_VAR 0 2
34125: PUSH
34126: FOR_TO
34127: IFFALSE 34219
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34129: LD_ADDR_VAR 0 4
34133: PUSH
34134: LD_VAR 0 2
34138: PUSH
34139: LD_VAR 0 3
34143: ARRAY
34144: PPUSH
34145: LD_INT 3
34147: PPUSH
34148: CALL_OW 259
34152: PUSH
34153: LD_VAR 0 2
34157: PUSH
34158: LD_VAR 0 3
34162: ARRAY
34163: PPUSH
34164: CALL_OW 432
34168: MINUS
34169: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34170: LD_VAR 0 4
34174: PUSH
34175: LD_VAR 0 5
34179: PPUSH
34180: LD_INT 3
34182: PPUSH
34183: CALL_OW 259
34187: PUSH
34188: LD_VAR 0 5
34192: PPUSH
34193: CALL_OW 432
34197: MINUS
34198: GREATEREQUAL
34199: IFFALSE 34217
// mech := result [ i ] ;
34201: LD_ADDR_VAR 0 5
34205: PUSH
34206: LD_VAR 0 2
34210: PUSH
34211: LD_VAR 0 3
34215: ARRAY
34216: ST_TO_ADDR
// end ;
34217: GO 34126
34219: POP
34220: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34221: LD_VAR 0 1
34225: PPUSH
34226: LD_VAR 0 5
34230: PPUSH
34231: CALL_OW 135
// end ;
34235: LD_VAR 0 2
34239: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34240: LD_INT 0
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
34249: PPUSH
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
// result := [ ] ;
34255: LD_ADDR_VAR 0 7
34259: PUSH
34260: EMPTY
34261: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 266
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: IN
34282: NOT
34283: IFFALSE 34287
// exit ;
34285: GO 35921
// if name then
34287: LD_VAR 0 3
34291: IFFALSE 34307
// SetBName ( base_dep , name ) ;
34293: LD_VAR 0 1
34297: PPUSH
34298: LD_VAR 0 3
34302: PPUSH
34303: CALL_OW 500
// base := GetBase ( base_dep ) ;
34307: LD_ADDR_VAR 0 15
34311: PUSH
34312: LD_VAR 0 1
34316: PPUSH
34317: CALL_OW 274
34321: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34322: LD_ADDR_VAR 0 16
34326: PUSH
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 255
34336: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34337: LD_ADDR_VAR 0 17
34341: PUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: CALL_OW 248
34351: ST_TO_ADDR
// if sources then
34352: LD_VAR 0 5
34356: IFFALSE 34403
// for i = 1 to 3 do
34358: LD_ADDR_VAR 0 8
34362: PUSH
34363: DOUBLE
34364: LD_INT 1
34366: DEC
34367: ST_TO_ADDR
34368: LD_INT 3
34370: PUSH
34371: FOR_TO
34372: IFFALSE 34401
// AddResourceType ( base , i , sources [ i ] ) ;
34374: LD_VAR 0 15
34378: PPUSH
34379: LD_VAR 0 8
34383: PPUSH
34384: LD_VAR 0 5
34388: PUSH
34389: LD_VAR 0 8
34393: ARRAY
34394: PPUSH
34395: CALL_OW 276
34399: GO 34371
34401: POP
34402: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34403: LD_ADDR_VAR 0 18
34407: PUSH
34408: LD_VAR 0 15
34412: PPUSH
34413: LD_VAR 0 2
34417: PPUSH
34418: LD_INT 1
34420: PPUSH
34421: CALL 33664 0 3
34425: ST_TO_ADDR
// InitHc ;
34426: CALL_OW 19
// InitUc ;
34430: CALL_OW 18
// uc_side := side ;
34434: LD_ADDR_OWVAR 20
34438: PUSH
34439: LD_VAR 0 16
34443: ST_TO_ADDR
// uc_nation := nation ;
34444: LD_ADDR_OWVAR 21
34448: PUSH
34449: LD_VAR 0 17
34453: ST_TO_ADDR
// if buildings then
34454: LD_VAR 0 18
34458: IFFALSE 35780
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34460: LD_ADDR_VAR 0 19
34464: PUSH
34465: LD_VAR 0 18
34469: PPUSH
34470: LD_INT 2
34472: PUSH
34473: LD_INT 30
34475: PUSH
34476: LD_INT 29
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 30
34485: PUSH
34486: LD_INT 30
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: PPUSH
34498: CALL_OW 72
34502: ST_TO_ADDR
// if tmp then
34503: LD_VAR 0 19
34507: IFFALSE 34555
// for i in tmp do
34509: LD_ADDR_VAR 0 8
34513: PUSH
34514: LD_VAR 0 19
34518: PUSH
34519: FOR_IN
34520: IFFALSE 34553
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34522: LD_VAR 0 8
34526: PPUSH
34527: CALL_OW 250
34531: PPUSH
34532: LD_VAR 0 8
34536: PPUSH
34537: CALL_OW 251
34541: PPUSH
34542: LD_VAR 0 16
34546: PPUSH
34547: CALL_OW 441
34551: GO 34519
34553: POP
34554: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34555: LD_VAR 0 18
34559: PPUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 30
34565: PUSH
34566: LD_INT 32
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 30
34575: PUSH
34576: LD_INT 33
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: PPUSH
34588: CALL_OW 72
34592: IFFALSE 34680
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34594: LD_ADDR_VAR 0 8
34598: PUSH
34599: LD_VAR 0 18
34603: PPUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 30
34609: PUSH
34610: LD_INT 32
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 30
34619: PUSH
34620: LD_INT 33
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: PPUSH
34632: CALL_OW 72
34636: PUSH
34637: FOR_IN
34638: IFFALSE 34678
// begin if not GetBWeapon ( i ) then
34640: LD_VAR 0 8
34644: PPUSH
34645: CALL_OW 269
34649: NOT
34650: IFFALSE 34676
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34652: LD_VAR 0 8
34656: PPUSH
34657: LD_VAR 0 8
34661: PPUSH
34662: LD_VAR 0 2
34666: PPUSH
34667: CALL 35926 0 2
34671: PPUSH
34672: CALL_OW 431
// end ;
34676: GO 34637
34678: POP
34679: POP
// end ; for i = 1 to personel do
34680: LD_ADDR_VAR 0 8
34684: PUSH
34685: DOUBLE
34686: LD_INT 1
34688: DEC
34689: ST_TO_ADDR
34690: LD_VAR 0 6
34694: PUSH
34695: FOR_TO
34696: IFFALSE 35760
// begin if i > 4 then
34698: LD_VAR 0 8
34702: PUSH
34703: LD_INT 4
34705: GREATER
34706: IFFALSE 34710
// break ;
34708: GO 35760
// case i of 1 :
34710: LD_VAR 0 8
34714: PUSH
34715: LD_INT 1
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34723
34721: GO 34803
34723: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34724: LD_ADDR_VAR 0 12
34728: PUSH
34729: LD_VAR 0 18
34733: PPUSH
34734: LD_INT 22
34736: PUSH
34737: LD_VAR 0 16
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 58
34748: PUSH
34749: EMPTY
34750: LIST
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: LD_INT 30
34757: PUSH
34758: LD_INT 32
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 30
34767: PUSH
34768: LD_INT 4
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 30
34777: PUSH
34778: LD_INT 5
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: PPUSH
34796: CALL_OW 72
34800: ST_TO_ADDR
34801: GO 35025
34803: LD_INT 2
34805: DOUBLE
34806: EQUAL
34807: IFTRUE 34811
34809: GO 34873
34811: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34812: LD_ADDR_VAR 0 12
34816: PUSH
34817: LD_VAR 0 18
34821: PPUSH
34822: LD_INT 22
34824: PUSH
34825: LD_VAR 0 16
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 30
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 30
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PPUSH
34866: CALL_OW 72
34870: ST_TO_ADDR
34871: GO 35025
34873: LD_INT 3
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34881
34879: GO 34943
34881: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34882: LD_ADDR_VAR 0 12
34886: PUSH
34887: LD_VAR 0 18
34891: PPUSH
34892: LD_INT 22
34894: PUSH
34895: LD_VAR 0 16
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: LD_INT 30
34909: PUSH
34910: LD_INT 2
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 30
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PPUSH
34936: CALL_OW 72
34940: ST_TO_ADDR
34941: GO 35025
34943: LD_INT 4
34945: DOUBLE
34946: EQUAL
34947: IFTRUE 34951
34949: GO 35024
34951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34952: LD_ADDR_VAR 0 12
34956: PUSH
34957: LD_VAR 0 18
34961: PPUSH
34962: LD_INT 22
34964: PUSH
34965: LD_VAR 0 16
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 30
34979: PUSH
34980: LD_INT 6
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 30
34989: PUSH
34990: LD_INT 7
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 30
34999: PUSH
35000: LD_INT 8
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PPUSH
35017: CALL_OW 72
35021: ST_TO_ADDR
35022: GO 35025
35024: POP
// if i = 1 then
35025: LD_VAR 0 8
35029: PUSH
35030: LD_INT 1
35032: EQUAL
35033: IFFALSE 35144
// begin tmp := [ ] ;
35035: LD_ADDR_VAR 0 19
35039: PUSH
35040: EMPTY
35041: ST_TO_ADDR
// for j in f do
35042: LD_ADDR_VAR 0 9
35046: PUSH
35047: LD_VAR 0 12
35051: PUSH
35052: FOR_IN
35053: IFFALSE 35126
// if GetBType ( j ) = b_bunker then
35055: LD_VAR 0 9
35059: PPUSH
35060: CALL_OW 266
35064: PUSH
35065: LD_INT 32
35067: EQUAL
35068: IFFALSE 35095
// tmp := Insert ( tmp , 1 , j ) else
35070: LD_ADDR_VAR 0 19
35074: PUSH
35075: LD_VAR 0 19
35079: PPUSH
35080: LD_INT 1
35082: PPUSH
35083: LD_VAR 0 9
35087: PPUSH
35088: CALL_OW 2
35092: ST_TO_ADDR
35093: GO 35124
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35095: LD_ADDR_VAR 0 19
35099: PUSH
35100: LD_VAR 0 19
35104: PPUSH
35105: LD_VAR 0 19
35109: PUSH
35110: LD_INT 1
35112: PLUS
35113: PPUSH
35114: LD_VAR 0 9
35118: PPUSH
35119: CALL_OW 2
35123: ST_TO_ADDR
35124: GO 35052
35126: POP
35127: POP
// if tmp then
35128: LD_VAR 0 19
35132: IFFALSE 35144
// f := tmp ;
35134: LD_ADDR_VAR 0 12
35138: PUSH
35139: LD_VAR 0 19
35143: ST_TO_ADDR
// end ; x := personel [ i ] ;
35144: LD_ADDR_VAR 0 13
35148: PUSH
35149: LD_VAR 0 6
35153: PUSH
35154: LD_VAR 0 8
35158: ARRAY
35159: ST_TO_ADDR
// if x = - 1 then
35160: LD_VAR 0 13
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: EQUAL
35169: IFFALSE 35378
// begin for j in f do
35171: LD_ADDR_VAR 0 9
35175: PUSH
35176: LD_VAR 0 12
35180: PUSH
35181: FOR_IN
35182: IFFALSE 35374
// repeat InitHc ;
35184: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35188: LD_VAR 0 9
35192: PPUSH
35193: CALL_OW 266
35197: PUSH
35198: LD_INT 5
35200: EQUAL
35201: IFFALSE 35271
// begin if UnitsInside ( j ) < 3 then
35203: LD_VAR 0 9
35207: PPUSH
35208: CALL_OW 313
35212: PUSH
35213: LD_INT 3
35215: LESS
35216: IFFALSE 35252
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35218: LD_INT 0
35220: PPUSH
35221: LD_INT 5
35223: PUSH
35224: LD_INT 8
35226: PUSH
35227: LD_INT 9
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: PUSH
35235: LD_VAR 0 17
35239: ARRAY
35240: PPUSH
35241: LD_VAR 0 4
35245: PPUSH
35246: CALL_OW 380
35250: GO 35269
// PrepareHuman ( false , i , skill ) ;
35252: LD_INT 0
35254: PPUSH
35255: LD_VAR 0 8
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: CALL_OW 380
// end else
35269: GO 35288
// PrepareHuman ( false , i , skill ) ;
35271: LD_INT 0
35273: PPUSH
35274: LD_VAR 0 8
35278: PPUSH
35279: LD_VAR 0 4
35283: PPUSH
35284: CALL_OW 380
// un := CreateHuman ;
35288: LD_ADDR_VAR 0 14
35292: PUSH
35293: CALL_OW 44
35297: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35298: LD_ADDR_VAR 0 7
35302: PUSH
35303: LD_VAR 0 7
35307: PPUSH
35308: LD_INT 1
35310: PPUSH
35311: LD_VAR 0 14
35315: PPUSH
35316: CALL_OW 2
35320: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35321: LD_VAR 0 14
35325: PPUSH
35326: LD_VAR 0 9
35330: PPUSH
35331: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35335: LD_VAR 0 9
35339: PPUSH
35340: CALL_OW 313
35344: PUSH
35345: LD_INT 6
35347: EQUAL
35348: PUSH
35349: LD_VAR 0 9
35353: PPUSH
35354: CALL_OW 266
35358: PUSH
35359: LD_INT 32
35361: PUSH
35362: LD_INT 31
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: IN
35369: OR
35370: IFFALSE 35184
35372: GO 35181
35374: POP
35375: POP
// end else
35376: GO 35758
// for j = 1 to x do
35378: LD_ADDR_VAR 0 9
35382: PUSH
35383: DOUBLE
35384: LD_INT 1
35386: DEC
35387: ST_TO_ADDR
35388: LD_VAR 0 13
35392: PUSH
35393: FOR_TO
35394: IFFALSE 35756
// begin InitHc ;
35396: CALL_OW 19
// if not f then
35400: LD_VAR 0 12
35404: NOT
35405: IFFALSE 35494
// begin PrepareHuman ( false , i , skill ) ;
35407: LD_INT 0
35409: PPUSH
35410: LD_VAR 0 8
35414: PPUSH
35415: LD_VAR 0 4
35419: PPUSH
35420: CALL_OW 380
// un := CreateHuman ;
35424: LD_ADDR_VAR 0 14
35428: PUSH
35429: CALL_OW 44
35433: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35434: LD_ADDR_VAR 0 7
35438: PUSH
35439: LD_VAR 0 7
35443: PPUSH
35444: LD_INT 1
35446: PPUSH
35447: LD_VAR 0 14
35451: PPUSH
35452: CALL_OW 2
35456: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35457: LD_VAR 0 14
35461: PPUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 250
35471: PPUSH
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 251
35481: PPUSH
35482: LD_INT 10
35484: PPUSH
35485: LD_INT 0
35487: PPUSH
35488: CALL_OW 50
// continue ;
35492: GO 35393
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35494: LD_VAR 0 12
35498: PUSH
35499: LD_INT 1
35501: ARRAY
35502: PPUSH
35503: CALL_OW 313
35507: PUSH
35508: LD_VAR 0 12
35512: PUSH
35513: LD_INT 1
35515: ARRAY
35516: PPUSH
35517: CALL_OW 266
35521: PUSH
35522: LD_INT 32
35524: PUSH
35525: LD_INT 31
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: IN
35532: AND
35533: PUSH
35534: LD_VAR 0 12
35538: PUSH
35539: LD_INT 1
35541: ARRAY
35542: PPUSH
35543: CALL_OW 313
35547: PUSH
35548: LD_INT 6
35550: EQUAL
35551: OR
35552: IFFALSE 35572
// f := Delete ( f , 1 ) ;
35554: LD_ADDR_VAR 0 12
35558: PUSH
35559: LD_VAR 0 12
35563: PPUSH
35564: LD_INT 1
35566: PPUSH
35567: CALL_OW 3
35571: ST_TO_ADDR
// if not f then
35572: LD_VAR 0 12
35576: NOT
35577: IFFALSE 35595
// begin x := x + 2 ;
35579: LD_ADDR_VAR 0 13
35583: PUSH
35584: LD_VAR 0 13
35588: PUSH
35589: LD_INT 2
35591: PLUS
35592: ST_TO_ADDR
// continue ;
35593: GO 35393
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35595: LD_VAR 0 12
35599: PUSH
35600: LD_INT 1
35602: ARRAY
35603: PPUSH
35604: CALL_OW 266
35608: PUSH
35609: LD_INT 5
35611: EQUAL
35612: IFFALSE 35686
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35614: LD_VAR 0 12
35618: PUSH
35619: LD_INT 1
35621: ARRAY
35622: PPUSH
35623: CALL_OW 313
35627: PUSH
35628: LD_INT 3
35630: LESS
35631: IFFALSE 35667
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35633: LD_INT 0
35635: PPUSH
35636: LD_INT 5
35638: PUSH
35639: LD_INT 8
35641: PUSH
35642: LD_INT 9
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: PUSH
35650: LD_VAR 0 17
35654: ARRAY
35655: PPUSH
35656: LD_VAR 0 4
35660: PPUSH
35661: CALL_OW 380
35665: GO 35684
// PrepareHuman ( false , i , skill ) ;
35667: LD_INT 0
35669: PPUSH
35670: LD_VAR 0 8
35674: PPUSH
35675: LD_VAR 0 4
35679: PPUSH
35680: CALL_OW 380
// end else
35684: GO 35703
// PrepareHuman ( false , i , skill ) ;
35686: LD_INT 0
35688: PPUSH
35689: LD_VAR 0 8
35693: PPUSH
35694: LD_VAR 0 4
35698: PPUSH
35699: CALL_OW 380
// un := CreateHuman ;
35703: LD_ADDR_VAR 0 14
35707: PUSH
35708: CALL_OW 44
35712: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35713: LD_ADDR_VAR 0 7
35717: PUSH
35718: LD_VAR 0 7
35722: PPUSH
35723: LD_INT 1
35725: PPUSH
35726: LD_VAR 0 14
35730: PPUSH
35731: CALL_OW 2
35735: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35736: LD_VAR 0 14
35740: PPUSH
35741: LD_VAR 0 12
35745: PUSH
35746: LD_INT 1
35748: ARRAY
35749: PPUSH
35750: CALL_OW 52
// end ;
35754: GO 35393
35756: POP
35757: POP
// end ;
35758: GO 34695
35760: POP
35761: POP
// result := result ^ buildings ;
35762: LD_ADDR_VAR 0 7
35766: PUSH
35767: LD_VAR 0 7
35771: PUSH
35772: LD_VAR 0 18
35776: ADD
35777: ST_TO_ADDR
// end else
35778: GO 35921
// begin for i = 1 to personel do
35780: LD_ADDR_VAR 0 8
35784: PUSH
35785: DOUBLE
35786: LD_INT 1
35788: DEC
35789: ST_TO_ADDR
35790: LD_VAR 0 6
35794: PUSH
35795: FOR_TO
35796: IFFALSE 35919
// begin if i > 4 then
35798: LD_VAR 0 8
35802: PUSH
35803: LD_INT 4
35805: GREATER
35806: IFFALSE 35810
// break ;
35808: GO 35919
// x := personel [ i ] ;
35810: LD_ADDR_VAR 0 13
35814: PUSH
35815: LD_VAR 0 6
35819: PUSH
35820: LD_VAR 0 8
35824: ARRAY
35825: ST_TO_ADDR
// if x = - 1 then
35826: LD_VAR 0 13
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: EQUAL
35835: IFFALSE 35839
// continue ;
35837: GO 35795
// PrepareHuman ( false , i , skill ) ;
35839: LD_INT 0
35841: PPUSH
35842: LD_VAR 0 8
35846: PPUSH
35847: LD_VAR 0 4
35851: PPUSH
35852: CALL_OW 380
// un := CreateHuman ;
35856: LD_ADDR_VAR 0 14
35860: PUSH
35861: CALL_OW 44
35865: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35866: LD_VAR 0 14
35870: PPUSH
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL_OW 250
35880: PPUSH
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 251
35890: PPUSH
35891: LD_INT 10
35893: PPUSH
35894: LD_INT 0
35896: PPUSH
35897: CALL_OW 50
// result := result ^ un ;
35901: LD_ADDR_VAR 0 7
35905: PUSH
35906: LD_VAR 0 7
35910: PUSH
35911: LD_VAR 0 14
35915: ADD
35916: ST_TO_ADDR
// end ;
35917: GO 35795
35919: POP
35920: POP
// end ; end ;
35921: LD_VAR 0 7
35925: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35926: LD_INT 0
35928: PPUSH
35929: PPUSH
35930: PPUSH
35931: PPUSH
35932: PPUSH
35933: PPUSH
35934: PPUSH
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
35940: PPUSH
35941: PPUSH
35942: PPUSH
35943: PPUSH
// result := false ;
35944: LD_ADDR_VAR 0 3
35948: PUSH
35949: LD_INT 0
35951: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35952: LD_VAR 0 1
35956: NOT
35957: PUSH
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL_OW 266
35967: PUSH
35968: LD_INT 32
35970: PUSH
35971: LD_INT 33
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: IN
35978: NOT
35979: OR
35980: IFFALSE 35984
// exit ;
35982: GO 37093
// nat := GetNation ( tower ) ;
35984: LD_ADDR_VAR 0 12
35988: PUSH
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 248
35998: ST_TO_ADDR
// side := GetSide ( tower ) ;
35999: LD_ADDR_VAR 0 16
36003: PUSH
36004: LD_VAR 0 1
36008: PPUSH
36009: CALL_OW 255
36013: ST_TO_ADDR
// x := GetX ( tower ) ;
36014: LD_ADDR_VAR 0 10
36018: PUSH
36019: LD_VAR 0 1
36023: PPUSH
36024: CALL_OW 250
36028: ST_TO_ADDR
// y := GetY ( tower ) ;
36029: LD_ADDR_VAR 0 11
36033: PUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: CALL_OW 251
36043: ST_TO_ADDR
// if not x or not y then
36044: LD_VAR 0 10
36048: NOT
36049: PUSH
36050: LD_VAR 0 11
36054: NOT
36055: OR
36056: IFFALSE 36060
// exit ;
36058: GO 37093
// weapon := 0 ;
36060: LD_ADDR_VAR 0 18
36064: PUSH
36065: LD_INT 0
36067: ST_TO_ADDR
// fac_list := [ ] ;
36068: LD_ADDR_VAR 0 17
36072: PUSH
36073: EMPTY
36074: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36075: LD_ADDR_VAR 0 6
36079: PUSH
36080: LD_VAR 0 1
36084: PPUSH
36085: CALL_OW 274
36089: PPUSH
36090: LD_VAR 0 2
36094: PPUSH
36095: LD_INT 0
36097: PPUSH
36098: CALL 33664 0 3
36102: PPUSH
36103: LD_INT 30
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PPUSH
36113: CALL_OW 72
36117: ST_TO_ADDR
// if not factories then
36118: LD_VAR 0 6
36122: NOT
36123: IFFALSE 36127
// exit ;
36125: GO 37093
// for i in factories do
36127: LD_ADDR_VAR 0 8
36131: PUSH
36132: LD_VAR 0 6
36136: PUSH
36137: FOR_IN
36138: IFFALSE 36163
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36140: LD_ADDR_VAR 0 17
36144: PUSH
36145: LD_VAR 0 17
36149: PUSH
36150: LD_VAR 0 8
36154: PPUSH
36155: CALL_OW 478
36159: UNION
36160: ST_TO_ADDR
36161: GO 36137
36163: POP
36164: POP
// if not fac_list then
36165: LD_VAR 0 17
36169: NOT
36170: IFFALSE 36174
// exit ;
36172: GO 37093
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36174: LD_ADDR_VAR 0 5
36178: PUSH
36179: LD_INT 4
36181: PUSH
36182: LD_INT 5
36184: PUSH
36185: LD_INT 9
36187: PUSH
36188: LD_INT 10
36190: PUSH
36191: LD_INT 6
36193: PUSH
36194: LD_INT 7
36196: PUSH
36197: LD_INT 11
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 27
36211: PUSH
36212: LD_INT 28
36214: PUSH
36215: LD_INT 26
36217: PUSH
36218: LD_INT 30
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 43
36229: PUSH
36230: LD_INT 44
36232: PUSH
36233: LD_INT 46
36235: PUSH
36236: LD_INT 45
36238: PUSH
36239: LD_INT 47
36241: PUSH
36242: LD_INT 49
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: PUSH
36258: LD_VAR 0 12
36262: ARRAY
36263: ST_TO_ADDR
// list := list isect fac_list ;
36264: LD_ADDR_VAR 0 5
36268: PUSH
36269: LD_VAR 0 5
36273: PUSH
36274: LD_VAR 0 17
36278: ISECT
36279: ST_TO_ADDR
// if not list then
36280: LD_VAR 0 5
36284: NOT
36285: IFFALSE 36289
// exit ;
36287: GO 37093
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36289: LD_VAR 0 12
36293: PUSH
36294: LD_INT 3
36296: EQUAL
36297: PUSH
36298: LD_INT 49
36300: PUSH
36301: LD_VAR 0 5
36305: IN
36306: AND
36307: PUSH
36308: LD_INT 31
36310: PPUSH
36311: LD_VAR 0 16
36315: PPUSH
36316: CALL_OW 321
36320: PUSH
36321: LD_INT 2
36323: EQUAL
36324: AND
36325: IFFALSE 36385
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36327: LD_INT 22
36329: PUSH
36330: LD_VAR 0 16
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 35
36341: PUSH
36342: LD_INT 49
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 91
36351: PUSH
36352: LD_VAR 0 1
36356: PUSH
36357: LD_INT 10
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: PPUSH
36370: CALL_OW 69
36374: NOT
36375: IFFALSE 36385
// weapon := ru_time_lapser ;
36377: LD_ADDR_VAR 0 18
36381: PUSH
36382: LD_INT 49
36384: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36385: LD_VAR 0 12
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: IN
36400: PUSH
36401: LD_INT 11
36403: PUSH
36404: LD_VAR 0 5
36408: IN
36409: PUSH
36410: LD_INT 30
36412: PUSH
36413: LD_VAR 0 5
36417: IN
36418: OR
36419: AND
36420: PUSH
36421: LD_INT 6
36423: PPUSH
36424: LD_VAR 0 16
36428: PPUSH
36429: CALL_OW 321
36433: PUSH
36434: LD_INT 2
36436: EQUAL
36437: AND
36438: IFFALSE 36603
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36440: LD_INT 22
36442: PUSH
36443: LD_VAR 0 16
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: LD_INT 35
36457: PUSH
36458: LD_INT 11
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 35
36467: PUSH
36468: LD_INT 30
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 91
36482: PUSH
36483: LD_VAR 0 1
36487: PUSH
36488: LD_INT 18
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PPUSH
36501: CALL_OW 69
36505: NOT
36506: PUSH
36507: LD_INT 22
36509: PUSH
36510: LD_VAR 0 16
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 30
36524: PUSH
36525: LD_INT 32
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 30
36534: PUSH
36535: LD_INT 33
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 91
36549: PUSH
36550: LD_VAR 0 1
36554: PUSH
36555: LD_INT 12
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: PPUSH
36571: CALL_OW 69
36575: PUSH
36576: LD_INT 2
36578: GREATER
36579: AND
36580: IFFALSE 36603
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36582: LD_ADDR_VAR 0 18
36586: PUSH
36587: LD_INT 11
36589: PUSH
36590: LD_INT 30
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_VAR 0 12
36601: ARRAY
36602: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36603: LD_VAR 0 18
36607: NOT
36608: PUSH
36609: LD_INT 40
36611: PPUSH
36612: LD_VAR 0 16
36616: PPUSH
36617: CALL_OW 321
36621: PUSH
36622: LD_INT 2
36624: EQUAL
36625: AND
36626: PUSH
36627: LD_INT 7
36629: PUSH
36630: LD_VAR 0 5
36634: IN
36635: PUSH
36636: LD_INT 28
36638: PUSH
36639: LD_VAR 0 5
36643: IN
36644: OR
36645: PUSH
36646: LD_INT 45
36648: PUSH
36649: LD_VAR 0 5
36653: IN
36654: OR
36655: AND
36656: IFFALSE 36910
// begin hex := GetHexInfo ( x , y ) ;
36658: LD_ADDR_VAR 0 4
36662: PUSH
36663: LD_VAR 0 10
36667: PPUSH
36668: LD_VAR 0 11
36672: PPUSH
36673: CALL_OW 546
36677: ST_TO_ADDR
// if hex [ 1 ] then
36678: LD_VAR 0 4
36682: PUSH
36683: LD_INT 1
36685: ARRAY
36686: IFFALSE 36690
// exit ;
36688: GO 37093
// height := hex [ 2 ] ;
36690: LD_ADDR_VAR 0 15
36694: PUSH
36695: LD_VAR 0 4
36699: PUSH
36700: LD_INT 2
36702: ARRAY
36703: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36704: LD_ADDR_VAR 0 14
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 3
36717: PUSH
36718: LD_INT 5
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: ST_TO_ADDR
// for i in tmp do
36727: LD_ADDR_VAR 0 8
36731: PUSH
36732: LD_VAR 0 14
36736: PUSH
36737: FOR_IN
36738: IFFALSE 36908
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36740: LD_ADDR_VAR 0 9
36744: PUSH
36745: LD_VAR 0 10
36749: PPUSH
36750: LD_VAR 0 8
36754: PPUSH
36755: LD_INT 5
36757: PPUSH
36758: CALL_OW 272
36762: PUSH
36763: LD_VAR 0 11
36767: PPUSH
36768: LD_VAR 0 8
36772: PPUSH
36773: LD_INT 5
36775: PPUSH
36776: CALL_OW 273
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36785: LD_VAR 0 9
36789: PUSH
36790: LD_INT 1
36792: ARRAY
36793: PPUSH
36794: LD_VAR 0 9
36798: PUSH
36799: LD_INT 2
36801: ARRAY
36802: PPUSH
36803: CALL_OW 488
36807: IFFALSE 36906
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36809: LD_ADDR_VAR 0 4
36813: PUSH
36814: LD_VAR 0 9
36818: PUSH
36819: LD_INT 1
36821: ARRAY
36822: PPUSH
36823: LD_VAR 0 9
36827: PUSH
36828: LD_INT 2
36830: ARRAY
36831: PPUSH
36832: CALL_OW 546
36836: ST_TO_ADDR
// if hex [ 1 ] then
36837: LD_VAR 0 4
36841: PUSH
36842: LD_INT 1
36844: ARRAY
36845: IFFALSE 36849
// continue ;
36847: GO 36737
// h := hex [ 2 ] ;
36849: LD_ADDR_VAR 0 13
36853: PUSH
36854: LD_VAR 0 4
36858: PUSH
36859: LD_INT 2
36861: ARRAY
36862: ST_TO_ADDR
// if h + 7 < height then
36863: LD_VAR 0 13
36867: PUSH
36868: LD_INT 7
36870: PLUS
36871: PUSH
36872: LD_VAR 0 15
36876: LESS
36877: IFFALSE 36906
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36879: LD_ADDR_VAR 0 18
36883: PUSH
36884: LD_INT 7
36886: PUSH
36887: LD_INT 28
36889: PUSH
36890: LD_INT 45
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: PUSH
36898: LD_VAR 0 12
36902: ARRAY
36903: ST_TO_ADDR
// break ;
36904: GO 36908
// end ; end ; end ;
36906: GO 36737
36908: POP
36909: POP
// end ; if not weapon then
36910: LD_VAR 0 18
36914: NOT
36915: IFFALSE 36975
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36917: LD_ADDR_VAR 0 5
36921: PUSH
36922: LD_VAR 0 5
36926: PUSH
36927: LD_INT 11
36929: PUSH
36930: LD_INT 30
36932: PUSH
36933: LD_INT 49
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: DIFF
36941: ST_TO_ADDR
// if not list then
36942: LD_VAR 0 5
36946: NOT
36947: IFFALSE 36951
// exit ;
36949: GO 37093
// weapon := list [ rand ( 1 , list ) ] ;
36951: LD_ADDR_VAR 0 18
36955: PUSH
36956: LD_VAR 0 5
36960: PUSH
36961: LD_INT 1
36963: PPUSH
36964: LD_VAR 0 5
36968: PPUSH
36969: CALL_OW 12
36973: ARRAY
36974: ST_TO_ADDR
// end ; if weapon then
36975: LD_VAR 0 18
36979: IFFALSE 37093
// begin tmp := CostOfWeapon ( weapon ) ;
36981: LD_ADDR_VAR 0 14
36985: PUSH
36986: LD_VAR 0 18
36990: PPUSH
36991: CALL_OW 451
36995: ST_TO_ADDR
// j := GetBase ( tower ) ;
36996: LD_ADDR_VAR 0 9
37000: PUSH
37001: LD_VAR 0 1
37005: PPUSH
37006: CALL_OW 274
37010: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37011: LD_VAR 0 9
37015: PPUSH
37016: LD_INT 1
37018: PPUSH
37019: CALL_OW 275
37023: PUSH
37024: LD_VAR 0 14
37028: PUSH
37029: LD_INT 1
37031: ARRAY
37032: GREATEREQUAL
37033: PUSH
37034: LD_VAR 0 9
37038: PPUSH
37039: LD_INT 2
37041: PPUSH
37042: CALL_OW 275
37046: PUSH
37047: LD_VAR 0 14
37051: PUSH
37052: LD_INT 2
37054: ARRAY
37055: GREATEREQUAL
37056: AND
37057: PUSH
37058: LD_VAR 0 9
37062: PPUSH
37063: LD_INT 3
37065: PPUSH
37066: CALL_OW 275
37070: PUSH
37071: LD_VAR 0 14
37075: PUSH
37076: LD_INT 3
37078: ARRAY
37079: GREATEREQUAL
37080: AND
37081: IFFALSE 37093
// result := weapon ;
37083: LD_ADDR_VAR 0 3
37087: PUSH
37088: LD_VAR 0 18
37092: ST_TO_ADDR
// end ; end ;
37093: LD_VAR 0 3
37097: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
// result := true ;
37102: LD_ADDR_VAR 0 3
37106: PUSH
37107: LD_INT 1
37109: ST_TO_ADDR
// if array1 = array2 then
37110: LD_VAR 0 1
37114: PUSH
37115: LD_VAR 0 2
37119: EQUAL
37120: IFFALSE 37180
// begin for i = 1 to array1 do
37122: LD_ADDR_VAR 0 4
37126: PUSH
37127: DOUBLE
37128: LD_INT 1
37130: DEC
37131: ST_TO_ADDR
37132: LD_VAR 0 1
37136: PUSH
37137: FOR_TO
37138: IFFALSE 37176
// if array1 [ i ] <> array2 [ i ] then
37140: LD_VAR 0 1
37144: PUSH
37145: LD_VAR 0 4
37149: ARRAY
37150: PUSH
37151: LD_VAR 0 2
37155: PUSH
37156: LD_VAR 0 4
37160: ARRAY
37161: NONEQUAL
37162: IFFALSE 37174
// begin result := false ;
37164: LD_ADDR_VAR 0 3
37168: PUSH
37169: LD_INT 0
37171: ST_TO_ADDR
// break ;
37172: GO 37176
// end ;
37174: GO 37137
37176: POP
37177: POP
// end else
37178: GO 37188
// result := false ;
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_INT 0
37187: ST_TO_ADDR
// end ;
37188: LD_VAR 0 3
37192: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37193: LD_INT 0
37195: PPUSH
37196: PPUSH
// if not array1 or not array2 then
37197: LD_VAR 0 1
37201: NOT
37202: PUSH
37203: LD_VAR 0 2
37207: NOT
37208: OR
37209: IFFALSE 37213
// exit ;
37211: GO 37277
// result := true ;
37213: LD_ADDR_VAR 0 3
37217: PUSH
37218: LD_INT 1
37220: ST_TO_ADDR
// for i = 1 to array1 do
37221: LD_ADDR_VAR 0 4
37225: PUSH
37226: DOUBLE
37227: LD_INT 1
37229: DEC
37230: ST_TO_ADDR
37231: LD_VAR 0 1
37235: PUSH
37236: FOR_TO
37237: IFFALSE 37275
// if array1 [ i ] <> array2 [ i ] then
37239: LD_VAR 0 1
37243: PUSH
37244: LD_VAR 0 4
37248: ARRAY
37249: PUSH
37250: LD_VAR 0 2
37254: PUSH
37255: LD_VAR 0 4
37259: ARRAY
37260: NONEQUAL
37261: IFFALSE 37273
// begin result := false ;
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_INT 0
37270: ST_TO_ADDR
// break ;
37271: GO 37275
// end ;
37273: GO 37236
37275: POP
37276: POP
// end ;
37277: LD_VAR 0 3
37281: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37282: LD_INT 0
37284: PPUSH
37285: PPUSH
37286: PPUSH
// pom := GetBase ( fac ) ;
37287: LD_ADDR_VAR 0 5
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 274
37301: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37302: LD_ADDR_VAR 0 4
37306: PUSH
37307: LD_VAR 0 2
37311: PUSH
37312: LD_INT 1
37314: ARRAY
37315: PPUSH
37316: LD_VAR 0 2
37320: PUSH
37321: LD_INT 2
37323: ARRAY
37324: PPUSH
37325: LD_VAR 0 2
37329: PUSH
37330: LD_INT 3
37332: ARRAY
37333: PPUSH
37334: LD_VAR 0 2
37338: PUSH
37339: LD_INT 4
37341: ARRAY
37342: PPUSH
37343: CALL_OW 449
37347: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37348: LD_ADDR_VAR 0 3
37352: PUSH
37353: LD_VAR 0 5
37357: PPUSH
37358: LD_INT 1
37360: PPUSH
37361: CALL_OW 275
37365: PUSH
37366: LD_VAR 0 4
37370: PUSH
37371: LD_INT 1
37373: ARRAY
37374: GREATEREQUAL
37375: PUSH
37376: LD_VAR 0 5
37380: PPUSH
37381: LD_INT 2
37383: PPUSH
37384: CALL_OW 275
37388: PUSH
37389: LD_VAR 0 4
37393: PUSH
37394: LD_INT 2
37396: ARRAY
37397: GREATEREQUAL
37398: AND
37399: PUSH
37400: LD_VAR 0 5
37404: PPUSH
37405: LD_INT 3
37407: PPUSH
37408: CALL_OW 275
37412: PUSH
37413: LD_VAR 0 4
37417: PUSH
37418: LD_INT 3
37420: ARRAY
37421: GREATEREQUAL
37422: AND
37423: ST_TO_ADDR
// end ;
37424: LD_VAR 0 3
37428: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37429: LD_INT 0
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
// pom := GetBase ( building ) ;
37435: LD_ADDR_VAR 0 3
37439: PUSH
37440: LD_VAR 0 1
37444: PPUSH
37445: CALL_OW 274
37449: ST_TO_ADDR
// if not pom then
37450: LD_VAR 0 3
37454: NOT
37455: IFFALSE 37459
// exit ;
37457: GO 37629
// btype := GetBType ( building ) ;
37459: LD_ADDR_VAR 0 5
37463: PUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 266
37473: ST_TO_ADDR
// if btype = b_armoury then
37474: LD_VAR 0 5
37478: PUSH
37479: LD_INT 4
37481: EQUAL
37482: IFFALSE 37492
// btype := b_barracks ;
37484: LD_ADDR_VAR 0 5
37488: PUSH
37489: LD_INT 5
37491: ST_TO_ADDR
// if btype = b_depot then
37492: LD_VAR 0 5
37496: PUSH
37497: LD_INT 0
37499: EQUAL
37500: IFFALSE 37510
// btype := b_warehouse ;
37502: LD_ADDR_VAR 0 5
37506: PUSH
37507: LD_INT 1
37509: ST_TO_ADDR
// if btype = b_workshop then
37510: LD_VAR 0 5
37514: PUSH
37515: LD_INT 2
37517: EQUAL
37518: IFFALSE 37528
// btype := b_factory ;
37520: LD_ADDR_VAR 0 5
37524: PUSH
37525: LD_INT 3
37527: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37528: LD_ADDR_VAR 0 4
37532: PUSH
37533: LD_VAR 0 5
37537: PPUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 248
37547: PPUSH
37548: CALL_OW 450
37552: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37553: LD_ADDR_VAR 0 2
37557: PUSH
37558: LD_VAR 0 3
37562: PPUSH
37563: LD_INT 1
37565: PPUSH
37566: CALL_OW 275
37570: PUSH
37571: LD_VAR 0 4
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: GREATEREQUAL
37580: PUSH
37581: LD_VAR 0 3
37585: PPUSH
37586: LD_INT 2
37588: PPUSH
37589: CALL_OW 275
37593: PUSH
37594: LD_VAR 0 4
37598: PUSH
37599: LD_INT 2
37601: ARRAY
37602: GREATEREQUAL
37603: AND
37604: PUSH
37605: LD_VAR 0 3
37609: PPUSH
37610: LD_INT 3
37612: PPUSH
37613: CALL_OW 275
37617: PUSH
37618: LD_VAR 0 4
37622: PUSH
37623: LD_INT 3
37625: ARRAY
37626: GREATEREQUAL
37627: AND
37628: ST_TO_ADDR
// end ;
37629: LD_VAR 0 2
37633: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37634: LD_INT 0
37636: PPUSH
37637: PPUSH
37638: PPUSH
// pom := GetBase ( building ) ;
37639: LD_ADDR_VAR 0 4
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 274
37653: ST_TO_ADDR
// if not pom then
37654: LD_VAR 0 4
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37764
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37663: LD_ADDR_VAR 0 5
37667: PUSH
37668: LD_VAR 0 2
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL_OW 248
37682: PPUSH
37683: CALL_OW 450
37687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37688: LD_ADDR_VAR 0 3
37692: PUSH
37693: LD_VAR 0 4
37697: PPUSH
37698: LD_INT 1
37700: PPUSH
37701: CALL_OW 275
37705: PUSH
37706: LD_VAR 0 5
37710: PUSH
37711: LD_INT 1
37713: ARRAY
37714: GREATEREQUAL
37715: PUSH
37716: LD_VAR 0 4
37720: PPUSH
37721: LD_INT 2
37723: PPUSH
37724: CALL_OW 275
37728: PUSH
37729: LD_VAR 0 5
37733: PUSH
37734: LD_INT 2
37736: ARRAY
37737: GREATEREQUAL
37738: AND
37739: PUSH
37740: LD_VAR 0 4
37744: PPUSH
37745: LD_INT 3
37747: PPUSH
37748: CALL_OW 275
37752: PUSH
37753: LD_VAR 0 5
37757: PUSH
37758: LD_INT 3
37760: ARRAY
37761: GREATEREQUAL
37762: AND
37763: ST_TO_ADDR
// end ;
37764: LD_VAR 0 3
37768: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37769: LD_INT 0
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
// result := false ;
37782: LD_ADDR_VAR 0 8
37786: PUSH
37787: LD_INT 0
37789: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37790: LD_VAR 0 5
37794: NOT
37795: PUSH
37796: LD_VAR 0 1
37800: NOT
37801: OR
37802: PUSH
37803: LD_VAR 0 2
37807: NOT
37808: OR
37809: PUSH
37810: LD_VAR 0 3
37814: NOT
37815: OR
37816: IFFALSE 37820
// exit ;
37818: GO 38634
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37820: LD_ADDR_VAR 0 14
37824: PUSH
37825: LD_VAR 0 1
37829: PPUSH
37830: LD_VAR 0 2
37834: PPUSH
37835: LD_VAR 0 3
37839: PPUSH
37840: LD_VAR 0 4
37844: PPUSH
37845: LD_VAR 0 5
37849: PUSH
37850: LD_INT 1
37852: ARRAY
37853: PPUSH
37854: CALL_OW 248
37858: PPUSH
37859: LD_INT 0
37861: PPUSH
37862: CALL 39871 0 6
37866: ST_TO_ADDR
// if not hexes then
37867: LD_VAR 0 14
37871: NOT
37872: IFFALSE 37876
// exit ;
37874: GO 38634
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37876: LD_ADDR_VAR 0 17
37880: PUSH
37881: LD_VAR 0 5
37885: PPUSH
37886: LD_INT 22
37888: PUSH
37889: LD_VAR 0 13
37893: PPUSH
37894: CALL_OW 255
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 30
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 30
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PPUSH
37935: CALL_OW 72
37939: ST_TO_ADDR
// for i = 1 to hexes do
37940: LD_ADDR_VAR 0 9
37944: PUSH
37945: DOUBLE
37946: LD_INT 1
37948: DEC
37949: ST_TO_ADDR
37950: LD_VAR 0 14
37954: PUSH
37955: FOR_TO
37956: IFFALSE 38632
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37958: LD_ADDR_VAR 0 13
37962: PUSH
37963: LD_VAR 0 14
37967: PUSH
37968: LD_VAR 0 9
37972: ARRAY
37973: PUSH
37974: LD_INT 1
37976: ARRAY
37977: PPUSH
37978: LD_VAR 0 14
37982: PUSH
37983: LD_VAR 0 9
37987: ARRAY
37988: PUSH
37989: LD_INT 2
37991: ARRAY
37992: PPUSH
37993: CALL_OW 428
37997: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37998: LD_VAR 0 14
38002: PUSH
38003: LD_VAR 0 9
38007: ARRAY
38008: PUSH
38009: LD_INT 1
38011: ARRAY
38012: PPUSH
38013: LD_VAR 0 14
38017: PUSH
38018: LD_VAR 0 9
38022: ARRAY
38023: PUSH
38024: LD_INT 2
38026: ARRAY
38027: PPUSH
38028: CALL_OW 351
38032: PUSH
38033: LD_VAR 0 14
38037: PUSH
38038: LD_VAR 0 9
38042: ARRAY
38043: PUSH
38044: LD_INT 1
38046: ARRAY
38047: PPUSH
38048: LD_VAR 0 14
38052: PUSH
38053: LD_VAR 0 9
38057: ARRAY
38058: PUSH
38059: LD_INT 2
38061: ARRAY
38062: PPUSH
38063: CALL_OW 488
38067: NOT
38068: OR
38069: PUSH
38070: LD_VAR 0 13
38074: PPUSH
38075: CALL_OW 247
38079: PUSH
38080: LD_INT 3
38082: EQUAL
38083: OR
38084: IFFALSE 38090
// exit ;
38086: POP
38087: POP
38088: GO 38634
// if not tmp then
38090: LD_VAR 0 13
38094: NOT
38095: IFFALSE 38099
// continue ;
38097: GO 37955
// result := true ;
38099: LD_ADDR_VAR 0 8
38103: PUSH
38104: LD_INT 1
38106: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38107: LD_VAR 0 6
38111: PUSH
38112: LD_VAR 0 13
38116: PPUSH
38117: CALL_OW 247
38121: PUSH
38122: LD_INT 2
38124: EQUAL
38125: AND
38126: PUSH
38127: LD_VAR 0 13
38131: PPUSH
38132: CALL_OW 263
38136: PUSH
38137: LD_INT 1
38139: EQUAL
38140: AND
38141: IFFALSE 38305
// begin if IsDrivenBy ( tmp ) then
38143: LD_VAR 0 13
38147: PPUSH
38148: CALL_OW 311
38152: IFFALSE 38156
// continue ;
38154: GO 37955
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38156: LD_VAR 0 6
38160: PPUSH
38161: LD_INT 3
38163: PUSH
38164: LD_INT 60
38166: PUSH
38167: EMPTY
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 3
38176: PUSH
38177: LD_INT 55
38179: PUSH
38180: EMPTY
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PPUSH
38191: CALL_OW 72
38195: IFFALSE 38303
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38197: LD_ADDR_VAR 0 18
38201: PUSH
38202: LD_VAR 0 6
38206: PPUSH
38207: LD_INT 3
38209: PUSH
38210: LD_INT 60
38212: PUSH
38213: EMPTY
38214: LIST
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: PUSH
38223: LD_INT 55
38225: PUSH
38226: EMPTY
38227: LIST
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PPUSH
38237: CALL_OW 72
38241: PUSH
38242: LD_INT 1
38244: ARRAY
38245: ST_TO_ADDR
// if IsInUnit ( driver ) then
38246: LD_VAR 0 18
38250: PPUSH
38251: CALL_OW 310
38255: IFFALSE 38266
// ComExit ( driver ) ;
38257: LD_VAR 0 18
38261: PPUSH
38262: CALL 63576 0 1
// AddComEnterUnit ( driver , tmp ) ;
38266: LD_VAR 0 18
38270: PPUSH
38271: LD_VAR 0 13
38275: PPUSH
38276: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38280: LD_VAR 0 18
38284: PPUSH
38285: LD_VAR 0 7
38289: PPUSH
38290: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38294: LD_VAR 0 18
38298: PPUSH
38299: CALL_OW 181
// end ; continue ;
38303: GO 37955
// end ; if not cleaners or not tmp in cleaners then
38305: LD_VAR 0 6
38309: NOT
38310: PUSH
38311: LD_VAR 0 13
38315: PUSH
38316: LD_VAR 0 6
38320: IN
38321: NOT
38322: OR
38323: IFFALSE 38630
// begin if dep then
38325: LD_VAR 0 17
38329: IFFALSE 38465
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38331: LD_ADDR_VAR 0 16
38335: PUSH
38336: LD_VAR 0 17
38340: PUSH
38341: LD_INT 1
38343: ARRAY
38344: PPUSH
38345: CALL_OW 250
38349: PPUSH
38350: LD_VAR 0 17
38354: PUSH
38355: LD_INT 1
38357: ARRAY
38358: PPUSH
38359: CALL_OW 254
38363: PPUSH
38364: LD_INT 5
38366: PPUSH
38367: CALL_OW 272
38371: PUSH
38372: LD_VAR 0 17
38376: PUSH
38377: LD_INT 1
38379: ARRAY
38380: PPUSH
38381: CALL_OW 251
38385: PPUSH
38386: LD_VAR 0 17
38390: PUSH
38391: LD_INT 1
38393: ARRAY
38394: PPUSH
38395: CALL_OW 254
38399: PPUSH
38400: LD_INT 5
38402: PPUSH
38403: CALL_OW 273
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38412: LD_VAR 0 16
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PPUSH
38421: LD_VAR 0 16
38425: PUSH
38426: LD_INT 2
38428: ARRAY
38429: PPUSH
38430: CALL_OW 488
38434: IFFALSE 38465
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38436: LD_VAR 0 13
38440: PPUSH
38441: LD_VAR 0 16
38445: PUSH
38446: LD_INT 1
38448: ARRAY
38449: PPUSH
38450: LD_VAR 0 16
38454: PUSH
38455: LD_INT 2
38457: ARRAY
38458: PPUSH
38459: CALL_OW 111
// continue ;
38463: GO 37955
// end ; end ; r := GetDir ( tmp ) ;
38465: LD_ADDR_VAR 0 15
38469: PUSH
38470: LD_VAR 0 13
38474: PPUSH
38475: CALL_OW 254
38479: ST_TO_ADDR
// if r = 5 then
38480: LD_VAR 0 15
38484: PUSH
38485: LD_INT 5
38487: EQUAL
38488: IFFALSE 38498
// r := 0 ;
38490: LD_ADDR_VAR 0 15
38494: PUSH
38495: LD_INT 0
38497: ST_TO_ADDR
// for j = r to 5 do
38498: LD_ADDR_VAR 0 10
38502: PUSH
38503: DOUBLE
38504: LD_VAR 0 15
38508: DEC
38509: ST_TO_ADDR
38510: LD_INT 5
38512: PUSH
38513: FOR_TO
38514: IFFALSE 38628
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38516: LD_ADDR_VAR 0 11
38520: PUSH
38521: LD_VAR 0 13
38525: PPUSH
38526: CALL_OW 250
38530: PPUSH
38531: LD_VAR 0 10
38535: PPUSH
38536: LD_INT 2
38538: PPUSH
38539: CALL_OW 272
38543: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38544: LD_ADDR_VAR 0 12
38548: PUSH
38549: LD_VAR 0 13
38553: PPUSH
38554: CALL_OW 251
38558: PPUSH
38559: LD_VAR 0 10
38563: PPUSH
38564: LD_INT 2
38566: PPUSH
38567: CALL_OW 273
38571: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38572: LD_VAR 0 11
38576: PPUSH
38577: LD_VAR 0 12
38581: PPUSH
38582: CALL_OW 488
38586: PUSH
38587: LD_VAR 0 11
38591: PPUSH
38592: LD_VAR 0 12
38596: PPUSH
38597: CALL_OW 428
38601: NOT
38602: AND
38603: IFFALSE 38626
// begin ComMoveXY ( tmp , _x , _y ) ;
38605: LD_VAR 0 13
38609: PPUSH
38610: LD_VAR 0 11
38614: PPUSH
38615: LD_VAR 0 12
38619: PPUSH
38620: CALL_OW 111
// break ;
38624: GO 38628
// end ; end ;
38626: GO 38513
38628: POP
38629: POP
// end ; end ;
38630: GO 37955
38632: POP
38633: POP
// end ;
38634: LD_VAR 0 8
38638: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38639: LD_INT 0
38641: PPUSH
// result := true ;
38642: LD_ADDR_VAR 0 3
38646: PUSH
38647: LD_INT 1
38649: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38650: LD_VAR 0 2
38654: PUSH
38655: LD_INT 24
38657: DOUBLE
38658: EQUAL
38659: IFTRUE 38669
38661: LD_INT 33
38663: DOUBLE
38664: EQUAL
38665: IFTRUE 38669
38667: GO 38694
38669: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38670: LD_ADDR_VAR 0 3
38674: PUSH
38675: LD_INT 32
38677: PPUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 321
38687: PUSH
38688: LD_INT 2
38690: EQUAL
38691: ST_TO_ADDR
38692: GO 39014
38694: LD_INT 20
38696: DOUBLE
38697: EQUAL
38698: IFTRUE 38702
38700: GO 38727
38702: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38703: LD_ADDR_VAR 0 3
38707: PUSH
38708: LD_INT 6
38710: PPUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL_OW 321
38720: PUSH
38721: LD_INT 2
38723: EQUAL
38724: ST_TO_ADDR
38725: GO 39014
38727: LD_INT 22
38729: DOUBLE
38730: EQUAL
38731: IFTRUE 38741
38733: LD_INT 36
38735: DOUBLE
38736: EQUAL
38737: IFTRUE 38741
38739: GO 38766
38741: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38742: LD_ADDR_VAR 0 3
38746: PUSH
38747: LD_INT 15
38749: PPUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 321
38759: PUSH
38760: LD_INT 2
38762: EQUAL
38763: ST_TO_ADDR
38764: GO 39014
38766: LD_INT 30
38768: DOUBLE
38769: EQUAL
38770: IFTRUE 38774
38772: GO 38799
38774: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: LD_INT 20
38782: PPUSH
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 321
38792: PUSH
38793: LD_INT 2
38795: EQUAL
38796: ST_TO_ADDR
38797: GO 39014
38799: LD_INT 28
38801: DOUBLE
38802: EQUAL
38803: IFTRUE 38813
38805: LD_INT 21
38807: DOUBLE
38808: EQUAL
38809: IFTRUE 38813
38811: GO 38838
38813: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38814: LD_ADDR_VAR 0 3
38818: PUSH
38819: LD_INT 21
38821: PPUSH
38822: LD_VAR 0 1
38826: PPUSH
38827: CALL_OW 321
38831: PUSH
38832: LD_INT 2
38834: EQUAL
38835: ST_TO_ADDR
38836: GO 39014
38838: LD_INT 16
38840: DOUBLE
38841: EQUAL
38842: IFTRUE 38846
38844: GO 38873
38846: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38847: LD_ADDR_VAR 0 3
38851: PUSH
38852: LD_EXP 108
38856: PPUSH
38857: LD_VAR 0 1
38861: PPUSH
38862: CALL_OW 321
38866: PUSH
38867: LD_INT 2
38869: EQUAL
38870: ST_TO_ADDR
38871: GO 39014
38873: LD_INT 19
38875: DOUBLE
38876: EQUAL
38877: IFTRUE 38887
38879: LD_INT 23
38881: DOUBLE
38882: EQUAL
38883: IFTRUE 38887
38885: GO 38914
38887: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38888: LD_ADDR_VAR 0 3
38892: PUSH
38893: LD_EXP 107
38897: PPUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: CALL_OW 321
38907: PUSH
38908: LD_INT 2
38910: EQUAL
38911: ST_TO_ADDR
38912: GO 39014
38914: LD_INT 17
38916: DOUBLE
38917: EQUAL
38918: IFTRUE 38922
38920: GO 38947
38922: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38923: LD_ADDR_VAR 0 3
38927: PUSH
38928: LD_INT 39
38930: PPUSH
38931: LD_VAR 0 1
38935: PPUSH
38936: CALL_OW 321
38940: PUSH
38941: LD_INT 2
38943: EQUAL
38944: ST_TO_ADDR
38945: GO 39014
38947: LD_INT 18
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38980
38955: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_INT 40
38963: PPUSH
38964: LD_VAR 0 1
38968: PPUSH
38969: CALL_OW 321
38973: PUSH
38974: LD_INT 2
38976: EQUAL
38977: ST_TO_ADDR
38978: GO 39014
38980: LD_INT 27
38982: DOUBLE
38983: EQUAL
38984: IFTRUE 38988
38986: GO 39013
38988: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38989: LD_ADDR_VAR 0 3
38993: PUSH
38994: LD_INT 35
38996: PPUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 321
39006: PUSH
39007: LD_INT 2
39009: EQUAL
39010: ST_TO_ADDR
39011: GO 39014
39013: POP
// end ;
39014: LD_VAR 0 3
39018: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39019: LD_INT 0
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
39028: PPUSH
39029: PPUSH
39030: PPUSH
39031: PPUSH
// result := false ;
39032: LD_ADDR_VAR 0 6
39036: PUSH
39037: LD_INT 0
39039: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39040: LD_VAR 0 1
39044: NOT
39045: PUSH
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 266
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: IN
39066: NOT
39067: OR
39068: PUSH
39069: LD_VAR 0 2
39073: NOT
39074: OR
39075: PUSH
39076: LD_VAR 0 5
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: LD_INT 3
39092: PUSH
39093: LD_INT 4
39095: PUSH
39096: LD_INT 5
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: IN
39107: NOT
39108: OR
39109: PUSH
39110: LD_VAR 0 3
39114: PPUSH
39115: LD_VAR 0 4
39119: PPUSH
39120: CALL_OW 488
39124: NOT
39125: OR
39126: IFFALSE 39130
// exit ;
39128: GO 39866
// side := GetSide ( depot ) ;
39130: LD_ADDR_VAR 0 9
39134: PUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: CALL_OW 255
39144: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39145: LD_VAR 0 9
39149: PPUSH
39150: LD_VAR 0 2
39154: PPUSH
39155: CALL 38639 0 2
39159: NOT
39160: IFFALSE 39164
// exit ;
39162: GO 39866
// pom := GetBase ( depot ) ;
39164: LD_ADDR_VAR 0 10
39168: PUSH
39169: LD_VAR 0 1
39173: PPUSH
39174: CALL_OW 274
39178: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39179: LD_ADDR_VAR 0 11
39183: PUSH
39184: LD_VAR 0 2
39188: PPUSH
39189: LD_VAR 0 1
39193: PPUSH
39194: CALL_OW 248
39198: PPUSH
39199: CALL_OW 450
39203: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39204: LD_VAR 0 10
39208: PPUSH
39209: LD_INT 1
39211: PPUSH
39212: CALL_OW 275
39216: PUSH
39217: LD_VAR 0 11
39221: PUSH
39222: LD_INT 1
39224: ARRAY
39225: GREATEREQUAL
39226: PUSH
39227: LD_VAR 0 10
39231: PPUSH
39232: LD_INT 2
39234: PPUSH
39235: CALL_OW 275
39239: PUSH
39240: LD_VAR 0 11
39244: PUSH
39245: LD_INT 2
39247: ARRAY
39248: GREATEREQUAL
39249: AND
39250: PUSH
39251: LD_VAR 0 10
39255: PPUSH
39256: LD_INT 3
39258: PPUSH
39259: CALL_OW 275
39263: PUSH
39264: LD_VAR 0 11
39268: PUSH
39269: LD_INT 3
39271: ARRAY
39272: GREATEREQUAL
39273: AND
39274: NOT
39275: IFFALSE 39279
// exit ;
39277: GO 39866
// if GetBType ( depot ) = b_depot then
39279: LD_VAR 0 1
39283: PPUSH
39284: CALL_OW 266
39288: PUSH
39289: LD_INT 0
39291: EQUAL
39292: IFFALSE 39304
// dist := 28 else
39294: LD_ADDR_VAR 0 14
39298: PUSH
39299: LD_INT 28
39301: ST_TO_ADDR
39302: GO 39312
// dist := 36 ;
39304: LD_ADDR_VAR 0 14
39308: PUSH
39309: LD_INT 36
39311: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39312: LD_VAR 0 1
39316: PPUSH
39317: LD_VAR 0 3
39321: PPUSH
39322: LD_VAR 0 4
39326: PPUSH
39327: CALL_OW 297
39331: PUSH
39332: LD_VAR 0 14
39336: GREATER
39337: IFFALSE 39341
// exit ;
39339: GO 39866
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39341: LD_ADDR_VAR 0 12
39345: PUSH
39346: LD_VAR 0 2
39350: PPUSH
39351: LD_VAR 0 3
39355: PPUSH
39356: LD_VAR 0 4
39360: PPUSH
39361: LD_VAR 0 5
39365: PPUSH
39366: LD_VAR 0 1
39370: PPUSH
39371: CALL_OW 248
39375: PPUSH
39376: LD_INT 0
39378: PPUSH
39379: CALL 39871 0 6
39383: ST_TO_ADDR
// if not hexes then
39384: LD_VAR 0 12
39388: NOT
39389: IFFALSE 39393
// exit ;
39391: GO 39866
// hex := GetHexInfo ( x , y ) ;
39393: LD_ADDR_VAR 0 15
39397: PUSH
39398: LD_VAR 0 3
39402: PPUSH
39403: LD_VAR 0 4
39407: PPUSH
39408: CALL_OW 546
39412: ST_TO_ADDR
// if hex [ 1 ] then
39413: LD_VAR 0 15
39417: PUSH
39418: LD_INT 1
39420: ARRAY
39421: IFFALSE 39425
// exit ;
39423: GO 39866
// height := hex [ 2 ] ;
39425: LD_ADDR_VAR 0 13
39429: PUSH
39430: LD_VAR 0 15
39434: PUSH
39435: LD_INT 2
39437: ARRAY
39438: ST_TO_ADDR
// for i = 1 to hexes do
39439: LD_ADDR_VAR 0 7
39443: PUSH
39444: DOUBLE
39445: LD_INT 1
39447: DEC
39448: ST_TO_ADDR
39449: LD_VAR 0 12
39453: PUSH
39454: FOR_TO
39455: IFFALSE 39785
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39457: LD_VAR 0 12
39461: PUSH
39462: LD_VAR 0 7
39466: ARRAY
39467: PUSH
39468: LD_INT 1
39470: ARRAY
39471: PPUSH
39472: LD_VAR 0 12
39476: PUSH
39477: LD_VAR 0 7
39481: ARRAY
39482: PUSH
39483: LD_INT 2
39485: ARRAY
39486: PPUSH
39487: CALL_OW 488
39491: NOT
39492: PUSH
39493: LD_VAR 0 12
39497: PUSH
39498: LD_VAR 0 7
39502: ARRAY
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PPUSH
39508: LD_VAR 0 12
39512: PUSH
39513: LD_VAR 0 7
39517: ARRAY
39518: PUSH
39519: LD_INT 2
39521: ARRAY
39522: PPUSH
39523: CALL_OW 428
39527: PUSH
39528: LD_INT 0
39530: GREATER
39531: OR
39532: PUSH
39533: LD_VAR 0 12
39537: PUSH
39538: LD_VAR 0 7
39542: ARRAY
39543: PUSH
39544: LD_INT 1
39546: ARRAY
39547: PPUSH
39548: LD_VAR 0 12
39552: PUSH
39553: LD_VAR 0 7
39557: ARRAY
39558: PUSH
39559: LD_INT 2
39561: ARRAY
39562: PPUSH
39563: CALL_OW 351
39567: OR
39568: IFFALSE 39574
// exit ;
39570: POP
39571: POP
39572: GO 39866
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39574: LD_ADDR_VAR 0 8
39578: PUSH
39579: LD_VAR 0 12
39583: PUSH
39584: LD_VAR 0 7
39588: ARRAY
39589: PUSH
39590: LD_INT 1
39592: ARRAY
39593: PPUSH
39594: LD_VAR 0 12
39598: PUSH
39599: LD_VAR 0 7
39603: ARRAY
39604: PUSH
39605: LD_INT 2
39607: ARRAY
39608: PPUSH
39609: CALL_OW 546
39613: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39614: LD_VAR 0 8
39618: PUSH
39619: LD_INT 1
39621: ARRAY
39622: PUSH
39623: LD_VAR 0 8
39627: PUSH
39628: LD_INT 2
39630: ARRAY
39631: PUSH
39632: LD_VAR 0 13
39636: PUSH
39637: LD_INT 2
39639: PLUS
39640: GREATER
39641: OR
39642: PUSH
39643: LD_VAR 0 8
39647: PUSH
39648: LD_INT 2
39650: ARRAY
39651: PUSH
39652: LD_VAR 0 13
39656: PUSH
39657: LD_INT 2
39659: MINUS
39660: LESS
39661: OR
39662: PUSH
39663: LD_VAR 0 8
39667: PUSH
39668: LD_INT 3
39670: ARRAY
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 8
39677: PUSH
39678: LD_INT 9
39680: PUSH
39681: LD_INT 10
39683: PUSH
39684: LD_INT 11
39686: PUSH
39687: LD_INT 12
39689: PUSH
39690: LD_INT 13
39692: PUSH
39693: LD_INT 16
39695: PUSH
39696: LD_INT 17
39698: PUSH
39699: LD_INT 18
39701: PUSH
39702: LD_INT 19
39704: PUSH
39705: LD_INT 20
39707: PUSH
39708: LD_INT 21
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: IN
39726: NOT
39727: OR
39728: PUSH
39729: LD_VAR 0 8
39733: PUSH
39734: LD_INT 5
39736: ARRAY
39737: NOT
39738: OR
39739: PUSH
39740: LD_VAR 0 8
39744: PUSH
39745: LD_INT 6
39747: ARRAY
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 7
39757: PUSH
39758: LD_INT 9
39760: PUSH
39761: LD_INT 10
39763: PUSH
39764: LD_INT 11
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: IN
39775: NOT
39776: OR
39777: IFFALSE 39783
// exit ;
39779: POP
39780: POP
39781: GO 39866
// end ;
39783: GO 39454
39785: POP
39786: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39787: LD_VAR 0 9
39791: PPUSH
39792: LD_VAR 0 3
39796: PPUSH
39797: LD_VAR 0 4
39801: PPUSH
39802: LD_INT 20
39804: PPUSH
39805: CALL 31812 0 4
39809: PUSH
39810: LD_INT 4
39812: ARRAY
39813: IFFALSE 39817
// exit ;
39815: GO 39866
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39817: LD_VAR 0 2
39821: PUSH
39822: LD_INT 29
39824: PUSH
39825: LD_INT 30
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: IN
39832: PUSH
39833: LD_VAR 0 3
39837: PPUSH
39838: LD_VAR 0 4
39842: PPUSH
39843: LD_VAR 0 9
39847: PPUSH
39848: CALL_OW 440
39852: NOT
39853: AND
39854: IFFALSE 39858
// exit ;
39856: GO 39866
// result := true ;
39858: LD_ADDR_VAR 0 6
39862: PUSH
39863: LD_INT 1
39865: ST_TO_ADDR
// end ;
39866: LD_VAR 0 6
39870: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39871: LD_INT 0
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
39892: PPUSH
39893: PPUSH
39894: PPUSH
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
39927: PPUSH
39928: PPUSH
39929: PPUSH
39930: PPUSH
// result = [ ] ;
39931: LD_ADDR_VAR 0 7
39935: PUSH
39936: EMPTY
39937: ST_TO_ADDR
// temp_list = [ ] ;
39938: LD_ADDR_VAR 0 9
39942: PUSH
39943: EMPTY
39944: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39945: LD_VAR 0 4
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 3
39961: PUSH
39962: LD_INT 4
39964: PUSH
39965: LD_INT 5
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: IN
39976: NOT
39977: PUSH
39978: LD_VAR 0 1
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: IN
39993: PUSH
39994: LD_VAR 0 5
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 3
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: IN
40013: NOT
40014: AND
40015: OR
40016: IFFALSE 40020
// exit ;
40018: GO 58411
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40020: LD_VAR 0 1
40024: PUSH
40025: LD_INT 6
40027: PUSH
40028: LD_INT 7
40030: PUSH
40031: LD_INT 8
40033: PUSH
40034: LD_INT 13
40036: PUSH
40037: LD_INT 12
40039: PUSH
40040: LD_INT 15
40042: PUSH
40043: LD_INT 11
40045: PUSH
40046: LD_INT 14
40048: PUSH
40049: LD_INT 10
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: IN
40063: IFFALSE 40073
// btype = b_lab ;
40065: LD_ADDR_VAR 0 1
40069: PUSH
40070: LD_INT 6
40072: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40073: LD_VAR 0 6
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: IN
40092: NOT
40093: PUSH
40094: LD_VAR 0 1
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: LD_INT 3
40110: PUSH
40111: LD_INT 6
40113: PUSH
40114: LD_INT 36
40116: PUSH
40117: LD_INT 4
40119: PUSH
40120: LD_INT 5
40122: PUSH
40123: LD_INT 31
40125: PUSH
40126: LD_INT 32
40128: PUSH
40129: LD_INT 33
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: IN
40145: NOT
40146: PUSH
40147: LD_VAR 0 6
40151: PUSH
40152: LD_INT 1
40154: EQUAL
40155: AND
40156: OR
40157: PUSH
40158: LD_VAR 0 1
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: IN
40173: NOT
40174: PUSH
40175: LD_VAR 0 6
40179: PUSH
40180: LD_INT 2
40182: EQUAL
40183: AND
40184: OR
40185: IFFALSE 40195
// mode = 0 ;
40187: LD_ADDR_VAR 0 6
40191: PUSH
40192: LD_INT 0
40194: ST_TO_ADDR
// case mode of 0 :
40195: LD_VAR 0 6
40199: PUSH
40200: LD_INT 0
40202: DOUBLE
40203: EQUAL
40204: IFTRUE 40208
40206: GO 51661
40208: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40209: LD_ADDR_VAR 0 11
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40402: LD_ADDR_VAR 0 12
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40598: LD_ADDR_VAR 0 13
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: NEG
40746: PUSH
40747: LD_INT 3
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 3
40757: NEG
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 3
40769: NEG
40770: PUSH
40771: LD_INT 3
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40797: LD_ADDR_VAR 0 14
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 3
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 3
40958: NEG
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40993: LD_ADDR_VAR 0 15
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 3
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41186: LD_ADDR_VAR 0 16
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41379: LD_ADDR_VAR 0 17
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41609: LD_ADDR_VAR 0 18
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 2
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: NEG
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41839: LD_ADDR_VAR 0 19
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42069: LD_ADDR_VAR 0 20
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 2
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42299: LD_ADDR_VAR 0 21
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 2
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 2
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42529: LD_ADDR_VAR 0 22
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: LD_INT 2
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42759: LD_ADDR_VAR 0 23
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: LD_INT 3
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 3
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43039: LD_ADDR_VAR 0 24
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43315: LD_ADDR_VAR 0 25
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 3
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43589: LD_ADDR_VAR 0 26
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 3
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 3
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43865: LD_ADDR_VAR 0 27
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 3
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: NEG
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44145: LD_ADDR_VAR 0 28
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: LD_INT 3
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 3
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 3
44392: NEG
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44427: LD_ADDR_VAR 0 29
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 3
44671: NEG
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44706: LD_ADDR_VAR 0 30
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 3
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 3
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44984: LD_ADDR_VAR 0 31
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: LD_INT 3
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 3
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 3
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45262: LD_ADDR_VAR 0 32
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45540: LD_ADDR_VAR 0 33
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 3
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 3
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: NEG
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45819: LD_ADDR_VAR 0 34
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 3
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46099: LD_ADDR_VAR 0 35
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46211: LD_ADDR_VAR 0 36
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46323: LD_ADDR_VAR 0 37
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46435: LD_ADDR_VAR 0 38
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46547: LD_ADDR_VAR 0 39
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46659: LD_ADDR_VAR 0 40
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46771: LD_ADDR_VAR 0 41
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: NEG
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: LD_INT 3
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47121: LD_ADDR_VAR 0 42
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 3
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 3
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 3
47367: PUSH
47368: LD_INT 3
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 3
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 3
47430: NEG
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47471: LD_ADDR_VAR 0 43
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 3
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 3
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 3
47767: NEG
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 3
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47819: LD_ADDR_VAR 0 44
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 3
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: NEG
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 3
48128: NEG
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48169: LD_ADDR_VAR 0 45
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 3
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 3
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: NEG
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 3
48478: NEG
48479: PUSH
48480: LD_INT 3
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48519: LD_ADDR_VAR 0 46
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 3
48815: NEG
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 3
48826: NEG
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48867: LD_ADDR_VAR 0 47
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49018: LD_ADDR_VAR 0 48
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 2
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49165: LD_ADDR_VAR 0 49
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49309: LD_ADDR_VAR 0 50
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49453: LD_ADDR_VAR 0 51
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49600: LD_ADDR_VAR 0 52
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49751: LD_ADDR_VAR 0 53
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49981: LD_ADDR_VAR 0 54
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50211: LD_ADDR_VAR 0 55
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50441: LD_ADDR_VAR 0 56
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50671: LD_ADDR_VAR 0 57
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50901: LD_ADDR_VAR 0 58
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51131: LD_ADDR_VAR 0 59
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51219: LD_ADDR_VAR 0 60
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51307: LD_ADDR_VAR 0 61
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51395: LD_ADDR_VAR 0 62
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51483: LD_ADDR_VAR 0 63
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51571: LD_ADDR_VAR 0 64
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: ST_TO_ADDR
// end ; 1 :
51659: GO 57556
51661: LD_INT 1
51663: DOUBLE
51664: EQUAL
51665: IFTRUE 51669
51667: GO 54292
51669: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51670: LD_ADDR_VAR 0 11
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51714: LD_ADDR_VAR 0 12
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51755: LD_ADDR_VAR 0 13
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51795: LD_ADDR_VAR 0 14
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 3
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51836: LD_ADDR_VAR 0 15
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51880: LD_ADDR_VAR 0 16
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: LD_INT 3
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 3
51911: NEG
51912: PUSH
51913: LD_INT 3
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51926: LD_ADDR_VAR 0 17
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 3
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51970: LD_ADDR_VAR 0 18
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52011: LD_ADDR_VAR 0 19
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52051: LD_ADDR_VAR 0 20
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 3
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52092: LD_ADDR_VAR 0 21
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52136: LD_ADDR_VAR 0 22
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52182: LD_ADDR_VAR 0 23
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 4
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 3
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52226: LD_ADDR_VAR 0 24
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 4
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52267: LD_ADDR_VAR 0 25
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 3
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 4
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: LD_INT 4
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52307: LD_ADDR_VAR 0 26
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 4
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 3
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52348: LD_ADDR_VAR 0 27
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 4
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52392: LD_ADDR_VAR 0 28
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: LD_INT 4
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 4
52423: NEG
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52438: LD_ADDR_VAR 0 29
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 3
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 4
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 4
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 5
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 5
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 4
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 6
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 6
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 5
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52593: LD_ADDR_VAR 0 30
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 4
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 4
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 4
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 5
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 5
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 5
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 6
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 6
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52736: LD_ADDR_VAR 0 31
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 4
52773: PUSH
52774: LD_INT 3
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 4
52783: PUSH
52784: LD_INT 4
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: LD_INT 4
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 5
52803: PUSH
52804: LD_INT 4
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 5
52813: PUSH
52814: LD_INT 5
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 4
52823: PUSH
52824: LD_INT 5
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 6
52833: PUSH
52834: LD_INT 5
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 6
52843: PUSH
52844: LD_INT 6
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 5
52853: PUSH
52854: LD_INT 6
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52875: LD_ADDR_VAR 0 32
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: LD_INT 4
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 4
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 5
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 5
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 4
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 6
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 6
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 5
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53018: LD_ADDR_VAR 0 33
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: NEG
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 4
53070: NEG
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 4
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 4
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 5
53104: NEG
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 5
53115: NEG
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 5
53127: NEG
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 6
53138: NEG
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 6
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53173: LD_ADDR_VAR 0 34
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 3
53192: NEG
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: LD_INT 3
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: LD_INT 4
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 4
53228: NEG
53229: PUSH
53230: LD_INT 3
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 4
53240: NEG
53241: PUSH
53242: LD_INT 4
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 4
53252: NEG
53253: PUSH
53254: LD_INT 5
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 5
53264: NEG
53265: PUSH
53266: LD_INT 4
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 5
53276: NEG
53277: PUSH
53278: LD_INT 5
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 5
53288: NEG
53289: PUSH
53290: LD_INT 6
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 6
53300: NEG
53301: PUSH
53302: LD_INT 5
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 6
53312: NEG
53313: PUSH
53314: LD_INT 6
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53336: LD_ADDR_VAR 0 41
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53380: LD_ADDR_VAR 0 42
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: LIST
53420: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53421: LD_ADDR_VAR 0 43
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 3
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53461: LD_ADDR_VAR 0 44
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 3
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53502: LD_ADDR_VAR 0 45
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53546: LD_ADDR_VAR 0 46
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53592: LD_ADDR_VAR 0 47
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: LD_INT 3
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53625: LD_ADDR_VAR 0 48
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53656: LD_ADDR_VAR 0 49
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53685: LD_ADDR_VAR 0 50
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 3
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53714: LD_ADDR_VAR 0 51
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53745: LD_ADDR_VAR 0 52
53749: PUSH
53750: LD_INT 3
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53778: LD_ADDR_VAR 0 53
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: LD_INT 3
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 3
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53822: LD_ADDR_VAR 0 54
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 3
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53863: LD_ADDR_VAR 0 55
53867: PUSH
53868: LD_INT 3
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 3
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53903: LD_ADDR_VAR 0 56
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53944: LD_ADDR_VAR 0 57
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 3
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53988: LD_ADDR_VAR 0 58
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: LD_INT 3
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54034: LD_ADDR_VAR 0 59
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54078: LD_ADDR_VAR 0 60
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54119: LD_ADDR_VAR 0 61
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: LIST
54158: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54159: LD_ADDR_VAR 0 62
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54200: LD_ADDR_VAR 0 63
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54244: LD_ADDR_VAR 0 64
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: LIST
54289: ST_TO_ADDR
// end ; 2 :
54290: GO 57556
54292: LD_INT 2
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54300
54298: GO 57555
54300: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54301: LD_ADDR_VAR 0 29
54305: PUSH
54306: LD_INT 4
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 4
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 5
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 5
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 4
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 5
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 3
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 4
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 4
54431: PUSH
54432: LD_INT 4
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: LD_INT 4
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 4
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 4
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 4
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 5
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 5
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 4
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 5
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 4
54640: NEG
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 4
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: LD_INT 4
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 4
54698: NEG
54699: PUSH
54700: LD_INT 5
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: LD_INT 4
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: LD_INT 3
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 4
54734: NEG
54735: PUSH
54736: LD_INT 3
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 5
54746: NEG
54747: PUSH
54748: LD_INT 4
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 5
54758: NEG
54759: PUSH
54760: LD_INT 5
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 3
54770: NEG
54771: PUSH
54772: LD_INT 5
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 5
54782: NEG
54783: PUSH
54784: LD_INT 3
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54839: LD_ADDR_VAR 0 30
54843: PUSH
54844: LD_INT 4
54846: PUSH
54847: LD_INT 4
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 4
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 5
54866: PUSH
54867: LD_INT 4
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 5
54876: PUSH
54877: LD_INT 5
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 4
54886: PUSH
54887: LD_INT 5
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: LD_INT 4
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 5
54916: PUSH
54917: LD_INT 3
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: LD_INT 5
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 3
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 4
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 4
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 4
55029: NEG
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 4
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 4
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 5
55085: NEG
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 5
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 5
55108: NEG
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 3
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 4
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 4
55203: NEG
55204: PUSH
55205: LD_INT 4
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 4
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 4
55227: NEG
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 4
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 5
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 4
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 3
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 4
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 5
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 5
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55386: LD_ADDR_VAR 0 31
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 4
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 4
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 5
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 5
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 4
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 5
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: LD_INT 3
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 4
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 4
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: LD_INT 4
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 4
55600: NEG
55601: PUSH
55602: LD_INT 5
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 3
55612: NEG
55613: PUSH
55614: LD_INT 4
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: NEG
55625: PUSH
55626: LD_INT 3
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 4
55636: NEG
55637: PUSH
55638: LD_INT 3
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 5
55648: NEG
55649: PUSH
55650: LD_INT 4
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 5
55660: NEG
55661: PUSH
55662: LD_INT 5
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: LD_INT 5
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 5
55684: NEG
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 4
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 4
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 4
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 4
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 4
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 5
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 5
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 5
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55936: LD_ADDR_VAR 0 32
55940: PUSH
55941: LD_INT 4
55943: NEG
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 4
55954: NEG
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 4
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 5
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 5
56022: NEG
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: LD_INT 4
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: LD_INT 3
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: LD_INT 4
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: LD_INT 4
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 4
56141: NEG
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 4
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 5
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 4
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 3
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 4
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 5
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 5
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 4
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 4
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 3
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 4
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 4
56348: PUSH
56349: LD_INT 4
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 4
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 5
56368: PUSH
56369: LD_INT 4
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 5
56378: PUSH
56379: LD_INT 5
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 4
56388: PUSH
56389: LD_INT 5
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: LD_INT 4
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 5
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 3
56428: PUSH
56429: LD_INT 5
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56483: LD_ADDR_VAR 0 33
56487: PUSH
56488: LD_INT 4
56490: NEG
56491: PUSH
56492: LD_INT 4
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 4
56502: NEG
56503: PUSH
56504: LD_INT 5
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: LD_INT 4
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 4
56538: NEG
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 5
56550: NEG
56551: PUSH
56552: LD_INT 4
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 5
56562: NEG
56563: PUSH
56564: LD_INT 5
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: LD_INT 5
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 5
56586: NEG
56587: PUSH
56588: LD_INT 3
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 4
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 4
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 2
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 4
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 4
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 5
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 5
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 4
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 3
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 5
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 4
56823: PUSH
56824: LD_INT 4
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: LD_INT 4
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 4
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: LD_INT 4
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 4
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 4
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 5
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 5
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 4
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: LD_INT 5
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57021: LD_ADDR_VAR 0 34
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 4
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 5
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 4
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 4
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 5
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 3
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 5
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 4
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 4
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: LD_INT 4
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 5
57243: PUSH
57244: LD_INT 4
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 5
57253: PUSH
57254: LD_INT 5
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 5
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 5
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: LD_INT 5
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 4
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 4
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: LD_INT 4
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 4
57406: NEG
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 4
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 4
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 5
57462: NEG
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 5
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 5
57485: NEG
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// end ; end ;
57553: GO 57556
57555: POP
// case btype of b_depot , b_warehouse :
57556: LD_VAR 0 1
57560: PUSH
57561: LD_INT 0
57563: DOUBLE
57564: EQUAL
57565: IFTRUE 57575
57567: LD_INT 1
57569: DOUBLE
57570: EQUAL
57571: IFTRUE 57575
57573: GO 57776
57575: POP
// case nation of nation_american :
57576: LD_VAR 0 5
57580: PUSH
57581: LD_INT 1
57583: DOUBLE
57584: EQUAL
57585: IFTRUE 57589
57587: GO 57645
57589: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57590: LD_ADDR_VAR 0 9
57594: PUSH
57595: LD_VAR 0 11
57599: PUSH
57600: LD_VAR 0 12
57604: PUSH
57605: LD_VAR 0 13
57609: PUSH
57610: LD_VAR 0 14
57614: PUSH
57615: LD_VAR 0 15
57619: PUSH
57620: LD_VAR 0 16
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: PUSH
57633: LD_VAR 0 4
57637: PUSH
57638: LD_INT 1
57640: PLUS
57641: ARRAY
57642: ST_TO_ADDR
57643: GO 57774
57645: LD_INT 2
57647: DOUBLE
57648: EQUAL
57649: IFTRUE 57653
57651: GO 57709
57653: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57654: LD_ADDR_VAR 0 9
57658: PUSH
57659: LD_VAR 0 17
57663: PUSH
57664: LD_VAR 0 18
57668: PUSH
57669: LD_VAR 0 19
57673: PUSH
57674: LD_VAR 0 20
57678: PUSH
57679: LD_VAR 0 21
57683: PUSH
57684: LD_VAR 0 22
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: PUSH
57697: LD_VAR 0 4
57701: PUSH
57702: LD_INT 1
57704: PLUS
57705: ARRAY
57706: ST_TO_ADDR
57707: GO 57774
57709: LD_INT 3
57711: DOUBLE
57712: EQUAL
57713: IFTRUE 57717
57715: GO 57773
57717: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57718: LD_ADDR_VAR 0 9
57722: PUSH
57723: LD_VAR 0 23
57727: PUSH
57728: LD_VAR 0 24
57732: PUSH
57733: LD_VAR 0 25
57737: PUSH
57738: LD_VAR 0 26
57742: PUSH
57743: LD_VAR 0 27
57747: PUSH
57748: LD_VAR 0 28
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: PUSH
57761: LD_VAR 0 4
57765: PUSH
57766: LD_INT 1
57768: PLUS
57769: ARRAY
57770: ST_TO_ADDR
57771: GO 57774
57773: POP
57774: GO 58329
57776: LD_INT 2
57778: DOUBLE
57779: EQUAL
57780: IFTRUE 57790
57782: LD_INT 3
57784: DOUBLE
57785: EQUAL
57786: IFTRUE 57790
57788: GO 57846
57790: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57791: LD_ADDR_VAR 0 9
57795: PUSH
57796: LD_VAR 0 29
57800: PUSH
57801: LD_VAR 0 30
57805: PUSH
57806: LD_VAR 0 31
57810: PUSH
57811: LD_VAR 0 32
57815: PUSH
57816: LD_VAR 0 33
57820: PUSH
57821: LD_VAR 0 34
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: PUSH
57834: LD_VAR 0 4
57838: PUSH
57839: LD_INT 1
57841: PLUS
57842: ARRAY
57843: ST_TO_ADDR
57844: GO 58329
57846: LD_INT 16
57848: DOUBLE
57849: EQUAL
57850: IFTRUE 57908
57852: LD_INT 17
57854: DOUBLE
57855: EQUAL
57856: IFTRUE 57908
57858: LD_INT 18
57860: DOUBLE
57861: EQUAL
57862: IFTRUE 57908
57864: LD_INT 19
57866: DOUBLE
57867: EQUAL
57868: IFTRUE 57908
57870: LD_INT 22
57872: DOUBLE
57873: EQUAL
57874: IFTRUE 57908
57876: LD_INT 20
57878: DOUBLE
57879: EQUAL
57880: IFTRUE 57908
57882: LD_INT 21
57884: DOUBLE
57885: EQUAL
57886: IFTRUE 57908
57888: LD_INT 23
57890: DOUBLE
57891: EQUAL
57892: IFTRUE 57908
57894: LD_INT 24
57896: DOUBLE
57897: EQUAL
57898: IFTRUE 57908
57900: LD_INT 25
57902: DOUBLE
57903: EQUAL
57904: IFTRUE 57908
57906: GO 57964
57908: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57909: LD_ADDR_VAR 0 9
57913: PUSH
57914: LD_VAR 0 35
57918: PUSH
57919: LD_VAR 0 36
57923: PUSH
57924: LD_VAR 0 37
57928: PUSH
57929: LD_VAR 0 38
57933: PUSH
57934: LD_VAR 0 39
57938: PUSH
57939: LD_VAR 0 40
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: PUSH
57952: LD_VAR 0 4
57956: PUSH
57957: LD_INT 1
57959: PLUS
57960: ARRAY
57961: ST_TO_ADDR
57962: GO 58329
57964: LD_INT 6
57966: DOUBLE
57967: EQUAL
57968: IFTRUE 58020
57970: LD_INT 7
57972: DOUBLE
57973: EQUAL
57974: IFTRUE 58020
57976: LD_INT 8
57978: DOUBLE
57979: EQUAL
57980: IFTRUE 58020
57982: LD_INT 13
57984: DOUBLE
57985: EQUAL
57986: IFTRUE 58020
57988: LD_INT 12
57990: DOUBLE
57991: EQUAL
57992: IFTRUE 58020
57994: LD_INT 15
57996: DOUBLE
57997: EQUAL
57998: IFTRUE 58020
58000: LD_INT 11
58002: DOUBLE
58003: EQUAL
58004: IFTRUE 58020
58006: LD_INT 14
58008: DOUBLE
58009: EQUAL
58010: IFTRUE 58020
58012: LD_INT 10
58014: DOUBLE
58015: EQUAL
58016: IFTRUE 58020
58018: GO 58076
58020: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58021: LD_ADDR_VAR 0 9
58025: PUSH
58026: LD_VAR 0 41
58030: PUSH
58031: LD_VAR 0 42
58035: PUSH
58036: LD_VAR 0 43
58040: PUSH
58041: LD_VAR 0 44
58045: PUSH
58046: LD_VAR 0 45
58050: PUSH
58051: LD_VAR 0 46
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: PUSH
58064: LD_VAR 0 4
58068: PUSH
58069: LD_INT 1
58071: PLUS
58072: ARRAY
58073: ST_TO_ADDR
58074: GO 58329
58076: LD_INT 36
58078: DOUBLE
58079: EQUAL
58080: IFTRUE 58084
58082: GO 58140
58084: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58085: LD_ADDR_VAR 0 9
58089: PUSH
58090: LD_VAR 0 47
58094: PUSH
58095: LD_VAR 0 48
58099: PUSH
58100: LD_VAR 0 49
58104: PUSH
58105: LD_VAR 0 50
58109: PUSH
58110: LD_VAR 0 51
58114: PUSH
58115: LD_VAR 0 52
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: PUSH
58128: LD_VAR 0 4
58132: PUSH
58133: LD_INT 1
58135: PLUS
58136: ARRAY
58137: ST_TO_ADDR
58138: GO 58329
58140: LD_INT 4
58142: DOUBLE
58143: EQUAL
58144: IFTRUE 58166
58146: LD_INT 5
58148: DOUBLE
58149: EQUAL
58150: IFTRUE 58166
58152: LD_INT 34
58154: DOUBLE
58155: EQUAL
58156: IFTRUE 58166
58158: LD_INT 37
58160: DOUBLE
58161: EQUAL
58162: IFTRUE 58166
58164: GO 58222
58166: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58167: LD_ADDR_VAR 0 9
58171: PUSH
58172: LD_VAR 0 53
58176: PUSH
58177: LD_VAR 0 54
58181: PUSH
58182: LD_VAR 0 55
58186: PUSH
58187: LD_VAR 0 56
58191: PUSH
58192: LD_VAR 0 57
58196: PUSH
58197: LD_VAR 0 58
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: PUSH
58210: LD_VAR 0 4
58214: PUSH
58215: LD_INT 1
58217: PLUS
58218: ARRAY
58219: ST_TO_ADDR
58220: GO 58329
58222: LD_INT 31
58224: DOUBLE
58225: EQUAL
58226: IFTRUE 58272
58228: LD_INT 32
58230: DOUBLE
58231: EQUAL
58232: IFTRUE 58272
58234: LD_INT 33
58236: DOUBLE
58237: EQUAL
58238: IFTRUE 58272
58240: LD_INT 27
58242: DOUBLE
58243: EQUAL
58244: IFTRUE 58272
58246: LD_INT 26
58248: DOUBLE
58249: EQUAL
58250: IFTRUE 58272
58252: LD_INT 28
58254: DOUBLE
58255: EQUAL
58256: IFTRUE 58272
58258: LD_INT 29
58260: DOUBLE
58261: EQUAL
58262: IFTRUE 58272
58264: LD_INT 30
58266: DOUBLE
58267: EQUAL
58268: IFTRUE 58272
58270: GO 58328
58272: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58273: LD_ADDR_VAR 0 9
58277: PUSH
58278: LD_VAR 0 59
58282: PUSH
58283: LD_VAR 0 60
58287: PUSH
58288: LD_VAR 0 61
58292: PUSH
58293: LD_VAR 0 62
58297: PUSH
58298: LD_VAR 0 63
58302: PUSH
58303: LD_VAR 0 64
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: PUSH
58316: LD_VAR 0 4
58320: PUSH
58321: LD_INT 1
58323: PLUS
58324: ARRAY
58325: ST_TO_ADDR
58326: GO 58329
58328: POP
// temp_list2 = [ ] ;
58329: LD_ADDR_VAR 0 10
58333: PUSH
58334: EMPTY
58335: ST_TO_ADDR
// for i in temp_list do
58336: LD_ADDR_VAR 0 8
58340: PUSH
58341: LD_VAR 0 9
58345: PUSH
58346: FOR_IN
58347: IFFALSE 58399
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58349: LD_ADDR_VAR 0 10
58353: PUSH
58354: LD_VAR 0 10
58358: PUSH
58359: LD_VAR 0 8
58363: PUSH
58364: LD_INT 1
58366: ARRAY
58367: PUSH
58368: LD_VAR 0 2
58372: PLUS
58373: PUSH
58374: LD_VAR 0 8
58378: PUSH
58379: LD_INT 2
58381: ARRAY
58382: PUSH
58383: LD_VAR 0 3
58387: PLUS
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: EMPTY
58394: LIST
58395: ADD
58396: ST_TO_ADDR
58397: GO 58346
58399: POP
58400: POP
// result = temp_list2 ;
58401: LD_ADDR_VAR 0 7
58405: PUSH
58406: LD_VAR 0 10
58410: ST_TO_ADDR
// end ;
58411: LD_VAR 0 7
58415: RET
// export function EnemyInRange ( unit , dist ) ; begin
58416: LD_INT 0
58418: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58419: LD_ADDR_VAR 0 3
58423: PUSH
58424: LD_VAR 0 1
58428: PPUSH
58429: CALL_OW 255
58433: PPUSH
58434: LD_VAR 0 1
58438: PPUSH
58439: CALL_OW 250
58443: PPUSH
58444: LD_VAR 0 1
58448: PPUSH
58449: CALL_OW 251
58453: PPUSH
58454: LD_VAR 0 2
58458: PPUSH
58459: CALL 31812 0 4
58463: PUSH
58464: LD_INT 4
58466: ARRAY
58467: ST_TO_ADDR
// end ;
58468: LD_VAR 0 3
58472: RET
// export function PlayerSeeMe ( unit ) ; begin
58473: LD_INT 0
58475: PPUSH
// result := See ( your_side , unit ) ;
58476: LD_ADDR_VAR 0 2
58480: PUSH
58481: LD_OWVAR 2
58485: PPUSH
58486: LD_VAR 0 1
58490: PPUSH
58491: CALL_OW 292
58495: ST_TO_ADDR
// end ;
58496: LD_VAR 0 2
58500: RET
// export function ReverseDir ( unit ) ; begin
58501: LD_INT 0
58503: PPUSH
// if not unit then
58504: LD_VAR 0 1
58508: NOT
58509: IFFALSE 58513
// exit ;
58511: GO 58536
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58513: LD_ADDR_VAR 0 2
58517: PUSH
58518: LD_VAR 0 1
58522: PPUSH
58523: CALL_OW 254
58527: PUSH
58528: LD_INT 3
58530: PLUS
58531: PUSH
58532: LD_INT 6
58534: MOD
58535: ST_TO_ADDR
// end ;
58536: LD_VAR 0 2
58540: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58541: LD_INT 0
58543: PPUSH
58544: PPUSH
58545: PPUSH
58546: PPUSH
58547: PPUSH
// if not hexes then
58548: LD_VAR 0 2
58552: NOT
58553: IFFALSE 58557
// exit ;
58555: GO 58705
// dist := 9999 ;
58557: LD_ADDR_VAR 0 5
58561: PUSH
58562: LD_INT 9999
58564: ST_TO_ADDR
// for i = 1 to hexes do
58565: LD_ADDR_VAR 0 4
58569: PUSH
58570: DOUBLE
58571: LD_INT 1
58573: DEC
58574: ST_TO_ADDR
58575: LD_VAR 0 2
58579: PUSH
58580: FOR_TO
58581: IFFALSE 58693
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58583: LD_VAR 0 1
58587: PPUSH
58588: LD_VAR 0 2
58592: PUSH
58593: LD_VAR 0 4
58597: ARRAY
58598: PUSH
58599: LD_INT 1
58601: ARRAY
58602: PPUSH
58603: LD_VAR 0 2
58607: PUSH
58608: LD_VAR 0 4
58612: ARRAY
58613: PUSH
58614: LD_INT 2
58616: ARRAY
58617: PPUSH
58618: CALL_OW 297
58622: PUSH
58623: LD_VAR 0 5
58627: LESS
58628: IFFALSE 58691
// begin hex := hexes [ i ] ;
58630: LD_ADDR_VAR 0 7
58634: PUSH
58635: LD_VAR 0 2
58639: PUSH
58640: LD_VAR 0 4
58644: ARRAY
58645: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58646: LD_ADDR_VAR 0 5
58650: PUSH
58651: LD_VAR 0 1
58655: PPUSH
58656: LD_VAR 0 2
58660: PUSH
58661: LD_VAR 0 4
58665: ARRAY
58666: PUSH
58667: LD_INT 1
58669: ARRAY
58670: PPUSH
58671: LD_VAR 0 2
58675: PUSH
58676: LD_VAR 0 4
58680: ARRAY
58681: PUSH
58682: LD_INT 2
58684: ARRAY
58685: PPUSH
58686: CALL_OW 297
58690: ST_TO_ADDR
// end ; end ;
58691: GO 58580
58693: POP
58694: POP
// result := hex ;
58695: LD_ADDR_VAR 0 3
58699: PUSH
58700: LD_VAR 0 7
58704: ST_TO_ADDR
// end ;
58705: LD_VAR 0 3
58709: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58710: LD_INT 0
58712: PPUSH
58713: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58714: LD_VAR 0 1
58718: NOT
58719: PUSH
58720: LD_VAR 0 1
58724: PUSH
58725: LD_INT 21
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 23
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PPUSH
58749: CALL_OW 69
58753: IN
58754: NOT
58755: OR
58756: IFFALSE 58760
// exit ;
58758: GO 58807
// for i = 1 to 3 do
58760: LD_ADDR_VAR 0 3
58764: PUSH
58765: DOUBLE
58766: LD_INT 1
58768: DEC
58769: ST_TO_ADDR
58770: LD_INT 3
58772: PUSH
58773: FOR_TO
58774: IFFALSE 58805
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58776: LD_VAR 0 1
58780: PPUSH
58781: CALL_OW 250
58785: PPUSH
58786: LD_VAR 0 1
58790: PPUSH
58791: CALL_OW 251
58795: PPUSH
58796: LD_INT 1
58798: PPUSH
58799: CALL_OW 453
58803: GO 58773
58805: POP
58806: POP
// end ;
58807: LD_VAR 0 2
58811: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58812: LD_INT 0
58814: PPUSH
58815: PPUSH
58816: PPUSH
58817: PPUSH
58818: PPUSH
58819: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58820: LD_VAR 0 1
58824: NOT
58825: PUSH
58826: LD_VAR 0 2
58830: NOT
58831: OR
58832: PUSH
58833: LD_VAR 0 1
58837: PPUSH
58838: CALL_OW 314
58842: OR
58843: IFFALSE 58847
// exit ;
58845: GO 59288
// x := GetX ( enemy_unit ) ;
58847: LD_ADDR_VAR 0 7
58851: PUSH
58852: LD_VAR 0 2
58856: PPUSH
58857: CALL_OW 250
58861: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58862: LD_ADDR_VAR 0 8
58866: PUSH
58867: LD_VAR 0 2
58871: PPUSH
58872: CALL_OW 251
58876: ST_TO_ADDR
// if not x or not y then
58877: LD_VAR 0 7
58881: NOT
58882: PUSH
58883: LD_VAR 0 8
58887: NOT
58888: OR
58889: IFFALSE 58893
// exit ;
58891: GO 59288
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58893: LD_ADDR_VAR 0 6
58897: PUSH
58898: LD_VAR 0 7
58902: PPUSH
58903: LD_INT 0
58905: PPUSH
58906: LD_INT 4
58908: PPUSH
58909: CALL_OW 272
58913: PUSH
58914: LD_VAR 0 8
58918: PPUSH
58919: LD_INT 0
58921: PPUSH
58922: LD_INT 4
58924: PPUSH
58925: CALL_OW 273
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_VAR 0 7
58938: PPUSH
58939: LD_INT 1
58941: PPUSH
58942: LD_INT 4
58944: PPUSH
58945: CALL_OW 272
58949: PUSH
58950: LD_VAR 0 8
58954: PPUSH
58955: LD_INT 1
58957: PPUSH
58958: LD_INT 4
58960: PPUSH
58961: CALL_OW 273
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_VAR 0 7
58974: PPUSH
58975: LD_INT 2
58977: PPUSH
58978: LD_INT 4
58980: PPUSH
58981: CALL_OW 272
58985: PUSH
58986: LD_VAR 0 8
58990: PPUSH
58991: LD_INT 2
58993: PPUSH
58994: LD_INT 4
58996: PPUSH
58997: CALL_OW 273
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_VAR 0 7
59010: PPUSH
59011: LD_INT 3
59013: PPUSH
59014: LD_INT 4
59016: PPUSH
59017: CALL_OW 272
59021: PUSH
59022: LD_VAR 0 8
59026: PPUSH
59027: LD_INT 3
59029: PPUSH
59030: LD_INT 4
59032: PPUSH
59033: CALL_OW 273
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_VAR 0 7
59046: PPUSH
59047: LD_INT 4
59049: PPUSH
59050: LD_INT 4
59052: PPUSH
59053: CALL_OW 272
59057: PUSH
59058: LD_VAR 0 8
59062: PPUSH
59063: LD_INT 4
59065: PPUSH
59066: LD_INT 4
59068: PPUSH
59069: CALL_OW 273
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_VAR 0 7
59082: PPUSH
59083: LD_INT 5
59085: PPUSH
59086: LD_INT 4
59088: PPUSH
59089: CALL_OW 272
59093: PUSH
59094: LD_VAR 0 8
59098: PPUSH
59099: LD_INT 5
59101: PPUSH
59102: LD_INT 4
59104: PPUSH
59105: CALL_OW 273
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// for i = tmp downto 1 do
59122: LD_ADDR_VAR 0 4
59126: PUSH
59127: DOUBLE
59128: LD_VAR 0 6
59132: INC
59133: ST_TO_ADDR
59134: LD_INT 1
59136: PUSH
59137: FOR_DOWNTO
59138: IFFALSE 59239
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59140: LD_VAR 0 6
59144: PUSH
59145: LD_VAR 0 4
59149: ARRAY
59150: PUSH
59151: LD_INT 1
59153: ARRAY
59154: PPUSH
59155: LD_VAR 0 6
59159: PUSH
59160: LD_VAR 0 4
59164: ARRAY
59165: PUSH
59166: LD_INT 2
59168: ARRAY
59169: PPUSH
59170: CALL_OW 488
59174: NOT
59175: PUSH
59176: LD_VAR 0 6
59180: PUSH
59181: LD_VAR 0 4
59185: ARRAY
59186: PUSH
59187: LD_INT 1
59189: ARRAY
59190: PPUSH
59191: LD_VAR 0 6
59195: PUSH
59196: LD_VAR 0 4
59200: ARRAY
59201: PUSH
59202: LD_INT 2
59204: ARRAY
59205: PPUSH
59206: CALL_OW 428
59210: PUSH
59211: LD_INT 0
59213: NONEQUAL
59214: OR
59215: IFFALSE 59237
// tmp := Delete ( tmp , i ) ;
59217: LD_ADDR_VAR 0 6
59221: PUSH
59222: LD_VAR 0 6
59226: PPUSH
59227: LD_VAR 0 4
59231: PPUSH
59232: CALL_OW 3
59236: ST_TO_ADDR
59237: GO 59137
59239: POP
59240: POP
// j := GetClosestHex ( unit , tmp ) ;
59241: LD_ADDR_VAR 0 5
59245: PUSH
59246: LD_VAR 0 1
59250: PPUSH
59251: LD_VAR 0 6
59255: PPUSH
59256: CALL 58541 0 2
59260: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59261: LD_VAR 0 1
59265: PPUSH
59266: LD_VAR 0 5
59270: PUSH
59271: LD_INT 1
59273: ARRAY
59274: PPUSH
59275: LD_VAR 0 5
59279: PUSH
59280: LD_INT 2
59282: ARRAY
59283: PPUSH
59284: CALL_OW 111
// end ;
59288: LD_VAR 0 3
59292: RET
// export function PrepareApemanSoldier ( ) ; begin
59293: LD_INT 0
59295: PPUSH
// uc_nation := 0 ;
59296: LD_ADDR_OWVAR 21
59300: PUSH
59301: LD_INT 0
59303: ST_TO_ADDR
// hc_sex := sex_male ;
59304: LD_ADDR_OWVAR 27
59308: PUSH
59309: LD_INT 1
59311: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59312: LD_ADDR_OWVAR 28
59316: PUSH
59317: LD_INT 15
59319: ST_TO_ADDR
// hc_gallery :=  ;
59320: LD_ADDR_OWVAR 33
59324: PUSH
59325: LD_STRING 
59327: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59328: LD_ADDR_OWVAR 31
59332: PUSH
59333: LD_INT 0
59335: PPUSH
59336: LD_INT 3
59338: PPUSH
59339: CALL_OW 12
59343: PUSH
59344: LD_INT 0
59346: PPUSH
59347: LD_INT 3
59349: PPUSH
59350: CALL_OW 12
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: ST_TO_ADDR
// end ;
59367: LD_VAR 0 1
59371: RET
// export function PrepareApemanEngineer ( ) ; begin
59372: LD_INT 0
59374: PPUSH
// uc_nation := 0 ;
59375: LD_ADDR_OWVAR 21
59379: PUSH
59380: LD_INT 0
59382: ST_TO_ADDR
// hc_sex := sex_male ;
59383: LD_ADDR_OWVAR 27
59387: PUSH
59388: LD_INT 1
59390: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59391: LD_ADDR_OWVAR 28
59395: PUSH
59396: LD_INT 16
59398: ST_TO_ADDR
// hc_gallery :=  ;
59399: LD_ADDR_OWVAR 33
59403: PUSH
59404: LD_STRING 
59406: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59407: LD_ADDR_OWVAR 31
59411: PUSH
59412: LD_INT 0
59414: PPUSH
59415: LD_INT 3
59417: PPUSH
59418: CALL_OW 12
59422: PUSH
59423: LD_INT 0
59425: PPUSH
59426: LD_INT 3
59428: PPUSH
59429: CALL_OW 12
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: ST_TO_ADDR
// end ;
59446: LD_VAR 0 1
59450: RET
// export function PrepareApeman ( agressivity ) ; begin
59451: LD_INT 0
59453: PPUSH
// uc_side := 0 ;
59454: LD_ADDR_OWVAR 20
59458: PUSH
59459: LD_INT 0
59461: ST_TO_ADDR
// uc_nation := 0 ;
59462: LD_ADDR_OWVAR 21
59466: PUSH
59467: LD_INT 0
59469: ST_TO_ADDR
// hc_sex := sex_male ;
59470: LD_ADDR_OWVAR 27
59474: PUSH
59475: LD_INT 1
59477: ST_TO_ADDR
// hc_class := class_apeman ;
59478: LD_ADDR_OWVAR 28
59482: PUSH
59483: LD_INT 12
59485: ST_TO_ADDR
// hc_gallery :=  ;
59486: LD_ADDR_OWVAR 33
59490: PUSH
59491: LD_STRING 
59493: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59494: LD_ADDR_OWVAR 35
59498: PUSH
59499: LD_VAR 0 1
59503: NEG
59504: PPUSH
59505: LD_VAR 0 1
59509: PPUSH
59510: CALL_OW 12
59514: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59515: LD_ADDR_OWVAR 31
59519: PUSH
59520: LD_INT 0
59522: PPUSH
59523: LD_INT 3
59525: PPUSH
59526: CALL_OW 12
59530: PUSH
59531: LD_INT 0
59533: PPUSH
59534: LD_INT 3
59536: PPUSH
59537: CALL_OW 12
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: ST_TO_ADDR
// end ;
59554: LD_VAR 0 2
59558: RET
// export function PrepareTiger ( agressivity ) ; begin
59559: LD_INT 0
59561: PPUSH
// uc_side := 0 ;
59562: LD_ADDR_OWVAR 20
59566: PUSH
59567: LD_INT 0
59569: ST_TO_ADDR
// uc_nation := 0 ;
59570: LD_ADDR_OWVAR 21
59574: PUSH
59575: LD_INT 0
59577: ST_TO_ADDR
// hc_class := class_tiger ;
59578: LD_ADDR_OWVAR 28
59582: PUSH
59583: LD_INT 14
59585: ST_TO_ADDR
// hc_gallery :=  ;
59586: LD_ADDR_OWVAR 33
59590: PUSH
59591: LD_STRING 
59593: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59594: LD_ADDR_OWVAR 35
59598: PUSH
59599: LD_VAR 0 1
59603: NEG
59604: PPUSH
59605: LD_VAR 0 1
59609: PPUSH
59610: CALL_OW 12
59614: ST_TO_ADDR
// end ;
59615: LD_VAR 0 2
59619: RET
// export function PrepareEnchidna ( ) ; begin
59620: LD_INT 0
59622: PPUSH
// uc_side := 0 ;
59623: LD_ADDR_OWVAR 20
59627: PUSH
59628: LD_INT 0
59630: ST_TO_ADDR
// uc_nation := 0 ;
59631: LD_ADDR_OWVAR 21
59635: PUSH
59636: LD_INT 0
59638: ST_TO_ADDR
// hc_class := class_baggie ;
59639: LD_ADDR_OWVAR 28
59643: PUSH
59644: LD_INT 13
59646: ST_TO_ADDR
// hc_gallery :=  ;
59647: LD_ADDR_OWVAR 33
59651: PUSH
59652: LD_STRING 
59654: ST_TO_ADDR
// end ;
59655: LD_VAR 0 1
59659: RET
// export function PrepareFrog ( ) ; begin
59660: LD_INT 0
59662: PPUSH
// uc_side := 0 ;
59663: LD_ADDR_OWVAR 20
59667: PUSH
59668: LD_INT 0
59670: ST_TO_ADDR
// uc_nation := 0 ;
59671: LD_ADDR_OWVAR 21
59675: PUSH
59676: LD_INT 0
59678: ST_TO_ADDR
// hc_class := class_frog ;
59679: LD_ADDR_OWVAR 28
59683: PUSH
59684: LD_INT 19
59686: ST_TO_ADDR
// hc_gallery :=  ;
59687: LD_ADDR_OWVAR 33
59691: PUSH
59692: LD_STRING 
59694: ST_TO_ADDR
// end ;
59695: LD_VAR 0 1
59699: RET
// export function PrepareFish ( ) ; begin
59700: LD_INT 0
59702: PPUSH
// uc_side := 0 ;
59703: LD_ADDR_OWVAR 20
59707: PUSH
59708: LD_INT 0
59710: ST_TO_ADDR
// uc_nation := 0 ;
59711: LD_ADDR_OWVAR 21
59715: PUSH
59716: LD_INT 0
59718: ST_TO_ADDR
// hc_class := class_fish ;
59719: LD_ADDR_OWVAR 28
59723: PUSH
59724: LD_INT 20
59726: ST_TO_ADDR
// hc_gallery :=  ;
59727: LD_ADDR_OWVAR 33
59731: PUSH
59732: LD_STRING 
59734: ST_TO_ADDR
// end ;
59735: LD_VAR 0 1
59739: RET
// export function PrepareBird ( ) ; begin
59740: LD_INT 0
59742: PPUSH
// uc_side := 0 ;
59743: LD_ADDR_OWVAR 20
59747: PUSH
59748: LD_INT 0
59750: ST_TO_ADDR
// uc_nation := 0 ;
59751: LD_ADDR_OWVAR 21
59755: PUSH
59756: LD_INT 0
59758: ST_TO_ADDR
// hc_class := class_phororhacos ;
59759: LD_ADDR_OWVAR 28
59763: PUSH
59764: LD_INT 18
59766: ST_TO_ADDR
// hc_gallery :=  ;
59767: LD_ADDR_OWVAR 33
59771: PUSH
59772: LD_STRING 
59774: ST_TO_ADDR
// end ;
59775: LD_VAR 0 1
59779: RET
// export function PrepareHorse ( ) ; begin
59780: LD_INT 0
59782: PPUSH
// uc_side := 0 ;
59783: LD_ADDR_OWVAR 20
59787: PUSH
59788: LD_INT 0
59790: ST_TO_ADDR
// uc_nation := 0 ;
59791: LD_ADDR_OWVAR 21
59795: PUSH
59796: LD_INT 0
59798: ST_TO_ADDR
// hc_class := class_horse ;
59799: LD_ADDR_OWVAR 28
59803: PUSH
59804: LD_INT 21
59806: ST_TO_ADDR
// hc_gallery :=  ;
59807: LD_ADDR_OWVAR 33
59811: PUSH
59812: LD_STRING 
59814: ST_TO_ADDR
// end ;
59815: LD_VAR 0 1
59819: RET
// export function PrepareMastodont ( ) ; begin
59820: LD_INT 0
59822: PPUSH
// uc_side := 0 ;
59823: LD_ADDR_OWVAR 20
59827: PUSH
59828: LD_INT 0
59830: ST_TO_ADDR
// uc_nation := 0 ;
59831: LD_ADDR_OWVAR 21
59835: PUSH
59836: LD_INT 0
59838: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59839: LD_ADDR_OWVAR 37
59843: PUSH
59844: LD_INT 31
59846: ST_TO_ADDR
// vc_control := control_rider ;
59847: LD_ADDR_OWVAR 38
59851: PUSH
59852: LD_INT 4
59854: ST_TO_ADDR
// end ;
59855: LD_VAR 0 1
59859: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59860: LD_INT 0
59862: PPUSH
59863: PPUSH
59864: PPUSH
// uc_side = 0 ;
59865: LD_ADDR_OWVAR 20
59869: PUSH
59870: LD_INT 0
59872: ST_TO_ADDR
// uc_nation = 0 ;
59873: LD_ADDR_OWVAR 21
59877: PUSH
59878: LD_INT 0
59880: ST_TO_ADDR
// InitHc_All ( ) ;
59881: CALL_OW 584
// InitVc ;
59885: CALL_OW 20
// if mastodonts then
59889: LD_VAR 0 6
59893: IFFALSE 59960
// for i = 1 to mastodonts do
59895: LD_ADDR_VAR 0 11
59899: PUSH
59900: DOUBLE
59901: LD_INT 1
59903: DEC
59904: ST_TO_ADDR
59905: LD_VAR 0 6
59909: PUSH
59910: FOR_TO
59911: IFFALSE 59958
// begin vc_chassis := 31 ;
59913: LD_ADDR_OWVAR 37
59917: PUSH
59918: LD_INT 31
59920: ST_TO_ADDR
// vc_control := control_rider ;
59921: LD_ADDR_OWVAR 38
59925: PUSH
59926: LD_INT 4
59928: ST_TO_ADDR
// animal := CreateVehicle ;
59929: LD_ADDR_VAR 0 12
59933: PUSH
59934: CALL_OW 45
59938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59939: LD_VAR 0 12
59943: PPUSH
59944: LD_VAR 0 8
59948: PPUSH
59949: LD_INT 0
59951: PPUSH
59952: CALL 62095 0 3
// end ;
59956: GO 59910
59958: POP
59959: POP
// if horses then
59960: LD_VAR 0 5
59964: IFFALSE 60031
// for i = 1 to horses do
59966: LD_ADDR_VAR 0 11
59970: PUSH
59971: DOUBLE
59972: LD_INT 1
59974: DEC
59975: ST_TO_ADDR
59976: LD_VAR 0 5
59980: PUSH
59981: FOR_TO
59982: IFFALSE 60029
// begin hc_class := 21 ;
59984: LD_ADDR_OWVAR 28
59988: PUSH
59989: LD_INT 21
59991: ST_TO_ADDR
// hc_gallery :=  ;
59992: LD_ADDR_OWVAR 33
59996: PUSH
59997: LD_STRING 
59999: ST_TO_ADDR
// animal := CreateHuman ;
60000: LD_ADDR_VAR 0 12
60004: PUSH
60005: CALL_OW 44
60009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60010: LD_VAR 0 12
60014: PPUSH
60015: LD_VAR 0 8
60019: PPUSH
60020: LD_INT 0
60022: PPUSH
60023: CALL 62095 0 3
// end ;
60027: GO 59981
60029: POP
60030: POP
// if birds then
60031: LD_VAR 0 1
60035: IFFALSE 60102
// for i = 1 to birds do
60037: LD_ADDR_VAR 0 11
60041: PUSH
60042: DOUBLE
60043: LD_INT 1
60045: DEC
60046: ST_TO_ADDR
60047: LD_VAR 0 1
60051: PUSH
60052: FOR_TO
60053: IFFALSE 60100
// begin hc_class = 18 ;
60055: LD_ADDR_OWVAR 28
60059: PUSH
60060: LD_INT 18
60062: ST_TO_ADDR
// hc_gallery =  ;
60063: LD_ADDR_OWVAR 33
60067: PUSH
60068: LD_STRING 
60070: ST_TO_ADDR
// animal := CreateHuman ;
60071: LD_ADDR_VAR 0 12
60075: PUSH
60076: CALL_OW 44
60080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60081: LD_VAR 0 12
60085: PPUSH
60086: LD_VAR 0 8
60090: PPUSH
60091: LD_INT 0
60093: PPUSH
60094: CALL 62095 0 3
// end ;
60098: GO 60052
60100: POP
60101: POP
// if tigers then
60102: LD_VAR 0 2
60106: IFFALSE 60190
// for i = 1 to tigers do
60108: LD_ADDR_VAR 0 11
60112: PUSH
60113: DOUBLE
60114: LD_INT 1
60116: DEC
60117: ST_TO_ADDR
60118: LD_VAR 0 2
60122: PUSH
60123: FOR_TO
60124: IFFALSE 60188
// begin hc_class = class_tiger ;
60126: LD_ADDR_OWVAR 28
60130: PUSH
60131: LD_INT 14
60133: ST_TO_ADDR
// hc_gallery =  ;
60134: LD_ADDR_OWVAR 33
60138: PUSH
60139: LD_STRING 
60141: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60142: LD_ADDR_OWVAR 35
60146: PUSH
60147: LD_INT 7
60149: NEG
60150: PPUSH
60151: LD_INT 7
60153: PPUSH
60154: CALL_OW 12
60158: ST_TO_ADDR
// animal := CreateHuman ;
60159: LD_ADDR_VAR 0 12
60163: PUSH
60164: CALL_OW 44
60168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60169: LD_VAR 0 12
60173: PPUSH
60174: LD_VAR 0 8
60178: PPUSH
60179: LD_INT 0
60181: PPUSH
60182: CALL 62095 0 3
// end ;
60186: GO 60123
60188: POP
60189: POP
// if apemans then
60190: LD_VAR 0 3
60194: IFFALSE 60317
// for i = 1 to apemans do
60196: LD_ADDR_VAR 0 11
60200: PUSH
60201: DOUBLE
60202: LD_INT 1
60204: DEC
60205: ST_TO_ADDR
60206: LD_VAR 0 3
60210: PUSH
60211: FOR_TO
60212: IFFALSE 60315
// begin hc_class = class_apeman ;
60214: LD_ADDR_OWVAR 28
60218: PUSH
60219: LD_INT 12
60221: ST_TO_ADDR
// hc_gallery =  ;
60222: LD_ADDR_OWVAR 33
60226: PUSH
60227: LD_STRING 
60229: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60230: LD_ADDR_OWVAR 35
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PPUSH
60239: LD_INT 2
60241: PPUSH
60242: CALL_OW 12
60246: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60247: LD_ADDR_OWVAR 31
60251: PUSH
60252: LD_INT 1
60254: PPUSH
60255: LD_INT 3
60257: PPUSH
60258: CALL_OW 12
60262: PUSH
60263: LD_INT 1
60265: PPUSH
60266: LD_INT 3
60268: PPUSH
60269: CALL_OW 12
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: ST_TO_ADDR
// animal := CreateHuman ;
60286: LD_ADDR_VAR 0 12
60290: PUSH
60291: CALL_OW 44
60295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60296: LD_VAR 0 12
60300: PPUSH
60301: LD_VAR 0 8
60305: PPUSH
60306: LD_INT 0
60308: PPUSH
60309: CALL 62095 0 3
// end ;
60313: GO 60211
60315: POP
60316: POP
// if enchidnas then
60317: LD_VAR 0 4
60321: IFFALSE 60388
// for i = 1 to enchidnas do
60323: LD_ADDR_VAR 0 11
60327: PUSH
60328: DOUBLE
60329: LD_INT 1
60331: DEC
60332: ST_TO_ADDR
60333: LD_VAR 0 4
60337: PUSH
60338: FOR_TO
60339: IFFALSE 60386
// begin hc_class = 13 ;
60341: LD_ADDR_OWVAR 28
60345: PUSH
60346: LD_INT 13
60348: ST_TO_ADDR
// hc_gallery =  ;
60349: LD_ADDR_OWVAR 33
60353: PUSH
60354: LD_STRING 
60356: ST_TO_ADDR
// animal := CreateHuman ;
60357: LD_ADDR_VAR 0 12
60361: PUSH
60362: CALL_OW 44
60366: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60367: LD_VAR 0 12
60371: PPUSH
60372: LD_VAR 0 8
60376: PPUSH
60377: LD_INT 0
60379: PPUSH
60380: CALL 62095 0 3
// end ;
60384: GO 60338
60386: POP
60387: POP
// if fishes then
60388: LD_VAR 0 7
60392: IFFALSE 60459
// for i = 1 to fishes do
60394: LD_ADDR_VAR 0 11
60398: PUSH
60399: DOUBLE
60400: LD_INT 1
60402: DEC
60403: ST_TO_ADDR
60404: LD_VAR 0 7
60408: PUSH
60409: FOR_TO
60410: IFFALSE 60457
// begin hc_class = 20 ;
60412: LD_ADDR_OWVAR 28
60416: PUSH
60417: LD_INT 20
60419: ST_TO_ADDR
// hc_gallery =  ;
60420: LD_ADDR_OWVAR 33
60424: PUSH
60425: LD_STRING 
60427: ST_TO_ADDR
// animal := CreateHuman ;
60428: LD_ADDR_VAR 0 12
60432: PUSH
60433: CALL_OW 44
60437: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60438: LD_VAR 0 12
60442: PPUSH
60443: LD_VAR 0 9
60447: PPUSH
60448: LD_INT 0
60450: PPUSH
60451: CALL 62095 0 3
// end ;
60455: GO 60409
60457: POP
60458: POP
// end ;
60459: LD_VAR 0 10
60463: RET
// export function WantHeal ( sci , unit ) ; begin
60464: LD_INT 0
60466: PPUSH
// if GetTaskList ( sci ) > 0 then
60467: LD_VAR 0 1
60471: PPUSH
60472: CALL_OW 437
60476: PUSH
60477: LD_INT 0
60479: GREATER
60480: IFFALSE 60550
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 437
60491: PUSH
60492: LD_INT 1
60494: ARRAY
60495: PUSH
60496: LD_INT 1
60498: ARRAY
60499: PUSH
60500: LD_STRING l
60502: EQUAL
60503: PUSH
60504: LD_VAR 0 1
60508: PPUSH
60509: CALL_OW 437
60513: PUSH
60514: LD_INT 1
60516: ARRAY
60517: PUSH
60518: LD_INT 4
60520: ARRAY
60521: PUSH
60522: LD_VAR 0 2
60526: EQUAL
60527: AND
60528: IFFALSE 60540
// result := true else
60530: LD_ADDR_VAR 0 3
60534: PUSH
60535: LD_INT 1
60537: ST_TO_ADDR
60538: GO 60548
// result := false ;
60540: LD_ADDR_VAR 0 3
60544: PUSH
60545: LD_INT 0
60547: ST_TO_ADDR
// end else
60548: GO 60558
// result := false ;
60550: LD_ADDR_VAR 0 3
60554: PUSH
60555: LD_INT 0
60557: ST_TO_ADDR
// end ;
60558: LD_VAR 0 3
60562: RET
// export function HealTarget ( sci ) ; begin
60563: LD_INT 0
60565: PPUSH
// if not sci then
60566: LD_VAR 0 1
60570: NOT
60571: IFFALSE 60575
// exit ;
60573: GO 60640
// result := 0 ;
60575: LD_ADDR_VAR 0 2
60579: PUSH
60580: LD_INT 0
60582: ST_TO_ADDR
// if GetTaskList ( sci ) then
60583: LD_VAR 0 1
60587: PPUSH
60588: CALL_OW 437
60592: IFFALSE 60640
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60594: LD_VAR 0 1
60598: PPUSH
60599: CALL_OW 437
60603: PUSH
60604: LD_INT 1
60606: ARRAY
60607: PUSH
60608: LD_INT 1
60610: ARRAY
60611: PUSH
60612: LD_STRING l
60614: EQUAL
60615: IFFALSE 60640
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60617: LD_ADDR_VAR 0 2
60621: PUSH
60622: LD_VAR 0 1
60626: PPUSH
60627: CALL_OW 437
60631: PUSH
60632: LD_INT 1
60634: ARRAY
60635: PUSH
60636: LD_INT 4
60638: ARRAY
60639: ST_TO_ADDR
// end ;
60640: LD_VAR 0 2
60644: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60645: LD_INT 0
60647: PPUSH
60648: PPUSH
60649: PPUSH
60650: PPUSH
// if not base_units then
60651: LD_VAR 0 1
60655: NOT
60656: IFFALSE 60660
// exit ;
60658: GO 60747
// result := false ;
60660: LD_ADDR_VAR 0 2
60664: PUSH
60665: LD_INT 0
60667: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60668: LD_ADDR_VAR 0 5
60672: PUSH
60673: LD_VAR 0 1
60677: PPUSH
60678: LD_INT 21
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PPUSH
60688: CALL_OW 72
60692: ST_TO_ADDR
// if not tmp then
60693: LD_VAR 0 5
60697: NOT
60698: IFFALSE 60702
// exit ;
60700: GO 60747
// for i in tmp do
60702: LD_ADDR_VAR 0 3
60706: PUSH
60707: LD_VAR 0 5
60711: PUSH
60712: FOR_IN
60713: IFFALSE 60745
// begin result := EnemyInRange ( i , 22 ) ;
60715: LD_ADDR_VAR 0 2
60719: PUSH
60720: LD_VAR 0 3
60724: PPUSH
60725: LD_INT 22
60727: PPUSH
60728: CALL 58416 0 2
60732: ST_TO_ADDR
// if result then
60733: LD_VAR 0 2
60737: IFFALSE 60743
// exit ;
60739: POP
60740: POP
60741: GO 60747
// end ;
60743: GO 60712
60745: POP
60746: POP
// end ;
60747: LD_VAR 0 2
60751: RET
// export function FilterByTag ( units , tag ) ; begin
60752: LD_INT 0
60754: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60755: LD_ADDR_VAR 0 3
60759: PUSH
60760: LD_VAR 0 1
60764: PPUSH
60765: LD_INT 120
60767: PUSH
60768: LD_VAR 0 2
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PPUSH
60777: CALL_OW 72
60781: ST_TO_ADDR
// end ;
60782: LD_VAR 0 3
60786: RET
// export function IsDriver ( un ) ; begin
60787: LD_INT 0
60789: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60790: LD_ADDR_VAR 0 2
60794: PUSH
60795: LD_VAR 0 1
60799: PUSH
60800: LD_INT 55
60802: PUSH
60803: EMPTY
60804: LIST
60805: PPUSH
60806: CALL_OW 69
60810: IN
60811: ST_TO_ADDR
// end ;
60812: LD_VAR 0 2
60816: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60817: LD_INT 0
60819: PPUSH
60820: PPUSH
// list := [ ] ;
60821: LD_ADDR_VAR 0 5
60825: PUSH
60826: EMPTY
60827: ST_TO_ADDR
// case d of 0 :
60828: LD_VAR 0 3
60832: PUSH
60833: LD_INT 0
60835: DOUBLE
60836: EQUAL
60837: IFTRUE 60841
60839: GO 60974
60841: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60842: LD_ADDR_VAR 0 5
60846: PUSH
60847: LD_VAR 0 1
60851: PUSH
60852: LD_INT 4
60854: MINUS
60855: PUSH
60856: LD_VAR 0 2
60860: PUSH
60861: LD_INT 4
60863: MINUS
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: LIST
60872: PUSH
60873: LD_VAR 0 1
60877: PUSH
60878: LD_INT 3
60880: MINUS
60881: PUSH
60882: LD_VAR 0 2
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: PUSH
60895: LD_VAR 0 1
60899: PUSH
60900: LD_INT 4
60902: PLUS
60903: PUSH
60904: LD_VAR 0 2
60908: PUSH
60909: LD_INT 4
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: PUSH
60917: LD_VAR 0 1
60921: PUSH
60922: LD_INT 3
60924: PLUS
60925: PUSH
60926: LD_VAR 0 2
60930: PUSH
60931: LD_INT 3
60933: PLUS
60934: PUSH
60935: LD_INT 5
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: PUSH
60943: LD_VAR 0 1
60947: PUSH
60948: LD_VAR 0 2
60952: PUSH
60953: LD_INT 4
60955: PLUS
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: ST_TO_ADDR
// end ; 1 :
60972: GO 61672
60974: LD_INT 1
60976: DOUBLE
60977: EQUAL
60978: IFTRUE 60982
60980: GO 61115
60982: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60983: LD_ADDR_VAR 0 5
60987: PUSH
60988: LD_VAR 0 1
60992: PUSH
60993: LD_VAR 0 2
60997: PUSH
60998: LD_INT 4
61000: MINUS
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: PUSH
61010: LD_VAR 0 1
61014: PUSH
61015: LD_INT 3
61017: MINUS
61018: PUSH
61019: LD_VAR 0 2
61023: PUSH
61024: LD_INT 3
61026: MINUS
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: PUSH
61036: LD_VAR 0 1
61040: PUSH
61041: LD_INT 4
61043: MINUS
61044: PUSH
61045: LD_VAR 0 2
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: LIST
61057: PUSH
61058: LD_VAR 0 1
61062: PUSH
61063: LD_VAR 0 2
61067: PUSH
61068: LD_INT 3
61070: PLUS
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: PUSH
61080: LD_VAR 0 1
61084: PUSH
61085: LD_INT 4
61087: PLUS
61088: PUSH
61089: LD_VAR 0 2
61093: PUSH
61094: LD_INT 4
61096: PLUS
61097: PUSH
61098: LD_INT 5
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: ST_TO_ADDR
// end ; 2 :
61113: GO 61672
61115: LD_INT 2
61117: DOUBLE
61118: EQUAL
61119: IFTRUE 61123
61121: GO 61252
61123: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61124: LD_ADDR_VAR 0 5
61128: PUSH
61129: LD_VAR 0 1
61133: PUSH
61134: LD_VAR 0 2
61138: PUSH
61139: LD_INT 3
61141: MINUS
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: LD_VAR 0 1
61155: PUSH
61156: LD_INT 4
61158: PLUS
61159: PUSH
61160: LD_VAR 0 2
61164: PUSH
61165: LD_INT 4
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: PUSH
61173: LD_VAR 0 1
61177: PUSH
61178: LD_VAR 0 2
61182: PUSH
61183: LD_INT 4
61185: PLUS
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: PUSH
61195: LD_VAR 0 1
61199: PUSH
61200: LD_INT 3
61202: MINUS
61203: PUSH
61204: LD_VAR 0 2
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: PUSH
61217: LD_VAR 0 1
61221: PUSH
61222: LD_INT 4
61224: MINUS
61225: PUSH
61226: LD_VAR 0 2
61230: PUSH
61231: LD_INT 4
61233: MINUS
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: ST_TO_ADDR
// end ; 3 :
61250: GO 61672
61252: LD_INT 3
61254: DOUBLE
61255: EQUAL
61256: IFTRUE 61260
61258: GO 61393
61260: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61261: LD_ADDR_VAR 0 5
61265: PUSH
61266: LD_VAR 0 1
61270: PUSH
61271: LD_INT 3
61273: PLUS
61274: PUSH
61275: LD_VAR 0 2
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: PUSH
61288: LD_VAR 0 1
61292: PUSH
61293: LD_INT 4
61295: PLUS
61296: PUSH
61297: LD_VAR 0 2
61301: PUSH
61302: LD_INT 4
61304: PLUS
61305: PUSH
61306: LD_INT 5
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: LIST
61313: PUSH
61314: LD_VAR 0 1
61318: PUSH
61319: LD_INT 4
61321: MINUS
61322: PUSH
61323: LD_VAR 0 2
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: PUSH
61336: LD_VAR 0 1
61340: PUSH
61341: LD_VAR 0 2
61345: PUSH
61346: LD_INT 4
61348: MINUS
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: PUSH
61358: LD_VAR 0 1
61362: PUSH
61363: LD_INT 3
61365: MINUS
61366: PUSH
61367: LD_VAR 0 2
61371: PUSH
61372: LD_INT 3
61374: MINUS
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: LIST
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// end ; 4 :
61391: GO 61672
61393: LD_INT 4
61395: DOUBLE
61396: EQUAL
61397: IFTRUE 61401
61399: GO 61534
61401: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61402: LD_ADDR_VAR 0 5
61406: PUSH
61407: LD_VAR 0 1
61411: PUSH
61412: LD_VAR 0 2
61416: PUSH
61417: LD_INT 4
61419: PLUS
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: PUSH
61429: LD_VAR 0 1
61433: PUSH
61434: LD_INT 3
61436: PLUS
61437: PUSH
61438: LD_VAR 0 2
61442: PUSH
61443: LD_INT 3
61445: PLUS
61446: PUSH
61447: LD_INT 5
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: PUSH
61455: LD_VAR 0 1
61459: PUSH
61460: LD_INT 4
61462: PLUS
61463: PUSH
61464: LD_VAR 0 2
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: PUSH
61477: LD_VAR 0 1
61481: PUSH
61482: LD_VAR 0 2
61486: PUSH
61487: LD_INT 3
61489: MINUS
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: PUSH
61499: LD_VAR 0 1
61503: PUSH
61504: LD_INT 4
61506: MINUS
61507: PUSH
61508: LD_VAR 0 2
61512: PUSH
61513: LD_INT 4
61515: MINUS
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: LIST
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: ST_TO_ADDR
// end ; 5 :
61532: GO 61672
61534: LD_INT 5
61536: DOUBLE
61537: EQUAL
61538: IFTRUE 61542
61540: GO 61671
61542: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61543: LD_ADDR_VAR 0 5
61547: PUSH
61548: LD_VAR 0 1
61552: PUSH
61553: LD_INT 4
61555: MINUS
61556: PUSH
61557: LD_VAR 0 2
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: PUSH
61570: LD_VAR 0 1
61574: PUSH
61575: LD_VAR 0 2
61579: PUSH
61580: LD_INT 4
61582: MINUS
61583: PUSH
61584: LD_INT 3
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: LIST
61591: PUSH
61592: LD_VAR 0 1
61596: PUSH
61597: LD_INT 4
61599: PLUS
61600: PUSH
61601: LD_VAR 0 2
61605: PUSH
61606: LD_INT 4
61608: PLUS
61609: PUSH
61610: LD_INT 5
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: LIST
61617: PUSH
61618: LD_VAR 0 1
61622: PUSH
61623: LD_INT 3
61625: PLUS
61626: PUSH
61627: LD_VAR 0 2
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: PUSH
61640: LD_VAR 0 1
61644: PUSH
61645: LD_VAR 0 2
61649: PUSH
61650: LD_INT 3
61652: PLUS
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: LIST
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: ST_TO_ADDR
// end ; end ;
61669: GO 61672
61671: POP
// result := list ;
61672: LD_ADDR_VAR 0 4
61676: PUSH
61677: LD_VAR 0 5
61681: ST_TO_ADDR
// end ;
61682: LD_VAR 0 4
61686: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61687: LD_INT 0
61689: PPUSH
61690: PPUSH
61691: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61692: LD_VAR 0 1
61696: NOT
61697: PUSH
61698: LD_VAR 0 2
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: LD_INT 3
61711: PUSH
61712: LD_INT 4
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: IN
61721: NOT
61722: OR
61723: IFFALSE 61727
// exit ;
61725: GO 61819
// tmp := [ ] ;
61727: LD_ADDR_VAR 0 5
61731: PUSH
61732: EMPTY
61733: ST_TO_ADDR
// for i in units do
61734: LD_ADDR_VAR 0 4
61738: PUSH
61739: LD_VAR 0 1
61743: PUSH
61744: FOR_IN
61745: IFFALSE 61788
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61747: LD_ADDR_VAR 0 5
61751: PUSH
61752: LD_VAR 0 5
61756: PPUSH
61757: LD_VAR 0 5
61761: PUSH
61762: LD_INT 1
61764: PLUS
61765: PPUSH
61766: LD_VAR 0 4
61770: PPUSH
61771: LD_VAR 0 2
61775: PPUSH
61776: CALL_OW 259
61780: PPUSH
61781: CALL_OW 2
61785: ST_TO_ADDR
61786: GO 61744
61788: POP
61789: POP
// if not tmp then
61790: LD_VAR 0 5
61794: NOT
61795: IFFALSE 61799
// exit ;
61797: GO 61819
// result := SortListByListDesc ( units , tmp ) ;
61799: LD_ADDR_VAR 0 3
61803: PUSH
61804: LD_VAR 0 1
61808: PPUSH
61809: LD_VAR 0 5
61813: PPUSH
61814: CALL_OW 77
61818: ST_TO_ADDR
// end ;
61819: LD_VAR 0 3
61823: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61824: LD_INT 0
61826: PPUSH
61827: PPUSH
61828: PPUSH
// result := false ;
61829: LD_ADDR_VAR 0 3
61833: PUSH
61834: LD_INT 0
61836: ST_TO_ADDR
// x := GetX ( building ) ;
61837: LD_ADDR_VAR 0 4
61841: PUSH
61842: LD_VAR 0 2
61846: PPUSH
61847: CALL_OW 250
61851: ST_TO_ADDR
// y := GetY ( building ) ;
61852: LD_ADDR_VAR 0 5
61856: PUSH
61857: LD_VAR 0 2
61861: PPUSH
61862: CALL_OW 251
61866: ST_TO_ADDR
// if not building or not x or not y then
61867: LD_VAR 0 2
61871: NOT
61872: PUSH
61873: LD_VAR 0 4
61877: NOT
61878: OR
61879: PUSH
61880: LD_VAR 0 5
61884: NOT
61885: OR
61886: IFFALSE 61890
// exit ;
61888: GO 61982
// if GetTaskList ( unit ) then
61890: LD_VAR 0 1
61894: PPUSH
61895: CALL_OW 437
61899: IFFALSE 61982
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61901: LD_STRING e
61903: PUSH
61904: LD_VAR 0 1
61908: PPUSH
61909: CALL_OW 437
61913: PUSH
61914: LD_INT 1
61916: ARRAY
61917: PUSH
61918: LD_INT 1
61920: ARRAY
61921: EQUAL
61922: PUSH
61923: LD_VAR 0 4
61927: PUSH
61928: LD_VAR 0 1
61932: PPUSH
61933: CALL_OW 437
61937: PUSH
61938: LD_INT 1
61940: ARRAY
61941: PUSH
61942: LD_INT 2
61944: ARRAY
61945: EQUAL
61946: AND
61947: PUSH
61948: LD_VAR 0 5
61952: PUSH
61953: LD_VAR 0 1
61957: PPUSH
61958: CALL_OW 437
61962: PUSH
61963: LD_INT 1
61965: ARRAY
61966: PUSH
61967: LD_INT 3
61969: ARRAY
61970: EQUAL
61971: AND
61972: IFFALSE 61982
// result := true end ;
61974: LD_ADDR_VAR 0 3
61978: PUSH
61979: LD_INT 1
61981: ST_TO_ADDR
// end ;
61982: LD_VAR 0 3
61986: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61987: LD_INT 0
61989: PPUSH
// result := false ;
61990: LD_ADDR_VAR 0 4
61994: PUSH
61995: LD_INT 0
61997: ST_TO_ADDR
// if GetTaskList ( unit ) then
61998: LD_VAR 0 1
62002: PPUSH
62003: CALL_OW 437
62007: IFFALSE 62090
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62009: LD_STRING M
62011: PUSH
62012: LD_VAR 0 1
62016: PPUSH
62017: CALL_OW 437
62021: PUSH
62022: LD_INT 1
62024: ARRAY
62025: PUSH
62026: LD_INT 1
62028: ARRAY
62029: EQUAL
62030: PUSH
62031: LD_VAR 0 2
62035: PUSH
62036: LD_VAR 0 1
62040: PPUSH
62041: CALL_OW 437
62045: PUSH
62046: LD_INT 1
62048: ARRAY
62049: PUSH
62050: LD_INT 2
62052: ARRAY
62053: EQUAL
62054: AND
62055: PUSH
62056: LD_VAR 0 3
62060: PUSH
62061: LD_VAR 0 1
62065: PPUSH
62066: CALL_OW 437
62070: PUSH
62071: LD_INT 1
62073: ARRAY
62074: PUSH
62075: LD_INT 3
62077: ARRAY
62078: EQUAL
62079: AND
62080: IFFALSE 62090
// result := true ;
62082: LD_ADDR_VAR 0 4
62086: PUSH
62087: LD_INT 1
62089: ST_TO_ADDR
// end ; end ;
62090: LD_VAR 0 4
62094: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62095: LD_INT 0
62097: PPUSH
62098: PPUSH
62099: PPUSH
62100: PPUSH
// if not unit or not area then
62101: LD_VAR 0 1
62105: NOT
62106: PUSH
62107: LD_VAR 0 2
62111: NOT
62112: OR
62113: IFFALSE 62117
// exit ;
62115: GO 62281
// tmp := AreaToList ( area , i ) ;
62117: LD_ADDR_VAR 0 6
62121: PUSH
62122: LD_VAR 0 2
62126: PPUSH
62127: LD_VAR 0 5
62131: PPUSH
62132: CALL_OW 517
62136: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62137: LD_ADDR_VAR 0 5
62141: PUSH
62142: DOUBLE
62143: LD_INT 1
62145: DEC
62146: ST_TO_ADDR
62147: LD_VAR 0 6
62151: PUSH
62152: LD_INT 1
62154: ARRAY
62155: PUSH
62156: FOR_TO
62157: IFFALSE 62279
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62159: LD_ADDR_VAR 0 7
62163: PUSH
62164: LD_VAR 0 6
62168: PUSH
62169: LD_INT 1
62171: ARRAY
62172: PUSH
62173: LD_VAR 0 5
62177: ARRAY
62178: PUSH
62179: LD_VAR 0 6
62183: PUSH
62184: LD_INT 2
62186: ARRAY
62187: PUSH
62188: LD_VAR 0 5
62192: ARRAY
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62198: LD_VAR 0 7
62202: PUSH
62203: LD_INT 1
62205: ARRAY
62206: PPUSH
62207: LD_VAR 0 7
62211: PUSH
62212: LD_INT 2
62214: ARRAY
62215: PPUSH
62216: CALL_OW 428
62220: PUSH
62221: LD_INT 0
62223: EQUAL
62224: IFFALSE 62277
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62226: LD_VAR 0 1
62230: PPUSH
62231: LD_VAR 0 7
62235: PUSH
62236: LD_INT 1
62238: ARRAY
62239: PPUSH
62240: LD_VAR 0 7
62244: PUSH
62245: LD_INT 2
62247: ARRAY
62248: PPUSH
62249: LD_VAR 0 3
62253: PPUSH
62254: CALL_OW 48
// result := IsPlaced ( unit ) ;
62258: LD_ADDR_VAR 0 4
62262: PUSH
62263: LD_VAR 0 1
62267: PPUSH
62268: CALL_OW 305
62272: ST_TO_ADDR
// exit ;
62273: POP
62274: POP
62275: GO 62281
// end ; end ;
62277: GO 62156
62279: POP
62280: POP
// end ;
62281: LD_VAR 0 4
62285: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62286: LD_INT 0
62288: PPUSH
62289: PPUSH
62290: PPUSH
// if not side or side > 8 then
62291: LD_VAR 0 1
62295: NOT
62296: PUSH
62297: LD_VAR 0 1
62301: PUSH
62302: LD_INT 8
62304: GREATER
62305: OR
62306: IFFALSE 62310
// exit ;
62308: GO 62497
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62310: LD_ADDR_VAR 0 4
62314: PUSH
62315: LD_INT 22
62317: PUSH
62318: LD_VAR 0 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 21
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PPUSH
62341: CALL_OW 69
62345: ST_TO_ADDR
// if not tmp then
62346: LD_VAR 0 4
62350: NOT
62351: IFFALSE 62355
// exit ;
62353: GO 62497
// enable_addtolog := true ;
62355: LD_ADDR_OWVAR 81
62359: PUSH
62360: LD_INT 1
62362: ST_TO_ADDR
// AddToLog ( [ ) ;
62363: LD_STRING [
62365: PPUSH
62366: CALL_OW 561
// for i in tmp do
62370: LD_ADDR_VAR 0 3
62374: PUSH
62375: LD_VAR 0 4
62379: PUSH
62380: FOR_IN
62381: IFFALSE 62488
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62383: LD_STRING [
62385: PUSH
62386: LD_VAR 0 3
62390: PPUSH
62391: CALL_OW 266
62395: STR
62396: PUSH
62397: LD_STRING , 
62399: STR
62400: PUSH
62401: LD_VAR 0 3
62405: PPUSH
62406: CALL_OW 250
62410: STR
62411: PUSH
62412: LD_STRING , 
62414: STR
62415: PUSH
62416: LD_VAR 0 3
62420: PPUSH
62421: CALL_OW 251
62425: STR
62426: PUSH
62427: LD_STRING , 
62429: STR
62430: PUSH
62431: LD_VAR 0 3
62435: PPUSH
62436: CALL_OW 254
62440: STR
62441: PUSH
62442: LD_STRING , 
62444: STR
62445: PUSH
62446: LD_VAR 0 3
62450: PPUSH
62451: LD_INT 1
62453: PPUSH
62454: CALL_OW 268
62458: STR
62459: PUSH
62460: LD_STRING , 
62462: STR
62463: PUSH
62464: LD_VAR 0 3
62468: PPUSH
62469: LD_INT 2
62471: PPUSH
62472: CALL_OW 268
62476: STR
62477: PUSH
62478: LD_STRING ],
62480: STR
62481: PPUSH
62482: CALL_OW 561
// end ;
62486: GO 62380
62488: POP
62489: POP
// AddToLog ( ]; ) ;
62490: LD_STRING ];
62492: PPUSH
62493: CALL_OW 561
// end ;
62497: LD_VAR 0 2
62501: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62502: LD_INT 0
62504: PPUSH
62505: PPUSH
62506: PPUSH
62507: PPUSH
62508: PPUSH
// if not area or not rate or not max then
62509: LD_VAR 0 1
62513: NOT
62514: PUSH
62515: LD_VAR 0 2
62519: NOT
62520: OR
62521: PUSH
62522: LD_VAR 0 4
62526: NOT
62527: OR
62528: IFFALSE 62532
// exit ;
62530: GO 62721
// while 1 do
62532: LD_INT 1
62534: IFFALSE 62721
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62536: LD_ADDR_VAR 0 9
62540: PUSH
62541: LD_VAR 0 1
62545: PPUSH
62546: LD_INT 1
62548: PPUSH
62549: CALL_OW 287
62553: PUSH
62554: LD_INT 10
62556: MUL
62557: ST_TO_ADDR
// r := rate / 10 ;
62558: LD_ADDR_VAR 0 7
62562: PUSH
62563: LD_VAR 0 2
62567: PUSH
62568: LD_INT 10
62570: DIVREAL
62571: ST_TO_ADDR
// time := 1 1$00 ;
62572: LD_ADDR_VAR 0 8
62576: PUSH
62577: LD_INT 2100
62579: ST_TO_ADDR
// if amount < min then
62580: LD_VAR 0 9
62584: PUSH
62585: LD_VAR 0 3
62589: LESS
62590: IFFALSE 62608
// r := r * 2 else
62592: LD_ADDR_VAR 0 7
62596: PUSH
62597: LD_VAR 0 7
62601: PUSH
62602: LD_INT 2
62604: MUL
62605: ST_TO_ADDR
62606: GO 62634
// if amount > max then
62608: LD_VAR 0 9
62612: PUSH
62613: LD_VAR 0 4
62617: GREATER
62618: IFFALSE 62634
// r := r / 2 ;
62620: LD_ADDR_VAR 0 7
62624: PUSH
62625: LD_VAR 0 7
62629: PUSH
62630: LD_INT 2
62632: DIVREAL
62633: ST_TO_ADDR
// time := time / r ;
62634: LD_ADDR_VAR 0 8
62638: PUSH
62639: LD_VAR 0 8
62643: PUSH
62644: LD_VAR 0 7
62648: DIVREAL
62649: ST_TO_ADDR
// if time < 0 then
62650: LD_VAR 0 8
62654: PUSH
62655: LD_INT 0
62657: LESS
62658: IFFALSE 62675
// time := time * - 1 ;
62660: LD_ADDR_VAR 0 8
62664: PUSH
62665: LD_VAR 0 8
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: MUL
62674: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62675: LD_VAR 0 8
62679: PUSH
62680: LD_INT 35
62682: PPUSH
62683: LD_INT 875
62685: PPUSH
62686: CALL_OW 12
62690: PLUS
62691: PPUSH
62692: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62696: LD_INT 1
62698: PPUSH
62699: LD_INT 5
62701: PPUSH
62702: CALL_OW 12
62706: PPUSH
62707: LD_VAR 0 1
62711: PPUSH
62712: LD_INT 1
62714: PPUSH
62715: CALL_OW 55
// end ;
62719: GO 62532
// end ;
62721: LD_VAR 0 5
62725: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62726: LD_INT 0
62728: PPUSH
62729: PPUSH
62730: PPUSH
62731: PPUSH
62732: PPUSH
62733: PPUSH
62734: PPUSH
62735: PPUSH
// if not turrets or not factories then
62736: LD_VAR 0 1
62740: NOT
62741: PUSH
62742: LD_VAR 0 2
62746: NOT
62747: OR
62748: IFFALSE 62752
// exit ;
62750: GO 63059
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62752: LD_ADDR_VAR 0 10
62756: PUSH
62757: LD_INT 5
62759: PUSH
62760: LD_INT 6
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: PUSH
62770: LD_INT 4
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: LD_INT 5
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 24
62794: PUSH
62795: LD_INT 25
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 23
62804: PUSH
62805: LD_INT 27
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 42
62818: PUSH
62819: LD_INT 43
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 44
62828: PUSH
62829: LD_INT 46
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 45
62838: PUSH
62839: LD_INT 47
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: ST_TO_ADDR
// result := [ ] ;
62856: LD_ADDR_VAR 0 3
62860: PUSH
62861: EMPTY
62862: ST_TO_ADDR
// for i in turrets do
62863: LD_ADDR_VAR 0 4
62867: PUSH
62868: LD_VAR 0 1
62872: PUSH
62873: FOR_IN
62874: IFFALSE 63057
// begin nat := GetNation ( i ) ;
62876: LD_ADDR_VAR 0 7
62880: PUSH
62881: LD_VAR 0 4
62885: PPUSH
62886: CALL_OW 248
62890: ST_TO_ADDR
// weapon := 0 ;
62891: LD_ADDR_VAR 0 8
62895: PUSH
62896: LD_INT 0
62898: ST_TO_ADDR
// if not nat then
62899: LD_VAR 0 7
62903: NOT
62904: IFFALSE 62908
// continue ;
62906: GO 62873
// for j in list [ nat ] do
62908: LD_ADDR_VAR 0 5
62912: PUSH
62913: LD_VAR 0 10
62917: PUSH
62918: LD_VAR 0 7
62922: ARRAY
62923: PUSH
62924: FOR_IN
62925: IFFALSE 62966
// if GetBWeapon ( i ) = j [ 1 ] then
62927: LD_VAR 0 4
62931: PPUSH
62932: CALL_OW 269
62936: PUSH
62937: LD_VAR 0 5
62941: PUSH
62942: LD_INT 1
62944: ARRAY
62945: EQUAL
62946: IFFALSE 62964
// begin weapon := j [ 2 ] ;
62948: LD_ADDR_VAR 0 8
62952: PUSH
62953: LD_VAR 0 5
62957: PUSH
62958: LD_INT 2
62960: ARRAY
62961: ST_TO_ADDR
// break ;
62962: GO 62966
// end ;
62964: GO 62924
62966: POP
62967: POP
// if not weapon then
62968: LD_VAR 0 8
62972: NOT
62973: IFFALSE 62977
// continue ;
62975: GO 62873
// for k in factories do
62977: LD_ADDR_VAR 0 6
62981: PUSH
62982: LD_VAR 0 2
62986: PUSH
62987: FOR_IN
62988: IFFALSE 63053
// begin weapons := AvailableWeaponList ( k ) ;
62990: LD_ADDR_VAR 0 9
62994: PUSH
62995: LD_VAR 0 6
62999: PPUSH
63000: CALL_OW 478
63004: ST_TO_ADDR
// if not weapons then
63005: LD_VAR 0 9
63009: NOT
63010: IFFALSE 63014
// continue ;
63012: GO 62987
// if weapon in weapons then
63014: LD_VAR 0 8
63018: PUSH
63019: LD_VAR 0 9
63023: IN
63024: IFFALSE 63051
// begin result := [ i , weapon ] ;
63026: LD_ADDR_VAR 0 3
63030: PUSH
63031: LD_VAR 0 4
63035: PUSH
63036: LD_VAR 0 8
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// exit ;
63045: POP
63046: POP
63047: POP
63048: POP
63049: GO 63059
// end ; end ;
63051: GO 62987
63053: POP
63054: POP
// end ;
63055: GO 62873
63057: POP
63058: POP
// end ;
63059: LD_VAR 0 3
63063: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63064: LD_INT 0
63066: PPUSH
// if not side or side > 8 then
63067: LD_VAR 0 3
63071: NOT
63072: PUSH
63073: LD_VAR 0 3
63077: PUSH
63078: LD_INT 8
63080: GREATER
63081: OR
63082: IFFALSE 63086
// exit ;
63084: GO 63145
// if not range then
63086: LD_VAR 0 4
63090: NOT
63091: IFFALSE 63102
// range := - 12 ;
63093: LD_ADDR_VAR 0 4
63097: PUSH
63098: LD_INT 12
63100: NEG
63101: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63102: LD_VAR 0 1
63106: PPUSH
63107: LD_VAR 0 2
63111: PPUSH
63112: LD_VAR 0 3
63116: PPUSH
63117: LD_VAR 0 4
63121: PPUSH
63122: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63126: LD_VAR 0 1
63130: PPUSH
63131: LD_VAR 0 2
63135: PPUSH
63136: LD_VAR 0 3
63140: PPUSH
63141: CALL_OW 331
// end ;
63145: LD_VAR 0 5
63149: RET
// export function Video ( mode ) ; begin
63150: LD_INT 0
63152: PPUSH
// ingame_video = mode ;
63153: LD_ADDR_OWVAR 52
63157: PUSH
63158: LD_VAR 0 1
63162: ST_TO_ADDR
// interface_hidden = mode ;
63163: LD_ADDR_OWVAR 54
63167: PUSH
63168: LD_VAR 0 1
63172: ST_TO_ADDR
// end ;
63173: LD_VAR 0 2
63177: RET
// export function Join ( array , element ) ; begin
63178: LD_INT 0
63180: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63181: LD_ADDR_VAR 0 3
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: LD_VAR 0 1
63195: PUSH
63196: LD_INT 1
63198: PLUS
63199: PPUSH
63200: LD_VAR 0 2
63204: PPUSH
63205: CALL_OW 1
63209: ST_TO_ADDR
// end ;
63210: LD_VAR 0 3
63214: RET
// export function JoinUnion ( array , element ) ; begin
63215: LD_INT 0
63217: PPUSH
// result := array union element ;
63218: LD_ADDR_VAR 0 3
63222: PUSH
63223: LD_VAR 0 1
63227: PUSH
63228: LD_VAR 0 2
63232: UNION
63233: ST_TO_ADDR
// end ;
63234: LD_VAR 0 3
63238: RET
// export function GetBehemoths ( side ) ; begin
63239: LD_INT 0
63241: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63242: LD_ADDR_VAR 0 2
63246: PUSH
63247: LD_INT 22
63249: PUSH
63250: LD_VAR 0 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 31
63261: PUSH
63262: LD_INT 25
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PPUSH
63273: CALL_OW 69
63277: ST_TO_ADDR
// end ;
63278: LD_VAR 0 2
63282: RET
// export function Shuffle ( array ) ; var i , index ; begin
63283: LD_INT 0
63285: PPUSH
63286: PPUSH
63287: PPUSH
// result := [ ] ;
63288: LD_ADDR_VAR 0 2
63292: PUSH
63293: EMPTY
63294: ST_TO_ADDR
// if not array then
63295: LD_VAR 0 1
63299: NOT
63300: IFFALSE 63304
// exit ;
63302: GO 63403
// Randomize ;
63304: CALL_OW 10
// for i = array downto 1 do
63308: LD_ADDR_VAR 0 3
63312: PUSH
63313: DOUBLE
63314: LD_VAR 0 1
63318: INC
63319: ST_TO_ADDR
63320: LD_INT 1
63322: PUSH
63323: FOR_DOWNTO
63324: IFFALSE 63401
// begin index := rand ( 1 , array ) ;
63326: LD_ADDR_VAR 0 4
63330: PUSH
63331: LD_INT 1
63333: PPUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: CALL_OW 12
63343: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63344: LD_ADDR_VAR 0 2
63348: PUSH
63349: LD_VAR 0 2
63353: PPUSH
63354: LD_VAR 0 2
63358: PUSH
63359: LD_INT 1
63361: PLUS
63362: PPUSH
63363: LD_VAR 0 1
63367: PUSH
63368: LD_VAR 0 4
63372: ARRAY
63373: PPUSH
63374: CALL_OW 2
63378: ST_TO_ADDR
// array := Delete ( array , index ) ;
63379: LD_ADDR_VAR 0 1
63383: PUSH
63384: LD_VAR 0 1
63388: PPUSH
63389: LD_VAR 0 4
63393: PPUSH
63394: CALL_OW 3
63398: ST_TO_ADDR
// end ;
63399: GO 63323
63401: POP
63402: POP
// end ;
63403: LD_VAR 0 2
63407: RET
// export function GetBaseMaterials ( base ) ; begin
63408: LD_INT 0
63410: PPUSH
// result := [ 0 , 0 , 0 ] ;
63411: LD_ADDR_VAR 0 2
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: LD_INT 0
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: ST_TO_ADDR
// if not base then
63430: LD_VAR 0 1
63434: NOT
63435: IFFALSE 63439
// exit ;
63437: GO 63488
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63439: LD_ADDR_VAR 0 2
63443: PUSH
63444: LD_VAR 0 1
63448: PPUSH
63449: LD_INT 1
63451: PPUSH
63452: CALL_OW 275
63456: PUSH
63457: LD_VAR 0 1
63461: PPUSH
63462: LD_INT 2
63464: PPUSH
63465: CALL_OW 275
63469: PUSH
63470: LD_VAR 0 1
63474: PPUSH
63475: LD_INT 3
63477: PPUSH
63478: CALL_OW 275
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: ST_TO_ADDR
// end ;
63488: LD_VAR 0 2
63492: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63493: LD_INT 0
63495: PPUSH
63496: PPUSH
// result := array ;
63497: LD_ADDR_VAR 0 3
63501: PUSH
63502: LD_VAR 0 1
63506: ST_TO_ADDR
// if size >= result then
63507: LD_VAR 0 2
63511: PUSH
63512: LD_VAR 0 3
63516: GREATEREQUAL
63517: IFFALSE 63521
// exit ;
63519: GO 63571
// if size then
63521: LD_VAR 0 2
63525: IFFALSE 63571
// for i := array downto size do
63527: LD_ADDR_VAR 0 4
63531: PUSH
63532: DOUBLE
63533: LD_VAR 0 1
63537: INC
63538: ST_TO_ADDR
63539: LD_VAR 0 2
63543: PUSH
63544: FOR_DOWNTO
63545: IFFALSE 63569
// result := Delete ( result , result ) ;
63547: LD_ADDR_VAR 0 3
63551: PUSH
63552: LD_VAR 0 3
63556: PPUSH
63557: LD_VAR 0 3
63561: PPUSH
63562: CALL_OW 3
63566: ST_TO_ADDR
63567: GO 63544
63569: POP
63570: POP
// end ;
63571: LD_VAR 0 3
63575: RET
// export function ComExit ( unit ) ; var tmp ; begin
63576: LD_INT 0
63578: PPUSH
63579: PPUSH
// if not IsInUnit ( unit ) then
63580: LD_VAR 0 1
63584: PPUSH
63585: CALL_OW 310
63589: NOT
63590: IFFALSE 63594
// exit ;
63592: GO 63654
// tmp := IsInUnit ( unit ) ;
63594: LD_ADDR_VAR 0 3
63598: PUSH
63599: LD_VAR 0 1
63603: PPUSH
63604: CALL_OW 310
63608: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63609: LD_VAR 0 3
63613: PPUSH
63614: CALL_OW 247
63618: PUSH
63619: LD_INT 2
63621: EQUAL
63622: IFFALSE 63635
// ComExitVehicle ( unit ) else
63624: LD_VAR 0 1
63628: PPUSH
63629: CALL_OW 121
63633: GO 63644
// ComExitBuilding ( unit ) ;
63635: LD_VAR 0 1
63639: PPUSH
63640: CALL_OW 122
// result := tmp ;
63644: LD_ADDR_VAR 0 2
63648: PUSH
63649: LD_VAR 0 3
63653: ST_TO_ADDR
// end ;
63654: LD_VAR 0 2
63658: RET
// export function ComExitAll ( units ) ; var i ; begin
63659: LD_INT 0
63661: PPUSH
63662: PPUSH
// if not units then
63663: LD_VAR 0 1
63667: NOT
63668: IFFALSE 63672
// exit ;
63670: GO 63698
// for i in units do
63672: LD_ADDR_VAR 0 3
63676: PUSH
63677: LD_VAR 0 1
63681: PUSH
63682: FOR_IN
63683: IFFALSE 63696
// ComExit ( i ) ;
63685: LD_VAR 0 3
63689: PPUSH
63690: CALL 63576 0 1
63694: GO 63682
63696: POP
63697: POP
// end ;
63698: LD_VAR 0 2
63702: RET
// export function ResetHc ; begin
63703: LD_INT 0
63705: PPUSH
// InitHc ;
63706: CALL_OW 19
// hc_importance := 0 ;
63710: LD_ADDR_OWVAR 32
63714: PUSH
63715: LD_INT 0
63717: ST_TO_ADDR
// end ;
63718: LD_VAR 0 1
63722: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63723: LD_INT 0
63725: PPUSH
63726: PPUSH
63727: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63728: LD_ADDR_VAR 0 6
63732: PUSH
63733: LD_VAR 0 1
63737: PUSH
63738: LD_VAR 0 3
63742: PLUS
63743: PUSH
63744: LD_INT 2
63746: DIV
63747: ST_TO_ADDR
// if _x < 0 then
63748: LD_VAR 0 6
63752: PUSH
63753: LD_INT 0
63755: LESS
63756: IFFALSE 63773
// _x := _x * - 1 ;
63758: LD_ADDR_VAR 0 6
63762: PUSH
63763: LD_VAR 0 6
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: MUL
63772: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63773: LD_ADDR_VAR 0 7
63777: PUSH
63778: LD_VAR 0 2
63782: PUSH
63783: LD_VAR 0 4
63787: PLUS
63788: PUSH
63789: LD_INT 2
63791: DIV
63792: ST_TO_ADDR
// if _y < 0 then
63793: LD_VAR 0 7
63797: PUSH
63798: LD_INT 0
63800: LESS
63801: IFFALSE 63818
// _y := _y * - 1 ;
63803: LD_ADDR_VAR 0 7
63807: PUSH
63808: LD_VAR 0 7
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: MUL
63817: ST_TO_ADDR
// result := [ _x , _y ] ;
63818: LD_ADDR_VAR 0 5
63822: PUSH
63823: LD_VAR 0 6
63827: PUSH
63828: LD_VAR 0 7
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: ST_TO_ADDR
// end ;
63837: LD_VAR 0 5
63841: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63842: LD_INT 0
63844: PPUSH
63845: PPUSH
63846: PPUSH
63847: PPUSH
// task := GetTaskList ( unit ) ;
63848: LD_ADDR_VAR 0 7
63852: PUSH
63853: LD_VAR 0 1
63857: PPUSH
63858: CALL_OW 437
63862: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63863: LD_VAR 0 7
63867: NOT
63868: PUSH
63869: LD_VAR 0 1
63873: PPUSH
63874: LD_VAR 0 2
63878: PPUSH
63879: CALL_OW 308
63883: NOT
63884: AND
63885: IFFALSE 63889
// exit ;
63887: GO 64007
// if IsInArea ( unit , area ) then
63889: LD_VAR 0 1
63893: PPUSH
63894: LD_VAR 0 2
63898: PPUSH
63899: CALL_OW 308
63903: IFFALSE 63921
// begin ComMoveToArea ( unit , goAway ) ;
63905: LD_VAR 0 1
63909: PPUSH
63910: LD_VAR 0 3
63914: PPUSH
63915: CALL_OW 113
// exit ;
63919: GO 64007
// end ; if task [ 1 ] [ 1 ] <> M then
63921: LD_VAR 0 7
63925: PUSH
63926: LD_INT 1
63928: ARRAY
63929: PUSH
63930: LD_INT 1
63932: ARRAY
63933: PUSH
63934: LD_STRING M
63936: NONEQUAL
63937: IFFALSE 63941
// exit ;
63939: GO 64007
// x := task [ 1 ] [ 2 ] ;
63941: LD_ADDR_VAR 0 5
63945: PUSH
63946: LD_VAR 0 7
63950: PUSH
63951: LD_INT 1
63953: ARRAY
63954: PUSH
63955: LD_INT 2
63957: ARRAY
63958: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63959: LD_ADDR_VAR 0 6
63963: PUSH
63964: LD_VAR 0 7
63968: PUSH
63969: LD_INT 1
63971: ARRAY
63972: PUSH
63973: LD_INT 3
63975: ARRAY
63976: ST_TO_ADDR
// if InArea ( x , y , area ) then
63977: LD_VAR 0 5
63981: PPUSH
63982: LD_VAR 0 6
63986: PPUSH
63987: LD_VAR 0 2
63991: PPUSH
63992: CALL_OW 309
63996: IFFALSE 64007
// ComStop ( unit ) ;
63998: LD_VAR 0 1
64002: PPUSH
64003: CALL_OW 141
// end ;
64007: LD_VAR 0 4
64011: RET
// export function Abs ( value ) ; begin
64012: LD_INT 0
64014: PPUSH
// result := value ;
64015: LD_ADDR_VAR 0 2
64019: PUSH
64020: LD_VAR 0 1
64024: ST_TO_ADDR
// if value < 0 then
64025: LD_VAR 0 1
64029: PUSH
64030: LD_INT 0
64032: LESS
64033: IFFALSE 64050
// result := value * - 1 ;
64035: LD_ADDR_VAR 0 2
64039: PUSH
64040: LD_VAR 0 1
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: MUL
64049: ST_TO_ADDR
// end ;
64050: LD_VAR 0 2
64054: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64055: LD_INT 0
64057: PPUSH
64058: PPUSH
64059: PPUSH
64060: PPUSH
64061: PPUSH
64062: PPUSH
64063: PPUSH
64064: PPUSH
// if not unit or not building then
64065: LD_VAR 0 1
64069: NOT
64070: PUSH
64071: LD_VAR 0 2
64075: NOT
64076: OR
64077: IFFALSE 64081
// exit ;
64079: GO 64307
// x := GetX ( building ) ;
64081: LD_ADDR_VAR 0 4
64085: PUSH
64086: LD_VAR 0 2
64090: PPUSH
64091: CALL_OW 250
64095: ST_TO_ADDR
// y := GetY ( building ) ;
64096: LD_ADDR_VAR 0 6
64100: PUSH
64101: LD_VAR 0 2
64105: PPUSH
64106: CALL_OW 251
64110: ST_TO_ADDR
// d := GetDir ( building ) ;
64111: LD_ADDR_VAR 0 8
64115: PUSH
64116: LD_VAR 0 2
64120: PPUSH
64121: CALL_OW 254
64125: ST_TO_ADDR
// r := 4 ;
64126: LD_ADDR_VAR 0 9
64130: PUSH
64131: LD_INT 4
64133: ST_TO_ADDR
// for i := 1 to 5 do
64134: LD_ADDR_VAR 0 10
64138: PUSH
64139: DOUBLE
64140: LD_INT 1
64142: DEC
64143: ST_TO_ADDR
64144: LD_INT 5
64146: PUSH
64147: FOR_TO
64148: IFFALSE 64305
// begin _x := ShiftX ( x , d , r + i ) ;
64150: LD_ADDR_VAR 0 5
64154: PUSH
64155: LD_VAR 0 4
64159: PPUSH
64160: LD_VAR 0 8
64164: PPUSH
64165: LD_VAR 0 9
64169: PUSH
64170: LD_VAR 0 10
64174: PLUS
64175: PPUSH
64176: CALL_OW 272
64180: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64181: LD_ADDR_VAR 0 7
64185: PUSH
64186: LD_VAR 0 6
64190: PPUSH
64191: LD_VAR 0 8
64195: PPUSH
64196: LD_VAR 0 9
64200: PUSH
64201: LD_VAR 0 10
64205: PLUS
64206: PPUSH
64207: CALL_OW 273
64211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64212: LD_VAR 0 5
64216: PPUSH
64217: LD_VAR 0 7
64221: PPUSH
64222: CALL_OW 488
64226: PUSH
64227: LD_VAR 0 5
64231: PPUSH
64232: LD_VAR 0 7
64236: PPUSH
64237: CALL_OW 428
64241: PPUSH
64242: CALL_OW 247
64246: PUSH
64247: LD_INT 3
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: IN
64257: NOT
64258: AND
64259: IFFALSE 64303
// begin ComMoveXY ( unit , _x , _y ) ;
64261: LD_VAR 0 1
64265: PPUSH
64266: LD_VAR 0 5
64270: PPUSH
64271: LD_VAR 0 7
64275: PPUSH
64276: CALL_OW 111
// result := [ _x , _y ] ;
64280: LD_ADDR_VAR 0 3
64284: PUSH
64285: LD_VAR 0 5
64289: PUSH
64290: LD_VAR 0 7
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: ST_TO_ADDR
// exit ;
64299: POP
64300: POP
64301: GO 64307
// end ; end ;
64303: GO 64147
64305: POP
64306: POP
// end ;
64307: LD_VAR 0 3
64311: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64312: LD_INT 0
64314: PPUSH
64315: PPUSH
64316: PPUSH
// result := 0 ;
64317: LD_ADDR_VAR 0 3
64321: PUSH
64322: LD_INT 0
64324: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64325: LD_VAR 0 1
64329: PUSH
64330: LD_INT 0
64332: LESS
64333: PUSH
64334: LD_VAR 0 1
64338: PUSH
64339: LD_INT 8
64341: GREATER
64342: OR
64343: PUSH
64344: LD_VAR 0 2
64348: PUSH
64349: LD_INT 0
64351: LESS
64352: OR
64353: PUSH
64354: LD_VAR 0 2
64358: PUSH
64359: LD_INT 8
64361: GREATER
64362: OR
64363: IFFALSE 64367
// exit ;
64365: GO 64442
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64367: LD_ADDR_VAR 0 4
64371: PUSH
64372: LD_INT 22
64374: PUSH
64375: LD_VAR 0 2
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PPUSH
64384: CALL_OW 69
64388: PUSH
64389: FOR_IN
64390: IFFALSE 64440
// begin un := UnitShoot ( i ) ;
64392: LD_ADDR_VAR 0 5
64396: PUSH
64397: LD_VAR 0 4
64401: PPUSH
64402: CALL_OW 504
64406: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64407: LD_VAR 0 5
64411: PPUSH
64412: CALL_OW 255
64416: PUSH
64417: LD_VAR 0 1
64421: EQUAL
64422: IFFALSE 64438
// begin result := un ;
64424: LD_ADDR_VAR 0 3
64428: PUSH
64429: LD_VAR 0 5
64433: ST_TO_ADDR
// exit ;
64434: POP
64435: POP
64436: GO 64442
// end ; end ;
64438: GO 64389
64440: POP
64441: POP
// end ;
64442: LD_VAR 0 3
64446: RET
// export function GetCargoBay ( units ) ; begin
64447: LD_INT 0
64449: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64450: LD_ADDR_VAR 0 2
64454: PUSH
64455: LD_VAR 0 1
64459: PPUSH
64460: LD_INT 2
64462: PUSH
64463: LD_INT 34
64465: PUSH
64466: LD_INT 12
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 34
64475: PUSH
64476: LD_INT 51
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 34
64485: PUSH
64486: LD_INT 32
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 34
64495: PUSH
64496: LD_EXP 96
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: PPUSH
64512: CALL_OW 72
64516: ST_TO_ADDR
// end ;
64517: LD_VAR 0 2
64521: RET
// export function Negate ( value ) ; begin
64522: LD_INT 0
64524: PPUSH
// result := not value ;
64525: LD_ADDR_VAR 0 2
64529: PUSH
64530: LD_VAR 0 1
64534: NOT
64535: ST_TO_ADDR
// end ;
64536: LD_VAR 0 2
64540: RET
// export function Inc ( value ) ; begin
64541: LD_INT 0
64543: PPUSH
// result := value + 1 ;
64544: LD_ADDR_VAR 0 2
64548: PUSH
64549: LD_VAR 0 1
64553: PUSH
64554: LD_INT 1
64556: PLUS
64557: ST_TO_ADDR
// end ;
64558: LD_VAR 0 2
64562: RET
// export function Dec ( value ) ; begin
64563: LD_INT 0
64565: PPUSH
// result := value - 1 ;
64566: LD_ADDR_VAR 0 2
64570: PUSH
64571: LD_VAR 0 1
64575: PUSH
64576: LD_INT 1
64578: MINUS
64579: ST_TO_ADDR
// end ;
64580: LD_VAR 0 2
64584: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64585: LD_INT 0
64587: PPUSH
64588: PPUSH
64589: PPUSH
64590: PPUSH
64591: PPUSH
64592: PPUSH
64593: PPUSH
64594: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64595: LD_VAR 0 1
64599: PPUSH
64600: LD_VAR 0 2
64604: PPUSH
64605: CALL_OW 488
64609: NOT
64610: PUSH
64611: LD_VAR 0 3
64615: PPUSH
64616: LD_VAR 0 4
64620: PPUSH
64621: CALL_OW 488
64625: NOT
64626: OR
64627: IFFALSE 64640
// begin result := - 1 ;
64629: LD_ADDR_VAR 0 5
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: ST_TO_ADDR
// exit ;
64638: GO 64875
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64640: LD_ADDR_VAR 0 12
64644: PUSH
64645: LD_VAR 0 1
64649: PPUSH
64650: LD_VAR 0 2
64654: PPUSH
64655: LD_VAR 0 3
64659: PPUSH
64660: LD_VAR 0 4
64664: PPUSH
64665: CALL 63723 0 4
64669: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64670: LD_ADDR_VAR 0 11
64674: PUSH
64675: LD_VAR 0 1
64679: PPUSH
64680: LD_VAR 0 2
64684: PPUSH
64685: LD_VAR 0 12
64689: PUSH
64690: LD_INT 1
64692: ARRAY
64693: PPUSH
64694: LD_VAR 0 12
64698: PUSH
64699: LD_INT 2
64701: ARRAY
64702: PPUSH
64703: CALL_OW 298
64707: ST_TO_ADDR
// distance := 9999 ;
64708: LD_ADDR_VAR 0 10
64712: PUSH
64713: LD_INT 9999
64715: ST_TO_ADDR
// for i := 0 to 5 do
64716: LD_ADDR_VAR 0 6
64720: PUSH
64721: DOUBLE
64722: LD_INT 0
64724: DEC
64725: ST_TO_ADDR
64726: LD_INT 5
64728: PUSH
64729: FOR_TO
64730: IFFALSE 64873
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64732: LD_ADDR_VAR 0 7
64736: PUSH
64737: LD_VAR 0 1
64741: PPUSH
64742: LD_VAR 0 6
64746: PPUSH
64747: LD_VAR 0 11
64751: PPUSH
64752: CALL_OW 272
64756: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64757: LD_ADDR_VAR 0 8
64761: PUSH
64762: LD_VAR 0 2
64766: PPUSH
64767: LD_VAR 0 6
64771: PPUSH
64772: LD_VAR 0 11
64776: PPUSH
64777: CALL_OW 273
64781: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64782: LD_VAR 0 7
64786: PPUSH
64787: LD_VAR 0 8
64791: PPUSH
64792: CALL_OW 488
64796: NOT
64797: IFFALSE 64801
// continue ;
64799: GO 64729
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64801: LD_ADDR_VAR 0 9
64805: PUSH
64806: LD_VAR 0 12
64810: PUSH
64811: LD_INT 1
64813: ARRAY
64814: PPUSH
64815: LD_VAR 0 12
64819: PUSH
64820: LD_INT 2
64822: ARRAY
64823: PPUSH
64824: LD_VAR 0 7
64828: PPUSH
64829: LD_VAR 0 8
64833: PPUSH
64834: CALL_OW 298
64838: ST_TO_ADDR
// if tmp < distance then
64839: LD_VAR 0 9
64843: PUSH
64844: LD_VAR 0 10
64848: LESS
64849: IFFALSE 64871
// begin result := i ;
64851: LD_ADDR_VAR 0 5
64855: PUSH
64856: LD_VAR 0 6
64860: ST_TO_ADDR
// distance := tmp ;
64861: LD_ADDR_VAR 0 10
64865: PUSH
64866: LD_VAR 0 9
64870: ST_TO_ADDR
// end ; end ;
64871: GO 64729
64873: POP
64874: POP
// end ;
64875: LD_VAR 0 5
64879: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64880: LD_INT 0
64882: PPUSH
64883: PPUSH
// if not driver or not IsInUnit ( driver ) then
64884: LD_VAR 0 1
64888: NOT
64889: PUSH
64890: LD_VAR 0 1
64894: PPUSH
64895: CALL_OW 310
64899: NOT
64900: OR
64901: IFFALSE 64905
// exit ;
64903: GO 64995
// vehicle := IsInUnit ( driver ) ;
64905: LD_ADDR_VAR 0 3
64909: PUSH
64910: LD_VAR 0 1
64914: PPUSH
64915: CALL_OW 310
64919: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64920: LD_VAR 0 1
64924: PPUSH
64925: LD_STRING \
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: PUSH
64955: LD_STRING E
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_VAR 0 3
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PPUSH
64991: CALL_OW 446
// end ;
64995: LD_VAR 0 2
64999: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65000: LD_INT 0
65002: PPUSH
65003: PPUSH
// if not driver or not IsInUnit ( driver ) then
65004: LD_VAR 0 1
65008: NOT
65009: PUSH
65010: LD_VAR 0 1
65014: PPUSH
65015: CALL_OW 310
65019: NOT
65020: OR
65021: IFFALSE 65025
// exit ;
65023: GO 65115
// vehicle := IsInUnit ( driver ) ;
65025: LD_ADDR_VAR 0 3
65029: PUSH
65030: LD_VAR 0 1
65034: PPUSH
65035: CALL_OW 310
65039: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65040: LD_VAR 0 1
65044: PPUSH
65045: LD_STRING \
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: PUSH
65075: LD_STRING E
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_VAR 0 3
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PPUSH
65111: CALL_OW 447
// end ;
65115: LD_VAR 0 2
65119: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65120: LD_INT 0
65122: PPUSH
65123: PPUSH
65124: PPUSH
// tmp := [ ] ;
65125: LD_ADDR_VAR 0 5
65129: PUSH
65130: EMPTY
65131: ST_TO_ADDR
// for i in units do
65132: LD_ADDR_VAR 0 4
65136: PUSH
65137: LD_VAR 0 1
65141: PUSH
65142: FOR_IN
65143: IFFALSE 65181
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65145: LD_ADDR_VAR 0 5
65149: PUSH
65150: LD_VAR 0 5
65154: PPUSH
65155: LD_VAR 0 5
65159: PUSH
65160: LD_INT 1
65162: PLUS
65163: PPUSH
65164: LD_VAR 0 4
65168: PPUSH
65169: CALL_OW 256
65173: PPUSH
65174: CALL_OW 2
65178: ST_TO_ADDR
65179: GO 65142
65181: POP
65182: POP
// if not tmp then
65183: LD_VAR 0 5
65187: NOT
65188: IFFALSE 65192
// exit ;
65190: GO 65240
// if asc then
65192: LD_VAR 0 2
65196: IFFALSE 65220
// result := SortListByListAsc ( units , tmp ) else
65198: LD_ADDR_VAR 0 3
65202: PUSH
65203: LD_VAR 0 1
65207: PPUSH
65208: LD_VAR 0 5
65212: PPUSH
65213: CALL_OW 76
65217: ST_TO_ADDR
65218: GO 65240
// result := SortListByListDesc ( units , tmp ) ;
65220: LD_ADDR_VAR 0 3
65224: PUSH
65225: LD_VAR 0 1
65229: PPUSH
65230: LD_VAR 0 5
65234: PPUSH
65235: CALL_OW 77
65239: ST_TO_ADDR
// end ;
65240: LD_VAR 0 3
65244: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65245: LD_INT 0
65247: PPUSH
65248: PPUSH
// task := GetTaskList ( mech ) ;
65249: LD_ADDR_VAR 0 4
65253: PUSH
65254: LD_VAR 0 1
65258: PPUSH
65259: CALL_OW 437
65263: ST_TO_ADDR
// if not task then
65264: LD_VAR 0 4
65268: NOT
65269: IFFALSE 65273
// exit ;
65271: GO 65315
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65273: LD_ADDR_VAR 0 3
65277: PUSH
65278: LD_VAR 0 4
65282: PUSH
65283: LD_INT 1
65285: ARRAY
65286: PUSH
65287: LD_INT 1
65289: ARRAY
65290: PUSH
65291: LD_STRING r
65293: EQUAL
65294: PUSH
65295: LD_VAR 0 4
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: PUSH
65304: LD_INT 4
65306: ARRAY
65307: PUSH
65308: LD_VAR 0 2
65312: EQUAL
65313: AND
65314: ST_TO_ADDR
// end ;
65315: LD_VAR 0 3
65319: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65320: LD_INT 0
65322: PPUSH
// SetDir ( unit , d ) ;
65323: LD_VAR 0 1
65327: PPUSH
65328: LD_VAR 0 4
65332: PPUSH
65333: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65337: LD_VAR 0 1
65341: PPUSH
65342: LD_VAR 0 2
65346: PPUSH
65347: LD_VAR 0 3
65351: PPUSH
65352: LD_VAR 0 5
65356: PPUSH
65357: CALL_OW 48
// end ;
65361: LD_VAR 0 6
65365: RET
// export function ToNaturalNumber ( number ) ; begin
65366: LD_INT 0
65368: PPUSH
// result := number div 1 ;
65369: LD_ADDR_VAR 0 2
65373: PUSH
65374: LD_VAR 0 1
65378: PUSH
65379: LD_INT 1
65381: DIV
65382: ST_TO_ADDR
// if number < 0 then
65383: LD_VAR 0 1
65387: PUSH
65388: LD_INT 0
65390: LESS
65391: IFFALSE 65401
// result := 0 ;
65393: LD_ADDR_VAR 0 2
65397: PUSH
65398: LD_INT 0
65400: ST_TO_ADDR
// end ;
65401: LD_VAR 0 2
65405: RET
// export function SortByClass ( units , class ) ; var un ; begin
65406: LD_INT 0
65408: PPUSH
65409: PPUSH
// if not units or not class then
65410: LD_VAR 0 1
65414: NOT
65415: PUSH
65416: LD_VAR 0 2
65420: NOT
65421: OR
65422: IFFALSE 65426
// exit ;
65424: GO 65521
// result := [ ] ;
65426: LD_ADDR_VAR 0 3
65430: PUSH
65431: EMPTY
65432: ST_TO_ADDR
// for un in units do
65433: LD_ADDR_VAR 0 4
65437: PUSH
65438: LD_VAR 0 1
65442: PUSH
65443: FOR_IN
65444: IFFALSE 65519
// if GetClass ( un ) = class then
65446: LD_VAR 0 4
65450: PPUSH
65451: CALL_OW 257
65455: PUSH
65456: LD_VAR 0 2
65460: EQUAL
65461: IFFALSE 65488
// result := Insert ( result , 1 , un ) else
65463: LD_ADDR_VAR 0 3
65467: PUSH
65468: LD_VAR 0 3
65472: PPUSH
65473: LD_INT 1
65475: PPUSH
65476: LD_VAR 0 4
65480: PPUSH
65481: CALL_OW 2
65485: ST_TO_ADDR
65486: GO 65517
// result := Replace ( result , result + 1 , un ) ;
65488: LD_ADDR_VAR 0 3
65492: PUSH
65493: LD_VAR 0 3
65497: PPUSH
65498: LD_VAR 0 3
65502: PUSH
65503: LD_INT 1
65505: PLUS
65506: PPUSH
65507: LD_VAR 0 4
65511: PPUSH
65512: CALL_OW 1
65516: ST_TO_ADDR
65517: GO 65443
65519: POP
65520: POP
// end ;
65521: LD_VAR 0 3
65525: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65526: LD_INT 0
65528: PPUSH
65529: PPUSH
65530: PPUSH
65531: PPUSH
65532: PPUSH
65533: PPUSH
65534: PPUSH
// result := [ ] ;
65535: LD_ADDR_VAR 0 4
65539: PUSH
65540: EMPTY
65541: ST_TO_ADDR
// if x - r < 0 then
65542: LD_VAR 0 1
65546: PUSH
65547: LD_VAR 0 3
65551: MINUS
65552: PUSH
65553: LD_INT 0
65555: LESS
65556: IFFALSE 65568
// min_x := 0 else
65558: LD_ADDR_VAR 0 8
65562: PUSH
65563: LD_INT 0
65565: ST_TO_ADDR
65566: GO 65584
// min_x := x - r ;
65568: LD_ADDR_VAR 0 8
65572: PUSH
65573: LD_VAR 0 1
65577: PUSH
65578: LD_VAR 0 3
65582: MINUS
65583: ST_TO_ADDR
// if y - r < 0 then
65584: LD_VAR 0 2
65588: PUSH
65589: LD_VAR 0 3
65593: MINUS
65594: PUSH
65595: LD_INT 0
65597: LESS
65598: IFFALSE 65610
// min_y := 0 else
65600: LD_ADDR_VAR 0 7
65604: PUSH
65605: LD_INT 0
65607: ST_TO_ADDR
65608: GO 65626
// min_y := y - r ;
65610: LD_ADDR_VAR 0 7
65614: PUSH
65615: LD_VAR 0 2
65619: PUSH
65620: LD_VAR 0 3
65624: MINUS
65625: ST_TO_ADDR
// max_x := x + r ;
65626: LD_ADDR_VAR 0 9
65630: PUSH
65631: LD_VAR 0 1
65635: PUSH
65636: LD_VAR 0 3
65640: PLUS
65641: ST_TO_ADDR
// max_y := y + r ;
65642: LD_ADDR_VAR 0 10
65646: PUSH
65647: LD_VAR 0 2
65651: PUSH
65652: LD_VAR 0 3
65656: PLUS
65657: ST_TO_ADDR
// for _x = min_x to max_x do
65658: LD_ADDR_VAR 0 5
65662: PUSH
65663: DOUBLE
65664: LD_VAR 0 8
65668: DEC
65669: ST_TO_ADDR
65670: LD_VAR 0 9
65674: PUSH
65675: FOR_TO
65676: IFFALSE 65777
// for _y = min_y to max_y do
65678: LD_ADDR_VAR 0 6
65682: PUSH
65683: DOUBLE
65684: LD_VAR 0 7
65688: DEC
65689: ST_TO_ADDR
65690: LD_VAR 0 10
65694: PUSH
65695: FOR_TO
65696: IFFALSE 65773
// begin if not ValidHex ( _x , _y ) then
65698: LD_VAR 0 5
65702: PPUSH
65703: LD_VAR 0 6
65707: PPUSH
65708: CALL_OW 488
65712: NOT
65713: IFFALSE 65717
// continue ;
65715: GO 65695
// if GetResourceTypeXY ( _x , _y ) then
65717: LD_VAR 0 5
65721: PPUSH
65722: LD_VAR 0 6
65726: PPUSH
65727: CALL_OW 283
65731: IFFALSE 65771
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65733: LD_ADDR_VAR 0 4
65737: PUSH
65738: LD_VAR 0 4
65742: PPUSH
65743: LD_VAR 0 4
65747: PUSH
65748: LD_INT 1
65750: PLUS
65751: PPUSH
65752: LD_VAR 0 5
65756: PUSH
65757: LD_VAR 0 6
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PPUSH
65766: CALL_OW 1
65770: ST_TO_ADDR
// end ;
65771: GO 65695
65773: POP
65774: POP
65775: GO 65675
65777: POP
65778: POP
// end ;
65779: LD_VAR 0 4
65783: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65784: LD_INT 0
65786: PPUSH
65787: PPUSH
65788: PPUSH
65789: PPUSH
65790: PPUSH
65791: PPUSH
65792: PPUSH
65793: PPUSH
// if not units then
65794: LD_VAR 0 1
65798: NOT
65799: IFFALSE 65803
// exit ;
65801: GO 66329
// result := UnitFilter ( units , [ f_ok ] ) ;
65803: LD_ADDR_VAR 0 3
65807: PUSH
65808: LD_VAR 0 1
65812: PPUSH
65813: LD_INT 50
65815: PUSH
65816: EMPTY
65817: LIST
65818: PPUSH
65819: CALL_OW 72
65823: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65824: LD_ADDR_VAR 0 8
65828: PUSH
65829: LD_VAR 0 1
65833: PUSH
65834: LD_INT 1
65836: ARRAY
65837: PPUSH
65838: CALL_OW 255
65842: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65843: LD_ADDR_VAR 0 10
65847: PUSH
65848: LD_INT 29
65850: PUSH
65851: LD_EXP 99
65855: PUSH
65856: LD_INT 49
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: ST_TO_ADDR
// if not result then
65864: LD_VAR 0 3
65868: NOT
65869: IFFALSE 65873
// exit ;
65871: GO 66329
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65873: LD_ADDR_VAR 0 5
65877: PUSH
65878: LD_INT 81
65880: PUSH
65881: LD_VAR 0 8
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PPUSH
65890: CALL_OW 69
65894: ST_TO_ADDR
// for i in result do
65895: LD_ADDR_VAR 0 4
65899: PUSH
65900: LD_VAR 0 3
65904: PUSH
65905: FOR_IN
65906: IFFALSE 66327
// begin tag := GetTag ( i ) + 1 ;
65908: LD_ADDR_VAR 0 9
65912: PUSH
65913: LD_VAR 0 4
65917: PPUSH
65918: CALL_OW 110
65922: PUSH
65923: LD_INT 1
65925: PLUS
65926: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65927: LD_ADDR_VAR 0 7
65931: PUSH
65932: LD_VAR 0 4
65936: PPUSH
65937: CALL_OW 250
65941: PPUSH
65942: LD_VAR 0 4
65946: PPUSH
65947: CALL_OW 251
65951: PPUSH
65952: LD_INT 6
65954: PPUSH
65955: CALL 65526 0 3
65959: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65960: LD_VAR 0 4
65964: PPUSH
65965: CALL_OW 247
65969: PUSH
65970: LD_INT 2
65972: EQUAL
65973: PUSH
65974: LD_VAR 0 7
65978: AND
65979: PUSH
65980: LD_VAR 0 4
65984: PPUSH
65985: CALL_OW 264
65989: PUSH
65990: LD_VAR 0 10
65994: IN
65995: NOT
65996: AND
65997: IFFALSE 66036
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65999: LD_VAR 0 4
66003: PPUSH
66004: LD_VAR 0 7
66008: PUSH
66009: LD_INT 1
66011: ARRAY
66012: PUSH
66013: LD_INT 1
66015: ARRAY
66016: PPUSH
66017: LD_VAR 0 7
66021: PUSH
66022: LD_INT 1
66024: ARRAY
66025: PUSH
66026: LD_INT 2
66028: ARRAY
66029: PPUSH
66030: CALL_OW 116
66034: GO 66325
// if path > tag then
66036: LD_VAR 0 2
66040: PUSH
66041: LD_VAR 0 9
66045: GREATER
66046: IFFALSE 66254
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66048: LD_ADDR_VAR 0 6
66052: PUSH
66053: LD_VAR 0 5
66057: PPUSH
66058: LD_INT 91
66060: PUSH
66061: LD_VAR 0 4
66065: PUSH
66066: LD_INT 8
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: LIST
66073: PPUSH
66074: CALL_OW 72
66078: ST_TO_ADDR
// if nearEnemy then
66079: LD_VAR 0 6
66083: IFFALSE 66152
// begin if GetWeapon ( i ) = ru_time_lapser then
66085: LD_VAR 0 4
66089: PPUSH
66090: CALL_OW 264
66094: PUSH
66095: LD_INT 49
66097: EQUAL
66098: IFFALSE 66126
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66100: LD_VAR 0 4
66104: PPUSH
66105: LD_VAR 0 6
66109: PPUSH
66110: LD_VAR 0 4
66114: PPUSH
66115: CALL_OW 74
66119: PPUSH
66120: CALL_OW 112
66124: GO 66150
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66126: LD_VAR 0 4
66130: PPUSH
66131: LD_VAR 0 6
66135: PPUSH
66136: LD_VAR 0 4
66140: PPUSH
66141: CALL_OW 74
66145: PPUSH
66146: CALL_OW 115
// end else
66150: GO 66252
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66152: LD_VAR 0 4
66156: PPUSH
66157: LD_VAR 0 2
66161: PUSH
66162: LD_VAR 0 9
66166: ARRAY
66167: PUSH
66168: LD_INT 1
66170: ARRAY
66171: PPUSH
66172: LD_VAR 0 2
66176: PUSH
66177: LD_VAR 0 9
66181: ARRAY
66182: PUSH
66183: LD_INT 2
66185: ARRAY
66186: PPUSH
66187: CALL_OW 297
66191: PUSH
66192: LD_INT 6
66194: GREATER
66195: IFFALSE 66238
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66197: LD_VAR 0 4
66201: PPUSH
66202: LD_VAR 0 2
66206: PUSH
66207: LD_VAR 0 9
66211: ARRAY
66212: PUSH
66213: LD_INT 1
66215: ARRAY
66216: PPUSH
66217: LD_VAR 0 2
66221: PUSH
66222: LD_VAR 0 9
66226: ARRAY
66227: PUSH
66228: LD_INT 2
66230: ARRAY
66231: PPUSH
66232: CALL_OW 114
66236: GO 66252
// SetTag ( i , tag ) ;
66238: LD_VAR 0 4
66242: PPUSH
66243: LD_VAR 0 9
66247: PPUSH
66248: CALL_OW 109
// end else
66252: GO 66325
// if enemy then
66254: LD_VAR 0 5
66258: IFFALSE 66325
// begin if GetWeapon ( i ) = ru_time_lapser then
66260: LD_VAR 0 4
66264: PPUSH
66265: CALL_OW 264
66269: PUSH
66270: LD_INT 49
66272: EQUAL
66273: IFFALSE 66301
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66275: LD_VAR 0 4
66279: PPUSH
66280: LD_VAR 0 5
66284: PPUSH
66285: LD_VAR 0 4
66289: PPUSH
66290: CALL_OW 74
66294: PPUSH
66295: CALL_OW 112
66299: GO 66325
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66301: LD_VAR 0 4
66305: PPUSH
66306: LD_VAR 0 5
66310: PPUSH
66311: LD_VAR 0 4
66315: PPUSH
66316: CALL_OW 74
66320: PPUSH
66321: CALL_OW 115
// end ; end ;
66325: GO 65905
66327: POP
66328: POP
// end ;
66329: LD_VAR 0 3
66333: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66334: LD_INT 0
66336: PPUSH
66337: PPUSH
66338: PPUSH
// if not unit or IsInUnit ( unit ) then
66339: LD_VAR 0 1
66343: NOT
66344: PUSH
66345: LD_VAR 0 1
66349: PPUSH
66350: CALL_OW 310
66354: OR
66355: IFFALSE 66359
// exit ;
66357: GO 66450
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66359: LD_ADDR_VAR 0 4
66363: PUSH
66364: LD_VAR 0 1
66368: PPUSH
66369: CALL_OW 250
66373: PPUSH
66374: LD_VAR 0 2
66378: PPUSH
66379: LD_INT 1
66381: PPUSH
66382: CALL_OW 272
66386: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66387: LD_ADDR_VAR 0 5
66391: PUSH
66392: LD_VAR 0 1
66396: PPUSH
66397: CALL_OW 251
66401: PPUSH
66402: LD_VAR 0 2
66406: PPUSH
66407: LD_INT 1
66409: PPUSH
66410: CALL_OW 273
66414: ST_TO_ADDR
// if ValidHex ( x , y ) then
66415: LD_VAR 0 4
66419: PPUSH
66420: LD_VAR 0 5
66424: PPUSH
66425: CALL_OW 488
66429: IFFALSE 66450
// ComTurnXY ( unit , x , y ) ;
66431: LD_VAR 0 1
66435: PPUSH
66436: LD_VAR 0 4
66440: PPUSH
66441: LD_VAR 0 5
66445: PPUSH
66446: CALL_OW 118
// end ;
66450: LD_VAR 0 3
66454: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66455: LD_INT 0
66457: PPUSH
66458: PPUSH
// result := false ;
66459: LD_ADDR_VAR 0 3
66463: PUSH
66464: LD_INT 0
66466: ST_TO_ADDR
// if not units then
66467: LD_VAR 0 2
66471: NOT
66472: IFFALSE 66476
// exit ;
66474: GO 66521
// for i in units do
66476: LD_ADDR_VAR 0 4
66480: PUSH
66481: LD_VAR 0 2
66485: PUSH
66486: FOR_IN
66487: IFFALSE 66519
// if See ( side , i ) then
66489: LD_VAR 0 1
66493: PPUSH
66494: LD_VAR 0 4
66498: PPUSH
66499: CALL_OW 292
66503: IFFALSE 66517
// begin result := true ;
66505: LD_ADDR_VAR 0 3
66509: PUSH
66510: LD_INT 1
66512: ST_TO_ADDR
// exit ;
66513: POP
66514: POP
66515: GO 66521
// end ;
66517: GO 66486
66519: POP
66520: POP
// end ;
66521: LD_VAR 0 3
66525: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66526: LD_INT 0
66528: PPUSH
66529: PPUSH
66530: PPUSH
66531: PPUSH
// if not unit or not points then
66532: LD_VAR 0 1
66536: NOT
66537: PUSH
66538: LD_VAR 0 2
66542: NOT
66543: OR
66544: IFFALSE 66548
// exit ;
66546: GO 66638
// dist := 99999 ;
66548: LD_ADDR_VAR 0 5
66552: PUSH
66553: LD_INT 99999
66555: ST_TO_ADDR
// for i in points do
66556: LD_ADDR_VAR 0 4
66560: PUSH
66561: LD_VAR 0 2
66565: PUSH
66566: FOR_IN
66567: IFFALSE 66636
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66569: LD_ADDR_VAR 0 6
66573: PUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: LD_VAR 0 4
66583: PUSH
66584: LD_INT 1
66586: ARRAY
66587: PPUSH
66588: LD_VAR 0 4
66592: PUSH
66593: LD_INT 2
66595: ARRAY
66596: PPUSH
66597: CALL_OW 297
66601: ST_TO_ADDR
// if tmpDist < dist then
66602: LD_VAR 0 6
66606: PUSH
66607: LD_VAR 0 5
66611: LESS
66612: IFFALSE 66634
// begin result := i ;
66614: LD_ADDR_VAR 0 3
66618: PUSH
66619: LD_VAR 0 4
66623: ST_TO_ADDR
// dist := tmpDist ;
66624: LD_ADDR_VAR 0 5
66628: PUSH
66629: LD_VAR 0 6
66633: ST_TO_ADDR
// end ; end ;
66634: GO 66566
66636: POP
66637: POP
// end ;
66638: LD_VAR 0 3
66642: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66643: LD_INT 0
66645: PPUSH
// uc_side := side ;
66646: LD_ADDR_OWVAR 20
66650: PUSH
66651: LD_VAR 0 1
66655: ST_TO_ADDR
// uc_nation := 3 ;
66656: LD_ADDR_OWVAR 21
66660: PUSH
66661: LD_INT 3
66663: ST_TO_ADDR
// vc_chassis := 25 ;
66664: LD_ADDR_OWVAR 37
66668: PUSH
66669: LD_INT 25
66671: ST_TO_ADDR
// vc_engine := engine_siberite ;
66672: LD_ADDR_OWVAR 39
66676: PUSH
66677: LD_INT 3
66679: ST_TO_ADDR
// vc_control := control_computer ;
66680: LD_ADDR_OWVAR 38
66684: PUSH
66685: LD_INT 3
66687: ST_TO_ADDR
// vc_weapon := 59 ;
66688: LD_ADDR_OWVAR 40
66692: PUSH
66693: LD_INT 59
66695: ST_TO_ADDR
// result := CreateVehicle ;
66696: LD_ADDR_VAR 0 5
66700: PUSH
66701: CALL_OW 45
66705: ST_TO_ADDR
// SetDir ( result , d ) ;
66706: LD_VAR 0 5
66710: PPUSH
66711: LD_VAR 0 4
66715: PPUSH
66716: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66720: LD_VAR 0 5
66724: PPUSH
66725: LD_VAR 0 2
66729: PPUSH
66730: LD_VAR 0 3
66734: PPUSH
66735: LD_INT 0
66737: PPUSH
66738: CALL_OW 48
// end ;
66742: LD_VAR 0 5
66746: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66747: LD_INT 0
66749: PPUSH
66750: PPUSH
66751: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66752: LD_ADDR_VAR 0 2
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66775: LD_VAR 0 1
66779: NOT
66780: PUSH
66781: LD_VAR 0 1
66785: PPUSH
66786: CALL_OW 264
66790: PUSH
66791: LD_INT 12
66793: PUSH
66794: LD_INT 51
66796: PUSH
66797: LD_INT 32
66799: PUSH
66800: LD_EXP 96
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: IN
66811: NOT
66812: OR
66813: IFFALSE 66817
// exit ;
66815: GO 66915
// for i := 1 to 3 do
66817: LD_ADDR_VAR 0 3
66821: PUSH
66822: DOUBLE
66823: LD_INT 1
66825: DEC
66826: ST_TO_ADDR
66827: LD_INT 3
66829: PUSH
66830: FOR_TO
66831: IFFALSE 66913
// begin tmp := GetCargo ( cargo , i ) ;
66833: LD_ADDR_VAR 0 4
66837: PUSH
66838: LD_VAR 0 1
66842: PPUSH
66843: LD_VAR 0 3
66847: PPUSH
66848: CALL_OW 289
66852: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66853: LD_ADDR_VAR 0 2
66857: PUSH
66858: LD_VAR 0 2
66862: PPUSH
66863: LD_VAR 0 3
66867: PPUSH
66868: LD_VAR 0 4
66872: PPUSH
66873: CALL_OW 1
66877: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66878: LD_ADDR_VAR 0 2
66882: PUSH
66883: LD_VAR 0 2
66887: PPUSH
66888: LD_INT 4
66890: PPUSH
66891: LD_VAR 0 2
66895: PUSH
66896: LD_INT 4
66898: ARRAY
66899: PUSH
66900: LD_VAR 0 4
66904: PLUS
66905: PPUSH
66906: CALL_OW 1
66910: ST_TO_ADDR
// end ;
66911: GO 66830
66913: POP
66914: POP
// end ;
66915: LD_VAR 0 2
66919: RET
// export function Length ( array ) ; begin
66920: LD_INT 0
66922: PPUSH
// result := array + 0 ;
66923: LD_ADDR_VAR 0 2
66927: PUSH
66928: LD_VAR 0 1
66932: PUSH
66933: LD_INT 0
66935: PLUS
66936: ST_TO_ADDR
// end ;
66937: LD_VAR 0 2
66941: RET
// export function PrepareArray ( array ) ; begin
66942: LD_INT 0
66944: PPUSH
// result := array diff 0 ;
66945: LD_ADDR_VAR 0 2
66949: PUSH
66950: LD_VAR 0 1
66954: PUSH
66955: LD_INT 0
66957: DIFF
66958: ST_TO_ADDR
// if not result [ 1 ] then
66959: LD_VAR 0 2
66963: PUSH
66964: LD_INT 1
66966: ARRAY
66967: NOT
66968: IFFALSE 66988
// result := Delete ( result , 1 ) ;
66970: LD_ADDR_VAR 0 2
66974: PUSH
66975: LD_VAR 0 2
66979: PPUSH
66980: LD_INT 1
66982: PPUSH
66983: CALL_OW 3
66987: ST_TO_ADDR
// end ;
66988: LD_VAR 0 2
66992: RET
