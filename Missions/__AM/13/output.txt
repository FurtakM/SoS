// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 1059 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// InGameOn ;
  70: CALL_OW 8
// mission_prefix_prev = 12_ ;
  74: LD_ADDR_EXP 21
  78: PUSH
  79: LD_STRING 12_
  81: ST_TO_ADDR
// PrepareEpsilonBase ;
  82: CALL 2398 0 0
// PrepareHeroes ;
  86: CALL 1239 0 0
// PrepareRandoms ;
  90: CALL 3682 0 0
// CenterNowOnUnits ( JMM ) ;
  94: LD_EXP 1
  98: PPUSH
  99: CALL_OW 87
// wait ( 0 0$1 ) ;
 103: LD_INT 35
 105: PPUSH
 106: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
 110: LD_EXP 1
 114: PPUSH
 115: LD_STRING D1-JMM-1
 117: PPUSH
 118: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
 122: LD_EXP 2
 126: PPUSH
 127: LD_STRING D1-Pow-1
 129: PPUSH
 130: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
 134: LD_EXP 2
 138: PPUSH
 139: LD_STRING D1-Pow-1a
 141: PPUSH
 142: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 146: LD_EXP 2
 150: PPUSH
 151: LD_STRING D1-Pow-1b
 153: PPUSH
 154: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 158: LD_EXP 2
 162: PPUSH
 163: LD_STRING D1-Pow-1c
 165: PPUSH
 166: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING D1-JMM-2
 177: PPUSH
 178: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 182: LD_EXP 2
 186: PPUSH
 187: LD_STRING D1-Pow-2
 189: PPUSH
 190: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 194: LD_EXP 1
 198: PPUSH
 199: LD_STRING D1-JMM-3
 201: PPUSH
 202: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 206: LD_EXP 2
 210: PPUSH
 211: LD_STRING D1-Pow-3
 213: PPUSH
 214: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 218: LD_EXP 1
 222: PPUSH
 223: LD_STRING D1-JMM-4
 225: PPUSH
 226: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 230: LD_EXP 2
 234: PPUSH
 235: LD_STRING D1-Pow-4
 237: PPUSH
 238: CALL_OW 94
// SelectAndSaveCharacters ;
 242: CALL 4278 0 0
// InGameOff ;
 246: CALL_OW 9
// Query ( Q1 ) ;
 250: LD_STRING Q1
 252: PPUSH
 253: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 257: LD_INT 2
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 424
// end ;
 267: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 268: LD_INT 2
 270: PPUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 21
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PPUSH
 295: CALL_OW 71
 299: PUSH
 300: LD_INT 0
 302: EQUAL
 303: PUSH
 304: LD_INT 2
 306: PPUSH
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 21
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 32
 329: PUSH
 330: LD_INT 3
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 33
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: LD_INT 3
 349: PUSH
 350: LD_INT 58
 352: PUSH
 353: EMPTY
 354: LIST
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: PPUSH
 367: CALL_OW 70
 371: PUSH
 372: LD_INT 8
 374: EQUAL
 375: AND
 376: IFFALSE 956
 378: GO 380
 380: DISABLE
 381: LD_INT 0
 383: PPUSH
 384: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 385: LD_INT 2
 387: PPUSH
 388: LD_INT 21
 390: PUSH
 391: LD_INT 2
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 33
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: LD_INT 58
 413: PUSH
 414: EMPTY
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 70
 430: PUSH
 431: LD_INT 0
 433: GREATER
 434: IFFALSE 702
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 436: LD_ADDR_VAR 0 1
 440: PUSH
 441: LD_INT 2
 443: PPUSH
 444: LD_INT 21
 446: PUSH
 447: LD_INT 2
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 33
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 3
 466: PUSH
 467: LD_INT 58
 469: PUSH
 470: EMPTY
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PPUSH
 482: CALL_OW 70
 486: PUSH
 487: FOR_IN
 488: IFFALSE 688
// begin cargoType = GetCargoType ( i ) ;
 490: LD_ADDR_VAR 0 2
 494: PUSH
 495: LD_VAR 0 1
 499: PPUSH
 500: CALL_OW 288
 504: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 505: LD_VAR 0 1
 509: PPUSH
 510: CALL_OW 264
 514: PUSH
 515: LD_INT 12
 517: EQUAL
 518: IFFALSE 615
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 520: LD_ADDR_EXP 19
 524: PUSH
 525: LD_EXP 19
 529: PUSH
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 248
 539: PUSH
 540: LD_VAR 0 1
 544: PPUSH
 545: CALL_OW 265
 549: PUSH
 550: LD_VAR 0 1
 554: PPUSH
 555: CALL_OW 262
 559: PUSH
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 263
 569: PUSH
 570: LD_VAR 0 1
 574: PPUSH
 575: CALL_OW 264
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_VAR 0 2
 594: PPUSH
 595: CALL_OW 289
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: ADD
 612: ST_TO_ADDR
// end else
 613: GO 686
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 615: LD_ADDR_EXP 19
 619: PUSH
 620: LD_EXP 19
 624: PUSH
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 248
 634: PUSH
 635: LD_VAR 0 1
 639: PPUSH
 640: CALL_OW 265
 644: PUSH
 645: LD_VAR 0 1
 649: PPUSH
 650: CALL_OW 262
 654: PUSH
 655: LD_VAR 0 1
 659: PPUSH
 660: CALL_OW 263
 664: PUSH
 665: LD_VAR 0 1
 669: PPUSH
 670: CALL_OW 264
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: PUSH
 682: EMPTY
 683: LIST
 684: ADD
 685: ST_TO_ADDR
// end ; end ;
 686: GO 487
 688: POP
 689: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 690: LD_EXP 19
 694: PPUSH
 695: LD_STRING 13_VehiclesIn13_1
 697: PPUSH
 698: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 702: LD_EXP 23
 706: PPUSH
 707: LD_STRING 13c_others
 709: PPUSH
 710: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_STRING 13c_JMM
 721: PPUSH
 722: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 726: LD_EXP 15
 730: PPUSH
 731: LD_STRING 13c_Stevens
 733: PPUSH
 734: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 738: LD_EXP 3
 742: PPUSH
 743: LD_STRING Lisa
 745: PPUSH
 746: LD_EXP 22
 750: PPUSH
 751: CALL 4220 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 755: LD_EXP 8
 759: PPUSH
 760: LD_STRING Brown
 762: PPUSH
 763: LD_EXP 22
 767: PPUSH
 768: CALL 4220 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 772: LD_EXP 4
 776: PPUSH
 777: LD_STRING Donaldson
 779: PPUSH
 780: LD_EXP 22
 784: PPUSH
 785: CALL 4220 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 789: LD_EXP 5
 793: PPUSH
 794: LD_STRING Bobby
 796: PPUSH
 797: LD_EXP 22
 801: PPUSH
 802: CALL 4220 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 806: LD_EXP 6
 810: PPUSH
 811: LD_STRING Cyrus
 813: PPUSH
 814: LD_EXP 22
 818: PPUSH
 819: CALL 4220 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 823: LD_EXP 7
 827: PPUSH
 828: LD_STRING Denis
 830: PPUSH
 831: LD_EXP 22
 835: PPUSH
 836: CALL 4220 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 840: LD_EXP 9
 844: PPUSH
 845: LD_STRING Gladstone
 847: PPUSH
 848: LD_EXP 22
 852: PPUSH
 853: CALL 4220 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 857: LD_EXP 10
 861: PPUSH
 862: LD_STRING Houten
 864: PPUSH
 865: LD_EXP 22
 869: PPUSH
 870: CALL 4220 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 874: LD_EXP 11
 878: PPUSH
 879: LD_STRING Cornel
 881: PPUSH
 882: LD_EXP 22
 886: PPUSH
 887: CALL 4220 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 891: LD_EXP 12
 895: PPUSH
 896: LD_STRING Gary
 898: PPUSH
 899: LD_EXP 22
 903: PPUSH
 904: CALL 4220 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 908: LD_EXP 13
 912: PPUSH
 913: LD_STRING Frank
 915: PPUSH
 916: LD_EXP 22
 920: PPUSH
 921: CALL 4220 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 925: LD_EXP 14
 929: PPUSH
 930: LD_STRING Kikuchi
 932: PPUSH
 933: LD_EXP 22
 937: PPUSH
 938: CALL 4220 0 3
// SaveCargos ;
 942: CALL 959 0 0
// ChangeMap ( 13 , %_cont ) ;
 946: LD_INT 13
 948: PPUSH
 949: LD_STRING %_cont
 951: PPUSH
 952: CALL_OW 340
// end ;
 956: PPOPN 2
 958: END
// export function SaveCargos ; var i ; begin
 959: LD_INT 0
 961: PPUSH
 962: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 963: LD_ADDR_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: PPUSH
 971: LD_INT 22
 973: PUSH
 974: LD_INT 1
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 33
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 34
 993: PUSH
 994: LD_INT 12
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 70
1010: PUSH
1011: FOR_IN
1012: IFFALSE 1040
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
1014: LD_ADDR_EXP 20
1018: PUSH
1019: LD_EXP 20
1023: PUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL 5166 0 1
1033: PUSH
1034: EMPTY
1035: LIST
1036: ADD
1037: ST_TO_ADDR
1038: GO 1011
1040: POP
1041: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
1042: LD_EXP 20
1046: PPUSH
1047: LD_STRING 13_ResourcesInCargo13_1
1049: PPUSH
1050: CALL_OW 39
// end ;
1054: LD_VAR 0 1
1058: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
1059: LD_INT 0
1061: PPUSH
1062: PPUSH
1063: PPUSH
1064: PPUSH
1065: PPUSH
1066: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_STRING 10_EpsilonEnv
1074: PPUSH
1075: EMPTY
1076: PPUSH
1077: CALL_OW 30
1081: ST_TO_ADDR
// if not tmp then
1082: LD_VAR 0 2
1086: NOT
1087: IFFALSE 1091
// exit ;
1089: GO 1234
// list := ListEnvironmentArea ( epsilonTerrain ) ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_INT 1
1098: PPUSH
1099: CALL_OW 353
1103: ST_TO_ADDR
// if not list then
1104: LD_VAR 0 3
1108: NOT
1109: IFFALSE 1113
// exit ;
1111: GO 1234
// for i in list do
1113: LD_ADDR_VAR 0 4
1117: PUSH
1118: LD_VAR 0 3
1122: PUSH
1123: FOR_IN
1124: IFFALSE 1232
// begin exist := false ;
1126: LD_ADDR_VAR 0 6
1130: PUSH
1131: LD_INT 0
1133: ST_TO_ADDR
// for j in tmp do
1134: LD_ADDR_VAR 0 5
1138: PUSH
1139: LD_VAR 0 2
1143: PUSH
1144: FOR_IN
1145: IFFALSE 1199
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
1147: LD_VAR 0 4
1151: PUSH
1152: LD_INT 1
1154: ARRAY
1155: PUSH
1156: LD_VAR 0 5
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: EQUAL
1165: PUSH
1166: LD_VAR 0 4
1170: PUSH
1171: LD_INT 2
1173: ARRAY
1174: PUSH
1175: LD_VAR 0 5
1179: PUSH
1180: LD_INT 2
1182: ARRAY
1183: EQUAL
1184: AND
1185: IFFALSE 1197
// begin exist := true ;
1187: LD_ADDR_VAR 0 6
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// break ;
1195: GO 1199
// end ;
1197: GO 1144
1199: POP
1200: POP
// if not exist then
1201: LD_VAR 0 6
1205: NOT
1206: IFFALSE 1230
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1208: LD_VAR 0 4
1212: PUSH
1213: LD_INT 1
1215: ARRAY
1216: PPUSH
1217: LD_VAR 0 4
1221: PUSH
1222: LD_INT 2
1224: ARRAY
1225: PPUSH
1226: CALL_OW 347
// end ;
1230: GO 1123
1232: POP
1233: POP
// end ; end_of_file
1234: LD_VAR 0 1
1238: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
1245: LD_ADDR_VAR 0 4
1249: PUSH
1250: LD_INT 22
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 2
1262: PUSH
1263: LD_INT 30
1265: PUSH
1266: LD_INT 0
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: LD_INT 30
1275: PUSH
1276: LD_INT 1
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: ST_TO_ADDR
// uc_side = 1 ;
1297: LD_ADDR_OWVAR 20
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1305: LD_ADDR_EXP 1
1309: PUSH
1310: LD_STRING JMM
1312: PPUSH
1313: LD_INT 1
1315: PPUSH
1316: CALL 4035 0 2
1320: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1321: LD_ADDR_EXP 3
1325: PUSH
1326: LD_STRING Lisa
1328: PPUSH
1329: LD_INT 1
1331: PPUSH
1332: CALL 4035 0 2
1336: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1337: LD_ADDR_EXP 4
1341: PUSH
1342: LD_STRING Donaldson
1344: PPUSH
1345: LD_INT 1
1347: PPUSH
1348: CALL 4035 0 2
1352: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1353: LD_ADDR_EXP 5
1357: PUSH
1358: LD_STRING Bobby
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL 4035 0 2
1368: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1369: LD_ADDR_EXP 6
1373: PUSH
1374: LD_STRING Cyrus
1376: PPUSH
1377: LD_INT 1
1379: PPUSH
1380: CALL 4035 0 2
1384: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1385: LD_ADDR_EXP 7
1389: PUSH
1390: LD_STRING Denis
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: CALL 4035 0 2
1400: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1401: LD_ADDR_EXP 8
1405: PUSH
1406: LD_STRING Brown
1408: PPUSH
1409: LD_INT 1
1411: PPUSH
1412: CALL 4035 0 2
1416: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1417: LD_ADDR_EXP 9
1421: PUSH
1422: LD_STRING Gladstone
1424: PPUSH
1425: LD_INT 1
1427: PPUSH
1428: CALL 4035 0 2
1432: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1433: LD_ADDR_EXP 10
1437: PUSH
1438: LD_STRING Houten
1440: PPUSH
1441: LD_INT 1
1443: PPUSH
1444: CALL 4035 0 2
1448: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1449: LD_ADDR_EXP 11
1453: PUSH
1454: LD_STRING Cornell
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: CALL 4035 0 2
1464: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1465: LD_ADDR_EXP 12
1469: PUSH
1470: LD_STRING Gary
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 4035 0 2
1480: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1481: LD_ADDR_EXP 13
1485: PUSH
1486: LD_STRING Frank
1488: PPUSH
1489: LD_INT 1
1491: PPUSH
1492: CALL 4035 0 2
1496: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1497: LD_ADDR_EXP 14
1501: PUSH
1502: LD_STRING Kikuchi
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL 4035 0 2
1512: ST_TO_ADDR
// Stevens = PrepareUnit2 ( Stevens , false ) ;
1513: LD_ADDR_EXP 15
1517: PUSH
1518: LD_STRING Stevens
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL 4035 0 2
1528: ST_TO_ADDR
// Powell = PrepareUnit2 ( Powell , false ) ;
1529: LD_ADDR_EXP 2
1533: PUSH
1534: LD_STRING Powell
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL 4035 0 2
1544: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1545: LD_EXP 1
1549: PPUSH
1550: LD_VAR 0 4
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 250
1563: PPUSH
1564: LD_VAR 0 4
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: CALL_OW 251
1577: PPUSH
1578: LD_INT 4
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_VAR 0 4
1597: PUSH
1598: LD_INT 1
1600: ARRAY
1601: PPUSH
1602: CALL_OW 250
1606: PPUSH
1607: LD_VAR 0 4
1611: PUSH
1612: LD_INT 1
1614: ARRAY
1615: PPUSH
1616: CALL_OW 251
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: LD_INT 0
1626: PPUSH
1627: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1631: LD_EXP 3
1635: PPUSH
1636: LD_VAR 0 4
1640: PUSH
1641: LD_INT 1
1643: ARRAY
1644: PPUSH
1645: CALL_OW 250
1649: PPUSH
1650: LD_VAR 0 4
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: CALL_OW 251
1663: PPUSH
1664: LD_INT 35
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1674: LD_EXP 4
1678: PPUSH
1679: LD_VAR 0 4
1683: PUSH
1684: LD_INT 1
1686: ARRAY
1687: PPUSH
1688: CALL_OW 250
1692: PPUSH
1693: LD_VAR 0 4
1697: PUSH
1698: LD_INT 1
1700: ARRAY
1701: PPUSH
1702: CALL_OW 251
1706: PPUSH
1707: LD_INT 35
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1717: LD_EXP 5
1721: PPUSH
1722: LD_VAR 0 4
1726: PUSH
1727: LD_INT 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 250
1735: PPUSH
1736: LD_VAR 0 4
1740: PUSH
1741: LD_INT 1
1743: ARRAY
1744: PPUSH
1745: CALL_OW 251
1749: PPUSH
1750: LD_INT 35
1752: PPUSH
1753: LD_INT 0
1755: PPUSH
1756: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1760: LD_EXP 6
1764: PPUSH
1765: LD_VAR 0 4
1769: PUSH
1770: LD_INT 1
1772: ARRAY
1773: PPUSH
1774: CALL_OW 250
1778: PPUSH
1779: LD_VAR 0 4
1783: PUSH
1784: LD_INT 1
1786: ARRAY
1787: PPUSH
1788: CALL_OW 251
1792: PPUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_INT 0
1798: PPUSH
1799: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1803: LD_EXP 7
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: ARRAY
1816: PPUSH
1817: CALL_OW 250
1821: PPUSH
1822: LD_VAR 0 4
1826: PUSH
1827: LD_INT 1
1829: ARRAY
1830: PPUSH
1831: CALL_OW 251
1835: PPUSH
1836: LD_INT 35
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1846: LD_EXP 8
1850: PPUSH
1851: LD_VAR 0 4
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 250
1864: PPUSH
1865: LD_VAR 0 4
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: CALL_OW 251
1878: PPUSH
1879: LD_INT 35
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1889: LD_EXP 9
1893: PPUSH
1894: LD_VAR 0 4
1898: PUSH
1899: LD_INT 1
1901: ARRAY
1902: PPUSH
1903: CALL_OW 250
1907: PPUSH
1908: LD_VAR 0 4
1912: PUSH
1913: LD_INT 1
1915: ARRAY
1916: PPUSH
1917: CALL_OW 251
1921: PPUSH
1922: LD_INT 35
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1932: LD_EXP 10
1936: PPUSH
1937: LD_VAR 0 4
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PUSH
1956: LD_INT 1
1958: ARRAY
1959: PPUSH
1960: CALL_OW 251
1964: PPUSH
1965: LD_INT 35
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1975: LD_EXP 11
1979: PPUSH
1980: LD_VAR 0 4
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: CALL_OW 250
1993: PPUSH
1994: LD_VAR 0 4
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: PPUSH
2003: CALL_OW 251
2007: PPUSH
2008: LD_INT 35
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2018: LD_EXP 12
2022: PPUSH
2023: LD_VAR 0 4
2027: PUSH
2028: LD_INT 1
2030: ARRAY
2031: PPUSH
2032: CALL_OW 250
2036: PPUSH
2037: LD_VAR 0 4
2041: PUSH
2042: LD_INT 1
2044: ARRAY
2045: PPUSH
2046: CALL_OW 251
2050: PPUSH
2051: LD_INT 35
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2061: LD_EXP 13
2065: PPUSH
2066: LD_VAR 0 4
2070: PUSH
2071: LD_INT 1
2073: ARRAY
2074: PPUSH
2075: CALL_OW 250
2079: PPUSH
2080: LD_VAR 0 4
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 251
2093: PPUSH
2094: LD_INT 35
2096: PPUSH
2097: LD_INT 0
2099: PPUSH
2100: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2104: LD_EXP 14
2108: PPUSH
2109: LD_VAR 0 4
2113: PUSH
2114: LD_INT 1
2116: ARRAY
2117: PPUSH
2118: CALL_OW 250
2122: PPUSH
2123: LD_VAR 0 4
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 251
2136: PPUSH
2137: LD_INT 35
2139: PPUSH
2140: LD_INT 0
2142: PPUSH
2143: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
2147: LD_VAR 0 4
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PPUSH
2156: LD_STRING epsilon
2158: PPUSH
2159: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
2163: LD_VAR 0 4
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: CALL_OW 274
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 3000
2182: PPUSH
2183: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
2187: LD_VAR 0 4
2191: PUSH
2192: LD_INT 1
2194: ARRAY
2195: PPUSH
2196: CALL_OW 274
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 500
2206: PPUSH
2207: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
2211: LD_VAR 0 4
2215: PUSH
2216: LD_INT 1
2218: ARRAY
2219: PPUSH
2220: CALL_OW 274
2224: PPUSH
2225: LD_INT 3
2227: PPUSH
2228: LD_INT 200
2230: PPUSH
2231: CALL_OW 277
// SetClass ( JMM , 1 ) ;
2235: LD_EXP 1
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
2247: LD_ADDR_EXP 16
2251: PUSH
2252: LD_STRING 12_other_survivors
2254: PPUSH
2255: CALL_OW 31
2259: ST_TO_ADDR
// others11 = CreateCharacterSet ( 12_others ) ;
2260: LD_ADDR_EXP 17
2264: PUSH
2265: LD_STRING 12_others
2267: PPUSH
2268: CALL_OW 31
2272: ST_TO_ADDR
// for i in others11 do
2273: LD_ADDR_VAR 0 2
2277: PUSH
2278: LD_EXP 17
2282: PUSH
2283: FOR_IN
2284: IFFALSE 2331
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 4
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PPUSH
2300: CALL_OW 250
2304: PPUSH
2305: LD_VAR 0 4
2309: PUSH
2310: LD_INT 1
2312: ARRAY
2313: PPUSH
2314: CALL_OW 251
2318: PPUSH
2319: LD_INT 15
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 50
2329: GO 2283
2331: POP
2332: POP
// for i in others12 do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: LD_EXP 16
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2391
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 4
2355: PUSH
2356: LD_INT 1
2358: ARRAY
2359: PPUSH
2360: CALL_OW 250
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 251
2378: PPUSH
2379: LD_INT 15
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: CALL_OW 50
2389: GO 2343
2391: POP
2392: POP
// end ;
2393: LD_VAR 0 1
2397: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2398: LD_INT 0
2400: PPUSH
2401: PPUSH
2402: PPUSH
2403: PPUSH
2404: PPUSH
2405: PPUSH
2406: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2407: LD_INT 113
2409: PPUSH
2410: LD_INT 50
2412: PPUSH
2413: LD_INT 1
2415: PPUSH
2416: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2420: LD_INT 104
2422: PPUSH
2423: LD_INT 24
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2433: LD_INT 43
2435: PPUSH
2436: LD_INT 79
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2446: LD_INT 43
2448: PPUSH
2449: LD_INT 68
2451: PPUSH
2452: LD_INT 1
2454: PPUSH
2455: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2459: LD_INT 99
2461: PPUSH
2462: LD_INT 114
2464: PPUSH
2465: LD_INT 1
2467: PPUSH
2468: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2472: LD_INT 103
2474: PPUSH
2475: LD_INT 114
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2485: LD_INT 152
2487: PPUSH
2488: LD_INT 85
2490: PPUSH
2491: LD_INT 1
2493: PPUSH
2494: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2498: LD_INT 156
2500: PPUSH
2501: LD_INT 92
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2511: LD_ADDR_VAR 0 2
2515: PUSH
2516: LD_STRING 10_EpsilonBase
2518: PPUSH
2519: EMPTY
2520: PPUSH
2521: CALL_OW 30
2525: ST_TO_ADDR
// if not blist then
2526: LD_VAR 0 2
2530: NOT
2531: IFFALSE 2535
// exit ;
2533: GO 3677
// for i in blist do
2535: LD_ADDR_VAR 0 3
2539: PUSH
2540: LD_VAR 0 2
2544: PUSH
2545: FOR_IN
2546: IFFALSE 2586
// if i [ 1 ] = 0 or i [ 1 ] = 1 then
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: ARRAY
2556: PUSH
2557: LD_INT 0
2559: EQUAL
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 1
2568: ARRAY
2569: PUSH
2570: LD_INT 1
2572: EQUAL
2573: OR
2574: IFFALSE 2584
// baseCorrect = 1 ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
2584: GO 2545
2586: POP
2587: POP
// if baseCorrect = 0 then
2588: LD_VAR 0 6
2592: PUSH
2593: LD_INT 0
2595: EQUAL
2596: IFFALSE 3303
// begin uc_side = 1 ;
2598: LD_ADDR_OWVAR 20
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// uc_nation = 1 ;
2606: LD_ADDR_OWVAR 21
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// bc_level = 10 ;
2614: LD_ADDR_OWVAR 43
2618: PUSH
2619: LD_INT 10
2621: ST_TO_ADDR
// bc_type = b_warehouse ;
2622: LD_ADDR_OWVAR 42
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2630: LD_INT 99
2632: PPUSH
2633: LD_INT 24
2635: PPUSH
2636: LD_INT 2
2638: PPUSH
2639: CALL_OW 47
// bc_type = b_bunker ;
2643: LD_ADDR_OWVAR 42
2647: PUSH
2648: LD_INT 32
2650: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2651: LD_ADDR_VAR 0 7
2655: PUSH
2656: LD_INT 124
2658: PPUSH
2659: LD_INT 42
2661: PPUSH
2662: LD_INT 4
2664: PPUSH
2665: CALL_OW 47
2669: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2670: LD_VAR 0 7
2674: PPUSH
2675: LD_INT 4
2677: PUSH
2678: LD_INT 5
2680: PUSH
2681: LD_INT 6
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: PUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: CALL_OW 12
2699: ARRAY
2700: PPUSH
2701: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2705: LD_ADDR_VAR 0 7
2709: PUSH
2710: LD_INT 111
2712: PPUSH
2713: LD_INT 16
2715: PPUSH
2716: LD_INT 4
2718: PPUSH
2719: CALL_OW 47
2723: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2724: LD_VAR 0 7
2728: PPUSH
2729: LD_INT 4
2731: PUSH
2732: LD_INT 5
2734: PUSH
2735: LD_INT 6
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 1
2745: PPUSH
2746: LD_INT 3
2748: PPUSH
2749: CALL_OW 12
2753: ARRAY
2754: PPUSH
2755: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2759: LD_ADDR_VAR 0 7
2763: PUSH
2764: LD_INT 113
2766: PPUSH
2767: LD_INT 21
2769: PPUSH
2770: LD_INT 4
2772: PPUSH
2773: CALL_OW 47
2777: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2778: LD_VAR 0 7
2782: PPUSH
2783: LD_INT 4
2785: PUSH
2786: LD_INT 5
2788: PUSH
2789: LD_INT 6
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PPUSH
2803: CALL_OW 12
2807: ARRAY
2808: PPUSH
2809: CALL_OW 431
// bc_type = 33 ;
2813: LD_ADDR_OWVAR 42
2817: PUSH
2818: LD_INT 33
2820: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2821: LD_ADDR_VAR 0 7
2825: PUSH
2826: LD_INT 95
2828: PPUSH
2829: LD_INT 41
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 47
2839: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2840: LD_VAR 0 7
2844: PPUSH
2845: LD_INT 4
2847: PUSH
2848: LD_INT 5
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: CALL_OW 12
2869: ARRAY
2870: PPUSH
2871: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2875: LD_ADDR_VAR 0 7
2879: PUSH
2880: LD_INT 97
2882: PPUSH
2883: LD_INT 48
2885: PPUSH
2886: LD_INT 1
2888: PPUSH
2889: CALL_OW 47
2893: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2894: LD_VAR 0 7
2898: PPUSH
2899: LD_INT 4
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 1
2915: PPUSH
2916: LD_INT 3
2918: PPUSH
2919: CALL_OW 12
2923: ARRAY
2924: PPUSH
2925: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2929: LD_ADDR_VAR 0 7
2933: PUSH
2934: LD_INT 86
2936: PPUSH
2937: LD_INT 19
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: CALL_OW 47
2947: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2948: LD_VAR 0 7
2952: PPUSH
2953: LD_INT 4
2955: PUSH
2956: LD_INT 5
2958: PUSH
2959: LD_INT 6
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 1
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 12
2977: ARRAY
2978: PPUSH
2979: CALL_OW 431
// bc_type = 30 ;
2983: LD_ADDR_OWVAR 42
2987: PUSH
2988: LD_INT 30
2990: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2991: LD_INT 104
2993: PPUSH
2994: LD_INT 24
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: CALL_OW 47
// bc_type = 29 ;
3004: LD_ADDR_OWVAR 42
3008: PUSH
3009: LD_INT 29
3011: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
3012: LD_INT 113
3014: PPUSH
3015: LD_INT 50
3017: PPUSH
3018: LD_INT 3
3020: PPUSH
3021: CALL_OW 47
// bc_type = 27 ;
3025: LD_ADDR_OWVAR 42
3029: PUSH
3030: LD_INT 27
3032: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
3033: LD_INT 98
3035: PPUSH
3036: LD_INT 26
3038: PPUSH
3039: LD_INT 2
3041: PPUSH
3042: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
3046: LD_INT 95
3048: PPUSH
3049: LD_INT 23
3051: PPUSH
3052: LD_INT 3
3054: PPUSH
3055: CALL_OW 47
// bc_type = 28 ;
3059: LD_ADDR_OWVAR 42
3063: PUSH
3064: LD_INT 28
3066: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
3067: LD_INT 107
3069: PPUSH
3070: LD_INT 32
3072: PPUSH
3073: LD_INT 1
3075: PPUSH
3076: CALL_OW 47
// bc_type = 3 ;
3080: LD_ADDR_OWVAR 42
3084: PUSH
3085: LD_INT 3
3087: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
3088: LD_INT 106
3090: PPUSH
3091: LD_INT 42
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 47
// bc_type = 16 ;
3101: LD_ADDR_OWVAR 42
3105: PUSH
3106: LD_INT 16
3108: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
3109: LD_INT 109
3111: PPUSH
3112: LD_INT 45
3114: PPUSH
3115: LD_INT 5
3117: PPUSH
3118: CALL_OW 47
// bc_type = 17 ;
3122: LD_ADDR_OWVAR 42
3126: PUSH
3127: LD_INT 17
3129: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
3130: LD_INT 106
3132: PPUSH
3133: LD_INT 46
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 47
// bc_type = 19 ;
3143: LD_ADDR_OWVAR 42
3147: PUSH
3148: LD_INT 19
3150: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
3151: LD_INT 103
3153: PPUSH
3154: LD_INT 42
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: CALL_OW 47
// bc_type = 21 ;
3164: LD_ADDR_OWVAR 42
3168: PUSH
3169: LD_INT 21
3171: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
3172: LD_INT 110
3174: PPUSH
3175: LD_INT 42
3177: PPUSH
3178: LD_INT 4
3180: PPUSH
3181: CALL_OW 47
// bc_type = 5 ;
3185: LD_ADDR_OWVAR 42
3189: PUSH
3190: LD_INT 5
3192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
3193: LD_INT 114
3195: PPUSH
3196: LD_INT 55
3198: PPUSH
3199: LD_INT 5
3201: PPUSH
3202: CALL_OW 47
// bc_type = 36 ;
3206: LD_ADDR_OWVAR 42
3210: PUSH
3211: LD_INT 36
3213: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
3214: LD_INT 96
3216: PPUSH
3217: LD_INT 28
3219: PPUSH
3220: LD_INT 2
3222: PPUSH
3223: CALL_OW 47
// bc_type = b_lab_full ;
3227: LD_ADDR_OWVAR 42
3231: PUSH
3232: LD_INT 8
3234: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3235: LD_ADDR_OWVAR 44
3239: PUSH
3240: LD_INT 15
3242: ST_TO_ADDR
// bc_kind2 = b_lab_siberium ;
3243: LD_ADDR_OWVAR 45
3247: PUSH
3248: LD_INT 11
3250: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
3251: LD_INT 116
3253: PPUSH
3254: LD_INT 38
3256: PPUSH
3257: LD_INT 4
3259: PPUSH
3260: CALL_OW 47
// bc_type = b_lab_full ;
3264: LD_ADDR_OWVAR 42
3268: PUSH
3269: LD_INT 8
3271: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
3272: LD_ADDR_OWVAR 44
3276: PUSH
3277: LD_INT 10
3279: ST_TO_ADDR
// bc_kind2 = b_lab_computer ;
3280: LD_ADDR_OWVAR 45
3284: PUSH
3285: LD_INT 12
3287: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
3288: LD_INT 112
3290: PPUSH
3291: LD_INT 29
3293: PPUSH
3294: LD_INT 4
3296: PPUSH
3297: CALL_OW 47
// end else
3301: GO 3498
// begin uc_side := 1 ;
3303: LD_ADDR_OWVAR 20
3307: PUSH
3308: LD_INT 1
3310: ST_TO_ADDR
// uc_nation := 1 ;
3311: LD_ADDR_OWVAR 21
3315: PUSH
3316: LD_INT 1
3318: ST_TO_ADDR
// for i in blist do
3319: LD_ADDR_VAR 0 3
3323: PUSH
3324: LD_VAR 0 2
3328: PUSH
3329: FOR_IN
3330: IFFALSE 3496
// begin bc_type := i [ 1 ] ;
3332: LD_ADDR_OWVAR 42
3336: PUSH
3337: LD_VAR 0 3
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3346: LD_ADDR_OWVAR 43
3350: PUSH
3351: LD_VAR 0 3
3355: PUSH
3356: LD_INT 5
3358: ARRAY
3359: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3360: LD_VAR 0 3
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: PUSH
3369: LD_INT 7
3371: PUSH
3372: LD_INT 8
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: IN
3379: IFFALSE 3409
// begin bc_kind1 := i [ 7 ] ;
3381: LD_ADDR_OWVAR 44
3385: PUSH
3386: LD_VAR 0 3
3390: PUSH
3391: LD_INT 7
3393: ARRAY
3394: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3395: LD_ADDR_OWVAR 45
3399: PUSH
3400: LD_VAR 0 3
3404: PUSH
3405: LD_INT 8
3407: ARRAY
3408: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3409: LD_ADDR_VAR 0 4
3413: PUSH
3414: LD_VAR 0 3
3418: PUSH
3419: LD_INT 2
3421: ARRAY
3422: PPUSH
3423: LD_VAR 0 3
3427: PUSH
3428: LD_INT 3
3430: ARRAY
3431: PPUSH
3432: LD_VAR 0 3
3436: PUSH
3437: LD_INT 4
3439: ARRAY
3440: PPUSH
3441: CALL_OW 47
3445: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3446: LD_VAR 0 4
3450: PPUSH
3451: CALL_OW 266
3455: PUSH
3456: LD_INT 32
3458: EQUAL
3459: PUSH
3460: LD_VAR 0 4
3464: PPUSH
3465: CALL_OW 266
3469: PUSH
3470: LD_INT 33
3472: EQUAL
3473: OR
3474: IFFALSE 3494
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
3476: LD_VAR 0 4
3480: PPUSH
3481: LD_VAR 0 3
3485: PUSH
3486: LD_INT 7
3488: ARRAY
3489: PPUSH
3490: CALL_OW 431
// end ; end ;
3494: GO 3329
3496: POP
3497: POP
// end ; uc_side := 1 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 1
3505: ST_TO_ADDR
// uc_nation := 1 ;
3506: LD_ADDR_OWVAR 21
3510: PUSH
3511: LD_INT 1
3513: ST_TO_ADDR
// for i := 1 to 8 do
3514: LD_ADDR_VAR 0 3
3518: PUSH
3519: DOUBLE
3520: LD_INT 1
3522: DEC
3523: ST_TO_ADDR
3524: LD_INT 8
3526: PUSH
3527: FOR_TO
3528: IFFALSE 3675
// begin vc_chassis := [ us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3530: LD_ADDR_OWVAR 37
3534: PUSH
3535: LD_INT 5
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 1
3551: PPUSH
3552: LD_INT 3
3554: PPUSH
3555: CALL_OW 12
3559: ARRAY
3560: ST_TO_ADDR
// vc_engine := engine_siberite ;
3561: LD_ADDR_OWVAR 39
3565: PUSH
3566: LD_INT 3
3568: ST_TO_ADDR
// vc_control := control_manual ;
3569: LD_ADDR_OWVAR 38
3573: PUSH
3574: LD_INT 1
3576: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_double_gun , us_laser ] [ i mod 6 + 1 ] ;
3577: LD_ADDR_OWVAR 40
3581: PUSH
3582: LD_INT 7
3584: PUSH
3585: LD_INT 9
3587: PUSH
3588: LD_INT 12
3590: PUSH
3591: LD_INT 13
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: LD_INT 9
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: PUSH
3608: LD_VAR 0 3
3612: PUSH
3613: LD_INT 6
3615: MOD
3616: PUSH
3617: LD_INT 1
3619: PLUS
3620: ARRAY
3621: ST_TO_ADDR
// un := CreateVehicle ;
3622: LD_ADDR_VAR 0 5
3626: PUSH
3627: CALL_OW 45
3631: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3632: LD_VAR 0 5
3636: PPUSH
3637: LD_INT 0
3639: PPUSH
3640: LD_INT 5
3642: PPUSH
3643: CALL_OW 12
3647: PPUSH
3648: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3652: LD_VAR 0 5
3656: PPUSH
3657: LD_INT 78
3659: PPUSH
3660: LD_INT 31
3662: PPUSH
3663: LD_INT 8
3665: PPUSH
3666: LD_INT 0
3668: PPUSH
3669: CALL_OW 50
// end ;
3673: GO 3527
3675: POP
3676: POP
// end ;
3677: LD_VAR 0 1
3681: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3682: LD_INT 0
3684: PPUSH
3685: PPUSH
3686: PPUSH
3687: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
3688: LD_INT 22
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 21
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PPUSH
3712: CALL_OW 69
3716: PUSH
3717: LD_EXP 1
3721: PUSH
3722: LD_EXP 3
3726: PUSH
3727: LD_EXP 4
3731: PUSH
3732: LD_EXP 5
3736: PUSH
3737: LD_EXP 6
3741: PUSH
3742: LD_EXP 7
3746: PUSH
3747: LD_EXP 8
3751: PUSH
3752: LD_EXP 9
3756: PUSH
3757: LD_EXP 10
3761: PUSH
3762: LD_EXP 11
3766: PUSH
3767: LD_EXP 12
3771: PUSH
3772: LD_EXP 13
3776: PUSH
3777: LD_EXP 14
3781: PUSH
3782: LD_EXP 15
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 6
3805: LESS
3806: DIFF
3807: IFFALSE 4030
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3809: LD_ADDR_VAR 0 4
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 1
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 2
3826: PUSH
3827: LD_INT 30
3829: PUSH
3830: LD_INT 0
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 1
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 69
3860: ST_TO_ADDR
// uc_side = 1 ;
3861: LD_ADDR_OWVAR 20
3865: PUSH
3866: LD_INT 1
3868: ST_TO_ADDR
// uc_nation = 1 ;
3869: LD_ADDR_OWVAR 21
3873: PUSH
3874: LD_INT 1
3876: ST_TO_ADDR
// for i = 1 to 6 do
3877: LD_ADDR_VAR 0 2
3881: PUSH
3882: DOUBLE
3883: LD_INT 1
3885: DEC
3886: ST_TO_ADDR
3887: LD_INT 6
3889: PUSH
3890: FOR_TO
3891: IFFALSE 4028
// begin hc_gallery =  ;
3893: LD_ADDR_OWVAR 33
3897: PUSH
3898: LD_STRING 
3900: ST_TO_ADDR
// hc_name =  ;
3901: LD_ADDR_OWVAR 26
3905: PUSH
3906: LD_STRING 
3908: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3909: LD_INT 0
3911: PPUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 2
3917: PUSH
3918: LD_INT 3
3920: PUSH
3921: LD_INT 4
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 4
3935: PPUSH
3936: CALL_OW 12
3940: ARRAY
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_INT 8
3947: PPUSH
3948: CALL_OW 12
3952: PPUSH
3953: CALL_OW 380
// un = CreateHuman ;
3957: LD_ADDR_VAR 0 3
3961: PUSH
3962: CALL_OW 44
3966: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
3967: LD_ADDR_EXP 18
3971: PUSH
3972: LD_EXP 18
3976: PUSH
3977: LD_VAR 0 3
3981: ADD
3982: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_VAR 0 4
3992: PUSH
3993: LD_INT 1
3995: ARRAY
3996: PPUSH
3997: CALL_OW 250
4001: PPUSH
4002: LD_VAR 0 4
4006: PUSH
4007: LD_INT 1
4009: ARRAY
4010: PPUSH
4011: CALL_OW 251
4015: PPUSH
4016: LD_INT 15
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 50
// end ;
4026: GO 3890
4028: POP
4029: POP
// end ; end ; end_of_file
4030: LD_VAR 0 1
4034: RET
// export function PrepareUnit2 ( ident , exist_mode ) ; var unit ; begin
4035: LD_INT 0
4037: PPUSH
4038: PPUSH
// if exist_mode then
4039: LD_VAR 0 2
4043: IFFALSE 4190
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
4045: LD_EXP 21
4049: PUSH
4050: LD_VAR 0 1
4054: STR
4055: PPUSH
4056: CALL_OW 28
4060: PUSH
4061: LD_INT 1
4063: EQUAL
4064: IFFALSE 4089
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4066: LD_ADDR_VAR 0 4
4070: PUSH
4071: LD_EXP 21
4075: PUSH
4076: LD_VAR 0 1
4080: STR
4081: PPUSH
4082: CALL_OW 34
4086: ST_TO_ADDR
// end else
4087: GO 4188
// begin if TestCharacters ( 11_ & ident ) = true then
4089: LD_STRING 11_
4091: PUSH
4092: LD_VAR 0 1
4096: STR
4097: PPUSH
4098: CALL_OW 28
4102: PUSH
4103: LD_INT 1
4105: EQUAL
4106: IFFALSE 4129
// begin unit := CreateCharacter ( 11_ & ident ) ;
4108: LD_ADDR_VAR 0 4
4112: PUSH
4113: LD_STRING 11_
4115: PUSH
4116: LD_VAR 0 1
4120: STR
4121: PPUSH
4122: CALL_OW 34
4126: ST_TO_ADDR
// end else
4127: GO 4188
// begin if TestCharacters ( 10c_ & ident ) = true then
4129: LD_STRING 10c_
4131: PUSH
4132: LD_VAR 0 1
4136: STR
4137: PPUSH
4138: CALL_OW 28
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4169
// unit := CreateCharacter ( 10c_ & ident ) else
4148: LD_ADDR_VAR 0 4
4152: PUSH
4153: LD_STRING 10c_
4155: PUSH
4156: LD_VAR 0 1
4160: STR
4161: PPUSH
4162: CALL_OW 34
4166: ST_TO_ADDR
4167: GO 4188
// unit := CreateCharacter ( 10_ & ident ) ;
4169: LD_ADDR_VAR 0 4
4173: PUSH
4174: LD_STRING 10_
4176: PUSH
4177: LD_VAR 0 1
4181: STR
4182: PPUSH
4183: CALL_OW 34
4187: ST_TO_ADDR
// end ; end ; end else
4188: GO 4205
// begin unit := NewCharacter ( ident ) ;
4190: LD_ADDR_VAR 0 4
4194: PUSH
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 25
4204: ST_TO_ADDR
// end ; result := unit ;
4205: LD_ADDR_VAR 0 3
4209: PUSH
4210: LD_VAR 0 4
4214: ST_TO_ADDR
// end ;
4215: LD_VAR 0 3
4219: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4220: LD_INT 0
4222: PPUSH
// if unit in selectedTab then
4223: LD_VAR 0 1
4227: PUSH
4228: LD_VAR 0 3
4232: IN
4233: IFFALSE 4255
// SaveCharacters ( unit , 13c_ & unitString ) else
4235: LD_VAR 0 1
4239: PPUSH
4240: LD_STRING 13c_
4242: PUSH
4243: LD_VAR 0 2
4247: STR
4248: PPUSH
4249: CALL_OW 38
4253: GO 4273
// SaveCharacters ( unit , 13s_ & unitString ) ;
4255: LD_VAR 0 1
4259: PPUSH
4260: LD_STRING 13s_
4262: PUSH
4263: LD_VAR 0 2
4267: STR
4268: PPUSH
4269: CALL_OW 38
// end ;
4273: LD_VAR 0 4
4277: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4278: LD_INT 0
4280: PPUSH
4281: PPUSH
4282: PPUSH
4283: PPUSH
// selected := [ ] ;
4284: LD_ADDR_EXP 22
4288: PUSH
4289: EMPTY
4290: ST_TO_ADDR
// othersSelect := [ ] ;
4291: LD_ADDR_EXP 23
4295: PUSH
4296: EMPTY
4297: ST_TO_ADDR
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: LD_EXP 3
4307: PUSH
4308: LD_EXP 4
4312: PUSH
4313: LD_EXP 5
4317: PUSH
4318: LD_EXP 6
4322: PUSH
4323: LD_EXP 8
4327: PUSH
4328: LD_EXP 9
4332: PUSH
4333: LD_EXP 10
4337: PUSH
4338: LD_EXP 11
4342: PUSH
4343: LD_EXP 12
4347: PUSH
4348: LD_EXP 13
4352: PUSH
4353: LD_EXP 14
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: ST_TO_ADDR
// tmp = tmp ^ others11 ;
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: LD_VAR 0 3
4380: PUSH
4381: LD_EXP 17
4385: ADD
4386: ST_TO_ADDR
// tmp = tmp ^ others12 ;
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: LD_VAR 0 3
4396: PUSH
4397: LD_EXP 16
4401: ADD
4402: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
4403: LD_ADDR_VAR 0 3
4407: PUSH
4408: LD_VAR 0 3
4412: PUSH
4413: LD_EXP 18
4417: ADD
4418: ST_TO_ADDR
// for i in tmp do
4419: LD_ADDR_VAR 0 2
4423: PUSH
4424: LD_VAR 0 3
4428: PUSH
4429: FOR_IN
4430: IFFALSE 4469
// if GetClass ( i ) = 8 then
4432: LD_VAR 0 2
4436: PPUSH
4437: CALL_OW 257
4441: PUSH
4442: LD_INT 8
4444: EQUAL
4445: IFFALSE 4467
// SetClass ( i , rand ( 1 , 4 ) ) ;
4447: LD_VAR 0 2
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: LD_INT 4
4457: PPUSH
4458: CALL_OW 12
4462: PPUSH
4463: CALL_OW 336
4467: GO 4429
4469: POP
4470: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4471: LD_ADDR_EXP 22
4475: PUSH
4476: LD_STRING 1
4478: PPUSH
4479: LD_INT 6
4481: PPUSH
4482: LD_INT 6
4484: PPUSH
4485: LD_INT -5
4487: PUSH
4488: LD_EXP 1
4492: PUSH
4493: LD_EXP 15
4497: PUSH
4498: LD_INT -2
4500: PUSH
4501: LD_INT -3
4503: PUSH
4504: LD_INT -5
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: PUSH
4515: LD_VAR 0 3
4519: ADD
4520: PUSH
4521: LD_INT -6
4523: PUSH
4524: LD_INT -4
4526: PUSH
4527: LD_EXP 2
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: ADD
4537: PPUSH
4538: LD_INT 1
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 2
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 3
4560: PUSH
4561: LD_INT 0
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 4
4570: PUSH
4571: LD_INT 2
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: LD_INT 5
4580: PUSH
4581: LD_INT 0
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: PPUSH
4599: CALL_OW 42
4603: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4604: LD_ADDR_EXP 23
4608: PUSH
4609: LD_EXP 22
4613: PUSH
4614: LD_EXP 3
4618: PUSH
4619: LD_EXP 4
4623: PUSH
4624: LD_EXP 5
4628: PUSH
4629: LD_EXP 6
4633: PUSH
4634: LD_EXP 7
4638: PUSH
4639: LD_EXP 8
4643: PUSH
4644: LD_EXP 9
4648: PUSH
4649: LD_EXP 10
4653: PUSH
4654: LD_EXP 11
4658: PUSH
4659: LD_EXP 12
4663: PUSH
4664: LD_EXP 13
4668: PUSH
4669: LD_EXP 14
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: DIFF
4688: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4689: LD_ADDR_VAR 0 4
4693: PUSH
4694: LD_VAR 0 3
4698: PUSH
4699: LD_EXP 22
4703: DIFF
4704: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4705: LD_ADDR_VAR 0 4
4709: PUSH
4710: LD_VAR 0 4
4714: PUSH
4715: LD_EXP 3
4719: PUSH
4720: LD_EXP 4
4724: PUSH
4725: LD_EXP 5
4729: PUSH
4730: LD_EXP 6
4734: PUSH
4735: LD_EXP 7
4739: PUSH
4740: LD_EXP 8
4744: PUSH
4745: LD_EXP 9
4749: PUSH
4750: LD_EXP 10
4754: PUSH
4755: LD_EXP 11
4759: PUSH
4760: LD_EXP 12
4764: PUSH
4765: LD_EXP 13
4769: PUSH
4770: LD_EXP 14
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: DIFF
4789: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4790: LD_VAR 0 4
4794: PPUSH
4795: LD_STRING 13s_others
4797: PPUSH
4798: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4802: LD_EXP 23
4806: PPUSH
4807: LD_STRING 13c_others
4809: PPUSH
4810: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4814: LD_EXP 1
4818: PPUSH
4819: LD_STRING 13c_JMM
4821: PPUSH
4822: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4826: LD_EXP 15
4830: PPUSH
4831: LD_STRING 13c_Stevens
4833: PPUSH
4834: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4838: LD_EXP 3
4842: PPUSH
4843: LD_STRING Lisa
4845: PPUSH
4846: LD_EXP 22
4850: PPUSH
4851: CALL 4220 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4855: LD_EXP 8
4859: PPUSH
4860: LD_STRING Brown
4862: PPUSH
4863: LD_EXP 22
4867: PPUSH
4868: CALL 4220 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4872: LD_EXP 4
4876: PPUSH
4877: LD_STRING Donaldson
4879: PPUSH
4880: LD_EXP 22
4884: PPUSH
4885: CALL 4220 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4889: LD_EXP 5
4893: PPUSH
4894: LD_STRING Bobby
4896: PPUSH
4897: LD_EXP 22
4901: PPUSH
4902: CALL 4220 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4906: LD_EXP 6
4910: PPUSH
4911: LD_STRING Cyrus
4913: PPUSH
4914: LD_EXP 22
4918: PPUSH
4919: CALL 4220 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4923: LD_EXP 7
4927: PPUSH
4928: LD_STRING Denis
4930: PPUSH
4931: LD_EXP 22
4935: PPUSH
4936: CALL 4220 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4940: LD_EXP 9
4944: PPUSH
4945: LD_STRING Gladstone
4947: PPUSH
4948: LD_EXP 22
4952: PPUSH
4953: CALL 4220 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4957: LD_EXP 10
4961: PPUSH
4962: LD_STRING Houten
4964: PPUSH
4965: LD_EXP 22
4969: PPUSH
4970: CALL 4220 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4974: LD_EXP 11
4978: PPUSH
4979: LD_STRING Cornel
4981: PPUSH
4982: LD_EXP 22
4986: PPUSH
4987: CALL 4220 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4991: LD_EXP 12
4995: PPUSH
4996: LD_STRING Gary
4998: PPUSH
4999: LD_EXP 22
5003: PPUSH
5004: CALL 4220 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5008: LD_EXP 13
5012: PPUSH
5013: LD_STRING Frank
5015: PPUSH
5016: LD_EXP 22
5020: PPUSH
5021: CALL 4220 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5025: LD_EXP 14
5029: PPUSH
5030: LD_STRING Kikuchi
5032: PPUSH
5033: LD_EXP 22
5037: PPUSH
5038: CALL 4220 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5042: LD_INT 22
5044: PUSH
5045: LD_INT 1
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: LD_INT 21
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PPUSH
5066: CALL_OW 69
5070: PPUSH
5071: LD_INT 4
5073: PPUSH
5074: CALL_OW 235
// SetSide ( selected , 1 ) ;
5078: LD_EXP 22
5082: PPUSH
5083: LD_INT 1
5085: PPUSH
5086: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5090: LD_EXP 1
5094: PUSH
5095: LD_EXP 15
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , 4 ] ] ) do
5111: LD_ADDR_VAR 0 2
5115: PUSH
5116: LD_INT 21
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_INT 4
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PPUSH
5140: CALL_OW 69
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5159
// RemoveUnit ( i ) ;
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 64
5157: GO 5145
5159: POP
5160: POP
// end ;
5161: LD_VAR 0 1
5165: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5170: LD_ADDR_VAR 0 2
5174: PUSH
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 289
5187: PUSH
5188: LD_VAR 0 1
5192: PPUSH
5193: LD_INT 2
5195: PPUSH
5196: CALL_OW 289
5200: PUSH
5201: LD_VAR 0 1
5205: PPUSH
5206: LD_INT 3
5208: PPUSH
5209: CALL_OW 289
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: LIST
5218: ST_TO_ADDR
// end ; end_of_file
5219: LD_VAR 0 2
5223: RET
// on Command ( comandid ) do var i ;
5224: LD_INT 0
5226: PPUSH
// begin if comandid = 65 then
5227: LD_VAR 0 1
5231: PUSH
5232: LD_INT 65
5234: EQUAL
5235: IFFALSE 5276
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: PUSH
5260: FOR_IN
5261: IFFALSE 5274
// ComStop ( i ) ;
5263: LD_VAR 0 2
5267: PPUSH
5268: CALL_OW 141
5272: GO 5260
5274: POP
5275: POP
// end ;
5276: PPOPN 2
5278: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL 19661 0 1
// if un = JMM then
5288: LD_VAR 0 1
5292: PUSH
5293: LD_EXP 1
5297: EQUAL
5298: IFFALSE 5307
// YouLost ( JMM ) ;
5300: LD_STRING JMM
5302: PPUSH
5303: CALL_OW 104
// end ;
5307: PPOPN 1
5309: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5310: LD_VAR 0 1
5314: PPUSH
5315: LD_VAR 0 2
5319: PPUSH
5320: CALL 19783 0 2
// end ; end_of_file
5324: PPOPN 2
5326: END
// every 0 0$1 do
5327: GO 5329
5329: DISABLE
// begin enable ;
5330: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5331: LD_STRING updateTimer(
5333: PUSH
5334: LD_OWVAR 1
5338: STR
5339: PUSH
5340: LD_STRING );
5342: STR
5343: PPUSH
5344: CALL_OW 559
// end ;
5348: END
// export function SOS_MapStart ( ) ; begin
5349: LD_INT 0
5351: PPUSH
// if streamModeActive then
5352: LD_EXP 24
5356: IFFALSE 5365
// DefineStreamItems ( true ) ;
5358: LD_INT 1
5360: PPUSH
5361: CALL 7015 0 1
// UpdateFactoryWaypoints ( ) ;
5365: CALL 20599 0 0
// end ;
5369: LD_VAR 0 1
5373: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5374: LD_INT 0
5376: PPUSH
// if p2 = 100 then
5377: LD_VAR 0 2
5381: PUSH
5382: LD_INT 100
5384: EQUAL
5385: IFFALSE 6388
// begin if not StreamModeActive then
5387: LD_EXP 24
5391: NOT
5392: IFFALSE 5402
// StreamModeActive := true ;
5394: LD_ADDR_EXP 24
5398: PUSH
5399: LD_INT 1
5401: ST_TO_ADDR
// if p3 = 0 then
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 0
5409: EQUAL
5410: IFFALSE 5416
// InitStreamMode ;
5412: CALL 6551 0 0
// if p3 = 1 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 1
5423: EQUAL
5424: IFFALSE 5434
// sRocket := true ;
5426: LD_ADDR_EXP 29
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 2 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 2
5441: EQUAL
5442: IFFALSE 5452
// sSpeed := true ;
5444: LD_ADDR_EXP 28
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 3 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 3
5459: EQUAL
5460: IFFALSE 5470
// sEngine := true ;
5462: LD_ADDR_EXP 30
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 4 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 4
5477: EQUAL
5478: IFFALSE 5488
// sSpec := true ;
5480: LD_ADDR_EXP 27
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 5 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 5
5495: EQUAL
5496: IFFALSE 5506
// sLevel := true ;
5498: LD_ADDR_EXP 31
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 6 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 6
5513: EQUAL
5514: IFFALSE 5524
// sArmoury := true ;
5516: LD_ADDR_EXP 32
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 7 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 7
5531: EQUAL
5532: IFFALSE 5542
// sRadar := true ;
5534: LD_ADDR_EXP 33
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 8 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 8
5549: EQUAL
5550: IFFALSE 5560
// sBunker := true ;
5552: LD_ADDR_EXP 34
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 9 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 9
5567: EQUAL
5568: IFFALSE 5578
// sHack := true ;
5570: LD_ADDR_EXP 35
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 10 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 10
5585: EQUAL
5586: IFFALSE 5596
// sFire := true ;
5588: LD_ADDR_EXP 36
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 11 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 11
5603: EQUAL
5604: IFFALSE 5614
// sRefresh := true ;
5606: LD_ADDR_EXP 37
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 12 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 12
5621: EQUAL
5622: IFFALSE 5632
// sExp := true ;
5624: LD_ADDR_EXP 38
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 13 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 13
5639: EQUAL
5640: IFFALSE 5650
// sDepot := true ;
5642: LD_ADDR_EXP 39
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 14 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 14
5657: EQUAL
5658: IFFALSE 5668
// sFlag := true ;
5660: LD_ADDR_EXP 40
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 15 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 15
5675: EQUAL
5676: IFFALSE 5686
// sKamikadze := true ;
5678: LD_ADDR_EXP 48
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 16 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 16
5693: EQUAL
5694: IFFALSE 5704
// sTroll := true ;
5696: LD_ADDR_EXP 49
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 17 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 17
5711: EQUAL
5712: IFFALSE 5722
// sSlow := true ;
5714: LD_ADDR_EXP 50
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 18 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 18
5729: EQUAL
5730: IFFALSE 5740
// sLack := true ;
5732: LD_ADDR_EXP 51
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 19 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 19
5747: EQUAL
5748: IFFALSE 5758
// sTank := true ;
5750: LD_ADDR_EXP 53
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 20 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 20
5765: EQUAL
5766: IFFALSE 5776
// sRemote := true ;
5768: LD_ADDR_EXP 54
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 21 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 21
5783: EQUAL
5784: IFFALSE 5794
// sPowell := true ;
5786: LD_ADDR_EXP 55
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 22 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 22
5801: EQUAL
5802: IFFALSE 5812
// sTeleport := true ;
5804: LD_ADDR_EXP 58
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 23 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 23
5819: EQUAL
5820: IFFALSE 5830
// sOilTower := true ;
5822: LD_ADDR_EXP 60
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 24 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 24
5837: EQUAL
5838: IFFALSE 5848
// sShovel := true ;
5840: LD_ADDR_EXP 61
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 25 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 25
5855: EQUAL
5856: IFFALSE 5866
// sSheik := true ;
5858: LD_ADDR_EXP 62
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 26 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 26
5873: EQUAL
5874: IFFALSE 5884
// sEarthquake := true ;
5876: LD_ADDR_EXP 64
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 27 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 27
5891: EQUAL
5892: IFFALSE 5902
// sAI := true ;
5894: LD_ADDR_EXP 65
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 28 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 28
5909: EQUAL
5910: IFFALSE 5920
// sCargo := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// if p3 = 29 then
5920: LD_VAR 0 3
5924: PUSH
5925: LD_INT 29
5927: EQUAL
5928: IFFALSE 5938
// sDLaser := true ;
5930: LD_ADDR_EXP 69
5934: PUSH
5935: LD_INT 1
5937: ST_TO_ADDR
// if p3 = 30 then
5938: LD_VAR 0 3
5942: PUSH
5943: LD_INT 30
5945: EQUAL
5946: IFFALSE 5956
// sExchange := true ;
5948: LD_ADDR_EXP 70
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
// if p3 = 31 then
5956: LD_VAR 0 3
5960: PUSH
5961: LD_INT 31
5963: EQUAL
5964: IFFALSE 5974
// sFac := true ;
5966: LD_ADDR_EXP 71
5970: PUSH
5971: LD_INT 1
5973: ST_TO_ADDR
// if p3 = 32 then
5974: LD_VAR 0 3
5978: PUSH
5979: LD_INT 32
5981: EQUAL
5982: IFFALSE 5992
// sPower := true ;
5984: LD_ADDR_EXP 72
5988: PUSH
5989: LD_INT 1
5991: ST_TO_ADDR
// if p3 = 33 then
5992: LD_VAR 0 3
5996: PUSH
5997: LD_INT 33
5999: EQUAL
6000: IFFALSE 6010
// sRandom := true ;
6002: LD_ADDR_EXP 73
6006: PUSH
6007: LD_INT 1
6009: ST_TO_ADDR
// if p3 = 34 then
6010: LD_VAR 0 3
6014: PUSH
6015: LD_INT 34
6017: EQUAL
6018: IFFALSE 6028
// sShield := true ;
6020: LD_ADDR_EXP 74
6024: PUSH
6025: LD_INT 1
6027: ST_TO_ADDR
// if p3 = 35 then
6028: LD_VAR 0 3
6032: PUSH
6033: LD_INT 35
6035: EQUAL
6036: IFFALSE 6046
// sTime := true ;
6038: LD_ADDR_EXP 75
6042: PUSH
6043: LD_INT 1
6045: ST_TO_ADDR
// if p3 = 36 then
6046: LD_VAR 0 3
6050: PUSH
6051: LD_INT 36
6053: EQUAL
6054: IFFALSE 6064
// sTools := true ;
6056: LD_ADDR_EXP 76
6060: PUSH
6061: LD_INT 1
6063: ST_TO_ADDR
// if p3 = 101 then
6064: LD_VAR 0 3
6068: PUSH
6069: LD_INT 101
6071: EQUAL
6072: IFFALSE 6082
// sSold := true ;
6074: LD_ADDR_EXP 41
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// if p3 = 102 then
6082: LD_VAR 0 3
6086: PUSH
6087: LD_INT 102
6089: EQUAL
6090: IFFALSE 6100
// sDiff := true ;
6092: LD_ADDR_EXP 42
6096: PUSH
6097: LD_INT 1
6099: ST_TO_ADDR
// if p3 = 103 then
6100: LD_VAR 0 3
6104: PUSH
6105: LD_INT 103
6107: EQUAL
6108: IFFALSE 6118
// sFog := true ;
6110: LD_ADDR_EXP 45
6114: PUSH
6115: LD_INT 1
6117: ST_TO_ADDR
// if p3 = 104 then
6118: LD_VAR 0 3
6122: PUSH
6123: LD_INT 104
6125: EQUAL
6126: IFFALSE 6136
// sReset := true ;
6128: LD_ADDR_EXP 46
6132: PUSH
6133: LD_INT 1
6135: ST_TO_ADDR
// if p3 = 105 then
6136: LD_VAR 0 3
6140: PUSH
6141: LD_INT 105
6143: EQUAL
6144: IFFALSE 6154
// sSun := true ;
6146: LD_ADDR_EXP 47
6150: PUSH
6151: LD_INT 1
6153: ST_TO_ADDR
// if p3 = 106 then
6154: LD_VAR 0 3
6158: PUSH
6159: LD_INT 106
6161: EQUAL
6162: IFFALSE 6172
// sTiger := true ;
6164: LD_ADDR_EXP 43
6168: PUSH
6169: LD_INT 1
6171: ST_TO_ADDR
// if p3 = 107 then
6172: LD_VAR 0 3
6176: PUSH
6177: LD_INT 107
6179: EQUAL
6180: IFFALSE 6190
// sBomb := true ;
6182: LD_ADDR_EXP 44
6186: PUSH
6187: LD_INT 1
6189: ST_TO_ADDR
// if p3 = 108 then
6190: LD_VAR 0 3
6194: PUSH
6195: LD_INT 108
6197: EQUAL
6198: IFFALSE 6208
// sWound := true ;
6200: LD_ADDR_EXP 52
6204: PUSH
6205: LD_INT 1
6207: ST_TO_ADDR
// if p3 = 109 then
6208: LD_VAR 0 3
6212: PUSH
6213: LD_INT 109
6215: EQUAL
6216: IFFALSE 6226
// sBetray := true ;
6218: LD_ADDR_EXP 56
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// if p3 = 110 then
6226: LD_VAR 0 3
6230: PUSH
6231: LD_INT 110
6233: EQUAL
6234: IFFALSE 6244
// sContamin := true ;
6236: LD_ADDR_EXP 57
6240: PUSH
6241: LD_INT 1
6243: ST_TO_ADDR
// if p3 = 111 then
6244: LD_VAR 0 3
6248: PUSH
6249: LD_INT 111
6251: EQUAL
6252: IFFALSE 6262
// sOil := true ;
6254: LD_ADDR_EXP 59
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// if p3 = 112 then
6262: LD_VAR 0 3
6266: PUSH
6267: LD_INT 112
6269: EQUAL
6270: IFFALSE 6280
// sStu := true ;
6272: LD_ADDR_EXP 63
6276: PUSH
6277: LD_INT 1
6279: ST_TO_ADDR
// if p3 = 113 then
6280: LD_VAR 0 3
6284: PUSH
6285: LD_INT 113
6287: EQUAL
6288: IFFALSE 6298
// sBazooka := true ;
6290: LD_ADDR_EXP 66
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// if p3 = 114 then
6298: LD_VAR 0 3
6302: PUSH
6303: LD_INT 114
6305: EQUAL
6306: IFFALSE 6316
// sMortar := true ;
6308: LD_ADDR_EXP 67
6312: PUSH
6313: LD_INT 1
6315: ST_TO_ADDR
// if p3 = 115 then
6316: LD_VAR 0 3
6320: PUSH
6321: LD_INT 115
6323: EQUAL
6324: IFFALSE 6334
// sRanger := true ;
6326: LD_ADDR_EXP 77
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// if p3 = 116 then
6334: LD_VAR 0 3
6338: PUSH
6339: LD_INT 116
6341: EQUAL
6342: IFFALSE 6352
// sComputer := true ;
6344: LD_ADDR_EXP 78
6348: PUSH
6349: LD_INT 1
6351: ST_TO_ADDR
// if p3 = 117 then
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 117
6359: EQUAL
6360: IFFALSE 6370
// s30 := true ;
6362: LD_ADDR_EXP 79
6366: PUSH
6367: LD_INT 1
6369: ST_TO_ADDR
// if p3 = 118 then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 118
6377: EQUAL
6378: IFFALSE 6388
// s60 := true ;
6380: LD_ADDR_EXP 80
6384: PUSH
6385: LD_INT 1
6387: ST_TO_ADDR
// end ; if p2 = 101 then
6388: LD_VAR 0 2
6392: PUSH
6393: LD_INT 101
6395: EQUAL
6396: IFFALSE 6524
// begin case p3 of 1 :
6398: LD_VAR 0 3
6402: PUSH
6403: LD_INT 1
6405: DOUBLE
6406: EQUAL
6407: IFTRUE 6411
6409: GO 6418
6411: POP
// hHackUnlimitedResources ; 2 :
6412: CALL 18622 0 0
6416: GO 6524
6418: LD_INT 2
6420: DOUBLE
6421: EQUAL
6422: IFTRUE 6426
6424: GO 6433
6426: POP
// hHackSetLevel10 ; 3 :
6427: CALL 18755 0 0
6431: GO 6524
6433: LD_INT 3
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6448
6441: POP
// hHackSetLevel10YourUnits ; 4 :
6442: CALL 18840 0 0
6446: GO 6524
6448: LD_INT 4
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6463
6456: POP
// hHackInvincible ; 5 :
6457: CALL 19288 0 0
6461: GO 6524
6463: LD_INT 5
6465: DOUBLE
6466: EQUAL
6467: IFTRUE 6471
6469: GO 6478
6471: POP
// hHackInvisible ; 6 :
6472: CALL 19399 0 0
6476: GO 6524
6478: LD_INT 6
6480: DOUBLE
6481: EQUAL
6482: IFTRUE 6486
6484: GO 6493
6486: POP
// hHackChangeYourSide ; 7 :
6487: CALL 19456 0 0
6491: GO 6524
6493: LD_INT 7
6495: DOUBLE
6496: EQUAL
6497: IFTRUE 6501
6499: GO 6508
6501: POP
// hHackChangeUnitSide ; 8 :
6502: CALL 19498 0 0
6506: GO 6524
6508: LD_INT 8
6510: DOUBLE
6511: EQUAL
6512: IFTRUE 6516
6514: GO 6523
6516: POP
// hHackFog ; end ;
6517: CALL 19599 0 0
6521: GO 6524
6523: POP
// end ; end ;
6524: LD_VAR 0 7
6528: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6529: GO 6531
6531: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6532: LD_STRING initStreamRollete();
6534: PPUSH
6535: CALL_OW 559
// InitStreamMode ;
6539: CALL 6551 0 0
// DefineStreamItems ( false ) ;
6543: LD_INT 0
6545: PPUSH
6546: CALL 7015 0 1
// end ;
6550: END
// function InitStreamMode ; begin
6551: LD_INT 0
6553: PPUSH
// streamModeActive := false ;
6554: LD_ADDR_EXP 24
6558: PUSH
6559: LD_INT 0
6561: ST_TO_ADDR
// normalCounter := 36 ;
6562: LD_ADDR_EXP 25
6566: PUSH
6567: LD_INT 36
6569: ST_TO_ADDR
// hardcoreCounter := 18 ;
6570: LD_ADDR_EXP 26
6574: PUSH
6575: LD_INT 18
6577: ST_TO_ADDR
// sRocket := false ;
6578: LD_ADDR_EXP 29
6582: PUSH
6583: LD_INT 0
6585: ST_TO_ADDR
// sSpeed := false ;
6586: LD_ADDR_EXP 28
6590: PUSH
6591: LD_INT 0
6593: ST_TO_ADDR
// sEngine := false ;
6594: LD_ADDR_EXP 30
6598: PUSH
6599: LD_INT 0
6601: ST_TO_ADDR
// sSpec := false ;
6602: LD_ADDR_EXP 27
6606: PUSH
6607: LD_INT 0
6609: ST_TO_ADDR
// sLevel := false ;
6610: LD_ADDR_EXP 31
6614: PUSH
6615: LD_INT 0
6617: ST_TO_ADDR
// sArmoury := false ;
6618: LD_ADDR_EXP 32
6622: PUSH
6623: LD_INT 0
6625: ST_TO_ADDR
// sRadar := false ;
6626: LD_ADDR_EXP 33
6630: PUSH
6631: LD_INT 0
6633: ST_TO_ADDR
// sBunker := false ;
6634: LD_ADDR_EXP 34
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// sHack := false ;
6642: LD_ADDR_EXP 35
6646: PUSH
6647: LD_INT 0
6649: ST_TO_ADDR
// sFire := false ;
6650: LD_ADDR_EXP 36
6654: PUSH
6655: LD_INT 0
6657: ST_TO_ADDR
// sRefresh := false ;
6658: LD_ADDR_EXP 37
6662: PUSH
6663: LD_INT 0
6665: ST_TO_ADDR
// sExp := false ;
6666: LD_ADDR_EXP 38
6670: PUSH
6671: LD_INT 0
6673: ST_TO_ADDR
// sDepot := false ;
6674: LD_ADDR_EXP 39
6678: PUSH
6679: LD_INT 0
6681: ST_TO_ADDR
// sFlag := false ;
6682: LD_ADDR_EXP 40
6686: PUSH
6687: LD_INT 0
6689: ST_TO_ADDR
// sKamikadze := false ;
6690: LD_ADDR_EXP 48
6694: PUSH
6695: LD_INT 0
6697: ST_TO_ADDR
// sTroll := false ;
6698: LD_ADDR_EXP 49
6702: PUSH
6703: LD_INT 0
6705: ST_TO_ADDR
// sSlow := false ;
6706: LD_ADDR_EXP 50
6710: PUSH
6711: LD_INT 0
6713: ST_TO_ADDR
// sLack := false ;
6714: LD_ADDR_EXP 51
6718: PUSH
6719: LD_INT 0
6721: ST_TO_ADDR
// sTank := false ;
6722: LD_ADDR_EXP 53
6726: PUSH
6727: LD_INT 0
6729: ST_TO_ADDR
// sRemote := false ;
6730: LD_ADDR_EXP 54
6734: PUSH
6735: LD_INT 0
6737: ST_TO_ADDR
// sPowell := false ;
6738: LD_ADDR_EXP 55
6742: PUSH
6743: LD_INT 0
6745: ST_TO_ADDR
// sTeleport := false ;
6746: LD_ADDR_EXP 58
6750: PUSH
6751: LD_INT 0
6753: ST_TO_ADDR
// sOilTower := false ;
6754: LD_ADDR_EXP 60
6758: PUSH
6759: LD_INT 0
6761: ST_TO_ADDR
// sShovel := false ;
6762: LD_ADDR_EXP 61
6766: PUSH
6767: LD_INT 0
6769: ST_TO_ADDR
// sSheik := false ;
6770: LD_ADDR_EXP 62
6774: PUSH
6775: LD_INT 0
6777: ST_TO_ADDR
// sEarthquake := false ;
6778: LD_ADDR_EXP 64
6782: PUSH
6783: LD_INT 0
6785: ST_TO_ADDR
// sAI := false ;
6786: LD_ADDR_EXP 65
6790: PUSH
6791: LD_INT 0
6793: ST_TO_ADDR
// sCargo := false ;
6794: LD_ADDR_EXP 68
6798: PUSH
6799: LD_INT 0
6801: ST_TO_ADDR
// sDLaser := false ;
6802: LD_ADDR_EXP 69
6806: PUSH
6807: LD_INT 0
6809: ST_TO_ADDR
// sExchange := false ;
6810: LD_ADDR_EXP 70
6814: PUSH
6815: LD_INT 0
6817: ST_TO_ADDR
// sFac := false ;
6818: LD_ADDR_EXP 71
6822: PUSH
6823: LD_INT 0
6825: ST_TO_ADDR
// sPower := false ;
6826: LD_ADDR_EXP 72
6830: PUSH
6831: LD_INT 0
6833: ST_TO_ADDR
// sRandom := false ;
6834: LD_ADDR_EXP 73
6838: PUSH
6839: LD_INT 0
6841: ST_TO_ADDR
// sShield := false ;
6842: LD_ADDR_EXP 74
6846: PUSH
6847: LD_INT 0
6849: ST_TO_ADDR
// sTime := false ;
6850: LD_ADDR_EXP 75
6854: PUSH
6855: LD_INT 0
6857: ST_TO_ADDR
// sTools := false ;
6858: LD_ADDR_EXP 76
6862: PUSH
6863: LD_INT 0
6865: ST_TO_ADDR
// sSold := false ;
6866: LD_ADDR_EXP 41
6870: PUSH
6871: LD_INT 0
6873: ST_TO_ADDR
// sDiff := false ;
6874: LD_ADDR_EXP 42
6878: PUSH
6879: LD_INT 0
6881: ST_TO_ADDR
// sFog := false ;
6882: LD_ADDR_EXP 45
6886: PUSH
6887: LD_INT 0
6889: ST_TO_ADDR
// sReset := false ;
6890: LD_ADDR_EXP 46
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// sSun := false ;
6898: LD_ADDR_EXP 47
6902: PUSH
6903: LD_INT 0
6905: ST_TO_ADDR
// sTiger := false ;
6906: LD_ADDR_EXP 43
6910: PUSH
6911: LD_INT 0
6913: ST_TO_ADDR
// sBomb := false ;
6914: LD_ADDR_EXP 44
6918: PUSH
6919: LD_INT 0
6921: ST_TO_ADDR
// sWound := false ;
6922: LD_ADDR_EXP 52
6926: PUSH
6927: LD_INT 0
6929: ST_TO_ADDR
// sBetray := false ;
6930: LD_ADDR_EXP 56
6934: PUSH
6935: LD_INT 0
6937: ST_TO_ADDR
// sContamin := false ;
6938: LD_ADDR_EXP 57
6942: PUSH
6943: LD_INT 0
6945: ST_TO_ADDR
// sOil := false ;
6946: LD_ADDR_EXP 59
6950: PUSH
6951: LD_INT 0
6953: ST_TO_ADDR
// sStu := false ;
6954: LD_ADDR_EXP 63
6958: PUSH
6959: LD_INT 0
6961: ST_TO_ADDR
// sBazooka := false ;
6962: LD_ADDR_EXP 66
6966: PUSH
6967: LD_INT 0
6969: ST_TO_ADDR
// sMortar := false ;
6970: LD_ADDR_EXP 67
6974: PUSH
6975: LD_INT 0
6977: ST_TO_ADDR
// sRanger := false ;
6978: LD_ADDR_EXP 77
6982: PUSH
6983: LD_INT 0
6985: ST_TO_ADDR
// sComputer := false ;
6986: LD_ADDR_EXP 78
6990: PUSH
6991: LD_INT 0
6993: ST_TO_ADDR
// s30 := false ;
6994: LD_ADDR_EXP 79
6998: PUSH
6999: LD_INT 0
7001: ST_TO_ADDR
// s60 := false ;
7002: LD_ADDR_EXP 80
7006: PUSH
7007: LD_INT 0
7009: ST_TO_ADDR
// end ;
7010: LD_VAR 0 1
7014: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7015: LD_INT 0
7017: PPUSH
7018: PPUSH
7019: PPUSH
7020: PPUSH
7021: PPUSH
7022: PPUSH
7023: PPUSH
// result := [ ] ;
7024: LD_ADDR_VAR 0 2
7028: PUSH
7029: EMPTY
7030: ST_TO_ADDR
// if campaign_id = 1 then
7031: LD_OWVAR 69
7035: PUSH
7036: LD_INT 1
7038: EQUAL
7039: IFFALSE 10205
// begin case mission_number of 1 :
7041: LD_OWVAR 70
7045: PUSH
7046: LD_INT 1
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7130
7054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7055: LD_ADDR_VAR 0 2
7059: PUSH
7060: LD_INT 2
7062: PUSH
7063: LD_INT 4
7065: PUSH
7066: LD_INT 11
7068: PUSH
7069: LD_INT 12
7071: PUSH
7072: LD_INT 15
7074: PUSH
7075: LD_INT 16
7077: PUSH
7078: LD_INT 22
7080: PUSH
7081: LD_INT 23
7083: PUSH
7084: LD_INT 26
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 101
7100: PUSH
7101: LD_INT 102
7103: PUSH
7104: LD_INT 106
7106: PUSH
7107: LD_INT 116
7109: PUSH
7110: LD_INT 117
7112: PUSH
7113: LD_INT 118
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: ST_TO_ADDR
7128: GO 10203
7130: LD_INT 2
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7222
7138: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7139: LD_ADDR_VAR 0 2
7143: PUSH
7144: LD_INT 2
7146: PUSH
7147: LD_INT 4
7149: PUSH
7150: LD_INT 11
7152: PUSH
7153: LD_INT 12
7155: PUSH
7156: LD_INT 15
7158: PUSH
7159: LD_INT 16
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_INT 23
7167: PUSH
7168: LD_INT 26
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 101
7184: PUSH
7185: LD_INT 102
7187: PUSH
7188: LD_INT 105
7190: PUSH
7191: LD_INT 106
7193: PUSH
7194: LD_INT 108
7196: PUSH
7197: LD_INT 116
7199: PUSH
7200: LD_INT 117
7202: PUSH
7203: LD_INT 118
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: ST_TO_ADDR
7220: GO 10203
7222: LD_INT 3
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7318
7230: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: LD_INT 2
7238: PUSH
7239: LD_INT 4
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 11
7247: PUSH
7248: LD_INT 12
7250: PUSH
7251: LD_INT 15
7253: PUSH
7254: LD_INT 16
7256: PUSH
7257: LD_INT 22
7259: PUSH
7260: LD_INT 26
7262: PUSH
7263: LD_INT 36
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 101
7280: PUSH
7281: LD_INT 102
7283: PUSH
7284: LD_INT 105
7286: PUSH
7287: LD_INT 106
7289: PUSH
7290: LD_INT 108
7292: PUSH
7293: LD_INT 116
7295: PUSH
7296: LD_INT 117
7298: PUSH
7299: LD_INT 118
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: ST_TO_ADDR
7316: GO 10203
7318: LD_INT 4
7320: DOUBLE
7321: EQUAL
7322: IFTRUE 7326
7324: GO 7422
7326: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7327: LD_ADDR_VAR 0 2
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 4
7337: PUSH
7338: LD_INT 5
7340: PUSH
7341: LD_INT 8
7343: PUSH
7344: LD_INT 11
7346: PUSH
7347: LD_INT 12
7349: PUSH
7350: LD_INT 15
7352: PUSH
7353: LD_INT 16
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 23
7361: PUSH
7362: LD_INT 26
7364: PUSH
7365: LD_INT 36
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 101
7384: PUSH
7385: LD_INT 102
7387: PUSH
7388: LD_INT 105
7390: PUSH
7391: LD_INT 106
7393: PUSH
7394: LD_INT 108
7396: PUSH
7397: LD_INT 116
7399: PUSH
7400: LD_INT 117
7402: PUSH
7403: LD_INT 118
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: ST_TO_ADDR
7420: GO 10203
7422: LD_INT 5
7424: DOUBLE
7425: EQUAL
7426: IFTRUE 7430
7428: GO 7542
7430: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7431: LD_ADDR_VAR 0 2
7435: PUSH
7436: LD_INT 2
7438: PUSH
7439: LD_INT 4
7441: PUSH
7442: LD_INT 5
7444: PUSH
7445: LD_INT 6
7447: PUSH
7448: LD_INT 8
7450: PUSH
7451: LD_INT 11
7453: PUSH
7454: LD_INT 12
7456: PUSH
7457: LD_INT 15
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: LD_INT 22
7465: PUSH
7466: LD_INT 23
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 26
7474: PUSH
7475: LD_INT 36
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 101
7496: PUSH
7497: LD_INT 102
7499: PUSH
7500: LD_INT 105
7502: PUSH
7503: LD_INT 106
7505: PUSH
7506: LD_INT 108
7508: PUSH
7509: LD_INT 109
7511: PUSH
7512: LD_INT 112
7514: PUSH
7515: LD_INT 116
7517: PUSH
7518: LD_INT 117
7520: PUSH
7521: LD_INT 118
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: ST_TO_ADDR
7540: GO 10203
7542: LD_INT 6
7544: DOUBLE
7545: EQUAL
7546: IFTRUE 7550
7548: GO 7682
7550: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7551: LD_ADDR_VAR 0 2
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: LD_INT 4
7561: PUSH
7562: LD_INT 5
7564: PUSH
7565: LD_INT 6
7567: PUSH
7568: LD_INT 8
7570: PUSH
7571: LD_INT 11
7573: PUSH
7574: LD_INT 12
7576: PUSH
7577: LD_INT 15
7579: PUSH
7580: LD_INT 16
7582: PUSH
7583: LD_INT 20
7585: PUSH
7586: LD_INT 21
7588: PUSH
7589: LD_INT 22
7591: PUSH
7592: LD_INT 23
7594: PUSH
7595: LD_INT 25
7597: PUSH
7598: LD_INT 26
7600: PUSH
7601: LD_INT 30
7603: PUSH
7604: LD_INT 31
7606: PUSH
7607: LD_INT 32
7609: PUSH
7610: LD_INT 36
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 101
7636: PUSH
7637: LD_INT 102
7639: PUSH
7640: LD_INT 105
7642: PUSH
7643: LD_INT 106
7645: PUSH
7646: LD_INT 108
7648: PUSH
7649: LD_INT 109
7651: PUSH
7652: LD_INT 112
7654: PUSH
7655: LD_INT 116
7657: PUSH
7658: LD_INT 117
7660: PUSH
7661: LD_INT 118
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: ST_TO_ADDR
7680: GO 10203
7682: LD_INT 7
7684: DOUBLE
7685: EQUAL
7686: IFTRUE 7690
7688: GO 7802
7690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7691: LD_ADDR_VAR 0 2
7695: PUSH
7696: LD_INT 2
7698: PUSH
7699: LD_INT 4
7701: PUSH
7702: LD_INT 5
7704: PUSH
7705: LD_INT 7
7707: PUSH
7708: LD_INT 11
7710: PUSH
7711: LD_INT 12
7713: PUSH
7714: LD_INT 15
7716: PUSH
7717: LD_INT 16
7719: PUSH
7720: LD_INT 20
7722: PUSH
7723: LD_INT 21
7725: PUSH
7726: LD_INT 22
7728: PUSH
7729: LD_INT 23
7731: PUSH
7732: LD_INT 25
7734: PUSH
7735: LD_INT 26
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 101
7756: PUSH
7757: LD_INT 102
7759: PUSH
7760: LD_INT 103
7762: PUSH
7763: LD_INT 105
7765: PUSH
7766: LD_INT 106
7768: PUSH
7769: LD_INT 108
7771: PUSH
7772: LD_INT 112
7774: PUSH
7775: LD_INT 116
7777: PUSH
7778: LD_INT 117
7780: PUSH
7781: LD_INT 118
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: ST_TO_ADDR
7800: GO 10203
7802: LD_INT 8
7804: DOUBLE
7805: EQUAL
7806: IFTRUE 7810
7808: GO 7950
7810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7811: LD_ADDR_VAR 0 2
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: LD_INT 4
7821: PUSH
7822: LD_INT 5
7824: PUSH
7825: LD_INT 6
7827: PUSH
7828: LD_INT 7
7830: PUSH
7831: LD_INT 8
7833: PUSH
7834: LD_INT 11
7836: PUSH
7837: LD_INT 12
7839: PUSH
7840: LD_INT 15
7842: PUSH
7843: LD_INT 16
7845: PUSH
7846: LD_INT 20
7848: PUSH
7849: LD_INT 21
7851: PUSH
7852: LD_INT 22
7854: PUSH
7855: LD_INT 23
7857: PUSH
7858: LD_INT 25
7860: PUSH
7861: LD_INT 26
7863: PUSH
7864: LD_INT 30
7866: PUSH
7867: LD_INT 31
7869: PUSH
7870: LD_INT 32
7872: PUSH
7873: LD_INT 36
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: PUSH
7898: LD_INT 101
7900: PUSH
7901: LD_INT 102
7903: PUSH
7904: LD_INT 103
7906: PUSH
7907: LD_INT 105
7909: PUSH
7910: LD_INT 106
7912: PUSH
7913: LD_INT 108
7915: PUSH
7916: LD_INT 109
7918: PUSH
7919: LD_INT 112
7921: PUSH
7922: LD_INT 116
7924: PUSH
7925: LD_INT 117
7927: PUSH
7928: LD_INT 118
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: ST_TO_ADDR
7948: GO 10203
7950: LD_INT 9
7952: DOUBLE
7953: EQUAL
7954: IFTRUE 7958
7956: GO 8106
7958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7959: LD_ADDR_VAR 0 2
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: LD_INT 4
7969: PUSH
7970: LD_INT 5
7972: PUSH
7973: LD_INT 6
7975: PUSH
7976: LD_INT 7
7978: PUSH
7979: LD_INT 8
7981: PUSH
7982: LD_INT 11
7984: PUSH
7985: LD_INT 12
7987: PUSH
7988: LD_INT 15
7990: PUSH
7991: LD_INT 16
7993: PUSH
7994: LD_INT 20
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 22
8002: PUSH
8003: LD_INT 23
8005: PUSH
8006: LD_INT 25
8008: PUSH
8009: LD_INT 26
8011: PUSH
8012: LD_INT 28
8014: PUSH
8015: LD_INT 30
8017: PUSH
8018: LD_INT 31
8020: PUSH
8021: LD_INT 32
8023: PUSH
8024: LD_INT 36
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 101
8052: PUSH
8053: LD_INT 102
8055: PUSH
8056: LD_INT 103
8058: PUSH
8059: LD_INT 105
8061: PUSH
8062: LD_INT 106
8064: PUSH
8065: LD_INT 108
8067: PUSH
8068: LD_INT 109
8070: PUSH
8071: LD_INT 112
8073: PUSH
8074: LD_INT 114
8076: PUSH
8077: LD_INT 116
8079: PUSH
8080: LD_INT 117
8082: PUSH
8083: LD_INT 118
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: ST_TO_ADDR
8104: GO 10203
8106: LD_INT 10
8108: DOUBLE
8109: EQUAL
8110: IFTRUE 8114
8112: GO 8310
8114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8115: LD_ADDR_VAR 0 2
8119: PUSH
8120: LD_INT 2
8122: PUSH
8123: LD_INT 4
8125: PUSH
8126: LD_INT 5
8128: PUSH
8129: LD_INT 6
8131: PUSH
8132: LD_INT 7
8134: PUSH
8135: LD_INT 8
8137: PUSH
8138: LD_INT 9
8140: PUSH
8141: LD_INT 10
8143: PUSH
8144: LD_INT 11
8146: PUSH
8147: LD_INT 12
8149: PUSH
8150: LD_INT 13
8152: PUSH
8153: LD_INT 14
8155: PUSH
8156: LD_INT 15
8158: PUSH
8159: LD_INT 16
8161: PUSH
8162: LD_INT 17
8164: PUSH
8165: LD_INT 18
8167: PUSH
8168: LD_INT 19
8170: PUSH
8171: LD_INT 20
8173: PUSH
8174: LD_INT 21
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 23
8182: PUSH
8183: LD_INT 24
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 26
8191: PUSH
8192: LD_INT 28
8194: PUSH
8195: LD_INT 30
8197: PUSH
8198: LD_INT 31
8200: PUSH
8201: LD_INT 32
8203: PUSH
8204: LD_INT 36
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 101
8240: PUSH
8241: LD_INT 102
8243: PUSH
8244: LD_INT 103
8246: PUSH
8247: LD_INT 104
8249: PUSH
8250: LD_INT 105
8252: PUSH
8253: LD_INT 106
8255: PUSH
8256: LD_INT 107
8258: PUSH
8259: LD_INT 108
8261: PUSH
8262: LD_INT 109
8264: PUSH
8265: LD_INT 110
8267: PUSH
8268: LD_INT 111
8270: PUSH
8271: LD_INT 112
8273: PUSH
8274: LD_INT 114
8276: PUSH
8277: LD_INT 116
8279: PUSH
8280: LD_INT 117
8282: PUSH
8283: LD_INT 118
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: ST_TO_ADDR
8308: GO 10203
8310: LD_INT 11
8312: DOUBLE
8313: EQUAL
8314: IFTRUE 8318
8316: GO 8522
8318: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8319: LD_ADDR_VAR 0 2
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 3
8329: PUSH
8330: LD_INT 4
8332: PUSH
8333: LD_INT 5
8335: PUSH
8336: LD_INT 6
8338: PUSH
8339: LD_INT 7
8341: PUSH
8342: LD_INT 8
8344: PUSH
8345: LD_INT 9
8347: PUSH
8348: LD_INT 10
8350: PUSH
8351: LD_INT 11
8353: PUSH
8354: LD_INT 12
8356: PUSH
8357: LD_INT 13
8359: PUSH
8360: LD_INT 14
8362: PUSH
8363: LD_INT 15
8365: PUSH
8366: LD_INT 16
8368: PUSH
8369: LD_INT 17
8371: PUSH
8372: LD_INT 18
8374: PUSH
8375: LD_INT 19
8377: PUSH
8378: LD_INT 20
8380: PUSH
8381: LD_INT 21
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_INT 23
8389: PUSH
8390: LD_INT 24
8392: PUSH
8393: LD_INT 25
8395: PUSH
8396: LD_INT 26
8398: PUSH
8399: LD_INT 28
8401: PUSH
8402: LD_INT 30
8404: PUSH
8405: LD_INT 31
8407: PUSH
8408: LD_INT 32
8410: PUSH
8411: LD_INT 34
8413: PUSH
8414: LD_INT 36
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: LD_INT 102
8455: PUSH
8456: LD_INT 103
8458: PUSH
8459: LD_INT 104
8461: PUSH
8462: LD_INT 105
8464: PUSH
8465: LD_INT 106
8467: PUSH
8468: LD_INT 107
8470: PUSH
8471: LD_INT 108
8473: PUSH
8474: LD_INT 109
8476: PUSH
8477: LD_INT 110
8479: PUSH
8480: LD_INT 111
8482: PUSH
8483: LD_INT 112
8485: PUSH
8486: LD_INT 114
8488: PUSH
8489: LD_INT 116
8491: PUSH
8492: LD_INT 117
8494: PUSH
8495: LD_INT 118
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: ST_TO_ADDR
8520: GO 10203
8522: LD_INT 12
8524: DOUBLE
8525: EQUAL
8526: IFTRUE 8530
8528: GO 8750
8530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: LD_INT 2
8541: PUSH
8542: LD_INT 3
8544: PUSH
8545: LD_INT 4
8547: PUSH
8548: LD_INT 5
8550: PUSH
8551: LD_INT 6
8553: PUSH
8554: LD_INT 7
8556: PUSH
8557: LD_INT 8
8559: PUSH
8560: LD_INT 9
8562: PUSH
8563: LD_INT 10
8565: PUSH
8566: LD_INT 11
8568: PUSH
8569: LD_INT 12
8571: PUSH
8572: LD_INT 13
8574: PUSH
8575: LD_INT 14
8577: PUSH
8578: LD_INT 15
8580: PUSH
8581: LD_INT 16
8583: PUSH
8584: LD_INT 17
8586: PUSH
8587: LD_INT 18
8589: PUSH
8590: LD_INT 19
8592: PUSH
8593: LD_INT 20
8595: PUSH
8596: LD_INT 21
8598: PUSH
8599: LD_INT 22
8601: PUSH
8602: LD_INT 23
8604: PUSH
8605: LD_INT 24
8607: PUSH
8608: LD_INT 25
8610: PUSH
8611: LD_INT 26
8613: PUSH
8614: LD_INT 27
8616: PUSH
8617: LD_INT 28
8619: PUSH
8620: LD_INT 30
8622: PUSH
8623: LD_INT 31
8625: PUSH
8626: LD_INT 32
8628: PUSH
8629: LD_INT 33
8631: PUSH
8632: LD_INT 34
8634: PUSH
8635: LD_INT 36
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 101
8676: PUSH
8677: LD_INT 102
8679: PUSH
8680: LD_INT 103
8682: PUSH
8683: LD_INT 104
8685: PUSH
8686: LD_INT 105
8688: PUSH
8689: LD_INT 106
8691: PUSH
8692: LD_INT 107
8694: PUSH
8695: LD_INT 108
8697: PUSH
8698: LD_INT 109
8700: PUSH
8701: LD_INT 110
8703: PUSH
8704: LD_INT 111
8706: PUSH
8707: LD_INT 112
8709: PUSH
8710: LD_INT 113
8712: PUSH
8713: LD_INT 114
8715: PUSH
8716: LD_INT 116
8718: PUSH
8719: LD_INT 117
8721: PUSH
8722: LD_INT 118
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: ST_TO_ADDR
8748: GO 10203
8750: LD_INT 13
8752: DOUBLE
8753: EQUAL
8754: IFTRUE 8758
8756: GO 8966
8758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: LD_INT 1
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: LD_INT 3
8772: PUSH
8773: LD_INT 4
8775: PUSH
8776: LD_INT 5
8778: PUSH
8779: LD_INT 8
8781: PUSH
8782: LD_INT 9
8784: PUSH
8785: LD_INT 10
8787: PUSH
8788: LD_INT 11
8790: PUSH
8791: LD_INT 12
8793: PUSH
8794: LD_INT 14
8796: PUSH
8797: LD_INT 15
8799: PUSH
8800: LD_INT 16
8802: PUSH
8803: LD_INT 17
8805: PUSH
8806: LD_INT 18
8808: PUSH
8809: LD_INT 19
8811: PUSH
8812: LD_INT 20
8814: PUSH
8815: LD_INT 21
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_INT 23
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: LD_INT 25
8829: PUSH
8830: LD_INT 26
8832: PUSH
8833: LD_INT 27
8835: PUSH
8836: LD_INT 28
8838: PUSH
8839: LD_INT 30
8841: PUSH
8842: LD_INT 31
8844: PUSH
8845: LD_INT 32
8847: PUSH
8848: LD_INT 33
8850: PUSH
8851: LD_INT 34
8853: PUSH
8854: LD_INT 36
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 101
8892: PUSH
8893: LD_INT 102
8895: PUSH
8896: LD_INT 103
8898: PUSH
8899: LD_INT 104
8901: PUSH
8902: LD_INT 105
8904: PUSH
8905: LD_INT 106
8907: PUSH
8908: LD_INT 107
8910: PUSH
8911: LD_INT 108
8913: PUSH
8914: LD_INT 109
8916: PUSH
8917: LD_INT 110
8919: PUSH
8920: LD_INT 111
8922: PUSH
8923: LD_INT 112
8925: PUSH
8926: LD_INT 113
8928: PUSH
8929: LD_INT 114
8931: PUSH
8932: LD_INT 116
8934: PUSH
8935: LD_INT 117
8937: PUSH
8938: LD_INT 118
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: ST_TO_ADDR
8964: GO 10203
8966: LD_INT 14
8968: DOUBLE
8969: EQUAL
8970: IFTRUE 8974
8972: GO 9198
8974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: LD_INT 1
8982: PUSH
8983: LD_INT 2
8985: PUSH
8986: LD_INT 3
8988: PUSH
8989: LD_INT 4
8991: PUSH
8992: LD_INT 5
8994: PUSH
8995: LD_INT 6
8997: PUSH
8998: LD_INT 7
9000: PUSH
9001: LD_INT 8
9003: PUSH
9004: LD_INT 9
9006: PUSH
9007: LD_INT 10
9009: PUSH
9010: LD_INT 11
9012: PUSH
9013: LD_INT 12
9015: PUSH
9016: LD_INT 13
9018: PUSH
9019: LD_INT 14
9021: PUSH
9022: LD_INT 15
9024: PUSH
9025: LD_INT 16
9027: PUSH
9028: LD_INT 17
9030: PUSH
9031: LD_INT 18
9033: PUSH
9034: LD_INT 19
9036: PUSH
9037: LD_INT 20
9039: PUSH
9040: LD_INT 21
9042: PUSH
9043: LD_INT 22
9045: PUSH
9046: LD_INT 23
9048: PUSH
9049: LD_INT 24
9051: PUSH
9052: LD_INT 25
9054: PUSH
9055: LD_INT 26
9057: PUSH
9058: LD_INT 27
9060: PUSH
9061: LD_INT 28
9063: PUSH
9064: LD_INT 29
9066: PUSH
9067: LD_INT 30
9069: PUSH
9070: LD_INT 31
9072: PUSH
9073: LD_INT 32
9075: PUSH
9076: LD_INT 33
9078: PUSH
9079: LD_INT 34
9081: PUSH
9082: LD_INT 36
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 101
9124: PUSH
9125: LD_INT 102
9127: PUSH
9128: LD_INT 103
9130: PUSH
9131: LD_INT 104
9133: PUSH
9134: LD_INT 105
9136: PUSH
9137: LD_INT 106
9139: PUSH
9140: LD_INT 107
9142: PUSH
9143: LD_INT 108
9145: PUSH
9146: LD_INT 109
9148: PUSH
9149: LD_INT 110
9151: PUSH
9152: LD_INT 111
9154: PUSH
9155: LD_INT 112
9157: PUSH
9158: LD_INT 113
9160: PUSH
9161: LD_INT 114
9163: PUSH
9164: LD_INT 116
9166: PUSH
9167: LD_INT 117
9169: PUSH
9170: LD_INT 118
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: ST_TO_ADDR
9196: GO 10203
9198: LD_INT 15
9200: DOUBLE
9201: EQUAL
9202: IFTRUE 9206
9204: GO 9430
9206: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9207: LD_ADDR_VAR 0 2
9211: PUSH
9212: LD_INT 1
9214: PUSH
9215: LD_INT 2
9217: PUSH
9218: LD_INT 3
9220: PUSH
9221: LD_INT 4
9223: PUSH
9224: LD_INT 5
9226: PUSH
9227: LD_INT 6
9229: PUSH
9230: LD_INT 7
9232: PUSH
9233: LD_INT 8
9235: PUSH
9236: LD_INT 9
9238: PUSH
9239: LD_INT 10
9241: PUSH
9242: LD_INT 11
9244: PUSH
9245: LD_INT 12
9247: PUSH
9248: LD_INT 13
9250: PUSH
9251: LD_INT 14
9253: PUSH
9254: LD_INT 15
9256: PUSH
9257: LD_INT 16
9259: PUSH
9260: LD_INT 17
9262: PUSH
9263: LD_INT 18
9265: PUSH
9266: LD_INT 19
9268: PUSH
9269: LD_INT 20
9271: PUSH
9272: LD_INT 21
9274: PUSH
9275: LD_INT 22
9277: PUSH
9278: LD_INT 23
9280: PUSH
9281: LD_INT 24
9283: PUSH
9284: LD_INT 25
9286: PUSH
9287: LD_INT 26
9289: PUSH
9290: LD_INT 27
9292: PUSH
9293: LD_INT 28
9295: PUSH
9296: LD_INT 29
9298: PUSH
9299: LD_INT 30
9301: PUSH
9302: LD_INT 31
9304: PUSH
9305: LD_INT 32
9307: PUSH
9308: LD_INT 33
9310: PUSH
9311: LD_INT 34
9313: PUSH
9314: LD_INT 36
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 101
9356: PUSH
9357: LD_INT 102
9359: PUSH
9360: LD_INT 103
9362: PUSH
9363: LD_INT 104
9365: PUSH
9366: LD_INT 105
9368: PUSH
9369: LD_INT 106
9371: PUSH
9372: LD_INT 107
9374: PUSH
9375: LD_INT 108
9377: PUSH
9378: LD_INT 109
9380: PUSH
9381: LD_INT 110
9383: PUSH
9384: LD_INT 111
9386: PUSH
9387: LD_INT 112
9389: PUSH
9390: LD_INT 113
9392: PUSH
9393: LD_INT 114
9395: PUSH
9396: LD_INT 116
9398: PUSH
9399: LD_INT 117
9401: PUSH
9402: LD_INT 118
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: ST_TO_ADDR
9428: GO 10203
9430: LD_INT 16
9432: DOUBLE
9433: EQUAL
9434: IFTRUE 9438
9436: GO 9574
9438: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9439: LD_ADDR_VAR 0 2
9443: PUSH
9444: LD_INT 2
9446: PUSH
9447: LD_INT 4
9449: PUSH
9450: LD_INT 5
9452: PUSH
9453: LD_INT 7
9455: PUSH
9456: LD_INT 11
9458: PUSH
9459: LD_INT 12
9461: PUSH
9462: LD_INT 15
9464: PUSH
9465: LD_INT 16
9467: PUSH
9468: LD_INT 20
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 23
9479: PUSH
9480: LD_INT 25
9482: PUSH
9483: LD_INT 26
9485: PUSH
9486: LD_INT 30
9488: PUSH
9489: LD_INT 31
9491: PUSH
9492: LD_INT 32
9494: PUSH
9495: LD_INT 33
9497: PUSH
9498: LD_INT 34
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 101
9524: PUSH
9525: LD_INT 102
9527: PUSH
9528: LD_INT 103
9530: PUSH
9531: LD_INT 106
9533: PUSH
9534: LD_INT 108
9536: PUSH
9537: LD_INT 112
9539: PUSH
9540: LD_INT 113
9542: PUSH
9543: LD_INT 114
9545: PUSH
9546: LD_INT 116
9548: PUSH
9549: LD_INT 117
9551: PUSH
9552: LD_INT 118
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: ST_TO_ADDR
9572: GO 10203
9574: LD_INT 17
9576: DOUBLE
9577: EQUAL
9578: IFTRUE 9582
9580: GO 9806
9582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9583: LD_ADDR_VAR 0 2
9587: PUSH
9588: LD_INT 1
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: LD_INT 3
9596: PUSH
9597: LD_INT 4
9599: PUSH
9600: LD_INT 5
9602: PUSH
9603: LD_INT 6
9605: PUSH
9606: LD_INT 7
9608: PUSH
9609: LD_INT 8
9611: PUSH
9612: LD_INT 9
9614: PUSH
9615: LD_INT 10
9617: PUSH
9618: LD_INT 11
9620: PUSH
9621: LD_INT 12
9623: PUSH
9624: LD_INT 13
9626: PUSH
9627: LD_INT 14
9629: PUSH
9630: LD_INT 15
9632: PUSH
9633: LD_INT 16
9635: PUSH
9636: LD_INT 17
9638: PUSH
9639: LD_INT 18
9641: PUSH
9642: LD_INT 19
9644: PUSH
9645: LD_INT 20
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 22
9653: PUSH
9654: LD_INT 23
9656: PUSH
9657: LD_INT 24
9659: PUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 26
9665: PUSH
9666: LD_INT 27
9668: PUSH
9669: LD_INT 28
9671: PUSH
9672: LD_INT 29
9674: PUSH
9675: LD_INT 30
9677: PUSH
9678: LD_INT 31
9680: PUSH
9681: LD_INT 32
9683: PUSH
9684: LD_INT 33
9686: PUSH
9687: LD_INT 34
9689: PUSH
9690: LD_INT 36
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: PUSH
9730: LD_INT 101
9732: PUSH
9733: LD_INT 102
9735: PUSH
9736: LD_INT 103
9738: PUSH
9739: LD_INT 104
9741: PUSH
9742: LD_INT 105
9744: PUSH
9745: LD_INT 106
9747: PUSH
9748: LD_INT 107
9750: PUSH
9751: LD_INT 108
9753: PUSH
9754: LD_INT 109
9756: PUSH
9757: LD_INT 110
9759: PUSH
9760: LD_INT 111
9762: PUSH
9763: LD_INT 112
9765: PUSH
9766: LD_INT 113
9768: PUSH
9769: LD_INT 114
9771: PUSH
9772: LD_INT 116
9774: PUSH
9775: LD_INT 117
9777: PUSH
9778: LD_INT 118
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: ST_TO_ADDR
9804: GO 10203
9806: LD_INT 18
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9962
9814: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9815: LD_ADDR_VAR 0 2
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: LD_INT 4
9825: PUSH
9826: LD_INT 5
9828: PUSH
9829: LD_INT 7
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: LD_INT 12
9837: PUSH
9838: LD_INT 15
9840: PUSH
9841: LD_INT 16
9843: PUSH
9844: LD_INT 20
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_INT 23
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 26
9861: PUSH
9862: LD_INT 30
9864: PUSH
9865: LD_INT 31
9867: PUSH
9868: LD_INT 32
9870: PUSH
9871: LD_INT 33
9873: PUSH
9874: LD_INT 34
9876: PUSH
9877: LD_INT 35
9879: PUSH
9880: LD_INT 36
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 101
9908: PUSH
9909: LD_INT 102
9911: PUSH
9912: LD_INT 103
9914: PUSH
9915: LD_INT 106
9917: PUSH
9918: LD_INT 108
9920: PUSH
9921: LD_INT 112
9923: PUSH
9924: LD_INT 113
9926: PUSH
9927: LD_INT 114
9929: PUSH
9930: LD_INT 115
9932: PUSH
9933: LD_INT 116
9935: PUSH
9936: LD_INT 117
9938: PUSH
9939: LD_INT 118
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: ST_TO_ADDR
9960: GO 10203
9962: LD_INT 19
9964: DOUBLE
9965: EQUAL
9966: IFTRUE 9970
9968: GO 10202
9970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9971: LD_ADDR_VAR 0 2
9975: PUSH
9976: LD_INT 1
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 3
9984: PUSH
9985: LD_INT 4
9987: PUSH
9988: LD_INT 5
9990: PUSH
9991: LD_INT 6
9993: PUSH
9994: LD_INT 7
9996: PUSH
9997: LD_INT 8
9999: PUSH
10000: LD_INT 9
10002: PUSH
10003: LD_INT 10
10005: PUSH
10006: LD_INT 11
10008: PUSH
10009: LD_INT 12
10011: PUSH
10012: LD_INT 13
10014: PUSH
10015: LD_INT 14
10017: PUSH
10018: LD_INT 15
10020: PUSH
10021: LD_INT 16
10023: PUSH
10024: LD_INT 17
10026: PUSH
10027: LD_INT 18
10029: PUSH
10030: LD_INT 19
10032: PUSH
10033: LD_INT 20
10035: PUSH
10036: LD_INT 21
10038: PUSH
10039: LD_INT 22
10041: PUSH
10042: LD_INT 23
10044: PUSH
10045: LD_INT 24
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 26
10053: PUSH
10054: LD_INT 27
10056: PUSH
10057: LD_INT 28
10059: PUSH
10060: LD_INT 29
10062: PUSH
10063: LD_INT 30
10065: PUSH
10066: LD_INT 31
10068: PUSH
10069: LD_INT 32
10071: PUSH
10072: LD_INT 33
10074: PUSH
10075: LD_INT 34
10077: PUSH
10078: LD_INT 35
10080: PUSH
10081: LD_INT 36
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 101
10124: PUSH
10125: LD_INT 102
10127: PUSH
10128: LD_INT 103
10130: PUSH
10131: LD_INT 104
10133: PUSH
10134: LD_INT 105
10136: PUSH
10137: LD_INT 106
10139: PUSH
10140: LD_INT 107
10142: PUSH
10143: LD_INT 108
10145: PUSH
10146: LD_INT 109
10148: PUSH
10149: LD_INT 110
10151: PUSH
10152: LD_INT 111
10154: PUSH
10155: LD_INT 112
10157: PUSH
10158: LD_INT 113
10160: PUSH
10161: LD_INT 114
10163: PUSH
10164: LD_INT 115
10166: PUSH
10167: LD_INT 116
10169: PUSH
10170: LD_INT 117
10172: PUSH
10173: LD_INT 118
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: ST_TO_ADDR
10200: GO 10203
10202: POP
// end else
10203: GO 10434
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10205: LD_ADDR_VAR 0 2
10209: PUSH
10210: LD_INT 1
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: LD_INT 3
10218: PUSH
10219: LD_INT 4
10221: PUSH
10222: LD_INT 5
10224: PUSH
10225: LD_INT 6
10227: PUSH
10228: LD_INT 7
10230: PUSH
10231: LD_INT 8
10233: PUSH
10234: LD_INT 9
10236: PUSH
10237: LD_INT 10
10239: PUSH
10240: LD_INT 11
10242: PUSH
10243: LD_INT 12
10245: PUSH
10246: LD_INT 13
10248: PUSH
10249: LD_INT 14
10251: PUSH
10252: LD_INT 15
10254: PUSH
10255: LD_INT 16
10257: PUSH
10258: LD_INT 17
10260: PUSH
10261: LD_INT 18
10263: PUSH
10264: LD_INT 19
10266: PUSH
10267: LD_INT 20
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 22
10275: PUSH
10276: LD_INT 23
10278: PUSH
10279: LD_INT 24
10281: PUSH
10282: LD_INT 25
10284: PUSH
10285: LD_INT 26
10287: PUSH
10288: LD_INT 27
10290: PUSH
10291: LD_INT 28
10293: PUSH
10294: LD_INT 29
10296: PUSH
10297: LD_INT 30
10299: PUSH
10300: LD_INT 31
10302: PUSH
10303: LD_INT 32
10305: PUSH
10306: LD_INT 33
10308: PUSH
10309: LD_INT 34
10311: PUSH
10312: LD_INT 35
10314: PUSH
10315: LD_INT 36
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 101
10358: PUSH
10359: LD_INT 102
10361: PUSH
10362: LD_INT 103
10364: PUSH
10365: LD_INT 104
10367: PUSH
10368: LD_INT 105
10370: PUSH
10371: LD_INT 106
10373: PUSH
10374: LD_INT 107
10376: PUSH
10377: LD_INT 108
10379: PUSH
10380: LD_INT 109
10382: PUSH
10383: LD_INT 110
10385: PUSH
10386: LD_INT 111
10388: PUSH
10389: LD_INT 112
10391: PUSH
10392: LD_INT 113
10394: PUSH
10395: LD_INT 114
10397: PUSH
10398: LD_INT 115
10400: PUSH
10401: LD_INT 116
10403: PUSH
10404: LD_INT 117
10406: PUSH
10407: LD_INT 118
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: ST_TO_ADDR
// if result then
10434: LD_VAR 0 2
10438: IFFALSE 11224
// begin normal :=  ;
10440: LD_ADDR_VAR 0 5
10444: PUSH
10445: LD_STRING 
10447: ST_TO_ADDR
// hardcore :=  ;
10448: LD_ADDR_VAR 0 6
10452: PUSH
10453: LD_STRING 
10455: ST_TO_ADDR
// active :=  ;
10456: LD_ADDR_VAR 0 7
10460: PUSH
10461: LD_STRING 
10463: ST_TO_ADDR
// for i = 1 to normalCounter do
10464: LD_ADDR_VAR 0 8
10468: PUSH
10469: DOUBLE
10470: LD_INT 1
10472: DEC
10473: ST_TO_ADDR
10474: LD_EXP 25
10478: PUSH
10479: FOR_TO
10480: IFFALSE 10581
// begin tmp := 0 ;
10482: LD_ADDR_VAR 0 3
10486: PUSH
10487: LD_STRING 0
10489: ST_TO_ADDR
// if result [ 1 ] then
10490: LD_VAR 0 2
10494: PUSH
10495: LD_INT 1
10497: ARRAY
10498: IFFALSE 10563
// if result [ 1 ] [ 1 ] = i then
10500: LD_VAR 0 2
10504: PUSH
10505: LD_INT 1
10507: ARRAY
10508: PUSH
10509: LD_INT 1
10511: ARRAY
10512: PUSH
10513: LD_VAR 0 8
10517: EQUAL
10518: IFFALSE 10563
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10520: LD_ADDR_VAR 0 2
10524: PUSH
10525: LD_VAR 0 2
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: LD_VAR 0 2
10537: PUSH
10538: LD_INT 1
10540: ARRAY
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 3
10549: PPUSH
10550: CALL_OW 1
10554: ST_TO_ADDR
// tmp := 1 ;
10555: LD_ADDR_VAR 0 3
10559: PUSH
10560: LD_STRING 1
10562: ST_TO_ADDR
// end ; normal := normal & tmp ;
10563: LD_ADDR_VAR 0 5
10567: PUSH
10568: LD_VAR 0 5
10572: PUSH
10573: LD_VAR 0 3
10577: STR
10578: ST_TO_ADDR
// end ;
10579: GO 10479
10581: POP
10582: POP
// for i = 1 to hardcoreCounter do
10583: LD_ADDR_VAR 0 8
10587: PUSH
10588: DOUBLE
10589: LD_INT 1
10591: DEC
10592: ST_TO_ADDR
10593: LD_EXP 26
10597: PUSH
10598: FOR_TO
10599: IFFALSE 10704
// begin tmp := 0 ;
10601: LD_ADDR_VAR 0 3
10605: PUSH
10606: LD_STRING 0
10608: ST_TO_ADDR
// if result [ 2 ] then
10609: LD_VAR 0 2
10613: PUSH
10614: LD_INT 2
10616: ARRAY
10617: IFFALSE 10686
// if result [ 2 ] [ 1 ] = 100 + i then
10619: LD_VAR 0 2
10623: PUSH
10624: LD_INT 2
10626: ARRAY
10627: PUSH
10628: LD_INT 1
10630: ARRAY
10631: PUSH
10632: LD_INT 100
10634: PUSH
10635: LD_VAR 0 8
10639: PLUS
10640: EQUAL
10641: IFFALSE 10686
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10643: LD_ADDR_VAR 0 2
10647: PUSH
10648: LD_VAR 0 2
10652: PPUSH
10653: LD_INT 2
10655: PPUSH
10656: LD_VAR 0 2
10660: PUSH
10661: LD_INT 2
10663: ARRAY
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 3
10672: PPUSH
10673: CALL_OW 1
10677: ST_TO_ADDR
// tmp := 1 ;
10678: LD_ADDR_VAR 0 3
10682: PUSH
10683: LD_STRING 1
10685: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10686: LD_ADDR_VAR 0 6
10690: PUSH
10691: LD_VAR 0 6
10695: PUSH
10696: LD_VAR 0 3
10700: STR
10701: ST_TO_ADDR
// end ;
10702: GO 10598
10704: POP
10705: POP
// if isGameLoad then
10706: LD_VAR 0 1
10710: IFFALSE 11185
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10712: LD_ADDR_VAR 0 4
10716: PUSH
10717: LD_EXP 29
10721: PUSH
10722: LD_EXP 28
10726: PUSH
10727: LD_EXP 30
10731: PUSH
10732: LD_EXP 27
10736: PUSH
10737: LD_EXP 31
10741: PUSH
10742: LD_EXP 32
10746: PUSH
10747: LD_EXP 33
10751: PUSH
10752: LD_EXP 34
10756: PUSH
10757: LD_EXP 35
10761: PUSH
10762: LD_EXP 36
10766: PUSH
10767: LD_EXP 37
10771: PUSH
10772: LD_EXP 38
10776: PUSH
10777: LD_EXP 39
10781: PUSH
10782: LD_EXP 40
10786: PUSH
10787: LD_EXP 48
10791: PUSH
10792: LD_EXP 49
10796: PUSH
10797: LD_EXP 50
10801: PUSH
10802: LD_EXP 51
10806: PUSH
10807: LD_EXP 53
10811: PUSH
10812: LD_EXP 54
10816: PUSH
10817: LD_EXP 55
10821: PUSH
10822: LD_EXP 58
10826: PUSH
10827: LD_EXP 60
10831: PUSH
10832: LD_EXP 61
10836: PUSH
10837: LD_EXP 62
10841: PUSH
10842: LD_EXP 64
10846: PUSH
10847: LD_EXP 65
10851: PUSH
10852: LD_EXP 68
10856: PUSH
10857: LD_EXP 69
10861: PUSH
10862: LD_EXP 70
10866: PUSH
10867: LD_EXP 71
10871: PUSH
10872: LD_EXP 72
10876: PUSH
10877: LD_EXP 73
10881: PUSH
10882: LD_EXP 74
10886: PUSH
10887: LD_EXP 75
10891: PUSH
10892: LD_EXP 76
10896: PUSH
10897: LD_EXP 41
10901: PUSH
10902: LD_EXP 42
10906: PUSH
10907: LD_EXP 45
10911: PUSH
10912: LD_EXP 46
10916: PUSH
10917: LD_EXP 47
10921: PUSH
10922: LD_EXP 43
10926: PUSH
10927: LD_EXP 44
10931: PUSH
10932: LD_EXP 52
10936: PUSH
10937: LD_EXP 56
10941: PUSH
10942: LD_EXP 57
10946: PUSH
10947: LD_EXP 59
10951: PUSH
10952: LD_EXP 63
10956: PUSH
10957: LD_EXP 66
10961: PUSH
10962: LD_EXP 67
10966: PUSH
10967: LD_EXP 77
10971: PUSH
10972: LD_EXP 78
10976: PUSH
10977: LD_EXP 79
10981: PUSH
10982: LD_EXP 80
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: ST_TO_ADDR
// tmp :=  ;
11043: LD_ADDR_VAR 0 3
11047: PUSH
11048: LD_STRING 
11050: ST_TO_ADDR
// for i = 1 to normalCounter do
11051: LD_ADDR_VAR 0 8
11055: PUSH
11056: DOUBLE
11057: LD_INT 1
11059: DEC
11060: ST_TO_ADDR
11061: LD_EXP 25
11065: PUSH
11066: FOR_TO
11067: IFFALSE 11103
// begin if flags [ i ] then
11069: LD_VAR 0 4
11073: PUSH
11074: LD_VAR 0 8
11078: ARRAY
11079: IFFALSE 11101
// tmp := tmp & i & ; ;
11081: LD_ADDR_VAR 0 3
11085: PUSH
11086: LD_VAR 0 3
11090: PUSH
11091: LD_VAR 0 8
11095: STR
11096: PUSH
11097: LD_STRING ;
11099: STR
11100: ST_TO_ADDR
// end ;
11101: GO 11066
11103: POP
11104: POP
// for i = 1 to hardcoreCounter do
11105: LD_ADDR_VAR 0 8
11109: PUSH
11110: DOUBLE
11111: LD_INT 1
11113: DEC
11114: ST_TO_ADDR
11115: LD_EXP 26
11119: PUSH
11120: FOR_TO
11121: IFFALSE 11167
// begin if flags [ normalCounter + i ] then
11123: LD_VAR 0 4
11127: PUSH
11128: LD_EXP 25
11132: PUSH
11133: LD_VAR 0 8
11137: PLUS
11138: ARRAY
11139: IFFALSE 11165
// tmp := tmp & ( 100 + i ) & ; ;
11141: LD_ADDR_VAR 0 3
11145: PUSH
11146: LD_VAR 0 3
11150: PUSH
11151: LD_INT 100
11153: PUSH
11154: LD_VAR 0 8
11158: PLUS
11159: STR
11160: PUSH
11161: LD_STRING ;
11163: STR
11164: ST_TO_ADDR
// end ;
11165: GO 11120
11167: POP
11168: POP
// if tmp then
11169: LD_VAR 0 3
11173: IFFALSE 11185
// active := tmp ;
11175: LD_ADDR_VAR 0 7
11179: PUSH
11180: LD_VAR 0 3
11184: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11185: LD_STRING getStreamItemsFromMission("
11187: PUSH
11188: LD_VAR 0 5
11192: STR
11193: PUSH
11194: LD_STRING ","
11196: STR
11197: PUSH
11198: LD_VAR 0 6
11202: STR
11203: PUSH
11204: LD_STRING ","
11206: STR
11207: PUSH
11208: LD_VAR 0 7
11212: STR
11213: PUSH
11214: LD_STRING ")
11216: STR
11217: PPUSH
11218: CALL_OW 559
// end else
11222: GO 11231
// ToLua ( getStreamItemsFromMission("","","") ) ;
11224: LD_STRING getStreamItemsFromMission("","","")
11226: PPUSH
11227: CALL_OW 559
// end ;
11231: LD_VAR 0 2
11235: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11236: LD_EXP 24
11240: PUSH
11241: LD_EXP 29
11245: AND
11246: IFFALSE 11370
11248: GO 11250
11250: DISABLE
11251: LD_INT 0
11253: PPUSH
11254: PPUSH
// begin enable ;
11255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_INT 22
11263: PUSH
11264: LD_OWVAR 2
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 2
11275: PUSH
11276: LD_INT 34
11278: PUSH
11279: LD_INT 7
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 34
11288: PUSH
11289: LD_INT 45
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 34
11298: PUSH
11299: LD_INT 28
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 34
11308: PUSH
11309: LD_INT 47
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 69
11331: ST_TO_ADDR
// if not tmp then
11332: LD_VAR 0 2
11336: NOT
11337: IFFALSE 11341
// exit ;
11339: GO 11370
// for i in tmp do
11341: LD_ADDR_VAR 0 1
11345: PUSH
11346: LD_VAR 0 2
11350: PUSH
11351: FOR_IN
11352: IFFALSE 11368
// begin SetLives ( i , 0 ) ;
11354: LD_VAR 0 1
11358: PPUSH
11359: LD_INT 0
11361: PPUSH
11362: CALL_OW 234
// end ;
11366: GO 11351
11368: POP
11369: POP
// end ;
11370: PPOPN 2
11372: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11373: LD_EXP 24
11377: PUSH
11378: LD_EXP 30
11382: AND
11383: IFFALSE 11467
11385: GO 11387
11387: DISABLE
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// begin enable ;
11392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11393: LD_ADDR_VAR 0 2
11397: PUSH
11398: LD_INT 22
11400: PUSH
11401: LD_OWVAR 2
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 32
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: ST_TO_ADDR
// if not tmp then
11429: LD_VAR 0 2
11433: NOT
11434: IFFALSE 11438
// exit ;
11436: GO 11467
// for i in tmp do
11438: LD_ADDR_VAR 0 1
11442: PUSH
11443: LD_VAR 0 2
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11465
// begin SetLives ( i , 0 ) ;
11451: LD_VAR 0 1
11455: PPUSH
11456: LD_INT 0
11458: PPUSH
11459: CALL_OW 234
// end ;
11463: GO 11448
11465: POP
11466: POP
// end ;
11467: PPOPN 2
11469: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11470: LD_EXP 24
11474: PUSH
11475: LD_EXP 27
11479: AND
11480: IFFALSE 11573
11482: GO 11484
11484: DISABLE
11485: LD_INT 0
11487: PPUSH
// begin enable ;
11488: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11489: LD_ADDR_VAR 0 1
11493: PUSH
11494: LD_INT 22
11496: PUSH
11497: LD_OWVAR 2
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 2
11508: PUSH
11509: LD_INT 25
11511: PUSH
11512: LD_INT 5
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 9
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 25
11531: PUSH
11532: LD_INT 8
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 69
11553: PUSH
11554: FOR_IN
11555: IFFALSE 11571
// begin SetClass ( i , 1 ) ;
11557: LD_VAR 0 1
11561: PPUSH
11562: LD_INT 1
11564: PPUSH
11565: CALL_OW 336
// end ;
11569: GO 11554
11571: POP
11572: POP
// end ;
11573: PPOPN 1
11575: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11576: LD_EXP 24
11580: PUSH
11581: LD_EXP 28
11585: AND
11586: PUSH
11587: LD_OWVAR 65
11591: PUSH
11592: LD_INT 7
11594: LESS
11595: AND
11596: IFFALSE 11610
11598: GO 11600
11600: DISABLE
// begin enable ;
11601: ENABLE
// game_speed := 7 ;
11602: LD_ADDR_OWVAR 65
11606: PUSH
11607: LD_INT 7
11609: ST_TO_ADDR
// end ;
11610: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11611: LD_EXP 24
11615: PUSH
11616: LD_EXP 31
11620: AND
11621: IFFALSE 11823
11623: GO 11625
11625: DISABLE
11626: LD_INT 0
11628: PPUSH
11629: PPUSH
11630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 81
11638: PUSH
11639: LD_OWVAR 2
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 21
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: ST_TO_ADDR
// if not tmp then
11667: LD_VAR 0 3
11671: NOT
11672: IFFALSE 11676
// exit ;
11674: GO 11823
// if tmp > 5 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 5
11683: GREATER
11684: IFFALSE 11696
// k := 5 else
11686: LD_ADDR_VAR 0 2
11690: PUSH
11691: LD_INT 5
11693: ST_TO_ADDR
11694: GO 11706
// k := tmp ;
11696: LD_ADDR_VAR 0 2
11700: PUSH
11701: LD_VAR 0 3
11705: ST_TO_ADDR
// for i := 1 to k do
11706: LD_ADDR_VAR 0 1
11710: PUSH
11711: DOUBLE
11712: LD_INT 1
11714: DEC
11715: ST_TO_ADDR
11716: LD_VAR 0 2
11720: PUSH
11721: FOR_TO
11722: IFFALSE 11821
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_VAR 0 1
11733: ARRAY
11734: PPUSH
11735: LD_VAR 0 1
11739: PUSH
11740: LD_INT 4
11742: MOD
11743: PUSH
11744: LD_INT 1
11746: PLUS
11747: PPUSH
11748: CALL_OW 259
11752: PUSH
11753: LD_INT 10
11755: LESS
11756: IFFALSE 11819
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11758: LD_VAR 0 3
11762: PUSH
11763: LD_VAR 0 1
11767: ARRAY
11768: PPUSH
11769: LD_VAR 0 1
11773: PUSH
11774: LD_INT 4
11776: MOD
11777: PUSH
11778: LD_INT 1
11780: PLUS
11781: PPUSH
11782: LD_VAR 0 3
11786: PUSH
11787: LD_VAR 0 1
11791: ARRAY
11792: PPUSH
11793: LD_VAR 0 1
11797: PUSH
11798: LD_INT 4
11800: MOD
11801: PUSH
11802: LD_INT 1
11804: PLUS
11805: PPUSH
11806: CALL_OW 259
11810: PUSH
11811: LD_INT 1
11813: PLUS
11814: PPUSH
11815: CALL_OW 237
11819: GO 11721
11821: POP
11822: POP
// end ;
11823: PPOPN 3
11825: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11826: LD_EXP 24
11830: PUSH
11831: LD_EXP 32
11835: AND
11836: IFFALSE 11856
11838: GO 11840
11840: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11841: LD_INT 4
11843: PPUSH
11844: LD_OWVAR 2
11848: PPUSH
11849: LD_INT 0
11851: PPUSH
11852: CALL_OW 324
11856: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11857: LD_EXP 24
11861: PUSH
11862: LD_EXP 61
11866: AND
11867: IFFALSE 11887
11869: GO 11871
11871: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11872: LD_INT 19
11874: PPUSH
11875: LD_OWVAR 2
11879: PPUSH
11880: LD_INT 0
11882: PPUSH
11883: CALL_OW 324
11887: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11888: LD_EXP 24
11892: PUSH
11893: LD_EXP 33
11897: AND
11898: IFFALSE 12000
11900: GO 11902
11902: DISABLE
11903: LD_INT 0
11905: PPUSH
11906: PPUSH
// begin enable ;
11907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11908: LD_ADDR_VAR 0 2
11912: PUSH
11913: LD_INT 22
11915: PUSH
11916: LD_OWVAR 2
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 2
11927: PUSH
11928: LD_INT 34
11930: PUSH
11931: LD_INT 11
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 34
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PPUSH
11957: CALL_OW 69
11961: ST_TO_ADDR
// if not tmp then
11962: LD_VAR 0 2
11966: NOT
11967: IFFALSE 11971
// exit ;
11969: GO 12000
// for i in tmp do
11971: LD_ADDR_VAR 0 1
11975: PUSH
11976: LD_VAR 0 2
11980: PUSH
11981: FOR_IN
11982: IFFALSE 11998
// begin SetLives ( i , 0 ) ;
11984: LD_VAR 0 1
11988: PPUSH
11989: LD_INT 0
11991: PPUSH
11992: CALL_OW 234
// end ;
11996: GO 11981
11998: POP
11999: POP
// end ;
12000: PPOPN 2
12002: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12003: LD_EXP 24
12007: PUSH
12008: LD_EXP 34
12012: AND
12013: IFFALSE 12033
12015: GO 12017
12017: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12018: LD_INT 32
12020: PPUSH
12021: LD_OWVAR 2
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL_OW 324
12033: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12034: LD_EXP 24
12038: PUSH
12039: LD_EXP 35
12043: AND
12044: IFFALSE 12225
12046: GO 12048
12048: DISABLE
12049: LD_INT 0
12051: PPUSH
12052: PPUSH
12053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12054: LD_ADDR_VAR 0 2
12058: PUSH
12059: LD_INT 22
12061: PUSH
12062: LD_OWVAR 2
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 33
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: ST_TO_ADDR
// if not tmp then
12090: LD_VAR 0 2
12094: NOT
12095: IFFALSE 12099
// exit ;
12097: GO 12225
// side := 0 ;
12099: LD_ADDR_VAR 0 3
12103: PUSH
12104: LD_INT 0
12106: ST_TO_ADDR
// for i := 1 to 8 do
12107: LD_ADDR_VAR 0 1
12111: PUSH
12112: DOUBLE
12113: LD_INT 1
12115: DEC
12116: ST_TO_ADDR
12117: LD_INT 8
12119: PUSH
12120: FOR_TO
12121: IFFALSE 12169
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12123: LD_OWVAR 2
12127: PUSH
12128: LD_VAR 0 1
12132: NONEQUAL
12133: PUSH
12134: LD_OWVAR 2
12138: PPUSH
12139: LD_VAR 0 1
12143: PPUSH
12144: CALL_OW 81
12148: PUSH
12149: LD_INT 2
12151: EQUAL
12152: AND
12153: IFFALSE 12167
// begin side := i ;
12155: LD_ADDR_VAR 0 3
12159: PUSH
12160: LD_VAR 0 1
12164: ST_TO_ADDR
// break ;
12165: GO 12169
// end ;
12167: GO 12120
12169: POP
12170: POP
// if not side then
12171: LD_VAR 0 3
12175: NOT
12176: IFFALSE 12180
// exit ;
12178: GO 12225
// for i := 1 to tmp do
12180: LD_ADDR_VAR 0 1
12184: PUSH
12185: DOUBLE
12186: LD_INT 1
12188: DEC
12189: ST_TO_ADDR
12190: LD_VAR 0 2
12194: PUSH
12195: FOR_TO
12196: IFFALSE 12223
// if Prob ( 60 ) then
12198: LD_INT 60
12200: PPUSH
12201: CALL_OW 13
12205: IFFALSE 12221
// SetSide ( i , side ) ;
12207: LD_VAR 0 1
12211: PPUSH
12212: LD_VAR 0 3
12216: PPUSH
12217: CALL_OW 235
12221: GO 12195
12223: POP
12224: POP
// end ;
12225: PPOPN 3
12227: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12228: LD_EXP 24
12232: PUSH
12233: LD_EXP 37
12237: AND
12238: IFFALSE 12357
12240: GO 12242
12242: DISABLE
12243: LD_INT 0
12245: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12246: LD_ADDR_VAR 0 1
12250: PUSH
12251: LD_INT 22
12253: PUSH
12254: LD_OWVAR 2
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 21
12265: PUSH
12266: LD_INT 1
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 3
12275: PUSH
12276: LD_INT 23
12278: PUSH
12279: LD_INT 0
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: PUSH
12300: FOR_IN
12301: IFFALSE 12355
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 257
12312: PUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 2
12318: PUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 4
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: IN
12331: IFFALSE 12353
// SetClass ( un , rand ( 1 , 4 ) ) ;
12333: LD_VAR 0 1
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_INT 4
12343: PPUSH
12344: CALL_OW 12
12348: PPUSH
12349: CALL_OW 336
12353: GO 12300
12355: POP
12356: POP
// end ;
12357: PPOPN 1
12359: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12360: LD_EXP 24
12364: PUSH
12365: LD_EXP 36
12369: AND
12370: IFFALSE 12449
12372: GO 12374
12374: DISABLE
12375: LD_INT 0
12377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12378: LD_ADDR_VAR 0 1
12382: PUSH
12383: LD_INT 22
12385: PUSH
12386: LD_OWVAR 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 21
12397: PUSH
12398: LD_INT 3
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: ST_TO_ADDR
// if not tmp then
12414: LD_VAR 0 1
12418: NOT
12419: IFFALSE 12423
// exit ;
12421: GO 12449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12423: LD_VAR 0 1
12427: PUSH
12428: LD_INT 1
12430: PPUSH
12431: LD_VAR 0 1
12435: PPUSH
12436: CALL_OW 12
12440: ARRAY
12441: PPUSH
12442: LD_INT 100
12444: PPUSH
12445: CALL_OW 234
// end ;
12449: PPOPN 1
12451: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12452: LD_EXP 24
12456: PUSH
12457: LD_EXP 38
12461: AND
12462: IFFALSE 12560
12464: GO 12466
12466: DISABLE
12467: LD_INT 0
12469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12470: LD_ADDR_VAR 0 1
12474: PUSH
12475: LD_INT 22
12477: PUSH
12478: LD_OWVAR 2
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 21
12489: PUSH
12490: LD_INT 1
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: ST_TO_ADDR
// if not tmp then
12506: LD_VAR 0 1
12510: NOT
12511: IFFALSE 12515
// exit ;
12513: GO 12560
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12515: LD_VAR 0 1
12519: PUSH
12520: LD_INT 1
12522: PPUSH
12523: LD_VAR 0 1
12527: PPUSH
12528: CALL_OW 12
12532: ARRAY
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: LD_INT 4
12539: PPUSH
12540: CALL_OW 12
12544: PPUSH
12545: LD_INT 3000
12547: PPUSH
12548: LD_INT 9000
12550: PPUSH
12551: CALL_OW 12
12555: PPUSH
12556: CALL_OW 492
// end ;
12560: PPOPN 1
12562: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12563: LD_EXP 24
12567: PUSH
12568: LD_EXP 39
12572: AND
12573: IFFALSE 12593
12575: GO 12577
12577: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12578: LD_INT 1
12580: PPUSH
12581: LD_OWVAR 2
12585: PPUSH
12586: LD_INT 0
12588: PPUSH
12589: CALL_OW 324
12593: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12594: LD_EXP 24
12598: PUSH
12599: LD_EXP 40
12603: AND
12604: IFFALSE 12687
12606: GO 12608
12608: DISABLE
12609: LD_INT 0
12611: PPUSH
12612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12613: LD_ADDR_VAR 0 2
12617: PUSH
12618: LD_INT 22
12620: PUSH
12621: LD_OWVAR 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 21
12632: PUSH
12633: LD_INT 3
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: ST_TO_ADDR
// if not tmp then
12649: LD_VAR 0 2
12653: NOT
12654: IFFALSE 12658
// exit ;
12656: GO 12687
// for i in tmp do
12658: LD_ADDR_VAR 0 1
12662: PUSH
12663: LD_VAR 0 2
12667: PUSH
12668: FOR_IN
12669: IFFALSE 12685
// SetBLevel ( i , 10 ) ;
12671: LD_VAR 0 1
12675: PPUSH
12676: LD_INT 10
12678: PPUSH
12679: CALL_OW 241
12683: GO 12668
12685: POP
12686: POP
// end ;
12687: PPOPN 2
12689: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12690: LD_EXP 24
12694: PUSH
12695: LD_EXP 41
12699: AND
12700: IFFALSE 12811
12702: GO 12704
12704: DISABLE
12705: LD_INT 0
12707: PPUSH
12708: PPUSH
12709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12710: LD_ADDR_VAR 0 3
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_OWVAR 2
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 25
12729: PUSH
12730: LD_INT 1
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 69
12745: ST_TO_ADDR
// if not tmp then
12746: LD_VAR 0 3
12750: NOT
12751: IFFALSE 12755
// exit ;
12753: GO 12811
// un := tmp [ rand ( 1 , tmp ) ] ;
12755: LD_ADDR_VAR 0 2
12759: PUSH
12760: LD_VAR 0 3
12764: PUSH
12765: LD_INT 1
12767: PPUSH
12768: LD_VAR 0 3
12772: PPUSH
12773: CALL_OW 12
12777: ARRAY
12778: ST_TO_ADDR
// if Crawls ( un ) then
12779: LD_VAR 0 2
12783: PPUSH
12784: CALL_OW 318
12788: IFFALSE 12799
// ComWalk ( un ) ;
12790: LD_VAR 0 2
12794: PPUSH
12795: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12799: LD_VAR 0 2
12803: PPUSH
12804: LD_INT 5
12806: PPUSH
12807: CALL_OW 336
// end ;
12811: PPOPN 3
12813: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12814: LD_EXP 24
12818: PUSH
12819: LD_EXP 42
12823: AND
12824: PUSH
12825: LD_OWVAR 67
12829: PUSH
12830: LD_INT 4
12832: LESS
12833: AND
12834: IFFALSE 12853
12836: GO 12838
12838: DISABLE
// begin Difficulty := Difficulty + 1 ;
12839: LD_ADDR_OWVAR 67
12843: PUSH
12844: LD_OWVAR 67
12848: PUSH
12849: LD_INT 1
12851: PLUS
12852: ST_TO_ADDR
// end ;
12853: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12854: LD_EXP 24
12858: PUSH
12859: LD_EXP 43
12863: AND
12864: IFFALSE 12967
12866: GO 12868
12868: DISABLE
12869: LD_INT 0
12871: PPUSH
// begin for i := 1 to 5 do
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: DOUBLE
12878: LD_INT 1
12880: DEC
12881: ST_TO_ADDR
12882: LD_INT 5
12884: PUSH
12885: FOR_TO
12886: IFFALSE 12965
// begin uc_nation := nation_nature ;
12888: LD_ADDR_OWVAR 21
12892: PUSH
12893: LD_INT 0
12895: ST_TO_ADDR
// uc_side := 0 ;
12896: LD_ADDR_OWVAR 20
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12904: LD_ADDR_OWVAR 29
12908: PUSH
12909: LD_INT 12
12911: PUSH
12912: LD_INT 12
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: ST_TO_ADDR
// hc_agressivity := 20 ;
12919: LD_ADDR_OWVAR 35
12923: PUSH
12924: LD_INT 20
12926: ST_TO_ADDR
// hc_class := class_tiger ;
12927: LD_ADDR_OWVAR 28
12931: PUSH
12932: LD_INT 14
12934: ST_TO_ADDR
// hc_gallery :=  ;
12935: LD_ADDR_OWVAR 33
12939: PUSH
12940: LD_STRING 
12942: ST_TO_ADDR
// hc_name :=  ;
12943: LD_ADDR_OWVAR 26
12947: PUSH
12948: LD_STRING 
12950: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12951: CALL_OW 44
12955: PPUSH
12956: LD_INT 0
12958: PPUSH
12959: CALL_OW 51
// end ;
12963: GO 12885
12965: POP
12966: POP
// end ;
12967: PPOPN 1
12969: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12970: LD_EXP 24
12974: PUSH
12975: LD_EXP 44
12979: AND
12980: IFFALSE 12989
12982: GO 12984
12984: DISABLE
// StreamSibBomb ;
12985: CALL 12990 0 0
12989: END
// export function StreamSibBomb ; var i , x , y ; begin
12990: LD_INT 0
12992: PPUSH
12993: PPUSH
12994: PPUSH
12995: PPUSH
// result := false ;
12996: LD_ADDR_VAR 0 1
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// for i := 1 to 16 do
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: DOUBLE
13010: LD_INT 1
13012: DEC
13013: ST_TO_ADDR
13014: LD_INT 16
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13217
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13020: LD_ADDR_VAR 0 3
13024: PUSH
13025: LD_INT 10
13027: PUSH
13028: LD_INT 20
13030: PUSH
13031: LD_INT 30
13033: PUSH
13034: LD_INT 40
13036: PUSH
13037: LD_INT 50
13039: PUSH
13040: LD_INT 60
13042: PUSH
13043: LD_INT 70
13045: PUSH
13046: LD_INT 80
13048: PUSH
13049: LD_INT 90
13051: PUSH
13052: LD_INT 100
13054: PUSH
13055: LD_INT 110
13057: PUSH
13058: LD_INT 120
13060: PUSH
13061: LD_INT 130
13063: PUSH
13064: LD_INT 140
13066: PUSH
13067: LD_INT 150
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_INT 15
13092: PPUSH
13093: CALL_OW 12
13097: ARRAY
13098: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13099: LD_ADDR_VAR 0 4
13103: PUSH
13104: LD_INT 10
13106: PUSH
13107: LD_INT 20
13109: PUSH
13110: LD_INT 30
13112: PUSH
13113: LD_INT 40
13115: PUSH
13116: LD_INT 50
13118: PUSH
13119: LD_INT 60
13121: PUSH
13122: LD_INT 70
13124: PUSH
13125: LD_INT 80
13127: PUSH
13128: LD_INT 90
13130: PUSH
13131: LD_INT 100
13133: PUSH
13134: LD_INT 110
13136: PUSH
13137: LD_INT 120
13139: PUSH
13140: LD_INT 130
13142: PUSH
13143: LD_INT 140
13145: PUSH
13146: LD_INT 150
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 1
13168: PPUSH
13169: LD_INT 15
13171: PPUSH
13172: CALL_OW 12
13176: ARRAY
13177: ST_TO_ADDR
// if ValidHex ( x , y ) then
13178: LD_VAR 0 3
13182: PPUSH
13183: LD_VAR 0 4
13187: PPUSH
13188: CALL_OW 488
13192: IFFALSE 13215
// begin result := [ x , y ] ;
13194: LD_ADDR_VAR 0 1
13198: PUSH
13199: LD_VAR 0 3
13203: PUSH
13204: LD_VAR 0 4
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: ST_TO_ADDR
// break ;
13213: GO 13217
// end ; end ;
13215: GO 13017
13217: POP
13218: POP
// if result then
13219: LD_VAR 0 1
13223: IFFALSE 13283
// begin ToLua ( playSibBomb() ) ;
13225: LD_STRING playSibBomb()
13227: PPUSH
13228: CALL_OW 559
// wait ( 0 0$14 ) ;
13232: LD_INT 490
13234: PPUSH
13235: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13239: LD_VAR 0 1
13243: PUSH
13244: LD_INT 1
13246: ARRAY
13247: PPUSH
13248: LD_VAR 0 1
13252: PUSH
13253: LD_INT 2
13255: ARRAY
13256: PPUSH
13257: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13261: LD_VAR 0 1
13265: PUSH
13266: LD_INT 1
13268: ARRAY
13269: PPUSH
13270: LD_VAR 0 1
13274: PUSH
13275: LD_INT 2
13277: ARRAY
13278: PPUSH
13279: CALL_OW 429
// end ; end ;
13283: LD_VAR 0 1
13287: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13288: LD_EXP 24
13292: PUSH
13293: LD_EXP 46
13297: AND
13298: IFFALSE 13310
13300: GO 13302
13302: DISABLE
// YouLost (  ) ;
13303: LD_STRING 
13305: PPUSH
13306: CALL_OW 104
13310: END
// every 0 0$1 trigger StreamModeActive and sFog do
13311: LD_EXP 24
13315: PUSH
13316: LD_EXP 45
13320: AND
13321: IFFALSE 13335
13323: GO 13325
13325: DISABLE
// FogOff ( your_side ) ;
13326: LD_OWVAR 2
13330: PPUSH
13331: CALL_OW 344
13335: END
// every 0 0$1 trigger StreamModeActive and sSun do
13336: LD_EXP 24
13340: PUSH
13341: LD_EXP 47
13345: AND
13346: IFFALSE 13374
13348: GO 13350
13350: DISABLE
// begin solar_recharge_percent := 0 ;
13351: LD_ADDR_OWVAR 79
13355: PUSH
13356: LD_INT 0
13358: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13359: LD_INT 10500
13361: PPUSH
13362: CALL_OW 67
// solar_recharge_percent := 100 ;
13366: LD_ADDR_OWVAR 79
13370: PUSH
13371: LD_INT 100
13373: ST_TO_ADDR
// end ;
13374: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13375: LD_EXP 24
13379: PUSH
13380: LD_EXP 48
13384: AND
13385: IFFALSE 13624
13387: GO 13389
13389: DISABLE
13390: LD_INT 0
13392: PPUSH
13393: PPUSH
13394: PPUSH
// begin tmp := [ ] ;
13395: LD_ADDR_VAR 0 3
13399: PUSH
13400: EMPTY
13401: ST_TO_ADDR
// for i := 1 to 6 do
13402: LD_ADDR_VAR 0 1
13406: PUSH
13407: DOUBLE
13408: LD_INT 1
13410: DEC
13411: ST_TO_ADDR
13412: LD_INT 6
13414: PUSH
13415: FOR_TO
13416: IFFALSE 13521
// begin uc_nation := nation_nature ;
13418: LD_ADDR_OWVAR 21
13422: PUSH
13423: LD_INT 0
13425: ST_TO_ADDR
// uc_side := 0 ;
13426: LD_ADDR_OWVAR 20
13430: PUSH
13431: LD_INT 0
13433: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13434: LD_ADDR_OWVAR 29
13438: PUSH
13439: LD_INT 12
13441: PUSH
13442: LD_INT 12
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: ST_TO_ADDR
// hc_agressivity := 20 ;
13449: LD_ADDR_OWVAR 35
13453: PUSH
13454: LD_INT 20
13456: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13457: LD_ADDR_OWVAR 28
13461: PUSH
13462: LD_INT 17
13464: ST_TO_ADDR
// hc_gallery :=  ;
13465: LD_ADDR_OWVAR 33
13469: PUSH
13470: LD_STRING 
13472: ST_TO_ADDR
// hc_name :=  ;
13473: LD_ADDR_OWVAR 26
13477: PUSH
13478: LD_STRING 
13480: ST_TO_ADDR
// un := CreateHuman ;
13481: LD_ADDR_VAR 0 2
13485: PUSH
13486: CALL_OW 44
13490: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13491: LD_VAR 0 2
13495: PPUSH
13496: LD_INT 1
13498: PPUSH
13499: CALL_OW 51
// tmp := tmp ^ un ;
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_VAR 0 3
13512: PUSH
13513: LD_VAR 0 2
13517: ADD
13518: ST_TO_ADDR
// end ;
13519: GO 13415
13521: POP
13522: POP
// repeat wait ( 0 0$1 ) ;
13523: LD_INT 35
13525: PPUSH
13526: CALL_OW 67
// for un in tmp do
13530: LD_ADDR_VAR 0 2
13534: PUSH
13535: LD_VAR 0 3
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13615
// begin if IsDead ( un ) then
13543: LD_VAR 0 2
13547: PPUSH
13548: CALL_OW 301
13552: IFFALSE 13572
// begin tmp := tmp diff un ;
13554: LD_ADDR_VAR 0 3
13558: PUSH
13559: LD_VAR 0 3
13563: PUSH
13564: LD_VAR 0 2
13568: DIFF
13569: ST_TO_ADDR
// continue ;
13570: GO 13540
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13572: LD_VAR 0 2
13576: PPUSH
13577: LD_INT 3
13579: PUSH
13580: LD_INT 22
13582: PUSH
13583: LD_INT 0
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 69
13598: PPUSH
13599: LD_VAR 0 2
13603: PPUSH
13604: CALL_OW 74
13608: PPUSH
13609: CALL_OW 115
// end ;
13613: GO 13540
13615: POP
13616: POP
// until not tmp ;
13617: LD_VAR 0 3
13621: NOT
13622: IFFALSE 13523
// end ;
13624: PPOPN 3
13626: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13627: LD_EXP 24
13631: PUSH
13632: LD_EXP 49
13636: AND
13637: IFFALSE 13691
13639: GO 13641
13641: DISABLE
// begin ToLua ( displayTroll(); ) ;
13642: LD_STRING displayTroll();
13644: PPUSH
13645: CALL_OW 559
// wait ( 3 3$00 ) ;
13649: LD_INT 6300
13651: PPUSH
13652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13656: LD_STRING hideTroll();
13658: PPUSH
13659: CALL_OW 559
// wait ( 1 1$00 ) ;
13663: LD_INT 2100
13665: PPUSH
13666: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13670: LD_STRING displayTroll();
13672: PPUSH
13673: CALL_OW 559
// wait ( 1 1$00 ) ;
13677: LD_INT 2100
13679: PPUSH
13680: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13684: LD_STRING hideTroll();
13686: PPUSH
13687: CALL_OW 559
// end ;
13691: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13692: LD_EXP 24
13696: PUSH
13697: LD_EXP 50
13701: AND
13702: IFFALSE 13765
13704: GO 13706
13706: DISABLE
13707: LD_INT 0
13709: PPUSH
// begin p := 0 ;
13710: LD_ADDR_VAR 0 1
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// repeat game_speed := 1 ;
13718: LD_ADDR_OWVAR 65
13722: PUSH
13723: LD_INT 1
13725: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13726: LD_INT 35
13728: PPUSH
13729: CALL_OW 67
// p := p + 1 ;
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: LD_VAR 0 1
13742: PUSH
13743: LD_INT 1
13745: PLUS
13746: ST_TO_ADDR
// until p >= 60 ;
13747: LD_VAR 0 1
13751: PUSH
13752: LD_INT 60
13754: GREATEREQUAL
13755: IFFALSE 13718
// game_speed := 4 ;
13757: LD_ADDR_OWVAR 65
13761: PUSH
13762: LD_INT 4
13764: ST_TO_ADDR
// end ;
13765: PPOPN 1
13767: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13768: LD_EXP 24
13772: PUSH
13773: LD_EXP 51
13777: AND
13778: IFFALSE 13924
13780: GO 13782
13782: DISABLE
13783: LD_INT 0
13785: PPUSH
13786: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13787: LD_ADDR_VAR 0 1
13791: PUSH
13792: LD_INT 22
13794: PUSH
13795: LD_OWVAR 2
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 2
13806: PUSH
13807: LD_INT 30
13809: PUSH
13810: LD_INT 0
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 30
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PPUSH
13836: CALL_OW 69
13840: ST_TO_ADDR
// if not depot then
13841: LD_VAR 0 1
13845: NOT
13846: IFFALSE 13850
// exit ;
13848: GO 13924
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13850: LD_ADDR_VAR 0 2
13854: PUSH
13855: LD_VAR 0 1
13859: PUSH
13860: LD_INT 1
13862: PPUSH
13863: LD_VAR 0 1
13867: PPUSH
13868: CALL_OW 12
13872: ARRAY
13873: PPUSH
13874: CALL_OW 274
13878: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13879: LD_VAR 0 2
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: LD_INT 0
13889: PPUSH
13890: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13894: LD_VAR 0 2
13898: PPUSH
13899: LD_INT 2
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13909: LD_VAR 0 2
13913: PPUSH
13914: LD_INT 3
13916: PPUSH
13917: LD_INT 0
13919: PPUSH
13920: CALL_OW 277
// end ;
13924: PPOPN 2
13926: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13927: LD_EXP 24
13931: PUSH
13932: LD_EXP 52
13936: AND
13937: IFFALSE 14034
13939: GO 13941
13941: DISABLE
13942: LD_INT 0
13944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13945: LD_ADDR_VAR 0 1
13949: PUSH
13950: LD_INT 22
13952: PUSH
13953: LD_OWVAR 2
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 21
13964: PUSH
13965: LD_INT 1
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 3
13974: PUSH
13975: LD_INT 23
13977: PUSH
13978: LD_INT 0
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: PPUSH
13994: CALL_OW 69
13998: ST_TO_ADDR
// if not tmp then
13999: LD_VAR 0 1
14003: NOT
14004: IFFALSE 14008
// exit ;
14006: GO 14034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14008: LD_VAR 0 1
14012: PUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 1
14020: PPUSH
14021: CALL_OW 12
14025: ARRAY
14026: PPUSH
14027: LD_INT 200
14029: PPUSH
14030: CALL_OW 234
// end ;
14034: PPOPN 1
14036: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14037: LD_EXP 24
14041: PUSH
14042: LD_EXP 53
14046: AND
14047: IFFALSE 14126
14049: GO 14051
14051: DISABLE
14052: LD_INT 0
14054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14055: LD_ADDR_VAR 0 1
14059: PUSH
14060: LD_INT 22
14062: PUSH
14063: LD_OWVAR 2
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 2
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: ST_TO_ADDR
// if not tmp then
14091: LD_VAR 0 1
14095: NOT
14096: IFFALSE 14100
// exit ;
14098: GO 14126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14100: LD_VAR 0 1
14104: PUSH
14105: LD_INT 1
14107: PPUSH
14108: LD_VAR 0 1
14112: PPUSH
14113: CALL_OW 12
14117: ARRAY
14118: PPUSH
14119: LD_INT 60
14121: PPUSH
14122: CALL_OW 234
// end ;
14126: PPOPN 1
14128: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14129: LD_EXP 24
14133: PUSH
14134: LD_EXP 54
14138: AND
14139: IFFALSE 14238
14141: GO 14143
14143: DISABLE
14144: LD_INT 0
14146: PPUSH
14147: PPUSH
// begin enable ;
14148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14149: LD_ADDR_VAR 0 1
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_OWVAR 2
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 61
14168: PUSH
14169: EMPTY
14170: LIST
14171: PUSH
14172: LD_INT 33
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: PPUSH
14187: CALL_OW 69
14191: ST_TO_ADDR
// if not tmp then
14192: LD_VAR 0 1
14196: NOT
14197: IFFALSE 14201
// exit ;
14199: GO 14238
// for i in tmp do
14201: LD_ADDR_VAR 0 2
14205: PUSH
14206: LD_VAR 0 1
14210: PUSH
14211: FOR_IN
14212: IFFALSE 14236
// if IsControledBy ( i ) then
14214: LD_VAR 0 2
14218: PPUSH
14219: CALL_OW 312
14223: IFFALSE 14234
// ComUnlink ( i ) ;
14225: LD_VAR 0 2
14229: PPUSH
14230: CALL_OW 136
14234: GO 14211
14236: POP
14237: POP
// end ;
14238: PPOPN 2
14240: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14241: LD_EXP 24
14245: PUSH
14246: LD_EXP 55
14250: AND
14251: IFFALSE 14391
14253: GO 14255
14255: DISABLE
14256: LD_INT 0
14258: PPUSH
14259: PPUSH
// begin ToLua ( displayPowell(); ) ;
14260: LD_STRING displayPowell();
14262: PPUSH
14263: CALL_OW 559
// uc_side := 0 ;
14267: LD_ADDR_OWVAR 20
14271: PUSH
14272: LD_INT 0
14274: ST_TO_ADDR
// uc_nation := 2 ;
14275: LD_ADDR_OWVAR 21
14279: PUSH
14280: LD_INT 2
14282: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14283: LD_ADDR_OWVAR 37
14287: PUSH
14288: LD_INT 14
14290: ST_TO_ADDR
// vc_engine := engine_siberite ;
14291: LD_ADDR_OWVAR 39
14295: PUSH
14296: LD_INT 3
14298: ST_TO_ADDR
// vc_control := control_apeman ;
14299: LD_ADDR_OWVAR 38
14303: PUSH
14304: LD_INT 5
14306: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14307: LD_ADDR_OWVAR 40
14311: PUSH
14312: LD_INT 29
14314: ST_TO_ADDR
// un := CreateVehicle ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: CALL_OW 45
14324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14325: LD_VAR 0 2
14329: PPUSH
14330: LD_INT 1
14332: PPUSH
14333: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14337: LD_INT 35
14339: PPUSH
14340: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14344: LD_VAR 0 2
14348: PPUSH
14349: LD_INT 22
14351: PUSH
14352: LD_OWVAR 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: PPUSH
14366: LD_VAR 0 2
14370: PPUSH
14371: CALL_OW 74
14375: PPUSH
14376: CALL_OW 115
// until IsDead ( un ) ;
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 301
14389: IFFALSE 14337
// end ;
14391: PPOPN 2
14393: END
// every 0 0$1 trigger StreamModeActive and sStu do
14394: LD_EXP 24
14398: PUSH
14399: LD_EXP 63
14403: AND
14404: IFFALSE 14420
14406: GO 14408
14408: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14409: LD_STRING displayStucuk();
14411: PPUSH
14412: CALL_OW 559
// ResetFog ;
14416: CALL_OW 335
// end ;
14420: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14421: LD_EXP 24
14425: PUSH
14426: LD_EXP 56
14430: AND
14431: IFFALSE 14572
14433: GO 14435
14435: DISABLE
14436: LD_INT 0
14438: PPUSH
14439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14440: LD_ADDR_VAR 0 2
14444: PUSH
14445: LD_INT 22
14447: PUSH
14448: LD_OWVAR 2
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 21
14459: PUSH
14460: LD_INT 1
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL_OW 69
14475: ST_TO_ADDR
// if not tmp then
14476: LD_VAR 0 2
14480: NOT
14481: IFFALSE 14485
// exit ;
14483: GO 14572
// un := tmp [ rand ( 1 , tmp ) ] ;
14485: LD_ADDR_VAR 0 1
14489: PUSH
14490: LD_VAR 0 2
14494: PUSH
14495: LD_INT 1
14497: PPUSH
14498: LD_VAR 0 2
14502: PPUSH
14503: CALL_OW 12
14507: ARRAY
14508: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_INT 0
14516: PPUSH
14517: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14521: LD_VAR 0 1
14525: PPUSH
14526: LD_OWVAR 3
14530: PUSH
14531: LD_VAR 0 1
14535: DIFF
14536: PPUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL_OW 74
14546: PPUSH
14547: CALL_OW 115
// wait ( 0 0$20 ) ;
14551: LD_INT 700
14553: PPUSH
14554: CALL_OW 67
// SetSide ( un , your_side ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_OWVAR 2
14567: PPUSH
14568: CALL_OW 235
// end ;
14572: PPOPN 2
14574: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14575: LD_EXP 24
14579: PUSH
14580: LD_EXP 57
14584: AND
14585: IFFALSE 14691
14587: GO 14589
14589: DISABLE
14590: LD_INT 0
14592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14593: LD_ADDR_VAR 0 1
14597: PUSH
14598: LD_INT 22
14600: PUSH
14601: LD_OWVAR 2
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 2
14612: PUSH
14613: LD_INT 30
14615: PUSH
14616: LD_INT 0
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 30
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PPUSH
14642: CALL_OW 69
14646: ST_TO_ADDR
// if not depot then
14647: LD_VAR 0 1
14651: NOT
14652: IFFALSE 14656
// exit ;
14654: GO 14691
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14656: LD_VAR 0 1
14660: PUSH
14661: LD_INT 1
14663: ARRAY
14664: PPUSH
14665: CALL_OW 250
14669: PPUSH
14670: LD_VAR 0 1
14674: PUSH
14675: LD_INT 1
14677: ARRAY
14678: PPUSH
14679: CALL_OW 251
14683: PPUSH
14684: LD_INT 70
14686: PPUSH
14687: CALL_OW 495
// end ;
14691: PPOPN 1
14693: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14694: LD_EXP 24
14698: PUSH
14699: LD_EXP 58
14703: AND
14704: IFFALSE 14915
14706: GO 14708
14708: DISABLE
14709: LD_INT 0
14711: PPUSH
14712: PPUSH
14713: PPUSH
14714: PPUSH
14715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14716: LD_ADDR_VAR 0 5
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_OWVAR 2
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 21
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PPUSH
14747: CALL_OW 69
14751: ST_TO_ADDR
// if not tmp then
14752: LD_VAR 0 5
14756: NOT
14757: IFFALSE 14761
// exit ;
14759: GO 14915
// for i in tmp do
14761: LD_ADDR_VAR 0 1
14765: PUSH
14766: LD_VAR 0 5
14770: PUSH
14771: FOR_IN
14772: IFFALSE 14913
// begin d := rand ( 0 , 5 ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_INT 0
14781: PPUSH
14782: LD_INT 5
14784: PPUSH
14785: CALL_OW 12
14789: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14790: LD_ADDR_VAR 0 2
14794: PUSH
14795: LD_VAR 0 1
14799: PPUSH
14800: CALL_OW 250
14804: PPUSH
14805: LD_VAR 0 4
14809: PPUSH
14810: LD_INT 3
14812: PPUSH
14813: LD_INT 12
14815: PPUSH
14816: CALL_OW 12
14820: PPUSH
14821: CALL_OW 272
14825: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14826: LD_ADDR_VAR 0 3
14830: PUSH
14831: LD_VAR 0 1
14835: PPUSH
14836: CALL_OW 251
14840: PPUSH
14841: LD_VAR 0 4
14845: PPUSH
14846: LD_INT 3
14848: PPUSH
14849: LD_INT 12
14851: PPUSH
14852: CALL_OW 12
14856: PPUSH
14857: CALL_OW 273
14861: ST_TO_ADDR
// if ValidHex ( x , y ) then
14862: LD_VAR 0 2
14866: PPUSH
14867: LD_VAR 0 3
14871: PPUSH
14872: CALL_OW 488
14876: IFFALSE 14911
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: LD_VAR 0 3
14892: PPUSH
14893: LD_INT 3
14895: PPUSH
14896: LD_INT 6
14898: PPUSH
14899: CALL_OW 12
14903: PPUSH
14904: LD_INT 1
14906: PPUSH
14907: CALL_OW 483
// end ;
14911: GO 14771
14913: POP
14914: POP
// end ;
14915: PPOPN 5
14917: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14918: LD_EXP 24
14922: PUSH
14923: LD_EXP 59
14927: AND
14928: IFFALSE 15022
14930: GO 14932
14932: DISABLE
14933: LD_INT 0
14935: PPUSH
14936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14937: LD_ADDR_VAR 0 2
14941: PUSH
14942: LD_INT 22
14944: PUSH
14945: LD_OWVAR 2
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 32
14956: PUSH
14957: LD_INT 1
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 21
14966: PUSH
14967: LD_INT 2
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PPUSH
14979: CALL_OW 69
14983: ST_TO_ADDR
// if not tmp then
14984: LD_VAR 0 2
14988: NOT
14989: IFFALSE 14993
// exit ;
14991: GO 15022
// for i in tmp do
14993: LD_ADDR_VAR 0 1
14997: PUSH
14998: LD_VAR 0 2
15002: PUSH
15003: FOR_IN
15004: IFFALSE 15020
// SetFuel ( i , 0 ) ;
15006: LD_VAR 0 1
15010: PPUSH
15011: LD_INT 0
15013: PPUSH
15014: CALL_OW 240
15018: GO 15003
15020: POP
15021: POP
// end ;
15022: PPOPN 2
15024: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15025: LD_EXP 24
15029: PUSH
15030: LD_EXP 60
15034: AND
15035: IFFALSE 15101
15037: GO 15039
15039: DISABLE
15040: LD_INT 0
15042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: LD_INT 22
15050: PUSH
15051: LD_OWVAR 2
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 30
15062: PUSH
15063: LD_INT 29
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 69
15078: ST_TO_ADDR
// if not tmp then
15079: LD_VAR 0 1
15083: NOT
15084: IFFALSE 15088
// exit ;
15086: GO 15101
// DestroyUnit ( tmp [ 1 ] ) ;
15088: LD_VAR 0 1
15092: PUSH
15093: LD_INT 1
15095: ARRAY
15096: PPUSH
15097: CALL_OW 65
// end ;
15101: PPOPN 1
15103: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15104: LD_EXP 24
15108: PUSH
15109: LD_EXP 62
15113: AND
15114: IFFALSE 15243
15116: GO 15118
15118: DISABLE
15119: LD_INT 0
15121: PPUSH
// begin uc_side := 0 ;
15122: LD_ADDR_OWVAR 20
15126: PUSH
15127: LD_INT 0
15129: ST_TO_ADDR
// uc_nation := nation_arabian ;
15130: LD_ADDR_OWVAR 21
15134: PUSH
15135: LD_INT 2
15137: ST_TO_ADDR
// hc_gallery :=  ;
15138: LD_ADDR_OWVAR 33
15142: PUSH
15143: LD_STRING 
15145: ST_TO_ADDR
// hc_name :=  ;
15146: LD_ADDR_OWVAR 26
15150: PUSH
15151: LD_STRING 
15153: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15154: LD_INT 1
15156: PPUSH
15157: LD_INT 11
15159: PPUSH
15160: LD_INT 10
15162: PPUSH
15163: CALL_OW 380
// un := CreateHuman ;
15167: LD_ADDR_VAR 0 1
15171: PUSH
15172: CALL_OW 44
15176: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15177: LD_VAR 0 1
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15189: LD_INT 35
15191: PPUSH
15192: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_INT 22
15203: PUSH
15204: LD_OWVAR 2
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 69
15217: PPUSH
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 74
15227: PPUSH
15228: CALL_OW 115
// until IsDead ( un ) ;
15232: LD_VAR 0 1
15236: PPUSH
15237: CALL_OW 301
15241: IFFALSE 15189
// end ;
15243: PPOPN 1
15245: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15246: LD_EXP 24
15250: PUSH
15251: LD_EXP 64
15255: AND
15256: IFFALSE 15268
15258: GO 15260
15260: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15261: LD_STRING earthquake(getX(game), 0, 32)
15263: PPUSH
15264: CALL_OW 559
15268: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15269: LD_EXP 24
15273: PUSH
15274: LD_EXP 65
15278: AND
15279: IFFALSE 15370
15281: GO 15283
15283: DISABLE
15284: LD_INT 0
15286: PPUSH
// begin enable ;
15287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15288: LD_ADDR_VAR 0 1
15292: PUSH
15293: LD_INT 22
15295: PUSH
15296: LD_OWVAR 2
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 21
15307: PUSH
15308: LD_INT 2
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 33
15317: PUSH
15318: LD_INT 3
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: PPUSH
15330: CALL_OW 69
15334: ST_TO_ADDR
// if not tmp then
15335: LD_VAR 0 1
15339: NOT
15340: IFFALSE 15344
// exit ;
15342: GO 15370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15344: LD_VAR 0 1
15348: PUSH
15349: LD_INT 1
15351: PPUSH
15352: LD_VAR 0 1
15356: PPUSH
15357: CALL_OW 12
15361: ARRAY
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 234
// end ;
15370: PPOPN 1
15372: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15373: LD_EXP 24
15377: PUSH
15378: LD_EXP 66
15382: AND
15383: IFFALSE 15524
15385: GO 15387
15387: DISABLE
15388: LD_INT 0
15390: PPUSH
15391: PPUSH
15392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15393: LD_ADDR_VAR 0 3
15397: PUSH
15398: LD_INT 22
15400: PUSH
15401: LD_OWVAR 2
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 25
15412: PUSH
15413: LD_INT 1
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 69
15428: ST_TO_ADDR
// if not tmp then
15429: LD_VAR 0 3
15433: NOT
15434: IFFALSE 15438
// exit ;
15436: GO 15524
// un := tmp [ rand ( 1 , tmp ) ] ;
15438: LD_ADDR_VAR 0 2
15442: PUSH
15443: LD_VAR 0 3
15447: PUSH
15448: LD_INT 1
15450: PPUSH
15451: LD_VAR 0 3
15455: PPUSH
15456: CALL_OW 12
15460: ARRAY
15461: ST_TO_ADDR
// if Crawls ( un ) then
15462: LD_VAR 0 2
15466: PPUSH
15467: CALL_OW 318
15471: IFFALSE 15482
// ComWalk ( un ) ;
15473: LD_VAR 0 2
15477: PPUSH
15478: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15482: LD_VAR 0 2
15486: PPUSH
15487: LD_INT 9
15489: PPUSH
15490: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15494: LD_INT 28
15496: PPUSH
15497: LD_OWVAR 2
15501: PPUSH
15502: LD_INT 2
15504: PPUSH
15505: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15509: LD_INT 29
15511: PPUSH
15512: LD_OWVAR 2
15516: PPUSH
15517: LD_INT 2
15519: PPUSH
15520: CALL_OW 322
// end ;
15524: PPOPN 3
15526: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15527: LD_EXP 24
15531: PUSH
15532: LD_EXP 67
15536: AND
15537: IFFALSE 15648
15539: GO 15541
15541: DISABLE
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
15546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15547: LD_ADDR_VAR 0 3
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_OWVAR 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 25
15566: PUSH
15567: LD_INT 1
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: ST_TO_ADDR
// if not tmp then
15583: LD_VAR 0 3
15587: NOT
15588: IFFALSE 15592
// exit ;
15590: GO 15648
// un := tmp [ rand ( 1 , tmp ) ] ;
15592: LD_ADDR_VAR 0 2
15596: PUSH
15597: LD_VAR 0 3
15601: PUSH
15602: LD_INT 1
15604: PPUSH
15605: LD_VAR 0 3
15609: PPUSH
15610: CALL_OW 12
15614: ARRAY
15615: ST_TO_ADDR
// if Crawls ( un ) then
15616: LD_VAR 0 2
15620: PPUSH
15621: CALL_OW 318
15625: IFFALSE 15636
// ComWalk ( un ) ;
15627: LD_VAR 0 2
15631: PPUSH
15632: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15636: LD_VAR 0 2
15640: PPUSH
15641: LD_INT 8
15643: PPUSH
15644: CALL_OW 336
// end ;
15648: PPOPN 3
15650: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15651: LD_EXP 24
15655: PUSH
15656: LD_EXP 68
15660: AND
15661: IFFALSE 15805
15663: GO 15665
15665: DISABLE
15666: LD_INT 0
15668: PPUSH
15669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15670: LD_ADDR_VAR 0 2
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_OWVAR 2
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 21
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: LD_INT 34
15702: PUSH
15703: LD_INT 12
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 34
15712: PUSH
15713: LD_INT 51
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 34
15722: PUSH
15723: LD_INT 32
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: PPUSH
15741: CALL_OW 69
15745: ST_TO_ADDR
// if not tmp then
15746: LD_VAR 0 2
15750: NOT
15751: IFFALSE 15755
// exit ;
15753: GO 15805
// for i in tmp do
15755: LD_ADDR_VAR 0 1
15759: PUSH
15760: LD_VAR 0 2
15764: PUSH
15765: FOR_IN
15766: IFFALSE 15803
// if GetCargo ( i , mat_artifact ) = 0 then
15768: LD_VAR 0 1
15772: PPUSH
15773: LD_INT 4
15775: PPUSH
15776: CALL_OW 289
15780: PUSH
15781: LD_INT 0
15783: EQUAL
15784: IFFALSE 15801
// SetCargo ( i , mat_siberit , 100 ) ;
15786: LD_VAR 0 1
15790: PPUSH
15791: LD_INT 3
15793: PPUSH
15794: LD_INT 100
15796: PPUSH
15797: CALL_OW 290
15801: GO 15765
15803: POP
15804: POP
// end ;
15805: PPOPN 2
15807: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15808: LD_EXP 24
15812: PUSH
15813: LD_EXP 69
15817: AND
15818: IFFALSE 16001
15820: GO 15822
15822: DISABLE
15823: LD_INT 0
15825: PPUSH
15826: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15827: LD_ADDR_VAR 0 2
15831: PUSH
15832: LD_INT 22
15834: PUSH
15835: LD_OWVAR 2
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: ST_TO_ADDR
// if not tmp then
15849: LD_VAR 0 2
15853: NOT
15854: IFFALSE 15858
// exit ;
15856: GO 16001
// for i := 1 to 2 do
15858: LD_ADDR_VAR 0 1
15862: PUSH
15863: DOUBLE
15864: LD_INT 1
15866: DEC
15867: ST_TO_ADDR
15868: LD_INT 2
15870: PUSH
15871: FOR_TO
15872: IFFALSE 15999
// begin uc_side := your_side ;
15874: LD_ADDR_OWVAR 20
15878: PUSH
15879: LD_OWVAR 2
15883: ST_TO_ADDR
// uc_nation := nation_american ;
15884: LD_ADDR_OWVAR 21
15888: PUSH
15889: LD_INT 1
15891: ST_TO_ADDR
// vc_chassis := us_morphling ;
15892: LD_ADDR_OWVAR 37
15896: PUSH
15897: LD_INT 5
15899: ST_TO_ADDR
// vc_engine := engine_siberite ;
15900: LD_ADDR_OWVAR 39
15904: PUSH
15905: LD_INT 3
15907: ST_TO_ADDR
// vc_control := control_computer ;
15908: LD_ADDR_OWVAR 38
15912: PUSH
15913: LD_INT 3
15915: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15916: LD_ADDR_OWVAR 40
15920: PUSH
15921: LD_INT 10
15923: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15924: LD_VAR 0 2
15928: PUSH
15929: LD_INT 1
15931: ARRAY
15932: PPUSH
15933: CALL_OW 310
15937: NOT
15938: IFFALSE 15985
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15940: CALL_OW 45
15944: PPUSH
15945: LD_VAR 0 2
15949: PUSH
15950: LD_INT 1
15952: ARRAY
15953: PPUSH
15954: CALL_OW 250
15958: PPUSH
15959: LD_VAR 0 2
15963: PUSH
15964: LD_INT 1
15966: ARRAY
15967: PPUSH
15968: CALL_OW 251
15972: PPUSH
15973: LD_INT 12
15975: PPUSH
15976: LD_INT 1
15978: PPUSH
15979: CALL_OW 50
15983: GO 15997
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15985: CALL_OW 45
15989: PPUSH
15990: LD_INT 1
15992: PPUSH
15993: CALL_OW 51
// end ;
15997: GO 15871
15999: POP
16000: POP
// end ;
16001: PPOPN 2
16003: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16004: LD_EXP 24
16008: PUSH
16009: LD_EXP 70
16013: AND
16014: IFFALSE 16236
16016: GO 16018
16018: DISABLE
16019: LD_INT 0
16021: PPUSH
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
16026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16027: LD_ADDR_VAR 0 6
16031: PUSH
16032: LD_INT 22
16034: PUSH
16035: LD_OWVAR 2
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 21
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 23
16059: PUSH
16060: LD_INT 0
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 69
16080: ST_TO_ADDR
// if not tmp then
16081: LD_VAR 0 6
16085: NOT
16086: IFFALSE 16090
// exit ;
16088: GO 16236
// s1 := rand ( 1 , 4 ) ;
16090: LD_ADDR_VAR 0 2
16094: PUSH
16095: LD_INT 1
16097: PPUSH
16098: LD_INT 4
16100: PPUSH
16101: CALL_OW 12
16105: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16106: LD_ADDR_VAR 0 4
16110: PUSH
16111: LD_VAR 0 6
16115: PUSH
16116: LD_INT 1
16118: ARRAY
16119: PPUSH
16120: LD_VAR 0 2
16124: PPUSH
16125: CALL_OW 259
16129: ST_TO_ADDR
// if s1 = 1 then
16130: LD_VAR 0 2
16134: PUSH
16135: LD_INT 1
16137: EQUAL
16138: IFFALSE 16158
// s2 := rand ( 2 , 4 ) else
16140: LD_ADDR_VAR 0 3
16144: PUSH
16145: LD_INT 2
16147: PPUSH
16148: LD_INT 4
16150: PPUSH
16151: CALL_OW 12
16155: ST_TO_ADDR
16156: GO 16166
// s2 := 1 ;
16158: LD_ADDR_VAR 0 3
16162: PUSH
16163: LD_INT 1
16165: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16166: LD_ADDR_VAR 0 5
16170: PUSH
16171: LD_VAR 0 6
16175: PUSH
16176: LD_INT 1
16178: ARRAY
16179: PPUSH
16180: LD_VAR 0 3
16184: PPUSH
16185: CALL_OW 259
16189: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16190: LD_VAR 0 6
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: LD_VAR 0 2
16203: PPUSH
16204: LD_VAR 0 5
16208: PPUSH
16209: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16213: LD_VAR 0 6
16217: PUSH
16218: LD_INT 1
16220: ARRAY
16221: PPUSH
16222: LD_VAR 0 3
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: CALL_OW 237
// end ;
16236: PPOPN 6
16238: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16239: LD_EXP 24
16243: PUSH
16244: LD_EXP 71
16248: AND
16249: IFFALSE 16328
16251: GO 16253
16253: DISABLE
16254: LD_INT 0
16256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16257: LD_ADDR_VAR 0 1
16261: PUSH
16262: LD_INT 22
16264: PUSH
16265: LD_OWVAR 2
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 30
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PPUSH
16288: CALL_OW 69
16292: ST_TO_ADDR
// if not tmp then
16293: LD_VAR 0 1
16297: NOT
16298: IFFALSE 16302
// exit ;
16300: GO 16328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16302: LD_VAR 0 1
16306: PUSH
16307: LD_INT 1
16309: PPUSH
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 12
16319: ARRAY
16320: PPUSH
16321: LD_INT 1
16323: PPUSH
16324: CALL_OW 234
// end ;
16328: PPOPN 1
16330: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16331: LD_EXP 24
16335: PUSH
16336: LD_EXP 72
16340: AND
16341: IFFALSE 16453
16343: GO 16345
16345: DISABLE
16346: LD_INT 0
16348: PPUSH
16349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16350: LD_ADDR_VAR 0 2
16354: PUSH
16355: LD_INT 22
16357: PUSH
16358: LD_OWVAR 2
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 2
16369: PUSH
16370: LD_INT 30
16372: PUSH
16373: LD_INT 27
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 30
16382: PUSH
16383: LD_INT 26
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 30
16392: PUSH
16393: LD_INT 28
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PPUSH
16410: CALL_OW 69
16414: ST_TO_ADDR
// if not tmp then
16415: LD_VAR 0 2
16419: NOT
16420: IFFALSE 16424
// exit ;
16422: GO 16453
// for i in tmp do
16424: LD_ADDR_VAR 0 1
16428: PUSH
16429: LD_VAR 0 2
16433: PUSH
16434: FOR_IN
16435: IFFALSE 16451
// SetLives ( i , 1 ) ;
16437: LD_VAR 0 1
16441: PPUSH
16442: LD_INT 1
16444: PPUSH
16445: CALL_OW 234
16449: GO 16434
16451: POP
16452: POP
// end ;
16453: PPOPN 2
16455: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16456: LD_EXP 24
16460: PUSH
16461: LD_EXP 73
16465: AND
16466: IFFALSE 16753
16468: GO 16470
16470: DISABLE
16471: LD_INT 0
16473: PPUSH
16474: PPUSH
16475: PPUSH
// begin i := rand ( 1 , 7 ) ;
16476: LD_ADDR_VAR 0 1
16480: PUSH
16481: LD_INT 1
16483: PPUSH
16484: LD_INT 7
16486: PPUSH
16487: CALL_OW 12
16491: ST_TO_ADDR
// case i of 1 :
16492: LD_VAR 0 1
16496: PUSH
16497: LD_INT 1
16499: DOUBLE
16500: EQUAL
16501: IFTRUE 16505
16503: GO 16515
16505: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16506: LD_STRING earthquake(getX(game), 0, 32)
16508: PPUSH
16509: CALL_OW 559
16513: GO 16753
16515: LD_INT 2
16517: DOUBLE
16518: EQUAL
16519: IFTRUE 16523
16521: GO 16537
16523: POP
// begin ToLua ( displayStucuk(); ) ;
16524: LD_STRING displayStucuk();
16526: PPUSH
16527: CALL_OW 559
// ResetFog ;
16531: CALL_OW 335
// end ; 3 :
16535: GO 16753
16537: LD_INT 3
16539: DOUBLE
16540: EQUAL
16541: IFTRUE 16545
16543: GO 16649
16545: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16546: LD_ADDR_VAR 0 2
16550: PUSH
16551: LD_INT 22
16553: PUSH
16554: LD_OWVAR 2
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 25
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 69
16581: ST_TO_ADDR
// if not tmp then
16582: LD_VAR 0 2
16586: NOT
16587: IFFALSE 16591
// exit ;
16589: GO 16753
// un := tmp [ rand ( 1 , tmp ) ] ;
16591: LD_ADDR_VAR 0 3
16595: PUSH
16596: LD_VAR 0 2
16600: PUSH
16601: LD_INT 1
16603: PPUSH
16604: LD_VAR 0 2
16608: PPUSH
16609: CALL_OW 12
16613: ARRAY
16614: ST_TO_ADDR
// if Crawls ( un ) then
16615: LD_VAR 0 3
16619: PPUSH
16620: CALL_OW 318
16624: IFFALSE 16635
// ComWalk ( un ) ;
16626: LD_VAR 0 3
16630: PPUSH
16631: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_INT 8
16642: PPUSH
16643: CALL_OW 336
// end ; 4 :
16647: GO 16753
16649: LD_INT 4
16651: DOUBLE
16652: EQUAL
16653: IFTRUE 16657
16655: GO 16731
16657: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16658: LD_ADDR_VAR 0 2
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_OWVAR 2
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 30
16677: PUSH
16678: LD_INT 29
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 69
16693: ST_TO_ADDR
// if not tmp then
16694: LD_VAR 0 2
16698: NOT
16699: IFFALSE 16703
// exit ;
16701: GO 16753
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16703: LD_VAR 0 2
16707: PUSH
16708: LD_INT 1
16710: ARRAY
16711: PPUSH
16712: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16716: LD_VAR 0 2
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: PPUSH
16725: CALL_OW 65
// end ; 5 .. 7 :
16729: GO 16753
16731: LD_INT 5
16733: DOUBLE
16734: GREATEREQUAL
16735: IFFALSE 16743
16737: LD_INT 7
16739: DOUBLE
16740: LESSEQUAL
16741: IFTRUE 16745
16743: GO 16752
16745: POP
// StreamSibBomb ; end ;
16746: CALL 12990 0 0
16750: GO 16753
16752: POP
// end ;
16753: PPOPN 3
16755: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16756: LD_EXP 24
16760: PUSH
16761: LD_EXP 74
16765: AND
16766: IFFALSE 16922
16768: GO 16770
16770: DISABLE
16771: LD_INT 0
16773: PPUSH
16774: PPUSH
16775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16776: LD_ADDR_VAR 0 2
16780: PUSH
16781: LD_INT 81
16783: PUSH
16784: LD_OWVAR 2
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 2
16795: PUSH
16796: LD_INT 21
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 21
16808: PUSH
16809: LD_INT 2
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PPUSH
16825: CALL_OW 69
16829: ST_TO_ADDR
// if not tmp then
16830: LD_VAR 0 2
16834: NOT
16835: IFFALSE 16839
// exit ;
16837: GO 16922
// p := 0 ;
16839: LD_ADDR_VAR 0 3
16843: PUSH
16844: LD_INT 0
16846: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16847: LD_INT 35
16849: PPUSH
16850: CALL_OW 67
// p := p + 1 ;
16854: LD_ADDR_VAR 0 3
16858: PUSH
16859: LD_VAR 0 3
16863: PUSH
16864: LD_INT 1
16866: PLUS
16867: ST_TO_ADDR
// for i in tmp do
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_VAR 0 2
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16910
// if GetLives ( i ) < 1000 then
16881: LD_VAR 0 1
16885: PPUSH
16886: CALL_OW 256
16890: PUSH
16891: LD_INT 1000
16893: LESS
16894: IFFALSE 16908
// SetLives ( i , 1000 ) ;
16896: LD_VAR 0 1
16900: PPUSH
16901: LD_INT 1000
16903: PPUSH
16904: CALL_OW 234
16908: GO 16878
16910: POP
16911: POP
// until p > 20 ;
16912: LD_VAR 0 3
16916: PUSH
16917: LD_INT 20
16919: GREATER
16920: IFFALSE 16847
// end ;
16922: PPOPN 3
16924: END
// every 0 0$1 trigger StreamModeActive and sTime do
16925: LD_EXP 24
16929: PUSH
16930: LD_EXP 75
16934: AND
16935: IFFALSE 16970
16937: GO 16939
16939: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16940: LD_INT 28
16942: PPUSH
16943: LD_OWVAR 2
16947: PPUSH
16948: LD_INT 2
16950: PPUSH
16951: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16955: LD_INT 30
16957: PPUSH
16958: LD_OWVAR 2
16962: PPUSH
16963: LD_INT 2
16965: PPUSH
16966: CALL_OW 322
// end ;
16970: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16971: LD_EXP 24
16975: PUSH
16976: LD_EXP 76
16980: AND
16981: IFFALSE 17102
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16990: LD_ADDR_VAR 0 2
16994: PUSH
16995: LD_INT 22
16997: PUSH
16998: LD_OWVAR 2
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: LD_INT 23
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// if not tmp then
17044: LD_VAR 0 2
17048: NOT
17049: IFFALSE 17053
// exit ;
17051: GO 17102
// for i in tmp do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: LD_VAR 0 2
17062: PUSH
17063: FOR_IN
17064: IFFALSE 17100
// begin if Crawls ( i ) then
17066: LD_VAR 0 1
17070: PPUSH
17071: CALL_OW 318
17075: IFFALSE 17086
// ComWalk ( i ) ;
17077: LD_VAR 0 1
17081: PPUSH
17082: CALL_OW 138
// SetClass ( i , 2 ) ;
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_INT 2
17093: PPUSH
17094: CALL_OW 336
// end ;
17098: GO 17063
17100: POP
17101: POP
// end ;
17102: PPOPN 2
17104: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17105: LD_EXP 24
17109: PUSH
17110: LD_EXP 77
17114: AND
17115: IFFALSE 17403
17117: GO 17119
17119: DISABLE
17120: LD_INT 0
17122: PPUSH
17123: PPUSH
17124: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17125: LD_OWVAR 2
17129: PPUSH
17130: LD_INT 9
17132: PPUSH
17133: LD_INT 1
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17143: LD_INT 9
17145: PPUSH
17146: LD_OWVAR 2
17150: PPUSH
17151: CALL_OW 343
// uc_side := 9 ;
17155: LD_ADDR_OWVAR 20
17159: PUSH
17160: LD_INT 9
17162: ST_TO_ADDR
// uc_nation := 2 ;
17163: LD_ADDR_OWVAR 21
17167: PUSH
17168: LD_INT 2
17170: ST_TO_ADDR
// hc_name := Dark Warrior ;
17171: LD_ADDR_OWVAR 26
17175: PUSH
17176: LD_STRING Dark Warrior
17178: ST_TO_ADDR
// hc_gallery :=  ;
17179: LD_ADDR_OWVAR 33
17183: PUSH
17184: LD_STRING 
17186: ST_TO_ADDR
// hc_noskilllimit := true ;
17187: LD_ADDR_OWVAR 76
17191: PUSH
17192: LD_INT 1
17194: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17195: LD_ADDR_OWVAR 31
17199: PUSH
17200: LD_INT 30
17202: PUSH
17203: LD_INT 30
17205: PUSH
17206: LD_INT 30
17208: PUSH
17209: LD_INT 30
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: ST_TO_ADDR
// un := CreateHuman ;
17218: LD_ADDR_VAR 0 3
17222: PUSH
17223: CALL_OW 44
17227: ST_TO_ADDR
// hc_noskilllimit := false ;
17228: LD_ADDR_OWVAR 76
17232: PUSH
17233: LD_INT 0
17235: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17236: LD_VAR 0 3
17240: PPUSH
17241: LD_INT 1
17243: PPUSH
17244: CALL_OW 51
// ToLua ( playRanger() ) ;
17248: LD_STRING playRanger()
17250: PPUSH
17251: CALL_OW 559
// p := 0 ;
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_INT 0
17262: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17263: LD_INT 35
17265: PPUSH
17266: CALL_OW 67
// p := p + 1 ;
17270: LD_ADDR_VAR 0 2
17274: PUSH
17275: LD_VAR 0 2
17279: PUSH
17280: LD_INT 1
17282: PLUS
17283: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17284: LD_VAR 0 3
17288: PPUSH
17289: CALL_OW 256
17293: PUSH
17294: LD_INT 1000
17296: LESS
17297: IFFALSE 17311
// SetLives ( un , 1000 ) ;
17299: LD_VAR 0 3
17303: PPUSH
17304: LD_INT 1000
17306: PPUSH
17307: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17311: LD_VAR 0 3
17315: PPUSH
17316: LD_INT 81
17318: PUSH
17319: LD_OWVAR 2
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 91
17330: PUSH
17331: LD_VAR 0 3
17335: PUSH
17336: LD_INT 30
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 69
17352: PPUSH
17353: LD_VAR 0 3
17357: PPUSH
17358: CALL_OW 74
17362: PPUSH
17363: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17367: LD_VAR 0 2
17371: PUSH
17372: LD_INT 80
17374: GREATER
17375: PUSH
17376: LD_VAR 0 3
17380: PPUSH
17381: CALL_OW 301
17385: OR
17386: IFFALSE 17263
// if un then
17388: LD_VAR 0 3
17392: IFFALSE 17403
// RemoveUnit ( un ) ;
17394: LD_VAR 0 3
17398: PPUSH
17399: CALL_OW 64
// end ;
17403: PPOPN 3
17405: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17406: LD_EXP 78
17410: IFFALSE 17526
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
17419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17420: LD_ADDR_VAR 0 2
17424: PUSH
17425: LD_INT 81
17427: PUSH
17428: LD_OWVAR 2
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 21
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17456: LD_STRING playComputer()
17458: PPUSH
17459: CALL_OW 559
// if not tmp then
17463: LD_VAR 0 2
17467: NOT
17468: IFFALSE 17472
// exit ;
17470: GO 17526
// for i in tmp do
17472: LD_ADDR_VAR 0 1
17476: PUSH
17477: LD_VAR 0 2
17481: PUSH
17482: FOR_IN
17483: IFFALSE 17524
// for j := 1 to 4 do
17485: LD_ADDR_VAR 0 3
17489: PUSH
17490: DOUBLE
17491: LD_INT 1
17493: DEC
17494: ST_TO_ADDR
17495: LD_INT 4
17497: PUSH
17498: FOR_TO
17499: IFFALSE 17520
// SetSkill ( i , j , 10 ) ;
17501: LD_VAR 0 1
17505: PPUSH
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_INT 10
17513: PPUSH
17514: CALL_OW 237
17518: GO 17498
17520: POP
17521: POP
17522: GO 17482
17524: POP
17525: POP
// end ;
17526: PPOPN 3
17528: END
// every 0 0$1 trigger s30 do var i , tmp ;
17529: LD_EXP 79
17533: IFFALSE 17602
17535: GO 17537
17537: DISABLE
17538: LD_INT 0
17540: PPUSH
17541: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17542: LD_ADDR_VAR 0 2
17546: PUSH
17547: LD_INT 22
17549: PUSH
17550: LD_OWVAR 2
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: ST_TO_ADDR
// if not tmp then
17564: LD_VAR 0 2
17568: NOT
17569: IFFALSE 17573
// exit ;
17571: GO 17602
// for i in tmp do
17573: LD_ADDR_VAR 0 1
17577: PUSH
17578: LD_VAR 0 2
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17600
// SetLives ( i , 300 ) ;
17586: LD_VAR 0 1
17590: PPUSH
17591: LD_INT 300
17593: PPUSH
17594: CALL_OW 234
17598: GO 17583
17600: POP
17601: POP
// end ;
17602: PPOPN 2
17604: END
// every 0 0$1 trigger s60 do var i , tmp ;
17605: LD_EXP 80
17609: IFFALSE 17678
17611: GO 17613
17613: DISABLE
17614: LD_INT 0
17616: PPUSH
17617: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17618: LD_ADDR_VAR 0 2
17622: PUSH
17623: LD_INT 22
17625: PUSH
17626: LD_OWVAR 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: ST_TO_ADDR
// if not tmp then
17640: LD_VAR 0 2
17644: NOT
17645: IFFALSE 17649
// exit ;
17647: GO 17678
// for i in tmp do
17649: LD_ADDR_VAR 0 1
17653: PUSH
17654: LD_VAR 0 2
17658: PUSH
17659: FOR_IN
17660: IFFALSE 17676
// SetLives ( i , 600 ) ;
17662: LD_VAR 0 1
17666: PPUSH
17667: LD_INT 600
17669: PPUSH
17670: CALL_OW 234
17674: GO 17659
17676: POP
17677: POP
// end ;
17678: PPOPN 2
17680: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17681: LD_INT 0
17683: PPUSH
// case cmd of 301 :
17684: LD_VAR 0 1
17688: PUSH
17689: LD_INT 301
17691: DOUBLE
17692: EQUAL
17693: IFTRUE 17697
17695: GO 17729
17697: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17698: LD_VAR 0 6
17702: PPUSH
17703: LD_VAR 0 7
17707: PPUSH
17708: LD_VAR 0 8
17712: PPUSH
17713: LD_VAR 0 4
17717: PPUSH
17718: LD_VAR 0 5
17722: PPUSH
17723: CALL 18930 0 5
17727: GO 17850
17729: LD_INT 302
17731: DOUBLE
17732: EQUAL
17733: IFTRUE 17737
17735: GO 17774
17737: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17738: LD_VAR 0 6
17742: PPUSH
17743: LD_VAR 0 7
17747: PPUSH
17748: LD_VAR 0 8
17752: PPUSH
17753: LD_VAR 0 9
17757: PPUSH
17758: LD_VAR 0 4
17762: PPUSH
17763: LD_VAR 0 5
17767: PPUSH
17768: CALL 19021 0 6
17772: GO 17850
17774: LD_INT 303
17776: DOUBLE
17777: EQUAL
17778: IFTRUE 17782
17780: GO 17819
17782: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17783: LD_VAR 0 6
17787: PPUSH
17788: LD_VAR 0 7
17792: PPUSH
17793: LD_VAR 0 8
17797: PPUSH
17798: LD_VAR 0 9
17802: PPUSH
17803: LD_VAR 0 4
17807: PPUSH
17808: LD_VAR 0 5
17812: PPUSH
17813: CALL 17855 0 6
17817: GO 17850
17819: LD_INT 304
17821: DOUBLE
17822: EQUAL
17823: IFTRUE 17827
17825: GO 17849
17827: POP
// hHackTeleport ( unit , x , y ) ; end ;
17828: LD_VAR 0 2
17832: PPUSH
17833: LD_VAR 0 4
17837: PPUSH
17838: LD_VAR 0 5
17842: PPUSH
17843: CALL 19614 0 3
17847: GO 17850
17849: POP
// end ;
17850: LD_VAR 0 12
17854: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17855: LD_INT 0
17857: PPUSH
17858: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17859: LD_VAR 0 1
17863: PUSH
17864: LD_INT 1
17866: LESS
17867: PUSH
17868: LD_VAR 0 1
17872: PUSH
17873: LD_INT 3
17875: GREATER
17876: OR
17877: PUSH
17878: LD_VAR 0 5
17882: PPUSH
17883: LD_VAR 0 6
17887: PPUSH
17888: CALL_OW 428
17892: OR
17893: IFFALSE 17897
// exit ;
17895: GO 18617
// uc_side := your_side ;
17897: LD_ADDR_OWVAR 20
17901: PUSH
17902: LD_OWVAR 2
17906: ST_TO_ADDR
// uc_nation := nation ;
17907: LD_ADDR_OWVAR 21
17911: PUSH
17912: LD_VAR 0 1
17916: ST_TO_ADDR
// bc_level = 1 ;
17917: LD_ADDR_OWVAR 43
17921: PUSH
17922: LD_INT 1
17924: ST_TO_ADDR
// case btype of 1 :
17925: LD_VAR 0 2
17929: PUSH
17930: LD_INT 1
17932: DOUBLE
17933: EQUAL
17934: IFTRUE 17938
17936: GO 17949
17938: POP
// bc_type := b_depot ; 2 :
17939: LD_ADDR_OWVAR 42
17943: PUSH
17944: LD_INT 0
17946: ST_TO_ADDR
17947: GO 18561
17949: LD_INT 2
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17957
17955: GO 17968
17957: POP
// bc_type := b_warehouse ; 3 :
17958: LD_ADDR_OWVAR 42
17962: PUSH
17963: LD_INT 1
17965: ST_TO_ADDR
17966: GO 18561
17968: LD_INT 3
17970: DOUBLE
17971: EQUAL
17972: IFTRUE 17976
17974: GO 17987
17976: POP
// bc_type := b_lab ; 4 .. 9 :
17977: LD_ADDR_OWVAR 42
17981: PUSH
17982: LD_INT 6
17984: ST_TO_ADDR
17985: GO 18561
17987: LD_INT 4
17989: DOUBLE
17990: GREATEREQUAL
17991: IFFALSE 17999
17993: LD_INT 9
17995: DOUBLE
17996: LESSEQUAL
17997: IFTRUE 18001
17999: GO 18053
18001: POP
// begin bc_type := b_lab_half ;
18002: LD_ADDR_OWVAR 42
18006: PUSH
18007: LD_INT 7
18009: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18010: LD_ADDR_OWVAR 44
18014: PUSH
18015: LD_INT 10
18017: PUSH
18018: LD_INT 11
18020: PUSH
18021: LD_INT 12
18023: PUSH
18024: LD_INT 15
18026: PUSH
18027: LD_INT 14
18029: PUSH
18030: LD_INT 13
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: PUSH
18041: LD_VAR 0 2
18045: PUSH
18046: LD_INT 3
18048: MINUS
18049: ARRAY
18050: ST_TO_ADDR
// end ; 10 .. 13 :
18051: GO 18561
18053: LD_INT 10
18055: DOUBLE
18056: GREATEREQUAL
18057: IFFALSE 18065
18059: LD_INT 13
18061: DOUBLE
18062: LESSEQUAL
18063: IFTRUE 18067
18065: GO 18144
18067: POP
// begin bc_type := b_lab_full ;
18068: LD_ADDR_OWVAR 42
18072: PUSH
18073: LD_INT 8
18075: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18076: LD_ADDR_OWVAR 44
18080: PUSH
18081: LD_INT 10
18083: PUSH
18084: LD_INT 12
18086: PUSH
18087: LD_INT 14
18089: PUSH
18090: LD_INT 13
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: PUSH
18099: LD_VAR 0 2
18103: PUSH
18104: LD_INT 9
18106: MINUS
18107: ARRAY
18108: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18109: LD_ADDR_OWVAR 45
18113: PUSH
18114: LD_INT 11
18116: PUSH
18117: LD_INT 15
18119: PUSH
18120: LD_INT 12
18122: PUSH
18123: LD_INT 15
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: LD_VAR 0 2
18136: PUSH
18137: LD_INT 9
18139: MINUS
18140: ARRAY
18141: ST_TO_ADDR
// end ; 14 :
18142: GO 18561
18144: LD_INT 14
18146: DOUBLE
18147: EQUAL
18148: IFTRUE 18152
18150: GO 18163
18152: POP
// bc_type := b_workshop ; 15 :
18153: LD_ADDR_OWVAR 42
18157: PUSH
18158: LD_INT 2
18160: ST_TO_ADDR
18161: GO 18561
18163: LD_INT 15
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18182
18171: POP
// bc_type := b_factory ; 16 :
18172: LD_ADDR_OWVAR 42
18176: PUSH
18177: LD_INT 3
18179: ST_TO_ADDR
18180: GO 18561
18182: LD_INT 16
18184: DOUBLE
18185: EQUAL
18186: IFTRUE 18190
18188: GO 18201
18190: POP
// bc_type := b_ext_gun ; 17 :
18191: LD_ADDR_OWVAR 42
18195: PUSH
18196: LD_INT 17
18198: ST_TO_ADDR
18199: GO 18561
18201: LD_INT 17
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18237
18209: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18210: LD_ADDR_OWVAR 42
18214: PUSH
18215: LD_INT 19
18217: PUSH
18218: LD_INT 23
18220: PUSH
18221: LD_INT 19
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: PUSH
18229: LD_VAR 0 1
18233: ARRAY
18234: ST_TO_ADDR
18235: GO 18561
18237: LD_INT 18
18239: DOUBLE
18240: EQUAL
18241: IFTRUE 18245
18243: GO 18256
18245: POP
// bc_type := b_ext_radar ; 19 :
18246: LD_ADDR_OWVAR 42
18250: PUSH
18251: LD_INT 20
18253: ST_TO_ADDR
18254: GO 18561
18256: LD_INT 19
18258: DOUBLE
18259: EQUAL
18260: IFTRUE 18264
18262: GO 18275
18264: POP
// bc_type := b_ext_radio ; 20 :
18265: LD_ADDR_OWVAR 42
18269: PUSH
18270: LD_INT 22
18272: ST_TO_ADDR
18273: GO 18561
18275: LD_INT 20
18277: DOUBLE
18278: EQUAL
18279: IFTRUE 18283
18281: GO 18294
18283: POP
// bc_type := b_ext_siberium ; 21 :
18284: LD_ADDR_OWVAR 42
18288: PUSH
18289: LD_INT 21
18291: ST_TO_ADDR
18292: GO 18561
18294: LD_INT 21
18296: DOUBLE
18297: EQUAL
18298: IFTRUE 18302
18300: GO 18313
18302: POP
// bc_type := b_ext_computer ; 22 :
18303: LD_ADDR_OWVAR 42
18307: PUSH
18308: LD_INT 24
18310: ST_TO_ADDR
18311: GO 18561
18313: LD_INT 22
18315: DOUBLE
18316: EQUAL
18317: IFTRUE 18321
18319: GO 18332
18321: POP
// bc_type := b_ext_track ; 23 :
18322: LD_ADDR_OWVAR 42
18326: PUSH
18327: LD_INT 16
18329: ST_TO_ADDR
18330: GO 18561
18332: LD_INT 23
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18351
18340: POP
// bc_type := b_ext_laser ; 24 :
18341: LD_ADDR_OWVAR 42
18345: PUSH
18346: LD_INT 25
18348: ST_TO_ADDR
18349: GO 18561
18351: LD_INT 24
18353: DOUBLE
18354: EQUAL
18355: IFTRUE 18359
18357: GO 18370
18359: POP
// bc_type := b_control_tower ; 25 :
18360: LD_ADDR_OWVAR 42
18364: PUSH
18365: LD_INT 36
18367: ST_TO_ADDR
18368: GO 18561
18370: LD_INT 25
18372: DOUBLE
18373: EQUAL
18374: IFTRUE 18378
18376: GO 18389
18378: POP
// bc_type := b_breastwork ; 26 :
18379: LD_ADDR_OWVAR 42
18383: PUSH
18384: LD_INT 31
18386: ST_TO_ADDR
18387: GO 18561
18389: LD_INT 26
18391: DOUBLE
18392: EQUAL
18393: IFTRUE 18397
18395: GO 18408
18397: POP
// bc_type := b_bunker ; 27 :
18398: LD_ADDR_OWVAR 42
18402: PUSH
18403: LD_INT 32
18405: ST_TO_ADDR
18406: GO 18561
18408: LD_INT 27
18410: DOUBLE
18411: EQUAL
18412: IFTRUE 18416
18414: GO 18427
18416: POP
// bc_type := b_turret ; 28 :
18417: LD_ADDR_OWVAR 42
18421: PUSH
18422: LD_INT 33
18424: ST_TO_ADDR
18425: GO 18561
18427: LD_INT 28
18429: DOUBLE
18430: EQUAL
18431: IFTRUE 18435
18433: GO 18446
18435: POP
// bc_type := b_armoury ; 29 :
18436: LD_ADDR_OWVAR 42
18440: PUSH
18441: LD_INT 4
18443: ST_TO_ADDR
18444: GO 18561
18446: LD_INT 29
18448: DOUBLE
18449: EQUAL
18450: IFTRUE 18454
18452: GO 18465
18454: POP
// bc_type := b_barracks ; 30 :
18455: LD_ADDR_OWVAR 42
18459: PUSH
18460: LD_INT 5
18462: ST_TO_ADDR
18463: GO 18561
18465: LD_INT 30
18467: DOUBLE
18468: EQUAL
18469: IFTRUE 18473
18471: GO 18484
18473: POP
// bc_type := b_solar_power ; 31 :
18474: LD_ADDR_OWVAR 42
18478: PUSH
18479: LD_INT 27
18481: ST_TO_ADDR
18482: GO 18561
18484: LD_INT 31
18486: DOUBLE
18487: EQUAL
18488: IFTRUE 18492
18490: GO 18503
18492: POP
// bc_type := b_oil_power ; 32 :
18493: LD_ADDR_OWVAR 42
18497: PUSH
18498: LD_INT 26
18500: ST_TO_ADDR
18501: GO 18561
18503: LD_INT 32
18505: DOUBLE
18506: EQUAL
18507: IFTRUE 18511
18509: GO 18522
18511: POP
// bc_type := b_siberite_power ; 33 :
18512: LD_ADDR_OWVAR 42
18516: PUSH
18517: LD_INT 28
18519: ST_TO_ADDR
18520: GO 18561
18522: LD_INT 33
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18541
18530: POP
// bc_type := b_oil_mine ; 34 :
18531: LD_ADDR_OWVAR 42
18535: PUSH
18536: LD_INT 29
18538: ST_TO_ADDR
18539: GO 18561
18541: LD_INT 34
18543: DOUBLE
18544: EQUAL
18545: IFTRUE 18549
18547: GO 18560
18549: POP
// bc_type := b_siberite_mine ; end ;
18550: LD_ADDR_OWVAR 42
18554: PUSH
18555: LD_INT 30
18557: ST_TO_ADDR
18558: GO 18561
18560: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18561: LD_ADDR_VAR 0 8
18565: PUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_VAR 0 6
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: CALL_OW 47
18585: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18586: LD_OWVAR 42
18590: PUSH
18591: LD_INT 32
18593: PUSH
18594: LD_INT 33
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: IN
18601: IFFALSE 18617
// PlaceWeaponTurret ( b , weapon ) ;
18603: LD_VAR 0 8
18607: PPUSH
18608: LD_VAR 0 4
18612: PPUSH
18613: CALL_OW 431
// end ;
18617: LD_VAR 0 7
18621: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18622: LD_INT 0
18624: PPUSH
18625: PPUSH
18626: PPUSH
18627: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18628: LD_ADDR_VAR 0 4
18632: PUSH
18633: LD_INT 22
18635: PUSH
18636: LD_OWVAR 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: LD_INT 30
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 30
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: LIST
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PPUSH
18677: CALL_OW 69
18681: ST_TO_ADDR
// if not tmp then
18682: LD_VAR 0 4
18686: NOT
18687: IFFALSE 18691
// exit ;
18689: GO 18750
// for i in tmp do
18691: LD_ADDR_VAR 0 2
18695: PUSH
18696: LD_VAR 0 4
18700: PUSH
18701: FOR_IN
18702: IFFALSE 18748
// for j = 1 to 3 do
18704: LD_ADDR_VAR 0 3
18708: PUSH
18709: DOUBLE
18710: LD_INT 1
18712: DEC
18713: ST_TO_ADDR
18714: LD_INT 3
18716: PUSH
18717: FOR_TO
18718: IFFALSE 18744
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18720: LD_VAR 0 2
18724: PPUSH
18725: CALL_OW 274
18729: PPUSH
18730: LD_VAR 0 3
18734: PPUSH
18735: LD_INT 99999
18737: PPUSH
18738: CALL_OW 277
18742: GO 18717
18744: POP
18745: POP
18746: GO 18701
18748: POP
18749: POP
// end ;
18750: LD_VAR 0 1
18754: RET
// export function hHackSetLevel10 ; var i , j ; begin
18755: LD_INT 0
18757: PPUSH
18758: PPUSH
18759: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18760: LD_ADDR_VAR 0 2
18764: PUSH
18765: LD_INT 21
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PPUSH
18775: CALL_OW 69
18779: PUSH
18780: FOR_IN
18781: IFFALSE 18833
// if IsSelected ( i ) then
18783: LD_VAR 0 2
18787: PPUSH
18788: CALL_OW 306
18792: IFFALSE 18831
// begin for j := 1 to 4 do
18794: LD_ADDR_VAR 0 3
18798: PUSH
18799: DOUBLE
18800: LD_INT 1
18802: DEC
18803: ST_TO_ADDR
18804: LD_INT 4
18806: PUSH
18807: FOR_TO
18808: IFFALSE 18829
// SetSkill ( i , j , 10 ) ;
18810: LD_VAR 0 2
18814: PPUSH
18815: LD_VAR 0 3
18819: PPUSH
18820: LD_INT 10
18822: PPUSH
18823: CALL_OW 237
18827: GO 18807
18829: POP
18830: POP
// end ;
18831: GO 18780
18833: POP
18834: POP
// end ;
18835: LD_VAR 0 1
18839: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18840: LD_INT 0
18842: PPUSH
18843: PPUSH
18844: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18845: LD_ADDR_VAR 0 2
18849: PUSH
18850: LD_INT 22
18852: PUSH
18853: LD_OWVAR 2
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 21
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PPUSH
18876: CALL_OW 69
18880: PUSH
18881: FOR_IN
18882: IFFALSE 18923
// begin for j := 1 to 4 do
18884: LD_ADDR_VAR 0 3
18888: PUSH
18889: DOUBLE
18890: LD_INT 1
18892: DEC
18893: ST_TO_ADDR
18894: LD_INT 4
18896: PUSH
18897: FOR_TO
18898: IFFALSE 18919
// SetSkill ( i , j , 10 ) ;
18900: LD_VAR 0 2
18904: PPUSH
18905: LD_VAR 0 3
18909: PPUSH
18910: LD_INT 10
18912: PPUSH
18913: CALL_OW 237
18917: GO 18897
18919: POP
18920: POP
// end ;
18921: GO 18881
18923: POP
18924: POP
// end ;
18925: LD_VAR 0 1
18929: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18930: LD_INT 0
18932: PPUSH
// uc_side := your_side ;
18933: LD_ADDR_OWVAR 20
18937: PUSH
18938: LD_OWVAR 2
18942: ST_TO_ADDR
// uc_nation := nation ;
18943: LD_ADDR_OWVAR 21
18947: PUSH
18948: LD_VAR 0 1
18952: ST_TO_ADDR
// InitHc ;
18953: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18957: LD_INT 0
18959: PPUSH
18960: LD_VAR 0 2
18964: PPUSH
18965: LD_VAR 0 3
18969: PPUSH
18970: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18974: LD_VAR 0 4
18978: PPUSH
18979: LD_VAR 0 5
18983: PPUSH
18984: CALL_OW 428
18988: PUSH
18989: LD_INT 0
18991: EQUAL
18992: IFFALSE 19016
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18994: CALL_OW 44
18998: PPUSH
18999: LD_VAR 0 4
19003: PPUSH
19004: LD_VAR 0 5
19008: PPUSH
19009: LD_INT 1
19011: PPUSH
19012: CALL_OW 48
// end ;
19016: LD_VAR 0 6
19020: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19021: LD_INT 0
19023: PPUSH
19024: PPUSH
// uc_side := your_side ;
19025: LD_ADDR_OWVAR 20
19029: PUSH
19030: LD_OWVAR 2
19034: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19035: LD_VAR 0 1
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: LD_INT 4
19051: PUSH
19052: LD_INT 5
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: IN
19062: IFFALSE 19074
// uc_nation := nation_american else
19064: LD_ADDR_OWVAR 21
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
19072: GO 19117
// if chassis in [ 11 , 12 , 13 , 14 ] then
19074: LD_VAR 0 1
19078: PUSH
19079: LD_INT 11
19081: PUSH
19082: LD_INT 12
19084: PUSH
19085: LD_INT 13
19087: PUSH
19088: LD_INT 14
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: IN
19097: IFFALSE 19109
// uc_nation := nation_arabian else
19099: LD_ADDR_OWVAR 21
19103: PUSH
19104: LD_INT 2
19106: ST_TO_ADDR
19107: GO 19117
// uc_nation := nation_russian ;
19109: LD_ADDR_OWVAR 21
19113: PUSH
19114: LD_INT 3
19116: ST_TO_ADDR
// vc_chassis := chassis ;
19117: LD_ADDR_OWVAR 37
19121: PUSH
19122: LD_VAR 0 1
19126: ST_TO_ADDR
// vc_engine := engine ;
19127: LD_ADDR_OWVAR 39
19131: PUSH
19132: LD_VAR 0 2
19136: ST_TO_ADDR
// vc_control := control ;
19137: LD_ADDR_OWVAR 38
19141: PUSH
19142: LD_VAR 0 3
19146: ST_TO_ADDR
// vc_weapon := weapon ;
19147: LD_ADDR_OWVAR 40
19151: PUSH
19152: LD_VAR 0 4
19156: ST_TO_ADDR
// un := CreateVehicle ;
19157: LD_ADDR_VAR 0 8
19161: PUSH
19162: CALL_OW 45
19166: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19167: LD_VAR 0 8
19171: PPUSH
19172: LD_INT 0
19174: PPUSH
19175: LD_INT 5
19177: PPUSH
19178: CALL_OW 12
19182: PPUSH
19183: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19187: LD_VAR 0 8
19191: PPUSH
19192: LD_VAR 0 5
19196: PPUSH
19197: LD_VAR 0 6
19201: PPUSH
19202: LD_INT 1
19204: PPUSH
19205: CALL_OW 48
// end ;
19209: LD_VAR 0 7
19213: RET
// export hInvincible ; every 1 do
19214: GO 19216
19216: DISABLE
// hInvincible := [ ] ;
19217: LD_ADDR_EXP 81
19221: PUSH
19222: EMPTY
19223: ST_TO_ADDR
19224: END
// every 10 do var i ;
19225: GO 19227
19227: DISABLE
19228: LD_INT 0
19230: PPUSH
// begin enable ;
19231: ENABLE
// if not hInvincible then
19232: LD_EXP 81
19236: NOT
19237: IFFALSE 19241
// exit ;
19239: GO 19285
// for i in hInvincible do
19241: LD_ADDR_VAR 0 1
19245: PUSH
19246: LD_EXP 81
19250: PUSH
19251: FOR_IN
19252: IFFALSE 19283
// if GetLives ( i ) < 1000 then
19254: LD_VAR 0 1
19258: PPUSH
19259: CALL_OW 256
19263: PUSH
19264: LD_INT 1000
19266: LESS
19267: IFFALSE 19281
// SetLives ( i , 1000 ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 1000
19276: PPUSH
19277: CALL_OW 234
19281: GO 19251
19283: POP
19284: POP
// end ;
19285: PPOPN 1
19287: END
// export function hHackInvincible ; var i ; begin
19288: LD_INT 0
19290: PPUSH
19291: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19292: LD_ADDR_VAR 0 2
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 21
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 21
19312: PUSH
19313: LD_INT 2
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: PPUSH
19325: CALL_OW 69
19329: PUSH
19330: FOR_IN
19331: IFFALSE 19392
// if IsSelected ( i ) then
19333: LD_VAR 0 2
19337: PPUSH
19338: CALL_OW 306
19342: IFFALSE 19390
// begin if i in hInvincible then
19344: LD_VAR 0 2
19348: PUSH
19349: LD_EXP 81
19353: IN
19354: IFFALSE 19374
// hInvincible := hInvincible diff i else
19356: LD_ADDR_EXP 81
19360: PUSH
19361: LD_EXP 81
19365: PUSH
19366: LD_VAR 0 2
19370: DIFF
19371: ST_TO_ADDR
19372: GO 19390
// hInvincible := hInvincible union i ;
19374: LD_ADDR_EXP 81
19378: PUSH
19379: LD_EXP 81
19383: PUSH
19384: LD_VAR 0 2
19388: UNION
19389: ST_TO_ADDR
// end ;
19390: GO 19330
19392: POP
19393: POP
// end ;
19394: LD_VAR 0 1
19398: RET
// export function hHackInvisible ; var i , j ; begin
19399: LD_INT 0
19401: PPUSH
19402: PPUSH
19403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19404: LD_ADDR_VAR 0 2
19408: PUSH
19409: LD_INT 21
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PPUSH
19419: CALL_OW 69
19423: PUSH
19424: FOR_IN
19425: IFFALSE 19449
// if IsSelected ( i ) then
19427: LD_VAR 0 2
19431: PPUSH
19432: CALL_OW 306
19436: IFFALSE 19447
// ComForceInvisible ( i ) ;
19438: LD_VAR 0 2
19442: PPUSH
19443: CALL_OW 496
19447: GO 19424
19449: POP
19450: POP
// end ;
19451: LD_VAR 0 1
19455: RET
// export function hHackChangeYourSide ; begin
19456: LD_INT 0
19458: PPUSH
// if your_side = 8 then
19459: LD_OWVAR 2
19463: PUSH
19464: LD_INT 8
19466: EQUAL
19467: IFFALSE 19479
// your_side := 0 else
19469: LD_ADDR_OWVAR 2
19473: PUSH
19474: LD_INT 0
19476: ST_TO_ADDR
19477: GO 19493
// your_side := your_side + 1 ;
19479: LD_ADDR_OWVAR 2
19483: PUSH
19484: LD_OWVAR 2
19488: PUSH
19489: LD_INT 1
19491: PLUS
19492: ST_TO_ADDR
// end ;
19493: LD_VAR 0 1
19497: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19498: LD_INT 0
19500: PPUSH
19501: PPUSH
19502: PPUSH
// for i in all_units do
19503: LD_ADDR_VAR 0 2
19507: PUSH
19508: LD_OWVAR 3
19512: PUSH
19513: FOR_IN
19514: IFFALSE 19592
// if IsSelected ( i ) then
19516: LD_VAR 0 2
19520: PPUSH
19521: CALL_OW 306
19525: IFFALSE 19590
// begin j := GetSide ( i ) ;
19527: LD_ADDR_VAR 0 3
19531: PUSH
19532: LD_VAR 0 2
19536: PPUSH
19537: CALL_OW 255
19541: ST_TO_ADDR
// if j = 8 then
19542: LD_VAR 0 3
19546: PUSH
19547: LD_INT 8
19549: EQUAL
19550: IFFALSE 19562
// j := 0 else
19552: LD_ADDR_VAR 0 3
19556: PUSH
19557: LD_INT 0
19559: ST_TO_ADDR
19560: GO 19576
// j := j + 1 ;
19562: LD_ADDR_VAR 0 3
19566: PUSH
19567: LD_VAR 0 3
19571: PUSH
19572: LD_INT 1
19574: PLUS
19575: ST_TO_ADDR
// SetSide ( i , j ) ;
19576: LD_VAR 0 2
19580: PPUSH
19581: LD_VAR 0 3
19585: PPUSH
19586: CALL_OW 235
// end ;
19590: GO 19513
19592: POP
19593: POP
// end ;
19594: LD_VAR 0 1
19598: RET
// export function hHackFog ; begin
19599: LD_INT 0
19601: PPUSH
// FogOff ( true ) ;
19602: LD_INT 1
19604: PPUSH
19605: CALL_OW 344
// end ;
19609: LD_VAR 0 1
19613: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19614: LD_INT 0
19616: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19617: LD_VAR 0 1
19621: PPUSH
19622: LD_VAR 0 2
19626: PPUSH
19627: LD_VAR 0 3
19631: PPUSH
19632: LD_INT 1
19634: PPUSH
19635: LD_INT 1
19637: PPUSH
19638: CALL_OW 483
// CenterOnXY ( x , y ) ;
19642: LD_VAR 0 2
19646: PPUSH
19647: LD_VAR 0 3
19651: PPUSH
19652: CALL_OW 84
// end ; end_of_file
19656: LD_VAR 0 4
19660: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19661: LD_INT 0
19663: PPUSH
19664: PPUSH
19665: PPUSH
19666: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19667: LD_VAR 0 1
19671: PPUSH
19672: CALL_OW 264
19676: PUSH
19677: LD_EXP 97
19681: EQUAL
19682: IFFALSE 19754
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19684: LD_INT 68
19686: PPUSH
19687: LD_VAR 0 1
19691: PPUSH
19692: CALL_OW 255
19696: PPUSH
19697: CALL_OW 321
19701: PUSH
19702: LD_INT 2
19704: EQUAL
19705: IFFALSE 19717
// eff := 70 else
19707: LD_ADDR_VAR 0 4
19711: PUSH
19712: LD_INT 70
19714: ST_TO_ADDR
19715: GO 19725
// eff := 30 ;
19717: LD_ADDR_VAR 0 4
19721: PUSH
19722: LD_INT 30
19724: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL_OW 250
19734: PPUSH
19735: LD_VAR 0 1
19739: PPUSH
19740: CALL_OW 251
19744: PPUSH
19745: LD_VAR 0 4
19749: PPUSH
19750: CALL_OW 495
// end ; end ;
19754: LD_VAR 0 2
19758: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19759: LD_INT 0
19761: PPUSH
// end ;
19762: LD_VAR 0 4
19766: RET
// export function SOS_Command ( cmd ) ; begin
19767: LD_INT 0
19769: PPUSH
// end ;
19770: LD_VAR 0 2
19774: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19775: LD_INT 0
19777: PPUSH
// end ;
19778: LD_VAR 0 6
19782: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19783: LD_INT 0
19785: PPUSH
19786: PPUSH
// if not vehicle or not factory then
19787: LD_VAR 0 1
19791: NOT
19792: PUSH
19793: LD_VAR 0 2
19797: NOT
19798: OR
19799: IFFALSE 19803
// exit ;
19801: GO 20034
// if factoryWaypoints >= factory then
19803: LD_EXP 82
19807: PUSH
19808: LD_VAR 0 2
19812: GREATEREQUAL
19813: IFFALSE 20034
// if factoryWaypoints [ factory ] then
19815: LD_EXP 82
19819: PUSH
19820: LD_VAR 0 2
19824: ARRAY
19825: IFFALSE 20034
// begin if GetControl ( vehicle ) = control_manual then
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL_OW 263
19836: PUSH
19837: LD_INT 1
19839: EQUAL
19840: IFFALSE 19921
// begin driver := IsDrivenBy ( vehicle ) ;
19842: LD_ADDR_VAR 0 4
19846: PUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 311
19856: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19857: LD_VAR 0 4
19861: PPUSH
19862: LD_EXP 82
19866: PUSH
19867: LD_VAR 0 2
19871: ARRAY
19872: PUSH
19873: LD_INT 3
19875: ARRAY
19876: PPUSH
19877: LD_EXP 82
19881: PUSH
19882: LD_VAR 0 2
19886: ARRAY
19887: PUSH
19888: LD_INT 4
19890: ARRAY
19891: PPUSH
19892: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19896: LD_VAR 0 4
19900: PPUSH
19901: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19905: LD_VAR 0 4
19909: PPUSH
19910: LD_VAR 0 2
19914: PPUSH
19915: CALL_OW 180
// end else
19919: GO 20034
// if GetControl ( vehicle ) = control_remote then
19921: LD_VAR 0 1
19925: PPUSH
19926: CALL_OW 263
19930: PUSH
19931: LD_INT 2
19933: EQUAL
19934: IFFALSE 19995
// begin wait ( 0 0$2 ) ;
19936: LD_INT 70
19938: PPUSH
19939: CALL_OW 67
// if Connect ( vehicle ) then
19943: LD_VAR 0 1
19947: PPUSH
19948: CALL 32633 0 1
19952: IFFALSE 19993
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19954: LD_VAR 0 1
19958: PPUSH
19959: LD_EXP 82
19963: PUSH
19964: LD_VAR 0 2
19968: ARRAY
19969: PUSH
19970: LD_INT 3
19972: ARRAY
19973: PPUSH
19974: LD_EXP 82
19978: PUSH
19979: LD_VAR 0 2
19983: ARRAY
19984: PUSH
19985: LD_INT 4
19987: ARRAY
19988: PPUSH
19989: CALL_OW 171
// end else
19993: GO 20034
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19995: LD_VAR 0 1
19999: PPUSH
20000: LD_EXP 82
20004: PUSH
20005: LD_VAR 0 2
20009: ARRAY
20010: PUSH
20011: LD_INT 3
20013: ARRAY
20014: PPUSH
20015: LD_EXP 82
20019: PUSH
20020: LD_VAR 0 2
20024: ARRAY
20025: PUSH
20026: LD_INT 4
20028: ARRAY
20029: PPUSH
20030: CALL_OW 171
// end ; end ;
20034: LD_VAR 0 3
20038: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20039: LD_INT 0
20041: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20042: LD_VAR 0 1
20046: PUSH
20047: LD_INT 250
20049: EQUAL
20050: PUSH
20051: LD_VAR 0 2
20055: PPUSH
20056: CALL_OW 264
20060: PUSH
20061: LD_EXP 100
20065: EQUAL
20066: AND
20067: IFFALSE 20088
// MinerPlaceMine ( unit , x , y ) ;
20069: LD_VAR 0 2
20073: PPUSH
20074: LD_VAR 0 4
20078: PPUSH
20079: LD_VAR 0 5
20083: PPUSH
20084: CALL 22816 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20088: LD_VAR 0 1
20092: PUSH
20093: LD_INT 251
20095: EQUAL
20096: PUSH
20097: LD_VAR 0 2
20101: PPUSH
20102: CALL_OW 264
20106: PUSH
20107: LD_EXP 100
20111: EQUAL
20112: AND
20113: IFFALSE 20134
// MinerDetonateMine ( unit , x , y ) ;
20115: LD_VAR 0 2
20119: PPUSH
20120: LD_VAR 0 4
20124: PPUSH
20125: LD_VAR 0 5
20129: PPUSH
20130: CALL 23093 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20134: LD_VAR 0 1
20138: PUSH
20139: LD_INT 252
20141: EQUAL
20142: PUSH
20143: LD_VAR 0 2
20147: PPUSH
20148: CALL_OW 264
20152: PUSH
20153: LD_EXP 100
20157: EQUAL
20158: AND
20159: IFFALSE 20180
// MinerCreateMinefield ( unit , x , y ) ;
20161: LD_VAR 0 2
20165: PPUSH
20166: LD_VAR 0 4
20170: PPUSH
20171: LD_VAR 0 5
20175: PPUSH
20176: CALL 23510 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20180: LD_VAR 0 1
20184: PUSH
20185: LD_INT 253
20187: EQUAL
20188: PUSH
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 257
20198: PUSH
20199: LD_INT 5
20201: EQUAL
20202: AND
20203: IFFALSE 20224
// ComBinocular ( unit , x , y ) ;
20205: LD_VAR 0 2
20209: PPUSH
20210: LD_VAR 0 4
20214: PPUSH
20215: LD_VAR 0 5
20219: PPUSH
20220: CALL 23881 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20224: LD_VAR 0 1
20228: PUSH
20229: LD_INT 254
20231: EQUAL
20232: PUSH
20233: LD_VAR 0 2
20237: PPUSH
20238: CALL_OW 264
20242: PUSH
20243: LD_EXP 95
20247: EQUAL
20248: AND
20249: PUSH
20250: LD_VAR 0 3
20254: PPUSH
20255: CALL_OW 263
20259: PUSH
20260: LD_INT 3
20262: EQUAL
20263: AND
20264: IFFALSE 20280
// HackDestroyVehicle ( unit , selectedUnit ) ;
20266: LD_VAR 0 2
20270: PPUSH
20271: LD_VAR 0 3
20275: PPUSH
20276: CALL 22176 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20280: LD_VAR 0 1
20284: PUSH
20285: LD_INT 255
20287: EQUAL
20288: PUSH
20289: LD_VAR 0 2
20293: PPUSH
20294: CALL_OW 264
20298: PUSH
20299: LD_INT 14
20301: PUSH
20302: LD_INT 53
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: IN
20309: AND
20310: PUSH
20311: LD_VAR 0 4
20315: PPUSH
20316: LD_VAR 0 5
20320: PPUSH
20321: CALL_OW 488
20325: AND
20326: IFFALSE 20350
// CutTreeXYR ( unit , x , y , 12 ) ;
20328: LD_VAR 0 2
20332: PPUSH
20333: LD_VAR 0 4
20337: PPUSH
20338: LD_VAR 0 5
20342: PPUSH
20343: LD_INT 12
20345: PPUSH
20346: CALL 20742 0 4
// if cmd = 256 then
20350: LD_VAR 0 1
20354: PUSH
20355: LD_INT 256
20357: EQUAL
20358: IFFALSE 20379
// SetFactoryWaypoint ( unit , x , y ) ;
20360: LD_VAR 0 2
20364: PPUSH
20365: LD_VAR 0 4
20369: PPUSH
20370: LD_VAR 0 5
20374: PPUSH
20375: CALL 20384 0 3
// end ;
20379: LD_VAR 0 6
20383: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20384: LD_INT 0
20386: PPUSH
20387: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20388: LD_VAR 0 1
20392: NOT
20393: PUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: LD_VAR 0 3
20403: PPUSH
20404: CALL_OW 488
20408: NOT
20409: OR
20410: PUSH
20411: LD_VAR 0 1
20415: PPUSH
20416: CALL_OW 266
20420: PUSH
20421: LD_INT 3
20423: NONEQUAL
20424: PUSH
20425: LD_VAR 0 1
20429: PPUSH
20430: CALL_OW 247
20434: PUSH
20435: LD_INT 1
20437: EQUAL
20438: NOT
20439: AND
20440: OR
20441: IFFALSE 20445
// exit ;
20443: GO 20594
// if GetType ( factory ) = unit_human then
20445: LD_VAR 0 1
20449: PPUSH
20450: CALL_OW 247
20454: PUSH
20455: LD_INT 1
20457: EQUAL
20458: IFFALSE 20475
// factory := IsInUnit ( factory ) ;
20460: LD_ADDR_VAR 0 1
20464: PUSH
20465: LD_VAR 0 1
20469: PPUSH
20470: CALL_OW 310
20474: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20475: LD_VAR 0 1
20479: PPUSH
20480: CALL_OW 266
20484: PUSH
20485: LD_INT 3
20487: NONEQUAL
20488: IFFALSE 20492
// exit ;
20490: GO 20594
// if HexInfo ( x , y ) = factory then
20492: LD_VAR 0 2
20496: PPUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 428
20506: PUSH
20507: LD_VAR 0 1
20511: EQUAL
20512: IFFALSE 20539
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20514: LD_ADDR_EXP 82
20518: PUSH
20519: LD_EXP 82
20523: PPUSH
20524: LD_VAR 0 1
20528: PPUSH
20529: LD_INT 0
20531: PPUSH
20532: CALL_OW 1
20536: ST_TO_ADDR
20537: GO 20590
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20539: LD_ADDR_EXP 82
20543: PUSH
20544: LD_EXP 82
20548: PPUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 255
20563: PUSH
20564: LD_VAR 0 1
20568: PUSH
20569: LD_VAR 0 2
20573: PUSH
20574: LD_VAR 0 3
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: PPUSH
20585: CALL_OW 1
20589: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20590: CALL 20599 0 0
// end ;
20594: LD_VAR 0 4
20598: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
20599: LD_INT 0
20601: PPUSH
20602: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20603: LD_STRING resetFactoryWaypoint();
20605: PPUSH
20606: CALL_OW 559
// if factoryWaypoints then
20610: LD_EXP 82
20614: IFFALSE 20737
// begin for i := 1 to factoryWaypoints do
20616: LD_ADDR_VAR 0 2
20620: PUSH
20621: DOUBLE
20622: LD_INT 1
20624: DEC
20625: ST_TO_ADDR
20626: LD_EXP 82
20630: PUSH
20631: FOR_TO
20632: IFFALSE 20735
// if factoryWaypoints [ i ] then
20634: LD_EXP 82
20638: PUSH
20639: LD_VAR 0 2
20643: ARRAY
20644: IFFALSE 20733
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
20646: LD_STRING setFactoryWaypointXY(
20648: PUSH
20649: LD_EXP 82
20653: PUSH
20654: LD_VAR 0 2
20658: ARRAY
20659: PUSH
20660: LD_INT 1
20662: ARRAY
20663: STR
20664: PUSH
20665: LD_STRING ,
20667: STR
20668: PUSH
20669: LD_EXP 82
20673: PUSH
20674: LD_VAR 0 2
20678: ARRAY
20679: PUSH
20680: LD_INT 2
20682: ARRAY
20683: STR
20684: PUSH
20685: LD_STRING ,
20687: STR
20688: PUSH
20689: LD_EXP 82
20693: PUSH
20694: LD_VAR 0 2
20698: ARRAY
20699: PUSH
20700: LD_INT 3
20702: ARRAY
20703: STR
20704: PUSH
20705: LD_STRING ,
20707: STR
20708: PUSH
20709: LD_EXP 82
20713: PUSH
20714: LD_VAR 0 2
20718: ARRAY
20719: PUSH
20720: LD_INT 4
20722: ARRAY
20723: STR
20724: PUSH
20725: LD_STRING )
20727: STR
20728: PPUSH
20729: CALL_OW 559
20733: GO 20631
20735: POP
20736: POP
// end ; end ;
20737: LD_VAR 0 1
20741: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20742: LD_INT 0
20744: PPUSH
20745: PPUSH
20746: PPUSH
20747: PPUSH
20748: PPUSH
20749: PPUSH
20750: PPUSH
20751: PPUSH
20752: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20753: LD_VAR 0 1
20757: NOT
20758: PUSH
20759: LD_VAR 0 2
20763: PPUSH
20764: LD_VAR 0 3
20768: PPUSH
20769: CALL_OW 488
20773: NOT
20774: OR
20775: PUSH
20776: LD_VAR 0 4
20780: NOT
20781: OR
20782: IFFALSE 20786
// exit ;
20784: GO 21126
// list := [ ] ;
20786: LD_ADDR_VAR 0 13
20790: PUSH
20791: EMPTY
20792: ST_TO_ADDR
// if x - r < 0 then
20793: LD_VAR 0 2
20797: PUSH
20798: LD_VAR 0 4
20802: MINUS
20803: PUSH
20804: LD_INT 0
20806: LESS
20807: IFFALSE 20819
// min_x := 0 else
20809: LD_ADDR_VAR 0 7
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
20817: GO 20835
// min_x := x - r ;
20819: LD_ADDR_VAR 0 7
20823: PUSH
20824: LD_VAR 0 2
20828: PUSH
20829: LD_VAR 0 4
20833: MINUS
20834: ST_TO_ADDR
// if y - r < 0 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_VAR 0 4
20844: MINUS
20845: PUSH
20846: LD_INT 0
20848: LESS
20849: IFFALSE 20861
// min_y := 0 else
20851: LD_ADDR_VAR 0 8
20855: PUSH
20856: LD_INT 0
20858: ST_TO_ADDR
20859: GO 20877
// min_y := y - r ;
20861: LD_ADDR_VAR 0 8
20865: PUSH
20866: LD_VAR 0 3
20870: PUSH
20871: LD_VAR 0 4
20875: MINUS
20876: ST_TO_ADDR
// max_x := x + r ;
20877: LD_ADDR_VAR 0 9
20881: PUSH
20882: LD_VAR 0 2
20886: PUSH
20887: LD_VAR 0 4
20891: PLUS
20892: ST_TO_ADDR
// max_y := y + r ;
20893: LD_ADDR_VAR 0 10
20897: PUSH
20898: LD_VAR 0 3
20902: PUSH
20903: LD_VAR 0 4
20907: PLUS
20908: ST_TO_ADDR
// for _x = min_x to max_x do
20909: LD_ADDR_VAR 0 11
20913: PUSH
20914: DOUBLE
20915: LD_VAR 0 7
20919: DEC
20920: ST_TO_ADDR
20921: LD_VAR 0 9
20925: PUSH
20926: FOR_TO
20927: IFFALSE 21044
// for _y = min_y to max_y do
20929: LD_ADDR_VAR 0 12
20933: PUSH
20934: DOUBLE
20935: LD_VAR 0 8
20939: DEC
20940: ST_TO_ADDR
20941: LD_VAR 0 10
20945: PUSH
20946: FOR_TO
20947: IFFALSE 21040
// begin if not ValidHex ( _x , _y ) then
20949: LD_VAR 0 11
20953: PPUSH
20954: LD_VAR 0 12
20958: PPUSH
20959: CALL_OW 488
20963: NOT
20964: IFFALSE 20968
// continue ;
20966: GO 20946
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20968: LD_VAR 0 11
20972: PPUSH
20973: LD_VAR 0 12
20977: PPUSH
20978: CALL_OW 351
20982: PUSH
20983: LD_VAR 0 11
20987: PPUSH
20988: LD_VAR 0 12
20992: PPUSH
20993: CALL_OW 554
20997: AND
20998: IFFALSE 21038
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21000: LD_ADDR_VAR 0 13
21004: PUSH
21005: LD_VAR 0 13
21009: PPUSH
21010: LD_VAR 0 13
21014: PUSH
21015: LD_INT 1
21017: PLUS
21018: PPUSH
21019: LD_VAR 0 11
21023: PUSH
21024: LD_VAR 0 12
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PPUSH
21033: CALL_OW 2
21037: ST_TO_ADDR
// end ;
21038: GO 20946
21040: POP
21041: POP
21042: GO 20926
21044: POP
21045: POP
// if not list then
21046: LD_VAR 0 13
21050: NOT
21051: IFFALSE 21055
// exit ;
21053: GO 21126
// for i in list do
21055: LD_ADDR_VAR 0 6
21059: PUSH
21060: LD_VAR 0 13
21064: PUSH
21065: FOR_IN
21066: IFFALSE 21124
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_STRING M
21075: PUSH
21076: LD_VAR 0 6
21080: PUSH
21081: LD_INT 1
21083: ARRAY
21084: PUSH
21085: LD_VAR 0 6
21089: PUSH
21090: LD_INT 2
21092: ARRAY
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: PUSH
21115: EMPTY
21116: LIST
21117: PPUSH
21118: CALL_OW 447
21122: GO 21065
21124: POP
21125: POP
// end ;
21126: LD_VAR 0 5
21130: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21131: LD_EXP 83
21135: NOT
21136: IFFALSE 21186
21138: GO 21140
21140: DISABLE
// begin initHack := true ;
21141: LD_ADDR_EXP 83
21145: PUSH
21146: LD_INT 1
21148: ST_TO_ADDR
// hackTanks := [ ] ;
21149: LD_ADDR_EXP 84
21153: PUSH
21154: EMPTY
21155: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21156: LD_ADDR_EXP 85
21160: PUSH
21161: EMPTY
21162: ST_TO_ADDR
// hackLimit := 3 ;
21163: LD_ADDR_EXP 86
21167: PUSH
21168: LD_INT 3
21170: ST_TO_ADDR
// hackDist := 12 ;
21171: LD_ADDR_EXP 87
21175: PUSH
21176: LD_INT 12
21178: ST_TO_ADDR
// hackCounter := [ ] ;
21179: LD_ADDR_EXP 88
21183: PUSH
21184: EMPTY
21185: ST_TO_ADDR
// end ;
21186: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21187: LD_EXP 83
21191: PUSH
21192: LD_INT 34
21194: PUSH
21195: LD_EXP 95
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 69
21208: AND
21209: IFFALSE 21464
21211: GO 21213
21213: DISABLE
21214: LD_INT 0
21216: PPUSH
21217: PPUSH
// begin enable ;
21218: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21219: LD_ADDR_VAR 0 1
21223: PUSH
21224: LD_INT 34
21226: PUSH
21227: LD_EXP 95
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PPUSH
21236: CALL_OW 69
21240: PUSH
21241: FOR_IN
21242: IFFALSE 21462
// begin if not i in hackTanks then
21244: LD_VAR 0 1
21248: PUSH
21249: LD_EXP 84
21253: IN
21254: NOT
21255: IFFALSE 21338
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21257: LD_ADDR_EXP 84
21261: PUSH
21262: LD_EXP 84
21266: PPUSH
21267: LD_EXP 84
21271: PUSH
21272: LD_INT 1
21274: PLUS
21275: PPUSH
21276: LD_VAR 0 1
21280: PPUSH
21281: CALL_OW 1
21285: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21286: LD_ADDR_EXP 85
21290: PUSH
21291: LD_EXP 85
21295: PPUSH
21296: LD_EXP 85
21300: PUSH
21301: LD_INT 1
21303: PLUS
21304: PPUSH
21305: EMPTY
21306: PPUSH
21307: CALL_OW 1
21311: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21312: LD_ADDR_EXP 88
21316: PUSH
21317: LD_EXP 88
21321: PPUSH
21322: LD_EXP 88
21326: PUSH
21327: LD_INT 1
21329: PLUS
21330: PPUSH
21331: EMPTY
21332: PPUSH
21333: CALL_OW 1
21337: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21338: LD_VAR 0 1
21342: PPUSH
21343: CALL_OW 302
21347: NOT
21348: IFFALSE 21361
// begin HackUnlinkAll ( i ) ;
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL 21467 0 1
// continue ;
21359: GO 21241
// end ; HackCheckCapturedStatus ( i ) ;
21361: LD_VAR 0 1
21365: PPUSH
21366: CALL 21910 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21370: LD_ADDR_VAR 0 2
21374: PUSH
21375: LD_INT 81
21377: PUSH
21378: LD_VAR 0 1
21382: PPUSH
21383: CALL_OW 255
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 33
21394: PUSH
21395: LD_INT 3
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 91
21404: PUSH
21405: LD_VAR 0 1
21409: PUSH
21410: LD_EXP 87
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 50
21422: PUSH
21423: EMPTY
21424: LIST
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: PPUSH
21432: CALL_OW 69
21436: ST_TO_ADDR
// if not tmp then
21437: LD_VAR 0 2
21441: NOT
21442: IFFALSE 21446
// continue ;
21444: GO 21241
// HackLink ( i , tmp ) ;
21446: LD_VAR 0 1
21450: PPUSH
21451: LD_VAR 0 2
21455: PPUSH
21456: CALL 21603 0 2
// end ;
21460: GO 21241
21462: POP
21463: POP
// end ;
21464: PPOPN 2
21466: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21467: LD_INT 0
21469: PPUSH
21470: PPUSH
21471: PPUSH
// if not hack in hackTanks then
21472: LD_VAR 0 1
21476: PUSH
21477: LD_EXP 84
21481: IN
21482: NOT
21483: IFFALSE 21487
// exit ;
21485: GO 21598
// index := GetElementIndex ( hackTanks , hack ) ;
21487: LD_ADDR_VAR 0 4
21491: PUSH
21492: LD_EXP 84
21496: PPUSH
21497: LD_VAR 0 1
21501: PPUSH
21502: CALL 29447 0 2
21506: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21507: LD_EXP 85
21511: PUSH
21512: LD_VAR 0 4
21516: ARRAY
21517: IFFALSE 21598
// begin for i in hackTanksCaptured [ index ] do
21519: LD_ADDR_VAR 0 3
21523: PUSH
21524: LD_EXP 85
21528: PUSH
21529: LD_VAR 0 4
21533: ARRAY
21534: PUSH
21535: FOR_IN
21536: IFFALSE 21562
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21538: LD_VAR 0 3
21542: PUSH
21543: LD_INT 1
21545: ARRAY
21546: PPUSH
21547: LD_VAR 0 3
21551: PUSH
21552: LD_INT 2
21554: ARRAY
21555: PPUSH
21556: CALL_OW 235
21560: GO 21535
21562: POP
21563: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21564: LD_ADDR_EXP 85
21568: PUSH
21569: LD_EXP 85
21573: PPUSH
21574: LD_VAR 0 4
21578: PPUSH
21579: EMPTY
21580: PPUSH
21581: CALL_OW 1
21585: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21586: LD_VAR 0 1
21590: PPUSH
21591: LD_INT 0
21593: PPUSH
21594: CALL_OW 505
// end ; end ;
21598: LD_VAR 0 2
21602: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
21607: PPUSH
// if not hack in hackTanks or not vehicles then
21608: LD_VAR 0 1
21612: PUSH
21613: LD_EXP 84
21617: IN
21618: NOT
21619: PUSH
21620: LD_VAR 0 2
21624: NOT
21625: OR
21626: IFFALSE 21630
// exit ;
21628: GO 21905
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21630: LD_ADDR_VAR 0 2
21634: PUSH
21635: LD_VAR 0 1
21639: PPUSH
21640: LD_VAR 0 2
21644: PPUSH
21645: LD_INT 1
21647: PPUSH
21648: LD_INT 1
21650: PPUSH
21651: CALL 30097 0 4
21655: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21656: LD_ADDR_VAR 0 5
21660: PUSH
21661: LD_EXP 84
21665: PPUSH
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL 29447 0 2
21675: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21676: LD_EXP 85
21680: PUSH
21681: LD_VAR 0 5
21685: ARRAY
21686: PUSH
21687: LD_EXP 86
21691: LESS
21692: IFFALSE 21881
// begin for i := 1 to vehicles do
21694: LD_ADDR_VAR 0 4
21698: PUSH
21699: DOUBLE
21700: LD_INT 1
21702: DEC
21703: ST_TO_ADDR
21704: LD_VAR 0 2
21708: PUSH
21709: FOR_TO
21710: IFFALSE 21879
// begin if hackTanksCaptured [ index ] = hackLimit then
21712: LD_EXP 85
21716: PUSH
21717: LD_VAR 0 5
21721: ARRAY
21722: PUSH
21723: LD_EXP 86
21727: EQUAL
21728: IFFALSE 21732
// break ;
21730: GO 21879
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21732: LD_ADDR_EXP 88
21736: PUSH
21737: LD_EXP 88
21741: PPUSH
21742: LD_VAR 0 5
21746: PPUSH
21747: LD_EXP 88
21751: PUSH
21752: LD_VAR 0 5
21756: ARRAY
21757: PUSH
21758: LD_INT 1
21760: PLUS
21761: PPUSH
21762: CALL_OW 1
21766: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21767: LD_ADDR_EXP 85
21771: PUSH
21772: LD_EXP 85
21776: PPUSH
21777: LD_VAR 0 5
21781: PUSH
21782: LD_EXP 85
21786: PUSH
21787: LD_VAR 0 5
21791: ARRAY
21792: PUSH
21793: LD_INT 1
21795: PLUS
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PPUSH
21801: LD_VAR 0 2
21805: PUSH
21806: LD_VAR 0 4
21810: ARRAY
21811: PUSH
21812: LD_VAR 0 2
21816: PUSH
21817: LD_VAR 0 4
21821: ARRAY
21822: PPUSH
21823: CALL_OW 255
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PPUSH
21832: CALL 29662 0 3
21836: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21837: LD_VAR 0 2
21841: PUSH
21842: LD_VAR 0 4
21846: ARRAY
21847: PPUSH
21848: LD_VAR 0 1
21852: PPUSH
21853: CALL_OW 255
21857: PPUSH
21858: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21862: LD_VAR 0 2
21866: PUSH
21867: LD_VAR 0 4
21871: ARRAY
21872: PPUSH
21873: CALL_OW 141
// end ;
21877: GO 21709
21879: POP
21880: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21881: LD_VAR 0 1
21885: PPUSH
21886: LD_EXP 85
21890: PUSH
21891: LD_VAR 0 5
21895: ARRAY
21896: PUSH
21897: LD_INT 0
21899: PLUS
21900: PPUSH
21901: CALL_OW 505
// end ;
21905: LD_VAR 0 3
21909: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21910: LD_INT 0
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
// if not hack in hackTanks then
21916: LD_VAR 0 1
21920: PUSH
21921: LD_EXP 84
21925: IN
21926: NOT
21927: IFFALSE 21931
// exit ;
21929: GO 22171
// index := GetElementIndex ( hackTanks , hack ) ;
21931: LD_ADDR_VAR 0 4
21935: PUSH
21936: LD_EXP 84
21940: PPUSH
21941: LD_VAR 0 1
21945: PPUSH
21946: CALL 29447 0 2
21950: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21951: LD_ADDR_VAR 0 3
21955: PUSH
21956: DOUBLE
21957: LD_EXP 85
21961: PUSH
21962: LD_VAR 0 4
21966: ARRAY
21967: INC
21968: ST_TO_ADDR
21969: LD_INT 1
21971: PUSH
21972: FOR_DOWNTO
21973: IFFALSE 22145
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21975: LD_ADDR_VAR 0 5
21979: PUSH
21980: LD_EXP 85
21984: PUSH
21985: LD_VAR 0 4
21989: ARRAY
21990: PUSH
21991: LD_VAR 0 3
21995: ARRAY
21996: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21997: LD_VAR 0 5
22001: PUSH
22002: LD_INT 1
22004: ARRAY
22005: PPUSH
22006: CALL_OW 302
22010: NOT
22011: PUSH
22012: LD_VAR 0 5
22016: PUSH
22017: LD_INT 1
22019: ARRAY
22020: PPUSH
22021: CALL_OW 255
22025: PUSH
22026: LD_VAR 0 1
22030: PPUSH
22031: CALL_OW 255
22035: NONEQUAL
22036: OR
22037: IFFALSE 22143
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22039: LD_VAR 0 5
22043: PUSH
22044: LD_INT 1
22046: ARRAY
22047: PPUSH
22048: CALL_OW 305
22052: PUSH
22053: LD_VAR 0 5
22057: PUSH
22058: LD_INT 1
22060: ARRAY
22061: PPUSH
22062: CALL_OW 255
22066: PUSH
22067: LD_VAR 0 1
22071: PPUSH
22072: CALL_OW 255
22076: EQUAL
22077: AND
22078: IFFALSE 22102
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22080: LD_VAR 0 5
22084: PUSH
22085: LD_INT 1
22087: ARRAY
22088: PPUSH
22089: LD_VAR 0 5
22093: PUSH
22094: LD_INT 2
22096: ARRAY
22097: PPUSH
22098: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22102: LD_ADDR_EXP 85
22106: PUSH
22107: LD_EXP 85
22111: PPUSH
22112: LD_VAR 0 4
22116: PPUSH
22117: LD_EXP 85
22121: PUSH
22122: LD_VAR 0 4
22126: ARRAY
22127: PPUSH
22128: LD_VAR 0 3
22132: PPUSH
22133: CALL_OW 3
22137: PPUSH
22138: CALL_OW 1
22142: ST_TO_ADDR
// end ; end ;
22143: GO 21972
22145: POP
22146: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22147: LD_VAR 0 1
22151: PPUSH
22152: LD_EXP 85
22156: PUSH
22157: LD_VAR 0 4
22161: ARRAY
22162: PUSH
22163: LD_INT 0
22165: PLUS
22166: PPUSH
22167: CALL_OW 505
// end ;
22171: LD_VAR 0 2
22175: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22176: LD_INT 0
22178: PPUSH
22179: PPUSH
22180: PPUSH
22181: PPUSH
// if not hack in hackTanks then
22182: LD_VAR 0 1
22186: PUSH
22187: LD_EXP 84
22191: IN
22192: NOT
22193: IFFALSE 22197
// exit ;
22195: GO 22282
// index := GetElementIndex ( hackTanks , hack ) ;
22197: LD_ADDR_VAR 0 5
22201: PUSH
22202: LD_EXP 84
22206: PPUSH
22207: LD_VAR 0 1
22211: PPUSH
22212: CALL 29447 0 2
22216: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22217: LD_ADDR_VAR 0 4
22221: PUSH
22222: DOUBLE
22223: LD_INT 1
22225: DEC
22226: ST_TO_ADDR
22227: LD_EXP 85
22231: PUSH
22232: LD_VAR 0 5
22236: ARRAY
22237: PUSH
22238: FOR_TO
22239: IFFALSE 22280
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22241: LD_EXP 85
22245: PUSH
22246: LD_VAR 0 5
22250: ARRAY
22251: PUSH
22252: LD_VAR 0 4
22256: ARRAY
22257: PUSH
22258: LD_INT 1
22260: ARRAY
22261: PUSH
22262: LD_VAR 0 2
22266: EQUAL
22267: IFFALSE 22278
// KillUnit ( vehicle ) ;
22269: LD_VAR 0 2
22273: PPUSH
22274: CALL_OW 66
22278: GO 22238
22280: POP
22281: POP
// end ;
22282: LD_VAR 0 3
22286: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22287: LD_EXP 89
22291: NOT
22292: IFFALSE 22327
22294: GO 22296
22296: DISABLE
// begin initMiner := true ;
22297: LD_ADDR_EXP 89
22301: PUSH
22302: LD_INT 1
22304: ST_TO_ADDR
// minersList := [ ] ;
22305: LD_ADDR_EXP 90
22309: PUSH
22310: EMPTY
22311: ST_TO_ADDR
// minerMinesList := [ ] ;
22312: LD_ADDR_EXP 91
22316: PUSH
22317: EMPTY
22318: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22319: LD_ADDR_EXP 92
22323: PUSH
22324: LD_INT 5
22326: ST_TO_ADDR
// end ;
22327: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22328: LD_EXP 89
22332: PUSH
22333: LD_INT 34
22335: PUSH
22336: LD_EXP 100
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PPUSH
22345: CALL_OW 69
22349: AND
22350: IFFALSE 22813
22352: GO 22354
22354: DISABLE
22355: LD_INT 0
22357: PPUSH
22358: PPUSH
22359: PPUSH
22360: PPUSH
// begin enable ;
22361: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22362: LD_ADDR_VAR 0 1
22366: PUSH
22367: LD_INT 34
22369: PUSH
22370: LD_EXP 100
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PPUSH
22379: CALL_OW 69
22383: PUSH
22384: FOR_IN
22385: IFFALSE 22457
// begin if not i in minersList then
22387: LD_VAR 0 1
22391: PUSH
22392: LD_EXP 90
22396: IN
22397: NOT
22398: IFFALSE 22455
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22400: LD_ADDR_EXP 90
22404: PUSH
22405: LD_EXP 90
22409: PPUSH
22410: LD_EXP 90
22414: PUSH
22415: LD_INT 1
22417: PLUS
22418: PPUSH
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 1
22428: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22429: LD_ADDR_EXP 91
22433: PUSH
22434: LD_EXP 91
22438: PPUSH
22439: LD_EXP 91
22443: PUSH
22444: LD_INT 1
22446: PLUS
22447: PPUSH
22448: EMPTY
22449: PPUSH
22450: CALL_OW 1
22454: ST_TO_ADDR
// end end ;
22455: GO 22384
22457: POP
22458: POP
// for i := minerMinesList downto 1 do
22459: LD_ADDR_VAR 0 1
22463: PUSH
22464: DOUBLE
22465: LD_EXP 91
22469: INC
22470: ST_TO_ADDR
22471: LD_INT 1
22473: PUSH
22474: FOR_DOWNTO
22475: IFFALSE 22811
// begin if IsLive ( minersList [ i ] ) then
22477: LD_EXP 90
22481: PUSH
22482: LD_VAR 0 1
22486: ARRAY
22487: PPUSH
22488: CALL_OW 300
22492: IFFALSE 22520
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22494: LD_EXP 90
22498: PUSH
22499: LD_VAR 0 1
22503: ARRAY
22504: PPUSH
22505: LD_EXP 91
22509: PUSH
22510: LD_VAR 0 1
22514: ARRAY
22515: PPUSH
22516: CALL_OW 505
// if not minerMinesList [ i ] then
22520: LD_EXP 91
22524: PUSH
22525: LD_VAR 0 1
22529: ARRAY
22530: NOT
22531: IFFALSE 22535
// continue ;
22533: GO 22474
// for j := minerMinesList [ i ] downto 1 do
22535: LD_ADDR_VAR 0 2
22539: PUSH
22540: DOUBLE
22541: LD_EXP 91
22545: PUSH
22546: LD_VAR 0 1
22550: ARRAY
22551: INC
22552: ST_TO_ADDR
22553: LD_INT 1
22555: PUSH
22556: FOR_DOWNTO
22557: IFFALSE 22807
// begin side := GetSide ( minersList [ i ] ) ;
22559: LD_ADDR_VAR 0 3
22563: PUSH
22564: LD_EXP 90
22568: PUSH
22569: LD_VAR 0 1
22573: ARRAY
22574: PPUSH
22575: CALL_OW 255
22579: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22580: LD_ADDR_VAR 0 4
22584: PUSH
22585: LD_EXP 91
22589: PUSH
22590: LD_VAR 0 1
22594: ARRAY
22595: PUSH
22596: LD_VAR 0 2
22600: ARRAY
22601: PUSH
22602: LD_INT 1
22604: ARRAY
22605: PPUSH
22606: LD_EXP 91
22610: PUSH
22611: LD_VAR 0 1
22615: ARRAY
22616: PUSH
22617: LD_VAR 0 2
22621: ARRAY
22622: PUSH
22623: LD_INT 2
22625: ARRAY
22626: PPUSH
22627: CALL_OW 428
22631: ST_TO_ADDR
// if not tmp then
22632: LD_VAR 0 4
22636: NOT
22637: IFFALSE 22641
// continue ;
22639: GO 22556
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22641: LD_VAR 0 4
22645: PUSH
22646: LD_INT 81
22648: PUSH
22649: LD_VAR 0 3
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PPUSH
22658: CALL_OW 69
22662: IN
22663: PUSH
22664: LD_EXP 91
22668: PUSH
22669: LD_VAR 0 1
22673: ARRAY
22674: PUSH
22675: LD_VAR 0 2
22679: ARRAY
22680: PUSH
22681: LD_INT 1
22683: ARRAY
22684: PPUSH
22685: LD_EXP 91
22689: PUSH
22690: LD_VAR 0 1
22694: ARRAY
22695: PUSH
22696: LD_VAR 0 2
22700: ARRAY
22701: PUSH
22702: LD_INT 2
22704: ARRAY
22705: PPUSH
22706: CALL_OW 458
22710: AND
22711: IFFALSE 22805
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22713: LD_EXP 91
22717: PUSH
22718: LD_VAR 0 1
22722: ARRAY
22723: PUSH
22724: LD_VAR 0 2
22728: ARRAY
22729: PUSH
22730: LD_INT 1
22732: ARRAY
22733: PPUSH
22734: LD_EXP 91
22738: PUSH
22739: LD_VAR 0 1
22743: ARRAY
22744: PUSH
22745: LD_VAR 0 2
22749: ARRAY
22750: PUSH
22751: LD_INT 2
22753: ARRAY
22754: PPUSH
22755: LD_VAR 0 3
22759: PPUSH
22760: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22764: LD_ADDR_EXP 91
22768: PUSH
22769: LD_EXP 91
22773: PPUSH
22774: LD_VAR 0 1
22778: PPUSH
22779: LD_EXP 91
22783: PUSH
22784: LD_VAR 0 1
22788: ARRAY
22789: PPUSH
22790: LD_VAR 0 2
22794: PPUSH
22795: CALL_OW 3
22799: PPUSH
22800: CALL_OW 1
22804: ST_TO_ADDR
// end ; end ;
22805: GO 22556
22807: POP
22808: POP
// end ;
22809: GO 22474
22811: POP
22812: POP
// end ;
22813: PPOPN 4
22815: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22816: LD_INT 0
22818: PPUSH
22819: PPUSH
// result := false ;
22820: LD_ADDR_VAR 0 4
22824: PUSH
22825: LD_INT 0
22827: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 264
22837: PUSH
22838: LD_EXP 100
22842: EQUAL
22843: NOT
22844: IFFALSE 22848
// exit ;
22846: GO 23088
// index := GetElementIndex ( minersList , unit ) ;
22848: LD_ADDR_VAR 0 5
22852: PUSH
22853: LD_EXP 90
22857: PPUSH
22858: LD_VAR 0 1
22862: PPUSH
22863: CALL 29447 0 2
22867: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22868: LD_EXP 91
22872: PUSH
22873: LD_VAR 0 5
22877: ARRAY
22878: PUSH
22879: LD_EXP 92
22883: GREATEREQUAL
22884: IFFALSE 22888
// exit ;
22886: GO 23088
// ComMoveXY ( unit , x , y ) ;
22888: LD_VAR 0 1
22892: PPUSH
22893: LD_VAR 0 2
22897: PPUSH
22898: LD_VAR 0 3
22902: PPUSH
22903: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22907: LD_INT 35
22909: PPUSH
22910: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22914: LD_VAR 0 1
22918: PPUSH
22919: LD_VAR 0 2
22923: PPUSH
22924: LD_VAR 0 3
22928: PPUSH
22929: CALL 60166 0 3
22933: NOT
22934: PUSH
22935: LD_VAR 0 1
22939: PPUSH
22940: CALL_OW 314
22944: AND
22945: IFFALSE 22949
// exit ;
22947: GO 23088
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22949: LD_VAR 0 2
22953: PPUSH
22954: LD_VAR 0 3
22958: PPUSH
22959: CALL_OW 428
22963: PUSH
22964: LD_VAR 0 1
22968: EQUAL
22969: PUSH
22970: LD_VAR 0 1
22974: PPUSH
22975: CALL_OW 314
22979: NOT
22980: AND
22981: IFFALSE 22907
// PlaySoundXY ( x , y , PlantMine ) ;
22983: LD_VAR 0 2
22987: PPUSH
22988: LD_VAR 0 3
22992: PPUSH
22993: LD_STRING PlantMine
22995: PPUSH
22996: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23000: LD_VAR 0 2
23004: PPUSH
23005: LD_VAR 0 3
23009: PPUSH
23010: LD_VAR 0 1
23014: PPUSH
23015: CALL_OW 255
23019: PPUSH
23020: LD_INT 0
23022: PPUSH
23023: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23027: LD_ADDR_EXP 91
23031: PUSH
23032: LD_EXP 91
23036: PPUSH
23037: LD_VAR 0 5
23041: PUSH
23042: LD_EXP 91
23046: PUSH
23047: LD_VAR 0 5
23051: ARRAY
23052: PUSH
23053: LD_INT 1
23055: PLUS
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PPUSH
23061: LD_VAR 0 2
23065: PUSH
23066: LD_VAR 0 3
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PPUSH
23075: CALL 29662 0 3
23079: ST_TO_ADDR
// result := true ;
23080: LD_ADDR_VAR 0 4
23084: PUSH
23085: LD_INT 1
23087: ST_TO_ADDR
// end ;
23088: LD_VAR 0 4
23092: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23093: LD_INT 0
23095: PPUSH
23096: PPUSH
23097: PPUSH
// if not unit in minersList then
23098: LD_VAR 0 1
23102: PUSH
23103: LD_EXP 90
23107: IN
23108: NOT
23109: IFFALSE 23113
// exit ;
23111: GO 23505
// index := GetElementIndex ( minersList , unit ) ;
23113: LD_ADDR_VAR 0 6
23117: PUSH
23118: LD_EXP 90
23122: PPUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL 29447 0 2
23132: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23133: LD_ADDR_VAR 0 5
23137: PUSH
23138: DOUBLE
23139: LD_EXP 91
23143: PUSH
23144: LD_VAR 0 6
23148: ARRAY
23149: INC
23150: ST_TO_ADDR
23151: LD_INT 1
23153: PUSH
23154: FOR_DOWNTO
23155: IFFALSE 23316
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23157: LD_EXP 91
23161: PUSH
23162: LD_VAR 0 6
23166: ARRAY
23167: PUSH
23168: LD_VAR 0 5
23172: ARRAY
23173: PUSH
23174: LD_INT 1
23176: ARRAY
23177: PUSH
23178: LD_VAR 0 2
23182: EQUAL
23183: PUSH
23184: LD_EXP 91
23188: PUSH
23189: LD_VAR 0 6
23193: ARRAY
23194: PUSH
23195: LD_VAR 0 5
23199: ARRAY
23200: PUSH
23201: LD_INT 2
23203: ARRAY
23204: PUSH
23205: LD_VAR 0 3
23209: EQUAL
23210: AND
23211: IFFALSE 23314
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23213: LD_EXP 91
23217: PUSH
23218: LD_VAR 0 6
23222: ARRAY
23223: PUSH
23224: LD_VAR 0 5
23228: ARRAY
23229: PUSH
23230: LD_INT 1
23232: ARRAY
23233: PPUSH
23234: LD_EXP 91
23238: PUSH
23239: LD_VAR 0 6
23243: ARRAY
23244: PUSH
23245: LD_VAR 0 5
23249: ARRAY
23250: PUSH
23251: LD_INT 2
23253: ARRAY
23254: PPUSH
23255: LD_VAR 0 1
23259: PPUSH
23260: CALL_OW 255
23264: PPUSH
23265: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23269: LD_ADDR_EXP 91
23273: PUSH
23274: LD_EXP 91
23278: PPUSH
23279: LD_VAR 0 6
23283: PPUSH
23284: LD_EXP 91
23288: PUSH
23289: LD_VAR 0 6
23293: ARRAY
23294: PPUSH
23295: LD_VAR 0 5
23299: PPUSH
23300: CALL_OW 3
23304: PPUSH
23305: CALL_OW 1
23309: ST_TO_ADDR
// exit ;
23310: POP
23311: POP
23312: GO 23505
// end ; end ;
23314: GO 23154
23316: POP
23317: POP
// for i := minerMinesList [ index ] downto 1 do
23318: LD_ADDR_VAR 0 5
23322: PUSH
23323: DOUBLE
23324: LD_EXP 91
23328: PUSH
23329: LD_VAR 0 6
23333: ARRAY
23334: INC
23335: ST_TO_ADDR
23336: LD_INT 1
23338: PUSH
23339: FOR_DOWNTO
23340: IFFALSE 23503
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23342: LD_EXP 91
23346: PUSH
23347: LD_VAR 0 6
23351: ARRAY
23352: PUSH
23353: LD_VAR 0 5
23357: ARRAY
23358: PUSH
23359: LD_INT 1
23361: ARRAY
23362: PPUSH
23363: LD_EXP 91
23367: PUSH
23368: LD_VAR 0 6
23372: ARRAY
23373: PUSH
23374: LD_VAR 0 5
23378: ARRAY
23379: PUSH
23380: LD_INT 2
23382: ARRAY
23383: PPUSH
23384: LD_VAR 0 2
23388: PPUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: CALL_OW 298
23398: PUSH
23399: LD_INT 6
23401: LESS
23402: IFFALSE 23501
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23404: LD_EXP 91
23408: PUSH
23409: LD_VAR 0 6
23413: ARRAY
23414: PUSH
23415: LD_VAR 0 5
23419: ARRAY
23420: PUSH
23421: LD_INT 1
23423: ARRAY
23424: PPUSH
23425: LD_EXP 91
23429: PUSH
23430: LD_VAR 0 6
23434: ARRAY
23435: PUSH
23436: LD_VAR 0 5
23440: ARRAY
23441: PUSH
23442: LD_INT 2
23444: ARRAY
23445: PPUSH
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 255
23455: PPUSH
23456: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23460: LD_ADDR_EXP 91
23464: PUSH
23465: LD_EXP 91
23469: PPUSH
23470: LD_VAR 0 6
23474: PPUSH
23475: LD_EXP 91
23479: PUSH
23480: LD_VAR 0 6
23484: ARRAY
23485: PPUSH
23486: LD_VAR 0 5
23490: PPUSH
23491: CALL_OW 3
23495: PPUSH
23496: CALL_OW 1
23500: ST_TO_ADDR
// end ; end ;
23501: GO 23339
23503: POP
23504: POP
// end ;
23505: LD_VAR 0 4
23509: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23510: LD_INT 0
23512: PPUSH
23513: PPUSH
23514: PPUSH
23515: PPUSH
23516: PPUSH
23517: PPUSH
23518: PPUSH
23519: PPUSH
23520: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23521: LD_VAR 0 1
23525: PPUSH
23526: CALL_OW 264
23530: PUSH
23531: LD_EXP 100
23535: EQUAL
23536: NOT
23537: PUSH
23538: LD_VAR 0 1
23542: PUSH
23543: LD_EXP 90
23547: IN
23548: NOT
23549: OR
23550: IFFALSE 23554
// exit ;
23552: GO 23876
// index := GetElementIndex ( minersList , unit ) ;
23554: LD_ADDR_VAR 0 6
23558: PUSH
23559: LD_EXP 90
23563: PPUSH
23564: LD_VAR 0 1
23568: PPUSH
23569: CALL 29447 0 2
23573: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23574: LD_ADDR_VAR 0 8
23578: PUSH
23579: LD_EXP 92
23583: PUSH
23584: LD_EXP 91
23588: PUSH
23589: LD_VAR 0 6
23593: ARRAY
23594: MINUS
23595: ST_TO_ADDR
// if not minesFreeAmount then
23596: LD_VAR 0 8
23600: NOT
23601: IFFALSE 23605
// exit ;
23603: GO 23876
// tmp := [ ] ;
23605: LD_ADDR_VAR 0 7
23609: PUSH
23610: EMPTY
23611: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23612: LD_ADDR_VAR 0 5
23616: PUSH
23617: DOUBLE
23618: LD_INT 1
23620: DEC
23621: ST_TO_ADDR
23622: LD_VAR 0 8
23626: PUSH
23627: FOR_TO
23628: IFFALSE 23823
// begin _d := rand ( 0 , 5 ) ;
23630: LD_ADDR_VAR 0 11
23634: PUSH
23635: LD_INT 0
23637: PPUSH
23638: LD_INT 5
23640: PPUSH
23641: CALL_OW 12
23645: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23646: LD_ADDR_VAR 0 12
23650: PUSH
23651: LD_INT 2
23653: PPUSH
23654: LD_INT 6
23656: PPUSH
23657: CALL_OW 12
23661: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23662: LD_ADDR_VAR 0 9
23666: PUSH
23667: LD_VAR 0 2
23671: PPUSH
23672: LD_VAR 0 11
23676: PPUSH
23677: LD_VAR 0 12
23681: PPUSH
23682: CALL_OW 272
23686: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23687: LD_ADDR_VAR 0 10
23691: PUSH
23692: LD_VAR 0 3
23696: PPUSH
23697: LD_VAR 0 11
23701: PPUSH
23702: LD_VAR 0 12
23706: PPUSH
23707: CALL_OW 273
23711: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23712: LD_VAR 0 9
23716: PPUSH
23717: LD_VAR 0 10
23721: PPUSH
23722: CALL_OW 488
23726: PUSH
23727: LD_VAR 0 9
23731: PUSH
23732: LD_VAR 0 10
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_VAR 0 7
23745: IN
23746: NOT
23747: AND
23748: PUSH
23749: LD_VAR 0 9
23753: PPUSH
23754: LD_VAR 0 10
23758: PPUSH
23759: CALL_OW 458
23763: NOT
23764: AND
23765: IFFALSE 23807
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23767: LD_ADDR_VAR 0 7
23771: PUSH
23772: LD_VAR 0 7
23776: PPUSH
23777: LD_VAR 0 7
23781: PUSH
23782: LD_INT 1
23784: PLUS
23785: PPUSH
23786: LD_VAR 0 9
23790: PUSH
23791: LD_VAR 0 10
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 1
23804: ST_TO_ADDR
23805: GO 23821
// i := i - 1 ;
23807: LD_ADDR_VAR 0 5
23811: PUSH
23812: LD_VAR 0 5
23816: PUSH
23817: LD_INT 1
23819: MINUS
23820: ST_TO_ADDR
// end ;
23821: GO 23627
23823: POP
23824: POP
// for i in tmp do
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_VAR 0 7
23834: PUSH
23835: FOR_IN
23836: IFFALSE 23874
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23838: LD_VAR 0 1
23842: PPUSH
23843: LD_VAR 0 5
23847: PUSH
23848: LD_INT 1
23850: ARRAY
23851: PPUSH
23852: LD_VAR 0 5
23856: PUSH
23857: LD_INT 2
23859: ARRAY
23860: PPUSH
23861: CALL 22816 0 3
23865: NOT
23866: IFFALSE 23872
// exit ;
23868: POP
23869: POP
23870: GO 23876
23872: GO 23835
23874: POP
23875: POP
// end ;
23876: LD_VAR 0 4
23880: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23881: LD_INT 0
23883: PPUSH
23884: PPUSH
23885: PPUSH
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
// if not GetClass ( unit ) = class_sniper then
23890: LD_VAR 0 1
23894: PPUSH
23895: CALL_OW 257
23899: PUSH
23900: LD_INT 5
23902: EQUAL
23903: NOT
23904: IFFALSE 23908
// exit ;
23906: GO 24296
// dist := 8 ;
23908: LD_ADDR_VAR 0 5
23912: PUSH
23913: LD_INT 8
23915: ST_TO_ADDR
// viewRange := 12 ;
23916: LD_ADDR_VAR 0 7
23920: PUSH
23921: LD_INT 12
23923: ST_TO_ADDR
// side := GetSide ( unit ) ;
23924: LD_ADDR_VAR 0 6
23928: PUSH
23929: LD_VAR 0 1
23933: PPUSH
23934: CALL_OW 255
23938: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23939: LD_INT 61
23941: PPUSH
23942: LD_VAR 0 6
23946: PPUSH
23947: CALL_OW 321
23951: PUSH
23952: LD_INT 2
23954: EQUAL
23955: IFFALSE 23965
// viewRange := 16 ;
23957: LD_ADDR_VAR 0 7
23961: PUSH
23962: LD_INT 16
23964: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23965: LD_VAR 0 1
23969: PPUSH
23970: LD_VAR 0 2
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: CALL_OW 297
23984: PUSH
23985: LD_VAR 0 5
23989: GREATER
23990: IFFALSE 24069
// begin ComMoveXY ( unit , x , y ) ;
23992: LD_VAR 0 1
23996: PPUSH
23997: LD_VAR 0 2
24001: PPUSH
24002: LD_VAR 0 3
24006: PPUSH
24007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24011: LD_INT 35
24013: PPUSH
24014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24018: LD_VAR 0 1
24022: PPUSH
24023: LD_VAR 0 2
24027: PPUSH
24028: LD_VAR 0 3
24032: PPUSH
24033: CALL 60166 0 3
24037: NOT
24038: IFFALSE 24042
// exit ;
24040: GO 24296
// until GetDistUnitXY ( unit , x , y ) < dist ;
24042: LD_VAR 0 1
24046: PPUSH
24047: LD_VAR 0 2
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: CALL_OW 297
24061: PUSH
24062: LD_VAR 0 5
24066: LESS
24067: IFFALSE 24011
// end ; ComTurnXY ( unit , x , y ) ;
24069: LD_VAR 0 1
24073: PPUSH
24074: LD_VAR 0 2
24078: PPUSH
24079: LD_VAR 0 3
24083: PPUSH
24084: CALL_OW 118
// wait ( 5 ) ;
24088: LD_INT 5
24090: PPUSH
24091: CALL_OW 67
// _d := GetDir ( unit ) ;
24095: LD_ADDR_VAR 0 10
24099: PUSH
24100: LD_VAR 0 1
24104: PPUSH
24105: CALL_OW 254
24109: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24110: LD_ADDR_VAR 0 8
24114: PUSH
24115: LD_VAR 0 1
24119: PPUSH
24120: CALL_OW 250
24124: PPUSH
24125: LD_VAR 0 10
24129: PPUSH
24130: LD_VAR 0 5
24134: PPUSH
24135: CALL_OW 272
24139: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24140: LD_ADDR_VAR 0 9
24144: PUSH
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 251
24154: PPUSH
24155: LD_VAR 0 10
24159: PPUSH
24160: LD_VAR 0 5
24164: PPUSH
24165: CALL_OW 273
24169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24170: LD_VAR 0 8
24174: PPUSH
24175: LD_VAR 0 9
24179: PPUSH
24180: CALL_OW 488
24184: NOT
24185: IFFALSE 24189
// exit ;
24187: GO 24296
// ComAnimCustom ( unit , 1 ) ;
24189: LD_VAR 0 1
24193: PPUSH
24194: LD_INT 1
24196: PPUSH
24197: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24201: LD_VAR 0 8
24205: PPUSH
24206: LD_VAR 0 9
24210: PPUSH
24211: LD_VAR 0 6
24215: PPUSH
24216: LD_VAR 0 7
24220: PPUSH
24221: CALL_OW 330
// repeat wait ( 1 ) ;
24225: LD_INT 1
24227: PPUSH
24228: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24232: LD_VAR 0 1
24236: PPUSH
24237: CALL_OW 316
24241: PUSH
24242: LD_VAR 0 1
24246: PPUSH
24247: CALL_OW 314
24251: OR
24252: PUSH
24253: LD_VAR 0 1
24257: PPUSH
24258: CALL_OW 302
24262: NOT
24263: OR
24264: PUSH
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL_OW 301
24274: OR
24275: IFFALSE 24225
// RemoveSeeing ( _x , _y , side ) ;
24277: LD_VAR 0 8
24281: PPUSH
24282: LD_VAR 0 9
24286: PPUSH
24287: LD_VAR 0 6
24291: PPUSH
24292: CALL_OW 331
// end ; end_of_file
24296: LD_VAR 0 4
24300: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24301: LD_VAR 0 1
24305: PUSH
24306: LD_INT 200
24308: DOUBLE
24309: GREATEREQUAL
24310: IFFALSE 24318
24312: LD_INT 299
24314: DOUBLE
24315: LESSEQUAL
24316: IFTRUE 24320
24318: GO 24352
24320: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24321: LD_VAR 0 1
24325: PPUSH
24326: LD_VAR 0 2
24330: PPUSH
24331: LD_VAR 0 3
24335: PPUSH
24336: LD_VAR 0 4
24340: PPUSH
24341: LD_VAR 0 5
24345: PPUSH
24346: CALL 20039 0 5
24350: GO 24429
24352: LD_INT 300
24354: DOUBLE
24355: GREATEREQUAL
24356: IFFALSE 24364
24358: LD_INT 399
24360: DOUBLE
24361: LESSEQUAL
24362: IFTRUE 24366
24364: GO 24428
24366: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_VAR 0 2
24376: PPUSH
24377: LD_VAR 0 3
24381: PPUSH
24382: LD_VAR 0 4
24386: PPUSH
24387: LD_VAR 0 5
24391: PPUSH
24392: LD_VAR 0 6
24396: PPUSH
24397: LD_VAR 0 7
24401: PPUSH
24402: LD_VAR 0 8
24406: PPUSH
24407: LD_VAR 0 9
24411: PPUSH
24412: LD_VAR 0 10
24416: PPUSH
24417: LD_VAR 0 11
24421: PPUSH
24422: CALL 17681 0 11
24426: GO 24429
24428: POP
// end ;
24429: PPOPN 11
24431: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24432: LD_VAR 0 1
24436: PPUSH
24437: LD_VAR 0 2
24441: PPUSH
24442: LD_VAR 0 3
24446: PPUSH
24447: LD_VAR 0 4
24451: PPUSH
24452: LD_VAR 0 5
24456: PPUSH
24457: CALL 19775 0 5
// end ; end_of_file
24461: PPOPN 5
24463: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
24464: LD_VAR 0 1
24468: PPUSH
24469: LD_VAR 0 2
24473: PPUSH
24474: LD_VAR 0 3
24478: PPUSH
24479: LD_VAR 0 4
24483: PPUSH
24484: LD_VAR 0 5
24488: PPUSH
24489: LD_VAR 0 6
24493: PPUSH
24494: CALL 5374 0 6
// end ;
24498: PPOPN 6
24500: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
24501: CALL 5349 0 0
// end ; end_of_file end_of_file
24505: PPOPN 1
24507: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24508: LD_INT 0
24510: PPUSH
// ar_miner := 81 ;
24511: LD_ADDR_EXP 100
24515: PUSH
24516: LD_INT 81
24518: ST_TO_ADDR
// ar_crane := 88 ;
24519: LD_ADDR_EXP 99
24523: PUSH
24524: LD_INT 88
24526: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24527: LD_ADDR_EXP 94
24531: PUSH
24532: LD_INT 89
24534: ST_TO_ADDR
// us_hack := 99 ;
24535: LD_ADDR_EXP 95
24539: PUSH
24540: LD_INT 99
24542: ST_TO_ADDR
// us_artillery := 97 ;
24543: LD_ADDR_EXP 96
24547: PUSH
24548: LD_INT 97
24550: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24551: LD_ADDR_EXP 97
24555: PUSH
24556: LD_INT 91
24558: ST_TO_ADDR
// ar_mortar := 92 ;
24559: LD_ADDR_EXP 98
24563: PUSH
24564: LD_INT 92
24566: ST_TO_ADDR
// ru_radar := 98 ;
24567: LD_ADDR_EXP 93
24571: PUSH
24572: LD_INT 98
24574: ST_TO_ADDR
// tech_Artillery := 80 ;
24575: LD_ADDR_EXP 101
24579: PUSH
24580: LD_INT 80
24582: ST_TO_ADDR
// tech_RadMat := 81 ;
24583: LD_ADDR_EXP 102
24587: PUSH
24588: LD_INT 81
24590: ST_TO_ADDR
// tech_BasicTools := 82 ;
24591: LD_ADDR_EXP 103
24595: PUSH
24596: LD_INT 82
24598: ST_TO_ADDR
// tech_Cargo := 83 ;
24599: LD_ADDR_EXP 104
24603: PUSH
24604: LD_INT 83
24606: ST_TO_ADDR
// tech_Track := 84 ;
24607: LD_ADDR_EXP 105
24611: PUSH
24612: LD_INT 84
24614: ST_TO_ADDR
// tech_Crane := 85 ;
24615: LD_ADDR_EXP 106
24619: PUSH
24620: LD_INT 85
24622: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24623: LD_ADDR_EXP 107
24627: PUSH
24628: LD_INT 86
24630: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24631: LD_ADDR_EXP 108
24635: PUSH
24636: LD_INT 87
24638: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24639: LD_ADDR_EXP 109
24643: PUSH
24644: LD_INT 88
24646: ST_TO_ADDR
// class_mastodont := 31 ;
24647: LD_ADDR_EXP 110
24651: PUSH
24652: LD_INT 31
24654: ST_TO_ADDR
// class_horse := 21 ;
24655: LD_ADDR_EXP 111
24659: PUSH
24660: LD_INT 21
24662: ST_TO_ADDR
// end ;
24663: LD_VAR 0 1
24667: RET
// every 1 do
24668: GO 24670
24670: DISABLE
// InitGlobalVariables ; end_of_file
24671: CALL 24508 0 0
24675: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24676: LD_INT 0
24678: PPUSH
24679: PPUSH
// if exist_mode then
24680: LD_VAR 0 2
24684: IFFALSE 24709
// unit := CreateCharacter ( prefix & ident ) else
24686: LD_ADDR_VAR 0 5
24690: PUSH
24691: LD_VAR 0 3
24695: PUSH
24696: LD_VAR 0 1
24700: STR
24701: PPUSH
24702: CALL_OW 34
24706: ST_TO_ADDR
24707: GO 24724
// unit := NewCharacter ( ident ) ;
24709: LD_ADDR_VAR 0 5
24713: PUSH
24714: LD_VAR 0 1
24718: PPUSH
24719: CALL_OW 25
24723: ST_TO_ADDR
// result := unit ;
24724: LD_ADDR_VAR 0 4
24728: PUSH
24729: LD_VAR 0 5
24733: ST_TO_ADDR
// end ;
24734: LD_VAR 0 4
24738: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24739: LD_INT 0
24741: PPUSH
24742: PPUSH
// if not side or not nation then
24743: LD_VAR 0 1
24747: NOT
24748: PUSH
24749: LD_VAR 0 2
24753: NOT
24754: OR
24755: IFFALSE 24759
// exit ;
24757: GO 25527
// case nation of nation_american :
24759: LD_VAR 0 2
24763: PUSH
24764: LD_INT 1
24766: DOUBLE
24767: EQUAL
24768: IFTRUE 24772
24770: GO 24986
24772: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24773: LD_ADDR_VAR 0 4
24777: PUSH
24778: LD_INT 35
24780: PUSH
24781: LD_INT 45
24783: PUSH
24784: LD_INT 46
24786: PUSH
24787: LD_INT 47
24789: PUSH
24790: LD_INT 82
24792: PUSH
24793: LD_INT 83
24795: PUSH
24796: LD_INT 84
24798: PUSH
24799: LD_INT 85
24801: PUSH
24802: LD_INT 86
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 6
24813: PUSH
24814: LD_INT 15
24816: PUSH
24817: LD_INT 16
24819: PUSH
24820: LD_INT 7
24822: PUSH
24823: LD_INT 12
24825: PUSH
24826: LD_INT 13
24828: PUSH
24829: LD_INT 10
24831: PUSH
24832: LD_INT 14
24834: PUSH
24835: LD_INT 20
24837: PUSH
24838: LD_INT 21
24840: PUSH
24841: LD_INT 22
24843: PUSH
24844: LD_INT 25
24846: PUSH
24847: LD_INT 32
24849: PUSH
24850: LD_INT 27
24852: PUSH
24853: LD_INT 36
24855: PUSH
24856: LD_INT 69
24858: PUSH
24859: LD_INT 39
24861: PUSH
24862: LD_INT 34
24864: PUSH
24865: LD_INT 40
24867: PUSH
24868: LD_INT 48
24870: PUSH
24871: LD_INT 49
24873: PUSH
24874: LD_INT 50
24876: PUSH
24877: LD_INT 51
24879: PUSH
24880: LD_INT 52
24882: PUSH
24883: LD_INT 53
24885: PUSH
24886: LD_INT 54
24888: PUSH
24889: LD_INT 55
24891: PUSH
24892: LD_INT 56
24894: PUSH
24895: LD_INT 57
24897: PUSH
24898: LD_INT 58
24900: PUSH
24901: LD_INT 59
24903: PUSH
24904: LD_INT 60
24906: PUSH
24907: LD_INT 61
24909: PUSH
24910: LD_INT 62
24912: PUSH
24913: LD_INT 80
24915: PUSH
24916: LD_INT 82
24918: PUSH
24919: LD_INT 83
24921: PUSH
24922: LD_INT 84
24924: PUSH
24925: LD_INT 85
24927: PUSH
24928: LD_INT 86
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: ST_TO_ADDR
24984: GO 25451
24986: LD_INT 2
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25220
24994: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24995: LD_ADDR_VAR 0 4
24999: PUSH
25000: LD_INT 35
25002: PUSH
25003: LD_INT 45
25005: PUSH
25006: LD_INT 46
25008: PUSH
25009: LD_INT 47
25011: PUSH
25012: LD_INT 82
25014: PUSH
25015: LD_INT 83
25017: PUSH
25018: LD_INT 84
25020: PUSH
25021: LD_INT 85
25023: PUSH
25024: LD_INT 87
25026: PUSH
25027: LD_INT 70
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: LD_INT 11
25035: PUSH
25036: LD_INT 3
25038: PUSH
25039: LD_INT 4
25041: PUSH
25042: LD_INT 5
25044: PUSH
25045: LD_INT 6
25047: PUSH
25048: LD_INT 15
25050: PUSH
25051: LD_INT 18
25053: PUSH
25054: LD_INT 7
25056: PUSH
25057: LD_INT 17
25059: PUSH
25060: LD_INT 8
25062: PUSH
25063: LD_INT 20
25065: PUSH
25066: LD_INT 21
25068: PUSH
25069: LD_INT 22
25071: PUSH
25072: LD_INT 72
25074: PUSH
25075: LD_INT 26
25077: PUSH
25078: LD_INT 69
25080: PUSH
25081: LD_INT 39
25083: PUSH
25084: LD_INT 40
25086: PUSH
25087: LD_INT 41
25089: PUSH
25090: LD_INT 42
25092: PUSH
25093: LD_INT 43
25095: PUSH
25096: LD_INT 48
25098: PUSH
25099: LD_INT 49
25101: PUSH
25102: LD_INT 50
25104: PUSH
25105: LD_INT 51
25107: PUSH
25108: LD_INT 52
25110: PUSH
25111: LD_INT 53
25113: PUSH
25114: LD_INT 54
25116: PUSH
25117: LD_INT 55
25119: PUSH
25120: LD_INT 56
25122: PUSH
25123: LD_INT 60
25125: PUSH
25126: LD_INT 61
25128: PUSH
25129: LD_INT 62
25131: PUSH
25132: LD_INT 66
25134: PUSH
25135: LD_INT 67
25137: PUSH
25138: LD_INT 68
25140: PUSH
25141: LD_INT 81
25143: PUSH
25144: LD_INT 82
25146: PUSH
25147: LD_INT 83
25149: PUSH
25150: LD_INT 84
25152: PUSH
25153: LD_INT 85
25155: PUSH
25156: LD_INT 87
25158: PUSH
25159: LD_INT 88
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: ST_TO_ADDR
25218: GO 25451
25220: LD_INT 3
25222: DOUBLE
25223: EQUAL
25224: IFTRUE 25228
25226: GO 25450
25228: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25229: LD_ADDR_VAR 0 4
25233: PUSH
25234: LD_INT 46
25236: PUSH
25237: LD_INT 47
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: LD_INT 82
25248: PUSH
25249: LD_INT 83
25251: PUSH
25252: LD_INT 84
25254: PUSH
25255: LD_INT 85
25257: PUSH
25258: LD_INT 86
25260: PUSH
25261: LD_INT 11
25263: PUSH
25264: LD_INT 9
25266: PUSH
25267: LD_INT 20
25269: PUSH
25270: LD_INT 19
25272: PUSH
25273: LD_INT 21
25275: PUSH
25276: LD_INT 24
25278: PUSH
25279: LD_INT 22
25281: PUSH
25282: LD_INT 25
25284: PUSH
25285: LD_INT 28
25287: PUSH
25288: LD_INT 29
25290: PUSH
25291: LD_INT 30
25293: PUSH
25294: LD_INT 31
25296: PUSH
25297: LD_INT 37
25299: PUSH
25300: LD_INT 38
25302: PUSH
25303: LD_INT 32
25305: PUSH
25306: LD_INT 27
25308: PUSH
25309: LD_INT 33
25311: PUSH
25312: LD_INT 69
25314: PUSH
25315: LD_INT 39
25317: PUSH
25318: LD_INT 34
25320: PUSH
25321: LD_INT 40
25323: PUSH
25324: LD_INT 71
25326: PUSH
25327: LD_INT 23
25329: PUSH
25330: LD_INT 44
25332: PUSH
25333: LD_INT 48
25335: PUSH
25336: LD_INT 49
25338: PUSH
25339: LD_INT 50
25341: PUSH
25342: LD_INT 51
25344: PUSH
25345: LD_INT 52
25347: PUSH
25348: LD_INT 53
25350: PUSH
25351: LD_INT 54
25353: PUSH
25354: LD_INT 55
25356: PUSH
25357: LD_INT 56
25359: PUSH
25360: LD_INT 57
25362: PUSH
25363: LD_INT 58
25365: PUSH
25366: LD_INT 59
25368: PUSH
25369: LD_INT 63
25371: PUSH
25372: LD_INT 64
25374: PUSH
25375: LD_INT 65
25377: PUSH
25378: LD_INT 82
25380: PUSH
25381: LD_INT 83
25383: PUSH
25384: LD_INT 84
25386: PUSH
25387: LD_INT 85
25389: PUSH
25390: LD_INT 86
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: ST_TO_ADDR
25448: GO 25451
25450: POP
// if state > - 1 and state < 3 then
25451: LD_VAR 0 3
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: GREATER
25460: PUSH
25461: LD_VAR 0 3
25465: PUSH
25466: LD_INT 3
25468: LESS
25469: AND
25470: IFFALSE 25527
// for i in result do
25472: LD_ADDR_VAR 0 5
25476: PUSH
25477: LD_VAR 0 4
25481: PUSH
25482: FOR_IN
25483: IFFALSE 25525
// if GetTech ( i , side ) <> state then
25485: LD_VAR 0 5
25489: PPUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 321
25499: PUSH
25500: LD_VAR 0 3
25504: NONEQUAL
25505: IFFALSE 25523
// result := result diff i ;
25507: LD_ADDR_VAR 0 4
25511: PUSH
25512: LD_VAR 0 4
25516: PUSH
25517: LD_VAR 0 5
25521: DIFF
25522: ST_TO_ADDR
25523: GO 25482
25525: POP
25526: POP
// end ;
25527: LD_VAR 0 4
25531: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25532: LD_INT 0
25534: PPUSH
25535: PPUSH
25536: PPUSH
// result := true ;
25537: LD_ADDR_VAR 0 3
25541: PUSH
25542: LD_INT 1
25544: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25545: LD_ADDR_VAR 0 5
25549: PUSH
25550: LD_VAR 0 2
25554: PPUSH
25555: CALL_OW 480
25559: ST_TO_ADDR
// if not tmp then
25560: LD_VAR 0 5
25564: NOT
25565: IFFALSE 25569
// exit ;
25567: GO 25618
// for i in tmp do
25569: LD_ADDR_VAR 0 4
25573: PUSH
25574: LD_VAR 0 5
25578: PUSH
25579: FOR_IN
25580: IFFALSE 25616
// if GetTech ( i , side ) <> state_researched then
25582: LD_VAR 0 4
25586: PPUSH
25587: LD_VAR 0 1
25591: PPUSH
25592: CALL_OW 321
25596: PUSH
25597: LD_INT 2
25599: NONEQUAL
25600: IFFALSE 25614
// begin result := false ;
25602: LD_ADDR_VAR 0 3
25606: PUSH
25607: LD_INT 0
25609: ST_TO_ADDR
// exit ;
25610: POP
25611: POP
25612: GO 25618
// end ;
25614: GO 25579
25616: POP
25617: POP
// end ;
25618: LD_VAR 0 3
25622: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25623: LD_INT 0
25625: PPUSH
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25638: LD_VAR 0 1
25642: NOT
25643: PUSH
25644: LD_VAR 0 1
25648: PPUSH
25649: CALL_OW 257
25653: PUSH
25654: LD_INT 9
25656: NONEQUAL
25657: OR
25658: IFFALSE 25662
// exit ;
25660: GO 26235
// side := GetSide ( unit ) ;
25662: LD_ADDR_VAR 0 9
25666: PUSH
25667: LD_VAR 0 1
25671: PPUSH
25672: CALL_OW 255
25676: ST_TO_ADDR
// tech_space := tech_spacanom ;
25677: LD_ADDR_VAR 0 12
25681: PUSH
25682: LD_INT 29
25684: ST_TO_ADDR
// tech_time := tech_taurad ;
25685: LD_ADDR_VAR 0 13
25689: PUSH
25690: LD_INT 28
25692: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25693: LD_ADDR_VAR 0 11
25697: PUSH
25698: LD_VAR 0 1
25702: PPUSH
25703: CALL_OW 310
25707: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25708: LD_VAR 0 11
25712: PPUSH
25713: CALL_OW 247
25717: PUSH
25718: LD_INT 2
25720: EQUAL
25721: IFFALSE 25725
// exit ;
25723: GO 26235
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25725: LD_ADDR_VAR 0 8
25729: PUSH
25730: LD_INT 81
25732: PUSH
25733: LD_VAR 0 9
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 3
25744: PUSH
25745: LD_INT 21
25747: PUSH
25748: LD_INT 3
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PPUSH
25763: CALL_OW 69
25767: ST_TO_ADDR
// if not tmp then
25768: LD_VAR 0 8
25772: NOT
25773: IFFALSE 25777
// exit ;
25775: GO 26235
// if in_unit then
25777: LD_VAR 0 11
25781: IFFALSE 25805
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25783: LD_ADDR_VAR 0 10
25787: PUSH
25788: LD_VAR 0 8
25792: PPUSH
25793: LD_VAR 0 11
25797: PPUSH
25798: CALL_OW 74
25802: ST_TO_ADDR
25803: GO 25825
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25805: LD_ADDR_VAR 0 10
25809: PUSH
25810: LD_VAR 0 8
25814: PPUSH
25815: LD_VAR 0 1
25819: PPUSH
25820: CALL_OW 74
25824: ST_TO_ADDR
// if not enemy then
25825: LD_VAR 0 10
25829: NOT
25830: IFFALSE 25834
// exit ;
25832: GO 26235
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25834: LD_VAR 0 11
25838: PUSH
25839: LD_VAR 0 11
25843: PPUSH
25844: LD_VAR 0 10
25848: PPUSH
25849: CALL_OW 296
25853: PUSH
25854: LD_INT 13
25856: GREATER
25857: AND
25858: PUSH
25859: LD_VAR 0 1
25863: PPUSH
25864: LD_VAR 0 10
25868: PPUSH
25869: CALL_OW 296
25873: PUSH
25874: LD_INT 12
25876: GREATER
25877: OR
25878: IFFALSE 25882
// exit ;
25880: GO 26235
// missile := [ 1 ] ;
25882: LD_ADDR_VAR 0 14
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: EMPTY
25891: LIST
25892: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25893: LD_VAR 0 9
25897: PPUSH
25898: LD_VAR 0 12
25902: PPUSH
25903: CALL_OW 325
25907: IFFALSE 25936
// missile := Replace ( missile , missile + 1 , 2 ) ;
25909: LD_ADDR_VAR 0 14
25913: PUSH
25914: LD_VAR 0 14
25918: PPUSH
25919: LD_VAR 0 14
25923: PUSH
25924: LD_INT 1
25926: PLUS
25927: PPUSH
25928: LD_INT 2
25930: PPUSH
25931: CALL_OW 1
25935: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25936: LD_VAR 0 9
25940: PPUSH
25941: LD_VAR 0 13
25945: PPUSH
25946: CALL_OW 325
25950: PUSH
25951: LD_VAR 0 10
25955: PPUSH
25956: CALL_OW 255
25960: PPUSH
25961: LD_VAR 0 13
25965: PPUSH
25966: CALL_OW 325
25970: NOT
25971: AND
25972: IFFALSE 26001
// missile := Replace ( missile , missile + 1 , 3 ) ;
25974: LD_ADDR_VAR 0 14
25978: PUSH
25979: LD_VAR 0 14
25983: PPUSH
25984: LD_VAR 0 14
25988: PUSH
25989: LD_INT 1
25991: PLUS
25992: PPUSH
25993: LD_INT 3
25995: PPUSH
25996: CALL_OW 1
26000: ST_TO_ADDR
// if missile < 2 then
26001: LD_VAR 0 14
26005: PUSH
26006: LD_INT 2
26008: LESS
26009: IFFALSE 26013
// exit ;
26011: GO 26235
// x := GetX ( enemy ) ;
26013: LD_ADDR_VAR 0 4
26017: PUSH
26018: LD_VAR 0 10
26022: PPUSH
26023: CALL_OW 250
26027: ST_TO_ADDR
// y := GetY ( enemy ) ;
26028: LD_ADDR_VAR 0 5
26032: PUSH
26033: LD_VAR 0 10
26037: PPUSH
26038: CALL_OW 251
26042: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26043: LD_ADDR_VAR 0 6
26047: PUSH
26048: LD_VAR 0 4
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PPUSH
26057: LD_INT 1
26059: PPUSH
26060: CALL_OW 12
26064: PLUS
26065: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26066: LD_ADDR_VAR 0 7
26070: PUSH
26071: LD_VAR 0 5
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PPUSH
26080: LD_INT 1
26082: PPUSH
26083: CALL_OW 12
26087: PLUS
26088: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26089: LD_VAR 0 6
26093: PPUSH
26094: LD_VAR 0 7
26098: PPUSH
26099: CALL_OW 488
26103: NOT
26104: IFFALSE 26126
// begin _x := x ;
26106: LD_ADDR_VAR 0 6
26110: PUSH
26111: LD_VAR 0 4
26115: ST_TO_ADDR
// _y := y ;
26116: LD_ADDR_VAR 0 7
26120: PUSH
26121: LD_VAR 0 5
26125: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_INT 1
26133: PPUSH
26134: LD_VAR 0 14
26138: PPUSH
26139: CALL_OW 12
26143: ST_TO_ADDR
// case i of 1 :
26144: LD_VAR 0 3
26148: PUSH
26149: LD_INT 1
26151: DOUBLE
26152: EQUAL
26153: IFTRUE 26157
26155: GO 26174
26157: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26158: LD_VAR 0 1
26162: PPUSH
26163: LD_VAR 0 10
26167: PPUSH
26168: CALL_OW 115
26172: GO 26235
26174: LD_INT 2
26176: DOUBLE
26177: EQUAL
26178: IFTRUE 26182
26180: GO 26204
26182: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26183: LD_VAR 0 1
26187: PPUSH
26188: LD_VAR 0 6
26192: PPUSH
26193: LD_VAR 0 7
26197: PPUSH
26198: CALL_OW 153
26202: GO 26235
26204: LD_INT 3
26206: DOUBLE
26207: EQUAL
26208: IFTRUE 26212
26210: GO 26234
26212: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26213: LD_VAR 0 1
26217: PPUSH
26218: LD_VAR 0 6
26222: PPUSH
26223: LD_VAR 0 7
26227: PPUSH
26228: CALL_OW 154
26232: GO 26235
26234: POP
// end ;
26235: LD_VAR 0 2
26239: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26240: LD_INT 0
26242: PPUSH
26243: PPUSH
26244: PPUSH
26245: PPUSH
26246: PPUSH
26247: PPUSH
// if not unit or not building then
26248: LD_VAR 0 1
26252: NOT
26253: PUSH
26254: LD_VAR 0 2
26258: NOT
26259: OR
26260: IFFALSE 26264
// exit ;
26262: GO 26422
// x := GetX ( building ) ;
26264: LD_ADDR_VAR 0 5
26268: PUSH
26269: LD_VAR 0 2
26273: PPUSH
26274: CALL_OW 250
26278: ST_TO_ADDR
// y := GetY ( building ) ;
26279: LD_ADDR_VAR 0 6
26283: PUSH
26284: LD_VAR 0 2
26288: PPUSH
26289: CALL_OW 251
26293: ST_TO_ADDR
// for i = 0 to 5 do
26294: LD_ADDR_VAR 0 4
26298: PUSH
26299: DOUBLE
26300: LD_INT 0
26302: DEC
26303: ST_TO_ADDR
26304: LD_INT 5
26306: PUSH
26307: FOR_TO
26308: IFFALSE 26420
// begin _x := ShiftX ( x , i , 3 ) ;
26310: LD_ADDR_VAR 0 7
26314: PUSH
26315: LD_VAR 0 5
26319: PPUSH
26320: LD_VAR 0 4
26324: PPUSH
26325: LD_INT 3
26327: PPUSH
26328: CALL_OW 272
26332: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26333: LD_ADDR_VAR 0 8
26337: PUSH
26338: LD_VAR 0 6
26342: PPUSH
26343: LD_VAR 0 4
26347: PPUSH
26348: LD_INT 3
26350: PPUSH
26351: CALL_OW 273
26355: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26356: LD_VAR 0 7
26360: PPUSH
26361: LD_VAR 0 8
26365: PPUSH
26366: CALL_OW 488
26370: NOT
26371: IFFALSE 26375
// continue ;
26373: GO 26307
// if HexInfo ( _x , _y ) = 0 then
26375: LD_VAR 0 7
26379: PPUSH
26380: LD_VAR 0 8
26384: PPUSH
26385: CALL_OW 428
26389: PUSH
26390: LD_INT 0
26392: EQUAL
26393: IFFALSE 26418
// begin ComMoveXY ( unit , _x , _y ) ;
26395: LD_VAR 0 1
26399: PPUSH
26400: LD_VAR 0 7
26404: PPUSH
26405: LD_VAR 0 8
26409: PPUSH
26410: CALL_OW 111
// exit ;
26414: POP
26415: POP
26416: GO 26422
// end ; end ;
26418: GO 26307
26420: POP
26421: POP
// end ;
26422: LD_VAR 0 3
26426: RET
// export function ScanBase ( side , base_area ) ; begin
26427: LD_INT 0
26429: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26430: LD_ADDR_VAR 0 3
26434: PUSH
26435: LD_VAR 0 2
26439: PPUSH
26440: LD_INT 81
26442: PUSH
26443: LD_VAR 0 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PPUSH
26452: CALL_OW 70
26456: ST_TO_ADDR
// end ;
26457: LD_VAR 0 3
26461: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26462: LD_INT 0
26464: PPUSH
26465: PPUSH
26466: PPUSH
26467: PPUSH
// result := false ;
26468: LD_ADDR_VAR 0 2
26472: PUSH
26473: LD_INT 0
26475: ST_TO_ADDR
// side := GetSide ( unit ) ;
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: LD_VAR 0 1
26485: PPUSH
26486: CALL_OW 255
26490: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26491: LD_ADDR_VAR 0 4
26495: PUSH
26496: LD_VAR 0 1
26500: PPUSH
26501: CALL_OW 248
26505: ST_TO_ADDR
// case nat of 1 :
26506: LD_VAR 0 4
26510: PUSH
26511: LD_INT 1
26513: DOUBLE
26514: EQUAL
26515: IFTRUE 26519
26517: GO 26530
26519: POP
// tech := tech_lassight ; 2 :
26520: LD_ADDR_VAR 0 5
26524: PUSH
26525: LD_INT 12
26527: ST_TO_ADDR
26528: GO 26569
26530: LD_INT 2
26532: DOUBLE
26533: EQUAL
26534: IFTRUE 26538
26536: GO 26549
26538: POP
// tech := tech_mortar ; 3 :
26539: LD_ADDR_VAR 0 5
26543: PUSH
26544: LD_INT 41
26546: ST_TO_ADDR
26547: GO 26569
26549: LD_INT 3
26551: DOUBLE
26552: EQUAL
26553: IFTRUE 26557
26555: GO 26568
26557: POP
// tech := tech_bazooka ; end ;
26558: LD_ADDR_VAR 0 5
26562: PUSH
26563: LD_INT 44
26565: ST_TO_ADDR
26566: GO 26569
26568: POP
// if Researched ( side , tech ) then
26569: LD_VAR 0 3
26573: PPUSH
26574: LD_VAR 0 5
26578: PPUSH
26579: CALL_OW 325
26583: IFFALSE 26610
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26585: LD_ADDR_VAR 0 2
26589: PUSH
26590: LD_INT 5
26592: PUSH
26593: LD_INT 8
26595: PUSH
26596: LD_INT 9
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: PUSH
26604: LD_VAR 0 4
26608: ARRAY
26609: ST_TO_ADDR
// end ;
26610: LD_VAR 0 2
26614: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26615: LD_INT 0
26617: PPUSH
26618: PPUSH
26619: PPUSH
// if not mines then
26620: LD_VAR 0 2
26624: NOT
26625: IFFALSE 26629
// exit ;
26627: GO 26773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26629: LD_ADDR_VAR 0 5
26633: PUSH
26634: LD_INT 81
26636: PUSH
26637: LD_VAR 0 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 3
26648: PUSH
26649: LD_INT 21
26651: PUSH
26652: LD_INT 3
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: ST_TO_ADDR
// for i in mines do
26672: LD_ADDR_VAR 0 4
26676: PUSH
26677: LD_VAR 0 2
26681: PUSH
26682: FOR_IN
26683: IFFALSE 26771
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26685: LD_VAR 0 4
26689: PUSH
26690: LD_INT 1
26692: ARRAY
26693: PPUSH
26694: LD_VAR 0 4
26698: PUSH
26699: LD_INT 2
26701: ARRAY
26702: PPUSH
26703: CALL_OW 458
26707: NOT
26708: IFFALSE 26712
// continue ;
26710: GO 26682
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26712: LD_VAR 0 4
26716: PUSH
26717: LD_INT 1
26719: ARRAY
26720: PPUSH
26721: LD_VAR 0 4
26725: PUSH
26726: LD_INT 2
26728: ARRAY
26729: PPUSH
26730: CALL_OW 428
26734: PUSH
26735: LD_VAR 0 5
26739: IN
26740: IFFALSE 26769
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26742: LD_VAR 0 4
26746: PUSH
26747: LD_INT 1
26749: ARRAY
26750: PPUSH
26751: LD_VAR 0 4
26755: PUSH
26756: LD_INT 2
26758: ARRAY
26759: PPUSH
26760: LD_VAR 0 1
26764: PPUSH
26765: CALL_OW 456
// end ;
26769: GO 26682
26771: POP
26772: POP
// end ;
26773: LD_VAR 0 3
26777: RET
// export function Count ( array ) ; var i ; begin
26778: LD_INT 0
26780: PPUSH
26781: PPUSH
// result := 0 ;
26782: LD_ADDR_VAR 0 2
26786: PUSH
26787: LD_INT 0
26789: ST_TO_ADDR
// for i in array do
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_VAR 0 1
26799: PUSH
26800: FOR_IN
26801: IFFALSE 26825
// if i then
26803: LD_VAR 0 3
26807: IFFALSE 26823
// result := result + 1 ;
26809: LD_ADDR_VAR 0 2
26813: PUSH
26814: LD_VAR 0 2
26818: PUSH
26819: LD_INT 1
26821: PLUS
26822: ST_TO_ADDR
26823: GO 26800
26825: POP
26826: POP
// end ;
26827: LD_VAR 0 2
26831: RET
// export function IsEmpty ( building ) ; begin
26832: LD_INT 0
26834: PPUSH
// if not building then
26835: LD_VAR 0 1
26839: NOT
26840: IFFALSE 26844
// exit ;
26842: GO 26887
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26844: LD_ADDR_VAR 0 2
26848: PUSH
26849: LD_VAR 0 1
26853: PUSH
26854: LD_INT 22
26856: PUSH
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 255
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 58
26873: PUSH
26874: EMPTY
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PPUSH
26881: CALL_OW 69
26885: IN
26886: ST_TO_ADDR
// end ;
26887: LD_VAR 0 2
26891: RET
// export function IsNotFull ( building ) ; begin
26892: LD_INT 0
26894: PPUSH
// if not building then
26895: LD_VAR 0 1
26899: NOT
26900: IFFALSE 26904
// exit ;
26902: GO 26923
// result := UnitsInside ( building ) < 6 ;
26904: LD_ADDR_VAR 0 2
26908: PUSH
26909: LD_VAR 0 1
26913: PPUSH
26914: CALL_OW 313
26918: PUSH
26919: LD_INT 6
26921: LESS
26922: ST_TO_ADDR
// end ;
26923: LD_VAR 0 2
26927: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26928: LD_INT 0
26930: PPUSH
26931: PPUSH
26932: PPUSH
26933: PPUSH
// tmp := [ ] ;
26934: LD_ADDR_VAR 0 3
26938: PUSH
26939: EMPTY
26940: ST_TO_ADDR
// list := [ ] ;
26941: LD_ADDR_VAR 0 5
26945: PUSH
26946: EMPTY
26947: ST_TO_ADDR
// for i = 16 to 25 do
26948: LD_ADDR_VAR 0 4
26952: PUSH
26953: DOUBLE
26954: LD_INT 16
26956: DEC
26957: ST_TO_ADDR
26958: LD_INT 25
26960: PUSH
26961: FOR_TO
26962: IFFALSE 27035
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_VAR 0 3
26973: PUSH
26974: LD_INT 22
26976: PUSH
26977: LD_VAR 0 1
26981: PPUSH
26982: CALL_OW 255
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 91
26993: PUSH
26994: LD_VAR 0 1
26998: PUSH
26999: LD_INT 6
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 30
27009: PUSH
27010: LD_VAR 0 4
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: PUSH
27024: EMPTY
27025: LIST
27026: PPUSH
27027: CALL_OW 69
27031: ADD
27032: ST_TO_ADDR
27033: GO 26961
27035: POP
27036: POP
// for i = 1 to tmp do
27037: LD_ADDR_VAR 0 4
27041: PUSH
27042: DOUBLE
27043: LD_INT 1
27045: DEC
27046: ST_TO_ADDR
27047: LD_VAR 0 3
27051: PUSH
27052: FOR_TO
27053: IFFALSE 27141
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27055: LD_ADDR_VAR 0 5
27059: PUSH
27060: LD_VAR 0 5
27064: PUSH
27065: LD_VAR 0 3
27069: PUSH
27070: LD_VAR 0 4
27074: ARRAY
27075: PPUSH
27076: CALL_OW 266
27080: PUSH
27081: LD_VAR 0 3
27085: PUSH
27086: LD_VAR 0 4
27090: ARRAY
27091: PPUSH
27092: CALL_OW 250
27096: PUSH
27097: LD_VAR 0 3
27101: PUSH
27102: LD_VAR 0 4
27106: ARRAY
27107: PPUSH
27108: CALL_OW 251
27112: PUSH
27113: LD_VAR 0 3
27117: PUSH
27118: LD_VAR 0 4
27122: ARRAY
27123: PPUSH
27124: CALL_OW 254
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: ADD
27138: ST_TO_ADDR
27139: GO 27052
27141: POP
27142: POP
// result := list ;
27143: LD_ADDR_VAR 0 2
27147: PUSH
27148: LD_VAR 0 5
27152: ST_TO_ADDR
// end ;
27153: LD_VAR 0 2
27157: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27158: LD_INT 0
27160: PPUSH
27161: PPUSH
27162: PPUSH
27163: PPUSH
27164: PPUSH
27165: PPUSH
27166: PPUSH
// if not factory then
27167: LD_VAR 0 1
27171: NOT
27172: IFFALSE 27176
// exit ;
27174: GO 27769
// if control = control_apeman then
27176: LD_VAR 0 4
27180: PUSH
27181: LD_INT 5
27183: EQUAL
27184: IFFALSE 27293
// begin tmp := UnitsInside ( factory ) ;
27186: LD_ADDR_VAR 0 8
27190: PUSH
27191: LD_VAR 0 1
27195: PPUSH
27196: CALL_OW 313
27200: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27201: LD_VAR 0 8
27205: PPUSH
27206: LD_INT 25
27208: PUSH
27209: LD_INT 12
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PPUSH
27216: CALL_OW 72
27220: NOT
27221: IFFALSE 27231
// control := control_manual ;
27223: LD_ADDR_VAR 0 4
27227: PUSH
27228: LD_INT 1
27230: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27231: LD_ADDR_VAR 0 8
27235: PUSH
27236: LD_VAR 0 1
27240: PPUSH
27241: CALL 26928 0 1
27245: ST_TO_ADDR
// if tmp then
27246: LD_VAR 0 8
27250: IFFALSE 27293
// begin for i in tmp do
27252: LD_ADDR_VAR 0 7
27256: PUSH
27257: LD_VAR 0 8
27261: PUSH
27262: FOR_IN
27263: IFFALSE 27291
// if i [ 1 ] = b_ext_radio then
27265: LD_VAR 0 7
27269: PUSH
27270: LD_INT 1
27272: ARRAY
27273: PUSH
27274: LD_INT 22
27276: EQUAL
27277: IFFALSE 27289
// begin control := control_remote ;
27279: LD_ADDR_VAR 0 4
27283: PUSH
27284: LD_INT 2
27286: ST_TO_ADDR
// break ;
27287: GO 27291
// end ;
27289: GO 27262
27291: POP
27292: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_VAR 0 3
27307: PPUSH
27308: LD_VAR 0 4
27312: PPUSH
27313: LD_VAR 0 5
27317: PPUSH
27318: CALL_OW 448
27322: IFFALSE 27357
// begin result := [ chassis , engine , control , weapon ] ;
27324: LD_ADDR_VAR 0 6
27328: PUSH
27329: LD_VAR 0 2
27333: PUSH
27334: LD_VAR 0 3
27338: PUSH
27339: LD_VAR 0 4
27343: PUSH
27344: LD_VAR 0 5
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
// exit ;
27355: GO 27769
// end ; _chassis := AvailableChassisList ( factory ) ;
27357: LD_ADDR_VAR 0 9
27361: PUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: CALL_OW 475
27371: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27372: LD_ADDR_VAR 0 11
27376: PUSH
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL_OW 476
27386: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27387: LD_ADDR_VAR 0 12
27391: PUSH
27392: LD_VAR 0 1
27396: PPUSH
27397: CALL_OW 477
27401: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27402: LD_ADDR_VAR 0 10
27406: PUSH
27407: LD_VAR 0 1
27411: PPUSH
27412: CALL_OW 478
27416: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27417: LD_VAR 0 9
27421: NOT
27422: PUSH
27423: LD_VAR 0 11
27427: NOT
27428: OR
27429: PUSH
27430: LD_VAR 0 12
27434: NOT
27435: OR
27436: PUSH
27437: LD_VAR 0 10
27441: NOT
27442: OR
27443: IFFALSE 27478
// begin result := [ chassis , engine , control , weapon ] ;
27445: LD_ADDR_VAR 0 6
27449: PUSH
27450: LD_VAR 0 2
27454: PUSH
27455: LD_VAR 0 3
27459: PUSH
27460: LD_VAR 0 4
27464: PUSH
27465: LD_VAR 0 5
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: ST_TO_ADDR
// exit ;
27476: GO 27769
// end ; if not chassis in _chassis then
27478: LD_VAR 0 2
27482: PUSH
27483: LD_VAR 0 9
27487: IN
27488: NOT
27489: IFFALSE 27515
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27491: LD_ADDR_VAR 0 2
27495: PUSH
27496: LD_VAR 0 9
27500: PUSH
27501: LD_INT 1
27503: PPUSH
27504: LD_VAR 0 9
27508: PPUSH
27509: CALL_OW 12
27513: ARRAY
27514: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27515: LD_VAR 0 2
27519: PPUSH
27520: LD_VAR 0 3
27524: PPUSH
27525: CALL 27774 0 2
27529: NOT
27530: IFFALSE 27589
// repeat engine := _engine [ 1 ] ;
27532: LD_ADDR_VAR 0 3
27536: PUSH
27537: LD_VAR 0 11
27541: PUSH
27542: LD_INT 1
27544: ARRAY
27545: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27546: LD_ADDR_VAR 0 11
27550: PUSH
27551: LD_VAR 0 11
27555: PPUSH
27556: LD_INT 1
27558: PPUSH
27559: CALL_OW 3
27563: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27564: LD_VAR 0 2
27568: PPUSH
27569: LD_VAR 0 3
27573: PPUSH
27574: CALL 27774 0 2
27578: PUSH
27579: LD_VAR 0 11
27583: PUSH
27584: EMPTY
27585: EQUAL
27586: OR
27587: IFFALSE 27532
// if not control in _control then
27589: LD_VAR 0 4
27593: PUSH
27594: LD_VAR 0 12
27598: IN
27599: NOT
27600: IFFALSE 27626
// control := _control [ rand ( 1 , _control ) ] ;
27602: LD_ADDR_VAR 0 4
27606: PUSH
27607: LD_VAR 0 12
27611: PUSH
27612: LD_INT 1
27614: PPUSH
27615: LD_VAR 0 12
27619: PPUSH
27620: CALL_OW 12
27624: ARRAY
27625: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27626: LD_VAR 0 2
27630: PPUSH
27631: LD_VAR 0 5
27635: PPUSH
27636: CALL 27994 0 2
27640: NOT
27641: IFFALSE 27700
// repeat weapon := _weapon [ 1 ] ;
27643: LD_ADDR_VAR 0 5
27647: PUSH
27648: LD_VAR 0 10
27652: PUSH
27653: LD_INT 1
27655: ARRAY
27656: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27657: LD_ADDR_VAR 0 10
27661: PUSH
27662: LD_VAR 0 10
27666: PPUSH
27667: LD_INT 1
27669: PPUSH
27670: CALL_OW 3
27674: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27675: LD_VAR 0 2
27679: PPUSH
27680: LD_VAR 0 5
27684: PPUSH
27685: CALL 27994 0 2
27689: PUSH
27690: LD_VAR 0 10
27694: PUSH
27695: EMPTY
27696: EQUAL
27697: OR
27698: IFFALSE 27643
// result := [ ] ;
27700: LD_ADDR_VAR 0 6
27704: PUSH
27705: EMPTY
27706: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27707: LD_VAR 0 1
27711: PPUSH
27712: LD_VAR 0 2
27716: PPUSH
27717: LD_VAR 0 3
27721: PPUSH
27722: LD_VAR 0 4
27726: PPUSH
27727: LD_VAR 0 5
27731: PPUSH
27732: CALL_OW 448
27736: IFFALSE 27769
// result := [ chassis , engine , control , weapon ] ;
27738: LD_ADDR_VAR 0 6
27742: PUSH
27743: LD_VAR 0 2
27747: PUSH
27748: LD_VAR 0 3
27752: PUSH
27753: LD_VAR 0 4
27757: PUSH
27758: LD_VAR 0 5
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
// end ;
27769: LD_VAR 0 6
27773: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27774: LD_INT 0
27776: PPUSH
// if not chassis or not engine then
27777: LD_VAR 0 1
27781: NOT
27782: PUSH
27783: LD_VAR 0 2
27787: NOT
27788: OR
27789: IFFALSE 27793
// exit ;
27791: GO 27989
// case engine of engine_solar :
27793: LD_VAR 0 2
27797: PUSH
27798: LD_INT 2
27800: DOUBLE
27801: EQUAL
27802: IFTRUE 27806
27804: GO 27844
27806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27807: LD_ADDR_VAR 0 3
27811: PUSH
27812: LD_INT 11
27814: PUSH
27815: LD_INT 12
27817: PUSH
27818: LD_INT 13
27820: PUSH
27821: LD_INT 14
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 3
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
27842: GO 27973
27844: LD_INT 1
27846: DOUBLE
27847: EQUAL
27848: IFTRUE 27852
27850: GO 27914
27852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27853: LD_ADDR_VAR 0 3
27857: PUSH
27858: LD_INT 11
27860: PUSH
27861: LD_INT 12
27863: PUSH
27864: LD_INT 13
27866: PUSH
27867: LD_INT 14
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 3
27878: PUSH
27879: LD_INT 4
27881: PUSH
27882: LD_INT 5
27884: PUSH
27885: LD_INT 21
27887: PUSH
27888: LD_INT 23
27890: PUSH
27891: LD_INT 22
27893: PUSH
27894: LD_INT 24
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: ST_TO_ADDR
27912: GO 27973
27914: LD_INT 3
27916: DOUBLE
27917: EQUAL
27918: IFTRUE 27922
27920: GO 27972
27922: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27923: LD_ADDR_VAR 0 3
27927: PUSH
27928: LD_INT 13
27930: PUSH
27931: LD_INT 14
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: LD_INT 4
27942: PUSH
27943: LD_INT 5
27945: PUSH
27946: LD_INT 21
27948: PUSH
27949: LD_INT 22
27951: PUSH
27952: LD_INT 23
27954: PUSH
27955: LD_INT 24
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: ST_TO_ADDR
27970: GO 27973
27972: POP
// result := ( chassis in result ) ;
27973: LD_ADDR_VAR 0 3
27977: PUSH
27978: LD_VAR 0 1
27982: PUSH
27983: LD_VAR 0 3
27987: IN
27988: ST_TO_ADDR
// end ;
27989: LD_VAR 0 3
27993: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27994: LD_INT 0
27996: PPUSH
// if not chassis or not weapon then
27997: LD_VAR 0 1
28001: NOT
28002: PUSH
28003: LD_VAR 0 2
28007: NOT
28008: OR
28009: IFFALSE 28013
// exit ;
28011: GO 29075
// case weapon of us_machine_gun :
28013: LD_VAR 0 2
28017: PUSH
28018: LD_INT 2
28020: DOUBLE
28021: EQUAL
28022: IFTRUE 28026
28024: GO 28056
28026: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28027: LD_ADDR_VAR 0 3
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 3
28040: PUSH
28041: LD_INT 4
28043: PUSH
28044: LD_INT 5
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
28054: GO 29059
28056: LD_INT 3
28058: DOUBLE
28059: EQUAL
28060: IFTRUE 28064
28062: GO 28094
28064: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 3
28078: PUSH
28079: LD_INT 4
28081: PUSH
28082: LD_INT 5
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: ST_TO_ADDR
28092: GO 29059
28094: LD_INT 11
28096: DOUBLE
28097: EQUAL
28098: IFTRUE 28102
28100: GO 28132
28102: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: LD_INT 2
28113: PUSH
28114: LD_INT 3
28116: PUSH
28117: LD_INT 4
28119: PUSH
28120: LD_INT 5
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
28130: GO 29059
28132: LD_INT 4
28134: DOUBLE
28135: EQUAL
28136: IFTRUE 28140
28138: GO 28166
28140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28141: LD_ADDR_VAR 0 3
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: LD_INT 3
28151: PUSH
28152: LD_INT 4
28154: PUSH
28155: LD_INT 5
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: ST_TO_ADDR
28164: GO 29059
28166: LD_INT 5
28168: DOUBLE
28169: EQUAL
28170: IFTRUE 28174
28172: GO 28200
28174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28175: LD_ADDR_VAR 0 3
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: LD_INT 3
28185: PUSH
28186: LD_INT 4
28188: PUSH
28189: LD_INT 5
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: ST_TO_ADDR
28198: GO 29059
28200: LD_INT 9
28202: DOUBLE
28203: EQUAL
28204: IFTRUE 28208
28206: GO 28234
28208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28209: LD_ADDR_VAR 0 3
28213: PUSH
28214: LD_INT 2
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: LD_INT 4
28222: PUSH
28223: LD_INT 5
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: ST_TO_ADDR
28232: GO 29059
28234: LD_INT 7
28236: DOUBLE
28237: EQUAL
28238: IFTRUE 28242
28240: GO 28268
28242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28243: LD_ADDR_VAR 0 3
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: LD_INT 3
28253: PUSH
28254: LD_INT 4
28256: PUSH
28257: LD_INT 5
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: ST_TO_ADDR
28266: GO 29059
28268: LD_INT 12
28270: DOUBLE
28271: EQUAL
28272: IFTRUE 28276
28274: GO 28302
28276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28277: LD_ADDR_VAR 0 3
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: LD_INT 3
28287: PUSH
28288: LD_INT 4
28290: PUSH
28291: LD_INT 5
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: ST_TO_ADDR
28300: GO 29059
28302: LD_INT 13
28304: DOUBLE
28305: EQUAL
28306: IFTRUE 28310
28308: GO 28336
28310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28311: LD_ADDR_VAR 0 3
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: LD_INT 3
28321: PUSH
28322: LD_INT 4
28324: PUSH
28325: LD_INT 5
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: ST_TO_ADDR
28334: GO 29059
28336: LD_INT 14
28338: DOUBLE
28339: EQUAL
28340: IFTRUE 28344
28342: GO 28362
28344: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 4
28352: PUSH
28353: LD_INT 5
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: ST_TO_ADDR
28360: GO 29059
28362: LD_INT 6
28364: DOUBLE
28365: EQUAL
28366: IFTRUE 28370
28368: GO 28388
28370: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28371: LD_ADDR_VAR 0 3
28375: PUSH
28376: LD_INT 4
28378: PUSH
28379: LD_INT 5
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: ST_TO_ADDR
28386: GO 29059
28388: LD_INT 10
28390: DOUBLE
28391: EQUAL
28392: IFTRUE 28396
28394: GO 28414
28396: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28397: LD_ADDR_VAR 0 3
28401: PUSH
28402: LD_INT 4
28404: PUSH
28405: LD_INT 5
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: ST_TO_ADDR
28412: GO 29059
28414: LD_INT 22
28416: DOUBLE
28417: EQUAL
28418: IFTRUE 28422
28420: GO 28448
28422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28423: LD_ADDR_VAR 0 3
28427: PUSH
28428: LD_INT 11
28430: PUSH
28431: LD_INT 12
28433: PUSH
28434: LD_INT 13
28436: PUSH
28437: LD_INT 14
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: ST_TO_ADDR
28446: GO 29059
28448: LD_INT 23
28450: DOUBLE
28451: EQUAL
28452: IFTRUE 28456
28454: GO 28482
28456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28457: LD_ADDR_VAR 0 3
28461: PUSH
28462: LD_INT 11
28464: PUSH
28465: LD_INT 12
28467: PUSH
28468: LD_INT 13
28470: PUSH
28471: LD_INT 14
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: ST_TO_ADDR
28480: GO 29059
28482: LD_INT 24
28484: DOUBLE
28485: EQUAL
28486: IFTRUE 28490
28488: GO 28516
28490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28491: LD_ADDR_VAR 0 3
28495: PUSH
28496: LD_INT 11
28498: PUSH
28499: LD_INT 12
28501: PUSH
28502: LD_INT 13
28504: PUSH
28505: LD_INT 14
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: ST_TO_ADDR
28514: GO 29059
28516: LD_INT 30
28518: DOUBLE
28519: EQUAL
28520: IFTRUE 28524
28522: GO 28550
28524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28525: LD_ADDR_VAR 0 3
28529: PUSH
28530: LD_INT 11
28532: PUSH
28533: LD_INT 12
28535: PUSH
28536: LD_INT 13
28538: PUSH
28539: LD_INT 14
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: ST_TO_ADDR
28548: GO 29059
28550: LD_INT 25
28552: DOUBLE
28553: EQUAL
28554: IFTRUE 28558
28556: GO 28576
28558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_INT 13
28566: PUSH
28567: LD_INT 14
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: ST_TO_ADDR
28574: GO 29059
28576: LD_INT 27
28578: DOUBLE
28579: EQUAL
28580: IFTRUE 28584
28582: GO 28602
28584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28585: LD_ADDR_VAR 0 3
28589: PUSH
28590: LD_INT 13
28592: PUSH
28593: LD_INT 14
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: ST_TO_ADDR
28600: GO 29059
28602: LD_EXP 98
28606: DOUBLE
28607: EQUAL
28608: IFTRUE 28612
28610: GO 28638
28612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_INT 11
28620: PUSH
28621: LD_INT 12
28623: PUSH
28624: LD_INT 13
28626: PUSH
28627: LD_INT 14
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: ST_TO_ADDR
28636: GO 29059
28638: LD_INT 28
28640: DOUBLE
28641: EQUAL
28642: IFTRUE 28646
28644: GO 28664
28646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28647: LD_ADDR_VAR 0 3
28651: PUSH
28652: LD_INT 13
28654: PUSH
28655: LD_INT 14
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: ST_TO_ADDR
28662: GO 29059
28664: LD_INT 29
28666: DOUBLE
28667: EQUAL
28668: IFTRUE 28672
28670: GO 28690
28672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_INT 13
28680: PUSH
28681: LD_INT 14
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: ST_TO_ADDR
28688: GO 29059
28690: LD_INT 31
28692: DOUBLE
28693: EQUAL
28694: IFTRUE 28698
28696: GO 28716
28698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28699: LD_ADDR_VAR 0 3
28703: PUSH
28704: LD_INT 13
28706: PUSH
28707: LD_INT 14
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: ST_TO_ADDR
28714: GO 29059
28716: LD_INT 26
28718: DOUBLE
28719: EQUAL
28720: IFTRUE 28724
28722: GO 28742
28724: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28725: LD_ADDR_VAR 0 3
28729: PUSH
28730: LD_INT 13
28732: PUSH
28733: LD_INT 14
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: ST_TO_ADDR
28740: GO 29059
28742: LD_INT 42
28744: DOUBLE
28745: EQUAL
28746: IFTRUE 28750
28748: GO 28776
28750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28751: LD_ADDR_VAR 0 3
28755: PUSH
28756: LD_INT 21
28758: PUSH
28759: LD_INT 22
28761: PUSH
28762: LD_INT 23
28764: PUSH
28765: LD_INT 24
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: ST_TO_ADDR
28774: GO 29059
28776: LD_INT 43
28778: DOUBLE
28779: EQUAL
28780: IFTRUE 28784
28782: GO 28810
28784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28785: LD_ADDR_VAR 0 3
28789: PUSH
28790: LD_INT 21
28792: PUSH
28793: LD_INT 22
28795: PUSH
28796: LD_INT 23
28798: PUSH
28799: LD_INT 24
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: ST_TO_ADDR
28808: GO 29059
28810: LD_INT 44
28812: DOUBLE
28813: EQUAL
28814: IFTRUE 28818
28816: GO 28844
28818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28819: LD_ADDR_VAR 0 3
28823: PUSH
28824: LD_INT 21
28826: PUSH
28827: LD_INT 22
28829: PUSH
28830: LD_INT 23
28832: PUSH
28833: LD_INT 24
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
28842: GO 29059
28844: LD_INT 45
28846: DOUBLE
28847: EQUAL
28848: IFTRUE 28852
28850: GO 28878
28852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28853: LD_ADDR_VAR 0 3
28857: PUSH
28858: LD_INT 21
28860: PUSH
28861: LD_INT 22
28863: PUSH
28864: LD_INT 23
28866: PUSH
28867: LD_INT 24
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: ST_TO_ADDR
28876: GO 29059
28878: LD_INT 49
28880: DOUBLE
28881: EQUAL
28882: IFTRUE 28886
28884: GO 28912
28886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28887: LD_ADDR_VAR 0 3
28891: PUSH
28892: LD_INT 21
28894: PUSH
28895: LD_INT 22
28897: PUSH
28898: LD_INT 23
28900: PUSH
28901: LD_INT 24
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: ST_TO_ADDR
28910: GO 29059
28912: LD_INT 51
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 28946
28920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28921: LD_ADDR_VAR 0 3
28925: PUSH
28926: LD_INT 21
28928: PUSH
28929: LD_INT 22
28931: PUSH
28932: LD_INT 23
28934: PUSH
28935: LD_INT 24
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
28944: GO 29059
28946: LD_INT 52
28948: DOUBLE
28949: EQUAL
28950: IFTRUE 28954
28952: GO 28980
28954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28955: LD_ADDR_VAR 0 3
28959: PUSH
28960: LD_INT 21
28962: PUSH
28963: LD_INT 22
28965: PUSH
28966: LD_INT 23
28968: PUSH
28969: LD_INT 24
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: ST_TO_ADDR
28978: GO 29059
28980: LD_INT 53
28982: DOUBLE
28983: EQUAL
28984: IFTRUE 28988
28986: GO 29006
28988: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28989: LD_ADDR_VAR 0 3
28993: PUSH
28994: LD_INT 23
28996: PUSH
28997: LD_INT 24
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: ST_TO_ADDR
29004: GO 29059
29006: LD_INT 46
29008: DOUBLE
29009: EQUAL
29010: IFTRUE 29014
29012: GO 29032
29014: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29015: LD_ADDR_VAR 0 3
29019: PUSH
29020: LD_INT 23
29022: PUSH
29023: LD_INT 24
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: ST_TO_ADDR
29030: GO 29059
29032: LD_INT 47
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29058
29040: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 23
29048: PUSH
29049: LD_INT 24
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: ST_TO_ADDR
29056: GO 29059
29058: POP
// result := ( chassis in result ) ;
29059: LD_ADDR_VAR 0 3
29063: PUSH
29064: LD_VAR 0 1
29068: PUSH
29069: LD_VAR 0 3
29073: IN
29074: ST_TO_ADDR
// end ;
29075: LD_VAR 0 3
29079: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29080: LD_INT 0
29082: PPUSH
29083: PPUSH
29084: PPUSH
29085: PPUSH
29086: PPUSH
29087: PPUSH
29088: PPUSH
// result := array ;
29089: LD_ADDR_VAR 0 5
29093: PUSH
29094: LD_VAR 0 1
29098: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29099: LD_VAR 0 1
29103: NOT
29104: PUSH
29105: LD_VAR 0 2
29109: NOT
29110: OR
29111: PUSH
29112: LD_VAR 0 3
29116: NOT
29117: OR
29118: PUSH
29119: LD_VAR 0 2
29123: PUSH
29124: LD_VAR 0 1
29128: GREATER
29129: OR
29130: PUSH
29131: LD_VAR 0 3
29135: PUSH
29136: LD_VAR 0 1
29140: GREATER
29141: OR
29142: IFFALSE 29146
// exit ;
29144: GO 29442
// if direction then
29146: LD_VAR 0 4
29150: IFFALSE 29214
// begin d := 1 ;
29152: LD_ADDR_VAR 0 9
29156: PUSH
29157: LD_INT 1
29159: ST_TO_ADDR
// if i_from > i_to then
29160: LD_VAR 0 2
29164: PUSH
29165: LD_VAR 0 3
29169: GREATER
29170: IFFALSE 29196
// length := ( array - i_from ) + i_to else
29172: LD_ADDR_VAR 0 11
29176: PUSH
29177: LD_VAR 0 1
29181: PUSH
29182: LD_VAR 0 2
29186: MINUS
29187: PUSH
29188: LD_VAR 0 3
29192: PLUS
29193: ST_TO_ADDR
29194: GO 29212
// length := i_to - i_from ;
29196: LD_ADDR_VAR 0 11
29200: PUSH
29201: LD_VAR 0 3
29205: PUSH
29206: LD_VAR 0 2
29210: MINUS
29211: ST_TO_ADDR
// end else
29212: GO 29275
// begin d := - 1 ;
29214: LD_ADDR_VAR 0 9
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: ST_TO_ADDR
// if i_from > i_to then
29223: LD_VAR 0 2
29227: PUSH
29228: LD_VAR 0 3
29232: GREATER
29233: IFFALSE 29253
// length := i_from - i_to else
29235: LD_ADDR_VAR 0 11
29239: PUSH
29240: LD_VAR 0 2
29244: PUSH
29245: LD_VAR 0 3
29249: MINUS
29250: ST_TO_ADDR
29251: GO 29275
// length := ( array - i_to ) + i_from ;
29253: LD_ADDR_VAR 0 11
29257: PUSH
29258: LD_VAR 0 1
29262: PUSH
29263: LD_VAR 0 3
29267: MINUS
29268: PUSH
29269: LD_VAR 0 2
29273: PLUS
29274: ST_TO_ADDR
// end ; if not length then
29275: LD_VAR 0 11
29279: NOT
29280: IFFALSE 29284
// exit ;
29282: GO 29442
// tmp := array ;
29284: LD_ADDR_VAR 0 10
29288: PUSH
29289: LD_VAR 0 1
29293: ST_TO_ADDR
// for i = 1 to length do
29294: LD_ADDR_VAR 0 6
29298: PUSH
29299: DOUBLE
29300: LD_INT 1
29302: DEC
29303: ST_TO_ADDR
29304: LD_VAR 0 11
29308: PUSH
29309: FOR_TO
29310: IFFALSE 29430
// begin for j = 1 to array do
29312: LD_ADDR_VAR 0 7
29316: PUSH
29317: DOUBLE
29318: LD_INT 1
29320: DEC
29321: ST_TO_ADDR
29322: LD_VAR 0 1
29326: PUSH
29327: FOR_TO
29328: IFFALSE 29416
// begin k := j + d ;
29330: LD_ADDR_VAR 0 8
29334: PUSH
29335: LD_VAR 0 7
29339: PUSH
29340: LD_VAR 0 9
29344: PLUS
29345: ST_TO_ADDR
// if k > array then
29346: LD_VAR 0 8
29350: PUSH
29351: LD_VAR 0 1
29355: GREATER
29356: IFFALSE 29366
// k := 1 ;
29358: LD_ADDR_VAR 0 8
29362: PUSH
29363: LD_INT 1
29365: ST_TO_ADDR
// if not k then
29366: LD_VAR 0 8
29370: NOT
29371: IFFALSE 29383
// k := array ;
29373: LD_ADDR_VAR 0 8
29377: PUSH
29378: LD_VAR 0 1
29382: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29383: LD_ADDR_VAR 0 10
29387: PUSH
29388: LD_VAR 0 10
29392: PPUSH
29393: LD_VAR 0 8
29397: PPUSH
29398: LD_VAR 0 1
29402: PUSH
29403: LD_VAR 0 7
29407: ARRAY
29408: PPUSH
29409: CALL_OW 1
29413: ST_TO_ADDR
// end ;
29414: GO 29327
29416: POP
29417: POP
// array := tmp ;
29418: LD_ADDR_VAR 0 1
29422: PUSH
29423: LD_VAR 0 10
29427: ST_TO_ADDR
// end ;
29428: GO 29309
29430: POP
29431: POP
// result := array ;
29432: LD_ADDR_VAR 0 5
29436: PUSH
29437: LD_VAR 0 1
29441: ST_TO_ADDR
// end ;
29442: LD_VAR 0 5
29446: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29447: LD_INT 0
29449: PPUSH
29450: PPUSH
// result := 0 ;
29451: LD_ADDR_VAR 0 3
29455: PUSH
29456: LD_INT 0
29458: ST_TO_ADDR
// if not array or not value in array then
29459: LD_VAR 0 1
29463: NOT
29464: PUSH
29465: LD_VAR 0 2
29469: PUSH
29470: LD_VAR 0 1
29474: IN
29475: NOT
29476: OR
29477: IFFALSE 29481
// exit ;
29479: GO 29535
// for i = 1 to array do
29481: LD_ADDR_VAR 0 4
29485: PUSH
29486: DOUBLE
29487: LD_INT 1
29489: DEC
29490: ST_TO_ADDR
29491: LD_VAR 0 1
29495: PUSH
29496: FOR_TO
29497: IFFALSE 29533
// if value = array [ i ] then
29499: LD_VAR 0 2
29503: PUSH
29504: LD_VAR 0 1
29508: PUSH
29509: LD_VAR 0 4
29513: ARRAY
29514: EQUAL
29515: IFFALSE 29531
// begin result := i ;
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: LD_VAR 0 4
29526: ST_TO_ADDR
// exit ;
29527: POP
29528: POP
29529: GO 29535
// end ;
29531: GO 29496
29533: POP
29534: POP
// end ;
29535: LD_VAR 0 3
29539: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29540: LD_INT 0
29542: PPUSH
// vc_chassis := chassis ;
29543: LD_ADDR_OWVAR 37
29547: PUSH
29548: LD_VAR 0 1
29552: ST_TO_ADDR
// vc_engine := engine ;
29553: LD_ADDR_OWVAR 39
29557: PUSH
29558: LD_VAR 0 2
29562: ST_TO_ADDR
// vc_control := control ;
29563: LD_ADDR_OWVAR 38
29567: PUSH
29568: LD_VAR 0 3
29572: ST_TO_ADDR
// vc_weapon := weapon ;
29573: LD_ADDR_OWVAR 40
29577: PUSH
29578: LD_VAR 0 4
29582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29583: LD_ADDR_OWVAR 41
29587: PUSH
29588: LD_VAR 0 5
29592: ST_TO_ADDR
// end ;
29593: LD_VAR 0 6
29597: RET
// export function WantPlant ( unit ) ; var task ; begin
29598: LD_INT 0
29600: PPUSH
29601: PPUSH
// result := false ;
29602: LD_ADDR_VAR 0 2
29606: PUSH
29607: LD_INT 0
29609: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29610: LD_ADDR_VAR 0 3
29614: PUSH
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 437
29624: ST_TO_ADDR
// if task then
29625: LD_VAR 0 3
29629: IFFALSE 29657
// if task [ 1 ] [ 1 ] = p then
29631: LD_VAR 0 3
29635: PUSH
29636: LD_INT 1
29638: ARRAY
29639: PUSH
29640: LD_INT 1
29642: ARRAY
29643: PUSH
29644: LD_STRING p
29646: EQUAL
29647: IFFALSE 29657
// result := true ;
29649: LD_ADDR_VAR 0 2
29653: PUSH
29654: LD_INT 1
29656: ST_TO_ADDR
// end ;
29657: LD_VAR 0 2
29661: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29662: LD_INT 0
29664: PPUSH
29665: PPUSH
29666: PPUSH
29667: PPUSH
// if pos < 1 then
29668: LD_VAR 0 2
29672: PUSH
29673: LD_INT 1
29675: LESS
29676: IFFALSE 29680
// exit ;
29678: GO 29983
// if pos = 1 then
29680: LD_VAR 0 2
29684: PUSH
29685: LD_INT 1
29687: EQUAL
29688: IFFALSE 29721
// result := Replace ( arr , pos [ 1 ] , value ) else
29690: LD_ADDR_VAR 0 4
29694: PUSH
29695: LD_VAR 0 1
29699: PPUSH
29700: LD_VAR 0 2
29704: PUSH
29705: LD_INT 1
29707: ARRAY
29708: PPUSH
29709: LD_VAR 0 3
29713: PPUSH
29714: CALL_OW 1
29718: ST_TO_ADDR
29719: GO 29983
// begin tmp := arr ;
29721: LD_ADDR_VAR 0 6
29725: PUSH
29726: LD_VAR 0 1
29730: ST_TO_ADDR
// s_arr := [ tmp ] ;
29731: LD_ADDR_VAR 0 7
29735: PUSH
29736: LD_VAR 0 6
29740: PUSH
29741: EMPTY
29742: LIST
29743: ST_TO_ADDR
// for i = 1 to pos - 1 do
29744: LD_ADDR_VAR 0 5
29748: PUSH
29749: DOUBLE
29750: LD_INT 1
29752: DEC
29753: ST_TO_ADDR
29754: LD_VAR 0 2
29758: PUSH
29759: LD_INT 1
29761: MINUS
29762: PUSH
29763: FOR_TO
29764: IFFALSE 29809
// begin tmp := tmp [ pos [ i ] ] ;
29766: LD_ADDR_VAR 0 6
29770: PUSH
29771: LD_VAR 0 6
29775: PUSH
29776: LD_VAR 0 2
29780: PUSH
29781: LD_VAR 0 5
29785: ARRAY
29786: ARRAY
29787: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29788: LD_ADDR_VAR 0 7
29792: PUSH
29793: LD_VAR 0 7
29797: PUSH
29798: LD_VAR 0 6
29802: PUSH
29803: EMPTY
29804: LIST
29805: ADD
29806: ST_TO_ADDR
// end ;
29807: GO 29763
29809: POP
29810: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29811: LD_ADDR_VAR 0 6
29815: PUSH
29816: LD_VAR 0 6
29820: PPUSH
29821: LD_VAR 0 2
29825: PUSH
29826: LD_VAR 0 2
29830: ARRAY
29831: PPUSH
29832: LD_VAR 0 3
29836: PPUSH
29837: CALL_OW 1
29841: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29842: LD_ADDR_VAR 0 7
29846: PUSH
29847: LD_VAR 0 7
29851: PPUSH
29852: LD_VAR 0 7
29856: PPUSH
29857: LD_VAR 0 6
29861: PPUSH
29862: CALL_OW 1
29866: ST_TO_ADDR
// for i = s_arr downto 2 do
29867: LD_ADDR_VAR 0 5
29871: PUSH
29872: DOUBLE
29873: LD_VAR 0 7
29877: INC
29878: ST_TO_ADDR
29879: LD_INT 2
29881: PUSH
29882: FOR_DOWNTO
29883: IFFALSE 29967
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29885: LD_ADDR_VAR 0 6
29889: PUSH
29890: LD_VAR 0 7
29894: PUSH
29895: LD_VAR 0 5
29899: PUSH
29900: LD_INT 1
29902: MINUS
29903: ARRAY
29904: PPUSH
29905: LD_VAR 0 2
29909: PUSH
29910: LD_VAR 0 5
29914: PUSH
29915: LD_INT 1
29917: MINUS
29918: ARRAY
29919: PPUSH
29920: LD_VAR 0 7
29924: PUSH
29925: LD_VAR 0 5
29929: ARRAY
29930: PPUSH
29931: CALL_OW 1
29935: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29936: LD_ADDR_VAR 0 7
29940: PUSH
29941: LD_VAR 0 7
29945: PPUSH
29946: LD_VAR 0 5
29950: PUSH
29951: LD_INT 1
29953: MINUS
29954: PPUSH
29955: LD_VAR 0 6
29959: PPUSH
29960: CALL_OW 1
29964: ST_TO_ADDR
// end ;
29965: GO 29882
29967: POP
29968: POP
// result := s_arr [ 1 ] ;
29969: LD_ADDR_VAR 0 4
29973: PUSH
29974: LD_VAR 0 7
29978: PUSH
29979: LD_INT 1
29981: ARRAY
29982: ST_TO_ADDR
// end ; end ;
29983: LD_VAR 0 4
29987: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29988: LD_INT 0
29990: PPUSH
29991: PPUSH
// if not list then
29992: LD_VAR 0 1
29996: NOT
29997: IFFALSE 30001
// exit ;
29999: GO 30092
// i := list [ pos1 ] ;
30001: LD_ADDR_VAR 0 5
30005: PUSH
30006: LD_VAR 0 1
30010: PUSH
30011: LD_VAR 0 2
30015: ARRAY
30016: ST_TO_ADDR
// if not i then
30017: LD_VAR 0 5
30021: NOT
30022: IFFALSE 30026
// exit ;
30024: GO 30092
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30026: LD_ADDR_VAR 0 1
30030: PUSH
30031: LD_VAR 0 1
30035: PPUSH
30036: LD_VAR 0 2
30040: PPUSH
30041: LD_VAR 0 1
30045: PUSH
30046: LD_VAR 0 3
30050: ARRAY
30051: PPUSH
30052: CALL_OW 1
30056: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30057: LD_ADDR_VAR 0 1
30061: PUSH
30062: LD_VAR 0 1
30066: PPUSH
30067: LD_VAR 0 3
30071: PPUSH
30072: LD_VAR 0 5
30076: PPUSH
30077: CALL_OW 1
30081: ST_TO_ADDR
// result := list ;
30082: LD_ADDR_VAR 0 4
30086: PUSH
30087: LD_VAR 0 1
30091: ST_TO_ADDR
// end ;
30092: LD_VAR 0 4
30096: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30097: LD_INT 0
30099: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30100: LD_ADDR_VAR 0 5
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 250
30114: PPUSH
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL_OW 251
30124: PPUSH
30125: LD_VAR 0 2
30129: PPUSH
30130: LD_VAR 0 3
30134: PPUSH
30135: LD_VAR 0 4
30139: PPUSH
30140: CALL 30150 0 5
30144: ST_TO_ADDR
// end ;
30145: LD_VAR 0 5
30149: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30150: LD_INT 0
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
// if not list then
30156: LD_VAR 0 3
30160: NOT
30161: IFFALSE 30165
// exit ;
30163: GO 30553
// result := [ ] ;
30165: LD_ADDR_VAR 0 6
30169: PUSH
30170: EMPTY
30171: ST_TO_ADDR
// for i in list do
30172: LD_ADDR_VAR 0 7
30176: PUSH
30177: LD_VAR 0 3
30181: PUSH
30182: FOR_IN
30183: IFFALSE 30385
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30185: LD_ADDR_VAR 0 9
30189: PUSH
30190: LD_VAR 0 7
30194: PPUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: LD_VAR 0 2
30204: PPUSH
30205: CALL_OW 297
30209: ST_TO_ADDR
// if not result then
30210: LD_VAR 0 6
30214: NOT
30215: IFFALSE 30241
// result := [ [ i , tmp ] ] else
30217: LD_ADDR_VAR 0 6
30221: PUSH
30222: LD_VAR 0 7
30226: PUSH
30227: LD_VAR 0 9
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: EMPTY
30237: LIST
30238: ST_TO_ADDR
30239: GO 30383
// begin if result [ result ] [ 2 ] < tmp then
30241: LD_VAR 0 6
30245: PUSH
30246: LD_VAR 0 6
30250: ARRAY
30251: PUSH
30252: LD_INT 2
30254: ARRAY
30255: PUSH
30256: LD_VAR 0 9
30260: LESS
30261: IFFALSE 30303
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30263: LD_ADDR_VAR 0 6
30267: PUSH
30268: LD_VAR 0 6
30272: PPUSH
30273: LD_VAR 0 6
30277: PUSH
30278: LD_INT 1
30280: PLUS
30281: PPUSH
30282: LD_VAR 0 7
30286: PUSH
30287: LD_VAR 0 9
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PPUSH
30296: CALL_OW 2
30300: ST_TO_ADDR
30301: GO 30383
// for j = 1 to result do
30303: LD_ADDR_VAR 0 8
30307: PUSH
30308: DOUBLE
30309: LD_INT 1
30311: DEC
30312: ST_TO_ADDR
30313: LD_VAR 0 6
30317: PUSH
30318: FOR_TO
30319: IFFALSE 30381
// begin if tmp < result [ j ] [ 2 ] then
30321: LD_VAR 0 9
30325: PUSH
30326: LD_VAR 0 6
30330: PUSH
30331: LD_VAR 0 8
30335: ARRAY
30336: PUSH
30337: LD_INT 2
30339: ARRAY
30340: LESS
30341: IFFALSE 30379
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30343: LD_ADDR_VAR 0 6
30347: PUSH
30348: LD_VAR 0 6
30352: PPUSH
30353: LD_VAR 0 8
30357: PPUSH
30358: LD_VAR 0 7
30362: PUSH
30363: LD_VAR 0 9
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PPUSH
30372: CALL_OW 2
30376: ST_TO_ADDR
// break ;
30377: GO 30381
// end ; end ;
30379: GO 30318
30381: POP
30382: POP
// end ; end ;
30383: GO 30182
30385: POP
30386: POP
// if result and not asc then
30387: LD_VAR 0 6
30391: PUSH
30392: LD_VAR 0 4
30396: NOT
30397: AND
30398: IFFALSE 30473
// begin tmp := result ;
30400: LD_ADDR_VAR 0 9
30404: PUSH
30405: LD_VAR 0 6
30409: ST_TO_ADDR
// for i = tmp downto 1 do
30410: LD_ADDR_VAR 0 7
30414: PUSH
30415: DOUBLE
30416: LD_VAR 0 9
30420: INC
30421: ST_TO_ADDR
30422: LD_INT 1
30424: PUSH
30425: FOR_DOWNTO
30426: IFFALSE 30471
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30428: LD_ADDR_VAR 0 6
30432: PUSH
30433: LD_VAR 0 6
30437: PPUSH
30438: LD_VAR 0 9
30442: PUSH
30443: LD_VAR 0 7
30447: MINUS
30448: PUSH
30449: LD_INT 1
30451: PLUS
30452: PPUSH
30453: LD_VAR 0 9
30457: PUSH
30458: LD_VAR 0 7
30462: ARRAY
30463: PPUSH
30464: CALL_OW 1
30468: ST_TO_ADDR
30469: GO 30425
30471: POP
30472: POP
// end ; tmp := [ ] ;
30473: LD_ADDR_VAR 0 9
30477: PUSH
30478: EMPTY
30479: ST_TO_ADDR
// if mode then
30480: LD_VAR 0 5
30484: IFFALSE 30553
// begin for i = 1 to result do
30486: LD_ADDR_VAR 0 7
30490: PUSH
30491: DOUBLE
30492: LD_INT 1
30494: DEC
30495: ST_TO_ADDR
30496: LD_VAR 0 6
30500: PUSH
30501: FOR_TO
30502: IFFALSE 30541
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30504: LD_ADDR_VAR 0 9
30508: PUSH
30509: LD_VAR 0 9
30513: PPUSH
30514: LD_VAR 0 7
30518: PPUSH
30519: LD_VAR 0 6
30523: PUSH
30524: LD_VAR 0 7
30528: ARRAY
30529: PUSH
30530: LD_INT 1
30532: ARRAY
30533: PPUSH
30534: CALL_OW 1
30538: ST_TO_ADDR
30539: GO 30501
30541: POP
30542: POP
// result := tmp ;
30543: LD_ADDR_VAR 0 6
30547: PUSH
30548: LD_VAR 0 9
30552: ST_TO_ADDR
// end ; end ;
30553: LD_VAR 0 6
30557: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30558: LD_INT 0
30560: PPUSH
30561: PPUSH
30562: PPUSH
30563: PPUSH
30564: PPUSH
30565: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30566: LD_ADDR_VAR 0 5
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: ST_TO_ADDR
// if not x or not y then
30588: LD_VAR 0 2
30592: NOT
30593: PUSH
30594: LD_VAR 0 3
30598: NOT
30599: OR
30600: IFFALSE 30604
// exit ;
30602: GO 32256
// if not range then
30604: LD_VAR 0 4
30608: NOT
30609: IFFALSE 30619
// range := 10 ;
30611: LD_ADDR_VAR 0 4
30615: PUSH
30616: LD_INT 10
30618: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30619: LD_ADDR_VAR 0 8
30623: PUSH
30624: LD_INT 81
30626: PUSH
30627: LD_VAR 0 1
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 92
30638: PUSH
30639: LD_VAR 0 2
30643: PUSH
30644: LD_VAR 0 3
30648: PUSH
30649: LD_VAR 0 4
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: LD_INT 21
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: PPUSH
30682: CALL_OW 69
30686: ST_TO_ADDR
// if not tmp then
30687: LD_VAR 0 8
30691: NOT
30692: IFFALSE 30696
// exit ;
30694: GO 32256
// for i in tmp do
30696: LD_ADDR_VAR 0 6
30700: PUSH
30701: LD_VAR 0 8
30705: PUSH
30706: FOR_IN
30707: IFFALSE 32231
// begin points := [ 0 , 0 , 0 ] ;
30709: LD_ADDR_VAR 0 9
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: LD_INT 0
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: ST_TO_ADDR
// bpoints := 1 ;
30728: LD_ADDR_VAR 0 10
30732: PUSH
30733: LD_INT 1
30735: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30736: LD_VAR 0 6
30740: PPUSH
30741: CALL_OW 247
30745: PUSH
30746: LD_INT 1
30748: DOUBLE
30749: EQUAL
30750: IFTRUE 30754
30752: GO 31332
30754: POP
// begin if GetClass ( i ) = 1 then
30755: LD_VAR 0 6
30759: PPUSH
30760: CALL_OW 257
30764: PUSH
30765: LD_INT 1
30767: EQUAL
30768: IFFALSE 30789
// points := [ 10 , 5 , 3 ] ;
30770: LD_ADDR_VAR 0 9
30774: PUSH
30775: LD_INT 10
30777: PUSH
30778: LD_INT 5
30780: PUSH
30781: LD_INT 3
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30789: LD_VAR 0 6
30793: PPUSH
30794: CALL_OW 257
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: LD_INT 4
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: IN
30813: IFFALSE 30834
// points := [ 3 , 2 , 1 ] ;
30815: LD_ADDR_VAR 0 9
30819: PUSH
30820: LD_INT 3
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30834: LD_VAR 0 6
30838: PPUSH
30839: CALL_OW 257
30843: PUSH
30844: LD_INT 5
30846: EQUAL
30847: IFFALSE 30868
// points := [ 130 , 5 , 2 ] ;
30849: LD_ADDR_VAR 0 9
30853: PUSH
30854: LD_INT 130
30856: PUSH
30857: LD_INT 5
30859: PUSH
30860: LD_INT 2
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30868: LD_VAR 0 6
30872: PPUSH
30873: CALL_OW 257
30877: PUSH
30878: LD_INT 8
30880: EQUAL
30881: IFFALSE 30902
// points := [ 35 , 35 , 30 ] ;
30883: LD_ADDR_VAR 0 9
30887: PUSH
30888: LD_INT 35
30890: PUSH
30891: LD_INT 35
30893: PUSH
30894: LD_INT 30
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30902: LD_VAR 0 6
30906: PPUSH
30907: CALL_OW 257
30911: PUSH
30912: LD_INT 9
30914: EQUAL
30915: IFFALSE 30936
// points := [ 20 , 55 , 40 ] ;
30917: LD_ADDR_VAR 0 9
30921: PUSH
30922: LD_INT 20
30924: PUSH
30925: LD_INT 55
30927: PUSH
30928: LD_INT 40
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30936: LD_VAR 0 6
30940: PPUSH
30941: CALL_OW 257
30945: PUSH
30946: LD_INT 12
30948: PUSH
30949: LD_INT 16
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: IN
30956: IFFALSE 30977
// points := [ 5 , 3 , 2 ] ;
30958: LD_ADDR_VAR 0 9
30962: PUSH
30963: LD_INT 5
30965: PUSH
30966: LD_INT 3
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30977: LD_VAR 0 6
30981: PPUSH
30982: CALL_OW 257
30986: PUSH
30987: LD_INT 17
30989: EQUAL
30990: IFFALSE 31011
// points := [ 100 , 50 , 75 ] ;
30992: LD_ADDR_VAR 0 9
30996: PUSH
30997: LD_INT 100
30999: PUSH
31000: LD_INT 50
31002: PUSH
31003: LD_INT 75
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31011: LD_VAR 0 6
31015: PPUSH
31016: CALL_OW 257
31020: PUSH
31021: LD_INT 15
31023: EQUAL
31024: IFFALSE 31045
// points := [ 10 , 5 , 3 ] ;
31026: LD_ADDR_VAR 0 9
31030: PUSH
31031: LD_INT 10
31033: PUSH
31034: LD_INT 5
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31045: LD_VAR 0 6
31049: PPUSH
31050: CALL_OW 257
31054: PUSH
31055: LD_INT 14
31057: EQUAL
31058: IFFALSE 31079
// points := [ 10 , 0 , 0 ] ;
31060: LD_ADDR_VAR 0 9
31064: PUSH
31065: LD_INT 10
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31079: LD_VAR 0 6
31083: PPUSH
31084: CALL_OW 257
31088: PUSH
31089: LD_INT 11
31091: EQUAL
31092: IFFALSE 31113
// points := [ 30 , 10 , 5 ] ;
31094: LD_ADDR_VAR 0 9
31098: PUSH
31099: LD_INT 30
31101: PUSH
31102: LD_INT 10
31104: PUSH
31105: LD_INT 5
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31113: LD_VAR 0 1
31117: PPUSH
31118: LD_INT 5
31120: PPUSH
31121: CALL_OW 321
31125: PUSH
31126: LD_INT 2
31128: EQUAL
31129: IFFALSE 31146
// bpoints := bpoints * 1.8 ;
31131: LD_ADDR_VAR 0 10
31135: PUSH
31136: LD_VAR 0 10
31140: PUSH
31141: LD_REAL  1.80000000000000E+0000
31144: MUL
31145: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31146: LD_VAR 0 6
31150: PPUSH
31151: CALL_OW 257
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: LD_INT 4
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: IN
31174: PUSH
31175: LD_VAR 0 1
31179: PPUSH
31180: LD_INT 51
31182: PPUSH
31183: CALL_OW 321
31187: PUSH
31188: LD_INT 2
31190: EQUAL
31191: AND
31192: IFFALSE 31209
// bpoints := bpoints * 1.2 ;
31194: LD_ADDR_VAR 0 10
31198: PUSH
31199: LD_VAR 0 10
31203: PUSH
31204: LD_REAL  1.20000000000000E+0000
31207: MUL
31208: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31209: LD_VAR 0 6
31213: PPUSH
31214: CALL_OW 257
31218: PUSH
31219: LD_INT 5
31221: PUSH
31222: LD_INT 7
31224: PUSH
31225: LD_INT 9
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: IN
31233: PUSH
31234: LD_VAR 0 1
31238: PPUSH
31239: LD_INT 52
31241: PPUSH
31242: CALL_OW 321
31246: PUSH
31247: LD_INT 2
31249: EQUAL
31250: AND
31251: IFFALSE 31268
// bpoints := bpoints * 1.5 ;
31253: LD_ADDR_VAR 0 10
31257: PUSH
31258: LD_VAR 0 10
31262: PUSH
31263: LD_REAL  1.50000000000000E+0000
31266: MUL
31267: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31268: LD_VAR 0 1
31272: PPUSH
31273: LD_INT 66
31275: PPUSH
31276: CALL_OW 321
31280: PUSH
31281: LD_INT 2
31283: EQUAL
31284: IFFALSE 31301
// bpoints := bpoints * 1.1 ;
31286: LD_ADDR_VAR 0 10
31290: PUSH
31291: LD_VAR 0 10
31295: PUSH
31296: LD_REAL  1.10000000000000E+0000
31299: MUL
31300: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31301: LD_ADDR_VAR 0 10
31305: PUSH
31306: LD_VAR 0 10
31310: PUSH
31311: LD_VAR 0 6
31315: PPUSH
31316: LD_INT 1
31318: PPUSH
31319: CALL_OW 259
31323: PUSH
31324: LD_REAL  1.15000000000000E+0000
31327: MUL
31328: MUL
31329: ST_TO_ADDR
// end ; unit_vehicle :
31330: GO 32160
31332: LD_INT 2
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31340
31338: GO 32148
31340: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31341: LD_VAR 0 6
31345: PPUSH
31346: CALL_OW 264
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: LD_INT 42
31356: PUSH
31357: LD_INT 24
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: IN
31365: IFFALSE 31386
// points := [ 25 , 5 , 3 ] ;
31367: LD_ADDR_VAR 0 9
31371: PUSH
31372: LD_INT 25
31374: PUSH
31375: LD_INT 5
31377: PUSH
31378: LD_INT 3
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31386: LD_VAR 0 6
31390: PPUSH
31391: CALL_OW 264
31395: PUSH
31396: LD_INT 4
31398: PUSH
31399: LD_INT 43
31401: PUSH
31402: LD_INT 25
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: IN
31410: IFFALSE 31431
// points := [ 40 , 15 , 5 ] ;
31412: LD_ADDR_VAR 0 9
31416: PUSH
31417: LD_INT 40
31419: PUSH
31420: LD_INT 15
31422: PUSH
31423: LD_INT 5
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: LIST
31430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31431: LD_VAR 0 6
31435: PPUSH
31436: CALL_OW 264
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: LD_INT 23
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: IN
31451: IFFALSE 31472
// points := [ 7 , 25 , 8 ] ;
31453: LD_ADDR_VAR 0 9
31457: PUSH
31458: LD_INT 7
31460: PUSH
31461: LD_INT 25
31463: PUSH
31464: LD_INT 8
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31472: LD_VAR 0 6
31476: PPUSH
31477: CALL_OW 264
31481: PUSH
31482: LD_INT 5
31484: PUSH
31485: LD_INT 27
31487: PUSH
31488: LD_INT 44
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: IN
31496: IFFALSE 31517
// points := [ 14 , 50 , 16 ] ;
31498: LD_ADDR_VAR 0 9
31502: PUSH
31503: LD_INT 14
31505: PUSH
31506: LD_INT 50
31508: PUSH
31509: LD_INT 16
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31517: LD_VAR 0 6
31521: PPUSH
31522: CALL_OW 264
31526: PUSH
31527: LD_INT 6
31529: PUSH
31530: LD_INT 46
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: IN
31537: IFFALSE 31558
// points := [ 32 , 120 , 70 ] ;
31539: LD_ADDR_VAR 0 9
31543: PUSH
31544: LD_INT 32
31546: PUSH
31547: LD_INT 120
31549: PUSH
31550: LD_INT 70
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31558: LD_VAR 0 6
31562: PPUSH
31563: CALL_OW 264
31567: PUSH
31568: LD_INT 7
31570: PUSH
31571: LD_INT 28
31573: PUSH
31574: LD_INT 45
31576: PUSH
31577: LD_EXP 98
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: IN
31588: IFFALSE 31609
// points := [ 35 , 20 , 45 ] ;
31590: LD_ADDR_VAR 0 9
31594: PUSH
31595: LD_INT 35
31597: PUSH
31598: LD_INT 20
31600: PUSH
31601: LD_INT 45
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31609: LD_VAR 0 6
31613: PPUSH
31614: CALL_OW 264
31618: PUSH
31619: LD_INT 47
31621: PUSH
31622: EMPTY
31623: LIST
31624: IN
31625: IFFALSE 31646
// points := [ 67 , 45 , 75 ] ;
31627: LD_ADDR_VAR 0 9
31631: PUSH
31632: LD_INT 67
31634: PUSH
31635: LD_INT 45
31637: PUSH
31638: LD_INT 75
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: LIST
31645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31646: LD_VAR 0 6
31650: PPUSH
31651: CALL_OW 264
31655: PUSH
31656: LD_INT 26
31658: PUSH
31659: EMPTY
31660: LIST
31661: IN
31662: IFFALSE 31683
// points := [ 120 , 30 , 80 ] ;
31664: LD_ADDR_VAR 0 9
31668: PUSH
31669: LD_INT 120
31671: PUSH
31672: LD_INT 30
31674: PUSH
31675: LD_INT 80
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: LIST
31682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31683: LD_VAR 0 6
31687: PPUSH
31688: CALL_OW 264
31692: PUSH
31693: LD_INT 22
31695: PUSH
31696: EMPTY
31697: LIST
31698: IN
31699: IFFALSE 31720
// points := [ 40 , 1 , 1 ] ;
31701: LD_ADDR_VAR 0 9
31705: PUSH
31706: LD_INT 40
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31720: LD_VAR 0 6
31724: PPUSH
31725: CALL_OW 264
31729: PUSH
31730: LD_INT 29
31732: PUSH
31733: EMPTY
31734: LIST
31735: IN
31736: IFFALSE 31757
// points := [ 70 , 200 , 400 ] ;
31738: LD_ADDR_VAR 0 9
31742: PUSH
31743: LD_INT 70
31745: PUSH
31746: LD_INT 200
31748: PUSH
31749: LD_INT 400
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31757: LD_VAR 0 6
31761: PPUSH
31762: CALL_OW 264
31766: PUSH
31767: LD_INT 14
31769: PUSH
31770: LD_INT 53
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: IN
31777: IFFALSE 31798
// points := [ 40 , 10 , 20 ] ;
31779: LD_ADDR_VAR 0 9
31783: PUSH
31784: LD_INT 40
31786: PUSH
31787: LD_INT 10
31789: PUSH
31790: LD_INT 20
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31798: LD_VAR 0 6
31802: PPUSH
31803: CALL_OW 264
31807: PUSH
31808: LD_INT 9
31810: PUSH
31811: EMPTY
31812: LIST
31813: IN
31814: IFFALSE 31835
// points := [ 5 , 70 , 20 ] ;
31816: LD_ADDR_VAR 0 9
31820: PUSH
31821: LD_INT 5
31823: PUSH
31824: LD_INT 70
31826: PUSH
31827: LD_INT 20
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31835: LD_VAR 0 6
31839: PPUSH
31840: CALL_OW 264
31844: PUSH
31845: LD_INT 10
31847: PUSH
31848: EMPTY
31849: LIST
31850: IN
31851: IFFALSE 31872
// points := [ 35 , 110 , 70 ] ;
31853: LD_ADDR_VAR 0 9
31857: PUSH
31858: LD_INT 35
31860: PUSH
31861: LD_INT 110
31863: PUSH
31864: LD_INT 70
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31872: LD_VAR 0 6
31876: PPUSH
31877: CALL_OW 265
31881: PUSH
31882: LD_INT 25
31884: EQUAL
31885: IFFALSE 31906
// points := [ 80 , 65 , 100 ] ;
31887: LD_ADDR_VAR 0 9
31891: PUSH
31892: LD_INT 80
31894: PUSH
31895: LD_INT 65
31897: PUSH
31898: LD_INT 100
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: LIST
31905: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31906: LD_VAR 0 6
31910: PPUSH
31911: CALL_OW 263
31915: PUSH
31916: LD_INT 1
31918: EQUAL
31919: IFFALSE 31954
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31921: LD_ADDR_VAR 0 10
31925: PUSH
31926: LD_VAR 0 10
31930: PUSH
31931: LD_VAR 0 6
31935: PPUSH
31936: CALL_OW 311
31940: PPUSH
31941: LD_INT 3
31943: PPUSH
31944: CALL_OW 259
31948: PUSH
31949: LD_INT 4
31951: MUL
31952: MUL
31953: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31954: LD_VAR 0 6
31958: PPUSH
31959: CALL_OW 263
31963: PUSH
31964: LD_INT 2
31966: EQUAL
31967: IFFALSE 32018
// begin j := IsControledBy ( i ) ;
31969: LD_ADDR_VAR 0 7
31973: PUSH
31974: LD_VAR 0 6
31978: PPUSH
31979: CALL_OW 312
31983: ST_TO_ADDR
// if j then
31984: LD_VAR 0 7
31988: IFFALSE 32018
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31990: LD_ADDR_VAR 0 10
31994: PUSH
31995: LD_VAR 0 10
31999: PUSH
32000: LD_VAR 0 7
32004: PPUSH
32005: LD_INT 3
32007: PPUSH
32008: CALL_OW 259
32012: PUSH
32013: LD_INT 3
32015: MUL
32016: MUL
32017: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32018: LD_VAR 0 6
32022: PPUSH
32023: CALL_OW 264
32027: PUSH
32028: LD_INT 5
32030: PUSH
32031: LD_INT 6
32033: PUSH
32034: LD_INT 46
32036: PUSH
32037: LD_INT 44
32039: PUSH
32040: LD_INT 47
32042: PUSH
32043: LD_INT 45
32045: PUSH
32046: LD_INT 28
32048: PUSH
32049: LD_INT 7
32051: PUSH
32052: LD_INT 27
32054: PUSH
32055: LD_INT 29
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: IN
32070: PUSH
32071: LD_VAR 0 1
32075: PPUSH
32076: LD_INT 52
32078: PPUSH
32079: CALL_OW 321
32083: PUSH
32084: LD_INT 2
32086: EQUAL
32087: AND
32088: IFFALSE 32105
// bpoints := bpoints * 1.2 ;
32090: LD_ADDR_VAR 0 10
32094: PUSH
32095: LD_VAR 0 10
32099: PUSH
32100: LD_REAL  1.20000000000000E+0000
32103: MUL
32104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32105: LD_VAR 0 6
32109: PPUSH
32110: CALL_OW 264
32114: PUSH
32115: LD_INT 6
32117: PUSH
32118: LD_INT 46
32120: PUSH
32121: LD_INT 47
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: IN
32129: IFFALSE 32146
// bpoints := bpoints * 1.2 ;
32131: LD_ADDR_VAR 0 10
32135: PUSH
32136: LD_VAR 0 10
32140: PUSH
32141: LD_REAL  1.20000000000000E+0000
32144: MUL
32145: ST_TO_ADDR
// end ; unit_building :
32146: GO 32160
32148: LD_INT 3
32150: DOUBLE
32151: EQUAL
32152: IFTRUE 32156
32154: GO 32159
32156: POP
// ; end ;
32157: GO 32160
32159: POP
// for j = 1 to 3 do
32160: LD_ADDR_VAR 0 7
32164: PUSH
32165: DOUBLE
32166: LD_INT 1
32168: DEC
32169: ST_TO_ADDR
32170: LD_INT 3
32172: PUSH
32173: FOR_TO
32174: IFFALSE 32227
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32176: LD_ADDR_VAR 0 5
32180: PUSH
32181: LD_VAR 0 5
32185: PPUSH
32186: LD_VAR 0 7
32190: PPUSH
32191: LD_VAR 0 5
32195: PUSH
32196: LD_VAR 0 7
32200: ARRAY
32201: PUSH
32202: LD_VAR 0 9
32206: PUSH
32207: LD_VAR 0 7
32211: ARRAY
32212: PUSH
32213: LD_VAR 0 10
32217: MUL
32218: PLUS
32219: PPUSH
32220: CALL_OW 1
32224: ST_TO_ADDR
32225: GO 32173
32227: POP
32228: POP
// end ;
32229: GO 30706
32231: POP
32232: POP
// result := Replace ( result , 4 , tmp ) ;
32233: LD_ADDR_VAR 0 5
32237: PUSH
32238: LD_VAR 0 5
32242: PPUSH
32243: LD_INT 4
32245: PPUSH
32246: LD_VAR 0 8
32250: PPUSH
32251: CALL_OW 1
32255: ST_TO_ADDR
// end ;
32256: LD_VAR 0 5
32260: RET
// export function DangerAtRange ( unit , range ) ; begin
32261: LD_INT 0
32263: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32264: LD_ADDR_VAR 0 3
32268: PUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 255
32278: PPUSH
32279: LD_VAR 0 1
32283: PPUSH
32284: CALL_OW 250
32288: PPUSH
32289: LD_VAR 0 1
32293: PPUSH
32294: CALL_OW 251
32298: PPUSH
32299: LD_VAR 0 2
32303: PPUSH
32304: CALL 30558 0 4
32308: ST_TO_ADDR
// end ;
32309: LD_VAR 0 3
32313: RET
// export function DangerInArea ( side , area ) ; begin
32314: LD_INT 0
32316: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: LD_VAR 0 2
32326: PPUSH
32327: LD_INT 81
32329: PUSH
32330: LD_VAR 0 1
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PPUSH
32339: CALL_OW 70
32343: ST_TO_ADDR
// end ;
32344: LD_VAR 0 3
32348: RET
// export function IsExtension ( b ) ; begin
32349: LD_INT 0
32351: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32352: LD_ADDR_VAR 0 2
32356: PUSH
32357: LD_VAR 0 1
32361: PUSH
32362: LD_INT 23
32364: PUSH
32365: LD_INT 20
32367: PUSH
32368: LD_INT 22
32370: PUSH
32371: LD_INT 17
32373: PUSH
32374: LD_INT 24
32376: PUSH
32377: LD_INT 21
32379: PUSH
32380: LD_INT 19
32382: PUSH
32383: LD_INT 16
32385: PUSH
32386: LD_INT 25
32388: PUSH
32389: LD_INT 18
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: IN
32404: ST_TO_ADDR
// end ;
32405: LD_VAR 0 2
32409: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32410: LD_INT 0
32412: PPUSH
32413: PPUSH
32414: PPUSH
// result := [ ] ;
32415: LD_ADDR_VAR 0 4
32419: PUSH
32420: EMPTY
32421: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32422: LD_ADDR_VAR 0 5
32426: PUSH
32427: LD_VAR 0 2
32431: PPUSH
32432: LD_INT 21
32434: PUSH
32435: LD_INT 3
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PPUSH
32442: CALL_OW 70
32446: ST_TO_ADDR
// if not tmp then
32447: LD_VAR 0 5
32451: NOT
32452: IFFALSE 32456
// exit ;
32454: GO 32520
// if checkLink then
32456: LD_VAR 0 3
32460: IFFALSE 32510
// begin for i in tmp do
32462: LD_ADDR_VAR 0 6
32466: PUSH
32467: LD_VAR 0 5
32471: PUSH
32472: FOR_IN
32473: IFFALSE 32508
// if GetBase ( i ) <> base then
32475: LD_VAR 0 6
32479: PPUSH
32480: CALL_OW 274
32484: PUSH
32485: LD_VAR 0 1
32489: NONEQUAL
32490: IFFALSE 32506
// ComLinkToBase ( base , i ) ;
32492: LD_VAR 0 1
32496: PPUSH
32497: LD_VAR 0 6
32501: PPUSH
32502: CALL_OW 169
32506: GO 32472
32508: POP
32509: POP
// end ; result := tmp ;
32510: LD_ADDR_VAR 0 4
32514: PUSH
32515: LD_VAR 0 5
32519: ST_TO_ADDR
// end ;
32520: LD_VAR 0 4
32524: RET
// export function ComComplete ( units , b ) ; var i ; begin
32525: LD_INT 0
32527: PPUSH
32528: PPUSH
// if not units then
32529: LD_VAR 0 1
32533: NOT
32534: IFFALSE 32538
// exit ;
32536: GO 32628
// for i in units do
32538: LD_ADDR_VAR 0 4
32542: PUSH
32543: LD_VAR 0 1
32547: PUSH
32548: FOR_IN
32549: IFFALSE 32626
// if BuildingStatus ( b ) = bs_build then
32551: LD_VAR 0 2
32555: PPUSH
32556: CALL_OW 461
32560: PUSH
32561: LD_INT 1
32563: EQUAL
32564: IFFALSE 32624
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32566: LD_VAR 0 4
32570: PPUSH
32571: LD_STRING h
32573: PUSH
32574: LD_VAR 0 2
32578: PPUSH
32579: CALL_OW 250
32583: PUSH
32584: LD_VAR 0 2
32588: PPUSH
32589: CALL_OW 251
32593: PUSH
32594: LD_VAR 0 2
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: PUSH
32617: EMPTY
32618: LIST
32619: PPUSH
32620: CALL_OW 446
32624: GO 32548
32626: POP
32627: POP
// end ;
32628: LD_VAR 0 3
32632: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32633: LD_INT 0
32635: PPUSH
32636: PPUSH
32637: PPUSH
32638: PPUSH
32639: PPUSH
32640: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32641: LD_VAR 0 1
32645: NOT
32646: PUSH
32647: LD_VAR 0 1
32651: PPUSH
32652: CALL_OW 263
32656: PUSH
32657: LD_INT 2
32659: NONEQUAL
32660: OR
32661: IFFALSE 32665
// exit ;
32663: GO 32981
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32665: LD_ADDR_VAR 0 6
32669: PUSH
32670: LD_INT 22
32672: PUSH
32673: LD_VAR 0 1
32677: PPUSH
32678: CALL_OW 255
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 30
32692: PUSH
32693: LD_INT 36
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 34
32702: PUSH
32703: LD_INT 31
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PPUSH
32719: CALL_OW 69
32723: ST_TO_ADDR
// if not tmp then
32724: LD_VAR 0 6
32728: NOT
32729: IFFALSE 32733
// exit ;
32731: GO 32981
// result := [ ] ;
32733: LD_ADDR_VAR 0 2
32737: PUSH
32738: EMPTY
32739: ST_TO_ADDR
// for i in tmp do
32740: LD_ADDR_VAR 0 3
32744: PUSH
32745: LD_VAR 0 6
32749: PUSH
32750: FOR_IN
32751: IFFALSE 32822
// begin t := UnitsInside ( i ) ;
32753: LD_ADDR_VAR 0 4
32757: PUSH
32758: LD_VAR 0 3
32762: PPUSH
32763: CALL_OW 313
32767: ST_TO_ADDR
// if t then
32768: LD_VAR 0 4
32772: IFFALSE 32820
// for j in t do
32774: LD_ADDR_VAR 0 7
32778: PUSH
32779: LD_VAR 0 4
32783: PUSH
32784: FOR_IN
32785: IFFALSE 32818
// result := Replace ( result , result + 1 , j ) ;
32787: LD_ADDR_VAR 0 2
32791: PUSH
32792: LD_VAR 0 2
32796: PPUSH
32797: LD_VAR 0 2
32801: PUSH
32802: LD_INT 1
32804: PLUS
32805: PPUSH
32806: LD_VAR 0 7
32810: PPUSH
32811: CALL_OW 1
32815: ST_TO_ADDR
32816: GO 32784
32818: POP
32819: POP
// end ;
32820: GO 32750
32822: POP
32823: POP
// if not result then
32824: LD_VAR 0 2
32828: NOT
32829: IFFALSE 32833
// exit ;
32831: GO 32981
// mech := result [ 1 ] ;
32833: LD_ADDR_VAR 0 5
32837: PUSH
32838: LD_VAR 0 2
32842: PUSH
32843: LD_INT 1
32845: ARRAY
32846: ST_TO_ADDR
// if result > 1 then
32847: LD_VAR 0 2
32851: PUSH
32852: LD_INT 1
32854: GREATER
32855: IFFALSE 32967
// begin for i = 2 to result do
32857: LD_ADDR_VAR 0 3
32861: PUSH
32862: DOUBLE
32863: LD_INT 2
32865: DEC
32866: ST_TO_ADDR
32867: LD_VAR 0 2
32871: PUSH
32872: FOR_TO
32873: IFFALSE 32965
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32875: LD_ADDR_VAR 0 4
32879: PUSH
32880: LD_VAR 0 2
32884: PUSH
32885: LD_VAR 0 3
32889: ARRAY
32890: PPUSH
32891: LD_INT 3
32893: PPUSH
32894: CALL_OW 259
32898: PUSH
32899: LD_VAR 0 2
32903: PUSH
32904: LD_VAR 0 3
32908: ARRAY
32909: PPUSH
32910: CALL_OW 432
32914: MINUS
32915: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32916: LD_VAR 0 4
32920: PUSH
32921: LD_VAR 0 5
32925: PPUSH
32926: LD_INT 3
32928: PPUSH
32929: CALL_OW 259
32933: PUSH
32934: LD_VAR 0 5
32938: PPUSH
32939: CALL_OW 432
32943: MINUS
32944: GREATEREQUAL
32945: IFFALSE 32963
// mech := result [ i ] ;
32947: LD_ADDR_VAR 0 5
32951: PUSH
32952: LD_VAR 0 2
32956: PUSH
32957: LD_VAR 0 3
32961: ARRAY
32962: ST_TO_ADDR
// end ;
32963: GO 32872
32965: POP
32966: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32967: LD_VAR 0 1
32971: PPUSH
32972: LD_VAR 0 5
32976: PPUSH
32977: CALL_OW 135
// end ;
32981: LD_VAR 0 2
32985: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32986: LD_INT 0
32988: PPUSH
32989: PPUSH
32990: PPUSH
32991: PPUSH
32992: PPUSH
32993: PPUSH
32994: PPUSH
32995: PPUSH
32996: PPUSH
32997: PPUSH
32998: PPUSH
32999: PPUSH
33000: PPUSH
// result := [ ] ;
33001: LD_ADDR_VAR 0 7
33005: PUSH
33006: EMPTY
33007: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33008: LD_VAR 0 1
33012: PPUSH
33013: CALL_OW 266
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: IN
33028: NOT
33029: IFFALSE 33033
// exit ;
33031: GO 34667
// if name then
33033: LD_VAR 0 3
33037: IFFALSE 33053
// SetBName ( base_dep , name ) ;
33039: LD_VAR 0 1
33043: PPUSH
33044: LD_VAR 0 3
33048: PPUSH
33049: CALL_OW 500
// base := GetBase ( base_dep ) ;
33053: LD_ADDR_VAR 0 15
33057: PUSH
33058: LD_VAR 0 1
33062: PPUSH
33063: CALL_OW 274
33067: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33068: LD_ADDR_VAR 0 16
33072: PUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 255
33082: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33083: LD_ADDR_VAR 0 17
33087: PUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: CALL_OW 248
33097: ST_TO_ADDR
// if sources then
33098: LD_VAR 0 5
33102: IFFALSE 33149
// for i = 1 to 3 do
33104: LD_ADDR_VAR 0 8
33108: PUSH
33109: DOUBLE
33110: LD_INT 1
33112: DEC
33113: ST_TO_ADDR
33114: LD_INT 3
33116: PUSH
33117: FOR_TO
33118: IFFALSE 33147
// AddResourceType ( base , i , sources [ i ] ) ;
33120: LD_VAR 0 15
33124: PPUSH
33125: LD_VAR 0 8
33129: PPUSH
33130: LD_VAR 0 5
33134: PUSH
33135: LD_VAR 0 8
33139: ARRAY
33140: PPUSH
33141: CALL_OW 276
33145: GO 33117
33147: POP
33148: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33149: LD_ADDR_VAR 0 18
33153: PUSH
33154: LD_VAR 0 15
33158: PPUSH
33159: LD_VAR 0 2
33163: PPUSH
33164: LD_INT 1
33166: PPUSH
33167: CALL 32410 0 3
33171: ST_TO_ADDR
// InitHc ;
33172: CALL_OW 19
// InitUc ;
33176: CALL_OW 18
// uc_side := side ;
33180: LD_ADDR_OWVAR 20
33184: PUSH
33185: LD_VAR 0 16
33189: ST_TO_ADDR
// uc_nation := nation ;
33190: LD_ADDR_OWVAR 21
33194: PUSH
33195: LD_VAR 0 17
33199: ST_TO_ADDR
// if buildings then
33200: LD_VAR 0 18
33204: IFFALSE 34526
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33206: LD_ADDR_VAR 0 19
33210: PUSH
33211: LD_VAR 0 18
33215: PPUSH
33216: LD_INT 2
33218: PUSH
33219: LD_INT 30
33221: PUSH
33222: LD_INT 29
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 30
33231: PUSH
33232: LD_INT 30
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: LIST
33243: PPUSH
33244: CALL_OW 72
33248: ST_TO_ADDR
// if tmp then
33249: LD_VAR 0 19
33253: IFFALSE 33301
// for i in tmp do
33255: LD_ADDR_VAR 0 8
33259: PUSH
33260: LD_VAR 0 19
33264: PUSH
33265: FOR_IN
33266: IFFALSE 33299
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33268: LD_VAR 0 8
33272: PPUSH
33273: CALL_OW 250
33277: PPUSH
33278: LD_VAR 0 8
33282: PPUSH
33283: CALL_OW 251
33287: PPUSH
33288: LD_VAR 0 16
33292: PPUSH
33293: CALL_OW 441
33297: GO 33265
33299: POP
33300: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33301: LD_VAR 0 18
33305: PPUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 30
33311: PUSH
33312: LD_INT 32
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 30
33321: PUSH
33322: LD_INT 33
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: PPUSH
33334: CALL_OW 72
33338: IFFALSE 33426
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33340: LD_ADDR_VAR 0 8
33344: PUSH
33345: LD_VAR 0 18
33349: PPUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 30
33355: PUSH
33356: LD_INT 32
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 30
33365: PUSH
33366: LD_INT 33
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: PPUSH
33378: CALL_OW 72
33382: PUSH
33383: FOR_IN
33384: IFFALSE 33424
// begin if not GetBWeapon ( i ) then
33386: LD_VAR 0 8
33390: PPUSH
33391: CALL_OW 269
33395: NOT
33396: IFFALSE 33422
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33398: LD_VAR 0 8
33402: PPUSH
33403: LD_VAR 0 8
33407: PPUSH
33408: LD_VAR 0 2
33412: PPUSH
33413: CALL 34672 0 2
33417: PPUSH
33418: CALL_OW 431
// end ;
33422: GO 33383
33424: POP
33425: POP
// end ; for i = 1 to personel do
33426: LD_ADDR_VAR 0 8
33430: PUSH
33431: DOUBLE
33432: LD_INT 1
33434: DEC
33435: ST_TO_ADDR
33436: LD_VAR 0 6
33440: PUSH
33441: FOR_TO
33442: IFFALSE 34506
// begin if i > 4 then
33444: LD_VAR 0 8
33448: PUSH
33449: LD_INT 4
33451: GREATER
33452: IFFALSE 33456
// break ;
33454: GO 34506
// case i of 1 :
33456: LD_VAR 0 8
33460: PUSH
33461: LD_INT 1
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33469
33467: GO 33549
33469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33470: LD_ADDR_VAR 0 12
33474: PUSH
33475: LD_VAR 0 18
33479: PPUSH
33480: LD_INT 22
33482: PUSH
33483: LD_VAR 0 16
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 58
33494: PUSH
33495: EMPTY
33496: LIST
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: LD_INT 30
33503: PUSH
33504: LD_INT 32
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 30
33513: PUSH
33514: LD_INT 4
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 30
33523: PUSH
33524: LD_INT 5
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: PPUSH
33542: CALL_OW 72
33546: ST_TO_ADDR
33547: GO 33771
33549: LD_INT 2
33551: DOUBLE
33552: EQUAL
33553: IFTRUE 33557
33555: GO 33619
33557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33558: LD_ADDR_VAR 0 12
33562: PUSH
33563: LD_VAR 0 18
33567: PPUSH
33568: LD_INT 22
33570: PUSH
33571: LD_VAR 0 16
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: LD_INT 30
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 30
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PPUSH
33612: CALL_OW 72
33616: ST_TO_ADDR
33617: GO 33771
33619: LD_INT 3
33621: DOUBLE
33622: EQUAL
33623: IFTRUE 33627
33625: GO 33689
33627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33628: LD_ADDR_VAR 0 12
33632: PUSH
33633: LD_VAR 0 18
33637: PPUSH
33638: LD_INT 22
33640: PUSH
33641: LD_VAR 0 16
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 30
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 30
33665: PUSH
33666: LD_INT 3
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PPUSH
33682: CALL_OW 72
33686: ST_TO_ADDR
33687: GO 33771
33689: LD_INT 4
33691: DOUBLE
33692: EQUAL
33693: IFTRUE 33697
33695: GO 33770
33697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33698: LD_ADDR_VAR 0 12
33702: PUSH
33703: LD_VAR 0 18
33707: PPUSH
33708: LD_INT 22
33710: PUSH
33711: LD_VAR 0 16
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 30
33725: PUSH
33726: LD_INT 6
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 30
33735: PUSH
33736: LD_INT 7
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 30
33745: PUSH
33746: LD_INT 8
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PPUSH
33763: CALL_OW 72
33767: ST_TO_ADDR
33768: GO 33771
33770: POP
// if i = 1 then
33771: LD_VAR 0 8
33775: PUSH
33776: LD_INT 1
33778: EQUAL
33779: IFFALSE 33890
// begin tmp := [ ] ;
33781: LD_ADDR_VAR 0 19
33785: PUSH
33786: EMPTY
33787: ST_TO_ADDR
// for j in f do
33788: LD_ADDR_VAR 0 9
33792: PUSH
33793: LD_VAR 0 12
33797: PUSH
33798: FOR_IN
33799: IFFALSE 33872
// if GetBType ( j ) = b_bunker then
33801: LD_VAR 0 9
33805: PPUSH
33806: CALL_OW 266
33810: PUSH
33811: LD_INT 32
33813: EQUAL
33814: IFFALSE 33841
// tmp := Insert ( tmp , 1 , j ) else
33816: LD_ADDR_VAR 0 19
33820: PUSH
33821: LD_VAR 0 19
33825: PPUSH
33826: LD_INT 1
33828: PPUSH
33829: LD_VAR 0 9
33833: PPUSH
33834: CALL_OW 2
33838: ST_TO_ADDR
33839: GO 33870
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33841: LD_ADDR_VAR 0 19
33845: PUSH
33846: LD_VAR 0 19
33850: PPUSH
33851: LD_VAR 0 19
33855: PUSH
33856: LD_INT 1
33858: PLUS
33859: PPUSH
33860: LD_VAR 0 9
33864: PPUSH
33865: CALL_OW 2
33869: ST_TO_ADDR
33870: GO 33798
33872: POP
33873: POP
// if tmp then
33874: LD_VAR 0 19
33878: IFFALSE 33890
// f := tmp ;
33880: LD_ADDR_VAR 0 12
33884: PUSH
33885: LD_VAR 0 19
33889: ST_TO_ADDR
// end ; x := personel [ i ] ;
33890: LD_ADDR_VAR 0 13
33894: PUSH
33895: LD_VAR 0 6
33899: PUSH
33900: LD_VAR 0 8
33904: ARRAY
33905: ST_TO_ADDR
// if x = - 1 then
33906: LD_VAR 0 13
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: EQUAL
33915: IFFALSE 34124
// begin for j in f do
33917: LD_ADDR_VAR 0 9
33921: PUSH
33922: LD_VAR 0 12
33926: PUSH
33927: FOR_IN
33928: IFFALSE 34120
// repeat InitHc ;
33930: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33934: LD_VAR 0 9
33938: PPUSH
33939: CALL_OW 266
33943: PUSH
33944: LD_INT 5
33946: EQUAL
33947: IFFALSE 34017
// begin if UnitsInside ( j ) < 3 then
33949: LD_VAR 0 9
33953: PPUSH
33954: CALL_OW 313
33958: PUSH
33959: LD_INT 3
33961: LESS
33962: IFFALSE 33998
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33964: LD_INT 0
33966: PPUSH
33967: LD_INT 5
33969: PUSH
33970: LD_INT 8
33972: PUSH
33973: LD_INT 9
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: PUSH
33981: LD_VAR 0 17
33985: ARRAY
33986: PPUSH
33987: LD_VAR 0 4
33991: PPUSH
33992: CALL_OW 380
33996: GO 34015
// PrepareHuman ( false , i , skill ) ;
33998: LD_INT 0
34000: PPUSH
34001: LD_VAR 0 8
34005: PPUSH
34006: LD_VAR 0 4
34010: PPUSH
34011: CALL_OW 380
// end else
34015: GO 34034
// PrepareHuman ( false , i , skill ) ;
34017: LD_INT 0
34019: PPUSH
34020: LD_VAR 0 8
34024: PPUSH
34025: LD_VAR 0 4
34029: PPUSH
34030: CALL_OW 380
// un := CreateHuman ;
34034: LD_ADDR_VAR 0 14
34038: PUSH
34039: CALL_OW 44
34043: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34044: LD_ADDR_VAR 0 7
34048: PUSH
34049: LD_VAR 0 7
34053: PPUSH
34054: LD_INT 1
34056: PPUSH
34057: LD_VAR 0 14
34061: PPUSH
34062: CALL_OW 2
34066: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34067: LD_VAR 0 14
34071: PPUSH
34072: LD_VAR 0 9
34076: PPUSH
34077: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34081: LD_VAR 0 9
34085: PPUSH
34086: CALL_OW 313
34090: PUSH
34091: LD_INT 6
34093: EQUAL
34094: PUSH
34095: LD_VAR 0 9
34099: PPUSH
34100: CALL_OW 266
34104: PUSH
34105: LD_INT 32
34107: PUSH
34108: LD_INT 31
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: IN
34115: OR
34116: IFFALSE 33930
34118: GO 33927
34120: POP
34121: POP
// end else
34122: GO 34504
// for j = 1 to x do
34124: LD_ADDR_VAR 0 9
34128: PUSH
34129: DOUBLE
34130: LD_INT 1
34132: DEC
34133: ST_TO_ADDR
34134: LD_VAR 0 13
34138: PUSH
34139: FOR_TO
34140: IFFALSE 34502
// begin InitHc ;
34142: CALL_OW 19
// if not f then
34146: LD_VAR 0 12
34150: NOT
34151: IFFALSE 34240
// begin PrepareHuman ( false , i , skill ) ;
34153: LD_INT 0
34155: PPUSH
34156: LD_VAR 0 8
34160: PPUSH
34161: LD_VAR 0 4
34165: PPUSH
34166: CALL_OW 380
// un := CreateHuman ;
34170: LD_ADDR_VAR 0 14
34174: PUSH
34175: CALL_OW 44
34179: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34180: LD_ADDR_VAR 0 7
34184: PUSH
34185: LD_VAR 0 7
34189: PPUSH
34190: LD_INT 1
34192: PPUSH
34193: LD_VAR 0 14
34197: PPUSH
34198: CALL_OW 2
34202: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34203: LD_VAR 0 14
34207: PPUSH
34208: LD_VAR 0 1
34212: PPUSH
34213: CALL_OW 250
34217: PPUSH
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 251
34227: PPUSH
34228: LD_INT 10
34230: PPUSH
34231: LD_INT 0
34233: PPUSH
34234: CALL_OW 50
// continue ;
34238: GO 34139
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34240: LD_VAR 0 12
34244: PUSH
34245: LD_INT 1
34247: ARRAY
34248: PPUSH
34249: CALL_OW 313
34253: PUSH
34254: LD_VAR 0 12
34258: PUSH
34259: LD_INT 1
34261: ARRAY
34262: PPUSH
34263: CALL_OW 266
34267: PUSH
34268: LD_INT 32
34270: PUSH
34271: LD_INT 31
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: IN
34278: AND
34279: PUSH
34280: LD_VAR 0 12
34284: PUSH
34285: LD_INT 1
34287: ARRAY
34288: PPUSH
34289: CALL_OW 313
34293: PUSH
34294: LD_INT 6
34296: EQUAL
34297: OR
34298: IFFALSE 34318
// f := Delete ( f , 1 ) ;
34300: LD_ADDR_VAR 0 12
34304: PUSH
34305: LD_VAR 0 12
34309: PPUSH
34310: LD_INT 1
34312: PPUSH
34313: CALL_OW 3
34317: ST_TO_ADDR
// if not f then
34318: LD_VAR 0 12
34322: NOT
34323: IFFALSE 34341
// begin x := x + 2 ;
34325: LD_ADDR_VAR 0 13
34329: PUSH
34330: LD_VAR 0 13
34334: PUSH
34335: LD_INT 2
34337: PLUS
34338: ST_TO_ADDR
// continue ;
34339: GO 34139
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34341: LD_VAR 0 12
34345: PUSH
34346: LD_INT 1
34348: ARRAY
34349: PPUSH
34350: CALL_OW 266
34354: PUSH
34355: LD_INT 5
34357: EQUAL
34358: IFFALSE 34432
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34360: LD_VAR 0 12
34364: PUSH
34365: LD_INT 1
34367: ARRAY
34368: PPUSH
34369: CALL_OW 313
34373: PUSH
34374: LD_INT 3
34376: LESS
34377: IFFALSE 34413
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34379: LD_INT 0
34381: PPUSH
34382: LD_INT 5
34384: PUSH
34385: LD_INT 8
34387: PUSH
34388: LD_INT 9
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: LIST
34395: PUSH
34396: LD_VAR 0 17
34400: ARRAY
34401: PPUSH
34402: LD_VAR 0 4
34406: PPUSH
34407: CALL_OW 380
34411: GO 34430
// PrepareHuman ( false , i , skill ) ;
34413: LD_INT 0
34415: PPUSH
34416: LD_VAR 0 8
34420: PPUSH
34421: LD_VAR 0 4
34425: PPUSH
34426: CALL_OW 380
// end else
34430: GO 34449
// PrepareHuman ( false , i , skill ) ;
34432: LD_INT 0
34434: PPUSH
34435: LD_VAR 0 8
34439: PPUSH
34440: LD_VAR 0 4
34444: PPUSH
34445: CALL_OW 380
// un := CreateHuman ;
34449: LD_ADDR_VAR 0 14
34453: PUSH
34454: CALL_OW 44
34458: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34459: LD_ADDR_VAR 0 7
34463: PUSH
34464: LD_VAR 0 7
34468: PPUSH
34469: LD_INT 1
34471: PPUSH
34472: LD_VAR 0 14
34476: PPUSH
34477: CALL_OW 2
34481: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34482: LD_VAR 0 14
34486: PPUSH
34487: LD_VAR 0 12
34491: PUSH
34492: LD_INT 1
34494: ARRAY
34495: PPUSH
34496: CALL_OW 52
// end ;
34500: GO 34139
34502: POP
34503: POP
// end ;
34504: GO 33441
34506: POP
34507: POP
// result := result ^ buildings ;
34508: LD_ADDR_VAR 0 7
34512: PUSH
34513: LD_VAR 0 7
34517: PUSH
34518: LD_VAR 0 18
34522: ADD
34523: ST_TO_ADDR
// end else
34524: GO 34667
// begin for i = 1 to personel do
34526: LD_ADDR_VAR 0 8
34530: PUSH
34531: DOUBLE
34532: LD_INT 1
34534: DEC
34535: ST_TO_ADDR
34536: LD_VAR 0 6
34540: PUSH
34541: FOR_TO
34542: IFFALSE 34665
// begin if i > 4 then
34544: LD_VAR 0 8
34548: PUSH
34549: LD_INT 4
34551: GREATER
34552: IFFALSE 34556
// break ;
34554: GO 34665
// x := personel [ i ] ;
34556: LD_ADDR_VAR 0 13
34560: PUSH
34561: LD_VAR 0 6
34565: PUSH
34566: LD_VAR 0 8
34570: ARRAY
34571: ST_TO_ADDR
// if x = - 1 then
34572: LD_VAR 0 13
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: EQUAL
34581: IFFALSE 34585
// continue ;
34583: GO 34541
// PrepareHuman ( false , i , skill ) ;
34585: LD_INT 0
34587: PPUSH
34588: LD_VAR 0 8
34592: PPUSH
34593: LD_VAR 0 4
34597: PPUSH
34598: CALL_OW 380
// un := CreateHuman ;
34602: LD_ADDR_VAR 0 14
34606: PUSH
34607: CALL_OW 44
34611: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34612: LD_VAR 0 14
34616: PPUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL_OW 250
34626: PPUSH
34627: LD_VAR 0 1
34631: PPUSH
34632: CALL_OW 251
34636: PPUSH
34637: LD_INT 10
34639: PPUSH
34640: LD_INT 0
34642: PPUSH
34643: CALL_OW 50
// result := result ^ un ;
34647: LD_ADDR_VAR 0 7
34651: PUSH
34652: LD_VAR 0 7
34656: PUSH
34657: LD_VAR 0 14
34661: ADD
34662: ST_TO_ADDR
// end ;
34663: GO 34541
34665: POP
34666: POP
// end ; end ;
34667: LD_VAR 0 7
34671: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34672: LD_INT 0
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
34683: PPUSH
34684: PPUSH
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
34689: PPUSH
// result := false ;
34690: LD_ADDR_VAR 0 3
34694: PUSH
34695: LD_INT 0
34697: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34698: LD_VAR 0 1
34702: NOT
34703: PUSH
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL_OW 266
34713: PUSH
34714: LD_INT 32
34716: PUSH
34717: LD_INT 33
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: IN
34724: NOT
34725: OR
34726: IFFALSE 34730
// exit ;
34728: GO 35839
// nat := GetNation ( tower ) ;
34730: LD_ADDR_VAR 0 12
34734: PUSH
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 248
34744: ST_TO_ADDR
// side := GetSide ( tower ) ;
34745: LD_ADDR_VAR 0 16
34749: PUSH
34750: LD_VAR 0 1
34754: PPUSH
34755: CALL_OW 255
34759: ST_TO_ADDR
// x := GetX ( tower ) ;
34760: LD_ADDR_VAR 0 10
34764: PUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: CALL_OW 250
34774: ST_TO_ADDR
// y := GetY ( tower ) ;
34775: LD_ADDR_VAR 0 11
34779: PUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 251
34789: ST_TO_ADDR
// if not x or not y then
34790: LD_VAR 0 10
34794: NOT
34795: PUSH
34796: LD_VAR 0 11
34800: NOT
34801: OR
34802: IFFALSE 34806
// exit ;
34804: GO 35839
// weapon := 0 ;
34806: LD_ADDR_VAR 0 18
34810: PUSH
34811: LD_INT 0
34813: ST_TO_ADDR
// fac_list := [ ] ;
34814: LD_ADDR_VAR 0 17
34818: PUSH
34819: EMPTY
34820: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34821: LD_ADDR_VAR 0 6
34825: PUSH
34826: LD_VAR 0 1
34830: PPUSH
34831: CALL_OW 274
34835: PPUSH
34836: LD_VAR 0 2
34840: PPUSH
34841: LD_INT 0
34843: PPUSH
34844: CALL 32410 0 3
34848: PPUSH
34849: LD_INT 30
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PPUSH
34859: CALL_OW 72
34863: ST_TO_ADDR
// if not factories then
34864: LD_VAR 0 6
34868: NOT
34869: IFFALSE 34873
// exit ;
34871: GO 35839
// for i in factories do
34873: LD_ADDR_VAR 0 8
34877: PUSH
34878: LD_VAR 0 6
34882: PUSH
34883: FOR_IN
34884: IFFALSE 34909
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34886: LD_ADDR_VAR 0 17
34890: PUSH
34891: LD_VAR 0 17
34895: PUSH
34896: LD_VAR 0 8
34900: PPUSH
34901: CALL_OW 478
34905: UNION
34906: ST_TO_ADDR
34907: GO 34883
34909: POP
34910: POP
// if not fac_list then
34911: LD_VAR 0 17
34915: NOT
34916: IFFALSE 34920
// exit ;
34918: GO 35839
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34920: LD_ADDR_VAR 0 5
34924: PUSH
34925: LD_INT 4
34927: PUSH
34928: LD_INT 5
34930: PUSH
34931: LD_INT 9
34933: PUSH
34934: LD_INT 10
34936: PUSH
34937: LD_INT 6
34939: PUSH
34940: LD_INT 7
34942: PUSH
34943: LD_INT 11
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 27
34957: PUSH
34958: LD_INT 28
34960: PUSH
34961: LD_INT 26
34963: PUSH
34964: LD_INT 30
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 43
34975: PUSH
34976: LD_INT 44
34978: PUSH
34979: LD_INT 46
34981: PUSH
34982: LD_INT 45
34984: PUSH
34985: LD_INT 47
34987: PUSH
34988: LD_INT 49
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: PUSH
35004: LD_VAR 0 12
35008: ARRAY
35009: ST_TO_ADDR
// list := list isect fac_list ;
35010: LD_ADDR_VAR 0 5
35014: PUSH
35015: LD_VAR 0 5
35019: PUSH
35020: LD_VAR 0 17
35024: ISECT
35025: ST_TO_ADDR
// if not list then
35026: LD_VAR 0 5
35030: NOT
35031: IFFALSE 35035
// exit ;
35033: GO 35839
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35035: LD_VAR 0 12
35039: PUSH
35040: LD_INT 3
35042: EQUAL
35043: PUSH
35044: LD_INT 49
35046: PUSH
35047: LD_VAR 0 5
35051: IN
35052: AND
35053: PUSH
35054: LD_INT 31
35056: PPUSH
35057: LD_VAR 0 16
35061: PPUSH
35062: CALL_OW 321
35066: PUSH
35067: LD_INT 2
35069: EQUAL
35070: AND
35071: IFFALSE 35131
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35073: LD_INT 22
35075: PUSH
35076: LD_VAR 0 16
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 35
35087: PUSH
35088: LD_INT 49
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 91
35097: PUSH
35098: LD_VAR 0 1
35102: PUSH
35103: LD_INT 10
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: PPUSH
35116: CALL_OW 69
35120: NOT
35121: IFFALSE 35131
// weapon := ru_time_lapser ;
35123: LD_ADDR_VAR 0 18
35127: PUSH
35128: LD_INT 49
35130: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35131: LD_VAR 0 12
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: IN
35146: PUSH
35147: LD_INT 11
35149: PUSH
35150: LD_VAR 0 5
35154: IN
35155: PUSH
35156: LD_INT 30
35158: PUSH
35159: LD_VAR 0 5
35163: IN
35164: OR
35165: AND
35166: PUSH
35167: LD_INT 6
35169: PPUSH
35170: LD_VAR 0 16
35174: PPUSH
35175: CALL_OW 321
35179: PUSH
35180: LD_INT 2
35182: EQUAL
35183: AND
35184: IFFALSE 35349
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35186: LD_INT 22
35188: PUSH
35189: LD_VAR 0 16
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: LD_INT 35
35203: PUSH
35204: LD_INT 11
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 35
35213: PUSH
35214: LD_INT 30
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 91
35228: PUSH
35229: LD_VAR 0 1
35233: PUSH
35234: LD_INT 18
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: PPUSH
35247: CALL_OW 69
35251: NOT
35252: PUSH
35253: LD_INT 22
35255: PUSH
35256: LD_VAR 0 16
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: LD_INT 30
35270: PUSH
35271: LD_INT 32
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 30
35280: PUSH
35281: LD_INT 33
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 91
35295: PUSH
35296: LD_VAR 0 1
35300: PUSH
35301: LD_INT 12
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: PUSH
35314: EMPTY
35315: LIST
35316: PPUSH
35317: CALL_OW 69
35321: PUSH
35322: LD_INT 2
35324: GREATER
35325: AND
35326: IFFALSE 35349
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35328: LD_ADDR_VAR 0 18
35332: PUSH
35333: LD_INT 11
35335: PUSH
35336: LD_INT 30
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_VAR 0 12
35347: ARRAY
35348: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35349: LD_VAR 0 18
35353: NOT
35354: PUSH
35355: LD_INT 40
35357: PPUSH
35358: LD_VAR 0 16
35362: PPUSH
35363: CALL_OW 321
35367: PUSH
35368: LD_INT 2
35370: EQUAL
35371: AND
35372: PUSH
35373: LD_INT 7
35375: PUSH
35376: LD_VAR 0 5
35380: IN
35381: PUSH
35382: LD_INT 28
35384: PUSH
35385: LD_VAR 0 5
35389: IN
35390: OR
35391: PUSH
35392: LD_INT 45
35394: PUSH
35395: LD_VAR 0 5
35399: IN
35400: OR
35401: AND
35402: IFFALSE 35656
// begin hex := GetHexInfo ( x , y ) ;
35404: LD_ADDR_VAR 0 4
35408: PUSH
35409: LD_VAR 0 10
35413: PPUSH
35414: LD_VAR 0 11
35418: PPUSH
35419: CALL_OW 546
35423: ST_TO_ADDR
// if hex [ 1 ] then
35424: LD_VAR 0 4
35428: PUSH
35429: LD_INT 1
35431: ARRAY
35432: IFFALSE 35436
// exit ;
35434: GO 35839
// height := hex [ 2 ] ;
35436: LD_ADDR_VAR 0 15
35440: PUSH
35441: LD_VAR 0 4
35445: PUSH
35446: LD_INT 2
35448: ARRAY
35449: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35450: LD_ADDR_VAR 0 14
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 3
35463: PUSH
35464: LD_INT 5
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: ST_TO_ADDR
// for i in tmp do
35473: LD_ADDR_VAR 0 8
35477: PUSH
35478: LD_VAR 0 14
35482: PUSH
35483: FOR_IN
35484: IFFALSE 35654
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35486: LD_ADDR_VAR 0 9
35490: PUSH
35491: LD_VAR 0 10
35495: PPUSH
35496: LD_VAR 0 8
35500: PPUSH
35501: LD_INT 5
35503: PPUSH
35504: CALL_OW 272
35508: PUSH
35509: LD_VAR 0 11
35513: PPUSH
35514: LD_VAR 0 8
35518: PPUSH
35519: LD_INT 5
35521: PPUSH
35522: CALL_OW 273
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35531: LD_VAR 0 9
35535: PUSH
35536: LD_INT 1
35538: ARRAY
35539: PPUSH
35540: LD_VAR 0 9
35544: PUSH
35545: LD_INT 2
35547: ARRAY
35548: PPUSH
35549: CALL_OW 488
35553: IFFALSE 35652
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35555: LD_ADDR_VAR 0 4
35559: PUSH
35560: LD_VAR 0 9
35564: PUSH
35565: LD_INT 1
35567: ARRAY
35568: PPUSH
35569: LD_VAR 0 9
35573: PUSH
35574: LD_INT 2
35576: ARRAY
35577: PPUSH
35578: CALL_OW 546
35582: ST_TO_ADDR
// if hex [ 1 ] then
35583: LD_VAR 0 4
35587: PUSH
35588: LD_INT 1
35590: ARRAY
35591: IFFALSE 35595
// continue ;
35593: GO 35483
// h := hex [ 2 ] ;
35595: LD_ADDR_VAR 0 13
35599: PUSH
35600: LD_VAR 0 4
35604: PUSH
35605: LD_INT 2
35607: ARRAY
35608: ST_TO_ADDR
// if h + 7 < height then
35609: LD_VAR 0 13
35613: PUSH
35614: LD_INT 7
35616: PLUS
35617: PUSH
35618: LD_VAR 0 15
35622: LESS
35623: IFFALSE 35652
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35625: LD_ADDR_VAR 0 18
35629: PUSH
35630: LD_INT 7
35632: PUSH
35633: LD_INT 28
35635: PUSH
35636: LD_INT 45
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: PUSH
35644: LD_VAR 0 12
35648: ARRAY
35649: ST_TO_ADDR
// break ;
35650: GO 35654
// end ; end ; end ;
35652: GO 35483
35654: POP
35655: POP
// end ; if not weapon then
35656: LD_VAR 0 18
35660: NOT
35661: IFFALSE 35721
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35663: LD_ADDR_VAR 0 5
35667: PUSH
35668: LD_VAR 0 5
35672: PUSH
35673: LD_INT 11
35675: PUSH
35676: LD_INT 30
35678: PUSH
35679: LD_INT 49
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: DIFF
35687: ST_TO_ADDR
// if not list then
35688: LD_VAR 0 5
35692: NOT
35693: IFFALSE 35697
// exit ;
35695: GO 35839
// weapon := list [ rand ( 1 , list ) ] ;
35697: LD_ADDR_VAR 0 18
35701: PUSH
35702: LD_VAR 0 5
35706: PUSH
35707: LD_INT 1
35709: PPUSH
35710: LD_VAR 0 5
35714: PPUSH
35715: CALL_OW 12
35719: ARRAY
35720: ST_TO_ADDR
// end ; if weapon then
35721: LD_VAR 0 18
35725: IFFALSE 35839
// begin tmp := CostOfWeapon ( weapon ) ;
35727: LD_ADDR_VAR 0 14
35731: PUSH
35732: LD_VAR 0 18
35736: PPUSH
35737: CALL_OW 451
35741: ST_TO_ADDR
// j := GetBase ( tower ) ;
35742: LD_ADDR_VAR 0 9
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 274
35756: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35757: LD_VAR 0 9
35761: PPUSH
35762: LD_INT 1
35764: PPUSH
35765: CALL_OW 275
35769: PUSH
35770: LD_VAR 0 14
35774: PUSH
35775: LD_INT 1
35777: ARRAY
35778: GREATEREQUAL
35779: PUSH
35780: LD_VAR 0 9
35784: PPUSH
35785: LD_INT 2
35787: PPUSH
35788: CALL_OW 275
35792: PUSH
35793: LD_VAR 0 14
35797: PUSH
35798: LD_INT 2
35800: ARRAY
35801: GREATEREQUAL
35802: AND
35803: PUSH
35804: LD_VAR 0 9
35808: PPUSH
35809: LD_INT 3
35811: PPUSH
35812: CALL_OW 275
35816: PUSH
35817: LD_VAR 0 14
35821: PUSH
35822: LD_INT 3
35824: ARRAY
35825: GREATEREQUAL
35826: AND
35827: IFFALSE 35839
// result := weapon ;
35829: LD_ADDR_VAR 0 3
35833: PUSH
35834: LD_VAR 0 18
35838: ST_TO_ADDR
// end ; end ;
35839: LD_VAR 0 3
35843: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35844: LD_INT 0
35846: PPUSH
35847: PPUSH
// result := true ;
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: LD_INT 1
35855: ST_TO_ADDR
// if array1 = array2 then
35856: LD_VAR 0 1
35860: PUSH
35861: LD_VAR 0 2
35865: EQUAL
35866: IFFALSE 35926
// begin for i = 1 to array1 do
35868: LD_ADDR_VAR 0 4
35872: PUSH
35873: DOUBLE
35874: LD_INT 1
35876: DEC
35877: ST_TO_ADDR
35878: LD_VAR 0 1
35882: PUSH
35883: FOR_TO
35884: IFFALSE 35922
// if array1 [ i ] <> array2 [ i ] then
35886: LD_VAR 0 1
35890: PUSH
35891: LD_VAR 0 4
35895: ARRAY
35896: PUSH
35897: LD_VAR 0 2
35901: PUSH
35902: LD_VAR 0 4
35906: ARRAY
35907: NONEQUAL
35908: IFFALSE 35920
// begin result := false ;
35910: LD_ADDR_VAR 0 3
35914: PUSH
35915: LD_INT 0
35917: ST_TO_ADDR
// break ;
35918: GO 35922
// end ;
35920: GO 35883
35922: POP
35923: POP
// end else
35924: GO 35934
// result := false ;
35926: LD_ADDR_VAR 0 3
35930: PUSH
35931: LD_INT 0
35933: ST_TO_ADDR
// end ;
35934: LD_VAR 0 3
35938: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35939: LD_INT 0
35941: PPUSH
35942: PPUSH
// if not array1 or not array2 then
35943: LD_VAR 0 1
35947: NOT
35948: PUSH
35949: LD_VAR 0 2
35953: NOT
35954: OR
35955: IFFALSE 35959
// exit ;
35957: GO 36023
// result := true ;
35959: LD_ADDR_VAR 0 3
35963: PUSH
35964: LD_INT 1
35966: ST_TO_ADDR
// for i = 1 to array1 do
35967: LD_ADDR_VAR 0 4
35971: PUSH
35972: DOUBLE
35973: LD_INT 1
35975: DEC
35976: ST_TO_ADDR
35977: LD_VAR 0 1
35981: PUSH
35982: FOR_TO
35983: IFFALSE 36021
// if array1 [ i ] <> array2 [ i ] then
35985: LD_VAR 0 1
35989: PUSH
35990: LD_VAR 0 4
35994: ARRAY
35995: PUSH
35996: LD_VAR 0 2
36000: PUSH
36001: LD_VAR 0 4
36005: ARRAY
36006: NONEQUAL
36007: IFFALSE 36019
// begin result := false ;
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: LD_INT 0
36016: ST_TO_ADDR
// break ;
36017: GO 36021
// end ;
36019: GO 35982
36021: POP
36022: POP
// end ;
36023: LD_VAR 0 3
36027: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36028: LD_INT 0
36030: PPUSH
36031: PPUSH
36032: PPUSH
// pom := GetBase ( fac ) ;
36033: LD_ADDR_VAR 0 5
36037: PUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL_OW 274
36047: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36048: LD_ADDR_VAR 0 4
36052: PUSH
36053: LD_VAR 0 2
36057: PUSH
36058: LD_INT 1
36060: ARRAY
36061: PPUSH
36062: LD_VAR 0 2
36066: PUSH
36067: LD_INT 2
36069: ARRAY
36070: PPUSH
36071: LD_VAR 0 2
36075: PUSH
36076: LD_INT 3
36078: ARRAY
36079: PPUSH
36080: LD_VAR 0 2
36084: PUSH
36085: LD_INT 4
36087: ARRAY
36088: PPUSH
36089: CALL_OW 449
36093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36094: LD_ADDR_VAR 0 3
36098: PUSH
36099: LD_VAR 0 5
36103: PPUSH
36104: LD_INT 1
36106: PPUSH
36107: CALL_OW 275
36111: PUSH
36112: LD_VAR 0 4
36116: PUSH
36117: LD_INT 1
36119: ARRAY
36120: GREATEREQUAL
36121: PUSH
36122: LD_VAR 0 5
36126: PPUSH
36127: LD_INT 2
36129: PPUSH
36130: CALL_OW 275
36134: PUSH
36135: LD_VAR 0 4
36139: PUSH
36140: LD_INT 2
36142: ARRAY
36143: GREATEREQUAL
36144: AND
36145: PUSH
36146: LD_VAR 0 5
36150: PPUSH
36151: LD_INT 3
36153: PPUSH
36154: CALL_OW 275
36158: PUSH
36159: LD_VAR 0 4
36163: PUSH
36164: LD_INT 3
36166: ARRAY
36167: GREATEREQUAL
36168: AND
36169: ST_TO_ADDR
// end ;
36170: LD_VAR 0 3
36174: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36175: LD_INT 0
36177: PPUSH
36178: PPUSH
36179: PPUSH
36180: PPUSH
// pom := GetBase ( building ) ;
36181: LD_ADDR_VAR 0 3
36185: PUSH
36186: LD_VAR 0 1
36190: PPUSH
36191: CALL_OW 274
36195: ST_TO_ADDR
// if not pom then
36196: LD_VAR 0 3
36200: NOT
36201: IFFALSE 36205
// exit ;
36203: GO 36375
// btype := GetBType ( building ) ;
36205: LD_ADDR_VAR 0 5
36209: PUSH
36210: LD_VAR 0 1
36214: PPUSH
36215: CALL_OW 266
36219: ST_TO_ADDR
// if btype = b_armoury then
36220: LD_VAR 0 5
36224: PUSH
36225: LD_INT 4
36227: EQUAL
36228: IFFALSE 36238
// btype := b_barracks ;
36230: LD_ADDR_VAR 0 5
36234: PUSH
36235: LD_INT 5
36237: ST_TO_ADDR
// if btype = b_depot then
36238: LD_VAR 0 5
36242: PUSH
36243: LD_INT 0
36245: EQUAL
36246: IFFALSE 36256
// btype := b_warehouse ;
36248: LD_ADDR_VAR 0 5
36252: PUSH
36253: LD_INT 1
36255: ST_TO_ADDR
// if btype = b_workshop then
36256: LD_VAR 0 5
36260: PUSH
36261: LD_INT 2
36263: EQUAL
36264: IFFALSE 36274
// btype := b_factory ;
36266: LD_ADDR_VAR 0 5
36270: PUSH
36271: LD_INT 3
36273: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36274: LD_ADDR_VAR 0 4
36278: PUSH
36279: LD_VAR 0 5
36283: PPUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 248
36293: PPUSH
36294: CALL_OW 450
36298: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36299: LD_ADDR_VAR 0 2
36303: PUSH
36304: LD_VAR 0 3
36308: PPUSH
36309: LD_INT 1
36311: PPUSH
36312: CALL_OW 275
36316: PUSH
36317: LD_VAR 0 4
36321: PUSH
36322: LD_INT 1
36324: ARRAY
36325: GREATEREQUAL
36326: PUSH
36327: LD_VAR 0 3
36331: PPUSH
36332: LD_INT 2
36334: PPUSH
36335: CALL_OW 275
36339: PUSH
36340: LD_VAR 0 4
36344: PUSH
36345: LD_INT 2
36347: ARRAY
36348: GREATEREQUAL
36349: AND
36350: PUSH
36351: LD_VAR 0 3
36355: PPUSH
36356: LD_INT 3
36358: PPUSH
36359: CALL_OW 275
36363: PUSH
36364: LD_VAR 0 4
36368: PUSH
36369: LD_INT 3
36371: ARRAY
36372: GREATEREQUAL
36373: AND
36374: ST_TO_ADDR
// end ;
36375: LD_VAR 0 2
36379: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36380: LD_INT 0
36382: PPUSH
36383: PPUSH
36384: PPUSH
// pom := GetBase ( building ) ;
36385: LD_ADDR_VAR 0 4
36389: PUSH
36390: LD_VAR 0 1
36394: PPUSH
36395: CALL_OW 274
36399: ST_TO_ADDR
// if not pom then
36400: LD_VAR 0 4
36404: NOT
36405: IFFALSE 36409
// exit ;
36407: GO 36510
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36409: LD_ADDR_VAR 0 5
36413: PUSH
36414: LD_VAR 0 2
36418: PPUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: CALL_OW 248
36428: PPUSH
36429: CALL_OW 450
36433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36434: LD_ADDR_VAR 0 3
36438: PUSH
36439: LD_VAR 0 4
36443: PPUSH
36444: LD_INT 1
36446: PPUSH
36447: CALL_OW 275
36451: PUSH
36452: LD_VAR 0 5
36456: PUSH
36457: LD_INT 1
36459: ARRAY
36460: GREATEREQUAL
36461: PUSH
36462: LD_VAR 0 4
36466: PPUSH
36467: LD_INT 2
36469: PPUSH
36470: CALL_OW 275
36474: PUSH
36475: LD_VAR 0 5
36479: PUSH
36480: LD_INT 2
36482: ARRAY
36483: GREATEREQUAL
36484: AND
36485: PUSH
36486: LD_VAR 0 4
36490: PPUSH
36491: LD_INT 3
36493: PPUSH
36494: CALL_OW 275
36498: PUSH
36499: LD_VAR 0 5
36503: PUSH
36504: LD_INT 3
36506: ARRAY
36507: GREATEREQUAL
36508: AND
36509: ST_TO_ADDR
// end ;
36510: LD_VAR 0 3
36514: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36515: LD_INT 0
36517: PPUSH
36518: PPUSH
36519: PPUSH
36520: PPUSH
36521: PPUSH
36522: PPUSH
36523: PPUSH
36524: PPUSH
36525: PPUSH
36526: PPUSH
36527: PPUSH
// result := false ;
36528: LD_ADDR_VAR 0 8
36532: PUSH
36533: LD_INT 0
36535: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36536: LD_VAR 0 5
36540: NOT
36541: PUSH
36542: LD_VAR 0 1
36546: NOT
36547: OR
36548: PUSH
36549: LD_VAR 0 2
36553: NOT
36554: OR
36555: PUSH
36556: LD_VAR 0 3
36560: NOT
36561: OR
36562: IFFALSE 36566
// exit ;
36564: GO 37380
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36566: LD_ADDR_VAR 0 14
36570: PUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: LD_VAR 0 2
36580: PPUSH
36581: LD_VAR 0 3
36585: PPUSH
36586: LD_VAR 0 4
36590: PPUSH
36591: LD_VAR 0 5
36595: PUSH
36596: LD_INT 1
36598: ARRAY
36599: PPUSH
36600: CALL_OW 248
36604: PPUSH
36605: LD_INT 0
36607: PPUSH
36608: CALL 38617 0 6
36612: ST_TO_ADDR
// if not hexes then
36613: LD_VAR 0 14
36617: NOT
36618: IFFALSE 36622
// exit ;
36620: GO 37380
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36622: LD_ADDR_VAR 0 17
36626: PUSH
36627: LD_VAR 0 5
36631: PPUSH
36632: LD_INT 22
36634: PUSH
36635: LD_VAR 0 13
36639: PPUSH
36640: CALL_OW 255
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 30
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 30
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PPUSH
36681: CALL_OW 72
36685: ST_TO_ADDR
// for i = 1 to hexes do
36686: LD_ADDR_VAR 0 9
36690: PUSH
36691: DOUBLE
36692: LD_INT 1
36694: DEC
36695: ST_TO_ADDR
36696: LD_VAR 0 14
36700: PUSH
36701: FOR_TO
36702: IFFALSE 37378
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36704: LD_ADDR_VAR 0 13
36708: PUSH
36709: LD_VAR 0 14
36713: PUSH
36714: LD_VAR 0 9
36718: ARRAY
36719: PUSH
36720: LD_INT 1
36722: ARRAY
36723: PPUSH
36724: LD_VAR 0 14
36728: PUSH
36729: LD_VAR 0 9
36733: ARRAY
36734: PUSH
36735: LD_INT 2
36737: ARRAY
36738: PPUSH
36739: CALL_OW 428
36743: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36744: LD_VAR 0 14
36748: PUSH
36749: LD_VAR 0 9
36753: ARRAY
36754: PUSH
36755: LD_INT 1
36757: ARRAY
36758: PPUSH
36759: LD_VAR 0 14
36763: PUSH
36764: LD_VAR 0 9
36768: ARRAY
36769: PUSH
36770: LD_INT 2
36772: ARRAY
36773: PPUSH
36774: CALL_OW 351
36778: PUSH
36779: LD_VAR 0 14
36783: PUSH
36784: LD_VAR 0 9
36788: ARRAY
36789: PUSH
36790: LD_INT 1
36792: ARRAY
36793: PPUSH
36794: LD_VAR 0 14
36798: PUSH
36799: LD_VAR 0 9
36803: ARRAY
36804: PUSH
36805: LD_INT 2
36807: ARRAY
36808: PPUSH
36809: CALL_OW 488
36813: NOT
36814: OR
36815: PUSH
36816: LD_VAR 0 13
36820: PPUSH
36821: CALL_OW 247
36825: PUSH
36826: LD_INT 3
36828: EQUAL
36829: OR
36830: IFFALSE 36836
// exit ;
36832: POP
36833: POP
36834: GO 37380
// if not tmp then
36836: LD_VAR 0 13
36840: NOT
36841: IFFALSE 36845
// continue ;
36843: GO 36701
// result := true ;
36845: LD_ADDR_VAR 0 8
36849: PUSH
36850: LD_INT 1
36852: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36853: LD_VAR 0 6
36857: PUSH
36858: LD_VAR 0 13
36862: PPUSH
36863: CALL_OW 247
36867: PUSH
36868: LD_INT 2
36870: EQUAL
36871: AND
36872: PUSH
36873: LD_VAR 0 13
36877: PPUSH
36878: CALL_OW 263
36882: PUSH
36883: LD_INT 1
36885: EQUAL
36886: AND
36887: IFFALSE 37051
// begin if IsDrivenBy ( tmp ) then
36889: LD_VAR 0 13
36893: PPUSH
36894: CALL_OW 311
36898: IFFALSE 36902
// continue ;
36900: GO 36701
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36902: LD_VAR 0 6
36906: PPUSH
36907: LD_INT 3
36909: PUSH
36910: LD_INT 60
36912: PUSH
36913: EMPTY
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: LD_INT 55
36925: PUSH
36926: EMPTY
36927: LIST
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PPUSH
36937: CALL_OW 72
36941: IFFALSE 37049
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36943: LD_ADDR_VAR 0 18
36947: PUSH
36948: LD_VAR 0 6
36952: PPUSH
36953: LD_INT 3
36955: PUSH
36956: LD_INT 60
36958: PUSH
36959: EMPTY
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 3
36968: PUSH
36969: LD_INT 55
36971: PUSH
36972: EMPTY
36973: LIST
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PPUSH
36983: CALL_OW 72
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: ST_TO_ADDR
// if IsInUnit ( driver ) then
36992: LD_VAR 0 18
36996: PPUSH
36997: CALL_OW 310
37001: IFFALSE 37012
// ComExit ( driver ) ;
37003: LD_VAR 0 18
37007: PPUSH
37008: CALL 61745 0 1
// AddComEnterUnit ( driver , tmp ) ;
37012: LD_VAR 0 18
37016: PPUSH
37017: LD_VAR 0 13
37021: PPUSH
37022: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37026: LD_VAR 0 18
37030: PPUSH
37031: LD_VAR 0 7
37035: PPUSH
37036: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37040: LD_VAR 0 18
37044: PPUSH
37045: CALL_OW 181
// end ; continue ;
37049: GO 36701
// end ; if not cleaners or not tmp in cleaners then
37051: LD_VAR 0 6
37055: NOT
37056: PUSH
37057: LD_VAR 0 13
37061: PUSH
37062: LD_VAR 0 6
37066: IN
37067: NOT
37068: OR
37069: IFFALSE 37376
// begin if dep then
37071: LD_VAR 0 17
37075: IFFALSE 37211
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37077: LD_ADDR_VAR 0 16
37081: PUSH
37082: LD_VAR 0 17
37086: PUSH
37087: LD_INT 1
37089: ARRAY
37090: PPUSH
37091: CALL_OW 250
37095: PPUSH
37096: LD_VAR 0 17
37100: PUSH
37101: LD_INT 1
37103: ARRAY
37104: PPUSH
37105: CALL_OW 254
37109: PPUSH
37110: LD_INT 5
37112: PPUSH
37113: CALL_OW 272
37117: PUSH
37118: LD_VAR 0 17
37122: PUSH
37123: LD_INT 1
37125: ARRAY
37126: PPUSH
37127: CALL_OW 251
37131: PPUSH
37132: LD_VAR 0 17
37136: PUSH
37137: LD_INT 1
37139: ARRAY
37140: PPUSH
37141: CALL_OW 254
37145: PPUSH
37146: LD_INT 5
37148: PPUSH
37149: CALL_OW 273
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37158: LD_VAR 0 16
37162: PUSH
37163: LD_INT 1
37165: ARRAY
37166: PPUSH
37167: LD_VAR 0 16
37171: PUSH
37172: LD_INT 2
37174: ARRAY
37175: PPUSH
37176: CALL_OW 488
37180: IFFALSE 37211
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37182: LD_VAR 0 13
37186: PPUSH
37187: LD_VAR 0 16
37191: PUSH
37192: LD_INT 1
37194: ARRAY
37195: PPUSH
37196: LD_VAR 0 16
37200: PUSH
37201: LD_INT 2
37203: ARRAY
37204: PPUSH
37205: CALL_OW 111
// continue ;
37209: GO 36701
// end ; end ; r := GetDir ( tmp ) ;
37211: LD_ADDR_VAR 0 15
37215: PUSH
37216: LD_VAR 0 13
37220: PPUSH
37221: CALL_OW 254
37225: ST_TO_ADDR
// if r = 5 then
37226: LD_VAR 0 15
37230: PUSH
37231: LD_INT 5
37233: EQUAL
37234: IFFALSE 37244
// r := 0 ;
37236: LD_ADDR_VAR 0 15
37240: PUSH
37241: LD_INT 0
37243: ST_TO_ADDR
// for j = r to 5 do
37244: LD_ADDR_VAR 0 10
37248: PUSH
37249: DOUBLE
37250: LD_VAR 0 15
37254: DEC
37255: ST_TO_ADDR
37256: LD_INT 5
37258: PUSH
37259: FOR_TO
37260: IFFALSE 37374
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37262: LD_ADDR_VAR 0 11
37266: PUSH
37267: LD_VAR 0 13
37271: PPUSH
37272: CALL_OW 250
37276: PPUSH
37277: LD_VAR 0 10
37281: PPUSH
37282: LD_INT 2
37284: PPUSH
37285: CALL_OW 272
37289: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37290: LD_ADDR_VAR 0 12
37294: PUSH
37295: LD_VAR 0 13
37299: PPUSH
37300: CALL_OW 251
37304: PPUSH
37305: LD_VAR 0 10
37309: PPUSH
37310: LD_INT 2
37312: PPUSH
37313: CALL_OW 273
37317: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37318: LD_VAR 0 11
37322: PPUSH
37323: LD_VAR 0 12
37327: PPUSH
37328: CALL_OW 488
37332: PUSH
37333: LD_VAR 0 11
37337: PPUSH
37338: LD_VAR 0 12
37342: PPUSH
37343: CALL_OW 428
37347: NOT
37348: AND
37349: IFFALSE 37372
// begin ComMoveXY ( tmp , _x , _y ) ;
37351: LD_VAR 0 13
37355: PPUSH
37356: LD_VAR 0 11
37360: PPUSH
37361: LD_VAR 0 12
37365: PPUSH
37366: CALL_OW 111
// break ;
37370: GO 37374
// end ; end ;
37372: GO 37259
37374: POP
37375: POP
// end ; end ;
37376: GO 36701
37378: POP
37379: POP
// end ;
37380: LD_VAR 0 8
37384: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37385: LD_INT 0
37387: PPUSH
// result := true ;
37388: LD_ADDR_VAR 0 3
37392: PUSH
37393: LD_INT 1
37395: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37396: LD_VAR 0 2
37400: PUSH
37401: LD_INT 24
37403: DOUBLE
37404: EQUAL
37405: IFTRUE 37415
37407: LD_INT 33
37409: DOUBLE
37410: EQUAL
37411: IFTRUE 37415
37413: GO 37440
37415: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37416: LD_ADDR_VAR 0 3
37420: PUSH
37421: LD_INT 32
37423: PPUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: CALL_OW 321
37433: PUSH
37434: LD_INT 2
37436: EQUAL
37437: ST_TO_ADDR
37438: GO 37760
37440: LD_INT 20
37442: DOUBLE
37443: EQUAL
37444: IFTRUE 37448
37446: GO 37473
37448: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37449: LD_ADDR_VAR 0 3
37453: PUSH
37454: LD_INT 6
37456: PPUSH
37457: LD_VAR 0 1
37461: PPUSH
37462: CALL_OW 321
37466: PUSH
37467: LD_INT 2
37469: EQUAL
37470: ST_TO_ADDR
37471: GO 37760
37473: LD_INT 22
37475: DOUBLE
37476: EQUAL
37477: IFTRUE 37487
37479: LD_INT 36
37481: DOUBLE
37482: EQUAL
37483: IFTRUE 37487
37485: GO 37512
37487: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37488: LD_ADDR_VAR 0 3
37492: PUSH
37493: LD_INT 15
37495: PPUSH
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 321
37505: PUSH
37506: LD_INT 2
37508: EQUAL
37509: ST_TO_ADDR
37510: GO 37760
37512: LD_INT 30
37514: DOUBLE
37515: EQUAL
37516: IFTRUE 37520
37518: GO 37545
37520: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_INT 20
37528: PPUSH
37529: LD_VAR 0 1
37533: PPUSH
37534: CALL_OW 321
37538: PUSH
37539: LD_INT 2
37541: EQUAL
37542: ST_TO_ADDR
37543: GO 37760
37545: LD_INT 28
37547: DOUBLE
37548: EQUAL
37549: IFTRUE 37559
37551: LD_INT 21
37553: DOUBLE
37554: EQUAL
37555: IFTRUE 37559
37557: GO 37584
37559: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37560: LD_ADDR_VAR 0 3
37564: PUSH
37565: LD_INT 21
37567: PPUSH
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 321
37577: PUSH
37578: LD_INT 2
37580: EQUAL
37581: ST_TO_ADDR
37582: GO 37760
37584: LD_INT 16
37586: DOUBLE
37587: EQUAL
37588: IFTRUE 37592
37590: GO 37619
37592: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37593: LD_ADDR_VAR 0 3
37597: PUSH
37598: LD_EXP 105
37602: PPUSH
37603: LD_VAR 0 1
37607: PPUSH
37608: CALL_OW 321
37612: PUSH
37613: LD_INT 2
37615: EQUAL
37616: ST_TO_ADDR
37617: GO 37760
37619: LD_INT 19
37621: DOUBLE
37622: EQUAL
37623: IFTRUE 37633
37625: LD_INT 23
37627: DOUBLE
37628: EQUAL
37629: IFTRUE 37633
37631: GO 37660
37633: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37634: LD_ADDR_VAR 0 3
37638: PUSH
37639: LD_EXP 104
37643: PPUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 321
37653: PUSH
37654: LD_INT 2
37656: EQUAL
37657: ST_TO_ADDR
37658: GO 37760
37660: LD_INT 17
37662: DOUBLE
37663: EQUAL
37664: IFTRUE 37668
37666: GO 37693
37668: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37669: LD_ADDR_VAR 0 3
37673: PUSH
37674: LD_INT 39
37676: PPUSH
37677: LD_VAR 0 1
37681: PPUSH
37682: CALL_OW 321
37686: PUSH
37687: LD_INT 2
37689: EQUAL
37690: ST_TO_ADDR
37691: GO 37760
37693: LD_INT 18
37695: DOUBLE
37696: EQUAL
37697: IFTRUE 37701
37699: GO 37726
37701: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37702: LD_ADDR_VAR 0 3
37706: PUSH
37707: LD_INT 40
37709: PPUSH
37710: LD_VAR 0 1
37714: PPUSH
37715: CALL_OW 321
37719: PUSH
37720: LD_INT 2
37722: EQUAL
37723: ST_TO_ADDR
37724: GO 37760
37726: LD_INT 27
37728: DOUBLE
37729: EQUAL
37730: IFTRUE 37734
37732: GO 37759
37734: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_INT 35
37742: PPUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 321
37752: PUSH
37753: LD_INT 2
37755: EQUAL
37756: ST_TO_ADDR
37757: GO 37760
37759: POP
// end ;
37760: LD_VAR 0 3
37764: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37765: LD_INT 0
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
// result := false ;
37778: LD_ADDR_VAR 0 6
37782: PUSH
37783: LD_INT 0
37785: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37786: LD_VAR 0 1
37790: NOT
37791: PUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL_OW 266
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: IN
37812: NOT
37813: OR
37814: PUSH
37815: LD_VAR 0 2
37819: NOT
37820: OR
37821: PUSH
37822: LD_VAR 0 5
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: LD_INT 3
37838: PUSH
37839: LD_INT 4
37841: PUSH
37842: LD_INT 5
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: IN
37853: NOT
37854: OR
37855: PUSH
37856: LD_VAR 0 3
37860: PPUSH
37861: LD_VAR 0 4
37865: PPUSH
37866: CALL_OW 488
37870: NOT
37871: OR
37872: IFFALSE 37876
// exit ;
37874: GO 38612
// side := GetSide ( depot ) ;
37876: LD_ADDR_VAR 0 9
37880: PUSH
37881: LD_VAR 0 1
37885: PPUSH
37886: CALL_OW 255
37890: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37891: LD_VAR 0 9
37895: PPUSH
37896: LD_VAR 0 2
37900: PPUSH
37901: CALL 37385 0 2
37905: NOT
37906: IFFALSE 37910
// exit ;
37908: GO 38612
// pom := GetBase ( depot ) ;
37910: LD_ADDR_VAR 0 10
37914: PUSH
37915: LD_VAR 0 1
37919: PPUSH
37920: CALL_OW 274
37924: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37925: LD_ADDR_VAR 0 11
37929: PUSH
37930: LD_VAR 0 2
37934: PPUSH
37935: LD_VAR 0 1
37939: PPUSH
37940: CALL_OW 248
37944: PPUSH
37945: CALL_OW 450
37949: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37950: LD_VAR 0 10
37954: PPUSH
37955: LD_INT 1
37957: PPUSH
37958: CALL_OW 275
37962: PUSH
37963: LD_VAR 0 11
37967: PUSH
37968: LD_INT 1
37970: ARRAY
37971: GREATEREQUAL
37972: PUSH
37973: LD_VAR 0 10
37977: PPUSH
37978: LD_INT 2
37980: PPUSH
37981: CALL_OW 275
37985: PUSH
37986: LD_VAR 0 11
37990: PUSH
37991: LD_INT 2
37993: ARRAY
37994: GREATEREQUAL
37995: AND
37996: PUSH
37997: LD_VAR 0 10
38001: PPUSH
38002: LD_INT 3
38004: PPUSH
38005: CALL_OW 275
38009: PUSH
38010: LD_VAR 0 11
38014: PUSH
38015: LD_INT 3
38017: ARRAY
38018: GREATEREQUAL
38019: AND
38020: NOT
38021: IFFALSE 38025
// exit ;
38023: GO 38612
// if GetBType ( depot ) = b_depot then
38025: LD_VAR 0 1
38029: PPUSH
38030: CALL_OW 266
38034: PUSH
38035: LD_INT 0
38037: EQUAL
38038: IFFALSE 38050
// dist := 28 else
38040: LD_ADDR_VAR 0 14
38044: PUSH
38045: LD_INT 28
38047: ST_TO_ADDR
38048: GO 38058
// dist := 36 ;
38050: LD_ADDR_VAR 0 14
38054: PUSH
38055: LD_INT 36
38057: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38058: LD_VAR 0 1
38062: PPUSH
38063: LD_VAR 0 3
38067: PPUSH
38068: LD_VAR 0 4
38072: PPUSH
38073: CALL_OW 297
38077: PUSH
38078: LD_VAR 0 14
38082: GREATER
38083: IFFALSE 38087
// exit ;
38085: GO 38612
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38087: LD_ADDR_VAR 0 12
38091: PUSH
38092: LD_VAR 0 2
38096: PPUSH
38097: LD_VAR 0 3
38101: PPUSH
38102: LD_VAR 0 4
38106: PPUSH
38107: LD_VAR 0 5
38111: PPUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 248
38121: PPUSH
38122: LD_INT 0
38124: PPUSH
38125: CALL 38617 0 6
38129: ST_TO_ADDR
// if not hexes then
38130: LD_VAR 0 12
38134: NOT
38135: IFFALSE 38139
// exit ;
38137: GO 38612
// hex := GetHexInfo ( x , y ) ;
38139: LD_ADDR_VAR 0 15
38143: PUSH
38144: LD_VAR 0 3
38148: PPUSH
38149: LD_VAR 0 4
38153: PPUSH
38154: CALL_OW 546
38158: ST_TO_ADDR
// if hex [ 1 ] then
38159: LD_VAR 0 15
38163: PUSH
38164: LD_INT 1
38166: ARRAY
38167: IFFALSE 38171
// exit ;
38169: GO 38612
// height := hex [ 2 ] ;
38171: LD_ADDR_VAR 0 13
38175: PUSH
38176: LD_VAR 0 15
38180: PUSH
38181: LD_INT 2
38183: ARRAY
38184: ST_TO_ADDR
// for i = 1 to hexes do
38185: LD_ADDR_VAR 0 7
38189: PUSH
38190: DOUBLE
38191: LD_INT 1
38193: DEC
38194: ST_TO_ADDR
38195: LD_VAR 0 12
38199: PUSH
38200: FOR_TO
38201: IFFALSE 38531
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38203: LD_VAR 0 12
38207: PUSH
38208: LD_VAR 0 7
38212: ARRAY
38213: PUSH
38214: LD_INT 1
38216: ARRAY
38217: PPUSH
38218: LD_VAR 0 12
38222: PUSH
38223: LD_VAR 0 7
38227: ARRAY
38228: PUSH
38229: LD_INT 2
38231: ARRAY
38232: PPUSH
38233: CALL_OW 488
38237: NOT
38238: PUSH
38239: LD_VAR 0 12
38243: PUSH
38244: LD_VAR 0 7
38248: ARRAY
38249: PUSH
38250: LD_INT 1
38252: ARRAY
38253: PPUSH
38254: LD_VAR 0 12
38258: PUSH
38259: LD_VAR 0 7
38263: ARRAY
38264: PUSH
38265: LD_INT 2
38267: ARRAY
38268: PPUSH
38269: CALL_OW 428
38273: PUSH
38274: LD_INT 0
38276: GREATER
38277: OR
38278: PUSH
38279: LD_VAR 0 12
38283: PUSH
38284: LD_VAR 0 7
38288: ARRAY
38289: PUSH
38290: LD_INT 1
38292: ARRAY
38293: PPUSH
38294: LD_VAR 0 12
38298: PUSH
38299: LD_VAR 0 7
38303: ARRAY
38304: PUSH
38305: LD_INT 2
38307: ARRAY
38308: PPUSH
38309: CALL_OW 351
38313: OR
38314: IFFALSE 38320
// exit ;
38316: POP
38317: POP
38318: GO 38612
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38320: LD_ADDR_VAR 0 8
38324: PUSH
38325: LD_VAR 0 12
38329: PUSH
38330: LD_VAR 0 7
38334: ARRAY
38335: PUSH
38336: LD_INT 1
38338: ARRAY
38339: PPUSH
38340: LD_VAR 0 12
38344: PUSH
38345: LD_VAR 0 7
38349: ARRAY
38350: PUSH
38351: LD_INT 2
38353: ARRAY
38354: PPUSH
38355: CALL_OW 546
38359: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38360: LD_VAR 0 8
38364: PUSH
38365: LD_INT 1
38367: ARRAY
38368: PUSH
38369: LD_VAR 0 8
38373: PUSH
38374: LD_INT 2
38376: ARRAY
38377: PUSH
38378: LD_VAR 0 13
38382: PUSH
38383: LD_INT 2
38385: PLUS
38386: GREATER
38387: OR
38388: PUSH
38389: LD_VAR 0 8
38393: PUSH
38394: LD_INT 2
38396: ARRAY
38397: PUSH
38398: LD_VAR 0 13
38402: PUSH
38403: LD_INT 2
38405: MINUS
38406: LESS
38407: OR
38408: PUSH
38409: LD_VAR 0 8
38413: PUSH
38414: LD_INT 3
38416: ARRAY
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 8
38423: PUSH
38424: LD_INT 9
38426: PUSH
38427: LD_INT 10
38429: PUSH
38430: LD_INT 11
38432: PUSH
38433: LD_INT 12
38435: PUSH
38436: LD_INT 13
38438: PUSH
38439: LD_INT 16
38441: PUSH
38442: LD_INT 17
38444: PUSH
38445: LD_INT 18
38447: PUSH
38448: LD_INT 19
38450: PUSH
38451: LD_INT 20
38453: PUSH
38454: LD_INT 21
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: IN
38472: NOT
38473: OR
38474: PUSH
38475: LD_VAR 0 8
38479: PUSH
38480: LD_INT 5
38482: ARRAY
38483: NOT
38484: OR
38485: PUSH
38486: LD_VAR 0 8
38490: PUSH
38491: LD_INT 6
38493: ARRAY
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: LD_INT 7
38503: PUSH
38504: LD_INT 9
38506: PUSH
38507: LD_INT 10
38509: PUSH
38510: LD_INT 11
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: IN
38521: NOT
38522: OR
38523: IFFALSE 38529
// exit ;
38525: POP
38526: POP
38527: GO 38612
// end ;
38529: GO 38200
38531: POP
38532: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38533: LD_VAR 0 9
38537: PPUSH
38538: LD_VAR 0 3
38542: PPUSH
38543: LD_VAR 0 4
38547: PPUSH
38548: LD_INT 20
38550: PPUSH
38551: CALL 30558 0 4
38555: PUSH
38556: LD_INT 4
38558: ARRAY
38559: IFFALSE 38563
// exit ;
38561: GO 38612
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38563: LD_VAR 0 2
38567: PUSH
38568: LD_INT 29
38570: PUSH
38571: LD_INT 30
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: IN
38578: PUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: LD_VAR 0 4
38588: PPUSH
38589: LD_VAR 0 9
38593: PPUSH
38594: CALL_OW 440
38598: NOT
38599: AND
38600: IFFALSE 38604
// exit ;
38602: GO 38612
// result := true ;
38604: LD_ADDR_VAR 0 6
38608: PUSH
38609: LD_INT 1
38611: ST_TO_ADDR
// end ;
38612: LD_VAR 0 6
38616: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38617: LD_INT 0
38619: PPUSH
38620: PPUSH
38621: PPUSH
38622: PPUSH
38623: PPUSH
38624: PPUSH
38625: PPUSH
38626: PPUSH
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
38640: PPUSH
38641: PPUSH
38642: PPUSH
38643: PPUSH
38644: PPUSH
38645: PPUSH
38646: PPUSH
38647: PPUSH
38648: PPUSH
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
38666: PPUSH
38667: PPUSH
38668: PPUSH
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
// result = [ ] ;
38677: LD_ADDR_VAR 0 7
38681: PUSH
38682: EMPTY
38683: ST_TO_ADDR
// temp_list = [ ] ;
38684: LD_ADDR_VAR 0 9
38688: PUSH
38689: EMPTY
38690: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38691: LD_VAR 0 4
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: LD_INT 4
38710: PUSH
38711: LD_INT 5
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: IN
38722: NOT
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: IN
38739: PUSH
38740: LD_VAR 0 5
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: IN
38759: NOT
38760: AND
38761: OR
38762: IFFALSE 38766
// exit ;
38764: GO 57157
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38766: LD_VAR 0 1
38770: PUSH
38771: LD_INT 6
38773: PUSH
38774: LD_INT 7
38776: PUSH
38777: LD_INT 8
38779: PUSH
38780: LD_INT 13
38782: PUSH
38783: LD_INT 12
38785: PUSH
38786: LD_INT 15
38788: PUSH
38789: LD_INT 11
38791: PUSH
38792: LD_INT 14
38794: PUSH
38795: LD_INT 10
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: IN
38809: IFFALSE 38819
// btype = b_lab ;
38811: LD_ADDR_VAR 0 1
38815: PUSH
38816: LD_INT 6
38818: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38819: LD_VAR 0 6
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: IN
38838: NOT
38839: PUSH
38840: LD_VAR 0 1
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: LD_INT 3
38856: PUSH
38857: LD_INT 6
38859: PUSH
38860: LD_INT 36
38862: PUSH
38863: LD_INT 4
38865: PUSH
38866: LD_INT 5
38868: PUSH
38869: LD_INT 31
38871: PUSH
38872: LD_INT 32
38874: PUSH
38875: LD_INT 33
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: IN
38891: NOT
38892: PUSH
38893: LD_VAR 0 6
38897: PUSH
38898: LD_INT 1
38900: EQUAL
38901: AND
38902: OR
38903: PUSH
38904: LD_VAR 0 1
38908: PUSH
38909: LD_INT 2
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: IN
38919: NOT
38920: PUSH
38921: LD_VAR 0 6
38925: PUSH
38926: LD_INT 2
38928: EQUAL
38929: AND
38930: OR
38931: IFFALSE 38941
// mode = 0 ;
38933: LD_ADDR_VAR 0 6
38937: PUSH
38938: LD_INT 0
38940: ST_TO_ADDR
// case mode of 0 :
38941: LD_VAR 0 6
38945: PUSH
38946: LD_INT 0
38948: DOUBLE
38949: EQUAL
38950: IFTRUE 38954
38952: GO 50407
38954: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38955: LD_ADDR_VAR 0 11
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: LD_INT 3
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39148: LD_ADDR_VAR 0 12
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: NEG
39272: PUSH
39273: LD_INT 0
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: NEG
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 3
39305: NEG
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 3
39316: NEG
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39344: LD_ADDR_VAR 0 13
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 2
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: LD_INT 3
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 3
39503: NEG
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 3
39515: NEG
39516: PUSH
39517: LD_INT 3
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39543: LD_ADDR_VAR 0 14
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 3
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 3
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39739: LD_ADDR_VAR 0 15
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 3
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39932: LD_ADDR_VAR 0 16
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 2
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: NEG
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 3
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 3
40089: PUSH
40090: LD_INT 3
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: LD_INT 3
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40125: LD_ADDR_VAR 0 17
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: NEG
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40355: LD_ADDR_VAR 0 18
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40585: LD_ADDR_VAR 0 19
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 1
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40815: LD_ADDR_VAR 0 20
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41045: LD_ADDR_VAR 0 21
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: NEG
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41275: LD_ADDR_VAR 0 22
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: NEG
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41505: LD_ADDR_VAR 0 23
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 2
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 3
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41785: LD_ADDR_VAR 0 24
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42061: LD_ADDR_VAR 0 25
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: LD_INT 3
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42335: LD_ADDR_VAR 0 26
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42611: LD_ADDR_VAR 0 27
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 2
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 3
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 3
42856: NEG
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42891: LD_ADDR_VAR 0 28
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 2
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: LD_INT 3
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 3
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 3
43126: NEG
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: LD_INT 2
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43173: LD_ADDR_VAR 0 29
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: LD_INT 2
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 3
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 3
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 3
43417: NEG
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43452: LD_ADDR_VAR 0 30
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 3
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 3
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 3
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 3
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43730: LD_ADDR_VAR 0 31
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: NEG
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: LD_INT 3
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 3
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 3
43973: NEG
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44008: LD_ADDR_VAR 0 32
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 2
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 3
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 3
44251: NEG
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44286: LD_ADDR_VAR 0 33
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 3
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 3
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 3
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 3
44530: NEG
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44565: LD_ADDR_VAR 0 34
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 3
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 3
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44845: LD_ADDR_VAR 0 35
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44957: LD_ADDR_VAR 0 36
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45069: LD_ADDR_VAR 0 37
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45181: LD_ADDR_VAR 0 38
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45293: LD_ADDR_VAR 0 39
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45405: LD_ADDR_VAR 0 40
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45517: LD_ADDR_VAR 0 41
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: LD_INT 3
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 3
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 3
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 3
45802: NEG
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 3
45814: NEG
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: NEG
45827: PUSH
45828: LD_INT 3
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45867: LD_ADDR_VAR 0 42
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 3
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: LD_INT 3
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 3
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46217: LD_ADDR_VAR 0 43
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 3
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 3
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 3
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 3
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 3
46513: NEG
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46565: LD_ADDR_VAR 0 44
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 3
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 3
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 3
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: NEG
46875: PUSH
46876: LD_INT 3
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46915: LD_ADDR_VAR 0 45
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: LD_INT 3
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 3
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 3
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 3
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 3
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47265: LD_ADDR_VAR 0 46
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 3
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 3
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 3
47561: NEG
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47613: LD_ADDR_VAR 0 47
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47764: LD_ADDR_VAR 0 48
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47911: LD_ADDR_VAR 0 49
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48055: LD_ADDR_VAR 0 50
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48199: LD_ADDR_VAR 0 51
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48346: LD_ADDR_VAR 0 52
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48497: LD_ADDR_VAR 0 53
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48727: LD_ADDR_VAR 0 54
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48957: LD_ADDR_VAR 0 55
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49187: LD_ADDR_VAR 0 56
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49417: LD_ADDR_VAR 0 57
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49647: LD_ADDR_VAR 0 58
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49877: LD_ADDR_VAR 0 59
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49965: LD_ADDR_VAR 0 60
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50053: LD_ADDR_VAR 0 61
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50141: LD_ADDR_VAR 0 62
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50229: LD_ADDR_VAR 0 63
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50317: LD_ADDR_VAR 0 64
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: ST_TO_ADDR
// end ; 1 :
50405: GO 56302
50407: LD_INT 1
50409: DOUBLE
50410: EQUAL
50411: IFTRUE 50415
50413: GO 53038
50415: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50416: LD_ADDR_VAR 0 11
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 3
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50460: LD_ADDR_VAR 0 12
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50501: LD_ADDR_VAR 0 13
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 3
50518: PUSH
50519: LD_INT 3
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50541: LD_ADDR_VAR 0 14
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 3
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 3
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50582: LD_ADDR_VAR 0 15
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50626: LD_ADDR_VAR 0 16
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 3
50657: NEG
50658: PUSH
50659: LD_INT 3
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: LIST
50671: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50672: LD_ADDR_VAR 0 17
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: LIST
50715: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50716: LD_ADDR_VAR 0 18
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50757: LD_ADDR_VAR 0 19
50761: PUSH
50762: LD_INT 3
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: LD_INT 3
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50797: LD_ADDR_VAR 0 20
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50838: LD_ADDR_VAR 0 21
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50882: LD_ADDR_VAR 0 22
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 3
50901: NEG
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 3
50913: NEG
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50928: LD_ADDR_VAR 0 23
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 4
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 3
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: LIST
50971: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50972: LD_ADDR_VAR 0 24
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 4
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51013: LD_ADDR_VAR 0 25
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 4
51030: PUSH
51031: LD_INT 3
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: LD_INT 4
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51053: LD_ADDR_VAR 0 26
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 4
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51094: LD_ADDR_VAR 0 27
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 4
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51138: LD_ADDR_VAR 0 28
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: LD_INT 4
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 4
51169: NEG
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51184: LD_ADDR_VAR 0 29
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 4
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 4
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 3
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 5
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 5
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 4
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 6
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 6
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 5
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51339: LD_ADDR_VAR 0 30
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 4
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 4
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 4
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 5
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 5
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 5
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 6
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 6
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51482: LD_ADDR_VAR 0 31
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: LD_INT 3
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 4
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 4
51529: PUSH
51530: LD_INT 4
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: LD_INT 4
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 5
51549: PUSH
51550: LD_INT 4
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 5
51559: PUSH
51560: LD_INT 5
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 4
51569: PUSH
51570: LD_INT 5
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 6
51579: PUSH
51580: LD_INT 5
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 6
51589: PUSH
51590: LD_INT 6
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 5
51599: PUSH
51600: LD_INT 6
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51621: LD_ADDR_VAR 0 32
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 4
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 4
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 5
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 5
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 4
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 6
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 6
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 5
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51764: LD_ADDR_VAR 0 33
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 4
51816: NEG
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 4
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 4
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 5
51850: NEG
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 5
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 5
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 6
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 6
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51919: LD_ADDR_VAR 0 34
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 3
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: LD_INT 4
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 4
51974: NEG
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 4
51986: NEG
51987: PUSH
51988: LD_INT 4
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 4
51998: NEG
51999: PUSH
52000: LD_INT 5
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 5
52010: NEG
52011: PUSH
52012: LD_INT 4
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 5
52022: NEG
52023: PUSH
52024: LD_INT 5
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 5
52034: NEG
52035: PUSH
52036: LD_INT 6
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 6
52046: NEG
52047: PUSH
52048: LD_INT 5
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 6
52058: NEG
52059: PUSH
52060: LD_INT 6
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52082: LD_ADDR_VAR 0 41
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52126: LD_ADDR_VAR 0 42
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 3
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52167: LD_ADDR_VAR 0 43
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52207: LD_ADDR_VAR 0 44
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52248: LD_ADDR_VAR 0 45
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52292: LD_ADDR_VAR 0 46
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: LD_INT 2
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52338: LD_ADDR_VAR 0 47
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52371: LD_ADDR_VAR 0 48
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52402: LD_ADDR_VAR 0 49
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52431: LD_ADDR_VAR 0 50
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52460: LD_ADDR_VAR 0 51
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52491: LD_ADDR_VAR 0 52
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52524: LD_ADDR_VAR 0 53
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52568: LD_ADDR_VAR 0 54
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52609: LD_ADDR_VAR 0 55
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 3
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52649: LD_ADDR_VAR 0 56
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52690: LD_ADDR_VAR 0 57
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52734: LD_ADDR_VAR 0 58
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: NEG
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: LD_INT 3
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52780: LD_ADDR_VAR 0 59
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52824: LD_ADDR_VAR 0 60
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52865: LD_ADDR_VAR 0 61
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: LIST
52904: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52905: LD_ADDR_VAR 0 62
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52946: LD_ADDR_VAR 0 63
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52990: LD_ADDR_VAR 0 64
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// end ; 2 :
53036: GO 56302
53038: LD_INT 2
53040: DOUBLE
53041: EQUAL
53042: IFTRUE 53046
53044: GO 56301
53046: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53047: LD_ADDR_VAR 0 29
53051: PUSH
53052: LD_INT 4
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 5
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 5
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 4
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 5
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 4
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 4
53177: PUSH
53178: LD_INT 4
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 3
53187: PUSH
53188: LD_INT 4
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 4
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 4
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 4
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 5
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 5
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 4
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 5
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 3
53330: NEG
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 3
53341: NEG
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 4
53386: NEG
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 4
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 4
53409: NEG
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 4
53432: NEG
53433: PUSH
53434: LD_INT 4
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 4
53444: NEG
53445: PUSH
53446: LD_INT 5
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 3
53456: NEG
53457: PUSH
53458: LD_INT 4
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 4
53480: NEG
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 5
53492: NEG
53493: PUSH
53494: LD_INT 4
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 5
53504: NEG
53505: PUSH
53506: LD_INT 5
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 3
53516: NEG
53517: PUSH
53518: LD_INT 5
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 5
53528: NEG
53529: PUSH
53530: LD_INT 3
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53585: LD_ADDR_VAR 0 30
53589: PUSH
53590: LD_INT 4
53592: PUSH
53593: LD_INT 4
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 4
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 5
53612: PUSH
53613: LD_INT 4
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 5
53622: PUSH
53623: LD_INT 5
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 4
53632: PUSH
53633: LD_INT 5
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: LD_INT 4
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 5
53662: PUSH
53663: LD_INT 3
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: LD_INT 5
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 3
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: LD_INT 4
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 4
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 4
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 4
53775: NEG
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 4
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 4
53820: NEG
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 5
53831: NEG
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 5
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 5
53854: NEG
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 3
53877: NEG
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 3
53889: NEG
53890: PUSH
53891: LD_INT 4
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 3
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 4
53937: NEG
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 4
53949: NEG
53950: PUSH
53951: LD_INT 4
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: LD_INT 4
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 4
53973: NEG
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 4
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 5
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 4
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 4
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: LD_INT 5
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 3
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: LD_INT 5
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54132: LD_ADDR_VAR 0 31
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 4
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 4
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 5
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 5
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 4
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 5
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 3
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 4
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 4
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 4
54311: NEG
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 4
54334: NEG
54335: PUSH
54336: LD_INT 4
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 4
54346: NEG
54347: PUSH
54348: LD_INT 5
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: NEG
54359: PUSH
54360: LD_INT 4
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: NEG
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 4
54382: NEG
54383: PUSH
54384: LD_INT 3
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 5
54394: NEG
54395: PUSH
54396: LD_INT 4
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 5
54406: NEG
54407: PUSH
54408: LD_INT 5
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: LD_INT 5
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 5
54430: NEG
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 4
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 3
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 3
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 4
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 4
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 4
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 4
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 5
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 5
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 4
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 5
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54682: LD_ADDR_VAR 0 32
54686: PUSH
54687: LD_INT 4
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 4
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 3
54712: NEG
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 3
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 4
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 5
54745: NEG
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 5
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 5
54768: NEG
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: LD_INT 4
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 3
54839: NEG
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 4
54851: NEG
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: NEG
54864: PUSH
54865: LD_INT 4
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 4
54887: NEG
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 4
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 5
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 4
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 4
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 5
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 3
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: LD_INT 5
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 4
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 4
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 3
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 4
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 4
55094: PUSH
55095: LD_INT 4
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 5
55114: PUSH
55115: LD_INT 4
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 5
55124: PUSH
55125: LD_INT 5
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: PUSH
55135: LD_INT 5
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: LD_INT 4
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 5
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 5
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55229: LD_ADDR_VAR 0 33
55233: PUSH
55234: LD_INT 4
55236: NEG
55237: PUSH
55238: LD_INT 4
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 4
55248: NEG
55249: PUSH
55250: LD_INT 5
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 3
55260: NEG
55261: PUSH
55262: LD_INT 4
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 4
55284: NEG
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 5
55296: NEG
55297: PUSH
55298: LD_INT 4
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 5
55308: NEG
55309: PUSH
55310: LD_INT 5
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 5
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 5
55332: NEG
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 4
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 3
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 4
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: LD_INT 4
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 4
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 4
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 5
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 5
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 4
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 5
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 3
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 4
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 4
55569: PUSH
55570: LD_INT 4
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: LD_INT 4
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 3
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 4
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 4
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 4
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 4
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 5
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 5
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 4
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55767: LD_ADDR_VAR 0 34
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 4
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 5
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 4
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 4
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 5
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 5
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 4
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 4
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 4
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 4
55969: PUSH
55970: LD_INT 4
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 4
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 5
55989: PUSH
55990: LD_INT 4
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 5
55999: PUSH
56000: LD_INT 5
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 4
56009: PUSH
56010: LD_INT 5
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 3
56019: PUSH
56020: LD_INT 4
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 5
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 5
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 4
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 4
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 4
56152: NEG
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 4
56163: NEG
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 5
56208: NEG
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 5
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 5
56231: NEG
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: NEG
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// end ; end ;
56299: GO 56302
56301: POP
// case btype of b_depot , b_warehouse :
56302: LD_VAR 0 1
56306: PUSH
56307: LD_INT 0
56309: DOUBLE
56310: EQUAL
56311: IFTRUE 56321
56313: LD_INT 1
56315: DOUBLE
56316: EQUAL
56317: IFTRUE 56321
56319: GO 56522
56321: POP
// case nation of nation_american :
56322: LD_VAR 0 5
56326: PUSH
56327: LD_INT 1
56329: DOUBLE
56330: EQUAL
56331: IFTRUE 56335
56333: GO 56391
56335: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56336: LD_ADDR_VAR 0 9
56340: PUSH
56341: LD_VAR 0 11
56345: PUSH
56346: LD_VAR 0 12
56350: PUSH
56351: LD_VAR 0 13
56355: PUSH
56356: LD_VAR 0 14
56360: PUSH
56361: LD_VAR 0 15
56365: PUSH
56366: LD_VAR 0 16
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: PUSH
56379: LD_VAR 0 4
56383: PUSH
56384: LD_INT 1
56386: PLUS
56387: ARRAY
56388: ST_TO_ADDR
56389: GO 56520
56391: LD_INT 2
56393: DOUBLE
56394: EQUAL
56395: IFTRUE 56399
56397: GO 56455
56399: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56400: LD_ADDR_VAR 0 9
56404: PUSH
56405: LD_VAR 0 17
56409: PUSH
56410: LD_VAR 0 18
56414: PUSH
56415: LD_VAR 0 19
56419: PUSH
56420: LD_VAR 0 20
56424: PUSH
56425: LD_VAR 0 21
56429: PUSH
56430: LD_VAR 0 22
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: PUSH
56443: LD_VAR 0 4
56447: PUSH
56448: LD_INT 1
56450: PLUS
56451: ARRAY
56452: ST_TO_ADDR
56453: GO 56520
56455: LD_INT 3
56457: DOUBLE
56458: EQUAL
56459: IFTRUE 56463
56461: GO 56519
56463: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56464: LD_ADDR_VAR 0 9
56468: PUSH
56469: LD_VAR 0 23
56473: PUSH
56474: LD_VAR 0 24
56478: PUSH
56479: LD_VAR 0 25
56483: PUSH
56484: LD_VAR 0 26
56488: PUSH
56489: LD_VAR 0 27
56493: PUSH
56494: LD_VAR 0 28
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: PUSH
56507: LD_VAR 0 4
56511: PUSH
56512: LD_INT 1
56514: PLUS
56515: ARRAY
56516: ST_TO_ADDR
56517: GO 56520
56519: POP
56520: GO 57075
56522: LD_INT 2
56524: DOUBLE
56525: EQUAL
56526: IFTRUE 56536
56528: LD_INT 3
56530: DOUBLE
56531: EQUAL
56532: IFTRUE 56536
56534: GO 56592
56536: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56537: LD_ADDR_VAR 0 9
56541: PUSH
56542: LD_VAR 0 29
56546: PUSH
56547: LD_VAR 0 30
56551: PUSH
56552: LD_VAR 0 31
56556: PUSH
56557: LD_VAR 0 32
56561: PUSH
56562: LD_VAR 0 33
56566: PUSH
56567: LD_VAR 0 34
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: PUSH
56580: LD_VAR 0 4
56584: PUSH
56585: LD_INT 1
56587: PLUS
56588: ARRAY
56589: ST_TO_ADDR
56590: GO 57075
56592: LD_INT 16
56594: DOUBLE
56595: EQUAL
56596: IFTRUE 56654
56598: LD_INT 17
56600: DOUBLE
56601: EQUAL
56602: IFTRUE 56654
56604: LD_INT 18
56606: DOUBLE
56607: EQUAL
56608: IFTRUE 56654
56610: LD_INT 19
56612: DOUBLE
56613: EQUAL
56614: IFTRUE 56654
56616: LD_INT 22
56618: DOUBLE
56619: EQUAL
56620: IFTRUE 56654
56622: LD_INT 20
56624: DOUBLE
56625: EQUAL
56626: IFTRUE 56654
56628: LD_INT 21
56630: DOUBLE
56631: EQUAL
56632: IFTRUE 56654
56634: LD_INT 23
56636: DOUBLE
56637: EQUAL
56638: IFTRUE 56654
56640: LD_INT 24
56642: DOUBLE
56643: EQUAL
56644: IFTRUE 56654
56646: LD_INT 25
56648: DOUBLE
56649: EQUAL
56650: IFTRUE 56654
56652: GO 56710
56654: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56655: LD_ADDR_VAR 0 9
56659: PUSH
56660: LD_VAR 0 35
56664: PUSH
56665: LD_VAR 0 36
56669: PUSH
56670: LD_VAR 0 37
56674: PUSH
56675: LD_VAR 0 38
56679: PUSH
56680: LD_VAR 0 39
56684: PUSH
56685: LD_VAR 0 40
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: PUSH
56698: LD_VAR 0 4
56702: PUSH
56703: LD_INT 1
56705: PLUS
56706: ARRAY
56707: ST_TO_ADDR
56708: GO 57075
56710: LD_INT 6
56712: DOUBLE
56713: EQUAL
56714: IFTRUE 56766
56716: LD_INT 7
56718: DOUBLE
56719: EQUAL
56720: IFTRUE 56766
56722: LD_INT 8
56724: DOUBLE
56725: EQUAL
56726: IFTRUE 56766
56728: LD_INT 13
56730: DOUBLE
56731: EQUAL
56732: IFTRUE 56766
56734: LD_INT 12
56736: DOUBLE
56737: EQUAL
56738: IFTRUE 56766
56740: LD_INT 15
56742: DOUBLE
56743: EQUAL
56744: IFTRUE 56766
56746: LD_INT 11
56748: DOUBLE
56749: EQUAL
56750: IFTRUE 56766
56752: LD_INT 14
56754: DOUBLE
56755: EQUAL
56756: IFTRUE 56766
56758: LD_INT 10
56760: DOUBLE
56761: EQUAL
56762: IFTRUE 56766
56764: GO 56822
56766: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56767: LD_ADDR_VAR 0 9
56771: PUSH
56772: LD_VAR 0 41
56776: PUSH
56777: LD_VAR 0 42
56781: PUSH
56782: LD_VAR 0 43
56786: PUSH
56787: LD_VAR 0 44
56791: PUSH
56792: LD_VAR 0 45
56796: PUSH
56797: LD_VAR 0 46
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: PUSH
56810: LD_VAR 0 4
56814: PUSH
56815: LD_INT 1
56817: PLUS
56818: ARRAY
56819: ST_TO_ADDR
56820: GO 57075
56822: LD_INT 36
56824: DOUBLE
56825: EQUAL
56826: IFTRUE 56830
56828: GO 56886
56830: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56831: LD_ADDR_VAR 0 9
56835: PUSH
56836: LD_VAR 0 47
56840: PUSH
56841: LD_VAR 0 48
56845: PUSH
56846: LD_VAR 0 49
56850: PUSH
56851: LD_VAR 0 50
56855: PUSH
56856: LD_VAR 0 51
56860: PUSH
56861: LD_VAR 0 52
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: PUSH
56874: LD_VAR 0 4
56878: PUSH
56879: LD_INT 1
56881: PLUS
56882: ARRAY
56883: ST_TO_ADDR
56884: GO 57075
56886: LD_INT 4
56888: DOUBLE
56889: EQUAL
56890: IFTRUE 56912
56892: LD_INT 5
56894: DOUBLE
56895: EQUAL
56896: IFTRUE 56912
56898: LD_INT 34
56900: DOUBLE
56901: EQUAL
56902: IFTRUE 56912
56904: LD_INT 37
56906: DOUBLE
56907: EQUAL
56908: IFTRUE 56912
56910: GO 56968
56912: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56913: LD_ADDR_VAR 0 9
56917: PUSH
56918: LD_VAR 0 53
56922: PUSH
56923: LD_VAR 0 54
56927: PUSH
56928: LD_VAR 0 55
56932: PUSH
56933: LD_VAR 0 56
56937: PUSH
56938: LD_VAR 0 57
56942: PUSH
56943: LD_VAR 0 58
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: PUSH
56956: LD_VAR 0 4
56960: PUSH
56961: LD_INT 1
56963: PLUS
56964: ARRAY
56965: ST_TO_ADDR
56966: GO 57075
56968: LD_INT 31
56970: DOUBLE
56971: EQUAL
56972: IFTRUE 57018
56974: LD_INT 32
56976: DOUBLE
56977: EQUAL
56978: IFTRUE 57018
56980: LD_INT 33
56982: DOUBLE
56983: EQUAL
56984: IFTRUE 57018
56986: LD_INT 27
56988: DOUBLE
56989: EQUAL
56990: IFTRUE 57018
56992: LD_INT 26
56994: DOUBLE
56995: EQUAL
56996: IFTRUE 57018
56998: LD_INT 28
57000: DOUBLE
57001: EQUAL
57002: IFTRUE 57018
57004: LD_INT 29
57006: DOUBLE
57007: EQUAL
57008: IFTRUE 57018
57010: LD_INT 30
57012: DOUBLE
57013: EQUAL
57014: IFTRUE 57018
57016: GO 57074
57018: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57019: LD_ADDR_VAR 0 9
57023: PUSH
57024: LD_VAR 0 59
57028: PUSH
57029: LD_VAR 0 60
57033: PUSH
57034: LD_VAR 0 61
57038: PUSH
57039: LD_VAR 0 62
57043: PUSH
57044: LD_VAR 0 63
57048: PUSH
57049: LD_VAR 0 64
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: PUSH
57062: LD_VAR 0 4
57066: PUSH
57067: LD_INT 1
57069: PLUS
57070: ARRAY
57071: ST_TO_ADDR
57072: GO 57075
57074: POP
// temp_list2 = [ ] ;
57075: LD_ADDR_VAR 0 10
57079: PUSH
57080: EMPTY
57081: ST_TO_ADDR
// for i in temp_list do
57082: LD_ADDR_VAR 0 8
57086: PUSH
57087: LD_VAR 0 9
57091: PUSH
57092: FOR_IN
57093: IFFALSE 57145
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57095: LD_ADDR_VAR 0 10
57099: PUSH
57100: LD_VAR 0 10
57104: PUSH
57105: LD_VAR 0 8
57109: PUSH
57110: LD_INT 1
57112: ARRAY
57113: PUSH
57114: LD_VAR 0 2
57118: PLUS
57119: PUSH
57120: LD_VAR 0 8
57124: PUSH
57125: LD_INT 2
57127: ARRAY
57128: PUSH
57129: LD_VAR 0 3
57133: PLUS
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: EMPTY
57140: LIST
57141: ADD
57142: ST_TO_ADDR
57143: GO 57092
57145: POP
57146: POP
// result = temp_list2 ;
57147: LD_ADDR_VAR 0 7
57151: PUSH
57152: LD_VAR 0 10
57156: ST_TO_ADDR
// end ;
57157: LD_VAR 0 7
57161: RET
// export function EnemyInRange ( unit , dist ) ; begin
57162: LD_INT 0
57164: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57165: LD_ADDR_VAR 0 3
57169: PUSH
57170: LD_VAR 0 1
57174: PPUSH
57175: CALL_OW 255
57179: PPUSH
57180: LD_VAR 0 1
57184: PPUSH
57185: CALL_OW 250
57189: PPUSH
57190: LD_VAR 0 1
57194: PPUSH
57195: CALL_OW 251
57199: PPUSH
57200: LD_VAR 0 2
57204: PPUSH
57205: CALL 30558 0 4
57209: PUSH
57210: LD_INT 4
57212: ARRAY
57213: ST_TO_ADDR
// end ;
57214: LD_VAR 0 3
57218: RET
// export function PlayerSeeMe ( unit ) ; begin
57219: LD_INT 0
57221: PPUSH
// result := See ( your_side , unit ) ;
57222: LD_ADDR_VAR 0 2
57226: PUSH
57227: LD_OWVAR 2
57231: PPUSH
57232: LD_VAR 0 1
57236: PPUSH
57237: CALL_OW 292
57241: ST_TO_ADDR
// end ;
57242: LD_VAR 0 2
57246: RET
// export function ReverseDir ( unit ) ; begin
57247: LD_INT 0
57249: PPUSH
// if not unit then
57250: LD_VAR 0 1
57254: NOT
57255: IFFALSE 57259
// exit ;
57257: GO 57282
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57259: LD_ADDR_VAR 0 2
57263: PUSH
57264: LD_VAR 0 1
57268: PPUSH
57269: CALL_OW 254
57273: PUSH
57274: LD_INT 3
57276: PLUS
57277: PUSH
57278: LD_INT 6
57280: MOD
57281: ST_TO_ADDR
// end ;
57282: LD_VAR 0 2
57286: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57287: LD_INT 0
57289: PPUSH
57290: PPUSH
57291: PPUSH
57292: PPUSH
57293: PPUSH
// if not hexes then
57294: LD_VAR 0 2
57298: NOT
57299: IFFALSE 57303
// exit ;
57301: GO 57451
// dist := 9999 ;
57303: LD_ADDR_VAR 0 5
57307: PUSH
57308: LD_INT 9999
57310: ST_TO_ADDR
// for i = 1 to hexes do
57311: LD_ADDR_VAR 0 4
57315: PUSH
57316: DOUBLE
57317: LD_INT 1
57319: DEC
57320: ST_TO_ADDR
57321: LD_VAR 0 2
57325: PUSH
57326: FOR_TO
57327: IFFALSE 57439
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57329: LD_VAR 0 1
57333: PPUSH
57334: LD_VAR 0 2
57338: PUSH
57339: LD_VAR 0 4
57343: ARRAY
57344: PUSH
57345: LD_INT 1
57347: ARRAY
57348: PPUSH
57349: LD_VAR 0 2
57353: PUSH
57354: LD_VAR 0 4
57358: ARRAY
57359: PUSH
57360: LD_INT 2
57362: ARRAY
57363: PPUSH
57364: CALL_OW 297
57368: PUSH
57369: LD_VAR 0 5
57373: LESS
57374: IFFALSE 57437
// begin hex := hexes [ i ] ;
57376: LD_ADDR_VAR 0 7
57380: PUSH
57381: LD_VAR 0 2
57385: PUSH
57386: LD_VAR 0 4
57390: ARRAY
57391: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57392: LD_ADDR_VAR 0 5
57396: PUSH
57397: LD_VAR 0 1
57401: PPUSH
57402: LD_VAR 0 2
57406: PUSH
57407: LD_VAR 0 4
57411: ARRAY
57412: PUSH
57413: LD_INT 1
57415: ARRAY
57416: PPUSH
57417: LD_VAR 0 2
57421: PUSH
57422: LD_VAR 0 4
57426: ARRAY
57427: PUSH
57428: LD_INT 2
57430: ARRAY
57431: PPUSH
57432: CALL_OW 297
57436: ST_TO_ADDR
// end ; end ;
57437: GO 57326
57439: POP
57440: POP
// result := hex ;
57441: LD_ADDR_VAR 0 3
57445: PUSH
57446: LD_VAR 0 7
57450: ST_TO_ADDR
// end ;
57451: LD_VAR 0 3
57455: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57456: LD_INT 0
57458: PPUSH
57459: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57460: LD_VAR 0 1
57464: NOT
57465: PUSH
57466: LD_VAR 0 1
57470: PUSH
57471: LD_INT 21
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 23
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PPUSH
57495: CALL_OW 69
57499: IN
57500: NOT
57501: OR
57502: IFFALSE 57506
// exit ;
57504: GO 57553
// for i = 1 to 3 do
57506: LD_ADDR_VAR 0 3
57510: PUSH
57511: DOUBLE
57512: LD_INT 1
57514: DEC
57515: ST_TO_ADDR
57516: LD_INT 3
57518: PUSH
57519: FOR_TO
57520: IFFALSE 57551
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57522: LD_VAR 0 1
57526: PPUSH
57527: CALL_OW 250
57531: PPUSH
57532: LD_VAR 0 1
57536: PPUSH
57537: CALL_OW 251
57541: PPUSH
57542: LD_INT 1
57544: PPUSH
57545: CALL_OW 453
57549: GO 57519
57551: POP
57552: POP
// end ;
57553: LD_VAR 0 2
57557: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57558: LD_INT 0
57560: PPUSH
57561: PPUSH
57562: PPUSH
57563: PPUSH
57564: PPUSH
57565: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57566: LD_VAR 0 1
57570: NOT
57571: PUSH
57572: LD_VAR 0 2
57576: NOT
57577: OR
57578: PUSH
57579: LD_VAR 0 1
57583: PPUSH
57584: CALL_OW 314
57588: OR
57589: IFFALSE 57593
// exit ;
57591: GO 58034
// x := GetX ( enemy_unit ) ;
57593: LD_ADDR_VAR 0 7
57597: PUSH
57598: LD_VAR 0 2
57602: PPUSH
57603: CALL_OW 250
57607: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57608: LD_ADDR_VAR 0 8
57612: PUSH
57613: LD_VAR 0 2
57617: PPUSH
57618: CALL_OW 251
57622: ST_TO_ADDR
// if not x or not y then
57623: LD_VAR 0 7
57627: NOT
57628: PUSH
57629: LD_VAR 0 8
57633: NOT
57634: OR
57635: IFFALSE 57639
// exit ;
57637: GO 58034
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57639: LD_ADDR_VAR 0 6
57643: PUSH
57644: LD_VAR 0 7
57648: PPUSH
57649: LD_INT 0
57651: PPUSH
57652: LD_INT 4
57654: PPUSH
57655: CALL_OW 272
57659: PUSH
57660: LD_VAR 0 8
57664: PPUSH
57665: LD_INT 0
57667: PPUSH
57668: LD_INT 4
57670: PPUSH
57671: CALL_OW 273
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_VAR 0 7
57684: PPUSH
57685: LD_INT 1
57687: PPUSH
57688: LD_INT 4
57690: PPUSH
57691: CALL_OW 272
57695: PUSH
57696: LD_VAR 0 8
57700: PPUSH
57701: LD_INT 1
57703: PPUSH
57704: LD_INT 4
57706: PPUSH
57707: CALL_OW 273
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_VAR 0 7
57720: PPUSH
57721: LD_INT 2
57723: PPUSH
57724: LD_INT 4
57726: PPUSH
57727: CALL_OW 272
57731: PUSH
57732: LD_VAR 0 8
57736: PPUSH
57737: LD_INT 2
57739: PPUSH
57740: LD_INT 4
57742: PPUSH
57743: CALL_OW 273
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_VAR 0 7
57756: PPUSH
57757: LD_INT 3
57759: PPUSH
57760: LD_INT 4
57762: PPUSH
57763: CALL_OW 272
57767: PUSH
57768: LD_VAR 0 8
57772: PPUSH
57773: LD_INT 3
57775: PPUSH
57776: LD_INT 4
57778: PPUSH
57779: CALL_OW 273
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_VAR 0 7
57792: PPUSH
57793: LD_INT 4
57795: PPUSH
57796: LD_INT 4
57798: PPUSH
57799: CALL_OW 272
57803: PUSH
57804: LD_VAR 0 8
57808: PPUSH
57809: LD_INT 4
57811: PPUSH
57812: LD_INT 4
57814: PPUSH
57815: CALL_OW 273
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_VAR 0 7
57828: PPUSH
57829: LD_INT 5
57831: PPUSH
57832: LD_INT 4
57834: PPUSH
57835: CALL_OW 272
57839: PUSH
57840: LD_VAR 0 8
57844: PPUSH
57845: LD_INT 5
57847: PPUSH
57848: LD_INT 4
57850: PPUSH
57851: CALL_OW 273
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// for i = tmp downto 1 do
57868: LD_ADDR_VAR 0 4
57872: PUSH
57873: DOUBLE
57874: LD_VAR 0 6
57878: INC
57879: ST_TO_ADDR
57880: LD_INT 1
57882: PUSH
57883: FOR_DOWNTO
57884: IFFALSE 57985
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57886: LD_VAR 0 6
57890: PUSH
57891: LD_VAR 0 4
57895: ARRAY
57896: PUSH
57897: LD_INT 1
57899: ARRAY
57900: PPUSH
57901: LD_VAR 0 6
57905: PUSH
57906: LD_VAR 0 4
57910: ARRAY
57911: PUSH
57912: LD_INT 2
57914: ARRAY
57915: PPUSH
57916: CALL_OW 488
57920: NOT
57921: PUSH
57922: LD_VAR 0 6
57926: PUSH
57927: LD_VAR 0 4
57931: ARRAY
57932: PUSH
57933: LD_INT 1
57935: ARRAY
57936: PPUSH
57937: LD_VAR 0 6
57941: PUSH
57942: LD_VAR 0 4
57946: ARRAY
57947: PUSH
57948: LD_INT 2
57950: ARRAY
57951: PPUSH
57952: CALL_OW 428
57956: PUSH
57957: LD_INT 0
57959: NONEQUAL
57960: OR
57961: IFFALSE 57983
// tmp := Delete ( tmp , i ) ;
57963: LD_ADDR_VAR 0 6
57967: PUSH
57968: LD_VAR 0 6
57972: PPUSH
57973: LD_VAR 0 4
57977: PPUSH
57978: CALL_OW 3
57982: ST_TO_ADDR
57983: GO 57883
57985: POP
57986: POP
// j := GetClosestHex ( unit , tmp ) ;
57987: LD_ADDR_VAR 0 5
57991: PUSH
57992: LD_VAR 0 1
57996: PPUSH
57997: LD_VAR 0 6
58001: PPUSH
58002: CALL 57287 0 2
58006: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58007: LD_VAR 0 1
58011: PPUSH
58012: LD_VAR 0 5
58016: PUSH
58017: LD_INT 1
58019: ARRAY
58020: PPUSH
58021: LD_VAR 0 5
58025: PUSH
58026: LD_INT 2
58028: ARRAY
58029: PPUSH
58030: CALL_OW 111
// end ;
58034: LD_VAR 0 3
58038: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58039: LD_INT 0
58041: PPUSH
58042: PPUSH
58043: PPUSH
// uc_side = 0 ;
58044: LD_ADDR_OWVAR 20
58048: PUSH
58049: LD_INT 0
58051: ST_TO_ADDR
// uc_nation = 0 ;
58052: LD_ADDR_OWVAR 21
58056: PUSH
58057: LD_INT 0
58059: ST_TO_ADDR
// InitHc_All ( ) ;
58060: CALL_OW 584
// InitVc ;
58064: CALL_OW 20
// if mastodonts then
58068: LD_VAR 0 6
58072: IFFALSE 58139
// for i = 1 to mastodonts do
58074: LD_ADDR_VAR 0 11
58078: PUSH
58079: DOUBLE
58080: LD_INT 1
58082: DEC
58083: ST_TO_ADDR
58084: LD_VAR 0 6
58088: PUSH
58089: FOR_TO
58090: IFFALSE 58137
// begin vc_chassis := 31 ;
58092: LD_ADDR_OWVAR 37
58096: PUSH
58097: LD_INT 31
58099: ST_TO_ADDR
// vc_control := control_rider ;
58100: LD_ADDR_OWVAR 38
58104: PUSH
58105: LD_INT 4
58107: ST_TO_ADDR
// animal := CreateVehicle ;
58108: LD_ADDR_VAR 0 12
58112: PUSH
58113: CALL_OW 45
58117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58118: LD_VAR 0 12
58122: PPUSH
58123: LD_VAR 0 8
58127: PPUSH
58128: LD_INT 0
58130: PPUSH
58131: CALL 60274 0 3
// end ;
58135: GO 58089
58137: POP
58138: POP
// if horses then
58139: LD_VAR 0 5
58143: IFFALSE 58210
// for i = 1 to horses do
58145: LD_ADDR_VAR 0 11
58149: PUSH
58150: DOUBLE
58151: LD_INT 1
58153: DEC
58154: ST_TO_ADDR
58155: LD_VAR 0 5
58159: PUSH
58160: FOR_TO
58161: IFFALSE 58208
// begin hc_class := 21 ;
58163: LD_ADDR_OWVAR 28
58167: PUSH
58168: LD_INT 21
58170: ST_TO_ADDR
// hc_gallery :=  ;
58171: LD_ADDR_OWVAR 33
58175: PUSH
58176: LD_STRING 
58178: ST_TO_ADDR
// animal := CreateHuman ;
58179: LD_ADDR_VAR 0 12
58183: PUSH
58184: CALL_OW 44
58188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58189: LD_VAR 0 12
58193: PPUSH
58194: LD_VAR 0 8
58198: PPUSH
58199: LD_INT 0
58201: PPUSH
58202: CALL 60274 0 3
// end ;
58206: GO 58160
58208: POP
58209: POP
// if birds then
58210: LD_VAR 0 1
58214: IFFALSE 58281
// for i = 1 to birds do
58216: LD_ADDR_VAR 0 11
58220: PUSH
58221: DOUBLE
58222: LD_INT 1
58224: DEC
58225: ST_TO_ADDR
58226: LD_VAR 0 1
58230: PUSH
58231: FOR_TO
58232: IFFALSE 58279
// begin hc_class = 18 ;
58234: LD_ADDR_OWVAR 28
58238: PUSH
58239: LD_INT 18
58241: ST_TO_ADDR
// hc_gallery =  ;
58242: LD_ADDR_OWVAR 33
58246: PUSH
58247: LD_STRING 
58249: ST_TO_ADDR
// animal := CreateHuman ;
58250: LD_ADDR_VAR 0 12
58254: PUSH
58255: CALL_OW 44
58259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58260: LD_VAR 0 12
58264: PPUSH
58265: LD_VAR 0 8
58269: PPUSH
58270: LD_INT 0
58272: PPUSH
58273: CALL 60274 0 3
// end ;
58277: GO 58231
58279: POP
58280: POP
// if tigers then
58281: LD_VAR 0 2
58285: IFFALSE 58369
// for i = 1 to tigers do
58287: LD_ADDR_VAR 0 11
58291: PUSH
58292: DOUBLE
58293: LD_INT 1
58295: DEC
58296: ST_TO_ADDR
58297: LD_VAR 0 2
58301: PUSH
58302: FOR_TO
58303: IFFALSE 58367
// begin hc_class = class_tiger ;
58305: LD_ADDR_OWVAR 28
58309: PUSH
58310: LD_INT 14
58312: ST_TO_ADDR
// hc_gallery =  ;
58313: LD_ADDR_OWVAR 33
58317: PUSH
58318: LD_STRING 
58320: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58321: LD_ADDR_OWVAR 35
58325: PUSH
58326: LD_INT 7
58328: NEG
58329: PPUSH
58330: LD_INT 7
58332: PPUSH
58333: CALL_OW 12
58337: ST_TO_ADDR
// animal := CreateHuman ;
58338: LD_ADDR_VAR 0 12
58342: PUSH
58343: CALL_OW 44
58347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58348: LD_VAR 0 12
58352: PPUSH
58353: LD_VAR 0 8
58357: PPUSH
58358: LD_INT 0
58360: PPUSH
58361: CALL 60274 0 3
// end ;
58365: GO 58302
58367: POP
58368: POP
// if apemans then
58369: LD_VAR 0 3
58373: IFFALSE 58496
// for i = 1 to apemans do
58375: LD_ADDR_VAR 0 11
58379: PUSH
58380: DOUBLE
58381: LD_INT 1
58383: DEC
58384: ST_TO_ADDR
58385: LD_VAR 0 3
58389: PUSH
58390: FOR_TO
58391: IFFALSE 58494
// begin hc_class = class_apeman ;
58393: LD_ADDR_OWVAR 28
58397: PUSH
58398: LD_INT 12
58400: ST_TO_ADDR
// hc_gallery =  ;
58401: LD_ADDR_OWVAR 33
58405: PUSH
58406: LD_STRING 
58408: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58409: LD_ADDR_OWVAR 35
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PPUSH
58418: LD_INT 2
58420: PPUSH
58421: CALL_OW 12
58425: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58426: LD_ADDR_OWVAR 31
58430: PUSH
58431: LD_INT 1
58433: PPUSH
58434: LD_INT 3
58436: PPUSH
58437: CALL_OW 12
58441: PUSH
58442: LD_INT 1
58444: PPUSH
58445: LD_INT 3
58447: PPUSH
58448: CALL_OW 12
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// animal := CreateHuman ;
58465: LD_ADDR_VAR 0 12
58469: PUSH
58470: CALL_OW 44
58474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58475: LD_VAR 0 12
58479: PPUSH
58480: LD_VAR 0 8
58484: PPUSH
58485: LD_INT 0
58487: PPUSH
58488: CALL 60274 0 3
// end ;
58492: GO 58390
58494: POP
58495: POP
// if enchidnas then
58496: LD_VAR 0 4
58500: IFFALSE 58567
// for i = 1 to enchidnas do
58502: LD_ADDR_VAR 0 11
58506: PUSH
58507: DOUBLE
58508: LD_INT 1
58510: DEC
58511: ST_TO_ADDR
58512: LD_VAR 0 4
58516: PUSH
58517: FOR_TO
58518: IFFALSE 58565
// begin hc_class = 13 ;
58520: LD_ADDR_OWVAR 28
58524: PUSH
58525: LD_INT 13
58527: ST_TO_ADDR
// hc_gallery =  ;
58528: LD_ADDR_OWVAR 33
58532: PUSH
58533: LD_STRING 
58535: ST_TO_ADDR
// animal := CreateHuman ;
58536: LD_ADDR_VAR 0 12
58540: PUSH
58541: CALL_OW 44
58545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58546: LD_VAR 0 12
58550: PPUSH
58551: LD_VAR 0 8
58555: PPUSH
58556: LD_INT 0
58558: PPUSH
58559: CALL 60274 0 3
// end ;
58563: GO 58517
58565: POP
58566: POP
// if fishes then
58567: LD_VAR 0 7
58571: IFFALSE 58638
// for i = 1 to fishes do
58573: LD_ADDR_VAR 0 11
58577: PUSH
58578: DOUBLE
58579: LD_INT 1
58581: DEC
58582: ST_TO_ADDR
58583: LD_VAR 0 7
58587: PUSH
58588: FOR_TO
58589: IFFALSE 58636
// begin hc_class = 20 ;
58591: LD_ADDR_OWVAR 28
58595: PUSH
58596: LD_INT 20
58598: ST_TO_ADDR
// hc_gallery =  ;
58599: LD_ADDR_OWVAR 33
58603: PUSH
58604: LD_STRING 
58606: ST_TO_ADDR
// animal := CreateHuman ;
58607: LD_ADDR_VAR 0 12
58611: PUSH
58612: CALL_OW 44
58616: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58617: LD_VAR 0 12
58621: PPUSH
58622: LD_VAR 0 9
58626: PPUSH
58627: LD_INT 0
58629: PPUSH
58630: CALL 60274 0 3
// end ;
58634: GO 58588
58636: POP
58637: POP
// end ;
58638: LD_VAR 0 10
58642: RET
// export function WantHeal ( sci , unit ) ; begin
58643: LD_INT 0
58645: PPUSH
// if GetTaskList ( sci ) > 0 then
58646: LD_VAR 0 1
58650: PPUSH
58651: CALL_OW 437
58655: PUSH
58656: LD_INT 0
58658: GREATER
58659: IFFALSE 58729
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58661: LD_VAR 0 1
58665: PPUSH
58666: CALL_OW 437
58670: PUSH
58671: LD_INT 1
58673: ARRAY
58674: PUSH
58675: LD_INT 1
58677: ARRAY
58678: PUSH
58679: LD_STRING l
58681: EQUAL
58682: PUSH
58683: LD_VAR 0 1
58687: PPUSH
58688: CALL_OW 437
58692: PUSH
58693: LD_INT 1
58695: ARRAY
58696: PUSH
58697: LD_INT 4
58699: ARRAY
58700: PUSH
58701: LD_VAR 0 2
58705: EQUAL
58706: AND
58707: IFFALSE 58719
// result := true else
58709: LD_ADDR_VAR 0 3
58713: PUSH
58714: LD_INT 1
58716: ST_TO_ADDR
58717: GO 58727
// result := false ;
58719: LD_ADDR_VAR 0 3
58723: PUSH
58724: LD_INT 0
58726: ST_TO_ADDR
// end else
58727: GO 58737
// result := false ;
58729: LD_ADDR_VAR 0 3
58733: PUSH
58734: LD_INT 0
58736: ST_TO_ADDR
// end ;
58737: LD_VAR 0 3
58741: RET
// export function HealTarget ( sci ) ; begin
58742: LD_INT 0
58744: PPUSH
// if not sci then
58745: LD_VAR 0 1
58749: NOT
58750: IFFALSE 58754
// exit ;
58752: GO 58819
// result := 0 ;
58754: LD_ADDR_VAR 0 2
58758: PUSH
58759: LD_INT 0
58761: ST_TO_ADDR
// if GetTaskList ( sci ) then
58762: LD_VAR 0 1
58766: PPUSH
58767: CALL_OW 437
58771: IFFALSE 58819
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58773: LD_VAR 0 1
58777: PPUSH
58778: CALL_OW 437
58782: PUSH
58783: LD_INT 1
58785: ARRAY
58786: PUSH
58787: LD_INT 1
58789: ARRAY
58790: PUSH
58791: LD_STRING l
58793: EQUAL
58794: IFFALSE 58819
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58796: LD_ADDR_VAR 0 2
58800: PUSH
58801: LD_VAR 0 1
58805: PPUSH
58806: CALL_OW 437
58810: PUSH
58811: LD_INT 1
58813: ARRAY
58814: PUSH
58815: LD_INT 4
58817: ARRAY
58818: ST_TO_ADDR
// end ;
58819: LD_VAR 0 2
58823: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58824: LD_INT 0
58826: PPUSH
58827: PPUSH
58828: PPUSH
58829: PPUSH
// if not base_units then
58830: LD_VAR 0 1
58834: NOT
58835: IFFALSE 58839
// exit ;
58837: GO 58926
// result := false ;
58839: LD_ADDR_VAR 0 2
58843: PUSH
58844: LD_INT 0
58846: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58847: LD_ADDR_VAR 0 5
58851: PUSH
58852: LD_VAR 0 1
58856: PPUSH
58857: LD_INT 21
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PPUSH
58867: CALL_OW 72
58871: ST_TO_ADDR
// if not tmp then
58872: LD_VAR 0 5
58876: NOT
58877: IFFALSE 58881
// exit ;
58879: GO 58926
// for i in tmp do
58881: LD_ADDR_VAR 0 3
58885: PUSH
58886: LD_VAR 0 5
58890: PUSH
58891: FOR_IN
58892: IFFALSE 58924
// begin result := EnemyInRange ( i , 22 ) ;
58894: LD_ADDR_VAR 0 2
58898: PUSH
58899: LD_VAR 0 3
58903: PPUSH
58904: LD_INT 22
58906: PPUSH
58907: CALL 57162 0 2
58911: ST_TO_ADDR
// if result then
58912: LD_VAR 0 2
58916: IFFALSE 58922
// exit ;
58918: POP
58919: POP
58920: GO 58926
// end ;
58922: GO 58891
58924: POP
58925: POP
// end ;
58926: LD_VAR 0 2
58930: RET
// export function FilterByTag ( units , tag ) ; begin
58931: LD_INT 0
58933: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58934: LD_ADDR_VAR 0 3
58938: PUSH
58939: LD_VAR 0 1
58943: PPUSH
58944: LD_INT 120
58946: PUSH
58947: LD_VAR 0 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PPUSH
58956: CALL_OW 72
58960: ST_TO_ADDR
// end ;
58961: LD_VAR 0 3
58965: RET
// export function IsDriver ( un ) ; begin
58966: LD_INT 0
58968: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58969: LD_ADDR_VAR 0 2
58973: PUSH
58974: LD_VAR 0 1
58978: PUSH
58979: LD_INT 55
58981: PUSH
58982: EMPTY
58983: LIST
58984: PPUSH
58985: CALL_OW 69
58989: IN
58990: ST_TO_ADDR
// end ;
58991: LD_VAR 0 2
58995: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58996: LD_INT 0
58998: PPUSH
58999: PPUSH
// list := [ ] ;
59000: LD_ADDR_VAR 0 5
59004: PUSH
59005: EMPTY
59006: ST_TO_ADDR
// case d of 0 :
59007: LD_VAR 0 3
59011: PUSH
59012: LD_INT 0
59014: DOUBLE
59015: EQUAL
59016: IFTRUE 59020
59018: GO 59153
59020: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59021: LD_ADDR_VAR 0 5
59025: PUSH
59026: LD_VAR 0 1
59030: PUSH
59031: LD_INT 4
59033: MINUS
59034: PUSH
59035: LD_VAR 0 2
59039: PUSH
59040: LD_INT 4
59042: MINUS
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: PUSH
59052: LD_VAR 0 1
59056: PUSH
59057: LD_INT 3
59059: MINUS
59060: PUSH
59061: LD_VAR 0 2
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: LIST
59073: PUSH
59074: LD_VAR 0 1
59078: PUSH
59079: LD_INT 4
59081: PLUS
59082: PUSH
59083: LD_VAR 0 2
59087: PUSH
59088: LD_INT 4
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: PUSH
59096: LD_VAR 0 1
59100: PUSH
59101: LD_INT 3
59103: PLUS
59104: PUSH
59105: LD_VAR 0 2
59109: PUSH
59110: LD_INT 3
59112: PLUS
59113: PUSH
59114: LD_INT 5
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: PUSH
59122: LD_VAR 0 1
59126: PUSH
59127: LD_VAR 0 2
59131: PUSH
59132: LD_INT 4
59134: PLUS
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: ST_TO_ADDR
// end ; 1 :
59151: GO 59851
59153: LD_INT 1
59155: DOUBLE
59156: EQUAL
59157: IFTRUE 59161
59159: GO 59294
59161: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59162: LD_ADDR_VAR 0 5
59166: PUSH
59167: LD_VAR 0 1
59171: PUSH
59172: LD_VAR 0 2
59176: PUSH
59177: LD_INT 4
59179: MINUS
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: LIST
59188: PUSH
59189: LD_VAR 0 1
59193: PUSH
59194: LD_INT 3
59196: MINUS
59197: PUSH
59198: LD_VAR 0 2
59202: PUSH
59203: LD_INT 3
59205: MINUS
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: PUSH
59215: LD_VAR 0 1
59219: PUSH
59220: LD_INT 4
59222: MINUS
59223: PUSH
59224: LD_VAR 0 2
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: PUSH
59237: LD_VAR 0 1
59241: PUSH
59242: LD_VAR 0 2
59246: PUSH
59247: LD_INT 3
59249: PLUS
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: PUSH
59259: LD_VAR 0 1
59263: PUSH
59264: LD_INT 4
59266: PLUS
59267: PUSH
59268: LD_VAR 0 2
59272: PUSH
59273: LD_INT 4
59275: PLUS
59276: PUSH
59277: LD_INT 5
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: ST_TO_ADDR
// end ; 2 :
59292: GO 59851
59294: LD_INT 2
59296: DOUBLE
59297: EQUAL
59298: IFTRUE 59302
59300: GO 59431
59302: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59303: LD_ADDR_VAR 0 5
59307: PUSH
59308: LD_VAR 0 1
59312: PUSH
59313: LD_VAR 0 2
59317: PUSH
59318: LD_INT 3
59320: MINUS
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: PUSH
59330: LD_VAR 0 1
59334: PUSH
59335: LD_INT 4
59337: PLUS
59338: PUSH
59339: LD_VAR 0 2
59343: PUSH
59344: LD_INT 4
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: LIST
59351: PUSH
59352: LD_VAR 0 1
59356: PUSH
59357: LD_VAR 0 2
59361: PUSH
59362: LD_INT 4
59364: PLUS
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: PUSH
59374: LD_VAR 0 1
59378: PUSH
59379: LD_INT 3
59381: MINUS
59382: PUSH
59383: LD_VAR 0 2
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: PUSH
59396: LD_VAR 0 1
59400: PUSH
59401: LD_INT 4
59403: MINUS
59404: PUSH
59405: LD_VAR 0 2
59409: PUSH
59410: LD_INT 4
59412: MINUS
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: ST_TO_ADDR
// end ; 3 :
59429: GO 59851
59431: LD_INT 3
59433: DOUBLE
59434: EQUAL
59435: IFTRUE 59439
59437: GO 59572
59439: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59440: LD_ADDR_VAR 0 5
59444: PUSH
59445: LD_VAR 0 1
59449: PUSH
59450: LD_INT 3
59452: PLUS
59453: PUSH
59454: LD_VAR 0 2
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: LIST
59466: PUSH
59467: LD_VAR 0 1
59471: PUSH
59472: LD_INT 4
59474: PLUS
59475: PUSH
59476: LD_VAR 0 2
59480: PUSH
59481: LD_INT 4
59483: PLUS
59484: PUSH
59485: LD_INT 5
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: LIST
59492: PUSH
59493: LD_VAR 0 1
59497: PUSH
59498: LD_INT 4
59500: MINUS
59501: PUSH
59502: LD_VAR 0 2
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: PUSH
59515: LD_VAR 0 1
59519: PUSH
59520: LD_VAR 0 2
59524: PUSH
59525: LD_INT 4
59527: MINUS
59528: PUSH
59529: LD_INT 3
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: PUSH
59537: LD_VAR 0 1
59541: PUSH
59542: LD_INT 3
59544: MINUS
59545: PUSH
59546: LD_VAR 0 2
59550: PUSH
59551: LD_INT 3
59553: MINUS
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: ST_TO_ADDR
// end ; 4 :
59570: GO 59851
59572: LD_INT 4
59574: DOUBLE
59575: EQUAL
59576: IFTRUE 59580
59578: GO 59713
59580: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59581: LD_ADDR_VAR 0 5
59585: PUSH
59586: LD_VAR 0 1
59590: PUSH
59591: LD_VAR 0 2
59595: PUSH
59596: LD_INT 4
59598: PLUS
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: PUSH
59608: LD_VAR 0 1
59612: PUSH
59613: LD_INT 3
59615: PLUS
59616: PUSH
59617: LD_VAR 0 2
59621: PUSH
59622: LD_INT 3
59624: PLUS
59625: PUSH
59626: LD_INT 5
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: LIST
59633: PUSH
59634: LD_VAR 0 1
59638: PUSH
59639: LD_INT 4
59641: PLUS
59642: PUSH
59643: LD_VAR 0 2
59647: PUSH
59648: LD_INT 4
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: PUSH
59656: LD_VAR 0 1
59660: PUSH
59661: LD_VAR 0 2
59665: PUSH
59666: LD_INT 3
59668: MINUS
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: LIST
59677: PUSH
59678: LD_VAR 0 1
59682: PUSH
59683: LD_INT 4
59685: MINUS
59686: PUSH
59687: LD_VAR 0 2
59691: PUSH
59692: LD_INT 4
59694: MINUS
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: ST_TO_ADDR
// end ; 5 :
59711: GO 59851
59713: LD_INT 5
59715: DOUBLE
59716: EQUAL
59717: IFTRUE 59721
59719: GO 59850
59721: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59722: LD_ADDR_VAR 0 5
59726: PUSH
59727: LD_VAR 0 1
59731: PUSH
59732: LD_INT 4
59734: MINUS
59735: PUSH
59736: LD_VAR 0 2
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: LIST
59748: PUSH
59749: LD_VAR 0 1
59753: PUSH
59754: LD_VAR 0 2
59758: PUSH
59759: LD_INT 4
59761: MINUS
59762: PUSH
59763: LD_INT 3
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: LIST
59770: PUSH
59771: LD_VAR 0 1
59775: PUSH
59776: LD_INT 4
59778: PLUS
59779: PUSH
59780: LD_VAR 0 2
59784: PUSH
59785: LD_INT 4
59787: PLUS
59788: PUSH
59789: LD_INT 5
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: PUSH
59797: LD_VAR 0 1
59801: PUSH
59802: LD_INT 3
59804: PLUS
59805: PUSH
59806: LD_VAR 0 2
59810: PUSH
59811: LD_INT 4
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: LD_VAR 0 1
59823: PUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_INT 3
59831: PLUS
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: LIST
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: ST_TO_ADDR
// end ; end ;
59848: GO 59851
59850: POP
// result := list ;
59851: LD_ADDR_VAR 0 4
59855: PUSH
59856: LD_VAR 0 5
59860: ST_TO_ADDR
// end ;
59861: LD_VAR 0 4
59865: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59866: LD_INT 0
59868: PPUSH
59869: PPUSH
59870: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59871: LD_VAR 0 1
59875: NOT
59876: PUSH
59877: LD_VAR 0 2
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: LD_INT 4
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: IN
59900: NOT
59901: OR
59902: IFFALSE 59906
// exit ;
59904: GO 59998
// tmp := [ ] ;
59906: LD_ADDR_VAR 0 5
59910: PUSH
59911: EMPTY
59912: ST_TO_ADDR
// for i in units do
59913: LD_ADDR_VAR 0 4
59917: PUSH
59918: LD_VAR 0 1
59922: PUSH
59923: FOR_IN
59924: IFFALSE 59967
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59926: LD_ADDR_VAR 0 5
59930: PUSH
59931: LD_VAR 0 5
59935: PPUSH
59936: LD_VAR 0 5
59940: PUSH
59941: LD_INT 1
59943: PLUS
59944: PPUSH
59945: LD_VAR 0 4
59949: PPUSH
59950: LD_VAR 0 2
59954: PPUSH
59955: CALL_OW 259
59959: PPUSH
59960: CALL_OW 2
59964: ST_TO_ADDR
59965: GO 59923
59967: POP
59968: POP
// if not tmp then
59969: LD_VAR 0 5
59973: NOT
59974: IFFALSE 59978
// exit ;
59976: GO 59998
// result := SortListByListDesc ( units , tmp ) ;
59978: LD_ADDR_VAR 0 3
59982: PUSH
59983: LD_VAR 0 1
59987: PPUSH
59988: LD_VAR 0 5
59992: PPUSH
59993: CALL_OW 77
59997: ST_TO_ADDR
// end ;
59998: LD_VAR 0 3
60002: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60003: LD_INT 0
60005: PPUSH
60006: PPUSH
60007: PPUSH
// result := false ;
60008: LD_ADDR_VAR 0 3
60012: PUSH
60013: LD_INT 0
60015: ST_TO_ADDR
// x := GetX ( building ) ;
60016: LD_ADDR_VAR 0 4
60020: PUSH
60021: LD_VAR 0 2
60025: PPUSH
60026: CALL_OW 250
60030: ST_TO_ADDR
// y := GetY ( building ) ;
60031: LD_ADDR_VAR 0 5
60035: PUSH
60036: LD_VAR 0 2
60040: PPUSH
60041: CALL_OW 251
60045: ST_TO_ADDR
// if not building or not x or not y then
60046: LD_VAR 0 2
60050: NOT
60051: PUSH
60052: LD_VAR 0 4
60056: NOT
60057: OR
60058: PUSH
60059: LD_VAR 0 5
60063: NOT
60064: OR
60065: IFFALSE 60069
// exit ;
60067: GO 60161
// if GetTaskList ( unit ) then
60069: LD_VAR 0 1
60073: PPUSH
60074: CALL_OW 437
60078: IFFALSE 60161
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60080: LD_STRING e
60082: PUSH
60083: LD_VAR 0 1
60087: PPUSH
60088: CALL_OW 437
60092: PUSH
60093: LD_INT 1
60095: ARRAY
60096: PUSH
60097: LD_INT 1
60099: ARRAY
60100: EQUAL
60101: PUSH
60102: LD_VAR 0 4
60106: PUSH
60107: LD_VAR 0 1
60111: PPUSH
60112: CALL_OW 437
60116: PUSH
60117: LD_INT 1
60119: ARRAY
60120: PUSH
60121: LD_INT 2
60123: ARRAY
60124: EQUAL
60125: AND
60126: PUSH
60127: LD_VAR 0 5
60131: PUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: CALL_OW 437
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: PUSH
60146: LD_INT 3
60148: ARRAY
60149: EQUAL
60150: AND
60151: IFFALSE 60161
// result := true end ;
60153: LD_ADDR_VAR 0 3
60157: PUSH
60158: LD_INT 1
60160: ST_TO_ADDR
// end ;
60161: LD_VAR 0 3
60165: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60166: LD_INT 0
60168: PPUSH
// result := false ;
60169: LD_ADDR_VAR 0 4
60173: PUSH
60174: LD_INT 0
60176: ST_TO_ADDR
// if GetTaskList ( unit ) then
60177: LD_VAR 0 1
60181: PPUSH
60182: CALL_OW 437
60186: IFFALSE 60269
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60188: LD_STRING M
60190: PUSH
60191: LD_VAR 0 1
60195: PPUSH
60196: CALL_OW 437
60200: PUSH
60201: LD_INT 1
60203: ARRAY
60204: PUSH
60205: LD_INT 1
60207: ARRAY
60208: EQUAL
60209: PUSH
60210: LD_VAR 0 2
60214: PUSH
60215: LD_VAR 0 1
60219: PPUSH
60220: CALL_OW 437
60224: PUSH
60225: LD_INT 1
60227: ARRAY
60228: PUSH
60229: LD_INT 2
60231: ARRAY
60232: EQUAL
60233: AND
60234: PUSH
60235: LD_VAR 0 3
60239: PUSH
60240: LD_VAR 0 1
60244: PPUSH
60245: CALL_OW 437
60249: PUSH
60250: LD_INT 1
60252: ARRAY
60253: PUSH
60254: LD_INT 3
60256: ARRAY
60257: EQUAL
60258: AND
60259: IFFALSE 60269
// result := true ;
60261: LD_ADDR_VAR 0 4
60265: PUSH
60266: LD_INT 1
60268: ST_TO_ADDR
// end ; end ;
60269: LD_VAR 0 4
60273: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60274: LD_INT 0
60276: PPUSH
60277: PPUSH
60278: PPUSH
60279: PPUSH
// if not unit or not area then
60280: LD_VAR 0 1
60284: NOT
60285: PUSH
60286: LD_VAR 0 2
60290: NOT
60291: OR
60292: IFFALSE 60296
// exit ;
60294: GO 60460
// tmp := AreaToList ( area , i ) ;
60296: LD_ADDR_VAR 0 6
60300: PUSH
60301: LD_VAR 0 2
60305: PPUSH
60306: LD_VAR 0 5
60310: PPUSH
60311: CALL_OW 517
60315: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60316: LD_ADDR_VAR 0 5
60320: PUSH
60321: DOUBLE
60322: LD_INT 1
60324: DEC
60325: ST_TO_ADDR
60326: LD_VAR 0 6
60330: PUSH
60331: LD_INT 1
60333: ARRAY
60334: PUSH
60335: FOR_TO
60336: IFFALSE 60458
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60338: LD_ADDR_VAR 0 7
60342: PUSH
60343: LD_VAR 0 6
60347: PUSH
60348: LD_INT 1
60350: ARRAY
60351: PUSH
60352: LD_VAR 0 5
60356: ARRAY
60357: PUSH
60358: LD_VAR 0 6
60362: PUSH
60363: LD_INT 2
60365: ARRAY
60366: PUSH
60367: LD_VAR 0 5
60371: ARRAY
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60377: LD_VAR 0 7
60381: PUSH
60382: LD_INT 1
60384: ARRAY
60385: PPUSH
60386: LD_VAR 0 7
60390: PUSH
60391: LD_INT 2
60393: ARRAY
60394: PPUSH
60395: CALL_OW 428
60399: PUSH
60400: LD_INT 0
60402: EQUAL
60403: IFFALSE 60456
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60405: LD_VAR 0 1
60409: PPUSH
60410: LD_VAR 0 7
60414: PUSH
60415: LD_INT 1
60417: ARRAY
60418: PPUSH
60419: LD_VAR 0 7
60423: PUSH
60424: LD_INT 2
60426: ARRAY
60427: PPUSH
60428: LD_VAR 0 3
60432: PPUSH
60433: CALL_OW 48
// result := IsPlaced ( unit ) ;
60437: LD_ADDR_VAR 0 4
60441: PUSH
60442: LD_VAR 0 1
60446: PPUSH
60447: CALL_OW 305
60451: ST_TO_ADDR
// exit ;
60452: POP
60453: POP
60454: GO 60460
// end ; end ;
60456: GO 60335
60458: POP
60459: POP
// end ;
60460: LD_VAR 0 4
60464: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60465: LD_INT 0
60467: PPUSH
60468: PPUSH
60469: PPUSH
// if not side or side > 8 then
60470: LD_VAR 0 1
60474: NOT
60475: PUSH
60476: LD_VAR 0 1
60480: PUSH
60481: LD_INT 8
60483: GREATER
60484: OR
60485: IFFALSE 60489
// exit ;
60487: GO 60676
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60489: LD_ADDR_VAR 0 4
60493: PUSH
60494: LD_INT 22
60496: PUSH
60497: LD_VAR 0 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 21
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PPUSH
60520: CALL_OW 69
60524: ST_TO_ADDR
// if not tmp then
60525: LD_VAR 0 4
60529: NOT
60530: IFFALSE 60534
// exit ;
60532: GO 60676
// enable_addtolog := true ;
60534: LD_ADDR_OWVAR 81
60538: PUSH
60539: LD_INT 1
60541: ST_TO_ADDR
// AddToLog ( [ ) ;
60542: LD_STRING [
60544: PPUSH
60545: CALL_OW 561
// for i in tmp do
60549: LD_ADDR_VAR 0 3
60553: PUSH
60554: LD_VAR 0 4
60558: PUSH
60559: FOR_IN
60560: IFFALSE 60667
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60562: LD_STRING [
60564: PUSH
60565: LD_VAR 0 3
60569: PPUSH
60570: CALL_OW 266
60574: STR
60575: PUSH
60576: LD_STRING , 
60578: STR
60579: PUSH
60580: LD_VAR 0 3
60584: PPUSH
60585: CALL_OW 250
60589: STR
60590: PUSH
60591: LD_STRING , 
60593: STR
60594: PUSH
60595: LD_VAR 0 3
60599: PPUSH
60600: CALL_OW 251
60604: STR
60605: PUSH
60606: LD_STRING , 
60608: STR
60609: PUSH
60610: LD_VAR 0 3
60614: PPUSH
60615: CALL_OW 254
60619: STR
60620: PUSH
60621: LD_STRING , 
60623: STR
60624: PUSH
60625: LD_VAR 0 3
60629: PPUSH
60630: LD_INT 1
60632: PPUSH
60633: CALL_OW 268
60637: STR
60638: PUSH
60639: LD_STRING , 
60641: STR
60642: PUSH
60643: LD_VAR 0 3
60647: PPUSH
60648: LD_INT 2
60650: PPUSH
60651: CALL_OW 268
60655: STR
60656: PUSH
60657: LD_STRING ],
60659: STR
60660: PPUSH
60661: CALL_OW 561
// end ;
60665: GO 60559
60667: POP
60668: POP
// AddToLog ( ]; ) ;
60669: LD_STRING ];
60671: PPUSH
60672: CALL_OW 561
// end ;
60676: LD_VAR 0 2
60680: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60681: LD_INT 0
60683: PPUSH
60684: PPUSH
60685: PPUSH
60686: PPUSH
60687: PPUSH
// if not area or not rate or not max then
60688: LD_VAR 0 1
60692: NOT
60693: PUSH
60694: LD_VAR 0 2
60698: NOT
60699: OR
60700: PUSH
60701: LD_VAR 0 4
60705: NOT
60706: OR
60707: IFFALSE 60711
// exit ;
60709: GO 60900
// while 1 do
60711: LD_INT 1
60713: IFFALSE 60900
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60715: LD_ADDR_VAR 0 9
60719: PUSH
60720: LD_VAR 0 1
60724: PPUSH
60725: LD_INT 1
60727: PPUSH
60728: CALL_OW 287
60732: PUSH
60733: LD_INT 10
60735: MUL
60736: ST_TO_ADDR
// r := rate / 10 ;
60737: LD_ADDR_VAR 0 7
60741: PUSH
60742: LD_VAR 0 2
60746: PUSH
60747: LD_INT 10
60749: DIVREAL
60750: ST_TO_ADDR
// time := 1 1$00 ;
60751: LD_ADDR_VAR 0 8
60755: PUSH
60756: LD_INT 2100
60758: ST_TO_ADDR
// if amount < min then
60759: LD_VAR 0 9
60763: PUSH
60764: LD_VAR 0 3
60768: LESS
60769: IFFALSE 60787
// r := r * 2 else
60771: LD_ADDR_VAR 0 7
60775: PUSH
60776: LD_VAR 0 7
60780: PUSH
60781: LD_INT 2
60783: MUL
60784: ST_TO_ADDR
60785: GO 60813
// if amount > max then
60787: LD_VAR 0 9
60791: PUSH
60792: LD_VAR 0 4
60796: GREATER
60797: IFFALSE 60813
// r := r / 2 ;
60799: LD_ADDR_VAR 0 7
60803: PUSH
60804: LD_VAR 0 7
60808: PUSH
60809: LD_INT 2
60811: DIVREAL
60812: ST_TO_ADDR
// time := time / r ;
60813: LD_ADDR_VAR 0 8
60817: PUSH
60818: LD_VAR 0 8
60822: PUSH
60823: LD_VAR 0 7
60827: DIVREAL
60828: ST_TO_ADDR
// if time < 0 then
60829: LD_VAR 0 8
60833: PUSH
60834: LD_INT 0
60836: LESS
60837: IFFALSE 60854
// time := time * - 1 ;
60839: LD_ADDR_VAR 0 8
60843: PUSH
60844: LD_VAR 0 8
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: MUL
60853: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60854: LD_VAR 0 8
60858: PUSH
60859: LD_INT 35
60861: PPUSH
60862: LD_INT 875
60864: PPUSH
60865: CALL_OW 12
60869: PLUS
60870: PPUSH
60871: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60875: LD_INT 1
60877: PPUSH
60878: LD_INT 5
60880: PPUSH
60881: CALL_OW 12
60885: PPUSH
60886: LD_VAR 0 1
60890: PPUSH
60891: LD_INT 1
60893: PPUSH
60894: CALL_OW 55
// end ;
60898: GO 60711
// end ;
60900: LD_VAR 0 5
60904: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60905: LD_INT 0
60907: PPUSH
60908: PPUSH
60909: PPUSH
60910: PPUSH
60911: PPUSH
60912: PPUSH
60913: PPUSH
60914: PPUSH
// if not turrets or not factories then
60915: LD_VAR 0 1
60919: NOT
60920: PUSH
60921: LD_VAR 0 2
60925: NOT
60926: OR
60927: IFFALSE 60931
// exit ;
60929: GO 61238
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60931: LD_ADDR_VAR 0 10
60935: PUSH
60936: LD_INT 5
60938: PUSH
60939: LD_INT 6
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 4
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: LD_INT 5
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 24
60973: PUSH
60974: LD_INT 25
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 23
60983: PUSH
60984: LD_INT 27
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 42
60997: PUSH
60998: LD_INT 43
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 44
61007: PUSH
61008: LD_INT 46
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 45
61017: PUSH
61018: LD_INT 47
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: ST_TO_ADDR
// result := [ ] ;
61035: LD_ADDR_VAR 0 3
61039: PUSH
61040: EMPTY
61041: ST_TO_ADDR
// for i in turrets do
61042: LD_ADDR_VAR 0 4
61046: PUSH
61047: LD_VAR 0 1
61051: PUSH
61052: FOR_IN
61053: IFFALSE 61236
// begin nat := GetNation ( i ) ;
61055: LD_ADDR_VAR 0 7
61059: PUSH
61060: LD_VAR 0 4
61064: PPUSH
61065: CALL_OW 248
61069: ST_TO_ADDR
// weapon := 0 ;
61070: LD_ADDR_VAR 0 8
61074: PUSH
61075: LD_INT 0
61077: ST_TO_ADDR
// if not nat then
61078: LD_VAR 0 7
61082: NOT
61083: IFFALSE 61087
// continue ;
61085: GO 61052
// for j in list [ nat ] do
61087: LD_ADDR_VAR 0 5
61091: PUSH
61092: LD_VAR 0 10
61096: PUSH
61097: LD_VAR 0 7
61101: ARRAY
61102: PUSH
61103: FOR_IN
61104: IFFALSE 61145
// if GetBWeapon ( i ) = j [ 1 ] then
61106: LD_VAR 0 4
61110: PPUSH
61111: CALL_OW 269
61115: PUSH
61116: LD_VAR 0 5
61120: PUSH
61121: LD_INT 1
61123: ARRAY
61124: EQUAL
61125: IFFALSE 61143
// begin weapon := j [ 2 ] ;
61127: LD_ADDR_VAR 0 8
61131: PUSH
61132: LD_VAR 0 5
61136: PUSH
61137: LD_INT 2
61139: ARRAY
61140: ST_TO_ADDR
// break ;
61141: GO 61145
// end ;
61143: GO 61103
61145: POP
61146: POP
// if not weapon then
61147: LD_VAR 0 8
61151: NOT
61152: IFFALSE 61156
// continue ;
61154: GO 61052
// for k in factories do
61156: LD_ADDR_VAR 0 6
61160: PUSH
61161: LD_VAR 0 2
61165: PUSH
61166: FOR_IN
61167: IFFALSE 61232
// begin weapons := AvailableWeaponList ( k ) ;
61169: LD_ADDR_VAR 0 9
61173: PUSH
61174: LD_VAR 0 6
61178: PPUSH
61179: CALL_OW 478
61183: ST_TO_ADDR
// if not weapons then
61184: LD_VAR 0 9
61188: NOT
61189: IFFALSE 61193
// continue ;
61191: GO 61166
// if weapon in weapons then
61193: LD_VAR 0 8
61197: PUSH
61198: LD_VAR 0 9
61202: IN
61203: IFFALSE 61230
// begin result := [ i , weapon ] ;
61205: LD_ADDR_VAR 0 3
61209: PUSH
61210: LD_VAR 0 4
61214: PUSH
61215: LD_VAR 0 8
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// exit ;
61224: POP
61225: POP
61226: POP
61227: POP
61228: GO 61238
// end ; end ;
61230: GO 61166
61232: POP
61233: POP
// end ;
61234: GO 61052
61236: POP
61237: POP
// end ;
61238: LD_VAR 0 3
61242: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61243: LD_INT 0
61245: PPUSH
// if not side or side > 8 then
61246: LD_VAR 0 3
61250: NOT
61251: PUSH
61252: LD_VAR 0 3
61256: PUSH
61257: LD_INT 8
61259: GREATER
61260: OR
61261: IFFALSE 61265
// exit ;
61263: GO 61324
// if not range then
61265: LD_VAR 0 4
61269: NOT
61270: IFFALSE 61281
// range := - 12 ;
61272: LD_ADDR_VAR 0 4
61276: PUSH
61277: LD_INT 12
61279: NEG
61280: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61281: LD_VAR 0 1
61285: PPUSH
61286: LD_VAR 0 2
61290: PPUSH
61291: LD_VAR 0 3
61295: PPUSH
61296: LD_VAR 0 4
61300: PPUSH
61301: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61305: LD_VAR 0 1
61309: PPUSH
61310: LD_VAR 0 2
61314: PPUSH
61315: LD_VAR 0 3
61319: PPUSH
61320: CALL_OW 331
// end ;
61324: LD_VAR 0 5
61328: RET
// export function Video ( mode ) ; begin
61329: LD_INT 0
61331: PPUSH
// ingame_video = mode ;
61332: LD_ADDR_OWVAR 52
61336: PUSH
61337: LD_VAR 0 1
61341: ST_TO_ADDR
// interface_hidden = mode ;
61342: LD_ADDR_OWVAR 54
61346: PUSH
61347: LD_VAR 0 1
61351: ST_TO_ADDR
// end ;
61352: LD_VAR 0 2
61356: RET
// export function Join ( array , element ) ; begin
61357: LD_INT 0
61359: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61360: LD_ADDR_VAR 0 3
61364: PUSH
61365: LD_VAR 0 1
61369: PPUSH
61370: LD_VAR 0 1
61374: PUSH
61375: LD_INT 1
61377: PLUS
61378: PPUSH
61379: LD_VAR 0 2
61383: PPUSH
61384: CALL_OW 1
61388: ST_TO_ADDR
// end ;
61389: LD_VAR 0 3
61393: RET
// export function JoinUnion ( array , element ) ; begin
61394: LD_INT 0
61396: PPUSH
// result := array union element ;
61397: LD_ADDR_VAR 0 3
61401: PUSH
61402: LD_VAR 0 1
61406: PUSH
61407: LD_VAR 0 2
61411: UNION
61412: ST_TO_ADDR
// end ;
61413: LD_VAR 0 3
61417: RET
// export function GetBehemoths ( side ) ; begin
61418: LD_INT 0
61420: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61421: LD_ADDR_VAR 0 2
61425: PUSH
61426: LD_INT 22
61428: PUSH
61429: LD_VAR 0 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 31
61440: PUSH
61441: LD_INT 25
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PPUSH
61452: CALL_OW 69
61456: ST_TO_ADDR
// end ;
61457: LD_VAR 0 2
61461: RET
// export function Shuffle ( array ) ; var i , index ; begin
61462: LD_INT 0
61464: PPUSH
61465: PPUSH
61466: PPUSH
// result := [ ] ;
61467: LD_ADDR_VAR 0 2
61471: PUSH
61472: EMPTY
61473: ST_TO_ADDR
// if not array then
61474: LD_VAR 0 1
61478: NOT
61479: IFFALSE 61483
// exit ;
61481: GO 61582
// Randomize ;
61483: CALL_OW 10
// for i = array downto 1 do
61487: LD_ADDR_VAR 0 3
61491: PUSH
61492: DOUBLE
61493: LD_VAR 0 1
61497: INC
61498: ST_TO_ADDR
61499: LD_INT 1
61501: PUSH
61502: FOR_DOWNTO
61503: IFFALSE 61580
// begin index := rand ( 1 , array ) ;
61505: LD_ADDR_VAR 0 4
61509: PUSH
61510: LD_INT 1
61512: PPUSH
61513: LD_VAR 0 1
61517: PPUSH
61518: CALL_OW 12
61522: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61523: LD_ADDR_VAR 0 2
61527: PUSH
61528: LD_VAR 0 2
61532: PPUSH
61533: LD_VAR 0 2
61537: PUSH
61538: LD_INT 1
61540: PLUS
61541: PPUSH
61542: LD_VAR 0 1
61546: PUSH
61547: LD_VAR 0 4
61551: ARRAY
61552: PPUSH
61553: CALL_OW 2
61557: ST_TO_ADDR
// array := Delete ( array , index ) ;
61558: LD_ADDR_VAR 0 1
61562: PUSH
61563: LD_VAR 0 1
61567: PPUSH
61568: LD_VAR 0 4
61572: PPUSH
61573: CALL_OW 3
61577: ST_TO_ADDR
// end ;
61578: GO 61502
61580: POP
61581: POP
// end ;
61582: LD_VAR 0 2
61586: RET
// export function GetBaseMaterials ( base ) ; begin
61587: LD_INT 0
61589: PPUSH
// result := [ 0 , 0 , 0 ] ;
61590: LD_ADDR_VAR 0 2
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: ST_TO_ADDR
// if not base then
61609: LD_VAR 0 1
61613: NOT
61614: IFFALSE 61618
// exit ;
61616: GO 61667
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61618: LD_ADDR_VAR 0 2
61622: PUSH
61623: LD_VAR 0 1
61627: PPUSH
61628: LD_INT 1
61630: PPUSH
61631: CALL_OW 275
61635: PUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: LD_INT 2
61643: PPUSH
61644: CALL_OW 275
61648: PUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: LD_INT 3
61656: PPUSH
61657: CALL_OW 275
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: ST_TO_ADDR
// end ;
61667: LD_VAR 0 2
61671: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61672: LD_INT 0
61674: PPUSH
61675: PPUSH
// result := array ;
61676: LD_ADDR_VAR 0 3
61680: PUSH
61681: LD_VAR 0 1
61685: ST_TO_ADDR
// if size > 0 then
61686: LD_VAR 0 2
61690: PUSH
61691: LD_INT 0
61693: GREATER
61694: IFFALSE 61740
// for i := array downto size do
61696: LD_ADDR_VAR 0 4
61700: PUSH
61701: DOUBLE
61702: LD_VAR 0 1
61706: INC
61707: ST_TO_ADDR
61708: LD_VAR 0 2
61712: PUSH
61713: FOR_DOWNTO
61714: IFFALSE 61738
// result := Delete ( result , result ) ;
61716: LD_ADDR_VAR 0 3
61720: PUSH
61721: LD_VAR 0 3
61725: PPUSH
61726: LD_VAR 0 3
61730: PPUSH
61731: CALL_OW 3
61735: ST_TO_ADDR
61736: GO 61713
61738: POP
61739: POP
// end ;
61740: LD_VAR 0 3
61744: RET
// export function ComExit ( unit ) ; var tmp ; begin
61745: LD_INT 0
61747: PPUSH
61748: PPUSH
// if not IsInUnit ( unit ) then
61749: LD_VAR 0 1
61753: PPUSH
61754: CALL_OW 310
61758: NOT
61759: IFFALSE 61763
// exit ;
61761: GO 61823
// tmp := IsInUnit ( unit ) ;
61763: LD_ADDR_VAR 0 3
61767: PUSH
61768: LD_VAR 0 1
61772: PPUSH
61773: CALL_OW 310
61777: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61778: LD_VAR 0 3
61782: PPUSH
61783: CALL_OW 247
61787: PUSH
61788: LD_INT 2
61790: EQUAL
61791: IFFALSE 61804
// ComExitVehicle ( unit ) else
61793: LD_VAR 0 1
61797: PPUSH
61798: CALL_OW 121
61802: GO 61813
// ComExitBuilding ( unit ) ;
61804: LD_VAR 0 1
61808: PPUSH
61809: CALL_OW 122
// result := tmp ;
61813: LD_ADDR_VAR 0 2
61817: PUSH
61818: LD_VAR 0 3
61822: ST_TO_ADDR
// end ;
61823: LD_VAR 0 2
61827: RET
// export function ComExitAll ( units ) ; var i ; begin
61828: LD_INT 0
61830: PPUSH
61831: PPUSH
// if not units then
61832: LD_VAR 0 1
61836: NOT
61837: IFFALSE 61841
// exit ;
61839: GO 61867
// for i in units do
61841: LD_ADDR_VAR 0 3
61845: PUSH
61846: LD_VAR 0 1
61850: PUSH
61851: FOR_IN
61852: IFFALSE 61865
// ComExit ( i ) ;
61854: LD_VAR 0 3
61858: PPUSH
61859: CALL 61745 0 1
61863: GO 61851
61865: POP
61866: POP
// end ;
61867: LD_VAR 0 2
61871: RET
// export function ResetHc ; begin
61872: LD_INT 0
61874: PPUSH
// InitHc ;
61875: CALL_OW 19
// hc_importance := 0 ;
61879: LD_ADDR_OWVAR 32
61883: PUSH
61884: LD_INT 0
61886: ST_TO_ADDR
// end ;
61887: LD_VAR 0 1
61891: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61892: LD_INT 0
61894: PPUSH
61895: PPUSH
61896: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61897: LD_ADDR_VAR 0 6
61901: PUSH
61902: LD_VAR 0 1
61906: PUSH
61907: LD_VAR 0 3
61911: PLUS
61912: PUSH
61913: LD_INT 2
61915: DIV
61916: ST_TO_ADDR
// if _x < 0 then
61917: LD_VAR 0 6
61921: PUSH
61922: LD_INT 0
61924: LESS
61925: IFFALSE 61942
// _x := _x * - 1 ;
61927: LD_ADDR_VAR 0 6
61931: PUSH
61932: LD_VAR 0 6
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: MUL
61941: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61942: LD_ADDR_VAR 0 7
61946: PUSH
61947: LD_VAR 0 2
61951: PUSH
61952: LD_VAR 0 4
61956: PLUS
61957: PUSH
61958: LD_INT 2
61960: DIV
61961: ST_TO_ADDR
// if _y < 0 then
61962: LD_VAR 0 7
61966: PUSH
61967: LD_INT 0
61969: LESS
61970: IFFALSE 61987
// _y := _y * - 1 ;
61972: LD_ADDR_VAR 0 7
61976: PUSH
61977: LD_VAR 0 7
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: MUL
61986: ST_TO_ADDR
// result := [ _x , _y ] ;
61987: LD_ADDR_VAR 0 5
61991: PUSH
61992: LD_VAR 0 6
61996: PUSH
61997: LD_VAR 0 7
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: ST_TO_ADDR
// end ;
62006: LD_VAR 0 5
62010: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62011: LD_INT 0
62013: PPUSH
62014: PPUSH
62015: PPUSH
62016: PPUSH
// task := GetTaskList ( unit ) ;
62017: LD_ADDR_VAR 0 7
62021: PUSH
62022: LD_VAR 0 1
62026: PPUSH
62027: CALL_OW 437
62031: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62032: LD_VAR 0 7
62036: NOT
62037: PUSH
62038: LD_VAR 0 1
62042: PPUSH
62043: LD_VAR 0 2
62047: PPUSH
62048: CALL_OW 308
62052: NOT
62053: AND
62054: IFFALSE 62058
// exit ;
62056: GO 62176
// if IsInArea ( unit , area ) then
62058: LD_VAR 0 1
62062: PPUSH
62063: LD_VAR 0 2
62067: PPUSH
62068: CALL_OW 308
62072: IFFALSE 62090
// begin ComMoveToArea ( unit , goAway ) ;
62074: LD_VAR 0 1
62078: PPUSH
62079: LD_VAR 0 3
62083: PPUSH
62084: CALL_OW 113
// exit ;
62088: GO 62176
// end ; if task [ 1 ] [ 1 ] <> M then
62090: LD_VAR 0 7
62094: PUSH
62095: LD_INT 1
62097: ARRAY
62098: PUSH
62099: LD_INT 1
62101: ARRAY
62102: PUSH
62103: LD_STRING M
62105: NONEQUAL
62106: IFFALSE 62110
// exit ;
62108: GO 62176
// x := task [ 1 ] [ 2 ] ;
62110: LD_ADDR_VAR 0 5
62114: PUSH
62115: LD_VAR 0 7
62119: PUSH
62120: LD_INT 1
62122: ARRAY
62123: PUSH
62124: LD_INT 2
62126: ARRAY
62127: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62128: LD_ADDR_VAR 0 6
62132: PUSH
62133: LD_VAR 0 7
62137: PUSH
62138: LD_INT 1
62140: ARRAY
62141: PUSH
62142: LD_INT 3
62144: ARRAY
62145: ST_TO_ADDR
// if InArea ( x , y , area ) then
62146: LD_VAR 0 5
62150: PPUSH
62151: LD_VAR 0 6
62155: PPUSH
62156: LD_VAR 0 2
62160: PPUSH
62161: CALL_OW 309
62165: IFFALSE 62176
// ComStop ( unit ) ;
62167: LD_VAR 0 1
62171: PPUSH
62172: CALL_OW 141
// end ;
62176: LD_VAR 0 4
62180: RET
// export function Abs ( value ) ; begin
62181: LD_INT 0
62183: PPUSH
// result := value ;
62184: LD_ADDR_VAR 0 2
62188: PUSH
62189: LD_VAR 0 1
62193: ST_TO_ADDR
// if value < 0 then
62194: LD_VAR 0 1
62198: PUSH
62199: LD_INT 0
62201: LESS
62202: IFFALSE 62219
// result := value * - 1 ;
62204: LD_ADDR_VAR 0 2
62208: PUSH
62209: LD_VAR 0 1
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: MUL
62218: ST_TO_ADDR
// end ;
62219: LD_VAR 0 2
62223: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62224: LD_INT 0
62226: PPUSH
62227: PPUSH
62228: PPUSH
62229: PPUSH
62230: PPUSH
62231: PPUSH
62232: PPUSH
62233: PPUSH
// if not unit or not building then
62234: LD_VAR 0 1
62238: NOT
62239: PUSH
62240: LD_VAR 0 2
62244: NOT
62245: OR
62246: IFFALSE 62250
// exit ;
62248: GO 62476
// x := GetX ( building ) ;
62250: LD_ADDR_VAR 0 4
62254: PUSH
62255: LD_VAR 0 2
62259: PPUSH
62260: CALL_OW 250
62264: ST_TO_ADDR
// y := GetY ( building ) ;
62265: LD_ADDR_VAR 0 6
62269: PUSH
62270: LD_VAR 0 2
62274: PPUSH
62275: CALL_OW 251
62279: ST_TO_ADDR
// d := GetDir ( building ) ;
62280: LD_ADDR_VAR 0 8
62284: PUSH
62285: LD_VAR 0 2
62289: PPUSH
62290: CALL_OW 254
62294: ST_TO_ADDR
// r := 4 ;
62295: LD_ADDR_VAR 0 9
62299: PUSH
62300: LD_INT 4
62302: ST_TO_ADDR
// for i := 1 to 5 do
62303: LD_ADDR_VAR 0 10
62307: PUSH
62308: DOUBLE
62309: LD_INT 1
62311: DEC
62312: ST_TO_ADDR
62313: LD_INT 5
62315: PUSH
62316: FOR_TO
62317: IFFALSE 62474
// begin _x := ShiftX ( x , d , r + i ) ;
62319: LD_ADDR_VAR 0 5
62323: PUSH
62324: LD_VAR 0 4
62328: PPUSH
62329: LD_VAR 0 8
62333: PPUSH
62334: LD_VAR 0 9
62338: PUSH
62339: LD_VAR 0 10
62343: PLUS
62344: PPUSH
62345: CALL_OW 272
62349: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62350: LD_ADDR_VAR 0 7
62354: PUSH
62355: LD_VAR 0 6
62359: PPUSH
62360: LD_VAR 0 8
62364: PPUSH
62365: LD_VAR 0 9
62369: PUSH
62370: LD_VAR 0 10
62374: PLUS
62375: PPUSH
62376: CALL_OW 273
62380: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62381: LD_VAR 0 5
62385: PPUSH
62386: LD_VAR 0 7
62390: PPUSH
62391: CALL_OW 488
62395: PUSH
62396: LD_VAR 0 5
62400: PPUSH
62401: LD_VAR 0 7
62405: PPUSH
62406: CALL_OW 428
62410: PPUSH
62411: CALL_OW 247
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: IN
62426: NOT
62427: AND
62428: IFFALSE 62472
// begin ComMoveXY ( unit , _x , _y ) ;
62430: LD_VAR 0 1
62434: PPUSH
62435: LD_VAR 0 5
62439: PPUSH
62440: LD_VAR 0 7
62444: PPUSH
62445: CALL_OW 111
// result := [ _x , _y ] ;
62449: LD_ADDR_VAR 0 3
62453: PUSH
62454: LD_VAR 0 5
62458: PUSH
62459: LD_VAR 0 7
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: ST_TO_ADDR
// exit ;
62468: POP
62469: POP
62470: GO 62476
// end ; end ;
62472: GO 62316
62474: POP
62475: POP
// end ;
62476: LD_VAR 0 3
62480: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62481: LD_INT 0
62483: PPUSH
62484: PPUSH
62485: PPUSH
// result := 0 ;
62486: LD_ADDR_VAR 0 3
62490: PUSH
62491: LD_INT 0
62493: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62494: LD_VAR 0 1
62498: PUSH
62499: LD_INT 0
62501: LESS
62502: PUSH
62503: LD_VAR 0 1
62507: PUSH
62508: LD_INT 8
62510: GREATER
62511: OR
62512: PUSH
62513: LD_VAR 0 2
62517: PUSH
62518: LD_INT 0
62520: LESS
62521: OR
62522: PUSH
62523: LD_VAR 0 2
62527: PUSH
62528: LD_INT 8
62530: GREATER
62531: OR
62532: IFFALSE 62536
// exit ;
62534: GO 62611
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62536: LD_ADDR_VAR 0 4
62540: PUSH
62541: LD_INT 22
62543: PUSH
62544: LD_VAR 0 2
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PPUSH
62553: CALL_OW 69
62557: PUSH
62558: FOR_IN
62559: IFFALSE 62609
// begin un := UnitShoot ( i ) ;
62561: LD_ADDR_VAR 0 5
62565: PUSH
62566: LD_VAR 0 4
62570: PPUSH
62571: CALL_OW 504
62575: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62576: LD_VAR 0 5
62580: PPUSH
62581: CALL_OW 255
62585: PUSH
62586: LD_VAR 0 1
62590: EQUAL
62591: IFFALSE 62607
// begin result := un ;
62593: LD_ADDR_VAR 0 3
62597: PUSH
62598: LD_VAR 0 5
62602: ST_TO_ADDR
// exit ;
62603: POP
62604: POP
62605: GO 62611
// end ; end ;
62607: GO 62558
62609: POP
62610: POP
// end ;
62611: LD_VAR 0 3
62615: RET
// export function GetCargoBay ( units ) ; begin
62616: LD_INT 0
62618: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62619: LD_ADDR_VAR 0 2
62623: PUSH
62624: LD_VAR 0 1
62628: PPUSH
62629: LD_INT 2
62631: PUSH
62632: LD_INT 34
62634: PUSH
62635: LD_INT 12
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 34
62644: PUSH
62645: LD_INT 51
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 34
62654: PUSH
62655: LD_INT 32
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 34
62664: PUSH
62665: LD_EXP 94
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: PPUSH
62681: CALL_OW 72
62685: ST_TO_ADDR
// end ;
62686: LD_VAR 0 2
62690: RET
// export function Negate ( value ) ; begin
62691: LD_INT 0
62693: PPUSH
// result := not value ;
62694: LD_ADDR_VAR 0 2
62698: PUSH
62699: LD_VAR 0 1
62703: NOT
62704: ST_TO_ADDR
// end ;
62705: LD_VAR 0 2
62709: RET
// export function Inc ( value ) ; begin
62710: LD_INT 0
62712: PPUSH
// result := value + 1 ;
62713: LD_ADDR_VAR 0 2
62717: PUSH
62718: LD_VAR 0 1
62722: PUSH
62723: LD_INT 1
62725: PLUS
62726: ST_TO_ADDR
// end ;
62727: LD_VAR 0 2
62731: RET
// export function Dec ( value ) ; begin
62732: LD_INT 0
62734: PPUSH
// result := value - 1 ;
62735: LD_ADDR_VAR 0 2
62739: PUSH
62740: LD_VAR 0 1
62744: PUSH
62745: LD_INT 1
62747: MINUS
62748: ST_TO_ADDR
// end ;
62749: LD_VAR 0 2
62753: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62754: LD_INT 0
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62764: LD_VAR 0 1
62768: PPUSH
62769: LD_VAR 0 2
62773: PPUSH
62774: CALL_OW 488
62778: NOT
62779: PUSH
62780: LD_VAR 0 3
62784: PPUSH
62785: LD_VAR 0 4
62789: PPUSH
62790: CALL_OW 488
62794: NOT
62795: OR
62796: IFFALSE 62809
// begin result := - 1 ;
62798: LD_ADDR_VAR 0 5
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: ST_TO_ADDR
// exit ;
62807: GO 63044
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62809: LD_ADDR_VAR 0 12
62813: PUSH
62814: LD_VAR 0 1
62818: PPUSH
62819: LD_VAR 0 2
62823: PPUSH
62824: LD_VAR 0 3
62828: PPUSH
62829: LD_VAR 0 4
62833: PPUSH
62834: CALL 61892 0 4
62838: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62839: LD_ADDR_VAR 0 11
62843: PUSH
62844: LD_VAR 0 1
62848: PPUSH
62849: LD_VAR 0 2
62853: PPUSH
62854: LD_VAR 0 12
62858: PUSH
62859: LD_INT 1
62861: ARRAY
62862: PPUSH
62863: LD_VAR 0 12
62867: PUSH
62868: LD_INT 2
62870: ARRAY
62871: PPUSH
62872: CALL_OW 298
62876: ST_TO_ADDR
// distance := 9999 ;
62877: LD_ADDR_VAR 0 10
62881: PUSH
62882: LD_INT 9999
62884: ST_TO_ADDR
// for i := 0 to 5 do
62885: LD_ADDR_VAR 0 6
62889: PUSH
62890: DOUBLE
62891: LD_INT 0
62893: DEC
62894: ST_TO_ADDR
62895: LD_INT 5
62897: PUSH
62898: FOR_TO
62899: IFFALSE 63042
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62901: LD_ADDR_VAR 0 7
62905: PUSH
62906: LD_VAR 0 1
62910: PPUSH
62911: LD_VAR 0 6
62915: PPUSH
62916: LD_VAR 0 11
62920: PPUSH
62921: CALL_OW 272
62925: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62926: LD_ADDR_VAR 0 8
62930: PUSH
62931: LD_VAR 0 2
62935: PPUSH
62936: LD_VAR 0 6
62940: PPUSH
62941: LD_VAR 0 11
62945: PPUSH
62946: CALL_OW 273
62950: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62951: LD_VAR 0 7
62955: PPUSH
62956: LD_VAR 0 8
62960: PPUSH
62961: CALL_OW 488
62965: NOT
62966: IFFALSE 62970
// continue ;
62968: GO 62898
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62970: LD_ADDR_VAR 0 9
62974: PUSH
62975: LD_VAR 0 12
62979: PUSH
62980: LD_INT 1
62982: ARRAY
62983: PPUSH
62984: LD_VAR 0 12
62988: PUSH
62989: LD_INT 2
62991: ARRAY
62992: PPUSH
62993: LD_VAR 0 7
62997: PPUSH
62998: LD_VAR 0 8
63002: PPUSH
63003: CALL_OW 298
63007: ST_TO_ADDR
// if tmp < distance then
63008: LD_VAR 0 9
63012: PUSH
63013: LD_VAR 0 10
63017: LESS
63018: IFFALSE 63040
// begin result := i ;
63020: LD_ADDR_VAR 0 5
63024: PUSH
63025: LD_VAR 0 6
63029: ST_TO_ADDR
// distance := tmp ;
63030: LD_ADDR_VAR 0 10
63034: PUSH
63035: LD_VAR 0 9
63039: ST_TO_ADDR
// end ; end ;
63040: GO 62898
63042: POP
63043: POP
// end ;
63044: LD_VAR 0 5
63048: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63049: LD_INT 0
63051: PPUSH
63052: PPUSH
// if not driver or not IsInUnit ( driver ) then
63053: LD_VAR 0 1
63057: NOT
63058: PUSH
63059: LD_VAR 0 1
63063: PPUSH
63064: CALL_OW 310
63068: NOT
63069: OR
63070: IFFALSE 63074
// exit ;
63072: GO 63164
// vehicle := IsInUnit ( driver ) ;
63074: LD_ADDR_VAR 0 3
63078: PUSH
63079: LD_VAR 0 1
63083: PPUSH
63084: CALL_OW 310
63088: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63089: LD_VAR 0 1
63093: PPUSH
63094: LD_STRING \
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: PUSH
63124: LD_STRING E
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_VAR 0 3
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PPUSH
63160: CALL_OW 446
// end ;
63164: LD_VAR 0 2
63168: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63169: LD_INT 0
63171: PPUSH
63172: PPUSH
// if not driver or not IsInUnit ( driver ) then
63173: LD_VAR 0 1
63177: NOT
63178: PUSH
63179: LD_VAR 0 1
63183: PPUSH
63184: CALL_OW 310
63188: NOT
63189: OR
63190: IFFALSE 63194
// exit ;
63192: GO 63284
// vehicle := IsInUnit ( driver ) ;
63194: LD_ADDR_VAR 0 3
63198: PUSH
63199: LD_VAR 0 1
63203: PPUSH
63204: CALL_OW 310
63208: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63209: LD_VAR 0 1
63213: PPUSH
63214: LD_STRING \
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: PUSH
63244: LD_STRING E
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_VAR 0 3
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PPUSH
63280: CALL_OW 447
// end ;
63284: LD_VAR 0 2
63288: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63289: LD_INT 0
63291: PPUSH
63292: PPUSH
63293: PPUSH
// tmp := [ ] ;
63294: LD_ADDR_VAR 0 5
63298: PUSH
63299: EMPTY
63300: ST_TO_ADDR
// for i in units do
63301: LD_ADDR_VAR 0 4
63305: PUSH
63306: LD_VAR 0 1
63310: PUSH
63311: FOR_IN
63312: IFFALSE 63350
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63314: LD_ADDR_VAR 0 5
63318: PUSH
63319: LD_VAR 0 5
63323: PPUSH
63324: LD_VAR 0 5
63328: PUSH
63329: LD_INT 1
63331: PLUS
63332: PPUSH
63333: LD_VAR 0 4
63337: PPUSH
63338: CALL_OW 256
63342: PPUSH
63343: CALL_OW 2
63347: ST_TO_ADDR
63348: GO 63311
63350: POP
63351: POP
// if not tmp then
63352: LD_VAR 0 5
63356: NOT
63357: IFFALSE 63361
// exit ;
63359: GO 63409
// if asc then
63361: LD_VAR 0 2
63365: IFFALSE 63389
// result := SortListByListAsc ( units , tmp ) else
63367: LD_ADDR_VAR 0 3
63371: PUSH
63372: LD_VAR 0 1
63376: PPUSH
63377: LD_VAR 0 5
63381: PPUSH
63382: CALL_OW 76
63386: ST_TO_ADDR
63387: GO 63409
// result := SortListByListDesc ( units , tmp ) ;
63389: LD_ADDR_VAR 0 3
63393: PUSH
63394: LD_VAR 0 1
63398: PPUSH
63399: LD_VAR 0 5
63403: PPUSH
63404: CALL_OW 77
63408: ST_TO_ADDR
// end ;
63409: LD_VAR 0 3
63413: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63414: LD_INT 0
63416: PPUSH
63417: PPUSH
// task := GetTaskList ( mech ) ;
63418: LD_ADDR_VAR 0 4
63422: PUSH
63423: LD_VAR 0 1
63427: PPUSH
63428: CALL_OW 437
63432: ST_TO_ADDR
// if not task then
63433: LD_VAR 0 4
63437: NOT
63438: IFFALSE 63442
// exit ;
63440: GO 63484
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63442: LD_ADDR_VAR 0 3
63446: PUSH
63447: LD_VAR 0 4
63451: PUSH
63452: LD_INT 1
63454: ARRAY
63455: PUSH
63456: LD_INT 1
63458: ARRAY
63459: PUSH
63460: LD_STRING r
63462: EQUAL
63463: PUSH
63464: LD_VAR 0 4
63468: PUSH
63469: LD_INT 1
63471: ARRAY
63472: PUSH
63473: LD_INT 4
63475: ARRAY
63476: PUSH
63477: LD_VAR 0 2
63481: EQUAL
63482: AND
63483: ST_TO_ADDR
// end ;
63484: LD_VAR 0 3
63488: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63489: LD_INT 0
63491: PPUSH
// SetDir ( unit , d ) ;
63492: LD_VAR 0 1
63496: PPUSH
63497: LD_VAR 0 4
63501: PPUSH
63502: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63506: LD_VAR 0 1
63510: PPUSH
63511: LD_VAR 0 2
63515: PPUSH
63516: LD_VAR 0 3
63520: PPUSH
63521: LD_VAR 0 5
63525: PPUSH
63526: CALL_OW 48
// end ;
63530: LD_VAR 0 6
63534: RET
// export function ToNaturalNumber ( number ) ; begin
63535: LD_INT 0
63537: PPUSH
// result := number div 1 ;
63538: LD_ADDR_VAR 0 2
63542: PUSH
63543: LD_VAR 0 1
63547: PUSH
63548: LD_INT 1
63550: DIV
63551: ST_TO_ADDR
// if number < 0 then
63552: LD_VAR 0 1
63556: PUSH
63557: LD_INT 0
63559: LESS
63560: IFFALSE 63570
// result := 0 ;
63562: LD_ADDR_VAR 0 2
63566: PUSH
63567: LD_INT 0
63569: ST_TO_ADDR
// end ;
63570: LD_VAR 0 2
63574: RET
// export function SortByClass ( units , class ) ; var un ; begin
63575: LD_INT 0
63577: PPUSH
63578: PPUSH
// if not units or not class then
63579: LD_VAR 0 1
63583: NOT
63584: PUSH
63585: LD_VAR 0 2
63589: NOT
63590: OR
63591: IFFALSE 63595
// exit ;
63593: GO 63690
// result := [ ] ;
63595: LD_ADDR_VAR 0 3
63599: PUSH
63600: EMPTY
63601: ST_TO_ADDR
// for un in units do
63602: LD_ADDR_VAR 0 4
63606: PUSH
63607: LD_VAR 0 1
63611: PUSH
63612: FOR_IN
63613: IFFALSE 63688
// if GetClass ( un ) = class then
63615: LD_VAR 0 4
63619: PPUSH
63620: CALL_OW 257
63624: PUSH
63625: LD_VAR 0 2
63629: EQUAL
63630: IFFALSE 63657
// result := Insert ( result , 1 , un ) else
63632: LD_ADDR_VAR 0 3
63636: PUSH
63637: LD_VAR 0 3
63641: PPUSH
63642: LD_INT 1
63644: PPUSH
63645: LD_VAR 0 4
63649: PPUSH
63650: CALL_OW 2
63654: ST_TO_ADDR
63655: GO 63686
// result := Replace ( result , result + 1 , un ) ;
63657: LD_ADDR_VAR 0 3
63661: PUSH
63662: LD_VAR 0 3
63666: PPUSH
63667: LD_VAR 0 3
63671: PUSH
63672: LD_INT 1
63674: PLUS
63675: PPUSH
63676: LD_VAR 0 4
63680: PPUSH
63681: CALL_OW 1
63685: ST_TO_ADDR
63686: GO 63612
63688: POP
63689: POP
// end ;
63690: LD_VAR 0 3
63694: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63695: LD_INT 0
63697: PPUSH
63698: PPUSH
63699: PPUSH
63700: PPUSH
63701: PPUSH
63702: PPUSH
63703: PPUSH
// result := [ ] ;
63704: LD_ADDR_VAR 0 4
63708: PUSH
63709: EMPTY
63710: ST_TO_ADDR
// if x - r < 0 then
63711: LD_VAR 0 1
63715: PUSH
63716: LD_VAR 0 3
63720: MINUS
63721: PUSH
63722: LD_INT 0
63724: LESS
63725: IFFALSE 63737
// min_x := 0 else
63727: LD_ADDR_VAR 0 8
63731: PUSH
63732: LD_INT 0
63734: ST_TO_ADDR
63735: GO 63753
// min_x := x - r ;
63737: LD_ADDR_VAR 0 8
63741: PUSH
63742: LD_VAR 0 1
63746: PUSH
63747: LD_VAR 0 3
63751: MINUS
63752: ST_TO_ADDR
// if y - r < 0 then
63753: LD_VAR 0 2
63757: PUSH
63758: LD_VAR 0 3
63762: MINUS
63763: PUSH
63764: LD_INT 0
63766: LESS
63767: IFFALSE 63779
// min_y := 0 else
63769: LD_ADDR_VAR 0 7
63773: PUSH
63774: LD_INT 0
63776: ST_TO_ADDR
63777: GO 63795
// min_y := y - r ;
63779: LD_ADDR_VAR 0 7
63783: PUSH
63784: LD_VAR 0 2
63788: PUSH
63789: LD_VAR 0 3
63793: MINUS
63794: ST_TO_ADDR
// max_x := x + r ;
63795: LD_ADDR_VAR 0 9
63799: PUSH
63800: LD_VAR 0 1
63804: PUSH
63805: LD_VAR 0 3
63809: PLUS
63810: ST_TO_ADDR
// max_y := y + r ;
63811: LD_ADDR_VAR 0 10
63815: PUSH
63816: LD_VAR 0 2
63820: PUSH
63821: LD_VAR 0 3
63825: PLUS
63826: ST_TO_ADDR
// for _x = min_x to max_x do
63827: LD_ADDR_VAR 0 5
63831: PUSH
63832: DOUBLE
63833: LD_VAR 0 8
63837: DEC
63838: ST_TO_ADDR
63839: LD_VAR 0 9
63843: PUSH
63844: FOR_TO
63845: IFFALSE 63946
// for _y = min_y to max_y do
63847: LD_ADDR_VAR 0 6
63851: PUSH
63852: DOUBLE
63853: LD_VAR 0 7
63857: DEC
63858: ST_TO_ADDR
63859: LD_VAR 0 10
63863: PUSH
63864: FOR_TO
63865: IFFALSE 63942
// begin if not ValidHex ( _x , _y ) then
63867: LD_VAR 0 5
63871: PPUSH
63872: LD_VAR 0 6
63876: PPUSH
63877: CALL_OW 488
63881: NOT
63882: IFFALSE 63886
// continue ;
63884: GO 63864
// if GetResourceTypeXY ( _x , _y ) then
63886: LD_VAR 0 5
63890: PPUSH
63891: LD_VAR 0 6
63895: PPUSH
63896: CALL_OW 283
63900: IFFALSE 63940
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63902: LD_ADDR_VAR 0 4
63906: PUSH
63907: LD_VAR 0 4
63911: PPUSH
63912: LD_VAR 0 4
63916: PUSH
63917: LD_INT 1
63919: PLUS
63920: PPUSH
63921: LD_VAR 0 5
63925: PUSH
63926: LD_VAR 0 6
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PPUSH
63935: CALL_OW 1
63939: ST_TO_ADDR
// end ;
63940: GO 63864
63942: POP
63943: POP
63944: GO 63844
63946: POP
63947: POP
// end ;
63948: LD_VAR 0 4
63952: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63953: LD_INT 0
63955: PPUSH
63956: PPUSH
63957: PPUSH
63958: PPUSH
63959: PPUSH
63960: PPUSH
63961: PPUSH
63962: PPUSH
// if not units then
63963: LD_VAR 0 1
63967: NOT
63968: IFFALSE 63972
// exit ;
63970: GO 64397
// result := UnitFilter ( units , [ f_ok ] ) ;
63972: LD_ADDR_VAR 0 3
63976: PUSH
63977: LD_VAR 0 1
63981: PPUSH
63982: LD_INT 50
63984: PUSH
63985: EMPTY
63986: LIST
63987: PPUSH
63988: CALL_OW 72
63992: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63993: LD_ADDR_VAR 0 8
63997: PUSH
63998: LD_VAR 0 1
64002: PUSH
64003: LD_INT 1
64005: ARRAY
64006: PPUSH
64007: CALL_OW 255
64011: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64012: LD_ADDR_VAR 0 10
64016: PUSH
64017: LD_INT 29
64019: PUSH
64020: LD_EXP 97
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: ST_TO_ADDR
// if not result then
64029: LD_VAR 0 3
64033: NOT
64034: IFFALSE 64038
// exit ;
64036: GO 64397
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64038: LD_ADDR_VAR 0 5
64042: PUSH
64043: LD_INT 81
64045: PUSH
64046: LD_VAR 0 8
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PPUSH
64055: CALL_OW 69
64059: ST_TO_ADDR
// for i in result do
64060: LD_ADDR_VAR 0 4
64064: PUSH
64065: LD_VAR 0 3
64069: PUSH
64070: FOR_IN
64071: IFFALSE 64395
// begin tag := GetTag ( i ) + 1 ;
64073: LD_ADDR_VAR 0 9
64077: PUSH
64078: LD_VAR 0 4
64082: PPUSH
64083: CALL_OW 110
64087: PUSH
64088: LD_INT 1
64090: PLUS
64091: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64092: LD_ADDR_VAR 0 7
64096: PUSH
64097: LD_VAR 0 4
64101: PPUSH
64102: CALL_OW 250
64106: PPUSH
64107: LD_VAR 0 4
64111: PPUSH
64112: CALL_OW 251
64116: PPUSH
64117: LD_INT 6
64119: PPUSH
64120: CALL 63695 0 3
64124: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64125: LD_VAR 0 7
64129: PUSH
64130: LD_VAR 0 4
64134: PPUSH
64135: CALL_OW 264
64139: PUSH
64140: LD_VAR 0 10
64144: IN
64145: NOT
64146: AND
64147: IFFALSE 64186
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64149: LD_VAR 0 4
64153: PPUSH
64154: LD_VAR 0 7
64158: PUSH
64159: LD_INT 1
64161: ARRAY
64162: PUSH
64163: LD_INT 1
64165: ARRAY
64166: PPUSH
64167: LD_VAR 0 7
64171: PUSH
64172: LD_INT 1
64174: ARRAY
64175: PUSH
64176: LD_INT 2
64178: ARRAY
64179: PPUSH
64180: CALL_OW 116
64184: GO 64393
// if path > tag then
64186: LD_VAR 0 2
64190: PUSH
64191: LD_VAR 0 9
64195: GREATER
64196: IFFALSE 64363
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64198: LD_ADDR_VAR 0 6
64202: PUSH
64203: LD_VAR 0 5
64207: PPUSH
64208: LD_INT 91
64210: PUSH
64211: LD_VAR 0 4
64215: PUSH
64216: LD_INT 12
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: PPUSH
64224: CALL_OW 72
64228: ST_TO_ADDR
// if nearEnemy then
64229: LD_VAR 0 6
64233: IFFALSE 64261
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64235: LD_VAR 0 4
64239: PPUSH
64240: LD_VAR 0 6
64244: PPUSH
64245: LD_VAR 0 4
64249: PPUSH
64250: CALL_OW 74
64254: PPUSH
64255: CALL_OW 115
64259: GO 64361
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64261: LD_VAR 0 4
64265: PPUSH
64266: LD_VAR 0 2
64270: PUSH
64271: LD_VAR 0 9
64275: ARRAY
64276: PUSH
64277: LD_INT 1
64279: ARRAY
64280: PPUSH
64281: LD_VAR 0 2
64285: PUSH
64286: LD_VAR 0 9
64290: ARRAY
64291: PUSH
64292: LD_INT 2
64294: ARRAY
64295: PPUSH
64296: CALL_OW 297
64300: PUSH
64301: LD_INT 6
64303: GREATER
64304: IFFALSE 64347
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64306: LD_VAR 0 4
64310: PPUSH
64311: LD_VAR 0 2
64315: PUSH
64316: LD_VAR 0 9
64320: ARRAY
64321: PUSH
64322: LD_INT 1
64324: ARRAY
64325: PPUSH
64326: LD_VAR 0 2
64330: PUSH
64331: LD_VAR 0 9
64335: ARRAY
64336: PUSH
64337: LD_INT 2
64339: ARRAY
64340: PPUSH
64341: CALL_OW 114
64345: GO 64361
// SetTag ( i , tag ) ;
64347: LD_VAR 0 4
64351: PPUSH
64352: LD_VAR 0 9
64356: PPUSH
64357: CALL_OW 109
// end else
64361: GO 64393
// if enemy then
64363: LD_VAR 0 5
64367: IFFALSE 64393
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64369: LD_VAR 0 4
64373: PPUSH
64374: LD_VAR 0 5
64378: PPUSH
64379: LD_VAR 0 4
64383: PPUSH
64384: CALL_OW 74
64388: PPUSH
64389: CALL_OW 115
// end ;
64393: GO 64070
64395: POP
64396: POP
// end ;
64397: LD_VAR 0 3
64401: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64402: LD_INT 0
64404: PPUSH
64405: PPUSH
64406: PPUSH
// if not unit or IsInUnit ( unit ) then
64407: LD_VAR 0 1
64411: NOT
64412: PUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: CALL_OW 310
64422: OR
64423: IFFALSE 64427
// exit ;
64425: GO 64518
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64427: LD_ADDR_VAR 0 4
64431: PUSH
64432: LD_VAR 0 1
64436: PPUSH
64437: CALL_OW 250
64441: PPUSH
64442: LD_VAR 0 2
64446: PPUSH
64447: LD_INT 1
64449: PPUSH
64450: CALL_OW 272
64454: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64455: LD_ADDR_VAR 0 5
64459: PUSH
64460: LD_VAR 0 1
64464: PPUSH
64465: CALL_OW 251
64469: PPUSH
64470: LD_VAR 0 2
64474: PPUSH
64475: LD_INT 1
64477: PPUSH
64478: CALL_OW 273
64482: ST_TO_ADDR
// if ValidHex ( x , y ) then
64483: LD_VAR 0 4
64487: PPUSH
64488: LD_VAR 0 5
64492: PPUSH
64493: CALL_OW 488
64497: IFFALSE 64518
// ComTurnXY ( unit , x , y ) ;
64499: LD_VAR 0 1
64503: PPUSH
64504: LD_VAR 0 4
64508: PPUSH
64509: LD_VAR 0 5
64513: PPUSH
64514: CALL_OW 118
// end ;
64518: LD_VAR 0 3
64522: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64523: LD_INT 0
64525: PPUSH
64526: PPUSH
// result := false ;
64527: LD_ADDR_VAR 0 3
64531: PUSH
64532: LD_INT 0
64534: ST_TO_ADDR
// if not units then
64535: LD_VAR 0 2
64539: NOT
64540: IFFALSE 64544
// exit ;
64542: GO 64589
// for i in units do
64544: LD_ADDR_VAR 0 4
64548: PUSH
64549: LD_VAR 0 2
64553: PUSH
64554: FOR_IN
64555: IFFALSE 64587
// if See ( side , i ) then
64557: LD_VAR 0 1
64561: PPUSH
64562: LD_VAR 0 4
64566: PPUSH
64567: CALL_OW 292
64571: IFFALSE 64585
// begin result := true ;
64573: LD_ADDR_VAR 0 3
64577: PUSH
64578: LD_INT 1
64580: ST_TO_ADDR
// exit ;
64581: POP
64582: POP
64583: GO 64589
// end ;
64585: GO 64554
64587: POP
64588: POP
// end ;
64589: LD_VAR 0 3
64593: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64594: LD_INT 0
64596: PPUSH
64597: PPUSH
64598: PPUSH
64599: PPUSH
// if not unit or not points then
64600: LD_VAR 0 1
64604: NOT
64605: PUSH
64606: LD_VAR 0 2
64610: NOT
64611: OR
64612: IFFALSE 64616
// exit ;
64614: GO 64706
// dist := 99999 ;
64616: LD_ADDR_VAR 0 5
64620: PUSH
64621: LD_INT 99999
64623: ST_TO_ADDR
// for i in points do
64624: LD_ADDR_VAR 0 4
64628: PUSH
64629: LD_VAR 0 2
64633: PUSH
64634: FOR_IN
64635: IFFALSE 64704
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64637: LD_ADDR_VAR 0 6
64641: PUSH
64642: LD_VAR 0 1
64646: PPUSH
64647: LD_VAR 0 4
64651: PUSH
64652: LD_INT 1
64654: ARRAY
64655: PPUSH
64656: LD_VAR 0 4
64660: PUSH
64661: LD_INT 2
64663: ARRAY
64664: PPUSH
64665: CALL_OW 297
64669: ST_TO_ADDR
// if tmpDist < dist then
64670: LD_VAR 0 6
64674: PUSH
64675: LD_VAR 0 5
64679: LESS
64680: IFFALSE 64702
// begin result := i ;
64682: LD_ADDR_VAR 0 3
64686: PUSH
64687: LD_VAR 0 4
64691: ST_TO_ADDR
// dist := tmpDist ;
64692: LD_ADDR_VAR 0 5
64696: PUSH
64697: LD_VAR 0 6
64701: ST_TO_ADDR
// end ; end ;
64702: GO 64634
64704: POP
64705: POP
// end ;
64706: LD_VAR 0 3
64710: RET
