// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 909 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2064 0 0
// PrepareHeroes ;
  82: CALL 1089 0 0
// PrepareRandoms ;
  86: CALL 3427 0 0
// Action ;
  90: CALL 5217 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 806
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 581: LD_STRING enableBioCharacter(BIO_HUGH)
 583: PPUSH
 584: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_STRING Lisa
 595: PPUSH
 596: LD_EXP 22
 600: PPUSH
 601: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 605: LD_EXP 8
 609: PPUSH
 610: LD_STRING Brown
 612: PPUSH
 613: LD_EXP 22
 617: PPUSH
 618: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 622: LD_EXP 4
 626: PPUSH
 627: LD_STRING Donaldson
 629: PPUSH
 630: LD_EXP 22
 634: PPUSH
 635: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_STRING Bobby
 646: PPUSH
 647: LD_EXP 22
 651: PPUSH
 652: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_STRING Cyrus
 663: PPUSH
 664: LD_EXP 22
 668: PPUSH
 669: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 673: LD_EXP 7
 677: PPUSH
 678: LD_STRING Denis
 680: PPUSH
 681: LD_EXP 22
 685: PPUSH
 686: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 690: LD_EXP 9
 694: PPUSH
 695: LD_STRING Gladstone
 697: PPUSH
 698: LD_EXP 22
 702: PPUSH
 703: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 707: LD_EXP 10
 711: PPUSH
 712: LD_STRING Houten
 714: PPUSH
 715: LD_EXP 22
 719: PPUSH
 720: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_STRING Cornel
 731: PPUSH
 732: LD_EXP 22
 736: PPUSH
 737: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 741: LD_EXP 12
 745: PPUSH
 746: LD_STRING Gary
 748: PPUSH
 749: LD_EXP 22
 753: PPUSH
 754: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 758: LD_EXP 13
 762: PPUSH
 763: LD_STRING Frank
 765: PPUSH
 766: LD_EXP 22
 770: PPUSH
 771: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 775: LD_EXP 14
 779: PPUSH
 780: LD_STRING Kikuchi
 782: PPUSH
 783: LD_EXP 22
 787: PPUSH
 788: CALL 4223 0 3
// SaveCargos ;
 792: CALL 809 0 0
// ChangeMap ( 13 , %_cont ) ;
 796: LD_INT 13
 798: PPUSH
 799: LD_STRING %_cont
 801: PPUSH
 802: CALL_OW 340
// end ;
 806: PPOPN 2
 808: END
// export function SaveCargos ; var i ; begin
 809: LD_INT 0
 811: PPUSH
 812: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: LD_INT 2
 820: PPUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 33
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 34
 843: PUSH
 844: LD_INT 12
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL_OW 70
 860: PUSH
 861: FOR_IN
 862: IFFALSE 890
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 864: LD_ADDR_EXP 20
 868: PUSH
 869: LD_EXP 20
 873: PUSH
 874: LD_VAR 0 2
 878: PPUSH
 879: CALL 66643 0 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: ADD
 887: ST_TO_ADDR
 888: GO 861
 890: POP
 891: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 892: LD_EXP 20
 896: PPUSH
 897: LD_STRING 13_ResourcesInCargo13_1
 899: PPUSH
 900: CALL_OW 39
// end ;
 904: LD_VAR 0 1
 908: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_STRING 10_EpsilonEnv
 924: PPUSH
 925: EMPTY
 926: PPUSH
 927: CALL_OW 30
 931: ST_TO_ADDR
// if not tmp then
 932: LD_VAR 0 2
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1084
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 941: LD_ADDR_VAR 0 3
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 353
 953: ST_TO_ADDR
// if not list then
 954: LD_VAR 0 3
 958: NOT
 959: IFFALSE 963
// exit ;
 961: GO 1084
// for i in list do
 963: LD_ADDR_VAR 0 4
 967: PUSH
 968: LD_VAR 0 3
 972: PUSH
 973: FOR_IN
 974: IFFALSE 1082
// begin exist := false ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: LD_INT 0
 983: ST_TO_ADDR
// for j in tmp do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: LD_VAR 0 2
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1049
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 997: LD_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PUSH
1006: LD_VAR 0 5
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: EQUAL
1015: PUSH
1016: LD_VAR 0 4
1020: PUSH
1021: LD_INT 2
1023: ARRAY
1024: PUSH
1025: LD_VAR 0 5
1029: PUSH
1030: LD_INT 2
1032: ARRAY
1033: EQUAL
1034: AND
1035: IFFALSE 1047
// begin exist := true ;
1037: LD_ADDR_VAR 0 6
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// break ;
1045: GO 1049
// end ;
1047: GO 994
1049: POP
1050: POP
// if not exist then
1051: LD_VAR 0 6
1055: NOT
1056: IFFALSE 1080
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 4
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 347
// end ;
1080: GO 973
1082: POP
1083: POP
// end ; end_of_file
1084: LD_VAR 0 1
1088: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: LD_INT 22
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 23
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 30
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// if tmp then
1161: LD_VAR 0 4
1165: IFFALSE 1287
// begin x := GetX ( tmp [ 1 ] ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1186: LD_ADDR_VAR 0 6
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 251
1204: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1205: LD_VAR 0 4
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_STRING epsilon
1216: PPUSH
1217: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1221: LD_ADDR_VAR 0 7
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 274
1239: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1240: LD_VAR 0 7
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 3000
1250: PPUSH
1251: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1255: LD_VAR 0 7
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 500
1265: PPUSH
1266: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1270: LD_VAR 0 7
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 200
1280: PPUSH
1281: CALL_OW 277
// end else
1285: GO 1303
// begin x := 104 ;
1287: LD_ADDR_VAR 0 5
1291: PUSH
1292: LD_INT 104
1294: ST_TO_ADDR
// y := 32 ;
1295: LD_ADDR_VAR 0 6
1299: PUSH
1300: LD_INT 32
1302: ST_TO_ADDR
// end ; uc_side := 1 ;
1303: LD_ADDR_OWVAR 20
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1311: LD_ADDR_EXP 1
1315: PUSH
1316: LD_STRING JMM
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 3697 0 2
1326: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1327: LD_ADDR_EXP 3
1331: PUSH
1332: LD_STRING Lisa
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 3697 0 2
1342: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1343: LD_ADDR_EXP 4
1347: PUSH
1348: LD_STRING Donaldson
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 3697 0 2
1358: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1359: LD_ADDR_EXP 5
1363: PUSH
1364: LD_STRING Bobby
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 3697 0 2
1374: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1375: LD_ADDR_EXP 6
1379: PUSH
1380: LD_STRING Cyrus
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL 3697 0 2
1390: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1391: LD_ADDR_EXP 7
1395: PUSH
1396: LD_STRING Denis
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: CALL 3697 0 2
1406: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1407: LD_ADDR_EXP 8
1411: PUSH
1412: LD_STRING Brown
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 3697 0 2
1422: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: LD_STRING Gladstone
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL 3697 0 2
1438: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_STRING Houten
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL 3697 0 2
1454: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1455: LD_ADDR_EXP 11
1459: PUSH
1460: LD_STRING Cornell
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL 3697 0 2
1470: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_STRING Gary
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL 3697 0 2
1486: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1487: LD_ADDR_EXP 13
1491: PUSH
1492: LD_STRING Frank
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL 3697 0 2
1502: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1503: LD_ADDR_EXP 14
1507: PUSH
1508: LD_STRING Kikuchi
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL 3697 0 2
1518: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_STRING Stevens
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL 3697 0 2
1534: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_STRING Powell
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL 3697 0 2
1550: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_VAR 0 6
1565: PPUSH
1566: LD_INT 4
1568: PPUSH
1569: LD_INT 0
1571: PPUSH
1572: CALL 3870 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1576: LD_EXP 15
1580: PPUSH
1581: LD_VAR 0 5
1585: PPUSH
1586: LD_VAR 0 6
1590: PPUSH
1591: LD_INT 4
1593: PPUSH
1594: LD_INT 0
1596: PPUSH
1597: CALL 3870 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1601: LD_EXP 3
1605: PPUSH
1606: LD_VAR 0 5
1610: PPUSH
1611: LD_VAR 0 6
1615: PPUSH
1616: LD_INT 35
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 3870 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1626: LD_EXP 4
1630: PPUSH
1631: LD_VAR 0 5
1635: PPUSH
1636: LD_VAR 0 6
1640: PPUSH
1641: LD_INT 35
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: CALL 3870 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 6
1665: PPUSH
1666: LD_INT 35
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL 3870 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_VAR 0 5
1685: PPUSH
1686: LD_VAR 0 6
1690: PPUSH
1691: LD_INT 35
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: CALL 3870 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1701: LD_EXP 7
1705: PPUSH
1706: LD_VAR 0 5
1710: PPUSH
1711: LD_VAR 0 6
1715: PPUSH
1716: LD_INT 35
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL 3870 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_VAR 0 5
1735: PPUSH
1736: LD_VAR 0 6
1740: PPUSH
1741: LD_INT 35
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 3870 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1751: LD_EXP 9
1755: PPUSH
1756: LD_VAR 0 5
1760: PPUSH
1761: LD_VAR 0 6
1765: PPUSH
1766: LD_INT 35
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL 3870 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1776: LD_EXP 10
1780: PPUSH
1781: LD_VAR 0 5
1785: PPUSH
1786: LD_VAR 0 6
1790: PPUSH
1791: LD_INT 35
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL 3870 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1801: LD_EXP 11
1805: PPUSH
1806: LD_VAR 0 5
1810: PPUSH
1811: LD_VAR 0 6
1815: PPUSH
1816: LD_INT 35
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL 3870 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1826: LD_EXP 12
1830: PPUSH
1831: LD_VAR 0 5
1835: PPUSH
1836: LD_VAR 0 6
1840: PPUSH
1841: LD_INT 35
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL 3870 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1851: LD_EXP 13
1855: PPUSH
1856: LD_VAR 0 5
1860: PPUSH
1861: LD_VAR 0 6
1865: PPUSH
1866: LD_INT 35
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL 3870 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1876: LD_EXP 14
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: LD_VAR 0 6
1890: PPUSH
1891: LD_INT 35
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL 3870 0 5
// SetClass ( JMM , 1 ) ;
1901: LD_EXP 1
1905: PPUSH
1906: LD_INT 1
1908: PPUSH
1909: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1913: LD_ADDR_EXP 16
1917: PUSH
1918: LD_STRING 12_other_survivors
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1926: LD_ADDR_EXP 17
1930: PUSH
1931: LD_STRING 12_others
1933: PPUSH
1934: CALL_OW 31
1938: ST_TO_ADDR
// for i in others11 do
1939: LD_ADDR_VAR 0 2
1943: PUSH
1944: LD_EXP 17
1948: PUSH
1949: FOR_IN
1950: IFFALSE 1997
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 4
1961: PUSH
1962: LD_INT 1
1964: ARRAY
1965: PPUSH
1966: CALL_OW 250
1970: PPUSH
1971: LD_VAR 0 4
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 251
1984: PPUSH
1985: LD_INT 15
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL 3870 0 5
1995: GO 1949
1997: POP
1998: POP
// for i in others12 do
1999: LD_ADDR_VAR 0 2
2003: PUSH
2004: LD_EXP 16
2008: PUSH
2009: FOR_IN
2010: IFFALSE 2057
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_VAR 0 4
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 250
2030: PPUSH
2031: LD_VAR 0 4
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: PPUSH
2040: CALL_OW 251
2044: PPUSH
2045: LD_INT 15
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL 3870 0 5
2055: GO 2009
2057: POP
2058: POP
// end ;
2059: LD_VAR 0 1
2063: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2064: LD_INT 0
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
2070: PPUSH
2071: PPUSH
2072: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2073: LD_INT 113
2075: PPUSH
2076: LD_INT 50
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2086: LD_INT 99
2088: PPUSH
2089: LD_INT 19
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2099: LD_INT 43
2101: PPUSH
2102: LD_INT 79
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2112: LD_INT 43
2114: PPUSH
2115: LD_INT 68
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2125: LD_INT 99
2127: PPUSH
2128: LD_INT 114
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 114
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2151: LD_INT 152
2153: PPUSH
2154: LD_INT 85
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2164: LD_INT 156
2166: PPUSH
2167: LD_INT 92
2169: PPUSH
2170: LD_INT 1
2172: PPUSH
2173: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: LD_STRING 10_EpsilonBase
2184: PPUSH
2185: EMPTY
2186: PPUSH
2187: CALL_OW 30
2191: ST_TO_ADDR
// if not blist then
2192: LD_VAR 0 2
2196: NOT
2197: IFFALSE 2201
// exit ;
2199: GO 3422
// for i in blist do
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: LD_VAR 0 2
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2254
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: PUSH
2227: LD_VAR 0 3
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PUSH
2236: LD_INT 1
2238: EQUAL
2239: OR
2240: IFFALSE 2252
// begin baseCorrect := 1 ;
2242: LD_ADDR_VAR 0 6
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// break ;
2250: GO 2254
// end ;
2252: GO 2211
2254: POP
2255: POP
// if baseCorrect = 0 then
2256: LD_VAR 0 6
2260: PUSH
2261: LD_INT 0
2263: EQUAL
2264: IFFALSE 2971
// begin uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// bc_level := 10 ;
2282: LD_ADDR_OWVAR 43
2286: PUSH
2287: LD_INT 10
2289: ST_TO_ADDR
// bc_type := b_warehouse ;
2290: LD_ADDR_OWVAR 42
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2298: LD_INT 99
2300: PPUSH
2301: LD_INT 24
2303: PPUSH
2304: LD_INT 2
2306: PPUSH
2307: CALL_OW 47
// bc_type := b_bunker ;
2311: LD_ADDR_OWVAR 42
2315: PUSH
2316: LD_INT 32
2318: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2319: LD_ADDR_VAR 0 7
2323: PUSH
2324: LD_INT 124
2326: PPUSH
2327: LD_INT 42
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 47
2337: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2338: LD_VAR 0 7
2342: PPUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 5
2348: PUSH
2349: LD_INT 6
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: CALL_OW 12
2367: ARRAY
2368: PPUSH
2369: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2373: LD_ADDR_VAR 0 7
2377: PUSH
2378: LD_INT 111
2380: PPUSH
2381: LD_INT 16
2383: PPUSH
2384: LD_INT 4
2386: PPUSH
2387: CALL_OW 47
2391: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2392: LD_VAR 0 7
2396: PPUSH
2397: LD_INT 4
2399: PUSH
2400: LD_INT 5
2402: PUSH
2403: LD_INT 6
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 3
2416: PPUSH
2417: CALL_OW 12
2421: ARRAY
2422: PPUSH
2423: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2427: LD_ADDR_VAR 0 7
2431: PUSH
2432: LD_INT 113
2434: PPUSH
2435: LD_INT 21
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: CALL_OW 47
2445: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2446: LD_VAR 0 7
2450: PPUSH
2451: LD_INT 4
2453: PUSH
2454: LD_INT 5
2456: PUSH
2457: LD_INT 6
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 1
2467: PPUSH
2468: LD_INT 3
2470: PPUSH
2471: CALL_OW 12
2475: ARRAY
2476: PPUSH
2477: CALL_OW 431
// bc_type := 33 ;
2481: LD_ADDR_OWVAR 42
2485: PUSH
2486: LD_INT 33
2488: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_INT 95
2496: PPUSH
2497: LD_INT 41
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 47
2507: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2508: LD_VAR 0 7
2512: PPUSH
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ARRAY
2538: PPUSH
2539: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2543: LD_ADDR_VAR 0 7
2547: PUSH
2548: LD_INT 97
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: CALL_OW 47
2561: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2562: LD_VAR 0 7
2566: PPUSH
2567: LD_INT 4
2569: PUSH
2570: LD_INT 5
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 1
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL_OW 12
2591: ARRAY
2592: PPUSH
2593: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2597: LD_ADDR_VAR 0 7
2601: PUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 19
2607: PPUSH
2608: LD_INT 1
2610: PPUSH
2611: CALL_OW 47
2615: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2616: LD_VAR 0 7
2620: PPUSH
2621: LD_INT 4
2623: PUSH
2624: LD_INT 5
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 1
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: CALL_OW 12
2645: ARRAY
2646: PPUSH
2647: CALL_OW 431
// bc_type := 30 ;
2651: LD_ADDR_OWVAR 42
2655: PUSH
2656: LD_INT 30
2658: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2659: LD_INT 104
2661: PPUSH
2662: LD_INT 24
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 47
// bc_type := 29 ;
2672: LD_ADDR_OWVAR 42
2676: PUSH
2677: LD_INT 29
2679: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2680: LD_INT 113
2682: PPUSH
2683: LD_INT 50
2685: PPUSH
2686: LD_INT 3
2688: PPUSH
2689: CALL_OW 47
// bc_type := 27 ;
2693: LD_ADDR_OWVAR 42
2697: PUSH
2698: LD_INT 27
2700: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2701: LD_INT 98
2703: PPUSH
2704: LD_INT 26
2706: PPUSH
2707: LD_INT 2
2709: PPUSH
2710: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2714: LD_INT 95
2716: PPUSH
2717: LD_INT 23
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: CALL_OW 47
// bc_type := 28 ;
2727: LD_ADDR_OWVAR 42
2731: PUSH
2732: LD_INT 28
2734: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2735: LD_INT 107
2737: PPUSH
2738: LD_INT 32
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 47
// bc_type := 3 ;
2748: LD_ADDR_OWVAR 42
2752: PUSH
2753: LD_INT 3
2755: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2756: LD_INT 106
2758: PPUSH
2759: LD_INT 42
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL_OW 47
// bc_type := 16 ;
2769: LD_ADDR_OWVAR 42
2773: PUSH
2774: LD_INT 16
2776: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2777: LD_INT 109
2779: PPUSH
2780: LD_INT 45
2782: PPUSH
2783: LD_INT 5
2785: PPUSH
2786: CALL_OW 47
// bc_type := 17 ;
2790: LD_ADDR_OWVAR 42
2794: PUSH
2795: LD_INT 17
2797: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2798: LD_INT 106
2800: PPUSH
2801: LD_INT 46
2803: PPUSH
2804: LD_INT 0
2806: PPUSH
2807: CALL_OW 47
// bc_type := 19 ;
2811: LD_ADDR_OWVAR 42
2815: PUSH
2816: LD_INT 19
2818: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2819: LD_INT 103
2821: PPUSH
2822: LD_INT 42
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: CALL_OW 47
// bc_type := 21 ;
2832: LD_ADDR_OWVAR 42
2836: PUSH
2837: LD_INT 21
2839: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2840: LD_INT 110
2842: PPUSH
2843: LD_INT 42
2845: PPUSH
2846: LD_INT 4
2848: PPUSH
2849: CALL_OW 47
// bc_type := 5 ;
2853: LD_ADDR_OWVAR 42
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2861: LD_INT 114
2863: PPUSH
2864: LD_INT 55
2866: PPUSH
2867: LD_INT 5
2869: PPUSH
2870: CALL_OW 47
// bc_type := 36 ;
2874: LD_ADDR_OWVAR 42
2878: PUSH
2879: LD_INT 36
2881: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2882: LD_INT 96
2884: PPUSH
2885: LD_INT 28
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 47
// bc_type := b_lab_full ;
2895: LD_ADDR_OWVAR 42
2899: PUSH
2900: LD_INT 8
2902: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2903: LD_ADDR_OWVAR 44
2907: PUSH
2908: LD_INT 15
2910: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2911: LD_ADDR_OWVAR 45
2915: PUSH
2916: LD_INT 11
2918: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2919: LD_INT 116
2921: PPUSH
2922: LD_INT 38
2924: PPUSH
2925: LD_INT 4
2927: PPUSH
2928: CALL_OW 47
// bc_type := b_lab_full ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 8
2939: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2940: LD_ADDR_OWVAR 44
2944: PUSH
2945: LD_INT 10
2947: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2948: LD_ADDR_OWVAR 45
2952: PUSH
2953: LD_INT 12
2955: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2956: LD_INT 112
2958: PPUSH
2959: LD_INT 29
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 47
// end else
2969: GO 3219
// begin uc_side := 1 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// for i in blist do
2979: LD_ADDR_VAR 0 3
2983: PUSH
2984: LD_VAR 0 2
2988: PUSH
2989: FOR_IN
2990: IFFALSE 3217
// begin InitBc ;
2992: CALL_OW 21
// uc_nation := i [ 6 ] ;
2996: LD_ADDR_OWVAR 21
3000: PUSH
3001: LD_VAR 0 3
3005: PUSH
3006: LD_INT 6
3008: ARRAY
3009: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3010: LD_ADDR_OWVAR 42
3014: PUSH
3015: LD_VAR 0 3
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3024: LD_ADDR_OWVAR 43
3028: PUSH
3029: LD_VAR 0 3
3033: PUSH
3034: LD_INT 5
3036: ARRAY
3037: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3038: LD_VAR 0 3
3042: PUSH
3043: LD_INT 1
3045: ARRAY
3046: PUSH
3047: LD_INT 7
3049: PUSH
3050: LD_INT 8
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: IN
3057: IFFALSE 3087
// begin bc_kind1 := i [ 7 ] ;
3059: LD_ADDR_OWVAR 44
3063: PUSH
3064: LD_VAR 0 3
3068: PUSH
3069: LD_INT 7
3071: ARRAY
3072: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3073: LD_ADDR_OWVAR 45
3077: PUSH
3078: LD_VAR 0 3
3082: PUSH
3083: LD_INT 8
3085: ARRAY
3086: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3087: LD_ADDR_VAR 0 4
3091: PUSH
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 2
3099: ARRAY
3100: PPUSH
3101: LD_VAR 0 3
3105: PUSH
3106: LD_INT 3
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 3
3114: PUSH
3115: LD_INT 4
3117: ARRAY
3118: PPUSH
3119: CALL_OW 47
3123: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3124: LD_VAR 0 4
3128: PPUSH
3129: CALL_OW 266
3133: PUSH
3134: LD_INT 32
3136: PUSH
3137: LD_INT 33
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: IN
3144: IFFALSE 3215
// if i [ 7 ] then
3146: LD_VAR 0 3
3150: PUSH
3151: LD_INT 7
3153: ARRAY
3154: IFFALSE 3176
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3156: LD_VAR 0 4
3160: PPUSH
3161: LD_VAR 0 3
3165: PUSH
3166: LD_INT 7
3168: ARRAY
3169: PPUSH
3170: CALL_OW 431
3174: GO 3215
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3176: LD_VAR 0 4
3180: PPUSH
3181: LD_INT 11
3183: PUSH
3184: LD_INT 7
3186: PUSH
3187: LD_INT 4
3189: PUSH
3190: LD_INT 5
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 4
3204: PPUSH
3205: CALL_OW 12
3209: ARRAY
3210: PPUSH
3211: CALL_OW 431
// end ;
3215: GO 2989
3217: POP
3218: POP
// end ; uc_side := 1 ;
3219: LD_ADDR_OWVAR 20
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// uc_nation := 1 ;
3227: LD_ADDR_OWVAR 21
3231: PUSH
3232: LD_INT 1
3234: ST_TO_ADDR
// for i := 1 to 8 do
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: DOUBLE
3241: LD_INT 1
3243: DEC
3244: ST_TO_ADDR
3245: LD_INT 8
3247: PUSH
3248: FOR_TO
3249: IFFALSE 3420
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3251: LD_ADDR_OWVAR 37
3255: PUSH
3256: LD_INT 5
3258: PUSH
3259: LD_INT 5
3261: PUSH
3262: LD_INT 3
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_INT 4
3279: PPUSH
3280: CALL_OW 12
3284: ARRAY
3285: ST_TO_ADDR
// vc_engine := engine_siberite ;
3286: LD_ADDR_OWVAR 39
3290: PUSH
3291: LD_INT 3
3293: ST_TO_ADDR
// vc_control := control_manual ;
3294: LD_ADDR_OWVAR 38
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3302: LD_OWVAR 37
3306: PUSH
3307: LD_INT 4
3309: EQUAL
3310: IFFALSE 3322
// vc_weapon := us_heavy_gun else
3312: LD_ADDR_OWVAR 40
3316: PUSH
3317: LD_INT 6
3319: ST_TO_ADDR
3320: GO 3367
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3322: LD_ADDR_OWVAR 40
3326: PUSH
3327: LD_INT 7
3329: PUSH
3330: LD_INT 9
3332: PUSH
3333: LD_INT 12
3335: PUSH
3336: LD_INT 13
3338: PUSH
3339: LD_INT 9
3341: PUSH
3342: LD_INT 9
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_VAR 0 3
3357: PUSH
3358: LD_INT 6
3360: MOD
3361: PUSH
3362: LD_INT 1
3364: PLUS
3365: ARRAY
3366: ST_TO_ADDR
// un := CreateVehicle ;
3367: LD_ADDR_VAR 0 5
3371: PUSH
3372: CALL_OW 45
3376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3377: LD_VAR 0 5
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: LD_INT 5
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_INT 78
3404: PPUSH
3405: LD_INT 31
3407: PPUSH
3408: LD_INT 8
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 50
// end ;
3418: GO 3248
3420: POP
3421: POP
// end ;
3422: LD_VAR 0 1
3426: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3433: LD_INT 22
3435: PUSH
3436: LD_INT 1
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 69
3461: PUSH
3462: LD_INT 6
3464: LESS
3465: IFFALSE 3692
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3467: LD_ADDR_VAR 0 4
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_INT 1
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 0
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 30
3497: PUSH
3498: LD_INT 1
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 69
3518: ST_TO_ADDR
// uc_side := 1 ;
3519: LD_ADDR_OWVAR 20
3523: PUSH
3524: LD_INT 1
3526: ST_TO_ADDR
// uc_nation := 1 ;
3527: LD_ADDR_OWVAR 21
3531: PUSH
3532: LD_INT 1
3534: ST_TO_ADDR
// for i := 1 to 6 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 6
3547: PUSH
3548: FOR_TO
3549: IFFALSE 3690
// begin hc_gallery :=  ;
3551: LD_ADDR_OWVAR 33
3555: PUSH
3556: LD_STRING 
3558: ST_TO_ADDR
// hc_name :=  ;
3559: LD_ADDR_OWVAR 26
3563: PUSH
3564: LD_STRING 
3566: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 2
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: LD_INT 4
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_INT 4
3593: PPUSH
3594: CALL_OW 12
3598: ARRAY
3599: PPUSH
3600: LD_INT 5
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: CALL_OW 12
3610: PPUSH
3611: CALL_OW 380
// un := CreateHuman ;
3615: LD_ADDR_VAR 0 3
3619: PUSH
3620: CALL_OW 44
3624: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3625: LD_ADDR_EXP 18
3629: PUSH
3630: LD_EXP 18
3634: PPUSH
3635: LD_VAR 0 3
3639: PPUSH
3640: CALL 63078 0 2
3644: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PPUSH
3659: CALL_OW 250
3663: PPUSH
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 1
3671: ARRAY
3672: PPUSH
3673: CALL_OW 251
3677: PPUSH
3678: LD_INT 15
3680: PPUSH
3681: LD_INT 0
3683: PPUSH
3684: CALL 3870 0 5
// end ;
3688: GO 3548
3690: POP
3691: POP
// end ; end ; end_of_file
3692: LD_VAR 0 1
3696: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
// if existMode then
3701: LD_VAR 0 2
3705: IFFALSE 3840
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3707: LD_EXP 21
3711: PUSH
3712: LD_VAR 0 1
3716: STR
3717: PPUSH
3718: CALL_OW 28
3722: IFFALSE 3747
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_EXP 21
3733: PUSH
3734: LD_VAR 0 1
3738: STR
3739: PPUSH
3740: CALL_OW 34
3744: ST_TO_ADDR
3745: GO 3838
// begin if TestCharacters ( 11_ & ident ) then
3747: LD_STRING 11_
3749: PUSH
3750: LD_VAR 0 1
3754: STR
3755: PPUSH
3756: CALL_OW 28
3760: IFFALSE 3783
// unit := CreateCharacter ( 11_ & ident ) else
3762: LD_ADDR_VAR 0 4
3766: PUSH
3767: LD_STRING 11_
3769: PUSH
3770: LD_VAR 0 1
3774: STR
3775: PPUSH
3776: CALL_OW 34
3780: ST_TO_ADDR
3781: GO 3838
// if TestCharacters ( 10c_ & ident ) then
3783: LD_STRING 10c_
3785: PUSH
3786: LD_VAR 0 1
3790: STR
3791: PPUSH
3792: CALL_OW 28
3796: IFFALSE 3819
// unit := CreateCharacter ( 10c_ & ident ) else
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_STRING 10c_
3805: PUSH
3806: LD_VAR 0 1
3810: STR
3811: PPUSH
3812: CALL_OW 34
3816: ST_TO_ADDR
3817: GO 3838
// unit := CreateCharacter ( 10_ & ident ) ;
3819: LD_ADDR_VAR 0 4
3823: PUSH
3824: LD_STRING 10_
3826: PUSH
3827: LD_VAR 0 1
3831: STR
3832: PPUSH
3833: CALL_OW 34
3837: ST_TO_ADDR
// end ; end else
3838: GO 3855
// unit := NewCharacter ( ident ) ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: CALL_OW 25
3854: ST_TO_ADDR
// result := unit ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: LD_VAR 0 4
3864: ST_TO_ADDR
// end ;
3865: LD_VAR 0 3
3869: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
3874: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3875: LD_ADDR_VAR 0 8
3879: PUSH
3880: LD_INT 22
3882: PUSH
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 255
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 21
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: LD_INT 3
3909: PUSH
3910: LD_INT 30
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 69
3933: ST_TO_ADDR
// if not tmp then
3934: LD_VAR 0 8
3938: NOT
3939: IFFALSE 3972
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_VAR 0 2
3950: PPUSH
3951: LD_VAR 0 3
3955: PPUSH
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_VAR 0 5
3965: PPUSH
3966: CALL_OW 50
// exit ;
3970: GO 4218
// end ; for i in tmp do
3972: LD_ADDR_VAR 0 7
3976: PUSH
3977: LD_VAR 0 8
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4187
// if IsNotFull ( i ) then
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL 27941 0 1
3994: IFFALSE 4185
// begin PlaceHumanInUnit ( unit , i ) ;
3996: LD_VAR 0 1
4000: PPUSH
4001: LD_VAR 0 7
4005: PPUSH
4006: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4010: LD_VAR 0 7
4014: PPUSH
4015: CALL_OW 266
4019: PUSH
4020: LD_INT 5
4022: PUSH
4023: LD_INT 4
4025: PUSH
4026: LD_INT 31
4028: PUSH
4029: LD_INT 32
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: IN
4038: IFFALSE 4071
// begin SetClass ( unit , class_soldier ) ;
4040: LD_VAR 0 1
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4052: LD_VAR 0 1
4056: PPUSH
4057: LD_VAR 0 7
4061: PPUSH
4062: CALL 58327 0 1
4066: PPUSH
4067: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4071: LD_VAR 0 7
4075: PPUSH
4076: CALL_OW 266
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: LD_INT 36
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: IN
4095: IFFALSE 4109
// SetClass ( unit , class_mechanic ) ;
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4109: LD_VAR 0 7
4113: PPUSH
4114: CALL_OW 266
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: IN
4129: IFFALSE 4143
// SetClass ( unit , class_engineer ) ;
4131: LD_VAR 0 1
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4143: LD_VAR 0 7
4147: PPUSH
4148: CALL_OW 266
4152: PUSH
4153: LD_INT 6
4155: PUSH
4156: LD_INT 7
4158: PUSH
4159: LD_INT 8
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: IN
4167: IFFALSE 4181
// SetClass ( unit , class_scientistic ) ;
4169: LD_VAR 0 1
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: CALL_OW 336
// exit ;
4181: POP
4182: POP
4183: GO 4218
// end ;
4185: GO 3982
4187: POP
4188: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4189: LD_VAR 0 1
4193: PPUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_VAR 0 4
4208: PPUSH
4209: LD_VAR 0 5
4213: PPUSH
4214: CALL_OW 50
// end ;
4218: LD_VAR 0 6
4222: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4223: LD_INT 0
4225: PPUSH
// if unit in selectedTab then
4226: LD_VAR 0 1
4230: PUSH
4231: LD_VAR 0 3
4235: IN
4236: IFFALSE 4258
// SaveCharacters ( unit , 13c_ & unitString ) else
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_STRING 13c_
4245: PUSH
4246: LD_VAR 0 2
4250: STR
4251: PPUSH
4252: CALL_OW 38
4256: GO 4276
// SaveCharacters ( unit , 13s_ & unitString ) ;
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_STRING 13s_
4265: PUSH
4266: LD_VAR 0 2
4270: STR
4271: PPUSH
4272: CALL_OW 38
// end ;
4276: LD_VAR 0 4
4280: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
// selected := [ ] ;
4287: LD_ADDR_EXP 22
4291: PUSH
4292: EMPTY
4293: ST_TO_ADDR
// othersSelect := [ ] ;
4294: LD_ADDR_EXP 23
4298: PUSH
4299: EMPTY
4300: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: LD_EXP 3
4310: PUSH
4311: LD_EXP 4
4315: PUSH
4316: LD_EXP 5
4320: PUSH
4321: LD_EXP 6
4325: PUSH
4326: LD_EXP 8
4330: PUSH
4331: LD_EXP 9
4335: PUSH
4336: LD_EXP 10
4340: PUSH
4341: LD_EXP 11
4345: PUSH
4346: LD_EXP 12
4350: PUSH
4351: LD_EXP 13
4355: PUSH
4356: LD_EXP 14
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4374: LD_ADDR_VAR 0 3
4378: PUSH
4379: LD_VAR 0 3
4383: PUSH
4384: LD_EXP 17
4388: ADD
4389: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4390: LD_ADDR_VAR 0 3
4394: PUSH
4395: LD_VAR 0 3
4399: PUSH
4400: LD_EXP 16
4404: ADD
4405: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_VAR 0 3
4415: PUSH
4416: LD_EXP 18
4420: ADD
4421: ST_TO_ADDR
// for i in tmp do
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_VAR 0 3
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4472
// if GetClass ( i ) = 8 then
4435: LD_VAR 0 2
4439: PPUSH
4440: CALL_OW 257
4444: PUSH
4445: LD_INT 8
4447: EQUAL
4448: IFFALSE 4470
// SetClass ( i , rand ( 1 , 4 ) ) ;
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 336
4470: GO 4432
4472: POP
4473: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4474: LD_ADDR_EXP 22
4478: PUSH
4479: LD_STRING 1
4481: PPUSH
4482: LD_INT 6
4484: PPUSH
4485: LD_INT 6
4487: PPUSH
4488: LD_INT -5
4490: PUSH
4491: LD_EXP 1
4495: PUSH
4496: LD_EXP 15
4500: PUSH
4501: LD_INT -2
4503: PUSH
4504: LD_INT -3
4506: PUSH
4507: LD_INT -5
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 3
4522: ADD
4523: PUSH
4524: LD_INT -6
4526: PUSH
4527: LD_INT -4
4529: PUSH
4530: LD_EXP 2
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: ADD
4540: PPUSH
4541: LD_INT 1
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 3
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 5
4583: PUSH
4584: LD_INT 0
4586: PUSH
4587: LD_INT 2
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 42
4606: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4607: LD_ADDR_EXP 23
4611: PUSH
4612: LD_EXP 22
4616: PUSH
4617: LD_EXP 3
4621: PUSH
4622: LD_EXP 4
4626: PUSH
4627: LD_EXP 5
4631: PUSH
4632: LD_EXP 6
4636: PUSH
4637: LD_EXP 7
4641: PUSH
4642: LD_EXP 8
4646: PUSH
4647: LD_EXP 9
4651: PUSH
4652: LD_EXP 10
4656: PUSH
4657: LD_EXP 11
4661: PUSH
4662: LD_EXP 12
4666: PUSH
4667: LD_EXP 13
4671: PUSH
4672: LD_EXP 14
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: DIFF
4691: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4692: LD_ADDR_VAR 0 4
4696: PUSH
4697: LD_VAR 0 3
4701: PUSH
4702: LD_EXP 22
4706: DIFF
4707: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 4
4717: PUSH
4718: LD_EXP 3
4722: PUSH
4723: LD_EXP 4
4727: PUSH
4728: LD_EXP 5
4732: PUSH
4733: LD_EXP 6
4737: PUSH
4738: LD_EXP 7
4742: PUSH
4743: LD_EXP 8
4747: PUSH
4748: LD_EXP 9
4752: PUSH
4753: LD_EXP 10
4757: PUSH
4758: LD_EXP 11
4762: PUSH
4763: LD_EXP 12
4767: PUSH
4768: LD_EXP 13
4772: PUSH
4773: LD_EXP 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: DIFF
4792: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4793: LD_VAR 0 4
4797: PPUSH
4798: LD_STRING 13s_others
4800: PPUSH
4801: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4805: LD_EXP 23
4809: PPUSH
4810: LD_STRING 13c_others
4812: PPUSH
4813: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4817: LD_EXP 1
4821: PPUSH
4822: LD_STRING 13c_JMM
4824: PPUSH
4825: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4829: LD_EXP 15
4833: PPUSH
4834: LD_STRING 13c_Stevens
4836: PPUSH
4837: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4841: LD_EXP 3
4845: PPUSH
4846: LD_STRING Lisa
4848: PPUSH
4849: LD_EXP 22
4853: PPUSH
4854: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4858: LD_EXP 8
4862: PPUSH
4863: LD_STRING Brown
4865: PPUSH
4866: LD_EXP 22
4870: PPUSH
4871: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4875: LD_EXP 4
4879: PPUSH
4880: LD_STRING Donaldson
4882: PPUSH
4883: LD_EXP 22
4887: PPUSH
4888: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4892: LD_EXP 5
4896: PPUSH
4897: LD_STRING Bobby
4899: PPUSH
4900: LD_EXP 22
4904: PPUSH
4905: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4909: LD_EXP 6
4913: PPUSH
4914: LD_STRING Cyrus
4916: PPUSH
4917: LD_EXP 22
4921: PPUSH
4922: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4926: LD_EXP 7
4930: PPUSH
4931: LD_STRING Denis
4933: PPUSH
4934: LD_EXP 22
4938: PPUSH
4939: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4943: LD_EXP 9
4947: PPUSH
4948: LD_STRING Gladstone
4950: PPUSH
4951: LD_EXP 22
4955: PPUSH
4956: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4960: LD_EXP 10
4964: PPUSH
4965: LD_STRING Houten
4967: PPUSH
4968: LD_EXP 22
4972: PPUSH
4973: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4977: LD_EXP 11
4981: PPUSH
4982: LD_STRING Cornel
4984: PPUSH
4985: LD_EXP 22
4989: PPUSH
4990: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4994: LD_EXP 12
4998: PPUSH
4999: LD_STRING Gary
5001: PPUSH
5002: LD_EXP 22
5006: PPUSH
5007: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5011: LD_EXP 13
5015: PPUSH
5016: LD_STRING Frank
5018: PPUSH
5019: LD_EXP 22
5023: PPUSH
5024: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5028: LD_EXP 14
5032: PPUSH
5033: LD_STRING Kikuchi
5035: PPUSH
5036: LD_EXP 22
5040: PPUSH
5041: CALL 4223 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5045: LD_INT 22
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 21
5057: PUSH
5058: LD_INT 1
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: LD_INT 4
5076: PPUSH
5077: CALL_OW 235
// SetSide ( selected , 1 ) ;
5081: LD_EXP 22
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5093: LD_EXP 1
5097: PUSH
5098: LD_EXP 15
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 21
5131: PUSH
5132: LD_INT 1
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PPUSH
5143: CALL_OW 69
5147: PUSH
5148: FOR_IN
5149: IFFALSE 5162
// ComExit ( i ) ;
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL 63476 0 1
5160: GO 5148
5162: POP
5163: POP
// end ; end_of_file
5164: LD_VAR 0 1
5168: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5169: LD_VAR 0 1
5173: PPUSH
5174: CALL 21246 0 1
// if un = JMM then
5178: LD_VAR 0 1
5182: PUSH
5183: LD_EXP 1
5187: EQUAL
5188: IFFALSE 5197
// YouLost ( JMM ) ;
5190: LD_STRING JMM
5192: PPUSH
5193: CALL_OW 104
// end ;
5197: PPOPN 1
5199: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_VAR 0 2
5209: PPUSH
5210: CALL 21366 0 2
// end ; end_of_file
5214: PPOPN 2
5216: END
// export function Action ; begin
5217: LD_INT 0
5219: PPUSH
// InGameOn ;
5220: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5224: LD_INT 22
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 30
5239: PUSH
5240: LD_INT 0
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 30
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: CALL_OW 87
// wait ( 0 0$1 ) ;
5275: LD_INT 35
5277: PPUSH
5278: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5282: LD_EXP 1
5286: PPUSH
5287: LD_STRING D1-JMM-1
5289: PPUSH
5290: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5294: LD_EXP 2
5298: PPUSH
5299: LD_STRING D1-Pow-1
5301: PPUSH
5302: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5306: LD_EXP 2
5310: PPUSH
5311: LD_STRING D1-Pow-1a
5313: PPUSH
5314: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5318: LD_EXP 2
5322: PPUSH
5323: LD_STRING D1-Pow-1b
5325: PPUSH
5326: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5330: LD_EXP 2
5334: PPUSH
5335: LD_STRING D1-Pow-1c
5337: PPUSH
5338: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5342: LD_EXP 1
5346: PPUSH
5347: LD_STRING D1-JMM-2
5349: PPUSH
5350: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5354: LD_EXP 2
5358: PPUSH
5359: LD_STRING D1-Pow-2
5361: PPUSH
5362: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5366: LD_EXP 1
5370: PPUSH
5371: LD_STRING D1-JMM-3
5373: PPUSH
5374: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5378: LD_EXP 2
5382: PPUSH
5383: LD_STRING D1-Pow-3
5385: PPUSH
5386: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5390: LD_EXP 1
5394: PPUSH
5395: LD_STRING D1-JMM-4
5397: PPUSH
5398: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5402: LD_EXP 2
5406: PPUSH
5407: LD_STRING D1-Pow-4
5409: PPUSH
5410: CALL_OW 94
// SelectAndSaveCharacters ;
5414: CALL 4281 0 0
// InGameOff ;
5418: CALL_OW 9
// Query ( Q1 ) ;
5422: LD_STRING Q1
5424: PPUSH
5425: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5429: LD_INT 2
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: CALL_OW 424
// end ; end_of_file
5439: LD_VAR 0 1
5443: RET
// export globalGameSaveCounter ; every 0 0$1 do
5444: GO 5446
5446: DISABLE
// begin enable ;
5447: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5448: LD_STRING updateTimer(
5450: PUSH
5451: LD_OWVAR 1
5455: STR
5456: PUSH
5457: LD_STRING );
5459: STR
5460: PPUSH
5461: CALL_OW 559
// end ;
5465: END
// every 0 0$1 do
5466: GO 5468
5468: DISABLE
// begin globalGameSaveCounter := 0 ;
5469: LD_ADDR_EXP 24
5473: PUSH
5474: LD_INT 0
5476: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5477: LD_STRING setGameSaveCounter(0)
5479: PPUSH
5480: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5484: LD_STRING initStreamRollete();
5486: PPUSH
5487: CALL_OW 559
// InitStreamMode ;
5491: CALL 6817 0 0
// DefineStreamItems ( false ) ;
5495: LD_INT 0
5497: PPUSH
5498: CALL 7281 0 1
// end ;
5502: END
// export function SOS_MapStart ( ) ; begin
5503: LD_INT 0
5505: PPUSH
// if streamModeActive then
5506: LD_EXP 25
5510: IFFALSE 5519
// DefineStreamItems ( true ) ;
5512: LD_INT 1
5514: PPUSH
5515: CALL 7281 0 1
// UpdateLuaVariables ( ) ;
5519: CALL 5536 0 0
// UpdateFactoryWaypoints ( ) ;
5523: CALL 20150 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5527: CALL 20407 0 0
// end ;
5531: LD_VAR 0 1
5535: RET
// function UpdateLuaVariables ( ) ; begin
5536: LD_INT 0
5538: PPUSH
// if globalGameSaveCounter then
5539: LD_EXP 24
5543: IFFALSE 5577
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5545: LD_ADDR_EXP 24
5549: PUSH
5550: LD_EXP 24
5554: PPUSH
5555: CALL 64439 0 1
5559: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5560: LD_STRING setGameSaveCounter(
5562: PUSH
5563: LD_EXP 24
5567: STR
5568: PUSH
5569: LD_STRING )
5571: STR
5572: PPUSH
5573: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5577: LD_STRING setGameDifficulty(
5579: PUSH
5580: LD_OWVAR 67
5584: STR
5585: PUSH
5586: LD_STRING )
5588: STR
5589: PPUSH
5590: CALL_OW 559
// end ;
5594: LD_VAR 0 1
5598: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5599: LD_INT 0
5601: PPUSH
// if p2 = stream_mode then
5602: LD_VAR 0 2
5606: PUSH
5607: LD_INT 100
5609: EQUAL
5610: IFFALSE 6613
// begin if not StreamModeActive then
5612: LD_EXP 25
5616: NOT
5617: IFFALSE 5627
// StreamModeActive := true ;
5619: LD_ADDR_EXP 25
5623: PUSH
5624: LD_INT 1
5626: ST_TO_ADDR
// if p3 = 0 then
5627: LD_VAR 0 3
5631: PUSH
5632: LD_INT 0
5634: EQUAL
5635: IFFALSE 5641
// InitStreamMode ;
5637: CALL 6817 0 0
// if p3 = 1 then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 1
5648: EQUAL
5649: IFFALSE 5659
// sRocket := true ;
5651: LD_ADDR_EXP 30
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// if p3 = 2 then
5659: LD_VAR 0 3
5663: PUSH
5664: LD_INT 2
5666: EQUAL
5667: IFFALSE 5677
// sSpeed := true ;
5669: LD_ADDR_EXP 29
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// if p3 = 3 then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 3
5684: EQUAL
5685: IFFALSE 5695
// sEngine := true ;
5687: LD_ADDR_EXP 31
5691: PUSH
5692: LD_INT 1
5694: ST_TO_ADDR
// if p3 = 4 then
5695: LD_VAR 0 3
5699: PUSH
5700: LD_INT 4
5702: EQUAL
5703: IFFALSE 5713
// sSpec := true ;
5705: LD_ADDR_EXP 28
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// if p3 = 5 then
5713: LD_VAR 0 3
5717: PUSH
5718: LD_INT 5
5720: EQUAL
5721: IFFALSE 5731
// sLevel := true ;
5723: LD_ADDR_EXP 32
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// if p3 = 6 then
5731: LD_VAR 0 3
5735: PUSH
5736: LD_INT 6
5738: EQUAL
5739: IFFALSE 5749
// sArmoury := true ;
5741: LD_ADDR_EXP 33
5745: PUSH
5746: LD_INT 1
5748: ST_TO_ADDR
// if p3 = 7 then
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 7
5756: EQUAL
5757: IFFALSE 5767
// sRadar := true ;
5759: LD_ADDR_EXP 34
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// if p3 = 8 then
5767: LD_VAR 0 3
5771: PUSH
5772: LD_INT 8
5774: EQUAL
5775: IFFALSE 5785
// sBunker := true ;
5777: LD_ADDR_EXP 35
5781: PUSH
5782: LD_INT 1
5784: ST_TO_ADDR
// if p3 = 9 then
5785: LD_VAR 0 3
5789: PUSH
5790: LD_INT 9
5792: EQUAL
5793: IFFALSE 5803
// sHack := true ;
5795: LD_ADDR_EXP 36
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// if p3 = 10 then
5803: LD_VAR 0 3
5807: PUSH
5808: LD_INT 10
5810: EQUAL
5811: IFFALSE 5821
// sFire := true ;
5813: LD_ADDR_EXP 37
5817: PUSH
5818: LD_INT 1
5820: ST_TO_ADDR
// if p3 = 11 then
5821: LD_VAR 0 3
5825: PUSH
5826: LD_INT 11
5828: EQUAL
5829: IFFALSE 5839
// sRefresh := true ;
5831: LD_ADDR_EXP 38
5835: PUSH
5836: LD_INT 1
5838: ST_TO_ADDR
// if p3 = 12 then
5839: LD_VAR 0 3
5843: PUSH
5844: LD_INT 12
5846: EQUAL
5847: IFFALSE 5857
// sExp := true ;
5849: LD_ADDR_EXP 39
5853: PUSH
5854: LD_INT 1
5856: ST_TO_ADDR
// if p3 = 13 then
5857: LD_VAR 0 3
5861: PUSH
5862: LD_INT 13
5864: EQUAL
5865: IFFALSE 5875
// sDepot := true ;
5867: LD_ADDR_EXP 40
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// if p3 = 14 then
5875: LD_VAR 0 3
5879: PUSH
5880: LD_INT 14
5882: EQUAL
5883: IFFALSE 5893
// sFlag := true ;
5885: LD_ADDR_EXP 41
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// if p3 = 15 then
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 15
5900: EQUAL
5901: IFFALSE 5911
// sKamikadze := true ;
5903: LD_ADDR_EXP 49
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// if p3 = 16 then
5911: LD_VAR 0 3
5915: PUSH
5916: LD_INT 16
5918: EQUAL
5919: IFFALSE 5929
// sTroll := true ;
5921: LD_ADDR_EXP 50
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// if p3 = 17 then
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 17
5936: EQUAL
5937: IFFALSE 5947
// sSlow := true ;
5939: LD_ADDR_EXP 51
5943: PUSH
5944: LD_INT 1
5946: ST_TO_ADDR
// if p3 = 18 then
5947: LD_VAR 0 3
5951: PUSH
5952: LD_INT 18
5954: EQUAL
5955: IFFALSE 5965
// sLack := true ;
5957: LD_ADDR_EXP 52
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// if p3 = 19 then
5965: LD_VAR 0 3
5969: PUSH
5970: LD_INT 19
5972: EQUAL
5973: IFFALSE 5983
// sTank := true ;
5975: LD_ADDR_EXP 54
5979: PUSH
5980: LD_INT 1
5982: ST_TO_ADDR
// if p3 = 20 then
5983: LD_VAR 0 3
5987: PUSH
5988: LD_INT 20
5990: EQUAL
5991: IFFALSE 6001
// sRemote := true ;
5993: LD_ADDR_EXP 55
5997: PUSH
5998: LD_INT 1
6000: ST_TO_ADDR
// if p3 = 21 then
6001: LD_VAR 0 3
6005: PUSH
6006: LD_INT 21
6008: EQUAL
6009: IFFALSE 6019
// sPowell := true ;
6011: LD_ADDR_EXP 56
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// if p3 = 22 then
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 22
6026: EQUAL
6027: IFFALSE 6037
// sTeleport := true ;
6029: LD_ADDR_EXP 59
6033: PUSH
6034: LD_INT 1
6036: ST_TO_ADDR
// if p3 = 23 then
6037: LD_VAR 0 3
6041: PUSH
6042: LD_INT 23
6044: EQUAL
6045: IFFALSE 6055
// sOilTower := true ;
6047: LD_ADDR_EXP 61
6051: PUSH
6052: LD_INT 1
6054: ST_TO_ADDR
// if p3 = 24 then
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 24
6062: EQUAL
6063: IFFALSE 6073
// sShovel := true ;
6065: LD_ADDR_EXP 62
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// if p3 = 25 then
6073: LD_VAR 0 3
6077: PUSH
6078: LD_INT 25
6080: EQUAL
6081: IFFALSE 6091
// sSheik := true ;
6083: LD_ADDR_EXP 63
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// if p3 = 26 then
6091: LD_VAR 0 3
6095: PUSH
6096: LD_INT 26
6098: EQUAL
6099: IFFALSE 6109
// sEarthquake := true ;
6101: LD_ADDR_EXP 65
6105: PUSH
6106: LD_INT 1
6108: ST_TO_ADDR
// if p3 = 27 then
6109: LD_VAR 0 3
6113: PUSH
6114: LD_INT 27
6116: EQUAL
6117: IFFALSE 6127
// sAI := true ;
6119: LD_ADDR_EXP 66
6123: PUSH
6124: LD_INT 1
6126: ST_TO_ADDR
// if p3 = 28 then
6127: LD_VAR 0 3
6131: PUSH
6132: LD_INT 28
6134: EQUAL
6135: IFFALSE 6145
// sCargo := true ;
6137: LD_ADDR_EXP 69
6141: PUSH
6142: LD_INT 1
6144: ST_TO_ADDR
// if p3 = 29 then
6145: LD_VAR 0 3
6149: PUSH
6150: LD_INT 29
6152: EQUAL
6153: IFFALSE 6163
// sDLaser := true ;
6155: LD_ADDR_EXP 70
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// if p3 = 30 then
6163: LD_VAR 0 3
6167: PUSH
6168: LD_INT 30
6170: EQUAL
6171: IFFALSE 6181
// sExchange := true ;
6173: LD_ADDR_EXP 71
6177: PUSH
6178: LD_INT 1
6180: ST_TO_ADDR
// if p3 = 31 then
6181: LD_VAR 0 3
6185: PUSH
6186: LD_INT 31
6188: EQUAL
6189: IFFALSE 6199
// sFac := true ;
6191: LD_ADDR_EXP 72
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// if p3 = 32 then
6199: LD_VAR 0 3
6203: PUSH
6204: LD_INT 32
6206: EQUAL
6207: IFFALSE 6217
// sPower := true ;
6209: LD_ADDR_EXP 73
6213: PUSH
6214: LD_INT 1
6216: ST_TO_ADDR
// if p3 = 33 then
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 33
6224: EQUAL
6225: IFFALSE 6235
// sRandom := true ;
6227: LD_ADDR_EXP 74
6231: PUSH
6232: LD_INT 1
6234: ST_TO_ADDR
// if p3 = 34 then
6235: LD_VAR 0 3
6239: PUSH
6240: LD_INT 34
6242: EQUAL
6243: IFFALSE 6253
// sShield := true ;
6245: LD_ADDR_EXP 75
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if p3 = 35 then
6253: LD_VAR 0 3
6257: PUSH
6258: LD_INT 35
6260: EQUAL
6261: IFFALSE 6271
// sTime := true ;
6263: LD_ADDR_EXP 76
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// if p3 = 36 then
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 36
6278: EQUAL
6279: IFFALSE 6289
// sTools := true ;
6281: LD_ADDR_EXP 77
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
// if p3 = 101 then
6289: LD_VAR 0 3
6293: PUSH
6294: LD_INT 101
6296: EQUAL
6297: IFFALSE 6307
// sSold := true ;
6299: LD_ADDR_EXP 42
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// if p3 = 102 then
6307: LD_VAR 0 3
6311: PUSH
6312: LD_INT 102
6314: EQUAL
6315: IFFALSE 6325
// sDiff := true ;
6317: LD_ADDR_EXP 43
6321: PUSH
6322: LD_INT 1
6324: ST_TO_ADDR
// if p3 = 103 then
6325: LD_VAR 0 3
6329: PUSH
6330: LD_INT 103
6332: EQUAL
6333: IFFALSE 6343
// sFog := true ;
6335: LD_ADDR_EXP 46
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// if p3 = 104 then
6343: LD_VAR 0 3
6347: PUSH
6348: LD_INT 104
6350: EQUAL
6351: IFFALSE 6361
// sReset := true ;
6353: LD_ADDR_EXP 47
6357: PUSH
6358: LD_INT 1
6360: ST_TO_ADDR
// if p3 = 105 then
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 105
6368: EQUAL
6369: IFFALSE 6379
// sSun := true ;
6371: LD_ADDR_EXP 48
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// if p3 = 106 then
6379: LD_VAR 0 3
6383: PUSH
6384: LD_INT 106
6386: EQUAL
6387: IFFALSE 6397
// sTiger := true ;
6389: LD_ADDR_EXP 44
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// if p3 = 107 then
6397: LD_VAR 0 3
6401: PUSH
6402: LD_INT 107
6404: EQUAL
6405: IFFALSE 6415
// sBomb := true ;
6407: LD_ADDR_EXP 45
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// if p3 = 108 then
6415: LD_VAR 0 3
6419: PUSH
6420: LD_INT 108
6422: EQUAL
6423: IFFALSE 6433
// sWound := true ;
6425: LD_ADDR_EXP 53
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// if p3 = 109 then
6433: LD_VAR 0 3
6437: PUSH
6438: LD_INT 109
6440: EQUAL
6441: IFFALSE 6451
// sBetray := true ;
6443: LD_ADDR_EXP 57
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// if p3 = 110 then
6451: LD_VAR 0 3
6455: PUSH
6456: LD_INT 110
6458: EQUAL
6459: IFFALSE 6469
// sContamin := true ;
6461: LD_ADDR_EXP 58
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// if p3 = 111 then
6469: LD_VAR 0 3
6473: PUSH
6474: LD_INT 111
6476: EQUAL
6477: IFFALSE 6487
// sOil := true ;
6479: LD_ADDR_EXP 60
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// if p3 = 112 then
6487: LD_VAR 0 3
6491: PUSH
6492: LD_INT 112
6494: EQUAL
6495: IFFALSE 6505
// sStu := true ;
6497: LD_ADDR_EXP 64
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// if p3 = 113 then
6505: LD_VAR 0 3
6509: PUSH
6510: LD_INT 113
6512: EQUAL
6513: IFFALSE 6523
// sBazooka := true ;
6515: LD_ADDR_EXP 67
6519: PUSH
6520: LD_INT 1
6522: ST_TO_ADDR
// if p3 = 114 then
6523: LD_VAR 0 3
6527: PUSH
6528: LD_INT 114
6530: EQUAL
6531: IFFALSE 6541
// sMortar := true ;
6533: LD_ADDR_EXP 68
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// if p3 = 115 then
6541: LD_VAR 0 3
6545: PUSH
6546: LD_INT 115
6548: EQUAL
6549: IFFALSE 6559
// sRanger := true ;
6551: LD_ADDR_EXP 78
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// if p3 = 116 then
6559: LD_VAR 0 3
6563: PUSH
6564: LD_INT 116
6566: EQUAL
6567: IFFALSE 6577
// sComputer := true ;
6569: LD_ADDR_EXP 79
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
// if p3 = 117 then
6577: LD_VAR 0 3
6581: PUSH
6582: LD_INT 117
6584: EQUAL
6585: IFFALSE 6595
// s30 := true ;
6587: LD_ADDR_EXP 80
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// if p3 = 118 then
6595: LD_VAR 0 3
6599: PUSH
6600: LD_INT 118
6602: EQUAL
6603: IFFALSE 6613
// s60 := true ;
6605: LD_ADDR_EXP 81
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// end ; if p2 = hack_mode then
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 101
6620: EQUAL
6621: IFFALSE 6749
// begin case p3 of 1 :
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 1
6630: DOUBLE
6631: EQUAL
6632: IFTRUE 6636
6634: GO 6643
6636: POP
// hHackUnlimitedResources ; 2 :
6637: CALL 18896 0 0
6641: GO 6749
6643: LD_INT 2
6645: DOUBLE
6646: EQUAL
6647: IFTRUE 6651
6649: GO 6658
6651: POP
// hHackSetLevel10 ; 3 :
6652: CALL 19029 0 0
6656: GO 6749
6658: LD_INT 3
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6673
6666: POP
// hHackSetLevel10YourUnits ; 4 :
6667: CALL 19114 0 0
6671: GO 6749
6673: LD_INT 4
6675: DOUBLE
6676: EQUAL
6677: IFTRUE 6681
6679: GO 6688
6681: POP
// hHackInvincible ; 5 :
6682: CALL 19562 0 0
6686: GO 6749
6688: LD_INT 5
6690: DOUBLE
6691: EQUAL
6692: IFTRUE 6696
6694: GO 6703
6696: POP
// hHackInvisible ; 6 :
6697: CALL 19673 0 0
6701: GO 6749
6703: LD_INT 6
6705: DOUBLE
6706: EQUAL
6707: IFTRUE 6711
6709: GO 6718
6711: POP
// hHackChangeYourSide ; 7 :
6712: CALL 19730 0 0
6716: GO 6749
6718: LD_INT 7
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6726
6724: GO 6733
6726: POP
// hHackChangeUnitSide ; 8 :
6727: CALL 19772 0 0
6731: GO 6749
6733: LD_INT 8
6735: DOUBLE
6736: EQUAL
6737: IFTRUE 6741
6739: GO 6748
6741: POP
// hHackFog ; end ;
6742: CALL 19873 0 0
6746: GO 6749
6748: POP
// end ; if p2 = game_save_mode then
6749: LD_VAR 0 2
6753: PUSH
6754: LD_INT 102
6756: EQUAL
6757: IFFALSE 6812
// begin if p3 = 1 then
6759: LD_VAR 0 3
6763: PUSH
6764: LD_INT 1
6766: EQUAL
6767: IFFALSE 6779
// globalGameSaveCounter := p4 ;
6769: LD_ADDR_EXP 24
6773: PUSH
6774: LD_VAR 0 4
6778: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6779: LD_VAR 0 3
6783: PUSH
6784: LD_INT 2
6786: EQUAL
6787: PUSH
6788: LD_EXP 24
6792: AND
6793: IFFALSE 6812
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6795: LD_STRING setGameSaveCounter(
6797: PUSH
6798: LD_EXP 24
6802: STR
6803: PUSH
6804: LD_STRING )
6806: STR
6807: PPUSH
6808: CALL_OW 559
// end ; end ;
6812: LD_VAR 0 7
6816: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6817: LD_INT 0
6819: PPUSH
// streamModeActive := false ;
6820: LD_ADDR_EXP 25
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// normalCounter := 36 ;
6828: LD_ADDR_EXP 26
6832: PUSH
6833: LD_INT 36
6835: ST_TO_ADDR
// hardcoreCounter := 18 ;
6836: LD_ADDR_EXP 27
6840: PUSH
6841: LD_INT 18
6843: ST_TO_ADDR
// sRocket := false ;
6844: LD_ADDR_EXP 30
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// sSpeed := false ;
6852: LD_ADDR_EXP 29
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// sEngine := false ;
6860: LD_ADDR_EXP 31
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// sSpec := false ;
6868: LD_ADDR_EXP 28
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// sLevel := false ;
6876: LD_ADDR_EXP 32
6880: PUSH
6881: LD_INT 0
6883: ST_TO_ADDR
// sArmoury := false ;
6884: LD_ADDR_EXP 33
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// sRadar := false ;
6892: LD_ADDR_EXP 34
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// sBunker := false ;
6900: LD_ADDR_EXP 35
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// sHack := false ;
6908: LD_ADDR_EXP 36
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// sFire := false ;
6916: LD_ADDR_EXP 37
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// sRefresh := false ;
6924: LD_ADDR_EXP 38
6928: PUSH
6929: LD_INT 0
6931: ST_TO_ADDR
// sExp := false ;
6932: LD_ADDR_EXP 39
6936: PUSH
6937: LD_INT 0
6939: ST_TO_ADDR
// sDepot := false ;
6940: LD_ADDR_EXP 40
6944: PUSH
6945: LD_INT 0
6947: ST_TO_ADDR
// sFlag := false ;
6948: LD_ADDR_EXP 41
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// sKamikadze := false ;
6956: LD_ADDR_EXP 49
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// sTroll := false ;
6964: LD_ADDR_EXP 50
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// sSlow := false ;
6972: LD_ADDR_EXP 51
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// sLack := false ;
6980: LD_ADDR_EXP 52
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// sTank := false ;
6988: LD_ADDR_EXP 54
6992: PUSH
6993: LD_INT 0
6995: ST_TO_ADDR
// sRemote := false ;
6996: LD_ADDR_EXP 55
7000: PUSH
7001: LD_INT 0
7003: ST_TO_ADDR
// sPowell := false ;
7004: LD_ADDR_EXP 56
7008: PUSH
7009: LD_INT 0
7011: ST_TO_ADDR
// sTeleport := false ;
7012: LD_ADDR_EXP 59
7016: PUSH
7017: LD_INT 0
7019: ST_TO_ADDR
// sOilTower := false ;
7020: LD_ADDR_EXP 61
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// sShovel := false ;
7028: LD_ADDR_EXP 62
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// sSheik := false ;
7036: LD_ADDR_EXP 63
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// sEarthquake := false ;
7044: LD_ADDR_EXP 65
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// sAI := false ;
7052: LD_ADDR_EXP 66
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// sCargo := false ;
7060: LD_ADDR_EXP 69
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// sDLaser := false ;
7068: LD_ADDR_EXP 70
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// sExchange := false ;
7076: LD_ADDR_EXP 71
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// sFac := false ;
7084: LD_ADDR_EXP 72
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// sPower := false ;
7092: LD_ADDR_EXP 73
7096: PUSH
7097: LD_INT 0
7099: ST_TO_ADDR
// sRandom := false ;
7100: LD_ADDR_EXP 74
7104: PUSH
7105: LD_INT 0
7107: ST_TO_ADDR
// sShield := false ;
7108: LD_ADDR_EXP 75
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// sTime := false ;
7116: LD_ADDR_EXP 76
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// sTools := false ;
7124: LD_ADDR_EXP 77
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// sSold := false ;
7132: LD_ADDR_EXP 42
7136: PUSH
7137: LD_INT 0
7139: ST_TO_ADDR
// sDiff := false ;
7140: LD_ADDR_EXP 43
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// sFog := false ;
7148: LD_ADDR_EXP 46
7152: PUSH
7153: LD_INT 0
7155: ST_TO_ADDR
// sReset := false ;
7156: LD_ADDR_EXP 47
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// sSun := false ;
7164: LD_ADDR_EXP 48
7168: PUSH
7169: LD_INT 0
7171: ST_TO_ADDR
// sTiger := false ;
7172: LD_ADDR_EXP 44
7176: PUSH
7177: LD_INT 0
7179: ST_TO_ADDR
// sBomb := false ;
7180: LD_ADDR_EXP 45
7184: PUSH
7185: LD_INT 0
7187: ST_TO_ADDR
// sWound := false ;
7188: LD_ADDR_EXP 53
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// sBetray := false ;
7196: LD_ADDR_EXP 57
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// sContamin := false ;
7204: LD_ADDR_EXP 58
7208: PUSH
7209: LD_INT 0
7211: ST_TO_ADDR
// sOil := false ;
7212: LD_ADDR_EXP 60
7216: PUSH
7217: LD_INT 0
7219: ST_TO_ADDR
// sStu := false ;
7220: LD_ADDR_EXP 64
7224: PUSH
7225: LD_INT 0
7227: ST_TO_ADDR
// sBazooka := false ;
7228: LD_ADDR_EXP 67
7232: PUSH
7233: LD_INT 0
7235: ST_TO_ADDR
// sMortar := false ;
7236: LD_ADDR_EXP 68
7240: PUSH
7241: LD_INT 0
7243: ST_TO_ADDR
// sRanger := false ;
7244: LD_ADDR_EXP 78
7248: PUSH
7249: LD_INT 0
7251: ST_TO_ADDR
// sComputer := false ;
7252: LD_ADDR_EXP 79
7256: PUSH
7257: LD_INT 0
7259: ST_TO_ADDR
// s30 := false ;
7260: LD_ADDR_EXP 80
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// s60 := false ;
7268: LD_ADDR_EXP 81
7272: PUSH
7273: LD_INT 0
7275: ST_TO_ADDR
// end ;
7276: LD_VAR 0 1
7280: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7281: LD_INT 0
7283: PPUSH
7284: PPUSH
7285: PPUSH
7286: PPUSH
7287: PPUSH
7288: PPUSH
7289: PPUSH
// result := [ ] ;
7290: LD_ADDR_VAR 0 2
7294: PUSH
7295: EMPTY
7296: ST_TO_ADDR
// if campaign_id = 1 then
7297: LD_OWVAR 69
7301: PUSH
7302: LD_INT 1
7304: EQUAL
7305: IFFALSE 10471
// begin case mission_number of 1 :
7307: LD_OWVAR 70
7311: PUSH
7312: LD_INT 1
7314: DOUBLE
7315: EQUAL
7316: IFTRUE 7320
7318: GO 7396
7320: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7321: LD_ADDR_VAR 0 2
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 4
7331: PUSH
7332: LD_INT 11
7334: PUSH
7335: LD_INT 12
7337: PUSH
7338: LD_INT 15
7340: PUSH
7341: LD_INT 16
7343: PUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 23
7349: PUSH
7350: LD_INT 26
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 101
7366: PUSH
7367: LD_INT 102
7369: PUSH
7370: LD_INT 106
7372: PUSH
7373: LD_INT 116
7375: PUSH
7376: LD_INT 117
7378: PUSH
7379: LD_INT 118
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: ST_TO_ADDR
7394: GO 10469
7396: LD_INT 2
7398: DOUBLE
7399: EQUAL
7400: IFTRUE 7404
7402: GO 7488
7404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7405: LD_ADDR_VAR 0 2
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 11
7418: PUSH
7419: LD_INT 12
7421: PUSH
7422: LD_INT 15
7424: PUSH
7425: LD_INT 16
7427: PUSH
7428: LD_INT 22
7430: PUSH
7431: LD_INT 23
7433: PUSH
7434: LD_INT 26
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 101
7450: PUSH
7451: LD_INT 102
7453: PUSH
7454: LD_INT 105
7456: PUSH
7457: LD_INT 106
7459: PUSH
7460: LD_INT 108
7462: PUSH
7463: LD_INT 116
7465: PUSH
7466: LD_INT 117
7468: PUSH
7469: LD_INT 118
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: ST_TO_ADDR
7486: GO 10469
7488: LD_INT 3
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7584
7496: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7497: LD_ADDR_VAR 0 2
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: LD_INT 5
7510: PUSH
7511: LD_INT 11
7513: PUSH
7514: LD_INT 12
7516: PUSH
7517: LD_INT 15
7519: PUSH
7520: LD_INT 16
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 26
7528: PUSH
7529: LD_INT 36
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 101
7546: PUSH
7547: LD_INT 102
7549: PUSH
7550: LD_INT 105
7552: PUSH
7553: LD_INT 106
7555: PUSH
7556: LD_INT 108
7558: PUSH
7559: LD_INT 116
7561: PUSH
7562: LD_INT 117
7564: PUSH
7565: LD_INT 118
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: ST_TO_ADDR
7582: GO 10469
7584: LD_INT 4
7586: DOUBLE
7587: EQUAL
7588: IFTRUE 7592
7590: GO 7688
7592: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7593: LD_ADDR_VAR 0 2
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 4
7603: PUSH
7604: LD_INT 5
7606: PUSH
7607: LD_INT 8
7609: PUSH
7610: LD_INT 11
7612: PUSH
7613: LD_INT 12
7615: PUSH
7616: LD_INT 15
7618: PUSH
7619: LD_INT 16
7621: PUSH
7622: LD_INT 22
7624: PUSH
7625: LD_INT 23
7627: PUSH
7628: LD_INT 26
7630: PUSH
7631: LD_INT 36
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 101
7650: PUSH
7651: LD_INT 102
7653: PUSH
7654: LD_INT 105
7656: PUSH
7657: LD_INT 106
7659: PUSH
7660: LD_INT 108
7662: PUSH
7663: LD_INT 116
7665: PUSH
7666: LD_INT 117
7668: PUSH
7669: LD_INT 118
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 10469
7688: LD_INT 5
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7808
7696: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 2
7704: PUSH
7705: LD_INT 4
7707: PUSH
7708: LD_INT 5
7710: PUSH
7711: LD_INT 6
7713: PUSH
7714: LD_INT 8
7716: PUSH
7717: LD_INT 11
7719: PUSH
7720: LD_INT 12
7722: PUSH
7723: LD_INT 15
7725: PUSH
7726: LD_INT 16
7728: PUSH
7729: LD_INT 22
7731: PUSH
7732: LD_INT 23
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 26
7740: PUSH
7741: LD_INT 36
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 101
7762: PUSH
7763: LD_INT 102
7765: PUSH
7766: LD_INT 105
7768: PUSH
7769: LD_INT 106
7771: PUSH
7772: LD_INT 108
7774: PUSH
7775: LD_INT 109
7777: PUSH
7778: LD_INT 112
7780: PUSH
7781: LD_INT 116
7783: PUSH
7784: LD_INT 117
7786: PUSH
7787: LD_INT 118
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: ST_TO_ADDR
7806: GO 10469
7808: LD_INT 6
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7948
7816: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7817: LD_ADDR_VAR 0 2
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 4
7827: PUSH
7828: LD_INT 5
7830: PUSH
7831: LD_INT 6
7833: PUSH
7834: LD_INT 8
7836: PUSH
7837: LD_INT 11
7839: PUSH
7840: LD_INT 12
7842: PUSH
7843: LD_INT 15
7845: PUSH
7846: LD_INT 16
7848: PUSH
7849: LD_INT 20
7851: PUSH
7852: LD_INT 21
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_INT 23
7860: PUSH
7861: LD_INT 25
7863: PUSH
7864: LD_INT 26
7866: PUSH
7867: LD_INT 30
7869: PUSH
7870: LD_INT 31
7872: PUSH
7873: LD_INT 32
7875: PUSH
7876: LD_INT 36
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 101
7902: PUSH
7903: LD_INT 102
7905: PUSH
7906: LD_INT 105
7908: PUSH
7909: LD_INT 106
7911: PUSH
7912: LD_INT 108
7914: PUSH
7915: LD_INT 109
7917: PUSH
7918: LD_INT 112
7920: PUSH
7921: LD_INT 116
7923: PUSH
7924: LD_INT 117
7926: PUSH
7927: LD_INT 118
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: ST_TO_ADDR
7946: GO 10469
7948: LD_INT 7
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 8068
7956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: LD_INT 4
7967: PUSH
7968: LD_INT 5
7970: PUSH
7971: LD_INT 7
7973: PUSH
7974: LD_INT 11
7976: PUSH
7977: LD_INT 12
7979: PUSH
7980: LD_INT 15
7982: PUSH
7983: LD_INT 16
7985: PUSH
7986: LD_INT 20
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 22
7994: PUSH
7995: LD_INT 23
7997: PUSH
7998: LD_INT 25
8000: PUSH
8001: LD_INT 26
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: PUSH
8020: LD_INT 101
8022: PUSH
8023: LD_INT 102
8025: PUSH
8026: LD_INT 103
8028: PUSH
8029: LD_INT 105
8031: PUSH
8032: LD_INT 106
8034: PUSH
8035: LD_INT 108
8037: PUSH
8038: LD_INT 112
8040: PUSH
8041: LD_INT 116
8043: PUSH
8044: LD_INT 117
8046: PUSH
8047: LD_INT 118
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: ST_TO_ADDR
8066: GO 10469
8068: LD_INT 8
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8216
8076: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: LD_INT 6
8093: PUSH
8094: LD_INT 7
8096: PUSH
8097: LD_INT 8
8099: PUSH
8100: LD_INT 11
8102: PUSH
8103: LD_INT 12
8105: PUSH
8106: LD_INT 15
8108: PUSH
8109: LD_INT 16
8111: PUSH
8112: LD_INT 20
8114: PUSH
8115: LD_INT 21
8117: PUSH
8118: LD_INT 22
8120: PUSH
8121: LD_INT 23
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 26
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 31
8135: PUSH
8136: LD_INT 32
8138: PUSH
8139: LD_INT 36
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 101
8166: PUSH
8167: LD_INT 102
8169: PUSH
8170: LD_INT 103
8172: PUSH
8173: LD_INT 105
8175: PUSH
8176: LD_INT 106
8178: PUSH
8179: LD_INT 108
8181: PUSH
8182: LD_INT 109
8184: PUSH
8185: LD_INT 112
8187: PUSH
8188: LD_INT 116
8190: PUSH
8191: LD_INT 117
8193: PUSH
8194: LD_INT 118
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: ST_TO_ADDR
8214: GO 10469
8216: LD_INT 9
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8372
8224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: LD_INT 5
8238: PUSH
8239: LD_INT 6
8241: PUSH
8242: LD_INT 7
8244: PUSH
8245: LD_INT 8
8247: PUSH
8248: LD_INT 11
8250: PUSH
8251: LD_INT 12
8253: PUSH
8254: LD_INT 15
8256: PUSH
8257: LD_INT 16
8259: PUSH
8260: LD_INT 20
8262: PUSH
8263: LD_INT 21
8265: PUSH
8266: LD_INT 22
8268: PUSH
8269: LD_INT 23
8271: PUSH
8272: LD_INT 25
8274: PUSH
8275: LD_INT 26
8277: PUSH
8278: LD_INT 28
8280: PUSH
8281: LD_INT 30
8283: PUSH
8284: LD_INT 31
8286: PUSH
8287: LD_INT 32
8289: PUSH
8290: LD_INT 36
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 101
8318: PUSH
8319: LD_INT 102
8321: PUSH
8322: LD_INT 103
8324: PUSH
8325: LD_INT 105
8327: PUSH
8328: LD_INT 106
8330: PUSH
8331: LD_INT 108
8333: PUSH
8334: LD_INT 109
8336: PUSH
8337: LD_INT 112
8339: PUSH
8340: LD_INT 114
8342: PUSH
8343: LD_INT 116
8345: PUSH
8346: LD_INT 117
8348: PUSH
8349: LD_INT 118
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
8370: GO 10469
8372: LD_INT 10
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8576
8380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8381: LD_ADDR_VAR 0 2
8385: PUSH
8386: LD_INT 2
8388: PUSH
8389: LD_INT 4
8391: PUSH
8392: LD_INT 5
8394: PUSH
8395: LD_INT 6
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 8
8403: PUSH
8404: LD_INT 9
8406: PUSH
8407: LD_INT 10
8409: PUSH
8410: LD_INT 11
8412: PUSH
8413: LD_INT 12
8415: PUSH
8416: LD_INT 13
8418: PUSH
8419: LD_INT 14
8421: PUSH
8422: LD_INT 15
8424: PUSH
8425: LD_INT 16
8427: PUSH
8428: LD_INT 17
8430: PUSH
8431: LD_INT 18
8433: PUSH
8434: LD_INT 19
8436: PUSH
8437: LD_INT 20
8439: PUSH
8440: LD_INT 21
8442: PUSH
8443: LD_INT 22
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 24
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 26
8457: PUSH
8458: LD_INT 28
8460: PUSH
8461: LD_INT 30
8463: PUSH
8464: LD_INT 31
8466: PUSH
8467: LD_INT 32
8469: PUSH
8470: LD_INT 36
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 101
8506: PUSH
8507: LD_INT 102
8509: PUSH
8510: LD_INT 103
8512: PUSH
8513: LD_INT 104
8515: PUSH
8516: LD_INT 105
8518: PUSH
8519: LD_INT 106
8521: PUSH
8522: LD_INT 107
8524: PUSH
8525: LD_INT 108
8527: PUSH
8528: LD_INT 109
8530: PUSH
8531: LD_INT 110
8533: PUSH
8534: LD_INT 111
8536: PUSH
8537: LD_INT 112
8539: PUSH
8540: LD_INT 114
8542: PUSH
8543: LD_INT 116
8545: PUSH
8546: LD_INT 117
8548: PUSH
8549: LD_INT 118
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: ST_TO_ADDR
8574: GO 10469
8576: LD_INT 11
8578: DOUBLE
8579: EQUAL
8580: IFTRUE 8584
8582: GO 8788
8584: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 5
8601: PUSH
8602: LD_INT 6
8604: PUSH
8605: LD_INT 7
8607: PUSH
8608: LD_INT 8
8610: PUSH
8611: LD_INT 9
8613: PUSH
8614: LD_INT 10
8616: PUSH
8617: LD_INT 11
8619: PUSH
8620: LD_INT 12
8622: PUSH
8623: LD_INT 13
8625: PUSH
8626: LD_INT 14
8628: PUSH
8629: LD_INT 15
8631: PUSH
8632: LD_INT 16
8634: PUSH
8635: LD_INT 17
8637: PUSH
8638: LD_INT 18
8640: PUSH
8641: LD_INT 19
8643: PUSH
8644: LD_INT 20
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 22
8652: PUSH
8653: LD_INT 23
8655: PUSH
8656: LD_INT 24
8658: PUSH
8659: LD_INT 25
8661: PUSH
8662: LD_INT 26
8664: PUSH
8665: LD_INT 28
8667: PUSH
8668: LD_INT 30
8670: PUSH
8671: LD_INT 31
8673: PUSH
8674: LD_INT 32
8676: PUSH
8677: LD_INT 34
8679: PUSH
8680: LD_INT 36
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 101
8718: PUSH
8719: LD_INT 102
8721: PUSH
8722: LD_INT 103
8724: PUSH
8725: LD_INT 104
8727: PUSH
8728: LD_INT 105
8730: PUSH
8731: LD_INT 106
8733: PUSH
8734: LD_INT 107
8736: PUSH
8737: LD_INT 108
8739: PUSH
8740: LD_INT 109
8742: PUSH
8743: LD_INT 110
8745: PUSH
8746: LD_INT 111
8748: PUSH
8749: LD_INT 112
8751: PUSH
8752: LD_INT 114
8754: PUSH
8755: LD_INT 116
8757: PUSH
8758: LD_INT 117
8760: PUSH
8761: LD_INT 118
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: ST_TO_ADDR
8786: GO 10469
8788: LD_INT 12
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 9016
8796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 3
8810: PUSH
8811: LD_INT 4
8813: PUSH
8814: LD_INT 5
8816: PUSH
8817: LD_INT 6
8819: PUSH
8820: LD_INT 7
8822: PUSH
8823: LD_INT 8
8825: PUSH
8826: LD_INT 9
8828: PUSH
8829: LD_INT 10
8831: PUSH
8832: LD_INT 11
8834: PUSH
8835: LD_INT 12
8837: PUSH
8838: LD_INT 13
8840: PUSH
8841: LD_INT 14
8843: PUSH
8844: LD_INT 15
8846: PUSH
8847: LD_INT 16
8849: PUSH
8850: LD_INT 17
8852: PUSH
8853: LD_INT 18
8855: PUSH
8856: LD_INT 19
8858: PUSH
8859: LD_INT 20
8861: PUSH
8862: LD_INT 21
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_INT 23
8870: PUSH
8871: LD_INT 24
8873: PUSH
8874: LD_INT 25
8876: PUSH
8877: LD_INT 26
8879: PUSH
8880: LD_INT 27
8882: PUSH
8883: LD_INT 28
8885: PUSH
8886: LD_INT 30
8888: PUSH
8889: LD_INT 31
8891: PUSH
8892: LD_INT 32
8894: PUSH
8895: LD_INT 33
8897: PUSH
8898: LD_INT 34
8900: PUSH
8901: LD_INT 36
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 101
8942: PUSH
8943: LD_INT 102
8945: PUSH
8946: LD_INT 103
8948: PUSH
8949: LD_INT 104
8951: PUSH
8952: LD_INT 105
8954: PUSH
8955: LD_INT 106
8957: PUSH
8958: LD_INT 107
8960: PUSH
8961: LD_INT 108
8963: PUSH
8964: LD_INT 109
8966: PUSH
8967: LD_INT 110
8969: PUSH
8970: LD_INT 111
8972: PUSH
8973: LD_INT 112
8975: PUSH
8976: LD_INT 113
8978: PUSH
8979: LD_INT 114
8981: PUSH
8982: LD_INT 116
8984: PUSH
8985: LD_INT 117
8987: PUSH
8988: LD_INT 118
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: ST_TO_ADDR
9014: GO 10469
9016: LD_INT 13
9018: DOUBLE
9019: EQUAL
9020: IFTRUE 9024
9022: GO 9232
9024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9025: LD_ADDR_VAR 0 2
9029: PUSH
9030: LD_INT 1
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: LD_INT 4
9041: PUSH
9042: LD_INT 5
9044: PUSH
9045: LD_INT 8
9047: PUSH
9048: LD_INT 9
9050: PUSH
9051: LD_INT 10
9053: PUSH
9054: LD_INT 11
9056: PUSH
9057: LD_INT 12
9059: PUSH
9060: LD_INT 14
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: LD_INT 16
9068: PUSH
9069: LD_INT 17
9071: PUSH
9072: LD_INT 18
9074: PUSH
9075: LD_INT 19
9077: PUSH
9078: LD_INT 20
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_INT 23
9089: PUSH
9090: LD_INT 24
9092: PUSH
9093: LD_INT 25
9095: PUSH
9096: LD_INT 26
9098: PUSH
9099: LD_INT 27
9101: PUSH
9102: LD_INT 28
9104: PUSH
9105: LD_INT 30
9107: PUSH
9108: LD_INT 31
9110: PUSH
9111: LD_INT 32
9113: PUSH
9114: LD_INT 33
9116: PUSH
9117: LD_INT 34
9119: PUSH
9120: LD_INT 36
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 101
9158: PUSH
9159: LD_INT 102
9161: PUSH
9162: LD_INT 103
9164: PUSH
9165: LD_INT 104
9167: PUSH
9168: LD_INT 105
9170: PUSH
9171: LD_INT 106
9173: PUSH
9174: LD_INT 107
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 109
9182: PUSH
9183: LD_INT 110
9185: PUSH
9186: LD_INT 111
9188: PUSH
9189: LD_INT 112
9191: PUSH
9192: LD_INT 113
9194: PUSH
9195: LD_INT 114
9197: PUSH
9198: LD_INT 116
9200: PUSH
9201: LD_INT 117
9203: PUSH
9204: LD_INT 118
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: ST_TO_ADDR
9230: GO 10469
9232: LD_INT 14
9234: DOUBLE
9235: EQUAL
9236: IFTRUE 9240
9238: GO 9464
9240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 1
9248: PUSH
9249: LD_INT 2
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: LD_INT 4
9257: PUSH
9258: LD_INT 5
9260: PUSH
9261: LD_INT 6
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: LD_INT 8
9269: PUSH
9270: LD_INT 9
9272: PUSH
9273: LD_INT 10
9275: PUSH
9276: LD_INT 11
9278: PUSH
9279: LD_INT 12
9281: PUSH
9282: LD_INT 13
9284: PUSH
9285: LD_INT 14
9287: PUSH
9288: LD_INT 15
9290: PUSH
9291: LD_INT 16
9293: PUSH
9294: LD_INT 17
9296: PUSH
9297: LD_INT 18
9299: PUSH
9300: LD_INT 19
9302: PUSH
9303: LD_INT 20
9305: PUSH
9306: LD_INT 21
9308: PUSH
9309: LD_INT 22
9311: PUSH
9312: LD_INT 23
9314: PUSH
9315: LD_INT 24
9317: PUSH
9318: LD_INT 25
9320: PUSH
9321: LD_INT 26
9323: PUSH
9324: LD_INT 27
9326: PUSH
9327: LD_INT 28
9329: PUSH
9330: LD_INT 29
9332: PUSH
9333: LD_INT 30
9335: PUSH
9336: LD_INT 31
9338: PUSH
9339: LD_INT 32
9341: PUSH
9342: LD_INT 33
9344: PUSH
9345: LD_INT 34
9347: PUSH
9348: LD_INT 36
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 101
9390: PUSH
9391: LD_INT 102
9393: PUSH
9394: LD_INT 103
9396: PUSH
9397: LD_INT 104
9399: PUSH
9400: LD_INT 105
9402: PUSH
9403: LD_INT 106
9405: PUSH
9406: LD_INT 107
9408: PUSH
9409: LD_INT 108
9411: PUSH
9412: LD_INT 109
9414: PUSH
9415: LD_INT 110
9417: PUSH
9418: LD_INT 111
9420: PUSH
9421: LD_INT 112
9423: PUSH
9424: LD_INT 113
9426: PUSH
9427: LD_INT 114
9429: PUSH
9430: LD_INT 116
9432: PUSH
9433: LD_INT 117
9435: PUSH
9436: LD_INT 118
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: ST_TO_ADDR
9462: GO 10469
9464: LD_INT 15
9466: DOUBLE
9467: EQUAL
9468: IFTRUE 9472
9470: GO 9696
9472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9473: LD_ADDR_VAR 0 2
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: LD_INT 5
9492: PUSH
9493: LD_INT 6
9495: PUSH
9496: LD_INT 7
9498: PUSH
9499: LD_INT 8
9501: PUSH
9502: LD_INT 9
9504: PUSH
9505: LD_INT 10
9507: PUSH
9508: LD_INT 11
9510: PUSH
9511: LD_INT 12
9513: PUSH
9514: LD_INT 13
9516: PUSH
9517: LD_INT 14
9519: PUSH
9520: LD_INT 15
9522: PUSH
9523: LD_INT 16
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 18
9531: PUSH
9532: LD_INT 19
9534: PUSH
9535: LD_INT 20
9537: PUSH
9538: LD_INT 21
9540: PUSH
9541: LD_INT 22
9543: PUSH
9544: LD_INT 23
9546: PUSH
9547: LD_INT 24
9549: PUSH
9550: LD_INT 25
9552: PUSH
9553: LD_INT 26
9555: PUSH
9556: LD_INT 27
9558: PUSH
9559: LD_INT 28
9561: PUSH
9562: LD_INT 29
9564: PUSH
9565: LD_INT 30
9567: PUSH
9568: LD_INT 31
9570: PUSH
9571: LD_INT 32
9573: PUSH
9574: LD_INT 33
9576: PUSH
9577: LD_INT 34
9579: PUSH
9580: LD_INT 36
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 101
9622: PUSH
9623: LD_INT 102
9625: PUSH
9626: LD_INT 103
9628: PUSH
9629: LD_INT 104
9631: PUSH
9632: LD_INT 105
9634: PUSH
9635: LD_INT 106
9637: PUSH
9638: LD_INT 107
9640: PUSH
9641: LD_INT 108
9643: PUSH
9644: LD_INT 109
9646: PUSH
9647: LD_INT 110
9649: PUSH
9650: LD_INT 111
9652: PUSH
9653: LD_INT 112
9655: PUSH
9656: LD_INT 113
9658: PUSH
9659: LD_INT 114
9661: PUSH
9662: LD_INT 116
9664: PUSH
9665: LD_INT 117
9667: PUSH
9668: LD_INT 118
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: ST_TO_ADDR
9694: GO 10469
9696: LD_INT 16
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 9840
9704: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9705: LD_ADDR_VAR 0 2
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 4
9715: PUSH
9716: LD_INT 5
9718: PUSH
9719: LD_INT 7
9721: PUSH
9722: LD_INT 11
9724: PUSH
9725: LD_INT 12
9727: PUSH
9728: LD_INT 15
9730: PUSH
9731: LD_INT 16
9733: PUSH
9734: LD_INT 20
9736: PUSH
9737: LD_INT 21
9739: PUSH
9740: LD_INT 22
9742: PUSH
9743: LD_INT 23
9745: PUSH
9746: LD_INT 25
9748: PUSH
9749: LD_INT 26
9751: PUSH
9752: LD_INT 30
9754: PUSH
9755: LD_INT 31
9757: PUSH
9758: LD_INT 32
9760: PUSH
9761: LD_INT 33
9763: PUSH
9764: LD_INT 34
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 101
9790: PUSH
9791: LD_INT 102
9793: PUSH
9794: LD_INT 103
9796: PUSH
9797: LD_INT 106
9799: PUSH
9800: LD_INT 108
9802: PUSH
9803: LD_INT 112
9805: PUSH
9806: LD_INT 113
9808: PUSH
9809: LD_INT 114
9811: PUSH
9812: LD_INT 116
9814: PUSH
9815: LD_INT 117
9817: PUSH
9818: LD_INT 118
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
9838: GO 10469
9840: LD_INT 17
9842: DOUBLE
9843: EQUAL
9844: IFTRUE 9848
9846: GO 10072
9848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9849: LD_ADDR_VAR 0 2
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: LD_INT 3
9862: PUSH
9863: LD_INT 4
9865: PUSH
9866: LD_INT 5
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: LD_INT 7
9874: PUSH
9875: LD_INT 8
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 11
9886: PUSH
9887: LD_INT 12
9889: PUSH
9890: LD_INT 13
9892: PUSH
9893: LD_INT 14
9895: PUSH
9896: LD_INT 15
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: LD_INT 17
9904: PUSH
9905: LD_INT 18
9907: PUSH
9908: LD_INT 19
9910: PUSH
9911: LD_INT 20
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: LD_INT 24
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 26
9931: PUSH
9932: LD_INT 27
9934: PUSH
9935: LD_INT 28
9937: PUSH
9938: LD_INT 29
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 31
9946: PUSH
9947: LD_INT 32
9949: PUSH
9950: LD_INT 33
9952: PUSH
9953: LD_INT 34
9955: PUSH
9956: LD_INT 36
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 103
10004: PUSH
10005: LD_INT 104
10007: PUSH
10008: LD_INT 105
10010: PUSH
10011: LD_INT 106
10013: PUSH
10014: LD_INT 107
10016: PUSH
10017: LD_INT 108
10019: PUSH
10020: LD_INT 109
10022: PUSH
10023: LD_INT 110
10025: PUSH
10026: LD_INT 111
10028: PUSH
10029: LD_INT 112
10031: PUSH
10032: LD_INT 113
10034: PUSH
10035: LD_INT 114
10037: PUSH
10038: LD_INT 116
10040: PUSH
10041: LD_INT 117
10043: PUSH
10044: LD_INT 118
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10469
10072: LD_INT 18
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10228
10080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 7
10097: PUSH
10098: LD_INT 11
10100: PUSH
10101: LD_INT 12
10103: PUSH
10104: LD_INT 15
10106: PUSH
10107: LD_INT 16
10109: PUSH
10110: LD_INT 20
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 25
10124: PUSH
10125: LD_INT 26
10127: PUSH
10128: LD_INT 30
10130: PUSH
10131: LD_INT 31
10133: PUSH
10134: LD_INT 32
10136: PUSH
10137: LD_INT 33
10139: PUSH
10140: LD_INT 34
10142: PUSH
10143: LD_INT 35
10145: PUSH
10146: LD_INT 36
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 101
10174: PUSH
10175: LD_INT 102
10177: PUSH
10178: LD_INT 103
10180: PUSH
10181: LD_INT 106
10183: PUSH
10184: LD_INT 108
10186: PUSH
10187: LD_INT 112
10189: PUSH
10190: LD_INT 113
10192: PUSH
10193: LD_INT 114
10195: PUSH
10196: LD_INT 115
10198: PUSH
10199: LD_INT 116
10201: PUSH
10202: LD_INT 117
10204: PUSH
10205: LD_INT 118
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: ST_TO_ADDR
10226: GO 10469
10228: LD_INT 19
10230: DOUBLE
10231: EQUAL
10232: IFTRUE 10236
10234: GO 10468
10236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 1
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: LD_INT 3
10250: PUSH
10251: LD_INT 4
10253: PUSH
10254: LD_INT 5
10256: PUSH
10257: LD_INT 6
10259: PUSH
10260: LD_INT 7
10262: PUSH
10263: LD_INT 8
10265: PUSH
10266: LD_INT 9
10268: PUSH
10269: LD_INT 10
10271: PUSH
10272: LD_INT 11
10274: PUSH
10275: LD_INT 12
10277: PUSH
10278: LD_INT 13
10280: PUSH
10281: LD_INT 14
10283: PUSH
10284: LD_INT 15
10286: PUSH
10287: LD_INT 16
10289: PUSH
10290: LD_INT 17
10292: PUSH
10293: LD_INT 18
10295: PUSH
10296: LD_INT 19
10298: PUSH
10299: LD_INT 20
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 22
10307: PUSH
10308: LD_INT 23
10310: PUSH
10311: LD_INT 24
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 26
10319: PUSH
10320: LD_INT 27
10322: PUSH
10323: LD_INT 28
10325: PUSH
10326: LD_INT 29
10328: PUSH
10329: LD_INT 30
10331: PUSH
10332: LD_INT 31
10334: PUSH
10335: LD_INT 32
10337: PUSH
10338: LD_INT 33
10340: PUSH
10341: LD_INT 34
10343: PUSH
10344: LD_INT 35
10346: PUSH
10347: LD_INT 36
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 101
10390: PUSH
10391: LD_INT 102
10393: PUSH
10394: LD_INT 103
10396: PUSH
10397: LD_INT 104
10399: PUSH
10400: LD_INT 105
10402: PUSH
10403: LD_INT 106
10405: PUSH
10406: LD_INT 107
10408: PUSH
10409: LD_INT 108
10411: PUSH
10412: LD_INT 109
10414: PUSH
10415: LD_INT 110
10417: PUSH
10418: LD_INT 111
10420: PUSH
10421: LD_INT 112
10423: PUSH
10424: LD_INT 113
10426: PUSH
10427: LD_INT 114
10429: PUSH
10430: LD_INT 115
10432: PUSH
10433: LD_INT 116
10435: PUSH
10436: LD_INT 117
10438: PUSH
10439: LD_INT 118
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: ST_TO_ADDR
10466: GO 10469
10468: POP
// end else
10469: GO 10700
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10471: LD_ADDR_VAR 0 2
10475: PUSH
10476: LD_INT 1
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: LD_INT 3
10484: PUSH
10485: LD_INT 4
10487: PUSH
10488: LD_INT 5
10490: PUSH
10491: LD_INT 6
10493: PUSH
10494: LD_INT 7
10496: PUSH
10497: LD_INT 8
10499: PUSH
10500: LD_INT 9
10502: PUSH
10503: LD_INT 10
10505: PUSH
10506: LD_INT 11
10508: PUSH
10509: LD_INT 12
10511: PUSH
10512: LD_INT 13
10514: PUSH
10515: LD_INT 14
10517: PUSH
10518: LD_INT 15
10520: PUSH
10521: LD_INT 16
10523: PUSH
10524: LD_INT 17
10526: PUSH
10527: LD_INT 18
10529: PUSH
10530: LD_INT 19
10532: PUSH
10533: LD_INT 20
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 23
10544: PUSH
10545: LD_INT 24
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 26
10553: PUSH
10554: LD_INT 27
10556: PUSH
10557: LD_INT 28
10559: PUSH
10560: LD_INT 29
10562: PUSH
10563: LD_INT 30
10565: PUSH
10566: LD_INT 31
10568: PUSH
10569: LD_INT 32
10571: PUSH
10572: LD_INT 33
10574: PUSH
10575: LD_INT 34
10577: PUSH
10578: LD_INT 35
10580: PUSH
10581: LD_INT 36
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 101
10624: PUSH
10625: LD_INT 102
10627: PUSH
10628: LD_INT 103
10630: PUSH
10631: LD_INT 104
10633: PUSH
10634: LD_INT 105
10636: PUSH
10637: LD_INT 106
10639: PUSH
10640: LD_INT 107
10642: PUSH
10643: LD_INT 108
10645: PUSH
10646: LD_INT 109
10648: PUSH
10649: LD_INT 110
10651: PUSH
10652: LD_INT 111
10654: PUSH
10655: LD_INT 112
10657: PUSH
10658: LD_INT 113
10660: PUSH
10661: LD_INT 114
10663: PUSH
10664: LD_INT 115
10666: PUSH
10667: LD_INT 116
10669: PUSH
10670: LD_INT 117
10672: PUSH
10673: LD_INT 118
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: ST_TO_ADDR
// if result then
10700: LD_VAR 0 2
10704: IFFALSE 11490
// begin normal :=  ;
10706: LD_ADDR_VAR 0 5
10710: PUSH
10711: LD_STRING 
10713: ST_TO_ADDR
// hardcore :=  ;
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: LD_STRING 
10721: ST_TO_ADDR
// active :=  ;
10722: LD_ADDR_VAR 0 7
10726: PUSH
10727: LD_STRING 
10729: ST_TO_ADDR
// for i = 1 to normalCounter do
10730: LD_ADDR_VAR 0 8
10734: PUSH
10735: DOUBLE
10736: LD_INT 1
10738: DEC
10739: ST_TO_ADDR
10740: LD_EXP 26
10744: PUSH
10745: FOR_TO
10746: IFFALSE 10847
// begin tmp := 0 ;
10748: LD_ADDR_VAR 0 3
10752: PUSH
10753: LD_STRING 0
10755: ST_TO_ADDR
// if result [ 1 ] then
10756: LD_VAR 0 2
10760: PUSH
10761: LD_INT 1
10763: ARRAY
10764: IFFALSE 10829
// if result [ 1 ] [ 1 ] = i then
10766: LD_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ARRAY
10774: PUSH
10775: LD_INT 1
10777: ARRAY
10778: PUSH
10779: LD_VAR 0 8
10783: EQUAL
10784: IFFALSE 10829
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10786: LD_ADDR_VAR 0 2
10790: PUSH
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: LD_VAR 0 2
10803: PUSH
10804: LD_INT 1
10806: ARRAY
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 3
10815: PPUSH
10816: CALL_OW 1
10820: ST_TO_ADDR
// tmp := 1 ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_STRING 1
10828: ST_TO_ADDR
// end ; normal := normal & tmp ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_VAR 0 5
10838: PUSH
10839: LD_VAR 0 3
10843: STR
10844: ST_TO_ADDR
// end ;
10845: GO 10745
10847: POP
10848: POP
// for i = 1 to hardcoreCounter do
10849: LD_ADDR_VAR 0 8
10853: PUSH
10854: DOUBLE
10855: LD_INT 1
10857: DEC
10858: ST_TO_ADDR
10859: LD_EXP 27
10863: PUSH
10864: FOR_TO
10865: IFFALSE 10970
// begin tmp := 0 ;
10867: LD_ADDR_VAR 0 3
10871: PUSH
10872: LD_STRING 0
10874: ST_TO_ADDR
// if result [ 2 ] then
10875: LD_VAR 0 2
10879: PUSH
10880: LD_INT 2
10882: ARRAY
10883: IFFALSE 10952
// if result [ 2 ] [ 1 ] = 100 + i then
10885: LD_VAR 0 2
10889: PUSH
10890: LD_INT 2
10892: ARRAY
10893: PUSH
10894: LD_INT 1
10896: ARRAY
10897: PUSH
10898: LD_INT 100
10900: PUSH
10901: LD_VAR 0 8
10905: PLUS
10906: EQUAL
10907: IFFALSE 10952
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_INT 2
10921: PPUSH
10922: LD_VAR 0 2
10926: PUSH
10927: LD_INT 2
10929: ARRAY
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 3
10938: PPUSH
10939: CALL_OW 1
10943: ST_TO_ADDR
// tmp := 1 ;
10944: LD_ADDR_VAR 0 3
10948: PUSH
10949: LD_STRING 1
10951: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10952: LD_ADDR_VAR 0 6
10956: PUSH
10957: LD_VAR 0 6
10961: PUSH
10962: LD_VAR 0 3
10966: STR
10967: ST_TO_ADDR
// end ;
10968: GO 10864
10970: POP
10971: POP
// if isGameLoad then
10972: LD_VAR 0 1
10976: IFFALSE 11451
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10978: LD_ADDR_VAR 0 4
10982: PUSH
10983: LD_EXP 30
10987: PUSH
10988: LD_EXP 29
10992: PUSH
10993: LD_EXP 31
10997: PUSH
10998: LD_EXP 28
11002: PUSH
11003: LD_EXP 32
11007: PUSH
11008: LD_EXP 33
11012: PUSH
11013: LD_EXP 34
11017: PUSH
11018: LD_EXP 35
11022: PUSH
11023: LD_EXP 36
11027: PUSH
11028: LD_EXP 37
11032: PUSH
11033: LD_EXP 38
11037: PUSH
11038: LD_EXP 39
11042: PUSH
11043: LD_EXP 40
11047: PUSH
11048: LD_EXP 41
11052: PUSH
11053: LD_EXP 49
11057: PUSH
11058: LD_EXP 50
11062: PUSH
11063: LD_EXP 51
11067: PUSH
11068: LD_EXP 52
11072: PUSH
11073: LD_EXP 54
11077: PUSH
11078: LD_EXP 55
11082: PUSH
11083: LD_EXP 56
11087: PUSH
11088: LD_EXP 59
11092: PUSH
11093: LD_EXP 61
11097: PUSH
11098: LD_EXP 62
11102: PUSH
11103: LD_EXP 63
11107: PUSH
11108: LD_EXP 65
11112: PUSH
11113: LD_EXP 66
11117: PUSH
11118: LD_EXP 69
11122: PUSH
11123: LD_EXP 70
11127: PUSH
11128: LD_EXP 71
11132: PUSH
11133: LD_EXP 72
11137: PUSH
11138: LD_EXP 73
11142: PUSH
11143: LD_EXP 74
11147: PUSH
11148: LD_EXP 75
11152: PUSH
11153: LD_EXP 76
11157: PUSH
11158: LD_EXP 77
11162: PUSH
11163: LD_EXP 42
11167: PUSH
11168: LD_EXP 43
11172: PUSH
11173: LD_EXP 46
11177: PUSH
11178: LD_EXP 47
11182: PUSH
11183: LD_EXP 48
11187: PUSH
11188: LD_EXP 44
11192: PUSH
11193: LD_EXP 45
11197: PUSH
11198: LD_EXP 53
11202: PUSH
11203: LD_EXP 57
11207: PUSH
11208: LD_EXP 58
11212: PUSH
11213: LD_EXP 60
11217: PUSH
11218: LD_EXP 64
11222: PUSH
11223: LD_EXP 67
11227: PUSH
11228: LD_EXP 68
11232: PUSH
11233: LD_EXP 78
11237: PUSH
11238: LD_EXP 79
11242: PUSH
11243: LD_EXP 80
11247: PUSH
11248: LD_EXP 81
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: ST_TO_ADDR
// tmp :=  ;
11309: LD_ADDR_VAR 0 3
11313: PUSH
11314: LD_STRING 
11316: ST_TO_ADDR
// for i = 1 to normalCounter do
11317: LD_ADDR_VAR 0 8
11321: PUSH
11322: DOUBLE
11323: LD_INT 1
11325: DEC
11326: ST_TO_ADDR
11327: LD_EXP 26
11331: PUSH
11332: FOR_TO
11333: IFFALSE 11369
// begin if flags [ i ] then
11335: LD_VAR 0 4
11339: PUSH
11340: LD_VAR 0 8
11344: ARRAY
11345: IFFALSE 11367
// tmp := tmp & i & ; ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_VAR 0 3
11356: PUSH
11357: LD_VAR 0 8
11361: STR
11362: PUSH
11363: LD_STRING ;
11365: STR
11366: ST_TO_ADDR
// end ;
11367: GO 11332
11369: POP
11370: POP
// for i = 1 to hardcoreCounter do
11371: LD_ADDR_VAR 0 8
11375: PUSH
11376: DOUBLE
11377: LD_INT 1
11379: DEC
11380: ST_TO_ADDR
11381: LD_EXP 27
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11433
// begin if flags [ normalCounter + i ] then
11389: LD_VAR 0 4
11393: PUSH
11394: LD_EXP 26
11398: PUSH
11399: LD_VAR 0 8
11403: PLUS
11404: ARRAY
11405: IFFALSE 11431
// tmp := tmp & ( 100 + i ) & ; ;
11407: LD_ADDR_VAR 0 3
11411: PUSH
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 100
11419: PUSH
11420: LD_VAR 0 8
11424: PLUS
11425: STR
11426: PUSH
11427: LD_STRING ;
11429: STR
11430: ST_TO_ADDR
// end ;
11431: GO 11386
11433: POP
11434: POP
// if tmp then
11435: LD_VAR 0 3
11439: IFFALSE 11451
// active := tmp ;
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_VAR 0 3
11450: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11451: LD_STRING getStreamItemsFromMission("
11453: PUSH
11454: LD_VAR 0 5
11458: STR
11459: PUSH
11460: LD_STRING ","
11462: STR
11463: PUSH
11464: LD_VAR 0 6
11468: STR
11469: PUSH
11470: LD_STRING ","
11472: STR
11473: PUSH
11474: LD_VAR 0 7
11478: STR
11479: PUSH
11480: LD_STRING ")
11482: STR
11483: PPUSH
11484: CALL_OW 559
// end else
11488: GO 11497
// ToLua ( getStreamItemsFromMission("","","") ) ;
11490: LD_STRING getStreamItemsFromMission("","","")
11492: PPUSH
11493: CALL_OW 559
// end ;
11497: LD_VAR 0 2
11501: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11502: LD_EXP 25
11506: PUSH
11507: LD_EXP 30
11511: AND
11512: IFFALSE 11636
11514: GO 11516
11516: DISABLE
11517: LD_INT 0
11519: PPUSH
11520: PPUSH
// begin enable ;
11521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 22
11529: PUSH
11530: LD_OWVAR 2
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: LD_INT 34
11544: PUSH
11545: LD_INT 7
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 34
11554: PUSH
11555: LD_INT 45
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 34
11564: PUSH
11565: LD_INT 28
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 47
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: ST_TO_ADDR
// if not tmp then
11598: LD_VAR 0 2
11602: NOT
11603: IFFALSE 11607
// exit ;
11605: GO 11636
// for i in tmp do
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_VAR 0 2
11616: PUSH
11617: FOR_IN
11618: IFFALSE 11634
// begin SetLives ( i , 0 ) ;
11620: LD_VAR 0 1
11624: PPUSH
11625: LD_INT 0
11627: PPUSH
11628: CALL_OW 234
// end ;
11632: GO 11617
11634: POP
11635: POP
// end ;
11636: PPOPN 2
11638: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11639: LD_EXP 25
11643: PUSH
11644: LD_EXP 31
11648: AND
11649: IFFALSE 11733
11651: GO 11653
11653: DISABLE
11654: LD_INT 0
11656: PPUSH
11657: PPUSH
// begin enable ;
11658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11659: LD_ADDR_VAR 0 2
11663: PUSH
11664: LD_INT 22
11666: PUSH
11667: LD_OWVAR 2
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 32
11678: PUSH
11679: LD_INT 3
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: ST_TO_ADDR
// if not tmp then
11695: LD_VAR 0 2
11699: NOT
11700: IFFALSE 11704
// exit ;
11702: GO 11733
// for i in tmp do
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_VAR 0 2
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11731
// begin SetLives ( i , 0 ) ;
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_INT 0
11724: PPUSH
11725: CALL_OW 234
// end ;
11729: GO 11714
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11736: LD_EXP 25
11740: PUSH
11741: LD_EXP 28
11745: AND
11746: IFFALSE 11839
11748: GO 11750
11750: DISABLE
11751: LD_INT 0
11753: PPUSH
// begin enable ;
11754: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 5
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 25
11787: PUSH
11788: LD_INT 9
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 25
11797: PUSH
11798: LD_INT 8
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: PUSH
11820: FOR_IN
11821: IFFALSE 11837
// begin SetClass ( i , 1 ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 336
// end ;
11835: GO 11820
11837: POP
11838: POP
// end ;
11839: PPOPN 1
11841: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11842: LD_EXP 25
11846: PUSH
11847: LD_EXP 29
11851: AND
11852: PUSH
11853: LD_OWVAR 65
11857: PUSH
11858: LD_INT 7
11860: LESS
11861: AND
11862: IFFALSE 11876
11864: GO 11866
11866: DISABLE
// begin enable ;
11867: ENABLE
// game_speed := 7 ;
11868: LD_ADDR_OWVAR 65
11872: PUSH
11873: LD_INT 7
11875: ST_TO_ADDR
// end ;
11876: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11877: LD_EXP 25
11881: PUSH
11882: LD_EXP 32
11886: AND
11887: IFFALSE 12089
11889: GO 11891
11891: DISABLE
11892: LD_INT 0
11894: PPUSH
11895: PPUSH
11896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11897: LD_ADDR_VAR 0 3
11901: PUSH
11902: LD_INT 81
11904: PUSH
11905: LD_OWVAR 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 1
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 69
11932: ST_TO_ADDR
// if not tmp then
11933: LD_VAR 0 3
11937: NOT
11938: IFFALSE 11942
// exit ;
11940: GO 12089
// if tmp > 5 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 5
11949: GREATER
11950: IFFALSE 11962
// k := 5 else
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: LD_INT 5
11959: ST_TO_ADDR
11960: GO 11972
// k := tmp ;
11962: LD_ADDR_VAR 0 2
11966: PUSH
11967: LD_VAR 0 3
11971: ST_TO_ADDR
// for i := 1 to k do
11972: LD_ADDR_VAR 0 1
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_VAR 0 2
11986: PUSH
11987: FOR_TO
11988: IFFALSE 12087
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_VAR 0 1
11999: ARRAY
12000: PPUSH
12001: LD_VAR 0 1
12005: PUSH
12006: LD_INT 4
12008: MOD
12009: PUSH
12010: LD_INT 1
12012: PLUS
12013: PPUSH
12014: CALL_OW 259
12018: PUSH
12019: LD_INT 10
12021: LESS
12022: IFFALSE 12085
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12024: LD_VAR 0 3
12028: PUSH
12029: LD_VAR 0 1
12033: ARRAY
12034: PPUSH
12035: LD_VAR 0 1
12039: PUSH
12040: LD_INT 4
12042: MOD
12043: PUSH
12044: LD_INT 1
12046: PLUS
12047: PPUSH
12048: LD_VAR 0 3
12052: PUSH
12053: LD_VAR 0 1
12057: ARRAY
12058: PPUSH
12059: LD_VAR 0 1
12063: PUSH
12064: LD_INT 4
12066: MOD
12067: PUSH
12068: LD_INT 1
12070: PLUS
12071: PPUSH
12072: CALL_OW 259
12076: PUSH
12077: LD_INT 1
12079: PLUS
12080: PPUSH
12081: CALL_OW 237
12085: GO 11987
12087: POP
12088: POP
// end ;
12089: PPOPN 3
12091: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12092: LD_EXP 25
12096: PUSH
12097: LD_EXP 33
12101: AND
12102: IFFALSE 12122
12104: GO 12106
12106: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12107: LD_INT 4
12109: PPUSH
12110: LD_OWVAR 2
12114: PPUSH
12115: LD_INT 0
12117: PPUSH
12118: CALL_OW 324
12122: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12123: LD_EXP 25
12127: PUSH
12128: LD_EXP 62
12132: AND
12133: IFFALSE 12153
12135: GO 12137
12137: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12138: LD_INT 19
12140: PPUSH
12141: LD_OWVAR 2
12145: PPUSH
12146: LD_INT 0
12148: PPUSH
12149: CALL_OW 324
12153: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12154: LD_EXP 25
12158: PUSH
12159: LD_EXP 34
12163: AND
12164: IFFALSE 12266
12166: GO 12168
12168: DISABLE
12169: LD_INT 0
12171: PPUSH
12172: PPUSH
// begin enable ;
12173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12174: LD_ADDR_VAR 0 2
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_OWVAR 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 34
12196: PUSH
12197: LD_INT 11
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 34
12206: PUSH
12207: LD_INT 30
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 69
12227: ST_TO_ADDR
// if not tmp then
12228: LD_VAR 0 2
12232: NOT
12233: IFFALSE 12237
// exit ;
12235: GO 12266
// for i in tmp do
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_VAR 0 2
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12264
// begin SetLives ( i , 0 ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_INT 0
12257: PPUSH
12258: CALL_OW 234
// end ;
12262: GO 12247
12264: POP
12265: POP
// end ;
12266: PPOPN 2
12268: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12269: LD_EXP 25
12273: PUSH
12274: LD_EXP 35
12278: AND
12279: IFFALSE 12299
12281: GO 12283
12283: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12284: LD_INT 32
12286: PPUSH
12287: LD_OWVAR 2
12291: PPUSH
12292: LD_INT 0
12294: PPUSH
12295: CALL_OW 324
12299: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12300: LD_EXP 25
12304: PUSH
12305: LD_EXP 36
12309: AND
12310: IFFALSE 12491
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
12319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: LD_OWVAR 2
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 33
12339: PUSH
12340: LD_INT 3
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: ST_TO_ADDR
// if not tmp then
12356: LD_VAR 0 2
12360: NOT
12361: IFFALSE 12365
// exit ;
12363: GO 12491
// side := 0 ;
12365: LD_ADDR_VAR 0 3
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// for i := 1 to 8 do
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: DOUBLE
12379: LD_INT 1
12381: DEC
12382: ST_TO_ADDR
12383: LD_INT 8
12385: PUSH
12386: FOR_TO
12387: IFFALSE 12435
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12389: LD_OWVAR 2
12393: PUSH
12394: LD_VAR 0 1
12398: NONEQUAL
12399: PUSH
12400: LD_OWVAR 2
12404: PPUSH
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 81
12414: PUSH
12415: LD_INT 2
12417: EQUAL
12418: AND
12419: IFFALSE 12433
// begin side := i ;
12421: LD_ADDR_VAR 0 3
12425: PUSH
12426: LD_VAR 0 1
12430: ST_TO_ADDR
// break ;
12431: GO 12435
// end ;
12433: GO 12386
12435: POP
12436: POP
// if not side then
12437: LD_VAR 0 3
12441: NOT
12442: IFFALSE 12446
// exit ;
12444: GO 12491
// for i := 1 to tmp do
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: DOUBLE
12452: LD_INT 1
12454: DEC
12455: ST_TO_ADDR
12456: LD_VAR 0 2
12460: PUSH
12461: FOR_TO
12462: IFFALSE 12489
// if Prob ( 60 ) then
12464: LD_INT 60
12466: PPUSH
12467: CALL_OW 13
12471: IFFALSE 12487
// SetSide ( i , side ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: CALL_OW 235
12487: GO 12461
12489: POP
12490: POP
// end ;
12491: PPOPN 3
12493: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12494: LD_EXP 25
12498: PUSH
12499: LD_EXP 38
12503: AND
12504: IFFALSE 12623
12506: GO 12508
12508: DISABLE
12509: LD_INT 0
12511: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12512: LD_ADDR_VAR 0 1
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_OWVAR 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: LD_INT 23
12544: PUSH
12545: LD_INT 0
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: PPUSH
12561: CALL_OW 69
12565: PUSH
12566: FOR_IN
12567: IFFALSE 12621
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 257
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: IN
12597: IFFALSE 12619
// SetClass ( un , rand ( 1 , 4 ) ) ;
12599: LD_VAR 0 1
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: LD_INT 4
12609: PPUSH
12610: CALL_OW 12
12614: PPUSH
12615: CALL_OW 336
12619: GO 12566
12621: POP
12622: POP
// end ;
12623: PPOPN 1
12625: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12626: LD_EXP 25
12630: PUSH
12631: LD_EXP 37
12635: AND
12636: IFFALSE 12715
12638: GO 12640
12640: DISABLE
12641: LD_INT 0
12643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12644: LD_ADDR_VAR 0 1
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_OWVAR 2
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 3
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PPUSH
12675: CALL_OW 69
12679: ST_TO_ADDR
// if not tmp then
12680: LD_VAR 0 1
12684: NOT
12685: IFFALSE 12689
// exit ;
12687: GO 12715
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12689: LD_VAR 0 1
12693: PUSH
12694: LD_INT 1
12696: PPUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL_OW 12
12706: ARRAY
12707: PPUSH
12708: LD_INT 100
12710: PPUSH
12711: CALL_OW 234
// end ;
12715: PPOPN 1
12717: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12718: LD_EXP 25
12722: PUSH
12723: LD_EXP 39
12727: AND
12728: IFFALSE 12826
12730: GO 12732
12732: DISABLE
12733: LD_INT 0
12735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: LD_INT 22
12743: PUSH
12744: LD_OWVAR 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: ST_TO_ADDR
// if not tmp then
12772: LD_VAR 0 1
12776: NOT
12777: IFFALSE 12781
// exit ;
12779: GO 12826
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12781: LD_VAR 0 1
12785: PUSH
12786: LD_INT 1
12788: PPUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 12
12798: ARRAY
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: LD_INT 4
12805: PPUSH
12806: CALL_OW 12
12810: PPUSH
12811: LD_INT 3000
12813: PPUSH
12814: LD_INT 9000
12816: PPUSH
12817: CALL_OW 12
12821: PPUSH
12822: CALL_OW 492
// end ;
12826: PPOPN 1
12828: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12829: LD_EXP 25
12833: PUSH
12834: LD_EXP 40
12838: AND
12839: IFFALSE 12859
12841: GO 12843
12843: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12844: LD_INT 1
12846: PPUSH
12847: LD_OWVAR 2
12851: PPUSH
12852: LD_INT 0
12854: PPUSH
12855: CALL_OW 324
12859: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12860: LD_EXP 25
12864: PUSH
12865: LD_EXP 41
12869: AND
12870: IFFALSE 12953
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12879: LD_ADDR_VAR 0 2
12883: PUSH
12884: LD_INT 22
12886: PUSH
12887: LD_OWVAR 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 21
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: ST_TO_ADDR
// if not tmp then
12915: LD_VAR 0 2
12919: NOT
12920: IFFALSE 12924
// exit ;
12922: GO 12953
// for i in tmp do
12924: LD_ADDR_VAR 0 1
12928: PUSH
12929: LD_VAR 0 2
12933: PUSH
12934: FOR_IN
12935: IFFALSE 12951
// SetBLevel ( i , 10 ) ;
12937: LD_VAR 0 1
12941: PPUSH
12942: LD_INT 10
12944: PPUSH
12945: CALL_OW 241
12949: GO 12934
12951: POP
12952: POP
// end ;
12953: PPOPN 2
12955: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12956: LD_EXP 25
12960: PUSH
12961: LD_EXP 42
12965: AND
12966: IFFALSE 13077
12968: GO 12970
12970: DISABLE
12971: LD_INT 0
12973: PPUSH
12974: PPUSH
12975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12976: LD_ADDR_VAR 0 3
12980: PUSH
12981: LD_INT 22
12983: PUSH
12984: LD_OWVAR 2
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 1
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: ST_TO_ADDR
// if not tmp then
13012: LD_VAR 0 3
13016: NOT
13017: IFFALSE 13021
// exit ;
13019: GO 13077
// un := tmp [ rand ( 1 , tmp ) ] ;
13021: LD_ADDR_VAR 0 2
13025: PUSH
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: CALL_OW 12
13043: ARRAY
13044: ST_TO_ADDR
// if Crawls ( un ) then
13045: LD_VAR 0 2
13049: PPUSH
13050: CALL_OW 318
13054: IFFALSE 13065
// ComWalk ( un ) ;
13056: LD_VAR 0 2
13060: PPUSH
13061: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13065: LD_VAR 0 2
13069: PPUSH
13070: LD_INT 5
13072: PPUSH
13073: CALL_OW 336
// end ;
13077: PPOPN 3
13079: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13080: LD_EXP 25
13084: PUSH
13085: LD_EXP 43
13089: AND
13090: PUSH
13091: LD_OWVAR 67
13095: PUSH
13096: LD_INT 4
13098: LESS
13099: AND
13100: IFFALSE 13119
13102: GO 13104
13104: DISABLE
// begin Difficulty := Difficulty + 1 ;
13105: LD_ADDR_OWVAR 67
13109: PUSH
13110: LD_OWVAR 67
13114: PUSH
13115: LD_INT 1
13117: PLUS
13118: ST_TO_ADDR
// end ;
13119: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13120: LD_EXP 25
13124: PUSH
13125: LD_EXP 44
13129: AND
13130: IFFALSE 13233
13132: GO 13134
13134: DISABLE
13135: LD_INT 0
13137: PPUSH
// begin for i := 1 to 5 do
13138: LD_ADDR_VAR 0 1
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_INT 5
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13231
// begin uc_nation := nation_nature ;
13154: LD_ADDR_OWVAR 21
13158: PUSH
13159: LD_INT 0
13161: ST_TO_ADDR
// uc_side := 0 ;
13162: LD_ADDR_OWVAR 20
13166: PUSH
13167: LD_INT 0
13169: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13170: LD_ADDR_OWVAR 29
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: ST_TO_ADDR
// hc_agressivity := 20 ;
13185: LD_ADDR_OWVAR 35
13189: PUSH
13190: LD_INT 20
13192: ST_TO_ADDR
// hc_class := class_tiger ;
13193: LD_ADDR_OWVAR 28
13197: PUSH
13198: LD_INT 14
13200: ST_TO_ADDR
// hc_gallery :=  ;
13201: LD_ADDR_OWVAR 33
13205: PUSH
13206: LD_STRING 
13208: ST_TO_ADDR
// hc_name :=  ;
13209: LD_ADDR_OWVAR 26
13213: PUSH
13214: LD_STRING 
13216: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13217: CALL_OW 44
13221: PPUSH
13222: LD_INT 0
13224: PPUSH
13225: CALL_OW 51
// end ;
13229: GO 13151
13231: POP
13232: POP
// end ;
13233: PPOPN 1
13235: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13236: LD_EXP 25
13240: PUSH
13241: LD_EXP 45
13245: AND
13246: IFFALSE 13255
13248: GO 13250
13250: DISABLE
// StreamSibBomb ;
13251: CALL 13256 0 0
13255: END
// export function StreamSibBomb ; var i , x , y ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
// result := false ;
13262: LD_ADDR_VAR 0 1
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// for i := 1 to 16 do
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: DOUBLE
13276: LD_INT 1
13278: DEC
13279: ST_TO_ADDR
13280: LD_INT 16
13282: PUSH
13283: FOR_TO
13284: IFFALSE 13483
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13286: LD_ADDR_VAR 0 3
13290: PUSH
13291: LD_INT 10
13293: PUSH
13294: LD_INT 20
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 40
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 60
13308: PUSH
13309: LD_INT 70
13311: PUSH
13312: LD_INT 80
13314: PUSH
13315: LD_INT 90
13317: PUSH
13318: LD_INT 100
13320: PUSH
13321: LD_INT 110
13323: PUSH
13324: LD_INT 120
13326: PUSH
13327: LD_INT 130
13329: PUSH
13330: LD_INT 140
13332: PUSH
13333: LD_INT 150
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 1
13355: PPUSH
13356: LD_INT 15
13358: PPUSH
13359: CALL_OW 12
13363: ARRAY
13364: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13365: LD_ADDR_VAR 0 4
13369: PUSH
13370: LD_INT 10
13372: PUSH
13373: LD_INT 20
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 40
13381: PUSH
13382: LD_INT 50
13384: PUSH
13385: LD_INT 60
13387: PUSH
13388: LD_INT 70
13390: PUSH
13391: LD_INT 80
13393: PUSH
13394: LD_INT 90
13396: PUSH
13397: LD_INT 100
13399: PUSH
13400: LD_INT 110
13402: PUSH
13403: LD_INT 120
13405: PUSH
13406: LD_INT 130
13408: PUSH
13409: LD_INT 140
13411: PUSH
13412: LD_INT 150
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 1
13434: PPUSH
13435: LD_INT 15
13437: PPUSH
13438: CALL_OW 12
13442: ARRAY
13443: ST_TO_ADDR
// if ValidHex ( x , y ) then
13444: LD_VAR 0 3
13448: PPUSH
13449: LD_VAR 0 4
13453: PPUSH
13454: CALL_OW 488
13458: IFFALSE 13481
// begin result := [ x , y ] ;
13460: LD_ADDR_VAR 0 1
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: LD_VAR 0 4
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// break ;
13479: GO 13483
// end ; end ;
13481: GO 13283
13483: POP
13484: POP
// if result then
13485: LD_VAR 0 1
13489: IFFALSE 13549
// begin ToLua ( playSibBomb() ) ;
13491: LD_STRING playSibBomb()
13493: PPUSH
13494: CALL_OW 559
// wait ( 0 0$14 ) ;
13498: LD_INT 490
13500: PPUSH
13501: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_VAR 0 1
13518: PUSH
13519: LD_INT 2
13521: ARRAY
13522: PPUSH
13523: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13527: LD_VAR 0 1
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 1
13540: PUSH
13541: LD_INT 2
13543: ARRAY
13544: PPUSH
13545: CALL_OW 429
// end ; end ;
13549: LD_VAR 0 1
13553: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13554: LD_EXP 25
13558: PUSH
13559: LD_EXP 47
13563: AND
13564: IFFALSE 13576
13566: GO 13568
13568: DISABLE
// YouLost (  ) ;
13569: LD_STRING 
13571: PPUSH
13572: CALL_OW 104
13576: END
// every 0 0$1 trigger StreamModeActive and sFog do
13577: LD_EXP 25
13581: PUSH
13582: LD_EXP 46
13586: AND
13587: IFFALSE 13601
13589: GO 13591
13591: DISABLE
// FogOff ( your_side ) ;
13592: LD_OWVAR 2
13596: PPUSH
13597: CALL_OW 344
13601: END
// every 0 0$1 trigger StreamModeActive and sSun do
13602: LD_EXP 25
13606: PUSH
13607: LD_EXP 48
13611: AND
13612: IFFALSE 13640
13614: GO 13616
13616: DISABLE
// begin solar_recharge_percent := 0 ;
13617: LD_ADDR_OWVAR 79
13621: PUSH
13622: LD_INT 0
13624: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13625: LD_INT 10500
13627: PPUSH
13628: CALL_OW 67
// solar_recharge_percent := 100 ;
13632: LD_ADDR_OWVAR 79
13636: PUSH
13637: LD_INT 100
13639: ST_TO_ADDR
// end ;
13640: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13641: LD_EXP 25
13645: PUSH
13646: LD_EXP 49
13650: AND
13651: IFFALSE 13890
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
13660: PPUSH
// begin tmp := [ ] ;
13661: LD_ADDR_VAR 0 3
13665: PUSH
13666: EMPTY
13667: ST_TO_ADDR
// for i := 1 to 6 do
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: DOUBLE
13674: LD_INT 1
13676: DEC
13677: ST_TO_ADDR
13678: LD_INT 6
13680: PUSH
13681: FOR_TO
13682: IFFALSE 13787
// begin uc_nation := nation_nature ;
13684: LD_ADDR_OWVAR 21
13688: PUSH
13689: LD_INT 0
13691: ST_TO_ADDR
// uc_side := 0 ;
13692: LD_ADDR_OWVAR 20
13696: PUSH
13697: LD_INT 0
13699: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13700: LD_ADDR_OWVAR 29
13704: PUSH
13705: LD_INT 12
13707: PUSH
13708: LD_INT 12
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: ST_TO_ADDR
// hc_agressivity := 20 ;
13715: LD_ADDR_OWVAR 35
13719: PUSH
13720: LD_INT 20
13722: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13723: LD_ADDR_OWVAR 28
13727: PUSH
13728: LD_INT 17
13730: ST_TO_ADDR
// hc_gallery :=  ;
13731: LD_ADDR_OWVAR 33
13735: PUSH
13736: LD_STRING 
13738: ST_TO_ADDR
// hc_name :=  ;
13739: LD_ADDR_OWVAR 26
13743: PUSH
13744: LD_STRING 
13746: ST_TO_ADDR
// un := CreateHuman ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: CALL_OW 44
13756: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13757: LD_VAR 0 2
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 51
// tmp := tmp ^ un ;
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_VAR 0 3
13778: PUSH
13779: LD_VAR 0 2
13783: ADD
13784: ST_TO_ADDR
// end ;
13785: GO 13681
13787: POP
13788: POP
// repeat wait ( 0 0$1 ) ;
13789: LD_INT 35
13791: PPUSH
13792: CALL_OW 67
// for un in tmp do
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_VAR 0 3
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13881
// begin if IsDead ( un ) then
13809: LD_VAR 0 2
13813: PPUSH
13814: CALL_OW 301
13818: IFFALSE 13838
// begin tmp := tmp diff un ;
13820: LD_ADDR_VAR 0 3
13824: PUSH
13825: LD_VAR 0 3
13829: PUSH
13830: LD_VAR 0 2
13834: DIFF
13835: ST_TO_ADDR
// continue ;
13836: GO 13806
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_INT 3
13845: PUSH
13846: LD_INT 22
13848: PUSH
13849: LD_INT 0
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PPUSH
13860: CALL_OW 69
13864: PPUSH
13865: LD_VAR 0 2
13869: PPUSH
13870: CALL_OW 74
13874: PPUSH
13875: CALL_OW 115
// end ;
13879: GO 13806
13881: POP
13882: POP
// until not tmp ;
13883: LD_VAR 0 3
13887: NOT
13888: IFFALSE 13789
// end ;
13890: PPOPN 3
13892: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13893: LD_EXP 25
13897: PUSH
13898: LD_EXP 50
13902: AND
13903: IFFALSE 13957
13905: GO 13907
13907: DISABLE
// begin ToLua ( displayTroll(); ) ;
13908: LD_STRING displayTroll();
13910: PPUSH
13911: CALL_OW 559
// wait ( 3 3$00 ) ;
13915: LD_INT 6300
13917: PPUSH
13918: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13922: LD_STRING hideTroll();
13924: PPUSH
13925: CALL_OW 559
// wait ( 1 1$00 ) ;
13929: LD_INT 2100
13931: PPUSH
13932: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13936: LD_STRING displayTroll();
13938: PPUSH
13939: CALL_OW 559
// wait ( 1 1$00 ) ;
13943: LD_INT 2100
13945: PPUSH
13946: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13950: LD_STRING hideTroll();
13952: PPUSH
13953: CALL_OW 559
// end ;
13957: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13958: LD_EXP 25
13962: PUSH
13963: LD_EXP 51
13967: AND
13968: IFFALSE 14031
13970: GO 13972
13972: DISABLE
13973: LD_INT 0
13975: PPUSH
// begin p := 0 ;
13976: LD_ADDR_VAR 0 1
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// repeat game_speed := 1 ;
13984: LD_ADDR_OWVAR 65
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13992: LD_INT 35
13994: PPUSH
13995: CALL_OW 67
// p := p + 1 ;
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_VAR 0 1
14008: PUSH
14009: LD_INT 1
14011: PLUS
14012: ST_TO_ADDR
// until p >= 60 ;
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 60
14020: GREATEREQUAL
14021: IFFALSE 13984
// game_speed := 4 ;
14023: LD_ADDR_OWVAR 65
14027: PUSH
14028: LD_INT 4
14030: ST_TO_ADDR
// end ;
14031: PPOPN 1
14033: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14034: LD_EXP 25
14038: PUSH
14039: LD_EXP 52
14043: AND
14044: IFFALSE 14190
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14053: LD_ADDR_VAR 0 1
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_OWVAR 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: LD_INT 30
14075: PUSH
14076: LD_INT 0
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 30
14085: PUSH
14086: LD_INT 1
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not depot then
14107: LD_VAR 0 1
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14190
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_VAR 0 1
14125: PUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_VAR 0 1
14133: PPUSH
14134: CALL_OW 12
14138: ARRAY
14139: PPUSH
14140: CALL_OW 274
14144: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14145: LD_VAR 0 2
14149: PPUSH
14150: LD_INT 1
14152: PPUSH
14153: LD_INT 0
14155: PPUSH
14156: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14160: LD_VAR 0 2
14164: PPUSH
14165: LD_INT 2
14167: PPUSH
14168: LD_INT 0
14170: PPUSH
14171: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14175: LD_VAR 0 2
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: LD_INT 0
14185: PPUSH
14186: CALL_OW 277
// end ;
14190: PPOPN 2
14192: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14193: LD_EXP 25
14197: PUSH
14198: LD_EXP 53
14202: AND
14203: IFFALSE 14300
14205: GO 14207
14207: DISABLE
14208: LD_INT 0
14210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14211: LD_ADDR_VAR 0 1
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_OWVAR 2
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 21
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 0
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: PPUSH
14260: CALL_OW 69
14264: ST_TO_ADDR
// if not tmp then
14265: LD_VAR 0 1
14269: NOT
14270: IFFALSE 14274
// exit ;
14272: GO 14300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14274: LD_VAR 0 1
14278: PUSH
14279: LD_INT 1
14281: PPUSH
14282: LD_VAR 0 1
14286: PPUSH
14287: CALL_OW 12
14291: ARRAY
14292: PPUSH
14293: LD_INT 200
14295: PPUSH
14296: CALL_OW 234
// end ;
14300: PPOPN 1
14302: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14303: LD_EXP 25
14307: PUSH
14308: LD_EXP 54
14312: AND
14313: IFFALSE 14392
14315: GO 14317
14317: DISABLE
14318: LD_INT 0
14320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_OWVAR 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// if not tmp then
14357: LD_VAR 0 1
14361: NOT
14362: IFFALSE 14366
// exit ;
14364: GO 14392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14366: LD_VAR 0 1
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: PPUSH
14385: LD_INT 60
14387: PPUSH
14388: CALL_OW 234
// end ;
14392: PPOPN 1
14394: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14395: LD_EXP 25
14399: PUSH
14400: LD_EXP 55
14404: AND
14405: IFFALSE 14504
14407: GO 14409
14409: DISABLE
14410: LD_INT 0
14412: PPUSH
14413: PPUSH
// begin enable ;
14414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14415: LD_ADDR_VAR 0 1
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_OWVAR 2
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 61
14434: PUSH
14435: EMPTY
14436: LIST
14437: PUSH
14438: LD_INT 33
14440: PUSH
14441: LD_INT 2
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PPUSH
14453: CALL_OW 69
14457: ST_TO_ADDR
// if not tmp then
14458: LD_VAR 0 1
14462: NOT
14463: IFFALSE 14467
// exit ;
14465: GO 14504
// for i in tmp do
14467: LD_ADDR_VAR 0 2
14471: PUSH
14472: LD_VAR 0 1
14476: PUSH
14477: FOR_IN
14478: IFFALSE 14502
// if IsControledBy ( i ) then
14480: LD_VAR 0 2
14484: PPUSH
14485: CALL_OW 312
14489: IFFALSE 14500
// ComUnlink ( i ) ;
14491: LD_VAR 0 2
14495: PPUSH
14496: CALL_OW 136
14500: GO 14477
14502: POP
14503: POP
// end ;
14504: PPOPN 2
14506: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14507: LD_EXP 25
14511: PUSH
14512: LD_EXP 56
14516: AND
14517: IFFALSE 14657
14519: GO 14521
14521: DISABLE
14522: LD_INT 0
14524: PPUSH
14525: PPUSH
// begin ToLua ( displayPowell(); ) ;
14526: LD_STRING displayPowell();
14528: PPUSH
14529: CALL_OW 559
// uc_side := 0 ;
14533: LD_ADDR_OWVAR 20
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// uc_nation := 2 ;
14541: LD_ADDR_OWVAR 21
14545: PUSH
14546: LD_INT 2
14548: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14549: LD_ADDR_OWVAR 37
14553: PUSH
14554: LD_INT 14
14556: ST_TO_ADDR
// vc_engine := engine_siberite ;
14557: LD_ADDR_OWVAR 39
14561: PUSH
14562: LD_INT 3
14564: ST_TO_ADDR
// vc_control := control_apeman ;
14565: LD_ADDR_OWVAR 38
14569: PUSH
14570: LD_INT 5
14572: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14573: LD_ADDR_OWVAR 40
14577: PUSH
14578: LD_INT 29
14580: ST_TO_ADDR
// un := CreateVehicle ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: CALL_OW 45
14590: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14603: LD_INT 35
14605: PPUSH
14606: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14610: LD_VAR 0 2
14614: PPUSH
14615: LD_INT 22
14617: PUSH
14618: LD_OWVAR 2
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PPUSH
14627: CALL_OW 69
14631: PPUSH
14632: LD_VAR 0 2
14636: PPUSH
14637: CALL_OW 74
14641: PPUSH
14642: CALL_OW 115
// until IsDead ( un ) ;
14646: LD_VAR 0 2
14650: PPUSH
14651: CALL_OW 301
14655: IFFALSE 14603
// end ;
14657: PPOPN 2
14659: END
// every 0 0$1 trigger StreamModeActive and sStu do
14660: LD_EXP 25
14664: PUSH
14665: LD_EXP 64
14669: AND
14670: IFFALSE 14686
14672: GO 14674
14674: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14675: LD_STRING displayStucuk();
14677: PPUSH
14678: CALL_OW 559
// ResetFog ;
14682: CALL_OW 335
// end ;
14686: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14687: LD_EXP 25
14691: PUSH
14692: LD_EXP 57
14696: AND
14697: IFFALSE 14838
14699: GO 14701
14701: DISABLE
14702: LD_INT 0
14704: PPUSH
14705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14706: LD_ADDR_VAR 0 2
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_OWVAR 2
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 21
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PPUSH
14737: CALL_OW 69
14741: ST_TO_ADDR
// if not tmp then
14742: LD_VAR 0 2
14746: NOT
14747: IFFALSE 14751
// exit ;
14749: GO 14838
// un := tmp [ rand ( 1 , tmp ) ] ;
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_VAR 0 2
14760: PUSH
14761: LD_INT 1
14763: PPUSH
14764: LD_VAR 0 2
14768: PPUSH
14769: CALL_OW 12
14773: ARRAY
14774: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14787: LD_VAR 0 1
14791: PPUSH
14792: LD_OWVAR 3
14796: PUSH
14797: LD_VAR 0 1
14801: DIFF
14802: PPUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 74
14812: PPUSH
14813: CALL_OW 115
// wait ( 0 0$20 ) ;
14817: LD_INT 700
14819: PPUSH
14820: CALL_OW 67
// SetSide ( un , your_side ) ;
14824: LD_VAR 0 1
14828: PPUSH
14829: LD_OWVAR 2
14833: PPUSH
14834: CALL_OW 235
// end ;
14838: PPOPN 2
14840: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14841: LD_EXP 25
14845: PUSH
14846: LD_EXP 58
14850: AND
14851: IFFALSE 14957
14853: GO 14855
14855: DISABLE
14856: LD_INT 0
14858: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14859: LD_ADDR_VAR 0 1
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_OWVAR 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 30
14881: PUSH
14882: LD_INT 0
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 30
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: ST_TO_ADDR
// if not depot then
14913: LD_VAR 0 1
14917: NOT
14918: IFFALSE 14922
// exit ;
14920: GO 14957
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14922: LD_VAR 0 1
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PPUSH
14931: CALL_OW 250
14935: PPUSH
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 1
14943: ARRAY
14944: PPUSH
14945: CALL_OW 251
14949: PPUSH
14950: LD_INT 70
14952: PPUSH
14953: CALL_OW 495
// end ;
14957: PPOPN 1
14959: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14960: LD_EXP 25
14964: PUSH
14965: LD_EXP 59
14969: AND
14970: IFFALSE 15181
14972: GO 14974
14974: DISABLE
14975: LD_INT 0
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14982: LD_ADDR_VAR 0 5
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 69
15017: ST_TO_ADDR
// if not tmp then
15018: LD_VAR 0 5
15022: NOT
15023: IFFALSE 15027
// exit ;
15025: GO 15181
// for i in tmp do
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_VAR 0 5
15036: PUSH
15037: FOR_IN
15038: IFFALSE 15179
// begin d := rand ( 0 , 5 ) ;
15040: LD_ADDR_VAR 0 4
15044: PUSH
15045: LD_INT 0
15047: PPUSH
15048: LD_INT 5
15050: PPUSH
15051: CALL_OW 12
15055: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15056: LD_ADDR_VAR 0 2
15060: PUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 250
15070: PPUSH
15071: LD_VAR 0 4
15075: PPUSH
15076: LD_INT 3
15078: PPUSH
15079: LD_INT 12
15081: PPUSH
15082: CALL_OW 12
15086: PPUSH
15087: CALL_OW 272
15091: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15092: LD_ADDR_VAR 0 3
15096: PUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 251
15106: PPUSH
15107: LD_VAR 0 4
15111: PPUSH
15112: LD_INT 3
15114: PPUSH
15115: LD_INT 12
15117: PPUSH
15118: CALL_OW 12
15122: PPUSH
15123: CALL_OW 273
15127: ST_TO_ADDR
// if ValidHex ( x , y ) then
15128: LD_VAR 0 2
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: CALL_OW 488
15142: IFFALSE 15177
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15144: LD_VAR 0 1
15148: PPUSH
15149: LD_VAR 0 2
15153: PPUSH
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 3
15161: PPUSH
15162: LD_INT 6
15164: PPUSH
15165: CALL_OW 12
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 483
// end ;
15177: GO 15037
15179: POP
15180: POP
// end ;
15181: PPOPN 5
15183: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15184: LD_EXP 25
15188: PUSH
15189: LD_EXP 60
15193: AND
15194: IFFALSE 15288
15196: GO 15198
15198: DISABLE
15199: LD_INT 0
15201: PPUSH
15202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15203: LD_ADDR_VAR 0 2
15207: PUSH
15208: LD_INT 22
15210: PUSH
15211: LD_OWVAR 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 32
15222: PUSH
15223: LD_INT 1
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 21
15232: PUSH
15233: LD_INT 2
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 69
15249: ST_TO_ADDR
// if not tmp then
15250: LD_VAR 0 2
15254: NOT
15255: IFFALSE 15259
// exit ;
15257: GO 15288
// for i in tmp do
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_VAR 0 2
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15286
// SetFuel ( i , 0 ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 240
15284: GO 15269
15286: POP
15287: POP
// end ;
15288: PPOPN 2
15290: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15291: LD_EXP 25
15295: PUSH
15296: LD_EXP 61
15300: AND
15301: IFFALSE 15367
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 29
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 69
15344: ST_TO_ADDR
// if not tmp then
15345: LD_VAR 0 1
15349: NOT
15350: IFFALSE 15354
// exit ;
15352: GO 15367
// DestroyUnit ( tmp [ 1 ] ) ;
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 1
15361: ARRAY
15362: PPUSH
15363: CALL_OW 65
// end ;
15367: PPOPN 1
15369: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15370: LD_EXP 25
15374: PUSH
15375: LD_EXP 63
15379: AND
15380: IFFALSE 15509
15382: GO 15384
15384: DISABLE
15385: LD_INT 0
15387: PPUSH
// begin uc_side := 0 ;
15388: LD_ADDR_OWVAR 20
15392: PUSH
15393: LD_INT 0
15395: ST_TO_ADDR
// uc_nation := nation_arabian ;
15396: LD_ADDR_OWVAR 21
15400: PUSH
15401: LD_INT 2
15403: ST_TO_ADDR
// hc_gallery :=  ;
15404: LD_ADDR_OWVAR 33
15408: PUSH
15409: LD_STRING 
15411: ST_TO_ADDR
// hc_name :=  ;
15412: LD_ADDR_OWVAR 26
15416: PUSH
15417: LD_STRING 
15419: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 11
15425: PPUSH
15426: LD_INT 10
15428: PPUSH
15429: CALL_OW 380
// un := CreateHuman ;
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15443: LD_VAR 0 1
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15455: LD_INT 35
15457: PPUSH
15458: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15462: LD_VAR 0 1
15466: PPUSH
15467: LD_INT 22
15469: PUSH
15470: LD_OWVAR 2
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PPUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 74
15493: PPUSH
15494: CALL_OW 115
// until IsDead ( un ) ;
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 301
15507: IFFALSE 15455
// end ;
15509: PPOPN 1
15511: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15512: LD_EXP 25
15516: PUSH
15517: LD_EXP 65
15521: AND
15522: IFFALSE 15534
15524: GO 15526
15526: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15527: LD_STRING earthquake(getX(game), 0, 32)
15529: PPUSH
15530: CALL_OW 559
15534: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15535: LD_EXP 25
15539: PUSH
15540: LD_EXP 66
15544: AND
15545: IFFALSE 15636
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
// begin enable ;
15553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15554: LD_ADDR_VAR 0 1
15558: PUSH
15559: LD_INT 22
15561: PUSH
15562: LD_OWVAR 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 21
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 33
15583: PUSH
15584: LD_INT 3
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 69
15600: ST_TO_ADDR
// if not tmp then
15601: LD_VAR 0 1
15605: NOT
15606: IFFALSE 15610
// exit ;
15608: GO 15636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15610: LD_VAR 0 1
15614: PUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 12
15627: ARRAY
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 234
// end ;
15636: PPOPN 1
15638: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15639: LD_EXP 25
15643: PUSH
15644: LD_EXP 67
15648: AND
15649: IFFALSE 15790
15651: GO 15653
15653: DISABLE
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
15658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15659: LD_ADDR_VAR 0 3
15663: PUSH
15664: LD_INT 22
15666: PUSH
15667: LD_OWVAR 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 25
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: ST_TO_ADDR
// if not tmp then
15695: LD_VAR 0 3
15699: NOT
15700: IFFALSE 15704
// exit ;
15702: GO 15790
// un := tmp [ rand ( 1 , tmp ) ] ;
15704: LD_ADDR_VAR 0 2
15708: PUSH
15709: LD_VAR 0 3
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// if Crawls ( un ) then
15728: LD_VAR 0 2
15732: PPUSH
15733: CALL_OW 318
15737: IFFALSE 15748
// ComWalk ( un ) ;
15739: LD_VAR 0 2
15743: PPUSH
15744: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15748: LD_VAR 0 2
15752: PPUSH
15753: LD_INT 9
15755: PPUSH
15756: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15760: LD_INT 28
15762: PPUSH
15763: LD_OWVAR 2
15767: PPUSH
15768: LD_INT 2
15770: PPUSH
15771: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15775: LD_INT 29
15777: PPUSH
15778: LD_OWVAR 2
15782: PPUSH
15783: LD_INT 2
15785: PPUSH
15786: CALL_OW 322
// end ;
15790: PPOPN 3
15792: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15793: LD_EXP 25
15797: PUSH
15798: LD_EXP 68
15802: AND
15803: IFFALSE 15914
15805: GO 15807
15807: DISABLE
15808: LD_INT 0
15810: PPUSH
15811: PPUSH
15812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_INT 22
15820: PUSH
15821: LD_OWVAR 2
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: ST_TO_ADDR
// if not tmp then
15849: LD_VAR 0 3
15853: NOT
15854: IFFALSE 15858
// exit ;
15856: GO 15914
// un := tmp [ rand ( 1 , tmp ) ] ;
15858: LD_ADDR_VAR 0 2
15862: PUSH
15863: LD_VAR 0 3
15867: PUSH
15868: LD_INT 1
15870: PPUSH
15871: LD_VAR 0 3
15875: PPUSH
15876: CALL_OW 12
15880: ARRAY
15881: ST_TO_ADDR
// if Crawls ( un ) then
15882: LD_VAR 0 2
15886: PPUSH
15887: CALL_OW 318
15891: IFFALSE 15902
// ComWalk ( un ) ;
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15902: LD_VAR 0 2
15906: PPUSH
15907: LD_INT 8
15909: PPUSH
15910: CALL_OW 336
// end ;
15914: PPOPN 3
15916: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15917: LD_EXP 25
15921: PUSH
15922: LD_EXP 69
15926: AND
15927: IFFALSE 16071
15929: GO 15931
15931: DISABLE
15932: LD_INT 0
15934: PPUSH
15935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_INT 22
15943: PUSH
15944: LD_OWVAR 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 21
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 2
15965: PUSH
15966: LD_INT 34
15968: PUSH
15969: LD_INT 12
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 34
15978: PUSH
15979: LD_INT 51
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 34
15988: PUSH
15989: LD_INT 32
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: PPUSH
16007: CALL_OW 69
16011: ST_TO_ADDR
// if not tmp then
16012: LD_VAR 0 2
16016: NOT
16017: IFFALSE 16021
// exit ;
16019: GO 16071
// for i in tmp do
16021: LD_ADDR_VAR 0 1
16025: PUSH
16026: LD_VAR 0 2
16030: PUSH
16031: FOR_IN
16032: IFFALSE 16069
// if GetCargo ( i , mat_artifact ) = 0 then
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 4
16041: PPUSH
16042: CALL_OW 289
16046: PUSH
16047: LD_INT 0
16049: EQUAL
16050: IFFALSE 16067
// SetCargo ( i , mat_siberit , 100 ) ;
16052: LD_VAR 0 1
16056: PPUSH
16057: LD_INT 3
16059: PPUSH
16060: LD_INT 100
16062: PPUSH
16063: CALL_OW 290
16067: GO 16031
16069: POP
16070: POP
// end ;
16071: PPOPN 2
16073: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16074: LD_EXP 25
16078: PUSH
16079: LD_EXP 70
16083: AND
16084: IFFALSE 16267
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16093: LD_ADDR_VAR 0 2
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_OWVAR 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 2
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16267
// for i := 1 to 2 do
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: DOUBLE
16130: LD_INT 1
16132: DEC
16133: ST_TO_ADDR
16134: LD_INT 2
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16265
// begin uc_side := your_side ;
16140: LD_ADDR_OWVAR 20
16144: PUSH
16145: LD_OWVAR 2
16149: ST_TO_ADDR
// uc_nation := nation_american ;
16150: LD_ADDR_OWVAR 21
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// vc_chassis := us_morphling ;
16158: LD_ADDR_OWVAR 37
16162: PUSH
16163: LD_INT 5
16165: ST_TO_ADDR
// vc_engine := engine_siberite ;
16166: LD_ADDR_OWVAR 39
16170: PUSH
16171: LD_INT 3
16173: ST_TO_ADDR
// vc_control := control_computer ;
16174: LD_ADDR_OWVAR 38
16178: PUSH
16179: LD_INT 3
16181: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16182: LD_ADDR_OWVAR 40
16186: PUSH
16187: LD_INT 10
16189: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16190: LD_VAR 0 2
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: CALL_OW 310
16203: NOT
16204: IFFALSE 16251
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16206: CALL_OW 45
16210: PPUSH
16211: LD_VAR 0 2
16215: PUSH
16216: LD_INT 1
16218: ARRAY
16219: PPUSH
16220: CALL_OW 250
16224: PPUSH
16225: LD_VAR 0 2
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: CALL_OW 251
16238: PPUSH
16239: LD_INT 12
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: CALL_OW 50
16249: GO 16263
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16251: CALL_OW 45
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: CALL_OW 51
// end ;
16263: GO 16137
16265: POP
16266: POP
// end ;
16267: PPOPN 2
16269: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16270: LD_EXP 25
16274: PUSH
16275: LD_EXP 71
16279: AND
16280: IFFALSE 16502
16282: GO 16284
16284: DISABLE
16285: LD_INT 0
16287: PPUSH
16288: PPUSH
16289: PPUSH
16290: PPUSH
16291: PPUSH
16292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16293: LD_ADDR_VAR 0 6
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_OWVAR 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 3
16322: PUSH
16323: LD_INT 23
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: PPUSH
16342: CALL_OW 69
16346: ST_TO_ADDR
// if not tmp then
16347: LD_VAR 0 6
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 16502
// s1 := rand ( 1 , 4 ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_INT 4
16366: PPUSH
16367: CALL_OW 12
16371: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16372: LD_ADDR_VAR 0 4
16376: PUSH
16377: LD_VAR 0 6
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PPUSH
16386: LD_VAR 0 2
16390: PPUSH
16391: CALL_OW 259
16395: ST_TO_ADDR
// if s1 = 1 then
16396: LD_VAR 0 2
16400: PUSH
16401: LD_INT 1
16403: EQUAL
16404: IFFALSE 16424
// s2 := rand ( 2 , 4 ) else
16406: LD_ADDR_VAR 0 3
16410: PUSH
16411: LD_INT 2
16413: PPUSH
16414: LD_INT 4
16416: PPUSH
16417: CALL_OW 12
16421: ST_TO_ADDR
16422: GO 16432
// s2 := 1 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16432: LD_ADDR_VAR 0 5
16436: PUSH
16437: LD_VAR 0 6
16441: PUSH
16442: LD_INT 1
16444: ARRAY
16445: PPUSH
16446: LD_VAR 0 3
16450: PPUSH
16451: CALL_OW 259
16455: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16456: LD_VAR 0 6
16460: PUSH
16461: LD_INT 1
16463: ARRAY
16464: PPUSH
16465: LD_VAR 0 2
16469: PPUSH
16470: LD_VAR 0 5
16474: PPUSH
16475: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16479: LD_VAR 0 6
16483: PUSH
16484: LD_INT 1
16486: ARRAY
16487: PPUSH
16488: LD_VAR 0 3
16492: PPUSH
16493: LD_VAR 0 4
16497: PPUSH
16498: CALL_OW 237
// end ;
16502: PPOPN 6
16504: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16505: LD_EXP 25
16509: PUSH
16510: LD_EXP 72
16514: AND
16515: IFFALSE 16594
16517: GO 16519
16519: DISABLE
16520: LD_INT 0
16522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_OWVAR 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 30
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: ST_TO_ADDR
// if not tmp then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16568: LD_VAR 0 1
16572: PUSH
16573: LD_INT 1
16575: PPUSH
16576: LD_VAR 0 1
16580: PPUSH
16581: CALL_OW 12
16585: ARRAY
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 234
// end ;
16594: PPOPN 1
16596: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16597: LD_EXP 25
16601: PUSH
16602: LD_EXP 73
16606: AND
16607: IFFALSE 16719
16609: GO 16611
16611: DISABLE
16612: LD_INT 0
16614: PPUSH
16615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16616: LD_ADDR_VAR 0 2
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_OWVAR 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 2
16635: PUSH
16636: LD_INT 30
16638: PUSH
16639: LD_INT 27
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 26
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 30
16658: PUSH
16659: LD_INT 28
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: ST_TO_ADDR
// if not tmp then
16681: LD_VAR 0 2
16685: NOT
16686: IFFALSE 16690
// exit ;
16688: GO 16719
// for i in tmp do
16690: LD_ADDR_VAR 0 1
16694: PUSH
16695: LD_VAR 0 2
16699: PUSH
16700: FOR_IN
16701: IFFALSE 16717
// SetLives ( i , 1 ) ;
16703: LD_VAR 0 1
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 234
16715: GO 16700
16717: POP
16718: POP
// end ;
16719: PPOPN 2
16721: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16722: LD_EXP 25
16726: PUSH
16727: LD_EXP 74
16731: AND
16732: IFFALSE 17019
16734: GO 16736
16736: DISABLE
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
16741: PPUSH
// begin i := rand ( 1 , 7 ) ;
16742: LD_ADDR_VAR 0 1
16746: PUSH
16747: LD_INT 1
16749: PPUSH
16750: LD_INT 7
16752: PPUSH
16753: CALL_OW 12
16757: ST_TO_ADDR
// case i of 1 :
16758: LD_VAR 0 1
16762: PUSH
16763: LD_INT 1
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16781
16771: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16772: LD_STRING earthquake(getX(game), 0, 32)
16774: PPUSH
16775: CALL_OW 559
16779: GO 17019
16781: LD_INT 2
16783: DOUBLE
16784: EQUAL
16785: IFTRUE 16789
16787: GO 16803
16789: POP
// begin ToLua ( displayStucuk(); ) ;
16790: LD_STRING displayStucuk();
16792: PPUSH
16793: CALL_OW 559
// ResetFog ;
16797: CALL_OW 335
// end ; 3 :
16801: GO 17019
16803: LD_INT 3
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 16915
16811: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16812: LD_ADDR_VAR 0 2
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_OWVAR 2
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 25
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PPUSH
16843: CALL_OW 69
16847: ST_TO_ADDR
// if not tmp then
16848: LD_VAR 0 2
16852: NOT
16853: IFFALSE 16857
// exit ;
16855: GO 17019
// un := tmp [ rand ( 1 , tmp ) ] ;
16857: LD_ADDR_VAR 0 3
16861: PUSH
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 1
16869: PPUSH
16870: LD_VAR 0 2
16874: PPUSH
16875: CALL_OW 12
16879: ARRAY
16880: ST_TO_ADDR
// if Crawls ( un ) then
16881: LD_VAR 0 3
16885: PPUSH
16886: CALL_OW 318
16890: IFFALSE 16901
// ComWalk ( un ) ;
16892: LD_VAR 0 3
16896: PPUSH
16897: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_INT 8
16908: PPUSH
16909: CALL_OW 336
// end ; 4 :
16913: GO 17019
16915: LD_INT 4
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16997
16923: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16924: LD_ADDR_VAR 0 2
16928: PUSH
16929: LD_INT 22
16931: PUSH
16932: LD_OWVAR 2
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 29
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PPUSH
16955: CALL_OW 69
16959: ST_TO_ADDR
// if not tmp then
16960: LD_VAR 0 2
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 17019
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16969: LD_VAR 0 2
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PPUSH
16978: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16982: LD_VAR 0 2
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: CALL_OW 65
// end ; 5 .. 7 :
16995: GO 17019
16997: LD_INT 5
16999: DOUBLE
17000: GREATEREQUAL
17001: IFFALSE 17009
17003: LD_INT 7
17005: DOUBLE
17006: LESSEQUAL
17007: IFTRUE 17011
17009: GO 17018
17011: POP
// StreamSibBomb ; end ;
17012: CALL 13256 0 0
17016: GO 17019
17018: POP
// end ;
17019: PPOPN 3
17021: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17022: LD_EXP 25
17026: PUSH
17027: LD_EXP 75
17031: AND
17032: IFFALSE 17188
17034: GO 17036
17036: DISABLE
17037: LD_INT 0
17039: PPUSH
17040: PPUSH
17041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17042: LD_ADDR_VAR 0 2
17046: PUSH
17047: LD_INT 81
17049: PUSH
17050: LD_OWVAR 2
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 21
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: ST_TO_ADDR
// if not tmp then
17096: LD_VAR 0 2
17100: NOT
17101: IFFALSE 17105
// exit ;
17103: GO 17188
// p := 0 ;
17105: LD_ADDR_VAR 0 3
17109: PUSH
17110: LD_INT 0
17112: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17113: LD_INT 35
17115: PPUSH
17116: CALL_OW 67
// p := p + 1 ;
17120: LD_ADDR_VAR 0 3
17124: PUSH
17125: LD_VAR 0 3
17129: PUSH
17130: LD_INT 1
17132: PLUS
17133: ST_TO_ADDR
// for i in tmp do
17134: LD_ADDR_VAR 0 1
17138: PUSH
17139: LD_VAR 0 2
17143: PUSH
17144: FOR_IN
17145: IFFALSE 17176
// if GetLives ( i ) < 1000 then
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 256
17156: PUSH
17157: LD_INT 1000
17159: LESS
17160: IFFALSE 17174
// SetLives ( i , 1000 ) ;
17162: LD_VAR 0 1
17166: PPUSH
17167: LD_INT 1000
17169: PPUSH
17170: CALL_OW 234
17174: GO 17144
17176: POP
17177: POP
// until p > 20 ;
17178: LD_VAR 0 3
17182: PUSH
17183: LD_INT 20
17185: GREATER
17186: IFFALSE 17113
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger StreamModeActive and sTime do
17191: LD_EXP 25
17195: PUSH
17196: LD_EXP 76
17200: AND
17201: IFFALSE 17236
17203: GO 17205
17205: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17206: LD_INT 28
17208: PPUSH
17209: LD_OWVAR 2
17213: PPUSH
17214: LD_INT 2
17216: PPUSH
17217: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17221: LD_INT 30
17223: PPUSH
17224: LD_OWVAR 2
17228: PPUSH
17229: LD_INT 2
17231: PPUSH
17232: CALL_OW 322
// end ;
17236: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17237: LD_EXP 25
17241: PUSH
17242: LD_EXP 77
17246: AND
17247: IFFALSE 17368
17249: GO 17251
17251: DISABLE
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17256: LD_ADDR_VAR 0 2
17260: PUSH
17261: LD_INT 22
17263: PUSH
17264: LD_OWVAR 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 21
17275: PUSH
17276: LD_INT 1
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: LD_INT 23
17288: PUSH
17289: LD_INT 0
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: ST_TO_ADDR
// if not tmp then
17310: LD_VAR 0 2
17314: NOT
17315: IFFALSE 17319
// exit ;
17317: GO 17368
// for i in tmp do
17319: LD_ADDR_VAR 0 1
17323: PUSH
17324: LD_VAR 0 2
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17366
// begin if Crawls ( i ) then
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 318
17341: IFFALSE 17352
// ComWalk ( i ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 138
// SetClass ( i , 2 ) ;
17352: LD_VAR 0 1
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: CALL_OW 336
// end ;
17364: GO 17329
17366: POP
17367: POP
// end ;
17368: PPOPN 2
17370: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17371: LD_EXP 25
17375: PUSH
17376: LD_EXP 78
17380: AND
17381: IFFALSE 17669
17383: GO 17385
17385: DISABLE
17386: LD_INT 0
17388: PPUSH
17389: PPUSH
17390: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17391: LD_OWVAR 2
17395: PPUSH
17396: LD_INT 9
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_INT 1
17404: PPUSH
17405: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17409: LD_INT 9
17411: PPUSH
17412: LD_OWVAR 2
17416: PPUSH
17417: CALL_OW 343
// uc_side := 9 ;
17421: LD_ADDR_OWVAR 20
17425: PUSH
17426: LD_INT 9
17428: ST_TO_ADDR
// uc_nation := 2 ;
17429: LD_ADDR_OWVAR 21
17433: PUSH
17434: LD_INT 2
17436: ST_TO_ADDR
// hc_name := Dark Warrior ;
17437: LD_ADDR_OWVAR 26
17441: PUSH
17442: LD_STRING Dark Warrior
17444: ST_TO_ADDR
// hc_gallery :=  ;
17445: LD_ADDR_OWVAR 33
17449: PUSH
17450: LD_STRING 
17452: ST_TO_ADDR
// hc_noskilllimit := true ;
17453: LD_ADDR_OWVAR 76
17457: PUSH
17458: LD_INT 1
17460: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17461: LD_ADDR_OWVAR 31
17465: PUSH
17466: LD_INT 30
17468: PUSH
17469: LD_INT 30
17471: PUSH
17472: LD_INT 30
17474: PUSH
17475: LD_INT 30
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: ST_TO_ADDR
// un := CreateHuman ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: CALL_OW 44
17493: ST_TO_ADDR
// hc_noskilllimit := false ;
17494: LD_ADDR_OWVAR 76
17498: PUSH
17499: LD_INT 0
17501: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1
17509: PPUSH
17510: CALL_OW 51
// ToLua ( playRanger() ) ;
17514: LD_STRING playRanger()
17516: PPUSH
17517: CALL_OW 559
// p := 0 ;
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_INT 0
17528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17529: LD_INT 35
17531: PPUSH
17532: CALL_OW 67
// p := p + 1 ;
17536: LD_ADDR_VAR 0 2
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: LD_INT 1
17548: PLUS
17549: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17550: LD_VAR 0 3
17554: PPUSH
17555: CALL_OW 256
17559: PUSH
17560: LD_INT 1000
17562: LESS
17563: IFFALSE 17577
// SetLives ( un , 1000 ) ;
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1000
17572: PPUSH
17573: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_INT 81
17584: PUSH
17585: LD_OWVAR 2
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 91
17596: PUSH
17597: LD_VAR 0 3
17601: PUSH
17602: LD_INT 30
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 69
17618: PPUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: CALL_OW 74
17628: PPUSH
17629: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17633: LD_VAR 0 2
17637: PUSH
17638: LD_INT 80
17640: GREATER
17641: PUSH
17642: LD_VAR 0 3
17646: PPUSH
17647: CALL_OW 301
17651: OR
17652: IFFALSE 17529
// if un then
17654: LD_VAR 0 3
17658: IFFALSE 17669
// RemoveUnit ( un ) ;
17660: LD_VAR 0 3
17664: PPUSH
17665: CALL_OW 64
// end ;
17669: PPOPN 3
17671: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17672: LD_EXP 79
17676: IFFALSE 17792
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17686: LD_ADDR_VAR 0 2
17690: PUSH
17691: LD_INT 81
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 69
17721: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17722: LD_STRING playComputer()
17724: PPUSH
17725: CALL_OW 559
// if not tmp then
17729: LD_VAR 0 2
17733: NOT
17734: IFFALSE 17738
// exit ;
17736: GO 17792
// for i in tmp do
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: FOR_IN
17749: IFFALSE 17790
// for j := 1 to 4 do
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 4
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17786
// SetSkill ( i , j , 10 ) ;
17767: LD_VAR 0 1
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 10
17779: PPUSH
17780: CALL_OW 237
17784: GO 17764
17786: POP
17787: POP
17788: GO 17748
17790: POP
17791: POP
// end ;
17792: PPOPN 3
17794: END
// every 0 0$1 trigger s30 do var i , tmp ;
17795: LD_EXP 80
17799: IFFALSE 17868
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: ST_TO_ADDR
// if not tmp then
17830: LD_VAR 0 2
17834: NOT
17835: IFFALSE 17839
// exit ;
17837: GO 17868
// for i in tmp do
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: FOR_IN
17850: IFFALSE 17866
// SetLives ( i , 300 ) ;
17852: LD_VAR 0 1
17856: PPUSH
17857: LD_INT 300
17859: PPUSH
17860: CALL_OW 234
17864: GO 17849
17866: POP
17867: POP
// end ;
17868: PPOPN 2
17870: END
// every 0 0$1 trigger s60 do var i , tmp ;
17871: LD_EXP 81
17875: IFFALSE 17944
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17884: LD_ADDR_VAR 0 2
17888: PUSH
17889: LD_INT 22
17891: PUSH
17892: LD_OWVAR 2
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ST_TO_ADDR
// if not tmp then
17906: LD_VAR 0 2
17910: NOT
17911: IFFALSE 17915
// exit ;
17913: GO 17944
// for i in tmp do
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: FOR_IN
17926: IFFALSE 17942
// SetLives ( i , 600 ) ;
17928: LD_VAR 0 1
17932: PPUSH
17933: LD_INT 600
17935: PPUSH
17936: CALL_OW 234
17940: GO 17925
17942: POP
17943: POP
// end ;
17944: PPOPN 2
17946: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17947: LD_INT 0
17949: PPUSH
// case cmd of 301 :
17950: LD_VAR 0 1
17954: PUSH
17955: LD_INT 301
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17995
17963: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17964: LD_VAR 0 6
17968: PPUSH
17969: LD_VAR 0 7
17973: PPUSH
17974: LD_VAR 0 8
17978: PPUSH
17979: LD_VAR 0 4
17983: PPUSH
17984: LD_VAR 0 5
17988: PPUSH
17989: CALL 19204 0 5
17993: GO 18116
17995: LD_INT 302
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18040
18003: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18004: LD_VAR 0 6
18008: PPUSH
18009: LD_VAR 0 7
18013: PPUSH
18014: LD_VAR 0 8
18018: PPUSH
18019: LD_VAR 0 9
18023: PPUSH
18024: LD_VAR 0 4
18028: PPUSH
18029: LD_VAR 0 5
18033: PPUSH
18034: CALL 19295 0 6
18038: GO 18116
18040: LD_INT 303
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18085
18048: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18049: LD_VAR 0 6
18053: PPUSH
18054: LD_VAR 0 7
18058: PPUSH
18059: LD_VAR 0 8
18063: PPUSH
18064: LD_VAR 0 9
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_VAR 0 5
18078: PPUSH
18079: CALL 18121 0 6
18083: GO 18116
18085: LD_INT 304
18087: DOUBLE
18088: EQUAL
18089: IFTRUE 18093
18091: GO 18115
18093: POP
// hHackTeleport ( unit , x , y ) ; end ;
18094: LD_VAR 0 2
18098: PPUSH
18099: LD_VAR 0 4
18103: PPUSH
18104: LD_VAR 0 5
18108: PPUSH
18109: CALL 19888 0 3
18113: GO 18116
18115: POP
// end ;
18116: LD_VAR 0 12
18120: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18121: LD_INT 0
18123: PPUSH
18124: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18125: LD_VAR 0 1
18129: PUSH
18130: LD_INT 1
18132: LESS
18133: PUSH
18134: LD_VAR 0 1
18138: PUSH
18139: LD_INT 3
18141: GREATER
18142: OR
18143: PUSH
18144: LD_VAR 0 5
18148: PPUSH
18149: LD_VAR 0 6
18153: PPUSH
18154: CALL_OW 428
18158: OR
18159: IFFALSE 18163
// exit ;
18161: GO 18891
// uc_side := your_side ;
18163: LD_ADDR_OWVAR 20
18167: PUSH
18168: LD_OWVAR 2
18172: ST_TO_ADDR
// uc_nation := nation ;
18173: LD_ADDR_OWVAR 21
18177: PUSH
18178: LD_VAR 0 1
18182: ST_TO_ADDR
// bc_level = 1 ;
18183: LD_ADDR_OWVAR 43
18187: PUSH
18188: LD_INT 1
18190: ST_TO_ADDR
// case btype of 1 :
18191: LD_VAR 0 2
18195: PUSH
18196: LD_INT 1
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18215
18204: POP
// bc_type := b_depot ; 2 :
18205: LD_ADDR_OWVAR 42
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
18213: GO 18835
18215: LD_INT 2
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18234
18223: POP
// bc_type := b_warehouse ; 3 :
18224: LD_ADDR_OWVAR 42
18228: PUSH
18229: LD_INT 1
18231: ST_TO_ADDR
18232: GO 18835
18234: LD_INT 3
18236: DOUBLE
18237: EQUAL
18238: IFTRUE 18242
18240: GO 18253
18242: POP
// bc_type := b_lab ; 4 .. 9 :
18243: LD_ADDR_OWVAR 42
18247: PUSH
18248: LD_INT 6
18250: ST_TO_ADDR
18251: GO 18835
18253: LD_INT 4
18255: DOUBLE
18256: GREATEREQUAL
18257: IFFALSE 18265
18259: LD_INT 9
18261: DOUBLE
18262: LESSEQUAL
18263: IFTRUE 18267
18265: GO 18327
18267: POP
// begin bc_type := b_lab_half ;
18268: LD_ADDR_OWVAR 42
18272: PUSH
18273: LD_INT 7
18275: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18276: LD_ADDR_OWVAR 44
18280: PUSH
18281: LD_INT 10
18283: PUSH
18284: LD_INT 11
18286: PUSH
18287: LD_INT 12
18289: PUSH
18290: LD_INT 15
18292: PUSH
18293: LD_INT 14
18295: PUSH
18296: LD_INT 13
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: LD_VAR 0 2
18311: PUSH
18312: LD_INT 3
18314: MINUS
18315: ARRAY
18316: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18317: LD_ADDR_OWVAR 45
18321: PUSH
18322: LD_INT 9
18324: ST_TO_ADDR
// end ; 10 .. 13 :
18325: GO 18835
18327: LD_INT 10
18329: DOUBLE
18330: GREATEREQUAL
18331: IFFALSE 18339
18333: LD_INT 13
18335: DOUBLE
18336: LESSEQUAL
18337: IFTRUE 18341
18339: GO 18418
18341: POP
// begin bc_type := b_lab_full ;
18342: LD_ADDR_OWVAR 42
18346: PUSH
18347: LD_INT 8
18349: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18350: LD_ADDR_OWVAR 44
18354: PUSH
18355: LD_INT 10
18357: PUSH
18358: LD_INT 12
18360: PUSH
18361: LD_INT 14
18363: PUSH
18364: LD_INT 13
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: LD_VAR 0 2
18377: PUSH
18378: LD_INT 9
18380: MINUS
18381: ARRAY
18382: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18383: LD_ADDR_OWVAR 45
18387: PUSH
18388: LD_INT 11
18390: PUSH
18391: LD_INT 15
18393: PUSH
18394: LD_INT 12
18396: PUSH
18397: LD_INT 15
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: PUSH
18406: LD_VAR 0 2
18410: PUSH
18411: LD_INT 9
18413: MINUS
18414: ARRAY
18415: ST_TO_ADDR
// end ; 14 :
18416: GO 18835
18418: LD_INT 14
18420: DOUBLE
18421: EQUAL
18422: IFTRUE 18426
18424: GO 18437
18426: POP
// bc_type := b_workshop ; 15 :
18427: LD_ADDR_OWVAR 42
18431: PUSH
18432: LD_INT 2
18434: ST_TO_ADDR
18435: GO 18835
18437: LD_INT 15
18439: DOUBLE
18440: EQUAL
18441: IFTRUE 18445
18443: GO 18456
18445: POP
// bc_type := b_factory ; 16 :
18446: LD_ADDR_OWVAR 42
18450: PUSH
18451: LD_INT 3
18453: ST_TO_ADDR
18454: GO 18835
18456: LD_INT 16
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18475
18464: POP
// bc_type := b_ext_gun ; 17 :
18465: LD_ADDR_OWVAR 42
18469: PUSH
18470: LD_INT 17
18472: ST_TO_ADDR
18473: GO 18835
18475: LD_INT 17
18477: DOUBLE
18478: EQUAL
18479: IFTRUE 18483
18481: GO 18511
18483: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18484: LD_ADDR_OWVAR 42
18488: PUSH
18489: LD_INT 19
18491: PUSH
18492: LD_INT 23
18494: PUSH
18495: LD_INT 19
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PUSH
18503: LD_VAR 0 1
18507: ARRAY
18508: ST_TO_ADDR
18509: GO 18835
18511: LD_INT 18
18513: DOUBLE
18514: EQUAL
18515: IFTRUE 18519
18517: GO 18530
18519: POP
// bc_type := b_ext_radar ; 19 :
18520: LD_ADDR_OWVAR 42
18524: PUSH
18525: LD_INT 20
18527: ST_TO_ADDR
18528: GO 18835
18530: LD_INT 19
18532: DOUBLE
18533: EQUAL
18534: IFTRUE 18538
18536: GO 18549
18538: POP
// bc_type := b_ext_radio ; 20 :
18539: LD_ADDR_OWVAR 42
18543: PUSH
18544: LD_INT 22
18546: ST_TO_ADDR
18547: GO 18835
18549: LD_INT 20
18551: DOUBLE
18552: EQUAL
18553: IFTRUE 18557
18555: GO 18568
18557: POP
// bc_type := b_ext_siberium ; 21 :
18558: LD_ADDR_OWVAR 42
18562: PUSH
18563: LD_INT 21
18565: ST_TO_ADDR
18566: GO 18835
18568: LD_INT 21
18570: DOUBLE
18571: EQUAL
18572: IFTRUE 18576
18574: GO 18587
18576: POP
// bc_type := b_ext_computer ; 22 :
18577: LD_ADDR_OWVAR 42
18581: PUSH
18582: LD_INT 24
18584: ST_TO_ADDR
18585: GO 18835
18587: LD_INT 22
18589: DOUBLE
18590: EQUAL
18591: IFTRUE 18595
18593: GO 18606
18595: POP
// bc_type := b_ext_track ; 23 :
18596: LD_ADDR_OWVAR 42
18600: PUSH
18601: LD_INT 16
18603: ST_TO_ADDR
18604: GO 18835
18606: LD_INT 23
18608: DOUBLE
18609: EQUAL
18610: IFTRUE 18614
18612: GO 18625
18614: POP
// bc_type := b_ext_laser ; 24 :
18615: LD_ADDR_OWVAR 42
18619: PUSH
18620: LD_INT 25
18622: ST_TO_ADDR
18623: GO 18835
18625: LD_INT 24
18627: DOUBLE
18628: EQUAL
18629: IFTRUE 18633
18631: GO 18644
18633: POP
// bc_type := b_control_tower ; 25 :
18634: LD_ADDR_OWVAR 42
18638: PUSH
18639: LD_INT 36
18641: ST_TO_ADDR
18642: GO 18835
18644: LD_INT 25
18646: DOUBLE
18647: EQUAL
18648: IFTRUE 18652
18650: GO 18663
18652: POP
// bc_type := b_breastwork ; 26 :
18653: LD_ADDR_OWVAR 42
18657: PUSH
18658: LD_INT 31
18660: ST_TO_ADDR
18661: GO 18835
18663: LD_INT 26
18665: DOUBLE
18666: EQUAL
18667: IFTRUE 18671
18669: GO 18682
18671: POP
// bc_type := b_bunker ; 27 :
18672: LD_ADDR_OWVAR 42
18676: PUSH
18677: LD_INT 32
18679: ST_TO_ADDR
18680: GO 18835
18682: LD_INT 27
18684: DOUBLE
18685: EQUAL
18686: IFTRUE 18690
18688: GO 18701
18690: POP
// bc_type := b_turret ; 28 :
18691: LD_ADDR_OWVAR 42
18695: PUSH
18696: LD_INT 33
18698: ST_TO_ADDR
18699: GO 18835
18701: LD_INT 28
18703: DOUBLE
18704: EQUAL
18705: IFTRUE 18709
18707: GO 18720
18709: POP
// bc_type := b_armoury ; 29 :
18710: LD_ADDR_OWVAR 42
18714: PUSH
18715: LD_INT 4
18717: ST_TO_ADDR
18718: GO 18835
18720: LD_INT 29
18722: DOUBLE
18723: EQUAL
18724: IFTRUE 18728
18726: GO 18739
18728: POP
// bc_type := b_barracks ; 30 :
18729: LD_ADDR_OWVAR 42
18733: PUSH
18734: LD_INT 5
18736: ST_TO_ADDR
18737: GO 18835
18739: LD_INT 30
18741: DOUBLE
18742: EQUAL
18743: IFTRUE 18747
18745: GO 18758
18747: POP
// bc_type := b_solar_power ; 31 :
18748: LD_ADDR_OWVAR 42
18752: PUSH
18753: LD_INT 27
18755: ST_TO_ADDR
18756: GO 18835
18758: LD_INT 31
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18777
18766: POP
// bc_type := b_oil_power ; 32 :
18767: LD_ADDR_OWVAR 42
18771: PUSH
18772: LD_INT 26
18774: ST_TO_ADDR
18775: GO 18835
18777: LD_INT 32
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 18796
18785: POP
// bc_type := b_siberite_power ; 33 :
18786: LD_ADDR_OWVAR 42
18790: PUSH
18791: LD_INT 28
18793: ST_TO_ADDR
18794: GO 18835
18796: LD_INT 33
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18815
18804: POP
// bc_type := b_oil_mine ; 34 :
18805: LD_ADDR_OWVAR 42
18809: PUSH
18810: LD_INT 29
18812: ST_TO_ADDR
18813: GO 18835
18815: LD_INT 34
18817: DOUBLE
18818: EQUAL
18819: IFTRUE 18823
18821: GO 18834
18823: POP
// bc_type := b_siberite_mine ; end ;
18824: LD_ADDR_OWVAR 42
18828: PUSH
18829: LD_INT 30
18831: ST_TO_ADDR
18832: GO 18835
18834: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18835: LD_ADDR_VAR 0 8
18839: PUSH
18840: LD_VAR 0 5
18844: PPUSH
18845: LD_VAR 0 6
18849: PPUSH
18850: LD_VAR 0 3
18854: PPUSH
18855: CALL_OW 47
18859: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18860: LD_OWVAR 42
18864: PUSH
18865: LD_INT 32
18867: PUSH
18868: LD_INT 33
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: IN
18875: IFFALSE 18891
// PlaceWeaponTurret ( b , weapon ) ;
18877: LD_VAR 0 8
18881: PPUSH
18882: LD_VAR 0 4
18886: PPUSH
18887: CALL_OW 431
// end ;
18891: LD_VAR 0 7
18895: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18896: LD_INT 0
18898: PPUSH
18899: PPUSH
18900: PPUSH
18901: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18902: LD_ADDR_VAR 0 4
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_OWVAR 2
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: LD_INT 30
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PPUSH
18951: CALL_OW 69
18955: ST_TO_ADDR
// if not tmp then
18956: LD_VAR 0 4
18960: NOT
18961: IFFALSE 18965
// exit ;
18963: GO 19024
// for i in tmp do
18965: LD_ADDR_VAR 0 2
18969: PUSH
18970: LD_VAR 0 4
18974: PUSH
18975: FOR_IN
18976: IFFALSE 19022
// for j = 1 to 3 do
18978: LD_ADDR_VAR 0 3
18982: PUSH
18983: DOUBLE
18984: LD_INT 1
18986: DEC
18987: ST_TO_ADDR
18988: LD_INT 3
18990: PUSH
18991: FOR_TO
18992: IFFALSE 19018
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: CALL_OW 274
19003: PPUSH
19004: LD_VAR 0 3
19008: PPUSH
19009: LD_INT 99999
19011: PPUSH
19012: CALL_OW 277
19016: GO 18991
19018: POP
19019: POP
19020: GO 18975
19022: POP
19023: POP
// end ;
19024: LD_VAR 0 1
19028: RET
// export function hHackSetLevel10 ; var i , j ; begin
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
19033: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19034: LD_ADDR_VAR 0 2
19038: PUSH
19039: LD_INT 21
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PPUSH
19049: CALL_OW 69
19053: PUSH
19054: FOR_IN
19055: IFFALSE 19107
// if IsSelected ( i ) then
19057: LD_VAR 0 2
19061: PPUSH
19062: CALL_OW 306
19066: IFFALSE 19105
// begin for j := 1 to 4 do
19068: LD_ADDR_VAR 0 3
19072: PUSH
19073: DOUBLE
19074: LD_INT 1
19076: DEC
19077: ST_TO_ADDR
19078: LD_INT 4
19080: PUSH
19081: FOR_TO
19082: IFFALSE 19103
// SetSkill ( i , j , 10 ) ;
19084: LD_VAR 0 2
19088: PPUSH
19089: LD_VAR 0 3
19093: PPUSH
19094: LD_INT 10
19096: PPUSH
19097: CALL_OW 237
19101: GO 19081
19103: POP
19104: POP
// end ;
19105: GO 19054
19107: POP
19108: POP
// end ;
19109: LD_VAR 0 1
19113: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19114: LD_INT 0
19116: PPUSH
19117: PPUSH
19118: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19119: LD_ADDR_VAR 0 2
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_OWVAR 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 69
19154: PUSH
19155: FOR_IN
19156: IFFALSE 19197
// begin for j := 1 to 4 do
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: DOUBLE
19164: LD_INT 1
19166: DEC
19167: ST_TO_ADDR
19168: LD_INT 4
19170: PUSH
19171: FOR_TO
19172: IFFALSE 19193
// SetSkill ( i , j , 10 ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 10
19186: PPUSH
19187: CALL_OW 237
19191: GO 19171
19193: POP
19194: POP
// end ;
19195: GO 19155
19197: POP
19198: POP
// end ;
19199: LD_VAR 0 1
19203: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19204: LD_INT 0
19206: PPUSH
// uc_side := your_side ;
19207: LD_ADDR_OWVAR 20
19211: PUSH
19212: LD_OWVAR 2
19216: ST_TO_ADDR
// uc_nation := nation ;
19217: LD_ADDR_OWVAR 21
19221: PUSH
19222: LD_VAR 0 1
19226: ST_TO_ADDR
// InitHc ;
19227: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19231: LD_INT 0
19233: PPUSH
19234: LD_VAR 0 2
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19248: LD_VAR 0 4
19252: PPUSH
19253: LD_VAR 0 5
19257: PPUSH
19258: CALL_OW 428
19262: PUSH
19263: LD_INT 0
19265: EQUAL
19266: IFFALSE 19290
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19268: CALL_OW 44
19272: PPUSH
19273: LD_VAR 0 4
19277: PPUSH
19278: LD_VAR 0 5
19282: PPUSH
19283: LD_INT 1
19285: PPUSH
19286: CALL_OW 48
// end ;
19290: LD_VAR 0 6
19294: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19295: LD_INT 0
19297: PPUSH
19298: PPUSH
// uc_side := your_side ;
19299: LD_ADDR_OWVAR 20
19303: PUSH
19304: LD_OWVAR 2
19308: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19309: LD_VAR 0 1
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 3
19322: PUSH
19323: LD_INT 4
19325: PUSH
19326: LD_INT 5
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: IN
19336: IFFALSE 19348
// uc_nation := nation_american else
19338: LD_ADDR_OWVAR 21
19342: PUSH
19343: LD_INT 1
19345: ST_TO_ADDR
19346: GO 19391
// if chassis in [ 11 , 12 , 13 , 14 ] then
19348: LD_VAR 0 1
19352: PUSH
19353: LD_INT 11
19355: PUSH
19356: LD_INT 12
19358: PUSH
19359: LD_INT 13
19361: PUSH
19362: LD_INT 14
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: IN
19371: IFFALSE 19383
// uc_nation := nation_arabian else
19373: LD_ADDR_OWVAR 21
19377: PUSH
19378: LD_INT 2
19380: ST_TO_ADDR
19381: GO 19391
// uc_nation := nation_russian ;
19383: LD_ADDR_OWVAR 21
19387: PUSH
19388: LD_INT 3
19390: ST_TO_ADDR
// vc_chassis := chassis ;
19391: LD_ADDR_OWVAR 37
19395: PUSH
19396: LD_VAR 0 1
19400: ST_TO_ADDR
// vc_engine := engine ;
19401: LD_ADDR_OWVAR 39
19405: PUSH
19406: LD_VAR 0 2
19410: ST_TO_ADDR
// vc_control := control ;
19411: LD_ADDR_OWVAR 38
19415: PUSH
19416: LD_VAR 0 3
19420: ST_TO_ADDR
// vc_weapon := weapon ;
19421: LD_ADDR_OWVAR 40
19425: PUSH
19426: LD_VAR 0 4
19430: ST_TO_ADDR
// un := CreateVehicle ;
19431: LD_ADDR_VAR 0 8
19435: PUSH
19436: CALL_OW 45
19440: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19441: LD_VAR 0 8
19445: PPUSH
19446: LD_INT 0
19448: PPUSH
19449: LD_INT 5
19451: PPUSH
19452: CALL_OW 12
19456: PPUSH
19457: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19461: LD_VAR 0 8
19465: PPUSH
19466: LD_VAR 0 5
19470: PPUSH
19471: LD_VAR 0 6
19475: PPUSH
19476: LD_INT 1
19478: PPUSH
19479: CALL_OW 48
// end ;
19483: LD_VAR 0 7
19487: RET
// export hInvincible ; every 1 do
19488: GO 19490
19490: DISABLE
// hInvincible := [ ] ;
19491: LD_ADDR_EXP 82
19495: PUSH
19496: EMPTY
19497: ST_TO_ADDR
19498: END
// every 10 do var i ;
19499: GO 19501
19501: DISABLE
19502: LD_INT 0
19504: PPUSH
// begin enable ;
19505: ENABLE
// if not hInvincible then
19506: LD_EXP 82
19510: NOT
19511: IFFALSE 19515
// exit ;
19513: GO 19559
// for i in hInvincible do
19515: LD_ADDR_VAR 0 1
19519: PUSH
19520: LD_EXP 82
19524: PUSH
19525: FOR_IN
19526: IFFALSE 19557
// if GetLives ( i ) < 1000 then
19528: LD_VAR 0 1
19532: PPUSH
19533: CALL_OW 256
19537: PUSH
19538: LD_INT 1000
19540: LESS
19541: IFFALSE 19555
// SetLives ( i , 1000 ) ;
19543: LD_VAR 0 1
19547: PPUSH
19548: LD_INT 1000
19550: PPUSH
19551: CALL_OW 234
19555: GO 19525
19557: POP
19558: POP
// end ;
19559: PPOPN 1
19561: END
// export function hHackInvincible ; var i ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19566: LD_ADDR_VAR 0 2
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 21
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 69
19603: PUSH
19604: FOR_IN
19605: IFFALSE 19666
// if IsSelected ( i ) then
19607: LD_VAR 0 2
19611: PPUSH
19612: CALL_OW 306
19616: IFFALSE 19664
// begin if i in hInvincible then
19618: LD_VAR 0 2
19622: PUSH
19623: LD_EXP 82
19627: IN
19628: IFFALSE 19648
// hInvincible := hInvincible diff i else
19630: LD_ADDR_EXP 82
19634: PUSH
19635: LD_EXP 82
19639: PUSH
19640: LD_VAR 0 2
19644: DIFF
19645: ST_TO_ADDR
19646: GO 19664
// hInvincible := hInvincible union i ;
19648: LD_ADDR_EXP 82
19652: PUSH
19653: LD_EXP 82
19657: PUSH
19658: LD_VAR 0 2
19662: UNION
19663: ST_TO_ADDR
// end ;
19664: GO 19604
19666: POP
19667: POP
// end ;
19668: LD_VAR 0 1
19672: RET
// export function hHackInvisible ; var i , j ; begin
19673: LD_INT 0
19675: PPUSH
19676: PPUSH
19677: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 21
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PPUSH
19693: CALL_OW 69
19697: PUSH
19698: FOR_IN
19699: IFFALSE 19723
// if IsSelected ( i ) then
19701: LD_VAR 0 2
19705: PPUSH
19706: CALL_OW 306
19710: IFFALSE 19721
// ComForceInvisible ( i ) ;
19712: LD_VAR 0 2
19716: PPUSH
19717: CALL_OW 496
19721: GO 19698
19723: POP
19724: POP
// end ;
19725: LD_VAR 0 1
19729: RET
// export function hHackChangeYourSide ; begin
19730: LD_INT 0
19732: PPUSH
// if your_side = 8 then
19733: LD_OWVAR 2
19737: PUSH
19738: LD_INT 8
19740: EQUAL
19741: IFFALSE 19753
// your_side := 0 else
19743: LD_ADDR_OWVAR 2
19747: PUSH
19748: LD_INT 0
19750: ST_TO_ADDR
19751: GO 19767
// your_side := your_side + 1 ;
19753: LD_ADDR_OWVAR 2
19757: PUSH
19758: LD_OWVAR 2
19762: PUSH
19763: LD_INT 1
19765: PLUS
19766: ST_TO_ADDR
// end ;
19767: LD_VAR 0 1
19771: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
19776: PPUSH
// for i in all_units do
19777: LD_ADDR_VAR 0 2
19781: PUSH
19782: LD_OWVAR 3
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19866
// if IsSelected ( i ) then
19790: LD_VAR 0 2
19794: PPUSH
19795: CALL_OW 306
19799: IFFALSE 19864
// begin j := GetSide ( i ) ;
19801: LD_ADDR_VAR 0 3
19805: PUSH
19806: LD_VAR 0 2
19810: PPUSH
19811: CALL_OW 255
19815: ST_TO_ADDR
// if j = 8 then
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 8
19823: EQUAL
19824: IFFALSE 19836
// j := 0 else
19826: LD_ADDR_VAR 0 3
19830: PUSH
19831: LD_INT 0
19833: ST_TO_ADDR
19834: GO 19850
// j := j + 1 ;
19836: LD_ADDR_VAR 0 3
19840: PUSH
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 1
19848: PLUS
19849: ST_TO_ADDR
// SetSide ( i , j ) ;
19850: LD_VAR 0 2
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL_OW 235
// end ;
19864: GO 19787
19866: POP
19867: POP
// end ;
19868: LD_VAR 0 1
19872: RET
// export function hHackFog ; begin
19873: LD_INT 0
19875: PPUSH
// FogOff ( true ) ;
19876: LD_INT 1
19878: PPUSH
19879: CALL_OW 344
// end ;
19883: LD_VAR 0 1
19887: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19888: LD_INT 0
19890: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19891: LD_VAR 0 1
19895: PPUSH
19896: LD_VAR 0 2
19900: PPUSH
19901: LD_VAR 0 3
19905: PPUSH
19906: LD_INT 1
19908: PPUSH
19909: LD_INT 1
19911: PPUSH
19912: CALL_OW 483
// CenterOnXY ( x , y ) ;
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: CALL_OW 84
// end ;
19930: LD_VAR 0 4
19934: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19939: LD_VAR 0 1
19943: NOT
19944: PUSH
19945: LD_VAR 0 2
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: CALL_OW 488
19959: NOT
19960: OR
19961: PUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 266
19971: PUSH
19972: LD_INT 3
19974: NONEQUAL
19975: PUSH
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 247
19985: PUSH
19986: LD_INT 1
19988: EQUAL
19989: NOT
19990: AND
19991: OR
19992: IFFALSE 19996
// exit ;
19994: GO 20145
// if GetType ( factory ) = unit_human then
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 247
20005: PUSH
20006: LD_INT 1
20008: EQUAL
20009: IFFALSE 20026
// factory := IsInUnit ( factory ) ;
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 310
20025: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20026: LD_VAR 0 1
20030: PPUSH
20031: CALL_OW 266
20035: PUSH
20036: LD_INT 3
20038: NONEQUAL
20039: IFFALSE 20043
// exit ;
20041: GO 20145
// if HexInfo ( x , y ) = factory then
20043: LD_VAR 0 2
20047: PPUSH
20048: LD_VAR 0 3
20052: PPUSH
20053: CALL_OW 428
20057: PUSH
20058: LD_VAR 0 1
20062: EQUAL
20063: IFFALSE 20090
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20065: LD_ADDR_EXP 83
20069: PUSH
20070: LD_EXP 83
20074: PPUSH
20075: LD_VAR 0 1
20079: PPUSH
20080: LD_INT 0
20082: PPUSH
20083: CALL_OW 1
20087: ST_TO_ADDR
20088: GO 20141
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20090: LD_ADDR_EXP 83
20094: PUSH
20095: LD_EXP 83
20099: PPUSH
20100: LD_VAR 0 1
20104: PPUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 255
20114: PUSH
20115: LD_VAR 0 1
20119: PUSH
20120: LD_VAR 0 2
20124: PUSH
20125: LD_VAR 0 3
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 1
20140: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20141: CALL 20150 0 0
// end ;
20145: LD_VAR 0 4
20149: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20150: LD_INT 0
20152: PPUSH
20153: PPUSH
20154: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20155: LD_STRING resetFactoryWaypoint();
20157: PPUSH
20158: CALL_OW 559
// if factoryWaypoints then
20162: LD_EXP 83
20166: IFFALSE 20292
// begin list := PrepareArray ( factoryWaypoints ) ;
20168: LD_ADDR_VAR 0 3
20172: PUSH
20173: LD_EXP 83
20177: PPUSH
20178: CALL 66836 0 1
20182: ST_TO_ADDR
// for i := 1 to list do
20183: LD_ADDR_VAR 0 2
20187: PUSH
20188: DOUBLE
20189: LD_INT 1
20191: DEC
20192: ST_TO_ADDR
20193: LD_VAR 0 3
20197: PUSH
20198: FOR_TO
20199: IFFALSE 20290
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20201: LD_STRING setFactoryWaypointXY(
20203: PUSH
20204: LD_VAR 0 3
20208: PUSH
20209: LD_VAR 0 2
20213: ARRAY
20214: PUSH
20215: LD_INT 1
20217: ARRAY
20218: STR
20219: PUSH
20220: LD_STRING ,
20222: STR
20223: PUSH
20224: LD_VAR 0 3
20228: PUSH
20229: LD_VAR 0 2
20233: ARRAY
20234: PUSH
20235: LD_INT 2
20237: ARRAY
20238: STR
20239: PUSH
20240: LD_STRING ,
20242: STR
20243: PUSH
20244: LD_VAR 0 3
20248: PUSH
20249: LD_VAR 0 2
20253: ARRAY
20254: PUSH
20255: LD_INT 3
20257: ARRAY
20258: STR
20259: PUSH
20260: LD_STRING ,
20262: STR
20263: PUSH
20264: LD_VAR 0 3
20268: PUSH
20269: LD_VAR 0 2
20273: ARRAY
20274: PUSH
20275: LD_INT 4
20277: ARRAY
20278: STR
20279: PUSH
20280: LD_STRING )
20282: STR
20283: PPUSH
20284: CALL_OW 559
20288: GO 20198
20290: POP
20291: POP
// end ; end ;
20292: LD_VAR 0 1
20296: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20297: LD_INT 0
20299: PPUSH
// if HexInfo ( x , y ) = warehouse then
20300: LD_VAR 0 2
20304: PPUSH
20305: LD_VAR 0 3
20309: PPUSH
20310: CALL_OW 428
20314: PUSH
20315: LD_VAR 0 1
20319: EQUAL
20320: IFFALSE 20347
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20322: LD_ADDR_EXP 84
20326: PUSH
20327: LD_EXP 84
20331: PPUSH
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: CALL_OW 1
20344: ST_TO_ADDR
20345: GO 20398
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20347: LD_ADDR_EXP 84
20351: PUSH
20352: LD_EXP 84
20356: PPUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_VAR 0 1
20366: PPUSH
20367: CALL_OW 255
20371: PUSH
20372: LD_VAR 0 1
20376: PUSH
20377: LD_VAR 0 2
20381: PUSH
20382: LD_VAR 0 3
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: PPUSH
20393: CALL_OW 1
20397: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20398: CALL 20407 0 0
// end ;
20402: LD_VAR 0 4
20406: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20407: LD_INT 0
20409: PPUSH
20410: PPUSH
20411: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20412: LD_STRING resetWarehouseGatheringPoints();
20414: PPUSH
20415: CALL_OW 559
// if warehouseGatheringPoints then
20419: LD_EXP 84
20423: IFFALSE 20549
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20425: LD_ADDR_VAR 0 3
20429: PUSH
20430: LD_EXP 84
20434: PPUSH
20435: CALL 66836 0 1
20439: ST_TO_ADDR
// for i := 1 to list do
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: DOUBLE
20446: LD_INT 1
20448: DEC
20449: ST_TO_ADDR
20450: LD_VAR 0 3
20454: PUSH
20455: FOR_TO
20456: IFFALSE 20547
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20458: LD_STRING setWarehouseGatheringPointXY(
20460: PUSH
20461: LD_VAR 0 3
20465: PUSH
20466: LD_VAR 0 2
20470: ARRAY
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: STR
20476: PUSH
20477: LD_STRING ,
20479: STR
20480: PUSH
20481: LD_VAR 0 3
20485: PUSH
20486: LD_VAR 0 2
20490: ARRAY
20491: PUSH
20492: LD_INT 2
20494: ARRAY
20495: STR
20496: PUSH
20497: LD_STRING ,
20499: STR
20500: PUSH
20501: LD_VAR 0 3
20505: PUSH
20506: LD_VAR 0 2
20510: ARRAY
20511: PUSH
20512: LD_INT 3
20514: ARRAY
20515: STR
20516: PUSH
20517: LD_STRING ,
20519: STR
20520: PUSH
20521: LD_VAR 0 3
20525: PUSH
20526: LD_VAR 0 2
20530: ARRAY
20531: PUSH
20532: LD_INT 4
20534: ARRAY
20535: STR
20536: PUSH
20537: LD_STRING )
20539: STR
20540: PPUSH
20541: CALL_OW 559
20545: GO 20455
20547: POP
20548: POP
// end ; end ;
20549: LD_VAR 0 1
20553: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20554: LD_EXP 84
20558: IFFALSE 21243
20560: GO 20562
20562: DISABLE
20563: LD_INT 0
20565: PPUSH
20566: PPUSH
20567: PPUSH
20568: PPUSH
20569: PPUSH
20570: PPUSH
20571: PPUSH
20572: PPUSH
20573: PPUSH
// begin enable ;
20574: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20575: LD_ADDR_VAR 0 3
20579: PUSH
20580: LD_EXP 84
20584: PPUSH
20585: CALL 66836 0 1
20589: ST_TO_ADDR
// if not list then
20590: LD_VAR 0 3
20594: NOT
20595: IFFALSE 20599
// exit ;
20597: GO 21243
// for i := 1 to list do
20599: LD_ADDR_VAR 0 1
20603: PUSH
20604: DOUBLE
20605: LD_INT 1
20607: DEC
20608: ST_TO_ADDR
20609: LD_VAR 0 3
20613: PUSH
20614: FOR_TO
20615: IFFALSE 21241
// begin depot := list [ i ] [ 2 ] ;
20617: LD_ADDR_VAR 0 8
20621: PUSH
20622: LD_VAR 0 3
20626: PUSH
20627: LD_VAR 0 1
20631: ARRAY
20632: PUSH
20633: LD_INT 2
20635: ARRAY
20636: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20637: LD_ADDR_VAR 0 5
20641: PUSH
20642: LD_VAR 0 3
20646: PUSH
20647: LD_VAR 0 1
20651: ARRAY
20652: PUSH
20653: LD_INT 1
20655: ARRAY
20656: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20657: LD_VAR 0 8
20661: PPUSH
20662: CALL_OW 301
20666: PUSH
20667: LD_VAR 0 5
20671: PUSH
20672: LD_VAR 0 8
20676: PPUSH
20677: CALL_OW 255
20681: NONEQUAL
20682: OR
20683: IFFALSE 20712
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20685: LD_ADDR_EXP 84
20689: PUSH
20690: LD_EXP 84
20694: PPUSH
20695: LD_VAR 0 8
20699: PPUSH
20700: LD_INT 0
20702: PPUSH
20703: CALL_OW 1
20707: ST_TO_ADDR
// exit ;
20708: POP
20709: POP
20710: GO 21243
// end ; x := list [ i ] [ 3 ] ;
20712: LD_ADDR_VAR 0 6
20716: PUSH
20717: LD_VAR 0 3
20721: PUSH
20722: LD_VAR 0 1
20726: ARRAY
20727: PUSH
20728: LD_INT 3
20730: ARRAY
20731: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20732: LD_ADDR_VAR 0 7
20736: PUSH
20737: LD_VAR 0 3
20741: PUSH
20742: LD_VAR 0 1
20746: ARRAY
20747: PUSH
20748: LD_INT 4
20750: ARRAY
20751: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20752: LD_ADDR_VAR 0 9
20756: PUSH
20757: LD_VAR 0 6
20761: PPUSH
20762: LD_VAR 0 7
20766: PPUSH
20767: LD_INT 16
20769: PPUSH
20770: CALL 65424 0 3
20774: ST_TO_ADDR
// if not cratesNearbyPoint then
20775: LD_VAR 0 9
20779: NOT
20780: IFFALSE 20786
// exit ;
20782: POP
20783: POP
20784: GO 21243
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20786: LD_ADDR_VAR 0 4
20790: PUSH
20791: LD_INT 22
20793: PUSH
20794: LD_VAR 0 5
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: LD_INT 60
20808: PUSH
20809: EMPTY
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 91
20818: PUSH
20819: LD_VAR 0 8
20823: PUSH
20824: LD_INT 6
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 25
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 25
20847: PUSH
20848: LD_INT 16
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: PPUSH
20866: CALL_OW 69
20870: PUSH
20871: LD_VAR 0 8
20875: PPUSH
20876: CALL_OW 313
20880: PPUSH
20881: LD_INT 3
20883: PUSH
20884: LD_INT 60
20886: PUSH
20887: EMPTY
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: LD_INT 25
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 25
20909: PUSH
20910: LD_INT 16
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PPUSH
20926: CALL_OW 72
20930: UNION
20931: ST_TO_ADDR
// if tmp then
20932: LD_VAR 0 4
20936: IFFALSE 21016
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20938: LD_ADDR_VAR 0 4
20942: PUSH
20943: LD_VAR 0 4
20947: PPUSH
20948: LD_INT 3
20950: PPUSH
20951: CALL 63393 0 2
20955: ST_TO_ADDR
// for j in tmp do
20956: LD_ADDR_VAR 0 2
20960: PUSH
20961: LD_VAR 0 4
20965: PUSH
20966: FOR_IN
20967: IFFALSE 21010
// begin if IsInUnit ( j ) then
20969: LD_VAR 0 2
20973: PPUSH
20974: CALL_OW 310
20978: IFFALSE 20989
// ComExit ( j ) ;
20980: LD_VAR 0 2
20984: PPUSH
20985: CALL 63476 0 1
// AddComCollect ( j , x , y ) ;
20989: LD_VAR 0 2
20993: PPUSH
20994: LD_VAR 0 6
20998: PPUSH
20999: LD_VAR 0 7
21003: PPUSH
21004: CALL_OW 177
// end ;
21008: GO 20966
21010: POP
21011: POP
// exit ;
21012: POP
21013: POP
21014: GO 21243
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21016: LD_ADDR_VAR 0 4
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_VAR 0 5
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 91
21035: PUSH
21036: LD_VAR 0 8
21040: PUSH
21041: LD_INT 8
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 2
21051: PUSH
21052: LD_INT 34
21054: PUSH
21055: LD_INT 12
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 34
21064: PUSH
21065: LD_INT 51
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 34
21074: PUSH
21075: LD_INT 32
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 34
21084: PUSH
21085: LD_INT 89
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 69
21108: ST_TO_ADDR
// if tmp then
21109: LD_VAR 0 4
21113: IFFALSE 21239
// begin for j in tmp do
21115: LD_ADDR_VAR 0 2
21119: PUSH
21120: LD_VAR 0 4
21124: PUSH
21125: FOR_IN
21126: IFFALSE 21237
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21128: LD_VAR 0 2
21132: PPUSH
21133: CALL_OW 262
21137: PUSH
21138: LD_INT 3
21140: EQUAL
21141: PUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: CALL_OW 261
21151: PUSH
21152: LD_INT 20
21154: GREATER
21155: OR
21156: PUSH
21157: LD_VAR 0 2
21161: PPUSH
21162: CALL_OW 314
21166: NOT
21167: AND
21168: PUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: CALL_OW 263
21178: PUSH
21179: LD_INT 1
21181: NONEQUAL
21182: PUSH
21183: LD_VAR 0 2
21187: PPUSH
21188: CALL_OW 311
21192: OR
21193: AND
21194: IFFALSE 21235
// begin ComCollect ( j , x , y ) ;
21196: LD_VAR 0 2
21200: PPUSH
21201: LD_VAR 0 6
21205: PPUSH
21206: LD_VAR 0 7
21210: PPUSH
21211: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21215: LD_VAR 0 2
21219: PPUSH
21220: LD_VAR 0 8
21224: PPUSH
21225: CALL_OW 172
// exit ;
21229: POP
21230: POP
21231: POP
21232: POP
21233: GO 21243
// end ;
21235: GO 21125
21237: POP
21238: POP
// end ; end ;
21239: GO 20614
21241: POP
21242: POP
// end ; end_of_file
21243: PPOPN 9
21245: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21246: LD_INT 0
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 264
21261: PUSH
21262: LD_INT 91
21264: EQUAL
21265: IFFALSE 21337
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21267: LD_INT 68
21269: PPUSH
21270: LD_VAR 0 1
21274: PPUSH
21275: CALL_OW 255
21279: PPUSH
21280: CALL_OW 321
21284: PUSH
21285: LD_INT 2
21287: EQUAL
21288: IFFALSE 21300
// eff := 70 else
21290: LD_ADDR_VAR 0 4
21294: PUSH
21295: LD_INT 70
21297: ST_TO_ADDR
21298: GO 21308
// eff := 30 ;
21300: LD_ADDR_VAR 0 4
21304: PUSH
21305: LD_INT 30
21307: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21308: LD_VAR 0 1
21312: PPUSH
21313: CALL_OW 250
21317: PPUSH
21318: LD_VAR 0 1
21322: PPUSH
21323: CALL_OW 251
21327: PPUSH
21328: LD_VAR 0 4
21332: PPUSH
21333: CALL_OW 495
// end ; end ;
21337: LD_VAR 0 2
21341: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21342: LD_INT 0
21344: PPUSH
// end ;
21345: LD_VAR 0 4
21349: RET
// export function SOS_Command ( cmd ) ; begin
21350: LD_INT 0
21352: PPUSH
// end ;
21353: LD_VAR 0 2
21357: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21358: LD_INT 0
21360: PPUSH
// end ;
21361: LD_VAR 0 6
21365: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21366: LD_INT 0
21368: PPUSH
21369: PPUSH
// if not vehicle or not factory then
21370: LD_VAR 0 1
21374: NOT
21375: PUSH
21376: LD_VAR 0 2
21380: NOT
21381: OR
21382: IFFALSE 21386
// exit ;
21384: GO 21617
// if factoryWaypoints >= factory then
21386: LD_EXP 83
21390: PUSH
21391: LD_VAR 0 2
21395: GREATEREQUAL
21396: IFFALSE 21617
// if factoryWaypoints [ factory ] then
21398: LD_EXP 83
21402: PUSH
21403: LD_VAR 0 2
21407: ARRAY
21408: IFFALSE 21617
// begin if GetControl ( vehicle ) = control_manual then
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 263
21419: PUSH
21420: LD_INT 1
21422: EQUAL
21423: IFFALSE 21504
// begin driver := IsDrivenBy ( vehicle ) ;
21425: LD_ADDR_VAR 0 4
21429: PUSH
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 311
21439: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21440: LD_VAR 0 4
21444: PPUSH
21445: LD_EXP 83
21449: PUSH
21450: LD_VAR 0 2
21454: ARRAY
21455: PUSH
21456: LD_INT 3
21458: ARRAY
21459: PPUSH
21460: LD_EXP 83
21464: PUSH
21465: LD_VAR 0 2
21469: ARRAY
21470: PUSH
21471: LD_INT 4
21473: ARRAY
21474: PPUSH
21475: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21479: LD_VAR 0 4
21483: PPUSH
21484: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21488: LD_VAR 0 4
21492: PPUSH
21493: LD_VAR 0 2
21497: PPUSH
21498: CALL_OW 180
// end else
21502: GO 21617
// if GetControl ( vehicle ) = control_remote then
21504: LD_VAR 0 1
21508: PPUSH
21509: CALL_OW 263
21513: PUSH
21514: LD_INT 2
21516: EQUAL
21517: IFFALSE 21578
// begin wait ( 0 0$2 ) ;
21519: LD_INT 70
21521: PPUSH
21522: CALL_OW 67
// if Connect ( vehicle ) then
21526: LD_VAR 0 1
21530: PPUSH
21531: CALL 33697 0 1
21535: IFFALSE 21576
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21537: LD_VAR 0 1
21541: PPUSH
21542: LD_EXP 83
21546: PUSH
21547: LD_VAR 0 2
21551: ARRAY
21552: PUSH
21553: LD_INT 3
21555: ARRAY
21556: PPUSH
21557: LD_EXP 83
21561: PUSH
21562: LD_VAR 0 2
21566: ARRAY
21567: PUSH
21568: LD_INT 4
21570: ARRAY
21571: PPUSH
21572: CALL_OW 171
// end else
21576: GO 21617
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_EXP 83
21587: PUSH
21588: LD_VAR 0 2
21592: ARRAY
21593: PUSH
21594: LD_INT 3
21596: ARRAY
21597: PPUSH
21598: LD_EXP 83
21602: PUSH
21603: LD_VAR 0 2
21607: ARRAY
21608: PUSH
21609: LD_INT 4
21611: ARRAY
21612: PPUSH
21613: CALL_OW 171
// end ; end ;
21617: LD_VAR 0 3
21621: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21622: LD_INT 0
21624: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21625: LD_VAR 0 1
21629: PUSH
21630: LD_INT 250
21632: EQUAL
21633: PUSH
21634: LD_VAR 0 2
21638: PPUSH
21639: CALL_OW 264
21643: PUSH
21644: LD_INT 81
21646: EQUAL
21647: AND
21648: IFFALSE 21669
// MinerPlaceMine ( unit , x , y ) ;
21650: LD_VAR 0 2
21654: PPUSH
21655: LD_VAR 0 4
21659: PPUSH
21660: LD_VAR 0 5
21664: PPUSH
21665: CALL 24054 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21669: LD_VAR 0 1
21673: PUSH
21674: LD_INT 251
21676: EQUAL
21677: PUSH
21678: LD_VAR 0 2
21682: PPUSH
21683: CALL_OW 264
21687: PUSH
21688: LD_INT 81
21690: EQUAL
21691: AND
21692: IFFALSE 21713
// MinerDetonateMine ( unit , x , y ) ;
21694: LD_VAR 0 2
21698: PPUSH
21699: LD_VAR 0 4
21703: PPUSH
21704: LD_VAR 0 5
21708: PPUSH
21709: CALL 24329 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21713: LD_VAR 0 1
21717: PUSH
21718: LD_INT 252
21720: EQUAL
21721: PUSH
21722: LD_VAR 0 2
21726: PPUSH
21727: CALL_OW 264
21731: PUSH
21732: LD_INT 81
21734: EQUAL
21735: AND
21736: IFFALSE 21757
// MinerCreateMinefield ( unit , x , y ) ;
21738: LD_VAR 0 2
21742: PPUSH
21743: LD_VAR 0 4
21747: PPUSH
21748: LD_VAR 0 5
21752: PPUSH
21753: CALL 24746 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21757: LD_VAR 0 1
21761: PUSH
21762: LD_INT 253
21764: EQUAL
21765: PUSH
21766: LD_VAR 0 2
21770: PPUSH
21771: CALL_OW 257
21775: PUSH
21776: LD_INT 5
21778: EQUAL
21779: AND
21780: IFFALSE 21801
// ComBinocular ( unit , x , y ) ;
21782: LD_VAR 0 2
21786: PPUSH
21787: LD_VAR 0 4
21791: PPUSH
21792: LD_VAR 0 5
21796: PPUSH
21797: CALL 25115 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21801: LD_VAR 0 1
21805: PUSH
21806: LD_INT 254
21808: EQUAL
21809: PUSH
21810: LD_VAR 0 2
21814: PPUSH
21815: CALL_OW 264
21819: PUSH
21820: LD_INT 99
21822: EQUAL
21823: AND
21824: PUSH
21825: LD_VAR 0 3
21829: PPUSH
21830: CALL_OW 263
21834: PUSH
21835: LD_INT 3
21837: EQUAL
21838: AND
21839: IFFALSE 21855
// HackDestroyVehicle ( unit , selectedUnit ) ;
21841: LD_VAR 0 2
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL 23418 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21855: LD_VAR 0 1
21859: PUSH
21860: LD_INT 255
21862: EQUAL
21863: PUSH
21864: LD_VAR 0 2
21868: PPUSH
21869: CALL_OW 264
21873: PUSH
21874: LD_INT 14
21876: PUSH
21877: LD_INT 53
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: IN
21884: AND
21885: PUSH
21886: LD_VAR 0 4
21890: PPUSH
21891: LD_VAR 0 5
21895: PPUSH
21896: CALL_OW 488
21900: AND
21901: IFFALSE 21925
// CutTreeXYR ( unit , x , y , 12 ) ;
21903: LD_VAR 0 2
21907: PPUSH
21908: LD_VAR 0 4
21912: PPUSH
21913: LD_VAR 0 5
21917: PPUSH
21918: LD_INT 12
21920: PPUSH
21921: CALL 21988 0 4
// if cmd = 256 then
21925: LD_VAR 0 1
21929: PUSH
21930: LD_INT 256
21932: EQUAL
21933: IFFALSE 21954
// SetFactoryWaypoint ( unit , x , y ) ;
21935: LD_VAR 0 2
21939: PPUSH
21940: LD_VAR 0 4
21944: PPUSH
21945: LD_VAR 0 5
21949: PPUSH
21950: CALL 19935 0 3
// if cmd = 257 then
21954: LD_VAR 0 1
21958: PUSH
21959: LD_INT 257
21961: EQUAL
21962: IFFALSE 21983
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21964: LD_VAR 0 2
21968: PPUSH
21969: LD_VAR 0 4
21973: PPUSH
21974: LD_VAR 0 5
21978: PPUSH
21979: CALL 20297 0 3
// end ;
21983: LD_VAR 0 6
21987: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21988: LD_INT 0
21990: PPUSH
21991: PPUSH
21992: PPUSH
21993: PPUSH
21994: PPUSH
21995: PPUSH
21996: PPUSH
21997: PPUSH
21998: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21999: LD_VAR 0 1
22003: NOT
22004: PUSH
22005: LD_VAR 0 2
22009: PPUSH
22010: LD_VAR 0 3
22014: PPUSH
22015: CALL_OW 488
22019: NOT
22020: OR
22021: PUSH
22022: LD_VAR 0 4
22026: NOT
22027: OR
22028: IFFALSE 22032
// exit ;
22030: GO 22372
// list := [ ] ;
22032: LD_ADDR_VAR 0 13
22036: PUSH
22037: EMPTY
22038: ST_TO_ADDR
// if x - r < 0 then
22039: LD_VAR 0 2
22043: PUSH
22044: LD_VAR 0 4
22048: MINUS
22049: PUSH
22050: LD_INT 0
22052: LESS
22053: IFFALSE 22065
// min_x := 0 else
22055: LD_ADDR_VAR 0 7
22059: PUSH
22060: LD_INT 0
22062: ST_TO_ADDR
22063: GO 22081
// min_x := x - r ;
22065: LD_ADDR_VAR 0 7
22069: PUSH
22070: LD_VAR 0 2
22074: PUSH
22075: LD_VAR 0 4
22079: MINUS
22080: ST_TO_ADDR
// if y - r < 0 then
22081: LD_VAR 0 3
22085: PUSH
22086: LD_VAR 0 4
22090: MINUS
22091: PUSH
22092: LD_INT 0
22094: LESS
22095: IFFALSE 22107
// min_y := 0 else
22097: LD_ADDR_VAR 0 8
22101: PUSH
22102: LD_INT 0
22104: ST_TO_ADDR
22105: GO 22123
// min_y := y - r ;
22107: LD_ADDR_VAR 0 8
22111: PUSH
22112: LD_VAR 0 3
22116: PUSH
22117: LD_VAR 0 4
22121: MINUS
22122: ST_TO_ADDR
// max_x := x + r ;
22123: LD_ADDR_VAR 0 9
22127: PUSH
22128: LD_VAR 0 2
22132: PUSH
22133: LD_VAR 0 4
22137: PLUS
22138: ST_TO_ADDR
// max_y := y + r ;
22139: LD_ADDR_VAR 0 10
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: LD_VAR 0 4
22153: PLUS
22154: ST_TO_ADDR
// for _x = min_x to max_x do
22155: LD_ADDR_VAR 0 11
22159: PUSH
22160: DOUBLE
22161: LD_VAR 0 7
22165: DEC
22166: ST_TO_ADDR
22167: LD_VAR 0 9
22171: PUSH
22172: FOR_TO
22173: IFFALSE 22290
// for _y = min_y to max_y do
22175: LD_ADDR_VAR 0 12
22179: PUSH
22180: DOUBLE
22181: LD_VAR 0 8
22185: DEC
22186: ST_TO_ADDR
22187: LD_VAR 0 10
22191: PUSH
22192: FOR_TO
22193: IFFALSE 22286
// begin if not ValidHex ( _x , _y ) then
22195: LD_VAR 0 11
22199: PPUSH
22200: LD_VAR 0 12
22204: PPUSH
22205: CALL_OW 488
22209: NOT
22210: IFFALSE 22214
// continue ;
22212: GO 22192
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22214: LD_VAR 0 11
22218: PPUSH
22219: LD_VAR 0 12
22223: PPUSH
22224: CALL_OW 351
22228: PUSH
22229: LD_VAR 0 11
22233: PPUSH
22234: LD_VAR 0 12
22238: PPUSH
22239: CALL_OW 554
22243: AND
22244: IFFALSE 22284
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22246: LD_ADDR_VAR 0 13
22250: PUSH
22251: LD_VAR 0 13
22255: PPUSH
22256: LD_VAR 0 13
22260: PUSH
22261: LD_INT 1
22263: PLUS
22264: PPUSH
22265: LD_VAR 0 11
22269: PUSH
22270: LD_VAR 0 12
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PPUSH
22279: CALL_OW 2
22283: ST_TO_ADDR
// end ;
22284: GO 22192
22286: POP
22287: POP
22288: GO 22172
22290: POP
22291: POP
// if not list then
22292: LD_VAR 0 13
22296: NOT
22297: IFFALSE 22301
// exit ;
22299: GO 22372
// for i in list do
22301: LD_ADDR_VAR 0 6
22305: PUSH
22306: LD_VAR 0 13
22310: PUSH
22311: FOR_IN
22312: IFFALSE 22370
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_STRING M
22321: PUSH
22322: LD_VAR 0 6
22326: PUSH
22327: LD_INT 1
22329: ARRAY
22330: PUSH
22331: LD_VAR 0 6
22335: PUSH
22336: LD_INT 2
22338: ARRAY
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: LD_INT 0
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: PPUSH
22364: CALL_OW 447
22368: GO 22311
22370: POP
22371: POP
// end ;
22372: LD_VAR 0 5
22376: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22377: LD_EXP 86
22381: NOT
22382: IFFALSE 22432
22384: GO 22386
22386: DISABLE
// begin initHack := true ;
22387: LD_ADDR_EXP 86
22391: PUSH
22392: LD_INT 1
22394: ST_TO_ADDR
// hackTanks := [ ] ;
22395: LD_ADDR_EXP 87
22399: PUSH
22400: EMPTY
22401: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22402: LD_ADDR_EXP 88
22406: PUSH
22407: EMPTY
22408: ST_TO_ADDR
// hackLimit := 3 ;
22409: LD_ADDR_EXP 89
22413: PUSH
22414: LD_INT 3
22416: ST_TO_ADDR
// hackDist := 12 ;
22417: LD_ADDR_EXP 90
22421: PUSH
22422: LD_INT 12
22424: ST_TO_ADDR
// hackCounter := [ ] ;
22425: LD_ADDR_EXP 91
22429: PUSH
22430: EMPTY
22431: ST_TO_ADDR
// end ;
22432: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22433: LD_EXP 86
22437: PUSH
22438: LD_INT 34
22440: PUSH
22441: LD_INT 99
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PPUSH
22448: CALL_OW 69
22452: AND
22453: IFFALSE 22706
22455: GO 22457
22457: DISABLE
22458: LD_INT 0
22460: PPUSH
22461: PPUSH
// begin enable ;
22462: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22463: LD_ADDR_VAR 0 1
22467: PUSH
22468: LD_INT 34
22470: PUSH
22471: LD_INT 99
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PPUSH
22478: CALL_OW 69
22482: PUSH
22483: FOR_IN
22484: IFFALSE 22704
// begin if not i in hackTanks then
22486: LD_VAR 0 1
22490: PUSH
22491: LD_EXP 87
22495: IN
22496: NOT
22497: IFFALSE 22580
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22499: LD_ADDR_EXP 87
22503: PUSH
22504: LD_EXP 87
22508: PPUSH
22509: LD_EXP 87
22513: PUSH
22514: LD_INT 1
22516: PLUS
22517: PPUSH
22518: LD_VAR 0 1
22522: PPUSH
22523: CALL_OW 1
22527: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22528: LD_ADDR_EXP 88
22532: PUSH
22533: LD_EXP 88
22537: PPUSH
22538: LD_EXP 88
22542: PUSH
22543: LD_INT 1
22545: PLUS
22546: PPUSH
22547: EMPTY
22548: PPUSH
22549: CALL_OW 1
22553: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22554: LD_ADDR_EXP 91
22558: PUSH
22559: LD_EXP 91
22563: PPUSH
22564: LD_EXP 91
22568: PUSH
22569: LD_INT 1
22571: PLUS
22572: PPUSH
22573: EMPTY
22574: PPUSH
22575: CALL_OW 1
22579: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22580: LD_VAR 0 1
22584: PPUSH
22585: CALL_OW 302
22589: NOT
22590: IFFALSE 22603
// begin HackUnlinkAll ( i ) ;
22592: LD_VAR 0 1
22596: PPUSH
22597: CALL 22709 0 1
// continue ;
22601: GO 22483
// end ; HackCheckCapturedStatus ( i ) ;
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL 23152 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22612: LD_ADDR_VAR 0 2
22616: PUSH
22617: LD_INT 81
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 255
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 33
22636: PUSH
22637: LD_INT 3
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 91
22646: PUSH
22647: LD_VAR 0 1
22651: PUSH
22652: LD_EXP 90
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 50
22664: PUSH
22665: EMPTY
22666: LIST
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: PPUSH
22674: CALL_OW 69
22678: ST_TO_ADDR
// if not tmp then
22679: LD_VAR 0 2
22683: NOT
22684: IFFALSE 22688
// continue ;
22686: GO 22483
// HackLink ( i , tmp ) ;
22688: LD_VAR 0 1
22692: PPUSH
22693: LD_VAR 0 2
22697: PPUSH
22698: CALL 22845 0 2
// end ;
22702: GO 22483
22704: POP
22705: POP
// end ;
22706: PPOPN 2
22708: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22709: LD_INT 0
22711: PPUSH
22712: PPUSH
22713: PPUSH
// if not hack in hackTanks then
22714: LD_VAR 0 1
22718: PUSH
22719: LD_EXP 87
22723: IN
22724: NOT
22725: IFFALSE 22729
// exit ;
22727: GO 22840
// index := GetElementIndex ( hackTanks , hack ) ;
22729: LD_ADDR_VAR 0 4
22733: PUSH
22734: LD_EXP 87
22738: PPUSH
22739: LD_VAR 0 1
22743: PPUSH
22744: CALL 30504 0 2
22748: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22749: LD_EXP 88
22753: PUSH
22754: LD_VAR 0 4
22758: ARRAY
22759: IFFALSE 22840
// begin for i in hackTanksCaptured [ index ] do
22761: LD_ADDR_VAR 0 3
22765: PUSH
22766: LD_EXP 88
22770: PUSH
22771: LD_VAR 0 4
22775: ARRAY
22776: PUSH
22777: FOR_IN
22778: IFFALSE 22804
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22780: LD_VAR 0 3
22784: PUSH
22785: LD_INT 1
22787: ARRAY
22788: PPUSH
22789: LD_VAR 0 3
22793: PUSH
22794: LD_INT 2
22796: ARRAY
22797: PPUSH
22798: CALL_OW 235
22802: GO 22777
22804: POP
22805: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22806: LD_ADDR_EXP 88
22810: PUSH
22811: LD_EXP 88
22815: PPUSH
22816: LD_VAR 0 4
22820: PPUSH
22821: EMPTY
22822: PPUSH
22823: CALL_OW 1
22827: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22828: LD_VAR 0 1
22832: PPUSH
22833: LD_INT 0
22835: PPUSH
22836: CALL_OW 505
// end ; end ;
22840: LD_VAR 0 2
22844: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22845: LD_INT 0
22847: PPUSH
22848: PPUSH
22849: PPUSH
// if not hack in hackTanks or not vehicles then
22850: LD_VAR 0 1
22854: PUSH
22855: LD_EXP 87
22859: IN
22860: NOT
22861: PUSH
22862: LD_VAR 0 2
22866: NOT
22867: OR
22868: IFFALSE 22872
// exit ;
22870: GO 23147
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22872: LD_ADDR_VAR 0 2
22876: PUSH
22877: LD_VAR 0 1
22881: PPUSH
22882: LD_VAR 0 2
22886: PPUSH
22887: LD_INT 1
22889: PPUSH
22890: LD_INT 1
22892: PPUSH
22893: CALL 31154 0 4
22897: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22898: LD_ADDR_VAR 0 5
22902: PUSH
22903: LD_EXP 87
22907: PPUSH
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL 30504 0 2
22917: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22918: LD_EXP 88
22922: PUSH
22923: LD_VAR 0 5
22927: ARRAY
22928: PUSH
22929: LD_EXP 89
22933: LESS
22934: IFFALSE 23123
// begin for i := 1 to vehicles do
22936: LD_ADDR_VAR 0 4
22940: PUSH
22941: DOUBLE
22942: LD_INT 1
22944: DEC
22945: ST_TO_ADDR
22946: LD_VAR 0 2
22950: PUSH
22951: FOR_TO
22952: IFFALSE 23121
// begin if hackTanksCaptured [ index ] = hackLimit then
22954: LD_EXP 88
22958: PUSH
22959: LD_VAR 0 5
22963: ARRAY
22964: PUSH
22965: LD_EXP 89
22969: EQUAL
22970: IFFALSE 22974
// break ;
22972: GO 23121
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22974: LD_ADDR_EXP 91
22978: PUSH
22979: LD_EXP 91
22983: PPUSH
22984: LD_VAR 0 5
22988: PPUSH
22989: LD_EXP 91
22993: PUSH
22994: LD_VAR 0 5
22998: ARRAY
22999: PUSH
23000: LD_INT 1
23002: PLUS
23003: PPUSH
23004: CALL_OW 1
23008: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23009: LD_ADDR_EXP 88
23013: PUSH
23014: LD_EXP 88
23018: PPUSH
23019: LD_VAR 0 5
23023: PUSH
23024: LD_EXP 88
23028: PUSH
23029: LD_VAR 0 5
23033: ARRAY
23034: PUSH
23035: LD_INT 1
23037: PLUS
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PPUSH
23043: LD_VAR 0 2
23047: PUSH
23048: LD_VAR 0 4
23052: ARRAY
23053: PUSH
23054: LD_VAR 0 2
23058: PUSH
23059: LD_VAR 0 4
23063: ARRAY
23064: PPUSH
23065: CALL_OW 255
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PPUSH
23074: CALL 30719 0 3
23078: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23079: LD_VAR 0 2
23083: PUSH
23084: LD_VAR 0 4
23088: ARRAY
23089: PPUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 255
23099: PPUSH
23100: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23104: LD_VAR 0 2
23108: PUSH
23109: LD_VAR 0 4
23113: ARRAY
23114: PPUSH
23115: CALL_OW 141
// end ;
23119: GO 22951
23121: POP
23122: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23123: LD_VAR 0 1
23127: PPUSH
23128: LD_EXP 88
23132: PUSH
23133: LD_VAR 0 5
23137: ARRAY
23138: PUSH
23139: LD_INT 0
23141: PLUS
23142: PPUSH
23143: CALL_OW 505
// end ;
23147: LD_VAR 0 3
23151: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
// if not hack in hackTanks then
23158: LD_VAR 0 1
23162: PUSH
23163: LD_EXP 87
23167: IN
23168: NOT
23169: IFFALSE 23173
// exit ;
23171: GO 23413
// index := GetElementIndex ( hackTanks , hack ) ;
23173: LD_ADDR_VAR 0 4
23177: PUSH
23178: LD_EXP 87
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL 30504 0 2
23192: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: DOUBLE
23199: LD_EXP 88
23203: PUSH
23204: LD_VAR 0 4
23208: ARRAY
23209: INC
23210: ST_TO_ADDR
23211: LD_INT 1
23213: PUSH
23214: FOR_DOWNTO
23215: IFFALSE 23387
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23217: LD_ADDR_VAR 0 5
23221: PUSH
23222: LD_EXP 88
23226: PUSH
23227: LD_VAR 0 4
23231: ARRAY
23232: PUSH
23233: LD_VAR 0 3
23237: ARRAY
23238: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23239: LD_VAR 0 5
23243: PUSH
23244: LD_INT 1
23246: ARRAY
23247: PPUSH
23248: CALL_OW 302
23252: NOT
23253: PUSH
23254: LD_VAR 0 5
23258: PUSH
23259: LD_INT 1
23261: ARRAY
23262: PPUSH
23263: CALL_OW 255
23267: PUSH
23268: LD_VAR 0 1
23272: PPUSH
23273: CALL_OW 255
23277: NONEQUAL
23278: OR
23279: IFFALSE 23385
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23281: LD_VAR 0 5
23285: PUSH
23286: LD_INT 1
23288: ARRAY
23289: PPUSH
23290: CALL_OW 305
23294: PUSH
23295: LD_VAR 0 5
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: PPUSH
23304: CALL_OW 255
23308: PUSH
23309: LD_VAR 0 1
23313: PPUSH
23314: CALL_OW 255
23318: EQUAL
23319: AND
23320: IFFALSE 23344
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23322: LD_VAR 0 5
23326: PUSH
23327: LD_INT 1
23329: ARRAY
23330: PPUSH
23331: LD_VAR 0 5
23335: PUSH
23336: LD_INT 2
23338: ARRAY
23339: PPUSH
23340: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23344: LD_ADDR_EXP 88
23348: PUSH
23349: LD_EXP 88
23353: PPUSH
23354: LD_VAR 0 4
23358: PPUSH
23359: LD_EXP 88
23363: PUSH
23364: LD_VAR 0 4
23368: ARRAY
23369: PPUSH
23370: LD_VAR 0 3
23374: PPUSH
23375: CALL_OW 3
23379: PPUSH
23380: CALL_OW 1
23384: ST_TO_ADDR
// end ; end ;
23385: GO 23214
23387: POP
23388: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23389: LD_VAR 0 1
23393: PPUSH
23394: LD_EXP 88
23398: PUSH
23399: LD_VAR 0 4
23403: ARRAY
23404: PUSH
23405: LD_INT 0
23407: PLUS
23408: PPUSH
23409: CALL_OW 505
// end ;
23413: LD_VAR 0 2
23417: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23418: LD_INT 0
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
// if not hack in hackTanks then
23424: LD_VAR 0 1
23428: PUSH
23429: LD_EXP 87
23433: IN
23434: NOT
23435: IFFALSE 23439
// exit ;
23437: GO 23524
// index := GetElementIndex ( hackTanks , hack ) ;
23439: LD_ADDR_VAR 0 5
23443: PUSH
23444: LD_EXP 87
23448: PPUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL 30504 0 2
23458: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23459: LD_ADDR_VAR 0 4
23463: PUSH
23464: DOUBLE
23465: LD_INT 1
23467: DEC
23468: ST_TO_ADDR
23469: LD_EXP 88
23473: PUSH
23474: LD_VAR 0 5
23478: ARRAY
23479: PUSH
23480: FOR_TO
23481: IFFALSE 23522
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23483: LD_EXP 88
23487: PUSH
23488: LD_VAR 0 5
23492: ARRAY
23493: PUSH
23494: LD_VAR 0 4
23498: ARRAY
23499: PUSH
23500: LD_INT 1
23502: ARRAY
23503: PUSH
23504: LD_VAR 0 2
23508: EQUAL
23509: IFFALSE 23520
// KillUnit ( vehicle ) ;
23511: LD_VAR 0 2
23515: PPUSH
23516: CALL_OW 66
23520: GO 23480
23522: POP
23523: POP
// end ;
23524: LD_VAR 0 3
23528: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23529: LD_EXP 92
23533: NOT
23534: IFFALSE 23569
23536: GO 23538
23538: DISABLE
// begin initMiner := true ;
23539: LD_ADDR_EXP 92
23543: PUSH
23544: LD_INT 1
23546: ST_TO_ADDR
// minersList := [ ] ;
23547: LD_ADDR_EXP 93
23551: PUSH
23552: EMPTY
23553: ST_TO_ADDR
// minerMinesList := [ ] ;
23554: LD_ADDR_EXP 94
23558: PUSH
23559: EMPTY
23560: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23561: LD_ADDR_EXP 95
23565: PUSH
23566: LD_INT 5
23568: ST_TO_ADDR
// end ;
23569: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23570: LD_EXP 92
23574: PUSH
23575: LD_INT 34
23577: PUSH
23578: LD_INT 81
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PPUSH
23585: CALL_OW 69
23589: AND
23590: IFFALSE 24051
23592: GO 23594
23594: DISABLE
23595: LD_INT 0
23597: PPUSH
23598: PPUSH
23599: PPUSH
23600: PPUSH
// begin enable ;
23601: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23602: LD_ADDR_VAR 0 1
23606: PUSH
23607: LD_INT 34
23609: PUSH
23610: LD_INT 81
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PPUSH
23617: CALL_OW 69
23621: PUSH
23622: FOR_IN
23623: IFFALSE 23695
// begin if not i in minersList then
23625: LD_VAR 0 1
23629: PUSH
23630: LD_EXP 93
23634: IN
23635: NOT
23636: IFFALSE 23693
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23638: LD_ADDR_EXP 93
23642: PUSH
23643: LD_EXP 93
23647: PPUSH
23648: LD_EXP 93
23652: PUSH
23653: LD_INT 1
23655: PLUS
23656: PPUSH
23657: LD_VAR 0 1
23661: PPUSH
23662: CALL_OW 1
23666: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23667: LD_ADDR_EXP 94
23671: PUSH
23672: LD_EXP 94
23676: PPUSH
23677: LD_EXP 94
23681: PUSH
23682: LD_INT 1
23684: PLUS
23685: PPUSH
23686: EMPTY
23687: PPUSH
23688: CALL_OW 1
23692: ST_TO_ADDR
// end end ;
23693: GO 23622
23695: POP
23696: POP
// for i := minerMinesList downto 1 do
23697: LD_ADDR_VAR 0 1
23701: PUSH
23702: DOUBLE
23703: LD_EXP 94
23707: INC
23708: ST_TO_ADDR
23709: LD_INT 1
23711: PUSH
23712: FOR_DOWNTO
23713: IFFALSE 24049
// begin if IsLive ( minersList [ i ] ) then
23715: LD_EXP 93
23719: PUSH
23720: LD_VAR 0 1
23724: ARRAY
23725: PPUSH
23726: CALL_OW 300
23730: IFFALSE 23758
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23732: LD_EXP 93
23736: PUSH
23737: LD_VAR 0 1
23741: ARRAY
23742: PPUSH
23743: LD_EXP 94
23747: PUSH
23748: LD_VAR 0 1
23752: ARRAY
23753: PPUSH
23754: CALL_OW 505
// if not minerMinesList [ i ] then
23758: LD_EXP 94
23762: PUSH
23763: LD_VAR 0 1
23767: ARRAY
23768: NOT
23769: IFFALSE 23773
// continue ;
23771: GO 23712
// for j := minerMinesList [ i ] downto 1 do
23773: LD_ADDR_VAR 0 2
23777: PUSH
23778: DOUBLE
23779: LD_EXP 94
23783: PUSH
23784: LD_VAR 0 1
23788: ARRAY
23789: INC
23790: ST_TO_ADDR
23791: LD_INT 1
23793: PUSH
23794: FOR_DOWNTO
23795: IFFALSE 24045
// begin side := GetSide ( minersList [ i ] ) ;
23797: LD_ADDR_VAR 0 3
23801: PUSH
23802: LD_EXP 93
23806: PUSH
23807: LD_VAR 0 1
23811: ARRAY
23812: PPUSH
23813: CALL_OW 255
23817: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23818: LD_ADDR_VAR 0 4
23822: PUSH
23823: LD_EXP 94
23827: PUSH
23828: LD_VAR 0 1
23832: ARRAY
23833: PUSH
23834: LD_VAR 0 2
23838: ARRAY
23839: PUSH
23840: LD_INT 1
23842: ARRAY
23843: PPUSH
23844: LD_EXP 94
23848: PUSH
23849: LD_VAR 0 1
23853: ARRAY
23854: PUSH
23855: LD_VAR 0 2
23859: ARRAY
23860: PUSH
23861: LD_INT 2
23863: ARRAY
23864: PPUSH
23865: CALL_OW 428
23869: ST_TO_ADDR
// if not tmp then
23870: LD_VAR 0 4
23874: NOT
23875: IFFALSE 23879
// continue ;
23877: GO 23794
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23879: LD_VAR 0 4
23883: PUSH
23884: LD_INT 81
23886: PUSH
23887: LD_VAR 0 3
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PPUSH
23896: CALL_OW 69
23900: IN
23901: PUSH
23902: LD_EXP 94
23906: PUSH
23907: LD_VAR 0 1
23911: ARRAY
23912: PUSH
23913: LD_VAR 0 2
23917: ARRAY
23918: PUSH
23919: LD_INT 1
23921: ARRAY
23922: PPUSH
23923: LD_EXP 94
23927: PUSH
23928: LD_VAR 0 1
23932: ARRAY
23933: PUSH
23934: LD_VAR 0 2
23938: ARRAY
23939: PUSH
23940: LD_INT 2
23942: ARRAY
23943: PPUSH
23944: CALL_OW 458
23948: AND
23949: IFFALSE 24043
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23951: LD_EXP 94
23955: PUSH
23956: LD_VAR 0 1
23960: ARRAY
23961: PUSH
23962: LD_VAR 0 2
23966: ARRAY
23967: PUSH
23968: LD_INT 1
23970: ARRAY
23971: PPUSH
23972: LD_EXP 94
23976: PUSH
23977: LD_VAR 0 1
23981: ARRAY
23982: PUSH
23983: LD_VAR 0 2
23987: ARRAY
23988: PUSH
23989: LD_INT 2
23991: ARRAY
23992: PPUSH
23993: LD_VAR 0 3
23997: PPUSH
23998: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24002: LD_ADDR_EXP 94
24006: PUSH
24007: LD_EXP 94
24011: PPUSH
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 94
24021: PUSH
24022: LD_VAR 0 1
24026: ARRAY
24027: PPUSH
24028: LD_VAR 0 2
24032: PPUSH
24033: CALL_OW 3
24037: PPUSH
24038: CALL_OW 1
24042: ST_TO_ADDR
// end ; end ;
24043: GO 23794
24045: POP
24046: POP
// end ;
24047: GO 23712
24049: POP
24050: POP
// end ;
24051: PPOPN 4
24053: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24054: LD_INT 0
24056: PPUSH
24057: PPUSH
// result := false ;
24058: LD_ADDR_VAR 0 4
24062: PUSH
24063: LD_INT 0
24065: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24066: LD_VAR 0 1
24070: PPUSH
24071: CALL_OW 264
24075: PUSH
24076: LD_INT 81
24078: EQUAL
24079: NOT
24080: IFFALSE 24084
// exit ;
24082: GO 24324
// index := GetElementIndex ( minersList , unit ) ;
24084: LD_ADDR_VAR 0 5
24088: PUSH
24089: LD_EXP 93
24093: PPUSH
24094: LD_VAR 0 1
24098: PPUSH
24099: CALL 30504 0 2
24103: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24104: LD_EXP 94
24108: PUSH
24109: LD_VAR 0 5
24113: ARRAY
24114: PUSH
24115: LD_EXP 95
24119: GREATEREQUAL
24120: IFFALSE 24124
// exit ;
24122: GO 24324
// ComMoveXY ( unit , x , y ) ;
24124: LD_VAR 0 1
24128: PPUSH
24129: LD_VAR 0 2
24133: PPUSH
24134: LD_VAR 0 3
24138: PPUSH
24139: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24143: LD_INT 35
24145: PPUSH
24146: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24150: LD_VAR 0 1
24154: PPUSH
24155: LD_VAR 0 2
24159: PPUSH
24160: LD_VAR 0 3
24164: PPUSH
24165: CALL 61888 0 3
24169: NOT
24170: PUSH
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 314
24180: AND
24181: IFFALSE 24185
// exit ;
24183: GO 24324
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24185: LD_VAR 0 2
24189: PPUSH
24190: LD_VAR 0 3
24194: PPUSH
24195: CALL_OW 428
24199: PUSH
24200: LD_VAR 0 1
24204: EQUAL
24205: PUSH
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 314
24215: NOT
24216: AND
24217: IFFALSE 24143
// PlaySoundXY ( x , y , PlantMine ) ;
24219: LD_VAR 0 2
24223: PPUSH
24224: LD_VAR 0 3
24228: PPUSH
24229: LD_STRING PlantMine
24231: PPUSH
24232: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24236: LD_VAR 0 2
24240: PPUSH
24241: LD_VAR 0 3
24245: PPUSH
24246: LD_VAR 0 1
24250: PPUSH
24251: CALL_OW 255
24255: PPUSH
24256: LD_INT 0
24258: PPUSH
24259: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24263: LD_ADDR_EXP 94
24267: PUSH
24268: LD_EXP 94
24272: PPUSH
24273: LD_VAR 0 5
24277: PUSH
24278: LD_EXP 94
24282: PUSH
24283: LD_VAR 0 5
24287: ARRAY
24288: PUSH
24289: LD_INT 1
24291: PLUS
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PPUSH
24297: LD_VAR 0 2
24301: PUSH
24302: LD_VAR 0 3
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL 30719 0 3
24315: ST_TO_ADDR
// result := true ;
24316: LD_ADDR_VAR 0 4
24320: PUSH
24321: LD_INT 1
24323: ST_TO_ADDR
// end ;
24324: LD_VAR 0 4
24328: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24329: LD_INT 0
24331: PPUSH
24332: PPUSH
24333: PPUSH
// if not unit in minersList then
24334: LD_VAR 0 1
24338: PUSH
24339: LD_EXP 93
24343: IN
24344: NOT
24345: IFFALSE 24349
// exit ;
24347: GO 24741
// index := GetElementIndex ( minersList , unit ) ;
24349: LD_ADDR_VAR 0 6
24353: PUSH
24354: LD_EXP 93
24358: PPUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL 30504 0 2
24368: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24369: LD_ADDR_VAR 0 5
24373: PUSH
24374: DOUBLE
24375: LD_EXP 94
24379: PUSH
24380: LD_VAR 0 6
24384: ARRAY
24385: INC
24386: ST_TO_ADDR
24387: LD_INT 1
24389: PUSH
24390: FOR_DOWNTO
24391: IFFALSE 24552
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24393: LD_EXP 94
24397: PUSH
24398: LD_VAR 0 6
24402: ARRAY
24403: PUSH
24404: LD_VAR 0 5
24408: ARRAY
24409: PUSH
24410: LD_INT 1
24412: ARRAY
24413: PUSH
24414: LD_VAR 0 2
24418: EQUAL
24419: PUSH
24420: LD_EXP 94
24424: PUSH
24425: LD_VAR 0 6
24429: ARRAY
24430: PUSH
24431: LD_VAR 0 5
24435: ARRAY
24436: PUSH
24437: LD_INT 2
24439: ARRAY
24440: PUSH
24441: LD_VAR 0 3
24445: EQUAL
24446: AND
24447: IFFALSE 24550
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24449: LD_EXP 94
24453: PUSH
24454: LD_VAR 0 6
24458: ARRAY
24459: PUSH
24460: LD_VAR 0 5
24464: ARRAY
24465: PUSH
24466: LD_INT 1
24468: ARRAY
24469: PPUSH
24470: LD_EXP 94
24474: PUSH
24475: LD_VAR 0 6
24479: ARRAY
24480: PUSH
24481: LD_VAR 0 5
24485: ARRAY
24486: PUSH
24487: LD_INT 2
24489: ARRAY
24490: PPUSH
24491: LD_VAR 0 1
24495: PPUSH
24496: CALL_OW 255
24500: PPUSH
24501: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24505: LD_ADDR_EXP 94
24509: PUSH
24510: LD_EXP 94
24514: PPUSH
24515: LD_VAR 0 6
24519: PPUSH
24520: LD_EXP 94
24524: PUSH
24525: LD_VAR 0 6
24529: ARRAY
24530: PPUSH
24531: LD_VAR 0 5
24535: PPUSH
24536: CALL_OW 3
24540: PPUSH
24541: CALL_OW 1
24545: ST_TO_ADDR
// exit ;
24546: POP
24547: POP
24548: GO 24741
// end ; end ;
24550: GO 24390
24552: POP
24553: POP
// for i := minerMinesList [ index ] downto 1 do
24554: LD_ADDR_VAR 0 5
24558: PUSH
24559: DOUBLE
24560: LD_EXP 94
24564: PUSH
24565: LD_VAR 0 6
24569: ARRAY
24570: INC
24571: ST_TO_ADDR
24572: LD_INT 1
24574: PUSH
24575: FOR_DOWNTO
24576: IFFALSE 24739
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24578: LD_EXP 94
24582: PUSH
24583: LD_VAR 0 6
24587: ARRAY
24588: PUSH
24589: LD_VAR 0 5
24593: ARRAY
24594: PUSH
24595: LD_INT 1
24597: ARRAY
24598: PPUSH
24599: LD_EXP 94
24603: PUSH
24604: LD_VAR 0 6
24608: ARRAY
24609: PUSH
24610: LD_VAR 0 5
24614: ARRAY
24615: PUSH
24616: LD_INT 2
24618: ARRAY
24619: PPUSH
24620: LD_VAR 0 2
24624: PPUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: CALL_OW 298
24634: PUSH
24635: LD_INT 6
24637: LESS
24638: IFFALSE 24737
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24640: LD_EXP 94
24644: PUSH
24645: LD_VAR 0 6
24649: ARRAY
24650: PUSH
24651: LD_VAR 0 5
24655: ARRAY
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: PPUSH
24661: LD_EXP 94
24665: PUSH
24666: LD_VAR 0 6
24670: ARRAY
24671: PUSH
24672: LD_VAR 0 5
24676: ARRAY
24677: PUSH
24678: LD_INT 2
24680: ARRAY
24681: PPUSH
24682: LD_VAR 0 1
24686: PPUSH
24687: CALL_OW 255
24691: PPUSH
24692: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24696: LD_ADDR_EXP 94
24700: PUSH
24701: LD_EXP 94
24705: PPUSH
24706: LD_VAR 0 6
24710: PPUSH
24711: LD_EXP 94
24715: PUSH
24716: LD_VAR 0 6
24720: ARRAY
24721: PPUSH
24722: LD_VAR 0 5
24726: PPUSH
24727: CALL_OW 3
24731: PPUSH
24732: CALL_OW 1
24736: ST_TO_ADDR
// end ; end ;
24737: GO 24575
24739: POP
24740: POP
// end ;
24741: LD_VAR 0 4
24745: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24746: LD_INT 0
24748: PPUSH
24749: PPUSH
24750: PPUSH
24751: PPUSH
24752: PPUSH
24753: PPUSH
24754: PPUSH
24755: PPUSH
24756: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24757: LD_VAR 0 1
24761: PPUSH
24762: CALL_OW 264
24766: PUSH
24767: LD_INT 81
24769: EQUAL
24770: NOT
24771: PUSH
24772: LD_VAR 0 1
24776: PUSH
24777: LD_EXP 93
24781: IN
24782: NOT
24783: OR
24784: IFFALSE 24788
// exit ;
24786: GO 25110
// index := GetElementIndex ( minersList , unit ) ;
24788: LD_ADDR_VAR 0 6
24792: PUSH
24793: LD_EXP 93
24797: PPUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL 30504 0 2
24807: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24808: LD_ADDR_VAR 0 8
24812: PUSH
24813: LD_EXP 95
24817: PUSH
24818: LD_EXP 94
24822: PUSH
24823: LD_VAR 0 6
24827: ARRAY
24828: MINUS
24829: ST_TO_ADDR
// if not minesFreeAmount then
24830: LD_VAR 0 8
24834: NOT
24835: IFFALSE 24839
// exit ;
24837: GO 25110
// tmp := [ ] ;
24839: LD_ADDR_VAR 0 7
24843: PUSH
24844: EMPTY
24845: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24846: LD_ADDR_VAR 0 5
24850: PUSH
24851: DOUBLE
24852: LD_INT 1
24854: DEC
24855: ST_TO_ADDR
24856: LD_VAR 0 8
24860: PUSH
24861: FOR_TO
24862: IFFALSE 25057
// begin _d := rand ( 0 , 5 ) ;
24864: LD_ADDR_VAR 0 11
24868: PUSH
24869: LD_INT 0
24871: PPUSH
24872: LD_INT 5
24874: PPUSH
24875: CALL_OW 12
24879: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24880: LD_ADDR_VAR 0 12
24884: PUSH
24885: LD_INT 2
24887: PPUSH
24888: LD_INT 6
24890: PPUSH
24891: CALL_OW 12
24895: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24896: LD_ADDR_VAR 0 9
24900: PUSH
24901: LD_VAR 0 2
24905: PPUSH
24906: LD_VAR 0 11
24910: PPUSH
24911: LD_VAR 0 12
24915: PPUSH
24916: CALL_OW 272
24920: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24921: LD_ADDR_VAR 0 10
24925: PUSH
24926: LD_VAR 0 3
24930: PPUSH
24931: LD_VAR 0 11
24935: PPUSH
24936: LD_VAR 0 12
24940: PPUSH
24941: CALL_OW 273
24945: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24946: LD_VAR 0 9
24950: PPUSH
24951: LD_VAR 0 10
24955: PPUSH
24956: CALL_OW 488
24960: PUSH
24961: LD_VAR 0 9
24965: PUSH
24966: LD_VAR 0 10
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_VAR 0 7
24979: IN
24980: NOT
24981: AND
24982: PUSH
24983: LD_VAR 0 9
24987: PPUSH
24988: LD_VAR 0 10
24992: PPUSH
24993: CALL_OW 458
24997: NOT
24998: AND
24999: IFFALSE 25041
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25001: LD_ADDR_VAR 0 7
25005: PUSH
25006: LD_VAR 0 7
25010: PPUSH
25011: LD_VAR 0 7
25015: PUSH
25016: LD_INT 1
25018: PLUS
25019: PPUSH
25020: LD_VAR 0 9
25024: PUSH
25025: LD_VAR 0 10
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PPUSH
25034: CALL_OW 1
25038: ST_TO_ADDR
25039: GO 25055
// i := i - 1 ;
25041: LD_ADDR_VAR 0 5
25045: PUSH
25046: LD_VAR 0 5
25050: PUSH
25051: LD_INT 1
25053: MINUS
25054: ST_TO_ADDR
// end ;
25055: GO 24861
25057: POP
25058: POP
// for i in tmp do
25059: LD_ADDR_VAR 0 5
25063: PUSH
25064: LD_VAR 0 7
25068: PUSH
25069: FOR_IN
25070: IFFALSE 25108
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25072: LD_VAR 0 1
25076: PPUSH
25077: LD_VAR 0 5
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: PPUSH
25086: LD_VAR 0 5
25090: PUSH
25091: LD_INT 2
25093: ARRAY
25094: PPUSH
25095: CALL 24054 0 3
25099: NOT
25100: IFFALSE 25106
// exit ;
25102: POP
25103: POP
25104: GO 25110
25106: GO 25069
25108: POP
25109: POP
// end ;
25110: LD_VAR 0 4
25114: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25115: LD_INT 0
25117: PPUSH
25118: PPUSH
25119: PPUSH
25120: PPUSH
25121: PPUSH
25122: PPUSH
25123: PPUSH
// if not GetClass ( unit ) = class_sniper then
25124: LD_VAR 0 1
25128: PPUSH
25129: CALL_OW 257
25133: PUSH
25134: LD_INT 5
25136: EQUAL
25137: NOT
25138: IFFALSE 25142
// exit ;
25140: GO 25530
// dist := 8 ;
25142: LD_ADDR_VAR 0 5
25146: PUSH
25147: LD_INT 8
25149: ST_TO_ADDR
// viewRange := 12 ;
25150: LD_ADDR_VAR 0 7
25154: PUSH
25155: LD_INT 12
25157: ST_TO_ADDR
// side := GetSide ( unit ) ;
25158: LD_ADDR_VAR 0 6
25162: PUSH
25163: LD_VAR 0 1
25167: PPUSH
25168: CALL_OW 255
25172: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25173: LD_INT 61
25175: PPUSH
25176: LD_VAR 0 6
25180: PPUSH
25181: CALL_OW 321
25185: PUSH
25186: LD_INT 2
25188: EQUAL
25189: IFFALSE 25199
// viewRange := 16 ;
25191: LD_ADDR_VAR 0 7
25195: PUSH
25196: LD_INT 16
25198: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25199: LD_VAR 0 1
25203: PPUSH
25204: LD_VAR 0 2
25208: PPUSH
25209: LD_VAR 0 3
25213: PPUSH
25214: CALL_OW 297
25218: PUSH
25219: LD_VAR 0 5
25223: GREATER
25224: IFFALSE 25303
// begin ComMoveXY ( unit , x , y ) ;
25226: LD_VAR 0 1
25230: PPUSH
25231: LD_VAR 0 2
25235: PPUSH
25236: LD_VAR 0 3
25240: PPUSH
25241: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25245: LD_INT 35
25247: PPUSH
25248: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25252: LD_VAR 0 1
25256: PPUSH
25257: LD_VAR 0 2
25261: PPUSH
25262: LD_VAR 0 3
25266: PPUSH
25267: CALL 61888 0 3
25271: NOT
25272: IFFALSE 25276
// exit ;
25274: GO 25530
// until GetDistUnitXY ( unit , x , y ) < dist ;
25276: LD_VAR 0 1
25280: PPUSH
25281: LD_VAR 0 2
25285: PPUSH
25286: LD_VAR 0 3
25290: PPUSH
25291: CALL_OW 297
25295: PUSH
25296: LD_VAR 0 5
25300: LESS
25301: IFFALSE 25245
// end ; ComTurnXY ( unit , x , y ) ;
25303: LD_VAR 0 1
25307: PPUSH
25308: LD_VAR 0 2
25312: PPUSH
25313: LD_VAR 0 3
25317: PPUSH
25318: CALL_OW 118
// wait ( 5 ) ;
25322: LD_INT 5
25324: PPUSH
25325: CALL_OW 67
// _d := GetDir ( unit ) ;
25329: LD_ADDR_VAR 0 10
25333: PUSH
25334: LD_VAR 0 1
25338: PPUSH
25339: CALL_OW 254
25343: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25344: LD_ADDR_VAR 0 8
25348: PUSH
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 250
25358: PPUSH
25359: LD_VAR 0 10
25363: PPUSH
25364: LD_VAR 0 5
25368: PPUSH
25369: CALL_OW 272
25373: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25374: LD_ADDR_VAR 0 9
25378: PUSH
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL_OW 251
25388: PPUSH
25389: LD_VAR 0 10
25393: PPUSH
25394: LD_VAR 0 5
25398: PPUSH
25399: CALL_OW 273
25403: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25404: LD_VAR 0 8
25408: PPUSH
25409: LD_VAR 0 9
25413: PPUSH
25414: CALL_OW 488
25418: NOT
25419: IFFALSE 25423
// exit ;
25421: GO 25530
// ComAnimCustom ( unit , 1 ) ;
25423: LD_VAR 0 1
25427: PPUSH
25428: LD_INT 1
25430: PPUSH
25431: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25435: LD_VAR 0 8
25439: PPUSH
25440: LD_VAR 0 9
25444: PPUSH
25445: LD_VAR 0 6
25449: PPUSH
25450: LD_VAR 0 7
25454: PPUSH
25455: CALL_OW 330
// repeat wait ( 1 ) ;
25459: LD_INT 1
25461: PPUSH
25462: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25466: LD_VAR 0 1
25470: PPUSH
25471: CALL_OW 316
25475: PUSH
25476: LD_VAR 0 1
25480: PPUSH
25481: CALL_OW 314
25485: OR
25486: PUSH
25487: LD_VAR 0 1
25491: PPUSH
25492: CALL_OW 302
25496: NOT
25497: OR
25498: PUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL_OW 301
25508: OR
25509: IFFALSE 25459
// RemoveSeeing ( _x , _y , side ) ;
25511: LD_VAR 0 8
25515: PPUSH
25516: LD_VAR 0 9
25520: PPUSH
25521: LD_VAR 0 6
25525: PPUSH
25526: CALL_OW 331
// end ; end_of_file
25530: LD_VAR 0 4
25534: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25535: LD_VAR 0 1
25539: PUSH
25540: LD_INT 200
25542: DOUBLE
25543: GREATEREQUAL
25544: IFFALSE 25552
25546: LD_INT 299
25548: DOUBLE
25549: LESSEQUAL
25550: IFTRUE 25554
25552: GO 25586
25554: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25555: LD_VAR 0 1
25559: PPUSH
25560: LD_VAR 0 2
25564: PPUSH
25565: LD_VAR 0 3
25569: PPUSH
25570: LD_VAR 0 4
25574: PPUSH
25575: LD_VAR 0 5
25579: PPUSH
25580: CALL 21622 0 5
25584: GO 25663
25586: LD_INT 300
25588: DOUBLE
25589: GREATEREQUAL
25590: IFFALSE 25598
25592: LD_INT 399
25594: DOUBLE
25595: LESSEQUAL
25596: IFTRUE 25600
25598: GO 25662
25600: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25601: LD_VAR 0 1
25605: PPUSH
25606: LD_VAR 0 2
25610: PPUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: LD_VAR 0 4
25620: PPUSH
25621: LD_VAR 0 5
25625: PPUSH
25626: LD_VAR 0 6
25630: PPUSH
25631: LD_VAR 0 7
25635: PPUSH
25636: LD_VAR 0 8
25640: PPUSH
25641: LD_VAR 0 9
25645: PPUSH
25646: LD_VAR 0 10
25650: PPUSH
25651: LD_VAR 0 11
25655: PPUSH
25656: CALL 17947 0 11
25660: GO 25663
25662: POP
// end ;
25663: PPOPN 11
25665: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25666: LD_VAR 0 1
25670: PPUSH
25671: LD_VAR 0 2
25675: PPUSH
25676: LD_VAR 0 3
25680: PPUSH
25681: LD_VAR 0 4
25685: PPUSH
25686: LD_VAR 0 5
25690: PPUSH
25691: CALL 21358 0 5
// end ; end_of_file
25695: PPOPN 5
25697: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: LD_VAR 0 4
25717: PPUSH
25718: LD_VAR 0 5
25722: PPUSH
25723: LD_VAR 0 6
25727: PPUSH
25728: CALL 5599 0 6
// end ;
25732: PPOPN 6
25734: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
25735: LD_INT 0
25737: PPUSH
// begin if not units then
25738: LD_VAR 0 1
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25747
// end ;
25747: PPOPN 7
25749: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
25750: CALL 5503 0 0
// end ; end_of_file end_of_file
25754: PPOPN 1
25756: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25757: LD_INT 0
25759: PPUSH
25760: PPUSH
// if exist_mode then
25761: LD_VAR 0 2
25765: IFFALSE 25790
// unit := CreateCharacter ( prefix & ident ) else
25767: LD_ADDR_VAR 0 5
25771: PUSH
25772: LD_VAR 0 3
25776: PUSH
25777: LD_VAR 0 1
25781: STR
25782: PPUSH
25783: CALL_OW 34
25787: ST_TO_ADDR
25788: GO 25805
// unit := NewCharacter ( ident ) ;
25790: LD_ADDR_VAR 0 5
25794: PUSH
25795: LD_VAR 0 1
25799: PPUSH
25800: CALL_OW 25
25804: ST_TO_ADDR
// result := unit ;
25805: LD_ADDR_VAR 0 4
25809: PUSH
25810: LD_VAR 0 5
25814: ST_TO_ADDR
// end ;
25815: LD_VAR 0 4
25819: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25820: LD_INT 0
25822: PPUSH
25823: PPUSH
// if not side or not nation then
25824: LD_VAR 0 1
25828: NOT
25829: PUSH
25830: LD_VAR 0 2
25834: NOT
25835: OR
25836: IFFALSE 25840
// exit ;
25838: GO 26608
// case nation of nation_american :
25840: LD_VAR 0 2
25844: PUSH
25845: LD_INT 1
25847: DOUBLE
25848: EQUAL
25849: IFTRUE 25853
25851: GO 26067
25853: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25854: LD_ADDR_VAR 0 4
25858: PUSH
25859: LD_INT 35
25861: PUSH
25862: LD_INT 45
25864: PUSH
25865: LD_INT 46
25867: PUSH
25868: LD_INT 47
25870: PUSH
25871: LD_INT 82
25873: PUSH
25874: LD_INT 83
25876: PUSH
25877: LD_INT 84
25879: PUSH
25880: LD_INT 85
25882: PUSH
25883: LD_INT 86
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 6
25894: PUSH
25895: LD_INT 15
25897: PUSH
25898: LD_INT 16
25900: PUSH
25901: LD_INT 7
25903: PUSH
25904: LD_INT 12
25906: PUSH
25907: LD_INT 13
25909: PUSH
25910: LD_INT 10
25912: PUSH
25913: LD_INT 14
25915: PUSH
25916: LD_INT 20
25918: PUSH
25919: LD_INT 21
25921: PUSH
25922: LD_INT 22
25924: PUSH
25925: LD_INT 25
25927: PUSH
25928: LD_INT 32
25930: PUSH
25931: LD_INT 27
25933: PUSH
25934: LD_INT 36
25936: PUSH
25937: LD_INT 69
25939: PUSH
25940: LD_INT 39
25942: PUSH
25943: LD_INT 34
25945: PUSH
25946: LD_INT 40
25948: PUSH
25949: LD_INT 48
25951: PUSH
25952: LD_INT 49
25954: PUSH
25955: LD_INT 50
25957: PUSH
25958: LD_INT 51
25960: PUSH
25961: LD_INT 52
25963: PUSH
25964: LD_INT 53
25966: PUSH
25967: LD_INT 54
25969: PUSH
25970: LD_INT 55
25972: PUSH
25973: LD_INT 56
25975: PUSH
25976: LD_INT 57
25978: PUSH
25979: LD_INT 58
25981: PUSH
25982: LD_INT 59
25984: PUSH
25985: LD_INT 60
25987: PUSH
25988: LD_INT 61
25990: PUSH
25991: LD_INT 62
25993: PUSH
25994: LD_INT 80
25996: PUSH
25997: LD_INT 82
25999: PUSH
26000: LD_INT 83
26002: PUSH
26003: LD_INT 84
26005: PUSH
26006: LD_INT 85
26008: PUSH
26009: LD_INT 86
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: ST_TO_ADDR
26065: GO 26532
26067: LD_INT 2
26069: DOUBLE
26070: EQUAL
26071: IFTRUE 26075
26073: GO 26301
26075: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26076: LD_ADDR_VAR 0 4
26080: PUSH
26081: LD_INT 35
26083: PUSH
26084: LD_INT 45
26086: PUSH
26087: LD_INT 46
26089: PUSH
26090: LD_INT 47
26092: PUSH
26093: LD_INT 82
26095: PUSH
26096: LD_INT 83
26098: PUSH
26099: LD_INT 84
26101: PUSH
26102: LD_INT 85
26104: PUSH
26105: LD_INT 87
26107: PUSH
26108: LD_INT 70
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 11
26116: PUSH
26117: LD_INT 3
26119: PUSH
26120: LD_INT 4
26122: PUSH
26123: LD_INT 5
26125: PUSH
26126: LD_INT 6
26128: PUSH
26129: LD_INT 15
26131: PUSH
26132: LD_INT 18
26134: PUSH
26135: LD_INT 7
26137: PUSH
26138: LD_INT 17
26140: PUSH
26141: LD_INT 8
26143: PUSH
26144: LD_INT 20
26146: PUSH
26147: LD_INT 21
26149: PUSH
26150: LD_INT 22
26152: PUSH
26153: LD_INT 72
26155: PUSH
26156: LD_INT 26
26158: PUSH
26159: LD_INT 69
26161: PUSH
26162: LD_INT 39
26164: PUSH
26165: LD_INT 40
26167: PUSH
26168: LD_INT 41
26170: PUSH
26171: LD_INT 42
26173: PUSH
26174: LD_INT 43
26176: PUSH
26177: LD_INT 48
26179: PUSH
26180: LD_INT 49
26182: PUSH
26183: LD_INT 50
26185: PUSH
26186: LD_INT 51
26188: PUSH
26189: LD_INT 52
26191: PUSH
26192: LD_INT 53
26194: PUSH
26195: LD_INT 54
26197: PUSH
26198: LD_INT 55
26200: PUSH
26201: LD_INT 56
26203: PUSH
26204: LD_INT 60
26206: PUSH
26207: LD_INT 61
26209: PUSH
26210: LD_INT 62
26212: PUSH
26213: LD_INT 66
26215: PUSH
26216: LD_INT 67
26218: PUSH
26219: LD_INT 68
26221: PUSH
26222: LD_INT 81
26224: PUSH
26225: LD_INT 82
26227: PUSH
26228: LD_INT 83
26230: PUSH
26231: LD_INT 84
26233: PUSH
26234: LD_INT 85
26236: PUSH
26237: LD_INT 87
26239: PUSH
26240: LD_INT 88
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: ST_TO_ADDR
26299: GO 26532
26301: LD_INT 3
26303: DOUBLE
26304: EQUAL
26305: IFTRUE 26309
26307: GO 26531
26309: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26310: LD_ADDR_VAR 0 4
26314: PUSH
26315: LD_INT 46
26317: PUSH
26318: LD_INT 47
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: LD_INT 82
26329: PUSH
26330: LD_INT 83
26332: PUSH
26333: LD_INT 84
26335: PUSH
26336: LD_INT 85
26338: PUSH
26339: LD_INT 86
26341: PUSH
26342: LD_INT 11
26344: PUSH
26345: LD_INT 9
26347: PUSH
26348: LD_INT 20
26350: PUSH
26351: LD_INT 19
26353: PUSH
26354: LD_INT 21
26356: PUSH
26357: LD_INT 24
26359: PUSH
26360: LD_INT 22
26362: PUSH
26363: LD_INT 25
26365: PUSH
26366: LD_INT 28
26368: PUSH
26369: LD_INT 29
26371: PUSH
26372: LD_INT 30
26374: PUSH
26375: LD_INT 31
26377: PUSH
26378: LD_INT 37
26380: PUSH
26381: LD_INT 38
26383: PUSH
26384: LD_INT 32
26386: PUSH
26387: LD_INT 27
26389: PUSH
26390: LD_INT 33
26392: PUSH
26393: LD_INT 69
26395: PUSH
26396: LD_INT 39
26398: PUSH
26399: LD_INT 34
26401: PUSH
26402: LD_INT 40
26404: PUSH
26405: LD_INT 71
26407: PUSH
26408: LD_INT 23
26410: PUSH
26411: LD_INT 44
26413: PUSH
26414: LD_INT 48
26416: PUSH
26417: LD_INT 49
26419: PUSH
26420: LD_INT 50
26422: PUSH
26423: LD_INT 51
26425: PUSH
26426: LD_INT 52
26428: PUSH
26429: LD_INT 53
26431: PUSH
26432: LD_INT 54
26434: PUSH
26435: LD_INT 55
26437: PUSH
26438: LD_INT 56
26440: PUSH
26441: LD_INT 57
26443: PUSH
26444: LD_INT 58
26446: PUSH
26447: LD_INT 59
26449: PUSH
26450: LD_INT 63
26452: PUSH
26453: LD_INT 64
26455: PUSH
26456: LD_INT 65
26458: PUSH
26459: LD_INT 82
26461: PUSH
26462: LD_INT 83
26464: PUSH
26465: LD_INT 84
26467: PUSH
26468: LD_INT 85
26470: PUSH
26471: LD_INT 86
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: ST_TO_ADDR
26529: GO 26532
26531: POP
// if state > - 1 and state < 3 then
26532: LD_VAR 0 3
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: GREATER
26541: PUSH
26542: LD_VAR 0 3
26546: PUSH
26547: LD_INT 3
26549: LESS
26550: AND
26551: IFFALSE 26608
// for i in result do
26553: LD_ADDR_VAR 0 5
26557: PUSH
26558: LD_VAR 0 4
26562: PUSH
26563: FOR_IN
26564: IFFALSE 26606
// if GetTech ( i , side ) <> state then
26566: LD_VAR 0 5
26570: PPUSH
26571: LD_VAR 0 1
26575: PPUSH
26576: CALL_OW 321
26580: PUSH
26581: LD_VAR 0 3
26585: NONEQUAL
26586: IFFALSE 26604
// result := result diff i ;
26588: LD_ADDR_VAR 0 4
26592: PUSH
26593: LD_VAR 0 4
26597: PUSH
26598: LD_VAR 0 5
26602: DIFF
26603: ST_TO_ADDR
26604: GO 26563
26606: POP
26607: POP
// end ;
26608: LD_VAR 0 4
26612: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26613: LD_INT 0
26615: PPUSH
26616: PPUSH
26617: PPUSH
// result := true ;
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: LD_INT 1
26625: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26626: LD_ADDR_VAR 0 5
26630: PUSH
26631: LD_VAR 0 2
26635: PPUSH
26636: CALL_OW 480
26640: ST_TO_ADDR
// if not tmp then
26641: LD_VAR 0 5
26645: NOT
26646: IFFALSE 26650
// exit ;
26648: GO 26699
// for i in tmp do
26650: LD_ADDR_VAR 0 4
26654: PUSH
26655: LD_VAR 0 5
26659: PUSH
26660: FOR_IN
26661: IFFALSE 26697
// if GetTech ( i , side ) <> state_researched then
26663: LD_VAR 0 4
26667: PPUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL_OW 321
26677: PUSH
26678: LD_INT 2
26680: NONEQUAL
26681: IFFALSE 26695
// begin result := false ;
26683: LD_ADDR_VAR 0 3
26687: PUSH
26688: LD_INT 0
26690: ST_TO_ADDR
// exit ;
26691: POP
26692: POP
26693: GO 26699
// end ;
26695: GO 26660
26697: POP
26698: POP
// end ;
26699: LD_VAR 0 3
26703: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26704: LD_INT 0
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26719: LD_VAR 0 1
26723: NOT
26724: PUSH
26725: LD_VAR 0 1
26729: PPUSH
26730: CALL_OW 257
26734: PUSH
26735: LD_INT 9
26737: NONEQUAL
26738: OR
26739: IFFALSE 26743
// exit ;
26741: GO 27316
// side := GetSide ( unit ) ;
26743: LD_ADDR_VAR 0 9
26747: PUSH
26748: LD_VAR 0 1
26752: PPUSH
26753: CALL_OW 255
26757: ST_TO_ADDR
// tech_space := tech_spacanom ;
26758: LD_ADDR_VAR 0 12
26762: PUSH
26763: LD_INT 29
26765: ST_TO_ADDR
// tech_time := tech_taurad ;
26766: LD_ADDR_VAR 0 13
26770: PUSH
26771: LD_INT 28
26773: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26774: LD_ADDR_VAR 0 11
26778: PUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 310
26788: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26789: LD_VAR 0 11
26793: PPUSH
26794: CALL_OW 247
26798: PUSH
26799: LD_INT 2
26801: EQUAL
26802: IFFALSE 26806
// exit ;
26804: GO 27316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26806: LD_ADDR_VAR 0 8
26810: PUSH
26811: LD_INT 81
26813: PUSH
26814: LD_VAR 0 9
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 3
26825: PUSH
26826: LD_INT 21
26828: PUSH
26829: LD_INT 3
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PPUSH
26844: CALL_OW 69
26848: ST_TO_ADDR
// if not tmp then
26849: LD_VAR 0 8
26853: NOT
26854: IFFALSE 26858
// exit ;
26856: GO 27316
// if in_unit then
26858: LD_VAR 0 11
26862: IFFALSE 26886
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26864: LD_ADDR_VAR 0 10
26868: PUSH
26869: LD_VAR 0 8
26873: PPUSH
26874: LD_VAR 0 11
26878: PPUSH
26879: CALL_OW 74
26883: ST_TO_ADDR
26884: GO 26906
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26886: LD_ADDR_VAR 0 10
26890: PUSH
26891: LD_VAR 0 8
26895: PPUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 74
26905: ST_TO_ADDR
// if not enemy then
26906: LD_VAR 0 10
26910: NOT
26911: IFFALSE 26915
// exit ;
26913: GO 27316
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26915: LD_VAR 0 11
26919: PUSH
26920: LD_VAR 0 11
26924: PPUSH
26925: LD_VAR 0 10
26929: PPUSH
26930: CALL_OW 296
26934: PUSH
26935: LD_INT 13
26937: GREATER
26938: AND
26939: PUSH
26940: LD_VAR 0 1
26944: PPUSH
26945: LD_VAR 0 10
26949: PPUSH
26950: CALL_OW 296
26954: PUSH
26955: LD_INT 12
26957: GREATER
26958: OR
26959: IFFALSE 26963
// exit ;
26961: GO 27316
// missile := [ 1 ] ;
26963: LD_ADDR_VAR 0 14
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26974: LD_VAR 0 9
26978: PPUSH
26979: LD_VAR 0 12
26983: PPUSH
26984: CALL_OW 325
26988: IFFALSE 27017
// missile := Replace ( missile , missile + 1 , 2 ) ;
26990: LD_ADDR_VAR 0 14
26994: PUSH
26995: LD_VAR 0 14
26999: PPUSH
27000: LD_VAR 0 14
27004: PUSH
27005: LD_INT 1
27007: PLUS
27008: PPUSH
27009: LD_INT 2
27011: PPUSH
27012: CALL_OW 1
27016: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27017: LD_VAR 0 9
27021: PPUSH
27022: LD_VAR 0 13
27026: PPUSH
27027: CALL_OW 325
27031: PUSH
27032: LD_VAR 0 10
27036: PPUSH
27037: CALL_OW 255
27041: PPUSH
27042: LD_VAR 0 13
27046: PPUSH
27047: CALL_OW 325
27051: NOT
27052: AND
27053: IFFALSE 27082
// missile := Replace ( missile , missile + 1 , 3 ) ;
27055: LD_ADDR_VAR 0 14
27059: PUSH
27060: LD_VAR 0 14
27064: PPUSH
27065: LD_VAR 0 14
27069: PUSH
27070: LD_INT 1
27072: PLUS
27073: PPUSH
27074: LD_INT 3
27076: PPUSH
27077: CALL_OW 1
27081: ST_TO_ADDR
// if missile < 2 then
27082: LD_VAR 0 14
27086: PUSH
27087: LD_INT 2
27089: LESS
27090: IFFALSE 27094
// exit ;
27092: GO 27316
// x := GetX ( enemy ) ;
27094: LD_ADDR_VAR 0 4
27098: PUSH
27099: LD_VAR 0 10
27103: PPUSH
27104: CALL_OW 250
27108: ST_TO_ADDR
// y := GetY ( enemy ) ;
27109: LD_ADDR_VAR 0 5
27113: PUSH
27114: LD_VAR 0 10
27118: PPUSH
27119: CALL_OW 251
27123: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27124: LD_ADDR_VAR 0 6
27128: PUSH
27129: LD_VAR 0 4
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PPUSH
27138: LD_INT 1
27140: PPUSH
27141: CALL_OW 12
27145: PLUS
27146: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27147: LD_ADDR_VAR 0 7
27151: PUSH
27152: LD_VAR 0 5
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PPUSH
27161: LD_INT 1
27163: PPUSH
27164: CALL_OW 12
27168: PLUS
27169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27170: LD_VAR 0 6
27174: PPUSH
27175: LD_VAR 0 7
27179: PPUSH
27180: CALL_OW 488
27184: NOT
27185: IFFALSE 27207
// begin _x := x ;
27187: LD_ADDR_VAR 0 6
27191: PUSH
27192: LD_VAR 0 4
27196: ST_TO_ADDR
// _y := y ;
27197: LD_ADDR_VAR 0 7
27201: PUSH
27202: LD_VAR 0 5
27206: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27207: LD_ADDR_VAR 0 3
27211: PUSH
27212: LD_INT 1
27214: PPUSH
27215: LD_VAR 0 14
27219: PPUSH
27220: CALL_OW 12
27224: ST_TO_ADDR
// case i of 1 :
27225: LD_VAR 0 3
27229: PUSH
27230: LD_INT 1
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27255
27238: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27239: LD_VAR 0 1
27243: PPUSH
27244: LD_VAR 0 10
27248: PPUSH
27249: CALL_OW 115
27253: GO 27316
27255: LD_INT 2
27257: DOUBLE
27258: EQUAL
27259: IFTRUE 27263
27261: GO 27285
27263: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27264: LD_VAR 0 1
27268: PPUSH
27269: LD_VAR 0 6
27273: PPUSH
27274: LD_VAR 0 7
27278: PPUSH
27279: CALL_OW 153
27283: GO 27316
27285: LD_INT 3
27287: DOUBLE
27288: EQUAL
27289: IFTRUE 27293
27291: GO 27315
27293: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27294: LD_VAR 0 1
27298: PPUSH
27299: LD_VAR 0 6
27303: PPUSH
27304: LD_VAR 0 7
27308: PPUSH
27309: CALL_OW 154
27313: GO 27316
27315: POP
// end ;
27316: LD_VAR 0 2
27320: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27321: LD_INT 0
27323: PPUSH
27324: PPUSH
27325: PPUSH
27326: PPUSH
27327: PPUSH
27328: PPUSH
// if not unit or not building then
27329: LD_VAR 0 1
27333: NOT
27334: PUSH
27335: LD_VAR 0 2
27339: NOT
27340: OR
27341: IFFALSE 27345
// exit ;
27343: GO 27503
// x := GetX ( building ) ;
27345: LD_ADDR_VAR 0 5
27349: PUSH
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 250
27359: ST_TO_ADDR
// y := GetY ( building ) ;
27360: LD_ADDR_VAR 0 6
27364: PUSH
27365: LD_VAR 0 2
27369: PPUSH
27370: CALL_OW 251
27374: ST_TO_ADDR
// for i = 0 to 5 do
27375: LD_ADDR_VAR 0 4
27379: PUSH
27380: DOUBLE
27381: LD_INT 0
27383: DEC
27384: ST_TO_ADDR
27385: LD_INT 5
27387: PUSH
27388: FOR_TO
27389: IFFALSE 27501
// begin _x := ShiftX ( x , i , 3 ) ;
27391: LD_ADDR_VAR 0 7
27395: PUSH
27396: LD_VAR 0 5
27400: PPUSH
27401: LD_VAR 0 4
27405: PPUSH
27406: LD_INT 3
27408: PPUSH
27409: CALL_OW 272
27413: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27414: LD_ADDR_VAR 0 8
27418: PUSH
27419: LD_VAR 0 6
27423: PPUSH
27424: LD_VAR 0 4
27428: PPUSH
27429: LD_INT 3
27431: PPUSH
27432: CALL_OW 273
27436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27437: LD_VAR 0 7
27441: PPUSH
27442: LD_VAR 0 8
27446: PPUSH
27447: CALL_OW 488
27451: NOT
27452: IFFALSE 27456
// continue ;
27454: GO 27388
// if HexInfo ( _x , _y ) = 0 then
27456: LD_VAR 0 7
27460: PPUSH
27461: LD_VAR 0 8
27465: PPUSH
27466: CALL_OW 428
27470: PUSH
27471: LD_INT 0
27473: EQUAL
27474: IFFALSE 27499
// begin ComMoveXY ( unit , _x , _y ) ;
27476: LD_VAR 0 1
27480: PPUSH
27481: LD_VAR 0 7
27485: PPUSH
27486: LD_VAR 0 8
27490: PPUSH
27491: CALL_OW 111
// exit ;
27495: POP
27496: POP
27497: GO 27503
// end ; end ;
27499: GO 27388
27501: POP
27502: POP
// end ;
27503: LD_VAR 0 3
27507: RET
// export function ScanBase ( side , base_area ) ; begin
27508: LD_INT 0
27510: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27511: LD_ADDR_VAR 0 3
27515: PUSH
27516: LD_VAR 0 2
27520: PPUSH
27521: LD_INT 81
27523: PUSH
27524: LD_VAR 0 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PPUSH
27533: CALL_OW 70
27537: ST_TO_ADDR
// end ;
27538: LD_VAR 0 3
27542: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27543: LD_INT 0
27545: PPUSH
27546: PPUSH
27547: PPUSH
27548: PPUSH
// result := false ;
27549: LD_ADDR_VAR 0 2
27553: PUSH
27554: LD_INT 0
27556: ST_TO_ADDR
// side := GetSide ( unit ) ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: CALL_OW 255
27571: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27572: LD_ADDR_VAR 0 4
27576: PUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 248
27586: ST_TO_ADDR
// case nat of 1 :
27587: LD_VAR 0 4
27591: PUSH
27592: LD_INT 1
27594: DOUBLE
27595: EQUAL
27596: IFTRUE 27600
27598: GO 27611
27600: POP
// tech := tech_lassight ; 2 :
27601: LD_ADDR_VAR 0 5
27605: PUSH
27606: LD_INT 12
27608: ST_TO_ADDR
27609: GO 27650
27611: LD_INT 2
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27619
27617: GO 27630
27619: POP
// tech := tech_mortar ; 3 :
27620: LD_ADDR_VAR 0 5
27624: PUSH
27625: LD_INT 41
27627: ST_TO_ADDR
27628: GO 27650
27630: LD_INT 3
27632: DOUBLE
27633: EQUAL
27634: IFTRUE 27638
27636: GO 27649
27638: POP
// tech := tech_bazooka ; end ;
27639: LD_ADDR_VAR 0 5
27643: PUSH
27644: LD_INT 44
27646: ST_TO_ADDR
27647: GO 27650
27649: POP
// if Researched ( side , tech ) then
27650: LD_VAR 0 3
27654: PPUSH
27655: LD_VAR 0 5
27659: PPUSH
27660: CALL_OW 325
27664: IFFALSE 27691
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27666: LD_ADDR_VAR 0 2
27670: PUSH
27671: LD_INT 5
27673: PUSH
27674: LD_INT 8
27676: PUSH
27677: LD_INT 9
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: PUSH
27685: LD_VAR 0 4
27689: ARRAY
27690: ST_TO_ADDR
// end ;
27691: LD_VAR 0 2
27695: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27696: LD_INT 0
27698: PPUSH
27699: PPUSH
27700: PPUSH
// if not mines then
27701: LD_VAR 0 2
27705: NOT
27706: IFFALSE 27710
// exit ;
27708: GO 27854
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27710: LD_ADDR_VAR 0 5
27714: PUSH
27715: LD_INT 81
27717: PUSH
27718: LD_VAR 0 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 3
27729: PUSH
27730: LD_INT 21
27732: PUSH
27733: LD_INT 3
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PPUSH
27748: CALL_OW 69
27752: ST_TO_ADDR
// for i in mines do
27753: LD_ADDR_VAR 0 4
27757: PUSH
27758: LD_VAR 0 2
27762: PUSH
27763: FOR_IN
27764: IFFALSE 27852
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27766: LD_VAR 0 4
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PPUSH
27775: LD_VAR 0 4
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PPUSH
27784: CALL_OW 458
27788: NOT
27789: IFFALSE 27793
// continue ;
27791: GO 27763
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27793: LD_VAR 0 4
27797: PUSH
27798: LD_INT 1
27800: ARRAY
27801: PPUSH
27802: LD_VAR 0 4
27806: PUSH
27807: LD_INT 2
27809: ARRAY
27810: PPUSH
27811: CALL_OW 428
27815: PUSH
27816: LD_VAR 0 5
27820: IN
27821: IFFALSE 27850
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27823: LD_VAR 0 4
27827: PUSH
27828: LD_INT 1
27830: ARRAY
27831: PPUSH
27832: LD_VAR 0 4
27836: PUSH
27837: LD_INT 2
27839: ARRAY
27840: PPUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL_OW 456
// end ;
27850: GO 27763
27852: POP
27853: POP
// end ;
27854: LD_VAR 0 3
27858: RET
// export function Count ( array ) ; begin
27859: LD_INT 0
27861: PPUSH
// result := array + 0 ;
27862: LD_ADDR_VAR 0 2
27866: PUSH
27867: LD_VAR 0 1
27871: PUSH
27872: LD_INT 0
27874: PLUS
27875: ST_TO_ADDR
// end ;
27876: LD_VAR 0 2
27880: RET
// export function IsEmpty ( building ) ; begin
27881: LD_INT 0
27883: PPUSH
// if not building then
27884: LD_VAR 0 1
27888: NOT
27889: IFFALSE 27893
// exit ;
27891: GO 27936
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27893: LD_ADDR_VAR 0 2
27897: PUSH
27898: LD_VAR 0 1
27902: PUSH
27903: LD_INT 22
27905: PUSH
27906: LD_VAR 0 1
27910: PPUSH
27911: CALL_OW 255
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 58
27922: PUSH
27923: EMPTY
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PPUSH
27930: CALL_OW 69
27934: IN
27935: ST_TO_ADDR
// end ;
27936: LD_VAR 0 2
27940: RET
// export function IsNotFull ( building ) ; var places ; begin
27941: LD_INT 0
27943: PPUSH
27944: PPUSH
// if not building then
27945: LD_VAR 0 1
27949: NOT
27950: IFFALSE 27954
// exit ;
27952: GO 27982
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27954: LD_ADDR_VAR 0 2
27958: PUSH
27959: LD_VAR 0 1
27963: PPUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 62
27969: PUSH
27970: EMPTY
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 72
27981: ST_TO_ADDR
// end ;
27982: LD_VAR 0 2
27986: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27987: LD_INT 0
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
// tmp := [ ] ;
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: EMPTY
27999: ST_TO_ADDR
// list := [ ] ;
28000: LD_ADDR_VAR 0 5
28004: PUSH
28005: EMPTY
28006: ST_TO_ADDR
// for i = 16 to 25 do
28007: LD_ADDR_VAR 0 4
28011: PUSH
28012: DOUBLE
28013: LD_INT 16
28015: DEC
28016: ST_TO_ADDR
28017: LD_INT 25
28019: PUSH
28020: FOR_TO
28021: IFFALSE 28094
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_VAR 0 3
28032: PUSH
28033: LD_INT 22
28035: PUSH
28036: LD_VAR 0 1
28040: PPUSH
28041: CALL_OW 255
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 91
28052: PUSH
28053: LD_VAR 0 1
28057: PUSH
28058: LD_INT 6
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 30
28068: PUSH
28069: LD_VAR 0 4
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: ADD
28091: ST_TO_ADDR
28092: GO 28020
28094: POP
28095: POP
// for i = 1 to tmp do
28096: LD_ADDR_VAR 0 4
28100: PUSH
28101: DOUBLE
28102: LD_INT 1
28104: DEC
28105: ST_TO_ADDR
28106: LD_VAR 0 3
28110: PUSH
28111: FOR_TO
28112: IFFALSE 28200
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28114: LD_ADDR_VAR 0 5
28118: PUSH
28119: LD_VAR 0 5
28123: PUSH
28124: LD_VAR 0 3
28128: PUSH
28129: LD_VAR 0 4
28133: ARRAY
28134: PPUSH
28135: CALL_OW 266
28139: PUSH
28140: LD_VAR 0 3
28144: PUSH
28145: LD_VAR 0 4
28149: ARRAY
28150: PPUSH
28151: CALL_OW 250
28155: PUSH
28156: LD_VAR 0 3
28160: PUSH
28161: LD_VAR 0 4
28165: ARRAY
28166: PPUSH
28167: CALL_OW 251
28171: PUSH
28172: LD_VAR 0 3
28176: PUSH
28177: LD_VAR 0 4
28181: ARRAY
28182: PPUSH
28183: CALL_OW 254
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: ADD
28197: ST_TO_ADDR
28198: GO 28111
28200: POP
28201: POP
// result := list ;
28202: LD_ADDR_VAR 0 2
28206: PUSH
28207: LD_VAR 0 5
28211: ST_TO_ADDR
// end ;
28212: LD_VAR 0 2
28216: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28217: LD_INT 0
28219: PPUSH
28220: PPUSH
28221: PPUSH
28222: PPUSH
28223: PPUSH
28224: PPUSH
28225: PPUSH
// if not factory then
28226: LD_VAR 0 1
28230: NOT
28231: IFFALSE 28235
// exit ;
28233: GO 28828
// if control = control_apeman then
28235: LD_VAR 0 4
28239: PUSH
28240: LD_INT 5
28242: EQUAL
28243: IFFALSE 28352
// begin tmp := UnitsInside ( factory ) ;
28245: LD_ADDR_VAR 0 8
28249: PUSH
28250: LD_VAR 0 1
28254: PPUSH
28255: CALL_OW 313
28259: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28260: LD_VAR 0 8
28264: PPUSH
28265: LD_INT 25
28267: PUSH
28268: LD_INT 12
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PPUSH
28275: CALL_OW 72
28279: NOT
28280: IFFALSE 28290
// control := control_manual ;
28282: LD_ADDR_VAR 0 4
28286: PUSH
28287: LD_INT 1
28289: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28290: LD_ADDR_VAR 0 8
28294: PUSH
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL 27987 0 1
28304: ST_TO_ADDR
// if tmp then
28305: LD_VAR 0 8
28309: IFFALSE 28352
// begin for i in tmp do
28311: LD_ADDR_VAR 0 7
28315: PUSH
28316: LD_VAR 0 8
28320: PUSH
28321: FOR_IN
28322: IFFALSE 28350
// if i [ 1 ] = b_ext_radio then
28324: LD_VAR 0 7
28328: PUSH
28329: LD_INT 1
28331: ARRAY
28332: PUSH
28333: LD_INT 22
28335: EQUAL
28336: IFFALSE 28348
// begin control := control_remote ;
28338: LD_ADDR_VAR 0 4
28342: PUSH
28343: LD_INT 2
28345: ST_TO_ADDR
// break ;
28346: GO 28350
// end ;
28348: GO 28321
28350: POP
28351: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28352: LD_VAR 0 1
28356: PPUSH
28357: LD_VAR 0 2
28361: PPUSH
28362: LD_VAR 0 3
28366: PPUSH
28367: LD_VAR 0 4
28371: PPUSH
28372: LD_VAR 0 5
28376: PPUSH
28377: CALL_OW 448
28381: IFFALSE 28416
// begin result := [ chassis , engine , control , weapon ] ;
28383: LD_ADDR_VAR 0 6
28387: PUSH
28388: LD_VAR 0 2
28392: PUSH
28393: LD_VAR 0 3
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: LD_VAR 0 5
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: ST_TO_ADDR
// exit ;
28414: GO 28828
// end ; _chassis := AvailableChassisList ( factory ) ;
28416: LD_ADDR_VAR 0 9
28420: PUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 475
28430: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28431: LD_ADDR_VAR 0 11
28435: PUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 476
28445: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28446: LD_ADDR_VAR 0 12
28450: PUSH
28451: LD_VAR 0 1
28455: PPUSH
28456: CALL_OW 477
28460: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28461: LD_ADDR_VAR 0 10
28465: PUSH
28466: LD_VAR 0 1
28470: PPUSH
28471: CALL_OW 478
28475: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28476: LD_VAR 0 9
28480: NOT
28481: PUSH
28482: LD_VAR 0 11
28486: NOT
28487: OR
28488: PUSH
28489: LD_VAR 0 12
28493: NOT
28494: OR
28495: PUSH
28496: LD_VAR 0 10
28500: NOT
28501: OR
28502: IFFALSE 28537
// begin result := [ chassis , engine , control , weapon ] ;
28504: LD_ADDR_VAR 0 6
28508: PUSH
28509: LD_VAR 0 2
28513: PUSH
28514: LD_VAR 0 3
28518: PUSH
28519: LD_VAR 0 4
28523: PUSH
28524: LD_VAR 0 5
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// exit ;
28535: GO 28828
// end ; if not chassis in _chassis then
28537: LD_VAR 0 2
28541: PUSH
28542: LD_VAR 0 9
28546: IN
28547: NOT
28548: IFFALSE 28574
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28550: LD_ADDR_VAR 0 2
28554: PUSH
28555: LD_VAR 0 9
28559: PUSH
28560: LD_INT 1
28562: PPUSH
28563: LD_VAR 0 9
28567: PPUSH
28568: CALL_OW 12
28572: ARRAY
28573: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28574: LD_VAR 0 2
28578: PPUSH
28579: LD_VAR 0 3
28583: PPUSH
28584: CALL 28833 0 2
28588: NOT
28589: IFFALSE 28648
// repeat engine := _engine [ 1 ] ;
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: LD_VAR 0 11
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28605: LD_ADDR_VAR 0 11
28609: PUSH
28610: LD_VAR 0 11
28614: PPUSH
28615: LD_INT 1
28617: PPUSH
28618: CALL_OW 3
28622: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28623: LD_VAR 0 2
28627: PPUSH
28628: LD_VAR 0 3
28632: PPUSH
28633: CALL 28833 0 2
28637: PUSH
28638: LD_VAR 0 11
28642: PUSH
28643: EMPTY
28644: EQUAL
28645: OR
28646: IFFALSE 28591
// if not control in _control then
28648: LD_VAR 0 4
28652: PUSH
28653: LD_VAR 0 12
28657: IN
28658: NOT
28659: IFFALSE 28685
// control := _control [ rand ( 1 , _control ) ] ;
28661: LD_ADDR_VAR 0 4
28665: PUSH
28666: LD_VAR 0 12
28670: PUSH
28671: LD_INT 1
28673: PPUSH
28674: LD_VAR 0 12
28678: PPUSH
28679: CALL_OW 12
28683: ARRAY
28684: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28685: LD_VAR 0 2
28689: PPUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: CALL 29053 0 2
28699: NOT
28700: IFFALSE 28759
// repeat weapon := _weapon [ 1 ] ;
28702: LD_ADDR_VAR 0 5
28706: PUSH
28707: LD_VAR 0 10
28711: PUSH
28712: LD_INT 1
28714: ARRAY
28715: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28716: LD_ADDR_VAR 0 10
28720: PUSH
28721: LD_VAR 0 10
28725: PPUSH
28726: LD_INT 1
28728: PPUSH
28729: CALL_OW 3
28733: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28734: LD_VAR 0 2
28738: PPUSH
28739: LD_VAR 0 5
28743: PPUSH
28744: CALL 29053 0 2
28748: PUSH
28749: LD_VAR 0 10
28753: PUSH
28754: EMPTY
28755: EQUAL
28756: OR
28757: IFFALSE 28702
// result := [ ] ;
28759: LD_ADDR_VAR 0 6
28763: PUSH
28764: EMPTY
28765: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28766: LD_VAR 0 1
28770: PPUSH
28771: LD_VAR 0 2
28775: PPUSH
28776: LD_VAR 0 3
28780: PPUSH
28781: LD_VAR 0 4
28785: PPUSH
28786: LD_VAR 0 5
28790: PPUSH
28791: CALL_OW 448
28795: IFFALSE 28828
// result := [ chassis , engine , control , weapon ] ;
28797: LD_ADDR_VAR 0 6
28801: PUSH
28802: LD_VAR 0 2
28806: PUSH
28807: LD_VAR 0 3
28811: PUSH
28812: LD_VAR 0 4
28816: PUSH
28817: LD_VAR 0 5
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// end ;
28828: LD_VAR 0 6
28832: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28833: LD_INT 0
28835: PPUSH
// if not chassis or not engine then
28836: LD_VAR 0 1
28840: NOT
28841: PUSH
28842: LD_VAR 0 2
28846: NOT
28847: OR
28848: IFFALSE 28852
// exit ;
28850: GO 29048
// case engine of engine_solar :
28852: LD_VAR 0 2
28856: PUSH
28857: LD_INT 2
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 28903
28865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 11
28873: PUSH
28874: LD_INT 12
28876: PUSH
28877: LD_INT 13
28879: PUSH
28880: LD_INT 14
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 2
28888: PUSH
28889: LD_INT 3
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: ST_TO_ADDR
28901: GO 29032
28903: LD_INT 1
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28973
28911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_INT 11
28919: PUSH
28920: LD_INT 12
28922: PUSH
28923: LD_INT 13
28925: PUSH
28926: LD_INT 14
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: LD_INT 4
28940: PUSH
28941: LD_INT 5
28943: PUSH
28944: LD_INT 21
28946: PUSH
28947: LD_INT 23
28949: PUSH
28950: LD_INT 22
28952: PUSH
28953: LD_INT 24
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
28971: GO 29032
28973: LD_INT 3
28975: DOUBLE
28976: EQUAL
28977: IFTRUE 28981
28979: GO 29031
28981: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28982: LD_ADDR_VAR 0 3
28986: PUSH
28987: LD_INT 13
28989: PUSH
28990: LD_INT 14
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 3
28998: PUSH
28999: LD_INT 4
29001: PUSH
29002: LD_INT 5
29004: PUSH
29005: LD_INT 21
29007: PUSH
29008: LD_INT 22
29010: PUSH
29011: LD_INT 23
29013: PUSH
29014: LD_INT 24
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: ST_TO_ADDR
29029: GO 29032
29031: POP
// result := ( chassis in result ) ;
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_VAR 0 1
29041: PUSH
29042: LD_VAR 0 3
29046: IN
29047: ST_TO_ADDR
// end ;
29048: LD_VAR 0 3
29052: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29053: LD_INT 0
29055: PPUSH
// if not chassis or not weapon then
29056: LD_VAR 0 1
29060: NOT
29061: PUSH
29062: LD_VAR 0 2
29066: NOT
29067: OR
29068: IFFALSE 29072
// exit ;
29070: GO 30132
// case weapon of us_machine_gun :
29072: LD_VAR 0 2
29076: PUSH
29077: LD_INT 2
29079: DOUBLE
29080: EQUAL
29081: IFTRUE 29085
29083: GO 29115
29085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: LD_INT 4
29102: PUSH
29103: LD_INT 5
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: ST_TO_ADDR
29113: GO 30116
29115: LD_INT 3
29117: DOUBLE
29118: EQUAL
29119: IFTRUE 29123
29121: GO 29153
29123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29124: LD_ADDR_VAR 0 3
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 3
29137: PUSH
29138: LD_INT 4
29140: PUSH
29141: LD_INT 5
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: ST_TO_ADDR
29151: GO 30116
29153: LD_INT 11
29155: DOUBLE
29156: EQUAL
29157: IFTRUE 29161
29159: GO 29191
29161: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29162: LD_ADDR_VAR 0 3
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: LD_INT 2
29172: PUSH
29173: LD_INT 3
29175: PUSH
29176: LD_INT 4
29178: PUSH
29179: LD_INT 5
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: ST_TO_ADDR
29189: GO 30116
29191: LD_INT 4
29193: DOUBLE
29194: EQUAL
29195: IFTRUE 29199
29197: GO 29225
29199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29200: LD_ADDR_VAR 0 3
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: LD_INT 4
29213: PUSH
29214: LD_INT 5
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
29223: GO 30116
29225: LD_INT 5
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29259
29233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29234: LD_ADDR_VAR 0 3
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: LD_INT 3
29244: PUSH
29245: LD_INT 4
29247: PUSH
29248: LD_INT 5
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
29257: GO 30116
29259: LD_INT 9
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29293
29267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: LD_INT 4
29281: PUSH
29282: LD_INT 5
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 30116
29293: LD_INT 7
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29327
29301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: LD_INT 5
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 30116
29327: LD_INT 12
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29361
29335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: LD_INT 4
29349: PUSH
29350: LD_INT 5
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 30116
29361: LD_INT 13
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29395
29369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 4
29383: PUSH
29384: LD_INT 5
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
29393: GO 30116
29395: LD_INT 14
29397: DOUBLE
29398: EQUAL
29399: IFTRUE 29403
29401: GO 29421
29403: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29404: LD_ADDR_VAR 0 3
29408: PUSH
29409: LD_INT 4
29411: PUSH
29412: LD_INT 5
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: ST_TO_ADDR
29419: GO 30116
29421: LD_INT 6
29423: DOUBLE
29424: EQUAL
29425: IFTRUE 29429
29427: GO 29447
29429: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29430: LD_ADDR_VAR 0 3
29434: PUSH
29435: LD_INT 4
29437: PUSH
29438: LD_INT 5
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: ST_TO_ADDR
29445: GO 30116
29447: LD_INT 10
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29473
29455: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 4
29463: PUSH
29464: LD_INT 5
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: ST_TO_ADDR
29471: GO 30116
29473: LD_INT 22
29475: DOUBLE
29476: EQUAL
29477: IFTRUE 29481
29479: GO 29507
29481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29482: LD_ADDR_VAR 0 3
29486: PUSH
29487: LD_INT 11
29489: PUSH
29490: LD_INT 12
29492: PUSH
29493: LD_INT 13
29495: PUSH
29496: LD_INT 14
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
29505: GO 30116
29507: LD_INT 23
29509: DOUBLE
29510: EQUAL
29511: IFTRUE 29515
29513: GO 29541
29515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29516: LD_ADDR_VAR 0 3
29520: PUSH
29521: LD_INT 11
29523: PUSH
29524: LD_INT 12
29526: PUSH
29527: LD_INT 13
29529: PUSH
29530: LD_INT 14
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: ST_TO_ADDR
29539: GO 30116
29541: LD_INT 24
29543: DOUBLE
29544: EQUAL
29545: IFTRUE 29549
29547: GO 29575
29549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_INT 11
29557: PUSH
29558: LD_INT 12
29560: PUSH
29561: LD_INT 13
29563: PUSH
29564: LD_INT 14
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: ST_TO_ADDR
29573: GO 30116
29575: LD_INT 30
29577: DOUBLE
29578: EQUAL
29579: IFTRUE 29583
29581: GO 29609
29583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_INT 11
29591: PUSH
29592: LD_INT 12
29594: PUSH
29595: LD_INT 13
29597: PUSH
29598: LD_INT 14
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
29607: GO 30116
29609: LD_INT 25
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29635
29617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29618: LD_ADDR_VAR 0 3
29622: PUSH
29623: LD_INT 13
29625: PUSH
29626: LD_INT 14
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: ST_TO_ADDR
29633: GO 30116
29635: LD_INT 27
29637: DOUBLE
29638: EQUAL
29639: IFTRUE 29643
29641: GO 29661
29643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29644: LD_ADDR_VAR 0 3
29648: PUSH
29649: LD_INT 13
29651: PUSH
29652: LD_INT 14
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: ST_TO_ADDR
29659: GO 30116
29661: LD_INT 92
29663: DOUBLE
29664: EQUAL
29665: IFTRUE 29669
29667: GO 29695
29669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29670: LD_ADDR_VAR 0 3
29674: PUSH
29675: LD_INT 11
29677: PUSH
29678: LD_INT 12
29680: PUSH
29681: LD_INT 13
29683: PUSH
29684: LD_INT 14
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: ST_TO_ADDR
29693: GO 30116
29695: LD_INT 28
29697: DOUBLE
29698: EQUAL
29699: IFTRUE 29703
29701: GO 29721
29703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29704: LD_ADDR_VAR 0 3
29708: PUSH
29709: LD_INT 13
29711: PUSH
29712: LD_INT 14
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: ST_TO_ADDR
29719: GO 30116
29721: LD_INT 29
29723: DOUBLE
29724: EQUAL
29725: IFTRUE 29729
29727: GO 29747
29729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29730: LD_ADDR_VAR 0 3
29734: PUSH
29735: LD_INT 13
29737: PUSH
29738: LD_INT 14
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: ST_TO_ADDR
29745: GO 30116
29747: LD_INT 31
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29773
29755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29756: LD_ADDR_VAR 0 3
29760: PUSH
29761: LD_INT 13
29763: PUSH
29764: LD_INT 14
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: ST_TO_ADDR
29771: GO 30116
29773: LD_INT 26
29775: DOUBLE
29776: EQUAL
29777: IFTRUE 29781
29779: GO 29799
29781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: LD_INT 13
29789: PUSH
29790: LD_INT 14
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: ST_TO_ADDR
29797: GO 30116
29799: LD_INT 42
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 29833
29807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29808: LD_ADDR_VAR 0 3
29812: PUSH
29813: LD_INT 21
29815: PUSH
29816: LD_INT 22
29818: PUSH
29819: LD_INT 23
29821: PUSH
29822: LD_INT 24
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: ST_TO_ADDR
29831: GO 30116
29833: LD_INT 43
29835: DOUBLE
29836: EQUAL
29837: IFTRUE 29841
29839: GO 29867
29841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29842: LD_ADDR_VAR 0 3
29846: PUSH
29847: LD_INT 21
29849: PUSH
29850: LD_INT 22
29852: PUSH
29853: LD_INT 23
29855: PUSH
29856: LD_INT 24
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: ST_TO_ADDR
29865: GO 30116
29867: LD_INT 44
29869: DOUBLE
29870: EQUAL
29871: IFTRUE 29875
29873: GO 29901
29875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29876: LD_ADDR_VAR 0 3
29880: PUSH
29881: LD_INT 21
29883: PUSH
29884: LD_INT 22
29886: PUSH
29887: LD_INT 23
29889: PUSH
29890: LD_INT 24
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: ST_TO_ADDR
29899: GO 30116
29901: LD_INT 45
29903: DOUBLE
29904: EQUAL
29905: IFTRUE 29909
29907: GO 29935
29909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29910: LD_ADDR_VAR 0 3
29914: PUSH
29915: LD_INT 21
29917: PUSH
29918: LD_INT 22
29920: PUSH
29921: LD_INT 23
29923: PUSH
29924: LD_INT 24
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: ST_TO_ADDR
29933: GO 30116
29935: LD_INT 49
29937: DOUBLE
29938: EQUAL
29939: IFTRUE 29943
29941: GO 29969
29943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29944: LD_ADDR_VAR 0 3
29948: PUSH
29949: LD_INT 21
29951: PUSH
29952: LD_INT 22
29954: PUSH
29955: LD_INT 23
29957: PUSH
29958: LD_INT 24
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
29967: GO 30116
29969: LD_INT 51
29971: DOUBLE
29972: EQUAL
29973: IFTRUE 29977
29975: GO 30003
29977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29978: LD_ADDR_VAR 0 3
29982: PUSH
29983: LD_INT 21
29985: PUSH
29986: LD_INT 22
29988: PUSH
29989: LD_INT 23
29991: PUSH
29992: LD_INT 24
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: ST_TO_ADDR
30001: GO 30116
30003: LD_INT 52
30005: DOUBLE
30006: EQUAL
30007: IFTRUE 30011
30009: GO 30037
30011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30012: LD_ADDR_VAR 0 3
30016: PUSH
30017: LD_INT 21
30019: PUSH
30020: LD_INT 22
30022: PUSH
30023: LD_INT 23
30025: PUSH
30026: LD_INT 24
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: ST_TO_ADDR
30035: GO 30116
30037: LD_INT 53
30039: DOUBLE
30040: EQUAL
30041: IFTRUE 30045
30043: GO 30063
30045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30046: LD_ADDR_VAR 0 3
30050: PUSH
30051: LD_INT 23
30053: PUSH
30054: LD_INT 24
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: ST_TO_ADDR
30061: GO 30116
30063: LD_INT 46
30065: DOUBLE
30066: EQUAL
30067: IFTRUE 30071
30069: GO 30089
30071: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 23
30079: PUSH
30080: LD_INT 24
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: ST_TO_ADDR
30087: GO 30116
30089: LD_INT 47
30091: DOUBLE
30092: EQUAL
30093: IFTRUE 30097
30095: GO 30115
30097: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30098: LD_ADDR_VAR 0 3
30102: PUSH
30103: LD_INT 23
30105: PUSH
30106: LD_INT 24
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: ST_TO_ADDR
30113: GO 30116
30115: POP
// result := ( chassis in result ) ;
30116: LD_ADDR_VAR 0 3
30120: PUSH
30121: LD_VAR 0 1
30125: PUSH
30126: LD_VAR 0 3
30130: IN
30131: ST_TO_ADDR
// end ;
30132: LD_VAR 0 3
30136: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
// result := array ;
30146: LD_ADDR_VAR 0 5
30150: PUSH
30151: LD_VAR 0 1
30155: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30156: LD_VAR 0 1
30160: NOT
30161: PUSH
30162: LD_VAR 0 2
30166: NOT
30167: OR
30168: PUSH
30169: LD_VAR 0 3
30173: NOT
30174: OR
30175: PUSH
30176: LD_VAR 0 2
30180: PUSH
30181: LD_VAR 0 1
30185: GREATER
30186: OR
30187: PUSH
30188: LD_VAR 0 3
30192: PUSH
30193: LD_VAR 0 1
30197: GREATER
30198: OR
30199: IFFALSE 30203
// exit ;
30201: GO 30499
// if direction then
30203: LD_VAR 0 4
30207: IFFALSE 30271
// begin d := 1 ;
30209: LD_ADDR_VAR 0 9
30213: PUSH
30214: LD_INT 1
30216: ST_TO_ADDR
// if i_from > i_to then
30217: LD_VAR 0 2
30221: PUSH
30222: LD_VAR 0 3
30226: GREATER
30227: IFFALSE 30253
// length := ( array - i_from ) + i_to else
30229: LD_ADDR_VAR 0 11
30233: PUSH
30234: LD_VAR 0 1
30238: PUSH
30239: LD_VAR 0 2
30243: MINUS
30244: PUSH
30245: LD_VAR 0 3
30249: PLUS
30250: ST_TO_ADDR
30251: GO 30269
// length := i_to - i_from ;
30253: LD_ADDR_VAR 0 11
30257: PUSH
30258: LD_VAR 0 3
30262: PUSH
30263: LD_VAR 0 2
30267: MINUS
30268: ST_TO_ADDR
// end else
30269: GO 30332
// begin d := - 1 ;
30271: LD_ADDR_VAR 0 9
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: ST_TO_ADDR
// if i_from > i_to then
30280: LD_VAR 0 2
30284: PUSH
30285: LD_VAR 0 3
30289: GREATER
30290: IFFALSE 30310
// length := i_from - i_to else
30292: LD_ADDR_VAR 0 11
30296: PUSH
30297: LD_VAR 0 2
30301: PUSH
30302: LD_VAR 0 3
30306: MINUS
30307: ST_TO_ADDR
30308: GO 30332
// length := ( array - i_to ) + i_from ;
30310: LD_ADDR_VAR 0 11
30314: PUSH
30315: LD_VAR 0 1
30319: PUSH
30320: LD_VAR 0 3
30324: MINUS
30325: PUSH
30326: LD_VAR 0 2
30330: PLUS
30331: ST_TO_ADDR
// end ; if not length then
30332: LD_VAR 0 11
30336: NOT
30337: IFFALSE 30341
// exit ;
30339: GO 30499
// tmp := array ;
30341: LD_ADDR_VAR 0 10
30345: PUSH
30346: LD_VAR 0 1
30350: ST_TO_ADDR
// for i = 1 to length do
30351: LD_ADDR_VAR 0 6
30355: PUSH
30356: DOUBLE
30357: LD_INT 1
30359: DEC
30360: ST_TO_ADDR
30361: LD_VAR 0 11
30365: PUSH
30366: FOR_TO
30367: IFFALSE 30487
// begin for j = 1 to array do
30369: LD_ADDR_VAR 0 7
30373: PUSH
30374: DOUBLE
30375: LD_INT 1
30377: DEC
30378: ST_TO_ADDR
30379: LD_VAR 0 1
30383: PUSH
30384: FOR_TO
30385: IFFALSE 30473
// begin k := j + d ;
30387: LD_ADDR_VAR 0 8
30391: PUSH
30392: LD_VAR 0 7
30396: PUSH
30397: LD_VAR 0 9
30401: PLUS
30402: ST_TO_ADDR
// if k > array then
30403: LD_VAR 0 8
30407: PUSH
30408: LD_VAR 0 1
30412: GREATER
30413: IFFALSE 30423
// k := 1 ;
30415: LD_ADDR_VAR 0 8
30419: PUSH
30420: LD_INT 1
30422: ST_TO_ADDR
// if not k then
30423: LD_VAR 0 8
30427: NOT
30428: IFFALSE 30440
// k := array ;
30430: LD_ADDR_VAR 0 8
30434: PUSH
30435: LD_VAR 0 1
30439: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30440: LD_ADDR_VAR 0 10
30444: PUSH
30445: LD_VAR 0 10
30449: PPUSH
30450: LD_VAR 0 8
30454: PPUSH
30455: LD_VAR 0 1
30459: PUSH
30460: LD_VAR 0 7
30464: ARRAY
30465: PPUSH
30466: CALL_OW 1
30470: ST_TO_ADDR
// end ;
30471: GO 30384
30473: POP
30474: POP
// array := tmp ;
30475: LD_ADDR_VAR 0 1
30479: PUSH
30480: LD_VAR 0 10
30484: ST_TO_ADDR
// end ;
30485: GO 30366
30487: POP
30488: POP
// result := array ;
30489: LD_ADDR_VAR 0 5
30493: PUSH
30494: LD_VAR 0 1
30498: ST_TO_ADDR
// end ;
30499: LD_VAR 0 5
30503: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30504: LD_INT 0
30506: PPUSH
30507: PPUSH
// result := 0 ;
30508: LD_ADDR_VAR 0 3
30512: PUSH
30513: LD_INT 0
30515: ST_TO_ADDR
// if not array or not value in array then
30516: LD_VAR 0 1
30520: NOT
30521: PUSH
30522: LD_VAR 0 2
30526: PUSH
30527: LD_VAR 0 1
30531: IN
30532: NOT
30533: OR
30534: IFFALSE 30538
// exit ;
30536: GO 30592
// for i = 1 to array do
30538: LD_ADDR_VAR 0 4
30542: PUSH
30543: DOUBLE
30544: LD_INT 1
30546: DEC
30547: ST_TO_ADDR
30548: LD_VAR 0 1
30552: PUSH
30553: FOR_TO
30554: IFFALSE 30590
// if value = array [ i ] then
30556: LD_VAR 0 2
30560: PUSH
30561: LD_VAR 0 1
30565: PUSH
30566: LD_VAR 0 4
30570: ARRAY
30571: EQUAL
30572: IFFALSE 30588
// begin result := i ;
30574: LD_ADDR_VAR 0 3
30578: PUSH
30579: LD_VAR 0 4
30583: ST_TO_ADDR
// exit ;
30584: POP
30585: POP
30586: GO 30592
// end ;
30588: GO 30553
30590: POP
30591: POP
// end ;
30592: LD_VAR 0 3
30596: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30597: LD_INT 0
30599: PPUSH
// vc_chassis := chassis ;
30600: LD_ADDR_OWVAR 37
30604: PUSH
30605: LD_VAR 0 1
30609: ST_TO_ADDR
// vc_engine := engine ;
30610: LD_ADDR_OWVAR 39
30614: PUSH
30615: LD_VAR 0 2
30619: ST_TO_ADDR
// vc_control := control ;
30620: LD_ADDR_OWVAR 38
30624: PUSH
30625: LD_VAR 0 3
30629: ST_TO_ADDR
// vc_weapon := weapon ;
30630: LD_ADDR_OWVAR 40
30634: PUSH
30635: LD_VAR 0 4
30639: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30640: LD_ADDR_OWVAR 41
30644: PUSH
30645: LD_VAR 0 5
30649: ST_TO_ADDR
// end ;
30650: LD_VAR 0 6
30654: RET
// export function WantPlant ( unit ) ; var task ; begin
30655: LD_INT 0
30657: PPUSH
30658: PPUSH
// result := false ;
30659: LD_ADDR_VAR 0 2
30663: PUSH
30664: LD_INT 0
30666: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30667: LD_ADDR_VAR 0 3
30671: PUSH
30672: LD_VAR 0 1
30676: PPUSH
30677: CALL_OW 437
30681: ST_TO_ADDR
// if task then
30682: LD_VAR 0 3
30686: IFFALSE 30714
// if task [ 1 ] [ 1 ] = p then
30688: LD_VAR 0 3
30692: PUSH
30693: LD_INT 1
30695: ARRAY
30696: PUSH
30697: LD_INT 1
30699: ARRAY
30700: PUSH
30701: LD_STRING p
30703: EQUAL
30704: IFFALSE 30714
// result := true ;
30706: LD_ADDR_VAR 0 2
30710: PUSH
30711: LD_INT 1
30713: ST_TO_ADDR
// end ;
30714: LD_VAR 0 2
30718: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30719: LD_INT 0
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
// if pos < 1 then
30725: LD_VAR 0 2
30729: PUSH
30730: LD_INT 1
30732: LESS
30733: IFFALSE 30737
// exit ;
30735: GO 31040
// if pos = 1 then
30737: LD_VAR 0 2
30741: PUSH
30742: LD_INT 1
30744: EQUAL
30745: IFFALSE 30778
// result := Replace ( arr , pos [ 1 ] , value ) else
30747: LD_ADDR_VAR 0 4
30751: PUSH
30752: LD_VAR 0 1
30756: PPUSH
30757: LD_VAR 0 2
30761: PUSH
30762: LD_INT 1
30764: ARRAY
30765: PPUSH
30766: LD_VAR 0 3
30770: PPUSH
30771: CALL_OW 1
30775: ST_TO_ADDR
30776: GO 31040
// begin tmp := arr ;
30778: LD_ADDR_VAR 0 6
30782: PUSH
30783: LD_VAR 0 1
30787: ST_TO_ADDR
// s_arr := [ tmp ] ;
30788: LD_ADDR_VAR 0 7
30792: PUSH
30793: LD_VAR 0 6
30797: PUSH
30798: EMPTY
30799: LIST
30800: ST_TO_ADDR
// for i = 1 to pos - 1 do
30801: LD_ADDR_VAR 0 5
30805: PUSH
30806: DOUBLE
30807: LD_INT 1
30809: DEC
30810: ST_TO_ADDR
30811: LD_VAR 0 2
30815: PUSH
30816: LD_INT 1
30818: MINUS
30819: PUSH
30820: FOR_TO
30821: IFFALSE 30866
// begin tmp := tmp [ pos [ i ] ] ;
30823: LD_ADDR_VAR 0 6
30827: PUSH
30828: LD_VAR 0 6
30832: PUSH
30833: LD_VAR 0 2
30837: PUSH
30838: LD_VAR 0 5
30842: ARRAY
30843: ARRAY
30844: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30845: LD_ADDR_VAR 0 7
30849: PUSH
30850: LD_VAR 0 7
30854: PUSH
30855: LD_VAR 0 6
30859: PUSH
30860: EMPTY
30861: LIST
30862: ADD
30863: ST_TO_ADDR
// end ;
30864: GO 30820
30866: POP
30867: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30868: LD_ADDR_VAR 0 6
30872: PUSH
30873: LD_VAR 0 6
30877: PPUSH
30878: LD_VAR 0 2
30882: PUSH
30883: LD_VAR 0 2
30887: ARRAY
30888: PPUSH
30889: LD_VAR 0 3
30893: PPUSH
30894: CALL_OW 1
30898: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30899: LD_ADDR_VAR 0 7
30903: PUSH
30904: LD_VAR 0 7
30908: PPUSH
30909: LD_VAR 0 7
30913: PPUSH
30914: LD_VAR 0 6
30918: PPUSH
30919: CALL_OW 1
30923: ST_TO_ADDR
// for i = s_arr downto 2 do
30924: LD_ADDR_VAR 0 5
30928: PUSH
30929: DOUBLE
30930: LD_VAR 0 7
30934: INC
30935: ST_TO_ADDR
30936: LD_INT 2
30938: PUSH
30939: FOR_DOWNTO
30940: IFFALSE 31024
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30942: LD_ADDR_VAR 0 6
30946: PUSH
30947: LD_VAR 0 7
30951: PUSH
30952: LD_VAR 0 5
30956: PUSH
30957: LD_INT 1
30959: MINUS
30960: ARRAY
30961: PPUSH
30962: LD_VAR 0 2
30966: PUSH
30967: LD_VAR 0 5
30971: PUSH
30972: LD_INT 1
30974: MINUS
30975: ARRAY
30976: PPUSH
30977: LD_VAR 0 7
30981: PUSH
30982: LD_VAR 0 5
30986: ARRAY
30987: PPUSH
30988: CALL_OW 1
30992: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30993: LD_ADDR_VAR 0 7
30997: PUSH
30998: LD_VAR 0 7
31002: PPUSH
31003: LD_VAR 0 5
31007: PUSH
31008: LD_INT 1
31010: MINUS
31011: PPUSH
31012: LD_VAR 0 6
31016: PPUSH
31017: CALL_OW 1
31021: ST_TO_ADDR
// end ;
31022: GO 30939
31024: POP
31025: POP
// result := s_arr [ 1 ] ;
31026: LD_ADDR_VAR 0 4
31030: PUSH
31031: LD_VAR 0 7
31035: PUSH
31036: LD_INT 1
31038: ARRAY
31039: ST_TO_ADDR
// end ; end ;
31040: LD_VAR 0 4
31044: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31045: LD_INT 0
31047: PPUSH
31048: PPUSH
// if not list then
31049: LD_VAR 0 1
31053: NOT
31054: IFFALSE 31058
// exit ;
31056: GO 31149
// i := list [ pos1 ] ;
31058: LD_ADDR_VAR 0 5
31062: PUSH
31063: LD_VAR 0 1
31067: PUSH
31068: LD_VAR 0 2
31072: ARRAY
31073: ST_TO_ADDR
// if not i then
31074: LD_VAR 0 5
31078: NOT
31079: IFFALSE 31083
// exit ;
31081: GO 31149
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31083: LD_ADDR_VAR 0 1
31087: PUSH
31088: LD_VAR 0 1
31092: PPUSH
31093: LD_VAR 0 2
31097: PPUSH
31098: LD_VAR 0 1
31102: PUSH
31103: LD_VAR 0 3
31107: ARRAY
31108: PPUSH
31109: CALL_OW 1
31113: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31114: LD_ADDR_VAR 0 1
31118: PUSH
31119: LD_VAR 0 1
31123: PPUSH
31124: LD_VAR 0 3
31128: PPUSH
31129: LD_VAR 0 5
31133: PPUSH
31134: CALL_OW 1
31138: ST_TO_ADDR
// result := list ;
31139: LD_ADDR_VAR 0 4
31143: PUSH
31144: LD_VAR 0 1
31148: ST_TO_ADDR
// end ;
31149: LD_VAR 0 4
31153: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31154: LD_INT 0
31156: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31157: LD_ADDR_VAR 0 5
31161: PUSH
31162: LD_VAR 0 1
31166: PPUSH
31167: CALL_OW 250
31171: PPUSH
31172: LD_VAR 0 1
31176: PPUSH
31177: CALL_OW 251
31181: PPUSH
31182: LD_VAR 0 2
31186: PPUSH
31187: LD_VAR 0 3
31191: PPUSH
31192: LD_VAR 0 4
31196: PPUSH
31197: CALL 31207 0 5
31201: ST_TO_ADDR
// end ;
31202: LD_VAR 0 5
31206: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31207: LD_INT 0
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
// if not list then
31213: LD_VAR 0 3
31217: NOT
31218: IFFALSE 31222
// exit ;
31220: GO 31610
// result := [ ] ;
31222: LD_ADDR_VAR 0 6
31226: PUSH
31227: EMPTY
31228: ST_TO_ADDR
// for i in list do
31229: LD_ADDR_VAR 0 7
31233: PUSH
31234: LD_VAR 0 3
31238: PUSH
31239: FOR_IN
31240: IFFALSE 31442
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31242: LD_ADDR_VAR 0 9
31246: PUSH
31247: LD_VAR 0 7
31251: PPUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: LD_VAR 0 2
31261: PPUSH
31262: CALL_OW 297
31266: ST_TO_ADDR
// if not result then
31267: LD_VAR 0 6
31271: NOT
31272: IFFALSE 31298
// result := [ [ i , tmp ] ] else
31274: LD_ADDR_VAR 0 6
31278: PUSH
31279: LD_VAR 0 7
31283: PUSH
31284: LD_VAR 0 9
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: EMPTY
31294: LIST
31295: ST_TO_ADDR
31296: GO 31440
// begin if result [ result ] [ 2 ] < tmp then
31298: LD_VAR 0 6
31302: PUSH
31303: LD_VAR 0 6
31307: ARRAY
31308: PUSH
31309: LD_INT 2
31311: ARRAY
31312: PUSH
31313: LD_VAR 0 9
31317: LESS
31318: IFFALSE 31360
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31320: LD_ADDR_VAR 0 6
31324: PUSH
31325: LD_VAR 0 6
31329: PPUSH
31330: LD_VAR 0 6
31334: PUSH
31335: LD_INT 1
31337: PLUS
31338: PPUSH
31339: LD_VAR 0 7
31343: PUSH
31344: LD_VAR 0 9
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PPUSH
31353: CALL_OW 2
31357: ST_TO_ADDR
31358: GO 31440
// for j = 1 to result do
31360: LD_ADDR_VAR 0 8
31364: PUSH
31365: DOUBLE
31366: LD_INT 1
31368: DEC
31369: ST_TO_ADDR
31370: LD_VAR 0 6
31374: PUSH
31375: FOR_TO
31376: IFFALSE 31438
// begin if tmp < result [ j ] [ 2 ] then
31378: LD_VAR 0 9
31382: PUSH
31383: LD_VAR 0 6
31387: PUSH
31388: LD_VAR 0 8
31392: ARRAY
31393: PUSH
31394: LD_INT 2
31396: ARRAY
31397: LESS
31398: IFFALSE 31436
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31400: LD_ADDR_VAR 0 6
31404: PUSH
31405: LD_VAR 0 6
31409: PPUSH
31410: LD_VAR 0 8
31414: PPUSH
31415: LD_VAR 0 7
31419: PUSH
31420: LD_VAR 0 9
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PPUSH
31429: CALL_OW 2
31433: ST_TO_ADDR
// break ;
31434: GO 31438
// end ; end ;
31436: GO 31375
31438: POP
31439: POP
// end ; end ;
31440: GO 31239
31442: POP
31443: POP
// if result and not asc then
31444: LD_VAR 0 6
31448: PUSH
31449: LD_VAR 0 4
31453: NOT
31454: AND
31455: IFFALSE 31530
// begin tmp := result ;
31457: LD_ADDR_VAR 0 9
31461: PUSH
31462: LD_VAR 0 6
31466: ST_TO_ADDR
// for i = tmp downto 1 do
31467: LD_ADDR_VAR 0 7
31471: PUSH
31472: DOUBLE
31473: LD_VAR 0 9
31477: INC
31478: ST_TO_ADDR
31479: LD_INT 1
31481: PUSH
31482: FOR_DOWNTO
31483: IFFALSE 31528
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31485: LD_ADDR_VAR 0 6
31489: PUSH
31490: LD_VAR 0 6
31494: PPUSH
31495: LD_VAR 0 9
31499: PUSH
31500: LD_VAR 0 7
31504: MINUS
31505: PUSH
31506: LD_INT 1
31508: PLUS
31509: PPUSH
31510: LD_VAR 0 9
31514: PUSH
31515: LD_VAR 0 7
31519: ARRAY
31520: PPUSH
31521: CALL_OW 1
31525: ST_TO_ADDR
31526: GO 31482
31528: POP
31529: POP
// end ; tmp := [ ] ;
31530: LD_ADDR_VAR 0 9
31534: PUSH
31535: EMPTY
31536: ST_TO_ADDR
// if mode then
31537: LD_VAR 0 5
31541: IFFALSE 31610
// begin for i = 1 to result do
31543: LD_ADDR_VAR 0 7
31547: PUSH
31548: DOUBLE
31549: LD_INT 1
31551: DEC
31552: ST_TO_ADDR
31553: LD_VAR 0 6
31557: PUSH
31558: FOR_TO
31559: IFFALSE 31598
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31561: LD_ADDR_VAR 0 9
31565: PUSH
31566: LD_VAR 0 9
31570: PPUSH
31571: LD_VAR 0 7
31575: PPUSH
31576: LD_VAR 0 6
31580: PUSH
31581: LD_VAR 0 7
31585: ARRAY
31586: PUSH
31587: LD_INT 1
31589: ARRAY
31590: PPUSH
31591: CALL_OW 1
31595: ST_TO_ADDR
31596: GO 31558
31598: POP
31599: POP
// result := tmp ;
31600: LD_ADDR_VAR 0 6
31604: PUSH
31605: LD_VAR 0 9
31609: ST_TO_ADDR
// end ; end ;
31610: LD_VAR 0 6
31614: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31615: LD_INT 0
31617: PPUSH
31618: PPUSH
31619: PPUSH
31620: PPUSH
31621: PPUSH
31622: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31623: LD_ADDR_VAR 0 5
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
// if not x or not y then
31645: LD_VAR 0 2
31649: NOT
31650: PUSH
31651: LD_VAR 0 3
31655: NOT
31656: OR
31657: IFFALSE 31661
// exit ;
31659: GO 33311
// if not range then
31661: LD_VAR 0 4
31665: NOT
31666: IFFALSE 31676
// range := 10 ;
31668: LD_ADDR_VAR 0 4
31672: PUSH
31673: LD_INT 10
31675: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31676: LD_ADDR_VAR 0 8
31680: PUSH
31681: LD_INT 81
31683: PUSH
31684: LD_VAR 0 1
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 92
31695: PUSH
31696: LD_VAR 0 2
31700: PUSH
31701: LD_VAR 0 3
31705: PUSH
31706: LD_VAR 0 4
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 3
31719: PUSH
31720: LD_INT 21
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: LIST
31738: PPUSH
31739: CALL_OW 69
31743: ST_TO_ADDR
// if not tmp then
31744: LD_VAR 0 8
31748: NOT
31749: IFFALSE 31753
// exit ;
31751: GO 33311
// for i in tmp do
31753: LD_ADDR_VAR 0 6
31757: PUSH
31758: LD_VAR 0 8
31762: PUSH
31763: FOR_IN
31764: IFFALSE 33286
// begin points := [ 0 , 0 , 0 ] ;
31766: LD_ADDR_VAR 0 9
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: ST_TO_ADDR
// bpoints := 1 ;
31785: LD_ADDR_VAR 0 10
31789: PUSH
31790: LD_INT 1
31792: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31793: LD_VAR 0 6
31797: PPUSH
31798: CALL_OW 247
31802: PUSH
31803: LD_INT 1
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 32389
31811: POP
// begin if GetClass ( i ) = 1 then
31812: LD_VAR 0 6
31816: PPUSH
31817: CALL_OW 257
31821: PUSH
31822: LD_INT 1
31824: EQUAL
31825: IFFALSE 31846
// points := [ 10 , 5 , 3 ] ;
31827: LD_ADDR_VAR 0 9
31831: PUSH
31832: LD_INT 10
31834: PUSH
31835: LD_INT 5
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31846: LD_VAR 0 6
31850: PPUSH
31851: CALL_OW 257
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 4
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: LIST
31869: IN
31870: IFFALSE 31891
// points := [ 3 , 2 , 1 ] ;
31872: LD_ADDR_VAR 0 9
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31891: LD_VAR 0 6
31895: PPUSH
31896: CALL_OW 257
31900: PUSH
31901: LD_INT 5
31903: EQUAL
31904: IFFALSE 31925
// points := [ 130 , 5 , 2 ] ;
31906: LD_ADDR_VAR 0 9
31910: PUSH
31911: LD_INT 130
31913: PUSH
31914: LD_INT 5
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31925: LD_VAR 0 6
31929: PPUSH
31930: CALL_OW 257
31934: PUSH
31935: LD_INT 8
31937: EQUAL
31938: IFFALSE 31959
// points := [ 35 , 35 , 30 ] ;
31940: LD_ADDR_VAR 0 9
31944: PUSH
31945: LD_INT 35
31947: PUSH
31948: LD_INT 35
31950: PUSH
31951: LD_INT 30
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31959: LD_VAR 0 6
31963: PPUSH
31964: CALL_OW 257
31968: PUSH
31969: LD_INT 9
31971: EQUAL
31972: IFFALSE 31993
// points := [ 20 , 55 , 40 ] ;
31974: LD_ADDR_VAR 0 9
31978: PUSH
31979: LD_INT 20
31981: PUSH
31982: LD_INT 55
31984: PUSH
31985: LD_INT 40
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31993: LD_VAR 0 6
31997: PPUSH
31998: CALL_OW 257
32002: PUSH
32003: LD_INT 12
32005: PUSH
32006: LD_INT 16
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: IN
32013: IFFALSE 32034
// points := [ 5 , 3 , 2 ] ;
32015: LD_ADDR_VAR 0 9
32019: PUSH
32020: LD_INT 5
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: LD_INT 2
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32034: LD_VAR 0 6
32038: PPUSH
32039: CALL_OW 257
32043: PUSH
32044: LD_INT 17
32046: EQUAL
32047: IFFALSE 32068
// points := [ 100 , 50 , 75 ] ;
32049: LD_ADDR_VAR 0 9
32053: PUSH
32054: LD_INT 100
32056: PUSH
32057: LD_INT 50
32059: PUSH
32060: LD_INT 75
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32068: LD_VAR 0 6
32072: PPUSH
32073: CALL_OW 257
32077: PUSH
32078: LD_INT 15
32080: EQUAL
32081: IFFALSE 32102
// points := [ 10 , 5 , 3 ] ;
32083: LD_ADDR_VAR 0 9
32087: PUSH
32088: LD_INT 10
32090: PUSH
32091: LD_INT 5
32093: PUSH
32094: LD_INT 3
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32102: LD_VAR 0 6
32106: PPUSH
32107: CALL_OW 257
32111: PUSH
32112: LD_INT 14
32114: EQUAL
32115: IFFALSE 32136
// points := [ 10 , 0 , 0 ] ;
32117: LD_ADDR_VAR 0 9
32121: PUSH
32122: LD_INT 10
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32136: LD_VAR 0 6
32140: PPUSH
32141: CALL_OW 257
32145: PUSH
32146: LD_INT 11
32148: EQUAL
32149: IFFALSE 32170
// points := [ 30 , 10 , 5 ] ;
32151: LD_ADDR_VAR 0 9
32155: PUSH
32156: LD_INT 30
32158: PUSH
32159: LD_INT 10
32161: PUSH
32162: LD_INT 5
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32170: LD_VAR 0 1
32174: PPUSH
32175: LD_INT 5
32177: PPUSH
32178: CALL_OW 321
32182: PUSH
32183: LD_INT 2
32185: EQUAL
32186: IFFALSE 32203
// bpoints := bpoints * 1.8 ;
32188: LD_ADDR_VAR 0 10
32192: PUSH
32193: LD_VAR 0 10
32197: PUSH
32198: LD_REAL  1.80000000000000E+0000
32201: MUL
32202: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32203: LD_VAR 0 6
32207: PPUSH
32208: CALL_OW 257
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: IN
32231: PUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: LD_INT 51
32239: PPUSH
32240: CALL_OW 321
32244: PUSH
32245: LD_INT 2
32247: EQUAL
32248: AND
32249: IFFALSE 32266
// bpoints := bpoints * 1.2 ;
32251: LD_ADDR_VAR 0 10
32255: PUSH
32256: LD_VAR 0 10
32260: PUSH
32261: LD_REAL  1.20000000000000E+0000
32264: MUL
32265: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32266: LD_VAR 0 6
32270: PPUSH
32271: CALL_OW 257
32275: PUSH
32276: LD_INT 5
32278: PUSH
32279: LD_INT 7
32281: PUSH
32282: LD_INT 9
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: IN
32290: PUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: LD_INT 52
32298: PPUSH
32299: CALL_OW 321
32303: PUSH
32304: LD_INT 2
32306: EQUAL
32307: AND
32308: IFFALSE 32325
// bpoints := bpoints * 1.5 ;
32310: LD_ADDR_VAR 0 10
32314: PUSH
32315: LD_VAR 0 10
32319: PUSH
32320: LD_REAL  1.50000000000000E+0000
32323: MUL
32324: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32325: LD_VAR 0 1
32329: PPUSH
32330: LD_INT 66
32332: PPUSH
32333: CALL_OW 321
32337: PUSH
32338: LD_INT 2
32340: EQUAL
32341: IFFALSE 32358
// bpoints := bpoints * 1.1 ;
32343: LD_ADDR_VAR 0 10
32347: PUSH
32348: LD_VAR 0 10
32352: PUSH
32353: LD_REAL  1.10000000000000E+0000
32356: MUL
32357: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32358: LD_ADDR_VAR 0 10
32362: PUSH
32363: LD_VAR 0 10
32367: PUSH
32368: LD_VAR 0 6
32372: PPUSH
32373: LD_INT 1
32375: PPUSH
32376: CALL_OW 259
32380: PUSH
32381: LD_REAL  1.15000000000000E+0000
32384: MUL
32385: MUL
32386: ST_TO_ADDR
// end ; unit_vehicle :
32387: GO 33215
32389: LD_INT 2
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 33203
32397: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32398: LD_VAR 0 6
32402: PPUSH
32403: CALL_OW 264
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 42
32413: PUSH
32414: LD_INT 24
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: IN
32422: IFFALSE 32443
// points := [ 25 , 5 , 3 ] ;
32424: LD_ADDR_VAR 0 9
32428: PUSH
32429: LD_INT 25
32431: PUSH
32432: LD_INT 5
32434: PUSH
32435: LD_INT 3
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32443: LD_VAR 0 6
32447: PPUSH
32448: CALL_OW 264
32452: PUSH
32453: LD_INT 4
32455: PUSH
32456: LD_INT 43
32458: PUSH
32459: LD_INT 25
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: IN
32467: IFFALSE 32488
// points := [ 40 , 15 , 5 ] ;
32469: LD_ADDR_VAR 0 9
32473: PUSH
32474: LD_INT 40
32476: PUSH
32477: LD_INT 15
32479: PUSH
32480: LD_INT 5
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32488: LD_VAR 0 6
32492: PPUSH
32493: CALL_OW 264
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: LD_INT 23
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: IN
32508: IFFALSE 32529
// points := [ 7 , 25 , 8 ] ;
32510: LD_ADDR_VAR 0 9
32514: PUSH
32515: LD_INT 7
32517: PUSH
32518: LD_INT 25
32520: PUSH
32521: LD_INT 8
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32529: LD_VAR 0 6
32533: PPUSH
32534: CALL_OW 264
32538: PUSH
32539: LD_INT 5
32541: PUSH
32542: LD_INT 27
32544: PUSH
32545: LD_INT 44
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: IN
32553: IFFALSE 32574
// points := [ 14 , 50 , 16 ] ;
32555: LD_ADDR_VAR 0 9
32559: PUSH
32560: LD_INT 14
32562: PUSH
32563: LD_INT 50
32565: PUSH
32566: LD_INT 16
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32574: LD_VAR 0 6
32578: PPUSH
32579: CALL_OW 264
32583: PUSH
32584: LD_INT 6
32586: PUSH
32587: LD_INT 46
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: IN
32594: IFFALSE 32615
// points := [ 32 , 120 , 70 ] ;
32596: LD_ADDR_VAR 0 9
32600: PUSH
32601: LD_INT 32
32603: PUSH
32604: LD_INT 120
32606: PUSH
32607: LD_INT 70
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32615: LD_VAR 0 6
32619: PPUSH
32620: CALL_OW 264
32624: PUSH
32625: LD_INT 7
32627: PUSH
32628: LD_INT 28
32630: PUSH
32631: LD_INT 45
32633: PUSH
32634: LD_INT 92
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: IN
32643: IFFALSE 32664
// points := [ 35 , 20 , 45 ] ;
32645: LD_ADDR_VAR 0 9
32649: PUSH
32650: LD_INT 35
32652: PUSH
32653: LD_INT 20
32655: PUSH
32656: LD_INT 45
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32664: LD_VAR 0 6
32668: PPUSH
32669: CALL_OW 264
32673: PUSH
32674: LD_INT 47
32676: PUSH
32677: EMPTY
32678: LIST
32679: IN
32680: IFFALSE 32701
// points := [ 67 , 45 , 75 ] ;
32682: LD_ADDR_VAR 0 9
32686: PUSH
32687: LD_INT 67
32689: PUSH
32690: LD_INT 45
32692: PUSH
32693: LD_INT 75
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32701: LD_VAR 0 6
32705: PPUSH
32706: CALL_OW 264
32710: PUSH
32711: LD_INT 26
32713: PUSH
32714: EMPTY
32715: LIST
32716: IN
32717: IFFALSE 32738
// points := [ 120 , 30 , 80 ] ;
32719: LD_ADDR_VAR 0 9
32723: PUSH
32724: LD_INT 120
32726: PUSH
32727: LD_INT 30
32729: PUSH
32730: LD_INT 80
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32738: LD_VAR 0 6
32742: PPUSH
32743: CALL_OW 264
32747: PUSH
32748: LD_INT 22
32750: PUSH
32751: EMPTY
32752: LIST
32753: IN
32754: IFFALSE 32775
// points := [ 40 , 1 , 1 ] ;
32756: LD_ADDR_VAR 0 9
32760: PUSH
32761: LD_INT 40
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32775: LD_VAR 0 6
32779: PPUSH
32780: CALL_OW 264
32784: PUSH
32785: LD_INT 29
32787: PUSH
32788: EMPTY
32789: LIST
32790: IN
32791: IFFALSE 32812
// points := [ 70 , 200 , 400 ] ;
32793: LD_ADDR_VAR 0 9
32797: PUSH
32798: LD_INT 70
32800: PUSH
32801: LD_INT 200
32803: PUSH
32804: LD_INT 400
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32812: LD_VAR 0 6
32816: PPUSH
32817: CALL_OW 264
32821: PUSH
32822: LD_INT 14
32824: PUSH
32825: LD_INT 53
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: IN
32832: IFFALSE 32853
// points := [ 40 , 10 , 20 ] ;
32834: LD_ADDR_VAR 0 9
32838: PUSH
32839: LD_INT 40
32841: PUSH
32842: LD_INT 10
32844: PUSH
32845: LD_INT 20
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32853: LD_VAR 0 6
32857: PPUSH
32858: CALL_OW 264
32862: PUSH
32863: LD_INT 9
32865: PUSH
32866: EMPTY
32867: LIST
32868: IN
32869: IFFALSE 32890
// points := [ 5 , 70 , 20 ] ;
32871: LD_ADDR_VAR 0 9
32875: PUSH
32876: LD_INT 5
32878: PUSH
32879: LD_INT 70
32881: PUSH
32882: LD_INT 20
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: LIST
32889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32890: LD_VAR 0 6
32894: PPUSH
32895: CALL_OW 264
32899: PUSH
32900: LD_INT 10
32902: PUSH
32903: EMPTY
32904: LIST
32905: IN
32906: IFFALSE 32927
// points := [ 35 , 110 , 70 ] ;
32908: LD_ADDR_VAR 0 9
32912: PUSH
32913: LD_INT 35
32915: PUSH
32916: LD_INT 110
32918: PUSH
32919: LD_INT 70
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32927: LD_VAR 0 6
32931: PPUSH
32932: CALL_OW 265
32936: PUSH
32937: LD_INT 25
32939: EQUAL
32940: IFFALSE 32961
// points := [ 80 , 65 , 100 ] ;
32942: LD_ADDR_VAR 0 9
32946: PUSH
32947: LD_INT 80
32949: PUSH
32950: LD_INT 65
32952: PUSH
32953: LD_INT 100
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: LIST
32960: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32961: LD_VAR 0 6
32965: PPUSH
32966: CALL_OW 263
32970: PUSH
32971: LD_INT 1
32973: EQUAL
32974: IFFALSE 33009
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32976: LD_ADDR_VAR 0 10
32980: PUSH
32981: LD_VAR 0 10
32985: PUSH
32986: LD_VAR 0 6
32990: PPUSH
32991: CALL_OW 311
32995: PPUSH
32996: LD_INT 3
32998: PPUSH
32999: CALL_OW 259
33003: PUSH
33004: LD_INT 4
33006: MUL
33007: MUL
33008: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33009: LD_VAR 0 6
33013: PPUSH
33014: CALL_OW 263
33018: PUSH
33019: LD_INT 2
33021: EQUAL
33022: IFFALSE 33073
// begin j := IsControledBy ( i ) ;
33024: LD_ADDR_VAR 0 7
33028: PUSH
33029: LD_VAR 0 6
33033: PPUSH
33034: CALL_OW 312
33038: ST_TO_ADDR
// if j then
33039: LD_VAR 0 7
33043: IFFALSE 33073
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33045: LD_ADDR_VAR 0 10
33049: PUSH
33050: LD_VAR 0 10
33054: PUSH
33055: LD_VAR 0 7
33059: PPUSH
33060: LD_INT 3
33062: PPUSH
33063: CALL_OW 259
33067: PUSH
33068: LD_INT 3
33070: MUL
33071: MUL
33072: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33073: LD_VAR 0 6
33077: PPUSH
33078: CALL_OW 264
33082: PUSH
33083: LD_INT 5
33085: PUSH
33086: LD_INT 6
33088: PUSH
33089: LD_INT 46
33091: PUSH
33092: LD_INT 44
33094: PUSH
33095: LD_INT 47
33097: PUSH
33098: LD_INT 45
33100: PUSH
33101: LD_INT 28
33103: PUSH
33104: LD_INT 7
33106: PUSH
33107: LD_INT 27
33109: PUSH
33110: LD_INT 29
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: IN
33125: PUSH
33126: LD_VAR 0 1
33130: PPUSH
33131: LD_INT 52
33133: PPUSH
33134: CALL_OW 321
33138: PUSH
33139: LD_INT 2
33141: EQUAL
33142: AND
33143: IFFALSE 33160
// bpoints := bpoints * 1.2 ;
33145: LD_ADDR_VAR 0 10
33149: PUSH
33150: LD_VAR 0 10
33154: PUSH
33155: LD_REAL  1.20000000000000E+0000
33158: MUL
33159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33160: LD_VAR 0 6
33164: PPUSH
33165: CALL_OW 264
33169: PUSH
33170: LD_INT 6
33172: PUSH
33173: LD_INT 46
33175: PUSH
33176: LD_INT 47
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: IN
33184: IFFALSE 33201
// bpoints := bpoints * 1.2 ;
33186: LD_ADDR_VAR 0 10
33190: PUSH
33191: LD_VAR 0 10
33195: PUSH
33196: LD_REAL  1.20000000000000E+0000
33199: MUL
33200: ST_TO_ADDR
// end ; unit_building :
33201: GO 33215
33203: LD_INT 3
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33214
33211: POP
// ; end ;
33212: GO 33215
33214: POP
// for j = 1 to 3 do
33215: LD_ADDR_VAR 0 7
33219: PUSH
33220: DOUBLE
33221: LD_INT 1
33223: DEC
33224: ST_TO_ADDR
33225: LD_INT 3
33227: PUSH
33228: FOR_TO
33229: IFFALSE 33282
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33231: LD_ADDR_VAR 0 5
33235: PUSH
33236: LD_VAR 0 5
33240: PPUSH
33241: LD_VAR 0 7
33245: PPUSH
33246: LD_VAR 0 5
33250: PUSH
33251: LD_VAR 0 7
33255: ARRAY
33256: PUSH
33257: LD_VAR 0 9
33261: PUSH
33262: LD_VAR 0 7
33266: ARRAY
33267: PUSH
33268: LD_VAR 0 10
33272: MUL
33273: PLUS
33274: PPUSH
33275: CALL_OW 1
33279: ST_TO_ADDR
33280: GO 33228
33282: POP
33283: POP
// end ;
33284: GO 31763
33286: POP
33287: POP
// result := Replace ( result , 4 , tmp ) ;
33288: LD_ADDR_VAR 0 5
33292: PUSH
33293: LD_VAR 0 5
33297: PPUSH
33298: LD_INT 4
33300: PPUSH
33301: LD_VAR 0 8
33305: PPUSH
33306: CALL_OW 1
33310: ST_TO_ADDR
// end ;
33311: LD_VAR 0 5
33315: RET
// export function DangerAtRange ( unit , range ) ; begin
33316: LD_INT 0
33318: PPUSH
// if not unit then
33319: LD_VAR 0 1
33323: NOT
33324: IFFALSE 33328
// exit ;
33326: GO 33373
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 255
33342: PPUSH
33343: LD_VAR 0 1
33347: PPUSH
33348: CALL_OW 250
33352: PPUSH
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 251
33362: PPUSH
33363: LD_VAR 0 2
33367: PPUSH
33368: CALL 31615 0 4
33372: ST_TO_ADDR
// end ;
33373: LD_VAR 0 3
33377: RET
// export function DangerInArea ( side , area ) ; begin
33378: LD_INT 0
33380: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33381: LD_ADDR_VAR 0 3
33385: PUSH
33386: LD_VAR 0 2
33390: PPUSH
33391: LD_INT 81
33393: PUSH
33394: LD_VAR 0 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PPUSH
33403: CALL_OW 70
33407: ST_TO_ADDR
// end ;
33408: LD_VAR 0 3
33412: RET
// export function IsExtension ( b ) ; begin
33413: LD_INT 0
33415: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33416: LD_ADDR_VAR 0 2
33420: PUSH
33421: LD_VAR 0 1
33425: PUSH
33426: LD_INT 23
33428: PUSH
33429: LD_INT 20
33431: PUSH
33432: LD_INT 22
33434: PUSH
33435: LD_INT 17
33437: PUSH
33438: LD_INT 24
33440: PUSH
33441: LD_INT 21
33443: PUSH
33444: LD_INT 19
33446: PUSH
33447: LD_INT 16
33449: PUSH
33450: LD_INT 25
33452: PUSH
33453: LD_INT 18
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: IN
33468: ST_TO_ADDR
// end ;
33469: LD_VAR 0 2
33473: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33474: LD_INT 0
33476: PPUSH
33477: PPUSH
33478: PPUSH
// result := [ ] ;
33479: LD_ADDR_VAR 0 4
33483: PUSH
33484: EMPTY
33485: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33486: LD_ADDR_VAR 0 5
33490: PUSH
33491: LD_VAR 0 2
33495: PPUSH
33496: LD_INT 21
33498: PUSH
33499: LD_INT 3
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 70
33510: ST_TO_ADDR
// if not tmp then
33511: LD_VAR 0 5
33515: NOT
33516: IFFALSE 33520
// exit ;
33518: GO 33584
// if checkLink then
33520: LD_VAR 0 3
33524: IFFALSE 33574
// begin for i in tmp do
33526: LD_ADDR_VAR 0 6
33530: PUSH
33531: LD_VAR 0 5
33535: PUSH
33536: FOR_IN
33537: IFFALSE 33572
// if GetBase ( i ) <> base then
33539: LD_VAR 0 6
33543: PPUSH
33544: CALL_OW 274
33548: PUSH
33549: LD_VAR 0 1
33553: NONEQUAL
33554: IFFALSE 33570
// ComLinkToBase ( base , i ) ;
33556: LD_VAR 0 1
33560: PPUSH
33561: LD_VAR 0 6
33565: PPUSH
33566: CALL_OW 169
33570: GO 33536
33572: POP
33573: POP
// end ; result := tmp ;
33574: LD_ADDR_VAR 0 4
33578: PUSH
33579: LD_VAR 0 5
33583: ST_TO_ADDR
// end ;
33584: LD_VAR 0 4
33588: RET
// export function ComComplete ( units , b ) ; var i ; begin
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
// if not units then
33593: LD_VAR 0 1
33597: NOT
33598: IFFALSE 33602
// exit ;
33600: GO 33692
// for i in units do
33602: LD_ADDR_VAR 0 4
33606: PUSH
33607: LD_VAR 0 1
33611: PUSH
33612: FOR_IN
33613: IFFALSE 33690
// if BuildingStatus ( b ) = bs_build then
33615: LD_VAR 0 2
33619: PPUSH
33620: CALL_OW 461
33624: PUSH
33625: LD_INT 1
33627: EQUAL
33628: IFFALSE 33688
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33630: LD_VAR 0 4
33634: PPUSH
33635: LD_STRING h
33637: PUSH
33638: LD_VAR 0 2
33642: PPUSH
33643: CALL_OW 250
33647: PUSH
33648: LD_VAR 0 2
33652: PPUSH
33653: CALL_OW 251
33657: PUSH
33658: LD_VAR 0 2
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: PPUSH
33684: CALL_OW 446
33688: GO 33612
33690: POP
33691: POP
// end ;
33692: LD_VAR 0 3
33696: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33697: LD_INT 0
33699: PPUSH
33700: PPUSH
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33705: LD_VAR 0 1
33709: NOT
33710: PUSH
33711: LD_VAR 0 1
33715: PPUSH
33716: CALL_OW 263
33720: PUSH
33721: LD_INT 2
33723: NONEQUAL
33724: OR
33725: IFFALSE 33729
// exit ;
33727: GO 34045
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33729: LD_ADDR_VAR 0 6
33733: PUSH
33734: LD_INT 22
33736: PUSH
33737: LD_VAR 0 1
33741: PPUSH
33742: CALL_OW 255
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: LD_INT 30
33756: PUSH
33757: LD_INT 36
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 34
33766: PUSH
33767: LD_INT 31
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PPUSH
33783: CALL_OW 69
33787: ST_TO_ADDR
// if not tmp then
33788: LD_VAR 0 6
33792: NOT
33793: IFFALSE 33797
// exit ;
33795: GO 34045
// result := [ ] ;
33797: LD_ADDR_VAR 0 2
33801: PUSH
33802: EMPTY
33803: ST_TO_ADDR
// for i in tmp do
33804: LD_ADDR_VAR 0 3
33808: PUSH
33809: LD_VAR 0 6
33813: PUSH
33814: FOR_IN
33815: IFFALSE 33886
// begin t := UnitsInside ( i ) ;
33817: LD_ADDR_VAR 0 4
33821: PUSH
33822: LD_VAR 0 3
33826: PPUSH
33827: CALL_OW 313
33831: ST_TO_ADDR
// if t then
33832: LD_VAR 0 4
33836: IFFALSE 33884
// for j in t do
33838: LD_ADDR_VAR 0 7
33842: PUSH
33843: LD_VAR 0 4
33847: PUSH
33848: FOR_IN
33849: IFFALSE 33882
// result := Replace ( result , result + 1 , j ) ;
33851: LD_ADDR_VAR 0 2
33855: PUSH
33856: LD_VAR 0 2
33860: PPUSH
33861: LD_VAR 0 2
33865: PUSH
33866: LD_INT 1
33868: PLUS
33869: PPUSH
33870: LD_VAR 0 7
33874: PPUSH
33875: CALL_OW 1
33879: ST_TO_ADDR
33880: GO 33848
33882: POP
33883: POP
// end ;
33884: GO 33814
33886: POP
33887: POP
// if not result then
33888: LD_VAR 0 2
33892: NOT
33893: IFFALSE 33897
// exit ;
33895: GO 34045
// mech := result [ 1 ] ;
33897: LD_ADDR_VAR 0 5
33901: PUSH
33902: LD_VAR 0 2
33906: PUSH
33907: LD_INT 1
33909: ARRAY
33910: ST_TO_ADDR
// if result > 1 then
33911: LD_VAR 0 2
33915: PUSH
33916: LD_INT 1
33918: GREATER
33919: IFFALSE 34031
// begin for i = 2 to result do
33921: LD_ADDR_VAR 0 3
33925: PUSH
33926: DOUBLE
33927: LD_INT 2
33929: DEC
33930: ST_TO_ADDR
33931: LD_VAR 0 2
33935: PUSH
33936: FOR_TO
33937: IFFALSE 34029
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33939: LD_ADDR_VAR 0 4
33943: PUSH
33944: LD_VAR 0 2
33948: PUSH
33949: LD_VAR 0 3
33953: ARRAY
33954: PPUSH
33955: LD_INT 3
33957: PPUSH
33958: CALL_OW 259
33962: PUSH
33963: LD_VAR 0 2
33967: PUSH
33968: LD_VAR 0 3
33972: ARRAY
33973: PPUSH
33974: CALL_OW 432
33978: MINUS
33979: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33980: LD_VAR 0 4
33984: PUSH
33985: LD_VAR 0 5
33989: PPUSH
33990: LD_INT 3
33992: PPUSH
33993: CALL_OW 259
33997: PUSH
33998: LD_VAR 0 5
34002: PPUSH
34003: CALL_OW 432
34007: MINUS
34008: GREATEREQUAL
34009: IFFALSE 34027
// mech := result [ i ] ;
34011: LD_ADDR_VAR 0 5
34015: PUSH
34016: LD_VAR 0 2
34020: PUSH
34021: LD_VAR 0 3
34025: ARRAY
34026: ST_TO_ADDR
// end ;
34027: GO 33936
34029: POP
34030: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34031: LD_VAR 0 1
34035: PPUSH
34036: LD_VAR 0 5
34040: PPUSH
34041: CALL_OW 135
// end ;
34045: LD_VAR 0 2
34049: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34050: LD_INT 0
34052: PPUSH
34053: PPUSH
34054: PPUSH
34055: PPUSH
34056: PPUSH
34057: PPUSH
34058: PPUSH
34059: PPUSH
34060: PPUSH
34061: PPUSH
34062: PPUSH
34063: PPUSH
34064: PPUSH
// result := [ ] ;
34065: LD_ADDR_VAR 0 7
34069: PUSH
34070: EMPTY
34071: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34072: LD_VAR 0 1
34076: PPUSH
34077: CALL_OW 266
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: IN
34092: NOT
34093: IFFALSE 34097
// exit ;
34095: GO 35731
// if name then
34097: LD_VAR 0 3
34101: IFFALSE 34117
// SetBName ( base_dep , name ) ;
34103: LD_VAR 0 1
34107: PPUSH
34108: LD_VAR 0 3
34112: PPUSH
34113: CALL_OW 500
// base := GetBase ( base_dep ) ;
34117: LD_ADDR_VAR 0 15
34121: PUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 274
34131: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34132: LD_ADDR_VAR 0 16
34136: PUSH
34137: LD_VAR 0 1
34141: PPUSH
34142: CALL_OW 255
34146: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34147: LD_ADDR_VAR 0 17
34151: PUSH
34152: LD_VAR 0 1
34156: PPUSH
34157: CALL_OW 248
34161: ST_TO_ADDR
// if sources then
34162: LD_VAR 0 5
34166: IFFALSE 34213
// for i = 1 to 3 do
34168: LD_ADDR_VAR 0 8
34172: PUSH
34173: DOUBLE
34174: LD_INT 1
34176: DEC
34177: ST_TO_ADDR
34178: LD_INT 3
34180: PUSH
34181: FOR_TO
34182: IFFALSE 34211
// AddResourceType ( base , i , sources [ i ] ) ;
34184: LD_VAR 0 15
34188: PPUSH
34189: LD_VAR 0 8
34193: PPUSH
34194: LD_VAR 0 5
34198: PUSH
34199: LD_VAR 0 8
34203: ARRAY
34204: PPUSH
34205: CALL_OW 276
34209: GO 34181
34211: POP
34212: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34213: LD_ADDR_VAR 0 18
34217: PUSH
34218: LD_VAR 0 15
34222: PPUSH
34223: LD_VAR 0 2
34227: PPUSH
34228: LD_INT 1
34230: PPUSH
34231: CALL 33474 0 3
34235: ST_TO_ADDR
// InitHc ;
34236: CALL_OW 19
// InitUc ;
34240: CALL_OW 18
// uc_side := side ;
34244: LD_ADDR_OWVAR 20
34248: PUSH
34249: LD_VAR 0 16
34253: ST_TO_ADDR
// uc_nation := nation ;
34254: LD_ADDR_OWVAR 21
34258: PUSH
34259: LD_VAR 0 17
34263: ST_TO_ADDR
// if buildings then
34264: LD_VAR 0 18
34268: IFFALSE 35590
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34270: LD_ADDR_VAR 0 19
34274: PUSH
34275: LD_VAR 0 18
34279: PPUSH
34280: LD_INT 2
34282: PUSH
34283: LD_INT 30
34285: PUSH
34286: LD_INT 29
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 30
34295: PUSH
34296: LD_INT 30
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: PPUSH
34308: CALL_OW 72
34312: ST_TO_ADDR
// if tmp then
34313: LD_VAR 0 19
34317: IFFALSE 34365
// for i in tmp do
34319: LD_ADDR_VAR 0 8
34323: PUSH
34324: LD_VAR 0 19
34328: PUSH
34329: FOR_IN
34330: IFFALSE 34363
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34332: LD_VAR 0 8
34336: PPUSH
34337: CALL_OW 250
34341: PPUSH
34342: LD_VAR 0 8
34346: PPUSH
34347: CALL_OW 251
34351: PPUSH
34352: LD_VAR 0 16
34356: PPUSH
34357: CALL_OW 441
34361: GO 34329
34363: POP
34364: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34365: LD_VAR 0 18
34369: PPUSH
34370: LD_INT 2
34372: PUSH
34373: LD_INT 30
34375: PUSH
34376: LD_INT 32
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 30
34385: PUSH
34386: LD_INT 33
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: PPUSH
34398: CALL_OW 72
34402: IFFALSE 34490
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34404: LD_ADDR_VAR 0 8
34408: PUSH
34409: LD_VAR 0 18
34413: PPUSH
34414: LD_INT 2
34416: PUSH
34417: LD_INT 30
34419: PUSH
34420: LD_INT 32
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 30
34429: PUSH
34430: LD_INT 33
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: PPUSH
34442: CALL_OW 72
34446: PUSH
34447: FOR_IN
34448: IFFALSE 34488
// begin if not GetBWeapon ( i ) then
34450: LD_VAR 0 8
34454: PPUSH
34455: CALL_OW 269
34459: NOT
34460: IFFALSE 34486
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34462: LD_VAR 0 8
34466: PPUSH
34467: LD_VAR 0 8
34471: PPUSH
34472: LD_VAR 0 2
34476: PPUSH
34477: CALL 35736 0 2
34481: PPUSH
34482: CALL_OW 431
// end ;
34486: GO 34447
34488: POP
34489: POP
// end ; for i = 1 to personel do
34490: LD_ADDR_VAR 0 8
34494: PUSH
34495: DOUBLE
34496: LD_INT 1
34498: DEC
34499: ST_TO_ADDR
34500: LD_VAR 0 6
34504: PUSH
34505: FOR_TO
34506: IFFALSE 35570
// begin if i > 4 then
34508: LD_VAR 0 8
34512: PUSH
34513: LD_INT 4
34515: GREATER
34516: IFFALSE 34520
// break ;
34518: GO 35570
// case i of 1 :
34520: LD_VAR 0 8
34524: PUSH
34525: LD_INT 1
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34533
34531: GO 34613
34533: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34534: LD_ADDR_VAR 0 12
34538: PUSH
34539: LD_VAR 0 18
34543: PPUSH
34544: LD_INT 22
34546: PUSH
34547: LD_VAR 0 16
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 58
34558: PUSH
34559: EMPTY
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 30
34567: PUSH
34568: LD_INT 32
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 30
34577: PUSH
34578: LD_INT 4
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 30
34587: PUSH
34588: LD_INT 5
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: PPUSH
34606: CALL_OW 72
34610: ST_TO_ADDR
34611: GO 34835
34613: LD_INT 2
34615: DOUBLE
34616: EQUAL
34617: IFTRUE 34621
34619: GO 34683
34621: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34622: LD_ADDR_VAR 0 12
34626: PUSH
34627: LD_VAR 0 18
34631: PPUSH
34632: LD_INT 22
34634: PUSH
34635: LD_VAR 0 16
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: LD_INT 30
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 30
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PPUSH
34676: CALL_OW 72
34680: ST_TO_ADDR
34681: GO 34835
34683: LD_INT 3
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34753
34691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34692: LD_ADDR_VAR 0 12
34696: PUSH
34697: LD_VAR 0 18
34701: PPUSH
34702: LD_INT 22
34704: PUSH
34705: LD_VAR 0 16
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 30
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 30
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PPUSH
34746: CALL_OW 72
34750: ST_TO_ADDR
34751: GO 34835
34753: LD_INT 4
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 34834
34761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34762: LD_ADDR_VAR 0 12
34766: PUSH
34767: LD_VAR 0 18
34771: PPUSH
34772: LD_INT 22
34774: PUSH
34775: LD_VAR 0 16
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: LD_INT 30
34789: PUSH
34790: LD_INT 6
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 30
34799: PUSH
34800: LD_INT 7
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 30
34809: PUSH
34810: LD_INT 8
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PPUSH
34827: CALL_OW 72
34831: ST_TO_ADDR
34832: GO 34835
34834: POP
// if i = 1 then
34835: LD_VAR 0 8
34839: PUSH
34840: LD_INT 1
34842: EQUAL
34843: IFFALSE 34954
// begin tmp := [ ] ;
34845: LD_ADDR_VAR 0 19
34849: PUSH
34850: EMPTY
34851: ST_TO_ADDR
// for j in f do
34852: LD_ADDR_VAR 0 9
34856: PUSH
34857: LD_VAR 0 12
34861: PUSH
34862: FOR_IN
34863: IFFALSE 34936
// if GetBType ( j ) = b_bunker then
34865: LD_VAR 0 9
34869: PPUSH
34870: CALL_OW 266
34874: PUSH
34875: LD_INT 32
34877: EQUAL
34878: IFFALSE 34905
// tmp := Insert ( tmp , 1 , j ) else
34880: LD_ADDR_VAR 0 19
34884: PUSH
34885: LD_VAR 0 19
34889: PPUSH
34890: LD_INT 1
34892: PPUSH
34893: LD_VAR 0 9
34897: PPUSH
34898: CALL_OW 2
34902: ST_TO_ADDR
34903: GO 34934
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34905: LD_ADDR_VAR 0 19
34909: PUSH
34910: LD_VAR 0 19
34914: PPUSH
34915: LD_VAR 0 19
34919: PUSH
34920: LD_INT 1
34922: PLUS
34923: PPUSH
34924: LD_VAR 0 9
34928: PPUSH
34929: CALL_OW 2
34933: ST_TO_ADDR
34934: GO 34862
34936: POP
34937: POP
// if tmp then
34938: LD_VAR 0 19
34942: IFFALSE 34954
// f := tmp ;
34944: LD_ADDR_VAR 0 12
34948: PUSH
34949: LD_VAR 0 19
34953: ST_TO_ADDR
// end ; x := personel [ i ] ;
34954: LD_ADDR_VAR 0 13
34958: PUSH
34959: LD_VAR 0 6
34963: PUSH
34964: LD_VAR 0 8
34968: ARRAY
34969: ST_TO_ADDR
// if x = - 1 then
34970: LD_VAR 0 13
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: EQUAL
34979: IFFALSE 35188
// begin for j in f do
34981: LD_ADDR_VAR 0 9
34985: PUSH
34986: LD_VAR 0 12
34990: PUSH
34991: FOR_IN
34992: IFFALSE 35184
// repeat InitHc ;
34994: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34998: LD_VAR 0 9
35002: PPUSH
35003: CALL_OW 266
35007: PUSH
35008: LD_INT 5
35010: EQUAL
35011: IFFALSE 35081
// begin if UnitsInside ( j ) < 3 then
35013: LD_VAR 0 9
35017: PPUSH
35018: CALL_OW 313
35022: PUSH
35023: LD_INT 3
35025: LESS
35026: IFFALSE 35062
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35028: LD_INT 0
35030: PPUSH
35031: LD_INT 5
35033: PUSH
35034: LD_INT 8
35036: PUSH
35037: LD_INT 9
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: PUSH
35045: LD_VAR 0 17
35049: ARRAY
35050: PPUSH
35051: LD_VAR 0 4
35055: PPUSH
35056: CALL_OW 380
35060: GO 35079
// PrepareHuman ( false , i , skill ) ;
35062: LD_INT 0
35064: PPUSH
35065: LD_VAR 0 8
35069: PPUSH
35070: LD_VAR 0 4
35074: PPUSH
35075: CALL_OW 380
// end else
35079: GO 35098
// PrepareHuman ( false , i , skill ) ;
35081: LD_INT 0
35083: PPUSH
35084: LD_VAR 0 8
35088: PPUSH
35089: LD_VAR 0 4
35093: PPUSH
35094: CALL_OW 380
// un := CreateHuman ;
35098: LD_ADDR_VAR 0 14
35102: PUSH
35103: CALL_OW 44
35107: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35108: LD_ADDR_VAR 0 7
35112: PUSH
35113: LD_VAR 0 7
35117: PPUSH
35118: LD_INT 1
35120: PPUSH
35121: LD_VAR 0 14
35125: PPUSH
35126: CALL_OW 2
35130: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35131: LD_VAR 0 14
35135: PPUSH
35136: LD_VAR 0 9
35140: PPUSH
35141: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35145: LD_VAR 0 9
35149: PPUSH
35150: CALL_OW 313
35154: PUSH
35155: LD_INT 6
35157: EQUAL
35158: PUSH
35159: LD_VAR 0 9
35163: PPUSH
35164: CALL_OW 266
35168: PUSH
35169: LD_INT 32
35171: PUSH
35172: LD_INT 31
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: IN
35179: OR
35180: IFFALSE 34994
35182: GO 34991
35184: POP
35185: POP
// end else
35186: GO 35568
// for j = 1 to x do
35188: LD_ADDR_VAR 0 9
35192: PUSH
35193: DOUBLE
35194: LD_INT 1
35196: DEC
35197: ST_TO_ADDR
35198: LD_VAR 0 13
35202: PUSH
35203: FOR_TO
35204: IFFALSE 35566
// begin InitHc ;
35206: CALL_OW 19
// if not f then
35210: LD_VAR 0 12
35214: NOT
35215: IFFALSE 35304
// begin PrepareHuman ( false , i , skill ) ;
35217: LD_INT 0
35219: PPUSH
35220: LD_VAR 0 8
35224: PPUSH
35225: LD_VAR 0 4
35229: PPUSH
35230: CALL_OW 380
// un := CreateHuman ;
35234: LD_ADDR_VAR 0 14
35238: PUSH
35239: CALL_OW 44
35243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35244: LD_ADDR_VAR 0 7
35248: PUSH
35249: LD_VAR 0 7
35253: PPUSH
35254: LD_INT 1
35256: PPUSH
35257: LD_VAR 0 14
35261: PPUSH
35262: CALL_OW 2
35266: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35267: LD_VAR 0 14
35271: PPUSH
35272: LD_VAR 0 1
35276: PPUSH
35277: CALL_OW 250
35281: PPUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 251
35291: PPUSH
35292: LD_INT 10
35294: PPUSH
35295: LD_INT 0
35297: PPUSH
35298: CALL_OW 50
// continue ;
35302: GO 35203
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35304: LD_VAR 0 12
35308: PUSH
35309: LD_INT 1
35311: ARRAY
35312: PPUSH
35313: CALL_OW 313
35317: PUSH
35318: LD_VAR 0 12
35322: PUSH
35323: LD_INT 1
35325: ARRAY
35326: PPUSH
35327: CALL_OW 266
35331: PUSH
35332: LD_INT 32
35334: PUSH
35335: LD_INT 31
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: IN
35342: AND
35343: PUSH
35344: LD_VAR 0 12
35348: PUSH
35349: LD_INT 1
35351: ARRAY
35352: PPUSH
35353: CALL_OW 313
35357: PUSH
35358: LD_INT 6
35360: EQUAL
35361: OR
35362: IFFALSE 35382
// f := Delete ( f , 1 ) ;
35364: LD_ADDR_VAR 0 12
35368: PUSH
35369: LD_VAR 0 12
35373: PPUSH
35374: LD_INT 1
35376: PPUSH
35377: CALL_OW 3
35381: ST_TO_ADDR
// if not f then
35382: LD_VAR 0 12
35386: NOT
35387: IFFALSE 35405
// begin x := x + 2 ;
35389: LD_ADDR_VAR 0 13
35393: PUSH
35394: LD_VAR 0 13
35398: PUSH
35399: LD_INT 2
35401: PLUS
35402: ST_TO_ADDR
// continue ;
35403: GO 35203
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35405: LD_VAR 0 12
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: PPUSH
35414: CALL_OW 266
35418: PUSH
35419: LD_INT 5
35421: EQUAL
35422: IFFALSE 35496
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35424: LD_VAR 0 12
35428: PUSH
35429: LD_INT 1
35431: ARRAY
35432: PPUSH
35433: CALL_OW 313
35437: PUSH
35438: LD_INT 3
35440: LESS
35441: IFFALSE 35477
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35443: LD_INT 0
35445: PPUSH
35446: LD_INT 5
35448: PUSH
35449: LD_INT 8
35451: PUSH
35452: LD_INT 9
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: PUSH
35460: LD_VAR 0 17
35464: ARRAY
35465: PPUSH
35466: LD_VAR 0 4
35470: PPUSH
35471: CALL_OW 380
35475: GO 35494
// PrepareHuman ( false , i , skill ) ;
35477: LD_INT 0
35479: PPUSH
35480: LD_VAR 0 8
35484: PPUSH
35485: LD_VAR 0 4
35489: PPUSH
35490: CALL_OW 380
// end else
35494: GO 35513
// PrepareHuman ( false , i , skill ) ;
35496: LD_INT 0
35498: PPUSH
35499: LD_VAR 0 8
35503: PPUSH
35504: LD_VAR 0 4
35508: PPUSH
35509: CALL_OW 380
// un := CreateHuman ;
35513: LD_ADDR_VAR 0 14
35517: PUSH
35518: CALL_OW 44
35522: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35523: LD_ADDR_VAR 0 7
35527: PUSH
35528: LD_VAR 0 7
35532: PPUSH
35533: LD_INT 1
35535: PPUSH
35536: LD_VAR 0 14
35540: PPUSH
35541: CALL_OW 2
35545: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35546: LD_VAR 0 14
35550: PPUSH
35551: LD_VAR 0 12
35555: PUSH
35556: LD_INT 1
35558: ARRAY
35559: PPUSH
35560: CALL_OW 52
// end ;
35564: GO 35203
35566: POP
35567: POP
// end ;
35568: GO 34505
35570: POP
35571: POP
// result := result ^ buildings ;
35572: LD_ADDR_VAR 0 7
35576: PUSH
35577: LD_VAR 0 7
35581: PUSH
35582: LD_VAR 0 18
35586: ADD
35587: ST_TO_ADDR
// end else
35588: GO 35731
// begin for i = 1 to personel do
35590: LD_ADDR_VAR 0 8
35594: PUSH
35595: DOUBLE
35596: LD_INT 1
35598: DEC
35599: ST_TO_ADDR
35600: LD_VAR 0 6
35604: PUSH
35605: FOR_TO
35606: IFFALSE 35729
// begin if i > 4 then
35608: LD_VAR 0 8
35612: PUSH
35613: LD_INT 4
35615: GREATER
35616: IFFALSE 35620
// break ;
35618: GO 35729
// x := personel [ i ] ;
35620: LD_ADDR_VAR 0 13
35624: PUSH
35625: LD_VAR 0 6
35629: PUSH
35630: LD_VAR 0 8
35634: ARRAY
35635: ST_TO_ADDR
// if x = - 1 then
35636: LD_VAR 0 13
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: EQUAL
35645: IFFALSE 35649
// continue ;
35647: GO 35605
// PrepareHuman ( false , i , skill ) ;
35649: LD_INT 0
35651: PPUSH
35652: LD_VAR 0 8
35656: PPUSH
35657: LD_VAR 0 4
35661: PPUSH
35662: CALL_OW 380
// un := CreateHuman ;
35666: LD_ADDR_VAR 0 14
35670: PUSH
35671: CALL_OW 44
35675: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35676: LD_VAR 0 14
35680: PPUSH
35681: LD_VAR 0 1
35685: PPUSH
35686: CALL_OW 250
35690: PPUSH
35691: LD_VAR 0 1
35695: PPUSH
35696: CALL_OW 251
35700: PPUSH
35701: LD_INT 10
35703: PPUSH
35704: LD_INT 0
35706: PPUSH
35707: CALL_OW 50
// result := result ^ un ;
35711: LD_ADDR_VAR 0 7
35715: PUSH
35716: LD_VAR 0 7
35720: PUSH
35721: LD_VAR 0 14
35725: ADD
35726: ST_TO_ADDR
// end ;
35727: GO 35605
35729: POP
35730: POP
// end ; end ;
35731: LD_VAR 0 7
35735: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35736: LD_INT 0
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
35753: PPUSH
// result := false ;
35754: LD_ADDR_VAR 0 3
35758: PUSH
35759: LD_INT 0
35761: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35762: LD_VAR 0 1
35766: NOT
35767: PUSH
35768: LD_VAR 0 1
35772: PPUSH
35773: CALL_OW 266
35777: PUSH
35778: LD_INT 32
35780: PUSH
35781: LD_INT 33
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: IN
35788: NOT
35789: OR
35790: IFFALSE 35794
// exit ;
35792: GO 36903
// nat := GetNation ( tower ) ;
35794: LD_ADDR_VAR 0 12
35798: PUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL_OW 248
35808: ST_TO_ADDR
// side := GetSide ( tower ) ;
35809: LD_ADDR_VAR 0 16
35813: PUSH
35814: LD_VAR 0 1
35818: PPUSH
35819: CALL_OW 255
35823: ST_TO_ADDR
// x := GetX ( tower ) ;
35824: LD_ADDR_VAR 0 10
35828: PUSH
35829: LD_VAR 0 1
35833: PPUSH
35834: CALL_OW 250
35838: ST_TO_ADDR
// y := GetY ( tower ) ;
35839: LD_ADDR_VAR 0 11
35843: PUSH
35844: LD_VAR 0 1
35848: PPUSH
35849: CALL_OW 251
35853: ST_TO_ADDR
// if not x or not y then
35854: LD_VAR 0 10
35858: NOT
35859: PUSH
35860: LD_VAR 0 11
35864: NOT
35865: OR
35866: IFFALSE 35870
// exit ;
35868: GO 36903
// weapon := 0 ;
35870: LD_ADDR_VAR 0 18
35874: PUSH
35875: LD_INT 0
35877: ST_TO_ADDR
// fac_list := [ ] ;
35878: LD_ADDR_VAR 0 17
35882: PUSH
35883: EMPTY
35884: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35885: LD_ADDR_VAR 0 6
35889: PUSH
35890: LD_VAR 0 1
35894: PPUSH
35895: CALL_OW 274
35899: PPUSH
35900: LD_VAR 0 2
35904: PPUSH
35905: LD_INT 0
35907: PPUSH
35908: CALL 33474 0 3
35912: PPUSH
35913: LD_INT 30
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PPUSH
35923: CALL_OW 72
35927: ST_TO_ADDR
// if not factories then
35928: LD_VAR 0 6
35932: NOT
35933: IFFALSE 35937
// exit ;
35935: GO 36903
// for i in factories do
35937: LD_ADDR_VAR 0 8
35941: PUSH
35942: LD_VAR 0 6
35946: PUSH
35947: FOR_IN
35948: IFFALSE 35973
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35950: LD_ADDR_VAR 0 17
35954: PUSH
35955: LD_VAR 0 17
35959: PUSH
35960: LD_VAR 0 8
35964: PPUSH
35965: CALL_OW 478
35969: UNION
35970: ST_TO_ADDR
35971: GO 35947
35973: POP
35974: POP
// if not fac_list then
35975: LD_VAR 0 17
35979: NOT
35980: IFFALSE 35984
// exit ;
35982: GO 36903
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35984: LD_ADDR_VAR 0 5
35988: PUSH
35989: LD_INT 4
35991: PUSH
35992: LD_INT 5
35994: PUSH
35995: LD_INT 9
35997: PUSH
35998: LD_INT 10
36000: PUSH
36001: LD_INT 6
36003: PUSH
36004: LD_INT 7
36006: PUSH
36007: LD_INT 11
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 27
36021: PUSH
36022: LD_INT 28
36024: PUSH
36025: LD_INT 26
36027: PUSH
36028: LD_INT 30
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 43
36039: PUSH
36040: LD_INT 44
36042: PUSH
36043: LD_INT 46
36045: PUSH
36046: LD_INT 45
36048: PUSH
36049: LD_INT 47
36051: PUSH
36052: LD_INT 49
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: PUSH
36068: LD_VAR 0 12
36072: ARRAY
36073: ST_TO_ADDR
// list := list isect fac_list ;
36074: LD_ADDR_VAR 0 5
36078: PUSH
36079: LD_VAR 0 5
36083: PUSH
36084: LD_VAR 0 17
36088: ISECT
36089: ST_TO_ADDR
// if not list then
36090: LD_VAR 0 5
36094: NOT
36095: IFFALSE 36099
// exit ;
36097: GO 36903
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36099: LD_VAR 0 12
36103: PUSH
36104: LD_INT 3
36106: EQUAL
36107: PUSH
36108: LD_INT 49
36110: PUSH
36111: LD_VAR 0 5
36115: IN
36116: AND
36117: PUSH
36118: LD_INT 31
36120: PPUSH
36121: LD_VAR 0 16
36125: PPUSH
36126: CALL_OW 321
36130: PUSH
36131: LD_INT 2
36133: EQUAL
36134: AND
36135: IFFALSE 36195
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36137: LD_INT 22
36139: PUSH
36140: LD_VAR 0 16
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 35
36151: PUSH
36152: LD_INT 49
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 91
36161: PUSH
36162: LD_VAR 0 1
36166: PUSH
36167: LD_INT 10
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: PPUSH
36180: CALL_OW 69
36184: NOT
36185: IFFALSE 36195
// weapon := ru_time_lapser ;
36187: LD_ADDR_VAR 0 18
36191: PUSH
36192: LD_INT 49
36194: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36195: LD_VAR 0 12
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: IN
36210: PUSH
36211: LD_INT 11
36213: PUSH
36214: LD_VAR 0 5
36218: IN
36219: PUSH
36220: LD_INT 30
36222: PUSH
36223: LD_VAR 0 5
36227: IN
36228: OR
36229: AND
36230: PUSH
36231: LD_INT 6
36233: PPUSH
36234: LD_VAR 0 16
36238: PPUSH
36239: CALL_OW 321
36243: PUSH
36244: LD_INT 2
36246: EQUAL
36247: AND
36248: IFFALSE 36413
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36250: LD_INT 22
36252: PUSH
36253: LD_VAR 0 16
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: LD_INT 35
36267: PUSH
36268: LD_INT 11
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 35
36277: PUSH
36278: LD_INT 30
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 91
36292: PUSH
36293: LD_VAR 0 1
36297: PUSH
36298: LD_INT 18
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: PPUSH
36311: CALL_OW 69
36315: NOT
36316: PUSH
36317: LD_INT 22
36319: PUSH
36320: LD_VAR 0 16
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: LD_INT 30
36334: PUSH
36335: LD_INT 32
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 33
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 91
36359: PUSH
36360: LD_VAR 0 1
36364: PUSH
36365: LD_INT 12
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: PUSH
36378: EMPTY
36379: LIST
36380: PPUSH
36381: CALL_OW 69
36385: PUSH
36386: LD_INT 2
36388: GREATER
36389: AND
36390: IFFALSE 36413
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36392: LD_ADDR_VAR 0 18
36396: PUSH
36397: LD_INT 11
36399: PUSH
36400: LD_INT 30
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_VAR 0 12
36411: ARRAY
36412: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36413: LD_VAR 0 18
36417: NOT
36418: PUSH
36419: LD_INT 40
36421: PPUSH
36422: LD_VAR 0 16
36426: PPUSH
36427: CALL_OW 321
36431: PUSH
36432: LD_INT 2
36434: EQUAL
36435: AND
36436: PUSH
36437: LD_INT 7
36439: PUSH
36440: LD_VAR 0 5
36444: IN
36445: PUSH
36446: LD_INT 28
36448: PUSH
36449: LD_VAR 0 5
36453: IN
36454: OR
36455: PUSH
36456: LD_INT 45
36458: PUSH
36459: LD_VAR 0 5
36463: IN
36464: OR
36465: AND
36466: IFFALSE 36720
// begin hex := GetHexInfo ( x , y ) ;
36468: LD_ADDR_VAR 0 4
36472: PUSH
36473: LD_VAR 0 10
36477: PPUSH
36478: LD_VAR 0 11
36482: PPUSH
36483: CALL_OW 546
36487: ST_TO_ADDR
// if hex [ 1 ] then
36488: LD_VAR 0 4
36492: PUSH
36493: LD_INT 1
36495: ARRAY
36496: IFFALSE 36500
// exit ;
36498: GO 36903
// height := hex [ 2 ] ;
36500: LD_ADDR_VAR 0 15
36504: PUSH
36505: LD_VAR 0 4
36509: PUSH
36510: LD_INT 2
36512: ARRAY
36513: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36514: LD_ADDR_VAR 0 14
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: LD_INT 5
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: ST_TO_ADDR
// for i in tmp do
36537: LD_ADDR_VAR 0 8
36541: PUSH
36542: LD_VAR 0 14
36546: PUSH
36547: FOR_IN
36548: IFFALSE 36718
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36550: LD_ADDR_VAR 0 9
36554: PUSH
36555: LD_VAR 0 10
36559: PPUSH
36560: LD_VAR 0 8
36564: PPUSH
36565: LD_INT 5
36567: PPUSH
36568: CALL_OW 272
36572: PUSH
36573: LD_VAR 0 11
36577: PPUSH
36578: LD_VAR 0 8
36582: PPUSH
36583: LD_INT 5
36585: PPUSH
36586: CALL_OW 273
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36595: LD_VAR 0 9
36599: PUSH
36600: LD_INT 1
36602: ARRAY
36603: PPUSH
36604: LD_VAR 0 9
36608: PUSH
36609: LD_INT 2
36611: ARRAY
36612: PPUSH
36613: CALL_OW 488
36617: IFFALSE 36716
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36619: LD_ADDR_VAR 0 4
36623: PUSH
36624: LD_VAR 0 9
36628: PUSH
36629: LD_INT 1
36631: ARRAY
36632: PPUSH
36633: LD_VAR 0 9
36637: PUSH
36638: LD_INT 2
36640: ARRAY
36641: PPUSH
36642: CALL_OW 546
36646: ST_TO_ADDR
// if hex [ 1 ] then
36647: LD_VAR 0 4
36651: PUSH
36652: LD_INT 1
36654: ARRAY
36655: IFFALSE 36659
// continue ;
36657: GO 36547
// h := hex [ 2 ] ;
36659: LD_ADDR_VAR 0 13
36663: PUSH
36664: LD_VAR 0 4
36668: PUSH
36669: LD_INT 2
36671: ARRAY
36672: ST_TO_ADDR
// if h + 7 < height then
36673: LD_VAR 0 13
36677: PUSH
36678: LD_INT 7
36680: PLUS
36681: PUSH
36682: LD_VAR 0 15
36686: LESS
36687: IFFALSE 36716
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36689: LD_ADDR_VAR 0 18
36693: PUSH
36694: LD_INT 7
36696: PUSH
36697: LD_INT 28
36699: PUSH
36700: LD_INT 45
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: PUSH
36708: LD_VAR 0 12
36712: ARRAY
36713: ST_TO_ADDR
// break ;
36714: GO 36718
// end ; end ; end ;
36716: GO 36547
36718: POP
36719: POP
// end ; if not weapon then
36720: LD_VAR 0 18
36724: NOT
36725: IFFALSE 36785
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36727: LD_ADDR_VAR 0 5
36731: PUSH
36732: LD_VAR 0 5
36736: PUSH
36737: LD_INT 11
36739: PUSH
36740: LD_INT 30
36742: PUSH
36743: LD_INT 49
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: DIFF
36751: ST_TO_ADDR
// if not list then
36752: LD_VAR 0 5
36756: NOT
36757: IFFALSE 36761
// exit ;
36759: GO 36903
// weapon := list [ rand ( 1 , list ) ] ;
36761: LD_ADDR_VAR 0 18
36765: PUSH
36766: LD_VAR 0 5
36770: PUSH
36771: LD_INT 1
36773: PPUSH
36774: LD_VAR 0 5
36778: PPUSH
36779: CALL_OW 12
36783: ARRAY
36784: ST_TO_ADDR
// end ; if weapon then
36785: LD_VAR 0 18
36789: IFFALSE 36903
// begin tmp := CostOfWeapon ( weapon ) ;
36791: LD_ADDR_VAR 0 14
36795: PUSH
36796: LD_VAR 0 18
36800: PPUSH
36801: CALL_OW 451
36805: ST_TO_ADDR
// j := GetBase ( tower ) ;
36806: LD_ADDR_VAR 0 9
36810: PUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: CALL_OW 274
36820: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36821: LD_VAR 0 9
36825: PPUSH
36826: LD_INT 1
36828: PPUSH
36829: CALL_OW 275
36833: PUSH
36834: LD_VAR 0 14
36838: PUSH
36839: LD_INT 1
36841: ARRAY
36842: GREATEREQUAL
36843: PUSH
36844: LD_VAR 0 9
36848: PPUSH
36849: LD_INT 2
36851: PPUSH
36852: CALL_OW 275
36856: PUSH
36857: LD_VAR 0 14
36861: PUSH
36862: LD_INT 2
36864: ARRAY
36865: GREATEREQUAL
36866: AND
36867: PUSH
36868: LD_VAR 0 9
36872: PPUSH
36873: LD_INT 3
36875: PPUSH
36876: CALL_OW 275
36880: PUSH
36881: LD_VAR 0 14
36885: PUSH
36886: LD_INT 3
36888: ARRAY
36889: GREATEREQUAL
36890: AND
36891: IFFALSE 36903
// result := weapon ;
36893: LD_ADDR_VAR 0 3
36897: PUSH
36898: LD_VAR 0 18
36902: ST_TO_ADDR
// end ; end ;
36903: LD_VAR 0 3
36907: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36908: LD_INT 0
36910: PPUSH
36911: PPUSH
// result := true ;
36912: LD_ADDR_VAR 0 3
36916: PUSH
36917: LD_INT 1
36919: ST_TO_ADDR
// if array1 = array2 then
36920: LD_VAR 0 1
36924: PUSH
36925: LD_VAR 0 2
36929: EQUAL
36930: IFFALSE 36990
// begin for i = 1 to array1 do
36932: LD_ADDR_VAR 0 4
36936: PUSH
36937: DOUBLE
36938: LD_INT 1
36940: DEC
36941: ST_TO_ADDR
36942: LD_VAR 0 1
36946: PUSH
36947: FOR_TO
36948: IFFALSE 36986
// if array1 [ i ] <> array2 [ i ] then
36950: LD_VAR 0 1
36954: PUSH
36955: LD_VAR 0 4
36959: ARRAY
36960: PUSH
36961: LD_VAR 0 2
36965: PUSH
36966: LD_VAR 0 4
36970: ARRAY
36971: NONEQUAL
36972: IFFALSE 36984
// begin result := false ;
36974: LD_ADDR_VAR 0 3
36978: PUSH
36979: LD_INT 0
36981: ST_TO_ADDR
// break ;
36982: GO 36986
// end ;
36984: GO 36947
36986: POP
36987: POP
// end else
36988: GO 36998
// result := false ;
36990: LD_ADDR_VAR 0 3
36994: PUSH
36995: LD_INT 0
36997: ST_TO_ADDR
// end ;
36998: LD_VAR 0 3
37002: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37003: LD_INT 0
37005: PPUSH
37006: PPUSH
// if not array1 or not array2 then
37007: LD_VAR 0 1
37011: NOT
37012: PUSH
37013: LD_VAR 0 2
37017: NOT
37018: OR
37019: IFFALSE 37023
// exit ;
37021: GO 37087
// result := true ;
37023: LD_ADDR_VAR 0 3
37027: PUSH
37028: LD_INT 1
37030: ST_TO_ADDR
// for i = 1 to array1 do
37031: LD_ADDR_VAR 0 4
37035: PUSH
37036: DOUBLE
37037: LD_INT 1
37039: DEC
37040: ST_TO_ADDR
37041: LD_VAR 0 1
37045: PUSH
37046: FOR_TO
37047: IFFALSE 37085
// if array1 [ i ] <> array2 [ i ] then
37049: LD_VAR 0 1
37053: PUSH
37054: LD_VAR 0 4
37058: ARRAY
37059: PUSH
37060: LD_VAR 0 2
37064: PUSH
37065: LD_VAR 0 4
37069: ARRAY
37070: NONEQUAL
37071: IFFALSE 37083
// begin result := false ;
37073: LD_ADDR_VAR 0 3
37077: PUSH
37078: LD_INT 0
37080: ST_TO_ADDR
// break ;
37081: GO 37085
// end ;
37083: GO 37046
37085: POP
37086: POP
// end ;
37087: LD_VAR 0 3
37091: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37092: LD_INT 0
37094: PPUSH
37095: PPUSH
37096: PPUSH
// pom := GetBase ( fac ) ;
37097: LD_ADDR_VAR 0 5
37101: PUSH
37102: LD_VAR 0 1
37106: PPUSH
37107: CALL_OW 274
37111: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37112: LD_ADDR_VAR 0 4
37116: PUSH
37117: LD_VAR 0 2
37121: PUSH
37122: LD_INT 1
37124: ARRAY
37125: PPUSH
37126: LD_VAR 0 2
37130: PUSH
37131: LD_INT 2
37133: ARRAY
37134: PPUSH
37135: LD_VAR 0 2
37139: PUSH
37140: LD_INT 3
37142: ARRAY
37143: PPUSH
37144: LD_VAR 0 2
37148: PUSH
37149: LD_INT 4
37151: ARRAY
37152: PPUSH
37153: CALL_OW 449
37157: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: LD_VAR 0 5
37167: PPUSH
37168: LD_INT 1
37170: PPUSH
37171: CALL_OW 275
37175: PUSH
37176: LD_VAR 0 4
37180: PUSH
37181: LD_INT 1
37183: ARRAY
37184: GREATEREQUAL
37185: PUSH
37186: LD_VAR 0 5
37190: PPUSH
37191: LD_INT 2
37193: PPUSH
37194: CALL_OW 275
37198: PUSH
37199: LD_VAR 0 4
37203: PUSH
37204: LD_INT 2
37206: ARRAY
37207: GREATEREQUAL
37208: AND
37209: PUSH
37210: LD_VAR 0 5
37214: PPUSH
37215: LD_INT 3
37217: PPUSH
37218: CALL_OW 275
37222: PUSH
37223: LD_VAR 0 4
37227: PUSH
37228: LD_INT 3
37230: ARRAY
37231: GREATEREQUAL
37232: AND
37233: ST_TO_ADDR
// end ;
37234: LD_VAR 0 3
37238: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37239: LD_INT 0
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
// pom := GetBase ( building ) ;
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_VAR 0 1
37254: PPUSH
37255: CALL_OW 274
37259: ST_TO_ADDR
// if not pom then
37260: LD_VAR 0 3
37264: NOT
37265: IFFALSE 37269
// exit ;
37267: GO 37439
// btype := GetBType ( building ) ;
37269: LD_ADDR_VAR 0 5
37273: PUSH
37274: LD_VAR 0 1
37278: PPUSH
37279: CALL_OW 266
37283: ST_TO_ADDR
// if btype = b_armoury then
37284: LD_VAR 0 5
37288: PUSH
37289: LD_INT 4
37291: EQUAL
37292: IFFALSE 37302
// btype := b_barracks ;
37294: LD_ADDR_VAR 0 5
37298: PUSH
37299: LD_INT 5
37301: ST_TO_ADDR
// if btype = b_depot then
37302: LD_VAR 0 5
37306: PUSH
37307: LD_INT 0
37309: EQUAL
37310: IFFALSE 37320
// btype := b_warehouse ;
37312: LD_ADDR_VAR 0 5
37316: PUSH
37317: LD_INT 1
37319: ST_TO_ADDR
// if btype = b_workshop then
37320: LD_VAR 0 5
37324: PUSH
37325: LD_INT 2
37327: EQUAL
37328: IFFALSE 37338
// btype := b_factory ;
37330: LD_ADDR_VAR 0 5
37334: PUSH
37335: LD_INT 3
37337: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37338: LD_ADDR_VAR 0 4
37342: PUSH
37343: LD_VAR 0 5
37347: PPUSH
37348: LD_VAR 0 1
37352: PPUSH
37353: CALL_OW 248
37357: PPUSH
37358: CALL_OW 450
37362: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37363: LD_ADDR_VAR 0 2
37367: PUSH
37368: LD_VAR 0 3
37372: PPUSH
37373: LD_INT 1
37375: PPUSH
37376: CALL_OW 275
37380: PUSH
37381: LD_VAR 0 4
37385: PUSH
37386: LD_INT 1
37388: ARRAY
37389: GREATEREQUAL
37390: PUSH
37391: LD_VAR 0 3
37395: PPUSH
37396: LD_INT 2
37398: PPUSH
37399: CALL_OW 275
37403: PUSH
37404: LD_VAR 0 4
37408: PUSH
37409: LD_INT 2
37411: ARRAY
37412: GREATEREQUAL
37413: AND
37414: PUSH
37415: LD_VAR 0 3
37419: PPUSH
37420: LD_INT 3
37422: PPUSH
37423: CALL_OW 275
37427: PUSH
37428: LD_VAR 0 4
37432: PUSH
37433: LD_INT 3
37435: ARRAY
37436: GREATEREQUAL
37437: AND
37438: ST_TO_ADDR
// end ;
37439: LD_VAR 0 2
37443: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37444: LD_INT 0
37446: PPUSH
37447: PPUSH
37448: PPUSH
// pom := GetBase ( building ) ;
37449: LD_ADDR_VAR 0 4
37453: PUSH
37454: LD_VAR 0 1
37458: PPUSH
37459: CALL_OW 274
37463: ST_TO_ADDR
// if not pom then
37464: LD_VAR 0 4
37468: NOT
37469: IFFALSE 37473
// exit ;
37471: GO 37574
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37473: LD_ADDR_VAR 0 5
37477: PUSH
37478: LD_VAR 0 2
37482: PPUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 248
37492: PPUSH
37493: CALL_OW 450
37497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_VAR 0 4
37507: PPUSH
37508: LD_INT 1
37510: PPUSH
37511: CALL_OW 275
37515: PUSH
37516: LD_VAR 0 5
37520: PUSH
37521: LD_INT 1
37523: ARRAY
37524: GREATEREQUAL
37525: PUSH
37526: LD_VAR 0 4
37530: PPUSH
37531: LD_INT 2
37533: PPUSH
37534: CALL_OW 275
37538: PUSH
37539: LD_VAR 0 5
37543: PUSH
37544: LD_INT 2
37546: ARRAY
37547: GREATEREQUAL
37548: AND
37549: PUSH
37550: LD_VAR 0 4
37554: PPUSH
37555: LD_INT 3
37557: PPUSH
37558: CALL_OW 275
37562: PUSH
37563: LD_VAR 0 5
37567: PUSH
37568: LD_INT 3
37570: ARRAY
37571: GREATEREQUAL
37572: AND
37573: ST_TO_ADDR
// end ;
37574: LD_VAR 0 3
37578: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37579: LD_INT 0
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
// result := false ;
37592: LD_ADDR_VAR 0 8
37596: PUSH
37597: LD_INT 0
37599: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37600: LD_VAR 0 5
37604: NOT
37605: PUSH
37606: LD_VAR 0 1
37610: NOT
37611: OR
37612: PUSH
37613: LD_VAR 0 2
37617: NOT
37618: OR
37619: PUSH
37620: LD_VAR 0 3
37624: NOT
37625: OR
37626: IFFALSE 37630
// exit ;
37628: GO 38444
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37630: LD_ADDR_VAR 0 14
37634: PUSH
37635: LD_VAR 0 1
37639: PPUSH
37640: LD_VAR 0 2
37644: PPUSH
37645: LD_VAR 0 3
37649: PPUSH
37650: LD_VAR 0 4
37654: PPUSH
37655: LD_VAR 0 5
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: CALL_OW 248
37668: PPUSH
37669: LD_INT 0
37671: PPUSH
37672: CALL 39697 0 6
37676: ST_TO_ADDR
// if not hexes then
37677: LD_VAR 0 14
37681: NOT
37682: IFFALSE 37686
// exit ;
37684: GO 38444
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37686: LD_ADDR_VAR 0 17
37690: PUSH
37691: LD_VAR 0 5
37695: PPUSH
37696: LD_INT 22
37698: PUSH
37699: LD_VAR 0 13
37703: PPUSH
37704: CALL_OW 255
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 30
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 30
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PPUSH
37745: CALL_OW 72
37749: ST_TO_ADDR
// for i = 1 to hexes do
37750: LD_ADDR_VAR 0 9
37754: PUSH
37755: DOUBLE
37756: LD_INT 1
37758: DEC
37759: ST_TO_ADDR
37760: LD_VAR 0 14
37764: PUSH
37765: FOR_TO
37766: IFFALSE 38442
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37768: LD_ADDR_VAR 0 13
37772: PUSH
37773: LD_VAR 0 14
37777: PUSH
37778: LD_VAR 0 9
37782: ARRAY
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: PPUSH
37788: LD_VAR 0 14
37792: PUSH
37793: LD_VAR 0 9
37797: ARRAY
37798: PUSH
37799: LD_INT 2
37801: ARRAY
37802: PPUSH
37803: CALL_OW 428
37807: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37808: LD_VAR 0 14
37812: PUSH
37813: LD_VAR 0 9
37817: ARRAY
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PPUSH
37823: LD_VAR 0 14
37827: PUSH
37828: LD_VAR 0 9
37832: ARRAY
37833: PUSH
37834: LD_INT 2
37836: ARRAY
37837: PPUSH
37838: CALL_OW 351
37842: PUSH
37843: LD_VAR 0 14
37847: PUSH
37848: LD_VAR 0 9
37852: ARRAY
37853: PUSH
37854: LD_INT 1
37856: ARRAY
37857: PPUSH
37858: LD_VAR 0 14
37862: PUSH
37863: LD_VAR 0 9
37867: ARRAY
37868: PUSH
37869: LD_INT 2
37871: ARRAY
37872: PPUSH
37873: CALL_OW 488
37877: NOT
37878: OR
37879: PUSH
37880: LD_VAR 0 13
37884: PPUSH
37885: CALL_OW 247
37889: PUSH
37890: LD_INT 3
37892: EQUAL
37893: OR
37894: IFFALSE 37900
// exit ;
37896: POP
37897: POP
37898: GO 38444
// if not tmp then
37900: LD_VAR 0 13
37904: NOT
37905: IFFALSE 37909
// continue ;
37907: GO 37765
// result := true ;
37909: LD_ADDR_VAR 0 8
37913: PUSH
37914: LD_INT 1
37916: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37917: LD_VAR 0 6
37921: PUSH
37922: LD_VAR 0 13
37926: PPUSH
37927: CALL_OW 247
37931: PUSH
37932: LD_INT 2
37934: EQUAL
37935: AND
37936: PUSH
37937: LD_VAR 0 13
37941: PPUSH
37942: CALL_OW 263
37946: PUSH
37947: LD_INT 1
37949: EQUAL
37950: AND
37951: IFFALSE 38115
// begin if IsDrivenBy ( tmp ) then
37953: LD_VAR 0 13
37957: PPUSH
37958: CALL_OW 311
37962: IFFALSE 37966
// continue ;
37964: GO 37765
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37966: LD_VAR 0 6
37970: PPUSH
37971: LD_INT 3
37973: PUSH
37974: LD_INT 60
37976: PUSH
37977: EMPTY
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: LD_INT 55
37989: PUSH
37990: EMPTY
37991: LIST
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PPUSH
38001: CALL_OW 72
38005: IFFALSE 38113
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38007: LD_ADDR_VAR 0 18
38011: PUSH
38012: LD_VAR 0 6
38016: PPUSH
38017: LD_INT 3
38019: PUSH
38020: LD_INT 60
38022: PUSH
38023: EMPTY
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 55
38035: PUSH
38036: EMPTY
38037: LIST
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PPUSH
38047: CALL_OW 72
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: ST_TO_ADDR
// if IsInUnit ( driver ) then
38056: LD_VAR 0 18
38060: PPUSH
38061: CALL_OW 310
38065: IFFALSE 38076
// ComExit ( driver ) ;
38067: LD_VAR 0 18
38071: PPUSH
38072: CALL 63476 0 1
// AddComEnterUnit ( driver , tmp ) ;
38076: LD_VAR 0 18
38080: PPUSH
38081: LD_VAR 0 13
38085: PPUSH
38086: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38090: LD_VAR 0 18
38094: PPUSH
38095: LD_VAR 0 7
38099: PPUSH
38100: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38104: LD_VAR 0 18
38108: PPUSH
38109: CALL_OW 181
// end ; continue ;
38113: GO 37765
// end ; if not cleaners or not tmp in cleaners then
38115: LD_VAR 0 6
38119: NOT
38120: PUSH
38121: LD_VAR 0 13
38125: PUSH
38126: LD_VAR 0 6
38130: IN
38131: NOT
38132: OR
38133: IFFALSE 38440
// begin if dep then
38135: LD_VAR 0 17
38139: IFFALSE 38275
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38141: LD_ADDR_VAR 0 16
38145: PUSH
38146: LD_VAR 0 17
38150: PUSH
38151: LD_INT 1
38153: ARRAY
38154: PPUSH
38155: CALL_OW 250
38159: PPUSH
38160: LD_VAR 0 17
38164: PUSH
38165: LD_INT 1
38167: ARRAY
38168: PPUSH
38169: CALL_OW 254
38173: PPUSH
38174: LD_INT 5
38176: PPUSH
38177: CALL_OW 272
38181: PUSH
38182: LD_VAR 0 17
38186: PUSH
38187: LD_INT 1
38189: ARRAY
38190: PPUSH
38191: CALL_OW 251
38195: PPUSH
38196: LD_VAR 0 17
38200: PUSH
38201: LD_INT 1
38203: ARRAY
38204: PPUSH
38205: CALL_OW 254
38209: PPUSH
38210: LD_INT 5
38212: PPUSH
38213: CALL_OW 273
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38222: LD_VAR 0 16
38226: PUSH
38227: LD_INT 1
38229: ARRAY
38230: PPUSH
38231: LD_VAR 0 16
38235: PUSH
38236: LD_INT 2
38238: ARRAY
38239: PPUSH
38240: CALL_OW 488
38244: IFFALSE 38275
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38246: LD_VAR 0 13
38250: PPUSH
38251: LD_VAR 0 16
38255: PUSH
38256: LD_INT 1
38258: ARRAY
38259: PPUSH
38260: LD_VAR 0 16
38264: PUSH
38265: LD_INT 2
38267: ARRAY
38268: PPUSH
38269: CALL_OW 111
// continue ;
38273: GO 37765
// end ; end ; r := GetDir ( tmp ) ;
38275: LD_ADDR_VAR 0 15
38279: PUSH
38280: LD_VAR 0 13
38284: PPUSH
38285: CALL_OW 254
38289: ST_TO_ADDR
// if r = 5 then
38290: LD_VAR 0 15
38294: PUSH
38295: LD_INT 5
38297: EQUAL
38298: IFFALSE 38308
// r := 0 ;
38300: LD_ADDR_VAR 0 15
38304: PUSH
38305: LD_INT 0
38307: ST_TO_ADDR
// for j = r to 5 do
38308: LD_ADDR_VAR 0 10
38312: PUSH
38313: DOUBLE
38314: LD_VAR 0 15
38318: DEC
38319: ST_TO_ADDR
38320: LD_INT 5
38322: PUSH
38323: FOR_TO
38324: IFFALSE 38438
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38326: LD_ADDR_VAR 0 11
38330: PUSH
38331: LD_VAR 0 13
38335: PPUSH
38336: CALL_OW 250
38340: PPUSH
38341: LD_VAR 0 10
38345: PPUSH
38346: LD_INT 2
38348: PPUSH
38349: CALL_OW 272
38353: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38354: LD_ADDR_VAR 0 12
38358: PUSH
38359: LD_VAR 0 13
38363: PPUSH
38364: CALL_OW 251
38368: PPUSH
38369: LD_VAR 0 10
38373: PPUSH
38374: LD_INT 2
38376: PPUSH
38377: CALL_OW 273
38381: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38382: LD_VAR 0 11
38386: PPUSH
38387: LD_VAR 0 12
38391: PPUSH
38392: CALL_OW 488
38396: PUSH
38397: LD_VAR 0 11
38401: PPUSH
38402: LD_VAR 0 12
38406: PPUSH
38407: CALL_OW 428
38411: NOT
38412: AND
38413: IFFALSE 38436
// begin ComMoveXY ( tmp , _x , _y ) ;
38415: LD_VAR 0 13
38419: PPUSH
38420: LD_VAR 0 11
38424: PPUSH
38425: LD_VAR 0 12
38429: PPUSH
38430: CALL_OW 111
// break ;
38434: GO 38438
// end ; end ;
38436: GO 38323
38438: POP
38439: POP
// end ; end ;
38440: GO 37765
38442: POP
38443: POP
// end ;
38444: LD_VAR 0 8
38448: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38449: LD_INT 0
38451: PPUSH
// result := true ;
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: LD_INT 1
38459: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38460: LD_VAR 0 2
38464: PUSH
38465: LD_INT 24
38467: DOUBLE
38468: EQUAL
38469: IFTRUE 38479
38471: LD_INT 33
38473: DOUBLE
38474: EQUAL
38475: IFTRUE 38479
38477: GO 38504
38479: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38480: LD_ADDR_VAR 0 3
38484: PUSH
38485: LD_INT 32
38487: PPUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 321
38497: PUSH
38498: LD_INT 2
38500: EQUAL
38501: ST_TO_ADDR
38502: GO 38820
38504: LD_INT 20
38506: DOUBLE
38507: EQUAL
38508: IFTRUE 38512
38510: GO 38537
38512: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38513: LD_ADDR_VAR 0 3
38517: PUSH
38518: LD_INT 6
38520: PPUSH
38521: LD_VAR 0 1
38525: PPUSH
38526: CALL_OW 321
38530: PUSH
38531: LD_INT 2
38533: EQUAL
38534: ST_TO_ADDR
38535: GO 38820
38537: LD_INT 22
38539: DOUBLE
38540: EQUAL
38541: IFTRUE 38551
38543: LD_INT 36
38545: DOUBLE
38546: EQUAL
38547: IFTRUE 38551
38549: GO 38576
38551: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38552: LD_ADDR_VAR 0 3
38556: PUSH
38557: LD_INT 15
38559: PPUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL_OW 321
38569: PUSH
38570: LD_INT 2
38572: EQUAL
38573: ST_TO_ADDR
38574: GO 38820
38576: LD_INT 30
38578: DOUBLE
38579: EQUAL
38580: IFTRUE 38584
38582: GO 38609
38584: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38585: LD_ADDR_VAR 0 3
38589: PUSH
38590: LD_INT 20
38592: PPUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 321
38602: PUSH
38603: LD_INT 2
38605: EQUAL
38606: ST_TO_ADDR
38607: GO 38820
38609: LD_INT 28
38611: DOUBLE
38612: EQUAL
38613: IFTRUE 38623
38615: LD_INT 21
38617: DOUBLE
38618: EQUAL
38619: IFTRUE 38623
38621: GO 38648
38623: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38624: LD_ADDR_VAR 0 3
38628: PUSH
38629: LD_INT 21
38631: PPUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 321
38641: PUSH
38642: LD_INT 2
38644: EQUAL
38645: ST_TO_ADDR
38646: GO 38820
38648: LD_INT 16
38650: DOUBLE
38651: EQUAL
38652: IFTRUE 38656
38654: GO 38681
38656: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38657: LD_ADDR_VAR 0 3
38661: PUSH
38662: LD_INT 84
38664: PPUSH
38665: LD_VAR 0 1
38669: PPUSH
38670: CALL_OW 321
38674: PUSH
38675: LD_INT 2
38677: EQUAL
38678: ST_TO_ADDR
38679: GO 38820
38681: LD_INT 19
38683: DOUBLE
38684: EQUAL
38685: IFTRUE 38695
38687: LD_INT 23
38689: DOUBLE
38690: EQUAL
38691: IFTRUE 38695
38693: GO 38720
38695: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_INT 83
38703: PPUSH
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 321
38713: PUSH
38714: LD_INT 2
38716: EQUAL
38717: ST_TO_ADDR
38718: GO 38820
38720: LD_INT 17
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38728
38726: GO 38753
38728: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38729: LD_ADDR_VAR 0 3
38733: PUSH
38734: LD_INT 39
38736: PPUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL_OW 321
38746: PUSH
38747: LD_INT 2
38749: EQUAL
38750: ST_TO_ADDR
38751: GO 38820
38753: LD_INT 18
38755: DOUBLE
38756: EQUAL
38757: IFTRUE 38761
38759: GO 38786
38761: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38762: LD_ADDR_VAR 0 3
38766: PUSH
38767: LD_INT 40
38769: PPUSH
38770: LD_VAR 0 1
38774: PPUSH
38775: CALL_OW 321
38779: PUSH
38780: LD_INT 2
38782: EQUAL
38783: ST_TO_ADDR
38784: GO 38820
38786: LD_INT 27
38788: DOUBLE
38789: EQUAL
38790: IFTRUE 38794
38792: GO 38819
38794: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38795: LD_ADDR_VAR 0 3
38799: PUSH
38800: LD_INT 35
38802: PPUSH
38803: LD_VAR 0 1
38807: PPUSH
38808: CALL_OW 321
38812: PUSH
38813: LD_INT 2
38815: EQUAL
38816: ST_TO_ADDR
38817: GO 38820
38819: POP
// end ;
38820: LD_VAR 0 3
38824: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38825: LD_INT 0
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
// result := false ;
38838: LD_ADDR_VAR 0 6
38842: PUSH
38843: LD_INT 0
38845: ST_TO_ADDR
// if btype = b_depot then
38846: LD_VAR 0 2
38850: PUSH
38851: LD_INT 0
38853: EQUAL
38854: IFFALSE 38866
// begin result := true ;
38856: LD_ADDR_VAR 0 6
38860: PUSH
38861: LD_INT 1
38863: ST_TO_ADDR
// exit ;
38864: GO 39692
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38866: LD_VAR 0 1
38870: NOT
38871: PUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: CALL_OW 266
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: IN
38892: NOT
38893: OR
38894: PUSH
38895: LD_VAR 0 2
38899: NOT
38900: OR
38901: PUSH
38902: LD_VAR 0 5
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: LD_INT 3
38918: PUSH
38919: LD_INT 4
38921: PUSH
38922: LD_INT 5
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: IN
38933: NOT
38934: OR
38935: PUSH
38936: LD_VAR 0 3
38940: PPUSH
38941: LD_VAR 0 4
38945: PPUSH
38946: CALL_OW 488
38950: NOT
38951: OR
38952: IFFALSE 38956
// exit ;
38954: GO 39692
// side := GetSide ( depot ) ;
38956: LD_ADDR_VAR 0 9
38960: PUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 255
38970: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38971: LD_VAR 0 9
38975: PPUSH
38976: LD_VAR 0 2
38980: PPUSH
38981: CALL 38449 0 2
38985: NOT
38986: IFFALSE 38990
// exit ;
38988: GO 39692
// pom := GetBase ( depot ) ;
38990: LD_ADDR_VAR 0 10
38994: PUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 274
39004: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39005: LD_ADDR_VAR 0 11
39009: PUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: LD_VAR 0 1
39019: PPUSH
39020: CALL_OW 248
39024: PPUSH
39025: CALL_OW 450
39029: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39030: LD_VAR 0 10
39034: PPUSH
39035: LD_INT 1
39037: PPUSH
39038: CALL_OW 275
39042: PUSH
39043: LD_VAR 0 11
39047: PUSH
39048: LD_INT 1
39050: ARRAY
39051: GREATEREQUAL
39052: PUSH
39053: LD_VAR 0 10
39057: PPUSH
39058: LD_INT 2
39060: PPUSH
39061: CALL_OW 275
39065: PUSH
39066: LD_VAR 0 11
39070: PUSH
39071: LD_INT 2
39073: ARRAY
39074: GREATEREQUAL
39075: AND
39076: PUSH
39077: LD_VAR 0 10
39081: PPUSH
39082: LD_INT 3
39084: PPUSH
39085: CALL_OW 275
39089: PUSH
39090: LD_VAR 0 11
39094: PUSH
39095: LD_INT 3
39097: ARRAY
39098: GREATEREQUAL
39099: AND
39100: NOT
39101: IFFALSE 39105
// exit ;
39103: GO 39692
// if GetBType ( depot ) = b_depot then
39105: LD_VAR 0 1
39109: PPUSH
39110: CALL_OW 266
39114: PUSH
39115: LD_INT 0
39117: EQUAL
39118: IFFALSE 39130
// dist := 28 else
39120: LD_ADDR_VAR 0 14
39124: PUSH
39125: LD_INT 28
39127: ST_TO_ADDR
39128: GO 39138
// dist := 36 ;
39130: LD_ADDR_VAR 0 14
39134: PUSH
39135: LD_INT 36
39137: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39138: LD_VAR 0 1
39142: PPUSH
39143: LD_VAR 0 3
39147: PPUSH
39148: LD_VAR 0 4
39152: PPUSH
39153: CALL_OW 297
39157: PUSH
39158: LD_VAR 0 14
39162: GREATER
39163: IFFALSE 39167
// exit ;
39165: GO 39692
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39167: LD_ADDR_VAR 0 12
39171: PUSH
39172: LD_VAR 0 2
39176: PPUSH
39177: LD_VAR 0 3
39181: PPUSH
39182: LD_VAR 0 4
39186: PPUSH
39187: LD_VAR 0 5
39191: PPUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 248
39201: PPUSH
39202: LD_INT 0
39204: PPUSH
39205: CALL 39697 0 6
39209: ST_TO_ADDR
// if not hexes then
39210: LD_VAR 0 12
39214: NOT
39215: IFFALSE 39219
// exit ;
39217: GO 39692
// hex := GetHexInfo ( x , y ) ;
39219: LD_ADDR_VAR 0 15
39223: PUSH
39224: LD_VAR 0 3
39228: PPUSH
39229: LD_VAR 0 4
39233: PPUSH
39234: CALL_OW 546
39238: ST_TO_ADDR
// if hex [ 1 ] then
39239: LD_VAR 0 15
39243: PUSH
39244: LD_INT 1
39246: ARRAY
39247: IFFALSE 39251
// exit ;
39249: GO 39692
// height := hex [ 2 ] ;
39251: LD_ADDR_VAR 0 13
39255: PUSH
39256: LD_VAR 0 15
39260: PUSH
39261: LD_INT 2
39263: ARRAY
39264: ST_TO_ADDR
// for i = 1 to hexes do
39265: LD_ADDR_VAR 0 7
39269: PUSH
39270: DOUBLE
39271: LD_INT 1
39273: DEC
39274: ST_TO_ADDR
39275: LD_VAR 0 12
39279: PUSH
39280: FOR_TO
39281: IFFALSE 39611
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39283: LD_VAR 0 12
39287: PUSH
39288: LD_VAR 0 7
39292: ARRAY
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: PPUSH
39298: LD_VAR 0 12
39302: PUSH
39303: LD_VAR 0 7
39307: ARRAY
39308: PUSH
39309: LD_INT 2
39311: ARRAY
39312: PPUSH
39313: CALL_OW 488
39317: NOT
39318: PUSH
39319: LD_VAR 0 12
39323: PUSH
39324: LD_VAR 0 7
39328: ARRAY
39329: PUSH
39330: LD_INT 1
39332: ARRAY
39333: PPUSH
39334: LD_VAR 0 12
39338: PUSH
39339: LD_VAR 0 7
39343: ARRAY
39344: PUSH
39345: LD_INT 2
39347: ARRAY
39348: PPUSH
39349: CALL_OW 428
39353: PUSH
39354: LD_INT 0
39356: GREATER
39357: OR
39358: PUSH
39359: LD_VAR 0 12
39363: PUSH
39364: LD_VAR 0 7
39368: ARRAY
39369: PUSH
39370: LD_INT 1
39372: ARRAY
39373: PPUSH
39374: LD_VAR 0 12
39378: PUSH
39379: LD_VAR 0 7
39383: ARRAY
39384: PUSH
39385: LD_INT 2
39387: ARRAY
39388: PPUSH
39389: CALL_OW 351
39393: OR
39394: IFFALSE 39400
// exit ;
39396: POP
39397: POP
39398: GO 39692
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39400: LD_ADDR_VAR 0 8
39404: PUSH
39405: LD_VAR 0 12
39409: PUSH
39410: LD_VAR 0 7
39414: ARRAY
39415: PUSH
39416: LD_INT 1
39418: ARRAY
39419: PPUSH
39420: LD_VAR 0 12
39424: PUSH
39425: LD_VAR 0 7
39429: ARRAY
39430: PUSH
39431: LD_INT 2
39433: ARRAY
39434: PPUSH
39435: CALL_OW 546
39439: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39440: LD_VAR 0 8
39444: PUSH
39445: LD_INT 1
39447: ARRAY
39448: PUSH
39449: LD_VAR 0 8
39453: PUSH
39454: LD_INT 2
39456: ARRAY
39457: PUSH
39458: LD_VAR 0 13
39462: PUSH
39463: LD_INT 2
39465: PLUS
39466: GREATER
39467: OR
39468: PUSH
39469: LD_VAR 0 8
39473: PUSH
39474: LD_INT 2
39476: ARRAY
39477: PUSH
39478: LD_VAR 0 13
39482: PUSH
39483: LD_INT 2
39485: MINUS
39486: LESS
39487: OR
39488: PUSH
39489: LD_VAR 0 8
39493: PUSH
39494: LD_INT 3
39496: ARRAY
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: LD_INT 8
39503: PUSH
39504: LD_INT 9
39506: PUSH
39507: LD_INT 10
39509: PUSH
39510: LD_INT 11
39512: PUSH
39513: LD_INT 12
39515: PUSH
39516: LD_INT 13
39518: PUSH
39519: LD_INT 16
39521: PUSH
39522: LD_INT 17
39524: PUSH
39525: LD_INT 18
39527: PUSH
39528: LD_INT 19
39530: PUSH
39531: LD_INT 20
39533: PUSH
39534: LD_INT 21
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: IN
39552: NOT
39553: OR
39554: PUSH
39555: LD_VAR 0 8
39559: PUSH
39560: LD_INT 5
39562: ARRAY
39563: NOT
39564: OR
39565: PUSH
39566: LD_VAR 0 8
39570: PUSH
39571: LD_INT 6
39573: ARRAY
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 7
39583: PUSH
39584: LD_INT 9
39586: PUSH
39587: LD_INT 10
39589: PUSH
39590: LD_INT 11
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: IN
39601: NOT
39602: OR
39603: IFFALSE 39609
// exit ;
39605: POP
39606: POP
39607: GO 39692
// end ;
39609: GO 39280
39611: POP
39612: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39613: LD_VAR 0 9
39617: PPUSH
39618: LD_VAR 0 3
39622: PPUSH
39623: LD_VAR 0 4
39627: PPUSH
39628: LD_INT 20
39630: PPUSH
39631: CALL 31615 0 4
39635: PUSH
39636: LD_INT 4
39638: ARRAY
39639: IFFALSE 39643
// exit ;
39641: GO 39692
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39643: LD_VAR 0 2
39647: PUSH
39648: LD_INT 29
39650: PUSH
39651: LD_INT 30
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: IN
39658: PUSH
39659: LD_VAR 0 3
39663: PPUSH
39664: LD_VAR 0 4
39668: PPUSH
39669: LD_VAR 0 9
39673: PPUSH
39674: CALL_OW 440
39678: NOT
39679: AND
39680: IFFALSE 39684
// exit ;
39682: GO 39692
// result := true ;
39684: LD_ADDR_VAR 0 6
39688: PUSH
39689: LD_INT 1
39691: ST_TO_ADDR
// end ;
39692: LD_VAR 0 6
39696: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39697: LD_INT 0
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
39720: PPUSH
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
39728: PPUSH
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
39738: PPUSH
39739: PPUSH
39740: PPUSH
39741: PPUSH
39742: PPUSH
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
// result = [ ] ;
39757: LD_ADDR_VAR 0 7
39761: PUSH
39762: EMPTY
39763: ST_TO_ADDR
// temp_list = [ ] ;
39764: LD_ADDR_VAR 0 9
39768: PUSH
39769: EMPTY
39770: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39771: LD_VAR 0 4
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: LD_INT 4
39790: PUSH
39791: LD_INT 5
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: IN
39802: NOT
39803: PUSH
39804: LD_VAR 0 1
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: IN
39819: PUSH
39820: LD_VAR 0 5
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: IN
39839: NOT
39840: AND
39841: OR
39842: IFFALSE 39846
// exit ;
39844: GO 58237
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39846: LD_VAR 0 1
39850: PUSH
39851: LD_INT 6
39853: PUSH
39854: LD_INT 7
39856: PUSH
39857: LD_INT 8
39859: PUSH
39860: LD_INT 13
39862: PUSH
39863: LD_INT 12
39865: PUSH
39866: LD_INT 15
39868: PUSH
39869: LD_INT 11
39871: PUSH
39872: LD_INT 14
39874: PUSH
39875: LD_INT 10
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: IN
39889: IFFALSE 39899
// btype = b_lab ;
39891: LD_ADDR_VAR 0 1
39895: PUSH
39896: LD_INT 6
39898: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39899: LD_VAR 0 6
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: IN
39918: NOT
39919: PUSH
39920: LD_VAR 0 1
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: LD_INT 6
39939: PUSH
39940: LD_INT 36
39942: PUSH
39943: LD_INT 4
39945: PUSH
39946: LD_INT 5
39948: PUSH
39949: LD_INT 31
39951: PUSH
39952: LD_INT 32
39954: PUSH
39955: LD_INT 33
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: IN
39971: NOT
39972: PUSH
39973: LD_VAR 0 6
39977: PUSH
39978: LD_INT 1
39980: EQUAL
39981: AND
39982: OR
39983: PUSH
39984: LD_VAR 0 1
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: LD_INT 3
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: IN
39999: NOT
40000: PUSH
40001: LD_VAR 0 6
40005: PUSH
40006: LD_INT 2
40008: EQUAL
40009: AND
40010: OR
40011: IFFALSE 40021
// mode = 0 ;
40013: LD_ADDR_VAR 0 6
40017: PUSH
40018: LD_INT 0
40020: ST_TO_ADDR
// case mode of 0 :
40021: LD_VAR 0 6
40025: PUSH
40026: LD_INT 0
40028: DOUBLE
40029: EQUAL
40030: IFTRUE 40034
40032: GO 51487
40034: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40035: LD_ADDR_VAR 0 11
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 2
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 3
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40228: LD_ADDR_VAR 0 12
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: NEG
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 3
40385: NEG
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 3
40396: NEG
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40424: LD_ADDR_VAR 0 13
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: LD_INT 3
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 3
40583: NEG
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 3
40595: NEG
40596: PUSH
40597: LD_INT 3
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40623: LD_ADDR_VAR 0 14
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 3
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 3
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40819: LD_ADDR_VAR 0 15
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 3
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41012: LD_ADDR_VAR 0 16
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 3
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: LD_INT 3
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: LD_INT 3
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41205: LD_ADDR_VAR 0 17
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41435: LD_ADDR_VAR 0 18
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: LD_INT 2
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 2
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41665: LD_ADDR_VAR 0 19
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41895: LD_ADDR_VAR 0 20
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42125: LD_ADDR_VAR 0 21
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 2
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42355: LD_ADDR_VAR 0 22
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 2
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: NEG
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42585: LD_ADDR_VAR 0 23
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: LD_INT 3
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 3
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42865: LD_ADDR_VAR 0 24
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 3
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43141: LD_ADDR_VAR 0 25
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 3
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 3
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43415: LD_ADDR_VAR 0 26
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 2
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 3
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43691: LD_ADDR_VAR 0 27
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 3
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43971: LD_ADDR_VAR 0 28
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: LD_INT 3
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 3
44218: NEG
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44253: LD_ADDR_VAR 0 29
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: LD_INT 3
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 3
44497: NEG
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44532: LD_ADDR_VAR 0 30
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 3
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 3
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 3
44775: NEG
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44810: LD_ADDR_VAR 0 31
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 3
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 3
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 3
45053: NEG
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45088: LD_ADDR_VAR 0 32
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 3
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 3
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 3
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: NEG
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45366: LD_ADDR_VAR 0 33
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: LD_INT 3
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 3
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 3
45610: NEG
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45645: LD_ADDR_VAR 0 34
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45925: LD_ADDR_VAR 0 35
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46037: LD_ADDR_VAR 0 36
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46149: LD_ADDR_VAR 0 37
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46261: LD_ADDR_VAR 0 38
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46373: LD_ADDR_VAR 0 39
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46485: LD_ADDR_VAR 0 40
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46597: LD_ADDR_VAR 0 41
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: LD_INT 3
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: LD_INT 3
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46947: LD_ADDR_VAR 0 42
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 3
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 3
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 3
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 3
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: LD_INT 3
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47297: LD_ADDR_VAR 0 43
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 3
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 3
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47645: LD_ADDR_VAR 0 44
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 3
47930: NEG
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: NEG
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 3
47954: NEG
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47995: LD_ADDR_VAR 0 45
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 3
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48345: LD_ADDR_VAR 0 46
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 3
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 3
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48693: LD_ADDR_VAR 0 47
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48844: LD_ADDR_VAR 0 48
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48991: LD_ADDR_VAR 0 49
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49135: LD_ADDR_VAR 0 50
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49279: LD_ADDR_VAR 0 51
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49426: LD_ADDR_VAR 0 52
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49577: LD_ADDR_VAR 0 53
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49807: LD_ADDR_VAR 0 54
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50037: LD_ADDR_VAR 0 55
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50267: LD_ADDR_VAR 0 56
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50497: LD_ADDR_VAR 0 57
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50727: LD_ADDR_VAR 0 58
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50957: LD_ADDR_VAR 0 59
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51045: LD_ADDR_VAR 0 60
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51133: LD_ADDR_VAR 0 61
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51221: LD_ADDR_VAR 0 62
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51309: LD_ADDR_VAR 0 63
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51397: LD_ADDR_VAR 0 64
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: ST_TO_ADDR
// end ; 1 :
51485: GO 57382
51487: LD_INT 1
51489: DOUBLE
51490: EQUAL
51491: IFTRUE 51495
51493: GO 54118
51495: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51496: LD_ADDR_VAR 0 11
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 3
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51540: LD_ADDR_VAR 0 12
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 3
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51581: LD_ADDR_VAR 0 13
51585: PUSH
51586: LD_INT 3
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: LD_INT 3
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 3
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51621: LD_ADDR_VAR 0 14
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51662: LD_ADDR_VAR 0 15
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51706: LD_ADDR_VAR 0 16
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: LD_INT 3
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51752: LD_ADDR_VAR 0 17
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51796: LD_ADDR_VAR 0 18
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51837: LD_ADDR_VAR 0 19
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 3
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51877: LD_ADDR_VAR 0 20
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51918: LD_ADDR_VAR 0 21
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 3
51936: NEG
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51962: LD_ADDR_VAR 0 22
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 3
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52008: LD_ADDR_VAR 0 23
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 3
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: LD_INT 4
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52052: LD_ADDR_VAR 0 24
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 4
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52093: LD_ADDR_VAR 0 25
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: LD_INT 4
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52133: LD_ADDR_VAR 0 26
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: LD_INT 4
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52174: LD_ADDR_VAR 0 27
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 4
52203: NEG
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52218: LD_ADDR_VAR 0 28
52222: PUSH
52223: LD_INT 3
52225: NEG
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: LD_INT 4
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 4
52249: NEG
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52264: LD_ADDR_VAR 0 29
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 4
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 4
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 3
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 5
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 5
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 4
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 6
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 6
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 5
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52419: LD_ADDR_VAR 0 30
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 4
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 4
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 4
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 5
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 5
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 6
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 6
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52562: LD_ADDR_VAR 0 31
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 4
52599: PUSH
52600: LD_INT 3
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 4
52609: PUSH
52610: LD_INT 4
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 3
52619: PUSH
52620: LD_INT 4
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 5
52629: PUSH
52630: LD_INT 4
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 5
52639: PUSH
52640: LD_INT 5
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 4
52649: PUSH
52650: LD_INT 5
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 6
52659: PUSH
52660: LD_INT 5
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 6
52669: PUSH
52670: LD_INT 6
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 5
52679: PUSH
52680: LD_INT 6
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52701: LD_ADDR_VAR 0 32
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 4
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 4
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 5
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 5
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 4
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 6
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 6
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 5
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52844: LD_ADDR_VAR 0 33
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 4
52896: NEG
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 4
52907: NEG
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 4
52919: NEG
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 5
52930: NEG
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 5
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 5
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 6
52964: NEG
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 6
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52999: LD_ADDR_VAR 0 34
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: LD_INT 3
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 3
53042: NEG
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 4
53054: NEG
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 4
53066: NEG
53067: PUSH
53068: LD_INT 4
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 4
53078: NEG
53079: PUSH
53080: LD_INT 5
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 5
53090: NEG
53091: PUSH
53092: LD_INT 4
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 5
53102: NEG
53103: PUSH
53104: LD_INT 5
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 5
53114: NEG
53115: PUSH
53116: LD_INT 6
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 6
53126: NEG
53127: PUSH
53128: LD_INT 5
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 6
53138: NEG
53139: PUSH
53140: LD_INT 6
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53162: LD_ADDR_VAR 0 41
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53206: LD_ADDR_VAR 0 42
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53247: LD_ADDR_VAR 0 43
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53287: LD_ADDR_VAR 0 44
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53328: LD_ADDR_VAR 0 45
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53372: LD_ADDR_VAR 0 46
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 3
53403: NEG
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53418: LD_ADDR_VAR 0 47
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53451: LD_ADDR_VAR 0 48
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53482: LD_ADDR_VAR 0 49
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53511: LD_ADDR_VAR 0 50
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53540: LD_ADDR_VAR 0 51
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53571: LD_ADDR_VAR 0 52
53575: PUSH
53576: LD_INT 3
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53604: LD_ADDR_VAR 0 53
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: LIST
53647: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53648: LD_ADDR_VAR 0 54
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53689: LD_ADDR_VAR 0 55
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53729: LD_ADDR_VAR 0 56
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 3
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53770: LD_ADDR_VAR 0 57
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 3
53788: NEG
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: LIST
53813: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53814: LD_ADDR_VAR 0 58
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53860: LD_ADDR_VAR 0 59
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53904: LD_ADDR_VAR 0 60
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53945: LD_ADDR_VAR 0 61
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53985: LD_ADDR_VAR 0 62
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54026: LD_ADDR_VAR 0 63
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54070: LD_ADDR_VAR 0 64
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// end ; 2 :
54116: GO 57382
54118: LD_INT 2
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54126
54124: GO 57381
54126: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54127: LD_ADDR_VAR 0 29
54131: PUSH
54132: LD_INT 4
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 4
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 5
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 5
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 4
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 3
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 3
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 5
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 3
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 4
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 4
54257: PUSH
54258: LD_INT 4
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 4
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 4
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 4
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 4
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 5
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 5
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 4
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 5
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 4
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 4
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 4
54512: NEG
54513: PUSH
54514: LD_INT 4
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 4
54524: NEG
54525: PUSH
54526: LD_INT 5
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 4
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 4
54560: NEG
54561: PUSH
54562: LD_INT 3
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 5
54572: NEG
54573: PUSH
54574: LD_INT 4
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 5
54584: NEG
54585: PUSH
54586: LD_INT 5
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: LD_INT 5
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 5
54608: NEG
54609: PUSH
54610: LD_INT 3
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54665: LD_ADDR_VAR 0 30
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: LD_INT 4
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 5
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 5
54702: PUSH
54703: LD_INT 5
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 4
54712: PUSH
54713: LD_INT 5
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 4
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 5
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 5
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 3
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 4
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 4
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 4
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 4
54855: NEG
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 4
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 5
54911: NEG
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 5
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 5
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 3
54969: NEG
54970: PUSH
54971: LD_INT 4
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: NEG
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 4
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 4
55029: NEG
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 4
55053: NEG
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 4
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 5
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 4
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 4
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 5
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 5
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55212: LD_ADDR_VAR 0 31
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 4
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 5
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 5
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 4
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: LD_INT 5
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 3
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 4
55368: NEG
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 4
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 4
55391: NEG
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 4
55414: NEG
55415: PUSH
55416: LD_INT 4
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 4
55426: NEG
55427: PUSH
55428: LD_INT 5
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: LD_INT 4
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: NEG
55451: PUSH
55452: LD_INT 3
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 4
55462: NEG
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 5
55474: NEG
55475: PUSH
55476: LD_INT 4
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 5
55486: NEG
55487: PUSH
55488: LD_INT 5
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: NEG
55499: PUSH
55500: LD_INT 5
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 5
55510: NEG
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 4
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 4
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: LD_INT 4
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 4
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 4
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 5
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 5
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 4
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 3
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 5
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55762: LD_ADDR_VAR 0 32
55766: PUSH
55767: LD_INT 4
55769: NEG
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 4
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 4
55814: NEG
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 5
55825: NEG
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 5
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 5
55848: NEG
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 3
55860: NEG
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: NEG
55872: PUSH
55873: LD_INT 3
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: LD_INT 4
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 4
55931: NEG
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 4
55943: NEG
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 4
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 4
55967: NEG
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 4
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 5
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 4
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 3
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 4
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 5
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: LD_INT 5
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 4
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 4
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 4
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 4
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 5
56194: PUSH
56195: LD_INT 4
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 5
56204: PUSH
56205: LD_INT 5
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 4
56214: PUSH
56215: LD_INT 5
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: LD_INT 4
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 5
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 5
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56309: LD_ADDR_VAR 0 33
56313: PUSH
56314: LD_INT 4
56316: NEG
56317: PUSH
56318: LD_INT 4
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 4
56328: NEG
56329: PUSH
56330: LD_INT 5
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: LD_INT 4
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 4
56364: NEG
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 5
56376: NEG
56377: PUSH
56378: LD_INT 4
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 5
56388: NEG
56389: PUSH
56390: LD_INT 5
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: NEG
56401: PUSH
56402: LD_INT 5
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 5
56412: NEG
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 3
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 4
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 4
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: LD_INT 4
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 4
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 4
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 5
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 5
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 3
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 5
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 4
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: LD_INT 4
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: LD_INT 4
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 4
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: LD_INT 4
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 4
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 3
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 4
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 5
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 5
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 4
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 5
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56847: LD_ADDR_VAR 0 34
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 4
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 5
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 4
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 3
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: LD_INT 4
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 5
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 5
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 4
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 4
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 4
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 4
57049: PUSH
57050: LD_INT 4
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 4
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 5
57069: PUSH
57070: LD_INT 4
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 5
57079: PUSH
57080: LD_INT 5
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 4
57089: PUSH
57090: LD_INT 5
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 3
57099: PUSH
57100: LD_INT 4
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: LD_INT 3
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 5
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: LD_INT 5
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 4
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 4
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 4
57232: NEG
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 4
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 4
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 5
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 5
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 5
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: ST_TO_ADDR
// end ; end ;
57379: GO 57382
57381: POP
// case btype of b_depot , b_warehouse :
57382: LD_VAR 0 1
57386: PUSH
57387: LD_INT 0
57389: DOUBLE
57390: EQUAL
57391: IFTRUE 57401
57393: LD_INT 1
57395: DOUBLE
57396: EQUAL
57397: IFTRUE 57401
57399: GO 57602
57401: POP
// case nation of nation_american :
57402: LD_VAR 0 5
57406: PUSH
57407: LD_INT 1
57409: DOUBLE
57410: EQUAL
57411: IFTRUE 57415
57413: GO 57471
57415: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57416: LD_ADDR_VAR 0 9
57420: PUSH
57421: LD_VAR 0 11
57425: PUSH
57426: LD_VAR 0 12
57430: PUSH
57431: LD_VAR 0 13
57435: PUSH
57436: LD_VAR 0 14
57440: PUSH
57441: LD_VAR 0 15
57445: PUSH
57446: LD_VAR 0 16
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: PUSH
57459: LD_VAR 0 4
57463: PUSH
57464: LD_INT 1
57466: PLUS
57467: ARRAY
57468: ST_TO_ADDR
57469: GO 57600
57471: LD_INT 2
57473: DOUBLE
57474: EQUAL
57475: IFTRUE 57479
57477: GO 57535
57479: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57480: LD_ADDR_VAR 0 9
57484: PUSH
57485: LD_VAR 0 17
57489: PUSH
57490: LD_VAR 0 18
57494: PUSH
57495: LD_VAR 0 19
57499: PUSH
57500: LD_VAR 0 20
57504: PUSH
57505: LD_VAR 0 21
57509: PUSH
57510: LD_VAR 0 22
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: PUSH
57523: LD_VAR 0 4
57527: PUSH
57528: LD_INT 1
57530: PLUS
57531: ARRAY
57532: ST_TO_ADDR
57533: GO 57600
57535: LD_INT 3
57537: DOUBLE
57538: EQUAL
57539: IFTRUE 57543
57541: GO 57599
57543: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57544: LD_ADDR_VAR 0 9
57548: PUSH
57549: LD_VAR 0 23
57553: PUSH
57554: LD_VAR 0 24
57558: PUSH
57559: LD_VAR 0 25
57563: PUSH
57564: LD_VAR 0 26
57568: PUSH
57569: LD_VAR 0 27
57573: PUSH
57574: LD_VAR 0 28
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: PUSH
57587: LD_VAR 0 4
57591: PUSH
57592: LD_INT 1
57594: PLUS
57595: ARRAY
57596: ST_TO_ADDR
57597: GO 57600
57599: POP
57600: GO 58155
57602: LD_INT 2
57604: DOUBLE
57605: EQUAL
57606: IFTRUE 57616
57608: LD_INT 3
57610: DOUBLE
57611: EQUAL
57612: IFTRUE 57616
57614: GO 57672
57616: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57617: LD_ADDR_VAR 0 9
57621: PUSH
57622: LD_VAR 0 29
57626: PUSH
57627: LD_VAR 0 30
57631: PUSH
57632: LD_VAR 0 31
57636: PUSH
57637: LD_VAR 0 32
57641: PUSH
57642: LD_VAR 0 33
57646: PUSH
57647: LD_VAR 0 34
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: PUSH
57660: LD_VAR 0 4
57664: PUSH
57665: LD_INT 1
57667: PLUS
57668: ARRAY
57669: ST_TO_ADDR
57670: GO 58155
57672: LD_INT 16
57674: DOUBLE
57675: EQUAL
57676: IFTRUE 57734
57678: LD_INT 17
57680: DOUBLE
57681: EQUAL
57682: IFTRUE 57734
57684: LD_INT 18
57686: DOUBLE
57687: EQUAL
57688: IFTRUE 57734
57690: LD_INT 19
57692: DOUBLE
57693: EQUAL
57694: IFTRUE 57734
57696: LD_INT 22
57698: DOUBLE
57699: EQUAL
57700: IFTRUE 57734
57702: LD_INT 20
57704: DOUBLE
57705: EQUAL
57706: IFTRUE 57734
57708: LD_INT 21
57710: DOUBLE
57711: EQUAL
57712: IFTRUE 57734
57714: LD_INT 23
57716: DOUBLE
57717: EQUAL
57718: IFTRUE 57734
57720: LD_INT 24
57722: DOUBLE
57723: EQUAL
57724: IFTRUE 57734
57726: LD_INT 25
57728: DOUBLE
57729: EQUAL
57730: IFTRUE 57734
57732: GO 57790
57734: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57735: LD_ADDR_VAR 0 9
57739: PUSH
57740: LD_VAR 0 35
57744: PUSH
57745: LD_VAR 0 36
57749: PUSH
57750: LD_VAR 0 37
57754: PUSH
57755: LD_VAR 0 38
57759: PUSH
57760: LD_VAR 0 39
57764: PUSH
57765: LD_VAR 0 40
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: PUSH
57778: LD_VAR 0 4
57782: PUSH
57783: LD_INT 1
57785: PLUS
57786: ARRAY
57787: ST_TO_ADDR
57788: GO 58155
57790: LD_INT 6
57792: DOUBLE
57793: EQUAL
57794: IFTRUE 57846
57796: LD_INT 7
57798: DOUBLE
57799: EQUAL
57800: IFTRUE 57846
57802: LD_INT 8
57804: DOUBLE
57805: EQUAL
57806: IFTRUE 57846
57808: LD_INT 13
57810: DOUBLE
57811: EQUAL
57812: IFTRUE 57846
57814: LD_INT 12
57816: DOUBLE
57817: EQUAL
57818: IFTRUE 57846
57820: LD_INT 15
57822: DOUBLE
57823: EQUAL
57824: IFTRUE 57846
57826: LD_INT 11
57828: DOUBLE
57829: EQUAL
57830: IFTRUE 57846
57832: LD_INT 14
57834: DOUBLE
57835: EQUAL
57836: IFTRUE 57846
57838: LD_INT 10
57840: DOUBLE
57841: EQUAL
57842: IFTRUE 57846
57844: GO 57902
57846: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57847: LD_ADDR_VAR 0 9
57851: PUSH
57852: LD_VAR 0 41
57856: PUSH
57857: LD_VAR 0 42
57861: PUSH
57862: LD_VAR 0 43
57866: PUSH
57867: LD_VAR 0 44
57871: PUSH
57872: LD_VAR 0 45
57876: PUSH
57877: LD_VAR 0 46
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: PUSH
57890: LD_VAR 0 4
57894: PUSH
57895: LD_INT 1
57897: PLUS
57898: ARRAY
57899: ST_TO_ADDR
57900: GO 58155
57902: LD_INT 36
57904: DOUBLE
57905: EQUAL
57906: IFTRUE 57910
57908: GO 57966
57910: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57911: LD_ADDR_VAR 0 9
57915: PUSH
57916: LD_VAR 0 47
57920: PUSH
57921: LD_VAR 0 48
57925: PUSH
57926: LD_VAR 0 49
57930: PUSH
57931: LD_VAR 0 50
57935: PUSH
57936: LD_VAR 0 51
57940: PUSH
57941: LD_VAR 0 52
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: PUSH
57954: LD_VAR 0 4
57958: PUSH
57959: LD_INT 1
57961: PLUS
57962: ARRAY
57963: ST_TO_ADDR
57964: GO 58155
57966: LD_INT 4
57968: DOUBLE
57969: EQUAL
57970: IFTRUE 57992
57972: LD_INT 5
57974: DOUBLE
57975: EQUAL
57976: IFTRUE 57992
57978: LD_INT 34
57980: DOUBLE
57981: EQUAL
57982: IFTRUE 57992
57984: LD_INT 37
57986: DOUBLE
57987: EQUAL
57988: IFTRUE 57992
57990: GO 58048
57992: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57993: LD_ADDR_VAR 0 9
57997: PUSH
57998: LD_VAR 0 53
58002: PUSH
58003: LD_VAR 0 54
58007: PUSH
58008: LD_VAR 0 55
58012: PUSH
58013: LD_VAR 0 56
58017: PUSH
58018: LD_VAR 0 57
58022: PUSH
58023: LD_VAR 0 58
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: PUSH
58036: LD_VAR 0 4
58040: PUSH
58041: LD_INT 1
58043: PLUS
58044: ARRAY
58045: ST_TO_ADDR
58046: GO 58155
58048: LD_INT 31
58050: DOUBLE
58051: EQUAL
58052: IFTRUE 58098
58054: LD_INT 32
58056: DOUBLE
58057: EQUAL
58058: IFTRUE 58098
58060: LD_INT 33
58062: DOUBLE
58063: EQUAL
58064: IFTRUE 58098
58066: LD_INT 27
58068: DOUBLE
58069: EQUAL
58070: IFTRUE 58098
58072: LD_INT 26
58074: DOUBLE
58075: EQUAL
58076: IFTRUE 58098
58078: LD_INT 28
58080: DOUBLE
58081: EQUAL
58082: IFTRUE 58098
58084: LD_INT 29
58086: DOUBLE
58087: EQUAL
58088: IFTRUE 58098
58090: LD_INT 30
58092: DOUBLE
58093: EQUAL
58094: IFTRUE 58098
58096: GO 58154
58098: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58099: LD_ADDR_VAR 0 9
58103: PUSH
58104: LD_VAR 0 59
58108: PUSH
58109: LD_VAR 0 60
58113: PUSH
58114: LD_VAR 0 61
58118: PUSH
58119: LD_VAR 0 62
58123: PUSH
58124: LD_VAR 0 63
58128: PUSH
58129: LD_VAR 0 64
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: PUSH
58142: LD_VAR 0 4
58146: PUSH
58147: LD_INT 1
58149: PLUS
58150: ARRAY
58151: ST_TO_ADDR
58152: GO 58155
58154: POP
// temp_list2 = [ ] ;
58155: LD_ADDR_VAR 0 10
58159: PUSH
58160: EMPTY
58161: ST_TO_ADDR
// for i in temp_list do
58162: LD_ADDR_VAR 0 8
58166: PUSH
58167: LD_VAR 0 9
58171: PUSH
58172: FOR_IN
58173: IFFALSE 58225
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58175: LD_ADDR_VAR 0 10
58179: PUSH
58180: LD_VAR 0 10
58184: PUSH
58185: LD_VAR 0 8
58189: PUSH
58190: LD_INT 1
58192: ARRAY
58193: PUSH
58194: LD_VAR 0 2
58198: PLUS
58199: PUSH
58200: LD_VAR 0 8
58204: PUSH
58205: LD_INT 2
58207: ARRAY
58208: PUSH
58209: LD_VAR 0 3
58213: PLUS
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: ADD
58222: ST_TO_ADDR
58223: GO 58172
58225: POP
58226: POP
// result = temp_list2 ;
58227: LD_ADDR_VAR 0 7
58231: PUSH
58232: LD_VAR 0 10
58236: ST_TO_ADDR
// end ;
58237: LD_VAR 0 7
58241: RET
// export function EnemyInRange ( unit , dist ) ; begin
58242: LD_INT 0
58244: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58245: LD_ADDR_VAR 0 3
58249: PUSH
58250: LD_VAR 0 1
58254: PPUSH
58255: CALL_OW 255
58259: PPUSH
58260: LD_VAR 0 1
58264: PPUSH
58265: CALL_OW 250
58269: PPUSH
58270: LD_VAR 0 1
58274: PPUSH
58275: CALL_OW 251
58279: PPUSH
58280: LD_VAR 0 2
58284: PPUSH
58285: CALL 31615 0 4
58289: PUSH
58290: LD_INT 4
58292: ARRAY
58293: ST_TO_ADDR
// end ;
58294: LD_VAR 0 3
58298: RET
// export function PlayerSeeMe ( unit ) ; begin
58299: LD_INT 0
58301: PPUSH
// result := See ( your_side , unit ) ;
58302: LD_ADDR_VAR 0 2
58306: PUSH
58307: LD_OWVAR 2
58311: PPUSH
58312: LD_VAR 0 1
58316: PPUSH
58317: CALL_OW 292
58321: ST_TO_ADDR
// end ;
58322: LD_VAR 0 2
58326: RET
// export function ReverseDir ( unit ) ; begin
58327: LD_INT 0
58329: PPUSH
// if not unit then
58330: LD_VAR 0 1
58334: NOT
58335: IFFALSE 58339
// exit ;
58337: GO 58362
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58339: LD_ADDR_VAR 0 2
58343: PUSH
58344: LD_VAR 0 1
58348: PPUSH
58349: CALL_OW 254
58353: PUSH
58354: LD_INT 3
58356: PLUS
58357: PUSH
58358: LD_INT 6
58360: MOD
58361: ST_TO_ADDR
// end ;
58362: LD_VAR 0 2
58366: RET
// export function ReverseArray ( array ) ; var i ; begin
58367: LD_INT 0
58369: PPUSH
58370: PPUSH
// if not array then
58371: LD_VAR 0 1
58375: NOT
58376: IFFALSE 58380
// exit ;
58378: GO 58435
// result := [ ] ;
58380: LD_ADDR_VAR 0 2
58384: PUSH
58385: EMPTY
58386: ST_TO_ADDR
// for i := array downto 1 do
58387: LD_ADDR_VAR 0 3
58391: PUSH
58392: DOUBLE
58393: LD_VAR 0 1
58397: INC
58398: ST_TO_ADDR
58399: LD_INT 1
58401: PUSH
58402: FOR_DOWNTO
58403: IFFALSE 58433
// result := Join ( result , array [ i ] ) ;
58405: LD_ADDR_VAR 0 2
58409: PUSH
58410: LD_VAR 0 2
58414: PPUSH
58415: LD_VAR 0 1
58419: PUSH
58420: LD_VAR 0 3
58424: ARRAY
58425: PPUSH
58426: CALL 63078 0 2
58430: ST_TO_ADDR
58431: GO 58402
58433: POP
58434: POP
// end ;
58435: LD_VAR 0 2
58439: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58440: LD_INT 0
58442: PPUSH
58443: PPUSH
58444: PPUSH
58445: PPUSH
58446: PPUSH
58447: PPUSH
// if not unit or not hexes then
58448: LD_VAR 0 1
58452: NOT
58453: PUSH
58454: LD_VAR 0 2
58458: NOT
58459: OR
58460: IFFALSE 58464
// exit ;
58462: GO 58587
// dist := 9999 ;
58464: LD_ADDR_VAR 0 5
58468: PUSH
58469: LD_INT 9999
58471: ST_TO_ADDR
// for i = 1 to hexes do
58472: LD_ADDR_VAR 0 4
58476: PUSH
58477: DOUBLE
58478: LD_INT 1
58480: DEC
58481: ST_TO_ADDR
58482: LD_VAR 0 2
58486: PUSH
58487: FOR_TO
58488: IFFALSE 58575
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58490: LD_ADDR_VAR 0 6
58494: PUSH
58495: LD_VAR 0 1
58499: PPUSH
58500: LD_VAR 0 2
58504: PUSH
58505: LD_VAR 0 4
58509: ARRAY
58510: PUSH
58511: LD_INT 1
58513: ARRAY
58514: PPUSH
58515: LD_VAR 0 2
58519: PUSH
58520: LD_VAR 0 4
58524: ARRAY
58525: PUSH
58526: LD_INT 2
58528: ARRAY
58529: PPUSH
58530: CALL_OW 297
58534: ST_TO_ADDR
// if tdist < dist then
58535: LD_VAR 0 6
58539: PUSH
58540: LD_VAR 0 5
58544: LESS
58545: IFFALSE 58573
// begin hex := hexes [ i ] ;
58547: LD_ADDR_VAR 0 8
58551: PUSH
58552: LD_VAR 0 2
58556: PUSH
58557: LD_VAR 0 4
58561: ARRAY
58562: ST_TO_ADDR
// dist := tdist ;
58563: LD_ADDR_VAR 0 5
58567: PUSH
58568: LD_VAR 0 6
58572: ST_TO_ADDR
// end ; end ;
58573: GO 58487
58575: POP
58576: POP
// result := hex ;
58577: LD_ADDR_VAR 0 3
58581: PUSH
58582: LD_VAR 0 8
58586: ST_TO_ADDR
// end ;
58587: LD_VAR 0 3
58591: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58592: LD_INT 0
58594: PPUSH
58595: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58596: LD_VAR 0 1
58600: NOT
58601: PUSH
58602: LD_VAR 0 1
58606: PUSH
58607: LD_INT 21
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 23
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PPUSH
58631: CALL_OW 69
58635: IN
58636: NOT
58637: OR
58638: IFFALSE 58642
// exit ;
58640: GO 58689
// for i = 1 to 3 do
58642: LD_ADDR_VAR 0 3
58646: PUSH
58647: DOUBLE
58648: LD_INT 1
58650: DEC
58651: ST_TO_ADDR
58652: LD_INT 3
58654: PUSH
58655: FOR_TO
58656: IFFALSE 58687
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58658: LD_VAR 0 1
58662: PPUSH
58663: CALL_OW 250
58667: PPUSH
58668: LD_VAR 0 1
58672: PPUSH
58673: CALL_OW 251
58677: PPUSH
58678: LD_INT 1
58680: PPUSH
58681: CALL_OW 453
58685: GO 58655
58687: POP
58688: POP
// end ;
58689: LD_VAR 0 2
58693: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58694: LD_INT 0
58696: PPUSH
58697: PPUSH
58698: PPUSH
58699: PPUSH
58700: PPUSH
58701: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58702: LD_VAR 0 1
58706: NOT
58707: PUSH
58708: LD_VAR 0 2
58712: NOT
58713: OR
58714: PUSH
58715: LD_VAR 0 1
58719: PPUSH
58720: CALL_OW 314
58724: OR
58725: IFFALSE 58729
// exit ;
58727: GO 59196
// if GetLives ( i ) < 250 then
58729: LD_VAR 0 4
58733: PPUSH
58734: CALL_OW 256
58738: PUSH
58739: LD_INT 250
58741: LESS
58742: IFFALSE 58755
// begin ComAutodestruct ( i ) ;
58744: LD_VAR 0 4
58748: PPUSH
58749: CALL 58592 0 1
// exit ;
58753: GO 59196
// end ; x := GetX ( enemy_unit ) ;
58755: LD_ADDR_VAR 0 7
58759: PUSH
58760: LD_VAR 0 2
58764: PPUSH
58765: CALL_OW 250
58769: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58770: LD_ADDR_VAR 0 8
58774: PUSH
58775: LD_VAR 0 2
58779: PPUSH
58780: CALL_OW 251
58784: ST_TO_ADDR
// if not x or not y then
58785: LD_VAR 0 7
58789: NOT
58790: PUSH
58791: LD_VAR 0 8
58795: NOT
58796: OR
58797: IFFALSE 58801
// exit ;
58799: GO 59196
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58801: LD_ADDR_VAR 0 6
58805: PUSH
58806: LD_VAR 0 7
58810: PPUSH
58811: LD_INT 0
58813: PPUSH
58814: LD_INT 4
58816: PPUSH
58817: CALL_OW 272
58821: PUSH
58822: LD_VAR 0 8
58826: PPUSH
58827: LD_INT 0
58829: PPUSH
58830: LD_INT 4
58832: PPUSH
58833: CALL_OW 273
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_VAR 0 7
58846: PPUSH
58847: LD_INT 1
58849: PPUSH
58850: LD_INT 4
58852: PPUSH
58853: CALL_OW 272
58857: PUSH
58858: LD_VAR 0 8
58862: PPUSH
58863: LD_INT 1
58865: PPUSH
58866: LD_INT 4
58868: PPUSH
58869: CALL_OW 273
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_VAR 0 7
58882: PPUSH
58883: LD_INT 2
58885: PPUSH
58886: LD_INT 4
58888: PPUSH
58889: CALL_OW 272
58893: PUSH
58894: LD_VAR 0 8
58898: PPUSH
58899: LD_INT 2
58901: PPUSH
58902: LD_INT 4
58904: PPUSH
58905: CALL_OW 273
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_VAR 0 7
58918: PPUSH
58919: LD_INT 3
58921: PPUSH
58922: LD_INT 4
58924: PPUSH
58925: CALL_OW 272
58929: PUSH
58930: LD_VAR 0 8
58934: PPUSH
58935: LD_INT 3
58937: PPUSH
58938: LD_INT 4
58940: PPUSH
58941: CALL_OW 273
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_VAR 0 7
58954: PPUSH
58955: LD_INT 4
58957: PPUSH
58958: LD_INT 4
58960: PPUSH
58961: CALL_OW 272
58965: PUSH
58966: LD_VAR 0 8
58970: PPUSH
58971: LD_INT 4
58973: PPUSH
58974: LD_INT 4
58976: PPUSH
58977: CALL_OW 273
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_VAR 0 7
58990: PPUSH
58991: LD_INT 5
58993: PPUSH
58994: LD_INT 4
58996: PPUSH
58997: CALL_OW 272
59001: PUSH
59002: LD_VAR 0 8
59006: PPUSH
59007: LD_INT 5
59009: PPUSH
59010: LD_INT 4
59012: PPUSH
59013: CALL_OW 273
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: ST_TO_ADDR
// for i = tmp downto 1 do
59030: LD_ADDR_VAR 0 4
59034: PUSH
59035: DOUBLE
59036: LD_VAR 0 6
59040: INC
59041: ST_TO_ADDR
59042: LD_INT 1
59044: PUSH
59045: FOR_DOWNTO
59046: IFFALSE 59147
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59048: LD_VAR 0 6
59052: PUSH
59053: LD_VAR 0 4
59057: ARRAY
59058: PUSH
59059: LD_INT 1
59061: ARRAY
59062: PPUSH
59063: LD_VAR 0 6
59067: PUSH
59068: LD_VAR 0 4
59072: ARRAY
59073: PUSH
59074: LD_INT 2
59076: ARRAY
59077: PPUSH
59078: CALL_OW 488
59082: NOT
59083: PUSH
59084: LD_VAR 0 6
59088: PUSH
59089: LD_VAR 0 4
59093: ARRAY
59094: PUSH
59095: LD_INT 1
59097: ARRAY
59098: PPUSH
59099: LD_VAR 0 6
59103: PUSH
59104: LD_VAR 0 4
59108: ARRAY
59109: PUSH
59110: LD_INT 2
59112: ARRAY
59113: PPUSH
59114: CALL_OW 428
59118: PUSH
59119: LD_INT 0
59121: NONEQUAL
59122: OR
59123: IFFALSE 59145
// tmp := Delete ( tmp , i ) ;
59125: LD_ADDR_VAR 0 6
59129: PUSH
59130: LD_VAR 0 6
59134: PPUSH
59135: LD_VAR 0 4
59139: PPUSH
59140: CALL_OW 3
59144: ST_TO_ADDR
59145: GO 59045
59147: POP
59148: POP
// j := GetClosestHex ( unit , tmp ) ;
59149: LD_ADDR_VAR 0 5
59153: PUSH
59154: LD_VAR 0 1
59158: PPUSH
59159: LD_VAR 0 6
59163: PPUSH
59164: CALL 58440 0 2
59168: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59169: LD_VAR 0 1
59173: PPUSH
59174: LD_VAR 0 5
59178: PUSH
59179: LD_INT 1
59181: ARRAY
59182: PPUSH
59183: LD_VAR 0 5
59187: PUSH
59188: LD_INT 2
59190: ARRAY
59191: PPUSH
59192: CALL_OW 111
// end ;
59196: LD_VAR 0 3
59200: RET
// export function PrepareApemanSoldier ( ) ; begin
59201: LD_INT 0
59203: PPUSH
// uc_nation := 0 ;
59204: LD_ADDR_OWVAR 21
59208: PUSH
59209: LD_INT 0
59211: ST_TO_ADDR
// hc_sex := sex_male ;
59212: LD_ADDR_OWVAR 27
59216: PUSH
59217: LD_INT 1
59219: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59220: LD_ADDR_OWVAR 28
59224: PUSH
59225: LD_INT 15
59227: ST_TO_ADDR
// hc_gallery :=  ;
59228: LD_ADDR_OWVAR 33
59232: PUSH
59233: LD_STRING 
59235: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59236: LD_ADDR_OWVAR 31
59240: PUSH
59241: LD_INT 0
59243: PPUSH
59244: LD_INT 3
59246: PPUSH
59247: CALL_OW 12
59251: PUSH
59252: LD_INT 0
59254: PPUSH
59255: LD_INT 3
59257: PPUSH
59258: CALL_OW 12
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: ST_TO_ADDR
// end ;
59275: LD_VAR 0 1
59279: RET
// export function PrepareApemanEngineer ( ) ; begin
59280: LD_INT 0
59282: PPUSH
// uc_nation := 0 ;
59283: LD_ADDR_OWVAR 21
59287: PUSH
59288: LD_INT 0
59290: ST_TO_ADDR
// hc_sex := sex_male ;
59291: LD_ADDR_OWVAR 27
59295: PUSH
59296: LD_INT 1
59298: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59299: LD_ADDR_OWVAR 28
59303: PUSH
59304: LD_INT 16
59306: ST_TO_ADDR
// hc_gallery :=  ;
59307: LD_ADDR_OWVAR 33
59311: PUSH
59312: LD_STRING 
59314: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59315: LD_ADDR_OWVAR 31
59319: PUSH
59320: LD_INT 0
59322: PPUSH
59323: LD_INT 3
59325: PPUSH
59326: CALL_OW 12
59330: PUSH
59331: LD_INT 0
59333: PPUSH
59334: LD_INT 3
59336: PPUSH
59337: CALL_OW 12
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: ST_TO_ADDR
// end ;
59354: LD_VAR 0 1
59358: RET
// export function PrepareApeman ( agressivity ) ; begin
59359: LD_INT 0
59361: PPUSH
// uc_side := 0 ;
59362: LD_ADDR_OWVAR 20
59366: PUSH
59367: LD_INT 0
59369: ST_TO_ADDR
// uc_nation := 0 ;
59370: LD_ADDR_OWVAR 21
59374: PUSH
59375: LD_INT 0
59377: ST_TO_ADDR
// hc_sex := sex_male ;
59378: LD_ADDR_OWVAR 27
59382: PUSH
59383: LD_INT 1
59385: ST_TO_ADDR
// hc_class := class_apeman ;
59386: LD_ADDR_OWVAR 28
59390: PUSH
59391: LD_INT 12
59393: ST_TO_ADDR
// hc_gallery :=  ;
59394: LD_ADDR_OWVAR 33
59398: PUSH
59399: LD_STRING 
59401: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59402: LD_ADDR_OWVAR 35
59406: PUSH
59407: LD_VAR 0 1
59411: NEG
59412: PPUSH
59413: LD_VAR 0 1
59417: PPUSH
59418: CALL_OW 12
59422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59423: LD_ADDR_OWVAR 31
59427: PUSH
59428: LD_INT 0
59430: PPUSH
59431: LD_INT 3
59433: PPUSH
59434: CALL_OW 12
59438: PUSH
59439: LD_INT 0
59441: PPUSH
59442: LD_INT 3
59444: PPUSH
59445: CALL_OW 12
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: ST_TO_ADDR
// end ;
59462: LD_VAR 0 2
59466: RET
// export function PrepareTiger ( agressivity ) ; begin
59467: LD_INT 0
59469: PPUSH
// uc_side := 0 ;
59470: LD_ADDR_OWVAR 20
59474: PUSH
59475: LD_INT 0
59477: ST_TO_ADDR
// uc_nation := 0 ;
59478: LD_ADDR_OWVAR 21
59482: PUSH
59483: LD_INT 0
59485: ST_TO_ADDR
// hc_class := class_tiger ;
59486: LD_ADDR_OWVAR 28
59490: PUSH
59491: LD_INT 14
59493: ST_TO_ADDR
// hc_gallery :=  ;
59494: LD_ADDR_OWVAR 33
59498: PUSH
59499: LD_STRING 
59501: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59502: LD_ADDR_OWVAR 35
59506: PUSH
59507: LD_VAR 0 1
59511: NEG
59512: PPUSH
59513: LD_VAR 0 1
59517: PPUSH
59518: CALL_OW 12
59522: ST_TO_ADDR
// end ;
59523: LD_VAR 0 2
59527: RET
// export function PrepareEnchidna ( ) ; begin
59528: LD_INT 0
59530: PPUSH
// uc_side := 0 ;
59531: LD_ADDR_OWVAR 20
59535: PUSH
59536: LD_INT 0
59538: ST_TO_ADDR
// uc_nation := 0 ;
59539: LD_ADDR_OWVAR 21
59543: PUSH
59544: LD_INT 0
59546: ST_TO_ADDR
// hc_class := class_baggie ;
59547: LD_ADDR_OWVAR 28
59551: PUSH
59552: LD_INT 13
59554: ST_TO_ADDR
// hc_gallery :=  ;
59555: LD_ADDR_OWVAR 33
59559: PUSH
59560: LD_STRING 
59562: ST_TO_ADDR
// end ;
59563: LD_VAR 0 1
59567: RET
// export function PrepareFrog ( ) ; begin
59568: LD_INT 0
59570: PPUSH
// uc_side := 0 ;
59571: LD_ADDR_OWVAR 20
59575: PUSH
59576: LD_INT 0
59578: ST_TO_ADDR
// uc_nation := 0 ;
59579: LD_ADDR_OWVAR 21
59583: PUSH
59584: LD_INT 0
59586: ST_TO_ADDR
// hc_class := class_frog ;
59587: LD_ADDR_OWVAR 28
59591: PUSH
59592: LD_INT 19
59594: ST_TO_ADDR
// hc_gallery :=  ;
59595: LD_ADDR_OWVAR 33
59599: PUSH
59600: LD_STRING 
59602: ST_TO_ADDR
// end ;
59603: LD_VAR 0 1
59607: RET
// export function PrepareFish ( ) ; begin
59608: LD_INT 0
59610: PPUSH
// uc_side := 0 ;
59611: LD_ADDR_OWVAR 20
59615: PUSH
59616: LD_INT 0
59618: ST_TO_ADDR
// uc_nation := 0 ;
59619: LD_ADDR_OWVAR 21
59623: PUSH
59624: LD_INT 0
59626: ST_TO_ADDR
// hc_class := class_fish ;
59627: LD_ADDR_OWVAR 28
59631: PUSH
59632: LD_INT 20
59634: ST_TO_ADDR
// hc_gallery :=  ;
59635: LD_ADDR_OWVAR 33
59639: PUSH
59640: LD_STRING 
59642: ST_TO_ADDR
// end ;
59643: LD_VAR 0 1
59647: RET
// export function PrepareBird ( ) ; begin
59648: LD_INT 0
59650: PPUSH
// uc_side := 0 ;
59651: LD_ADDR_OWVAR 20
59655: PUSH
59656: LD_INT 0
59658: ST_TO_ADDR
// uc_nation := 0 ;
59659: LD_ADDR_OWVAR 21
59663: PUSH
59664: LD_INT 0
59666: ST_TO_ADDR
// hc_class := class_phororhacos ;
59667: LD_ADDR_OWVAR 28
59671: PUSH
59672: LD_INT 18
59674: ST_TO_ADDR
// hc_gallery :=  ;
59675: LD_ADDR_OWVAR 33
59679: PUSH
59680: LD_STRING 
59682: ST_TO_ADDR
// end ;
59683: LD_VAR 0 1
59687: RET
// export function PrepareHorse ( ) ; begin
59688: LD_INT 0
59690: PPUSH
// uc_side := 0 ;
59691: LD_ADDR_OWVAR 20
59695: PUSH
59696: LD_INT 0
59698: ST_TO_ADDR
// uc_nation := 0 ;
59699: LD_ADDR_OWVAR 21
59703: PUSH
59704: LD_INT 0
59706: ST_TO_ADDR
// hc_class := class_horse ;
59707: LD_ADDR_OWVAR 28
59711: PUSH
59712: LD_INT 21
59714: ST_TO_ADDR
// hc_gallery :=  ;
59715: LD_ADDR_OWVAR 33
59719: PUSH
59720: LD_STRING 
59722: ST_TO_ADDR
// end ;
59723: LD_VAR 0 1
59727: RET
// export function PrepareMastodont ( ) ; begin
59728: LD_INT 0
59730: PPUSH
// uc_side := 0 ;
59731: LD_ADDR_OWVAR 20
59735: PUSH
59736: LD_INT 0
59738: ST_TO_ADDR
// uc_nation := 0 ;
59739: LD_ADDR_OWVAR 21
59743: PUSH
59744: LD_INT 0
59746: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59747: LD_ADDR_OWVAR 37
59751: PUSH
59752: LD_INT 31
59754: ST_TO_ADDR
// vc_control := control_rider ;
59755: LD_ADDR_OWVAR 38
59759: PUSH
59760: LD_INT 4
59762: ST_TO_ADDR
// end ;
59763: LD_VAR 0 1
59767: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59768: LD_INT 0
59770: PPUSH
59771: PPUSH
59772: PPUSH
// uc_side = 0 ;
59773: LD_ADDR_OWVAR 20
59777: PUSH
59778: LD_INT 0
59780: ST_TO_ADDR
// uc_nation = 0 ;
59781: LD_ADDR_OWVAR 21
59785: PUSH
59786: LD_INT 0
59788: ST_TO_ADDR
// InitHc_All ( ) ;
59789: CALL_OW 584
// InitVc ;
59793: CALL_OW 20
// if mastodonts then
59797: LD_VAR 0 6
59801: IFFALSE 59868
// for i = 1 to mastodonts do
59803: LD_ADDR_VAR 0 11
59807: PUSH
59808: DOUBLE
59809: LD_INT 1
59811: DEC
59812: ST_TO_ADDR
59813: LD_VAR 0 6
59817: PUSH
59818: FOR_TO
59819: IFFALSE 59866
// begin vc_chassis := 31 ;
59821: LD_ADDR_OWVAR 37
59825: PUSH
59826: LD_INT 31
59828: ST_TO_ADDR
// vc_control := control_rider ;
59829: LD_ADDR_OWVAR 38
59833: PUSH
59834: LD_INT 4
59836: ST_TO_ADDR
// animal := CreateVehicle ;
59837: LD_ADDR_VAR 0 12
59841: PUSH
59842: CALL_OW 45
59846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59847: LD_VAR 0 12
59851: PPUSH
59852: LD_VAR 0 8
59856: PPUSH
59857: LD_INT 0
59859: PPUSH
59860: CALL 61996 0 3
// end ;
59864: GO 59818
59866: POP
59867: POP
// if horses then
59868: LD_VAR 0 5
59872: IFFALSE 59939
// for i = 1 to horses do
59874: LD_ADDR_VAR 0 11
59878: PUSH
59879: DOUBLE
59880: LD_INT 1
59882: DEC
59883: ST_TO_ADDR
59884: LD_VAR 0 5
59888: PUSH
59889: FOR_TO
59890: IFFALSE 59937
// begin hc_class := 21 ;
59892: LD_ADDR_OWVAR 28
59896: PUSH
59897: LD_INT 21
59899: ST_TO_ADDR
// hc_gallery :=  ;
59900: LD_ADDR_OWVAR 33
59904: PUSH
59905: LD_STRING 
59907: ST_TO_ADDR
// animal := CreateHuman ;
59908: LD_ADDR_VAR 0 12
59912: PUSH
59913: CALL_OW 44
59917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59918: LD_VAR 0 12
59922: PPUSH
59923: LD_VAR 0 8
59927: PPUSH
59928: LD_INT 0
59930: PPUSH
59931: CALL 61996 0 3
// end ;
59935: GO 59889
59937: POP
59938: POP
// if birds then
59939: LD_VAR 0 1
59943: IFFALSE 60010
// for i = 1 to birds do
59945: LD_ADDR_VAR 0 11
59949: PUSH
59950: DOUBLE
59951: LD_INT 1
59953: DEC
59954: ST_TO_ADDR
59955: LD_VAR 0 1
59959: PUSH
59960: FOR_TO
59961: IFFALSE 60008
// begin hc_class := 18 ;
59963: LD_ADDR_OWVAR 28
59967: PUSH
59968: LD_INT 18
59970: ST_TO_ADDR
// hc_gallery =  ;
59971: LD_ADDR_OWVAR 33
59975: PUSH
59976: LD_STRING 
59978: ST_TO_ADDR
// animal := CreateHuman ;
59979: LD_ADDR_VAR 0 12
59983: PUSH
59984: CALL_OW 44
59988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59989: LD_VAR 0 12
59993: PPUSH
59994: LD_VAR 0 8
59998: PPUSH
59999: LD_INT 0
60001: PPUSH
60002: CALL 61996 0 3
// end ;
60006: GO 59960
60008: POP
60009: POP
// if tigers then
60010: LD_VAR 0 2
60014: IFFALSE 60098
// for i = 1 to tigers do
60016: LD_ADDR_VAR 0 11
60020: PUSH
60021: DOUBLE
60022: LD_INT 1
60024: DEC
60025: ST_TO_ADDR
60026: LD_VAR 0 2
60030: PUSH
60031: FOR_TO
60032: IFFALSE 60096
// begin hc_class = class_tiger ;
60034: LD_ADDR_OWVAR 28
60038: PUSH
60039: LD_INT 14
60041: ST_TO_ADDR
// hc_gallery =  ;
60042: LD_ADDR_OWVAR 33
60046: PUSH
60047: LD_STRING 
60049: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60050: LD_ADDR_OWVAR 35
60054: PUSH
60055: LD_INT 7
60057: NEG
60058: PPUSH
60059: LD_INT 7
60061: PPUSH
60062: CALL_OW 12
60066: ST_TO_ADDR
// animal := CreateHuman ;
60067: LD_ADDR_VAR 0 12
60071: PUSH
60072: CALL_OW 44
60076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60077: LD_VAR 0 12
60081: PPUSH
60082: LD_VAR 0 8
60086: PPUSH
60087: LD_INT 0
60089: PPUSH
60090: CALL 61996 0 3
// end ;
60094: GO 60031
60096: POP
60097: POP
// if apemans then
60098: LD_VAR 0 3
60102: IFFALSE 60225
// for i = 1 to apemans do
60104: LD_ADDR_VAR 0 11
60108: PUSH
60109: DOUBLE
60110: LD_INT 1
60112: DEC
60113: ST_TO_ADDR
60114: LD_VAR 0 3
60118: PUSH
60119: FOR_TO
60120: IFFALSE 60223
// begin hc_class = class_apeman ;
60122: LD_ADDR_OWVAR 28
60126: PUSH
60127: LD_INT 12
60129: ST_TO_ADDR
// hc_gallery =  ;
60130: LD_ADDR_OWVAR 33
60134: PUSH
60135: LD_STRING 
60137: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60138: LD_ADDR_OWVAR 35
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PPUSH
60147: LD_INT 2
60149: PPUSH
60150: CALL_OW 12
60154: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60155: LD_ADDR_OWVAR 31
60159: PUSH
60160: LD_INT 1
60162: PPUSH
60163: LD_INT 3
60165: PPUSH
60166: CALL_OW 12
60170: PUSH
60171: LD_INT 1
60173: PPUSH
60174: LD_INT 3
60176: PPUSH
60177: CALL_OW 12
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: ST_TO_ADDR
// animal := CreateHuman ;
60194: LD_ADDR_VAR 0 12
60198: PUSH
60199: CALL_OW 44
60203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60204: LD_VAR 0 12
60208: PPUSH
60209: LD_VAR 0 8
60213: PPUSH
60214: LD_INT 0
60216: PPUSH
60217: CALL 61996 0 3
// end ;
60221: GO 60119
60223: POP
60224: POP
// if enchidnas then
60225: LD_VAR 0 4
60229: IFFALSE 60296
// for i = 1 to enchidnas do
60231: LD_ADDR_VAR 0 11
60235: PUSH
60236: DOUBLE
60237: LD_INT 1
60239: DEC
60240: ST_TO_ADDR
60241: LD_VAR 0 4
60245: PUSH
60246: FOR_TO
60247: IFFALSE 60294
// begin hc_class = 13 ;
60249: LD_ADDR_OWVAR 28
60253: PUSH
60254: LD_INT 13
60256: ST_TO_ADDR
// hc_gallery =  ;
60257: LD_ADDR_OWVAR 33
60261: PUSH
60262: LD_STRING 
60264: ST_TO_ADDR
// animal := CreateHuman ;
60265: LD_ADDR_VAR 0 12
60269: PUSH
60270: CALL_OW 44
60274: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60275: LD_VAR 0 12
60279: PPUSH
60280: LD_VAR 0 8
60284: PPUSH
60285: LD_INT 0
60287: PPUSH
60288: CALL 61996 0 3
// end ;
60292: GO 60246
60294: POP
60295: POP
// if fishes then
60296: LD_VAR 0 7
60300: IFFALSE 60367
// for i = 1 to fishes do
60302: LD_ADDR_VAR 0 11
60306: PUSH
60307: DOUBLE
60308: LD_INT 1
60310: DEC
60311: ST_TO_ADDR
60312: LD_VAR 0 7
60316: PUSH
60317: FOR_TO
60318: IFFALSE 60365
// begin hc_class = 20 ;
60320: LD_ADDR_OWVAR 28
60324: PUSH
60325: LD_INT 20
60327: ST_TO_ADDR
// hc_gallery =  ;
60328: LD_ADDR_OWVAR 33
60332: PUSH
60333: LD_STRING 
60335: ST_TO_ADDR
// animal := CreateHuman ;
60336: LD_ADDR_VAR 0 12
60340: PUSH
60341: CALL_OW 44
60345: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60346: LD_VAR 0 12
60350: PPUSH
60351: LD_VAR 0 9
60355: PPUSH
60356: LD_INT 0
60358: PPUSH
60359: CALL 61996 0 3
// end ;
60363: GO 60317
60365: POP
60366: POP
// end ;
60367: LD_VAR 0 10
60371: RET
// export function WantHeal ( sci , unit ) ; begin
60372: LD_INT 0
60374: PPUSH
// if GetTaskList ( sci ) > 0 then
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL_OW 437
60384: PUSH
60385: LD_INT 0
60387: GREATER
60388: IFFALSE 60458
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60390: LD_VAR 0 1
60394: PPUSH
60395: CALL_OW 437
60399: PUSH
60400: LD_INT 1
60402: ARRAY
60403: PUSH
60404: LD_INT 1
60406: ARRAY
60407: PUSH
60408: LD_STRING l
60410: EQUAL
60411: PUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 437
60421: PUSH
60422: LD_INT 1
60424: ARRAY
60425: PUSH
60426: LD_INT 4
60428: ARRAY
60429: PUSH
60430: LD_VAR 0 2
60434: EQUAL
60435: AND
60436: IFFALSE 60448
// result := true else
60438: LD_ADDR_VAR 0 3
60442: PUSH
60443: LD_INT 1
60445: ST_TO_ADDR
60446: GO 60456
// result := false ;
60448: LD_ADDR_VAR 0 3
60452: PUSH
60453: LD_INT 0
60455: ST_TO_ADDR
// end else
60456: GO 60466
// result := false ;
60458: LD_ADDR_VAR 0 3
60462: PUSH
60463: LD_INT 0
60465: ST_TO_ADDR
// end ;
60466: LD_VAR 0 3
60470: RET
// export function HealTarget ( sci ) ; begin
60471: LD_INT 0
60473: PPUSH
// if not sci then
60474: LD_VAR 0 1
60478: NOT
60479: IFFALSE 60483
// exit ;
60481: GO 60548
// result := 0 ;
60483: LD_ADDR_VAR 0 2
60487: PUSH
60488: LD_INT 0
60490: ST_TO_ADDR
// if GetTaskList ( sci ) then
60491: LD_VAR 0 1
60495: PPUSH
60496: CALL_OW 437
60500: IFFALSE 60548
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 437
60511: PUSH
60512: LD_INT 1
60514: ARRAY
60515: PUSH
60516: LD_INT 1
60518: ARRAY
60519: PUSH
60520: LD_STRING l
60522: EQUAL
60523: IFFALSE 60548
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60525: LD_ADDR_VAR 0 2
60529: PUSH
60530: LD_VAR 0 1
60534: PPUSH
60535: CALL_OW 437
60539: PUSH
60540: LD_INT 1
60542: ARRAY
60543: PUSH
60544: LD_INT 4
60546: ARRAY
60547: ST_TO_ADDR
// end ;
60548: LD_VAR 0 2
60552: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60553: LD_INT 0
60555: PPUSH
60556: PPUSH
60557: PPUSH
60558: PPUSH
// if not base_units then
60559: LD_VAR 0 1
60563: NOT
60564: IFFALSE 60568
// exit ;
60566: GO 60655
// result := false ;
60568: LD_ADDR_VAR 0 2
60572: PUSH
60573: LD_INT 0
60575: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60576: LD_ADDR_VAR 0 5
60580: PUSH
60581: LD_VAR 0 1
60585: PPUSH
60586: LD_INT 21
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PPUSH
60596: CALL_OW 72
60600: ST_TO_ADDR
// if not tmp then
60601: LD_VAR 0 5
60605: NOT
60606: IFFALSE 60610
// exit ;
60608: GO 60655
// for i in tmp do
60610: LD_ADDR_VAR 0 3
60614: PUSH
60615: LD_VAR 0 5
60619: PUSH
60620: FOR_IN
60621: IFFALSE 60653
// begin result := EnemyInRange ( i , 22 ) ;
60623: LD_ADDR_VAR 0 2
60627: PUSH
60628: LD_VAR 0 3
60632: PPUSH
60633: LD_INT 22
60635: PPUSH
60636: CALL 58242 0 2
60640: ST_TO_ADDR
// if result then
60641: LD_VAR 0 2
60645: IFFALSE 60651
// exit ;
60647: POP
60648: POP
60649: GO 60655
// end ;
60651: GO 60620
60653: POP
60654: POP
// end ;
60655: LD_VAR 0 2
60659: RET
// export function FilterByTag ( units , tag ) ; begin
60660: LD_INT 0
60662: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60663: LD_ADDR_VAR 0 3
60667: PUSH
60668: LD_VAR 0 1
60672: PPUSH
60673: LD_INT 120
60675: PUSH
60676: LD_VAR 0 2
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PPUSH
60685: CALL_OW 72
60689: ST_TO_ADDR
// end ;
60690: LD_VAR 0 3
60694: RET
// export function IsDriver ( un ) ; begin
60695: LD_INT 0
60697: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60698: LD_ADDR_VAR 0 2
60702: PUSH
60703: LD_VAR 0 1
60707: PUSH
60708: LD_INT 55
60710: PUSH
60711: EMPTY
60712: LIST
60713: PPUSH
60714: CALL_OW 69
60718: IN
60719: ST_TO_ADDR
// end ;
60720: LD_VAR 0 2
60724: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60725: LD_INT 0
60727: PPUSH
60728: PPUSH
// list := [ ] ;
60729: LD_ADDR_VAR 0 5
60733: PUSH
60734: EMPTY
60735: ST_TO_ADDR
// case d of 0 :
60736: LD_VAR 0 3
60740: PUSH
60741: LD_INT 0
60743: DOUBLE
60744: EQUAL
60745: IFTRUE 60749
60747: GO 60882
60749: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60750: LD_ADDR_VAR 0 5
60754: PUSH
60755: LD_VAR 0 1
60759: PUSH
60760: LD_INT 4
60762: MINUS
60763: PUSH
60764: LD_VAR 0 2
60768: PUSH
60769: LD_INT 4
60771: MINUS
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: PUSH
60781: LD_VAR 0 1
60785: PUSH
60786: LD_INT 3
60788: MINUS
60789: PUSH
60790: LD_VAR 0 2
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: PUSH
60803: LD_VAR 0 1
60807: PUSH
60808: LD_INT 4
60810: PLUS
60811: PUSH
60812: LD_VAR 0 2
60816: PUSH
60817: LD_INT 4
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: PUSH
60825: LD_VAR 0 1
60829: PUSH
60830: LD_INT 3
60832: PLUS
60833: PUSH
60834: LD_VAR 0 2
60838: PUSH
60839: LD_INT 3
60841: PLUS
60842: PUSH
60843: LD_INT 5
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: PUSH
60851: LD_VAR 0 1
60855: PUSH
60856: LD_VAR 0 2
60860: PUSH
60861: LD_INT 4
60863: PLUS
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: ST_TO_ADDR
// end ; 1 :
60880: GO 61580
60882: LD_INT 1
60884: DOUBLE
60885: EQUAL
60886: IFTRUE 60890
60888: GO 61023
60890: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60891: LD_ADDR_VAR 0 5
60895: PUSH
60896: LD_VAR 0 1
60900: PUSH
60901: LD_VAR 0 2
60905: PUSH
60906: LD_INT 4
60908: MINUS
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: PUSH
60918: LD_VAR 0 1
60922: PUSH
60923: LD_INT 3
60925: MINUS
60926: PUSH
60927: LD_VAR 0 2
60931: PUSH
60932: LD_INT 3
60934: MINUS
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: LD_VAR 0 1
60948: PUSH
60949: LD_INT 4
60951: MINUS
60952: PUSH
60953: LD_VAR 0 2
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: PUSH
60966: LD_VAR 0 1
60970: PUSH
60971: LD_VAR 0 2
60975: PUSH
60976: LD_INT 3
60978: PLUS
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: LIST
60987: PUSH
60988: LD_VAR 0 1
60992: PUSH
60993: LD_INT 4
60995: PLUS
60996: PUSH
60997: LD_VAR 0 2
61001: PUSH
61002: LD_INT 4
61004: PLUS
61005: PUSH
61006: LD_INT 5
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// end ; 2 :
61021: GO 61580
61023: LD_INT 2
61025: DOUBLE
61026: EQUAL
61027: IFTRUE 61031
61029: GO 61160
61031: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61032: LD_ADDR_VAR 0 5
61036: PUSH
61037: LD_VAR 0 1
61041: PUSH
61042: LD_VAR 0 2
61046: PUSH
61047: LD_INT 3
61049: MINUS
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: PUSH
61059: LD_VAR 0 1
61063: PUSH
61064: LD_INT 4
61066: PLUS
61067: PUSH
61068: LD_VAR 0 2
61072: PUSH
61073: LD_INT 4
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: PUSH
61081: LD_VAR 0 1
61085: PUSH
61086: LD_VAR 0 2
61090: PUSH
61091: LD_INT 4
61093: PLUS
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: PUSH
61103: LD_VAR 0 1
61107: PUSH
61108: LD_INT 3
61110: MINUS
61111: PUSH
61112: LD_VAR 0 2
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: PUSH
61125: LD_VAR 0 1
61129: PUSH
61130: LD_INT 4
61132: MINUS
61133: PUSH
61134: LD_VAR 0 2
61138: PUSH
61139: LD_INT 4
61141: MINUS
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: ST_TO_ADDR
// end ; 3 :
61158: GO 61580
61160: LD_INT 3
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61168
61166: GO 61301
61168: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61169: LD_ADDR_VAR 0 5
61173: PUSH
61174: LD_VAR 0 1
61178: PUSH
61179: LD_INT 3
61181: PLUS
61182: PUSH
61183: LD_VAR 0 2
61187: PUSH
61188: LD_INT 4
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: LIST
61195: PUSH
61196: LD_VAR 0 1
61200: PUSH
61201: LD_INT 4
61203: PLUS
61204: PUSH
61205: LD_VAR 0 2
61209: PUSH
61210: LD_INT 4
61212: PLUS
61213: PUSH
61214: LD_INT 5
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: PUSH
61222: LD_VAR 0 1
61226: PUSH
61227: LD_INT 4
61229: MINUS
61230: PUSH
61231: LD_VAR 0 2
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: PUSH
61244: LD_VAR 0 1
61248: PUSH
61249: LD_VAR 0 2
61253: PUSH
61254: LD_INT 4
61256: MINUS
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: PUSH
61266: LD_VAR 0 1
61270: PUSH
61271: LD_INT 3
61273: MINUS
61274: PUSH
61275: LD_VAR 0 2
61279: PUSH
61280: LD_INT 3
61282: MINUS
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: ST_TO_ADDR
// end ; 4 :
61299: GO 61580
61301: LD_INT 4
61303: DOUBLE
61304: EQUAL
61305: IFTRUE 61309
61307: GO 61442
61309: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61310: LD_ADDR_VAR 0 5
61314: PUSH
61315: LD_VAR 0 1
61319: PUSH
61320: LD_VAR 0 2
61324: PUSH
61325: LD_INT 4
61327: PLUS
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: PUSH
61337: LD_VAR 0 1
61341: PUSH
61342: LD_INT 3
61344: PLUS
61345: PUSH
61346: LD_VAR 0 2
61350: PUSH
61351: LD_INT 3
61353: PLUS
61354: PUSH
61355: LD_INT 5
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: PUSH
61363: LD_VAR 0 1
61367: PUSH
61368: LD_INT 4
61370: PLUS
61371: PUSH
61372: LD_VAR 0 2
61376: PUSH
61377: LD_INT 4
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: PUSH
61385: LD_VAR 0 1
61389: PUSH
61390: LD_VAR 0 2
61394: PUSH
61395: LD_INT 3
61397: MINUS
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: PUSH
61407: LD_VAR 0 1
61411: PUSH
61412: LD_INT 4
61414: MINUS
61415: PUSH
61416: LD_VAR 0 2
61420: PUSH
61421: LD_INT 4
61423: MINUS
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: ST_TO_ADDR
// end ; 5 :
61440: GO 61580
61442: LD_INT 5
61444: DOUBLE
61445: EQUAL
61446: IFTRUE 61450
61448: GO 61579
61450: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61451: LD_ADDR_VAR 0 5
61455: PUSH
61456: LD_VAR 0 1
61460: PUSH
61461: LD_INT 4
61463: MINUS
61464: PUSH
61465: LD_VAR 0 2
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: PUSH
61478: LD_VAR 0 1
61482: PUSH
61483: LD_VAR 0 2
61487: PUSH
61488: LD_INT 4
61490: MINUS
61491: PUSH
61492: LD_INT 3
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: LIST
61499: PUSH
61500: LD_VAR 0 1
61504: PUSH
61505: LD_INT 4
61507: PLUS
61508: PUSH
61509: LD_VAR 0 2
61513: PUSH
61514: LD_INT 4
61516: PLUS
61517: PUSH
61518: LD_INT 5
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: LIST
61525: PUSH
61526: LD_VAR 0 1
61530: PUSH
61531: LD_INT 3
61533: PLUS
61534: PUSH
61535: LD_VAR 0 2
61539: PUSH
61540: LD_INT 4
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: PUSH
61548: LD_VAR 0 1
61552: PUSH
61553: LD_VAR 0 2
61557: PUSH
61558: LD_INT 3
61560: PLUS
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: ST_TO_ADDR
// end ; end ;
61577: GO 61580
61579: POP
// result := list ;
61580: LD_ADDR_VAR 0 4
61584: PUSH
61585: LD_VAR 0 5
61589: ST_TO_ADDR
// end ;
61590: LD_VAR 0 4
61594: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61595: LD_INT 0
61597: PPUSH
61598: PPUSH
61599: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61600: LD_VAR 0 1
61604: NOT
61605: PUSH
61606: LD_VAR 0 2
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: IN
61629: NOT
61630: OR
61631: IFFALSE 61635
// exit ;
61633: GO 61718
// tmp := [ ] ;
61635: LD_ADDR_VAR 0 5
61639: PUSH
61640: EMPTY
61641: ST_TO_ADDR
// for i in units do
61642: LD_ADDR_VAR 0 4
61646: PUSH
61647: LD_VAR 0 1
61651: PUSH
61652: FOR_IN
61653: IFFALSE 61687
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61655: LD_ADDR_VAR 0 5
61659: PUSH
61660: LD_VAR 0 5
61664: PPUSH
61665: LD_VAR 0 4
61669: PPUSH
61670: LD_VAR 0 2
61674: PPUSH
61675: CALL_OW 259
61679: PPUSH
61680: CALL 63078 0 2
61684: ST_TO_ADDR
61685: GO 61652
61687: POP
61688: POP
// if not tmp then
61689: LD_VAR 0 5
61693: NOT
61694: IFFALSE 61698
// exit ;
61696: GO 61718
// result := SortListByListDesc ( units , tmp ) ;
61698: LD_ADDR_VAR 0 3
61702: PUSH
61703: LD_VAR 0 1
61707: PPUSH
61708: LD_VAR 0 5
61712: PPUSH
61713: CALL_OW 77
61717: ST_TO_ADDR
// end ;
61718: LD_VAR 0 3
61722: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61723: LD_INT 0
61725: PPUSH
61726: PPUSH
61727: PPUSH
// result := false ;
61728: LD_ADDR_VAR 0 3
61732: PUSH
61733: LD_INT 0
61735: ST_TO_ADDR
// if not building then
61736: LD_VAR 0 2
61740: NOT
61741: IFFALSE 61745
// exit ;
61743: GO 61883
// x := GetX ( building ) ;
61745: LD_ADDR_VAR 0 4
61749: PUSH
61750: LD_VAR 0 2
61754: PPUSH
61755: CALL_OW 250
61759: ST_TO_ADDR
// y := GetY ( building ) ;
61760: LD_ADDR_VAR 0 5
61764: PUSH
61765: LD_VAR 0 2
61769: PPUSH
61770: CALL_OW 251
61774: ST_TO_ADDR
// if not x or not y then
61775: LD_VAR 0 4
61779: NOT
61780: PUSH
61781: LD_VAR 0 5
61785: NOT
61786: OR
61787: IFFALSE 61791
// exit ;
61789: GO 61883
// if GetTaskList ( unit ) then
61791: LD_VAR 0 1
61795: PPUSH
61796: CALL_OW 437
61800: IFFALSE 61883
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61802: LD_STRING e
61804: PUSH
61805: LD_VAR 0 1
61809: PPUSH
61810: CALL_OW 437
61814: PUSH
61815: LD_INT 1
61817: ARRAY
61818: PUSH
61819: LD_INT 1
61821: ARRAY
61822: EQUAL
61823: PUSH
61824: LD_VAR 0 4
61828: PUSH
61829: LD_VAR 0 1
61833: PPUSH
61834: CALL_OW 437
61838: PUSH
61839: LD_INT 1
61841: ARRAY
61842: PUSH
61843: LD_INT 2
61845: ARRAY
61846: EQUAL
61847: AND
61848: PUSH
61849: LD_VAR 0 5
61853: PUSH
61854: LD_VAR 0 1
61858: PPUSH
61859: CALL_OW 437
61863: PUSH
61864: LD_INT 1
61866: ARRAY
61867: PUSH
61868: LD_INT 3
61870: ARRAY
61871: EQUAL
61872: AND
61873: IFFALSE 61883
// result := true end ;
61875: LD_ADDR_VAR 0 3
61879: PUSH
61880: LD_INT 1
61882: ST_TO_ADDR
// end ;
61883: LD_VAR 0 3
61887: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61888: LD_INT 0
61890: PPUSH
// result := false ;
61891: LD_ADDR_VAR 0 4
61895: PUSH
61896: LD_INT 0
61898: ST_TO_ADDR
// if GetTaskList ( unit ) then
61899: LD_VAR 0 1
61903: PPUSH
61904: CALL_OW 437
61908: IFFALSE 61991
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61910: LD_STRING M
61912: PUSH
61913: LD_VAR 0 1
61917: PPUSH
61918: CALL_OW 437
61922: PUSH
61923: LD_INT 1
61925: ARRAY
61926: PUSH
61927: LD_INT 1
61929: ARRAY
61930: EQUAL
61931: PUSH
61932: LD_VAR 0 2
61936: PUSH
61937: LD_VAR 0 1
61941: PPUSH
61942: CALL_OW 437
61946: PUSH
61947: LD_INT 1
61949: ARRAY
61950: PUSH
61951: LD_INT 2
61953: ARRAY
61954: EQUAL
61955: AND
61956: PUSH
61957: LD_VAR 0 3
61961: PUSH
61962: LD_VAR 0 1
61966: PPUSH
61967: CALL_OW 437
61971: PUSH
61972: LD_INT 1
61974: ARRAY
61975: PUSH
61976: LD_INT 3
61978: ARRAY
61979: EQUAL
61980: AND
61981: IFFALSE 61991
// result := true ;
61983: LD_ADDR_VAR 0 4
61987: PUSH
61988: LD_INT 1
61990: ST_TO_ADDR
// end ; end ;
61991: LD_VAR 0 4
61995: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61996: LD_INT 0
61998: PPUSH
61999: PPUSH
62000: PPUSH
62001: PPUSH
// if not unit or not area then
62002: LD_VAR 0 1
62006: NOT
62007: PUSH
62008: LD_VAR 0 2
62012: NOT
62013: OR
62014: IFFALSE 62018
// exit ;
62016: GO 62181
// tmp := AreaToList ( area , i ) ;
62018: LD_ADDR_VAR 0 6
62022: PUSH
62023: LD_VAR 0 2
62027: PPUSH
62028: LD_VAR 0 5
62032: PPUSH
62033: CALL_OW 517
62037: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62038: LD_ADDR_VAR 0 5
62042: PUSH
62043: DOUBLE
62044: LD_INT 1
62046: DEC
62047: ST_TO_ADDR
62048: LD_VAR 0 6
62052: PUSH
62053: LD_INT 1
62055: ARRAY
62056: PUSH
62057: FOR_TO
62058: IFFALSE 62179
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62060: LD_ADDR_VAR 0 7
62064: PUSH
62065: LD_VAR 0 6
62069: PUSH
62070: LD_INT 1
62072: ARRAY
62073: PUSH
62074: LD_VAR 0 5
62078: ARRAY
62079: PUSH
62080: LD_VAR 0 6
62084: PUSH
62085: LD_INT 2
62087: ARRAY
62088: PUSH
62089: LD_VAR 0 5
62093: ARRAY
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
62099: LD_INT 92
62101: PUSH
62102: LD_VAR 0 7
62106: PUSH
62107: LD_INT 1
62109: ARRAY
62110: PUSH
62111: LD_VAR 0 7
62115: PUSH
62116: LD_INT 2
62118: ARRAY
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: PPUSH
62129: CALL_OW 69
62133: PUSH
62134: LD_INT 0
62136: EQUAL
62137: IFFALSE 62177
// begin PlaceUnitArea ( unit , area , mode ) ;
62139: LD_VAR 0 1
62143: PPUSH
62144: LD_VAR 0 2
62148: PPUSH
62149: LD_VAR 0 3
62153: PPUSH
62154: CALL_OW 49
// result := IsPlaced ( unit ) ;
62158: LD_ADDR_VAR 0 4
62162: PUSH
62163: LD_VAR 0 1
62167: PPUSH
62168: CALL_OW 305
62172: ST_TO_ADDR
// exit ;
62173: POP
62174: POP
62175: GO 62181
// end ; end ;
62177: GO 62057
62179: POP
62180: POP
// end ;
62181: LD_VAR 0 4
62185: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62186: LD_INT 0
62188: PPUSH
62189: PPUSH
62190: PPUSH
// if not side or side > 8 then
62191: LD_VAR 0 1
62195: NOT
62196: PUSH
62197: LD_VAR 0 1
62201: PUSH
62202: LD_INT 8
62204: GREATER
62205: OR
62206: IFFALSE 62210
// exit ;
62208: GO 62397
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62210: LD_ADDR_VAR 0 4
62214: PUSH
62215: LD_INT 22
62217: PUSH
62218: LD_VAR 0 1
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 21
62229: PUSH
62230: LD_INT 3
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PPUSH
62241: CALL_OW 69
62245: ST_TO_ADDR
// if not tmp then
62246: LD_VAR 0 4
62250: NOT
62251: IFFALSE 62255
// exit ;
62253: GO 62397
// enable_addtolog := true ;
62255: LD_ADDR_OWVAR 81
62259: PUSH
62260: LD_INT 1
62262: ST_TO_ADDR
// AddToLog ( [ ) ;
62263: LD_STRING [
62265: PPUSH
62266: CALL_OW 561
// for i in tmp do
62270: LD_ADDR_VAR 0 3
62274: PUSH
62275: LD_VAR 0 4
62279: PUSH
62280: FOR_IN
62281: IFFALSE 62388
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62283: LD_STRING [
62285: PUSH
62286: LD_VAR 0 3
62290: PPUSH
62291: CALL_OW 266
62295: STR
62296: PUSH
62297: LD_STRING , 
62299: STR
62300: PUSH
62301: LD_VAR 0 3
62305: PPUSH
62306: CALL_OW 250
62310: STR
62311: PUSH
62312: LD_STRING , 
62314: STR
62315: PUSH
62316: LD_VAR 0 3
62320: PPUSH
62321: CALL_OW 251
62325: STR
62326: PUSH
62327: LD_STRING , 
62329: STR
62330: PUSH
62331: LD_VAR 0 3
62335: PPUSH
62336: CALL_OW 254
62340: STR
62341: PUSH
62342: LD_STRING , 
62344: STR
62345: PUSH
62346: LD_VAR 0 3
62350: PPUSH
62351: LD_INT 1
62353: PPUSH
62354: CALL_OW 268
62358: STR
62359: PUSH
62360: LD_STRING , 
62362: STR
62363: PUSH
62364: LD_VAR 0 3
62368: PPUSH
62369: LD_INT 2
62371: PPUSH
62372: CALL_OW 268
62376: STR
62377: PUSH
62378: LD_STRING ],
62380: STR
62381: PPUSH
62382: CALL_OW 561
// end ;
62386: GO 62280
62388: POP
62389: POP
// AddToLog ( ]; ) ;
62390: LD_STRING ];
62392: PPUSH
62393: CALL_OW 561
// end ;
62397: LD_VAR 0 2
62401: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62402: LD_INT 0
62404: PPUSH
62405: PPUSH
62406: PPUSH
62407: PPUSH
62408: PPUSH
// if not area or not rate or not max then
62409: LD_VAR 0 1
62413: NOT
62414: PUSH
62415: LD_VAR 0 2
62419: NOT
62420: OR
62421: PUSH
62422: LD_VAR 0 4
62426: NOT
62427: OR
62428: IFFALSE 62432
// exit ;
62430: GO 62621
// while 1 do
62432: LD_INT 1
62434: IFFALSE 62621
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62436: LD_ADDR_VAR 0 9
62440: PUSH
62441: LD_VAR 0 1
62445: PPUSH
62446: LD_INT 1
62448: PPUSH
62449: CALL_OW 287
62453: PUSH
62454: LD_INT 10
62456: MUL
62457: ST_TO_ADDR
// r := rate / 10 ;
62458: LD_ADDR_VAR 0 7
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: LD_INT 10
62470: DIVREAL
62471: ST_TO_ADDR
// time := 1 1$00 ;
62472: LD_ADDR_VAR 0 8
62476: PUSH
62477: LD_INT 2100
62479: ST_TO_ADDR
// if amount < min then
62480: LD_VAR 0 9
62484: PUSH
62485: LD_VAR 0 3
62489: LESS
62490: IFFALSE 62508
// r := r * 2 else
62492: LD_ADDR_VAR 0 7
62496: PUSH
62497: LD_VAR 0 7
62501: PUSH
62502: LD_INT 2
62504: MUL
62505: ST_TO_ADDR
62506: GO 62534
// if amount > max then
62508: LD_VAR 0 9
62512: PUSH
62513: LD_VAR 0 4
62517: GREATER
62518: IFFALSE 62534
// r := r / 2 ;
62520: LD_ADDR_VAR 0 7
62524: PUSH
62525: LD_VAR 0 7
62529: PUSH
62530: LD_INT 2
62532: DIVREAL
62533: ST_TO_ADDR
// time := time / r ;
62534: LD_ADDR_VAR 0 8
62538: PUSH
62539: LD_VAR 0 8
62543: PUSH
62544: LD_VAR 0 7
62548: DIVREAL
62549: ST_TO_ADDR
// if time < 0 then
62550: LD_VAR 0 8
62554: PUSH
62555: LD_INT 0
62557: LESS
62558: IFFALSE 62575
// time := time * - 1 ;
62560: LD_ADDR_VAR 0 8
62564: PUSH
62565: LD_VAR 0 8
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: MUL
62574: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62575: LD_VAR 0 8
62579: PUSH
62580: LD_INT 35
62582: PPUSH
62583: LD_INT 875
62585: PPUSH
62586: CALL_OW 12
62590: PLUS
62591: PPUSH
62592: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62596: LD_INT 1
62598: PPUSH
62599: LD_INT 5
62601: PPUSH
62602: CALL_OW 12
62606: PPUSH
62607: LD_VAR 0 1
62611: PPUSH
62612: LD_INT 1
62614: PPUSH
62615: CALL_OW 55
// end ;
62619: GO 62432
// end ;
62621: LD_VAR 0 5
62625: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62626: LD_INT 0
62628: PPUSH
62629: PPUSH
62630: PPUSH
62631: PPUSH
62632: PPUSH
62633: PPUSH
62634: PPUSH
62635: PPUSH
// if not turrets or not factories then
62636: LD_VAR 0 1
62640: NOT
62641: PUSH
62642: LD_VAR 0 2
62646: NOT
62647: OR
62648: IFFALSE 62652
// exit ;
62650: GO 62959
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62652: LD_ADDR_VAR 0 10
62656: PUSH
62657: LD_INT 5
62659: PUSH
62660: LD_INT 6
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: LD_INT 4
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: LD_INT 5
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 24
62694: PUSH
62695: LD_INT 25
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 23
62704: PUSH
62705: LD_INT 27
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 42
62718: PUSH
62719: LD_INT 43
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 44
62728: PUSH
62729: LD_INT 46
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 45
62738: PUSH
62739: LD_INT 47
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: LIST
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// result := [ ] ;
62756: LD_ADDR_VAR 0 3
62760: PUSH
62761: EMPTY
62762: ST_TO_ADDR
// for i in turrets do
62763: LD_ADDR_VAR 0 4
62767: PUSH
62768: LD_VAR 0 1
62772: PUSH
62773: FOR_IN
62774: IFFALSE 62957
// begin nat := GetNation ( i ) ;
62776: LD_ADDR_VAR 0 7
62780: PUSH
62781: LD_VAR 0 4
62785: PPUSH
62786: CALL_OW 248
62790: ST_TO_ADDR
// weapon := 0 ;
62791: LD_ADDR_VAR 0 8
62795: PUSH
62796: LD_INT 0
62798: ST_TO_ADDR
// if not nat then
62799: LD_VAR 0 7
62803: NOT
62804: IFFALSE 62808
// continue ;
62806: GO 62773
// for j in list [ nat ] do
62808: LD_ADDR_VAR 0 5
62812: PUSH
62813: LD_VAR 0 10
62817: PUSH
62818: LD_VAR 0 7
62822: ARRAY
62823: PUSH
62824: FOR_IN
62825: IFFALSE 62866
// if GetBWeapon ( i ) = j [ 1 ] then
62827: LD_VAR 0 4
62831: PPUSH
62832: CALL_OW 269
62836: PUSH
62837: LD_VAR 0 5
62841: PUSH
62842: LD_INT 1
62844: ARRAY
62845: EQUAL
62846: IFFALSE 62864
// begin weapon := j [ 2 ] ;
62848: LD_ADDR_VAR 0 8
62852: PUSH
62853: LD_VAR 0 5
62857: PUSH
62858: LD_INT 2
62860: ARRAY
62861: ST_TO_ADDR
// break ;
62862: GO 62866
// end ;
62864: GO 62824
62866: POP
62867: POP
// if not weapon then
62868: LD_VAR 0 8
62872: NOT
62873: IFFALSE 62877
// continue ;
62875: GO 62773
// for k in factories do
62877: LD_ADDR_VAR 0 6
62881: PUSH
62882: LD_VAR 0 2
62886: PUSH
62887: FOR_IN
62888: IFFALSE 62953
// begin weapons := AvailableWeaponList ( k ) ;
62890: LD_ADDR_VAR 0 9
62894: PUSH
62895: LD_VAR 0 6
62899: PPUSH
62900: CALL_OW 478
62904: ST_TO_ADDR
// if not weapons then
62905: LD_VAR 0 9
62909: NOT
62910: IFFALSE 62914
// continue ;
62912: GO 62887
// if weapon in weapons then
62914: LD_VAR 0 8
62918: PUSH
62919: LD_VAR 0 9
62923: IN
62924: IFFALSE 62951
// begin result := [ i , weapon ] ;
62926: LD_ADDR_VAR 0 3
62930: PUSH
62931: LD_VAR 0 4
62935: PUSH
62936: LD_VAR 0 8
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: ST_TO_ADDR
// exit ;
62945: POP
62946: POP
62947: POP
62948: POP
62949: GO 62959
// end ; end ;
62951: GO 62887
62953: POP
62954: POP
// end ;
62955: GO 62773
62957: POP
62958: POP
// end ;
62959: LD_VAR 0 3
62963: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62964: LD_INT 0
62966: PPUSH
// if not side or side > 8 then
62967: LD_VAR 0 3
62971: NOT
62972: PUSH
62973: LD_VAR 0 3
62977: PUSH
62978: LD_INT 8
62980: GREATER
62981: OR
62982: IFFALSE 62986
// exit ;
62984: GO 63045
// if not range then
62986: LD_VAR 0 4
62990: NOT
62991: IFFALSE 63002
// range := - 12 ;
62993: LD_ADDR_VAR 0 4
62997: PUSH
62998: LD_INT 12
63000: NEG
63001: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63002: LD_VAR 0 1
63006: PPUSH
63007: LD_VAR 0 2
63011: PPUSH
63012: LD_VAR 0 3
63016: PPUSH
63017: LD_VAR 0 4
63021: PPUSH
63022: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63026: LD_VAR 0 1
63030: PPUSH
63031: LD_VAR 0 2
63035: PPUSH
63036: LD_VAR 0 3
63040: PPUSH
63041: CALL_OW 331
// end ;
63045: LD_VAR 0 5
63049: RET
// export function Video ( mode ) ; begin
63050: LD_INT 0
63052: PPUSH
// ingame_video = mode ;
63053: LD_ADDR_OWVAR 52
63057: PUSH
63058: LD_VAR 0 1
63062: ST_TO_ADDR
// interface_hidden = mode ;
63063: LD_ADDR_OWVAR 54
63067: PUSH
63068: LD_VAR 0 1
63072: ST_TO_ADDR
// end ;
63073: LD_VAR 0 2
63077: RET
// export function Join ( array , element ) ; begin
63078: LD_INT 0
63080: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63081: LD_ADDR_VAR 0 3
63085: PUSH
63086: LD_VAR 0 1
63090: PPUSH
63091: LD_VAR 0 1
63095: PUSH
63096: LD_INT 1
63098: PLUS
63099: PPUSH
63100: LD_VAR 0 2
63104: PPUSH
63105: CALL_OW 1
63109: ST_TO_ADDR
// end ;
63110: LD_VAR 0 3
63114: RET
// export function JoinUnion ( array , element ) ; begin
63115: LD_INT 0
63117: PPUSH
// result := array union element ;
63118: LD_ADDR_VAR 0 3
63122: PUSH
63123: LD_VAR 0 1
63127: PUSH
63128: LD_VAR 0 2
63132: UNION
63133: ST_TO_ADDR
// end ;
63134: LD_VAR 0 3
63138: RET
// export function GetBehemoths ( side ) ; begin
63139: LD_INT 0
63141: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63142: LD_ADDR_VAR 0 2
63146: PUSH
63147: LD_INT 22
63149: PUSH
63150: LD_VAR 0 1
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 31
63161: PUSH
63162: LD_INT 25
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PPUSH
63173: CALL_OW 69
63177: ST_TO_ADDR
// end ;
63178: LD_VAR 0 2
63182: RET
// export function Shuffle ( array ) ; var i , index ; begin
63183: LD_INT 0
63185: PPUSH
63186: PPUSH
63187: PPUSH
// result := [ ] ;
63188: LD_ADDR_VAR 0 2
63192: PUSH
63193: EMPTY
63194: ST_TO_ADDR
// if not array then
63195: LD_VAR 0 1
63199: NOT
63200: IFFALSE 63204
// exit ;
63202: GO 63303
// Randomize ;
63204: CALL_OW 10
// for i = array downto 1 do
63208: LD_ADDR_VAR 0 3
63212: PUSH
63213: DOUBLE
63214: LD_VAR 0 1
63218: INC
63219: ST_TO_ADDR
63220: LD_INT 1
63222: PUSH
63223: FOR_DOWNTO
63224: IFFALSE 63301
// begin index := rand ( 1 , array ) ;
63226: LD_ADDR_VAR 0 4
63230: PUSH
63231: LD_INT 1
63233: PPUSH
63234: LD_VAR 0 1
63238: PPUSH
63239: CALL_OW 12
63243: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63244: LD_ADDR_VAR 0 2
63248: PUSH
63249: LD_VAR 0 2
63253: PPUSH
63254: LD_VAR 0 2
63258: PUSH
63259: LD_INT 1
63261: PLUS
63262: PPUSH
63263: LD_VAR 0 1
63267: PUSH
63268: LD_VAR 0 4
63272: ARRAY
63273: PPUSH
63274: CALL_OW 2
63278: ST_TO_ADDR
// array := Delete ( array , index ) ;
63279: LD_ADDR_VAR 0 1
63283: PUSH
63284: LD_VAR 0 1
63288: PPUSH
63289: LD_VAR 0 4
63293: PPUSH
63294: CALL_OW 3
63298: ST_TO_ADDR
// end ;
63299: GO 63223
63301: POP
63302: POP
// end ;
63303: LD_VAR 0 2
63307: RET
// export function GetBaseMaterials ( base ) ; begin
63308: LD_INT 0
63310: PPUSH
// result := [ 0 , 0 , 0 ] ;
63311: LD_ADDR_VAR 0 2
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: LIST
63329: ST_TO_ADDR
// if not base then
63330: LD_VAR 0 1
63334: NOT
63335: IFFALSE 63339
// exit ;
63337: GO 63388
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63339: LD_ADDR_VAR 0 2
63343: PUSH
63344: LD_VAR 0 1
63348: PPUSH
63349: LD_INT 1
63351: PPUSH
63352: CALL_OW 275
63356: PUSH
63357: LD_VAR 0 1
63361: PPUSH
63362: LD_INT 2
63364: PPUSH
63365: CALL_OW 275
63369: PUSH
63370: LD_VAR 0 1
63374: PPUSH
63375: LD_INT 3
63377: PPUSH
63378: CALL_OW 275
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: ST_TO_ADDR
// end ;
63388: LD_VAR 0 2
63392: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63393: LD_INT 0
63395: PPUSH
63396: PPUSH
// result := array ;
63397: LD_ADDR_VAR 0 3
63401: PUSH
63402: LD_VAR 0 1
63406: ST_TO_ADDR
// if size >= result then
63407: LD_VAR 0 2
63411: PUSH
63412: LD_VAR 0 3
63416: GREATEREQUAL
63417: IFFALSE 63421
// exit ;
63419: GO 63471
// if size then
63421: LD_VAR 0 2
63425: IFFALSE 63471
// for i := array downto size do
63427: LD_ADDR_VAR 0 4
63431: PUSH
63432: DOUBLE
63433: LD_VAR 0 1
63437: INC
63438: ST_TO_ADDR
63439: LD_VAR 0 2
63443: PUSH
63444: FOR_DOWNTO
63445: IFFALSE 63469
// result := Delete ( result , result ) ;
63447: LD_ADDR_VAR 0 3
63451: PUSH
63452: LD_VAR 0 3
63456: PPUSH
63457: LD_VAR 0 3
63461: PPUSH
63462: CALL_OW 3
63466: ST_TO_ADDR
63467: GO 63444
63469: POP
63470: POP
// end ;
63471: LD_VAR 0 3
63475: RET
// export function ComExit ( unit ) ; var tmp ; begin
63476: LD_INT 0
63478: PPUSH
63479: PPUSH
// if not IsInUnit ( unit ) then
63480: LD_VAR 0 1
63484: PPUSH
63485: CALL_OW 310
63489: NOT
63490: IFFALSE 63494
// exit ;
63492: GO 63554
// tmp := IsInUnit ( unit ) ;
63494: LD_ADDR_VAR 0 3
63498: PUSH
63499: LD_VAR 0 1
63503: PPUSH
63504: CALL_OW 310
63508: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63509: LD_VAR 0 3
63513: PPUSH
63514: CALL_OW 247
63518: PUSH
63519: LD_INT 2
63521: EQUAL
63522: IFFALSE 63535
// ComExitVehicle ( unit ) else
63524: LD_VAR 0 1
63528: PPUSH
63529: CALL_OW 121
63533: GO 63544
// ComExitBuilding ( unit ) ;
63535: LD_VAR 0 1
63539: PPUSH
63540: CALL_OW 122
// result := tmp ;
63544: LD_ADDR_VAR 0 2
63548: PUSH
63549: LD_VAR 0 3
63553: ST_TO_ADDR
// end ;
63554: LD_VAR 0 2
63558: RET
// export function ComExitAll ( units ) ; var i ; begin
63559: LD_INT 0
63561: PPUSH
63562: PPUSH
// if not units then
63563: LD_VAR 0 1
63567: NOT
63568: IFFALSE 63572
// exit ;
63570: GO 63598
// for i in units do
63572: LD_ADDR_VAR 0 3
63576: PUSH
63577: LD_VAR 0 1
63581: PUSH
63582: FOR_IN
63583: IFFALSE 63596
// ComExit ( i ) ;
63585: LD_VAR 0 3
63589: PPUSH
63590: CALL 63476 0 1
63594: GO 63582
63596: POP
63597: POP
// end ;
63598: LD_VAR 0 2
63602: RET
// export function ResetHc ; begin
63603: LD_INT 0
63605: PPUSH
// InitHc ;
63606: CALL_OW 19
// hc_importance := 0 ;
63610: LD_ADDR_OWVAR 32
63614: PUSH
63615: LD_INT 0
63617: ST_TO_ADDR
// end ;
63618: LD_VAR 0 1
63622: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63623: LD_INT 0
63625: PPUSH
63626: PPUSH
63627: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63628: LD_ADDR_VAR 0 6
63632: PUSH
63633: LD_VAR 0 1
63637: PUSH
63638: LD_VAR 0 3
63642: PLUS
63643: PUSH
63644: LD_INT 2
63646: DIV
63647: ST_TO_ADDR
// if _x < 0 then
63648: LD_VAR 0 6
63652: PUSH
63653: LD_INT 0
63655: LESS
63656: IFFALSE 63673
// _x := _x * - 1 ;
63658: LD_ADDR_VAR 0 6
63662: PUSH
63663: LD_VAR 0 6
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: MUL
63672: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63673: LD_ADDR_VAR 0 7
63677: PUSH
63678: LD_VAR 0 2
63682: PUSH
63683: LD_VAR 0 4
63687: PLUS
63688: PUSH
63689: LD_INT 2
63691: DIV
63692: ST_TO_ADDR
// if _y < 0 then
63693: LD_VAR 0 7
63697: PUSH
63698: LD_INT 0
63700: LESS
63701: IFFALSE 63718
// _y := _y * - 1 ;
63703: LD_ADDR_VAR 0 7
63707: PUSH
63708: LD_VAR 0 7
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: MUL
63717: ST_TO_ADDR
// result := [ _x , _y ] ;
63718: LD_ADDR_VAR 0 5
63722: PUSH
63723: LD_VAR 0 6
63727: PUSH
63728: LD_VAR 0 7
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: ST_TO_ADDR
// end ;
63737: LD_VAR 0 5
63741: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63742: LD_INT 0
63744: PPUSH
63745: PPUSH
63746: PPUSH
63747: PPUSH
// task := GetTaskList ( unit ) ;
63748: LD_ADDR_VAR 0 7
63752: PUSH
63753: LD_VAR 0 1
63757: PPUSH
63758: CALL_OW 437
63762: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63763: LD_VAR 0 7
63767: NOT
63768: PUSH
63769: LD_VAR 0 1
63773: PPUSH
63774: LD_VAR 0 2
63778: PPUSH
63779: CALL_OW 308
63783: NOT
63784: AND
63785: IFFALSE 63789
// exit ;
63787: GO 63907
// if IsInArea ( unit , area ) then
63789: LD_VAR 0 1
63793: PPUSH
63794: LD_VAR 0 2
63798: PPUSH
63799: CALL_OW 308
63803: IFFALSE 63821
// begin ComMoveToArea ( unit , goAway ) ;
63805: LD_VAR 0 1
63809: PPUSH
63810: LD_VAR 0 3
63814: PPUSH
63815: CALL_OW 113
// exit ;
63819: GO 63907
// end ; if task [ 1 ] [ 1 ] <> M then
63821: LD_VAR 0 7
63825: PUSH
63826: LD_INT 1
63828: ARRAY
63829: PUSH
63830: LD_INT 1
63832: ARRAY
63833: PUSH
63834: LD_STRING M
63836: NONEQUAL
63837: IFFALSE 63841
// exit ;
63839: GO 63907
// x := task [ 1 ] [ 2 ] ;
63841: LD_ADDR_VAR 0 5
63845: PUSH
63846: LD_VAR 0 7
63850: PUSH
63851: LD_INT 1
63853: ARRAY
63854: PUSH
63855: LD_INT 2
63857: ARRAY
63858: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63859: LD_ADDR_VAR 0 6
63863: PUSH
63864: LD_VAR 0 7
63868: PUSH
63869: LD_INT 1
63871: ARRAY
63872: PUSH
63873: LD_INT 3
63875: ARRAY
63876: ST_TO_ADDR
// if InArea ( x , y , area ) then
63877: LD_VAR 0 5
63881: PPUSH
63882: LD_VAR 0 6
63886: PPUSH
63887: LD_VAR 0 2
63891: PPUSH
63892: CALL_OW 309
63896: IFFALSE 63907
// ComStop ( unit ) ;
63898: LD_VAR 0 1
63902: PPUSH
63903: CALL_OW 141
// end ;
63907: LD_VAR 0 4
63911: RET
// export function Abs ( value ) ; begin
63912: LD_INT 0
63914: PPUSH
// result := value ;
63915: LD_ADDR_VAR 0 2
63919: PUSH
63920: LD_VAR 0 1
63924: ST_TO_ADDR
// if value < 0 then
63925: LD_VAR 0 1
63929: PUSH
63930: LD_INT 0
63932: LESS
63933: IFFALSE 63950
// result := value * - 1 ;
63935: LD_ADDR_VAR 0 2
63939: PUSH
63940: LD_VAR 0 1
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: MUL
63949: ST_TO_ADDR
// end ;
63950: LD_VAR 0 2
63954: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63955: LD_INT 0
63957: PPUSH
63958: PPUSH
63959: PPUSH
63960: PPUSH
63961: PPUSH
63962: PPUSH
63963: PPUSH
63964: PPUSH
// if not unit or not building then
63965: LD_VAR 0 1
63969: NOT
63970: PUSH
63971: LD_VAR 0 2
63975: NOT
63976: OR
63977: IFFALSE 63981
// exit ;
63979: GO 64207
// x := GetX ( building ) ;
63981: LD_ADDR_VAR 0 4
63985: PUSH
63986: LD_VAR 0 2
63990: PPUSH
63991: CALL_OW 250
63995: ST_TO_ADDR
// y := GetY ( building ) ;
63996: LD_ADDR_VAR 0 6
64000: PUSH
64001: LD_VAR 0 2
64005: PPUSH
64006: CALL_OW 251
64010: ST_TO_ADDR
// d := GetDir ( building ) ;
64011: LD_ADDR_VAR 0 8
64015: PUSH
64016: LD_VAR 0 2
64020: PPUSH
64021: CALL_OW 254
64025: ST_TO_ADDR
// r := 4 ;
64026: LD_ADDR_VAR 0 9
64030: PUSH
64031: LD_INT 4
64033: ST_TO_ADDR
// for i := 1 to 5 do
64034: LD_ADDR_VAR 0 10
64038: PUSH
64039: DOUBLE
64040: LD_INT 1
64042: DEC
64043: ST_TO_ADDR
64044: LD_INT 5
64046: PUSH
64047: FOR_TO
64048: IFFALSE 64205
// begin _x := ShiftX ( x , d , r + i ) ;
64050: LD_ADDR_VAR 0 5
64054: PUSH
64055: LD_VAR 0 4
64059: PPUSH
64060: LD_VAR 0 8
64064: PPUSH
64065: LD_VAR 0 9
64069: PUSH
64070: LD_VAR 0 10
64074: PLUS
64075: PPUSH
64076: CALL_OW 272
64080: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64081: LD_ADDR_VAR 0 7
64085: PUSH
64086: LD_VAR 0 6
64090: PPUSH
64091: LD_VAR 0 8
64095: PPUSH
64096: LD_VAR 0 9
64100: PUSH
64101: LD_VAR 0 10
64105: PLUS
64106: PPUSH
64107: CALL_OW 273
64111: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64112: LD_VAR 0 5
64116: PPUSH
64117: LD_VAR 0 7
64121: PPUSH
64122: CALL_OW 488
64126: PUSH
64127: LD_VAR 0 5
64131: PPUSH
64132: LD_VAR 0 7
64136: PPUSH
64137: CALL_OW 428
64141: PPUSH
64142: CALL_OW 247
64146: PUSH
64147: LD_INT 3
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: IN
64157: NOT
64158: AND
64159: IFFALSE 64203
// begin ComMoveXY ( unit , _x , _y ) ;
64161: LD_VAR 0 1
64165: PPUSH
64166: LD_VAR 0 5
64170: PPUSH
64171: LD_VAR 0 7
64175: PPUSH
64176: CALL_OW 111
// result := [ _x , _y ] ;
64180: LD_ADDR_VAR 0 3
64184: PUSH
64185: LD_VAR 0 5
64189: PUSH
64190: LD_VAR 0 7
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: ST_TO_ADDR
// exit ;
64199: POP
64200: POP
64201: GO 64207
// end ; end ;
64203: GO 64047
64205: POP
64206: POP
// end ;
64207: LD_VAR 0 3
64211: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64212: LD_INT 0
64214: PPUSH
64215: PPUSH
64216: PPUSH
// result := 0 ;
64217: LD_ADDR_VAR 0 3
64221: PUSH
64222: LD_INT 0
64224: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64225: LD_VAR 0 1
64229: PUSH
64230: LD_INT 0
64232: LESS
64233: PUSH
64234: LD_VAR 0 1
64238: PUSH
64239: LD_INT 8
64241: GREATER
64242: OR
64243: PUSH
64244: LD_VAR 0 2
64248: PUSH
64249: LD_INT 0
64251: LESS
64252: OR
64253: PUSH
64254: LD_VAR 0 2
64258: PUSH
64259: LD_INT 8
64261: GREATER
64262: OR
64263: IFFALSE 64267
// exit ;
64265: GO 64342
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64267: LD_ADDR_VAR 0 4
64271: PUSH
64272: LD_INT 22
64274: PUSH
64275: LD_VAR 0 2
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PPUSH
64284: CALL_OW 69
64288: PUSH
64289: FOR_IN
64290: IFFALSE 64340
// begin un := UnitShoot ( i ) ;
64292: LD_ADDR_VAR 0 5
64296: PUSH
64297: LD_VAR 0 4
64301: PPUSH
64302: CALL_OW 504
64306: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64307: LD_VAR 0 5
64311: PPUSH
64312: CALL_OW 255
64316: PUSH
64317: LD_VAR 0 1
64321: EQUAL
64322: IFFALSE 64338
// begin result := un ;
64324: LD_ADDR_VAR 0 3
64328: PUSH
64329: LD_VAR 0 5
64333: ST_TO_ADDR
// exit ;
64334: POP
64335: POP
64336: GO 64342
// end ; end ;
64338: GO 64289
64340: POP
64341: POP
// end ;
64342: LD_VAR 0 3
64346: RET
// export function GetCargoBay ( units ) ; begin
64347: LD_INT 0
64349: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64350: LD_ADDR_VAR 0 2
64354: PUSH
64355: LD_VAR 0 1
64359: PPUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 34
64365: PUSH
64366: LD_INT 12
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 34
64375: PUSH
64376: LD_INT 51
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 34
64385: PUSH
64386: LD_INT 32
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 34
64395: PUSH
64396: LD_INT 89
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: PPUSH
64410: CALL_OW 72
64414: ST_TO_ADDR
// end ;
64415: LD_VAR 0 2
64419: RET
// export function Negate ( value ) ; begin
64420: LD_INT 0
64422: PPUSH
// result := not value ;
64423: LD_ADDR_VAR 0 2
64427: PUSH
64428: LD_VAR 0 1
64432: NOT
64433: ST_TO_ADDR
// end ;
64434: LD_VAR 0 2
64438: RET
// export function Inc ( value ) ; begin
64439: LD_INT 0
64441: PPUSH
// result := value + 1 ;
64442: LD_ADDR_VAR 0 2
64446: PUSH
64447: LD_VAR 0 1
64451: PUSH
64452: LD_INT 1
64454: PLUS
64455: ST_TO_ADDR
// end ;
64456: LD_VAR 0 2
64460: RET
// export function Dec ( value ) ; begin
64461: LD_INT 0
64463: PPUSH
// result := value - 1 ;
64464: LD_ADDR_VAR 0 2
64468: PUSH
64469: LD_VAR 0 1
64473: PUSH
64474: LD_INT 1
64476: MINUS
64477: ST_TO_ADDR
// end ;
64478: LD_VAR 0 2
64482: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64483: LD_INT 0
64485: PPUSH
64486: PPUSH
64487: PPUSH
64488: PPUSH
64489: PPUSH
64490: PPUSH
64491: PPUSH
64492: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64493: LD_VAR 0 1
64497: PPUSH
64498: LD_VAR 0 2
64502: PPUSH
64503: CALL_OW 488
64507: NOT
64508: PUSH
64509: LD_VAR 0 3
64513: PPUSH
64514: LD_VAR 0 4
64518: PPUSH
64519: CALL_OW 488
64523: NOT
64524: OR
64525: IFFALSE 64538
// begin result := - 1 ;
64527: LD_ADDR_VAR 0 5
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: ST_TO_ADDR
// exit ;
64536: GO 64773
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64538: LD_ADDR_VAR 0 12
64542: PUSH
64543: LD_VAR 0 1
64547: PPUSH
64548: LD_VAR 0 2
64552: PPUSH
64553: LD_VAR 0 3
64557: PPUSH
64558: LD_VAR 0 4
64562: PPUSH
64563: CALL 63623 0 4
64567: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64568: LD_ADDR_VAR 0 11
64572: PUSH
64573: LD_VAR 0 1
64577: PPUSH
64578: LD_VAR 0 2
64582: PPUSH
64583: LD_VAR 0 12
64587: PUSH
64588: LD_INT 1
64590: ARRAY
64591: PPUSH
64592: LD_VAR 0 12
64596: PUSH
64597: LD_INT 2
64599: ARRAY
64600: PPUSH
64601: CALL_OW 298
64605: ST_TO_ADDR
// distance := 9999 ;
64606: LD_ADDR_VAR 0 10
64610: PUSH
64611: LD_INT 9999
64613: ST_TO_ADDR
// for i := 0 to 5 do
64614: LD_ADDR_VAR 0 6
64618: PUSH
64619: DOUBLE
64620: LD_INT 0
64622: DEC
64623: ST_TO_ADDR
64624: LD_INT 5
64626: PUSH
64627: FOR_TO
64628: IFFALSE 64771
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64630: LD_ADDR_VAR 0 7
64634: PUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: LD_VAR 0 6
64644: PPUSH
64645: LD_VAR 0 11
64649: PPUSH
64650: CALL_OW 272
64654: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64655: LD_ADDR_VAR 0 8
64659: PUSH
64660: LD_VAR 0 2
64664: PPUSH
64665: LD_VAR 0 6
64669: PPUSH
64670: LD_VAR 0 11
64674: PPUSH
64675: CALL_OW 273
64679: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64680: LD_VAR 0 7
64684: PPUSH
64685: LD_VAR 0 8
64689: PPUSH
64690: CALL_OW 488
64694: NOT
64695: IFFALSE 64699
// continue ;
64697: GO 64627
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64699: LD_ADDR_VAR 0 9
64703: PUSH
64704: LD_VAR 0 12
64708: PUSH
64709: LD_INT 1
64711: ARRAY
64712: PPUSH
64713: LD_VAR 0 12
64717: PUSH
64718: LD_INT 2
64720: ARRAY
64721: PPUSH
64722: LD_VAR 0 7
64726: PPUSH
64727: LD_VAR 0 8
64731: PPUSH
64732: CALL_OW 298
64736: ST_TO_ADDR
// if tmp < distance then
64737: LD_VAR 0 9
64741: PUSH
64742: LD_VAR 0 10
64746: LESS
64747: IFFALSE 64769
// begin result := i ;
64749: LD_ADDR_VAR 0 5
64753: PUSH
64754: LD_VAR 0 6
64758: ST_TO_ADDR
// distance := tmp ;
64759: LD_ADDR_VAR 0 10
64763: PUSH
64764: LD_VAR 0 9
64768: ST_TO_ADDR
// end ; end ;
64769: GO 64627
64771: POP
64772: POP
// end ;
64773: LD_VAR 0 5
64777: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64778: LD_INT 0
64780: PPUSH
64781: PPUSH
// if not driver or not IsInUnit ( driver ) then
64782: LD_VAR 0 1
64786: NOT
64787: PUSH
64788: LD_VAR 0 1
64792: PPUSH
64793: CALL_OW 310
64797: NOT
64798: OR
64799: IFFALSE 64803
// exit ;
64801: GO 64893
// vehicle := IsInUnit ( driver ) ;
64803: LD_ADDR_VAR 0 3
64807: PUSH
64808: LD_VAR 0 1
64812: PPUSH
64813: CALL_OW 310
64817: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64818: LD_VAR 0 1
64822: PPUSH
64823: LD_STRING \
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: PUSH
64853: LD_STRING E
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_VAR 0 3
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PPUSH
64889: CALL_OW 446
// end ;
64893: LD_VAR 0 2
64897: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64898: LD_INT 0
64900: PPUSH
64901: PPUSH
// if not driver or not IsInUnit ( driver ) then
64902: LD_VAR 0 1
64906: NOT
64907: PUSH
64908: LD_VAR 0 1
64912: PPUSH
64913: CALL_OW 310
64917: NOT
64918: OR
64919: IFFALSE 64923
// exit ;
64921: GO 65013
// vehicle := IsInUnit ( driver ) ;
64923: LD_ADDR_VAR 0 3
64927: PUSH
64928: LD_VAR 0 1
64932: PPUSH
64933: CALL_OW 310
64937: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64938: LD_VAR 0 1
64942: PPUSH
64943: LD_STRING \
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: PUSH
64973: LD_STRING E
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_VAR 0 3
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PPUSH
65009: CALL_OW 447
// end ;
65013: LD_VAR 0 2
65017: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65018: LD_INT 0
65020: PPUSH
65021: PPUSH
65022: PPUSH
// tmp := [ ] ;
65023: LD_ADDR_VAR 0 5
65027: PUSH
65028: EMPTY
65029: ST_TO_ADDR
// for i in units do
65030: LD_ADDR_VAR 0 4
65034: PUSH
65035: LD_VAR 0 1
65039: PUSH
65040: FOR_IN
65041: IFFALSE 65079
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65043: LD_ADDR_VAR 0 5
65047: PUSH
65048: LD_VAR 0 5
65052: PPUSH
65053: LD_VAR 0 5
65057: PUSH
65058: LD_INT 1
65060: PLUS
65061: PPUSH
65062: LD_VAR 0 4
65066: PPUSH
65067: CALL_OW 256
65071: PPUSH
65072: CALL_OW 2
65076: ST_TO_ADDR
65077: GO 65040
65079: POP
65080: POP
// if not tmp then
65081: LD_VAR 0 5
65085: NOT
65086: IFFALSE 65090
// exit ;
65088: GO 65138
// if asc then
65090: LD_VAR 0 2
65094: IFFALSE 65118
// result := SortListByListAsc ( units , tmp ) else
65096: LD_ADDR_VAR 0 3
65100: PUSH
65101: LD_VAR 0 1
65105: PPUSH
65106: LD_VAR 0 5
65110: PPUSH
65111: CALL_OW 76
65115: ST_TO_ADDR
65116: GO 65138
// result := SortListByListDesc ( units , tmp ) ;
65118: LD_ADDR_VAR 0 3
65122: PUSH
65123: LD_VAR 0 1
65127: PPUSH
65128: LD_VAR 0 5
65132: PPUSH
65133: CALL_OW 77
65137: ST_TO_ADDR
// end ;
65138: LD_VAR 0 3
65142: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65143: LD_INT 0
65145: PPUSH
65146: PPUSH
// task := GetTaskList ( mech ) ;
65147: LD_ADDR_VAR 0 4
65151: PUSH
65152: LD_VAR 0 1
65156: PPUSH
65157: CALL_OW 437
65161: ST_TO_ADDR
// if not task then
65162: LD_VAR 0 4
65166: NOT
65167: IFFALSE 65171
// exit ;
65169: GO 65213
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65171: LD_ADDR_VAR 0 3
65175: PUSH
65176: LD_VAR 0 4
65180: PUSH
65181: LD_INT 1
65183: ARRAY
65184: PUSH
65185: LD_INT 1
65187: ARRAY
65188: PUSH
65189: LD_STRING r
65191: EQUAL
65192: PUSH
65193: LD_VAR 0 4
65197: PUSH
65198: LD_INT 1
65200: ARRAY
65201: PUSH
65202: LD_INT 4
65204: ARRAY
65205: PUSH
65206: LD_VAR 0 2
65210: EQUAL
65211: AND
65212: ST_TO_ADDR
// end ;
65213: LD_VAR 0 3
65217: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65218: LD_INT 0
65220: PPUSH
// SetDir ( unit , d ) ;
65221: LD_VAR 0 1
65225: PPUSH
65226: LD_VAR 0 4
65230: PPUSH
65231: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65235: LD_VAR 0 1
65239: PPUSH
65240: LD_VAR 0 2
65244: PPUSH
65245: LD_VAR 0 3
65249: PPUSH
65250: LD_VAR 0 5
65254: PPUSH
65255: CALL_OW 48
// end ;
65259: LD_VAR 0 6
65263: RET
// export function ToNaturalNumber ( number ) ; begin
65264: LD_INT 0
65266: PPUSH
// result := number div 1 ;
65267: LD_ADDR_VAR 0 2
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_INT 1
65279: DIV
65280: ST_TO_ADDR
// if number < 0 then
65281: LD_VAR 0 1
65285: PUSH
65286: LD_INT 0
65288: LESS
65289: IFFALSE 65299
// result := 0 ;
65291: LD_ADDR_VAR 0 2
65295: PUSH
65296: LD_INT 0
65298: ST_TO_ADDR
// end ;
65299: LD_VAR 0 2
65303: RET
// export function SortByClass ( units , class ) ; var un ; begin
65304: LD_INT 0
65306: PPUSH
65307: PPUSH
// if not units or not class then
65308: LD_VAR 0 1
65312: NOT
65313: PUSH
65314: LD_VAR 0 2
65318: NOT
65319: OR
65320: IFFALSE 65324
// exit ;
65322: GO 65419
// result := [ ] ;
65324: LD_ADDR_VAR 0 3
65328: PUSH
65329: EMPTY
65330: ST_TO_ADDR
// for un in units do
65331: LD_ADDR_VAR 0 4
65335: PUSH
65336: LD_VAR 0 1
65340: PUSH
65341: FOR_IN
65342: IFFALSE 65417
// if GetClass ( un ) = class then
65344: LD_VAR 0 4
65348: PPUSH
65349: CALL_OW 257
65353: PUSH
65354: LD_VAR 0 2
65358: EQUAL
65359: IFFALSE 65386
// result := Insert ( result , 1 , un ) else
65361: LD_ADDR_VAR 0 3
65365: PUSH
65366: LD_VAR 0 3
65370: PPUSH
65371: LD_INT 1
65373: PPUSH
65374: LD_VAR 0 4
65378: PPUSH
65379: CALL_OW 2
65383: ST_TO_ADDR
65384: GO 65415
// result := Replace ( result , result + 1 , un ) ;
65386: LD_ADDR_VAR 0 3
65390: PUSH
65391: LD_VAR 0 3
65395: PPUSH
65396: LD_VAR 0 3
65400: PUSH
65401: LD_INT 1
65403: PLUS
65404: PPUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: CALL_OW 1
65414: ST_TO_ADDR
65415: GO 65341
65417: POP
65418: POP
// end ;
65419: LD_VAR 0 3
65423: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65424: LD_INT 0
65426: PPUSH
65427: PPUSH
65428: PPUSH
65429: PPUSH
65430: PPUSH
65431: PPUSH
65432: PPUSH
// result := [ ] ;
65433: LD_ADDR_VAR 0 4
65437: PUSH
65438: EMPTY
65439: ST_TO_ADDR
// if x - r < 0 then
65440: LD_VAR 0 1
65444: PUSH
65445: LD_VAR 0 3
65449: MINUS
65450: PUSH
65451: LD_INT 0
65453: LESS
65454: IFFALSE 65466
// min_x := 0 else
65456: LD_ADDR_VAR 0 8
65460: PUSH
65461: LD_INT 0
65463: ST_TO_ADDR
65464: GO 65482
// min_x := x - r ;
65466: LD_ADDR_VAR 0 8
65470: PUSH
65471: LD_VAR 0 1
65475: PUSH
65476: LD_VAR 0 3
65480: MINUS
65481: ST_TO_ADDR
// if y - r < 0 then
65482: LD_VAR 0 2
65486: PUSH
65487: LD_VAR 0 3
65491: MINUS
65492: PUSH
65493: LD_INT 0
65495: LESS
65496: IFFALSE 65508
// min_y := 0 else
65498: LD_ADDR_VAR 0 7
65502: PUSH
65503: LD_INT 0
65505: ST_TO_ADDR
65506: GO 65524
// min_y := y - r ;
65508: LD_ADDR_VAR 0 7
65512: PUSH
65513: LD_VAR 0 2
65517: PUSH
65518: LD_VAR 0 3
65522: MINUS
65523: ST_TO_ADDR
// max_x := x + r ;
65524: LD_ADDR_VAR 0 9
65528: PUSH
65529: LD_VAR 0 1
65533: PUSH
65534: LD_VAR 0 3
65538: PLUS
65539: ST_TO_ADDR
// max_y := y + r ;
65540: LD_ADDR_VAR 0 10
65544: PUSH
65545: LD_VAR 0 2
65549: PUSH
65550: LD_VAR 0 3
65554: PLUS
65555: ST_TO_ADDR
// for _x = min_x to max_x do
65556: LD_ADDR_VAR 0 5
65560: PUSH
65561: DOUBLE
65562: LD_VAR 0 8
65566: DEC
65567: ST_TO_ADDR
65568: LD_VAR 0 9
65572: PUSH
65573: FOR_TO
65574: IFFALSE 65675
// for _y = min_y to max_y do
65576: LD_ADDR_VAR 0 6
65580: PUSH
65581: DOUBLE
65582: LD_VAR 0 7
65586: DEC
65587: ST_TO_ADDR
65588: LD_VAR 0 10
65592: PUSH
65593: FOR_TO
65594: IFFALSE 65671
// begin if not ValidHex ( _x , _y ) then
65596: LD_VAR 0 5
65600: PPUSH
65601: LD_VAR 0 6
65605: PPUSH
65606: CALL_OW 488
65610: NOT
65611: IFFALSE 65615
// continue ;
65613: GO 65593
// if GetResourceTypeXY ( _x , _y ) then
65615: LD_VAR 0 5
65619: PPUSH
65620: LD_VAR 0 6
65624: PPUSH
65625: CALL_OW 283
65629: IFFALSE 65669
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65631: LD_ADDR_VAR 0 4
65635: PUSH
65636: LD_VAR 0 4
65640: PPUSH
65641: LD_VAR 0 4
65645: PUSH
65646: LD_INT 1
65648: PLUS
65649: PPUSH
65650: LD_VAR 0 5
65654: PUSH
65655: LD_VAR 0 6
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PPUSH
65664: CALL_OW 1
65668: ST_TO_ADDR
// end ;
65669: GO 65593
65671: POP
65672: POP
65673: GO 65573
65675: POP
65676: POP
// end ;
65677: LD_VAR 0 4
65681: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65682: LD_INT 0
65684: PPUSH
65685: PPUSH
65686: PPUSH
65687: PPUSH
65688: PPUSH
65689: PPUSH
65690: PPUSH
65691: PPUSH
// if not units then
65692: LD_VAR 0 1
65696: NOT
65697: IFFALSE 65701
// exit ;
65699: GO 66225
// result := UnitFilter ( units , [ f_ok ] ) ;
65701: LD_ADDR_VAR 0 3
65705: PUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: LD_INT 50
65713: PUSH
65714: EMPTY
65715: LIST
65716: PPUSH
65717: CALL_OW 72
65721: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65722: LD_ADDR_VAR 0 8
65726: PUSH
65727: LD_VAR 0 1
65731: PUSH
65732: LD_INT 1
65734: ARRAY
65735: PPUSH
65736: CALL_OW 255
65740: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65741: LD_ADDR_VAR 0 10
65745: PUSH
65746: LD_INT 29
65748: PUSH
65749: LD_INT 91
65751: PUSH
65752: LD_INT 49
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: ST_TO_ADDR
// if not result then
65760: LD_VAR 0 3
65764: NOT
65765: IFFALSE 65769
// exit ;
65767: GO 66225
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65769: LD_ADDR_VAR 0 5
65773: PUSH
65774: LD_INT 81
65776: PUSH
65777: LD_VAR 0 8
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PPUSH
65786: CALL_OW 69
65790: ST_TO_ADDR
// for i in result do
65791: LD_ADDR_VAR 0 4
65795: PUSH
65796: LD_VAR 0 3
65800: PUSH
65801: FOR_IN
65802: IFFALSE 66223
// begin tag := GetTag ( i ) + 1 ;
65804: LD_ADDR_VAR 0 9
65808: PUSH
65809: LD_VAR 0 4
65813: PPUSH
65814: CALL_OW 110
65818: PUSH
65819: LD_INT 1
65821: PLUS
65822: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65823: LD_ADDR_VAR 0 7
65827: PUSH
65828: LD_VAR 0 4
65832: PPUSH
65833: CALL_OW 250
65837: PPUSH
65838: LD_VAR 0 4
65842: PPUSH
65843: CALL_OW 251
65847: PPUSH
65848: LD_INT 6
65850: PPUSH
65851: CALL 65424 0 3
65855: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65856: LD_VAR 0 4
65860: PPUSH
65861: CALL_OW 247
65865: PUSH
65866: LD_INT 2
65868: EQUAL
65869: PUSH
65870: LD_VAR 0 7
65874: AND
65875: PUSH
65876: LD_VAR 0 4
65880: PPUSH
65881: CALL_OW 264
65885: PUSH
65886: LD_VAR 0 10
65890: IN
65891: NOT
65892: AND
65893: IFFALSE 65932
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65895: LD_VAR 0 4
65899: PPUSH
65900: LD_VAR 0 7
65904: PUSH
65905: LD_INT 1
65907: ARRAY
65908: PUSH
65909: LD_INT 1
65911: ARRAY
65912: PPUSH
65913: LD_VAR 0 7
65917: PUSH
65918: LD_INT 1
65920: ARRAY
65921: PUSH
65922: LD_INT 2
65924: ARRAY
65925: PPUSH
65926: CALL_OW 116
65930: GO 66221
// if path > tag then
65932: LD_VAR 0 2
65936: PUSH
65937: LD_VAR 0 9
65941: GREATER
65942: IFFALSE 66150
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65944: LD_ADDR_VAR 0 6
65948: PUSH
65949: LD_VAR 0 5
65953: PPUSH
65954: LD_INT 91
65956: PUSH
65957: LD_VAR 0 4
65961: PUSH
65962: LD_INT 8
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: LIST
65969: PPUSH
65970: CALL_OW 72
65974: ST_TO_ADDR
// if nearEnemy then
65975: LD_VAR 0 6
65979: IFFALSE 66048
// begin if GetWeapon ( i ) = ru_time_lapser then
65981: LD_VAR 0 4
65985: PPUSH
65986: CALL_OW 264
65990: PUSH
65991: LD_INT 49
65993: EQUAL
65994: IFFALSE 66022
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65996: LD_VAR 0 4
66000: PPUSH
66001: LD_VAR 0 6
66005: PPUSH
66006: LD_VAR 0 4
66010: PPUSH
66011: CALL_OW 74
66015: PPUSH
66016: CALL_OW 112
66020: GO 66046
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66022: LD_VAR 0 4
66026: PPUSH
66027: LD_VAR 0 6
66031: PPUSH
66032: LD_VAR 0 4
66036: PPUSH
66037: CALL_OW 74
66041: PPUSH
66042: CALL 67150 0 2
// end else
66046: GO 66148
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66048: LD_VAR 0 4
66052: PPUSH
66053: LD_VAR 0 2
66057: PUSH
66058: LD_VAR 0 9
66062: ARRAY
66063: PUSH
66064: LD_INT 1
66066: ARRAY
66067: PPUSH
66068: LD_VAR 0 2
66072: PUSH
66073: LD_VAR 0 9
66077: ARRAY
66078: PUSH
66079: LD_INT 2
66081: ARRAY
66082: PPUSH
66083: CALL_OW 297
66087: PUSH
66088: LD_INT 6
66090: GREATER
66091: IFFALSE 66134
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66093: LD_VAR 0 4
66097: PPUSH
66098: LD_VAR 0 2
66102: PUSH
66103: LD_VAR 0 9
66107: ARRAY
66108: PUSH
66109: LD_INT 1
66111: ARRAY
66112: PPUSH
66113: LD_VAR 0 2
66117: PUSH
66118: LD_VAR 0 9
66122: ARRAY
66123: PUSH
66124: LD_INT 2
66126: ARRAY
66127: PPUSH
66128: CALL_OW 114
66132: GO 66148
// SetTag ( i , tag ) ;
66134: LD_VAR 0 4
66138: PPUSH
66139: LD_VAR 0 9
66143: PPUSH
66144: CALL_OW 109
// end else
66148: GO 66221
// if enemy then
66150: LD_VAR 0 5
66154: IFFALSE 66221
// begin if GetWeapon ( i ) = ru_time_lapser then
66156: LD_VAR 0 4
66160: PPUSH
66161: CALL_OW 264
66165: PUSH
66166: LD_INT 49
66168: EQUAL
66169: IFFALSE 66197
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66171: LD_VAR 0 4
66175: PPUSH
66176: LD_VAR 0 5
66180: PPUSH
66181: LD_VAR 0 4
66185: PPUSH
66186: CALL_OW 74
66190: PPUSH
66191: CALL_OW 112
66195: GO 66221
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66197: LD_VAR 0 4
66201: PPUSH
66202: LD_VAR 0 5
66206: PPUSH
66207: LD_VAR 0 4
66211: PPUSH
66212: CALL_OW 74
66216: PPUSH
66217: CALL 67150 0 2
// end ; end ;
66221: GO 65801
66223: POP
66224: POP
// end ;
66225: LD_VAR 0 3
66229: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66230: LD_INT 0
66232: PPUSH
66233: PPUSH
66234: PPUSH
// if not unit or IsInUnit ( unit ) then
66235: LD_VAR 0 1
66239: NOT
66240: PUSH
66241: LD_VAR 0 1
66245: PPUSH
66246: CALL_OW 310
66250: OR
66251: IFFALSE 66255
// exit ;
66253: GO 66346
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66255: LD_ADDR_VAR 0 4
66259: PUSH
66260: LD_VAR 0 1
66264: PPUSH
66265: CALL_OW 250
66269: PPUSH
66270: LD_VAR 0 2
66274: PPUSH
66275: LD_INT 1
66277: PPUSH
66278: CALL_OW 272
66282: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66283: LD_ADDR_VAR 0 5
66287: PUSH
66288: LD_VAR 0 1
66292: PPUSH
66293: CALL_OW 251
66297: PPUSH
66298: LD_VAR 0 2
66302: PPUSH
66303: LD_INT 1
66305: PPUSH
66306: CALL_OW 273
66310: ST_TO_ADDR
// if ValidHex ( x , y ) then
66311: LD_VAR 0 4
66315: PPUSH
66316: LD_VAR 0 5
66320: PPUSH
66321: CALL_OW 488
66325: IFFALSE 66346
// ComTurnXY ( unit , x , y ) ;
66327: LD_VAR 0 1
66331: PPUSH
66332: LD_VAR 0 4
66336: PPUSH
66337: LD_VAR 0 5
66341: PPUSH
66342: CALL_OW 118
// end ;
66346: LD_VAR 0 3
66350: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66351: LD_INT 0
66353: PPUSH
66354: PPUSH
// result := false ;
66355: LD_ADDR_VAR 0 3
66359: PUSH
66360: LD_INT 0
66362: ST_TO_ADDR
// if not units then
66363: LD_VAR 0 2
66367: NOT
66368: IFFALSE 66372
// exit ;
66370: GO 66417
// for i in units do
66372: LD_ADDR_VAR 0 4
66376: PUSH
66377: LD_VAR 0 2
66381: PUSH
66382: FOR_IN
66383: IFFALSE 66415
// if See ( side , i ) then
66385: LD_VAR 0 1
66389: PPUSH
66390: LD_VAR 0 4
66394: PPUSH
66395: CALL_OW 292
66399: IFFALSE 66413
// begin result := true ;
66401: LD_ADDR_VAR 0 3
66405: PUSH
66406: LD_INT 1
66408: ST_TO_ADDR
// exit ;
66409: POP
66410: POP
66411: GO 66417
// end ;
66413: GO 66382
66415: POP
66416: POP
// end ;
66417: LD_VAR 0 3
66421: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66422: LD_INT 0
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
// if not unit or not points then
66428: LD_VAR 0 1
66432: NOT
66433: PUSH
66434: LD_VAR 0 2
66438: NOT
66439: OR
66440: IFFALSE 66444
// exit ;
66442: GO 66534
// dist := 99999 ;
66444: LD_ADDR_VAR 0 5
66448: PUSH
66449: LD_INT 99999
66451: ST_TO_ADDR
// for i in points do
66452: LD_ADDR_VAR 0 4
66456: PUSH
66457: LD_VAR 0 2
66461: PUSH
66462: FOR_IN
66463: IFFALSE 66532
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66465: LD_ADDR_VAR 0 6
66469: PUSH
66470: LD_VAR 0 1
66474: PPUSH
66475: LD_VAR 0 4
66479: PUSH
66480: LD_INT 1
66482: ARRAY
66483: PPUSH
66484: LD_VAR 0 4
66488: PUSH
66489: LD_INT 2
66491: ARRAY
66492: PPUSH
66493: CALL_OW 297
66497: ST_TO_ADDR
// if tmpDist < dist then
66498: LD_VAR 0 6
66502: PUSH
66503: LD_VAR 0 5
66507: LESS
66508: IFFALSE 66530
// begin result := i ;
66510: LD_ADDR_VAR 0 3
66514: PUSH
66515: LD_VAR 0 4
66519: ST_TO_ADDR
// dist := tmpDist ;
66520: LD_ADDR_VAR 0 5
66524: PUSH
66525: LD_VAR 0 6
66529: ST_TO_ADDR
// end ; end ;
66530: GO 66462
66532: POP
66533: POP
// end ;
66534: LD_VAR 0 3
66538: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66539: LD_INT 0
66541: PPUSH
// uc_side := side ;
66542: LD_ADDR_OWVAR 20
66546: PUSH
66547: LD_VAR 0 1
66551: ST_TO_ADDR
// uc_nation := 3 ;
66552: LD_ADDR_OWVAR 21
66556: PUSH
66557: LD_INT 3
66559: ST_TO_ADDR
// vc_chassis := 25 ;
66560: LD_ADDR_OWVAR 37
66564: PUSH
66565: LD_INT 25
66567: ST_TO_ADDR
// vc_engine := engine_siberite ;
66568: LD_ADDR_OWVAR 39
66572: PUSH
66573: LD_INT 3
66575: ST_TO_ADDR
// vc_control := control_computer ;
66576: LD_ADDR_OWVAR 38
66580: PUSH
66581: LD_INT 3
66583: ST_TO_ADDR
// vc_weapon := 59 ;
66584: LD_ADDR_OWVAR 40
66588: PUSH
66589: LD_INT 59
66591: ST_TO_ADDR
// result := CreateVehicle ;
66592: LD_ADDR_VAR 0 5
66596: PUSH
66597: CALL_OW 45
66601: ST_TO_ADDR
// SetDir ( result , d ) ;
66602: LD_VAR 0 5
66606: PPUSH
66607: LD_VAR 0 4
66611: PPUSH
66612: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66616: LD_VAR 0 5
66620: PPUSH
66621: LD_VAR 0 2
66625: PPUSH
66626: LD_VAR 0 3
66630: PPUSH
66631: LD_INT 0
66633: PPUSH
66634: CALL_OW 48
// end ;
66638: LD_VAR 0 5
66642: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66643: LD_INT 0
66645: PPUSH
66646: PPUSH
66647: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66648: LD_ADDR_VAR 0 2
66652: PUSH
66653: LD_INT 0
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66671: LD_VAR 0 1
66675: NOT
66676: PUSH
66677: LD_VAR 0 1
66681: PPUSH
66682: CALL_OW 264
66686: PUSH
66687: LD_INT 12
66689: PUSH
66690: LD_INT 51
66692: PUSH
66693: LD_INT 32
66695: PUSH
66696: LD_INT 89
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: IN
66705: NOT
66706: OR
66707: IFFALSE 66711
// exit ;
66709: GO 66809
// for i := 1 to 3 do
66711: LD_ADDR_VAR 0 3
66715: PUSH
66716: DOUBLE
66717: LD_INT 1
66719: DEC
66720: ST_TO_ADDR
66721: LD_INT 3
66723: PUSH
66724: FOR_TO
66725: IFFALSE 66807
// begin tmp := GetCargo ( cargo , i ) ;
66727: LD_ADDR_VAR 0 4
66731: PUSH
66732: LD_VAR 0 1
66736: PPUSH
66737: LD_VAR 0 3
66741: PPUSH
66742: CALL_OW 289
66746: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66747: LD_ADDR_VAR 0 2
66751: PUSH
66752: LD_VAR 0 2
66756: PPUSH
66757: LD_VAR 0 3
66761: PPUSH
66762: LD_VAR 0 4
66766: PPUSH
66767: CALL_OW 1
66771: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66772: LD_ADDR_VAR 0 2
66776: PUSH
66777: LD_VAR 0 2
66781: PPUSH
66782: LD_INT 4
66784: PPUSH
66785: LD_VAR 0 2
66789: PUSH
66790: LD_INT 4
66792: ARRAY
66793: PUSH
66794: LD_VAR 0 4
66798: PLUS
66799: PPUSH
66800: CALL_OW 1
66804: ST_TO_ADDR
// end ;
66805: GO 66724
66807: POP
66808: POP
// end ;
66809: LD_VAR 0 2
66813: RET
// export function Length ( array ) ; begin
66814: LD_INT 0
66816: PPUSH
// result := array + 0 ;
66817: LD_ADDR_VAR 0 2
66821: PUSH
66822: LD_VAR 0 1
66826: PUSH
66827: LD_INT 0
66829: PLUS
66830: ST_TO_ADDR
// end ;
66831: LD_VAR 0 2
66835: RET
// export function PrepareArray ( array ) ; begin
66836: LD_INT 0
66838: PPUSH
// result := array diff 0 ;
66839: LD_ADDR_VAR 0 2
66843: PUSH
66844: LD_VAR 0 1
66848: PUSH
66849: LD_INT 0
66851: DIFF
66852: ST_TO_ADDR
// if not result [ 1 ] then
66853: LD_VAR 0 2
66857: PUSH
66858: LD_INT 1
66860: ARRAY
66861: NOT
66862: IFFALSE 66882
// result := Delete ( result , 1 ) ;
66864: LD_ADDR_VAR 0 2
66868: PUSH
66869: LD_VAR 0 2
66873: PPUSH
66874: LD_INT 1
66876: PPUSH
66877: CALL_OW 3
66881: ST_TO_ADDR
// end ;
66882: LD_VAR 0 2
66886: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66887: LD_INT 0
66889: PPUSH
66890: PPUSH
66891: PPUSH
66892: PPUSH
// sibRocketRange := 25 ;
66893: LD_ADDR_VAR 0 6
66897: PUSH
66898: LD_INT 25
66900: ST_TO_ADDR
// result := false ;
66901: LD_ADDR_VAR 0 4
66905: PUSH
66906: LD_INT 0
66908: ST_TO_ADDR
// for i := 0 to 5 do
66909: LD_ADDR_VAR 0 5
66913: PUSH
66914: DOUBLE
66915: LD_INT 0
66917: DEC
66918: ST_TO_ADDR
66919: LD_INT 5
66921: PUSH
66922: FOR_TO
66923: IFFALSE 66990
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66925: LD_VAR 0 1
66929: PPUSH
66930: LD_VAR 0 5
66934: PPUSH
66935: LD_VAR 0 6
66939: PPUSH
66940: CALL_OW 272
66944: PPUSH
66945: LD_VAR 0 2
66949: PPUSH
66950: LD_VAR 0 5
66954: PPUSH
66955: LD_VAR 0 6
66959: PPUSH
66960: CALL_OW 273
66964: PPUSH
66965: LD_VAR 0 3
66969: PPUSH
66970: CALL_OW 309
66974: IFFALSE 66988
// begin result := true ;
66976: LD_ADDR_VAR 0 4
66980: PUSH
66981: LD_INT 1
66983: ST_TO_ADDR
// exit ;
66984: POP
66985: POP
66986: GO 66992
// end ;
66988: GO 66922
66990: POP
66991: POP
// end ;
66992: LD_VAR 0 4
66996: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66997: LD_INT 0
66999: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67000: LD_VAR 0 1
67004: PPUSH
67005: LD_VAR 0 2
67009: PPUSH
67010: LD_INT 0
67012: PPUSH
67013: LD_INT 0
67015: PPUSH
67016: LD_INT 1
67018: PPUSH
67019: LD_INT 0
67021: PPUSH
67022: CALL_OW 587
// end ;
67026: LD_VAR 0 3
67030: RET
// export function CenterOnNow ( unit ) ; begin
67031: LD_INT 0
67033: PPUSH
// result := IsInUnit ( unit ) ;
67034: LD_ADDR_VAR 0 2
67038: PUSH
67039: LD_VAR 0 1
67043: PPUSH
67044: CALL_OW 310
67048: ST_TO_ADDR
// if not result then
67049: LD_VAR 0 2
67053: NOT
67054: IFFALSE 67066
// result := unit ;
67056: LD_ADDR_VAR 0 2
67060: PUSH
67061: LD_VAR 0 1
67065: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67066: LD_VAR 0 1
67070: PPUSH
67071: CALL_OW 87
// end ;
67075: LD_VAR 0 2
67079: RET
// export function ComMoveHex ( unit , hex ) ; begin
67080: LD_INT 0
67082: PPUSH
// if not hex then
67083: LD_VAR 0 2
67087: NOT
67088: IFFALSE 67092
// exit ;
67090: GO 67145
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67092: LD_VAR 0 2
67096: PUSH
67097: LD_INT 1
67099: ARRAY
67100: PPUSH
67101: LD_VAR 0 2
67105: PUSH
67106: LD_INT 2
67108: ARRAY
67109: PPUSH
67110: CALL_OW 428
67114: IFFALSE 67118
// exit ;
67116: GO 67145
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67118: LD_VAR 0 1
67122: PPUSH
67123: LD_VAR 0 2
67127: PUSH
67128: LD_INT 1
67130: ARRAY
67131: PPUSH
67132: LD_VAR 0 2
67136: PUSH
67137: LD_INT 2
67139: ARRAY
67140: PPUSH
67141: CALL_OW 111
// end ;
67145: LD_VAR 0 3
67149: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67150: LD_INT 0
67152: PPUSH
67153: PPUSH
67154: PPUSH
// if not unit or not enemy then
67155: LD_VAR 0 1
67159: NOT
67160: PUSH
67161: LD_VAR 0 2
67165: NOT
67166: OR
67167: IFFALSE 67171
// exit ;
67169: GO 67295
// x := GetX ( enemy ) ;
67171: LD_ADDR_VAR 0 4
67175: PUSH
67176: LD_VAR 0 2
67180: PPUSH
67181: CALL_OW 250
67185: ST_TO_ADDR
// y := GetY ( enemy ) ;
67186: LD_ADDR_VAR 0 5
67190: PUSH
67191: LD_VAR 0 2
67195: PPUSH
67196: CALL_OW 251
67200: ST_TO_ADDR
// if ValidHex ( x , y ) then
67201: LD_VAR 0 4
67205: PPUSH
67206: LD_VAR 0 5
67210: PPUSH
67211: CALL_OW 488
67215: IFFALSE 67295
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
67217: LD_VAR 0 2
67221: PPUSH
67222: CALL_OW 247
67226: PUSH
67227: LD_INT 3
67229: PUSH
67230: LD_INT 2
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: IN
67237: PUSH
67238: LD_VAR 0 1
67242: PPUSH
67243: CALL_OW 255
67247: PPUSH
67248: LD_VAR 0 2
67252: PPUSH
67253: CALL_OW 292
67257: AND
67258: IFFALSE 67276
// ComAttackUnit ( unit , enemy ) else
67260: LD_VAR 0 1
67264: PPUSH
67265: LD_VAR 0 2
67269: PPUSH
67270: CALL_OW 115
67274: GO 67295
// ComAgressiveMove ( unit , x , y ) ;
67276: LD_VAR 0 1
67280: PPUSH
67281: LD_VAR 0 4
67285: PPUSH
67286: LD_VAR 0 5
67290: PPUSH
67291: CALL_OW 114
// end ;
67295: LD_VAR 0 3
67299: RET
