// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2057 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3349 0 0
// Action ;
  90: CALL 4786 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 3792 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 3792 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 3792 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 3792 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 3792 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 3792 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 3792 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 3792 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 3792 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 3792 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 3792 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 3792 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 64553 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 23
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 30
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// if tmp then
1154: LD_VAR 0 4
1158: IFFALSE 1280
// begin x := GetX ( tmp [ 1 ] ) ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: LD_VAR 0 4
1169: PUSH
1170: LD_INT 1
1172: ARRAY
1173: PPUSH
1174: CALL_OW 250
1178: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 251
1197: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1198: LD_VAR 0 4
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: LD_STRING epsilon
1209: PPUSH
1210: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1214: LD_ADDR_VAR 0 7
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 274
1232: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1233: LD_VAR 0 7
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 3000
1243: PPUSH
1244: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1248: LD_VAR 0 7
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 500
1258: PPUSH
1259: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1263: LD_VAR 0 7
1267: PPUSH
1268: LD_INT 3
1270: PPUSH
1271: LD_INT 200
1273: PPUSH
1274: CALL_OW 277
// end else
1278: GO 1296
// begin x := 104 ;
1280: LD_ADDR_VAR 0 5
1284: PUSH
1285: LD_INT 104
1287: ST_TO_ADDR
// y := 32 ;
1288: LD_ADDR_VAR 0 6
1292: PUSH
1293: LD_INT 32
1295: ST_TO_ADDR
// end ; uc_side := 1 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1304: LD_ADDR_EXP 1
1308: PUSH
1309: LD_STRING JMM
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 3619 0 2
1319: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1320: LD_ADDR_EXP 3
1324: PUSH
1325: LD_STRING Lisa
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL 3619 0 2
1335: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1336: LD_ADDR_EXP 4
1340: PUSH
1341: LD_STRING Donaldson
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: CALL 3619 0 2
1351: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1352: LD_ADDR_EXP 5
1356: PUSH
1357: LD_STRING Bobby
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: CALL 3619 0 2
1367: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1368: LD_ADDR_EXP 6
1372: PUSH
1373: LD_STRING Cyrus
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 3619 0 2
1383: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1384: LD_ADDR_EXP 7
1388: PUSH
1389: LD_STRING Denis
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL 3619 0 2
1399: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1400: LD_ADDR_EXP 8
1404: PUSH
1405: LD_STRING Brown
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 3619 0 2
1415: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1416: LD_ADDR_EXP 9
1420: PUSH
1421: LD_STRING Gladstone
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 3619 0 2
1431: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING Houten
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 3619 0 2
1447: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1448: LD_ADDR_EXP 11
1452: PUSH
1453: LD_STRING Cornell
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 3619 0 2
1463: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1464: LD_ADDR_EXP 12
1468: PUSH
1469: LD_STRING Gary
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: CALL 3619 0 2
1479: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1480: LD_ADDR_EXP 13
1484: PUSH
1485: LD_STRING Frank
1487: PPUSH
1488: LD_INT 1
1490: PPUSH
1491: CALL 3619 0 2
1495: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1496: LD_ADDR_EXP 14
1500: PUSH
1501: LD_STRING Kikuchi
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: CALL 3619 0 2
1511: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_STRING Stevens
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL 3619 0 2
1527: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1528: LD_ADDR_EXP 2
1532: PUSH
1533: LD_STRING Powell
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL 3619 0 2
1543: ST_TO_ADDR
// PlaceUnitXYR ( JMM , x , y , 4 , false ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_VAR 0 5
1553: PPUSH
1554: LD_VAR 0 6
1558: PPUSH
1559: LD_INT 4
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL_OW 50
// PlaceUnitXYR ( Stevens , x , y , 4 , false ) ;
1569: LD_EXP 15
1573: PPUSH
1574: LD_VAR 0 5
1578: PPUSH
1579: LD_VAR 0 6
1583: PPUSH
1584: LD_INT 4
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 50
// PlaceUnitXYR ( Lisa , x , y , 35 , false ) ;
1594: LD_EXP 3
1598: PPUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: LD_VAR 0 6
1608: PPUSH
1609: LD_INT 35
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL_OW 50
// PlaceUnitXYR ( Donaldson , x , y , 35 , false ) ;
1619: LD_EXP 4
1623: PPUSH
1624: LD_VAR 0 5
1628: PPUSH
1629: LD_VAR 0 6
1633: PPUSH
1634: LD_INT 35
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 50
// PlaceUnitXYR ( Bobby , x , y , 35 , false ) ;
1644: LD_EXP 5
1648: PPUSH
1649: LD_VAR 0 5
1653: PPUSH
1654: LD_VAR 0 6
1658: PPUSH
1659: LD_INT 35
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 50
// PlaceUnitXYR ( Cyrus , x , y , 35 , false ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_VAR 0 5
1678: PPUSH
1679: LD_VAR 0 6
1683: PPUSH
1684: LD_INT 35
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL_OW 50
// PlaceUnitXYR ( Denis , x , y , 35 , false ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: LD_VAR 0 6
1708: PPUSH
1709: LD_INT 35
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL_OW 50
// PlaceUnitXYR ( Brown , x , y , 35 , false ) ;
1719: LD_EXP 8
1723: PPUSH
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 35
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL_OW 50
// PlaceUnitXYR ( Gladstone , x , y , 35 , false ) ;
1744: LD_EXP 9
1748: PPUSH
1749: LD_VAR 0 5
1753: PPUSH
1754: LD_VAR 0 6
1758: PPUSH
1759: LD_INT 35
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL_OW 50
// PlaceUnitXYR ( Houten , x , y , 35 , false ) ;
1769: LD_EXP 10
1773: PPUSH
1774: LD_VAR 0 5
1778: PPUSH
1779: LD_VAR 0 6
1783: PPUSH
1784: LD_INT 35
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 50
// PlaceUnitXYR ( Cornel , x , y , 35 , false ) ;
1794: LD_EXP 11
1798: PPUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 6
1808: PPUSH
1809: LD_INT 35
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL_OW 50
// PlaceUnitXYR ( Gary , x , y , 35 , false ) ;
1819: LD_EXP 12
1823: PPUSH
1824: LD_VAR 0 5
1828: PPUSH
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_INT 35
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL_OW 50
// PlaceUnitXYR ( Frank , x , y , 35 , false ) ;
1844: LD_EXP 13
1848: PPUSH
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 6
1858: PPUSH
1859: LD_INT 35
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , x , y , 35 , false ) ;
1869: LD_EXP 14
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_INT 35
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 50
// SetClass ( JMM , 1 ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1906: LD_ADDR_EXP 16
1910: PUSH
1911: LD_STRING 12_other_survivors
1913: PPUSH
1914: CALL_OW 31
1918: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1919: LD_ADDR_EXP 17
1923: PUSH
1924: LD_STRING 12_others
1926: PPUSH
1927: CALL_OW 31
1931: ST_TO_ADDR
// for i in others11 do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_EXP 17
1941: PUSH
1942: FOR_IN
1943: IFFALSE 1990
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 4
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: CALL_OW 250
1963: PPUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 251
1977: PPUSH
1978: LD_INT 15
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 50
1988: GO 1942
1990: POP
1991: POP
// for i in others12 do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_EXP 16
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2050
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PPUSH
2019: CALL_OW 250
2023: PPUSH
2024: LD_VAR 0 4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PPUSH
2033: CALL_OW 251
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 50
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
2064: PPUSH
2065: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2066: LD_INT 113
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2079: LD_INT 104
2081: PPUSH
2082: LD_INT 24
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2092: LD_INT 43
2094: PPUSH
2095: LD_INT 79
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2105: LD_INT 43
2107: PPUSH
2108: LD_INT 68
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2118: LD_INT 99
2120: PPUSH
2121: LD_INT 114
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2131: LD_INT 103
2133: PPUSH
2134: LD_INT 114
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2144: LD_INT 152
2146: PPUSH
2147: LD_INT 85
2149: PPUSH
2150: LD_INT 1
2152: PPUSH
2153: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2157: LD_INT 156
2159: PPUSH
2160: LD_INT 92
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: LD_STRING 10_EpsilonBase
2177: PPUSH
2178: EMPTY
2179: PPUSH
2180: CALL_OW 30
2184: ST_TO_ADDR
// if not blist then
2185: LD_VAR 0 2
2189: NOT
2190: IFFALSE 2194
// exit ;
2192: GO 3344
// for i in blist do
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_IN
2205: IFFALSE 2247
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: EQUAL
2232: OR
2233: IFFALSE 2245
// begin baseCorrect := 1 ;
2235: LD_ADDR_VAR 0 6
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// break ;
2243: GO 2247
// end ;
2245: GO 2204
2247: POP
2248: POP
// if baseCorrect = 0 then
2249: LD_VAR 0 6
2253: PUSH
2254: LD_INT 0
2256: EQUAL
2257: IFFALSE 2964
// begin uc_side := 1 ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_nation := 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level := 10 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 10
2282: ST_TO_ADDR
// bc_type := b_warehouse ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2291: LD_INT 99
2293: PPUSH
2294: LD_INT 24
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 47
// bc_type := b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2312: LD_ADDR_VAR 0 7
2316: PUSH
2317: LD_INT 124
2319: PPUSH
2320: LD_INT 42
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 5
2341: PUSH
2342: LD_INT 6
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 3
2355: PPUSH
2356: CALL_OW 12
2360: ARRAY
2361: PPUSH
2362: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2366: LD_ADDR_VAR 0 7
2370: PUSH
2371: LD_INT 111
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 47
2384: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2385: LD_VAR 0 7
2389: PPUSH
2390: LD_INT 4
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2420: LD_ADDR_VAR 0 7
2424: PUSH
2425: LD_INT 113
2427: PPUSH
2428: LD_INT 21
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 47
2438: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 4
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: PPUSH
2470: CALL_OW 431
// bc_type := 33 ;
2474: LD_ADDR_OWVAR 42
2478: PUSH
2479: LD_INT 33
2481: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2482: LD_ADDR_VAR 0 7
2486: PUSH
2487: LD_INT 95
2489: PPUSH
2490: LD_INT 41
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 47
2500: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2501: LD_VAR 0 7
2505: PPUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 6
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: CALL_OW 12
2530: ARRAY
2531: PPUSH
2532: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2536: LD_ADDR_VAR 0 7
2540: PUSH
2541: LD_INT 97
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 47
2554: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2555: LD_VAR 0 7
2559: PPUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 6
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2590: LD_ADDR_VAR 0 7
2594: PUSH
2595: LD_INT 86
2597: PPUSH
2598: LD_INT 19
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 47
2608: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2609: LD_VAR 0 7
2613: PPUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: PPUSH
2640: CALL_OW 431
// bc_type := 30 ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 30
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2652: LD_INT 104
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL_OW 47
// bc_type := 29 ;
2665: LD_ADDR_OWVAR 42
2669: PUSH
2670: LD_INT 29
2672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2673: LD_INT 113
2675: PPUSH
2676: LD_INT 50
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL_OW 47
// bc_type := 27 ;
2686: LD_ADDR_OWVAR 42
2690: PUSH
2691: LD_INT 27
2693: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2694: LD_INT 98
2696: PPUSH
2697: LD_INT 26
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2707: LD_INT 95
2709: PPUSH
2710: LD_INT 23
2712: PPUSH
2713: LD_INT 3
2715: PPUSH
2716: CALL_OW 47
// bc_type := 28 ;
2720: LD_ADDR_OWVAR 42
2724: PUSH
2725: LD_INT 28
2727: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2728: LD_INT 107
2730: PPUSH
2731: LD_INT 32
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 47
// bc_type := 3 ;
2741: LD_ADDR_OWVAR 42
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2749: LD_INT 106
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: LD_INT 0
2757: PPUSH
2758: CALL_OW 47
// bc_type := 16 ;
2762: LD_ADDR_OWVAR 42
2766: PUSH
2767: LD_INT 16
2769: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2770: LD_INT 109
2772: PPUSH
2773: LD_INT 45
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 47
// bc_type := 17 ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2791: LD_INT 106
2793: PPUSH
2794: LD_INT 46
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 47
// bc_type := 19 ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 19
2811: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2812: LD_INT 103
2814: PPUSH
2815: LD_INT 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 47
// bc_type := 21 ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 21
2832: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2833: LD_INT 110
2835: PPUSH
2836: LD_INT 42
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 47
// bc_type := 5 ;
2846: LD_ADDR_OWVAR 42
2850: PUSH
2851: LD_INT 5
2853: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2854: LD_INT 114
2856: PPUSH
2857: LD_INT 55
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 47
// bc_type := 36 ;
2867: LD_ADDR_OWVAR 42
2871: PUSH
2872: LD_INT 36
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2875: LD_INT 96
2877: PPUSH
2878: LD_INT 28
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 47
// bc_type := b_lab_full ;
2888: LD_ADDR_OWVAR 42
2892: PUSH
2893: LD_INT 8
2895: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2896: LD_ADDR_OWVAR 44
2900: PUSH
2901: LD_INT 15
2903: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2904: LD_ADDR_OWVAR 45
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2912: LD_INT 116
2914: PPUSH
2915: LD_INT 38
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 10
2940: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 12
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2949: LD_INT 112
2951: PPUSH
2952: LD_INT 29
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// end else
2962: GO 3165
// begin uc_side := 1 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// for i in blist do
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: LD_VAR 0 2
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3163
// begin uc_nation := i [ 6 ] ;
2985: LD_ADDR_OWVAR 21
2989: PUSH
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 6
2997: ARRAY
2998: ST_TO_ADDR
// bc_type := i [ 1 ] ;
2999: LD_ADDR_OWVAR 42
3003: PUSH
3004: LD_VAR 0 3
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3013: LD_ADDR_OWVAR 43
3017: PUSH
3018: LD_VAR 0 3
3022: PUSH
3023: LD_INT 5
3025: ARRAY
3026: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3027: LD_VAR 0 3
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PUSH
3036: LD_INT 7
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: IFFALSE 3076
// begin bc_kind1 := i [ 7 ] ;
3048: LD_ADDR_OWVAR 44
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 7
3060: ARRAY
3061: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3062: LD_ADDR_OWVAR 45
3066: PUSH
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 8
3074: ARRAY
3075: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_VAR 0 3
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 3
3094: PUSH
3095: LD_INT 3
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 3
3103: PUSH
3104: LD_INT 4
3106: ARRAY
3107: PPUSH
3108: CALL_OW 47
3112: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3113: LD_VAR 0 4
3117: PPUSH
3118: CALL_OW 266
3122: PUSH
3123: LD_INT 32
3125: EQUAL
3126: PUSH
3127: LD_VAR 0 4
3131: PPUSH
3132: CALL_OW 266
3136: PUSH
3137: LD_INT 33
3139: EQUAL
3140: OR
3141: IFFALSE 3161
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3143: LD_VAR 0 4
3147: PPUSH
3148: LD_VAR 0 3
3152: PUSH
3153: LD_INT 7
3155: ARRAY
3156: PPUSH
3157: CALL_OW 431
// end ;
3161: GO 2982
3163: POP
3164: POP
// end ; uc_side := 1 ;
3165: LD_ADDR_OWVAR 20
3169: PUSH
3170: LD_INT 1
3172: ST_TO_ADDR
// uc_nation := 1 ;
3173: LD_ADDR_OWVAR 21
3177: PUSH
3178: LD_INT 1
3180: ST_TO_ADDR
// for i := 1 to 8 do
3181: LD_ADDR_VAR 0 3
3185: PUSH
3186: DOUBLE
3187: LD_INT 1
3189: DEC
3190: ST_TO_ADDR
3191: LD_INT 8
3193: PUSH
3194: FOR_TO
3195: IFFALSE 3342
// begin vc_chassis := [ us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3197: LD_ADDR_OWVAR 37
3201: PUSH
3202: LD_INT 5
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 4
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 1
3218: PPUSH
3219: LD_INT 3
3221: PPUSH
3222: CALL_OW 12
3226: ARRAY
3227: ST_TO_ADDR
// vc_engine := engine_siberite ;
3228: LD_ADDR_OWVAR 39
3232: PUSH
3233: LD_INT 3
3235: ST_TO_ADDR
// vc_control := control_manual ;
3236: LD_ADDR_OWVAR 38
3240: PUSH
3241: LD_INT 1
3243: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_double_gun , us_laser ] [ i mod 6 + 1 ] ;
3244: LD_ADDR_OWVAR 40
3248: PUSH
3249: LD_INT 7
3251: PUSH
3252: LD_INT 9
3254: PUSH
3255: LD_INT 12
3257: PUSH
3258: LD_INT 13
3260: PUSH
3261: LD_INT 5
3263: PUSH
3264: LD_INT 9
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_VAR 0 3
3279: PUSH
3280: LD_INT 6
3282: MOD
3283: PUSH
3284: LD_INT 1
3286: PLUS
3287: ARRAY
3288: ST_TO_ADDR
// un := CreateVehicle ;
3289: LD_ADDR_VAR 0 5
3293: PUSH
3294: CALL_OW 45
3298: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3299: LD_VAR 0 5
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: LD_INT 5
3309: PPUSH
3310: CALL_OW 12
3314: PPUSH
3315: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3319: LD_VAR 0 5
3323: PPUSH
3324: LD_INT 78
3326: PPUSH
3327: LD_INT 31
3329: PPUSH
3330: LD_INT 8
3332: PPUSH
3333: LD_INT 0
3335: PPUSH
3336: CALL_OW 50
// end ;
3340: GO 3194
3342: POP
3343: POP
// end ;
3344: LD_VAR 0 1
3348: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3349: LD_INT 0
3351: PPUSH
3352: PPUSH
3353: PPUSH
3354: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3355: LD_INT 22
3357: PUSH
3358: LD_INT 1
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: LD_INT 21
3367: PUSH
3368: LD_INT 1
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PPUSH
3379: CALL_OW 69
3383: PUSH
3384: LD_INT 6
3386: LESS
3387: IFFALSE 3614
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3389: LD_ADDR_VAR 0 4
3393: PUSH
3394: LD_INT 22
3396: PUSH
3397: LD_INT 1
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 2
3406: PUSH
3407: LD_INT 30
3409: PUSH
3410: LD_INT 0
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_INT 30
3419: PUSH
3420: LD_INT 1
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: ST_TO_ADDR
// uc_side := 1 ;
3441: LD_ADDR_OWVAR 20
3445: PUSH
3446: LD_INT 1
3448: ST_TO_ADDR
// uc_nation := 1 ;
3449: LD_ADDR_OWVAR 21
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// for i := 1 to 6 do
3457: LD_ADDR_VAR 0 2
3461: PUSH
3462: DOUBLE
3463: LD_INT 1
3465: DEC
3466: ST_TO_ADDR
3467: LD_INT 6
3469: PUSH
3470: FOR_TO
3471: IFFALSE 3612
// begin hc_gallery :=  ;
3473: LD_ADDR_OWVAR 33
3477: PUSH
3478: LD_STRING 
3480: ST_TO_ADDR
// hc_name :=  ;
3481: LD_ADDR_OWVAR 26
3485: PUSH
3486: LD_STRING 
3488: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3489: LD_INT 0
3491: PPUSH
3492: LD_INT 1
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: LD_INT 3
3500: PUSH
3501: LD_INT 4
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: CALL_OW 12
3520: ARRAY
3521: PPUSH
3522: LD_INT 5
3524: PPUSH
3525: LD_INT 8
3527: PPUSH
3528: CALL_OW 12
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3547: LD_ADDR_EXP 18
3551: PUSH
3552: LD_EXP 18
3556: PPUSH
3557: LD_VAR 0 3
3561: PPUSH
3562: CALL 61009 0 2
3566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3567: LD_VAR 0 3
3571: PPUSH
3572: LD_VAR 0 4
3576: PUSH
3577: LD_INT 1
3579: ARRAY
3580: PPUSH
3581: CALL_OW 250
3585: PPUSH
3586: LD_VAR 0 4
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: CALL_OW 251
3599: PPUSH
3600: LD_INT 15
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL_OW 50
// end ;
3610: GO 3470
3612: POP
3613: POP
// end ; end ; end_of_file
3614: LD_VAR 0 1
3618: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3619: LD_INT 0
3621: PPUSH
3622: PPUSH
// if existMode then
3623: LD_VAR 0 2
3627: IFFALSE 3762
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3629: LD_EXP 21
3633: PUSH
3634: LD_VAR 0 1
3638: STR
3639: PPUSH
3640: CALL_OW 28
3644: IFFALSE 3669
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3646: LD_ADDR_VAR 0 4
3650: PUSH
3651: LD_EXP 21
3655: PUSH
3656: LD_VAR 0 1
3660: STR
3661: PPUSH
3662: CALL_OW 34
3666: ST_TO_ADDR
3667: GO 3760
// begin if TestCharacters ( 11_ & ident ) then
3669: LD_STRING 11_
3671: PUSH
3672: LD_VAR 0 1
3676: STR
3677: PPUSH
3678: CALL_OW 28
3682: IFFALSE 3705
// unit := CreateCharacter ( 11_ & ident ) else
3684: LD_ADDR_VAR 0 4
3688: PUSH
3689: LD_STRING 11_
3691: PUSH
3692: LD_VAR 0 1
3696: STR
3697: PPUSH
3698: CALL_OW 34
3702: ST_TO_ADDR
3703: GO 3760
// if TestCharacters ( 10c_ & ident ) then
3705: LD_STRING 10c_
3707: PUSH
3708: LD_VAR 0 1
3712: STR
3713: PPUSH
3714: CALL_OW 28
3718: IFFALSE 3741
// unit := CreateCharacter ( 10c_ & ident ) else
3720: LD_ADDR_VAR 0 4
3724: PUSH
3725: LD_STRING 10c_
3727: PUSH
3728: LD_VAR 0 1
3732: STR
3733: PPUSH
3734: CALL_OW 34
3738: ST_TO_ADDR
3739: GO 3760
// unit := CreateCharacter ( 10_ & ident ) ;
3741: LD_ADDR_VAR 0 4
3745: PUSH
3746: LD_STRING 10_
3748: PUSH
3749: LD_VAR 0 1
3753: STR
3754: PPUSH
3755: CALL_OW 34
3759: ST_TO_ADDR
// end ; end else
3760: GO 3777
// unit := NewCharacter ( ident ) ;
3762: LD_ADDR_VAR 0 4
3766: PUSH
3767: LD_VAR 0 1
3771: PPUSH
3772: CALL_OW 25
3776: ST_TO_ADDR
// result := unit ;
3777: LD_ADDR_VAR 0 3
3781: PUSH
3782: LD_VAR 0 4
3786: ST_TO_ADDR
// end ;
3787: LD_VAR 0 3
3791: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
3792: LD_INT 0
3794: PPUSH
// if unit in selectedTab then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_VAR 0 3
3804: IN
3805: IFFALSE 3827
// SaveCharacters ( unit , 13c_ & unitString ) else
3807: LD_VAR 0 1
3811: PPUSH
3812: LD_STRING 13c_
3814: PUSH
3815: LD_VAR 0 2
3819: STR
3820: PPUSH
3821: CALL_OW 38
3825: GO 3845
// SaveCharacters ( unit , 13s_ & unitString ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: LD_STRING 13s_
3834: PUSH
3835: LD_VAR 0 2
3839: STR
3840: PPUSH
3841: CALL_OW 38
// end ;
3845: LD_VAR 0 4
3849: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
3850: LD_INT 0
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// selected := [ ] ;
3856: LD_ADDR_EXP 22
3860: PUSH
3861: EMPTY
3862: ST_TO_ADDR
// othersSelect := [ ] ;
3863: LD_ADDR_EXP 23
3867: PUSH
3868: EMPTY
3869: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3870: LD_ADDR_VAR 0 3
3874: PUSH
3875: LD_EXP 3
3879: PUSH
3880: LD_EXP 4
3884: PUSH
3885: LD_EXP 5
3889: PUSH
3890: LD_EXP 6
3894: PUSH
3895: LD_EXP 8
3899: PUSH
3900: LD_EXP 9
3904: PUSH
3905: LD_EXP 10
3909: PUSH
3910: LD_EXP 11
3914: PUSH
3915: LD_EXP 12
3919: PUSH
3920: LD_EXP 13
3924: PUSH
3925: LD_EXP 14
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: ST_TO_ADDR
// tmp := tmp ^ others11 ;
3943: LD_ADDR_VAR 0 3
3947: PUSH
3948: LD_VAR 0 3
3952: PUSH
3953: LD_EXP 17
3957: ADD
3958: ST_TO_ADDR
// tmp := tmp ^ others12 ;
3959: LD_ADDR_VAR 0 3
3963: PUSH
3964: LD_VAR 0 3
3968: PUSH
3969: LD_EXP 16
3973: ADD
3974: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
3975: LD_ADDR_VAR 0 3
3979: PUSH
3980: LD_VAR 0 3
3984: PUSH
3985: LD_EXP 18
3989: ADD
3990: ST_TO_ADDR
// for i in tmp do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: LD_VAR 0 3
4000: PUSH
4001: FOR_IN
4002: IFFALSE 4041
// if GetClass ( i ) = 8 then
4004: LD_VAR 0 2
4008: PPUSH
4009: CALL_OW 257
4013: PUSH
4014: LD_INT 8
4016: EQUAL
4017: IFFALSE 4039
// SetClass ( i , rand ( 1 , 4 ) ) ;
4019: LD_VAR 0 2
4023: PPUSH
4024: LD_INT 1
4026: PPUSH
4027: LD_INT 4
4029: PPUSH
4030: CALL_OW 12
4034: PPUSH
4035: CALL_OW 336
4039: GO 4001
4041: POP
4042: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4043: LD_ADDR_EXP 22
4047: PUSH
4048: LD_STRING 1
4050: PPUSH
4051: LD_INT 6
4053: PPUSH
4054: LD_INT 6
4056: PPUSH
4057: LD_INT -5
4059: PUSH
4060: LD_EXP 1
4064: PUSH
4065: LD_EXP 15
4069: PUSH
4070: LD_INT -2
4072: PUSH
4073: LD_INT -3
4075: PUSH
4076: LD_INT -5
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_VAR 0 3
4091: ADD
4092: PUSH
4093: LD_INT -6
4095: PUSH
4096: LD_INT -4
4098: PUSH
4099: LD_EXP 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: ADD
4109: PPUSH
4110: LD_INT 1
4112: PUSH
4113: LD_INT 0
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 2
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 0
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 4
4142: PUSH
4143: LD_INT 2
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 5
4152: PUSH
4153: LD_INT 0
4155: PUSH
4156: LD_INT 2
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: PPUSH
4171: CALL_OW 42
4175: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4176: LD_ADDR_EXP 23
4180: PUSH
4181: LD_EXP 22
4185: PUSH
4186: LD_EXP 3
4190: PUSH
4191: LD_EXP 4
4195: PUSH
4196: LD_EXP 5
4200: PUSH
4201: LD_EXP 6
4205: PUSH
4206: LD_EXP 7
4210: PUSH
4211: LD_EXP 8
4215: PUSH
4216: LD_EXP 9
4220: PUSH
4221: LD_EXP 10
4225: PUSH
4226: LD_EXP 11
4230: PUSH
4231: LD_EXP 12
4235: PUSH
4236: LD_EXP 13
4240: PUSH
4241: LD_EXP 14
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: DIFF
4260: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_VAR 0 3
4270: PUSH
4271: LD_EXP 22
4275: DIFF
4276: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4277: LD_ADDR_VAR 0 4
4281: PUSH
4282: LD_VAR 0 4
4286: PUSH
4287: LD_EXP 3
4291: PUSH
4292: LD_EXP 4
4296: PUSH
4297: LD_EXP 5
4301: PUSH
4302: LD_EXP 6
4306: PUSH
4307: LD_EXP 7
4311: PUSH
4312: LD_EXP 8
4316: PUSH
4317: LD_EXP 9
4321: PUSH
4322: LD_EXP 10
4326: PUSH
4327: LD_EXP 11
4331: PUSH
4332: LD_EXP 12
4336: PUSH
4337: LD_EXP 13
4341: PUSH
4342: LD_EXP 14
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: DIFF
4361: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4362: LD_VAR 0 4
4366: PPUSH
4367: LD_STRING 13s_others
4369: PPUSH
4370: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4374: LD_EXP 23
4378: PPUSH
4379: LD_STRING 13c_others
4381: PPUSH
4382: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4386: LD_EXP 1
4390: PPUSH
4391: LD_STRING 13c_JMM
4393: PPUSH
4394: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4398: LD_EXP 15
4402: PPUSH
4403: LD_STRING 13c_Stevens
4405: PPUSH
4406: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4410: LD_EXP 3
4414: PPUSH
4415: LD_STRING Lisa
4417: PPUSH
4418: LD_EXP 22
4422: PPUSH
4423: CALL 3792 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4427: LD_EXP 8
4431: PPUSH
4432: LD_STRING Brown
4434: PPUSH
4435: LD_EXP 22
4439: PPUSH
4440: CALL 3792 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4444: LD_EXP 4
4448: PPUSH
4449: LD_STRING Donaldson
4451: PPUSH
4452: LD_EXP 22
4456: PPUSH
4457: CALL 3792 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4461: LD_EXP 5
4465: PPUSH
4466: LD_STRING Bobby
4468: PPUSH
4469: LD_EXP 22
4473: PPUSH
4474: CALL 3792 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4478: LD_EXP 6
4482: PPUSH
4483: LD_STRING Cyrus
4485: PPUSH
4486: LD_EXP 22
4490: PPUSH
4491: CALL 3792 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4495: LD_EXP 7
4499: PPUSH
4500: LD_STRING Denis
4502: PPUSH
4503: LD_EXP 22
4507: PPUSH
4508: CALL 3792 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4512: LD_EXP 9
4516: PPUSH
4517: LD_STRING Gladstone
4519: PPUSH
4520: LD_EXP 22
4524: PPUSH
4525: CALL 3792 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4529: LD_EXP 10
4533: PPUSH
4534: LD_STRING Houten
4536: PPUSH
4537: LD_EXP 22
4541: PPUSH
4542: CALL 3792 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4546: LD_EXP 11
4550: PPUSH
4551: LD_STRING Cornel
4553: PPUSH
4554: LD_EXP 22
4558: PPUSH
4559: CALL 3792 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4563: LD_EXP 12
4567: PPUSH
4568: LD_STRING Gary
4570: PPUSH
4571: LD_EXP 22
4575: PPUSH
4576: CALL 3792 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
4580: LD_EXP 13
4584: PPUSH
4585: LD_STRING Frank
4587: PPUSH
4588: LD_EXP 22
4592: PPUSH
4593: CALL 3792 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
4597: LD_EXP 14
4601: PPUSH
4602: LD_STRING Kikuchi
4604: PPUSH
4605: LD_EXP 22
4609: PPUSH
4610: CALL 3792 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4614: LD_INT 22
4616: PUSH
4617: LD_INT 1
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: LD_INT 21
4626: PUSH
4627: LD_INT 1
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: PPUSH
4643: LD_INT 4
4645: PPUSH
4646: CALL_OW 235
// SetSide ( selected , 1 ) ;
4650: LD_EXP 22
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4662: LD_EXP 1
4666: PUSH
4667: LD_EXP 15
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PPUSH
4676: LD_INT 1
4678: PPUSH
4679: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , 4 ] ] ) do
4683: LD_ADDR_VAR 0 2
4687: PUSH
4688: LD_INT 21
4690: PUSH
4691: LD_INT 1
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 22
4700: PUSH
4701: LD_INT 4
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PPUSH
4712: CALL_OW 69
4716: PUSH
4717: FOR_IN
4718: IFFALSE 4731
// RemoveUnit ( i ) ;
4720: LD_VAR 0 2
4724: PPUSH
4725: CALL_OW 64
4729: GO 4717
4731: POP
4732: POP
// end ; end_of_file
4733: LD_VAR 0 1
4737: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4738: LD_VAR 0 1
4742: PPUSH
4743: CALL 19305 0 1
// if un = JMM then
4747: LD_VAR 0 1
4751: PUSH
4752: LD_EXP 1
4756: EQUAL
4757: IFFALSE 4766
// YouLost ( JMM ) ;
4759: LD_STRING JMM
4761: PPUSH
4762: CALL_OW 104
// end ;
4766: PPOPN 1
4768: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
4769: LD_VAR 0 1
4773: PPUSH
4774: LD_VAR 0 2
4778: PPUSH
4779: CALL 19427 0 2
// end ; end_of_file
4783: PPOPN 2
4785: END
// export function Action ; begin
4786: LD_INT 0
4788: PPUSH
// InGameOn ;
4789: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
4793: LD_EXP 1
4797: PPUSH
4798: CALL_OW 87
// wait ( 0 0$1 ) ;
4802: LD_INT 35
4804: PPUSH
4805: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
4809: LD_EXP 1
4813: PPUSH
4814: LD_STRING D1-JMM-1
4816: PPUSH
4817: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
4821: LD_EXP 2
4825: PPUSH
4826: LD_STRING D1-Pow-1
4828: PPUSH
4829: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
4833: LD_EXP 2
4837: PPUSH
4838: LD_STRING D1-Pow-1a
4840: PPUSH
4841: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
4845: LD_EXP 2
4849: PPUSH
4850: LD_STRING D1-Pow-1b
4852: PPUSH
4853: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
4857: LD_EXP 2
4861: PPUSH
4862: LD_STRING D1-Pow-1c
4864: PPUSH
4865: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4869: LD_EXP 1
4873: PPUSH
4874: LD_STRING D1-JMM-2
4876: PPUSH
4877: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4881: LD_EXP 2
4885: PPUSH
4886: LD_STRING D1-Pow-2
4888: PPUSH
4889: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
4893: LD_EXP 1
4897: PPUSH
4898: LD_STRING D1-JMM-3
4900: PPUSH
4901: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
4905: LD_EXP 2
4909: PPUSH
4910: LD_STRING D1-Pow-3
4912: PPUSH
4913: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
4917: LD_EXP 1
4921: PPUSH
4922: LD_STRING D1-JMM-4
4924: PPUSH
4925: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
4929: LD_EXP 2
4933: PPUSH
4934: LD_STRING D1-Pow-4
4936: PPUSH
4937: CALL_OW 94
// SelectAndSaveCharacters ;
4941: CALL 3850 0 0
// InGameOff ;
4945: CALL_OW 9
// Query ( Q1 ) ;
4949: LD_STRING Q1
4951: PPUSH
4952: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4956: LD_INT 2
4958: PPUSH
4959: LD_INT 1
4961: PPUSH
4962: CALL_OW 424
// end ; end_of_file
4966: LD_VAR 0 1
4970: RET
// every 0 0$1 do
4971: GO 4973
4973: DISABLE
// begin enable ;
4974: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4975: LD_STRING updateTimer(
4977: PUSH
4978: LD_OWVAR 1
4982: STR
4983: PUSH
4984: LD_STRING );
4986: STR
4987: PPUSH
4988: CALL_OW 559
// end ;
4992: END
// export function SOS_MapStart ( ) ; begin
4993: LD_INT 0
4995: PPUSH
// if streamModeActive then
4996: LD_EXP 24
5000: IFFALSE 5009
// DefineStreamItems ( true ) ;
5002: LD_INT 1
5004: PPUSH
5005: CALL 6659 0 1
// UpdateFactoryWaypoints ( ) ;
5009: CALL 20243 0 0
// end ;
5013: LD_VAR 0 1
5017: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5018: LD_INT 0
5020: PPUSH
// if p2 = 100 then
5021: LD_VAR 0 2
5025: PUSH
5026: LD_INT 100
5028: EQUAL
5029: IFFALSE 6032
// begin if not StreamModeActive then
5031: LD_EXP 24
5035: NOT
5036: IFFALSE 5046
// StreamModeActive := true ;
5038: LD_ADDR_EXP 24
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// if p3 = 0 then
5046: LD_VAR 0 3
5050: PUSH
5051: LD_INT 0
5053: EQUAL
5054: IFFALSE 5060
// InitStreamMode ;
5056: CALL 6195 0 0
// if p3 = 1 then
5060: LD_VAR 0 3
5064: PUSH
5065: LD_INT 1
5067: EQUAL
5068: IFFALSE 5078
// sRocket := true ;
5070: LD_ADDR_EXP 29
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// if p3 = 2 then
5078: LD_VAR 0 3
5082: PUSH
5083: LD_INT 2
5085: EQUAL
5086: IFFALSE 5096
// sSpeed := true ;
5088: LD_ADDR_EXP 28
5092: PUSH
5093: LD_INT 1
5095: ST_TO_ADDR
// if p3 = 3 then
5096: LD_VAR 0 3
5100: PUSH
5101: LD_INT 3
5103: EQUAL
5104: IFFALSE 5114
// sEngine := true ;
5106: LD_ADDR_EXP 30
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// if p3 = 4 then
5114: LD_VAR 0 3
5118: PUSH
5119: LD_INT 4
5121: EQUAL
5122: IFFALSE 5132
// sSpec := true ;
5124: LD_ADDR_EXP 27
5128: PUSH
5129: LD_INT 1
5131: ST_TO_ADDR
// if p3 = 5 then
5132: LD_VAR 0 3
5136: PUSH
5137: LD_INT 5
5139: EQUAL
5140: IFFALSE 5150
// sLevel := true ;
5142: LD_ADDR_EXP 31
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// if p3 = 6 then
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 6
5157: EQUAL
5158: IFFALSE 5168
// sArmoury := true ;
5160: LD_ADDR_EXP 32
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// if p3 = 7 then
5168: LD_VAR 0 3
5172: PUSH
5173: LD_INT 7
5175: EQUAL
5176: IFFALSE 5186
// sRadar := true ;
5178: LD_ADDR_EXP 33
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// if p3 = 8 then
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 8
5193: EQUAL
5194: IFFALSE 5204
// sBunker := true ;
5196: LD_ADDR_EXP 34
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// if p3 = 9 then
5204: LD_VAR 0 3
5208: PUSH
5209: LD_INT 9
5211: EQUAL
5212: IFFALSE 5222
// sHack := true ;
5214: LD_ADDR_EXP 35
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// if p3 = 10 then
5222: LD_VAR 0 3
5226: PUSH
5227: LD_INT 10
5229: EQUAL
5230: IFFALSE 5240
// sFire := true ;
5232: LD_ADDR_EXP 36
5236: PUSH
5237: LD_INT 1
5239: ST_TO_ADDR
// if p3 = 11 then
5240: LD_VAR 0 3
5244: PUSH
5245: LD_INT 11
5247: EQUAL
5248: IFFALSE 5258
// sRefresh := true ;
5250: LD_ADDR_EXP 37
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// if p3 = 12 then
5258: LD_VAR 0 3
5262: PUSH
5263: LD_INT 12
5265: EQUAL
5266: IFFALSE 5276
// sExp := true ;
5268: LD_ADDR_EXP 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// if p3 = 13 then
5276: LD_VAR 0 3
5280: PUSH
5281: LD_INT 13
5283: EQUAL
5284: IFFALSE 5294
// sDepot := true ;
5286: LD_ADDR_EXP 39
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// if p3 = 14 then
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 14
5301: EQUAL
5302: IFFALSE 5312
// sFlag := true ;
5304: LD_ADDR_EXP 40
5308: PUSH
5309: LD_INT 1
5311: ST_TO_ADDR
// if p3 = 15 then
5312: LD_VAR 0 3
5316: PUSH
5317: LD_INT 15
5319: EQUAL
5320: IFFALSE 5330
// sKamikadze := true ;
5322: LD_ADDR_EXP 48
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// if p3 = 16 then
5330: LD_VAR 0 3
5334: PUSH
5335: LD_INT 16
5337: EQUAL
5338: IFFALSE 5348
// sTroll := true ;
5340: LD_ADDR_EXP 49
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if p3 = 17 then
5348: LD_VAR 0 3
5352: PUSH
5353: LD_INT 17
5355: EQUAL
5356: IFFALSE 5366
// sSlow := true ;
5358: LD_ADDR_EXP 50
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// if p3 = 18 then
5366: LD_VAR 0 3
5370: PUSH
5371: LD_INT 18
5373: EQUAL
5374: IFFALSE 5384
// sLack := true ;
5376: LD_ADDR_EXP 51
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// if p3 = 19 then
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 19
5391: EQUAL
5392: IFFALSE 5402
// sTank := true ;
5394: LD_ADDR_EXP 53
5398: PUSH
5399: LD_INT 1
5401: ST_TO_ADDR
// if p3 = 20 then
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 20
5409: EQUAL
5410: IFFALSE 5420
// sRemote := true ;
5412: LD_ADDR_EXP 54
5416: PUSH
5417: LD_INT 1
5419: ST_TO_ADDR
// if p3 = 21 then
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 21
5427: EQUAL
5428: IFFALSE 5438
// sPowell := true ;
5430: LD_ADDR_EXP 55
5434: PUSH
5435: LD_INT 1
5437: ST_TO_ADDR
// if p3 = 22 then
5438: LD_VAR 0 3
5442: PUSH
5443: LD_INT 22
5445: EQUAL
5446: IFFALSE 5456
// sTeleport := true ;
5448: LD_ADDR_EXP 58
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// if p3 = 23 then
5456: LD_VAR 0 3
5460: PUSH
5461: LD_INT 23
5463: EQUAL
5464: IFFALSE 5474
// sOilTower := true ;
5466: LD_ADDR_EXP 60
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// if p3 = 24 then
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 24
5481: EQUAL
5482: IFFALSE 5492
// sShovel := true ;
5484: LD_ADDR_EXP 61
5488: PUSH
5489: LD_INT 1
5491: ST_TO_ADDR
// if p3 = 25 then
5492: LD_VAR 0 3
5496: PUSH
5497: LD_INT 25
5499: EQUAL
5500: IFFALSE 5510
// sSheik := true ;
5502: LD_ADDR_EXP 62
5506: PUSH
5507: LD_INT 1
5509: ST_TO_ADDR
// if p3 = 26 then
5510: LD_VAR 0 3
5514: PUSH
5515: LD_INT 26
5517: EQUAL
5518: IFFALSE 5528
// sEarthquake := true ;
5520: LD_ADDR_EXP 64
5524: PUSH
5525: LD_INT 1
5527: ST_TO_ADDR
// if p3 = 27 then
5528: LD_VAR 0 3
5532: PUSH
5533: LD_INT 27
5535: EQUAL
5536: IFFALSE 5546
// sAI := true ;
5538: LD_ADDR_EXP 65
5542: PUSH
5543: LD_INT 1
5545: ST_TO_ADDR
// if p3 = 28 then
5546: LD_VAR 0 3
5550: PUSH
5551: LD_INT 28
5553: EQUAL
5554: IFFALSE 5564
// sCargo := true ;
5556: LD_ADDR_EXP 68
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// if p3 = 29 then
5564: LD_VAR 0 3
5568: PUSH
5569: LD_INT 29
5571: EQUAL
5572: IFFALSE 5582
// sDLaser := true ;
5574: LD_ADDR_EXP 69
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// if p3 = 30 then
5582: LD_VAR 0 3
5586: PUSH
5587: LD_INT 30
5589: EQUAL
5590: IFFALSE 5600
// sExchange := true ;
5592: LD_ADDR_EXP 70
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if p3 = 31 then
5600: LD_VAR 0 3
5604: PUSH
5605: LD_INT 31
5607: EQUAL
5608: IFFALSE 5618
// sFac := true ;
5610: LD_ADDR_EXP 71
5614: PUSH
5615: LD_INT 1
5617: ST_TO_ADDR
// if p3 = 32 then
5618: LD_VAR 0 3
5622: PUSH
5623: LD_INT 32
5625: EQUAL
5626: IFFALSE 5636
// sPower := true ;
5628: LD_ADDR_EXP 72
5632: PUSH
5633: LD_INT 1
5635: ST_TO_ADDR
// if p3 = 33 then
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 33
5643: EQUAL
5644: IFFALSE 5654
// sRandom := true ;
5646: LD_ADDR_EXP 73
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// if p3 = 34 then
5654: LD_VAR 0 3
5658: PUSH
5659: LD_INT 34
5661: EQUAL
5662: IFFALSE 5672
// sShield := true ;
5664: LD_ADDR_EXP 74
5668: PUSH
5669: LD_INT 1
5671: ST_TO_ADDR
// if p3 = 35 then
5672: LD_VAR 0 3
5676: PUSH
5677: LD_INT 35
5679: EQUAL
5680: IFFALSE 5690
// sTime := true ;
5682: LD_ADDR_EXP 75
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// if p3 = 36 then
5690: LD_VAR 0 3
5694: PUSH
5695: LD_INT 36
5697: EQUAL
5698: IFFALSE 5708
// sTools := true ;
5700: LD_ADDR_EXP 76
5704: PUSH
5705: LD_INT 1
5707: ST_TO_ADDR
// if p3 = 101 then
5708: LD_VAR 0 3
5712: PUSH
5713: LD_INT 101
5715: EQUAL
5716: IFFALSE 5726
// sSold := true ;
5718: LD_ADDR_EXP 41
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// if p3 = 102 then
5726: LD_VAR 0 3
5730: PUSH
5731: LD_INT 102
5733: EQUAL
5734: IFFALSE 5744
// sDiff := true ;
5736: LD_ADDR_EXP 42
5740: PUSH
5741: LD_INT 1
5743: ST_TO_ADDR
// if p3 = 103 then
5744: LD_VAR 0 3
5748: PUSH
5749: LD_INT 103
5751: EQUAL
5752: IFFALSE 5762
// sFog := true ;
5754: LD_ADDR_EXP 45
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// if p3 = 104 then
5762: LD_VAR 0 3
5766: PUSH
5767: LD_INT 104
5769: EQUAL
5770: IFFALSE 5780
// sReset := true ;
5772: LD_ADDR_EXP 46
5776: PUSH
5777: LD_INT 1
5779: ST_TO_ADDR
// if p3 = 105 then
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 105
5787: EQUAL
5788: IFFALSE 5798
// sSun := true ;
5790: LD_ADDR_EXP 47
5794: PUSH
5795: LD_INT 1
5797: ST_TO_ADDR
// if p3 = 106 then
5798: LD_VAR 0 3
5802: PUSH
5803: LD_INT 106
5805: EQUAL
5806: IFFALSE 5816
// sTiger := true ;
5808: LD_ADDR_EXP 43
5812: PUSH
5813: LD_INT 1
5815: ST_TO_ADDR
// if p3 = 107 then
5816: LD_VAR 0 3
5820: PUSH
5821: LD_INT 107
5823: EQUAL
5824: IFFALSE 5834
// sBomb := true ;
5826: LD_ADDR_EXP 44
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// if p3 = 108 then
5834: LD_VAR 0 3
5838: PUSH
5839: LD_INT 108
5841: EQUAL
5842: IFFALSE 5852
// sWound := true ;
5844: LD_ADDR_EXP 52
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// if p3 = 109 then
5852: LD_VAR 0 3
5856: PUSH
5857: LD_INT 109
5859: EQUAL
5860: IFFALSE 5870
// sBetray := true ;
5862: LD_ADDR_EXP 56
5866: PUSH
5867: LD_INT 1
5869: ST_TO_ADDR
// if p3 = 110 then
5870: LD_VAR 0 3
5874: PUSH
5875: LD_INT 110
5877: EQUAL
5878: IFFALSE 5888
// sContamin := true ;
5880: LD_ADDR_EXP 57
5884: PUSH
5885: LD_INT 1
5887: ST_TO_ADDR
// if p3 = 111 then
5888: LD_VAR 0 3
5892: PUSH
5893: LD_INT 111
5895: EQUAL
5896: IFFALSE 5906
// sOil := true ;
5898: LD_ADDR_EXP 59
5902: PUSH
5903: LD_INT 1
5905: ST_TO_ADDR
// if p3 = 112 then
5906: LD_VAR 0 3
5910: PUSH
5911: LD_INT 112
5913: EQUAL
5914: IFFALSE 5924
// sStu := true ;
5916: LD_ADDR_EXP 63
5920: PUSH
5921: LD_INT 1
5923: ST_TO_ADDR
// if p3 = 113 then
5924: LD_VAR 0 3
5928: PUSH
5929: LD_INT 113
5931: EQUAL
5932: IFFALSE 5942
// sBazooka := true ;
5934: LD_ADDR_EXP 66
5938: PUSH
5939: LD_INT 1
5941: ST_TO_ADDR
// if p3 = 114 then
5942: LD_VAR 0 3
5946: PUSH
5947: LD_INT 114
5949: EQUAL
5950: IFFALSE 5960
// sMortar := true ;
5952: LD_ADDR_EXP 67
5956: PUSH
5957: LD_INT 1
5959: ST_TO_ADDR
// if p3 = 115 then
5960: LD_VAR 0 3
5964: PUSH
5965: LD_INT 115
5967: EQUAL
5968: IFFALSE 5978
// sRanger := true ;
5970: LD_ADDR_EXP 77
5974: PUSH
5975: LD_INT 1
5977: ST_TO_ADDR
// if p3 = 116 then
5978: LD_VAR 0 3
5982: PUSH
5983: LD_INT 116
5985: EQUAL
5986: IFFALSE 5996
// sComputer := true ;
5988: LD_ADDR_EXP 78
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// if p3 = 117 then
5996: LD_VAR 0 3
6000: PUSH
6001: LD_INT 117
6003: EQUAL
6004: IFFALSE 6014
// s30 := true ;
6006: LD_ADDR_EXP 79
6010: PUSH
6011: LD_INT 1
6013: ST_TO_ADDR
// if p3 = 118 then
6014: LD_VAR 0 3
6018: PUSH
6019: LD_INT 118
6021: EQUAL
6022: IFFALSE 6032
// s60 := true ;
6024: LD_ADDR_EXP 80
6028: PUSH
6029: LD_INT 1
6031: ST_TO_ADDR
// end ; if p2 = 101 then
6032: LD_VAR 0 2
6036: PUSH
6037: LD_INT 101
6039: EQUAL
6040: IFFALSE 6168
// begin case p3 of 1 :
6042: LD_VAR 0 3
6046: PUSH
6047: LD_INT 1
6049: DOUBLE
6050: EQUAL
6051: IFTRUE 6055
6053: GO 6062
6055: POP
// hHackUnlimitedResources ; 2 :
6056: CALL 18266 0 0
6060: GO 6168
6062: LD_INT 2
6064: DOUBLE
6065: EQUAL
6066: IFTRUE 6070
6068: GO 6077
6070: POP
// hHackSetLevel10 ; 3 :
6071: CALL 18399 0 0
6075: GO 6168
6077: LD_INT 3
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6092
6085: POP
// hHackSetLevel10YourUnits ; 4 :
6086: CALL 18484 0 0
6090: GO 6168
6092: LD_INT 4
6094: DOUBLE
6095: EQUAL
6096: IFTRUE 6100
6098: GO 6107
6100: POP
// hHackInvincible ; 5 :
6101: CALL 18932 0 0
6105: GO 6168
6107: LD_INT 5
6109: DOUBLE
6110: EQUAL
6111: IFTRUE 6115
6113: GO 6122
6115: POP
// hHackInvisible ; 6 :
6116: CALL 19043 0 0
6120: GO 6168
6122: LD_INT 6
6124: DOUBLE
6125: EQUAL
6126: IFTRUE 6130
6128: GO 6137
6130: POP
// hHackChangeYourSide ; 7 :
6131: CALL 19100 0 0
6135: GO 6168
6137: LD_INT 7
6139: DOUBLE
6140: EQUAL
6141: IFTRUE 6145
6143: GO 6152
6145: POP
// hHackChangeUnitSide ; 8 :
6146: CALL 19142 0 0
6150: GO 6168
6152: LD_INT 8
6154: DOUBLE
6155: EQUAL
6156: IFTRUE 6160
6158: GO 6167
6160: POP
// hHackFog ; end ;
6161: CALL 19243 0 0
6165: GO 6168
6167: POP
// end ; end ;
6168: LD_VAR 0 7
6172: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6173: GO 6175
6175: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6176: LD_STRING initStreamRollete();
6178: PPUSH
6179: CALL_OW 559
// InitStreamMode ;
6183: CALL 6195 0 0
// DefineStreamItems ( false ) ;
6187: LD_INT 0
6189: PPUSH
6190: CALL 6659 0 1
// end ;
6194: END
// function InitStreamMode ; begin
6195: LD_INT 0
6197: PPUSH
// streamModeActive := false ;
6198: LD_ADDR_EXP 24
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// normalCounter := 36 ;
6206: LD_ADDR_EXP 25
6210: PUSH
6211: LD_INT 36
6213: ST_TO_ADDR
// hardcoreCounter := 18 ;
6214: LD_ADDR_EXP 26
6218: PUSH
6219: LD_INT 18
6221: ST_TO_ADDR
// sRocket := false ;
6222: LD_ADDR_EXP 29
6226: PUSH
6227: LD_INT 0
6229: ST_TO_ADDR
// sSpeed := false ;
6230: LD_ADDR_EXP 28
6234: PUSH
6235: LD_INT 0
6237: ST_TO_ADDR
// sEngine := false ;
6238: LD_ADDR_EXP 30
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// sSpec := false ;
6246: LD_ADDR_EXP 27
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// sLevel := false ;
6254: LD_ADDR_EXP 31
6258: PUSH
6259: LD_INT 0
6261: ST_TO_ADDR
// sArmoury := false ;
6262: LD_ADDR_EXP 32
6266: PUSH
6267: LD_INT 0
6269: ST_TO_ADDR
// sRadar := false ;
6270: LD_ADDR_EXP 33
6274: PUSH
6275: LD_INT 0
6277: ST_TO_ADDR
// sBunker := false ;
6278: LD_ADDR_EXP 34
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
// sHack := false ;
6286: LD_ADDR_EXP 35
6290: PUSH
6291: LD_INT 0
6293: ST_TO_ADDR
// sFire := false ;
6294: LD_ADDR_EXP 36
6298: PUSH
6299: LD_INT 0
6301: ST_TO_ADDR
// sRefresh := false ;
6302: LD_ADDR_EXP 37
6306: PUSH
6307: LD_INT 0
6309: ST_TO_ADDR
// sExp := false ;
6310: LD_ADDR_EXP 38
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// sDepot := false ;
6318: LD_ADDR_EXP 39
6322: PUSH
6323: LD_INT 0
6325: ST_TO_ADDR
// sFlag := false ;
6326: LD_ADDR_EXP 40
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// sKamikadze := false ;
6334: LD_ADDR_EXP 48
6338: PUSH
6339: LD_INT 0
6341: ST_TO_ADDR
// sTroll := false ;
6342: LD_ADDR_EXP 49
6346: PUSH
6347: LD_INT 0
6349: ST_TO_ADDR
// sSlow := false ;
6350: LD_ADDR_EXP 50
6354: PUSH
6355: LD_INT 0
6357: ST_TO_ADDR
// sLack := false ;
6358: LD_ADDR_EXP 51
6362: PUSH
6363: LD_INT 0
6365: ST_TO_ADDR
// sTank := false ;
6366: LD_ADDR_EXP 53
6370: PUSH
6371: LD_INT 0
6373: ST_TO_ADDR
// sRemote := false ;
6374: LD_ADDR_EXP 54
6378: PUSH
6379: LD_INT 0
6381: ST_TO_ADDR
// sPowell := false ;
6382: LD_ADDR_EXP 55
6386: PUSH
6387: LD_INT 0
6389: ST_TO_ADDR
// sTeleport := false ;
6390: LD_ADDR_EXP 58
6394: PUSH
6395: LD_INT 0
6397: ST_TO_ADDR
// sOilTower := false ;
6398: LD_ADDR_EXP 60
6402: PUSH
6403: LD_INT 0
6405: ST_TO_ADDR
// sShovel := false ;
6406: LD_ADDR_EXP 61
6410: PUSH
6411: LD_INT 0
6413: ST_TO_ADDR
// sSheik := false ;
6414: LD_ADDR_EXP 62
6418: PUSH
6419: LD_INT 0
6421: ST_TO_ADDR
// sEarthquake := false ;
6422: LD_ADDR_EXP 64
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// sAI := false ;
6430: LD_ADDR_EXP 65
6434: PUSH
6435: LD_INT 0
6437: ST_TO_ADDR
// sCargo := false ;
6438: LD_ADDR_EXP 68
6442: PUSH
6443: LD_INT 0
6445: ST_TO_ADDR
// sDLaser := false ;
6446: LD_ADDR_EXP 69
6450: PUSH
6451: LD_INT 0
6453: ST_TO_ADDR
// sExchange := false ;
6454: LD_ADDR_EXP 70
6458: PUSH
6459: LD_INT 0
6461: ST_TO_ADDR
// sFac := false ;
6462: LD_ADDR_EXP 71
6466: PUSH
6467: LD_INT 0
6469: ST_TO_ADDR
// sPower := false ;
6470: LD_ADDR_EXP 72
6474: PUSH
6475: LD_INT 0
6477: ST_TO_ADDR
// sRandom := false ;
6478: LD_ADDR_EXP 73
6482: PUSH
6483: LD_INT 0
6485: ST_TO_ADDR
// sShield := false ;
6486: LD_ADDR_EXP 74
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// sTime := false ;
6494: LD_ADDR_EXP 75
6498: PUSH
6499: LD_INT 0
6501: ST_TO_ADDR
// sTools := false ;
6502: LD_ADDR_EXP 76
6506: PUSH
6507: LD_INT 0
6509: ST_TO_ADDR
// sSold := false ;
6510: LD_ADDR_EXP 41
6514: PUSH
6515: LD_INT 0
6517: ST_TO_ADDR
// sDiff := false ;
6518: LD_ADDR_EXP 42
6522: PUSH
6523: LD_INT 0
6525: ST_TO_ADDR
// sFog := false ;
6526: LD_ADDR_EXP 45
6530: PUSH
6531: LD_INT 0
6533: ST_TO_ADDR
// sReset := false ;
6534: LD_ADDR_EXP 46
6538: PUSH
6539: LD_INT 0
6541: ST_TO_ADDR
// sSun := false ;
6542: LD_ADDR_EXP 47
6546: PUSH
6547: LD_INT 0
6549: ST_TO_ADDR
// sTiger := false ;
6550: LD_ADDR_EXP 43
6554: PUSH
6555: LD_INT 0
6557: ST_TO_ADDR
// sBomb := false ;
6558: LD_ADDR_EXP 44
6562: PUSH
6563: LD_INT 0
6565: ST_TO_ADDR
// sWound := false ;
6566: LD_ADDR_EXP 52
6570: PUSH
6571: LD_INT 0
6573: ST_TO_ADDR
// sBetray := false ;
6574: LD_ADDR_EXP 56
6578: PUSH
6579: LD_INT 0
6581: ST_TO_ADDR
// sContamin := false ;
6582: LD_ADDR_EXP 57
6586: PUSH
6587: LD_INT 0
6589: ST_TO_ADDR
// sOil := false ;
6590: LD_ADDR_EXP 59
6594: PUSH
6595: LD_INT 0
6597: ST_TO_ADDR
// sStu := false ;
6598: LD_ADDR_EXP 63
6602: PUSH
6603: LD_INT 0
6605: ST_TO_ADDR
// sBazooka := false ;
6606: LD_ADDR_EXP 66
6610: PUSH
6611: LD_INT 0
6613: ST_TO_ADDR
// sMortar := false ;
6614: LD_ADDR_EXP 67
6618: PUSH
6619: LD_INT 0
6621: ST_TO_ADDR
// sRanger := false ;
6622: LD_ADDR_EXP 77
6626: PUSH
6627: LD_INT 0
6629: ST_TO_ADDR
// sComputer := false ;
6630: LD_ADDR_EXP 78
6634: PUSH
6635: LD_INT 0
6637: ST_TO_ADDR
// s30 := false ;
6638: LD_ADDR_EXP 79
6642: PUSH
6643: LD_INT 0
6645: ST_TO_ADDR
// s60 := false ;
6646: LD_ADDR_EXP 80
6650: PUSH
6651: LD_INT 0
6653: ST_TO_ADDR
// end ;
6654: LD_VAR 0 1
6658: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6659: LD_INT 0
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
// result := [ ] ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: EMPTY
6674: ST_TO_ADDR
// if campaign_id = 1 then
6675: LD_OWVAR 69
6679: PUSH
6680: LD_INT 1
6682: EQUAL
6683: IFFALSE 9849
// begin case mission_number of 1 :
6685: LD_OWVAR 70
6689: PUSH
6690: LD_INT 1
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6774
6698: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_INT 2
6706: PUSH
6707: LD_INT 4
6709: PUSH
6710: LD_INT 11
6712: PUSH
6713: LD_INT 12
6715: PUSH
6716: LD_INT 15
6718: PUSH
6719: LD_INT 16
6721: PUSH
6722: LD_INT 22
6724: PUSH
6725: LD_INT 23
6727: PUSH
6728: LD_INT 26
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 101
6744: PUSH
6745: LD_INT 102
6747: PUSH
6748: LD_INT 106
6750: PUSH
6751: LD_INT 116
6753: PUSH
6754: LD_INT 117
6756: PUSH
6757: LD_INT 118
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: ST_TO_ADDR
6772: GO 9847
6774: LD_INT 2
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6866
6782: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: LD_INT 4
6793: PUSH
6794: LD_INT 11
6796: PUSH
6797: LD_INT 12
6799: PUSH
6800: LD_INT 15
6802: PUSH
6803: LD_INT 16
6805: PUSH
6806: LD_INT 22
6808: PUSH
6809: LD_INT 23
6811: PUSH
6812: LD_INT 26
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 101
6828: PUSH
6829: LD_INT 102
6831: PUSH
6832: LD_INT 105
6834: PUSH
6835: LD_INT 106
6837: PUSH
6838: LD_INT 108
6840: PUSH
6841: LD_INT 116
6843: PUSH
6844: LD_INT 117
6846: PUSH
6847: LD_INT 118
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: ST_TO_ADDR
6864: GO 9847
6866: LD_INT 3
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6962
6874: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_INT 2
6882: PUSH
6883: LD_INT 4
6885: PUSH
6886: LD_INT 5
6888: PUSH
6889: LD_INT 11
6891: PUSH
6892: LD_INT 12
6894: PUSH
6895: LD_INT 15
6897: PUSH
6898: LD_INT 16
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 26
6906: PUSH
6907: LD_INT 36
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 101
6924: PUSH
6925: LD_INT 102
6927: PUSH
6928: LD_INT 105
6930: PUSH
6931: LD_INT 106
6933: PUSH
6934: LD_INT 108
6936: PUSH
6937: LD_INT 116
6939: PUSH
6940: LD_INT 117
6942: PUSH
6943: LD_INT 118
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: ST_TO_ADDR
6960: GO 9847
6962: LD_INT 4
6964: DOUBLE
6965: EQUAL
6966: IFTRUE 6970
6968: GO 7066
6970: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6971: LD_ADDR_VAR 0 2
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: LD_INT 4
6981: PUSH
6982: LD_INT 5
6984: PUSH
6985: LD_INT 8
6987: PUSH
6988: LD_INT 11
6990: PUSH
6991: LD_INT 12
6993: PUSH
6994: LD_INT 15
6996: PUSH
6997: LD_INT 16
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_INT 23
7005: PUSH
7006: LD_INT 26
7008: PUSH
7009: LD_INT 36
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 101
7028: PUSH
7029: LD_INT 102
7031: PUSH
7032: LD_INT 105
7034: PUSH
7035: LD_INT 106
7037: PUSH
7038: LD_INT 108
7040: PUSH
7041: LD_INT 116
7043: PUSH
7044: LD_INT 117
7046: PUSH
7047: LD_INT 118
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 9847
7066: LD_INT 5
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7186
7074: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7075: LD_ADDR_VAR 0 2
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 4
7085: PUSH
7086: LD_INT 5
7088: PUSH
7089: LD_INT 6
7091: PUSH
7092: LD_INT 8
7094: PUSH
7095: LD_INT 11
7097: PUSH
7098: LD_INT 12
7100: PUSH
7101: LD_INT 15
7103: PUSH
7104: LD_INT 16
7106: PUSH
7107: LD_INT 22
7109: PUSH
7110: LD_INT 23
7112: PUSH
7113: LD_INT 25
7115: PUSH
7116: LD_INT 26
7118: PUSH
7119: LD_INT 36
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 101
7140: PUSH
7141: LD_INT 102
7143: PUSH
7144: LD_INT 105
7146: PUSH
7147: LD_INT 106
7149: PUSH
7150: LD_INT 108
7152: PUSH
7153: LD_INT 109
7155: PUSH
7156: LD_INT 112
7158: PUSH
7159: LD_INT 116
7161: PUSH
7162: LD_INT 117
7164: PUSH
7165: LD_INT 118
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 9847
7186: LD_INT 6
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7326
7194: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7195: LD_ADDR_VAR 0 2
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 4
7205: PUSH
7206: LD_INT 5
7208: PUSH
7209: LD_INT 6
7211: PUSH
7212: LD_INT 8
7214: PUSH
7215: LD_INT 11
7217: PUSH
7218: LD_INT 12
7220: PUSH
7221: LD_INT 15
7223: PUSH
7224: LD_INT 16
7226: PUSH
7227: LD_INT 20
7229: PUSH
7230: LD_INT 21
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_INT 23
7238: PUSH
7239: LD_INT 25
7241: PUSH
7242: LD_INT 26
7244: PUSH
7245: LD_INT 30
7247: PUSH
7248: LD_INT 31
7250: PUSH
7251: LD_INT 32
7253: PUSH
7254: LD_INT 36
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 101
7280: PUSH
7281: LD_INT 102
7283: PUSH
7284: LD_INT 105
7286: PUSH
7287: LD_INT 106
7289: PUSH
7290: LD_INT 108
7292: PUSH
7293: LD_INT 109
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 116
7301: PUSH
7302: LD_INT 117
7304: PUSH
7305: LD_INT 118
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: ST_TO_ADDR
7324: GO 9847
7326: LD_INT 7
7328: DOUBLE
7329: EQUAL
7330: IFTRUE 7334
7332: GO 7446
7334: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7335: LD_ADDR_VAR 0 2
7339: PUSH
7340: LD_INT 2
7342: PUSH
7343: LD_INT 4
7345: PUSH
7346: LD_INT 5
7348: PUSH
7349: LD_INT 7
7351: PUSH
7352: LD_INT 11
7354: PUSH
7355: LD_INT 12
7357: PUSH
7358: LD_INT 15
7360: PUSH
7361: LD_INT 16
7363: PUSH
7364: LD_INT 20
7366: PUSH
7367: LD_INT 21
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 23
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 26
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 101
7400: PUSH
7401: LD_INT 102
7403: PUSH
7404: LD_INT 103
7406: PUSH
7407: LD_INT 105
7409: PUSH
7410: LD_INT 106
7412: PUSH
7413: LD_INT 108
7415: PUSH
7416: LD_INT 112
7418: PUSH
7419: LD_INT 116
7421: PUSH
7422: LD_INT 117
7424: PUSH
7425: LD_INT 118
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
7444: GO 9847
7446: LD_INT 8
7448: DOUBLE
7449: EQUAL
7450: IFTRUE 7454
7452: GO 7594
7454: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: LD_INT 2
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: LD_INT 7
7474: PUSH
7475: LD_INT 8
7477: PUSH
7478: LD_INT 11
7480: PUSH
7481: LD_INT 12
7483: PUSH
7484: LD_INT 15
7486: PUSH
7487: LD_INT 16
7489: PUSH
7490: LD_INT 20
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 22
7498: PUSH
7499: LD_INT 23
7501: PUSH
7502: LD_INT 25
7504: PUSH
7505: LD_INT 26
7507: PUSH
7508: LD_INT 30
7510: PUSH
7511: LD_INT 31
7513: PUSH
7514: LD_INT 32
7516: PUSH
7517: LD_INT 36
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 101
7544: PUSH
7545: LD_INT 102
7547: PUSH
7548: LD_INT 103
7550: PUSH
7551: LD_INT 105
7553: PUSH
7554: LD_INT 106
7556: PUSH
7557: LD_INT 108
7559: PUSH
7560: LD_INT 109
7562: PUSH
7563: LD_INT 112
7565: PUSH
7566: LD_INT 116
7568: PUSH
7569: LD_INT 117
7571: PUSH
7572: LD_INT 118
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: ST_TO_ADDR
7592: GO 9847
7594: LD_INT 9
7596: DOUBLE
7597: EQUAL
7598: IFTRUE 7602
7600: GO 7750
7602: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7603: LD_ADDR_VAR 0 2
7607: PUSH
7608: LD_INT 2
7610: PUSH
7611: LD_INT 4
7613: PUSH
7614: LD_INT 5
7616: PUSH
7617: LD_INT 6
7619: PUSH
7620: LD_INT 7
7622: PUSH
7623: LD_INT 8
7625: PUSH
7626: LD_INT 11
7628: PUSH
7629: LD_INT 12
7631: PUSH
7632: LD_INT 15
7634: PUSH
7635: LD_INT 16
7637: PUSH
7638: LD_INT 20
7640: PUSH
7641: LD_INT 21
7643: PUSH
7644: LD_INT 22
7646: PUSH
7647: LD_INT 23
7649: PUSH
7650: LD_INT 25
7652: PUSH
7653: LD_INT 26
7655: PUSH
7656: LD_INT 28
7658: PUSH
7659: LD_INT 30
7661: PUSH
7662: LD_INT 31
7664: PUSH
7665: LD_INT 32
7667: PUSH
7668: LD_INT 36
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 101
7696: PUSH
7697: LD_INT 102
7699: PUSH
7700: LD_INT 103
7702: PUSH
7703: LD_INT 105
7705: PUSH
7706: LD_INT 106
7708: PUSH
7709: LD_INT 108
7711: PUSH
7712: LD_INT 109
7714: PUSH
7715: LD_INT 112
7717: PUSH
7718: LD_INT 114
7720: PUSH
7721: LD_INT 116
7723: PUSH
7724: LD_INT 117
7726: PUSH
7727: LD_INT 118
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: ST_TO_ADDR
7748: GO 9847
7750: LD_INT 10
7752: DOUBLE
7753: EQUAL
7754: IFTRUE 7758
7756: GO 7954
7758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7759: LD_ADDR_VAR 0 2
7763: PUSH
7764: LD_INT 2
7766: PUSH
7767: LD_INT 4
7769: PUSH
7770: LD_INT 5
7772: PUSH
7773: LD_INT 6
7775: PUSH
7776: LD_INT 7
7778: PUSH
7779: LD_INT 8
7781: PUSH
7782: LD_INT 9
7784: PUSH
7785: LD_INT 10
7787: PUSH
7788: LD_INT 11
7790: PUSH
7791: LD_INT 12
7793: PUSH
7794: LD_INT 13
7796: PUSH
7797: LD_INT 14
7799: PUSH
7800: LD_INT 15
7802: PUSH
7803: LD_INT 16
7805: PUSH
7806: LD_INT 17
7808: PUSH
7809: LD_INT 18
7811: PUSH
7812: LD_INT 19
7814: PUSH
7815: LD_INT 20
7817: PUSH
7818: LD_INT 21
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_INT 23
7826: PUSH
7827: LD_INT 24
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 26
7835: PUSH
7836: LD_INT 28
7838: PUSH
7839: LD_INT 30
7841: PUSH
7842: LD_INT 31
7844: PUSH
7845: LD_INT 32
7847: PUSH
7848: LD_INT 36
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 101
7884: PUSH
7885: LD_INT 102
7887: PUSH
7888: LD_INT 103
7890: PUSH
7891: LD_INT 104
7893: PUSH
7894: LD_INT 105
7896: PUSH
7897: LD_INT 106
7899: PUSH
7900: LD_INT 107
7902: PUSH
7903: LD_INT 108
7905: PUSH
7906: LD_INT 109
7908: PUSH
7909: LD_INT 110
7911: PUSH
7912: LD_INT 111
7914: PUSH
7915: LD_INT 112
7917: PUSH
7918: LD_INT 114
7920: PUSH
7921: LD_INT 116
7923: PUSH
7924: LD_INT 117
7926: PUSH
7927: LD_INT 118
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: ST_TO_ADDR
7952: GO 9847
7954: LD_INT 11
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 8166
7962: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7963: LD_ADDR_VAR 0 2
7967: PUSH
7968: LD_INT 2
7970: PUSH
7971: LD_INT 3
7973: PUSH
7974: LD_INT 4
7976: PUSH
7977: LD_INT 5
7979: PUSH
7980: LD_INT 6
7982: PUSH
7983: LD_INT 7
7985: PUSH
7986: LD_INT 8
7988: PUSH
7989: LD_INT 9
7991: PUSH
7992: LD_INT 10
7994: PUSH
7995: LD_INT 11
7997: PUSH
7998: LD_INT 12
8000: PUSH
8001: LD_INT 13
8003: PUSH
8004: LD_INT 14
8006: PUSH
8007: LD_INT 15
8009: PUSH
8010: LD_INT 16
8012: PUSH
8013: LD_INT 17
8015: PUSH
8016: LD_INT 18
8018: PUSH
8019: LD_INT 19
8021: PUSH
8022: LD_INT 20
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 22
8030: PUSH
8031: LD_INT 23
8033: PUSH
8034: LD_INT 24
8036: PUSH
8037: LD_INT 25
8039: PUSH
8040: LD_INT 26
8042: PUSH
8043: LD_INT 28
8045: PUSH
8046: LD_INT 30
8048: PUSH
8049: LD_INT 31
8051: PUSH
8052: LD_INT 32
8054: PUSH
8055: LD_INT 34
8057: PUSH
8058: LD_INT 36
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 101
8096: PUSH
8097: LD_INT 102
8099: PUSH
8100: LD_INT 103
8102: PUSH
8103: LD_INT 104
8105: PUSH
8106: LD_INT 105
8108: PUSH
8109: LD_INT 106
8111: PUSH
8112: LD_INT 107
8114: PUSH
8115: LD_INT 108
8117: PUSH
8118: LD_INT 109
8120: PUSH
8121: LD_INT 110
8123: PUSH
8124: LD_INT 111
8126: PUSH
8127: LD_INT 112
8129: PUSH
8130: LD_INT 114
8132: PUSH
8133: LD_INT 116
8135: PUSH
8136: LD_INT 117
8138: PUSH
8139: LD_INT 118
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: ST_TO_ADDR
8164: GO 9847
8166: LD_INT 12
8168: DOUBLE
8169: EQUAL
8170: IFTRUE 8174
8172: GO 8394
8174: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8175: LD_ADDR_VAR 0 2
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: LD_INT 2
8185: PUSH
8186: LD_INT 3
8188: PUSH
8189: LD_INT 4
8191: PUSH
8192: LD_INT 5
8194: PUSH
8195: LD_INT 6
8197: PUSH
8198: LD_INT 7
8200: PUSH
8201: LD_INT 8
8203: PUSH
8204: LD_INT 9
8206: PUSH
8207: LD_INT 10
8209: PUSH
8210: LD_INT 11
8212: PUSH
8213: LD_INT 12
8215: PUSH
8216: LD_INT 13
8218: PUSH
8219: LD_INT 14
8221: PUSH
8222: LD_INT 15
8224: PUSH
8225: LD_INT 16
8227: PUSH
8228: LD_INT 17
8230: PUSH
8231: LD_INT 18
8233: PUSH
8234: LD_INT 19
8236: PUSH
8237: LD_INT 20
8239: PUSH
8240: LD_INT 21
8242: PUSH
8243: LD_INT 22
8245: PUSH
8246: LD_INT 23
8248: PUSH
8249: LD_INT 24
8251: PUSH
8252: LD_INT 25
8254: PUSH
8255: LD_INT 26
8257: PUSH
8258: LD_INT 27
8260: PUSH
8261: LD_INT 28
8263: PUSH
8264: LD_INT 30
8266: PUSH
8267: LD_INT 31
8269: PUSH
8270: LD_INT 32
8272: PUSH
8273: LD_INT 33
8275: PUSH
8276: LD_INT 34
8278: PUSH
8279: LD_INT 36
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 101
8320: PUSH
8321: LD_INT 102
8323: PUSH
8324: LD_INT 103
8326: PUSH
8327: LD_INT 104
8329: PUSH
8330: LD_INT 105
8332: PUSH
8333: LD_INT 106
8335: PUSH
8336: LD_INT 107
8338: PUSH
8339: LD_INT 108
8341: PUSH
8342: LD_INT 109
8344: PUSH
8345: LD_INT 110
8347: PUSH
8348: LD_INT 111
8350: PUSH
8351: LD_INT 112
8353: PUSH
8354: LD_INT 113
8356: PUSH
8357: LD_INT 114
8359: PUSH
8360: LD_INT 116
8362: PUSH
8363: LD_INT 117
8365: PUSH
8366: LD_INT 118
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: ST_TO_ADDR
8392: GO 9847
8394: LD_INT 13
8396: DOUBLE
8397: EQUAL
8398: IFTRUE 8402
8400: GO 8610
8402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8403: LD_ADDR_VAR 0 2
8407: PUSH
8408: LD_INT 1
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 4
8419: PUSH
8420: LD_INT 5
8422: PUSH
8423: LD_INT 8
8425: PUSH
8426: LD_INT 9
8428: PUSH
8429: LD_INT 10
8431: PUSH
8432: LD_INT 11
8434: PUSH
8435: LD_INT 12
8437: PUSH
8438: LD_INT 14
8440: PUSH
8441: LD_INT 15
8443: PUSH
8444: LD_INT 16
8446: PUSH
8447: LD_INT 17
8449: PUSH
8450: LD_INT 18
8452: PUSH
8453: LD_INT 19
8455: PUSH
8456: LD_INT 20
8458: PUSH
8459: LD_INT 21
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: LD_INT 25
8473: PUSH
8474: LD_INT 26
8476: PUSH
8477: LD_INT 27
8479: PUSH
8480: LD_INT 28
8482: PUSH
8483: LD_INT 30
8485: PUSH
8486: LD_INT 31
8488: PUSH
8489: LD_INT 32
8491: PUSH
8492: LD_INT 33
8494: PUSH
8495: LD_INT 34
8497: PUSH
8498: LD_INT 36
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 101
8536: PUSH
8537: LD_INT 102
8539: PUSH
8540: LD_INT 103
8542: PUSH
8543: LD_INT 104
8545: PUSH
8546: LD_INT 105
8548: PUSH
8549: LD_INT 106
8551: PUSH
8552: LD_INT 107
8554: PUSH
8555: LD_INT 108
8557: PUSH
8558: LD_INT 109
8560: PUSH
8561: LD_INT 110
8563: PUSH
8564: LD_INT 111
8566: PUSH
8567: LD_INT 112
8569: PUSH
8570: LD_INT 113
8572: PUSH
8573: LD_INT 114
8575: PUSH
8576: LD_INT 116
8578: PUSH
8579: LD_INT 117
8581: PUSH
8582: LD_INT 118
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: ST_TO_ADDR
8608: GO 9847
8610: LD_INT 14
8612: DOUBLE
8613: EQUAL
8614: IFTRUE 8618
8616: GO 8842
8618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 1
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: LD_INT 3
8632: PUSH
8633: LD_INT 4
8635: PUSH
8636: LD_INT 5
8638: PUSH
8639: LD_INT 6
8641: PUSH
8642: LD_INT 7
8644: PUSH
8645: LD_INT 8
8647: PUSH
8648: LD_INT 9
8650: PUSH
8651: LD_INT 10
8653: PUSH
8654: LD_INT 11
8656: PUSH
8657: LD_INT 12
8659: PUSH
8660: LD_INT 13
8662: PUSH
8663: LD_INT 14
8665: PUSH
8666: LD_INT 15
8668: PUSH
8669: LD_INT 16
8671: PUSH
8672: LD_INT 17
8674: PUSH
8675: LD_INT 18
8677: PUSH
8678: LD_INT 19
8680: PUSH
8681: LD_INT 20
8683: PUSH
8684: LD_INT 21
8686: PUSH
8687: LD_INT 22
8689: PUSH
8690: LD_INT 23
8692: PUSH
8693: LD_INT 24
8695: PUSH
8696: LD_INT 25
8698: PUSH
8699: LD_INT 26
8701: PUSH
8702: LD_INT 27
8704: PUSH
8705: LD_INT 28
8707: PUSH
8708: LD_INT 29
8710: PUSH
8711: LD_INT 30
8713: PUSH
8714: LD_INT 31
8716: PUSH
8717: LD_INT 32
8719: PUSH
8720: LD_INT 33
8722: PUSH
8723: LD_INT 34
8725: PUSH
8726: LD_INT 36
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 101
8768: PUSH
8769: LD_INT 102
8771: PUSH
8772: LD_INT 103
8774: PUSH
8775: LD_INT 104
8777: PUSH
8778: LD_INT 105
8780: PUSH
8781: LD_INT 106
8783: PUSH
8784: LD_INT 107
8786: PUSH
8787: LD_INT 108
8789: PUSH
8790: LD_INT 109
8792: PUSH
8793: LD_INT 110
8795: PUSH
8796: LD_INT 111
8798: PUSH
8799: LD_INT 112
8801: PUSH
8802: LD_INT 113
8804: PUSH
8805: LD_INT 114
8807: PUSH
8808: LD_INT 116
8810: PUSH
8811: LD_INT 117
8813: PUSH
8814: LD_INT 118
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: ST_TO_ADDR
8840: GO 9847
8842: LD_INT 15
8844: DOUBLE
8845: EQUAL
8846: IFTRUE 8850
8848: GO 9074
8850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: LD_INT 2
8861: PUSH
8862: LD_INT 3
8864: PUSH
8865: LD_INT 4
8867: PUSH
8868: LD_INT 5
8870: PUSH
8871: LD_INT 6
8873: PUSH
8874: LD_INT 7
8876: PUSH
8877: LD_INT 8
8879: PUSH
8880: LD_INT 9
8882: PUSH
8883: LD_INT 10
8885: PUSH
8886: LD_INT 11
8888: PUSH
8889: LD_INT 12
8891: PUSH
8892: LD_INT 13
8894: PUSH
8895: LD_INT 14
8897: PUSH
8898: LD_INT 15
8900: PUSH
8901: LD_INT 16
8903: PUSH
8904: LD_INT 17
8906: PUSH
8907: LD_INT 18
8909: PUSH
8910: LD_INT 19
8912: PUSH
8913: LD_INT 20
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_INT 23
8924: PUSH
8925: LD_INT 24
8927: PUSH
8928: LD_INT 25
8930: PUSH
8931: LD_INT 26
8933: PUSH
8934: LD_INT 27
8936: PUSH
8937: LD_INT 28
8939: PUSH
8940: LD_INT 29
8942: PUSH
8943: LD_INT 30
8945: PUSH
8946: LD_INT 31
8948: PUSH
8949: LD_INT 32
8951: PUSH
8952: LD_INT 33
8954: PUSH
8955: LD_INT 34
8957: PUSH
8958: LD_INT 36
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 101
9000: PUSH
9001: LD_INT 102
9003: PUSH
9004: LD_INT 103
9006: PUSH
9007: LD_INT 104
9009: PUSH
9010: LD_INT 105
9012: PUSH
9013: LD_INT 106
9015: PUSH
9016: LD_INT 107
9018: PUSH
9019: LD_INT 108
9021: PUSH
9022: LD_INT 109
9024: PUSH
9025: LD_INT 110
9027: PUSH
9028: LD_INT 111
9030: PUSH
9031: LD_INT 112
9033: PUSH
9034: LD_INT 113
9036: PUSH
9037: LD_INT 114
9039: PUSH
9040: LD_INT 116
9042: PUSH
9043: LD_INT 117
9045: PUSH
9046: LD_INT 118
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: ST_TO_ADDR
9072: GO 9847
9074: LD_INT 16
9076: DOUBLE
9077: EQUAL
9078: IFTRUE 9082
9080: GO 9218
9082: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9083: LD_ADDR_VAR 0 2
9087: PUSH
9088: LD_INT 2
9090: PUSH
9091: LD_INT 4
9093: PUSH
9094: LD_INT 5
9096: PUSH
9097: LD_INT 7
9099: PUSH
9100: LD_INT 11
9102: PUSH
9103: LD_INT 12
9105: PUSH
9106: LD_INT 15
9108: PUSH
9109: LD_INT 16
9111: PUSH
9112: LD_INT 20
9114: PUSH
9115: LD_INT 21
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_INT 23
9123: PUSH
9124: LD_INT 25
9126: PUSH
9127: LD_INT 26
9129: PUSH
9130: LD_INT 30
9132: PUSH
9133: LD_INT 31
9135: PUSH
9136: LD_INT 32
9138: PUSH
9139: LD_INT 33
9141: PUSH
9142: LD_INT 34
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 101
9168: PUSH
9169: LD_INT 102
9171: PUSH
9172: LD_INT 103
9174: PUSH
9175: LD_INT 106
9177: PUSH
9178: LD_INT 108
9180: PUSH
9181: LD_INT 112
9183: PUSH
9184: LD_INT 113
9186: PUSH
9187: LD_INT 114
9189: PUSH
9190: LD_INT 116
9192: PUSH
9193: LD_INT 117
9195: PUSH
9196: LD_INT 118
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: ST_TO_ADDR
9216: GO 9847
9218: LD_INT 17
9220: DOUBLE
9221: EQUAL
9222: IFTRUE 9226
9224: GO 9450
9226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9227: LD_ADDR_VAR 0 2
9231: PUSH
9232: LD_INT 1
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: LD_INT 3
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: LD_INT 6
9249: PUSH
9250: LD_INT 7
9252: PUSH
9253: LD_INT 8
9255: PUSH
9256: LD_INT 9
9258: PUSH
9259: LD_INT 10
9261: PUSH
9262: LD_INT 11
9264: PUSH
9265: LD_INT 12
9267: PUSH
9268: LD_INT 13
9270: PUSH
9271: LD_INT 14
9273: PUSH
9274: LD_INT 15
9276: PUSH
9277: LD_INT 16
9279: PUSH
9280: LD_INT 17
9282: PUSH
9283: LD_INT 18
9285: PUSH
9286: LD_INT 19
9288: PUSH
9289: LD_INT 20
9291: PUSH
9292: LD_INT 21
9294: PUSH
9295: LD_INT 22
9297: PUSH
9298: LD_INT 23
9300: PUSH
9301: LD_INT 24
9303: PUSH
9304: LD_INT 25
9306: PUSH
9307: LD_INT 26
9309: PUSH
9310: LD_INT 27
9312: PUSH
9313: LD_INT 28
9315: PUSH
9316: LD_INT 29
9318: PUSH
9319: LD_INT 30
9321: PUSH
9322: LD_INT 31
9324: PUSH
9325: LD_INT 32
9327: PUSH
9328: LD_INT 33
9330: PUSH
9331: LD_INT 34
9333: PUSH
9334: LD_INT 36
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 101
9376: PUSH
9377: LD_INT 102
9379: PUSH
9380: LD_INT 103
9382: PUSH
9383: LD_INT 104
9385: PUSH
9386: LD_INT 105
9388: PUSH
9389: LD_INT 106
9391: PUSH
9392: LD_INT 107
9394: PUSH
9395: LD_INT 108
9397: PUSH
9398: LD_INT 109
9400: PUSH
9401: LD_INT 110
9403: PUSH
9404: LD_INT 111
9406: PUSH
9407: LD_INT 112
9409: PUSH
9410: LD_INT 113
9412: PUSH
9413: LD_INT 114
9415: PUSH
9416: LD_INT 116
9418: PUSH
9419: LD_INT 117
9421: PUSH
9422: LD_INT 118
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: ST_TO_ADDR
9448: GO 9847
9450: LD_INT 18
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9606
9458: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9459: LD_ADDR_VAR 0 2
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 4
9469: PUSH
9470: LD_INT 5
9472: PUSH
9473: LD_INT 7
9475: PUSH
9476: LD_INT 11
9478: PUSH
9479: LD_INT 12
9481: PUSH
9482: LD_INT 15
9484: PUSH
9485: LD_INT 16
9487: PUSH
9488: LD_INT 20
9490: PUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 22
9496: PUSH
9497: LD_INT 23
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 26
9505: PUSH
9506: LD_INT 30
9508: PUSH
9509: LD_INT 31
9511: PUSH
9512: LD_INT 32
9514: PUSH
9515: LD_INT 33
9517: PUSH
9518: LD_INT 34
9520: PUSH
9521: LD_INT 35
9523: PUSH
9524: LD_INT 36
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 101
9552: PUSH
9553: LD_INT 102
9555: PUSH
9556: LD_INT 103
9558: PUSH
9559: LD_INT 106
9561: PUSH
9562: LD_INT 108
9564: PUSH
9565: LD_INT 112
9567: PUSH
9568: LD_INT 113
9570: PUSH
9571: LD_INT 114
9573: PUSH
9574: LD_INT 115
9576: PUSH
9577: LD_INT 116
9579: PUSH
9580: LD_INT 117
9582: PUSH
9583: LD_INT 118
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: ST_TO_ADDR
9604: GO 9847
9606: LD_INT 19
9608: DOUBLE
9609: EQUAL
9610: IFTRUE 9614
9612: GO 9846
9614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9615: LD_ADDR_VAR 0 2
9619: PUSH
9620: LD_INT 1
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 4
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: LD_INT 6
9637: PUSH
9638: LD_INT 7
9640: PUSH
9641: LD_INT 8
9643: PUSH
9644: LD_INT 9
9646: PUSH
9647: LD_INT 10
9649: PUSH
9650: LD_INT 11
9652: PUSH
9653: LD_INT 12
9655: PUSH
9656: LD_INT 13
9658: PUSH
9659: LD_INT 14
9661: PUSH
9662: LD_INT 15
9664: PUSH
9665: LD_INT 16
9667: PUSH
9668: LD_INT 17
9670: PUSH
9671: LD_INT 18
9673: PUSH
9674: LD_INT 19
9676: PUSH
9677: LD_INT 20
9679: PUSH
9680: LD_INT 21
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 23
9688: PUSH
9689: LD_INT 24
9691: PUSH
9692: LD_INT 25
9694: PUSH
9695: LD_INT 26
9697: PUSH
9698: LD_INT 27
9700: PUSH
9701: LD_INT 28
9703: PUSH
9704: LD_INT 29
9706: PUSH
9707: LD_INT 30
9709: PUSH
9710: LD_INT 31
9712: PUSH
9713: LD_INT 32
9715: PUSH
9716: LD_INT 33
9718: PUSH
9719: LD_INT 34
9721: PUSH
9722: LD_INT 35
9724: PUSH
9725: LD_INT 36
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 101
9768: PUSH
9769: LD_INT 102
9771: PUSH
9772: LD_INT 103
9774: PUSH
9775: LD_INT 104
9777: PUSH
9778: LD_INT 105
9780: PUSH
9781: LD_INT 106
9783: PUSH
9784: LD_INT 107
9786: PUSH
9787: LD_INT 108
9789: PUSH
9790: LD_INT 109
9792: PUSH
9793: LD_INT 110
9795: PUSH
9796: LD_INT 111
9798: PUSH
9799: LD_INT 112
9801: PUSH
9802: LD_INT 113
9804: PUSH
9805: LD_INT 114
9807: PUSH
9808: LD_INT 115
9810: PUSH
9811: LD_INT 116
9813: PUSH
9814: LD_INT 117
9816: PUSH
9817: LD_INT 118
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: ST_TO_ADDR
9844: GO 9847
9846: POP
// end else
9847: GO 10078
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9849: LD_ADDR_VAR 0 2
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: LD_INT 3
9862: PUSH
9863: LD_INT 4
9865: PUSH
9866: LD_INT 5
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: LD_INT 7
9874: PUSH
9875: LD_INT 8
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 11
9886: PUSH
9887: LD_INT 12
9889: PUSH
9890: LD_INT 13
9892: PUSH
9893: LD_INT 14
9895: PUSH
9896: LD_INT 15
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: LD_INT 17
9904: PUSH
9905: LD_INT 18
9907: PUSH
9908: LD_INT 19
9910: PUSH
9911: LD_INT 20
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: LD_INT 24
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 26
9931: PUSH
9932: LD_INT 27
9934: PUSH
9935: LD_INT 28
9937: PUSH
9938: LD_INT 29
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 31
9946: PUSH
9947: LD_INT 32
9949: PUSH
9950: LD_INT 33
9952: PUSH
9953: LD_INT 34
9955: PUSH
9956: LD_INT 35
9958: PUSH
9959: LD_INT 36
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 101
10002: PUSH
10003: LD_INT 102
10005: PUSH
10006: LD_INT 103
10008: PUSH
10009: LD_INT 104
10011: PUSH
10012: LD_INT 105
10014: PUSH
10015: LD_INT 106
10017: PUSH
10018: LD_INT 107
10020: PUSH
10021: LD_INT 108
10023: PUSH
10024: LD_INT 109
10026: PUSH
10027: LD_INT 110
10029: PUSH
10030: LD_INT 111
10032: PUSH
10033: LD_INT 112
10035: PUSH
10036: LD_INT 113
10038: PUSH
10039: LD_INT 114
10041: PUSH
10042: LD_INT 115
10044: PUSH
10045: LD_INT 116
10047: PUSH
10048: LD_INT 117
10050: PUSH
10051: LD_INT 118
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: ST_TO_ADDR
// if result then
10078: LD_VAR 0 2
10082: IFFALSE 10868
// begin normal :=  ;
10084: LD_ADDR_VAR 0 5
10088: PUSH
10089: LD_STRING 
10091: ST_TO_ADDR
// hardcore :=  ;
10092: LD_ADDR_VAR 0 6
10096: PUSH
10097: LD_STRING 
10099: ST_TO_ADDR
// active :=  ;
10100: LD_ADDR_VAR 0 7
10104: PUSH
10105: LD_STRING 
10107: ST_TO_ADDR
// for i = 1 to normalCounter do
10108: LD_ADDR_VAR 0 8
10112: PUSH
10113: DOUBLE
10114: LD_INT 1
10116: DEC
10117: ST_TO_ADDR
10118: LD_EXP 25
10122: PUSH
10123: FOR_TO
10124: IFFALSE 10225
// begin tmp := 0 ;
10126: LD_ADDR_VAR 0 3
10130: PUSH
10131: LD_STRING 0
10133: ST_TO_ADDR
// if result [ 1 ] then
10134: LD_VAR 0 2
10138: PUSH
10139: LD_INT 1
10141: ARRAY
10142: IFFALSE 10207
// if result [ 1 ] [ 1 ] = i then
10144: LD_VAR 0 2
10148: PUSH
10149: LD_INT 1
10151: ARRAY
10152: PUSH
10153: LD_INT 1
10155: ARRAY
10156: PUSH
10157: LD_VAR 0 8
10161: EQUAL
10162: IFFALSE 10207
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10164: LD_ADDR_VAR 0 2
10168: PUSH
10169: LD_VAR 0 2
10173: PPUSH
10174: LD_INT 1
10176: PPUSH
10177: LD_VAR 0 2
10181: PUSH
10182: LD_INT 1
10184: ARRAY
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 3
10193: PPUSH
10194: CALL_OW 1
10198: ST_TO_ADDR
// tmp := 1 ;
10199: LD_ADDR_VAR 0 3
10203: PUSH
10204: LD_STRING 1
10206: ST_TO_ADDR
// end ; normal := normal & tmp ;
10207: LD_ADDR_VAR 0 5
10211: PUSH
10212: LD_VAR 0 5
10216: PUSH
10217: LD_VAR 0 3
10221: STR
10222: ST_TO_ADDR
// end ;
10223: GO 10123
10225: POP
10226: POP
// for i = 1 to hardcoreCounter do
10227: LD_ADDR_VAR 0 8
10231: PUSH
10232: DOUBLE
10233: LD_INT 1
10235: DEC
10236: ST_TO_ADDR
10237: LD_EXP 26
10241: PUSH
10242: FOR_TO
10243: IFFALSE 10348
// begin tmp := 0 ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_STRING 0
10252: ST_TO_ADDR
// if result [ 2 ] then
10253: LD_VAR 0 2
10257: PUSH
10258: LD_INT 2
10260: ARRAY
10261: IFFALSE 10330
// if result [ 2 ] [ 1 ] = 100 + i then
10263: LD_VAR 0 2
10267: PUSH
10268: LD_INT 2
10270: ARRAY
10271: PUSH
10272: LD_INT 1
10274: ARRAY
10275: PUSH
10276: LD_INT 100
10278: PUSH
10279: LD_VAR 0 8
10283: PLUS
10284: EQUAL
10285: IFFALSE 10330
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10287: LD_ADDR_VAR 0 2
10291: PUSH
10292: LD_VAR 0 2
10296: PPUSH
10297: LD_INT 2
10299: PPUSH
10300: LD_VAR 0 2
10304: PUSH
10305: LD_INT 2
10307: ARRAY
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 3
10316: PPUSH
10317: CALL_OW 1
10321: ST_TO_ADDR
// tmp := 1 ;
10322: LD_ADDR_VAR 0 3
10326: PUSH
10327: LD_STRING 1
10329: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10330: LD_ADDR_VAR 0 6
10334: PUSH
10335: LD_VAR 0 6
10339: PUSH
10340: LD_VAR 0 3
10344: STR
10345: ST_TO_ADDR
// end ;
10346: GO 10242
10348: POP
10349: POP
// if isGameLoad then
10350: LD_VAR 0 1
10354: IFFALSE 10829
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: LD_EXP 29
10365: PUSH
10366: LD_EXP 28
10370: PUSH
10371: LD_EXP 30
10375: PUSH
10376: LD_EXP 27
10380: PUSH
10381: LD_EXP 31
10385: PUSH
10386: LD_EXP 32
10390: PUSH
10391: LD_EXP 33
10395: PUSH
10396: LD_EXP 34
10400: PUSH
10401: LD_EXP 35
10405: PUSH
10406: LD_EXP 36
10410: PUSH
10411: LD_EXP 37
10415: PUSH
10416: LD_EXP 38
10420: PUSH
10421: LD_EXP 39
10425: PUSH
10426: LD_EXP 40
10430: PUSH
10431: LD_EXP 48
10435: PUSH
10436: LD_EXP 49
10440: PUSH
10441: LD_EXP 50
10445: PUSH
10446: LD_EXP 51
10450: PUSH
10451: LD_EXP 53
10455: PUSH
10456: LD_EXP 54
10460: PUSH
10461: LD_EXP 55
10465: PUSH
10466: LD_EXP 58
10470: PUSH
10471: LD_EXP 60
10475: PUSH
10476: LD_EXP 61
10480: PUSH
10481: LD_EXP 62
10485: PUSH
10486: LD_EXP 64
10490: PUSH
10491: LD_EXP 65
10495: PUSH
10496: LD_EXP 68
10500: PUSH
10501: LD_EXP 69
10505: PUSH
10506: LD_EXP 70
10510: PUSH
10511: LD_EXP 71
10515: PUSH
10516: LD_EXP 72
10520: PUSH
10521: LD_EXP 73
10525: PUSH
10526: LD_EXP 74
10530: PUSH
10531: LD_EXP 75
10535: PUSH
10536: LD_EXP 76
10540: PUSH
10541: LD_EXP 41
10545: PUSH
10546: LD_EXP 42
10550: PUSH
10551: LD_EXP 45
10555: PUSH
10556: LD_EXP 46
10560: PUSH
10561: LD_EXP 47
10565: PUSH
10566: LD_EXP 43
10570: PUSH
10571: LD_EXP 44
10575: PUSH
10576: LD_EXP 52
10580: PUSH
10581: LD_EXP 56
10585: PUSH
10586: LD_EXP 57
10590: PUSH
10591: LD_EXP 59
10595: PUSH
10596: LD_EXP 63
10600: PUSH
10601: LD_EXP 66
10605: PUSH
10606: LD_EXP 67
10610: PUSH
10611: LD_EXP 77
10615: PUSH
10616: LD_EXP 78
10620: PUSH
10621: LD_EXP 79
10625: PUSH
10626: LD_EXP 80
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: ST_TO_ADDR
// tmp :=  ;
10687: LD_ADDR_VAR 0 3
10691: PUSH
10692: LD_STRING 
10694: ST_TO_ADDR
// for i = 1 to normalCounter do
10695: LD_ADDR_VAR 0 8
10699: PUSH
10700: DOUBLE
10701: LD_INT 1
10703: DEC
10704: ST_TO_ADDR
10705: LD_EXP 25
10709: PUSH
10710: FOR_TO
10711: IFFALSE 10747
// begin if flags [ i ] then
10713: LD_VAR 0 4
10717: PUSH
10718: LD_VAR 0 8
10722: ARRAY
10723: IFFALSE 10745
// tmp := tmp & i & ; ;
10725: LD_ADDR_VAR 0 3
10729: PUSH
10730: LD_VAR 0 3
10734: PUSH
10735: LD_VAR 0 8
10739: STR
10740: PUSH
10741: LD_STRING ;
10743: STR
10744: ST_TO_ADDR
// end ;
10745: GO 10710
10747: POP
10748: POP
// for i = 1 to hardcoreCounter do
10749: LD_ADDR_VAR 0 8
10753: PUSH
10754: DOUBLE
10755: LD_INT 1
10757: DEC
10758: ST_TO_ADDR
10759: LD_EXP 26
10763: PUSH
10764: FOR_TO
10765: IFFALSE 10811
// begin if flags [ normalCounter + i ] then
10767: LD_VAR 0 4
10771: PUSH
10772: LD_EXP 25
10776: PUSH
10777: LD_VAR 0 8
10781: PLUS
10782: ARRAY
10783: IFFALSE 10809
// tmp := tmp & ( 100 + i ) & ; ;
10785: LD_ADDR_VAR 0 3
10789: PUSH
10790: LD_VAR 0 3
10794: PUSH
10795: LD_INT 100
10797: PUSH
10798: LD_VAR 0 8
10802: PLUS
10803: STR
10804: PUSH
10805: LD_STRING ;
10807: STR
10808: ST_TO_ADDR
// end ;
10809: GO 10764
10811: POP
10812: POP
// if tmp then
10813: LD_VAR 0 3
10817: IFFALSE 10829
// active := tmp ;
10819: LD_ADDR_VAR 0 7
10823: PUSH
10824: LD_VAR 0 3
10828: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10829: LD_STRING getStreamItemsFromMission("
10831: PUSH
10832: LD_VAR 0 5
10836: STR
10837: PUSH
10838: LD_STRING ","
10840: STR
10841: PUSH
10842: LD_VAR 0 6
10846: STR
10847: PUSH
10848: LD_STRING ","
10850: STR
10851: PUSH
10852: LD_VAR 0 7
10856: STR
10857: PUSH
10858: LD_STRING ")
10860: STR
10861: PPUSH
10862: CALL_OW 559
// end else
10866: GO 10875
// ToLua ( getStreamItemsFromMission("","","") ) ;
10868: LD_STRING getStreamItemsFromMission("","","")
10870: PPUSH
10871: CALL_OW 559
// end ;
10875: LD_VAR 0 2
10879: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10880: LD_EXP 24
10884: PUSH
10885: LD_EXP 29
10889: AND
10890: IFFALSE 11014
10892: GO 10894
10894: DISABLE
10895: LD_INT 0
10897: PPUSH
10898: PPUSH
// begin enable ;
10899: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10900: LD_ADDR_VAR 0 2
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_OWVAR 2
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: LD_INT 34
10922: PUSH
10923: LD_INT 7
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 34
10932: PUSH
10933: LD_INT 45
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 34
10942: PUSH
10943: LD_INT 28
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: LD_INT 34
10952: PUSH
10953: LD_INT 47
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PPUSH
10971: CALL_OW 69
10975: ST_TO_ADDR
// if not tmp then
10976: LD_VAR 0 2
10980: NOT
10981: IFFALSE 10985
// exit ;
10983: GO 11014
// for i in tmp do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: LD_VAR 0 2
10994: PUSH
10995: FOR_IN
10996: IFFALSE 11012
// begin SetLives ( i , 0 ) ;
10998: LD_VAR 0 1
11002: PPUSH
11003: LD_INT 0
11005: PPUSH
11006: CALL_OW 234
// end ;
11010: GO 10995
11012: POP
11013: POP
// end ;
11014: PPOPN 2
11016: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11017: LD_EXP 24
11021: PUSH
11022: LD_EXP 30
11026: AND
11027: IFFALSE 11111
11029: GO 11031
11031: DISABLE
11032: LD_INT 0
11034: PPUSH
11035: PPUSH
// begin enable ;
11036: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11037: LD_ADDR_VAR 0 2
11041: PUSH
11042: LD_INT 22
11044: PUSH
11045: LD_OWVAR 2
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 32
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 69
11072: ST_TO_ADDR
// if not tmp then
11073: LD_VAR 0 2
11077: NOT
11078: IFFALSE 11082
// exit ;
11080: GO 11111
// for i in tmp do
11082: LD_ADDR_VAR 0 1
11086: PUSH
11087: LD_VAR 0 2
11091: PUSH
11092: FOR_IN
11093: IFFALSE 11109
// begin SetLives ( i , 0 ) ;
11095: LD_VAR 0 1
11099: PPUSH
11100: LD_INT 0
11102: PPUSH
11103: CALL_OW 234
// end ;
11107: GO 11092
11109: POP
11110: POP
// end ;
11111: PPOPN 2
11113: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11114: LD_EXP 24
11118: PUSH
11119: LD_EXP 27
11123: AND
11124: IFFALSE 11217
11126: GO 11128
11128: DISABLE
11129: LD_INT 0
11131: PPUSH
// begin enable ;
11132: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_OWVAR 2
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: LD_INT 25
11155: PUSH
11156: LD_INT 5
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 25
11165: PUSH
11166: LD_INT 9
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 25
11175: PUSH
11176: LD_INT 8
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 69
11197: PUSH
11198: FOR_IN
11199: IFFALSE 11215
// begin SetClass ( i , 1 ) ;
11201: LD_VAR 0 1
11205: PPUSH
11206: LD_INT 1
11208: PPUSH
11209: CALL_OW 336
// end ;
11213: GO 11198
11215: POP
11216: POP
// end ;
11217: PPOPN 1
11219: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11220: LD_EXP 24
11224: PUSH
11225: LD_EXP 28
11229: AND
11230: PUSH
11231: LD_OWVAR 65
11235: PUSH
11236: LD_INT 7
11238: LESS
11239: AND
11240: IFFALSE 11254
11242: GO 11244
11244: DISABLE
// begin enable ;
11245: ENABLE
// game_speed := 7 ;
11246: LD_ADDR_OWVAR 65
11250: PUSH
11251: LD_INT 7
11253: ST_TO_ADDR
// end ;
11254: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11255: LD_EXP 24
11259: PUSH
11260: LD_EXP 31
11264: AND
11265: IFFALSE 11467
11267: GO 11269
11269: DISABLE
11270: LD_INT 0
11272: PPUSH
11273: PPUSH
11274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11275: LD_ADDR_VAR 0 3
11279: PUSH
11280: LD_INT 81
11282: PUSH
11283: LD_OWVAR 2
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 21
11294: PUSH
11295: LD_INT 1
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 69
11310: ST_TO_ADDR
// if not tmp then
11311: LD_VAR 0 3
11315: NOT
11316: IFFALSE 11320
// exit ;
11318: GO 11467
// if tmp > 5 then
11320: LD_VAR 0 3
11324: PUSH
11325: LD_INT 5
11327: GREATER
11328: IFFALSE 11340
// k := 5 else
11330: LD_ADDR_VAR 0 2
11334: PUSH
11335: LD_INT 5
11337: ST_TO_ADDR
11338: GO 11350
// k := tmp ;
11340: LD_ADDR_VAR 0 2
11344: PUSH
11345: LD_VAR 0 3
11349: ST_TO_ADDR
// for i := 1 to k do
11350: LD_ADDR_VAR 0 1
11354: PUSH
11355: DOUBLE
11356: LD_INT 1
11358: DEC
11359: ST_TO_ADDR
11360: LD_VAR 0 2
11364: PUSH
11365: FOR_TO
11366: IFFALSE 11465
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11368: LD_VAR 0 3
11372: PUSH
11373: LD_VAR 0 1
11377: ARRAY
11378: PPUSH
11379: LD_VAR 0 1
11383: PUSH
11384: LD_INT 4
11386: MOD
11387: PUSH
11388: LD_INT 1
11390: PLUS
11391: PPUSH
11392: CALL_OW 259
11396: PUSH
11397: LD_INT 10
11399: LESS
11400: IFFALSE 11463
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11402: LD_VAR 0 3
11406: PUSH
11407: LD_VAR 0 1
11411: ARRAY
11412: PPUSH
11413: LD_VAR 0 1
11417: PUSH
11418: LD_INT 4
11420: MOD
11421: PUSH
11422: LD_INT 1
11424: PLUS
11425: PPUSH
11426: LD_VAR 0 3
11430: PUSH
11431: LD_VAR 0 1
11435: ARRAY
11436: PPUSH
11437: LD_VAR 0 1
11441: PUSH
11442: LD_INT 4
11444: MOD
11445: PUSH
11446: LD_INT 1
11448: PLUS
11449: PPUSH
11450: CALL_OW 259
11454: PUSH
11455: LD_INT 1
11457: PLUS
11458: PPUSH
11459: CALL_OW 237
11463: GO 11365
11465: POP
11466: POP
// end ;
11467: PPOPN 3
11469: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11470: LD_EXP 24
11474: PUSH
11475: LD_EXP 32
11479: AND
11480: IFFALSE 11500
11482: GO 11484
11484: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11485: LD_INT 4
11487: PPUSH
11488: LD_OWVAR 2
11492: PPUSH
11493: LD_INT 0
11495: PPUSH
11496: CALL_OW 324
11500: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11501: LD_EXP 24
11505: PUSH
11506: LD_EXP 61
11510: AND
11511: IFFALSE 11531
11513: GO 11515
11515: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11516: LD_INT 19
11518: PPUSH
11519: LD_OWVAR 2
11523: PPUSH
11524: LD_INT 0
11526: PPUSH
11527: CALL_OW 324
11531: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11532: LD_EXP 24
11536: PUSH
11537: LD_EXP 33
11541: AND
11542: IFFALSE 11644
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
// begin enable ;
11551: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11552: LD_ADDR_VAR 0 2
11556: PUSH
11557: LD_INT 22
11559: PUSH
11560: LD_OWVAR 2
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 2
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 11
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 34
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PPUSH
11601: CALL_OW 69
11605: ST_TO_ADDR
// if not tmp then
11606: LD_VAR 0 2
11610: NOT
11611: IFFALSE 11615
// exit ;
11613: GO 11644
// for i in tmp do
11615: LD_ADDR_VAR 0 1
11619: PUSH
11620: LD_VAR 0 2
11624: PUSH
11625: FOR_IN
11626: IFFALSE 11642
// begin SetLives ( i , 0 ) ;
11628: LD_VAR 0 1
11632: PPUSH
11633: LD_INT 0
11635: PPUSH
11636: CALL_OW 234
// end ;
11640: GO 11625
11642: POP
11643: POP
// end ;
11644: PPOPN 2
11646: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11647: LD_EXP 24
11651: PUSH
11652: LD_EXP 34
11656: AND
11657: IFFALSE 11677
11659: GO 11661
11661: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11662: LD_INT 32
11664: PPUSH
11665: LD_OWVAR 2
11669: PPUSH
11670: LD_INT 0
11672: PPUSH
11673: CALL_OW 324
11677: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11678: LD_EXP 24
11682: PUSH
11683: LD_EXP 35
11687: AND
11688: IFFALSE 11869
11690: GO 11692
11692: DISABLE
11693: LD_INT 0
11695: PPUSH
11696: PPUSH
11697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_INT 22
11705: PUSH
11706: LD_OWVAR 2
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 33
11717: PUSH
11718: LD_INT 3
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: ST_TO_ADDR
// if not tmp then
11734: LD_VAR 0 2
11738: NOT
11739: IFFALSE 11743
// exit ;
11741: GO 11869
// side := 0 ;
11743: LD_ADDR_VAR 0 3
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// for i := 1 to 8 do
11751: LD_ADDR_VAR 0 1
11755: PUSH
11756: DOUBLE
11757: LD_INT 1
11759: DEC
11760: ST_TO_ADDR
11761: LD_INT 8
11763: PUSH
11764: FOR_TO
11765: IFFALSE 11813
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11767: LD_OWVAR 2
11771: PUSH
11772: LD_VAR 0 1
11776: NONEQUAL
11777: PUSH
11778: LD_OWVAR 2
11782: PPUSH
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 81
11792: PUSH
11793: LD_INT 2
11795: EQUAL
11796: AND
11797: IFFALSE 11811
// begin side := i ;
11799: LD_ADDR_VAR 0 3
11803: PUSH
11804: LD_VAR 0 1
11808: ST_TO_ADDR
// break ;
11809: GO 11813
// end ;
11811: GO 11764
11813: POP
11814: POP
// if not side then
11815: LD_VAR 0 3
11819: NOT
11820: IFFALSE 11824
// exit ;
11822: GO 11869
// for i := 1 to tmp do
11824: LD_ADDR_VAR 0 1
11828: PUSH
11829: DOUBLE
11830: LD_INT 1
11832: DEC
11833: ST_TO_ADDR
11834: LD_VAR 0 2
11838: PUSH
11839: FOR_TO
11840: IFFALSE 11867
// if Prob ( 60 ) then
11842: LD_INT 60
11844: PPUSH
11845: CALL_OW 13
11849: IFFALSE 11865
// SetSide ( i , side ) ;
11851: LD_VAR 0 1
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: CALL_OW 235
11865: GO 11839
11867: POP
11868: POP
// end ;
11869: PPOPN 3
11871: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11872: LD_EXP 24
11876: PUSH
11877: LD_EXP 37
11881: AND
11882: IFFALSE 12001
11884: GO 11886
11886: DISABLE
11887: LD_INT 0
11889: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11890: LD_ADDR_VAR 0 1
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_OWVAR 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 21
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 23
11922: PUSH
11923: LD_INT 0
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: PPUSH
11939: CALL_OW 69
11943: PUSH
11944: FOR_IN
11945: IFFALSE 11999
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11947: LD_VAR 0 1
11951: PPUSH
11952: CALL_OW 257
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: LD_INT 2
11962: PUSH
11963: LD_INT 3
11965: PUSH
11966: LD_INT 4
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: IN
11975: IFFALSE 11997
// SetClass ( un , rand ( 1 , 4 ) ) ;
11977: LD_VAR 0 1
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 4
11987: PPUSH
11988: CALL_OW 12
11992: PPUSH
11993: CALL_OW 336
11997: GO 11944
11999: POP
12000: POP
// end ;
12001: PPOPN 1
12003: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12004: LD_EXP 24
12008: PUSH
12009: LD_EXP 36
12013: AND
12014: IFFALSE 12093
12016: GO 12018
12018: DISABLE
12019: LD_INT 0
12021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12022: LD_ADDR_VAR 0 1
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_OWVAR 2
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 21
12041: PUSH
12042: LD_INT 3
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: ST_TO_ADDR
// if not tmp then
12058: LD_VAR 0 1
12062: NOT
12063: IFFALSE 12067
// exit ;
12065: GO 12093
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12067: LD_VAR 0 1
12071: PUSH
12072: LD_INT 1
12074: PPUSH
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 12
12084: ARRAY
12085: PPUSH
12086: LD_INT 100
12088: PPUSH
12089: CALL_OW 234
// end ;
12093: PPOPN 1
12095: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12096: LD_EXP 24
12100: PUSH
12101: LD_EXP 38
12105: AND
12106: IFFALSE 12204
12108: GO 12110
12110: DISABLE
12111: LD_INT 0
12113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12114: LD_ADDR_VAR 0 1
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_OWVAR 2
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: ST_TO_ADDR
// if not tmp then
12150: LD_VAR 0 1
12154: NOT
12155: IFFALSE 12159
// exit ;
12157: GO 12204
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12159: LD_VAR 0 1
12163: PUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_VAR 0 1
12171: PPUSH
12172: CALL_OW 12
12176: ARRAY
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_INT 4
12183: PPUSH
12184: CALL_OW 12
12188: PPUSH
12189: LD_INT 3000
12191: PPUSH
12192: LD_INT 9000
12194: PPUSH
12195: CALL_OW 12
12199: PPUSH
12200: CALL_OW 492
// end ;
12204: PPOPN 1
12206: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12207: LD_EXP 24
12211: PUSH
12212: LD_EXP 39
12216: AND
12217: IFFALSE 12237
12219: GO 12221
12221: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12222: LD_INT 1
12224: PPUSH
12225: LD_OWVAR 2
12229: PPUSH
12230: LD_INT 0
12232: PPUSH
12233: CALL_OW 324
12237: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12238: LD_EXP 24
12242: PUSH
12243: LD_EXP 40
12247: AND
12248: IFFALSE 12331
12250: GO 12252
12252: DISABLE
12253: LD_INT 0
12255: PPUSH
12256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12257: LD_ADDR_VAR 0 2
12261: PUSH
12262: LD_INT 22
12264: PUSH
12265: LD_OWVAR 2
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 21
12276: PUSH
12277: LD_INT 3
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: ST_TO_ADDR
// if not tmp then
12293: LD_VAR 0 2
12297: NOT
12298: IFFALSE 12302
// exit ;
12300: GO 12331
// for i in tmp do
12302: LD_ADDR_VAR 0 1
12306: PUSH
12307: LD_VAR 0 2
12311: PUSH
12312: FOR_IN
12313: IFFALSE 12329
// SetBLevel ( i , 10 ) ;
12315: LD_VAR 0 1
12319: PPUSH
12320: LD_INT 10
12322: PPUSH
12323: CALL_OW 241
12327: GO 12312
12329: POP
12330: POP
// end ;
12331: PPOPN 2
12333: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12334: LD_EXP 24
12338: PUSH
12339: LD_EXP 41
12343: AND
12344: IFFALSE 12455
12346: GO 12348
12348: DISABLE
12349: LD_INT 0
12351: PPUSH
12352: PPUSH
12353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: LD_INT 22
12361: PUSH
12362: LD_OWVAR 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 25
12373: PUSH
12374: LD_INT 1
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PPUSH
12385: CALL_OW 69
12389: ST_TO_ADDR
// if not tmp then
12390: LD_VAR 0 3
12394: NOT
12395: IFFALSE 12399
// exit ;
12397: GO 12455
// un := tmp [ rand ( 1 , tmp ) ] ;
12399: LD_ADDR_VAR 0 2
12403: PUSH
12404: LD_VAR 0 3
12408: PUSH
12409: LD_INT 1
12411: PPUSH
12412: LD_VAR 0 3
12416: PPUSH
12417: CALL_OW 12
12421: ARRAY
12422: ST_TO_ADDR
// if Crawls ( un ) then
12423: LD_VAR 0 2
12427: PPUSH
12428: CALL_OW 318
12432: IFFALSE 12443
// ComWalk ( un ) ;
12434: LD_VAR 0 2
12438: PPUSH
12439: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12443: LD_VAR 0 2
12447: PPUSH
12448: LD_INT 5
12450: PPUSH
12451: CALL_OW 336
// end ;
12455: PPOPN 3
12457: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12458: LD_EXP 24
12462: PUSH
12463: LD_EXP 42
12467: AND
12468: PUSH
12469: LD_OWVAR 67
12473: PUSH
12474: LD_INT 4
12476: LESS
12477: AND
12478: IFFALSE 12497
12480: GO 12482
12482: DISABLE
// begin Difficulty := Difficulty + 1 ;
12483: LD_ADDR_OWVAR 67
12487: PUSH
12488: LD_OWVAR 67
12492: PUSH
12493: LD_INT 1
12495: PLUS
12496: ST_TO_ADDR
// end ;
12497: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12498: LD_EXP 24
12502: PUSH
12503: LD_EXP 43
12507: AND
12508: IFFALSE 12611
12510: GO 12512
12512: DISABLE
12513: LD_INT 0
12515: PPUSH
// begin for i := 1 to 5 do
12516: LD_ADDR_VAR 0 1
12520: PUSH
12521: DOUBLE
12522: LD_INT 1
12524: DEC
12525: ST_TO_ADDR
12526: LD_INT 5
12528: PUSH
12529: FOR_TO
12530: IFFALSE 12609
// begin uc_nation := nation_nature ;
12532: LD_ADDR_OWVAR 21
12536: PUSH
12537: LD_INT 0
12539: ST_TO_ADDR
// uc_side := 0 ;
12540: LD_ADDR_OWVAR 20
12544: PUSH
12545: LD_INT 0
12547: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12548: LD_ADDR_OWVAR 29
12552: PUSH
12553: LD_INT 12
12555: PUSH
12556: LD_INT 12
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: ST_TO_ADDR
// hc_agressivity := 20 ;
12563: LD_ADDR_OWVAR 35
12567: PUSH
12568: LD_INT 20
12570: ST_TO_ADDR
// hc_class := class_tiger ;
12571: LD_ADDR_OWVAR 28
12575: PUSH
12576: LD_INT 14
12578: ST_TO_ADDR
// hc_gallery :=  ;
12579: LD_ADDR_OWVAR 33
12583: PUSH
12584: LD_STRING 
12586: ST_TO_ADDR
// hc_name :=  ;
12587: LD_ADDR_OWVAR 26
12591: PUSH
12592: LD_STRING 
12594: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12595: CALL_OW 44
12599: PPUSH
12600: LD_INT 0
12602: PPUSH
12603: CALL_OW 51
// end ;
12607: GO 12529
12609: POP
12610: POP
// end ;
12611: PPOPN 1
12613: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12614: LD_EXP 24
12618: PUSH
12619: LD_EXP 44
12623: AND
12624: IFFALSE 12633
12626: GO 12628
12628: DISABLE
// StreamSibBomb ;
12629: CALL 12634 0 0
12633: END
// export function StreamSibBomb ; var i , x , y ; begin
12634: LD_INT 0
12636: PPUSH
12637: PPUSH
12638: PPUSH
12639: PPUSH
// result := false ;
12640: LD_ADDR_VAR 0 1
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// for i := 1 to 16 do
12648: LD_ADDR_VAR 0 2
12652: PUSH
12653: DOUBLE
12654: LD_INT 1
12656: DEC
12657: ST_TO_ADDR
12658: LD_INT 16
12660: PUSH
12661: FOR_TO
12662: IFFALSE 12861
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12664: LD_ADDR_VAR 0 3
12668: PUSH
12669: LD_INT 10
12671: PUSH
12672: LD_INT 20
12674: PUSH
12675: LD_INT 30
12677: PUSH
12678: LD_INT 40
12680: PUSH
12681: LD_INT 50
12683: PUSH
12684: LD_INT 60
12686: PUSH
12687: LD_INT 70
12689: PUSH
12690: LD_INT 80
12692: PUSH
12693: LD_INT 90
12695: PUSH
12696: LD_INT 100
12698: PUSH
12699: LD_INT 110
12701: PUSH
12702: LD_INT 120
12704: PUSH
12705: LD_INT 130
12707: PUSH
12708: LD_INT 140
12710: PUSH
12711: LD_INT 150
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 1
12733: PPUSH
12734: LD_INT 15
12736: PPUSH
12737: CALL_OW 12
12741: ARRAY
12742: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12743: LD_ADDR_VAR 0 4
12747: PUSH
12748: LD_INT 10
12750: PUSH
12751: LD_INT 20
12753: PUSH
12754: LD_INT 30
12756: PUSH
12757: LD_INT 40
12759: PUSH
12760: LD_INT 50
12762: PUSH
12763: LD_INT 60
12765: PUSH
12766: LD_INT 70
12768: PUSH
12769: LD_INT 80
12771: PUSH
12772: LD_INT 90
12774: PUSH
12775: LD_INT 100
12777: PUSH
12778: LD_INT 110
12780: PUSH
12781: LD_INT 120
12783: PUSH
12784: LD_INT 130
12786: PUSH
12787: LD_INT 140
12789: PUSH
12790: LD_INT 150
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 1
12812: PPUSH
12813: LD_INT 15
12815: PPUSH
12816: CALL_OW 12
12820: ARRAY
12821: ST_TO_ADDR
// if ValidHex ( x , y ) then
12822: LD_VAR 0 3
12826: PPUSH
12827: LD_VAR 0 4
12831: PPUSH
12832: CALL_OW 488
12836: IFFALSE 12859
// begin result := [ x , y ] ;
12838: LD_ADDR_VAR 0 1
12842: PUSH
12843: LD_VAR 0 3
12847: PUSH
12848: LD_VAR 0 4
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: ST_TO_ADDR
// break ;
12857: GO 12861
// end ; end ;
12859: GO 12661
12861: POP
12862: POP
// if result then
12863: LD_VAR 0 1
12867: IFFALSE 12927
// begin ToLua ( playSibBomb() ) ;
12869: LD_STRING playSibBomb()
12871: PPUSH
12872: CALL_OW 559
// wait ( 0 0$14 ) ;
12876: LD_INT 490
12878: PPUSH
12879: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12883: LD_VAR 0 1
12887: PUSH
12888: LD_INT 1
12890: ARRAY
12891: PPUSH
12892: LD_VAR 0 1
12896: PUSH
12897: LD_INT 2
12899: ARRAY
12900: PPUSH
12901: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12905: LD_VAR 0 1
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: LD_VAR 0 1
12918: PUSH
12919: LD_INT 2
12921: ARRAY
12922: PPUSH
12923: CALL_OW 429
// end ; end ;
12927: LD_VAR 0 1
12931: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12932: LD_EXP 24
12936: PUSH
12937: LD_EXP 46
12941: AND
12942: IFFALSE 12954
12944: GO 12946
12946: DISABLE
// YouLost (  ) ;
12947: LD_STRING 
12949: PPUSH
12950: CALL_OW 104
12954: END
// every 0 0$1 trigger StreamModeActive and sFog do
12955: LD_EXP 24
12959: PUSH
12960: LD_EXP 45
12964: AND
12965: IFFALSE 12979
12967: GO 12969
12969: DISABLE
// FogOff ( your_side ) ;
12970: LD_OWVAR 2
12974: PPUSH
12975: CALL_OW 344
12979: END
// every 0 0$1 trigger StreamModeActive and sSun do
12980: LD_EXP 24
12984: PUSH
12985: LD_EXP 47
12989: AND
12990: IFFALSE 13018
12992: GO 12994
12994: DISABLE
// begin solar_recharge_percent := 0 ;
12995: LD_ADDR_OWVAR 79
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13003: LD_INT 10500
13005: PPUSH
13006: CALL_OW 67
// solar_recharge_percent := 100 ;
13010: LD_ADDR_OWVAR 79
13014: PUSH
13015: LD_INT 100
13017: ST_TO_ADDR
// end ;
13018: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13019: LD_EXP 24
13023: PUSH
13024: LD_EXP 48
13028: AND
13029: IFFALSE 13268
13031: GO 13033
13033: DISABLE
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
13038: PPUSH
// begin tmp := [ ] ;
13039: LD_ADDR_VAR 0 3
13043: PUSH
13044: EMPTY
13045: ST_TO_ADDR
// for i := 1 to 6 do
13046: LD_ADDR_VAR 0 1
13050: PUSH
13051: DOUBLE
13052: LD_INT 1
13054: DEC
13055: ST_TO_ADDR
13056: LD_INT 6
13058: PUSH
13059: FOR_TO
13060: IFFALSE 13165
// begin uc_nation := nation_nature ;
13062: LD_ADDR_OWVAR 21
13066: PUSH
13067: LD_INT 0
13069: ST_TO_ADDR
// uc_side := 0 ;
13070: LD_ADDR_OWVAR 20
13074: PUSH
13075: LD_INT 0
13077: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13078: LD_ADDR_OWVAR 29
13082: PUSH
13083: LD_INT 12
13085: PUSH
13086: LD_INT 12
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: ST_TO_ADDR
// hc_agressivity := 20 ;
13093: LD_ADDR_OWVAR 35
13097: PUSH
13098: LD_INT 20
13100: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13101: LD_ADDR_OWVAR 28
13105: PUSH
13106: LD_INT 17
13108: ST_TO_ADDR
// hc_gallery :=  ;
13109: LD_ADDR_OWVAR 33
13113: PUSH
13114: LD_STRING 
13116: ST_TO_ADDR
// hc_name :=  ;
13117: LD_ADDR_OWVAR 26
13121: PUSH
13122: LD_STRING 
13124: ST_TO_ADDR
// un := CreateHuman ;
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: CALL_OW 44
13134: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13135: LD_VAR 0 2
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 51
// tmp := tmp ^ un ;
13147: LD_ADDR_VAR 0 3
13151: PUSH
13152: LD_VAR 0 3
13156: PUSH
13157: LD_VAR 0 2
13161: ADD
13162: ST_TO_ADDR
// end ;
13163: GO 13059
13165: POP
13166: POP
// repeat wait ( 0 0$1 ) ;
13167: LD_INT 35
13169: PPUSH
13170: CALL_OW 67
// for un in tmp do
13174: LD_ADDR_VAR 0 2
13178: PUSH
13179: LD_VAR 0 3
13183: PUSH
13184: FOR_IN
13185: IFFALSE 13259
// begin if IsDead ( un ) then
13187: LD_VAR 0 2
13191: PPUSH
13192: CALL_OW 301
13196: IFFALSE 13216
// begin tmp := tmp diff un ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_VAR 0 3
13207: PUSH
13208: LD_VAR 0 2
13212: DIFF
13213: ST_TO_ADDR
// continue ;
13214: GO 13184
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13216: LD_VAR 0 2
13220: PPUSH
13221: LD_INT 3
13223: PUSH
13224: LD_INT 22
13226: PUSH
13227: LD_INT 0
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PPUSH
13238: CALL_OW 69
13242: PPUSH
13243: LD_VAR 0 2
13247: PPUSH
13248: CALL_OW 74
13252: PPUSH
13253: CALL_OW 115
// end ;
13257: GO 13184
13259: POP
13260: POP
// until not tmp ;
13261: LD_VAR 0 3
13265: NOT
13266: IFFALSE 13167
// end ;
13268: PPOPN 3
13270: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13271: LD_EXP 24
13275: PUSH
13276: LD_EXP 49
13280: AND
13281: IFFALSE 13335
13283: GO 13285
13285: DISABLE
// begin ToLua ( displayTroll(); ) ;
13286: LD_STRING displayTroll();
13288: PPUSH
13289: CALL_OW 559
// wait ( 3 3$00 ) ;
13293: LD_INT 6300
13295: PPUSH
13296: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13300: LD_STRING hideTroll();
13302: PPUSH
13303: CALL_OW 559
// wait ( 1 1$00 ) ;
13307: LD_INT 2100
13309: PPUSH
13310: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13314: LD_STRING displayTroll();
13316: PPUSH
13317: CALL_OW 559
// wait ( 1 1$00 ) ;
13321: LD_INT 2100
13323: PPUSH
13324: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13328: LD_STRING hideTroll();
13330: PPUSH
13331: CALL_OW 559
// end ;
13335: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13336: LD_EXP 24
13340: PUSH
13341: LD_EXP 50
13345: AND
13346: IFFALSE 13409
13348: GO 13350
13350: DISABLE
13351: LD_INT 0
13353: PPUSH
// begin p := 0 ;
13354: LD_ADDR_VAR 0 1
13358: PUSH
13359: LD_INT 0
13361: ST_TO_ADDR
// repeat game_speed := 1 ;
13362: LD_ADDR_OWVAR 65
13366: PUSH
13367: LD_INT 1
13369: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13370: LD_INT 35
13372: PPUSH
13373: CALL_OW 67
// p := p + 1 ;
13377: LD_ADDR_VAR 0 1
13381: PUSH
13382: LD_VAR 0 1
13386: PUSH
13387: LD_INT 1
13389: PLUS
13390: ST_TO_ADDR
// until p >= 60 ;
13391: LD_VAR 0 1
13395: PUSH
13396: LD_INT 60
13398: GREATEREQUAL
13399: IFFALSE 13362
// game_speed := 4 ;
13401: LD_ADDR_OWVAR 65
13405: PUSH
13406: LD_INT 4
13408: ST_TO_ADDR
// end ;
13409: PPOPN 1
13411: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13412: LD_EXP 24
13416: PUSH
13417: LD_EXP 51
13421: AND
13422: IFFALSE 13568
13424: GO 13426
13426: DISABLE
13427: LD_INT 0
13429: PPUSH
13430: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_OWVAR 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 0
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: ST_TO_ADDR
// if not depot then
13485: LD_VAR 0 1
13489: NOT
13490: IFFALSE 13494
// exit ;
13492: GO 13568
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13494: LD_ADDR_VAR 0 2
13498: PUSH
13499: LD_VAR 0 1
13503: PUSH
13504: LD_INT 1
13506: PPUSH
13507: LD_VAR 0 1
13511: PPUSH
13512: CALL_OW 12
13516: ARRAY
13517: PPUSH
13518: CALL_OW 274
13522: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13523: LD_VAR 0 2
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: LD_INT 0
13533: PPUSH
13534: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13538: LD_VAR 0 2
13542: PPUSH
13543: LD_INT 2
13545: PPUSH
13546: LD_INT 0
13548: PPUSH
13549: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13553: LD_VAR 0 2
13557: PPUSH
13558: LD_INT 3
13560: PPUSH
13561: LD_INT 0
13563: PPUSH
13564: CALL_OW 277
// end ;
13568: PPOPN 2
13570: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13571: LD_EXP 24
13575: PUSH
13576: LD_EXP 52
13580: AND
13581: IFFALSE 13678
13583: GO 13585
13585: DISABLE
13586: LD_INT 0
13588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13589: LD_ADDR_VAR 0 1
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_OWVAR 2
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 3
13618: PUSH
13619: LD_INT 23
13621: PUSH
13622: LD_INT 0
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: PPUSH
13638: CALL_OW 69
13642: ST_TO_ADDR
// if not tmp then
13643: LD_VAR 0 1
13647: NOT
13648: IFFALSE 13652
// exit ;
13650: GO 13678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13652: LD_VAR 0 1
13656: PUSH
13657: LD_INT 1
13659: PPUSH
13660: LD_VAR 0 1
13664: PPUSH
13665: CALL_OW 12
13669: ARRAY
13670: PPUSH
13671: LD_INT 200
13673: PPUSH
13674: CALL_OW 234
// end ;
13678: PPOPN 1
13680: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13681: LD_EXP 24
13685: PUSH
13686: LD_EXP 53
13690: AND
13691: IFFALSE 13770
13693: GO 13695
13695: DISABLE
13696: LD_INT 0
13698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_OWVAR 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 21
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: ST_TO_ADDR
// if not tmp then
13735: LD_VAR 0 1
13739: NOT
13740: IFFALSE 13744
// exit ;
13742: GO 13770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13744: LD_VAR 0 1
13748: PUSH
13749: LD_INT 1
13751: PPUSH
13752: LD_VAR 0 1
13756: PPUSH
13757: CALL_OW 12
13761: ARRAY
13762: PPUSH
13763: LD_INT 60
13765: PPUSH
13766: CALL_OW 234
// end ;
13770: PPOPN 1
13772: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13773: LD_EXP 24
13777: PUSH
13778: LD_EXP 54
13782: AND
13783: IFFALSE 13882
13785: GO 13787
13787: DISABLE
13788: LD_INT 0
13790: PPUSH
13791: PPUSH
// begin enable ;
13792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: LD_INT 22
13800: PUSH
13801: LD_OWVAR 2
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 61
13812: PUSH
13813: EMPTY
13814: LIST
13815: PUSH
13816: LD_INT 33
13818: PUSH
13819: LD_INT 2
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: PPUSH
13831: CALL_OW 69
13835: ST_TO_ADDR
// if not tmp then
13836: LD_VAR 0 1
13840: NOT
13841: IFFALSE 13845
// exit ;
13843: GO 13882
// for i in tmp do
13845: LD_ADDR_VAR 0 2
13849: PUSH
13850: LD_VAR 0 1
13854: PUSH
13855: FOR_IN
13856: IFFALSE 13880
// if IsControledBy ( i ) then
13858: LD_VAR 0 2
13862: PPUSH
13863: CALL_OW 312
13867: IFFALSE 13878
// ComUnlink ( i ) ;
13869: LD_VAR 0 2
13873: PPUSH
13874: CALL_OW 136
13878: GO 13855
13880: POP
13881: POP
// end ;
13882: PPOPN 2
13884: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13885: LD_EXP 24
13889: PUSH
13890: LD_EXP 55
13894: AND
13895: IFFALSE 14035
13897: GO 13899
13899: DISABLE
13900: LD_INT 0
13902: PPUSH
13903: PPUSH
// begin ToLua ( displayPowell(); ) ;
13904: LD_STRING displayPowell();
13906: PPUSH
13907: CALL_OW 559
// uc_side := 0 ;
13911: LD_ADDR_OWVAR 20
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// uc_nation := 2 ;
13919: LD_ADDR_OWVAR 21
13923: PUSH
13924: LD_INT 2
13926: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13927: LD_ADDR_OWVAR 37
13931: PUSH
13932: LD_INT 14
13934: ST_TO_ADDR
// vc_engine := engine_siberite ;
13935: LD_ADDR_OWVAR 39
13939: PUSH
13940: LD_INT 3
13942: ST_TO_ADDR
// vc_control := control_apeman ;
13943: LD_ADDR_OWVAR 38
13947: PUSH
13948: LD_INT 5
13950: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13951: LD_ADDR_OWVAR 40
13955: PUSH
13956: LD_INT 29
13958: ST_TO_ADDR
// un := CreateVehicle ;
13959: LD_ADDR_VAR 0 2
13963: PUSH
13964: CALL_OW 45
13968: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13969: LD_VAR 0 2
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13981: LD_INT 35
13983: PPUSH
13984: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13988: LD_VAR 0 2
13992: PPUSH
13993: LD_INT 22
13995: PUSH
13996: LD_OWVAR 2
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PPUSH
14005: CALL_OW 69
14009: PPUSH
14010: LD_VAR 0 2
14014: PPUSH
14015: CALL_OW 74
14019: PPUSH
14020: CALL_OW 115
// until IsDead ( un ) ;
14024: LD_VAR 0 2
14028: PPUSH
14029: CALL_OW 301
14033: IFFALSE 13981
// end ;
14035: PPOPN 2
14037: END
// every 0 0$1 trigger StreamModeActive and sStu do
14038: LD_EXP 24
14042: PUSH
14043: LD_EXP 63
14047: AND
14048: IFFALSE 14064
14050: GO 14052
14052: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14053: LD_STRING displayStucuk();
14055: PPUSH
14056: CALL_OW 559
// ResetFog ;
14060: CALL_OW 335
// end ;
14064: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14065: LD_EXP 24
14069: PUSH
14070: LD_EXP 56
14074: AND
14075: IFFALSE 14216
14077: GO 14079
14079: DISABLE
14080: LD_INT 0
14082: PPUSH
14083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_OWVAR 2
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 21
14103: PUSH
14104: LD_INT 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 69
14119: ST_TO_ADDR
// if not tmp then
14120: LD_VAR 0 2
14124: NOT
14125: IFFALSE 14129
// exit ;
14127: GO 14216
// un := tmp [ rand ( 1 , tmp ) ] ;
14129: LD_ADDR_VAR 0 1
14133: PUSH
14134: LD_VAR 0 2
14138: PUSH
14139: LD_INT 1
14141: PPUSH
14142: LD_VAR 0 2
14146: PPUSH
14147: CALL_OW 12
14151: ARRAY
14152: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14153: LD_VAR 0 1
14157: PPUSH
14158: LD_INT 0
14160: PPUSH
14161: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14165: LD_VAR 0 1
14169: PPUSH
14170: LD_OWVAR 3
14174: PUSH
14175: LD_VAR 0 1
14179: DIFF
14180: PPUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 74
14190: PPUSH
14191: CALL_OW 115
// wait ( 0 0$20 ) ;
14195: LD_INT 700
14197: PPUSH
14198: CALL_OW 67
// SetSide ( un , your_side ) ;
14202: LD_VAR 0 1
14206: PPUSH
14207: LD_OWVAR 2
14211: PPUSH
14212: CALL_OW 235
// end ;
14216: PPOPN 2
14218: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14219: LD_EXP 24
14223: PUSH
14224: LD_EXP 57
14228: AND
14229: IFFALSE 14335
14231: GO 14233
14233: DISABLE
14234: LD_INT 0
14236: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14237: LD_ADDR_VAR 0 1
14241: PUSH
14242: LD_INT 22
14244: PUSH
14245: LD_OWVAR 2
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: LD_INT 30
14259: PUSH
14260: LD_INT 0
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 30
14269: PUSH
14270: LD_INT 1
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PPUSH
14286: CALL_OW 69
14290: ST_TO_ADDR
// if not depot then
14291: LD_VAR 0 1
14295: NOT
14296: IFFALSE 14300
// exit ;
14298: GO 14335
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14300: LD_VAR 0 1
14304: PUSH
14305: LD_INT 1
14307: ARRAY
14308: PPUSH
14309: CALL_OW 250
14313: PPUSH
14314: LD_VAR 0 1
14318: PUSH
14319: LD_INT 1
14321: ARRAY
14322: PPUSH
14323: CALL_OW 251
14327: PPUSH
14328: LD_INT 70
14330: PPUSH
14331: CALL_OW 495
// end ;
14335: PPOPN 1
14337: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14338: LD_EXP 24
14342: PUSH
14343: LD_EXP 58
14347: AND
14348: IFFALSE 14559
14350: GO 14352
14352: DISABLE
14353: LD_INT 0
14355: PPUSH
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14360: LD_ADDR_VAR 0 5
14364: PUSH
14365: LD_INT 22
14367: PUSH
14368: LD_OWVAR 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: ST_TO_ADDR
// if not tmp then
14396: LD_VAR 0 5
14400: NOT
14401: IFFALSE 14405
// exit ;
14403: GO 14559
// for i in tmp do
14405: LD_ADDR_VAR 0 1
14409: PUSH
14410: LD_VAR 0 5
14414: PUSH
14415: FOR_IN
14416: IFFALSE 14557
// begin d := rand ( 0 , 5 ) ;
14418: LD_ADDR_VAR 0 4
14422: PUSH
14423: LD_INT 0
14425: PPUSH
14426: LD_INT 5
14428: PPUSH
14429: CALL_OW 12
14433: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14434: LD_ADDR_VAR 0 2
14438: PUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 250
14448: PPUSH
14449: LD_VAR 0 4
14453: PPUSH
14454: LD_INT 3
14456: PPUSH
14457: LD_INT 12
14459: PPUSH
14460: CALL_OW 12
14464: PPUSH
14465: CALL_OW 272
14469: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14470: LD_ADDR_VAR 0 3
14474: PUSH
14475: LD_VAR 0 1
14479: PPUSH
14480: CALL_OW 251
14484: PPUSH
14485: LD_VAR 0 4
14489: PPUSH
14490: LD_INT 3
14492: PPUSH
14493: LD_INT 12
14495: PPUSH
14496: CALL_OW 12
14500: PPUSH
14501: CALL_OW 273
14505: ST_TO_ADDR
// if ValidHex ( x , y ) then
14506: LD_VAR 0 2
14510: PPUSH
14511: LD_VAR 0 3
14515: PPUSH
14516: CALL_OW 488
14520: IFFALSE 14555
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14522: LD_VAR 0 1
14526: PPUSH
14527: LD_VAR 0 2
14531: PPUSH
14532: LD_VAR 0 3
14536: PPUSH
14537: LD_INT 3
14539: PPUSH
14540: LD_INT 6
14542: PPUSH
14543: CALL_OW 12
14547: PPUSH
14548: LD_INT 1
14550: PPUSH
14551: CALL_OW 483
// end ;
14555: GO 14415
14557: POP
14558: POP
// end ;
14559: PPOPN 5
14561: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14562: LD_EXP 24
14566: PUSH
14567: LD_EXP 59
14571: AND
14572: IFFALSE 14666
14574: GO 14576
14576: DISABLE
14577: LD_INT 0
14579: PPUSH
14580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: LD_INT 22
14588: PUSH
14589: LD_OWVAR 2
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 32
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 69
14627: ST_TO_ADDR
// if not tmp then
14628: LD_VAR 0 2
14632: NOT
14633: IFFALSE 14637
// exit ;
14635: GO 14666
// for i in tmp do
14637: LD_ADDR_VAR 0 1
14641: PUSH
14642: LD_VAR 0 2
14646: PUSH
14647: FOR_IN
14648: IFFALSE 14664
// SetFuel ( i , 0 ) ;
14650: LD_VAR 0 1
14654: PPUSH
14655: LD_INT 0
14657: PPUSH
14658: CALL_OW 240
14662: GO 14647
14664: POP
14665: POP
// end ;
14666: PPOPN 2
14668: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14669: LD_EXP 24
14673: PUSH
14674: LD_EXP 60
14678: AND
14679: IFFALSE 14745
14681: GO 14683
14683: DISABLE
14684: LD_INT 0
14686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 22
14694: PUSH
14695: LD_OWVAR 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: LD_INT 29
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 69
14722: ST_TO_ADDR
// if not tmp then
14723: LD_VAR 0 1
14727: NOT
14728: IFFALSE 14732
// exit ;
14730: GO 14745
// DestroyUnit ( tmp [ 1 ] ) ;
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: CALL_OW 65
// end ;
14745: PPOPN 1
14747: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14748: LD_EXP 24
14752: PUSH
14753: LD_EXP 62
14757: AND
14758: IFFALSE 14887
14760: GO 14762
14762: DISABLE
14763: LD_INT 0
14765: PPUSH
// begin uc_side := 0 ;
14766: LD_ADDR_OWVAR 20
14770: PUSH
14771: LD_INT 0
14773: ST_TO_ADDR
// uc_nation := nation_arabian ;
14774: LD_ADDR_OWVAR 21
14778: PUSH
14779: LD_INT 2
14781: ST_TO_ADDR
// hc_gallery :=  ;
14782: LD_ADDR_OWVAR 33
14786: PUSH
14787: LD_STRING 
14789: ST_TO_ADDR
// hc_name :=  ;
14790: LD_ADDR_OWVAR 26
14794: PUSH
14795: LD_STRING 
14797: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14798: LD_INT 1
14800: PPUSH
14801: LD_INT 11
14803: PPUSH
14804: LD_INT 10
14806: PPUSH
14807: CALL_OW 380
// un := CreateHuman ;
14811: LD_ADDR_VAR 0 1
14815: PUSH
14816: CALL_OW 44
14820: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14833: LD_INT 35
14835: PPUSH
14836: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14840: LD_VAR 0 1
14844: PPUSH
14845: LD_INT 22
14847: PUSH
14848: LD_OWVAR 2
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: PPUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 74
14871: PPUSH
14872: CALL_OW 115
// until IsDead ( un ) ;
14876: LD_VAR 0 1
14880: PPUSH
14881: CALL_OW 301
14885: IFFALSE 14833
// end ;
14887: PPOPN 1
14889: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14890: LD_EXP 24
14894: PUSH
14895: LD_EXP 64
14899: AND
14900: IFFALSE 14912
14902: GO 14904
14904: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14905: LD_STRING earthquake(getX(game), 0, 32)
14907: PPUSH
14908: CALL_OW 559
14912: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14913: LD_EXP 24
14917: PUSH
14918: LD_EXP 65
14922: AND
14923: IFFALSE 15014
14925: GO 14927
14927: DISABLE
14928: LD_INT 0
14930: PPUSH
// begin enable ;
14931: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_OWVAR 2
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 21
14951: PUSH
14952: LD_INT 2
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 33
14961: PUSH
14962: LD_INT 3
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL_OW 69
14978: ST_TO_ADDR
// if not tmp then
14979: LD_VAR 0 1
14983: NOT
14984: IFFALSE 14988
// exit ;
14986: GO 15014
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14988: LD_VAR 0 1
14992: PUSH
14993: LD_INT 1
14995: PPUSH
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 12
15005: ARRAY
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 234
// end ;
15014: PPOPN 1
15016: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15017: LD_EXP 24
15021: PUSH
15022: LD_EXP 66
15026: AND
15027: IFFALSE 15168
15029: GO 15031
15031: DISABLE
15032: LD_INT 0
15034: PPUSH
15035: PPUSH
15036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15037: LD_ADDR_VAR 0 3
15041: PUSH
15042: LD_INT 22
15044: PUSH
15045: LD_OWVAR 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 25
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PPUSH
15068: CALL_OW 69
15072: ST_TO_ADDR
// if not tmp then
15073: LD_VAR 0 3
15077: NOT
15078: IFFALSE 15082
// exit ;
15080: GO 15168
// un := tmp [ rand ( 1 , tmp ) ] ;
15082: LD_ADDR_VAR 0 2
15086: PUSH
15087: LD_VAR 0 3
15091: PUSH
15092: LD_INT 1
15094: PPUSH
15095: LD_VAR 0 3
15099: PPUSH
15100: CALL_OW 12
15104: ARRAY
15105: ST_TO_ADDR
// if Crawls ( un ) then
15106: LD_VAR 0 2
15110: PPUSH
15111: CALL_OW 318
15115: IFFALSE 15126
// ComWalk ( un ) ;
15117: LD_VAR 0 2
15121: PPUSH
15122: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15126: LD_VAR 0 2
15130: PPUSH
15131: LD_INT 9
15133: PPUSH
15134: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15138: LD_INT 28
15140: PPUSH
15141: LD_OWVAR 2
15145: PPUSH
15146: LD_INT 2
15148: PPUSH
15149: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15153: LD_INT 29
15155: PPUSH
15156: LD_OWVAR 2
15160: PPUSH
15161: LD_INT 2
15163: PPUSH
15164: CALL_OW 322
// end ;
15168: PPOPN 3
15170: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15171: LD_EXP 24
15175: PUSH
15176: LD_EXP 67
15180: AND
15181: IFFALSE 15292
15183: GO 15185
15185: DISABLE
15186: LD_INT 0
15188: PPUSH
15189: PPUSH
15190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15191: LD_ADDR_VAR 0 3
15195: PUSH
15196: LD_INT 22
15198: PUSH
15199: LD_OWVAR 2
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PPUSH
15222: CALL_OW 69
15226: ST_TO_ADDR
// if not tmp then
15227: LD_VAR 0 3
15231: NOT
15232: IFFALSE 15236
// exit ;
15234: GO 15292
// un := tmp [ rand ( 1 , tmp ) ] ;
15236: LD_ADDR_VAR 0 2
15240: PUSH
15241: LD_VAR 0 3
15245: PUSH
15246: LD_INT 1
15248: PPUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: CALL_OW 12
15258: ARRAY
15259: ST_TO_ADDR
// if Crawls ( un ) then
15260: LD_VAR 0 2
15264: PPUSH
15265: CALL_OW 318
15269: IFFALSE 15280
// ComWalk ( un ) ;
15271: LD_VAR 0 2
15275: PPUSH
15276: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15280: LD_VAR 0 2
15284: PPUSH
15285: LD_INT 8
15287: PPUSH
15288: CALL_OW 336
// end ;
15292: PPOPN 3
15294: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15295: LD_EXP 24
15299: PUSH
15300: LD_EXP 68
15304: AND
15305: IFFALSE 15449
15307: GO 15309
15309: DISABLE
15310: LD_INT 0
15312: PPUSH
15313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15314: LD_ADDR_VAR 0 2
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_OWVAR 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 2
15343: PUSH
15344: LD_INT 34
15346: PUSH
15347: LD_INT 12
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 34
15356: PUSH
15357: LD_INT 51
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 34
15366: PUSH
15367: LD_INT 32
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: PPUSH
15385: CALL_OW 69
15389: ST_TO_ADDR
// if not tmp then
15390: LD_VAR 0 2
15394: NOT
15395: IFFALSE 15399
// exit ;
15397: GO 15449
// for i in tmp do
15399: LD_ADDR_VAR 0 1
15403: PUSH
15404: LD_VAR 0 2
15408: PUSH
15409: FOR_IN
15410: IFFALSE 15447
// if GetCargo ( i , mat_artifact ) = 0 then
15412: LD_VAR 0 1
15416: PPUSH
15417: LD_INT 4
15419: PPUSH
15420: CALL_OW 289
15424: PUSH
15425: LD_INT 0
15427: EQUAL
15428: IFFALSE 15445
// SetCargo ( i , mat_siberit , 100 ) ;
15430: LD_VAR 0 1
15434: PPUSH
15435: LD_INT 3
15437: PPUSH
15438: LD_INT 100
15440: PPUSH
15441: CALL_OW 290
15445: GO 15409
15447: POP
15448: POP
// end ;
15449: PPOPN 2
15451: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15452: LD_EXP 24
15456: PUSH
15457: LD_EXP 69
15461: AND
15462: IFFALSE 15645
15464: GO 15466
15466: DISABLE
15467: LD_INT 0
15469: PPUSH
15470: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_OWVAR 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PPUSH
15488: CALL_OW 69
15492: ST_TO_ADDR
// if not tmp then
15493: LD_VAR 0 2
15497: NOT
15498: IFFALSE 15502
// exit ;
15500: GO 15645
// for i := 1 to 2 do
15502: LD_ADDR_VAR 0 1
15506: PUSH
15507: DOUBLE
15508: LD_INT 1
15510: DEC
15511: ST_TO_ADDR
15512: LD_INT 2
15514: PUSH
15515: FOR_TO
15516: IFFALSE 15643
// begin uc_side := your_side ;
15518: LD_ADDR_OWVAR 20
15522: PUSH
15523: LD_OWVAR 2
15527: ST_TO_ADDR
// uc_nation := nation_american ;
15528: LD_ADDR_OWVAR 21
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// vc_chassis := us_morphling ;
15536: LD_ADDR_OWVAR 37
15540: PUSH
15541: LD_INT 5
15543: ST_TO_ADDR
// vc_engine := engine_siberite ;
15544: LD_ADDR_OWVAR 39
15548: PUSH
15549: LD_INT 3
15551: ST_TO_ADDR
// vc_control := control_computer ;
15552: LD_ADDR_OWVAR 38
15556: PUSH
15557: LD_INT 3
15559: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15560: LD_ADDR_OWVAR 40
15564: PUSH
15565: LD_INT 10
15567: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15568: LD_VAR 0 2
15572: PUSH
15573: LD_INT 1
15575: ARRAY
15576: PPUSH
15577: CALL_OW 310
15581: NOT
15582: IFFALSE 15629
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15584: CALL_OW 45
15588: PPUSH
15589: LD_VAR 0 2
15593: PUSH
15594: LD_INT 1
15596: ARRAY
15597: PPUSH
15598: CALL_OW 250
15602: PPUSH
15603: LD_VAR 0 2
15607: PUSH
15608: LD_INT 1
15610: ARRAY
15611: PPUSH
15612: CALL_OW 251
15616: PPUSH
15617: LD_INT 12
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: CALL_OW 50
15627: GO 15641
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15629: CALL_OW 45
15633: PPUSH
15634: LD_INT 1
15636: PPUSH
15637: CALL_OW 51
// end ;
15641: GO 15515
15643: POP
15644: POP
// end ;
15645: PPOPN 2
15647: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15648: LD_EXP 24
15652: PUSH
15653: LD_EXP 70
15657: AND
15658: IFFALSE 15880
15660: GO 15662
15662: DISABLE
15663: LD_INT 0
15665: PPUSH
15666: PPUSH
15667: PPUSH
15668: PPUSH
15669: PPUSH
15670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15671: LD_ADDR_VAR 0 6
15675: PUSH
15676: LD_INT 22
15678: PUSH
15679: LD_OWVAR 2
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 21
15690: PUSH
15691: LD_INT 1
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 3
15700: PUSH
15701: LD_INT 23
15703: PUSH
15704: LD_INT 0
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: PPUSH
15720: CALL_OW 69
15724: ST_TO_ADDR
// if not tmp then
15725: LD_VAR 0 6
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15880
// s1 := rand ( 1 , 4 ) ;
15734: LD_ADDR_VAR 0 2
15738: PUSH
15739: LD_INT 1
15741: PPUSH
15742: LD_INT 4
15744: PPUSH
15745: CALL_OW 12
15749: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15750: LD_ADDR_VAR 0 4
15754: PUSH
15755: LD_VAR 0 6
15759: PUSH
15760: LD_INT 1
15762: ARRAY
15763: PPUSH
15764: LD_VAR 0 2
15768: PPUSH
15769: CALL_OW 259
15773: ST_TO_ADDR
// if s1 = 1 then
15774: LD_VAR 0 2
15778: PUSH
15779: LD_INT 1
15781: EQUAL
15782: IFFALSE 15802
// s2 := rand ( 2 , 4 ) else
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_INT 2
15791: PPUSH
15792: LD_INT 4
15794: PPUSH
15795: CALL_OW 12
15799: ST_TO_ADDR
15800: GO 15810
// s2 := 1 ;
15802: LD_ADDR_VAR 0 3
15806: PUSH
15807: LD_INT 1
15809: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15810: LD_ADDR_VAR 0 5
15814: PUSH
15815: LD_VAR 0 6
15819: PUSH
15820: LD_INT 1
15822: ARRAY
15823: PPUSH
15824: LD_VAR 0 3
15828: PPUSH
15829: CALL_OW 259
15833: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15834: LD_VAR 0 6
15838: PUSH
15839: LD_INT 1
15841: ARRAY
15842: PPUSH
15843: LD_VAR 0 2
15847: PPUSH
15848: LD_VAR 0 5
15852: PPUSH
15853: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15857: LD_VAR 0 6
15861: PUSH
15862: LD_INT 1
15864: ARRAY
15865: PPUSH
15866: LD_VAR 0 3
15870: PPUSH
15871: LD_VAR 0 4
15875: PPUSH
15876: CALL_OW 237
// end ;
15880: PPOPN 6
15882: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15883: LD_EXP 24
15887: PUSH
15888: LD_EXP 71
15892: AND
15893: IFFALSE 15972
15895: GO 15897
15897: DISABLE
15898: LD_INT 0
15900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15901: LD_ADDR_VAR 0 1
15905: PUSH
15906: LD_INT 22
15908: PUSH
15909: LD_OWVAR 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 30
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 69
15936: ST_TO_ADDR
// if not tmp then
15937: LD_VAR 0 1
15941: NOT
15942: IFFALSE 15946
// exit ;
15944: GO 15972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15946: LD_VAR 0 1
15950: PUSH
15951: LD_INT 1
15953: PPUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 12
15963: ARRAY
15964: PPUSH
15965: LD_INT 1
15967: PPUSH
15968: CALL_OW 234
// end ;
15972: PPOPN 1
15974: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15975: LD_EXP 24
15979: PUSH
15980: LD_EXP 72
15984: AND
15985: IFFALSE 16097
15987: GO 15989
15989: DISABLE
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: LD_INT 22
16001: PUSH
16002: LD_OWVAR 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: LD_INT 30
16016: PUSH
16017: LD_INT 27
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 30
16026: PUSH
16027: LD_INT 26
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 30
16036: PUSH
16037: LD_INT 28
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PPUSH
16054: CALL_OW 69
16058: ST_TO_ADDR
// if not tmp then
16059: LD_VAR 0 2
16063: NOT
16064: IFFALSE 16068
// exit ;
16066: GO 16097
// for i in tmp do
16068: LD_ADDR_VAR 0 1
16072: PUSH
16073: LD_VAR 0 2
16077: PUSH
16078: FOR_IN
16079: IFFALSE 16095
// SetLives ( i , 1 ) ;
16081: LD_VAR 0 1
16085: PPUSH
16086: LD_INT 1
16088: PPUSH
16089: CALL_OW 234
16093: GO 16078
16095: POP
16096: POP
// end ;
16097: PPOPN 2
16099: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16100: LD_EXP 24
16104: PUSH
16105: LD_EXP 73
16109: AND
16110: IFFALSE 16397
16112: GO 16114
16114: DISABLE
16115: LD_INT 0
16117: PPUSH
16118: PPUSH
16119: PPUSH
// begin i := rand ( 1 , 7 ) ;
16120: LD_ADDR_VAR 0 1
16124: PUSH
16125: LD_INT 1
16127: PPUSH
16128: LD_INT 7
16130: PPUSH
16131: CALL_OW 12
16135: ST_TO_ADDR
// case i of 1 :
16136: LD_VAR 0 1
16140: PUSH
16141: LD_INT 1
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16159
16149: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16150: LD_STRING earthquake(getX(game), 0, 32)
16152: PPUSH
16153: CALL_OW 559
16157: GO 16397
16159: LD_INT 2
16161: DOUBLE
16162: EQUAL
16163: IFTRUE 16167
16165: GO 16181
16167: POP
// begin ToLua ( displayStucuk(); ) ;
16168: LD_STRING displayStucuk();
16170: PPUSH
16171: CALL_OW 559
// ResetFog ;
16175: CALL_OW 335
// end ; 3 :
16179: GO 16397
16181: LD_INT 3
16183: DOUBLE
16184: EQUAL
16185: IFTRUE 16189
16187: GO 16293
16189: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16190: LD_ADDR_VAR 0 2
16194: PUSH
16195: LD_INT 22
16197: PUSH
16198: LD_OWVAR 2
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 25
16209: PUSH
16210: LD_INT 1
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: ST_TO_ADDR
// if not tmp then
16226: LD_VAR 0 2
16230: NOT
16231: IFFALSE 16235
// exit ;
16233: GO 16397
// un := tmp [ rand ( 1 , tmp ) ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_VAR 0 2
16244: PUSH
16245: LD_INT 1
16247: PPUSH
16248: LD_VAR 0 2
16252: PPUSH
16253: CALL_OW 12
16257: ARRAY
16258: ST_TO_ADDR
// if Crawls ( un ) then
16259: LD_VAR 0 3
16263: PPUSH
16264: CALL_OW 318
16268: IFFALSE 16279
// ComWalk ( un ) ;
16270: LD_VAR 0 3
16274: PPUSH
16275: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 8
16286: PPUSH
16287: CALL_OW 336
// end ; 4 :
16291: GO 16397
16293: LD_INT 4
16295: DOUBLE
16296: EQUAL
16297: IFTRUE 16301
16299: GO 16375
16301: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_INT 22
16309: PUSH
16310: LD_OWVAR 2
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 29
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 69
16337: ST_TO_ADDR
// if not tmp then
16338: LD_VAR 0 2
16342: NOT
16343: IFFALSE 16347
// exit ;
16345: GO 16397
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16347: LD_VAR 0 2
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16360: LD_VAR 0 2
16364: PUSH
16365: LD_INT 1
16367: ARRAY
16368: PPUSH
16369: CALL_OW 65
// end ; 5 .. 7 :
16373: GO 16397
16375: LD_INT 5
16377: DOUBLE
16378: GREATEREQUAL
16379: IFFALSE 16387
16381: LD_INT 7
16383: DOUBLE
16384: LESSEQUAL
16385: IFTRUE 16389
16387: GO 16396
16389: POP
// StreamSibBomb ; end ;
16390: CALL 12634 0 0
16394: GO 16397
16396: POP
// end ;
16397: PPOPN 3
16399: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16400: LD_EXP 24
16404: PUSH
16405: LD_EXP 74
16409: AND
16410: IFFALSE 16566
16412: GO 16414
16414: DISABLE
16415: LD_INT 0
16417: PPUSH
16418: PPUSH
16419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16420: LD_ADDR_VAR 0 2
16424: PUSH
16425: LD_INT 81
16427: PUSH
16428: LD_OWVAR 2
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 2
16439: PUSH
16440: LD_INT 21
16442: PUSH
16443: LD_INT 1
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 21
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: ST_TO_ADDR
// if not tmp then
16474: LD_VAR 0 2
16478: NOT
16479: IFFALSE 16483
// exit ;
16481: GO 16566
// p := 0 ;
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_INT 0
16490: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16491: LD_INT 35
16493: PPUSH
16494: CALL_OW 67
// p := p + 1 ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_VAR 0 3
16507: PUSH
16508: LD_INT 1
16510: PLUS
16511: ST_TO_ADDR
// for i in tmp do
16512: LD_ADDR_VAR 0 1
16516: PUSH
16517: LD_VAR 0 2
16521: PUSH
16522: FOR_IN
16523: IFFALSE 16554
// if GetLives ( i ) < 1000 then
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 256
16534: PUSH
16535: LD_INT 1000
16537: LESS
16538: IFFALSE 16552
// SetLives ( i , 1000 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 1000
16547: PPUSH
16548: CALL_OW 234
16552: GO 16522
16554: POP
16555: POP
// until p > 20 ;
16556: LD_VAR 0 3
16560: PUSH
16561: LD_INT 20
16563: GREATER
16564: IFFALSE 16491
// end ;
16566: PPOPN 3
16568: END
// every 0 0$1 trigger StreamModeActive and sTime do
16569: LD_EXP 24
16573: PUSH
16574: LD_EXP 75
16578: AND
16579: IFFALSE 16614
16581: GO 16583
16583: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16584: LD_INT 28
16586: PPUSH
16587: LD_OWVAR 2
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16599: LD_INT 30
16601: PPUSH
16602: LD_OWVAR 2
16606: PPUSH
16607: LD_INT 2
16609: PPUSH
16610: CALL_OW 322
// end ;
16614: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16615: LD_EXP 24
16619: PUSH
16620: LD_EXP 76
16624: AND
16625: IFFALSE 16746
16627: GO 16629
16629: DISABLE
16630: LD_INT 0
16632: PPUSH
16633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16634: LD_ADDR_VAR 0 2
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_OWVAR 2
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 21
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 3
16663: PUSH
16664: LD_INT 23
16666: PUSH
16667: LD_INT 0
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 69
16687: ST_TO_ADDR
// if not tmp then
16688: LD_VAR 0 2
16692: NOT
16693: IFFALSE 16697
// exit ;
16695: GO 16746
// for i in tmp do
16697: LD_ADDR_VAR 0 1
16701: PUSH
16702: LD_VAR 0 2
16706: PUSH
16707: FOR_IN
16708: IFFALSE 16744
// begin if Crawls ( i ) then
16710: LD_VAR 0 1
16714: PPUSH
16715: CALL_OW 318
16719: IFFALSE 16730
// ComWalk ( i ) ;
16721: LD_VAR 0 1
16725: PPUSH
16726: CALL_OW 138
// SetClass ( i , 2 ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_INT 2
16737: PPUSH
16738: CALL_OW 336
// end ;
16742: GO 16707
16744: POP
16745: POP
// end ;
16746: PPOPN 2
16748: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16749: LD_EXP 24
16753: PUSH
16754: LD_EXP 77
16758: AND
16759: IFFALSE 17047
16761: GO 16763
16763: DISABLE
16764: LD_INT 0
16766: PPUSH
16767: PPUSH
16768: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16769: LD_OWVAR 2
16773: PPUSH
16774: LD_INT 9
16776: PPUSH
16777: LD_INT 1
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16787: LD_INT 9
16789: PPUSH
16790: LD_OWVAR 2
16794: PPUSH
16795: CALL_OW 343
// uc_side := 9 ;
16799: LD_ADDR_OWVAR 20
16803: PUSH
16804: LD_INT 9
16806: ST_TO_ADDR
// uc_nation := 2 ;
16807: LD_ADDR_OWVAR 21
16811: PUSH
16812: LD_INT 2
16814: ST_TO_ADDR
// hc_name := Dark Warrior ;
16815: LD_ADDR_OWVAR 26
16819: PUSH
16820: LD_STRING Dark Warrior
16822: ST_TO_ADDR
// hc_gallery :=  ;
16823: LD_ADDR_OWVAR 33
16827: PUSH
16828: LD_STRING 
16830: ST_TO_ADDR
// hc_noskilllimit := true ;
16831: LD_ADDR_OWVAR 76
16835: PUSH
16836: LD_INT 1
16838: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16839: LD_ADDR_OWVAR 31
16843: PUSH
16844: LD_INT 30
16846: PUSH
16847: LD_INT 30
16849: PUSH
16850: LD_INT 30
16852: PUSH
16853: LD_INT 30
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: ST_TO_ADDR
// un := CreateHuman ;
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: CALL_OW 44
16871: ST_TO_ADDR
// hc_noskilllimit := false ;
16872: LD_ADDR_OWVAR 76
16876: PUSH
16877: LD_INT 0
16879: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16880: LD_VAR 0 3
16884: PPUSH
16885: LD_INT 1
16887: PPUSH
16888: CALL_OW 51
// ToLua ( playRanger() ) ;
16892: LD_STRING playRanger()
16894: PPUSH
16895: CALL_OW 559
// p := 0 ;
16899: LD_ADDR_VAR 0 2
16903: PUSH
16904: LD_INT 0
16906: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16907: LD_INT 35
16909: PPUSH
16910: CALL_OW 67
// p := p + 1 ;
16914: LD_ADDR_VAR 0 2
16918: PUSH
16919: LD_VAR 0 2
16923: PUSH
16924: LD_INT 1
16926: PLUS
16927: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16928: LD_VAR 0 3
16932: PPUSH
16933: CALL_OW 256
16937: PUSH
16938: LD_INT 1000
16940: LESS
16941: IFFALSE 16955
// SetLives ( un , 1000 ) ;
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 1000
16950: PPUSH
16951: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16955: LD_VAR 0 3
16959: PPUSH
16960: LD_INT 81
16962: PUSH
16963: LD_OWVAR 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 91
16974: PUSH
16975: LD_VAR 0 3
16979: PUSH
16980: LD_INT 30
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PPUSH
16992: CALL_OW 69
16996: PPUSH
16997: LD_VAR 0 3
17001: PPUSH
17002: CALL_OW 74
17006: PPUSH
17007: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17011: LD_VAR 0 2
17015: PUSH
17016: LD_INT 80
17018: GREATER
17019: PUSH
17020: LD_VAR 0 3
17024: PPUSH
17025: CALL_OW 301
17029: OR
17030: IFFALSE 16907
// if un then
17032: LD_VAR 0 3
17036: IFFALSE 17047
// RemoveUnit ( un ) ;
17038: LD_VAR 0 3
17042: PPUSH
17043: CALL_OW 64
// end ;
17047: PPOPN 3
17049: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17050: LD_EXP 78
17054: IFFALSE 17170
17056: GO 17058
17058: DISABLE
17059: LD_INT 0
17061: PPUSH
17062: PPUSH
17063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17064: LD_ADDR_VAR 0 2
17068: PUSH
17069: LD_INT 81
17071: PUSH
17072: LD_OWVAR 2
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 21
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PPUSH
17095: CALL_OW 69
17099: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17100: LD_STRING playComputer()
17102: PPUSH
17103: CALL_OW 559
// if not tmp then
17107: LD_VAR 0 2
17111: NOT
17112: IFFALSE 17116
// exit ;
17114: GO 17170
// for i in tmp do
17116: LD_ADDR_VAR 0 1
17120: PUSH
17121: LD_VAR 0 2
17125: PUSH
17126: FOR_IN
17127: IFFALSE 17168
// for j := 1 to 4 do
17129: LD_ADDR_VAR 0 3
17133: PUSH
17134: DOUBLE
17135: LD_INT 1
17137: DEC
17138: ST_TO_ADDR
17139: LD_INT 4
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17164
// SetSkill ( i , j , 10 ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_INT 10
17157: PPUSH
17158: CALL_OW 237
17162: GO 17142
17164: POP
17165: POP
17166: GO 17126
17168: POP
17169: POP
// end ;
17170: PPOPN 3
17172: END
// every 0 0$1 trigger s30 do var i , tmp ;
17173: LD_EXP 79
17177: IFFALSE 17246
17179: GO 17181
17181: DISABLE
17182: LD_INT 0
17184: PPUSH
17185: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17186: LD_ADDR_VAR 0 2
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_OWVAR 2
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: ST_TO_ADDR
// if not tmp then
17208: LD_VAR 0 2
17212: NOT
17213: IFFALSE 17217
// exit ;
17215: GO 17246
// for i in tmp do
17217: LD_ADDR_VAR 0 1
17221: PUSH
17222: LD_VAR 0 2
17226: PUSH
17227: FOR_IN
17228: IFFALSE 17244
// SetLives ( i , 300 ) ;
17230: LD_VAR 0 1
17234: PPUSH
17235: LD_INT 300
17237: PPUSH
17238: CALL_OW 234
17242: GO 17227
17244: POP
17245: POP
// end ;
17246: PPOPN 2
17248: END
// every 0 0$1 trigger s60 do var i , tmp ;
17249: LD_EXP 80
17253: IFFALSE 17322
17255: GO 17257
17257: DISABLE
17258: LD_INT 0
17260: PPUSH
17261: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17262: LD_ADDR_VAR 0 2
17266: PUSH
17267: LD_INT 22
17269: PUSH
17270: LD_OWVAR 2
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL_OW 69
17283: ST_TO_ADDR
// if not tmp then
17284: LD_VAR 0 2
17288: NOT
17289: IFFALSE 17293
// exit ;
17291: GO 17322
// for i in tmp do
17293: LD_ADDR_VAR 0 1
17297: PUSH
17298: LD_VAR 0 2
17302: PUSH
17303: FOR_IN
17304: IFFALSE 17320
// SetLives ( i , 600 ) ;
17306: LD_VAR 0 1
17310: PPUSH
17311: LD_INT 600
17313: PPUSH
17314: CALL_OW 234
17318: GO 17303
17320: POP
17321: POP
// end ;
17322: PPOPN 2
17324: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17325: LD_INT 0
17327: PPUSH
// case cmd of 301 :
17328: LD_VAR 0 1
17332: PUSH
17333: LD_INT 301
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17373
17341: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17342: LD_VAR 0 6
17346: PPUSH
17347: LD_VAR 0 7
17351: PPUSH
17352: LD_VAR 0 8
17356: PPUSH
17357: LD_VAR 0 4
17361: PPUSH
17362: LD_VAR 0 5
17366: PPUSH
17367: CALL 18574 0 5
17371: GO 17494
17373: LD_INT 302
17375: DOUBLE
17376: EQUAL
17377: IFTRUE 17381
17379: GO 17418
17381: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17382: LD_VAR 0 6
17386: PPUSH
17387: LD_VAR 0 7
17391: PPUSH
17392: LD_VAR 0 8
17396: PPUSH
17397: LD_VAR 0 9
17401: PPUSH
17402: LD_VAR 0 4
17406: PPUSH
17407: LD_VAR 0 5
17411: PPUSH
17412: CALL 18665 0 6
17416: GO 17494
17418: LD_INT 303
17420: DOUBLE
17421: EQUAL
17422: IFTRUE 17426
17424: GO 17463
17426: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17427: LD_VAR 0 6
17431: PPUSH
17432: LD_VAR 0 7
17436: PPUSH
17437: LD_VAR 0 8
17441: PPUSH
17442: LD_VAR 0 9
17446: PPUSH
17447: LD_VAR 0 4
17451: PPUSH
17452: LD_VAR 0 5
17456: PPUSH
17457: CALL 17499 0 6
17461: GO 17494
17463: LD_INT 304
17465: DOUBLE
17466: EQUAL
17467: IFTRUE 17471
17469: GO 17493
17471: POP
// hHackTeleport ( unit , x , y ) ; end ;
17472: LD_VAR 0 2
17476: PPUSH
17477: LD_VAR 0 4
17481: PPUSH
17482: LD_VAR 0 5
17486: PPUSH
17487: CALL 19258 0 3
17491: GO 17494
17493: POP
// end ;
17494: LD_VAR 0 12
17498: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17503: LD_VAR 0 1
17507: PUSH
17508: LD_INT 1
17510: LESS
17511: PUSH
17512: LD_VAR 0 1
17516: PUSH
17517: LD_INT 3
17519: GREATER
17520: OR
17521: PUSH
17522: LD_VAR 0 5
17526: PPUSH
17527: LD_VAR 0 6
17531: PPUSH
17532: CALL_OW 428
17536: OR
17537: IFFALSE 17541
// exit ;
17539: GO 18261
// uc_side := your_side ;
17541: LD_ADDR_OWVAR 20
17545: PUSH
17546: LD_OWVAR 2
17550: ST_TO_ADDR
// uc_nation := nation ;
17551: LD_ADDR_OWVAR 21
17555: PUSH
17556: LD_VAR 0 1
17560: ST_TO_ADDR
// bc_level = 1 ;
17561: LD_ADDR_OWVAR 43
17565: PUSH
17566: LD_INT 1
17568: ST_TO_ADDR
// case btype of 1 :
17569: LD_VAR 0 2
17573: PUSH
17574: LD_INT 1
17576: DOUBLE
17577: EQUAL
17578: IFTRUE 17582
17580: GO 17593
17582: POP
// bc_type := b_depot ; 2 :
17583: LD_ADDR_OWVAR 42
17587: PUSH
17588: LD_INT 0
17590: ST_TO_ADDR
17591: GO 18205
17593: LD_INT 2
17595: DOUBLE
17596: EQUAL
17597: IFTRUE 17601
17599: GO 17612
17601: POP
// bc_type := b_warehouse ; 3 :
17602: LD_ADDR_OWVAR 42
17606: PUSH
17607: LD_INT 1
17609: ST_TO_ADDR
17610: GO 18205
17612: LD_INT 3
17614: DOUBLE
17615: EQUAL
17616: IFTRUE 17620
17618: GO 17631
17620: POP
// bc_type := b_lab ; 4 .. 9 :
17621: LD_ADDR_OWVAR 42
17625: PUSH
17626: LD_INT 6
17628: ST_TO_ADDR
17629: GO 18205
17631: LD_INT 4
17633: DOUBLE
17634: GREATEREQUAL
17635: IFFALSE 17643
17637: LD_INT 9
17639: DOUBLE
17640: LESSEQUAL
17641: IFTRUE 17645
17643: GO 17697
17645: POP
// begin bc_type := b_lab_half ;
17646: LD_ADDR_OWVAR 42
17650: PUSH
17651: LD_INT 7
17653: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17654: LD_ADDR_OWVAR 44
17658: PUSH
17659: LD_INT 10
17661: PUSH
17662: LD_INT 11
17664: PUSH
17665: LD_INT 12
17667: PUSH
17668: LD_INT 15
17670: PUSH
17671: LD_INT 14
17673: PUSH
17674: LD_INT 13
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: PUSH
17685: LD_VAR 0 2
17689: PUSH
17690: LD_INT 3
17692: MINUS
17693: ARRAY
17694: ST_TO_ADDR
// end ; 10 .. 13 :
17695: GO 18205
17697: LD_INT 10
17699: DOUBLE
17700: GREATEREQUAL
17701: IFFALSE 17709
17703: LD_INT 13
17705: DOUBLE
17706: LESSEQUAL
17707: IFTRUE 17711
17709: GO 17788
17711: POP
// begin bc_type := b_lab_full ;
17712: LD_ADDR_OWVAR 42
17716: PUSH
17717: LD_INT 8
17719: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17720: LD_ADDR_OWVAR 44
17724: PUSH
17725: LD_INT 10
17727: PUSH
17728: LD_INT 12
17730: PUSH
17731: LD_INT 14
17733: PUSH
17734: LD_INT 13
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: LD_INT 9
17750: MINUS
17751: ARRAY
17752: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17753: LD_ADDR_OWVAR 45
17757: PUSH
17758: LD_INT 11
17760: PUSH
17761: LD_INT 15
17763: PUSH
17764: LD_INT 12
17766: PUSH
17767: LD_INT 15
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: LD_VAR 0 2
17780: PUSH
17781: LD_INT 9
17783: MINUS
17784: ARRAY
17785: ST_TO_ADDR
// end ; 14 :
17786: GO 18205
17788: LD_INT 14
17790: DOUBLE
17791: EQUAL
17792: IFTRUE 17796
17794: GO 17807
17796: POP
// bc_type := b_workshop ; 15 :
17797: LD_ADDR_OWVAR 42
17801: PUSH
17802: LD_INT 2
17804: ST_TO_ADDR
17805: GO 18205
17807: LD_INT 15
17809: DOUBLE
17810: EQUAL
17811: IFTRUE 17815
17813: GO 17826
17815: POP
// bc_type := b_factory ; 16 :
17816: LD_ADDR_OWVAR 42
17820: PUSH
17821: LD_INT 3
17823: ST_TO_ADDR
17824: GO 18205
17826: LD_INT 16
17828: DOUBLE
17829: EQUAL
17830: IFTRUE 17834
17832: GO 17845
17834: POP
// bc_type := b_ext_gun ; 17 :
17835: LD_ADDR_OWVAR 42
17839: PUSH
17840: LD_INT 17
17842: ST_TO_ADDR
17843: GO 18205
17845: LD_INT 17
17847: DOUBLE
17848: EQUAL
17849: IFTRUE 17853
17851: GO 17881
17853: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17854: LD_ADDR_OWVAR 42
17858: PUSH
17859: LD_INT 19
17861: PUSH
17862: LD_INT 23
17864: PUSH
17865: LD_INT 19
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: LIST
17872: PUSH
17873: LD_VAR 0 1
17877: ARRAY
17878: ST_TO_ADDR
17879: GO 18205
17881: LD_INT 18
17883: DOUBLE
17884: EQUAL
17885: IFTRUE 17889
17887: GO 17900
17889: POP
// bc_type := b_ext_radar ; 19 :
17890: LD_ADDR_OWVAR 42
17894: PUSH
17895: LD_INT 20
17897: ST_TO_ADDR
17898: GO 18205
17900: LD_INT 19
17902: DOUBLE
17903: EQUAL
17904: IFTRUE 17908
17906: GO 17919
17908: POP
// bc_type := b_ext_radio ; 20 :
17909: LD_ADDR_OWVAR 42
17913: PUSH
17914: LD_INT 22
17916: ST_TO_ADDR
17917: GO 18205
17919: LD_INT 20
17921: DOUBLE
17922: EQUAL
17923: IFTRUE 17927
17925: GO 17938
17927: POP
// bc_type := b_ext_siberium ; 21 :
17928: LD_ADDR_OWVAR 42
17932: PUSH
17933: LD_INT 21
17935: ST_TO_ADDR
17936: GO 18205
17938: LD_INT 21
17940: DOUBLE
17941: EQUAL
17942: IFTRUE 17946
17944: GO 17957
17946: POP
// bc_type := b_ext_computer ; 22 :
17947: LD_ADDR_OWVAR 42
17951: PUSH
17952: LD_INT 24
17954: ST_TO_ADDR
17955: GO 18205
17957: LD_INT 22
17959: DOUBLE
17960: EQUAL
17961: IFTRUE 17965
17963: GO 17976
17965: POP
// bc_type := b_ext_track ; 23 :
17966: LD_ADDR_OWVAR 42
17970: PUSH
17971: LD_INT 16
17973: ST_TO_ADDR
17974: GO 18205
17976: LD_INT 23
17978: DOUBLE
17979: EQUAL
17980: IFTRUE 17984
17982: GO 17995
17984: POP
// bc_type := b_ext_laser ; 24 :
17985: LD_ADDR_OWVAR 42
17989: PUSH
17990: LD_INT 25
17992: ST_TO_ADDR
17993: GO 18205
17995: LD_INT 24
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18014
18003: POP
// bc_type := b_control_tower ; 25 :
18004: LD_ADDR_OWVAR 42
18008: PUSH
18009: LD_INT 36
18011: ST_TO_ADDR
18012: GO 18205
18014: LD_INT 25
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18033
18022: POP
// bc_type := b_breastwork ; 26 :
18023: LD_ADDR_OWVAR 42
18027: PUSH
18028: LD_INT 31
18030: ST_TO_ADDR
18031: GO 18205
18033: LD_INT 26
18035: DOUBLE
18036: EQUAL
18037: IFTRUE 18041
18039: GO 18052
18041: POP
// bc_type := b_bunker ; 27 :
18042: LD_ADDR_OWVAR 42
18046: PUSH
18047: LD_INT 32
18049: ST_TO_ADDR
18050: GO 18205
18052: LD_INT 27
18054: DOUBLE
18055: EQUAL
18056: IFTRUE 18060
18058: GO 18071
18060: POP
// bc_type := b_turret ; 28 :
18061: LD_ADDR_OWVAR 42
18065: PUSH
18066: LD_INT 33
18068: ST_TO_ADDR
18069: GO 18205
18071: LD_INT 28
18073: DOUBLE
18074: EQUAL
18075: IFTRUE 18079
18077: GO 18090
18079: POP
// bc_type := b_armoury ; 29 :
18080: LD_ADDR_OWVAR 42
18084: PUSH
18085: LD_INT 4
18087: ST_TO_ADDR
18088: GO 18205
18090: LD_INT 29
18092: DOUBLE
18093: EQUAL
18094: IFTRUE 18098
18096: GO 18109
18098: POP
// bc_type := b_barracks ; 30 :
18099: LD_ADDR_OWVAR 42
18103: PUSH
18104: LD_INT 5
18106: ST_TO_ADDR
18107: GO 18205
18109: LD_INT 30
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18128
18117: POP
// bc_type := b_solar_power ; 31 :
18118: LD_ADDR_OWVAR 42
18122: PUSH
18123: LD_INT 27
18125: ST_TO_ADDR
18126: GO 18205
18128: LD_INT 31
18130: DOUBLE
18131: EQUAL
18132: IFTRUE 18136
18134: GO 18147
18136: POP
// bc_type := b_oil_power ; 32 :
18137: LD_ADDR_OWVAR 42
18141: PUSH
18142: LD_INT 26
18144: ST_TO_ADDR
18145: GO 18205
18147: LD_INT 32
18149: DOUBLE
18150: EQUAL
18151: IFTRUE 18155
18153: GO 18166
18155: POP
// bc_type := b_siberite_power ; 33 :
18156: LD_ADDR_OWVAR 42
18160: PUSH
18161: LD_INT 28
18163: ST_TO_ADDR
18164: GO 18205
18166: LD_INT 33
18168: DOUBLE
18169: EQUAL
18170: IFTRUE 18174
18172: GO 18185
18174: POP
// bc_type := b_oil_mine ; 34 :
18175: LD_ADDR_OWVAR 42
18179: PUSH
18180: LD_INT 29
18182: ST_TO_ADDR
18183: GO 18205
18185: LD_INT 34
18187: DOUBLE
18188: EQUAL
18189: IFTRUE 18193
18191: GO 18204
18193: POP
// bc_type := b_siberite_mine ; end ;
18194: LD_ADDR_OWVAR 42
18198: PUSH
18199: LD_INT 30
18201: ST_TO_ADDR
18202: GO 18205
18204: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18205: LD_ADDR_VAR 0 8
18209: PUSH
18210: LD_VAR 0 5
18214: PPUSH
18215: LD_VAR 0 6
18219: PPUSH
18220: LD_VAR 0 3
18224: PPUSH
18225: CALL_OW 47
18229: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18230: LD_OWVAR 42
18234: PUSH
18235: LD_INT 32
18237: PUSH
18238: LD_INT 33
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: IN
18245: IFFALSE 18261
// PlaceWeaponTurret ( b , weapon ) ;
18247: LD_VAR 0 8
18251: PPUSH
18252: LD_VAR 0 4
18256: PPUSH
18257: CALL_OW 431
// end ;
18261: LD_VAR 0 7
18265: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18266: LD_INT 0
18268: PPUSH
18269: PPUSH
18270: PPUSH
18271: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18272: LD_ADDR_VAR 0 4
18276: PUSH
18277: LD_INT 22
18279: PUSH
18280: LD_OWVAR 2
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 2
18291: PUSH
18292: LD_INT 30
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 30
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PPUSH
18321: CALL_OW 69
18325: ST_TO_ADDR
// if not tmp then
18326: LD_VAR 0 4
18330: NOT
18331: IFFALSE 18335
// exit ;
18333: GO 18394
// for i in tmp do
18335: LD_ADDR_VAR 0 2
18339: PUSH
18340: LD_VAR 0 4
18344: PUSH
18345: FOR_IN
18346: IFFALSE 18392
// for j = 1 to 3 do
18348: LD_ADDR_VAR 0 3
18352: PUSH
18353: DOUBLE
18354: LD_INT 1
18356: DEC
18357: ST_TO_ADDR
18358: LD_INT 3
18360: PUSH
18361: FOR_TO
18362: IFFALSE 18388
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18364: LD_VAR 0 2
18368: PPUSH
18369: CALL_OW 274
18373: PPUSH
18374: LD_VAR 0 3
18378: PPUSH
18379: LD_INT 99999
18381: PPUSH
18382: CALL_OW 277
18386: GO 18361
18388: POP
18389: POP
18390: GO 18345
18392: POP
18393: POP
// end ;
18394: LD_VAR 0 1
18398: RET
// export function hHackSetLevel10 ; var i , j ; begin
18399: LD_INT 0
18401: PPUSH
18402: PPUSH
18403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18404: LD_ADDR_VAR 0 2
18408: PUSH
18409: LD_INT 21
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PPUSH
18419: CALL_OW 69
18423: PUSH
18424: FOR_IN
18425: IFFALSE 18477
// if IsSelected ( i ) then
18427: LD_VAR 0 2
18431: PPUSH
18432: CALL_OW 306
18436: IFFALSE 18475
// begin for j := 1 to 4 do
18438: LD_ADDR_VAR 0 3
18442: PUSH
18443: DOUBLE
18444: LD_INT 1
18446: DEC
18447: ST_TO_ADDR
18448: LD_INT 4
18450: PUSH
18451: FOR_TO
18452: IFFALSE 18473
// SetSkill ( i , j , 10 ) ;
18454: LD_VAR 0 2
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 10
18466: PPUSH
18467: CALL_OW 237
18471: GO 18451
18473: POP
18474: POP
// end ;
18475: GO 18424
18477: POP
18478: POP
// end ;
18479: LD_VAR 0 1
18483: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18484: LD_INT 0
18486: PPUSH
18487: PPUSH
18488: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18489: LD_ADDR_VAR 0 2
18493: PUSH
18494: LD_INT 22
18496: PUSH
18497: LD_OWVAR 2
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 21
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: PUSH
18525: FOR_IN
18526: IFFALSE 18567
// begin for j := 1 to 4 do
18528: LD_ADDR_VAR 0 3
18532: PUSH
18533: DOUBLE
18534: LD_INT 1
18536: DEC
18537: ST_TO_ADDR
18538: LD_INT 4
18540: PUSH
18541: FOR_TO
18542: IFFALSE 18563
// SetSkill ( i , j , 10 ) ;
18544: LD_VAR 0 2
18548: PPUSH
18549: LD_VAR 0 3
18553: PPUSH
18554: LD_INT 10
18556: PPUSH
18557: CALL_OW 237
18561: GO 18541
18563: POP
18564: POP
// end ;
18565: GO 18525
18567: POP
18568: POP
// end ;
18569: LD_VAR 0 1
18573: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18574: LD_INT 0
18576: PPUSH
// uc_side := your_side ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_OWVAR 2
18586: ST_TO_ADDR
// uc_nation := nation ;
18587: LD_ADDR_OWVAR 21
18591: PUSH
18592: LD_VAR 0 1
18596: ST_TO_ADDR
// InitHc ;
18597: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18601: LD_INT 0
18603: PPUSH
18604: LD_VAR 0 2
18608: PPUSH
18609: LD_VAR 0 3
18613: PPUSH
18614: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18618: LD_VAR 0 4
18622: PPUSH
18623: LD_VAR 0 5
18627: PPUSH
18628: CALL_OW 428
18632: PUSH
18633: LD_INT 0
18635: EQUAL
18636: IFFALSE 18660
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18638: CALL_OW 44
18642: PPUSH
18643: LD_VAR 0 4
18647: PPUSH
18648: LD_VAR 0 5
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 48
// end ;
18660: LD_VAR 0 6
18664: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18665: LD_INT 0
18667: PPUSH
18668: PPUSH
// uc_side := your_side ;
18669: LD_ADDR_OWVAR 20
18673: PUSH
18674: LD_OWVAR 2
18678: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18679: LD_VAR 0 1
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: LD_INT 2
18689: PUSH
18690: LD_INT 3
18692: PUSH
18693: LD_INT 4
18695: PUSH
18696: LD_INT 5
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: IN
18706: IFFALSE 18718
// uc_nation := nation_american else
18708: LD_ADDR_OWVAR 21
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
18716: GO 18761
// if chassis in [ 11 , 12 , 13 , 14 ] then
18718: LD_VAR 0 1
18722: PUSH
18723: LD_INT 11
18725: PUSH
18726: LD_INT 12
18728: PUSH
18729: LD_INT 13
18731: PUSH
18732: LD_INT 14
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: IN
18741: IFFALSE 18753
// uc_nation := nation_arabian else
18743: LD_ADDR_OWVAR 21
18747: PUSH
18748: LD_INT 2
18750: ST_TO_ADDR
18751: GO 18761
// uc_nation := nation_russian ;
18753: LD_ADDR_OWVAR 21
18757: PUSH
18758: LD_INT 3
18760: ST_TO_ADDR
// vc_chassis := chassis ;
18761: LD_ADDR_OWVAR 37
18765: PUSH
18766: LD_VAR 0 1
18770: ST_TO_ADDR
// vc_engine := engine ;
18771: LD_ADDR_OWVAR 39
18775: PUSH
18776: LD_VAR 0 2
18780: ST_TO_ADDR
// vc_control := control ;
18781: LD_ADDR_OWVAR 38
18785: PUSH
18786: LD_VAR 0 3
18790: ST_TO_ADDR
// vc_weapon := weapon ;
18791: LD_ADDR_OWVAR 40
18795: PUSH
18796: LD_VAR 0 4
18800: ST_TO_ADDR
// un := CreateVehicle ;
18801: LD_ADDR_VAR 0 8
18805: PUSH
18806: CALL_OW 45
18810: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18811: LD_VAR 0 8
18815: PPUSH
18816: LD_INT 0
18818: PPUSH
18819: LD_INT 5
18821: PPUSH
18822: CALL_OW 12
18826: PPUSH
18827: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18831: LD_VAR 0 8
18835: PPUSH
18836: LD_VAR 0 5
18840: PPUSH
18841: LD_VAR 0 6
18845: PPUSH
18846: LD_INT 1
18848: PPUSH
18849: CALL_OW 48
// end ;
18853: LD_VAR 0 7
18857: RET
// export hInvincible ; every 1 do
18858: GO 18860
18860: DISABLE
// hInvincible := [ ] ;
18861: LD_ADDR_EXP 81
18865: PUSH
18866: EMPTY
18867: ST_TO_ADDR
18868: END
// every 10 do var i ;
18869: GO 18871
18871: DISABLE
18872: LD_INT 0
18874: PPUSH
// begin enable ;
18875: ENABLE
// if not hInvincible then
18876: LD_EXP 81
18880: NOT
18881: IFFALSE 18885
// exit ;
18883: GO 18929
// for i in hInvincible do
18885: LD_ADDR_VAR 0 1
18889: PUSH
18890: LD_EXP 81
18894: PUSH
18895: FOR_IN
18896: IFFALSE 18927
// if GetLives ( i ) < 1000 then
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL_OW 256
18907: PUSH
18908: LD_INT 1000
18910: LESS
18911: IFFALSE 18925
// SetLives ( i , 1000 ) ;
18913: LD_VAR 0 1
18917: PPUSH
18918: LD_INT 1000
18920: PPUSH
18921: CALL_OW 234
18925: GO 18895
18927: POP
18928: POP
// end ;
18929: PPOPN 1
18931: END
// export function hHackInvincible ; var i ; begin
18932: LD_INT 0
18934: PPUSH
18935: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18936: LD_ADDR_VAR 0 2
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: LD_INT 21
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 21
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: PPUSH
18969: CALL_OW 69
18973: PUSH
18974: FOR_IN
18975: IFFALSE 19036
// if IsSelected ( i ) then
18977: LD_VAR 0 2
18981: PPUSH
18982: CALL_OW 306
18986: IFFALSE 19034
// begin if i in hInvincible then
18988: LD_VAR 0 2
18992: PUSH
18993: LD_EXP 81
18997: IN
18998: IFFALSE 19018
// hInvincible := hInvincible diff i else
19000: LD_ADDR_EXP 81
19004: PUSH
19005: LD_EXP 81
19009: PUSH
19010: LD_VAR 0 2
19014: DIFF
19015: ST_TO_ADDR
19016: GO 19034
// hInvincible := hInvincible union i ;
19018: LD_ADDR_EXP 81
19022: PUSH
19023: LD_EXP 81
19027: PUSH
19028: LD_VAR 0 2
19032: UNION
19033: ST_TO_ADDR
// end ;
19034: GO 18974
19036: POP
19037: POP
// end ;
19038: LD_VAR 0 1
19042: RET
// export function hHackInvisible ; var i , j ; begin
19043: LD_INT 0
19045: PPUSH
19046: PPUSH
19047: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19048: LD_ADDR_VAR 0 2
19052: PUSH
19053: LD_INT 21
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: PUSH
19068: FOR_IN
19069: IFFALSE 19093
// if IsSelected ( i ) then
19071: LD_VAR 0 2
19075: PPUSH
19076: CALL_OW 306
19080: IFFALSE 19091
// ComForceInvisible ( i ) ;
19082: LD_VAR 0 2
19086: PPUSH
19087: CALL_OW 496
19091: GO 19068
19093: POP
19094: POP
// end ;
19095: LD_VAR 0 1
19099: RET
// export function hHackChangeYourSide ; begin
19100: LD_INT 0
19102: PPUSH
// if your_side = 8 then
19103: LD_OWVAR 2
19107: PUSH
19108: LD_INT 8
19110: EQUAL
19111: IFFALSE 19123
// your_side := 0 else
19113: LD_ADDR_OWVAR 2
19117: PUSH
19118: LD_INT 0
19120: ST_TO_ADDR
19121: GO 19137
// your_side := your_side + 1 ;
19123: LD_ADDR_OWVAR 2
19127: PUSH
19128: LD_OWVAR 2
19132: PUSH
19133: LD_INT 1
19135: PLUS
19136: ST_TO_ADDR
// end ;
19137: LD_VAR 0 1
19141: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19142: LD_INT 0
19144: PPUSH
19145: PPUSH
19146: PPUSH
// for i in all_units do
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_OWVAR 3
19156: PUSH
19157: FOR_IN
19158: IFFALSE 19236
// if IsSelected ( i ) then
19160: LD_VAR 0 2
19164: PPUSH
19165: CALL_OW 306
19169: IFFALSE 19234
// begin j := GetSide ( i ) ;
19171: LD_ADDR_VAR 0 3
19175: PUSH
19176: LD_VAR 0 2
19180: PPUSH
19181: CALL_OW 255
19185: ST_TO_ADDR
// if j = 8 then
19186: LD_VAR 0 3
19190: PUSH
19191: LD_INT 8
19193: EQUAL
19194: IFFALSE 19206
// j := 0 else
19196: LD_ADDR_VAR 0 3
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
19204: GO 19220
// j := j + 1 ;
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 1
19218: PLUS
19219: ST_TO_ADDR
// SetSide ( i , j ) ;
19220: LD_VAR 0 2
19224: PPUSH
19225: LD_VAR 0 3
19229: PPUSH
19230: CALL_OW 235
// end ;
19234: GO 19157
19236: POP
19237: POP
// end ;
19238: LD_VAR 0 1
19242: RET
// export function hHackFog ; begin
19243: LD_INT 0
19245: PPUSH
// FogOff ( true ) ;
19246: LD_INT 1
19248: PPUSH
19249: CALL_OW 344
// end ;
19253: LD_VAR 0 1
19257: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19258: LD_INT 0
19260: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19261: LD_VAR 0 1
19265: PPUSH
19266: LD_VAR 0 2
19270: PPUSH
19271: LD_VAR 0 3
19275: PPUSH
19276: LD_INT 1
19278: PPUSH
19279: LD_INT 1
19281: PPUSH
19282: CALL_OW 483
// CenterOnXY ( x , y ) ;
19286: LD_VAR 0 2
19290: PPUSH
19291: LD_VAR 0 3
19295: PPUSH
19296: CALL_OW 84
// end ; end_of_file
19300: LD_VAR 0 4
19304: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19305: LD_INT 0
19307: PPUSH
19308: PPUSH
19309: PPUSH
19310: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19311: LD_VAR 0 1
19315: PPUSH
19316: CALL_OW 264
19320: PUSH
19321: LD_EXP 97
19325: EQUAL
19326: IFFALSE 19398
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19328: LD_INT 68
19330: PPUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL_OW 255
19340: PPUSH
19341: CALL_OW 321
19345: PUSH
19346: LD_INT 2
19348: EQUAL
19349: IFFALSE 19361
// eff := 70 else
19351: LD_ADDR_VAR 0 4
19355: PUSH
19356: LD_INT 70
19358: ST_TO_ADDR
19359: GO 19369
// eff := 30 ;
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: LD_INT 30
19368: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL_OW 250
19378: PPUSH
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 251
19388: PPUSH
19389: LD_VAR 0 4
19393: PPUSH
19394: CALL_OW 495
// end ; end ;
19398: LD_VAR 0 2
19402: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19403: LD_INT 0
19405: PPUSH
// end ;
19406: LD_VAR 0 4
19410: RET
// export function SOS_Command ( cmd ) ; begin
19411: LD_INT 0
19413: PPUSH
// end ;
19414: LD_VAR 0 2
19418: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19419: LD_INT 0
19421: PPUSH
// end ;
19422: LD_VAR 0 6
19426: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19427: LD_INT 0
19429: PPUSH
19430: PPUSH
// if not vehicle or not factory then
19431: LD_VAR 0 1
19435: NOT
19436: PUSH
19437: LD_VAR 0 2
19441: NOT
19442: OR
19443: IFFALSE 19447
// exit ;
19445: GO 19678
// if factoryWaypoints >= factory then
19447: LD_EXP 82
19451: PUSH
19452: LD_VAR 0 2
19456: GREATEREQUAL
19457: IFFALSE 19678
// if factoryWaypoints [ factory ] then
19459: LD_EXP 82
19463: PUSH
19464: LD_VAR 0 2
19468: ARRAY
19469: IFFALSE 19678
// begin if GetControl ( vehicle ) = control_manual then
19471: LD_VAR 0 1
19475: PPUSH
19476: CALL_OW 263
19480: PUSH
19481: LD_INT 1
19483: EQUAL
19484: IFFALSE 19565
// begin driver := IsDrivenBy ( vehicle ) ;
19486: LD_ADDR_VAR 0 4
19490: PUSH
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 311
19500: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19501: LD_VAR 0 4
19505: PPUSH
19506: LD_EXP 82
19510: PUSH
19511: LD_VAR 0 2
19515: ARRAY
19516: PUSH
19517: LD_INT 3
19519: ARRAY
19520: PPUSH
19521: LD_EXP 82
19525: PUSH
19526: LD_VAR 0 2
19530: ARRAY
19531: PUSH
19532: LD_INT 4
19534: ARRAY
19535: PPUSH
19536: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19540: LD_VAR 0 4
19544: PPUSH
19545: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19549: LD_VAR 0 4
19553: PPUSH
19554: LD_VAR 0 2
19558: PPUSH
19559: CALL_OW 180
// end else
19563: GO 19678
// if GetControl ( vehicle ) = control_remote then
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 263
19574: PUSH
19575: LD_INT 2
19577: EQUAL
19578: IFFALSE 19639
// begin wait ( 0 0$2 ) ;
19580: LD_INT 70
19582: PPUSH
19583: CALL_OW 67
// if Connect ( vehicle ) then
19587: LD_VAR 0 1
19591: PPUSH
19592: CALL 32285 0 1
19596: IFFALSE 19637
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19598: LD_VAR 0 1
19602: PPUSH
19603: LD_EXP 82
19607: PUSH
19608: LD_VAR 0 2
19612: ARRAY
19613: PUSH
19614: LD_INT 3
19616: ARRAY
19617: PPUSH
19618: LD_EXP 82
19622: PUSH
19623: LD_VAR 0 2
19627: ARRAY
19628: PUSH
19629: LD_INT 4
19631: ARRAY
19632: PPUSH
19633: CALL_OW 171
// end else
19637: GO 19678
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19639: LD_VAR 0 1
19643: PPUSH
19644: LD_EXP 82
19648: PUSH
19649: LD_VAR 0 2
19653: ARRAY
19654: PUSH
19655: LD_INT 3
19657: ARRAY
19658: PPUSH
19659: LD_EXP 82
19663: PUSH
19664: LD_VAR 0 2
19668: ARRAY
19669: PUSH
19670: LD_INT 4
19672: ARRAY
19673: PPUSH
19674: CALL_OW 171
// end ; end ;
19678: LD_VAR 0 3
19682: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19683: LD_INT 0
19685: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19686: LD_VAR 0 1
19690: PUSH
19691: LD_INT 250
19693: EQUAL
19694: PUSH
19695: LD_VAR 0 2
19699: PPUSH
19700: CALL_OW 264
19704: PUSH
19705: LD_EXP 100
19709: EQUAL
19710: AND
19711: IFFALSE 19732
// MinerPlaceMine ( unit , x , y ) ;
19713: LD_VAR 0 2
19717: PPUSH
19718: LD_VAR 0 4
19722: PPUSH
19723: LD_VAR 0 5
19727: PPUSH
19728: CALL 22460 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19732: LD_VAR 0 1
19736: PUSH
19737: LD_INT 251
19739: EQUAL
19740: PUSH
19741: LD_VAR 0 2
19745: PPUSH
19746: CALL_OW 264
19750: PUSH
19751: LD_EXP 100
19755: EQUAL
19756: AND
19757: IFFALSE 19778
// MinerDetonateMine ( unit , x , y ) ;
19759: LD_VAR 0 2
19763: PPUSH
19764: LD_VAR 0 4
19768: PPUSH
19769: LD_VAR 0 5
19773: PPUSH
19774: CALL 22737 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19778: LD_VAR 0 1
19782: PUSH
19783: LD_INT 252
19785: EQUAL
19786: PUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: CALL_OW 264
19796: PUSH
19797: LD_EXP 100
19801: EQUAL
19802: AND
19803: IFFALSE 19824
// MinerCreateMinefield ( unit , x , y ) ;
19805: LD_VAR 0 2
19809: PPUSH
19810: LD_VAR 0 4
19814: PPUSH
19815: LD_VAR 0 5
19819: PPUSH
19820: CALL 23154 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19824: LD_VAR 0 1
19828: PUSH
19829: LD_INT 253
19831: EQUAL
19832: PUSH
19833: LD_VAR 0 2
19837: PPUSH
19838: CALL_OW 257
19842: PUSH
19843: LD_INT 5
19845: EQUAL
19846: AND
19847: IFFALSE 19868
// ComBinocular ( unit , x , y ) ;
19849: LD_VAR 0 2
19853: PPUSH
19854: LD_VAR 0 4
19858: PPUSH
19859: LD_VAR 0 5
19863: PPUSH
19864: CALL 23525 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19868: LD_VAR 0 1
19872: PUSH
19873: LD_INT 254
19875: EQUAL
19876: PUSH
19877: LD_VAR 0 2
19881: PPUSH
19882: CALL_OW 264
19886: PUSH
19887: LD_EXP 95
19891: EQUAL
19892: AND
19893: PUSH
19894: LD_VAR 0 3
19898: PPUSH
19899: CALL_OW 263
19903: PUSH
19904: LD_INT 3
19906: EQUAL
19907: AND
19908: IFFALSE 19924
// HackDestroyVehicle ( unit , selectedUnit ) ;
19910: LD_VAR 0 2
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL 21820 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19924: LD_VAR 0 1
19928: PUSH
19929: LD_INT 255
19931: EQUAL
19932: PUSH
19933: LD_VAR 0 2
19937: PPUSH
19938: CALL_OW 264
19942: PUSH
19943: LD_INT 14
19945: PUSH
19946: LD_INT 53
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: IN
19953: AND
19954: PUSH
19955: LD_VAR 0 4
19959: PPUSH
19960: LD_VAR 0 5
19964: PPUSH
19965: CALL_OW 488
19969: AND
19970: IFFALSE 19994
// CutTreeXYR ( unit , x , y , 12 ) ;
19972: LD_VAR 0 2
19976: PPUSH
19977: LD_VAR 0 4
19981: PPUSH
19982: LD_VAR 0 5
19986: PPUSH
19987: LD_INT 12
19989: PPUSH
19990: CALL 20386 0 4
// if cmd = 256 then
19994: LD_VAR 0 1
19998: PUSH
19999: LD_INT 256
20001: EQUAL
20002: IFFALSE 20023
// SetFactoryWaypoint ( unit , x , y ) ;
20004: LD_VAR 0 2
20008: PPUSH
20009: LD_VAR 0 4
20013: PPUSH
20014: LD_VAR 0 5
20018: PPUSH
20019: CALL 20028 0 3
// end ;
20023: LD_VAR 0 6
20027: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20028: LD_INT 0
20030: PPUSH
20031: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20032: LD_VAR 0 1
20036: NOT
20037: PUSH
20038: LD_VAR 0 2
20042: PPUSH
20043: LD_VAR 0 3
20047: PPUSH
20048: CALL_OW 488
20052: NOT
20053: OR
20054: PUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 266
20064: PUSH
20065: LD_INT 3
20067: NONEQUAL
20068: PUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 247
20078: PUSH
20079: LD_INT 1
20081: EQUAL
20082: NOT
20083: AND
20084: OR
20085: IFFALSE 20089
// exit ;
20087: GO 20238
// if GetType ( factory ) = unit_human then
20089: LD_VAR 0 1
20093: PPUSH
20094: CALL_OW 247
20098: PUSH
20099: LD_INT 1
20101: EQUAL
20102: IFFALSE 20119
// factory := IsInUnit ( factory ) ;
20104: LD_ADDR_VAR 0 1
20108: PUSH
20109: LD_VAR 0 1
20113: PPUSH
20114: CALL_OW 310
20118: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20119: LD_VAR 0 1
20123: PPUSH
20124: CALL_OW 266
20128: PUSH
20129: LD_INT 3
20131: NONEQUAL
20132: IFFALSE 20136
// exit ;
20134: GO 20238
// if HexInfo ( x , y ) = factory then
20136: LD_VAR 0 2
20140: PPUSH
20141: LD_VAR 0 3
20145: PPUSH
20146: CALL_OW 428
20150: PUSH
20151: LD_VAR 0 1
20155: EQUAL
20156: IFFALSE 20183
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20158: LD_ADDR_EXP 82
20162: PUSH
20163: LD_EXP 82
20167: PPUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_INT 0
20175: PPUSH
20176: CALL_OW 1
20180: ST_TO_ADDR
20181: GO 20234
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20183: LD_ADDR_EXP 82
20187: PUSH
20188: LD_EXP 82
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 255
20207: PUSH
20208: LD_VAR 0 1
20212: PUSH
20213: LD_VAR 0 2
20217: PUSH
20218: LD_VAR 0 3
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: PPUSH
20229: CALL_OW 1
20233: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20234: CALL 20243 0 0
// end ;
20238: LD_VAR 0 4
20242: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
20243: LD_INT 0
20245: PPUSH
20246: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20247: LD_STRING resetFactoryWaypoint();
20249: PPUSH
20250: CALL_OW 559
// if factoryWaypoints then
20254: LD_EXP 82
20258: IFFALSE 20381
// begin for i := 1 to factoryWaypoints do
20260: LD_ADDR_VAR 0 2
20264: PUSH
20265: DOUBLE
20266: LD_INT 1
20268: DEC
20269: ST_TO_ADDR
20270: LD_EXP 82
20274: PUSH
20275: FOR_TO
20276: IFFALSE 20379
// if factoryWaypoints [ i ] then
20278: LD_EXP 82
20282: PUSH
20283: LD_VAR 0 2
20287: ARRAY
20288: IFFALSE 20377
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
20290: LD_STRING setFactoryWaypointXY(
20292: PUSH
20293: LD_EXP 82
20297: PUSH
20298: LD_VAR 0 2
20302: ARRAY
20303: PUSH
20304: LD_INT 1
20306: ARRAY
20307: STR
20308: PUSH
20309: LD_STRING ,
20311: STR
20312: PUSH
20313: LD_EXP 82
20317: PUSH
20318: LD_VAR 0 2
20322: ARRAY
20323: PUSH
20324: LD_INT 2
20326: ARRAY
20327: STR
20328: PUSH
20329: LD_STRING ,
20331: STR
20332: PUSH
20333: LD_EXP 82
20337: PUSH
20338: LD_VAR 0 2
20342: ARRAY
20343: PUSH
20344: LD_INT 3
20346: ARRAY
20347: STR
20348: PUSH
20349: LD_STRING ,
20351: STR
20352: PUSH
20353: LD_EXP 82
20357: PUSH
20358: LD_VAR 0 2
20362: ARRAY
20363: PUSH
20364: LD_INT 4
20366: ARRAY
20367: STR
20368: PUSH
20369: LD_STRING )
20371: STR
20372: PPUSH
20373: CALL_OW 559
20377: GO 20275
20379: POP
20380: POP
// end ; end ;
20381: LD_VAR 0 1
20385: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20386: LD_INT 0
20388: PPUSH
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
20393: PPUSH
20394: PPUSH
20395: PPUSH
20396: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20397: LD_VAR 0 1
20401: NOT
20402: PUSH
20403: LD_VAR 0 2
20407: PPUSH
20408: LD_VAR 0 3
20412: PPUSH
20413: CALL_OW 488
20417: NOT
20418: OR
20419: PUSH
20420: LD_VAR 0 4
20424: NOT
20425: OR
20426: IFFALSE 20430
// exit ;
20428: GO 20770
// list := [ ] ;
20430: LD_ADDR_VAR 0 13
20434: PUSH
20435: EMPTY
20436: ST_TO_ADDR
// if x - r < 0 then
20437: LD_VAR 0 2
20441: PUSH
20442: LD_VAR 0 4
20446: MINUS
20447: PUSH
20448: LD_INT 0
20450: LESS
20451: IFFALSE 20463
// min_x := 0 else
20453: LD_ADDR_VAR 0 7
20457: PUSH
20458: LD_INT 0
20460: ST_TO_ADDR
20461: GO 20479
// min_x := x - r ;
20463: LD_ADDR_VAR 0 7
20467: PUSH
20468: LD_VAR 0 2
20472: PUSH
20473: LD_VAR 0 4
20477: MINUS
20478: ST_TO_ADDR
// if y - r < 0 then
20479: LD_VAR 0 3
20483: PUSH
20484: LD_VAR 0 4
20488: MINUS
20489: PUSH
20490: LD_INT 0
20492: LESS
20493: IFFALSE 20505
// min_y := 0 else
20495: LD_ADDR_VAR 0 8
20499: PUSH
20500: LD_INT 0
20502: ST_TO_ADDR
20503: GO 20521
// min_y := y - r ;
20505: LD_ADDR_VAR 0 8
20509: PUSH
20510: LD_VAR 0 3
20514: PUSH
20515: LD_VAR 0 4
20519: MINUS
20520: ST_TO_ADDR
// max_x := x + r ;
20521: LD_ADDR_VAR 0 9
20525: PUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_VAR 0 4
20535: PLUS
20536: ST_TO_ADDR
// max_y := y + r ;
20537: LD_ADDR_VAR 0 10
20541: PUSH
20542: LD_VAR 0 3
20546: PUSH
20547: LD_VAR 0 4
20551: PLUS
20552: ST_TO_ADDR
// for _x = min_x to max_x do
20553: LD_ADDR_VAR 0 11
20557: PUSH
20558: DOUBLE
20559: LD_VAR 0 7
20563: DEC
20564: ST_TO_ADDR
20565: LD_VAR 0 9
20569: PUSH
20570: FOR_TO
20571: IFFALSE 20688
// for _y = min_y to max_y do
20573: LD_ADDR_VAR 0 12
20577: PUSH
20578: DOUBLE
20579: LD_VAR 0 8
20583: DEC
20584: ST_TO_ADDR
20585: LD_VAR 0 10
20589: PUSH
20590: FOR_TO
20591: IFFALSE 20684
// begin if not ValidHex ( _x , _y ) then
20593: LD_VAR 0 11
20597: PPUSH
20598: LD_VAR 0 12
20602: PPUSH
20603: CALL_OW 488
20607: NOT
20608: IFFALSE 20612
// continue ;
20610: GO 20590
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20612: LD_VAR 0 11
20616: PPUSH
20617: LD_VAR 0 12
20621: PPUSH
20622: CALL_OW 351
20626: PUSH
20627: LD_VAR 0 11
20631: PPUSH
20632: LD_VAR 0 12
20636: PPUSH
20637: CALL_OW 554
20641: AND
20642: IFFALSE 20682
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20644: LD_ADDR_VAR 0 13
20648: PUSH
20649: LD_VAR 0 13
20653: PPUSH
20654: LD_VAR 0 13
20658: PUSH
20659: LD_INT 1
20661: PLUS
20662: PPUSH
20663: LD_VAR 0 11
20667: PUSH
20668: LD_VAR 0 12
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PPUSH
20677: CALL_OW 2
20681: ST_TO_ADDR
// end ;
20682: GO 20590
20684: POP
20685: POP
20686: GO 20570
20688: POP
20689: POP
// if not list then
20690: LD_VAR 0 13
20694: NOT
20695: IFFALSE 20699
// exit ;
20697: GO 20770
// for i in list do
20699: LD_ADDR_VAR 0 6
20703: PUSH
20704: LD_VAR 0 13
20708: PUSH
20709: FOR_IN
20710: IFFALSE 20768
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20712: LD_VAR 0 1
20716: PPUSH
20717: LD_STRING M
20719: PUSH
20720: LD_VAR 0 6
20724: PUSH
20725: LD_INT 1
20727: ARRAY
20728: PUSH
20729: LD_VAR 0 6
20733: PUSH
20734: LD_INT 2
20736: ARRAY
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: PUSH
20759: EMPTY
20760: LIST
20761: PPUSH
20762: CALL_OW 447
20766: GO 20709
20768: POP
20769: POP
// end ;
20770: LD_VAR 0 5
20774: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20775: LD_EXP 83
20779: NOT
20780: IFFALSE 20830
20782: GO 20784
20784: DISABLE
// begin initHack := true ;
20785: LD_ADDR_EXP 83
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// hackTanks := [ ] ;
20793: LD_ADDR_EXP 84
20797: PUSH
20798: EMPTY
20799: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20800: LD_ADDR_EXP 85
20804: PUSH
20805: EMPTY
20806: ST_TO_ADDR
// hackLimit := 3 ;
20807: LD_ADDR_EXP 86
20811: PUSH
20812: LD_INT 3
20814: ST_TO_ADDR
// hackDist := 12 ;
20815: LD_ADDR_EXP 87
20819: PUSH
20820: LD_INT 12
20822: ST_TO_ADDR
// hackCounter := [ ] ;
20823: LD_ADDR_EXP 88
20827: PUSH
20828: EMPTY
20829: ST_TO_ADDR
// end ;
20830: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20831: LD_EXP 83
20835: PUSH
20836: LD_INT 34
20838: PUSH
20839: LD_EXP 95
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PPUSH
20848: CALL_OW 69
20852: AND
20853: IFFALSE 21108
20855: GO 20857
20857: DISABLE
20858: LD_INT 0
20860: PPUSH
20861: PPUSH
// begin enable ;
20862: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20863: LD_ADDR_VAR 0 1
20867: PUSH
20868: LD_INT 34
20870: PUSH
20871: LD_EXP 95
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PPUSH
20880: CALL_OW 69
20884: PUSH
20885: FOR_IN
20886: IFFALSE 21106
// begin if not i in hackTanks then
20888: LD_VAR 0 1
20892: PUSH
20893: LD_EXP 84
20897: IN
20898: NOT
20899: IFFALSE 20982
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20901: LD_ADDR_EXP 84
20905: PUSH
20906: LD_EXP 84
20910: PPUSH
20911: LD_EXP 84
20915: PUSH
20916: LD_INT 1
20918: PLUS
20919: PPUSH
20920: LD_VAR 0 1
20924: PPUSH
20925: CALL_OW 1
20929: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20930: LD_ADDR_EXP 85
20934: PUSH
20935: LD_EXP 85
20939: PPUSH
20940: LD_EXP 85
20944: PUSH
20945: LD_INT 1
20947: PLUS
20948: PPUSH
20949: EMPTY
20950: PPUSH
20951: CALL_OW 1
20955: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20956: LD_ADDR_EXP 88
20960: PUSH
20961: LD_EXP 88
20965: PPUSH
20966: LD_EXP 88
20970: PUSH
20971: LD_INT 1
20973: PLUS
20974: PPUSH
20975: EMPTY
20976: PPUSH
20977: CALL_OW 1
20981: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20982: LD_VAR 0 1
20986: PPUSH
20987: CALL_OW 302
20991: NOT
20992: IFFALSE 21005
// begin HackUnlinkAll ( i ) ;
20994: LD_VAR 0 1
20998: PPUSH
20999: CALL 21111 0 1
// continue ;
21003: GO 20885
// end ; HackCheckCapturedStatus ( i ) ;
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL 21554 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21014: LD_ADDR_VAR 0 2
21018: PUSH
21019: LD_INT 81
21021: PUSH
21022: LD_VAR 0 1
21026: PPUSH
21027: CALL_OW 255
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 33
21038: PUSH
21039: LD_INT 3
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 91
21048: PUSH
21049: LD_VAR 0 1
21053: PUSH
21054: LD_EXP 87
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 69
21080: ST_TO_ADDR
// if not tmp then
21081: LD_VAR 0 2
21085: NOT
21086: IFFALSE 21090
// continue ;
21088: GO 20885
// HackLink ( i , tmp ) ;
21090: LD_VAR 0 1
21094: PPUSH
21095: LD_VAR 0 2
21099: PPUSH
21100: CALL 21247 0 2
// end ;
21104: GO 20885
21106: POP
21107: POP
// end ;
21108: PPOPN 2
21110: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21111: LD_INT 0
21113: PPUSH
21114: PPUSH
21115: PPUSH
// if not hack in hackTanks then
21116: LD_VAR 0 1
21120: PUSH
21121: LD_EXP 84
21125: IN
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21242
// index := GetElementIndex ( hackTanks , hack ) ;
21131: LD_ADDR_VAR 0 4
21135: PUSH
21136: LD_EXP 84
21140: PPUSH
21141: LD_VAR 0 1
21145: PPUSH
21146: CALL 29099 0 2
21150: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21151: LD_EXP 85
21155: PUSH
21156: LD_VAR 0 4
21160: ARRAY
21161: IFFALSE 21242
// begin for i in hackTanksCaptured [ index ] do
21163: LD_ADDR_VAR 0 3
21167: PUSH
21168: LD_EXP 85
21172: PUSH
21173: LD_VAR 0 4
21177: ARRAY
21178: PUSH
21179: FOR_IN
21180: IFFALSE 21206
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21182: LD_VAR 0 3
21186: PUSH
21187: LD_INT 1
21189: ARRAY
21190: PPUSH
21191: LD_VAR 0 3
21195: PUSH
21196: LD_INT 2
21198: ARRAY
21199: PPUSH
21200: CALL_OW 235
21204: GO 21179
21206: POP
21207: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21208: LD_ADDR_EXP 85
21212: PUSH
21213: LD_EXP 85
21217: PPUSH
21218: LD_VAR 0 4
21222: PPUSH
21223: EMPTY
21224: PPUSH
21225: CALL_OW 1
21229: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21230: LD_VAR 0 1
21234: PPUSH
21235: LD_INT 0
21237: PPUSH
21238: CALL_OW 505
// end ; end ;
21242: LD_VAR 0 2
21246: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21247: LD_INT 0
21249: PPUSH
21250: PPUSH
21251: PPUSH
// if not hack in hackTanks or not vehicles then
21252: LD_VAR 0 1
21256: PUSH
21257: LD_EXP 84
21261: IN
21262: NOT
21263: PUSH
21264: LD_VAR 0 2
21268: NOT
21269: OR
21270: IFFALSE 21274
// exit ;
21272: GO 21549
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21274: LD_ADDR_VAR 0 2
21278: PUSH
21279: LD_VAR 0 1
21283: PPUSH
21284: LD_VAR 0 2
21288: PPUSH
21289: LD_INT 1
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL 29749 0 4
21299: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21300: LD_ADDR_VAR 0 5
21304: PUSH
21305: LD_EXP 84
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL 29099 0 2
21319: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21320: LD_EXP 85
21324: PUSH
21325: LD_VAR 0 5
21329: ARRAY
21330: PUSH
21331: LD_EXP 86
21335: LESS
21336: IFFALSE 21525
// begin for i := 1 to vehicles do
21338: LD_ADDR_VAR 0 4
21342: PUSH
21343: DOUBLE
21344: LD_INT 1
21346: DEC
21347: ST_TO_ADDR
21348: LD_VAR 0 2
21352: PUSH
21353: FOR_TO
21354: IFFALSE 21523
// begin if hackTanksCaptured [ index ] = hackLimit then
21356: LD_EXP 85
21360: PUSH
21361: LD_VAR 0 5
21365: ARRAY
21366: PUSH
21367: LD_EXP 86
21371: EQUAL
21372: IFFALSE 21376
// break ;
21374: GO 21523
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21376: LD_ADDR_EXP 88
21380: PUSH
21381: LD_EXP 88
21385: PPUSH
21386: LD_VAR 0 5
21390: PPUSH
21391: LD_EXP 88
21395: PUSH
21396: LD_VAR 0 5
21400: ARRAY
21401: PUSH
21402: LD_INT 1
21404: PLUS
21405: PPUSH
21406: CALL_OW 1
21410: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21411: LD_ADDR_EXP 85
21415: PUSH
21416: LD_EXP 85
21420: PPUSH
21421: LD_VAR 0 5
21425: PUSH
21426: LD_EXP 85
21430: PUSH
21431: LD_VAR 0 5
21435: ARRAY
21436: PUSH
21437: LD_INT 1
21439: PLUS
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PPUSH
21445: LD_VAR 0 2
21449: PUSH
21450: LD_VAR 0 4
21454: ARRAY
21455: PUSH
21456: LD_VAR 0 2
21460: PUSH
21461: LD_VAR 0 4
21465: ARRAY
21466: PPUSH
21467: CALL_OW 255
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PPUSH
21476: CALL 29314 0 3
21480: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21481: LD_VAR 0 2
21485: PUSH
21486: LD_VAR 0 4
21490: ARRAY
21491: PPUSH
21492: LD_VAR 0 1
21496: PPUSH
21497: CALL_OW 255
21501: PPUSH
21502: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21506: LD_VAR 0 2
21510: PUSH
21511: LD_VAR 0 4
21515: ARRAY
21516: PPUSH
21517: CALL_OW 141
// end ;
21521: GO 21353
21523: POP
21524: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21525: LD_VAR 0 1
21529: PPUSH
21530: LD_EXP 85
21534: PUSH
21535: LD_VAR 0 5
21539: ARRAY
21540: PUSH
21541: LD_INT 0
21543: PLUS
21544: PPUSH
21545: CALL_OW 505
// end ;
21549: LD_VAR 0 3
21553: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21554: LD_INT 0
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
// if not hack in hackTanks then
21560: LD_VAR 0 1
21564: PUSH
21565: LD_EXP 84
21569: IN
21570: NOT
21571: IFFALSE 21575
// exit ;
21573: GO 21815
// index := GetElementIndex ( hackTanks , hack ) ;
21575: LD_ADDR_VAR 0 4
21579: PUSH
21580: LD_EXP 84
21584: PPUSH
21585: LD_VAR 0 1
21589: PPUSH
21590: CALL 29099 0 2
21594: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21595: LD_ADDR_VAR 0 3
21599: PUSH
21600: DOUBLE
21601: LD_EXP 85
21605: PUSH
21606: LD_VAR 0 4
21610: ARRAY
21611: INC
21612: ST_TO_ADDR
21613: LD_INT 1
21615: PUSH
21616: FOR_DOWNTO
21617: IFFALSE 21789
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21619: LD_ADDR_VAR 0 5
21623: PUSH
21624: LD_EXP 85
21628: PUSH
21629: LD_VAR 0 4
21633: ARRAY
21634: PUSH
21635: LD_VAR 0 3
21639: ARRAY
21640: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21641: LD_VAR 0 5
21645: PUSH
21646: LD_INT 1
21648: ARRAY
21649: PPUSH
21650: CALL_OW 302
21654: NOT
21655: PUSH
21656: LD_VAR 0 5
21660: PUSH
21661: LD_INT 1
21663: ARRAY
21664: PPUSH
21665: CALL_OW 255
21669: PUSH
21670: LD_VAR 0 1
21674: PPUSH
21675: CALL_OW 255
21679: NONEQUAL
21680: OR
21681: IFFALSE 21787
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21683: LD_VAR 0 5
21687: PUSH
21688: LD_INT 1
21690: ARRAY
21691: PPUSH
21692: CALL_OW 305
21696: PUSH
21697: LD_VAR 0 5
21701: PUSH
21702: LD_INT 1
21704: ARRAY
21705: PPUSH
21706: CALL_OW 255
21710: PUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: CALL_OW 255
21720: EQUAL
21721: AND
21722: IFFALSE 21746
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21724: LD_VAR 0 5
21728: PUSH
21729: LD_INT 1
21731: ARRAY
21732: PPUSH
21733: LD_VAR 0 5
21737: PUSH
21738: LD_INT 2
21740: ARRAY
21741: PPUSH
21742: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21746: LD_ADDR_EXP 85
21750: PUSH
21751: LD_EXP 85
21755: PPUSH
21756: LD_VAR 0 4
21760: PPUSH
21761: LD_EXP 85
21765: PUSH
21766: LD_VAR 0 4
21770: ARRAY
21771: PPUSH
21772: LD_VAR 0 3
21776: PPUSH
21777: CALL_OW 3
21781: PPUSH
21782: CALL_OW 1
21786: ST_TO_ADDR
// end ; end ;
21787: GO 21616
21789: POP
21790: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21791: LD_VAR 0 1
21795: PPUSH
21796: LD_EXP 85
21800: PUSH
21801: LD_VAR 0 4
21805: ARRAY
21806: PUSH
21807: LD_INT 0
21809: PLUS
21810: PPUSH
21811: CALL_OW 505
// end ;
21815: LD_VAR 0 2
21819: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21820: LD_INT 0
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
// if not hack in hackTanks then
21826: LD_VAR 0 1
21830: PUSH
21831: LD_EXP 84
21835: IN
21836: NOT
21837: IFFALSE 21841
// exit ;
21839: GO 21926
// index := GetElementIndex ( hackTanks , hack ) ;
21841: LD_ADDR_VAR 0 5
21845: PUSH
21846: LD_EXP 84
21850: PPUSH
21851: LD_VAR 0 1
21855: PPUSH
21856: CALL 29099 0 2
21860: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21861: LD_ADDR_VAR 0 4
21865: PUSH
21866: DOUBLE
21867: LD_INT 1
21869: DEC
21870: ST_TO_ADDR
21871: LD_EXP 85
21875: PUSH
21876: LD_VAR 0 5
21880: ARRAY
21881: PUSH
21882: FOR_TO
21883: IFFALSE 21924
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21885: LD_EXP 85
21889: PUSH
21890: LD_VAR 0 5
21894: ARRAY
21895: PUSH
21896: LD_VAR 0 4
21900: ARRAY
21901: PUSH
21902: LD_INT 1
21904: ARRAY
21905: PUSH
21906: LD_VAR 0 2
21910: EQUAL
21911: IFFALSE 21922
// KillUnit ( vehicle ) ;
21913: LD_VAR 0 2
21917: PPUSH
21918: CALL_OW 66
21922: GO 21882
21924: POP
21925: POP
// end ;
21926: LD_VAR 0 3
21930: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21931: LD_EXP 89
21935: NOT
21936: IFFALSE 21971
21938: GO 21940
21940: DISABLE
// begin initMiner := true ;
21941: LD_ADDR_EXP 89
21945: PUSH
21946: LD_INT 1
21948: ST_TO_ADDR
// minersList := [ ] ;
21949: LD_ADDR_EXP 90
21953: PUSH
21954: EMPTY
21955: ST_TO_ADDR
// minerMinesList := [ ] ;
21956: LD_ADDR_EXP 91
21960: PUSH
21961: EMPTY
21962: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21963: LD_ADDR_EXP 92
21967: PUSH
21968: LD_INT 5
21970: ST_TO_ADDR
// end ;
21971: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21972: LD_EXP 89
21976: PUSH
21977: LD_INT 34
21979: PUSH
21980: LD_EXP 100
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PPUSH
21989: CALL_OW 69
21993: AND
21994: IFFALSE 22457
21996: GO 21998
21998: DISABLE
21999: LD_INT 0
22001: PPUSH
22002: PPUSH
22003: PPUSH
22004: PPUSH
// begin enable ;
22005: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22006: LD_ADDR_VAR 0 1
22010: PUSH
22011: LD_INT 34
22013: PUSH
22014: LD_EXP 100
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PPUSH
22023: CALL_OW 69
22027: PUSH
22028: FOR_IN
22029: IFFALSE 22101
// begin if not i in minersList then
22031: LD_VAR 0 1
22035: PUSH
22036: LD_EXP 90
22040: IN
22041: NOT
22042: IFFALSE 22099
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22044: LD_ADDR_EXP 90
22048: PUSH
22049: LD_EXP 90
22053: PPUSH
22054: LD_EXP 90
22058: PUSH
22059: LD_INT 1
22061: PLUS
22062: PPUSH
22063: LD_VAR 0 1
22067: PPUSH
22068: CALL_OW 1
22072: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22073: LD_ADDR_EXP 91
22077: PUSH
22078: LD_EXP 91
22082: PPUSH
22083: LD_EXP 91
22087: PUSH
22088: LD_INT 1
22090: PLUS
22091: PPUSH
22092: EMPTY
22093: PPUSH
22094: CALL_OW 1
22098: ST_TO_ADDR
// end end ;
22099: GO 22028
22101: POP
22102: POP
// for i := minerMinesList downto 1 do
22103: LD_ADDR_VAR 0 1
22107: PUSH
22108: DOUBLE
22109: LD_EXP 91
22113: INC
22114: ST_TO_ADDR
22115: LD_INT 1
22117: PUSH
22118: FOR_DOWNTO
22119: IFFALSE 22455
// begin if IsLive ( minersList [ i ] ) then
22121: LD_EXP 90
22125: PUSH
22126: LD_VAR 0 1
22130: ARRAY
22131: PPUSH
22132: CALL_OW 300
22136: IFFALSE 22164
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22138: LD_EXP 90
22142: PUSH
22143: LD_VAR 0 1
22147: ARRAY
22148: PPUSH
22149: LD_EXP 91
22153: PUSH
22154: LD_VAR 0 1
22158: ARRAY
22159: PPUSH
22160: CALL_OW 505
// if not minerMinesList [ i ] then
22164: LD_EXP 91
22168: PUSH
22169: LD_VAR 0 1
22173: ARRAY
22174: NOT
22175: IFFALSE 22179
// continue ;
22177: GO 22118
// for j := minerMinesList [ i ] downto 1 do
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: DOUBLE
22185: LD_EXP 91
22189: PUSH
22190: LD_VAR 0 1
22194: ARRAY
22195: INC
22196: ST_TO_ADDR
22197: LD_INT 1
22199: PUSH
22200: FOR_DOWNTO
22201: IFFALSE 22451
// begin side := GetSide ( minersList [ i ] ) ;
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_EXP 90
22212: PUSH
22213: LD_VAR 0 1
22217: ARRAY
22218: PPUSH
22219: CALL_OW 255
22223: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22224: LD_ADDR_VAR 0 4
22228: PUSH
22229: LD_EXP 91
22233: PUSH
22234: LD_VAR 0 1
22238: ARRAY
22239: PUSH
22240: LD_VAR 0 2
22244: ARRAY
22245: PUSH
22246: LD_INT 1
22248: ARRAY
22249: PPUSH
22250: LD_EXP 91
22254: PUSH
22255: LD_VAR 0 1
22259: ARRAY
22260: PUSH
22261: LD_VAR 0 2
22265: ARRAY
22266: PUSH
22267: LD_INT 2
22269: ARRAY
22270: PPUSH
22271: CALL_OW 428
22275: ST_TO_ADDR
// if not tmp then
22276: LD_VAR 0 4
22280: NOT
22281: IFFALSE 22285
// continue ;
22283: GO 22200
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22285: LD_VAR 0 4
22289: PUSH
22290: LD_INT 81
22292: PUSH
22293: LD_VAR 0 3
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 69
22306: IN
22307: PUSH
22308: LD_EXP 91
22312: PUSH
22313: LD_VAR 0 1
22317: ARRAY
22318: PUSH
22319: LD_VAR 0 2
22323: ARRAY
22324: PUSH
22325: LD_INT 1
22327: ARRAY
22328: PPUSH
22329: LD_EXP 91
22333: PUSH
22334: LD_VAR 0 1
22338: ARRAY
22339: PUSH
22340: LD_VAR 0 2
22344: ARRAY
22345: PUSH
22346: LD_INT 2
22348: ARRAY
22349: PPUSH
22350: CALL_OW 458
22354: AND
22355: IFFALSE 22449
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22357: LD_EXP 91
22361: PUSH
22362: LD_VAR 0 1
22366: ARRAY
22367: PUSH
22368: LD_VAR 0 2
22372: ARRAY
22373: PUSH
22374: LD_INT 1
22376: ARRAY
22377: PPUSH
22378: LD_EXP 91
22382: PUSH
22383: LD_VAR 0 1
22387: ARRAY
22388: PUSH
22389: LD_VAR 0 2
22393: ARRAY
22394: PUSH
22395: LD_INT 2
22397: ARRAY
22398: PPUSH
22399: LD_VAR 0 3
22403: PPUSH
22404: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22408: LD_ADDR_EXP 91
22412: PUSH
22413: LD_EXP 91
22417: PPUSH
22418: LD_VAR 0 1
22422: PPUSH
22423: LD_EXP 91
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 2
22438: PPUSH
22439: CALL_OW 3
22443: PPUSH
22444: CALL_OW 1
22448: ST_TO_ADDR
// end ; end ;
22449: GO 22200
22451: POP
22452: POP
// end ;
22453: GO 22118
22455: POP
22456: POP
// end ;
22457: PPOPN 4
22459: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22460: LD_INT 0
22462: PPUSH
22463: PPUSH
// result := false ;
22464: LD_ADDR_VAR 0 4
22468: PUSH
22469: LD_INT 0
22471: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 264
22481: PUSH
22482: LD_EXP 100
22486: EQUAL
22487: NOT
22488: IFFALSE 22492
// exit ;
22490: GO 22732
// index := GetElementIndex ( minersList , unit ) ;
22492: LD_ADDR_VAR 0 5
22496: PUSH
22497: LD_EXP 90
22501: PPUSH
22502: LD_VAR 0 1
22506: PPUSH
22507: CALL 29099 0 2
22511: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22512: LD_EXP 91
22516: PUSH
22517: LD_VAR 0 5
22521: ARRAY
22522: PUSH
22523: LD_EXP 92
22527: GREATEREQUAL
22528: IFFALSE 22532
// exit ;
22530: GO 22732
// ComMoveXY ( unit , x , y ) ;
22532: LD_VAR 0 1
22536: PPUSH
22537: LD_VAR 0 2
22541: PPUSH
22542: LD_VAR 0 3
22546: PPUSH
22547: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22551: LD_INT 35
22553: PPUSH
22554: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22558: LD_VAR 0 1
22562: PPUSH
22563: LD_VAR 0 2
22567: PPUSH
22568: LD_VAR 0 3
22572: PPUSH
22573: CALL 59818 0 3
22577: NOT
22578: PUSH
22579: LD_VAR 0 1
22583: PPUSH
22584: CALL_OW 314
22588: AND
22589: IFFALSE 22593
// exit ;
22591: GO 22732
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22593: LD_VAR 0 2
22597: PPUSH
22598: LD_VAR 0 3
22602: PPUSH
22603: CALL_OW 428
22607: PUSH
22608: LD_VAR 0 1
22612: EQUAL
22613: PUSH
22614: LD_VAR 0 1
22618: PPUSH
22619: CALL_OW 314
22623: NOT
22624: AND
22625: IFFALSE 22551
// PlaySoundXY ( x , y , PlantMine ) ;
22627: LD_VAR 0 2
22631: PPUSH
22632: LD_VAR 0 3
22636: PPUSH
22637: LD_STRING PlantMine
22639: PPUSH
22640: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22644: LD_VAR 0 2
22648: PPUSH
22649: LD_VAR 0 3
22653: PPUSH
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 255
22663: PPUSH
22664: LD_INT 0
22666: PPUSH
22667: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22671: LD_ADDR_EXP 91
22675: PUSH
22676: LD_EXP 91
22680: PPUSH
22681: LD_VAR 0 5
22685: PUSH
22686: LD_EXP 91
22690: PUSH
22691: LD_VAR 0 5
22695: ARRAY
22696: PUSH
22697: LD_INT 1
22699: PLUS
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PPUSH
22705: LD_VAR 0 2
22709: PUSH
22710: LD_VAR 0 3
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL 29314 0 3
22723: ST_TO_ADDR
// result := true ;
22724: LD_ADDR_VAR 0 4
22728: PUSH
22729: LD_INT 1
22731: ST_TO_ADDR
// end ;
22732: LD_VAR 0 4
22736: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22737: LD_INT 0
22739: PPUSH
22740: PPUSH
22741: PPUSH
// if not unit in minersList then
22742: LD_VAR 0 1
22746: PUSH
22747: LD_EXP 90
22751: IN
22752: NOT
22753: IFFALSE 22757
// exit ;
22755: GO 23149
// index := GetElementIndex ( minersList , unit ) ;
22757: LD_ADDR_VAR 0 6
22761: PUSH
22762: LD_EXP 90
22766: PPUSH
22767: LD_VAR 0 1
22771: PPUSH
22772: CALL 29099 0 2
22776: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22777: LD_ADDR_VAR 0 5
22781: PUSH
22782: DOUBLE
22783: LD_EXP 91
22787: PUSH
22788: LD_VAR 0 6
22792: ARRAY
22793: INC
22794: ST_TO_ADDR
22795: LD_INT 1
22797: PUSH
22798: FOR_DOWNTO
22799: IFFALSE 22960
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22801: LD_EXP 91
22805: PUSH
22806: LD_VAR 0 6
22810: ARRAY
22811: PUSH
22812: LD_VAR 0 5
22816: ARRAY
22817: PUSH
22818: LD_INT 1
22820: ARRAY
22821: PUSH
22822: LD_VAR 0 2
22826: EQUAL
22827: PUSH
22828: LD_EXP 91
22832: PUSH
22833: LD_VAR 0 6
22837: ARRAY
22838: PUSH
22839: LD_VAR 0 5
22843: ARRAY
22844: PUSH
22845: LD_INT 2
22847: ARRAY
22848: PUSH
22849: LD_VAR 0 3
22853: EQUAL
22854: AND
22855: IFFALSE 22958
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22857: LD_EXP 91
22861: PUSH
22862: LD_VAR 0 6
22866: ARRAY
22867: PUSH
22868: LD_VAR 0 5
22872: ARRAY
22873: PUSH
22874: LD_INT 1
22876: ARRAY
22877: PPUSH
22878: LD_EXP 91
22882: PUSH
22883: LD_VAR 0 6
22887: ARRAY
22888: PUSH
22889: LD_VAR 0 5
22893: ARRAY
22894: PUSH
22895: LD_INT 2
22897: ARRAY
22898: PPUSH
22899: LD_VAR 0 1
22903: PPUSH
22904: CALL_OW 255
22908: PPUSH
22909: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22913: LD_ADDR_EXP 91
22917: PUSH
22918: LD_EXP 91
22922: PPUSH
22923: LD_VAR 0 6
22927: PPUSH
22928: LD_EXP 91
22932: PUSH
22933: LD_VAR 0 6
22937: ARRAY
22938: PPUSH
22939: LD_VAR 0 5
22943: PPUSH
22944: CALL_OW 3
22948: PPUSH
22949: CALL_OW 1
22953: ST_TO_ADDR
// exit ;
22954: POP
22955: POP
22956: GO 23149
// end ; end ;
22958: GO 22798
22960: POP
22961: POP
// for i := minerMinesList [ index ] downto 1 do
22962: LD_ADDR_VAR 0 5
22966: PUSH
22967: DOUBLE
22968: LD_EXP 91
22972: PUSH
22973: LD_VAR 0 6
22977: ARRAY
22978: INC
22979: ST_TO_ADDR
22980: LD_INT 1
22982: PUSH
22983: FOR_DOWNTO
22984: IFFALSE 23147
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22986: LD_EXP 91
22990: PUSH
22991: LD_VAR 0 6
22995: ARRAY
22996: PUSH
22997: LD_VAR 0 5
23001: ARRAY
23002: PUSH
23003: LD_INT 1
23005: ARRAY
23006: PPUSH
23007: LD_EXP 91
23011: PUSH
23012: LD_VAR 0 6
23016: ARRAY
23017: PUSH
23018: LD_VAR 0 5
23022: ARRAY
23023: PUSH
23024: LD_INT 2
23026: ARRAY
23027: PPUSH
23028: LD_VAR 0 2
23032: PPUSH
23033: LD_VAR 0 3
23037: PPUSH
23038: CALL_OW 298
23042: PUSH
23043: LD_INT 6
23045: LESS
23046: IFFALSE 23145
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23048: LD_EXP 91
23052: PUSH
23053: LD_VAR 0 6
23057: ARRAY
23058: PUSH
23059: LD_VAR 0 5
23063: ARRAY
23064: PUSH
23065: LD_INT 1
23067: ARRAY
23068: PPUSH
23069: LD_EXP 91
23073: PUSH
23074: LD_VAR 0 6
23078: ARRAY
23079: PUSH
23080: LD_VAR 0 5
23084: ARRAY
23085: PUSH
23086: LD_INT 2
23088: ARRAY
23089: PPUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 255
23099: PPUSH
23100: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23104: LD_ADDR_EXP 91
23108: PUSH
23109: LD_EXP 91
23113: PPUSH
23114: LD_VAR 0 6
23118: PPUSH
23119: LD_EXP 91
23123: PUSH
23124: LD_VAR 0 6
23128: ARRAY
23129: PPUSH
23130: LD_VAR 0 5
23134: PPUSH
23135: CALL_OW 3
23139: PPUSH
23140: CALL_OW 1
23144: ST_TO_ADDR
// end ; end ;
23145: GO 22983
23147: POP
23148: POP
// end ;
23149: LD_VAR 0 4
23153: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23154: LD_INT 0
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 264
23174: PUSH
23175: LD_EXP 100
23179: EQUAL
23180: NOT
23181: PUSH
23182: LD_VAR 0 1
23186: PUSH
23187: LD_EXP 90
23191: IN
23192: NOT
23193: OR
23194: IFFALSE 23198
// exit ;
23196: GO 23520
// index := GetElementIndex ( minersList , unit ) ;
23198: LD_ADDR_VAR 0 6
23202: PUSH
23203: LD_EXP 90
23207: PPUSH
23208: LD_VAR 0 1
23212: PPUSH
23213: CALL 29099 0 2
23217: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23218: LD_ADDR_VAR 0 8
23222: PUSH
23223: LD_EXP 92
23227: PUSH
23228: LD_EXP 91
23232: PUSH
23233: LD_VAR 0 6
23237: ARRAY
23238: MINUS
23239: ST_TO_ADDR
// if not minesFreeAmount then
23240: LD_VAR 0 8
23244: NOT
23245: IFFALSE 23249
// exit ;
23247: GO 23520
// tmp := [ ] ;
23249: LD_ADDR_VAR 0 7
23253: PUSH
23254: EMPTY
23255: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23256: LD_ADDR_VAR 0 5
23260: PUSH
23261: DOUBLE
23262: LD_INT 1
23264: DEC
23265: ST_TO_ADDR
23266: LD_VAR 0 8
23270: PUSH
23271: FOR_TO
23272: IFFALSE 23467
// begin _d := rand ( 0 , 5 ) ;
23274: LD_ADDR_VAR 0 11
23278: PUSH
23279: LD_INT 0
23281: PPUSH
23282: LD_INT 5
23284: PPUSH
23285: CALL_OW 12
23289: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23290: LD_ADDR_VAR 0 12
23294: PUSH
23295: LD_INT 2
23297: PPUSH
23298: LD_INT 6
23300: PPUSH
23301: CALL_OW 12
23305: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23306: LD_ADDR_VAR 0 9
23310: PUSH
23311: LD_VAR 0 2
23315: PPUSH
23316: LD_VAR 0 11
23320: PPUSH
23321: LD_VAR 0 12
23325: PPUSH
23326: CALL_OW 272
23330: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23331: LD_ADDR_VAR 0 10
23335: PUSH
23336: LD_VAR 0 3
23340: PPUSH
23341: LD_VAR 0 11
23345: PPUSH
23346: LD_VAR 0 12
23350: PPUSH
23351: CALL_OW 273
23355: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23356: LD_VAR 0 9
23360: PPUSH
23361: LD_VAR 0 10
23365: PPUSH
23366: CALL_OW 488
23370: PUSH
23371: LD_VAR 0 9
23375: PUSH
23376: LD_VAR 0 10
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_VAR 0 7
23389: IN
23390: NOT
23391: AND
23392: PUSH
23393: LD_VAR 0 9
23397: PPUSH
23398: LD_VAR 0 10
23402: PPUSH
23403: CALL_OW 458
23407: NOT
23408: AND
23409: IFFALSE 23451
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23411: LD_ADDR_VAR 0 7
23415: PUSH
23416: LD_VAR 0 7
23420: PPUSH
23421: LD_VAR 0 7
23425: PUSH
23426: LD_INT 1
23428: PLUS
23429: PPUSH
23430: LD_VAR 0 9
23434: PUSH
23435: LD_VAR 0 10
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PPUSH
23444: CALL_OW 1
23448: ST_TO_ADDR
23449: GO 23465
// i := i - 1 ;
23451: LD_ADDR_VAR 0 5
23455: PUSH
23456: LD_VAR 0 5
23460: PUSH
23461: LD_INT 1
23463: MINUS
23464: ST_TO_ADDR
// end ;
23465: GO 23271
23467: POP
23468: POP
// for i in tmp do
23469: LD_ADDR_VAR 0 5
23473: PUSH
23474: LD_VAR 0 7
23478: PUSH
23479: FOR_IN
23480: IFFALSE 23518
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23482: LD_VAR 0 1
23486: PPUSH
23487: LD_VAR 0 5
23491: PUSH
23492: LD_INT 1
23494: ARRAY
23495: PPUSH
23496: LD_VAR 0 5
23500: PUSH
23501: LD_INT 2
23503: ARRAY
23504: PPUSH
23505: CALL 22460 0 3
23509: NOT
23510: IFFALSE 23516
// exit ;
23512: POP
23513: POP
23514: GO 23520
23516: GO 23479
23518: POP
23519: POP
// end ;
23520: LD_VAR 0 4
23524: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
23529: PPUSH
23530: PPUSH
23531: PPUSH
23532: PPUSH
23533: PPUSH
// if not GetClass ( unit ) = class_sniper then
23534: LD_VAR 0 1
23538: PPUSH
23539: CALL_OW 257
23543: PUSH
23544: LD_INT 5
23546: EQUAL
23547: NOT
23548: IFFALSE 23552
// exit ;
23550: GO 23940
// dist := 8 ;
23552: LD_ADDR_VAR 0 5
23556: PUSH
23557: LD_INT 8
23559: ST_TO_ADDR
// viewRange := 12 ;
23560: LD_ADDR_VAR 0 7
23564: PUSH
23565: LD_INT 12
23567: ST_TO_ADDR
// side := GetSide ( unit ) ;
23568: LD_ADDR_VAR 0 6
23572: PUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 255
23582: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23583: LD_INT 61
23585: PPUSH
23586: LD_VAR 0 6
23590: PPUSH
23591: CALL_OW 321
23595: PUSH
23596: LD_INT 2
23598: EQUAL
23599: IFFALSE 23609
// viewRange := 16 ;
23601: LD_ADDR_VAR 0 7
23605: PUSH
23606: LD_INT 16
23608: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23609: LD_VAR 0 1
23613: PPUSH
23614: LD_VAR 0 2
23618: PPUSH
23619: LD_VAR 0 3
23623: PPUSH
23624: CALL_OW 297
23628: PUSH
23629: LD_VAR 0 5
23633: GREATER
23634: IFFALSE 23713
// begin ComMoveXY ( unit , x , y ) ;
23636: LD_VAR 0 1
23640: PPUSH
23641: LD_VAR 0 2
23645: PPUSH
23646: LD_VAR 0 3
23650: PPUSH
23651: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23655: LD_INT 35
23657: PPUSH
23658: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23662: LD_VAR 0 1
23666: PPUSH
23667: LD_VAR 0 2
23671: PPUSH
23672: LD_VAR 0 3
23676: PPUSH
23677: CALL 59818 0 3
23681: NOT
23682: IFFALSE 23686
// exit ;
23684: GO 23940
// until GetDistUnitXY ( unit , x , y ) < dist ;
23686: LD_VAR 0 1
23690: PPUSH
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: CALL_OW 297
23705: PUSH
23706: LD_VAR 0 5
23710: LESS
23711: IFFALSE 23655
// end ; ComTurnXY ( unit , x , y ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_VAR 0 2
23722: PPUSH
23723: LD_VAR 0 3
23727: PPUSH
23728: CALL_OW 118
// wait ( 5 ) ;
23732: LD_INT 5
23734: PPUSH
23735: CALL_OW 67
// _d := GetDir ( unit ) ;
23739: LD_ADDR_VAR 0 10
23743: PUSH
23744: LD_VAR 0 1
23748: PPUSH
23749: CALL_OW 254
23753: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23754: LD_ADDR_VAR 0 8
23758: PUSH
23759: LD_VAR 0 1
23763: PPUSH
23764: CALL_OW 250
23768: PPUSH
23769: LD_VAR 0 10
23773: PPUSH
23774: LD_VAR 0 5
23778: PPUSH
23779: CALL_OW 272
23783: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23784: LD_ADDR_VAR 0 9
23788: PUSH
23789: LD_VAR 0 1
23793: PPUSH
23794: CALL_OW 251
23798: PPUSH
23799: LD_VAR 0 10
23803: PPUSH
23804: LD_VAR 0 5
23808: PPUSH
23809: CALL_OW 273
23813: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23814: LD_VAR 0 8
23818: PPUSH
23819: LD_VAR 0 9
23823: PPUSH
23824: CALL_OW 488
23828: NOT
23829: IFFALSE 23833
// exit ;
23831: GO 23940
// ComAnimCustom ( unit , 1 ) ;
23833: LD_VAR 0 1
23837: PPUSH
23838: LD_INT 1
23840: PPUSH
23841: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23845: LD_VAR 0 8
23849: PPUSH
23850: LD_VAR 0 9
23854: PPUSH
23855: LD_VAR 0 6
23859: PPUSH
23860: LD_VAR 0 7
23864: PPUSH
23865: CALL_OW 330
// repeat wait ( 1 ) ;
23869: LD_INT 1
23871: PPUSH
23872: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23876: LD_VAR 0 1
23880: PPUSH
23881: CALL_OW 316
23885: PUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 314
23895: OR
23896: PUSH
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 302
23906: NOT
23907: OR
23908: PUSH
23909: LD_VAR 0 1
23913: PPUSH
23914: CALL_OW 301
23918: OR
23919: IFFALSE 23869
// RemoveSeeing ( _x , _y , side ) ;
23921: LD_VAR 0 8
23925: PPUSH
23926: LD_VAR 0 9
23930: PPUSH
23931: LD_VAR 0 6
23935: PPUSH
23936: CALL_OW 331
// end ; end_of_file
23940: LD_VAR 0 4
23944: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23945: LD_VAR 0 1
23949: PUSH
23950: LD_INT 200
23952: DOUBLE
23953: GREATEREQUAL
23954: IFFALSE 23962
23956: LD_INT 299
23958: DOUBLE
23959: LESSEQUAL
23960: IFTRUE 23964
23962: GO 23996
23964: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23965: LD_VAR 0 1
23969: PPUSH
23970: LD_VAR 0 2
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: LD_VAR 0 4
23984: PPUSH
23985: LD_VAR 0 5
23989: PPUSH
23990: CALL 19683 0 5
23994: GO 24073
23996: LD_INT 300
23998: DOUBLE
23999: GREATEREQUAL
24000: IFFALSE 24008
24002: LD_INT 399
24004: DOUBLE
24005: LESSEQUAL
24006: IFTRUE 24010
24008: GO 24072
24010: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24011: LD_VAR 0 1
24015: PPUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_VAR 0 3
24025: PPUSH
24026: LD_VAR 0 4
24030: PPUSH
24031: LD_VAR 0 5
24035: PPUSH
24036: LD_VAR 0 6
24040: PPUSH
24041: LD_VAR 0 7
24045: PPUSH
24046: LD_VAR 0 8
24050: PPUSH
24051: LD_VAR 0 9
24055: PPUSH
24056: LD_VAR 0 10
24060: PPUSH
24061: LD_VAR 0 11
24065: PPUSH
24066: CALL 17325 0 11
24070: GO 24073
24072: POP
// end ;
24073: PPOPN 11
24075: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24076: LD_VAR 0 1
24080: PPUSH
24081: LD_VAR 0 2
24085: PPUSH
24086: LD_VAR 0 3
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: LD_VAR 0 5
24100: PPUSH
24101: CALL 19419 0 5
// end ; end_of_file
24105: PPOPN 5
24107: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
24108: LD_VAR 0 1
24112: PPUSH
24113: LD_VAR 0 2
24117: PPUSH
24118: LD_VAR 0 3
24122: PPUSH
24123: LD_VAR 0 4
24127: PPUSH
24128: LD_VAR 0 5
24132: PPUSH
24133: LD_VAR 0 6
24137: PPUSH
24138: CALL 5018 0 6
// end ;
24142: PPOPN 6
24144: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
24145: CALL 4993 0 0
// end ; end_of_file end_of_file
24149: PPOPN 1
24151: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24152: LD_INT 0
24154: PPUSH
// ar_miner := 81 ;
24155: LD_ADDR_EXP 100
24159: PUSH
24160: LD_INT 81
24162: ST_TO_ADDR
// ar_crane := 88 ;
24163: LD_ADDR_EXP 99
24167: PUSH
24168: LD_INT 88
24170: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24171: LD_ADDR_EXP 94
24175: PUSH
24176: LD_INT 89
24178: ST_TO_ADDR
// us_hack := 99 ;
24179: LD_ADDR_EXP 95
24183: PUSH
24184: LD_INT 99
24186: ST_TO_ADDR
// us_artillery := 97 ;
24187: LD_ADDR_EXP 96
24191: PUSH
24192: LD_INT 97
24194: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24195: LD_ADDR_EXP 97
24199: PUSH
24200: LD_INT 91
24202: ST_TO_ADDR
// ar_mortar := 92 ;
24203: LD_ADDR_EXP 98
24207: PUSH
24208: LD_INT 92
24210: ST_TO_ADDR
// ru_flamethrower := 93 ;
24211: LD_ADDR_EXP 101
24215: PUSH
24216: LD_INT 93
24218: ST_TO_ADDR
// ru_radar := 98 ;
24219: LD_ADDR_EXP 93
24223: PUSH
24224: LD_INT 98
24226: ST_TO_ADDR
// tech_Artillery := 80 ;
24227: LD_ADDR_EXP 102
24231: PUSH
24232: LD_INT 80
24234: ST_TO_ADDR
// tech_RadMat := 81 ;
24235: LD_ADDR_EXP 103
24239: PUSH
24240: LD_INT 81
24242: ST_TO_ADDR
// tech_BasicTools := 82 ;
24243: LD_ADDR_EXP 104
24247: PUSH
24248: LD_INT 82
24250: ST_TO_ADDR
// tech_Cargo := 83 ;
24251: LD_ADDR_EXP 105
24255: PUSH
24256: LD_INT 83
24258: ST_TO_ADDR
// tech_Track := 84 ;
24259: LD_ADDR_EXP 106
24263: PUSH
24264: LD_INT 84
24266: ST_TO_ADDR
// tech_Crane := 85 ;
24267: LD_ADDR_EXP 107
24271: PUSH
24272: LD_INT 85
24274: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24275: LD_ADDR_EXP 108
24279: PUSH
24280: LD_INT 86
24282: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24283: LD_ADDR_EXP 109
24287: PUSH
24288: LD_INT 87
24290: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24291: LD_ADDR_EXP 110
24295: PUSH
24296: LD_INT 88
24298: ST_TO_ADDR
// class_mastodont := 31 ;
24299: LD_ADDR_EXP 111
24303: PUSH
24304: LD_INT 31
24306: ST_TO_ADDR
// class_horse := 21 ;
24307: LD_ADDR_EXP 112
24311: PUSH
24312: LD_INT 21
24314: ST_TO_ADDR
// end ;
24315: LD_VAR 0 1
24319: RET
// every 1 do
24320: GO 24322
24322: DISABLE
// InitGlobalVariables ; end_of_file
24323: CALL 24152 0 0
24327: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
// if exist_mode then
24332: LD_VAR 0 2
24336: IFFALSE 24361
// unit := CreateCharacter ( prefix & ident ) else
24338: LD_ADDR_VAR 0 5
24342: PUSH
24343: LD_VAR 0 3
24347: PUSH
24348: LD_VAR 0 1
24352: STR
24353: PPUSH
24354: CALL_OW 34
24358: ST_TO_ADDR
24359: GO 24376
// unit := NewCharacter ( ident ) ;
24361: LD_ADDR_VAR 0 5
24365: PUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 25
24375: ST_TO_ADDR
// result := unit ;
24376: LD_ADDR_VAR 0 4
24380: PUSH
24381: LD_VAR 0 5
24385: ST_TO_ADDR
// end ;
24386: LD_VAR 0 4
24390: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24391: LD_INT 0
24393: PPUSH
24394: PPUSH
// if not side or not nation then
24395: LD_VAR 0 1
24399: NOT
24400: PUSH
24401: LD_VAR 0 2
24405: NOT
24406: OR
24407: IFFALSE 24411
// exit ;
24409: GO 25179
// case nation of nation_american :
24411: LD_VAR 0 2
24415: PUSH
24416: LD_INT 1
24418: DOUBLE
24419: EQUAL
24420: IFTRUE 24424
24422: GO 24638
24424: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24425: LD_ADDR_VAR 0 4
24429: PUSH
24430: LD_INT 35
24432: PUSH
24433: LD_INT 45
24435: PUSH
24436: LD_INT 46
24438: PUSH
24439: LD_INT 47
24441: PUSH
24442: LD_INT 82
24444: PUSH
24445: LD_INT 83
24447: PUSH
24448: LD_INT 84
24450: PUSH
24451: LD_INT 85
24453: PUSH
24454: LD_INT 86
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 6
24465: PUSH
24466: LD_INT 15
24468: PUSH
24469: LD_INT 16
24471: PUSH
24472: LD_INT 7
24474: PUSH
24475: LD_INT 12
24477: PUSH
24478: LD_INT 13
24480: PUSH
24481: LD_INT 10
24483: PUSH
24484: LD_INT 14
24486: PUSH
24487: LD_INT 20
24489: PUSH
24490: LD_INT 21
24492: PUSH
24493: LD_INT 22
24495: PUSH
24496: LD_INT 25
24498: PUSH
24499: LD_INT 32
24501: PUSH
24502: LD_INT 27
24504: PUSH
24505: LD_INT 36
24507: PUSH
24508: LD_INT 69
24510: PUSH
24511: LD_INT 39
24513: PUSH
24514: LD_INT 34
24516: PUSH
24517: LD_INT 40
24519: PUSH
24520: LD_INT 48
24522: PUSH
24523: LD_INT 49
24525: PUSH
24526: LD_INT 50
24528: PUSH
24529: LD_INT 51
24531: PUSH
24532: LD_INT 52
24534: PUSH
24535: LD_INT 53
24537: PUSH
24538: LD_INT 54
24540: PUSH
24541: LD_INT 55
24543: PUSH
24544: LD_INT 56
24546: PUSH
24547: LD_INT 57
24549: PUSH
24550: LD_INT 58
24552: PUSH
24553: LD_INT 59
24555: PUSH
24556: LD_INT 60
24558: PUSH
24559: LD_INT 61
24561: PUSH
24562: LD_INT 62
24564: PUSH
24565: LD_INT 80
24567: PUSH
24568: LD_INT 82
24570: PUSH
24571: LD_INT 83
24573: PUSH
24574: LD_INT 84
24576: PUSH
24577: LD_INT 85
24579: PUSH
24580: LD_INT 86
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: ST_TO_ADDR
24636: GO 25103
24638: LD_INT 2
24640: DOUBLE
24641: EQUAL
24642: IFTRUE 24646
24644: GO 24872
24646: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24647: LD_ADDR_VAR 0 4
24651: PUSH
24652: LD_INT 35
24654: PUSH
24655: LD_INT 45
24657: PUSH
24658: LD_INT 46
24660: PUSH
24661: LD_INT 47
24663: PUSH
24664: LD_INT 82
24666: PUSH
24667: LD_INT 83
24669: PUSH
24670: LD_INT 84
24672: PUSH
24673: LD_INT 85
24675: PUSH
24676: LD_INT 87
24678: PUSH
24679: LD_INT 70
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: LD_INT 11
24687: PUSH
24688: LD_INT 3
24690: PUSH
24691: LD_INT 4
24693: PUSH
24694: LD_INT 5
24696: PUSH
24697: LD_INT 6
24699: PUSH
24700: LD_INT 15
24702: PUSH
24703: LD_INT 18
24705: PUSH
24706: LD_INT 7
24708: PUSH
24709: LD_INT 17
24711: PUSH
24712: LD_INT 8
24714: PUSH
24715: LD_INT 20
24717: PUSH
24718: LD_INT 21
24720: PUSH
24721: LD_INT 22
24723: PUSH
24724: LD_INT 72
24726: PUSH
24727: LD_INT 26
24729: PUSH
24730: LD_INT 69
24732: PUSH
24733: LD_INT 39
24735: PUSH
24736: LD_INT 40
24738: PUSH
24739: LD_INT 41
24741: PUSH
24742: LD_INT 42
24744: PUSH
24745: LD_INT 43
24747: PUSH
24748: LD_INT 48
24750: PUSH
24751: LD_INT 49
24753: PUSH
24754: LD_INT 50
24756: PUSH
24757: LD_INT 51
24759: PUSH
24760: LD_INT 52
24762: PUSH
24763: LD_INT 53
24765: PUSH
24766: LD_INT 54
24768: PUSH
24769: LD_INT 55
24771: PUSH
24772: LD_INT 56
24774: PUSH
24775: LD_INT 60
24777: PUSH
24778: LD_INT 61
24780: PUSH
24781: LD_INT 62
24783: PUSH
24784: LD_INT 66
24786: PUSH
24787: LD_INT 67
24789: PUSH
24790: LD_INT 68
24792: PUSH
24793: LD_INT 81
24795: PUSH
24796: LD_INT 82
24798: PUSH
24799: LD_INT 83
24801: PUSH
24802: LD_INT 84
24804: PUSH
24805: LD_INT 85
24807: PUSH
24808: LD_INT 87
24810: PUSH
24811: LD_INT 88
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: ST_TO_ADDR
24870: GO 25103
24872: LD_INT 3
24874: DOUBLE
24875: EQUAL
24876: IFTRUE 24880
24878: GO 25102
24880: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24881: LD_ADDR_VAR 0 4
24885: PUSH
24886: LD_INT 46
24888: PUSH
24889: LD_INT 47
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 82
24900: PUSH
24901: LD_INT 83
24903: PUSH
24904: LD_INT 84
24906: PUSH
24907: LD_INT 85
24909: PUSH
24910: LD_INT 86
24912: PUSH
24913: LD_INT 11
24915: PUSH
24916: LD_INT 9
24918: PUSH
24919: LD_INT 20
24921: PUSH
24922: LD_INT 19
24924: PUSH
24925: LD_INT 21
24927: PUSH
24928: LD_INT 24
24930: PUSH
24931: LD_INT 22
24933: PUSH
24934: LD_INT 25
24936: PUSH
24937: LD_INT 28
24939: PUSH
24940: LD_INT 29
24942: PUSH
24943: LD_INT 30
24945: PUSH
24946: LD_INT 31
24948: PUSH
24949: LD_INT 37
24951: PUSH
24952: LD_INT 38
24954: PUSH
24955: LD_INT 32
24957: PUSH
24958: LD_INT 27
24960: PUSH
24961: LD_INT 33
24963: PUSH
24964: LD_INT 69
24966: PUSH
24967: LD_INT 39
24969: PUSH
24970: LD_INT 34
24972: PUSH
24973: LD_INT 40
24975: PUSH
24976: LD_INT 71
24978: PUSH
24979: LD_INT 23
24981: PUSH
24982: LD_INT 44
24984: PUSH
24985: LD_INT 48
24987: PUSH
24988: LD_INT 49
24990: PUSH
24991: LD_INT 50
24993: PUSH
24994: LD_INT 51
24996: PUSH
24997: LD_INT 52
24999: PUSH
25000: LD_INT 53
25002: PUSH
25003: LD_INT 54
25005: PUSH
25006: LD_INT 55
25008: PUSH
25009: LD_INT 56
25011: PUSH
25012: LD_INT 57
25014: PUSH
25015: LD_INT 58
25017: PUSH
25018: LD_INT 59
25020: PUSH
25021: LD_INT 63
25023: PUSH
25024: LD_INT 64
25026: PUSH
25027: LD_INT 65
25029: PUSH
25030: LD_INT 82
25032: PUSH
25033: LD_INT 83
25035: PUSH
25036: LD_INT 84
25038: PUSH
25039: LD_INT 85
25041: PUSH
25042: LD_INT 86
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: ST_TO_ADDR
25100: GO 25103
25102: POP
// if state > - 1 and state < 3 then
25103: LD_VAR 0 3
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: GREATER
25112: PUSH
25113: LD_VAR 0 3
25117: PUSH
25118: LD_INT 3
25120: LESS
25121: AND
25122: IFFALSE 25179
// for i in result do
25124: LD_ADDR_VAR 0 5
25128: PUSH
25129: LD_VAR 0 4
25133: PUSH
25134: FOR_IN
25135: IFFALSE 25177
// if GetTech ( i , side ) <> state then
25137: LD_VAR 0 5
25141: PPUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: CALL_OW 321
25151: PUSH
25152: LD_VAR 0 3
25156: NONEQUAL
25157: IFFALSE 25175
// result := result diff i ;
25159: LD_ADDR_VAR 0 4
25163: PUSH
25164: LD_VAR 0 4
25168: PUSH
25169: LD_VAR 0 5
25173: DIFF
25174: ST_TO_ADDR
25175: GO 25134
25177: POP
25178: POP
// end ;
25179: LD_VAR 0 4
25183: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25184: LD_INT 0
25186: PPUSH
25187: PPUSH
25188: PPUSH
// result := true ;
25189: LD_ADDR_VAR 0 3
25193: PUSH
25194: LD_INT 1
25196: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25197: LD_ADDR_VAR 0 5
25201: PUSH
25202: LD_VAR 0 2
25206: PPUSH
25207: CALL_OW 480
25211: ST_TO_ADDR
// if not tmp then
25212: LD_VAR 0 5
25216: NOT
25217: IFFALSE 25221
// exit ;
25219: GO 25270
// for i in tmp do
25221: LD_ADDR_VAR 0 4
25225: PUSH
25226: LD_VAR 0 5
25230: PUSH
25231: FOR_IN
25232: IFFALSE 25268
// if GetTech ( i , side ) <> state_researched then
25234: LD_VAR 0 4
25238: PPUSH
25239: LD_VAR 0 1
25243: PPUSH
25244: CALL_OW 321
25248: PUSH
25249: LD_INT 2
25251: NONEQUAL
25252: IFFALSE 25266
// begin result := false ;
25254: LD_ADDR_VAR 0 3
25258: PUSH
25259: LD_INT 0
25261: ST_TO_ADDR
// exit ;
25262: POP
25263: POP
25264: GO 25270
// end ;
25266: GO 25231
25268: POP
25269: POP
// end ;
25270: LD_VAR 0 3
25274: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25275: LD_INT 0
25277: PPUSH
25278: PPUSH
25279: PPUSH
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
25289: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25290: LD_VAR 0 1
25294: NOT
25295: PUSH
25296: LD_VAR 0 1
25300: PPUSH
25301: CALL_OW 257
25305: PUSH
25306: LD_INT 9
25308: NONEQUAL
25309: OR
25310: IFFALSE 25314
// exit ;
25312: GO 25887
// side := GetSide ( unit ) ;
25314: LD_ADDR_VAR 0 9
25318: PUSH
25319: LD_VAR 0 1
25323: PPUSH
25324: CALL_OW 255
25328: ST_TO_ADDR
// tech_space := tech_spacanom ;
25329: LD_ADDR_VAR 0 12
25333: PUSH
25334: LD_INT 29
25336: ST_TO_ADDR
// tech_time := tech_taurad ;
25337: LD_ADDR_VAR 0 13
25341: PUSH
25342: LD_INT 28
25344: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25345: LD_ADDR_VAR 0 11
25349: PUSH
25350: LD_VAR 0 1
25354: PPUSH
25355: CALL_OW 310
25359: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25360: LD_VAR 0 11
25364: PPUSH
25365: CALL_OW 247
25369: PUSH
25370: LD_INT 2
25372: EQUAL
25373: IFFALSE 25377
// exit ;
25375: GO 25887
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25377: LD_ADDR_VAR 0 8
25381: PUSH
25382: LD_INT 81
25384: PUSH
25385: LD_VAR 0 9
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: LD_INT 21
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PPUSH
25415: CALL_OW 69
25419: ST_TO_ADDR
// if not tmp then
25420: LD_VAR 0 8
25424: NOT
25425: IFFALSE 25429
// exit ;
25427: GO 25887
// if in_unit then
25429: LD_VAR 0 11
25433: IFFALSE 25457
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25435: LD_ADDR_VAR 0 10
25439: PUSH
25440: LD_VAR 0 8
25444: PPUSH
25445: LD_VAR 0 11
25449: PPUSH
25450: CALL_OW 74
25454: ST_TO_ADDR
25455: GO 25477
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25457: LD_ADDR_VAR 0 10
25461: PUSH
25462: LD_VAR 0 8
25466: PPUSH
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 74
25476: ST_TO_ADDR
// if not enemy then
25477: LD_VAR 0 10
25481: NOT
25482: IFFALSE 25486
// exit ;
25484: GO 25887
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25486: LD_VAR 0 11
25490: PUSH
25491: LD_VAR 0 11
25495: PPUSH
25496: LD_VAR 0 10
25500: PPUSH
25501: CALL_OW 296
25505: PUSH
25506: LD_INT 13
25508: GREATER
25509: AND
25510: PUSH
25511: LD_VAR 0 1
25515: PPUSH
25516: LD_VAR 0 10
25520: PPUSH
25521: CALL_OW 296
25525: PUSH
25526: LD_INT 12
25528: GREATER
25529: OR
25530: IFFALSE 25534
// exit ;
25532: GO 25887
// missile := [ 1 ] ;
25534: LD_ADDR_VAR 0 14
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25545: LD_VAR 0 9
25549: PPUSH
25550: LD_VAR 0 12
25554: PPUSH
25555: CALL_OW 325
25559: IFFALSE 25588
// missile := Replace ( missile , missile + 1 , 2 ) ;
25561: LD_ADDR_VAR 0 14
25565: PUSH
25566: LD_VAR 0 14
25570: PPUSH
25571: LD_VAR 0 14
25575: PUSH
25576: LD_INT 1
25578: PLUS
25579: PPUSH
25580: LD_INT 2
25582: PPUSH
25583: CALL_OW 1
25587: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25588: LD_VAR 0 9
25592: PPUSH
25593: LD_VAR 0 13
25597: PPUSH
25598: CALL_OW 325
25602: PUSH
25603: LD_VAR 0 10
25607: PPUSH
25608: CALL_OW 255
25612: PPUSH
25613: LD_VAR 0 13
25617: PPUSH
25618: CALL_OW 325
25622: NOT
25623: AND
25624: IFFALSE 25653
// missile := Replace ( missile , missile + 1 , 3 ) ;
25626: LD_ADDR_VAR 0 14
25630: PUSH
25631: LD_VAR 0 14
25635: PPUSH
25636: LD_VAR 0 14
25640: PUSH
25641: LD_INT 1
25643: PLUS
25644: PPUSH
25645: LD_INT 3
25647: PPUSH
25648: CALL_OW 1
25652: ST_TO_ADDR
// if missile < 2 then
25653: LD_VAR 0 14
25657: PUSH
25658: LD_INT 2
25660: LESS
25661: IFFALSE 25665
// exit ;
25663: GO 25887
// x := GetX ( enemy ) ;
25665: LD_ADDR_VAR 0 4
25669: PUSH
25670: LD_VAR 0 10
25674: PPUSH
25675: CALL_OW 250
25679: ST_TO_ADDR
// y := GetY ( enemy ) ;
25680: LD_ADDR_VAR 0 5
25684: PUSH
25685: LD_VAR 0 10
25689: PPUSH
25690: CALL_OW 251
25694: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25695: LD_ADDR_VAR 0 6
25699: PUSH
25700: LD_VAR 0 4
25704: PUSH
25705: LD_INT 1
25707: NEG
25708: PPUSH
25709: LD_INT 1
25711: PPUSH
25712: CALL_OW 12
25716: PLUS
25717: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25718: LD_ADDR_VAR 0 7
25722: PUSH
25723: LD_VAR 0 5
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PPUSH
25732: LD_INT 1
25734: PPUSH
25735: CALL_OW 12
25739: PLUS
25740: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25741: LD_VAR 0 6
25745: PPUSH
25746: LD_VAR 0 7
25750: PPUSH
25751: CALL_OW 488
25755: NOT
25756: IFFALSE 25778
// begin _x := x ;
25758: LD_ADDR_VAR 0 6
25762: PUSH
25763: LD_VAR 0 4
25767: ST_TO_ADDR
// _y := y ;
25768: LD_ADDR_VAR 0 7
25772: PUSH
25773: LD_VAR 0 5
25777: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25778: LD_ADDR_VAR 0 3
25782: PUSH
25783: LD_INT 1
25785: PPUSH
25786: LD_VAR 0 14
25790: PPUSH
25791: CALL_OW 12
25795: ST_TO_ADDR
// case i of 1 :
25796: LD_VAR 0 3
25800: PUSH
25801: LD_INT 1
25803: DOUBLE
25804: EQUAL
25805: IFTRUE 25809
25807: GO 25826
25809: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25810: LD_VAR 0 1
25814: PPUSH
25815: LD_VAR 0 10
25819: PPUSH
25820: CALL_OW 115
25824: GO 25887
25826: LD_INT 2
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 25856
25834: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25835: LD_VAR 0 1
25839: PPUSH
25840: LD_VAR 0 6
25844: PPUSH
25845: LD_VAR 0 7
25849: PPUSH
25850: CALL_OW 153
25854: GO 25887
25856: LD_INT 3
25858: DOUBLE
25859: EQUAL
25860: IFTRUE 25864
25862: GO 25886
25864: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25865: LD_VAR 0 1
25869: PPUSH
25870: LD_VAR 0 6
25874: PPUSH
25875: LD_VAR 0 7
25879: PPUSH
25880: CALL_OW 154
25884: GO 25887
25886: POP
// end ;
25887: LD_VAR 0 2
25891: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25892: LD_INT 0
25894: PPUSH
25895: PPUSH
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
// if not unit or not building then
25900: LD_VAR 0 1
25904: NOT
25905: PUSH
25906: LD_VAR 0 2
25910: NOT
25911: OR
25912: IFFALSE 25916
// exit ;
25914: GO 26074
// x := GetX ( building ) ;
25916: LD_ADDR_VAR 0 5
25920: PUSH
25921: LD_VAR 0 2
25925: PPUSH
25926: CALL_OW 250
25930: ST_TO_ADDR
// y := GetY ( building ) ;
25931: LD_ADDR_VAR 0 6
25935: PUSH
25936: LD_VAR 0 2
25940: PPUSH
25941: CALL_OW 251
25945: ST_TO_ADDR
// for i = 0 to 5 do
25946: LD_ADDR_VAR 0 4
25950: PUSH
25951: DOUBLE
25952: LD_INT 0
25954: DEC
25955: ST_TO_ADDR
25956: LD_INT 5
25958: PUSH
25959: FOR_TO
25960: IFFALSE 26072
// begin _x := ShiftX ( x , i , 3 ) ;
25962: LD_ADDR_VAR 0 7
25966: PUSH
25967: LD_VAR 0 5
25971: PPUSH
25972: LD_VAR 0 4
25976: PPUSH
25977: LD_INT 3
25979: PPUSH
25980: CALL_OW 272
25984: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25985: LD_ADDR_VAR 0 8
25989: PUSH
25990: LD_VAR 0 6
25994: PPUSH
25995: LD_VAR 0 4
25999: PPUSH
26000: LD_INT 3
26002: PPUSH
26003: CALL_OW 273
26007: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26008: LD_VAR 0 7
26012: PPUSH
26013: LD_VAR 0 8
26017: PPUSH
26018: CALL_OW 488
26022: NOT
26023: IFFALSE 26027
// continue ;
26025: GO 25959
// if HexInfo ( _x , _y ) = 0 then
26027: LD_VAR 0 7
26031: PPUSH
26032: LD_VAR 0 8
26036: PPUSH
26037: CALL_OW 428
26041: PUSH
26042: LD_INT 0
26044: EQUAL
26045: IFFALSE 26070
// begin ComMoveXY ( unit , _x , _y ) ;
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_VAR 0 7
26056: PPUSH
26057: LD_VAR 0 8
26061: PPUSH
26062: CALL_OW 111
// exit ;
26066: POP
26067: POP
26068: GO 26074
// end ; end ;
26070: GO 25959
26072: POP
26073: POP
// end ;
26074: LD_VAR 0 3
26078: RET
// export function ScanBase ( side , base_area ) ; begin
26079: LD_INT 0
26081: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26082: LD_ADDR_VAR 0 3
26086: PUSH
26087: LD_VAR 0 2
26091: PPUSH
26092: LD_INT 81
26094: PUSH
26095: LD_VAR 0 1
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PPUSH
26104: CALL_OW 70
26108: ST_TO_ADDR
// end ;
26109: LD_VAR 0 3
26113: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26114: LD_INT 0
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
// result := false ;
26120: LD_ADDR_VAR 0 2
26124: PUSH
26125: LD_INT 0
26127: ST_TO_ADDR
// side := GetSide ( unit ) ;
26128: LD_ADDR_VAR 0 3
26132: PUSH
26133: LD_VAR 0 1
26137: PPUSH
26138: CALL_OW 255
26142: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26143: LD_ADDR_VAR 0 4
26147: PUSH
26148: LD_VAR 0 1
26152: PPUSH
26153: CALL_OW 248
26157: ST_TO_ADDR
// case nat of 1 :
26158: LD_VAR 0 4
26162: PUSH
26163: LD_INT 1
26165: DOUBLE
26166: EQUAL
26167: IFTRUE 26171
26169: GO 26182
26171: POP
// tech := tech_lassight ; 2 :
26172: LD_ADDR_VAR 0 5
26176: PUSH
26177: LD_INT 12
26179: ST_TO_ADDR
26180: GO 26221
26182: LD_INT 2
26184: DOUBLE
26185: EQUAL
26186: IFTRUE 26190
26188: GO 26201
26190: POP
// tech := tech_mortar ; 3 :
26191: LD_ADDR_VAR 0 5
26195: PUSH
26196: LD_INT 41
26198: ST_TO_ADDR
26199: GO 26221
26201: LD_INT 3
26203: DOUBLE
26204: EQUAL
26205: IFTRUE 26209
26207: GO 26220
26209: POP
// tech := tech_bazooka ; end ;
26210: LD_ADDR_VAR 0 5
26214: PUSH
26215: LD_INT 44
26217: ST_TO_ADDR
26218: GO 26221
26220: POP
// if Researched ( side , tech ) then
26221: LD_VAR 0 3
26225: PPUSH
26226: LD_VAR 0 5
26230: PPUSH
26231: CALL_OW 325
26235: IFFALSE 26262
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26237: LD_ADDR_VAR 0 2
26241: PUSH
26242: LD_INT 5
26244: PUSH
26245: LD_INT 8
26247: PUSH
26248: LD_INT 9
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: PUSH
26256: LD_VAR 0 4
26260: ARRAY
26261: ST_TO_ADDR
// end ;
26262: LD_VAR 0 2
26266: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26267: LD_INT 0
26269: PPUSH
26270: PPUSH
26271: PPUSH
// if not mines then
26272: LD_VAR 0 2
26276: NOT
26277: IFFALSE 26281
// exit ;
26279: GO 26425
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26281: LD_ADDR_VAR 0 5
26285: PUSH
26286: LD_INT 81
26288: PUSH
26289: LD_VAR 0 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: LD_INT 21
26303: PUSH
26304: LD_INT 3
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PPUSH
26319: CALL_OW 69
26323: ST_TO_ADDR
// for i in mines do
26324: LD_ADDR_VAR 0 4
26328: PUSH
26329: LD_VAR 0 2
26333: PUSH
26334: FOR_IN
26335: IFFALSE 26423
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26337: LD_VAR 0 4
26341: PUSH
26342: LD_INT 1
26344: ARRAY
26345: PPUSH
26346: LD_VAR 0 4
26350: PUSH
26351: LD_INT 2
26353: ARRAY
26354: PPUSH
26355: CALL_OW 458
26359: NOT
26360: IFFALSE 26364
// continue ;
26362: GO 26334
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26364: LD_VAR 0 4
26368: PUSH
26369: LD_INT 1
26371: ARRAY
26372: PPUSH
26373: LD_VAR 0 4
26377: PUSH
26378: LD_INT 2
26380: ARRAY
26381: PPUSH
26382: CALL_OW 428
26386: PUSH
26387: LD_VAR 0 5
26391: IN
26392: IFFALSE 26421
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26394: LD_VAR 0 4
26398: PUSH
26399: LD_INT 1
26401: ARRAY
26402: PPUSH
26403: LD_VAR 0 4
26407: PUSH
26408: LD_INT 2
26410: ARRAY
26411: PPUSH
26412: LD_VAR 0 1
26416: PPUSH
26417: CALL_OW 456
// end ;
26421: GO 26334
26423: POP
26424: POP
// end ;
26425: LD_VAR 0 3
26429: RET
// export function Count ( array ) ; var i ; begin
26430: LD_INT 0
26432: PPUSH
26433: PPUSH
// result := 0 ;
26434: LD_ADDR_VAR 0 2
26438: PUSH
26439: LD_INT 0
26441: ST_TO_ADDR
// for i in array do
26442: LD_ADDR_VAR 0 3
26446: PUSH
26447: LD_VAR 0 1
26451: PUSH
26452: FOR_IN
26453: IFFALSE 26477
// if i then
26455: LD_VAR 0 3
26459: IFFALSE 26475
// result := result + 1 ;
26461: LD_ADDR_VAR 0 2
26465: PUSH
26466: LD_VAR 0 2
26470: PUSH
26471: LD_INT 1
26473: PLUS
26474: ST_TO_ADDR
26475: GO 26452
26477: POP
26478: POP
// end ;
26479: LD_VAR 0 2
26483: RET
// export function IsEmpty ( building ) ; begin
26484: LD_INT 0
26486: PPUSH
// if not building then
26487: LD_VAR 0 1
26491: NOT
26492: IFFALSE 26496
// exit ;
26494: GO 26539
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26496: LD_ADDR_VAR 0 2
26500: PUSH
26501: LD_VAR 0 1
26505: PUSH
26506: LD_INT 22
26508: PUSH
26509: LD_VAR 0 1
26513: PPUSH
26514: CALL_OW 255
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 58
26525: PUSH
26526: EMPTY
26527: LIST
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PPUSH
26533: CALL_OW 69
26537: IN
26538: ST_TO_ADDR
// end ;
26539: LD_VAR 0 2
26543: RET
// export function IsNotFull ( building ) ; begin
26544: LD_INT 0
26546: PPUSH
// if not building then
26547: LD_VAR 0 1
26551: NOT
26552: IFFALSE 26556
// exit ;
26554: GO 26575
// result := UnitsInside ( building ) < 6 ;
26556: LD_ADDR_VAR 0 2
26560: PUSH
26561: LD_VAR 0 1
26565: PPUSH
26566: CALL_OW 313
26570: PUSH
26571: LD_INT 6
26573: LESS
26574: ST_TO_ADDR
// end ;
26575: LD_VAR 0 2
26579: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26580: LD_INT 0
26582: PPUSH
26583: PPUSH
26584: PPUSH
26585: PPUSH
// tmp := [ ] ;
26586: LD_ADDR_VAR 0 3
26590: PUSH
26591: EMPTY
26592: ST_TO_ADDR
// list := [ ] ;
26593: LD_ADDR_VAR 0 5
26597: PUSH
26598: EMPTY
26599: ST_TO_ADDR
// for i = 16 to 25 do
26600: LD_ADDR_VAR 0 4
26604: PUSH
26605: DOUBLE
26606: LD_INT 16
26608: DEC
26609: ST_TO_ADDR
26610: LD_INT 25
26612: PUSH
26613: FOR_TO
26614: IFFALSE 26687
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26616: LD_ADDR_VAR 0 3
26620: PUSH
26621: LD_VAR 0 3
26625: PUSH
26626: LD_INT 22
26628: PUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 255
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 91
26645: PUSH
26646: LD_VAR 0 1
26650: PUSH
26651: LD_INT 6
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 30
26661: PUSH
26662: LD_VAR 0 4
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: PPUSH
26679: CALL_OW 69
26683: ADD
26684: ST_TO_ADDR
26685: GO 26613
26687: POP
26688: POP
// for i = 1 to tmp do
26689: LD_ADDR_VAR 0 4
26693: PUSH
26694: DOUBLE
26695: LD_INT 1
26697: DEC
26698: ST_TO_ADDR
26699: LD_VAR 0 3
26703: PUSH
26704: FOR_TO
26705: IFFALSE 26793
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26707: LD_ADDR_VAR 0 5
26711: PUSH
26712: LD_VAR 0 5
26716: PUSH
26717: LD_VAR 0 3
26721: PUSH
26722: LD_VAR 0 4
26726: ARRAY
26727: PPUSH
26728: CALL_OW 266
26732: PUSH
26733: LD_VAR 0 3
26737: PUSH
26738: LD_VAR 0 4
26742: ARRAY
26743: PPUSH
26744: CALL_OW 250
26748: PUSH
26749: LD_VAR 0 3
26753: PUSH
26754: LD_VAR 0 4
26758: ARRAY
26759: PPUSH
26760: CALL_OW 251
26764: PUSH
26765: LD_VAR 0 3
26769: PUSH
26770: LD_VAR 0 4
26774: ARRAY
26775: PPUSH
26776: CALL_OW 254
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: ADD
26790: ST_TO_ADDR
26791: GO 26704
26793: POP
26794: POP
// result := list ;
26795: LD_ADDR_VAR 0 2
26799: PUSH
26800: LD_VAR 0 5
26804: ST_TO_ADDR
// end ;
26805: LD_VAR 0 2
26809: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26810: LD_INT 0
26812: PPUSH
26813: PPUSH
26814: PPUSH
26815: PPUSH
26816: PPUSH
26817: PPUSH
26818: PPUSH
// if not factory then
26819: LD_VAR 0 1
26823: NOT
26824: IFFALSE 26828
// exit ;
26826: GO 27421
// if control = control_apeman then
26828: LD_VAR 0 4
26832: PUSH
26833: LD_INT 5
26835: EQUAL
26836: IFFALSE 26945
// begin tmp := UnitsInside ( factory ) ;
26838: LD_ADDR_VAR 0 8
26842: PUSH
26843: LD_VAR 0 1
26847: PPUSH
26848: CALL_OW 313
26852: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26853: LD_VAR 0 8
26857: PPUSH
26858: LD_INT 25
26860: PUSH
26861: LD_INT 12
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PPUSH
26868: CALL_OW 72
26872: NOT
26873: IFFALSE 26883
// control := control_manual ;
26875: LD_ADDR_VAR 0 4
26879: PUSH
26880: LD_INT 1
26882: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26883: LD_ADDR_VAR 0 8
26887: PUSH
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL 26580 0 1
26897: ST_TO_ADDR
// if tmp then
26898: LD_VAR 0 8
26902: IFFALSE 26945
// begin for i in tmp do
26904: LD_ADDR_VAR 0 7
26908: PUSH
26909: LD_VAR 0 8
26913: PUSH
26914: FOR_IN
26915: IFFALSE 26943
// if i [ 1 ] = b_ext_radio then
26917: LD_VAR 0 7
26921: PUSH
26922: LD_INT 1
26924: ARRAY
26925: PUSH
26926: LD_INT 22
26928: EQUAL
26929: IFFALSE 26941
// begin control := control_remote ;
26931: LD_ADDR_VAR 0 4
26935: PUSH
26936: LD_INT 2
26938: ST_TO_ADDR
// break ;
26939: GO 26943
// end ;
26941: GO 26914
26943: POP
26944: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26945: LD_VAR 0 1
26949: PPUSH
26950: LD_VAR 0 2
26954: PPUSH
26955: LD_VAR 0 3
26959: PPUSH
26960: LD_VAR 0 4
26964: PPUSH
26965: LD_VAR 0 5
26969: PPUSH
26970: CALL_OW 448
26974: IFFALSE 27009
// begin result := [ chassis , engine , control , weapon ] ;
26976: LD_ADDR_VAR 0 6
26980: PUSH
26981: LD_VAR 0 2
26985: PUSH
26986: LD_VAR 0 3
26990: PUSH
26991: LD_VAR 0 4
26995: PUSH
26996: LD_VAR 0 5
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: ST_TO_ADDR
// exit ;
27007: GO 27421
// end ; _chassis := AvailableChassisList ( factory ) ;
27009: LD_ADDR_VAR 0 9
27013: PUSH
27014: LD_VAR 0 1
27018: PPUSH
27019: CALL_OW 475
27023: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27024: LD_ADDR_VAR 0 11
27028: PUSH
27029: LD_VAR 0 1
27033: PPUSH
27034: CALL_OW 476
27038: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27039: LD_ADDR_VAR 0 12
27043: PUSH
27044: LD_VAR 0 1
27048: PPUSH
27049: CALL_OW 477
27053: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27054: LD_ADDR_VAR 0 10
27058: PUSH
27059: LD_VAR 0 1
27063: PPUSH
27064: CALL_OW 478
27068: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27069: LD_VAR 0 9
27073: NOT
27074: PUSH
27075: LD_VAR 0 11
27079: NOT
27080: OR
27081: PUSH
27082: LD_VAR 0 12
27086: NOT
27087: OR
27088: PUSH
27089: LD_VAR 0 10
27093: NOT
27094: OR
27095: IFFALSE 27130
// begin result := [ chassis , engine , control , weapon ] ;
27097: LD_ADDR_VAR 0 6
27101: PUSH
27102: LD_VAR 0 2
27106: PUSH
27107: LD_VAR 0 3
27111: PUSH
27112: LD_VAR 0 4
27116: PUSH
27117: LD_VAR 0 5
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: ST_TO_ADDR
// exit ;
27128: GO 27421
// end ; if not chassis in _chassis then
27130: LD_VAR 0 2
27134: PUSH
27135: LD_VAR 0 9
27139: IN
27140: NOT
27141: IFFALSE 27167
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27143: LD_ADDR_VAR 0 2
27147: PUSH
27148: LD_VAR 0 9
27152: PUSH
27153: LD_INT 1
27155: PPUSH
27156: LD_VAR 0 9
27160: PPUSH
27161: CALL_OW 12
27165: ARRAY
27166: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27167: LD_VAR 0 2
27171: PPUSH
27172: LD_VAR 0 3
27176: PPUSH
27177: CALL 27426 0 2
27181: NOT
27182: IFFALSE 27241
// repeat engine := _engine [ 1 ] ;
27184: LD_ADDR_VAR 0 3
27188: PUSH
27189: LD_VAR 0 11
27193: PUSH
27194: LD_INT 1
27196: ARRAY
27197: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27198: LD_ADDR_VAR 0 11
27202: PUSH
27203: LD_VAR 0 11
27207: PPUSH
27208: LD_INT 1
27210: PPUSH
27211: CALL_OW 3
27215: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27216: LD_VAR 0 2
27220: PPUSH
27221: LD_VAR 0 3
27225: PPUSH
27226: CALL 27426 0 2
27230: PUSH
27231: LD_VAR 0 11
27235: PUSH
27236: EMPTY
27237: EQUAL
27238: OR
27239: IFFALSE 27184
// if not control in _control then
27241: LD_VAR 0 4
27245: PUSH
27246: LD_VAR 0 12
27250: IN
27251: NOT
27252: IFFALSE 27278
// control := _control [ rand ( 1 , _control ) ] ;
27254: LD_ADDR_VAR 0 4
27258: PUSH
27259: LD_VAR 0 12
27263: PUSH
27264: LD_INT 1
27266: PPUSH
27267: LD_VAR 0 12
27271: PPUSH
27272: CALL_OW 12
27276: ARRAY
27277: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27278: LD_VAR 0 2
27282: PPUSH
27283: LD_VAR 0 5
27287: PPUSH
27288: CALL 27646 0 2
27292: NOT
27293: IFFALSE 27352
// repeat weapon := _weapon [ 1 ] ;
27295: LD_ADDR_VAR 0 5
27299: PUSH
27300: LD_VAR 0 10
27304: PUSH
27305: LD_INT 1
27307: ARRAY
27308: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27309: LD_ADDR_VAR 0 10
27313: PUSH
27314: LD_VAR 0 10
27318: PPUSH
27319: LD_INT 1
27321: PPUSH
27322: CALL_OW 3
27326: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27327: LD_VAR 0 2
27331: PPUSH
27332: LD_VAR 0 5
27336: PPUSH
27337: CALL 27646 0 2
27341: PUSH
27342: LD_VAR 0 10
27346: PUSH
27347: EMPTY
27348: EQUAL
27349: OR
27350: IFFALSE 27295
// result := [ ] ;
27352: LD_ADDR_VAR 0 6
27356: PUSH
27357: EMPTY
27358: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27359: LD_VAR 0 1
27363: PPUSH
27364: LD_VAR 0 2
27368: PPUSH
27369: LD_VAR 0 3
27373: PPUSH
27374: LD_VAR 0 4
27378: PPUSH
27379: LD_VAR 0 5
27383: PPUSH
27384: CALL_OW 448
27388: IFFALSE 27421
// result := [ chassis , engine , control , weapon ] ;
27390: LD_ADDR_VAR 0 6
27394: PUSH
27395: LD_VAR 0 2
27399: PUSH
27400: LD_VAR 0 3
27404: PUSH
27405: LD_VAR 0 4
27409: PUSH
27410: LD_VAR 0 5
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// end ;
27421: LD_VAR 0 6
27425: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27426: LD_INT 0
27428: PPUSH
// if not chassis or not engine then
27429: LD_VAR 0 1
27433: NOT
27434: PUSH
27435: LD_VAR 0 2
27439: NOT
27440: OR
27441: IFFALSE 27445
// exit ;
27443: GO 27641
// case engine of engine_solar :
27445: LD_VAR 0 2
27449: PUSH
27450: LD_INT 2
27452: DOUBLE
27453: EQUAL
27454: IFTRUE 27458
27456: GO 27496
27458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27459: LD_ADDR_VAR 0 3
27463: PUSH
27464: LD_INT 11
27466: PUSH
27467: LD_INT 12
27469: PUSH
27470: LD_INT 13
27472: PUSH
27473: LD_INT 14
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: LD_INT 3
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: ST_TO_ADDR
27494: GO 27625
27496: LD_INT 1
27498: DOUBLE
27499: EQUAL
27500: IFTRUE 27504
27502: GO 27566
27504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27505: LD_ADDR_VAR 0 3
27509: PUSH
27510: LD_INT 11
27512: PUSH
27513: LD_INT 12
27515: PUSH
27516: LD_INT 13
27518: PUSH
27519: LD_INT 14
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: LD_INT 2
27527: PUSH
27528: LD_INT 3
27530: PUSH
27531: LD_INT 4
27533: PUSH
27534: LD_INT 5
27536: PUSH
27537: LD_INT 21
27539: PUSH
27540: LD_INT 23
27542: PUSH
27543: LD_INT 22
27545: PUSH
27546: LD_INT 24
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: ST_TO_ADDR
27564: GO 27625
27566: LD_INT 3
27568: DOUBLE
27569: EQUAL
27570: IFTRUE 27574
27572: GO 27624
27574: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27575: LD_ADDR_VAR 0 3
27579: PUSH
27580: LD_INT 13
27582: PUSH
27583: LD_INT 14
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 3
27591: PUSH
27592: LD_INT 4
27594: PUSH
27595: LD_INT 5
27597: PUSH
27598: LD_INT 21
27600: PUSH
27601: LD_INT 22
27603: PUSH
27604: LD_INT 23
27606: PUSH
27607: LD_INT 24
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: ST_TO_ADDR
27622: GO 27625
27624: POP
// result := ( chassis in result ) ;
27625: LD_ADDR_VAR 0 3
27629: PUSH
27630: LD_VAR 0 1
27634: PUSH
27635: LD_VAR 0 3
27639: IN
27640: ST_TO_ADDR
// end ;
27641: LD_VAR 0 3
27645: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27646: LD_INT 0
27648: PPUSH
// if not chassis or not weapon then
27649: LD_VAR 0 1
27653: NOT
27654: PUSH
27655: LD_VAR 0 2
27659: NOT
27660: OR
27661: IFFALSE 27665
// exit ;
27663: GO 28727
// case weapon of us_machine_gun :
27665: LD_VAR 0 2
27669: PUSH
27670: LD_INT 2
27672: DOUBLE
27673: EQUAL
27674: IFTRUE 27678
27676: GO 27708
27678: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27679: LD_ADDR_VAR 0 3
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: LD_INT 2
27689: PUSH
27690: LD_INT 3
27692: PUSH
27693: LD_INT 4
27695: PUSH
27696: LD_INT 5
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: ST_TO_ADDR
27706: GO 28711
27708: LD_INT 3
27710: DOUBLE
27711: EQUAL
27712: IFTRUE 27716
27714: GO 27746
27716: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27717: LD_ADDR_VAR 0 3
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: LD_INT 2
27727: PUSH
27728: LD_INT 3
27730: PUSH
27731: LD_INT 4
27733: PUSH
27734: LD_INT 5
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: ST_TO_ADDR
27744: GO 28711
27746: LD_INT 11
27748: DOUBLE
27749: EQUAL
27750: IFTRUE 27754
27752: GO 27784
27754: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27755: LD_ADDR_VAR 0 3
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: LD_INT 3
27768: PUSH
27769: LD_INT 4
27771: PUSH
27772: LD_INT 5
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: ST_TO_ADDR
27782: GO 28711
27784: LD_INT 4
27786: DOUBLE
27787: EQUAL
27788: IFTRUE 27792
27790: GO 27818
27792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27793: LD_ADDR_VAR 0 3
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 3
27803: PUSH
27804: LD_INT 4
27806: PUSH
27807: LD_INT 5
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: ST_TO_ADDR
27816: GO 28711
27818: LD_INT 5
27820: DOUBLE
27821: EQUAL
27822: IFTRUE 27826
27824: GO 27852
27826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27827: LD_ADDR_VAR 0 3
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: LD_INT 3
27837: PUSH
27838: LD_INT 4
27840: PUSH
27841: LD_INT 5
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: ST_TO_ADDR
27850: GO 28711
27852: LD_INT 9
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 27886
27860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27861: LD_ADDR_VAR 0 3
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: LD_INT 4
27874: PUSH
27875: LD_INT 5
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
27884: GO 28711
27886: LD_INT 7
27888: DOUBLE
27889: EQUAL
27890: IFTRUE 27894
27892: GO 27920
27894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27895: LD_ADDR_VAR 0 3
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: LD_INT 3
27905: PUSH
27906: LD_INT 4
27908: PUSH
27909: LD_INT 5
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
27918: GO 28711
27920: LD_INT 12
27922: DOUBLE
27923: EQUAL
27924: IFTRUE 27928
27926: GO 27954
27928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: LD_INT 4
27942: PUSH
27943: LD_INT 5
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
27952: GO 28711
27954: LD_INT 13
27956: DOUBLE
27957: EQUAL
27958: IFTRUE 27962
27960: GO 27988
27962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27963: LD_ADDR_VAR 0 3
27967: PUSH
27968: LD_INT 2
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: LD_INT 4
27976: PUSH
27977: LD_INT 5
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
27986: GO 28711
27988: LD_INT 14
27990: DOUBLE
27991: EQUAL
27992: IFTRUE 27996
27994: GO 28014
27996: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_INT 4
28004: PUSH
28005: LD_INT 5
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: ST_TO_ADDR
28012: GO 28711
28014: LD_INT 6
28016: DOUBLE
28017: EQUAL
28018: IFTRUE 28022
28020: GO 28040
28022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_INT 4
28030: PUSH
28031: LD_INT 5
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: ST_TO_ADDR
28038: GO 28711
28040: LD_INT 10
28042: DOUBLE
28043: EQUAL
28044: IFTRUE 28048
28046: GO 28066
28048: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28049: LD_ADDR_VAR 0 3
28053: PUSH
28054: LD_INT 4
28056: PUSH
28057: LD_INT 5
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: ST_TO_ADDR
28064: GO 28711
28066: LD_INT 22
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28100
28074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28075: LD_ADDR_VAR 0 3
28079: PUSH
28080: LD_INT 11
28082: PUSH
28083: LD_INT 12
28085: PUSH
28086: LD_INT 13
28088: PUSH
28089: LD_INT 14
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
28098: GO 28711
28100: LD_INT 23
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28134
28108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_INT 11
28116: PUSH
28117: LD_INT 12
28119: PUSH
28120: LD_INT 13
28122: PUSH
28123: LD_INT 14
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: ST_TO_ADDR
28132: GO 28711
28134: LD_INT 24
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28168
28142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28143: LD_ADDR_VAR 0 3
28147: PUSH
28148: LD_INT 11
28150: PUSH
28151: LD_INT 12
28153: PUSH
28154: LD_INT 13
28156: PUSH
28157: LD_INT 14
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: ST_TO_ADDR
28166: GO 28711
28168: LD_INT 30
28170: DOUBLE
28171: EQUAL
28172: IFTRUE 28176
28174: GO 28202
28176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28177: LD_ADDR_VAR 0 3
28181: PUSH
28182: LD_INT 11
28184: PUSH
28185: LD_INT 12
28187: PUSH
28188: LD_INT 13
28190: PUSH
28191: LD_INT 14
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: ST_TO_ADDR
28200: GO 28711
28202: LD_INT 25
28204: DOUBLE
28205: EQUAL
28206: IFTRUE 28210
28208: GO 28228
28210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28211: LD_ADDR_VAR 0 3
28215: PUSH
28216: LD_INT 13
28218: PUSH
28219: LD_INT 14
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: ST_TO_ADDR
28226: GO 28711
28228: LD_INT 27
28230: DOUBLE
28231: EQUAL
28232: IFTRUE 28236
28234: GO 28254
28236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28237: LD_ADDR_VAR 0 3
28241: PUSH
28242: LD_INT 13
28244: PUSH
28245: LD_INT 14
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: ST_TO_ADDR
28252: GO 28711
28254: LD_EXP 98
28258: DOUBLE
28259: EQUAL
28260: IFTRUE 28264
28262: GO 28290
28264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28265: LD_ADDR_VAR 0 3
28269: PUSH
28270: LD_INT 11
28272: PUSH
28273: LD_INT 12
28275: PUSH
28276: LD_INT 13
28278: PUSH
28279: LD_INT 14
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
28288: GO 28711
28290: LD_INT 28
28292: DOUBLE
28293: EQUAL
28294: IFTRUE 28298
28296: GO 28316
28298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28299: LD_ADDR_VAR 0 3
28303: PUSH
28304: LD_INT 13
28306: PUSH
28307: LD_INT 14
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: ST_TO_ADDR
28314: GO 28711
28316: LD_INT 29
28318: DOUBLE
28319: EQUAL
28320: IFTRUE 28324
28322: GO 28342
28324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: LD_INT 13
28332: PUSH
28333: LD_INT 14
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: ST_TO_ADDR
28340: GO 28711
28342: LD_INT 31
28344: DOUBLE
28345: EQUAL
28346: IFTRUE 28350
28348: GO 28368
28350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28351: LD_ADDR_VAR 0 3
28355: PUSH
28356: LD_INT 13
28358: PUSH
28359: LD_INT 14
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: ST_TO_ADDR
28366: GO 28711
28368: LD_INT 26
28370: DOUBLE
28371: EQUAL
28372: IFTRUE 28376
28374: GO 28394
28376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28377: LD_ADDR_VAR 0 3
28381: PUSH
28382: LD_INT 13
28384: PUSH
28385: LD_INT 14
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: ST_TO_ADDR
28392: GO 28711
28394: LD_INT 42
28396: DOUBLE
28397: EQUAL
28398: IFTRUE 28402
28400: GO 28428
28402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28403: LD_ADDR_VAR 0 3
28407: PUSH
28408: LD_INT 21
28410: PUSH
28411: LD_INT 22
28413: PUSH
28414: LD_INT 23
28416: PUSH
28417: LD_INT 24
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: ST_TO_ADDR
28426: GO 28711
28428: LD_INT 43
28430: DOUBLE
28431: EQUAL
28432: IFTRUE 28436
28434: GO 28462
28436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28437: LD_ADDR_VAR 0 3
28441: PUSH
28442: LD_INT 21
28444: PUSH
28445: LD_INT 22
28447: PUSH
28448: LD_INT 23
28450: PUSH
28451: LD_INT 24
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: ST_TO_ADDR
28460: GO 28711
28462: LD_INT 44
28464: DOUBLE
28465: EQUAL
28466: IFTRUE 28470
28468: GO 28496
28470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28471: LD_ADDR_VAR 0 3
28475: PUSH
28476: LD_INT 21
28478: PUSH
28479: LD_INT 22
28481: PUSH
28482: LD_INT 23
28484: PUSH
28485: LD_INT 24
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: ST_TO_ADDR
28494: GO 28711
28496: LD_INT 45
28498: DOUBLE
28499: EQUAL
28500: IFTRUE 28504
28502: GO 28530
28504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28505: LD_ADDR_VAR 0 3
28509: PUSH
28510: LD_INT 21
28512: PUSH
28513: LD_INT 22
28515: PUSH
28516: LD_INT 23
28518: PUSH
28519: LD_INT 24
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
28528: GO 28711
28530: LD_INT 49
28532: DOUBLE
28533: EQUAL
28534: IFTRUE 28538
28536: GO 28564
28538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28539: LD_ADDR_VAR 0 3
28543: PUSH
28544: LD_INT 21
28546: PUSH
28547: LD_INT 22
28549: PUSH
28550: LD_INT 23
28552: PUSH
28553: LD_INT 24
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: ST_TO_ADDR
28562: GO 28711
28564: LD_INT 51
28566: DOUBLE
28567: EQUAL
28568: IFTRUE 28572
28570: GO 28598
28572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28573: LD_ADDR_VAR 0 3
28577: PUSH
28578: LD_INT 21
28580: PUSH
28581: LD_INT 22
28583: PUSH
28584: LD_INT 23
28586: PUSH
28587: LD_INT 24
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: ST_TO_ADDR
28596: GO 28711
28598: LD_INT 52
28600: DOUBLE
28601: EQUAL
28602: IFTRUE 28606
28604: GO 28632
28606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28607: LD_ADDR_VAR 0 3
28611: PUSH
28612: LD_INT 21
28614: PUSH
28615: LD_INT 22
28617: PUSH
28618: LD_INT 23
28620: PUSH
28621: LD_INT 24
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
28630: GO 28711
28632: LD_INT 53
28634: DOUBLE
28635: EQUAL
28636: IFTRUE 28640
28638: GO 28658
28640: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28641: LD_ADDR_VAR 0 3
28645: PUSH
28646: LD_INT 23
28648: PUSH
28649: LD_INT 24
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: ST_TO_ADDR
28656: GO 28711
28658: LD_INT 46
28660: DOUBLE
28661: EQUAL
28662: IFTRUE 28666
28664: GO 28684
28666: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28667: LD_ADDR_VAR 0 3
28671: PUSH
28672: LD_INT 23
28674: PUSH
28675: LD_INT 24
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: ST_TO_ADDR
28682: GO 28711
28684: LD_INT 47
28686: DOUBLE
28687: EQUAL
28688: IFTRUE 28692
28690: GO 28710
28692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_INT 23
28700: PUSH
28701: LD_INT 24
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: ST_TO_ADDR
28708: GO 28711
28710: POP
// result := ( chassis in result ) ;
28711: LD_ADDR_VAR 0 3
28715: PUSH
28716: LD_VAR 0 1
28720: PUSH
28721: LD_VAR 0 3
28725: IN
28726: ST_TO_ADDR
// end ;
28727: LD_VAR 0 3
28731: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28732: LD_INT 0
28734: PPUSH
28735: PPUSH
28736: PPUSH
28737: PPUSH
28738: PPUSH
28739: PPUSH
28740: PPUSH
// result := array ;
28741: LD_ADDR_VAR 0 5
28745: PUSH
28746: LD_VAR 0 1
28750: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28751: LD_VAR 0 1
28755: NOT
28756: PUSH
28757: LD_VAR 0 2
28761: NOT
28762: OR
28763: PUSH
28764: LD_VAR 0 3
28768: NOT
28769: OR
28770: PUSH
28771: LD_VAR 0 2
28775: PUSH
28776: LD_VAR 0 1
28780: GREATER
28781: OR
28782: PUSH
28783: LD_VAR 0 3
28787: PUSH
28788: LD_VAR 0 1
28792: GREATER
28793: OR
28794: IFFALSE 28798
// exit ;
28796: GO 29094
// if direction then
28798: LD_VAR 0 4
28802: IFFALSE 28866
// begin d := 1 ;
28804: LD_ADDR_VAR 0 9
28808: PUSH
28809: LD_INT 1
28811: ST_TO_ADDR
// if i_from > i_to then
28812: LD_VAR 0 2
28816: PUSH
28817: LD_VAR 0 3
28821: GREATER
28822: IFFALSE 28848
// length := ( array - i_from ) + i_to else
28824: LD_ADDR_VAR 0 11
28828: PUSH
28829: LD_VAR 0 1
28833: PUSH
28834: LD_VAR 0 2
28838: MINUS
28839: PUSH
28840: LD_VAR 0 3
28844: PLUS
28845: ST_TO_ADDR
28846: GO 28864
// length := i_to - i_from ;
28848: LD_ADDR_VAR 0 11
28852: PUSH
28853: LD_VAR 0 3
28857: PUSH
28858: LD_VAR 0 2
28862: MINUS
28863: ST_TO_ADDR
// end else
28864: GO 28927
// begin d := - 1 ;
28866: LD_ADDR_VAR 0 9
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: ST_TO_ADDR
// if i_from > i_to then
28875: LD_VAR 0 2
28879: PUSH
28880: LD_VAR 0 3
28884: GREATER
28885: IFFALSE 28905
// length := i_from - i_to else
28887: LD_ADDR_VAR 0 11
28891: PUSH
28892: LD_VAR 0 2
28896: PUSH
28897: LD_VAR 0 3
28901: MINUS
28902: ST_TO_ADDR
28903: GO 28927
// length := ( array - i_to ) + i_from ;
28905: LD_ADDR_VAR 0 11
28909: PUSH
28910: LD_VAR 0 1
28914: PUSH
28915: LD_VAR 0 3
28919: MINUS
28920: PUSH
28921: LD_VAR 0 2
28925: PLUS
28926: ST_TO_ADDR
// end ; if not length then
28927: LD_VAR 0 11
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 29094
// tmp := array ;
28936: LD_ADDR_VAR 0 10
28940: PUSH
28941: LD_VAR 0 1
28945: ST_TO_ADDR
// for i = 1 to length do
28946: LD_ADDR_VAR 0 6
28950: PUSH
28951: DOUBLE
28952: LD_INT 1
28954: DEC
28955: ST_TO_ADDR
28956: LD_VAR 0 11
28960: PUSH
28961: FOR_TO
28962: IFFALSE 29082
// begin for j = 1 to array do
28964: LD_ADDR_VAR 0 7
28968: PUSH
28969: DOUBLE
28970: LD_INT 1
28972: DEC
28973: ST_TO_ADDR
28974: LD_VAR 0 1
28978: PUSH
28979: FOR_TO
28980: IFFALSE 29068
// begin k := j + d ;
28982: LD_ADDR_VAR 0 8
28986: PUSH
28987: LD_VAR 0 7
28991: PUSH
28992: LD_VAR 0 9
28996: PLUS
28997: ST_TO_ADDR
// if k > array then
28998: LD_VAR 0 8
29002: PUSH
29003: LD_VAR 0 1
29007: GREATER
29008: IFFALSE 29018
// k := 1 ;
29010: LD_ADDR_VAR 0 8
29014: PUSH
29015: LD_INT 1
29017: ST_TO_ADDR
// if not k then
29018: LD_VAR 0 8
29022: NOT
29023: IFFALSE 29035
// k := array ;
29025: LD_ADDR_VAR 0 8
29029: PUSH
29030: LD_VAR 0 1
29034: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29035: LD_ADDR_VAR 0 10
29039: PUSH
29040: LD_VAR 0 10
29044: PPUSH
29045: LD_VAR 0 8
29049: PPUSH
29050: LD_VAR 0 1
29054: PUSH
29055: LD_VAR 0 7
29059: ARRAY
29060: PPUSH
29061: CALL_OW 1
29065: ST_TO_ADDR
// end ;
29066: GO 28979
29068: POP
29069: POP
// array := tmp ;
29070: LD_ADDR_VAR 0 1
29074: PUSH
29075: LD_VAR 0 10
29079: ST_TO_ADDR
// end ;
29080: GO 28961
29082: POP
29083: POP
// result := array ;
29084: LD_ADDR_VAR 0 5
29088: PUSH
29089: LD_VAR 0 1
29093: ST_TO_ADDR
// end ;
29094: LD_VAR 0 5
29098: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29099: LD_INT 0
29101: PPUSH
29102: PPUSH
// result := 0 ;
29103: LD_ADDR_VAR 0 3
29107: PUSH
29108: LD_INT 0
29110: ST_TO_ADDR
// if not array or not value in array then
29111: LD_VAR 0 1
29115: NOT
29116: PUSH
29117: LD_VAR 0 2
29121: PUSH
29122: LD_VAR 0 1
29126: IN
29127: NOT
29128: OR
29129: IFFALSE 29133
// exit ;
29131: GO 29187
// for i = 1 to array do
29133: LD_ADDR_VAR 0 4
29137: PUSH
29138: DOUBLE
29139: LD_INT 1
29141: DEC
29142: ST_TO_ADDR
29143: LD_VAR 0 1
29147: PUSH
29148: FOR_TO
29149: IFFALSE 29185
// if value = array [ i ] then
29151: LD_VAR 0 2
29155: PUSH
29156: LD_VAR 0 1
29160: PUSH
29161: LD_VAR 0 4
29165: ARRAY
29166: EQUAL
29167: IFFALSE 29183
// begin result := i ;
29169: LD_ADDR_VAR 0 3
29173: PUSH
29174: LD_VAR 0 4
29178: ST_TO_ADDR
// exit ;
29179: POP
29180: POP
29181: GO 29187
// end ;
29183: GO 29148
29185: POP
29186: POP
// end ;
29187: LD_VAR 0 3
29191: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29192: LD_INT 0
29194: PPUSH
// vc_chassis := chassis ;
29195: LD_ADDR_OWVAR 37
29199: PUSH
29200: LD_VAR 0 1
29204: ST_TO_ADDR
// vc_engine := engine ;
29205: LD_ADDR_OWVAR 39
29209: PUSH
29210: LD_VAR 0 2
29214: ST_TO_ADDR
// vc_control := control ;
29215: LD_ADDR_OWVAR 38
29219: PUSH
29220: LD_VAR 0 3
29224: ST_TO_ADDR
// vc_weapon := weapon ;
29225: LD_ADDR_OWVAR 40
29229: PUSH
29230: LD_VAR 0 4
29234: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29235: LD_ADDR_OWVAR 41
29239: PUSH
29240: LD_VAR 0 5
29244: ST_TO_ADDR
// end ;
29245: LD_VAR 0 6
29249: RET
// export function WantPlant ( unit ) ; var task ; begin
29250: LD_INT 0
29252: PPUSH
29253: PPUSH
// result := false ;
29254: LD_ADDR_VAR 0 2
29258: PUSH
29259: LD_INT 0
29261: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29262: LD_ADDR_VAR 0 3
29266: PUSH
29267: LD_VAR 0 1
29271: PPUSH
29272: CALL_OW 437
29276: ST_TO_ADDR
// if task then
29277: LD_VAR 0 3
29281: IFFALSE 29309
// if task [ 1 ] [ 1 ] = p then
29283: LD_VAR 0 3
29287: PUSH
29288: LD_INT 1
29290: ARRAY
29291: PUSH
29292: LD_INT 1
29294: ARRAY
29295: PUSH
29296: LD_STRING p
29298: EQUAL
29299: IFFALSE 29309
// result := true ;
29301: LD_ADDR_VAR 0 2
29305: PUSH
29306: LD_INT 1
29308: ST_TO_ADDR
// end ;
29309: LD_VAR 0 2
29313: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29314: LD_INT 0
29316: PPUSH
29317: PPUSH
29318: PPUSH
29319: PPUSH
// if pos < 1 then
29320: LD_VAR 0 2
29324: PUSH
29325: LD_INT 1
29327: LESS
29328: IFFALSE 29332
// exit ;
29330: GO 29635
// if pos = 1 then
29332: LD_VAR 0 2
29336: PUSH
29337: LD_INT 1
29339: EQUAL
29340: IFFALSE 29373
// result := Replace ( arr , pos [ 1 ] , value ) else
29342: LD_ADDR_VAR 0 4
29346: PUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: LD_VAR 0 2
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: PPUSH
29361: LD_VAR 0 3
29365: PPUSH
29366: CALL_OW 1
29370: ST_TO_ADDR
29371: GO 29635
// begin tmp := arr ;
29373: LD_ADDR_VAR 0 6
29377: PUSH
29378: LD_VAR 0 1
29382: ST_TO_ADDR
// s_arr := [ tmp ] ;
29383: LD_ADDR_VAR 0 7
29387: PUSH
29388: LD_VAR 0 6
29392: PUSH
29393: EMPTY
29394: LIST
29395: ST_TO_ADDR
// for i = 1 to pos - 1 do
29396: LD_ADDR_VAR 0 5
29400: PUSH
29401: DOUBLE
29402: LD_INT 1
29404: DEC
29405: ST_TO_ADDR
29406: LD_VAR 0 2
29410: PUSH
29411: LD_INT 1
29413: MINUS
29414: PUSH
29415: FOR_TO
29416: IFFALSE 29461
// begin tmp := tmp [ pos [ i ] ] ;
29418: LD_ADDR_VAR 0 6
29422: PUSH
29423: LD_VAR 0 6
29427: PUSH
29428: LD_VAR 0 2
29432: PUSH
29433: LD_VAR 0 5
29437: ARRAY
29438: ARRAY
29439: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29440: LD_ADDR_VAR 0 7
29444: PUSH
29445: LD_VAR 0 7
29449: PUSH
29450: LD_VAR 0 6
29454: PUSH
29455: EMPTY
29456: LIST
29457: ADD
29458: ST_TO_ADDR
// end ;
29459: GO 29415
29461: POP
29462: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29463: LD_ADDR_VAR 0 6
29467: PUSH
29468: LD_VAR 0 6
29472: PPUSH
29473: LD_VAR 0 2
29477: PUSH
29478: LD_VAR 0 2
29482: ARRAY
29483: PPUSH
29484: LD_VAR 0 3
29488: PPUSH
29489: CALL_OW 1
29493: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29494: LD_ADDR_VAR 0 7
29498: PUSH
29499: LD_VAR 0 7
29503: PPUSH
29504: LD_VAR 0 7
29508: PPUSH
29509: LD_VAR 0 6
29513: PPUSH
29514: CALL_OW 1
29518: ST_TO_ADDR
// for i = s_arr downto 2 do
29519: LD_ADDR_VAR 0 5
29523: PUSH
29524: DOUBLE
29525: LD_VAR 0 7
29529: INC
29530: ST_TO_ADDR
29531: LD_INT 2
29533: PUSH
29534: FOR_DOWNTO
29535: IFFALSE 29619
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29537: LD_ADDR_VAR 0 6
29541: PUSH
29542: LD_VAR 0 7
29546: PUSH
29547: LD_VAR 0 5
29551: PUSH
29552: LD_INT 1
29554: MINUS
29555: ARRAY
29556: PPUSH
29557: LD_VAR 0 2
29561: PUSH
29562: LD_VAR 0 5
29566: PUSH
29567: LD_INT 1
29569: MINUS
29570: ARRAY
29571: PPUSH
29572: LD_VAR 0 7
29576: PUSH
29577: LD_VAR 0 5
29581: ARRAY
29582: PPUSH
29583: CALL_OW 1
29587: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29588: LD_ADDR_VAR 0 7
29592: PUSH
29593: LD_VAR 0 7
29597: PPUSH
29598: LD_VAR 0 5
29602: PUSH
29603: LD_INT 1
29605: MINUS
29606: PPUSH
29607: LD_VAR 0 6
29611: PPUSH
29612: CALL_OW 1
29616: ST_TO_ADDR
// end ;
29617: GO 29534
29619: POP
29620: POP
// result := s_arr [ 1 ] ;
29621: LD_ADDR_VAR 0 4
29625: PUSH
29626: LD_VAR 0 7
29630: PUSH
29631: LD_INT 1
29633: ARRAY
29634: ST_TO_ADDR
// end ; end ;
29635: LD_VAR 0 4
29639: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29640: LD_INT 0
29642: PPUSH
29643: PPUSH
// if not list then
29644: LD_VAR 0 1
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 29744
// i := list [ pos1 ] ;
29653: LD_ADDR_VAR 0 5
29657: PUSH
29658: LD_VAR 0 1
29662: PUSH
29663: LD_VAR 0 2
29667: ARRAY
29668: ST_TO_ADDR
// if not i then
29669: LD_VAR 0 5
29673: NOT
29674: IFFALSE 29678
// exit ;
29676: GO 29744
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29678: LD_ADDR_VAR 0 1
29682: PUSH
29683: LD_VAR 0 1
29687: PPUSH
29688: LD_VAR 0 2
29692: PPUSH
29693: LD_VAR 0 1
29697: PUSH
29698: LD_VAR 0 3
29702: ARRAY
29703: PPUSH
29704: CALL_OW 1
29708: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29709: LD_ADDR_VAR 0 1
29713: PUSH
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_VAR 0 3
29723: PPUSH
29724: LD_VAR 0 5
29728: PPUSH
29729: CALL_OW 1
29733: ST_TO_ADDR
// result := list ;
29734: LD_ADDR_VAR 0 4
29738: PUSH
29739: LD_VAR 0 1
29743: ST_TO_ADDR
// end ;
29744: LD_VAR 0 4
29748: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29749: LD_INT 0
29751: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29752: LD_ADDR_VAR 0 5
29756: PUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL_OW 250
29766: PPUSH
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 251
29776: PPUSH
29777: LD_VAR 0 2
29781: PPUSH
29782: LD_VAR 0 3
29786: PPUSH
29787: LD_VAR 0 4
29791: PPUSH
29792: CALL 29802 0 5
29796: ST_TO_ADDR
// end ;
29797: LD_VAR 0 5
29801: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29802: LD_INT 0
29804: PPUSH
29805: PPUSH
29806: PPUSH
29807: PPUSH
// if not list then
29808: LD_VAR 0 3
29812: NOT
29813: IFFALSE 29817
// exit ;
29815: GO 30205
// result := [ ] ;
29817: LD_ADDR_VAR 0 6
29821: PUSH
29822: EMPTY
29823: ST_TO_ADDR
// for i in list do
29824: LD_ADDR_VAR 0 7
29828: PUSH
29829: LD_VAR 0 3
29833: PUSH
29834: FOR_IN
29835: IFFALSE 30037
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29837: LD_ADDR_VAR 0 9
29841: PUSH
29842: LD_VAR 0 7
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: LD_VAR 0 2
29856: PPUSH
29857: CALL_OW 297
29861: ST_TO_ADDR
// if not result then
29862: LD_VAR 0 6
29866: NOT
29867: IFFALSE 29893
// result := [ [ i , tmp ] ] else
29869: LD_ADDR_VAR 0 6
29873: PUSH
29874: LD_VAR 0 7
29878: PUSH
29879: LD_VAR 0 9
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: EMPTY
29889: LIST
29890: ST_TO_ADDR
29891: GO 30035
// begin if result [ result ] [ 2 ] < tmp then
29893: LD_VAR 0 6
29897: PUSH
29898: LD_VAR 0 6
29902: ARRAY
29903: PUSH
29904: LD_INT 2
29906: ARRAY
29907: PUSH
29908: LD_VAR 0 9
29912: LESS
29913: IFFALSE 29955
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29915: LD_ADDR_VAR 0 6
29919: PUSH
29920: LD_VAR 0 6
29924: PPUSH
29925: LD_VAR 0 6
29929: PUSH
29930: LD_INT 1
29932: PLUS
29933: PPUSH
29934: LD_VAR 0 7
29938: PUSH
29939: LD_VAR 0 9
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PPUSH
29948: CALL_OW 2
29952: ST_TO_ADDR
29953: GO 30035
// for j = 1 to result do
29955: LD_ADDR_VAR 0 8
29959: PUSH
29960: DOUBLE
29961: LD_INT 1
29963: DEC
29964: ST_TO_ADDR
29965: LD_VAR 0 6
29969: PUSH
29970: FOR_TO
29971: IFFALSE 30033
// begin if tmp < result [ j ] [ 2 ] then
29973: LD_VAR 0 9
29977: PUSH
29978: LD_VAR 0 6
29982: PUSH
29983: LD_VAR 0 8
29987: ARRAY
29988: PUSH
29989: LD_INT 2
29991: ARRAY
29992: LESS
29993: IFFALSE 30031
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29995: LD_ADDR_VAR 0 6
29999: PUSH
30000: LD_VAR 0 6
30004: PPUSH
30005: LD_VAR 0 8
30009: PPUSH
30010: LD_VAR 0 7
30014: PUSH
30015: LD_VAR 0 9
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PPUSH
30024: CALL_OW 2
30028: ST_TO_ADDR
// break ;
30029: GO 30033
// end ; end ;
30031: GO 29970
30033: POP
30034: POP
// end ; end ;
30035: GO 29834
30037: POP
30038: POP
// if result and not asc then
30039: LD_VAR 0 6
30043: PUSH
30044: LD_VAR 0 4
30048: NOT
30049: AND
30050: IFFALSE 30125
// begin tmp := result ;
30052: LD_ADDR_VAR 0 9
30056: PUSH
30057: LD_VAR 0 6
30061: ST_TO_ADDR
// for i = tmp downto 1 do
30062: LD_ADDR_VAR 0 7
30066: PUSH
30067: DOUBLE
30068: LD_VAR 0 9
30072: INC
30073: ST_TO_ADDR
30074: LD_INT 1
30076: PUSH
30077: FOR_DOWNTO
30078: IFFALSE 30123
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30080: LD_ADDR_VAR 0 6
30084: PUSH
30085: LD_VAR 0 6
30089: PPUSH
30090: LD_VAR 0 9
30094: PUSH
30095: LD_VAR 0 7
30099: MINUS
30100: PUSH
30101: LD_INT 1
30103: PLUS
30104: PPUSH
30105: LD_VAR 0 9
30109: PUSH
30110: LD_VAR 0 7
30114: ARRAY
30115: PPUSH
30116: CALL_OW 1
30120: ST_TO_ADDR
30121: GO 30077
30123: POP
30124: POP
// end ; tmp := [ ] ;
30125: LD_ADDR_VAR 0 9
30129: PUSH
30130: EMPTY
30131: ST_TO_ADDR
// if mode then
30132: LD_VAR 0 5
30136: IFFALSE 30205
// begin for i = 1 to result do
30138: LD_ADDR_VAR 0 7
30142: PUSH
30143: DOUBLE
30144: LD_INT 1
30146: DEC
30147: ST_TO_ADDR
30148: LD_VAR 0 6
30152: PUSH
30153: FOR_TO
30154: IFFALSE 30193
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30156: LD_ADDR_VAR 0 9
30160: PUSH
30161: LD_VAR 0 9
30165: PPUSH
30166: LD_VAR 0 7
30170: PPUSH
30171: LD_VAR 0 6
30175: PUSH
30176: LD_VAR 0 7
30180: ARRAY
30181: PUSH
30182: LD_INT 1
30184: ARRAY
30185: PPUSH
30186: CALL_OW 1
30190: ST_TO_ADDR
30191: GO 30153
30193: POP
30194: POP
// result := tmp ;
30195: LD_ADDR_VAR 0 6
30199: PUSH
30200: LD_VAR 0 9
30204: ST_TO_ADDR
// end ; end ;
30205: LD_VAR 0 6
30209: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
30214: PPUSH
30215: PPUSH
30216: PPUSH
30217: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30218: LD_ADDR_VAR 0 5
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: EMPTY
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
// if not x or not y then
30240: LD_VAR 0 2
30244: NOT
30245: PUSH
30246: LD_VAR 0 3
30250: NOT
30251: OR
30252: IFFALSE 30256
// exit ;
30254: GO 31908
// if not range then
30256: LD_VAR 0 4
30260: NOT
30261: IFFALSE 30271
// range := 10 ;
30263: LD_ADDR_VAR 0 4
30267: PUSH
30268: LD_INT 10
30270: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30271: LD_ADDR_VAR 0 8
30275: PUSH
30276: LD_INT 81
30278: PUSH
30279: LD_VAR 0 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 92
30290: PUSH
30291: LD_VAR 0 2
30295: PUSH
30296: LD_VAR 0 3
30300: PUSH
30301: LD_VAR 0 4
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: LD_INT 21
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: PPUSH
30334: CALL_OW 69
30338: ST_TO_ADDR
// if not tmp then
30339: LD_VAR 0 8
30343: NOT
30344: IFFALSE 30348
// exit ;
30346: GO 31908
// for i in tmp do
30348: LD_ADDR_VAR 0 6
30352: PUSH
30353: LD_VAR 0 8
30357: PUSH
30358: FOR_IN
30359: IFFALSE 31883
// begin points := [ 0 , 0 , 0 ] ;
30361: LD_ADDR_VAR 0 9
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
// bpoints := 1 ;
30380: LD_ADDR_VAR 0 10
30384: PUSH
30385: LD_INT 1
30387: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30388: LD_VAR 0 6
30392: PPUSH
30393: CALL_OW 247
30397: PUSH
30398: LD_INT 1
30400: DOUBLE
30401: EQUAL
30402: IFTRUE 30406
30404: GO 30984
30406: POP
// begin if GetClass ( i ) = 1 then
30407: LD_VAR 0 6
30411: PPUSH
30412: CALL_OW 257
30416: PUSH
30417: LD_INT 1
30419: EQUAL
30420: IFFALSE 30441
// points := [ 10 , 5 , 3 ] ;
30422: LD_ADDR_VAR 0 9
30426: PUSH
30427: LD_INT 10
30429: PUSH
30430: LD_INT 5
30432: PUSH
30433: LD_INT 3
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30441: LD_VAR 0 6
30445: PPUSH
30446: CALL_OW 257
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: LD_INT 4
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: IN
30465: IFFALSE 30486
// points := [ 3 , 2 , 1 ] ;
30467: LD_ADDR_VAR 0 9
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30486: LD_VAR 0 6
30490: PPUSH
30491: CALL_OW 257
30495: PUSH
30496: LD_INT 5
30498: EQUAL
30499: IFFALSE 30520
// points := [ 130 , 5 , 2 ] ;
30501: LD_ADDR_VAR 0 9
30505: PUSH
30506: LD_INT 130
30508: PUSH
30509: LD_INT 5
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30520: LD_VAR 0 6
30524: PPUSH
30525: CALL_OW 257
30529: PUSH
30530: LD_INT 8
30532: EQUAL
30533: IFFALSE 30554
// points := [ 35 , 35 , 30 ] ;
30535: LD_ADDR_VAR 0 9
30539: PUSH
30540: LD_INT 35
30542: PUSH
30543: LD_INT 35
30545: PUSH
30546: LD_INT 30
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30554: LD_VAR 0 6
30558: PPUSH
30559: CALL_OW 257
30563: PUSH
30564: LD_INT 9
30566: EQUAL
30567: IFFALSE 30588
// points := [ 20 , 55 , 40 ] ;
30569: LD_ADDR_VAR 0 9
30573: PUSH
30574: LD_INT 20
30576: PUSH
30577: LD_INT 55
30579: PUSH
30580: LD_INT 40
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30588: LD_VAR 0 6
30592: PPUSH
30593: CALL_OW 257
30597: PUSH
30598: LD_INT 12
30600: PUSH
30601: LD_INT 16
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: IN
30608: IFFALSE 30629
// points := [ 5 , 3 , 2 ] ;
30610: LD_ADDR_VAR 0 9
30614: PUSH
30615: LD_INT 5
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30629: LD_VAR 0 6
30633: PPUSH
30634: CALL_OW 257
30638: PUSH
30639: LD_INT 17
30641: EQUAL
30642: IFFALSE 30663
// points := [ 100 , 50 , 75 ] ;
30644: LD_ADDR_VAR 0 9
30648: PUSH
30649: LD_INT 100
30651: PUSH
30652: LD_INT 50
30654: PUSH
30655: LD_INT 75
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30663: LD_VAR 0 6
30667: PPUSH
30668: CALL_OW 257
30672: PUSH
30673: LD_INT 15
30675: EQUAL
30676: IFFALSE 30697
// points := [ 10 , 5 , 3 ] ;
30678: LD_ADDR_VAR 0 9
30682: PUSH
30683: LD_INT 10
30685: PUSH
30686: LD_INT 5
30688: PUSH
30689: LD_INT 3
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: LIST
30696: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30697: LD_VAR 0 6
30701: PPUSH
30702: CALL_OW 257
30706: PUSH
30707: LD_INT 14
30709: EQUAL
30710: IFFALSE 30731
// points := [ 10 , 0 , 0 ] ;
30712: LD_ADDR_VAR 0 9
30716: PUSH
30717: LD_INT 10
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30731: LD_VAR 0 6
30735: PPUSH
30736: CALL_OW 257
30740: PUSH
30741: LD_INT 11
30743: EQUAL
30744: IFFALSE 30765
// points := [ 30 , 10 , 5 ] ;
30746: LD_ADDR_VAR 0 9
30750: PUSH
30751: LD_INT 30
30753: PUSH
30754: LD_INT 10
30756: PUSH
30757: LD_INT 5
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: LIST
30764: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30765: LD_VAR 0 1
30769: PPUSH
30770: LD_INT 5
30772: PPUSH
30773: CALL_OW 321
30777: PUSH
30778: LD_INT 2
30780: EQUAL
30781: IFFALSE 30798
// bpoints := bpoints * 1.8 ;
30783: LD_ADDR_VAR 0 10
30787: PUSH
30788: LD_VAR 0 10
30792: PUSH
30793: LD_REAL  1.80000000000000E+0000
30796: MUL
30797: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30798: LD_VAR 0 6
30802: PPUSH
30803: CALL_OW 257
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 3
30816: PUSH
30817: LD_INT 4
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: IN
30826: PUSH
30827: LD_VAR 0 1
30831: PPUSH
30832: LD_INT 51
30834: PPUSH
30835: CALL_OW 321
30839: PUSH
30840: LD_INT 2
30842: EQUAL
30843: AND
30844: IFFALSE 30861
// bpoints := bpoints * 1.2 ;
30846: LD_ADDR_VAR 0 10
30850: PUSH
30851: LD_VAR 0 10
30855: PUSH
30856: LD_REAL  1.20000000000000E+0000
30859: MUL
30860: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30861: LD_VAR 0 6
30865: PPUSH
30866: CALL_OW 257
30870: PUSH
30871: LD_INT 5
30873: PUSH
30874: LD_INT 7
30876: PUSH
30877: LD_INT 9
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: IN
30885: PUSH
30886: LD_VAR 0 1
30890: PPUSH
30891: LD_INT 52
30893: PPUSH
30894: CALL_OW 321
30898: PUSH
30899: LD_INT 2
30901: EQUAL
30902: AND
30903: IFFALSE 30920
// bpoints := bpoints * 1.5 ;
30905: LD_ADDR_VAR 0 10
30909: PUSH
30910: LD_VAR 0 10
30914: PUSH
30915: LD_REAL  1.50000000000000E+0000
30918: MUL
30919: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30920: LD_VAR 0 1
30924: PPUSH
30925: LD_INT 66
30927: PPUSH
30928: CALL_OW 321
30932: PUSH
30933: LD_INT 2
30935: EQUAL
30936: IFFALSE 30953
// bpoints := bpoints * 1.1 ;
30938: LD_ADDR_VAR 0 10
30942: PUSH
30943: LD_VAR 0 10
30947: PUSH
30948: LD_REAL  1.10000000000000E+0000
30951: MUL
30952: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30953: LD_ADDR_VAR 0 10
30957: PUSH
30958: LD_VAR 0 10
30962: PUSH
30963: LD_VAR 0 6
30967: PPUSH
30968: LD_INT 1
30970: PPUSH
30971: CALL_OW 259
30975: PUSH
30976: LD_REAL  1.15000000000000E+0000
30979: MUL
30980: MUL
30981: ST_TO_ADDR
// end ; unit_vehicle :
30982: GO 31812
30984: LD_INT 2
30986: DOUBLE
30987: EQUAL
30988: IFTRUE 30992
30990: GO 31800
30992: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30993: LD_VAR 0 6
30997: PPUSH
30998: CALL_OW 264
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: LD_INT 42
31008: PUSH
31009: LD_INT 24
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: IN
31017: IFFALSE 31038
// points := [ 25 , 5 , 3 ] ;
31019: LD_ADDR_VAR 0 9
31023: PUSH
31024: LD_INT 25
31026: PUSH
31027: LD_INT 5
31029: PUSH
31030: LD_INT 3
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31038: LD_VAR 0 6
31042: PPUSH
31043: CALL_OW 264
31047: PUSH
31048: LD_INT 4
31050: PUSH
31051: LD_INT 43
31053: PUSH
31054: LD_INT 25
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: LIST
31061: IN
31062: IFFALSE 31083
// points := [ 40 , 15 , 5 ] ;
31064: LD_ADDR_VAR 0 9
31068: PUSH
31069: LD_INT 40
31071: PUSH
31072: LD_INT 15
31074: PUSH
31075: LD_INT 5
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31083: LD_VAR 0 6
31087: PPUSH
31088: CALL_OW 264
31092: PUSH
31093: LD_INT 3
31095: PUSH
31096: LD_INT 23
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: IN
31103: IFFALSE 31124
// points := [ 7 , 25 , 8 ] ;
31105: LD_ADDR_VAR 0 9
31109: PUSH
31110: LD_INT 7
31112: PUSH
31113: LD_INT 25
31115: PUSH
31116: LD_INT 8
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: LIST
31123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31124: LD_VAR 0 6
31128: PPUSH
31129: CALL_OW 264
31133: PUSH
31134: LD_INT 5
31136: PUSH
31137: LD_INT 27
31139: PUSH
31140: LD_INT 44
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: IN
31148: IFFALSE 31169
// points := [ 14 , 50 , 16 ] ;
31150: LD_ADDR_VAR 0 9
31154: PUSH
31155: LD_INT 14
31157: PUSH
31158: LD_INT 50
31160: PUSH
31161: LD_INT 16
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31169: LD_VAR 0 6
31173: PPUSH
31174: CALL_OW 264
31178: PUSH
31179: LD_INT 6
31181: PUSH
31182: LD_INT 46
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: IN
31189: IFFALSE 31210
// points := [ 32 , 120 , 70 ] ;
31191: LD_ADDR_VAR 0 9
31195: PUSH
31196: LD_INT 32
31198: PUSH
31199: LD_INT 120
31201: PUSH
31202: LD_INT 70
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31210: LD_VAR 0 6
31214: PPUSH
31215: CALL_OW 264
31219: PUSH
31220: LD_INT 7
31222: PUSH
31223: LD_INT 28
31225: PUSH
31226: LD_INT 45
31228: PUSH
31229: LD_EXP 98
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: IN
31240: IFFALSE 31261
// points := [ 35 , 20 , 45 ] ;
31242: LD_ADDR_VAR 0 9
31246: PUSH
31247: LD_INT 35
31249: PUSH
31250: LD_INT 20
31252: PUSH
31253: LD_INT 45
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31261: LD_VAR 0 6
31265: PPUSH
31266: CALL_OW 264
31270: PUSH
31271: LD_INT 47
31273: PUSH
31274: EMPTY
31275: LIST
31276: IN
31277: IFFALSE 31298
// points := [ 67 , 45 , 75 ] ;
31279: LD_ADDR_VAR 0 9
31283: PUSH
31284: LD_INT 67
31286: PUSH
31287: LD_INT 45
31289: PUSH
31290: LD_INT 75
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31298: LD_VAR 0 6
31302: PPUSH
31303: CALL_OW 264
31307: PUSH
31308: LD_INT 26
31310: PUSH
31311: EMPTY
31312: LIST
31313: IN
31314: IFFALSE 31335
// points := [ 120 , 30 , 80 ] ;
31316: LD_ADDR_VAR 0 9
31320: PUSH
31321: LD_INT 120
31323: PUSH
31324: LD_INT 30
31326: PUSH
31327: LD_INT 80
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31335: LD_VAR 0 6
31339: PPUSH
31340: CALL_OW 264
31344: PUSH
31345: LD_INT 22
31347: PUSH
31348: EMPTY
31349: LIST
31350: IN
31351: IFFALSE 31372
// points := [ 40 , 1 , 1 ] ;
31353: LD_ADDR_VAR 0 9
31357: PUSH
31358: LD_INT 40
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31372: LD_VAR 0 6
31376: PPUSH
31377: CALL_OW 264
31381: PUSH
31382: LD_INT 29
31384: PUSH
31385: EMPTY
31386: LIST
31387: IN
31388: IFFALSE 31409
// points := [ 70 , 200 , 400 ] ;
31390: LD_ADDR_VAR 0 9
31394: PUSH
31395: LD_INT 70
31397: PUSH
31398: LD_INT 200
31400: PUSH
31401: LD_INT 400
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: LIST
31408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31409: LD_VAR 0 6
31413: PPUSH
31414: CALL_OW 264
31418: PUSH
31419: LD_INT 14
31421: PUSH
31422: LD_INT 53
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: IN
31429: IFFALSE 31450
// points := [ 40 , 10 , 20 ] ;
31431: LD_ADDR_VAR 0 9
31435: PUSH
31436: LD_INT 40
31438: PUSH
31439: LD_INT 10
31441: PUSH
31442: LD_INT 20
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31450: LD_VAR 0 6
31454: PPUSH
31455: CALL_OW 264
31459: PUSH
31460: LD_INT 9
31462: PUSH
31463: EMPTY
31464: LIST
31465: IN
31466: IFFALSE 31487
// points := [ 5 , 70 , 20 ] ;
31468: LD_ADDR_VAR 0 9
31472: PUSH
31473: LD_INT 5
31475: PUSH
31476: LD_INT 70
31478: PUSH
31479: LD_INT 20
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31487: LD_VAR 0 6
31491: PPUSH
31492: CALL_OW 264
31496: PUSH
31497: LD_INT 10
31499: PUSH
31500: EMPTY
31501: LIST
31502: IN
31503: IFFALSE 31524
// points := [ 35 , 110 , 70 ] ;
31505: LD_ADDR_VAR 0 9
31509: PUSH
31510: LD_INT 35
31512: PUSH
31513: LD_INT 110
31515: PUSH
31516: LD_INT 70
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: LIST
31523: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31524: LD_VAR 0 6
31528: PPUSH
31529: CALL_OW 265
31533: PUSH
31534: LD_INT 25
31536: EQUAL
31537: IFFALSE 31558
// points := [ 80 , 65 , 100 ] ;
31539: LD_ADDR_VAR 0 9
31543: PUSH
31544: LD_INT 80
31546: PUSH
31547: LD_INT 65
31549: PUSH
31550: LD_INT 100
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31558: LD_VAR 0 6
31562: PPUSH
31563: CALL_OW 263
31567: PUSH
31568: LD_INT 1
31570: EQUAL
31571: IFFALSE 31606
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31573: LD_ADDR_VAR 0 10
31577: PUSH
31578: LD_VAR 0 10
31582: PUSH
31583: LD_VAR 0 6
31587: PPUSH
31588: CALL_OW 311
31592: PPUSH
31593: LD_INT 3
31595: PPUSH
31596: CALL_OW 259
31600: PUSH
31601: LD_INT 4
31603: MUL
31604: MUL
31605: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31606: LD_VAR 0 6
31610: PPUSH
31611: CALL_OW 263
31615: PUSH
31616: LD_INT 2
31618: EQUAL
31619: IFFALSE 31670
// begin j := IsControledBy ( i ) ;
31621: LD_ADDR_VAR 0 7
31625: PUSH
31626: LD_VAR 0 6
31630: PPUSH
31631: CALL_OW 312
31635: ST_TO_ADDR
// if j then
31636: LD_VAR 0 7
31640: IFFALSE 31670
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31642: LD_ADDR_VAR 0 10
31646: PUSH
31647: LD_VAR 0 10
31651: PUSH
31652: LD_VAR 0 7
31656: PPUSH
31657: LD_INT 3
31659: PPUSH
31660: CALL_OW 259
31664: PUSH
31665: LD_INT 3
31667: MUL
31668: MUL
31669: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31670: LD_VAR 0 6
31674: PPUSH
31675: CALL_OW 264
31679: PUSH
31680: LD_INT 5
31682: PUSH
31683: LD_INT 6
31685: PUSH
31686: LD_INT 46
31688: PUSH
31689: LD_INT 44
31691: PUSH
31692: LD_INT 47
31694: PUSH
31695: LD_INT 45
31697: PUSH
31698: LD_INT 28
31700: PUSH
31701: LD_INT 7
31703: PUSH
31704: LD_INT 27
31706: PUSH
31707: LD_INT 29
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: IN
31722: PUSH
31723: LD_VAR 0 1
31727: PPUSH
31728: LD_INT 52
31730: PPUSH
31731: CALL_OW 321
31735: PUSH
31736: LD_INT 2
31738: EQUAL
31739: AND
31740: IFFALSE 31757
// bpoints := bpoints * 1.2 ;
31742: LD_ADDR_VAR 0 10
31746: PUSH
31747: LD_VAR 0 10
31751: PUSH
31752: LD_REAL  1.20000000000000E+0000
31755: MUL
31756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31757: LD_VAR 0 6
31761: PPUSH
31762: CALL_OW 264
31766: PUSH
31767: LD_INT 6
31769: PUSH
31770: LD_INT 46
31772: PUSH
31773: LD_INT 47
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: IN
31781: IFFALSE 31798
// bpoints := bpoints * 1.2 ;
31783: LD_ADDR_VAR 0 10
31787: PUSH
31788: LD_VAR 0 10
31792: PUSH
31793: LD_REAL  1.20000000000000E+0000
31796: MUL
31797: ST_TO_ADDR
// end ; unit_building :
31798: GO 31812
31800: LD_INT 3
31802: DOUBLE
31803: EQUAL
31804: IFTRUE 31808
31806: GO 31811
31808: POP
// ; end ;
31809: GO 31812
31811: POP
// for j = 1 to 3 do
31812: LD_ADDR_VAR 0 7
31816: PUSH
31817: DOUBLE
31818: LD_INT 1
31820: DEC
31821: ST_TO_ADDR
31822: LD_INT 3
31824: PUSH
31825: FOR_TO
31826: IFFALSE 31879
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31828: LD_ADDR_VAR 0 5
31832: PUSH
31833: LD_VAR 0 5
31837: PPUSH
31838: LD_VAR 0 7
31842: PPUSH
31843: LD_VAR 0 5
31847: PUSH
31848: LD_VAR 0 7
31852: ARRAY
31853: PUSH
31854: LD_VAR 0 9
31858: PUSH
31859: LD_VAR 0 7
31863: ARRAY
31864: PUSH
31865: LD_VAR 0 10
31869: MUL
31870: PLUS
31871: PPUSH
31872: CALL_OW 1
31876: ST_TO_ADDR
31877: GO 31825
31879: POP
31880: POP
// end ;
31881: GO 30358
31883: POP
31884: POP
// result := Replace ( result , 4 , tmp ) ;
31885: LD_ADDR_VAR 0 5
31889: PUSH
31890: LD_VAR 0 5
31894: PPUSH
31895: LD_INT 4
31897: PPUSH
31898: LD_VAR 0 8
31902: PPUSH
31903: CALL_OW 1
31907: ST_TO_ADDR
// end ;
31908: LD_VAR 0 5
31912: RET
// export function DangerAtRange ( unit , range ) ; begin
31913: LD_INT 0
31915: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31916: LD_ADDR_VAR 0 3
31920: PUSH
31921: LD_VAR 0 1
31925: PPUSH
31926: CALL_OW 255
31930: PPUSH
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 250
31940: PPUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 251
31950: PPUSH
31951: LD_VAR 0 2
31955: PPUSH
31956: CALL 30210 0 4
31960: ST_TO_ADDR
// end ;
31961: LD_VAR 0 3
31965: RET
// export function DangerInArea ( side , area ) ; begin
31966: LD_INT 0
31968: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31969: LD_ADDR_VAR 0 3
31973: PUSH
31974: LD_VAR 0 2
31978: PPUSH
31979: LD_INT 81
31981: PUSH
31982: LD_VAR 0 1
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PPUSH
31991: CALL_OW 70
31995: ST_TO_ADDR
// end ;
31996: LD_VAR 0 3
32000: RET
// export function IsExtension ( b ) ; begin
32001: LD_INT 0
32003: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32004: LD_ADDR_VAR 0 2
32008: PUSH
32009: LD_VAR 0 1
32013: PUSH
32014: LD_INT 23
32016: PUSH
32017: LD_INT 20
32019: PUSH
32020: LD_INT 22
32022: PUSH
32023: LD_INT 17
32025: PUSH
32026: LD_INT 24
32028: PUSH
32029: LD_INT 21
32031: PUSH
32032: LD_INT 19
32034: PUSH
32035: LD_INT 16
32037: PUSH
32038: LD_INT 25
32040: PUSH
32041: LD_INT 18
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: IN
32056: ST_TO_ADDR
// end ;
32057: LD_VAR 0 2
32061: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32062: LD_INT 0
32064: PPUSH
32065: PPUSH
32066: PPUSH
// result := [ ] ;
32067: LD_ADDR_VAR 0 4
32071: PUSH
32072: EMPTY
32073: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32074: LD_ADDR_VAR 0 5
32078: PUSH
32079: LD_VAR 0 2
32083: PPUSH
32084: LD_INT 21
32086: PUSH
32087: LD_INT 3
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 70
32098: ST_TO_ADDR
// if not tmp then
32099: LD_VAR 0 5
32103: NOT
32104: IFFALSE 32108
// exit ;
32106: GO 32172
// if checkLink then
32108: LD_VAR 0 3
32112: IFFALSE 32162
// begin for i in tmp do
32114: LD_ADDR_VAR 0 6
32118: PUSH
32119: LD_VAR 0 5
32123: PUSH
32124: FOR_IN
32125: IFFALSE 32160
// if GetBase ( i ) <> base then
32127: LD_VAR 0 6
32131: PPUSH
32132: CALL_OW 274
32136: PUSH
32137: LD_VAR 0 1
32141: NONEQUAL
32142: IFFALSE 32158
// ComLinkToBase ( base , i ) ;
32144: LD_VAR 0 1
32148: PPUSH
32149: LD_VAR 0 6
32153: PPUSH
32154: CALL_OW 169
32158: GO 32124
32160: POP
32161: POP
// end ; result := tmp ;
32162: LD_ADDR_VAR 0 4
32166: PUSH
32167: LD_VAR 0 5
32171: ST_TO_ADDR
// end ;
32172: LD_VAR 0 4
32176: RET
// export function ComComplete ( units , b ) ; var i ; begin
32177: LD_INT 0
32179: PPUSH
32180: PPUSH
// if not units then
32181: LD_VAR 0 1
32185: NOT
32186: IFFALSE 32190
// exit ;
32188: GO 32280
// for i in units do
32190: LD_ADDR_VAR 0 4
32194: PUSH
32195: LD_VAR 0 1
32199: PUSH
32200: FOR_IN
32201: IFFALSE 32278
// if BuildingStatus ( b ) = bs_build then
32203: LD_VAR 0 2
32207: PPUSH
32208: CALL_OW 461
32212: PUSH
32213: LD_INT 1
32215: EQUAL
32216: IFFALSE 32276
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32218: LD_VAR 0 4
32222: PPUSH
32223: LD_STRING h
32225: PUSH
32226: LD_VAR 0 2
32230: PPUSH
32231: CALL_OW 250
32235: PUSH
32236: LD_VAR 0 2
32240: PPUSH
32241: CALL_OW 251
32245: PUSH
32246: LD_VAR 0 2
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: PUSH
32269: EMPTY
32270: LIST
32271: PPUSH
32272: CALL_OW 446
32276: GO 32200
32278: POP
32279: POP
// end ;
32280: LD_VAR 0 3
32284: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32285: LD_INT 0
32287: PPUSH
32288: PPUSH
32289: PPUSH
32290: PPUSH
32291: PPUSH
32292: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32293: LD_VAR 0 1
32297: NOT
32298: PUSH
32299: LD_VAR 0 1
32303: PPUSH
32304: CALL_OW 263
32308: PUSH
32309: LD_INT 2
32311: NONEQUAL
32312: OR
32313: IFFALSE 32317
// exit ;
32315: GO 32633
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32317: LD_ADDR_VAR 0 6
32321: PUSH
32322: LD_INT 22
32324: PUSH
32325: LD_VAR 0 1
32329: PPUSH
32330: CALL_OW 255
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 30
32344: PUSH
32345: LD_INT 36
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 34
32354: PUSH
32355: LD_INT 31
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PPUSH
32371: CALL_OW 69
32375: ST_TO_ADDR
// if not tmp then
32376: LD_VAR 0 6
32380: NOT
32381: IFFALSE 32385
// exit ;
32383: GO 32633
// result := [ ] ;
32385: LD_ADDR_VAR 0 2
32389: PUSH
32390: EMPTY
32391: ST_TO_ADDR
// for i in tmp do
32392: LD_ADDR_VAR 0 3
32396: PUSH
32397: LD_VAR 0 6
32401: PUSH
32402: FOR_IN
32403: IFFALSE 32474
// begin t := UnitsInside ( i ) ;
32405: LD_ADDR_VAR 0 4
32409: PUSH
32410: LD_VAR 0 3
32414: PPUSH
32415: CALL_OW 313
32419: ST_TO_ADDR
// if t then
32420: LD_VAR 0 4
32424: IFFALSE 32472
// for j in t do
32426: LD_ADDR_VAR 0 7
32430: PUSH
32431: LD_VAR 0 4
32435: PUSH
32436: FOR_IN
32437: IFFALSE 32470
// result := Replace ( result , result + 1 , j ) ;
32439: LD_ADDR_VAR 0 2
32443: PUSH
32444: LD_VAR 0 2
32448: PPUSH
32449: LD_VAR 0 2
32453: PUSH
32454: LD_INT 1
32456: PLUS
32457: PPUSH
32458: LD_VAR 0 7
32462: PPUSH
32463: CALL_OW 1
32467: ST_TO_ADDR
32468: GO 32436
32470: POP
32471: POP
// end ;
32472: GO 32402
32474: POP
32475: POP
// if not result then
32476: LD_VAR 0 2
32480: NOT
32481: IFFALSE 32485
// exit ;
32483: GO 32633
// mech := result [ 1 ] ;
32485: LD_ADDR_VAR 0 5
32489: PUSH
32490: LD_VAR 0 2
32494: PUSH
32495: LD_INT 1
32497: ARRAY
32498: ST_TO_ADDR
// if result > 1 then
32499: LD_VAR 0 2
32503: PUSH
32504: LD_INT 1
32506: GREATER
32507: IFFALSE 32619
// begin for i = 2 to result do
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: DOUBLE
32515: LD_INT 2
32517: DEC
32518: ST_TO_ADDR
32519: LD_VAR 0 2
32523: PUSH
32524: FOR_TO
32525: IFFALSE 32617
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32527: LD_ADDR_VAR 0 4
32531: PUSH
32532: LD_VAR 0 2
32536: PUSH
32537: LD_VAR 0 3
32541: ARRAY
32542: PPUSH
32543: LD_INT 3
32545: PPUSH
32546: CALL_OW 259
32550: PUSH
32551: LD_VAR 0 2
32555: PUSH
32556: LD_VAR 0 3
32560: ARRAY
32561: PPUSH
32562: CALL_OW 432
32566: MINUS
32567: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32568: LD_VAR 0 4
32572: PUSH
32573: LD_VAR 0 5
32577: PPUSH
32578: LD_INT 3
32580: PPUSH
32581: CALL_OW 259
32585: PUSH
32586: LD_VAR 0 5
32590: PPUSH
32591: CALL_OW 432
32595: MINUS
32596: GREATEREQUAL
32597: IFFALSE 32615
// mech := result [ i ] ;
32599: LD_ADDR_VAR 0 5
32603: PUSH
32604: LD_VAR 0 2
32608: PUSH
32609: LD_VAR 0 3
32613: ARRAY
32614: ST_TO_ADDR
// end ;
32615: GO 32524
32617: POP
32618: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32619: LD_VAR 0 1
32623: PPUSH
32624: LD_VAR 0 5
32628: PPUSH
32629: CALL_OW 135
// end ;
32633: LD_VAR 0 2
32637: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32638: LD_INT 0
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
32645: PPUSH
32646: PPUSH
32647: PPUSH
32648: PPUSH
32649: PPUSH
32650: PPUSH
32651: PPUSH
32652: PPUSH
// result := [ ] ;
32653: LD_ADDR_VAR 0 7
32657: PUSH
32658: EMPTY
32659: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32660: LD_VAR 0 1
32664: PPUSH
32665: CALL_OW 266
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: IN
32680: NOT
32681: IFFALSE 32685
// exit ;
32683: GO 34319
// if name then
32685: LD_VAR 0 3
32689: IFFALSE 32705
// SetBName ( base_dep , name ) ;
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_VAR 0 3
32700: PPUSH
32701: CALL_OW 500
// base := GetBase ( base_dep ) ;
32705: LD_ADDR_VAR 0 15
32709: PUSH
32710: LD_VAR 0 1
32714: PPUSH
32715: CALL_OW 274
32719: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32720: LD_ADDR_VAR 0 16
32724: PUSH
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 255
32734: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32735: LD_ADDR_VAR 0 17
32739: PUSH
32740: LD_VAR 0 1
32744: PPUSH
32745: CALL_OW 248
32749: ST_TO_ADDR
// if sources then
32750: LD_VAR 0 5
32754: IFFALSE 32801
// for i = 1 to 3 do
32756: LD_ADDR_VAR 0 8
32760: PUSH
32761: DOUBLE
32762: LD_INT 1
32764: DEC
32765: ST_TO_ADDR
32766: LD_INT 3
32768: PUSH
32769: FOR_TO
32770: IFFALSE 32799
// AddResourceType ( base , i , sources [ i ] ) ;
32772: LD_VAR 0 15
32776: PPUSH
32777: LD_VAR 0 8
32781: PPUSH
32782: LD_VAR 0 5
32786: PUSH
32787: LD_VAR 0 8
32791: ARRAY
32792: PPUSH
32793: CALL_OW 276
32797: GO 32769
32799: POP
32800: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32801: LD_ADDR_VAR 0 18
32805: PUSH
32806: LD_VAR 0 15
32810: PPUSH
32811: LD_VAR 0 2
32815: PPUSH
32816: LD_INT 1
32818: PPUSH
32819: CALL 32062 0 3
32823: ST_TO_ADDR
// InitHc ;
32824: CALL_OW 19
// InitUc ;
32828: CALL_OW 18
// uc_side := side ;
32832: LD_ADDR_OWVAR 20
32836: PUSH
32837: LD_VAR 0 16
32841: ST_TO_ADDR
// uc_nation := nation ;
32842: LD_ADDR_OWVAR 21
32846: PUSH
32847: LD_VAR 0 17
32851: ST_TO_ADDR
// if buildings then
32852: LD_VAR 0 18
32856: IFFALSE 34178
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32858: LD_ADDR_VAR 0 19
32862: PUSH
32863: LD_VAR 0 18
32867: PPUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 30
32873: PUSH
32874: LD_INT 29
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 30
32883: PUSH
32884: LD_INT 30
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: PPUSH
32896: CALL_OW 72
32900: ST_TO_ADDR
// if tmp then
32901: LD_VAR 0 19
32905: IFFALSE 32953
// for i in tmp do
32907: LD_ADDR_VAR 0 8
32911: PUSH
32912: LD_VAR 0 19
32916: PUSH
32917: FOR_IN
32918: IFFALSE 32951
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32920: LD_VAR 0 8
32924: PPUSH
32925: CALL_OW 250
32929: PPUSH
32930: LD_VAR 0 8
32934: PPUSH
32935: CALL_OW 251
32939: PPUSH
32940: LD_VAR 0 16
32944: PPUSH
32945: CALL_OW 441
32949: GO 32917
32951: POP
32952: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32953: LD_VAR 0 18
32957: PPUSH
32958: LD_INT 2
32960: PUSH
32961: LD_INT 30
32963: PUSH
32964: LD_INT 32
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 30
32973: PUSH
32974: LD_INT 33
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: LIST
32985: PPUSH
32986: CALL_OW 72
32990: IFFALSE 33078
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32992: LD_ADDR_VAR 0 8
32996: PUSH
32997: LD_VAR 0 18
33001: PPUSH
33002: LD_INT 2
33004: PUSH
33005: LD_INT 30
33007: PUSH
33008: LD_INT 32
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 30
33017: PUSH
33018: LD_INT 33
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: LIST
33029: PPUSH
33030: CALL_OW 72
33034: PUSH
33035: FOR_IN
33036: IFFALSE 33076
// begin if not GetBWeapon ( i ) then
33038: LD_VAR 0 8
33042: PPUSH
33043: CALL_OW 269
33047: NOT
33048: IFFALSE 33074
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33050: LD_VAR 0 8
33054: PPUSH
33055: LD_VAR 0 8
33059: PPUSH
33060: LD_VAR 0 2
33064: PPUSH
33065: CALL 34324 0 2
33069: PPUSH
33070: CALL_OW 431
// end ;
33074: GO 33035
33076: POP
33077: POP
// end ; for i = 1 to personel do
33078: LD_ADDR_VAR 0 8
33082: PUSH
33083: DOUBLE
33084: LD_INT 1
33086: DEC
33087: ST_TO_ADDR
33088: LD_VAR 0 6
33092: PUSH
33093: FOR_TO
33094: IFFALSE 34158
// begin if i > 4 then
33096: LD_VAR 0 8
33100: PUSH
33101: LD_INT 4
33103: GREATER
33104: IFFALSE 33108
// break ;
33106: GO 34158
// case i of 1 :
33108: LD_VAR 0 8
33112: PUSH
33113: LD_INT 1
33115: DOUBLE
33116: EQUAL
33117: IFTRUE 33121
33119: GO 33201
33121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33122: LD_ADDR_VAR 0 12
33126: PUSH
33127: LD_VAR 0 18
33131: PPUSH
33132: LD_INT 22
33134: PUSH
33135: LD_VAR 0 16
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 58
33146: PUSH
33147: EMPTY
33148: LIST
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: LD_INT 30
33155: PUSH
33156: LD_INT 32
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 30
33165: PUSH
33166: LD_INT 4
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 30
33175: PUSH
33176: LD_INT 5
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: PPUSH
33194: CALL_OW 72
33198: ST_TO_ADDR
33199: GO 33423
33201: LD_INT 2
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33209
33207: GO 33271
33209: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33210: LD_ADDR_VAR 0 12
33214: PUSH
33215: LD_VAR 0 18
33219: PPUSH
33220: LD_INT 22
33222: PUSH
33223: LD_VAR 0 16
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: LD_INT 30
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 30
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PPUSH
33264: CALL_OW 72
33268: ST_TO_ADDR
33269: GO 33423
33271: LD_INT 3
33273: DOUBLE
33274: EQUAL
33275: IFTRUE 33279
33277: GO 33341
33279: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33280: LD_ADDR_VAR 0 12
33284: PUSH
33285: LD_VAR 0 18
33289: PPUSH
33290: LD_INT 22
33292: PUSH
33293: LD_VAR 0 16
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: LD_INT 30
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 30
33317: PUSH
33318: LD_INT 3
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PPUSH
33334: CALL_OW 72
33338: ST_TO_ADDR
33339: GO 33423
33341: LD_INT 4
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33349
33347: GO 33422
33349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33350: LD_ADDR_VAR 0 12
33354: PUSH
33355: LD_VAR 0 18
33359: PPUSH
33360: LD_INT 22
33362: PUSH
33363: LD_VAR 0 16
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: LD_INT 30
33377: PUSH
33378: LD_INT 6
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 30
33387: PUSH
33388: LD_INT 7
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 30
33397: PUSH
33398: LD_INT 8
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PPUSH
33415: CALL_OW 72
33419: ST_TO_ADDR
33420: GO 33423
33422: POP
// if i = 1 then
33423: LD_VAR 0 8
33427: PUSH
33428: LD_INT 1
33430: EQUAL
33431: IFFALSE 33542
// begin tmp := [ ] ;
33433: LD_ADDR_VAR 0 19
33437: PUSH
33438: EMPTY
33439: ST_TO_ADDR
// for j in f do
33440: LD_ADDR_VAR 0 9
33444: PUSH
33445: LD_VAR 0 12
33449: PUSH
33450: FOR_IN
33451: IFFALSE 33524
// if GetBType ( j ) = b_bunker then
33453: LD_VAR 0 9
33457: PPUSH
33458: CALL_OW 266
33462: PUSH
33463: LD_INT 32
33465: EQUAL
33466: IFFALSE 33493
// tmp := Insert ( tmp , 1 , j ) else
33468: LD_ADDR_VAR 0 19
33472: PUSH
33473: LD_VAR 0 19
33477: PPUSH
33478: LD_INT 1
33480: PPUSH
33481: LD_VAR 0 9
33485: PPUSH
33486: CALL_OW 2
33490: ST_TO_ADDR
33491: GO 33522
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33493: LD_ADDR_VAR 0 19
33497: PUSH
33498: LD_VAR 0 19
33502: PPUSH
33503: LD_VAR 0 19
33507: PUSH
33508: LD_INT 1
33510: PLUS
33511: PPUSH
33512: LD_VAR 0 9
33516: PPUSH
33517: CALL_OW 2
33521: ST_TO_ADDR
33522: GO 33450
33524: POP
33525: POP
// if tmp then
33526: LD_VAR 0 19
33530: IFFALSE 33542
// f := tmp ;
33532: LD_ADDR_VAR 0 12
33536: PUSH
33537: LD_VAR 0 19
33541: ST_TO_ADDR
// end ; x := personel [ i ] ;
33542: LD_ADDR_VAR 0 13
33546: PUSH
33547: LD_VAR 0 6
33551: PUSH
33552: LD_VAR 0 8
33556: ARRAY
33557: ST_TO_ADDR
// if x = - 1 then
33558: LD_VAR 0 13
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: EQUAL
33567: IFFALSE 33776
// begin for j in f do
33569: LD_ADDR_VAR 0 9
33573: PUSH
33574: LD_VAR 0 12
33578: PUSH
33579: FOR_IN
33580: IFFALSE 33772
// repeat InitHc ;
33582: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33586: LD_VAR 0 9
33590: PPUSH
33591: CALL_OW 266
33595: PUSH
33596: LD_INT 5
33598: EQUAL
33599: IFFALSE 33669
// begin if UnitsInside ( j ) < 3 then
33601: LD_VAR 0 9
33605: PPUSH
33606: CALL_OW 313
33610: PUSH
33611: LD_INT 3
33613: LESS
33614: IFFALSE 33650
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33616: LD_INT 0
33618: PPUSH
33619: LD_INT 5
33621: PUSH
33622: LD_INT 8
33624: PUSH
33625: LD_INT 9
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: PUSH
33633: LD_VAR 0 17
33637: ARRAY
33638: PPUSH
33639: LD_VAR 0 4
33643: PPUSH
33644: CALL_OW 380
33648: GO 33667
// PrepareHuman ( false , i , skill ) ;
33650: LD_INT 0
33652: PPUSH
33653: LD_VAR 0 8
33657: PPUSH
33658: LD_VAR 0 4
33662: PPUSH
33663: CALL_OW 380
// end else
33667: GO 33686
// PrepareHuman ( false , i , skill ) ;
33669: LD_INT 0
33671: PPUSH
33672: LD_VAR 0 8
33676: PPUSH
33677: LD_VAR 0 4
33681: PPUSH
33682: CALL_OW 380
// un := CreateHuman ;
33686: LD_ADDR_VAR 0 14
33690: PUSH
33691: CALL_OW 44
33695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33696: LD_ADDR_VAR 0 7
33700: PUSH
33701: LD_VAR 0 7
33705: PPUSH
33706: LD_INT 1
33708: PPUSH
33709: LD_VAR 0 14
33713: PPUSH
33714: CALL_OW 2
33718: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33719: LD_VAR 0 14
33723: PPUSH
33724: LD_VAR 0 9
33728: PPUSH
33729: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33733: LD_VAR 0 9
33737: PPUSH
33738: CALL_OW 313
33742: PUSH
33743: LD_INT 6
33745: EQUAL
33746: PUSH
33747: LD_VAR 0 9
33751: PPUSH
33752: CALL_OW 266
33756: PUSH
33757: LD_INT 32
33759: PUSH
33760: LD_INT 31
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: IN
33767: OR
33768: IFFALSE 33582
33770: GO 33579
33772: POP
33773: POP
// end else
33774: GO 34156
// for j = 1 to x do
33776: LD_ADDR_VAR 0 9
33780: PUSH
33781: DOUBLE
33782: LD_INT 1
33784: DEC
33785: ST_TO_ADDR
33786: LD_VAR 0 13
33790: PUSH
33791: FOR_TO
33792: IFFALSE 34154
// begin InitHc ;
33794: CALL_OW 19
// if not f then
33798: LD_VAR 0 12
33802: NOT
33803: IFFALSE 33892
// begin PrepareHuman ( false , i , skill ) ;
33805: LD_INT 0
33807: PPUSH
33808: LD_VAR 0 8
33812: PPUSH
33813: LD_VAR 0 4
33817: PPUSH
33818: CALL_OW 380
// un := CreateHuman ;
33822: LD_ADDR_VAR 0 14
33826: PUSH
33827: CALL_OW 44
33831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33832: LD_ADDR_VAR 0 7
33836: PUSH
33837: LD_VAR 0 7
33841: PPUSH
33842: LD_INT 1
33844: PPUSH
33845: LD_VAR 0 14
33849: PPUSH
33850: CALL_OW 2
33854: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33855: LD_VAR 0 14
33859: PPUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 250
33869: PPUSH
33870: LD_VAR 0 1
33874: PPUSH
33875: CALL_OW 251
33879: PPUSH
33880: LD_INT 10
33882: PPUSH
33883: LD_INT 0
33885: PPUSH
33886: CALL_OW 50
// continue ;
33890: GO 33791
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33892: LD_VAR 0 12
33896: PUSH
33897: LD_INT 1
33899: ARRAY
33900: PPUSH
33901: CALL_OW 313
33905: PUSH
33906: LD_VAR 0 12
33910: PUSH
33911: LD_INT 1
33913: ARRAY
33914: PPUSH
33915: CALL_OW 266
33919: PUSH
33920: LD_INT 32
33922: PUSH
33923: LD_INT 31
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: IN
33930: AND
33931: PUSH
33932: LD_VAR 0 12
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: PPUSH
33941: CALL_OW 313
33945: PUSH
33946: LD_INT 6
33948: EQUAL
33949: OR
33950: IFFALSE 33970
// f := Delete ( f , 1 ) ;
33952: LD_ADDR_VAR 0 12
33956: PUSH
33957: LD_VAR 0 12
33961: PPUSH
33962: LD_INT 1
33964: PPUSH
33965: CALL_OW 3
33969: ST_TO_ADDR
// if not f then
33970: LD_VAR 0 12
33974: NOT
33975: IFFALSE 33993
// begin x := x + 2 ;
33977: LD_ADDR_VAR 0 13
33981: PUSH
33982: LD_VAR 0 13
33986: PUSH
33987: LD_INT 2
33989: PLUS
33990: ST_TO_ADDR
// continue ;
33991: GO 33791
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33993: LD_VAR 0 12
33997: PUSH
33998: LD_INT 1
34000: ARRAY
34001: PPUSH
34002: CALL_OW 266
34006: PUSH
34007: LD_INT 5
34009: EQUAL
34010: IFFALSE 34084
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34012: LD_VAR 0 12
34016: PUSH
34017: LD_INT 1
34019: ARRAY
34020: PPUSH
34021: CALL_OW 313
34025: PUSH
34026: LD_INT 3
34028: LESS
34029: IFFALSE 34065
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34031: LD_INT 0
34033: PPUSH
34034: LD_INT 5
34036: PUSH
34037: LD_INT 8
34039: PUSH
34040: LD_INT 9
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: PUSH
34048: LD_VAR 0 17
34052: ARRAY
34053: PPUSH
34054: LD_VAR 0 4
34058: PPUSH
34059: CALL_OW 380
34063: GO 34082
// PrepareHuman ( false , i , skill ) ;
34065: LD_INT 0
34067: PPUSH
34068: LD_VAR 0 8
34072: PPUSH
34073: LD_VAR 0 4
34077: PPUSH
34078: CALL_OW 380
// end else
34082: GO 34101
// PrepareHuman ( false , i , skill ) ;
34084: LD_INT 0
34086: PPUSH
34087: LD_VAR 0 8
34091: PPUSH
34092: LD_VAR 0 4
34096: PPUSH
34097: CALL_OW 380
// un := CreateHuman ;
34101: LD_ADDR_VAR 0 14
34105: PUSH
34106: CALL_OW 44
34110: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34111: LD_ADDR_VAR 0 7
34115: PUSH
34116: LD_VAR 0 7
34120: PPUSH
34121: LD_INT 1
34123: PPUSH
34124: LD_VAR 0 14
34128: PPUSH
34129: CALL_OW 2
34133: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34134: LD_VAR 0 14
34138: PPUSH
34139: LD_VAR 0 12
34143: PUSH
34144: LD_INT 1
34146: ARRAY
34147: PPUSH
34148: CALL_OW 52
// end ;
34152: GO 33791
34154: POP
34155: POP
// end ;
34156: GO 33093
34158: POP
34159: POP
// result := result ^ buildings ;
34160: LD_ADDR_VAR 0 7
34164: PUSH
34165: LD_VAR 0 7
34169: PUSH
34170: LD_VAR 0 18
34174: ADD
34175: ST_TO_ADDR
// end else
34176: GO 34319
// begin for i = 1 to personel do
34178: LD_ADDR_VAR 0 8
34182: PUSH
34183: DOUBLE
34184: LD_INT 1
34186: DEC
34187: ST_TO_ADDR
34188: LD_VAR 0 6
34192: PUSH
34193: FOR_TO
34194: IFFALSE 34317
// begin if i > 4 then
34196: LD_VAR 0 8
34200: PUSH
34201: LD_INT 4
34203: GREATER
34204: IFFALSE 34208
// break ;
34206: GO 34317
// x := personel [ i ] ;
34208: LD_ADDR_VAR 0 13
34212: PUSH
34213: LD_VAR 0 6
34217: PUSH
34218: LD_VAR 0 8
34222: ARRAY
34223: ST_TO_ADDR
// if x = - 1 then
34224: LD_VAR 0 13
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: EQUAL
34233: IFFALSE 34237
// continue ;
34235: GO 34193
// PrepareHuman ( false , i , skill ) ;
34237: LD_INT 0
34239: PPUSH
34240: LD_VAR 0 8
34244: PPUSH
34245: LD_VAR 0 4
34249: PPUSH
34250: CALL_OW 380
// un := CreateHuman ;
34254: LD_ADDR_VAR 0 14
34258: PUSH
34259: CALL_OW 44
34263: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34264: LD_VAR 0 14
34268: PPUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: CALL_OW 250
34278: PPUSH
34279: LD_VAR 0 1
34283: PPUSH
34284: CALL_OW 251
34288: PPUSH
34289: LD_INT 10
34291: PPUSH
34292: LD_INT 0
34294: PPUSH
34295: CALL_OW 50
// result := result ^ un ;
34299: LD_ADDR_VAR 0 7
34303: PUSH
34304: LD_VAR 0 7
34308: PUSH
34309: LD_VAR 0 14
34313: ADD
34314: ST_TO_ADDR
// end ;
34315: GO 34193
34317: POP
34318: POP
// end ; end ;
34319: LD_VAR 0 7
34323: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
// result := false ;
34342: LD_ADDR_VAR 0 3
34346: PUSH
34347: LD_INT 0
34349: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34350: LD_VAR 0 1
34354: NOT
34355: PUSH
34356: LD_VAR 0 1
34360: PPUSH
34361: CALL_OW 266
34365: PUSH
34366: LD_INT 32
34368: PUSH
34369: LD_INT 33
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: IN
34376: NOT
34377: OR
34378: IFFALSE 34382
// exit ;
34380: GO 35491
// nat := GetNation ( tower ) ;
34382: LD_ADDR_VAR 0 12
34386: PUSH
34387: LD_VAR 0 1
34391: PPUSH
34392: CALL_OW 248
34396: ST_TO_ADDR
// side := GetSide ( tower ) ;
34397: LD_ADDR_VAR 0 16
34401: PUSH
34402: LD_VAR 0 1
34406: PPUSH
34407: CALL_OW 255
34411: ST_TO_ADDR
// x := GetX ( tower ) ;
34412: LD_ADDR_VAR 0 10
34416: PUSH
34417: LD_VAR 0 1
34421: PPUSH
34422: CALL_OW 250
34426: ST_TO_ADDR
// y := GetY ( tower ) ;
34427: LD_ADDR_VAR 0 11
34431: PUSH
34432: LD_VAR 0 1
34436: PPUSH
34437: CALL_OW 251
34441: ST_TO_ADDR
// if not x or not y then
34442: LD_VAR 0 10
34446: NOT
34447: PUSH
34448: LD_VAR 0 11
34452: NOT
34453: OR
34454: IFFALSE 34458
// exit ;
34456: GO 35491
// weapon := 0 ;
34458: LD_ADDR_VAR 0 18
34462: PUSH
34463: LD_INT 0
34465: ST_TO_ADDR
// fac_list := [ ] ;
34466: LD_ADDR_VAR 0 17
34470: PUSH
34471: EMPTY
34472: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34473: LD_ADDR_VAR 0 6
34477: PUSH
34478: LD_VAR 0 1
34482: PPUSH
34483: CALL_OW 274
34487: PPUSH
34488: LD_VAR 0 2
34492: PPUSH
34493: LD_INT 0
34495: PPUSH
34496: CALL 32062 0 3
34500: PPUSH
34501: LD_INT 30
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PPUSH
34511: CALL_OW 72
34515: ST_TO_ADDR
// if not factories then
34516: LD_VAR 0 6
34520: NOT
34521: IFFALSE 34525
// exit ;
34523: GO 35491
// for i in factories do
34525: LD_ADDR_VAR 0 8
34529: PUSH
34530: LD_VAR 0 6
34534: PUSH
34535: FOR_IN
34536: IFFALSE 34561
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34538: LD_ADDR_VAR 0 17
34542: PUSH
34543: LD_VAR 0 17
34547: PUSH
34548: LD_VAR 0 8
34552: PPUSH
34553: CALL_OW 478
34557: UNION
34558: ST_TO_ADDR
34559: GO 34535
34561: POP
34562: POP
// if not fac_list then
34563: LD_VAR 0 17
34567: NOT
34568: IFFALSE 34572
// exit ;
34570: GO 35491
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: LD_INT 4
34579: PUSH
34580: LD_INT 5
34582: PUSH
34583: LD_INT 9
34585: PUSH
34586: LD_INT 10
34588: PUSH
34589: LD_INT 6
34591: PUSH
34592: LD_INT 7
34594: PUSH
34595: LD_INT 11
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 27
34609: PUSH
34610: LD_INT 28
34612: PUSH
34613: LD_INT 26
34615: PUSH
34616: LD_INT 30
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 43
34627: PUSH
34628: LD_INT 44
34630: PUSH
34631: LD_INT 46
34633: PUSH
34634: LD_INT 45
34636: PUSH
34637: LD_INT 47
34639: PUSH
34640: LD_INT 49
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: PUSH
34656: LD_VAR 0 12
34660: ARRAY
34661: ST_TO_ADDR
// list := list isect fac_list ;
34662: LD_ADDR_VAR 0 5
34666: PUSH
34667: LD_VAR 0 5
34671: PUSH
34672: LD_VAR 0 17
34676: ISECT
34677: ST_TO_ADDR
// if not list then
34678: LD_VAR 0 5
34682: NOT
34683: IFFALSE 34687
// exit ;
34685: GO 35491
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34687: LD_VAR 0 12
34691: PUSH
34692: LD_INT 3
34694: EQUAL
34695: PUSH
34696: LD_INT 49
34698: PUSH
34699: LD_VAR 0 5
34703: IN
34704: AND
34705: PUSH
34706: LD_INT 31
34708: PPUSH
34709: LD_VAR 0 16
34713: PPUSH
34714: CALL_OW 321
34718: PUSH
34719: LD_INT 2
34721: EQUAL
34722: AND
34723: IFFALSE 34783
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34725: LD_INT 22
34727: PUSH
34728: LD_VAR 0 16
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 35
34739: PUSH
34740: LD_INT 49
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 91
34749: PUSH
34750: LD_VAR 0 1
34754: PUSH
34755: LD_INT 10
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: PPUSH
34768: CALL_OW 69
34772: NOT
34773: IFFALSE 34783
// weapon := ru_time_lapser ;
34775: LD_ADDR_VAR 0 18
34779: PUSH
34780: LD_INT 49
34782: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34783: LD_VAR 0 12
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: IN
34798: PUSH
34799: LD_INT 11
34801: PUSH
34802: LD_VAR 0 5
34806: IN
34807: PUSH
34808: LD_INT 30
34810: PUSH
34811: LD_VAR 0 5
34815: IN
34816: OR
34817: AND
34818: PUSH
34819: LD_INT 6
34821: PPUSH
34822: LD_VAR 0 16
34826: PPUSH
34827: CALL_OW 321
34831: PUSH
34832: LD_INT 2
34834: EQUAL
34835: AND
34836: IFFALSE 35001
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34838: LD_INT 22
34840: PUSH
34841: LD_VAR 0 16
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: LD_INT 35
34855: PUSH
34856: LD_INT 11
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 35
34865: PUSH
34866: LD_INT 30
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 91
34880: PUSH
34881: LD_VAR 0 1
34885: PUSH
34886: LD_INT 18
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: PPUSH
34899: CALL_OW 69
34903: NOT
34904: PUSH
34905: LD_INT 22
34907: PUSH
34908: LD_VAR 0 16
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: LD_INT 30
34922: PUSH
34923: LD_INT 32
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 30
34932: PUSH
34933: LD_INT 33
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 91
34947: PUSH
34948: LD_VAR 0 1
34952: PUSH
34953: LD_INT 12
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: PUSH
34966: EMPTY
34967: LIST
34968: PPUSH
34969: CALL_OW 69
34973: PUSH
34974: LD_INT 2
34976: GREATER
34977: AND
34978: IFFALSE 35001
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34980: LD_ADDR_VAR 0 18
34984: PUSH
34985: LD_INT 11
34987: PUSH
34988: LD_INT 30
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_VAR 0 12
34999: ARRAY
35000: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35001: LD_VAR 0 18
35005: NOT
35006: PUSH
35007: LD_INT 40
35009: PPUSH
35010: LD_VAR 0 16
35014: PPUSH
35015: CALL_OW 321
35019: PUSH
35020: LD_INT 2
35022: EQUAL
35023: AND
35024: PUSH
35025: LD_INT 7
35027: PUSH
35028: LD_VAR 0 5
35032: IN
35033: PUSH
35034: LD_INT 28
35036: PUSH
35037: LD_VAR 0 5
35041: IN
35042: OR
35043: PUSH
35044: LD_INT 45
35046: PUSH
35047: LD_VAR 0 5
35051: IN
35052: OR
35053: AND
35054: IFFALSE 35308
// begin hex := GetHexInfo ( x , y ) ;
35056: LD_ADDR_VAR 0 4
35060: PUSH
35061: LD_VAR 0 10
35065: PPUSH
35066: LD_VAR 0 11
35070: PPUSH
35071: CALL_OW 546
35075: ST_TO_ADDR
// if hex [ 1 ] then
35076: LD_VAR 0 4
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: IFFALSE 35088
// exit ;
35086: GO 35491
// height := hex [ 2 ] ;
35088: LD_ADDR_VAR 0 15
35092: PUSH
35093: LD_VAR 0 4
35097: PUSH
35098: LD_INT 2
35100: ARRAY
35101: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35102: LD_ADDR_VAR 0 14
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: LD_INT 3
35115: PUSH
35116: LD_INT 5
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: ST_TO_ADDR
// for i in tmp do
35125: LD_ADDR_VAR 0 8
35129: PUSH
35130: LD_VAR 0 14
35134: PUSH
35135: FOR_IN
35136: IFFALSE 35306
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35138: LD_ADDR_VAR 0 9
35142: PUSH
35143: LD_VAR 0 10
35147: PPUSH
35148: LD_VAR 0 8
35152: PPUSH
35153: LD_INT 5
35155: PPUSH
35156: CALL_OW 272
35160: PUSH
35161: LD_VAR 0 11
35165: PPUSH
35166: LD_VAR 0 8
35170: PPUSH
35171: LD_INT 5
35173: PPUSH
35174: CALL_OW 273
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35183: LD_VAR 0 9
35187: PUSH
35188: LD_INT 1
35190: ARRAY
35191: PPUSH
35192: LD_VAR 0 9
35196: PUSH
35197: LD_INT 2
35199: ARRAY
35200: PPUSH
35201: CALL_OW 488
35205: IFFALSE 35304
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35207: LD_ADDR_VAR 0 4
35211: PUSH
35212: LD_VAR 0 9
35216: PUSH
35217: LD_INT 1
35219: ARRAY
35220: PPUSH
35221: LD_VAR 0 9
35225: PUSH
35226: LD_INT 2
35228: ARRAY
35229: PPUSH
35230: CALL_OW 546
35234: ST_TO_ADDR
// if hex [ 1 ] then
35235: LD_VAR 0 4
35239: PUSH
35240: LD_INT 1
35242: ARRAY
35243: IFFALSE 35247
// continue ;
35245: GO 35135
// h := hex [ 2 ] ;
35247: LD_ADDR_VAR 0 13
35251: PUSH
35252: LD_VAR 0 4
35256: PUSH
35257: LD_INT 2
35259: ARRAY
35260: ST_TO_ADDR
// if h + 7 < height then
35261: LD_VAR 0 13
35265: PUSH
35266: LD_INT 7
35268: PLUS
35269: PUSH
35270: LD_VAR 0 15
35274: LESS
35275: IFFALSE 35304
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35277: LD_ADDR_VAR 0 18
35281: PUSH
35282: LD_INT 7
35284: PUSH
35285: LD_INT 28
35287: PUSH
35288: LD_INT 45
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: PUSH
35296: LD_VAR 0 12
35300: ARRAY
35301: ST_TO_ADDR
// break ;
35302: GO 35306
// end ; end ; end ;
35304: GO 35135
35306: POP
35307: POP
// end ; if not weapon then
35308: LD_VAR 0 18
35312: NOT
35313: IFFALSE 35373
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35315: LD_ADDR_VAR 0 5
35319: PUSH
35320: LD_VAR 0 5
35324: PUSH
35325: LD_INT 11
35327: PUSH
35328: LD_INT 30
35330: PUSH
35331: LD_INT 49
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: DIFF
35339: ST_TO_ADDR
// if not list then
35340: LD_VAR 0 5
35344: NOT
35345: IFFALSE 35349
// exit ;
35347: GO 35491
// weapon := list [ rand ( 1 , list ) ] ;
35349: LD_ADDR_VAR 0 18
35353: PUSH
35354: LD_VAR 0 5
35358: PUSH
35359: LD_INT 1
35361: PPUSH
35362: LD_VAR 0 5
35366: PPUSH
35367: CALL_OW 12
35371: ARRAY
35372: ST_TO_ADDR
// end ; if weapon then
35373: LD_VAR 0 18
35377: IFFALSE 35491
// begin tmp := CostOfWeapon ( weapon ) ;
35379: LD_ADDR_VAR 0 14
35383: PUSH
35384: LD_VAR 0 18
35388: PPUSH
35389: CALL_OW 451
35393: ST_TO_ADDR
// j := GetBase ( tower ) ;
35394: LD_ADDR_VAR 0 9
35398: PUSH
35399: LD_VAR 0 1
35403: PPUSH
35404: CALL_OW 274
35408: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35409: LD_VAR 0 9
35413: PPUSH
35414: LD_INT 1
35416: PPUSH
35417: CALL_OW 275
35421: PUSH
35422: LD_VAR 0 14
35426: PUSH
35427: LD_INT 1
35429: ARRAY
35430: GREATEREQUAL
35431: PUSH
35432: LD_VAR 0 9
35436: PPUSH
35437: LD_INT 2
35439: PPUSH
35440: CALL_OW 275
35444: PUSH
35445: LD_VAR 0 14
35449: PUSH
35450: LD_INT 2
35452: ARRAY
35453: GREATEREQUAL
35454: AND
35455: PUSH
35456: LD_VAR 0 9
35460: PPUSH
35461: LD_INT 3
35463: PPUSH
35464: CALL_OW 275
35468: PUSH
35469: LD_VAR 0 14
35473: PUSH
35474: LD_INT 3
35476: ARRAY
35477: GREATEREQUAL
35478: AND
35479: IFFALSE 35491
// result := weapon ;
35481: LD_ADDR_VAR 0 3
35485: PUSH
35486: LD_VAR 0 18
35490: ST_TO_ADDR
// end ; end ;
35491: LD_VAR 0 3
35495: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35496: LD_INT 0
35498: PPUSH
35499: PPUSH
// result := true ;
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_INT 1
35507: ST_TO_ADDR
// if array1 = array2 then
35508: LD_VAR 0 1
35512: PUSH
35513: LD_VAR 0 2
35517: EQUAL
35518: IFFALSE 35578
// begin for i = 1 to array1 do
35520: LD_ADDR_VAR 0 4
35524: PUSH
35525: DOUBLE
35526: LD_INT 1
35528: DEC
35529: ST_TO_ADDR
35530: LD_VAR 0 1
35534: PUSH
35535: FOR_TO
35536: IFFALSE 35574
// if array1 [ i ] <> array2 [ i ] then
35538: LD_VAR 0 1
35542: PUSH
35543: LD_VAR 0 4
35547: ARRAY
35548: PUSH
35549: LD_VAR 0 2
35553: PUSH
35554: LD_VAR 0 4
35558: ARRAY
35559: NONEQUAL
35560: IFFALSE 35572
// begin result := false ;
35562: LD_ADDR_VAR 0 3
35566: PUSH
35567: LD_INT 0
35569: ST_TO_ADDR
// break ;
35570: GO 35574
// end ;
35572: GO 35535
35574: POP
35575: POP
// end else
35576: GO 35586
// result := false ;
35578: LD_ADDR_VAR 0 3
35582: PUSH
35583: LD_INT 0
35585: ST_TO_ADDR
// end ;
35586: LD_VAR 0 3
35590: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35591: LD_INT 0
35593: PPUSH
35594: PPUSH
// if not array1 or not array2 then
35595: LD_VAR 0 1
35599: NOT
35600: PUSH
35601: LD_VAR 0 2
35605: NOT
35606: OR
35607: IFFALSE 35611
// exit ;
35609: GO 35675
// result := true ;
35611: LD_ADDR_VAR 0 3
35615: PUSH
35616: LD_INT 1
35618: ST_TO_ADDR
// for i = 1 to array1 do
35619: LD_ADDR_VAR 0 4
35623: PUSH
35624: DOUBLE
35625: LD_INT 1
35627: DEC
35628: ST_TO_ADDR
35629: LD_VAR 0 1
35633: PUSH
35634: FOR_TO
35635: IFFALSE 35673
// if array1 [ i ] <> array2 [ i ] then
35637: LD_VAR 0 1
35641: PUSH
35642: LD_VAR 0 4
35646: ARRAY
35647: PUSH
35648: LD_VAR 0 2
35652: PUSH
35653: LD_VAR 0 4
35657: ARRAY
35658: NONEQUAL
35659: IFFALSE 35671
// begin result := false ;
35661: LD_ADDR_VAR 0 3
35665: PUSH
35666: LD_INT 0
35668: ST_TO_ADDR
// break ;
35669: GO 35673
// end ;
35671: GO 35634
35673: POP
35674: POP
// end ;
35675: LD_VAR 0 3
35679: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35680: LD_INT 0
35682: PPUSH
35683: PPUSH
35684: PPUSH
// pom := GetBase ( fac ) ;
35685: LD_ADDR_VAR 0 5
35689: PUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 274
35699: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35700: LD_ADDR_VAR 0 4
35704: PUSH
35705: LD_VAR 0 2
35709: PUSH
35710: LD_INT 1
35712: ARRAY
35713: PPUSH
35714: LD_VAR 0 2
35718: PUSH
35719: LD_INT 2
35721: ARRAY
35722: PPUSH
35723: LD_VAR 0 2
35727: PUSH
35728: LD_INT 3
35730: ARRAY
35731: PPUSH
35732: LD_VAR 0 2
35736: PUSH
35737: LD_INT 4
35739: ARRAY
35740: PPUSH
35741: CALL_OW 449
35745: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35746: LD_ADDR_VAR 0 3
35750: PUSH
35751: LD_VAR 0 5
35755: PPUSH
35756: LD_INT 1
35758: PPUSH
35759: CALL_OW 275
35763: PUSH
35764: LD_VAR 0 4
35768: PUSH
35769: LD_INT 1
35771: ARRAY
35772: GREATEREQUAL
35773: PUSH
35774: LD_VAR 0 5
35778: PPUSH
35779: LD_INT 2
35781: PPUSH
35782: CALL_OW 275
35786: PUSH
35787: LD_VAR 0 4
35791: PUSH
35792: LD_INT 2
35794: ARRAY
35795: GREATEREQUAL
35796: AND
35797: PUSH
35798: LD_VAR 0 5
35802: PPUSH
35803: LD_INT 3
35805: PPUSH
35806: CALL_OW 275
35810: PUSH
35811: LD_VAR 0 4
35815: PUSH
35816: LD_INT 3
35818: ARRAY
35819: GREATEREQUAL
35820: AND
35821: ST_TO_ADDR
// end ;
35822: LD_VAR 0 3
35826: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35827: LD_INT 0
35829: PPUSH
35830: PPUSH
35831: PPUSH
35832: PPUSH
// pom := GetBase ( building ) ;
35833: LD_ADDR_VAR 0 3
35837: PUSH
35838: LD_VAR 0 1
35842: PPUSH
35843: CALL_OW 274
35847: ST_TO_ADDR
// if not pom then
35848: LD_VAR 0 3
35852: NOT
35853: IFFALSE 35857
// exit ;
35855: GO 36027
// btype := GetBType ( building ) ;
35857: LD_ADDR_VAR 0 5
35861: PUSH
35862: LD_VAR 0 1
35866: PPUSH
35867: CALL_OW 266
35871: ST_TO_ADDR
// if btype = b_armoury then
35872: LD_VAR 0 5
35876: PUSH
35877: LD_INT 4
35879: EQUAL
35880: IFFALSE 35890
// btype := b_barracks ;
35882: LD_ADDR_VAR 0 5
35886: PUSH
35887: LD_INT 5
35889: ST_TO_ADDR
// if btype = b_depot then
35890: LD_VAR 0 5
35894: PUSH
35895: LD_INT 0
35897: EQUAL
35898: IFFALSE 35908
// btype := b_warehouse ;
35900: LD_ADDR_VAR 0 5
35904: PUSH
35905: LD_INT 1
35907: ST_TO_ADDR
// if btype = b_workshop then
35908: LD_VAR 0 5
35912: PUSH
35913: LD_INT 2
35915: EQUAL
35916: IFFALSE 35926
// btype := b_factory ;
35918: LD_ADDR_VAR 0 5
35922: PUSH
35923: LD_INT 3
35925: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35926: LD_ADDR_VAR 0 4
35930: PUSH
35931: LD_VAR 0 5
35935: PPUSH
35936: LD_VAR 0 1
35940: PPUSH
35941: CALL_OW 248
35945: PPUSH
35946: CALL_OW 450
35950: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35951: LD_ADDR_VAR 0 2
35955: PUSH
35956: LD_VAR 0 3
35960: PPUSH
35961: LD_INT 1
35963: PPUSH
35964: CALL_OW 275
35968: PUSH
35969: LD_VAR 0 4
35973: PUSH
35974: LD_INT 1
35976: ARRAY
35977: GREATEREQUAL
35978: PUSH
35979: LD_VAR 0 3
35983: PPUSH
35984: LD_INT 2
35986: PPUSH
35987: CALL_OW 275
35991: PUSH
35992: LD_VAR 0 4
35996: PUSH
35997: LD_INT 2
35999: ARRAY
36000: GREATEREQUAL
36001: AND
36002: PUSH
36003: LD_VAR 0 3
36007: PPUSH
36008: LD_INT 3
36010: PPUSH
36011: CALL_OW 275
36015: PUSH
36016: LD_VAR 0 4
36020: PUSH
36021: LD_INT 3
36023: ARRAY
36024: GREATEREQUAL
36025: AND
36026: ST_TO_ADDR
// end ;
36027: LD_VAR 0 2
36031: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36032: LD_INT 0
36034: PPUSH
36035: PPUSH
36036: PPUSH
// pom := GetBase ( building ) ;
36037: LD_ADDR_VAR 0 4
36041: PUSH
36042: LD_VAR 0 1
36046: PPUSH
36047: CALL_OW 274
36051: ST_TO_ADDR
// if not pom then
36052: LD_VAR 0 4
36056: NOT
36057: IFFALSE 36061
// exit ;
36059: GO 36162
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36061: LD_ADDR_VAR 0 5
36065: PUSH
36066: LD_VAR 0 2
36070: PPUSH
36071: LD_VAR 0 1
36075: PPUSH
36076: CALL_OW 248
36080: PPUSH
36081: CALL_OW 450
36085: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36086: LD_ADDR_VAR 0 3
36090: PUSH
36091: LD_VAR 0 4
36095: PPUSH
36096: LD_INT 1
36098: PPUSH
36099: CALL_OW 275
36103: PUSH
36104: LD_VAR 0 5
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: GREATEREQUAL
36113: PUSH
36114: LD_VAR 0 4
36118: PPUSH
36119: LD_INT 2
36121: PPUSH
36122: CALL_OW 275
36126: PUSH
36127: LD_VAR 0 5
36131: PUSH
36132: LD_INT 2
36134: ARRAY
36135: GREATEREQUAL
36136: AND
36137: PUSH
36138: LD_VAR 0 4
36142: PPUSH
36143: LD_INT 3
36145: PPUSH
36146: CALL_OW 275
36150: PUSH
36151: LD_VAR 0 5
36155: PUSH
36156: LD_INT 3
36158: ARRAY
36159: GREATEREQUAL
36160: AND
36161: ST_TO_ADDR
// end ;
36162: LD_VAR 0 3
36166: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36167: LD_INT 0
36169: PPUSH
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
// result := false ;
36180: LD_ADDR_VAR 0 8
36184: PUSH
36185: LD_INT 0
36187: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36188: LD_VAR 0 5
36192: NOT
36193: PUSH
36194: LD_VAR 0 1
36198: NOT
36199: OR
36200: PUSH
36201: LD_VAR 0 2
36205: NOT
36206: OR
36207: PUSH
36208: LD_VAR 0 3
36212: NOT
36213: OR
36214: IFFALSE 36218
// exit ;
36216: GO 37032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36218: LD_ADDR_VAR 0 14
36222: PUSH
36223: LD_VAR 0 1
36227: PPUSH
36228: LD_VAR 0 2
36232: PPUSH
36233: LD_VAR 0 3
36237: PPUSH
36238: LD_VAR 0 4
36242: PPUSH
36243: LD_VAR 0 5
36247: PUSH
36248: LD_INT 1
36250: ARRAY
36251: PPUSH
36252: CALL_OW 248
36256: PPUSH
36257: LD_INT 0
36259: PPUSH
36260: CALL 38269 0 6
36264: ST_TO_ADDR
// if not hexes then
36265: LD_VAR 0 14
36269: NOT
36270: IFFALSE 36274
// exit ;
36272: GO 37032
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36274: LD_ADDR_VAR 0 17
36278: PUSH
36279: LD_VAR 0 5
36283: PPUSH
36284: LD_INT 22
36286: PUSH
36287: LD_VAR 0 13
36291: PPUSH
36292: CALL_OW 255
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: LD_INT 30
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 30
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PPUSH
36333: CALL_OW 72
36337: ST_TO_ADDR
// for i = 1 to hexes do
36338: LD_ADDR_VAR 0 9
36342: PUSH
36343: DOUBLE
36344: LD_INT 1
36346: DEC
36347: ST_TO_ADDR
36348: LD_VAR 0 14
36352: PUSH
36353: FOR_TO
36354: IFFALSE 37030
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36356: LD_ADDR_VAR 0 13
36360: PUSH
36361: LD_VAR 0 14
36365: PUSH
36366: LD_VAR 0 9
36370: ARRAY
36371: PUSH
36372: LD_INT 1
36374: ARRAY
36375: PPUSH
36376: LD_VAR 0 14
36380: PUSH
36381: LD_VAR 0 9
36385: ARRAY
36386: PUSH
36387: LD_INT 2
36389: ARRAY
36390: PPUSH
36391: CALL_OW 428
36395: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36396: LD_VAR 0 14
36400: PUSH
36401: LD_VAR 0 9
36405: ARRAY
36406: PUSH
36407: LD_INT 1
36409: ARRAY
36410: PPUSH
36411: LD_VAR 0 14
36415: PUSH
36416: LD_VAR 0 9
36420: ARRAY
36421: PUSH
36422: LD_INT 2
36424: ARRAY
36425: PPUSH
36426: CALL_OW 351
36430: PUSH
36431: LD_VAR 0 14
36435: PUSH
36436: LD_VAR 0 9
36440: ARRAY
36441: PUSH
36442: LD_INT 1
36444: ARRAY
36445: PPUSH
36446: LD_VAR 0 14
36450: PUSH
36451: LD_VAR 0 9
36455: ARRAY
36456: PUSH
36457: LD_INT 2
36459: ARRAY
36460: PPUSH
36461: CALL_OW 488
36465: NOT
36466: OR
36467: PUSH
36468: LD_VAR 0 13
36472: PPUSH
36473: CALL_OW 247
36477: PUSH
36478: LD_INT 3
36480: EQUAL
36481: OR
36482: IFFALSE 36488
// exit ;
36484: POP
36485: POP
36486: GO 37032
// if not tmp then
36488: LD_VAR 0 13
36492: NOT
36493: IFFALSE 36497
// continue ;
36495: GO 36353
// result := true ;
36497: LD_ADDR_VAR 0 8
36501: PUSH
36502: LD_INT 1
36504: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36505: LD_VAR 0 6
36509: PUSH
36510: LD_VAR 0 13
36514: PPUSH
36515: CALL_OW 247
36519: PUSH
36520: LD_INT 2
36522: EQUAL
36523: AND
36524: PUSH
36525: LD_VAR 0 13
36529: PPUSH
36530: CALL_OW 263
36534: PUSH
36535: LD_INT 1
36537: EQUAL
36538: AND
36539: IFFALSE 36703
// begin if IsDrivenBy ( tmp ) then
36541: LD_VAR 0 13
36545: PPUSH
36546: CALL_OW 311
36550: IFFALSE 36554
// continue ;
36552: GO 36353
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36554: LD_VAR 0 6
36558: PPUSH
36559: LD_INT 3
36561: PUSH
36562: LD_INT 60
36564: PUSH
36565: EMPTY
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: LD_INT 55
36577: PUSH
36578: EMPTY
36579: LIST
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PPUSH
36589: CALL_OW 72
36593: IFFALSE 36701
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36595: LD_ADDR_VAR 0 18
36599: PUSH
36600: LD_VAR 0 6
36604: PPUSH
36605: LD_INT 3
36607: PUSH
36608: LD_INT 60
36610: PUSH
36611: EMPTY
36612: LIST
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 3
36620: PUSH
36621: LD_INT 55
36623: PUSH
36624: EMPTY
36625: LIST
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PPUSH
36635: CALL_OW 72
36639: PUSH
36640: LD_INT 1
36642: ARRAY
36643: ST_TO_ADDR
// if IsInUnit ( driver ) then
36644: LD_VAR 0 18
36648: PPUSH
36649: CALL_OW 310
36653: IFFALSE 36664
// ComExit ( driver ) ;
36655: LD_VAR 0 18
36659: PPUSH
36660: CALL 61397 0 1
// AddComEnterUnit ( driver , tmp ) ;
36664: LD_VAR 0 18
36668: PPUSH
36669: LD_VAR 0 13
36673: PPUSH
36674: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36678: LD_VAR 0 18
36682: PPUSH
36683: LD_VAR 0 7
36687: PPUSH
36688: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36692: LD_VAR 0 18
36696: PPUSH
36697: CALL_OW 181
// end ; continue ;
36701: GO 36353
// end ; if not cleaners or not tmp in cleaners then
36703: LD_VAR 0 6
36707: NOT
36708: PUSH
36709: LD_VAR 0 13
36713: PUSH
36714: LD_VAR 0 6
36718: IN
36719: NOT
36720: OR
36721: IFFALSE 37028
// begin if dep then
36723: LD_VAR 0 17
36727: IFFALSE 36863
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36729: LD_ADDR_VAR 0 16
36733: PUSH
36734: LD_VAR 0 17
36738: PUSH
36739: LD_INT 1
36741: ARRAY
36742: PPUSH
36743: CALL_OW 250
36747: PPUSH
36748: LD_VAR 0 17
36752: PUSH
36753: LD_INT 1
36755: ARRAY
36756: PPUSH
36757: CALL_OW 254
36761: PPUSH
36762: LD_INT 5
36764: PPUSH
36765: CALL_OW 272
36769: PUSH
36770: LD_VAR 0 17
36774: PUSH
36775: LD_INT 1
36777: ARRAY
36778: PPUSH
36779: CALL_OW 251
36783: PPUSH
36784: LD_VAR 0 17
36788: PUSH
36789: LD_INT 1
36791: ARRAY
36792: PPUSH
36793: CALL_OW 254
36797: PPUSH
36798: LD_INT 5
36800: PPUSH
36801: CALL_OW 273
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36810: LD_VAR 0 16
36814: PUSH
36815: LD_INT 1
36817: ARRAY
36818: PPUSH
36819: LD_VAR 0 16
36823: PUSH
36824: LD_INT 2
36826: ARRAY
36827: PPUSH
36828: CALL_OW 488
36832: IFFALSE 36863
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36834: LD_VAR 0 13
36838: PPUSH
36839: LD_VAR 0 16
36843: PUSH
36844: LD_INT 1
36846: ARRAY
36847: PPUSH
36848: LD_VAR 0 16
36852: PUSH
36853: LD_INT 2
36855: ARRAY
36856: PPUSH
36857: CALL_OW 111
// continue ;
36861: GO 36353
// end ; end ; r := GetDir ( tmp ) ;
36863: LD_ADDR_VAR 0 15
36867: PUSH
36868: LD_VAR 0 13
36872: PPUSH
36873: CALL_OW 254
36877: ST_TO_ADDR
// if r = 5 then
36878: LD_VAR 0 15
36882: PUSH
36883: LD_INT 5
36885: EQUAL
36886: IFFALSE 36896
// r := 0 ;
36888: LD_ADDR_VAR 0 15
36892: PUSH
36893: LD_INT 0
36895: ST_TO_ADDR
// for j = r to 5 do
36896: LD_ADDR_VAR 0 10
36900: PUSH
36901: DOUBLE
36902: LD_VAR 0 15
36906: DEC
36907: ST_TO_ADDR
36908: LD_INT 5
36910: PUSH
36911: FOR_TO
36912: IFFALSE 37026
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36914: LD_ADDR_VAR 0 11
36918: PUSH
36919: LD_VAR 0 13
36923: PPUSH
36924: CALL_OW 250
36928: PPUSH
36929: LD_VAR 0 10
36933: PPUSH
36934: LD_INT 2
36936: PPUSH
36937: CALL_OW 272
36941: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36942: LD_ADDR_VAR 0 12
36946: PUSH
36947: LD_VAR 0 13
36951: PPUSH
36952: CALL_OW 251
36956: PPUSH
36957: LD_VAR 0 10
36961: PPUSH
36962: LD_INT 2
36964: PPUSH
36965: CALL_OW 273
36969: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36970: LD_VAR 0 11
36974: PPUSH
36975: LD_VAR 0 12
36979: PPUSH
36980: CALL_OW 488
36984: PUSH
36985: LD_VAR 0 11
36989: PPUSH
36990: LD_VAR 0 12
36994: PPUSH
36995: CALL_OW 428
36999: NOT
37000: AND
37001: IFFALSE 37024
// begin ComMoveXY ( tmp , _x , _y ) ;
37003: LD_VAR 0 13
37007: PPUSH
37008: LD_VAR 0 11
37012: PPUSH
37013: LD_VAR 0 12
37017: PPUSH
37018: CALL_OW 111
// break ;
37022: GO 37026
// end ; end ;
37024: GO 36911
37026: POP
37027: POP
// end ; end ;
37028: GO 36353
37030: POP
37031: POP
// end ;
37032: LD_VAR 0 8
37036: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37037: LD_INT 0
37039: PPUSH
// result := true ;
37040: LD_ADDR_VAR 0 3
37044: PUSH
37045: LD_INT 1
37047: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37048: LD_VAR 0 2
37052: PUSH
37053: LD_INT 24
37055: DOUBLE
37056: EQUAL
37057: IFTRUE 37067
37059: LD_INT 33
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37067
37065: GO 37092
37067: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37068: LD_ADDR_VAR 0 3
37072: PUSH
37073: LD_INT 32
37075: PPUSH
37076: LD_VAR 0 1
37080: PPUSH
37081: CALL_OW 321
37085: PUSH
37086: LD_INT 2
37088: EQUAL
37089: ST_TO_ADDR
37090: GO 37412
37092: LD_INT 20
37094: DOUBLE
37095: EQUAL
37096: IFTRUE 37100
37098: GO 37125
37100: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37101: LD_ADDR_VAR 0 3
37105: PUSH
37106: LD_INT 6
37108: PPUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: CALL_OW 321
37118: PUSH
37119: LD_INT 2
37121: EQUAL
37122: ST_TO_ADDR
37123: GO 37412
37125: LD_INT 22
37127: DOUBLE
37128: EQUAL
37129: IFTRUE 37139
37131: LD_INT 36
37133: DOUBLE
37134: EQUAL
37135: IFTRUE 37139
37137: GO 37164
37139: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37140: LD_ADDR_VAR 0 3
37144: PUSH
37145: LD_INT 15
37147: PPUSH
37148: LD_VAR 0 1
37152: PPUSH
37153: CALL_OW 321
37157: PUSH
37158: LD_INT 2
37160: EQUAL
37161: ST_TO_ADDR
37162: GO 37412
37164: LD_INT 30
37166: DOUBLE
37167: EQUAL
37168: IFTRUE 37172
37170: GO 37197
37172: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37173: LD_ADDR_VAR 0 3
37177: PUSH
37178: LD_INT 20
37180: PPUSH
37181: LD_VAR 0 1
37185: PPUSH
37186: CALL_OW 321
37190: PUSH
37191: LD_INT 2
37193: EQUAL
37194: ST_TO_ADDR
37195: GO 37412
37197: LD_INT 28
37199: DOUBLE
37200: EQUAL
37201: IFTRUE 37211
37203: LD_INT 21
37205: DOUBLE
37206: EQUAL
37207: IFTRUE 37211
37209: GO 37236
37211: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37212: LD_ADDR_VAR 0 3
37216: PUSH
37217: LD_INT 21
37219: PPUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 321
37229: PUSH
37230: LD_INT 2
37232: EQUAL
37233: ST_TO_ADDR
37234: GO 37412
37236: LD_INT 16
37238: DOUBLE
37239: EQUAL
37240: IFTRUE 37244
37242: GO 37271
37244: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_EXP 106
37254: PPUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: CALL_OW 321
37264: PUSH
37265: LD_INT 2
37267: EQUAL
37268: ST_TO_ADDR
37269: GO 37412
37271: LD_INT 19
37273: DOUBLE
37274: EQUAL
37275: IFTRUE 37285
37277: LD_INT 23
37279: DOUBLE
37280: EQUAL
37281: IFTRUE 37285
37283: GO 37312
37285: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37286: LD_ADDR_VAR 0 3
37290: PUSH
37291: LD_EXP 105
37295: PPUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 321
37305: PUSH
37306: LD_INT 2
37308: EQUAL
37309: ST_TO_ADDR
37310: GO 37412
37312: LD_INT 17
37314: DOUBLE
37315: EQUAL
37316: IFTRUE 37320
37318: GO 37345
37320: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37321: LD_ADDR_VAR 0 3
37325: PUSH
37326: LD_INT 39
37328: PPUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 321
37338: PUSH
37339: LD_INT 2
37341: EQUAL
37342: ST_TO_ADDR
37343: GO 37412
37345: LD_INT 18
37347: DOUBLE
37348: EQUAL
37349: IFTRUE 37353
37351: GO 37378
37353: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37354: LD_ADDR_VAR 0 3
37358: PUSH
37359: LD_INT 40
37361: PPUSH
37362: LD_VAR 0 1
37366: PPUSH
37367: CALL_OW 321
37371: PUSH
37372: LD_INT 2
37374: EQUAL
37375: ST_TO_ADDR
37376: GO 37412
37378: LD_INT 27
37380: DOUBLE
37381: EQUAL
37382: IFTRUE 37386
37384: GO 37411
37386: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37387: LD_ADDR_VAR 0 3
37391: PUSH
37392: LD_INT 35
37394: PPUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 321
37404: PUSH
37405: LD_INT 2
37407: EQUAL
37408: ST_TO_ADDR
37409: GO 37412
37411: POP
// end ;
37412: LD_VAR 0 3
37416: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37417: LD_INT 0
37419: PPUSH
37420: PPUSH
37421: PPUSH
37422: PPUSH
37423: PPUSH
37424: PPUSH
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
37429: PPUSH
// result := false ;
37430: LD_ADDR_VAR 0 6
37434: PUSH
37435: LD_INT 0
37437: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37438: LD_VAR 0 1
37442: NOT
37443: PUSH
37444: LD_VAR 0 1
37448: PPUSH
37449: CALL_OW 266
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: IN
37464: NOT
37465: OR
37466: PUSH
37467: LD_VAR 0 2
37471: NOT
37472: OR
37473: PUSH
37474: LD_VAR 0 5
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 2
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: LD_INT 4
37493: PUSH
37494: LD_INT 5
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: IN
37505: NOT
37506: OR
37507: PUSH
37508: LD_VAR 0 3
37512: PPUSH
37513: LD_VAR 0 4
37517: PPUSH
37518: CALL_OW 488
37522: NOT
37523: OR
37524: IFFALSE 37528
// exit ;
37526: GO 38264
// side := GetSide ( depot ) ;
37528: LD_ADDR_VAR 0 9
37532: PUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: CALL_OW 255
37542: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37543: LD_VAR 0 9
37547: PPUSH
37548: LD_VAR 0 2
37552: PPUSH
37553: CALL 37037 0 2
37557: NOT
37558: IFFALSE 37562
// exit ;
37560: GO 38264
// pom := GetBase ( depot ) ;
37562: LD_ADDR_VAR 0 10
37566: PUSH
37567: LD_VAR 0 1
37571: PPUSH
37572: CALL_OW 274
37576: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37577: LD_ADDR_VAR 0 11
37581: PUSH
37582: LD_VAR 0 2
37586: PPUSH
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 248
37596: PPUSH
37597: CALL_OW 450
37601: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37602: LD_VAR 0 10
37606: PPUSH
37607: LD_INT 1
37609: PPUSH
37610: CALL_OW 275
37614: PUSH
37615: LD_VAR 0 11
37619: PUSH
37620: LD_INT 1
37622: ARRAY
37623: GREATEREQUAL
37624: PUSH
37625: LD_VAR 0 10
37629: PPUSH
37630: LD_INT 2
37632: PPUSH
37633: CALL_OW 275
37637: PUSH
37638: LD_VAR 0 11
37642: PUSH
37643: LD_INT 2
37645: ARRAY
37646: GREATEREQUAL
37647: AND
37648: PUSH
37649: LD_VAR 0 10
37653: PPUSH
37654: LD_INT 3
37656: PPUSH
37657: CALL_OW 275
37661: PUSH
37662: LD_VAR 0 11
37666: PUSH
37667: LD_INT 3
37669: ARRAY
37670: GREATEREQUAL
37671: AND
37672: NOT
37673: IFFALSE 37677
// exit ;
37675: GO 38264
// if GetBType ( depot ) = b_depot then
37677: LD_VAR 0 1
37681: PPUSH
37682: CALL_OW 266
37686: PUSH
37687: LD_INT 0
37689: EQUAL
37690: IFFALSE 37702
// dist := 28 else
37692: LD_ADDR_VAR 0 14
37696: PUSH
37697: LD_INT 28
37699: ST_TO_ADDR
37700: GO 37710
// dist := 36 ;
37702: LD_ADDR_VAR 0 14
37706: PUSH
37707: LD_INT 36
37709: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37710: LD_VAR 0 1
37714: PPUSH
37715: LD_VAR 0 3
37719: PPUSH
37720: LD_VAR 0 4
37724: PPUSH
37725: CALL_OW 297
37729: PUSH
37730: LD_VAR 0 14
37734: GREATER
37735: IFFALSE 37739
// exit ;
37737: GO 38264
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37739: LD_ADDR_VAR 0 12
37743: PUSH
37744: LD_VAR 0 2
37748: PPUSH
37749: LD_VAR 0 3
37753: PPUSH
37754: LD_VAR 0 4
37758: PPUSH
37759: LD_VAR 0 5
37763: PPUSH
37764: LD_VAR 0 1
37768: PPUSH
37769: CALL_OW 248
37773: PPUSH
37774: LD_INT 0
37776: PPUSH
37777: CALL 38269 0 6
37781: ST_TO_ADDR
// if not hexes then
37782: LD_VAR 0 12
37786: NOT
37787: IFFALSE 37791
// exit ;
37789: GO 38264
// hex := GetHexInfo ( x , y ) ;
37791: LD_ADDR_VAR 0 15
37795: PUSH
37796: LD_VAR 0 3
37800: PPUSH
37801: LD_VAR 0 4
37805: PPUSH
37806: CALL_OW 546
37810: ST_TO_ADDR
// if hex [ 1 ] then
37811: LD_VAR 0 15
37815: PUSH
37816: LD_INT 1
37818: ARRAY
37819: IFFALSE 37823
// exit ;
37821: GO 38264
// height := hex [ 2 ] ;
37823: LD_ADDR_VAR 0 13
37827: PUSH
37828: LD_VAR 0 15
37832: PUSH
37833: LD_INT 2
37835: ARRAY
37836: ST_TO_ADDR
// for i = 1 to hexes do
37837: LD_ADDR_VAR 0 7
37841: PUSH
37842: DOUBLE
37843: LD_INT 1
37845: DEC
37846: ST_TO_ADDR
37847: LD_VAR 0 12
37851: PUSH
37852: FOR_TO
37853: IFFALSE 38183
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37855: LD_VAR 0 12
37859: PUSH
37860: LD_VAR 0 7
37864: ARRAY
37865: PUSH
37866: LD_INT 1
37868: ARRAY
37869: PPUSH
37870: LD_VAR 0 12
37874: PUSH
37875: LD_VAR 0 7
37879: ARRAY
37880: PUSH
37881: LD_INT 2
37883: ARRAY
37884: PPUSH
37885: CALL_OW 488
37889: NOT
37890: PUSH
37891: LD_VAR 0 12
37895: PUSH
37896: LD_VAR 0 7
37900: ARRAY
37901: PUSH
37902: LD_INT 1
37904: ARRAY
37905: PPUSH
37906: LD_VAR 0 12
37910: PUSH
37911: LD_VAR 0 7
37915: ARRAY
37916: PUSH
37917: LD_INT 2
37919: ARRAY
37920: PPUSH
37921: CALL_OW 428
37925: PUSH
37926: LD_INT 0
37928: GREATER
37929: OR
37930: PUSH
37931: LD_VAR 0 12
37935: PUSH
37936: LD_VAR 0 7
37940: ARRAY
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: PPUSH
37946: LD_VAR 0 12
37950: PUSH
37951: LD_VAR 0 7
37955: ARRAY
37956: PUSH
37957: LD_INT 2
37959: ARRAY
37960: PPUSH
37961: CALL_OW 351
37965: OR
37966: IFFALSE 37972
// exit ;
37968: POP
37969: POP
37970: GO 38264
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37972: LD_ADDR_VAR 0 8
37976: PUSH
37977: LD_VAR 0 12
37981: PUSH
37982: LD_VAR 0 7
37986: ARRAY
37987: PUSH
37988: LD_INT 1
37990: ARRAY
37991: PPUSH
37992: LD_VAR 0 12
37996: PUSH
37997: LD_VAR 0 7
38001: ARRAY
38002: PUSH
38003: LD_INT 2
38005: ARRAY
38006: PPUSH
38007: CALL_OW 546
38011: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38012: LD_VAR 0 8
38016: PUSH
38017: LD_INT 1
38019: ARRAY
38020: PUSH
38021: LD_VAR 0 8
38025: PUSH
38026: LD_INT 2
38028: ARRAY
38029: PUSH
38030: LD_VAR 0 13
38034: PUSH
38035: LD_INT 2
38037: PLUS
38038: GREATER
38039: OR
38040: PUSH
38041: LD_VAR 0 8
38045: PUSH
38046: LD_INT 2
38048: ARRAY
38049: PUSH
38050: LD_VAR 0 13
38054: PUSH
38055: LD_INT 2
38057: MINUS
38058: LESS
38059: OR
38060: PUSH
38061: LD_VAR 0 8
38065: PUSH
38066: LD_INT 3
38068: ARRAY
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 8
38075: PUSH
38076: LD_INT 9
38078: PUSH
38079: LD_INT 10
38081: PUSH
38082: LD_INT 11
38084: PUSH
38085: LD_INT 12
38087: PUSH
38088: LD_INT 13
38090: PUSH
38091: LD_INT 16
38093: PUSH
38094: LD_INT 17
38096: PUSH
38097: LD_INT 18
38099: PUSH
38100: LD_INT 19
38102: PUSH
38103: LD_INT 20
38105: PUSH
38106: LD_INT 21
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: IN
38124: NOT
38125: OR
38126: PUSH
38127: LD_VAR 0 8
38131: PUSH
38132: LD_INT 5
38134: ARRAY
38135: NOT
38136: OR
38137: PUSH
38138: LD_VAR 0 8
38142: PUSH
38143: LD_INT 6
38145: ARRAY
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: LD_INT 7
38155: PUSH
38156: LD_INT 9
38158: PUSH
38159: LD_INT 10
38161: PUSH
38162: LD_INT 11
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: IN
38173: NOT
38174: OR
38175: IFFALSE 38181
// exit ;
38177: POP
38178: POP
38179: GO 38264
// end ;
38181: GO 37852
38183: POP
38184: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38185: LD_VAR 0 9
38189: PPUSH
38190: LD_VAR 0 3
38194: PPUSH
38195: LD_VAR 0 4
38199: PPUSH
38200: LD_INT 20
38202: PPUSH
38203: CALL 30210 0 4
38207: PUSH
38208: LD_INT 4
38210: ARRAY
38211: IFFALSE 38215
// exit ;
38213: GO 38264
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38215: LD_VAR 0 2
38219: PUSH
38220: LD_INT 29
38222: PUSH
38223: LD_INT 30
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: IN
38230: PUSH
38231: LD_VAR 0 3
38235: PPUSH
38236: LD_VAR 0 4
38240: PPUSH
38241: LD_VAR 0 9
38245: PPUSH
38246: CALL_OW 440
38250: NOT
38251: AND
38252: IFFALSE 38256
// exit ;
38254: GO 38264
// result := true ;
38256: LD_ADDR_VAR 0 6
38260: PUSH
38261: LD_INT 1
38263: ST_TO_ADDR
// end ;
38264: LD_VAR 0 6
38268: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38269: LD_INT 0
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
38278: PPUSH
38279: PPUSH
38280: PPUSH
38281: PPUSH
38282: PPUSH
38283: PPUSH
38284: PPUSH
38285: PPUSH
38286: PPUSH
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
38294: PPUSH
38295: PPUSH
38296: PPUSH
38297: PPUSH
38298: PPUSH
38299: PPUSH
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
// result = [ ] ;
38329: LD_ADDR_VAR 0 7
38333: PUSH
38334: EMPTY
38335: ST_TO_ADDR
// temp_list = [ ] ;
38336: LD_ADDR_VAR 0 9
38340: PUSH
38341: EMPTY
38342: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38343: LD_VAR 0 4
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: LD_INT 4
38362: PUSH
38363: LD_INT 5
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: IN
38374: NOT
38375: PUSH
38376: LD_VAR 0 1
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: IN
38391: PUSH
38392: LD_VAR 0 5
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: LD_INT 3
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: IN
38411: NOT
38412: AND
38413: OR
38414: IFFALSE 38418
// exit ;
38416: GO 56809
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38418: LD_VAR 0 1
38422: PUSH
38423: LD_INT 6
38425: PUSH
38426: LD_INT 7
38428: PUSH
38429: LD_INT 8
38431: PUSH
38432: LD_INT 13
38434: PUSH
38435: LD_INT 12
38437: PUSH
38438: LD_INT 15
38440: PUSH
38441: LD_INT 11
38443: PUSH
38444: LD_INT 14
38446: PUSH
38447: LD_INT 10
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: IN
38461: IFFALSE 38471
// btype = b_lab ;
38463: LD_ADDR_VAR 0 1
38467: PUSH
38468: LD_INT 6
38470: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38471: LD_VAR 0 6
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: IN
38490: NOT
38491: PUSH
38492: LD_VAR 0 1
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: LD_INT 3
38508: PUSH
38509: LD_INT 6
38511: PUSH
38512: LD_INT 36
38514: PUSH
38515: LD_INT 4
38517: PUSH
38518: LD_INT 5
38520: PUSH
38521: LD_INT 31
38523: PUSH
38524: LD_INT 32
38526: PUSH
38527: LD_INT 33
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: IN
38543: NOT
38544: PUSH
38545: LD_VAR 0 6
38549: PUSH
38550: LD_INT 1
38552: EQUAL
38553: AND
38554: OR
38555: PUSH
38556: LD_VAR 0 1
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 3
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: IN
38571: NOT
38572: PUSH
38573: LD_VAR 0 6
38577: PUSH
38578: LD_INT 2
38580: EQUAL
38581: AND
38582: OR
38583: IFFALSE 38593
// mode = 0 ;
38585: LD_ADDR_VAR 0 6
38589: PUSH
38590: LD_INT 0
38592: ST_TO_ADDR
// case mode of 0 :
38593: LD_VAR 0 6
38597: PUSH
38598: LD_INT 0
38600: DOUBLE
38601: EQUAL
38602: IFTRUE 38606
38604: GO 50059
38606: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38607: LD_ADDR_VAR 0 11
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 3
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38800: LD_ADDR_VAR 0 12
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: NEG
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 3
38957: NEG
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 3
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38996: LD_ADDR_VAR 0 13
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: LD_INT 3
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 3
39155: NEG
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39195: LD_ADDR_VAR 0 14
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 2
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 3
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 3
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39391: LD_ADDR_VAR 0 15
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: LD_INT 1
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 3
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 3
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39584: LD_ADDR_VAR 0 16
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 3
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 3
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39777: LD_ADDR_VAR 0 17
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 2
39953: NEG
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40007: LD_ADDR_VAR 0 18
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40237: LD_ADDR_VAR 0 19
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40467: LD_ADDR_VAR 0 20
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40697: LD_ADDR_VAR 0 21
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40927: LD_ADDR_VAR 0 22
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41157: LD_ADDR_VAR 0 23
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 2
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: NEG
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: LD_INT 3
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41437: LD_ADDR_VAR 0 24
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41713: LD_ADDR_VAR 0 25
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: LD_INT 2
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 2
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 3
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 3
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41987: LD_ADDR_VAR 0 26
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: LD_INT 3
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 3
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42263: LD_ADDR_VAR 0 27
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 2
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42543: LD_ADDR_VAR 0 28
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 3
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 3
42778: NEG
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 3
42790: NEG
42791: PUSH
42792: LD_INT 2
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42825: LD_ADDR_VAR 0 29
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 2
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43104: LD_ADDR_VAR 0 30
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: NEG
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 3
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 3
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43382: LD_ADDR_VAR 0 31
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: LD_INT 3
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 3
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 3
43625: NEG
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43660: LD_ADDR_VAR 0 32
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: NEG
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: LD_INT 3
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 3
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: NEG
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43938: LD_ADDR_VAR 0 33
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: LD_INT 3
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44217: LD_ADDR_VAR 0 34
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 3
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 3
44462: NEG
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44497: LD_ADDR_VAR 0 35
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44609: LD_ADDR_VAR 0 36
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44721: LD_ADDR_VAR 0 37
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44833: LD_ADDR_VAR 0 38
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44945: LD_ADDR_VAR 0 39
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45057: LD_ADDR_VAR 0 40
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45169: LD_ADDR_VAR 0 41
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: LD_INT 3
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 3
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 3
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 3
45478: NEG
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45519: LD_ADDR_VAR 0 42
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 3
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 3
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 3
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 3
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 3
45816: NEG
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 3
45828: NEG
45829: PUSH
45830: LD_INT 3
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45869: LD_ADDR_VAR 0 43
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 3
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 3
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46217: LD_ADDR_VAR 0 44
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: LD_INT 3
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 3
46491: NEG
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: NEG
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: LD_INT 3
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46567: LD_ADDR_VAR 0 45
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: LD_INT 3
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 3
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 3
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 3
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 3
46864: NEG
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46917: LD_ADDR_VAR 0 46
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 3
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 3
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 3
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 3
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47265: LD_ADDR_VAR 0 47
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47416: LD_ADDR_VAR 0 48
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47563: LD_ADDR_VAR 0 49
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47707: LD_ADDR_VAR 0 50
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47851: LD_ADDR_VAR 0 51
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47998: LD_ADDR_VAR 0 52
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48149: LD_ADDR_VAR 0 53
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48379: LD_ADDR_VAR 0 54
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48609: LD_ADDR_VAR 0 55
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48839: LD_ADDR_VAR 0 56
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49069: LD_ADDR_VAR 0 57
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49299: LD_ADDR_VAR 0 58
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49529: LD_ADDR_VAR 0 59
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49617: LD_ADDR_VAR 0 60
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49705: LD_ADDR_VAR 0 61
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49793: LD_ADDR_VAR 0 62
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49881: LD_ADDR_VAR 0 63
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49969: LD_ADDR_VAR 0 64
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// end ; 1 :
50057: GO 55954
50059: LD_INT 1
50061: DOUBLE
50062: EQUAL
50063: IFTRUE 50067
50065: GO 52690
50067: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50068: LD_ADDR_VAR 0 11
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 3
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50112: LD_ADDR_VAR 0 12
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 3
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50153: LD_ADDR_VAR 0 13
50157: PUSH
50158: LD_INT 3
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: LD_INT 3
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: LD_INT 3
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50193: LD_ADDR_VAR 0 14
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 3
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50234: LD_ADDR_VAR 0 15
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: LIST
50277: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50278: LD_ADDR_VAR 0 16
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50324: LD_ADDR_VAR 0 17
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 3
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: LIST
50367: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50368: LD_ADDR_VAR 0 18
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50409: LD_ADDR_VAR 0 19
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50449: LD_ADDR_VAR 0 20
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: LD_INT 3
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 3
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: LIST
50489: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50490: LD_ADDR_VAR 0 21
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: LIST
50533: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50534: LD_ADDR_VAR 0 22
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 3
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50580: LD_ADDR_VAR 0 23
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 4
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50624: LD_ADDR_VAR 0 24
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 3
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 4
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50665: LD_ADDR_VAR 0 25
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 4
50682: PUSH
50683: LD_INT 3
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: PUSH
50693: LD_INT 4
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50705: LD_ADDR_VAR 0 26
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 3
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 4
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50746: LD_ADDR_VAR 0 27
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 4
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50790: LD_ADDR_VAR 0 28
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: NEG
50810: PUSH
50811: LD_INT 4
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 4
50821: NEG
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: LIST
50835: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50836: LD_ADDR_VAR 0 29
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 3
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 4
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 4
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 3
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 5
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 5
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 4
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 6
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 6
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 5
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50991: LD_ADDR_VAR 0 30
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 4
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 4
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 4
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 5
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 5
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 5
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 6
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 6
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51134: LD_ADDR_VAR 0 31
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: LD_INT 3
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 3
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 4
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 4
51181: PUSH
51182: LD_INT 4
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: LD_INT 4
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 5
51201: PUSH
51202: LD_INT 4
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 5
51211: PUSH
51212: LD_INT 5
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 4
51221: PUSH
51222: LD_INT 5
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 6
51231: PUSH
51232: LD_INT 5
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 6
51241: PUSH
51242: LD_INT 6
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 5
51251: PUSH
51252: LD_INT 6
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51273: LD_ADDR_VAR 0 32
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 4
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 4
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 5
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 5
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 4
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 6
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 6
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 5
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51416: LD_ADDR_VAR 0 33
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 4
51468: NEG
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 4
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 4
51491: NEG
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 5
51502: NEG
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 5
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 5
51525: NEG
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 6
51536: NEG
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 6
51547: NEG
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51571: LD_ADDR_VAR 0 34
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 3
51590: NEG
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 4
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 4
51626: NEG
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 4
51638: NEG
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 4
51650: NEG
51651: PUSH
51652: LD_INT 5
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 5
51662: NEG
51663: PUSH
51664: LD_INT 4
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 5
51674: NEG
51675: PUSH
51676: LD_INT 5
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 5
51686: NEG
51687: PUSH
51688: LD_INT 6
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 6
51698: NEG
51699: PUSH
51700: LD_INT 5
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 6
51710: NEG
51711: PUSH
51712: LD_INT 6
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51734: LD_ADDR_VAR 0 41
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 3
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51778: LD_ADDR_VAR 0 42
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51819: LD_ADDR_VAR 0 43
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51859: LD_ADDR_VAR 0 44
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51900: LD_ADDR_VAR 0 45
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 3
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: LIST
51943: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51944: LD_ADDR_VAR 0 46
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 3
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 3
51975: NEG
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51990: LD_ADDR_VAR 0 47
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: LD_INT 3
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 3
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52023: LD_ADDR_VAR 0 48
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52054: LD_ADDR_VAR 0 49
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 3
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52083: LD_ADDR_VAR 0 50
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52112: LD_ADDR_VAR 0 51
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52143: LD_ADDR_VAR 0 52
52147: PUSH
52148: LD_INT 3
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52176: LD_ADDR_VAR 0 53
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 3
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52220: LD_ADDR_VAR 0 54
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52261: LD_ADDR_VAR 0 55
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52301: LD_ADDR_VAR 0 56
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 3
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: LIST
52341: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52342: LD_ADDR_VAR 0 57
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52386: LD_ADDR_VAR 0 58
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: NEG
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: LIST
52431: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52432: LD_ADDR_VAR 0 59
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52476: LD_ADDR_VAR 0 60
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: LIST
52516: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52517: LD_ADDR_VAR 0 61
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52557: LD_ADDR_VAR 0 62
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52598: LD_ADDR_VAR 0 63
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52642: LD_ADDR_VAR 0 64
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: ST_TO_ADDR
// end ; 2 :
52688: GO 55954
52690: LD_INT 2
52692: DOUBLE
52693: EQUAL
52694: IFTRUE 52698
52696: GO 55953
52698: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52699: LD_ADDR_VAR 0 29
52703: PUSH
52704: LD_INT 4
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 4
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 5
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 5
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 4
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 5
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 3
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 4
52829: PUSH
52830: LD_INT 4
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: PUSH
52840: LD_INT 4
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 4
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 4
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 4
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 4
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 5
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 5
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 4
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 5
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 4
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 4
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 4
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 4
53084: NEG
53085: PUSH
53086: LD_INT 4
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 4
53096: NEG
53097: PUSH
53098: LD_INT 5
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: LD_INT 4
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: LD_INT 3
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 4
53132: NEG
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 5
53144: NEG
53145: PUSH
53146: LD_INT 4
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 5
53156: NEG
53157: PUSH
53158: LD_INT 5
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: LD_INT 5
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 5
53180: NEG
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53237: LD_ADDR_VAR 0 30
53241: PUSH
53242: LD_INT 4
53244: PUSH
53245: LD_INT 4
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 4
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 5
53264: PUSH
53265: LD_INT 4
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 5
53274: PUSH
53275: LD_INT 5
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 4
53284: PUSH
53285: LD_INT 5
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: LD_INT 4
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 3
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 5
53314: PUSH
53315: LD_INT 3
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: LD_INT 5
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 3
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 4
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 4
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: LD_INT 4
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 4
53427: NEG
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 4
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 3
53450: NEG
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 4
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 5
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 5
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 5
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 3
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 3
53529: NEG
53530: PUSH
53531: LD_INT 3
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 3
53541: NEG
53542: PUSH
53543: LD_INT 4
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 3
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 4
53589: NEG
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 4
53601: NEG
53602: PUSH
53603: LD_INT 4
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 4
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 4
53625: NEG
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 4
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 5
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 4
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 4
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 5
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 5
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53784: LD_ADDR_VAR 0 31
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 4
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 4
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 5
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 5
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 4
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 5
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 3
53895: NEG
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 4
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 4
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 4
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 4
53986: NEG
53987: PUSH
53988: LD_INT 4
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 4
53998: NEG
53999: PUSH
54000: LD_INT 5
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: LD_INT 4
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 4
54034: NEG
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 5
54046: NEG
54047: PUSH
54048: LD_INT 4
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 5
54058: NEG
54059: PUSH
54060: LD_INT 5
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: LD_INT 5
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 5
54082: NEG
54083: PUSH
54084: LD_INT 3
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 4
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 4
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 4
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 4
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 4
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 5
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 5
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 4
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 3
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 5
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54334: LD_ADDR_VAR 0 32
54338: PUSH
54339: LD_INT 4
54341: NEG
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 4
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 4
54386: NEG
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 5
54397: NEG
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 5
54408: NEG
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 5
54420: NEG
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 3
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 4
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 4
54503: NEG
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 4
54515: NEG
54516: PUSH
54517: LD_INT 4
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 4
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 4
54539: NEG
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 4
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 5
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 4
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 3
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 4
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 5
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: LD_INT 5
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 4
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 4
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 3
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 4
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 4
54746: PUSH
54747: LD_INT 4
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 4
54756: PUSH
54757: LD_INT 3
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 5
54766: PUSH
54767: LD_INT 4
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 5
54776: PUSH
54777: LD_INT 5
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 4
54786: PUSH
54787: LD_INT 5
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 4
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 3
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 5
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 5
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54881: LD_ADDR_VAR 0 33
54885: PUSH
54886: LD_INT 4
54888: NEG
54889: PUSH
54890: LD_INT 4
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 4
54900: NEG
54901: PUSH
54902: LD_INT 5
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 3
54912: NEG
54913: PUSH
54914: LD_INT 4
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 4
54936: NEG
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 5
54948: NEG
54949: PUSH
54950: LD_INT 4
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 5
54960: NEG
54961: PUSH
54962: LD_INT 5
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 3
54972: NEG
54973: PUSH
54974: LD_INT 5
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 5
54984: NEG
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 4
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 4
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: LD_INT 4
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 5
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 5
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 5
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: LD_INT 3
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 4
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 4
55221: PUSH
55222: LD_INT 4
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 4
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 4
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 4
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 4
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 4
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 5
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 5
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: LD_INT 4
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 3
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: LD_INT 5
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55419: LD_ADDR_VAR 0 34
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 4
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 5
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 4
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 3
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 4
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 5
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 3
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 5
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 3
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 4
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 4
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 4
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 4
55621: PUSH
55622: LD_INT 4
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 4
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 5
55641: PUSH
55642: LD_INT 4
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 5
55651: PUSH
55652: LD_INT 5
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: LD_INT 5
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: LD_INT 4
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 3
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 4
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 4
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 4
55804: NEG
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 4
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 4
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 5
55860: NEG
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 5
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 5
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 3
55895: NEG
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: ST_TO_ADDR
// end ; end ;
55951: GO 55954
55953: POP
// case btype of b_depot , b_warehouse :
55954: LD_VAR 0 1
55958: PUSH
55959: LD_INT 0
55961: DOUBLE
55962: EQUAL
55963: IFTRUE 55973
55965: LD_INT 1
55967: DOUBLE
55968: EQUAL
55969: IFTRUE 55973
55971: GO 56174
55973: POP
// case nation of nation_american :
55974: LD_VAR 0 5
55978: PUSH
55979: LD_INT 1
55981: DOUBLE
55982: EQUAL
55983: IFTRUE 55987
55985: GO 56043
55987: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55988: LD_ADDR_VAR 0 9
55992: PUSH
55993: LD_VAR 0 11
55997: PUSH
55998: LD_VAR 0 12
56002: PUSH
56003: LD_VAR 0 13
56007: PUSH
56008: LD_VAR 0 14
56012: PUSH
56013: LD_VAR 0 15
56017: PUSH
56018: LD_VAR 0 16
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: PUSH
56031: LD_VAR 0 4
56035: PUSH
56036: LD_INT 1
56038: PLUS
56039: ARRAY
56040: ST_TO_ADDR
56041: GO 56172
56043: LD_INT 2
56045: DOUBLE
56046: EQUAL
56047: IFTRUE 56051
56049: GO 56107
56051: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56052: LD_ADDR_VAR 0 9
56056: PUSH
56057: LD_VAR 0 17
56061: PUSH
56062: LD_VAR 0 18
56066: PUSH
56067: LD_VAR 0 19
56071: PUSH
56072: LD_VAR 0 20
56076: PUSH
56077: LD_VAR 0 21
56081: PUSH
56082: LD_VAR 0 22
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: PUSH
56095: LD_VAR 0 4
56099: PUSH
56100: LD_INT 1
56102: PLUS
56103: ARRAY
56104: ST_TO_ADDR
56105: GO 56172
56107: LD_INT 3
56109: DOUBLE
56110: EQUAL
56111: IFTRUE 56115
56113: GO 56171
56115: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56116: LD_ADDR_VAR 0 9
56120: PUSH
56121: LD_VAR 0 23
56125: PUSH
56126: LD_VAR 0 24
56130: PUSH
56131: LD_VAR 0 25
56135: PUSH
56136: LD_VAR 0 26
56140: PUSH
56141: LD_VAR 0 27
56145: PUSH
56146: LD_VAR 0 28
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: PUSH
56159: LD_VAR 0 4
56163: PUSH
56164: LD_INT 1
56166: PLUS
56167: ARRAY
56168: ST_TO_ADDR
56169: GO 56172
56171: POP
56172: GO 56727
56174: LD_INT 2
56176: DOUBLE
56177: EQUAL
56178: IFTRUE 56188
56180: LD_INT 3
56182: DOUBLE
56183: EQUAL
56184: IFTRUE 56188
56186: GO 56244
56188: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56189: LD_ADDR_VAR 0 9
56193: PUSH
56194: LD_VAR 0 29
56198: PUSH
56199: LD_VAR 0 30
56203: PUSH
56204: LD_VAR 0 31
56208: PUSH
56209: LD_VAR 0 32
56213: PUSH
56214: LD_VAR 0 33
56218: PUSH
56219: LD_VAR 0 34
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: PUSH
56232: LD_VAR 0 4
56236: PUSH
56237: LD_INT 1
56239: PLUS
56240: ARRAY
56241: ST_TO_ADDR
56242: GO 56727
56244: LD_INT 16
56246: DOUBLE
56247: EQUAL
56248: IFTRUE 56306
56250: LD_INT 17
56252: DOUBLE
56253: EQUAL
56254: IFTRUE 56306
56256: LD_INT 18
56258: DOUBLE
56259: EQUAL
56260: IFTRUE 56306
56262: LD_INT 19
56264: DOUBLE
56265: EQUAL
56266: IFTRUE 56306
56268: LD_INT 22
56270: DOUBLE
56271: EQUAL
56272: IFTRUE 56306
56274: LD_INT 20
56276: DOUBLE
56277: EQUAL
56278: IFTRUE 56306
56280: LD_INT 21
56282: DOUBLE
56283: EQUAL
56284: IFTRUE 56306
56286: LD_INT 23
56288: DOUBLE
56289: EQUAL
56290: IFTRUE 56306
56292: LD_INT 24
56294: DOUBLE
56295: EQUAL
56296: IFTRUE 56306
56298: LD_INT 25
56300: DOUBLE
56301: EQUAL
56302: IFTRUE 56306
56304: GO 56362
56306: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56307: LD_ADDR_VAR 0 9
56311: PUSH
56312: LD_VAR 0 35
56316: PUSH
56317: LD_VAR 0 36
56321: PUSH
56322: LD_VAR 0 37
56326: PUSH
56327: LD_VAR 0 38
56331: PUSH
56332: LD_VAR 0 39
56336: PUSH
56337: LD_VAR 0 40
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: PUSH
56350: LD_VAR 0 4
56354: PUSH
56355: LD_INT 1
56357: PLUS
56358: ARRAY
56359: ST_TO_ADDR
56360: GO 56727
56362: LD_INT 6
56364: DOUBLE
56365: EQUAL
56366: IFTRUE 56418
56368: LD_INT 7
56370: DOUBLE
56371: EQUAL
56372: IFTRUE 56418
56374: LD_INT 8
56376: DOUBLE
56377: EQUAL
56378: IFTRUE 56418
56380: LD_INT 13
56382: DOUBLE
56383: EQUAL
56384: IFTRUE 56418
56386: LD_INT 12
56388: DOUBLE
56389: EQUAL
56390: IFTRUE 56418
56392: LD_INT 15
56394: DOUBLE
56395: EQUAL
56396: IFTRUE 56418
56398: LD_INT 11
56400: DOUBLE
56401: EQUAL
56402: IFTRUE 56418
56404: LD_INT 14
56406: DOUBLE
56407: EQUAL
56408: IFTRUE 56418
56410: LD_INT 10
56412: DOUBLE
56413: EQUAL
56414: IFTRUE 56418
56416: GO 56474
56418: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56419: LD_ADDR_VAR 0 9
56423: PUSH
56424: LD_VAR 0 41
56428: PUSH
56429: LD_VAR 0 42
56433: PUSH
56434: LD_VAR 0 43
56438: PUSH
56439: LD_VAR 0 44
56443: PUSH
56444: LD_VAR 0 45
56448: PUSH
56449: LD_VAR 0 46
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: PUSH
56462: LD_VAR 0 4
56466: PUSH
56467: LD_INT 1
56469: PLUS
56470: ARRAY
56471: ST_TO_ADDR
56472: GO 56727
56474: LD_INT 36
56476: DOUBLE
56477: EQUAL
56478: IFTRUE 56482
56480: GO 56538
56482: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56483: LD_ADDR_VAR 0 9
56487: PUSH
56488: LD_VAR 0 47
56492: PUSH
56493: LD_VAR 0 48
56497: PUSH
56498: LD_VAR 0 49
56502: PUSH
56503: LD_VAR 0 50
56507: PUSH
56508: LD_VAR 0 51
56512: PUSH
56513: LD_VAR 0 52
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: PUSH
56526: LD_VAR 0 4
56530: PUSH
56531: LD_INT 1
56533: PLUS
56534: ARRAY
56535: ST_TO_ADDR
56536: GO 56727
56538: LD_INT 4
56540: DOUBLE
56541: EQUAL
56542: IFTRUE 56564
56544: LD_INT 5
56546: DOUBLE
56547: EQUAL
56548: IFTRUE 56564
56550: LD_INT 34
56552: DOUBLE
56553: EQUAL
56554: IFTRUE 56564
56556: LD_INT 37
56558: DOUBLE
56559: EQUAL
56560: IFTRUE 56564
56562: GO 56620
56564: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56565: LD_ADDR_VAR 0 9
56569: PUSH
56570: LD_VAR 0 53
56574: PUSH
56575: LD_VAR 0 54
56579: PUSH
56580: LD_VAR 0 55
56584: PUSH
56585: LD_VAR 0 56
56589: PUSH
56590: LD_VAR 0 57
56594: PUSH
56595: LD_VAR 0 58
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: PUSH
56608: LD_VAR 0 4
56612: PUSH
56613: LD_INT 1
56615: PLUS
56616: ARRAY
56617: ST_TO_ADDR
56618: GO 56727
56620: LD_INT 31
56622: DOUBLE
56623: EQUAL
56624: IFTRUE 56670
56626: LD_INT 32
56628: DOUBLE
56629: EQUAL
56630: IFTRUE 56670
56632: LD_INT 33
56634: DOUBLE
56635: EQUAL
56636: IFTRUE 56670
56638: LD_INT 27
56640: DOUBLE
56641: EQUAL
56642: IFTRUE 56670
56644: LD_INT 26
56646: DOUBLE
56647: EQUAL
56648: IFTRUE 56670
56650: LD_INT 28
56652: DOUBLE
56653: EQUAL
56654: IFTRUE 56670
56656: LD_INT 29
56658: DOUBLE
56659: EQUAL
56660: IFTRUE 56670
56662: LD_INT 30
56664: DOUBLE
56665: EQUAL
56666: IFTRUE 56670
56668: GO 56726
56670: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56671: LD_ADDR_VAR 0 9
56675: PUSH
56676: LD_VAR 0 59
56680: PUSH
56681: LD_VAR 0 60
56685: PUSH
56686: LD_VAR 0 61
56690: PUSH
56691: LD_VAR 0 62
56695: PUSH
56696: LD_VAR 0 63
56700: PUSH
56701: LD_VAR 0 64
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: PUSH
56714: LD_VAR 0 4
56718: PUSH
56719: LD_INT 1
56721: PLUS
56722: ARRAY
56723: ST_TO_ADDR
56724: GO 56727
56726: POP
// temp_list2 = [ ] ;
56727: LD_ADDR_VAR 0 10
56731: PUSH
56732: EMPTY
56733: ST_TO_ADDR
// for i in temp_list do
56734: LD_ADDR_VAR 0 8
56738: PUSH
56739: LD_VAR 0 9
56743: PUSH
56744: FOR_IN
56745: IFFALSE 56797
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56747: LD_ADDR_VAR 0 10
56751: PUSH
56752: LD_VAR 0 10
56756: PUSH
56757: LD_VAR 0 8
56761: PUSH
56762: LD_INT 1
56764: ARRAY
56765: PUSH
56766: LD_VAR 0 2
56770: PLUS
56771: PUSH
56772: LD_VAR 0 8
56776: PUSH
56777: LD_INT 2
56779: ARRAY
56780: PUSH
56781: LD_VAR 0 3
56785: PLUS
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: EMPTY
56792: LIST
56793: ADD
56794: ST_TO_ADDR
56795: GO 56744
56797: POP
56798: POP
// result = temp_list2 ;
56799: LD_ADDR_VAR 0 7
56803: PUSH
56804: LD_VAR 0 10
56808: ST_TO_ADDR
// end ;
56809: LD_VAR 0 7
56813: RET
// export function EnemyInRange ( unit , dist ) ; begin
56814: LD_INT 0
56816: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56817: LD_ADDR_VAR 0 3
56821: PUSH
56822: LD_VAR 0 1
56826: PPUSH
56827: CALL_OW 255
56831: PPUSH
56832: LD_VAR 0 1
56836: PPUSH
56837: CALL_OW 250
56841: PPUSH
56842: LD_VAR 0 1
56846: PPUSH
56847: CALL_OW 251
56851: PPUSH
56852: LD_VAR 0 2
56856: PPUSH
56857: CALL 30210 0 4
56861: PUSH
56862: LD_INT 4
56864: ARRAY
56865: ST_TO_ADDR
// end ;
56866: LD_VAR 0 3
56870: RET
// export function PlayerSeeMe ( unit ) ; begin
56871: LD_INT 0
56873: PPUSH
// result := See ( your_side , unit ) ;
56874: LD_ADDR_VAR 0 2
56878: PUSH
56879: LD_OWVAR 2
56883: PPUSH
56884: LD_VAR 0 1
56888: PPUSH
56889: CALL_OW 292
56893: ST_TO_ADDR
// end ;
56894: LD_VAR 0 2
56898: RET
// export function ReverseDir ( unit ) ; begin
56899: LD_INT 0
56901: PPUSH
// if not unit then
56902: LD_VAR 0 1
56906: NOT
56907: IFFALSE 56911
// exit ;
56909: GO 56934
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56911: LD_ADDR_VAR 0 2
56915: PUSH
56916: LD_VAR 0 1
56920: PPUSH
56921: CALL_OW 254
56925: PUSH
56926: LD_INT 3
56928: PLUS
56929: PUSH
56930: LD_INT 6
56932: MOD
56933: ST_TO_ADDR
// end ;
56934: LD_VAR 0 2
56938: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56939: LD_INT 0
56941: PPUSH
56942: PPUSH
56943: PPUSH
56944: PPUSH
56945: PPUSH
// if not hexes then
56946: LD_VAR 0 2
56950: NOT
56951: IFFALSE 56955
// exit ;
56953: GO 57103
// dist := 9999 ;
56955: LD_ADDR_VAR 0 5
56959: PUSH
56960: LD_INT 9999
56962: ST_TO_ADDR
// for i = 1 to hexes do
56963: LD_ADDR_VAR 0 4
56967: PUSH
56968: DOUBLE
56969: LD_INT 1
56971: DEC
56972: ST_TO_ADDR
56973: LD_VAR 0 2
56977: PUSH
56978: FOR_TO
56979: IFFALSE 57091
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56981: LD_VAR 0 1
56985: PPUSH
56986: LD_VAR 0 2
56990: PUSH
56991: LD_VAR 0 4
56995: ARRAY
56996: PUSH
56997: LD_INT 1
56999: ARRAY
57000: PPUSH
57001: LD_VAR 0 2
57005: PUSH
57006: LD_VAR 0 4
57010: ARRAY
57011: PUSH
57012: LD_INT 2
57014: ARRAY
57015: PPUSH
57016: CALL_OW 297
57020: PUSH
57021: LD_VAR 0 5
57025: LESS
57026: IFFALSE 57089
// begin hex := hexes [ i ] ;
57028: LD_ADDR_VAR 0 7
57032: PUSH
57033: LD_VAR 0 2
57037: PUSH
57038: LD_VAR 0 4
57042: ARRAY
57043: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57044: LD_ADDR_VAR 0 5
57048: PUSH
57049: LD_VAR 0 1
57053: PPUSH
57054: LD_VAR 0 2
57058: PUSH
57059: LD_VAR 0 4
57063: ARRAY
57064: PUSH
57065: LD_INT 1
57067: ARRAY
57068: PPUSH
57069: LD_VAR 0 2
57073: PUSH
57074: LD_VAR 0 4
57078: ARRAY
57079: PUSH
57080: LD_INT 2
57082: ARRAY
57083: PPUSH
57084: CALL_OW 297
57088: ST_TO_ADDR
// end ; end ;
57089: GO 56978
57091: POP
57092: POP
// result := hex ;
57093: LD_ADDR_VAR 0 3
57097: PUSH
57098: LD_VAR 0 7
57102: ST_TO_ADDR
// end ;
57103: LD_VAR 0 3
57107: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57108: LD_INT 0
57110: PPUSH
57111: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57112: LD_VAR 0 1
57116: NOT
57117: PUSH
57118: LD_VAR 0 1
57122: PUSH
57123: LD_INT 21
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 23
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PPUSH
57147: CALL_OW 69
57151: IN
57152: NOT
57153: OR
57154: IFFALSE 57158
// exit ;
57156: GO 57205
// for i = 1 to 3 do
57158: LD_ADDR_VAR 0 3
57162: PUSH
57163: DOUBLE
57164: LD_INT 1
57166: DEC
57167: ST_TO_ADDR
57168: LD_INT 3
57170: PUSH
57171: FOR_TO
57172: IFFALSE 57203
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57174: LD_VAR 0 1
57178: PPUSH
57179: CALL_OW 250
57183: PPUSH
57184: LD_VAR 0 1
57188: PPUSH
57189: CALL_OW 251
57193: PPUSH
57194: LD_INT 1
57196: PPUSH
57197: CALL_OW 453
57201: GO 57171
57203: POP
57204: POP
// end ;
57205: LD_VAR 0 2
57209: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57210: LD_INT 0
57212: PPUSH
57213: PPUSH
57214: PPUSH
57215: PPUSH
57216: PPUSH
57217: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57218: LD_VAR 0 1
57222: NOT
57223: PUSH
57224: LD_VAR 0 2
57228: NOT
57229: OR
57230: PUSH
57231: LD_VAR 0 1
57235: PPUSH
57236: CALL_OW 314
57240: OR
57241: IFFALSE 57245
// exit ;
57243: GO 57686
// x := GetX ( enemy_unit ) ;
57245: LD_ADDR_VAR 0 7
57249: PUSH
57250: LD_VAR 0 2
57254: PPUSH
57255: CALL_OW 250
57259: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57260: LD_ADDR_VAR 0 8
57264: PUSH
57265: LD_VAR 0 2
57269: PPUSH
57270: CALL_OW 251
57274: ST_TO_ADDR
// if not x or not y then
57275: LD_VAR 0 7
57279: NOT
57280: PUSH
57281: LD_VAR 0 8
57285: NOT
57286: OR
57287: IFFALSE 57291
// exit ;
57289: GO 57686
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57291: LD_ADDR_VAR 0 6
57295: PUSH
57296: LD_VAR 0 7
57300: PPUSH
57301: LD_INT 0
57303: PPUSH
57304: LD_INT 4
57306: PPUSH
57307: CALL_OW 272
57311: PUSH
57312: LD_VAR 0 8
57316: PPUSH
57317: LD_INT 0
57319: PPUSH
57320: LD_INT 4
57322: PPUSH
57323: CALL_OW 273
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_VAR 0 7
57336: PPUSH
57337: LD_INT 1
57339: PPUSH
57340: LD_INT 4
57342: PPUSH
57343: CALL_OW 272
57347: PUSH
57348: LD_VAR 0 8
57352: PPUSH
57353: LD_INT 1
57355: PPUSH
57356: LD_INT 4
57358: PPUSH
57359: CALL_OW 273
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_VAR 0 7
57372: PPUSH
57373: LD_INT 2
57375: PPUSH
57376: LD_INT 4
57378: PPUSH
57379: CALL_OW 272
57383: PUSH
57384: LD_VAR 0 8
57388: PPUSH
57389: LD_INT 2
57391: PPUSH
57392: LD_INT 4
57394: PPUSH
57395: CALL_OW 273
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_VAR 0 7
57408: PPUSH
57409: LD_INT 3
57411: PPUSH
57412: LD_INT 4
57414: PPUSH
57415: CALL_OW 272
57419: PUSH
57420: LD_VAR 0 8
57424: PPUSH
57425: LD_INT 3
57427: PPUSH
57428: LD_INT 4
57430: PPUSH
57431: CALL_OW 273
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_VAR 0 7
57444: PPUSH
57445: LD_INT 4
57447: PPUSH
57448: LD_INT 4
57450: PPUSH
57451: CALL_OW 272
57455: PUSH
57456: LD_VAR 0 8
57460: PPUSH
57461: LD_INT 4
57463: PPUSH
57464: LD_INT 4
57466: PPUSH
57467: CALL_OW 273
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_VAR 0 7
57480: PPUSH
57481: LD_INT 5
57483: PPUSH
57484: LD_INT 4
57486: PPUSH
57487: CALL_OW 272
57491: PUSH
57492: LD_VAR 0 8
57496: PPUSH
57497: LD_INT 5
57499: PPUSH
57500: LD_INT 4
57502: PPUSH
57503: CALL_OW 273
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: ST_TO_ADDR
// for i = tmp downto 1 do
57520: LD_ADDR_VAR 0 4
57524: PUSH
57525: DOUBLE
57526: LD_VAR 0 6
57530: INC
57531: ST_TO_ADDR
57532: LD_INT 1
57534: PUSH
57535: FOR_DOWNTO
57536: IFFALSE 57637
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57538: LD_VAR 0 6
57542: PUSH
57543: LD_VAR 0 4
57547: ARRAY
57548: PUSH
57549: LD_INT 1
57551: ARRAY
57552: PPUSH
57553: LD_VAR 0 6
57557: PUSH
57558: LD_VAR 0 4
57562: ARRAY
57563: PUSH
57564: LD_INT 2
57566: ARRAY
57567: PPUSH
57568: CALL_OW 488
57572: NOT
57573: PUSH
57574: LD_VAR 0 6
57578: PUSH
57579: LD_VAR 0 4
57583: ARRAY
57584: PUSH
57585: LD_INT 1
57587: ARRAY
57588: PPUSH
57589: LD_VAR 0 6
57593: PUSH
57594: LD_VAR 0 4
57598: ARRAY
57599: PUSH
57600: LD_INT 2
57602: ARRAY
57603: PPUSH
57604: CALL_OW 428
57608: PUSH
57609: LD_INT 0
57611: NONEQUAL
57612: OR
57613: IFFALSE 57635
// tmp := Delete ( tmp , i ) ;
57615: LD_ADDR_VAR 0 6
57619: PUSH
57620: LD_VAR 0 6
57624: PPUSH
57625: LD_VAR 0 4
57629: PPUSH
57630: CALL_OW 3
57634: ST_TO_ADDR
57635: GO 57535
57637: POP
57638: POP
// j := GetClosestHex ( unit , tmp ) ;
57639: LD_ADDR_VAR 0 5
57643: PUSH
57644: LD_VAR 0 1
57648: PPUSH
57649: LD_VAR 0 6
57653: PPUSH
57654: CALL 56939 0 2
57658: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57659: LD_VAR 0 1
57663: PPUSH
57664: LD_VAR 0 5
57668: PUSH
57669: LD_INT 1
57671: ARRAY
57672: PPUSH
57673: LD_VAR 0 5
57677: PUSH
57678: LD_INT 2
57680: ARRAY
57681: PPUSH
57682: CALL_OW 111
// end ;
57686: LD_VAR 0 3
57690: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57691: LD_INT 0
57693: PPUSH
57694: PPUSH
57695: PPUSH
// uc_side = 0 ;
57696: LD_ADDR_OWVAR 20
57700: PUSH
57701: LD_INT 0
57703: ST_TO_ADDR
// uc_nation = 0 ;
57704: LD_ADDR_OWVAR 21
57708: PUSH
57709: LD_INT 0
57711: ST_TO_ADDR
// InitHc_All ( ) ;
57712: CALL_OW 584
// InitVc ;
57716: CALL_OW 20
// if mastodonts then
57720: LD_VAR 0 6
57724: IFFALSE 57791
// for i = 1 to mastodonts do
57726: LD_ADDR_VAR 0 11
57730: PUSH
57731: DOUBLE
57732: LD_INT 1
57734: DEC
57735: ST_TO_ADDR
57736: LD_VAR 0 6
57740: PUSH
57741: FOR_TO
57742: IFFALSE 57789
// begin vc_chassis := 31 ;
57744: LD_ADDR_OWVAR 37
57748: PUSH
57749: LD_INT 31
57751: ST_TO_ADDR
// vc_control := control_rider ;
57752: LD_ADDR_OWVAR 38
57756: PUSH
57757: LD_INT 4
57759: ST_TO_ADDR
// animal := CreateVehicle ;
57760: LD_ADDR_VAR 0 12
57764: PUSH
57765: CALL_OW 45
57769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57770: LD_VAR 0 12
57774: PPUSH
57775: LD_VAR 0 8
57779: PPUSH
57780: LD_INT 0
57782: PPUSH
57783: CALL 59926 0 3
// end ;
57787: GO 57741
57789: POP
57790: POP
// if horses then
57791: LD_VAR 0 5
57795: IFFALSE 57862
// for i = 1 to horses do
57797: LD_ADDR_VAR 0 11
57801: PUSH
57802: DOUBLE
57803: LD_INT 1
57805: DEC
57806: ST_TO_ADDR
57807: LD_VAR 0 5
57811: PUSH
57812: FOR_TO
57813: IFFALSE 57860
// begin hc_class := 21 ;
57815: LD_ADDR_OWVAR 28
57819: PUSH
57820: LD_INT 21
57822: ST_TO_ADDR
// hc_gallery :=  ;
57823: LD_ADDR_OWVAR 33
57827: PUSH
57828: LD_STRING 
57830: ST_TO_ADDR
// animal := CreateHuman ;
57831: LD_ADDR_VAR 0 12
57835: PUSH
57836: CALL_OW 44
57840: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57841: LD_VAR 0 12
57845: PPUSH
57846: LD_VAR 0 8
57850: PPUSH
57851: LD_INT 0
57853: PPUSH
57854: CALL 59926 0 3
// end ;
57858: GO 57812
57860: POP
57861: POP
// if birds then
57862: LD_VAR 0 1
57866: IFFALSE 57933
// for i = 1 to birds do
57868: LD_ADDR_VAR 0 11
57872: PUSH
57873: DOUBLE
57874: LD_INT 1
57876: DEC
57877: ST_TO_ADDR
57878: LD_VAR 0 1
57882: PUSH
57883: FOR_TO
57884: IFFALSE 57931
// begin hc_class = 18 ;
57886: LD_ADDR_OWVAR 28
57890: PUSH
57891: LD_INT 18
57893: ST_TO_ADDR
// hc_gallery =  ;
57894: LD_ADDR_OWVAR 33
57898: PUSH
57899: LD_STRING 
57901: ST_TO_ADDR
// animal := CreateHuman ;
57902: LD_ADDR_VAR 0 12
57906: PUSH
57907: CALL_OW 44
57911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57912: LD_VAR 0 12
57916: PPUSH
57917: LD_VAR 0 8
57921: PPUSH
57922: LD_INT 0
57924: PPUSH
57925: CALL 59926 0 3
// end ;
57929: GO 57883
57931: POP
57932: POP
// if tigers then
57933: LD_VAR 0 2
57937: IFFALSE 58021
// for i = 1 to tigers do
57939: LD_ADDR_VAR 0 11
57943: PUSH
57944: DOUBLE
57945: LD_INT 1
57947: DEC
57948: ST_TO_ADDR
57949: LD_VAR 0 2
57953: PUSH
57954: FOR_TO
57955: IFFALSE 58019
// begin hc_class = class_tiger ;
57957: LD_ADDR_OWVAR 28
57961: PUSH
57962: LD_INT 14
57964: ST_TO_ADDR
// hc_gallery =  ;
57965: LD_ADDR_OWVAR 33
57969: PUSH
57970: LD_STRING 
57972: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57973: LD_ADDR_OWVAR 35
57977: PUSH
57978: LD_INT 7
57980: NEG
57981: PPUSH
57982: LD_INT 7
57984: PPUSH
57985: CALL_OW 12
57989: ST_TO_ADDR
// animal := CreateHuman ;
57990: LD_ADDR_VAR 0 12
57994: PUSH
57995: CALL_OW 44
57999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58000: LD_VAR 0 12
58004: PPUSH
58005: LD_VAR 0 8
58009: PPUSH
58010: LD_INT 0
58012: PPUSH
58013: CALL 59926 0 3
// end ;
58017: GO 57954
58019: POP
58020: POP
// if apemans then
58021: LD_VAR 0 3
58025: IFFALSE 58148
// for i = 1 to apemans do
58027: LD_ADDR_VAR 0 11
58031: PUSH
58032: DOUBLE
58033: LD_INT 1
58035: DEC
58036: ST_TO_ADDR
58037: LD_VAR 0 3
58041: PUSH
58042: FOR_TO
58043: IFFALSE 58146
// begin hc_class = class_apeman ;
58045: LD_ADDR_OWVAR 28
58049: PUSH
58050: LD_INT 12
58052: ST_TO_ADDR
// hc_gallery =  ;
58053: LD_ADDR_OWVAR 33
58057: PUSH
58058: LD_STRING 
58060: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58061: LD_ADDR_OWVAR 35
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PPUSH
58070: LD_INT 2
58072: PPUSH
58073: CALL_OW 12
58077: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58078: LD_ADDR_OWVAR 31
58082: PUSH
58083: LD_INT 1
58085: PPUSH
58086: LD_INT 3
58088: PPUSH
58089: CALL_OW 12
58093: PUSH
58094: LD_INT 1
58096: PPUSH
58097: LD_INT 3
58099: PPUSH
58100: CALL_OW 12
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// animal := CreateHuman ;
58117: LD_ADDR_VAR 0 12
58121: PUSH
58122: CALL_OW 44
58126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58127: LD_VAR 0 12
58131: PPUSH
58132: LD_VAR 0 8
58136: PPUSH
58137: LD_INT 0
58139: PPUSH
58140: CALL 59926 0 3
// end ;
58144: GO 58042
58146: POP
58147: POP
// if enchidnas then
58148: LD_VAR 0 4
58152: IFFALSE 58219
// for i = 1 to enchidnas do
58154: LD_ADDR_VAR 0 11
58158: PUSH
58159: DOUBLE
58160: LD_INT 1
58162: DEC
58163: ST_TO_ADDR
58164: LD_VAR 0 4
58168: PUSH
58169: FOR_TO
58170: IFFALSE 58217
// begin hc_class = 13 ;
58172: LD_ADDR_OWVAR 28
58176: PUSH
58177: LD_INT 13
58179: ST_TO_ADDR
// hc_gallery =  ;
58180: LD_ADDR_OWVAR 33
58184: PUSH
58185: LD_STRING 
58187: ST_TO_ADDR
// animal := CreateHuman ;
58188: LD_ADDR_VAR 0 12
58192: PUSH
58193: CALL_OW 44
58197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58198: LD_VAR 0 12
58202: PPUSH
58203: LD_VAR 0 8
58207: PPUSH
58208: LD_INT 0
58210: PPUSH
58211: CALL 59926 0 3
// end ;
58215: GO 58169
58217: POP
58218: POP
// if fishes then
58219: LD_VAR 0 7
58223: IFFALSE 58290
// for i = 1 to fishes do
58225: LD_ADDR_VAR 0 11
58229: PUSH
58230: DOUBLE
58231: LD_INT 1
58233: DEC
58234: ST_TO_ADDR
58235: LD_VAR 0 7
58239: PUSH
58240: FOR_TO
58241: IFFALSE 58288
// begin hc_class = 20 ;
58243: LD_ADDR_OWVAR 28
58247: PUSH
58248: LD_INT 20
58250: ST_TO_ADDR
// hc_gallery =  ;
58251: LD_ADDR_OWVAR 33
58255: PUSH
58256: LD_STRING 
58258: ST_TO_ADDR
// animal := CreateHuman ;
58259: LD_ADDR_VAR 0 12
58263: PUSH
58264: CALL_OW 44
58268: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58269: LD_VAR 0 12
58273: PPUSH
58274: LD_VAR 0 9
58278: PPUSH
58279: LD_INT 0
58281: PPUSH
58282: CALL 59926 0 3
// end ;
58286: GO 58240
58288: POP
58289: POP
// end ;
58290: LD_VAR 0 10
58294: RET
// export function WantHeal ( sci , unit ) ; begin
58295: LD_INT 0
58297: PPUSH
// if GetTaskList ( sci ) > 0 then
58298: LD_VAR 0 1
58302: PPUSH
58303: CALL_OW 437
58307: PUSH
58308: LD_INT 0
58310: GREATER
58311: IFFALSE 58381
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58313: LD_VAR 0 1
58317: PPUSH
58318: CALL_OW 437
58322: PUSH
58323: LD_INT 1
58325: ARRAY
58326: PUSH
58327: LD_INT 1
58329: ARRAY
58330: PUSH
58331: LD_STRING l
58333: EQUAL
58334: PUSH
58335: LD_VAR 0 1
58339: PPUSH
58340: CALL_OW 437
58344: PUSH
58345: LD_INT 1
58347: ARRAY
58348: PUSH
58349: LD_INT 4
58351: ARRAY
58352: PUSH
58353: LD_VAR 0 2
58357: EQUAL
58358: AND
58359: IFFALSE 58371
// result := true else
58361: LD_ADDR_VAR 0 3
58365: PUSH
58366: LD_INT 1
58368: ST_TO_ADDR
58369: GO 58379
// result := false ;
58371: LD_ADDR_VAR 0 3
58375: PUSH
58376: LD_INT 0
58378: ST_TO_ADDR
// end else
58379: GO 58389
// result := false ;
58381: LD_ADDR_VAR 0 3
58385: PUSH
58386: LD_INT 0
58388: ST_TO_ADDR
// end ;
58389: LD_VAR 0 3
58393: RET
// export function HealTarget ( sci ) ; begin
58394: LD_INT 0
58396: PPUSH
// if not sci then
58397: LD_VAR 0 1
58401: NOT
58402: IFFALSE 58406
// exit ;
58404: GO 58471
// result := 0 ;
58406: LD_ADDR_VAR 0 2
58410: PUSH
58411: LD_INT 0
58413: ST_TO_ADDR
// if GetTaskList ( sci ) then
58414: LD_VAR 0 1
58418: PPUSH
58419: CALL_OW 437
58423: IFFALSE 58471
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58425: LD_VAR 0 1
58429: PPUSH
58430: CALL_OW 437
58434: PUSH
58435: LD_INT 1
58437: ARRAY
58438: PUSH
58439: LD_INT 1
58441: ARRAY
58442: PUSH
58443: LD_STRING l
58445: EQUAL
58446: IFFALSE 58471
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58448: LD_ADDR_VAR 0 2
58452: PUSH
58453: LD_VAR 0 1
58457: PPUSH
58458: CALL_OW 437
58462: PUSH
58463: LD_INT 1
58465: ARRAY
58466: PUSH
58467: LD_INT 4
58469: ARRAY
58470: ST_TO_ADDR
// end ;
58471: LD_VAR 0 2
58475: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58476: LD_INT 0
58478: PPUSH
58479: PPUSH
58480: PPUSH
58481: PPUSH
// if not base_units then
58482: LD_VAR 0 1
58486: NOT
58487: IFFALSE 58491
// exit ;
58489: GO 58578
// result := false ;
58491: LD_ADDR_VAR 0 2
58495: PUSH
58496: LD_INT 0
58498: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58499: LD_ADDR_VAR 0 5
58503: PUSH
58504: LD_VAR 0 1
58508: PPUSH
58509: LD_INT 21
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PPUSH
58519: CALL_OW 72
58523: ST_TO_ADDR
// if not tmp then
58524: LD_VAR 0 5
58528: NOT
58529: IFFALSE 58533
// exit ;
58531: GO 58578
// for i in tmp do
58533: LD_ADDR_VAR 0 3
58537: PUSH
58538: LD_VAR 0 5
58542: PUSH
58543: FOR_IN
58544: IFFALSE 58576
// begin result := EnemyInRange ( i , 22 ) ;
58546: LD_ADDR_VAR 0 2
58550: PUSH
58551: LD_VAR 0 3
58555: PPUSH
58556: LD_INT 22
58558: PPUSH
58559: CALL 56814 0 2
58563: ST_TO_ADDR
// if result then
58564: LD_VAR 0 2
58568: IFFALSE 58574
// exit ;
58570: POP
58571: POP
58572: GO 58578
// end ;
58574: GO 58543
58576: POP
58577: POP
// end ;
58578: LD_VAR 0 2
58582: RET
// export function FilterByTag ( units , tag ) ; begin
58583: LD_INT 0
58585: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58586: LD_ADDR_VAR 0 3
58590: PUSH
58591: LD_VAR 0 1
58595: PPUSH
58596: LD_INT 120
58598: PUSH
58599: LD_VAR 0 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PPUSH
58608: CALL_OW 72
58612: ST_TO_ADDR
// end ;
58613: LD_VAR 0 3
58617: RET
// export function IsDriver ( un ) ; begin
58618: LD_INT 0
58620: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58621: LD_ADDR_VAR 0 2
58625: PUSH
58626: LD_VAR 0 1
58630: PUSH
58631: LD_INT 55
58633: PUSH
58634: EMPTY
58635: LIST
58636: PPUSH
58637: CALL_OW 69
58641: IN
58642: ST_TO_ADDR
// end ;
58643: LD_VAR 0 2
58647: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58648: LD_INT 0
58650: PPUSH
58651: PPUSH
// list := [ ] ;
58652: LD_ADDR_VAR 0 5
58656: PUSH
58657: EMPTY
58658: ST_TO_ADDR
// case d of 0 :
58659: LD_VAR 0 3
58663: PUSH
58664: LD_INT 0
58666: DOUBLE
58667: EQUAL
58668: IFTRUE 58672
58670: GO 58805
58672: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58673: LD_ADDR_VAR 0 5
58677: PUSH
58678: LD_VAR 0 1
58682: PUSH
58683: LD_INT 4
58685: MINUS
58686: PUSH
58687: LD_VAR 0 2
58691: PUSH
58692: LD_INT 4
58694: MINUS
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: PUSH
58704: LD_VAR 0 1
58708: PUSH
58709: LD_INT 3
58711: MINUS
58712: PUSH
58713: LD_VAR 0 2
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: PUSH
58726: LD_VAR 0 1
58730: PUSH
58731: LD_INT 4
58733: PLUS
58734: PUSH
58735: LD_VAR 0 2
58739: PUSH
58740: LD_INT 4
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: LIST
58747: PUSH
58748: LD_VAR 0 1
58752: PUSH
58753: LD_INT 3
58755: PLUS
58756: PUSH
58757: LD_VAR 0 2
58761: PUSH
58762: LD_INT 3
58764: PLUS
58765: PUSH
58766: LD_INT 5
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: PUSH
58774: LD_VAR 0 1
58778: PUSH
58779: LD_VAR 0 2
58783: PUSH
58784: LD_INT 4
58786: PLUS
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// end ; 1 :
58803: GO 59503
58805: LD_INT 1
58807: DOUBLE
58808: EQUAL
58809: IFTRUE 58813
58811: GO 58946
58813: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58814: LD_ADDR_VAR 0 5
58818: PUSH
58819: LD_VAR 0 1
58823: PUSH
58824: LD_VAR 0 2
58828: PUSH
58829: LD_INT 4
58831: MINUS
58832: PUSH
58833: LD_INT 3
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: LIST
58840: PUSH
58841: LD_VAR 0 1
58845: PUSH
58846: LD_INT 3
58848: MINUS
58849: PUSH
58850: LD_VAR 0 2
58854: PUSH
58855: LD_INT 3
58857: MINUS
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: PUSH
58867: LD_VAR 0 1
58871: PUSH
58872: LD_INT 4
58874: MINUS
58875: PUSH
58876: LD_VAR 0 2
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: PUSH
58889: LD_VAR 0 1
58893: PUSH
58894: LD_VAR 0 2
58898: PUSH
58899: LD_INT 3
58901: PLUS
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: LIST
58910: PUSH
58911: LD_VAR 0 1
58915: PUSH
58916: LD_INT 4
58918: PLUS
58919: PUSH
58920: LD_VAR 0 2
58924: PUSH
58925: LD_INT 4
58927: PLUS
58928: PUSH
58929: LD_INT 5
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: ST_TO_ADDR
// end ; 2 :
58944: GO 59503
58946: LD_INT 2
58948: DOUBLE
58949: EQUAL
58950: IFTRUE 58954
58952: GO 59083
58954: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58955: LD_ADDR_VAR 0 5
58959: PUSH
58960: LD_VAR 0 1
58964: PUSH
58965: LD_VAR 0 2
58969: PUSH
58970: LD_INT 3
58972: MINUS
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: LIST
58981: PUSH
58982: LD_VAR 0 1
58986: PUSH
58987: LD_INT 4
58989: PLUS
58990: PUSH
58991: LD_VAR 0 2
58995: PUSH
58996: LD_INT 4
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: LIST
59003: PUSH
59004: LD_VAR 0 1
59008: PUSH
59009: LD_VAR 0 2
59013: PUSH
59014: LD_INT 4
59016: PLUS
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: LIST
59025: PUSH
59026: LD_VAR 0 1
59030: PUSH
59031: LD_INT 3
59033: MINUS
59034: PUSH
59035: LD_VAR 0 2
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: PUSH
59048: LD_VAR 0 1
59052: PUSH
59053: LD_INT 4
59055: MINUS
59056: PUSH
59057: LD_VAR 0 2
59061: PUSH
59062: LD_INT 4
59064: MINUS
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: LIST
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: ST_TO_ADDR
// end ; 3 :
59081: GO 59503
59083: LD_INT 3
59085: DOUBLE
59086: EQUAL
59087: IFTRUE 59091
59089: GO 59224
59091: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59092: LD_ADDR_VAR 0 5
59096: PUSH
59097: LD_VAR 0 1
59101: PUSH
59102: LD_INT 3
59104: PLUS
59105: PUSH
59106: LD_VAR 0 2
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: PUSH
59119: LD_VAR 0 1
59123: PUSH
59124: LD_INT 4
59126: PLUS
59127: PUSH
59128: LD_VAR 0 2
59132: PUSH
59133: LD_INT 4
59135: PLUS
59136: PUSH
59137: LD_INT 5
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: LIST
59144: PUSH
59145: LD_VAR 0 1
59149: PUSH
59150: LD_INT 4
59152: MINUS
59153: PUSH
59154: LD_VAR 0 2
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: LIST
59166: PUSH
59167: LD_VAR 0 1
59171: PUSH
59172: LD_VAR 0 2
59176: PUSH
59177: LD_INT 4
59179: MINUS
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: LIST
59188: PUSH
59189: LD_VAR 0 1
59193: PUSH
59194: LD_INT 3
59196: MINUS
59197: PUSH
59198: LD_VAR 0 2
59202: PUSH
59203: LD_INT 3
59205: MINUS
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: ST_TO_ADDR
// end ; 4 :
59222: GO 59503
59224: LD_INT 4
59226: DOUBLE
59227: EQUAL
59228: IFTRUE 59232
59230: GO 59365
59232: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59233: LD_ADDR_VAR 0 5
59237: PUSH
59238: LD_VAR 0 1
59242: PUSH
59243: LD_VAR 0 2
59247: PUSH
59248: LD_INT 4
59250: PLUS
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: PUSH
59260: LD_VAR 0 1
59264: PUSH
59265: LD_INT 3
59267: PLUS
59268: PUSH
59269: LD_VAR 0 2
59273: PUSH
59274: LD_INT 3
59276: PLUS
59277: PUSH
59278: LD_INT 5
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: PUSH
59286: LD_VAR 0 1
59290: PUSH
59291: LD_INT 4
59293: PLUS
59294: PUSH
59295: LD_VAR 0 2
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: PUSH
59308: LD_VAR 0 1
59312: PUSH
59313: LD_VAR 0 2
59317: PUSH
59318: LD_INT 3
59320: MINUS
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: PUSH
59330: LD_VAR 0 1
59334: PUSH
59335: LD_INT 4
59337: MINUS
59338: PUSH
59339: LD_VAR 0 2
59343: PUSH
59344: LD_INT 4
59346: MINUS
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// end ; 5 :
59363: GO 59503
59365: LD_INT 5
59367: DOUBLE
59368: EQUAL
59369: IFTRUE 59373
59371: GO 59502
59373: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59374: LD_ADDR_VAR 0 5
59378: PUSH
59379: LD_VAR 0 1
59383: PUSH
59384: LD_INT 4
59386: MINUS
59387: PUSH
59388: LD_VAR 0 2
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: PUSH
59401: LD_VAR 0 1
59405: PUSH
59406: LD_VAR 0 2
59410: PUSH
59411: LD_INT 4
59413: MINUS
59414: PUSH
59415: LD_INT 3
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: PUSH
59423: LD_VAR 0 1
59427: PUSH
59428: LD_INT 4
59430: PLUS
59431: PUSH
59432: LD_VAR 0 2
59436: PUSH
59437: LD_INT 4
59439: PLUS
59440: PUSH
59441: LD_INT 5
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: PUSH
59449: LD_VAR 0 1
59453: PUSH
59454: LD_INT 3
59456: PLUS
59457: PUSH
59458: LD_VAR 0 2
59462: PUSH
59463: LD_INT 4
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: LIST
59470: PUSH
59471: LD_VAR 0 1
59475: PUSH
59476: LD_VAR 0 2
59480: PUSH
59481: LD_INT 3
59483: PLUS
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: LIST
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// end ; end ;
59500: GO 59503
59502: POP
// result := list ;
59503: LD_ADDR_VAR 0 4
59507: PUSH
59508: LD_VAR 0 5
59512: ST_TO_ADDR
// end ;
59513: LD_VAR 0 4
59517: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59518: LD_INT 0
59520: PPUSH
59521: PPUSH
59522: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59523: LD_VAR 0 1
59527: NOT
59528: PUSH
59529: LD_VAR 0 2
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: LD_INT 3
59542: PUSH
59543: LD_INT 4
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: IN
59552: NOT
59553: OR
59554: IFFALSE 59558
// exit ;
59556: GO 59650
// tmp := [ ] ;
59558: LD_ADDR_VAR 0 5
59562: PUSH
59563: EMPTY
59564: ST_TO_ADDR
// for i in units do
59565: LD_ADDR_VAR 0 4
59569: PUSH
59570: LD_VAR 0 1
59574: PUSH
59575: FOR_IN
59576: IFFALSE 59619
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59578: LD_ADDR_VAR 0 5
59582: PUSH
59583: LD_VAR 0 5
59587: PPUSH
59588: LD_VAR 0 5
59592: PUSH
59593: LD_INT 1
59595: PLUS
59596: PPUSH
59597: LD_VAR 0 4
59601: PPUSH
59602: LD_VAR 0 2
59606: PPUSH
59607: CALL_OW 259
59611: PPUSH
59612: CALL_OW 2
59616: ST_TO_ADDR
59617: GO 59575
59619: POP
59620: POP
// if not tmp then
59621: LD_VAR 0 5
59625: NOT
59626: IFFALSE 59630
// exit ;
59628: GO 59650
// result := SortListByListDesc ( units , tmp ) ;
59630: LD_ADDR_VAR 0 3
59634: PUSH
59635: LD_VAR 0 1
59639: PPUSH
59640: LD_VAR 0 5
59644: PPUSH
59645: CALL_OW 77
59649: ST_TO_ADDR
// end ;
59650: LD_VAR 0 3
59654: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59655: LD_INT 0
59657: PPUSH
59658: PPUSH
59659: PPUSH
// result := false ;
59660: LD_ADDR_VAR 0 3
59664: PUSH
59665: LD_INT 0
59667: ST_TO_ADDR
// x := GetX ( building ) ;
59668: LD_ADDR_VAR 0 4
59672: PUSH
59673: LD_VAR 0 2
59677: PPUSH
59678: CALL_OW 250
59682: ST_TO_ADDR
// y := GetY ( building ) ;
59683: LD_ADDR_VAR 0 5
59687: PUSH
59688: LD_VAR 0 2
59692: PPUSH
59693: CALL_OW 251
59697: ST_TO_ADDR
// if not building or not x or not y then
59698: LD_VAR 0 2
59702: NOT
59703: PUSH
59704: LD_VAR 0 4
59708: NOT
59709: OR
59710: PUSH
59711: LD_VAR 0 5
59715: NOT
59716: OR
59717: IFFALSE 59721
// exit ;
59719: GO 59813
// if GetTaskList ( unit ) then
59721: LD_VAR 0 1
59725: PPUSH
59726: CALL_OW 437
59730: IFFALSE 59813
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59732: LD_STRING e
59734: PUSH
59735: LD_VAR 0 1
59739: PPUSH
59740: CALL_OW 437
59744: PUSH
59745: LD_INT 1
59747: ARRAY
59748: PUSH
59749: LD_INT 1
59751: ARRAY
59752: EQUAL
59753: PUSH
59754: LD_VAR 0 4
59758: PUSH
59759: LD_VAR 0 1
59763: PPUSH
59764: CALL_OW 437
59768: PUSH
59769: LD_INT 1
59771: ARRAY
59772: PUSH
59773: LD_INT 2
59775: ARRAY
59776: EQUAL
59777: AND
59778: PUSH
59779: LD_VAR 0 5
59783: PUSH
59784: LD_VAR 0 1
59788: PPUSH
59789: CALL_OW 437
59793: PUSH
59794: LD_INT 1
59796: ARRAY
59797: PUSH
59798: LD_INT 3
59800: ARRAY
59801: EQUAL
59802: AND
59803: IFFALSE 59813
// result := true end ;
59805: LD_ADDR_VAR 0 3
59809: PUSH
59810: LD_INT 1
59812: ST_TO_ADDR
// end ;
59813: LD_VAR 0 3
59817: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59818: LD_INT 0
59820: PPUSH
// result := false ;
59821: LD_ADDR_VAR 0 4
59825: PUSH
59826: LD_INT 0
59828: ST_TO_ADDR
// if GetTaskList ( unit ) then
59829: LD_VAR 0 1
59833: PPUSH
59834: CALL_OW 437
59838: IFFALSE 59921
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59840: LD_STRING M
59842: PUSH
59843: LD_VAR 0 1
59847: PPUSH
59848: CALL_OW 437
59852: PUSH
59853: LD_INT 1
59855: ARRAY
59856: PUSH
59857: LD_INT 1
59859: ARRAY
59860: EQUAL
59861: PUSH
59862: LD_VAR 0 2
59866: PUSH
59867: LD_VAR 0 1
59871: PPUSH
59872: CALL_OW 437
59876: PUSH
59877: LD_INT 1
59879: ARRAY
59880: PUSH
59881: LD_INT 2
59883: ARRAY
59884: EQUAL
59885: AND
59886: PUSH
59887: LD_VAR 0 3
59891: PUSH
59892: LD_VAR 0 1
59896: PPUSH
59897: CALL_OW 437
59901: PUSH
59902: LD_INT 1
59904: ARRAY
59905: PUSH
59906: LD_INT 3
59908: ARRAY
59909: EQUAL
59910: AND
59911: IFFALSE 59921
// result := true ;
59913: LD_ADDR_VAR 0 4
59917: PUSH
59918: LD_INT 1
59920: ST_TO_ADDR
// end ; end ;
59921: LD_VAR 0 4
59925: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59926: LD_INT 0
59928: PPUSH
59929: PPUSH
59930: PPUSH
59931: PPUSH
// if not unit or not area then
59932: LD_VAR 0 1
59936: NOT
59937: PUSH
59938: LD_VAR 0 2
59942: NOT
59943: OR
59944: IFFALSE 59948
// exit ;
59946: GO 60112
// tmp := AreaToList ( area , i ) ;
59948: LD_ADDR_VAR 0 6
59952: PUSH
59953: LD_VAR 0 2
59957: PPUSH
59958: LD_VAR 0 5
59962: PPUSH
59963: CALL_OW 517
59967: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59968: LD_ADDR_VAR 0 5
59972: PUSH
59973: DOUBLE
59974: LD_INT 1
59976: DEC
59977: ST_TO_ADDR
59978: LD_VAR 0 6
59982: PUSH
59983: LD_INT 1
59985: ARRAY
59986: PUSH
59987: FOR_TO
59988: IFFALSE 60110
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59990: LD_ADDR_VAR 0 7
59994: PUSH
59995: LD_VAR 0 6
59999: PUSH
60000: LD_INT 1
60002: ARRAY
60003: PUSH
60004: LD_VAR 0 5
60008: ARRAY
60009: PUSH
60010: LD_VAR 0 6
60014: PUSH
60015: LD_INT 2
60017: ARRAY
60018: PUSH
60019: LD_VAR 0 5
60023: ARRAY
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60029: LD_VAR 0 7
60033: PUSH
60034: LD_INT 1
60036: ARRAY
60037: PPUSH
60038: LD_VAR 0 7
60042: PUSH
60043: LD_INT 2
60045: ARRAY
60046: PPUSH
60047: CALL_OW 428
60051: PUSH
60052: LD_INT 0
60054: EQUAL
60055: IFFALSE 60108
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60057: LD_VAR 0 1
60061: PPUSH
60062: LD_VAR 0 7
60066: PUSH
60067: LD_INT 1
60069: ARRAY
60070: PPUSH
60071: LD_VAR 0 7
60075: PUSH
60076: LD_INT 2
60078: ARRAY
60079: PPUSH
60080: LD_VAR 0 3
60084: PPUSH
60085: CALL_OW 48
// result := IsPlaced ( unit ) ;
60089: LD_ADDR_VAR 0 4
60093: PUSH
60094: LD_VAR 0 1
60098: PPUSH
60099: CALL_OW 305
60103: ST_TO_ADDR
// exit ;
60104: POP
60105: POP
60106: GO 60112
// end ; end ;
60108: GO 59987
60110: POP
60111: POP
// end ;
60112: LD_VAR 0 4
60116: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60117: LD_INT 0
60119: PPUSH
60120: PPUSH
60121: PPUSH
// if not side or side > 8 then
60122: LD_VAR 0 1
60126: NOT
60127: PUSH
60128: LD_VAR 0 1
60132: PUSH
60133: LD_INT 8
60135: GREATER
60136: OR
60137: IFFALSE 60141
// exit ;
60139: GO 60328
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60141: LD_ADDR_VAR 0 4
60145: PUSH
60146: LD_INT 22
60148: PUSH
60149: LD_VAR 0 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 21
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PPUSH
60172: CALL_OW 69
60176: ST_TO_ADDR
// if not tmp then
60177: LD_VAR 0 4
60181: NOT
60182: IFFALSE 60186
// exit ;
60184: GO 60328
// enable_addtolog := true ;
60186: LD_ADDR_OWVAR 81
60190: PUSH
60191: LD_INT 1
60193: ST_TO_ADDR
// AddToLog ( [ ) ;
60194: LD_STRING [
60196: PPUSH
60197: CALL_OW 561
// for i in tmp do
60201: LD_ADDR_VAR 0 3
60205: PUSH
60206: LD_VAR 0 4
60210: PUSH
60211: FOR_IN
60212: IFFALSE 60319
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60214: LD_STRING [
60216: PUSH
60217: LD_VAR 0 3
60221: PPUSH
60222: CALL_OW 266
60226: STR
60227: PUSH
60228: LD_STRING , 
60230: STR
60231: PUSH
60232: LD_VAR 0 3
60236: PPUSH
60237: CALL_OW 250
60241: STR
60242: PUSH
60243: LD_STRING , 
60245: STR
60246: PUSH
60247: LD_VAR 0 3
60251: PPUSH
60252: CALL_OW 251
60256: STR
60257: PUSH
60258: LD_STRING , 
60260: STR
60261: PUSH
60262: LD_VAR 0 3
60266: PPUSH
60267: CALL_OW 254
60271: STR
60272: PUSH
60273: LD_STRING , 
60275: STR
60276: PUSH
60277: LD_VAR 0 3
60281: PPUSH
60282: LD_INT 1
60284: PPUSH
60285: CALL_OW 268
60289: STR
60290: PUSH
60291: LD_STRING , 
60293: STR
60294: PUSH
60295: LD_VAR 0 3
60299: PPUSH
60300: LD_INT 2
60302: PPUSH
60303: CALL_OW 268
60307: STR
60308: PUSH
60309: LD_STRING ],
60311: STR
60312: PPUSH
60313: CALL_OW 561
// end ;
60317: GO 60211
60319: POP
60320: POP
// AddToLog ( ]; ) ;
60321: LD_STRING ];
60323: PPUSH
60324: CALL_OW 561
// end ;
60328: LD_VAR 0 2
60332: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60333: LD_INT 0
60335: PPUSH
60336: PPUSH
60337: PPUSH
60338: PPUSH
60339: PPUSH
// if not area or not rate or not max then
60340: LD_VAR 0 1
60344: NOT
60345: PUSH
60346: LD_VAR 0 2
60350: NOT
60351: OR
60352: PUSH
60353: LD_VAR 0 4
60357: NOT
60358: OR
60359: IFFALSE 60363
// exit ;
60361: GO 60552
// while 1 do
60363: LD_INT 1
60365: IFFALSE 60552
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60367: LD_ADDR_VAR 0 9
60371: PUSH
60372: LD_VAR 0 1
60376: PPUSH
60377: LD_INT 1
60379: PPUSH
60380: CALL_OW 287
60384: PUSH
60385: LD_INT 10
60387: MUL
60388: ST_TO_ADDR
// r := rate / 10 ;
60389: LD_ADDR_VAR 0 7
60393: PUSH
60394: LD_VAR 0 2
60398: PUSH
60399: LD_INT 10
60401: DIVREAL
60402: ST_TO_ADDR
// time := 1 1$00 ;
60403: LD_ADDR_VAR 0 8
60407: PUSH
60408: LD_INT 2100
60410: ST_TO_ADDR
// if amount < min then
60411: LD_VAR 0 9
60415: PUSH
60416: LD_VAR 0 3
60420: LESS
60421: IFFALSE 60439
// r := r * 2 else
60423: LD_ADDR_VAR 0 7
60427: PUSH
60428: LD_VAR 0 7
60432: PUSH
60433: LD_INT 2
60435: MUL
60436: ST_TO_ADDR
60437: GO 60465
// if amount > max then
60439: LD_VAR 0 9
60443: PUSH
60444: LD_VAR 0 4
60448: GREATER
60449: IFFALSE 60465
// r := r / 2 ;
60451: LD_ADDR_VAR 0 7
60455: PUSH
60456: LD_VAR 0 7
60460: PUSH
60461: LD_INT 2
60463: DIVREAL
60464: ST_TO_ADDR
// time := time / r ;
60465: LD_ADDR_VAR 0 8
60469: PUSH
60470: LD_VAR 0 8
60474: PUSH
60475: LD_VAR 0 7
60479: DIVREAL
60480: ST_TO_ADDR
// if time < 0 then
60481: LD_VAR 0 8
60485: PUSH
60486: LD_INT 0
60488: LESS
60489: IFFALSE 60506
// time := time * - 1 ;
60491: LD_ADDR_VAR 0 8
60495: PUSH
60496: LD_VAR 0 8
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: MUL
60505: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60506: LD_VAR 0 8
60510: PUSH
60511: LD_INT 35
60513: PPUSH
60514: LD_INT 875
60516: PPUSH
60517: CALL_OW 12
60521: PLUS
60522: PPUSH
60523: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60527: LD_INT 1
60529: PPUSH
60530: LD_INT 5
60532: PPUSH
60533: CALL_OW 12
60537: PPUSH
60538: LD_VAR 0 1
60542: PPUSH
60543: LD_INT 1
60545: PPUSH
60546: CALL_OW 55
// end ;
60550: GO 60363
// end ;
60552: LD_VAR 0 5
60556: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60557: LD_INT 0
60559: PPUSH
60560: PPUSH
60561: PPUSH
60562: PPUSH
60563: PPUSH
60564: PPUSH
60565: PPUSH
60566: PPUSH
// if not turrets or not factories then
60567: LD_VAR 0 1
60571: NOT
60572: PUSH
60573: LD_VAR 0 2
60577: NOT
60578: OR
60579: IFFALSE 60583
// exit ;
60581: GO 60890
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60583: LD_ADDR_VAR 0 10
60587: PUSH
60588: LD_INT 5
60590: PUSH
60591: LD_INT 6
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: LD_INT 4
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: LD_INT 5
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 24
60625: PUSH
60626: LD_INT 25
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 23
60635: PUSH
60636: LD_INT 27
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 42
60649: PUSH
60650: LD_INT 43
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 44
60659: PUSH
60660: LD_INT 46
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 45
60669: PUSH
60670: LD_INT 47
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: ST_TO_ADDR
// result := [ ] ;
60687: LD_ADDR_VAR 0 3
60691: PUSH
60692: EMPTY
60693: ST_TO_ADDR
// for i in turrets do
60694: LD_ADDR_VAR 0 4
60698: PUSH
60699: LD_VAR 0 1
60703: PUSH
60704: FOR_IN
60705: IFFALSE 60888
// begin nat := GetNation ( i ) ;
60707: LD_ADDR_VAR 0 7
60711: PUSH
60712: LD_VAR 0 4
60716: PPUSH
60717: CALL_OW 248
60721: ST_TO_ADDR
// weapon := 0 ;
60722: LD_ADDR_VAR 0 8
60726: PUSH
60727: LD_INT 0
60729: ST_TO_ADDR
// if not nat then
60730: LD_VAR 0 7
60734: NOT
60735: IFFALSE 60739
// continue ;
60737: GO 60704
// for j in list [ nat ] do
60739: LD_ADDR_VAR 0 5
60743: PUSH
60744: LD_VAR 0 10
60748: PUSH
60749: LD_VAR 0 7
60753: ARRAY
60754: PUSH
60755: FOR_IN
60756: IFFALSE 60797
// if GetBWeapon ( i ) = j [ 1 ] then
60758: LD_VAR 0 4
60762: PPUSH
60763: CALL_OW 269
60767: PUSH
60768: LD_VAR 0 5
60772: PUSH
60773: LD_INT 1
60775: ARRAY
60776: EQUAL
60777: IFFALSE 60795
// begin weapon := j [ 2 ] ;
60779: LD_ADDR_VAR 0 8
60783: PUSH
60784: LD_VAR 0 5
60788: PUSH
60789: LD_INT 2
60791: ARRAY
60792: ST_TO_ADDR
// break ;
60793: GO 60797
// end ;
60795: GO 60755
60797: POP
60798: POP
// if not weapon then
60799: LD_VAR 0 8
60803: NOT
60804: IFFALSE 60808
// continue ;
60806: GO 60704
// for k in factories do
60808: LD_ADDR_VAR 0 6
60812: PUSH
60813: LD_VAR 0 2
60817: PUSH
60818: FOR_IN
60819: IFFALSE 60884
// begin weapons := AvailableWeaponList ( k ) ;
60821: LD_ADDR_VAR 0 9
60825: PUSH
60826: LD_VAR 0 6
60830: PPUSH
60831: CALL_OW 478
60835: ST_TO_ADDR
// if not weapons then
60836: LD_VAR 0 9
60840: NOT
60841: IFFALSE 60845
// continue ;
60843: GO 60818
// if weapon in weapons then
60845: LD_VAR 0 8
60849: PUSH
60850: LD_VAR 0 9
60854: IN
60855: IFFALSE 60882
// begin result := [ i , weapon ] ;
60857: LD_ADDR_VAR 0 3
60861: PUSH
60862: LD_VAR 0 4
60866: PUSH
60867: LD_VAR 0 8
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: ST_TO_ADDR
// exit ;
60876: POP
60877: POP
60878: POP
60879: POP
60880: GO 60890
// end ; end ;
60882: GO 60818
60884: POP
60885: POP
// end ;
60886: GO 60704
60888: POP
60889: POP
// end ;
60890: LD_VAR 0 3
60894: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60895: LD_INT 0
60897: PPUSH
// if not side or side > 8 then
60898: LD_VAR 0 3
60902: NOT
60903: PUSH
60904: LD_VAR 0 3
60908: PUSH
60909: LD_INT 8
60911: GREATER
60912: OR
60913: IFFALSE 60917
// exit ;
60915: GO 60976
// if not range then
60917: LD_VAR 0 4
60921: NOT
60922: IFFALSE 60933
// range := - 12 ;
60924: LD_ADDR_VAR 0 4
60928: PUSH
60929: LD_INT 12
60931: NEG
60932: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60933: LD_VAR 0 1
60937: PPUSH
60938: LD_VAR 0 2
60942: PPUSH
60943: LD_VAR 0 3
60947: PPUSH
60948: LD_VAR 0 4
60952: PPUSH
60953: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60957: LD_VAR 0 1
60961: PPUSH
60962: LD_VAR 0 2
60966: PPUSH
60967: LD_VAR 0 3
60971: PPUSH
60972: CALL_OW 331
// end ;
60976: LD_VAR 0 5
60980: RET
// export function Video ( mode ) ; begin
60981: LD_INT 0
60983: PPUSH
// ingame_video = mode ;
60984: LD_ADDR_OWVAR 52
60988: PUSH
60989: LD_VAR 0 1
60993: ST_TO_ADDR
// interface_hidden = mode ;
60994: LD_ADDR_OWVAR 54
60998: PUSH
60999: LD_VAR 0 1
61003: ST_TO_ADDR
// end ;
61004: LD_VAR 0 2
61008: RET
// export function Join ( array , element ) ; begin
61009: LD_INT 0
61011: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61012: LD_ADDR_VAR 0 3
61016: PUSH
61017: LD_VAR 0 1
61021: PPUSH
61022: LD_VAR 0 1
61026: PUSH
61027: LD_INT 1
61029: PLUS
61030: PPUSH
61031: LD_VAR 0 2
61035: PPUSH
61036: CALL_OW 1
61040: ST_TO_ADDR
// end ;
61041: LD_VAR 0 3
61045: RET
// export function JoinUnion ( array , element ) ; begin
61046: LD_INT 0
61048: PPUSH
// result := array union element ;
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_VAR 0 1
61058: PUSH
61059: LD_VAR 0 2
61063: UNION
61064: ST_TO_ADDR
// end ;
61065: LD_VAR 0 3
61069: RET
// export function GetBehemoths ( side ) ; begin
61070: LD_INT 0
61072: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61073: LD_ADDR_VAR 0 2
61077: PUSH
61078: LD_INT 22
61080: PUSH
61081: LD_VAR 0 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 31
61092: PUSH
61093: LD_INT 25
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PPUSH
61104: CALL_OW 69
61108: ST_TO_ADDR
// end ;
61109: LD_VAR 0 2
61113: RET
// export function Shuffle ( array ) ; var i , index ; begin
61114: LD_INT 0
61116: PPUSH
61117: PPUSH
61118: PPUSH
// result := [ ] ;
61119: LD_ADDR_VAR 0 2
61123: PUSH
61124: EMPTY
61125: ST_TO_ADDR
// if not array then
61126: LD_VAR 0 1
61130: NOT
61131: IFFALSE 61135
// exit ;
61133: GO 61234
// Randomize ;
61135: CALL_OW 10
// for i = array downto 1 do
61139: LD_ADDR_VAR 0 3
61143: PUSH
61144: DOUBLE
61145: LD_VAR 0 1
61149: INC
61150: ST_TO_ADDR
61151: LD_INT 1
61153: PUSH
61154: FOR_DOWNTO
61155: IFFALSE 61232
// begin index := rand ( 1 , array ) ;
61157: LD_ADDR_VAR 0 4
61161: PUSH
61162: LD_INT 1
61164: PPUSH
61165: LD_VAR 0 1
61169: PPUSH
61170: CALL_OW 12
61174: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61175: LD_ADDR_VAR 0 2
61179: PUSH
61180: LD_VAR 0 2
61184: PPUSH
61185: LD_VAR 0 2
61189: PUSH
61190: LD_INT 1
61192: PLUS
61193: PPUSH
61194: LD_VAR 0 1
61198: PUSH
61199: LD_VAR 0 4
61203: ARRAY
61204: PPUSH
61205: CALL_OW 2
61209: ST_TO_ADDR
// array := Delete ( array , index ) ;
61210: LD_ADDR_VAR 0 1
61214: PUSH
61215: LD_VAR 0 1
61219: PPUSH
61220: LD_VAR 0 4
61224: PPUSH
61225: CALL_OW 3
61229: ST_TO_ADDR
// end ;
61230: GO 61154
61232: POP
61233: POP
// end ;
61234: LD_VAR 0 2
61238: RET
// export function GetBaseMaterials ( base ) ; begin
61239: LD_INT 0
61241: PPUSH
// result := [ 0 , 0 , 0 ] ;
61242: LD_ADDR_VAR 0 2
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: ST_TO_ADDR
// if not base then
61261: LD_VAR 0 1
61265: NOT
61266: IFFALSE 61270
// exit ;
61268: GO 61319
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61270: LD_ADDR_VAR 0 2
61274: PUSH
61275: LD_VAR 0 1
61279: PPUSH
61280: LD_INT 1
61282: PPUSH
61283: CALL_OW 275
61287: PUSH
61288: LD_VAR 0 1
61292: PPUSH
61293: LD_INT 2
61295: PPUSH
61296: CALL_OW 275
61300: PUSH
61301: LD_VAR 0 1
61305: PPUSH
61306: LD_INT 3
61308: PPUSH
61309: CALL_OW 275
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// end ;
61319: LD_VAR 0 2
61323: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61324: LD_INT 0
61326: PPUSH
61327: PPUSH
// result := array ;
61328: LD_ADDR_VAR 0 3
61332: PUSH
61333: LD_VAR 0 1
61337: ST_TO_ADDR
// if size > 0 then
61338: LD_VAR 0 2
61342: PUSH
61343: LD_INT 0
61345: GREATER
61346: IFFALSE 61392
// for i := array downto size do
61348: LD_ADDR_VAR 0 4
61352: PUSH
61353: DOUBLE
61354: LD_VAR 0 1
61358: INC
61359: ST_TO_ADDR
61360: LD_VAR 0 2
61364: PUSH
61365: FOR_DOWNTO
61366: IFFALSE 61390
// result := Delete ( result , result ) ;
61368: LD_ADDR_VAR 0 3
61372: PUSH
61373: LD_VAR 0 3
61377: PPUSH
61378: LD_VAR 0 3
61382: PPUSH
61383: CALL_OW 3
61387: ST_TO_ADDR
61388: GO 61365
61390: POP
61391: POP
// end ;
61392: LD_VAR 0 3
61396: RET
// export function ComExit ( unit ) ; var tmp ; begin
61397: LD_INT 0
61399: PPUSH
61400: PPUSH
// if not IsInUnit ( unit ) then
61401: LD_VAR 0 1
61405: PPUSH
61406: CALL_OW 310
61410: NOT
61411: IFFALSE 61415
// exit ;
61413: GO 61475
// tmp := IsInUnit ( unit ) ;
61415: LD_ADDR_VAR 0 3
61419: PUSH
61420: LD_VAR 0 1
61424: PPUSH
61425: CALL_OW 310
61429: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61430: LD_VAR 0 3
61434: PPUSH
61435: CALL_OW 247
61439: PUSH
61440: LD_INT 2
61442: EQUAL
61443: IFFALSE 61456
// ComExitVehicle ( unit ) else
61445: LD_VAR 0 1
61449: PPUSH
61450: CALL_OW 121
61454: GO 61465
// ComExitBuilding ( unit ) ;
61456: LD_VAR 0 1
61460: PPUSH
61461: CALL_OW 122
// result := tmp ;
61465: LD_ADDR_VAR 0 2
61469: PUSH
61470: LD_VAR 0 3
61474: ST_TO_ADDR
// end ;
61475: LD_VAR 0 2
61479: RET
// export function ComExitAll ( units ) ; var i ; begin
61480: LD_INT 0
61482: PPUSH
61483: PPUSH
// if not units then
61484: LD_VAR 0 1
61488: NOT
61489: IFFALSE 61493
// exit ;
61491: GO 61519
// for i in units do
61493: LD_ADDR_VAR 0 3
61497: PUSH
61498: LD_VAR 0 1
61502: PUSH
61503: FOR_IN
61504: IFFALSE 61517
// ComExit ( i ) ;
61506: LD_VAR 0 3
61510: PPUSH
61511: CALL 61397 0 1
61515: GO 61503
61517: POP
61518: POP
// end ;
61519: LD_VAR 0 2
61523: RET
// export function ResetHc ; begin
61524: LD_INT 0
61526: PPUSH
// InitHc ;
61527: CALL_OW 19
// hc_importance := 0 ;
61531: LD_ADDR_OWVAR 32
61535: PUSH
61536: LD_INT 0
61538: ST_TO_ADDR
// end ;
61539: LD_VAR 0 1
61543: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61544: LD_INT 0
61546: PPUSH
61547: PPUSH
61548: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61549: LD_ADDR_VAR 0 6
61553: PUSH
61554: LD_VAR 0 1
61558: PUSH
61559: LD_VAR 0 3
61563: PLUS
61564: PUSH
61565: LD_INT 2
61567: DIV
61568: ST_TO_ADDR
// if _x < 0 then
61569: LD_VAR 0 6
61573: PUSH
61574: LD_INT 0
61576: LESS
61577: IFFALSE 61594
// _x := _x * - 1 ;
61579: LD_ADDR_VAR 0 6
61583: PUSH
61584: LD_VAR 0 6
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: MUL
61593: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61594: LD_ADDR_VAR 0 7
61598: PUSH
61599: LD_VAR 0 2
61603: PUSH
61604: LD_VAR 0 4
61608: PLUS
61609: PUSH
61610: LD_INT 2
61612: DIV
61613: ST_TO_ADDR
// if _y < 0 then
61614: LD_VAR 0 7
61618: PUSH
61619: LD_INT 0
61621: LESS
61622: IFFALSE 61639
// _y := _y * - 1 ;
61624: LD_ADDR_VAR 0 7
61628: PUSH
61629: LD_VAR 0 7
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: MUL
61638: ST_TO_ADDR
// result := [ _x , _y ] ;
61639: LD_ADDR_VAR 0 5
61643: PUSH
61644: LD_VAR 0 6
61648: PUSH
61649: LD_VAR 0 7
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// end ;
61658: LD_VAR 0 5
61662: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61663: LD_INT 0
61665: PPUSH
61666: PPUSH
61667: PPUSH
61668: PPUSH
// task := GetTaskList ( unit ) ;
61669: LD_ADDR_VAR 0 7
61673: PUSH
61674: LD_VAR 0 1
61678: PPUSH
61679: CALL_OW 437
61683: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61684: LD_VAR 0 7
61688: NOT
61689: PUSH
61690: LD_VAR 0 1
61694: PPUSH
61695: LD_VAR 0 2
61699: PPUSH
61700: CALL_OW 308
61704: NOT
61705: AND
61706: IFFALSE 61710
// exit ;
61708: GO 61828
// if IsInArea ( unit , area ) then
61710: LD_VAR 0 1
61714: PPUSH
61715: LD_VAR 0 2
61719: PPUSH
61720: CALL_OW 308
61724: IFFALSE 61742
// begin ComMoveToArea ( unit , goAway ) ;
61726: LD_VAR 0 1
61730: PPUSH
61731: LD_VAR 0 3
61735: PPUSH
61736: CALL_OW 113
// exit ;
61740: GO 61828
// end ; if task [ 1 ] [ 1 ] <> M then
61742: LD_VAR 0 7
61746: PUSH
61747: LD_INT 1
61749: ARRAY
61750: PUSH
61751: LD_INT 1
61753: ARRAY
61754: PUSH
61755: LD_STRING M
61757: NONEQUAL
61758: IFFALSE 61762
// exit ;
61760: GO 61828
// x := task [ 1 ] [ 2 ] ;
61762: LD_ADDR_VAR 0 5
61766: PUSH
61767: LD_VAR 0 7
61771: PUSH
61772: LD_INT 1
61774: ARRAY
61775: PUSH
61776: LD_INT 2
61778: ARRAY
61779: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61780: LD_ADDR_VAR 0 6
61784: PUSH
61785: LD_VAR 0 7
61789: PUSH
61790: LD_INT 1
61792: ARRAY
61793: PUSH
61794: LD_INT 3
61796: ARRAY
61797: ST_TO_ADDR
// if InArea ( x , y , area ) then
61798: LD_VAR 0 5
61802: PPUSH
61803: LD_VAR 0 6
61807: PPUSH
61808: LD_VAR 0 2
61812: PPUSH
61813: CALL_OW 309
61817: IFFALSE 61828
// ComStop ( unit ) ;
61819: LD_VAR 0 1
61823: PPUSH
61824: CALL_OW 141
// end ;
61828: LD_VAR 0 4
61832: RET
// export function Abs ( value ) ; begin
61833: LD_INT 0
61835: PPUSH
// result := value ;
61836: LD_ADDR_VAR 0 2
61840: PUSH
61841: LD_VAR 0 1
61845: ST_TO_ADDR
// if value < 0 then
61846: LD_VAR 0 1
61850: PUSH
61851: LD_INT 0
61853: LESS
61854: IFFALSE 61871
// result := value * - 1 ;
61856: LD_ADDR_VAR 0 2
61860: PUSH
61861: LD_VAR 0 1
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: MUL
61870: ST_TO_ADDR
// end ;
61871: LD_VAR 0 2
61875: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61876: LD_INT 0
61878: PPUSH
61879: PPUSH
61880: PPUSH
61881: PPUSH
61882: PPUSH
61883: PPUSH
61884: PPUSH
61885: PPUSH
// if not unit or not building then
61886: LD_VAR 0 1
61890: NOT
61891: PUSH
61892: LD_VAR 0 2
61896: NOT
61897: OR
61898: IFFALSE 61902
// exit ;
61900: GO 62128
// x := GetX ( building ) ;
61902: LD_ADDR_VAR 0 4
61906: PUSH
61907: LD_VAR 0 2
61911: PPUSH
61912: CALL_OW 250
61916: ST_TO_ADDR
// y := GetY ( building ) ;
61917: LD_ADDR_VAR 0 6
61921: PUSH
61922: LD_VAR 0 2
61926: PPUSH
61927: CALL_OW 251
61931: ST_TO_ADDR
// d := GetDir ( building ) ;
61932: LD_ADDR_VAR 0 8
61936: PUSH
61937: LD_VAR 0 2
61941: PPUSH
61942: CALL_OW 254
61946: ST_TO_ADDR
// r := 4 ;
61947: LD_ADDR_VAR 0 9
61951: PUSH
61952: LD_INT 4
61954: ST_TO_ADDR
// for i := 1 to 5 do
61955: LD_ADDR_VAR 0 10
61959: PUSH
61960: DOUBLE
61961: LD_INT 1
61963: DEC
61964: ST_TO_ADDR
61965: LD_INT 5
61967: PUSH
61968: FOR_TO
61969: IFFALSE 62126
// begin _x := ShiftX ( x , d , r + i ) ;
61971: LD_ADDR_VAR 0 5
61975: PUSH
61976: LD_VAR 0 4
61980: PPUSH
61981: LD_VAR 0 8
61985: PPUSH
61986: LD_VAR 0 9
61990: PUSH
61991: LD_VAR 0 10
61995: PLUS
61996: PPUSH
61997: CALL_OW 272
62001: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62002: LD_ADDR_VAR 0 7
62006: PUSH
62007: LD_VAR 0 6
62011: PPUSH
62012: LD_VAR 0 8
62016: PPUSH
62017: LD_VAR 0 9
62021: PUSH
62022: LD_VAR 0 10
62026: PLUS
62027: PPUSH
62028: CALL_OW 273
62032: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62033: LD_VAR 0 5
62037: PPUSH
62038: LD_VAR 0 7
62042: PPUSH
62043: CALL_OW 488
62047: PUSH
62048: LD_VAR 0 5
62052: PPUSH
62053: LD_VAR 0 7
62057: PPUSH
62058: CALL_OW 428
62062: PPUSH
62063: CALL_OW 247
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: IN
62078: NOT
62079: AND
62080: IFFALSE 62124
// begin ComMoveXY ( unit , _x , _y ) ;
62082: LD_VAR 0 1
62086: PPUSH
62087: LD_VAR 0 5
62091: PPUSH
62092: LD_VAR 0 7
62096: PPUSH
62097: CALL_OW 111
// result := [ _x , _y ] ;
62101: LD_ADDR_VAR 0 3
62105: PUSH
62106: LD_VAR 0 5
62110: PUSH
62111: LD_VAR 0 7
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: ST_TO_ADDR
// exit ;
62120: POP
62121: POP
62122: GO 62128
// end ; end ;
62124: GO 61968
62126: POP
62127: POP
// end ;
62128: LD_VAR 0 3
62132: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62133: LD_INT 0
62135: PPUSH
62136: PPUSH
62137: PPUSH
// result := 0 ;
62138: LD_ADDR_VAR 0 3
62142: PUSH
62143: LD_INT 0
62145: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62146: LD_VAR 0 1
62150: PUSH
62151: LD_INT 0
62153: LESS
62154: PUSH
62155: LD_VAR 0 1
62159: PUSH
62160: LD_INT 8
62162: GREATER
62163: OR
62164: PUSH
62165: LD_VAR 0 2
62169: PUSH
62170: LD_INT 0
62172: LESS
62173: OR
62174: PUSH
62175: LD_VAR 0 2
62179: PUSH
62180: LD_INT 8
62182: GREATER
62183: OR
62184: IFFALSE 62188
// exit ;
62186: GO 62263
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62188: LD_ADDR_VAR 0 4
62192: PUSH
62193: LD_INT 22
62195: PUSH
62196: LD_VAR 0 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PPUSH
62205: CALL_OW 69
62209: PUSH
62210: FOR_IN
62211: IFFALSE 62261
// begin un := UnitShoot ( i ) ;
62213: LD_ADDR_VAR 0 5
62217: PUSH
62218: LD_VAR 0 4
62222: PPUSH
62223: CALL_OW 504
62227: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62228: LD_VAR 0 5
62232: PPUSH
62233: CALL_OW 255
62237: PUSH
62238: LD_VAR 0 1
62242: EQUAL
62243: IFFALSE 62259
// begin result := un ;
62245: LD_ADDR_VAR 0 3
62249: PUSH
62250: LD_VAR 0 5
62254: ST_TO_ADDR
// exit ;
62255: POP
62256: POP
62257: GO 62263
// end ; end ;
62259: GO 62210
62261: POP
62262: POP
// end ;
62263: LD_VAR 0 3
62267: RET
// export function GetCargoBay ( units ) ; begin
62268: LD_INT 0
62270: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62271: LD_ADDR_VAR 0 2
62275: PUSH
62276: LD_VAR 0 1
62280: PPUSH
62281: LD_INT 2
62283: PUSH
62284: LD_INT 34
62286: PUSH
62287: LD_INT 12
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 34
62296: PUSH
62297: LD_INT 51
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 34
62306: PUSH
62307: LD_INT 32
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 34
62316: PUSH
62317: LD_EXP 94
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: PPUSH
62333: CALL_OW 72
62337: ST_TO_ADDR
// end ;
62338: LD_VAR 0 2
62342: RET
// export function Negate ( value ) ; begin
62343: LD_INT 0
62345: PPUSH
// result := not value ;
62346: LD_ADDR_VAR 0 2
62350: PUSH
62351: LD_VAR 0 1
62355: NOT
62356: ST_TO_ADDR
// end ;
62357: LD_VAR 0 2
62361: RET
// export function Inc ( value ) ; begin
62362: LD_INT 0
62364: PPUSH
// result := value + 1 ;
62365: LD_ADDR_VAR 0 2
62369: PUSH
62370: LD_VAR 0 1
62374: PUSH
62375: LD_INT 1
62377: PLUS
62378: ST_TO_ADDR
// end ;
62379: LD_VAR 0 2
62383: RET
// export function Dec ( value ) ; begin
62384: LD_INT 0
62386: PPUSH
// result := value - 1 ;
62387: LD_ADDR_VAR 0 2
62391: PUSH
62392: LD_VAR 0 1
62396: PUSH
62397: LD_INT 1
62399: MINUS
62400: ST_TO_ADDR
// end ;
62401: LD_VAR 0 2
62405: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62406: LD_INT 0
62408: PPUSH
62409: PPUSH
62410: PPUSH
62411: PPUSH
62412: PPUSH
62413: PPUSH
62414: PPUSH
62415: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62416: LD_VAR 0 1
62420: PPUSH
62421: LD_VAR 0 2
62425: PPUSH
62426: CALL_OW 488
62430: NOT
62431: PUSH
62432: LD_VAR 0 3
62436: PPUSH
62437: LD_VAR 0 4
62441: PPUSH
62442: CALL_OW 488
62446: NOT
62447: OR
62448: IFFALSE 62461
// begin result := - 1 ;
62450: LD_ADDR_VAR 0 5
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: ST_TO_ADDR
// exit ;
62459: GO 62696
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62461: LD_ADDR_VAR 0 12
62465: PUSH
62466: LD_VAR 0 1
62470: PPUSH
62471: LD_VAR 0 2
62475: PPUSH
62476: LD_VAR 0 3
62480: PPUSH
62481: LD_VAR 0 4
62485: PPUSH
62486: CALL 61544 0 4
62490: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62491: LD_ADDR_VAR 0 11
62495: PUSH
62496: LD_VAR 0 1
62500: PPUSH
62501: LD_VAR 0 2
62505: PPUSH
62506: LD_VAR 0 12
62510: PUSH
62511: LD_INT 1
62513: ARRAY
62514: PPUSH
62515: LD_VAR 0 12
62519: PUSH
62520: LD_INT 2
62522: ARRAY
62523: PPUSH
62524: CALL_OW 298
62528: ST_TO_ADDR
// distance := 9999 ;
62529: LD_ADDR_VAR 0 10
62533: PUSH
62534: LD_INT 9999
62536: ST_TO_ADDR
// for i := 0 to 5 do
62537: LD_ADDR_VAR 0 6
62541: PUSH
62542: DOUBLE
62543: LD_INT 0
62545: DEC
62546: ST_TO_ADDR
62547: LD_INT 5
62549: PUSH
62550: FOR_TO
62551: IFFALSE 62694
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62553: LD_ADDR_VAR 0 7
62557: PUSH
62558: LD_VAR 0 1
62562: PPUSH
62563: LD_VAR 0 6
62567: PPUSH
62568: LD_VAR 0 11
62572: PPUSH
62573: CALL_OW 272
62577: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62578: LD_ADDR_VAR 0 8
62582: PUSH
62583: LD_VAR 0 2
62587: PPUSH
62588: LD_VAR 0 6
62592: PPUSH
62593: LD_VAR 0 11
62597: PPUSH
62598: CALL_OW 273
62602: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62603: LD_VAR 0 7
62607: PPUSH
62608: LD_VAR 0 8
62612: PPUSH
62613: CALL_OW 488
62617: NOT
62618: IFFALSE 62622
// continue ;
62620: GO 62550
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62622: LD_ADDR_VAR 0 9
62626: PUSH
62627: LD_VAR 0 12
62631: PUSH
62632: LD_INT 1
62634: ARRAY
62635: PPUSH
62636: LD_VAR 0 12
62640: PUSH
62641: LD_INT 2
62643: ARRAY
62644: PPUSH
62645: LD_VAR 0 7
62649: PPUSH
62650: LD_VAR 0 8
62654: PPUSH
62655: CALL_OW 298
62659: ST_TO_ADDR
// if tmp < distance then
62660: LD_VAR 0 9
62664: PUSH
62665: LD_VAR 0 10
62669: LESS
62670: IFFALSE 62692
// begin result := i ;
62672: LD_ADDR_VAR 0 5
62676: PUSH
62677: LD_VAR 0 6
62681: ST_TO_ADDR
// distance := tmp ;
62682: LD_ADDR_VAR 0 10
62686: PUSH
62687: LD_VAR 0 9
62691: ST_TO_ADDR
// end ; end ;
62692: GO 62550
62694: POP
62695: POP
// end ;
62696: LD_VAR 0 5
62700: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62701: LD_INT 0
62703: PPUSH
62704: PPUSH
// if not driver or not IsInUnit ( driver ) then
62705: LD_VAR 0 1
62709: NOT
62710: PUSH
62711: LD_VAR 0 1
62715: PPUSH
62716: CALL_OW 310
62720: NOT
62721: OR
62722: IFFALSE 62726
// exit ;
62724: GO 62816
// vehicle := IsInUnit ( driver ) ;
62726: LD_ADDR_VAR 0 3
62730: PUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: CALL_OW 310
62740: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62741: LD_VAR 0 1
62745: PPUSH
62746: LD_STRING \
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: PUSH
62776: LD_STRING E
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_VAR 0 3
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PPUSH
62812: CALL_OW 446
// end ;
62816: LD_VAR 0 2
62820: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62821: LD_INT 0
62823: PPUSH
62824: PPUSH
// if not driver or not IsInUnit ( driver ) then
62825: LD_VAR 0 1
62829: NOT
62830: PUSH
62831: LD_VAR 0 1
62835: PPUSH
62836: CALL_OW 310
62840: NOT
62841: OR
62842: IFFALSE 62846
// exit ;
62844: GO 62936
// vehicle := IsInUnit ( driver ) ;
62846: LD_ADDR_VAR 0 3
62850: PUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: CALL_OW 310
62860: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62861: LD_VAR 0 1
62865: PPUSH
62866: LD_STRING \
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: PUSH
62896: LD_STRING E
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_VAR 0 3
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PPUSH
62932: CALL_OW 447
// end ;
62936: LD_VAR 0 2
62940: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62941: LD_INT 0
62943: PPUSH
62944: PPUSH
62945: PPUSH
// tmp := [ ] ;
62946: LD_ADDR_VAR 0 5
62950: PUSH
62951: EMPTY
62952: ST_TO_ADDR
// for i in units do
62953: LD_ADDR_VAR 0 4
62957: PUSH
62958: LD_VAR 0 1
62962: PUSH
62963: FOR_IN
62964: IFFALSE 63002
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62966: LD_ADDR_VAR 0 5
62970: PUSH
62971: LD_VAR 0 5
62975: PPUSH
62976: LD_VAR 0 5
62980: PUSH
62981: LD_INT 1
62983: PLUS
62984: PPUSH
62985: LD_VAR 0 4
62989: PPUSH
62990: CALL_OW 256
62994: PPUSH
62995: CALL_OW 2
62999: ST_TO_ADDR
63000: GO 62963
63002: POP
63003: POP
// if not tmp then
63004: LD_VAR 0 5
63008: NOT
63009: IFFALSE 63013
// exit ;
63011: GO 63061
// if asc then
63013: LD_VAR 0 2
63017: IFFALSE 63041
// result := SortListByListAsc ( units , tmp ) else
63019: LD_ADDR_VAR 0 3
63023: PUSH
63024: LD_VAR 0 1
63028: PPUSH
63029: LD_VAR 0 5
63033: PPUSH
63034: CALL_OW 76
63038: ST_TO_ADDR
63039: GO 63061
// result := SortListByListDesc ( units , tmp ) ;
63041: LD_ADDR_VAR 0 3
63045: PUSH
63046: LD_VAR 0 1
63050: PPUSH
63051: LD_VAR 0 5
63055: PPUSH
63056: CALL_OW 77
63060: ST_TO_ADDR
// end ;
63061: LD_VAR 0 3
63065: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63066: LD_INT 0
63068: PPUSH
63069: PPUSH
// task := GetTaskList ( mech ) ;
63070: LD_ADDR_VAR 0 4
63074: PUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: CALL_OW 437
63084: ST_TO_ADDR
// if not task then
63085: LD_VAR 0 4
63089: NOT
63090: IFFALSE 63094
// exit ;
63092: GO 63136
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63094: LD_ADDR_VAR 0 3
63098: PUSH
63099: LD_VAR 0 4
63103: PUSH
63104: LD_INT 1
63106: ARRAY
63107: PUSH
63108: LD_INT 1
63110: ARRAY
63111: PUSH
63112: LD_STRING r
63114: EQUAL
63115: PUSH
63116: LD_VAR 0 4
63120: PUSH
63121: LD_INT 1
63123: ARRAY
63124: PUSH
63125: LD_INT 4
63127: ARRAY
63128: PUSH
63129: LD_VAR 0 2
63133: EQUAL
63134: AND
63135: ST_TO_ADDR
// end ;
63136: LD_VAR 0 3
63140: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63141: LD_INT 0
63143: PPUSH
// SetDir ( unit , d ) ;
63144: LD_VAR 0 1
63148: PPUSH
63149: LD_VAR 0 4
63153: PPUSH
63154: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63158: LD_VAR 0 1
63162: PPUSH
63163: LD_VAR 0 2
63167: PPUSH
63168: LD_VAR 0 3
63172: PPUSH
63173: LD_VAR 0 5
63177: PPUSH
63178: CALL_OW 48
// end ;
63182: LD_VAR 0 6
63186: RET
// export function ToNaturalNumber ( number ) ; begin
63187: LD_INT 0
63189: PPUSH
// result := number div 1 ;
63190: LD_ADDR_VAR 0 2
63194: PUSH
63195: LD_VAR 0 1
63199: PUSH
63200: LD_INT 1
63202: DIV
63203: ST_TO_ADDR
// if number < 0 then
63204: LD_VAR 0 1
63208: PUSH
63209: LD_INT 0
63211: LESS
63212: IFFALSE 63222
// result := 0 ;
63214: LD_ADDR_VAR 0 2
63218: PUSH
63219: LD_INT 0
63221: ST_TO_ADDR
// end ;
63222: LD_VAR 0 2
63226: RET
// export function SortByClass ( units , class ) ; var un ; begin
63227: LD_INT 0
63229: PPUSH
63230: PPUSH
// if not units or not class then
63231: LD_VAR 0 1
63235: NOT
63236: PUSH
63237: LD_VAR 0 2
63241: NOT
63242: OR
63243: IFFALSE 63247
// exit ;
63245: GO 63342
// result := [ ] ;
63247: LD_ADDR_VAR 0 3
63251: PUSH
63252: EMPTY
63253: ST_TO_ADDR
// for un in units do
63254: LD_ADDR_VAR 0 4
63258: PUSH
63259: LD_VAR 0 1
63263: PUSH
63264: FOR_IN
63265: IFFALSE 63340
// if GetClass ( un ) = class then
63267: LD_VAR 0 4
63271: PPUSH
63272: CALL_OW 257
63276: PUSH
63277: LD_VAR 0 2
63281: EQUAL
63282: IFFALSE 63309
// result := Insert ( result , 1 , un ) else
63284: LD_ADDR_VAR 0 3
63288: PUSH
63289: LD_VAR 0 3
63293: PPUSH
63294: LD_INT 1
63296: PPUSH
63297: LD_VAR 0 4
63301: PPUSH
63302: CALL_OW 2
63306: ST_TO_ADDR
63307: GO 63338
// result := Replace ( result , result + 1 , un ) ;
63309: LD_ADDR_VAR 0 3
63313: PUSH
63314: LD_VAR 0 3
63318: PPUSH
63319: LD_VAR 0 3
63323: PUSH
63324: LD_INT 1
63326: PLUS
63327: PPUSH
63328: LD_VAR 0 4
63332: PPUSH
63333: CALL_OW 1
63337: ST_TO_ADDR
63338: GO 63264
63340: POP
63341: POP
// end ;
63342: LD_VAR 0 3
63346: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63347: LD_INT 0
63349: PPUSH
63350: PPUSH
63351: PPUSH
63352: PPUSH
63353: PPUSH
63354: PPUSH
63355: PPUSH
// result := [ ] ;
63356: LD_ADDR_VAR 0 4
63360: PUSH
63361: EMPTY
63362: ST_TO_ADDR
// if x - r < 0 then
63363: LD_VAR 0 1
63367: PUSH
63368: LD_VAR 0 3
63372: MINUS
63373: PUSH
63374: LD_INT 0
63376: LESS
63377: IFFALSE 63389
// min_x := 0 else
63379: LD_ADDR_VAR 0 8
63383: PUSH
63384: LD_INT 0
63386: ST_TO_ADDR
63387: GO 63405
// min_x := x - r ;
63389: LD_ADDR_VAR 0 8
63393: PUSH
63394: LD_VAR 0 1
63398: PUSH
63399: LD_VAR 0 3
63403: MINUS
63404: ST_TO_ADDR
// if y - r < 0 then
63405: LD_VAR 0 2
63409: PUSH
63410: LD_VAR 0 3
63414: MINUS
63415: PUSH
63416: LD_INT 0
63418: LESS
63419: IFFALSE 63431
// min_y := 0 else
63421: LD_ADDR_VAR 0 7
63425: PUSH
63426: LD_INT 0
63428: ST_TO_ADDR
63429: GO 63447
// min_y := y - r ;
63431: LD_ADDR_VAR 0 7
63435: PUSH
63436: LD_VAR 0 2
63440: PUSH
63441: LD_VAR 0 3
63445: MINUS
63446: ST_TO_ADDR
// max_x := x + r ;
63447: LD_ADDR_VAR 0 9
63451: PUSH
63452: LD_VAR 0 1
63456: PUSH
63457: LD_VAR 0 3
63461: PLUS
63462: ST_TO_ADDR
// max_y := y + r ;
63463: LD_ADDR_VAR 0 10
63467: PUSH
63468: LD_VAR 0 2
63472: PUSH
63473: LD_VAR 0 3
63477: PLUS
63478: ST_TO_ADDR
// for _x = min_x to max_x do
63479: LD_ADDR_VAR 0 5
63483: PUSH
63484: DOUBLE
63485: LD_VAR 0 8
63489: DEC
63490: ST_TO_ADDR
63491: LD_VAR 0 9
63495: PUSH
63496: FOR_TO
63497: IFFALSE 63598
// for _y = min_y to max_y do
63499: LD_ADDR_VAR 0 6
63503: PUSH
63504: DOUBLE
63505: LD_VAR 0 7
63509: DEC
63510: ST_TO_ADDR
63511: LD_VAR 0 10
63515: PUSH
63516: FOR_TO
63517: IFFALSE 63594
// begin if not ValidHex ( _x , _y ) then
63519: LD_VAR 0 5
63523: PPUSH
63524: LD_VAR 0 6
63528: PPUSH
63529: CALL_OW 488
63533: NOT
63534: IFFALSE 63538
// continue ;
63536: GO 63516
// if GetResourceTypeXY ( _x , _y ) then
63538: LD_VAR 0 5
63542: PPUSH
63543: LD_VAR 0 6
63547: PPUSH
63548: CALL_OW 283
63552: IFFALSE 63592
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63554: LD_ADDR_VAR 0 4
63558: PUSH
63559: LD_VAR 0 4
63563: PPUSH
63564: LD_VAR 0 4
63568: PUSH
63569: LD_INT 1
63571: PLUS
63572: PPUSH
63573: LD_VAR 0 5
63577: PUSH
63578: LD_VAR 0 6
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PPUSH
63587: CALL_OW 1
63591: ST_TO_ADDR
// end ;
63592: GO 63516
63594: POP
63595: POP
63596: GO 63496
63598: POP
63599: POP
// end ;
63600: LD_VAR 0 4
63604: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63605: LD_INT 0
63607: PPUSH
63608: PPUSH
63609: PPUSH
63610: PPUSH
63611: PPUSH
63612: PPUSH
63613: PPUSH
63614: PPUSH
// if not units then
63615: LD_VAR 0 1
63619: NOT
63620: IFFALSE 63624
// exit ;
63622: GO 64135
// result := UnitFilter ( units , [ f_ok ] ) ;
63624: LD_ADDR_VAR 0 3
63628: PUSH
63629: LD_VAR 0 1
63633: PPUSH
63634: LD_INT 50
63636: PUSH
63637: EMPTY
63638: LIST
63639: PPUSH
63640: CALL_OW 72
63644: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63645: LD_ADDR_VAR 0 8
63649: PUSH
63650: LD_VAR 0 1
63654: PUSH
63655: LD_INT 1
63657: ARRAY
63658: PPUSH
63659: CALL_OW 255
63663: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63664: LD_ADDR_VAR 0 10
63668: PUSH
63669: LD_INT 29
63671: PUSH
63672: LD_EXP 97
63676: PUSH
63677: LD_INT 49
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: LIST
63684: ST_TO_ADDR
// if not result then
63685: LD_VAR 0 3
63689: NOT
63690: IFFALSE 63694
// exit ;
63692: GO 64135
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63694: LD_ADDR_VAR 0 5
63698: PUSH
63699: LD_INT 81
63701: PUSH
63702: LD_VAR 0 8
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PPUSH
63711: CALL_OW 69
63715: ST_TO_ADDR
// for i in result do
63716: LD_ADDR_VAR 0 4
63720: PUSH
63721: LD_VAR 0 3
63725: PUSH
63726: FOR_IN
63727: IFFALSE 64133
// begin tag := GetTag ( i ) + 1 ;
63729: LD_ADDR_VAR 0 9
63733: PUSH
63734: LD_VAR 0 4
63738: PPUSH
63739: CALL_OW 110
63743: PUSH
63744: LD_INT 1
63746: PLUS
63747: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63748: LD_ADDR_VAR 0 7
63752: PUSH
63753: LD_VAR 0 4
63757: PPUSH
63758: CALL_OW 250
63762: PPUSH
63763: LD_VAR 0 4
63767: PPUSH
63768: CALL_OW 251
63772: PPUSH
63773: LD_INT 6
63775: PPUSH
63776: CALL 63347 0 3
63780: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63781: LD_VAR 0 7
63785: PUSH
63786: LD_VAR 0 4
63790: PPUSH
63791: CALL_OW 264
63795: PUSH
63796: LD_VAR 0 10
63800: IN
63801: NOT
63802: AND
63803: IFFALSE 63842
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63805: LD_VAR 0 4
63809: PPUSH
63810: LD_VAR 0 7
63814: PUSH
63815: LD_INT 1
63817: ARRAY
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PPUSH
63823: LD_VAR 0 7
63827: PUSH
63828: LD_INT 1
63830: ARRAY
63831: PUSH
63832: LD_INT 2
63834: ARRAY
63835: PPUSH
63836: CALL_OW 116
63840: GO 64131
// if path > tag then
63842: LD_VAR 0 2
63846: PUSH
63847: LD_VAR 0 9
63851: GREATER
63852: IFFALSE 64060
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63854: LD_ADDR_VAR 0 6
63858: PUSH
63859: LD_VAR 0 5
63863: PPUSH
63864: LD_INT 91
63866: PUSH
63867: LD_VAR 0 4
63871: PUSH
63872: LD_INT 12
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: PPUSH
63880: CALL_OW 72
63884: ST_TO_ADDR
// if nearEnemy then
63885: LD_VAR 0 6
63889: IFFALSE 63958
// begin if GetWeapon ( i ) = ru_time_lapser then
63891: LD_VAR 0 4
63895: PPUSH
63896: CALL_OW 264
63900: PUSH
63901: LD_INT 49
63903: EQUAL
63904: IFFALSE 63932
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63906: LD_VAR 0 4
63910: PPUSH
63911: LD_VAR 0 6
63915: PPUSH
63916: LD_VAR 0 4
63920: PPUSH
63921: CALL_OW 74
63925: PPUSH
63926: CALL_OW 112
63930: GO 63956
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63932: LD_VAR 0 4
63936: PPUSH
63937: LD_VAR 0 6
63941: PPUSH
63942: LD_VAR 0 4
63946: PPUSH
63947: CALL_OW 74
63951: PPUSH
63952: CALL_OW 115
// end else
63956: GO 64058
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63958: LD_VAR 0 4
63962: PPUSH
63963: LD_VAR 0 2
63967: PUSH
63968: LD_VAR 0 9
63972: ARRAY
63973: PUSH
63974: LD_INT 1
63976: ARRAY
63977: PPUSH
63978: LD_VAR 0 2
63982: PUSH
63983: LD_VAR 0 9
63987: ARRAY
63988: PUSH
63989: LD_INT 2
63991: ARRAY
63992: PPUSH
63993: CALL_OW 297
63997: PUSH
63998: LD_INT 6
64000: GREATER
64001: IFFALSE 64044
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64003: LD_VAR 0 4
64007: PPUSH
64008: LD_VAR 0 2
64012: PUSH
64013: LD_VAR 0 9
64017: ARRAY
64018: PUSH
64019: LD_INT 1
64021: ARRAY
64022: PPUSH
64023: LD_VAR 0 2
64027: PUSH
64028: LD_VAR 0 9
64032: ARRAY
64033: PUSH
64034: LD_INT 2
64036: ARRAY
64037: PPUSH
64038: CALL_OW 114
64042: GO 64058
// SetTag ( i , tag ) ;
64044: LD_VAR 0 4
64048: PPUSH
64049: LD_VAR 0 9
64053: PPUSH
64054: CALL_OW 109
// end else
64058: GO 64131
// if enemy then
64060: LD_VAR 0 5
64064: IFFALSE 64131
// begin if GetWeapon ( i ) = ru_time_lapser then
64066: LD_VAR 0 4
64070: PPUSH
64071: CALL_OW 264
64075: PUSH
64076: LD_INT 49
64078: EQUAL
64079: IFFALSE 64107
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64081: LD_VAR 0 4
64085: PPUSH
64086: LD_VAR 0 5
64090: PPUSH
64091: LD_VAR 0 4
64095: PPUSH
64096: CALL_OW 74
64100: PPUSH
64101: CALL_OW 112
64105: GO 64131
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64107: LD_VAR 0 4
64111: PPUSH
64112: LD_VAR 0 5
64116: PPUSH
64117: LD_VAR 0 4
64121: PPUSH
64122: CALL_OW 74
64126: PPUSH
64127: CALL_OW 115
// end ; end ;
64131: GO 63726
64133: POP
64134: POP
// end ;
64135: LD_VAR 0 3
64139: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64140: LD_INT 0
64142: PPUSH
64143: PPUSH
64144: PPUSH
// if not unit or IsInUnit ( unit ) then
64145: LD_VAR 0 1
64149: NOT
64150: PUSH
64151: LD_VAR 0 1
64155: PPUSH
64156: CALL_OW 310
64160: OR
64161: IFFALSE 64165
// exit ;
64163: GO 64256
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64165: LD_ADDR_VAR 0 4
64169: PUSH
64170: LD_VAR 0 1
64174: PPUSH
64175: CALL_OW 250
64179: PPUSH
64180: LD_VAR 0 2
64184: PPUSH
64185: LD_INT 1
64187: PPUSH
64188: CALL_OW 272
64192: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64193: LD_ADDR_VAR 0 5
64197: PUSH
64198: LD_VAR 0 1
64202: PPUSH
64203: CALL_OW 251
64207: PPUSH
64208: LD_VAR 0 2
64212: PPUSH
64213: LD_INT 1
64215: PPUSH
64216: CALL_OW 273
64220: ST_TO_ADDR
// if ValidHex ( x , y ) then
64221: LD_VAR 0 4
64225: PPUSH
64226: LD_VAR 0 5
64230: PPUSH
64231: CALL_OW 488
64235: IFFALSE 64256
// ComTurnXY ( unit , x , y ) ;
64237: LD_VAR 0 1
64241: PPUSH
64242: LD_VAR 0 4
64246: PPUSH
64247: LD_VAR 0 5
64251: PPUSH
64252: CALL_OW 118
// end ;
64256: LD_VAR 0 3
64260: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64261: LD_INT 0
64263: PPUSH
64264: PPUSH
// result := false ;
64265: LD_ADDR_VAR 0 3
64269: PUSH
64270: LD_INT 0
64272: ST_TO_ADDR
// if not units then
64273: LD_VAR 0 2
64277: NOT
64278: IFFALSE 64282
// exit ;
64280: GO 64327
// for i in units do
64282: LD_ADDR_VAR 0 4
64286: PUSH
64287: LD_VAR 0 2
64291: PUSH
64292: FOR_IN
64293: IFFALSE 64325
// if See ( side , i ) then
64295: LD_VAR 0 1
64299: PPUSH
64300: LD_VAR 0 4
64304: PPUSH
64305: CALL_OW 292
64309: IFFALSE 64323
// begin result := true ;
64311: LD_ADDR_VAR 0 3
64315: PUSH
64316: LD_INT 1
64318: ST_TO_ADDR
// exit ;
64319: POP
64320: POP
64321: GO 64327
// end ;
64323: GO 64292
64325: POP
64326: POP
// end ;
64327: LD_VAR 0 3
64331: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64332: LD_INT 0
64334: PPUSH
64335: PPUSH
64336: PPUSH
64337: PPUSH
// if not unit or not points then
64338: LD_VAR 0 1
64342: NOT
64343: PUSH
64344: LD_VAR 0 2
64348: NOT
64349: OR
64350: IFFALSE 64354
// exit ;
64352: GO 64444
// dist := 99999 ;
64354: LD_ADDR_VAR 0 5
64358: PUSH
64359: LD_INT 99999
64361: ST_TO_ADDR
// for i in points do
64362: LD_ADDR_VAR 0 4
64366: PUSH
64367: LD_VAR 0 2
64371: PUSH
64372: FOR_IN
64373: IFFALSE 64442
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64375: LD_ADDR_VAR 0 6
64379: PUSH
64380: LD_VAR 0 1
64384: PPUSH
64385: LD_VAR 0 4
64389: PUSH
64390: LD_INT 1
64392: ARRAY
64393: PPUSH
64394: LD_VAR 0 4
64398: PUSH
64399: LD_INT 2
64401: ARRAY
64402: PPUSH
64403: CALL_OW 297
64407: ST_TO_ADDR
// if tmpDist < dist then
64408: LD_VAR 0 6
64412: PUSH
64413: LD_VAR 0 5
64417: LESS
64418: IFFALSE 64440
// begin result := i ;
64420: LD_ADDR_VAR 0 3
64424: PUSH
64425: LD_VAR 0 4
64429: ST_TO_ADDR
// dist := tmpDist ;
64430: LD_ADDR_VAR 0 5
64434: PUSH
64435: LD_VAR 0 6
64439: ST_TO_ADDR
// end ; end ;
64440: GO 64372
64442: POP
64443: POP
// end ;
64444: LD_VAR 0 3
64448: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64449: LD_INT 0
64451: PPUSH
// uc_side := side ;
64452: LD_ADDR_OWVAR 20
64456: PUSH
64457: LD_VAR 0 1
64461: ST_TO_ADDR
// uc_nation := 3 ;
64462: LD_ADDR_OWVAR 21
64466: PUSH
64467: LD_INT 3
64469: ST_TO_ADDR
// vc_chassis := 25 ;
64470: LD_ADDR_OWVAR 37
64474: PUSH
64475: LD_INT 25
64477: ST_TO_ADDR
// vc_engine := engine_siberite ;
64478: LD_ADDR_OWVAR 39
64482: PUSH
64483: LD_INT 3
64485: ST_TO_ADDR
// vc_control := control_computer ;
64486: LD_ADDR_OWVAR 38
64490: PUSH
64491: LD_INT 3
64493: ST_TO_ADDR
// vc_weapon := 59 ;
64494: LD_ADDR_OWVAR 40
64498: PUSH
64499: LD_INT 59
64501: ST_TO_ADDR
// result := CreateVehicle ;
64502: LD_ADDR_VAR 0 5
64506: PUSH
64507: CALL_OW 45
64511: ST_TO_ADDR
// SetDir ( result , d ) ;
64512: LD_VAR 0 5
64516: PPUSH
64517: LD_VAR 0 4
64521: PPUSH
64522: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64526: LD_VAR 0 5
64530: PPUSH
64531: LD_VAR 0 2
64535: PPUSH
64536: LD_VAR 0 3
64540: PPUSH
64541: LD_INT 0
64543: PPUSH
64544: CALL_OW 48
// end ;
64548: LD_VAR 0 5
64552: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64553: LD_INT 0
64555: PPUSH
64556: PPUSH
64557: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64558: LD_ADDR_VAR 0 2
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64581: LD_VAR 0 1
64585: NOT
64586: PUSH
64587: LD_VAR 0 1
64591: PPUSH
64592: CALL_OW 264
64596: PUSH
64597: LD_INT 12
64599: PUSH
64600: LD_INT 51
64602: PUSH
64603: LD_INT 32
64605: PUSH
64606: LD_EXP 94
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: IN
64617: NOT
64618: OR
64619: IFFALSE 64623
// exit ;
64621: GO 64721
// for i := 1 to 3 do
64623: LD_ADDR_VAR 0 3
64627: PUSH
64628: DOUBLE
64629: LD_INT 1
64631: DEC
64632: ST_TO_ADDR
64633: LD_INT 3
64635: PUSH
64636: FOR_TO
64637: IFFALSE 64719
// begin tmp := GetCargo ( cargo , i ) ;
64639: LD_ADDR_VAR 0 4
64643: PUSH
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_VAR 0 3
64653: PPUSH
64654: CALL_OW 289
64658: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64659: LD_ADDR_VAR 0 2
64663: PUSH
64664: LD_VAR 0 2
64668: PPUSH
64669: LD_VAR 0 3
64673: PPUSH
64674: LD_VAR 0 4
64678: PPUSH
64679: CALL_OW 1
64683: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64684: LD_ADDR_VAR 0 2
64688: PUSH
64689: LD_VAR 0 2
64693: PPUSH
64694: LD_INT 4
64696: PPUSH
64697: LD_VAR 0 2
64701: PUSH
64702: LD_INT 4
64704: ARRAY
64705: PUSH
64706: LD_VAR 0 4
64710: PLUS
64711: PPUSH
64712: CALL_OW 1
64716: ST_TO_ADDR
// end ;
64717: GO 64636
64719: POP
64720: POP
// end ;
64721: LD_VAR 0 2
64725: RET
