Export Function PrepareUnit2(ident, existMode);
var unit;
begin     
if existMode then
   begin
   if TestCharacters(mission_prefix_prev & ident) then
      unit := CreateCharacter(mission_prefix_prev & ident)
   else
      begin
      if TestCharacters('11_' & ident) then
         unit := CreateCharacter('11_' & ident)
      else if TestCharacters('10c_' & ident) then
         unit := CreateCharacter('10c_' & ident)
      else
         unit := CreateCharacter('10_' & ident);
      end;
   end
else
   unit := NewCharacter(ident);

result := unit;
End;

Export Function PlaceUnit(unit, x, y, d, mode);
var i, tmp;
begin
tmp := FilterAllUnits([[f_side, GetSide(unit)], [f_type, unit_building], [f_not, [f_btype, b_factory]]]);

if not tmp then
   begin
   PlaceUnitXYR(unit, x, y, d, mode);
   exit;
   end;

for i in tmp do
    if IsNotFull(i) then
       begin
       PlaceHumanInUnit(unit, i);

       if GetBType(i) in [b_barracks, b_armoury, b_breastwork, b_bunker] then
          begin
          SetClass(unit, class_soldier);
          SetDir(unit, ReverseDir(i));
          end;

       if GetBType(i) in [b_workshop, b_factory, b_control_tower] then
          SetClass(unit, class_mechanic);

       if GetBType(i) in [b_depot, b_warehouse] then
          SetClass(unit, class_engineer);

       if GetBType(i) in [b_lab, b_lab_half, b_lab_full] then
          SetClass(unit, class_scientistic);

       exit;
       end;

PlaceUnitXYR(unit, x, y, d, mode);
End;

Export function SaveCharactersAfterSelect(unit, unitString, selectedTab);
begin
if unit in selectedTab then
   SaveCharacters(unit, '13c_' & unitString)
else
   SaveCharacters(unit, '13s_' & unitString);
End;

{
   13s_IdentPostaci  - Glowna postac nie zostala wybrana na misje (13_cont).
   13c_IdentPostaci - Glowna postac zostala wybrana na misje.
   13c_others - Pozostale postacie wybrane na misje.
   13s_others - Pozostale postacie nie wybrane na misje
}

Export selected, othersSelect;
Export function SelectAndSaveCharacters;
var i, tmp, othersInBase;
begin
selected := [];
othersSelect := [];

tmp := [Lisa, Donaldson, Bobby, Cyrus, Brown, Gladstone, Houten, Cornel, Gary, Frank, Kikuchi];
tmp := tmp ^ others11;
tmp := tmp ^ others12;
tmp := tmp ^ randomsEpsilon;

for i in tmp do
    if GetClass(i) = 8 then
       SetClass(i, rand(1, 4));

selected := CharacterSelection('1', 6, 6,
            [sel_change_class, JMM, Stevens,
            sel_not_hired,sel_changeable, sel_change_class] ^ tmp ^
            [sel_dont_change_class, sel_not_changeable, Powell],
            [[class_soldier, 0], [class_engineer, 1], [class_mechanic, 0], [class_scientistic, 2], [class_sniper, 0, 2]]);

othersSelect := selected diff [Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Cornel, Gary, Frank, Kikuchi];

othersInBase = tmp diff selected;
othersInBase = othersInBase diff [Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Cornel, Gary, Frank, Kikuchi];

SaveCharacters(othersInBase, '13s_others');
SaveCharacters(othersSelect, '13c_others');
      
SaveCharacters(JMM, '13c_JMM');
SaveCharacters(Stevens, '13c_Stevens');

SaveCharactersAfterSelect(Lisa, 'Lisa', selected);
SaveCharactersAfterSelect(Brown, 'Brown', selected);
SaveCharactersAfterSelect(Donaldson, 'Donaldson', selected);
SaveCharactersAfterSelect(Bobby, 'Bobby', selected);
SaveCharactersAfterSelect(Cyrus, 'Cyrus', selected);
SaveCharactersAfterSelect(Denis, 'Denis', selected);
SaveCharactersAfterSelect(Gladstone, 'Gladstone', selected);
SaveCharactersAfterSelect(Houten, 'Houten', selected);
SaveCharactersAfterSelect(Cornel, 'Cornel', selected);
SaveCharactersAfterSelect(Gary, 'Gary', selected);
SaveCharactersAfterSelect(Frank, 'Frank', selected);
SaveCharactersAfterSelect(Kikuchi, 'Kikuchi', selected);
SaveCharactersAfterSelect(DeltaDoctor, 'DeltaDoctor', selected);

SetSide(FilterAllUnits([[f_side, 1], [f_type, unit_human]]), 4);
SetSide(selected, 1);
SetSide([JMM, Stevens], 1);

for i in FilterAllUnits([[f_side, 1], [f_type, unit_human]]) do
    ComExit(i);

//for i in FilterAllUnits([[f_type, unit_human], [f_side, 4]]) do
//    RemoveUnit(i);
End;
