// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 25 0 0
// PrepareRussian ;
  12: CALL 70 0 0
// PrepareAmerican ;
  16: CALL 781 0 0
// Action ;
  20: CALL 1397 0 0
// end ;
  24: END
// export debug , sikorskiActive ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// sikorskiActive := LoadVariable ( 08_SikorskiStatus , false ) ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_SikorskiStatus
  43: PPUSH
  44: LD_INT 0
  46: PPUSH
  47: CALL_OW 30
  51: ST_TO_ADDR
// if debug then
  52: LD_EXP 1
  56: IFFALSE 65
// FogOff ( 1 ) ;
  58: LD_INT 1
  60: PPUSH
  61: CALL_OW 344
// end ; end_of_file
  65: LD_VAR 0 1
  69: RET
// export Yakotich , Platonov , Rusole ; export function PrepareRussian ; var i , un , d , rusol ; begin
  70: LD_INT 0
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
// uc_side := 3 ;
  77: LD_ADDR_OWVAR 20
  81: PUSH
  82: LD_INT 3
  84: ST_TO_ADDR
// uc_nation := 3 ;
  85: LD_ADDR_OWVAR 21
  89: PUSH
  90: LD_INT 3
  92: ST_TO_ADDR
// SetBName ( ru_dep , ovsyenko ) ;
  93: LD_INT 74
  95: PPUSH
  96: LD_STRING ovsyenko
  98: PPUSH
  99: CALL_OW 500
// SetResourceType ( GetBase ( ru_dep ) , 3 , 200 ) ;
 103: LD_INT 74
 105: PPUSH
 106: CALL_OW 274
 110: PPUSH
 111: LD_INT 3
 113: PPUSH
 114: LD_INT 200
 116: PPUSH
 117: CALL_OW 277
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING Platonov
 128: PPUSH
 129: LD_INT 0
 131: PPUSH
 132: LD_STRING 
 134: PPUSH
 135: CALL 1334 0 3
 139: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
 140: LD_ADDR_VAR 0 2
 144: PUSH
 145: LD_INT 22
 147: PUSH
 148: LD_INT 3
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: PUSH
 155: LD_INT 30
 157: PUSH
 158: LD_INT 31
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PUSH
 165: EMPTY
 166: LIST
 167: LIST
 168: PPUSH
 169: CALL_OW 69
 173: PUSH
 174: FOR_IN
 175: IFFALSE 291
// begin PrepareHuman ( false , 1 , 0 ) ;
 177: LD_INT 0
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 0
 185: PPUSH
 186: CALL_OW 380
// un := CreateHuman ;
 190: LD_ADDR_VAR 0 3
 194: PUSH
 195: CALL_OW 44
 199: ST_TO_ADDR
// SetLives ( un , 500 ) ;
 200: LD_VAR 0 3
 204: PPUSH
 205: LD_INT 500
 207: PPUSH
 208: CALL_OW 234
// if GetDir ( i ) > 3 then
 212: LD_VAR 0 2
 216: PPUSH
 217: CALL_OW 254
 221: PUSH
 222: LD_INT 3
 224: GREATER
 225: IFFALSE 252
// SetDir ( un , GetDir ( i ) - 3 ) else
 227: LD_VAR 0 3
 231: PPUSH
 232: LD_VAR 0 2
 236: PPUSH
 237: CALL_OW 254
 241: PUSH
 242: LD_INT 3
 244: MINUS
 245: PPUSH
 246: CALL_OW 233
 250: GO 275
// SetDir ( un , GetDir ( i ) + 3 ) ;
 252: LD_VAR 0 3
 256: PPUSH
 257: LD_VAR 0 2
 261: PPUSH
 262: CALL_OW 254
 266: PUSH
 267: LD_INT 3
 269: PLUS
 270: PPUSH
 271: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 275: LD_VAR 0 3
 279: PPUSH
 280: LD_VAR 0 2
 284: PPUSH
 285: CALL_OW 52
// end ;
 289: GO 174
 291: POP
 292: POP
// for i = 1 to 2 do
 293: LD_ADDR_VAR 0 2
 297: PUSH
 298: DOUBLE
 299: LD_INT 1
 301: DEC
 302: ST_TO_ADDR
 303: LD_INT 2
 305: PUSH
 306: FOR_TO
 307: IFFALSE 346
// begin PrepareHuman ( sex_male , 2 , 10 ) ;
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 2
 314: PPUSH
 315: LD_INT 10
 317: PPUSH
 318: CALL_OW 380
// un := CreateHuman ;
 322: LD_ADDR_VAR 0 3
 326: PUSH
 327: CALL_OW 44
 331: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep ) ;
 332: LD_VAR 0 3
 336: PPUSH
 337: LD_INT 74
 339: PPUSH
 340: CALL_OW 52
// end ;
 344: GO 306
 346: POP
 347: POP
// for i = 1 to 3 do
 348: LD_ADDR_VAR 0 2
 352: PUSH
 353: DOUBLE
 354: LD_INT 1
 356: DEC
 357: ST_TO_ADDR
 358: LD_INT 3
 360: PUSH
 361: FOR_TO
 362: IFFALSE 417
// begin PrepareHuman ( sex_male , 1 , 7 ) ;
 364: LD_INT 1
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_INT 7
 372: PPUSH
 373: CALL_OW 380
// rusol := CreateHuman ;
 377: LD_ADDR_VAR 0 5
 381: PUSH
 382: CALL_OW 44
 386: ST_TO_ADDR
// PlaceHumanInUnit ( rusol , ru_dep ) ;
 387: LD_VAR 0 5
 391: PPUSH
 392: LD_INT 74
 394: PPUSH
 395: CALL_OW 52
// rusole := rusole ^ rusol ;
 399: LD_ADDR_EXP 5
 403: PUSH
 404: LD_EXP 5
 408: PUSH
 409: LD_VAR 0 5
 413: ADD
 414: ST_TO_ADDR
// end ;
 415: GO 361
 417: POP
 418: POP
// Yakotich = PrepareUnit ( Yakotich , false ,  ) ;
 419: LD_ADDR_EXP 3
 423: PUSH
 424: LD_STRING Yakotich
 426: PPUSH
 427: LD_INT 0
 429: PPUSH
 430: LD_STRING 
 432: PPUSH
 433: CALL 1334 0 3
 437: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , ru_dep ) ;
 438: LD_EXP 3
 442: PPUSH
 443: LD_INT 74
 445: PPUSH
 446: CALL_OW 52
// end ;
 450: LD_VAR 0 1
 454: RET
// export function Transport ( eng_list , cargo_list ) ; var i ; begin
 455: LD_INT 0
 457: PPUSH
 458: PPUSH
// for i = 1 to eng_list do
 459: LD_ADDR_VAR 0 4
 463: PUSH
 464: DOUBLE
 465: LD_INT 1
 467: DEC
 468: ST_TO_ADDR
 469: LD_VAR 0 1
 473: PUSH
 474: FOR_TO
 475: IFFALSE 600
// begin AddComTransport ( eng_list [ i ] , ru_dep , 3 ) ;
 477: LD_VAR 0 1
 481: PUSH
 482: LD_VAR 0 4
 486: ARRAY
 487: PPUSH
 488: LD_INT 74
 490: PPUSH
 491: LD_INT 3
 493: PPUSH
 494: CALL_OW 211
// AddComWait ( eng_list [ i ] , 0 0$1 ) ;
 498: LD_VAR 0 1
 502: PUSH
 503: LD_VAR 0 4
 507: ARRAY
 508: PPUSH
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 202
// AddTaskList ( eng_list [ i ] , [ [ 5 , GetX ( cargo_list [ i ] ) , GetY ( cargo_list [ i ] ) , cargo_list [ i ] , 0 , 0 , 0 ] ] ) ;
 516: LD_VAR 0 1
 520: PUSH
 521: LD_VAR 0 4
 525: ARRAY
 526: PPUSH
 527: LD_STRING 5
 529: PUSH
 530: LD_VAR 0 2
 534: PUSH
 535: LD_VAR 0 4
 539: ARRAY
 540: PPUSH
 541: CALL_OW 250
 545: PUSH
 546: LD_VAR 0 2
 550: PUSH
 551: LD_VAR 0 4
 555: ARRAY
 556: PPUSH
 557: CALL_OW 251
 561: PUSH
 562: LD_VAR 0 2
 566: PUSH
 567: LD_VAR 0 4
 571: ARRAY
 572: PUSH
 573: LD_INT 0
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: PUSH
 591: EMPTY
 592: LIST
 593: PPUSH
 594: CALL_OW 447
// end ;
 598: GO 474
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export Posily , Robotniki ; export function RusPosily ; var i , rusol ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
 611: PPUSH
// uc_side := 3 ;
 612: LD_ADDR_OWVAR 20
 616: PUSH
 617: LD_INT 3
 619: ST_TO_ADDR
// uc_nation := 3 ;
 620: LD_ADDR_OWVAR 21
 624: PUSH
 625: LD_INT 3
 627: ST_TO_ADDR
// for i = 1 to 5 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 5
 640: PUSH
 641: FOR_TO
 642: IFFALSE 700
// begin PrepareHuman ( false , 1 , 7 ) ;
 644: LD_INT 0
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_INT 7
 652: PPUSH
 653: CALL_OW 380
// rusol := CreateHuman ;
 657: LD_ADDR_VAR 0 3
 661: PUSH
 662: CALL_OW 44
 666: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 667: LD_VAR 0 3
 671: PPUSH
 672: LD_INT 2
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// posily := posily ^ rusol ;
 682: LD_ADDR_EXP 6
 686: PUSH
 687: LD_EXP 6
 691: PUSH
 692: LD_VAR 0 3
 696: ADD
 697: ST_TO_ADDR
// end ;
 698: GO 641
 700: POP
 701: POP
// for i = 1 to 3 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 3
 714: PUSH
 715: FOR_TO
 716: IFFALSE 774
// begin PrepareHuman ( false , 2 , 7 ) ;
 718: LD_INT 0
 720: PPUSH
 721: LD_INT 2
 723: PPUSH
 724: LD_INT 7
 726: PPUSH
 727: CALL_OW 380
// rusol := CreateHuman ;
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: CALL_OW 44
 740: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 741: LD_VAR 0 3
 745: PPUSH
 746: LD_INT 2
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: CALL_OW 49
// robotniki := robotniki ^ rusol ;
 756: LD_ADDR_EXP 7
 760: PUSH
 761: LD_EXP 7
 765: PUSH
 766: LD_VAR 0 3
 770: ADD
 771: ST_TO_ADDR
// end ;
 772: GO 715
 774: POP
 775: POP
// end ; end_of_file
 776: LD_VAR 0 1
 780: RET
// export Sikorski , Truman , Bobby , Cyrus , Gary ; export function PrepareAmerican ; var tmp , i ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// uc_side := 4 ;
 786: LD_ADDR_OWVAR 20
 790: PUSH
 791: LD_INT 4
 793: ST_TO_ADDR
// uc_nation := 1 ;
 794: LD_ADDR_OWVAR 21
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// if sikorskiActive then
 802: LD_EXP 2
 806: IFFALSE 847
// begin Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
 808: LD_ADDR_EXP 8
 812: PUSH
 813: LD_STRING Sikorski
 815: PPUSH
 816: LD_INT 0
 818: PPUSH
 819: LD_STRING 
 821: PPUSH
 822: CALL 1334 0 3
 826: ST_TO_ADDR
// PlaceUnitXY ( Sikorski , 98 , 97 , false ) ;
 827: LD_EXP 8
 831: PPUSH
 832: LD_INT 98
 834: PPUSH
 835: LD_INT 97
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: CALL_OW 48
// end else
 845: GO 884
// begin Truman := PrepareUnit ( Truman , false ,  ) ;
 847: LD_ADDR_EXP 9
 851: PUSH
 852: LD_STRING Truman
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: LD_STRING 
 860: PPUSH
 861: CALL 1334 0 3
 865: ST_TO_ADDR
// PlaceUnitXY ( Truman , 98 , 97 , false ) ;
 866: LD_EXP 9
 870: PPUSH
 871: LD_INT 98
 873: PPUSH
 874: LD_INT 97
 876: PPUSH
 877: LD_INT 0
 879: PPUSH
 880: CALL_OW 48
// end ; Gary := PrepareUnit ( Gary , false ,  ) ;
 884: LD_ADDR_EXP 12
 888: PUSH
 889: LD_STRING Gary
 891: PPUSH
 892: LD_INT 0
 894: PPUSH
 895: LD_STRING 
 897: PPUSH
 898: CALL 1334 0 3
 902: ST_TO_ADDR
// tmp := Gary ;
 903: LD_ADDR_VAR 0 2
 907: PUSH
 908: LD_EXP 12
 912: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 08_ ) ;
 913: LD_ADDR_EXP 10
 917: PUSH
 918: LD_STRING Bobby
 920: PPUSH
 921: LD_EXP 1
 925: NOT
 926: PPUSH
 927: LD_STRING 08_
 929: PPUSH
 930: CALL 1334 0 3
 934: ST_TO_ADDR
// if not Bobby then
 935: LD_EXP 10
 939: NOT
 940: IFFALSE 964
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 942: LD_ADDR_EXP 10
 946: PUSH
 947: LD_STRING Bobby
 949: PPUSH
 950: LD_EXP 1
 954: NOT
 955: PPUSH
 956: LD_STRING 03_
 958: PPUSH
 959: CALL 1334 0 3
 963: ST_TO_ADDR
// if Bobby then
 964: LD_EXP 10
 968: IFFALSE 986
// tmp := tmp ^ Bobby ;
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: LD_VAR 0 2
 979: PUSH
 980: LD_EXP 10
 984: ADD
 985: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 08_ ) ;
 986: LD_ADDR_EXP 11
 990: PUSH
 991: LD_STRING Cyrus
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_STRING 08_
1002: PPUSH
1003: CALL 1334 0 3
1007: ST_TO_ADDR
// if not Cyrus then
1008: LD_EXP 11
1012: NOT
1013: IFFALSE 1037
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
1015: LD_ADDR_EXP 11
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_EXP 1
1027: NOT
1028: PPUSH
1029: LD_STRING 03_
1031: PPUSH
1032: CALL 1334 0 3
1036: ST_TO_ADDR
// tmp := tmp ^ CreateCharacterSet ( 03_others ) ;
1037: LD_ADDR_VAR 0 2
1041: PUSH
1042: LD_VAR 0 2
1046: PUSH
1047: LD_STRING 03_others
1049: PPUSH
1050: CALL_OW 31
1054: ADD
1055: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
1056: LD_STRING 03_others
1058: PPUSH
1059: CALL_OW 40
// if UnitFilter ( tmp , [ f_sex , sex_female ] ) = 0 then
1063: LD_VAR 0 2
1067: PPUSH
1068: LD_INT 26
1070: PUSH
1071: LD_INT 2
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 72
1082: PUSH
1083: LD_INT 0
1085: EQUAL
1086: IFFALSE 1158
// begin PrepareHuman ( sex_female , 1 , 5 ) ;
1088: LD_INT 2
1090: PPUSH
1091: LD_INT 1
1093: PPUSH
1094: LD_INT 5
1096: PPUSH
1097: CALL_OW 380
// hc_name := Julia  & profile_name & s ;
1101: LD_ADDR_OWVAR 26
1105: PUSH
1106: LD_STRING Julia 
1108: PUSH
1109: LD_OWVAR 78
1113: STR
1114: PUSH
1115: LD_STRING s
1117: STR
1118: ST_TO_ADDR
// hc_gallery :=  ;
1119: LD_ADDR_OWVAR 33
1123: PUSH
1124: LD_STRING 
1126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
1127: LD_ADDR_OWVAR 29
1131: PUSH
1132: LD_INT 12
1134: PUSH
1135: LD_INT 12
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
1142: LD_ADDR_VAR 0 2
1146: PUSH
1147: LD_VAR 0 2
1151: PUSH
1152: CALL_OW 44
1156: ADD
1157: ST_TO_ADDR
// end ; if tmp < 8 then
1158: LD_VAR 0 2
1162: PUSH
1163: LD_INT 8
1165: LESS
1166: IFFALSE 1263
// begin InitHc ;
1168: CALL_OW 19
// for i = tmp to 8 do
1172: LD_ADDR_VAR 0 3
1176: PUSH
1177: DOUBLE
1178: LD_VAR 0 2
1182: DEC
1183: ST_TO_ADDR
1184: LD_INT 8
1186: PUSH
1187: FOR_TO
1188: IFFALSE 1261
// begin if UnitFilter ( tmp , [ f_class , 4 ] ) = 0 then
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 25
1197: PUSH
1198: LD_INT 4
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: PUSH
1210: LD_INT 0
1212: EQUAL
1213: IFFALSE 1230
// PrepareHuman ( sex_male , 4 , 5 ) else
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 4
1220: PPUSH
1221: LD_INT 5
1223: PPUSH
1224: CALL_OW 380
1228: GO 1243
// PrepareHuman ( false , 1 , 5 ) ;
1230: LD_INT 0
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_INT 5
1238: PPUSH
1239: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1243: LD_ADDR_VAR 0 2
1247: PUSH
1248: LD_VAR 0 2
1252: PUSH
1253: CALL_OW 44
1257: ADD
1258: ST_TO_ADDR
// end ;
1259: GO 1187
1261: POP
1262: POP
// end ; for i in tmp do
1263: LD_ADDR_VAR 0 3
1267: PUSH
1268: LD_VAR 0 2
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1327
// begin if GetClass ( i ) in [ 2 , 3 ] then
1276: LD_VAR 0 3
1280: PPUSH
1281: CALL_OW 257
1285: PUSH
1286: LD_INT 2
1288: PUSH
1289: LD_INT 3
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: IN
1296: IFFALSE 1310
// SetClass ( i , 1 ) ;
1298: LD_VAR 0 3
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 336
// PlaceUnitArea ( i , area_start , false ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 1
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ;
1325: GO 1273
1327: POP
1328: POP
// end ; end_of_file
1329: LD_VAR 0 1
1333: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1334: LD_INT 0
1336: PPUSH
1337: PPUSH
// if exist_mode then
1338: LD_VAR 0 2
1342: IFFALSE 1367
// unit := CreateCharacter ( prefix & ident ) else
1344: LD_ADDR_VAR 0 5
1348: PUSH
1349: LD_VAR 0 3
1353: PUSH
1354: LD_VAR 0 1
1358: STR
1359: PPUSH
1360: CALL_OW 34
1364: ST_TO_ADDR
1365: GO 1382
// unit := NewCharacter ( ident ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 1
1376: PPUSH
1377: CALL_OW 25
1381: ST_TO_ADDR
// result := unit ;
1382: LD_ADDR_VAR 0 4
1386: PUSH
1387: LD_VAR 0 5
1391: ST_TO_ADDR
// end ; end_of_file
1392: LD_VAR 0 4
1396: RET
// export function Action ; var x , y , i , tmp , t , engs , un , speaker , com ; begin
1397: LD_INT 0
1399: PPUSH
1400: PPUSH
1401: PPUSH
1402: PPUSH
1403: PPUSH
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
1408: PPUSH
// ingame_video := true ;
1409: LD_ADDR_OWVAR 52
1413: PUSH
1414: LD_INT 1
1416: ST_TO_ADDR
// interface_hidden := true ;
1417: LD_ADDR_OWVAR 54
1421: PUSH
1422: LD_INT 1
1424: ST_TO_ADDR
// x := 101 ;
1425: LD_ADDR_VAR 0 2
1429: PUSH
1430: LD_INT 101
1432: ST_TO_ADDR
// y := 116 ;
1433: LD_ADDR_VAR 0 3
1437: PUSH
1438: LD_INT 116
1440: ST_TO_ADDR
// if sikorskiActive then
1441: LD_EXP 2
1445: IFFALSE 1459
// com := Sikorski else
1447: LD_ADDR_VAR 0 10
1451: PUSH
1452: LD_EXP 8
1456: ST_TO_ADDR
1457: GO 1469
// com := Truman ;
1459: LD_ADDR_VAR 0 10
1463: PUSH
1464: LD_EXP 9
1468: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
1469: LD_VAR 0 2
1473: PPUSH
1474: LD_VAR 0 3
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 30
1484: NEG
1485: PPUSH
1486: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
1490: LD_VAR 0 2
1494: PPUSH
1495: LD_VAR 0 3
1499: PPUSH
1500: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff com ;
1504: LD_ADDR_VAR 0 5
1508: PUSH
1509: LD_INT 22
1511: PUSH
1512: LD_INT 4
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 21
1521: PUSH
1522: LD_INT 1
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PPUSH
1533: CALL_OW 69
1537: PUSH
1538: LD_VAR 0 10
1542: DIFF
1543: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
1544: LD_VAR 0 5
1548: PPUSH
1549: LD_INT 111
1551: PPUSH
1552: LD_INT 125
1554: PPUSH
1555: CALL_OW 178
// wait ( 0 0$02 ) ;
1559: LD_INT 70
1561: PPUSH
1562: CALL_OW 67
// AddComMoveXY ( com , 105 , 111 ) ;
1566: LD_VAR 0 10
1570: PPUSH
1571: LD_INT 105
1573: PPUSH
1574: LD_INT 111
1576: PPUSH
1577: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
1581: LD_VAR 0 5
1585: PPUSH
1586: LD_INT 108
1588: PPUSH
1589: LD_INT 117
1591: PPUSH
1592: CALL_OW 114
// if sikorskiActive then
1596: LD_EXP 2
1600: IFFALSE 1616
// Say ( Sikorski , D1-Sik-2 ) else
1602: LD_EXP 8
1606: PPUSH
1607: LD_STRING D1-Sik-2
1609: PPUSH
1610: CALL_OW 88
1614: GO 1628
// Say ( Truman , D1-Tru-1 ) ;
1616: LD_EXP 9
1620: PPUSH
1621: LD_STRING D1-Tru-1
1623: PPUSH
1624: CALL_OW 88
// music_class := 1 ;
1628: LD_ADDR_OWVAR 72
1632: PUSH
1633: LD_INT 1
1635: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
1636: LD_INT 35
1638: PPUSH
1639: CALL_OW 67
// until See ( 3 , com ) ;
1643: LD_INT 3
1645: PPUSH
1646: LD_VAR 0 10
1650: PPUSH
1651: CALL_OW 292
1655: IFFALSE 1636
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , com ) ) [ 1 ] ;
1657: LD_ADDR_VAR 0 8
1661: PUSH
1662: LD_INT 30
1664: PUSH
1665: LD_INT 31
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL_OW 69
1676: PPUSH
1677: LD_VAR 0 10
1681: PPUSH
1682: CALL_OW 74
1686: PPUSH
1687: CALL_OW 313
1691: PUSH
1692: LD_INT 1
1694: ARRAY
1695: ST_TO_ADDR
// AddComAttackUnit ( un , com ) ;
1696: LD_VAR 0 8
1700: PPUSH
1701: LD_VAR 0 10
1705: PPUSH
1706: CALL_OW 175
// wait ( 0 0$3 ) ;
1710: LD_INT 105
1712: PPUSH
1713: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
1717: LD_INT 111
1719: PPUSH
1720: LD_INT 116
1722: PPUSH
1723: LD_INT 1
1725: PPUSH
1726: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
1730: LD_INT 35
1732: PPUSH
1733: CALL_OW 67
// until IsDying ( un ) ;
1737: LD_VAR 0 8
1741: PPUSH
1742: CALL_OW 303
1746: IFFALSE 1730
// DoNotAttack ( 3 , com ) ;
1748: LD_INT 3
1750: PPUSH
1751: LD_VAR 0 10
1755: PPUSH
1756: CALL_OW 471
// AddComMoveXY ( com , 110 , 120 ) ;
1760: LD_VAR 0 10
1764: PPUSH
1765: LD_INT 110
1767: PPUSH
1768: LD_INT 120
1770: PPUSH
1771: CALL_OW 171
// AddComAttackUnit ( com , ru_dep ) ;
1775: LD_VAR 0 10
1779: PPUSH
1780: LD_INT 74
1782: PPUSH
1783: CALL_OW 175
// Say ( Yakotich , D1-Rus1-1 ) ;
1787: LD_EXP 3
1791: PPUSH
1792: LD_STRING D1-Rus1-1
1794: PPUSH
1795: CALL_OW 88
// ComExitBuilding ( rusole ) ;
1799: LD_EXP 5
1803: PPUSH
1804: CALL_OW 122
// AddComAgressiveMove ( rusole , 106 , 114 ) ;
1808: LD_EXP 5
1812: PPUSH
1813: LD_INT 106
1815: PPUSH
1816: LD_INT 114
1818: PPUSH
1819: CALL_OW 174
// ComMoveXY ( tmp , 109 , 119 ) ;
1823: LD_VAR 0 5
1827: PPUSH
1828: LD_INT 109
1830: PPUSH
1831: LD_INT 119
1833: PPUSH
1834: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
1838: LD_VAR 0 5
1842: PPUSH
1843: LD_INT 111
1845: PPUSH
1846: LD_INT 125
1848: PPUSH
1849: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
1853: LD_EXP 3
1857: PPUSH
1858: CALL_OW 122
// AddComAttackUnit ( Yakotich , com ) ;
1862: LD_EXP 3
1866: PPUSH
1867: LD_VAR 0 10
1871: PPUSH
1872: CALL_OW 175
// if sikorskiActive then
1876: LD_EXP 2
1880: IFFALSE 1896
// Say ( Sikorski , D1-Sik-1 ) else
1882: LD_EXP 8
1886: PPUSH
1887: LD_STRING D1-Sik-1
1889: PPUSH
1890: CALL_OW 88
1894: GO 1908
// Say ( Truman , D1-Tru-2 ) ;
1896: LD_EXP 9
1900: PPUSH
1901: LD_STRING D1-Tru-2
1903: PPUSH
1904: CALL_OW 88
// wait ( 0 0$2 ) ;
1908: LD_INT 70
1910: PPUSH
1911: CALL_OW 67
// SayEffect ( D1-smrtsikora ) ;
1915: LD_STRING D1-smrtsikora
1917: PPUSH
1918: CALL_OW 96
// KillUnit ( com ) ;
1922: LD_VAR 0 10
1926: PPUSH
1927: CALL_OW 66
// wait ( 0 0$1 ) ;
1931: LD_INT 35
1933: PPUSH
1934: CALL_OW 67
// engs := FilterAllUnits ( [ f_class , 2 ] ) ;
1938: LD_ADDR_VAR 0 7
1942: PUSH
1943: LD_INT 25
1945: PUSH
1946: LD_INT 2
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PPUSH
1953: CALL_OW 69
1957: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
1958: LD_VAR 0 7
1962: PPUSH
1963: CALL_OW 122
// for i = 1 to engs do
1967: LD_ADDR_VAR 0 4
1971: PUSH
1972: DOUBLE
1973: LD_INT 1
1975: DEC
1976: ST_TO_ADDR
1977: LD_VAR 0 7
1981: PUSH
1982: FOR_TO
1983: IFFALSE 2023
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
1985: LD_VAR 0 7
1989: PUSH
1990: LD_VAR 0 4
1994: ARRAY
1995: PPUSH
1996: LD_INT 34
1998: PUSH
1999: LD_INT 51
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PPUSH
2006: CALL_OW 69
2010: PUSH
2011: LD_VAR 0 4
2015: ARRAY
2016: PPUSH
2017: CALL_OW 180
2021: GO 1982
2023: POP
2024: POP
// AddComMoveXY ( engs , 148 , 208 ) ;
2025: LD_VAR 0 7
2029: PPUSH
2030: LD_INT 148
2032: PPUSH
2033: LD_INT 208
2035: PPUSH
2036: CALL_OW 171
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
2040: LD_EXP 3
2044: PPUSH
2045: LD_INT 148
2047: PPUSH
2048: LD_INT 208
2050: PPUSH
2051: CALL_OW 171
// SetLives ( Yakotich , 1000 ) ;
2055: LD_EXP 3
2059: PPUSH
2060: LD_INT 1000
2062: PPUSH
2063: CALL_OW 234
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
2067: LD_ADDR_VAR 0 8
2071: PUSH
2072: LD_INT 22
2074: PUSH
2075: LD_INT 3
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 25
2084: PUSH
2085: LD_INT 1
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PPUSH
2096: CALL_OW 69
2100: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2101: LD_VAR 0 8
2105: PPUSH
2106: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
2110: LD_VAR 0 8
2114: PPUSH
2115: LD_INT 148
2117: PPUSH
2118: LD_INT 208
2120: PPUSH
2121: CALL_OW 171
// wait ( 5 ) ;
2125: LD_INT 5
2127: PPUSH
2128: CALL_OW 67
// Say ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_female ] ] ) [ 1 ] , D1-FSol-1 ) ;
2132: LD_INT 22
2134: PUSH
2135: LD_INT 4
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 26
2144: PUSH
2145: LD_INT 2
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PPUSH
2156: CALL_OW 69
2160: PUSH
2161: LD_INT 1
2163: ARRAY
2164: PPUSH
2165: LD_STRING D1-FSol-1
2167: PPUSH
2168: CALL_OW 88
// AddComMoveXY ( tmp , 111 , 130 ) ;
2172: LD_VAR 0 5
2176: PPUSH
2177: LD_INT 111
2179: PPUSH
2180: LD_INT 130
2182: PPUSH
2183: CALL_OW 171
// wait ( 0 0$5 ) ;
2187: LD_INT 175
2189: PPUSH
2190: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
2194: LD_ADDR_VAR 0 6
2198: PUSH
2199: LD_INT 104
2201: PUSH
2202: LD_INT 117
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 115
2211: PUSH
2212: LD_INT 123
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 114
2221: PUSH
2222: LD_INT 126
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 111
2231: PUSH
2232: LD_INT 122
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 112
2241: PUSH
2242: LD_INT 126
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 117
2251: PUSH
2252: LD_INT 130
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 106
2261: PUSH
2262: LD_INT 127
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: LD_INT 111
2271: PUSH
2272: LD_INT 117
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PUSH
2279: LD_INT 98
2281: PUSH
2282: LD_INT 119
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 116
2291: PUSH
2292: LD_INT 131
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: LD_INT 109
2301: PUSH
2302: LD_INT 129
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 100
2311: PUSH
2312: LD_INT 113
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: ST_TO_ADDR
// for i in t do
2333: LD_ADDR_VAR 0 4
2337: PUSH
2338: LD_VAR 0 6
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2380
// begin wait ( 0 0$0.3 ) ;
2346: LD_INT 10
2348: PPUSH
2349: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: LD_VAR 0 4
2366: PUSH
2367: LD_INT 2
2369: ARRAY
2370: PPUSH
2371: LD_INT 1
2373: PPUSH
2374: CALL_OW 453
// end ;
2378: GO 2343
2380: POP
2381: POP
// music_class := 0 ;
2382: LD_ADDR_OWVAR 72
2386: PUSH
2387: LD_INT 0
2389: ST_TO_ADDR
// wait ( 0 0$4 ) ;
2390: LD_INT 140
2392: PPUSH
2393: CALL_OW 67
// speaker := FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_male ] ] ) diff [ Gary , Bobby , Cyrus ] ;
2397: LD_ADDR_VAR 0 9
2401: PUSH
2402: LD_INT 22
2404: PUSH
2405: LD_INT 4
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 26
2414: PUSH
2415: LD_INT 1
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PPUSH
2426: CALL_OW 69
2430: PUSH
2431: LD_EXP 12
2435: PUSH
2436: LD_EXP 10
2440: PUSH
2441: LD_EXP 11
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: DIFF
2451: ST_TO_ADDR
// Say ( speaker [ 1 ] , D1-Sol-1 ) ;
2452: LD_VAR 0 9
2456: PUSH
2457: LD_INT 1
2459: ARRAY
2460: PPUSH
2461: LD_STRING D1-Sol-1
2463: PPUSH
2464: CALL_OW 88
// wait ( 0 0$2 ) ;
2468: LD_INT 70
2470: PPUSH
2471: CALL_OW 67
// PlaceSeeing ( 148 , 208 , 1 , - 30 ) ;
2475: LD_INT 148
2477: PPUSH
2478: LD_INT 208
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: LD_INT 30
2486: NEG
2487: PPUSH
2488: CALL_OW 330
// wait ( 0 0$1 ) ;
2492: LD_INT 35
2494: PPUSH
2495: CALL_OW 67
// Say ( Yakotich , D1a-Rus1-1 ) ;
2499: LD_EXP 3
2503: PPUSH
2504: LD_STRING D1a-Rus1-1
2506: PPUSH
2507: CALL_OW 88
// RusPosily ;
2511: CALL 607 0 0
// ComMoveXY ( posily , 148 , 208 ) ;
2515: LD_EXP 6
2519: PPUSH
2520: LD_INT 148
2522: PPUSH
2523: LD_INT 208
2525: PPUSH
2526: CALL_OW 111
// ComBuild ( robotniki , b_depot , 144 , 207 , 2 ) ;
2530: LD_EXP 7
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: LD_INT 144
2540: PPUSH
2541: LD_INT 207
2543: PPUSH
2544: LD_INT 2
2546: PPUSH
2547: CALL_OW 145
// CenterOnXY ( 148 , 208 ) ;
2551: LD_INT 148
2553: PPUSH
2554: LD_INT 208
2556: PPUSH
2557: CALL_OW 84
// SayRadio ( Platonov , D1a-Pla-1 ) ;
2561: LD_EXP 4
2565: PPUSH
2566: LD_STRING D1a-Pla-1
2568: PPUSH
2569: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1a ) ;
2573: LD_EXP 4
2577: PPUSH
2578: LD_STRING D1a-Pla-1a
2580: PPUSH
2581: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1b ) ;
2585: LD_EXP 4
2589: PPUSH
2590: LD_STRING D1a-Pla-1b
2592: PPUSH
2593: CALL_OW 94
// Say ( Yakotich , D1a-Rus1-2 ) ;
2597: LD_EXP 3
2601: PPUSH
2602: LD_STRING D1a-Rus1-2
2604: PPUSH
2605: CALL_OW 88
// wait ( 0 0$1 ) ;
2609: LD_INT 35
2611: PPUSH
2612: CALL_OW 67
// ContiuneMission ;
2616: CALL 2632 0 0
// end ;
2620: LD_VAR 0 1
2624: RET
// on DialogueSkipped ( d ) do begin ContiuneMission ;
2625: CALL 2632 0 0
// end ;
2629: PPOPN 1
2631: END
// export function ContiuneMission ; var i , tmp , lives ; begin
2632: LD_INT 0
2634: PPUSH
2635: PPUSH
2636: PPUSH
2637: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
2638: LD_ADDR_VAR 0 3
2642: PUSH
2643: LD_INT 22
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 21
2655: PUSH
2656: LD_INT 1
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: ST_TO_ADDR
// SaveCharacters ( tmp diff [ Sikorski , Truman , Gary , Bobby , Cyrus ] , 09_prev_squad ) ;
2672: LD_VAR 0 3
2676: PUSH
2677: LD_EXP 8
2681: PUSH
2682: LD_EXP 9
2686: PUSH
2687: LD_EXP 12
2691: PUSH
2692: LD_EXP 10
2696: PUSH
2697: LD_EXP 11
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: DIFF
2709: PPUSH
2710: LD_STRING 09_prev_squad
2712: PPUSH
2713: CALL_OW 38
// tmp := [ ] ;
2717: LD_ADDR_VAR 0 3
2721: PUSH
2722: EMPTY
2723: ST_TO_ADDR
// for i in FilterUnitsInArea ( ovsyenko_base , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_breastwork ] ] ) do
2724: LD_ADDR_VAR 0 2
2728: PUSH
2729: LD_INT 3
2731: PPUSH
2732: LD_INT 2
2734: PUSH
2735: LD_INT 30
2737: PUSH
2738: LD_INT 0
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: LD_INT 30
2747: PUSH
2748: LD_INT 31
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 70
2764: PUSH
2765: FOR_IN
2766: IFFALSE 2887
// begin lives := GetLives ( i ) ;
2768: LD_ADDR_VAR 0 4
2772: PUSH
2773: LD_VAR 0 2
2777: PPUSH
2778: CALL_OW 256
2782: ST_TO_ADDR
// if lives = 1000 then
2783: LD_VAR 0 4
2787: PUSH
2788: LD_INT 1000
2790: EQUAL
2791: IFFALSE 2809
// lives := rand ( 500 , 950 ) ;
2793: LD_ADDR_VAR 0 4
2797: PUSH
2798: LD_INT 500
2800: PPUSH
2801: LD_INT 950
2803: PPUSH
2804: CALL_OW 12
2808: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , lives ] ) ;
2809: LD_ADDR_VAR 0 3
2813: PUSH
2814: LD_VAR 0 3
2818: PPUSH
2819: LD_VAR 0 3
2823: PUSH
2824: LD_INT 1
2826: PLUS
2827: PPUSH
2828: LD_VAR 0 2
2832: PPUSH
2833: CALL_OW 266
2837: PUSH
2838: LD_VAR 0 2
2842: PPUSH
2843: CALL_OW 250
2847: PUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL_OW 251
2857: PUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 254
2867: PUSH
2868: LD_VAR 0 4
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 1
2884: ST_TO_ADDR
// end ;
2885: GO 2765
2887: POP
2888: POP
// if not FilterUnitsInArea ( ovsyenko_base , [ f_btype , b_depot ] ) then
2889: LD_INT 3
2891: PPUSH
2892: LD_INT 30
2894: PUSH
2895: LD_INT 0
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 70
2906: NOT
2907: IFFALSE 2955
// tmp := Replace ( tmp , tmp + 1 , [ b_depot , 102 , 118 , 2 , 350 ] ) ;
2909: LD_ADDR_VAR 0 3
2913: PUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: LD_VAR 0 3
2923: PUSH
2924: LD_INT 1
2926: PLUS
2927: PPUSH
2928: LD_INT 0
2930: PUSH
2931: LD_INT 102
2933: PUSH
2934: LD_INT 118
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: LD_INT 350
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: PPUSH
2950: CALL_OW 1
2954: ST_TO_ADDR
// SaveVariable ( tmp , 09_ovsyenko_base ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_STRING 09_ovsyenko_base
2962: PPUSH
2963: CALL_OW 39
// ChangeMap ( 1 , __am\09_cont ) ;
2967: LD_INT 1
2969: PPUSH
2970: LD_STRING __am\09_cont
2972: PPUSH
2973: CALL_OW 340
// ingame_video := false ;
2977: LD_ADDR_OWVAR 52
2981: PUSH
2982: LD_INT 0
2984: ST_TO_ADDR
// interface_hidden := false ;
2985: LD_ADDR_OWVAR 54
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// end ;
2993: LD_VAR 0 1
2997: RET
// every 0 0$1 do var i , filter ;
2998: GO 3000
3000: DISABLE
3001: LD_INT 0
3003: PPUSH
3004: PPUSH
// begin enable ;
3005: ENABLE
// filter := Yakotich ^ FilterAllUnits ( [ f_side , 4 ] ) diff [ Sikorski , Truman ] ;
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: LD_EXP 3
3015: PUSH
3016: LD_INT 22
3018: PUSH
3019: LD_INT 4
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PPUSH
3026: CALL_OW 69
3030: ADD
3031: PUSH
3032: LD_EXP 8
3036: PUSH
3037: LD_EXP 9
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: DIFF
3046: ST_TO_ADDR
// for i in filter do
3047: LD_ADDR_VAR 0 1
3051: PUSH
3052: LD_VAR 0 2
3056: PUSH
3057: FOR_IN
3058: IFFALSE 3089
// if GetLives ( i ) < 1000 then
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 256
3069: PUSH
3070: LD_INT 1000
3072: LESS
3073: IFFALSE 3087
// SetLives ( i , 1000 ) ;
3075: LD_VAR 0 1
3079: PPUSH
3080: LD_INT 1000
3082: PPUSH
3083: CALL_OW 234
3087: GO 3057
3089: POP
3090: POP
// end ;
3091: PPOPN 2
3093: END
