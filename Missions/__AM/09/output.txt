// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 25 0 0
// PrepareRussian ;
  12: CALL 54 0 0
// PrepareAmerican ;
  16: CALL 765 0 0
// Action ;
  20: CALL 1336 0 0
// end ;
  24: END
// export debug ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 49
// FogOff ( 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: CALL_OW 344
// end ; end_of_file
  49: LD_VAR 0 1
  53: RET
// export Yakotich , Platonov , Rusole ; export function PrepareRussian ; var i , un , d , rusol ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
  60: PPUSH
// uc_side := 3 ;
  61: LD_ADDR_OWVAR 20
  65: PUSH
  66: LD_INT 3
  68: ST_TO_ADDR
// uc_nation := 3 ;
  69: LD_ADDR_OWVAR 21
  73: PUSH
  74: LD_INT 3
  76: ST_TO_ADDR
// SetBName ( ru_dep , ovsyenko ) ;
  77: LD_INT 74
  79: PPUSH
  80: LD_STRING ovsyenko
  82: PPUSH
  83: CALL_OW 500
// SetResourceType ( GetBase ( ru_dep ) , 3 , 200 ) ;
  87: LD_INT 74
  89: PPUSH
  90: CALL_OW 274
  94: PPUSH
  95: LD_INT 3
  97: PPUSH
  98: LD_INT 200
 100: PPUSH
 101: CALL_OW 277
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
 105: LD_ADDR_EXP 3
 109: PUSH
 110: LD_STRING Platonov
 112: PPUSH
 113: LD_INT 0
 115: PPUSH
 116: LD_STRING 
 118: PPUSH
 119: CALL 1273 0 3
 123: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
 124: LD_ADDR_VAR 0 2
 128: PUSH
 129: LD_INT 22
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: PUSH
 139: LD_INT 30
 141: PUSH
 142: LD_INT 31
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: PPUSH
 153: CALL_OW 69
 157: PUSH
 158: FOR_IN
 159: IFFALSE 275
// begin PrepareHuman ( false , 1 , 0 ) ;
 161: LD_INT 0
 163: PPUSH
 164: LD_INT 1
 166: PPUSH
 167: LD_INT 0
 169: PPUSH
 170: CALL_OW 380
// un := CreateHuman ;
 174: LD_ADDR_VAR 0 3
 178: PUSH
 179: CALL_OW 44
 183: ST_TO_ADDR
// SetLives ( un , 500 ) ;
 184: LD_VAR 0 3
 188: PPUSH
 189: LD_INT 500
 191: PPUSH
 192: CALL_OW 234
// if GetDir ( i ) > 3 then
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 254
 205: PUSH
 206: LD_INT 3
 208: GREATER
 209: IFFALSE 236
// SetDir ( un , GetDir ( i ) - 3 ) else
 211: LD_VAR 0 3
 215: PPUSH
 216: LD_VAR 0 2
 220: PPUSH
 221: CALL_OW 254
 225: PUSH
 226: LD_INT 3
 228: MINUS
 229: PPUSH
 230: CALL_OW 233
 234: GO 259
// SetDir ( un , GetDir ( i ) + 3 ) ;
 236: LD_VAR 0 3
 240: PPUSH
 241: LD_VAR 0 2
 245: PPUSH
 246: CALL_OW 254
 250: PUSH
 251: LD_INT 3
 253: PLUS
 254: PPUSH
 255: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 259: LD_VAR 0 3
 263: PPUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 52
// end ;
 273: GO 158
 275: POP
 276: POP
// for i = 1 to 2 do
 277: LD_ADDR_VAR 0 2
 281: PUSH
 282: DOUBLE
 283: LD_INT 1
 285: DEC
 286: ST_TO_ADDR
 287: LD_INT 2
 289: PUSH
 290: FOR_TO
 291: IFFALSE 330
// begin PrepareHuman ( sex_male , 2 , 10 ) ;
 293: LD_INT 1
 295: PPUSH
 296: LD_INT 2
 298: PPUSH
 299: LD_INT 10
 301: PPUSH
 302: CALL_OW 380
// un := CreateHuman ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: CALL_OW 44
 315: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep ) ;
 316: LD_VAR 0 3
 320: PPUSH
 321: LD_INT 74
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 290
 330: POP
 331: POP
// for i = 1 to 3 do
 332: LD_ADDR_VAR 0 2
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_INT 3
 344: PUSH
 345: FOR_TO
 346: IFFALSE 401
// begin PrepareHuman ( sex_male , 1 , 7 ) ;
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 1
 353: PPUSH
 354: LD_INT 7
 356: PPUSH
 357: CALL_OW 380
// rusol := CreateHuman ;
 361: LD_ADDR_VAR 0 5
 365: PUSH
 366: CALL_OW 44
 370: ST_TO_ADDR
// PlaceHumanInUnit ( rusol , ru_dep ) ;
 371: LD_VAR 0 5
 375: PPUSH
 376: LD_INT 74
 378: PPUSH
 379: CALL_OW 52
// rusole := rusole ^ rusol ;
 383: LD_ADDR_EXP 4
 387: PUSH
 388: LD_EXP 4
 392: PUSH
 393: LD_VAR 0 5
 397: ADD
 398: ST_TO_ADDR
// end ;
 399: GO 345
 401: POP
 402: POP
// Yakotich = PrepareUnit ( Yakotich , false ,  ) ;
 403: LD_ADDR_EXP 2
 407: PUSH
 408: LD_STRING Yakotich
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: LD_STRING 
 416: PPUSH
 417: CALL 1273 0 3
 421: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , ru_dep ) ;
 422: LD_EXP 2
 426: PPUSH
 427: LD_INT 74
 429: PPUSH
 430: CALL_OW 52
// end ;
 434: LD_VAR 0 1
 438: RET
// export function Transport ( eng_list , cargo_list ) ; var i ; begin
 439: LD_INT 0
 441: PPUSH
 442: PPUSH
// for i = 1 to eng_list do
 443: LD_ADDR_VAR 0 4
 447: PUSH
 448: DOUBLE
 449: LD_INT 1
 451: DEC
 452: ST_TO_ADDR
 453: LD_VAR 0 1
 457: PUSH
 458: FOR_TO
 459: IFFALSE 584
// begin AddComTransport ( eng_list [ i ] , ru_dep , 3 ) ;
 461: LD_VAR 0 1
 465: PUSH
 466: LD_VAR 0 4
 470: ARRAY
 471: PPUSH
 472: LD_INT 74
 474: PPUSH
 475: LD_INT 3
 477: PPUSH
 478: CALL_OW 211
// AddComWait ( eng_list [ i ] , 0 0$1 ) ;
 482: LD_VAR 0 1
 486: PUSH
 487: LD_VAR 0 4
 491: ARRAY
 492: PPUSH
 493: LD_INT 35
 495: PPUSH
 496: CALL_OW 202
// AddTaskList ( eng_list [ i ] , [ [ 5 , GetX ( cargo_list [ i ] ) , GetY ( cargo_list [ i ] ) , cargo_list [ i ] , 0 , 0 , 0 ] ] ) ;
 500: LD_VAR 0 1
 504: PUSH
 505: LD_VAR 0 4
 509: ARRAY
 510: PPUSH
 511: LD_STRING 5
 513: PUSH
 514: LD_VAR 0 2
 518: PUSH
 519: LD_VAR 0 4
 523: ARRAY
 524: PPUSH
 525: CALL_OW 250
 529: PUSH
 530: LD_VAR 0 2
 534: PUSH
 535: LD_VAR 0 4
 539: ARRAY
 540: PPUSH
 541: CALL_OW 251
 545: PUSH
 546: LD_VAR 0 2
 550: PUSH
 551: LD_VAR 0 4
 555: ARRAY
 556: PUSH
 557: LD_INT 0
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: PUSH
 575: EMPTY
 576: LIST
 577: PPUSH
 578: CALL_OW 447
// end ;
 582: GO 458
 584: POP
 585: POP
// end ;
 586: LD_VAR 0 3
 590: RET
// export Posily , Robotniki ; export function RusPosily ; var i , rusol ; begin
 591: LD_INT 0
 593: PPUSH
 594: PPUSH
 595: PPUSH
// uc_side := 3 ;
 596: LD_ADDR_OWVAR 20
 600: PUSH
 601: LD_INT 3
 603: ST_TO_ADDR
// uc_nation := 3 ;
 604: LD_ADDR_OWVAR 21
 608: PUSH
 609: LD_INT 3
 611: ST_TO_ADDR
// for i = 1 to 5 do
 612: LD_ADDR_VAR 0 2
 616: PUSH
 617: DOUBLE
 618: LD_INT 1
 620: DEC
 621: ST_TO_ADDR
 622: LD_INT 5
 624: PUSH
 625: FOR_TO
 626: IFFALSE 684
// begin PrepareHuman ( false , 1 , 7 ) ;
 628: LD_INT 0
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 7
 636: PPUSH
 637: CALL_OW 380
// rusol := CreateHuman ;
 641: LD_ADDR_VAR 0 3
 645: PUSH
 646: CALL_OW 44
 650: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 651: LD_VAR 0 3
 655: PPUSH
 656: LD_INT 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// posily := posily ^ rusol ;
 666: LD_ADDR_EXP 5
 670: PUSH
 671: LD_EXP 5
 675: PUSH
 676: LD_VAR 0 3
 680: ADD
 681: ST_TO_ADDR
// end ;
 682: GO 625
 684: POP
 685: POP
// for i = 1 to 3 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 3
 698: PUSH
 699: FOR_TO
 700: IFFALSE 758
// begin PrepareHuman ( false , 2 , 7 ) ;
 702: LD_INT 0
 704: PPUSH
 705: LD_INT 2
 707: PPUSH
 708: LD_INT 7
 710: PPUSH
 711: CALL_OW 380
// rusol := CreateHuman ;
 715: LD_ADDR_VAR 0 3
 719: PUSH
 720: CALL_OW 44
 724: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 725: LD_VAR 0 3
 729: PPUSH
 730: LD_INT 2
 732: PPUSH
 733: LD_INT 0
 735: PPUSH
 736: CALL_OW 49
// robotniki := robotniki ^ rusol ;
 740: LD_ADDR_EXP 6
 744: PUSH
 745: LD_EXP 6
 749: PUSH
 750: LD_VAR 0 3
 754: ADD
 755: ST_TO_ADDR
// end ;
 756: GO 699
 758: POP
 759: POP
// end ; end_of_file
 760: LD_VAR 0 1
 764: RET
// export Sikorski , Bobby , Cyrus , Gary ; export function PrepareAmerican ; var tmp , i ; begin
 765: LD_INT 0
 767: PPUSH
 768: PPUSH
 769: PPUSH
// uc_side := 4 ;
 770: LD_ADDR_OWVAR 20
 774: PUSH
 775: LD_INT 4
 777: ST_TO_ADDR
// uc_nation := 1 ;
 778: LD_ADDR_OWVAR 21
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_STRING Sikorski
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: LD_STRING 
 799: PPUSH
 800: CALL 1273 0 3
 804: ST_TO_ADDR
// PlaceUnitXY ( Sikorski , 98 , 97 , false ) ;
 805: LD_EXP 7
 809: PPUSH
 810: LD_INT 98
 812: PPUSH
 813: LD_INT 97
 815: PPUSH
 816: LD_INT 0
 818: PPUSH
 819: CALL_OW 48
// Gary := PrepareUnit ( Gary , false ,  ) ;
 823: LD_ADDR_EXP 10
 827: PUSH
 828: LD_STRING Gary
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: LD_STRING 
 836: PPUSH
 837: CALL 1273 0 3
 841: ST_TO_ADDR
// tmp := Gary ;
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: LD_EXP 10
 851: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 08_ ) ;
 852: LD_ADDR_EXP 8
 856: PUSH
 857: LD_STRING Bobby
 859: PPUSH
 860: LD_EXP 1
 864: NOT
 865: PPUSH
 866: LD_STRING 08_
 868: PPUSH
 869: CALL 1273 0 3
 873: ST_TO_ADDR
// if not Bobby then
 874: LD_EXP 8
 878: NOT
 879: IFFALSE 903
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 881: LD_ADDR_EXP 8
 885: PUSH
 886: LD_STRING Bobby
 888: PPUSH
 889: LD_EXP 1
 893: NOT
 894: PPUSH
 895: LD_STRING 03_
 897: PPUSH
 898: CALL 1273 0 3
 902: ST_TO_ADDR
// if Bobby then
 903: LD_EXP 8
 907: IFFALSE 925
// tmp := tmp ^ Bobby ;
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_EXP 8
 923: ADD
 924: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 08_ ) ;
 925: LD_ADDR_EXP 9
 929: PUSH
 930: LD_STRING Cyrus
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_STRING 08_
 941: PPUSH
 942: CALL 1273 0 3
 946: ST_TO_ADDR
// if not Cyrus then
 947: LD_EXP 9
 951: NOT
 952: IFFALSE 976
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 954: LD_ADDR_EXP 9
 958: PUSH
 959: LD_STRING Cyrus
 961: PPUSH
 962: LD_EXP 1
 966: NOT
 967: PPUSH
 968: LD_STRING 03_
 970: PPUSH
 971: CALL 1273 0 3
 975: ST_TO_ADDR
// tmp := tmp ^ CreateCharacterSet ( 03_others ) ;
 976: LD_ADDR_VAR 0 2
 980: PUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_STRING 03_others
 988: PPUSH
 989: CALL_OW 31
 993: ADD
 994: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 995: LD_STRING 03_others
 997: PPUSH
 998: CALL_OW 40
// if UnitFilter ( tmp , [ f_sex , sex_female ] ) = 0 then
1002: LD_VAR 0 2
1006: PPUSH
1007: LD_INT 26
1009: PUSH
1010: LD_INT 2
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL_OW 72
1021: PUSH
1022: LD_INT 0
1024: EQUAL
1025: IFFALSE 1097
// begin PrepareHuman ( sex_female , 1 , 5 ) ;
1027: LD_INT 2
1029: PPUSH
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 5
1035: PPUSH
1036: CALL_OW 380
// hc_name := Julia  & profile_name & s ;
1040: LD_ADDR_OWVAR 26
1044: PUSH
1045: LD_STRING Julia 
1047: PUSH
1048: LD_OWVAR 78
1052: STR
1053: PUSH
1054: LD_STRING s
1056: STR
1057: ST_TO_ADDR
// hc_gallery :=  ;
1058: LD_ADDR_OWVAR 33
1062: PUSH
1063: LD_STRING 
1065: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
1066: LD_ADDR_OWVAR 29
1070: PUSH
1071: LD_INT 12
1073: PUSH
1074: LD_INT 12
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
1081: LD_ADDR_VAR 0 2
1085: PUSH
1086: LD_VAR 0 2
1090: PUSH
1091: CALL_OW 44
1095: ADD
1096: ST_TO_ADDR
// end ; if tmp < 9 then
1097: LD_VAR 0 2
1101: PUSH
1102: LD_INT 9
1104: LESS
1105: IFFALSE 1202
// begin InitHc ;
1107: CALL_OW 19
// for i = tmp to 9 do
1111: LD_ADDR_VAR 0 3
1115: PUSH
1116: DOUBLE
1117: LD_VAR 0 2
1121: DEC
1122: ST_TO_ADDR
1123: LD_INT 9
1125: PUSH
1126: FOR_TO
1127: IFFALSE 1200
// begin if UnitFilter ( tmp , [ f_class , 4 ] ) = 0 then
1129: LD_VAR 0 2
1133: PPUSH
1134: LD_INT 25
1136: PUSH
1137: LD_INT 4
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PPUSH
1144: CALL_OW 72
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: IFFALSE 1169
// PrepareHuman ( sex_male , 4 , 5 ) else
1154: LD_INT 1
1156: PPUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_INT 5
1162: PPUSH
1163: CALL_OW 380
1167: GO 1182
// PrepareHuman ( false , 1 , 5 ) ;
1169: LD_INT 0
1171: PPUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 5
1177: PPUSH
1178: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 2
1191: PUSH
1192: CALL_OW 44
1196: ADD
1197: ST_TO_ADDR
// end ;
1198: GO 1126
1200: POP
1201: POP
// end ; for i in tmp do
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: LD_VAR 0 2
1211: PUSH
1212: FOR_IN
1213: IFFALSE 1266
// begin if GetClass ( i ) in [ 2 , 3 ] then
1215: LD_VAR 0 3
1219: PPUSH
1220: CALL_OW 257
1224: PUSH
1225: LD_INT 2
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: IN
1235: IFFALSE 1249
// SetClass ( i , 1 ) ;
1237: LD_VAR 0 3
1241: PPUSH
1242: LD_INT 1
1244: PPUSH
1245: CALL_OW 336
// PlaceUnitArea ( i , area_start , false ) ;
1249: LD_VAR 0 3
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 49
// end ;
1264: GO 1212
1266: POP
1267: POP
// end ; end_of_file
1268: LD_VAR 0 1
1272: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1273: LD_INT 0
1275: PPUSH
1276: PPUSH
// if exist_mode then
1277: LD_VAR 0 2
1281: IFFALSE 1306
// unit := CreateCharacter ( prefix & ident ) else
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 3
1292: PUSH
1293: LD_VAR 0 1
1297: STR
1298: PPUSH
1299: CALL_OW 34
1303: ST_TO_ADDR
1304: GO 1321
// unit := NewCharacter ( ident ) ;
1306: LD_ADDR_VAR 0 5
1310: PUSH
1311: LD_VAR 0 1
1315: PPUSH
1316: CALL_OW 25
1320: ST_TO_ADDR
// result := unit ;
1321: LD_ADDR_VAR 0 4
1325: PUSH
1326: LD_VAR 0 5
1330: ST_TO_ADDR
// end ; end_of_file
1331: LD_VAR 0 4
1335: RET
// export function Action ; var x , y , i , tmp , t , engs , un , speaker ; begin
1336: LD_INT 0
1338: PPUSH
1339: PPUSH
1340: PPUSH
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
1346: PPUSH
// ingame_video := true ;
1347: LD_ADDR_OWVAR 52
1351: PUSH
1352: LD_INT 1
1354: ST_TO_ADDR
// interface_hidden := true ;
1355: LD_ADDR_OWVAR 54
1359: PUSH
1360: LD_INT 1
1362: ST_TO_ADDR
// x := 101 ;
1363: LD_ADDR_VAR 0 2
1367: PUSH
1368: LD_INT 101
1370: ST_TO_ADDR
// y := 116 ;
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: LD_INT 116
1378: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
1379: LD_VAR 0 2
1383: PPUSH
1384: LD_VAR 0 3
1388: PPUSH
1389: LD_INT 1
1391: PPUSH
1392: LD_INT 30
1394: NEG
1395: PPUSH
1396: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
1400: LD_VAR 0 2
1404: PPUSH
1405: LD_VAR 0 3
1409: PPUSH
1410: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
1414: LD_ADDR_VAR 0 5
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 4
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 21
1431: PUSH
1432: LD_INT 1
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: EMPTY
1440: LIST
1441: LIST
1442: PPUSH
1443: CALL_OW 69
1447: PUSH
1448: LD_EXP 7
1452: DIFF
1453: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
1454: LD_VAR 0 5
1458: PPUSH
1459: LD_INT 111
1461: PPUSH
1462: LD_INT 125
1464: PPUSH
1465: CALL_OW 178
// wait ( 0 0$02 ) ;
1469: LD_INT 70
1471: PPUSH
1472: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
1476: LD_EXP 7
1480: PPUSH
1481: LD_INT 105
1483: PPUSH
1484: LD_INT 111
1486: PPUSH
1487: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
1491: LD_VAR 0 5
1495: PPUSH
1496: LD_INT 108
1498: PPUSH
1499: LD_INT 117
1501: PPUSH
1502: CALL_OW 114
// Say ( Sikorski , D1-Sik-2 ) ;
1506: LD_EXP 7
1510: PPUSH
1511: LD_STRING D1-Sik-2
1513: PPUSH
1514: CALL_OW 88
// music_class := 1 ;
1518: LD_ADDR_OWVAR 72
1522: PUSH
1523: LD_INT 1
1525: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
1526: LD_INT 35
1528: PPUSH
1529: CALL_OW 67
// until See ( 3 , Sikorski ) ;
1533: LD_INT 3
1535: PPUSH
1536: LD_EXP 7
1540: PPUSH
1541: CALL_OW 292
1545: IFFALSE 1526
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
1547: LD_ADDR_VAR 0 8
1551: PUSH
1552: LD_INT 30
1554: PUSH
1555: LD_INT 31
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: PPUSH
1567: LD_EXP 7
1571: PPUSH
1572: CALL_OW 74
1576: PPUSH
1577: CALL_OW 313
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
1586: LD_VAR 0 8
1590: PPUSH
1591: LD_EXP 7
1595: PPUSH
1596: CALL_OW 175
// wait ( 0 0$3 ) ;
1600: LD_INT 105
1602: PPUSH
1603: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
1607: LD_INT 111
1609: PPUSH
1610: LD_INT 116
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
1620: LD_INT 35
1622: PPUSH
1623: CALL_OW 67
// until IsDying ( un ) ;
1627: LD_VAR 0 8
1631: PPUSH
1632: CALL_OW 303
1636: IFFALSE 1620
// DoNotAttack ( 3 , Sikorski ) ;
1638: LD_INT 3
1640: PPUSH
1641: LD_EXP 7
1645: PPUSH
1646: CALL_OW 471
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
1650: LD_EXP 7
1654: PPUSH
1655: LD_INT 110
1657: PPUSH
1658: LD_INT 120
1660: PPUSH
1661: CALL_OW 171
// AddComAttackUnit ( Sikorski , ru_dep ) ;
1665: LD_EXP 7
1669: PPUSH
1670: LD_INT 74
1672: PPUSH
1673: CALL_OW 175
// Say ( Yakotich , D1-Rus1-1 ) ;
1677: LD_EXP 2
1681: PPUSH
1682: LD_STRING D1-Rus1-1
1684: PPUSH
1685: CALL_OW 88
// ComExitBuilding ( rusole ) ;
1689: LD_EXP 4
1693: PPUSH
1694: CALL_OW 122
// AddComAgressiveMove ( rusole , 106 , 114 ) ;
1698: LD_EXP 4
1702: PPUSH
1703: LD_INT 106
1705: PPUSH
1706: LD_INT 114
1708: PPUSH
1709: CALL_OW 174
// ComMoveXY ( tmp , 109 , 119 ) ;
1713: LD_VAR 0 5
1717: PPUSH
1718: LD_INT 109
1720: PPUSH
1721: LD_INT 119
1723: PPUSH
1724: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
1728: LD_VAR 0 5
1732: PPUSH
1733: LD_INT 111
1735: PPUSH
1736: LD_INT 125
1738: PPUSH
1739: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
1743: LD_EXP 2
1747: PPUSH
1748: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
1752: LD_EXP 2
1756: PPUSH
1757: LD_EXP 7
1761: PPUSH
1762: CALL_OW 175
// Say ( Sikorski , D1-Sik-1 ) ;
1766: LD_EXP 7
1770: PPUSH
1771: LD_STRING D1-Sik-1
1773: PPUSH
1774: CALL_OW 88
// wait ( 0 0$2 ) ;
1778: LD_INT 70
1780: PPUSH
1781: CALL_OW 67
// SayEffect ( D1-smrtsikora ) ;
1785: LD_STRING D1-smrtsikora
1787: PPUSH
1788: CALL_OW 96
// KillUnit ( Sikorski ) ;
1792: LD_EXP 7
1796: PPUSH
1797: CALL_OW 66
// wait ( 0 0$1 ) ;
1801: LD_INT 35
1803: PPUSH
1804: CALL_OW 67
// engs := FilterAllUnits ( [ f_class , 2 ] ) ;
1808: LD_ADDR_VAR 0 7
1812: PUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 69
1827: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
1828: LD_VAR 0 7
1832: PPUSH
1833: CALL_OW 122
// for i = 1 to engs do
1837: LD_ADDR_VAR 0 4
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 7
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1893
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
1855: LD_VAR 0 7
1859: PUSH
1860: LD_VAR 0 4
1864: ARRAY
1865: PPUSH
1866: LD_INT 34
1868: PUSH
1869: LD_INT 51
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: PPUSH
1876: CALL_OW 69
1880: PUSH
1881: LD_VAR 0 4
1885: ARRAY
1886: PPUSH
1887: CALL_OW 180
1891: GO 1852
1893: POP
1894: POP
// AddComMoveXY ( engs , 148 , 208 ) ;
1895: LD_VAR 0 7
1899: PPUSH
1900: LD_INT 148
1902: PPUSH
1903: LD_INT 208
1905: PPUSH
1906: CALL_OW 171
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
1910: LD_EXP 2
1914: PPUSH
1915: LD_INT 148
1917: PPUSH
1918: LD_INT 208
1920: PPUSH
1921: CALL_OW 171
// SetLives ( Yakotich , 1000 ) ;
1925: LD_EXP 2
1929: PPUSH
1930: LD_INT 1000
1932: PPUSH
1933: CALL_OW 234
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1937: LD_ADDR_VAR 0 8
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 25
1954: PUSH
1955: LD_INT 1
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 69
1970: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1971: LD_VAR 0 8
1975: PPUSH
1976: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
1980: LD_VAR 0 8
1984: PPUSH
1985: LD_INT 148
1987: PPUSH
1988: LD_INT 208
1990: PPUSH
1991: CALL_OW 171
// wait ( 5 ) ;
1995: LD_INT 5
1997: PPUSH
1998: CALL_OW 67
// Say ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_female ] ] ) [ 1 ] , D1-FSol-1 ) ;
2002: LD_INT 22
2004: PUSH
2005: LD_INT 4
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: LD_INT 26
2014: PUSH
2015: LD_INT 2
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PPUSH
2026: CALL_OW 69
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: LD_STRING D1-FSol-1
2037: PPUSH
2038: CALL_OW 88
// AddComMoveXY ( tmp , 111 , 130 ) ;
2042: LD_VAR 0 5
2046: PPUSH
2047: LD_INT 111
2049: PPUSH
2050: LD_INT 130
2052: PPUSH
2053: CALL_OW 171
// wait ( 0 0$5 ) ;
2057: LD_INT 175
2059: PPUSH
2060: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
2064: LD_ADDR_VAR 0 6
2068: PUSH
2069: LD_INT 104
2071: PUSH
2072: LD_INT 117
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 115
2081: PUSH
2082: LD_INT 123
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 114
2091: PUSH
2092: LD_INT 126
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 111
2101: PUSH
2102: LD_INT 122
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 112
2111: PUSH
2112: LD_INT 126
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 117
2121: PUSH
2122: LD_INT 130
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 106
2131: PUSH
2132: LD_INT 127
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 111
2141: PUSH
2142: LD_INT 117
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 98
2151: PUSH
2152: LD_INT 119
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 116
2161: PUSH
2162: LD_INT 131
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 109
2171: PUSH
2172: LD_INT 129
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 100
2181: PUSH
2182: LD_INT 113
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: ST_TO_ADDR
// for i in t do
2203: LD_ADDR_VAR 0 4
2207: PUSH
2208: LD_VAR 0 6
2212: PUSH
2213: FOR_IN
2214: IFFALSE 2250
// begin wait ( 0 0$0.3 ) ;
2216: LD_INT 10
2218: PPUSH
2219: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
2223: LD_VAR 0 4
2227: PUSH
2228: LD_INT 1
2230: ARRAY
2231: PPUSH
2232: LD_VAR 0 4
2236: PUSH
2237: LD_INT 2
2239: ARRAY
2240: PPUSH
2241: LD_INT 1
2243: PPUSH
2244: CALL_OW 453
// end ;
2248: GO 2213
2250: POP
2251: POP
// music_class := 0 ;
2252: LD_ADDR_OWVAR 72
2256: PUSH
2257: LD_INT 0
2259: ST_TO_ADDR
// wait ( 0 0$4 ) ;
2260: LD_INT 140
2262: PPUSH
2263: CALL_OW 67
// speaker = FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_male ] ] ) diff [ Gary , Bobby , Cyrus ] ;
2267: LD_ADDR_VAR 0 9
2271: PUSH
2272: LD_INT 22
2274: PUSH
2275: LD_INT 4
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 26
2284: PUSH
2285: LD_INT 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_EXP 10
2305: PUSH
2306: LD_EXP 8
2310: PUSH
2311: LD_EXP 9
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: DIFF
2321: ST_TO_ADDR
// Say ( speaker [ 1 ] , D1-Sol-1 ) ;
2322: LD_VAR 0 9
2326: PUSH
2327: LD_INT 1
2329: ARRAY
2330: PPUSH
2331: LD_STRING D1-Sol-1
2333: PPUSH
2334: CALL_OW 88
// wait ( 0 0$2 ) ;
2338: LD_INT 70
2340: PPUSH
2341: CALL_OW 67
// PlaceSeeing ( 148 , 208 , 1 , - 30 ) ;
2345: LD_INT 148
2347: PPUSH
2348: LD_INT 208
2350: PPUSH
2351: LD_INT 1
2353: PPUSH
2354: LD_INT 30
2356: NEG
2357: PPUSH
2358: CALL_OW 330
// wait ( 0 0$1 ) ;
2362: LD_INT 35
2364: PPUSH
2365: CALL_OW 67
// Say ( Yakotich , D1a-Rus1-1 ) ;
2369: LD_EXP 2
2373: PPUSH
2374: LD_STRING D1a-Rus1-1
2376: PPUSH
2377: CALL_OW 88
// RusPosily ;
2381: CALL 591 0 0
// ComMoveXY ( posily , 148 , 208 ) ;
2385: LD_EXP 5
2389: PPUSH
2390: LD_INT 148
2392: PPUSH
2393: LD_INT 208
2395: PPUSH
2396: CALL_OW 111
// ComBuild ( robotniki , b_depot , 144 , 207 , 2 ) ;
2400: LD_EXP 6
2404: PPUSH
2405: LD_INT 0
2407: PPUSH
2408: LD_INT 144
2410: PPUSH
2411: LD_INT 207
2413: PPUSH
2414: LD_INT 2
2416: PPUSH
2417: CALL_OW 145
// CenterOnXY ( 148 , 208 ) ;
2421: LD_INT 148
2423: PPUSH
2424: LD_INT 208
2426: PPUSH
2427: CALL_OW 84
// SayRadio ( Platonov , D1a-Pla-1 ) ;
2431: LD_EXP 3
2435: PPUSH
2436: LD_STRING D1a-Pla-1
2438: PPUSH
2439: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1a ) ;
2443: LD_EXP 3
2447: PPUSH
2448: LD_STRING D1a-Pla-1a
2450: PPUSH
2451: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1b ) ;
2455: LD_EXP 3
2459: PPUSH
2460: LD_STRING D1a-Pla-1b
2462: PPUSH
2463: CALL_OW 94
// Say ( Yakotich , D1a-Rus1-2 ) ;
2467: LD_EXP 2
2471: PPUSH
2472: LD_STRING D1a-Rus1-2
2474: PPUSH
2475: CALL_OW 88
// wait ( 0 0$1 ) ;
2479: LD_INT 35
2481: PPUSH
2482: CALL_OW 67
// SaveCharacters ( tmp diff [ Gary , Bobby , Cyrus ] , 09_prev_squad ) ;
2486: LD_VAR 0 5
2490: PUSH
2491: LD_EXP 10
2495: PUSH
2496: LD_EXP 8
2500: PUSH
2501: LD_EXP 9
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: DIFF
2511: PPUSH
2512: LD_STRING 09_prev_squad
2514: PPUSH
2515: CALL_OW 38
// tmp := [ ] ;
2519: LD_ADDR_VAR 0 5
2523: PUSH
2524: EMPTY
2525: ST_TO_ADDR
// for i in FilterUnitsInArea ( ovsyenko_base , [ f_type , unit_building ] ) do
2526: LD_ADDR_VAR 0 4
2530: PUSH
2531: LD_INT 3
2533: PPUSH
2534: LD_INT 21
2536: PUSH
2537: LD_INT 3
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PPUSH
2544: CALL_OW 70
2548: PUSH
2549: FOR_IN
2550: IFFALSE 2635
// tmp := Replace ( tmp , tmp + 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
2552: LD_ADDR_VAR 0 5
2556: PUSH
2557: LD_VAR 0 5
2561: PPUSH
2562: LD_VAR 0 5
2566: PUSH
2567: LD_INT 1
2569: PLUS
2570: PPUSH
2571: LD_VAR 0 4
2575: PPUSH
2576: CALL_OW 266
2580: PUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 250
2590: PUSH
2591: LD_VAR 0 4
2595: PPUSH
2596: CALL_OW 251
2600: PUSH
2601: LD_VAR 0 4
2605: PPUSH
2606: CALL_OW 254
2610: PUSH
2611: LD_VAR 0 4
2615: PPUSH
2616: CALL_OW 256
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: PPUSH
2628: CALL_OW 1
2632: ST_TO_ADDR
2633: GO 2549
2635: POP
2636: POP
// if not FilterUnitsInArea ( ovsyenko_base , [ f_btype , b_depot ] ) then
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 30
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PPUSH
2650: CALL_OW 70
2654: NOT
2655: IFFALSE 2703
// tmp := Replace ( tmp , tmp + 1 , [ b_depot , 102 , 118 , 5 , 350 ] ) ;
2657: LD_ADDR_VAR 0 5
2661: PUSH
2662: LD_VAR 0 5
2666: PPUSH
2667: LD_VAR 0 5
2671: PUSH
2672: LD_INT 1
2674: PLUS
2675: PPUSH
2676: LD_INT 0
2678: PUSH
2679: LD_INT 102
2681: PUSH
2682: LD_INT 118
2684: PUSH
2685: LD_INT 5
2687: PUSH
2688: LD_INT 350
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: PPUSH
2698: CALL_OW 1
2702: ST_TO_ADDR
// SaveVariable ( tmp , 09_ovsyenko_base ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: LD_STRING 09_ovsyenko_base
2710: PPUSH
2711: CALL_OW 39
// ChangeMap ( 1 , __am\09_cont ) ;
2715: LD_INT 1
2717: PPUSH
2718: LD_STRING __am\09_cont
2720: PPUSH
2721: CALL_OW 340
// ingame_video := false ;
2725: LD_ADDR_OWVAR 52
2729: PUSH
2730: LD_INT 0
2732: ST_TO_ADDR
// interface_hidden := false ;
2733: LD_ADDR_OWVAR 54
2737: PUSH
2738: LD_INT 0
2740: ST_TO_ADDR
// end ;
2741: LD_VAR 0 1
2745: RET
// every 0 0$1 do var i , filter ;
2746: GO 2748
2748: DISABLE
2749: LD_INT 0
2751: PPUSH
2752: PPUSH
// begin enable ;
2753: ENABLE
// filter := Yakotich ^ FilterAllUnits ( [ f_side , 4 ] ) diff Sikorski ;
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: LD_EXP 2
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 4
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PPUSH
2774: CALL_OW 69
2778: ADD
2779: PUSH
2780: LD_EXP 7
2784: DIFF
2785: ST_TO_ADDR
// for i in filter do
2786: LD_ADDR_VAR 0 1
2790: PUSH
2791: LD_VAR 0 2
2795: PUSH
2796: FOR_IN
2797: IFFALSE 2828
// if GetLives ( i ) < 1000 then
2799: LD_VAR 0 1
2803: PPUSH
2804: CALL_OW 256
2808: PUSH
2809: LD_INT 1000
2811: LESS
2812: IFFALSE 2826
// SetLives ( i , 1000 ) ;
2814: LD_VAR 0 1
2818: PPUSH
2819: LD_INT 1000
2821: PPUSH
2822: CALL_OW 234
2826: GO 2796
2828: POP
2829: POP
// end ;
2830: PPOPN 2
2832: END
