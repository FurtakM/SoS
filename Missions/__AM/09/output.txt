// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 25 0 0
// PrepareRussian ;
  12: CALL 54 0 0
// PrepareAmerican ;
  16: CALL 765 0 0
// Action ;
  20: CALL 1329 0 0
// end ;
  24: END
// export debug ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 49
// FogOff ( 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: CALL_OW 344
// end ; end_of_file
  49: LD_VAR 0 1
  53: RET
// export Yakotich , Platonov , Rusole ; export function PrepareRussian ; var i , un , d , rusol ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
  60: PPUSH
// uc_side := 3 ;
  61: LD_ADDR_OWVAR 20
  65: PUSH
  66: LD_INT 3
  68: ST_TO_ADDR
// uc_nation := 3 ;
  69: LD_ADDR_OWVAR 21
  73: PUSH
  74: LD_INT 3
  76: ST_TO_ADDR
// SetBName ( ru_dep , ovsyenko ) ;
  77: LD_INT 74
  79: PPUSH
  80: LD_STRING ovsyenko
  82: PPUSH
  83: CALL_OW 500
// SetResourceType ( GetBase ( ru_dep ) , 3 , 200 ) ;
  87: LD_INT 74
  89: PPUSH
  90: CALL_OW 274
  94: PPUSH
  95: LD_INT 3
  97: PPUSH
  98: LD_INT 200
 100: PPUSH
 101: CALL_OW 277
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
 105: LD_ADDR_EXP 3
 109: PUSH
 110: LD_STRING Platonov
 112: PPUSH
 113: LD_INT 0
 115: PPUSH
 116: LD_STRING 
 118: PPUSH
 119: CALL 1266 0 3
 123: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
 124: LD_ADDR_VAR 0 2
 128: PUSH
 129: LD_INT 22
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: PUSH
 139: LD_INT 30
 141: PUSH
 142: LD_INT 31
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: PPUSH
 153: CALL_OW 69
 157: PUSH
 158: FOR_IN
 159: IFFALSE 275
// begin PrepareHuman ( false , 1 , 0 ) ;
 161: LD_INT 0
 163: PPUSH
 164: LD_INT 1
 166: PPUSH
 167: LD_INT 0
 169: PPUSH
 170: CALL_OW 380
// un := CreateHuman ;
 174: LD_ADDR_VAR 0 3
 178: PUSH
 179: CALL_OW 44
 183: ST_TO_ADDR
// SetLives ( un , 500 ) ;
 184: LD_VAR 0 3
 188: PPUSH
 189: LD_INT 500
 191: PPUSH
 192: CALL_OW 234
// if GetDir ( i ) > 3 then
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 254
 205: PUSH
 206: LD_INT 3
 208: GREATER
 209: IFFALSE 236
// SetDir ( un , GetDir ( i ) - 3 ) else
 211: LD_VAR 0 3
 215: PPUSH
 216: LD_VAR 0 2
 220: PPUSH
 221: CALL_OW 254
 225: PUSH
 226: LD_INT 3
 228: MINUS
 229: PPUSH
 230: CALL_OW 233
 234: GO 259
// SetDir ( un , GetDir ( i ) + 3 ) ;
 236: LD_VAR 0 3
 240: PPUSH
 241: LD_VAR 0 2
 245: PPUSH
 246: CALL_OW 254
 250: PUSH
 251: LD_INT 3
 253: PLUS
 254: PPUSH
 255: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 259: LD_VAR 0 3
 263: PPUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 52
// end ;
 273: GO 158
 275: POP
 276: POP
// for i = 1 to 2 do
 277: LD_ADDR_VAR 0 2
 281: PUSH
 282: DOUBLE
 283: LD_INT 1
 285: DEC
 286: ST_TO_ADDR
 287: LD_INT 2
 289: PUSH
 290: FOR_TO
 291: IFFALSE 330
// begin PrepareHuman ( sex_male , 2 , 10 ) ;
 293: LD_INT 1
 295: PPUSH
 296: LD_INT 2
 298: PPUSH
 299: LD_INT 10
 301: PPUSH
 302: CALL_OW 380
// un := CreateHuman ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: CALL_OW 44
 315: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep ) ;
 316: LD_VAR 0 3
 320: PPUSH
 321: LD_INT 74
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 290
 330: POP
 331: POP
// for i = 1 to 3 do
 332: LD_ADDR_VAR 0 2
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_INT 3
 344: PUSH
 345: FOR_TO
 346: IFFALSE 401
// begin PrepareHuman ( sex_male , 1 , 7 ) ;
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 1
 353: PPUSH
 354: LD_INT 7
 356: PPUSH
 357: CALL_OW 380
// rusol := CreateHuman ;
 361: LD_ADDR_VAR 0 5
 365: PUSH
 366: CALL_OW 44
 370: ST_TO_ADDR
// PlaceHumanInUnit ( rusol , ru_dep ) ;
 371: LD_VAR 0 5
 375: PPUSH
 376: LD_INT 74
 378: PPUSH
 379: CALL_OW 52
// rusole := rusole ^ rusol ;
 383: LD_ADDR_EXP 4
 387: PUSH
 388: LD_EXP 4
 392: PUSH
 393: LD_VAR 0 5
 397: ADD
 398: ST_TO_ADDR
// end ;
 399: GO 345
 401: POP
 402: POP
// Yakotich = PrepareUnit ( Yakotich , false ,  ) ;
 403: LD_ADDR_EXP 2
 407: PUSH
 408: LD_STRING Yakotich
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: LD_STRING 
 416: PPUSH
 417: CALL 1266 0 3
 421: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , ru_dep ) ;
 422: LD_EXP 2
 426: PPUSH
 427: LD_INT 74
 429: PPUSH
 430: CALL_OW 52
// end ;
 434: LD_VAR 0 1
 438: RET
// export function Transport ( eng_list , cargo_list ) ; var i ; begin
 439: LD_INT 0
 441: PPUSH
 442: PPUSH
// for i = 1 to eng_list do
 443: LD_ADDR_VAR 0 4
 447: PUSH
 448: DOUBLE
 449: LD_INT 1
 451: DEC
 452: ST_TO_ADDR
 453: LD_VAR 0 1
 457: PUSH
 458: FOR_TO
 459: IFFALSE 584
// begin AddComTransport ( eng_list [ i ] , ru_dep , 3 ) ;
 461: LD_VAR 0 1
 465: PUSH
 466: LD_VAR 0 4
 470: ARRAY
 471: PPUSH
 472: LD_INT 74
 474: PPUSH
 475: LD_INT 3
 477: PPUSH
 478: CALL_OW 211
// AddComWait ( eng_list [ i ] , 0 0$1 ) ;
 482: LD_VAR 0 1
 486: PUSH
 487: LD_VAR 0 4
 491: ARRAY
 492: PPUSH
 493: LD_INT 35
 495: PPUSH
 496: CALL_OW 202
// AddTaskList ( eng_list [ i ] , [ [ 5 , GetX ( cargo_list [ i ] ) , GetY ( cargo_list [ i ] ) , cargo_list [ i ] , 0 , 0 , 0 ] ] ) ;
 500: LD_VAR 0 1
 504: PUSH
 505: LD_VAR 0 4
 509: ARRAY
 510: PPUSH
 511: LD_STRING 5
 513: PUSH
 514: LD_VAR 0 2
 518: PUSH
 519: LD_VAR 0 4
 523: ARRAY
 524: PPUSH
 525: CALL_OW 250
 529: PUSH
 530: LD_VAR 0 2
 534: PUSH
 535: LD_VAR 0 4
 539: ARRAY
 540: PPUSH
 541: CALL_OW 251
 545: PUSH
 546: LD_VAR 0 2
 550: PUSH
 551: LD_VAR 0 4
 555: ARRAY
 556: PUSH
 557: LD_INT 0
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: PUSH
 575: EMPTY
 576: LIST
 577: PPUSH
 578: CALL_OW 447
// end ;
 582: GO 458
 584: POP
 585: POP
// end ;
 586: LD_VAR 0 3
 590: RET
// export Posily , Robotniki ; export function RusPosily ; var i , rusol ; begin
 591: LD_INT 0
 593: PPUSH
 594: PPUSH
 595: PPUSH
// uc_side := 3 ;
 596: LD_ADDR_OWVAR 20
 600: PUSH
 601: LD_INT 3
 603: ST_TO_ADDR
// uc_nation := 3 ;
 604: LD_ADDR_OWVAR 21
 608: PUSH
 609: LD_INT 3
 611: ST_TO_ADDR
// for i = 1 to 5 do
 612: LD_ADDR_VAR 0 2
 616: PUSH
 617: DOUBLE
 618: LD_INT 1
 620: DEC
 621: ST_TO_ADDR
 622: LD_INT 5
 624: PUSH
 625: FOR_TO
 626: IFFALSE 684
// begin PrepareHuman ( false , 1 , 7 ) ;
 628: LD_INT 0
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 7
 636: PPUSH
 637: CALL_OW 380
// rusol := CreateHuman ;
 641: LD_ADDR_VAR 0 3
 645: PUSH
 646: CALL_OW 44
 650: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 651: LD_VAR 0 3
 655: PPUSH
 656: LD_INT 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// posily := posily ^ rusol ;
 666: LD_ADDR_EXP 5
 670: PUSH
 671: LD_EXP 5
 675: PUSH
 676: LD_VAR 0 3
 680: ADD
 681: ST_TO_ADDR
// end ;
 682: GO 625
 684: POP
 685: POP
// for i = 1 to 3 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 3
 698: PUSH
 699: FOR_TO
 700: IFFALSE 758
// begin PrepareHuman ( false , 2 , 7 ) ;
 702: LD_INT 0
 704: PPUSH
 705: LD_INT 2
 707: PPUSH
 708: LD_INT 7
 710: PPUSH
 711: CALL_OW 380
// rusol := CreateHuman ;
 715: LD_ADDR_VAR 0 3
 719: PUSH
 720: CALL_OW 44
 724: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 725: LD_VAR 0 3
 729: PPUSH
 730: LD_INT 2
 732: PPUSH
 733: LD_INT 0
 735: PPUSH
 736: CALL_OW 49
// robotniki := robotniki ^ rusol ;
 740: LD_ADDR_EXP 6
 744: PUSH
 745: LD_EXP 6
 749: PUSH
 750: LD_VAR 0 3
 754: ADD
 755: ST_TO_ADDR
// end ;
 756: GO 699
 758: POP
 759: POP
// end ; end_of_file
 760: LD_VAR 0 1
 764: RET
// export Sikorski , Bobby , Cyrus , Gary ; export function PrepareAmerican ; var tmp , i ; begin
 765: LD_INT 0
 767: PPUSH
 768: PPUSH
 769: PPUSH
// uc_side := 4 ;
 770: LD_ADDR_OWVAR 20
 774: PUSH
 775: LD_INT 4
 777: ST_TO_ADDR
// uc_nation := 1 ;
 778: LD_ADDR_OWVAR 21
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_STRING Sikorski
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: LD_STRING 
 799: PPUSH
 800: CALL 1266 0 3
 804: ST_TO_ADDR
// PlaceUnitXY ( Sikorski , 98 , 97 , false ) ;
 805: LD_EXP 7
 809: PPUSH
 810: LD_INT 98
 812: PPUSH
 813: LD_INT 97
 815: PPUSH
 816: LD_INT 0
 818: PPUSH
 819: CALL_OW 48
// Gary := PrepareUnit ( Gary , false ,  ) ;
 823: LD_ADDR_EXP 10
 827: PUSH
 828: LD_STRING Gary
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: LD_STRING 
 836: PPUSH
 837: CALL 1266 0 3
 841: ST_TO_ADDR
// tmp := Gary ;
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: LD_EXP 10
 851: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 08_ ) ;
 852: LD_ADDR_EXP 8
 856: PUSH
 857: LD_STRING Bobby
 859: PPUSH
 860: LD_EXP 1
 864: NOT
 865: PPUSH
 866: LD_STRING 08_
 868: PPUSH
 869: CALL 1266 0 3
 873: ST_TO_ADDR
// if not Bobby then
 874: LD_EXP 8
 878: NOT
 879: IFFALSE 903
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 881: LD_ADDR_EXP 8
 885: PUSH
 886: LD_STRING Bobby
 888: PPUSH
 889: LD_EXP 1
 893: NOT
 894: PPUSH
 895: LD_STRING 03_
 897: PPUSH
 898: CALL 1266 0 3
 902: ST_TO_ADDR
// if Bobby then
 903: LD_EXP 8
 907: IFFALSE 925
// tmp := tmp ^ Bobby ;
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_EXP 8
 923: ADD
 924: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 08_ ) ;
 925: LD_ADDR_EXP 9
 929: PUSH
 930: LD_STRING Cyrus
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_STRING 08_
 941: PPUSH
 942: CALL 1266 0 3
 946: ST_TO_ADDR
// if not Cyrus then
 947: LD_EXP 9
 951: NOT
 952: IFFALSE 976
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 954: LD_ADDR_EXP 9
 958: PUSH
 959: LD_STRING Cyrus
 961: PPUSH
 962: LD_EXP 1
 966: NOT
 967: PPUSH
 968: LD_STRING 03_
 970: PPUSH
 971: CALL 1266 0 3
 975: ST_TO_ADDR
// tmp := tmp ^ CreateCharacterSet ( 03_others ) ;
 976: LD_ADDR_VAR 0 2
 980: PUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_STRING 03_others
 988: PPUSH
 989: CALL_OW 31
 993: ADD
 994: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_sex , sex_female ] ) = 0 then
 995: LD_VAR 0 2
 999: PPUSH
1000: LD_INT 26
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: CALL_OW 72
1014: PUSH
1015: LD_INT 0
1017: EQUAL
1018: IFFALSE 1090
// begin PrepareHuman ( sex_female , 1 , 5 ) ;
1020: LD_INT 2
1022: PPUSH
1023: LD_INT 1
1025: PPUSH
1026: LD_INT 5
1028: PPUSH
1029: CALL_OW 380
// hc_name := Julia  & profile_name & s ;
1033: LD_ADDR_OWVAR 26
1037: PUSH
1038: LD_STRING Julia 
1040: PUSH
1041: LD_OWVAR 78
1045: STR
1046: PUSH
1047: LD_STRING s
1049: STR
1050: ST_TO_ADDR
// hc_gallery :=  ;
1051: LD_ADDR_OWVAR 33
1055: PUSH
1056: LD_STRING 
1058: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
1059: LD_ADDR_OWVAR 29
1063: PUSH
1064: LD_INT 12
1066: PUSH
1067: LD_INT 12
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
1074: LD_ADDR_VAR 0 2
1078: PUSH
1079: LD_VAR 0 2
1083: PUSH
1084: CALL_OW 44
1088: ADD
1089: ST_TO_ADDR
// end ; if tmp < 9 then
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 9
1097: LESS
1098: IFFALSE 1195
// begin InitHc ;
1100: CALL_OW 19
// for i = tmp to 9 do
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: DOUBLE
1110: LD_VAR 0 2
1114: DEC
1115: ST_TO_ADDR
1116: LD_INT 9
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1193
// begin if UnitFilter ( tmp , [ f_class , 4 ] ) = 0 then
1122: LD_VAR 0 2
1126: PPUSH
1127: LD_INT 25
1129: PUSH
1130: LD_INT 4
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 72
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: IFFALSE 1162
// PrepareHuman ( sex_male , 4 , 5 ) else
1147: LD_INT 1
1149: PPUSH
1150: LD_INT 4
1152: PPUSH
1153: LD_INT 5
1155: PPUSH
1156: CALL_OW 380
1160: GO 1175
// PrepareHuman ( false , 1 , 5 ) ;
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 5
1170: PPUSH
1171: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1175: LD_ADDR_VAR 0 2
1179: PUSH
1180: LD_VAR 0 2
1184: PUSH
1185: CALL_OW 44
1189: ADD
1190: ST_TO_ADDR
// end ;
1191: GO 1119
1193: POP
1194: POP
// end ; for i in tmp do
1195: LD_ADDR_VAR 0 3
1199: PUSH
1200: LD_VAR 0 2
1204: PUSH
1205: FOR_IN
1206: IFFALSE 1259
// begin if GetClass ( i ) in [ 2 , 3 ] then
1208: LD_VAR 0 3
1212: PPUSH
1213: CALL_OW 257
1217: PUSH
1218: LD_INT 2
1220: PUSH
1221: LD_INT 3
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: IN
1228: IFFALSE 1242
// SetClass ( i , 1 ) ;
1230: LD_VAR 0 3
1234: PPUSH
1235: LD_INT 1
1237: PPUSH
1238: CALL_OW 336
// PlaceUnitArea ( i , area_start , false ) ;
1242: LD_VAR 0 3
1246: PPUSH
1247: LD_INT 1
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL_OW 49
// end ;
1257: GO 1205
1259: POP
1260: POP
// end ; end_of_file
1261: LD_VAR 0 1
1265: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1266: LD_INT 0
1268: PPUSH
1269: PPUSH
// if exist_mode then
1270: LD_VAR 0 2
1274: IFFALSE 1299
// unit := CreateCharacter ( prefix & ident ) else
1276: LD_ADDR_VAR 0 5
1280: PUSH
1281: LD_VAR 0 3
1285: PUSH
1286: LD_VAR 0 1
1290: STR
1291: PPUSH
1292: CALL_OW 34
1296: ST_TO_ADDR
1297: GO 1314
// unit := NewCharacter ( ident ) ;
1299: LD_ADDR_VAR 0 5
1303: PUSH
1304: LD_VAR 0 1
1308: PPUSH
1309: CALL_OW 25
1313: ST_TO_ADDR
// result := unit ;
1314: LD_ADDR_VAR 0 4
1318: PUSH
1319: LD_VAR 0 5
1323: ST_TO_ADDR
// end ; end_of_file
1324: LD_VAR 0 4
1328: RET
// export function Action ; var x , y , i , tmp , t , engs , un , speaker ; begin
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
1337: PPUSH
1338: PPUSH
1339: PPUSH
// ingame_video = true ;
1340: LD_ADDR_OWVAR 52
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// interface_hidden = true ;
1348: LD_ADDR_OWVAR 54
1352: PUSH
1353: LD_INT 1
1355: ST_TO_ADDR
// x := 101 ;
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 101
1363: ST_TO_ADDR
// y := 116 ;
1364: LD_ADDR_VAR 0 3
1368: PUSH
1369: LD_INT 116
1371: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
1372: LD_VAR 0 2
1376: PPUSH
1377: LD_VAR 0 3
1381: PPUSH
1382: LD_INT 1
1384: PPUSH
1385: LD_INT 30
1387: NEG
1388: PPUSH
1389: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
1393: LD_VAR 0 2
1397: PPUSH
1398: LD_VAR 0 3
1402: PPUSH
1403: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
1407: LD_ADDR_VAR 0 5
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 4
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 1
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: PUSH
1441: LD_EXP 7
1445: DIFF
1446: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
1447: LD_VAR 0 5
1451: PPUSH
1452: LD_INT 111
1454: PPUSH
1455: LD_INT 125
1457: PPUSH
1458: CALL_OW 178
// wait ( 0 0$02 ) ;
1462: LD_INT 70
1464: PPUSH
1465: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
1469: LD_EXP 7
1473: PPUSH
1474: LD_INT 105
1476: PPUSH
1477: LD_INT 111
1479: PPUSH
1480: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
1484: LD_VAR 0 5
1488: PPUSH
1489: LD_INT 108
1491: PPUSH
1492: LD_INT 117
1494: PPUSH
1495: CALL_OW 114
// Say ( Sikorski , D1-Sik-2 ) ;
1499: LD_EXP 7
1503: PPUSH
1504: LD_STRING D1-Sik-2
1506: PPUSH
1507: CALL_OW 88
// music_class := 1 ;
1511: LD_ADDR_OWVAR 72
1515: PUSH
1516: LD_INT 1
1518: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
1519: LD_INT 35
1521: PPUSH
1522: CALL_OW 67
// until See ( 3 , Sikorski ) ;
1526: LD_INT 3
1528: PPUSH
1529: LD_EXP 7
1533: PPUSH
1534: CALL_OW 292
1538: IFFALSE 1519
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
1540: LD_ADDR_VAR 0 8
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 31
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PPUSH
1555: CALL_OW 69
1559: PPUSH
1560: LD_EXP 7
1564: PPUSH
1565: CALL_OW 74
1569: PPUSH
1570: CALL_OW 313
1574: PUSH
1575: LD_INT 1
1577: ARRAY
1578: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
1579: LD_VAR 0 8
1583: PPUSH
1584: LD_EXP 7
1588: PPUSH
1589: CALL_OW 175
// wait ( 0 0$4 ) ;
1593: LD_INT 140
1595: PPUSH
1596: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
1600: LD_INT 111
1602: PPUSH
1603: LD_INT 116
1605: PPUSH
1606: LD_INT 1
1608: PPUSH
1609: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
1613: LD_INT 35
1615: PPUSH
1616: CALL_OW 67
// until IsDying ( un ) ;
1620: LD_VAR 0 8
1624: PPUSH
1625: CALL_OW 303
1629: IFFALSE 1613
// DoNotAttack ( 3 , Sikorski ) ;
1631: LD_INT 3
1633: PPUSH
1634: LD_EXP 7
1638: PPUSH
1639: CALL_OW 471
// ComExitBuilding ( rusole ) ;
1643: LD_EXP 4
1647: PPUSH
1648: CALL_OW 122
// AddComAgressiveMove ( rusole , 106 , 114 ) ;
1652: LD_EXP 4
1656: PPUSH
1657: LD_INT 106
1659: PPUSH
1660: LD_INT 114
1662: PPUSH
1663: CALL_OW 174
// Say ( Yakotich , D1-Rus1-1 ) ;
1667: LD_EXP 2
1671: PPUSH
1672: LD_STRING D1-Rus1-1
1674: PPUSH
1675: CALL_OW 88
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
1679: LD_EXP 7
1683: PPUSH
1684: LD_INT 110
1686: PPUSH
1687: LD_INT 120
1689: PPUSH
1690: CALL_OW 171
// ComMoveXY ( tmp , 109 , 119 ) ;
1694: LD_VAR 0 5
1698: PPUSH
1699: LD_INT 109
1701: PPUSH
1702: LD_INT 119
1704: PPUSH
1705: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
1709: LD_VAR 0 5
1713: PPUSH
1714: LD_INT 111
1716: PPUSH
1717: LD_INT 125
1719: PPUSH
1720: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
1724: LD_EXP 2
1728: PPUSH
1729: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
1733: LD_EXP 2
1737: PPUSH
1738: LD_EXP 7
1742: PPUSH
1743: CALL_OW 175
// Say ( Sikorski , D1-Sik-1 ) ;
1747: LD_EXP 7
1751: PPUSH
1752: LD_STRING D1-Sik-1
1754: PPUSH
1755: CALL_OW 88
// SayEffect ( D1-smrtsikora ) ;
1759: LD_STRING D1-smrtsikora
1761: PPUSH
1762: CALL_OW 96
// KillUnit ( Sikorski ) ;
1766: LD_EXP 7
1770: PPUSH
1771: CALL_OW 66
// wait ( 0 0$1 ) ;
1775: LD_INT 35
1777: PPUSH
1778: CALL_OW 67
// engs := FilterAllUnits ( [ f_class , 2 ] ) ;
1782: LD_ADDR_VAR 0 7
1786: PUSH
1787: LD_INT 25
1789: PUSH
1790: LD_INT 2
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PPUSH
1797: CALL_OW 69
1801: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
1802: LD_VAR 0 7
1806: PPUSH
1807: CALL_OW 122
// for i = 1 to engs do
1811: LD_ADDR_VAR 0 4
1815: PUSH
1816: DOUBLE
1817: LD_INT 1
1819: DEC
1820: ST_TO_ADDR
1821: LD_VAR 0 7
1825: PUSH
1826: FOR_TO
1827: IFFALSE 1867
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
1829: LD_VAR 0 7
1833: PUSH
1834: LD_VAR 0 4
1838: ARRAY
1839: PPUSH
1840: LD_INT 34
1842: PUSH
1843: LD_INT 51
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PPUSH
1850: CALL_OW 69
1854: PUSH
1855: LD_VAR 0 4
1859: ARRAY
1860: PPUSH
1861: CALL_OW 180
1865: GO 1826
1867: POP
1868: POP
// AddComMoveXY ( engs , 148 , 208 ) ;
1869: LD_VAR 0 7
1873: PPUSH
1874: LD_INT 148
1876: PPUSH
1877: LD_INT 208
1879: PPUSH
1880: CALL_OW 171
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
1884: LD_EXP 2
1888: PPUSH
1889: LD_INT 148
1891: PPUSH
1892: LD_INT 208
1894: PPUSH
1895: CALL_OW 171
// SetLives ( Yakotich , 1000 ) ;
1899: LD_EXP 2
1903: PPUSH
1904: LD_INT 1000
1906: PPUSH
1907: CALL_OW 234
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1911: LD_ADDR_VAR 0 8
1915: PUSH
1916: LD_INT 22
1918: PUSH
1919: LD_INT 3
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: LD_INT 25
1928: PUSH
1929: LD_INT 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: PPUSH
1940: CALL_OW 69
1944: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1945: LD_VAR 0 8
1949: PPUSH
1950: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
1954: LD_VAR 0 8
1958: PPUSH
1959: LD_INT 148
1961: PPUSH
1962: LD_INT 208
1964: PPUSH
1965: CALL_OW 171
// Wait ( 5 ) ;
1969: LD_INT 5
1971: PPUSH
1972: CALL_OW 67
// Say ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_female ] ] ) [ 1 ] , D1-FSol-1 ) ;
1976: LD_INT 22
1978: PUSH
1979: LD_INT 4
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PUSH
1986: LD_INT 26
1988: PUSH
1989: LD_INT 2
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL_OW 69
2004: PUSH
2005: LD_INT 1
2007: ARRAY
2008: PPUSH
2009: LD_STRING D1-FSol-1
2011: PPUSH
2012: CALL_OW 88
// ComMoveXY ( tmp , 106 , 112 ) ;
2016: LD_VAR 0 5
2020: PPUSH
2021: LD_INT 106
2023: PPUSH
2024: LD_INT 112
2026: PPUSH
2027: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
2031: LD_VAR 0 5
2035: PPUSH
2036: LD_INT 111
2038: PPUSH
2039: LD_INT 125
2041: PPUSH
2042: CALL_OW 178
// wait ( 0 0$7 ) ;
2046: LD_INT 245
2048: PPUSH
2049: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
2053: LD_ADDR_VAR 0 6
2057: PUSH
2058: LD_INT 104
2060: PUSH
2061: LD_INT 117
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 115
2070: PUSH
2071: LD_INT 123
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 114
2080: PUSH
2081: LD_INT 126
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 111
2090: PUSH
2091: LD_INT 122
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 112
2100: PUSH
2101: LD_INT 126
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 117
2110: PUSH
2111: LD_INT 130
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 106
2120: PUSH
2121: LD_INT 127
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 111
2130: PUSH
2131: LD_INT 117
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 98
2140: PUSH
2141: LD_INT 119
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 116
2150: PUSH
2151: LD_INT 131
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 109
2160: PUSH
2161: LD_INT 129
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 100
2170: PUSH
2171: LD_INT 113
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: ST_TO_ADDR
// for i in t do
2192: LD_ADDR_VAR 0 4
2196: PUSH
2197: LD_VAR 0 6
2201: PUSH
2202: FOR_IN
2203: IFFALSE 2239
// begin wait ( 0 0$0.3 ) ;
2205: LD_INT 10
2207: PPUSH
2208: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
2212: LD_VAR 0 4
2216: PUSH
2217: LD_INT 1
2219: ARRAY
2220: PPUSH
2221: LD_VAR 0 4
2225: PUSH
2226: LD_INT 2
2228: ARRAY
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: CALL_OW 453
// end ;
2237: GO 2202
2239: POP
2240: POP
// ComMoveXY ( tmp , 109 , 124 ) ;
2241: LD_VAR 0 5
2245: PPUSH
2246: LD_INT 109
2248: PPUSH
2249: LD_INT 124
2251: PPUSH
2252: CALL_OW 111
// music_class := 0 ;
2256: LD_ADDR_OWVAR 72
2260: PUSH
2261: LD_INT 0
2263: ST_TO_ADDR
// wait ( 0 0$4 ) ;
2264: LD_INT 140
2266: PPUSH
2267: CALL_OW 67
// speaker = FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_male ] ] ) diff [ Gary , Bobby , Cyrus ] ;
2271: LD_ADDR_VAR 0 9
2275: PUSH
2276: LD_INT 22
2278: PUSH
2279: LD_INT 4
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 26
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PPUSH
2300: CALL_OW 69
2304: PUSH
2305: LD_EXP 10
2309: PUSH
2310: LD_EXP 8
2314: PUSH
2315: LD_EXP 9
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: DIFF
2325: ST_TO_ADDR
// Say ( speaker [ 1 ] , D1-Sol-1 ) ;
2326: LD_VAR 0 9
2330: PUSH
2331: LD_INT 1
2333: ARRAY
2334: PPUSH
2335: LD_STRING D1-Sol-1
2337: PPUSH
2338: CALL_OW 88
// wait ( 0 0$2 ) ;
2342: LD_INT 70
2344: PPUSH
2345: CALL_OW 67
// PlaceSeeing ( 148 , 208 , 1 , - 30 ) ;
2349: LD_INT 148
2351: PPUSH
2352: LD_INT 208
2354: PPUSH
2355: LD_INT 1
2357: PPUSH
2358: LD_INT 30
2360: NEG
2361: PPUSH
2362: CALL_OW 330
// wait ( 0 0$1 ) ;
2366: LD_INT 35
2368: PPUSH
2369: CALL_OW 67
// Say ( Yakotich , D1a-Rus1-1 ) ;
2373: LD_EXP 2
2377: PPUSH
2378: LD_STRING D1a-Rus1-1
2380: PPUSH
2381: CALL_OW 88
// RusPosily ;
2385: CALL 591 0 0
// ComMoveXY ( posily , 148 , 208 ) ;
2389: LD_EXP 5
2393: PPUSH
2394: LD_INT 148
2396: PPUSH
2397: LD_INT 208
2399: PPUSH
2400: CALL_OW 111
// ComBuild ( robotniki , b_depot , 144 , 207 , 2 ) ;
2404: LD_EXP 6
2408: PPUSH
2409: LD_INT 0
2411: PPUSH
2412: LD_INT 144
2414: PPUSH
2415: LD_INT 207
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 145
// CenterOnXY ( 148 , 208 ) ;
2425: LD_INT 148
2427: PPUSH
2428: LD_INT 208
2430: PPUSH
2431: CALL_OW 84
// SayRadio ( Platonov , D1a-Pla-1 ) ;
2435: LD_EXP 3
2439: PPUSH
2440: LD_STRING D1a-Pla-1
2442: PPUSH
2443: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1a ) ;
2447: LD_EXP 3
2451: PPUSH
2452: LD_STRING D1a-Pla-1a
2454: PPUSH
2455: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1b ) ;
2459: LD_EXP 3
2463: PPUSH
2464: LD_STRING D1a-Pla-1b
2466: PPUSH
2467: CALL_OW 94
// Say ( Yakotich , D1a-Rus1-2 ) ;
2471: LD_EXP 2
2475: PPUSH
2476: LD_STRING D1a-Rus1-2
2478: PPUSH
2479: CALL_OW 88
// wait ( 0 0$1 ) ;
2483: LD_INT 35
2485: PPUSH
2486: CALL_OW 67
// SaveCharacters ( tmp diff [ Gary , Bobby , Cyrus ] , 09_prev_squad ) ;
2490: LD_VAR 0 5
2494: PUSH
2495: LD_EXP 10
2499: PUSH
2500: LD_EXP 8
2504: PUSH
2505: LD_EXP 9
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: DIFF
2515: PPUSH
2516: LD_STRING 09_prev_squad
2518: PPUSH
2519: CALL_OW 38
// tmp := [ ] ;
2523: LD_ADDR_VAR 0 5
2527: PUSH
2528: EMPTY
2529: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: LD_INT 21
2537: PUSH
2538: LD_INT 3
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PPUSH
2545: CALL_OW 69
2549: PUSH
2550: FOR_IN
2551: IFFALSE 2630
// tmp := Insert ( tmp , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 5
2562: PPUSH
2563: LD_INT 1
2565: PPUSH
2566: LD_VAR 0 4
2570: PPUSH
2571: CALL_OW 266
2575: PUSH
2576: LD_VAR 0 4
2580: PPUSH
2581: CALL_OW 250
2585: PUSH
2586: LD_VAR 0 4
2590: PPUSH
2591: CALL_OW 251
2595: PUSH
2596: LD_VAR 0 4
2600: PPUSH
2601: CALL_OW 254
2605: PUSH
2606: LD_VAR 0 4
2610: PPUSH
2611: CALL_OW 256
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: PPUSH
2623: CALL_OW 2
2627: ST_TO_ADDR
2628: GO 2550
2630: POP
2631: POP
// SaveVariable ( tmp diff 0 , 09_ovsyenko_base ) ;
2632: LD_VAR 0 5
2636: PUSH
2637: LD_INT 0
2639: DIFF
2640: PPUSH
2641: LD_STRING 09_ovsyenko_base
2643: PPUSH
2644: CALL_OW 39
// ChangeMap ( 1 , __am/09_cont ) ;
2648: LD_INT 1
2650: PPUSH
2651: LD_STRING __am/09_cont
2653: PPUSH
2654: CALL_OW 340
// ingame_video = false ;
2658: LD_ADDR_OWVAR 52
2662: PUSH
2663: LD_INT 0
2665: ST_TO_ADDR
// interface_hidden = false ;
2666: LD_ADDR_OWVAR 54
2670: PUSH
2671: LD_INT 0
2673: ST_TO_ADDR
// end ;
2674: LD_VAR 0 1
2678: RET
// every 0 0$1 do var i , filter ;
2679: GO 2681
2681: DISABLE
2682: LD_INT 0
2684: PPUSH
2685: PPUSH
// begin enable ;
2686: ENABLE
// filter := Yakotich ^ FilterAllUnits ( [ f_side , 4 ] ) diff Sikorski ;
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: LD_EXP 2
2696: PUSH
2697: LD_INT 22
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PPUSH
2707: CALL_OW 69
2711: ADD
2712: PUSH
2713: LD_EXP 7
2717: DIFF
2718: ST_TO_ADDR
// for i in filter do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_VAR 0 2
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2761
// if GetLives ( i ) < 1000 then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 256
2741: PUSH
2742: LD_INT 1000
2744: LESS
2745: IFFALSE 2759
// SetLives ( i , 1000 ) ;
2747: LD_VAR 0 1
2751: PPUSH
2752: LD_INT 1000
2754: PPUSH
2755: CALL_OW 234
2759: GO 2729
2761: POP
2762: POP
// end ;
2763: PPOPN 2
2765: END
