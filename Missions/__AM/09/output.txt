// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 25 0 0
// PrepareRussian ;
  12: CALL 54 0 0
// PrepareAmerican ;
  16: CALL 765 0 0
// Action ;
  20: CALL 1336 0 0
// end ;
  24: END
// export debug ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 49
// FogOff ( 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: CALL_OW 344
// end ; end_of_file
  49: LD_VAR 0 1
  53: RET
// export Yakotich , Platonov , Rusole ; export function PrepareRussian ; var i , un , d , rusol ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
  60: PPUSH
// uc_side := 3 ;
  61: LD_ADDR_OWVAR 20
  65: PUSH
  66: LD_INT 3
  68: ST_TO_ADDR
// uc_nation := 3 ;
  69: LD_ADDR_OWVAR 21
  73: PUSH
  74: LD_INT 3
  76: ST_TO_ADDR
// SetBName ( ru_dep , ovsyenko ) ;
  77: LD_INT 74
  79: PPUSH
  80: LD_STRING ovsyenko
  82: PPUSH
  83: CALL_OW 500
// SetResourceType ( GetBase ( ru_dep ) , 3 , 200 ) ;
  87: LD_INT 74
  89: PPUSH
  90: CALL_OW 274
  94: PPUSH
  95: LD_INT 3
  97: PPUSH
  98: LD_INT 200
 100: PPUSH
 101: CALL_OW 277
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
 105: LD_ADDR_EXP 3
 109: PUSH
 110: LD_STRING Platonov
 112: PPUSH
 113: LD_INT 0
 115: PPUSH
 116: LD_STRING 
 118: PPUSH
 119: CALL 1273 0 3
 123: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
 124: LD_ADDR_VAR 0 2
 128: PUSH
 129: LD_INT 22
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: PUSH
 139: LD_INT 30
 141: PUSH
 142: LD_INT 31
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: PPUSH
 153: CALL_OW 69
 157: PUSH
 158: FOR_IN
 159: IFFALSE 275
// begin PrepareHuman ( false , 1 , 0 ) ;
 161: LD_INT 0
 163: PPUSH
 164: LD_INT 1
 166: PPUSH
 167: LD_INT 0
 169: PPUSH
 170: CALL_OW 380
// un := CreateHuman ;
 174: LD_ADDR_VAR 0 3
 178: PUSH
 179: CALL_OW 44
 183: ST_TO_ADDR
// SetLives ( un , 500 ) ;
 184: LD_VAR 0 3
 188: PPUSH
 189: LD_INT 500
 191: PPUSH
 192: CALL_OW 234
// if GetDir ( i ) > 3 then
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 254
 205: PUSH
 206: LD_INT 3
 208: GREATER
 209: IFFALSE 236
// SetDir ( un , GetDir ( i ) - 3 ) else
 211: LD_VAR 0 3
 215: PPUSH
 216: LD_VAR 0 2
 220: PPUSH
 221: CALL_OW 254
 225: PUSH
 226: LD_INT 3
 228: MINUS
 229: PPUSH
 230: CALL_OW 233
 234: GO 259
// SetDir ( un , GetDir ( i ) + 3 ) ;
 236: LD_VAR 0 3
 240: PPUSH
 241: LD_VAR 0 2
 245: PPUSH
 246: CALL_OW 254
 250: PUSH
 251: LD_INT 3
 253: PLUS
 254: PPUSH
 255: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 259: LD_VAR 0 3
 263: PPUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 52
// end ;
 273: GO 158
 275: POP
 276: POP
// for i = 1 to 2 do
 277: LD_ADDR_VAR 0 2
 281: PUSH
 282: DOUBLE
 283: LD_INT 1
 285: DEC
 286: ST_TO_ADDR
 287: LD_INT 2
 289: PUSH
 290: FOR_TO
 291: IFFALSE 330
// begin PrepareHuman ( sex_male , 2 , 10 ) ;
 293: LD_INT 1
 295: PPUSH
 296: LD_INT 2
 298: PPUSH
 299: LD_INT 10
 301: PPUSH
 302: CALL_OW 380
// un := CreateHuman ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: CALL_OW 44
 315: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep ) ;
 316: LD_VAR 0 3
 320: PPUSH
 321: LD_INT 74
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 290
 330: POP
 331: POP
// for i = 1 to 3 do
 332: LD_ADDR_VAR 0 2
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_INT 3
 344: PUSH
 345: FOR_TO
 346: IFFALSE 401
// begin PrepareHuman ( sex_male , 1 , 7 ) ;
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 1
 353: PPUSH
 354: LD_INT 7
 356: PPUSH
 357: CALL_OW 380
// rusol := CreateHuman ;
 361: LD_ADDR_VAR 0 5
 365: PUSH
 366: CALL_OW 44
 370: ST_TO_ADDR
// PlaceHumanInUnit ( rusol , ru_dep ) ;
 371: LD_VAR 0 5
 375: PPUSH
 376: LD_INT 74
 378: PPUSH
 379: CALL_OW 52
// rusole := rusole ^ rusol ;
 383: LD_ADDR_EXP 4
 387: PUSH
 388: LD_EXP 4
 392: PUSH
 393: LD_VAR 0 5
 397: ADD
 398: ST_TO_ADDR
// end ;
 399: GO 345
 401: POP
 402: POP
// Yakotich = PrepareUnit ( Yakotich , false ,  ) ;
 403: LD_ADDR_EXP 2
 407: PUSH
 408: LD_STRING Yakotich
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: LD_STRING 
 416: PPUSH
 417: CALL 1273 0 3
 421: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , ru_dep ) ;
 422: LD_EXP 2
 426: PPUSH
 427: LD_INT 74
 429: PPUSH
 430: CALL_OW 52
// end ;
 434: LD_VAR 0 1
 438: RET
// export function Transport ( eng_list , cargo_list ) ; var i ; begin
 439: LD_INT 0
 441: PPUSH
 442: PPUSH
// for i = 1 to eng_list do
 443: LD_ADDR_VAR 0 4
 447: PUSH
 448: DOUBLE
 449: LD_INT 1
 451: DEC
 452: ST_TO_ADDR
 453: LD_VAR 0 1
 457: PUSH
 458: FOR_TO
 459: IFFALSE 584
// begin AddComTransport ( eng_list [ i ] , ru_dep , 3 ) ;
 461: LD_VAR 0 1
 465: PUSH
 466: LD_VAR 0 4
 470: ARRAY
 471: PPUSH
 472: LD_INT 74
 474: PPUSH
 475: LD_INT 3
 477: PPUSH
 478: CALL_OW 211
// AddComWait ( eng_list [ i ] , 0 0$1 ) ;
 482: LD_VAR 0 1
 486: PUSH
 487: LD_VAR 0 4
 491: ARRAY
 492: PPUSH
 493: LD_INT 35
 495: PPUSH
 496: CALL_OW 202
// AddTaskList ( eng_list [ i ] , [ [ 5 , GetX ( cargo_list [ i ] ) , GetY ( cargo_list [ i ] ) , cargo_list [ i ] , 0 , 0 , 0 ] ] ) ;
 500: LD_VAR 0 1
 504: PUSH
 505: LD_VAR 0 4
 509: ARRAY
 510: PPUSH
 511: LD_STRING 5
 513: PUSH
 514: LD_VAR 0 2
 518: PUSH
 519: LD_VAR 0 4
 523: ARRAY
 524: PPUSH
 525: CALL_OW 250
 529: PUSH
 530: LD_VAR 0 2
 534: PUSH
 535: LD_VAR 0 4
 539: ARRAY
 540: PPUSH
 541: CALL_OW 251
 545: PUSH
 546: LD_VAR 0 2
 550: PUSH
 551: LD_VAR 0 4
 555: ARRAY
 556: PUSH
 557: LD_INT 0
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: PUSH
 575: EMPTY
 576: LIST
 577: PPUSH
 578: CALL_OW 447
// end ;
 582: GO 458
 584: POP
 585: POP
// end ;
 586: LD_VAR 0 3
 590: RET
// export Posily , Robotniki ; export function RusPosily ; var i , rusol ; begin
 591: LD_INT 0
 593: PPUSH
 594: PPUSH
 595: PPUSH
// uc_side := 3 ;
 596: LD_ADDR_OWVAR 20
 600: PUSH
 601: LD_INT 3
 603: ST_TO_ADDR
// uc_nation := 3 ;
 604: LD_ADDR_OWVAR 21
 608: PUSH
 609: LD_INT 3
 611: ST_TO_ADDR
// for i = 1 to 5 do
 612: LD_ADDR_VAR 0 2
 616: PUSH
 617: DOUBLE
 618: LD_INT 1
 620: DEC
 621: ST_TO_ADDR
 622: LD_INT 5
 624: PUSH
 625: FOR_TO
 626: IFFALSE 684
// begin PrepareHuman ( false , 1 , 7 ) ;
 628: LD_INT 0
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 7
 636: PPUSH
 637: CALL_OW 380
// rusol := CreateHuman ;
 641: LD_ADDR_VAR 0 3
 645: PUSH
 646: CALL_OW 44
 650: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 651: LD_VAR 0 3
 655: PPUSH
 656: LD_INT 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// posily := posily ^ rusol ;
 666: LD_ADDR_EXP 5
 670: PUSH
 671: LD_EXP 5
 675: PUSH
 676: LD_VAR 0 3
 680: ADD
 681: ST_TO_ADDR
// end ;
 682: GO 625
 684: POP
 685: POP
// for i = 1 to 3 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 3
 698: PUSH
 699: FOR_TO
 700: IFFALSE 758
// begin PrepareHuman ( false , 2 , 7 ) ;
 702: LD_INT 0
 704: PPUSH
 705: LD_INT 2
 707: PPUSH
 708: LD_INT 7
 710: PPUSH
 711: CALL_OW 380
// rusol := CreateHuman ;
 715: LD_ADDR_VAR 0 3
 719: PUSH
 720: CALL_OW 44
 724: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 725: LD_VAR 0 3
 729: PPUSH
 730: LD_INT 2
 732: PPUSH
 733: LD_INT 0
 735: PPUSH
 736: CALL_OW 49
// robotniki := robotniki ^ rusol ;
 740: LD_ADDR_EXP 6
 744: PUSH
 745: LD_EXP 6
 749: PUSH
 750: LD_VAR 0 3
 754: ADD
 755: ST_TO_ADDR
// end ;
 756: GO 699
 758: POP
 759: POP
// end ; end_of_file
 760: LD_VAR 0 1
 764: RET
// export Sikorski , Bobby , Cyrus , Gary ; export function PrepareAmerican ; var tmp , i ; begin
 765: LD_INT 0
 767: PPUSH
 768: PPUSH
 769: PPUSH
// uc_side := 4 ;
 770: LD_ADDR_OWVAR 20
 774: PUSH
 775: LD_INT 4
 777: ST_TO_ADDR
// uc_nation := 1 ;
 778: LD_ADDR_OWVAR 21
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_STRING Sikorski
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: LD_STRING 
 799: PPUSH
 800: CALL 1273 0 3
 804: ST_TO_ADDR
// PlaceUnitXY ( Sikorski , 98 , 97 , false ) ;
 805: LD_EXP 7
 809: PPUSH
 810: LD_INT 98
 812: PPUSH
 813: LD_INT 97
 815: PPUSH
 816: LD_INT 0
 818: PPUSH
 819: CALL_OW 48
// Gary := PrepareUnit ( Gary , false ,  ) ;
 823: LD_ADDR_EXP 10
 827: PUSH
 828: LD_STRING Gary
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: LD_STRING 
 836: PPUSH
 837: CALL 1273 0 3
 841: ST_TO_ADDR
// tmp := Gary ;
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: LD_EXP 10
 851: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 08_ ) ;
 852: LD_ADDR_EXP 8
 856: PUSH
 857: LD_STRING Bobby
 859: PPUSH
 860: LD_EXP 1
 864: NOT
 865: PPUSH
 866: LD_STRING 08_
 868: PPUSH
 869: CALL 1273 0 3
 873: ST_TO_ADDR
// if not Bobby then
 874: LD_EXP 8
 878: NOT
 879: IFFALSE 903
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 881: LD_ADDR_EXP 8
 885: PUSH
 886: LD_STRING Bobby
 888: PPUSH
 889: LD_EXP 1
 893: NOT
 894: PPUSH
 895: LD_STRING 03_
 897: PPUSH
 898: CALL 1273 0 3
 902: ST_TO_ADDR
// if Bobby then
 903: LD_EXP 8
 907: IFFALSE 925
// tmp := tmp ^ Bobby ;
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_EXP 8
 923: ADD
 924: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 08_ ) ;
 925: LD_ADDR_EXP 9
 929: PUSH
 930: LD_STRING Cyrus
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_STRING 08_
 941: PPUSH
 942: CALL 1273 0 3
 946: ST_TO_ADDR
// if not Cyrus then
 947: LD_EXP 9
 951: NOT
 952: IFFALSE 976
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 954: LD_ADDR_EXP 9
 958: PUSH
 959: LD_STRING Cyrus
 961: PPUSH
 962: LD_EXP 1
 966: NOT
 967: PPUSH
 968: LD_STRING 03_
 970: PPUSH
 971: CALL 1273 0 3
 975: ST_TO_ADDR
// tmp := tmp ^ CreateCharacterSet ( 03_others ) ;
 976: LD_ADDR_VAR 0 2
 980: PUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_STRING 03_others
 988: PPUSH
 989: CALL_OW 31
 993: ADD
 994: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 995: LD_STRING 03_others
 997: PPUSH
 998: CALL_OW 40
// if UnitFilter ( tmp , [ f_sex , sex_female ] ) = 0 then
1002: LD_VAR 0 2
1006: PPUSH
1007: LD_INT 26
1009: PUSH
1010: LD_INT 2
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL_OW 72
1021: PUSH
1022: LD_INT 0
1024: EQUAL
1025: IFFALSE 1097
// begin PrepareHuman ( sex_female , 1 , 5 ) ;
1027: LD_INT 2
1029: PPUSH
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 5
1035: PPUSH
1036: CALL_OW 380
// hc_name := Julia  & profile_name & s ;
1040: LD_ADDR_OWVAR 26
1044: PUSH
1045: LD_STRING Julia 
1047: PUSH
1048: LD_OWVAR 78
1052: STR
1053: PUSH
1054: LD_STRING s
1056: STR
1057: ST_TO_ADDR
// hc_gallery :=  ;
1058: LD_ADDR_OWVAR 33
1062: PUSH
1063: LD_STRING 
1065: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
1066: LD_ADDR_OWVAR 29
1070: PUSH
1071: LD_INT 12
1073: PUSH
1074: LD_INT 12
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
1081: LD_ADDR_VAR 0 2
1085: PUSH
1086: LD_VAR 0 2
1090: PUSH
1091: CALL_OW 44
1095: ADD
1096: ST_TO_ADDR
// end ; if tmp < 9 then
1097: LD_VAR 0 2
1101: PUSH
1102: LD_INT 9
1104: LESS
1105: IFFALSE 1202
// begin InitHc ;
1107: CALL_OW 19
// for i = tmp to 9 do
1111: LD_ADDR_VAR 0 3
1115: PUSH
1116: DOUBLE
1117: LD_VAR 0 2
1121: DEC
1122: ST_TO_ADDR
1123: LD_INT 9
1125: PUSH
1126: FOR_TO
1127: IFFALSE 1200
// begin if UnitFilter ( tmp , [ f_class , 4 ] ) = 0 then
1129: LD_VAR 0 2
1133: PPUSH
1134: LD_INT 25
1136: PUSH
1137: LD_INT 4
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PPUSH
1144: CALL_OW 72
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: IFFALSE 1169
// PrepareHuman ( sex_male , 4 , 5 ) else
1154: LD_INT 1
1156: PPUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_INT 5
1162: PPUSH
1163: CALL_OW 380
1167: GO 1182
// PrepareHuman ( false , 1 , 5 ) ;
1169: LD_INT 0
1171: PPUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 5
1177: PPUSH
1178: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 2
1191: PUSH
1192: CALL_OW 44
1196: ADD
1197: ST_TO_ADDR
// end ;
1198: GO 1126
1200: POP
1201: POP
// end ; for i in tmp do
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: LD_VAR 0 2
1211: PUSH
1212: FOR_IN
1213: IFFALSE 1266
// begin if GetClass ( i ) in [ 2 , 3 ] then
1215: LD_VAR 0 3
1219: PPUSH
1220: CALL_OW 257
1224: PUSH
1225: LD_INT 2
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: IN
1235: IFFALSE 1249
// SetClass ( i , 1 ) ;
1237: LD_VAR 0 3
1241: PPUSH
1242: LD_INT 1
1244: PPUSH
1245: CALL_OW 336
// PlaceUnitArea ( i , area_start , false ) ;
1249: LD_VAR 0 3
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 49
// end ;
1264: GO 1212
1266: POP
1267: POP
// end ; end_of_file
1268: LD_VAR 0 1
1272: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1273: LD_INT 0
1275: PPUSH
1276: PPUSH
// if exist_mode then
1277: LD_VAR 0 2
1281: IFFALSE 1306
// unit := CreateCharacter ( prefix & ident ) else
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 3
1292: PUSH
1293: LD_VAR 0 1
1297: STR
1298: PPUSH
1299: CALL_OW 34
1303: ST_TO_ADDR
1304: GO 1321
// unit := NewCharacter ( ident ) ;
1306: LD_ADDR_VAR 0 5
1310: PUSH
1311: LD_VAR 0 1
1315: PPUSH
1316: CALL_OW 25
1320: ST_TO_ADDR
// result := unit ;
1321: LD_ADDR_VAR 0 4
1325: PUSH
1326: LD_VAR 0 5
1330: ST_TO_ADDR
// end ; end_of_file
1331: LD_VAR 0 4
1335: RET
// export function Action ; var x , y , i , tmp , t , engs , un , speaker ; begin
1336: LD_INT 0
1338: PPUSH
1339: PPUSH
1340: PPUSH
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
1346: PPUSH
// ingame_video = true ;
1347: LD_ADDR_OWVAR 52
1351: PUSH
1352: LD_INT 1
1354: ST_TO_ADDR
// interface_hidden = true ;
1355: LD_ADDR_OWVAR 54
1359: PUSH
1360: LD_INT 1
1362: ST_TO_ADDR
// x := 101 ;
1363: LD_ADDR_VAR 0 2
1367: PUSH
1368: LD_INT 101
1370: ST_TO_ADDR
// y := 116 ;
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: LD_INT 116
1378: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
1379: LD_VAR 0 2
1383: PPUSH
1384: LD_VAR 0 3
1388: PPUSH
1389: LD_INT 1
1391: PPUSH
1392: LD_INT 30
1394: NEG
1395: PPUSH
1396: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
1400: LD_VAR 0 2
1404: PPUSH
1405: LD_VAR 0 3
1409: PPUSH
1410: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
1414: LD_ADDR_VAR 0 5
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 4
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 21
1431: PUSH
1432: LD_INT 1
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: EMPTY
1440: LIST
1441: LIST
1442: PPUSH
1443: CALL_OW 69
1447: PUSH
1448: LD_EXP 7
1452: DIFF
1453: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
1454: LD_VAR 0 5
1458: PPUSH
1459: LD_INT 111
1461: PPUSH
1462: LD_INT 125
1464: PPUSH
1465: CALL_OW 178
// wait ( 0 0$02 ) ;
1469: LD_INT 70
1471: PPUSH
1472: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
1476: LD_EXP 7
1480: PPUSH
1481: LD_INT 105
1483: PPUSH
1484: LD_INT 111
1486: PPUSH
1487: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
1491: LD_VAR 0 5
1495: PPUSH
1496: LD_INT 108
1498: PPUSH
1499: LD_INT 117
1501: PPUSH
1502: CALL_OW 114
// Say ( Sikorski , D1-Sik-2 ) ;
1506: LD_EXP 7
1510: PPUSH
1511: LD_STRING D1-Sik-2
1513: PPUSH
1514: CALL_OW 88
// music_class := 1 ;
1518: LD_ADDR_OWVAR 72
1522: PUSH
1523: LD_INT 1
1525: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
1526: LD_INT 35
1528: PPUSH
1529: CALL_OW 67
// until See ( 3 , Sikorski ) ;
1533: LD_INT 3
1535: PPUSH
1536: LD_EXP 7
1540: PPUSH
1541: CALL_OW 292
1545: IFFALSE 1526
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
1547: LD_ADDR_VAR 0 8
1551: PUSH
1552: LD_INT 30
1554: PUSH
1555: LD_INT 31
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: PPUSH
1567: LD_EXP 7
1571: PPUSH
1572: CALL_OW 74
1576: PPUSH
1577: CALL_OW 313
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
1586: LD_VAR 0 8
1590: PPUSH
1591: LD_EXP 7
1595: PPUSH
1596: CALL_OW 175
// wait ( 0 0$4 ) ;
1600: LD_INT 140
1602: PPUSH
1603: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
1607: LD_INT 111
1609: PPUSH
1610: LD_INT 116
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
1620: LD_INT 35
1622: PPUSH
1623: CALL_OW 67
// until IsDying ( un ) ;
1627: LD_VAR 0 8
1631: PPUSH
1632: CALL_OW 303
1636: IFFALSE 1620
// DoNotAttack ( 3 , Sikorski ) ;
1638: LD_INT 3
1640: PPUSH
1641: LD_EXP 7
1645: PPUSH
1646: CALL_OW 471
// ComExitBuilding ( rusole ) ;
1650: LD_EXP 4
1654: PPUSH
1655: CALL_OW 122
// AddComAgressiveMove ( rusole , 106 , 114 ) ;
1659: LD_EXP 4
1663: PPUSH
1664: LD_INT 106
1666: PPUSH
1667: LD_INT 114
1669: PPUSH
1670: CALL_OW 174
// Say ( Yakotich , D1-Rus1-1 ) ;
1674: LD_EXP 2
1678: PPUSH
1679: LD_STRING D1-Rus1-1
1681: PPUSH
1682: CALL_OW 88
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
1686: LD_EXP 7
1690: PPUSH
1691: LD_INT 110
1693: PPUSH
1694: LD_INT 120
1696: PPUSH
1697: CALL_OW 171
// ComMoveXY ( tmp , 109 , 119 ) ;
1701: LD_VAR 0 5
1705: PPUSH
1706: LD_INT 109
1708: PPUSH
1709: LD_INT 119
1711: PPUSH
1712: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
1716: LD_VAR 0 5
1720: PPUSH
1721: LD_INT 111
1723: PPUSH
1724: LD_INT 125
1726: PPUSH
1727: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
1731: LD_EXP 2
1735: PPUSH
1736: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
1740: LD_EXP 2
1744: PPUSH
1745: LD_EXP 7
1749: PPUSH
1750: CALL_OW 175
// Say ( Sikorski , D1-Sik-1 ) ;
1754: LD_EXP 7
1758: PPUSH
1759: LD_STRING D1-Sik-1
1761: PPUSH
1762: CALL_OW 88
// SayEffect ( D1-smrtsikora ) ;
1766: LD_STRING D1-smrtsikora
1768: PPUSH
1769: CALL_OW 96
// KillUnit ( Sikorski ) ;
1773: LD_EXP 7
1777: PPUSH
1778: CALL_OW 66
// wait ( 0 0$1 ) ;
1782: LD_INT 35
1784: PPUSH
1785: CALL_OW 67
// engs := FilterAllUnits ( [ f_class , 2 ] ) ;
1789: LD_ADDR_VAR 0 7
1793: PUSH
1794: LD_INT 25
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PPUSH
1804: CALL_OW 69
1808: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
1809: LD_VAR 0 7
1813: PPUSH
1814: CALL_OW 122
// for i = 1 to engs do
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: DOUBLE
1824: LD_INT 1
1826: DEC
1827: ST_TO_ADDR
1828: LD_VAR 0 7
1832: PUSH
1833: FOR_TO
1834: IFFALSE 1874
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
1836: LD_VAR 0 7
1840: PUSH
1841: LD_VAR 0 4
1845: ARRAY
1846: PPUSH
1847: LD_INT 34
1849: PUSH
1850: LD_INT 51
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: PUSH
1862: LD_VAR 0 4
1866: ARRAY
1867: PPUSH
1868: CALL_OW 180
1872: GO 1833
1874: POP
1875: POP
// AddComMoveXY ( engs , 148 , 208 ) ;
1876: LD_VAR 0 7
1880: PPUSH
1881: LD_INT 148
1883: PPUSH
1884: LD_INT 208
1886: PPUSH
1887: CALL_OW 171
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
1891: LD_EXP 2
1895: PPUSH
1896: LD_INT 148
1898: PPUSH
1899: LD_INT 208
1901: PPUSH
1902: CALL_OW 171
// SetLives ( Yakotich , 1000 ) ;
1906: LD_EXP 2
1910: PPUSH
1911: LD_INT 1000
1913: PPUSH
1914: CALL_OW 234
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1918: LD_ADDR_VAR 0 8
1922: PUSH
1923: LD_INT 22
1925: PUSH
1926: LD_INT 3
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PUSH
1933: LD_INT 25
1935: PUSH
1936: LD_INT 1
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PPUSH
1947: CALL_OW 69
1951: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1952: LD_VAR 0 8
1956: PPUSH
1957: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
1961: LD_VAR 0 8
1965: PPUSH
1966: LD_INT 148
1968: PPUSH
1969: LD_INT 208
1971: PPUSH
1972: CALL_OW 171
// Wait ( 5 ) ;
1976: LD_INT 5
1978: PPUSH
1979: CALL_OW 67
// Say ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_female ] ] ) [ 1 ] , D1-FSol-1 ) ;
1983: LD_INT 22
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 26
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PPUSH
2007: CALL_OW 69
2011: PUSH
2012: LD_INT 1
2014: ARRAY
2015: PPUSH
2016: LD_STRING D1-FSol-1
2018: PPUSH
2019: CALL_OW 88
// ComMoveXY ( tmp , 106 , 112 ) ;
2023: LD_VAR 0 5
2027: PPUSH
2028: LD_INT 106
2030: PPUSH
2031: LD_INT 112
2033: PPUSH
2034: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
2038: LD_VAR 0 5
2042: PPUSH
2043: LD_INT 111
2045: PPUSH
2046: LD_INT 125
2048: PPUSH
2049: CALL_OW 178
// wait ( 0 0$7 ) ;
2053: LD_INT 245
2055: PPUSH
2056: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
2060: LD_ADDR_VAR 0 6
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 117
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 115
2077: PUSH
2078: LD_INT 123
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 114
2087: PUSH
2088: LD_INT 126
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 111
2097: PUSH
2098: LD_INT 122
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 112
2107: PUSH
2108: LD_INT 126
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 117
2117: PUSH
2118: LD_INT 130
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 106
2127: PUSH
2128: LD_INT 127
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 111
2137: PUSH
2138: LD_INT 117
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 98
2147: PUSH
2148: LD_INT 119
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 116
2157: PUSH
2158: LD_INT 131
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 109
2167: PUSH
2168: LD_INT 129
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 100
2177: PUSH
2178: LD_INT 113
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// for i in t do
2199: LD_ADDR_VAR 0 4
2203: PUSH
2204: LD_VAR 0 6
2208: PUSH
2209: FOR_IN
2210: IFFALSE 2246
// begin wait ( 0 0$0.3 ) ;
2212: LD_INT 10
2214: PPUSH
2215: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
2219: LD_VAR 0 4
2223: PUSH
2224: LD_INT 1
2226: ARRAY
2227: PPUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 2
2235: ARRAY
2236: PPUSH
2237: LD_INT 1
2239: PPUSH
2240: CALL_OW 453
// end ;
2244: GO 2209
2246: POP
2247: POP
// ComMoveXY ( tmp , 109 , 124 ) ;
2248: LD_VAR 0 5
2252: PPUSH
2253: LD_INT 109
2255: PPUSH
2256: LD_INT 124
2258: PPUSH
2259: CALL_OW 111
// music_class := 0 ;
2263: LD_ADDR_OWVAR 72
2267: PUSH
2268: LD_INT 0
2270: ST_TO_ADDR
// wait ( 0 0$4 ) ;
2271: LD_INT 140
2273: PPUSH
2274: CALL_OW 67
// speaker = FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_male ] ] ) diff [ Gary , Bobby , Cyrus ] ;
2278: LD_ADDR_VAR 0 9
2282: PUSH
2283: LD_INT 22
2285: PUSH
2286: LD_INT 4
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PUSH
2293: LD_INT 26
2295: PUSH
2296: LD_INT 1
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PPUSH
2307: CALL_OW 69
2311: PUSH
2312: LD_EXP 10
2316: PUSH
2317: LD_EXP 8
2321: PUSH
2322: LD_EXP 9
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: LIST
2331: DIFF
2332: ST_TO_ADDR
// Say ( speaker [ 1 ] , D1-Sol-1 ) ;
2333: LD_VAR 0 9
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: PPUSH
2342: LD_STRING D1-Sol-1
2344: PPUSH
2345: CALL_OW 88
// wait ( 0 0$2 ) ;
2349: LD_INT 70
2351: PPUSH
2352: CALL_OW 67
// PlaceSeeing ( 148 , 208 , 1 , - 30 ) ;
2356: LD_INT 148
2358: PPUSH
2359: LD_INT 208
2361: PPUSH
2362: LD_INT 1
2364: PPUSH
2365: LD_INT 30
2367: NEG
2368: PPUSH
2369: CALL_OW 330
// wait ( 0 0$1 ) ;
2373: LD_INT 35
2375: PPUSH
2376: CALL_OW 67
// Say ( Yakotich , D1a-Rus1-1 ) ;
2380: LD_EXP 2
2384: PPUSH
2385: LD_STRING D1a-Rus1-1
2387: PPUSH
2388: CALL_OW 88
// RusPosily ;
2392: CALL 591 0 0
// ComMoveXY ( posily , 148 , 208 ) ;
2396: LD_EXP 5
2400: PPUSH
2401: LD_INT 148
2403: PPUSH
2404: LD_INT 208
2406: PPUSH
2407: CALL_OW 111
// ComBuild ( robotniki , b_depot , 144 , 207 , 2 ) ;
2411: LD_EXP 6
2415: PPUSH
2416: LD_INT 0
2418: PPUSH
2419: LD_INT 144
2421: PPUSH
2422: LD_INT 207
2424: PPUSH
2425: LD_INT 2
2427: PPUSH
2428: CALL_OW 145
// CenterOnXY ( 148 , 208 ) ;
2432: LD_INT 148
2434: PPUSH
2435: LD_INT 208
2437: PPUSH
2438: CALL_OW 84
// SayRadio ( Platonov , D1a-Pla-1 ) ;
2442: LD_EXP 3
2446: PPUSH
2447: LD_STRING D1a-Pla-1
2449: PPUSH
2450: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1a ) ;
2454: LD_EXP 3
2458: PPUSH
2459: LD_STRING D1a-Pla-1a
2461: PPUSH
2462: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1b ) ;
2466: LD_EXP 3
2470: PPUSH
2471: LD_STRING D1a-Pla-1b
2473: PPUSH
2474: CALL_OW 94
// Say ( Yakotich , D1a-Rus1-2 ) ;
2478: LD_EXP 2
2482: PPUSH
2483: LD_STRING D1a-Rus1-2
2485: PPUSH
2486: CALL_OW 88
// wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// SaveCharacters ( tmp diff [ Gary , Bobby , Cyrus ] , 09_prev_squad ) ;
2497: LD_VAR 0 5
2501: PUSH
2502: LD_EXP 10
2506: PUSH
2507: LD_EXP 8
2511: PUSH
2512: LD_EXP 9
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: DIFF
2522: PPUSH
2523: LD_STRING 09_prev_squad
2525: PPUSH
2526: CALL_OW 38
// tmp := [ ] ;
2530: LD_ADDR_VAR 0 5
2534: PUSH
2535: EMPTY
2536: ST_TO_ADDR
// for i in FilterUnitsInArea ( ovsyenko_base , [ f_type , unit_building ] ) do
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 3
2544: PPUSH
2545: LD_INT 21
2547: PUSH
2548: LD_INT 3
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: PPUSH
2555: CALL_OW 70
2559: PUSH
2560: FOR_IN
2561: IFFALSE 2646
// tmp := Replace ( tmp , tmp + 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
2563: LD_ADDR_VAR 0 5
2567: PUSH
2568: LD_VAR 0 5
2572: PPUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_INT 1
2580: PLUS
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: CALL_OW 266
2591: PUSH
2592: LD_VAR 0 4
2596: PPUSH
2597: CALL_OW 250
2601: PUSH
2602: LD_VAR 0 4
2606: PPUSH
2607: CALL_OW 251
2611: PUSH
2612: LD_VAR 0 4
2616: PPUSH
2617: CALL_OW 254
2621: PUSH
2622: LD_VAR 0 4
2626: PPUSH
2627: CALL_OW 256
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 1
2643: ST_TO_ADDR
2644: GO 2560
2646: POP
2647: POP
// if not FilterUnitsInArea ( ovsyenko_base , [ f_btype , b_depot ] ) then
2648: LD_INT 3
2650: PPUSH
2651: LD_INT 30
2653: PUSH
2654: LD_INT 0
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PPUSH
2661: CALL_OW 70
2665: NOT
2666: IFFALSE 2714
// tmp := Replace ( tmp , tmp + 1 , [ b_depot , 102 , 118 , 5 , 350 ] ) ;
2668: LD_ADDR_VAR 0 5
2672: PUSH
2673: LD_VAR 0 5
2677: PPUSH
2678: LD_VAR 0 5
2682: PUSH
2683: LD_INT 1
2685: PLUS
2686: PPUSH
2687: LD_INT 0
2689: PUSH
2690: LD_INT 102
2692: PUSH
2693: LD_INT 118
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: LD_INT 350
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 1
2713: ST_TO_ADDR
// SaveVariable ( tmp , 09_ovsyenko_base ) ;
2714: LD_VAR 0 5
2718: PPUSH
2719: LD_STRING 09_ovsyenko_base
2721: PPUSH
2722: CALL_OW 39
// ChangeMap ( 1 , __am\09_cont ) ;
2726: LD_INT 1
2728: PPUSH
2729: LD_STRING __am\09_cont
2731: PPUSH
2732: CALL_OW 340
// ingame_video = false ;
2736: LD_ADDR_OWVAR 52
2740: PUSH
2741: LD_INT 0
2743: ST_TO_ADDR
// interface_hidden = false ;
2744: LD_ADDR_OWVAR 54
2748: PUSH
2749: LD_INT 0
2751: ST_TO_ADDR
// end ;
2752: LD_VAR 0 1
2756: RET
// every 0 0$1 do var i , filter ;
2757: GO 2759
2759: DISABLE
2760: LD_INT 0
2762: PPUSH
2763: PPUSH
// begin enable ;
2764: ENABLE
// filter := Yakotich ^ FilterAllUnits ( [ f_side , 4 ] ) diff Sikorski ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_EXP 2
2774: PUSH
2775: LD_INT 22
2777: PUSH
2778: LD_INT 4
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PPUSH
2785: CALL_OW 69
2789: ADD
2790: PUSH
2791: LD_EXP 7
2795: DIFF
2796: ST_TO_ADDR
// for i in filter do
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_VAR 0 2
2806: PUSH
2807: FOR_IN
2808: IFFALSE 2839
// if GetLives ( i ) < 1000 then
2810: LD_VAR 0 1
2814: PPUSH
2815: CALL_OW 256
2819: PUSH
2820: LD_INT 1000
2822: LESS
2823: IFFALSE 2837
// SetLives ( i , 1000 ) ;
2825: LD_VAR 0 1
2829: PPUSH
2830: LD_INT 1000
2832: PPUSH
2833: CALL_OW 234
2837: GO 2807
2839: POP
2840: POP
// end ;
2841: PPOPN 2
2843: END
