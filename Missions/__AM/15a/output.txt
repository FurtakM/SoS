// starting begin ResetFog ;
   0: NOP4
// end ; end_of_file
   4: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
   5: GO 7
   7: DISABLE
// begin ru_radar := 98 ;
   8: NOP4
  12: PUSH
  13: LD_INT 98
  15: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
  16: NOP4
  20: PUSH
  21: LD_INT 89
  23: ST_TO_ADDR
// us_hack := 99 ;
  24: NOP4
  28: PUSH
  29: LD_INT 99
  31: ST_TO_ADDR
// us_artillery := 97 ;
  32: NOP4
  36: PUSH
  37: LD_INT 97
  39: ST_TO_ADDR
// ar_bio_bomb := 91 ;
  40: NOP4
  44: PUSH
  45: LD_INT 91
  47: ST_TO_ADDR
// end ; end_of_file
  48: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
  49: LD_INT 0
  51: PPUSH
  52: PPUSH
// skirmish := false ;
  53: NOP4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// debug_mc := false ;
  61: NOP4
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// mc_bases := [ ] ;
  69: NOP4
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// mc_sides := [ ] ;
  76: NOP4
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
  83: NOP4
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// mc_building_repairs := [ ] ;
  90: NOP4
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// mc_need_heal := [ ] ;
  97: NOP4
 101: PUSH
 102: EMPTY
 103: ST_TO_ADDR
// mc_healers := [ ] ;
 104: NOP4
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// mc_build_list := [ ] ;
 111: NOP4
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
 118: NOP4
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// mc_builders := [ ] ;
 125: NOP4
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// mc_construct_list := [ ] ;
 132: NOP4
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// mc_turret_list := [ ] ;
 139: NOP4
 143: PUSH
 144: EMPTY
 145: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
 146: NOP4
 150: PUSH
 151: EMPTY
 152: ST_TO_ADDR
// mc_miners := [ ] ;
 153: NOP4
 157: PUSH
 158: EMPTY
 159: ST_TO_ADDR
// mc_mines := [ ] ;
 160: NOP4
 164: PUSH
 165: EMPTY
 166: ST_TO_ADDR
// mc_minefields := [ ] ;
 167: NOP4
 171: PUSH
 172: EMPTY
 173: ST_TO_ADDR
// mc_crates := [ ] ;
 174: NOP4
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// mc_crates_collector := [ ] ;
 181: NOP4
 185: PUSH
 186: EMPTY
 187: ST_TO_ADDR
// mc_crates_area := [ ] ;
 188: NOP4
 192: PUSH
 193: EMPTY
 194: ST_TO_ADDR
// mc_vehicles := [ ] ;
 195: NOP4
 199: PUSH
 200: EMPTY
 201: ST_TO_ADDR
// mc_attack := [ ] ;
 202: NOP4
 206: PUSH
 207: EMPTY
 208: ST_TO_ADDR
// mc_produce := [ ] ;
 209: NOP4
 213: PUSH
 214: EMPTY
 215: ST_TO_ADDR
// mc_defender := [ ] ;
 216: NOP4
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// mc_parking := [ ] ;
 223: NOP4
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
 230: NOP4
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
 237: NOP4
 241: PUSH
 242: EMPTY
 243: ST_TO_ADDR
// mc_scan := [ ] ;
 244: NOP4
 248: PUSH
 249: EMPTY
 250: ST_TO_ADDR
// mc_scan_area := [ ] ;
 251: NOP4
 255: PUSH
 256: EMPTY
 257: ST_TO_ADDR
// mc_tech := [ ] ;
 258: NOP4
 262: PUSH
 263: EMPTY
 264: ST_TO_ADDR
// mc_class := [ ] ;
 265: NOP4
 269: PUSH
 270: EMPTY
 271: ST_TO_ADDR
// mc_class_case_use := [ ] ;
 272: NOP4
 276: PUSH
 277: EMPTY
 278: ST_TO_ADDR
// end ;
 279: LD_VAR 0 1
 283: RET
// export function MC_Kill ( base ) ; begin
 284: LD_INT 0
 286: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
 287: NOP4
 291: PUSH
 292: NOP4
 296: PPUSH
 297: NOP4
 301: PPUSH
 302: EMPTY
 303: PPUSH
 304: NOP4
 308: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
 309: NOP4
 313: PUSH
 314: NOP4
 318: PPUSH
 319: NOP4
 323: PPUSH
 324: EMPTY
 325: PPUSH
 326: NOP4
 330: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
 331: NOP4
 335: PUSH
 336: NOP4
 340: PPUSH
 341: NOP4
 345: PPUSH
 346: EMPTY
 347: PPUSH
 348: NOP4
 352: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
 353: NOP4
 357: PUSH
 358: NOP4
 362: PPUSH
 363: NOP4
 367: PPUSH
 368: EMPTY
 369: PPUSH
 370: NOP4
 374: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
 375: NOP4
 379: PUSH
 380: NOP4
 384: PPUSH
 385: NOP4
 389: PPUSH
 390: EMPTY
 391: PPUSH
 392: NOP4
 396: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
 397: NOP4
 401: PUSH
 402: NOP4
 406: PPUSH
 407: NOP4
 411: PPUSH
 412: EMPTY
 413: PPUSH
 414: NOP4
 418: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
 419: NOP4
 423: PUSH
 424: NOP4
 428: PPUSH
 429: NOP4
 433: PPUSH
 434: EMPTY
 435: PPUSH
 436: NOP4
 440: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
 441: NOP4
 445: PUSH
 446: NOP4
 450: PPUSH
 451: NOP4
 455: PPUSH
 456: EMPTY
 457: PPUSH
 458: NOP4
 462: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
 463: NOP4
 467: PUSH
 468: NOP4
 472: PPUSH
 473: NOP4
 477: PPUSH
 478: EMPTY
 479: PPUSH
 480: NOP4
 484: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
 485: NOP4
 489: PUSH
 490: NOP4
 494: PPUSH
 495: NOP4
 499: PPUSH
 500: EMPTY
 501: PPUSH
 502: NOP4
 506: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
 507: NOP4
 511: PUSH
 512: NOP4
 516: PPUSH
 517: NOP4
 521: PPUSH
 522: EMPTY
 523: PPUSH
 524: NOP4
 528: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
 529: NOP4
 533: PUSH
 534: NOP4
 538: PPUSH
 539: NOP4
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: NOP4
 551: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
 552: NOP4
 556: PUSH
 557: NOP4
 561: PPUSH
 562: NOP4
 566: PPUSH
 567: EMPTY
 568: PPUSH
 569: NOP4
 573: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
 574: NOP4
 578: PUSH
 579: NOP4
 583: PPUSH
 584: NOP4
 588: PPUSH
 589: EMPTY
 590: PPUSH
 591: NOP4
 595: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
 596: NOP4
 600: PUSH
 601: NOP4
 605: PPUSH
 606: NOP4
 610: PPUSH
 611: EMPTY
 612: PPUSH
 613: NOP4
 617: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
 618: NOP4
 622: PUSH
 623: NOP4
 627: PPUSH
 628: NOP4
 632: PPUSH
 633: EMPTY
 634: PPUSH
 635: NOP4
 639: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
 640: NOP4
 644: PUSH
 645: NOP4
 649: PPUSH
 650: NOP4
 654: PPUSH
 655: EMPTY
 656: PPUSH
 657: NOP4
 661: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
 662: NOP4
 666: PUSH
 667: NOP4
 671: PPUSH
 672: NOP4
 676: PPUSH
 677: EMPTY
 678: PPUSH
 679: NOP4
 683: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
 684: NOP4
 688: PUSH
 689: NOP4
 693: PPUSH
 694: NOP4
 698: PPUSH
 699: EMPTY
 700: PPUSH
 701: NOP4
 705: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
 706: NOP4
 710: PUSH
 711: NOP4
 715: PPUSH
 716: NOP4
 720: PPUSH
 721: EMPTY
 722: PPUSH
 723: NOP4
 727: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
 728: NOP4
 732: PUSH
 733: NOP4
 737: PPUSH
 738: NOP4
 742: PPUSH
 743: EMPTY
 744: PPUSH
 745: NOP4
 749: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
 750: NOP4
 754: PUSH
 755: NOP4
 759: PPUSH
 760: NOP4
 764: PPUSH
 765: EMPTY
 766: PPUSH
 767: NOP4
 771: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
 772: NOP4
 776: PUSH
 777: NOP4
 781: PPUSH
 782: NOP4
 786: PPUSH
 787: EMPTY
 788: PPUSH
 789: NOP4
 793: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
 794: NOP4
 798: PUSH
 799: NOP4
 803: PPUSH
 804: NOP4
 808: PPUSH
 809: EMPTY
 810: PPUSH
 811: NOP4
 815: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
 816: NOP4
 820: PUSH
 821: NOP4
 825: PPUSH
 826: NOP4
 830: PPUSH
 831: EMPTY
 832: PPUSH
 833: NOP4
 837: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
 838: NOP4
 842: PUSH
 843: NOP4
 847: PPUSH
 848: NOP4
 852: PPUSH
 853: EMPTY
 854: PPUSH
 855: NOP4
 859: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
 860: NOP4
 864: PUSH
 865: NOP4
 869: PPUSH
 870: NOP4
 874: PPUSH
 875: EMPTY
 876: PPUSH
 877: NOP4
 881: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
 882: NOP4
 886: PUSH
 887: NOP4
 891: PPUSH
 892: NOP4
 896: PPUSH
 897: EMPTY
 898: PPUSH
 899: NOP4
 903: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
 904: NOP4
 908: PUSH
 909: NOP4
 913: PPUSH
 914: NOP4
 918: PPUSH
 919: EMPTY
 920: PPUSH
 921: NOP4
 925: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
 926: NOP4
 930: PUSH
 931: NOP4
 935: PPUSH
 936: NOP4
 940: PPUSH
 941: EMPTY
 942: PPUSH
 943: NOP4
 947: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
 948: NOP4
 952: PUSH
 953: NOP4
 957: PPUSH
 958: NOP4
 962: PPUSH
 963: EMPTY
 964: PPUSH
 965: NOP4
 969: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
 970: NOP4
 974: PUSH
 975: NOP4
 979: PPUSH
 980: NOP4
 984: PPUSH
 985: EMPTY
 986: PPUSH
 987: NOP4
 991: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
 992: NOP4
 996: PUSH
 997: NOP4
1001: PPUSH
1002: NOP4
1006: PPUSH
1007: EMPTY
1008: PPUSH
1009: NOP4
1013: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
1014: NOP4
1018: PUSH
1019: NOP4
1023: PPUSH
1024: NOP4
1028: PPUSH
1029: EMPTY
1030: PPUSH
1031: NOP4
1035: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
1036: NOP4
1040: PUSH
1041: NOP4
1045: PPUSH
1046: NOP4
1050: PPUSH
1051: EMPTY
1052: PPUSH
1053: NOP4
1057: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
1058: NOP4
1062: PUSH
1063: NOP4
1067: PPUSH
1068: NOP4
1072: PPUSH
1073: EMPTY
1074: PPUSH
1075: NOP4
1079: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
1080: NOP4
1084: PUSH
1085: NOP4
1089: PPUSH
1090: NOP4
1094: PPUSH
1095: EMPTY
1096: PPUSH
1097: NOP4
1101: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
1102: NOP4
1106: PUSH
1107: NOP4
1111: PPUSH
1112: NOP4
1116: PPUSH
1117: EMPTY
1118: PPUSH
1119: NOP4
1123: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
1124: NOP4
1128: PUSH
1129: NOP4
1133: PPUSH
1134: NOP4
1138: PPUSH
1139: EMPTY
1140: PPUSH
1141: NOP4
1145: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
1146: NOP4
1150: PUSH
1151: NOP4
1155: PPUSH
1156: NOP4
1160: PPUSH
1161: EMPTY
1162: PPUSH
1163: NOP4
1167: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
1168: NOP4
1172: PUSH
1173: NOP4
1177: PPUSH
1178: NOP4
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: NOP4
1190: ST_TO_ADDR
// end ;
1191: LD_VAR 0 2
1195: RET
// export function MC_Add ( side , units ) ; var base ; begin
1196: LD_INT 0
1198: PPUSH
1199: PPUSH
// base := mc_bases + 1 ;
1200: NOP4
1204: PUSH
1205: NOP4
1209: PUSH
1210: LD_INT 1
1212: PLUS
1213: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
1214: NOP4
1218: PUSH
1219: NOP4
1223: PPUSH
1224: NOP4
1228: PPUSH
1229: NOP4
1233: PPUSH
1234: NOP4
1238: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
1239: NOP4
1243: PUSH
1244: NOP4
1248: PPUSH
1249: NOP4
1253: PPUSH
1254: NOP4
1258: PPUSH
1259: NOP4
1263: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
1264: NOP4
1268: PUSH
1269: NOP4
1273: PPUSH
1274: NOP4
1278: PPUSH
1279: EMPTY
1280: PPUSH
1281: NOP4
1285: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
1286: NOP4
1290: PUSH
1291: NOP4
1295: PPUSH
1296: NOP4
1300: PPUSH
1301: EMPTY
1302: PPUSH
1303: NOP4
1307: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
1308: NOP4
1312: PUSH
1313: NOP4
1317: PPUSH
1318: NOP4
1322: PPUSH
1323: EMPTY
1324: PPUSH
1325: NOP4
1329: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
1330: NOP4
1334: PUSH
1335: NOP4
1339: PPUSH
1340: NOP4
1344: PPUSH
1345: EMPTY
1346: PPUSH
1347: NOP4
1351: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
1352: NOP4
1356: PUSH
1357: NOP4
1361: PPUSH
1362: NOP4
1366: PPUSH
1367: EMPTY
1368: PPUSH
1369: NOP4
1373: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
1374: NOP4
1378: PUSH
1379: NOP4
1383: PPUSH
1384: NOP4
1388: PPUSH
1389: EMPTY
1390: PPUSH
1391: NOP4
1395: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
1396: NOP4
1400: PUSH
1401: NOP4
1405: PPUSH
1406: NOP4
1410: PPUSH
1411: EMPTY
1412: PPUSH
1413: NOP4
1417: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
1418: NOP4
1422: PUSH
1423: NOP4
1427: PPUSH
1428: NOP4
1432: PPUSH
1433: EMPTY
1434: PPUSH
1435: NOP4
1439: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
1440: NOP4
1444: PUSH
1445: NOP4
1449: PPUSH
1450: NOP4
1454: PPUSH
1455: EMPTY
1456: PPUSH
1457: NOP4
1461: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
1462: NOP4
1466: PUSH
1467: NOP4
1471: PPUSH
1472: NOP4
1476: PPUSH
1477: EMPTY
1478: PPUSH
1479: NOP4
1483: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
1484: NOP4
1488: PUSH
1489: NOP4
1493: PPUSH
1494: NOP4
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: NOP4
1506: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
1507: NOP4
1511: PUSH
1512: NOP4
1516: PPUSH
1517: NOP4
1521: PPUSH
1522: EMPTY
1523: PPUSH
1524: NOP4
1528: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
1529: NOP4
1533: PUSH
1534: NOP4
1538: PPUSH
1539: NOP4
1543: PPUSH
1544: EMPTY
1545: PPUSH
1546: NOP4
1550: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
1551: NOP4
1555: PUSH
1556: NOP4
1560: PPUSH
1561: NOP4
1565: PPUSH
1566: EMPTY
1567: PPUSH
1568: NOP4
1572: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
1573: NOP4
1577: PUSH
1578: NOP4
1582: PPUSH
1583: NOP4
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: NOP4
1594: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
1595: NOP4
1599: PUSH
1600: NOP4
1604: PPUSH
1605: NOP4
1609: PPUSH
1610: EMPTY
1611: PPUSH
1612: NOP4
1616: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
1617: NOP4
1621: PUSH
1622: NOP4
1626: PPUSH
1627: NOP4
1631: PPUSH
1632: EMPTY
1633: PPUSH
1634: NOP4
1638: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
1639: NOP4
1643: PUSH
1644: NOP4
1648: PPUSH
1649: NOP4
1653: PPUSH
1654: EMPTY
1655: PPUSH
1656: NOP4
1660: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
1661: NOP4
1665: PUSH
1666: NOP4
1670: PPUSH
1671: NOP4
1675: PPUSH
1676: EMPTY
1677: PPUSH
1678: NOP4
1682: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
1683: NOP4
1687: PUSH
1688: NOP4
1692: PPUSH
1693: NOP4
1697: PPUSH
1698: EMPTY
1699: PPUSH
1700: NOP4
1704: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
1705: NOP4
1709: PUSH
1710: NOP4
1714: PPUSH
1715: NOP4
1719: PPUSH
1720: EMPTY
1721: PPUSH
1722: NOP4
1726: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
1727: NOP4
1731: PUSH
1732: NOP4
1736: PPUSH
1737: NOP4
1741: PPUSH
1742: EMPTY
1743: PPUSH
1744: NOP4
1748: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
1749: NOP4
1753: PUSH
1754: NOP4
1758: PPUSH
1759: NOP4
1763: PPUSH
1764: EMPTY
1765: PPUSH
1766: NOP4
1770: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
1771: NOP4
1775: PUSH
1776: NOP4
1780: PPUSH
1781: NOP4
1785: PPUSH
1786: EMPTY
1787: PPUSH
1788: NOP4
1792: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
1793: NOP4
1797: PUSH
1798: NOP4
1802: PPUSH
1803: NOP4
1807: PPUSH
1808: EMPTY
1809: PPUSH
1810: NOP4
1814: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
1815: NOP4
1819: PUSH
1820: NOP4
1824: PPUSH
1825: NOP4
1829: PPUSH
1830: EMPTY
1831: PPUSH
1832: NOP4
1836: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
1837: NOP4
1841: PUSH
1842: NOP4
1846: PPUSH
1847: NOP4
1851: PPUSH
1852: EMPTY
1853: PPUSH
1854: NOP4
1858: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
1859: NOP4
1863: PUSH
1864: NOP4
1868: PPUSH
1869: NOP4
1873: PPUSH
1874: EMPTY
1875: PPUSH
1876: NOP4
1880: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
1881: NOP4
1885: PUSH
1886: NOP4
1890: PPUSH
1891: NOP4
1895: PPUSH
1896: EMPTY
1897: PPUSH
1898: NOP4
1902: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
1903: NOP4
1907: PUSH
1908: NOP4
1912: PPUSH
1913: NOP4
1917: PPUSH
1918: EMPTY
1919: PPUSH
1920: NOP4
1924: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
1925: NOP4
1929: PUSH
1930: NOP4
1934: PPUSH
1935: NOP4
1939: PPUSH
1940: EMPTY
1941: PPUSH
1942: NOP4
1946: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
1947: NOP4
1951: PUSH
1952: NOP4
1956: PPUSH
1957: NOP4
1961: PPUSH
1962: EMPTY
1963: PPUSH
1964: NOP4
1968: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
1969: NOP4
1973: PUSH
1974: NOP4
1978: PPUSH
1979: NOP4
1983: PPUSH
1984: EMPTY
1985: PPUSH
1986: NOP4
1990: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
1991: NOP4
1995: PUSH
1996: NOP4
2000: PPUSH
2001: NOP4
2005: PPUSH
2006: EMPTY
2007: PPUSH
2008: NOP4
2012: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
2013: NOP4
2017: PUSH
2018: NOP4
2022: PPUSH
2023: NOP4
2027: PPUSH
2028: EMPTY
2029: PPUSH
2030: NOP4
2034: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
2035: NOP4
2039: PUSH
2040: NOP4
2044: PPUSH
2045: NOP4
2049: PPUSH
2050: EMPTY
2051: PPUSH
2052: NOP4
2056: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
2057: NOP4
2061: PUSH
2062: NOP4
2066: PPUSH
2067: NOP4
2071: PPUSH
2072: EMPTY
2073: PPUSH
2074: NOP4
2078: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
2079: NOP4
2083: PUSH
2084: NOP4
2088: PPUSH
2089: NOP4
2093: PPUSH
2094: EMPTY
2095: PPUSH
2096: NOP4
2100: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
2101: NOP4
2105: PUSH
2106: NOP4
2110: PPUSH
2111: NOP4
2115: PPUSH
2116: EMPTY
2117: PPUSH
2118: NOP4
2122: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
2123: NOP4
2127: PUSH
2128: NOP4
2132: PPUSH
2133: NOP4
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: NOP4
2145: ST_TO_ADDR
// result := base ;
2146: NOP4
2150: PUSH
2151: NOP4
2155: ST_TO_ADDR
// end ;
2156: LD_VAR 0 3
2160: RET
// export function MC_Start ( ) ; var i ; begin
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
// for i = 1 to mc_bases do
2165: NOP4
2169: PUSH
2170: DOUBLE
2171: LD_INT 1
2173: DEC
2174: ST_TO_ADDR
2175: NOP4
2179: PUSH
2180: FOR_TO
2181: IFFALSE 3258
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
2183: NOP4
2187: PUSH
2188: NOP4
2192: PPUSH
2193: NOP4
2197: PPUSH
2198: NOP4
2202: PUSH
2203: NOP4
2207: ARRAY
2208: PUSH
2209: LD_INT 0
2211: DIFF
2212: PPUSH
2213: NOP4
2217: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
2218: NOP4
2222: PUSH
2223: NOP4
2227: PPUSH
2228: NOP4
2232: PPUSH
2233: EMPTY
2234: PPUSH
2235: NOP4
2239: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
2240: NOP4
2244: PUSH
2245: NOP4
2249: PPUSH
2250: NOP4
2254: PPUSH
2255: EMPTY
2256: PPUSH
2257: NOP4
2261: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
2262: NOP4
2266: PUSH
2267: NOP4
2271: PPUSH
2272: NOP4
2276: PPUSH
2277: EMPTY
2278: PPUSH
2279: NOP4
2283: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
2284: NOP4
2288: PUSH
2289: NOP4
2293: PPUSH
2294: NOP4
2298: PPUSH
2299: EMPTY
2300: PUSH
2301: EMPTY
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PPUSH
2307: NOP4
2311: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
2312: NOP4
2316: PUSH
2317: NOP4
2321: PPUSH
2322: NOP4
2326: PPUSH
2327: EMPTY
2328: PPUSH
2329: NOP4
2333: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
2334: NOP4
2338: PUSH
2339: NOP4
2343: PPUSH
2344: NOP4
2348: PPUSH
2349: EMPTY
2350: PPUSH
2351: NOP4
2355: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
2356: NOP4
2360: PUSH
2361: NOP4
2365: PPUSH
2366: NOP4
2370: PPUSH
2371: EMPTY
2372: PPUSH
2373: NOP4
2377: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
2378: NOP4
2382: PUSH
2383: NOP4
2387: PPUSH
2388: NOP4
2392: PPUSH
2393: EMPTY
2394: PPUSH
2395: NOP4
2399: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
2400: NOP4
2404: PUSH
2405: NOP4
2409: PPUSH
2410: NOP4
2414: PPUSH
2415: NOP4
2419: PUSH
2420: NOP4
2424: ARRAY
2425: PPUSH
2426: LD_INT 2
2428: PUSH
2429: LD_INT 30
2431: PUSH
2432: LD_INT 32
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 30
2441: PUSH
2442: LD_INT 33
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: PPUSH
2454: NOP4
2458: PPUSH
2459: NOP4
2463: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
2464: NOP4
2468: PUSH
2469: NOP4
2473: PPUSH
2474: NOP4
2478: PPUSH
2479: NOP4
2483: PUSH
2484: NOP4
2488: ARRAY
2489: PPUSH
2490: LD_INT 2
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 32
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 30
2505: PUSH
2506: LD_INT 31
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 58
2520: PUSH
2521: EMPTY
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: NOP4
2532: PPUSH
2533: NOP4
2537: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
2538: NOP4
2542: PUSH
2543: NOP4
2547: PPUSH
2548: NOP4
2552: PPUSH
2553: EMPTY
2554: PPUSH
2555: NOP4
2559: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
2560: NOP4
2564: PUSH
2565: NOP4
2569: PPUSH
2570: NOP4
2574: PPUSH
2575: EMPTY
2576: PPUSH
2577: NOP4
2581: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
2582: NOP4
2586: PUSH
2587: NOP4
2591: PPUSH
2592: NOP4
2596: PPUSH
2597: EMPTY
2598: PPUSH
2599: NOP4
2603: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
2604: NOP4
2608: PUSH
2609: NOP4
2613: PPUSH
2614: NOP4
2618: PPUSH
2619: EMPTY
2620: PPUSH
2621: NOP4
2625: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
2626: NOP4
2630: PUSH
2631: NOP4
2635: PPUSH
2636: NOP4
2640: PPUSH
2641: EMPTY
2642: PPUSH
2643: NOP4
2647: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
2648: NOP4
2652: PUSH
2653: NOP4
2657: PPUSH
2658: NOP4
2662: PPUSH
2663: EMPTY
2664: PPUSH
2665: NOP4
2669: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
2670: NOP4
2674: PUSH
2675: NOP4
2679: PPUSH
2680: NOP4
2684: PPUSH
2685: EMPTY
2686: PPUSH
2687: NOP4
2691: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
2692: NOP4
2696: PUSH
2697: NOP4
2701: PPUSH
2702: NOP4
2706: PPUSH
2707: EMPTY
2708: PPUSH
2709: NOP4
2713: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
2714: NOP4
2718: PUSH
2719: NOP4
2723: PPUSH
2724: NOP4
2728: PPUSH
2729: EMPTY
2730: PPUSH
2731: NOP4
2735: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
2736: NOP4
2740: PUSH
2741: NOP4
2745: PPUSH
2746: NOP4
2750: PPUSH
2751: EMPTY
2752: PPUSH
2753: NOP4
2757: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
2758: NOP4
2762: PUSH
2763: NOP4
2767: PPUSH
2768: NOP4
2772: PPUSH
2773: EMPTY
2774: PPUSH
2775: NOP4
2779: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
2780: NOP4
2784: PUSH
2785: NOP4
2789: PPUSH
2790: NOP4
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: NOP4
2802: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
2803: NOP4
2807: PUSH
2808: NOP4
2812: PPUSH
2813: NOP4
2817: PPUSH
2818: LD_INT 0
2820: PPUSH
2821: NOP4
2825: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
2826: NOP4
2830: PUSH
2831: NOP4
2835: PPUSH
2836: NOP4
2840: PPUSH
2841: EMPTY
2842: PPUSH
2843: NOP4
2847: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
2848: NOP4
2852: PUSH
2853: NOP4
2857: PPUSH
2858: NOP4
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: NOP4
2870: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
2871: NOP4
2875: PUSH
2876: NOP4
2880: PPUSH
2881: NOP4
2885: PPUSH
2886: EMPTY
2887: PPUSH
2888: NOP4
2892: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
2893: NOP4
2897: PUSH
2898: NOP4
2902: PPUSH
2903: NOP4
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: NOP4
2915: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
2916: NOP4
2920: PUSH
2921: NOP4
2925: PPUSH
2926: NOP4
2930: PPUSH
2931: EMPTY
2932: PPUSH
2933: NOP4
2937: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
2938: NOP4
2942: PUSH
2943: NOP4
2947: PPUSH
2948: NOP4
2952: PPUSH
2953: EMPTY
2954: PPUSH
2955: NOP4
2959: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
2960: NOP4
2964: PUSH
2965: NOP4
2969: PPUSH
2970: NOP4
2974: PPUSH
2975: EMPTY
2976: PPUSH
2977: NOP4
2981: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
2982: NOP4
2986: PUSH
2987: NOP4
2991: PPUSH
2992: NOP4
2996: PPUSH
2997: NOP4
3001: PUSH
3002: NOP4
3006: ARRAY
3007: PPUSH
3008: LD_INT 2
3010: PUSH
3011: LD_INT 30
3013: PUSH
3014: LD_INT 6
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 7
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 30
3033: PUSH
3034: LD_INT 8
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: PPUSH
3047: NOP4
3051: PPUSH
3052: NOP4
3056: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
3057: NOP4
3061: PUSH
3062: NOP4
3066: PPUSH
3067: NOP4
3071: PPUSH
3072: EMPTY
3073: PPUSH
3074: NOP4
3078: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
3079: NOP4
3083: PUSH
3084: NOP4
3088: PPUSH
3089: NOP4
3093: PPUSH
3094: EMPTY
3095: PPUSH
3096: NOP4
3100: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
3101: NOP4
3105: PUSH
3106: NOP4
3110: PPUSH
3111: NOP4
3115: PPUSH
3116: EMPTY
3117: PPUSH
3118: NOP4
3122: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
3123: NOP4
3127: PUSH
3128: NOP4
3132: PPUSH
3133: NOP4
3137: PPUSH
3138: EMPTY
3139: PPUSH
3140: NOP4
3144: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
3145: NOP4
3149: PUSH
3150: NOP4
3154: PPUSH
3155: NOP4
3159: PPUSH
3160: EMPTY
3161: PPUSH
3162: NOP4
3166: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
3167: NOP4
3171: PUSH
3172: NOP4
3176: PPUSH
3177: NOP4
3181: PPUSH
3182: EMPTY
3183: PPUSH
3184: NOP4
3188: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
3189: NOP4
3193: PUSH
3194: NOP4
3198: PPUSH
3199: NOP4
3203: PPUSH
3204: EMPTY
3205: PPUSH
3206: NOP4
3210: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
3211: NOP4
3215: PUSH
3216: NOP4
3220: PPUSH
3221: NOP4
3225: PPUSH
3226: EMPTY
3227: PPUSH
3228: NOP4
3232: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
3233: NOP4
3237: PUSH
3238: NOP4
3242: PPUSH
3243: NOP4
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: NOP4
3255: ST_TO_ADDR
// end ;
3256: GO 2180
3258: POP
3259: POP
// MC_InitSides ( ) ;
3260: NOP4
// MC_InitResearch ( ) ;
3264: NOP4
// CustomInitMacro ( ) ;
3268: NOP4
// skirmish := true ;
3272: NOP4
3276: PUSH
3277: LD_INT 1
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 1
3284: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
3291: PPUSH
3292: PPUSH
// if not mc_bases then
3293: NOP4
3297: NOT
3298: IFFALSE 3302
// exit ;
3300: GO 3541
// for i = 1 to 8 do
3302: NOP4
3306: PUSH
3307: DOUBLE
3308: LD_INT 1
3310: DEC
3311: ST_TO_ADDR
3312: LD_INT 8
3314: PUSH
3315: FOR_TO
3316: IFFALSE 3342
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
3318: NOP4
3322: PUSH
3323: NOP4
3327: PPUSH
3328: NOP4
3332: PPUSH
3333: EMPTY
3334: PPUSH
3335: NOP4
3339: ST_TO_ADDR
3340: GO 3315
3342: POP
3343: POP
// tmp := [ ] ;
3344: NOP4
3348: PUSH
3349: EMPTY
3350: ST_TO_ADDR
// for i = 1 to mc_sides do
3351: NOP4
3355: PUSH
3356: DOUBLE
3357: LD_INT 1
3359: DEC
3360: ST_TO_ADDR
3361: NOP4
3365: PUSH
3366: FOR_TO
3367: IFFALSE 3425
// if not mc_sides [ i ] in tmp then
3369: NOP4
3373: PUSH
3374: NOP4
3378: ARRAY
3379: PUSH
3380: NOP4
3384: IN
3385: NOT
3386: IFFALSE 3423
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
3388: NOP4
3392: PUSH
3393: NOP4
3397: PPUSH
3398: NOP4
3402: PUSH
3403: LD_INT 1
3405: PLUS
3406: PPUSH
3407: NOP4
3411: PUSH
3412: NOP4
3416: ARRAY
3417: PPUSH
3418: NOP4
3422: ST_TO_ADDR
3423: GO 3366
3425: POP
3426: POP
// if not tmp then
3427: NOP4
3431: NOT
3432: IFFALSE 3436
// exit ;
3434: GO 3541
// for j in tmp do
3436: NOP4
3440: PUSH
3441: NOP4
3445: PUSH
3446: FOR_IN
3447: IFFALSE 3539
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
3449: NOP4
3453: PUSH
3454: LD_INT 22
3456: PUSH
3457: NOP4
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PPUSH
3466: NOP4
3470: ST_TO_ADDR
// if not un then
3471: NOP4
3475: NOT
3476: IFFALSE 3480
// continue ;
3478: GO 3446
// nation := GetNation ( un [ 1 ] ) ;
3480: NOP4
3484: PUSH
3485: NOP4
3489: PUSH
3490: LD_INT 1
3492: ARRAY
3493: PPUSH
3494: NOP4
3498: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
3499: NOP4
3503: PUSH
3504: NOP4
3508: PPUSH
3509: NOP4
3513: PPUSH
3514: NOP4
3518: PPUSH
3519: NOP4
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: NOP4
3531: PPUSH
3532: NOP4
3536: ST_TO_ADDR
// end ;
3537: GO 3446
3539: POP
3540: POP
// end ;
3541: LD_VAR 0 1
3545: RET
// export function MC_InitSides ( ) ; var i ; begin
3546: LD_INT 0
3548: PPUSH
3549: PPUSH
// if not mc_bases then
3550: NOP4
3554: NOT
3555: IFFALSE 3559
// exit ;
3557: GO 3633
// for i = 1 to mc_bases do
3559: NOP4
3563: PUSH
3564: DOUBLE
3565: LD_INT 1
3567: DEC
3568: ST_TO_ADDR
3569: NOP4
3573: PUSH
3574: FOR_TO
3575: IFFALSE 3631
// if mc_bases [ i ] then
3577: NOP4
3581: PUSH
3582: NOP4
3586: ARRAY
3587: IFFALSE 3629
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
3589: NOP4
3593: PUSH
3594: NOP4
3598: PPUSH
3599: NOP4
3603: PPUSH
3604: NOP4
3608: PUSH
3609: NOP4
3613: ARRAY
3614: PUSH
3615: LD_INT 1
3617: ARRAY
3618: PPUSH
3619: NOP4
3623: PPUSH
3624: NOP4
3628: ST_TO_ADDR
3629: GO 3574
3631: POP
3632: POP
// end ;
3633: LD_VAR 0 1
3637: RET
// every 0 0$01 trigger skirmish do
3638: NOP4
3642: IFFALSE 3796
3644: GO 3646
3646: DISABLE
// begin enable ;
3647: ENABLE
// MC_CheckBuildings ( ) ;
3648: NOP4
// MC_CheckPeopleLife ( ) ;
3652: NOP4
// RaiseSailEvent ( 100 ) ;
3656: LD_INT 100
3658: PPUSH
3659: NOP4
// RaiseSailEvent ( 103 ) ;
3663: LD_INT 103
3665: PPUSH
3666: NOP4
// RaiseSailEvent ( 104 ) ;
3670: LD_INT 104
3672: PPUSH
3673: NOP4
// RaiseSailEvent ( 105 ) ;
3677: LD_INT 105
3679: PPUSH
3680: NOP4
// RaiseSailEvent ( 106 ) ;
3684: LD_INT 106
3686: PPUSH
3687: NOP4
// RaiseSailEvent ( 107 ) ;
3691: LD_INT 107
3693: PPUSH
3694: NOP4
// RaiseSailEvent ( 108 ) ;
3698: LD_INT 108
3700: PPUSH
3701: NOP4
// RaiseSailEvent ( 109 ) ;
3705: LD_INT 109
3707: PPUSH
3708: NOP4
// RaiseSailEvent ( 110 ) ;
3712: LD_INT 110
3714: PPUSH
3715: NOP4
// RaiseSailEvent ( 111 ) ;
3719: LD_INT 111
3721: PPUSH
3722: NOP4
// RaiseSailEvent ( 112 ) ;
3726: LD_INT 112
3728: PPUSH
3729: NOP4
// RaiseSailEvent ( 113 ) ;
3733: LD_INT 113
3735: PPUSH
3736: NOP4
// RaiseSailEvent ( 120 ) ;
3740: LD_INT 120
3742: PPUSH
3743: NOP4
// RaiseSailEvent ( 121 ) ;
3747: LD_INT 121
3749: PPUSH
3750: NOP4
// RaiseSailEvent ( 122 ) ;
3754: LD_INT 122
3756: PPUSH
3757: NOP4
// RaiseSailEvent ( 123 ) ;
3761: LD_INT 123
3763: PPUSH
3764: NOP4
// RaiseSailEvent ( 124 ) ;
3768: LD_INT 124
3770: PPUSH
3771: NOP4
// RaiseSailEvent ( 125 ) ;
3775: LD_INT 125
3777: PPUSH
3778: NOP4
// RaiseSailEvent ( 126 ) ;
3782: LD_INT 126
3784: PPUSH
3785: NOP4
// RaiseSailEvent ( 200 ) ;
3789: LD_INT 200
3791: PPUSH
3792: NOP4
// end ;
3796: END
// on SailEvent ( event ) do begin if event < 100 then
3797: NOP4
3801: PUSH
3802: LD_INT 100
3804: LESS
3805: IFFALSE 3816
// CustomEvent ( event ) ;
3807: NOP4
3811: PPUSH
3812: NOP4
// if event = 100 then
3816: NOP4
3820: PUSH
3821: LD_INT 100
3823: EQUAL
3824: IFFALSE 3830
// MC_ClassManager ( ) ;
3826: NOP4
// if event = 101 then
3830: NOP4
3834: PUSH
3835: LD_INT 101
3837: EQUAL
3838: IFFALSE 3844
// MC_RepairBuildings ( ) ;
3840: NOP4
// if event = 102 then
3844: NOP4
3848: PUSH
3849: LD_INT 102
3851: EQUAL
3852: IFFALSE 3858
// MC_Heal ( ) ;
3854: NOP4
// if event = 103 then
3858: NOP4
3862: PUSH
3863: LD_INT 103
3865: EQUAL
3866: IFFALSE 3872
// MC_Build ( ) ;
3868: NOP4
// if event = 104 then
3872: NOP4
3876: PUSH
3877: LD_INT 104
3879: EQUAL
3880: IFFALSE 3886
// MC_TurretWeapon ( ) ;
3882: NOP4
// if event = 105 then
3886: NOP4
3890: PUSH
3891: LD_INT 105
3893: EQUAL
3894: IFFALSE 3900
// MC_BuildUpgrade ( ) ;
3896: NOP4
// if event = 106 then
3900: NOP4
3904: PUSH
3905: LD_INT 106
3907: EQUAL
3908: IFFALSE 3914
// MC_PlantMines ( ) ;
3910: NOP4
// if event = 107 then
3914: NOP4
3918: PUSH
3919: LD_INT 107
3921: EQUAL
3922: IFFALSE 3928
// MC_CollectCrates ( ) ;
3924: NOP4
// if event = 108 then
3928: NOP4
3932: PUSH
3933: LD_INT 108
3935: EQUAL
3936: IFFALSE 3942
// MC_LinkRemoteControl ( ) ;
3938: NOP4
// if event = 109 then
3942: NOP4
3946: PUSH
3947: LD_INT 109
3949: EQUAL
3950: IFFALSE 3956
// MC_ProduceVehicle ( ) ;
3952: NOP4
// if event = 110 then
3956: NOP4
3960: PUSH
3961: LD_INT 110
3963: EQUAL
3964: IFFALSE 3970
// MC_SendAttack ( ) ;
3966: NOP4
// if event = 111 then
3970: NOP4
3974: PUSH
3975: LD_INT 111
3977: EQUAL
3978: IFFALSE 3984
// MC_Defend ( ) ;
3980: NOP4
// if event = 112 then
3984: NOP4
3988: PUSH
3989: LD_INT 112
3991: EQUAL
3992: IFFALSE 3998
// MC_Research ( ) ;
3994: NOP4
// if event = 113 then
3998: NOP4
4002: PUSH
4003: LD_INT 113
4005: EQUAL
4006: IFFALSE 4012
// MC_MinesTrigger ( ) ;
4008: NOP4
// if event = 120 then
4012: NOP4
4016: PUSH
4017: LD_INT 120
4019: EQUAL
4020: IFFALSE 4026
// MC_RepairVehicle ( ) ;
4022: NOP4
// if event = 121 then
4026: NOP4
4030: PUSH
4031: LD_INT 121
4033: EQUAL
4034: IFFALSE 4040
// MC_TameApe ( ) ;
4036: NOP4
// if event = 122 then
4040: NOP4
4044: PUSH
4045: LD_INT 122
4047: EQUAL
4048: IFFALSE 4054
// MC_ChangeApeClass ( ) ;
4050: NOP4
// if event = 123 then
4054: NOP4
4058: PUSH
4059: LD_INT 123
4061: EQUAL
4062: IFFALSE 4068
// MC_Bazooka ( ) ;
4064: NOP4
// if event = 124 then
4068: NOP4
4072: PUSH
4073: LD_INT 124
4075: EQUAL
4076: IFFALSE 4082
// MC_TeleportExit ( ) ;
4078: NOP4
// if event = 125 then
4082: NOP4
4086: PUSH
4087: LD_INT 125
4089: EQUAL
4090: IFFALSE 4096
// MC_Deposits ( ) ;
4092: NOP4
// if event = 126 then
4096: NOP4
4100: PUSH
4101: LD_INT 126
4103: EQUAL
4104: IFFALSE 4110
// MC_RemoteDriver ( ) ;
4106: NOP4
// if event = 200 then
4110: NOP4
4114: PUSH
4115: LD_INT 200
4117: EQUAL
4118: IFFALSE 4124
// MC_Idle ( ) ;
4120: NOP4
// end ;
4124: PPOPN 1
4126: END
// export function MC_Reset ( base , tag ) ; var i ; begin
4127: LD_INT 0
4129: PPUSH
4130: PPUSH
// if not mc_bases [ base ] or not tag then
4131: NOP4
4135: PUSH
4136: NOP4
4140: ARRAY
4141: NOT
4142: PUSH
4143: NOP4
4147: NOT
4148: OR
4149: IFFALSE 4153
// exit ;
4151: GO 4217
// for i in mc_bases [ base ] union mc_ape [ base ] do
4153: NOP4
4157: PUSH
4158: NOP4
4162: PUSH
4163: NOP4
4167: ARRAY
4168: PUSH
4169: NOP4
4173: PUSH
4174: NOP4
4178: ARRAY
4179: UNION
4180: PUSH
4181: FOR_IN
4182: IFFALSE 4215
// if GetTag ( i ) = tag then
4184: NOP4
4188: PPUSH
4189: NOP4
4193: PUSH
4194: NOP4
4198: EQUAL
4199: IFFALSE 4213
// SetTag ( i , 0 ) ;
4201: NOP4
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: NOP4
4213: GO 4181
4215: POP
4216: POP
// end ;
4217: LD_VAR 0 3
4221: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
4222: LD_INT 0
4224: PPUSH
4225: PPUSH
4226: PPUSH
4227: PPUSH
4228: PPUSH
4229: PPUSH
4230: PPUSH
4231: PPUSH
// if not mc_bases then
4232: NOP4
4236: NOT
4237: IFFALSE 4241
// exit ;
4239: GO 4699
// for i = 1 to mc_bases do
4241: NOP4
4245: PUSH
4246: DOUBLE
4247: LD_INT 1
4249: DEC
4250: ST_TO_ADDR
4251: NOP4
4255: PUSH
4256: FOR_TO
4257: IFFALSE 4697
// begin tmp := MC_ClassCheckReq ( i ) ;
4259: NOP4
4263: PUSH
4264: NOP4
4268: PPUSH
4269: NOP4
4273: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
4274: NOP4
4278: PUSH
4279: NOP4
4283: PPUSH
4284: NOP4
4288: PPUSH
4289: NOP4
4293: PPUSH
4294: NOP4
4298: ST_TO_ADDR
// if not tmp then
4299: NOP4
4303: NOT
4304: IFFALSE 4308
// continue ;
4306: GO 4256
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
4308: NOP4
4312: PUSH
4313: NOP4
4317: PUSH
4318: NOP4
4322: ARRAY
4323: PPUSH
4324: LD_INT 2
4326: PUSH
4327: LD_INT 30
4329: PUSH
4330: LD_INT 4
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: LD_INT 30
4339: PUSH
4340: LD_INT 5
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: PPUSH
4352: NOP4
4356: PUSH
4357: NOP4
4361: PUSH
4362: NOP4
4366: ARRAY
4367: PPUSH
4368: LD_INT 2
4370: PUSH
4371: LD_INT 30
4373: PUSH
4374: LD_INT 0
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 30
4383: PUSH
4384: LD_INT 1
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: PPUSH
4396: NOP4
4400: PUSH
4401: NOP4
4405: PUSH
4406: NOP4
4410: ARRAY
4411: PPUSH
4412: LD_INT 30
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: NOP4
4426: PUSH
4427: NOP4
4431: PUSH
4432: NOP4
4436: ARRAY
4437: PPUSH
4438: LD_INT 2
4440: PUSH
4441: LD_INT 30
4443: PUSH
4444: LD_INT 6
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 30
4453: PUSH
4454: LD_INT 7
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 30
4463: PUSH
4464: LD_INT 8
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: PPUSH
4477: NOP4
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: ST_TO_ADDR
// for j = 1 to 4 do
4488: NOP4
4492: PUSH
4493: DOUBLE
4494: LD_INT 1
4496: DEC
4497: ST_TO_ADDR
4498: LD_INT 4
4500: PUSH
4501: FOR_TO
4502: IFFALSE 4693
// begin if not tmp [ j ] then
4504: NOP4
4508: PUSH
4509: NOP4
4513: ARRAY
4514: NOT
4515: IFFALSE 4519
// continue ;
4517: GO 4501
// for p in tmp [ j ] do
4519: NOP4
4523: PUSH
4524: NOP4
4528: PUSH
4529: NOP4
4533: ARRAY
4534: PUSH
4535: FOR_IN
4536: IFFALSE 4689
// begin if not b [ j ] then
4538: NOP4
4542: PUSH
4543: NOP4
4547: ARRAY
4548: NOT
4549: IFFALSE 4553
// break ;
4551: GO 4689
// e := 0 ;
4553: NOP4
4557: PUSH
4558: LD_INT 0
4560: ST_TO_ADDR
// for k in b [ j ] do
4561: NOP4
4565: PUSH
4566: NOP4
4570: PUSH
4571: NOP4
4575: ARRAY
4576: PUSH
4577: FOR_IN
4578: IFFALSE 4605
// if IsNotFull ( k ) then
4580: NOP4
4584: PPUSH
4585: NOP4
4589: IFFALSE 4603
// begin e := k ;
4591: NOP4
4595: PUSH
4596: NOP4
4600: ST_TO_ADDR
// break ;
4601: GO 4605
// end ;
4603: GO 4577
4605: POP
4606: POP
// if e and not UnitGoingToBuilding ( p , e ) then
4607: NOP4
4611: PUSH
4612: NOP4
4616: PPUSH
4617: NOP4
4621: PPUSH
4622: NOP4
4626: NOT
4627: AND
4628: IFFALSE 4687
// begin if IsInUnit ( p ) then
4630: NOP4
4634: PPUSH
4635: NOP4
4639: IFFALSE 4650
// ComExitBuilding ( p ) ;
4641: NOP4
4645: PPUSH
4646: NOP4
// ComEnterUnit ( p , e ) ;
4650: NOP4
4654: PPUSH
4655: NOP4
4659: PPUSH
4660: NOP4
// AddComChangeProfession ( p , j ) ;
4664: NOP4
4668: PPUSH
4669: NOP4
4673: PPUSH
4674: NOP4
// AddComExitBuilding ( p ) ;
4678: NOP4
4682: PPUSH
4683: NOP4
// end ; end ;
4687: GO 4535
4689: POP
4690: POP
// end ;
4691: GO 4501
4693: POP
4694: POP
// end ;
4695: GO 4256
4697: POP
4698: POP
// end ;
4699: LD_VAR 0 1
4703: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
4718: NOP4
4722: NOT
4723: PUSH
4724: NOP4
4728: PUSH
4729: NOP4
4733: ARRAY
4734: NOT
4735: OR
4736: PUSH
4737: NOP4
4741: PUSH
4742: NOP4
4746: ARRAY
4747: PPUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 30
4753: PUSH
4754: LD_INT 0
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: LD_INT 30
4763: PUSH
4764: LD_INT 1
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: NOP4
4780: NOT
4781: OR
4782: IFFALSE 4786
// exit ;
4784: GO 8280
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
4786: NOP4
4790: PUSH
4791: NOP4
4795: PUSH
4796: NOP4
4800: ARRAY
4801: PPUSH
4802: LD_INT 2
4804: PUSH
4805: LD_INT 25
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 25
4817: PUSH
4818: LD_INT 2
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 25
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 25
4837: PUSH
4838: LD_INT 4
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: LD_INT 25
4847: PUSH
4848: LD_INT 5
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 25
4857: PUSH
4858: LD_INT 8
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: LD_INT 9
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: PPUSH
4885: NOP4
4889: ST_TO_ADDR
// for i in tmp do
4890: NOP4
4894: PUSH
4895: NOP4
4899: PUSH
4900: FOR_IN
4901: IFFALSE 4932
// if GetTag ( i ) then
4903: NOP4
4907: PPUSH
4908: NOP4
4912: IFFALSE 4930
// tmp := tmp diff i ;
4914: NOP4
4918: PUSH
4919: NOP4
4923: PUSH
4924: NOP4
4928: DIFF
4929: ST_TO_ADDR
4930: GO 4900
4932: POP
4933: POP
// if not tmp then
4934: NOP4
4938: NOT
4939: IFFALSE 4943
// exit ;
4941: GO 8280
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
4943: NOP4
4947: PUSH
4948: NOP4
4952: PUSH
4953: NOP4
4957: ARRAY
4958: PPUSH
4959: LD_INT 2
4961: PUSH
4962: LD_INT 25
4964: PUSH
4965: LD_INT 1
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 25
4974: PUSH
4975: LD_INT 5
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 25
4984: PUSH
4985: LD_INT 8
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 25
4994: PUSH
4995: LD_INT 9
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: PPUSH
5009: NOP4
5013: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
5014: NOP4
5018: PUSH
5019: NOP4
5023: PUSH
5024: NOP4
5028: ARRAY
5029: PPUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 2
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: NOP4
5044: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
5045: NOP4
5049: PUSH
5050: NOP4
5054: PUSH
5055: NOP4
5059: ARRAY
5060: PPUSH
5061: LD_INT 25
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: NOP4
5075: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
5076: NOP4
5080: PUSH
5081: NOP4
5085: PUSH
5086: NOP4
5090: ARRAY
5091: PPUSH
5092: LD_INT 25
5094: PUSH
5095: LD_INT 4
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 24
5104: PUSH
5105: LD_INT 251
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PPUSH
5116: NOP4
5120: ST_TO_ADDR
// if mc_scan [ base ] then
5121: NOP4
5125: PUSH
5126: NOP4
5130: ARRAY
5131: IFFALSE 5592
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
5133: NOP4
5137: PUSH
5138: NOP4
5142: PPUSH
5143: NOP4
5147: PPUSH
5148: LD_INT 4
5150: PPUSH
5151: NOP4
5155: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
5156: NOP4
5160: PUSH
5161: NOP4
5165: PUSH
5166: NOP4
5170: ARRAY
5171: PPUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 30
5177: PUSH
5178: LD_INT 4
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 30
5187: PUSH
5188: LD_INT 5
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: LIST
5199: PPUSH
5200: NOP4
5204: ST_TO_ADDR
// if not b then
5205: NOP4
5209: NOT
5210: IFFALSE 5214
// exit ;
5212: GO 8280
// p := [ ] ;
5214: NOP4
5218: PUSH
5219: EMPTY
5220: ST_TO_ADDR
// if sci >= 2 then
5221: NOP4
5225: PUSH
5226: LD_INT 2
5228: GREATEREQUAL
5229: IFFALSE 5260
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
5231: NOP4
5235: PUSH
5236: NOP4
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PUSH
5245: NOP4
5249: PUSH
5250: LD_INT 2
5252: ARRAY
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: ST_TO_ADDR
5258: GO 5321
// if sci = 1 then
5260: NOP4
5264: PUSH
5265: LD_INT 1
5267: EQUAL
5268: IFFALSE 5289
// sci := [ sci [ 1 ] ] else
5270: NOP4
5274: PUSH
5275: NOP4
5279: PUSH
5280: LD_INT 1
5282: ARRAY
5283: PUSH
5284: EMPTY
5285: LIST
5286: ST_TO_ADDR
5287: GO 5321
// if sci = 0 then
5289: NOP4
5293: PUSH
5294: LD_INT 0
5296: EQUAL
5297: IFFALSE 5321
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
5299: NOP4
5303: PUSH
5304: NOP4
5308: PPUSH
5309: LD_INT 4
5311: PPUSH
5312: NOP4
5316: PUSH
5317: LD_INT 1
5319: ARRAY
5320: ST_TO_ADDR
// if eng > 4 then
5321: NOP4
5325: PUSH
5326: LD_INT 4
5328: GREATER
5329: IFFALSE 5375
// for i = eng downto 4 do
5331: NOP4
5335: PUSH
5336: DOUBLE
5337: NOP4
5341: INC
5342: ST_TO_ADDR
5343: LD_INT 4
5345: PUSH
5346: FOR_DOWNTO
5347: IFFALSE 5373
// eng := eng diff eng [ i ] ;
5349: NOP4
5353: PUSH
5354: NOP4
5358: PUSH
5359: NOP4
5363: PUSH
5364: NOP4
5368: ARRAY
5369: DIFF
5370: ST_TO_ADDR
5371: GO 5346
5373: POP
5374: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
5375: NOP4
5379: PUSH
5380: NOP4
5384: PUSH
5385: NOP4
5389: PUSH
5390: NOP4
5394: UNION
5395: PUSH
5396: NOP4
5400: UNION
5401: PUSH
5402: NOP4
5406: UNION
5407: DIFF
5408: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
5409: NOP4
5413: PUSH
5414: NOP4
5418: PUSH
5419: NOP4
5423: ARRAY
5424: PPUSH
5425: LD_INT 2
5427: PUSH
5428: LD_INT 30
5430: PUSH
5431: LD_INT 32
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 30
5440: PUSH
5441: LD_INT 31
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PPUSH
5453: NOP4
5457: PUSH
5458: NOP4
5462: PUSH
5463: NOP4
5467: ARRAY
5468: PPUSH
5469: LD_INT 2
5471: PUSH
5472: LD_INT 30
5474: PUSH
5475: LD_INT 4
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 30
5484: PUSH
5485: LD_INT 5
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PPUSH
5497: NOP4
5501: PUSH
5502: LD_INT 6
5504: MUL
5505: PLUS
5506: ST_TO_ADDR
// if bcount < tmp then
5507: NOP4
5511: PUSH
5512: NOP4
5516: LESS
5517: IFFALSE 5563
// for i = tmp downto bcount do
5519: NOP4
5523: PUSH
5524: DOUBLE
5525: NOP4
5529: INC
5530: ST_TO_ADDR
5531: NOP4
5535: PUSH
5536: FOR_DOWNTO
5537: IFFALSE 5561
// tmp := Delete ( tmp , tmp ) ;
5539: NOP4
5543: PUSH
5544: NOP4
5548: PPUSH
5549: NOP4
5553: PPUSH
5554: NOP4
5558: ST_TO_ADDR
5559: GO 5536
5561: POP
5562: POP
// result := [ tmp , 0 , 0 , p ] ;
5563: NOP4
5567: PUSH
5568: NOP4
5572: PUSH
5573: LD_INT 0
5575: PUSH
5576: LD_INT 0
5578: PUSH
5579: NOP4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: ST_TO_ADDR
// exit ;
5590: GO 8280
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
5592: NOP4
5596: PUSH
5597: NOP4
5601: ARRAY
5602: PPUSH
5603: LD_INT 2
5605: PUSH
5606: LD_INT 30
5608: PUSH
5609: LD_INT 6
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 30
5618: PUSH
5619: LD_INT 7
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 30
5628: PUSH
5629: LD_INT 8
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: PPUSH
5642: NOP4
5646: NOT
5647: PUSH
5648: NOP4
5652: PUSH
5653: NOP4
5657: ARRAY
5658: PPUSH
5659: LD_INT 30
5661: PUSH
5662: LD_INT 3
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PPUSH
5669: NOP4
5673: NOT
5674: AND
5675: IFFALSE 5747
// begin if eng = tmp then
5677: NOP4
5681: PUSH
5682: NOP4
5686: EQUAL
5687: IFFALSE 5691
// exit ;
5689: GO 8280
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
5691: NOP4
5695: PUSH
5696: NOP4
5700: PPUSH
5701: NOP4
5705: PPUSH
5706: LD_INT 1
5708: PPUSH
5709: NOP4
5713: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
5714: NOP4
5718: PUSH
5719: LD_INT 0
5721: PUSH
5722: NOP4
5726: PUSH
5727: NOP4
5731: DIFF
5732: PUSH
5733: LD_INT 0
5735: PUSH
5736: LD_INT 0
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: ST_TO_ADDR
// exit ;
5745: GO 8280
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
5747: NOP4
5751: PUSH
5752: NOP4
5756: PUSH
5757: NOP4
5761: ARRAY
5762: ARRAY
5763: PUSH
5764: NOP4
5768: PUSH
5769: NOP4
5773: ARRAY
5774: PPUSH
5775: LD_INT 2
5777: PUSH
5778: LD_INT 30
5780: PUSH
5781: LD_INT 6
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 30
5790: PUSH
5791: LD_INT 7
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 30
5800: PUSH
5801: LD_INT 8
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PPUSH
5814: NOP4
5818: AND
5819: PUSH
5820: NOP4
5824: PUSH
5825: NOP4
5829: ARRAY
5830: PPUSH
5831: LD_INT 30
5833: PUSH
5834: LD_INT 3
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PPUSH
5841: NOP4
5845: NOT
5846: AND
5847: IFFALSE 6061
// begin if sci >= 6 then
5849: NOP4
5853: PUSH
5854: LD_INT 6
5856: GREATEREQUAL
5857: IFFALSE 5861
// exit ;
5859: GO 8280
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
5861: NOP4
5865: PUSH
5866: NOP4
5870: PPUSH
5871: NOP4
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: NOP4
5883: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
5884: NOP4
5888: PUSH
5889: NOP4
5893: PUSH
5894: NOP4
5898: DIFF
5899: PPUSH
5900: LD_INT 4
5902: PPUSH
5903: NOP4
5907: ST_TO_ADDR
// p := [ ] ;
5908: NOP4
5912: PUSH
5913: EMPTY
5914: ST_TO_ADDR
// if sci < 6 and sort > 6 then
5915: NOP4
5919: PUSH
5920: LD_INT 6
5922: LESS
5923: PUSH
5924: NOP4
5928: PUSH
5929: LD_INT 6
5931: GREATER
5932: AND
5933: IFFALSE 6014
// begin for i = 1 to 6 - sci do
5935: NOP4
5939: PUSH
5940: DOUBLE
5941: LD_INT 1
5943: DEC
5944: ST_TO_ADDR
5945: LD_INT 6
5947: PUSH
5948: NOP4
5952: MINUS
5953: PUSH
5954: FOR_TO
5955: IFFALSE 6010
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
5957: NOP4
5961: PUSH
5962: NOP4
5966: PPUSH
5967: NOP4
5971: PUSH
5972: LD_INT 1
5974: PLUS
5975: PPUSH
5976: NOP4
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: NOP4
5989: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
5990: NOP4
5994: PUSH
5995: NOP4
5999: PPUSH
6000: LD_INT 1
6002: PPUSH
6003: NOP4
6007: ST_TO_ADDR
// end ;
6008: GO 5954
6010: POP
6011: POP
// end else
6012: GO 6034
// if sort then
6014: NOP4
6018: IFFALSE 6034
// p := sort [ 1 ] ;
6020: NOP4
6024: PUSH
6025: NOP4
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
6034: NOP4
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: NOP4
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: ST_TO_ADDR
// exit ;
6059: GO 8280
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
6061: NOP4
6065: PUSH
6066: NOP4
6070: PUSH
6071: NOP4
6075: ARRAY
6076: ARRAY
6077: PUSH
6078: NOP4
6082: PUSH
6083: NOP4
6087: ARRAY
6088: PPUSH
6089: LD_INT 2
6091: PUSH
6092: LD_INT 30
6094: PUSH
6095: LD_INT 6
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 30
6104: PUSH
6105: LD_INT 7
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 30
6114: PUSH
6115: LD_INT 8
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: PPUSH
6128: NOP4
6132: AND
6133: PUSH
6134: NOP4
6138: PUSH
6139: NOP4
6143: ARRAY
6144: PPUSH
6145: LD_INT 30
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PPUSH
6155: NOP4
6159: AND
6160: IFFALSE 6894
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
6162: NOP4
6166: PUSH
6167: NOP4
6171: PPUSH
6172: NOP4
6176: PPUSH
6177: LD_INT 3
6179: PPUSH
6180: NOP4
6184: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
6185: NOP4
6189: PUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: LD_INT 0
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: ST_TO_ADDR
// if not eng then
6208: NOP4
6212: NOT
6213: IFFALSE 6276
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
6215: NOP4
6219: PUSH
6220: NOP4
6224: PPUSH
6225: LD_INT 2
6227: PPUSH
6228: NOP4
6232: PUSH
6233: LD_INT 1
6235: ARRAY
6236: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
6237: NOP4
6241: PUSH
6242: NOP4
6246: PPUSH
6247: LD_INT 2
6249: PPUSH
6250: NOP4
6254: PPUSH
6255: NOP4
6259: ST_TO_ADDR
// tmp := tmp diff p ;
6260: NOP4
6264: PUSH
6265: NOP4
6269: PUSH
6270: NOP4
6274: DIFF
6275: ST_TO_ADDR
// end ; if tmp and sci < 6 then
6276: NOP4
6280: PUSH
6281: NOP4
6285: PUSH
6286: LD_INT 6
6288: LESS
6289: AND
6290: IFFALSE 6478
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
6292: NOP4
6296: PUSH
6297: NOP4
6301: PUSH
6302: NOP4
6306: PUSH
6307: NOP4
6311: UNION
6312: DIFF
6313: PPUSH
6314: LD_INT 4
6316: PPUSH
6317: NOP4
6321: ST_TO_ADDR
// p := [ ] ;
6322: NOP4
6326: PUSH
6327: EMPTY
6328: ST_TO_ADDR
// if sort then
6329: NOP4
6333: IFFALSE 6449
// for i = 1 to 6 - sci do
6335: NOP4
6339: PUSH
6340: DOUBLE
6341: LD_INT 1
6343: DEC
6344: ST_TO_ADDR
6345: LD_INT 6
6347: PUSH
6348: NOP4
6352: MINUS
6353: PUSH
6354: FOR_TO
6355: IFFALSE 6447
// begin if i = sort then
6357: NOP4
6361: PUSH
6362: NOP4
6366: EQUAL
6367: IFFALSE 6371
// break ;
6369: GO 6447
// if GetClass ( i ) = 4 then
6371: NOP4
6375: PPUSH
6376: NOP4
6380: PUSH
6381: LD_INT 4
6383: EQUAL
6384: IFFALSE 6388
// continue ;
6386: GO 6354
// p := Insert ( p , p + 1 , sort [ i ] ) ;
6388: NOP4
6392: PUSH
6393: NOP4
6397: PPUSH
6398: NOP4
6402: PUSH
6403: LD_INT 1
6405: PLUS
6406: PPUSH
6407: NOP4
6411: PUSH
6412: NOP4
6416: ARRAY
6417: PPUSH
6418: NOP4
6422: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
6423: NOP4
6427: PUSH
6428: NOP4
6432: PUSH
6433: NOP4
6437: PUSH
6438: NOP4
6442: ARRAY
6443: DIFF
6444: ST_TO_ADDR
// end ;
6445: GO 6354
6447: POP
6448: POP
// if p then
6449: NOP4
6453: IFFALSE 6478
// result := Replace ( result , 4 , p ) ;
6455: NOP4
6459: PUSH
6460: NOP4
6464: PPUSH
6465: LD_INT 4
6467: PPUSH
6468: NOP4
6472: PPUSH
6473: NOP4
6477: ST_TO_ADDR
// end ; if tmp and mech < 6 then
6478: NOP4
6482: PUSH
6483: NOP4
6487: PUSH
6488: LD_INT 6
6490: LESS
6491: AND
6492: IFFALSE 6680
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
6494: NOP4
6498: PUSH
6499: NOP4
6503: PUSH
6504: NOP4
6508: PUSH
6509: NOP4
6513: UNION
6514: DIFF
6515: PPUSH
6516: LD_INT 3
6518: PPUSH
6519: NOP4
6523: ST_TO_ADDR
// p := [ ] ;
6524: NOP4
6528: PUSH
6529: EMPTY
6530: ST_TO_ADDR
// if sort then
6531: NOP4
6535: IFFALSE 6651
// for i = 1 to 6 - mech do
6537: NOP4
6541: PUSH
6542: DOUBLE
6543: LD_INT 1
6545: DEC
6546: ST_TO_ADDR
6547: LD_INT 6
6549: PUSH
6550: NOP4
6554: MINUS
6555: PUSH
6556: FOR_TO
6557: IFFALSE 6649
// begin if i = sort then
6559: NOP4
6563: PUSH
6564: NOP4
6568: EQUAL
6569: IFFALSE 6573
// break ;
6571: GO 6649
// if GetClass ( i ) = 3 then
6573: NOP4
6577: PPUSH
6578: NOP4
6582: PUSH
6583: LD_INT 3
6585: EQUAL
6586: IFFALSE 6590
// continue ;
6588: GO 6556
// p := Insert ( p , p + 1 , sort [ i ] ) ;
6590: NOP4
6594: PUSH
6595: NOP4
6599: PPUSH
6600: NOP4
6604: PUSH
6605: LD_INT 1
6607: PLUS
6608: PPUSH
6609: NOP4
6613: PUSH
6614: NOP4
6618: ARRAY
6619: PPUSH
6620: NOP4
6624: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
6625: NOP4
6629: PUSH
6630: NOP4
6634: PUSH
6635: NOP4
6639: PUSH
6640: NOP4
6644: ARRAY
6645: DIFF
6646: ST_TO_ADDR
// end ;
6647: GO 6556
6649: POP
6650: POP
// if p then
6651: NOP4
6655: IFFALSE 6680
// result := Replace ( result , 3 , p ) ;
6657: NOP4
6661: PUSH
6662: NOP4
6666: PPUSH
6667: LD_INT 3
6669: PPUSH
6670: NOP4
6674: PPUSH
6675: NOP4
6679: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
6680: NOP4
6684: PUSH
6685: LD_INT 6
6687: GREATER
6688: PUSH
6689: NOP4
6693: PUSH
6694: LD_INT 6
6696: LESS
6697: AND
6698: IFFALSE 6892
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
6700: NOP4
6704: PUSH
6705: NOP4
6709: PUSH
6710: NOP4
6714: PUSH
6715: NOP4
6719: UNION
6720: PUSH
6721: NOP4
6725: UNION
6726: DIFF
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: NOP4
6735: ST_TO_ADDR
// p := [ ] ;
6736: NOP4
6740: PUSH
6741: EMPTY
6742: ST_TO_ADDR
// if sort then
6743: NOP4
6747: IFFALSE 6863
// for i = 1 to 6 - eng do
6749: NOP4
6753: PUSH
6754: DOUBLE
6755: LD_INT 1
6757: DEC
6758: ST_TO_ADDR
6759: LD_INT 6
6761: PUSH
6762: NOP4
6766: MINUS
6767: PUSH
6768: FOR_TO
6769: IFFALSE 6861
// begin if i = sort then
6771: NOP4
6775: PUSH
6776: NOP4
6780: EQUAL
6781: IFFALSE 6785
// break ;
6783: GO 6861
// if GetClass ( i ) = 2 then
6785: NOP4
6789: PPUSH
6790: NOP4
6794: PUSH
6795: LD_INT 2
6797: EQUAL
6798: IFFALSE 6802
// continue ;
6800: GO 6768
// p := Insert ( p , p + 1 , sort [ i ] ) ;
6802: NOP4
6806: PUSH
6807: NOP4
6811: PPUSH
6812: NOP4
6816: PUSH
6817: LD_INT 1
6819: PLUS
6820: PPUSH
6821: NOP4
6825: PUSH
6826: NOP4
6830: ARRAY
6831: PPUSH
6832: NOP4
6836: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
6837: NOP4
6841: PUSH
6842: NOP4
6846: PUSH
6847: NOP4
6851: PUSH
6852: NOP4
6856: ARRAY
6857: DIFF
6858: ST_TO_ADDR
// end ;
6859: GO 6768
6861: POP
6862: POP
// if p then
6863: NOP4
6867: IFFALSE 6892
// result := Replace ( result , 2 , p ) ;
6869: NOP4
6873: PUSH
6874: NOP4
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: NOP4
6886: PPUSH
6887: NOP4
6891: ST_TO_ADDR
// end ; exit ;
6892: GO 8280
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
6894: NOP4
6898: PUSH
6899: NOP4
6903: PUSH
6904: NOP4
6908: ARRAY
6909: ARRAY
6910: NOT
6911: PUSH
6912: NOP4
6916: PUSH
6917: NOP4
6921: ARRAY
6922: PPUSH
6923: LD_INT 30
6925: PUSH
6926: LD_INT 3
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: NOP4
6937: AND
6938: PUSH
6939: NOP4
6943: PUSH
6944: NOP4
6948: ARRAY
6949: AND
6950: IFFALSE 7558
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
6952: NOP4
6956: PUSH
6957: NOP4
6961: PPUSH
6962: NOP4
6966: PPUSH
6967: LD_INT 5
6969: PPUSH
6970: NOP4
6974: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
6975: NOP4
6979: PUSH
6980: LD_INT 0
6982: PUSH
6983: LD_INT 0
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: LD_INT 0
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: ST_TO_ADDR
// if sci > 1 then
6998: NOP4
7002: PUSH
7003: LD_INT 1
7005: GREATER
7006: IFFALSE 7034
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
7008: NOP4
7012: PUSH
7013: NOP4
7017: PUSH
7018: NOP4
7022: PUSH
7023: NOP4
7027: PUSH
7028: LD_INT 1
7030: ARRAY
7031: DIFF
7032: DIFF
7033: ST_TO_ADDR
// if tmp and not sci then
7034: NOP4
7038: PUSH
7039: NOP4
7043: NOT
7044: AND
7045: IFFALSE 7114
// begin sort := SortBySkill ( tmp , 4 ) ;
7047: NOP4
7051: PUSH
7052: NOP4
7056: PPUSH
7057: LD_INT 4
7059: PPUSH
7060: NOP4
7064: ST_TO_ADDR
// if sort then
7065: NOP4
7069: IFFALSE 7085
// p := sort [ 1 ] ;
7071: NOP4
7075: PUSH
7076: NOP4
7080: PUSH
7081: LD_INT 1
7083: ARRAY
7084: ST_TO_ADDR
// if p then
7085: NOP4
7089: IFFALSE 7114
// result := Replace ( result , 4 , p ) ;
7091: NOP4
7095: PUSH
7096: NOP4
7100: PPUSH
7101: LD_INT 4
7103: PPUSH
7104: NOP4
7108: PPUSH
7109: NOP4
7113: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
7114: NOP4
7118: PUSH
7119: NOP4
7123: PUSH
7124: NOP4
7128: DIFF
7129: ST_TO_ADDR
// if tmp and mech < 6 then
7130: NOP4
7134: PUSH
7135: NOP4
7139: PUSH
7140: LD_INT 6
7142: LESS
7143: AND
7144: IFFALSE 7332
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
7146: NOP4
7150: PUSH
7151: NOP4
7155: PUSH
7156: NOP4
7160: PUSH
7161: NOP4
7165: UNION
7166: DIFF
7167: PPUSH
7168: LD_INT 3
7170: PPUSH
7171: NOP4
7175: ST_TO_ADDR
// p := [ ] ;
7176: NOP4
7180: PUSH
7181: EMPTY
7182: ST_TO_ADDR
// if sort then
7183: NOP4
7187: IFFALSE 7303
// for i = 1 to 6 - mech do
7189: NOP4
7193: PUSH
7194: DOUBLE
7195: LD_INT 1
7197: DEC
7198: ST_TO_ADDR
7199: LD_INT 6
7201: PUSH
7202: NOP4
7206: MINUS
7207: PUSH
7208: FOR_TO
7209: IFFALSE 7301
// begin if i = sort then
7211: NOP4
7215: PUSH
7216: NOP4
7220: EQUAL
7221: IFFALSE 7225
// break ;
7223: GO 7301
// if GetClass ( i ) = 3 then
7225: NOP4
7229: PPUSH
7230: NOP4
7234: PUSH
7235: LD_INT 3
7237: EQUAL
7238: IFFALSE 7242
// continue ;
7240: GO 7208
// p := Insert ( p , p + 1 , sort [ i ] ) ;
7242: NOP4
7246: PUSH
7247: NOP4
7251: PPUSH
7252: NOP4
7256: PUSH
7257: LD_INT 1
7259: PLUS
7260: PPUSH
7261: NOP4
7265: PUSH
7266: NOP4
7270: ARRAY
7271: PPUSH
7272: NOP4
7276: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
7277: NOP4
7281: PUSH
7282: NOP4
7286: PUSH
7287: NOP4
7291: PUSH
7292: NOP4
7296: ARRAY
7297: DIFF
7298: ST_TO_ADDR
// end ;
7299: GO 7208
7301: POP
7302: POP
// if p then
7303: NOP4
7307: IFFALSE 7332
// result := Replace ( result , 3 , p ) ;
7309: NOP4
7313: PUSH
7314: NOP4
7318: PPUSH
7319: LD_INT 3
7321: PPUSH
7322: NOP4
7326: PPUSH
7327: NOP4
7331: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
7332: NOP4
7336: PUSH
7337: NOP4
7341: PUSH
7342: NOP4
7346: DIFF
7347: ST_TO_ADDR
// if tmp and eng < 6 then
7348: NOP4
7352: PUSH
7353: NOP4
7357: PUSH
7358: LD_INT 6
7360: LESS
7361: AND
7362: IFFALSE 7556
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
7364: NOP4
7368: PUSH
7369: NOP4
7373: PUSH
7374: NOP4
7378: PUSH
7379: NOP4
7383: UNION
7384: PUSH
7385: NOP4
7389: UNION
7390: DIFF
7391: PPUSH
7392: LD_INT 2
7394: PPUSH
7395: NOP4
7399: ST_TO_ADDR
// p := [ ] ;
7400: NOP4
7404: PUSH
7405: EMPTY
7406: ST_TO_ADDR
// if sort then
7407: NOP4
7411: IFFALSE 7527
// for i = 1 to 6 - eng do
7413: NOP4
7417: PUSH
7418: DOUBLE
7419: LD_INT 1
7421: DEC
7422: ST_TO_ADDR
7423: LD_INT 6
7425: PUSH
7426: NOP4
7430: MINUS
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7525
// begin if i = sort then
7435: NOP4
7439: PUSH
7440: NOP4
7444: EQUAL
7445: IFFALSE 7449
// break ;
7447: GO 7525
// if GetClass ( i ) = 2 then
7449: NOP4
7453: PPUSH
7454: NOP4
7458: PUSH
7459: LD_INT 2
7461: EQUAL
7462: IFFALSE 7466
// continue ;
7464: GO 7432
// p := Insert ( p , p + 1 , sort [ i ] ) ;
7466: NOP4
7470: PUSH
7471: NOP4
7475: PPUSH
7476: NOP4
7480: PUSH
7481: LD_INT 1
7483: PLUS
7484: PPUSH
7485: NOP4
7489: PUSH
7490: NOP4
7494: ARRAY
7495: PPUSH
7496: NOP4
7500: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
7501: NOP4
7505: PUSH
7506: NOP4
7510: PUSH
7511: NOP4
7515: PUSH
7516: NOP4
7520: ARRAY
7521: DIFF
7522: ST_TO_ADDR
// end ;
7523: GO 7432
7525: POP
7526: POP
// if p then
7527: NOP4
7531: IFFALSE 7556
// result := Replace ( result , 2 , p ) ;
7533: NOP4
7537: PUSH
7538: NOP4
7542: PPUSH
7543: LD_INT 2
7545: PPUSH
7546: NOP4
7550: PPUSH
7551: NOP4
7555: ST_TO_ADDR
// end ; exit ;
7556: GO 8280
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
7558: NOP4
7562: PUSH
7563: NOP4
7567: PUSH
7568: NOP4
7572: ARRAY
7573: ARRAY
7574: NOT
7575: PUSH
7576: NOP4
7580: PUSH
7581: NOP4
7585: ARRAY
7586: PPUSH
7587: LD_INT 30
7589: PUSH
7590: LD_INT 3
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PPUSH
7597: NOP4
7601: AND
7602: PUSH
7603: NOP4
7607: PUSH
7608: NOP4
7612: ARRAY
7613: NOT
7614: AND
7615: IFFALSE 8280
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
7617: NOP4
7621: PUSH
7622: NOP4
7626: PPUSH
7627: NOP4
7631: PPUSH
7632: LD_INT 6
7634: PPUSH
7635: NOP4
7639: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
7640: NOP4
7644: PUSH
7645: LD_INT 0
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: ST_TO_ADDR
// if sci >= 1 then
7663: NOP4
7667: PUSH
7668: LD_INT 1
7670: GREATEREQUAL
7671: IFFALSE 7693
// tmp := tmp diff sci [ 1 ] ;
7673: NOP4
7677: PUSH
7678: NOP4
7682: PUSH
7683: NOP4
7687: PUSH
7688: LD_INT 1
7690: ARRAY
7691: DIFF
7692: ST_TO_ADDR
// if tmp and not sci then
7693: NOP4
7697: PUSH
7698: NOP4
7702: NOT
7703: AND
7704: IFFALSE 7773
// begin sort := SortBySkill ( tmp , 4 ) ;
7706: NOP4
7710: PUSH
7711: NOP4
7715: PPUSH
7716: LD_INT 4
7718: PPUSH
7719: NOP4
7723: ST_TO_ADDR
// if sort then
7724: NOP4
7728: IFFALSE 7744
// p := sort [ 1 ] ;
7730: NOP4
7734: PUSH
7735: NOP4
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: ST_TO_ADDR
// if p then
7744: NOP4
7748: IFFALSE 7773
// result := Replace ( result , 4 , p ) ;
7750: NOP4
7754: PUSH
7755: NOP4
7759: PPUSH
7760: LD_INT 4
7762: PPUSH
7763: NOP4
7767: PPUSH
7768: NOP4
7772: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
7773: NOP4
7777: PUSH
7778: NOP4
7782: PUSH
7783: NOP4
7787: DIFF
7788: ST_TO_ADDR
// if tmp and mech < 6 then
7789: NOP4
7793: PUSH
7794: NOP4
7798: PUSH
7799: LD_INT 6
7801: LESS
7802: AND
7803: IFFALSE 7985
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
7805: NOP4
7809: PUSH
7810: NOP4
7814: PUSH
7815: NOP4
7819: DIFF
7820: PPUSH
7821: LD_INT 3
7823: PPUSH
7824: NOP4
7828: ST_TO_ADDR
// p := [ ] ;
7829: NOP4
7833: PUSH
7834: EMPTY
7835: ST_TO_ADDR
// if sort then
7836: NOP4
7840: IFFALSE 7956
// for i = 1 to 6 - mech do
7842: NOP4
7846: PUSH
7847: DOUBLE
7848: LD_INT 1
7850: DEC
7851: ST_TO_ADDR
7852: LD_INT 6
7854: PUSH
7855: NOP4
7859: MINUS
7860: PUSH
7861: FOR_TO
7862: IFFALSE 7954
// begin if i = sort then
7864: NOP4
7868: PUSH
7869: NOP4
7873: EQUAL
7874: IFFALSE 7878
// break ;
7876: GO 7954
// if GetClass ( i ) = 3 then
7878: NOP4
7882: PPUSH
7883: NOP4
7887: PUSH
7888: LD_INT 3
7890: EQUAL
7891: IFFALSE 7895
// continue ;
7893: GO 7861
// p := Insert ( p , p + 1 , sort [ i ] ) ;
7895: NOP4
7899: PUSH
7900: NOP4
7904: PPUSH
7905: NOP4
7909: PUSH
7910: LD_INT 1
7912: PLUS
7913: PPUSH
7914: NOP4
7918: PUSH
7919: NOP4
7923: ARRAY
7924: PPUSH
7925: NOP4
7929: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
7930: NOP4
7934: PUSH
7935: NOP4
7939: PUSH
7940: NOP4
7944: PUSH
7945: NOP4
7949: ARRAY
7950: DIFF
7951: ST_TO_ADDR
// end ;
7952: GO 7861
7954: POP
7955: POP
// if p then
7956: NOP4
7960: IFFALSE 7985
// result := Replace ( result , 3 , p ) ;
7962: NOP4
7966: PUSH
7967: NOP4
7971: PPUSH
7972: LD_INT 3
7974: PPUSH
7975: NOP4
7979: PPUSH
7980: NOP4
7984: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
7985: NOP4
7989: PUSH
7990: NOP4
7994: PUSH
7995: NOP4
7999: DIFF
8000: ST_TO_ADDR
// if tmp and eng < 4 then
8001: NOP4
8005: PUSH
8006: NOP4
8010: PUSH
8011: LD_INT 4
8013: LESS
8014: AND
8015: IFFALSE 8205
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
8017: NOP4
8021: PUSH
8022: NOP4
8026: PUSH
8027: NOP4
8031: PUSH
8032: NOP4
8036: UNION
8037: DIFF
8038: PPUSH
8039: LD_INT 2
8041: PPUSH
8042: NOP4
8046: ST_TO_ADDR
// p := [ ] ;
8047: NOP4
8051: PUSH
8052: EMPTY
8053: ST_TO_ADDR
// if sort then
8054: NOP4
8058: IFFALSE 8174
// for i = 1 to 4 - eng do
8060: NOP4
8064: PUSH
8065: DOUBLE
8066: LD_INT 1
8068: DEC
8069: ST_TO_ADDR
8070: LD_INT 4
8072: PUSH
8073: NOP4
8077: MINUS
8078: PUSH
8079: FOR_TO
8080: IFFALSE 8172
// begin if i = sort then
8082: NOP4
8086: PUSH
8087: NOP4
8091: EQUAL
8092: IFFALSE 8096
// break ;
8094: GO 8172
// if GetClass ( i ) = 2 then
8096: NOP4
8100: PPUSH
8101: NOP4
8105: PUSH
8106: LD_INT 2
8108: EQUAL
8109: IFFALSE 8113
// continue ;
8111: GO 8079
// p := Insert ( p , p + 1 , sort [ i ] ) ;
8113: NOP4
8117: PUSH
8118: NOP4
8122: PPUSH
8123: NOP4
8127: PUSH
8128: LD_INT 1
8130: PLUS
8131: PPUSH
8132: NOP4
8136: PUSH
8137: NOP4
8141: ARRAY
8142: PPUSH
8143: NOP4
8147: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
8148: NOP4
8152: PUSH
8153: NOP4
8157: PUSH
8158: NOP4
8162: PUSH
8163: NOP4
8167: ARRAY
8168: DIFF
8169: ST_TO_ADDR
// end ;
8170: GO 8079
8172: POP
8173: POP
// if p then
8174: NOP4
8178: IFFALSE 8203
// result := Replace ( result , 2 , p ) ;
8180: NOP4
8184: PUSH
8185: NOP4
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: NOP4
8197: PPUSH
8198: NOP4
8202: ST_TO_ADDR
// end else
8203: GO 8249
// for i = eng downto 5 do
8205: NOP4
8209: PUSH
8210: DOUBLE
8211: NOP4
8215: INC
8216: ST_TO_ADDR
8217: LD_INT 5
8219: PUSH
8220: FOR_DOWNTO
8221: IFFALSE 8247
// tmp := tmp union eng [ i ] ;
8223: NOP4
8227: PUSH
8228: NOP4
8232: PUSH
8233: NOP4
8237: PUSH
8238: NOP4
8242: ARRAY
8243: UNION
8244: ST_TO_ADDR
8245: GO 8220
8247: POP
8248: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
8249: NOP4
8253: PUSH
8254: NOP4
8258: PPUSH
8259: LD_INT 1
8261: PPUSH
8262: NOP4
8266: PUSH
8267: NOP4
8271: DIFF
8272: PPUSH
8273: NOP4
8277: ST_TO_ADDR
// exit ;
8278: GO 8280
// end ; end ;
8280: LD_VAR 0 2
8284: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
8285: LD_INT 0
8287: PPUSH
8288: PPUSH
8289: PPUSH
// if not mc_bases then
8290: NOP4
8294: NOT
8295: IFFALSE 8299
// exit ;
8297: GO 8405
// for i = 1 to mc_bases do
8299: NOP4
8303: PUSH
8304: DOUBLE
8305: LD_INT 1
8307: DEC
8308: ST_TO_ADDR
8309: NOP4
8313: PUSH
8314: FOR_TO
8315: IFFALSE 8396
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8317: NOP4
8321: PUSH
8322: NOP4
8326: PUSH
8327: NOP4
8331: ARRAY
8332: PPUSH
8333: LD_INT 21
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 3
8345: PUSH
8346: LD_INT 24
8348: PUSH
8349: LD_INT 1000
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PPUSH
8364: NOP4
8368: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
8369: NOP4
8373: PUSH
8374: NOP4
8378: PPUSH
8379: NOP4
8383: PPUSH
8384: NOP4
8388: PPUSH
8389: NOP4
8393: ST_TO_ADDR
// end ;
8394: GO 8314
8396: POP
8397: POP
// RaiseSailEvent ( 101 ) ;
8398: LD_INT 101
8400: PPUSH
8401: NOP4
// end ;
8405: LD_VAR 0 1
8409: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
8414: PPUSH
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
// if not mc_bases then
8419: NOP4
8423: NOT
8424: IFFALSE 8428
// exit ;
8426: GO 9001
// for i = 1 to mc_bases do
8428: NOP4
8432: PUSH
8433: DOUBLE
8434: LD_INT 1
8436: DEC
8437: ST_TO_ADDR
8438: NOP4
8442: PUSH
8443: FOR_TO
8444: IFFALSE 8992
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
8446: NOP4
8450: PUSH
8451: NOP4
8455: PUSH
8456: NOP4
8460: ARRAY
8461: PUSH
8462: NOP4
8466: PUSH
8467: NOP4
8471: ARRAY
8472: UNION
8473: PPUSH
8474: LD_INT 21
8476: PUSH
8477: LD_INT 1
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 1
8486: PUSH
8487: LD_INT 3
8489: PUSH
8490: LD_INT 54
8492: PUSH
8493: EMPTY
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 3
8502: PUSH
8503: LD_INT 24
8505: PUSH
8506: LD_INT 800
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: NOP4
8530: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
8531: NOP4
8535: PUSH
8536: NOP4
8540: PUSH
8541: NOP4
8545: ARRAY
8546: PPUSH
8547: LD_INT 21
8549: PUSH
8550: LD_INT 1
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: LD_INT 3
8562: PUSH
8563: LD_INT 54
8565: PUSH
8566: EMPTY
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: LD_INT 24
8578: PUSH
8579: LD_INT 250
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PPUSH
8599: NOP4
8603: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
8604: NOP4
8608: PUSH
8609: NOP4
8613: PUSH
8614: NOP4
8618: DIFF
8619: ST_TO_ADDR
// if not need_heal_1 then
8620: NOP4
8624: NOT
8625: IFFALSE 8658
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
8627: NOP4
8631: PUSH
8632: NOP4
8636: PPUSH
8637: NOP4
8641: PUSH
8642: LD_INT 1
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PPUSH
8649: EMPTY
8650: PPUSH
8651: NOP4
8655: ST_TO_ADDR
8656: GO 8728
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
8658: NOP4
8662: PUSH
8663: NOP4
8667: PPUSH
8668: NOP4
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: NOP4
8684: PUSH
8685: NOP4
8689: ARRAY
8690: PUSH
8691: LD_INT 1
8693: ARRAY
8694: PPUSH
8695: LD_INT 3
8697: PUSH
8698: LD_INT 24
8700: PUSH
8701: LD_INT 1000
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PPUSH
8712: NOP4
8716: PUSH
8717: NOP4
8721: UNION
8722: PPUSH
8723: NOP4
8727: ST_TO_ADDR
// if not need_heal_2 then
8728: NOP4
8732: NOT
8733: IFFALSE 8766
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
8735: NOP4
8739: PUSH
8740: NOP4
8744: PPUSH
8745: NOP4
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PPUSH
8757: EMPTY
8758: PPUSH
8759: NOP4
8763: ST_TO_ADDR
8764: GO 8798
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
8766: NOP4
8770: PUSH
8771: NOP4
8775: PPUSH
8776: NOP4
8780: PUSH
8781: LD_INT 2
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PPUSH
8788: NOP4
8792: PPUSH
8793: NOP4
8797: ST_TO_ADDR
// if need_heal_2 then
8798: NOP4
8802: IFFALSE 8974
// for j in need_heal_2 do
8804: NOP4
8808: PUSH
8809: NOP4
8813: PUSH
8814: FOR_IN
8815: IFFALSE 8972
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
8817: NOP4
8821: PUSH
8822: NOP4
8826: PUSH
8827: NOP4
8831: ARRAY
8832: PPUSH
8833: LD_INT 2
8835: PUSH
8836: LD_INT 30
8838: PUSH
8839: LD_INT 6
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 30
8848: PUSH
8849: LD_INT 7
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 30
8858: PUSH
8859: LD_INT 8
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 30
8868: PUSH
8869: LD_INT 0
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 30
8878: PUSH
8879: LD_INT 1
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 25
8888: PUSH
8889: LD_INT 4
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: PPUSH
8905: NOP4
8909: ST_TO_ADDR
// if tmp then
8910: NOP4
8914: IFFALSE 8970
// begin k := NearestUnitToUnit ( tmp , j ) ;
8916: NOP4
8920: PUSH
8921: NOP4
8925: PPUSH
8926: NOP4
8930: PPUSH
8931: NOP4
8935: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
8936: NOP4
8940: PPUSH
8941: NOP4
8945: PPUSH
8946: NOP4
8950: PUSH
8951: LD_INT 7
8953: GREATER
8954: IFFALSE 8970
// ComMoveUnit ( j , k ) ;
8956: NOP4
8960: PPUSH
8961: NOP4
8965: PPUSH
8966: NOP4
// end ; end ;
8970: GO 8814
8972: POP
8973: POP
// if not need_heal_1 and not need_heal_2 then
8974: NOP4
8978: NOT
8979: PUSH
8980: NOP4
8984: NOT
8985: AND
8986: IFFALSE 8990
// continue ;
8988: GO 8443
// end ;
8990: GO 8443
8992: POP
8993: POP
// RaiseSailEvent ( 102 ) ;
8994: LD_INT 102
8996: PPUSH
8997: NOP4
// end ;
9001: LD_VAR 0 1
9005: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
9006: LD_INT 0
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
9012: PPUSH
// if not mc_bases then
9013: NOP4
9017: NOT
9018: IFFALSE 9022
// exit ;
9020: GO 9407
// for i = 1 to mc_bases do
9022: NOP4
9026: PUSH
9027: DOUBLE
9028: LD_INT 1
9030: DEC
9031: ST_TO_ADDR
9032: NOP4
9036: PUSH
9037: FOR_TO
9038: IFFALSE 9405
// begin if not mc_building_need_repair [ i ] then
9040: NOP4
9044: PUSH
9045: NOP4
9049: ARRAY
9050: NOT
9051: IFFALSE 9089
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
9053: NOP4
9057: PUSH
9058: NOP4
9062: PPUSH
9063: NOP4
9067: PPUSH
9068: EMPTY
9069: PPUSH
9070: NOP4
9074: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
9075: NOP4
9079: PPUSH
9080: LD_INT 101
9082: PPUSH
9083: NOP4
// continue ;
9087: GO 9037
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
9089: NOP4
9093: PUSH
9094: NOP4
9098: PPUSH
9099: NOP4
9103: PPUSH
9104: EMPTY
9105: PPUSH
9106: NOP4
9110: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
9111: NOP4
9115: PPUSH
9116: LD_INT 103
9118: PPUSH
9119: NOP4
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
9123: NOP4
9127: PUSH
9128: NOP4
9132: PUSH
9133: NOP4
9137: ARRAY
9138: PUSH
9139: NOP4
9143: PUSH
9144: NOP4
9148: ARRAY
9149: UNION
9150: PPUSH
9151: LD_INT 2
9153: PUSH
9154: LD_INT 25
9156: PUSH
9157: LD_INT 2
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: LD_INT 25
9166: PUSH
9167: LD_INT 16
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: PUSH
9179: EMPTY
9180: LIST
9181: PPUSH
9182: NOP4
9186: ST_TO_ADDR
// if not tmp then
9187: NOP4
9191: NOT
9192: IFFALSE 9196
// continue ;
9194: GO 9037
// for j in tmp do
9196: NOP4
9200: PUSH
9201: NOP4
9205: PUSH
9206: FOR_IN
9207: IFFALSE 9401
// begin if mc_need_heal [ i ] then
9209: NOP4
9213: PUSH
9214: NOP4
9218: ARRAY
9219: IFFALSE 9267
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
9221: NOP4
9225: PUSH
9226: NOP4
9230: PUSH
9231: NOP4
9235: ARRAY
9236: PUSH
9237: LD_INT 1
9239: ARRAY
9240: IN
9241: PUSH
9242: NOP4
9246: PUSH
9247: NOP4
9251: PUSH
9252: NOP4
9256: ARRAY
9257: PUSH
9258: LD_INT 2
9260: ARRAY
9261: IN
9262: OR
9263: IFFALSE 9267
// continue ;
9265: GO 9206
// if IsInUnit ( j ) then
9267: NOP4
9271: PPUSH
9272: NOP4
9276: IFFALSE 9287
// ComExitBuilding ( j ) ;
9278: NOP4
9282: PPUSH
9283: NOP4
// if not j in mc_building_repairs [ i ] then
9287: NOP4
9291: PUSH
9292: NOP4
9296: PUSH
9297: NOP4
9301: ARRAY
9302: IN
9303: NOT
9304: IFFALSE 9362
// begin SetTag ( j , 101 ) ;
9306: NOP4
9310: PPUSH
9311: LD_INT 101
9313: PPUSH
9314: NOP4
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
9318: NOP4
9322: PUSH
9323: NOP4
9327: PPUSH
9328: NOP4
9332: PUSH
9333: NOP4
9337: PUSH
9338: NOP4
9342: ARRAY
9343: PUSH
9344: LD_INT 1
9346: PLUS
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PPUSH
9352: NOP4
9356: PPUSH
9357: NOP4
9361: ST_TO_ADDR
// end ; wait ( 1 ) ;
9362: LD_INT 1
9364: PPUSH
9365: NOP4
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
9369: NOP4
9373: PPUSH
9374: NOP4
9378: PUSH
9379: NOP4
9383: ARRAY
9384: PPUSH
9385: NOP4
9389: PPUSH
9390: NOP4
9394: PPUSH
9395: NOP4
// end ;
9399: GO 9206
9401: POP
9402: POP
// end ;
9403: GO 9037
9405: POP
9406: POP
// end ;
9407: LD_VAR 0 1
9411: RET
// export function MC_Heal ; var i , j , tmp ; begin
9412: LD_INT 0
9414: PPUSH
9415: PPUSH
9416: PPUSH
9417: PPUSH
// if not mc_bases then
9418: NOP4
9422: NOT
9423: IFFALSE 9427
// exit ;
9425: GO 9829
// for i = 1 to mc_bases do
9427: NOP4
9431: PUSH
9432: DOUBLE
9433: LD_INT 1
9435: DEC
9436: ST_TO_ADDR
9437: NOP4
9441: PUSH
9442: FOR_TO
9443: IFFALSE 9827
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
9445: NOP4
9449: PUSH
9450: NOP4
9454: ARRAY
9455: PUSH
9456: LD_INT 1
9458: ARRAY
9459: NOT
9460: PUSH
9461: NOP4
9465: PUSH
9466: NOP4
9470: ARRAY
9471: PUSH
9472: LD_INT 2
9474: ARRAY
9475: NOT
9476: AND
9477: IFFALSE 9515
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
9479: NOP4
9483: PUSH
9484: NOP4
9488: PPUSH
9489: NOP4
9493: PPUSH
9494: EMPTY
9495: PPUSH
9496: NOP4
9500: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
9501: NOP4
9505: PPUSH
9506: LD_INT 102
9508: PPUSH
9509: NOP4
// continue ;
9513: GO 9442
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
9515: NOP4
9519: PUSH
9520: NOP4
9524: PUSH
9525: NOP4
9529: ARRAY
9530: PPUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 4
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PPUSH
9541: NOP4
9545: ST_TO_ADDR
// if not tmp then
9546: NOP4
9550: NOT
9551: IFFALSE 9555
// continue ;
9553: GO 9442
// if mc_taming [ i ] then
9555: NOP4
9559: PUSH
9560: NOP4
9564: ARRAY
9565: IFFALSE 9589
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
9567: NOP4
9571: PUSH
9572: NOP4
9576: PPUSH
9577: NOP4
9581: PPUSH
9582: EMPTY
9583: PPUSH
9584: NOP4
9588: ST_TO_ADDR
// for j in tmp do
9589: NOP4
9593: PUSH
9594: NOP4
9598: PUSH
9599: FOR_IN
9600: IFFALSE 9823
// begin if IsInUnit ( j ) then
9602: NOP4
9606: PPUSH
9607: NOP4
9611: IFFALSE 9622
// ComExitBuilding ( j ) ;
9613: NOP4
9617: PPUSH
9618: NOP4
// if not j in mc_healers [ i ] then
9622: NOP4
9626: PUSH
9627: NOP4
9631: PUSH
9632: NOP4
9636: ARRAY
9637: IN
9638: NOT
9639: IFFALSE 9685
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
9641: NOP4
9645: PUSH
9646: NOP4
9650: PPUSH
9651: NOP4
9655: PUSH
9656: NOP4
9660: PUSH
9661: NOP4
9665: ARRAY
9666: PUSH
9667: LD_INT 1
9669: PLUS
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PPUSH
9675: NOP4
9679: PPUSH
9680: NOP4
9684: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
9685: NOP4
9689: PPUSH
9690: NOP4
9694: PUSH
9695: LD_INT 102
9697: NONEQUAL
9698: IFFALSE 9712
// SetTag ( j , 102 ) ;
9700: NOP4
9704: PPUSH
9705: LD_INT 102
9707: PPUSH
9708: NOP4
// Wait ( 3 ) ;
9712: LD_INT 3
9714: PPUSH
9715: NOP4
// if mc_need_heal [ i ] [ 1 ] then
9719: NOP4
9723: PUSH
9724: NOP4
9728: ARRAY
9729: PUSH
9730: LD_INT 1
9732: ARRAY
9733: IFFALSE 9765
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
9735: NOP4
9739: PPUSH
9740: NOP4
9744: PUSH
9745: NOP4
9749: ARRAY
9750: PUSH
9751: LD_INT 1
9753: ARRAY
9754: PUSH
9755: LD_INT 1
9757: ARRAY
9758: PPUSH
9759: NOP4
9763: GO 9821
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
9765: NOP4
9769: PPUSH
9770: NOP4
9774: NOT
9775: PUSH
9776: NOP4
9780: PUSH
9781: NOP4
9785: ARRAY
9786: PUSH
9787: LD_INT 2
9789: ARRAY
9790: AND
9791: IFFALSE 9821
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
9793: NOP4
9797: PPUSH
9798: NOP4
9802: PUSH
9803: NOP4
9807: ARRAY
9808: PUSH
9809: LD_INT 2
9811: ARRAY
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: NOP4
// end ;
9821: GO 9599
9823: POP
9824: POP
// end ;
9825: GO 9442
9827: POP
9828: POP
// end ;
9829: LD_VAR 0 1
9833: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
9834: LD_INT 0
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
9840: PPUSH
// if not mc_bases then
9841: NOP4
9845: NOT
9846: IFFALSE 9850
// exit ;
9848: GO 10993
// for i = 1 to mc_bases do
9850: NOP4
9854: PUSH
9855: DOUBLE
9856: LD_INT 1
9858: DEC
9859: ST_TO_ADDR
9860: NOP4
9864: PUSH
9865: FOR_TO
9866: IFFALSE 10991
// begin if mc_scan [ i ] then
9868: NOP4
9872: PUSH
9873: NOP4
9877: ARRAY
9878: IFFALSE 9882
// continue ;
9880: GO 9865
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
9882: NOP4
9886: PUSH
9887: NOP4
9891: ARRAY
9892: NOT
9893: PUSH
9894: NOP4
9898: PUSH
9899: NOP4
9903: ARRAY
9904: NOT
9905: AND
9906: PUSH
9907: NOP4
9911: PUSH
9912: NOP4
9916: ARRAY
9917: AND
9918: IFFALSE 9956
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
9920: NOP4
9924: PUSH
9925: NOP4
9929: PPUSH
9930: NOP4
9934: PPUSH
9935: EMPTY
9936: PPUSH
9937: NOP4
9941: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
9942: NOP4
9946: PPUSH
9947: LD_INT 103
9949: PPUSH
9950: NOP4
// continue ;
9954: GO 9865
// end ; if mc_construct_list [ i ] then
9956: NOP4
9960: PUSH
9961: NOP4
9965: ARRAY
9966: IFFALSE 10186
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
9968: NOP4
9972: PUSH
9973: NOP4
9977: PUSH
9978: NOP4
9982: ARRAY
9983: PPUSH
9984: LD_INT 25
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PPUSH
9994: NOP4
9998: PUSH
9999: NOP4
10003: PUSH
10004: NOP4
10008: ARRAY
10009: DIFF
10010: ST_TO_ADDR
// if not tmp then
10011: NOP4
10015: NOT
10016: IFFALSE 10020
// continue ;
10018: GO 9865
// for j in tmp do
10020: NOP4
10024: PUSH
10025: NOP4
10029: PUSH
10030: FOR_IN
10031: IFFALSE 10182
// begin if not mc_builders [ i ] then
10033: NOP4
10037: PUSH
10038: NOP4
10042: ARRAY
10043: NOT
10044: IFFALSE 10102
// begin SetTag ( j , 103 ) ;
10046: NOP4
10050: PPUSH
10051: LD_INT 103
10053: PPUSH
10054: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
10058: NOP4
10062: PUSH
10063: NOP4
10067: PPUSH
10068: NOP4
10072: PUSH
10073: NOP4
10077: PUSH
10078: NOP4
10082: ARRAY
10083: PUSH
10084: LD_INT 1
10086: PLUS
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PPUSH
10092: NOP4
10096: PPUSH
10097: NOP4
10101: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
10102: NOP4
10106: PPUSH
10107: NOP4
10111: IFFALSE 10122
// ComExitBuilding ( j ) ;
10113: NOP4
10117: PPUSH
10118: NOP4
// wait ( 3 ) ;
10122: LD_INT 3
10124: PPUSH
10125: NOP4
// if not mc_construct_list [ i ] then
10129: NOP4
10133: PUSH
10134: NOP4
10138: ARRAY
10139: NOT
10140: IFFALSE 10144
// break ;
10142: GO 10182
// if not HasTask ( j ) then
10144: NOP4
10148: PPUSH
10149: NOP4
10153: NOT
10154: IFFALSE 10180
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
10156: NOP4
10160: PPUSH
10161: NOP4
10165: PUSH
10166: NOP4
10170: ARRAY
10171: PUSH
10172: LD_INT 1
10174: ARRAY
10175: PPUSH
10176: NOP4
// end ;
10180: GO 10030
10182: POP
10183: POP
// end else
10184: GO 10989
// if mc_build_list [ i ] then
10186: NOP4
10190: PUSH
10191: NOP4
10195: ARRAY
10196: IFFALSE 10989
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
10198: NOP4
10202: PUSH
10203: NOP4
10207: PUSH
10208: NOP4
10212: ARRAY
10213: PPUSH
10214: LD_INT 2
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 0
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 30
10229: PUSH
10230: LD_INT 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: LIST
10241: PPUSH
10242: NOP4
10246: ST_TO_ADDR
// if depot then
10247: NOP4
10251: IFFALSE 10269
// depot := depot [ 1 ] else
10253: NOP4
10257: PUSH
10258: NOP4
10262: PUSH
10263: LD_INT 1
10265: ARRAY
10266: ST_TO_ADDR
10267: GO 10277
// depot := 0 ;
10269: NOP4
10273: PUSH
10274: LD_INT 0
10276: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
10277: NOP4
10281: PUSH
10282: NOP4
10286: ARRAY
10287: PUSH
10288: LD_INT 1
10290: ARRAY
10291: PUSH
10292: LD_INT 1
10294: ARRAY
10295: PPUSH
10296: NOP4
10300: PUSH
10301: NOP4
10305: PUSH
10306: NOP4
10310: ARRAY
10311: PPUSH
10312: LD_INT 2
10314: PUSH
10315: LD_INT 30
10317: PUSH
10318: LD_INT 2
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 30
10327: PUSH
10328: LD_INT 3
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: PPUSH
10340: NOP4
10344: NOT
10345: AND
10346: IFFALSE 10451
// begin for j = 1 to mc_build_list [ i ] do
10348: NOP4
10352: PUSH
10353: DOUBLE
10354: LD_INT 1
10356: DEC
10357: ST_TO_ADDR
10358: NOP4
10362: PUSH
10363: NOP4
10367: ARRAY
10368: PUSH
10369: FOR_TO
10370: IFFALSE 10449
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
10372: NOP4
10376: PUSH
10377: NOP4
10381: ARRAY
10382: PUSH
10383: NOP4
10387: ARRAY
10388: PUSH
10389: LD_INT 1
10391: ARRAY
10392: PUSH
10393: LD_INT 2
10395: EQUAL
10396: IFFALSE 10447
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
10398: NOP4
10402: PUSH
10403: NOP4
10407: PPUSH
10408: NOP4
10412: PPUSH
10413: NOP4
10417: PUSH
10418: NOP4
10422: ARRAY
10423: PPUSH
10424: NOP4
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: LD_INT 0
10434: PPUSH
10435: NOP4
10439: PPUSH
10440: NOP4
10444: ST_TO_ADDR
// break ;
10445: GO 10449
// end ;
10447: GO 10369
10449: POP
10450: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
10451: NOP4
10455: PUSH
10456: NOP4
10460: ARRAY
10461: PUSH
10462: LD_INT 1
10464: ARRAY
10465: PUSH
10466: LD_INT 1
10468: ARRAY
10469: PUSH
10470: LD_INT 0
10472: EQUAL
10473: PUSH
10474: NOP4
10478: PUSH
10479: NOP4
10483: PPUSH
10484: NOP4
10488: PUSH
10489: NOP4
10493: ARRAY
10494: PUSH
10495: LD_INT 1
10497: ARRAY
10498: PUSH
10499: LD_INT 1
10501: ARRAY
10502: PPUSH
10503: NOP4
10507: PUSH
10508: NOP4
10512: ARRAY
10513: PUSH
10514: LD_INT 1
10516: ARRAY
10517: PUSH
10518: LD_INT 2
10520: ARRAY
10521: PPUSH
10522: NOP4
10526: PUSH
10527: NOP4
10531: ARRAY
10532: PUSH
10533: LD_INT 1
10535: ARRAY
10536: PUSH
10537: LD_INT 3
10539: ARRAY
10540: PPUSH
10541: NOP4
10545: PUSH
10546: NOP4
10550: ARRAY
10551: PUSH
10552: LD_INT 1
10554: ARRAY
10555: PUSH
10556: LD_INT 4
10558: ARRAY
10559: PPUSH
10560: NOP4
10564: AND
10565: OR
10566: IFFALSE 10847
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
10568: NOP4
10572: PUSH
10573: NOP4
10577: PUSH
10578: NOP4
10582: ARRAY
10583: PPUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PPUSH
10594: NOP4
10598: PUSH
10599: NOP4
10603: PUSH
10604: NOP4
10608: ARRAY
10609: DIFF
10610: ST_TO_ADDR
// if not tmp then
10611: NOP4
10615: NOT
10616: IFFALSE 10620
// continue ;
10618: GO 9865
// for j in tmp do
10620: NOP4
10624: PUSH
10625: NOP4
10629: PUSH
10630: FOR_IN
10631: IFFALSE 10843
// begin if not mc_builders [ i ] then
10633: NOP4
10637: PUSH
10638: NOP4
10642: ARRAY
10643: NOT
10644: IFFALSE 10702
// begin SetTag ( j , 103 ) ;
10646: NOP4
10650: PPUSH
10651: LD_INT 103
10653: PPUSH
10654: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
10658: NOP4
10662: PUSH
10663: NOP4
10667: PPUSH
10668: NOP4
10672: PUSH
10673: NOP4
10677: PUSH
10678: NOP4
10682: ARRAY
10683: PUSH
10684: LD_INT 1
10686: PLUS
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PPUSH
10692: NOP4
10696: PPUSH
10697: NOP4
10701: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
10702: NOP4
10706: PPUSH
10707: NOP4
10711: IFFALSE 10722
// ComExitBuilding ( j ) ;
10713: NOP4
10717: PPUSH
10718: NOP4
// wait ( 3 ) ;
10722: LD_INT 3
10724: PPUSH
10725: NOP4
// if not mc_build_list [ i ] then
10729: NOP4
10733: PUSH
10734: NOP4
10738: ARRAY
10739: NOT
10740: IFFALSE 10744
// break ;
10742: GO 10843
// if not HasTask ( j ) then
10744: NOP4
10748: PPUSH
10749: NOP4
10753: NOT
10754: IFFALSE 10841
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
10756: NOP4
10760: PPUSH
10761: NOP4
10765: PUSH
10766: NOP4
10770: ARRAY
10771: PUSH
10772: LD_INT 1
10774: ARRAY
10775: PUSH
10776: LD_INT 1
10778: ARRAY
10779: PPUSH
10780: NOP4
10784: PUSH
10785: NOP4
10789: ARRAY
10790: PUSH
10791: LD_INT 1
10793: ARRAY
10794: PUSH
10795: LD_INT 2
10797: ARRAY
10798: PPUSH
10799: NOP4
10803: PUSH
10804: NOP4
10808: ARRAY
10809: PUSH
10810: LD_INT 1
10812: ARRAY
10813: PUSH
10814: LD_INT 3
10816: ARRAY
10817: PPUSH
10818: NOP4
10822: PUSH
10823: NOP4
10827: ARRAY
10828: PUSH
10829: LD_INT 1
10831: ARRAY
10832: PUSH
10833: LD_INT 4
10835: ARRAY
10836: PPUSH
10837: NOP4
// end ;
10841: GO 10630
10843: POP
10844: POP
// end else
10845: GO 10989
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
10847: NOP4
10851: PUSH
10852: NOP4
10856: ARRAY
10857: PPUSH
10858: NOP4
10862: PUSH
10863: NOP4
10867: ARRAY
10868: PUSH
10869: LD_INT 1
10871: ARRAY
10872: PUSH
10873: LD_INT 1
10875: ARRAY
10876: PPUSH
10877: NOP4
10881: PUSH
10882: NOP4
10886: ARRAY
10887: PUSH
10888: LD_INT 1
10890: ARRAY
10891: PUSH
10892: LD_INT 2
10894: ARRAY
10895: PPUSH
10896: NOP4
10900: PUSH
10901: NOP4
10905: ARRAY
10906: PUSH
10907: LD_INT 1
10909: ARRAY
10910: PUSH
10911: LD_INT 3
10913: ARRAY
10914: PPUSH
10915: NOP4
10919: PUSH
10920: NOP4
10924: ARRAY
10925: PUSH
10926: LD_INT 1
10928: ARRAY
10929: PUSH
10930: LD_INT 4
10932: ARRAY
10933: PPUSH
10934: NOP4
10938: NOT
10939: IFFALSE 10989
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
10941: NOP4
10945: PUSH
10946: NOP4
10950: PPUSH
10951: NOP4
10955: PPUSH
10956: NOP4
10960: PUSH
10961: NOP4
10965: ARRAY
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: LD_INT 1
10972: NEG
10973: PPUSH
10974: LD_INT 0
10976: PPUSH
10977: NOP4
10981: PPUSH
10982: NOP4
10986: ST_TO_ADDR
// continue ;
10987: GO 9865
// end ; end ; end ;
10989: GO 9865
10991: POP
10992: POP
// end ;
10993: LD_VAR 0 1
10997: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
10998: LD_INT 0
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
11005: PPUSH
// if not mc_bases then
11006: NOP4
11010: NOT
11011: IFFALSE 11015
// exit ;
11013: GO 11442
// for i = 1 to mc_bases do
11015: NOP4
11019: PUSH
11020: DOUBLE
11021: LD_INT 1
11023: DEC
11024: ST_TO_ADDR
11025: NOP4
11029: PUSH
11030: FOR_TO
11031: IFFALSE 11440
// begin tmp := mc_build_upgrade [ i ] ;
11033: NOP4
11037: PUSH
11038: NOP4
11042: PUSH
11043: NOP4
11047: ARRAY
11048: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
11049: NOP4
11053: PUSH
11054: NOP4
11058: PUSH
11059: NOP4
11063: ARRAY
11064: PPUSH
11065: LD_INT 2
11067: PUSH
11068: LD_INT 30
11070: PUSH
11071: LD_INT 6
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 30
11080: PUSH
11081: LD_INT 7
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: PPUSH
11093: NOP4
11097: ST_TO_ADDR
// if not tmp and not lab then
11098: NOP4
11102: NOT
11103: PUSH
11104: NOP4
11108: NOT
11109: AND
11110: IFFALSE 11114
// continue ;
11112: GO 11030
// if tmp then
11114: NOP4
11118: IFFALSE 11238
// for j in tmp do
11120: NOP4
11124: PUSH
11125: NOP4
11129: PUSH
11130: FOR_IN
11131: IFFALSE 11236
// begin if UpgradeCost ( j ) then
11133: NOP4
11137: PPUSH
11138: NOP4
11142: IFFALSE 11234
// begin ComUpgrade ( j ) ;
11144: NOP4
11148: PPUSH
11149: NOP4
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
11153: NOP4
11157: PUSH
11158: NOP4
11162: PPUSH
11163: NOP4
11167: PPUSH
11168: NOP4
11172: PUSH
11173: NOP4
11177: ARRAY
11178: PUSH
11179: NOP4
11183: DIFF
11184: PPUSH
11185: NOP4
11189: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
11190: NOP4
11194: PUSH
11195: NOP4
11199: PPUSH
11200: NOP4
11204: PUSH
11205: NOP4
11209: PUSH
11210: NOP4
11214: ARRAY
11215: PUSH
11216: LD_INT 1
11218: PLUS
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: NOP4
11228: PPUSH
11229: NOP4
11233: ST_TO_ADDR
// end ; end ;
11234: GO 11130
11236: POP
11237: POP
// if not lab or not mc_lab_upgrade [ i ] then
11238: NOP4
11242: NOT
11243: PUSH
11244: NOP4
11248: PUSH
11249: NOP4
11253: ARRAY
11254: NOT
11255: OR
11256: IFFALSE 11260
// continue ;
11258: GO 11030
// for j in lab do
11260: NOP4
11264: PUSH
11265: NOP4
11269: PUSH
11270: FOR_IN
11271: IFFALSE 11436
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
11273: NOP4
11277: PPUSH
11278: NOP4
11282: PUSH
11283: LD_INT 6
11285: PUSH
11286: LD_INT 7
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: IN
11293: PUSH
11294: NOP4
11298: PPUSH
11299: NOP4
11303: PUSH
11304: LD_INT 1
11306: NONEQUAL
11307: AND
11308: IFFALSE 11434
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
11310: NOP4
11314: PPUSH
11315: NOP4
11319: PUSH
11320: NOP4
11324: ARRAY
11325: PUSH
11326: LD_INT 1
11328: ARRAY
11329: PPUSH
11330: NOP4
11334: IFFALSE 11434
// begin ComCancel ( j ) ;
11336: NOP4
11340: PPUSH
11341: NOP4
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
11345: NOP4
11349: PPUSH
11350: NOP4
11354: PUSH
11355: NOP4
11359: ARRAY
11360: PUSH
11361: LD_INT 1
11363: ARRAY
11364: PPUSH
11365: NOP4
// if not j in mc_construct_list [ i ] then
11369: NOP4
11373: PUSH
11374: NOP4
11378: PUSH
11379: NOP4
11383: ARRAY
11384: IN
11385: NOT
11386: IFFALSE 11432
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
11388: NOP4
11392: PUSH
11393: NOP4
11397: PPUSH
11398: NOP4
11402: PUSH
11403: NOP4
11407: PUSH
11408: NOP4
11412: ARRAY
11413: PUSH
11414: LD_INT 1
11416: PLUS
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: NOP4
11426: PPUSH
11427: NOP4
11431: ST_TO_ADDR
// break ;
11432: GO 11436
// end ; end ; end ;
11434: GO 11270
11436: POP
11437: POP
// end ;
11438: GO 11030
11440: POP
11441: POP
// end ;
11442: LD_VAR 0 1
11446: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
11447: LD_INT 0
11449: PPUSH
11450: PPUSH
11451: PPUSH
11452: PPUSH
11453: PPUSH
11454: PPUSH
11455: PPUSH
11456: PPUSH
11457: PPUSH
// if not mc_bases then
11458: NOP4
11462: NOT
11463: IFFALSE 11467
// exit ;
11465: GO 11872
// for i = 1 to mc_bases do
11467: NOP4
11471: PUSH
11472: DOUBLE
11473: LD_INT 1
11475: DEC
11476: ST_TO_ADDR
11477: NOP4
11481: PUSH
11482: FOR_TO
11483: IFFALSE 11870
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
11485: NOP4
11489: PUSH
11490: NOP4
11494: ARRAY
11495: NOT
11496: PUSH
11497: NOP4
11501: PUSH
11502: NOP4
11506: ARRAY
11507: PPUSH
11508: LD_INT 30
11510: PUSH
11511: LD_INT 3
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PPUSH
11518: NOP4
11522: NOT
11523: OR
11524: IFFALSE 11528
// continue ;
11526: GO 11482
// busy := false ;
11528: NOP4
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
11536: NOP4
11540: PUSH
11541: NOP4
11545: PUSH
11546: NOP4
11550: ARRAY
11551: PPUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PPUSH
11562: NOP4
11566: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
11567: NOP4
11571: PUSH
11572: NOP4
11576: PUSH
11577: NOP4
11581: ARRAY
11582: PPUSH
11583: LD_INT 2
11585: PUSH
11586: LD_INT 30
11588: PUSH
11589: LD_INT 32
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 30
11598: PUSH
11599: LD_INT 33
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: LIST
11610: PPUSH
11611: NOP4
11615: ST_TO_ADDR
// if not t then
11616: NOP4
11620: NOT
11621: IFFALSE 11625
// continue ;
11623: GO 11482
// for j in tmp do
11625: NOP4
11629: PUSH
11630: NOP4
11634: PUSH
11635: FOR_IN
11636: IFFALSE 11666
// if not BuildingStatus ( j ) = bs_idle then
11638: NOP4
11642: PPUSH
11643: NOP4
11647: PUSH
11648: LD_INT 2
11650: EQUAL
11651: NOT
11652: IFFALSE 11664
// begin busy := true ;
11654: NOP4
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// break ;
11662: GO 11666
// end ;
11664: GO 11635
11666: POP
11667: POP
// if busy then
11668: NOP4
11672: IFFALSE 11676
// continue ;
11674: GO 11482
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
11676: NOP4
11680: PUSH
11681: NOP4
11685: PPUSH
11686: LD_INT 35
11688: PUSH
11689: LD_INT 0
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: NOP4
11700: ST_TO_ADDR
// if tw then
11701: NOP4
11705: IFFALSE 11782
// begin tw := tw [ 1 ] ;
11707: NOP4
11711: PUSH
11712: NOP4
11716: PUSH
11717: LD_INT 1
11719: ARRAY
11720: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
11721: NOP4
11725: PUSH
11726: NOP4
11730: PPUSH
11731: NOP4
11735: PUSH
11736: NOP4
11740: ARRAY
11741: PPUSH
11742: NOP4
11746: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
11747: NOP4
11751: PUSH
11752: NOP4
11756: ARRAY
11757: IFFALSE 11780
// if not weapon in mc_allowed_tower_weapons [ i ] then
11759: NOP4
11763: PUSH
11764: NOP4
11768: PUSH
11769: NOP4
11773: ARRAY
11774: IN
11775: NOT
11776: IFFALSE 11780
// continue ;
11778: GO 11482
// end else
11780: GO 11845
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
11782: NOP4
11786: PUSH
11787: NOP4
11791: PUSH
11792: NOP4
11796: ARRAY
11797: PPUSH
11798: NOP4
11802: PPUSH
11803: NOP4
11807: ST_TO_ADDR
// if not tmp2 then
11808: NOP4
11812: NOT
11813: IFFALSE 11817
// continue ;
11815: GO 11482
// tw := tmp2 [ 1 ] ;
11817: NOP4
11821: PUSH
11822: NOP4
11826: PUSH
11827: LD_INT 1
11829: ARRAY
11830: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
11831: NOP4
11835: PUSH
11836: NOP4
11840: PUSH
11841: LD_INT 2
11843: ARRAY
11844: ST_TO_ADDR
// end ; if not weapon then
11845: NOP4
11849: NOT
11850: IFFALSE 11854
// continue ;
11852: GO 11482
// ComPlaceWeapon ( tw , weapon ) ;
11854: NOP4
11858: PPUSH
11859: NOP4
11863: PPUSH
11864: NOP4
// end ;
11868: GO 11482
11870: POP
11871: POP
// end ;
11872: LD_VAR 0 1
11876: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
11877: LD_INT 0
11879: PPUSH
11880: PPUSH
11881: PPUSH
11882: PPUSH
11883: PPUSH
11884: PPUSH
// if not mc_bases then
11885: NOP4
11889: NOT
11890: IFFALSE 11894
// exit ;
11892: GO 12906
// for i = 1 to mc_bases do
11894: NOP4
11898: PUSH
11899: DOUBLE
11900: LD_INT 1
11902: DEC
11903: ST_TO_ADDR
11904: NOP4
11908: PUSH
11909: FOR_TO
11910: IFFALSE 12904
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
11912: NOP4
11916: PUSH
11917: NOP4
11921: ARRAY
11922: NOT
11923: PUSH
11924: NOP4
11928: PUSH
11929: NOP4
11933: ARRAY
11934: PUSH
11935: NOP4
11939: PUSH
11940: NOP4
11944: ARRAY
11945: EQUAL
11946: OR
11947: IFFALSE 11951
// continue ;
11949: GO 11909
// if mc_miners [ i ] then
11951: NOP4
11955: PUSH
11956: NOP4
11960: ARRAY
11961: IFFALSE 12591
// begin k := 1 ;
11963: NOP4
11967: PUSH
11968: LD_INT 1
11970: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
11971: NOP4
11975: PUSH
11976: DOUBLE
11977: NOP4
11981: PUSH
11982: NOP4
11986: ARRAY
11987: INC
11988: ST_TO_ADDR
11989: LD_INT 1
11991: PUSH
11992: FOR_DOWNTO
11993: IFFALSE 12589
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
11995: NOP4
11999: PUSH
12000: NOP4
12004: ARRAY
12005: PUSH
12006: NOP4
12010: ARRAY
12011: PPUSH
12012: NOP4
12016: PUSH
12017: NOP4
12021: PUSH
12022: NOP4
12026: ARRAY
12027: PUSH
12028: NOP4
12032: ARRAY
12033: PPUSH
12034: NOP4
12038: PUSH
12039: LD_INT 1
12041: NONEQUAL
12042: OR
12043: IFFALSE 12106
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
12045: NOP4
12049: PUSH
12050: NOP4
12054: PUSH
12055: NOP4
12059: ARRAY
12060: PUSH
12061: NOP4
12065: PUSH
12066: NOP4
12070: ARRAY
12071: PUSH
12072: NOP4
12076: ARRAY
12077: DIFF
12078: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
12079: NOP4
12083: PUSH
12084: NOP4
12088: PPUSH
12089: NOP4
12093: PPUSH
12094: NOP4
12098: PPUSH
12099: NOP4
12103: ST_TO_ADDR
// continue ;
12104: GO 11992
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
12106: NOP4
12110: PUSH
12111: NOP4
12115: ARRAY
12116: PUSH
12117: NOP4
12121: ARRAY
12122: PPUSH
12123: NOP4
12127: PUSH
12128: NOP4
12132: PUSH
12133: NOP4
12137: ARRAY
12138: PUSH
12139: NOP4
12143: ARRAY
12144: PPUSH
12145: NOP4
12149: PPUSH
12150: NOP4
12154: PUSH
12155: NOP4
12159: ARRAY
12160: PUSH
12161: NOP4
12165: ARRAY
12166: PUSH
12167: LD_INT 1
12169: ARRAY
12170: PPUSH
12171: NOP4
12175: PUSH
12176: NOP4
12180: ARRAY
12181: PUSH
12182: NOP4
12186: ARRAY
12187: PUSH
12188: LD_INT 2
12190: ARRAY
12191: PPUSH
12192: LD_INT 15
12194: PPUSH
12195: NOP4
12199: PUSH
12200: LD_INT 4
12202: ARRAY
12203: PUSH
12204: NOP4
12208: PUSH
12209: NOP4
12213: ARRAY
12214: PUSH
12215: NOP4
12219: ARRAY
12220: PPUSH
12221: LD_INT 10
12223: PPUSH
12224: NOP4
12228: PUSH
12229: LD_INT 4
12231: ARRAY
12232: OR
12233: AND
12234: IFFALSE 12257
// ComStop ( mc_miners [ i ] [ j ] ) ;
12236: NOP4
12240: PUSH
12241: NOP4
12245: ARRAY
12246: PUSH
12247: NOP4
12251: ARRAY
12252: PPUSH
12253: NOP4
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
12257: NOP4
12261: PUSH
12262: NOP4
12266: ARRAY
12267: PUSH
12268: NOP4
12272: ARRAY
12273: PPUSH
12274: NOP4
12278: PUSH
12279: LD_INT 1
12281: EQUAL
12282: PUSH
12283: NOP4
12287: PUSH
12288: NOP4
12292: ARRAY
12293: PUSH
12294: NOP4
12298: ARRAY
12299: PPUSH
12300: NOP4
12304: NOT
12305: AND
12306: PUSH
12307: NOP4
12311: PUSH
12312: NOP4
12316: ARRAY
12317: PUSH
12318: NOP4
12322: ARRAY
12323: PPUSH
12324: NOP4
12328: PPUSH
12329: NOP4
12333: PUSH
12334: NOP4
12338: ARRAY
12339: PUSH
12340: NOP4
12344: ARRAY
12345: PUSH
12346: LD_INT 1
12348: ARRAY
12349: PPUSH
12350: NOP4
12354: PUSH
12355: NOP4
12359: ARRAY
12360: PUSH
12361: NOP4
12365: ARRAY
12366: PUSH
12367: LD_INT 2
12369: ARRAY
12370: PPUSH
12371: LD_INT 15
12373: PPUSH
12374: NOP4
12378: PUSH
12379: LD_INT 4
12381: ARRAY
12382: PUSH
12383: LD_INT 0
12385: EQUAL
12386: AND
12387: PUSH
12388: NOP4
12392: PUSH
12393: NOP4
12397: ARRAY
12398: PUSH
12399: NOP4
12403: ARRAY
12404: PPUSH
12405: NOP4
12409: NOT
12410: AND
12411: IFFALSE 12587
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
12413: NOP4
12417: PUSH
12418: NOP4
12422: ARRAY
12423: PUSH
12424: NOP4
12428: ARRAY
12429: PPUSH
12430: NOP4
12434: IFFALSE 12457
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
12436: NOP4
12440: PUSH
12441: NOP4
12445: ARRAY
12446: PUSH
12447: NOP4
12451: ARRAY
12452: PPUSH
12453: NOP4
// if not HasTask ( mc_miners [ i ] [ j ] ) then
12457: NOP4
12461: PUSH
12462: NOP4
12466: ARRAY
12467: PUSH
12468: NOP4
12472: ARRAY
12473: PPUSH
12474: NOP4
12478: NOT
12479: IFFALSE 12547
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
12481: NOP4
12485: PUSH
12486: NOP4
12490: ARRAY
12491: PUSH
12492: NOP4
12496: ARRAY
12497: PPUSH
12498: NOP4
12502: PUSH
12503: NOP4
12507: ARRAY
12508: PUSH
12509: NOP4
12513: ARRAY
12514: PUSH
12515: LD_INT 1
12517: ARRAY
12518: PPUSH
12519: NOP4
12523: PUSH
12524: NOP4
12528: ARRAY
12529: PUSH
12530: NOP4
12534: ARRAY
12535: PUSH
12536: LD_INT 2
12538: ARRAY
12539: PPUSH
12540: LD_INT 0
12542: PPUSH
12543: NOP4
// k := k + 1 ;
12547: NOP4
12551: PUSH
12552: NOP4
12556: PUSH
12557: LD_INT 1
12559: PLUS
12560: ST_TO_ADDR
// if k > mc_mines [ i ] then
12561: NOP4
12565: PUSH
12566: NOP4
12570: PUSH
12571: NOP4
12575: ARRAY
12576: GREATER
12577: IFFALSE 12587
// k := 1 ;
12579: NOP4
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// end ; end ;
12587: GO 11992
12589: POP
12590: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
12591: NOP4
12595: PUSH
12596: NOP4
12600: PUSH
12601: NOP4
12605: ARRAY
12606: PPUSH
12607: LD_INT 2
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: LD_INT 4
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_INT 5
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 30
12632: PUSH
12633: LD_INT 32
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: PPUSH
12646: NOP4
12650: ST_TO_ADDR
// if not tmp then
12651: NOP4
12655: NOT
12656: IFFALSE 12660
// continue ;
12658: GO 11909
// list := [ ] ;
12660: NOP4
12664: PUSH
12665: EMPTY
12666: ST_TO_ADDR
// for j in tmp do
12667: NOP4
12671: PUSH
12672: NOP4
12676: PUSH
12677: FOR_IN
12678: IFFALSE 12747
// begin for k in UnitsInside ( j ) do
12680: NOP4
12684: PUSH
12685: NOP4
12689: PPUSH
12690: NOP4
12694: PUSH
12695: FOR_IN
12696: IFFALSE 12743
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
12698: NOP4
12702: PPUSH
12703: NOP4
12707: PUSH
12708: LD_INT 1
12710: EQUAL
12711: PUSH
12712: NOP4
12716: PPUSH
12717: NOP4
12721: NOT
12722: AND
12723: IFFALSE 12741
// list := list ^ k ;
12725: NOP4
12729: PUSH
12730: NOP4
12734: PUSH
12735: NOP4
12739: ADD
12740: ST_TO_ADDR
12741: GO 12695
12743: POP
12744: POP
// end ;
12745: GO 12677
12747: POP
12748: POP
// list := list diff mc_miners [ i ] ;
12749: NOP4
12753: PUSH
12754: NOP4
12758: PUSH
12759: NOP4
12763: PUSH
12764: NOP4
12768: ARRAY
12769: DIFF
12770: ST_TO_ADDR
// if not list then
12771: NOP4
12775: NOT
12776: IFFALSE 12780
// continue ;
12778: GO 11909
// k := mc_mines [ i ] - mc_miners [ i ] ;
12780: NOP4
12784: PUSH
12785: NOP4
12789: PUSH
12790: NOP4
12794: ARRAY
12795: PUSH
12796: NOP4
12800: PUSH
12801: NOP4
12805: ARRAY
12806: MINUS
12807: ST_TO_ADDR
// if k > list then
12808: NOP4
12812: PUSH
12813: NOP4
12817: GREATER
12818: IFFALSE 12830
// k := list ;
12820: NOP4
12824: PUSH
12825: NOP4
12829: ST_TO_ADDR
// for j = 1 to k do
12830: NOP4
12834: PUSH
12835: DOUBLE
12836: LD_INT 1
12838: DEC
12839: ST_TO_ADDR
12840: NOP4
12844: PUSH
12845: FOR_TO
12846: IFFALSE 12900
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
12848: NOP4
12852: PUSH
12853: NOP4
12857: PPUSH
12858: NOP4
12862: PUSH
12863: NOP4
12867: PUSH
12868: NOP4
12872: ARRAY
12873: PUSH
12874: LD_INT 1
12876: PLUS
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PPUSH
12882: NOP4
12886: PUSH
12887: NOP4
12891: ARRAY
12892: PPUSH
12893: NOP4
12897: ST_TO_ADDR
12898: GO 12845
12900: POP
12901: POP
// end ;
12902: GO 11909
12904: POP
12905: POP
// end ;
12906: LD_VAR 0 1
12910: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
12911: LD_INT 0
12913: PPUSH
12914: PPUSH
12915: PPUSH
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
12922: PPUSH
// if not mc_bases then
12923: NOP4
12927: NOT
12928: IFFALSE 12932
// exit ;
12930: GO 14663
// for i = 1 to mc_bases do
12932: NOP4
12936: PUSH
12937: DOUBLE
12938: LD_INT 1
12940: DEC
12941: ST_TO_ADDR
12942: NOP4
12946: PUSH
12947: FOR_TO
12948: IFFALSE 14661
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
12950: NOP4
12954: PUSH
12955: NOP4
12959: ARRAY
12960: NOT
12961: PUSH
12962: NOP4
12966: PUSH
12967: NOP4
12971: ARRAY
12972: OR
12973: IFFALSE 12977
// continue ;
12975: GO 12947
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
12977: NOP4
12981: PUSH
12982: NOP4
12986: ARRAY
12987: NOT
12988: PUSH
12989: NOP4
12993: PUSH
12994: NOP4
12998: ARRAY
12999: AND
13000: IFFALSE 13038
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
13002: NOP4
13006: PUSH
13007: NOP4
13011: PPUSH
13012: NOP4
13016: PPUSH
13017: EMPTY
13018: PPUSH
13019: NOP4
13023: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
13024: NOP4
13028: PPUSH
13029: LD_INT 107
13031: PPUSH
13032: NOP4
// continue ;
13036: GO 12947
// end ; target := [ ] ;
13038: NOP4
13042: PUSH
13043: EMPTY
13044: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
13045: NOP4
13049: PUSH
13050: DOUBLE
13051: NOP4
13055: PUSH
13056: NOP4
13060: ARRAY
13061: INC
13062: ST_TO_ADDR
13063: LD_INT 1
13065: PUSH
13066: FOR_DOWNTO
13067: IFFALSE 13327
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
13069: NOP4
13073: PUSH
13074: NOP4
13078: ARRAY
13079: PUSH
13080: NOP4
13084: ARRAY
13085: PUSH
13086: LD_INT 2
13088: ARRAY
13089: PPUSH
13090: NOP4
13094: PUSH
13095: NOP4
13099: ARRAY
13100: PUSH
13101: NOP4
13105: ARRAY
13106: PUSH
13107: LD_INT 3
13109: ARRAY
13110: PPUSH
13111: NOP4
13115: PUSH
13116: NOP4
13120: PUSH
13121: NOP4
13125: ARRAY
13126: PUSH
13127: NOP4
13131: ARRAY
13132: PUSH
13133: LD_INT 2
13135: ARRAY
13136: PPUSH
13137: NOP4
13141: PUSH
13142: NOP4
13146: ARRAY
13147: PUSH
13148: NOP4
13152: ARRAY
13153: PUSH
13154: LD_INT 3
13156: ARRAY
13157: PPUSH
13158: NOP4
13162: PUSH
13163: LD_INT 0
13165: EQUAL
13166: AND
13167: IFFALSE 13222
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
13169: NOP4
13173: PUSH
13174: NOP4
13178: PUSH
13179: NOP4
13183: ARRAY
13184: PPUSH
13185: NOP4
13189: PPUSH
13190: NOP4
13194: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
13195: NOP4
13199: PUSH
13200: NOP4
13204: PPUSH
13205: NOP4
13209: PPUSH
13210: NOP4
13214: PPUSH
13215: NOP4
13219: ST_TO_ADDR
// continue ;
13220: GO 13066
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
13222: NOP4
13226: PUSH
13227: NOP4
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: NOP4
13241: PPUSH
13242: NOP4
13246: PUSH
13247: NOP4
13251: ARRAY
13252: PUSH
13253: NOP4
13257: ARRAY
13258: PUSH
13259: LD_INT 2
13261: ARRAY
13262: PPUSH
13263: NOP4
13267: PUSH
13268: NOP4
13272: ARRAY
13273: PUSH
13274: NOP4
13278: ARRAY
13279: PUSH
13280: LD_INT 3
13282: ARRAY
13283: PPUSH
13284: LD_INT 30
13286: PPUSH
13287: NOP4
13291: PUSH
13292: LD_INT 4
13294: ARRAY
13295: PUSH
13296: LD_INT 0
13298: EQUAL
13299: IFFALSE 13325
// begin target := mc_crates [ i ] [ j ] ;
13301: NOP4
13305: PUSH
13306: NOP4
13310: PUSH
13311: NOP4
13315: ARRAY
13316: PUSH
13317: NOP4
13321: ARRAY
13322: ST_TO_ADDR
// break ;
13323: GO 13327
// end ; end ;
13325: GO 13066
13327: POP
13328: POP
// if not target then
13329: NOP4
13333: NOT
13334: IFFALSE 13338
// continue ;
13336: GO 12947
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
13338: NOP4
13342: PUSH
13343: NOP4
13347: PUSH
13348: NOP4
13352: ARRAY
13353: PPUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 3
13359: PUSH
13360: LD_INT 58
13362: PUSH
13363: EMPTY
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 61
13372: PUSH
13373: EMPTY
13374: LIST
13375: PUSH
13376: LD_INT 33
13378: PUSH
13379: LD_INT 5
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 33
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: LD_INT 34
13408: PUSH
13409: LD_INT 32
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 34
13418: PUSH
13419: LD_INT 51
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 34
13428: PUSH
13429: LD_INT 12
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PPUSH
13446: NOP4
13450: ST_TO_ADDR
// if not cargo then
13451: NOP4
13455: NOT
13456: IFFALSE 14099
// begin if mc_crates_collector [ i ] < 5 then
13458: NOP4
13462: PUSH
13463: NOP4
13467: ARRAY
13468: PUSH
13469: LD_INT 5
13471: LESS
13472: IFFALSE 13838
// begin if mc_ape [ i ] then
13474: NOP4
13478: PUSH
13479: NOP4
13483: ARRAY
13484: IFFALSE 13531
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
13486: NOP4
13490: PUSH
13491: NOP4
13495: PUSH
13496: NOP4
13500: ARRAY
13501: PPUSH
13502: LD_INT 25
13504: PUSH
13505: LD_INT 16
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 24
13514: PUSH
13515: LD_INT 750
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PPUSH
13526: NOP4
13530: ST_TO_ADDR
// if not tmp then
13531: NOP4
13535: NOT
13536: IFFALSE 13583
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
13538: NOP4
13542: PUSH
13543: NOP4
13547: PUSH
13548: NOP4
13552: ARRAY
13553: PPUSH
13554: LD_INT 25
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 24
13566: PUSH
13567: LD_INT 750
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PPUSH
13578: NOP4
13582: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
13583: NOP4
13587: PUSH
13588: NOP4
13592: ARRAY
13593: PUSH
13594: NOP4
13598: PUSH
13599: NOP4
13603: ARRAY
13604: PPUSH
13605: LD_INT 25
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 24
13617: PUSH
13618: LD_INT 750
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PPUSH
13629: NOP4
13633: AND
13634: PUSH
13635: NOP4
13639: PUSH
13640: LD_INT 5
13642: LESS
13643: AND
13644: IFFALSE 13726
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
13646: NOP4
13650: PUSH
13651: NOP4
13655: PUSH
13656: NOP4
13660: ARRAY
13661: PPUSH
13662: LD_INT 25
13664: PUSH
13665: LD_INT 2
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 24
13674: PUSH
13675: LD_INT 750
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: NOP4
13690: PUSH
13691: FOR_IN
13692: IFFALSE 13724
// begin tmp := tmp union j ;
13694: NOP4
13698: PUSH
13699: NOP4
13703: PUSH
13704: NOP4
13708: UNION
13709: ST_TO_ADDR
// if tmp >= 5 then
13710: NOP4
13714: PUSH
13715: LD_INT 5
13717: GREATEREQUAL
13718: IFFALSE 13722
// break ;
13720: GO 13724
// end ;
13722: GO 13691
13724: POP
13725: POP
// end ; if not tmp then
13726: NOP4
13730: NOT
13731: IFFALSE 13735
// continue ;
13733: GO 12947
// for j in tmp do
13735: NOP4
13739: PUSH
13740: NOP4
13744: PUSH
13745: FOR_IN
13746: IFFALSE 13836
// if not GetTag ( j ) then
13748: NOP4
13752: PPUSH
13753: NOP4
13757: NOT
13758: IFFALSE 13834
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
13760: NOP4
13764: PUSH
13765: NOP4
13769: PPUSH
13770: NOP4
13774: PUSH
13775: NOP4
13779: PUSH
13780: NOP4
13784: ARRAY
13785: PUSH
13786: LD_INT 1
13788: PLUS
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PPUSH
13794: NOP4
13798: PPUSH
13799: NOP4
13803: ST_TO_ADDR
// SetTag ( j , 107 ) ;
13804: NOP4
13808: PPUSH
13809: LD_INT 107
13811: PPUSH
13812: NOP4
// if mc_crates_collector [ i ] >= 5 then
13816: NOP4
13820: PUSH
13821: NOP4
13825: ARRAY
13826: PUSH
13827: LD_INT 5
13829: GREATEREQUAL
13830: IFFALSE 13834
// break ;
13832: GO 13836
// end ;
13834: GO 13745
13836: POP
13837: POP
// end ; if mc_crates_collector [ i ] and target then
13838: NOP4
13842: PUSH
13843: NOP4
13847: ARRAY
13848: PUSH
13849: NOP4
13853: AND
13854: IFFALSE 14097
// begin if mc_crates_collector [ i ] < target [ 1 ] then
13856: NOP4
13860: PUSH
13861: NOP4
13865: ARRAY
13866: PUSH
13867: NOP4
13871: PUSH
13872: LD_INT 1
13874: ARRAY
13875: LESS
13876: IFFALSE 13896
// tmp := mc_crates_collector [ i ] else
13878: NOP4
13882: PUSH
13883: NOP4
13887: PUSH
13888: NOP4
13892: ARRAY
13893: ST_TO_ADDR
13894: GO 13910
// tmp := target [ 1 ] ;
13896: NOP4
13900: PUSH
13901: NOP4
13905: PUSH
13906: LD_INT 1
13908: ARRAY
13909: ST_TO_ADDR
// k := 0 ;
13910: NOP4
13914: PUSH
13915: LD_INT 0
13917: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
13918: NOP4
13922: PUSH
13923: NOP4
13927: PUSH
13928: NOP4
13932: ARRAY
13933: PUSH
13934: FOR_IN
13935: IFFALSE 14095
// begin k := k + 1 ;
13937: NOP4
13941: PUSH
13942: NOP4
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: ST_TO_ADDR
// if k > tmp then
13951: NOP4
13955: PUSH
13956: NOP4
13960: GREATER
13961: IFFALSE 13965
// break ;
13963: GO 14095
// if not GetClass ( j ) in [ 2 , 16 ] then
13965: NOP4
13969: PPUSH
13970: NOP4
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: LD_INT 16
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: IN
13985: NOT
13986: IFFALSE 14039
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
13988: NOP4
13992: PUSH
13993: NOP4
13997: PPUSH
13998: NOP4
14002: PPUSH
14003: NOP4
14007: PUSH
14008: NOP4
14012: ARRAY
14013: PUSH
14014: NOP4
14018: DIFF
14019: PPUSH
14020: NOP4
14024: ST_TO_ADDR
// SetTag ( j , 0 ) ;
14025: NOP4
14029: PPUSH
14030: LD_INT 0
14032: PPUSH
14033: NOP4
// continue ;
14037: GO 13934
// end ; if IsInUnit ( j ) then
14039: NOP4
14043: PPUSH
14044: NOP4
14048: IFFALSE 14059
// ComExitBuilding ( j ) ;
14050: NOP4
14054: PPUSH
14055: NOP4
// wait ( 3 ) ;
14059: LD_INT 3
14061: PPUSH
14062: NOP4
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
14066: NOP4
14070: PPUSH
14071: NOP4
14075: PUSH
14076: LD_INT 2
14078: ARRAY
14079: PPUSH
14080: NOP4
14084: PUSH
14085: LD_INT 3
14087: ARRAY
14088: PPUSH
14089: NOP4
// end ;
14093: GO 13934
14095: POP
14096: POP
// end ; end else
14097: GO 14659
// begin for j in cargo do
14099: NOP4
14103: PUSH
14104: NOP4
14108: PUSH
14109: FOR_IN
14110: IFFALSE 14657
// begin if GetTag ( j ) <> 0 then
14112: NOP4
14116: PPUSH
14117: NOP4
14121: PUSH
14122: LD_INT 0
14124: NONEQUAL
14125: IFFALSE 14129
// continue ;
14127: GO 14109
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
14129: NOP4
14133: PPUSH
14134: NOP4
14138: PUSH
14139: LD_INT 1000
14141: LESS
14142: PUSH
14143: NOP4
14147: PPUSH
14148: NOP4
14152: PUSH
14153: NOP4
14157: ARRAY
14158: PPUSH
14159: NOP4
14163: NOT
14164: AND
14165: IFFALSE 14187
// ComMoveToArea ( j , mc_parking [ i ] ) ;
14167: NOP4
14171: PPUSH
14172: NOP4
14176: PUSH
14177: NOP4
14181: ARRAY
14182: PPUSH
14183: NOP4
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
14187: NOP4
14191: PPUSH
14192: NOP4
14196: PUSH
14197: LD_INT 1000
14199: LESS
14200: PUSH
14201: NOP4
14205: PPUSH
14206: NOP4
14210: PUSH
14211: NOP4
14215: ARRAY
14216: PPUSH
14217: NOP4
14221: AND
14222: IFFALSE 14226
// continue ;
14224: GO 14109
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
14226: NOP4
14230: PPUSH
14231: NOP4
14235: PUSH
14236: LD_INT 2
14238: EQUAL
14239: PUSH
14240: NOP4
14244: PPUSH
14245: NOP4
14249: PUSH
14250: LD_INT 15
14252: LESS
14253: AND
14254: IFFALSE 14258
// continue ;
14256: GO 14109
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
14258: NOP4
14262: PPUSH
14263: NOP4
14267: PUSH
14268: LD_INT 1
14270: EQUAL
14271: PUSH
14272: NOP4
14276: PPUSH
14277: NOP4
14281: PUSH
14282: LD_INT 10
14284: LESS
14285: AND
14286: IFFALSE 14596
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
14288: NOP4
14292: PUSH
14293: NOP4
14297: PUSH
14298: NOP4
14302: ARRAY
14303: PPUSH
14304: LD_INT 2
14306: PUSH
14307: LD_INT 30
14309: PUSH
14310: LD_INT 0
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 30
14319: PUSH
14320: LD_INT 1
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: PPUSH
14332: NOP4
14336: ST_TO_ADDR
// if not depot then
14337: NOP4
14341: NOT
14342: IFFALSE 14346
// continue ;
14344: GO 14109
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
14346: NOP4
14350: PPUSH
14351: NOP4
14355: PPUSH
14356: NOP4
14360: PPUSH
14361: NOP4
14365: PPUSH
14366: NOP4
14370: PUSH
14371: LD_INT 6
14373: LESS
14374: IFFALSE 14390
// SetFuel ( j , 100 ) else
14376: NOP4
14380: PPUSH
14381: LD_INT 100
14383: PPUSH
14384: NOP4
14388: GO 14596
// if GetFuel ( j ) = 0 then
14390: NOP4
14394: PPUSH
14395: NOP4
14399: PUSH
14400: LD_INT 0
14402: EQUAL
14403: IFFALSE 14596
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
14405: NOP4
14409: PUSH
14410: NOP4
14414: PPUSH
14415: NOP4
14419: PPUSH
14420: NOP4
14424: PUSH
14425: NOP4
14429: ARRAY
14430: PUSH
14431: NOP4
14435: DIFF
14436: PPUSH
14437: NOP4
14441: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
14442: NOP4
14446: PPUSH
14447: NOP4
14451: PUSH
14452: LD_INT 1
14454: EQUAL
14455: IFFALSE 14471
// ComExitVehicle ( IsInUnit ( j ) ) ;
14457: NOP4
14461: PPUSH
14462: NOP4
14466: PPUSH
14467: NOP4
// if GetControl ( j ) = control_remote then
14471: NOP4
14475: PPUSH
14476: NOP4
14480: PUSH
14481: LD_INT 2
14483: EQUAL
14484: IFFALSE 14495
// ComUnlink ( j ) ;
14486: NOP4
14490: PPUSH
14491: NOP4
// fac := MC_GetBuilding ( i , b_factory ) ;
14495: NOP4
14499: PUSH
14500: NOP4
14504: PPUSH
14505: LD_INT 3
14507: PPUSH
14508: NOP4
14512: ST_TO_ADDR
// if fac then
14513: NOP4
14517: IFFALSE 14594
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
14519: NOP4
14523: PUSH
14524: NOP4
14528: PPUSH
14529: NOP4
14533: PPUSH
14534: NOP4
14538: PPUSH
14539: NOP4
14543: PPUSH
14544: NOP4
14548: PPUSH
14549: NOP4
14553: PPUSH
14554: NOP4
14558: PPUSH
14559: NOP4
14563: PPUSH
14564: NOP4
14568: PPUSH
14569: NOP4
14573: ST_TO_ADDR
// if components then
14574: NOP4
14578: IFFALSE 14594
// MC_InsertProduceList ( i , components ) ;
14580: NOP4
14584: PPUSH
14585: NOP4
14589: PPUSH
14590: NOP4
// end ; continue ;
14594: GO 14109
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
14596: NOP4
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: NOP4
14608: PUSH
14609: LD_INT 100
14611: LESS
14612: PUSH
14613: NOP4
14617: PPUSH
14618: NOP4
14622: NOT
14623: AND
14624: IFFALSE 14653
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
14626: NOP4
14630: PPUSH
14631: NOP4
14635: PUSH
14636: LD_INT 2
14638: ARRAY
14639: PPUSH
14640: NOP4
14644: PUSH
14645: LD_INT 3
14647: ARRAY
14648: PPUSH
14649: NOP4
// break ;
14653: GO 14657
// end ;
14655: GO 14109
14657: POP
14658: POP
// end ; end ;
14659: GO 12947
14661: POP
14662: POP
// end ;
14663: LD_VAR 0 1
14667: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
14668: LD_INT 0
14670: PPUSH
14671: PPUSH
14672: PPUSH
14673: PPUSH
// if not mc_bases then
14674: NOP4
14678: NOT
14679: IFFALSE 14683
// exit ;
14681: GO 14844
// for i = 1 to mc_bases do
14683: NOP4
14687: PUSH
14688: DOUBLE
14689: LD_INT 1
14691: DEC
14692: ST_TO_ADDR
14693: NOP4
14697: PUSH
14698: FOR_TO
14699: IFFALSE 14842
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
14701: NOP4
14705: PUSH
14706: NOP4
14710: PUSH
14711: NOP4
14715: ARRAY
14716: PUSH
14717: NOP4
14721: PUSH
14722: NOP4
14726: ARRAY
14727: UNION
14728: PPUSH
14729: LD_INT 33
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: NOP4
14743: ST_TO_ADDR
// if tmp then
14744: NOP4
14748: IFFALSE 14840
// for j in tmp do
14750: NOP4
14754: PUSH
14755: NOP4
14759: PUSH
14760: FOR_IN
14761: IFFALSE 14838
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
14763: NOP4
14767: PPUSH
14768: NOP4
14772: NOT
14773: PUSH
14774: NOP4
14778: PPUSH
14779: NOP4
14783: PUSH
14784: LD_INT 250
14786: GREATEREQUAL
14787: AND
14788: IFFALSE 14801
// Connect ( j ) else
14790: NOP4
14794: PPUSH
14795: NOP4
14799: GO 14836
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
14801: NOP4
14805: PPUSH
14806: NOP4
14810: PUSH
14811: LD_INT 250
14813: LESS
14814: PUSH
14815: NOP4
14819: PPUSH
14820: NOP4
14824: AND
14825: IFFALSE 14836
// ComUnlink ( j ) ;
14827: NOP4
14831: PPUSH
14832: NOP4
14836: GO 14760
14838: POP
14839: POP
// end ;
14840: GO 14698
14842: POP
14843: POP
// end ;
14844: LD_VAR 0 1
14848: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
14853: PPUSH
14854: PPUSH
14855: PPUSH
// if not mc_bases then
14856: NOP4
14860: NOT
14861: IFFALSE 14865
// exit ;
14863: GO 15325
// for i = 1 to mc_bases do
14865: NOP4
14869: PUSH
14870: DOUBLE
14871: LD_INT 1
14873: DEC
14874: ST_TO_ADDR
14875: NOP4
14879: PUSH
14880: FOR_TO
14881: IFFALSE 15323
// begin if not mc_produce [ i ] then
14883: NOP4
14887: PUSH
14888: NOP4
14892: ARRAY
14893: NOT
14894: IFFALSE 14898
// continue ;
14896: GO 14880
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
14898: NOP4
14902: PUSH
14903: NOP4
14907: PUSH
14908: NOP4
14912: ARRAY
14913: PPUSH
14914: LD_INT 30
14916: PUSH
14917: LD_INT 3
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PPUSH
14924: NOP4
14928: ST_TO_ADDR
// if not fac then
14929: NOP4
14933: NOT
14934: IFFALSE 14938
// continue ;
14936: GO 14880
// for j in fac do
14938: NOP4
14942: PUSH
14943: NOP4
14947: PUSH
14948: FOR_IN
14949: IFFALSE 15319
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
14951: NOP4
14955: PPUSH
14956: NOP4
14960: PUSH
14961: LD_INT 2
14963: NONEQUAL
14964: PUSH
14965: NOP4
14969: PPUSH
14970: LD_INT 15
14972: PPUSH
14973: NOP4
14977: PUSH
14978: LD_INT 4
14980: ARRAY
14981: OR
14982: PUSH
14983: NOP4
14987: PPUSH
14988: NOP4
14992: PUSH
14993: LD_INT 0
14995: EQUAL
14996: OR
14997: IFFALSE 15001
// continue ;
14999: GO 14948
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
15001: NOP4
15005: PPUSH
15006: NOP4
15010: PUSH
15011: NOP4
15015: ARRAY
15016: PUSH
15017: LD_INT 1
15019: ARRAY
15020: PUSH
15021: LD_INT 1
15023: ARRAY
15024: PPUSH
15025: NOP4
15029: PUSH
15030: NOP4
15034: ARRAY
15035: PUSH
15036: LD_INT 1
15038: ARRAY
15039: PUSH
15040: LD_INT 2
15042: ARRAY
15043: PPUSH
15044: NOP4
15048: PUSH
15049: NOP4
15053: ARRAY
15054: PUSH
15055: LD_INT 1
15057: ARRAY
15058: PUSH
15059: LD_INT 3
15061: ARRAY
15062: PPUSH
15063: NOP4
15067: PUSH
15068: NOP4
15072: ARRAY
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PUSH
15078: LD_INT 4
15080: ARRAY
15081: PPUSH
15082: NOP4
15086: PUSH
15087: NOP4
15091: PPUSH
15092: NOP4
15096: PUSH
15097: NOP4
15101: ARRAY
15102: PUSH
15103: LD_INT 1
15105: ARRAY
15106: PUSH
15107: LD_INT 1
15109: ARRAY
15110: PUSH
15111: NOP4
15115: PUSH
15116: NOP4
15120: ARRAY
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PUSH
15126: LD_INT 2
15128: ARRAY
15129: PUSH
15130: NOP4
15134: PUSH
15135: NOP4
15139: ARRAY
15140: PUSH
15141: LD_INT 1
15143: ARRAY
15144: PUSH
15145: LD_INT 3
15147: ARRAY
15148: PUSH
15149: NOP4
15153: PUSH
15154: NOP4
15158: ARRAY
15159: PUSH
15160: LD_INT 1
15162: ARRAY
15163: PUSH
15164: LD_INT 4
15166: ARRAY
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: NOP4
15178: AND
15179: IFFALSE 15317
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
15181: NOP4
15185: PPUSH
15186: NOP4
15190: PUSH
15191: NOP4
15195: ARRAY
15196: PUSH
15197: LD_INT 1
15199: ARRAY
15200: PUSH
15201: LD_INT 1
15203: ARRAY
15204: PPUSH
15205: NOP4
15209: PUSH
15210: NOP4
15214: ARRAY
15215: PUSH
15216: LD_INT 1
15218: ARRAY
15219: PUSH
15220: LD_INT 2
15222: ARRAY
15223: PPUSH
15224: NOP4
15228: PUSH
15229: NOP4
15233: ARRAY
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: PUSH
15239: LD_INT 3
15241: ARRAY
15242: PPUSH
15243: NOP4
15247: PUSH
15248: NOP4
15252: ARRAY
15253: PUSH
15254: LD_INT 1
15256: ARRAY
15257: PUSH
15258: LD_INT 4
15260: ARRAY
15261: PPUSH
15262: NOP4
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
15266: NOP4
15270: PUSH
15271: NOP4
15275: PUSH
15276: NOP4
15280: ARRAY
15281: PPUSH
15282: LD_INT 1
15284: PPUSH
15285: NOP4
15289: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
15290: NOP4
15294: PUSH
15295: NOP4
15299: PPUSH
15300: NOP4
15304: PPUSH
15305: NOP4
15309: PPUSH
15310: NOP4
15314: ST_TO_ADDR
// break ;
15315: GO 15319
// end ; end ;
15317: GO 14948
15319: POP
15320: POP
// end ;
15321: GO 14880
15323: POP
15324: POP
// end ;
15325: LD_VAR 0 1
15329: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
15330: LD_INT 0
15332: PPUSH
15333: PPUSH
15334: PPUSH
// if not mc_bases then
15335: NOP4
15339: NOT
15340: IFFALSE 15344
// exit ;
15342: GO 15433
// for i = 1 to mc_bases do
15344: NOP4
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: NOP4
15358: PUSH
15359: FOR_TO
15360: IFFALSE 15431
// begin if mc_attack [ i ] then
15362: NOP4
15366: PUSH
15367: NOP4
15371: ARRAY
15372: IFFALSE 15429
// begin tmp := mc_attack [ i ] [ 1 ] ;
15374: NOP4
15378: PUSH
15379: NOP4
15383: PUSH
15384: NOP4
15388: ARRAY
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
15394: NOP4
15398: PUSH
15399: NOP4
15403: PPUSH
15404: NOP4
15408: PPUSH
15409: EMPTY
15410: PPUSH
15411: NOP4
15415: ST_TO_ADDR
// Attack ( tmp ) ;
15416: NOP4
15420: PPUSH
15421: NOP4
// exit ;
15425: POP
15426: POP
15427: GO 15433
// end ; end ;
15429: GO 15359
15431: POP
15432: POP
// end ;
15433: LD_VAR 0 1
15437: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
15438: LD_INT 0
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
// if not mc_bases then
15447: NOP4
15451: NOT
15452: IFFALSE 15456
// exit ;
15454: GO 16038
// for i = 1 to mc_bases do
15456: NOP4
15460: PUSH
15461: DOUBLE
15462: LD_INT 1
15464: DEC
15465: ST_TO_ADDR
15466: NOP4
15470: PUSH
15471: FOR_TO
15472: IFFALSE 16036
// begin if not mc_bases [ i ] then
15474: NOP4
15478: PUSH
15479: NOP4
15483: ARRAY
15484: NOT
15485: IFFALSE 15489
// continue ;
15487: GO 15471
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
15489: NOP4
15493: PUSH
15494: NOP4
15498: PUSH
15499: NOP4
15503: ARRAY
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PPUSH
15509: NOP4
15513: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
15514: NOP4
15518: PUSH
15519: NOP4
15523: PPUSH
15524: NOP4
15528: PPUSH
15529: NOP4
15533: PUSH
15534: NOP4
15538: ARRAY
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: NOP4
15548: PPUSH
15549: NOP4
15553: PUSH
15554: NOP4
15558: ARRAY
15559: PPUSH
15560: NOP4
15564: PPUSH
15565: NOP4
15569: ST_TO_ADDR
// if not mc_scan [ i ] then
15570: NOP4
15574: PUSH
15575: NOP4
15579: ARRAY
15580: NOT
15581: IFFALSE 15736
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15583: NOP4
15587: PUSH
15588: NOP4
15592: PUSH
15593: NOP4
15597: ARRAY
15598: PPUSH
15599: LD_INT 2
15601: PUSH
15602: LD_INT 25
15604: PUSH
15605: LD_INT 5
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 25
15614: PUSH
15615: LD_INT 8
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 25
15624: PUSH
15625: LD_INT 9
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: PPUSH
15638: NOP4
15642: ST_TO_ADDR
// if not tmp then
15643: NOP4
15647: NOT
15648: IFFALSE 15652
// continue ;
15650: GO 15471
// for j in tmp do
15652: NOP4
15656: PUSH
15657: NOP4
15661: PUSH
15662: FOR_IN
15663: IFFALSE 15734
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
15665: NOP4
15669: PPUSH
15670: NOP4
15674: PPUSH
15675: NOP4
15679: PUSH
15680: LD_INT 5
15682: EQUAL
15683: PUSH
15684: NOP4
15688: PPUSH
15689: NOP4
15693: PUSH
15694: LD_INT 1
15696: EQUAL
15697: AND
15698: PUSH
15699: NOP4
15703: PPUSH
15704: NOP4
15708: NOT
15709: AND
15710: PUSH
15711: NOP4
15715: AND
15716: IFFALSE 15732
// ComChangeProfession ( j , class ) ;
15718: NOP4
15722: PPUSH
15723: NOP4
15727: PPUSH
15728: NOP4
15732: GO 15662
15734: POP
15735: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
15736: NOP4
15740: PUSH
15741: NOP4
15745: ARRAY
15746: PUSH
15747: NOP4
15751: PUSH
15752: NOP4
15756: ARRAY
15757: NOT
15758: AND
15759: PUSH
15760: NOP4
15764: PUSH
15765: NOP4
15769: ARRAY
15770: PPUSH
15771: LD_INT 30
15773: PUSH
15774: LD_INT 32
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PPUSH
15781: NOP4
15785: NOT
15786: AND
15787: PUSH
15788: NOP4
15792: PUSH
15793: NOP4
15797: ARRAY
15798: PPUSH
15799: LD_INT 2
15801: PUSH
15802: LD_INT 30
15804: PUSH
15805: LD_INT 4
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 30
15814: PUSH
15815: LD_INT 5
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: LIST
15826: PPUSH
15827: NOP4
15831: NOT
15832: AND
15833: IFFALSE 15965
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15835: NOP4
15839: PUSH
15840: NOP4
15844: PUSH
15845: NOP4
15849: ARRAY
15850: PPUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 25
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 25
15866: PUSH
15867: LD_INT 5
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 25
15876: PUSH
15877: LD_INT 8
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 25
15886: PUSH
15887: LD_INT 9
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: PPUSH
15901: NOP4
15905: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
15906: NOP4
15910: PUSH
15911: NOP4
15915: PUSH
15916: NOP4
15920: PPUSH
15921: LD_INT 18
15923: PPUSH
15924: NOP4
15928: DIFF
15929: ST_TO_ADDR
// if tmp then
15930: NOP4
15934: IFFALSE 15965
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
15936: NOP4
15940: PPUSH
15941: NOP4
15945: PPUSH
15946: NOP4
15950: PUSH
15951: NOP4
15955: ARRAY
15956: PPUSH
15957: NOP4
// exit ;
15961: POP
15962: POP
15963: GO 16038
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
15965: NOP4
15969: PUSH
15970: NOP4
15974: ARRAY
15975: PUSH
15976: NOP4
15980: PUSH
15981: NOP4
15985: ARRAY
15986: AND
15987: IFFALSE 16034
// begin tmp := mc_defender [ i ] ;
15989: NOP4
15993: PUSH
15994: NOP4
15998: PUSH
15999: NOP4
16003: ARRAY
16004: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
16005: NOP4
16009: PPUSH
16010: NOP4
16014: PPUSH
16015: NOP4
16019: PUSH
16020: NOP4
16024: ARRAY
16025: PPUSH
16026: NOP4
// exit ;
16030: POP
16031: POP
16032: GO 16038
// end ; end ;
16034: GO 15471
16036: POP
16037: POP
// end ;
16038: LD_VAR 0 1
16042: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
16043: LD_INT 0
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
// if not mc_bases then
16056: NOP4
16060: NOT
16061: IFFALSE 16065
// exit ;
16063: GO 17152
// for i = 1 to mc_bases do
16065: NOP4
16069: PUSH
16070: DOUBLE
16071: LD_INT 1
16073: DEC
16074: ST_TO_ADDR
16075: NOP4
16079: PUSH
16080: FOR_TO
16081: IFFALSE 17150
// begin tmp := mc_lab [ i ] ;
16083: NOP4
16087: PUSH
16088: NOP4
16092: PUSH
16093: NOP4
16097: ARRAY
16098: ST_TO_ADDR
// if not tmp then
16099: NOP4
16103: NOT
16104: IFFALSE 16108
// continue ;
16106: GO 16080
// idle_lab := 0 ;
16108: NOP4
16112: PUSH
16113: LD_INT 0
16115: ST_TO_ADDR
// for j in tmp do
16116: NOP4
16120: PUSH
16121: NOP4
16125: PUSH
16126: FOR_IN
16127: IFFALSE 17146
// begin researching := false ;
16129: NOP4
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// side := GetSide ( j ) ;
16137: NOP4
16141: PUSH
16142: NOP4
16146: PPUSH
16147: NOP4
16151: ST_TO_ADDR
// if not mc_tech [ side ] then
16152: NOP4
16156: PUSH
16157: NOP4
16161: ARRAY
16162: NOT
16163: IFFALSE 16167
// continue ;
16165: GO 16126
// if BuildingStatus ( j ) = bs_idle then
16167: NOP4
16171: PPUSH
16172: NOP4
16176: PUSH
16177: LD_INT 2
16179: EQUAL
16180: IFFALSE 16368
// begin if idle_lab and UnitsInside ( j ) < 6 then
16182: NOP4
16186: PUSH
16187: NOP4
16191: PPUSH
16192: NOP4
16196: PUSH
16197: LD_INT 6
16199: LESS
16200: AND
16201: IFFALSE 16272
// begin tmp2 := UnitsInside ( idle_lab ) ;
16203: NOP4
16207: PUSH
16208: NOP4
16212: PPUSH
16213: NOP4
16217: ST_TO_ADDR
// if tmp2 then
16218: NOP4
16222: IFFALSE 16264
// for x in tmp2 do
16224: NOP4
16228: PUSH
16229: NOP4
16233: PUSH
16234: FOR_IN
16235: IFFALSE 16262
// begin ComExitBuilding ( x ) ;
16237: NOP4
16241: PPUSH
16242: NOP4
// AddComEnterUnit ( x , j ) ;
16246: NOP4
16250: PPUSH
16251: NOP4
16255: PPUSH
16256: NOP4
// end ;
16260: GO 16234
16262: POP
16263: POP
// idle_lab := 0 ;
16264: NOP4
16268: PUSH
16269: LD_INT 0
16271: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
16272: NOP4
16276: PUSH
16277: NOP4
16281: PUSH
16282: NOP4
16286: ARRAY
16287: PUSH
16288: FOR_IN
16289: IFFALSE 16349
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
16291: NOP4
16295: PPUSH
16296: NOP4
16300: PPUSH
16301: NOP4
16305: PUSH
16306: NOP4
16310: PPUSH
16311: NOP4
16315: PPUSH
16316: NOP4
16320: AND
16321: IFFALSE 16347
// begin researching := true ;
16323: NOP4
16327: PUSH
16328: LD_INT 1
16330: ST_TO_ADDR
// ComResearch ( j , t ) ;
16331: NOP4
16335: PPUSH
16336: NOP4
16340: PPUSH
16341: NOP4
// break ;
16345: GO 16349
// end ;
16347: GO 16288
16349: POP
16350: POP
// if not researching then
16351: NOP4
16355: NOT
16356: IFFALSE 16368
// idle_lab := j ;
16358: NOP4
16362: PUSH
16363: NOP4
16367: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
16368: NOP4
16372: PPUSH
16373: NOP4
16377: PUSH
16378: LD_INT 10
16380: EQUAL
16381: IFFALSE 16969
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
16383: NOP4
16387: PUSH
16388: NOP4
16392: ARRAY
16393: NOT
16394: PUSH
16395: NOP4
16399: PUSH
16400: NOP4
16404: ARRAY
16405: NOT
16406: AND
16407: PUSH
16408: NOP4
16412: PUSH
16413: NOP4
16417: ARRAY
16418: PUSH
16419: LD_INT 1
16421: GREATER
16422: AND
16423: IFFALSE 16554
// begin ComCancel ( j ) ;
16425: NOP4
16429: PPUSH
16430: NOP4
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
16434: NOP4
16438: PUSH
16439: NOP4
16443: PPUSH
16444: NOP4
16448: PPUSH
16449: NOP4
16453: PUSH
16454: NOP4
16458: ARRAY
16459: PPUSH
16460: NOP4
16464: PUSH
16465: NOP4
16469: ARRAY
16470: PUSH
16471: LD_INT 1
16473: MINUS
16474: PPUSH
16475: NOP4
16479: PUSH
16480: NOP4
16484: ARRAY
16485: PPUSH
16486: LD_INT 0
16488: PPUSH
16489: NOP4
16493: PPUSH
16494: NOP4
16498: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
16499: NOP4
16503: PUSH
16504: NOP4
16508: PPUSH
16509: NOP4
16513: PPUSH
16514: NOP4
16518: PUSH
16519: NOP4
16523: ARRAY
16524: PPUSH
16525: NOP4
16529: PUSH
16530: NOP4
16534: ARRAY
16535: PPUSH
16536: LD_INT 1
16538: PPUSH
16539: LD_INT 0
16541: PPUSH
16542: NOP4
16546: PPUSH
16547: NOP4
16551: ST_TO_ADDR
// continue ;
16552: GO 16126
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
16554: NOP4
16558: PUSH
16559: NOP4
16563: ARRAY
16564: PUSH
16565: NOP4
16569: PUSH
16570: NOP4
16574: ARRAY
16575: NOT
16576: AND
16577: IFFALSE 16704
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
16579: NOP4
16583: PUSH
16584: NOP4
16588: PPUSH
16589: NOP4
16593: PUSH
16594: NOP4
16598: PUSH
16599: NOP4
16603: ARRAY
16604: PUSH
16605: LD_INT 1
16607: PLUS
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PPUSH
16613: NOP4
16617: PUSH
16618: NOP4
16622: ARRAY
16623: PUSH
16624: LD_INT 1
16626: ARRAY
16627: PPUSH
16628: NOP4
16632: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
16633: NOP4
16637: PUSH
16638: NOP4
16642: ARRAY
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: PPUSH
16648: LD_INT 112
16650: PPUSH
16651: NOP4
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
16655: NOP4
16659: PUSH
16660: NOP4
16664: PUSH
16665: NOP4
16669: ARRAY
16670: PPUSH
16671: LD_INT 1
16673: PPUSH
16674: NOP4
16678: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
16679: NOP4
16683: PUSH
16684: NOP4
16688: PPUSH
16689: NOP4
16693: PPUSH
16694: NOP4
16698: PPUSH
16699: NOP4
16703: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
16704: NOP4
16708: PUSH
16709: NOP4
16713: ARRAY
16714: PUSH
16715: NOP4
16719: PUSH
16720: NOP4
16724: ARRAY
16725: AND
16726: PUSH
16727: NOP4
16731: PUSH
16732: NOP4
16736: ARRAY
16737: PUSH
16738: LD_INT 1
16740: ARRAY
16741: PPUSH
16742: NOP4
16746: NOT
16747: AND
16748: PUSH
16749: NOP4
16753: PPUSH
16754: NOP4
16758: PUSH
16759: LD_INT 6
16761: EQUAL
16762: AND
16763: IFFALSE 16819
// begin tmp2 := UnitsInside ( j ) ;
16765: NOP4
16769: PUSH
16770: NOP4
16774: PPUSH
16775: NOP4
16779: ST_TO_ADDR
// if tmp2 = 6 then
16780: NOP4
16784: PUSH
16785: LD_INT 6
16787: EQUAL
16788: IFFALSE 16819
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
16790: NOP4
16794: PUSH
16795: LD_INT 1
16797: ARRAY
16798: PPUSH
16799: LD_INT 112
16801: PPUSH
16802: NOP4
// ComExitBuilding ( tmp2 [ 1 ] ) ;
16806: NOP4
16810: PUSH
16811: LD_INT 1
16813: ARRAY
16814: PPUSH
16815: NOP4
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
16819: NOP4
16823: PUSH
16824: NOP4
16828: ARRAY
16829: PUSH
16830: NOP4
16834: PUSH
16835: NOP4
16839: ARRAY
16840: PUSH
16841: LD_INT 1
16843: ARRAY
16844: PPUSH
16845: NOP4
16849: NOT
16850: AND
16851: PUSH
16852: NOP4
16856: PUSH
16857: NOP4
16861: ARRAY
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: NOP4
16871: NOT
16872: AND
16873: IFFALSE 16899
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
16875: NOP4
16879: PUSH
16880: NOP4
16884: ARRAY
16885: PUSH
16886: LD_INT 1
16888: ARRAY
16889: PPUSH
16890: NOP4
16894: PPUSH
16895: NOP4
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
16899: NOP4
16903: PUSH
16904: NOP4
16908: ARRAY
16909: PUSH
16910: LD_INT 1
16912: ARRAY
16913: PPUSH
16914: NOP4
16918: PUSH
16919: NOP4
16923: PUSH
16924: NOP4
16928: ARRAY
16929: PUSH
16930: LD_INT 1
16932: ARRAY
16933: PPUSH
16934: NOP4
16938: PPUSH
16939: NOP4
16943: PUSH
16944: LD_INT 3
16946: NONEQUAL
16947: AND
16948: IFFALSE 16969
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
16950: NOP4
16954: PUSH
16955: NOP4
16959: ARRAY
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PPUSH
16965: NOP4
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
16969: NOP4
16973: PPUSH
16974: NOP4
16978: PUSH
16979: LD_INT 6
16981: EQUAL
16982: PUSH
16983: NOP4
16987: PUSH
16988: LD_INT 1
16990: GREATER
16991: AND
16992: IFFALSE 17144
// begin sci := [ ] ;
16994: NOP4
16998: PUSH
16999: EMPTY
17000: ST_TO_ADDR
// for x in ( tmp diff j ) do
17001: NOP4
17005: PUSH
17006: NOP4
17010: PUSH
17011: NOP4
17015: DIFF
17016: PUSH
17017: FOR_IN
17018: IFFALSE 17070
// begin if sci = 6 then
17020: NOP4
17024: PUSH
17025: LD_INT 6
17027: EQUAL
17028: IFFALSE 17032
// break ;
17030: GO 17070
// if BuildingStatus ( x ) = bs_idle then
17032: NOP4
17036: PPUSH
17037: NOP4
17041: PUSH
17042: LD_INT 2
17044: EQUAL
17045: IFFALSE 17068
// sci := sci ^ UnitsInside ( x ) ;
17047: NOP4
17051: PUSH
17052: NOP4
17056: PUSH
17057: NOP4
17061: PPUSH
17062: NOP4
17066: ADD
17067: ST_TO_ADDR
// end ;
17068: GO 17017
17070: POP
17071: POP
// if not sci then
17072: NOP4
17076: NOT
17077: IFFALSE 17081
// continue ;
17079: GO 16126
// for x in sci do
17081: NOP4
17085: PUSH
17086: NOP4
17090: PUSH
17091: FOR_IN
17092: IFFALSE 17142
// if IsInUnit ( x ) and not HasTask ( x ) then
17094: NOP4
17098: PPUSH
17099: NOP4
17103: PUSH
17104: NOP4
17108: PPUSH
17109: NOP4
17113: NOT
17114: AND
17115: IFFALSE 17140
// begin ComExitBuilding ( x ) ;
17117: NOP4
17121: PPUSH
17122: NOP4
// AddComEnterUnit ( x , j ) ;
17126: NOP4
17130: PPUSH
17131: NOP4
17135: PPUSH
17136: NOP4
// end ;
17140: GO 17091
17142: POP
17143: POP
// end ; end ;
17144: GO 16126
17146: POP
17147: POP
// end ;
17148: GO 16080
17150: POP
17151: POP
// end ;
17152: LD_VAR 0 1
17156: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
17157: LD_INT 0
17159: PPUSH
17160: PPUSH
// if not mc_bases then
17161: NOP4
17165: NOT
17166: IFFALSE 17170
// exit ;
17168: GO 17251
// for i = 1 to mc_bases do
17170: NOP4
17174: PUSH
17175: DOUBLE
17176: LD_INT 1
17178: DEC
17179: ST_TO_ADDR
17180: NOP4
17184: PUSH
17185: FOR_TO
17186: IFFALSE 17249
// if mc_mines [ i ] and mc_miners [ i ] then
17188: NOP4
17192: PUSH
17193: NOP4
17197: ARRAY
17198: PUSH
17199: NOP4
17203: PUSH
17204: NOP4
17208: ARRAY
17209: AND
17210: IFFALSE 17247
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
17212: NOP4
17216: PUSH
17217: NOP4
17221: ARRAY
17222: PUSH
17223: LD_INT 1
17225: ARRAY
17226: PPUSH
17227: NOP4
17231: PPUSH
17232: NOP4
17236: PUSH
17237: NOP4
17241: ARRAY
17242: PPUSH
17243: NOP4
17247: GO 17185
17249: POP
17250: POP
// end ;
17251: LD_VAR 0 1
17255: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
17256: LD_INT 0
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
// if not mc_bases or not mc_parking then
17266: NOP4
17270: NOT
17271: PUSH
17272: NOP4
17276: NOT
17277: OR
17278: IFFALSE 17282
// exit ;
17280: GO 17958
// for i = 1 to mc_bases do
17282: NOP4
17286: PUSH
17287: DOUBLE
17288: LD_INT 1
17290: DEC
17291: ST_TO_ADDR
17292: NOP4
17296: PUSH
17297: FOR_TO
17298: IFFALSE 17956
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
17300: NOP4
17304: PUSH
17305: NOP4
17309: ARRAY
17310: NOT
17311: PUSH
17312: NOP4
17316: PUSH
17317: NOP4
17321: ARRAY
17322: NOT
17323: OR
17324: IFFALSE 17328
// continue ;
17326: GO 17297
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
17328: NOP4
17332: PUSH
17333: NOP4
17337: PUSH
17338: NOP4
17342: ARRAY
17343: PUSH
17344: LD_INT 1
17346: ARRAY
17347: PPUSH
17348: NOP4
17352: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
17353: NOP4
17357: PUSH
17358: NOP4
17362: PUSH
17363: NOP4
17367: ARRAY
17368: PPUSH
17369: LD_INT 30
17371: PUSH
17372: LD_INT 3
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PPUSH
17379: NOP4
17383: ST_TO_ADDR
// if not fac then
17384: NOP4
17388: NOT
17389: IFFALSE 17440
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
17391: NOP4
17395: PUSH
17396: NOP4
17400: PUSH
17401: NOP4
17405: ARRAY
17406: PPUSH
17407: LD_INT 2
17409: PUSH
17410: LD_INT 30
17412: PUSH
17413: LD_INT 0
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 30
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: PPUSH
17435: NOP4
17439: ST_TO_ADDR
// if not fac then
17440: NOP4
17444: NOT
17445: IFFALSE 17449
// continue ;
17447: GO 17297
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17449: NOP4
17453: PUSH
17454: NOP4
17458: PUSH
17459: NOP4
17463: ARRAY
17464: PPUSH
17465: LD_INT 22
17467: PUSH
17468: NOP4
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 21
17479: PUSH
17480: LD_INT 2
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 3
17489: PUSH
17490: LD_INT 24
17492: PUSH
17493: LD_INT 1000
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: PPUSH
17509: NOP4
17513: PUSH
17514: LD_INT 22
17516: PUSH
17517: NOP4
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 91
17528: PUSH
17529: NOP4
17533: PUSH
17534: LD_INT 1
17536: ARRAY
17537: PUSH
17538: LD_INT 25
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 21
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 3
17558: PUSH
17559: LD_INT 24
17561: PUSH
17562: LD_INT 1000
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: PPUSH
17579: NOP4
17583: UNION
17584: ST_TO_ADDR
// if not vehs then
17585: NOP4
17589: NOT
17590: IFFALSE 17616
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
17592: NOP4
17596: PUSH
17597: NOP4
17601: PPUSH
17602: NOP4
17606: PPUSH
17607: EMPTY
17608: PPUSH
17609: NOP4
17613: ST_TO_ADDR
// continue ;
17614: GO 17297
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
17616: NOP4
17620: PUSH
17621: NOP4
17625: PUSH
17626: NOP4
17630: ARRAY
17631: PPUSH
17632: LD_INT 30
17634: PUSH
17635: LD_INT 3
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PPUSH
17642: NOP4
17646: ST_TO_ADDR
// if tmp then
17647: NOP4
17651: IFFALSE 17754
// begin for j in tmp do
17653: NOP4
17657: PUSH
17658: NOP4
17662: PUSH
17663: FOR_IN
17664: IFFALSE 17752
// for k in UnitsInside ( j ) do
17666: NOP4
17670: PUSH
17671: NOP4
17675: PPUSH
17676: NOP4
17680: PUSH
17681: FOR_IN
17682: IFFALSE 17748
// if k then
17684: NOP4
17688: IFFALSE 17746
// if not k in mc_repair_vehicle [ i ] then
17690: NOP4
17694: PUSH
17695: NOP4
17699: PUSH
17700: NOP4
17704: ARRAY
17705: IN
17706: NOT
17707: IFFALSE 17746
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
17709: NOP4
17713: PUSH
17714: NOP4
17718: PPUSH
17719: NOP4
17723: PPUSH
17724: NOP4
17728: PUSH
17729: NOP4
17733: ARRAY
17734: PUSH
17735: NOP4
17739: UNION
17740: PPUSH
17741: NOP4
17745: ST_TO_ADDR
17746: GO 17681
17748: POP
17749: POP
17750: GO 17663
17752: POP
17753: POP
// end ; if not mc_repair_vehicle [ i ] then
17754: NOP4
17758: PUSH
17759: NOP4
17763: ARRAY
17764: NOT
17765: IFFALSE 17769
// continue ;
17767: GO 17297
// for j in mc_repair_vehicle [ i ] do
17769: NOP4
17773: PUSH
17774: NOP4
17778: PUSH
17779: NOP4
17783: ARRAY
17784: PUSH
17785: FOR_IN
17786: IFFALSE 17952
// begin if GetClass ( j ) <> 3 then
17788: NOP4
17792: PPUSH
17793: NOP4
17797: PUSH
17798: LD_INT 3
17800: NONEQUAL
17801: IFFALSE 17842
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
17803: NOP4
17807: PUSH
17808: NOP4
17812: PPUSH
17813: NOP4
17817: PPUSH
17818: NOP4
17822: PUSH
17823: NOP4
17827: ARRAY
17828: PUSH
17829: NOP4
17833: DIFF
17834: PPUSH
17835: NOP4
17839: ST_TO_ADDR
// continue ;
17840: GO 17785
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
17842: NOP4
17846: PPUSH
17847: NOP4
17851: NOT
17852: PUSH
17853: NOP4
17857: PUSH
17858: NOP4
17862: PUSH
17863: NOP4
17867: ARRAY
17868: PUSH
17869: LD_INT 1
17871: ARRAY
17872: IN
17873: NOT
17874: AND
17875: PUSH
17876: NOP4
17880: PUSH
17881: NOP4
17885: PUSH
17886: NOP4
17890: ARRAY
17891: PUSH
17892: LD_INT 2
17894: ARRAY
17895: IN
17896: NOT
17897: AND
17898: IFFALSE 17950
// begin if IsInUnit ( j ) then
17900: NOP4
17904: PPUSH
17905: NOP4
17909: IFFALSE 17920
// ComExitBuilding ( j ) ;
17911: NOP4
17915: PPUSH
17916: NOP4
// if not HasTask ( j ) then
17920: NOP4
17924: PPUSH
17925: NOP4
17929: NOT
17930: IFFALSE 17950
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
17932: NOP4
17936: PPUSH
17937: NOP4
17941: PUSH
17942: LD_INT 1
17944: ARRAY
17945: PPUSH
17946: NOP4
// end ; end ;
17950: GO 17785
17952: POP
17953: POP
// end ;
17954: GO 17297
17956: POP
17957: POP
// end ;
17958: LD_VAR 0 1
17962: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
17963: LD_INT 0
17965: PPUSH
17966: PPUSH
17967: PPUSH
17968: PPUSH
17969: PPUSH
17970: PPUSH
17971: PPUSH
17972: PPUSH
17973: PPUSH
17974: PPUSH
17975: PPUSH
// if not mc_bases then
17976: NOP4
17980: NOT
17981: IFFALSE 17985
// exit ;
17983: GO 18787
// for i = 1 to mc_bases do
17985: NOP4
17989: PUSH
17990: DOUBLE
17991: LD_INT 1
17993: DEC
17994: ST_TO_ADDR
17995: NOP4
17999: PUSH
18000: FOR_TO
18001: IFFALSE 18785
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
18003: NOP4
18007: PUSH
18008: NOP4
18012: ARRAY
18013: NOT
18014: PUSH
18015: NOP4
18019: PUSH
18020: NOP4
18024: ARRAY
18025: PUSH
18026: LD_INT 1
18028: ARRAY
18029: OR
18030: PUSH
18031: NOP4
18035: PUSH
18036: NOP4
18040: ARRAY
18041: PUSH
18042: LD_INT 2
18044: ARRAY
18045: OR
18046: PUSH
18047: NOP4
18051: PUSH
18052: NOP4
18056: ARRAY
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: NOP4
18065: NOT
18066: OR
18067: PUSH
18068: NOP4
18072: PUSH
18073: NOP4
18077: ARRAY
18078: OR
18079: IFFALSE 18083
// continue ;
18081: GO 18000
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
18083: NOP4
18087: PUSH
18088: NOP4
18092: PUSH
18093: NOP4
18097: ARRAY
18098: PPUSH
18099: LD_INT 25
18101: PUSH
18102: LD_INT 4
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 50
18111: PUSH
18112: EMPTY
18113: LIST
18114: PUSH
18115: LD_INT 3
18117: PUSH
18118: LD_INT 60
18120: PUSH
18121: EMPTY
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: PPUSH
18133: NOP4
18137: PUSH
18138: NOP4
18142: PUSH
18143: NOP4
18147: ARRAY
18148: DIFF
18149: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
18150: NOP4
18154: PUSH
18155: NOP4
18159: PUSH
18160: NOP4
18164: ARRAY
18165: PPUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 30
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 30
18181: PUSH
18182: LD_INT 1
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: PPUSH
18194: NOP4
18198: ST_TO_ADDR
// if not tmp or not dep then
18199: NOP4
18203: NOT
18204: PUSH
18205: NOP4
18209: NOT
18210: OR
18211: IFFALSE 18215
// continue ;
18213: GO 18000
// side := GetSide ( tmp [ 1 ] ) ;
18215: NOP4
18219: PUSH
18220: NOP4
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: NOP4
18233: ST_TO_ADDR
// dep := dep [ 1 ] ;
18234: NOP4
18238: PUSH
18239: NOP4
18243: PUSH
18244: LD_INT 1
18246: ARRAY
18247: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
18248: NOP4
18252: PUSH
18253: NOP4
18257: PUSH
18258: NOP4
18262: ARRAY
18263: PPUSH
18264: LD_INT 22
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 25
18276: PUSH
18277: LD_INT 12
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PPUSH
18288: NOP4
18292: PUSH
18293: LD_INT 22
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 25
18305: PUSH
18306: LD_INT 12
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 91
18315: PUSH
18316: NOP4
18320: PUSH
18321: LD_INT 20
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: LIST
18333: PPUSH
18334: NOP4
18338: UNION
18339: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
18340: NOP4
18344: PUSH
18345: NOP4
18349: PUSH
18350: NOP4
18354: ARRAY
18355: PPUSH
18356: LD_INT 81
18358: PUSH
18359: NOP4
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: NOP4
18372: ST_TO_ADDR
// if not apes or danger_at_area then
18373: NOP4
18377: NOT
18378: PUSH
18379: NOP4
18383: OR
18384: IFFALSE 18434
// begin if mc_taming [ i ] then
18386: NOP4
18390: PUSH
18391: NOP4
18395: ARRAY
18396: IFFALSE 18432
// begin MC_Reset ( i , 121 ) ;
18398: NOP4
18402: PPUSH
18403: LD_INT 121
18405: PPUSH
18406: NOP4
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18410: NOP4
18414: PUSH
18415: NOP4
18419: PPUSH
18420: NOP4
18424: PPUSH
18425: EMPTY
18426: PPUSH
18427: NOP4
18431: ST_TO_ADDR
// end ; continue ;
18432: GO 18000
// end ; for j in tmp do
18434: NOP4
18438: PUSH
18439: NOP4
18443: PUSH
18444: FOR_IN
18445: IFFALSE 18781
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
18447: NOP4
18451: PUSH
18452: NOP4
18456: PUSH
18457: NOP4
18461: ARRAY
18462: IN
18463: NOT
18464: PUSH
18465: NOP4
18469: PUSH
18470: NOP4
18474: ARRAY
18475: PUSH
18476: LD_INT 3
18478: LESS
18479: AND
18480: IFFALSE 18538
// begin SetTag ( j , 121 ) ;
18482: NOP4
18486: PPUSH
18487: LD_INT 121
18489: PPUSH
18490: NOP4
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
18494: NOP4
18498: PUSH
18499: NOP4
18503: PPUSH
18504: NOP4
18508: PUSH
18509: NOP4
18513: PUSH
18514: NOP4
18518: ARRAY
18519: PUSH
18520: LD_INT 1
18522: PLUS
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PPUSH
18528: NOP4
18532: PPUSH
18533: NOP4
18537: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
18538: NOP4
18542: PUSH
18543: NOP4
18547: PUSH
18548: NOP4
18552: ARRAY
18553: IN
18554: IFFALSE 18779
// begin if GetClass ( j ) <> 4 then
18556: NOP4
18560: PPUSH
18561: NOP4
18565: PUSH
18566: LD_INT 4
18568: NONEQUAL
18569: IFFALSE 18622
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
18571: NOP4
18575: PUSH
18576: NOP4
18580: PPUSH
18581: NOP4
18585: PPUSH
18586: NOP4
18590: PUSH
18591: NOP4
18595: ARRAY
18596: PUSH
18597: NOP4
18601: DIFF
18602: PPUSH
18603: NOP4
18607: ST_TO_ADDR
// SetTag ( j , 0 ) ;
18608: NOP4
18612: PPUSH
18613: LD_INT 0
18615: PPUSH
18616: NOP4
// continue ;
18620: GO 18444
// end ; if IsInUnit ( j ) then
18622: NOP4
18626: PPUSH
18627: NOP4
18631: IFFALSE 18642
// ComExitBuilding ( j ) ;
18633: NOP4
18637: PPUSH
18638: NOP4
// ape := NearestUnitToUnit ( apes , j ) ;
18642: NOP4
18646: PUSH
18647: NOP4
18651: PPUSH
18652: NOP4
18656: PPUSH
18657: NOP4
18661: ST_TO_ADDR
// if not ape then
18662: NOP4
18666: NOT
18667: IFFALSE 18671
// break ;
18669: GO 18781
// x := GetX ( ape ) ;
18671: NOP4
18675: PUSH
18676: NOP4
18680: PPUSH
18681: NOP4
18685: ST_TO_ADDR
// y := GetY ( ape ) ;
18686: NOP4
18690: PUSH
18691: NOP4
18695: PPUSH
18696: NOP4
18700: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18701: NOP4
18705: PPUSH
18706: NOP4
18710: PPUSH
18711: NOP4
18715: NOT
18716: PUSH
18717: NOP4
18721: PPUSH
18722: NOP4
18726: PPUSH
18727: NOP4
18731: PPUSH
18732: LD_INT 20
18734: PPUSH
18735: NOP4
18739: PUSH
18740: LD_INT 4
18742: ARRAY
18743: OR
18744: IFFALSE 18748
// break ;
18746: GO 18781
// if not HasTask ( j ) then
18748: NOP4
18752: PPUSH
18753: NOP4
18757: NOT
18758: IFFALSE 18779
// ComTameXY ( j , x , y ) ;
18760: NOP4
18764: PPUSH
18765: NOP4
18769: PPUSH
18770: NOP4
18774: PPUSH
18775: NOP4
// end ; end ;
18779: GO 18444
18781: POP
18782: POP
// end ;
18783: GO 18000
18785: POP
18786: POP
// end ;
18787: LD_VAR 0 1
18791: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
18792: LD_INT 0
18794: PPUSH
18795: PPUSH
18796: PPUSH
18797: PPUSH
18798: PPUSH
18799: PPUSH
18800: PPUSH
18801: PPUSH
// if not mc_bases then
18802: NOP4
18806: NOT
18807: IFFALSE 18811
// exit ;
18809: GO 19437
// for i = 1 to mc_bases do
18811: NOP4
18815: PUSH
18816: DOUBLE
18817: LD_INT 1
18819: DEC
18820: ST_TO_ADDR
18821: NOP4
18825: PUSH
18826: FOR_TO
18827: IFFALSE 19435
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
18829: NOP4
18833: PUSH
18834: NOP4
18838: ARRAY
18839: NOT
18840: PUSH
18841: NOP4
18845: PUSH
18846: NOP4
18850: ARRAY
18851: PPUSH
18852: LD_INT 25
18854: PUSH
18855: LD_INT 12
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PPUSH
18862: NOP4
18866: NOT
18867: OR
18868: IFFALSE 18872
// continue ;
18870: GO 18826
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
18872: NOP4
18876: PUSH
18877: NOP4
18881: PUSH
18882: NOP4
18886: ARRAY
18887: PUSH
18888: LD_INT 1
18890: ARRAY
18891: PPUSH
18892: NOP4
18896: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
18897: NOP4
18901: PPUSH
18902: LD_INT 2
18904: PPUSH
18905: NOP4
18909: IFFALSE 19162
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
18911: NOP4
18915: PUSH
18916: NOP4
18920: PUSH
18921: NOP4
18925: ARRAY
18926: PPUSH
18927: LD_INT 25
18929: PUSH
18930: LD_INT 16
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PPUSH
18937: NOP4
18941: ST_TO_ADDR
// if tmp < 6 then
18942: NOP4
18946: PUSH
18947: LD_INT 6
18949: LESS
18950: IFFALSE 19162
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
18952: NOP4
18956: PUSH
18957: NOP4
18961: PUSH
18962: NOP4
18966: ARRAY
18967: PPUSH
18968: LD_INT 2
18970: PUSH
18971: LD_INT 30
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 30
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: PPUSH
18996: NOP4
19000: ST_TO_ADDR
// if depot then
19001: NOP4
19005: IFFALSE 19162
// begin selected := 0 ;
19007: NOP4
19011: PUSH
19012: LD_INT 0
19014: ST_TO_ADDR
// for j in depot do
19015: NOP4
19019: PUSH
19020: NOP4
19024: PUSH
19025: FOR_IN
19026: IFFALSE 19057
// begin if UnitsInside ( j ) < 6 then
19028: NOP4
19032: PPUSH
19033: NOP4
19037: PUSH
19038: LD_INT 6
19040: LESS
19041: IFFALSE 19055
// begin selected := j ;
19043: NOP4
19047: PUSH
19048: NOP4
19052: ST_TO_ADDR
// break ;
19053: GO 19057
// end ; end ;
19055: GO 19025
19057: POP
19058: POP
// if selected then
19059: NOP4
19063: IFFALSE 19162
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
19065: NOP4
19069: PUSH
19070: NOP4
19074: PUSH
19075: NOP4
19079: ARRAY
19080: PPUSH
19081: LD_INT 25
19083: PUSH
19084: LD_INT 12
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PPUSH
19091: NOP4
19095: PUSH
19096: FOR_IN
19097: IFFALSE 19160
// if not HasTask ( j ) then
19099: NOP4
19103: PPUSH
19104: NOP4
19108: NOT
19109: IFFALSE 19158
// begin if not IsInUnit ( j ) then
19111: NOP4
19115: PPUSH
19116: NOP4
19120: NOT
19121: IFFALSE 19137
// ComEnterUnit ( j , selected ) ;
19123: NOP4
19127: PPUSH
19128: NOP4
19132: PPUSH
19133: NOP4
// AddComChangeProfession ( j , 16 ) ;
19137: NOP4
19141: PPUSH
19142: LD_INT 16
19144: PPUSH
19145: NOP4
// AddComExitBuilding ( j ) ;
19149: NOP4
19153: PPUSH
19154: NOP4
// end ;
19158: GO 19096
19160: POP
19161: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
19162: NOP4
19166: PPUSH
19167: LD_INT 11
19169: PPUSH
19170: NOP4
19174: IFFALSE 19433
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
19176: NOP4
19180: PUSH
19181: NOP4
19185: PUSH
19186: NOP4
19190: ARRAY
19191: PPUSH
19192: LD_INT 25
19194: PUSH
19195: LD_INT 16
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PPUSH
19202: NOP4
19206: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
19207: NOP4
19211: PUSH
19212: LD_INT 6
19214: GREATEREQUAL
19215: PUSH
19216: NOP4
19220: PPUSH
19221: LD_INT 2
19223: PPUSH
19224: NOP4
19228: NOT
19229: OR
19230: IFFALSE 19433
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
19232: NOP4
19236: PUSH
19237: NOP4
19241: PUSH
19242: NOP4
19246: ARRAY
19247: PPUSH
19248: LD_INT 2
19250: PUSH
19251: LD_INT 30
19253: PUSH
19254: LD_INT 4
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 30
19263: PUSH
19264: LD_INT 5
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: PPUSH
19276: NOP4
19280: ST_TO_ADDR
// if barracks then
19281: NOP4
19285: IFFALSE 19433
// begin selected := 0 ;
19287: NOP4
19291: PUSH
19292: LD_INT 0
19294: ST_TO_ADDR
// for j in barracks do
19295: NOP4
19299: PUSH
19300: NOP4
19304: PUSH
19305: FOR_IN
19306: IFFALSE 19337
// begin if UnitsInside ( j ) < 6 then
19308: NOP4
19312: PPUSH
19313: NOP4
19317: PUSH
19318: LD_INT 6
19320: LESS
19321: IFFALSE 19335
// begin selected := j ;
19323: NOP4
19327: PUSH
19328: NOP4
19332: ST_TO_ADDR
// break ;
19333: GO 19337
// end ; end ;
19335: GO 19305
19337: POP
19338: POP
// if selected then
19339: NOP4
19343: IFFALSE 19433
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
19345: NOP4
19349: PUSH
19350: NOP4
19354: PUSH
19355: NOP4
19359: ARRAY
19360: PPUSH
19361: LD_INT 25
19363: PUSH
19364: LD_INT 12
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PPUSH
19371: NOP4
19375: PUSH
19376: FOR_IN
19377: IFFALSE 19431
// if not IsInUnit ( j ) and not HasTask ( j ) then
19379: NOP4
19383: PPUSH
19384: NOP4
19388: NOT
19389: PUSH
19390: NOP4
19394: PPUSH
19395: NOP4
19399: NOT
19400: AND
19401: IFFALSE 19429
// begin ComEnterUnit ( j , selected ) ;
19403: NOP4
19407: PPUSH
19408: NOP4
19412: PPUSH
19413: NOP4
// AddComChangeProfession ( j , 15 ) ;
19417: NOP4
19421: PPUSH
19422: LD_INT 15
19424: PPUSH
19425: NOP4
// end ;
19429: GO 19376
19431: POP
19432: POP
// end ; end ; end ; end ; end ;
19433: GO 18826
19435: POP
19436: POP
// end ;
19437: LD_VAR 0 1
19441: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
19442: LD_INT 0
19444: PPUSH
19445: PPUSH
19446: PPUSH
19447: PPUSH
// if not mc_bases then
19448: NOP4
19452: NOT
19453: IFFALSE 19457
// exit ;
19455: GO 19635
// for i = 1 to mc_bases do
19457: NOP4
19461: PUSH
19462: DOUBLE
19463: LD_INT 1
19465: DEC
19466: ST_TO_ADDR
19467: NOP4
19471: PUSH
19472: FOR_TO
19473: IFFALSE 19633
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
19475: NOP4
19479: PUSH
19480: NOP4
19484: PUSH
19485: NOP4
19489: ARRAY
19490: PPUSH
19491: LD_INT 25
19493: PUSH
19494: LD_INT 9
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PPUSH
19501: NOP4
19505: ST_TO_ADDR
// if not tmp then
19506: NOP4
19510: NOT
19511: IFFALSE 19515
// continue ;
19513: GO 19472
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
19515: NOP4
19519: PUSH
19520: NOP4
19524: ARRAY
19525: PPUSH
19526: LD_INT 29
19528: PPUSH
19529: NOP4
19533: NOT
19534: PUSH
19535: NOP4
19539: PUSH
19540: NOP4
19544: ARRAY
19545: PPUSH
19546: LD_INT 28
19548: PPUSH
19549: NOP4
19553: NOT
19554: AND
19555: IFFALSE 19559
// continue ;
19557: GO 19472
// for j in tmp do
19559: NOP4
19563: PUSH
19564: NOP4
19568: PUSH
19569: FOR_IN
19570: IFFALSE 19629
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
19572: NOP4
19576: PUSH
19577: NOP4
19581: PUSH
19582: NOP4
19586: ARRAY
19587: PUSH
19588: LD_INT 1
19590: ARRAY
19591: IN
19592: NOT
19593: PUSH
19594: NOP4
19598: PUSH
19599: NOP4
19603: PUSH
19604: NOP4
19608: ARRAY
19609: PUSH
19610: LD_INT 2
19612: ARRAY
19613: IN
19614: NOT
19615: AND
19616: IFFALSE 19627
// ComSpaceTimeShoot ( j ) ;
19618: NOP4
19622: PPUSH
19623: NOP4
19627: GO 19569
19629: POP
19630: POP
// end ;
19631: GO 19472
19633: POP
19634: POP
// end ;
19635: LD_VAR 0 1
19639: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
19640: LD_INT 0
19642: PPUSH
19643: PPUSH
19644: PPUSH
19645: PPUSH
19646: PPUSH
19647: PPUSH
19648: PPUSH
19649: PPUSH
19650: PPUSH
// if not mc_bases then
19651: NOP4
19655: NOT
19656: IFFALSE 19660
// exit ;
19658: GO 20282
// for i = 1 to mc_bases do
19660: NOP4
19664: PUSH
19665: DOUBLE
19666: LD_INT 1
19668: DEC
19669: ST_TO_ADDR
19670: NOP4
19674: PUSH
19675: FOR_TO
19676: IFFALSE 20280
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
19678: NOP4
19682: PUSH
19683: NOP4
19687: ARRAY
19688: NOT
19689: PUSH
19690: LD_INT 38
19692: PPUSH
19693: NOP4
19697: PUSH
19698: NOP4
19702: ARRAY
19703: PPUSH
19704: NOP4
19708: PUSH
19709: LD_INT 2
19711: NONEQUAL
19712: OR
19713: IFFALSE 19717
// continue ;
19715: GO 19675
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
19717: NOP4
19721: PUSH
19722: NOP4
19726: PUSH
19727: NOP4
19731: ARRAY
19732: PPUSH
19733: LD_INT 30
19735: PUSH
19736: LD_INT 34
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PPUSH
19743: NOP4
19747: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
19748: NOP4
19752: PUSH
19753: NOP4
19757: PUSH
19758: NOP4
19762: ARRAY
19763: PPUSH
19764: LD_INT 25
19766: PUSH
19767: LD_INT 4
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PPUSH
19774: NOP4
19778: PPUSH
19779: LD_INT 0
19781: PPUSH
19782: NOP4
19786: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
19787: NOP4
19791: NOT
19792: PUSH
19793: NOP4
19797: NOT
19798: OR
19799: PUSH
19800: NOP4
19804: PUSH
19805: NOP4
19809: ARRAY
19810: PPUSH
19811: LD_INT 124
19813: PPUSH
19814: NOP4
19818: OR
19819: IFFALSE 19823
// continue ;
19821: GO 19675
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
19823: NOP4
19827: PUSH
19828: NOP4
19832: ARRAY
19833: PUSH
19834: NOP4
19838: PUSH
19839: NOP4
19843: ARRAY
19844: LESS
19845: PUSH
19846: NOP4
19850: PUSH
19851: NOP4
19855: ARRAY
19856: PUSH
19857: NOP4
19861: LESS
19862: AND
19863: IFFALSE 20278
// begin tmp := sci [ 1 ] ;
19865: NOP4
19869: PUSH
19870: NOP4
19874: PUSH
19875: LD_INT 1
19877: ARRAY
19878: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
19879: NOP4
19883: PPUSH
19884: LD_INT 124
19886: PPUSH
19887: NOP4
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
19891: NOP4
19895: PUSH
19896: DOUBLE
19897: NOP4
19901: PUSH
19902: NOP4
19906: ARRAY
19907: INC
19908: ST_TO_ADDR
19909: NOP4
19913: PUSH
19914: NOP4
19918: ARRAY
19919: PUSH
19920: FOR_DOWNTO
19921: IFFALSE 20264
// begin if IsInUnit ( tmp ) then
19923: NOP4
19927: PPUSH
19928: NOP4
19932: IFFALSE 19943
// ComExitBuilding ( tmp ) ;
19934: NOP4
19938: PPUSH
19939: NOP4
// repeat wait ( 0 0$1 ) ;
19943: LD_INT 35
19945: PPUSH
19946: NOP4
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
19950: NOP4
19954: PPUSH
19955: NOP4
19959: NOT
19960: PUSH
19961: NOP4
19965: PPUSH
19966: NOP4
19970: NOT
19971: AND
19972: IFFALSE 19943
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
19974: NOP4
19978: PUSH
19979: NOP4
19983: PPUSH
19984: NOP4
19988: PUSH
19989: NOP4
19993: PPUSH
19994: NOP4
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20003: LD_INT 35
20005: PPUSH
20006: NOP4
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
20010: NOP4
20014: PUSH
20015: NOP4
20019: PUSH
20020: NOP4
20024: ARRAY
20025: PUSH
20026: NOP4
20030: ARRAY
20031: PUSH
20032: LD_INT 1
20034: ARRAY
20035: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
20036: NOP4
20040: PUSH
20041: NOP4
20045: PUSH
20046: NOP4
20050: ARRAY
20051: PUSH
20052: NOP4
20056: ARRAY
20057: PUSH
20058: LD_INT 2
20060: ARRAY
20061: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
20062: NOP4
20066: PPUSH
20067: LD_INT 10
20069: PPUSH
20070: NOP4
20074: PUSH
20075: LD_INT 4
20077: ARRAY
20078: IFFALSE 20116
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
20080: NOP4
20084: PPUSH
20085: NOP4
20089: PUSH
20090: LD_INT 1
20092: ARRAY
20093: PPUSH
20094: NOP4
20098: PUSH
20099: LD_INT 2
20101: ARRAY
20102: PPUSH
20103: NOP4
// wait ( 0 0$10 ) ;
20107: LD_INT 350
20109: PPUSH
20110: NOP4
// end else
20114: GO 20142
// begin ComMoveXY ( tmp , x , y ) ;
20116: NOP4
20120: PPUSH
20121: NOP4
20125: PPUSH
20126: NOP4
20130: PPUSH
20131: NOP4
// wait ( 0 0$3 ) ;
20135: LD_INT 105
20137: PPUSH
20138: NOP4
// end ; until IsAt ( tmp , x , y ) ;
20142: NOP4
20146: PPUSH
20147: NOP4
20151: PPUSH
20152: NOP4
20156: PPUSH
20157: NOP4
20161: IFFALSE 20003
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
20163: NOP4
20167: PPUSH
20168: NOP4
20172: PPUSH
20173: NOP4
20177: PPUSH
20178: NOP4
20182: PUSH
20183: NOP4
20187: ARRAY
20188: PPUSH
20189: NOP4
// repeat wait ( 0 0$1 ) ;
20193: LD_INT 35
20195: PPUSH
20196: NOP4
// until not HasTask ( tmp ) ;
20200: NOP4
20204: PPUSH
20205: NOP4
20209: NOT
20210: IFFALSE 20193
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
20212: NOP4
20216: PUSH
20217: NOP4
20221: PPUSH
20222: NOP4
20226: PUSH
20227: NOP4
20231: PUSH
20232: NOP4
20236: ARRAY
20237: PUSH
20238: LD_INT 1
20240: PLUS
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PPUSH
20246: NOP4
20250: PUSH
20251: NOP4
20255: ARRAY
20256: PPUSH
20257: NOP4
20261: ST_TO_ADDR
// end ;
20262: GO 19920
20264: POP
20265: POP
// MC_Reset ( i , 124 ) ;
20266: NOP4
20270: PPUSH
20271: LD_INT 124
20273: PPUSH
20274: NOP4
// end ; end ;
20278: GO 19675
20280: POP
20281: POP
// end ;
20282: LD_VAR 0 1
20286: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
20287: LD_INT 0
20289: PPUSH
20290: PPUSH
20291: PPUSH
// if not mc_bases then
20292: NOP4
20296: NOT
20297: IFFALSE 20301
// exit ;
20299: GO 20907
// for i = 1 to mc_bases do
20301: NOP4
20305: PUSH
20306: DOUBLE
20307: LD_INT 1
20309: DEC
20310: ST_TO_ADDR
20311: NOP4
20315: PUSH
20316: FOR_TO
20317: IFFALSE 20905
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
20319: NOP4
20323: PUSH
20324: NOP4
20328: PUSH
20329: NOP4
20333: ARRAY
20334: PPUSH
20335: LD_INT 25
20337: PUSH
20338: LD_INT 4
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PPUSH
20345: NOP4
20349: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
20350: NOP4
20354: NOT
20355: PUSH
20356: NOP4
20360: PUSH
20361: NOP4
20365: ARRAY
20366: NOT
20367: OR
20368: PUSH
20369: NOP4
20373: PUSH
20374: NOP4
20378: ARRAY
20379: PPUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 30
20385: PUSH
20386: LD_INT 0
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 30
20395: PUSH
20396: LD_INT 1
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: LIST
20407: PPUSH
20408: NOP4
20412: NOT
20413: OR
20414: IFFALSE 20464
// begin if mc_deposits_finder [ i ] then
20416: NOP4
20420: PUSH
20421: NOP4
20425: ARRAY
20426: IFFALSE 20462
// begin MC_Reset ( i , 125 ) ;
20428: NOP4
20432: PPUSH
20433: LD_INT 125
20435: PPUSH
20436: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
20440: NOP4
20444: PUSH
20445: NOP4
20449: PPUSH
20450: NOP4
20454: PPUSH
20455: EMPTY
20456: PPUSH
20457: NOP4
20461: ST_TO_ADDR
// end ; continue ;
20462: GO 20316
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
20464: NOP4
20468: PUSH
20469: NOP4
20473: ARRAY
20474: PUSH
20475: LD_INT 1
20477: ARRAY
20478: PUSH
20479: LD_INT 3
20481: ARRAY
20482: PUSH
20483: LD_INT 1
20485: EQUAL
20486: PUSH
20487: LD_INT 20
20489: PPUSH
20490: NOP4
20494: PUSH
20495: NOP4
20499: ARRAY
20500: PPUSH
20501: NOP4
20505: PUSH
20506: LD_INT 2
20508: NONEQUAL
20509: AND
20510: IFFALSE 20560
// begin if mc_deposits_finder [ i ] then
20512: NOP4
20516: PUSH
20517: NOP4
20521: ARRAY
20522: IFFALSE 20558
// begin MC_Reset ( i , 125 ) ;
20524: NOP4
20528: PPUSH
20529: LD_INT 125
20531: PPUSH
20532: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
20536: NOP4
20540: PUSH
20541: NOP4
20545: PPUSH
20546: NOP4
20550: PPUSH
20551: EMPTY
20552: PPUSH
20553: NOP4
20557: ST_TO_ADDR
// end ; continue ;
20558: GO 20316
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
20560: NOP4
20564: PUSH
20565: NOP4
20569: ARRAY
20570: PUSH
20571: LD_INT 1
20573: ARRAY
20574: PUSH
20575: LD_INT 1
20577: ARRAY
20578: PPUSH
20579: NOP4
20583: PUSH
20584: NOP4
20588: ARRAY
20589: PUSH
20590: LD_INT 1
20592: ARRAY
20593: PUSH
20594: LD_INT 2
20596: ARRAY
20597: PPUSH
20598: NOP4
20602: PUSH
20603: NOP4
20607: ARRAY
20608: PPUSH
20609: NOP4
20613: IFFALSE 20656
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
20615: NOP4
20619: PUSH
20620: NOP4
20624: PPUSH
20625: NOP4
20629: PPUSH
20630: NOP4
20634: PUSH
20635: NOP4
20639: ARRAY
20640: PPUSH
20641: LD_INT 1
20643: PPUSH
20644: NOP4
20648: PPUSH
20649: NOP4
20653: ST_TO_ADDR
20654: GO 20903
// begin if not mc_deposits_finder [ i ] then
20656: NOP4
20660: PUSH
20661: NOP4
20665: ARRAY
20666: NOT
20667: IFFALSE 20719
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
20669: NOP4
20673: PUSH
20674: NOP4
20678: PPUSH
20679: NOP4
20683: PPUSH
20684: NOP4
20688: PUSH
20689: LD_INT 1
20691: ARRAY
20692: PUSH
20693: EMPTY
20694: LIST
20695: PPUSH
20696: NOP4
20700: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
20701: NOP4
20705: PUSH
20706: LD_INT 1
20708: ARRAY
20709: PPUSH
20710: LD_INT 125
20712: PPUSH
20713: NOP4
// end else
20717: GO 20903
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
20719: NOP4
20723: PUSH
20724: NOP4
20728: ARRAY
20729: PUSH
20730: LD_INT 1
20732: ARRAY
20733: PPUSH
20734: NOP4
20738: IFFALSE 20761
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
20740: NOP4
20744: PUSH
20745: NOP4
20749: ARRAY
20750: PUSH
20751: LD_INT 1
20753: ARRAY
20754: PPUSH
20755: NOP4
20759: GO 20903
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
20761: NOP4
20765: PUSH
20766: NOP4
20770: ARRAY
20771: PUSH
20772: LD_INT 1
20774: ARRAY
20775: PPUSH
20776: NOP4
20780: NOT
20781: PUSH
20782: NOP4
20786: PUSH
20787: NOP4
20791: ARRAY
20792: PUSH
20793: LD_INT 1
20795: ARRAY
20796: PPUSH
20797: NOP4
20801: PUSH
20802: NOP4
20806: ARRAY
20807: PUSH
20808: LD_INT 1
20810: ARRAY
20811: PUSH
20812: LD_INT 1
20814: ARRAY
20815: PPUSH
20816: NOP4
20820: PUSH
20821: NOP4
20825: ARRAY
20826: PUSH
20827: LD_INT 1
20829: ARRAY
20830: PUSH
20831: LD_INT 2
20833: ARRAY
20834: PPUSH
20835: NOP4
20839: PUSH
20840: LD_INT 6
20842: GREATER
20843: AND
20844: IFFALSE 20903
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
20846: NOP4
20850: PUSH
20851: NOP4
20855: ARRAY
20856: PUSH
20857: LD_INT 1
20859: ARRAY
20860: PPUSH
20861: NOP4
20865: PUSH
20866: NOP4
20870: ARRAY
20871: PUSH
20872: LD_INT 1
20874: ARRAY
20875: PUSH
20876: LD_INT 1
20878: ARRAY
20879: PPUSH
20880: NOP4
20884: PUSH
20885: NOP4
20889: ARRAY
20890: PUSH
20891: LD_INT 1
20893: ARRAY
20894: PUSH
20895: LD_INT 2
20897: ARRAY
20898: PPUSH
20899: NOP4
// end ; end ; end ;
20903: GO 20316
20905: POP
20906: POP
// end ;
20907: LD_VAR 0 1
20911: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
20912: LD_INT 0
20914: PPUSH
20915: PPUSH
20916: PPUSH
20917: PPUSH
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
20922: PPUSH
20923: PPUSH
20924: PPUSH
// if not mc_bases then
20925: NOP4
20929: NOT
20930: IFFALSE 20934
// exit ;
20932: GO 21658
// for i = 1 to mc_bases do
20934: NOP4
20938: PUSH
20939: DOUBLE
20940: LD_INT 1
20942: DEC
20943: ST_TO_ADDR
20944: NOP4
20948: PUSH
20949: FOR_TO
20950: IFFALSE 21656
// begin if not mc_bases [ i ] then
20952: NOP4
20956: PUSH
20957: NOP4
20961: ARRAY
20962: NOT
20963: IFFALSE 20967
// continue ;
20965: GO 20949
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
20967: NOP4
20971: PUSH
20972: NOP4
20976: PUSH
20977: NOP4
20981: ARRAY
20982: PUSH
20983: LD_INT 1
20985: ARRAY
20986: PPUSH
20987: NOP4
20991: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
20992: NOP4
20996: PUSH
20997: LD_INT 3
20999: EQUAL
21000: PUSH
21001: NOP4
21005: PUSH
21006: NOP4
21010: ARRAY
21011: PUSH
21012: NOP4
21016: PUSH
21017: NOP4
21021: ARRAY
21022: UNION
21023: PPUSH
21024: LD_INT 33
21026: PUSH
21027: LD_INT 2
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PPUSH
21034: NOP4
21038: NOT
21039: OR
21040: IFFALSE 21044
// continue ;
21042: GO 20949
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
21044: NOP4
21048: PUSH
21049: NOP4
21053: PUSH
21054: NOP4
21058: ARRAY
21059: PPUSH
21060: LD_INT 30
21062: PUSH
21063: LD_INT 36
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PPUSH
21070: NOP4
21074: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
21075: NOP4
21079: PUSH
21080: NOP4
21084: PUSH
21085: NOP4
21089: ARRAY
21090: PPUSH
21091: LD_INT 34
21093: PUSH
21094: LD_INT 31
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PPUSH
21101: NOP4
21105: ST_TO_ADDR
// if not cts and not mcts then
21106: NOP4
21110: NOT
21111: PUSH
21112: NOP4
21116: NOT
21117: AND
21118: IFFALSE 21122
// continue ;
21120: GO 20949
// x := cts ;
21122: NOP4
21126: PUSH
21127: NOP4
21131: ST_TO_ADDR
// if not x then
21132: NOP4
21136: NOT
21137: IFFALSE 21149
// x := mcts ;
21139: NOP4
21143: PUSH
21144: NOP4
21148: ST_TO_ADDR
// if mc_remote_driver [ i ] then
21149: NOP4
21153: PUSH
21154: NOP4
21158: ARRAY
21159: IFFALSE 21428
// for j in mc_remote_driver [ i ] do
21161: NOP4
21165: PUSH
21166: NOP4
21170: PUSH
21171: NOP4
21175: ARRAY
21176: PUSH
21177: FOR_IN
21178: IFFALSE 21426
// begin if GetClass ( j ) <> 3 then
21180: NOP4
21184: PPUSH
21185: NOP4
21189: PUSH
21190: LD_INT 3
21192: NONEQUAL
21193: IFFALSE 21246
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
21195: NOP4
21199: PUSH
21200: NOP4
21204: PPUSH
21205: NOP4
21209: PPUSH
21210: NOP4
21214: PUSH
21215: NOP4
21219: ARRAY
21220: PUSH
21221: NOP4
21225: DIFF
21226: PPUSH
21227: NOP4
21231: ST_TO_ADDR
// SetTag ( j , 0 ) ;
21232: NOP4
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: NOP4
// continue ;
21244: GO 21177
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
21246: NOP4
21250: PPUSH
21251: NOP4
21255: NOT
21256: PUSH
21257: NOP4
21261: PPUSH
21262: NOP4
21266: PPUSH
21267: NOP4
21271: PUSH
21272: LD_INT 36
21274: NONEQUAL
21275: PUSH
21276: NOP4
21280: PPUSH
21281: NOP4
21285: NOT
21286: AND
21287: OR
21288: IFFALSE 21424
// begin if IsInUnit ( j ) then
21290: NOP4
21294: PPUSH
21295: NOP4
21299: IFFALSE 21310
// ComExitBuilding ( j ) ;
21301: NOP4
21305: PPUSH
21306: NOP4
// ct := 0 ;
21310: NOP4
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// for k in x do
21318: NOP4
21322: PUSH
21323: NOP4
21327: PUSH
21328: FOR_IN
21329: IFFALSE 21402
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
21331: NOP4
21335: PPUSH
21336: NOP4
21340: PUSH
21341: LD_INT 31
21343: EQUAL
21344: PUSH
21345: NOP4
21349: PPUSH
21350: NOP4
21354: NOT
21355: AND
21356: PUSH
21357: NOP4
21361: PPUSH
21362: NOP4
21366: PUSH
21367: LD_INT 36
21369: EQUAL
21370: PUSH
21371: NOP4
21375: PPUSH
21376: NOP4
21380: PUSH
21381: LD_INT 3
21383: LESS
21384: AND
21385: OR
21386: IFFALSE 21400
// begin ct := k ;
21388: NOP4
21392: PUSH
21393: NOP4
21397: ST_TO_ADDR
// break ;
21398: GO 21402
// end ;
21400: GO 21328
21402: POP
21403: POP
// if ct then
21404: NOP4
21408: IFFALSE 21424
// ComEnterUnit ( j , ct ) ;
21410: NOP4
21414: PPUSH
21415: NOP4
21419: PPUSH
21420: NOP4
// end ; end ;
21424: GO 21177
21426: POP
21427: POP
// places := 0 ;
21428: NOP4
21432: PUSH
21433: LD_INT 0
21435: ST_TO_ADDR
// for j = 1 to x do
21436: NOP4
21440: PUSH
21441: DOUBLE
21442: LD_INT 1
21444: DEC
21445: ST_TO_ADDR
21446: NOP4
21450: PUSH
21451: FOR_TO
21452: IFFALSE 21507
// if GetWeapon ( x [ j ] ) = ar_control_tower then
21454: NOP4
21458: PUSH
21459: NOP4
21463: ARRAY
21464: PPUSH
21465: NOP4
21469: PUSH
21470: LD_INT 31
21472: EQUAL
21473: IFFALSE 21491
// places := places + 1 else
21475: NOP4
21479: PUSH
21480: NOP4
21484: PUSH
21485: LD_INT 1
21487: PLUS
21488: ST_TO_ADDR
21489: GO 21505
// places := places + 3 ;
21491: NOP4
21495: PUSH
21496: NOP4
21500: PUSH
21501: LD_INT 3
21503: PLUS
21504: ST_TO_ADDR
21505: GO 21451
21507: POP
21508: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
21509: NOP4
21513: PUSH
21514: NOP4
21518: PUSH
21519: NOP4
21523: ARRAY
21524: PPUSH
21525: LD_INT 25
21527: PUSH
21528: LD_INT 3
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PPUSH
21535: NOP4
21539: PUSH
21540: NOP4
21544: PUSH
21545: NOP4
21549: ARRAY
21550: DIFF
21551: PPUSH
21552: LD_INT 3
21554: PPUSH
21555: NOP4
21559: ST_TO_ADDR
// if not tmp then
21560: NOP4
21564: NOT
21565: IFFALSE 21569
// continue ;
21567: GO 20949
// places := places - mc_remote_driver [ i ] ;
21569: NOP4
21573: PUSH
21574: NOP4
21578: PUSH
21579: NOP4
21583: PUSH
21584: NOP4
21588: ARRAY
21589: MINUS
21590: ST_TO_ADDR
// if places then
21591: NOP4
21595: IFFALSE 21654
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
21597: NOP4
21601: PUSH
21602: NOP4
21606: PPUSH
21607: NOP4
21611: PPUSH
21612: NOP4
21616: PUSH
21617: NOP4
21621: ARRAY
21622: PUSH
21623: NOP4
21627: PUSH
21628: LD_INT 1
21630: ARRAY
21631: UNION
21632: PPUSH
21633: NOP4
21637: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
21638: NOP4
21642: PUSH
21643: LD_INT 1
21645: ARRAY
21646: PPUSH
21647: LD_INT 126
21649: PPUSH
21650: NOP4
// end ; end ;
21654: GO 20949
21656: POP
21657: POP
// end ;
21658: LD_VAR 0 1
21662: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
21663: LD_INT 0
21665: PPUSH
21666: PPUSH
21667: PPUSH
21668: PPUSH
21669: PPUSH
21670: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
21671: NOP4
21675: NOT
21676: PUSH
21677: NOP4
21681: NOT
21682: OR
21683: PUSH
21684: NOP4
21688: NOT
21689: OR
21690: PUSH
21691: NOP4
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: LD_INT 4
21707: PUSH
21708: LD_INT 5
21710: PUSH
21711: LD_INT 8
21713: PUSH
21714: LD_INT 9
21716: PUSH
21717: LD_INT 15
21719: PUSH
21720: LD_INT 16
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: IN
21734: NOT
21735: OR
21736: IFFALSE 21740
// exit ;
21738: GO 22640
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
21740: NOP4
21744: PUSH
21745: NOP4
21749: PPUSH
21750: LD_INT 21
21752: PUSH
21753: LD_INT 3
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 24
21762: PUSH
21763: LD_INT 250
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PPUSH
21774: NOP4
21778: ST_TO_ADDR
// case class of 1 , 15 :
21779: NOP4
21783: PUSH
21784: LD_INT 1
21786: DOUBLE
21787: EQUAL
21788: IFTRUE 21798
21790: LD_INT 15
21792: DOUBLE
21793: EQUAL
21794: IFTRUE 21798
21796: GO 21883
21798: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
21799: NOP4
21803: PUSH
21804: NOP4
21808: PPUSH
21809: LD_INT 2
21811: PUSH
21812: LD_INT 30
21814: PUSH
21815: LD_INT 32
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 30
21824: PUSH
21825: LD_INT 31
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: PPUSH
21837: NOP4
21841: PUSH
21842: NOP4
21846: PPUSH
21847: LD_INT 2
21849: PUSH
21850: LD_INT 30
21852: PUSH
21853: LD_INT 4
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 30
21862: PUSH
21863: LD_INT 5
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: PPUSH
21875: NOP4
21879: ADD
21880: ST_TO_ADDR
21881: GO 22129
21883: LD_INT 2
21885: DOUBLE
21886: EQUAL
21887: IFTRUE 21897
21889: LD_INT 16
21891: DOUBLE
21892: EQUAL
21893: IFTRUE 21897
21895: GO 21943
21897: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
21898: NOP4
21902: PUSH
21903: NOP4
21907: PPUSH
21908: LD_INT 2
21910: PUSH
21911: LD_INT 30
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 30
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: PPUSH
21936: NOP4
21940: ST_TO_ADDR
21941: GO 22129
21943: LD_INT 3
21945: DOUBLE
21946: EQUAL
21947: IFTRUE 21951
21949: GO 21997
21951: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
21952: NOP4
21956: PUSH
21957: NOP4
21961: PPUSH
21962: LD_INT 2
21964: PUSH
21965: LD_INT 30
21967: PUSH
21968: LD_INT 2
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 30
21977: PUSH
21978: LD_INT 3
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: PPUSH
21990: NOP4
21994: ST_TO_ADDR
21995: GO 22129
21997: LD_INT 4
21999: DOUBLE
22000: EQUAL
22001: IFTRUE 22005
22003: GO 22062
22005: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
22006: NOP4
22010: PUSH
22011: NOP4
22015: PPUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 30
22021: PUSH
22022: LD_INT 6
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 30
22031: PUSH
22032: LD_INT 7
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 30
22041: PUSH
22042: LD_INT 8
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: PPUSH
22055: NOP4
22059: ST_TO_ADDR
22060: GO 22129
22062: LD_INT 5
22064: DOUBLE
22065: EQUAL
22066: IFTRUE 22082
22068: LD_INT 8
22070: DOUBLE
22071: EQUAL
22072: IFTRUE 22082
22074: LD_INT 9
22076: DOUBLE
22077: EQUAL
22078: IFTRUE 22082
22080: GO 22128
22082: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
22083: NOP4
22087: PUSH
22088: NOP4
22092: PPUSH
22093: LD_INT 2
22095: PUSH
22096: LD_INT 30
22098: PUSH
22099: LD_INT 4
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 30
22108: PUSH
22109: LD_INT 5
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: PPUSH
22121: NOP4
22125: ST_TO_ADDR
22126: GO 22129
22128: POP
// if not tmp then
22129: NOP4
22133: NOT
22134: IFFALSE 22138
// exit ;
22136: GO 22640
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
22138: NOP4
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: LD_INT 15
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: IN
22153: PUSH
22154: NOP4
22158: PUSH
22159: NOP4
22163: ARRAY
22164: AND
22165: IFFALSE 22321
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
22167: NOP4
22171: PUSH
22172: NOP4
22176: PUSH
22177: NOP4
22181: ARRAY
22182: PUSH
22183: LD_INT 1
22185: ARRAY
22186: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
22187: NOP4
22191: PUSH
22192: NOP4
22196: PUSH
22197: NOP4
22201: ARRAY
22202: IN
22203: NOT
22204: IFFALSE 22319
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
22206: NOP4
22210: PUSH
22211: NOP4
22215: PPUSH
22216: NOP4
22220: PUSH
22221: NOP4
22225: PUSH
22226: NOP4
22230: ARRAY
22231: PUSH
22232: LD_INT 1
22234: PLUS
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PPUSH
22240: NOP4
22244: PPUSH
22245: NOP4
22249: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
22250: NOP4
22254: PUSH
22255: NOP4
22259: PPUSH
22260: NOP4
22264: PPUSH
22265: NOP4
22269: PUSH
22270: NOP4
22274: ARRAY
22275: PUSH
22276: NOP4
22280: DIFF
22281: PPUSH
22282: NOP4
22286: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
22287: NOP4
22291: PPUSH
22292: NOP4
22296: PUSH
22297: NOP4
22301: ARRAY
22302: PUSH
22303: NOP4
22307: PUSH
22308: NOP4
22312: ARRAY
22313: ARRAY
22314: PPUSH
22315: NOP4
// end ; exit ;
22319: GO 22640
// end ; if tmp > 1 then
22321: NOP4
22325: PUSH
22326: LD_INT 1
22328: GREATER
22329: IFFALSE 22433
// for i = 2 to tmp do
22331: NOP4
22335: PUSH
22336: DOUBLE
22337: LD_INT 2
22339: DEC
22340: ST_TO_ADDR
22341: NOP4
22345: PUSH
22346: FOR_TO
22347: IFFALSE 22431
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
22349: NOP4
22353: PUSH
22354: NOP4
22358: ARRAY
22359: PPUSH
22360: NOP4
22364: PUSH
22365: LD_INT 6
22367: EQUAL
22368: IFFALSE 22429
// begin x := tmp [ i ] ;
22370: NOP4
22374: PUSH
22375: NOP4
22379: PUSH
22380: NOP4
22384: ARRAY
22385: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
22386: NOP4
22390: PUSH
22391: NOP4
22395: PPUSH
22396: NOP4
22400: PPUSH
22401: NOP4
22405: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
22406: NOP4
22410: PUSH
22411: NOP4
22415: PPUSH
22416: LD_INT 1
22418: PPUSH
22419: NOP4
22423: PPUSH
22424: NOP4
22428: ST_TO_ADDR
// end ;
22429: GO 22346
22431: POP
22432: POP
// for i in tmp do
22433: NOP4
22437: PUSH
22438: NOP4
22442: PUSH
22443: FOR_IN
22444: IFFALSE 22513
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
22446: NOP4
22450: PPUSH
22451: NOP4
22455: PUSH
22456: LD_INT 6
22458: LESS
22459: PUSH
22460: NOP4
22464: PPUSH
22465: NOP4
22469: PUSH
22470: LD_INT 31
22472: PUSH
22473: LD_INT 32
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: IN
22480: NOT
22481: AND
22482: PUSH
22483: NOP4
22487: PPUSH
22488: NOP4
22492: PUSH
22493: LD_INT 0
22495: EQUAL
22496: OR
22497: IFFALSE 22511
// begin j := i ;
22499: NOP4
22503: PUSH
22504: NOP4
22508: ST_TO_ADDR
// break ;
22509: GO 22513
// end ; end ;
22511: GO 22443
22513: POP
22514: POP
// if j then
22515: NOP4
22519: IFFALSE 22537
// ComEnterUnit ( unit , j ) else
22521: NOP4
22525: PPUSH
22526: NOP4
22530: PPUSH
22531: NOP4
22535: GO 22640
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
22537: NOP4
22541: PUSH
22542: NOP4
22546: PPUSH
22547: LD_INT 2
22549: PUSH
22550: LD_INT 30
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 30
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: PPUSH
22575: NOP4
22579: ST_TO_ADDR
// if depot then
22580: NOP4
22584: IFFALSE 22640
// begin depot := NearestUnitToUnit ( depot , unit ) ;
22586: NOP4
22590: PUSH
22591: NOP4
22595: PPUSH
22596: NOP4
22600: PPUSH
22601: NOP4
22605: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
22606: NOP4
22610: PPUSH
22611: NOP4
22615: PPUSH
22616: NOP4
22620: PUSH
22621: LD_INT 10
22623: GREATER
22624: IFFALSE 22640
// ComStandNearbyBuilding ( unit , depot ) ;
22626: NOP4
22630: PPUSH
22631: NOP4
22635: PPUSH
22636: NOP4
// end ; end ; end ;
22640: LD_VAR 0 5
22644: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
22645: LD_INT 0
22647: PPUSH
22648: PPUSH
22649: PPUSH
22650: PPUSH
// if not mc_bases then
22651: NOP4
22655: NOT
22656: IFFALSE 22660
// exit ;
22658: GO 22899
// for i = 1 to mc_bases do
22660: NOP4
22664: PUSH
22665: DOUBLE
22666: LD_INT 1
22668: DEC
22669: ST_TO_ADDR
22670: NOP4
22674: PUSH
22675: FOR_TO
22676: IFFALSE 22897
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
22678: NOP4
22682: PUSH
22683: NOP4
22687: PUSH
22688: NOP4
22692: ARRAY
22693: PPUSH
22694: LD_INT 21
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PPUSH
22704: NOP4
22708: PUSH
22709: NOP4
22713: PUSH
22714: NOP4
22718: ARRAY
22719: UNION
22720: ST_TO_ADDR
// if not tmp then
22721: NOP4
22725: NOT
22726: IFFALSE 22730
// continue ;
22728: GO 22675
// for j in tmp do
22730: NOP4
22734: PUSH
22735: NOP4
22739: PUSH
22740: FOR_IN
22741: IFFALSE 22893
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
22743: NOP4
22747: PPUSH
22748: NOP4
22752: NOT
22753: PUSH
22754: NOP4
22758: PPUSH
22759: NOP4
22763: NOT
22764: AND
22765: PUSH
22766: NOP4
22770: PPUSH
22771: NOP4
22775: NOT
22776: AND
22777: PUSH
22778: NOP4
22782: PPUSH
22783: NOP4
22787: NOT
22788: AND
22789: PUSH
22790: NOP4
22794: PUSH
22795: NOP4
22799: PUSH
22800: NOP4
22804: ARRAY
22805: PUSH
22806: LD_INT 1
22808: ARRAY
22809: IN
22810: NOT
22811: AND
22812: PUSH
22813: NOP4
22817: PUSH
22818: NOP4
22822: PUSH
22823: NOP4
22827: ARRAY
22828: PUSH
22829: LD_INT 2
22831: ARRAY
22832: IN
22833: NOT
22834: AND
22835: PUSH
22836: NOP4
22840: PUSH
22841: NOP4
22845: PUSH
22846: NOP4
22850: ARRAY
22851: IN
22852: NOT
22853: AND
22854: IFFALSE 22891
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
22856: NOP4
22860: PPUSH
22861: NOP4
22865: PUSH
22866: NOP4
22870: ARRAY
22871: PPUSH
22872: NOP4
22876: PPUSH
22877: NOP4
22881: PPUSH
22882: NOP4
22886: PPUSH
22887: NOP4
// end ;
22891: GO 22740
22893: POP
22894: POP
// end ;
22895: GO 22675
22897: POP
22898: POP
// end ;
22899: LD_VAR 0 1
22903: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
22904: LD_INT 0
22906: PPUSH
22907: PPUSH
22908: PPUSH
22909: PPUSH
22910: PPUSH
22911: PPUSH
// if not mc_bases [ base ] then
22912: NOP4
22916: PUSH
22917: NOP4
22921: ARRAY
22922: NOT
22923: IFFALSE 22927
// exit ;
22925: GO 23109
// tmp := [ ] ;
22927: NOP4
22931: PUSH
22932: EMPTY
22933: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
22934: NOP4
22938: PUSH
22939: NOP4
22943: PPUSH
22944: LD_INT 0
22946: PPUSH
22947: NOP4
22951: ST_TO_ADDR
// if not list then
22952: NOP4
22956: NOT
22957: IFFALSE 22961
// exit ;
22959: GO 23109
// for i = 1 to amount do
22961: NOP4
22965: PUSH
22966: DOUBLE
22967: LD_INT 1
22969: DEC
22970: ST_TO_ADDR
22971: NOP4
22975: PUSH
22976: FOR_TO
22977: IFFALSE 23057
// begin x := rand ( 1 , list [ 1 ] ) ;
22979: NOP4
22983: PUSH
22984: LD_INT 1
22986: PPUSH
22987: NOP4
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: PPUSH
22996: NOP4
23000: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
23001: NOP4
23005: PUSH
23006: NOP4
23010: PPUSH
23011: NOP4
23015: PPUSH
23016: NOP4
23020: PUSH
23021: LD_INT 1
23023: ARRAY
23024: PUSH
23025: NOP4
23029: ARRAY
23030: PUSH
23031: NOP4
23035: PUSH
23036: LD_INT 2
23038: ARRAY
23039: PUSH
23040: NOP4
23044: ARRAY
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PPUSH
23050: NOP4
23054: ST_TO_ADDR
// end ;
23055: GO 22976
23057: POP
23058: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
23059: NOP4
23063: PUSH
23064: NOP4
23068: PPUSH
23069: NOP4
23073: PPUSH
23074: NOP4
23078: PPUSH
23079: NOP4
23083: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
23084: NOP4
23088: PUSH
23089: NOP4
23093: PPUSH
23094: NOP4
23098: PPUSH
23099: NOP4
23103: PPUSH
23104: NOP4
23108: ST_TO_ADDR
// end ;
23109: LD_VAR 0 4
23113: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
23114: LD_INT 0
23116: PPUSH
// if not mc_bases [ base ] then
23117: NOP4
23121: PUSH
23122: NOP4
23126: ARRAY
23127: NOT
23128: IFFALSE 23132
// exit ;
23130: GO 23157
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
23132: NOP4
23136: PUSH
23137: NOP4
23141: PPUSH
23142: NOP4
23146: PPUSH
23147: NOP4
23151: PPUSH
23152: NOP4
23156: ST_TO_ADDR
// end ;
23157: LD_VAR 0 3
23161: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
23162: LD_INT 0
23164: PPUSH
// if not mc_bases [ base ] then
23165: NOP4
23169: PUSH
23170: NOP4
23174: ARRAY
23175: NOT
23176: IFFALSE 23180
// exit ;
23178: GO 23217
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
23180: NOP4
23184: PUSH
23185: NOP4
23189: PPUSH
23190: NOP4
23194: PPUSH
23195: NOP4
23199: PUSH
23200: NOP4
23204: ARRAY
23205: PUSH
23206: NOP4
23210: UNION
23211: PPUSH
23212: NOP4
23216: ST_TO_ADDR
// end ;
23217: LD_VAR 0 3
23221: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
23222: LD_INT 0
23224: PPUSH
// if not mc_bases [ base ] then
23225: NOP4
23229: PUSH
23230: NOP4
23234: ARRAY
23235: NOT
23236: IFFALSE 23240
// exit ;
23238: GO 23265
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
23240: NOP4
23244: PUSH
23245: NOP4
23249: PPUSH
23250: NOP4
23254: PPUSH
23255: NOP4
23259: PPUSH
23260: NOP4
23264: ST_TO_ADDR
// end ;
23265: LD_VAR 0 3
23269: RET
// export function MC_InsertProduceList ( base , components ) ; begin
23270: LD_INT 0
23272: PPUSH
// if not mc_bases [ base ] then
23273: NOP4
23277: PUSH
23278: NOP4
23282: ARRAY
23283: NOT
23284: IFFALSE 23288
// exit ;
23286: GO 23325
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
23288: NOP4
23292: PUSH
23293: NOP4
23297: PPUSH
23298: NOP4
23302: PPUSH
23303: NOP4
23307: PUSH
23308: NOP4
23312: ARRAY
23313: PUSH
23314: NOP4
23318: ADD
23319: PPUSH
23320: NOP4
23324: ST_TO_ADDR
// end ;
23325: LD_VAR 0 3
23329: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
23330: LD_INT 0
23332: PPUSH
// if not mc_bases [ base ] then
23333: NOP4
23337: PUSH
23338: NOP4
23342: ARRAY
23343: NOT
23344: IFFALSE 23348
// exit ;
23346: GO 23402
// mc_defender := Replace ( mc_defender , base , deflist ) ;
23348: NOP4
23352: PUSH
23353: NOP4
23357: PPUSH
23358: NOP4
23362: PPUSH
23363: NOP4
23367: PPUSH
23368: NOP4
23372: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
23373: NOP4
23377: PUSH
23378: NOP4
23382: PPUSH
23383: NOP4
23387: PPUSH
23388: NOP4
23392: PUSH
23393: LD_INT 0
23395: PLUS
23396: PPUSH
23397: NOP4
23401: ST_TO_ADDR
// end ;
23402: LD_VAR 0 3
23406: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
23407: LD_INT 0
23409: PPUSH
// if not mc_bases [ base ] then
23410: NOP4
23414: PUSH
23415: NOP4
23419: ARRAY
23420: NOT
23421: IFFALSE 23425
// exit ;
23423: GO 23450
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
23425: NOP4
23429: PUSH
23430: NOP4
23434: PPUSH
23435: NOP4
23439: PPUSH
23440: NOP4
23444: PPUSH
23445: NOP4
23449: ST_TO_ADDR
// end ;
23450: LD_VAR 0 3
23454: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
23455: LD_INT 0
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
// if not mc_bases [ base ] then
23461: NOP4
23465: PUSH
23466: NOP4
23470: ARRAY
23471: NOT
23472: IFFALSE 23476
// exit ;
23474: GO 23541
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
23476: NOP4
23480: PUSH
23481: NOP4
23485: PPUSH
23486: NOP4
23490: PUSH
23491: NOP4
23495: PUSH
23496: NOP4
23500: ARRAY
23501: PUSH
23502: LD_INT 1
23504: PLUS
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PPUSH
23510: NOP4
23514: PUSH
23515: NOP4
23519: PUSH
23520: NOP4
23524: PUSH
23525: NOP4
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: PPUSH
23536: NOP4
23540: ST_TO_ADDR
// end ;
23541: LD_VAR 0 5
23545: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
23546: LD_INT 0
23548: PPUSH
// if not mc_bases [ base ] then
23549: NOP4
23553: PUSH
23554: NOP4
23558: ARRAY
23559: NOT
23560: IFFALSE 23564
// exit ;
23562: GO 23589
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
23564: NOP4
23568: PUSH
23569: NOP4
23573: PPUSH
23574: NOP4
23578: PPUSH
23579: NOP4
23583: PPUSH
23584: NOP4
23588: ST_TO_ADDR
// end ;
23589: LD_VAR 0 3
23593: RET
// export function MC_GetMinesField ( base ) ; begin
23594: LD_INT 0
23596: PPUSH
// result := mc_mines [ base ] ;
23597: NOP4
23601: PUSH
23602: NOP4
23606: PUSH
23607: NOP4
23611: ARRAY
23612: ST_TO_ADDR
// end ;
23613: LD_VAR 0 2
23617: RET
// export function MC_GetProduceList ( base ) ; begin
23618: LD_INT 0
23620: PPUSH
// result := mc_produce [ base ] ;
23621: NOP4
23625: PUSH
23626: NOP4
23630: PUSH
23631: NOP4
23635: ARRAY
23636: ST_TO_ADDR
// end ;
23637: LD_VAR 0 2
23641: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
23642: LD_INT 0
23644: PPUSH
23645: PPUSH
// if not mc_bases then
23646: NOP4
23650: NOT
23651: IFFALSE 23655
// exit ;
23653: GO 23720
// if mc_bases [ base ] then
23655: NOP4
23659: PUSH
23660: NOP4
23664: ARRAY
23665: IFFALSE 23720
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
23667: NOP4
23671: PUSH
23672: NOP4
23676: PUSH
23677: NOP4
23681: ARRAY
23682: PPUSH
23683: LD_INT 30
23685: PUSH
23686: NOP4
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PPUSH
23695: NOP4
23699: ST_TO_ADDR
// if result then
23700: NOP4
23704: IFFALSE 23720
// result := result [ 1 ] ;
23706: NOP4
23710: PUSH
23711: NOP4
23715: PUSH
23716: LD_INT 1
23718: ARRAY
23719: ST_TO_ADDR
// end ; end ;
23720: LD_VAR 0 3
23724: RET
// export function MC_SetTame ( base , area ) ; begin
23725: LD_INT 0
23727: PPUSH
// if not mc_bases or not base then
23728: NOP4
23732: NOT
23733: PUSH
23734: NOP4
23738: NOT
23739: OR
23740: IFFALSE 23744
// exit ;
23742: GO 23769
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
23744: NOP4
23748: PUSH
23749: NOP4
23753: PPUSH
23754: NOP4
23758: PPUSH
23759: NOP4
23763: PPUSH
23764: NOP4
23768: ST_TO_ADDR
// end ;
23769: LD_VAR 0 3
23773: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
23774: LD_INT 0
23776: PPUSH
23777: PPUSH
// if not mc_bases or not base then
23778: NOP4
23782: NOT
23783: PUSH
23784: NOP4
23788: NOT
23789: OR
23790: IFFALSE 23794
// exit ;
23792: GO 23896
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
23794: NOP4
23798: PUSH
23799: NOP4
23803: PUSH
23804: NOP4
23808: ARRAY
23809: PPUSH
23810: LD_INT 30
23812: PUSH
23813: NOP4
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PPUSH
23822: NOP4
23826: ST_TO_ADDR
// if not tmp then
23827: NOP4
23831: NOT
23832: IFFALSE 23836
// exit ;
23834: GO 23896
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
23836: NOP4
23840: PUSH
23841: NOP4
23845: PPUSH
23846: NOP4
23850: PPUSH
23851: NOP4
23855: PUSH
23856: NOP4
23860: ARRAY
23861: PPUSH
23862: NOP4
23866: PUSH
23867: NOP4
23871: ARRAY
23872: PUSH
23873: LD_INT 1
23875: PLUS
23876: PPUSH
23877: NOP4
23881: PUSH
23882: LD_INT 1
23884: ARRAY
23885: PPUSH
23886: NOP4
23890: PPUSH
23891: NOP4
23895: ST_TO_ADDR
// end ;
23896: LD_VAR 0 3
23900: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
23901: LD_INT 0
23903: PPUSH
23904: PPUSH
// if not mc_bases or not base or not kinds then
23905: NOP4
23909: NOT
23910: PUSH
23911: NOP4
23915: NOT
23916: OR
23917: PUSH
23918: NOP4
23922: NOT
23923: OR
23924: IFFALSE 23928
// exit ;
23926: GO 23989
// for i in kinds do
23928: NOP4
23932: PUSH
23933: NOP4
23937: PUSH
23938: FOR_IN
23939: IFFALSE 23987
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
23941: NOP4
23945: PUSH
23946: NOP4
23950: PPUSH
23951: NOP4
23955: PUSH
23956: NOP4
23960: PUSH
23961: NOP4
23965: ARRAY
23966: PUSH
23967: LD_INT 1
23969: PLUS
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PPUSH
23975: NOP4
23979: PPUSH
23980: NOP4
23984: ST_TO_ADDR
23985: GO 23938
23987: POP
23988: POP
// end ;
23989: LD_VAR 0 3
23993: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
23994: LD_INT 0
23996: PPUSH
// if not mc_bases or not base or not areas then
23997: NOP4
24001: NOT
24002: PUSH
24003: NOP4
24007: NOT
24008: OR
24009: PUSH
24010: NOP4
24014: NOT
24015: OR
24016: IFFALSE 24020
// exit ;
24018: GO 24045
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
24020: NOP4
24024: PUSH
24025: NOP4
24029: PPUSH
24030: NOP4
24034: PPUSH
24035: NOP4
24039: PPUSH
24040: NOP4
24044: ST_TO_ADDR
// end ;
24045: LD_VAR 0 3
24049: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
24050: LD_INT 0
24052: PPUSH
// if not mc_bases or not base or not teleports_exit then
24053: NOP4
24057: NOT
24058: PUSH
24059: NOP4
24063: NOT
24064: OR
24065: PUSH
24066: NOP4
24070: NOT
24071: OR
24072: IFFALSE 24076
// exit ;
24074: GO 24101
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
24076: NOP4
24080: PUSH
24081: NOP4
24085: PPUSH
24086: NOP4
24090: PPUSH
24091: NOP4
24095: PPUSH
24096: NOP4
24100: ST_TO_ADDR
// end ;
24101: LD_VAR 0 3
24105: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
24106: LD_INT 0
24108: PPUSH
24109: PPUSH
24110: PPUSH
// if not mc_bases or not base or not ext_list then
24111: NOP4
24115: NOT
24116: PUSH
24117: NOP4
24121: NOT
24122: OR
24123: PUSH
24124: NOP4
24128: NOT
24129: OR
24130: IFFALSE 24134
// exit ;
24132: GO 24307
// tmp := GetFacExtXYD ( x , y , d ) ;
24134: NOP4
24138: PUSH
24139: NOP4
24143: PPUSH
24144: NOP4
24148: PPUSH
24149: NOP4
24153: PPUSH
24154: NOP4
24158: ST_TO_ADDR
// if not tmp then
24159: NOP4
24163: NOT
24164: IFFALSE 24168
// exit ;
24166: GO 24307
// for i in tmp do
24168: NOP4
24172: PUSH
24173: NOP4
24177: PUSH
24178: FOR_IN
24179: IFFALSE 24305
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
24181: NOP4
24185: PUSH
24186: NOP4
24190: PPUSH
24191: NOP4
24195: PPUSH
24196: NOP4
24200: PUSH
24201: NOP4
24205: ARRAY
24206: PPUSH
24207: NOP4
24211: PUSH
24212: NOP4
24216: ARRAY
24217: PUSH
24218: LD_INT 1
24220: PLUS
24221: PPUSH
24222: NOP4
24226: PUSH
24227: LD_INT 1
24229: ARRAY
24230: PUSH
24231: NOP4
24235: PUSH
24236: LD_INT 1
24238: ARRAY
24239: PUSH
24240: NOP4
24244: PUSH
24245: LD_INT 2
24247: ARRAY
24248: PUSH
24249: NOP4
24253: PUSH
24254: LD_INT 3
24256: ARRAY
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: PPUSH
24264: NOP4
24268: PPUSH
24269: NOP4
24273: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
24274: NOP4
24278: PUSH
24279: NOP4
24283: PPUSH
24284: LD_INT 1
24286: PPUSH
24287: NOP4
24291: ST_TO_ADDR
// if not ext_list then
24292: NOP4
24296: NOT
24297: IFFALSE 24303
// exit ;
24299: POP
24300: POP
24301: GO 24307
// end ;
24303: GO 24178
24305: POP
24306: POP
// end ;
24307: LD_VAR 0 6
24311: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
24312: LD_INT 0
24314: PPUSH
// if not mc_bases or not base or not weapon_list then
24315: NOP4
24319: NOT
24320: PUSH
24321: NOP4
24325: NOT
24326: OR
24327: PUSH
24328: NOP4
24332: NOT
24333: OR
24334: IFFALSE 24338
// exit ;
24336: GO 24363
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
24338: NOP4
24342: PUSH
24343: NOP4
24347: PPUSH
24348: NOP4
24352: PPUSH
24353: NOP4
24357: PPUSH
24358: NOP4
24362: ST_TO_ADDR
// end ;
24363: LD_VAR 0 3
24367: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
24368: LD_INT 0
24370: PPUSH
// if not mc_bases or not base or not tech_list then
24371: NOP4
24375: NOT
24376: PUSH
24377: NOP4
24381: NOT
24382: OR
24383: PUSH
24384: NOP4
24388: NOT
24389: OR
24390: IFFALSE 24394
// exit ;
24392: GO 24419
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
24394: NOP4
24398: PUSH
24399: NOP4
24403: PPUSH
24404: NOP4
24408: PPUSH
24409: NOP4
24413: PPUSH
24414: NOP4
24418: ST_TO_ADDR
// end ;
24419: LD_VAR 0 3
24423: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
24424: LD_INT 0
24426: PPUSH
// if not mc_bases or not parking_area or not base then
24427: NOP4
24431: NOT
24432: PUSH
24433: NOP4
24437: NOT
24438: OR
24439: PUSH
24440: NOP4
24444: NOT
24445: OR
24446: IFFALSE 24450
// exit ;
24448: GO 24475
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
24450: NOP4
24454: PUSH
24455: NOP4
24459: PPUSH
24460: NOP4
24464: PPUSH
24465: NOP4
24469: PPUSH
24470: NOP4
24474: ST_TO_ADDR
// end ;
24475: LD_VAR 0 3
24479: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
24480: LD_INT 0
24482: PPUSH
// if not mc_bases or not base or not scan_area then
24483: NOP4
24487: NOT
24488: PUSH
24489: NOP4
24493: NOT
24494: OR
24495: PUSH
24496: NOP4
24500: NOT
24501: OR
24502: IFFALSE 24506
// exit ;
24504: GO 24531
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
24506: NOP4
24510: PUSH
24511: NOP4
24515: PPUSH
24516: NOP4
24520: PPUSH
24521: NOP4
24525: PPUSH
24526: NOP4
24530: ST_TO_ADDR
// end ;
24531: LD_VAR 0 3
24535: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
24536: LD_INT 0
24538: PPUSH
24539: PPUSH
// if not mc_bases or not base then
24540: NOP4
24544: NOT
24545: PUSH
24546: NOP4
24550: NOT
24551: OR
24552: IFFALSE 24556
// exit ;
24554: GO 24620
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
24556: NOP4
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 3
24569: PUSH
24570: LD_INT 4
24572: PUSH
24573: LD_INT 11
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
24583: NOP4
24587: PUSH
24588: NOP4
24592: PPUSH
24593: NOP4
24597: PPUSH
24598: NOP4
24602: PUSH
24603: NOP4
24607: ARRAY
24608: PUSH
24609: NOP4
24613: DIFF
24614: PPUSH
24615: NOP4
24619: ST_TO_ADDR
// end ;
24620: LD_VAR 0 2
24624: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
24625: LD_INT 0
24627: PPUSH
// result := mc_vehicles [ base ] ;
24628: NOP4
24632: PUSH
24633: NOP4
24637: PUSH
24638: NOP4
24642: ARRAY
24643: ST_TO_ADDR
// if onlyCombat then
24644: NOP4
24648: IFFALSE 24813
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
24650: NOP4
24654: PUSH
24655: NOP4
24659: PUSH
24660: NOP4
24664: PPUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 34
24670: PUSH
24671: LD_INT 12
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 34
24680: PUSH
24681: LD_INT 51
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 34
24690: PUSH
24691: NOP4
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 34
24702: PUSH
24703: LD_INT 32
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 34
24712: PUSH
24713: LD_INT 13
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 34
24722: PUSH
24723: LD_INT 52
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 34
24732: PUSH
24733: LD_INT 14
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 34
24742: PUSH
24743: LD_INT 53
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 34
24752: PUSH
24753: NOP4
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 34
24764: PUSH
24765: LD_INT 31
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 34
24774: PUSH
24775: LD_INT 48
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 34
24784: PUSH
24785: LD_INT 8
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: PPUSH
24807: NOP4
24811: DIFF
24812: ST_TO_ADDR
// end ; end_of_file
24813: LD_VAR 0 3
24817: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
24818: LD_INT 0
24820: PPUSH
24821: PPUSH
24822: PPUSH
// if not mc_bases or not skirmish then
24823: NOP4
24827: NOT
24828: PUSH
24829: NOP4
24833: NOT
24834: OR
24835: IFFALSE 24839
// exit ;
24837: GO 25004
// for i = 1 to mc_bases do
24839: NOP4
24843: PUSH
24844: DOUBLE
24845: LD_INT 1
24847: DEC
24848: ST_TO_ADDR
24849: NOP4
24853: PUSH
24854: FOR_TO
24855: IFFALSE 25002
// begin if sci in mc_bases [ i ] then
24857: NOP4
24861: PUSH
24862: NOP4
24866: PUSH
24867: NOP4
24871: ARRAY
24872: IN
24873: IFFALSE 25000
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
24875: NOP4
24879: PUSH
24880: NOP4
24884: PPUSH
24885: NOP4
24889: PUSH
24890: NOP4
24894: PUSH
24895: NOP4
24899: ARRAY
24900: PUSH
24901: LD_INT 1
24903: PLUS
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PPUSH
24909: NOP4
24913: PPUSH
24914: NOP4
24918: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
24919: NOP4
24923: PUSH
24924: NOP4
24928: PUSH
24929: NOP4
24933: ARRAY
24934: PPUSH
24935: LD_INT 2
24937: PUSH
24938: LD_INT 30
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 30
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: PPUSH
24963: NOP4
24967: PPUSH
24968: NOP4
24972: PPUSH
24973: NOP4
24977: ST_TO_ADDR
// if tmp then
24978: NOP4
24982: IFFALSE 24998
// ComStandNearbyBuilding ( ape , tmp ) ;
24984: NOP4
24988: PPUSH
24989: NOP4
24993: PPUSH
24994: NOP4
// break ;
24998: GO 25002
// end ; end ;
25000: GO 24854
25002: POP
25003: POP
// end ;
25004: LD_VAR 0 3
25008: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
25009: LD_INT 0
25011: PPUSH
25012: PPUSH
25013: PPUSH
// if not mc_bases or not skirmish then
25014: NOP4
25018: NOT
25019: PUSH
25020: NOP4
25024: NOT
25025: OR
25026: IFFALSE 25030
// exit ;
25028: GO 25119
// for i = 1 to mc_bases do
25030: NOP4
25034: PUSH
25035: DOUBLE
25036: LD_INT 1
25038: DEC
25039: ST_TO_ADDR
25040: NOP4
25044: PUSH
25045: FOR_TO
25046: IFFALSE 25117
// begin if building in mc_busy_turret_list [ i ] then
25048: NOP4
25052: PUSH
25053: NOP4
25057: PUSH
25058: NOP4
25062: ARRAY
25063: IN
25064: IFFALSE 25115
// begin tmp := mc_busy_turret_list [ i ] diff building ;
25066: NOP4
25070: PUSH
25071: NOP4
25075: PUSH
25076: NOP4
25080: ARRAY
25081: PUSH
25082: NOP4
25086: DIFF
25087: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
25088: NOP4
25092: PUSH
25093: NOP4
25097: PPUSH
25098: NOP4
25102: PPUSH
25103: NOP4
25107: PPUSH
25108: NOP4
25112: ST_TO_ADDR
// break ;
25113: GO 25117
// end ; end ;
25115: GO 25045
25117: POP
25118: POP
// end ;
25119: LD_VAR 0 3
25123: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
25128: PPUSH
// if not mc_bases or not skirmish then
25129: NOP4
25133: NOT
25134: PUSH
25135: NOP4
25139: NOT
25140: OR
25141: IFFALSE 25145
// exit ;
25143: GO 25344
// for i = 1 to mc_bases do
25145: NOP4
25149: PUSH
25150: DOUBLE
25151: LD_INT 1
25153: DEC
25154: ST_TO_ADDR
25155: NOP4
25159: PUSH
25160: FOR_TO
25161: IFFALSE 25342
// if building in mc_bases [ i ] then
25163: NOP4
25167: PUSH
25168: NOP4
25172: PUSH
25173: NOP4
25177: ARRAY
25178: IN
25179: IFFALSE 25340
// begin tmp := mc_bases [ i ] diff building ;
25181: NOP4
25185: PUSH
25186: NOP4
25190: PUSH
25191: NOP4
25195: ARRAY
25196: PUSH
25197: NOP4
25201: DIFF
25202: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
25203: NOP4
25207: PUSH
25208: NOP4
25212: PPUSH
25213: NOP4
25217: PPUSH
25218: NOP4
25222: PPUSH
25223: NOP4
25227: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
25228: NOP4
25232: PUSH
25233: NOP4
25237: PUSH
25238: NOP4
25242: ARRAY
25243: IN
25244: IFFALSE 25283
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
25246: NOP4
25250: PUSH
25251: NOP4
25255: PPUSH
25256: NOP4
25260: PPUSH
25261: NOP4
25265: PUSH
25266: NOP4
25270: ARRAY
25271: PUSH
25272: NOP4
25276: DIFF
25277: PPUSH
25278: NOP4
25282: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
25283: NOP4
25287: PUSH
25288: NOP4
25292: PUSH
25293: NOP4
25297: ARRAY
25298: IN
25299: IFFALSE 25338
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
25301: NOP4
25305: PUSH
25306: NOP4
25310: PPUSH
25311: NOP4
25315: PPUSH
25316: NOP4
25320: PUSH
25321: NOP4
25325: ARRAY
25326: PUSH
25327: NOP4
25331: DIFF
25332: PPUSH
25333: NOP4
25337: ST_TO_ADDR
// break ;
25338: GO 25342
// end ;
25340: GO 25160
25342: POP
25343: POP
// end ;
25344: LD_VAR 0 4
25348: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
25349: LD_INT 0
25351: PPUSH
25352: PPUSH
25353: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
25354: NOP4
25358: NOT
25359: PUSH
25360: NOP4
25364: NOT
25365: OR
25366: PUSH
25367: NOP4
25371: PUSH
25372: NOP4
25376: IN
25377: NOT
25378: OR
25379: IFFALSE 25383
// exit ;
25381: GO 25506
// for i = 1 to mc_vehicles do
25383: NOP4
25387: PUSH
25388: DOUBLE
25389: LD_INT 1
25391: DEC
25392: ST_TO_ADDR
25393: NOP4
25397: PUSH
25398: FOR_TO
25399: IFFALSE 25504
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
25401: NOP4
25405: PUSH
25406: NOP4
25410: PUSH
25411: NOP4
25415: ARRAY
25416: IN
25417: PUSH
25418: NOP4
25422: PUSH
25423: NOP4
25427: PUSH
25428: NOP4
25432: ARRAY
25433: IN
25434: OR
25435: IFFALSE 25502
// begin tmp := mc_vehicles [ i ] diff old ;
25437: NOP4
25441: PUSH
25442: NOP4
25446: PUSH
25447: NOP4
25451: ARRAY
25452: PUSH
25453: NOP4
25457: DIFF
25458: ST_TO_ADDR
// tmp := tmp diff new ;
25459: NOP4
25463: PUSH
25464: NOP4
25468: PUSH
25469: NOP4
25473: DIFF
25474: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
25475: NOP4
25479: PUSH
25480: NOP4
25484: PPUSH
25485: NOP4
25489: PPUSH
25490: NOP4
25494: PPUSH
25495: NOP4
25499: ST_TO_ADDR
// break ;
25500: GO 25504
// end ;
25502: GO 25398
25504: POP
25505: POP
// end ;
25506: LD_VAR 0 5
25510: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
25511: LD_INT 0
25513: PPUSH
25514: PPUSH
25515: PPUSH
25516: PPUSH
// if not mc_bases or not skirmish then
25517: NOP4
25521: NOT
25522: PUSH
25523: NOP4
25527: NOT
25528: OR
25529: IFFALSE 25533
// exit ;
25531: GO 25910
// side := GetSide ( vehicle ) ;
25533: NOP4
25537: PUSH
25538: NOP4
25542: PPUSH
25543: NOP4
25547: ST_TO_ADDR
// for i = 1 to mc_bases do
25548: NOP4
25552: PUSH
25553: DOUBLE
25554: LD_INT 1
25556: DEC
25557: ST_TO_ADDR
25558: NOP4
25562: PUSH
25563: FOR_TO
25564: IFFALSE 25908
// begin if factory in mc_bases [ i ] then
25566: NOP4
25570: PUSH
25571: NOP4
25575: PUSH
25576: NOP4
25580: ARRAY
25581: IN
25582: IFFALSE 25906
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
25584: NOP4
25588: PUSH
25589: NOP4
25593: ARRAY
25594: PUSH
25595: NOP4
25599: PUSH
25600: NOP4
25604: ARRAY
25605: LESS
25606: PUSH
25607: NOP4
25611: PPUSH
25612: NOP4
25616: PUSH
25617: LD_INT 31
25619: PUSH
25620: LD_INT 32
25622: PUSH
25623: LD_INT 51
25625: PUSH
25626: NOP4
25630: PUSH
25631: LD_INT 12
25633: PUSH
25634: LD_INT 30
25636: PUSH
25637: NOP4
25641: PUSH
25642: LD_INT 11
25644: PUSH
25645: LD_INT 53
25647: PUSH
25648: LD_INT 14
25650: PUSH
25651: NOP4
25655: PUSH
25656: LD_INT 29
25658: PUSH
25659: NOP4
25663: PUSH
25664: LD_INT 13
25666: PUSH
25667: LD_INT 52
25669: PUSH
25670: LD_INT 48
25672: PUSH
25673: LD_INT 8
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: IN
25695: NOT
25696: AND
25697: IFFALSE 25745
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
25699: NOP4
25703: PUSH
25704: NOP4
25708: PPUSH
25709: NOP4
25713: PUSH
25714: NOP4
25718: PUSH
25719: NOP4
25723: ARRAY
25724: PUSH
25725: LD_INT 1
25727: PLUS
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PPUSH
25733: NOP4
25737: PPUSH
25738: NOP4
25742: ST_TO_ADDR
25743: GO 25789
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
25745: NOP4
25749: PUSH
25750: NOP4
25754: PPUSH
25755: NOP4
25759: PUSH
25760: NOP4
25764: PUSH
25765: NOP4
25769: ARRAY
25770: PUSH
25771: LD_INT 1
25773: PLUS
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PPUSH
25779: NOP4
25783: PPUSH
25784: NOP4
25788: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
25789: NOP4
25793: PPUSH
25794: NOP4
25798: PUSH
25799: LD_INT 2
25801: EQUAL
25802: IFFALSE 25822
// begin repeat wait ( 0 0$1 ) ;
25804: LD_INT 35
25806: PPUSH
25807: NOP4
// until IsControledBy ( vehicle ) ;
25811: NOP4
25815: PPUSH
25816: NOP4
25820: IFFALSE 25804
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
25822: NOP4
25826: PPUSH
25827: NOP4
25831: PUSH
25832: NOP4
25836: ARRAY
25837: PPUSH
25838: NOP4
// if GetControl ( vehicle ) <> control_manual then
25842: NOP4
25846: PPUSH
25847: NOP4
25851: PUSH
25852: LD_INT 1
25854: NONEQUAL
25855: IFFALSE 25859
// break ;
25857: GO 25908
// repeat wait ( 0 0$1 ) ;
25859: LD_INT 35
25861: PPUSH
25862: NOP4
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
25866: NOP4
25870: PPUSH
25871: NOP4
25875: PUSH
25876: NOP4
25880: ARRAY
25881: PPUSH
25882: NOP4
25886: IFFALSE 25859
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
25888: NOP4
25892: PPUSH
25893: NOP4
25897: PPUSH
25898: NOP4
// exit ;
25902: POP
25903: POP
25904: GO 25910
// end ; end ;
25906: GO 25563
25908: POP
25909: POP
// end ;
25910: LD_VAR 0 3
25914: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
25915: LD_INT 0
25917: PPUSH
25918: PPUSH
25919: PPUSH
25920: PPUSH
// if not mc_bases or not skirmish then
25921: NOP4
25925: NOT
25926: PUSH
25927: NOP4
25931: NOT
25932: OR
25933: IFFALSE 25937
// exit ;
25935: GO 26290
// repeat wait ( 0 0$1 ) ;
25937: LD_INT 35
25939: PPUSH
25940: NOP4
// until GetResourceAmountXY ( x , y ) ;
25944: NOP4
25948: PPUSH
25949: NOP4
25953: PPUSH
25954: NOP4
25958: IFFALSE 25937
// if GetResourceTypeXY ( x , y ) = mat_artefact then
25960: NOP4
25964: PPUSH
25965: NOP4
25969: PPUSH
25970: NOP4
25974: PUSH
25975: LD_INT 4
25977: EQUAL
25978: IFFALSE 25982
// exit ;
25980: GO 26290
// for i = 1 to mc_bases do
25982: NOP4
25986: PUSH
25987: DOUBLE
25988: LD_INT 1
25990: DEC
25991: ST_TO_ADDR
25992: NOP4
25996: PUSH
25997: FOR_TO
25998: IFFALSE 26288
// begin if mc_crates_area [ i ] then
26000: NOP4
26004: PUSH
26005: NOP4
26009: ARRAY
26010: IFFALSE 26121
// for j in mc_crates_area [ i ] do
26012: NOP4
26016: PUSH
26017: NOP4
26021: PUSH
26022: NOP4
26026: ARRAY
26027: PUSH
26028: FOR_IN
26029: IFFALSE 26119
// if InArea ( x , y , j ) then
26031: NOP4
26035: PPUSH
26036: NOP4
26040: PPUSH
26041: NOP4
26045: PPUSH
26046: NOP4
26050: IFFALSE 26117
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
26052: NOP4
26056: PUSH
26057: NOP4
26061: PPUSH
26062: NOP4
26066: PUSH
26067: NOP4
26071: PUSH
26072: NOP4
26076: ARRAY
26077: PUSH
26078: LD_INT 1
26080: PLUS
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PPUSH
26086: NOP4
26090: PUSH
26091: NOP4
26095: PUSH
26096: NOP4
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: LIST
26105: PPUSH
26106: NOP4
26110: ST_TO_ADDR
// exit ;
26111: POP
26112: POP
26113: POP
26114: POP
26115: GO 26290
// end ;
26117: GO 26028
26119: POP
26120: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
26121: NOP4
26125: PUSH
26126: NOP4
26130: PUSH
26131: NOP4
26135: ARRAY
26136: PPUSH
26137: LD_INT 2
26139: PUSH
26140: LD_INT 30
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 30
26152: PUSH
26153: LD_INT 1
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: PPUSH
26165: NOP4
26169: ST_TO_ADDR
// if not depot then
26170: NOP4
26174: NOT
26175: IFFALSE 26179
// continue ;
26177: GO 25997
// for j in depot do
26179: NOP4
26183: PUSH
26184: NOP4
26188: PUSH
26189: FOR_IN
26190: IFFALSE 26284
// if GetDistUnitXY ( j , x , y ) < 30 then
26192: NOP4
26196: PPUSH
26197: NOP4
26201: PPUSH
26202: NOP4
26206: PPUSH
26207: NOP4
26211: PUSH
26212: LD_INT 30
26214: LESS
26215: IFFALSE 26282
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
26217: NOP4
26221: PUSH
26222: NOP4
26226: PPUSH
26227: NOP4
26231: PUSH
26232: NOP4
26236: PUSH
26237: NOP4
26241: ARRAY
26242: PUSH
26243: LD_INT 1
26245: PLUS
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PPUSH
26251: NOP4
26255: PUSH
26256: NOP4
26260: PUSH
26261: NOP4
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: PPUSH
26271: NOP4
26275: ST_TO_ADDR
// exit ;
26276: POP
26277: POP
26278: POP
26279: POP
26280: GO 26290
// end ;
26282: GO 26189
26284: POP
26285: POP
// end ;
26286: GO 25997
26288: POP
26289: POP
// end ;
26290: LD_VAR 0 6
26294: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
26295: LD_INT 0
26297: PPUSH
26298: PPUSH
26299: PPUSH
26300: PPUSH
// if not mc_bases or not skirmish then
26301: NOP4
26305: NOT
26306: PUSH
26307: NOP4
26311: NOT
26312: OR
26313: IFFALSE 26317
// exit ;
26315: GO 26594
// side := GetSide ( lab ) ;
26317: NOP4
26321: PUSH
26322: NOP4
26326: PPUSH
26327: NOP4
26331: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
26332: NOP4
26336: PUSH
26337: NOP4
26341: IN
26342: NOT
26343: PUSH
26344: NOP4
26348: NOT
26349: OR
26350: PUSH
26351: NOP4
26355: NOT
26356: OR
26357: IFFALSE 26361
// exit ;
26359: GO 26594
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
26361: NOP4
26365: PUSH
26366: NOP4
26370: PPUSH
26371: NOP4
26375: PPUSH
26376: NOP4
26380: PUSH
26381: NOP4
26385: ARRAY
26386: PUSH
26387: NOP4
26391: DIFF
26392: PPUSH
26393: NOP4
26397: ST_TO_ADDR
// for i = 1 to mc_bases do
26398: NOP4
26402: PUSH
26403: DOUBLE
26404: LD_INT 1
26406: DEC
26407: ST_TO_ADDR
26408: NOP4
26412: PUSH
26413: FOR_TO
26414: IFFALSE 26592
// begin if lab in mc_bases [ i ] then
26416: NOP4
26420: PUSH
26421: NOP4
26425: PUSH
26426: NOP4
26430: ARRAY
26431: IN
26432: IFFALSE 26590
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
26434: NOP4
26438: PUSH
26439: LD_INT 11
26441: PUSH
26442: LD_INT 4
26444: PUSH
26445: LD_INT 3
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: IN
26457: PUSH
26458: NOP4
26462: PUSH
26463: NOP4
26467: ARRAY
26468: AND
26469: IFFALSE 26590
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
26471: NOP4
26475: PUSH
26476: NOP4
26480: PUSH
26481: NOP4
26485: ARRAY
26486: PUSH
26487: LD_INT 1
26489: ARRAY
26490: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
26491: NOP4
26495: PUSH
26496: NOP4
26500: PPUSH
26501: NOP4
26505: PPUSH
26506: EMPTY
26507: PPUSH
26508: NOP4
26512: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
26513: NOP4
26517: PPUSH
26518: LD_INT 0
26520: PPUSH
26521: NOP4
// ComExitBuilding ( tmp ) ;
26525: NOP4
26529: PPUSH
26530: NOP4
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
26534: NOP4
26538: PUSH
26539: NOP4
26543: PPUSH
26544: NOP4
26548: PPUSH
26549: NOP4
26553: PUSH
26554: NOP4
26558: ARRAY
26559: PPUSH
26560: LD_INT 1
26562: PPUSH
26563: NOP4
26567: PPUSH
26568: NOP4
26572: PPUSH
26573: NOP4
26577: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
26578: NOP4
26582: PPUSH
26583: LD_INT 112
26585: PPUSH
26586: NOP4
// end ; end ; end ;
26590: GO 26413
26592: POP
26593: POP
// end ;
26594: LD_VAR 0 3
26598: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
26599: LD_INT 0
26601: PPUSH
26602: PPUSH
26603: PPUSH
26604: PPUSH
26605: PPUSH
26606: PPUSH
26607: PPUSH
26608: PPUSH
// if not mc_bases or not skirmish then
26609: NOP4
26613: NOT
26614: PUSH
26615: NOP4
26619: NOT
26620: OR
26621: IFFALSE 26625
// exit ;
26623: GO 27717
// for i = 1 to mc_bases do
26625: NOP4
26629: PUSH
26630: DOUBLE
26631: LD_INT 1
26633: DEC
26634: ST_TO_ADDR
26635: NOP4
26639: PUSH
26640: FOR_TO
26641: IFFALSE 27715
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
26643: NOP4
26647: PUSH
26648: NOP4
26652: PUSH
26653: NOP4
26657: ARRAY
26658: IN
26659: PUSH
26660: NOP4
26664: PUSH
26665: NOP4
26669: PUSH
26670: NOP4
26674: ARRAY
26675: IN
26676: OR
26677: PUSH
26678: NOP4
26682: PUSH
26683: NOP4
26687: PUSH
26688: NOP4
26692: ARRAY
26693: IN
26694: OR
26695: PUSH
26696: NOP4
26700: PUSH
26701: NOP4
26705: PUSH
26706: NOP4
26710: ARRAY
26711: IN
26712: OR
26713: PUSH
26714: NOP4
26718: PUSH
26719: NOP4
26723: PUSH
26724: NOP4
26728: ARRAY
26729: IN
26730: OR
26731: PUSH
26732: NOP4
26736: PUSH
26737: NOP4
26741: PUSH
26742: NOP4
26746: ARRAY
26747: IN
26748: OR
26749: IFFALSE 27713
// begin if un in mc_ape [ i ] then
26751: NOP4
26755: PUSH
26756: NOP4
26760: PUSH
26761: NOP4
26765: ARRAY
26766: IN
26767: IFFALSE 26806
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
26769: NOP4
26773: PUSH
26774: NOP4
26778: PPUSH
26779: NOP4
26783: PPUSH
26784: NOP4
26788: PUSH
26789: NOP4
26793: ARRAY
26794: PUSH
26795: NOP4
26799: DIFF
26800: PPUSH
26801: NOP4
26805: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
26806: NOP4
26810: PUSH
26811: NOP4
26815: PUSH
26816: NOP4
26820: ARRAY
26821: IN
26822: IFFALSE 26846
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
26824: NOP4
26828: PUSH
26829: NOP4
26833: PPUSH
26834: NOP4
26838: PPUSH
26839: EMPTY
26840: PPUSH
26841: NOP4
26845: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
26846: NOP4
26850: PPUSH
26851: NOP4
26855: PUSH
26856: LD_INT 2
26858: EQUAL
26859: PUSH
26860: NOP4
26864: PPUSH
26865: NOP4
26869: PUSH
26870: LD_INT 20
26872: EQUAL
26873: PUSH
26874: NOP4
26878: PUSH
26879: NOP4
26883: PUSH
26884: NOP4
26888: ARRAY
26889: IN
26890: OR
26891: AND
26892: IFFALSE 27053
// begin if un in mc_defender [ i ] then
26894: NOP4
26898: PUSH
26899: NOP4
26903: PUSH
26904: NOP4
26908: ARRAY
26909: IN
26910: IFFALSE 26949
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
26912: NOP4
26916: PUSH
26917: NOP4
26921: PPUSH
26922: NOP4
26926: PPUSH
26927: NOP4
26931: PUSH
26932: NOP4
26936: ARRAY
26937: PUSH
26938: NOP4
26942: DIFF
26943: PPUSH
26944: NOP4
26948: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
26949: NOP4
26953: PUSH
26954: NOP4
26958: PPUSH
26959: LD_INT 3
26961: PPUSH
26962: NOP4
26966: ST_TO_ADDR
// if fac then
26967: NOP4
26971: IFFALSE 27053
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
26973: NOP4
26977: PUSH
26978: NOP4
26982: PPUSH
26983: NOP4
26987: PPUSH
26988: NOP4
26992: PPUSH
26993: NOP4
26997: PPUSH
26998: NOP4
27002: PPUSH
27003: NOP4
27007: PPUSH
27008: NOP4
27012: PPUSH
27013: NOP4
27017: PPUSH
27018: NOP4
27022: PPUSH
27023: NOP4
27027: ST_TO_ADDR
// if components then
27028: NOP4
27032: IFFALSE 27051
// MC_InsertProduceList ( i , [ components ] ) ;
27034: NOP4
27038: PPUSH
27039: NOP4
27043: PUSH
27044: EMPTY
27045: LIST
27046: PPUSH
27047: NOP4
// break ;
27051: GO 27715
// end ; end ; if GetType ( un ) = unit_building then
27053: NOP4
27057: PPUSH
27058: NOP4
27062: PUSH
27063: LD_INT 3
27065: EQUAL
27066: IFFALSE 27381
// begin btype := GetBType ( un ) ;
27068: NOP4
27072: PUSH
27073: NOP4
27077: PPUSH
27078: NOP4
27082: ST_TO_ADDR
// if btype = b_warehouse then
27083: NOP4
27087: PUSH
27088: LD_INT 1
27090: EQUAL
27091: IFFALSE 27109
// begin btype := b_depot ;
27093: NOP4
27097: PUSH
27098: LD_INT 0
27100: ST_TO_ADDR
// pos := 1 ;
27101: NOP4
27105: PUSH
27106: LD_INT 1
27108: ST_TO_ADDR
// end ; if btype = b_factory then
27109: NOP4
27113: PUSH
27114: LD_INT 3
27116: EQUAL
27117: IFFALSE 27135
// begin btype := b_workshop ;
27119: NOP4
27123: PUSH
27124: LD_INT 2
27126: ST_TO_ADDR
// pos := 1 ;
27127: NOP4
27131: PUSH
27132: LD_INT 1
27134: ST_TO_ADDR
// end ; if btype = b_barracks then
27135: NOP4
27139: PUSH
27140: LD_INT 5
27142: EQUAL
27143: IFFALSE 27153
// btype := b_armoury ;
27145: NOP4
27149: PUSH
27150: LD_INT 4
27152: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
27153: NOP4
27157: PUSH
27158: LD_INT 7
27160: PUSH
27161: LD_INT 8
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: IN
27168: IFFALSE 27178
// btype := b_lab ;
27170: NOP4
27174: PUSH
27175: LD_INT 6
27177: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
27178: NOP4
27182: PUSH
27183: NOP4
27187: PPUSH
27188: NOP4
27192: PUSH
27193: NOP4
27197: PUSH
27198: NOP4
27202: ARRAY
27203: PUSH
27204: LD_INT 1
27206: PLUS
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PPUSH
27212: NOP4
27216: PUSH
27217: NOP4
27221: PPUSH
27222: NOP4
27226: PUSH
27227: NOP4
27231: PPUSH
27232: NOP4
27236: PUSH
27237: NOP4
27241: PPUSH
27242: NOP4
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: PPUSH
27253: NOP4
27257: ST_TO_ADDR
// if pos = 1 then
27258: NOP4
27262: PUSH
27263: LD_INT 1
27265: EQUAL
27266: IFFALSE 27381
// begin tmp := mc_build_list [ i ] ;
27268: NOP4
27272: PUSH
27273: NOP4
27277: PUSH
27278: NOP4
27282: ARRAY
27283: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
27284: NOP4
27288: PPUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 30
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 30
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: PPUSH
27317: NOP4
27321: IFFALSE 27331
// pos := 2 ;
27323: NOP4
27327: PUSH
27328: LD_INT 2
27330: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
27331: NOP4
27335: PUSH
27336: NOP4
27340: PPUSH
27341: NOP4
27345: PPUSH
27346: NOP4
27350: PPUSH
27351: NOP4
27355: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
27356: NOP4
27360: PUSH
27361: NOP4
27365: PPUSH
27366: NOP4
27370: PPUSH
27371: NOP4
27375: PPUSH
27376: NOP4
27380: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
27381: NOP4
27385: PUSH
27386: NOP4
27390: PUSH
27391: NOP4
27395: ARRAY
27396: IN
27397: IFFALSE 27436
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
27399: NOP4
27403: PUSH
27404: NOP4
27408: PPUSH
27409: NOP4
27413: PPUSH
27414: NOP4
27418: PUSH
27419: NOP4
27423: ARRAY
27424: PUSH
27425: NOP4
27429: DIFF
27430: PPUSH
27431: NOP4
27435: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
27436: NOP4
27440: PUSH
27441: NOP4
27445: PUSH
27446: NOP4
27450: ARRAY
27451: IN
27452: IFFALSE 27491
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
27454: NOP4
27458: PUSH
27459: NOP4
27463: PPUSH
27464: NOP4
27468: PPUSH
27469: NOP4
27473: PUSH
27474: NOP4
27478: ARRAY
27479: PUSH
27480: NOP4
27484: DIFF
27485: PPUSH
27486: NOP4
27490: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
27491: NOP4
27495: PUSH
27496: NOP4
27500: PUSH
27501: NOP4
27505: ARRAY
27506: IN
27507: IFFALSE 27546
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
27509: NOP4
27513: PUSH
27514: NOP4
27518: PPUSH
27519: NOP4
27523: PPUSH
27524: NOP4
27528: PUSH
27529: NOP4
27533: ARRAY
27534: PUSH
27535: NOP4
27539: DIFF
27540: PPUSH
27541: NOP4
27545: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
27546: NOP4
27550: PUSH
27551: NOP4
27555: PUSH
27556: NOP4
27560: ARRAY
27561: IN
27562: IFFALSE 27601
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
27564: NOP4
27568: PUSH
27569: NOP4
27573: PPUSH
27574: NOP4
27578: PPUSH
27579: NOP4
27583: PUSH
27584: NOP4
27588: ARRAY
27589: PUSH
27590: NOP4
27594: DIFF
27595: PPUSH
27596: NOP4
27600: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
27601: NOP4
27605: PUSH
27606: NOP4
27610: PUSH
27611: NOP4
27615: ARRAY
27616: IN
27617: IFFALSE 27656
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
27619: NOP4
27623: PUSH
27624: NOP4
27628: PPUSH
27629: NOP4
27633: PPUSH
27634: NOP4
27638: PUSH
27639: NOP4
27643: ARRAY
27644: PUSH
27645: NOP4
27649: DIFF
27650: PPUSH
27651: NOP4
27655: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
27656: NOP4
27660: PUSH
27661: NOP4
27665: PUSH
27666: NOP4
27670: ARRAY
27671: IN
27672: IFFALSE 27711
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
27674: NOP4
27678: PUSH
27679: NOP4
27683: PPUSH
27684: NOP4
27688: PPUSH
27689: NOP4
27693: PUSH
27694: NOP4
27698: ARRAY
27699: PUSH
27700: NOP4
27704: DIFF
27705: PPUSH
27706: NOP4
27710: ST_TO_ADDR
// end ; break ;
27711: GO 27715
// end ;
27713: GO 26640
27715: POP
27716: POP
// end ;
27717: LD_VAR 0 2
27721: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
27722: LD_INT 0
27724: PPUSH
27725: PPUSH
27726: PPUSH
// if not mc_bases or not skirmish then
27727: NOP4
27731: NOT
27732: PUSH
27733: NOP4
27737: NOT
27738: OR
27739: IFFALSE 27743
// exit ;
27741: GO 27958
// for i = 1 to mc_bases do
27743: NOP4
27747: PUSH
27748: DOUBLE
27749: LD_INT 1
27751: DEC
27752: ST_TO_ADDR
27753: NOP4
27757: PUSH
27758: FOR_TO
27759: IFFALSE 27956
// begin if building in mc_construct_list [ i ] then
27761: NOP4
27765: PUSH
27766: NOP4
27770: PUSH
27771: NOP4
27775: ARRAY
27776: IN
27777: IFFALSE 27954
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
27779: NOP4
27783: PUSH
27784: NOP4
27788: PPUSH
27789: NOP4
27793: PPUSH
27794: NOP4
27798: PUSH
27799: NOP4
27803: ARRAY
27804: PUSH
27805: NOP4
27809: DIFF
27810: PPUSH
27811: NOP4
27815: ST_TO_ADDR
// if building in mc_lab [ i ] then
27816: NOP4
27820: PUSH
27821: NOP4
27825: PUSH
27826: NOP4
27830: ARRAY
27831: IN
27832: IFFALSE 27887
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
27834: NOP4
27838: PUSH
27839: NOP4
27843: PPUSH
27844: NOP4
27848: PPUSH
27849: NOP4
27853: PUSH
27854: NOP4
27858: ARRAY
27859: PPUSH
27860: LD_INT 1
27862: PPUSH
27863: NOP4
27867: PUSH
27868: NOP4
27872: ARRAY
27873: PPUSH
27874: LD_INT 0
27876: PPUSH
27877: NOP4
27881: PPUSH
27882: NOP4
27886: ST_TO_ADDR
// if not building in mc_bases [ i ] then
27887: NOP4
27891: PUSH
27892: NOP4
27896: PUSH
27897: NOP4
27901: ARRAY
27902: IN
27903: NOT
27904: IFFALSE 27950
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
27906: NOP4
27910: PUSH
27911: NOP4
27915: PPUSH
27916: NOP4
27920: PUSH
27921: NOP4
27925: PUSH
27926: NOP4
27930: ARRAY
27931: PUSH
27932: LD_INT 1
27934: PLUS
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PPUSH
27940: NOP4
27944: PPUSH
27945: NOP4
27949: ST_TO_ADDR
// exit ;
27950: POP
27951: POP
27952: GO 27958
// end ; end ;
27954: GO 27758
27956: POP
27957: POP
// end ;
27958: LD_VAR 0 2
27962: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
// if not mc_bases or not skirmish then
27972: NOP4
27976: NOT
27977: PUSH
27978: NOP4
27982: NOT
27983: OR
27984: IFFALSE 27988
// exit ;
27986: GO 28649
// for i = 1 to mc_bases do
27988: NOP4
27992: PUSH
27993: DOUBLE
27994: LD_INT 1
27996: DEC
27997: ST_TO_ADDR
27998: NOP4
28002: PUSH
28003: FOR_TO
28004: IFFALSE 28647
// begin if building in mc_construct_list [ i ] then
28006: NOP4
28010: PUSH
28011: NOP4
28015: PUSH
28016: NOP4
28020: ARRAY
28021: IN
28022: IFFALSE 28645
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
28024: NOP4
28028: PUSH
28029: NOP4
28033: PPUSH
28034: NOP4
28038: PPUSH
28039: NOP4
28043: PUSH
28044: NOP4
28048: ARRAY
28049: PUSH
28050: NOP4
28054: DIFF
28055: PPUSH
28056: NOP4
28060: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
28061: NOP4
28065: PUSH
28066: NOP4
28070: PPUSH
28071: NOP4
28075: PUSH
28076: NOP4
28080: PUSH
28081: NOP4
28085: ARRAY
28086: PUSH
28087: LD_INT 1
28089: PLUS
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PPUSH
28095: NOP4
28099: PPUSH
28100: NOP4
28104: ST_TO_ADDR
// btype := GetBType ( building ) ;
28105: NOP4
28109: PUSH
28110: NOP4
28114: PPUSH
28115: NOP4
28119: ST_TO_ADDR
// side := GetSide ( building ) ;
28120: NOP4
28124: PUSH
28125: NOP4
28129: PPUSH
28130: NOP4
28134: ST_TO_ADDR
// if btype = b_lab then
28135: NOP4
28139: PUSH
28140: LD_INT 6
28142: EQUAL
28143: IFFALSE 28193
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
28145: NOP4
28149: PUSH
28150: NOP4
28154: PPUSH
28155: NOP4
28159: PUSH
28160: NOP4
28164: PUSH
28165: NOP4
28169: ARRAY
28170: PUSH
28171: LD_INT 1
28173: PLUS
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PPUSH
28179: NOP4
28183: PPUSH
28184: NOP4
28188: ST_TO_ADDR
// exit ;
28189: POP
28190: POP
28191: GO 28649
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
28193: NOP4
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: LD_INT 4
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: IN
28212: IFFALSE 28336
// begin if btype = b_armoury then
28214: NOP4
28218: PUSH
28219: LD_INT 4
28221: EQUAL
28222: IFFALSE 28232
// btype := b_barracks ;
28224: NOP4
28228: PUSH
28229: LD_INT 5
28231: ST_TO_ADDR
// if btype = b_depot then
28232: NOP4
28236: PUSH
28237: LD_INT 0
28239: EQUAL
28240: IFFALSE 28250
// btype := b_warehouse ;
28242: NOP4
28246: PUSH
28247: LD_INT 1
28249: ST_TO_ADDR
// if btype = b_workshop then
28250: NOP4
28254: PUSH
28255: LD_INT 2
28257: EQUAL
28258: IFFALSE 28268
// btype := b_factory ;
28260: NOP4
28264: PUSH
28265: LD_INT 3
28267: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
28268: NOP4
28272: PPUSH
28273: NOP4
28277: PPUSH
28278: NOP4
28282: PUSH
28283: LD_INT 1
28285: EQUAL
28286: IFFALSE 28332
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
28288: NOP4
28292: PUSH
28293: NOP4
28297: PPUSH
28298: NOP4
28302: PUSH
28303: NOP4
28307: PUSH
28308: NOP4
28312: ARRAY
28313: PUSH
28314: LD_INT 1
28316: PLUS
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PPUSH
28322: NOP4
28326: PPUSH
28327: NOP4
28331: ST_TO_ADDR
// exit ;
28332: POP
28333: POP
28334: GO 28649
// end ; if btype in [ b_bunker , b_turret ] then
28336: NOP4
28340: PUSH
28341: LD_INT 32
28343: PUSH
28344: LD_INT 33
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: IN
28351: IFFALSE 28641
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
28353: NOP4
28357: PUSH
28358: NOP4
28362: PPUSH
28363: NOP4
28367: PUSH
28368: NOP4
28372: PUSH
28373: NOP4
28377: ARRAY
28378: PUSH
28379: LD_INT 1
28381: PLUS
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PPUSH
28387: NOP4
28391: PPUSH
28392: NOP4
28396: ST_TO_ADDR
// if btype = b_bunker then
28397: NOP4
28401: PUSH
28402: LD_INT 32
28404: EQUAL
28405: IFFALSE 28641
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
28407: NOP4
28411: PUSH
28412: NOP4
28416: PPUSH
28417: NOP4
28421: PUSH
28422: NOP4
28426: PUSH
28427: NOP4
28431: ARRAY
28432: PUSH
28433: LD_INT 1
28435: PLUS
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PPUSH
28441: NOP4
28445: PPUSH
28446: NOP4
28450: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
28451: NOP4
28455: PUSH
28456: NOP4
28460: PUSH
28461: NOP4
28465: ARRAY
28466: PPUSH
28467: LD_INT 25
28469: PUSH
28470: LD_INT 1
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 3
28479: PUSH
28480: LD_INT 54
28482: PUSH
28483: EMPTY
28484: LIST
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PPUSH
28494: NOP4
28498: ST_TO_ADDR
// if tmp then
28499: NOP4
28503: IFFALSE 28509
// exit ;
28505: POP
28506: POP
28507: GO 28649
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
28509: NOP4
28513: PUSH
28514: NOP4
28518: PUSH
28519: NOP4
28523: ARRAY
28524: PPUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 30
28530: PUSH
28531: LD_INT 4
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 30
28540: PUSH
28541: LD_INT 5
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: LIST
28552: PPUSH
28553: NOP4
28557: ST_TO_ADDR
// if not tmp then
28558: NOP4
28562: NOT
28563: IFFALSE 28569
// exit ;
28565: POP
28566: POP
28567: GO 28649
// for j in tmp do
28569: NOP4
28573: PUSH
28574: NOP4
28578: PUSH
28579: FOR_IN
28580: IFFALSE 28639
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
28582: NOP4
28586: PUSH
28587: NOP4
28591: PPUSH
28592: NOP4
28596: PPUSH
28597: LD_INT 25
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PPUSH
28607: NOP4
28611: ST_TO_ADDR
// if units then
28612: NOP4
28616: IFFALSE 28637
// begin ComExitBuilding ( units [ 1 ] ) ;
28618: NOP4
28622: PUSH
28623: LD_INT 1
28625: ARRAY
28626: PPUSH
28627: NOP4
// exit ;
28631: POP
28632: POP
28633: POP
28634: POP
28635: GO 28649
// end ; end ;
28637: GO 28579
28639: POP
28640: POP
// end ; end ; exit ;
28641: POP
28642: POP
28643: GO 28649
// end ; end ;
28645: GO 28003
28647: POP
28648: POP
// end ;
28649: LD_VAR 0 2
28653: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
28654: LD_INT 0
28656: PPUSH
28657: PPUSH
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
// if not mc_bases or not skirmish then
28663: NOP4
28667: NOT
28668: PUSH
28669: NOP4
28673: NOT
28674: OR
28675: IFFALSE 28679
// exit ;
28677: GO 28910
// btype := GetBType ( building ) ;
28679: NOP4
28683: PUSH
28684: NOP4
28688: PPUSH
28689: NOP4
28693: ST_TO_ADDR
// x := GetX ( building ) ;
28694: NOP4
28698: PUSH
28699: NOP4
28703: PPUSH
28704: NOP4
28708: ST_TO_ADDR
// y := GetY ( building ) ;
28709: NOP4
28713: PUSH
28714: NOP4
28718: PPUSH
28719: NOP4
28723: ST_TO_ADDR
// d := GetDir ( building ) ;
28724: NOP4
28728: PUSH
28729: NOP4
28733: PPUSH
28734: NOP4
28738: ST_TO_ADDR
// for i = 1 to mc_bases do
28739: NOP4
28743: PUSH
28744: DOUBLE
28745: LD_INT 1
28747: DEC
28748: ST_TO_ADDR
28749: NOP4
28753: PUSH
28754: FOR_TO
28755: IFFALSE 28908
// begin if not mc_build_list [ i ] then
28757: NOP4
28761: PUSH
28762: NOP4
28766: ARRAY
28767: NOT
28768: IFFALSE 28772
// continue ;
28770: GO 28754
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
28772: NOP4
28776: PUSH
28777: NOP4
28781: PUSH
28782: NOP4
28786: PUSH
28787: NOP4
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: PPUSH
28798: NOP4
28802: PUSH
28803: NOP4
28807: ARRAY
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: PPUSH
28813: NOP4
28817: IFFALSE 28906
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
28819: NOP4
28823: PUSH
28824: NOP4
28828: PPUSH
28829: NOP4
28833: PPUSH
28834: NOP4
28838: PUSH
28839: NOP4
28843: ARRAY
28844: PPUSH
28845: LD_INT 1
28847: PPUSH
28848: NOP4
28852: PPUSH
28853: NOP4
28857: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
28858: NOP4
28862: PUSH
28863: NOP4
28867: PPUSH
28868: NOP4
28872: PUSH
28873: NOP4
28877: PUSH
28878: NOP4
28882: ARRAY
28883: PUSH
28884: LD_INT 1
28886: PLUS
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PPUSH
28892: NOP4
28896: PPUSH
28897: NOP4
28901: ST_TO_ADDR
// exit ;
28902: POP
28903: POP
28904: GO 28910
// end ; end ;
28906: GO 28754
28908: POP
28909: POP
// end ;
28910: LD_VAR 0 3
28914: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
28915: LD_INT 0
28917: PPUSH
28918: PPUSH
28919: PPUSH
// if not mc_bases or not skirmish then
28920: NOP4
28924: NOT
28925: PUSH
28926: NOP4
28930: NOT
28931: OR
28932: IFFALSE 28936
// exit ;
28934: GO 29126
// for i = 1 to mc_bases do
28936: NOP4
28940: PUSH
28941: DOUBLE
28942: LD_INT 1
28944: DEC
28945: ST_TO_ADDR
28946: NOP4
28950: PUSH
28951: FOR_TO
28952: IFFALSE 29039
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
28954: NOP4
28958: PUSH
28959: NOP4
28963: PUSH
28964: NOP4
28968: ARRAY
28969: IN
28970: PUSH
28971: NOP4
28975: PUSH
28976: NOP4
28980: PUSH
28981: NOP4
28985: ARRAY
28986: IN
28987: NOT
28988: AND
28989: IFFALSE 29037
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
28991: NOP4
28995: PUSH
28996: NOP4
29000: PPUSH
29001: NOP4
29005: PUSH
29006: NOP4
29010: PUSH
29011: NOP4
29015: ARRAY
29016: PUSH
29017: LD_INT 1
29019: PLUS
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PPUSH
29025: NOP4
29029: PPUSH
29030: NOP4
29034: ST_TO_ADDR
// break ;
29035: GO 29039
// end ; end ;
29037: GO 28951
29039: POP
29040: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
29041: NOP4
29045: PPUSH
29046: NOP4
29050: PUSH
29051: NOP4
29055: IN
29056: PUSH
29057: NOP4
29061: PPUSH
29062: NOP4
29066: PUSH
29067: LD_INT 5
29069: EQUAL
29070: AND
29071: PUSH
29072: NOP4
29076: PPUSH
29077: NOP4
29081: PUSH
29082: LD_INT 18
29084: NONEQUAL
29085: AND
29086: IFFALSE 29126
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
29088: NOP4
29092: PPUSH
29093: NOP4
29097: PUSH
29098: LD_INT 5
29100: PUSH
29101: LD_INT 8
29103: PUSH
29104: LD_INT 9
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: IN
29112: IFFALSE 29126
// SetClass ( unit , 1 ) ;
29114: NOP4
29118: PPUSH
29119: LD_INT 1
29121: PPUSH
29122: NOP4
// end ;
29126: LD_VAR 0 3
29130: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
29131: LD_INT 0
29133: PPUSH
29134: PPUSH
// if not mc_bases or not skirmish then
29135: NOP4
29139: NOT
29140: PUSH
29141: NOP4
29145: NOT
29146: OR
29147: IFFALSE 29151
// exit ;
29149: GO 29267
// if GetLives ( abandoned_vehicle ) > 250 then
29151: NOP4
29155: PPUSH
29156: NOP4
29160: PUSH
29161: LD_INT 250
29163: GREATER
29164: IFFALSE 29168
// exit ;
29166: GO 29267
// for i = 1 to mc_bases do
29168: NOP4
29172: PUSH
29173: DOUBLE
29174: LD_INT 1
29176: DEC
29177: ST_TO_ADDR
29178: NOP4
29182: PUSH
29183: FOR_TO
29184: IFFALSE 29265
// begin if driver in mc_bases [ i ] then
29186: NOP4
29190: PUSH
29191: NOP4
29195: PUSH
29196: NOP4
29200: ARRAY
29201: IN
29202: IFFALSE 29263
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
29204: NOP4
29208: PPUSH
29209: NOP4
29213: PUSH
29214: NOP4
29218: ARRAY
29219: PPUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 30
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: PPUSH
29248: NOP4
29252: PUSH
29253: LD_INT 1
29255: ARRAY
29256: PPUSH
29257: NOP4
// break ;
29261: GO 29265
// end ; end ;
29263: GO 29183
29265: POP
29266: POP
// end ; end_of_file
29267: LD_VAR 0 5
29271: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29272: LD_INT 0
29274: PPUSH
29275: PPUSH
// if exist_mode then
29276: NOP4
29280: IFFALSE 29305
// unit := CreateCharacter ( prefix & ident ) else
29282: NOP4
29286: PUSH
29287: NOP4
29291: PUSH
29292: NOP4
29296: STR
29297: PPUSH
29298: NOP4
29302: ST_TO_ADDR
29303: GO 29320
// unit := NewCharacter ( ident ) ;
29305: NOP4
29309: PUSH
29310: NOP4
29314: PPUSH
29315: NOP4
29319: ST_TO_ADDR
// result := unit ;
29320: NOP4
29324: PUSH
29325: NOP4
29329: ST_TO_ADDR
// end ;
29330: LD_VAR 0 4
29334: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29335: LD_INT 0
29337: PPUSH
29338: PPUSH
// if not side or not nation then
29339: NOP4
29343: NOT
29344: PUSH
29345: NOP4
29349: NOT
29350: OR
29351: IFFALSE 29355
// exit ;
29353: GO 29999
// case nation of nation_american :
29355: NOP4
29359: PUSH
29360: LD_INT 1
29362: DOUBLE
29363: EQUAL
29364: IFTRUE 29368
29366: GO 29542
29368: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
29369: NOP4
29373: PUSH
29374: LD_INT 35
29376: PUSH
29377: LD_INT 45
29379: PUSH
29380: LD_INT 46
29382: PUSH
29383: LD_INT 47
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: LD_INT 6
29394: PUSH
29395: LD_INT 15
29397: PUSH
29398: LD_INT 16
29400: PUSH
29401: LD_INT 7
29403: PUSH
29404: LD_INT 12
29406: PUSH
29407: LD_INT 13
29409: PUSH
29410: LD_INT 10
29412: PUSH
29413: LD_INT 14
29415: PUSH
29416: LD_INT 20
29418: PUSH
29419: LD_INT 21
29421: PUSH
29422: LD_INT 22
29424: PUSH
29425: LD_INT 25
29427: PUSH
29428: LD_INT 32
29430: PUSH
29431: LD_INT 27
29433: PUSH
29434: LD_INT 36
29436: PUSH
29437: LD_INT 69
29439: PUSH
29440: LD_INT 39
29442: PUSH
29443: LD_INT 34
29445: PUSH
29446: LD_INT 40
29448: PUSH
29449: LD_INT 48
29451: PUSH
29452: LD_INT 49
29454: PUSH
29455: LD_INT 50
29457: PUSH
29458: LD_INT 51
29460: PUSH
29461: LD_INT 52
29463: PUSH
29464: LD_INT 53
29466: PUSH
29467: LD_INT 54
29469: PUSH
29470: LD_INT 55
29472: PUSH
29473: LD_INT 56
29475: PUSH
29476: LD_INT 57
29478: PUSH
29479: LD_INT 58
29481: PUSH
29482: LD_INT 59
29484: PUSH
29485: LD_INT 60
29487: PUSH
29488: LD_INT 61
29490: PUSH
29491: LD_INT 62
29493: PUSH
29494: LD_INT 80
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: ST_TO_ADDR
29540: GO 29923
29542: LD_INT 2
29544: DOUBLE
29545: EQUAL
29546: IFTRUE 29550
29548: GO 29732
29550: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
29551: NOP4
29555: PUSH
29556: LD_INT 35
29558: PUSH
29559: LD_INT 45
29561: PUSH
29562: LD_INT 46
29564: PUSH
29565: LD_INT 47
29567: PUSH
29568: LD_INT 70
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: LD_INT 11
29576: PUSH
29577: LD_INT 3
29579: PUSH
29580: LD_INT 4
29582: PUSH
29583: LD_INT 5
29585: PUSH
29586: LD_INT 6
29588: PUSH
29589: LD_INT 15
29591: PUSH
29592: LD_INT 18
29594: PUSH
29595: LD_INT 7
29597: PUSH
29598: LD_INT 17
29600: PUSH
29601: LD_INT 8
29603: PUSH
29604: LD_INT 20
29606: PUSH
29607: LD_INT 21
29609: PUSH
29610: LD_INT 22
29612: PUSH
29613: LD_INT 72
29615: PUSH
29616: LD_INT 26
29618: PUSH
29619: LD_INT 69
29621: PUSH
29622: LD_INT 39
29624: PUSH
29625: LD_INT 40
29627: PUSH
29628: LD_INT 41
29630: PUSH
29631: LD_INT 42
29633: PUSH
29634: LD_INT 43
29636: PUSH
29637: LD_INT 48
29639: PUSH
29640: LD_INT 49
29642: PUSH
29643: LD_INT 50
29645: PUSH
29646: LD_INT 51
29648: PUSH
29649: LD_INT 52
29651: PUSH
29652: LD_INT 53
29654: PUSH
29655: LD_INT 54
29657: PUSH
29658: LD_INT 55
29660: PUSH
29661: LD_INT 56
29663: PUSH
29664: LD_INT 60
29666: PUSH
29667: LD_INT 61
29669: PUSH
29670: LD_INT 62
29672: PUSH
29673: LD_INT 66
29675: PUSH
29676: LD_INT 67
29678: PUSH
29679: LD_INT 68
29681: PUSH
29682: LD_INT 81
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
29730: GO 29923
29732: LD_INT 3
29734: DOUBLE
29735: EQUAL
29736: IFTRUE 29740
29738: GO 29922
29740: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
29741: NOP4
29745: PUSH
29746: LD_INT 46
29748: PUSH
29749: LD_INT 47
29751: PUSH
29752: LD_INT 1
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 11
29760: PUSH
29761: LD_INT 9
29763: PUSH
29764: LD_INT 20
29766: PUSH
29767: LD_INT 19
29769: PUSH
29770: LD_INT 21
29772: PUSH
29773: LD_INT 24
29775: PUSH
29776: LD_INT 22
29778: PUSH
29779: LD_INT 25
29781: PUSH
29782: LD_INT 28
29784: PUSH
29785: LD_INT 29
29787: PUSH
29788: LD_INT 30
29790: PUSH
29791: LD_INT 31
29793: PUSH
29794: LD_INT 37
29796: PUSH
29797: LD_INT 38
29799: PUSH
29800: LD_INT 32
29802: PUSH
29803: LD_INT 27
29805: PUSH
29806: LD_INT 33
29808: PUSH
29809: LD_INT 69
29811: PUSH
29812: LD_INT 39
29814: PUSH
29815: LD_INT 34
29817: PUSH
29818: LD_INT 40
29820: PUSH
29821: LD_INT 71
29823: PUSH
29824: LD_INT 23
29826: PUSH
29827: LD_INT 44
29829: PUSH
29830: LD_INT 48
29832: PUSH
29833: LD_INT 49
29835: PUSH
29836: LD_INT 50
29838: PUSH
29839: LD_INT 51
29841: PUSH
29842: LD_INT 52
29844: PUSH
29845: LD_INT 53
29847: PUSH
29848: LD_INT 54
29850: PUSH
29851: LD_INT 55
29853: PUSH
29854: LD_INT 56
29856: PUSH
29857: LD_INT 57
29859: PUSH
29860: LD_INT 58
29862: PUSH
29863: LD_INT 59
29865: PUSH
29866: LD_INT 63
29868: PUSH
29869: LD_INT 64
29871: PUSH
29872: LD_INT 65
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: ST_TO_ADDR
29920: GO 29923
29922: POP
// if state > - 1 and state < 3 then
29923: NOP4
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: GREATER
29932: PUSH
29933: NOP4
29937: PUSH
29938: LD_INT 3
29940: LESS
29941: AND
29942: IFFALSE 29999
// for i in result do
29944: NOP4
29948: PUSH
29949: NOP4
29953: PUSH
29954: FOR_IN
29955: IFFALSE 29997
// if GetTech ( i , side ) <> state then
29957: NOP4
29961: PPUSH
29962: NOP4
29966: PPUSH
29967: NOP4
29971: PUSH
29972: NOP4
29976: NONEQUAL
29977: IFFALSE 29995
// result := result diff i ;
29979: NOP4
29983: PUSH
29984: NOP4
29988: PUSH
29989: NOP4
29993: DIFF
29994: ST_TO_ADDR
29995: GO 29954
29997: POP
29998: POP
// end ;
29999: LD_VAR 0 4
30003: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30004: LD_INT 0
30006: PPUSH
30007: PPUSH
30008: PPUSH
// result := true ;
30009: NOP4
30013: PUSH
30014: LD_INT 1
30016: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30017: NOP4
30021: PUSH
30022: NOP4
30026: PPUSH
30027: NOP4
30031: ST_TO_ADDR
// if not tmp then
30032: NOP4
30036: NOT
30037: IFFALSE 30041
// exit ;
30039: GO 30090
// for i in tmp do
30041: NOP4
30045: PUSH
30046: NOP4
30050: PUSH
30051: FOR_IN
30052: IFFALSE 30088
// if GetTech ( i , side ) <> state_researched then
30054: NOP4
30058: PPUSH
30059: NOP4
30063: PPUSH
30064: NOP4
30068: PUSH
30069: LD_INT 2
30071: NONEQUAL
30072: IFFALSE 30086
// begin result := false ;
30074: NOP4
30078: PUSH
30079: LD_INT 0
30081: ST_TO_ADDR
// exit ;
30082: POP
30083: POP
30084: GO 30090
// end ;
30086: GO 30051
30088: POP
30089: POP
// end ;
30090: LD_VAR 0 3
30094: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30095: LD_INT 0
30097: PPUSH
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
30102: PPUSH
30103: PPUSH
30104: PPUSH
30105: PPUSH
30106: PPUSH
30107: PPUSH
30108: PPUSH
30109: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30110: NOP4
30114: NOT
30115: PUSH
30116: NOP4
30120: PPUSH
30121: NOP4
30125: PUSH
30126: LD_INT 9
30128: NONEQUAL
30129: OR
30130: IFFALSE 30134
// exit ;
30132: GO 30707
// side := GetSide ( unit ) ;
30134: NOP4
30138: PUSH
30139: NOP4
30143: PPUSH
30144: NOP4
30148: ST_TO_ADDR
// tech_space := tech_spacanom ;
30149: NOP4
30153: PUSH
30154: LD_INT 29
30156: ST_TO_ADDR
// tech_time := tech_taurad ;
30157: NOP4
30161: PUSH
30162: LD_INT 28
30164: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30165: NOP4
30169: PUSH
30170: NOP4
30174: PPUSH
30175: NOP4
30179: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30180: NOP4
30184: PPUSH
30185: NOP4
30189: PUSH
30190: LD_INT 2
30192: EQUAL
30193: IFFALSE 30197
// exit ;
30195: GO 30707
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30197: NOP4
30201: PUSH
30202: LD_INT 81
30204: PUSH
30205: NOP4
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 3
30216: PUSH
30217: LD_INT 21
30219: PUSH
30220: LD_INT 3
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PPUSH
30235: NOP4
30239: ST_TO_ADDR
// if not tmp then
30240: NOP4
30244: NOT
30245: IFFALSE 30249
// exit ;
30247: GO 30707
// if in_unit then
30249: NOP4
30253: IFFALSE 30277
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30255: NOP4
30259: PUSH
30260: NOP4
30264: PPUSH
30265: NOP4
30269: PPUSH
30270: NOP4
30274: ST_TO_ADDR
30275: GO 30297
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30277: NOP4
30281: PUSH
30282: NOP4
30286: PPUSH
30287: NOP4
30291: PPUSH
30292: NOP4
30296: ST_TO_ADDR
// if not enemy then
30297: NOP4
30301: NOT
30302: IFFALSE 30306
// exit ;
30304: GO 30707
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30306: NOP4
30310: PUSH
30311: NOP4
30315: PPUSH
30316: NOP4
30320: PPUSH
30321: NOP4
30325: PUSH
30326: LD_INT 13
30328: GREATER
30329: AND
30330: PUSH
30331: NOP4
30335: PPUSH
30336: NOP4
30340: PPUSH
30341: NOP4
30345: PUSH
30346: LD_INT 12
30348: GREATER
30349: OR
30350: IFFALSE 30354
// exit ;
30352: GO 30707
// missile := [ 1 ] ;
30354: NOP4
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: EMPTY
30363: LIST
30364: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30365: NOP4
30369: PPUSH
30370: NOP4
30374: PPUSH
30375: NOP4
30379: IFFALSE 30408
// missile := Insert ( missile , missile + 1 , 2 ) ;
30381: NOP4
30385: PUSH
30386: NOP4
30390: PPUSH
30391: NOP4
30395: PUSH
30396: LD_INT 1
30398: PLUS
30399: PPUSH
30400: LD_INT 2
30402: PPUSH
30403: NOP4
30407: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30408: NOP4
30412: PPUSH
30413: NOP4
30417: PPUSH
30418: NOP4
30422: PUSH
30423: NOP4
30427: PPUSH
30428: NOP4
30432: PPUSH
30433: NOP4
30437: PPUSH
30438: NOP4
30442: NOT
30443: AND
30444: IFFALSE 30473
// missile := Insert ( missile , missile + 1 , 3 ) ;
30446: NOP4
30450: PUSH
30451: NOP4
30455: PPUSH
30456: NOP4
30460: PUSH
30461: LD_INT 1
30463: PLUS
30464: PPUSH
30465: LD_INT 3
30467: PPUSH
30468: NOP4
30472: ST_TO_ADDR
// if missile < 2 then
30473: NOP4
30477: PUSH
30478: LD_INT 2
30480: LESS
30481: IFFALSE 30485
// exit ;
30483: GO 30707
// x := GetX ( enemy ) ;
30485: NOP4
30489: PUSH
30490: NOP4
30494: PPUSH
30495: NOP4
30499: ST_TO_ADDR
// y := GetY ( enemy ) ;
30500: NOP4
30504: PUSH
30505: NOP4
30509: PPUSH
30510: NOP4
30514: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30515: NOP4
30519: PUSH
30520: NOP4
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PPUSH
30529: LD_INT 1
30531: PPUSH
30532: NOP4
30536: PLUS
30537: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30538: NOP4
30542: PUSH
30543: NOP4
30547: PUSH
30548: LD_INT 1
30550: NEG
30551: PPUSH
30552: LD_INT 1
30554: PPUSH
30555: NOP4
30559: PLUS
30560: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30561: NOP4
30565: PPUSH
30566: NOP4
30570: PPUSH
30571: NOP4
30575: NOT
30576: IFFALSE 30598
// begin _x := x ;
30578: NOP4
30582: PUSH
30583: NOP4
30587: ST_TO_ADDR
// _y := y ;
30588: NOP4
30592: PUSH
30593: NOP4
30597: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30598: NOP4
30602: PUSH
30603: LD_INT 1
30605: PPUSH
30606: NOP4
30610: PPUSH
30611: NOP4
30615: ST_TO_ADDR
// case i of 1 :
30616: NOP4
30620: PUSH
30621: LD_INT 1
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30646
30629: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30630: NOP4
30634: PPUSH
30635: NOP4
30639: PPUSH
30640: NOP4
30644: GO 30707
30646: LD_INT 2
30648: DOUBLE
30649: EQUAL
30650: IFTRUE 30654
30652: GO 30676
30654: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30655: NOP4
30659: PPUSH
30660: NOP4
30664: PPUSH
30665: NOP4
30669: PPUSH
30670: NOP4
30674: GO 30707
30676: LD_INT 3
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30706
30684: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30685: NOP4
30689: PPUSH
30690: NOP4
30694: PPUSH
30695: NOP4
30699: PPUSH
30700: NOP4
30704: GO 30707
30706: POP
// end ;
30707: LD_VAR 0 2
30711: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30712: LD_INT 0
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
// if not unit or not building then
30720: NOP4
30724: NOT
30725: PUSH
30726: NOP4
30730: NOT
30731: OR
30732: IFFALSE 30736
// exit ;
30734: GO 30894
// x := GetX ( building ) ;
30736: NOP4
30740: PUSH
30741: NOP4
30745: PPUSH
30746: NOP4
30750: ST_TO_ADDR
// y := GetY ( building ) ;
30751: NOP4
30755: PUSH
30756: NOP4
30760: PPUSH
30761: NOP4
30765: ST_TO_ADDR
// for i = 0 to 5 do
30766: NOP4
30770: PUSH
30771: DOUBLE
30772: LD_INT 0
30774: DEC
30775: ST_TO_ADDR
30776: LD_INT 5
30778: PUSH
30779: FOR_TO
30780: IFFALSE 30892
// begin _x := ShiftX ( x , i , 3 ) ;
30782: NOP4
30786: PUSH
30787: NOP4
30791: PPUSH
30792: NOP4
30796: PPUSH
30797: LD_INT 3
30799: PPUSH
30800: NOP4
30804: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30805: NOP4
30809: PUSH
30810: NOP4
30814: PPUSH
30815: NOP4
30819: PPUSH
30820: LD_INT 3
30822: PPUSH
30823: NOP4
30827: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30828: NOP4
30832: PPUSH
30833: NOP4
30837: PPUSH
30838: NOP4
30842: NOT
30843: IFFALSE 30847
// continue ;
30845: GO 30779
// if HexInfo ( _x , _y ) = 0 then
30847: NOP4
30851: PPUSH
30852: NOP4
30856: PPUSH
30857: NOP4
30861: PUSH
30862: LD_INT 0
30864: EQUAL
30865: IFFALSE 30890
// begin ComMoveXY ( unit , _x , _y ) ;
30867: NOP4
30871: PPUSH
30872: NOP4
30876: PPUSH
30877: NOP4
30881: PPUSH
30882: NOP4
// exit ;
30886: POP
30887: POP
30888: GO 30894
// end ; end ;
30890: GO 30779
30892: POP
30893: POP
// end ;
30894: LD_VAR 0 3
30898: RET
// export function ScanBase ( side , base_area ) ; begin
30899: LD_INT 0
30901: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30902: NOP4
30906: PUSH
30907: NOP4
30911: PPUSH
30912: LD_INT 81
30914: PUSH
30915: NOP4
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PPUSH
30924: NOP4
30928: ST_TO_ADDR
// end ;
30929: LD_VAR 0 3
30933: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
30934: LD_INT 0
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
30940: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
30941: NOP4
30945: NOT
30946: PUSH
30947: NOP4
30951: PUSH
30952: NOP4
30956: ARRAY
30957: NOT
30958: OR
30959: PUSH
30960: NOP4
30964: NOT
30965: OR
30966: PUSH
30967: NOP4
30971: NOT
30972: OR
30973: IFFALSE 30977
// exit ;
30975: GO 31427
// side := mc_sides [ base ] ;
30977: NOP4
30981: PUSH
30982: NOP4
30986: PUSH
30987: NOP4
30991: ARRAY
30992: ST_TO_ADDR
// if not side then
30993: NOP4
30997: NOT
30998: IFFALSE 31002
// exit ;
31000: GO 31427
// for i in solds do
31002: NOP4
31006: PUSH
31007: NOP4
31011: PUSH
31012: FOR_IN
31013: IFFALSE 31074
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
31015: NOP4
31019: PPUSH
31020: NOP4
31024: PPUSH
31025: NOP4
31029: PUSH
31030: LD_INT 32
31032: PUSH
31033: LD_INT 31
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: IN
31040: IFFALSE 31060
// solds := solds diff i else
31042: NOP4
31046: PUSH
31047: NOP4
31051: PUSH
31052: NOP4
31056: DIFF
31057: ST_TO_ADDR
31058: GO 31072
// SetTag ( i , 18 ) ;
31060: NOP4
31064: PPUSH
31065: LD_INT 18
31067: PPUSH
31068: NOP4
31072: GO 31012
31074: POP
31075: POP
// if not solds then
31076: NOP4
31080: NOT
31081: IFFALSE 31085
// exit ;
31083: GO 31427
// repeat wait ( 0 0$1 ) ;
31085: LD_INT 35
31087: PPUSH
31088: NOP4
// enemy := ScanBase ( side , area ) ;
31092: NOP4
31096: PUSH
31097: NOP4
31101: PPUSH
31102: NOP4
31106: PPUSH
31107: NOP4
31111: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
31112: NOP4
31116: NOT
31117: PUSH
31118: NOP4
31122: PUSH
31123: LD_INT 3
31125: GREATER
31126: OR
31127: PUSH
31128: NOP4
31132: PUSH
31133: NOP4
31137: ARRAY
31138: OR
31139: IFFALSE 31180
// begin for i in solds do
31141: NOP4
31145: PUSH
31146: NOP4
31150: PUSH
31151: FOR_IN
31152: IFFALSE 31176
// if HasTask ( i ) then
31154: NOP4
31158: PPUSH
31159: NOP4
31163: IFFALSE 31174
// ComStop ( i ) ;
31165: NOP4
31169: PPUSH
31170: NOP4
31174: GO 31151
31176: POP
31177: POP
// break ;
31178: GO 31415
// end ; for i in solds do
31180: NOP4
31184: PUSH
31185: NOP4
31189: PUSH
31190: FOR_IN
31191: IFFALSE 31407
// begin if IsInUnit ( i ) then
31193: NOP4
31197: PPUSH
31198: NOP4
31202: IFFALSE 31213
// ComExitBuilding ( i ) ;
31204: NOP4
31208: PPUSH
31209: NOP4
// if GetLives ( i ) > 333 then
31213: NOP4
31217: PPUSH
31218: NOP4
31222: PUSH
31223: LD_INT 333
31225: GREATER
31226: IFFALSE 31254
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
31228: NOP4
31232: PPUSH
31233: NOP4
31237: PPUSH
31238: NOP4
31242: PPUSH
31243: NOP4
31247: PPUSH
31248: NOP4
31252: GO 31405
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
31254: NOP4
31258: PUSH
31259: NOP4
31263: PUSH
31264: NOP4
31268: ARRAY
31269: PPUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 30
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 30
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 30
31295: PUSH
31296: LD_INT 6
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: PPUSH
31309: NOP4
31313: PPUSH
31314: NOP4
31318: PPUSH
31319: NOP4
31323: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
31324: NOP4
31328: PPUSH
31329: NOP4
31333: PPUSH
31334: NOP4
31338: PPUSH
31339: LD_INT 3
31341: PPUSH
31342: LD_INT 5
31344: PPUSH
31345: NOP4
31349: PPUSH
31350: NOP4
31354: PPUSH
31355: NOP4
31359: PPUSH
31360: LD_INT 3
31362: PPUSH
31363: LD_INT 5
31365: PPUSH
31366: NOP4
31370: PPUSH
31371: NOP4
// SetTag ( i , 0 ) ;
31375: NOP4
31379: PPUSH
31380: LD_INT 0
31382: PPUSH
31383: NOP4
// solds := solds diff i ;
31387: NOP4
31391: PUSH
31392: NOP4
31396: PUSH
31397: NOP4
31401: DIFF
31402: ST_TO_ADDR
// continue ;
31403: GO 31190
// end ; end ;
31405: GO 31190
31407: POP
31408: POP
// until solds ;
31409: NOP4
31413: IFFALSE 31085
// MC_Reset ( base , 18 ) ;
31415: NOP4
31419: PPUSH
31420: LD_INT 18
31422: PPUSH
31423: NOP4
// end ;
31427: LD_VAR 0 4
31431: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
31444: PPUSH
31445: PPUSH
31446: PPUSH
31447: PPUSH
31448: PPUSH
31449: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
31450: NOP4
31454: PUSH
31455: NOP4
31459: PUSH
31460: NOP4
31464: ARRAY
31465: PPUSH
31466: LD_INT 25
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PPUSH
31476: NOP4
31480: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
31481: NOP4
31485: PUSH
31486: NOP4
31490: PUSH
31491: NOP4
31495: ARRAY
31496: PPUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 25
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 25
31512: PUSH
31513: LD_INT 5
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 25
31522: PUSH
31523: LD_INT 8
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 25
31532: PUSH
31533: LD_INT 9
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: PPUSH
31547: NOP4
31551: ST_TO_ADDR
// if not defenders and not solds then
31552: NOP4
31556: NOT
31557: PUSH
31558: NOP4
31562: NOT
31563: AND
31564: IFFALSE 31568
// exit ;
31566: GO 32897
// depot_under_attack := false ;
31568: NOP4
31572: PUSH
31573: LD_INT 0
31575: ST_TO_ADDR
// sold_defenders := [ ] ;
31576: NOP4
31580: PUSH
31581: EMPTY
31582: ST_TO_ADDR
// if mechs then
31583: NOP4
31587: IFFALSE 31716
// for i in defenders do
31589: NOP4
31593: PUSH
31594: NOP4
31598: PUSH
31599: FOR_IN
31600: IFFALSE 31714
// begin SetTag ( i , 20 ) ;
31602: NOP4
31606: PPUSH
31607: LD_INT 20
31609: PPUSH
31610: NOP4
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
31614: NOP4
31618: PPUSH
31619: NOP4
31623: PUSH
31624: LD_INT 1
31626: EQUAL
31627: PUSH
31628: NOP4
31632: PPUSH
31633: NOP4
31637: NOT
31638: AND
31639: PUSH
31640: NOP4
31644: AND
31645: IFFALSE 31712
// begin un := mechs [ 1 ] ;
31647: NOP4
31651: PUSH
31652: NOP4
31656: PUSH
31657: LD_INT 1
31659: ARRAY
31660: ST_TO_ADDR
// ComExitBuilding ( un ) ;
31661: NOP4
31665: PPUSH
31666: NOP4
// AddComEnterUnit ( un , i ) ;
31670: NOP4
31674: PPUSH
31675: NOP4
31679: PPUSH
31680: NOP4
// SetTag ( un , 19 ) ;
31684: NOP4
31688: PPUSH
31689: LD_INT 19
31691: PPUSH
31692: NOP4
// mechs := mechs diff un ;
31696: NOP4
31700: PUSH
31701: NOP4
31705: PUSH
31706: NOP4
31710: DIFF
31711: ST_TO_ADDR
// end ; end ;
31712: GO 31599
31714: POP
31715: POP
// if solds then
31716: NOP4
31720: IFFALSE 31779
// for i in solds do
31722: NOP4
31726: PUSH
31727: NOP4
31731: PUSH
31732: FOR_IN
31733: IFFALSE 31777
// if not GetTag ( i ) then
31735: NOP4
31739: PPUSH
31740: NOP4
31744: NOT
31745: IFFALSE 31775
// begin defenders := defenders union i ;
31747: NOP4
31751: PUSH
31752: NOP4
31756: PUSH
31757: NOP4
31761: UNION
31762: ST_TO_ADDR
// SetTag ( i , 18 ) ;
31763: NOP4
31767: PPUSH
31768: LD_INT 18
31770: PPUSH
31771: NOP4
// end ;
31775: GO 31732
31777: POP
31778: POP
// repeat wait ( 0 0$1 ) ;
31779: LD_INT 35
31781: PPUSH
31782: NOP4
// enemy := mc_scan [ base ] ;
31786: NOP4
31790: PUSH
31791: NOP4
31795: PUSH
31796: NOP4
31800: ARRAY
31801: ST_TO_ADDR
// for i in defenders do
31802: NOP4
31806: PUSH
31807: NOP4
31811: PUSH
31812: FOR_IN
31813: IFFALSE 32498
// begin e := NearestUnitToUnit ( enemy , i ) ;
31815: NOP4
31819: PUSH
31820: NOP4
31824: PPUSH
31825: NOP4
31829: PPUSH
31830: NOP4
31834: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
31835: NOP4
31839: PUSH
31840: NOP4
31844: PUSH
31845: NOP4
31849: ARRAY
31850: PPUSH
31851: LD_INT 2
31853: PUSH
31854: LD_INT 30
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 30
31866: PUSH
31867: LD_INT 1
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: LIST
31878: PPUSH
31879: NOP4
31883: NOT
31884: PUSH
31885: NOP4
31889: PUSH
31890: NOP4
31894: ARRAY
31895: PPUSH
31896: LD_INT 2
31898: PUSH
31899: LD_INT 30
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 30
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: PPUSH
31924: NOP4
31928: PPUSH
31929: NOP4
31933: PUSH
31934: LD_INT 600
31936: LESS
31937: OR
31938: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
31939: NOP4
31943: PPUSH
31944: NOP4
31948: PUSH
31949: LD_INT 2
31951: DOUBLE
31952: EQUAL
31953: IFTRUE 31957
31955: GO 32204
31957: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
31958: NOP4
31962: PPUSH
31963: NOP4
31967: PUSH
31968: LD_INT 650
31970: GREATER
31971: PUSH
31972: NOP4
31976: PPUSH
31977: NOP4
31981: PPUSH
31982: NOP4
31986: PUSH
31987: LD_INT 40
31989: LESS
31990: AND
31991: IFFALSE 32009
// ComAttackUnit ( i , e ) else
31993: NOP4
31997: PPUSH
31998: NOP4
32002: PPUSH
32003: NOP4
32007: GO 32087
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
32009: NOP4
32013: PPUSH
32014: NOP4
32018: PPUSH
32019: NOP4
32023: PUSH
32024: LD_INT 30
32026: GREATEREQUAL
32027: PUSH
32028: NOP4
32032: PPUSH
32033: NOP4
32037: PUSH
32038: LD_INT 650
32040: LESSEQUAL
32041: OR
32042: PUSH
32043: NOP4
32047: PPUSH
32048: NOP4
32052: PUSH
32053: NOP4
32057: ARRAY
32058: PPUSH
32059: NOP4
32063: NOT
32064: AND
32065: IFFALSE 32087
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32067: NOP4
32071: PPUSH
32072: NOP4
32076: PUSH
32077: NOP4
32081: ARRAY
32082: PPUSH
32083: NOP4
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
32087: NOP4
32091: PPUSH
32092: NOP4
32096: PUSH
32097: LD_INT 998
32099: LESS
32100: PUSH
32101: NOP4
32105: PPUSH
32106: NOP4
32110: PUSH
32111: LD_INT 1
32113: EQUAL
32114: AND
32115: PUSH
32116: NOP4
32120: PPUSH
32121: NOP4
32125: AND
32126: PUSH
32127: NOP4
32131: PPUSH
32132: NOP4
32136: PUSH
32137: NOP4
32141: ARRAY
32142: PPUSH
32143: NOP4
32147: AND
32148: IFFALSE 32202
// begin mech := IsDrivenBy ( i ) ;
32150: NOP4
32154: PUSH
32155: NOP4
32159: PPUSH
32160: NOP4
32164: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
32165: NOP4
32169: PPUSH
32170: NOP4
// AddComRepairVehicle ( mech , i ) ;
32174: NOP4
32178: PPUSH
32179: NOP4
32183: PPUSH
32184: NOP4
// AddComEnterUnit ( mech , i ) ;
32188: NOP4
32192: PPUSH
32193: NOP4
32197: PPUSH
32198: NOP4
// end ; end ; unit_human :
32202: GO 32469
32204: LD_INT 1
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32212
32210: GO 32468
32212: POP
// begin b := IsInUnit ( i ) ;
32213: NOP4
32217: PUSH
32218: NOP4
32222: PPUSH
32223: NOP4
32227: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
32228: NOP4
32232: PUSH
32233: NOP4
32237: NOT
32238: PUSH
32239: NOP4
32243: PPUSH
32244: NOP4
32248: PUSH
32249: LD_INT 32
32251: PUSH
32252: LD_INT 31
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: IN
32259: OR
32260: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
32261: NOP4
32265: PUSH
32266: NOP4
32270: PPUSH
32271: LD_INT 21
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PPUSH
32281: NOP4
32285: PUSH
32286: LD_INT 1
32288: LESSEQUAL
32289: OR
32290: PUSH
32291: NOP4
32295: AND
32296: PUSH
32297: NOP4
32301: PUSH
32302: NOP4
32306: IN
32307: NOT
32308: AND
32309: IFFALSE 32402
// begin if b then
32311: NOP4
32315: IFFALSE 32364
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
32317: NOP4
32321: PPUSH
32322: NOP4
32326: PPUSH
32327: NOP4
32331: PPUSH
32332: NOP4
32336: PPUSH
32337: NOP4
32341: PUSH
32342: LD_INT 10
32344: LESS
32345: PUSH
32346: NOP4
32350: PPUSH
32351: NOP4
32355: PUSH
32356: LD_INT 7
32358: NONEQUAL
32359: AND
32360: IFFALSE 32364
// continue ;
32362: GO 31812
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
32364: NOP4
32368: PUSH
32369: NOP4
32373: PPUSH
32374: NOP4
32378: PUSH
32379: LD_INT 1
32381: PLUS
32382: PPUSH
32383: NOP4
32387: PPUSH
32388: NOP4
32392: ST_TO_ADDR
// ComExitBuilding ( i ) ;
32393: NOP4
32397: PPUSH
32398: NOP4
// end ; if sold_defenders then
32402: NOP4
32406: IFFALSE 32466
// if i in sold_defenders then
32408: NOP4
32412: PUSH
32413: NOP4
32417: IN
32418: IFFALSE 32466
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
32420: NOP4
32424: PPUSH
32425: NOP4
32429: NOT
32430: PUSH
32431: NOP4
32435: PPUSH
32436: NOP4
32440: PPUSH
32441: NOP4
32445: PUSH
32446: LD_INT 30
32448: LESS
32449: AND
32450: IFFALSE 32466
// ComAttackUnit ( i , e ) ;
32452: NOP4
32456: PPUSH
32457: NOP4
32461: PPUSH
32462: NOP4
// end ; end ; end ;
32466: GO 32469
32468: POP
// if IsDead ( i ) then
32469: NOP4
32473: PPUSH
32474: NOP4
32478: IFFALSE 32496
// defenders := defenders diff i ;
32480: NOP4
32484: PUSH
32485: NOP4
32489: PUSH
32490: NOP4
32494: DIFF
32495: ST_TO_ADDR
// end ;
32496: GO 31812
32498: POP
32499: POP
// until not enemy or not defenders ;
32500: NOP4
32504: NOT
32505: PUSH
32506: NOP4
32510: NOT
32511: OR
32512: IFFALSE 31779
// MC_Reset ( base , 18 ) ;
32514: NOP4
32518: PPUSH
32519: LD_INT 18
32521: PPUSH
32522: NOP4
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32526: NOP4
32530: PUSH
32531: NOP4
32535: PUSH
32536: NOP4
32540: PPUSH
32541: LD_INT 2
32543: PUSH
32544: LD_INT 25
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 25
32556: PUSH
32557: LD_INT 5
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 25
32566: PUSH
32567: LD_INT 8
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 25
32576: PUSH
32577: LD_INT 9
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: PPUSH
32591: NOP4
32595: DIFF
32596: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
32597: NOP4
32601: NOT
32602: PUSH
32603: NOP4
32607: PPUSH
32608: LD_INT 21
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PPUSH
32618: NOP4
32622: AND
32623: IFFALSE 32885
// begin tmp := FilterByTag ( defenders , 19 ) ;
32625: NOP4
32629: PUSH
32630: NOP4
32634: PPUSH
32635: LD_INT 19
32637: PPUSH
32638: NOP4
32642: ST_TO_ADDR
// if tmp then
32643: NOP4
32647: IFFALSE 32717
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
32649: NOP4
32653: PUSH
32654: NOP4
32658: PPUSH
32659: LD_INT 25
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PPUSH
32669: NOP4
32673: ST_TO_ADDR
// if tmp then
32674: NOP4
32678: IFFALSE 32717
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
32680: NOP4
32684: PUSH
32685: NOP4
32689: PPUSH
32690: NOP4
32694: PPUSH
32695: NOP4
32699: PUSH
32700: NOP4
32704: ARRAY
32705: PUSH
32706: NOP4
32710: UNION
32711: PPUSH
32712: NOP4
32716: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
32717: NOP4
32721: PPUSH
32722: LD_INT 19
32724: PPUSH
32725: NOP4
// repeat wait ( 0 0$1 ) ;
32729: LD_INT 35
32731: PPUSH
32732: NOP4
// for i in defenders do
32736: NOP4
32740: PUSH
32741: NOP4
32745: PUSH
32746: FOR_IN
32747: IFFALSE 32836
// begin if not IsInArea ( i , mc_parking [ base ] ) then
32749: NOP4
32753: PPUSH
32754: NOP4
32758: PUSH
32759: NOP4
32763: ARRAY
32764: PPUSH
32765: NOP4
32769: NOT
32770: IFFALSE 32794
// ComMoveToArea ( i , mc_parking [ base ] ) else
32772: NOP4
32776: PPUSH
32777: NOP4
32781: PUSH
32782: NOP4
32786: ARRAY
32787: PPUSH
32788: NOP4
32792: GO 32834
// if GetControl ( i ) = control_manual then
32794: NOP4
32798: PPUSH
32799: NOP4
32803: PUSH
32804: LD_INT 1
32806: EQUAL
32807: IFFALSE 32834
// if IsDrivenBy ( i ) then
32809: NOP4
32813: PPUSH
32814: NOP4
32818: IFFALSE 32834
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
32820: NOP4
32824: PPUSH
32825: NOP4
32829: PPUSH
32830: NOP4
// end ;
32834: GO 32746
32836: POP
32837: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
32838: NOP4
32842: PPUSH
32843: LD_INT 95
32845: PUSH
32846: NOP4
32850: PUSH
32851: NOP4
32855: ARRAY
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PPUSH
32861: NOP4
32865: PUSH
32866: NOP4
32870: EQUAL
32871: PUSH
32872: NOP4
32876: PUSH
32877: NOP4
32881: ARRAY
32882: OR
32883: IFFALSE 32729
// end ; MC_Reset ( base , 20 ) ;
32885: NOP4
32889: PPUSH
32890: LD_INT 20
32892: PPUSH
32893: NOP4
// end ;
32897: LD_VAR 0 4
32901: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32902: LD_INT 0
32904: PPUSH
32905: PPUSH
32906: PPUSH
32907: PPUSH
// result := false ;
32908: NOP4
32912: PUSH
32913: LD_INT 0
32915: ST_TO_ADDR
// side := GetSide ( unit ) ;
32916: NOP4
32920: PUSH
32921: NOP4
32925: PPUSH
32926: NOP4
32930: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32931: NOP4
32935: PUSH
32936: NOP4
32940: PPUSH
32941: NOP4
32945: ST_TO_ADDR
// case nat of 1 :
32946: NOP4
32950: PUSH
32951: LD_INT 1
32953: DOUBLE
32954: EQUAL
32955: IFTRUE 32959
32957: GO 32970
32959: POP
// tech := tech_lassight ; 2 :
32960: NOP4
32964: PUSH
32965: LD_INT 12
32967: ST_TO_ADDR
32968: GO 33009
32970: LD_INT 2
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 32989
32978: POP
// tech := tech_mortar ; 3 :
32979: NOP4
32983: PUSH
32984: LD_INT 41
32986: ST_TO_ADDR
32987: GO 33009
32989: LD_INT 3
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 32997
32995: GO 33008
32997: POP
// tech := tech_bazooka ; end ;
32998: NOP4
33002: PUSH
33003: LD_INT 44
33005: ST_TO_ADDR
33006: GO 33009
33008: POP
// if Researched ( side , tech ) then
33009: NOP4
33013: PPUSH
33014: NOP4
33018: PPUSH
33019: NOP4
33023: IFFALSE 33050
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33025: NOP4
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: LD_INT 8
33035: PUSH
33036: LD_INT 9
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: PUSH
33044: NOP4
33048: ARRAY
33049: ST_TO_ADDR
// end ;
33050: LD_VAR 0 2
33054: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33055: LD_INT 0
33057: PPUSH
33058: PPUSH
33059: PPUSH
// if not mines then
33060: NOP4
33064: NOT
33065: IFFALSE 33069
// exit ;
33067: GO 33213
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33069: NOP4
33073: PUSH
33074: LD_INT 81
33076: PUSH
33077: NOP4
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: LD_INT 21
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PPUSH
33107: NOP4
33111: ST_TO_ADDR
// for i in mines do
33112: NOP4
33116: PUSH
33117: NOP4
33121: PUSH
33122: FOR_IN
33123: IFFALSE 33211
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33125: NOP4
33129: PUSH
33130: LD_INT 1
33132: ARRAY
33133: PPUSH
33134: NOP4
33138: PUSH
33139: LD_INT 2
33141: ARRAY
33142: PPUSH
33143: NOP4
33147: NOT
33148: IFFALSE 33152
// continue ;
33150: GO 33122
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33152: NOP4
33156: PUSH
33157: LD_INT 1
33159: ARRAY
33160: PPUSH
33161: NOP4
33165: PUSH
33166: LD_INT 2
33168: ARRAY
33169: PPUSH
33170: NOP4
33174: PUSH
33175: NOP4
33179: IN
33180: IFFALSE 33209
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33182: NOP4
33186: PUSH
33187: LD_INT 1
33189: ARRAY
33190: PPUSH
33191: NOP4
33195: PUSH
33196: LD_INT 2
33198: ARRAY
33199: PPUSH
33200: NOP4
33204: PPUSH
33205: NOP4
// end ;
33209: GO 33122
33211: POP
33212: POP
// end ;
33213: LD_VAR 0 3
33217: RET
// export function Count ( array ) ; var i ; begin
33218: LD_INT 0
33220: PPUSH
33221: PPUSH
// result := 0 ;
33222: NOP4
33226: PUSH
33227: LD_INT 0
33229: ST_TO_ADDR
// for i in array do
33230: NOP4
33234: PUSH
33235: NOP4
33239: PUSH
33240: FOR_IN
33241: IFFALSE 33265
// if i then
33243: NOP4
33247: IFFALSE 33263
// result := result + 1 ;
33249: NOP4
33253: PUSH
33254: NOP4
33258: PUSH
33259: LD_INT 1
33261: PLUS
33262: ST_TO_ADDR
33263: GO 33240
33265: POP
33266: POP
// end ;
33267: LD_VAR 0 2
33271: RET
// export function IsEmpty ( building ) ; begin
33272: LD_INT 0
33274: PPUSH
// if not building then
33275: NOP4
33279: NOT
33280: IFFALSE 33284
// exit ;
33282: GO 33327
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33284: NOP4
33288: PUSH
33289: NOP4
33293: PUSH
33294: LD_INT 22
33296: PUSH
33297: NOP4
33301: PPUSH
33302: NOP4
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 58
33313: PUSH
33314: EMPTY
33315: LIST
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PPUSH
33321: NOP4
33325: IN
33326: ST_TO_ADDR
// end ;
33327: LD_VAR 0 2
33331: RET
// export function IsNotFull ( building ) ; begin
33332: LD_INT 0
33334: PPUSH
// if not building then
33335: NOP4
33339: NOT
33340: IFFALSE 33344
// exit ;
33342: GO 33363
// result := UnitsInside ( building ) < 6 ;
33344: NOP4
33348: PUSH
33349: NOP4
33353: PPUSH
33354: NOP4
33358: PUSH
33359: LD_INT 6
33361: LESS
33362: ST_TO_ADDR
// end ;
33363: LD_VAR 0 2
33367: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33368: LD_INT 0
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
// tmp := [ ] ;
33374: NOP4
33378: PUSH
33379: EMPTY
33380: ST_TO_ADDR
// list := [ ] ;
33381: NOP4
33385: PUSH
33386: EMPTY
33387: ST_TO_ADDR
// for i = 16 to 25 do
33388: NOP4
33392: PUSH
33393: DOUBLE
33394: LD_INT 16
33396: DEC
33397: ST_TO_ADDR
33398: LD_INT 25
33400: PUSH
33401: FOR_TO
33402: IFFALSE 33475
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33404: NOP4
33408: PUSH
33409: NOP4
33413: PUSH
33414: LD_INT 22
33416: PUSH
33417: NOP4
33421: PPUSH
33422: NOP4
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 91
33433: PUSH
33434: NOP4
33438: PUSH
33439: LD_INT 6
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 30
33449: PUSH
33450: NOP4
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: PUSH
33464: EMPTY
33465: LIST
33466: PPUSH
33467: NOP4
33471: ADD
33472: ST_TO_ADDR
33473: GO 33401
33475: POP
33476: POP
// for i = 1 to tmp do
33477: NOP4
33481: PUSH
33482: DOUBLE
33483: LD_INT 1
33485: DEC
33486: ST_TO_ADDR
33487: NOP4
33491: PUSH
33492: FOR_TO
33493: IFFALSE 33581
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33495: NOP4
33499: PUSH
33500: NOP4
33504: PUSH
33505: NOP4
33509: PUSH
33510: NOP4
33514: ARRAY
33515: PPUSH
33516: NOP4
33520: PUSH
33521: NOP4
33525: PUSH
33526: NOP4
33530: ARRAY
33531: PPUSH
33532: NOP4
33536: PUSH
33537: NOP4
33541: PUSH
33542: NOP4
33546: ARRAY
33547: PPUSH
33548: NOP4
33552: PUSH
33553: NOP4
33557: PUSH
33558: NOP4
33562: ARRAY
33563: PPUSH
33564: NOP4
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: PUSH
33575: EMPTY
33576: LIST
33577: ADD
33578: ST_TO_ADDR
33579: GO 33492
33581: POP
33582: POP
// result := list ;
33583: NOP4
33587: PUSH
33588: NOP4
33592: ST_TO_ADDR
// end ;
33593: LD_VAR 0 2
33597: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33598: LD_INT 0
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
// if not factory then
33607: NOP4
33611: NOT
33612: IFFALSE 33616
// exit ;
33614: GO 34148
// if control = control_apeman then
33616: NOP4
33620: PUSH
33621: LD_INT 5
33623: EQUAL
33624: IFFALSE 33733
// begin tmp := UnitsInside ( factory ) ;
33626: NOP4
33630: PUSH
33631: NOP4
33635: PPUSH
33636: NOP4
33640: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33641: NOP4
33645: PPUSH
33646: LD_INT 25
33648: PUSH
33649: LD_INT 12
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PPUSH
33656: NOP4
33660: NOT
33661: IFFALSE 33671
// control := control_manual ;
33663: NOP4
33667: PUSH
33668: LD_INT 1
33670: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33671: NOP4
33675: PUSH
33676: NOP4
33680: PPUSH
33681: NOP4
33685: ST_TO_ADDR
// if tmp then
33686: NOP4
33690: IFFALSE 33733
// begin for i in tmp do
33692: NOP4
33696: PUSH
33697: NOP4
33701: PUSH
33702: FOR_IN
33703: IFFALSE 33731
// if i [ 1 ] = b_ext_radio then
33705: NOP4
33709: PUSH
33710: LD_INT 1
33712: ARRAY
33713: PUSH
33714: LD_INT 22
33716: EQUAL
33717: IFFALSE 33729
// begin control := control_remote ;
33719: NOP4
33723: PUSH
33724: LD_INT 2
33726: ST_TO_ADDR
// break ;
33727: GO 33731
// end ;
33729: GO 33702
33731: POP
33732: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33733: NOP4
33737: PPUSH
33738: NOP4
33742: PPUSH
33743: NOP4
33747: PPUSH
33748: NOP4
33752: PPUSH
33753: NOP4
33757: PPUSH
33758: NOP4
33762: IFFALSE 33797
// begin result := [ chassis , engine , control , weapon ] ;
33764: NOP4
33768: PUSH
33769: NOP4
33773: PUSH
33774: NOP4
33778: PUSH
33779: NOP4
33783: PUSH
33784: NOP4
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: ST_TO_ADDR
// exit ;
33795: GO 34148
// end ; _chassis := AvailableChassisList ( factory ) ;
33797: NOP4
33801: PUSH
33802: NOP4
33806: PPUSH
33807: NOP4
33811: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33812: NOP4
33816: PUSH
33817: NOP4
33821: PPUSH
33822: NOP4
33826: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33827: NOP4
33831: PUSH
33832: NOP4
33836: PPUSH
33837: NOP4
33841: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33842: NOP4
33846: PUSH
33847: NOP4
33851: PPUSH
33852: NOP4
33856: ST_TO_ADDR
// if not chassis in _chassis then
33857: NOP4
33861: PUSH
33862: NOP4
33866: IN
33867: NOT
33868: IFFALSE 33894
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33870: NOP4
33874: PUSH
33875: NOP4
33879: PUSH
33880: LD_INT 1
33882: PPUSH
33883: NOP4
33887: PPUSH
33888: NOP4
33892: ARRAY
33893: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33894: NOP4
33898: PPUSH
33899: NOP4
33903: PPUSH
33904: NOP4
33908: NOT
33909: IFFALSE 33968
// repeat engine := _engine [ 1 ] ;
33911: NOP4
33915: PUSH
33916: NOP4
33920: PUSH
33921: LD_INT 1
33923: ARRAY
33924: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33925: NOP4
33929: PUSH
33930: NOP4
33934: PPUSH
33935: LD_INT 1
33937: PPUSH
33938: NOP4
33942: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33943: NOP4
33947: PPUSH
33948: NOP4
33952: PPUSH
33953: NOP4
33957: PUSH
33958: NOP4
33962: PUSH
33963: EMPTY
33964: EQUAL
33965: OR
33966: IFFALSE 33911
// if not control in _control then
33968: NOP4
33972: PUSH
33973: NOP4
33977: IN
33978: NOT
33979: IFFALSE 34005
// control := _control [ rand ( 1 , _control ) ] ;
33981: NOP4
33985: PUSH
33986: NOP4
33990: PUSH
33991: LD_INT 1
33993: PPUSH
33994: NOP4
33998: PPUSH
33999: NOP4
34003: ARRAY
34004: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34005: NOP4
34009: PPUSH
34010: NOP4
34014: PPUSH
34015: NOP4
34019: NOT
34020: IFFALSE 34079
// repeat weapon := _weapon [ 1 ] ;
34022: NOP4
34026: PUSH
34027: NOP4
34031: PUSH
34032: LD_INT 1
34034: ARRAY
34035: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34036: NOP4
34040: PUSH
34041: NOP4
34045: PPUSH
34046: LD_INT 1
34048: PPUSH
34049: NOP4
34053: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34054: NOP4
34058: PPUSH
34059: NOP4
34063: PPUSH
34064: NOP4
34068: PUSH
34069: NOP4
34073: PUSH
34074: EMPTY
34075: EQUAL
34076: OR
34077: IFFALSE 34022
// result := [ ] ;
34079: NOP4
34083: PUSH
34084: EMPTY
34085: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34086: NOP4
34090: PPUSH
34091: NOP4
34095: PPUSH
34096: NOP4
34100: PPUSH
34101: NOP4
34105: PPUSH
34106: NOP4
34110: PPUSH
34111: NOP4
34115: IFFALSE 34148
// result := [ chassis , engine , control , weapon ] ;
34117: NOP4
34121: PUSH
34122: NOP4
34126: PUSH
34127: NOP4
34131: PUSH
34132: NOP4
34136: PUSH
34137: NOP4
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
// end ;
34148: LD_VAR 0 6
34152: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34153: LD_INT 0
34155: PPUSH
// if not chassis or not engine then
34156: NOP4
34160: NOT
34161: PUSH
34162: NOP4
34166: NOT
34167: OR
34168: IFFALSE 34172
// exit ;
34170: GO 34368
// case engine of engine_solar :
34172: NOP4
34176: PUSH
34177: LD_INT 2
34179: DOUBLE
34180: EQUAL
34181: IFTRUE 34185
34183: GO 34223
34185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34186: NOP4
34190: PUSH
34191: LD_INT 11
34193: PUSH
34194: LD_INT 12
34196: PUSH
34197: LD_INT 13
34199: PUSH
34200: LD_INT 14
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: LD_INT 3
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: ST_TO_ADDR
34221: GO 34352
34223: LD_INT 1
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34231
34229: GO 34293
34231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34232: NOP4
34236: PUSH
34237: LD_INT 11
34239: PUSH
34240: LD_INT 12
34242: PUSH
34243: LD_INT 13
34245: PUSH
34246: LD_INT 14
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 3
34257: PUSH
34258: LD_INT 4
34260: PUSH
34261: LD_INT 5
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 23
34269: PUSH
34270: LD_INT 22
34272: PUSH
34273: LD_INT 24
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: ST_TO_ADDR
34291: GO 34352
34293: LD_INT 3
34295: DOUBLE
34296: EQUAL
34297: IFTRUE 34301
34299: GO 34351
34301: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34302: NOP4
34306: PUSH
34307: LD_INT 13
34309: PUSH
34310: LD_INT 14
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: LD_INT 3
34318: PUSH
34319: LD_INT 4
34321: PUSH
34322: LD_INT 5
34324: PUSH
34325: LD_INT 21
34327: PUSH
34328: LD_INT 22
34330: PUSH
34331: LD_INT 23
34333: PUSH
34334: LD_INT 24
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
34349: GO 34352
34351: POP
// result := ( chassis in result ) ;
34352: NOP4
34356: PUSH
34357: NOP4
34361: PUSH
34362: NOP4
34366: IN
34367: ST_TO_ADDR
// end ;
34368: LD_VAR 0 3
34372: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34373: LD_INT 0
34375: PPUSH
// if not chassis or not weapon then
34376: NOP4
34380: NOT
34381: PUSH
34382: NOP4
34386: NOT
34387: OR
34388: IFFALSE 34392
// exit ;
34390: GO 35418
// case weapon of us_machine_gun :
34392: NOP4
34396: PUSH
34397: LD_INT 2
34399: DOUBLE
34400: EQUAL
34401: IFTRUE 34405
34403: GO 34435
34405: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34406: NOP4
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: LD_INT 4
34422: PUSH
34423: LD_INT 5
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: ST_TO_ADDR
34433: GO 35402
34435: LD_INT 3
34437: DOUBLE
34438: EQUAL
34439: IFTRUE 34443
34441: GO 34473
34443: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34444: NOP4
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: LD_INT 3
34457: PUSH
34458: LD_INT 4
34460: PUSH
34461: LD_INT 5
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: ST_TO_ADDR
34471: GO 35402
34473: LD_INT 11
34475: DOUBLE
34476: EQUAL
34477: IFTRUE 34481
34479: GO 34511
34481: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34482: NOP4
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: LD_INT 3
34495: PUSH
34496: LD_INT 4
34498: PUSH
34499: LD_INT 5
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
34509: GO 35402
34511: LD_INT 4
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34545
34519: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34520: NOP4
34524: PUSH
34525: LD_INT 2
34527: PUSH
34528: LD_INT 3
34530: PUSH
34531: LD_INT 4
34533: PUSH
34534: LD_INT 5
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: ST_TO_ADDR
34543: GO 35402
34545: LD_INT 5
34547: DOUBLE
34548: EQUAL
34549: IFTRUE 34553
34551: GO 34579
34553: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34554: NOP4
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 3
34564: PUSH
34565: LD_INT 4
34567: PUSH
34568: LD_INT 5
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: ST_TO_ADDR
34577: GO 35402
34579: LD_INT 9
34581: DOUBLE
34582: EQUAL
34583: IFTRUE 34587
34585: GO 34613
34587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34588: NOP4
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: LD_INT 3
34598: PUSH
34599: LD_INT 4
34601: PUSH
34602: LD_INT 5
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: ST_TO_ADDR
34611: GO 35402
34613: LD_INT 7
34615: DOUBLE
34616: EQUAL
34617: IFTRUE 34621
34619: GO 34647
34621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34622: NOP4
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: LD_INT 3
34632: PUSH
34633: LD_INT 4
34635: PUSH
34636: LD_INT 5
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
34645: GO 35402
34647: LD_INT 12
34649: DOUBLE
34650: EQUAL
34651: IFTRUE 34655
34653: GO 34681
34655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34656: NOP4
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: LD_INT 5
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: ST_TO_ADDR
34679: GO 35402
34681: LD_INT 13
34683: DOUBLE
34684: EQUAL
34685: IFTRUE 34689
34687: GO 34715
34689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34690: NOP4
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 3
34700: PUSH
34701: LD_INT 4
34703: PUSH
34704: LD_INT 5
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: ST_TO_ADDR
34713: GO 35402
34715: LD_INT 14
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34723
34721: GO 34741
34723: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34724: NOP4
34728: PUSH
34729: LD_INT 4
34731: PUSH
34732: LD_INT 5
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: ST_TO_ADDR
34739: GO 35402
34741: LD_INT 6
34743: DOUBLE
34744: EQUAL
34745: IFTRUE 34749
34747: GO 34767
34749: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34750: NOP4
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: LD_INT 5
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: ST_TO_ADDR
34765: GO 35402
34767: LD_INT 10
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34793
34775: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34776: NOP4
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: LD_INT 5
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: ST_TO_ADDR
34791: GO 35402
34793: LD_INT 22
34795: DOUBLE
34796: EQUAL
34797: IFTRUE 34801
34799: GO 34827
34801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34802: NOP4
34806: PUSH
34807: LD_INT 11
34809: PUSH
34810: LD_INT 12
34812: PUSH
34813: LD_INT 13
34815: PUSH
34816: LD_INT 14
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: ST_TO_ADDR
34825: GO 35402
34827: LD_INT 23
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34835
34833: GO 34861
34835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34836: NOP4
34840: PUSH
34841: LD_INT 11
34843: PUSH
34844: LD_INT 12
34846: PUSH
34847: LD_INT 13
34849: PUSH
34850: LD_INT 14
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: ST_TO_ADDR
34859: GO 35402
34861: LD_INT 24
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34869
34867: GO 34895
34869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34870: NOP4
34874: PUSH
34875: LD_INT 11
34877: PUSH
34878: LD_INT 12
34880: PUSH
34881: LD_INT 13
34883: PUSH
34884: LD_INT 14
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
34893: GO 35402
34895: LD_INT 30
34897: DOUBLE
34898: EQUAL
34899: IFTRUE 34903
34901: GO 34929
34903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34904: NOP4
34908: PUSH
34909: LD_INT 11
34911: PUSH
34912: LD_INT 12
34914: PUSH
34915: LD_INT 13
34917: PUSH
34918: LD_INT 14
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: ST_TO_ADDR
34927: GO 35402
34929: LD_INT 25
34931: DOUBLE
34932: EQUAL
34933: IFTRUE 34937
34935: GO 34955
34937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34938: NOP4
34942: PUSH
34943: LD_INT 13
34945: PUSH
34946: LD_INT 14
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: ST_TO_ADDR
34953: GO 35402
34955: LD_INT 27
34957: DOUBLE
34958: EQUAL
34959: IFTRUE 34963
34961: GO 34981
34963: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34964: NOP4
34968: PUSH
34969: LD_INT 13
34971: PUSH
34972: LD_INT 14
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: ST_TO_ADDR
34979: GO 35402
34981: LD_INT 28
34983: DOUBLE
34984: EQUAL
34985: IFTRUE 34989
34987: GO 35007
34989: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34990: NOP4
34994: PUSH
34995: LD_INT 13
34997: PUSH
34998: LD_INT 14
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: ST_TO_ADDR
35005: GO 35402
35007: LD_INT 29
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35033
35015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35016: NOP4
35020: PUSH
35021: LD_INT 13
35023: PUSH
35024: LD_INT 14
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: ST_TO_ADDR
35031: GO 35402
35033: LD_INT 31
35035: DOUBLE
35036: EQUAL
35037: IFTRUE 35041
35039: GO 35059
35041: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35042: NOP4
35046: PUSH
35047: LD_INT 13
35049: PUSH
35050: LD_INT 14
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: ST_TO_ADDR
35057: GO 35402
35059: LD_INT 26
35061: DOUBLE
35062: EQUAL
35063: IFTRUE 35067
35065: GO 35085
35067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35068: NOP4
35072: PUSH
35073: LD_INT 13
35075: PUSH
35076: LD_INT 14
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: ST_TO_ADDR
35083: GO 35402
35085: LD_INT 42
35087: DOUBLE
35088: EQUAL
35089: IFTRUE 35093
35091: GO 35119
35093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35094: NOP4
35098: PUSH
35099: LD_INT 21
35101: PUSH
35102: LD_INT 22
35104: PUSH
35105: LD_INT 23
35107: PUSH
35108: LD_INT 24
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
35117: GO 35402
35119: LD_INT 43
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35127
35125: GO 35153
35127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35128: NOP4
35132: PUSH
35133: LD_INT 21
35135: PUSH
35136: LD_INT 22
35138: PUSH
35139: LD_INT 23
35141: PUSH
35142: LD_INT 24
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: ST_TO_ADDR
35151: GO 35402
35153: LD_INT 44
35155: DOUBLE
35156: EQUAL
35157: IFTRUE 35161
35159: GO 35187
35161: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35162: NOP4
35166: PUSH
35167: LD_INT 21
35169: PUSH
35170: LD_INT 22
35172: PUSH
35173: LD_INT 23
35175: PUSH
35176: LD_INT 24
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: ST_TO_ADDR
35185: GO 35402
35187: LD_INT 45
35189: DOUBLE
35190: EQUAL
35191: IFTRUE 35195
35193: GO 35221
35195: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35196: NOP4
35200: PUSH
35201: LD_INT 21
35203: PUSH
35204: LD_INT 22
35206: PUSH
35207: LD_INT 23
35209: PUSH
35210: LD_INT 24
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: ST_TO_ADDR
35219: GO 35402
35221: LD_INT 49
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35229
35227: GO 35255
35229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35230: NOP4
35234: PUSH
35235: LD_INT 21
35237: PUSH
35238: LD_INT 22
35240: PUSH
35241: LD_INT 23
35243: PUSH
35244: LD_INT 24
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
35253: GO 35402
35255: LD_INT 51
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35263
35261: GO 35289
35263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35264: NOP4
35268: PUSH
35269: LD_INT 21
35271: PUSH
35272: LD_INT 22
35274: PUSH
35275: LD_INT 23
35277: PUSH
35278: LD_INT 24
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: ST_TO_ADDR
35287: GO 35402
35289: LD_INT 52
35291: DOUBLE
35292: EQUAL
35293: IFTRUE 35297
35295: GO 35323
35297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35298: NOP4
35302: PUSH
35303: LD_INT 21
35305: PUSH
35306: LD_INT 22
35308: PUSH
35309: LD_INT 23
35311: PUSH
35312: LD_INT 24
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
35321: GO 35402
35323: LD_INT 53
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35331
35329: GO 35349
35331: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35332: NOP4
35336: PUSH
35337: LD_INT 23
35339: PUSH
35340: LD_INT 24
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: ST_TO_ADDR
35347: GO 35402
35349: LD_INT 46
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35357
35355: GO 35375
35357: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35358: NOP4
35362: PUSH
35363: LD_INT 23
35365: PUSH
35366: LD_INT 24
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: ST_TO_ADDR
35373: GO 35402
35375: LD_INT 47
35377: DOUBLE
35378: EQUAL
35379: IFTRUE 35383
35381: GO 35401
35383: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35384: NOP4
35388: PUSH
35389: LD_INT 23
35391: PUSH
35392: LD_INT 24
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: ST_TO_ADDR
35399: GO 35402
35401: POP
// result := ( chassis in result ) ;
35402: NOP4
35406: PUSH
35407: NOP4
35411: PUSH
35412: NOP4
35416: IN
35417: ST_TO_ADDR
// end ;
35418: LD_VAR 0 3
35422: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35423: LD_INT 0
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
// result := array ;
35432: NOP4
35436: PUSH
35437: NOP4
35441: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35442: NOP4
35446: NOT
35447: PUSH
35448: NOP4
35452: NOT
35453: OR
35454: PUSH
35455: NOP4
35459: NOT
35460: OR
35461: PUSH
35462: NOP4
35466: PUSH
35467: NOP4
35471: GREATER
35472: OR
35473: PUSH
35474: NOP4
35478: PUSH
35479: NOP4
35483: GREATER
35484: OR
35485: IFFALSE 35489
// exit ;
35487: GO 35785
// if direction then
35489: NOP4
35493: IFFALSE 35557
// begin d := 1 ;
35495: NOP4
35499: PUSH
35500: LD_INT 1
35502: ST_TO_ADDR
// if i_from > i_to then
35503: NOP4
35507: PUSH
35508: NOP4
35512: GREATER
35513: IFFALSE 35539
// length := ( array - i_from ) + i_to else
35515: NOP4
35519: PUSH
35520: NOP4
35524: PUSH
35525: NOP4
35529: MINUS
35530: PUSH
35531: NOP4
35535: PLUS
35536: ST_TO_ADDR
35537: GO 35555
// length := i_to - i_from ;
35539: NOP4
35543: PUSH
35544: NOP4
35548: PUSH
35549: NOP4
35553: MINUS
35554: ST_TO_ADDR
// end else
35555: GO 35618
// begin d := - 1 ;
35557: NOP4
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: ST_TO_ADDR
// if i_from > i_to then
35566: NOP4
35570: PUSH
35571: NOP4
35575: GREATER
35576: IFFALSE 35596
// length := i_from - i_to else
35578: NOP4
35582: PUSH
35583: NOP4
35587: PUSH
35588: NOP4
35592: MINUS
35593: ST_TO_ADDR
35594: GO 35618
// length := ( array - i_to ) + i_from ;
35596: NOP4
35600: PUSH
35601: NOP4
35605: PUSH
35606: NOP4
35610: MINUS
35611: PUSH
35612: NOP4
35616: PLUS
35617: ST_TO_ADDR
// end ; if not length then
35618: NOP4
35622: NOT
35623: IFFALSE 35627
// exit ;
35625: GO 35785
// tmp := array ;
35627: NOP4
35631: PUSH
35632: NOP4
35636: ST_TO_ADDR
// for i = 1 to length do
35637: NOP4
35641: PUSH
35642: DOUBLE
35643: LD_INT 1
35645: DEC
35646: ST_TO_ADDR
35647: NOP4
35651: PUSH
35652: FOR_TO
35653: IFFALSE 35773
// begin for j = 1 to array do
35655: NOP4
35659: PUSH
35660: DOUBLE
35661: LD_INT 1
35663: DEC
35664: ST_TO_ADDR
35665: NOP4
35669: PUSH
35670: FOR_TO
35671: IFFALSE 35759
// begin k := j + d ;
35673: NOP4
35677: PUSH
35678: NOP4
35682: PUSH
35683: NOP4
35687: PLUS
35688: ST_TO_ADDR
// if k > array then
35689: NOP4
35693: PUSH
35694: NOP4
35698: GREATER
35699: IFFALSE 35709
// k := 1 ;
35701: NOP4
35705: PUSH
35706: LD_INT 1
35708: ST_TO_ADDR
// if not k then
35709: NOP4
35713: NOT
35714: IFFALSE 35726
// k := array ;
35716: NOP4
35720: PUSH
35721: NOP4
35725: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35726: NOP4
35730: PUSH
35731: NOP4
35735: PPUSH
35736: NOP4
35740: PPUSH
35741: NOP4
35745: PUSH
35746: NOP4
35750: ARRAY
35751: PPUSH
35752: NOP4
35756: ST_TO_ADDR
// end ;
35757: GO 35670
35759: POP
35760: POP
// array := tmp ;
35761: NOP4
35765: PUSH
35766: NOP4
35770: ST_TO_ADDR
// end ;
35771: GO 35652
35773: POP
35774: POP
// result := array ;
35775: NOP4
35779: PUSH
35780: NOP4
35784: ST_TO_ADDR
// end ;
35785: LD_VAR 0 5
35789: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35790: LD_INT 0
35792: PPUSH
35793: PPUSH
// result := 0 ;
35794: NOP4
35798: PUSH
35799: LD_INT 0
35801: ST_TO_ADDR
// if not array or not value in array then
35802: NOP4
35806: NOT
35807: PUSH
35808: NOP4
35812: PUSH
35813: NOP4
35817: IN
35818: NOT
35819: OR
35820: IFFALSE 35824
// exit ;
35822: GO 35878
// for i = 1 to array do
35824: NOP4
35828: PUSH
35829: DOUBLE
35830: LD_INT 1
35832: DEC
35833: ST_TO_ADDR
35834: NOP4
35838: PUSH
35839: FOR_TO
35840: IFFALSE 35876
// if value = array [ i ] then
35842: NOP4
35846: PUSH
35847: NOP4
35851: PUSH
35852: NOP4
35856: ARRAY
35857: EQUAL
35858: IFFALSE 35874
// begin result := i ;
35860: NOP4
35864: PUSH
35865: NOP4
35869: ST_TO_ADDR
// exit ;
35870: POP
35871: POP
35872: GO 35878
// end ;
35874: GO 35839
35876: POP
35877: POP
// end ;
35878: LD_VAR 0 3
35882: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35883: LD_INT 0
35885: PPUSH
// vc_chassis := chassis ;
35886: LD_ADDR_OWVAR 37
35890: PUSH
35891: NOP4
35895: ST_TO_ADDR
// vc_engine := engine ;
35896: LD_ADDR_OWVAR 39
35900: PUSH
35901: NOP4
35905: ST_TO_ADDR
// vc_control := control ;
35906: LD_ADDR_OWVAR 38
35910: PUSH
35911: NOP4
35915: ST_TO_ADDR
// vc_weapon := weapon ;
35916: LD_ADDR_OWVAR 40
35920: PUSH
35921: NOP4
35925: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35926: LD_ADDR_OWVAR 41
35930: PUSH
35931: NOP4
35935: ST_TO_ADDR
// end ;
35936: LD_VAR 0 6
35940: RET
// export function WantPlant ( unit ) ; var task ; begin
35941: LD_INT 0
35943: PPUSH
35944: PPUSH
// result := false ;
35945: NOP4
35949: PUSH
35950: LD_INT 0
35952: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35953: NOP4
35957: PUSH
35958: NOP4
35962: PPUSH
35963: NOP4
35967: ST_TO_ADDR
// if task then
35968: NOP4
35972: IFFALSE 36000
// if task [ 1 ] [ 1 ] = p then
35974: NOP4
35978: PUSH
35979: LD_INT 1
35981: ARRAY
35982: PUSH
35983: LD_INT 1
35985: ARRAY
35986: PUSH
35987: LD_STRING p
35989: EQUAL
35990: IFFALSE 36000
// result := true ;
35992: NOP4
35996: PUSH
35997: LD_INT 1
35999: ST_TO_ADDR
// end ;
36000: LD_VAR 0 2
36004: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36005: LD_INT 0
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
// if pos < 1 then
36011: NOP4
36015: PUSH
36016: LD_INT 1
36018: LESS
36019: IFFALSE 36023
// exit ;
36021: GO 36326
// if pos = 1 then
36023: NOP4
36027: PUSH
36028: LD_INT 1
36030: EQUAL
36031: IFFALSE 36064
// result := Replace ( arr , pos [ 1 ] , value ) else
36033: NOP4
36037: PUSH
36038: NOP4
36042: PPUSH
36043: NOP4
36047: PUSH
36048: LD_INT 1
36050: ARRAY
36051: PPUSH
36052: NOP4
36056: PPUSH
36057: NOP4
36061: ST_TO_ADDR
36062: GO 36326
// begin tmp := arr ;
36064: NOP4
36068: PUSH
36069: NOP4
36073: ST_TO_ADDR
// s_arr := [ tmp ] ;
36074: NOP4
36078: PUSH
36079: NOP4
36083: PUSH
36084: EMPTY
36085: LIST
36086: ST_TO_ADDR
// for i = 1 to pos - 1 do
36087: NOP4
36091: PUSH
36092: DOUBLE
36093: LD_INT 1
36095: DEC
36096: ST_TO_ADDR
36097: NOP4
36101: PUSH
36102: LD_INT 1
36104: MINUS
36105: PUSH
36106: FOR_TO
36107: IFFALSE 36152
// begin tmp := tmp [ pos [ i ] ] ;
36109: NOP4
36113: PUSH
36114: NOP4
36118: PUSH
36119: NOP4
36123: PUSH
36124: NOP4
36128: ARRAY
36129: ARRAY
36130: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36131: NOP4
36135: PUSH
36136: NOP4
36140: PUSH
36141: NOP4
36145: PUSH
36146: EMPTY
36147: LIST
36148: ADD
36149: ST_TO_ADDR
// end ;
36150: GO 36106
36152: POP
36153: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36154: NOP4
36158: PUSH
36159: NOP4
36163: PPUSH
36164: NOP4
36168: PUSH
36169: NOP4
36173: ARRAY
36174: PPUSH
36175: NOP4
36179: PPUSH
36180: NOP4
36184: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36185: NOP4
36189: PUSH
36190: NOP4
36194: PPUSH
36195: NOP4
36199: PPUSH
36200: NOP4
36204: PPUSH
36205: NOP4
36209: ST_TO_ADDR
// for i = s_arr downto 2 do
36210: NOP4
36214: PUSH
36215: DOUBLE
36216: NOP4
36220: INC
36221: ST_TO_ADDR
36222: LD_INT 2
36224: PUSH
36225: FOR_DOWNTO
36226: IFFALSE 36310
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36228: NOP4
36232: PUSH
36233: NOP4
36237: PUSH
36238: NOP4
36242: PUSH
36243: LD_INT 1
36245: MINUS
36246: ARRAY
36247: PPUSH
36248: NOP4
36252: PUSH
36253: NOP4
36257: PUSH
36258: LD_INT 1
36260: MINUS
36261: ARRAY
36262: PPUSH
36263: NOP4
36267: PUSH
36268: NOP4
36272: ARRAY
36273: PPUSH
36274: NOP4
36278: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36279: NOP4
36283: PUSH
36284: NOP4
36288: PPUSH
36289: NOP4
36293: PUSH
36294: LD_INT 1
36296: MINUS
36297: PPUSH
36298: NOP4
36302: PPUSH
36303: NOP4
36307: ST_TO_ADDR
// end ;
36308: GO 36225
36310: POP
36311: POP
// result := s_arr [ 1 ] ;
36312: NOP4
36316: PUSH
36317: NOP4
36321: PUSH
36322: LD_INT 1
36324: ARRAY
36325: ST_TO_ADDR
// end ; end ;
36326: LD_VAR 0 4
36330: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36331: LD_INT 0
36333: PPUSH
36334: PPUSH
// if not list then
36335: NOP4
36339: NOT
36340: IFFALSE 36344
// exit ;
36342: GO 36435
// i := list [ pos1 ] ;
36344: NOP4
36348: PUSH
36349: NOP4
36353: PUSH
36354: NOP4
36358: ARRAY
36359: ST_TO_ADDR
// if not i then
36360: NOP4
36364: NOT
36365: IFFALSE 36369
// exit ;
36367: GO 36435
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36369: NOP4
36373: PUSH
36374: NOP4
36378: PPUSH
36379: NOP4
36383: PPUSH
36384: NOP4
36388: PUSH
36389: NOP4
36393: ARRAY
36394: PPUSH
36395: NOP4
36399: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36400: NOP4
36404: PUSH
36405: NOP4
36409: PPUSH
36410: NOP4
36414: PPUSH
36415: NOP4
36419: PPUSH
36420: NOP4
36424: ST_TO_ADDR
// result := list ;
36425: NOP4
36429: PUSH
36430: NOP4
36434: ST_TO_ADDR
// end ;
36435: LD_VAR 0 4
36439: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36440: LD_INT 0
36442: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36443: NOP4
36447: PUSH
36448: NOP4
36452: PPUSH
36453: NOP4
36457: PPUSH
36458: NOP4
36462: PPUSH
36463: NOP4
36467: PPUSH
36468: NOP4
36472: PPUSH
36473: NOP4
36477: PPUSH
36478: NOP4
36482: PPUSH
36483: NOP4
36487: ST_TO_ADDR
// end ;
36488: LD_VAR 0 5
36492: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36493: LD_INT 0
36495: PPUSH
36496: PPUSH
36497: PPUSH
36498: PPUSH
// if not list then
36499: NOP4
36503: NOT
36504: IFFALSE 36508
// exit ;
36506: GO 36896
// result := [ ] ;
36508: NOP4
36512: PUSH
36513: EMPTY
36514: ST_TO_ADDR
// for i in list do
36515: NOP4
36519: PUSH
36520: NOP4
36524: PUSH
36525: FOR_IN
36526: IFFALSE 36728
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36528: NOP4
36532: PUSH
36533: NOP4
36537: PPUSH
36538: NOP4
36542: PPUSH
36543: NOP4
36547: PPUSH
36548: NOP4
36552: ST_TO_ADDR
// if not result then
36553: NOP4
36557: NOT
36558: IFFALSE 36584
// result := [ [ i , tmp ] ] else
36560: NOP4
36564: PUSH
36565: NOP4
36569: PUSH
36570: NOP4
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: ST_TO_ADDR
36582: GO 36726
// begin if result [ result ] [ 2 ] < tmp then
36584: NOP4
36588: PUSH
36589: NOP4
36593: ARRAY
36594: PUSH
36595: LD_INT 2
36597: ARRAY
36598: PUSH
36599: NOP4
36603: LESS
36604: IFFALSE 36646
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36606: NOP4
36610: PUSH
36611: NOP4
36615: PPUSH
36616: NOP4
36620: PUSH
36621: LD_INT 1
36623: PLUS
36624: PPUSH
36625: NOP4
36629: PUSH
36630: NOP4
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PPUSH
36639: NOP4
36643: ST_TO_ADDR
36644: GO 36726
// for j = 1 to result do
36646: NOP4
36650: PUSH
36651: DOUBLE
36652: LD_INT 1
36654: DEC
36655: ST_TO_ADDR
36656: NOP4
36660: PUSH
36661: FOR_TO
36662: IFFALSE 36724
// begin if tmp < result [ j ] [ 2 ] then
36664: NOP4
36668: PUSH
36669: NOP4
36673: PUSH
36674: NOP4
36678: ARRAY
36679: PUSH
36680: LD_INT 2
36682: ARRAY
36683: LESS
36684: IFFALSE 36722
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36686: NOP4
36690: PUSH
36691: NOP4
36695: PPUSH
36696: NOP4
36700: PPUSH
36701: NOP4
36705: PUSH
36706: NOP4
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PPUSH
36715: NOP4
36719: ST_TO_ADDR
// break ;
36720: GO 36724
// end ; end ;
36722: GO 36661
36724: POP
36725: POP
// end ; end ;
36726: GO 36525
36728: POP
36729: POP
// if result and not asc then
36730: NOP4
36734: PUSH
36735: NOP4
36739: NOT
36740: AND
36741: IFFALSE 36816
// begin tmp := result ;
36743: NOP4
36747: PUSH
36748: NOP4
36752: ST_TO_ADDR
// for i = tmp downto 1 do
36753: NOP4
36757: PUSH
36758: DOUBLE
36759: NOP4
36763: INC
36764: ST_TO_ADDR
36765: LD_INT 1
36767: PUSH
36768: FOR_DOWNTO
36769: IFFALSE 36814
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36771: NOP4
36775: PUSH
36776: NOP4
36780: PPUSH
36781: NOP4
36785: PUSH
36786: NOP4
36790: MINUS
36791: PUSH
36792: LD_INT 1
36794: PLUS
36795: PPUSH
36796: NOP4
36800: PUSH
36801: NOP4
36805: ARRAY
36806: PPUSH
36807: NOP4
36811: ST_TO_ADDR
36812: GO 36768
36814: POP
36815: POP
// end ; tmp := [ ] ;
36816: NOP4
36820: PUSH
36821: EMPTY
36822: ST_TO_ADDR
// if mode then
36823: NOP4
36827: IFFALSE 36896
// begin for i = 1 to result do
36829: NOP4
36833: PUSH
36834: DOUBLE
36835: LD_INT 1
36837: DEC
36838: ST_TO_ADDR
36839: NOP4
36843: PUSH
36844: FOR_TO
36845: IFFALSE 36884
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36847: NOP4
36851: PUSH
36852: NOP4
36856: PPUSH
36857: NOP4
36861: PPUSH
36862: NOP4
36866: PUSH
36867: NOP4
36871: ARRAY
36872: PUSH
36873: LD_INT 1
36875: ARRAY
36876: PPUSH
36877: NOP4
36881: ST_TO_ADDR
36882: GO 36844
36884: POP
36885: POP
// result := tmp ;
36886: NOP4
36890: PUSH
36891: NOP4
36895: ST_TO_ADDR
// end ; end ;
36896: LD_VAR 0 6
36900: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36909: NOP4
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// if not x or not y then
36931: NOP4
36935: NOT
36936: PUSH
36937: NOP4
36941: NOT
36942: OR
36943: IFFALSE 36947
// exit ;
36945: GO 38593
// if not range then
36947: NOP4
36951: NOT
36952: IFFALSE 36962
// range := 10 ;
36954: NOP4
36958: PUSH
36959: LD_INT 10
36961: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36962: NOP4
36966: PUSH
36967: LD_INT 81
36969: PUSH
36970: NOP4
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 92
36981: PUSH
36982: NOP4
36986: PUSH
36987: NOP4
36991: PUSH
36992: NOP4
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 3
37005: PUSH
37006: LD_INT 21
37008: PUSH
37009: LD_INT 3
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: PPUSH
37025: NOP4
37029: ST_TO_ADDR
// if not tmp then
37030: NOP4
37034: NOT
37035: IFFALSE 37039
// exit ;
37037: GO 38593
// for i in tmp do
37039: NOP4
37043: PUSH
37044: NOP4
37048: PUSH
37049: FOR_IN
37050: IFFALSE 38568
// begin points := [ 0 , 0 , 0 ] ;
37052: NOP4
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: LIST
37070: ST_TO_ADDR
// bpoints := 1 ;
37071: NOP4
37075: PUSH
37076: LD_INT 1
37078: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37079: NOP4
37083: PPUSH
37084: NOP4
37088: PUSH
37089: LD_INT 1
37091: DOUBLE
37092: EQUAL
37093: IFTRUE 37097
37095: GO 37675
37097: POP
// begin if GetClass ( i ) = 1 then
37098: NOP4
37102: PPUSH
37103: NOP4
37107: PUSH
37108: LD_INT 1
37110: EQUAL
37111: IFFALSE 37132
// points := [ 10 , 5 , 3 ] ;
37113: NOP4
37117: PUSH
37118: LD_INT 10
37120: PUSH
37121: LD_INT 5
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37132: NOP4
37136: PPUSH
37137: NOP4
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 3
37147: PUSH
37148: LD_INT 4
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: IN
37156: IFFALSE 37177
// points := [ 3 , 2 , 1 ] ;
37158: NOP4
37162: PUSH
37163: LD_INT 3
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37177: NOP4
37181: PPUSH
37182: NOP4
37186: PUSH
37187: LD_INT 5
37189: EQUAL
37190: IFFALSE 37211
// points := [ 130 , 5 , 2 ] ;
37192: NOP4
37196: PUSH
37197: LD_INT 130
37199: PUSH
37200: LD_INT 5
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: LIST
37210: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37211: NOP4
37215: PPUSH
37216: NOP4
37220: PUSH
37221: LD_INT 8
37223: EQUAL
37224: IFFALSE 37245
// points := [ 35 , 35 , 30 ] ;
37226: NOP4
37230: PUSH
37231: LD_INT 35
37233: PUSH
37234: LD_INT 35
37236: PUSH
37237: LD_INT 30
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37245: NOP4
37249: PPUSH
37250: NOP4
37254: PUSH
37255: LD_INT 9
37257: EQUAL
37258: IFFALSE 37279
// points := [ 20 , 55 , 40 ] ;
37260: NOP4
37264: PUSH
37265: LD_INT 20
37267: PUSH
37268: LD_INT 55
37270: PUSH
37271: LD_INT 40
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37279: NOP4
37283: PPUSH
37284: NOP4
37288: PUSH
37289: LD_INT 12
37291: PUSH
37292: LD_INT 16
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: IN
37299: IFFALSE 37320
// points := [ 5 , 3 , 2 ] ;
37301: NOP4
37305: PUSH
37306: LD_INT 5
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37320: NOP4
37324: PPUSH
37325: NOP4
37329: PUSH
37330: LD_INT 17
37332: EQUAL
37333: IFFALSE 37354
// points := [ 100 , 50 , 75 ] ;
37335: NOP4
37339: PUSH
37340: LD_INT 100
37342: PUSH
37343: LD_INT 50
37345: PUSH
37346: LD_INT 75
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37354: NOP4
37358: PPUSH
37359: NOP4
37363: PUSH
37364: LD_INT 15
37366: EQUAL
37367: IFFALSE 37388
// points := [ 10 , 5 , 3 ] ;
37369: NOP4
37373: PUSH
37374: LD_INT 10
37376: PUSH
37377: LD_INT 5
37379: PUSH
37380: LD_INT 3
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37388: NOP4
37392: PPUSH
37393: NOP4
37397: PUSH
37398: LD_INT 14
37400: EQUAL
37401: IFFALSE 37422
// points := [ 10 , 0 , 0 ] ;
37403: NOP4
37407: PUSH
37408: LD_INT 10
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37422: NOP4
37426: PPUSH
37427: NOP4
37431: PUSH
37432: LD_INT 11
37434: EQUAL
37435: IFFALSE 37456
// points := [ 30 , 10 , 5 ] ;
37437: NOP4
37441: PUSH
37442: LD_INT 30
37444: PUSH
37445: LD_INT 10
37447: PUSH
37448: LD_INT 5
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37456: NOP4
37460: PPUSH
37461: LD_INT 5
37463: PPUSH
37464: NOP4
37468: PUSH
37469: LD_INT 2
37471: EQUAL
37472: IFFALSE 37489
// bpoints := bpoints * 1.8 ;
37474: NOP4
37478: PUSH
37479: NOP4
37483: PUSH
37484: LD_REAL  1.80000000000000E+0000
37487: MUL
37488: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37489: NOP4
37493: PPUSH
37494: NOP4
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 4
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: IN
37517: PUSH
37518: NOP4
37522: PPUSH
37523: LD_INT 51
37525: PPUSH
37526: NOP4
37530: PUSH
37531: LD_INT 2
37533: EQUAL
37534: AND
37535: IFFALSE 37552
// bpoints := bpoints * 1.2 ;
37537: NOP4
37541: PUSH
37542: NOP4
37546: PUSH
37547: LD_REAL  1.20000000000000E+0000
37550: MUL
37551: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37552: NOP4
37556: PPUSH
37557: NOP4
37561: PUSH
37562: LD_INT 5
37564: PUSH
37565: LD_INT 7
37567: PUSH
37568: LD_INT 9
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: IN
37576: PUSH
37577: NOP4
37581: PPUSH
37582: LD_INT 52
37584: PPUSH
37585: NOP4
37589: PUSH
37590: LD_INT 2
37592: EQUAL
37593: AND
37594: IFFALSE 37611
// bpoints := bpoints * 1.5 ;
37596: NOP4
37600: PUSH
37601: NOP4
37605: PUSH
37606: LD_REAL  1.50000000000000E+0000
37609: MUL
37610: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37611: NOP4
37615: PPUSH
37616: LD_INT 66
37618: PPUSH
37619: NOP4
37623: PUSH
37624: LD_INT 2
37626: EQUAL
37627: IFFALSE 37644
// bpoints := bpoints * 1.1 ;
37629: NOP4
37633: PUSH
37634: NOP4
37638: PUSH
37639: LD_REAL  1.10000000000000E+0000
37642: MUL
37643: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37644: NOP4
37648: PUSH
37649: NOP4
37653: PUSH
37654: NOP4
37658: PPUSH
37659: LD_INT 1
37661: PPUSH
37662: NOP4
37666: PUSH
37667: LD_REAL  1.15000000000000E+0000
37670: MUL
37671: MUL
37672: ST_TO_ADDR
// end ; unit_vehicle :
37673: GO 38497
37675: LD_INT 2
37677: DOUBLE
37678: EQUAL
37679: IFTRUE 37683
37681: GO 38485
37683: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37684: NOP4
37688: PPUSH
37689: NOP4
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 42
37699: PUSH
37700: LD_INT 24
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: IN
37708: IFFALSE 37729
// points := [ 25 , 5 , 3 ] ;
37710: NOP4
37714: PUSH
37715: LD_INT 25
37717: PUSH
37718: LD_INT 5
37720: PUSH
37721: LD_INT 3
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37729: NOP4
37733: PPUSH
37734: NOP4
37738: PUSH
37739: LD_INT 4
37741: PUSH
37742: LD_INT 43
37744: PUSH
37745: LD_INT 25
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: IN
37753: IFFALSE 37774
// points := [ 40 , 15 , 5 ] ;
37755: NOP4
37759: PUSH
37760: LD_INT 40
37762: PUSH
37763: LD_INT 15
37765: PUSH
37766: LD_INT 5
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37774: NOP4
37778: PPUSH
37779: NOP4
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: LD_INT 23
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: IN
37794: IFFALSE 37815
// points := [ 7 , 25 , 8 ] ;
37796: NOP4
37800: PUSH
37801: LD_INT 7
37803: PUSH
37804: LD_INT 25
37806: PUSH
37807: LD_INT 8
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37815: NOP4
37819: PPUSH
37820: NOP4
37824: PUSH
37825: LD_INT 5
37827: PUSH
37828: LD_INT 27
37830: PUSH
37831: LD_INT 44
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: IN
37839: IFFALSE 37860
// points := [ 14 , 50 , 16 ] ;
37841: NOP4
37845: PUSH
37846: LD_INT 14
37848: PUSH
37849: LD_INT 50
37851: PUSH
37852: LD_INT 16
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37860: NOP4
37864: PPUSH
37865: NOP4
37869: PUSH
37870: LD_INT 6
37872: PUSH
37873: LD_INT 46
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: IN
37880: IFFALSE 37901
// points := [ 32 , 120 , 70 ] ;
37882: NOP4
37886: PUSH
37887: LD_INT 32
37889: PUSH
37890: LD_INT 120
37892: PUSH
37893: LD_INT 70
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37901: NOP4
37905: PPUSH
37906: NOP4
37910: PUSH
37911: LD_INT 7
37913: PUSH
37914: LD_INT 28
37916: PUSH
37917: LD_INT 45
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: IN
37925: IFFALSE 37946
// points := [ 35 , 20 , 45 ] ;
37927: NOP4
37931: PUSH
37932: LD_INT 35
37934: PUSH
37935: LD_INT 20
37937: PUSH
37938: LD_INT 45
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37946: NOP4
37950: PPUSH
37951: NOP4
37955: PUSH
37956: LD_INT 47
37958: PUSH
37959: EMPTY
37960: LIST
37961: IN
37962: IFFALSE 37983
// points := [ 67 , 45 , 75 ] ;
37964: NOP4
37968: PUSH
37969: LD_INT 67
37971: PUSH
37972: LD_INT 45
37974: PUSH
37975: LD_INT 75
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37983: NOP4
37987: PPUSH
37988: NOP4
37992: PUSH
37993: LD_INT 26
37995: PUSH
37996: EMPTY
37997: LIST
37998: IN
37999: IFFALSE 38020
// points := [ 120 , 30 , 80 ] ;
38001: NOP4
38005: PUSH
38006: LD_INT 120
38008: PUSH
38009: LD_INT 30
38011: PUSH
38012: LD_INT 80
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38020: NOP4
38024: PPUSH
38025: NOP4
38029: PUSH
38030: LD_INT 22
38032: PUSH
38033: EMPTY
38034: LIST
38035: IN
38036: IFFALSE 38057
// points := [ 40 , 1 , 1 ] ;
38038: NOP4
38042: PUSH
38043: LD_INT 40
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: LIST
38056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38057: NOP4
38061: PPUSH
38062: NOP4
38066: PUSH
38067: LD_INT 29
38069: PUSH
38070: EMPTY
38071: LIST
38072: IN
38073: IFFALSE 38094
// points := [ 70 , 200 , 400 ] ;
38075: NOP4
38079: PUSH
38080: LD_INT 70
38082: PUSH
38083: LD_INT 200
38085: PUSH
38086: LD_INT 400
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38094: NOP4
38098: PPUSH
38099: NOP4
38103: PUSH
38104: LD_INT 14
38106: PUSH
38107: LD_INT 53
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: IN
38114: IFFALSE 38135
// points := [ 40 , 10 , 20 ] ;
38116: NOP4
38120: PUSH
38121: LD_INT 40
38123: PUSH
38124: LD_INT 10
38126: PUSH
38127: LD_INT 20
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38135: NOP4
38139: PPUSH
38140: NOP4
38144: PUSH
38145: LD_INT 9
38147: PUSH
38148: EMPTY
38149: LIST
38150: IN
38151: IFFALSE 38172
// points := [ 5 , 70 , 20 ] ;
38153: NOP4
38157: PUSH
38158: LD_INT 5
38160: PUSH
38161: LD_INT 70
38163: PUSH
38164: LD_INT 20
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38172: NOP4
38176: PPUSH
38177: NOP4
38181: PUSH
38182: LD_INT 10
38184: PUSH
38185: EMPTY
38186: LIST
38187: IN
38188: IFFALSE 38209
// points := [ 35 , 110 , 70 ] ;
38190: NOP4
38194: PUSH
38195: LD_INT 35
38197: PUSH
38198: LD_INT 110
38200: PUSH
38201: LD_INT 70
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38209: NOP4
38213: PPUSH
38214: NOP4
38218: PUSH
38219: LD_INT 25
38221: EQUAL
38222: IFFALSE 38243
// points := [ 80 , 65 , 100 ] ;
38224: NOP4
38228: PUSH
38229: LD_INT 80
38231: PUSH
38232: LD_INT 65
38234: PUSH
38235: LD_INT 100
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38243: NOP4
38247: PPUSH
38248: NOP4
38252: PUSH
38253: LD_INT 1
38255: EQUAL
38256: IFFALSE 38291
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38258: NOP4
38262: PUSH
38263: NOP4
38267: PUSH
38268: NOP4
38272: PPUSH
38273: NOP4
38277: PPUSH
38278: LD_INT 3
38280: PPUSH
38281: NOP4
38285: PUSH
38286: LD_INT 4
38288: MUL
38289: MUL
38290: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38291: NOP4
38295: PPUSH
38296: NOP4
38300: PUSH
38301: LD_INT 2
38303: EQUAL
38304: IFFALSE 38355
// begin j := IsControledBy ( i ) ;
38306: NOP4
38310: PUSH
38311: NOP4
38315: PPUSH
38316: NOP4
38320: ST_TO_ADDR
// if j then
38321: NOP4
38325: IFFALSE 38355
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38327: NOP4
38331: PUSH
38332: NOP4
38336: PUSH
38337: NOP4
38341: PPUSH
38342: LD_INT 3
38344: PPUSH
38345: NOP4
38349: PUSH
38350: LD_INT 3
38352: MUL
38353: MUL
38354: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38355: NOP4
38359: PPUSH
38360: NOP4
38364: PUSH
38365: LD_INT 5
38367: PUSH
38368: LD_INT 6
38370: PUSH
38371: LD_INT 46
38373: PUSH
38374: LD_INT 44
38376: PUSH
38377: LD_INT 47
38379: PUSH
38380: LD_INT 45
38382: PUSH
38383: LD_INT 28
38385: PUSH
38386: LD_INT 7
38388: PUSH
38389: LD_INT 27
38391: PUSH
38392: LD_INT 29
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: IN
38407: PUSH
38408: NOP4
38412: PPUSH
38413: LD_INT 52
38415: PPUSH
38416: NOP4
38420: PUSH
38421: LD_INT 2
38423: EQUAL
38424: AND
38425: IFFALSE 38442
// bpoints := bpoints * 1.2 ;
38427: NOP4
38431: PUSH
38432: NOP4
38436: PUSH
38437: LD_REAL  1.20000000000000E+0000
38440: MUL
38441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38442: NOP4
38446: PPUSH
38447: NOP4
38451: PUSH
38452: LD_INT 6
38454: PUSH
38455: LD_INT 46
38457: PUSH
38458: LD_INT 47
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: IN
38466: IFFALSE 38483
// bpoints := bpoints * 1.2 ;
38468: NOP4
38472: PUSH
38473: NOP4
38477: PUSH
38478: LD_REAL  1.20000000000000E+0000
38481: MUL
38482: ST_TO_ADDR
// end ; unit_building :
38483: GO 38497
38485: LD_INT 3
38487: DOUBLE
38488: EQUAL
38489: IFTRUE 38493
38491: GO 38496
38493: POP
// ; end ;
38494: GO 38497
38496: POP
// for j = 1 to 3 do
38497: NOP4
38501: PUSH
38502: DOUBLE
38503: LD_INT 1
38505: DEC
38506: ST_TO_ADDR
38507: LD_INT 3
38509: PUSH
38510: FOR_TO
38511: IFFALSE 38564
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38513: NOP4
38517: PUSH
38518: NOP4
38522: PPUSH
38523: NOP4
38527: PPUSH
38528: NOP4
38532: PUSH
38533: NOP4
38537: ARRAY
38538: PUSH
38539: NOP4
38543: PUSH
38544: NOP4
38548: ARRAY
38549: PUSH
38550: NOP4
38554: MUL
38555: PLUS
38556: PPUSH
38557: NOP4
38561: ST_TO_ADDR
38562: GO 38510
38564: POP
38565: POP
// end ;
38566: GO 37049
38568: POP
38569: POP
// result := Replace ( result , 4 , tmp ) ;
38570: NOP4
38574: PUSH
38575: NOP4
38579: PPUSH
38580: LD_INT 4
38582: PPUSH
38583: NOP4
38587: PPUSH
38588: NOP4
38592: ST_TO_ADDR
// end ;
38593: LD_VAR 0 5
38597: RET
// export function DangerAtRange ( unit , range ) ; begin
38598: LD_INT 0
38600: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38601: NOP4
38605: PUSH
38606: NOP4
38610: PPUSH
38611: NOP4
38615: PPUSH
38616: NOP4
38620: PPUSH
38621: NOP4
38625: PPUSH
38626: NOP4
38630: PPUSH
38631: NOP4
38635: PPUSH
38636: NOP4
38640: PPUSH
38641: NOP4
38645: ST_TO_ADDR
// end ;
38646: LD_VAR 0 3
38650: RET
// export function DangerInArea ( side , area ) ; begin
38651: LD_INT 0
38653: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38654: NOP4
38658: PUSH
38659: NOP4
38663: PPUSH
38664: LD_INT 81
38666: PUSH
38667: NOP4
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PPUSH
38676: NOP4
38680: ST_TO_ADDR
// end ;
38681: LD_VAR 0 3
38685: RET
// export function IsExtension ( b ) ; begin
38686: LD_INT 0
38688: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38689: NOP4
38693: PUSH
38694: NOP4
38698: PUSH
38699: LD_INT 23
38701: PUSH
38702: LD_INT 20
38704: PUSH
38705: LD_INT 22
38707: PUSH
38708: LD_INT 17
38710: PUSH
38711: LD_INT 24
38713: PUSH
38714: LD_INT 21
38716: PUSH
38717: LD_INT 19
38719: PUSH
38720: LD_INT 16
38722: PUSH
38723: LD_INT 25
38725: PUSH
38726: LD_INT 18
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: IN
38741: ST_TO_ADDR
// end ;
38742: LD_VAR 0 2
38746: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
38747: LD_INT 0
38749: PPUSH
38750: PPUSH
38751: PPUSH
// result := [ ] ;
38752: NOP4
38756: PUSH
38757: EMPTY
38758: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38759: NOP4
38763: PUSH
38764: NOP4
38768: PPUSH
38769: LD_INT 21
38771: PUSH
38772: LD_INT 3
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PPUSH
38779: NOP4
38783: ST_TO_ADDR
// if not tmp then
38784: NOP4
38788: NOT
38789: IFFALSE 38793
// exit ;
38791: GO 38851
// for i in tmp do
38793: NOP4
38797: PUSH
38798: NOP4
38802: PUSH
38803: FOR_IN
38804: IFFALSE 38839
// if GetBase ( i ) <> base then
38806: NOP4
38810: PPUSH
38811: NOP4
38815: PUSH
38816: NOP4
38820: NONEQUAL
38821: IFFALSE 38837
// ComLinkToBase ( base , i ) ;
38823: NOP4
38827: PPUSH
38828: NOP4
38832: PPUSH
38833: NOP4
38837: GO 38803
38839: POP
38840: POP
// result := tmp ;
38841: NOP4
38845: PUSH
38846: NOP4
38850: ST_TO_ADDR
// end ;
38851: LD_VAR 0 3
38855: RET
// export function ComComplete ( unit , b ) ; var i ; begin
38856: LD_INT 0
38858: PPUSH
38859: PPUSH
// if BuildingStatus ( b ) = bs_build then
38860: NOP4
38864: PPUSH
38865: NOP4
38869: PUSH
38870: LD_INT 1
38872: EQUAL
38873: IFFALSE 38933
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38875: NOP4
38879: PPUSH
38880: LD_STRING h
38882: PUSH
38883: NOP4
38887: PPUSH
38888: NOP4
38892: PUSH
38893: NOP4
38897: PPUSH
38898: NOP4
38902: PUSH
38903: NOP4
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: EMPTY
38927: LIST
38928: PPUSH
38929: NOP4
// end ;
38933: LD_VAR 0 3
38937: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38938: LD_INT 0
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38946: NOP4
38950: NOT
38951: PUSH
38952: NOP4
38956: PPUSH
38957: NOP4
38961: PUSH
38962: LD_INT 2
38964: EQUAL
38965: NOT
38966: OR
38967: IFFALSE 38971
// exit ;
38969: GO 39287
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38971: NOP4
38975: PUSH
38976: LD_INT 22
38978: PUSH
38979: NOP4
38983: PPUSH
38984: NOP4
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 30
38998: PUSH
38999: LD_INT 36
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 34
39008: PUSH
39009: LD_INT 31
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PPUSH
39025: NOP4
39029: ST_TO_ADDR
// if not tmp then
39030: NOP4
39034: NOT
39035: IFFALSE 39039
// exit ;
39037: GO 39287
// result := [ ] ;
39039: NOP4
39043: PUSH
39044: EMPTY
39045: ST_TO_ADDR
// for i in tmp do
39046: NOP4
39050: PUSH
39051: NOP4
39055: PUSH
39056: FOR_IN
39057: IFFALSE 39128
// begin t := UnitsInside ( i ) ;
39059: NOP4
39063: PUSH
39064: NOP4
39068: PPUSH
39069: NOP4
39073: ST_TO_ADDR
// if t then
39074: NOP4
39078: IFFALSE 39126
// for j in t do
39080: NOP4
39084: PUSH
39085: NOP4
39089: PUSH
39090: FOR_IN
39091: IFFALSE 39124
// result := Insert ( result , result + 1 , j ) ;
39093: NOP4
39097: PUSH
39098: NOP4
39102: PPUSH
39103: NOP4
39107: PUSH
39108: LD_INT 1
39110: PLUS
39111: PPUSH
39112: NOP4
39116: PPUSH
39117: NOP4
39121: ST_TO_ADDR
39122: GO 39090
39124: POP
39125: POP
// end ;
39126: GO 39056
39128: POP
39129: POP
// if not result then
39130: NOP4
39134: NOT
39135: IFFALSE 39139
// exit ;
39137: GO 39287
// mech := result [ 1 ] ;
39139: NOP4
39143: PUSH
39144: NOP4
39148: PUSH
39149: LD_INT 1
39151: ARRAY
39152: ST_TO_ADDR
// if result > 1 then
39153: NOP4
39157: PUSH
39158: LD_INT 1
39160: GREATER
39161: IFFALSE 39273
// for i = 2 to result do
39163: NOP4
39167: PUSH
39168: DOUBLE
39169: LD_INT 2
39171: DEC
39172: ST_TO_ADDR
39173: NOP4
39177: PUSH
39178: FOR_TO
39179: IFFALSE 39271
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39181: NOP4
39185: PUSH
39186: NOP4
39190: PUSH
39191: NOP4
39195: ARRAY
39196: PPUSH
39197: LD_INT 3
39199: PPUSH
39200: NOP4
39204: PUSH
39205: NOP4
39209: PUSH
39210: NOP4
39214: ARRAY
39215: PPUSH
39216: NOP4
39220: MINUS
39221: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39222: NOP4
39226: PUSH
39227: NOP4
39231: PPUSH
39232: LD_INT 3
39234: PPUSH
39235: NOP4
39239: PUSH
39240: NOP4
39244: PPUSH
39245: NOP4
39249: MINUS
39250: GREATEREQUAL
39251: IFFALSE 39269
// mech := result [ i ] ;
39253: NOP4
39257: PUSH
39258: NOP4
39262: PUSH
39263: NOP4
39267: ARRAY
39268: ST_TO_ADDR
// end ;
39269: GO 39178
39271: POP
39272: POP
// ComLinkTo ( vehicle , mech ) ;
39273: NOP4
39277: PPUSH
39278: NOP4
39282: PPUSH
39283: NOP4
// end ;
39287: LD_VAR 0 2
39291: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39292: LD_INT 0
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
// result := [ ] ;
39307: NOP4
39311: PUSH
39312: EMPTY
39313: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39314: NOP4
39318: PPUSH
39319: NOP4
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: IN
39334: NOT
39335: IFFALSE 39339
// exit ;
39337: GO 40970
// if name then
39339: NOP4
39343: IFFALSE 39359
// SetBName ( base_dep , name ) ;
39345: NOP4
39349: PPUSH
39350: NOP4
39354: PPUSH
39355: NOP4
// base := GetBase ( base_dep ) ;
39359: NOP4
39363: PUSH
39364: NOP4
39368: PPUSH
39369: NOP4
39373: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39374: NOP4
39378: PUSH
39379: NOP4
39383: PPUSH
39384: NOP4
39388: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39389: NOP4
39393: PUSH
39394: NOP4
39398: PPUSH
39399: NOP4
39403: ST_TO_ADDR
// if sources then
39404: NOP4
39408: IFFALSE 39455
// for i = 1 to 3 do
39410: NOP4
39414: PUSH
39415: DOUBLE
39416: LD_INT 1
39418: DEC
39419: ST_TO_ADDR
39420: LD_INT 3
39422: PUSH
39423: FOR_TO
39424: IFFALSE 39453
// AddResourceType ( base , i , sources [ i ] ) ;
39426: NOP4
39430: PPUSH
39431: NOP4
39435: PPUSH
39436: NOP4
39440: PUSH
39441: NOP4
39445: ARRAY
39446: PPUSH
39447: NOP4
39451: GO 39423
39453: POP
39454: POP
// buildings := GetBaseBuildings ( base , area ) ;
39455: NOP4
39459: PUSH
39460: NOP4
39464: PPUSH
39465: NOP4
39469: PPUSH
39470: NOP4
39474: ST_TO_ADDR
// InitHc ;
39475: NOP4
// InitUc ;
39479: NOP4
// uc_side := side ;
39483: LD_ADDR_OWVAR 20
39487: PUSH
39488: NOP4
39492: ST_TO_ADDR
// uc_nation := nation ;
39493: LD_ADDR_OWVAR 21
39497: PUSH
39498: NOP4
39502: ST_TO_ADDR
// if buildings then
39503: NOP4
39507: IFFALSE 40829
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39509: NOP4
39513: PUSH
39514: NOP4
39518: PPUSH
39519: LD_INT 2
39521: PUSH
39522: LD_INT 30
39524: PUSH
39525: LD_INT 29
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 30
39534: PUSH
39535: LD_INT 30
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: LIST
39546: PPUSH
39547: NOP4
39551: ST_TO_ADDR
// if tmp then
39552: NOP4
39556: IFFALSE 39604
// for i in tmp do
39558: NOP4
39562: PUSH
39563: NOP4
39567: PUSH
39568: FOR_IN
39569: IFFALSE 39602
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39571: NOP4
39575: PPUSH
39576: NOP4
39580: PPUSH
39581: NOP4
39585: PPUSH
39586: NOP4
39590: PPUSH
39591: NOP4
39595: PPUSH
39596: NOP4
39600: GO 39568
39602: POP
39603: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39604: NOP4
39608: PPUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 30
39614: PUSH
39615: LD_INT 32
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 30
39624: PUSH
39625: LD_INT 33
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: PPUSH
39637: NOP4
39641: IFFALSE 39729
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39643: NOP4
39647: PUSH
39648: NOP4
39652: PPUSH
39653: LD_INT 2
39655: PUSH
39656: LD_INT 30
39658: PUSH
39659: LD_INT 32
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 30
39668: PUSH
39669: LD_INT 33
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: PPUSH
39681: NOP4
39685: PUSH
39686: FOR_IN
39687: IFFALSE 39727
// begin if not GetBWeapon ( i ) then
39689: NOP4
39693: PPUSH
39694: NOP4
39698: NOT
39699: IFFALSE 39725
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39701: NOP4
39705: PPUSH
39706: NOP4
39710: PPUSH
39711: NOP4
39715: PPUSH
39716: NOP4
39720: PPUSH
39721: NOP4
// end ;
39725: GO 39686
39727: POP
39728: POP
// end ; for i = 1 to personel do
39729: NOP4
39733: PUSH
39734: DOUBLE
39735: LD_INT 1
39737: DEC
39738: ST_TO_ADDR
39739: NOP4
39743: PUSH
39744: FOR_TO
39745: IFFALSE 40809
// begin if i > 4 then
39747: NOP4
39751: PUSH
39752: LD_INT 4
39754: GREATER
39755: IFFALSE 39759
// break ;
39757: GO 40809
// case i of 1 :
39759: NOP4
39763: PUSH
39764: LD_INT 1
39766: DOUBLE
39767: EQUAL
39768: IFTRUE 39772
39770: GO 39852
39772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39773: NOP4
39777: PUSH
39778: NOP4
39782: PPUSH
39783: LD_INT 22
39785: PUSH
39786: NOP4
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 58
39797: PUSH
39798: EMPTY
39799: LIST
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: LD_INT 30
39806: PUSH
39807: LD_INT 32
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 30
39816: PUSH
39817: LD_INT 4
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 30
39826: PUSH
39827: LD_INT 5
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: PPUSH
39845: NOP4
39849: ST_TO_ADDR
39850: GO 40074
39852: LD_INT 2
39854: DOUBLE
39855: EQUAL
39856: IFTRUE 39860
39858: GO 39922
39860: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39861: NOP4
39865: PUSH
39866: NOP4
39870: PPUSH
39871: LD_INT 22
39873: PUSH
39874: NOP4
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: LD_INT 30
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 30
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PPUSH
39915: NOP4
39919: ST_TO_ADDR
39920: GO 40074
39922: LD_INT 3
39924: DOUBLE
39925: EQUAL
39926: IFTRUE 39930
39928: GO 39992
39930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39931: NOP4
39935: PUSH
39936: NOP4
39940: PPUSH
39941: LD_INT 22
39943: PUSH
39944: NOP4
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: LD_INT 30
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 30
39968: PUSH
39969: LD_INT 3
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PPUSH
39985: NOP4
39989: ST_TO_ADDR
39990: GO 40074
39992: LD_INT 4
39994: DOUBLE
39995: EQUAL
39996: IFTRUE 40000
39998: GO 40073
40000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40001: NOP4
40005: PUSH
40006: NOP4
40010: PPUSH
40011: LD_INT 22
40013: PUSH
40014: NOP4
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 30
40028: PUSH
40029: LD_INT 6
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 30
40038: PUSH
40039: LD_INT 7
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 30
40048: PUSH
40049: LD_INT 8
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PPUSH
40066: NOP4
40070: ST_TO_ADDR
40071: GO 40074
40073: POP
// if i = 1 then
40074: NOP4
40078: PUSH
40079: LD_INT 1
40081: EQUAL
40082: IFFALSE 40193
// begin tmp := [ ] ;
40084: NOP4
40088: PUSH
40089: EMPTY
40090: ST_TO_ADDR
// for j in f do
40091: NOP4
40095: PUSH
40096: NOP4
40100: PUSH
40101: FOR_IN
40102: IFFALSE 40175
// if GetBType ( j ) = b_bunker then
40104: NOP4
40108: PPUSH
40109: NOP4
40113: PUSH
40114: LD_INT 32
40116: EQUAL
40117: IFFALSE 40144
// tmp := Insert ( tmp , 1 , j ) else
40119: NOP4
40123: PUSH
40124: NOP4
40128: PPUSH
40129: LD_INT 1
40131: PPUSH
40132: NOP4
40136: PPUSH
40137: NOP4
40141: ST_TO_ADDR
40142: GO 40173
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40144: NOP4
40148: PUSH
40149: NOP4
40153: PPUSH
40154: NOP4
40158: PUSH
40159: LD_INT 1
40161: PLUS
40162: PPUSH
40163: NOP4
40167: PPUSH
40168: NOP4
40172: ST_TO_ADDR
40173: GO 40101
40175: POP
40176: POP
// if tmp then
40177: NOP4
40181: IFFALSE 40193
// f := tmp ;
40183: NOP4
40187: PUSH
40188: NOP4
40192: ST_TO_ADDR
// end ; x := personel [ i ] ;
40193: NOP4
40197: PUSH
40198: NOP4
40202: PUSH
40203: NOP4
40207: ARRAY
40208: ST_TO_ADDR
// if x = - 1 then
40209: NOP4
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: EQUAL
40218: IFFALSE 40427
// begin for j in f do
40220: NOP4
40224: PUSH
40225: NOP4
40229: PUSH
40230: FOR_IN
40231: IFFALSE 40423
// repeat InitHc ;
40233: NOP4
// if GetBType ( j ) = b_barracks then
40237: NOP4
40241: PPUSH
40242: NOP4
40246: PUSH
40247: LD_INT 5
40249: EQUAL
40250: IFFALSE 40320
// begin if UnitsInside ( j ) < 3 then
40252: NOP4
40256: PPUSH
40257: NOP4
40261: PUSH
40262: LD_INT 3
40264: LESS
40265: IFFALSE 40301
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40267: LD_INT 0
40269: PPUSH
40270: LD_INT 5
40272: PUSH
40273: LD_INT 8
40275: PUSH
40276: LD_INT 9
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: PUSH
40284: NOP4
40288: ARRAY
40289: PPUSH
40290: NOP4
40294: PPUSH
40295: NOP4
40299: GO 40318
// PrepareHuman ( false , i , skill ) ;
40301: LD_INT 0
40303: PPUSH
40304: NOP4
40308: PPUSH
40309: NOP4
40313: PPUSH
40314: NOP4
// end else
40318: GO 40337
// PrepareHuman ( false , i , skill ) ;
40320: LD_INT 0
40322: PPUSH
40323: NOP4
40327: PPUSH
40328: NOP4
40332: PPUSH
40333: NOP4
// un := CreateHuman ;
40337: NOP4
40341: PUSH
40342: NOP4
40346: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40347: NOP4
40351: PUSH
40352: NOP4
40356: PPUSH
40357: LD_INT 1
40359: PPUSH
40360: NOP4
40364: PPUSH
40365: NOP4
40369: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40370: NOP4
40374: PPUSH
40375: NOP4
40379: PPUSH
40380: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40384: NOP4
40388: PPUSH
40389: NOP4
40393: PUSH
40394: LD_INT 6
40396: EQUAL
40397: PUSH
40398: NOP4
40402: PPUSH
40403: NOP4
40407: PUSH
40408: LD_INT 32
40410: PUSH
40411: LD_INT 31
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: IN
40418: OR
40419: IFFALSE 40233
40421: GO 40230
40423: POP
40424: POP
// end else
40425: GO 40807
// for j = 1 to x do
40427: NOP4
40431: PUSH
40432: DOUBLE
40433: LD_INT 1
40435: DEC
40436: ST_TO_ADDR
40437: NOP4
40441: PUSH
40442: FOR_TO
40443: IFFALSE 40805
// begin InitHc ;
40445: NOP4
// if not f then
40449: NOP4
40453: NOT
40454: IFFALSE 40543
// begin PrepareHuman ( false , i , skill ) ;
40456: LD_INT 0
40458: PPUSH
40459: NOP4
40463: PPUSH
40464: NOP4
40468: PPUSH
40469: NOP4
// un := CreateHuman ;
40473: NOP4
40477: PUSH
40478: NOP4
40482: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40483: NOP4
40487: PUSH
40488: NOP4
40492: PPUSH
40493: LD_INT 1
40495: PPUSH
40496: NOP4
40500: PPUSH
40501: NOP4
40505: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40506: NOP4
40510: PPUSH
40511: NOP4
40515: PPUSH
40516: NOP4
40520: PPUSH
40521: NOP4
40525: PPUSH
40526: NOP4
40530: PPUSH
40531: LD_INT 10
40533: PPUSH
40534: LD_INT 0
40536: PPUSH
40537: NOP4
// continue ;
40541: GO 40442
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40543: NOP4
40547: PUSH
40548: LD_INT 1
40550: ARRAY
40551: PPUSH
40552: NOP4
40556: PUSH
40557: NOP4
40561: PUSH
40562: LD_INT 1
40564: ARRAY
40565: PPUSH
40566: NOP4
40570: PUSH
40571: LD_INT 32
40573: PUSH
40574: LD_INT 31
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: IN
40581: AND
40582: PUSH
40583: NOP4
40587: PUSH
40588: LD_INT 1
40590: ARRAY
40591: PPUSH
40592: NOP4
40596: PUSH
40597: LD_INT 6
40599: EQUAL
40600: OR
40601: IFFALSE 40621
// f := Delete ( f , 1 ) ;
40603: NOP4
40607: PUSH
40608: NOP4
40612: PPUSH
40613: LD_INT 1
40615: PPUSH
40616: NOP4
40620: ST_TO_ADDR
// if not f then
40621: NOP4
40625: NOT
40626: IFFALSE 40644
// begin x := x + 2 ;
40628: NOP4
40632: PUSH
40633: NOP4
40637: PUSH
40638: LD_INT 2
40640: PLUS
40641: ST_TO_ADDR
// continue ;
40642: GO 40442
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40644: NOP4
40648: PUSH
40649: LD_INT 1
40651: ARRAY
40652: PPUSH
40653: NOP4
40657: PUSH
40658: LD_INT 5
40660: EQUAL
40661: IFFALSE 40735
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40663: NOP4
40667: PUSH
40668: LD_INT 1
40670: ARRAY
40671: PPUSH
40672: NOP4
40676: PUSH
40677: LD_INT 3
40679: LESS
40680: IFFALSE 40716
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40682: LD_INT 0
40684: PPUSH
40685: LD_INT 5
40687: PUSH
40688: LD_INT 8
40690: PUSH
40691: LD_INT 9
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: PUSH
40699: NOP4
40703: ARRAY
40704: PPUSH
40705: NOP4
40709: PPUSH
40710: NOP4
40714: GO 40733
// PrepareHuman ( false , i , skill ) ;
40716: LD_INT 0
40718: PPUSH
40719: NOP4
40723: PPUSH
40724: NOP4
40728: PPUSH
40729: NOP4
// end else
40733: GO 40752
// PrepareHuman ( false , i , skill ) ;
40735: LD_INT 0
40737: PPUSH
40738: NOP4
40742: PPUSH
40743: NOP4
40747: PPUSH
40748: NOP4
// un := CreateHuman ;
40752: NOP4
40756: PUSH
40757: NOP4
40761: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40762: NOP4
40766: PUSH
40767: NOP4
40771: PPUSH
40772: LD_INT 1
40774: PPUSH
40775: NOP4
40779: PPUSH
40780: NOP4
40784: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40785: NOP4
40789: PPUSH
40790: NOP4
40794: PUSH
40795: LD_INT 1
40797: ARRAY
40798: PPUSH
40799: NOP4
// end ;
40803: GO 40442
40805: POP
40806: POP
// end ;
40807: GO 39744
40809: POP
40810: POP
// result := result ^ buildings ;
40811: NOP4
40815: PUSH
40816: NOP4
40820: PUSH
40821: NOP4
40825: ADD
40826: ST_TO_ADDR
// end else
40827: GO 40970
// begin for i = 1 to personel do
40829: NOP4
40833: PUSH
40834: DOUBLE
40835: LD_INT 1
40837: DEC
40838: ST_TO_ADDR
40839: NOP4
40843: PUSH
40844: FOR_TO
40845: IFFALSE 40968
// begin if i > 4 then
40847: NOP4
40851: PUSH
40852: LD_INT 4
40854: GREATER
40855: IFFALSE 40859
// break ;
40857: GO 40968
// x := personel [ i ] ;
40859: NOP4
40863: PUSH
40864: NOP4
40868: PUSH
40869: NOP4
40873: ARRAY
40874: ST_TO_ADDR
// if x = - 1 then
40875: NOP4
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: EQUAL
40884: IFFALSE 40888
// continue ;
40886: GO 40844
// PrepareHuman ( false , i , skill ) ;
40888: LD_INT 0
40890: PPUSH
40891: NOP4
40895: PPUSH
40896: NOP4
40900: PPUSH
40901: NOP4
// un := CreateHuman ;
40905: NOP4
40909: PUSH
40910: NOP4
40914: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40915: NOP4
40919: PPUSH
40920: NOP4
40924: PPUSH
40925: NOP4
40929: PPUSH
40930: NOP4
40934: PPUSH
40935: NOP4
40939: PPUSH
40940: LD_INT 10
40942: PPUSH
40943: LD_INT 0
40945: PPUSH
40946: NOP4
// result := result ^ un ;
40950: NOP4
40954: PUSH
40955: NOP4
40959: PUSH
40960: NOP4
40964: ADD
40965: ST_TO_ADDR
// end ;
40966: GO 40844
40968: POP
40969: POP
// end ; end ;
40970: LD_VAR 0 7
40974: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40975: LD_INT 0
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
// result := false ;
40993: NOP4
40997: PUSH
40998: LD_INT 0
41000: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41001: NOP4
41005: NOT
41006: PUSH
41007: NOP4
41011: PPUSH
41012: NOP4
41016: PUSH
41017: LD_INT 32
41019: PUSH
41020: LD_INT 33
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: IN
41027: NOT
41028: OR
41029: IFFALSE 41033
// exit ;
41031: GO 42169
// nat := GetNation ( tower ) ;
41033: NOP4
41037: PUSH
41038: NOP4
41042: PPUSH
41043: NOP4
41047: ST_TO_ADDR
// side := GetSide ( tower ) ;
41048: NOP4
41052: PUSH
41053: NOP4
41057: PPUSH
41058: NOP4
41062: ST_TO_ADDR
// x := GetX ( tower ) ;
41063: NOP4
41067: PUSH
41068: NOP4
41072: PPUSH
41073: NOP4
41077: ST_TO_ADDR
// y := GetY ( tower ) ;
41078: NOP4
41082: PUSH
41083: NOP4
41087: PPUSH
41088: NOP4
41092: ST_TO_ADDR
// if not x or not y then
41093: NOP4
41097: NOT
41098: PUSH
41099: NOP4
41103: NOT
41104: OR
41105: IFFALSE 41109
// exit ;
41107: GO 42169
// weapon := 0 ;
41109: NOP4
41113: PUSH
41114: LD_INT 0
41116: ST_TO_ADDR
// fac_list := [ ] ;
41117: NOP4
41121: PUSH
41122: EMPTY
41123: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41124: NOP4
41128: PUSH
41129: NOP4
41133: PPUSH
41134: NOP4
41138: PPUSH
41139: NOP4
41143: PPUSH
41144: NOP4
41148: PPUSH
41149: LD_INT 30
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PPUSH
41159: NOP4
41163: ST_TO_ADDR
// if not factories then
41164: NOP4
41168: NOT
41169: IFFALSE 41173
// exit ;
41171: GO 42169
// for i in factories do
41173: NOP4
41177: PUSH
41178: NOP4
41182: PUSH
41183: FOR_IN
41184: IFFALSE 41209
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41186: NOP4
41190: PUSH
41191: NOP4
41195: PUSH
41196: NOP4
41200: PPUSH
41201: NOP4
41205: UNION
41206: ST_TO_ADDR
41207: GO 41183
41209: POP
41210: POP
// if not fac_list then
41211: NOP4
41215: NOT
41216: IFFALSE 41220
// exit ;
41218: GO 42169
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41220: NOP4
41224: PUSH
41225: LD_INT 4
41227: PUSH
41228: LD_INT 5
41230: PUSH
41231: LD_INT 9
41233: PUSH
41234: LD_INT 10
41236: PUSH
41237: LD_INT 6
41239: PUSH
41240: LD_INT 7
41242: PUSH
41243: LD_INT 11
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 27
41257: PUSH
41258: LD_INT 28
41260: PUSH
41261: LD_INT 26
41263: PUSH
41264: LD_INT 30
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 43
41275: PUSH
41276: LD_INT 44
41278: PUSH
41279: LD_INT 46
41281: PUSH
41282: LD_INT 45
41284: PUSH
41285: LD_INT 47
41287: PUSH
41288: LD_INT 49
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: LIST
41303: PUSH
41304: NOP4
41308: ARRAY
41309: ST_TO_ADDR
// for i in list do
41310: NOP4
41314: PUSH
41315: NOP4
41319: PUSH
41320: FOR_IN
41321: IFFALSE 41354
// if not i in fac_list then
41323: NOP4
41327: PUSH
41328: NOP4
41332: IN
41333: NOT
41334: IFFALSE 41352
// list := list diff i ;
41336: NOP4
41340: PUSH
41341: NOP4
41345: PUSH
41346: NOP4
41350: DIFF
41351: ST_TO_ADDR
41352: GO 41320
41354: POP
41355: POP
// if not list then
41356: NOP4
41360: NOT
41361: IFFALSE 41365
// exit ;
41363: GO 42169
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41365: NOP4
41369: PUSH
41370: LD_INT 3
41372: EQUAL
41373: PUSH
41374: LD_INT 49
41376: PUSH
41377: NOP4
41381: IN
41382: AND
41383: PUSH
41384: LD_INT 31
41386: PPUSH
41387: NOP4
41391: PPUSH
41392: NOP4
41396: PUSH
41397: LD_INT 2
41399: EQUAL
41400: AND
41401: IFFALSE 41461
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41403: LD_INT 22
41405: PUSH
41406: NOP4
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 35
41417: PUSH
41418: LD_INT 49
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 91
41427: PUSH
41428: NOP4
41432: PUSH
41433: LD_INT 10
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: LIST
41445: PPUSH
41446: NOP4
41450: NOT
41451: IFFALSE 41461
// weapon := ru_time_lapser ;
41453: NOP4
41457: PUSH
41458: LD_INT 49
41460: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41461: NOP4
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: IN
41476: PUSH
41477: LD_INT 11
41479: PUSH
41480: NOP4
41484: IN
41485: PUSH
41486: LD_INT 30
41488: PUSH
41489: NOP4
41493: IN
41494: OR
41495: AND
41496: PUSH
41497: LD_INT 6
41499: PPUSH
41500: NOP4
41504: PPUSH
41505: NOP4
41509: PUSH
41510: LD_INT 2
41512: EQUAL
41513: AND
41514: IFFALSE 41679
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41516: LD_INT 22
41518: PUSH
41519: NOP4
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 35
41533: PUSH
41534: LD_INT 11
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 35
41543: PUSH
41544: LD_INT 30
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 91
41558: PUSH
41559: NOP4
41563: PUSH
41564: LD_INT 18
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: PPUSH
41577: NOP4
41581: NOT
41582: PUSH
41583: LD_INT 22
41585: PUSH
41586: NOP4
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 30
41600: PUSH
41601: LD_INT 32
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 30
41610: PUSH
41611: LD_INT 33
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 91
41625: PUSH
41626: NOP4
41630: PUSH
41631: LD_INT 12
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: PUSH
41644: EMPTY
41645: LIST
41646: PPUSH
41647: NOP4
41651: PUSH
41652: LD_INT 2
41654: GREATER
41655: AND
41656: IFFALSE 41679
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41658: NOP4
41662: PUSH
41663: LD_INT 11
41665: PUSH
41666: LD_INT 30
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: NOP4
41677: ARRAY
41678: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41679: NOP4
41683: NOT
41684: PUSH
41685: LD_INT 40
41687: PPUSH
41688: NOP4
41692: PPUSH
41693: NOP4
41697: PUSH
41698: LD_INT 2
41700: EQUAL
41701: AND
41702: PUSH
41703: LD_INT 7
41705: PUSH
41706: NOP4
41710: IN
41711: PUSH
41712: LD_INT 28
41714: PUSH
41715: NOP4
41719: IN
41720: OR
41721: PUSH
41722: LD_INT 45
41724: PUSH
41725: NOP4
41729: IN
41730: OR
41731: AND
41732: IFFALSE 41986
// begin hex := GetHexInfo ( x , y ) ;
41734: NOP4
41738: PUSH
41739: NOP4
41743: PPUSH
41744: NOP4
41748: PPUSH
41749: NOP4
41753: ST_TO_ADDR
// if hex [ 1 ] then
41754: NOP4
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: IFFALSE 41766
// exit ;
41764: GO 42169
// height := hex [ 2 ] ;
41766: NOP4
41770: PUSH
41771: NOP4
41775: PUSH
41776: LD_INT 2
41778: ARRAY
41779: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41780: NOP4
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: LD_INT 5
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: ST_TO_ADDR
// for i in tmp do
41803: NOP4
41807: PUSH
41808: NOP4
41812: PUSH
41813: FOR_IN
41814: IFFALSE 41984
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41816: NOP4
41820: PUSH
41821: NOP4
41825: PPUSH
41826: NOP4
41830: PPUSH
41831: LD_INT 5
41833: PPUSH
41834: NOP4
41838: PUSH
41839: NOP4
41843: PPUSH
41844: NOP4
41848: PPUSH
41849: LD_INT 5
41851: PPUSH
41852: NOP4
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41861: NOP4
41865: PUSH
41866: LD_INT 1
41868: ARRAY
41869: PPUSH
41870: NOP4
41874: PUSH
41875: LD_INT 2
41877: ARRAY
41878: PPUSH
41879: NOP4
41883: IFFALSE 41982
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41885: NOP4
41889: PUSH
41890: NOP4
41894: PUSH
41895: LD_INT 1
41897: ARRAY
41898: PPUSH
41899: NOP4
41903: PUSH
41904: LD_INT 2
41906: ARRAY
41907: PPUSH
41908: NOP4
41912: ST_TO_ADDR
// if hex [ 1 ] then
41913: NOP4
41917: PUSH
41918: LD_INT 1
41920: ARRAY
41921: IFFALSE 41925
// continue ;
41923: GO 41813
// h := hex [ 2 ] ;
41925: NOP4
41929: PUSH
41930: NOP4
41934: PUSH
41935: LD_INT 2
41937: ARRAY
41938: ST_TO_ADDR
// if h + 7 < height then
41939: NOP4
41943: PUSH
41944: LD_INT 7
41946: PLUS
41947: PUSH
41948: NOP4
41952: LESS
41953: IFFALSE 41982
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41955: NOP4
41959: PUSH
41960: LD_INT 7
41962: PUSH
41963: LD_INT 28
41965: PUSH
41966: LD_INT 45
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: LIST
41973: PUSH
41974: NOP4
41978: ARRAY
41979: ST_TO_ADDR
// break ;
41980: GO 41984
// end ; end ; end ;
41982: GO 41813
41984: POP
41985: POP
// end ; if not weapon then
41986: NOP4
41990: NOT
41991: IFFALSE 42051
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41993: NOP4
41997: PUSH
41998: NOP4
42002: PUSH
42003: LD_INT 11
42005: PUSH
42006: LD_INT 30
42008: PUSH
42009: LD_INT 49
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: DIFF
42017: ST_TO_ADDR
// if not list then
42018: NOP4
42022: NOT
42023: IFFALSE 42027
// exit ;
42025: GO 42169
// weapon := list [ rand ( 1 , list ) ] ;
42027: NOP4
42031: PUSH
42032: NOP4
42036: PUSH
42037: LD_INT 1
42039: PPUSH
42040: NOP4
42044: PPUSH
42045: NOP4
42049: ARRAY
42050: ST_TO_ADDR
// end ; if weapon then
42051: NOP4
42055: IFFALSE 42169
// begin tmp := CostOfWeapon ( weapon ) ;
42057: NOP4
42061: PUSH
42062: NOP4
42066: PPUSH
42067: NOP4
42071: ST_TO_ADDR
// j := GetBase ( tower ) ;
42072: NOP4
42076: PUSH
42077: NOP4
42081: PPUSH
42082: NOP4
42086: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42087: NOP4
42091: PPUSH
42092: LD_INT 1
42094: PPUSH
42095: NOP4
42099: PUSH
42100: NOP4
42104: PUSH
42105: LD_INT 1
42107: ARRAY
42108: GREATEREQUAL
42109: PUSH
42110: NOP4
42114: PPUSH
42115: LD_INT 2
42117: PPUSH
42118: NOP4
42122: PUSH
42123: NOP4
42127: PUSH
42128: LD_INT 2
42130: ARRAY
42131: GREATEREQUAL
42132: AND
42133: PUSH
42134: NOP4
42138: PPUSH
42139: LD_INT 3
42141: PPUSH
42142: NOP4
42146: PUSH
42147: NOP4
42151: PUSH
42152: LD_INT 3
42154: ARRAY
42155: GREATEREQUAL
42156: AND
42157: IFFALSE 42169
// result := weapon ;
42159: NOP4
42163: PUSH
42164: NOP4
42168: ST_TO_ADDR
// end ; end ;
42169: LD_VAR 0 3
42173: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42174: LD_INT 0
42176: PPUSH
42177: PPUSH
// result := true ;
42178: NOP4
42182: PUSH
42183: LD_INT 1
42185: ST_TO_ADDR
// if array1 = array2 then
42186: NOP4
42190: PUSH
42191: NOP4
42195: EQUAL
42196: IFFALSE 42256
// begin for i = 1 to array1 do
42198: NOP4
42202: PUSH
42203: DOUBLE
42204: LD_INT 1
42206: DEC
42207: ST_TO_ADDR
42208: NOP4
42212: PUSH
42213: FOR_TO
42214: IFFALSE 42252
// if array1 [ i ] <> array2 [ i ] then
42216: NOP4
42220: PUSH
42221: NOP4
42225: ARRAY
42226: PUSH
42227: NOP4
42231: PUSH
42232: NOP4
42236: ARRAY
42237: NONEQUAL
42238: IFFALSE 42250
// begin result := false ;
42240: NOP4
42244: PUSH
42245: LD_INT 0
42247: ST_TO_ADDR
// break ;
42248: GO 42252
// end ;
42250: GO 42213
42252: POP
42253: POP
// end else
42254: GO 42264
// result := false ;
42256: NOP4
42260: PUSH
42261: LD_INT 0
42263: ST_TO_ADDR
// end ;
42264: LD_VAR 0 3
42268: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42269: LD_INT 0
42271: PPUSH
42272: PPUSH
42273: PPUSH
// pom := GetBase ( fac ) ;
42274: NOP4
42278: PUSH
42279: NOP4
42283: PPUSH
42284: NOP4
42288: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42289: NOP4
42293: PUSH
42294: NOP4
42298: PUSH
42299: LD_INT 1
42301: ARRAY
42302: PPUSH
42303: NOP4
42307: PUSH
42308: LD_INT 2
42310: ARRAY
42311: PPUSH
42312: NOP4
42316: PUSH
42317: LD_INT 3
42319: ARRAY
42320: PPUSH
42321: NOP4
42325: PUSH
42326: LD_INT 4
42328: ARRAY
42329: PPUSH
42330: NOP4
42334: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42335: NOP4
42339: PUSH
42340: NOP4
42344: PPUSH
42345: LD_INT 1
42347: PPUSH
42348: NOP4
42352: PUSH
42353: NOP4
42357: PUSH
42358: LD_INT 1
42360: ARRAY
42361: GREATEREQUAL
42362: PUSH
42363: NOP4
42367: PPUSH
42368: LD_INT 2
42370: PPUSH
42371: NOP4
42375: PUSH
42376: NOP4
42380: PUSH
42381: LD_INT 2
42383: ARRAY
42384: GREATEREQUAL
42385: AND
42386: PUSH
42387: NOP4
42391: PPUSH
42392: LD_INT 3
42394: PPUSH
42395: NOP4
42399: PUSH
42400: NOP4
42404: PUSH
42405: LD_INT 3
42407: ARRAY
42408: GREATEREQUAL
42409: AND
42410: ST_TO_ADDR
// end ;
42411: LD_VAR 0 3
42415: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42416: LD_INT 0
42418: PPUSH
42419: PPUSH
42420: PPUSH
42421: PPUSH
// pom := GetBase ( building ) ;
42422: NOP4
42426: PUSH
42427: NOP4
42431: PPUSH
42432: NOP4
42436: ST_TO_ADDR
// if not pom then
42437: NOP4
42441: NOT
42442: IFFALSE 42446
// exit ;
42444: GO 42616
// btype := GetBType ( building ) ;
42446: NOP4
42450: PUSH
42451: NOP4
42455: PPUSH
42456: NOP4
42460: ST_TO_ADDR
// if btype = b_armoury then
42461: NOP4
42465: PUSH
42466: LD_INT 4
42468: EQUAL
42469: IFFALSE 42479
// btype := b_barracks ;
42471: NOP4
42475: PUSH
42476: LD_INT 5
42478: ST_TO_ADDR
// if btype = b_depot then
42479: NOP4
42483: PUSH
42484: LD_INT 0
42486: EQUAL
42487: IFFALSE 42497
// btype := b_warehouse ;
42489: NOP4
42493: PUSH
42494: LD_INT 1
42496: ST_TO_ADDR
// if btype = b_workshop then
42497: NOP4
42501: PUSH
42502: LD_INT 2
42504: EQUAL
42505: IFFALSE 42515
// btype := b_factory ;
42507: NOP4
42511: PUSH
42512: LD_INT 3
42514: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42515: NOP4
42519: PUSH
42520: NOP4
42524: PPUSH
42525: NOP4
42529: PPUSH
42530: NOP4
42534: PPUSH
42535: NOP4
42539: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42540: NOP4
42544: PUSH
42545: NOP4
42549: PPUSH
42550: LD_INT 1
42552: PPUSH
42553: NOP4
42557: PUSH
42558: NOP4
42562: PUSH
42563: LD_INT 1
42565: ARRAY
42566: GREATEREQUAL
42567: PUSH
42568: NOP4
42572: PPUSH
42573: LD_INT 2
42575: PPUSH
42576: NOP4
42580: PUSH
42581: NOP4
42585: PUSH
42586: LD_INT 2
42588: ARRAY
42589: GREATEREQUAL
42590: AND
42591: PUSH
42592: NOP4
42596: PPUSH
42597: LD_INT 3
42599: PPUSH
42600: NOP4
42604: PUSH
42605: NOP4
42609: PUSH
42610: LD_INT 3
42612: ARRAY
42613: GREATEREQUAL
42614: AND
42615: ST_TO_ADDR
// end ;
42616: LD_VAR 0 2
42620: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42621: LD_INT 0
42623: PPUSH
42624: PPUSH
42625: PPUSH
// pom := GetBase ( building ) ;
42626: NOP4
42630: PUSH
42631: NOP4
42635: PPUSH
42636: NOP4
42640: ST_TO_ADDR
// if not pom then
42641: NOP4
42645: NOT
42646: IFFALSE 42650
// exit ;
42648: GO 42751
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42650: NOP4
42654: PUSH
42655: NOP4
42659: PPUSH
42660: NOP4
42664: PPUSH
42665: NOP4
42669: PPUSH
42670: NOP4
42674: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42675: NOP4
42679: PUSH
42680: NOP4
42684: PPUSH
42685: LD_INT 1
42687: PPUSH
42688: NOP4
42692: PUSH
42693: NOP4
42697: PUSH
42698: LD_INT 1
42700: ARRAY
42701: GREATEREQUAL
42702: PUSH
42703: NOP4
42707: PPUSH
42708: LD_INT 2
42710: PPUSH
42711: NOP4
42715: PUSH
42716: NOP4
42720: PUSH
42721: LD_INT 2
42723: ARRAY
42724: GREATEREQUAL
42725: AND
42726: PUSH
42727: NOP4
42731: PPUSH
42732: LD_INT 3
42734: PPUSH
42735: NOP4
42739: PUSH
42740: NOP4
42744: PUSH
42745: LD_INT 3
42747: ARRAY
42748: GREATEREQUAL
42749: AND
42750: ST_TO_ADDR
// end ;
42751: LD_VAR 0 3
42755: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
42756: LD_INT 0
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
// result := false ;
42768: NOP4
42772: PUSH
42773: LD_INT 0
42775: ST_TO_ADDR
// if not base or not btype or not x or not y then
42776: NOP4
42780: NOT
42781: PUSH
42782: NOP4
42786: NOT
42787: OR
42788: PUSH
42789: NOP4
42793: NOT
42794: OR
42795: PUSH
42796: NOP4
42800: NOT
42801: OR
42802: IFFALSE 42806
// exit ;
42804: GO 43415
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
42806: NOP4
42810: PUSH
42811: NOP4
42815: PPUSH
42816: NOP4
42820: PPUSH
42821: NOP4
42825: PPUSH
42826: NOP4
42830: PPUSH
42831: NOP4
42835: PUSH
42836: LD_INT 1
42838: ARRAY
42839: PPUSH
42840: NOP4
42844: PPUSH
42845: LD_INT 0
42847: PPUSH
42848: NOP4
42852: ST_TO_ADDR
// if not hexes then
42853: NOP4
42857: NOT
42858: IFFALSE 42862
// exit ;
42860: GO 43415
// for i = 1 to hexes do
42862: NOP4
42866: PUSH
42867: DOUBLE
42868: LD_INT 1
42870: DEC
42871: ST_TO_ADDR
42872: NOP4
42876: PUSH
42877: FOR_TO
42878: IFFALSE 43413
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42880: NOP4
42884: PUSH
42885: NOP4
42889: PUSH
42890: NOP4
42894: ARRAY
42895: PUSH
42896: LD_INT 1
42898: ARRAY
42899: PPUSH
42900: NOP4
42904: PUSH
42905: NOP4
42909: ARRAY
42910: PUSH
42911: LD_INT 2
42913: ARRAY
42914: PPUSH
42915: NOP4
42919: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42920: NOP4
42924: PUSH
42925: NOP4
42929: ARRAY
42930: PUSH
42931: LD_INT 1
42933: ARRAY
42934: PPUSH
42935: NOP4
42939: PUSH
42940: NOP4
42944: ARRAY
42945: PUSH
42946: LD_INT 2
42948: ARRAY
42949: PPUSH
42950: NOP4
42954: PUSH
42955: NOP4
42959: PUSH
42960: NOP4
42964: ARRAY
42965: PUSH
42966: LD_INT 1
42968: ARRAY
42969: PPUSH
42970: NOP4
42974: PUSH
42975: NOP4
42979: ARRAY
42980: PUSH
42981: LD_INT 2
42983: ARRAY
42984: PPUSH
42985: NOP4
42989: NOT
42990: OR
42991: PUSH
42992: NOP4
42996: PPUSH
42997: NOP4
43001: PUSH
43002: LD_INT 3
43004: EQUAL
43005: OR
43006: IFFALSE 43012
// exit ;
43008: POP
43009: POP
43010: GO 43415
// if not tmp or not tmp in base then
43012: NOP4
43016: NOT
43017: PUSH
43018: NOP4
43022: PUSH
43023: NOP4
43027: IN
43028: NOT
43029: OR
43030: IFFALSE 43034
// continue ;
43032: GO 42877
// result := true ;
43034: NOP4
43038: PUSH
43039: LD_INT 1
43041: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43042: NOP4
43046: PUSH
43047: NOP4
43051: PPUSH
43052: LD_INT 22
43054: PUSH
43055: NOP4
43059: PPUSH
43060: NOP4
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 30
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 30
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PPUSH
43101: NOP4
43105: ST_TO_ADDR
// if dep then
43106: NOP4
43110: IFFALSE 43246
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43112: NOP4
43116: PUSH
43117: NOP4
43121: PUSH
43122: LD_INT 1
43124: ARRAY
43125: PPUSH
43126: NOP4
43130: PPUSH
43131: NOP4
43135: PUSH
43136: LD_INT 1
43138: ARRAY
43139: PPUSH
43140: NOP4
43144: PPUSH
43145: LD_INT 5
43147: PPUSH
43148: NOP4
43152: PUSH
43153: NOP4
43157: PUSH
43158: LD_INT 1
43160: ARRAY
43161: PPUSH
43162: NOP4
43166: PPUSH
43167: NOP4
43171: PUSH
43172: LD_INT 1
43174: ARRAY
43175: PPUSH
43176: NOP4
43180: PPUSH
43181: LD_INT 5
43183: PPUSH
43184: NOP4
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43193: NOP4
43197: PUSH
43198: LD_INT 1
43200: ARRAY
43201: PPUSH
43202: NOP4
43206: PUSH
43207: LD_INT 2
43209: ARRAY
43210: PPUSH
43211: NOP4
43215: IFFALSE 43246
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43217: NOP4
43221: PPUSH
43222: NOP4
43226: PUSH
43227: LD_INT 1
43229: ARRAY
43230: PPUSH
43231: NOP4
43235: PUSH
43236: LD_INT 2
43238: ARRAY
43239: PPUSH
43240: NOP4
// continue ;
43244: GO 42877
// end ; end ; r := GetDir ( tmp ) ;
43246: NOP4
43250: PUSH
43251: NOP4
43255: PPUSH
43256: NOP4
43260: ST_TO_ADDR
// if r = 5 then
43261: NOP4
43265: PUSH
43266: LD_INT 5
43268: EQUAL
43269: IFFALSE 43279
// r := 0 ;
43271: NOP4
43275: PUSH
43276: LD_INT 0
43278: ST_TO_ADDR
// for j = r to 5 do
43279: NOP4
43283: PUSH
43284: DOUBLE
43285: NOP4
43289: DEC
43290: ST_TO_ADDR
43291: LD_INT 5
43293: PUSH
43294: FOR_TO
43295: IFFALSE 43409
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43297: NOP4
43301: PUSH
43302: NOP4
43306: PPUSH
43307: NOP4
43311: PPUSH
43312: NOP4
43316: PPUSH
43317: LD_INT 2
43319: PPUSH
43320: NOP4
43324: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43325: NOP4
43329: PUSH
43330: NOP4
43334: PPUSH
43335: NOP4
43339: PPUSH
43340: NOP4
43344: PPUSH
43345: LD_INT 2
43347: PPUSH
43348: NOP4
43352: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43353: NOP4
43357: PPUSH
43358: NOP4
43362: PPUSH
43363: NOP4
43367: PUSH
43368: NOP4
43372: PPUSH
43373: NOP4
43377: PPUSH
43378: NOP4
43382: NOT
43383: AND
43384: IFFALSE 43407
// begin ComMoveXY ( tmp , _x , _y ) ;
43386: NOP4
43390: PPUSH
43391: NOP4
43395: PPUSH
43396: NOP4
43400: PPUSH
43401: NOP4
// break ;
43405: GO 43409
// end ; end ;
43407: GO 43294
43409: POP
43410: POP
// end ;
43411: GO 42877
43413: POP
43414: POP
// end ;
43415: LD_VAR 0 6
43419: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43420: LD_INT 0
43422: PPUSH
43423: PPUSH
43424: PPUSH
43425: PPUSH
43426: PPUSH
43427: PPUSH
43428: PPUSH
43429: PPUSH
43430: PPUSH
43431: PPUSH
// result := false ;
43432: NOP4
43436: PUSH
43437: LD_INT 0
43439: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43440: NOP4
43444: NOT
43445: PUSH
43446: NOP4
43450: PPUSH
43451: NOP4
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: IN
43466: NOT
43467: OR
43468: PUSH
43469: NOP4
43473: NOT
43474: OR
43475: PUSH
43476: NOP4
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: LD_INT 4
43495: PUSH
43496: LD_INT 5
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: IN
43507: NOT
43508: OR
43509: PUSH
43510: NOP4
43514: PPUSH
43515: NOP4
43519: PPUSH
43520: NOP4
43524: NOT
43525: OR
43526: IFFALSE 43530
// exit ;
43528: GO 44247
// pom := GetBase ( depot ) ;
43530: NOP4
43534: PUSH
43535: NOP4
43539: PPUSH
43540: NOP4
43544: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43545: NOP4
43549: PUSH
43550: NOP4
43554: PPUSH
43555: NOP4
43559: PPUSH
43560: NOP4
43564: PPUSH
43565: NOP4
43569: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43570: NOP4
43574: PPUSH
43575: LD_INT 1
43577: PPUSH
43578: NOP4
43582: PUSH
43583: NOP4
43587: PUSH
43588: LD_INT 1
43590: ARRAY
43591: GREATEREQUAL
43592: PUSH
43593: NOP4
43597: PPUSH
43598: LD_INT 2
43600: PPUSH
43601: NOP4
43605: PUSH
43606: NOP4
43610: PUSH
43611: LD_INT 2
43613: ARRAY
43614: GREATEREQUAL
43615: AND
43616: PUSH
43617: NOP4
43621: PPUSH
43622: LD_INT 3
43624: PPUSH
43625: NOP4
43629: PUSH
43630: NOP4
43634: PUSH
43635: LD_INT 3
43637: ARRAY
43638: GREATEREQUAL
43639: AND
43640: NOT
43641: IFFALSE 43645
// exit ;
43643: GO 44247
// if GetBType ( depot ) = b_depot then
43645: NOP4
43649: PPUSH
43650: NOP4
43654: PUSH
43655: LD_INT 0
43657: EQUAL
43658: IFFALSE 43670
// dist := 28 else
43660: NOP4
43664: PUSH
43665: LD_INT 28
43667: ST_TO_ADDR
43668: GO 43678
// dist := 36 ;
43670: NOP4
43674: PUSH
43675: LD_INT 36
43677: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43678: NOP4
43682: PPUSH
43683: NOP4
43687: PPUSH
43688: NOP4
43692: PPUSH
43693: NOP4
43697: PUSH
43698: NOP4
43702: GREATER
43703: IFFALSE 43707
// exit ;
43705: GO 44247
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43707: NOP4
43711: PUSH
43712: NOP4
43716: PPUSH
43717: NOP4
43721: PPUSH
43722: NOP4
43726: PPUSH
43727: NOP4
43731: PPUSH
43732: NOP4
43736: PPUSH
43737: NOP4
43741: PPUSH
43742: LD_INT 0
43744: PPUSH
43745: NOP4
43749: ST_TO_ADDR
// if not hexes then
43750: NOP4
43754: NOT
43755: IFFALSE 43759
// exit ;
43757: GO 44247
// hex := GetHexInfo ( x , y ) ;
43759: NOP4
43763: PUSH
43764: NOP4
43768: PPUSH
43769: NOP4
43773: PPUSH
43774: NOP4
43778: ST_TO_ADDR
// if hex [ 1 ] then
43779: NOP4
43783: PUSH
43784: LD_INT 1
43786: ARRAY
43787: IFFALSE 43791
// exit ;
43789: GO 44247
// height := hex [ 2 ] ;
43791: NOP4
43795: PUSH
43796: NOP4
43800: PUSH
43801: LD_INT 2
43803: ARRAY
43804: ST_TO_ADDR
// for i = 1 to hexes do
43805: NOP4
43809: PUSH
43810: DOUBLE
43811: LD_INT 1
43813: DEC
43814: ST_TO_ADDR
43815: NOP4
43819: PUSH
43820: FOR_TO
43821: IFFALSE 44151
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43823: NOP4
43827: PUSH
43828: NOP4
43832: ARRAY
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PPUSH
43838: NOP4
43842: PUSH
43843: NOP4
43847: ARRAY
43848: PUSH
43849: LD_INT 2
43851: ARRAY
43852: PPUSH
43853: NOP4
43857: NOT
43858: PUSH
43859: NOP4
43863: PUSH
43864: NOP4
43868: ARRAY
43869: PUSH
43870: LD_INT 1
43872: ARRAY
43873: PPUSH
43874: NOP4
43878: PUSH
43879: NOP4
43883: ARRAY
43884: PUSH
43885: LD_INT 2
43887: ARRAY
43888: PPUSH
43889: NOP4
43893: PUSH
43894: LD_INT 0
43896: GREATER
43897: OR
43898: PUSH
43899: NOP4
43903: PUSH
43904: NOP4
43908: ARRAY
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: PPUSH
43914: NOP4
43918: PUSH
43919: NOP4
43923: ARRAY
43924: PUSH
43925: LD_INT 2
43927: ARRAY
43928: PPUSH
43929: NOP4
43933: OR
43934: IFFALSE 43940
// exit ;
43936: POP
43937: POP
43938: GO 44247
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43940: NOP4
43944: PUSH
43945: NOP4
43949: PUSH
43950: NOP4
43954: ARRAY
43955: PUSH
43956: LD_INT 1
43958: ARRAY
43959: PPUSH
43960: NOP4
43964: PUSH
43965: NOP4
43969: ARRAY
43970: PUSH
43971: LD_INT 2
43973: ARRAY
43974: PPUSH
43975: NOP4
43979: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43980: NOP4
43984: PUSH
43985: LD_INT 1
43987: ARRAY
43988: PUSH
43989: NOP4
43993: PUSH
43994: LD_INT 2
43996: ARRAY
43997: PUSH
43998: NOP4
44002: PUSH
44003: LD_INT 2
44005: PLUS
44006: GREATER
44007: OR
44008: PUSH
44009: NOP4
44013: PUSH
44014: LD_INT 2
44016: ARRAY
44017: PUSH
44018: NOP4
44022: PUSH
44023: LD_INT 2
44025: MINUS
44026: LESS
44027: OR
44028: PUSH
44029: NOP4
44033: PUSH
44034: LD_INT 3
44036: ARRAY
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 8
44043: PUSH
44044: LD_INT 9
44046: PUSH
44047: LD_INT 10
44049: PUSH
44050: LD_INT 11
44052: PUSH
44053: LD_INT 12
44055: PUSH
44056: LD_INT 13
44058: PUSH
44059: LD_INT 16
44061: PUSH
44062: LD_INT 17
44064: PUSH
44065: LD_INT 18
44067: PUSH
44068: LD_INT 19
44070: PUSH
44071: LD_INT 20
44073: PUSH
44074: LD_INT 21
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: IN
44092: NOT
44093: OR
44094: PUSH
44095: NOP4
44099: PUSH
44100: LD_INT 5
44102: ARRAY
44103: NOT
44104: OR
44105: PUSH
44106: NOP4
44110: PUSH
44111: LD_INT 6
44113: ARRAY
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 7
44123: PUSH
44124: LD_INT 9
44126: PUSH
44127: LD_INT 10
44129: PUSH
44130: LD_INT 11
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: IN
44141: NOT
44142: OR
44143: IFFALSE 44149
// exit ;
44145: POP
44146: POP
44147: GO 44247
// end ;
44149: GO 43820
44151: POP
44152: POP
// side := GetSide ( depot ) ;
44153: NOP4
44157: PUSH
44158: NOP4
44162: PPUSH
44163: NOP4
44167: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44168: NOP4
44172: PPUSH
44173: NOP4
44177: PPUSH
44178: NOP4
44182: PPUSH
44183: LD_INT 20
44185: PPUSH
44186: NOP4
44190: PUSH
44191: LD_INT 4
44193: ARRAY
44194: IFFALSE 44198
// exit ;
44196: GO 44247
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44198: NOP4
44202: PUSH
44203: LD_INT 29
44205: PUSH
44206: LD_INT 30
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: IN
44213: PUSH
44214: NOP4
44218: PPUSH
44219: NOP4
44223: PPUSH
44224: NOP4
44228: PPUSH
44229: NOP4
44233: NOT
44234: AND
44235: IFFALSE 44239
// exit ;
44237: GO 44247
// result := true ;
44239: NOP4
44243: PUSH
44244: LD_INT 1
44246: ST_TO_ADDR
// end ;
44247: LD_VAR 0 6
44251: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
44252: LD_INT 0
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
44304: PPUSH
44305: PPUSH
44306: PPUSH
44307: PPUSH
44308: PPUSH
44309: PPUSH
44310: PPUSH
44311: PPUSH
// result = [ ] ;
44312: NOP4
44316: PUSH
44317: EMPTY
44318: ST_TO_ADDR
// temp_list = [ ] ;
44319: NOP4
44323: PUSH
44324: EMPTY
44325: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44326: NOP4
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 4
44345: PUSH
44346: LD_INT 5
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: IN
44357: NOT
44358: PUSH
44359: NOP4
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: IN
44374: PUSH
44375: NOP4
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: IN
44394: NOT
44395: AND
44396: OR
44397: IFFALSE 44401
// exit ;
44399: GO 62792
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44401: NOP4
44405: PUSH
44406: LD_INT 6
44408: PUSH
44409: LD_INT 7
44411: PUSH
44412: LD_INT 8
44414: PUSH
44415: LD_INT 13
44417: PUSH
44418: LD_INT 12
44420: PUSH
44421: LD_INT 15
44423: PUSH
44424: LD_INT 11
44426: PUSH
44427: LD_INT 14
44429: PUSH
44430: LD_INT 10
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: IN
44444: IFFALSE 44454
// btype = b_lab ;
44446: NOP4
44450: PUSH
44451: LD_INT 6
44453: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44454: NOP4
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: IN
44473: NOT
44474: PUSH
44475: NOP4
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: LD_INT 6
44494: PUSH
44495: LD_INT 36
44497: PUSH
44498: LD_INT 4
44500: PUSH
44501: LD_INT 5
44503: PUSH
44504: LD_INT 31
44506: PUSH
44507: LD_INT 32
44509: PUSH
44510: LD_INT 33
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: IN
44526: NOT
44527: PUSH
44528: NOP4
44532: PUSH
44533: LD_INT 1
44535: EQUAL
44536: AND
44537: OR
44538: PUSH
44539: NOP4
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: IN
44554: NOT
44555: PUSH
44556: NOP4
44560: PUSH
44561: LD_INT 2
44563: EQUAL
44564: AND
44565: OR
44566: IFFALSE 44576
// mode = 0 ;
44568: NOP4
44572: PUSH
44573: LD_INT 0
44575: ST_TO_ADDR
// case mode of 0 :
44576: NOP4
44580: PUSH
44581: LD_INT 0
44583: DOUBLE
44584: EQUAL
44585: IFTRUE 44589
44587: GO 56042
44589: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44590: NOP4
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44783: NOP4
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 3
44940: NEG
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 3
44951: NEG
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44979: NOP4
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 3
45138: NEG
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: LD_INT 3
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45178: NOP4
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 3
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45374: NOP4
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 3
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 3
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45567: NOP4
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 3
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 3
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45760: NOP4
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45990: NOP4
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46220: NOP4
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46450: NOP4
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46680: NOP4
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46910: NOP4
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47140: NOP4
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47420: NOP4
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 3
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47696: NOP4
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 3
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47970: NOP4
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: LD_INT 3
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48246: NOP4
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48526: NOP4
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: NEG
48738: PUSH
48739: LD_INT 3
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 3
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48808: NOP4
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 3
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: NEG
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49087: NOP4
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 3
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49365: NOP4
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: LD_INT 3
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 3
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49643: NOP4
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49921: NOP4
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50200: NOP4
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 3
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 3
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50480: NOP4
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50592: NOP4
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50704: NOP4
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50816: NOP4
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50928: NOP4
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51040: NOP4
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51152: NOP4
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: LD_INT 3
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 3
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51502: NOP4
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: LD_INT 3
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 3
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: LD_INT 3
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 3
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: LD_INT 3
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51852: NOP4
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 3
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 3
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52200: NOP4
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 3
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 3
52509: NEG
52510: PUSH
52511: LD_INT 3
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52550: NOP4
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: LD_INT 3
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 3
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 3
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 3
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 3
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 3
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: LD_INT 3
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52900: NOP4
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 3
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53248: NOP4
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53399: NOP4
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53546: NOP4
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53690: NOP4
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53834: NOP4
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53981: NOP4
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54132: NOP4
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54362: NOP4
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54592: NOP4
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54822: NOP4
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55052: NOP4
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55282: NOP4
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55512: NOP4
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55600: NOP4
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55688: NOP4
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55776: NOP4
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55864: NOP4
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55952: NOP4
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: ST_TO_ADDR
// end ; 1 :
56040: GO 61937
56042: LD_INT 1
56044: DOUBLE
56045: EQUAL
56046: IFTRUE 56050
56048: GO 58673
56050: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56051: NOP4
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56095: NOP4
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56136: NOP4
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56176: NOP4
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 3
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56217: NOP4
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56261: NOP4
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 3
56280: NEG
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56307: NOP4
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 3
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56351: NOP4
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56392: NOP4
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56432: NOP4
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56473: NOP4
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 3
56502: NEG
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56517: NOP4
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: LD_INT 3
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56563: NOP4
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 3
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56607: NOP4
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: LIST
56647: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56648: NOP4
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 4
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: LD_INT 4
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: LIST
56687: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56688: NOP4
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 4
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56729: NOP4
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 4
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: LIST
56772: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56773: NOP4
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: LD_INT 4
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 4
56804: NEG
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56819: NOP4
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 3
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 4
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 4
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 5
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 5
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: LD_INT 4
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 6
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 6
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: LD_INT 5
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56974: NOP4
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 4
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 4
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 4
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 5
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 5
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 6
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 6
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57117: NOP4
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 4
57154: PUSH
57155: LD_INT 3
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 4
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: LD_INT 4
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 5
57184: PUSH
57185: LD_INT 4
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 5
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: LD_INT 5
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 6
57214: PUSH
57215: LD_INT 5
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 6
57224: PUSH
57225: LD_INT 6
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 5
57234: PUSH
57235: LD_INT 6
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57256: NOP4
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 4
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 4
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 5
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 5
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 6
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 6
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 5
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57399: NOP4
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 4
57451: NEG
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 4
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 4
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 5
57485: NEG
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 5
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 5
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 6
57519: NEG
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 6
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57554: NOP4
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 4
57609: NEG
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 4
57621: NEG
57622: PUSH
57623: LD_INT 4
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 4
57633: NEG
57634: PUSH
57635: LD_INT 5
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 5
57645: NEG
57646: PUSH
57647: LD_INT 4
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 5
57657: NEG
57658: PUSH
57659: LD_INT 5
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 5
57669: NEG
57670: PUSH
57671: LD_INT 6
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 6
57681: NEG
57682: PUSH
57683: LD_INT 5
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 6
57693: NEG
57694: PUSH
57695: LD_INT 6
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57717: NOP4
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57761: NOP4
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: LIST
57801: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57802: NOP4
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57842: NOP4
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: LIST
57882: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57883: NOP4
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57927: NOP4
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: LD_INT 3
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: NEG
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: LIST
57972: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57973: NOP4
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 3
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 3
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58006: NOP4
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58037: NOP4
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58066: NOP4
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: LD_INT 3
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58095: NOP4
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58126: NOP4
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58159: NOP4
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 3
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58203: NOP4
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58244: NOP4
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58284: NOP4
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: LD_INT 3
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 3
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58325: NOP4
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: NEG
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 3
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58369: NOP4
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 3
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58415: NOP4
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58459: NOP4
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58500: NOP4
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58540: NOP4
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58581: NOP4
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58625: NOP4
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: ST_TO_ADDR
// end ; 2 :
58671: GO 61937
58673: LD_INT 2
58675: DOUBLE
58676: EQUAL
58677: IFTRUE 58681
58679: GO 61936
58681: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58682: NOP4
58686: PUSH
58687: LD_INT 4
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 4
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 5
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 5
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 5
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 4
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 4
58812: PUSH
58813: LD_INT 4
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 3
58822: PUSH
58823: LD_INT 4
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: LD_INT 3
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 4
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: LD_INT 4
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 4
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: LD_INT 3
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: LD_INT 4
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: LD_INT 5
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 5
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: LD_INT 4
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: LD_INT 3
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: LD_INT 5
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 3
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 4
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 4
59044: NEG
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: LD_INT 4
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 4
59079: NEG
59080: PUSH
59081: LD_INT 5
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: NEG
59092: PUSH
59093: LD_INT 4
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: LD_INT 3
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 4
59115: NEG
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 5
59127: NEG
59128: PUSH
59129: LD_INT 4
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 5
59139: NEG
59140: PUSH
59141: LD_INT 5
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: LD_INT 5
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 5
59163: NEG
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59220: NOP4
59224: PUSH
59225: LD_INT 4
59227: PUSH
59228: LD_INT 4
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 5
59247: PUSH
59248: LD_INT 4
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 5
59257: PUSH
59258: LD_INT 5
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 4
59267: PUSH
59268: LD_INT 5
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: LD_INT 4
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: LD_INT 5
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 4
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 4
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 4
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 4
59421: NEG
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 4
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 5
59466: NEG
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 5
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 5
59489: NEG
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 3
59501: NEG
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 4
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 4
59572: NEG
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 4
59584: NEG
59585: PUSH
59586: LD_INT 4
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: LD_INT 4
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 4
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 5
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 4
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 5
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 5
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59767: NOP4
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 4
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 3
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 5
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: LD_INT 5
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 4
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: LD_INT 5
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 3
59912: NEG
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 4
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 4
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 4
59946: NEG
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: NEG
59970: PUSH
59971: LD_INT 4
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 4
59981: NEG
59982: PUSH
59983: LD_INT 5
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 3
59993: NEG
59994: PUSH
59995: LD_INT 4
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: NEG
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 5
60029: NEG
60030: PUSH
60031: LD_INT 4
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 5
60041: NEG
60042: PUSH
60043: LD_INT 5
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: LD_INT 5
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 5
60065: NEG
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: LD_INT 4
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 4
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: LD_INT 4
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 4
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 4
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 5
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 5
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 4
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 5
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60317: NOP4
60321: PUSH
60322: LD_INT 4
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 4
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 4
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 5
60380: NEG
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 5
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 5
60403: NEG
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: LD_INT 4
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 4
60498: NEG
60499: PUSH
60500: LD_INT 4
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: NEG
60511: PUSH
60512: LD_INT 4
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: NEG
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 4
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 5
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 4
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 3
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: LD_INT 4
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 5
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 5
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 4
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 4
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 4
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 4
60729: PUSH
60730: LD_INT 4
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 4
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 5
60749: PUSH
60750: LD_INT 4
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 5
60759: PUSH
60760: LD_INT 5
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 4
60769: PUSH
60770: LD_INT 5
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: LD_INT 4
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 5
60799: PUSH
60800: LD_INT 3
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 5
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60864: NOP4
60868: PUSH
60869: LD_INT 4
60871: NEG
60872: PUSH
60873: LD_INT 4
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 4
60883: NEG
60884: PUSH
60885: LD_INT 5
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: NEG
60896: PUSH
60897: LD_INT 4
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: NEG
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 4
60919: NEG
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 5
60931: NEG
60932: PUSH
60933: LD_INT 4
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 5
60943: NEG
60944: PUSH
60945: LD_INT 5
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 3
60955: NEG
60956: PUSH
60957: LD_INT 5
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 5
60967: NEG
60968: PUSH
60969: LD_INT 3
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 3
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 4
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: LD_INT 3
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: LD_INT 4
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 4
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 4
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 5
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 5
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 4
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 3
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: LD_INT 2
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 5
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 4
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 4
61204: PUSH
61205: LD_INT 4
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: LD_INT 4
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 4
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: LD_INT 4
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 4
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: LD_INT 3
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 4
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 5
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 5
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 4
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 5
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: NEG
61347: PUSH
61348: LD_INT 3
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61402: NOP4
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 4
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 5
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 4
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 4
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 5
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 3
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 2
61499: NEG
61500: PUSH
61501: LD_INT 5
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 4
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 4
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 4
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: PUSH
61605: LD_INT 4
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: LD_INT 3
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 5
61624: PUSH
61625: LD_INT 4
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 5
61634: PUSH
61635: LD_INT 5
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 4
61644: PUSH
61645: LD_INT 5
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: LD_INT 4
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 5
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: LD_INT 5
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: LD_INT 3
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: LD_INT 4
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 4
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: LD_INT 3
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 4
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 4
61787: NEG
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 4
61798: NEG
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 3
61821: NEG
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 4
61832: NEG
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 5
61843: NEG
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 5
61854: NEG
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 5
61866: NEG
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: ST_TO_ADDR
// end ; end ;
61934: GO 61937
61936: POP
// case btype of b_depot , b_warehouse :
61937: NOP4
61941: PUSH
61942: LD_INT 0
61944: DOUBLE
61945: EQUAL
61946: IFTRUE 61956
61948: LD_INT 1
61950: DOUBLE
61951: EQUAL
61952: IFTRUE 61956
61954: GO 62157
61956: POP
// case nation of nation_american :
61957: NOP4
61961: PUSH
61962: LD_INT 1
61964: DOUBLE
61965: EQUAL
61966: IFTRUE 61970
61968: GO 62026
61970: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
61971: NOP4
61975: PUSH
61976: NOP4
61980: PUSH
61981: NOP4
61985: PUSH
61986: NOP4
61990: PUSH
61991: NOP4
61995: PUSH
61996: NOP4
62000: PUSH
62001: NOP4
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: PUSH
62014: NOP4
62018: PUSH
62019: LD_INT 1
62021: PLUS
62022: ARRAY
62023: ST_TO_ADDR
62024: GO 62155
62026: LD_INT 2
62028: DOUBLE
62029: EQUAL
62030: IFTRUE 62034
62032: GO 62090
62034: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
62035: NOP4
62039: PUSH
62040: NOP4
62044: PUSH
62045: NOP4
62049: PUSH
62050: NOP4
62054: PUSH
62055: NOP4
62059: PUSH
62060: NOP4
62064: PUSH
62065: NOP4
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: PUSH
62078: NOP4
62082: PUSH
62083: LD_INT 1
62085: PLUS
62086: ARRAY
62087: ST_TO_ADDR
62088: GO 62155
62090: LD_INT 3
62092: DOUBLE
62093: EQUAL
62094: IFTRUE 62098
62096: GO 62154
62098: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62099: NOP4
62103: PUSH
62104: NOP4
62108: PUSH
62109: NOP4
62113: PUSH
62114: NOP4
62118: PUSH
62119: NOP4
62123: PUSH
62124: NOP4
62128: PUSH
62129: NOP4
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: NOP4
62146: PUSH
62147: LD_INT 1
62149: PLUS
62150: ARRAY
62151: ST_TO_ADDR
62152: GO 62155
62154: POP
62155: GO 62710
62157: LD_INT 2
62159: DOUBLE
62160: EQUAL
62161: IFTRUE 62171
62163: LD_INT 3
62165: DOUBLE
62166: EQUAL
62167: IFTRUE 62171
62169: GO 62227
62171: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62172: NOP4
62176: PUSH
62177: NOP4
62181: PUSH
62182: NOP4
62186: PUSH
62187: NOP4
62191: PUSH
62192: NOP4
62196: PUSH
62197: NOP4
62201: PUSH
62202: NOP4
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: PUSH
62215: NOP4
62219: PUSH
62220: LD_INT 1
62222: PLUS
62223: ARRAY
62224: ST_TO_ADDR
62225: GO 62710
62227: LD_INT 16
62229: DOUBLE
62230: EQUAL
62231: IFTRUE 62289
62233: LD_INT 17
62235: DOUBLE
62236: EQUAL
62237: IFTRUE 62289
62239: LD_INT 18
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62289
62245: LD_INT 19
62247: DOUBLE
62248: EQUAL
62249: IFTRUE 62289
62251: LD_INT 22
62253: DOUBLE
62254: EQUAL
62255: IFTRUE 62289
62257: LD_INT 20
62259: DOUBLE
62260: EQUAL
62261: IFTRUE 62289
62263: LD_INT 21
62265: DOUBLE
62266: EQUAL
62267: IFTRUE 62289
62269: LD_INT 23
62271: DOUBLE
62272: EQUAL
62273: IFTRUE 62289
62275: LD_INT 24
62277: DOUBLE
62278: EQUAL
62279: IFTRUE 62289
62281: LD_INT 25
62283: DOUBLE
62284: EQUAL
62285: IFTRUE 62289
62287: GO 62345
62289: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62290: NOP4
62294: PUSH
62295: NOP4
62299: PUSH
62300: NOP4
62304: PUSH
62305: NOP4
62309: PUSH
62310: NOP4
62314: PUSH
62315: NOP4
62319: PUSH
62320: NOP4
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: PUSH
62333: NOP4
62337: PUSH
62338: LD_INT 1
62340: PLUS
62341: ARRAY
62342: ST_TO_ADDR
62343: GO 62710
62345: LD_INT 6
62347: DOUBLE
62348: EQUAL
62349: IFTRUE 62401
62351: LD_INT 7
62353: DOUBLE
62354: EQUAL
62355: IFTRUE 62401
62357: LD_INT 8
62359: DOUBLE
62360: EQUAL
62361: IFTRUE 62401
62363: LD_INT 13
62365: DOUBLE
62366: EQUAL
62367: IFTRUE 62401
62369: LD_INT 12
62371: DOUBLE
62372: EQUAL
62373: IFTRUE 62401
62375: LD_INT 15
62377: DOUBLE
62378: EQUAL
62379: IFTRUE 62401
62381: LD_INT 11
62383: DOUBLE
62384: EQUAL
62385: IFTRUE 62401
62387: LD_INT 14
62389: DOUBLE
62390: EQUAL
62391: IFTRUE 62401
62393: LD_INT 10
62395: DOUBLE
62396: EQUAL
62397: IFTRUE 62401
62399: GO 62457
62401: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
62402: NOP4
62406: PUSH
62407: NOP4
62411: PUSH
62412: NOP4
62416: PUSH
62417: NOP4
62421: PUSH
62422: NOP4
62426: PUSH
62427: NOP4
62431: PUSH
62432: NOP4
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: PUSH
62445: NOP4
62449: PUSH
62450: LD_INT 1
62452: PLUS
62453: ARRAY
62454: ST_TO_ADDR
62455: GO 62710
62457: LD_INT 36
62459: DOUBLE
62460: EQUAL
62461: IFTRUE 62465
62463: GO 62521
62465: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62466: NOP4
62470: PUSH
62471: NOP4
62475: PUSH
62476: NOP4
62480: PUSH
62481: NOP4
62485: PUSH
62486: NOP4
62490: PUSH
62491: NOP4
62495: PUSH
62496: NOP4
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: PUSH
62509: NOP4
62513: PUSH
62514: LD_INT 1
62516: PLUS
62517: ARRAY
62518: ST_TO_ADDR
62519: GO 62710
62521: LD_INT 4
62523: DOUBLE
62524: EQUAL
62525: IFTRUE 62547
62527: LD_INT 5
62529: DOUBLE
62530: EQUAL
62531: IFTRUE 62547
62533: LD_INT 34
62535: DOUBLE
62536: EQUAL
62537: IFTRUE 62547
62539: LD_INT 37
62541: DOUBLE
62542: EQUAL
62543: IFTRUE 62547
62545: GO 62603
62547: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62548: NOP4
62552: PUSH
62553: NOP4
62557: PUSH
62558: NOP4
62562: PUSH
62563: NOP4
62567: PUSH
62568: NOP4
62572: PUSH
62573: NOP4
62577: PUSH
62578: NOP4
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: PUSH
62591: NOP4
62595: PUSH
62596: LD_INT 1
62598: PLUS
62599: ARRAY
62600: ST_TO_ADDR
62601: GO 62710
62603: LD_INT 31
62605: DOUBLE
62606: EQUAL
62607: IFTRUE 62653
62609: LD_INT 32
62611: DOUBLE
62612: EQUAL
62613: IFTRUE 62653
62615: LD_INT 33
62617: DOUBLE
62618: EQUAL
62619: IFTRUE 62653
62621: LD_INT 27
62623: DOUBLE
62624: EQUAL
62625: IFTRUE 62653
62627: LD_INT 26
62629: DOUBLE
62630: EQUAL
62631: IFTRUE 62653
62633: LD_INT 28
62635: DOUBLE
62636: EQUAL
62637: IFTRUE 62653
62639: LD_INT 29
62641: DOUBLE
62642: EQUAL
62643: IFTRUE 62653
62645: LD_INT 30
62647: DOUBLE
62648: EQUAL
62649: IFTRUE 62653
62651: GO 62709
62653: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
62654: NOP4
62658: PUSH
62659: NOP4
62663: PUSH
62664: NOP4
62668: PUSH
62669: NOP4
62673: PUSH
62674: NOP4
62678: PUSH
62679: NOP4
62683: PUSH
62684: NOP4
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: PUSH
62697: NOP4
62701: PUSH
62702: LD_INT 1
62704: PLUS
62705: ARRAY
62706: ST_TO_ADDR
62707: GO 62710
62709: POP
// temp_list2 = [ ] ;
62710: NOP4
62714: PUSH
62715: EMPTY
62716: ST_TO_ADDR
// for i in temp_list do
62717: NOP4
62721: PUSH
62722: NOP4
62726: PUSH
62727: FOR_IN
62728: IFFALSE 62780
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62730: NOP4
62734: PUSH
62735: NOP4
62739: PUSH
62740: NOP4
62744: PUSH
62745: LD_INT 1
62747: ARRAY
62748: PUSH
62749: NOP4
62753: PLUS
62754: PUSH
62755: NOP4
62759: PUSH
62760: LD_INT 2
62762: ARRAY
62763: PUSH
62764: NOP4
62768: PLUS
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: EMPTY
62775: LIST
62776: ADD
62777: ST_TO_ADDR
62778: GO 62727
62780: POP
62781: POP
// result = temp_list2 ;
62782: NOP4
62786: PUSH
62787: NOP4
62791: ST_TO_ADDR
// end ;
62792: LD_VAR 0 7
62796: RET
// export function EnemyInRange ( unit , dist ) ; begin
62797: LD_INT 0
62799: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62800: NOP4
62804: PUSH
62805: NOP4
62809: PPUSH
62810: NOP4
62814: PPUSH
62815: NOP4
62819: PPUSH
62820: NOP4
62824: PPUSH
62825: NOP4
62829: PPUSH
62830: NOP4
62834: PPUSH
62835: NOP4
62839: PPUSH
62840: NOP4
62844: PUSH
62845: LD_INT 4
62847: ARRAY
62848: ST_TO_ADDR
// end ;
62849: LD_VAR 0 3
62853: RET
// export function PlayerSeeMe ( unit ) ; begin
62854: LD_INT 0
62856: PPUSH
// result := See ( your_side , unit ) ;
62857: NOP4
62861: PUSH
62862: NOP4
62866: PPUSH
62867: NOP4
62871: PPUSH
62872: NOP4
62876: ST_TO_ADDR
// end ;
62877: LD_VAR 0 2
62881: RET
// export function ReverseDir ( unit ) ; begin
62882: LD_INT 0
62884: PPUSH
// if not unit then
62885: NOP4
62889: NOT
62890: IFFALSE 62894
// exit ;
62892: GO 62940
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
62894: NOP4
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: LD_INT 4
62904: PUSH
62905: LD_INT 5
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: PUSH
62925: NOP4
62929: PPUSH
62930: NOP4
62934: PUSH
62935: LD_INT 1
62937: PLUS
62938: ARRAY
62939: ST_TO_ADDR
// end ;
62940: LD_VAR 0 2
62944: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62945: LD_INT 0
62947: PPUSH
62948: PPUSH
62949: PPUSH
62950: PPUSH
62951: PPUSH
// if not hexes then
62952: NOP4
62956: NOT
62957: IFFALSE 62961
// exit ;
62959: GO 63109
// dist := 9999 ;
62961: NOP4
62965: PUSH
62966: LD_INT 9999
62968: ST_TO_ADDR
// for i = 1 to hexes do
62969: NOP4
62973: PUSH
62974: DOUBLE
62975: LD_INT 1
62977: DEC
62978: ST_TO_ADDR
62979: NOP4
62983: PUSH
62984: FOR_TO
62985: IFFALSE 63097
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62987: NOP4
62991: PPUSH
62992: NOP4
62996: PUSH
62997: NOP4
63001: ARRAY
63002: PUSH
63003: LD_INT 1
63005: ARRAY
63006: PPUSH
63007: NOP4
63011: PUSH
63012: NOP4
63016: ARRAY
63017: PUSH
63018: LD_INT 2
63020: ARRAY
63021: PPUSH
63022: NOP4
63026: PUSH
63027: NOP4
63031: LESS
63032: IFFALSE 63095
// begin hex := hexes [ i ] ;
63034: NOP4
63038: PUSH
63039: NOP4
63043: PUSH
63044: NOP4
63048: ARRAY
63049: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63050: NOP4
63054: PUSH
63055: NOP4
63059: PPUSH
63060: NOP4
63064: PUSH
63065: NOP4
63069: ARRAY
63070: PUSH
63071: LD_INT 1
63073: ARRAY
63074: PPUSH
63075: NOP4
63079: PUSH
63080: NOP4
63084: ARRAY
63085: PUSH
63086: LD_INT 2
63088: ARRAY
63089: PPUSH
63090: NOP4
63094: ST_TO_ADDR
// end ; end ;
63095: GO 62984
63097: POP
63098: POP
// result := hex ;
63099: NOP4
63103: PUSH
63104: NOP4
63108: ST_TO_ADDR
// end ;
63109: LD_VAR 0 3
63113: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63114: LD_INT 0
63116: PPUSH
63117: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63118: NOP4
63122: NOT
63123: PUSH
63124: NOP4
63128: PUSH
63129: LD_INT 21
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 23
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PPUSH
63153: NOP4
63157: IN
63158: NOT
63159: OR
63160: IFFALSE 63164
// exit ;
63162: GO 63211
// for i = 1 to 3 do
63164: NOP4
63168: PUSH
63169: DOUBLE
63170: LD_INT 1
63172: DEC
63173: ST_TO_ADDR
63174: LD_INT 3
63176: PUSH
63177: FOR_TO
63178: IFFALSE 63209
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63180: NOP4
63184: PPUSH
63185: NOP4
63189: PPUSH
63190: NOP4
63194: PPUSH
63195: NOP4
63199: PPUSH
63200: LD_INT 1
63202: PPUSH
63203: NOP4
63207: GO 63177
63209: POP
63210: POP
// end ;
63211: LD_VAR 0 2
63215: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63216: LD_INT 0
63218: PPUSH
63219: PPUSH
63220: PPUSH
63221: PPUSH
63222: PPUSH
63223: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63224: NOP4
63228: NOT
63229: PUSH
63230: NOP4
63234: NOT
63235: OR
63236: PUSH
63237: NOP4
63241: PPUSH
63242: NOP4
63246: OR
63247: IFFALSE 63251
// exit ;
63249: GO 63692
// x := GetX ( enemy_unit ) ;
63251: NOP4
63255: PUSH
63256: NOP4
63260: PPUSH
63261: NOP4
63265: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63266: NOP4
63270: PUSH
63271: NOP4
63275: PPUSH
63276: NOP4
63280: ST_TO_ADDR
// if not x or not y then
63281: NOP4
63285: NOT
63286: PUSH
63287: NOP4
63291: NOT
63292: OR
63293: IFFALSE 63297
// exit ;
63295: GO 63692
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63297: NOP4
63301: PUSH
63302: NOP4
63306: PPUSH
63307: LD_INT 0
63309: PPUSH
63310: LD_INT 4
63312: PPUSH
63313: NOP4
63317: PUSH
63318: NOP4
63322: PPUSH
63323: LD_INT 0
63325: PPUSH
63326: LD_INT 4
63328: PPUSH
63329: NOP4
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: NOP4
63342: PPUSH
63343: LD_INT 1
63345: PPUSH
63346: LD_INT 4
63348: PPUSH
63349: NOP4
63353: PUSH
63354: NOP4
63358: PPUSH
63359: LD_INT 1
63361: PPUSH
63362: LD_INT 4
63364: PPUSH
63365: NOP4
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: NOP4
63378: PPUSH
63379: LD_INT 2
63381: PPUSH
63382: LD_INT 4
63384: PPUSH
63385: NOP4
63389: PUSH
63390: NOP4
63394: PPUSH
63395: LD_INT 2
63397: PPUSH
63398: LD_INT 4
63400: PPUSH
63401: NOP4
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: NOP4
63414: PPUSH
63415: LD_INT 3
63417: PPUSH
63418: LD_INT 4
63420: PPUSH
63421: NOP4
63425: PUSH
63426: NOP4
63430: PPUSH
63431: LD_INT 3
63433: PPUSH
63434: LD_INT 4
63436: PPUSH
63437: NOP4
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: NOP4
63450: PPUSH
63451: LD_INT 4
63453: PPUSH
63454: LD_INT 4
63456: PPUSH
63457: NOP4
63461: PUSH
63462: NOP4
63466: PPUSH
63467: LD_INT 4
63469: PPUSH
63470: LD_INT 4
63472: PPUSH
63473: NOP4
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: NOP4
63486: PPUSH
63487: LD_INT 5
63489: PPUSH
63490: LD_INT 4
63492: PPUSH
63493: NOP4
63497: PUSH
63498: NOP4
63502: PPUSH
63503: LD_INT 5
63505: PPUSH
63506: LD_INT 4
63508: PPUSH
63509: NOP4
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: ST_TO_ADDR
// for i = tmp downto 1 do
63526: NOP4
63530: PUSH
63531: DOUBLE
63532: NOP4
63536: INC
63537: ST_TO_ADDR
63538: LD_INT 1
63540: PUSH
63541: FOR_DOWNTO
63542: IFFALSE 63643
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63544: NOP4
63548: PUSH
63549: NOP4
63553: ARRAY
63554: PUSH
63555: LD_INT 1
63557: ARRAY
63558: PPUSH
63559: NOP4
63563: PUSH
63564: NOP4
63568: ARRAY
63569: PUSH
63570: LD_INT 2
63572: ARRAY
63573: PPUSH
63574: NOP4
63578: NOT
63579: PUSH
63580: NOP4
63584: PUSH
63585: NOP4
63589: ARRAY
63590: PUSH
63591: LD_INT 1
63593: ARRAY
63594: PPUSH
63595: NOP4
63599: PUSH
63600: NOP4
63604: ARRAY
63605: PUSH
63606: LD_INT 2
63608: ARRAY
63609: PPUSH
63610: NOP4
63614: PUSH
63615: LD_INT 0
63617: NONEQUAL
63618: OR
63619: IFFALSE 63641
// tmp := Delete ( tmp , i ) ;
63621: NOP4
63625: PUSH
63626: NOP4
63630: PPUSH
63631: NOP4
63635: PPUSH
63636: NOP4
63640: ST_TO_ADDR
63641: GO 63541
63643: POP
63644: POP
// j := GetClosestHex ( unit , tmp ) ;
63645: NOP4
63649: PUSH
63650: NOP4
63654: PPUSH
63655: NOP4
63659: PPUSH
63660: NOP4
63664: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63665: NOP4
63669: PPUSH
63670: NOP4
63674: PUSH
63675: LD_INT 1
63677: ARRAY
63678: PPUSH
63679: NOP4
63683: PUSH
63684: LD_INT 2
63686: ARRAY
63687: PPUSH
63688: NOP4
// end ;
63692: LD_VAR 0 3
63696: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63697: LD_INT 0
63699: PPUSH
63700: PPUSH
63701: PPUSH
// uc_side = 0 ;
63702: LD_ADDR_OWVAR 20
63706: PUSH
63707: LD_INT 0
63709: ST_TO_ADDR
// uc_nation = 0 ;
63710: LD_ADDR_OWVAR 21
63714: PUSH
63715: LD_INT 0
63717: ST_TO_ADDR
// InitHc ;
63718: NOP4
// InitVc ;
63722: NOP4
// if mastodonts then
63726: NOP4
63730: IFFALSE 63797
// for i = 1 to mastodonts do
63732: NOP4
63736: PUSH
63737: DOUBLE
63738: LD_INT 1
63740: DEC
63741: ST_TO_ADDR
63742: NOP4
63746: PUSH
63747: FOR_TO
63748: IFFALSE 63795
// begin vc_chassis := 31 ;
63750: LD_ADDR_OWVAR 37
63754: PUSH
63755: LD_INT 31
63757: ST_TO_ADDR
// vc_control := control_rider ;
63758: LD_ADDR_OWVAR 38
63762: PUSH
63763: LD_INT 4
63765: ST_TO_ADDR
// animal := CreateVehicle ;
63766: NOP4
63770: PUSH
63771: NOP4
63775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63776: NOP4
63780: PPUSH
63781: NOP4
63785: PPUSH
63786: LD_INT 0
63788: PPUSH
63789: NOP4
// end ;
63793: GO 63747
63795: POP
63796: POP
// if horses then
63797: NOP4
63801: IFFALSE 63868
// for i = 1 to horses do
63803: NOP4
63807: PUSH
63808: DOUBLE
63809: LD_INT 1
63811: DEC
63812: ST_TO_ADDR
63813: NOP4
63817: PUSH
63818: FOR_TO
63819: IFFALSE 63866
// begin hc_class := 21 ;
63821: LD_ADDR_OWVAR 28
63825: PUSH
63826: LD_INT 21
63828: ST_TO_ADDR
// hc_gallery :=  ;
63829: LD_ADDR_OWVAR 33
63833: PUSH
63834: LD_STRING 
63836: ST_TO_ADDR
// animal := CreateHuman ;
63837: NOP4
63841: PUSH
63842: NOP4
63846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63847: NOP4
63851: PPUSH
63852: NOP4
63856: PPUSH
63857: LD_INT 0
63859: PPUSH
63860: NOP4
// end ;
63864: GO 63818
63866: POP
63867: POP
// if birds then
63868: NOP4
63872: IFFALSE 63939
// for i = 1 to birds do
63874: NOP4
63878: PUSH
63879: DOUBLE
63880: LD_INT 1
63882: DEC
63883: ST_TO_ADDR
63884: NOP4
63888: PUSH
63889: FOR_TO
63890: IFFALSE 63937
// begin hc_class = 18 ;
63892: LD_ADDR_OWVAR 28
63896: PUSH
63897: LD_INT 18
63899: ST_TO_ADDR
// hc_gallery =  ;
63900: LD_ADDR_OWVAR 33
63904: PUSH
63905: LD_STRING 
63907: ST_TO_ADDR
// animal := CreateHuman ;
63908: NOP4
63912: PUSH
63913: NOP4
63917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63918: NOP4
63922: PPUSH
63923: NOP4
63927: PPUSH
63928: LD_INT 0
63930: PPUSH
63931: NOP4
// end ;
63935: GO 63889
63937: POP
63938: POP
// if tigers then
63939: NOP4
63943: IFFALSE 64027
// for i = 1 to tigers do
63945: NOP4
63949: PUSH
63950: DOUBLE
63951: LD_INT 1
63953: DEC
63954: ST_TO_ADDR
63955: NOP4
63959: PUSH
63960: FOR_TO
63961: IFFALSE 64025
// begin hc_class = class_tiger ;
63963: LD_ADDR_OWVAR 28
63967: PUSH
63968: LD_INT 14
63970: ST_TO_ADDR
// hc_gallery =  ;
63971: LD_ADDR_OWVAR 33
63975: PUSH
63976: LD_STRING 
63978: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63979: LD_ADDR_OWVAR 35
63983: PUSH
63984: LD_INT 7
63986: NEG
63987: PPUSH
63988: LD_INT 7
63990: PPUSH
63991: NOP4
63995: ST_TO_ADDR
// animal := CreateHuman ;
63996: NOP4
64000: PUSH
64001: NOP4
64005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64006: NOP4
64010: PPUSH
64011: NOP4
64015: PPUSH
64016: LD_INT 0
64018: PPUSH
64019: NOP4
// end ;
64023: GO 63960
64025: POP
64026: POP
// if apemans then
64027: NOP4
64031: IFFALSE 64154
// for i = 1 to apemans do
64033: NOP4
64037: PUSH
64038: DOUBLE
64039: LD_INT 1
64041: DEC
64042: ST_TO_ADDR
64043: NOP4
64047: PUSH
64048: FOR_TO
64049: IFFALSE 64152
// begin hc_class = class_apeman ;
64051: LD_ADDR_OWVAR 28
64055: PUSH
64056: LD_INT 12
64058: ST_TO_ADDR
// hc_gallery =  ;
64059: LD_ADDR_OWVAR 33
64063: PUSH
64064: LD_STRING 
64066: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64067: LD_ADDR_OWVAR 35
64071: PUSH
64072: LD_INT 5
64074: NEG
64075: PPUSH
64076: LD_INT 5
64078: PPUSH
64079: NOP4
64083: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64084: LD_ADDR_OWVAR 31
64088: PUSH
64089: LD_INT 1
64091: PPUSH
64092: LD_INT 3
64094: PPUSH
64095: NOP4
64099: PUSH
64100: LD_INT 1
64102: PPUSH
64103: LD_INT 3
64105: PPUSH
64106: NOP4
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: ST_TO_ADDR
// animal := CreateHuman ;
64123: NOP4
64127: PUSH
64128: NOP4
64132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64133: NOP4
64137: PPUSH
64138: NOP4
64142: PPUSH
64143: LD_INT 0
64145: PPUSH
64146: NOP4
// end ;
64150: GO 64048
64152: POP
64153: POP
// if enchidnas then
64154: NOP4
64158: IFFALSE 64225
// for i = 1 to enchidnas do
64160: NOP4
64164: PUSH
64165: DOUBLE
64166: LD_INT 1
64168: DEC
64169: ST_TO_ADDR
64170: NOP4
64174: PUSH
64175: FOR_TO
64176: IFFALSE 64223
// begin hc_class = 13 ;
64178: LD_ADDR_OWVAR 28
64182: PUSH
64183: LD_INT 13
64185: ST_TO_ADDR
// hc_gallery =  ;
64186: LD_ADDR_OWVAR 33
64190: PUSH
64191: LD_STRING 
64193: ST_TO_ADDR
// animal := CreateHuman ;
64194: NOP4
64198: PUSH
64199: NOP4
64203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64204: NOP4
64208: PPUSH
64209: NOP4
64213: PPUSH
64214: LD_INT 0
64216: PPUSH
64217: NOP4
// end ;
64221: GO 64175
64223: POP
64224: POP
// if fishes then
64225: NOP4
64229: IFFALSE 64296
// for i = 1 to fishes do
64231: NOP4
64235: PUSH
64236: DOUBLE
64237: LD_INT 1
64239: DEC
64240: ST_TO_ADDR
64241: NOP4
64245: PUSH
64246: FOR_TO
64247: IFFALSE 64294
// begin hc_class = 20 ;
64249: LD_ADDR_OWVAR 28
64253: PUSH
64254: LD_INT 20
64256: ST_TO_ADDR
// hc_gallery =  ;
64257: LD_ADDR_OWVAR 33
64261: PUSH
64262: LD_STRING 
64264: ST_TO_ADDR
// animal := CreateHuman ;
64265: NOP4
64269: PUSH
64270: NOP4
64274: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64275: NOP4
64279: PPUSH
64280: NOP4
64284: PPUSH
64285: LD_INT 0
64287: PPUSH
64288: NOP4
// end ;
64292: GO 64246
64294: POP
64295: POP
// end ;
64296: LD_VAR 0 10
64300: RET
// export function WantHeal ( sci , unit ) ; begin
64301: LD_INT 0
64303: PPUSH
// if GetTaskList ( sci ) > 0 then
64304: NOP4
64308: PPUSH
64309: NOP4
64313: PUSH
64314: LD_INT 0
64316: GREATER
64317: IFFALSE 64387
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64319: NOP4
64323: PPUSH
64324: NOP4
64328: PUSH
64329: LD_INT 1
64331: ARRAY
64332: PUSH
64333: LD_INT 1
64335: ARRAY
64336: PUSH
64337: LD_STRING l
64339: EQUAL
64340: PUSH
64341: NOP4
64345: PPUSH
64346: NOP4
64350: PUSH
64351: LD_INT 1
64353: ARRAY
64354: PUSH
64355: LD_INT 4
64357: ARRAY
64358: PUSH
64359: NOP4
64363: EQUAL
64364: AND
64365: IFFALSE 64377
// result := true else
64367: NOP4
64371: PUSH
64372: LD_INT 1
64374: ST_TO_ADDR
64375: GO 64385
// result := false ;
64377: NOP4
64381: PUSH
64382: LD_INT 0
64384: ST_TO_ADDR
// end else
64385: GO 64395
// result := false ;
64387: NOP4
64391: PUSH
64392: LD_INT 0
64394: ST_TO_ADDR
// end ;
64395: LD_VAR 0 3
64399: RET
// export function HealTarget ( sci ) ; begin
64400: LD_INT 0
64402: PPUSH
// if not sci then
64403: NOP4
64407: NOT
64408: IFFALSE 64412
// exit ;
64410: GO 64477
// result := 0 ;
64412: NOP4
64416: PUSH
64417: LD_INT 0
64419: ST_TO_ADDR
// if GetTaskList ( sci ) then
64420: NOP4
64424: PPUSH
64425: NOP4
64429: IFFALSE 64477
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64431: NOP4
64435: PPUSH
64436: NOP4
64440: PUSH
64441: LD_INT 1
64443: ARRAY
64444: PUSH
64445: LD_INT 1
64447: ARRAY
64448: PUSH
64449: LD_STRING l
64451: EQUAL
64452: IFFALSE 64477
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64454: NOP4
64458: PUSH
64459: NOP4
64463: PPUSH
64464: NOP4
64468: PUSH
64469: LD_INT 1
64471: ARRAY
64472: PUSH
64473: LD_INT 4
64475: ARRAY
64476: ST_TO_ADDR
// end ;
64477: LD_VAR 0 2
64481: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
64482: LD_INT 0
64484: PPUSH
64485: PPUSH
64486: PPUSH
64487: PPUSH
64488: PPUSH
64489: PPUSH
64490: PPUSH
64491: PPUSH
64492: PPUSH
64493: PPUSH
64494: PPUSH
64495: PPUSH
64496: PPUSH
64497: PPUSH
64498: PPUSH
64499: PPUSH
64500: PPUSH
64501: PPUSH
64502: PPUSH
64503: PPUSH
64504: PPUSH
64505: PPUSH
64506: PPUSH
64507: PPUSH
64508: PPUSH
64509: PPUSH
64510: PPUSH
64511: PPUSH
64512: PPUSH
64513: PPUSH
64514: PPUSH
64515: PPUSH
64516: PPUSH
64517: PPUSH
// if not list then
64518: NOP4
64522: NOT
64523: IFFALSE 64527
// exit ;
64525: GO 69153
// base := list [ 1 ] ;
64527: NOP4
64531: PUSH
64532: NOP4
64536: PUSH
64537: LD_INT 1
64539: ARRAY
64540: ST_TO_ADDR
// group := list [ 2 ] ;
64541: NOP4
64545: PUSH
64546: NOP4
64550: PUSH
64551: LD_INT 2
64553: ARRAY
64554: ST_TO_ADDR
// path := list [ 3 ] ;
64555: NOP4
64559: PUSH
64560: NOP4
64564: PUSH
64565: LD_INT 3
64567: ARRAY
64568: ST_TO_ADDR
// flags := list [ 4 ] ;
64569: NOP4
64573: PUSH
64574: NOP4
64578: PUSH
64579: LD_INT 4
64581: ARRAY
64582: ST_TO_ADDR
// mined := [ ] ;
64583: NOP4
64587: PUSH
64588: EMPTY
64589: ST_TO_ADDR
// bombed := [ ] ;
64590: NOP4
64594: PUSH
64595: EMPTY
64596: ST_TO_ADDR
// healers := [ ] ;
64597: NOP4
64601: PUSH
64602: EMPTY
64603: ST_TO_ADDR
// to_heal := [ ] ;
64604: NOP4
64608: PUSH
64609: EMPTY
64610: ST_TO_ADDR
// repairs := [ ] ;
64611: NOP4
64615: PUSH
64616: EMPTY
64617: ST_TO_ADDR
// to_repair := [ ] ;
64618: NOP4
64622: PUSH
64623: EMPTY
64624: ST_TO_ADDR
// if not group or not path then
64625: NOP4
64629: NOT
64630: PUSH
64631: NOP4
64635: NOT
64636: OR
64637: IFFALSE 64641
// exit ;
64639: GO 69153
// side := GetSide ( group [ 1 ] ) ;
64641: NOP4
64645: PUSH
64646: NOP4
64650: PUSH
64651: LD_INT 1
64653: ARRAY
64654: PPUSH
64655: NOP4
64659: ST_TO_ADDR
// if flags then
64660: NOP4
64664: IFFALSE 64808
// begin f_ignore_area := flags [ 1 ] ;
64666: NOP4
64670: PUSH
64671: NOP4
64675: PUSH
64676: LD_INT 1
64678: ARRAY
64679: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
64680: NOP4
64684: PUSH
64685: NOP4
64689: PUSH
64690: LD_INT 2
64692: ARRAY
64693: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
64694: NOP4
64698: PUSH
64699: NOP4
64703: PUSH
64704: LD_INT 3
64706: ARRAY
64707: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
64708: NOP4
64712: PUSH
64713: NOP4
64717: PUSH
64718: LD_INT 4
64720: ARRAY
64721: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
64722: NOP4
64726: PUSH
64727: NOP4
64731: PUSH
64732: LD_INT 5
64734: ARRAY
64735: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
64736: NOP4
64740: PUSH
64741: NOP4
64745: PUSH
64746: LD_INT 6
64748: ARRAY
64749: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
64750: NOP4
64754: PUSH
64755: NOP4
64759: PUSH
64760: LD_INT 7
64762: ARRAY
64763: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
64764: NOP4
64768: PUSH
64769: NOP4
64773: PUSH
64774: LD_INT 8
64776: ARRAY
64777: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
64778: NOP4
64782: PUSH
64783: NOP4
64787: PUSH
64788: LD_INT 9
64790: ARRAY
64791: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
64792: NOP4
64796: PUSH
64797: NOP4
64801: PUSH
64802: LD_INT 10
64804: ARRAY
64805: ST_TO_ADDR
// end else
64806: GO 64888
// begin f_ignore_area := false ;
64808: NOP4
64812: PUSH
64813: LD_INT 0
64815: ST_TO_ADDR
// f_capture := false ;
64816: NOP4
64820: PUSH
64821: LD_INT 0
64823: ST_TO_ADDR
// f_ignore_civ := false ;
64824: NOP4
64828: PUSH
64829: LD_INT 0
64831: ST_TO_ADDR
// f_murder := false ;
64832: NOP4
64836: PUSH
64837: LD_INT 0
64839: ST_TO_ADDR
// f_mines := false ;
64840: NOP4
64844: PUSH
64845: LD_INT 0
64847: ST_TO_ADDR
// f_repair := false ;
64848: NOP4
64852: PUSH
64853: LD_INT 0
64855: ST_TO_ADDR
// f_heal := false ;
64856: NOP4
64860: PUSH
64861: LD_INT 0
64863: ST_TO_ADDR
// f_spacetime := false ;
64864: NOP4
64868: PUSH
64869: LD_INT 0
64871: ST_TO_ADDR
// f_attack_depot := false ;
64872: NOP4
64876: PUSH
64877: LD_INT 0
64879: ST_TO_ADDR
// f_crawl := false ;
64880: NOP4
64884: PUSH
64885: LD_INT 0
64887: ST_TO_ADDR
// end ; if f_heal then
64888: NOP4
64892: IFFALSE 64919
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
64894: NOP4
64898: PUSH
64899: NOP4
64903: PPUSH
64904: LD_INT 25
64906: PUSH
64907: LD_INT 4
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PPUSH
64914: NOP4
64918: ST_TO_ADDR
// if f_repair then
64919: NOP4
64923: IFFALSE 64950
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
64925: NOP4
64929: PUSH
64930: NOP4
64934: PPUSH
64935: LD_INT 25
64937: PUSH
64938: LD_INT 3
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PPUSH
64945: NOP4
64949: ST_TO_ADDR
// units_path := [ ] ;
64950: NOP4
64954: PUSH
64955: EMPTY
64956: ST_TO_ADDR
// for i = 1 to group do
64957: NOP4
64961: PUSH
64962: DOUBLE
64963: LD_INT 1
64965: DEC
64966: ST_TO_ADDR
64967: NOP4
64971: PUSH
64972: FOR_TO
64973: IFFALSE 65002
// units_path := Replace ( units_path , i , path ) ;
64975: NOP4
64979: PUSH
64980: NOP4
64984: PPUSH
64985: NOP4
64989: PPUSH
64990: NOP4
64994: PPUSH
64995: NOP4
64999: ST_TO_ADDR
65000: GO 64972
65002: POP
65003: POP
// repeat for i = group downto 1 do
65004: NOP4
65008: PUSH
65009: DOUBLE
65010: NOP4
65014: INC
65015: ST_TO_ADDR
65016: LD_INT 1
65018: PUSH
65019: FOR_DOWNTO
65020: IFFALSE 69116
// begin wait ( 5 ) ;
65022: LD_INT 5
65024: PPUSH
65025: NOP4
// tmp := [ ] ;
65029: NOP4
65033: PUSH
65034: EMPTY
65035: ST_TO_ADDR
// attacking := false ;
65036: NOP4
65040: PUSH
65041: LD_INT 0
65043: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
65044: NOP4
65048: PUSH
65049: NOP4
65053: ARRAY
65054: PPUSH
65055: NOP4
65059: PUSH
65060: NOP4
65064: PUSH
65065: NOP4
65069: ARRAY
65070: NOT
65071: OR
65072: IFFALSE 65181
// begin if GetType ( group [ i ] ) = unit_human then
65074: NOP4
65078: PUSH
65079: NOP4
65083: ARRAY
65084: PPUSH
65085: NOP4
65089: PUSH
65090: LD_INT 1
65092: EQUAL
65093: IFFALSE 65139
// begin to_heal := to_heal diff group [ i ] ;
65095: NOP4
65099: PUSH
65100: NOP4
65104: PUSH
65105: NOP4
65109: PUSH
65110: NOP4
65114: ARRAY
65115: DIFF
65116: ST_TO_ADDR
// healers := healers diff group [ i ] ;
65117: NOP4
65121: PUSH
65122: NOP4
65126: PUSH
65127: NOP4
65131: PUSH
65132: NOP4
65136: ARRAY
65137: DIFF
65138: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
65139: NOP4
65143: PUSH
65144: NOP4
65148: PPUSH
65149: NOP4
65153: PPUSH
65154: NOP4
65158: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
65159: NOP4
65163: PUSH
65164: NOP4
65168: PPUSH
65169: NOP4
65173: PPUSH
65174: NOP4
65178: ST_TO_ADDR
// continue ;
65179: GO 65019
// end ; if f_repair then
65181: NOP4
65185: IFFALSE 65674
// begin if GetType ( group [ i ] ) = unit_vehicle then
65187: NOP4
65191: PUSH
65192: NOP4
65196: ARRAY
65197: PPUSH
65198: NOP4
65202: PUSH
65203: LD_INT 2
65205: EQUAL
65206: IFFALSE 65396
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
65208: NOP4
65212: PUSH
65213: NOP4
65217: ARRAY
65218: PPUSH
65219: NOP4
65223: PUSH
65224: LD_INT 700
65226: LESS
65227: PUSH
65228: NOP4
65232: PUSH
65233: NOP4
65237: ARRAY
65238: PUSH
65239: NOP4
65243: IN
65244: NOT
65245: AND
65246: IFFALSE 65270
// to_repair := to_repair union group [ i ] ;
65248: NOP4
65252: PUSH
65253: NOP4
65257: PUSH
65258: NOP4
65262: PUSH
65263: NOP4
65267: ARRAY
65268: UNION
65269: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
65270: NOP4
65274: PUSH
65275: NOP4
65279: ARRAY
65280: PPUSH
65281: NOP4
65285: PUSH
65286: LD_INT 1000
65288: EQUAL
65289: PUSH
65290: NOP4
65294: PUSH
65295: NOP4
65299: ARRAY
65300: PUSH
65301: NOP4
65305: IN
65306: AND
65307: IFFALSE 65331
// to_repair := to_repair diff group [ i ] ;
65309: NOP4
65313: PUSH
65314: NOP4
65318: PUSH
65319: NOP4
65323: PUSH
65324: NOP4
65328: ARRAY
65329: DIFF
65330: ST_TO_ADDR
// if group [ i ] in to_repair then
65331: NOP4
65335: PUSH
65336: NOP4
65340: ARRAY
65341: PUSH
65342: NOP4
65346: IN
65347: IFFALSE 65394
// begin if not IsInArea ( group [ i ] , f_repair ) then
65349: NOP4
65353: PUSH
65354: NOP4
65358: ARRAY
65359: PPUSH
65360: NOP4
65364: PPUSH
65365: NOP4
65369: NOT
65370: IFFALSE 65392
// ComMoveToArea ( group [ i ] , f_repair ) ;
65372: NOP4
65376: PUSH
65377: NOP4
65381: ARRAY
65382: PPUSH
65383: NOP4
65387: PPUSH
65388: NOP4
// continue ;
65392: GO 65019
// end ; end else
65394: GO 65674
// if group [ i ] in repairs then
65396: NOP4
65400: PUSH
65401: NOP4
65405: ARRAY
65406: PUSH
65407: NOP4
65411: IN
65412: IFFALSE 65674
// begin if IsInUnit ( group [ i ] ) then
65414: NOP4
65418: PUSH
65419: NOP4
65423: ARRAY
65424: PPUSH
65425: NOP4
65429: IFFALSE 65497
// begin z := IsInUnit ( group [ i ] ) ;
65431: NOP4
65435: PUSH
65436: NOP4
65440: PUSH
65441: NOP4
65445: ARRAY
65446: PPUSH
65447: NOP4
65451: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
65452: NOP4
65456: PUSH
65457: NOP4
65461: IN
65462: PUSH
65463: NOP4
65467: PPUSH
65468: NOP4
65472: PPUSH
65473: NOP4
65477: AND
65478: IFFALSE 65495
// ComExitVehicle ( group [ i ] ) ;
65480: NOP4
65484: PUSH
65485: NOP4
65489: ARRAY
65490: PPUSH
65491: NOP4
// end else
65495: GO 65674
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
65497: NOP4
65501: PUSH
65502: NOP4
65506: PPUSH
65507: LD_INT 95
65509: PUSH
65510: NOP4
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 58
65521: PUSH
65522: EMPTY
65523: LIST
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PPUSH
65529: NOP4
65533: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
65534: NOP4
65538: PUSH
65539: NOP4
65543: ARRAY
65544: PPUSH
65545: NOP4
65549: NOT
65550: IFFALSE 65672
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
65552: NOP4
65556: PUSH
65557: NOP4
65561: PPUSH
65562: NOP4
65566: PUSH
65567: NOP4
65571: ARRAY
65572: PPUSH
65573: NOP4
65577: ST_TO_ADDR
// if not x then
65578: NOP4
65582: NOT
65583: IFFALSE 65587
// continue ;
65585: GO 65019
// if GetLives ( x ) < 1000 then
65587: NOP4
65591: PPUSH
65592: NOP4
65596: PUSH
65597: LD_INT 1000
65599: LESS
65600: IFFALSE 65624
// ComRepairVehicle ( group [ i ] , x ) else
65602: NOP4
65606: PUSH
65607: NOP4
65611: ARRAY
65612: PPUSH
65613: NOP4
65617: PPUSH
65618: NOP4
65622: GO 65672
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
65624: NOP4
65628: PUSH
65629: NOP4
65633: PUSH
65634: NOP4
65638: ARRAY
65639: PPUSH
65640: NOP4
65644: PUSH
65645: LD_INT 1000
65647: LESS
65648: AND
65649: NOT
65650: IFFALSE 65672
// ComEnterUnit ( group [ i ] , x ) ;
65652: NOP4
65656: PUSH
65657: NOP4
65661: ARRAY
65662: PPUSH
65663: NOP4
65667: PPUSH
65668: NOP4
// end ; continue ;
65672: GO 65019
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
65674: NOP4
65678: PUSH
65679: NOP4
65683: PUSH
65684: NOP4
65688: ARRAY
65689: PPUSH
65690: NOP4
65694: PUSH
65695: LD_INT 1
65697: EQUAL
65698: AND
65699: IFFALSE 66177
// begin if group [ i ] in healers then
65701: NOP4
65705: PUSH
65706: NOP4
65710: ARRAY
65711: PUSH
65712: NOP4
65716: IN
65717: IFFALSE 65990
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
65719: NOP4
65723: PUSH
65724: NOP4
65728: ARRAY
65729: PPUSH
65730: NOP4
65734: PPUSH
65735: NOP4
65739: NOT
65740: PUSH
65741: NOP4
65745: PUSH
65746: NOP4
65750: ARRAY
65751: PPUSH
65752: NOP4
65756: NOT
65757: AND
65758: IFFALSE 65782
// ComMoveToArea ( group [ i ] , f_heal ) else
65760: NOP4
65764: PUSH
65765: NOP4
65769: ARRAY
65770: PPUSH
65771: NOP4
65775: PPUSH
65776: NOP4
65780: GO 65988
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
65782: NOP4
65786: PUSH
65787: NOP4
65791: ARRAY
65792: PPUSH
65793: NOP4
65797: PPUSH
65798: NOP4
65802: PUSH
65803: LD_INT 1000
65805: EQUAL
65806: IFFALSE 65825
// ComStop ( group [ i ] ) else
65808: NOP4
65812: PUSH
65813: NOP4
65817: ARRAY
65818: PPUSH
65819: NOP4
65823: GO 65988
// if not HasTask ( group [ i ] ) and to_heal then
65825: NOP4
65829: PUSH
65830: NOP4
65834: ARRAY
65835: PPUSH
65836: NOP4
65840: NOT
65841: PUSH
65842: NOP4
65846: AND
65847: IFFALSE 65988
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
65849: NOP4
65853: PUSH
65854: NOP4
65858: PPUSH
65859: LD_INT 3
65861: PUSH
65862: LD_INT 54
65864: PUSH
65865: EMPTY
65866: LIST
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PPUSH
65872: NOP4
65876: PPUSH
65877: NOP4
65881: PUSH
65882: NOP4
65886: ARRAY
65887: PPUSH
65888: NOP4
65892: ST_TO_ADDR
// if z then
65893: NOP4
65897: IFFALSE 65988
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
65899: LD_INT 91
65901: PUSH
65902: NOP4
65906: PUSH
65907: LD_INT 10
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 81
65917: PUSH
65918: NOP4
65922: PPUSH
65923: NOP4
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PPUSH
65936: NOP4
65940: PUSH
65941: LD_INT 0
65943: EQUAL
65944: IFFALSE 65968
// ComHeal ( group [ i ] , z ) else
65946: NOP4
65950: PUSH
65951: NOP4
65955: ARRAY
65956: PPUSH
65957: NOP4
65961: PPUSH
65962: NOP4
65966: GO 65988
// ComMoveToArea ( group [ i ] , f_heal ) ;
65968: NOP4
65972: PUSH
65973: NOP4
65977: ARRAY
65978: PPUSH
65979: NOP4
65983: PPUSH
65984: NOP4
// end ; continue ;
65988: GO 65019
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
65990: NOP4
65994: PUSH
65995: NOP4
65999: ARRAY
66000: PPUSH
66001: NOP4
66005: PUSH
66006: LD_INT 700
66008: LESS
66009: PUSH
66010: NOP4
66014: PUSH
66015: NOP4
66019: ARRAY
66020: PUSH
66021: NOP4
66025: IN
66026: NOT
66027: AND
66028: IFFALSE 66052
// to_heal := to_heal union group [ i ] ;
66030: NOP4
66034: PUSH
66035: NOP4
66039: PUSH
66040: NOP4
66044: PUSH
66045: NOP4
66049: ARRAY
66050: UNION
66051: ST_TO_ADDR
// if group [ i ] in to_heal then
66052: NOP4
66056: PUSH
66057: NOP4
66061: ARRAY
66062: PUSH
66063: NOP4
66067: IN
66068: IFFALSE 66177
// begin if GetLives ( group [ i ] ) = 1000 then
66070: NOP4
66074: PUSH
66075: NOP4
66079: ARRAY
66080: PPUSH
66081: NOP4
66085: PUSH
66086: LD_INT 1000
66088: EQUAL
66089: IFFALSE 66115
// to_heal := to_heal diff group [ i ] else
66091: NOP4
66095: PUSH
66096: NOP4
66100: PUSH
66101: NOP4
66105: PUSH
66106: NOP4
66110: ARRAY
66111: DIFF
66112: ST_TO_ADDR
66113: GO 66177
// begin if not IsInArea ( group [ i ] , to_heal ) then
66115: NOP4
66119: PUSH
66120: NOP4
66124: ARRAY
66125: PPUSH
66126: NOP4
66130: PPUSH
66131: NOP4
66135: NOT
66136: IFFALSE 66160
// ComMoveToArea ( group [ i ] , f_heal ) else
66138: NOP4
66142: PUSH
66143: NOP4
66147: ARRAY
66148: PPUSH
66149: NOP4
66153: PPUSH
66154: NOP4
66158: GO 66175
// ComHold ( group [ i ] ) ;
66160: NOP4
66164: PUSH
66165: NOP4
66169: ARRAY
66170: PPUSH
66171: NOP4
// continue ;
66175: GO 65019
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
66177: NOP4
66181: PUSH
66182: NOP4
66186: ARRAY
66187: PPUSH
66188: LD_INT 10
66190: PPUSH
66191: NOP4
66195: NOT
66196: PUSH
66197: NOP4
66201: PUSH
66202: NOP4
66206: ARRAY
66207: PUSH
66208: EMPTY
66209: EQUAL
66210: NOT
66211: AND
66212: IFFALSE 66478
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
66214: NOP4
66218: PUSH
66219: NOP4
66223: ARRAY
66224: PPUSH
66225: NOP4
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: LD_INT 2
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: IN
66240: IFFALSE 66281
// if GetFuel ( group [ i ] ) < 10 then
66242: NOP4
66246: PUSH
66247: NOP4
66251: ARRAY
66252: PPUSH
66253: NOP4
66257: PUSH
66258: LD_INT 10
66260: LESS
66261: IFFALSE 66281
// SetFuel ( group [ i ] , 12 ) ;
66263: NOP4
66267: PUSH
66268: NOP4
66272: ARRAY
66273: PPUSH
66274: LD_INT 12
66276: PPUSH
66277: NOP4
// if units_path [ i ] then
66281: NOP4
66285: PUSH
66286: NOP4
66290: ARRAY
66291: IFFALSE 66476
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
66293: NOP4
66297: PUSH
66298: NOP4
66302: ARRAY
66303: PPUSH
66304: NOP4
66308: PUSH
66309: NOP4
66313: ARRAY
66314: PUSH
66315: LD_INT 1
66317: ARRAY
66318: PUSH
66319: LD_INT 1
66321: ARRAY
66322: PPUSH
66323: NOP4
66327: PUSH
66328: NOP4
66332: ARRAY
66333: PUSH
66334: LD_INT 1
66336: ARRAY
66337: PUSH
66338: LD_INT 2
66340: ARRAY
66341: PPUSH
66342: NOP4
66346: PUSH
66347: LD_INT 6
66349: GREATER
66350: IFFALSE 66425
// begin if not HasTask ( group [ i ] ) then
66352: NOP4
66356: PUSH
66357: NOP4
66361: ARRAY
66362: PPUSH
66363: NOP4
66367: NOT
66368: IFFALSE 66423
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
66370: NOP4
66374: PUSH
66375: NOP4
66379: ARRAY
66380: PPUSH
66381: NOP4
66385: PUSH
66386: NOP4
66390: ARRAY
66391: PUSH
66392: LD_INT 1
66394: ARRAY
66395: PUSH
66396: LD_INT 1
66398: ARRAY
66399: PPUSH
66400: NOP4
66404: PUSH
66405: NOP4
66409: ARRAY
66410: PUSH
66411: LD_INT 1
66413: ARRAY
66414: PUSH
66415: LD_INT 2
66417: ARRAY
66418: PPUSH
66419: NOP4
// end else
66423: GO 66476
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
66425: NOP4
66429: PUSH
66430: NOP4
66434: PUSH
66435: NOP4
66439: ARRAY
66440: PPUSH
66441: LD_INT 1
66443: PPUSH
66444: NOP4
66448: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
66449: NOP4
66453: PUSH
66454: NOP4
66458: PPUSH
66459: NOP4
66463: PPUSH
66464: NOP4
66468: PPUSH
66469: NOP4
66473: ST_TO_ADDR
// continue ;
66474: GO 65019
// end ; end ; end else
66476: GO 69114
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
66478: NOP4
66482: PUSH
66483: LD_INT 81
66485: PUSH
66486: NOP4
66490: PUSH
66491: NOP4
66495: ARRAY
66496: PPUSH
66497: NOP4
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PPUSH
66506: NOP4
66510: ST_TO_ADDR
// if not tmp then
66511: NOP4
66515: NOT
66516: IFFALSE 66520
// continue ;
66518: GO 65019
// if f_ignore_area then
66520: NOP4
66524: IFFALSE 66612
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
66526: NOP4
66530: PUSH
66531: NOP4
66535: PPUSH
66536: LD_INT 3
66538: PUSH
66539: LD_INT 92
66541: PUSH
66542: NOP4
66546: PUSH
66547: LD_INT 1
66549: ARRAY
66550: PUSH
66551: NOP4
66555: PUSH
66556: LD_INT 2
66558: ARRAY
66559: PUSH
66560: NOP4
66564: PUSH
66565: LD_INT 3
66567: ARRAY
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PPUSH
66579: NOP4
66583: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
66584: NOP4
66588: PUSH
66589: NOP4
66593: DIFF
66594: IFFALSE 66612
// tmp := tmp diff tmp2 ;
66596: NOP4
66600: PUSH
66601: NOP4
66605: PUSH
66606: NOP4
66610: DIFF
66611: ST_TO_ADDR
// end ; if not f_murder then
66612: NOP4
66616: NOT
66617: IFFALSE 66675
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
66619: NOP4
66623: PUSH
66624: NOP4
66628: PPUSH
66629: LD_INT 3
66631: PUSH
66632: LD_INT 50
66634: PUSH
66635: EMPTY
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PPUSH
66642: NOP4
66646: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
66647: NOP4
66651: PUSH
66652: NOP4
66656: DIFF
66657: IFFALSE 66675
// tmp := tmp diff tmp2 ;
66659: NOP4
66663: PUSH
66664: NOP4
66668: PUSH
66669: NOP4
66673: DIFF
66674: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
66675: NOP4
66679: PUSH
66680: NOP4
66684: PUSH
66685: NOP4
66689: ARRAY
66690: PPUSH
66691: NOP4
66695: PPUSH
66696: LD_INT 1
66698: PPUSH
66699: LD_INT 1
66701: PPUSH
66702: NOP4
66706: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
66707: NOP4
66711: PUSH
66712: NOP4
66716: ARRAY
66717: PPUSH
66718: NOP4
66722: PUSH
66723: LD_INT 1
66725: EQUAL
66726: IFFALSE 67174
// begin if WantPlant ( group [ i ] ) then
66728: NOP4
66732: PUSH
66733: NOP4
66737: ARRAY
66738: PPUSH
66739: NOP4
66743: IFFALSE 66747
// continue ;
66745: GO 65019
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
66747: NOP4
66751: PUSH
66752: NOP4
66756: PUSH
66757: NOP4
66761: ARRAY
66762: PPUSH
66763: NOP4
66767: NOT
66768: AND
66769: PUSH
66770: NOP4
66774: PUSH
66775: LD_INT 1
66777: ARRAY
66778: PUSH
66779: NOP4
66783: PPUSH
66784: LD_INT 21
66786: PUSH
66787: LD_INT 2
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 58
66796: PUSH
66797: EMPTY
66798: LIST
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PPUSH
66804: NOP4
66808: IN
66809: AND
66810: IFFALSE 66846
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
66812: NOP4
66816: PUSH
66817: NOP4
66821: ARRAY
66822: PPUSH
66823: NOP4
66827: PUSH
66828: LD_INT 1
66830: ARRAY
66831: PPUSH
66832: NOP4
// attacking := true ;
66836: NOP4
66840: PUSH
66841: LD_INT 1
66843: ST_TO_ADDR
// continue ;
66844: GO 65019
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
66846: NOP4
66850: PUSH
66851: NOP4
66855: PUSH
66856: NOP4
66860: ARRAY
66861: PPUSH
66862: NOP4
66866: PUSH
66867: LD_INT 1
66869: EQUAL
66870: AND
66871: PUSH
66872: NOP4
66876: PUSH
66877: NOP4
66881: ARRAY
66882: PPUSH
66883: NOP4
66887: PUSH
66888: LD_INT 800
66890: LESS
66891: AND
66892: PUSH
66893: NOP4
66897: PUSH
66898: NOP4
66902: ARRAY
66903: PPUSH
66904: NOP4
66908: NOT
66909: AND
66910: IFFALSE 66927
// ComCrawl ( group [ i ] ) ;
66912: NOP4
66916: PUSH
66917: NOP4
66921: ARRAY
66922: PPUSH
66923: NOP4
// if f_mines then
66927: NOP4
66931: IFFALSE 67174
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
66933: NOP4
66937: PUSH
66938: LD_INT 1
66940: ARRAY
66941: PPUSH
66942: NOP4
66946: PUSH
66947: LD_INT 3
66949: EQUAL
66950: PUSH
66951: NOP4
66955: PUSH
66956: LD_INT 1
66958: ARRAY
66959: PUSH
66960: NOP4
66964: IN
66965: NOT
66966: AND
66967: IFFALSE 67174
// begin x := GetX ( tmp [ 1 ] ) ;
66969: NOP4
66973: PUSH
66974: NOP4
66978: PUSH
66979: LD_INT 1
66981: ARRAY
66982: PPUSH
66983: NOP4
66987: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
66988: NOP4
66992: PUSH
66993: NOP4
66997: PUSH
66998: LD_INT 1
67000: ARRAY
67001: PPUSH
67002: NOP4
67006: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
67007: NOP4
67011: PUSH
67012: NOP4
67016: PUSH
67017: NOP4
67021: ARRAY
67022: PPUSH
67023: NOP4
67027: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
67028: NOP4
67032: PUSH
67033: NOP4
67037: ARRAY
67038: PPUSH
67039: NOP4
67043: PPUSH
67044: NOP4
67048: PPUSH
67049: NOP4
67053: PUSH
67054: LD_INT 1
67056: ARRAY
67057: PPUSH
67058: NOP4
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
67062: NOP4
67066: PUSH
67067: NOP4
67071: ARRAY
67072: PPUSH
67073: NOP4
67077: PPUSH
67078: NOP4
67082: PPUSH
67083: LD_INT 7
67085: PPUSH
67086: NOP4
67090: PPUSH
67091: NOP4
67095: PPUSH
67096: NOP4
67100: PPUSH
67101: LD_INT 7
67103: PPUSH
67104: NOP4
67108: PPUSH
67109: NOP4
// SetTag ( group [ i ] , 71 ) ;
67113: NOP4
67117: PUSH
67118: NOP4
67122: ARRAY
67123: PPUSH
67124: LD_INT 71
67126: PPUSH
67127: NOP4
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
67131: NOP4
67135: PUSH
67136: NOP4
67140: PPUSH
67141: NOP4
67145: PUSH
67146: LD_INT 1
67148: PLUS
67149: PPUSH
67150: NOP4
67154: PUSH
67155: LD_INT 1
67157: ARRAY
67158: PPUSH
67159: NOP4
67163: ST_TO_ADDR
// attacking := true ;
67164: NOP4
67168: PUSH
67169: LD_INT 1
67171: ST_TO_ADDR
// continue ;
67172: GO 65019
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
67174: NOP4
67178: PUSH
67179: NOP4
67183: ARRAY
67184: PPUSH
67185: NOP4
67189: PUSH
67190: LD_INT 17
67192: EQUAL
67193: PUSH
67194: NOP4
67198: PUSH
67199: NOP4
67203: ARRAY
67204: PPUSH
67205: NOP4
67209: PUSH
67210: LD_INT 71
67212: EQUAL
67213: NOT
67214: AND
67215: IFFALSE 67361
// begin attacking := false ;
67217: NOP4
67221: PUSH
67222: LD_INT 0
67224: ST_TO_ADDR
// k := 5 ;
67225: NOP4
67229: PUSH
67230: LD_INT 5
67232: ST_TO_ADDR
// if tmp < k then
67233: NOP4
67237: PUSH
67238: NOP4
67242: LESS
67243: IFFALSE 67255
// k := tmp ;
67245: NOP4
67249: PUSH
67250: NOP4
67254: ST_TO_ADDR
// for j = 1 to k do
67255: NOP4
67259: PUSH
67260: DOUBLE
67261: LD_INT 1
67263: DEC
67264: ST_TO_ADDR
67265: NOP4
67269: PUSH
67270: FOR_TO
67271: IFFALSE 67359
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
67273: NOP4
67277: PUSH
67278: NOP4
67282: ARRAY
67283: PUSH
67284: NOP4
67288: PPUSH
67289: LD_INT 58
67291: PUSH
67292: EMPTY
67293: LIST
67294: PPUSH
67295: NOP4
67299: IN
67300: NOT
67301: IFFALSE 67357
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
67303: NOP4
67307: PUSH
67308: NOP4
67312: ARRAY
67313: PPUSH
67314: NOP4
67318: PUSH
67319: NOP4
67323: ARRAY
67324: PPUSH
67325: NOP4
// attacking := true ;
67329: NOP4
67333: PUSH
67334: LD_INT 1
67336: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
67337: NOP4
67341: PUSH
67342: NOP4
67346: ARRAY
67347: PPUSH
67348: LD_INT 71
67350: PPUSH
67351: NOP4
// continue ;
67355: GO 67270
// end ; end ;
67357: GO 67270
67359: POP
67360: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
67361: NOP4
67365: PUSH
67366: NOP4
67370: ARRAY
67371: PPUSH
67372: NOP4
67376: PUSH
67377: LD_INT 8
67379: EQUAL
67380: PUSH
67381: NOP4
67385: PUSH
67386: NOP4
67390: ARRAY
67391: PPUSH
67392: NOP4
67396: PUSH
67397: LD_INT 28
67399: PUSH
67400: LD_INT 45
67402: PUSH
67403: LD_INT 7
67405: PUSH
67406: LD_INT 47
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: IN
67415: OR
67416: IFFALSE 67646
// begin attacking := false ;
67418: NOP4
67422: PUSH
67423: LD_INT 0
67425: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
67426: NOP4
67430: PUSH
67431: LD_INT 1
67433: ARRAY
67434: PPUSH
67435: NOP4
67439: PUSH
67440: LD_INT 32
67442: PUSH
67443: LD_INT 31
67445: PUSH
67446: LD_INT 33
67448: PUSH
67449: LD_INT 4
67451: PUSH
67452: LD_INT 5
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: IN
67462: IFFALSE 67646
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
67464: NOP4
67468: PUSH
67469: NOP4
67473: PUSH
67474: LD_INT 1
67476: ARRAY
67477: PPUSH
67478: NOP4
67482: PPUSH
67483: NOP4
67487: PUSH
67488: LD_INT 1
67490: ARRAY
67491: PPUSH
67492: NOP4
67496: PPUSH
67497: NOP4
67501: PUSH
67502: LD_INT 1
67504: ARRAY
67505: PPUSH
67506: NOP4
67510: PPUSH
67511: NOP4
67515: PUSH
67516: LD_INT 1
67518: ARRAY
67519: PPUSH
67520: NOP4
67524: PPUSH
67525: NOP4
67529: PUSH
67530: LD_INT 1
67532: ARRAY
67533: PPUSH
67534: NOP4
67538: PPUSH
67539: LD_INT 0
67541: PPUSH
67542: NOP4
67546: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
67547: NOP4
67551: PUSH
67552: NOP4
67556: PUSH
67557: NOP4
67561: ARRAY
67562: PPUSH
67563: NOP4
67567: PPUSH
67568: NOP4
67572: ST_TO_ADDR
// if j then
67573: NOP4
67577: IFFALSE 67646
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
67579: NOP4
67583: PUSH
67584: LD_INT 1
67586: ARRAY
67587: PPUSH
67588: NOP4
67592: PUSH
67593: LD_INT 2
67595: ARRAY
67596: PPUSH
67597: NOP4
67601: IFFALSE 67646
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
67603: NOP4
67607: PUSH
67608: NOP4
67612: ARRAY
67613: PPUSH
67614: NOP4
67618: PUSH
67619: LD_INT 1
67621: ARRAY
67622: PPUSH
67623: NOP4
67627: PUSH
67628: LD_INT 2
67630: ARRAY
67631: PPUSH
67632: NOP4
// attacking := true ;
67636: NOP4
67640: PUSH
67641: LD_INT 1
67643: ST_TO_ADDR
// continue ;
67644: GO 65019
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
67646: NOP4
67650: PUSH
67651: NOP4
67655: ARRAY
67656: PPUSH
67657: NOP4
67661: PUSH
67662: LD_INT 11
67664: EQUAL
67665: IFFALSE 67943
// begin k := 10 ;
67667: NOP4
67671: PUSH
67672: LD_INT 10
67674: ST_TO_ADDR
// x := 0 ;
67675: NOP4
67679: PUSH
67680: LD_INT 0
67682: ST_TO_ADDR
// if tmp < k then
67683: NOP4
67687: PUSH
67688: NOP4
67692: LESS
67693: IFFALSE 67705
// k := tmp ;
67695: NOP4
67699: PUSH
67700: NOP4
67704: ST_TO_ADDR
// for j = k downto 1 do
67705: NOP4
67709: PUSH
67710: DOUBLE
67711: NOP4
67715: INC
67716: ST_TO_ADDR
67717: LD_INT 1
67719: PUSH
67720: FOR_DOWNTO
67721: IFFALSE 67796
// begin if GetType ( tmp [ j ] ) = unit_human then
67723: NOP4
67727: PUSH
67728: NOP4
67732: ARRAY
67733: PPUSH
67734: NOP4
67738: PUSH
67739: LD_INT 1
67741: EQUAL
67742: IFFALSE 67794
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
67744: NOP4
67748: PUSH
67749: NOP4
67753: ARRAY
67754: PPUSH
67755: NOP4
67759: PUSH
67760: NOP4
67764: ARRAY
67765: PPUSH
67766: NOP4
// x := tmp [ j ] ;
67770: NOP4
67774: PUSH
67775: NOP4
67779: PUSH
67780: NOP4
67784: ARRAY
67785: ST_TO_ADDR
// attacking := true ;
67786: NOP4
67790: PUSH
67791: LD_INT 1
67793: ST_TO_ADDR
// end ; end ;
67794: GO 67720
67796: POP
67797: POP
// if not x then
67798: NOP4
67802: NOT
67803: IFFALSE 67943
// begin attacking := true ;
67805: NOP4
67809: PUSH
67810: LD_INT 1
67812: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
67813: NOP4
67817: PUSH
67818: NOP4
67822: ARRAY
67823: PPUSH
67824: NOP4
67828: PPUSH
67829: NOP4
67833: PUSH
67834: NOP4
67838: ARRAY
67839: PPUSH
67840: NOP4
67844: PPUSH
67845: NOP4
67849: PUSH
67850: LD_INT 2
67852: ARRAY
67853: PUSH
67854: NOP4
67858: PUSH
67859: LD_INT 1
67861: ARRAY
67862: PPUSH
67863: NOP4
67867: PPUSH
67868: NOP4
67872: PUSH
67873: LD_INT 1
67875: ARRAY
67876: PPUSH
67877: NOP4
67881: PPUSH
67882: NOP4
67886: PUSH
67887: LD_INT 2
67889: ARRAY
67890: EQUAL
67891: IFFALSE 67919
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
67893: NOP4
67897: PUSH
67898: NOP4
67902: ARRAY
67903: PPUSH
67904: NOP4
67908: PUSH
67909: LD_INT 1
67911: ARRAY
67912: PPUSH
67913: NOP4
67917: GO 67943
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
67919: NOP4
67923: PUSH
67924: NOP4
67928: ARRAY
67929: PPUSH
67930: NOP4
67934: PUSH
67935: LD_INT 1
67937: ARRAY
67938: PPUSH
67939: NOP4
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
67943: NOP4
67947: PUSH
67948: NOP4
67952: ARRAY
67953: PPUSH
67954: NOP4
67958: PUSH
67959: LD_INT 29
67961: EQUAL
67962: IFFALSE 68328
// begin if WantsToAttack ( group [ i ] ) in bombed then
67964: NOP4
67968: PUSH
67969: NOP4
67973: ARRAY
67974: PPUSH
67975: NOP4
67979: PUSH
67980: NOP4
67984: IN
67985: IFFALSE 67989
// continue ;
67987: GO 65019
// k := 8 ;
67989: NOP4
67993: PUSH
67994: LD_INT 8
67996: ST_TO_ADDR
// x := 0 ;
67997: NOP4
68001: PUSH
68002: LD_INT 0
68004: ST_TO_ADDR
// if tmp < k then
68005: NOP4
68009: PUSH
68010: NOP4
68014: LESS
68015: IFFALSE 68027
// k := tmp ;
68017: NOP4
68021: PUSH
68022: NOP4
68026: ST_TO_ADDR
// for j = 1 to k do
68027: NOP4
68031: PUSH
68032: DOUBLE
68033: LD_INT 1
68035: DEC
68036: ST_TO_ADDR
68037: NOP4
68041: PUSH
68042: FOR_TO
68043: IFFALSE 68175
// begin if GetType ( tmp [ j ] ) = unit_building then
68045: NOP4
68049: PUSH
68050: NOP4
68054: ARRAY
68055: PPUSH
68056: NOP4
68060: PUSH
68061: LD_INT 3
68063: EQUAL
68064: IFFALSE 68173
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
68066: NOP4
68070: PUSH
68071: NOP4
68075: ARRAY
68076: PUSH
68077: NOP4
68081: IN
68082: NOT
68083: PUSH
68084: NOP4
68088: PUSH
68089: NOP4
68093: ARRAY
68094: PPUSH
68095: NOP4
68099: AND
68100: IFFALSE 68173
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
68102: NOP4
68106: PUSH
68107: NOP4
68111: ARRAY
68112: PPUSH
68113: NOP4
68117: PUSH
68118: NOP4
68122: ARRAY
68123: PPUSH
68124: NOP4
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
68128: NOP4
68132: PUSH
68133: NOP4
68137: PPUSH
68138: NOP4
68142: PUSH
68143: LD_INT 1
68145: PLUS
68146: PPUSH
68147: NOP4
68151: PUSH
68152: NOP4
68156: ARRAY
68157: PPUSH
68158: NOP4
68162: ST_TO_ADDR
// attacking := true ;
68163: NOP4
68167: PUSH
68168: LD_INT 1
68170: ST_TO_ADDR
// break ;
68171: GO 68175
// end ; end ;
68173: GO 68042
68175: POP
68176: POP
// if not attacking and f_attack_depot then
68177: NOP4
68181: NOT
68182: PUSH
68183: NOP4
68187: AND
68188: IFFALSE 68283
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68190: NOP4
68194: PUSH
68195: NOP4
68199: PPUSH
68200: LD_INT 2
68202: PUSH
68203: LD_INT 30
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 30
68215: PUSH
68216: LD_INT 1
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: PPUSH
68228: NOP4
68232: ST_TO_ADDR
// if z then
68233: NOP4
68237: IFFALSE 68283
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
68239: NOP4
68243: PUSH
68244: NOP4
68248: ARRAY
68249: PPUSH
68250: NOP4
68254: PPUSH
68255: NOP4
68259: PUSH
68260: NOP4
68264: ARRAY
68265: PPUSH
68266: NOP4
68270: PPUSH
68271: NOP4
// attacking := true ;
68275: NOP4
68279: PUSH
68280: LD_INT 1
68282: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
68283: NOP4
68287: PUSH
68288: NOP4
68292: ARRAY
68293: PPUSH
68294: NOP4
68298: PUSH
68299: LD_INT 500
68301: LESS
68302: IFFALSE 68328
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
68304: NOP4
68308: PUSH
68309: NOP4
68313: ARRAY
68314: PPUSH
68315: NOP4
68319: PUSH
68320: LD_INT 1
68322: ARRAY
68323: PPUSH
68324: NOP4
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
68328: NOP4
68332: PUSH
68333: NOP4
68337: ARRAY
68338: PPUSH
68339: NOP4
68343: PUSH
68344: LD_INT 49
68346: EQUAL
68347: IFFALSE 68468
// begin if not HasTask ( group [ i ] ) then
68349: NOP4
68353: PUSH
68354: NOP4
68358: ARRAY
68359: PPUSH
68360: NOP4
68364: NOT
68365: IFFALSE 68468
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
68367: NOP4
68371: PUSH
68372: LD_INT 81
68374: PUSH
68375: NOP4
68379: PUSH
68380: NOP4
68384: ARRAY
68385: PPUSH
68386: NOP4
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PPUSH
68395: NOP4
68399: PPUSH
68400: NOP4
68404: PUSH
68405: NOP4
68409: ARRAY
68410: PPUSH
68411: NOP4
68415: ST_TO_ADDR
// if k then
68416: NOP4
68420: IFFALSE 68468
// if GetDistUnits ( group [ i ] , k ) > 10 then
68422: NOP4
68426: PUSH
68427: NOP4
68431: ARRAY
68432: PPUSH
68433: NOP4
68437: PPUSH
68438: NOP4
68442: PUSH
68443: LD_INT 10
68445: GREATER
68446: IFFALSE 68468
// ComMoveUnit ( group [ i ] , k ) ;
68448: NOP4
68452: PUSH
68453: NOP4
68457: ARRAY
68458: PPUSH
68459: NOP4
68463: PPUSH
68464: NOP4
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68468: NOP4
68472: PUSH
68473: NOP4
68477: ARRAY
68478: PPUSH
68479: NOP4
68483: PUSH
68484: LD_INT 250
68486: LESS
68487: PUSH
68488: NOP4
68492: PUSH
68493: NOP4
68497: ARRAY
68498: PUSH
68499: LD_INT 21
68501: PUSH
68502: LD_INT 2
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 23
68511: PUSH
68512: LD_INT 2
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PPUSH
68523: NOP4
68527: IN
68528: AND
68529: IFFALSE 68654
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
68531: NOP4
68535: PUSH
68536: NOP4
68540: PUSH
68541: NOP4
68545: PUSH
68546: NOP4
68550: ARRAY
68551: DIFF
68552: PPUSH
68553: NOP4
68557: PUSH
68558: NOP4
68562: ARRAY
68563: PPUSH
68564: NOP4
68568: ST_TO_ADDR
// if not k then
68569: NOP4
68573: NOT
68574: IFFALSE 68578
// continue ;
68576: GO 65019
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
68578: NOP4
68582: PUSH
68583: LD_INT 81
68585: PUSH
68586: NOP4
68590: PUSH
68591: NOP4
68595: ARRAY
68596: PPUSH
68597: NOP4
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PPUSH
68606: NOP4
68610: IN
68611: PUSH
68612: NOP4
68616: PPUSH
68617: NOP4
68621: PUSH
68622: NOP4
68626: ARRAY
68627: PPUSH
68628: NOP4
68632: PUSH
68633: LD_INT 5
68635: LESS
68636: AND
68637: IFFALSE 68654
// ComAutodestruct ( group [ i ] ) ;
68639: NOP4
68643: PUSH
68644: NOP4
68648: ARRAY
68649: PPUSH
68650: NOP4
// end ; if f_attack_depot then
68654: NOP4
68658: IFFALSE 68770
// begin k := 6 ;
68660: NOP4
68664: PUSH
68665: LD_INT 6
68667: ST_TO_ADDR
// if tmp < k then
68668: NOP4
68672: PUSH
68673: NOP4
68677: LESS
68678: IFFALSE 68690
// k := tmp ;
68680: NOP4
68684: PUSH
68685: NOP4
68689: ST_TO_ADDR
// for j = 1 to k do
68690: NOP4
68694: PUSH
68695: DOUBLE
68696: LD_INT 1
68698: DEC
68699: ST_TO_ADDR
68700: NOP4
68704: PUSH
68705: FOR_TO
68706: IFFALSE 68768
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
68708: NOP4
68712: PPUSH
68713: NOP4
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: LD_INT 1
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: IN
68728: IFFALSE 68766
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
68730: NOP4
68734: PUSH
68735: NOP4
68739: ARRAY
68740: PPUSH
68741: NOP4
68745: PUSH
68746: NOP4
68750: ARRAY
68751: PPUSH
68752: NOP4
// attacking := true ;
68756: NOP4
68760: PUSH
68761: LD_INT 1
68763: ST_TO_ADDR
// break ;
68764: GO 68768
// end ;
68766: GO 68705
68768: POP
68769: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
68770: NOP4
68774: PUSH
68775: NOP4
68779: ARRAY
68780: PPUSH
68781: NOP4
68785: PUSH
68786: NOP4
68790: NOT
68791: AND
68792: IFFALSE 69114
// begin if GetTag ( group [ i ] ) = 71 then
68794: NOP4
68798: PUSH
68799: NOP4
68803: ARRAY
68804: PPUSH
68805: NOP4
68809: PUSH
68810: LD_INT 71
68812: EQUAL
68813: IFFALSE 68854
// begin if HasTask ( group [ i ] ) then
68815: NOP4
68819: PUSH
68820: NOP4
68824: ARRAY
68825: PPUSH
68826: NOP4
68830: IFFALSE 68836
// continue else
68832: GO 65019
68834: GO 68854
// SetTag ( group [ i ] , 0 ) ;
68836: NOP4
68840: PUSH
68841: NOP4
68845: ARRAY
68846: PPUSH
68847: LD_INT 0
68849: PPUSH
68850: NOP4
// end ; k := 8 ;
68854: NOP4
68858: PUSH
68859: LD_INT 8
68861: ST_TO_ADDR
// x := 0 ;
68862: NOP4
68866: PUSH
68867: LD_INT 0
68869: ST_TO_ADDR
// if tmp < k then
68870: NOP4
68874: PUSH
68875: NOP4
68879: LESS
68880: IFFALSE 68892
// k := tmp ;
68882: NOP4
68886: PUSH
68887: NOP4
68891: ST_TO_ADDR
// for j = 1 to k do
68892: NOP4
68896: PUSH
68897: DOUBLE
68898: LD_INT 1
68900: DEC
68901: ST_TO_ADDR
68902: NOP4
68906: PUSH
68907: FOR_TO
68908: IFFALSE 69006
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
68910: NOP4
68914: PUSH
68915: NOP4
68919: ARRAY
68920: PPUSH
68921: NOP4
68925: PUSH
68926: LD_INT 1
68928: EQUAL
68929: PUSH
68930: NOP4
68934: PUSH
68935: NOP4
68939: ARRAY
68940: PPUSH
68941: NOP4
68945: PUSH
68946: LD_INT 250
68948: LESS
68949: PUSH
68950: NOP4
68954: AND
68955: PUSH
68956: NOP4
68960: NOT
68961: PUSH
68962: NOP4
68966: PUSH
68967: NOP4
68971: ARRAY
68972: PPUSH
68973: NOP4
68977: PUSH
68978: LD_INT 250
68980: GREATEREQUAL
68981: AND
68982: OR
68983: AND
68984: IFFALSE 69004
// begin x := tmp [ j ] ;
68986: NOP4
68990: PUSH
68991: NOP4
68995: PUSH
68996: NOP4
69000: ARRAY
69001: ST_TO_ADDR
// break ;
69002: GO 69006
// end ;
69004: GO 68907
69006: POP
69007: POP
// if x then
69008: NOP4
69012: IFFALSE 69036
// ComAttackUnit ( group [ i ] , x ) else
69014: NOP4
69018: PUSH
69019: NOP4
69023: ARRAY
69024: PPUSH
69025: NOP4
69029: PPUSH
69030: NOP4
69034: GO 69060
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
69036: NOP4
69040: PUSH
69041: NOP4
69045: ARRAY
69046: PPUSH
69047: NOP4
69051: PUSH
69052: LD_INT 1
69054: ARRAY
69055: PPUSH
69056: NOP4
// if not HasTask ( group [ i ] ) then
69060: NOP4
69064: PUSH
69065: NOP4
69069: ARRAY
69070: PPUSH
69071: NOP4
69075: NOT
69076: IFFALSE 69114
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
69078: NOP4
69082: PUSH
69083: NOP4
69087: ARRAY
69088: PPUSH
69089: NOP4
69093: PPUSH
69094: NOP4
69098: PUSH
69099: NOP4
69103: ARRAY
69104: PPUSH
69105: NOP4
69109: PPUSH
69110: NOP4
// end ; end ; end ;
69114: GO 65019
69116: POP
69117: POP
// wait ( 0 0$1 ) ;
69118: LD_INT 35
69120: PPUSH
69121: NOP4
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
69125: NOP4
69129: PUSH
69130: EMPTY
69131: EQUAL
69132: PUSH
69133: LD_INT 81
69135: PUSH
69136: NOP4
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PPUSH
69145: NOP4
69149: NOT
69150: OR
69151: IFFALSE 65004
// end ;
69153: LD_VAR 0 2
69157: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69158: LD_INT 0
69160: PPUSH
69161: PPUSH
69162: PPUSH
69163: PPUSH
// if not base_units then
69164: NOP4
69168: NOT
69169: IFFALSE 69173
// exit ;
69171: GO 69260
// result := false ;
69173: NOP4
69177: PUSH
69178: LD_INT 0
69180: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69181: NOP4
69185: PUSH
69186: NOP4
69190: PPUSH
69191: LD_INT 21
69193: PUSH
69194: LD_INT 3
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PPUSH
69201: NOP4
69205: ST_TO_ADDR
// if not tmp then
69206: NOP4
69210: NOT
69211: IFFALSE 69215
// exit ;
69213: GO 69260
// for i in tmp do
69215: NOP4
69219: PUSH
69220: NOP4
69224: PUSH
69225: FOR_IN
69226: IFFALSE 69258
// begin result := EnemyInRange ( i , 22 ) ;
69228: NOP4
69232: PUSH
69233: NOP4
69237: PPUSH
69238: LD_INT 22
69240: PPUSH
69241: NOP4
69245: ST_TO_ADDR
// if result then
69246: NOP4
69250: IFFALSE 69256
// exit ;
69252: POP
69253: POP
69254: GO 69260
// end ;
69256: GO 69225
69258: POP
69259: POP
// end ;
69260: LD_VAR 0 2
69264: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69265: LD_INT 0
69267: PPUSH
69268: PPUSH
// if not units then
69269: NOP4
69273: NOT
69274: IFFALSE 69278
// exit ;
69276: GO 69348
// result := [ ] ;
69278: NOP4
69282: PUSH
69283: EMPTY
69284: ST_TO_ADDR
// for i in units do
69285: NOP4
69289: PUSH
69290: NOP4
69294: PUSH
69295: FOR_IN
69296: IFFALSE 69346
// if GetTag ( i ) = tag then
69298: NOP4
69302: PPUSH
69303: NOP4
69307: PUSH
69308: NOP4
69312: EQUAL
69313: IFFALSE 69344
// result := Insert ( result , result + 1 , i ) ;
69315: NOP4
69319: PUSH
69320: NOP4
69324: PPUSH
69325: NOP4
69329: PUSH
69330: LD_INT 1
69332: PLUS
69333: PPUSH
69334: NOP4
69338: PPUSH
69339: NOP4
69343: ST_TO_ADDR
69344: GO 69295
69346: POP
69347: POP
// end ;
69348: LD_VAR 0 3
69352: RET
// export function IsDriver ( un ) ; begin
69353: LD_INT 0
69355: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69356: NOP4
69360: PUSH
69361: NOP4
69365: PUSH
69366: LD_INT 55
69368: PUSH
69369: EMPTY
69370: LIST
69371: PPUSH
69372: NOP4
69376: IN
69377: ST_TO_ADDR
// end ;
69378: LD_VAR 0 2
69382: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69383: LD_INT 0
69385: PPUSH
69386: PPUSH
// list := [ ] ;
69387: NOP4
69391: PUSH
69392: EMPTY
69393: ST_TO_ADDR
// case d of 0 :
69394: NOP4
69398: PUSH
69399: LD_INT 0
69401: DOUBLE
69402: EQUAL
69403: IFTRUE 69407
69405: GO 69540
69407: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69408: NOP4
69412: PUSH
69413: NOP4
69417: PUSH
69418: LD_INT 4
69420: MINUS
69421: PUSH
69422: NOP4
69426: PUSH
69427: LD_INT 4
69429: MINUS
69430: PUSH
69431: LD_INT 2
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: LIST
69438: PUSH
69439: NOP4
69443: PUSH
69444: LD_INT 3
69446: MINUS
69447: PUSH
69448: NOP4
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: LIST
69460: PUSH
69461: NOP4
69465: PUSH
69466: LD_INT 4
69468: PLUS
69469: PUSH
69470: NOP4
69474: PUSH
69475: LD_INT 4
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: LIST
69482: PUSH
69483: NOP4
69487: PUSH
69488: LD_INT 3
69490: PLUS
69491: PUSH
69492: NOP4
69496: PUSH
69497: LD_INT 3
69499: PLUS
69500: PUSH
69501: LD_INT 5
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: LIST
69508: PUSH
69509: NOP4
69513: PUSH
69514: NOP4
69518: PUSH
69519: LD_INT 4
69521: PLUS
69522: PUSH
69523: LD_INT 0
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: LIST
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: ST_TO_ADDR
// end ; 1 :
69538: GO 70238
69540: LD_INT 1
69542: DOUBLE
69543: EQUAL
69544: IFTRUE 69548
69546: GO 69681
69548: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69549: NOP4
69553: PUSH
69554: NOP4
69558: PUSH
69559: NOP4
69563: PUSH
69564: LD_INT 4
69566: MINUS
69567: PUSH
69568: LD_INT 3
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: LIST
69575: PUSH
69576: NOP4
69580: PUSH
69581: LD_INT 3
69583: MINUS
69584: PUSH
69585: NOP4
69589: PUSH
69590: LD_INT 3
69592: MINUS
69593: PUSH
69594: LD_INT 2
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: PUSH
69602: NOP4
69606: PUSH
69607: LD_INT 4
69609: MINUS
69610: PUSH
69611: NOP4
69615: PUSH
69616: LD_INT 1
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: PUSH
69624: NOP4
69628: PUSH
69629: NOP4
69633: PUSH
69634: LD_INT 3
69636: PLUS
69637: PUSH
69638: LD_INT 0
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: LIST
69645: PUSH
69646: NOP4
69650: PUSH
69651: LD_INT 4
69653: PLUS
69654: PUSH
69655: NOP4
69659: PUSH
69660: LD_INT 4
69662: PLUS
69663: PUSH
69664: LD_INT 5
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: LIST
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: ST_TO_ADDR
// end ; 2 :
69679: GO 70238
69681: LD_INT 2
69683: DOUBLE
69684: EQUAL
69685: IFTRUE 69689
69687: GO 69818
69689: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69690: NOP4
69694: PUSH
69695: NOP4
69699: PUSH
69700: NOP4
69704: PUSH
69705: LD_INT 3
69707: MINUS
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: LIST
69716: PUSH
69717: NOP4
69721: PUSH
69722: LD_INT 4
69724: PLUS
69725: PUSH
69726: NOP4
69730: PUSH
69731: LD_INT 4
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: PUSH
69739: NOP4
69743: PUSH
69744: NOP4
69748: PUSH
69749: LD_INT 4
69751: PLUS
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: LIST
69760: PUSH
69761: NOP4
69765: PUSH
69766: LD_INT 3
69768: MINUS
69769: PUSH
69770: NOP4
69774: PUSH
69775: LD_INT 1
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: LIST
69782: PUSH
69783: NOP4
69787: PUSH
69788: LD_INT 4
69790: MINUS
69791: PUSH
69792: NOP4
69796: PUSH
69797: LD_INT 4
69799: MINUS
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: LIST
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: ST_TO_ADDR
// end ; 3 :
69816: GO 70238
69818: LD_INT 3
69820: DOUBLE
69821: EQUAL
69822: IFTRUE 69826
69824: GO 69959
69826: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69827: NOP4
69831: PUSH
69832: NOP4
69836: PUSH
69837: LD_INT 3
69839: PLUS
69840: PUSH
69841: NOP4
69845: PUSH
69846: LD_INT 4
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: PUSH
69854: NOP4
69858: PUSH
69859: LD_INT 4
69861: PLUS
69862: PUSH
69863: NOP4
69867: PUSH
69868: LD_INT 4
69870: PLUS
69871: PUSH
69872: LD_INT 5
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: PUSH
69880: NOP4
69884: PUSH
69885: LD_INT 4
69887: MINUS
69888: PUSH
69889: NOP4
69893: PUSH
69894: LD_INT 1
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: LIST
69901: PUSH
69902: NOP4
69906: PUSH
69907: NOP4
69911: PUSH
69912: LD_INT 4
69914: MINUS
69915: PUSH
69916: LD_INT 3
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: LIST
69923: PUSH
69924: NOP4
69928: PUSH
69929: LD_INT 3
69931: MINUS
69932: PUSH
69933: NOP4
69937: PUSH
69938: LD_INT 3
69940: MINUS
69941: PUSH
69942: LD_INT 2
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: LIST
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: ST_TO_ADDR
// end ; 4 :
69957: GO 70238
69959: LD_INT 4
69961: DOUBLE
69962: EQUAL
69963: IFTRUE 69967
69965: GO 70100
69967: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69968: NOP4
69972: PUSH
69973: NOP4
69977: PUSH
69978: NOP4
69982: PUSH
69983: LD_INT 4
69985: PLUS
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: LIST
69994: PUSH
69995: NOP4
69999: PUSH
70000: LD_INT 3
70002: PLUS
70003: PUSH
70004: NOP4
70008: PUSH
70009: LD_INT 3
70011: PLUS
70012: PUSH
70013: LD_INT 5
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: LIST
70020: PUSH
70021: NOP4
70025: PUSH
70026: LD_INT 4
70028: PLUS
70029: PUSH
70030: NOP4
70034: PUSH
70035: LD_INT 4
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: LIST
70042: PUSH
70043: NOP4
70047: PUSH
70048: NOP4
70052: PUSH
70053: LD_INT 3
70055: MINUS
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: LIST
70064: PUSH
70065: NOP4
70069: PUSH
70070: LD_INT 4
70072: MINUS
70073: PUSH
70074: NOP4
70078: PUSH
70079: LD_INT 4
70081: MINUS
70082: PUSH
70083: LD_INT 2
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: LIST
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: ST_TO_ADDR
// end ; 5 :
70098: GO 70238
70100: LD_INT 5
70102: DOUBLE
70103: EQUAL
70104: IFTRUE 70108
70106: GO 70237
70108: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70109: NOP4
70113: PUSH
70114: NOP4
70118: PUSH
70119: LD_INT 4
70121: MINUS
70122: PUSH
70123: NOP4
70127: PUSH
70128: LD_INT 1
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: LIST
70135: PUSH
70136: NOP4
70140: PUSH
70141: NOP4
70145: PUSH
70146: LD_INT 4
70148: MINUS
70149: PUSH
70150: LD_INT 3
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: LIST
70157: PUSH
70158: NOP4
70162: PUSH
70163: LD_INT 4
70165: PLUS
70166: PUSH
70167: NOP4
70171: PUSH
70172: LD_INT 4
70174: PLUS
70175: PUSH
70176: LD_INT 5
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: LIST
70183: PUSH
70184: NOP4
70188: PUSH
70189: LD_INT 3
70191: PLUS
70192: PUSH
70193: NOP4
70197: PUSH
70198: LD_INT 4
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: LIST
70205: PUSH
70206: NOP4
70210: PUSH
70211: NOP4
70215: PUSH
70216: LD_INT 3
70218: PLUS
70219: PUSH
70220: LD_INT 0
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: LIST
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: ST_TO_ADDR
// end ; end ;
70235: GO 70238
70237: POP
// result := list ;
70238: NOP4
70242: PUSH
70243: NOP4
70247: ST_TO_ADDR
// end ;
70248: LD_VAR 0 4
70252: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70253: LD_INT 0
70255: PPUSH
70256: PPUSH
70257: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70258: NOP4
70262: NOT
70263: PUSH
70264: NOP4
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: LD_INT 3
70277: PUSH
70278: LD_INT 4
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: IN
70287: NOT
70288: OR
70289: IFFALSE 70293
// exit ;
70291: GO 70385
// tmp := [ ] ;
70293: NOP4
70297: PUSH
70298: EMPTY
70299: ST_TO_ADDR
// for i in units do
70300: NOP4
70304: PUSH
70305: NOP4
70309: PUSH
70310: FOR_IN
70311: IFFALSE 70354
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70313: NOP4
70317: PUSH
70318: NOP4
70322: PPUSH
70323: NOP4
70327: PUSH
70328: LD_INT 1
70330: PLUS
70331: PPUSH
70332: NOP4
70336: PPUSH
70337: NOP4
70341: PPUSH
70342: NOP4
70346: PPUSH
70347: NOP4
70351: ST_TO_ADDR
70352: GO 70310
70354: POP
70355: POP
// if not tmp then
70356: NOP4
70360: NOT
70361: IFFALSE 70365
// exit ;
70363: GO 70385
// result := SortListByListDesc ( units , tmp ) ;
70365: NOP4
70369: PUSH
70370: NOP4
70374: PPUSH
70375: NOP4
70379: PPUSH
70380: NOP4
70384: ST_TO_ADDR
// end ;
70385: LD_VAR 0 3
70389: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70390: LD_INT 0
70392: PPUSH
70393: PPUSH
70394: PPUSH
// x := GetX ( building ) ;
70395: NOP4
70399: PUSH
70400: NOP4
70404: PPUSH
70405: NOP4
70409: ST_TO_ADDR
// y := GetY ( building ) ;
70410: NOP4
70414: PUSH
70415: NOP4
70419: PPUSH
70420: NOP4
70424: ST_TO_ADDR
// if GetTaskList ( unit ) then
70425: NOP4
70429: PPUSH
70430: NOP4
70434: IFFALSE 70529
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70436: LD_STRING e
70438: PUSH
70439: NOP4
70443: PPUSH
70444: NOP4
70448: PUSH
70449: LD_INT 1
70451: ARRAY
70452: PUSH
70453: LD_INT 1
70455: ARRAY
70456: EQUAL
70457: PUSH
70458: NOP4
70462: PUSH
70463: NOP4
70467: PPUSH
70468: NOP4
70472: PUSH
70473: LD_INT 1
70475: ARRAY
70476: PUSH
70477: LD_INT 2
70479: ARRAY
70480: EQUAL
70481: AND
70482: PUSH
70483: NOP4
70487: PUSH
70488: NOP4
70492: PPUSH
70493: NOP4
70497: PUSH
70498: LD_INT 1
70500: ARRAY
70501: PUSH
70502: LD_INT 3
70504: ARRAY
70505: EQUAL
70506: AND
70507: IFFALSE 70519
// result := true else
70509: NOP4
70513: PUSH
70514: LD_INT 1
70516: ST_TO_ADDR
70517: GO 70527
// result := false ;
70519: NOP4
70523: PUSH
70524: LD_INT 0
70526: ST_TO_ADDR
// end else
70527: GO 70537
// result := false ;
70529: NOP4
70533: PUSH
70534: LD_INT 0
70536: ST_TO_ADDR
// end ;
70537: LD_VAR 0 3
70541: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70542: LD_INT 0
70544: PPUSH
70545: PPUSH
70546: PPUSH
70547: PPUSH
// if not unit or not area then
70548: NOP4
70552: NOT
70553: PUSH
70554: NOP4
70558: NOT
70559: OR
70560: IFFALSE 70564
// exit ;
70562: GO 70728
// tmp := AreaToList ( area , i ) ;
70564: NOP4
70568: PUSH
70569: NOP4
70573: PPUSH
70574: NOP4
70578: PPUSH
70579: NOP4
70583: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70584: NOP4
70588: PUSH
70589: DOUBLE
70590: LD_INT 1
70592: DEC
70593: ST_TO_ADDR
70594: NOP4
70598: PUSH
70599: LD_INT 1
70601: ARRAY
70602: PUSH
70603: FOR_TO
70604: IFFALSE 70726
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70606: NOP4
70610: PUSH
70611: NOP4
70615: PUSH
70616: LD_INT 1
70618: ARRAY
70619: PUSH
70620: NOP4
70624: ARRAY
70625: PUSH
70626: NOP4
70630: PUSH
70631: LD_INT 2
70633: ARRAY
70634: PUSH
70635: NOP4
70639: ARRAY
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70645: NOP4
70649: PUSH
70650: LD_INT 1
70652: ARRAY
70653: PPUSH
70654: NOP4
70658: PUSH
70659: LD_INT 2
70661: ARRAY
70662: PPUSH
70663: NOP4
70667: PUSH
70668: LD_INT 0
70670: EQUAL
70671: IFFALSE 70724
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70673: NOP4
70677: PPUSH
70678: NOP4
70682: PUSH
70683: LD_INT 1
70685: ARRAY
70686: PPUSH
70687: NOP4
70691: PUSH
70692: LD_INT 2
70694: ARRAY
70695: PPUSH
70696: NOP4
70700: PPUSH
70701: NOP4
// result := IsPlaced ( unit ) ;
70705: NOP4
70709: PUSH
70710: NOP4
70714: PPUSH
70715: NOP4
70719: ST_TO_ADDR
// exit ;
70720: POP
70721: POP
70722: GO 70728
// end ; end ;
70724: GO 70603
70726: POP
70727: POP
// end ;
70728: LD_VAR 0 4
70732: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70733: LD_INT 0
70735: PPUSH
70736: PPUSH
70737: PPUSH
// if not side or side > 8 then
70738: NOP4
70742: NOT
70743: PUSH
70744: NOP4
70748: PUSH
70749: LD_INT 8
70751: GREATER
70752: OR
70753: IFFALSE 70757
// exit ;
70755: GO 70944
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70757: NOP4
70761: PUSH
70762: LD_INT 22
70764: PUSH
70765: NOP4
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 21
70776: PUSH
70777: LD_INT 3
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PPUSH
70788: NOP4
70792: ST_TO_ADDR
// if not tmp then
70793: NOP4
70797: NOT
70798: IFFALSE 70802
// exit ;
70800: GO 70944
// enable_addtolog := true ;
70802: LD_ADDR_OWVAR 81
70806: PUSH
70807: LD_INT 1
70809: ST_TO_ADDR
// AddToLog ( [ ) ;
70810: LD_STRING [
70812: PPUSH
70813: NOP4
// for i in tmp do
70817: NOP4
70821: PUSH
70822: NOP4
70826: PUSH
70827: FOR_IN
70828: IFFALSE 70935
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70830: LD_STRING [
70832: PUSH
70833: NOP4
70837: PPUSH
70838: NOP4
70842: STR
70843: PUSH
70844: LD_STRING , 
70846: STR
70847: PUSH
70848: NOP4
70852: PPUSH
70853: NOP4
70857: STR
70858: PUSH
70859: LD_STRING , 
70861: STR
70862: PUSH
70863: NOP4
70867: PPUSH
70868: NOP4
70872: STR
70873: PUSH
70874: LD_STRING , 
70876: STR
70877: PUSH
70878: NOP4
70882: PPUSH
70883: NOP4
70887: STR
70888: PUSH
70889: LD_STRING , 
70891: STR
70892: PUSH
70893: NOP4
70897: PPUSH
70898: LD_INT 1
70900: PPUSH
70901: NOP4
70905: STR
70906: PUSH
70907: LD_STRING , 
70909: STR
70910: PUSH
70911: NOP4
70915: PPUSH
70916: LD_INT 2
70918: PPUSH
70919: NOP4
70923: STR
70924: PUSH
70925: LD_STRING ],
70927: STR
70928: PPUSH
70929: NOP4
// end ;
70933: GO 70827
70935: POP
70936: POP
// AddToLog ( ]; ) ;
70937: LD_STRING ];
70939: PPUSH
70940: NOP4
// end ;
70944: LD_VAR 0 2
70948: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70949: LD_INT 0
70951: PPUSH
70952: PPUSH
70953: PPUSH
70954: PPUSH
70955: PPUSH
// if not area or not rate or not max then
70956: NOP4
70960: NOT
70961: PUSH
70962: NOP4
70966: NOT
70967: OR
70968: PUSH
70969: NOP4
70973: NOT
70974: OR
70975: IFFALSE 70979
// exit ;
70977: GO 71171
// while 1 do
70979: LD_INT 1
70981: IFFALSE 71171
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70983: NOP4
70987: PUSH
70988: NOP4
70992: PPUSH
70993: LD_INT 1
70995: PPUSH
70996: NOP4
71000: PUSH
71001: LD_INT 10
71003: MUL
71004: ST_TO_ADDR
// r := rate / 10 ;
71005: NOP4
71009: PUSH
71010: NOP4
71014: PUSH
71015: LD_INT 10
71017: DIVREAL
71018: ST_TO_ADDR
// time := 1 1$00 ;
71019: NOP4
71023: PUSH
71024: LD_INT 2100
71026: ST_TO_ADDR
// if amount < min then
71027: NOP4
71031: PUSH
71032: NOP4
71036: LESS
71037: IFFALSE 71055
// r := r * 2 else
71039: NOP4
71043: PUSH
71044: NOP4
71048: PUSH
71049: LD_INT 2
71051: MUL
71052: ST_TO_ADDR
71053: GO 71081
// if amount > max then
71055: NOP4
71059: PUSH
71060: NOP4
71064: GREATER
71065: IFFALSE 71081
// r := r / 2 ;
71067: NOP4
71071: PUSH
71072: NOP4
71076: PUSH
71077: LD_INT 2
71079: DIVREAL
71080: ST_TO_ADDR
// time := time / r ;
71081: NOP4
71085: PUSH
71086: NOP4
71090: PUSH
71091: NOP4
71095: DIVREAL
71096: ST_TO_ADDR
// if time < 0 then
71097: NOP4
71101: PUSH
71102: LD_INT 0
71104: LESS
71105: IFFALSE 71122
// time := time * - 1 ;
71107: NOP4
71111: PUSH
71112: NOP4
71116: PUSH
71117: LD_INT 1
71119: NEG
71120: MUL
71121: ST_TO_ADDR
// wait ( time ) ;
71122: NOP4
71126: PPUSH
71127: NOP4
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71131: LD_INT 35
71133: PPUSH
71134: LD_INT 875
71136: PPUSH
71137: NOP4
71141: PPUSH
71142: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71146: LD_INT 1
71148: PPUSH
71149: LD_INT 5
71151: PPUSH
71152: NOP4
71156: PPUSH
71157: NOP4
71161: PPUSH
71162: LD_INT 1
71164: PPUSH
71165: NOP4
// end ;
71169: GO 70979
// end ;
71171: LD_VAR 0 5
71175: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71176: LD_INT 0
71178: PPUSH
71179: PPUSH
71180: PPUSH
71181: PPUSH
71182: PPUSH
71183: PPUSH
71184: PPUSH
71185: PPUSH
// if not turrets or not factories then
71186: NOP4
71190: NOT
71191: PUSH
71192: NOP4
71196: NOT
71197: OR
71198: IFFALSE 71202
// exit ;
71200: GO 71509
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71202: NOP4
71206: PUSH
71207: LD_INT 5
71209: PUSH
71210: LD_INT 6
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 2
71219: PUSH
71220: LD_INT 4
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: LD_INT 5
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 24
71244: PUSH
71245: LD_INT 25
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 23
71254: PUSH
71255: LD_INT 27
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 42
71268: PUSH
71269: LD_INT 43
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 44
71278: PUSH
71279: LD_INT 46
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 45
71288: PUSH
71289: LD_INT 47
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: LIST
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: LIST
71305: ST_TO_ADDR
// result := [ ] ;
71306: NOP4
71310: PUSH
71311: EMPTY
71312: ST_TO_ADDR
// for i in turrets do
71313: NOP4
71317: PUSH
71318: NOP4
71322: PUSH
71323: FOR_IN
71324: IFFALSE 71507
// begin nat := GetNation ( i ) ;
71326: NOP4
71330: PUSH
71331: NOP4
71335: PPUSH
71336: NOP4
71340: ST_TO_ADDR
// weapon := 0 ;
71341: NOP4
71345: PUSH
71346: LD_INT 0
71348: ST_TO_ADDR
// if not nat then
71349: NOP4
71353: NOT
71354: IFFALSE 71358
// continue ;
71356: GO 71323
// for j in list [ nat ] do
71358: NOP4
71362: PUSH
71363: NOP4
71367: PUSH
71368: NOP4
71372: ARRAY
71373: PUSH
71374: FOR_IN
71375: IFFALSE 71416
// if GetBWeapon ( i ) = j [ 1 ] then
71377: NOP4
71381: PPUSH
71382: NOP4
71386: PUSH
71387: NOP4
71391: PUSH
71392: LD_INT 1
71394: ARRAY
71395: EQUAL
71396: IFFALSE 71414
// begin weapon := j [ 2 ] ;
71398: NOP4
71402: PUSH
71403: NOP4
71407: PUSH
71408: LD_INT 2
71410: ARRAY
71411: ST_TO_ADDR
// break ;
71412: GO 71416
// end ;
71414: GO 71374
71416: POP
71417: POP
// if not weapon then
71418: NOP4
71422: NOT
71423: IFFALSE 71427
// continue ;
71425: GO 71323
// for k in factories do
71427: NOP4
71431: PUSH
71432: NOP4
71436: PUSH
71437: FOR_IN
71438: IFFALSE 71503
// begin weapons := AvailableWeaponList ( k ) ;
71440: NOP4
71444: PUSH
71445: NOP4
71449: PPUSH
71450: NOP4
71454: ST_TO_ADDR
// if not weapons then
71455: NOP4
71459: NOT
71460: IFFALSE 71464
// continue ;
71462: GO 71437
// if weapon in weapons then
71464: NOP4
71468: PUSH
71469: NOP4
71473: IN
71474: IFFALSE 71501
// begin result := [ i , weapon ] ;
71476: NOP4
71480: PUSH
71481: NOP4
71485: PUSH
71486: NOP4
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: ST_TO_ADDR
// exit ;
71495: POP
71496: POP
71497: POP
71498: POP
71499: GO 71509
// end ; end ;
71501: GO 71437
71503: POP
71504: POP
// end ;
71505: GO 71323
71507: POP
71508: POP
// end ;
71509: LD_VAR 0 3
71513: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71514: LD_INT 0
71516: PPUSH
// if not side or side > 8 then
71517: NOP4
71521: NOT
71522: PUSH
71523: NOP4
71527: PUSH
71528: LD_INT 8
71530: GREATER
71531: OR
71532: IFFALSE 71536
// exit ;
71534: GO 71595
// if not range then
71536: NOP4
71540: NOT
71541: IFFALSE 71552
// range := - 12 ;
71543: NOP4
71547: PUSH
71548: LD_INT 12
71550: NEG
71551: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71552: NOP4
71556: PPUSH
71557: NOP4
71561: PPUSH
71562: NOP4
71566: PPUSH
71567: NOP4
71571: PPUSH
71572: NOP4
// RemoveSeeing ( x , y , side ) ;
71576: NOP4
71580: PPUSH
71581: NOP4
71585: PPUSH
71586: NOP4
71590: PPUSH
71591: NOP4
// end ;
71595: LD_VAR 0 5
71599: RET
// export function Video ( mode ) ; begin
71600: LD_INT 0
71602: PPUSH
// ingame_video = mode ;
71603: LD_ADDR_OWVAR 52
71607: PUSH
71608: NOP4
71612: ST_TO_ADDR
// interface_hidden = mode ;
71613: LD_ADDR_OWVAR 54
71617: PUSH
71618: NOP4
71622: ST_TO_ADDR
// end ;
71623: LD_VAR 0 2
71627: RET
// export function Join ( array , element ) ; begin
71628: LD_INT 0
71630: PPUSH
// result := array ^ element ;
71631: NOP4
71635: PUSH
71636: NOP4
71640: PUSH
71641: NOP4
71645: ADD
71646: ST_TO_ADDR
// end ;
71647: LD_VAR 0 3
71651: RET
// export function JoinUnion ( array , element ) ; begin
71652: LD_INT 0
71654: PPUSH
// result := array union element ;
71655: NOP4
71659: PUSH
71660: NOP4
71664: PUSH
71665: NOP4
71669: UNION
71670: ST_TO_ADDR
// end ;
71671: LD_VAR 0 3
71675: RET
// export function GetBehemoths ( side ) ; begin
71676: LD_INT 0
71678: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71679: NOP4
71683: PUSH
71684: LD_INT 22
71686: PUSH
71687: NOP4
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 31
71698: PUSH
71699: LD_INT 25
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PPUSH
71710: NOP4
71714: ST_TO_ADDR
// end ;
71715: LD_VAR 0 2
71719: RET
// export function Shuffle ( array ) ; var i , index ; begin
71720: LD_INT 0
71722: PPUSH
71723: PPUSH
71724: PPUSH
// result := [ ] ;
71725: NOP4
71729: PUSH
71730: EMPTY
71731: ST_TO_ADDR
// if not array then
71732: NOP4
71736: NOT
71737: IFFALSE 71741
// exit ;
71739: GO 71840
// Randomize ;
71741: NOP4
// for i = array downto 1 do
71745: NOP4
71749: PUSH
71750: DOUBLE
71751: NOP4
71755: INC
71756: ST_TO_ADDR
71757: LD_INT 1
71759: PUSH
71760: FOR_DOWNTO
71761: IFFALSE 71838
// begin index := rand ( 1 , array ) ;
71763: NOP4
71767: PUSH
71768: LD_INT 1
71770: PPUSH
71771: NOP4
71775: PPUSH
71776: NOP4
71780: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71781: NOP4
71785: PUSH
71786: NOP4
71790: PPUSH
71791: NOP4
71795: PUSH
71796: LD_INT 1
71798: PLUS
71799: PPUSH
71800: NOP4
71804: PUSH
71805: NOP4
71809: ARRAY
71810: PPUSH
71811: NOP4
71815: ST_TO_ADDR
// array := Delete ( array , index ) ;
71816: NOP4
71820: PUSH
71821: NOP4
71825: PPUSH
71826: NOP4
71830: PPUSH
71831: NOP4
71835: ST_TO_ADDR
// end ;
71836: GO 71760
71838: POP
71839: POP
// end ; end_of_file end_of_file end_of_file
71840: LD_VAR 0 2
71844: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
71845: LD_INT 0
71847: PPUSH
71848: PPUSH
71849: PPUSH
71850: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
71851: NOP4
71855: PPUSH
71856: NOP4
71860: PUSH
71861: NOP4
71865: EQUAL
71866: IFFALSE 71938
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
71868: LD_INT 68
71870: PPUSH
71871: NOP4
71875: PPUSH
71876: NOP4
71880: PPUSH
71881: NOP4
71885: PUSH
71886: LD_INT 2
71888: EQUAL
71889: IFFALSE 71901
// eff := 70 else
71891: NOP4
71895: PUSH
71896: LD_INT 70
71898: ST_TO_ADDR
71899: GO 71909
// eff := 30 ;
71901: NOP4
71905: PUSH
71906: LD_INT 30
71908: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
71909: NOP4
71913: PPUSH
71914: NOP4
71918: PPUSH
71919: NOP4
71923: PPUSH
71924: NOP4
71928: PPUSH
71929: NOP4
71933: PPUSH
71934: NOP4
// end ; end ;
71938: LD_VAR 0 4
71942: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
71943: LD_INT 0
71945: PPUSH
71946: PPUSH
71947: PPUSH
71948: PPUSH
71949: PPUSH
71950: PPUSH
// if cmd = 124 then
71951: NOP4
71955: PUSH
71956: LD_INT 124
71958: EQUAL
71959: IFFALSE 72165
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
71961: NOP4
71965: PUSH
71966: LD_INT 2
71968: PUSH
71969: LD_INT 34
71971: PUSH
71972: LD_INT 53
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 34
71981: PUSH
71982: LD_INT 14
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: PPUSH
71994: NOP4
71998: ST_TO_ADDR
// if not tmp then
71999: NOP4
72003: NOT
72004: IFFALSE 72008
// exit ;
72006: GO 72165
// for i in tmp do
72008: NOP4
72012: PUSH
72013: NOP4
72017: PUSH
72018: FOR_IN
72019: IFFALSE 72163
// begin taskList := GetTaskList ( i ) ;
72021: NOP4
72025: PUSH
72026: NOP4
72030: PPUSH
72031: NOP4
72035: ST_TO_ADDR
// if not taskList then
72036: NOP4
72040: NOT
72041: IFFALSE 72045
// continue ;
72043: GO 72018
// for j = 1 to taskList do
72045: NOP4
72049: PUSH
72050: DOUBLE
72051: LD_INT 1
72053: DEC
72054: ST_TO_ADDR
72055: NOP4
72059: PUSH
72060: FOR_TO
72061: IFFALSE 72159
// if taskList [ j ] [ 1 ] = | then
72063: NOP4
72067: PUSH
72068: NOP4
72072: ARRAY
72073: PUSH
72074: LD_INT 1
72076: ARRAY
72077: PUSH
72078: LD_STRING |
72080: EQUAL
72081: IFFALSE 72157
// begin _taskList := Delete ( taskList , 1 ) ;
72083: NOP4
72087: PUSH
72088: NOP4
72092: PPUSH
72093: LD_INT 1
72095: PPUSH
72096: NOP4
72100: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
72101: NOP4
72105: PPUSH
72106: NOP4
72110: PPUSH
72111: NOP4
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
72115: NOP4
72119: PPUSH
72120: NOP4
72124: PUSH
72125: NOP4
72129: ARRAY
72130: PUSH
72131: LD_INT 2
72133: ARRAY
72134: PPUSH
72135: NOP4
72139: PUSH
72140: NOP4
72144: ARRAY
72145: PUSH
72146: LD_INT 3
72148: ARRAY
72149: PPUSH
72150: LD_INT 8
72152: PPUSH
72153: NOP4
// end ;
72157: GO 72060
72159: POP
72160: POP
// end ;
72161: GO 72018
72163: POP
72164: POP
// end ; end ;
72165: LD_VAR 0 2
72169: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
72170: LD_INT 0
72172: PPUSH
72173: PPUSH
72174: PPUSH
72175: PPUSH
72176: PPUSH
72177: PPUSH
72178: PPUSH
72179: PPUSH
72180: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
72181: NOP4
72185: NOT
72186: PUSH
72187: NOP4
72191: PPUSH
72192: NOP4
72196: PPUSH
72197: NOP4
72201: NOT
72202: OR
72203: PUSH
72204: NOP4
72208: NOT
72209: OR
72210: IFFALSE 72214
// exit ;
72212: GO 72554
// list := [ ] ;
72214: NOP4
72218: PUSH
72219: EMPTY
72220: ST_TO_ADDR
// if x - r < 0 then
72221: NOP4
72225: PUSH
72226: NOP4
72230: MINUS
72231: PUSH
72232: LD_INT 0
72234: LESS
72235: IFFALSE 72247
// min_x := 0 else
72237: NOP4
72241: PUSH
72242: LD_INT 0
72244: ST_TO_ADDR
72245: GO 72263
// min_x := x - r ;
72247: NOP4
72251: PUSH
72252: NOP4
72256: PUSH
72257: NOP4
72261: MINUS
72262: ST_TO_ADDR
// if y - r < 0 then
72263: NOP4
72267: PUSH
72268: NOP4
72272: MINUS
72273: PUSH
72274: LD_INT 0
72276: LESS
72277: IFFALSE 72289
// min_y := 0 else
72279: NOP4
72283: PUSH
72284: LD_INT 0
72286: ST_TO_ADDR
72287: GO 72305
// min_y := y - r ;
72289: NOP4
72293: PUSH
72294: NOP4
72298: PUSH
72299: NOP4
72303: MINUS
72304: ST_TO_ADDR
// max_x := x + r ;
72305: NOP4
72309: PUSH
72310: NOP4
72314: PUSH
72315: NOP4
72319: PLUS
72320: ST_TO_ADDR
// max_y := y + r ;
72321: NOP4
72325: PUSH
72326: NOP4
72330: PUSH
72331: NOP4
72335: PLUS
72336: ST_TO_ADDR
// for _x = min_x to max_x do
72337: NOP4
72341: PUSH
72342: DOUBLE
72343: NOP4
72347: DEC
72348: ST_TO_ADDR
72349: NOP4
72353: PUSH
72354: FOR_TO
72355: IFFALSE 72472
// for _y = min_y to max_y do
72357: NOP4
72361: PUSH
72362: DOUBLE
72363: NOP4
72367: DEC
72368: ST_TO_ADDR
72369: NOP4
72373: PUSH
72374: FOR_TO
72375: IFFALSE 72468
// begin if not ValidHex ( _x , _y ) then
72377: NOP4
72381: PPUSH
72382: NOP4
72386: PPUSH
72387: NOP4
72391: NOT
72392: IFFALSE 72396
// continue ;
72394: GO 72374
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
72396: NOP4
72400: PPUSH
72401: NOP4
72405: PPUSH
72406: NOP4
72410: PUSH
72411: NOP4
72415: PPUSH
72416: NOP4
72420: PPUSH
72421: NOP4
72425: AND
72426: IFFALSE 72466
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
72428: NOP4
72432: PUSH
72433: NOP4
72437: PPUSH
72438: NOP4
72442: PUSH
72443: LD_INT 1
72445: PLUS
72446: PPUSH
72447: NOP4
72451: PUSH
72452: NOP4
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PPUSH
72461: NOP4
72465: ST_TO_ADDR
// end ;
72466: GO 72374
72468: POP
72469: POP
72470: GO 72354
72472: POP
72473: POP
// if not list then
72474: NOP4
72478: NOT
72479: IFFALSE 72483
// exit ;
72481: GO 72554
// for i in list do
72483: NOP4
72487: PUSH
72488: NOP4
72492: PUSH
72493: FOR_IN
72494: IFFALSE 72552
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
72496: NOP4
72500: PPUSH
72501: LD_STRING M
72503: PUSH
72504: NOP4
72508: PUSH
72509: LD_INT 1
72511: ARRAY
72512: PUSH
72513: NOP4
72517: PUSH
72518: LD_INT 2
72520: ARRAY
72521: PUSH
72522: LD_INT 0
72524: PUSH
72525: LD_INT 0
72527: PUSH
72528: LD_INT 0
72530: PUSH
72531: LD_INT 0
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: PUSH
72543: EMPTY
72544: LIST
72545: PPUSH
72546: NOP4
72550: GO 72493
72552: POP
72553: POP
// end ;
72554: LD_VAR 0 5
72558: RET
