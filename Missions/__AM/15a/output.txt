// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 69 0 0
// InitMacro ;
  15: CALL 20620 0 0
// InitNature ;
  19: CALL 17182 0 0
// InitArtifact ;
  23: CALL 17795 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// PrepareAmerican ;
  40: CALL 4579 0 0
// PrepareAlliance ;
  44: CALL 1375 0 0
// PrepareArabian ;
  48: CALL 6347 0 0
// PrepareRussian ;
  52: CALL 8332 0 0
// PrepareLegion ;
  56: CALL 6775 0 0
// Action ;
  60: CALL 10885 0 0
// MC_Start ( ) ;
  64: CALL 22732 0 0
// end ;
  68: END
// export debug ; export russianDestroyed , legionDestroyed , americanDestroyed , arabianDestroyed ; export americanCapitulated , russianCapitulated , legionCapitulated ; export artifactArCaptured , alienSpotted , spawnOmar ; export artifactIResearched , artifactIIResearched , artifactIIIResearched ; export vehicleLostCounter , artifactDestroyCounter ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// debug := false ;
  72: LD_ADDR_EXP 1
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// artifactArCaptured := LoadVariable ( 11_artifact_captured , 0 ) ;
  80: LD_ADDR_EXP 9
  84: PUSH
  85: LD_STRING 11_artifact_captured
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianDestroyed := false ;
  96: LD_ADDR_EXP 2
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// legionDestroyed := false ;
 104: LD_ADDR_EXP 3
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// americanDestroyed := false ;
 112: LD_ADDR_EXP 4
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// arabianDestroyed := false ;
 120: LD_ADDR_EXP 5
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// americanCapitulated := false ;
 128: LD_ADDR_EXP 6
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// russianCapitulated := false ;
 136: LD_ADDR_EXP 7
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// legionCapitulated := false ;
 144: LD_ADDR_EXP 8
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifactIResearched := false ;
 152: LD_ADDR_EXP 12
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifactIIResearched := false ;
 160: LD_ADDR_EXP 13
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// artifactIIIResearched := false ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// alienSpotted := false ;
 176: LD_ADDR_EXP 10
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// spawnOmar := false ;
 184: LD_ADDR_EXP 11
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// vehicleLostCounter := 0 ;
 192: LD_ADDR_EXP 15
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// artifactDestroyCounter := 0 ;
 200: LD_ADDR_EXP 16
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// end ;
 208: LD_VAR 0 1
 212: RET
// export function CustomInitMacro ( ) ; begin
 213: LD_INT 0
 215: PPUSH
// mc_parking := [ arabianParkingArea , russianParkingArea , legionParkingArea , powellParking ] ;
 216: LD_ADDR_EXP 111
 220: PUSH
 221: LD_INT 26
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 4
 229: PUSH
 230: LD_INT 8
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: ST_TO_ADDR
// mc_scan_area := [ arabianBaseArea , russianBaseArea , legionBaseArea , powellBase ] ;
 239: LD_ADDR_EXP 112
 243: PUSH
 244: LD_INT 27
 246: PUSH
 247: LD_INT 2
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 7
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 7 , 9 ] [ Difficulty ] , arabianMinefield ) ;
 262: LD_INT 1
 264: PPUSH
 265: LD_INT 6
 267: PUSH
 268: LD_INT 7
 270: PUSH
 271: LD_INT 9
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: PPUSH
 285: LD_INT 28
 287: PPUSH
 288: CALL 43933 0 3
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 292: LD_INT 1
 294: PPUSH
 295: LD_INT 10
 297: PUSH
 298: LD_INT 11
 300: PUSH
 301: LD_INT 13
 303: PUSH
 304: LD_INT 15
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: LIST
 311: LIST
 312: PPUSH
 313: CALL 44993 0 2
// MC_SetCratesArea ( 1 , [ arabianCratesArea ] ) ;
 317: LD_INT 1
 319: PPUSH
 320: LD_INT 29
 322: PUSH
 323: EMPTY
 324: LIST
 325: PPUSH
 326: CALL 45086 0 2
// mc_ape := Replace ( mc_ape , 1 , FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 330: LD_ADDR_EXP 116
 334: PUSH
 335: LD_EXP 116
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 22
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: LD_INT 25
 355: PUSH
 356: LD_INT 15
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PPUSH
 367: CALL_OW 69
 371: PPUSH
 372: CALL_OW 1
 376: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] ] ) ;
 377: LD_INT 1
 379: PPUSH
 380: LD_INT 13
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: LD_INT 31
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 13
 400: PUSH
 401: LD_INT 2
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: LD_INT 31
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 13
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 1
 424: PUSH
 425: LD_INT 28
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 13
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 28
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_INT 13
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 28
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 13
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: LD_INT 1
 478: PUSH
 479: LD_INT 28
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: PPUSH
 496: CALL 44251 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 500: LD_INT 1
 502: PPUSH
 503: LD_INT 4
 505: PPUSH
 506: CALL 44436 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_spacetime ] ) ;
 510: LD_INT 2
 512: PPUSH
 513: LD_INT 10
 515: PUSH
 516: LD_INT 11
 518: PUSH
 519: LD_INT 12
 521: PUSH
 522: LD_INT 14
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL 44993 0 2
// MC_SetCratesArea ( 2 , [ russianCratesArea ] ) ;
 535: LD_INT 2
 537: PPUSH
 538: LD_INT 14
 540: PUSH
 541: EMPTY
 542: LIST
 543: PPUSH
 544: CALL 45086 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
 548: LD_INT 2
 550: PPUSH
 551: LD_INT 21
 553: PUSH
 554: LD_INT 3
 556: PUSH
 557: LD_INT 3
 559: PUSH
 560: LD_INT 51
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 22
 571: PUSH
 572: LD_INT 3
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: LD_INT 52
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 22
 589: PUSH
 590: LD_INT 3
 592: PUSH
 593: LD_INT 3
 595: PUSH
 596: LD_INT 52
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_INT 24
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 3
 613: PUSH
 614: LD_INT 47
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: PUSH
 623: LD_INT 24
 625: PUSH
 626: LD_INT 3
 628: PUSH
 629: LD_INT 3
 631: PUSH
 632: LD_INT 47
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 24
 643: PUSH
 644: LD_INT 3
 646: PUSH
 647: LD_INT 3
 649: PUSH
 650: LD_INT 47
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 24
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 3
 667: PUSH
 668: LD_INT 47
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 24
 679: PUSH
 680: LD_INT 3
 682: PUSH
 683: LD_INT 3
 685: PUSH
 686: LD_INT 47
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: PPUSH
 705: CALL 44251 0 2
// MC_SetDefenderLimit ( 2 , 5 ) ;
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 5
 714: PPUSH
 715: CALL 44436 0 2
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
 719: LD_INT 2
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL 44866 0 2
// MC_SetMinesField ( 3 , [ 10 , 12 , 15 ] [ Difficulty ] , legionMinefield ) ;
 729: LD_INT 3
 731: PPUSH
 732: LD_INT 10
 734: PUSH
 735: LD_INT 12
 737: PUSH
 738: LD_INT 15
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: LD_OWVAR 67
 750: ARRAY
 751: PPUSH
 752: LD_INT 24
 754: PPUSH
 755: CALL 43933 0 3
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 759: LD_INT 3
 761: PPUSH
 762: LD_INT 10
 764: PUSH
 765: LD_INT 11
 767: PUSH
 768: LD_INT 13
 770: PUSH
 771: LD_INT 15
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: PPUSH
 780: CALL 44993 0 2
// MC_SetCratesArea ( 3 , [ legionCratesArea ] ) ;
 784: LD_INT 3
 786: PPUSH
 787: LD_INT 13
 789: PUSH
 790: EMPTY
 791: LIST
 792: PPUSH
 793: CALL 45086 0 2
// mc_ape := Replace ( mc_ape , 3 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 797: LD_ADDR_EXP 116
 801: PUSH
 802: LD_EXP 116
 806: PPUSH
 807: LD_INT 3
 809: PPUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 8
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 25
 822: PUSH
 823: LD_INT 15
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// MC_SetProduceList ( 3 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_siberite , control_remote , ar_cargo_bay ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] ] ) ;
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 13
 849: PUSH
 850: LD_INT 2
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: LD_INT 31
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 13
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 31
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 13
 885: PUSH
 886: LD_INT 3
 888: PUSH
 889: LD_INT 2
 891: PUSH
 892: LD_INT 32
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: LD_INT 28
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 14
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: LD_INT 1
 927: PUSH
 928: LD_INT 28
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_INT 14
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: LD_INT 28
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: LD_INT 14
 957: PUSH
 958: LD_INT 1
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 28
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: PPUSH
 982: CALL 44251 0 2
// MC_SetDefenderLimit ( 3 , 4 ) ;
 986: LD_INT 3
 988: PPUSH
 989: LD_INT 4
 991: PPUSH
 992: CALL 44436 0 2
// MC_SetLabKind ( 4 , [ b_lab_weapon , b_lab_computer , b_lab_siberium , b_lab_opto ] ) ;
 996: LD_INT 4
 998: PPUSH
 999: LD_INT 10
1001: PUSH
1002: LD_INT 12
1004: PUSH
1005: LD_INT 11
1007: PUSH
1008: LD_INT 15
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL 44993 0 2
// MC_SetCratesArea ( 4 , [ americanCratesArea ] ) ;
1021: LD_INT 4
1023: PPUSH
1024: LD_INT 33
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL 45086 0 2
// MC_SetAllowedTurretWeapons ( 4 , [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1034: LD_INT 4
1036: PPUSH
1037: LD_INT 5
1039: PUSH
1040: LD_INT 6
1042: PUSH
1043: LD_INT 7
1045: PUSH
1046: LD_INT 9
1048: PUSH
1049: LD_INT 10
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PPUSH
1059: CALL 45404 0 2
// MC_SetFactoryExtension ( 4 , 54 , 85 , 2 , [ b_ext_laser , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1063: LD_INT 4
1065: PPUSH
1066: LD_INT 54
1068: PPUSH
1069: LD_INT 85
1071: PPUSH
1072: LD_INT 2
1074: PPUSH
1075: LD_INT 25
1077: PUSH
1078: LD_INT 16
1080: PUSH
1081: LD_INT 17
1083: PUSH
1084: LD_INT 18
1086: PUSH
1087: LD_INT 22
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PPUSH
1097: CALL 45198 0 5
// MC_SetProduceList ( 4 , [ [ us_morphling , engine_combustion , control_manual , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_manual , us_heavy_gun ] , [ us_morphling , engine_combustion , control_manual , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_manual , us_heavy_gun ] , [ us_morphling , engine_combustion , control_computer , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_computer , us_crane ] ] ) ;
1101: LD_INT 4
1103: PPUSH
1104: LD_INT 5
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: LD_INT 7
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 5
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 6
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 5
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 7
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 5
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 6
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 5
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 3
1184: PUSH
1185: LD_INT 12
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 3
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 3
1202: PUSH
1203: LD_INT 13
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL 44251 0 2
// MC_SetDefenderLimit ( 4 , 4 ) ;
1224: LD_INT 4
1226: PPUSH
1227: LD_INT 4
1229: PPUSH
1230: CALL 44436 0 2
// MC_SetTame ( 4 , powellApe ) ;
1234: LD_INT 4
1236: PPUSH
1237: LD_INT 11
1239: PPUSH
1240: CALL 44817 0 2
// end ;
1244: LD_VAR 0 1
1248: RET
// every 0 0$1 trigger debug do var i ;
1249: LD_EXP 1
1253: IFFALSE 1351
1255: GO 1257
1257: DISABLE
1258: LD_INT 0
1260: PPUSH
// begin enable ;
1261: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
1262: LD_ADDR_VAR 0 1
1266: PUSH
1267: LD_INT 22
1269: PUSH
1270: LD_INT 7
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 2
1279: PUSH
1280: LD_INT 21
1282: PUSH
1283: LD_INT 1
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 21
1292: PUSH
1293: LD_INT 2
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 24
1310: PUSH
1311: LD_INT 1000
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: FOR_IN
1333: IFFALSE 1349
// SetLives ( i , 1000 ) ;
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 1000
1342: PPUSH
1343: CALL_OW 234
1347: GO 1332
1349: POP
1350: POP
// end ;
1351: PPOPN 1
1353: END
// every 0 0$1 trigger artifactDestroyCounter >= 5 do
1354: LD_EXP 16
1358: PUSH
1359: LD_INT 5
1361: GREATEREQUAL
1362: IFFALSE 1374
1364: GO 1366
1366: DISABLE
// SetAchievement ( ACH_ARTIFACT ) ; end_of_file
1367: LD_STRING ACH_ARTIFACT
1369: PPUSH
1370: CALL_OW 543
1374: END
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Connie ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export function PrepareAlliance ; var i , veh , selected , tmp ; begin
1375: LD_INT 0
1377: PPUSH
1378: PPUSH
1379: PPUSH
1380: PPUSH
1381: PPUSH
// uc_side := 7 ;
1382: LD_ADDR_OWVAR 20
1386: PUSH
1387: LD_INT 7
1389: ST_TO_ADDR
// tmp := [ ] ;
1390: LD_ADDR_VAR 0 5
1394: PUSH
1395: EMPTY
1396: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
1397: LD_ADDR_EXP 17
1401: PUSH
1402: LD_STRING JMM
1404: PPUSH
1405: LD_EXP 1
1409: NOT
1410: PPUSH
1411: LD_STRING 14a_
1413: PPUSH
1414: CALL 50643 0 3
1418: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
1419: LD_ADDR_EXP 49
1423: PUSH
1424: LD_STRING Burlak
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 14a_
1435: PPUSH
1436: CALL 50643 0 3
1440: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1441: LD_ADDR_EXP 32
1445: PUSH
1446: LD_STRING Joan
1448: PPUSH
1449: LD_EXP 1
1453: NOT
1454: PPUSH
1455: LD_STRING 13a_
1457: PPUSH
1458: CALL 50643 0 3
1462: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1463: LD_ADDR_EXP 18
1467: PUSH
1468: LD_STRING Roth
1470: PPUSH
1471: LD_EXP 1
1475: NOT
1476: PPUSH
1477: LD_STRING 13a_
1479: PPUSH
1480: CALL 50643 0 3
1484: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1485: LD_ADDR_EXP 35
1489: PUSH
1490: LD_STRING Gossudarov
1492: PPUSH
1493: LD_EXP 1
1497: NOT
1498: PPUSH
1499: LD_STRING 13a_
1501: PPUSH
1502: CALL 50643 0 3
1506: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1507: LD_ADDR_EXP 23
1511: PUSH
1512: LD_STRING Denis
1514: PPUSH
1515: LD_EXP 1
1519: NOT
1520: PPUSH
1521: LD_STRING 13a_
1523: PPUSH
1524: CALL 50643 0 3
1528: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1529: LD_ADDR_EXP 33
1533: PUSH
1534: LD_STRING DeltaDoctor
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_STRING 13a_
1545: PPUSH
1546: CALL 50643 0 3
1550: ST_TO_ADDR
// if DeltaDoctor then
1551: LD_EXP 33
1555: IFFALSE 1573
// tmp := tmp ^ DeltaDoctor ;
1557: LD_ADDR_VAR 0 5
1561: PUSH
1562: LD_VAR 0 5
1566: PUSH
1567: LD_EXP 33
1571: ADD
1572: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1573: LD_ADDR_EXP 31
1577: PUSH
1578: LD_STRING Simms
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_STRING 13a_
1589: PPUSH
1590: CALL 50643 0 3
1594: ST_TO_ADDR
// if Simms then
1595: LD_EXP 31
1599: IFFALSE 1617
// tmp := tmp ^ Simms ;
1601: LD_ADDR_VAR 0 5
1605: PUSH
1606: LD_VAR 0 5
1610: PUSH
1611: LD_EXP 31
1615: ADD
1616: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
1617: LD_ADDR_EXP 29
1621: PUSH
1622: LD_STRING Frank
1624: PPUSH
1625: LD_EXP 1
1629: NOT
1630: PPUSH
1631: LD_STRING 13a_
1633: PPUSH
1634: CALL 50643 0 3
1638: ST_TO_ADDR
// if Frank then
1639: LD_EXP 29
1643: IFFALSE 1661
// tmp := tmp ^ Frank ;
1645: LD_ADDR_VAR 0 5
1649: PUSH
1650: LD_VAR 0 5
1654: PUSH
1655: LD_EXP 29
1659: ADD
1660: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1661: LD_ADDR_EXP 36
1665: PUSH
1666: LD_STRING Kirilenkova
1668: PPUSH
1669: LD_EXP 1
1673: NOT
1674: PPUSH
1675: LD_STRING 13a_
1677: PPUSH
1678: CALL 50643 0 3
1682: ST_TO_ADDR
// if Kirilenkova then
1683: LD_EXP 36
1687: IFFALSE 1705
// tmp := tmp ^ Kirilenkova ;
1689: LD_ADDR_VAR 0 5
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_EXP 36
1703: ADD
1704: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
1705: LD_ADDR_EXP 37
1709: PUSH
1710: LD_STRING Titov
1712: PPUSH
1713: LD_EXP 1
1717: NOT
1718: PPUSH
1719: LD_STRING 13a_
1721: PPUSH
1722: CALL 50643 0 3
1726: ST_TO_ADDR
// if Titov then
1727: LD_EXP 37
1731: IFFALSE 1749
// tmp := tmp ^ Titov ;
1733: LD_ADDR_VAR 0 5
1737: PUSH
1738: LD_VAR 0 5
1742: PUSH
1743: LD_EXP 37
1747: ADD
1748: ST_TO_ADDR
// Fadeev := PrepareUnit ( Fadeev , ( not debug ) , 13a_ ) ;
1749: LD_ADDR_EXP 38
1753: PUSH
1754: LD_STRING Fadeev
1756: PPUSH
1757: LD_EXP 1
1761: NOT
1762: PPUSH
1763: LD_STRING 13a_
1765: PPUSH
1766: CALL 50643 0 3
1770: ST_TO_ADDR
// if Fadeev then
1771: LD_EXP 38
1775: IFFALSE 1793
// tmp := tmp ^ Fadeev ;
1777: LD_ADDR_VAR 0 5
1781: PUSH
1782: LD_VAR 0 5
1786: PUSH
1787: LD_EXP 38
1791: ADD
1792: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
1793: LD_ADDR_EXP 39
1797: PUSH
1798: LD_STRING Dolgov
1800: PPUSH
1801: LD_EXP 1
1805: NOT
1806: PPUSH
1807: LD_STRING 13a_
1809: PPUSH
1810: CALL 50643 0 3
1814: ST_TO_ADDR
// if Dolgov then
1815: LD_EXP 39
1819: IFFALSE 1837
// tmp := tmp ^ Dolgov ;
1821: LD_ADDR_VAR 0 5
1825: PUSH
1826: LD_VAR 0 5
1830: PUSH
1831: LD_EXP 39
1835: ADD
1836: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
1837: LD_ADDR_EXP 40
1841: PUSH
1842: LD_STRING Petrosyan
1844: PPUSH
1845: LD_EXP 1
1849: NOT
1850: PPUSH
1851: LD_STRING 13a_
1853: PPUSH
1854: CALL 50643 0 3
1858: ST_TO_ADDR
// if Petrosyan then
1859: LD_EXP 40
1863: IFFALSE 1881
// tmp := tmp ^ Petrosyan ;
1865: LD_ADDR_VAR 0 5
1869: PUSH
1870: LD_VAR 0 5
1874: PUSH
1875: LD_EXP 40
1879: ADD
1880: ST_TO_ADDR
// Scholtze := PrepareUnit ( Scholtze , ( not debug ) , 13a_ ) ;
1881: LD_ADDR_EXP 41
1885: PUSH
1886: LD_STRING Scholtze
1888: PPUSH
1889: LD_EXP 1
1893: NOT
1894: PPUSH
1895: LD_STRING 13a_
1897: PPUSH
1898: CALL 50643 0 3
1902: ST_TO_ADDR
// if Scholtze then
1903: LD_EXP 41
1907: IFFALSE 1925
// tmp := tmp ^ Scholtze ;
1909: LD_ADDR_VAR 0 5
1913: PUSH
1914: LD_VAR 0 5
1918: PUSH
1919: LD_EXP 41
1923: ADD
1924: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , ( not debug ) , 13a_ ) ;
1925: LD_ADDR_EXP 42
1929: PUSH
1930: LD_STRING Oblukov
1932: PPUSH
1933: LD_EXP 1
1937: NOT
1938: PPUSH
1939: LD_STRING 13a_
1941: PPUSH
1942: CALL 50643 0 3
1946: ST_TO_ADDR
// if Oblukov then
1947: LD_EXP 42
1951: IFFALSE 1969
// tmp := tmp ^ Oblukov ;
1953: LD_ADDR_VAR 0 5
1957: PUSH
1958: LD_VAR 0 5
1962: PUSH
1963: LD_EXP 42
1967: ADD
1968: ST_TO_ADDR
// Kapitsova := PrepareUnit ( Kapitsova , ( not debug ) , 13a_ ) ;
1969: LD_ADDR_EXP 43
1973: PUSH
1974: LD_STRING Kapitsova
1976: PPUSH
1977: LD_EXP 1
1981: NOT
1982: PPUSH
1983: LD_STRING 13a_
1985: PPUSH
1986: CALL 50643 0 3
1990: ST_TO_ADDR
// if Kapitsova then
1991: LD_EXP 43
1995: IFFALSE 2013
// tmp := tmp ^ Kapitsova ;
1997: LD_ADDR_VAR 0 5
2001: PUSH
2002: LD_VAR 0 5
2006: PUSH
2007: LD_EXP 43
2011: ADD
2012: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , ( not debug ) , 13a_ ) ;
2013: LD_ADDR_EXP 44
2017: PUSH
2018: LD_STRING Lipshchin
2020: PPUSH
2021: LD_EXP 1
2025: NOT
2026: PPUSH
2027: LD_STRING 13a_
2029: PPUSH
2030: CALL 50643 0 3
2034: ST_TO_ADDR
// if Lipshchin then
2035: LD_EXP 44
2039: IFFALSE 2057
// tmp := tmp ^ Lipshchin ;
2041: LD_ADDR_VAR 0 5
2045: PUSH
2046: LD_VAR 0 5
2050: PUSH
2051: LD_EXP 44
2055: ADD
2056: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , ( not debug ) , 13a_ ) ;
2057: LD_ADDR_EXP 45
2061: PUSH
2062: LD_STRING Petrovova
2064: PPUSH
2065: LD_EXP 1
2069: NOT
2070: PPUSH
2071: LD_STRING 13a_
2073: PPUSH
2074: CALL 50643 0 3
2078: ST_TO_ADDR
// if Petrovova then
2079: LD_EXP 45
2083: IFFALSE 2101
// tmp := tmp ^ Petrovova ;
2085: LD_ADDR_VAR 0 5
2089: PUSH
2090: LD_VAR 0 5
2094: PUSH
2095: LD_EXP 45
2099: ADD
2100: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , 13a_ ) ;
2101: LD_ADDR_EXP 46
2105: PUSH
2106: LD_STRING Kovalyuk
2108: PPUSH
2109: LD_EXP 1
2113: NOT
2114: PPUSH
2115: LD_STRING 13a_
2117: PPUSH
2118: CALL 50643 0 3
2122: ST_TO_ADDR
// if Kovalyuk then
2123: LD_EXP 46
2127: IFFALSE 2145
// tmp := tmp ^ Kovalyuk ;
2129: LD_ADDR_VAR 0 5
2133: PUSH
2134: LD_VAR 0 5
2138: PUSH
2139: LD_EXP 46
2143: ADD
2144: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , ( not debug ) , 13a_ ) ;
2145: LD_ADDR_EXP 47
2149: PUSH
2150: LD_STRING Kuzmov
2152: PPUSH
2153: LD_EXP 1
2157: NOT
2158: PPUSH
2159: LD_STRING 13a_
2161: PPUSH
2162: CALL 50643 0 3
2166: ST_TO_ADDR
// if Kuzmov then
2167: LD_EXP 47
2171: IFFALSE 2189
// tmp := tmp ^ Kuzmov ;
2173: LD_ADDR_VAR 0 5
2177: PUSH
2178: LD_VAR 0 5
2182: PUSH
2183: LD_EXP 47
2187: ADD
2188: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2189: LD_ADDR_EXP 48
2193: PUSH
2194: LD_STRING Karamazov
2196: PPUSH
2197: LD_EXP 1
2201: NOT
2202: PPUSH
2203: LD_STRING 13a_
2205: PPUSH
2206: CALL 50643 0 3
2210: ST_TO_ADDR
// if Karamazov then
2211: LD_EXP 48
2215: IFFALSE 2233
// tmp := tmp ^ Karamazov ;
2217: LD_ADDR_VAR 0 5
2221: PUSH
2222: LD_VAR 0 5
2226: PUSH
2227: LD_EXP 48
2231: ADD
2232: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 50
2237: PUSH
2238: LD_STRING Belkov
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 50643 0 3
2254: ST_TO_ADDR
// if Belkov then
2255: LD_EXP 50
2259: IFFALSE 2277
// tmp := tmp ^ Belkov ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_VAR 0 5
2270: PUSH
2271: LD_EXP 50
2275: ADD
2276: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 51
2281: PUSH
2282: LD_STRING Gnyevko
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 50643 0 3
2298: ST_TO_ADDR
// if Gnyevko then
2299: LD_EXP 51
2303: IFFALSE 2321
// tmp := tmp ^ Gnyevko ;
2305: LD_ADDR_VAR 0 5
2309: PUSH
2310: LD_VAR 0 5
2314: PUSH
2315: LD_EXP 51
2319: ADD
2320: ST_TO_ADDR
// Connie = NewCharacter ( Coonie ) ;
2321: LD_ADDR_EXP 34
2325: PUSH
2326: LD_STRING Coonie
2328: PPUSH
2329: CALL_OW 25
2333: ST_TO_ADDR
// if not Lisa then
2334: LD_EXP 19
2338: NOT
2339: IFFALSE 2385
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , 13a_ ) ;
2341: LD_ADDR_EXP 19
2345: PUSH
2346: LD_STRING Lisa
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 13a_
2357: PPUSH
2358: CALL 50643 0 3
2362: ST_TO_ADDR
// if Lisa then
2363: LD_EXP 19
2367: IFFALSE 2385
// tmp := tmp ^ Lisa ;
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: LD_VAR 0 5
2378: PUSH
2379: LD_EXP 19
2383: ADD
2384: ST_TO_ADDR
// end ; if not Donaldson then
2385: LD_EXP 20
2389: NOT
2390: IFFALSE 2436
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2392: LD_ADDR_EXP 20
2396: PUSH
2397: LD_STRING Donaldson
2399: PPUSH
2400: LD_EXP 1
2404: NOT
2405: PPUSH
2406: LD_STRING 13a_
2408: PPUSH
2409: CALL 50643 0 3
2413: ST_TO_ADDR
// if Donaldson then
2414: LD_EXP 20
2418: IFFALSE 2436
// tmp := tmp ^ Donaldson ;
2420: LD_ADDR_VAR 0 5
2424: PUSH
2425: LD_VAR 0 5
2429: PUSH
2430: LD_EXP 20
2434: ADD
2435: ST_TO_ADDR
// end ; if not Bobby then
2436: LD_EXP 21
2440: NOT
2441: IFFALSE 2487
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 13a_ ) ;
2443: LD_ADDR_EXP 21
2447: PUSH
2448: LD_STRING Bobby
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 13a_
2459: PPUSH
2460: CALL 50643 0 3
2464: ST_TO_ADDR
// if Bobby then
2465: LD_EXP 21
2469: IFFALSE 2487
// tmp := tmp ^ Bobby ;
2471: LD_ADDR_VAR 0 5
2475: PUSH
2476: LD_VAR 0 5
2480: PUSH
2481: LD_EXP 21
2485: ADD
2486: ST_TO_ADDR
// end ; if not Cyrus then
2487: LD_EXP 22
2491: NOT
2492: IFFALSE 2538
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13a_ ) ;
2494: LD_ADDR_EXP 22
2498: PUSH
2499: LD_STRING Cyrus
2501: PPUSH
2502: LD_EXP 1
2506: NOT
2507: PPUSH
2508: LD_STRING 13a_
2510: PPUSH
2511: CALL 50643 0 3
2515: ST_TO_ADDR
// if Cyrus then
2516: LD_EXP 22
2520: IFFALSE 2538
// tmp := tmp ^ Cyrus ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_VAR 0 5
2531: PUSH
2532: LD_EXP 22
2536: ADD
2537: ST_TO_ADDR
// end ; if not Brown then
2538: LD_EXP 24
2542: NOT
2543: IFFALSE 2589
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 13a_ ) ;
2545: LD_ADDR_EXP 24
2549: PUSH
2550: LD_STRING Brown
2552: PPUSH
2553: LD_EXP 1
2557: NOT
2558: PPUSH
2559: LD_STRING 13a_
2561: PPUSH
2562: CALL 50643 0 3
2566: ST_TO_ADDR
// if Brown then
2567: LD_EXP 24
2571: IFFALSE 2589
// tmp := tmp ^ Brown ;
2573: LD_ADDR_VAR 0 5
2577: PUSH
2578: LD_VAR 0 5
2582: PUSH
2583: LD_EXP 24
2587: ADD
2588: ST_TO_ADDR
// end ; if not Gladstone then
2589: LD_EXP 25
2593: NOT
2594: IFFALSE 2640
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13a_ ) ;
2596: LD_ADDR_EXP 25
2600: PUSH
2601: LD_STRING Gladstone
2603: PPUSH
2604: LD_EXP 1
2608: NOT
2609: PPUSH
2610: LD_STRING 13a_
2612: PPUSH
2613: CALL 50643 0 3
2617: ST_TO_ADDR
// if Gladstone then
2618: LD_EXP 25
2622: IFFALSE 2640
// tmp := tmp ^ Gladstone ;
2624: LD_ADDR_VAR 0 5
2628: PUSH
2629: LD_VAR 0 5
2633: PUSH
2634: LD_EXP 25
2638: ADD
2639: ST_TO_ADDR
// end ; if not Cornel then
2640: LD_EXP 27
2644: NOT
2645: IFFALSE 2691
// begin Cornel := PrepareUnit ( Cornel , ( not debug ) , 13a_ ) ;
2647: LD_ADDR_EXP 27
2651: PUSH
2652: LD_STRING Cornel
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_STRING 13a_
2663: PPUSH
2664: CALL 50643 0 3
2668: ST_TO_ADDR
// if Cornel then
2669: LD_EXP 27
2673: IFFALSE 2691
// tmp := tmp ^ Cornel ;
2675: LD_ADDR_VAR 0 5
2679: PUSH
2680: LD_VAR 0 5
2684: PUSH
2685: LD_EXP 27
2689: ADD
2690: ST_TO_ADDR
// end ; if not Houten then
2691: LD_EXP 26
2695: NOT
2696: IFFALSE 2742
// begin Houten := PrepareUnit ( Houten , ( not debug ) , 13a_ ) ;
2698: LD_ADDR_EXP 26
2702: PUSH
2703: LD_STRING Houten
2705: PPUSH
2706: LD_EXP 1
2710: NOT
2711: PPUSH
2712: LD_STRING 13a_
2714: PPUSH
2715: CALL 50643 0 3
2719: ST_TO_ADDR
// if Houten then
2720: LD_EXP 26
2724: IFFALSE 2742
// tmp := tmp ^ Houten ;
2726: LD_ADDR_VAR 0 5
2730: PUSH
2731: LD_VAR 0 5
2735: PUSH
2736: LD_EXP 26
2740: ADD
2741: ST_TO_ADDR
// end ; if not Gary then
2742: LD_EXP 28
2746: NOT
2747: IFFALSE 2793
// begin Gary := PrepareUnit ( Gary , ( not debug ) , 13a_ ) ;
2749: LD_ADDR_EXP 28
2753: PUSH
2754: LD_STRING Gary
2756: PPUSH
2757: LD_EXP 1
2761: NOT
2762: PPUSH
2763: LD_STRING 13a_
2765: PPUSH
2766: CALL 50643 0 3
2770: ST_TO_ADDR
// if Gary then
2771: LD_EXP 28
2775: IFFALSE 2793
// tmp := tmp ^ Gary ;
2777: LD_ADDR_VAR 0 5
2781: PUSH
2782: LD_VAR 0 5
2786: PUSH
2787: LD_EXP 28
2791: ADD
2792: ST_TO_ADDR
// end ; if not Kikuchi then
2793: LD_EXP 30
2797: NOT
2798: IFFALSE 2844
// begin Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13a_ ) ;
2800: LD_ADDR_EXP 30
2804: PUSH
2805: LD_STRING Kikuchi
2807: PPUSH
2808: LD_EXP 1
2812: NOT
2813: PPUSH
2814: LD_STRING 13a_
2816: PPUSH
2817: CALL 50643 0 3
2821: ST_TO_ADDR
// if Kikuchi then
2822: LD_EXP 30
2826: IFFALSE 2844
// tmp := tmp ^ Kikuchi ;
2828: LD_ADDR_VAR 0 5
2832: PUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_EXP 30
2842: ADD
2843: ST_TO_ADDR
// end ; tmp := tmp union CreateCharacterSet ( 13a_others ) ;
2844: LD_ADDR_VAR 0 5
2848: PUSH
2849: LD_VAR 0 5
2853: PUSH
2854: LD_STRING 13a_others
2856: PPUSH
2857: CALL_OW 31
2861: UNION
2862: ST_TO_ADDR
// tmp := tmp diff 0 ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_VAR 0 5
2872: PUSH
2873: LD_INT 0
2875: DIFF
2876: ST_TO_ADDR
// if tmp < 15 then
2877: LD_VAR 0 5
2881: PUSH
2882: LD_INT 15
2884: LESS
2885: IFFALSE 2973
// for i = 15 downto tmp do
2887: LD_ADDR_VAR 0 2
2891: PUSH
2892: DOUBLE
2893: LD_INT 15
2895: INC
2896: ST_TO_ADDR
2897: LD_VAR 0 5
2901: PUSH
2902: FOR_DOWNTO
2903: IFFALSE 2971
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
2905: LD_ADDR_OWVAR 21
2909: PUSH
2910: LD_INT 1
2912: PUSH
2913: LD_INT 3
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 1
2922: PPUSH
2923: LD_INT 2
2925: PPUSH
2926: CALL_OW 12
2930: ARRAY
2931: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
2932: LD_INT 0
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 4
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: LD_INT 8
2948: PPUSH
2949: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
2953: LD_ADDR_VAR 0 5
2957: PUSH
2958: LD_VAR 0 5
2962: PUSH
2963: CALL_OW 44
2967: ADD
2968: ST_TO_ADDR
// end ;
2969: GO 2902
2971: POP
2972: POP
// if not debug then
2973: LD_EXP 1
2977: NOT
2978: IFFALSE 3150
// selected = CharacterSelection (  , [ 15 , 14 , 13 ] [ Difficulty ] , [ 15 , 14 , 13 ] [ Difficulty ] , [ sel_dont_change_class , JMM , Burlak , Roth , Joan , Denis , Gossudarov , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp , [ class_soldier , class_scientistic , [ class_engineer , 1 ] , class_mechanic , [ class_sniper , 0 , 3 ] , [ class_bazooker , 0 , 3 ] ] ) else
2980: LD_ADDR_VAR 0 4
2984: PUSH
2985: LD_STRING 
2987: PPUSH
2988: LD_INT 15
2990: PUSH
2991: LD_INT 14
2993: PUSH
2994: LD_INT 13
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: LIST
3001: PUSH
3002: LD_OWVAR 67
3006: ARRAY
3007: PPUSH
3008: LD_INT 15
3010: PUSH
3011: LD_INT 14
3013: PUSH
3014: LD_INT 13
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_OWVAR 67
3026: ARRAY
3027: PPUSH
3028: LD_INT -6
3030: PUSH
3031: LD_EXP 17
3035: PUSH
3036: LD_EXP 49
3040: PUSH
3041: LD_EXP 18
3045: PUSH
3046: LD_EXP 32
3050: PUSH
3051: LD_EXP 23
3055: PUSH
3056: LD_EXP 35
3060: PUSH
3061: LD_INT -2
3063: PUSH
3064: LD_INT -3
3066: PUSH
3067: LD_INT -5
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_VAR 0 5
3086: ADD
3087: PPUSH
3088: LD_INT 1
3090: PUSH
3091: LD_INT 4
3093: PUSH
3094: LD_INT 2
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 3
3106: PUSH
3107: LD_INT 5
3109: PUSH
3110: LD_INT 0
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 9
3123: PUSH
3124: LD_INT 0
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 42
3147: ST_TO_ADDR
3148: GO 3229
// selected := [ Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ] ;
3150: LD_ADDR_VAR 0 4
3154: PUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_EXP 38
3164: PUSH
3165: LD_EXP 39
3169: PUSH
3170: LD_EXP 40
3174: PUSH
3175: LD_EXP 41
3179: PUSH
3180: LD_EXP 42
3184: PUSH
3185: LD_EXP 43
3189: PUSH
3190: LD_EXP 44
3194: PUSH
3195: LD_EXP 45
3199: PUSH
3200: LD_EXP 46
3204: PUSH
3205: LD_EXP 47
3209: PUSH
3210: LD_EXP 48
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: ST_TO_ADDR
// uc_nation := 1 ;
3229: LD_ADDR_OWVAR 21
3233: PUSH
3234: LD_INT 1
3236: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) ;
3237: LD_INT 5
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_INT 1
3245: PPUSH
3246: LD_INT 6
3248: PPUSH
3249: LD_INT 100
3251: PPUSH
3252: CALL 55467 0 5
// veh := CreateVehicle ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 45
3265: ST_TO_ADDR
// SetMark ( veh , - 7 ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 7
3273: NEG
3274: PPUSH
3275: CALL_OW 242
// SetDir ( veh , 3 ) ;
3279: LD_VAR 0 3
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: CALL_OW 233
// PlaceUnitArea ( veh , allianceJMMSpawnArea , false ) ;
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 31
3298: PPUSH
3299: LD_INT 0
3301: PPUSH
3302: CALL_OW 49
// PlaceHumanInUnit ( JMM , veh ) ;
3306: LD_EXP 17
3310: PPUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 52
// if Joan then
3320: LD_EXP 32
3324: IFFALSE 3396
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_radar , 100 ) ;
3326: LD_INT 3
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: LD_INT 11
3337: PPUSH
3338: LD_INT 100
3340: PPUSH
3341: CALL 55467 0 5
// veh := CreateVehicle ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: CALL_OW 45
3354: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3355: LD_VAR 0 3
3359: PPUSH
3360: LD_INT 3
3362: PPUSH
3363: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3367: LD_VAR 0 3
3371: PPUSH
3372: LD_INT 30
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: CALL_OW 49
// PlaceHumanInUnit ( Joan , veh ) ;
3382: LD_EXP 32
3386: PPUSH
3387: LD_VAR 0 3
3391: PPUSH
3392: CALL_OW 52
// end ; if Roth then
3396: LD_EXP 18
3400: IFFALSE 3472
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_radar , 100 ) ;
3402: LD_INT 3
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 1
3410: PPUSH
3411: LD_INT 11
3413: PPUSH
3414: LD_INT 100
3416: PPUSH
3417: CALL 55467 0 5
// veh := CreateVehicle ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: CALL_OW 45
3430: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: LD_INT 3
3438: PPUSH
3439: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3443: LD_VAR 0 3
3447: PPUSH
3448: LD_INT 30
3450: PPUSH
3451: LD_INT 0
3453: PPUSH
3454: CALL_OW 49
// PlaceHumanInUnit ( Roth , veh ) ;
3458: LD_EXP 18
3462: PPUSH
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 52
// end ; if Denis then
3472: LD_EXP 23
3476: IFFALSE 3548
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_laser , 100 ) ;
3478: LD_INT 5
3480: PPUSH
3481: LD_INT 3
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: LD_INT 9
3489: PPUSH
3490: LD_INT 100
3492: PPUSH
3493: CALL 55467 0 5
// veh := CreateVehicle ;
3497: LD_ADDR_VAR 0 3
3501: PUSH
3502: CALL_OW 45
3506: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3507: LD_VAR 0 3
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 30
3526: PPUSH
3527: LD_INT 0
3529: PPUSH
3530: CALL_OW 49
// PlaceHumanInUnit ( Denis , veh ) ;
3534: LD_EXP 23
3538: PPUSH
3539: LD_VAR 0 3
3543: PPUSH
3544: CALL_OW 52
// end ; uc_nation := 3 ;
3548: LD_ADDR_OWVAR 21
3552: PUSH
3553: LD_INT 3
3555: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_rocket_launcher , 100 ) ;
3556: LD_INT 22
3558: PPUSH
3559: LD_INT 3
3561: PPUSH
3562: LD_INT 1
3564: PPUSH
3565: LD_INT 45
3567: PPUSH
3568: LD_INT 100
3570: PPUSH
3571: CALL 55467 0 5
// veh := CreateVehicle ;
3575: LD_ADDR_VAR 0 3
3579: PUSH
3580: CALL_OW 45
3584: ST_TO_ADDR
// SetMark ( veh , - 7 ) ;
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_INT 7
3592: NEG
3593: PPUSH
3594: CALL_OW 242
// SetDir ( veh , 3 ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_INT 3
3605: PPUSH
3606: CALL_OW 233
// PlaceUnitArea ( veh , allianceJMMSpawnArea , false ) ;
3610: LD_VAR 0 3
3614: PPUSH
3615: LD_INT 31
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL_OW 49
// PlaceHumanInUnit ( Burlak , veh ) ;
3625: LD_EXP 49
3629: PPUSH
3630: LD_VAR 0 3
3634: PPUSH
3635: CALL_OW 52
// if Gossudarov then
3639: LD_EXP 35
3643: IFFALSE 3730
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
3645: LD_INT 22
3647: PPUSH
3648: LD_INT 3
3650: PPUSH
3651: LD_INT 1
3653: PPUSH
3654: LD_INT 51
3656: PPUSH
3657: LD_INT 100
3659: PPUSH
3660: CALL 55467 0 5
// veh := CreateVehicle ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 45
3673: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3686: LD_VAR 0 3
3690: PPUSH
3691: LD_INT 30
3693: PPUSH
3694: LD_INT 0
3696: PPUSH
3697: CALL_OW 49
// PlaceHumanInUnit ( Gossudarov , veh ) ;
3701: LD_EXP 35
3705: PPUSH
3706: LD_VAR 0 3
3710: PPUSH
3711: CALL_OW 52
// SetCargo ( veh , mat_cans , 100 ) ;
3715: LD_VAR 0 3
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: LD_INT 100
3725: PPUSH
3726: CALL_OW 290
// end ; for i in selected do
3730: LD_ADDR_VAR 0 2
3734: PUSH
3735: LD_VAR 0 4
3739: PUSH
3740: FOR_IN
3741: IFFALSE 4299
// begin uc_nation := GetNation ( i ) ;
3743: LD_ADDR_OWVAR 21
3747: PUSH
3748: LD_VAR 0 2
3752: PPUSH
3753: CALL_OW 248
3757: ST_TO_ADDR
// if i in [ Lisa , Donaldson , Cyrus , Bobby ] then
3758: LD_VAR 0 2
3762: PUSH
3763: LD_EXP 19
3767: PUSH
3768: LD_EXP 20
3772: PUSH
3773: LD_EXP 22
3777: PUSH
3778: LD_EXP 21
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: IN
3789: IFFALSE 3812
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) else
3791: LD_INT 5
3793: PPUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 1
3799: PPUSH
3800: LD_INT 6
3802: PPUSH
3803: LD_INT 100
3805: PPUSH
3806: CALL 55467 0 5
3810: GO 4246
// if i in [ Oblukov , Kuzmov , Petrovova , Titov ] then
3812: LD_VAR 0 2
3816: PUSH
3817: LD_EXP 42
3821: PUSH
3822: LD_EXP 47
3826: PUSH
3827: LD_EXP 45
3831: PUSH
3832: LD_EXP 37
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: IN
3843: IFFALSE 3874
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun , rand ( 65 , 75 ) ) else
3845: LD_INT 24
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 46
3856: PPUSH
3857: LD_INT 65
3859: PPUSH
3860: LD_INT 75
3862: PPUSH
3863: CALL_OW 12
3867: PPUSH
3868: CALL 55467 0 5
3872: GO 4246
// if i = Karamazov then
3874: LD_VAR 0 2
3878: PUSH
3879: LD_EXP 48
3883: EQUAL
3884: IFFALSE 3907
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_crane , 100 ) else
3886: LD_INT 22
3888: PPUSH
3889: LD_INT 3
3891: PPUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 52
3897: PPUSH
3898: LD_INT 100
3900: PPUSH
3901: CALL 55467 0 5
3905: GO 4246
// if i = Brown then
3907: LD_VAR 0 2
3911: PUSH
3912: LD_EXP 24
3916: EQUAL
3917: IFFALSE 3940
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_crane , 100 ) else
3919: LD_INT 3
3921: PPUSH
3922: LD_INT 3
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: LD_INT 13
3930: PPUSH
3931: LD_INT 100
3933: PPUSH
3934: CALL 55467 0 5
3938: GO 4246
// if uc_nation = nation_american then
3940: LD_OWVAR 21
3944: PUSH
3945: LD_INT 1
3947: EQUAL
3948: IFFALSE 4099
// begin PrepareVehicle ( [ us_medium_tracked , us_morphling , us_morphling ] [ uc_nation mod 3 + 1 ] , [ engine_combustion , engine_siberite , engine_combustion ] [ uc_nation mod 3 + 1 ] , control_manual , [ [ us_radar , us_gatling_gun , us_double_gun ] , [ us_heavy_gun , us_rocket_launcher , us_laser ] , [ us_heavy_gun , us_laser , us_cargo_bay ] ] [ uc_nation mod 3 + 1 ] [ rand ( 1 , 3 ) ] , rand ( 65 , 75 ) ) ;
3950: LD_INT 3
3952: PUSH
3953: LD_INT 5
3955: PUSH
3956: LD_INT 5
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_OWVAR 21
3968: PUSH
3969: LD_INT 3
3971: MOD
3972: PUSH
3973: LD_INT 1
3975: PLUS
3976: ARRAY
3977: PPUSH
3978: LD_INT 1
3980: PUSH
3981: LD_INT 3
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: PUSH
3992: LD_OWVAR 21
3996: PUSH
3997: LD_INT 3
3999: MOD
4000: PUSH
4001: LD_INT 1
4003: PLUS
4004: ARRAY
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: LD_INT 11
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 5
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: LD_INT 7
4028: PUSH
4029: LD_INT 9
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: PUSH
4037: LD_INT 6
4039: PUSH
4040: LD_INT 9
4042: PUSH
4043: LD_INT 12
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_OWVAR 21
4060: PUSH
4061: LD_INT 3
4063: MOD
4064: PUSH
4065: LD_INT 1
4067: PLUS
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: PPUSH
4073: LD_INT 3
4075: PPUSH
4076: CALL_OW 12
4080: ARRAY
4081: PPUSH
4082: LD_INT 65
4084: PPUSH
4085: LD_INT 75
4087: PPUSH
4088: CALL_OW 12
4092: PPUSH
4093: CALL 55467 0 5
// end else
4097: GO 4246
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled ] [ uc_nation mod 3 + 1 ] , [ engine_combustion , engine_siberite , engine_combustion ] [ uc_nation mod 3 + 1 ] , control_manual , [ [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] , [ ru_heavy_gun , ru_rocket_launcher , ru_gun ] , [ ru_heavy_gun , ru_gatling_gun , ru_rocket_launcher ] ] [ uc_nation mod 3 + 1 ] [ rand ( 1 , 3 ) ] , rand ( 65 , 75 ) ) ;
4099: LD_INT 22
4101: PUSH
4102: LD_INT 23
4104: PUSH
4105: LD_INT 23
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: PUSH
4113: LD_OWVAR 21
4117: PUSH
4118: LD_INT 3
4120: MOD
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: ARRAY
4126: PPUSH
4127: LD_INT 1
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: PUSH
4141: LD_OWVAR 21
4145: PUSH
4146: LD_INT 3
4148: MOD
4149: PUSH
4150: LD_INT 1
4152: PLUS
4153: ARRAY
4154: PPUSH
4155: LD_INT 1
4157: PPUSH
4158: LD_INT 45
4160: PUSH
4161: LD_INT 43
4163: PUSH
4164: LD_INT 44
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 46
4174: PUSH
4175: LD_INT 45
4177: PUSH
4178: LD_INT 44
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 46
4188: PUSH
4189: LD_INT 43
4191: PUSH
4192: LD_INT 45
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: LIST
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_OWVAR 21
4209: PUSH
4210: LD_INT 3
4212: MOD
4213: PUSH
4214: LD_INT 1
4216: PLUS
4217: ARRAY
4218: PUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 3
4224: PPUSH
4225: CALL_OW 12
4229: ARRAY
4230: PPUSH
4231: LD_INT 65
4233: PPUSH
4234: LD_INT 75
4236: PPUSH
4237: CALL_OW 12
4241: PPUSH
4242: CALL 55467 0 5
// end ; veh := CreateVehicle ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 45
4255: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4256: LD_VAR 0 3
4260: PPUSH
4261: LD_INT 3
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 30
4275: PPUSH
4276: LD_INT 0
4278: PPUSH
4279: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4283: LD_VAR 0 2
4287: PPUSH
4288: LD_VAR 0 3
4292: PPUSH
4293: CALL_OW 52
// end ;
4297: GO 3740
4299: POP
4300: POP
// if artifactArCaptured then
4301: LD_EXP 9
4305: IFFALSE 4391
// begin uc_nation := nation_american ;
4307: LD_ADDR_OWVAR 21
4311: PUSH
4312: LD_INT 1
4314: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
4315: LD_INT 3
4317: PPUSH
4318: LD_INT 3
4320: PPUSH
4321: LD_INT 3
4323: PPUSH
4324: LD_INT 12
4326: PPUSH
4327: LD_INT 100
4329: PPUSH
4330: CALL 55467 0 5
// veh := CreateVehicle ;
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: CALL_OW 45
4343: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: CALL_OW 233
// PlaceUnitXY ( veh , 198 , 22 , false ) ;
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_INT 198
4363: PPUSH
4364: LD_INT 22
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
4374: LD_VAR 0 3
4378: PPUSH
4379: LD_INT 4
4381: PPUSH
4382: LD_INT 50
4384: PPUSH
4385: CALL_OW 290
// end else
4389: GO 4410
// begin CreateResourcesXY ( mat_artifact , 267 , 226 , 5 , false ) ;
4391: LD_INT 4
4393: PPUSH
4394: LD_INT 267
4396: PPUSH
4397: LD_INT 226
4399: PPUSH
4400: LD_INT 5
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 58
// end ; uc_nation := nation_american ;
4410: LD_ADDR_OWVAR 21
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
4418: LD_INT 3
4420: PPUSH
4421: LD_INT 3
4423: PPUSH
4424: LD_INT 3
4426: PPUSH
4427: LD_INT 12
4429: PPUSH
4430: LD_INT 100
4432: PPUSH
4433: CALL 55467 0 5
// veh := CreateVehicle ;
4437: LD_ADDR_VAR 0 3
4441: PUSH
4442: CALL_OW 45
4446: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4447: LD_VAR 0 3
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: CALL_OW 233
// PlaceUnitXY ( veh , 218 , 23 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 218
4466: PPUSH
4467: LD_INT 23
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
4477: LD_VAR 0 3
4481: PPUSH
4482: LD_INT 4
4484: PPUSH
4485: LD_INT 30
4487: PPUSH
4488: CALL_OW 290
// uc_nation := nation_russian ;
4492: LD_ADDR_OWVAR 21
4496: PUSH
4497: LD_INT 3
4499: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
4500: LD_INT 22
4502: PPUSH
4503: LD_INT 3
4505: PPUSH
4506: LD_INT 3
4508: PPUSH
4509: LD_INT 51
4511: PPUSH
4512: LD_INT 100
4514: PPUSH
4515: CALL 55467 0 5
// veh := CreateVehicle ;
4519: LD_ADDR_VAR 0 3
4523: PUSH
4524: CALL_OW 45
4528: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 233
// PlaceUnitXY ( veh , 214 , 20 , false ) ;
4541: LD_VAR 0 3
4545: PPUSH
4546: LD_INT 214
4548: PPUSH
4549: LD_INT 20
4551: PPUSH
4552: LD_INT 0
4554: PPUSH
4555: CALL_OW 48
// SetCargo ( veh , mat_artifact , 40 ) ;
4559: LD_VAR 0 3
4563: PPUSH
4564: LD_INT 4
4566: PPUSH
4567: LD_INT 40
4569: PPUSH
4570: CALL_OW 290
// end ; end_of_file
4574: LD_VAR 0 1
4578: RET
// export Powell ; export function PrepareAmerican ; var i , b , veh , cl , tmp , depot , lab , armoury , workshop ; begin
4579: LD_INT 0
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
// InitHc ;
4591: CALL_OW 19
// uc_side := 1 ;
4595: LD_ADDR_OWVAR 20
4599: PUSH
4600: LD_INT 1
4602: ST_TO_ADDR
// uc_nation := 1 ;
4603: LD_ADDR_OWVAR 21
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: LD_INT 22
4618: PUSH
4619: LD_INT 1
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 21
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PPUSH
4640: CALL_OW 69
4644: PUSH
4645: FOR_IN
4646: IFFALSE 4662
// SetBLevel ( i , 10 ) ;
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_INT 10
4655: PPUSH
4656: CALL_OW 241
4660: GO 4645
4662: POP
4663: POP
// SetResourceType ( GetBase ( am_depot ) , mat_cans , 7500 ) ;
4664: LD_INT 387
4666: PPUSH
4667: CALL_OW 274
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 7500
4677: PPUSH
4678: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_oil , 4000 ) ;
4682: LD_INT 387
4684: PPUSH
4685: CALL_OW 274
4689: PPUSH
4690: LD_INT 2
4692: PPUSH
4693: LD_INT 4000
4695: PPUSH
4696: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_siberit , 50 ) ;
4700: LD_INT 387
4702: PPUSH
4703: CALL_OW 274
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: LD_INT 50
4713: PPUSH
4714: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_cans , 5500 ) ;
4718: LD_INT 476
4720: PPUSH
4721: CALL_OW 274
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: LD_INT 5500
4731: PPUSH
4732: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_oil , 4000 ) ;
4736: LD_INT 476
4738: PPUSH
4739: CALL_OW 274
4743: PPUSH
4744: LD_INT 2
4746: PPUSH
4747: LD_INT 4000
4749: PPUSH
4750: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_siberit , 10 ) ;
4754: LD_INT 476
4756: PPUSH
4757: CALL_OW 274
4761: PPUSH
4762: LD_INT 3
4764: PPUSH
4765: LD_INT 10
4767: PPUSH
4768: CALL_OW 277
// Powell := NewCharacter ( Powell ) ;
4772: LD_ADDR_EXP 52
4776: PUSH
4777: LD_STRING Powell
4779: PPUSH
4780: CALL_OW 25
4784: ST_TO_ADDR
// PlaceHumanInUnit ( Powell , am_depot ) ;
4785: LD_EXP 52
4789: PPUSH
4790: LD_INT 387
4792: PPUSH
4793: CALL_OW 52
// tmp := [ ] ;
4797: LD_ADDR_VAR 0 6
4801: PUSH
4802: EMPTY
4803: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12p_ ) ;
4804: LD_ADDR_EXP 19
4808: PUSH
4809: LD_STRING Lisa
4811: PPUSH
4812: LD_EXP 1
4816: NOT
4817: PPUSH
4818: LD_STRING 12p_
4820: PPUSH
4821: CALL 50643 0 3
4825: ST_TO_ADDR
// if Lisa then
4826: LD_EXP 19
4830: IFFALSE 4848
// tmp := tmp ^ Lisa ;
4832: LD_ADDR_VAR 0 6
4836: PUSH
4837: LD_VAR 0 6
4841: PUSH
4842: LD_EXP 19
4846: ADD
4847: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12p_ ) ;
4848: LD_ADDR_EXP 20
4852: PUSH
4853: LD_STRING Donaldson
4855: PPUSH
4856: LD_EXP 1
4860: NOT
4861: PPUSH
4862: LD_STRING 12p_
4864: PPUSH
4865: CALL 50643 0 3
4869: ST_TO_ADDR
// if Donaldson then
4870: LD_EXP 20
4874: IFFALSE 4892
// tmp := tmp ^ Donaldson ;
4876: LD_ADDR_VAR 0 6
4880: PUSH
4881: LD_VAR 0 6
4885: PUSH
4886: LD_EXP 20
4890: ADD
4891: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12p_ ) ;
4892: LD_ADDR_EXP 21
4896: PUSH
4897: LD_STRING Bobby
4899: PPUSH
4900: LD_EXP 1
4904: NOT
4905: PPUSH
4906: LD_STRING 12p_
4908: PPUSH
4909: CALL 50643 0 3
4913: ST_TO_ADDR
// if Bobby then
4914: LD_EXP 21
4918: IFFALSE 4936
// tmp := tmp ^ Bobby ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: LD_VAR 0 6
4929: PUSH
4930: LD_EXP 21
4934: ADD
4935: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12p_ ) ;
4936: LD_ADDR_EXP 22
4940: PUSH
4941: LD_STRING Cyrus
4943: PPUSH
4944: LD_EXP 1
4948: NOT
4949: PPUSH
4950: LD_STRING 12p_
4952: PPUSH
4953: CALL 50643 0 3
4957: ST_TO_ADDR
// if Cyrus then
4958: LD_EXP 22
4962: IFFALSE 4980
// tmp := tmp ^ Cyrus ;
4964: LD_ADDR_VAR 0 6
4968: PUSH
4969: LD_VAR 0 6
4973: PUSH
4974: LD_EXP 22
4978: ADD
4979: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 12p_ ) ;
4980: LD_ADDR_EXP 24
4984: PUSH
4985: LD_STRING Brown
4987: PPUSH
4988: LD_EXP 1
4992: NOT
4993: PPUSH
4994: LD_STRING 12p_
4996: PPUSH
4997: CALL 50643 0 3
5001: ST_TO_ADDR
// if Brown then
5002: LD_EXP 24
5006: IFFALSE 5024
// tmp := tmp ^ Brown ;
5008: LD_ADDR_VAR 0 6
5012: PUSH
5013: LD_VAR 0 6
5017: PUSH
5018: LD_EXP 24
5022: ADD
5023: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12p_ ) ;
5024: LD_ADDR_EXP 25
5028: PUSH
5029: LD_STRING Gladstone
5031: PPUSH
5032: LD_EXP 1
5036: NOT
5037: PPUSH
5038: LD_STRING 12p_
5040: PPUSH
5041: CALL 50643 0 3
5045: ST_TO_ADDR
// if Gladstone then
5046: LD_EXP 25
5050: IFFALSE 5068
// tmp := tmp ^ Gladstone ;
5052: LD_ADDR_VAR 0 6
5056: PUSH
5057: LD_VAR 0 6
5061: PUSH
5062: LD_EXP 25
5066: ADD
5067: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 12p_ ) ;
5068: LD_ADDR_EXP 26
5072: PUSH
5073: LD_STRING Houten
5075: PPUSH
5076: LD_EXP 1
5080: NOT
5081: PPUSH
5082: LD_STRING 12p_
5084: PPUSH
5085: CALL 50643 0 3
5089: ST_TO_ADDR
// if Houten then
5090: LD_EXP 26
5094: IFFALSE 5112
// tmp := tmp ^ Houten ;
5096: LD_ADDR_VAR 0 6
5100: PUSH
5101: LD_VAR 0 6
5105: PUSH
5106: LD_EXP 26
5110: ADD
5111: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12p_ ) ;
5112: LD_ADDR_EXP 27
5116: PUSH
5117: LD_STRING Cornel
5119: PPUSH
5120: LD_EXP 1
5124: NOT
5125: PPUSH
5126: LD_STRING 12p_
5128: PPUSH
5129: CALL 50643 0 3
5133: ST_TO_ADDR
// if Cornel then
5134: LD_EXP 27
5138: IFFALSE 5156
// tmp := tmp ^ Cornel ;
5140: LD_ADDR_VAR 0 6
5144: PUSH
5145: LD_VAR 0 6
5149: PUSH
5150: LD_EXP 27
5154: ADD
5155: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 12p_ ) ;
5156: LD_ADDR_EXP 28
5160: PUSH
5161: LD_STRING Gary
5163: PPUSH
5164: LD_EXP 1
5168: NOT
5169: PPUSH
5170: LD_STRING 12p_
5172: PPUSH
5173: CALL 50643 0 3
5177: ST_TO_ADDR
// if Gary then
5178: LD_EXP 28
5182: IFFALSE 5200
// tmp := tmp ^ Gary ;
5184: LD_ADDR_VAR 0 6
5188: PUSH
5189: LD_VAR 0 6
5193: PUSH
5194: LD_EXP 28
5198: ADD
5199: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12p_ ) ;
5200: LD_ADDR_EXP 30
5204: PUSH
5205: LD_STRING Kikuchi
5207: PPUSH
5208: LD_EXP 1
5212: NOT
5213: PPUSH
5214: LD_STRING 12p_
5216: PPUSH
5217: CALL 50643 0 3
5221: ST_TO_ADDR
// if Kikuchi then
5222: LD_EXP 30
5226: IFFALSE 5244
// tmp := tmp ^ Kikuchi ;
5228: LD_ADDR_VAR 0 6
5232: PUSH
5233: LD_VAR 0 6
5237: PUSH
5238: LD_EXP 30
5242: ADD
5243: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 12p_others ) ;
5244: LD_ADDR_VAR 0 6
5248: PUSH
5249: LD_VAR 0 6
5253: PUSH
5254: LD_STRING 12p_others
5256: PPUSH
5257: CALL_OW 31
5261: UNION
5262: ST_TO_ADDR
// if tmp < 36 then
5263: LD_VAR 0 6
5267: PUSH
5268: LD_INT 36
5270: LESS
5271: IFFALSE 5338
// for i = 1 to 36 - tmp do
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_INT 36
5285: PUSH
5286: LD_VAR 0 6
5290: MINUS
5291: PUSH
5292: FOR_TO
5293: IFFALSE 5336
// begin PrepareHuman ( sex_male , i mod 4 + 1 , 10 ) ;
5295: LD_INT 1
5297: PPUSH
5298: LD_VAR 0 2
5302: PUSH
5303: LD_INT 4
5305: MOD
5306: PUSH
5307: LD_INT 1
5309: PLUS
5310: PPUSH
5311: LD_INT 10
5313: PPUSH
5314: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
5318: LD_ADDR_VAR 0 6
5322: PUSH
5323: LD_VAR 0 6
5327: PUSH
5328: CALL_OW 44
5332: ADD
5333: ST_TO_ADDR
// end ;
5334: GO 5292
5336: POP
5337: POP
// for i in tmp do
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_VAR 0 6
5347: PUSH
5348: FOR_IN
5349: IFFALSE 5374
// PlaceUnitXYR ( i , 62 , 93 , 9 , false ) ;
5351: LD_VAR 0 2
5355: PPUSH
5356: LD_INT 62
5358: PPUSH
5359: LD_INT 93
5361: PPUSH
5362: LD_INT 9
5364: PPUSH
5365: LD_INT 0
5367: PPUSH
5368: CALL_OW 50
5372: GO 5348
5374: POP
5375: POP
// mc_bases := Replace ( mc_bases , 4 , FilterAllUnits ( [ f_side , 1 ] ) diff Powell ) ;
5376: LD_ADDR_EXP 87
5380: PUSH
5381: LD_EXP 87
5385: PPUSH
5386: LD_INT 4
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 69
5403: PUSH
5404: LD_EXP 52
5408: DIFF
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// uc_side := 0 ;
5415: LD_ADDR_OWVAR 20
5419: PUSH
5420: LD_INT 0
5422: ST_TO_ADDR
// uc_nation := 0 ;
5423: LD_ADDR_OWVAR 21
5427: PUSH
5428: LD_INT 0
5430: ST_TO_ADDR
// for i = 1 to 4 do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_INT 4
5443: PUSH
5444: FOR_TO
5445: IFFALSE 5476
// begin InitHc ;
5447: CALL_OW 19
// hc_class := class_apeman ;
5451: LD_ADDR_OWVAR 28
5455: PUSH
5456: LD_INT 12
5458: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , powellApe , false ) ;
5459: CALL_OW 44
5463: PPUSH
5464: LD_INT 11
5466: PPUSH
5467: LD_INT 0
5469: PPUSH
5470: CALL_OW 49
// end ;
5474: GO 5444
5476: POP
5477: POP
// end ;
5478: LD_VAR 0 1
5482: RET
// every 11 11$30 trigger not americanDestroyed and not MC_GetVehicles ( 4 , true ) do var i , tmp , target ;
5483: LD_EXP 4
5487: NOT
5488: PUSH
5489: LD_INT 4
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: CALL 45717 0 2
5499: NOT
5500: AND
5501: IFFALSE 6273
5503: GO 5505
5505: DISABLE
5506: LD_INT 0
5508: PPUSH
5509: PPUSH
5510: PPUSH
// begin enable ;
5511: ENABLE
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
5512: LD_INT 22
5514: PUSH
5515: LD_INT 1
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 23
5524: PUSH
5525: LD_INT 1
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 30
5534: PUSH
5535: LD_INT 3
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: PPUSH
5547: CALL_OW 69
5551: NOT
5552: IFFALSE 5556
// exit ;
5554: GO 6273
// if Prob ( 40 ) then
5556: LD_INT 40
5558: PPUSH
5559: CALL_OW 13
5563: IFFALSE 5690
// begin MC_InsertProduceList ( 4 , [ [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
5565: LD_INT 4
5567: PPUSH
5568: LD_INT 5
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: LD_INT 7
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 5
5588: PUSH
5589: LD_INT 1
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 7
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 5
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: LD_INT 2
5612: PUSH
5613: LD_INT 7
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 5
5624: PUSH
5625: LD_INT 1
5627: PUSH
5628: LD_INT 2
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 5
5642: PUSH
5643: LD_INT 1
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 6
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: LD_INT 5
5660: PUSH
5661: LD_INT 1
5663: PUSH
5664: LD_INT 2
5666: PUSH
5667: LD_INT 6
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PPUSH
5684: CALL 44299 0 2
// end else
5688: GO 5813
// begin MC_InsertProduceList ( 4 , [ [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_laser ] , [ us_morphling , engine_combustion , control_remote , us_laser ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
5690: LD_INT 4
5692: PPUSH
5693: LD_INT 5
5695: PUSH
5696: LD_INT 1
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: LD_INT 7
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 5
5713: PUSH
5714: LD_INT 1
5716: PUSH
5717: LD_INT 2
5719: PUSH
5720: LD_INT 9
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 1
5734: PUSH
5735: LD_INT 2
5737: PUSH
5738: LD_INT 9
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: PUSH
5747: LD_INT 5
5749: PUSH
5750: LD_INT 1
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: LD_INT 6
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 5
5767: PUSH
5768: LD_INT 1
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: LD_INT 6
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 5
5785: PUSH
5786: LD_INT 1
5788: PUSH
5789: LD_INT 2
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL 44299 0 2
// end ; repeat wait ( 0 0$1 ) ;
5813: LD_INT 35
5815: PPUSH
5816: CALL_OW 67
// until MC_GetVehicles ( 4 , true ) >= 6 ;
5820: LD_INT 4
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: CALL 45717 0 2
5830: PUSH
5831: LD_INT 6
5833: GREATEREQUAL
5834: IFFALSE 5813
// wait ( 0 0$30 ) ;
5836: LD_INT 1050
5838: PPUSH
5839: CALL_OW 67
// tmp := MC_GetVehicles ( 4 , true ) ;
5843: LD_ADDR_VAR 0 2
5847: PUSH
5848: LD_INT 4
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: CALL 45717 0 2
5858: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 4 , mc_vehicles [ 4 ] diff tmp ) ;
5859: LD_ADDR_EXP 106
5863: PUSH
5864: LD_EXP 106
5868: PPUSH
5869: LD_INT 4
5871: PPUSH
5872: LD_EXP 106
5876: PUSH
5877: LD_INT 4
5879: ARRAY
5880: PUSH
5881: LD_VAR 0 2
5885: DIFF
5886: PPUSH
5887: CALL_OW 1
5891: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
5892: LD_ADDR_VAR 0 3
5896: PUSH
5897: LD_INT 0
5899: PPUSH
5900: LD_INT 2
5902: PPUSH
5903: CALL_OW 12
5907: ST_TO_ADDR
// if target then
5908: LD_VAR 0 3
5912: IFFALSE 6040
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_VAR 0 2
5923: PPUSH
5924: LD_INT 24
5926: PUSH
5927: LD_INT 250
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PPUSH
5934: CALL_OW 72
5938: ST_TO_ADDR
// for i in tmp do
5939: LD_ADDR_VAR 0 1
5943: PUSH
5944: LD_VAR 0 2
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5990
// if GetDistUnitXY ( i , 114 , 108 ) > 9 then
5952: LD_VAR 0 1
5956: PPUSH
5957: LD_INT 114
5959: PPUSH
5960: LD_INT 108
5962: PPUSH
5963: CALL_OW 297
5967: PUSH
5968: LD_INT 9
5970: GREATER
5971: IFFALSE 5988
// ComMoveXY ( i , 114 , 108 ) ;
5973: LD_VAR 0 1
5977: PPUSH
5978: LD_INT 114
5980: PPUSH
5981: LD_INT 108
5983: PPUSH
5984: CALL_OW 111
5988: GO 5949
5990: POP
5991: POP
// wait ( 0 0$1 ) ;
5992: LD_INT 35
5994: PPUSH
5995: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 114 , 108 , 9 ] ) >= ( tmp - 1 ) ;
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_INT 92
6006: PUSH
6007: LD_INT 114
6009: PUSH
6010: LD_INT 108
6012: PUSH
6013: LD_INT 9
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PPUSH
6022: CALL_OW 72
6026: PUSH
6027: LD_VAR 0 2
6031: PUSH
6032: LD_INT 1
6034: MINUS
6035: GREATEREQUAL
6036: IFFALSE 5914
// end else
6038: GO 6164
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_VAR 0 2
6049: PPUSH
6050: LD_INT 24
6052: PUSH
6053: LD_INT 250
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PPUSH
6060: CALL_OW 72
6064: ST_TO_ADDR
// for i in tmp do
6065: LD_ADDR_VAR 0 1
6069: PUSH
6070: LD_VAR 0 2
6074: PUSH
6075: FOR_IN
6076: IFFALSE 6116
// if GetDistUnitXY ( i , 129 , 139 ) > 9 then
6078: LD_VAR 0 1
6082: PPUSH
6083: LD_INT 129
6085: PPUSH
6086: LD_INT 139
6088: PPUSH
6089: CALL_OW 297
6093: PUSH
6094: LD_INT 9
6096: GREATER
6097: IFFALSE 6114
// ComMoveXY ( i , 129 , 139 ) ;
6099: LD_VAR 0 1
6103: PPUSH
6104: LD_INT 129
6106: PPUSH
6107: LD_INT 139
6109: PPUSH
6110: CALL_OW 111
6114: GO 6075
6116: POP
6117: POP
// wait ( 0 0$1 ) ;
6118: LD_INT 35
6120: PPUSH
6121: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 129 , 139 , 9 ] ) >= ( tmp - 1 ) ;
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_INT 92
6132: PUSH
6133: LD_INT 129
6135: PUSH
6136: LD_INT 139
6138: PUSH
6139: LD_INT 9
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 72
6152: PUSH
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 1
6160: MINUS
6161: GREATEREQUAL
6162: IFFALSE 6040
// end ; repeat wait ( 0 0$1 ) ;
6164: LD_INT 35
6166: PPUSH
6167: CALL_OW 67
// for i in tmp do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_VAR 0 2
6180: PUSH
6181: FOR_IN
6182: IFFALSE 6264
// begin if GetLives ( i ) > 251 then
6184: LD_VAR 0 1
6188: PPUSH
6189: CALL_OW 256
6193: PUSH
6194: LD_INT 251
6196: GREATER
6197: IFFALSE 6235
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) else
6199: LD_VAR 0 1
6203: PPUSH
6204: LD_INT 81
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: PPUSH
6219: LD_VAR 0 1
6223: PPUSH
6224: CALL_OW 74
6228: PPUSH
6229: CALL_OW 115
6233: GO 6262
// if IsDead ( i ) then
6235: LD_VAR 0 1
6239: PPUSH
6240: CALL_OW 301
6244: IFFALSE 6262
// tmp := tmp diff i ;
6246: LD_ADDR_VAR 0 2
6250: PUSH
6251: LD_VAR 0 2
6255: PUSH
6256: LD_VAR 0 1
6260: DIFF
6261: ST_TO_ADDR
// end ;
6262: GO 6181
6264: POP
6265: POP
// until not tmp ;
6266: LD_VAR 0 2
6270: NOT
6271: IFFALSE 6164
// end ;
6273: PPOPN 3
6275: END
// every 30 30$00 trigger not americanDestroyed do
6276: LD_EXP 4
6280: NOT
6281: IFFALSE 6346
6283: GO 6285
6285: DISABLE
// begin wait ( [ 30 30$00 , 20 20$00 , 10 10$00 ] [ Difficulty ] ) ;
6286: LD_INT 63000
6288: PUSH
6289: LD_INT 42000
6291: PUSH
6292: LD_INT 21000
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PPUSH
6306: CALL_OW 67
// if americanDestroyed then
6310: LD_EXP 4
6314: IFFALSE 6318
// exit ;
6316: GO 6346
// MC_InsertProduceList ( 4 , [ [ us_morphling , engine_siberite , control_manual , us_siberium_rocket ] ] ) ;
6318: LD_INT 4
6320: PPUSH
6321: LD_INT 5
6323: PUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 8
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: PPUSH
6342: CALL 44299 0 2
// end ; end_of_file
6346: END
// export function PrepareArabian ; var i , un , tmp , side ; begin
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
6351: PPUSH
6352: PPUSH
6353: PPUSH
// side := 2 ;
6354: LD_ADDR_VAR 0 5
6358: PUSH
6359: LD_INT 2
6361: ST_TO_ADDR
// InitHc ;
6362: CALL_OW 19
// uc_side := side ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_VAR 0 5
6375: ST_TO_ADDR
// uc_nation := 2 ;
6376: LD_ADDR_OWVAR 21
6380: PUSH
6381: LD_INT 2
6383: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: LD_INT 22
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 21
6401: PUSH
6402: LD_INT 3
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 69
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6435
// SetBLevel ( i , 10 ) ;
6421: LD_VAR 0 2
6425: PPUSH
6426: LD_INT 10
6428: PPUSH
6429: CALL_OW 241
6433: GO 6418
6435: POP
6436: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: LD_INT 22
6444: PUSH
6445: LD_VAR 0 5
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 30
6456: PUSH
6457: LD_INT 32
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 58
6466: PUSH
6467: EMPTY
6468: LIST
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: PPUSH
6475: CALL_OW 69
6479: ST_TO_ADDR
// for i = 1 to 10 do
6480: LD_ADDR_VAR 0 2
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_INT 10
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6566
// begin uc_nation := nation_nature ;
6496: LD_ADDR_OWVAR 21
6500: PUSH
6501: LD_INT 0
6503: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
6504: LD_ADDR_OWVAR 28
6508: PUSH
6509: LD_INT 15
6511: ST_TO_ADDR
// hc_gallery :=  ;
6512: LD_ADDR_OWVAR 33
6516: PUSH
6517: LD_STRING 
6519: ST_TO_ADDR
// hc_name :=  ;
6520: LD_ADDR_OWVAR 26
6524: PUSH
6525: LD_STRING 
6527: ST_TO_ADDR
// un := CreateHuman ;
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: CALL_OW 44
6537: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_VAR 0 4
6547: PUSH
6548: LD_VAR 0 4
6552: PUSH
6553: LD_VAR 0 2
6557: MINUS
6558: ARRAY
6559: PPUSH
6560: CALL_OW 52
// end ;
6564: GO 6493
6566: POP
6567: POP
// PrepareBase ( ar_depot , arabianBaseArea ,  , [ 8 , 9 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 16 , 6 , 6 , 6 ] ) ;
6568: LD_INT 503
6570: PPUSH
6571: LD_INT 27
6573: PPUSH
6574: LD_STRING 
6576: PPUSH
6577: LD_INT 8
6579: PUSH
6580: LD_INT 9
6582: PUSH
6583: LD_INT 10
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: PUSH
6591: LD_OWVAR 67
6595: ARRAY
6596: PPUSH
6597: LD_INT 3000
6599: PUSH
6600: LD_INT 500
6602: PUSH
6603: LD_INT 150
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PPUSH
6611: LD_INT 16
6613: PUSH
6614: LD_INT 6
6616: PUSH
6617: LD_INT 6
6619: PUSH
6620: LD_INT 6
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL 58876 0 6
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) ) ;
6633: LD_ADDR_EXP 87
6637: PUSH
6638: LD_EXP 87
6642: PPUSH
6643: LD_INT 1
6645: PPUSH
6646: LD_INT 22
6648: PUSH
6649: LD_VAR 0 5
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 23
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 3
6670: PUSH
6671: LD_INT 21
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: PPUSH
6690: CALL_OW 69
6694: PPUSH
6695: CALL_OW 1
6699: ST_TO_ADDR
// end ;
6700: LD_VAR 0 1
6704: RET
// export Omar ; export function PrepareOmarAli ; begin
6705: LD_INT 0
6707: PPUSH
// uc_side := 5 ;
6708: LD_ADDR_OWVAR 20
6712: PUSH
6713: LD_INT 5
6715: ST_TO_ADDR
// uc_nation := 2 ;
6716: LD_ADDR_OWVAR 21
6720: PUSH
6721: LD_INT 2
6723: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
6724: LD_ADDR_EXP 53
6728: PUSH
6729: LD_STRING Omar
6731: PPUSH
6732: CALL_OW 25
6736: ST_TO_ADDR
// PlaceUnitXY ( Omar , 330 , 244 , false ) ;
6737: LD_EXP 53
6741: PPUSH
6742: LD_INT 330
6744: PPUSH
6745: LD_INT 244
6747: PPUSH
6748: LD_INT 0
6750: PPUSH
6751: CALL_OW 48
// ComMoveXY ( Omar , 252 , 220 ) ;
6755: LD_EXP 53
6759: PPUSH
6760: LD_INT 252
6762: PPUSH
6763: LD_INT 220
6765: PPUSH
6766: CALL_OW 111
// end ; end_of_file
6770: LD_VAR 0 1
6774: RET
// export Schulz , Kozlov ; export function PrepareLegion ; var i , side , un , tmp ; begin
6775: LD_INT 0
6777: PPUSH
6778: PPUSH
6779: PPUSH
6780: PPUSH
6781: PPUSH
// side := 8 ;
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_INT 8
6789: ST_TO_ADDR
// InitHc ;
6790: CALL_OW 19
// uc_side := side ;
6794: LD_ADDR_OWVAR 20
6798: PUSH
6799: LD_VAR 0 3
6803: ST_TO_ADDR
// uc_nation := 2 ;
6804: LD_ADDR_OWVAR 21
6808: PUSH
6809: LD_INT 2
6811: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6812: LD_ADDR_VAR 0 2
6816: PUSH
6817: LD_INT 22
6819: PUSH
6820: LD_VAR 0 3
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 21
6831: PUSH
6832: LD_INT 3
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: PUSH
6848: FOR_IN
6849: IFFALSE 6865
// SetBLevel ( i , 10 ) ;
6851: LD_VAR 0 2
6855: PPUSH
6856: LD_INT 10
6858: PPUSH
6859: CALL_OW 241
6863: GO 6848
6865: POP
6866: POP
// Schulz := NewCharacter ( Schulz ) ;
6867: LD_ADDR_EXP 54
6871: PUSH
6872: LD_STRING Schulz
6874: PPUSH
6875: CALL_OW 25
6879: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
6880: LD_ADDR_EXP 55
6884: PUSH
6885: LD_STRING Kozlov
6887: PPUSH
6888: LD_INT 0
6890: PPUSH
6891: LD_STRING 
6893: PPUSH
6894: CALL 50643 0 3
6898: ST_TO_ADDR
// PlaceHumanInUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6899: LD_EXP 55
6903: PPUSH
6904: LD_INT 22
6906: PUSH
6907: LD_INT 8
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 23
6916: PUSH
6917: LD_INT 3
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 8
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: PPUSH
6939: CALL_OW 69
6943: PUSH
6944: LD_INT 1
6946: ARRAY
6947: PPUSH
6948: CALL_OW 52
// SetSkill ( Kozlov , class_mechanic , 10 ) ;
6952: LD_EXP 55
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 10
6962: PPUSH
6963: CALL_OW 237
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6967: LD_ADDR_VAR 0 5
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_VAR 0 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 58
6996: PUSH
6997: EMPTY
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 69
7009: ST_TO_ADDR
// for i = 1 to 10 do
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: DOUBLE
7016: LD_INT 1
7018: DEC
7019: ST_TO_ADDR
7020: LD_INT 10
7022: PUSH
7023: FOR_TO
7024: IFFALSE 7096
// begin uc_nation := nation_nature ;
7026: LD_ADDR_OWVAR 21
7030: PUSH
7031: LD_INT 0
7033: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
7034: LD_ADDR_OWVAR 28
7038: PUSH
7039: LD_INT 15
7041: ST_TO_ADDR
// hc_gallery :=  ;
7042: LD_ADDR_OWVAR 33
7046: PUSH
7047: LD_STRING 
7049: ST_TO_ADDR
// hc_name :=  ;
7050: LD_ADDR_OWVAR 26
7054: PUSH
7055: LD_STRING 
7057: ST_TO_ADDR
// un := CreateHuman ;
7058: LD_ADDR_VAR 0 4
7062: PUSH
7063: CALL_OW 44
7067: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
7068: LD_VAR 0 4
7072: PPUSH
7073: LD_VAR 0 5
7077: PUSH
7078: LD_VAR 0 5
7082: PUSH
7083: LD_VAR 0 2
7087: MINUS
7088: ARRAY
7089: PPUSH
7090: CALL_OW 52
// end ;
7094: GO 7023
7096: POP
7097: POP
// PrepareBase ( ar_depot1 , legionBaseArea ,  , [ 8 , 9 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 16 , 6 , 6 , 8 ] ) ;
7098: LD_INT 324
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: LD_STRING 
7106: PPUSH
7107: LD_INT 8
7109: PUSH
7110: LD_INT 9
7112: PUSH
7113: LD_INT 10
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: PUSH
7121: LD_OWVAR 67
7125: ARRAY
7126: PPUSH
7127: LD_INT 3000
7129: PUSH
7130: LD_INT 500
7132: PUSH
7133: LD_INT 150
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: PPUSH
7141: LD_INT 16
7143: PUSH
7144: LD_INT 6
7146: PUSH
7147: LD_INT 6
7149: PUSH
7150: LD_INT 8
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL 58876 0 6
// mc_bases := Replace ( mc_bases , 3 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Schulz ) ;
7163: LD_ADDR_EXP 87
7167: PUSH
7168: LD_EXP 87
7172: PPUSH
7173: LD_INT 3
7175: PPUSH
7176: LD_INT 22
7178: PUSH
7179: LD_VAR 0 3
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 23
7190: PUSH
7191: LD_INT 2
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 3
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: PUSH
7225: LD_EXP 54
7229: DIFF
7230: PPUSH
7231: CALL_OW 1
7235: ST_TO_ADDR
// end ;
7236: LD_VAR 0 1
7240: RET
// export function BuildKozlovBomb ; begin
7241: LD_INT 0
7243: PPUSH
// if not IsOk ( kozlov_fac ) or not IsOk ( kozlov_lab ) then
7244: LD_INT 332
7246: PPUSH
7247: CALL_OW 302
7251: NOT
7252: PUSH
7253: LD_INT 336
7255: PPUSH
7256: CALL_OW 302
7260: NOT
7261: OR
7262: IFFALSE 7266
// exit ;
7264: GO 7363
// ComChangeProfession ( Kozlov , 4 ) ;
7266: LD_EXP 55
7270: PPUSH
7271: LD_INT 4
7273: PPUSH
7274: CALL_OW 123
// ComResearch ( kozlov_lab , tech_sibFiss ) ;
7278: LD_INT 336
7280: PPUSH
7281: LD_INT 25
7283: PPUSH
7284: CALL_OW 124
// repeat wait ( 0 0$1 ) ;
7288: LD_INT 35
7290: PPUSH
7291: CALL_OW 67
// until GetTech ( tech_sibFiss , 8 ) = state_researched ;
7295: LD_INT 25
7297: PPUSH
7298: LD_INT 8
7300: PPUSH
7301: CALL_OW 321
7305: PUSH
7306: LD_INT 2
7308: EQUAL
7309: IFFALSE 7288
// ComExitBuilding ( Kozlov ) ;
7311: LD_EXP 55
7315: PPUSH
7316: CALL_OW 122
// AddComEnterUnit ( Kozlov , kozlov_fac ) ;
7320: LD_EXP 55
7324: PPUSH
7325: LD_INT 332
7327: PPUSH
7328: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
7332: LD_EXP 55
7336: PPUSH
7337: LD_INT 3
7339: PPUSH
7340: CALL_OW 183
// ComConstruct ( kozlov_fac , ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ) ;
7344: LD_INT 332
7346: PPUSH
7347: LD_INT 23
7349: PPUSH
7350: LD_INT 3
7352: PPUSH
7353: LD_INT 1
7355: PPUSH
7356: LD_INT 48
7358: PPUSH
7359: CALL_OW 125
// end ;
7363: LD_VAR 0 1
7367: RET
// every 11 11$30 trigger not legionDestroyed and not MC_GetVehicles ( 3 , true ) do var i , tmp , target ;
7368: LD_EXP 3
7372: NOT
7373: PUSH
7374: LD_INT 3
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL 45717 0 2
7384: NOT
7385: AND
7386: IFFALSE 8226
7388: GO 7390
7390: DISABLE
7391: LD_INT 0
7393: PPUSH
7394: PPUSH
7395: PPUSH
// begin enable ;
7396: ENABLE
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
7397: LD_INT 22
7399: PUSH
7400: LD_INT 8
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 30
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: NOT
7437: IFFALSE 7441
// exit ;
7439: GO 8226
// if Prob ( 40 ) then
7441: LD_INT 40
7443: PPUSH
7444: CALL_OW 13
7448: IFFALSE 7575
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
7450: LD_INT 3
7452: PPUSH
7453: LD_INT 14
7455: PUSH
7456: LD_INT 1
7458: PUSH
7459: LD_INT 2
7461: PUSH
7462: LD_INT 28
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 14
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 28
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 14
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: LD_INT 2
7497: PUSH
7498: LD_INT 28
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 14
7509: PUSH
7510: LD_INT 1
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 28
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 14
7527: PUSH
7528: LD_INT 1
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: LD_INT 28
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 14
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: LD_INT 26
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: PPUSH
7569: CALL 44299 0 2
// end else
7573: GO 7766
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
7575: LD_INT 3
7577: PPUSH
7578: LD_INT 14
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: LD_INT 27
7589: PUSH
7590: LD_INT 26
7592: PUSH
7593: LD_INT 26
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: LD_OWVAR 67
7605: ARRAY
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 14
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: LD_INT 27
7624: PUSH
7625: LD_INT 26
7627: PUSH
7628: LD_INT 26
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 14
7650: PUSH
7651: LD_INT 1
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: LD_INT 26
7659: PUSH
7660: LD_INT 26
7662: PUSH
7663: LD_INT 29
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: LD_OWVAR 67
7675: ARRAY
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 13
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: LD_INT 26
7694: PUSH
7695: LD_INT 29
7697: PUSH
7698: LD_INT 29
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: PUSH
7706: LD_OWVAR 67
7710: ARRAY
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 13
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 29
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 14
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 26
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL 44299 0 2
// end ; repeat wait ( 0 0$1 ) ;
7766: LD_INT 35
7768: PPUSH
7769: CALL_OW 67
// until MC_GetVehicles ( 3 , true ) >= 6 ;
7773: LD_INT 3
7775: PPUSH
7776: LD_INT 1
7778: PPUSH
7779: CALL 45717 0 2
7783: PUSH
7784: LD_INT 6
7786: GREATEREQUAL
7787: IFFALSE 7766
// wait ( 0 0$30 ) ;
7789: LD_INT 1050
7791: PPUSH
7792: CALL_OW 67
// tmp := MC_GetVehicles ( 3 , true ) ;
7796: LD_ADDR_VAR 0 2
7800: PUSH
7801: LD_INT 3
7803: PPUSH
7804: LD_INT 1
7806: PPUSH
7807: CALL 45717 0 2
7811: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 3 , mc_vehicles [ 3 ] diff tmp ) ;
7812: LD_ADDR_EXP 106
7816: PUSH
7817: LD_EXP 106
7821: PPUSH
7822: LD_INT 3
7824: PPUSH
7825: LD_EXP 106
7829: PUSH
7830: LD_INT 3
7832: ARRAY
7833: PUSH
7834: LD_VAR 0 2
7838: DIFF
7839: PPUSH
7840: CALL_OW 1
7844: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
7845: LD_ADDR_VAR 0 3
7849: PUSH
7850: LD_INT 0
7852: PPUSH
7853: LD_INT 2
7855: PPUSH
7856: CALL_OW 12
7860: ST_TO_ADDR
// if target then
7861: LD_VAR 0 3
7865: IFFALSE 7993
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
7867: LD_ADDR_VAR 0 2
7871: PUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: LD_INT 24
7879: PUSH
7880: LD_INT 250
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PPUSH
7887: CALL_OW 72
7891: ST_TO_ADDR
// for i in tmp do
7892: LD_ADDR_VAR 0 1
7896: PUSH
7897: LD_VAR 0 2
7901: PUSH
7902: FOR_IN
7903: IFFALSE 7943
// if GetDistUnitXY ( i , 89 , 71 ) > 9 then
7905: LD_VAR 0 1
7909: PPUSH
7910: LD_INT 89
7912: PPUSH
7913: LD_INT 71
7915: PPUSH
7916: CALL_OW 297
7920: PUSH
7921: LD_INT 9
7923: GREATER
7924: IFFALSE 7941
// ComMoveXY ( i , 89 , 71 ) ;
7926: LD_VAR 0 1
7930: PPUSH
7931: LD_INT 89
7933: PPUSH
7934: LD_INT 71
7936: PPUSH
7937: CALL_OW 111
7941: GO 7902
7943: POP
7944: POP
// wait ( 0 0$1 ) ;
7945: LD_INT 35
7947: PPUSH
7948: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 89 , 71 , 9 ] ) >= ( tmp - 1 ) ;
7952: LD_VAR 0 2
7956: PPUSH
7957: LD_INT 92
7959: PUSH
7960: LD_INT 89
7962: PUSH
7963: LD_INT 71
7965: PUSH
7966: LD_INT 9
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: PPUSH
7975: CALL_OW 72
7979: PUSH
7980: LD_VAR 0 2
7984: PUSH
7985: LD_INT 1
7987: MINUS
7988: GREATEREQUAL
7989: IFFALSE 7867
// end else
7991: GO 8117
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
7993: LD_ADDR_VAR 0 2
7997: PUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 24
8005: PUSH
8006: LD_INT 250
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 72
8017: ST_TO_ADDR
// for i in tmp do
8018: LD_ADDR_VAR 0 1
8022: PUSH
8023: LD_VAR 0 2
8027: PUSH
8028: FOR_IN
8029: IFFALSE 8069
// if GetDistUnitXY ( i , 147 , 4 ) > 9 then
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 147
8038: PPUSH
8039: LD_INT 4
8041: PPUSH
8042: CALL_OW 297
8046: PUSH
8047: LD_INT 9
8049: GREATER
8050: IFFALSE 8067
// ComMoveXY ( i , 147 , 4 ) ;
8052: LD_VAR 0 1
8056: PPUSH
8057: LD_INT 147
8059: PPUSH
8060: LD_INT 4
8062: PPUSH
8063: CALL_OW 111
8067: GO 8028
8069: POP
8070: POP
// wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 147 , 4 , 9 ] ) >= ( tmp - 1 ) ;
8078: LD_VAR 0 2
8082: PPUSH
8083: LD_INT 92
8085: PUSH
8086: LD_INT 147
8088: PUSH
8089: LD_INT 4
8091: PUSH
8092: LD_INT 9
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 72
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 1
8113: MINUS
8114: GREATEREQUAL
8115: IFFALSE 7993
// end ; repeat wait ( 0 0$1 ) ;
8117: LD_INT 35
8119: PPUSH
8120: CALL_OW 67
// for i in tmp do
8124: LD_ADDR_VAR 0 1
8128: PUSH
8129: LD_VAR 0 2
8133: PUSH
8134: FOR_IN
8135: IFFALSE 8217
// begin if GetLives ( i ) > 251 then
8137: LD_VAR 0 1
8141: PPUSH
8142: CALL_OW 256
8146: PUSH
8147: LD_INT 251
8149: GREATER
8150: IFFALSE 8188
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
8152: LD_VAR 0 1
8156: PPUSH
8157: LD_INT 81
8159: PUSH
8160: LD_INT 8
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: PPUSH
8172: LD_VAR 0 1
8176: PPUSH
8177: CALL_OW 74
8181: PPUSH
8182: CALL_OW 115
8186: GO 8215
// if IsDead ( i ) then
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 301
8197: IFFALSE 8215
// tmp := tmp diff i ;
8199: LD_ADDR_VAR 0 2
8203: PUSH
8204: LD_VAR 0 2
8208: PUSH
8209: LD_VAR 0 1
8213: DIFF
8214: ST_TO_ADDR
// end ;
8215: GO 8134
8217: POP
8218: POP
// until not tmp ;
8219: LD_VAR 0 2
8223: NOT
8224: IFFALSE 8117
// end ;
8226: PPOPN 3
8228: END
// every 0 0$1 trigger IsOk ( Kozlov ) and not legionDestroyed do
8229: LD_EXP 55
8233: PPUSH
8234: CALL_OW 302
8238: PUSH
8239: LD_EXP 3
8243: NOT
8244: AND
8245: IFFALSE 8254
8247: GO 8249
8249: DISABLE
// BuildKozlovBomb ;
8250: CALL 7241 0 0
8254: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) do
8255: LD_INT 22
8257: PUSH
8258: LD_INT 8
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 34
8267: PUSH
8268: LD_INT 48
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 69
8283: IFFALSE 8331
8285: GO 8287
8287: DISABLE
// begin ComAttackPlace ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] , 173 , 96 ) ;
8288: LD_INT 22
8290: PUSH
8291: LD_INT 8
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 34
8300: PUSH
8301: LD_INT 48
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PUSH
8317: LD_INT 1
8319: ARRAY
8320: PPUSH
8321: LD_INT 173
8323: PPUSH
8324: LD_INT 96
8326: PPUSH
8327: CALL_OW 116
// end ; end_of_file
8331: END
// export Platonov , Yakotich , Gleb , Bierezov ; export behemoths , behemothBuilders ; export function PrepareRussian ; var i , j , base , tmp , side , xy , b , teleport ; begin
8332: LD_INT 0
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
8338: PPUSH
8339: PPUSH
8340: PPUSH
8341: PPUSH
8342: PPUSH
// side := 3 ;
8343: LD_ADDR_VAR 0 6
8347: PUSH
8348: LD_INT 3
8350: ST_TO_ADDR
// InitHc ;
8351: CALL_OW 19
// uc_side := side ;
8355: LD_ADDR_OWVAR 20
8359: PUSH
8360: LD_VAR 0 6
8364: ST_TO_ADDR
// uc_nation := 3 ;
8365: LD_ADDR_OWVAR 21
8369: PUSH
8370: LD_INT 3
8372: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_VAR 0 6
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PUSH
8390: LD_INT 21
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 69
8408: PUSH
8409: FOR_IN
8410: IFFALSE 8426
// SetBLevel ( i , 10 ) ;
8412: LD_VAR 0 2
8416: PPUSH
8417: LD_INT 10
8419: PPUSH
8420: CALL_OW 241
8424: GO 8409
8426: POP
8427: POP
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
8428: LD_ADDR_VAR 0 9
8432: PUSH
8433: LD_INT 22
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 30
8447: PUSH
8448: LD_INT 34
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PPUSH
8459: CALL_OW 69
8463: ST_TO_ADDR
// if teleport then
8464: LD_VAR 0 9
8468: IFFALSE 8489
// TeleportExit ( teleport [ 1 ] , 123 , 122 ) ;
8470: LD_VAR 0 9
8474: PUSH
8475: LD_INT 1
8477: ARRAY
8478: PPUSH
8479: LD_INT 123
8481: PPUSH
8482: LD_INT 122
8484: PPUSH
8485: CALL_OW 243
// hc_importance := 0 ;
8489: LD_ADDR_OWVAR 32
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// Platonov := NewCharacter ( Platonov ) ;
8497: LD_ADDR_EXP 56
8501: PUSH
8502: LD_STRING Platonov
8504: PPUSH
8505: CALL_OW 25
8509: ST_TO_ADDR
// Yakotich := NewCharacter ( Yakotich ) ;
8510: LD_ADDR_EXP 57
8514: PUSH
8515: LD_STRING Yakotich
8517: PPUSH
8518: CALL_OW 25
8522: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
8523: LD_ADDR_EXP 58
8527: PUSH
8528: LD_STRING Gleb
8530: PPUSH
8531: CALL_OW 25
8535: ST_TO_ADDR
// if TestCharacters ( 03_Cornel ) then
8536: LD_STRING 03_Cornel
8538: PPUSH
8539: CALL_OW 28
8543: IFFALSE 8591
// begin Bierezov := NewCharacter ( Mikhail ) ;
8545: LD_ADDR_EXP 59
8549: PUSH
8550: LD_STRING Mikhail
8552: PPUSH
8553: CALL_OW 25
8557: ST_TO_ADDR
// PlaceUnitXYR ( Bierezov , 197 , 111 , 9 , false ) ;
8558: LD_EXP 59
8562: PPUSH
8563: LD_INT 197
8565: PPUSH
8566: LD_INT 111
8568: PPUSH
8569: LD_INT 9
8571: PPUSH
8572: LD_INT 0
8574: PPUSH
8575: CALL_OW 50
// SetClass ( Bierezov , 3 ) ;
8579: LD_EXP 59
8583: PPUSH
8584: LD_INT 3
8586: PPUSH
8587: CALL_OW 336
// end ; PlaceHumanInUnit ( Platonov , ru_depot ) ;
8591: LD_EXP 56
8595: PPUSH
8596: LD_INT 126
8598: PPUSH
8599: CALL_OW 52
// PlaceUnitXYR ( Yakotich , 197 , 111 , 9 , false ) ;
8603: LD_EXP 57
8607: PPUSH
8608: LD_INT 197
8610: PPUSH
8611: LD_INT 111
8613: PPUSH
8614: LD_INT 9
8616: PPUSH
8617: LD_INT 0
8619: PPUSH
8620: CALL_OW 50
// PlaceUnitXYR ( Gleb , 197 , 111 , 9 , false ) ;
8624: LD_EXP 58
8628: PPUSH
8629: LD_INT 197
8631: PPUSH
8632: LD_INT 111
8634: PPUSH
8635: LD_INT 9
8637: PPUSH
8638: LD_INT 0
8640: PPUSH
8641: CALL_OW 50
// tmp := PrepareBase ( ru_depot , russianBaseArea , zhukov , [ 9 , 10 , 10 ] [ Difficulty ] , [ 9000 , 1000 , 300 ] , [ 21 , 8 , 13 , 8 ] ) ;
8645: LD_ADDR_VAR 0 5
8649: PUSH
8650: LD_INT 126
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: LD_STRING zhukov
8658: PPUSH
8659: LD_INT 9
8661: PUSH
8662: LD_INT 10
8664: PUSH
8665: LD_INT 10
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: LD_OWVAR 67
8677: ARRAY
8678: PPUSH
8679: LD_INT 9000
8681: PUSH
8682: LD_INT 1000
8684: PUSH
8685: LD_INT 300
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: PPUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 8
8698: PUSH
8699: LD_INT 13
8701: PUSH
8702: LD_INT 8
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL 58876 0 6
8715: ST_TO_ADDR
// base := GetBase ( ru_depot2 ) ;
8716: LD_ADDR_VAR 0 4
8720: PUSH
8721: LD_INT 267
8723: PPUSH
8724: CALL_OW 274
8728: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 5000 ) ;
8729: LD_VAR 0 4
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 5000
8739: PPUSH
8740: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
8744: LD_VAR 0 4
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: LD_INT 200
8754: PPUSH
8755: CALL_OW 277
// SetResourceType ( base , mat_siberit , 200 ) ;
8759: LD_VAR 0 4
8763: PPUSH
8764: LD_INT 3
8766: PPUSH
8767: LD_INT 200
8769: PPUSH
8770: CALL_OW 277
// mc_bases := Replace ( mc_bases , 2 , tmp union FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Platonov ) ;
8774: LD_ADDR_EXP 87
8778: PUSH
8779: LD_EXP 87
8783: PPUSH
8784: LD_INT 2
8786: PPUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_INT 22
8794: PUSH
8795: LD_VAR 0 6
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 3
8806: PUSH
8807: LD_INT 21
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PPUSH
8825: CALL_OW 69
8829: UNION
8830: PUSH
8831: LD_EXP 56
8835: DIFF
8836: PPUSH
8837: CALL_OW 1
8841: ST_TO_ADDR
// behemoths := [ ] ;
8842: LD_ADDR_EXP 60
8846: PUSH
8847: EMPTY
8848: ST_TO_ADDR
// behemothBuilders := [ ] ;
8849: LD_ADDR_EXP 61
8853: PUSH
8854: EMPTY
8855: ST_TO_ADDR
// j := 3 ;
8856: LD_ADDR_VAR 0 3
8860: PUSH
8861: LD_INT 3
8863: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: FOR_IN
8899: IFFALSE 8949
// begin behemothBuilders := Join ( behemothBuilders , i ) ;
8901: LD_ADDR_EXP 61
8905: PUSH
8906: LD_EXP 61
8910: PPUSH
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL 86513 0 2
8920: ST_TO_ADDR
// j := j - 1 ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_VAR 0 3
8930: PUSH
8931: LD_INT 1
8933: MINUS
8934: ST_TO_ADDR
// if j = 0 then
8935: LD_VAR 0 3
8939: PUSH
8940: LD_INT 0
8942: EQUAL
8943: IFFALSE 8947
// break ;
8945: GO 8949
// end ;
8947: GO 8898
8949: POP
8950: POP
// end ;
8951: LD_VAR 0 1
8955: RET
// export function BuildBehemoths ; var i , j , xy , tmp ; begin
8956: LD_INT 0
8958: PPUSH
8959: PPUSH
8960: PPUSH
8961: PPUSH
8962: PPUSH
// xy := [ [ 209 , 149 ] , [ 219 , 154 ] , [ 223 , 149 ] , [ 232 , 155 ] ] ;
8963: LD_ADDR_VAR 0 4
8967: PUSH
8968: LD_INT 209
8970: PUSH
8971: LD_INT 149
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 219
8980: PUSH
8981: LD_INT 154
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 223
8990: PUSH
8991: LD_INT 149
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 232
9000: PUSH
9001: LD_INT 155
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: ST_TO_ADDR
// if not behemothBuilders then
9014: LD_EXP 61
9018: NOT
9019: IFFALSE 9023
// exit ;
9021: GO 9127
// j := 1 ;
9023: LD_ADDR_VAR 0 3
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// for i in behemothBuilders do
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: LD_EXP 61
9040: PUSH
9041: FOR_IN
9042: IFFALSE 9125
// begin if IsInUnit ( i ) then
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 310
9053: IFFALSE 9064
// ComExitBuilding ( i ) ;
9055: LD_VAR 0 2
9059: PPUSH
9060: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , xy [ j ] [ 1 ] , xy [ j ] [ 2 ] , 0 ) ;
9064: LD_VAR 0 2
9068: PPUSH
9069: LD_INT 37
9071: PPUSH
9072: LD_VAR 0 4
9076: PUSH
9077: LD_VAR 0 3
9081: ARRAY
9082: PUSH
9083: LD_INT 1
9085: ARRAY
9086: PPUSH
9087: LD_VAR 0 4
9091: PUSH
9092: LD_VAR 0 3
9096: ARRAY
9097: PUSH
9098: LD_INT 2
9100: ARRAY
9101: PPUSH
9102: LD_INT 0
9104: PPUSH
9105: CALL_OW 230
// j := j + 1 ;
9109: LD_ADDR_VAR 0 3
9113: PUSH
9114: LD_VAR 0 3
9118: PUSH
9119: LD_INT 1
9121: PLUS
9122: ST_TO_ADDR
// end ;
9123: GO 9041
9125: POP
9126: POP
// end ;
9127: LD_VAR 0 1
9131: RET
// every 0 0$3 trigger GetBehemoths ( 3 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) do var i , tmp ;
9132: LD_INT 3
9134: PPUSH
9135: CALL 86561 0 1
9139: PUSH
9140: LD_INT 22
9142: PUSH
9143: LD_INT 3
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 30
9152: PUSH
9153: LD_INT 37
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: NOT
9169: AND
9170: IFFALSE 9356
9172: GO 9174
9174: DISABLE
9175: LD_INT 0
9177: PPUSH
9178: PPUSH
// begin enable ;
9179: ENABLE
// tmp := GetBehemoths ( 3 ) ;
9180: LD_ADDR_VAR 0 2
9184: PUSH
9185: LD_INT 3
9187: PPUSH
9188: CALL 86561 0 1
9192: ST_TO_ADDR
// for i in tmp do
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: LD_VAR 0 2
9202: PUSH
9203: FOR_IN
9204: IFFALSE 9354
// begin if IsInArea ( i , powellBase ) and not GetTag ( i ) = 2 then
9206: LD_VAR 0 1
9210: PPUSH
9211: LD_INT 7
9213: PPUSH
9214: CALL_OW 308
9218: PUSH
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 110
9228: PUSH
9229: LD_INT 2
9231: EQUAL
9232: NOT
9233: AND
9234: IFFALSE 9248
// SetTag ( i , 2 ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_INT 2
9243: PPUSH
9244: CALL_OW 109
// if not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , i , 12 ] ] ) and not GetTag ( i ) = 2 then
9248: LD_INT 81
9250: PUSH
9251: LD_INT 3
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 91
9260: PUSH
9261: LD_VAR 0 1
9265: PUSH
9266: LD_INT 12
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: NOT
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 110
9293: PUSH
9294: LD_INT 2
9296: EQUAL
9297: NOT
9298: AND
9299: IFFALSE 9318
// ComAgressiveMove ( i , 64 , 93 ) else
9301: LD_VAR 0 1
9305: PPUSH
9306: LD_INT 64
9308: PPUSH
9309: LD_INT 93
9311: PPUSH
9312: CALL_OW 114
9316: GO 9352
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
9318: LD_VAR 0 1
9322: PPUSH
9323: LD_INT 81
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 69
9337: PPUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 74
9347: PPUSH
9348: CALL_OW 115
// end ;
9352: GO 9203
9354: POP
9355: POP
// end ;
9356: PPOPN 2
9358: END
// every 11 11$30 trigger not russianDestroyed and not MC_GetVehicles ( 2 , true ) do var i , tmp , target , teleport ;
9359: LD_EXP 2
9363: NOT
9364: PUSH
9365: LD_INT 2
9367: PPUSH
9368: LD_INT 1
9370: PPUSH
9371: CALL 45717 0 2
9375: NOT
9376: AND
9377: IFFALSE 10297
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
// begin enable ;
9388: ENABLE
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
9389: LD_INT 22
9391: PUSH
9392: LD_INT 3
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 69
9417: NOT
9418: IFFALSE 9422
// exit ;
9420: GO 10297
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
9422: LD_ADDR_VAR 0 4
9426: PUSH
9427: LD_INT 22
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 30
9439: PUSH
9440: LD_INT 34
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PPUSH
9451: CALL_OW 69
9455: ST_TO_ADDR
// if Prob ( 40 ) then
9456: LD_INT 40
9458: PPUSH
9459: CALL_OW 13
9463: IFFALSE 9590
// begin MC_InsertProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
9465: LD_INT 2
9467: PPUSH
9468: LD_INT 22
9470: PUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 3
9476: PUSH
9477: LD_INT 49
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 22
9488: PUSH
9489: LD_INT 3
9491: PUSH
9492: LD_INT 3
9494: PUSH
9495: LD_INT 49
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 22
9506: PUSH
9507: LD_INT 3
9509: PUSH
9510: LD_INT 3
9512: PUSH
9513: LD_INT 49
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 24
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 3
9530: PUSH
9531: LD_INT 46
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 24
9542: PUSH
9543: LD_INT 3
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 46
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 24
9560: PUSH
9561: LD_INT 3
9563: PUSH
9564: LD_INT 3
9566: PUSH
9567: LD_INT 46
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL 44299 0 2
// end else
9588: GO 9713
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
9590: LD_INT 2
9592: PPUSH
9593: LD_INT 24
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: LD_INT 3
9601: PUSH
9602: LD_INT 47
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 24
9613: PUSH
9614: LD_INT 3
9616: PUSH
9617: LD_INT 3
9619: PUSH
9620: LD_INT 47
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 3
9634: PUSH
9635: LD_INT 3
9637: PUSH
9638: LD_INT 47
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 3
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 46
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 24
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: LD_INT 46
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 3
9691: PUSH
9692: LD_INT 46
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL 44299 0 2
// end ; if Difficulty > 1 then
9713: LD_OWVAR 67
9717: PUSH
9718: LD_INT 1
9720: GREATER
9721: IFFALSE 9751
// MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
9723: LD_INT 2
9725: PPUSH
9726: LD_INT 24
9728: PUSH
9729: LD_INT 3
9731: PUSH
9732: LD_INT 3
9734: PUSH
9735: LD_INT 47
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: PPUSH
9747: CALL 44299 0 2
// repeat wait ( 0 0$1 ) ;
9751: LD_INT 35
9753: PPUSH
9754: CALL_OW 67
// until MC_GetVehicles ( 2 , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] ;
9758: LD_INT 2
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL 45717 0 2
9768: PUSH
9769: LD_INT 6
9771: PUSH
9772: LD_INT 7
9774: PUSH
9775: LD_INT 7
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: PUSH
9783: LD_OWVAR 67
9787: ARRAY
9788: GREATEREQUAL
9789: IFFALSE 9751
// wait ( 0 0$30 ) ;
9791: LD_INT 1050
9793: PPUSH
9794: CALL_OW 67
// tmp := MC_GetVehicles ( 2 , true ) ;
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: LD_INT 2
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL 45717 0 2
9813: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 2 , mc_vehicles [ 2 ] diff tmp ) ;
9814: LD_ADDR_EXP 106
9818: PUSH
9819: LD_EXP 106
9823: PPUSH
9824: LD_INT 2
9826: PPUSH
9827: LD_EXP 106
9831: PUSH
9832: LD_INT 2
9834: ARRAY
9835: PUSH
9836: LD_VAR 0 2
9840: DIFF
9841: PPUSH
9842: CALL_OW 1
9846: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
9847: LD_ADDR_VAR 0 3
9851: PUSH
9852: LD_INT 0
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 12
9862: ST_TO_ADDR
// if target then
9863: LD_VAR 0 3
9867: IFFALSE 9995
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
9869: LD_ADDR_VAR 0 2
9873: PUSH
9874: LD_VAR 0 2
9878: PPUSH
9879: LD_INT 24
9881: PUSH
9882: LD_INT 250
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PPUSH
9889: CALL_OW 72
9893: ST_TO_ADDR
// for i in tmp do
9894: LD_ADDR_VAR 0 1
9898: PUSH
9899: LD_VAR 0 2
9903: PUSH
9904: FOR_IN
9905: IFFALSE 9945
// if GetDistUnitXY ( i , 139 , 89 ) > 9 then
9907: LD_VAR 0 1
9911: PPUSH
9912: LD_INT 139
9914: PPUSH
9915: LD_INT 89
9917: PPUSH
9918: CALL_OW 297
9922: PUSH
9923: LD_INT 9
9925: GREATER
9926: IFFALSE 9943
// ComMoveXY ( i , 139 , 89 ) ;
9928: LD_VAR 0 1
9932: PPUSH
9933: LD_INT 139
9935: PPUSH
9936: LD_INT 89
9938: PPUSH
9939: CALL_OW 111
9943: GO 9904
9945: POP
9946: POP
// wait ( 0 0$1 ) ;
9947: LD_INT 35
9949: PPUSH
9950: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 139 , 89 , 9 ] ) >= ( tmp - 1 ) ;
9954: LD_VAR 0 2
9958: PPUSH
9959: LD_INT 92
9961: PUSH
9962: LD_INT 139
9964: PUSH
9965: LD_INT 89
9967: PUSH
9968: LD_INT 9
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PPUSH
9977: CALL_OW 72
9981: PUSH
9982: LD_VAR 0 2
9986: PUSH
9987: LD_INT 1
9989: MINUS
9990: GREATEREQUAL
9991: IFFALSE 9869
// end else
9993: GO 10137
// begin ComEnterUnit ( tmp , teleport [ 1 ] ) ;
9995: LD_VAR 0 2
9999: PPUSH
10000: LD_VAR 0 4
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PPUSH
10009: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_INT 24
10025: PUSH
10026: LD_INT 250
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 72
10037: ST_TO_ADDR
// for i in tmp do
10038: LD_ADDR_VAR 0 1
10042: PUSH
10043: LD_VAR 0 2
10047: PUSH
10048: FOR_IN
10049: IFFALSE 10089
// if GetDistUnitXY ( i , 124 , 139 ) > 9 then
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_INT 124
10058: PPUSH
10059: LD_INT 139
10061: PPUSH
10062: CALL_OW 297
10066: PUSH
10067: LD_INT 9
10069: GREATER
10070: IFFALSE 10087
// ComMoveXY ( i , 124 , 139 ) ;
10072: LD_VAR 0 1
10076: PPUSH
10077: LD_INT 124
10079: PPUSH
10080: LD_INT 139
10082: PPUSH
10083: CALL_OW 111
10087: GO 10048
10089: POP
10090: POP
// wait ( 0 0$1 ) ;
10091: LD_INT 35
10093: PPUSH
10094: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 124 , 139 , 9 ] ) >= ( tmp - 1 ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: LD_INT 92
10105: PUSH
10106: LD_INT 124
10108: PUSH
10109: LD_INT 139
10111: PUSH
10112: LD_INT 9
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 72
10125: PUSH
10126: LD_VAR 0 2
10130: PUSH
10131: LD_INT 1
10133: MINUS
10134: GREATEREQUAL
10135: IFFALSE 10013
// end ; repeat wait ( 0 0$1 ) ;
10137: LD_INT 35
10139: PPUSH
10140: CALL_OW 67
// for i in tmp do
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_IN
10155: IFFALSE 10288
// begin if GetLives ( i ) > 251 then
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 256
10166: PUSH
10167: LD_INT 251
10169: GREATER
10170: IFFALSE 10259
// begin if GetWeapon ( i ) = ru_time_lapser then
10172: LD_VAR 0 1
10176: PPUSH
10177: CALL_OW 264
10181: PUSH
10182: LD_INT 49
10184: EQUAL
10185: IFFALSE 10223
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
10187: LD_VAR 0 1
10191: PPUSH
10192: LD_INT 81
10194: PUSH
10195: LD_INT 3
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PPUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: CALL_OW 74
10216: PPUSH
10217: CALL_OW 112
10221: GO 10257
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 81
10230: PUSH
10231: LD_INT 3
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PPUSH
10238: CALL_OW 69
10242: PPUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 74
10252: PPUSH
10253: CALL_OW 115
// end else
10257: GO 10286
// if IsDead ( i ) then
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 301
10268: IFFALSE 10286
// tmp := tmp diff i ;
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: LD_VAR 0 2
10279: PUSH
10280: LD_VAR 0 1
10284: DIFF
10285: ST_TO_ADDR
// end ;
10286: GO 10154
10288: POP
10289: POP
// until not tmp ;
10290: LD_VAR 0 2
10294: NOT
10295: IFFALSE 10137
// end ;
10297: PPOPN 4
10299: END
// every 30 30$00 trigger not russianDestroyed do
10300: LD_EXP 2
10304: NOT
10305: IFFALSE 10370
10307: GO 10309
10309: DISABLE
// begin wait ( [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] ) ;
10310: LD_INT 105000
10312: PUSH
10313: LD_INT 84000
10315: PUSH
10316: LD_INT 63000
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: LD_OWVAR 67
10328: ARRAY
10329: PPUSH
10330: CALL_OW 67
// if russianDestroyed then
10334: LD_EXP 2
10338: IFFALSE 10342
// exit ;
10340: GO 10370
// MC_InsertProduceList ( 2 , [ [ ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ] ] ) ;
10342: LD_INT 2
10344: PPUSH
10345: LD_INT 23
10347: PUSH
10348: LD_INT 3
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: LD_INT 48
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: PPUSH
10366: CALL 44299 0 2
// end ; end_of_file
10370: END
// export function CustomEvent ( event ) ; begin
10371: LD_INT 0
10373: PPUSH
// end ;
10374: LD_VAR 0 2
10378: RET
// on SibDepositContaminated ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
10379: LD_VAR 0 2
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: LD_INT 15
10391: PPUSH
10392: CALL_OW 309
10396: IFFALSE 10405
// YouLost ( MothContaminate ) ;
10398: LD_STRING MothContaminate
10400: PPUSH
10401: CALL_OW 104
// end ;
10405: PPOPN 3
10407: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
10408: LD_VAR 0 2
10412: PPUSH
10413: LD_VAR 0 3
10417: PPUSH
10418: LD_INT 15
10420: PPUSH
10421: CALL_OW 309
10425: IFFALSE 10441
// begin wait ( 0 0$6 ) ;
10427: LD_INT 210
10429: PPUSH
10430: CALL_OW 67
// YouLost ( MothContaminateBomb ) ;
10434: LD_STRING MothContaminateBomb
10436: PPUSH
10437: CALL_OW 104
// end ; end ;
10441: PPOPN 3
10443: END
// on UnitDestroyed ( un ) do begin if un = JMM then
10444: LD_VAR 0 1
10448: PUSH
10449: LD_EXP 17
10453: EQUAL
10454: IFFALSE 10465
// begin YouLost ( JMM ) ;
10456: LD_STRING JMM
10458: PPUSH
10459: CALL_OW 104
// exit ;
10463: GO 10564
// end ; if un = Powell then
10465: LD_VAR 0 1
10469: PUSH
10470: LD_EXP 52
10474: EQUAL
10475: IFFALSE 10485
// americanDestroyed := true ;
10477: LD_ADDR_EXP 4
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// if un = Platonov then
10485: LD_VAR 0 1
10489: PUSH
10490: LD_EXP 56
10494: EQUAL
10495: IFFALSE 10505
// russianDestroyed := true ;
10497: LD_ADDR_EXP 2
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) then
10505: LD_VAR 0 1
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_INT 7
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 21
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 69
10538: IN
10539: IFFALSE 10555
// vehicleLostCounter := vehicleLostCounter + 1 ;
10541: LD_ADDR_EXP 15
10545: PUSH
10546: LD_EXP 15
10550: PUSH
10551: LD_INT 1
10553: PLUS
10554: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL 47691 0 1
// end ;
10564: PPOPN 1
10566: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_VAR 0 2
10576: PPUSH
10577: CALL 50025 0 2
// end ;
10581: PPOPN 2
10583: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10584: LD_VAR 0 1
10588: PPUSH
10589: CALL 49093 0 1
// end ;
10593: PPOPN 1
10595: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_workshop ] , [ f_nation , 3 ] ] ) then
10596: LD_VAR 0 1
10600: PUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 8
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 23
10623: PUSH
10624: LD_INT 3
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 69
10640: IN
10641: IFFALSE 10668
// begin ComUpgrade ( building ) ;
10643: LD_VAR 0 1
10647: PPUSH
10648: CALL_OW 146
// ComComplete ( Kozlov , building ) ;
10652: LD_EXP 55
10656: PPUSH
10657: LD_VAR 0 1
10661: PPUSH
10662: CALL 58440 0 2
// exit ;
10666: GO 10677
// end ; MCE_BuildingComplete ( building ) ;
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL 49334 0 1
// end ;
10677: PPOPN 1
10679: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_VAR 0 2
10689: PPUSH
10690: CALL 47387 0 2
// end ;
10694: PPOPN 2
10696: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_VAR 0 4
10716: PPUSH
10717: LD_VAR 0 5
10721: PPUSH
10722: CALL 47007 0 5
// end ;
10726: PPOPN 5
10728: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10729: LD_VAR 0 1
10733: PPUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL 46603 0 2
// end ;
10743: PPOPN 2
10745: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10746: LD_VAR 0 1
10750: PPUSH
10751: LD_VAR 0 2
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL 46441 0 4
// end ;
10770: PPOPN 4
10772: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: LD_VAR 0 2
10782: PPUSH
10783: LD_VAR 0 3
10787: PPUSH
10788: CALL 46216 0 3
// end ;
10792: PPOPN 3
10794: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10795: LD_VAR 0 1
10799: PPUSH
10800: LD_VAR 0 2
10804: PPUSH
10805: CALL 46101 0 2
// end ;
10809: PPOPN 2
10811: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10812: LD_VAR 0 1
10816: PPUSH
10817: LD_VAR 0 2
10821: PPUSH
10822: CALL 50286 0 2
// end ;
10826: PPOPN 2
10828: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10829: LD_VAR 0 1
10833: PPUSH
10834: LD_VAR 0 2
10838: PPUSH
10839: LD_VAR 0 3
10843: PPUSH
10844: LD_VAR 0 4
10848: PPUSH
10849: CALL 50502 0 4
// end ;
10853: PPOPN 4
10855: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10856: LD_VAR 0 1
10860: PPUSH
10861: LD_VAR 0 2
10865: PPUSH
10866: CALL 45910 0 2
// end ;
10870: PPOPN 2
10872: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10873: LD_VAR 0 1
10877: PPUSH
10878: CALL 98015 0 1
// end ; end_of_file
10882: PPOPN 1
10884: END
// export function Action ; begin
10885: LD_INT 0
10887: PPUSH
// InGameOn ;
10888: CALL_OW 8
// CenterNowOnXY ( 206 , 11 ) ;
10892: LD_INT 206
10894: PPUSH
10895: LD_INT 11
10897: PPUSH
10898: CALL_OW 86
// wait ( 0 0$1 ) ;
10902: LD_INT 35
10904: PPUSH
10905: CALL_OW 67
// Say ( JMM , DStart-JMM-JMM-1 ) ;
10909: LD_EXP 17
10913: PPUSH
10914: LD_STRING DStart-JMM-JMM-1
10916: PPUSH
10917: CALL_OW 88
// Say ( Burlak , DStart-JMM-Bur-1 ) ;
10921: LD_EXP 49
10925: PPUSH
10926: LD_STRING DStart-JMM-Bur-1
10928: PPUSH
10929: CALL_OW 88
// Say ( JMM , DStart-JMM-JMM-2 ) ;
10933: LD_EXP 17
10937: PPUSH
10938: LD_STRING DStart-JMM-JMM-2
10940: PPUSH
10941: CALL_OW 88
// Say ( Burlak , DStart-JMM-Bur-2 ) ;
10945: LD_EXP 49
10949: PPUSH
10950: LD_STRING DStart-JMM-Bur-2
10952: PPUSH
10953: CALL_OW 88
// InGameOff ;
10957: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
10961: LD_STRING MStart
10963: PPUSH
10964: CALL_OW 337
// SaveForQuickRestart ;
10968: CALL_OW 22
// end ;
10972: LD_VAR 0 1
10976: RET
// every 0 0$2 trigger SeeXY ( 7 , 255 , 219 ) do var speaker ;
10977: LD_INT 7
10979: PPUSH
10980: LD_INT 255
10982: PPUSH
10983: LD_INT 219
10985: PPUSH
10986: CALL_OW 293
10990: IFFALSE 11599
10992: GO 10994
10994: DISABLE
10995: LD_INT 0
10997: PPUSH
// begin wait ( 0 0$3 ) ;
10998: LD_INT 105
11000: PPUSH
11001: CALL_OW 67
// alienSpotted := true ;
11005: LD_ADDR_EXP 10
11009: PUSH
11010: LD_INT 1
11012: ST_TO_ADDR
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Titov , Dolgov , Petrosyan , Kuzmov , Kovalyuk , Scholtze ] ;
11013: LD_ADDR_VAR 0 1
11017: PUSH
11018: LD_INT 22
11020: PUSH
11021: LD_INT 7
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 23
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 21
11040: PUSH
11041: LD_INT 1
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 26
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: PUSH
11069: LD_EXP 49
11073: PUSH
11074: LD_EXP 37
11078: PUSH
11079: LD_EXP 39
11083: PUSH
11084: LD_EXP 40
11088: PUSH
11089: LD_EXP 47
11093: PUSH
11094: LD_EXP 46
11098: PUSH
11099: LD_EXP 41
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: DIFF
11113: ST_TO_ADDR
// DialogueOn ;
11114: CALL_OW 6
// PlaceSeeing ( 255 , 219 , 7 , - 20 ) ;
11118: LD_INT 255
11120: PPUSH
11121: LD_INT 219
11123: PPUSH
11124: LD_INT 7
11126: PPUSH
11127: LD_INT 20
11129: NEG
11130: PPUSH
11131: CALL_OW 330
// CenterNowOnXY ( 255 , 219 ) ;
11135: LD_INT 255
11137: PPUSH
11138: LD_INT 219
11140: PPUSH
11141: CALL_OW 86
// if speaker then
11145: LD_VAR 0 1
11149: IFFALSE 11167
// Say ( speaker [ 1 ] , DAlienBase-RSol1-1 ) ;
11151: LD_VAR 0 1
11155: PUSH
11156: LD_INT 1
11158: ARRAY
11159: PPUSH
11160: LD_STRING DAlienBase-RSol1-1
11162: PPUSH
11163: CALL_OW 88
// Say ( JMM , DAlienBase-JMM-1 ) ;
11167: LD_EXP 17
11171: PPUSH
11172: LD_STRING DAlienBase-JMM-1
11174: PPUSH
11175: CALL_OW 88
// if IsOk ( Burlak ) then
11179: LD_EXP 49
11183: PPUSH
11184: CALL_OW 302
11188: IFFALSE 11209
// begin dwait ( 0 0$1 ) ;
11190: LD_INT 35
11192: PPUSH
11193: CALL_OW 68
// Say ( Burlak , DAlienBase-Bur-1 ) ;
11197: LD_EXP 49
11201: PPUSH
11202: LD_STRING DAlienBase-Bur-1
11204: PPUSH
11205: CALL_OW 88
// end ; if IsOk ( Roth ) then
11209: LD_EXP 18
11213: PPUSH
11214: CALL_OW 302
11218: IFFALSE 11232
// Say ( Roth , DAlienBase-Roth-1 ) ;
11220: LD_EXP 18
11224: PPUSH
11225: LD_STRING DAlienBase-Roth-1
11227: PPUSH
11228: CALL_OW 88
// if IsOk ( Gossudarov ) then
11232: LD_EXP 35
11236: PPUSH
11237: CALL_OW 302
11241: IFFALSE 11257
// Say ( Gossudarov , DAlienBase-Gos-1 ) else
11243: LD_EXP 35
11247: PPUSH
11248: LD_STRING DAlienBase-Gos-1
11250: PPUSH
11251: CALL_OW 88
11255: GO 11374
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11257: LD_ADDR_VAR 0 1
11261: PUSH
11262: LD_INT 22
11264: PUSH
11265: LD_INT 7
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 25
11274: PUSH
11275: LD_INT 4
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 21
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 26
11294: PUSH
11295: LD_INT 1
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: PUSH
11313: LD_EXP 18
11317: PUSH
11318: LD_EXP 17
11322: PUSH
11323: LD_EXP 49
11327: PUSH
11328: LD_EXP 37
11332: PUSH
11333: LD_EXP 47
11337: PUSH
11338: LD_EXP 46
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: DIFF
11351: ST_TO_ADDR
// if speaker then
11352: LD_VAR 0 1
11356: IFFALSE 11374
// Say ( speaker [ 1 ] , DAlienBase-Sci1-1 ) ;
11358: LD_VAR 0 1
11362: PUSH
11363: LD_INT 1
11365: ARRAY
11366: PPUSH
11367: LD_STRING DAlienBase-Sci1-1
11369: PPUSH
11370: CALL_OW 88
// end ; RemoveSeeing ( 255 , 219 , 7 ) ;
11374: LD_INT 255
11376: PPUSH
11377: LD_INT 219
11379: PPUSH
11380: LD_INT 7
11382: PPUSH
11383: CALL_OW 331
// DialogueOff ;
11387: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11391: LD_INT 35
11393: PPUSH
11394: CALL_OW 67
// until IsSelected ( alien ) ;
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 306
11405: IFFALSE 11391
// if not artifactIResearched or not artifactIIResearched then
11407: LD_EXP 12
11411: NOT
11412: PUSH
11413: LD_EXP 13
11417: NOT
11418: OR
11419: IFFALSE 11599
// begin if IsOk ( Roth ) then
11421: LD_EXP 18
11425: PPUSH
11426: CALL_OW 302
11430: IFFALSE 11446
// Say ( Roth , DAlieBaseNotReady-Roth-1 ) else
11432: LD_EXP 18
11436: PPUSH
11437: LD_STRING DAlieBaseNotReady-Roth-1
11439: PPUSH
11440: CALL_OW 88
11444: GO 11599
// if IsOk ( Gossudarov ) then
11446: LD_EXP 35
11450: PPUSH
11451: CALL_OW 302
11455: IFFALSE 11471
// Say ( Gossudarov , DAlieBaseNotReady-Gos-1 ) else
11457: LD_EXP 35
11461: PPUSH
11462: LD_STRING DAlieBaseNotReady-Gos-1
11464: PPUSH
11465: CALL_OW 88
11469: GO 11599
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11471: LD_ADDR_VAR 0 1
11475: PUSH
11476: LD_INT 22
11478: PUSH
11479: LD_INT 7
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 23
11488: PUSH
11489: LD_INT 3
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 25
11498: PUSH
11499: LD_INT 4
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 21
11508: PUSH
11509: LD_INT 1
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 26
11518: PUSH
11519: LD_INT 1
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: PUSH
11538: LD_EXP 18
11542: PUSH
11543: LD_EXP 17
11547: PUSH
11548: LD_EXP 49
11552: PUSH
11553: LD_EXP 37
11557: PUSH
11558: LD_EXP 47
11562: PUSH
11563: LD_EXP 46
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: DIFF
11576: ST_TO_ADDR
// if speaker then
11577: LD_VAR 0 1
11581: IFFALSE 11599
// Say ( speaker [ 1 ] , DAlieBaseNotReady-RSci1-1 ) ;
11583: LD_VAR 0 1
11587: PUSH
11588: LD_INT 1
11590: ARRAY
11591: PPUSH
11592: LD_STRING DAlieBaseNotReady-RSci1-1
11594: PPUSH
11595: CALL_OW 88
// end ; end ; end ;
11599: PPOPN 1
11601: END
// every 0 0$1 trigger GetTech ( tech_Artifact , 7 ) = state_researched do var speaker ;
11602: LD_INT 24
11604: PPUSH
11605: LD_INT 7
11607: PPUSH
11608: CALL_OW 321
11612: PUSH
11613: LD_INT 2
11615: EQUAL
11616: IFFALSE 12307
11618: GO 11620
11620: DISABLE
11621: LD_INT 0
11623: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_INT 22
11631: PUSH
11632: LD_INT 7
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 23
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 25
11651: PUSH
11652: LD_INT 4
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 21
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 26
11671: PUSH
11672: LD_INT 1
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 69
11690: PUSH
11691: LD_EXP 18
11695: PUSH
11696: LD_EXP 17
11700: PUSH
11701: LD_EXP 49
11705: PUSH
11706: LD_EXP 37
11710: PUSH
11711: LD_EXP 47
11715: PUSH
11716: LD_EXP 46
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: DIFF
11729: ST_TO_ADDR
// if not speaker then
11730: LD_VAR 0 1
11734: NOT
11735: IFFALSE 11739
// exit ;
11737: GO 12307
// DialogueOn ;
11739: CALL_OW 6
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-1 ) ;
11743: LD_VAR 0 1
11747: PUSH
11748: LD_INT 1
11750: ARRAY
11751: PPUSH
11752: LD_STRING DArtefTechnology-RSci1-1
11754: PPUSH
11755: CALL_OW 88
// if IsOk ( Burlak ) then
11759: LD_EXP 49
11763: PPUSH
11764: CALL_OW 302
11768: IFFALSE 11782
// Say ( Burlak , DArtefTechnology-Bur-1 ) ;
11770: LD_EXP 49
11774: PPUSH
11775: LD_STRING DArtefTechnology-Bur-1
11777: PPUSH
11778: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-2 ) ;
11782: LD_VAR 0 1
11786: PUSH
11787: LD_INT 1
11789: ARRAY
11790: PPUSH
11791: LD_STRING DArtefTechnology-RSci1-2
11793: PPUSH
11794: CALL_OW 88
// if Denis then
11798: LD_EXP 23
11802: IFFALSE 11819
// speaker := [ Denis ] else
11804: LD_ADDR_VAR 0 1
11808: PUSH
11809: LD_EXP 23
11813: PUSH
11814: EMPTY
11815: LIST
11816: ST_TO_ADDR
11817: GO 11925
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11819: LD_ADDR_VAR 0 1
11823: PUSH
11824: LD_INT 22
11826: PUSH
11827: LD_INT 7
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 23
11836: PUSH
11837: LD_INT 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 25
11846: PUSH
11847: LD_INT 4
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 21
11856: PUSH
11857: LD_INT 1
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 26
11866: PUSH
11867: LD_INT 1
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: PPUSH
11881: CALL_OW 69
11885: PUSH
11886: LD_EXP 18
11890: PUSH
11891: LD_EXP 17
11895: PUSH
11896: LD_EXP 49
11900: PUSH
11901: LD_EXP 37
11905: PUSH
11906: LD_EXP 47
11910: PUSH
11911: LD_EXP 46
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: DIFF
11924: ST_TO_ADDR
// if speaker then
11925: LD_VAR 0 1
11929: IFFALSE 11947
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-2 ) ;
11931: LD_VAR 0 1
11935: PUSH
11936: LD_INT 1
11938: ARRAY
11939: PPUSH
11940: LD_STRING DArtefTechnology-Sci1-2
11942: PPUSH
11943: CALL_OW 88
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: LD_INT 22
11954: PUSH
11955: LD_INT 7
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 3
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 21
11984: PUSH
11985: LD_INT 1
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 26
11994: PUSH
11995: LD_INT 1
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PPUSH
12009: CALL_OW 69
12013: PUSH
12014: LD_EXP 18
12018: PUSH
12019: LD_EXP 17
12023: PUSH
12024: LD_EXP 49
12028: PUSH
12029: LD_EXP 37
12033: PUSH
12034: LD_EXP 47
12038: PUSH
12039: LD_EXP 46
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: DIFF
12052: ST_TO_ADDR
// if speaker and ( artifactArCaptured or arabianDestroyed ) then
12053: LD_VAR 0 1
12057: PUSH
12058: LD_EXP 9
12062: PUSH
12063: LD_EXP 5
12067: OR
12068: AND
12069: IFFALSE 12303
// begin if arabianDestroyed and IsOk ( Burlak ) then
12071: LD_EXP 5
12075: PUSH
12076: LD_EXP 49
12080: PPUSH
12081: CALL_OW 302
12085: AND
12086: IFFALSE 12102
// Say ( Burlak , DArtefTechnology-Bur-2 ) else
12088: LD_EXP 49
12092: PPUSH
12093: LD_STRING DArtefTechnology-Bur-2
12095: PPUSH
12096: CALL_OW 88
12100: GO 12114
// Say ( JMM , DArtefTechnology-JMM-2 ) ;
12102: LD_EXP 17
12106: PPUSH
12107: LD_STRING DArtefTechnology-JMM-2
12109: PPUSH
12110: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-3 ) ;
12114: LD_VAR 0 1
12118: PUSH
12119: LD_INT 1
12121: ARRAY
12122: PPUSH
12123: LD_STRING DArtefTechnology-RSci1-3
12125: PPUSH
12126: CALL_OW 88
// if Denis then
12130: LD_EXP 23
12134: IFFALSE 12151
// speaker := [ Denis ] else
12136: LD_ADDR_VAR 0 1
12140: PUSH
12141: LD_EXP 23
12145: PUSH
12146: EMPTY
12147: LIST
12148: ST_TO_ADDR
12149: GO 12257
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12151: LD_ADDR_VAR 0 1
12155: PUSH
12156: LD_INT 22
12158: PUSH
12159: LD_INT 7
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 23
12168: PUSH
12169: LD_INT 1
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 4
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 21
12188: PUSH
12189: LD_INT 1
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 26
12198: PUSH
12199: LD_INT 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 69
12217: PUSH
12218: LD_EXP 18
12222: PUSH
12223: LD_EXP 17
12227: PUSH
12228: LD_EXP 49
12232: PUSH
12233: LD_EXP 37
12237: PUSH
12238: LD_EXP 47
12242: PUSH
12243: LD_EXP 46
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: DIFF
12256: ST_TO_ADDR
// if speaker then
12257: LD_VAR 0 1
12261: IFFALSE 12303
// if alienSpotted then
12263: LD_EXP 10
12267: IFFALSE 12287
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-3 ) else
12269: LD_VAR 0 1
12273: PUSH
12274: LD_INT 1
12276: ARRAY
12277: PPUSH
12278: LD_STRING DArtefTechnology-Sci1-3
12280: PPUSH
12281: CALL_OW 88
12285: GO 12303
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-3a ) ;
12287: LD_VAR 0 1
12291: PUSH
12292: LD_INT 1
12294: ARRAY
12295: PPUSH
12296: LD_STRING DArtefTechnology-Sci1-3a
12298: PPUSH
12299: CALL_OW 88
// end ; DialogueOff ;
12303: CALL_OW 7
// end ;
12307: PPOPN 1
12309: END
// every 0 0$1 trigger artifactIResearched do var speaker ;
12310: LD_EXP 12
12314: IFFALSE 12509
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
// begin if Denis then
12322: LD_EXP 23
12326: IFFALSE 12343
// speaker := [ Denis ] else
12328: LD_ADDR_VAR 0 1
12332: PUSH
12333: LD_EXP 23
12337: PUSH
12338: EMPTY
12339: LIST
12340: ST_TO_ADDR
12341: GO 12449
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12343: LD_ADDR_VAR 0 1
12347: PUSH
12348: LD_INT 22
12350: PUSH
12351: LD_INT 7
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 23
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 25
12370: PUSH
12371: LD_INT 4
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: LD_INT 21
12380: PUSH
12381: LD_INT 1
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: LD_INT 26
12390: PUSH
12391: LD_INT 1
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: PPUSH
12405: CALL_OW 69
12409: PUSH
12410: LD_EXP 18
12414: PUSH
12415: LD_EXP 17
12419: PUSH
12420: LD_EXP 49
12424: PUSH
12425: LD_EXP 37
12429: PUSH
12430: LD_EXP 47
12434: PUSH
12435: LD_EXP 46
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: DIFF
12448: ST_TO_ADDR
// if not speaker then
12449: LD_VAR 0 1
12453: NOT
12454: IFFALSE 12458
// exit ;
12456: GO 12509
// Say ( speaker [ 1 ] , DArtefTechnologyAm-Sci1-1 ) ;
12458: LD_VAR 0 1
12462: PUSH
12463: LD_INT 1
12465: ARRAY
12466: PPUSH
12467: LD_STRING DArtefTechnologyAm-Sci1-1
12469: PPUSH
12470: CALL_OW 88
// if IsOk ( Burlak ) then
12474: LD_EXP 49
12478: PPUSH
12479: CALL_OW 302
12483: IFFALSE 12497
// Say ( Burlak , DArtefTechnologyAm-Bur-1 ) ;
12485: LD_EXP 49
12489: PPUSH
12490: LD_STRING DArtefTechnologyAm-Bur-1
12492: PPUSH
12493: CALL_OW 88
// Say ( JMM , DArtefTechnologyAm-JMM-1 ) ;
12497: LD_EXP 17
12501: PPUSH
12502: LD_STRING DArtefTechnologyAm-JMM-1
12504: PPUSH
12505: CALL_OW 88
// end ;
12509: PPOPN 1
12511: END
// every 0 0$1 trigger artifactIIResearched do var speaker ;
12512: LD_EXP 13
12516: IFFALSE 12706
12518: GO 12520
12520: DISABLE
12521: LD_INT 0
12523: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12524: LD_ADDR_VAR 0 1
12528: PUSH
12529: LD_INT 22
12531: PUSH
12532: LD_INT 7
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 23
12541: PUSH
12542: LD_INT 3
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 25
12551: PUSH
12552: LD_INT 4
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 1
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 26
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 69
12590: PUSH
12591: LD_EXP 18
12595: PUSH
12596: LD_EXP 17
12600: PUSH
12601: LD_EXP 49
12605: PUSH
12606: LD_EXP 37
12610: PUSH
12611: LD_EXP 47
12615: PUSH
12616: LD_EXP 46
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: DIFF
12629: ST_TO_ADDR
// if not speaker then
12630: LD_VAR 0 1
12634: NOT
12635: IFFALSE 12639
// exit ;
12637: GO 12706
// Say ( speaker [ 1 ] , DArtefTechnologyRu-RSci1-1 ) ;
12639: LD_VAR 0 1
12643: PUSH
12644: LD_INT 1
12646: ARRAY
12647: PPUSH
12648: LD_STRING DArtefTechnologyRu-RSci1-1
12650: PPUSH
12651: CALL_OW 88
// if IsOk ( Burlak ) then
12655: LD_EXP 49
12659: PPUSH
12660: CALL_OW 302
12664: IFFALSE 12678
// Say ( Burlak , DArtefTechnologyRu-Bur-1 ) ;
12666: LD_EXP 49
12670: PPUSH
12671: LD_STRING DArtefTechnologyRu-Bur-1
12673: PPUSH
12674: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyRu-RSci1-2 ) ;
12678: LD_VAR 0 1
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PPUSH
12687: LD_STRING DArtefTechnologyRu-RSci1-2
12689: PPUSH
12690: CALL_OW 88
// Say ( JMM , DArtefTechnologyRu-JMM-1 ) ;
12694: LD_EXP 17
12698: PPUSH
12699: LD_STRING DArtefTechnologyRu-JMM-1
12701: PPUSH
12702: CALL_OW 88
// end ;
12706: PPOPN 1
12708: END
// every 0 0$1 trigger GetTech ( tech_Artifact , 7 ) = state_researched and GetSide ( alien ) = 7 do var speaker ;
12709: LD_INT 24
12711: PPUSH
12712: LD_INT 7
12714: PPUSH
12715: CALL_OW 321
12719: PUSH
12720: LD_INT 2
12722: EQUAL
12723: PUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 255
12731: PUSH
12732: LD_INT 7
12734: EQUAL
12735: AND
12736: IFFALSE 12896
12738: GO 12740
12740: DISABLE
12741: LD_INT 0
12743: PPUSH
// begin if Denis then
12744: LD_EXP 23
12748: IFFALSE 12765
// speaker := [ Denis ] else
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_EXP 23
12759: PUSH
12760: EMPTY
12761: LIST
12762: ST_TO_ADDR
12763: GO 12871
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12765: LD_ADDR_VAR 0 1
12769: PUSH
12770: LD_INT 22
12772: PUSH
12773: LD_INT 7
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 23
12782: PUSH
12783: LD_INT 1
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 25
12792: PUSH
12793: LD_INT 4
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 21
12802: PUSH
12803: LD_INT 1
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 26
12812: PUSH
12813: LD_INT 1
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: PPUSH
12827: CALL_OW 69
12831: PUSH
12832: LD_EXP 18
12836: PUSH
12837: LD_EXP 17
12841: PUSH
12842: LD_EXP 49
12846: PUSH
12847: LD_EXP 37
12851: PUSH
12852: LD_EXP 47
12856: PUSH
12857: LD_EXP 46
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: DIFF
12870: ST_TO_ADDR
// if not speaker then
12871: LD_VAR 0 1
12875: NOT
12876: IFFALSE 12880
// exit ;
12878: GO 12896
// Say ( speaker [ 1 ] , DArtefTechnologyArStart-Sci1-1 ) ;
12880: LD_VAR 0 1
12884: PUSH
12885: LD_INT 1
12887: ARRAY
12888: PPUSH
12889: LD_STRING DArtefTechnologyArStart-Sci1-1
12891: PPUSH
12892: CALL_OW 88
// end ;
12896: PPOPN 1
12898: END
// every 0 0$1 trigger artifactIIIResearched do var speaker ;
12899: LD_EXP 14
12903: IFFALSE 13184
12905: GO 12907
12907: DISABLE
12908: LD_INT 0
12910: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12911: LD_ADDR_VAR 0 1
12915: PUSH
12916: LD_INT 22
12918: PUSH
12919: LD_INT 7
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 23
12928: PUSH
12929: LD_INT 3
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 25
12938: PUSH
12939: LD_INT 4
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 21
12948: PUSH
12949: LD_INT 1
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 26
12958: PUSH
12959: LD_INT 1
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: PUSH
12978: LD_EXP 18
12982: PUSH
12983: LD_EXP 17
12987: PUSH
12988: LD_EXP 49
12992: PUSH
12993: LD_EXP 37
12997: PUSH
12998: LD_EXP 47
13002: PUSH
13003: LD_EXP 46
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: DIFF
13016: ST_TO_ADDR
// if not speaker then
13017: LD_VAR 0 1
13021: NOT
13022: IFFALSE 13026
// exit ;
13024: GO 13184
// DialogueOn ;
13026: CALL_OW 6
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-1 ) ;
13030: LD_VAR 0 1
13034: PUSH
13035: LD_INT 1
13037: ARRAY
13038: PPUSH
13039: LD_STRING DArtefTechnologyAr-RSci1-1
13041: PPUSH
13042: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-1 ) ;
13046: LD_EXP 17
13050: PPUSH
13051: LD_STRING DArtefTechnologyAr-JMM-1
13053: PPUSH
13054: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-2 ) ;
13058: LD_VAR 0 1
13062: PUSH
13063: LD_INT 1
13065: ARRAY
13066: PPUSH
13067: LD_STRING DArtefTechnologyAr-RSci1-2
13069: PPUSH
13070: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-2 ) ;
13074: LD_EXP 17
13078: PPUSH
13079: LD_STRING DArtefTechnologyAr-JMM-2
13081: PPUSH
13082: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-3 ) ;
13086: LD_VAR 0 1
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PPUSH
13095: LD_STRING DArtefTechnologyAr-RSci1-3
13097: PPUSH
13098: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-3 ) ;
13102: LD_EXP 17
13106: PPUSH
13107: LD_STRING DArtefTechnologyAr-JMM-3
13109: PPUSH
13110: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-4 ) ;
13114: LD_VAR 0 1
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: LD_STRING DArtefTechnologyAr-RSci1-4
13125: PPUSH
13126: CALL_OW 88
// if IsOk ( Burlak ) then
13130: LD_EXP 49
13134: PPUSH
13135: CALL_OW 302
13139: IFFALSE 13153
// Say ( Burlak , DArtefTechnologyAr-Bur-4 ) ;
13141: LD_EXP 49
13145: PPUSH
13146: LD_STRING DArtefTechnologyAr-Bur-4
13148: PPUSH
13149: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-4 ) ;
13153: LD_EXP 17
13157: PPUSH
13158: LD_STRING DArtefTechnologyAr-JMM-4
13160: PPUSH
13161: CALL_OW 88
// DialogueOff ;
13165: CALL_OW 7
// wait ( 0 0$45 ) ;
13169: LD_INT 1575
13171: PPUSH
13172: CALL_OW 67
// spawnOmar := true ;
13176: LD_ADDR_EXP 11
13180: PUSH
13181: LD_INT 1
13183: ST_TO_ADDR
// end ;
13184: PPOPN 1
13186: END
// every 0 0$1 trigger spawnOmar do
13187: LD_EXP 11
13191: IFFALSE 13571
13193: GO 13195
13195: DISABLE
// begin PrepareOmarAli ;
13196: CALL 6705 0 0
// if not HasTask ( Omar ) then
13200: LD_EXP 53
13204: PPUSH
13205: CALL_OW 314
13209: NOT
13210: IFFALSE 13227
// ComMoveXY ( Omar , 252 , 220 ) ;
13212: LD_EXP 53
13216: PPUSH
13217: LD_INT 252
13219: PPUSH
13220: LD_INT 220
13222: PPUSH
13223: CALL_OW 111
// if not Omar then
13227: LD_EXP 53
13231: NOT
13232: IFFALSE 13236
// exit ;
13234: GO 13571
// repeat wait ( 0 0$1 ) ;
13236: LD_INT 35
13238: PPUSH
13239: CALL_OW 67
// if not HasTask ( Omar ) and GetDistUnitXY ( Omar , 252 , 220 ) > 6 then
13243: LD_EXP 53
13247: PPUSH
13248: CALL_OW 314
13252: NOT
13253: PUSH
13254: LD_EXP 53
13258: PPUSH
13259: LD_INT 252
13261: PPUSH
13262: LD_INT 220
13264: PPUSH
13265: CALL_OW 297
13269: PUSH
13270: LD_INT 6
13272: GREATER
13273: AND
13274: IFFALSE 13291
// ComMoveXY ( Omar , 252 , 220 ) ;
13276: LD_EXP 53
13280: PPUSH
13281: LD_INT 252
13283: PPUSH
13284: LD_INT 220
13286: PPUSH
13287: CALL_OW 111
// until See ( 7 , Omar ) ;
13291: LD_INT 7
13293: PPUSH
13294: LD_EXP 53
13298: PPUSH
13299: CALL_OW 292
13303: IFFALSE 13236
// CenterNowOnUnits ( Omar ) ;
13305: LD_EXP 53
13309: PPUSH
13310: CALL_OW 87
// DialogueOn ;
13314: CALL_OW 6
// Say ( Omar , DOmar-Omar-1 ) ;
13318: LD_EXP 53
13322: PPUSH
13323: LD_STRING DOmar-Omar-1
13325: PPUSH
13326: CALL_OW 88
// Say ( JMM , DOmar-JMM-1 ) ;
13330: LD_EXP 17
13334: PPUSH
13335: LD_STRING DOmar-JMM-1
13337: PPUSH
13338: CALL_OW 88
// Say ( Omar , DOmar-Omar-2 ) ;
13342: LD_EXP 53
13346: PPUSH
13347: LD_STRING DOmar-Omar-2
13349: PPUSH
13350: CALL_OW 88
// Say ( JMM , DOmar-JMM-2 ) ;
13354: LD_EXP 17
13358: PPUSH
13359: LD_STRING DOmar-JMM-2
13361: PPUSH
13362: CALL_OW 88
// Say ( Omar , DOmar-Omar-3 ) ;
13366: LD_EXP 53
13370: PPUSH
13371: LD_STRING DOmar-Omar-3
13373: PPUSH
13374: CALL_OW 88
// if IsOk ( Burlak ) then
13378: LD_EXP 49
13382: PPUSH
13383: CALL_OW 302
13387: IFFALSE 13403
// Say ( Burlak , DOmar-Bur-3 ) else
13389: LD_EXP 49
13393: PPUSH
13394: LD_STRING DOmar-Bur-3
13396: PPUSH
13397: CALL_OW 88
13401: GO 13415
// Say ( JMM , DOmar-JMM-3 ) ;
13403: LD_EXP 17
13407: PPUSH
13408: LD_STRING DOmar-JMM-3
13410: PPUSH
13411: CALL_OW 88
// Say ( Omar , DOmar-Omar-4 ) ;
13415: LD_EXP 53
13419: PPUSH
13420: LD_STRING DOmar-Omar-4
13422: PPUSH
13423: CALL_OW 88
// case Query ( QAccept ) of 1 :
13427: LD_STRING QAccept
13429: PPUSH
13430: CALL_OW 97
13434: PUSH
13435: LD_INT 1
13437: DOUBLE
13438: EQUAL
13439: IFTRUE 13443
13441: GO 13479
13443: POP
// begin Say ( JMM , DQrAccept#1-JMM-1 ) ;
13444: LD_EXP 17
13448: PPUSH
13449: LD_STRING DQrAccept#1-JMM-1
13451: PPUSH
13452: CALL_OW 88
// SetSide ( Omar , 7 ) ;
13456: LD_EXP 53
13460: PPUSH
13461: LD_INT 7
13463: PPUSH
13464: CALL_OW 235
// ComStop ( Omar ) ;
13468: LD_EXP 53
13472: PPUSH
13473: CALL_OW 141
// end ; 2 :
13477: GO 13528
13479: LD_INT 2
13481: DOUBLE
13482: EQUAL
13483: IFTRUE 13487
13485: GO 13527
13487: POP
// begin if IsOk ( Burlak ) then
13488: LD_EXP 49
13492: PPUSH
13493: CALL_OW 302
13497: IFFALSE 13513
// Say ( Burlak , DQrAccept#2-Bur-1 ) else
13499: LD_EXP 49
13503: PPUSH
13504: LD_STRING DQrAccept#2-Bur-1
13506: PPUSH
13507: CALL_OW 88
13511: GO 13525
// Say ( JMM , DQrAccept#2-JMM-1 ) ;
13513: LD_EXP 17
13517: PPUSH
13518: LD_STRING DQrAccept#2-JMM-1
13520: PPUSH
13521: CALL_OW 88
// end ; end ;
13525: GO 13528
13527: POP
// DialogueOff ;
13528: CALL_OW 7
// if GetSide ( Omar ) = 7 then
13532: LD_EXP 53
13536: PPUSH
13537: CALL_OW 255
13541: PUSH
13542: LD_INT 7
13544: EQUAL
13545: IFFALSE 13556
// begin SetAchievement ( ACH_OMAR ) ;
13547: LD_STRING ACH_OMAR
13549: PPUSH
13550: CALL_OW 543
// exit ;
13554: GO 13571
// end ; ComMoveXY ( Omar , 202 , 115 ) ;
13556: LD_EXP 53
13560: PPUSH
13561: LD_INT 202
13563: PPUSH
13564: LD_INT 115
13566: PPUSH
13567: CALL_OW 111
// end ;
13571: END
// every 0 0$1 trigger GetDistUnitXY ( Omar , 200 , 98 ) < 40 and russianDestroyed do
13572: LD_EXP 53
13576: PPUSH
13577: LD_INT 200
13579: PPUSH
13580: LD_INT 98
13582: PPUSH
13583: CALL_OW 297
13587: PUSH
13588: LD_INT 40
13590: LESS
13591: PUSH
13592: LD_EXP 2
13596: AND
13597: IFFALSE 13815
13599: GO 13601
13601: DISABLE
// begin SetSide ( Omar , 5 ) ;
13602: LD_EXP 53
13606: PPUSH
13607: LD_INT 5
13609: PPUSH
13610: CALL_OW 235
// if IsInUnit ( Omar ) then
13614: LD_EXP 53
13618: PPUSH
13619: CALL_OW 310
13623: IFFALSE 13634
// ComExitVehicle ( Omar ) ;
13625: LD_EXP 53
13629: PPUSH
13630: CALL_OW 121
// if IsInUnit ( Omar ) then
13634: LD_EXP 53
13638: PPUSH
13639: CALL_OW 310
13643: IFFALSE 13654
// ComExitBuilding ( Omar ) ;
13645: LD_EXP 53
13649: PPUSH
13650: CALL_OW 122
// wait ( 0 0$1 ) ;
13654: LD_INT 35
13656: PPUSH
13657: CALL_OW 67
// ComMoveXY ( Omar , 203 , 120 ) ;
13661: LD_EXP 53
13665: PPUSH
13666: LD_INT 203
13668: PPUSH
13669: LD_INT 120
13671: PPUSH
13672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13676: LD_INT 35
13678: PPUSH
13679: CALL_OW 67
// until IsSelected ( Omar ) or GetDistUnitXY ( Omar , 203 , 120 ) < 6 ;
13683: LD_EXP 53
13687: PPUSH
13688: CALL_OW 306
13692: PUSH
13693: LD_EXP 53
13697: PPUSH
13698: LD_INT 203
13700: PPUSH
13701: LD_INT 120
13703: PPUSH
13704: CALL_OW 297
13708: PUSH
13709: LD_INT 6
13711: LESS
13712: OR
13713: IFFALSE 13676
// CenterNowOnUnits ( Omar ) ;
13715: LD_EXP 53
13719: PPUSH
13720: CALL_OW 87
// DialogueOn ;
13724: CALL_OW 6
// Say ( JMM , DOmarContam-JMM-1 ) ;
13728: LD_EXP 17
13732: PPUSH
13733: LD_STRING DOmarContam-JMM-1
13735: PPUSH
13736: CALL_OW 88
// Say ( Omar , DOmarContam-Omar-1 ) ;
13740: LD_EXP 53
13744: PPUSH
13745: LD_STRING DOmarContam-Omar-1
13747: PPUSH
13748: CALL_OW 88
// Say ( JMM , DOmarContam-JMM-2 ) ;
13752: LD_EXP 17
13756: PPUSH
13757: LD_STRING DOmarContam-JMM-2
13759: PPUSH
13760: CALL_OW 88
// DialogueOff ;
13764: CALL_OW 7
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
13768: LD_INT 5
13770: PPUSH
13771: LD_INT 7
13773: PPUSH
13774: LD_INT 2
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 80
// repeat wait ( 0 0$3 ) ;
13784: LD_INT 105
13786: PPUSH
13787: CALL_OW 67
// until IsAt ( Omar , 203 , 120 ) ;
13791: LD_EXP 53
13795: PPUSH
13796: LD_INT 203
13798: PPUSH
13799: LD_INT 120
13801: PPUSH
13802: CALL_OW 307
13806: IFFALSE 13784
// YouLost ( MothContaminate ) ;
13808: LD_STRING MothContaminate
13810: PPUSH
13811: CALL_OW 104
// end ;
13815: END
// every 0 0$2 trigger not americanDestroyed and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) do
13816: LD_EXP 4
13820: NOT
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_INT 1
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 34
13834: PUSH
13835: LD_INT 8
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PPUSH
13846: CALL_OW 69
13850: AND
13851: IFFALSE 13932
13853: GO 13855
13855: DISABLE
// begin if not IsOk ( Powell ) then
13856: LD_EXP 52
13860: PPUSH
13861: CALL_OW 302
13865: NOT
13866: IFFALSE 13870
// exit ;
13868: GO 13932
// DialogueOn ;
13870: CALL_OW 6
// SayRadio ( Powell , DWinAmericans-Pow-1 ) ;
13874: LD_EXP 52
13878: PPUSH
13879: LD_STRING DWinAmericans-Pow-1
13881: PPUSH
13882: CALL_OW 94
// if IsOk ( Burlak ) then
13886: LD_EXP 49
13890: PPUSH
13891: CALL_OW 302
13895: IFFALSE 13909
// Say ( Burlak , DWinAmericans-Bur-1 ) ;
13897: LD_EXP 49
13901: PPUSH
13902: LD_STRING DWinAmericans-Bur-1
13904: PPUSH
13905: CALL_OW 88
// Say ( JMM , DWinAmericans-JMM-1 ) ;
13909: LD_EXP 17
13913: PPUSH
13914: LD_STRING DWinAmericans-JMM-1
13916: PPUSH
13917: CALL_OW 88
// DialogueOff ;
13921: CALL_OW 7
// YouLost ( AmBomb ) ;
13925: LD_STRING AmBomb
13927: PPUSH
13928: CALL_OW 104
// end ;
13932: END
// every 0 0$2 trigger not russianDestroyed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) do
13933: LD_EXP 2
13937: NOT
13938: PUSH
13939: LD_INT 22
13941: PUSH
13942: LD_INT 3
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 34
13951: PUSH
13952: LD_INT 48
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PPUSH
13963: CALL_OW 69
13967: AND
13968: IFFALSE 14049
13970: GO 13972
13972: DISABLE
// begin if not IsOk ( Platonov ) then
13973: LD_EXP 56
13977: PPUSH
13978: CALL_OW 302
13982: NOT
13983: IFFALSE 13987
// exit ;
13985: GO 14049
// DialogueOn ;
13987: CALL_OW 6
// SayRadio ( Platonov , DWinRussians-Pla-1 ) ;
13991: LD_EXP 56
13995: PPUSH
13996: LD_STRING DWinRussians-Pla-1
13998: PPUSH
13999: CALL_OW 94
// if IsOk ( Burlak ) then
14003: LD_EXP 49
14007: PPUSH
14008: CALL_OW 302
14012: IFFALSE 14026
// Say ( Burlak , DWinRussians-Bur-1 ) ;
14014: LD_EXP 49
14018: PPUSH
14019: LD_STRING DWinRussians-Bur-1
14021: PPUSH
14022: CALL_OW 88
// Say ( JMM , DWinRussians-JMM-1 ) ;
14026: LD_EXP 17
14030: PPUSH
14031: LD_STRING DWinRussians-JMM-1
14033: PPUSH
14034: CALL_OW 88
// DialogueOff ;
14038: CALL_OW 7
// YouLost ( RuBomb ) ;
14042: LD_STRING RuBomb
14044: PPUSH
14045: CALL_OW 104
// end ;
14049: END
// every 0 0$20 trigger FilterUnitsInArea ( powellBase , [ f_side , 7 ] ) and not americanDestroyed do
14050: LD_INT 7
14052: PPUSH
14053: LD_INT 22
14055: PUSH
14056: LD_INT 7
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PPUSH
14063: CALL_OW 70
14067: PUSH
14068: LD_EXP 4
14072: NOT
14073: AND
14074: IFFALSE 14103
14076: GO 14078
14078: DISABLE
// begin SayRadio ( Powell , DSurrenderAmericans-Pow-1 ) ;
14079: LD_EXP 52
14083: PPUSH
14084: LD_STRING DSurrenderAmericans-Pow-1
14086: PPUSH
14087: CALL_OW 94
// Say ( JMM , DSurrenderAmericans-JMM-1 ) ;
14091: LD_EXP 17
14095: PPUSH
14096: LD_STRING DSurrenderAmericans-JMM-1
14098: PPUSH
14099: CALL_OW 88
// end ;
14103: END
// every 0 0$20 trigger FilterUnitsInArea ( russianBaseArea , [ f_side , 7 ] ) and not russianDestroyed and Burlak do
14104: LD_INT 2
14106: PPUSH
14107: LD_INT 22
14109: PUSH
14110: LD_INT 7
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 70
14121: PUSH
14122: LD_EXP 2
14126: NOT
14127: AND
14128: PUSH
14129: LD_EXP 49
14133: AND
14134: IFFALSE 14163
14136: GO 14138
14138: DISABLE
// begin SayRadio ( Platonov , DSurrenderRussians-Pla-1 ) ;
14139: LD_EXP 56
14143: PPUSH
14144: LD_STRING DSurrenderRussians-Pla-1
14146: PPUSH
14147: CALL_OW 94
// Say ( Burlak , DSurrenderRussians-Bur-1 ) ;
14151: LD_EXP 49
14155: PPUSH
14156: LD_STRING DSurrenderRussians-Bur-1
14158: PPUSH
14159: CALL_OW 88
// end ;
14163: END
// every 0 0$2 + 0 0$5 trigger americanDestroyed do var i , tmp , speaker ;
14164: LD_EXP 4
14168: IFFALSE 14551
14170: GO 14172
14172: DISABLE
14173: LD_INT 0
14175: PPUSH
14176: PPUSH
14177: PPUSH
// begin MC_Kill ( 4 ) ;
14178: LD_INT 4
14180: PPUSH
14181: CALL 20855 0 1
// SetAttitude ( 1 , 7 , att_friend , true ) ;
14185: LD_INT 1
14187: PPUSH
14188: LD_INT 7
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 80
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ Powell , Gladstone , Cyrus , Bobby , Gary , Houten ] ;
14201: LD_ADDR_VAR 0 3
14205: PUSH
14206: LD_INT 22
14208: PUSH
14209: LD_INT 1
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 26
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 23
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: PPUSH
14241: CALL_OW 69
14245: PUSH
14246: LD_EXP 52
14250: PUSH
14251: LD_EXP 25
14255: PUSH
14256: LD_EXP 22
14260: PUSH
14261: LD_EXP 21
14265: PUSH
14266: LD_EXP 28
14270: PUSH
14271: LD_EXP 26
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: DIFF
14284: ST_TO_ADDR
// if speaker then
14285: LD_VAR 0 3
14289: IFFALSE 14315
// begin DialogueOn ;
14291: CALL_OW 6
// SayRadio ( speaker [ 1 ] , DSurrenderAmericans-Sol1-1a ) ;
14295: LD_VAR 0 3
14299: PUSH
14300: LD_INT 1
14302: ARRAY
14303: PPUSH
14304: LD_STRING DSurrenderAmericans-Sol1-1a
14306: PPUSH
14307: CALL_OW 94
// DialogueOff ;
14311: CALL_OW 7
// end ; americanCapitulated := true ;
14315: LD_ADDR_EXP 6
14319: PUSH
14320: LD_INT 1
14322: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
14323: LD_ADDR_VAR 0 2
14327: PUSH
14328: LD_INT 22
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 1
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 21
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 69
14392: ADD
14393: ST_TO_ADDR
// if tmp then
14394: LD_VAR 0 2
14398: IFFALSE 14551
// repeat wait ( 0 0$1 ) ;
14400: LD_INT 35
14402: PPUSH
14403: CALL_OW 67
// for i in tmp do
14407: LD_ADDR_VAR 0 1
14411: PUSH
14412: LD_VAR 0 2
14416: PUSH
14417: FOR_IN
14418: IFFALSE 14500
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
14420: LD_VAR 0 1
14424: PPUSH
14425: CALL_OW 310
14429: PUSH
14430: LD_VAR 0 1
14434: PPUSH
14435: CALL_OW 310
14439: PPUSH
14440: CALL_OW 247
14444: PUSH
14445: LD_INT 3
14447: EQUAL
14448: AND
14449: IFFALSE 14460
// ComExitBuilding ( i ) ;
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 122
// AddComMoveXY ( i , 122 , 242 ) ;
14460: LD_VAR 0 1
14464: PPUSH
14465: LD_INT 122
14467: PPUSH
14468: LD_INT 242
14470: PPUSH
14471: CALL_OW 171
// if IsInArea ( i , americanEscape ) then
14475: LD_VAR 0 1
14479: PPUSH
14480: LD_INT 35
14482: PPUSH
14483: CALL_OW 308
14487: IFFALSE 14498
// RemoveUnit ( i ) ;
14489: LD_VAR 0 1
14493: PPUSH
14494: CALL_OW 64
// end ;
14498: GO 14417
14500: POP
14501: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
14502: LD_INT 22
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: LD_INT 21
14517: PUSH
14518: LD_INT 1
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: LD_INT 33
14527: PUSH
14528: LD_INT 1
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PPUSH
14544: CALL_OW 69
14548: NOT
14549: IFFALSE 14400
// end ;
14551: PPOPN 3
14553: END
// every 0 0$2 + 0 0$5 trigger russianDestroyed do var i , tmp , speaker ;
14554: LD_EXP 2
14558: IFFALSE 14959
14560: GO 14562
14562: DISABLE
14563: LD_INT 0
14565: PPUSH
14566: PPUSH
14567: PPUSH
// begin repeat wait ( 0 0$1 ) ;
14568: LD_INT 35
14570: PPUSH
14571: CALL_OW 67
// until IsDead ( Yakotich ) ;
14575: LD_EXP 57
14579: PPUSH
14580: CALL_OW 301
14584: IFFALSE 14568
// MC_Kill ( 2 ) ;
14586: LD_INT 2
14588: PPUSH
14589: CALL 20855 0 1
// SetAttitude ( 3 , 7 , att_friend , true ) ;
14593: LD_INT 3
14595: PPUSH
14596: LD_INT 7
14598: PPUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_INT 1
14604: PPUSH
14605: CALL_OW 80
// speaker := FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] , [ f_nation , 3 ] ] ) diff [ Platonov , Yakotich ] ;
14609: LD_ADDR_VAR 0 3
14613: PUSH
14614: LD_INT 22
14616: PUSH
14617: LD_INT 3
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 26
14626: PUSH
14627: LD_INT 1
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 23
14636: PUSH
14637: LD_INT 3
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: PPUSH
14649: CALL_OW 69
14653: PUSH
14654: LD_EXP 56
14658: PUSH
14659: LD_EXP 57
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: DIFF
14668: ST_TO_ADDR
// if speaker then
14669: LD_VAR 0 3
14673: IFFALSE 14723
// begin DialogueOn ;
14675: CALL_OW 6
// if Burlak then
14679: LD_EXP 49
14683: IFFALSE 14703
// SayRadio ( speaker [ 1 ] , DSurrenderRussians-RSol1-1 ) else
14685: LD_VAR 0 3
14689: PUSH
14690: LD_INT 1
14692: ARRAY
14693: PPUSH
14694: LD_STRING DSurrenderRussians-RSol1-1
14696: PPUSH
14697: CALL_OW 94
14701: GO 14719
// SayRadio ( speaker [ 1 ] , DSurrenderRussians-RSol1-1a ) ;
14703: LD_VAR 0 3
14707: PUSH
14708: LD_INT 1
14710: ARRAY
14711: PPUSH
14712: LD_STRING DSurrenderRussians-RSol1-1a
14714: PPUSH
14715: CALL_OW 94
// DialogueOff ;
14719: CALL_OW 7
// end ; russianCapitulated := true ;
14723: LD_ADDR_EXP 7
14727: PUSH
14728: LD_INT 1
14730: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
14731: LD_ADDR_VAR 0 2
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_INT 3
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 21
14748: PUSH
14749: LD_INT 1
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PPUSH
14760: CALL_OW 69
14764: PUSH
14765: LD_INT 22
14767: PUSH
14768: LD_INT 3
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 21
14777: PUSH
14778: LD_INT 2
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 1
14787: PUSH
14788: EMPTY
14789: LIST
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: LIST
14795: PPUSH
14796: CALL_OW 69
14800: ADD
14801: ST_TO_ADDR
// if tmp then
14802: LD_VAR 0 2
14806: IFFALSE 14959
// repeat wait ( 0 0$1 ) ;
14808: LD_INT 35
14810: PPUSH
14811: CALL_OW 67
// for i in tmp do
14815: LD_ADDR_VAR 0 1
14819: PUSH
14820: LD_VAR 0 2
14824: PUSH
14825: FOR_IN
14826: IFFALSE 14908
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 310
14837: PUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 310
14847: PPUSH
14848: CALL_OW 247
14852: PUSH
14853: LD_INT 3
14855: EQUAL
14856: AND
14857: IFFALSE 14868
// ComExitBuilding ( i ) ;
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 122
// AddComMoveXY ( i , 154 , 1 ) ;
14868: LD_VAR 0 1
14872: PPUSH
14873: LD_INT 154
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: CALL_OW 171
// if IsInArea ( i , russianEscape ) then
14883: LD_VAR 0 1
14887: PPUSH
14888: LD_INT 36
14890: PPUSH
14891: CALL_OW 308
14895: IFFALSE 14906
// RemoveUnit ( i ) ;
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 64
// end ;
14906: GO 14825
14908: POP
14909: POP
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
14910: LD_INT 22
14912: PUSH
14913: LD_INT 3
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: LD_INT 2
14922: PUSH
14923: LD_INT 21
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 33
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: CALL_OW 69
14956: NOT
14957: IFFALSE 14808
// end ;
14959: PPOPN 3
14961: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) < 18 or IsDead ( Kozlov ) or GetSide ( ar_depot1 ) = 7 do
14962: LD_INT 22
14964: PUSH
14965: LD_INT 8
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 23
14984: PUSH
14985: LD_INT 2
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: PUSH
15002: LD_INT 18
15004: LESS
15005: PUSH
15006: LD_EXP 55
15010: PPUSH
15011: CALL_OW 301
15015: OR
15016: PUSH
15017: LD_INT 324
15019: PPUSH
15020: CALL_OW 255
15024: PUSH
15025: LD_INT 7
15027: EQUAL
15028: OR
15029: IFFALSE 15042
15031: GO 15033
15033: DISABLE
// legionDestroyed := true ;
15034: LD_ADDR_EXP 3
15038: PUSH
15039: LD_INT 1
15041: ST_TO_ADDR
15042: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) < 9 do
15043: LD_INT 22
15045: PUSH
15046: LD_INT 2
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 21
15055: PUSH
15056: LD_INT 1
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 23
15065: PUSH
15066: LD_INT 2
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: PPUSH
15078: CALL_OW 69
15082: PUSH
15083: LD_INT 9
15085: LESS
15086: IFFALSE 15099
15088: GO 15090
15090: DISABLE
// arabianDestroyed := true ;
15091: LD_ADDR_EXP 5
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
15099: END
// every 0 0$1 trigger arabianDestroyed do var i , tmp ;
15100: LD_EXP 5
15104: IFFALSE 15348
15106: GO 15108
15108: DISABLE
15109: LD_INT 0
15111: PPUSH
15112: PPUSH
// begin MC_Kill ( 1 ) ;
15113: LD_INT 1
15115: PPUSH
15116: CALL 20855 0 1
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
15120: LD_ADDR_VAR 0 2
15124: PUSH
15125: LD_INT 22
15127: PUSH
15128: LD_INT 2
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: LD_INT 21
15137: PUSH
15138: LD_INT 1
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PPUSH
15149: CALL_OW 69
15153: PUSH
15154: LD_INT 22
15156: PUSH
15157: LD_INT 8
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 21
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 1
15176: PUSH
15177: EMPTY
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: PPUSH
15185: CALL_OW 69
15189: ADD
15190: ST_TO_ADDR
// if tmp then
15191: LD_VAR 0 2
15195: IFFALSE 15348
// repeat wait ( 0 0$1 ) ;
15197: LD_INT 35
15199: PPUSH
15200: CALL_OW 67
// for i in tmp do
15204: LD_ADDR_VAR 0 1
15208: PUSH
15209: LD_VAR 0 2
15213: PUSH
15214: FOR_IN
15215: IFFALSE 15297
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL_OW 310
15226: PUSH
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL_OW 310
15236: PPUSH
15237: CALL_OW 247
15241: PUSH
15242: LD_INT 3
15244: EQUAL
15245: AND
15246: IFFALSE 15257
// ComExitBuilding ( i ) ;
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 122
// AddComMoveXY ( i , 254 , 268 ) ;
15257: LD_VAR 0 1
15261: PPUSH
15262: LD_INT 254
15264: PPUSH
15265: LD_INT 268
15267: PPUSH
15268: CALL_OW 171
// if IsInArea ( i , arabEscape ) then
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 34
15279: PPUSH
15280: CALL_OW 308
15284: IFFALSE 15295
// RemoveUnit ( i ) ;
15286: LD_VAR 0 1
15290: PPUSH
15291: CALL_OW 64
// end ;
15295: GO 15214
15297: POP
15298: POP
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
15299: LD_INT 22
15301: PUSH
15302: LD_INT 2
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: LD_INT 21
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 33
15324: PUSH
15325: LD_INT 1
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: NOT
15346: IFFALSE 15197
// end ;
15348: PPOPN 2
15350: END
// every 0 0$1 trigger legionDestroyed do var i , tmp ;
15351: LD_EXP 3
15355: IFFALSE 15707
15357: GO 15359
15359: DISABLE
15360: LD_INT 0
15362: PPUSH
15363: PPUSH
// begin MC_Kill ( 3 ) ;
15364: LD_INT 3
15366: PPUSH
15367: CALL 20855 0 1
// SetAttitude ( 8 , 7 , att_friend , true ) ;
15371: LD_INT 8
15373: PPUSH
15374: LD_INT 7
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 80
// DialogueOn ;
15387: CALL_OW 6
// SayRadio ( Schulz , D15-Szulc-1 ) ;
15391: LD_EXP 54
15395: PPUSH
15396: LD_STRING D15-Szulc-1
15398: PPUSH
15399: CALL_OW 94
// DialogueOff ;
15403: CALL_OW 7
// legionCapitulated := true ;
15407: LD_ADDR_EXP 8
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: LD_INT 22
15422: PUSH
15423: LD_INT 8
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 21
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 23
15442: PUSH
15443: LD_INT 3
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: PPUSH
15455: CALL_OW 69
15459: PUSH
15460: FOR_IN
15461: IFFALSE 15477
// SetLives ( i , 3 ) ;
15463: LD_VAR 0 1
15467: PPUSH
15468: LD_INT 3
15470: PPUSH
15471: CALL_OW 234
15475: GO 15460
15477: POP
15478: POP
// tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: LD_INT 22
15486: PUSH
15487: LD_INT 8
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 21
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 69
15512: PUSH
15513: LD_INT 22
15515: PUSH
15516: LD_INT 8
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 21
15525: PUSH
15526: LD_INT 2
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 1
15535: PUSH
15536: EMPTY
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: ADD
15549: ST_TO_ADDR
// if tmp then
15550: LD_VAR 0 2
15554: IFFALSE 15707
// repeat wait ( 0 0$1 ) ;
15556: LD_INT 35
15558: PPUSH
15559: CALL_OW 67
// for i in tmp do
15563: LD_ADDR_VAR 0 1
15567: PUSH
15568: LD_VAR 0 2
15572: PUSH
15573: FOR_IN
15574: IFFALSE 15656
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
15576: LD_VAR 0 1
15580: PPUSH
15581: CALL_OW 310
15585: PUSH
15586: LD_VAR 0 1
15590: PPUSH
15591: CALL_OW 310
15595: PPUSH
15596: CALL_OW 247
15600: PUSH
15601: LD_INT 3
15603: EQUAL
15604: AND
15605: IFFALSE 15616
// ComExitBuilding ( i ) ;
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 122
// AddComMoveXY ( i , 10 , 1 ) ;
15616: LD_VAR 0 1
15620: PPUSH
15621: LD_INT 10
15623: PPUSH
15624: LD_INT 1
15626: PPUSH
15627: CALL_OW 171
// if IsInArea ( i , legionEscape ) then
15631: LD_VAR 0 1
15635: PPUSH
15636: LD_INT 32
15638: PPUSH
15639: CALL_OW 308
15643: IFFALSE 15654
// RemoveUnit ( i ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 64
// end ;
15654: GO 15573
15656: POP
15657: POP
// until not FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
15658: LD_INT 22
15660: PUSH
15661: LD_INT 8
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: LD_INT 21
15673: PUSH
15674: LD_INT 1
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 33
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: NOT
15705: IFFALSE 15556
// end ;
15707: PPOPN 2
15709: END
// every 0 0$5 trigger americanDestroyed and russianDestroyed and legionDestroyed and arabianDestroyed and americanCapitulated and russianCapitulated and legionCapitulated and ( GetSide ( Omar ) <> 5 or IsDead ( Omar ) or not IsPlaced ( Omar ) ) do var med1 , med2 ;
15710: LD_EXP 4
15714: PUSH
15715: LD_EXP 2
15719: AND
15720: PUSH
15721: LD_EXP 3
15725: AND
15726: PUSH
15727: LD_EXP 5
15731: AND
15732: PUSH
15733: LD_EXP 6
15737: AND
15738: PUSH
15739: LD_EXP 7
15743: AND
15744: PUSH
15745: LD_EXP 8
15749: AND
15750: PUSH
15751: LD_EXP 53
15755: PPUSH
15756: CALL_OW 255
15760: PUSH
15761: LD_INT 5
15763: NONEQUAL
15764: PUSH
15765: LD_EXP 53
15769: PPUSH
15770: CALL_OW 301
15774: OR
15775: PUSH
15776: LD_EXP 53
15780: PPUSH
15781: CALL_OW 305
15785: NOT
15786: OR
15787: AND
15788: IFFALSE 17179
15790: GO 15792
15792: DISABLE
15793: LD_INT 0
15795: PPUSH
15796: PPUSH
// begin wait ( 0 0$5 ) ;
15797: LD_INT 175
15799: PPUSH
15800: CALL_OW 67
// music_class := 5 ;
15804: LD_ADDR_OWVAR 72
15808: PUSH
15809: LD_INT 5
15811: ST_TO_ADDR
// music_nat := 5 ;
15812: LD_ADDR_OWVAR 71
15816: PUSH
15817: LD_INT 5
15819: ST_TO_ADDR
// if vehicleLostCounter < 3 then
15820: LD_EXP 15
15824: PUSH
15825: LD_INT 3
15827: LESS
15828: IFFALSE 15837
// SetAchievement ( ACH_ECONOMY ) ;
15830: LD_STRING ACH_ECONOMY
15832: PPUSH
15833: CALL_OW 543
// if tick < 60 60$00 then
15837: LD_OWVAR 1
15841: PUSH
15842: LD_INT 126000
15844: LESS
15845: IFFALSE 15861
// begin wait ( 3 ) ;
15847: LD_INT 3
15849: PPUSH
15850: CALL_OW 67
// SetAchievement ( ACH_ASPEED_19 ) ;
15854: LD_STRING ACH_ASPEED_19
15856: PPUSH
15857: CALL_OW 543
// end ; CenterNowOnUnits ( JMM ) ;
15861: LD_EXP 17
15865: PPUSH
15866: CALL_OW 87
// InGameOn ;
15870: CALL_OW 8
// DialogueOn ;
15874: CALL_OW 6
// Say ( JMM , DEnd-JMM-JMM-1 ) ;
15878: LD_EXP 17
15882: PPUSH
15883: LD_STRING DEnd-JMM-JMM-1
15885: PPUSH
15886: CALL_OW 88
// if Joan then
15890: LD_EXP 32
15894: IFFALSE 15910
// Say ( Joan , DEnd-JMM-Joan-1 ) else
15896: LD_EXP 32
15900: PPUSH
15901: LD_STRING DEnd-JMM-Joan-1
15903: PPUSH
15904: CALL_OW 88
15908: GO 15954
// if Lisa and GetSide ( Lisa ) = 7 and IsPlaced ( Lisa ) then
15910: LD_EXP 19
15914: PUSH
15915: LD_EXP 19
15919: PPUSH
15920: CALL_OW 255
15924: PUSH
15925: LD_INT 7
15927: EQUAL
15928: AND
15929: PUSH
15930: LD_EXP 19
15934: PPUSH
15935: CALL_OW 305
15939: AND
15940: IFFALSE 15954
// Say ( Lisa , DEnd-JMM-Lisa-1 ) ;
15942: LD_EXP 19
15946: PPUSH
15947: LD_STRING DEnd-JMM-Lisa-1
15949: PPUSH
15950: CALL_OW 88
// if Frank and IsPlaced ( Frank ) then
15954: LD_EXP 29
15958: PUSH
15959: LD_EXP 29
15963: PPUSH
15964: CALL_OW 305
15968: AND
15969: IFFALSE 15983
// Say ( Frank , DEnd-JMM-Frank-1 ) ;
15971: LD_EXP 29
15975: PPUSH
15976: LD_STRING DEnd-JMM-Frank-1
15978: PPUSH
15979: CALL_OW 88
// if Cyrus and GetSide ( Cyrus ) = 7 and IsPlaced ( Cyrus ) then
15983: LD_EXP 22
15987: PUSH
15988: LD_EXP 22
15992: PPUSH
15993: CALL_OW 255
15997: PUSH
15998: LD_INT 7
16000: EQUAL
16001: AND
16002: PUSH
16003: LD_EXP 22
16007: PPUSH
16008: CALL_OW 305
16012: AND
16013: IFFALSE 16027
// Say ( Cyrus , DEnd-JMM-Cyrus-1 ) ;
16015: LD_EXP 22
16019: PPUSH
16020: LD_STRING DEnd-JMM-Cyrus-1
16022: PPUSH
16023: CALL_OW 88
// if Burlak then
16027: LD_EXP 49
16031: IFFALSE 16045
// Say ( Burlak , DEnd-JMM-Bur-1 ) ;
16033: LD_EXP 49
16037: PPUSH
16038: LD_STRING DEnd-JMM-Bur-1
16040: PPUSH
16041: CALL_OW 88
// if Joan and Lisa and GetSide ( Lisa ) = 7 and IsPlaced ( Lisa ) then
16045: LD_EXP 32
16049: PUSH
16050: LD_EXP 19
16054: AND
16055: PUSH
16056: LD_EXP 19
16060: PPUSH
16061: CALL_OW 255
16065: PUSH
16066: LD_INT 7
16068: EQUAL
16069: AND
16070: PUSH
16071: LD_EXP 19
16075: PPUSH
16076: CALL_OW 305
16080: AND
16081: IFFALSE 16095
// Say ( Lisa , DEnd-Burlak-Lisa-1 ) ;
16083: LD_EXP 19
16087: PPUSH
16088: LD_STRING DEnd-Burlak-Lisa-1
16090: PPUSH
16091: CALL_OW 88
// if Belkov and IsPlaced ( Belkov ) then
16095: LD_EXP 50
16099: PUSH
16100: LD_EXP 50
16104: PPUSH
16105: CALL_OW 305
16109: AND
16110: IFFALSE 16124
// Say ( Belkov , DEnd-JMM-Bel-1 ) ;
16112: LD_EXP 50
16116: PPUSH
16117: LD_STRING DEnd-JMM-Bel-1
16119: PPUSH
16120: CALL_OW 88
// if Gnyevko and IsPlaced ( Gnyevko ) then
16124: LD_EXP 51
16128: PUSH
16129: LD_EXP 51
16133: PPUSH
16134: CALL_OW 305
16138: AND
16139: IFFALSE 16153
// Say ( Gnyevko , DEnd-JMM-Gny-1 ) ;
16141: LD_EXP 51
16145: PPUSH
16146: LD_STRING DEnd-JMM-Gny-1
16148: PPUSH
16149: CALL_OW 88
// if Cornel and GetSide ( Cornel ) = 7 and IsPlaced ( Cornel ) then
16153: LD_EXP 27
16157: PUSH
16158: LD_EXP 27
16162: PPUSH
16163: CALL_OW 255
16167: PUSH
16168: LD_INT 7
16170: EQUAL
16171: AND
16172: PUSH
16173: LD_EXP 27
16177: PPUSH
16178: CALL_OW 305
16182: AND
16183: IFFALSE 16197
// Say ( Cornel , DEnd-JMM-Corn-1 ) ;
16185: LD_EXP 27
16189: PPUSH
16190: LD_STRING DEnd-JMM-Corn-1
16192: PPUSH
16193: CALL_OW 88
// if Donaldson and GetSide ( Donaldson ) = 7 and IsPlaced ( Donaldson ) then
16197: LD_EXP 20
16201: PUSH
16202: LD_EXP 20
16206: PPUSH
16207: CALL_OW 255
16211: PUSH
16212: LD_INT 7
16214: EQUAL
16215: AND
16216: PUSH
16217: LD_EXP 20
16221: PPUSH
16222: CALL_OW 305
16226: AND
16227: IFFALSE 16241
// Say ( Donaldson , DEnd-JMM-Don-1 ) ;
16229: LD_EXP 20
16233: PPUSH
16234: LD_STRING DEnd-JMM-Don-1
16236: PPUSH
16237: CALL_OW 88
// if Bobby and GetSide ( Bobby ) = 7 and IsPlaced ( Bobby ) then
16241: LD_EXP 21
16245: PUSH
16246: LD_EXP 21
16250: PPUSH
16251: CALL_OW 255
16255: PUSH
16256: LD_INT 7
16258: EQUAL
16259: AND
16260: PUSH
16261: LD_EXP 21
16265: PPUSH
16266: CALL_OW 305
16270: AND
16271: IFFALSE 16285
// Say ( Bobby , DEnd-JMM-Bobby-1 ) ;
16273: LD_EXP 21
16277: PPUSH
16278: LD_STRING DEnd-JMM-Bobby-1
16280: PPUSH
16281: CALL_OW 88
// if Denis and GetSide ( Denis ) = 7 and IsPlaced ( Denis ) then
16285: LD_EXP 23
16289: PUSH
16290: LD_EXP 23
16294: PPUSH
16295: CALL_OW 255
16299: PUSH
16300: LD_INT 7
16302: EQUAL
16303: AND
16304: PUSH
16305: LD_EXP 23
16309: PPUSH
16310: CALL_OW 305
16314: AND
16315: IFFALSE 16329
// Say ( Denis , DEnd-JMM-Den-1 ) ;
16317: LD_EXP 23
16321: PPUSH
16322: LD_STRING DEnd-JMM-Den-1
16324: PPUSH
16325: CALL_OW 88
// if Gladstone and GetSide ( Gladstone ) = 7 and IsPlaced ( Gladstone ) then
16329: LD_EXP 25
16333: PUSH
16334: LD_EXP 25
16338: PPUSH
16339: CALL_OW 255
16343: PUSH
16344: LD_INT 7
16346: EQUAL
16347: AND
16348: PUSH
16349: LD_EXP 25
16353: PPUSH
16354: CALL_OW 305
16358: AND
16359: IFFALSE 16373
// Say ( Gladstone , DEnd-JMM-Glad-1 ) ;
16361: LD_EXP 25
16365: PPUSH
16366: LD_STRING DEnd-JMM-Glad-1
16368: PPUSH
16369: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 7 and IsPlaced ( Kikuchi ) then
16373: LD_EXP 30
16377: PUSH
16378: LD_EXP 30
16382: PPUSH
16383: CALL_OW 255
16387: PUSH
16388: LD_INT 7
16390: EQUAL
16391: AND
16392: PUSH
16393: LD_EXP 30
16397: PPUSH
16398: CALL_OW 305
16402: AND
16403: IFFALSE 16417
// Say ( Kikuchi , DEnd-JMM-Yam-1 ) ;
16405: LD_EXP 30
16409: PPUSH
16410: LD_STRING DEnd-JMM-Yam-1
16412: PPUSH
16413: CALL_OW 88
// if Brown and GetSide ( Brown ) = 7 and IsPlaced ( Brown ) then
16417: LD_EXP 24
16421: PUSH
16422: LD_EXP 24
16426: PPUSH
16427: CALL_OW 255
16431: PUSH
16432: LD_INT 7
16434: EQUAL
16435: AND
16436: PUSH
16437: LD_EXP 24
16441: PPUSH
16442: CALL_OW 305
16446: AND
16447: IFFALSE 16461
// Say ( Brown , DEnd-JMM-Brown-1 ) ;
16449: LD_EXP 24
16453: PPUSH
16454: LD_STRING DEnd-JMM-Brown-1
16456: PPUSH
16457: CALL_OW 88
// if Connie and GetSide ( Connie ) = 7 and IsPlaced ( Connie ) then
16461: LD_EXP 34
16465: PUSH
16466: LD_EXP 34
16470: PPUSH
16471: CALL_OW 255
16475: PUSH
16476: LD_INT 7
16478: EQUAL
16479: AND
16480: PUSH
16481: LD_EXP 34
16485: PPUSH
16486: CALL_OW 305
16490: AND
16491: IFFALSE 16505
// Say ( Connie , DEnd-JMM-Con-1 ) ;
16493: LD_EXP 34
16497: PPUSH
16498: LD_STRING DEnd-JMM-Con-1
16500: PPUSH
16501: CALL_OW 88
// if Gary and GetSide ( Gary ) = 7 and IsPlaced ( Gary ) then
16505: LD_EXP 28
16509: PUSH
16510: LD_EXP 28
16514: PPUSH
16515: CALL_OW 255
16519: PUSH
16520: LD_INT 7
16522: EQUAL
16523: AND
16524: PUSH
16525: LD_EXP 28
16529: PPUSH
16530: CALL_OW 305
16534: AND
16535: IFFALSE 16549
// Say ( Gary , DEnd-JMM-Gary-1 ) ;
16537: LD_EXP 28
16541: PPUSH
16542: LD_STRING DEnd-JMM-Gary-1
16544: PPUSH
16545: CALL_OW 88
// if Simms and Roth and IsPlaced ( Simms ) then
16549: LD_EXP 31
16553: PUSH
16554: LD_EXP 18
16558: AND
16559: PUSH
16560: LD_EXP 31
16564: PPUSH
16565: CALL_OW 305
16569: AND
16570: IFFALSE 16584
// Say ( Simms , DEnd-JMM-Sim-1 ) ;
16572: LD_EXP 31
16576: PPUSH
16577: LD_STRING DEnd-JMM-Sim-1
16579: PPUSH
16580: CALL_OW 88
// if Houten and GetSide ( Houten ) = 7 and IsPlaced ( Houten ) then
16584: LD_EXP 26
16588: PUSH
16589: LD_EXP 26
16593: PPUSH
16594: CALL_OW 255
16598: PUSH
16599: LD_INT 7
16601: EQUAL
16602: AND
16603: PUSH
16604: LD_EXP 26
16608: PPUSH
16609: CALL_OW 305
16613: AND
16614: IFFALSE 16628
// Say ( Houten , DEnd-JMM-VanH-1 ) ;
16616: LD_EXP 26
16620: PPUSH
16621: LD_STRING DEnd-JMM-VanH-1
16623: PPUSH
16624: CALL_OW 88
// if Dolgov and IsPlaced ( Dolgov ) then
16628: LD_EXP 39
16632: PUSH
16633: LD_EXP 39
16637: PPUSH
16638: CALL_OW 305
16642: AND
16643: IFFALSE 16657
// Say ( Dolgov , DEnd-JMM-Dol-1 ) ;
16645: LD_EXP 39
16649: PPUSH
16650: LD_STRING DEnd-JMM-Dol-1
16652: PPUSH
16653: CALL_OW 88
// if Kapitsova and IsPlaced ( Kapitsova ) then
16657: LD_EXP 43
16661: PUSH
16662: LD_EXP 43
16666: PPUSH
16667: CALL_OW 305
16671: AND
16672: IFFALSE 16686
// Say ( Kapitsova , DEnd-JMM-Kap-1 ) ;
16674: LD_EXP 43
16678: PPUSH
16679: LD_STRING DEnd-JMM-Kap-1
16681: PPUSH
16682: CALL_OW 88
// if Kovalyuk and IsPlaced ( Kovalyuk ) then
16686: LD_EXP 46
16690: PUSH
16691: LD_EXP 46
16695: PPUSH
16696: CALL_OW 305
16700: AND
16701: IFFALSE 16715
// Say ( Kovalyuk , DEnd-JMM-Kov-1 ) ;
16703: LD_EXP 46
16707: PPUSH
16708: LD_STRING DEnd-JMM-Kov-1
16710: PPUSH
16711: CALL_OW 88
// if Scholtze and IsPlaced ( Scholtze ) then
16715: LD_EXP 41
16719: PUSH
16720: LD_EXP 41
16724: PPUSH
16725: CALL_OW 305
16729: AND
16730: IFFALSE 16744
// Say ( Scholtze , DEnd-JMM-Sch-1 ) ;
16732: LD_EXP 41
16736: PPUSH
16737: LD_STRING DEnd-JMM-Sch-1
16739: PPUSH
16740: CALL_OW 88
// if Titov and IsPlaced ( Titov ) then
16744: LD_EXP 37
16748: PUSH
16749: LD_EXP 37
16753: PPUSH
16754: CALL_OW 305
16758: AND
16759: IFFALSE 16773
// Say ( Titov , DEnd-JMM-Tit-1 ) ;
16761: LD_EXP 37
16765: PPUSH
16766: LD_STRING DEnd-JMM-Tit-1
16768: PPUSH
16769: CALL_OW 88
// if Oblukov and IsPlaced ( Oblukov ) then
16773: LD_EXP 42
16777: PUSH
16778: LD_EXP 42
16782: PPUSH
16783: CALL_OW 305
16787: AND
16788: IFFALSE 16802
// Say ( Oblukov , DEnd-JMM-Obl-1 ) ;
16790: LD_EXP 42
16794: PPUSH
16795: LD_STRING DEnd-JMM-Obl-1
16797: PPUSH
16798: CALL_OW 88
// if Lipshchin and IsPlaced ( Lipshchin ) then
16802: LD_EXP 44
16806: PUSH
16807: LD_EXP 44
16811: PPUSH
16812: CALL_OW 305
16816: AND
16817: IFFALSE 16831
// Say ( Lipshchin , DEnd-JMM-Lip-1 ) ;
16819: LD_EXP 44
16823: PPUSH
16824: LD_STRING DEnd-JMM-Lip-1
16826: PPUSH
16827: CALL_OW 88
// if Fadeev and IsPlaced ( Fadeev ) and Burlak then
16831: LD_EXP 38
16835: PUSH
16836: LD_EXP 38
16840: PPUSH
16841: CALL_OW 305
16845: AND
16846: PUSH
16847: LD_EXP 49
16851: AND
16852: IFFALSE 16866
// Say ( Fadeev , DEnd-Burlak-Fad-1 ) ;
16854: LD_EXP 38
16858: PPUSH
16859: LD_STRING DEnd-Burlak-Fad-1
16861: PPUSH
16862: CALL_OW 88
// if Petrovova and IsPlaced ( Petrovova ) then
16866: LD_EXP 45
16870: PUSH
16871: LD_EXP 45
16875: PPUSH
16876: CALL_OW 305
16880: AND
16881: IFFALSE 16895
// Say ( Petrovova , DEnd-Burlak-Ptr-1 ) ;
16883: LD_EXP 45
16887: PPUSH
16888: LD_STRING DEnd-Burlak-Ptr-1
16890: PPUSH
16891: CALL_OW 88
// if Kuzmov and IsPlaced ( Kuzmov ) then
16895: LD_EXP 47
16899: PUSH
16900: LD_EXP 47
16904: PPUSH
16905: CALL_OW 305
16909: AND
16910: IFFALSE 16924
// Say ( Kuzmov , DEnd-Burlak-Kuz-1 ) ;
16912: LD_EXP 47
16916: PPUSH
16917: LD_STRING DEnd-Burlak-Kuz-1
16919: PPUSH
16920: CALL_OW 88
// if Kirilenkova and IsPlaced ( Kirilenkova ) and Burlak then
16924: LD_EXP 36
16928: PUSH
16929: LD_EXP 36
16933: PPUSH
16934: CALL_OW 305
16938: AND
16939: PUSH
16940: LD_EXP 49
16944: AND
16945: IFFALSE 16959
// Say ( Kirilenkova , DEnd-Burlak-Kir-1 ) ;
16947: LD_EXP 36
16951: PPUSH
16952: LD_STRING DEnd-Burlak-Kir-1
16954: PPUSH
16955: CALL_OW 88
// if Burlak then
16959: LD_EXP 49
16963: IFFALSE 16977
// Say ( JMM , DEnd-Burlak-JMM-1 ) ;
16965: LD_EXP 17
16969: PPUSH
16970: LD_STRING DEnd-Burlak-JMM-1
16972: PPUSH
16973: CALL_OW 88
// dwait ( 0 0$2 ) ;
16977: LD_INT 70
16979: PPUSH
16980: CALL_OW 68
// SayRadio ( Schulz , DEnd-Szulc ) ;
16984: LD_EXP 54
16988: PPUSH
16989: LD_STRING DEnd-Szulc
16991: PPUSH
16992: CALL_OW 94
// dwait ( 0 0$1 ) ;
16996: LD_INT 35
16998: PPUSH
16999: CALL_OW 68
// if IsLive ( Burlak ) then
17003: LD_EXP 49
17007: PPUSH
17008: CALL_OW 300
17012: IFFALSE 17024
// med1 := 1 else
17014: LD_ADDR_VAR 0 1
17018: PUSH
17019: LD_INT 1
17021: ST_TO_ADDR
17022: GO 17033
// med1 := - 1 ;
17024: LD_ADDR_VAR 0 1
17028: PUSH
17029: LD_INT 1
17031: NEG
17032: ST_TO_ADDR
// if artifactIResearched and artifactIIResearched and artifactIIIResearched then
17033: LD_EXP 12
17037: PUSH
17038: LD_EXP 13
17042: AND
17043: PUSH
17044: LD_EXP 14
17048: AND
17049: IFFALSE 17061
// med2 := 1 else
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_INT 1
17058: ST_TO_ADDR
17059: GO 17070
// med2 := - 1 ;
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: ST_TO_ADDR
// AddMedal ( Hero , 1 ) ;
17070: LD_STRING Hero
17072: PPUSH
17073: LD_INT 1
17075: PPUSH
17076: CALL_OW 101
// AddMedal ( Artefact , med2 ) ;
17080: LD_STRING Artefact
17082: PPUSH
17083: LD_VAR 0 2
17087: PPUSH
17088: CALL_OW 101
// AddMedal ( ReconcileBurlak , med1 ) ;
17092: LD_STRING ReconcileBurlak
17094: PPUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 101
// if Difficulty = 3 and med1 = 1 and med2 = 1 then
17104: LD_OWVAR 67
17108: PUSH
17109: LD_INT 3
17111: EQUAL
17112: PUSH
17113: LD_VAR 0 1
17117: PUSH
17118: LD_INT 1
17120: EQUAL
17121: AND
17122: PUSH
17123: LD_VAR 0 2
17127: PUSH
17128: LD_INT 1
17130: EQUAL
17131: AND
17132: IFFALSE 17144
// SetAchievementEX ( ACH_AMER , 19 ) ;
17134: LD_STRING ACH_AMER
17136: PPUSH
17137: LD_INT 19
17139: PPUSH
17140: CALL_OW 564
// GiveMedals ( MAIN ) ;
17144: LD_STRING MAIN
17146: PPUSH
17147: CALL_OW 102
// InGameOff ;
17151: CALL_OW 9
// DialogueOff ;
17155: CALL_OW 7
// music_nat := 1 ;
17159: LD_ADDR_OWVAR 71
17163: PUSH
17164: LD_INT 1
17166: ST_TO_ADDR
// music_class := 4 ;
17167: LD_ADDR_OWVAR 72
17171: PUSH
17172: LD_INT 4
17174: ST_TO_ADDR
// YouWin ;
17175: CALL_OW 103
// end ; end_of_file
17179: PPOPN 2
17181: END
// export function InitNature ; begin
17182: LD_INT 0
17184: PPUSH
// PrepareNature ( 3 , 3 , 2 , 1 , 1 , 0 , 0 , natureArea1 , 0 ) ;
17185: LD_INT 3
17187: PPUSH
17188: LD_INT 3
17190: PPUSH
17191: LD_INT 2
17193: PPUSH
17194: LD_INT 1
17196: PPUSH
17197: LD_INT 1
17199: PPUSH
17200: LD_INT 0
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 17
17208: PPUSH
17209: LD_INT 0
17211: PPUSH
17212: CALL 83258 0 9
// PrepareNature ( 2 , 1 , 1 , 1 , 1 , 0 , 0 , natureArea2 , 0 ) ;
17216: LD_INT 2
17218: PPUSH
17219: LD_INT 1
17221: PPUSH
17222: LD_INT 1
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: LD_INT 0
17236: PPUSH
17237: LD_INT 18
17239: PPUSH
17240: LD_INT 0
17242: PPUSH
17243: CALL 83258 0 9
// PrepareNature ( 4 , 1 , 2 , 4 , 2 , 1 , 0 , natureArea3 , 0 ) ;
17247: LD_INT 4
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: LD_INT 2
17255: PPUSH
17256: LD_INT 4
17258: PPUSH
17259: LD_INT 2
17261: PPUSH
17262: LD_INT 1
17264: PPUSH
17265: LD_INT 0
17267: PPUSH
17268: LD_INT 19
17270: PPUSH
17271: LD_INT 0
17273: PPUSH
17274: CALL 83258 0 9
// PrepareNature ( 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , natureWaterArea ) ;
17278: LD_INT 0
17280: PPUSH
17281: LD_INT 0
17283: PPUSH
17284: LD_INT 0
17286: PPUSH
17287: LD_INT 0
17289: PPUSH
17290: LD_INT 0
17292: PPUSH
17293: LD_INT 0
17295: PPUSH
17296: LD_INT 9
17298: PPUSH
17299: LD_INT 0
17301: PPUSH
17302: LD_INT 20
17304: PPUSH
17305: CALL 83258 0 9
// end ; end_of_file
17309: LD_VAR 0 1
17313: RET
// every 0 0$30 do var time ;
17314: GO 17316
17316: DISABLE
17317: LD_INT 0
17319: PPUSH
// begin time := 0 0$50 ;
17320: LD_ADDR_VAR 0 1
17324: PUSH
17325: LD_INT 1750
17327: ST_TO_ADDR
// repeat wait ( time ) ;
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 67
// if Prob ( 50 ) then
17337: LD_INT 50
17339: PPUSH
17340: CALL_OW 13
17344: IFFALSE 17373
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 89 , 45 , true ) ;
17346: LD_INT 1
17348: PPUSH
17349: LD_INT 5
17351: PPUSH
17352: CALL_OW 12
17356: PPUSH
17357: LD_INT 106
17359: PPUSH
17360: LD_INT 89
17362: PPUSH
17363: LD_INT 45
17365: PPUSH
17366: LD_INT 1
17368: PPUSH
17369: CALL_OW 56
// time := time + 0 0$3 ;
17373: LD_ADDR_VAR 0 1
17377: PUSH
17378: LD_VAR 0 1
17382: PUSH
17383: LD_INT 105
17385: PLUS
17386: ST_TO_ADDR
// if Prob ( 30 ) then
17387: LD_INT 30
17389: PPUSH
17390: CALL_OW 13
17394: IFFALSE 17440
// begin wait ( rand ( 0 0$15 , 0 0$21 ) ) ;
17396: LD_INT 525
17398: PPUSH
17399: LD_INT 735
17401: PPUSH
17402: CALL_OW 12
17406: PPUSH
17407: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 21 , 26 , 12 , true ) ;
17411: LD_INT 1
17413: PPUSH
17414: LD_INT 5
17416: PPUSH
17417: CALL_OW 12
17421: PPUSH
17422: LD_INT 21
17424: PPUSH
17425: LD_INT 26
17427: PPUSH
17428: LD_INT 12
17430: PPUSH
17431: LD_INT 1
17433: PPUSH
17434: CALL_OW 56
// end else
17438: GO 17476
// begin wait ( rand ( 0 0$20 , 0 0$35 ) ) ;
17440: LD_INT 700
17442: PPUSH
17443: LD_INT 1225
17445: PPUSH
17446: CALL_OW 12
17450: PPUSH
17451: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , russianCratesArea , true ) ;
17455: LD_INT 1
17457: PPUSH
17458: LD_INT 5
17460: PPUSH
17461: CALL_OW 12
17465: PPUSH
17466: LD_INT 14
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: CALL_OW 55
// end ; if Prob ( 50 ) then
17476: LD_INT 50
17478: PPUSH
17479: CALL_OW 13
17483: IFFALSE 17529
// begin wait ( rand ( 0 0$20 , 0 0$30 ) ) ;
17485: LD_INT 700
17487: PPUSH
17488: LD_INT 1050
17490: PPUSH
17491: CALL_OW 12
17495: PPUSH
17496: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 181 , 218 , 16 , true ) ;
17500: LD_INT 1
17502: PPUSH
17503: LD_INT 5
17505: PPUSH
17506: CALL_OW 12
17510: PPUSH
17511: LD_INT 181
17513: PPUSH
17514: LD_INT 218
17516: PPUSH
17517: LD_INT 16
17519: PPUSH
17520: LD_INT 1
17522: PPUSH
17523: CALL_OW 56
// end else
17527: GO 17601
// begin wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
17529: LD_INT 350
17531: PPUSH
17532: LD_INT 525
17534: PPUSH
17535: CALL_OW 12
17539: PPUSH
17540: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , legionCratesArea , true ) ;
17544: LD_INT 1
17546: PPUSH
17547: LD_INT 5
17549: PPUSH
17550: CALL_OW 12
17554: PPUSH
17555: LD_INT 13
17557: PPUSH
17558: LD_INT 1
17560: PPUSH
17561: CALL_OW 55
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
17565: LD_INT 350
17567: PPUSH
17568: LD_INT 700
17570: PPUSH
17571: CALL_OW 12
17575: PPUSH
17576: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
17580: LD_INT 1
17582: PPUSH
17583: LD_INT 5
17585: PPUSH
17586: CALL_OW 12
17590: PPUSH
17591: LD_INT 33
17593: PPUSH
17594: LD_INT 1
17596: PPUSH
17597: CALL_OW 55
// end ; if Prob ( [ 65 , 62 , 55 ] [ Difficulty ] ) then
17601: LD_INT 65
17603: PUSH
17604: LD_INT 62
17606: PUSH
17607: LD_INT 55
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: LIST
17614: PUSH
17615: LD_OWVAR 67
17619: ARRAY
17620: PPUSH
17621: CALL_OW 13
17625: IFFALSE 17671
// begin wait ( rand ( 0 0$15 , 0 0$25 ) ) ;
17627: LD_INT 525
17629: PPUSH
17630: LD_INT 875
17632: PPUSH
17633: CALL_OW 12
17637: PPUSH
17638: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 294 , 211 , 30 , true ) ;
17642: LD_INT 1
17644: PPUSH
17645: LD_INT 5
17647: PPUSH
17648: CALL_OW 12
17652: PPUSH
17653: LD_INT 294
17655: PPUSH
17656: LD_INT 211
17658: PPUSH
17659: LD_INT 30
17661: PPUSH
17662: LD_INT 1
17664: PPUSH
17665: CALL_OW 56
// end else
17669: GO 17713
// begin wait ( rand ( 0 0$12 , 0 0$22 ) ) ;
17671: LD_INT 420
17673: PPUSH
17674: LD_INT 770
17676: PPUSH
17677: CALL_OW 12
17681: PPUSH
17682: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 294 , 211 , 30 , true ) ;
17686: LD_INT 1
17688: PPUSH
17689: LD_INT 5
17691: PPUSH
17692: CALL_OW 12
17696: PPUSH
17697: LD_INT 294
17699: PPUSH
17700: LD_INT 211
17702: PPUSH
17703: LD_INT 30
17705: PPUSH
17706: LD_INT 1
17708: PPUSH
17709: CALL_OW 56
// end ; if time > 2 2$20 then
17713: LD_VAR 0 1
17717: PUSH
17718: LD_INT 4900
17720: GREATER
17721: IFFALSE 17731
// time := 0 0$50 ;
17723: LD_ADDR_VAR 0 1
17727: PUSH
17728: LD_INT 1750
17730: ST_TO_ADDR
// until false ;
17731: LD_INT 0
17733: IFFALSE 17328
// end ;
17735: PPOPN 1
17737: END
// every 0 0$45 trigger tick < 10 10$00 do
17738: LD_OWVAR 1
17742: PUSH
17743: LD_INT 21000
17745: LESS
17746: IFFALSE 17794
17748: GO 17750
17750: DISABLE
// begin enable ;
17751: ENABLE
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
17752: LD_INT 350
17754: PPUSH
17755: LD_INT 700
17757: PPUSH
17758: CALL_OW 12
17762: PPUSH
17763: CALL_OW 67
// CreateCratesXYR ( rand ( 3 , 5 ) , 181 , 13 , 20 , true ) ;
17767: LD_INT 3
17769: PPUSH
17770: LD_INT 5
17772: PPUSH
17773: CALL_OW 12
17777: PPUSH
17778: LD_INT 181
17780: PPUSH
17781: LD_INT 13
17783: PPUSH
17784: LD_INT 20
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 56
// end ; end_of_file
17794: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsLabsWorking ; export artifactsResDifficulty , artifactsResProgress , artifactsLabs , artifactsButtons , artifactsReady ; export function InitArtifact ; begin
17795: LD_INT 0
17797: PPUSH
// SetArtifactRes ( 7 , true ) ;
17798: LD_INT 7
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: CALL_OW 467
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
17808: LD_ADDR_EXP 62
17812: PUSH
17813: EMPTY
17814: PUSH
17815: EMPTY
17816: PUSH
17817: EMPTY
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 * Difficulty , 1 1$20 * Difficulty , - 1 ] ;
17824: LD_ADDR_EXP 63
17828: PUSH
17829: LD_INT 1050
17831: PUSH
17832: LD_OWVAR 67
17836: MUL
17837: PUSH
17838: LD_INT 2800
17840: PUSH
17841: LD_OWVAR 67
17845: MUL
17846: PUSH
17847: LD_INT 1
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: LIST
17855: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
17856: LD_ADDR_EXP 64
17860: PUSH
17861: LD_INT 10
17863: PUSH
17864: LD_INT 35
17866: PUSH
17867: LD_INT 100
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: ST_TO_ADDR
// artifactsResearched := [ 0 , 0 , 0 ] ;
17875: LD_ADDR_EXP 65
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: LIST
17893: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
17894: LD_ADDR_EXP 67
17898: PUSH
17899: LD_INT 300
17901: PUSH
17902: LD_INT 500
17904: PUSH
17905: LD_INT 800
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: LIST
17912: ST_TO_ADDR
// artifactsResProgress := [ 0 , 0 , 0 ] ;
17913: LD_ADDR_EXP 68
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: ST_TO_ADDR
// artifactsLabs := [ 0 , 0 , 0 ] ;
17932: LD_ADDR_EXP 69
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: ST_TO_ADDR
// artifactsLabsWorking := [ 0 , 0 , 0 ] ;
17951: LD_ADDR_EXP 66
17955: PUSH
17956: LD_INT 0
17958: PUSH
17959: LD_INT 0
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_teleport , art_place , art_exp_right ] ] ;
17970: LD_ADDR_EXP 70
17974: PUSH
17975: LD_INT 4
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 5
17991: PUSH
17992: LD_INT 4
17994: PUSH
17995: LD_INT 2
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 6
18005: PUSH
18006: LD_INT 3
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: ST_TO_ADDR
// artifactsReady := [ 0 , 0 , 0 ] ;
18022: LD_ADDR_EXP 71
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: ST_TO_ADDR
// end ;
18041: LD_VAR 0 1
18045: RET
// every 0 0$1 trigger GetTech ( tech_artifact , 7 ) = state_researched do var i , pos , j , labs , nearestLab ;
18046: LD_INT 24
18048: PPUSH
18049: LD_INT 7
18051: PPUSH
18052: CALL_OW 321
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: IFFALSE 18986
18062: GO 18064
18064: DISABLE
18065: LD_INT 0
18067: PPUSH
18068: PPUSH
18069: PPUSH
18070: PPUSH
18071: PPUSH
// begin enable ;
18072: ENABLE
// for i = 1 to 3 do
18073: LD_ADDR_VAR 0 1
18077: PUSH
18078: DOUBLE
18079: LD_INT 1
18081: DEC
18082: ST_TO_ADDR
18083: LD_INT 3
18085: PUSH
18086: FOR_TO
18087: IFFALSE 18984
// begin pos := FindArtifact ( i + 2 ) ;
18089: LD_ADDR_VAR 0 2
18093: PUSH
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 2
18101: PLUS
18102: PPUSH
18103: CALL_OW 469
18107: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
18108: LD_ADDR_EXP 62
18112: PUSH
18113: LD_EXP 62
18117: PPUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: LD_VAR 0 2
18127: PPUSH
18128: CALL_OW 1
18132: ST_TO_ADDR
// if pos then
18133: LD_VAR 0 2
18137: IFFALSE 18845
// begin case i of 1 :
18139: LD_VAR 0 1
18143: PUSH
18144: LD_INT 1
18146: DOUBLE
18147: EQUAL
18148: IFTRUE 18152
18150: GO 18229
18152: POP
// labs := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) ; 2 :
18153: LD_ADDR_VAR 0 4
18157: PUSH
18158: LD_INT 22
18160: PUSH
18161: LD_INT 7
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 23
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: LD_INT 30
18183: PUSH
18184: LD_INT 8
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 30
18193: PUSH
18194: LD_INT 7
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 30
18203: PUSH
18204: LD_INT 11
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 69
18226: ST_TO_ADDR
18227: GO 18337
18229: LD_INT 2
18231: DOUBLE
18232: EQUAL
18233: IFTRUE 18237
18235: GO 18314
18237: POP
// labs := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) ; 3 :
18238: LD_ADDR_VAR 0 4
18242: PUSH
18243: LD_INT 22
18245: PUSH
18246: LD_INT 7
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 23
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 2
18265: PUSH
18266: LD_INT 30
18268: PUSH
18269: LD_INT 8
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 30
18278: PUSH
18279: LD_INT 7
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 30
18288: PUSH
18289: LD_INT 11
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: PPUSH
18307: CALL_OW 69
18311: ST_TO_ADDR
18312: GO 18337
18314: LD_INT 3
18316: DOUBLE
18317: EQUAL
18318: IFTRUE 18322
18320: GO 18336
18322: POP
// labs := [ alien ] ; end ;
18323: LD_ADDR_VAR 0 4
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: EMPTY
18332: LIST
18333: ST_TO_ADDR
18334: GO 18337
18336: POP
// if not labs then
18337: LD_VAR 0 4
18341: NOT
18342: IFFALSE 18346
// continue ;
18344: GO 18086
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
18346: LD_ADDR_VAR 0 5
18350: PUSH
18351: LD_VAR 0 4
18355: PPUSH
18356: LD_EXP 62
18360: PUSH
18361: LD_VAR 0 1
18365: ARRAY
18366: PUSH
18367: LD_INT 1
18369: ARRAY
18370: PPUSH
18371: LD_EXP 62
18375: PUSH
18376: LD_VAR 0 1
18380: ARRAY
18381: PUSH
18382: LD_INT 2
18384: ARRAY
18385: PPUSH
18386: CALL_OW 73
18390: ST_TO_ADDR
// if not nearestLab or nearestLab <> artifactsLabs [ i ] then
18391: LD_VAR 0 5
18395: NOT
18396: PUSH
18397: LD_VAR 0 5
18401: PUSH
18402: LD_EXP 69
18406: PUSH
18407: LD_VAR 0 1
18411: ARRAY
18412: NONEQUAL
18413: OR
18414: IFFALSE 18519
// begin SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , artifactsLabs [ i ] ) ;
18416: LD_INT 7
18418: PPUSH
18419: LD_EXP 70
18423: PUSH
18424: LD_VAR 0 1
18428: ARRAY
18429: PUSH
18430: LD_INT 3
18432: ARRAY
18433: PPUSH
18434: LD_INT 0
18436: PPUSH
18437: LD_EXP 69
18441: PUSH
18442: LD_VAR 0 1
18446: ARRAY
18447: PPUSH
18448: CALL_OW 468
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , artifactsLabs [ i ] ) ;
18452: LD_INT 7
18454: PPUSH
18455: LD_EXP 70
18459: PUSH
18460: LD_VAR 0 1
18464: ARRAY
18465: PUSH
18466: LD_INT 1
18468: ARRAY
18469: PPUSH
18470: LD_INT 0
18472: PPUSH
18473: LD_EXP 69
18477: PUSH
18478: LD_VAR 0 1
18482: ARRAY
18483: PPUSH
18484: CALL_OW 468
// if nearestLab then
18488: LD_VAR 0 5
18492: IFFALSE 18519
// artifactsLabs := Replace ( artifactsLabs , i , nearestLab ) ;
18494: LD_ADDR_EXP 69
18498: PUSH
18499: LD_EXP 69
18503: PPUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: LD_VAR 0 5
18513: PPUSH
18514: CALL_OW 1
18518: ST_TO_ADDR
// end ; if not nearestLab then
18519: LD_VAR 0 5
18523: NOT
18524: IFFALSE 18528
// continue ;
18526: GO 18086
// if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 then
18528: LD_VAR 0 5
18532: PPUSH
18533: LD_EXP 62
18537: PUSH
18538: LD_VAR 0 1
18542: ARRAY
18543: PUSH
18544: LD_INT 1
18546: ARRAY
18547: PPUSH
18548: LD_EXP 62
18552: PUSH
18553: LD_VAR 0 1
18557: ARRAY
18558: PUSH
18559: LD_INT 2
18561: ARRAY
18562: PPUSH
18563: CALL_OW 297
18567: PUSH
18568: LD_INT 8
18570: LESS
18571: IFFALSE 18768
// begin if not artifactsResearched [ i ] then
18573: LD_EXP 65
18577: PUSH
18578: LD_VAR 0 1
18582: ARRAY
18583: NOT
18584: IFFALSE 18665
// begin if BuildingStatus ( nearestLab ) = bs_idle then
18586: LD_VAR 0 5
18590: PPUSH
18591: CALL_OW 461
18595: PUSH
18596: LD_INT 2
18598: EQUAL
18599: IFFALSE 18633
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
18601: LD_INT 7
18603: PPUSH
18604: LD_EXP 70
18608: PUSH
18609: LD_VAR 0 1
18613: ARRAY
18614: PUSH
18615: LD_INT 3
18617: ARRAY
18618: PPUSH
18619: LD_INT 2
18621: PPUSH
18622: LD_VAR 0 5
18626: PPUSH
18627: CALL_OW 468
18631: GO 18663
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
18633: LD_INT 7
18635: PPUSH
18636: LD_EXP 70
18640: PUSH
18641: LD_VAR 0 1
18645: ARRAY
18646: PUSH
18647: LD_INT 3
18649: ARRAY
18650: PPUSH
18651: LD_INT 1
18653: PPUSH
18654: LD_VAR 0 5
18658: PPUSH
18659: CALL_OW 468
// end else
18663: GO 18766
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ i ] then
18665: LD_VAR 0 5
18669: PPUSH
18670: CALL_OW 461
18674: PUSH
18675: LD_INT 2
18677: EQUAL
18678: PUSH
18679: LD_EXP 71
18683: PUSH
18684: LD_VAR 0 1
18688: ARRAY
18689: AND
18690: IFFALSE 18736
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
18692: LD_INT 7
18694: PPUSH
18695: LD_EXP 70
18699: PUSH
18700: LD_VAR 0 1
18704: ARRAY
18705: PUSH
18706: LD_INT 1
18708: ARRAY
18709: PPUSH
18710: LD_EXP 70
18714: PUSH
18715: LD_VAR 0 1
18719: ARRAY
18720: PUSH
18721: LD_INT 2
18723: ARRAY
18724: PPUSH
18725: LD_VAR 0 5
18729: PPUSH
18730: CALL_OW 468
18734: GO 18766
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
18736: LD_INT 7
18738: PPUSH
18739: LD_EXP 70
18743: PUSH
18744: LD_VAR 0 1
18748: ARRAY
18749: PUSH
18750: LD_INT 1
18752: ARRAY
18753: PPUSH
18754: LD_INT 1
18756: PPUSH
18757: LD_VAR 0 5
18761: PPUSH
18762: CALL_OW 468
// end else
18766: GO 18843
// begin if not artifactsResearched [ i ] then
18768: LD_EXP 65
18772: PUSH
18773: LD_VAR 0 1
18777: ARRAY
18778: NOT
18779: IFFALSE 18813
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , nearestLab ) else
18781: LD_INT 7
18783: PPUSH
18784: LD_EXP 70
18788: PUSH
18789: LD_VAR 0 1
18793: ARRAY
18794: PUSH
18795: LD_INT 3
18797: ARRAY
18798: PPUSH
18799: LD_INT 0
18801: PPUSH
18802: LD_VAR 0 5
18806: PPUSH
18807: CALL_OW 468
18811: GO 18843
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , nearestLab ) ;
18813: LD_INT 7
18815: PPUSH
18816: LD_EXP 70
18820: PUSH
18821: LD_VAR 0 1
18825: ARRAY
18826: PUSH
18827: LD_INT 1
18829: ARRAY
18830: PPUSH
18831: LD_INT 0
18833: PPUSH
18834: LD_VAR 0 5
18838: PPUSH
18839: CALL_OW 468
// end ; end else
18843: GO 18982
// begin if not artifactsLabs [ i ] then
18845: LD_EXP 69
18849: PUSH
18850: LD_VAR 0 1
18854: ARRAY
18855: NOT
18856: IFFALSE 18860
// continue ;
18858: GO 18086
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , artifactsLabs [ i ] ) ;
18860: LD_INT 7
18862: PPUSH
18863: LD_EXP 70
18867: PUSH
18868: LD_VAR 0 1
18872: ARRAY
18873: PUSH
18874: LD_INT 3
18876: ARRAY
18877: PPUSH
18878: LD_INT 0
18880: PPUSH
18881: LD_EXP 69
18885: PUSH
18886: LD_VAR 0 1
18890: ARRAY
18891: PPUSH
18892: CALL_OW 468
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , artifactsLabs [ i ] ) ;
18896: LD_INT 7
18898: PPUSH
18899: LD_EXP 70
18903: PUSH
18904: LD_VAR 0 1
18908: ARRAY
18909: PUSH
18910: LD_INT 1
18912: ARRAY
18913: PPUSH
18914: LD_INT 0
18916: PPUSH
18917: LD_EXP 69
18921: PUSH
18922: LD_VAR 0 1
18926: ARRAY
18927: PPUSH
18928: CALL_OW 468
// if artifactsLabsWorking [ i ] then
18932: LD_EXP 66
18936: PUSH
18937: LD_VAR 0 1
18941: ARRAY
18942: IFFALSE 18982
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , false ) ;
18944: LD_ADDR_EXP 66
18948: PUSH
18949: LD_EXP 66
18953: PPUSH
18954: LD_VAR 0 1
18958: PPUSH
18959: LD_INT 0
18961: PPUSH
18962: CALL_OW 1
18966: ST_TO_ADDR
// ComCancel ( artifactsLabs [ i ] ) ;
18967: LD_EXP 69
18971: PUSH
18972: LD_VAR 0 1
18976: ARRAY
18977: PPUSH
18978: CALL_OW 127
// end ; end ; end ;
18982: GO 18086
18984: POP
18985: POP
// end ;
18986: PPOPN 5
18988: END
// on ArtifactUsed ( side , icon , x , y ) do var i , lab , time , list , un ;
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
18993: PPUSH
18994: PPUSH
18995: PPUSH
// begin if icon = artifactsButtons [ 1 ] [ 3 ] then
18996: LD_VAR 0 2
19000: PUSH
19001: LD_EXP 70
19005: PUSH
19006: LD_INT 1
19008: ARRAY
19009: PUSH
19010: LD_INT 3
19012: ARRAY
19013: EQUAL
19014: IFFALSE 19137
// begin lab := artifactsLabs [ 1 ] ;
19016: LD_ADDR_VAR 0 6
19020: PUSH
19021: LD_EXP 69
19025: PUSH
19026: LD_INT 1
19028: ARRAY
19029: ST_TO_ADDR
// if not lab then
19030: LD_VAR 0 6
19034: NOT
19035: IFFALSE 19039
// exit ;
19037: GO 20117
// SetSpecResearch ( lab , artifactsResDifficulty [ 1 ] , true ) ;
19039: LD_VAR 0 6
19043: PPUSH
19044: LD_EXP 67
19048: PUSH
19049: LD_INT 1
19051: ARRAY
19052: PPUSH
19053: LD_INT 1
19055: PPUSH
19056: CALL_OW 486
// if artifactsResProgress [ 1 ] then
19060: LD_EXP 68
19064: PUSH
19065: LD_INT 1
19067: ARRAY
19068: IFFALSE 19088
// SetWorkingProgress ( lab , artifactsResProgress [ 1 ] ) ;
19070: LD_VAR 0 6
19074: PPUSH
19075: LD_EXP 68
19079: PUSH
19080: LD_INT 1
19082: ARRAY
19083: PPUSH
19084: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 1 , 1 ) ;
19088: LD_ADDR_EXP 66
19092: PUSH
19093: LD_EXP 66
19097: PPUSH
19098: LD_INT 1
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: CALL_OW 1
19108: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 1 ] [ 3 ] , art_no , lab ) ;
19109: LD_INT 7
19111: PPUSH
19112: LD_EXP 70
19116: PUSH
19117: LD_INT 1
19119: ARRAY
19120: PUSH
19121: LD_INT 3
19123: ARRAY
19124: PPUSH
19125: LD_INT 0
19127: PPUSH
19128: LD_VAR 0 6
19132: PPUSH
19133: CALL_OW 468
// end ; if icon = artifactsButtons [ 2 ] [ 3 ] then
19137: LD_VAR 0 2
19141: PUSH
19142: LD_EXP 70
19146: PUSH
19147: LD_INT 2
19149: ARRAY
19150: PUSH
19151: LD_INT 3
19153: ARRAY
19154: EQUAL
19155: IFFALSE 19278
// begin lab := artifactsLabs [ 2 ] ;
19157: LD_ADDR_VAR 0 6
19161: PUSH
19162: LD_EXP 69
19166: PUSH
19167: LD_INT 2
19169: ARRAY
19170: ST_TO_ADDR
// if not lab then
19171: LD_VAR 0 6
19175: NOT
19176: IFFALSE 19180
// exit ;
19178: GO 20117
// SetSpecResearch ( lab , artifactsResDifficulty [ 2 ] , true ) ;
19180: LD_VAR 0 6
19184: PPUSH
19185: LD_EXP 67
19189: PUSH
19190: LD_INT 2
19192: ARRAY
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 486
// if artifactsResProgress [ 2 ] then
19201: LD_EXP 68
19205: PUSH
19206: LD_INT 2
19208: ARRAY
19209: IFFALSE 19229
// SetWorkingProgress ( lab , artifactsResProgress [ 2 ] ) ;
19211: LD_VAR 0 6
19215: PPUSH
19216: LD_EXP 68
19220: PUSH
19221: LD_INT 2
19223: ARRAY
19224: PPUSH
19225: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 2 , 1 ) ;
19229: LD_ADDR_EXP 66
19233: PUSH
19234: LD_EXP 66
19238: PPUSH
19239: LD_INT 2
19241: PPUSH
19242: LD_INT 1
19244: PPUSH
19245: CALL_OW 1
19249: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 2 ] [ 3 ] , art_no , lab ) ;
19250: LD_INT 7
19252: PPUSH
19253: LD_EXP 70
19257: PUSH
19258: LD_INT 2
19260: ARRAY
19261: PUSH
19262: LD_INT 3
19264: ARRAY
19265: PPUSH
19266: LD_INT 0
19268: PPUSH
19269: LD_VAR 0 6
19273: PPUSH
19274: CALL_OW 468
// end ; if icon = artifactsButtons [ 3 ] [ 3 ] then
19278: LD_VAR 0 2
19282: PUSH
19283: LD_EXP 70
19287: PUSH
19288: LD_INT 3
19290: ARRAY
19291: PUSH
19292: LD_INT 3
19294: ARRAY
19295: EQUAL
19296: IFFALSE 19419
// begin lab := artifactsLabs [ 3 ] ;
19298: LD_ADDR_VAR 0 6
19302: PUSH
19303: LD_EXP 69
19307: PUSH
19308: LD_INT 3
19310: ARRAY
19311: ST_TO_ADDR
// if not lab then
19312: LD_VAR 0 6
19316: NOT
19317: IFFALSE 19321
// exit ;
19319: GO 20117
// SetSpecResearch ( lab , artifactsResDifficulty [ 3 ] , true ) ;
19321: LD_VAR 0 6
19325: PPUSH
19326: LD_EXP 67
19330: PUSH
19331: LD_INT 3
19333: ARRAY
19334: PPUSH
19335: LD_INT 1
19337: PPUSH
19338: CALL_OW 486
// if artifactsResProgress [ 3 ] then
19342: LD_EXP 68
19346: PUSH
19347: LD_INT 3
19349: ARRAY
19350: IFFALSE 19370
// SetWorkingProgress ( lab , artifactsResProgress [ 3 ] ) ;
19352: LD_VAR 0 6
19356: PPUSH
19357: LD_EXP 68
19361: PUSH
19362: LD_INT 3
19364: ARRAY
19365: PPUSH
19366: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 3 , 1 ) ;
19370: LD_ADDR_EXP 66
19374: PUSH
19375: LD_EXP 66
19379: PPUSH
19380: LD_INT 3
19382: PPUSH
19383: LD_INT 1
19385: PPUSH
19386: CALL_OW 1
19390: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 3 ] [ 3 ] , art_no , lab ) ;
19391: LD_INT 7
19393: PPUSH
19394: LD_EXP 70
19398: PUSH
19399: LD_INT 3
19401: ARRAY
19402: PUSH
19403: LD_INT 3
19405: ARRAY
19406: PPUSH
19407: LD_INT 0
19409: PPUSH
19410: LD_VAR 0 6
19414: PPUSH
19415: CALL_OW 468
// end ; if icon = artifactsButtons [ 1 ] [ 1 ] then
19419: LD_VAR 0 2
19423: PUSH
19424: LD_EXP 70
19428: PUSH
19429: LD_INT 1
19431: ARRAY
19432: PUSH
19433: LD_INT 1
19435: ARRAY
19436: EQUAL
19437: IFFALSE 19595
// begin lab := artifactsLabs [ 1 ] ;
19439: LD_ADDR_VAR 0 6
19443: PUSH
19444: LD_EXP 69
19448: PUSH
19449: LD_INT 1
19451: ARRAY
19452: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
19453: LD_VAR 0 6
19457: PPUSH
19458: CALL_OW 274
19462: PPUSH
19463: CALL 86730 0 1
19467: PUSH
19468: LD_INT 3
19470: ARRAY
19471: PUSH
19472: LD_EXP 64
19476: PUSH
19477: LD_INT 1
19479: ARRAY
19480: LESS
19481: IFFALSE 19495
// begin HintSpec ( ArtifactCost , 2 ) ;
19483: LD_STRING ArtifactCost
19485: PPUSH
19486: LD_INT 2
19488: PPUSH
19489: CALL_OW 338
// exit ;
19493: GO 20117
// end ; artifactsReady := Replace ( artifactsReady , 1 , false ) ;
19495: LD_ADDR_EXP 71
19499: PUSH
19500: LD_EXP 71
19504: PPUSH
19505: LD_INT 1
19507: PPUSH
19508: LD_INT 0
19510: PPUSH
19511: CALL_OW 1
19515: ST_TO_ADDR
// PlaceSeeing ( x , y , 7 , - 12 ) ;
19516: LD_VAR 0 3
19520: PPUSH
19521: LD_VAR 0 4
19525: PPUSH
19526: LD_INT 7
19528: PPUSH
19529: LD_INT 12
19531: NEG
19532: PPUSH
19533: CALL_OW 330
// wait ( 0 0$30 ) ;
19537: LD_INT 1050
19539: PPUSH
19540: CALL_OW 67
// RemoveSeeing ( x , y , 7 ) ;
19544: LD_VAR 0 3
19548: PPUSH
19549: LD_VAR 0 4
19553: PPUSH
19554: LD_INT 7
19556: PPUSH
19557: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
19561: LD_EXP 63
19565: PUSH
19566: LD_INT 1
19568: ARRAY
19569: PPUSH
19570: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , 1 , true ) ;
19574: LD_ADDR_EXP 71
19578: PUSH
19579: LD_EXP 71
19583: PPUSH
19584: LD_INT 1
19586: PPUSH
19587: LD_INT 1
19589: PPUSH
19590: CALL_OW 1
19594: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
19595: LD_VAR 0 2
19599: PUSH
19600: LD_EXP 70
19604: PUSH
19605: LD_INT 2
19607: ARRAY
19608: PUSH
19609: LD_INT 1
19611: ARRAY
19612: EQUAL
19613: IFFALSE 19850
// begin lab := artifactsLabs [ 2 ] ;
19615: LD_ADDR_VAR 0 6
19619: PUSH
19620: LD_EXP 69
19624: PUSH
19625: LD_INT 2
19627: ARRAY
19628: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_btype , b_ext_siberium ] ] ] ) then
19629: LD_VAR 0 3
19633: PUSH
19634: LD_INT 81
19636: PUSH
19637: LD_INT 7
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 32
19649: PUSH
19650: LD_INT 3
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 30
19659: PUSH
19660: LD_INT 28
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 30
19669: PUSH
19670: LD_INT 30
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 35
19679: PUSH
19680: LD_INT 49
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 34
19689: PUSH
19690: LD_INT 49
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 30
19699: PUSH
19700: LD_INT 21
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: IN
19725: NOT
19726: IFFALSE 19730
// exit ;
19728: GO 20117
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
19730: LD_VAR 0 6
19734: PPUSH
19735: CALL_OW 274
19739: PPUSH
19740: CALL 86730 0 1
19744: PUSH
19745: LD_INT 3
19747: ARRAY
19748: PUSH
19749: LD_EXP 64
19753: PUSH
19754: LD_INT 2
19756: ARRAY
19757: LESS
19758: IFFALSE 19772
// begin HintSpec ( ArtifactCost , 2 ) ;
19760: LD_STRING ArtifactCost
19762: PPUSH
19763: LD_INT 2
19765: PPUSH
19766: CALL_OW 338
// exit ;
19770: GO 20117
// end ; artifactsReady := Replace ( artifactsReady , 2 , false ) ;
19772: LD_ADDR_EXP 71
19776: PUSH
19777: LD_EXP 71
19781: PPUSH
19782: LD_INT 2
19784: PPUSH
19785: LD_INT 0
19787: PPUSH
19788: CALL_OW 1
19792: ST_TO_ADDR
// KillUnit ( x ) ;
19793: LD_VAR 0 3
19797: PPUSH
19798: CALL_OW 66
// artifactDestroyCounter := artifactDestroyCounter + 1 ;
19802: LD_ADDR_EXP 16
19806: PUSH
19807: LD_EXP 16
19811: PUSH
19812: LD_INT 1
19814: PLUS
19815: ST_TO_ADDR
// wait ( artifactsRecharge [ 2 ] ) ;
19816: LD_EXP 63
19820: PUSH
19821: LD_INT 2
19823: ARRAY
19824: PPUSH
19825: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , 2 , true ) ;
19829: LD_ADDR_EXP 71
19833: PUSH
19834: LD_EXP 71
19838: PPUSH
19839: LD_INT 2
19841: PPUSH
19842: LD_INT 1
19844: PPUSH
19845: CALL_OW 1
19849: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
19850: LD_VAR 0 2
19854: PUSH
19855: LD_EXP 70
19859: PUSH
19860: LD_INT 3
19862: ARRAY
19863: PUSH
19864: LD_INT 1
19866: ARRAY
19867: EQUAL
19868: IFFALSE 20117
// begin lab := artifactsLabs [ 3 ] ;
19870: LD_ADDR_VAR 0 6
19874: PUSH
19875: LD_EXP 69
19879: PUSH
19880: LD_INT 3
19882: ARRAY
19883: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 3 ] then
19884: LD_VAR 0 6
19888: PPUSH
19889: CALL_OW 274
19893: PPUSH
19894: CALL 86730 0 1
19898: PUSH
19899: LD_INT 3
19901: ARRAY
19902: PUSH
19903: LD_EXP 64
19907: PUSH
19908: LD_INT 3
19910: ARRAY
19911: LESS
19912: IFFALSE 19926
// begin HintSpec ( ArtifactCost , 2 ) ;
19914: LD_STRING ArtifactCost
19916: PPUSH
19917: LD_INT 2
19919: PPUSH
19920: CALL_OW 338
// exit ;
19924: GO 20117
// end ; SetAreaMapShow ( teleportArea , 1 ) ;
19926: LD_INT 37
19928: PPUSH
19929: LD_INT 1
19931: PPUSH
19932: CALL_OW 424
// time := 0 0$30 ;
19936: LD_ADDR_VAR 0 7
19940: PUSH
19941: LD_INT 1050
19943: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , 3 , false ) ;
19944: LD_ADDR_EXP 71
19948: PUSH
19949: LD_EXP 71
19953: PPUSH
19954: LD_INT 3
19956: PPUSH
19957: LD_INT 0
19959: PPUSH
19960: CALL_OW 1
19964: ST_TO_ADDR
// repeat display_strings := [ #Am15a-1 , time ] ;
19965: LD_ADDR_OWVAR 47
19969: PUSH
19970: LD_STRING #Am15a-1
19972: PUSH
19973: LD_VAR 0 7
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19982: LD_INT 35
19984: PPUSH
19985: CALL_OW 67
// time := time - 0 0$1 ;
19989: LD_ADDR_VAR 0 7
19993: PUSH
19994: LD_VAR 0 7
19998: PUSH
19999: LD_INT 35
20001: MINUS
20002: ST_TO_ADDR
// until time = 0 0$00 ;
20003: LD_VAR 0 7
20007: PUSH
20008: LD_INT 0
20010: EQUAL
20011: IFFALSE 19965
// display_strings :=  ;
20013: LD_ADDR_OWVAR 47
20017: PUSH
20018: LD_STRING 
20020: ST_TO_ADDR
// SetAreaMapShow ( teleportArea , 0 ) ;
20021: LD_INT 37
20023: PPUSH
20024: LD_INT 0
20026: PPUSH
20027: CALL_OW 424
// list := FilterUnitsInArea ( teleportArea , [ f_not , [ f_type , unit_building ] ] ) ;
20031: LD_ADDR_VAR 0 8
20035: PUSH
20036: LD_INT 37
20038: PPUSH
20039: LD_INT 3
20041: PUSH
20042: LD_INT 21
20044: PUSH
20045: LD_INT 3
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PPUSH
20056: CALL_OW 70
20060: ST_TO_ADDR
// CenterOnXY ( x , y ) ;
20061: LD_VAR 0 3
20065: PPUSH
20066: LD_VAR 0 4
20070: PPUSH
20071: CALL_OW 84
// for un in list do
20075: LD_ADDR_VAR 0 9
20079: PUSH
20080: LD_VAR 0 8
20084: PUSH
20085: FOR_IN
20086: IFFALSE 20115
// TeleportUnit ( un , x , y , 12 , true ) ;
20088: LD_VAR 0 9
20092: PPUSH
20093: LD_VAR 0 3
20097: PPUSH
20098: LD_VAR 0 4
20102: PPUSH
20103: LD_INT 12
20105: PPUSH
20106: LD_INT 1
20108: PPUSH
20109: CALL_OW 483
20113: GO 20085
20115: POP
20116: POP
// end ; end ;
20117: PPOPN 9
20119: END
// on SpecResearchCancel ( lab , progress ) do var i , labNum ;
20120: LD_INT 0
20122: PPUSH
20123: PPUSH
// begin labNum := 0 ;
20124: LD_ADDR_VAR 0 4
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// for i = 1 to artifactsLabs do
20132: LD_ADDR_VAR 0 3
20136: PUSH
20137: DOUBLE
20138: LD_INT 1
20140: DEC
20141: ST_TO_ADDR
20142: LD_EXP 69
20146: PUSH
20147: FOR_TO
20148: IFFALSE 20182
// if artifactsLabs [ i ] = lab then
20150: LD_EXP 69
20154: PUSH
20155: LD_VAR 0 3
20159: ARRAY
20160: PUSH
20161: LD_VAR 0 1
20165: EQUAL
20166: IFFALSE 20180
// begin labNum := i ;
20168: LD_ADDR_VAR 0 4
20172: PUSH
20173: LD_VAR 0 3
20177: ST_TO_ADDR
// break ;
20178: GO 20182
// end ;
20180: GO 20147
20182: POP
20183: POP
// if not labNum then
20184: LD_VAR 0 4
20188: NOT
20189: IFFALSE 20193
// exit ;
20191: GO 20271
// SetArtifactUse ( 7 , artifactsButtons [ labNum ] [ 3 ] , art_instant , lab ) ;
20193: LD_INT 7
20195: PPUSH
20196: LD_EXP 70
20200: PUSH
20201: LD_VAR 0 4
20205: ARRAY
20206: PUSH
20207: LD_INT 3
20209: ARRAY
20210: PPUSH
20211: LD_INT 2
20213: PPUSH
20214: LD_VAR 0 1
20218: PPUSH
20219: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , labNum , progress ) ;
20223: LD_ADDR_EXP 68
20227: PUSH
20228: LD_EXP 68
20232: PPUSH
20233: LD_VAR 0 4
20237: PPUSH
20238: LD_VAR 0 2
20242: PPUSH
20243: CALL_OW 1
20247: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , labNum , 0 ) ;
20248: LD_ADDR_EXP 66
20252: PUSH
20253: LD_EXP 66
20257: PPUSH
20258: LD_VAR 0 4
20262: PPUSH
20263: LD_INT 0
20265: PPUSH
20266: CALL_OW 1
20270: ST_TO_ADDR
// end ;
20271: PPOPN 4
20273: END
// on SpecResearchComplete ( lab ) do var i , labNum ;
20274: LD_INT 0
20276: PPUSH
20277: PPUSH
// begin labNum := 0 ;
20278: LD_ADDR_VAR 0 3
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// for i = 1 to artifactsLabs do
20286: LD_ADDR_VAR 0 2
20290: PUSH
20291: DOUBLE
20292: LD_INT 1
20294: DEC
20295: ST_TO_ADDR
20296: LD_EXP 69
20300: PUSH
20301: FOR_TO
20302: IFFALSE 20336
// if artifactsLabs [ i ] = lab then
20304: LD_EXP 69
20308: PUSH
20309: LD_VAR 0 2
20313: ARRAY
20314: PUSH
20315: LD_VAR 0 1
20319: EQUAL
20320: IFFALSE 20334
// begin labNum := i ;
20322: LD_ADDR_VAR 0 3
20326: PUSH
20327: LD_VAR 0 2
20331: ST_TO_ADDR
// break ;
20332: GO 20336
// end ;
20334: GO 20301
20336: POP
20337: POP
// if not labNum then
20338: LD_VAR 0 3
20342: NOT
20343: IFFALSE 20347
// exit ;
20345: GO 20509
// SetArtifactUse ( 7 , artifactsButtons [ labNum ] [ 3 ] , art_no , lab ) ;
20347: LD_INT 7
20349: PPUSH
20350: LD_EXP 70
20354: PUSH
20355: LD_VAR 0 3
20359: ARRAY
20360: PUSH
20361: LD_INT 3
20363: ARRAY
20364: PPUSH
20365: LD_INT 0
20367: PPUSH
20368: LD_VAR 0 1
20372: PPUSH
20373: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , labNum , true ) ;
20377: LD_ADDR_EXP 65
20381: PUSH
20382: LD_EXP 65
20386: PPUSH
20387: LD_VAR 0 3
20391: PPUSH
20392: LD_INT 1
20394: PPUSH
20395: CALL_OW 1
20399: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , labNum , true ) ;
20400: LD_ADDR_EXP 71
20404: PUSH
20405: LD_EXP 71
20409: PPUSH
20410: LD_VAR 0 3
20414: PPUSH
20415: LD_INT 1
20417: PPUSH
20418: CALL_OW 1
20422: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , labNum , false ) ;
20423: LD_ADDR_EXP 66
20427: PUSH
20428: LD_EXP 66
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: LD_INT 0
20440: PPUSH
20441: CALL_OW 1
20445: ST_TO_ADDR
// case labNum of 1 :
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 1
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20470
20459: POP
// artifactIResearched := true ; 2 :
20460: LD_ADDR_EXP 12
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
20468: GO 20509
20470: LD_INT 2
20472: DOUBLE
20473: EQUAL
20474: IFTRUE 20478
20476: GO 20489
20478: POP
// artifactIIResearched := true ; 3 :
20479: LD_ADDR_EXP 13
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
20487: GO 20509
20489: LD_INT 3
20491: DOUBLE
20492: EQUAL
20493: IFTRUE 20497
20495: GO 20508
20497: POP
// artifactIIIResearched := true ; end ;
20498: LD_ADDR_EXP 14
20502: PUSH
20503: LD_INT 1
20505: ST_TO_ADDR
20506: GO 20509
20508: POP
// end ; end_of_file
20509: PPOPN 3
20511: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
20512: GO 20514
20514: DISABLE
// begin ru_radar := 98 ;
20515: LD_ADDR_EXP 72
20519: PUSH
20520: LD_INT 98
20522: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20523: LD_ADDR_EXP 73
20527: PUSH
20528: LD_INT 89
20530: ST_TO_ADDR
// us_hack := 99 ;
20531: LD_ADDR_EXP 74
20535: PUSH
20536: LD_INT 99
20538: ST_TO_ADDR
// us_artillery := 97 ;
20539: LD_ADDR_EXP 75
20543: PUSH
20544: LD_INT 97
20546: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20547: LD_ADDR_EXP 76
20551: PUSH
20552: LD_INT 91
20554: ST_TO_ADDR
// tech_Artillery := 80 ;
20555: LD_ADDR_EXP 77
20559: PUSH
20560: LD_INT 80
20562: ST_TO_ADDR
// tech_RadMat := 81 ;
20563: LD_ADDR_EXP 78
20567: PUSH
20568: LD_INT 81
20570: ST_TO_ADDR
// tech_BasicTools := 82 ;
20571: LD_ADDR_EXP 79
20575: PUSH
20576: LD_INT 82
20578: ST_TO_ADDR
// tech_Cargo := 83 ;
20579: LD_ADDR_EXP 80
20583: PUSH
20584: LD_INT 83
20586: ST_TO_ADDR
// tech_Track := 84 ;
20587: LD_ADDR_EXP 81
20591: PUSH
20592: LD_INT 84
20594: ST_TO_ADDR
// tech_Crane := 85 ;
20595: LD_ADDR_EXP 82
20599: PUSH
20600: LD_INT 85
20602: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20603: LD_ADDR_EXP 83
20607: PUSH
20608: LD_INT 86
20610: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20611: LD_ADDR_EXP 84
20615: PUSH
20616: LD_INT 87
20618: ST_TO_ADDR
// end ; end_of_file
20619: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
20620: LD_INT 0
20622: PPUSH
20623: PPUSH
// skirmish := false ;
20624: LD_ADDR_EXP 85
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// debug_mc := false ;
20632: LD_ADDR_EXP 86
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// mc_bases := [ ] ;
20640: LD_ADDR_EXP 87
20644: PUSH
20645: EMPTY
20646: ST_TO_ADDR
// mc_sides := [ ] ;
20647: LD_ADDR_EXP 113
20651: PUSH
20652: EMPTY
20653: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
20654: LD_ADDR_EXP 88
20658: PUSH
20659: EMPTY
20660: ST_TO_ADDR
// mc_building_repairs := [ ] ;
20661: LD_ADDR_EXP 89
20665: PUSH
20666: EMPTY
20667: ST_TO_ADDR
// mc_need_heal := [ ] ;
20668: LD_ADDR_EXP 90
20672: PUSH
20673: EMPTY
20674: ST_TO_ADDR
// mc_healers := [ ] ;
20675: LD_ADDR_EXP 91
20679: PUSH
20680: EMPTY
20681: ST_TO_ADDR
// mc_build_list := [ ] ;
20682: LD_ADDR_EXP 92
20686: PUSH
20687: EMPTY
20688: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
20689: LD_ADDR_EXP 119
20693: PUSH
20694: EMPTY
20695: ST_TO_ADDR
// mc_builders := [ ] ;
20696: LD_ADDR_EXP 93
20700: PUSH
20701: EMPTY
20702: ST_TO_ADDR
// mc_construct_list := [ ] ;
20703: LD_ADDR_EXP 94
20707: PUSH
20708: EMPTY
20709: ST_TO_ADDR
// mc_turret_list := [ ] ;
20710: LD_ADDR_EXP 95
20714: PUSH
20715: EMPTY
20716: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
20717: LD_ADDR_EXP 96
20721: PUSH
20722: EMPTY
20723: ST_TO_ADDR
// mc_miners := [ ] ;
20724: LD_ADDR_EXP 101
20728: PUSH
20729: EMPTY
20730: ST_TO_ADDR
// mc_mines := [ ] ;
20731: LD_ADDR_EXP 100
20735: PUSH
20736: EMPTY
20737: ST_TO_ADDR
// mc_minefields := [ ] ;
20738: LD_ADDR_EXP 102
20742: PUSH
20743: EMPTY
20744: ST_TO_ADDR
// mc_crates := [ ] ;
20745: LD_ADDR_EXP 103
20749: PUSH
20750: EMPTY
20751: ST_TO_ADDR
// mc_crates_collector := [ ] ;
20752: LD_ADDR_EXP 104
20756: PUSH
20757: EMPTY
20758: ST_TO_ADDR
// mc_crates_area := [ ] ;
20759: LD_ADDR_EXP 105
20763: PUSH
20764: EMPTY
20765: ST_TO_ADDR
// mc_vehicles := [ ] ;
20766: LD_ADDR_EXP 106
20770: PUSH
20771: EMPTY
20772: ST_TO_ADDR
// mc_attack := [ ] ;
20773: LD_ADDR_EXP 107
20777: PUSH
20778: EMPTY
20779: ST_TO_ADDR
// mc_produce := [ ] ;
20780: LD_ADDR_EXP 108
20784: PUSH
20785: EMPTY
20786: ST_TO_ADDR
// mc_defender := [ ] ;
20787: LD_ADDR_EXP 109
20791: PUSH
20792: EMPTY
20793: ST_TO_ADDR
// mc_parking := [ ] ;
20794: LD_ADDR_EXP 111
20798: PUSH
20799: EMPTY
20800: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
20801: LD_ADDR_EXP 97
20805: PUSH
20806: EMPTY
20807: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
20808: LD_ADDR_EXP 99
20812: PUSH
20813: EMPTY
20814: ST_TO_ADDR
// mc_scan := [ ] ;
20815: LD_ADDR_EXP 110
20819: PUSH
20820: EMPTY
20821: ST_TO_ADDR
// mc_scan_area := [ ] ;
20822: LD_ADDR_EXP 112
20826: PUSH
20827: EMPTY
20828: ST_TO_ADDR
// mc_tech := [ ] ;
20829: LD_ADDR_EXP 114
20833: PUSH
20834: EMPTY
20835: ST_TO_ADDR
// mc_class := [ ] ;
20836: LD_ADDR_EXP 128
20840: PUSH
20841: EMPTY
20842: ST_TO_ADDR
// mc_class_case_use := [ ] ;
20843: LD_ADDR_EXP 129
20847: PUSH
20848: EMPTY
20849: ST_TO_ADDR
// end ;
20850: LD_VAR 0 1
20854: RET
// export function MC_Kill ( base ) ; begin
20855: LD_INT 0
20857: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
20858: LD_ADDR_EXP 87
20862: PUSH
20863: LD_EXP 87
20867: PPUSH
20868: LD_VAR 0 1
20872: PPUSH
20873: EMPTY
20874: PPUSH
20875: CALL_OW 1
20879: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
20880: LD_ADDR_EXP 88
20884: PUSH
20885: LD_EXP 88
20889: PPUSH
20890: LD_VAR 0 1
20894: PPUSH
20895: EMPTY
20896: PPUSH
20897: CALL_OW 1
20901: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
20902: LD_ADDR_EXP 89
20906: PUSH
20907: LD_EXP 89
20911: PPUSH
20912: LD_VAR 0 1
20916: PPUSH
20917: EMPTY
20918: PPUSH
20919: CALL_OW 1
20923: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
20924: LD_ADDR_EXP 90
20928: PUSH
20929: LD_EXP 90
20933: PPUSH
20934: LD_VAR 0 1
20938: PPUSH
20939: EMPTY
20940: PPUSH
20941: CALL_OW 1
20945: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
20946: LD_ADDR_EXP 91
20950: PUSH
20951: LD_EXP 91
20955: PPUSH
20956: LD_VAR 0 1
20960: PPUSH
20961: EMPTY
20962: PPUSH
20963: CALL_OW 1
20967: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
20968: LD_ADDR_EXP 92
20972: PUSH
20973: LD_EXP 92
20977: PPUSH
20978: LD_VAR 0 1
20982: PPUSH
20983: EMPTY
20984: PPUSH
20985: CALL_OW 1
20989: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
20990: LD_ADDR_EXP 93
20994: PUSH
20995: LD_EXP 93
20999: PPUSH
21000: LD_VAR 0 1
21004: PPUSH
21005: EMPTY
21006: PPUSH
21007: CALL_OW 1
21011: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
21012: LD_ADDR_EXP 94
21016: PUSH
21017: LD_EXP 94
21021: PPUSH
21022: LD_VAR 0 1
21026: PPUSH
21027: EMPTY
21028: PPUSH
21029: CALL_OW 1
21033: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
21034: LD_ADDR_EXP 95
21038: PUSH
21039: LD_EXP 95
21043: PPUSH
21044: LD_VAR 0 1
21048: PPUSH
21049: EMPTY
21050: PPUSH
21051: CALL_OW 1
21055: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
21056: LD_ADDR_EXP 96
21060: PUSH
21061: LD_EXP 96
21065: PPUSH
21066: LD_VAR 0 1
21070: PPUSH
21071: EMPTY
21072: PPUSH
21073: CALL_OW 1
21077: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
21078: LD_ADDR_EXP 97
21082: PUSH
21083: LD_EXP 97
21087: PPUSH
21088: LD_VAR 0 1
21092: PPUSH
21093: EMPTY
21094: PPUSH
21095: CALL_OW 1
21099: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
21100: LD_ADDR_EXP 98
21104: PUSH
21105: LD_EXP 98
21109: PPUSH
21110: LD_VAR 0 1
21114: PPUSH
21115: LD_INT 0
21117: PPUSH
21118: CALL_OW 1
21122: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
21123: LD_ADDR_EXP 99
21127: PUSH
21128: LD_EXP 99
21132: PPUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: EMPTY
21139: PPUSH
21140: CALL_OW 1
21144: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
21145: LD_ADDR_EXP 100
21149: PUSH
21150: LD_EXP 100
21154: PPUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: EMPTY
21161: PPUSH
21162: CALL_OW 1
21166: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
21167: LD_ADDR_EXP 101
21171: PUSH
21172: LD_EXP 101
21176: PPUSH
21177: LD_VAR 0 1
21181: PPUSH
21182: EMPTY
21183: PPUSH
21184: CALL_OW 1
21188: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
21189: LD_ADDR_EXP 102
21193: PUSH
21194: LD_EXP 102
21198: PPUSH
21199: LD_VAR 0 1
21203: PPUSH
21204: EMPTY
21205: PPUSH
21206: CALL_OW 1
21210: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
21211: LD_ADDR_EXP 103
21215: PUSH
21216: LD_EXP 103
21220: PPUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: EMPTY
21227: PPUSH
21228: CALL_OW 1
21232: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
21233: LD_ADDR_EXP 104
21237: PUSH
21238: LD_EXP 104
21242: PPUSH
21243: LD_VAR 0 1
21247: PPUSH
21248: EMPTY
21249: PPUSH
21250: CALL_OW 1
21254: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
21255: LD_ADDR_EXP 105
21259: PUSH
21260: LD_EXP 105
21264: PPUSH
21265: LD_VAR 0 1
21269: PPUSH
21270: EMPTY
21271: PPUSH
21272: CALL_OW 1
21276: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
21277: LD_ADDR_EXP 106
21281: PUSH
21282: LD_EXP 106
21286: PPUSH
21287: LD_VAR 0 1
21291: PPUSH
21292: EMPTY
21293: PPUSH
21294: CALL_OW 1
21298: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
21299: LD_ADDR_EXP 107
21303: PUSH
21304: LD_EXP 107
21308: PPUSH
21309: LD_VAR 0 1
21313: PPUSH
21314: EMPTY
21315: PPUSH
21316: CALL_OW 1
21320: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
21321: LD_ADDR_EXP 108
21325: PUSH
21326: LD_EXP 108
21330: PPUSH
21331: LD_VAR 0 1
21335: PPUSH
21336: EMPTY
21337: PPUSH
21338: CALL_OW 1
21342: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
21343: LD_ADDR_EXP 109
21347: PUSH
21348: LD_EXP 109
21352: PPUSH
21353: LD_VAR 0 1
21357: PPUSH
21358: EMPTY
21359: PPUSH
21360: CALL_OW 1
21364: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
21365: LD_ADDR_EXP 110
21369: PUSH
21370: LD_EXP 110
21374: PPUSH
21375: LD_VAR 0 1
21379: PPUSH
21380: EMPTY
21381: PPUSH
21382: CALL_OW 1
21386: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
21387: LD_ADDR_EXP 111
21391: PUSH
21392: LD_EXP 111
21396: PPUSH
21397: LD_VAR 0 1
21401: PPUSH
21402: EMPTY
21403: PPUSH
21404: CALL_OW 1
21408: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
21409: LD_ADDR_EXP 112
21413: PUSH
21414: LD_EXP 112
21418: PPUSH
21419: LD_VAR 0 1
21423: PPUSH
21424: EMPTY
21425: PPUSH
21426: CALL_OW 1
21430: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
21431: LD_ADDR_EXP 114
21435: PUSH
21436: LD_EXP 114
21440: PPUSH
21441: LD_VAR 0 1
21445: PPUSH
21446: EMPTY
21447: PPUSH
21448: CALL_OW 1
21452: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
21453: LD_ADDR_EXP 116
21457: PUSH
21458: LD_EXP 116
21462: PPUSH
21463: LD_VAR 0 1
21467: PPUSH
21468: EMPTY
21469: PPUSH
21470: CALL_OW 1
21474: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
21475: LD_ADDR_EXP 117
21479: PUSH
21480: LD_EXP 117
21484: PPUSH
21485: LD_VAR 0 1
21489: PPUSH
21490: EMPTY
21491: PPUSH
21492: CALL_OW 1
21496: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
21497: LD_ADDR_EXP 118
21501: PUSH
21502: LD_EXP 118
21506: PPUSH
21507: LD_VAR 0 1
21511: PPUSH
21512: EMPTY
21513: PPUSH
21514: CALL_OW 1
21518: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
21519: LD_ADDR_EXP 119
21523: PUSH
21524: LD_EXP 119
21528: PPUSH
21529: LD_VAR 0 1
21533: PPUSH
21534: EMPTY
21535: PPUSH
21536: CALL_OW 1
21540: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
21541: LD_ADDR_EXP 120
21545: PUSH
21546: LD_EXP 120
21550: PPUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: EMPTY
21557: PPUSH
21558: CALL_OW 1
21562: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
21563: LD_ADDR_EXP 121
21567: PUSH
21568: LD_EXP 121
21572: PPUSH
21573: LD_VAR 0 1
21577: PPUSH
21578: EMPTY
21579: PPUSH
21580: CALL_OW 1
21584: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
21585: LD_ADDR_EXP 122
21589: PUSH
21590: LD_EXP 122
21594: PPUSH
21595: LD_VAR 0 1
21599: PPUSH
21600: EMPTY
21601: PPUSH
21602: CALL_OW 1
21606: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
21607: LD_ADDR_EXP 123
21611: PUSH
21612: LD_EXP 123
21616: PPUSH
21617: LD_VAR 0 1
21621: PPUSH
21622: EMPTY
21623: PPUSH
21624: CALL_OW 1
21628: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
21629: LD_ADDR_EXP 124
21633: PUSH
21634: LD_EXP 124
21638: PPUSH
21639: LD_VAR 0 1
21643: PPUSH
21644: EMPTY
21645: PPUSH
21646: CALL_OW 1
21650: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
21651: LD_ADDR_EXP 125
21655: PUSH
21656: LD_EXP 125
21660: PPUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: EMPTY
21667: PPUSH
21668: CALL_OW 1
21672: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
21673: LD_ADDR_EXP 126
21677: PUSH
21678: LD_EXP 126
21682: PPUSH
21683: LD_VAR 0 1
21687: PPUSH
21688: EMPTY
21689: PPUSH
21690: CALL_OW 1
21694: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
21695: LD_ADDR_EXP 127
21699: PUSH
21700: LD_EXP 127
21704: PPUSH
21705: LD_VAR 0 1
21709: PPUSH
21710: EMPTY
21711: PPUSH
21712: CALL_OW 1
21716: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
21717: LD_ADDR_EXP 128
21721: PUSH
21722: LD_EXP 128
21726: PPUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: EMPTY
21733: PPUSH
21734: CALL_OW 1
21738: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
21739: LD_ADDR_EXP 129
21743: PUSH
21744: LD_EXP 129
21748: PPUSH
21749: LD_VAR 0 1
21753: PPUSH
21754: LD_INT 0
21756: PPUSH
21757: CALL_OW 1
21761: ST_TO_ADDR
// end ;
21762: LD_VAR 0 2
21766: RET
// export function MC_Add ( side , units ) ; var base ; begin
21767: LD_INT 0
21769: PPUSH
21770: PPUSH
// base := mc_bases + 1 ;
21771: LD_ADDR_VAR 0 4
21775: PUSH
21776: LD_EXP 87
21780: PUSH
21781: LD_INT 1
21783: PLUS
21784: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
21785: LD_ADDR_EXP 113
21789: PUSH
21790: LD_EXP 113
21794: PPUSH
21795: LD_VAR 0 4
21799: PPUSH
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 1
21809: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
21810: LD_ADDR_EXP 87
21814: PUSH
21815: LD_EXP 87
21819: PPUSH
21820: LD_VAR 0 4
21824: PPUSH
21825: LD_VAR 0 2
21829: PPUSH
21830: CALL_OW 1
21834: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
21835: LD_ADDR_EXP 88
21839: PUSH
21840: LD_EXP 88
21844: PPUSH
21845: LD_VAR 0 4
21849: PPUSH
21850: EMPTY
21851: PPUSH
21852: CALL_OW 1
21856: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
21857: LD_ADDR_EXP 89
21861: PUSH
21862: LD_EXP 89
21866: PPUSH
21867: LD_VAR 0 4
21871: PPUSH
21872: EMPTY
21873: PPUSH
21874: CALL_OW 1
21878: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
21879: LD_ADDR_EXP 90
21883: PUSH
21884: LD_EXP 90
21888: PPUSH
21889: LD_VAR 0 4
21893: PPUSH
21894: EMPTY
21895: PPUSH
21896: CALL_OW 1
21900: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
21901: LD_ADDR_EXP 91
21905: PUSH
21906: LD_EXP 91
21910: PPUSH
21911: LD_VAR 0 4
21915: PPUSH
21916: EMPTY
21917: PPUSH
21918: CALL_OW 1
21922: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
21923: LD_ADDR_EXP 92
21927: PUSH
21928: LD_EXP 92
21932: PPUSH
21933: LD_VAR 0 4
21937: PPUSH
21938: EMPTY
21939: PPUSH
21940: CALL_OW 1
21944: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
21945: LD_ADDR_EXP 93
21949: PUSH
21950: LD_EXP 93
21954: PPUSH
21955: LD_VAR 0 4
21959: PPUSH
21960: EMPTY
21961: PPUSH
21962: CALL_OW 1
21966: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
21967: LD_ADDR_EXP 94
21971: PUSH
21972: LD_EXP 94
21976: PPUSH
21977: LD_VAR 0 4
21981: PPUSH
21982: EMPTY
21983: PPUSH
21984: CALL_OW 1
21988: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
21989: LD_ADDR_EXP 95
21993: PUSH
21994: LD_EXP 95
21998: PPUSH
21999: LD_VAR 0 4
22003: PPUSH
22004: EMPTY
22005: PPUSH
22006: CALL_OW 1
22010: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
22011: LD_ADDR_EXP 96
22015: PUSH
22016: LD_EXP 96
22020: PPUSH
22021: LD_VAR 0 4
22025: PPUSH
22026: EMPTY
22027: PPUSH
22028: CALL_OW 1
22032: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
22033: LD_ADDR_EXP 97
22037: PUSH
22038: LD_EXP 97
22042: PPUSH
22043: LD_VAR 0 4
22047: PPUSH
22048: EMPTY
22049: PPUSH
22050: CALL_OW 1
22054: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
22055: LD_ADDR_EXP 98
22059: PUSH
22060: LD_EXP 98
22064: PPUSH
22065: LD_VAR 0 4
22069: PPUSH
22070: LD_INT 0
22072: PPUSH
22073: CALL_OW 1
22077: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
22078: LD_ADDR_EXP 99
22082: PUSH
22083: LD_EXP 99
22087: PPUSH
22088: LD_VAR 0 4
22092: PPUSH
22093: EMPTY
22094: PPUSH
22095: CALL_OW 1
22099: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
22100: LD_ADDR_EXP 100
22104: PUSH
22105: LD_EXP 100
22109: PPUSH
22110: LD_VAR 0 4
22114: PPUSH
22115: EMPTY
22116: PPUSH
22117: CALL_OW 1
22121: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
22122: LD_ADDR_EXP 101
22126: PUSH
22127: LD_EXP 101
22131: PPUSH
22132: LD_VAR 0 4
22136: PPUSH
22137: EMPTY
22138: PPUSH
22139: CALL_OW 1
22143: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
22144: LD_ADDR_EXP 102
22148: PUSH
22149: LD_EXP 102
22153: PPUSH
22154: LD_VAR 0 4
22158: PPUSH
22159: EMPTY
22160: PPUSH
22161: CALL_OW 1
22165: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
22166: LD_ADDR_EXP 103
22170: PUSH
22171: LD_EXP 103
22175: PPUSH
22176: LD_VAR 0 4
22180: PPUSH
22181: EMPTY
22182: PPUSH
22183: CALL_OW 1
22187: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
22188: LD_ADDR_EXP 104
22192: PUSH
22193: LD_EXP 104
22197: PPUSH
22198: LD_VAR 0 4
22202: PPUSH
22203: EMPTY
22204: PPUSH
22205: CALL_OW 1
22209: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
22210: LD_ADDR_EXP 105
22214: PUSH
22215: LD_EXP 105
22219: PPUSH
22220: LD_VAR 0 4
22224: PPUSH
22225: EMPTY
22226: PPUSH
22227: CALL_OW 1
22231: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
22232: LD_ADDR_EXP 106
22236: PUSH
22237: LD_EXP 106
22241: PPUSH
22242: LD_VAR 0 4
22246: PPUSH
22247: EMPTY
22248: PPUSH
22249: CALL_OW 1
22253: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
22254: LD_ADDR_EXP 107
22258: PUSH
22259: LD_EXP 107
22263: PPUSH
22264: LD_VAR 0 4
22268: PPUSH
22269: EMPTY
22270: PPUSH
22271: CALL_OW 1
22275: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
22276: LD_ADDR_EXP 108
22280: PUSH
22281: LD_EXP 108
22285: PPUSH
22286: LD_VAR 0 4
22290: PPUSH
22291: EMPTY
22292: PPUSH
22293: CALL_OW 1
22297: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
22298: LD_ADDR_EXP 109
22302: PUSH
22303: LD_EXP 109
22307: PPUSH
22308: LD_VAR 0 4
22312: PPUSH
22313: EMPTY
22314: PPUSH
22315: CALL_OW 1
22319: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
22320: LD_ADDR_EXP 110
22324: PUSH
22325: LD_EXP 110
22329: PPUSH
22330: LD_VAR 0 4
22334: PPUSH
22335: EMPTY
22336: PPUSH
22337: CALL_OW 1
22341: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
22342: LD_ADDR_EXP 111
22346: PUSH
22347: LD_EXP 111
22351: PPUSH
22352: LD_VAR 0 4
22356: PPUSH
22357: EMPTY
22358: PPUSH
22359: CALL_OW 1
22363: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
22364: LD_ADDR_EXP 112
22368: PUSH
22369: LD_EXP 112
22373: PPUSH
22374: LD_VAR 0 4
22378: PPUSH
22379: EMPTY
22380: PPUSH
22381: CALL_OW 1
22385: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
22386: LD_ADDR_EXP 114
22390: PUSH
22391: LD_EXP 114
22395: PPUSH
22396: LD_VAR 0 4
22400: PPUSH
22401: EMPTY
22402: PPUSH
22403: CALL_OW 1
22407: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
22408: LD_ADDR_EXP 116
22412: PUSH
22413: LD_EXP 116
22417: PPUSH
22418: LD_VAR 0 4
22422: PPUSH
22423: EMPTY
22424: PPUSH
22425: CALL_OW 1
22429: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
22430: LD_ADDR_EXP 117
22434: PUSH
22435: LD_EXP 117
22439: PPUSH
22440: LD_VAR 0 4
22444: PPUSH
22445: EMPTY
22446: PPUSH
22447: CALL_OW 1
22451: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
22452: LD_ADDR_EXP 118
22456: PUSH
22457: LD_EXP 118
22461: PPUSH
22462: LD_VAR 0 4
22466: PPUSH
22467: EMPTY
22468: PPUSH
22469: CALL_OW 1
22473: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
22474: LD_ADDR_EXP 119
22478: PUSH
22479: LD_EXP 119
22483: PPUSH
22484: LD_VAR 0 4
22488: PPUSH
22489: EMPTY
22490: PPUSH
22491: CALL_OW 1
22495: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
22496: LD_ADDR_EXP 120
22500: PUSH
22501: LD_EXP 120
22505: PPUSH
22506: LD_VAR 0 4
22510: PPUSH
22511: EMPTY
22512: PPUSH
22513: CALL_OW 1
22517: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
22518: LD_ADDR_EXP 121
22522: PUSH
22523: LD_EXP 121
22527: PPUSH
22528: LD_VAR 0 4
22532: PPUSH
22533: EMPTY
22534: PPUSH
22535: CALL_OW 1
22539: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
22540: LD_ADDR_EXP 122
22544: PUSH
22545: LD_EXP 122
22549: PPUSH
22550: LD_VAR 0 4
22554: PPUSH
22555: EMPTY
22556: PPUSH
22557: CALL_OW 1
22561: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
22562: LD_ADDR_EXP 123
22566: PUSH
22567: LD_EXP 123
22571: PPUSH
22572: LD_VAR 0 4
22576: PPUSH
22577: EMPTY
22578: PPUSH
22579: CALL_OW 1
22583: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
22584: LD_ADDR_EXP 124
22588: PUSH
22589: LD_EXP 124
22593: PPUSH
22594: LD_VAR 0 4
22598: PPUSH
22599: EMPTY
22600: PPUSH
22601: CALL_OW 1
22605: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
22606: LD_ADDR_EXP 125
22610: PUSH
22611: LD_EXP 125
22615: PPUSH
22616: LD_VAR 0 4
22620: PPUSH
22621: EMPTY
22622: PPUSH
22623: CALL_OW 1
22627: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
22628: LD_ADDR_EXP 126
22632: PUSH
22633: LD_EXP 126
22637: PPUSH
22638: LD_VAR 0 4
22642: PPUSH
22643: EMPTY
22644: PPUSH
22645: CALL_OW 1
22649: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
22650: LD_ADDR_EXP 127
22654: PUSH
22655: LD_EXP 127
22659: PPUSH
22660: LD_VAR 0 4
22664: PPUSH
22665: EMPTY
22666: PPUSH
22667: CALL_OW 1
22671: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
22672: LD_ADDR_EXP 128
22676: PUSH
22677: LD_EXP 128
22681: PPUSH
22682: LD_VAR 0 4
22686: PPUSH
22687: EMPTY
22688: PPUSH
22689: CALL_OW 1
22693: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
22694: LD_ADDR_EXP 129
22698: PUSH
22699: LD_EXP 129
22703: PPUSH
22704: LD_VAR 0 4
22708: PPUSH
22709: LD_INT 0
22711: PPUSH
22712: CALL_OW 1
22716: ST_TO_ADDR
// result := base ;
22717: LD_ADDR_VAR 0 3
22721: PUSH
22722: LD_VAR 0 4
22726: ST_TO_ADDR
// end ;
22727: LD_VAR 0 3
22731: RET
// export function MC_Start ( ) ; var i ; begin
22732: LD_INT 0
22734: PPUSH
22735: PPUSH
// for i = 1 to mc_bases do
22736: LD_ADDR_VAR 0 2
22740: PUSH
22741: DOUBLE
22742: LD_INT 1
22744: DEC
22745: ST_TO_ADDR
22746: LD_EXP 87
22750: PUSH
22751: FOR_TO
22752: IFFALSE 23829
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
22754: LD_ADDR_EXP 87
22758: PUSH
22759: LD_EXP 87
22763: PPUSH
22764: LD_VAR 0 2
22768: PPUSH
22769: LD_EXP 87
22773: PUSH
22774: LD_VAR 0 2
22778: ARRAY
22779: PUSH
22780: LD_INT 0
22782: DIFF
22783: PPUSH
22784: CALL_OW 1
22788: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
22789: LD_ADDR_EXP 88
22793: PUSH
22794: LD_EXP 88
22798: PPUSH
22799: LD_VAR 0 2
22803: PPUSH
22804: EMPTY
22805: PPUSH
22806: CALL_OW 1
22810: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
22811: LD_ADDR_EXP 89
22815: PUSH
22816: LD_EXP 89
22820: PPUSH
22821: LD_VAR 0 2
22825: PPUSH
22826: EMPTY
22827: PPUSH
22828: CALL_OW 1
22832: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
22833: LD_ADDR_EXP 90
22837: PUSH
22838: LD_EXP 90
22842: PPUSH
22843: LD_VAR 0 2
22847: PPUSH
22848: EMPTY
22849: PPUSH
22850: CALL_OW 1
22854: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
22855: LD_ADDR_EXP 91
22859: PUSH
22860: LD_EXP 91
22864: PPUSH
22865: LD_VAR 0 2
22869: PPUSH
22870: EMPTY
22871: PUSH
22872: EMPTY
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PPUSH
22878: CALL_OW 1
22882: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
22883: LD_ADDR_EXP 92
22887: PUSH
22888: LD_EXP 92
22892: PPUSH
22893: LD_VAR 0 2
22897: PPUSH
22898: EMPTY
22899: PPUSH
22900: CALL_OW 1
22904: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
22905: LD_ADDR_EXP 119
22909: PUSH
22910: LD_EXP 119
22914: PPUSH
22915: LD_VAR 0 2
22919: PPUSH
22920: EMPTY
22921: PPUSH
22922: CALL_OW 1
22926: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
22927: LD_ADDR_EXP 93
22931: PUSH
22932: LD_EXP 93
22936: PPUSH
22937: LD_VAR 0 2
22941: PPUSH
22942: EMPTY
22943: PPUSH
22944: CALL_OW 1
22948: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
22949: LD_ADDR_EXP 94
22953: PUSH
22954: LD_EXP 94
22958: PPUSH
22959: LD_VAR 0 2
22963: PPUSH
22964: EMPTY
22965: PPUSH
22966: CALL_OW 1
22970: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
22971: LD_ADDR_EXP 95
22975: PUSH
22976: LD_EXP 95
22980: PPUSH
22981: LD_VAR 0 2
22985: PPUSH
22986: LD_EXP 87
22990: PUSH
22991: LD_VAR 0 2
22995: ARRAY
22996: PPUSH
22997: LD_INT 2
22999: PUSH
23000: LD_INT 30
23002: PUSH
23003: LD_INT 32
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 30
23012: PUSH
23013: LD_INT 33
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: LIST
23024: PPUSH
23025: CALL_OW 72
23029: PPUSH
23030: CALL_OW 1
23034: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
23035: LD_ADDR_EXP 96
23039: PUSH
23040: LD_EXP 96
23044: PPUSH
23045: LD_VAR 0 2
23049: PPUSH
23050: LD_EXP 87
23054: PUSH
23055: LD_VAR 0 2
23059: ARRAY
23060: PPUSH
23061: LD_INT 2
23063: PUSH
23064: LD_INT 30
23066: PUSH
23067: LD_INT 32
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 30
23076: PUSH
23077: LD_INT 31
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 58
23091: PUSH
23092: EMPTY
23093: LIST
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PPUSH
23099: CALL_OW 72
23103: PPUSH
23104: CALL_OW 1
23108: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
23109: LD_ADDR_EXP 97
23113: PUSH
23114: LD_EXP 97
23118: PPUSH
23119: LD_VAR 0 2
23123: PPUSH
23124: EMPTY
23125: PPUSH
23126: CALL_OW 1
23130: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
23131: LD_ADDR_EXP 101
23135: PUSH
23136: LD_EXP 101
23140: PPUSH
23141: LD_VAR 0 2
23145: PPUSH
23146: EMPTY
23147: PPUSH
23148: CALL_OW 1
23152: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
23153: LD_ADDR_EXP 100
23157: PUSH
23158: LD_EXP 100
23162: PPUSH
23163: LD_VAR 0 2
23167: PPUSH
23168: EMPTY
23169: PPUSH
23170: CALL_OW 1
23174: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
23175: LD_ADDR_EXP 102
23179: PUSH
23180: LD_EXP 102
23184: PPUSH
23185: LD_VAR 0 2
23189: PPUSH
23190: EMPTY
23191: PPUSH
23192: CALL_OW 1
23196: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
23197: LD_ADDR_EXP 103
23201: PUSH
23202: LD_EXP 103
23206: PPUSH
23207: LD_VAR 0 2
23211: PPUSH
23212: EMPTY
23213: PPUSH
23214: CALL_OW 1
23218: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
23219: LD_ADDR_EXP 104
23223: PUSH
23224: LD_EXP 104
23228: PPUSH
23229: LD_VAR 0 2
23233: PPUSH
23234: EMPTY
23235: PPUSH
23236: CALL_OW 1
23240: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
23241: LD_ADDR_EXP 105
23245: PUSH
23246: LD_EXP 105
23250: PPUSH
23251: LD_VAR 0 2
23255: PPUSH
23256: EMPTY
23257: PPUSH
23258: CALL_OW 1
23262: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
23263: LD_ADDR_EXP 106
23267: PUSH
23268: LD_EXP 106
23272: PPUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: EMPTY
23279: PPUSH
23280: CALL_OW 1
23284: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
23285: LD_ADDR_EXP 107
23289: PUSH
23290: LD_EXP 107
23294: PPUSH
23295: LD_VAR 0 2
23299: PPUSH
23300: EMPTY
23301: PPUSH
23302: CALL_OW 1
23306: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
23307: LD_ADDR_EXP 108
23311: PUSH
23312: LD_EXP 108
23316: PPUSH
23317: LD_VAR 0 2
23321: PPUSH
23322: EMPTY
23323: PPUSH
23324: CALL_OW 1
23328: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
23329: LD_ADDR_EXP 109
23333: PUSH
23334: LD_EXP 109
23338: PPUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: EMPTY
23345: PPUSH
23346: CALL_OW 1
23350: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
23351: LD_ADDR_EXP 98
23355: PUSH
23356: LD_EXP 98
23360: PPUSH
23361: LD_VAR 0 2
23365: PPUSH
23366: LD_INT 0
23368: PPUSH
23369: CALL_OW 1
23373: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
23374: LD_ADDR_EXP 111
23378: PUSH
23379: LD_EXP 111
23383: PPUSH
23384: LD_VAR 0 2
23388: PPUSH
23389: LD_INT 0
23391: PPUSH
23392: CALL_OW 1
23396: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
23397: LD_ADDR_EXP 99
23401: PUSH
23402: LD_EXP 99
23406: PPUSH
23407: LD_VAR 0 2
23411: PPUSH
23412: EMPTY
23413: PPUSH
23414: CALL_OW 1
23418: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
23419: LD_ADDR_EXP 110
23423: PUSH
23424: LD_EXP 110
23428: PPUSH
23429: LD_VAR 0 2
23433: PPUSH
23434: LD_INT 0
23436: PPUSH
23437: CALL_OW 1
23441: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
23442: LD_ADDR_EXP 112
23446: PUSH
23447: LD_EXP 112
23451: PPUSH
23452: LD_VAR 0 2
23456: PPUSH
23457: EMPTY
23458: PPUSH
23459: CALL_OW 1
23463: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
23464: LD_ADDR_EXP 115
23468: PUSH
23469: LD_EXP 115
23473: PPUSH
23474: LD_VAR 0 2
23478: PPUSH
23479: LD_INT 0
23481: PPUSH
23482: CALL_OW 1
23486: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
23487: LD_ADDR_EXP 116
23491: PUSH
23492: LD_EXP 116
23496: PPUSH
23497: LD_VAR 0 2
23501: PPUSH
23502: EMPTY
23503: PPUSH
23504: CALL_OW 1
23508: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
23509: LD_ADDR_EXP 117
23513: PUSH
23514: LD_EXP 117
23518: PPUSH
23519: LD_VAR 0 2
23523: PPUSH
23524: EMPTY
23525: PPUSH
23526: CALL_OW 1
23530: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
23531: LD_ADDR_EXP 118
23535: PUSH
23536: LD_EXP 118
23540: PPUSH
23541: LD_VAR 0 2
23545: PPUSH
23546: EMPTY
23547: PPUSH
23548: CALL_OW 1
23552: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
23553: LD_ADDR_EXP 120
23557: PUSH
23558: LD_EXP 120
23562: PPUSH
23563: LD_VAR 0 2
23567: PPUSH
23568: LD_EXP 87
23572: PUSH
23573: LD_VAR 0 2
23577: ARRAY
23578: PPUSH
23579: LD_INT 2
23581: PUSH
23582: LD_INT 30
23584: PUSH
23585: LD_INT 6
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 30
23594: PUSH
23595: LD_INT 7
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 30
23604: PUSH
23605: LD_INT 8
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: PPUSH
23618: CALL_OW 72
23622: PPUSH
23623: CALL_OW 1
23627: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
23628: LD_ADDR_EXP 121
23632: PUSH
23633: LD_EXP 121
23637: PPUSH
23638: LD_VAR 0 2
23642: PPUSH
23643: EMPTY
23644: PPUSH
23645: CALL_OW 1
23649: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
23650: LD_ADDR_EXP 122
23654: PUSH
23655: LD_EXP 122
23659: PPUSH
23660: LD_VAR 0 2
23664: PPUSH
23665: EMPTY
23666: PPUSH
23667: CALL_OW 1
23671: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
23672: LD_ADDR_EXP 123
23676: PUSH
23677: LD_EXP 123
23681: PPUSH
23682: LD_VAR 0 2
23686: PPUSH
23687: EMPTY
23688: PPUSH
23689: CALL_OW 1
23693: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
23694: LD_ADDR_EXP 124
23698: PUSH
23699: LD_EXP 124
23703: PPUSH
23704: LD_VAR 0 2
23708: PPUSH
23709: EMPTY
23710: PPUSH
23711: CALL_OW 1
23715: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
23716: LD_ADDR_EXP 125
23720: PUSH
23721: LD_EXP 125
23725: PPUSH
23726: LD_VAR 0 2
23730: PPUSH
23731: EMPTY
23732: PPUSH
23733: CALL_OW 1
23737: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
23738: LD_ADDR_EXP 126
23742: PUSH
23743: LD_EXP 126
23747: PPUSH
23748: LD_VAR 0 2
23752: PPUSH
23753: EMPTY
23754: PPUSH
23755: CALL_OW 1
23759: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
23760: LD_ADDR_EXP 127
23764: PUSH
23765: LD_EXP 127
23769: PPUSH
23770: LD_VAR 0 2
23774: PPUSH
23775: EMPTY
23776: PPUSH
23777: CALL_OW 1
23781: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
23782: LD_ADDR_EXP 128
23786: PUSH
23787: LD_EXP 128
23791: PPUSH
23792: LD_VAR 0 2
23796: PPUSH
23797: EMPTY
23798: PPUSH
23799: CALL_OW 1
23803: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
23804: LD_ADDR_EXP 129
23808: PUSH
23809: LD_EXP 129
23813: PPUSH
23814: LD_VAR 0 2
23818: PPUSH
23819: LD_INT 0
23821: PPUSH
23822: CALL_OW 1
23826: ST_TO_ADDR
// end ;
23827: GO 22751
23829: POP
23830: POP
// MC_InitSides ( ) ;
23831: CALL 24117 0 0
// MC_InitResearch ( ) ;
23835: CALL 23856 0 0
// CustomInitMacro ( ) ;
23839: CALL 213 0 0
// skirmish := true ;
23843: LD_ADDR_EXP 85
23847: PUSH
23848: LD_INT 1
23850: ST_TO_ADDR
// end ;
23851: LD_VAR 0 1
23855: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
23856: LD_INT 0
23858: PPUSH
23859: PPUSH
23860: PPUSH
23861: PPUSH
23862: PPUSH
23863: PPUSH
// if not mc_bases then
23864: LD_EXP 87
23868: NOT
23869: IFFALSE 23873
// exit ;
23871: GO 24112
// for i = 1 to 8 do
23873: LD_ADDR_VAR 0 2
23877: PUSH
23878: DOUBLE
23879: LD_INT 1
23881: DEC
23882: ST_TO_ADDR
23883: LD_INT 8
23885: PUSH
23886: FOR_TO
23887: IFFALSE 23913
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
23889: LD_ADDR_EXP 114
23893: PUSH
23894: LD_EXP 114
23898: PPUSH
23899: LD_VAR 0 2
23903: PPUSH
23904: EMPTY
23905: PPUSH
23906: CALL_OW 1
23910: ST_TO_ADDR
23911: GO 23886
23913: POP
23914: POP
// tmp := [ ] ;
23915: LD_ADDR_VAR 0 5
23919: PUSH
23920: EMPTY
23921: ST_TO_ADDR
// for i = 1 to mc_sides do
23922: LD_ADDR_VAR 0 2
23926: PUSH
23927: DOUBLE
23928: LD_INT 1
23930: DEC
23931: ST_TO_ADDR
23932: LD_EXP 113
23936: PUSH
23937: FOR_TO
23938: IFFALSE 23996
// if not mc_sides [ i ] in tmp then
23940: LD_EXP 113
23944: PUSH
23945: LD_VAR 0 2
23949: ARRAY
23950: PUSH
23951: LD_VAR 0 5
23955: IN
23956: NOT
23957: IFFALSE 23994
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
23959: LD_ADDR_VAR 0 5
23963: PUSH
23964: LD_VAR 0 5
23968: PPUSH
23969: LD_VAR 0 5
23973: PUSH
23974: LD_INT 1
23976: PLUS
23977: PPUSH
23978: LD_EXP 113
23982: PUSH
23983: LD_VAR 0 2
23987: ARRAY
23988: PPUSH
23989: CALL_OW 2
23993: ST_TO_ADDR
23994: GO 23937
23996: POP
23997: POP
// if not tmp then
23998: LD_VAR 0 5
24002: NOT
24003: IFFALSE 24007
// exit ;
24005: GO 24112
// for j in tmp do
24007: LD_ADDR_VAR 0 3
24011: PUSH
24012: LD_VAR 0 5
24016: PUSH
24017: FOR_IN
24018: IFFALSE 24110
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
24020: LD_ADDR_VAR 0 6
24024: PUSH
24025: LD_INT 22
24027: PUSH
24028: LD_VAR 0 3
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PPUSH
24037: CALL_OW 69
24041: ST_TO_ADDR
// if not un then
24042: LD_VAR 0 6
24046: NOT
24047: IFFALSE 24051
// continue ;
24049: GO 24017
// nation := GetNation ( un [ 1 ] ) ;
24051: LD_ADDR_VAR 0 4
24055: PUSH
24056: LD_VAR 0 6
24060: PUSH
24061: LD_INT 1
24063: ARRAY
24064: PPUSH
24065: CALL_OW 248
24069: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
24070: LD_ADDR_EXP 114
24074: PUSH
24075: LD_EXP 114
24079: PPUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: LD_VAR 0 3
24089: PPUSH
24090: LD_VAR 0 4
24094: PPUSH
24095: LD_INT 1
24097: PPUSH
24098: CALL 50706 0 3
24102: PPUSH
24103: CALL_OW 1
24107: ST_TO_ADDR
// end ;
24108: GO 24017
24110: POP
24111: POP
// end ;
24112: LD_VAR 0 1
24116: RET
// export function MC_InitSides ( ) ; var i ; begin
24117: LD_INT 0
24119: PPUSH
24120: PPUSH
// if not mc_bases then
24121: LD_EXP 87
24125: NOT
24126: IFFALSE 24130
// exit ;
24128: GO 24204
// for i = 1 to mc_bases do
24130: LD_ADDR_VAR 0 2
24134: PUSH
24135: DOUBLE
24136: LD_INT 1
24138: DEC
24139: ST_TO_ADDR
24140: LD_EXP 87
24144: PUSH
24145: FOR_TO
24146: IFFALSE 24202
// if mc_bases [ i ] then
24148: LD_EXP 87
24152: PUSH
24153: LD_VAR 0 2
24157: ARRAY
24158: IFFALSE 24200
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
24160: LD_ADDR_EXP 113
24164: PUSH
24165: LD_EXP 113
24169: PPUSH
24170: LD_VAR 0 2
24174: PPUSH
24175: LD_EXP 87
24179: PUSH
24180: LD_VAR 0 2
24184: ARRAY
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: PPUSH
24190: CALL_OW 255
24194: PPUSH
24195: CALL_OW 1
24199: ST_TO_ADDR
24200: GO 24145
24202: POP
24203: POP
// end ;
24204: LD_VAR 0 1
24208: RET
// every 0 0$01 trigger skirmish do
24209: LD_EXP 85
24213: IFFALSE 24367
24215: GO 24217
24217: DISABLE
// begin enable ;
24218: ENABLE
// MC_CheckBuildings ( ) ;
24219: CALL 28865 0 0
// MC_CheckPeopleLife ( ) ;
24223: CALL 28990 0 0
// RaiseSailEvent ( 100 ) ;
24227: LD_INT 100
24229: PPUSH
24230: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
24234: LD_INT 103
24236: PPUSH
24237: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
24241: LD_INT 104
24243: PPUSH
24244: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
24248: LD_INT 105
24250: PPUSH
24251: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
24255: LD_INT 106
24257: PPUSH
24258: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
24262: LD_INT 107
24264: PPUSH
24265: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
24269: LD_INT 108
24271: PPUSH
24272: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
24276: LD_INT 109
24278: PPUSH
24279: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
24283: LD_INT 110
24285: PPUSH
24286: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
24290: LD_INT 111
24292: PPUSH
24293: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
24297: LD_INT 112
24299: PPUSH
24300: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
24304: LD_INT 113
24306: PPUSH
24307: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
24311: LD_INT 120
24313: PPUSH
24314: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
24318: LD_INT 121
24320: PPUSH
24321: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
24325: LD_INT 122
24327: PPUSH
24328: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
24332: LD_INT 123
24334: PPUSH
24335: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
24339: LD_INT 124
24341: PPUSH
24342: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
24346: LD_INT 125
24348: PPUSH
24349: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
24353: LD_INT 126
24355: PPUSH
24356: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
24360: LD_INT 200
24362: PPUSH
24363: CALL_OW 427
// end ;
24367: END
// on SailEvent ( event ) do begin if event < 100 then
24368: LD_VAR 0 1
24372: PUSH
24373: LD_INT 100
24375: LESS
24376: IFFALSE 24387
// CustomEvent ( event ) ;
24378: LD_VAR 0 1
24382: PPUSH
24383: CALL 10371 0 1
// if event = 100 then
24387: LD_VAR 0 1
24391: PUSH
24392: LD_INT 100
24394: EQUAL
24395: IFFALSE 24401
// MC_ClassManager ( ) ;
24397: CALL 24793 0 0
// if event = 101 then
24401: LD_VAR 0 1
24405: PUSH
24406: LD_INT 101
24408: EQUAL
24409: IFFALSE 24415
// MC_RepairBuildings ( ) ;
24411: CALL 29575 0 0
// if event = 102 then
24415: LD_VAR 0 1
24419: PUSH
24420: LD_INT 102
24422: EQUAL
24423: IFFALSE 24429
// MC_Heal ( ) ;
24425: CALL 30434 0 0
// if event = 103 then
24429: LD_VAR 0 1
24433: PUSH
24434: LD_INT 103
24436: EQUAL
24437: IFFALSE 24443
// MC_Build ( ) ;
24439: CALL 30856 0 0
// if event = 104 then
24443: LD_VAR 0 1
24447: PUSH
24448: LD_INT 104
24450: EQUAL
24451: IFFALSE 24457
// MC_TurretWeapon ( ) ;
24453: CALL 32469 0 0
// if event = 105 then
24457: LD_VAR 0 1
24461: PUSH
24462: LD_INT 105
24464: EQUAL
24465: IFFALSE 24471
// MC_BuildUpgrade ( ) ;
24467: CALL 32020 0 0
// if event = 106 then
24471: LD_VAR 0 1
24475: PUSH
24476: LD_INT 106
24478: EQUAL
24479: IFFALSE 24485
// MC_PlantMines ( ) ;
24481: CALL 32899 0 0
// if event = 107 then
24485: LD_VAR 0 1
24489: PUSH
24490: LD_INT 107
24492: EQUAL
24493: IFFALSE 24499
// MC_CollectCrates ( ) ;
24495: CALL 33697 0 0
// if event = 108 then
24499: LD_VAR 0 1
24503: PUSH
24504: LD_INT 108
24506: EQUAL
24507: IFFALSE 24513
// MC_LinkRemoteControl ( ) ;
24509: CALL 35473 0 0
// if event = 109 then
24513: LD_VAR 0 1
24517: PUSH
24518: LD_INT 109
24520: EQUAL
24521: IFFALSE 24527
// MC_ProduceVehicle ( ) ;
24523: CALL 35654 0 0
// if event = 110 then
24527: LD_VAR 0 1
24531: PUSH
24532: LD_INT 110
24534: EQUAL
24535: IFFALSE 24541
// MC_SendAttack ( ) ;
24537: CALL 36120 0 0
// if event = 111 then
24541: LD_VAR 0 1
24545: PUSH
24546: LD_INT 111
24548: EQUAL
24549: IFFALSE 24555
// MC_Defend ( ) ;
24551: CALL 36228 0 0
// if event = 112 then
24555: LD_VAR 0 1
24559: PUSH
24560: LD_INT 112
24562: EQUAL
24563: IFFALSE 24569
// MC_Research ( ) ;
24565: CALL 36833 0 0
// if event = 113 then
24569: LD_VAR 0 1
24573: PUSH
24574: LD_INT 113
24576: EQUAL
24577: IFFALSE 24583
// MC_MinesTrigger ( ) ;
24579: CALL 37947 0 0
// if event = 120 then
24583: LD_VAR 0 1
24587: PUSH
24588: LD_INT 120
24590: EQUAL
24591: IFFALSE 24597
// MC_RepairVehicle ( ) ;
24593: CALL 38046 0 0
// if event = 121 then
24597: LD_VAR 0 1
24601: PUSH
24602: LD_INT 121
24604: EQUAL
24605: IFFALSE 24611
// MC_TameApe ( ) ;
24607: CALL 38776 0 0
// if event = 122 then
24611: LD_VAR 0 1
24615: PUSH
24616: LD_INT 122
24618: EQUAL
24619: IFFALSE 24625
// MC_ChangeApeClass ( ) ;
24621: CALL 39605 0 0
// if event = 123 then
24625: LD_VAR 0 1
24629: PUSH
24630: LD_INT 123
24632: EQUAL
24633: IFFALSE 24639
// MC_Bazooka ( ) ;
24635: CALL 40255 0 0
// if event = 124 then
24639: LD_VAR 0 1
24643: PUSH
24644: LD_INT 124
24646: EQUAL
24647: IFFALSE 24653
// MC_TeleportExit ( ) ;
24649: CALL 40453 0 0
// if event = 125 then
24653: LD_VAR 0 1
24657: PUSH
24658: LD_INT 125
24660: EQUAL
24661: IFFALSE 24667
// MC_Deposits ( ) ;
24663: CALL 41100 0 0
// if event = 126 then
24667: LD_VAR 0 1
24671: PUSH
24672: LD_INT 126
24674: EQUAL
24675: IFFALSE 24681
// MC_RemoteDriver ( ) ;
24677: CALL 41725 0 0
// if event = 200 then
24681: LD_VAR 0 1
24685: PUSH
24686: LD_INT 200
24688: EQUAL
24689: IFFALSE 24695
// MC_Idle ( ) ;
24691: CALL 43674 0 0
// end ;
24695: PPOPN 1
24697: END
// export function MC_Reset ( base , tag ) ; var i ; begin
24698: LD_INT 0
24700: PPUSH
24701: PPUSH
// if not mc_bases [ base ] or not tag then
24702: LD_EXP 87
24706: PUSH
24707: LD_VAR 0 1
24711: ARRAY
24712: NOT
24713: PUSH
24714: LD_VAR 0 2
24718: NOT
24719: OR
24720: IFFALSE 24724
// exit ;
24722: GO 24788
// for i in mc_bases [ base ] union mc_ape [ base ] do
24724: LD_ADDR_VAR 0 4
24728: PUSH
24729: LD_EXP 87
24733: PUSH
24734: LD_VAR 0 1
24738: ARRAY
24739: PUSH
24740: LD_EXP 116
24744: PUSH
24745: LD_VAR 0 1
24749: ARRAY
24750: UNION
24751: PUSH
24752: FOR_IN
24753: IFFALSE 24786
// if GetTag ( i ) = tag then
24755: LD_VAR 0 4
24759: PPUSH
24760: CALL_OW 110
24764: PUSH
24765: LD_VAR 0 2
24769: EQUAL
24770: IFFALSE 24784
// SetTag ( i , 0 ) ;
24772: LD_VAR 0 4
24776: PPUSH
24777: LD_INT 0
24779: PPUSH
24780: CALL_OW 109
24784: GO 24752
24786: POP
24787: POP
// end ;
24788: LD_VAR 0 3
24792: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
24793: LD_INT 0
24795: PPUSH
24796: PPUSH
24797: PPUSH
24798: PPUSH
24799: PPUSH
24800: PPUSH
24801: PPUSH
24802: PPUSH
// if not mc_bases then
24803: LD_EXP 87
24807: NOT
24808: IFFALSE 24812
// exit ;
24810: GO 25270
// for i = 1 to mc_bases do
24812: LD_ADDR_VAR 0 2
24816: PUSH
24817: DOUBLE
24818: LD_INT 1
24820: DEC
24821: ST_TO_ADDR
24822: LD_EXP 87
24826: PUSH
24827: FOR_TO
24828: IFFALSE 25268
// begin tmp := MC_ClassCheckReq ( i ) ;
24830: LD_ADDR_VAR 0 4
24834: PUSH
24835: LD_VAR 0 2
24839: PPUSH
24840: CALL 25275 0 1
24844: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
24845: LD_ADDR_EXP 128
24849: PUSH
24850: LD_EXP 128
24854: PPUSH
24855: LD_VAR 0 2
24859: PPUSH
24860: LD_VAR 0 4
24864: PPUSH
24865: CALL_OW 1
24869: ST_TO_ADDR
// if not tmp then
24870: LD_VAR 0 4
24874: NOT
24875: IFFALSE 24879
// continue ;
24877: GO 24827
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
24879: LD_ADDR_VAR 0 6
24883: PUSH
24884: LD_EXP 87
24888: PUSH
24889: LD_VAR 0 2
24893: ARRAY
24894: PPUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 30
24900: PUSH
24901: LD_INT 4
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 30
24910: PUSH
24911: LD_INT 5
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: LIST
24922: PPUSH
24923: CALL_OW 72
24927: PUSH
24928: LD_EXP 87
24932: PUSH
24933: LD_VAR 0 2
24937: ARRAY
24938: PPUSH
24939: LD_INT 2
24941: PUSH
24942: LD_INT 30
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 30
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: PPUSH
24967: CALL_OW 72
24971: PUSH
24972: LD_EXP 87
24976: PUSH
24977: LD_VAR 0 2
24981: ARRAY
24982: PPUSH
24983: LD_INT 30
24985: PUSH
24986: LD_INT 3
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PPUSH
24993: CALL_OW 72
24997: PUSH
24998: LD_EXP 87
25002: PUSH
25003: LD_VAR 0 2
25007: ARRAY
25008: PPUSH
25009: LD_INT 2
25011: PUSH
25012: LD_INT 30
25014: PUSH
25015: LD_INT 6
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 30
25024: PUSH
25025: LD_INT 7
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 30
25034: PUSH
25035: LD_INT 8
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: PPUSH
25048: CALL_OW 72
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: ST_TO_ADDR
// for j = 1 to 4 do
25059: LD_ADDR_VAR 0 3
25063: PUSH
25064: DOUBLE
25065: LD_INT 1
25067: DEC
25068: ST_TO_ADDR
25069: LD_INT 4
25071: PUSH
25072: FOR_TO
25073: IFFALSE 25264
// begin if not tmp [ j ] then
25075: LD_VAR 0 4
25079: PUSH
25080: LD_VAR 0 3
25084: ARRAY
25085: NOT
25086: IFFALSE 25090
// continue ;
25088: GO 25072
// for p in tmp [ j ] do
25090: LD_ADDR_VAR 0 5
25094: PUSH
25095: LD_VAR 0 4
25099: PUSH
25100: LD_VAR 0 3
25104: ARRAY
25105: PUSH
25106: FOR_IN
25107: IFFALSE 25260
// begin if not b [ j ] then
25109: LD_VAR 0 6
25113: PUSH
25114: LD_VAR 0 3
25118: ARRAY
25119: NOT
25120: IFFALSE 25124
// break ;
25122: GO 25260
// e := 0 ;
25124: LD_ADDR_VAR 0 7
25128: PUSH
25129: LD_INT 0
25131: ST_TO_ADDR
// for k in b [ j ] do
25132: LD_ADDR_VAR 0 8
25136: PUSH
25137: LD_VAR 0 6
25141: PUSH
25142: LD_VAR 0 3
25146: ARRAY
25147: PUSH
25148: FOR_IN
25149: IFFALSE 25176
// if IsNotFull ( k ) then
25151: LD_VAR 0 8
25155: PPUSH
25156: CALL 52855 0 1
25160: IFFALSE 25174
// begin e := k ;
25162: LD_ADDR_VAR 0 7
25166: PUSH
25167: LD_VAR 0 8
25171: ST_TO_ADDR
// break ;
25172: GO 25176
// end ;
25174: GO 25148
25176: POP
25177: POP
// if e and not UnitGoingToBuilding ( p , e ) then
25178: LD_VAR 0 7
25182: PUSH
25183: LD_VAR 0 5
25187: PPUSH
25188: LD_VAR 0 7
25192: PPUSH
25193: CALL 85275 0 2
25197: NOT
25198: AND
25199: IFFALSE 25258
// begin if IsInUnit ( p ) then
25201: LD_VAR 0 5
25205: PPUSH
25206: CALL_OW 310
25210: IFFALSE 25221
// ComExitBuilding ( p ) ;
25212: LD_VAR 0 5
25216: PPUSH
25217: CALL_OW 122
// ComEnterUnit ( p , e ) ;
25221: LD_VAR 0 5
25225: PPUSH
25226: LD_VAR 0 7
25230: PPUSH
25231: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
25235: LD_VAR 0 5
25239: PPUSH
25240: LD_VAR 0 3
25244: PPUSH
25245: CALL_OW 183
// AddComExitBuilding ( p ) ;
25249: LD_VAR 0 5
25253: PPUSH
25254: CALL_OW 182
// end ; end ;
25258: GO 25106
25260: POP
25261: POP
// end ;
25262: GO 25072
25264: POP
25265: POP
// end ;
25266: GO 24827
25268: POP
25269: POP
// end ;
25270: LD_VAR 0 1
25274: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
25275: LD_INT 0
25277: PPUSH
25278: PPUSH
25279: PPUSH
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
25289: LD_VAR 0 1
25293: NOT
25294: PUSH
25295: LD_EXP 87
25299: PUSH
25300: LD_VAR 0 1
25304: ARRAY
25305: NOT
25306: OR
25307: PUSH
25308: LD_EXP 87
25312: PUSH
25313: LD_VAR 0 1
25317: ARRAY
25318: PPUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 30
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 30
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: PPUSH
25347: CALL_OW 72
25351: NOT
25352: OR
25353: IFFALSE 25357
// exit ;
25355: GO 28860
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
25357: LD_ADDR_VAR 0 4
25361: PUSH
25362: LD_EXP 87
25366: PUSH
25367: LD_VAR 0 1
25371: ARRAY
25372: PPUSH
25373: LD_INT 2
25375: PUSH
25376: LD_INT 25
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 25
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 25
25398: PUSH
25399: LD_INT 3
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 25
25408: PUSH
25409: LD_INT 4
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 25
25418: PUSH
25419: LD_INT 5
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 25
25428: PUSH
25429: LD_INT 8
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 25
25438: PUSH
25439: LD_INT 9
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: PPUSH
25456: CALL_OW 72
25460: ST_TO_ADDR
// if not tmp then
25461: LD_VAR 0 4
25465: NOT
25466: IFFALSE 25470
// exit ;
25468: GO 28860
// for i in tmp do
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_VAR 0 4
25479: PUSH
25480: FOR_IN
25481: IFFALSE 25512
// if GetTag ( i ) then
25483: LD_VAR 0 3
25487: PPUSH
25488: CALL_OW 110
25492: IFFALSE 25510
// tmp := tmp diff i ;
25494: LD_ADDR_VAR 0 4
25498: PUSH
25499: LD_VAR 0 4
25503: PUSH
25504: LD_VAR 0 3
25508: DIFF
25509: ST_TO_ADDR
25510: GO 25480
25512: POP
25513: POP
// if not tmp then
25514: LD_VAR 0 4
25518: NOT
25519: IFFALSE 25523
// exit ;
25521: GO 28860
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
25523: LD_ADDR_VAR 0 5
25527: PUSH
25528: LD_EXP 87
25532: PUSH
25533: LD_VAR 0 1
25537: ARRAY
25538: PPUSH
25539: LD_INT 2
25541: PUSH
25542: LD_INT 25
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 25
25554: PUSH
25555: LD_INT 5
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 25
25564: PUSH
25565: LD_INT 8
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 25
25574: PUSH
25575: LD_INT 9
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: PPUSH
25589: CALL_OW 72
25593: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
25594: LD_ADDR_VAR 0 6
25598: PUSH
25599: LD_EXP 87
25603: PUSH
25604: LD_VAR 0 1
25608: ARRAY
25609: PPUSH
25610: LD_INT 25
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PPUSH
25620: CALL_OW 72
25624: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
25625: LD_ADDR_VAR 0 7
25629: PUSH
25630: LD_EXP 87
25634: PUSH
25635: LD_VAR 0 1
25639: ARRAY
25640: PPUSH
25641: LD_INT 25
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 72
25655: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
25656: LD_ADDR_VAR 0 8
25660: PUSH
25661: LD_EXP 87
25665: PUSH
25666: LD_VAR 0 1
25670: ARRAY
25671: PPUSH
25672: LD_INT 25
25674: PUSH
25675: LD_INT 4
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 24
25684: PUSH
25685: LD_INT 251
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PPUSH
25696: CALL_OW 72
25700: ST_TO_ADDR
// if mc_scan [ base ] then
25701: LD_EXP 110
25705: PUSH
25706: LD_VAR 0 1
25710: ARRAY
25711: IFFALSE 26172
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
25713: LD_ADDR_EXP 129
25717: PUSH
25718: LD_EXP 129
25722: PPUSH
25723: LD_VAR 0 1
25727: PPUSH
25728: LD_INT 4
25730: PPUSH
25731: CALL_OW 1
25735: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
25736: LD_ADDR_VAR 0 12
25740: PUSH
25741: LD_EXP 87
25745: PUSH
25746: LD_VAR 0 1
25750: ARRAY
25751: PPUSH
25752: LD_INT 2
25754: PUSH
25755: LD_INT 30
25757: PUSH
25758: LD_INT 4
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 30
25767: PUSH
25768: LD_INT 5
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: PPUSH
25780: CALL_OW 72
25784: ST_TO_ADDR
// if not b then
25785: LD_VAR 0 12
25789: NOT
25790: IFFALSE 25794
// exit ;
25792: GO 28860
// p := [ ] ;
25794: LD_ADDR_VAR 0 11
25798: PUSH
25799: EMPTY
25800: ST_TO_ADDR
// if sci >= 2 then
25801: LD_VAR 0 8
25805: PUSH
25806: LD_INT 2
25808: GREATEREQUAL
25809: IFFALSE 25840
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
25811: LD_ADDR_VAR 0 8
25815: PUSH
25816: LD_VAR 0 8
25820: PUSH
25821: LD_INT 1
25823: ARRAY
25824: PUSH
25825: LD_VAR 0 8
25829: PUSH
25830: LD_INT 2
25832: ARRAY
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: ST_TO_ADDR
25838: GO 25901
// if sci = 1 then
25840: LD_VAR 0 8
25844: PUSH
25845: LD_INT 1
25847: EQUAL
25848: IFFALSE 25869
// sci := [ sci [ 1 ] ] else
25850: LD_ADDR_VAR 0 8
25854: PUSH
25855: LD_VAR 0 8
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PUSH
25864: EMPTY
25865: LIST
25866: ST_TO_ADDR
25867: GO 25901
// if sci = 0 then
25869: LD_VAR 0 8
25873: PUSH
25874: LD_INT 0
25876: EQUAL
25877: IFFALSE 25901
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
25879: LD_ADDR_VAR 0 11
25883: PUSH
25884: LD_VAR 0 4
25888: PPUSH
25889: LD_INT 4
25891: PPUSH
25892: CALL 85138 0 2
25896: PUSH
25897: LD_INT 1
25899: ARRAY
25900: ST_TO_ADDR
// if eng > 4 then
25901: LD_VAR 0 6
25905: PUSH
25906: LD_INT 4
25908: GREATER
25909: IFFALSE 25955
// for i = eng downto 4 do
25911: LD_ADDR_VAR 0 3
25915: PUSH
25916: DOUBLE
25917: LD_VAR 0 6
25921: INC
25922: ST_TO_ADDR
25923: LD_INT 4
25925: PUSH
25926: FOR_DOWNTO
25927: IFFALSE 25953
// eng := eng diff eng [ i ] ;
25929: LD_ADDR_VAR 0 6
25933: PUSH
25934: LD_VAR 0 6
25938: PUSH
25939: LD_VAR 0 6
25943: PUSH
25944: LD_VAR 0 3
25948: ARRAY
25949: DIFF
25950: ST_TO_ADDR
25951: GO 25926
25953: POP
25954: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
25955: LD_ADDR_VAR 0 4
25959: PUSH
25960: LD_VAR 0 4
25964: PUSH
25965: LD_VAR 0 5
25969: PUSH
25970: LD_VAR 0 6
25974: UNION
25975: PUSH
25976: LD_VAR 0 7
25980: UNION
25981: PUSH
25982: LD_VAR 0 8
25986: UNION
25987: DIFF
25988: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
25989: LD_ADDR_VAR 0 13
25993: PUSH
25994: LD_EXP 87
25998: PUSH
25999: LD_VAR 0 1
26003: ARRAY
26004: PPUSH
26005: LD_INT 2
26007: PUSH
26008: LD_INT 30
26010: PUSH
26011: LD_INT 32
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 30
26020: PUSH
26021: LD_INT 31
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: LIST
26032: PPUSH
26033: CALL_OW 72
26037: PUSH
26038: LD_EXP 87
26042: PUSH
26043: LD_VAR 0 1
26047: ARRAY
26048: PPUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 30
26054: PUSH
26055: LD_INT 4
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 30
26064: PUSH
26065: LD_INT 5
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: LIST
26076: PPUSH
26077: CALL_OW 72
26081: PUSH
26082: LD_INT 6
26084: MUL
26085: PLUS
26086: ST_TO_ADDR
// if bcount < tmp then
26087: LD_VAR 0 13
26091: PUSH
26092: LD_VAR 0 4
26096: LESS
26097: IFFALSE 26143
// for i = tmp downto bcount do
26099: LD_ADDR_VAR 0 3
26103: PUSH
26104: DOUBLE
26105: LD_VAR 0 4
26109: INC
26110: ST_TO_ADDR
26111: LD_VAR 0 13
26115: PUSH
26116: FOR_DOWNTO
26117: IFFALSE 26141
// tmp := Delete ( tmp , tmp ) ;
26119: LD_ADDR_VAR 0 4
26123: PUSH
26124: LD_VAR 0 4
26128: PPUSH
26129: LD_VAR 0 4
26133: PPUSH
26134: CALL_OW 3
26138: ST_TO_ADDR
26139: GO 26116
26141: POP
26142: POP
// result := [ tmp , 0 , 0 , p ] ;
26143: LD_ADDR_VAR 0 2
26147: PUSH
26148: LD_VAR 0 4
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: LD_VAR 0 11
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: ST_TO_ADDR
// exit ;
26170: GO 28860
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26172: LD_EXP 87
26176: PUSH
26177: LD_VAR 0 1
26181: ARRAY
26182: PPUSH
26183: LD_INT 2
26185: PUSH
26186: LD_INT 30
26188: PUSH
26189: LD_INT 6
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 30
26198: PUSH
26199: LD_INT 7
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 30
26208: PUSH
26209: LD_INT 8
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 72
26226: NOT
26227: PUSH
26228: LD_EXP 87
26232: PUSH
26233: LD_VAR 0 1
26237: ARRAY
26238: PPUSH
26239: LD_INT 30
26241: PUSH
26242: LD_INT 3
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PPUSH
26249: CALL_OW 72
26253: NOT
26254: AND
26255: IFFALSE 26327
// begin if eng = tmp then
26257: LD_VAR 0 6
26261: PUSH
26262: LD_VAR 0 4
26266: EQUAL
26267: IFFALSE 26271
// exit ;
26269: GO 28860
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
26271: LD_ADDR_EXP 129
26275: PUSH
26276: LD_EXP 129
26280: PPUSH
26281: LD_VAR 0 1
26285: PPUSH
26286: LD_INT 1
26288: PPUSH
26289: CALL_OW 1
26293: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
26294: LD_ADDR_VAR 0 2
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_VAR 0 4
26306: PUSH
26307: LD_VAR 0 6
26311: DIFF
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: ST_TO_ADDR
// exit ;
26325: GO 28860
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26327: LD_EXP 114
26331: PUSH
26332: LD_EXP 113
26336: PUSH
26337: LD_VAR 0 1
26341: ARRAY
26342: ARRAY
26343: PUSH
26344: LD_EXP 87
26348: PUSH
26349: LD_VAR 0 1
26353: ARRAY
26354: PPUSH
26355: LD_INT 2
26357: PUSH
26358: LD_INT 30
26360: PUSH
26361: LD_INT 6
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 30
26370: PUSH
26371: LD_INT 7
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 30
26380: PUSH
26381: LD_INT 8
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 72
26398: AND
26399: PUSH
26400: LD_EXP 87
26404: PUSH
26405: LD_VAR 0 1
26409: ARRAY
26410: PPUSH
26411: LD_INT 30
26413: PUSH
26414: LD_INT 3
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PPUSH
26421: CALL_OW 72
26425: NOT
26426: AND
26427: IFFALSE 26641
// begin if sci >= 6 then
26429: LD_VAR 0 8
26433: PUSH
26434: LD_INT 6
26436: GREATEREQUAL
26437: IFFALSE 26441
// exit ;
26439: GO 28860
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
26441: LD_ADDR_EXP 129
26445: PUSH
26446: LD_EXP 129
26450: PPUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: LD_INT 2
26458: PPUSH
26459: CALL_OW 1
26463: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
26464: LD_ADDR_VAR 0 9
26468: PUSH
26469: LD_VAR 0 4
26473: PUSH
26474: LD_VAR 0 8
26478: DIFF
26479: PPUSH
26480: LD_INT 4
26482: PPUSH
26483: CALL 85138 0 2
26487: ST_TO_ADDR
// p := [ ] ;
26488: LD_ADDR_VAR 0 11
26492: PUSH
26493: EMPTY
26494: ST_TO_ADDR
// if sci < 6 and sort > 6 then
26495: LD_VAR 0 8
26499: PUSH
26500: LD_INT 6
26502: LESS
26503: PUSH
26504: LD_VAR 0 9
26508: PUSH
26509: LD_INT 6
26511: GREATER
26512: AND
26513: IFFALSE 26594
// begin for i = 1 to 6 - sci do
26515: LD_ADDR_VAR 0 3
26519: PUSH
26520: DOUBLE
26521: LD_INT 1
26523: DEC
26524: ST_TO_ADDR
26525: LD_INT 6
26527: PUSH
26528: LD_VAR 0 8
26532: MINUS
26533: PUSH
26534: FOR_TO
26535: IFFALSE 26590
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
26537: LD_ADDR_VAR 0 11
26541: PUSH
26542: LD_VAR 0 11
26546: PPUSH
26547: LD_VAR 0 11
26551: PUSH
26552: LD_INT 1
26554: PLUS
26555: PPUSH
26556: LD_VAR 0 9
26560: PUSH
26561: LD_INT 1
26563: ARRAY
26564: PPUSH
26565: CALL_OW 2
26569: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
26570: LD_ADDR_VAR 0 9
26574: PUSH
26575: LD_VAR 0 9
26579: PPUSH
26580: LD_INT 1
26582: PPUSH
26583: CALL_OW 3
26587: ST_TO_ADDR
// end ;
26588: GO 26534
26590: POP
26591: POP
// end else
26592: GO 26614
// if sort then
26594: LD_VAR 0 9
26598: IFFALSE 26614
// p := sort [ 1 ] ;
26600: LD_ADDR_VAR 0 11
26604: PUSH
26605: LD_VAR 0 9
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
26614: LD_ADDR_VAR 0 2
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: LD_VAR 0 11
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: ST_TO_ADDR
// exit ;
26639: GO 28860
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26641: LD_EXP 114
26645: PUSH
26646: LD_EXP 113
26650: PUSH
26651: LD_VAR 0 1
26655: ARRAY
26656: ARRAY
26657: PUSH
26658: LD_EXP 87
26662: PUSH
26663: LD_VAR 0 1
26667: ARRAY
26668: PPUSH
26669: LD_INT 2
26671: PUSH
26672: LD_INT 30
26674: PUSH
26675: LD_INT 6
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 30
26684: PUSH
26685: LD_INT 7
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 30
26694: PUSH
26695: LD_INT 8
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: PPUSH
26708: CALL_OW 72
26712: AND
26713: PUSH
26714: LD_EXP 87
26718: PUSH
26719: LD_VAR 0 1
26723: ARRAY
26724: PPUSH
26725: LD_INT 30
26727: PUSH
26728: LD_INT 3
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PPUSH
26735: CALL_OW 72
26739: AND
26740: IFFALSE 27474
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
26742: LD_ADDR_EXP 129
26746: PUSH
26747: LD_EXP 129
26751: PPUSH
26752: LD_VAR 0 1
26756: PPUSH
26757: LD_INT 3
26759: PPUSH
26760: CALL_OW 1
26764: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
26765: LD_ADDR_VAR 0 2
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: ST_TO_ADDR
// if not eng then
26788: LD_VAR 0 6
26792: NOT
26793: IFFALSE 26856
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
26795: LD_ADDR_VAR 0 11
26799: PUSH
26800: LD_VAR 0 4
26804: PPUSH
26805: LD_INT 2
26807: PPUSH
26808: CALL 85138 0 2
26812: PUSH
26813: LD_INT 1
26815: ARRAY
26816: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
26817: LD_ADDR_VAR 0 2
26821: PUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_INT 2
26829: PPUSH
26830: LD_VAR 0 11
26834: PPUSH
26835: CALL_OW 1
26839: ST_TO_ADDR
// tmp := tmp diff p ;
26840: LD_ADDR_VAR 0 4
26844: PUSH
26845: LD_VAR 0 4
26849: PUSH
26850: LD_VAR 0 11
26854: DIFF
26855: ST_TO_ADDR
// end ; if tmp and sci < 6 then
26856: LD_VAR 0 4
26860: PUSH
26861: LD_VAR 0 8
26865: PUSH
26866: LD_INT 6
26868: LESS
26869: AND
26870: IFFALSE 27058
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
26872: LD_ADDR_VAR 0 9
26876: PUSH
26877: LD_VAR 0 4
26881: PUSH
26882: LD_VAR 0 8
26886: PUSH
26887: LD_VAR 0 7
26891: UNION
26892: DIFF
26893: PPUSH
26894: LD_INT 4
26896: PPUSH
26897: CALL 85138 0 2
26901: ST_TO_ADDR
// p := [ ] ;
26902: LD_ADDR_VAR 0 11
26906: PUSH
26907: EMPTY
26908: ST_TO_ADDR
// if sort then
26909: LD_VAR 0 9
26913: IFFALSE 27029
// for i = 1 to 6 - sci do
26915: LD_ADDR_VAR 0 3
26919: PUSH
26920: DOUBLE
26921: LD_INT 1
26923: DEC
26924: ST_TO_ADDR
26925: LD_INT 6
26927: PUSH
26928: LD_VAR 0 8
26932: MINUS
26933: PUSH
26934: FOR_TO
26935: IFFALSE 27027
// begin if i = sort then
26937: LD_VAR 0 3
26941: PUSH
26942: LD_VAR 0 9
26946: EQUAL
26947: IFFALSE 26951
// break ;
26949: GO 27027
// if GetClass ( i ) = 4 then
26951: LD_VAR 0 3
26955: PPUSH
26956: CALL_OW 257
26960: PUSH
26961: LD_INT 4
26963: EQUAL
26964: IFFALSE 26968
// continue ;
26966: GO 26934
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26968: LD_ADDR_VAR 0 11
26972: PUSH
26973: LD_VAR 0 11
26977: PPUSH
26978: LD_VAR 0 11
26982: PUSH
26983: LD_INT 1
26985: PLUS
26986: PPUSH
26987: LD_VAR 0 9
26991: PUSH
26992: LD_VAR 0 3
26996: ARRAY
26997: PPUSH
26998: CALL_OW 2
27002: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27003: LD_ADDR_VAR 0 4
27007: PUSH
27008: LD_VAR 0 4
27012: PUSH
27013: LD_VAR 0 9
27017: PUSH
27018: LD_VAR 0 3
27022: ARRAY
27023: DIFF
27024: ST_TO_ADDR
// end ;
27025: GO 26934
27027: POP
27028: POP
// if p then
27029: LD_VAR 0 11
27033: IFFALSE 27058
// result := Replace ( result , 4 , p ) ;
27035: LD_ADDR_VAR 0 2
27039: PUSH
27040: LD_VAR 0 2
27044: PPUSH
27045: LD_INT 4
27047: PPUSH
27048: LD_VAR 0 11
27052: PPUSH
27053: CALL_OW 1
27057: ST_TO_ADDR
// end ; if tmp and mech < 6 then
27058: LD_VAR 0 4
27062: PUSH
27063: LD_VAR 0 7
27067: PUSH
27068: LD_INT 6
27070: LESS
27071: AND
27072: IFFALSE 27260
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
27074: LD_ADDR_VAR 0 9
27078: PUSH
27079: LD_VAR 0 4
27083: PUSH
27084: LD_VAR 0 8
27088: PUSH
27089: LD_VAR 0 7
27093: UNION
27094: DIFF
27095: PPUSH
27096: LD_INT 3
27098: PPUSH
27099: CALL 85138 0 2
27103: ST_TO_ADDR
// p := [ ] ;
27104: LD_ADDR_VAR 0 11
27108: PUSH
27109: EMPTY
27110: ST_TO_ADDR
// if sort then
27111: LD_VAR 0 9
27115: IFFALSE 27231
// for i = 1 to 6 - mech do
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: DOUBLE
27123: LD_INT 1
27125: DEC
27126: ST_TO_ADDR
27127: LD_INT 6
27129: PUSH
27130: LD_VAR 0 7
27134: MINUS
27135: PUSH
27136: FOR_TO
27137: IFFALSE 27229
// begin if i = sort then
27139: LD_VAR 0 3
27143: PUSH
27144: LD_VAR 0 9
27148: EQUAL
27149: IFFALSE 27153
// break ;
27151: GO 27229
// if GetClass ( i ) = 3 then
27153: LD_VAR 0 3
27157: PPUSH
27158: CALL_OW 257
27162: PUSH
27163: LD_INT 3
27165: EQUAL
27166: IFFALSE 27170
// continue ;
27168: GO 27136
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27170: LD_ADDR_VAR 0 11
27174: PUSH
27175: LD_VAR 0 11
27179: PPUSH
27180: LD_VAR 0 11
27184: PUSH
27185: LD_INT 1
27187: PLUS
27188: PPUSH
27189: LD_VAR 0 9
27193: PUSH
27194: LD_VAR 0 3
27198: ARRAY
27199: PPUSH
27200: CALL_OW 2
27204: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_VAR 0 4
27214: PUSH
27215: LD_VAR 0 9
27219: PUSH
27220: LD_VAR 0 3
27224: ARRAY
27225: DIFF
27226: ST_TO_ADDR
// end ;
27227: GO 27136
27229: POP
27230: POP
// if p then
27231: LD_VAR 0 11
27235: IFFALSE 27260
// result := Replace ( result , 3 , p ) ;
27237: LD_ADDR_VAR 0 2
27241: PUSH
27242: LD_VAR 0 2
27246: PPUSH
27247: LD_INT 3
27249: PPUSH
27250: LD_VAR 0 11
27254: PPUSH
27255: CALL_OW 1
27259: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
27260: LD_VAR 0 4
27264: PUSH
27265: LD_INT 6
27267: GREATER
27268: PUSH
27269: LD_VAR 0 6
27273: PUSH
27274: LD_INT 6
27276: LESS
27277: AND
27278: IFFALSE 27472
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
27280: LD_ADDR_VAR 0 9
27284: PUSH
27285: LD_VAR 0 4
27289: PUSH
27290: LD_VAR 0 8
27294: PUSH
27295: LD_VAR 0 7
27299: UNION
27300: PUSH
27301: LD_VAR 0 6
27305: UNION
27306: DIFF
27307: PPUSH
27308: LD_INT 2
27310: PPUSH
27311: CALL 85138 0 2
27315: ST_TO_ADDR
// p := [ ] ;
27316: LD_ADDR_VAR 0 11
27320: PUSH
27321: EMPTY
27322: ST_TO_ADDR
// if sort then
27323: LD_VAR 0 9
27327: IFFALSE 27443
// for i = 1 to 6 - eng do
27329: LD_ADDR_VAR 0 3
27333: PUSH
27334: DOUBLE
27335: LD_INT 1
27337: DEC
27338: ST_TO_ADDR
27339: LD_INT 6
27341: PUSH
27342: LD_VAR 0 6
27346: MINUS
27347: PUSH
27348: FOR_TO
27349: IFFALSE 27441
// begin if i = sort then
27351: LD_VAR 0 3
27355: PUSH
27356: LD_VAR 0 9
27360: EQUAL
27361: IFFALSE 27365
// break ;
27363: GO 27441
// if GetClass ( i ) = 2 then
27365: LD_VAR 0 3
27369: PPUSH
27370: CALL_OW 257
27374: PUSH
27375: LD_INT 2
27377: EQUAL
27378: IFFALSE 27382
// continue ;
27380: GO 27348
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27382: LD_ADDR_VAR 0 11
27386: PUSH
27387: LD_VAR 0 11
27391: PPUSH
27392: LD_VAR 0 11
27396: PUSH
27397: LD_INT 1
27399: PLUS
27400: PPUSH
27401: LD_VAR 0 9
27405: PUSH
27406: LD_VAR 0 3
27410: ARRAY
27411: PPUSH
27412: CALL_OW 2
27416: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27417: LD_ADDR_VAR 0 4
27421: PUSH
27422: LD_VAR 0 4
27426: PUSH
27427: LD_VAR 0 9
27431: PUSH
27432: LD_VAR 0 3
27436: ARRAY
27437: DIFF
27438: ST_TO_ADDR
// end ;
27439: GO 27348
27441: POP
27442: POP
// if p then
27443: LD_VAR 0 11
27447: IFFALSE 27472
// result := Replace ( result , 2 , p ) ;
27449: LD_ADDR_VAR 0 2
27453: PUSH
27454: LD_VAR 0 2
27458: PPUSH
27459: LD_INT 2
27461: PPUSH
27462: LD_VAR 0 11
27466: PPUSH
27467: CALL_OW 1
27471: ST_TO_ADDR
// end ; exit ;
27472: GO 28860
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
27474: LD_EXP 114
27478: PUSH
27479: LD_EXP 113
27483: PUSH
27484: LD_VAR 0 1
27488: ARRAY
27489: ARRAY
27490: NOT
27491: PUSH
27492: LD_EXP 87
27496: PUSH
27497: LD_VAR 0 1
27501: ARRAY
27502: PPUSH
27503: LD_INT 30
27505: PUSH
27506: LD_INT 3
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PPUSH
27513: CALL_OW 72
27517: AND
27518: PUSH
27519: LD_EXP 92
27523: PUSH
27524: LD_VAR 0 1
27528: ARRAY
27529: AND
27530: IFFALSE 28138
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
27532: LD_ADDR_EXP 129
27536: PUSH
27537: LD_EXP 129
27541: PPUSH
27542: LD_VAR 0 1
27546: PPUSH
27547: LD_INT 5
27549: PPUSH
27550: CALL_OW 1
27554: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
27555: LD_ADDR_VAR 0 2
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: ST_TO_ADDR
// if sci > 1 then
27578: LD_VAR 0 8
27582: PUSH
27583: LD_INT 1
27585: GREATER
27586: IFFALSE 27614
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
27588: LD_ADDR_VAR 0 4
27592: PUSH
27593: LD_VAR 0 4
27597: PUSH
27598: LD_VAR 0 8
27602: PUSH
27603: LD_VAR 0 8
27607: PUSH
27608: LD_INT 1
27610: ARRAY
27611: DIFF
27612: DIFF
27613: ST_TO_ADDR
// if tmp and not sci then
27614: LD_VAR 0 4
27618: PUSH
27619: LD_VAR 0 8
27623: NOT
27624: AND
27625: IFFALSE 27694
// begin sort := SortBySkill ( tmp , 4 ) ;
27627: LD_ADDR_VAR 0 9
27631: PUSH
27632: LD_VAR 0 4
27636: PPUSH
27637: LD_INT 4
27639: PPUSH
27640: CALL 85138 0 2
27644: ST_TO_ADDR
// if sort then
27645: LD_VAR 0 9
27649: IFFALSE 27665
// p := sort [ 1 ] ;
27651: LD_ADDR_VAR 0 11
27655: PUSH
27656: LD_VAR 0 9
27660: PUSH
27661: LD_INT 1
27663: ARRAY
27664: ST_TO_ADDR
// if p then
27665: LD_VAR 0 11
27669: IFFALSE 27694
// result := Replace ( result , 4 , p ) ;
27671: LD_ADDR_VAR 0 2
27675: PUSH
27676: LD_VAR 0 2
27680: PPUSH
27681: LD_INT 4
27683: PPUSH
27684: LD_VAR 0 11
27688: PPUSH
27689: CALL_OW 1
27693: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
27694: LD_ADDR_VAR 0 4
27698: PUSH
27699: LD_VAR 0 4
27703: PUSH
27704: LD_VAR 0 7
27708: DIFF
27709: ST_TO_ADDR
// if tmp and mech < 6 then
27710: LD_VAR 0 4
27714: PUSH
27715: LD_VAR 0 7
27719: PUSH
27720: LD_INT 6
27722: LESS
27723: AND
27724: IFFALSE 27912
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
27726: LD_ADDR_VAR 0 9
27730: PUSH
27731: LD_VAR 0 4
27735: PUSH
27736: LD_VAR 0 8
27740: PUSH
27741: LD_VAR 0 7
27745: UNION
27746: DIFF
27747: PPUSH
27748: LD_INT 3
27750: PPUSH
27751: CALL 85138 0 2
27755: ST_TO_ADDR
// p := [ ] ;
27756: LD_ADDR_VAR 0 11
27760: PUSH
27761: EMPTY
27762: ST_TO_ADDR
// if sort then
27763: LD_VAR 0 9
27767: IFFALSE 27883
// for i = 1 to 6 - mech do
27769: LD_ADDR_VAR 0 3
27773: PUSH
27774: DOUBLE
27775: LD_INT 1
27777: DEC
27778: ST_TO_ADDR
27779: LD_INT 6
27781: PUSH
27782: LD_VAR 0 7
27786: MINUS
27787: PUSH
27788: FOR_TO
27789: IFFALSE 27881
// begin if i = sort then
27791: LD_VAR 0 3
27795: PUSH
27796: LD_VAR 0 9
27800: EQUAL
27801: IFFALSE 27805
// break ;
27803: GO 27881
// if GetClass ( i ) = 3 then
27805: LD_VAR 0 3
27809: PPUSH
27810: CALL_OW 257
27814: PUSH
27815: LD_INT 3
27817: EQUAL
27818: IFFALSE 27822
// continue ;
27820: GO 27788
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27822: LD_ADDR_VAR 0 11
27826: PUSH
27827: LD_VAR 0 11
27831: PPUSH
27832: LD_VAR 0 11
27836: PUSH
27837: LD_INT 1
27839: PLUS
27840: PPUSH
27841: LD_VAR 0 9
27845: PUSH
27846: LD_VAR 0 3
27850: ARRAY
27851: PPUSH
27852: CALL_OW 2
27856: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27857: LD_ADDR_VAR 0 4
27861: PUSH
27862: LD_VAR 0 4
27866: PUSH
27867: LD_VAR 0 9
27871: PUSH
27872: LD_VAR 0 3
27876: ARRAY
27877: DIFF
27878: ST_TO_ADDR
// end ;
27879: GO 27788
27881: POP
27882: POP
// if p then
27883: LD_VAR 0 11
27887: IFFALSE 27912
// result := Replace ( result , 3 , p ) ;
27889: LD_ADDR_VAR 0 2
27893: PUSH
27894: LD_VAR 0 2
27898: PPUSH
27899: LD_INT 3
27901: PPUSH
27902: LD_VAR 0 11
27906: PPUSH
27907: CALL_OW 1
27911: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
27912: LD_ADDR_VAR 0 4
27916: PUSH
27917: LD_VAR 0 4
27921: PUSH
27922: LD_VAR 0 6
27926: DIFF
27927: ST_TO_ADDR
// if tmp and eng < 6 then
27928: LD_VAR 0 4
27932: PUSH
27933: LD_VAR 0 6
27937: PUSH
27938: LD_INT 6
27940: LESS
27941: AND
27942: IFFALSE 28136
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
27944: LD_ADDR_VAR 0 9
27948: PUSH
27949: LD_VAR 0 4
27953: PUSH
27954: LD_VAR 0 8
27958: PUSH
27959: LD_VAR 0 7
27963: UNION
27964: PUSH
27965: LD_VAR 0 6
27969: UNION
27970: DIFF
27971: PPUSH
27972: LD_INT 2
27974: PPUSH
27975: CALL 85138 0 2
27979: ST_TO_ADDR
// p := [ ] ;
27980: LD_ADDR_VAR 0 11
27984: PUSH
27985: EMPTY
27986: ST_TO_ADDR
// if sort then
27987: LD_VAR 0 9
27991: IFFALSE 28107
// for i = 1 to 6 - eng do
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: DOUBLE
27999: LD_INT 1
28001: DEC
28002: ST_TO_ADDR
28003: LD_INT 6
28005: PUSH
28006: LD_VAR 0 6
28010: MINUS
28011: PUSH
28012: FOR_TO
28013: IFFALSE 28105
// begin if i = sort then
28015: LD_VAR 0 3
28019: PUSH
28020: LD_VAR 0 9
28024: EQUAL
28025: IFFALSE 28029
// break ;
28027: GO 28105
// if GetClass ( i ) = 2 then
28029: LD_VAR 0 3
28033: PPUSH
28034: CALL_OW 257
28038: PUSH
28039: LD_INT 2
28041: EQUAL
28042: IFFALSE 28046
// continue ;
28044: GO 28012
// p := Insert ( p , p + 1 , sort [ i ] ) ;
28046: LD_ADDR_VAR 0 11
28050: PUSH
28051: LD_VAR 0 11
28055: PPUSH
28056: LD_VAR 0 11
28060: PUSH
28061: LD_INT 1
28063: PLUS
28064: PPUSH
28065: LD_VAR 0 9
28069: PUSH
28070: LD_VAR 0 3
28074: ARRAY
28075: PPUSH
28076: CALL_OW 2
28080: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28081: LD_ADDR_VAR 0 4
28085: PUSH
28086: LD_VAR 0 4
28090: PUSH
28091: LD_VAR 0 9
28095: PUSH
28096: LD_VAR 0 3
28100: ARRAY
28101: DIFF
28102: ST_TO_ADDR
// end ;
28103: GO 28012
28105: POP
28106: POP
// if p then
28107: LD_VAR 0 11
28111: IFFALSE 28136
// result := Replace ( result , 2 , p ) ;
28113: LD_ADDR_VAR 0 2
28117: PUSH
28118: LD_VAR 0 2
28122: PPUSH
28123: LD_INT 2
28125: PPUSH
28126: LD_VAR 0 11
28130: PPUSH
28131: CALL_OW 1
28135: ST_TO_ADDR
// end ; exit ;
28136: GO 28860
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
28138: LD_EXP 114
28142: PUSH
28143: LD_EXP 113
28147: PUSH
28148: LD_VAR 0 1
28152: ARRAY
28153: ARRAY
28154: NOT
28155: PUSH
28156: LD_EXP 87
28160: PUSH
28161: LD_VAR 0 1
28165: ARRAY
28166: PPUSH
28167: LD_INT 30
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 72
28181: AND
28182: PUSH
28183: LD_EXP 92
28187: PUSH
28188: LD_VAR 0 1
28192: ARRAY
28193: NOT
28194: AND
28195: IFFALSE 28860
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
28197: LD_ADDR_EXP 129
28201: PUSH
28202: LD_EXP 129
28206: PPUSH
28207: LD_VAR 0 1
28211: PPUSH
28212: LD_INT 6
28214: PPUSH
28215: CALL_OW 1
28219: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
28220: LD_ADDR_VAR 0 2
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 0
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: ST_TO_ADDR
// if sci >= 1 then
28243: LD_VAR 0 8
28247: PUSH
28248: LD_INT 1
28250: GREATEREQUAL
28251: IFFALSE 28273
// tmp := tmp diff sci [ 1 ] ;
28253: LD_ADDR_VAR 0 4
28257: PUSH
28258: LD_VAR 0 4
28262: PUSH
28263: LD_VAR 0 8
28267: PUSH
28268: LD_INT 1
28270: ARRAY
28271: DIFF
28272: ST_TO_ADDR
// if tmp and not sci then
28273: LD_VAR 0 4
28277: PUSH
28278: LD_VAR 0 8
28282: NOT
28283: AND
28284: IFFALSE 28353
// begin sort := SortBySkill ( tmp , 4 ) ;
28286: LD_ADDR_VAR 0 9
28290: PUSH
28291: LD_VAR 0 4
28295: PPUSH
28296: LD_INT 4
28298: PPUSH
28299: CALL 85138 0 2
28303: ST_TO_ADDR
// if sort then
28304: LD_VAR 0 9
28308: IFFALSE 28324
// p := sort [ 1 ] ;
28310: LD_ADDR_VAR 0 11
28314: PUSH
28315: LD_VAR 0 9
28319: PUSH
28320: LD_INT 1
28322: ARRAY
28323: ST_TO_ADDR
// if p then
28324: LD_VAR 0 11
28328: IFFALSE 28353
// result := Replace ( result , 4 , p ) ;
28330: LD_ADDR_VAR 0 2
28334: PUSH
28335: LD_VAR 0 2
28339: PPUSH
28340: LD_INT 4
28342: PPUSH
28343: LD_VAR 0 11
28347: PPUSH
28348: CALL_OW 1
28352: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
28353: LD_ADDR_VAR 0 4
28357: PUSH
28358: LD_VAR 0 4
28362: PUSH
28363: LD_VAR 0 7
28367: DIFF
28368: ST_TO_ADDR
// if tmp and mech < 6 then
28369: LD_VAR 0 4
28373: PUSH
28374: LD_VAR 0 7
28378: PUSH
28379: LD_INT 6
28381: LESS
28382: AND
28383: IFFALSE 28565
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
28385: LD_ADDR_VAR 0 9
28389: PUSH
28390: LD_VAR 0 4
28394: PUSH
28395: LD_VAR 0 7
28399: DIFF
28400: PPUSH
28401: LD_INT 3
28403: PPUSH
28404: CALL 85138 0 2
28408: ST_TO_ADDR
// p := [ ] ;
28409: LD_ADDR_VAR 0 11
28413: PUSH
28414: EMPTY
28415: ST_TO_ADDR
// if sort then
28416: LD_VAR 0 9
28420: IFFALSE 28536
// for i = 1 to 6 - mech do
28422: LD_ADDR_VAR 0 3
28426: PUSH
28427: DOUBLE
28428: LD_INT 1
28430: DEC
28431: ST_TO_ADDR
28432: LD_INT 6
28434: PUSH
28435: LD_VAR 0 7
28439: MINUS
28440: PUSH
28441: FOR_TO
28442: IFFALSE 28534
// begin if i = sort then
28444: LD_VAR 0 3
28448: PUSH
28449: LD_VAR 0 9
28453: EQUAL
28454: IFFALSE 28458
// break ;
28456: GO 28534
// if GetClass ( i ) = 3 then
28458: LD_VAR 0 3
28462: PPUSH
28463: CALL_OW 257
28467: PUSH
28468: LD_INT 3
28470: EQUAL
28471: IFFALSE 28475
// continue ;
28473: GO 28441
// p := Insert ( p , p + 1 , sort [ i ] ) ;
28475: LD_ADDR_VAR 0 11
28479: PUSH
28480: LD_VAR 0 11
28484: PPUSH
28485: LD_VAR 0 11
28489: PUSH
28490: LD_INT 1
28492: PLUS
28493: PPUSH
28494: LD_VAR 0 9
28498: PUSH
28499: LD_VAR 0 3
28503: ARRAY
28504: PPUSH
28505: CALL_OW 2
28509: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28510: LD_ADDR_VAR 0 4
28514: PUSH
28515: LD_VAR 0 4
28519: PUSH
28520: LD_VAR 0 9
28524: PUSH
28525: LD_VAR 0 3
28529: ARRAY
28530: DIFF
28531: ST_TO_ADDR
// end ;
28532: GO 28441
28534: POP
28535: POP
// if p then
28536: LD_VAR 0 11
28540: IFFALSE 28565
// result := Replace ( result , 3 , p ) ;
28542: LD_ADDR_VAR 0 2
28546: PUSH
28547: LD_VAR 0 2
28551: PPUSH
28552: LD_INT 3
28554: PPUSH
28555: LD_VAR 0 11
28559: PPUSH
28560: CALL_OW 1
28564: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
28565: LD_ADDR_VAR 0 4
28569: PUSH
28570: LD_VAR 0 4
28574: PUSH
28575: LD_VAR 0 6
28579: DIFF
28580: ST_TO_ADDR
// if tmp and eng < 4 then
28581: LD_VAR 0 4
28585: PUSH
28586: LD_VAR 0 6
28590: PUSH
28591: LD_INT 4
28593: LESS
28594: AND
28595: IFFALSE 28785
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
28597: LD_ADDR_VAR 0 9
28601: PUSH
28602: LD_VAR 0 4
28606: PUSH
28607: LD_VAR 0 7
28611: PUSH
28612: LD_VAR 0 6
28616: UNION
28617: DIFF
28618: PPUSH
28619: LD_INT 2
28621: PPUSH
28622: CALL 85138 0 2
28626: ST_TO_ADDR
// p := [ ] ;
28627: LD_ADDR_VAR 0 11
28631: PUSH
28632: EMPTY
28633: ST_TO_ADDR
// if sort then
28634: LD_VAR 0 9
28638: IFFALSE 28754
// for i = 1 to 4 - eng do
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: DOUBLE
28646: LD_INT 1
28648: DEC
28649: ST_TO_ADDR
28650: LD_INT 4
28652: PUSH
28653: LD_VAR 0 6
28657: MINUS
28658: PUSH
28659: FOR_TO
28660: IFFALSE 28752
// begin if i = sort then
28662: LD_VAR 0 3
28666: PUSH
28667: LD_VAR 0 9
28671: EQUAL
28672: IFFALSE 28676
// break ;
28674: GO 28752
// if GetClass ( i ) = 2 then
28676: LD_VAR 0 3
28680: PPUSH
28681: CALL_OW 257
28685: PUSH
28686: LD_INT 2
28688: EQUAL
28689: IFFALSE 28693
// continue ;
28691: GO 28659
// p := Insert ( p , p + 1 , sort [ i ] ) ;
28693: LD_ADDR_VAR 0 11
28697: PUSH
28698: LD_VAR 0 11
28702: PPUSH
28703: LD_VAR 0 11
28707: PUSH
28708: LD_INT 1
28710: PLUS
28711: PPUSH
28712: LD_VAR 0 9
28716: PUSH
28717: LD_VAR 0 3
28721: ARRAY
28722: PPUSH
28723: CALL_OW 2
28727: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28728: LD_ADDR_VAR 0 4
28732: PUSH
28733: LD_VAR 0 4
28737: PUSH
28738: LD_VAR 0 9
28742: PUSH
28743: LD_VAR 0 3
28747: ARRAY
28748: DIFF
28749: ST_TO_ADDR
// end ;
28750: GO 28659
28752: POP
28753: POP
// if p then
28754: LD_VAR 0 11
28758: IFFALSE 28783
// result := Replace ( result , 2 , p ) ;
28760: LD_ADDR_VAR 0 2
28764: PUSH
28765: LD_VAR 0 2
28769: PPUSH
28770: LD_INT 2
28772: PPUSH
28773: LD_VAR 0 11
28777: PPUSH
28778: CALL_OW 1
28782: ST_TO_ADDR
// end else
28783: GO 28829
// for i = eng downto 5 do
28785: LD_ADDR_VAR 0 3
28789: PUSH
28790: DOUBLE
28791: LD_VAR 0 6
28795: INC
28796: ST_TO_ADDR
28797: LD_INT 5
28799: PUSH
28800: FOR_DOWNTO
28801: IFFALSE 28827
// tmp := tmp union eng [ i ] ;
28803: LD_ADDR_VAR 0 4
28807: PUSH
28808: LD_VAR 0 4
28812: PUSH
28813: LD_VAR 0 6
28817: PUSH
28818: LD_VAR 0 3
28822: ARRAY
28823: UNION
28824: ST_TO_ADDR
28825: GO 28800
28827: POP
28828: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
28829: LD_ADDR_VAR 0 2
28833: PUSH
28834: LD_VAR 0 2
28838: PPUSH
28839: LD_INT 1
28841: PPUSH
28842: LD_VAR 0 4
28846: PUSH
28847: LD_VAR 0 5
28851: DIFF
28852: PPUSH
28853: CALL_OW 1
28857: ST_TO_ADDR
// exit ;
28858: GO 28860
// end ; end ;
28860: LD_VAR 0 2
28864: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
28865: LD_INT 0
28867: PPUSH
28868: PPUSH
28869: PPUSH
// if not mc_bases then
28870: LD_EXP 87
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 28985
// for i = 1 to mc_bases do
28879: LD_ADDR_VAR 0 2
28883: PUSH
28884: DOUBLE
28885: LD_INT 1
28887: DEC
28888: ST_TO_ADDR
28889: LD_EXP 87
28893: PUSH
28894: FOR_TO
28895: IFFALSE 28976
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
28897: LD_ADDR_VAR 0 3
28901: PUSH
28902: LD_EXP 87
28906: PUSH
28907: LD_VAR 0 2
28911: ARRAY
28912: PPUSH
28913: LD_INT 21
28915: PUSH
28916: LD_INT 3
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 3
28925: PUSH
28926: LD_INT 24
28928: PUSH
28929: LD_INT 1000
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PPUSH
28944: CALL_OW 72
28948: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
28949: LD_ADDR_EXP 88
28953: PUSH
28954: LD_EXP 88
28958: PPUSH
28959: LD_VAR 0 2
28963: PPUSH
28964: LD_VAR 0 3
28968: PPUSH
28969: CALL_OW 1
28973: ST_TO_ADDR
// end ;
28974: GO 28894
28976: POP
28977: POP
// RaiseSailEvent ( 101 ) ;
28978: LD_INT 101
28980: PPUSH
28981: CALL_OW 427
// end ;
28985: LD_VAR 0 1
28989: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
28990: LD_INT 0
28992: PPUSH
28993: PPUSH
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
28998: PPUSH
// if not mc_bases then
28999: LD_EXP 87
29003: NOT
29004: IFFALSE 29008
// exit ;
29006: GO 29570
// for i = 1 to mc_bases do
29008: LD_ADDR_VAR 0 2
29012: PUSH
29013: DOUBLE
29014: LD_INT 1
29016: DEC
29017: ST_TO_ADDR
29018: LD_EXP 87
29022: PUSH
29023: FOR_TO
29024: IFFALSE 29561
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
29026: LD_ADDR_VAR 0 5
29030: PUSH
29031: LD_EXP 87
29035: PUSH
29036: LD_VAR 0 2
29040: ARRAY
29041: PUSH
29042: LD_EXP 116
29046: PUSH
29047: LD_VAR 0 2
29051: ARRAY
29052: UNION
29053: PPUSH
29054: LD_INT 21
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: LD_INT 3
29069: PUSH
29070: LD_INT 54
29072: PUSH
29073: EMPTY
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: LD_INT 24
29085: PUSH
29086: LD_INT 800
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PPUSH
29106: CALL_OW 72
29110: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
29111: LD_ADDR_VAR 0 6
29115: PUSH
29116: LD_EXP 87
29120: PUSH
29121: LD_VAR 0 2
29125: ARRAY
29126: PPUSH
29127: LD_INT 21
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: LD_INT 3
29142: PUSH
29143: LD_INT 54
29145: PUSH
29146: EMPTY
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 3
29155: PUSH
29156: LD_INT 24
29158: PUSH
29159: LD_INT 250
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 72
29183: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
29184: LD_ADDR_VAR 0 7
29188: PUSH
29189: LD_VAR 0 5
29193: PUSH
29194: LD_VAR 0 6
29198: DIFF
29199: ST_TO_ADDR
// if not need_heal_1 then
29200: LD_VAR 0 6
29204: NOT
29205: IFFALSE 29238
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
29207: LD_ADDR_EXP 90
29211: PUSH
29212: LD_EXP 90
29216: PPUSH
29217: LD_VAR 0 2
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PPUSH
29229: EMPTY
29230: PPUSH
29231: CALL 55589 0 3
29235: ST_TO_ADDR
29236: GO 29308
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
29238: LD_ADDR_EXP 90
29242: PUSH
29243: LD_EXP 90
29247: PPUSH
29248: LD_VAR 0 2
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PPUSH
29260: LD_EXP 90
29264: PUSH
29265: LD_VAR 0 2
29269: ARRAY
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: LD_INT 3
29277: PUSH
29278: LD_INT 24
29280: PUSH
29281: LD_INT 1000
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PPUSH
29292: CALL_OW 72
29296: PUSH
29297: LD_VAR 0 6
29301: UNION
29302: PPUSH
29303: CALL 55589 0 3
29307: ST_TO_ADDR
// if not need_heal_2 then
29308: LD_VAR 0 7
29312: NOT
29313: IFFALSE 29346
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
29315: LD_ADDR_EXP 90
29319: PUSH
29320: LD_EXP 90
29324: PPUSH
29325: LD_VAR 0 2
29329: PUSH
29330: LD_INT 2
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PPUSH
29337: EMPTY
29338: PPUSH
29339: CALL 55589 0 3
29343: ST_TO_ADDR
29344: GO 29378
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
29346: LD_ADDR_EXP 90
29350: PUSH
29351: LD_EXP 90
29355: PPUSH
29356: LD_VAR 0 2
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PPUSH
29368: LD_VAR 0 7
29372: PPUSH
29373: CALL 55589 0 3
29377: ST_TO_ADDR
// if need_heal_2 then
29378: LD_VAR 0 7
29382: IFFALSE 29543
// for j in need_heal_2 do
29384: LD_ADDR_VAR 0 3
29388: PUSH
29389: LD_VAR 0 7
29393: PUSH
29394: FOR_IN
29395: IFFALSE 29541
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
29397: LD_ADDR_VAR 0 5
29401: PUSH
29402: LD_EXP 87
29406: PUSH
29407: LD_VAR 0 2
29411: ARRAY
29412: PPUSH
29413: LD_INT 2
29415: PUSH
29416: LD_INT 30
29418: PUSH
29419: LD_INT 6
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 30
29428: PUSH
29429: LD_INT 7
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 30
29438: PUSH
29439: LD_INT 8
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 30
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 30
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: PPUSH
29474: CALL_OW 72
29478: ST_TO_ADDR
// if tmp then
29479: LD_VAR 0 5
29483: IFFALSE 29539
// begin k := NearestUnitToUnit ( tmp , j ) ;
29485: LD_ADDR_VAR 0 4
29489: PUSH
29490: LD_VAR 0 5
29494: PPUSH
29495: LD_VAR 0 3
29499: PPUSH
29500: CALL_OW 74
29504: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
29505: LD_VAR 0 3
29509: PPUSH
29510: LD_VAR 0 4
29514: PPUSH
29515: CALL_OW 296
29519: PUSH
29520: LD_INT 5
29522: GREATER
29523: IFFALSE 29539
// ComMoveUnit ( j , k ) ;
29525: LD_VAR 0 3
29529: PPUSH
29530: LD_VAR 0 4
29534: PPUSH
29535: CALL_OW 112
// end ; end ;
29539: GO 29394
29541: POP
29542: POP
// if not need_heal_1 and not need_heal_2 then
29543: LD_VAR 0 6
29547: NOT
29548: PUSH
29549: LD_VAR 0 7
29553: NOT
29554: AND
29555: IFFALSE 29559
// continue ;
29557: GO 29023
// end ;
29559: GO 29023
29561: POP
29562: POP
// RaiseSailEvent ( 102 ) ;
29563: LD_INT 102
29565: PPUSH
29566: CALL_OW 427
// end ;
29570: LD_VAR 0 1
29574: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
29575: LD_INT 0
29577: PPUSH
29578: PPUSH
29579: PPUSH
29580: PPUSH
29581: PPUSH
29582: PPUSH
29583: PPUSH
29584: PPUSH
// if not mc_bases then
29585: LD_EXP 87
29589: NOT
29590: IFFALSE 29594
// exit ;
29592: GO 30429
// for i = 1 to mc_bases do
29594: LD_ADDR_VAR 0 2
29598: PUSH
29599: DOUBLE
29600: LD_INT 1
29602: DEC
29603: ST_TO_ADDR
29604: LD_EXP 87
29608: PUSH
29609: FOR_TO
29610: IFFALSE 30427
// begin if not mc_building_need_repair [ i ] then
29612: LD_EXP 88
29616: PUSH
29617: LD_VAR 0 2
29621: ARRAY
29622: NOT
29623: IFFALSE 29797
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
29625: LD_ADDR_VAR 0 6
29629: PUSH
29630: LD_EXP 106
29634: PUSH
29635: LD_VAR 0 2
29639: ARRAY
29640: PPUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 24
29646: PUSH
29647: LD_INT 1000
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 34
29663: PUSH
29664: LD_INT 13
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 34
29673: PUSH
29674: LD_INT 52
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PPUSH
29690: CALL_OW 72
29694: ST_TO_ADDR
// if cranes then
29695: LD_VAR 0 6
29699: IFFALSE 29761
// for j in cranes do
29701: LD_ADDR_VAR 0 3
29705: PUSH
29706: LD_VAR 0 6
29710: PUSH
29711: FOR_IN
29712: IFFALSE 29759
// if not IsInArea ( j , mc_parking [ i ] ) then
29714: LD_VAR 0 3
29718: PPUSH
29719: LD_EXP 111
29723: PUSH
29724: LD_VAR 0 2
29728: ARRAY
29729: PPUSH
29730: CALL_OW 308
29734: NOT
29735: IFFALSE 29757
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29737: LD_VAR 0 3
29741: PPUSH
29742: LD_EXP 111
29746: PUSH
29747: LD_VAR 0 2
29751: ARRAY
29752: PPUSH
29753: CALL_OW 113
29757: GO 29711
29759: POP
29760: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
29761: LD_ADDR_EXP 89
29765: PUSH
29766: LD_EXP 89
29770: PPUSH
29771: LD_VAR 0 2
29775: PPUSH
29776: EMPTY
29777: PPUSH
29778: CALL_OW 1
29782: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
29783: LD_VAR 0 2
29787: PPUSH
29788: LD_INT 101
29790: PPUSH
29791: CALL 24698 0 2
// continue ;
29795: GO 29609
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
29797: LD_ADDR_EXP 93
29801: PUSH
29802: LD_EXP 93
29806: PPUSH
29807: LD_VAR 0 2
29811: PPUSH
29812: EMPTY
29813: PPUSH
29814: CALL_OW 1
29818: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
29819: LD_VAR 0 2
29823: PPUSH
29824: LD_INT 103
29826: PPUSH
29827: CALL 24698 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
29831: LD_ADDR_VAR 0 5
29835: PUSH
29836: LD_EXP 87
29840: PUSH
29841: LD_VAR 0 2
29845: ARRAY
29846: PUSH
29847: LD_EXP 116
29851: PUSH
29852: LD_VAR 0 2
29856: ARRAY
29857: UNION
29858: PPUSH
29859: LD_INT 2
29861: PUSH
29862: LD_INT 25
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 25
29874: PUSH
29875: LD_INT 16
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: PUSH
29887: EMPTY
29888: LIST
29889: PPUSH
29890: CALL_OW 72
29894: PUSH
29895: LD_EXP 90
29899: PUSH
29900: LD_VAR 0 2
29904: ARRAY
29905: PUSH
29906: LD_INT 1
29908: ARRAY
29909: PUSH
29910: LD_EXP 90
29914: PUSH
29915: LD_VAR 0 2
29919: ARRAY
29920: PUSH
29921: LD_INT 2
29923: ARRAY
29924: UNION
29925: DIFF
29926: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
29927: LD_ADDR_VAR 0 6
29931: PUSH
29932: LD_EXP 106
29936: PUSH
29937: LD_VAR 0 2
29941: ARRAY
29942: PPUSH
29943: LD_INT 2
29945: PUSH
29946: LD_INT 34
29948: PUSH
29949: LD_INT 13
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 34
29958: PUSH
29959: LD_INT 52
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: PPUSH
29971: CALL_OW 72
29975: ST_TO_ADDR
// if cranes then
29976: LD_VAR 0 6
29980: IFFALSE 30116
// begin for j in cranes do
29982: LD_ADDR_VAR 0 3
29986: PUSH
29987: LD_VAR 0 6
29991: PUSH
29992: FOR_IN
29993: IFFALSE 30114
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
29995: LD_VAR 0 3
29999: PPUSH
30000: CALL_OW 256
30004: PUSH
30005: LD_INT 500
30007: GREATEREQUAL
30008: PUSH
30009: LD_VAR 0 3
30013: PPUSH
30014: CALL_OW 314
30018: NOT
30019: AND
30020: IFFALSE 30054
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
30022: LD_VAR 0 3
30026: PPUSH
30027: LD_EXP 88
30031: PUSH
30032: LD_VAR 0 2
30036: ARRAY
30037: PPUSH
30038: LD_VAR 0 3
30042: PPUSH
30043: CALL_OW 74
30047: PPUSH
30048: CALL_OW 130
30052: GO 30112
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
30054: LD_VAR 0 3
30058: PPUSH
30059: CALL_OW 256
30063: PUSH
30064: LD_INT 500
30066: LESS
30067: PUSH
30068: LD_VAR 0 3
30072: PPUSH
30073: LD_EXP 111
30077: PUSH
30078: LD_VAR 0 2
30082: ARRAY
30083: PPUSH
30084: CALL_OW 308
30088: NOT
30089: AND
30090: IFFALSE 30112
// ComMoveToArea ( j , mc_parking [ i ] ) ;
30092: LD_VAR 0 3
30096: PPUSH
30097: LD_EXP 111
30101: PUSH
30102: LD_VAR 0 2
30106: ARRAY
30107: PPUSH
30108: CALL_OW 113
30112: GO 29992
30114: POP
30115: POP
// end ; if tmp > 3 then
30116: LD_VAR 0 5
30120: PUSH
30121: LD_INT 3
30123: GREATER
30124: IFFALSE 30144
// tmp := ShrinkArray ( tmp , 4 ) ;
30126: LD_ADDR_VAR 0 5
30130: PUSH
30131: LD_VAR 0 5
30135: PPUSH
30136: LD_INT 4
30138: PPUSH
30139: CALL 86815 0 2
30143: ST_TO_ADDR
// if not tmp then
30144: LD_VAR 0 5
30148: NOT
30149: IFFALSE 30153
// continue ;
30151: GO 29609
// for j in tmp do
30153: LD_ADDR_VAR 0 3
30157: PUSH
30158: LD_VAR 0 5
30162: PUSH
30163: FOR_IN
30164: IFFALSE 30423
// begin if IsInUnit ( j ) then
30166: LD_VAR 0 3
30170: PPUSH
30171: CALL_OW 310
30175: IFFALSE 30186
// ComExitBuilding ( j ) ;
30177: LD_VAR 0 3
30181: PPUSH
30182: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
30186: LD_VAR 0 3
30190: PUSH
30191: LD_EXP 89
30195: PUSH
30196: LD_VAR 0 2
30200: ARRAY
30201: IN
30202: NOT
30203: IFFALSE 30261
// begin SetTag ( j , 101 ) ;
30205: LD_VAR 0 3
30209: PPUSH
30210: LD_INT 101
30212: PPUSH
30213: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
30217: LD_ADDR_EXP 89
30221: PUSH
30222: LD_EXP 89
30226: PPUSH
30227: LD_VAR 0 2
30231: PUSH
30232: LD_EXP 89
30236: PUSH
30237: LD_VAR 0 2
30241: ARRAY
30242: PUSH
30243: LD_INT 1
30245: PLUS
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PPUSH
30251: LD_VAR 0 3
30255: PPUSH
30256: CALL 55589 0 3
30260: ST_TO_ADDR
// end ; wait ( 1 ) ;
30261: LD_INT 1
30263: PPUSH
30264: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
30268: LD_ADDR_VAR 0 7
30272: PUSH
30273: LD_EXP 88
30277: PUSH
30278: LD_VAR 0 2
30282: ARRAY
30283: ST_TO_ADDR
// if mc_scan [ i ] then
30284: LD_EXP 110
30288: PUSH
30289: LD_VAR 0 2
30293: ARRAY
30294: IFFALSE 30356
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
30296: LD_ADDR_VAR 0 7
30300: PUSH
30301: LD_EXP 88
30305: PUSH
30306: LD_VAR 0 2
30310: ARRAY
30311: PPUSH
30312: LD_INT 3
30314: PUSH
30315: LD_INT 30
30317: PUSH
30318: LD_INT 32
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 30
30327: PUSH
30328: LD_INT 33
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 30
30337: PUSH
30338: LD_INT 31
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: PPUSH
30351: CALL_OW 72
30355: ST_TO_ADDR
// if not to_repair_tmp then
30356: LD_VAR 0 7
30360: NOT
30361: IFFALSE 30365
// continue ;
30363: GO 30163
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
30365: LD_ADDR_VAR 0 8
30369: PUSH
30370: LD_VAR 0 7
30374: PPUSH
30375: LD_VAR 0 3
30379: PPUSH
30380: CALL_OW 74
30384: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_INT 16
30392: PPUSH
30393: CALL 58182 0 2
30397: PUSH
30398: LD_INT 4
30400: ARRAY
30401: PUSH
30402: LD_INT 5
30404: LESS
30405: IFFALSE 30421
// ComRepairBuilding ( j , to_repair ) ;
30407: LD_VAR 0 3
30411: PPUSH
30412: LD_VAR 0 8
30416: PPUSH
30417: CALL_OW 130
// end ;
30421: GO 30163
30423: POP
30424: POP
// end ;
30425: GO 29609
30427: POP
30428: POP
// end ;
30429: LD_VAR 0 1
30433: RET
// export function MC_Heal ; var i , j , tmp ; begin
30434: LD_INT 0
30436: PPUSH
30437: PPUSH
30438: PPUSH
30439: PPUSH
// if not mc_bases then
30440: LD_EXP 87
30444: NOT
30445: IFFALSE 30449
// exit ;
30447: GO 30851
// for i = 1 to mc_bases do
30449: LD_ADDR_VAR 0 2
30453: PUSH
30454: DOUBLE
30455: LD_INT 1
30457: DEC
30458: ST_TO_ADDR
30459: LD_EXP 87
30463: PUSH
30464: FOR_TO
30465: IFFALSE 30849
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
30467: LD_EXP 90
30471: PUSH
30472: LD_VAR 0 2
30476: ARRAY
30477: PUSH
30478: LD_INT 1
30480: ARRAY
30481: NOT
30482: PUSH
30483: LD_EXP 90
30487: PUSH
30488: LD_VAR 0 2
30492: ARRAY
30493: PUSH
30494: LD_INT 2
30496: ARRAY
30497: NOT
30498: AND
30499: IFFALSE 30537
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
30501: LD_ADDR_EXP 91
30505: PUSH
30506: LD_EXP 91
30510: PPUSH
30511: LD_VAR 0 2
30515: PPUSH
30516: EMPTY
30517: PPUSH
30518: CALL_OW 1
30522: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
30523: LD_VAR 0 2
30527: PPUSH
30528: LD_INT 102
30530: PPUSH
30531: CALL 24698 0 2
// continue ;
30535: GO 30464
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
30537: LD_ADDR_VAR 0 4
30541: PUSH
30542: LD_EXP 87
30546: PUSH
30547: LD_VAR 0 2
30551: ARRAY
30552: PPUSH
30553: LD_INT 25
30555: PUSH
30556: LD_INT 4
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PPUSH
30563: CALL_OW 72
30567: ST_TO_ADDR
// if not tmp then
30568: LD_VAR 0 4
30572: NOT
30573: IFFALSE 30577
// continue ;
30575: GO 30464
// if mc_taming [ i ] then
30577: LD_EXP 118
30581: PUSH
30582: LD_VAR 0 2
30586: ARRAY
30587: IFFALSE 30611
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
30589: LD_ADDR_EXP 118
30593: PUSH
30594: LD_EXP 118
30598: PPUSH
30599: LD_VAR 0 2
30603: PPUSH
30604: EMPTY
30605: PPUSH
30606: CALL_OW 1
30610: ST_TO_ADDR
// for j in tmp do
30611: LD_ADDR_VAR 0 3
30615: PUSH
30616: LD_VAR 0 4
30620: PUSH
30621: FOR_IN
30622: IFFALSE 30845
// begin if IsInUnit ( j ) then
30624: LD_VAR 0 3
30628: PPUSH
30629: CALL_OW 310
30633: IFFALSE 30644
// ComExitBuilding ( j ) ;
30635: LD_VAR 0 3
30639: PPUSH
30640: CALL_OW 122
// if not j in mc_healers [ i ] then
30644: LD_VAR 0 3
30648: PUSH
30649: LD_EXP 91
30653: PUSH
30654: LD_VAR 0 2
30658: ARRAY
30659: IN
30660: NOT
30661: IFFALSE 30707
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
30663: LD_ADDR_EXP 91
30667: PUSH
30668: LD_EXP 91
30672: PPUSH
30673: LD_VAR 0 2
30677: PUSH
30678: LD_EXP 91
30682: PUSH
30683: LD_VAR 0 2
30687: ARRAY
30688: PUSH
30689: LD_INT 1
30691: PLUS
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PPUSH
30697: LD_VAR 0 3
30701: PPUSH
30702: CALL 55589 0 3
30706: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
30707: LD_VAR 0 3
30711: PPUSH
30712: CALL_OW 110
30716: PUSH
30717: LD_INT 102
30719: NONEQUAL
30720: IFFALSE 30734
// SetTag ( j , 102 ) ;
30722: LD_VAR 0 3
30726: PPUSH
30727: LD_INT 102
30729: PPUSH
30730: CALL_OW 109
// Wait ( 3 ) ;
30734: LD_INT 3
30736: PPUSH
30737: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
30741: LD_EXP 90
30745: PUSH
30746: LD_VAR 0 2
30750: ARRAY
30751: PUSH
30752: LD_INT 1
30754: ARRAY
30755: IFFALSE 30787
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
30757: LD_VAR 0 3
30761: PPUSH
30762: LD_EXP 90
30766: PUSH
30767: LD_VAR 0 2
30771: ARRAY
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PUSH
30777: LD_INT 1
30779: ARRAY
30780: PPUSH
30781: CALL_OW 128
30785: GO 30843
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
30787: LD_VAR 0 3
30791: PPUSH
30792: CALL_OW 314
30796: NOT
30797: PUSH
30798: LD_EXP 90
30802: PUSH
30803: LD_VAR 0 2
30807: ARRAY
30808: PUSH
30809: LD_INT 2
30811: ARRAY
30812: AND
30813: IFFALSE 30843
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
30815: LD_VAR 0 3
30819: PPUSH
30820: LD_EXP 90
30824: PUSH
30825: LD_VAR 0 2
30829: ARRAY
30830: PUSH
30831: LD_INT 2
30833: ARRAY
30834: PUSH
30835: LD_INT 1
30837: ARRAY
30838: PPUSH
30839: CALL_OW 128
// end ;
30843: GO 30621
30845: POP
30846: POP
// end ;
30847: GO 30464
30849: POP
30850: POP
// end ;
30851: LD_VAR 0 1
30855: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
30856: LD_INT 0
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
// if not mc_bases then
30863: LD_EXP 87
30867: NOT
30868: IFFALSE 30872
// exit ;
30870: GO 32015
// for i = 1 to mc_bases do
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: DOUBLE
30878: LD_INT 1
30880: DEC
30881: ST_TO_ADDR
30882: LD_EXP 87
30886: PUSH
30887: FOR_TO
30888: IFFALSE 32013
// begin if mc_scan [ i ] then
30890: LD_EXP 110
30894: PUSH
30895: LD_VAR 0 2
30899: ARRAY
30900: IFFALSE 30904
// continue ;
30902: GO 30887
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
30904: LD_EXP 92
30908: PUSH
30909: LD_VAR 0 2
30913: ARRAY
30914: NOT
30915: PUSH
30916: LD_EXP 94
30920: PUSH
30921: LD_VAR 0 2
30925: ARRAY
30926: NOT
30927: AND
30928: PUSH
30929: LD_EXP 93
30933: PUSH
30934: LD_VAR 0 2
30938: ARRAY
30939: AND
30940: IFFALSE 30978
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
30942: LD_ADDR_EXP 93
30946: PUSH
30947: LD_EXP 93
30951: PPUSH
30952: LD_VAR 0 2
30956: PPUSH
30957: EMPTY
30958: PPUSH
30959: CALL_OW 1
30963: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
30964: LD_VAR 0 2
30968: PPUSH
30969: LD_INT 103
30971: PPUSH
30972: CALL 24698 0 2
// continue ;
30976: GO 30887
// end ; if mc_construct_list [ i ] then
30978: LD_EXP 94
30982: PUSH
30983: LD_VAR 0 2
30987: ARRAY
30988: IFFALSE 31208
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
30990: LD_ADDR_VAR 0 4
30994: PUSH
30995: LD_EXP 87
30999: PUSH
31000: LD_VAR 0 2
31004: ARRAY
31005: PPUSH
31006: LD_INT 25
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PPUSH
31016: CALL_OW 72
31020: PUSH
31021: LD_EXP 89
31025: PUSH
31026: LD_VAR 0 2
31030: ARRAY
31031: DIFF
31032: ST_TO_ADDR
// if not tmp then
31033: LD_VAR 0 4
31037: NOT
31038: IFFALSE 31042
// continue ;
31040: GO 30887
// for j in tmp do
31042: LD_ADDR_VAR 0 3
31046: PUSH
31047: LD_VAR 0 4
31051: PUSH
31052: FOR_IN
31053: IFFALSE 31204
// begin if not mc_builders [ i ] then
31055: LD_EXP 93
31059: PUSH
31060: LD_VAR 0 2
31064: ARRAY
31065: NOT
31066: IFFALSE 31124
// begin SetTag ( j , 103 ) ;
31068: LD_VAR 0 3
31072: PPUSH
31073: LD_INT 103
31075: PPUSH
31076: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
31080: LD_ADDR_EXP 93
31084: PUSH
31085: LD_EXP 93
31089: PPUSH
31090: LD_VAR 0 2
31094: PUSH
31095: LD_EXP 93
31099: PUSH
31100: LD_VAR 0 2
31104: ARRAY
31105: PUSH
31106: LD_INT 1
31108: PLUS
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PPUSH
31114: LD_VAR 0 3
31118: PPUSH
31119: CALL 55589 0 3
31123: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
31124: LD_VAR 0 3
31128: PPUSH
31129: CALL_OW 310
31133: IFFALSE 31144
// ComExitBuilding ( j ) ;
31135: LD_VAR 0 3
31139: PPUSH
31140: CALL_OW 122
// wait ( 3 ) ;
31144: LD_INT 3
31146: PPUSH
31147: CALL_OW 67
// if not mc_construct_list [ i ] then
31151: LD_EXP 94
31155: PUSH
31156: LD_VAR 0 2
31160: ARRAY
31161: NOT
31162: IFFALSE 31166
// break ;
31164: GO 31204
// if not HasTask ( j ) then
31166: LD_VAR 0 3
31170: PPUSH
31171: CALL_OW 314
31175: NOT
31176: IFFALSE 31202
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
31178: LD_VAR 0 3
31182: PPUSH
31183: LD_EXP 94
31187: PUSH
31188: LD_VAR 0 2
31192: ARRAY
31193: PUSH
31194: LD_INT 1
31196: ARRAY
31197: PPUSH
31198: CALL 58440 0 2
// end ;
31202: GO 31052
31204: POP
31205: POP
// end else
31206: GO 32011
// if mc_build_list [ i ] then
31208: LD_EXP 92
31212: PUSH
31213: LD_VAR 0 2
31217: ARRAY
31218: IFFALSE 32011
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31220: LD_ADDR_VAR 0 5
31224: PUSH
31225: LD_EXP 87
31229: PUSH
31230: LD_VAR 0 2
31234: ARRAY
31235: PPUSH
31236: LD_INT 2
31238: PUSH
31239: LD_INT 30
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 30
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: PPUSH
31264: CALL_OW 72
31268: ST_TO_ADDR
// if depot then
31269: LD_VAR 0 5
31273: IFFALSE 31291
// depot := depot [ 1 ] else
31275: LD_ADDR_VAR 0 5
31279: PUSH
31280: LD_VAR 0 5
31284: PUSH
31285: LD_INT 1
31287: ARRAY
31288: ST_TO_ADDR
31289: GO 31299
// depot := 0 ;
31291: LD_ADDR_VAR 0 5
31295: PUSH
31296: LD_INT 0
31298: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
31299: LD_EXP 92
31303: PUSH
31304: LD_VAR 0 2
31308: ARRAY
31309: PUSH
31310: LD_INT 1
31312: ARRAY
31313: PUSH
31314: LD_INT 1
31316: ARRAY
31317: PPUSH
31318: CALL 58270 0 1
31322: PUSH
31323: LD_EXP 87
31327: PUSH
31328: LD_VAR 0 2
31332: ARRAY
31333: PPUSH
31334: LD_INT 2
31336: PUSH
31337: LD_INT 30
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 30
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: PPUSH
31362: CALL_OW 72
31366: NOT
31367: AND
31368: IFFALSE 31473
// begin for j = 1 to mc_build_list [ i ] do
31370: LD_ADDR_VAR 0 3
31374: PUSH
31375: DOUBLE
31376: LD_INT 1
31378: DEC
31379: ST_TO_ADDR
31380: LD_EXP 92
31384: PUSH
31385: LD_VAR 0 2
31389: ARRAY
31390: PUSH
31391: FOR_TO
31392: IFFALSE 31471
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
31394: LD_EXP 92
31398: PUSH
31399: LD_VAR 0 2
31403: ARRAY
31404: PUSH
31405: LD_VAR 0 3
31409: ARRAY
31410: PUSH
31411: LD_INT 1
31413: ARRAY
31414: PUSH
31415: LD_INT 2
31417: EQUAL
31418: IFFALSE 31469
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
31420: LD_ADDR_EXP 92
31424: PUSH
31425: LD_EXP 92
31429: PPUSH
31430: LD_VAR 0 2
31434: PPUSH
31435: LD_EXP 92
31439: PUSH
31440: LD_VAR 0 2
31444: ARRAY
31445: PPUSH
31446: LD_VAR 0 3
31450: PPUSH
31451: LD_INT 1
31453: PPUSH
31454: LD_INT 0
31456: PPUSH
31457: CALL 55007 0 4
31461: PPUSH
31462: CALL_OW 1
31466: ST_TO_ADDR
// break ;
31467: GO 31471
// end ;
31469: GO 31391
31471: POP
31472: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
31473: LD_EXP 92
31477: PUSH
31478: LD_VAR 0 2
31482: ARRAY
31483: PUSH
31484: LD_INT 1
31486: ARRAY
31487: PUSH
31488: LD_INT 1
31490: ARRAY
31491: PUSH
31492: LD_INT 0
31494: EQUAL
31495: PUSH
31496: LD_VAR 0 5
31500: PUSH
31501: LD_VAR 0 5
31505: PPUSH
31506: LD_EXP 92
31510: PUSH
31511: LD_VAR 0 2
31515: ARRAY
31516: PUSH
31517: LD_INT 1
31519: ARRAY
31520: PUSH
31521: LD_INT 1
31523: ARRAY
31524: PPUSH
31525: LD_EXP 92
31529: PUSH
31530: LD_VAR 0 2
31534: ARRAY
31535: PUSH
31536: LD_INT 1
31538: ARRAY
31539: PUSH
31540: LD_INT 2
31542: ARRAY
31543: PPUSH
31544: LD_EXP 92
31548: PUSH
31549: LD_VAR 0 2
31553: ARRAY
31554: PUSH
31555: LD_INT 1
31557: ARRAY
31558: PUSH
31559: LD_INT 3
31561: ARRAY
31562: PPUSH
31563: LD_EXP 92
31567: PUSH
31568: LD_VAR 0 2
31572: ARRAY
31573: PUSH
31574: LD_INT 1
31576: ARRAY
31577: PUSH
31578: LD_INT 4
31580: ARRAY
31581: PPUSH
31582: CALL 63004 0 5
31586: AND
31587: OR
31588: IFFALSE 31869
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
31590: LD_ADDR_VAR 0 4
31594: PUSH
31595: LD_EXP 87
31599: PUSH
31600: LD_VAR 0 2
31604: ARRAY
31605: PPUSH
31606: LD_INT 25
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PPUSH
31616: CALL_OW 72
31620: PUSH
31621: LD_EXP 89
31625: PUSH
31626: LD_VAR 0 2
31630: ARRAY
31631: DIFF
31632: ST_TO_ADDR
// if not tmp then
31633: LD_VAR 0 4
31637: NOT
31638: IFFALSE 31642
// continue ;
31640: GO 30887
// for j in tmp do
31642: LD_ADDR_VAR 0 3
31646: PUSH
31647: LD_VAR 0 4
31651: PUSH
31652: FOR_IN
31653: IFFALSE 31865
// begin if not mc_builders [ i ] then
31655: LD_EXP 93
31659: PUSH
31660: LD_VAR 0 2
31664: ARRAY
31665: NOT
31666: IFFALSE 31724
// begin SetTag ( j , 103 ) ;
31668: LD_VAR 0 3
31672: PPUSH
31673: LD_INT 103
31675: PPUSH
31676: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
31680: LD_ADDR_EXP 93
31684: PUSH
31685: LD_EXP 93
31689: PPUSH
31690: LD_VAR 0 2
31694: PUSH
31695: LD_EXP 93
31699: PUSH
31700: LD_VAR 0 2
31704: ARRAY
31705: PUSH
31706: LD_INT 1
31708: PLUS
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PPUSH
31714: LD_VAR 0 3
31718: PPUSH
31719: CALL 55589 0 3
31723: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
31724: LD_VAR 0 3
31728: PPUSH
31729: CALL_OW 310
31733: IFFALSE 31744
// ComExitBuilding ( j ) ;
31735: LD_VAR 0 3
31739: PPUSH
31740: CALL_OW 122
// wait ( 3 ) ;
31744: LD_INT 3
31746: PPUSH
31747: CALL_OW 67
// if not mc_build_list [ i ] then
31751: LD_EXP 92
31755: PUSH
31756: LD_VAR 0 2
31760: ARRAY
31761: NOT
31762: IFFALSE 31766
// break ;
31764: GO 31865
// if not HasTask ( j ) then
31766: LD_VAR 0 3
31770: PPUSH
31771: CALL_OW 314
31775: NOT
31776: IFFALSE 31863
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
31778: LD_VAR 0 3
31782: PPUSH
31783: LD_EXP 92
31787: PUSH
31788: LD_VAR 0 2
31792: ARRAY
31793: PUSH
31794: LD_INT 1
31796: ARRAY
31797: PUSH
31798: LD_INT 1
31800: ARRAY
31801: PPUSH
31802: LD_EXP 92
31806: PUSH
31807: LD_VAR 0 2
31811: ARRAY
31812: PUSH
31813: LD_INT 1
31815: ARRAY
31816: PUSH
31817: LD_INT 2
31819: ARRAY
31820: PPUSH
31821: LD_EXP 92
31825: PUSH
31826: LD_VAR 0 2
31830: ARRAY
31831: PUSH
31832: LD_INT 1
31834: ARRAY
31835: PUSH
31836: LD_INT 3
31838: ARRAY
31839: PPUSH
31840: LD_EXP 92
31844: PUSH
31845: LD_VAR 0 2
31849: ARRAY
31850: PUSH
31851: LD_INT 1
31853: ARRAY
31854: PUSH
31855: LD_INT 4
31857: ARRAY
31858: PPUSH
31859: CALL_OW 145
// end ;
31863: GO 31652
31865: POP
31866: POP
// end else
31867: GO 32011
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
31869: LD_EXP 87
31873: PUSH
31874: LD_VAR 0 2
31878: ARRAY
31879: PPUSH
31880: LD_EXP 92
31884: PUSH
31885: LD_VAR 0 2
31889: ARRAY
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: PUSH
31895: LD_INT 1
31897: ARRAY
31898: PPUSH
31899: LD_EXP 92
31903: PUSH
31904: LD_VAR 0 2
31908: ARRAY
31909: PUSH
31910: LD_INT 1
31912: ARRAY
31913: PUSH
31914: LD_INT 2
31916: ARRAY
31917: PPUSH
31918: LD_EXP 92
31922: PUSH
31923: LD_VAR 0 2
31927: ARRAY
31928: PUSH
31929: LD_INT 1
31931: ARRAY
31932: PUSH
31933: LD_INT 3
31935: ARRAY
31936: PPUSH
31937: LD_EXP 92
31941: PUSH
31942: LD_VAR 0 2
31946: ARRAY
31947: PUSH
31948: LD_INT 1
31950: ARRAY
31951: PUSH
31952: LD_INT 4
31954: ARRAY
31955: PPUSH
31956: CALL 62340 0 5
31960: NOT
31961: IFFALSE 32011
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
31963: LD_ADDR_EXP 92
31967: PUSH
31968: LD_EXP 92
31972: PPUSH
31973: LD_VAR 0 2
31977: PPUSH
31978: LD_EXP 92
31982: PUSH
31983: LD_VAR 0 2
31987: ARRAY
31988: PPUSH
31989: LD_INT 1
31991: PPUSH
31992: LD_INT 1
31994: NEG
31995: PPUSH
31996: LD_INT 0
31998: PPUSH
31999: CALL 55007 0 4
32003: PPUSH
32004: CALL_OW 1
32008: ST_TO_ADDR
// continue ;
32009: GO 30887
// end ; end ; end ;
32011: GO 30887
32013: POP
32014: POP
// end ;
32015: LD_VAR 0 1
32019: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
32020: LD_INT 0
32022: PPUSH
32023: PPUSH
32024: PPUSH
32025: PPUSH
32026: PPUSH
32027: PPUSH
// if not mc_bases then
32028: LD_EXP 87
32032: NOT
32033: IFFALSE 32037
// exit ;
32035: GO 32464
// for i = 1 to mc_bases do
32037: LD_ADDR_VAR 0 2
32041: PUSH
32042: DOUBLE
32043: LD_INT 1
32045: DEC
32046: ST_TO_ADDR
32047: LD_EXP 87
32051: PUSH
32052: FOR_TO
32053: IFFALSE 32462
// begin tmp := mc_build_upgrade [ i ] ;
32055: LD_ADDR_VAR 0 4
32059: PUSH
32060: LD_EXP 119
32064: PUSH
32065: LD_VAR 0 2
32069: ARRAY
32070: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
32071: LD_ADDR_VAR 0 6
32075: PUSH
32076: LD_EXP 120
32080: PUSH
32081: LD_VAR 0 2
32085: ARRAY
32086: PPUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 30
32092: PUSH
32093: LD_INT 6
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 30
32102: PUSH
32103: LD_INT 7
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: PPUSH
32115: CALL_OW 72
32119: ST_TO_ADDR
// if not tmp and not lab then
32120: LD_VAR 0 4
32124: NOT
32125: PUSH
32126: LD_VAR 0 6
32130: NOT
32131: AND
32132: IFFALSE 32136
// continue ;
32134: GO 32052
// if tmp then
32136: LD_VAR 0 4
32140: IFFALSE 32260
// for j in tmp do
32142: LD_ADDR_VAR 0 3
32146: PUSH
32147: LD_VAR 0 4
32151: PUSH
32152: FOR_IN
32153: IFFALSE 32258
// begin if UpgradeCost ( j ) then
32155: LD_VAR 0 3
32159: PPUSH
32160: CALL 62000 0 1
32164: IFFALSE 32256
// begin ComUpgrade ( j ) ;
32166: LD_VAR 0 3
32170: PPUSH
32171: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
32175: LD_ADDR_EXP 119
32179: PUSH
32180: LD_EXP 119
32184: PPUSH
32185: LD_VAR 0 2
32189: PPUSH
32190: LD_EXP 119
32194: PUSH
32195: LD_VAR 0 2
32199: ARRAY
32200: PUSH
32201: LD_VAR 0 3
32205: DIFF
32206: PPUSH
32207: CALL_OW 1
32211: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
32212: LD_ADDR_EXP 94
32216: PUSH
32217: LD_EXP 94
32221: PPUSH
32222: LD_VAR 0 2
32226: PUSH
32227: LD_EXP 94
32231: PUSH
32232: LD_VAR 0 2
32236: ARRAY
32237: PUSH
32238: LD_INT 1
32240: PLUS
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PPUSH
32246: LD_VAR 0 3
32250: PPUSH
32251: CALL 55589 0 3
32255: ST_TO_ADDR
// end ; end ;
32256: GO 32152
32258: POP
32259: POP
// if not lab or not mc_lab_upgrade [ i ] then
32260: LD_VAR 0 6
32264: NOT
32265: PUSH
32266: LD_EXP 121
32270: PUSH
32271: LD_VAR 0 2
32275: ARRAY
32276: NOT
32277: OR
32278: IFFALSE 32282
// continue ;
32280: GO 32052
// for j in lab do
32282: LD_ADDR_VAR 0 3
32286: PUSH
32287: LD_VAR 0 6
32291: PUSH
32292: FOR_IN
32293: IFFALSE 32458
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
32295: LD_VAR 0 3
32299: PPUSH
32300: CALL_OW 266
32304: PUSH
32305: LD_INT 6
32307: PUSH
32308: LD_INT 7
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: IN
32315: PUSH
32316: LD_VAR 0 3
32320: PPUSH
32321: CALL_OW 461
32325: PUSH
32326: LD_INT 1
32328: NONEQUAL
32329: AND
32330: IFFALSE 32456
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
32332: LD_VAR 0 3
32336: PPUSH
32337: LD_EXP 121
32341: PUSH
32342: LD_VAR 0 2
32346: ARRAY
32347: PUSH
32348: LD_INT 1
32350: ARRAY
32351: PPUSH
32352: CALL 62205 0 2
32356: IFFALSE 32456
// begin ComCancel ( j ) ;
32358: LD_VAR 0 3
32362: PPUSH
32363: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
32367: LD_VAR 0 3
32371: PPUSH
32372: LD_EXP 121
32376: PUSH
32377: LD_VAR 0 2
32381: ARRAY
32382: PUSH
32383: LD_INT 1
32385: ARRAY
32386: PPUSH
32387: CALL_OW 207
// if not j in mc_construct_list [ i ] then
32391: LD_VAR 0 3
32395: PUSH
32396: LD_EXP 94
32400: PUSH
32401: LD_VAR 0 2
32405: ARRAY
32406: IN
32407: NOT
32408: IFFALSE 32454
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
32410: LD_ADDR_EXP 94
32414: PUSH
32415: LD_EXP 94
32419: PPUSH
32420: LD_VAR 0 2
32424: PUSH
32425: LD_EXP 94
32429: PUSH
32430: LD_VAR 0 2
32434: ARRAY
32435: PUSH
32436: LD_INT 1
32438: PLUS
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PPUSH
32444: LD_VAR 0 3
32448: PPUSH
32449: CALL 55589 0 3
32453: ST_TO_ADDR
// break ;
32454: GO 32458
// end ; end ; end ;
32456: GO 32292
32458: POP
32459: POP
// end ;
32460: GO 32052
32462: POP
32463: POP
// end ;
32464: LD_VAR 0 1
32468: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
32469: LD_INT 0
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
// if not mc_bases then
32480: LD_EXP 87
32484: NOT
32485: IFFALSE 32489
// exit ;
32487: GO 32894
// for i = 1 to mc_bases do
32489: LD_ADDR_VAR 0 2
32493: PUSH
32494: DOUBLE
32495: LD_INT 1
32497: DEC
32498: ST_TO_ADDR
32499: LD_EXP 87
32503: PUSH
32504: FOR_TO
32505: IFFALSE 32892
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
32507: LD_EXP 95
32511: PUSH
32512: LD_VAR 0 2
32516: ARRAY
32517: NOT
32518: PUSH
32519: LD_EXP 87
32523: PUSH
32524: LD_VAR 0 2
32528: ARRAY
32529: PPUSH
32530: LD_INT 30
32532: PUSH
32533: LD_INT 3
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PPUSH
32540: CALL_OW 72
32544: NOT
32545: OR
32546: IFFALSE 32550
// continue ;
32548: GO 32504
// busy := false ;
32550: LD_ADDR_VAR 0 8
32554: PUSH
32555: LD_INT 0
32557: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32558: LD_ADDR_VAR 0 4
32562: PUSH
32563: LD_EXP 87
32567: PUSH
32568: LD_VAR 0 2
32572: ARRAY
32573: PPUSH
32574: LD_INT 30
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PPUSH
32584: CALL_OW 72
32588: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
32589: LD_ADDR_VAR 0 6
32593: PUSH
32594: LD_EXP 95
32598: PUSH
32599: LD_VAR 0 2
32603: ARRAY
32604: PPUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 30
32610: PUSH
32611: LD_INT 32
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 30
32620: PUSH
32621: LD_INT 33
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: PPUSH
32633: CALL_OW 72
32637: ST_TO_ADDR
// if not t then
32638: LD_VAR 0 6
32642: NOT
32643: IFFALSE 32647
// continue ;
32645: GO 32504
// for j in tmp do
32647: LD_ADDR_VAR 0 3
32651: PUSH
32652: LD_VAR 0 4
32656: PUSH
32657: FOR_IN
32658: IFFALSE 32688
// if not BuildingStatus ( j ) = bs_idle then
32660: LD_VAR 0 3
32664: PPUSH
32665: CALL_OW 461
32669: PUSH
32670: LD_INT 2
32672: EQUAL
32673: NOT
32674: IFFALSE 32686
// begin busy := true ;
32676: LD_ADDR_VAR 0 8
32680: PUSH
32681: LD_INT 1
32683: ST_TO_ADDR
// break ;
32684: GO 32688
// end ;
32686: GO 32657
32688: POP
32689: POP
// if busy then
32690: LD_VAR 0 8
32694: IFFALSE 32698
// continue ;
32696: GO 32504
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
32698: LD_ADDR_VAR 0 7
32702: PUSH
32703: LD_VAR 0 6
32707: PPUSH
32708: LD_INT 35
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PPUSH
32718: CALL_OW 72
32722: ST_TO_ADDR
// if tw then
32723: LD_VAR 0 7
32727: IFFALSE 32804
// begin tw := tw [ 1 ] ;
32729: LD_ADDR_VAR 0 7
32733: PUSH
32734: LD_VAR 0 7
32738: PUSH
32739: LD_INT 1
32741: ARRAY
32742: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
32743: LD_ADDR_VAR 0 9
32747: PUSH
32748: LD_VAR 0 7
32752: PPUSH
32753: LD_EXP 112
32757: PUSH
32758: LD_VAR 0 2
32762: ARRAY
32763: PPUSH
32764: CALL 60559 0 2
32768: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
32769: LD_EXP 126
32773: PUSH
32774: LD_VAR 0 2
32778: ARRAY
32779: IFFALSE 32802
// if not weapon in mc_allowed_tower_weapons [ i ] then
32781: LD_VAR 0 9
32785: PUSH
32786: LD_EXP 126
32790: PUSH
32791: LD_VAR 0 2
32795: ARRAY
32796: IN
32797: NOT
32798: IFFALSE 32802
// continue ;
32800: GO 32504
// end else
32802: GO 32867
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
32804: LD_ADDR_VAR 0 5
32808: PUSH
32809: LD_EXP 95
32813: PUSH
32814: LD_VAR 0 2
32818: ARRAY
32819: PPUSH
32820: LD_VAR 0 4
32824: PPUSH
32825: CALL 86061 0 2
32829: ST_TO_ADDR
// if not tmp2 then
32830: LD_VAR 0 5
32834: NOT
32835: IFFALSE 32839
// continue ;
32837: GO 32504
// tw := tmp2 [ 1 ] ;
32839: LD_ADDR_VAR 0 7
32843: PUSH
32844: LD_VAR 0 5
32848: PUSH
32849: LD_INT 1
32851: ARRAY
32852: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
32853: LD_ADDR_VAR 0 9
32857: PUSH
32858: LD_VAR 0 5
32862: PUSH
32863: LD_INT 2
32865: ARRAY
32866: ST_TO_ADDR
// end ; if not weapon then
32867: LD_VAR 0 9
32871: NOT
32872: IFFALSE 32876
// continue ;
32874: GO 32504
// ComPlaceWeapon ( tw , weapon ) ;
32876: LD_VAR 0 7
32880: PPUSH
32881: LD_VAR 0 9
32885: PPUSH
32886: CALL_OW 148
// end ;
32890: GO 32504
32892: POP
32893: POP
// end ;
32894: LD_VAR 0 1
32898: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
32899: LD_INT 0
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
32906: PPUSH
// if not mc_bases then
32907: LD_EXP 87
32911: NOT
32912: IFFALSE 32916
// exit ;
32914: GO 33692
// for i = 1 to mc_bases do
32916: LD_ADDR_VAR 0 2
32920: PUSH
32921: DOUBLE
32922: LD_INT 1
32924: DEC
32925: ST_TO_ADDR
32926: LD_EXP 87
32930: PUSH
32931: FOR_TO
32932: IFFALSE 33690
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
32934: LD_EXP 100
32938: PUSH
32939: LD_VAR 0 2
32943: ARRAY
32944: NOT
32945: PUSH
32946: LD_EXP 100
32950: PUSH
32951: LD_VAR 0 2
32955: ARRAY
32956: PUSH
32957: LD_EXP 101
32961: PUSH
32962: LD_VAR 0 2
32966: ARRAY
32967: EQUAL
32968: OR
32969: PUSH
32970: LD_EXP 110
32974: PUSH
32975: LD_VAR 0 2
32979: ARRAY
32980: OR
32981: IFFALSE 32985
// continue ;
32983: GO 32931
// if mc_miners [ i ] then
32985: LD_EXP 101
32989: PUSH
32990: LD_VAR 0 2
32994: ARRAY
32995: IFFALSE 33377
// begin for j = mc_miners [ i ] downto 1 do
32997: LD_ADDR_VAR 0 3
33001: PUSH
33002: DOUBLE
33003: LD_EXP 101
33007: PUSH
33008: LD_VAR 0 2
33012: ARRAY
33013: INC
33014: ST_TO_ADDR
33015: LD_INT 1
33017: PUSH
33018: FOR_DOWNTO
33019: IFFALSE 33375
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
33021: LD_EXP 101
33025: PUSH
33026: LD_VAR 0 2
33030: ARRAY
33031: PUSH
33032: LD_VAR 0 3
33036: ARRAY
33037: PPUSH
33038: CALL_OW 301
33042: PUSH
33043: LD_EXP 101
33047: PUSH
33048: LD_VAR 0 2
33052: ARRAY
33053: PUSH
33054: LD_VAR 0 3
33058: ARRAY
33059: PPUSH
33060: CALL_OW 257
33064: PUSH
33065: LD_INT 1
33067: NONEQUAL
33068: OR
33069: IFFALSE 33132
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
33071: LD_ADDR_VAR 0 5
33075: PUSH
33076: LD_EXP 101
33080: PUSH
33081: LD_VAR 0 2
33085: ARRAY
33086: PUSH
33087: LD_EXP 101
33091: PUSH
33092: LD_VAR 0 2
33096: ARRAY
33097: PUSH
33098: LD_VAR 0 3
33102: ARRAY
33103: DIFF
33104: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
33105: LD_ADDR_EXP 101
33109: PUSH
33110: LD_EXP 101
33114: PPUSH
33115: LD_VAR 0 2
33119: PPUSH
33120: LD_VAR 0 5
33124: PPUSH
33125: CALL_OW 1
33129: ST_TO_ADDR
// continue ;
33130: GO 33018
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
33132: LD_EXP 101
33136: PUSH
33137: LD_VAR 0 2
33141: ARRAY
33142: PUSH
33143: LD_VAR 0 3
33147: ARRAY
33148: PPUSH
33149: CALL_OW 257
33153: PUSH
33154: LD_INT 1
33156: EQUAL
33157: PUSH
33158: LD_EXP 101
33162: PUSH
33163: LD_VAR 0 2
33167: ARRAY
33168: PUSH
33169: LD_VAR 0 3
33173: ARRAY
33174: PPUSH
33175: CALL_OW 459
33179: NOT
33180: AND
33181: PUSH
33182: LD_EXP 101
33186: PUSH
33187: LD_VAR 0 2
33191: ARRAY
33192: PUSH
33193: LD_VAR 0 3
33197: ARRAY
33198: PPUSH
33199: CALL_OW 314
33203: NOT
33204: AND
33205: IFFALSE 33373
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
33207: LD_EXP 101
33211: PUSH
33212: LD_VAR 0 2
33216: ARRAY
33217: PUSH
33218: LD_VAR 0 3
33222: ARRAY
33223: PPUSH
33224: CALL_OW 310
33228: IFFALSE 33251
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
33230: LD_EXP 101
33234: PUSH
33235: LD_VAR 0 2
33239: ARRAY
33240: PUSH
33241: LD_VAR 0 3
33245: ARRAY
33246: PPUSH
33247: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
33251: LD_EXP 101
33255: PUSH
33256: LD_VAR 0 2
33260: ARRAY
33261: PUSH
33262: LD_VAR 0 3
33266: ARRAY
33267: PPUSH
33268: CALL_OW 314
33272: NOT
33273: IFFALSE 33373
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
33275: LD_EXP 101
33279: PUSH
33280: LD_VAR 0 2
33284: ARRAY
33285: PUSH
33286: LD_VAR 0 3
33290: ARRAY
33291: PPUSH
33292: LD_EXP 100
33296: PUSH
33297: LD_VAR 0 2
33301: ARRAY
33302: PUSH
33303: LD_VAR 0 3
33307: PUSH
33308: LD_EXP 100
33312: PUSH
33313: LD_VAR 0 2
33317: ARRAY
33318: MOD
33319: PUSH
33320: LD_INT 1
33322: PLUS
33323: ARRAY
33324: PUSH
33325: LD_INT 1
33327: ARRAY
33328: PPUSH
33329: LD_EXP 100
33333: PUSH
33334: LD_VAR 0 2
33338: ARRAY
33339: PUSH
33340: LD_VAR 0 3
33344: PUSH
33345: LD_EXP 100
33349: PUSH
33350: LD_VAR 0 2
33354: ARRAY
33355: MOD
33356: PUSH
33357: LD_INT 1
33359: PLUS
33360: ARRAY
33361: PUSH
33362: LD_INT 2
33364: ARRAY
33365: PPUSH
33366: LD_INT 0
33368: PPUSH
33369: CALL_OW 193
// end ; end ;
33373: GO 33018
33375: POP
33376: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
33377: LD_ADDR_VAR 0 5
33381: PUSH
33382: LD_EXP 87
33386: PUSH
33387: LD_VAR 0 2
33391: ARRAY
33392: PPUSH
33393: LD_INT 2
33395: PUSH
33396: LD_INT 30
33398: PUSH
33399: LD_INT 4
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 30
33408: PUSH
33409: LD_INT 5
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 30
33418: PUSH
33419: LD_INT 32
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: PPUSH
33432: CALL_OW 72
33436: ST_TO_ADDR
// if not tmp then
33437: LD_VAR 0 5
33441: NOT
33442: IFFALSE 33446
// continue ;
33444: GO 32931
// list := [ ] ;
33446: LD_ADDR_VAR 0 6
33450: PUSH
33451: EMPTY
33452: ST_TO_ADDR
// for j in tmp do
33453: LD_ADDR_VAR 0 3
33457: PUSH
33458: LD_VAR 0 5
33462: PUSH
33463: FOR_IN
33464: IFFALSE 33533
// begin for k in UnitsInside ( j ) do
33466: LD_ADDR_VAR 0 4
33470: PUSH
33471: LD_VAR 0 3
33475: PPUSH
33476: CALL_OW 313
33480: PUSH
33481: FOR_IN
33482: IFFALSE 33529
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
33484: LD_VAR 0 4
33488: PPUSH
33489: CALL_OW 257
33493: PUSH
33494: LD_INT 1
33496: EQUAL
33497: PUSH
33498: LD_VAR 0 4
33502: PPUSH
33503: CALL_OW 459
33507: NOT
33508: AND
33509: IFFALSE 33527
// list := list ^ k ;
33511: LD_ADDR_VAR 0 6
33515: PUSH
33516: LD_VAR 0 6
33520: PUSH
33521: LD_VAR 0 4
33525: ADD
33526: ST_TO_ADDR
33527: GO 33481
33529: POP
33530: POP
// end ;
33531: GO 33463
33533: POP
33534: POP
// list := list diff mc_miners [ i ] ;
33535: LD_ADDR_VAR 0 6
33539: PUSH
33540: LD_VAR 0 6
33544: PUSH
33545: LD_EXP 101
33549: PUSH
33550: LD_VAR 0 2
33554: ARRAY
33555: DIFF
33556: ST_TO_ADDR
// if not list then
33557: LD_VAR 0 6
33561: NOT
33562: IFFALSE 33566
// continue ;
33564: GO 32931
// k := mc_mines [ i ] - mc_miners [ i ] ;
33566: LD_ADDR_VAR 0 4
33570: PUSH
33571: LD_EXP 100
33575: PUSH
33576: LD_VAR 0 2
33580: ARRAY
33581: PUSH
33582: LD_EXP 101
33586: PUSH
33587: LD_VAR 0 2
33591: ARRAY
33592: MINUS
33593: ST_TO_ADDR
// if k > list then
33594: LD_VAR 0 4
33598: PUSH
33599: LD_VAR 0 6
33603: GREATER
33604: IFFALSE 33616
// k := list ;
33606: LD_ADDR_VAR 0 4
33610: PUSH
33611: LD_VAR 0 6
33615: ST_TO_ADDR
// for j = 1 to k do
33616: LD_ADDR_VAR 0 3
33620: PUSH
33621: DOUBLE
33622: LD_INT 1
33624: DEC
33625: ST_TO_ADDR
33626: LD_VAR 0 4
33630: PUSH
33631: FOR_TO
33632: IFFALSE 33686
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
33634: LD_ADDR_EXP 101
33638: PUSH
33639: LD_EXP 101
33643: PPUSH
33644: LD_VAR 0 2
33648: PUSH
33649: LD_EXP 101
33653: PUSH
33654: LD_VAR 0 2
33658: ARRAY
33659: PUSH
33660: LD_INT 1
33662: PLUS
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PPUSH
33668: LD_VAR 0 6
33672: PUSH
33673: LD_VAR 0 3
33677: ARRAY
33678: PPUSH
33679: CALL 55589 0 3
33683: ST_TO_ADDR
33684: GO 33631
33686: POP
33687: POP
// end ;
33688: GO 32931
33690: POP
33691: POP
// end ;
33692: LD_VAR 0 1
33696: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
33697: LD_INT 0
33699: PPUSH
33700: PPUSH
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
33705: PPUSH
33706: PPUSH
33707: PPUSH
33708: PPUSH
// if not mc_bases then
33709: LD_EXP 87
33713: NOT
33714: IFFALSE 33718
// exit ;
33716: GO 35468
// for i = 1 to mc_bases do
33718: LD_ADDR_VAR 0 2
33722: PUSH
33723: DOUBLE
33724: LD_INT 1
33726: DEC
33727: ST_TO_ADDR
33728: LD_EXP 87
33732: PUSH
33733: FOR_TO
33734: IFFALSE 35466
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
33736: LD_EXP 87
33740: PUSH
33741: LD_VAR 0 2
33745: ARRAY
33746: NOT
33747: PUSH
33748: LD_EXP 94
33752: PUSH
33753: LD_VAR 0 2
33757: ARRAY
33758: OR
33759: IFFALSE 33763
// continue ;
33761: GO 33733
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
33763: LD_EXP 103
33767: PUSH
33768: LD_VAR 0 2
33772: ARRAY
33773: NOT
33774: PUSH
33775: LD_EXP 104
33779: PUSH
33780: LD_VAR 0 2
33784: ARRAY
33785: AND
33786: IFFALSE 33824
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
33788: LD_ADDR_EXP 104
33792: PUSH
33793: LD_EXP 104
33797: PPUSH
33798: LD_VAR 0 2
33802: PPUSH
33803: EMPTY
33804: PPUSH
33805: CALL_OW 1
33809: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
33810: LD_VAR 0 2
33814: PPUSH
33815: LD_INT 107
33817: PPUSH
33818: CALL 24698 0 2
// continue ;
33822: GO 33733
// end ; target := [ ] ;
33824: LD_ADDR_VAR 0 6
33828: PUSH
33829: EMPTY
33830: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
33831: LD_ADDR_VAR 0 3
33835: PUSH
33836: DOUBLE
33837: LD_EXP 103
33841: PUSH
33842: LD_VAR 0 2
33846: ARRAY
33847: INC
33848: ST_TO_ADDR
33849: LD_INT 1
33851: PUSH
33852: FOR_DOWNTO
33853: IFFALSE 34113
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
33855: LD_EXP 103
33859: PUSH
33860: LD_VAR 0 2
33864: ARRAY
33865: PUSH
33866: LD_VAR 0 3
33870: ARRAY
33871: PUSH
33872: LD_INT 2
33874: ARRAY
33875: PPUSH
33876: LD_EXP 103
33880: PUSH
33881: LD_VAR 0 2
33885: ARRAY
33886: PUSH
33887: LD_VAR 0 3
33891: ARRAY
33892: PUSH
33893: LD_INT 3
33895: ARRAY
33896: PPUSH
33897: CALL_OW 488
33901: PUSH
33902: LD_EXP 103
33906: PUSH
33907: LD_VAR 0 2
33911: ARRAY
33912: PUSH
33913: LD_VAR 0 3
33917: ARRAY
33918: PUSH
33919: LD_INT 2
33921: ARRAY
33922: PPUSH
33923: LD_EXP 103
33927: PUSH
33928: LD_VAR 0 2
33932: ARRAY
33933: PUSH
33934: LD_VAR 0 3
33938: ARRAY
33939: PUSH
33940: LD_INT 3
33942: ARRAY
33943: PPUSH
33944: CALL_OW 284
33948: PUSH
33949: LD_INT 0
33951: EQUAL
33952: AND
33953: IFFALSE 34008
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
33955: LD_ADDR_VAR 0 5
33959: PUSH
33960: LD_EXP 103
33964: PUSH
33965: LD_VAR 0 2
33969: ARRAY
33970: PPUSH
33971: LD_VAR 0 3
33975: PPUSH
33976: CALL_OW 3
33980: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
33981: LD_ADDR_EXP 103
33985: PUSH
33986: LD_EXP 103
33990: PPUSH
33991: LD_VAR 0 2
33995: PPUSH
33996: LD_VAR 0 5
34000: PPUSH
34001: CALL_OW 1
34005: ST_TO_ADDR
// continue ;
34006: GO 33852
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
34008: LD_EXP 87
34012: PUSH
34013: LD_VAR 0 2
34017: ARRAY
34018: PUSH
34019: LD_INT 1
34021: ARRAY
34022: PPUSH
34023: CALL_OW 255
34027: PPUSH
34028: LD_EXP 103
34032: PUSH
34033: LD_VAR 0 2
34037: ARRAY
34038: PUSH
34039: LD_VAR 0 3
34043: ARRAY
34044: PUSH
34045: LD_INT 2
34047: ARRAY
34048: PPUSH
34049: LD_EXP 103
34053: PUSH
34054: LD_VAR 0 2
34058: ARRAY
34059: PUSH
34060: LD_VAR 0 3
34064: ARRAY
34065: PUSH
34066: LD_INT 3
34068: ARRAY
34069: PPUSH
34070: LD_INT 30
34072: PPUSH
34073: CALL 56485 0 4
34077: PUSH
34078: LD_INT 4
34080: ARRAY
34081: PUSH
34082: LD_INT 0
34084: EQUAL
34085: IFFALSE 34111
// begin target := mc_crates [ i ] [ j ] ;
34087: LD_ADDR_VAR 0 6
34091: PUSH
34092: LD_EXP 103
34096: PUSH
34097: LD_VAR 0 2
34101: ARRAY
34102: PUSH
34103: LD_VAR 0 3
34107: ARRAY
34108: ST_TO_ADDR
// break ;
34109: GO 34113
// end ; end ;
34111: GO 33852
34113: POP
34114: POP
// if not target then
34115: LD_VAR 0 6
34119: NOT
34120: IFFALSE 34124
// continue ;
34122: GO 33733
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
34124: LD_ADDR_VAR 0 7
34128: PUSH
34129: LD_EXP 106
34133: PUSH
34134: LD_VAR 0 2
34138: ARRAY
34139: PPUSH
34140: LD_INT 2
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: LD_INT 58
34148: PUSH
34149: EMPTY
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 61
34158: PUSH
34159: EMPTY
34160: LIST
34161: PUSH
34162: LD_INT 33
34164: PUSH
34165: LD_INT 5
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 33
34174: PUSH
34175: LD_INT 3
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: LD_INT 34
34194: PUSH
34195: LD_INT 32
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 34
34204: PUSH
34205: LD_INT 51
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 34
34214: PUSH
34215: LD_INT 12
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PPUSH
34232: CALL_OW 72
34236: ST_TO_ADDR
// if not cargo then
34237: LD_VAR 0 7
34241: NOT
34242: IFFALSE 34885
// begin if mc_crates_collector [ i ] < 5 then
34244: LD_EXP 104
34248: PUSH
34249: LD_VAR 0 2
34253: ARRAY
34254: PUSH
34255: LD_INT 5
34257: LESS
34258: IFFALSE 34624
// begin if mc_ape [ i ] then
34260: LD_EXP 116
34264: PUSH
34265: LD_VAR 0 2
34269: ARRAY
34270: IFFALSE 34317
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
34272: LD_ADDR_VAR 0 5
34276: PUSH
34277: LD_EXP 116
34281: PUSH
34282: LD_VAR 0 2
34286: ARRAY
34287: PPUSH
34288: LD_INT 25
34290: PUSH
34291: LD_INT 16
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 24
34300: PUSH
34301: LD_INT 750
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PPUSH
34312: CALL_OW 72
34316: ST_TO_ADDR
// if not tmp then
34317: LD_VAR 0 5
34321: NOT
34322: IFFALSE 34369
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
34324: LD_ADDR_VAR 0 5
34328: PUSH
34329: LD_EXP 87
34333: PUSH
34334: LD_VAR 0 2
34338: ARRAY
34339: PPUSH
34340: LD_INT 25
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 24
34352: PUSH
34353: LD_INT 750
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PPUSH
34364: CALL_OW 72
34368: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
34369: LD_EXP 116
34373: PUSH
34374: LD_VAR 0 2
34378: ARRAY
34379: PUSH
34380: LD_EXP 87
34384: PUSH
34385: LD_VAR 0 2
34389: ARRAY
34390: PPUSH
34391: LD_INT 25
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 24
34403: PUSH
34404: LD_INT 750
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PPUSH
34415: CALL_OW 72
34419: AND
34420: PUSH
34421: LD_VAR 0 5
34425: PUSH
34426: LD_INT 5
34428: LESS
34429: AND
34430: IFFALSE 34512
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
34432: LD_ADDR_VAR 0 3
34436: PUSH
34437: LD_EXP 87
34441: PUSH
34442: LD_VAR 0 2
34446: ARRAY
34447: PPUSH
34448: LD_INT 25
34450: PUSH
34451: LD_INT 2
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 24
34460: PUSH
34461: LD_INT 750
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PPUSH
34472: CALL_OW 72
34476: PUSH
34477: FOR_IN
34478: IFFALSE 34510
// begin tmp := tmp union j ;
34480: LD_ADDR_VAR 0 5
34484: PUSH
34485: LD_VAR 0 5
34489: PUSH
34490: LD_VAR 0 3
34494: UNION
34495: ST_TO_ADDR
// if tmp >= 5 then
34496: LD_VAR 0 5
34500: PUSH
34501: LD_INT 5
34503: GREATEREQUAL
34504: IFFALSE 34508
// break ;
34506: GO 34510
// end ;
34508: GO 34477
34510: POP
34511: POP
// end ; if not tmp then
34512: LD_VAR 0 5
34516: NOT
34517: IFFALSE 34521
// continue ;
34519: GO 33733
// for j in tmp do
34521: LD_ADDR_VAR 0 3
34525: PUSH
34526: LD_VAR 0 5
34530: PUSH
34531: FOR_IN
34532: IFFALSE 34622
// if not GetTag ( j ) then
34534: LD_VAR 0 3
34538: PPUSH
34539: CALL_OW 110
34543: NOT
34544: IFFALSE 34620
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
34546: LD_ADDR_EXP 104
34550: PUSH
34551: LD_EXP 104
34555: PPUSH
34556: LD_VAR 0 2
34560: PUSH
34561: LD_EXP 104
34565: PUSH
34566: LD_VAR 0 2
34570: ARRAY
34571: PUSH
34572: LD_INT 1
34574: PLUS
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PPUSH
34580: LD_VAR 0 3
34584: PPUSH
34585: CALL 55589 0 3
34589: ST_TO_ADDR
// SetTag ( j , 107 ) ;
34590: LD_VAR 0 3
34594: PPUSH
34595: LD_INT 107
34597: PPUSH
34598: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
34602: LD_EXP 104
34606: PUSH
34607: LD_VAR 0 2
34611: ARRAY
34612: PUSH
34613: LD_INT 5
34615: GREATEREQUAL
34616: IFFALSE 34620
// break ;
34618: GO 34622
// end ;
34620: GO 34531
34622: POP
34623: POP
// end ; if mc_crates_collector [ i ] and target then
34624: LD_EXP 104
34628: PUSH
34629: LD_VAR 0 2
34633: ARRAY
34634: PUSH
34635: LD_VAR 0 6
34639: AND
34640: IFFALSE 34883
// begin if mc_crates_collector [ i ] < target [ 1 ] then
34642: LD_EXP 104
34646: PUSH
34647: LD_VAR 0 2
34651: ARRAY
34652: PUSH
34653: LD_VAR 0 6
34657: PUSH
34658: LD_INT 1
34660: ARRAY
34661: LESS
34662: IFFALSE 34682
// tmp := mc_crates_collector [ i ] else
34664: LD_ADDR_VAR 0 5
34668: PUSH
34669: LD_EXP 104
34673: PUSH
34674: LD_VAR 0 2
34678: ARRAY
34679: ST_TO_ADDR
34680: GO 34696
// tmp := target [ 1 ] ;
34682: LD_ADDR_VAR 0 5
34686: PUSH
34687: LD_VAR 0 6
34691: PUSH
34692: LD_INT 1
34694: ARRAY
34695: ST_TO_ADDR
// k := 0 ;
34696: LD_ADDR_VAR 0 4
34700: PUSH
34701: LD_INT 0
34703: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
34704: LD_ADDR_VAR 0 3
34708: PUSH
34709: LD_EXP 104
34713: PUSH
34714: LD_VAR 0 2
34718: ARRAY
34719: PUSH
34720: FOR_IN
34721: IFFALSE 34881
// begin k := k + 1 ;
34723: LD_ADDR_VAR 0 4
34727: PUSH
34728: LD_VAR 0 4
34732: PUSH
34733: LD_INT 1
34735: PLUS
34736: ST_TO_ADDR
// if k > tmp then
34737: LD_VAR 0 4
34741: PUSH
34742: LD_VAR 0 5
34746: GREATER
34747: IFFALSE 34751
// break ;
34749: GO 34881
// if not GetClass ( j ) in [ 2 , 16 ] then
34751: LD_VAR 0 3
34755: PPUSH
34756: CALL_OW 257
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 16
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: IN
34771: NOT
34772: IFFALSE 34825
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
34774: LD_ADDR_EXP 104
34778: PUSH
34779: LD_EXP 104
34783: PPUSH
34784: LD_VAR 0 2
34788: PPUSH
34789: LD_EXP 104
34793: PUSH
34794: LD_VAR 0 2
34798: ARRAY
34799: PUSH
34800: LD_VAR 0 3
34804: DIFF
34805: PPUSH
34806: CALL_OW 1
34810: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34811: LD_VAR 0 3
34815: PPUSH
34816: LD_INT 0
34818: PPUSH
34819: CALL_OW 109
// continue ;
34823: GO 34720
// end ; if IsInUnit ( j ) then
34825: LD_VAR 0 3
34829: PPUSH
34830: CALL_OW 310
34834: IFFALSE 34845
// ComExitBuilding ( j ) ;
34836: LD_VAR 0 3
34840: PPUSH
34841: CALL_OW 122
// wait ( 3 ) ;
34845: LD_INT 3
34847: PPUSH
34848: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
34852: LD_VAR 0 3
34856: PPUSH
34857: LD_VAR 0 6
34861: PUSH
34862: LD_INT 2
34864: ARRAY
34865: PPUSH
34866: LD_VAR 0 6
34870: PUSH
34871: LD_INT 3
34873: ARRAY
34874: PPUSH
34875: CALL_OW 117
// end ;
34879: GO 34720
34881: POP
34882: POP
// end ; end else
34883: GO 35464
// begin for j in cargo do
34885: LD_ADDR_VAR 0 3
34889: PUSH
34890: LD_VAR 0 7
34894: PUSH
34895: FOR_IN
34896: IFFALSE 35462
// begin if GetTag ( j ) <> 0 then
34898: LD_VAR 0 3
34902: PPUSH
34903: CALL_OW 110
34907: PUSH
34908: LD_INT 0
34910: NONEQUAL
34911: IFFALSE 34915
// continue ;
34913: GO 34895
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
34915: LD_VAR 0 3
34919: PPUSH
34920: CALL_OW 256
34924: PUSH
34925: LD_INT 1000
34927: LESS
34928: PUSH
34929: LD_VAR 0 3
34933: PPUSH
34934: LD_EXP 111
34938: PUSH
34939: LD_VAR 0 2
34943: ARRAY
34944: PPUSH
34945: CALL_OW 308
34949: NOT
34950: AND
34951: IFFALSE 34973
// ComMoveToArea ( j , mc_parking [ i ] ) ;
34953: LD_VAR 0 3
34957: PPUSH
34958: LD_EXP 111
34962: PUSH
34963: LD_VAR 0 2
34967: ARRAY
34968: PPUSH
34969: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
34973: LD_VAR 0 3
34977: PPUSH
34978: CALL_OW 256
34982: PUSH
34983: LD_INT 1000
34985: LESS
34986: PUSH
34987: LD_VAR 0 3
34991: PPUSH
34992: LD_EXP 111
34996: PUSH
34997: LD_VAR 0 2
35001: ARRAY
35002: PPUSH
35003: CALL_OW 308
35007: AND
35008: IFFALSE 35012
// continue ;
35010: GO 34895
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
35012: LD_VAR 0 3
35016: PPUSH
35017: CALL_OW 262
35021: PUSH
35022: LD_INT 2
35024: EQUAL
35025: PUSH
35026: LD_VAR 0 3
35030: PPUSH
35031: CALL_OW 261
35035: PUSH
35036: LD_INT 15
35038: LESS
35039: AND
35040: IFFALSE 35044
// continue ;
35042: GO 34895
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
35044: LD_VAR 0 3
35048: PPUSH
35049: CALL_OW 262
35053: PUSH
35054: LD_INT 1
35056: EQUAL
35057: PUSH
35058: LD_VAR 0 3
35062: PPUSH
35063: CALL_OW 261
35067: PUSH
35068: LD_INT 10
35070: LESS
35071: AND
35072: IFFALSE 35401
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35074: LD_ADDR_VAR 0 8
35078: PUSH
35079: LD_EXP 87
35083: PUSH
35084: LD_VAR 0 2
35088: ARRAY
35089: PPUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 30
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 30
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: PPUSH
35118: CALL_OW 72
35122: ST_TO_ADDR
// if not depot then
35123: LD_VAR 0 8
35127: NOT
35128: IFFALSE 35132
// continue ;
35130: GO 34895
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
35132: LD_VAR 0 3
35136: PPUSH
35137: LD_VAR 0 8
35141: PPUSH
35142: LD_VAR 0 3
35146: PPUSH
35147: CALL_OW 74
35151: PPUSH
35152: CALL_OW 296
35156: PUSH
35157: LD_INT 6
35159: LESS
35160: IFFALSE 35176
// SetFuel ( j , 100 ) else
35162: LD_VAR 0 3
35166: PPUSH
35167: LD_INT 100
35169: PPUSH
35170: CALL_OW 240
35174: GO 35401
// if GetFuel ( j ) = 0 then
35176: LD_VAR 0 3
35180: PPUSH
35181: CALL_OW 261
35185: PUSH
35186: LD_INT 0
35188: EQUAL
35189: IFFALSE 35401
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
35191: LD_ADDR_EXP 106
35195: PUSH
35196: LD_EXP 106
35200: PPUSH
35201: LD_VAR 0 2
35205: PPUSH
35206: LD_EXP 106
35210: PUSH
35211: LD_VAR 0 2
35215: ARRAY
35216: PUSH
35217: LD_VAR 0 3
35221: DIFF
35222: PPUSH
35223: CALL_OW 1
35227: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
35228: LD_VAR 0 3
35232: PPUSH
35233: CALL_OW 263
35237: PUSH
35238: LD_INT 1
35240: EQUAL
35241: IFFALSE 35257
// ComExitVehicle ( IsInUnit ( j ) ) ;
35243: LD_VAR 0 3
35247: PPUSH
35248: CALL_OW 310
35252: PPUSH
35253: CALL_OW 121
// if GetControl ( j ) = control_remote then
35257: LD_VAR 0 3
35261: PPUSH
35262: CALL_OW 263
35266: PUSH
35267: LD_INT 2
35269: EQUAL
35270: IFFALSE 35281
// ComUnlink ( j ) ;
35272: LD_VAR 0 3
35276: PPUSH
35277: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
35281: LD_ADDR_VAR 0 9
35285: PUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: LD_INT 3
35293: PPUSH
35294: CALL 44754 0 2
35298: ST_TO_ADDR
// if fac then
35299: LD_VAR 0 9
35303: IFFALSE 35399
// begin for k in fac do
35305: LD_ADDR_VAR 0 4
35309: PUSH
35310: LD_VAR 0 9
35314: PUSH
35315: FOR_IN
35316: IFFALSE 35397
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
35318: LD_ADDR_VAR 0 10
35322: PUSH
35323: LD_VAR 0 9
35327: PPUSH
35328: LD_VAR 0 3
35332: PPUSH
35333: CALL_OW 265
35337: PPUSH
35338: LD_VAR 0 3
35342: PPUSH
35343: CALL_OW 262
35347: PPUSH
35348: LD_VAR 0 3
35352: PPUSH
35353: CALL_OW 263
35357: PPUSH
35358: LD_VAR 0 3
35362: PPUSH
35363: CALL_OW 264
35367: PPUSH
35368: CALL 53121 0 5
35372: ST_TO_ADDR
// if components then
35373: LD_VAR 0 10
35377: IFFALSE 35395
// begin MC_InsertProduceList ( i , components ) ;
35379: LD_VAR 0 2
35383: PPUSH
35384: LD_VAR 0 10
35388: PPUSH
35389: CALL 44299 0 2
// break ;
35393: GO 35397
// end ; end ;
35395: GO 35315
35397: POP
35398: POP
// end ; continue ;
35399: GO 34895
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
35401: LD_VAR 0 3
35405: PPUSH
35406: LD_INT 1
35408: PPUSH
35409: CALL_OW 289
35413: PUSH
35414: LD_INT 100
35416: LESS
35417: PUSH
35418: LD_VAR 0 3
35422: PPUSH
35423: CALL_OW 314
35427: NOT
35428: AND
35429: IFFALSE 35458
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
35431: LD_VAR 0 3
35435: PPUSH
35436: LD_VAR 0 6
35440: PUSH
35441: LD_INT 2
35443: ARRAY
35444: PPUSH
35445: LD_VAR 0 6
35449: PUSH
35450: LD_INT 3
35452: ARRAY
35453: PPUSH
35454: CALL_OW 117
// break ;
35458: GO 35462
// end ;
35460: GO 34895
35462: POP
35463: POP
// end ; end ;
35464: GO 33733
35466: POP
35467: POP
// end ;
35468: LD_VAR 0 1
35472: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
35473: LD_INT 0
35475: PPUSH
35476: PPUSH
35477: PPUSH
35478: PPUSH
// if not mc_bases then
35479: LD_EXP 87
35483: NOT
35484: IFFALSE 35488
// exit ;
35486: GO 35649
// for i = 1 to mc_bases do
35488: LD_ADDR_VAR 0 2
35492: PUSH
35493: DOUBLE
35494: LD_INT 1
35496: DEC
35497: ST_TO_ADDR
35498: LD_EXP 87
35502: PUSH
35503: FOR_TO
35504: IFFALSE 35647
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
35506: LD_ADDR_VAR 0 4
35510: PUSH
35511: LD_EXP 106
35515: PUSH
35516: LD_VAR 0 2
35520: ARRAY
35521: PUSH
35522: LD_EXP 109
35526: PUSH
35527: LD_VAR 0 2
35531: ARRAY
35532: UNION
35533: PPUSH
35534: LD_INT 33
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PPUSH
35544: CALL_OW 72
35548: ST_TO_ADDR
// if tmp then
35549: LD_VAR 0 4
35553: IFFALSE 35645
// for j in tmp do
35555: LD_ADDR_VAR 0 3
35559: PUSH
35560: LD_VAR 0 4
35564: PUSH
35565: FOR_IN
35566: IFFALSE 35643
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
35568: LD_VAR 0 3
35572: PPUSH
35573: CALL_OW 312
35577: NOT
35578: PUSH
35579: LD_VAR 0 3
35583: PPUSH
35584: CALL_OW 256
35588: PUSH
35589: LD_INT 250
35591: GREATEREQUAL
35592: AND
35593: IFFALSE 35606
// Connect ( j ) else
35595: LD_VAR 0 3
35599: PPUSH
35600: CALL 58522 0 1
35604: GO 35641
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
35606: LD_VAR 0 3
35610: PPUSH
35611: CALL_OW 256
35615: PUSH
35616: LD_INT 250
35618: LESS
35619: PUSH
35620: LD_VAR 0 3
35624: PPUSH
35625: CALL_OW 312
35629: AND
35630: IFFALSE 35641
// ComUnlink ( j ) ;
35632: LD_VAR 0 3
35636: PPUSH
35637: CALL_OW 136
35641: GO 35565
35643: POP
35644: POP
// end ;
35645: GO 35503
35647: POP
35648: POP
// end ;
35649: LD_VAR 0 1
35653: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
35654: LD_INT 0
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
// if not mc_bases then
35661: LD_EXP 87
35665: NOT
35666: IFFALSE 35670
// exit ;
35668: GO 36115
// for i = 1 to mc_bases do
35670: LD_ADDR_VAR 0 2
35674: PUSH
35675: DOUBLE
35676: LD_INT 1
35678: DEC
35679: ST_TO_ADDR
35680: LD_EXP 87
35684: PUSH
35685: FOR_TO
35686: IFFALSE 36113
// begin if not mc_produce [ i ] then
35688: LD_EXP 108
35692: PUSH
35693: LD_VAR 0 2
35697: ARRAY
35698: NOT
35699: IFFALSE 35703
// continue ;
35701: GO 35685
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
35703: LD_ADDR_VAR 0 5
35707: PUSH
35708: LD_EXP 87
35712: PUSH
35713: LD_VAR 0 2
35717: ARRAY
35718: PPUSH
35719: LD_INT 30
35721: PUSH
35722: LD_INT 3
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PPUSH
35729: CALL_OW 72
35733: ST_TO_ADDR
// if not fac then
35734: LD_VAR 0 5
35738: NOT
35739: IFFALSE 35743
// continue ;
35741: GO 35685
// for j in fac do
35743: LD_ADDR_VAR 0 3
35747: PUSH
35748: LD_VAR 0 5
35752: PUSH
35753: FOR_IN
35754: IFFALSE 36109
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
35756: LD_VAR 0 3
35760: PPUSH
35761: CALL_OW 461
35765: PUSH
35766: LD_INT 2
35768: NONEQUAL
35769: PUSH
35770: LD_VAR 0 3
35774: PPUSH
35775: LD_INT 15
35777: PPUSH
35778: CALL 58182 0 2
35782: PUSH
35783: LD_INT 4
35785: ARRAY
35786: OR
35787: IFFALSE 35791
// continue ;
35789: GO 35753
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
35791: LD_VAR 0 3
35795: PPUSH
35796: LD_EXP 108
35800: PUSH
35801: LD_VAR 0 2
35805: ARRAY
35806: PUSH
35807: LD_INT 1
35809: ARRAY
35810: PUSH
35811: LD_INT 1
35813: ARRAY
35814: PPUSH
35815: LD_EXP 108
35819: PUSH
35820: LD_VAR 0 2
35824: ARRAY
35825: PUSH
35826: LD_INT 1
35828: ARRAY
35829: PUSH
35830: LD_INT 2
35832: ARRAY
35833: PPUSH
35834: LD_EXP 108
35838: PUSH
35839: LD_VAR 0 2
35843: ARRAY
35844: PUSH
35845: LD_INT 1
35847: ARRAY
35848: PUSH
35849: LD_INT 3
35851: ARRAY
35852: PPUSH
35853: LD_EXP 108
35857: PUSH
35858: LD_VAR 0 2
35862: ARRAY
35863: PUSH
35864: LD_INT 1
35866: ARRAY
35867: PUSH
35868: LD_INT 4
35870: ARRAY
35871: PPUSH
35872: CALL_OW 448
35876: PUSH
35877: LD_VAR 0 3
35881: PPUSH
35882: LD_EXP 108
35886: PUSH
35887: LD_VAR 0 2
35891: ARRAY
35892: PUSH
35893: LD_INT 1
35895: ARRAY
35896: PUSH
35897: LD_INT 1
35899: ARRAY
35900: PUSH
35901: LD_EXP 108
35905: PUSH
35906: LD_VAR 0 2
35910: ARRAY
35911: PUSH
35912: LD_INT 1
35914: ARRAY
35915: PUSH
35916: LD_INT 2
35918: ARRAY
35919: PUSH
35920: LD_EXP 108
35924: PUSH
35925: LD_VAR 0 2
35929: ARRAY
35930: PUSH
35931: LD_INT 1
35933: ARRAY
35934: PUSH
35935: LD_INT 3
35937: ARRAY
35938: PUSH
35939: LD_EXP 108
35943: PUSH
35944: LD_VAR 0 2
35948: ARRAY
35949: PUSH
35950: LD_INT 1
35952: ARRAY
35953: PUSH
35954: LD_INT 4
35956: ARRAY
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: PPUSH
35964: CALL 61853 0 2
35968: AND
35969: IFFALSE 36107
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
35971: LD_VAR 0 3
35975: PPUSH
35976: LD_EXP 108
35980: PUSH
35981: LD_VAR 0 2
35985: ARRAY
35986: PUSH
35987: LD_INT 1
35989: ARRAY
35990: PUSH
35991: LD_INT 1
35993: ARRAY
35994: PPUSH
35995: LD_EXP 108
35999: PUSH
36000: LD_VAR 0 2
36004: ARRAY
36005: PUSH
36006: LD_INT 1
36008: ARRAY
36009: PUSH
36010: LD_INT 2
36012: ARRAY
36013: PPUSH
36014: LD_EXP 108
36018: PUSH
36019: LD_VAR 0 2
36023: ARRAY
36024: PUSH
36025: LD_INT 1
36027: ARRAY
36028: PUSH
36029: LD_INT 3
36031: ARRAY
36032: PPUSH
36033: LD_EXP 108
36037: PUSH
36038: LD_VAR 0 2
36042: ARRAY
36043: PUSH
36044: LD_INT 1
36046: ARRAY
36047: PUSH
36048: LD_INT 4
36050: ARRAY
36051: PPUSH
36052: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
36056: LD_ADDR_VAR 0 4
36060: PUSH
36061: LD_EXP 108
36065: PUSH
36066: LD_VAR 0 2
36070: ARRAY
36071: PPUSH
36072: LD_INT 1
36074: PPUSH
36075: CALL_OW 3
36079: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
36080: LD_ADDR_EXP 108
36084: PUSH
36085: LD_EXP 108
36089: PPUSH
36090: LD_VAR 0 2
36094: PPUSH
36095: LD_VAR 0 4
36099: PPUSH
36100: CALL_OW 1
36104: ST_TO_ADDR
// break ;
36105: GO 36109
// end ; end ;
36107: GO 35753
36109: POP
36110: POP
// end ;
36111: GO 35685
36113: POP
36114: POP
// end ;
36115: LD_VAR 0 1
36119: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
36120: LD_INT 0
36122: PPUSH
36123: PPUSH
36124: PPUSH
// if not mc_bases then
36125: LD_EXP 87
36129: NOT
36130: IFFALSE 36134
// exit ;
36132: GO 36223
// for i = 1 to mc_bases do
36134: LD_ADDR_VAR 0 2
36138: PUSH
36139: DOUBLE
36140: LD_INT 1
36142: DEC
36143: ST_TO_ADDR
36144: LD_EXP 87
36148: PUSH
36149: FOR_TO
36150: IFFALSE 36221
// begin if mc_attack [ i ] then
36152: LD_EXP 107
36156: PUSH
36157: LD_VAR 0 2
36161: ARRAY
36162: IFFALSE 36219
// begin tmp := mc_attack [ i ] [ 1 ] ;
36164: LD_ADDR_VAR 0 3
36168: PUSH
36169: LD_EXP 107
36173: PUSH
36174: LD_VAR 0 2
36178: ARRAY
36179: PUSH
36180: LD_INT 1
36182: ARRAY
36183: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
36184: LD_ADDR_EXP 107
36188: PUSH
36189: LD_EXP 107
36193: PPUSH
36194: LD_VAR 0 2
36198: PPUSH
36199: EMPTY
36200: PPUSH
36201: CALL_OW 1
36205: ST_TO_ADDR
// Attack ( tmp ) ;
36206: LD_VAR 0 3
36210: PPUSH
36211: CALL 98485 0 1
// exit ;
36215: POP
36216: POP
36217: GO 36223
// end ; end ;
36219: GO 36149
36221: POP
36222: POP
// end ;
36223: LD_VAR 0 1
36227: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
36228: LD_INT 0
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
// if not mc_bases then
36237: LD_EXP 87
36241: NOT
36242: IFFALSE 36246
// exit ;
36244: GO 36828
// for i = 1 to mc_bases do
36246: LD_ADDR_VAR 0 2
36250: PUSH
36251: DOUBLE
36252: LD_INT 1
36254: DEC
36255: ST_TO_ADDR
36256: LD_EXP 87
36260: PUSH
36261: FOR_TO
36262: IFFALSE 36826
// begin if not mc_bases [ i ] then
36264: LD_EXP 87
36268: PUSH
36269: LD_VAR 0 2
36273: ARRAY
36274: NOT
36275: IFFALSE 36279
// continue ;
36277: GO 36261
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
36279: LD_ADDR_VAR 0 7
36283: PUSH
36284: LD_EXP 87
36288: PUSH
36289: LD_VAR 0 2
36293: ARRAY
36294: PUSH
36295: LD_INT 1
36297: ARRAY
36298: PPUSH
36299: CALL 52425 0 1
36303: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
36304: LD_ADDR_EXP 110
36308: PUSH
36309: LD_EXP 110
36313: PPUSH
36314: LD_VAR 0 2
36318: PPUSH
36319: LD_EXP 87
36323: PUSH
36324: LD_VAR 0 2
36328: ARRAY
36329: PUSH
36330: LD_INT 1
36332: ARRAY
36333: PPUSH
36334: CALL_OW 255
36338: PPUSH
36339: LD_EXP 112
36343: PUSH
36344: LD_VAR 0 2
36348: ARRAY
36349: PPUSH
36350: CALL 52390 0 2
36354: PPUSH
36355: CALL_OW 1
36359: ST_TO_ADDR
// if not mc_scan [ i ] then
36360: LD_EXP 110
36364: PUSH
36365: LD_VAR 0 2
36369: ARRAY
36370: NOT
36371: IFFALSE 36526
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
36373: LD_ADDR_VAR 0 4
36377: PUSH
36378: LD_EXP 87
36382: PUSH
36383: LD_VAR 0 2
36387: ARRAY
36388: PPUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 25
36394: PUSH
36395: LD_INT 5
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 25
36404: PUSH
36405: LD_INT 8
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 25
36414: PUSH
36415: LD_INT 9
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: PPUSH
36428: CALL_OW 72
36432: ST_TO_ADDR
// if not tmp then
36433: LD_VAR 0 4
36437: NOT
36438: IFFALSE 36442
// continue ;
36440: GO 36261
// for j in tmp do
36442: LD_ADDR_VAR 0 3
36446: PUSH
36447: LD_VAR 0 4
36451: PUSH
36452: FOR_IN
36453: IFFALSE 36524
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
36455: LD_VAR 0 3
36459: PPUSH
36460: CALL_OW 310
36464: PPUSH
36465: CALL_OW 266
36469: PUSH
36470: LD_INT 5
36472: EQUAL
36473: PUSH
36474: LD_VAR 0 3
36478: PPUSH
36479: CALL_OW 257
36483: PUSH
36484: LD_INT 1
36486: EQUAL
36487: AND
36488: PUSH
36489: LD_VAR 0 3
36493: PPUSH
36494: CALL_OW 459
36498: NOT
36499: AND
36500: PUSH
36501: LD_VAR 0 7
36505: AND
36506: IFFALSE 36522
// ComChangeProfession ( j , class ) ;
36508: LD_VAR 0 3
36512: PPUSH
36513: LD_VAR 0 7
36517: PPUSH
36518: CALL_OW 123
36522: GO 36452
36524: POP
36525: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
36526: LD_EXP 110
36530: PUSH
36531: LD_VAR 0 2
36535: ARRAY
36536: PUSH
36537: LD_EXP 109
36541: PUSH
36542: LD_VAR 0 2
36546: ARRAY
36547: NOT
36548: AND
36549: PUSH
36550: LD_EXP 87
36554: PUSH
36555: LD_VAR 0 2
36559: ARRAY
36560: PPUSH
36561: LD_INT 30
36563: PUSH
36564: LD_INT 32
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PPUSH
36571: CALL_OW 72
36575: NOT
36576: AND
36577: PUSH
36578: LD_EXP 87
36582: PUSH
36583: LD_VAR 0 2
36587: ARRAY
36588: PPUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 30
36594: PUSH
36595: LD_INT 4
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 30
36604: PUSH
36605: LD_INT 5
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: LIST
36616: PPUSH
36617: CALL_OW 72
36621: NOT
36622: AND
36623: IFFALSE 36755
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
36625: LD_ADDR_VAR 0 4
36629: PUSH
36630: LD_EXP 87
36634: PUSH
36635: LD_VAR 0 2
36639: ARRAY
36640: PPUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 25
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 25
36656: PUSH
36657: LD_INT 5
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 25
36666: PUSH
36667: LD_INT 8
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 25
36676: PUSH
36677: LD_INT 9
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: PPUSH
36691: CALL_OW 72
36695: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
36696: LD_ADDR_VAR 0 4
36700: PUSH
36701: LD_VAR 0 4
36705: PUSH
36706: LD_VAR 0 4
36710: PPUSH
36711: LD_INT 18
36713: PPUSH
36714: CALL 84150 0 2
36718: DIFF
36719: ST_TO_ADDR
// if tmp then
36720: LD_VAR 0 4
36724: IFFALSE 36755
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
36726: LD_VAR 0 2
36730: PPUSH
36731: LD_VAR 0 4
36735: PPUSH
36736: LD_EXP 112
36740: PUSH
36741: LD_VAR 0 2
36745: ARRAY
36746: PPUSH
36747: CALL 103194 0 3
// exit ;
36751: POP
36752: POP
36753: GO 36828
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
36755: LD_EXP 110
36759: PUSH
36760: LD_VAR 0 2
36764: ARRAY
36765: PUSH
36766: LD_EXP 109
36770: PUSH
36771: LD_VAR 0 2
36775: ARRAY
36776: AND
36777: IFFALSE 36824
// begin tmp := mc_defender [ i ] ;
36779: LD_ADDR_VAR 0 4
36783: PUSH
36784: LD_EXP 109
36788: PUSH
36789: LD_VAR 0 2
36793: ARRAY
36794: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
36795: LD_VAR 0 2
36799: PPUSH
36800: LD_VAR 0 4
36804: PPUSH
36805: LD_EXP 110
36809: PUSH
36810: LD_VAR 0 2
36814: ARRAY
36815: PPUSH
36816: CALL 103755 0 3
// exit ;
36820: POP
36821: POP
36822: GO 36828
// end ; end ;
36824: GO 36261
36826: POP
36827: POP
// end ;
36828: LD_VAR 0 1
36832: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
36833: LD_INT 0
36835: PPUSH
36836: PPUSH
36837: PPUSH
36838: PPUSH
36839: PPUSH
36840: PPUSH
36841: PPUSH
36842: PPUSH
36843: PPUSH
36844: PPUSH
36845: PPUSH
// if not mc_bases then
36846: LD_EXP 87
36850: NOT
36851: IFFALSE 36855
// exit ;
36853: GO 37942
// for i = 1 to mc_bases do
36855: LD_ADDR_VAR 0 2
36859: PUSH
36860: DOUBLE
36861: LD_INT 1
36863: DEC
36864: ST_TO_ADDR
36865: LD_EXP 87
36869: PUSH
36870: FOR_TO
36871: IFFALSE 37940
// begin tmp := mc_lab [ i ] ;
36873: LD_ADDR_VAR 0 6
36877: PUSH
36878: LD_EXP 120
36882: PUSH
36883: LD_VAR 0 2
36887: ARRAY
36888: ST_TO_ADDR
// if not tmp then
36889: LD_VAR 0 6
36893: NOT
36894: IFFALSE 36898
// continue ;
36896: GO 36870
// idle_lab := 0 ;
36898: LD_ADDR_VAR 0 11
36902: PUSH
36903: LD_INT 0
36905: ST_TO_ADDR
// for j in tmp do
36906: LD_ADDR_VAR 0 3
36910: PUSH
36911: LD_VAR 0 6
36915: PUSH
36916: FOR_IN
36917: IFFALSE 37936
// begin researching := false ;
36919: LD_ADDR_VAR 0 10
36923: PUSH
36924: LD_INT 0
36926: ST_TO_ADDR
// side := GetSide ( j ) ;
36927: LD_ADDR_VAR 0 4
36931: PUSH
36932: LD_VAR 0 3
36936: PPUSH
36937: CALL_OW 255
36941: ST_TO_ADDR
// if not mc_tech [ side ] then
36942: LD_EXP 114
36946: PUSH
36947: LD_VAR 0 4
36951: ARRAY
36952: NOT
36953: IFFALSE 36957
// continue ;
36955: GO 36916
// if BuildingStatus ( j ) = bs_idle then
36957: LD_VAR 0 3
36961: PPUSH
36962: CALL_OW 461
36966: PUSH
36967: LD_INT 2
36969: EQUAL
36970: IFFALSE 37158
// begin if idle_lab and UnitsInside ( j ) < 6 then
36972: LD_VAR 0 11
36976: PUSH
36977: LD_VAR 0 3
36981: PPUSH
36982: CALL_OW 313
36986: PUSH
36987: LD_INT 6
36989: LESS
36990: AND
36991: IFFALSE 37062
// begin tmp2 := UnitsInside ( idle_lab ) ;
36993: LD_ADDR_VAR 0 9
36997: PUSH
36998: LD_VAR 0 11
37002: PPUSH
37003: CALL_OW 313
37007: ST_TO_ADDR
// if tmp2 then
37008: LD_VAR 0 9
37012: IFFALSE 37054
// for x in tmp2 do
37014: LD_ADDR_VAR 0 7
37018: PUSH
37019: LD_VAR 0 9
37023: PUSH
37024: FOR_IN
37025: IFFALSE 37052
// begin ComExitBuilding ( x ) ;
37027: LD_VAR 0 7
37031: PPUSH
37032: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
37036: LD_VAR 0 7
37040: PPUSH
37041: LD_VAR 0 3
37045: PPUSH
37046: CALL_OW 180
// end ;
37050: GO 37024
37052: POP
37053: POP
// idle_lab := 0 ;
37054: LD_ADDR_VAR 0 11
37058: PUSH
37059: LD_INT 0
37061: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
37062: LD_ADDR_VAR 0 5
37066: PUSH
37067: LD_EXP 114
37071: PUSH
37072: LD_VAR 0 4
37076: ARRAY
37077: PUSH
37078: FOR_IN
37079: IFFALSE 37139
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
37081: LD_VAR 0 3
37085: PPUSH
37086: LD_VAR 0 5
37090: PPUSH
37091: CALL_OW 430
37095: PUSH
37096: LD_VAR 0 4
37100: PPUSH
37101: LD_VAR 0 5
37105: PPUSH
37106: CALL 51495 0 2
37110: AND
37111: IFFALSE 37137
// begin researching := true ;
37113: LD_ADDR_VAR 0 10
37117: PUSH
37118: LD_INT 1
37120: ST_TO_ADDR
// ComResearch ( j , t ) ;
37121: LD_VAR 0 3
37125: PPUSH
37126: LD_VAR 0 5
37130: PPUSH
37131: CALL_OW 124
// break ;
37135: GO 37139
// end ;
37137: GO 37078
37139: POP
37140: POP
// if not researching then
37141: LD_VAR 0 10
37145: NOT
37146: IFFALSE 37158
// idle_lab := j ;
37148: LD_ADDR_VAR 0 11
37152: PUSH
37153: LD_VAR 0 3
37157: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
37158: LD_VAR 0 3
37162: PPUSH
37163: CALL_OW 461
37167: PUSH
37168: LD_INT 10
37170: EQUAL
37171: IFFALSE 37759
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
37173: LD_EXP 116
37177: PUSH
37178: LD_VAR 0 2
37182: ARRAY
37183: NOT
37184: PUSH
37185: LD_EXP 117
37189: PUSH
37190: LD_VAR 0 2
37194: ARRAY
37195: NOT
37196: AND
37197: PUSH
37198: LD_EXP 114
37202: PUSH
37203: LD_VAR 0 4
37207: ARRAY
37208: PUSH
37209: LD_INT 1
37211: GREATER
37212: AND
37213: IFFALSE 37344
// begin ComCancel ( j ) ;
37215: LD_VAR 0 3
37219: PPUSH
37220: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
37224: LD_ADDR_EXP 114
37228: PUSH
37229: LD_EXP 114
37233: PPUSH
37234: LD_VAR 0 4
37238: PPUSH
37239: LD_EXP 114
37243: PUSH
37244: LD_VAR 0 4
37248: ARRAY
37249: PPUSH
37250: LD_EXP 114
37254: PUSH
37255: LD_VAR 0 4
37259: ARRAY
37260: PUSH
37261: LD_INT 1
37263: MINUS
37264: PPUSH
37265: LD_EXP 114
37269: PUSH
37270: LD_VAR 0 4
37274: ARRAY
37275: PPUSH
37276: LD_INT 0
37278: PPUSH
37279: CALL 55007 0 4
37283: PPUSH
37284: CALL_OW 1
37288: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
37289: LD_ADDR_EXP 114
37293: PUSH
37294: LD_EXP 114
37298: PPUSH
37299: LD_VAR 0 4
37303: PPUSH
37304: LD_EXP 114
37308: PUSH
37309: LD_VAR 0 4
37313: ARRAY
37314: PPUSH
37315: LD_EXP 114
37319: PUSH
37320: LD_VAR 0 4
37324: ARRAY
37325: PPUSH
37326: LD_INT 1
37328: PPUSH
37329: LD_INT 0
37331: PPUSH
37332: CALL 55007 0 4
37336: PPUSH
37337: CALL_OW 1
37341: ST_TO_ADDR
// continue ;
37342: GO 36916
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
37344: LD_EXP 116
37348: PUSH
37349: LD_VAR 0 2
37353: ARRAY
37354: PUSH
37355: LD_EXP 117
37359: PUSH
37360: LD_VAR 0 2
37364: ARRAY
37365: NOT
37366: AND
37367: IFFALSE 37494
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
37369: LD_ADDR_EXP 117
37373: PUSH
37374: LD_EXP 117
37378: PPUSH
37379: LD_VAR 0 2
37383: PUSH
37384: LD_EXP 117
37388: PUSH
37389: LD_VAR 0 2
37393: ARRAY
37394: PUSH
37395: LD_INT 1
37397: PLUS
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PPUSH
37403: LD_EXP 116
37407: PUSH
37408: LD_VAR 0 2
37412: ARRAY
37413: PUSH
37414: LD_INT 1
37416: ARRAY
37417: PPUSH
37418: CALL 55589 0 3
37422: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
37423: LD_EXP 116
37427: PUSH
37428: LD_VAR 0 2
37432: ARRAY
37433: PUSH
37434: LD_INT 1
37436: ARRAY
37437: PPUSH
37438: LD_INT 112
37440: PPUSH
37441: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
37445: LD_ADDR_VAR 0 9
37449: PUSH
37450: LD_EXP 116
37454: PUSH
37455: LD_VAR 0 2
37459: ARRAY
37460: PPUSH
37461: LD_INT 1
37463: PPUSH
37464: CALL_OW 3
37468: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
37469: LD_ADDR_EXP 116
37473: PUSH
37474: LD_EXP 116
37478: PPUSH
37479: LD_VAR 0 2
37483: PPUSH
37484: LD_VAR 0 9
37488: PPUSH
37489: CALL_OW 1
37493: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
37494: LD_EXP 116
37498: PUSH
37499: LD_VAR 0 2
37503: ARRAY
37504: PUSH
37505: LD_EXP 117
37509: PUSH
37510: LD_VAR 0 2
37514: ARRAY
37515: AND
37516: PUSH
37517: LD_EXP 117
37521: PUSH
37522: LD_VAR 0 2
37526: ARRAY
37527: PUSH
37528: LD_INT 1
37530: ARRAY
37531: PPUSH
37532: CALL_OW 310
37536: NOT
37537: AND
37538: PUSH
37539: LD_VAR 0 3
37543: PPUSH
37544: CALL_OW 313
37548: PUSH
37549: LD_INT 6
37551: EQUAL
37552: AND
37553: IFFALSE 37609
// begin tmp2 := UnitsInside ( j ) ;
37555: LD_ADDR_VAR 0 9
37559: PUSH
37560: LD_VAR 0 3
37564: PPUSH
37565: CALL_OW 313
37569: ST_TO_ADDR
// if tmp2 = 6 then
37570: LD_VAR 0 9
37574: PUSH
37575: LD_INT 6
37577: EQUAL
37578: IFFALSE 37609
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
37580: LD_VAR 0 9
37584: PUSH
37585: LD_INT 1
37587: ARRAY
37588: PPUSH
37589: LD_INT 112
37591: PPUSH
37592: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
37596: LD_VAR 0 9
37600: PUSH
37601: LD_INT 1
37603: ARRAY
37604: PPUSH
37605: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
37609: LD_EXP 117
37613: PUSH
37614: LD_VAR 0 2
37618: ARRAY
37619: PUSH
37620: LD_EXP 117
37624: PUSH
37625: LD_VAR 0 2
37629: ARRAY
37630: PUSH
37631: LD_INT 1
37633: ARRAY
37634: PPUSH
37635: CALL_OW 314
37639: NOT
37640: AND
37641: PUSH
37642: LD_EXP 117
37646: PUSH
37647: LD_VAR 0 2
37651: ARRAY
37652: PUSH
37653: LD_INT 1
37655: ARRAY
37656: PPUSH
37657: CALL_OW 310
37661: NOT
37662: AND
37663: IFFALSE 37689
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
37665: LD_EXP 117
37669: PUSH
37670: LD_VAR 0 2
37674: ARRAY
37675: PUSH
37676: LD_INT 1
37678: ARRAY
37679: PPUSH
37680: LD_VAR 0 3
37684: PPUSH
37685: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
37689: LD_EXP 117
37693: PUSH
37694: LD_VAR 0 2
37698: ARRAY
37699: PUSH
37700: LD_INT 1
37702: ARRAY
37703: PPUSH
37704: CALL_OW 310
37708: PUSH
37709: LD_EXP 117
37713: PUSH
37714: LD_VAR 0 2
37718: ARRAY
37719: PUSH
37720: LD_INT 1
37722: ARRAY
37723: PPUSH
37724: CALL_OW 310
37728: PPUSH
37729: CALL_OW 461
37733: PUSH
37734: LD_INT 3
37736: NONEQUAL
37737: AND
37738: IFFALSE 37759
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
37740: LD_EXP 117
37744: PUSH
37745: LD_VAR 0 2
37749: ARRAY
37750: PUSH
37751: LD_INT 1
37753: ARRAY
37754: PPUSH
37755: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
37759: LD_VAR 0 3
37763: PPUSH
37764: CALL_OW 461
37768: PUSH
37769: LD_INT 6
37771: EQUAL
37772: PUSH
37773: LD_VAR 0 6
37777: PUSH
37778: LD_INT 1
37780: GREATER
37781: AND
37782: IFFALSE 37934
// begin sci := [ ] ;
37784: LD_ADDR_VAR 0 8
37788: PUSH
37789: EMPTY
37790: ST_TO_ADDR
// for x in ( tmp diff j ) do
37791: LD_ADDR_VAR 0 7
37795: PUSH
37796: LD_VAR 0 6
37800: PUSH
37801: LD_VAR 0 3
37805: DIFF
37806: PUSH
37807: FOR_IN
37808: IFFALSE 37860
// begin if sci = 6 then
37810: LD_VAR 0 8
37814: PUSH
37815: LD_INT 6
37817: EQUAL
37818: IFFALSE 37822
// break ;
37820: GO 37860
// if BuildingStatus ( x ) = bs_idle then
37822: LD_VAR 0 7
37826: PPUSH
37827: CALL_OW 461
37831: PUSH
37832: LD_INT 2
37834: EQUAL
37835: IFFALSE 37858
// sci := sci ^ UnitsInside ( x ) ;
37837: LD_ADDR_VAR 0 8
37841: PUSH
37842: LD_VAR 0 8
37846: PUSH
37847: LD_VAR 0 7
37851: PPUSH
37852: CALL_OW 313
37856: ADD
37857: ST_TO_ADDR
// end ;
37858: GO 37807
37860: POP
37861: POP
// if not sci then
37862: LD_VAR 0 8
37866: NOT
37867: IFFALSE 37871
// continue ;
37869: GO 36916
// for x in sci do
37871: LD_ADDR_VAR 0 7
37875: PUSH
37876: LD_VAR 0 8
37880: PUSH
37881: FOR_IN
37882: IFFALSE 37932
// if IsInUnit ( x ) and not HasTask ( x ) then
37884: LD_VAR 0 7
37888: PPUSH
37889: CALL_OW 310
37893: PUSH
37894: LD_VAR 0 7
37898: PPUSH
37899: CALL_OW 314
37903: NOT
37904: AND
37905: IFFALSE 37930
// begin ComExitBuilding ( x ) ;
37907: LD_VAR 0 7
37911: PPUSH
37912: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
37916: LD_VAR 0 7
37920: PPUSH
37921: LD_VAR 0 3
37925: PPUSH
37926: CALL_OW 180
// end ;
37930: GO 37881
37932: POP
37933: POP
// end ; end ;
37934: GO 36916
37936: POP
37937: POP
// end ;
37938: GO 36870
37940: POP
37941: POP
// end ;
37942: LD_VAR 0 1
37946: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
37947: LD_INT 0
37949: PPUSH
37950: PPUSH
// if not mc_bases then
37951: LD_EXP 87
37955: NOT
37956: IFFALSE 37960
// exit ;
37958: GO 38041
// for i = 1 to mc_bases do
37960: LD_ADDR_VAR 0 2
37964: PUSH
37965: DOUBLE
37966: LD_INT 1
37968: DEC
37969: ST_TO_ADDR
37970: LD_EXP 87
37974: PUSH
37975: FOR_TO
37976: IFFALSE 38039
// if mc_mines [ i ] and mc_miners [ i ] then
37978: LD_EXP 100
37982: PUSH
37983: LD_VAR 0 2
37987: ARRAY
37988: PUSH
37989: LD_EXP 101
37993: PUSH
37994: LD_VAR 0 2
37998: ARRAY
37999: AND
38000: IFFALSE 38037
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
38002: LD_EXP 101
38006: PUSH
38007: LD_VAR 0 2
38011: ARRAY
38012: PUSH
38013: LD_INT 1
38015: ARRAY
38016: PPUSH
38017: CALL_OW 255
38021: PPUSH
38022: LD_EXP 100
38026: PUSH
38027: LD_VAR 0 2
38031: ARRAY
38032: PPUSH
38033: CALL 52578 0 2
38037: GO 37975
38039: POP
38040: POP
// end ;
38041: LD_VAR 0 1
38045: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
38046: LD_INT 0
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
// if not mc_bases or not mc_parking then
38056: LD_EXP 87
38060: NOT
38061: PUSH
38062: LD_EXP 111
38066: NOT
38067: OR
38068: IFFALSE 38072
// exit ;
38070: GO 38771
// for i = 1 to mc_bases do
38072: LD_ADDR_VAR 0 2
38076: PUSH
38077: DOUBLE
38078: LD_INT 1
38080: DEC
38081: ST_TO_ADDR
38082: LD_EXP 87
38086: PUSH
38087: FOR_TO
38088: IFFALSE 38769
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
38090: LD_EXP 87
38094: PUSH
38095: LD_VAR 0 2
38099: ARRAY
38100: NOT
38101: PUSH
38102: LD_EXP 111
38106: PUSH
38107: LD_VAR 0 2
38111: ARRAY
38112: NOT
38113: OR
38114: IFFALSE 38118
// continue ;
38116: GO 38087
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
38118: LD_ADDR_VAR 0 5
38122: PUSH
38123: LD_EXP 87
38127: PUSH
38128: LD_VAR 0 2
38132: ARRAY
38133: PUSH
38134: LD_INT 1
38136: ARRAY
38137: PPUSH
38138: CALL_OW 255
38142: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
38143: LD_ADDR_VAR 0 6
38147: PUSH
38148: LD_EXP 87
38152: PUSH
38153: LD_VAR 0 2
38157: ARRAY
38158: PPUSH
38159: LD_INT 30
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PPUSH
38169: CALL_OW 72
38173: ST_TO_ADDR
// if not fac then
38174: LD_VAR 0 6
38178: NOT
38179: IFFALSE 38230
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38181: LD_ADDR_VAR 0 6
38185: PUSH
38186: LD_EXP 87
38190: PUSH
38191: LD_VAR 0 2
38195: ARRAY
38196: PPUSH
38197: LD_INT 2
38199: PUSH
38200: LD_INT 30
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 30
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: PPUSH
38225: CALL_OW 72
38229: ST_TO_ADDR
// if not fac then
38230: LD_VAR 0 6
38234: NOT
38235: IFFALSE 38239
// continue ;
38237: GO 38087
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38239: LD_ADDR_VAR 0 7
38243: PUSH
38244: LD_EXP 111
38248: PUSH
38249: LD_VAR 0 2
38253: ARRAY
38254: PPUSH
38255: LD_INT 22
38257: PUSH
38258: LD_VAR 0 5
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 21
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 3
38279: PUSH
38280: LD_INT 24
38282: PUSH
38283: LD_INT 1000
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: PPUSH
38299: CALL_OW 70
38303: ST_TO_ADDR
// for j in fac do
38304: LD_ADDR_VAR 0 3
38308: PUSH
38309: LD_VAR 0 6
38313: PUSH
38314: FOR_IN
38315: IFFALSE 38396
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38317: LD_ADDR_VAR 0 7
38321: PUSH
38322: LD_VAR 0 7
38326: PUSH
38327: LD_INT 22
38329: PUSH
38330: LD_VAR 0 5
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 91
38341: PUSH
38342: LD_VAR 0 3
38346: PUSH
38347: LD_INT 15
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 21
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 3
38367: PUSH
38368: LD_INT 24
38370: PUSH
38371: LD_INT 1000
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: PPUSH
38388: CALL_OW 69
38392: UNION
38393: ST_TO_ADDR
38394: GO 38314
38396: POP
38397: POP
// if not vehs then
38398: LD_VAR 0 7
38402: NOT
38403: IFFALSE 38429
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
38405: LD_ADDR_EXP 99
38409: PUSH
38410: LD_EXP 99
38414: PPUSH
38415: LD_VAR 0 2
38419: PPUSH
38420: EMPTY
38421: PPUSH
38422: CALL_OW 1
38426: ST_TO_ADDR
// continue ;
38427: GO 38087
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
38429: LD_ADDR_VAR 0 8
38433: PUSH
38434: LD_EXP 87
38438: PUSH
38439: LD_VAR 0 2
38443: ARRAY
38444: PPUSH
38445: LD_INT 30
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PPUSH
38455: CALL_OW 72
38459: ST_TO_ADDR
// if tmp then
38460: LD_VAR 0 8
38464: IFFALSE 38567
// begin for j in tmp do
38466: LD_ADDR_VAR 0 3
38470: PUSH
38471: LD_VAR 0 8
38475: PUSH
38476: FOR_IN
38477: IFFALSE 38565
// for k in UnitsInside ( j ) do
38479: LD_ADDR_VAR 0 4
38483: PUSH
38484: LD_VAR 0 3
38488: PPUSH
38489: CALL_OW 313
38493: PUSH
38494: FOR_IN
38495: IFFALSE 38561
// if k then
38497: LD_VAR 0 4
38501: IFFALSE 38559
// if not k in mc_repair_vehicle [ i ] then
38503: LD_VAR 0 4
38507: PUSH
38508: LD_EXP 99
38512: PUSH
38513: LD_VAR 0 2
38517: ARRAY
38518: IN
38519: NOT
38520: IFFALSE 38559
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
38522: LD_ADDR_EXP 99
38526: PUSH
38527: LD_EXP 99
38531: PPUSH
38532: LD_VAR 0 2
38536: PPUSH
38537: LD_EXP 99
38541: PUSH
38542: LD_VAR 0 2
38546: ARRAY
38547: PUSH
38548: LD_VAR 0 4
38552: UNION
38553: PPUSH
38554: CALL_OW 1
38558: ST_TO_ADDR
38559: GO 38494
38561: POP
38562: POP
38563: GO 38476
38565: POP
38566: POP
// end ; if not mc_repair_vehicle [ i ] then
38567: LD_EXP 99
38571: PUSH
38572: LD_VAR 0 2
38576: ARRAY
38577: NOT
38578: IFFALSE 38582
// continue ;
38580: GO 38087
// for j in mc_repair_vehicle [ i ] do
38582: LD_ADDR_VAR 0 3
38586: PUSH
38587: LD_EXP 99
38591: PUSH
38592: LD_VAR 0 2
38596: ARRAY
38597: PUSH
38598: FOR_IN
38599: IFFALSE 38765
// begin if GetClass ( j ) <> 3 then
38601: LD_VAR 0 3
38605: PPUSH
38606: CALL_OW 257
38610: PUSH
38611: LD_INT 3
38613: NONEQUAL
38614: IFFALSE 38655
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
38616: LD_ADDR_EXP 99
38620: PUSH
38621: LD_EXP 99
38625: PPUSH
38626: LD_VAR 0 2
38630: PPUSH
38631: LD_EXP 99
38635: PUSH
38636: LD_VAR 0 2
38640: ARRAY
38641: PUSH
38642: LD_VAR 0 3
38646: DIFF
38647: PPUSH
38648: CALL_OW 1
38652: ST_TO_ADDR
// continue ;
38653: GO 38598
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
38655: LD_VAR 0 3
38659: PPUSH
38660: CALL_OW 311
38664: NOT
38665: PUSH
38666: LD_VAR 0 3
38670: PUSH
38671: LD_EXP 90
38675: PUSH
38676: LD_VAR 0 2
38680: ARRAY
38681: PUSH
38682: LD_INT 1
38684: ARRAY
38685: IN
38686: NOT
38687: AND
38688: PUSH
38689: LD_VAR 0 3
38693: PUSH
38694: LD_EXP 90
38698: PUSH
38699: LD_VAR 0 2
38703: ARRAY
38704: PUSH
38705: LD_INT 2
38707: ARRAY
38708: IN
38709: NOT
38710: AND
38711: IFFALSE 38763
// begin if IsInUnit ( j ) then
38713: LD_VAR 0 3
38717: PPUSH
38718: CALL_OW 310
38722: IFFALSE 38733
// ComExitBuilding ( j ) ;
38724: LD_VAR 0 3
38728: PPUSH
38729: CALL_OW 122
// if not HasTask ( j ) then
38733: LD_VAR 0 3
38737: PPUSH
38738: CALL_OW 314
38742: NOT
38743: IFFALSE 38763
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
38745: LD_VAR 0 3
38749: PPUSH
38750: LD_VAR 0 7
38754: PUSH
38755: LD_INT 1
38757: ARRAY
38758: PPUSH
38759: CALL_OW 189
// end ; end ;
38763: GO 38598
38765: POP
38766: POP
// end ;
38767: GO 38087
38769: POP
38770: POP
// end ;
38771: LD_VAR 0 1
38775: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
// if not mc_bases then
38789: LD_EXP 87
38793: NOT
38794: IFFALSE 38798
// exit ;
38796: GO 39600
// for i = 1 to mc_bases do
38798: LD_ADDR_VAR 0 2
38802: PUSH
38803: DOUBLE
38804: LD_INT 1
38806: DEC
38807: ST_TO_ADDR
38808: LD_EXP 87
38812: PUSH
38813: FOR_TO
38814: IFFALSE 39598
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
38816: LD_EXP 115
38820: PUSH
38821: LD_VAR 0 2
38825: ARRAY
38826: NOT
38827: PUSH
38828: LD_EXP 90
38832: PUSH
38833: LD_VAR 0 2
38837: ARRAY
38838: PUSH
38839: LD_INT 1
38841: ARRAY
38842: OR
38843: PUSH
38844: LD_EXP 90
38848: PUSH
38849: LD_VAR 0 2
38853: ARRAY
38854: PUSH
38855: LD_INT 2
38857: ARRAY
38858: OR
38859: PUSH
38860: LD_EXP 113
38864: PUSH
38865: LD_VAR 0 2
38869: ARRAY
38870: PPUSH
38871: LD_INT 1
38873: PPUSH
38874: CALL_OW 325
38878: NOT
38879: OR
38880: PUSH
38881: LD_EXP 110
38885: PUSH
38886: LD_VAR 0 2
38890: ARRAY
38891: OR
38892: IFFALSE 38896
// continue ;
38894: GO 38813
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
38896: LD_ADDR_VAR 0 8
38900: PUSH
38901: LD_EXP 87
38905: PUSH
38906: LD_VAR 0 2
38910: ARRAY
38911: PPUSH
38912: LD_INT 25
38914: PUSH
38915: LD_INT 4
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 50
38924: PUSH
38925: EMPTY
38926: LIST
38927: PUSH
38928: LD_INT 3
38930: PUSH
38931: LD_INT 60
38933: PUSH
38934: EMPTY
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: PPUSH
38946: CALL_OW 72
38950: PUSH
38951: LD_EXP 91
38955: PUSH
38956: LD_VAR 0 2
38960: ARRAY
38961: DIFF
38962: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38963: LD_ADDR_VAR 0 9
38967: PUSH
38968: LD_EXP 87
38972: PUSH
38973: LD_VAR 0 2
38977: ARRAY
38978: PPUSH
38979: LD_INT 2
38981: PUSH
38982: LD_INT 30
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 30
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: PPUSH
39007: CALL_OW 72
39011: ST_TO_ADDR
// if not tmp or not dep then
39012: LD_VAR 0 8
39016: NOT
39017: PUSH
39018: LD_VAR 0 9
39022: NOT
39023: OR
39024: IFFALSE 39028
// continue ;
39026: GO 38813
// side := GetSide ( tmp [ 1 ] ) ;
39028: LD_ADDR_VAR 0 11
39032: PUSH
39033: LD_VAR 0 8
39037: PUSH
39038: LD_INT 1
39040: ARRAY
39041: PPUSH
39042: CALL_OW 255
39046: ST_TO_ADDR
// dep := dep [ 1 ] ;
39047: LD_ADDR_VAR 0 9
39051: PUSH
39052: LD_VAR 0 9
39056: PUSH
39057: LD_INT 1
39059: ARRAY
39060: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
39061: LD_ADDR_VAR 0 7
39065: PUSH
39066: LD_EXP 115
39070: PUSH
39071: LD_VAR 0 2
39075: ARRAY
39076: PPUSH
39077: LD_INT 22
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 25
39089: PUSH
39090: LD_INT 12
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PPUSH
39101: CALL_OW 70
39105: PUSH
39106: LD_INT 22
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 25
39118: PUSH
39119: LD_INT 12
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 91
39128: PUSH
39129: LD_VAR 0 9
39133: PUSH
39134: LD_INT 20
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: PPUSH
39147: CALL_OW 69
39151: UNION
39152: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
39153: LD_ADDR_VAR 0 10
39157: PUSH
39158: LD_EXP 115
39162: PUSH
39163: LD_VAR 0 2
39167: ARRAY
39168: PPUSH
39169: LD_INT 81
39171: PUSH
39172: LD_VAR 0 11
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PPUSH
39181: CALL_OW 70
39185: ST_TO_ADDR
// if not apes or danger_at_area then
39186: LD_VAR 0 7
39190: NOT
39191: PUSH
39192: LD_VAR 0 10
39196: OR
39197: IFFALSE 39247
// begin if mc_taming [ i ] then
39199: LD_EXP 118
39203: PUSH
39204: LD_VAR 0 2
39208: ARRAY
39209: IFFALSE 39245
// begin MC_Reset ( i , 121 ) ;
39211: LD_VAR 0 2
39215: PPUSH
39216: LD_INT 121
39218: PPUSH
39219: CALL 24698 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
39223: LD_ADDR_EXP 118
39227: PUSH
39228: LD_EXP 118
39232: PPUSH
39233: LD_VAR 0 2
39237: PPUSH
39238: EMPTY
39239: PPUSH
39240: CALL_OW 1
39244: ST_TO_ADDR
// end ; continue ;
39245: GO 38813
// end ; for j in tmp do
39247: LD_ADDR_VAR 0 3
39251: PUSH
39252: LD_VAR 0 8
39256: PUSH
39257: FOR_IN
39258: IFFALSE 39594
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
39260: LD_VAR 0 3
39264: PUSH
39265: LD_EXP 118
39269: PUSH
39270: LD_VAR 0 2
39274: ARRAY
39275: IN
39276: NOT
39277: PUSH
39278: LD_EXP 118
39282: PUSH
39283: LD_VAR 0 2
39287: ARRAY
39288: PUSH
39289: LD_INT 3
39291: LESS
39292: AND
39293: IFFALSE 39351
// begin SetTag ( j , 121 ) ;
39295: LD_VAR 0 3
39299: PPUSH
39300: LD_INT 121
39302: PPUSH
39303: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
39307: LD_ADDR_EXP 118
39311: PUSH
39312: LD_EXP 118
39316: PPUSH
39317: LD_VAR 0 2
39321: PUSH
39322: LD_EXP 118
39326: PUSH
39327: LD_VAR 0 2
39331: ARRAY
39332: PUSH
39333: LD_INT 1
39335: PLUS
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PPUSH
39341: LD_VAR 0 3
39345: PPUSH
39346: CALL 55589 0 3
39350: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
39351: LD_VAR 0 3
39355: PUSH
39356: LD_EXP 118
39360: PUSH
39361: LD_VAR 0 2
39365: ARRAY
39366: IN
39367: IFFALSE 39592
// begin if GetClass ( j ) <> 4 then
39369: LD_VAR 0 3
39373: PPUSH
39374: CALL_OW 257
39378: PUSH
39379: LD_INT 4
39381: NONEQUAL
39382: IFFALSE 39435
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
39384: LD_ADDR_EXP 118
39388: PUSH
39389: LD_EXP 118
39393: PPUSH
39394: LD_VAR 0 2
39398: PPUSH
39399: LD_EXP 118
39403: PUSH
39404: LD_VAR 0 2
39408: ARRAY
39409: PUSH
39410: LD_VAR 0 3
39414: DIFF
39415: PPUSH
39416: CALL_OW 1
39420: ST_TO_ADDR
// SetTag ( j , 0 ) ;
39421: LD_VAR 0 3
39425: PPUSH
39426: LD_INT 0
39428: PPUSH
39429: CALL_OW 109
// continue ;
39433: GO 39257
// end ; if IsInUnit ( j ) then
39435: LD_VAR 0 3
39439: PPUSH
39440: CALL_OW 310
39444: IFFALSE 39455
// ComExitBuilding ( j ) ;
39446: LD_VAR 0 3
39450: PPUSH
39451: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
39455: LD_ADDR_VAR 0 6
39459: PUSH
39460: LD_VAR 0 7
39464: PPUSH
39465: LD_VAR 0 3
39469: PPUSH
39470: CALL_OW 74
39474: ST_TO_ADDR
// if not ape then
39475: LD_VAR 0 6
39479: NOT
39480: IFFALSE 39484
// break ;
39482: GO 39594
// x := GetX ( ape ) ;
39484: LD_ADDR_VAR 0 4
39488: PUSH
39489: LD_VAR 0 6
39493: PPUSH
39494: CALL_OW 250
39498: ST_TO_ADDR
// y := GetY ( ape ) ;
39499: LD_ADDR_VAR 0 5
39503: PUSH
39504: LD_VAR 0 6
39508: PPUSH
39509: CALL_OW 251
39513: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39514: LD_VAR 0 4
39518: PPUSH
39519: LD_VAR 0 5
39523: PPUSH
39524: CALL_OW 488
39528: NOT
39529: PUSH
39530: LD_VAR 0 11
39534: PPUSH
39535: LD_VAR 0 4
39539: PPUSH
39540: LD_VAR 0 5
39544: PPUSH
39545: LD_INT 20
39547: PPUSH
39548: CALL 56485 0 4
39552: PUSH
39553: LD_INT 4
39555: ARRAY
39556: OR
39557: IFFALSE 39561
// break ;
39559: GO 39594
// if not HasTask ( j ) then
39561: LD_VAR 0 3
39565: PPUSH
39566: CALL_OW 314
39570: NOT
39571: IFFALSE 39592
// ComTameXY ( j , x , y ) ;
39573: LD_VAR 0 3
39577: PPUSH
39578: LD_VAR 0 4
39582: PPUSH
39583: LD_VAR 0 5
39587: PPUSH
39588: CALL_OW 131
// end ; end ;
39592: GO 39257
39594: POP
39595: POP
// end ;
39596: GO 38813
39598: POP
39599: POP
// end ;
39600: LD_VAR 0 1
39604: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
39605: LD_INT 0
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
// if not mc_bases then
39615: LD_EXP 87
39619: NOT
39620: IFFALSE 39624
// exit ;
39622: GO 40250
// for i = 1 to mc_bases do
39624: LD_ADDR_VAR 0 2
39628: PUSH
39629: DOUBLE
39630: LD_INT 1
39632: DEC
39633: ST_TO_ADDR
39634: LD_EXP 87
39638: PUSH
39639: FOR_TO
39640: IFFALSE 40248
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
39642: LD_EXP 116
39646: PUSH
39647: LD_VAR 0 2
39651: ARRAY
39652: NOT
39653: PUSH
39654: LD_EXP 116
39658: PUSH
39659: LD_VAR 0 2
39663: ARRAY
39664: PPUSH
39665: LD_INT 25
39667: PUSH
39668: LD_INT 12
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PPUSH
39675: CALL_OW 72
39679: NOT
39680: OR
39681: IFFALSE 39685
// continue ;
39683: GO 39639
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
39685: LD_ADDR_VAR 0 5
39689: PUSH
39690: LD_EXP 116
39694: PUSH
39695: LD_VAR 0 2
39699: ARRAY
39700: PUSH
39701: LD_INT 1
39703: ARRAY
39704: PPUSH
39705: CALL_OW 255
39709: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
39710: LD_VAR 0 5
39714: PPUSH
39715: LD_INT 2
39717: PPUSH
39718: CALL_OW 325
39722: IFFALSE 39975
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39724: LD_ADDR_VAR 0 4
39728: PUSH
39729: LD_EXP 116
39733: PUSH
39734: LD_VAR 0 2
39738: ARRAY
39739: PPUSH
39740: LD_INT 25
39742: PUSH
39743: LD_INT 16
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PPUSH
39750: CALL_OW 72
39754: ST_TO_ADDR
// if tmp < 6 then
39755: LD_VAR 0 4
39759: PUSH
39760: LD_INT 6
39762: LESS
39763: IFFALSE 39975
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39765: LD_ADDR_VAR 0 6
39769: PUSH
39770: LD_EXP 87
39774: PUSH
39775: LD_VAR 0 2
39779: ARRAY
39780: PPUSH
39781: LD_INT 2
39783: PUSH
39784: LD_INT 30
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 30
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: PPUSH
39809: CALL_OW 72
39813: ST_TO_ADDR
// if depot then
39814: LD_VAR 0 6
39818: IFFALSE 39975
// begin selected := 0 ;
39820: LD_ADDR_VAR 0 7
39824: PUSH
39825: LD_INT 0
39827: ST_TO_ADDR
// for j in depot do
39828: LD_ADDR_VAR 0 3
39832: PUSH
39833: LD_VAR 0 6
39837: PUSH
39838: FOR_IN
39839: IFFALSE 39870
// begin if UnitsInside ( j ) < 6 then
39841: LD_VAR 0 3
39845: PPUSH
39846: CALL_OW 313
39850: PUSH
39851: LD_INT 6
39853: LESS
39854: IFFALSE 39868
// begin selected := j ;
39856: LD_ADDR_VAR 0 7
39860: PUSH
39861: LD_VAR 0 3
39865: ST_TO_ADDR
// break ;
39866: GO 39870
// end ; end ;
39868: GO 39838
39870: POP
39871: POP
// if selected then
39872: LD_VAR 0 7
39876: IFFALSE 39975
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
39878: LD_ADDR_VAR 0 3
39882: PUSH
39883: LD_EXP 116
39887: PUSH
39888: LD_VAR 0 2
39892: ARRAY
39893: PPUSH
39894: LD_INT 25
39896: PUSH
39897: LD_INT 12
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PPUSH
39904: CALL_OW 72
39908: PUSH
39909: FOR_IN
39910: IFFALSE 39973
// if not HasTask ( j ) then
39912: LD_VAR 0 3
39916: PPUSH
39917: CALL_OW 314
39921: NOT
39922: IFFALSE 39971
// begin if not IsInUnit ( j ) then
39924: LD_VAR 0 3
39928: PPUSH
39929: CALL_OW 310
39933: NOT
39934: IFFALSE 39950
// ComEnterUnit ( j , selected ) ;
39936: LD_VAR 0 3
39940: PPUSH
39941: LD_VAR 0 7
39945: PPUSH
39946: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
39950: LD_VAR 0 3
39954: PPUSH
39955: LD_INT 16
39957: PPUSH
39958: CALL_OW 183
// AddComExitBuilding ( j ) ;
39962: LD_VAR 0 3
39966: PPUSH
39967: CALL_OW 182
// end ;
39971: GO 39909
39973: POP
39974: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
39975: LD_VAR 0 5
39979: PPUSH
39980: LD_INT 11
39982: PPUSH
39983: CALL_OW 325
39987: IFFALSE 40246
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39989: LD_ADDR_VAR 0 4
39993: PUSH
39994: LD_EXP 116
39998: PUSH
39999: LD_VAR 0 2
40003: ARRAY
40004: PPUSH
40005: LD_INT 25
40007: PUSH
40008: LD_INT 16
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PPUSH
40015: CALL_OW 72
40019: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
40020: LD_VAR 0 4
40024: PUSH
40025: LD_INT 6
40027: GREATEREQUAL
40028: PUSH
40029: LD_VAR 0 5
40033: PPUSH
40034: LD_INT 2
40036: PPUSH
40037: CALL_OW 325
40041: NOT
40042: OR
40043: IFFALSE 40246
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
40045: LD_ADDR_VAR 0 8
40049: PUSH
40050: LD_EXP 87
40054: PUSH
40055: LD_VAR 0 2
40059: ARRAY
40060: PPUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 30
40066: PUSH
40067: LD_INT 4
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 30
40076: PUSH
40077: LD_INT 5
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: PPUSH
40089: CALL_OW 72
40093: ST_TO_ADDR
// if barracks then
40094: LD_VAR 0 8
40098: IFFALSE 40246
// begin selected := 0 ;
40100: LD_ADDR_VAR 0 7
40104: PUSH
40105: LD_INT 0
40107: ST_TO_ADDR
// for j in barracks do
40108: LD_ADDR_VAR 0 3
40112: PUSH
40113: LD_VAR 0 8
40117: PUSH
40118: FOR_IN
40119: IFFALSE 40150
// begin if UnitsInside ( j ) < 6 then
40121: LD_VAR 0 3
40125: PPUSH
40126: CALL_OW 313
40130: PUSH
40131: LD_INT 6
40133: LESS
40134: IFFALSE 40148
// begin selected := j ;
40136: LD_ADDR_VAR 0 7
40140: PUSH
40141: LD_VAR 0 3
40145: ST_TO_ADDR
// break ;
40146: GO 40150
// end ; end ;
40148: GO 40118
40150: POP
40151: POP
// if selected then
40152: LD_VAR 0 7
40156: IFFALSE 40246
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: LD_EXP 116
40167: PUSH
40168: LD_VAR 0 2
40172: ARRAY
40173: PPUSH
40174: LD_INT 25
40176: PUSH
40177: LD_INT 12
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PPUSH
40184: CALL_OW 72
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40244
// if not IsInUnit ( j ) and not HasTask ( j ) then
40192: LD_VAR 0 3
40196: PPUSH
40197: CALL_OW 310
40201: NOT
40202: PUSH
40203: LD_VAR 0 3
40207: PPUSH
40208: CALL_OW 314
40212: NOT
40213: AND
40214: IFFALSE 40242
// begin ComEnterUnit ( j , selected ) ;
40216: LD_VAR 0 3
40220: PPUSH
40221: LD_VAR 0 7
40225: PPUSH
40226: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
40230: LD_VAR 0 3
40234: PPUSH
40235: LD_INT 15
40237: PPUSH
40238: CALL_OW 183
// end ;
40242: GO 40189
40244: POP
40245: POP
// end ; end ; end ; end ; end ;
40246: GO 39639
40248: POP
40249: POP
// end ;
40250: LD_VAR 0 1
40254: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
40255: LD_INT 0
40257: PPUSH
40258: PPUSH
40259: PPUSH
40260: PPUSH
// if not mc_bases then
40261: LD_EXP 87
40265: NOT
40266: IFFALSE 40270
// exit ;
40268: GO 40448
// for i = 1 to mc_bases do
40270: LD_ADDR_VAR 0 2
40274: PUSH
40275: DOUBLE
40276: LD_INT 1
40278: DEC
40279: ST_TO_ADDR
40280: LD_EXP 87
40284: PUSH
40285: FOR_TO
40286: IFFALSE 40446
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
40288: LD_ADDR_VAR 0 4
40292: PUSH
40293: LD_EXP 87
40297: PUSH
40298: LD_VAR 0 2
40302: ARRAY
40303: PPUSH
40304: LD_INT 25
40306: PUSH
40307: LD_INT 9
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PPUSH
40314: CALL_OW 72
40318: ST_TO_ADDR
// if not tmp then
40319: LD_VAR 0 4
40323: NOT
40324: IFFALSE 40328
// continue ;
40326: GO 40285
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
40328: LD_EXP 113
40332: PUSH
40333: LD_VAR 0 2
40337: ARRAY
40338: PPUSH
40339: LD_INT 29
40341: PPUSH
40342: CALL_OW 325
40346: NOT
40347: PUSH
40348: LD_EXP 113
40352: PUSH
40353: LD_VAR 0 2
40357: ARRAY
40358: PPUSH
40359: LD_INT 28
40361: PPUSH
40362: CALL_OW 325
40366: NOT
40367: AND
40368: IFFALSE 40372
// continue ;
40370: GO 40285
// for j in tmp do
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: LD_VAR 0 4
40381: PUSH
40382: FOR_IN
40383: IFFALSE 40442
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
40385: LD_VAR 0 3
40389: PUSH
40390: LD_EXP 90
40394: PUSH
40395: LD_VAR 0 2
40399: ARRAY
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: IN
40405: NOT
40406: PUSH
40407: LD_VAR 0 3
40411: PUSH
40412: LD_EXP 90
40416: PUSH
40417: LD_VAR 0 2
40421: ARRAY
40422: PUSH
40423: LD_INT 2
40425: ARRAY
40426: IN
40427: NOT
40428: AND
40429: IFFALSE 40440
// ComSpaceTimeShoot ( j ) ;
40431: LD_VAR 0 3
40435: PPUSH
40436: CALL 51586 0 1
40440: GO 40382
40442: POP
40443: POP
// end ;
40444: GO 40285
40446: POP
40447: POP
// end ;
40448: LD_VAR 0 1
40452: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
40453: LD_INT 0
40455: PPUSH
40456: PPUSH
40457: PPUSH
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
// if not mc_bases then
40464: LD_EXP 87
40468: NOT
40469: IFFALSE 40473
// exit ;
40471: GO 41095
// for i = 1 to mc_bases do
40473: LD_ADDR_VAR 0 2
40477: PUSH
40478: DOUBLE
40479: LD_INT 1
40481: DEC
40482: ST_TO_ADDR
40483: LD_EXP 87
40487: PUSH
40488: FOR_TO
40489: IFFALSE 41093
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
40491: LD_EXP 122
40495: PUSH
40496: LD_VAR 0 2
40500: ARRAY
40501: NOT
40502: PUSH
40503: LD_INT 38
40505: PPUSH
40506: LD_EXP 113
40510: PUSH
40511: LD_VAR 0 2
40515: ARRAY
40516: PPUSH
40517: CALL_OW 321
40521: PUSH
40522: LD_INT 2
40524: NONEQUAL
40525: OR
40526: IFFALSE 40530
// continue ;
40528: GO 40488
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
40530: LD_ADDR_VAR 0 8
40534: PUSH
40535: LD_EXP 87
40539: PUSH
40540: LD_VAR 0 2
40544: ARRAY
40545: PPUSH
40546: LD_INT 30
40548: PUSH
40549: LD_INT 34
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PPUSH
40556: CALL_OW 72
40560: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
40561: LD_ADDR_VAR 0 9
40565: PUSH
40566: LD_EXP 87
40570: PUSH
40571: LD_VAR 0 2
40575: ARRAY
40576: PPUSH
40577: LD_INT 25
40579: PUSH
40580: LD_INT 4
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PPUSH
40587: CALL_OW 72
40591: PPUSH
40592: LD_INT 0
40594: PPUSH
40595: CALL 84150 0 2
40599: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
40600: LD_VAR 0 9
40604: NOT
40605: PUSH
40606: LD_VAR 0 8
40610: NOT
40611: OR
40612: PUSH
40613: LD_EXP 87
40617: PUSH
40618: LD_VAR 0 2
40622: ARRAY
40623: PPUSH
40624: LD_INT 124
40626: PPUSH
40627: CALL 84150 0 2
40631: OR
40632: IFFALSE 40636
// continue ;
40634: GO 40488
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
40636: LD_EXP 123
40640: PUSH
40641: LD_VAR 0 2
40645: ARRAY
40646: PUSH
40647: LD_EXP 122
40651: PUSH
40652: LD_VAR 0 2
40656: ARRAY
40657: LESS
40658: PUSH
40659: LD_EXP 123
40663: PUSH
40664: LD_VAR 0 2
40668: ARRAY
40669: PUSH
40670: LD_VAR 0 8
40674: LESS
40675: AND
40676: IFFALSE 41091
// begin tmp := sci [ 1 ] ;
40678: LD_ADDR_VAR 0 7
40682: PUSH
40683: LD_VAR 0 9
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
40692: LD_VAR 0 7
40696: PPUSH
40697: LD_INT 124
40699: PPUSH
40700: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
40704: LD_ADDR_VAR 0 3
40708: PUSH
40709: DOUBLE
40710: LD_EXP 122
40714: PUSH
40715: LD_VAR 0 2
40719: ARRAY
40720: INC
40721: ST_TO_ADDR
40722: LD_EXP 122
40726: PUSH
40727: LD_VAR 0 2
40731: ARRAY
40732: PUSH
40733: FOR_DOWNTO
40734: IFFALSE 41077
// begin if IsInUnit ( tmp ) then
40736: LD_VAR 0 7
40740: PPUSH
40741: CALL_OW 310
40745: IFFALSE 40756
// ComExitBuilding ( tmp ) ;
40747: LD_VAR 0 7
40751: PPUSH
40752: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
40756: LD_INT 35
40758: PPUSH
40759: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
40763: LD_VAR 0 7
40767: PPUSH
40768: CALL_OW 310
40772: NOT
40773: PUSH
40774: LD_VAR 0 7
40778: PPUSH
40779: CALL_OW 314
40783: NOT
40784: AND
40785: IFFALSE 40756
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
40787: LD_ADDR_VAR 0 6
40791: PUSH
40792: LD_VAR 0 7
40796: PPUSH
40797: CALL_OW 250
40801: PUSH
40802: LD_VAR 0 7
40806: PPUSH
40807: CALL_OW 251
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40816: LD_INT 35
40818: PPUSH
40819: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
40823: LD_ADDR_VAR 0 4
40827: PUSH
40828: LD_EXP 122
40832: PUSH
40833: LD_VAR 0 2
40837: ARRAY
40838: PUSH
40839: LD_VAR 0 3
40843: ARRAY
40844: PUSH
40845: LD_INT 1
40847: ARRAY
40848: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
40849: LD_ADDR_VAR 0 5
40853: PUSH
40854: LD_EXP 122
40858: PUSH
40859: LD_VAR 0 2
40863: ARRAY
40864: PUSH
40865: LD_VAR 0 3
40869: ARRAY
40870: PUSH
40871: LD_INT 2
40873: ARRAY
40874: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
40875: LD_VAR 0 7
40879: PPUSH
40880: LD_INT 10
40882: PPUSH
40883: CALL 58182 0 2
40887: PUSH
40888: LD_INT 4
40890: ARRAY
40891: IFFALSE 40929
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
40893: LD_VAR 0 7
40897: PPUSH
40898: LD_VAR 0 6
40902: PUSH
40903: LD_INT 1
40905: ARRAY
40906: PPUSH
40907: LD_VAR 0 6
40911: PUSH
40912: LD_INT 2
40914: ARRAY
40915: PPUSH
40916: CALL_OW 111
// wait ( 0 0$10 ) ;
40920: LD_INT 350
40922: PPUSH
40923: CALL_OW 67
// end else
40927: GO 40955
// begin ComMoveXY ( tmp , x , y ) ;
40929: LD_VAR 0 7
40933: PPUSH
40934: LD_VAR 0 4
40938: PPUSH
40939: LD_VAR 0 5
40943: PPUSH
40944: CALL_OW 111
// wait ( 0 0$3 ) ;
40948: LD_INT 105
40950: PPUSH
40951: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
40955: LD_VAR 0 7
40959: PPUSH
40960: LD_VAR 0 4
40964: PPUSH
40965: LD_VAR 0 5
40969: PPUSH
40970: CALL_OW 307
40974: IFFALSE 40816
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
40976: LD_VAR 0 7
40980: PPUSH
40981: LD_VAR 0 4
40985: PPUSH
40986: LD_VAR 0 5
40990: PPUSH
40991: LD_VAR 0 8
40995: PUSH
40996: LD_VAR 0 3
41000: ARRAY
41001: PPUSH
41002: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
41006: LD_INT 35
41008: PPUSH
41009: CALL_OW 67
// until not HasTask ( tmp ) ;
41013: LD_VAR 0 7
41017: PPUSH
41018: CALL_OW 314
41022: NOT
41023: IFFALSE 41006
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
41025: LD_ADDR_EXP 123
41029: PUSH
41030: LD_EXP 123
41034: PPUSH
41035: LD_VAR 0 2
41039: PUSH
41040: LD_EXP 123
41044: PUSH
41045: LD_VAR 0 2
41049: ARRAY
41050: PUSH
41051: LD_INT 1
41053: PLUS
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PPUSH
41059: LD_VAR 0 8
41063: PUSH
41064: LD_VAR 0 3
41068: ARRAY
41069: PPUSH
41070: CALL 55589 0 3
41074: ST_TO_ADDR
// end ;
41075: GO 40733
41077: POP
41078: POP
// MC_Reset ( i , 124 ) ;
41079: LD_VAR 0 2
41083: PPUSH
41084: LD_INT 124
41086: PPUSH
41087: CALL 24698 0 2
// end ; end ;
41091: GO 40488
41093: POP
41094: POP
// end ;
41095: LD_VAR 0 1
41099: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
41100: LD_INT 0
41102: PPUSH
41103: PPUSH
41104: PPUSH
// if not mc_bases then
41105: LD_EXP 87
41109: NOT
41110: IFFALSE 41114
// exit ;
41112: GO 41720
// for i = 1 to mc_bases do
41114: LD_ADDR_VAR 0 2
41118: PUSH
41119: DOUBLE
41120: LD_INT 1
41122: DEC
41123: ST_TO_ADDR
41124: LD_EXP 87
41128: PUSH
41129: FOR_TO
41130: IFFALSE 41718
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
41132: LD_ADDR_VAR 0 3
41136: PUSH
41137: LD_EXP 87
41141: PUSH
41142: LD_VAR 0 2
41146: ARRAY
41147: PPUSH
41148: LD_INT 25
41150: PUSH
41151: LD_INT 4
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PPUSH
41158: CALL_OW 72
41162: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
41163: LD_VAR 0 3
41167: NOT
41168: PUSH
41169: LD_EXP 124
41173: PUSH
41174: LD_VAR 0 2
41178: ARRAY
41179: NOT
41180: OR
41181: PUSH
41182: LD_EXP 87
41186: PUSH
41187: LD_VAR 0 2
41191: ARRAY
41192: PPUSH
41193: LD_INT 2
41195: PUSH
41196: LD_INT 30
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 30
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: PPUSH
41221: CALL_OW 72
41225: NOT
41226: OR
41227: IFFALSE 41277
// begin if mc_deposits_finder [ i ] then
41229: LD_EXP 125
41233: PUSH
41234: LD_VAR 0 2
41238: ARRAY
41239: IFFALSE 41275
// begin MC_Reset ( i , 125 ) ;
41241: LD_VAR 0 2
41245: PPUSH
41246: LD_INT 125
41248: PPUSH
41249: CALL 24698 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41253: LD_ADDR_EXP 125
41257: PUSH
41258: LD_EXP 125
41262: PPUSH
41263: LD_VAR 0 2
41267: PPUSH
41268: EMPTY
41269: PPUSH
41270: CALL_OW 1
41274: ST_TO_ADDR
// end ; continue ;
41275: GO 41129
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
41277: LD_EXP 124
41281: PUSH
41282: LD_VAR 0 2
41286: ARRAY
41287: PUSH
41288: LD_INT 1
41290: ARRAY
41291: PUSH
41292: LD_INT 3
41294: ARRAY
41295: PUSH
41296: LD_INT 1
41298: EQUAL
41299: PUSH
41300: LD_INT 20
41302: PPUSH
41303: LD_EXP 113
41307: PUSH
41308: LD_VAR 0 2
41312: ARRAY
41313: PPUSH
41314: CALL_OW 321
41318: PUSH
41319: LD_INT 2
41321: NONEQUAL
41322: AND
41323: IFFALSE 41373
// begin if mc_deposits_finder [ i ] then
41325: LD_EXP 125
41329: PUSH
41330: LD_VAR 0 2
41334: ARRAY
41335: IFFALSE 41371
// begin MC_Reset ( i , 125 ) ;
41337: LD_VAR 0 2
41341: PPUSH
41342: LD_INT 125
41344: PPUSH
41345: CALL 24698 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41349: LD_ADDR_EXP 125
41353: PUSH
41354: LD_EXP 125
41358: PPUSH
41359: LD_VAR 0 2
41363: PPUSH
41364: EMPTY
41365: PPUSH
41366: CALL_OW 1
41370: ST_TO_ADDR
// end ; continue ;
41371: GO 41129
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
41373: LD_EXP 124
41377: PUSH
41378: LD_VAR 0 2
41382: ARRAY
41383: PUSH
41384: LD_INT 1
41386: ARRAY
41387: PUSH
41388: LD_INT 1
41390: ARRAY
41391: PPUSH
41392: LD_EXP 124
41396: PUSH
41397: LD_VAR 0 2
41401: ARRAY
41402: PUSH
41403: LD_INT 1
41405: ARRAY
41406: PUSH
41407: LD_INT 2
41409: ARRAY
41410: PPUSH
41411: LD_EXP 113
41415: PUSH
41416: LD_VAR 0 2
41420: ARRAY
41421: PPUSH
41422: CALL_OW 440
41426: IFFALSE 41469
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
41428: LD_ADDR_EXP 124
41432: PUSH
41433: LD_EXP 124
41437: PPUSH
41438: LD_VAR 0 2
41442: PPUSH
41443: LD_EXP 124
41447: PUSH
41448: LD_VAR 0 2
41452: ARRAY
41453: PPUSH
41454: LD_INT 1
41456: PPUSH
41457: CALL_OW 3
41461: PPUSH
41462: CALL_OW 1
41466: ST_TO_ADDR
41467: GO 41716
// begin if not mc_deposits_finder [ i ] then
41469: LD_EXP 125
41473: PUSH
41474: LD_VAR 0 2
41478: ARRAY
41479: NOT
41480: IFFALSE 41532
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
41482: LD_ADDR_EXP 125
41486: PUSH
41487: LD_EXP 125
41491: PPUSH
41492: LD_VAR 0 2
41496: PPUSH
41497: LD_VAR 0 3
41501: PUSH
41502: LD_INT 1
41504: ARRAY
41505: PUSH
41506: EMPTY
41507: LIST
41508: PPUSH
41509: CALL_OW 1
41513: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
41514: LD_VAR 0 3
41518: PUSH
41519: LD_INT 1
41521: ARRAY
41522: PPUSH
41523: LD_INT 125
41525: PPUSH
41526: CALL_OW 109
// end else
41530: GO 41716
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
41532: LD_EXP 125
41536: PUSH
41537: LD_VAR 0 2
41541: ARRAY
41542: PUSH
41543: LD_INT 1
41545: ARRAY
41546: PPUSH
41547: CALL_OW 310
41551: IFFALSE 41574
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
41553: LD_EXP 125
41557: PUSH
41558: LD_VAR 0 2
41562: ARRAY
41563: PUSH
41564: LD_INT 1
41566: ARRAY
41567: PPUSH
41568: CALL_OW 122
41572: GO 41716
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
41574: LD_EXP 125
41578: PUSH
41579: LD_VAR 0 2
41583: ARRAY
41584: PUSH
41585: LD_INT 1
41587: ARRAY
41588: PPUSH
41589: CALL_OW 314
41593: NOT
41594: PUSH
41595: LD_EXP 125
41599: PUSH
41600: LD_VAR 0 2
41604: ARRAY
41605: PUSH
41606: LD_INT 1
41608: ARRAY
41609: PPUSH
41610: LD_EXP 124
41614: PUSH
41615: LD_VAR 0 2
41619: ARRAY
41620: PUSH
41621: LD_INT 1
41623: ARRAY
41624: PUSH
41625: LD_INT 1
41627: ARRAY
41628: PPUSH
41629: LD_EXP 124
41633: PUSH
41634: LD_VAR 0 2
41638: ARRAY
41639: PUSH
41640: LD_INT 1
41642: ARRAY
41643: PUSH
41644: LD_INT 2
41646: ARRAY
41647: PPUSH
41648: CALL_OW 297
41652: PUSH
41653: LD_INT 6
41655: GREATER
41656: AND
41657: IFFALSE 41716
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
41659: LD_EXP 125
41663: PUSH
41664: LD_VAR 0 2
41668: ARRAY
41669: PUSH
41670: LD_INT 1
41672: ARRAY
41673: PPUSH
41674: LD_EXP 124
41678: PUSH
41679: LD_VAR 0 2
41683: ARRAY
41684: PUSH
41685: LD_INT 1
41687: ARRAY
41688: PUSH
41689: LD_INT 1
41691: ARRAY
41692: PPUSH
41693: LD_EXP 124
41697: PUSH
41698: LD_VAR 0 2
41702: ARRAY
41703: PUSH
41704: LD_INT 1
41706: ARRAY
41707: PUSH
41708: LD_INT 2
41710: ARRAY
41711: PPUSH
41712: CALL_OW 111
// end ; end ; end ;
41716: GO 41129
41718: POP
41719: POP
// end ;
41720: LD_VAR 0 1
41724: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
41725: LD_INT 0
41727: PPUSH
41728: PPUSH
41729: PPUSH
41730: PPUSH
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
// if not mc_bases then
41738: LD_EXP 87
41742: NOT
41743: IFFALSE 41747
// exit ;
41745: GO 42687
// for i = 1 to mc_bases do
41747: LD_ADDR_VAR 0 2
41751: PUSH
41752: DOUBLE
41753: LD_INT 1
41755: DEC
41756: ST_TO_ADDR
41757: LD_EXP 87
41761: PUSH
41762: FOR_TO
41763: IFFALSE 42685
// begin if not mc_bases [ i ] or mc_scan [ i ] then
41765: LD_EXP 87
41769: PUSH
41770: LD_VAR 0 2
41774: ARRAY
41775: NOT
41776: PUSH
41777: LD_EXP 110
41781: PUSH
41782: LD_VAR 0 2
41786: ARRAY
41787: OR
41788: IFFALSE 41792
// continue ;
41790: GO 41762
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
41792: LD_ADDR_VAR 0 7
41796: PUSH
41797: LD_EXP 87
41801: PUSH
41802: LD_VAR 0 2
41806: ARRAY
41807: PUSH
41808: LD_INT 1
41810: ARRAY
41811: PPUSH
41812: CALL_OW 248
41816: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
41817: LD_VAR 0 7
41821: PUSH
41822: LD_INT 3
41824: EQUAL
41825: PUSH
41826: LD_EXP 106
41830: PUSH
41831: LD_VAR 0 2
41835: ARRAY
41836: PUSH
41837: LD_EXP 109
41841: PUSH
41842: LD_VAR 0 2
41846: ARRAY
41847: UNION
41848: PPUSH
41849: LD_INT 33
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PPUSH
41859: CALL_OW 72
41863: NOT
41864: OR
41865: IFFALSE 41869
// continue ;
41867: GO 41762
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
41869: LD_ADDR_VAR 0 9
41873: PUSH
41874: LD_EXP 87
41878: PUSH
41879: LD_VAR 0 2
41883: ARRAY
41884: PPUSH
41885: LD_INT 30
41887: PUSH
41888: LD_INT 36
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PPUSH
41895: CALL_OW 72
41899: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
41900: LD_ADDR_VAR 0 10
41904: PUSH
41905: LD_EXP 106
41909: PUSH
41910: LD_VAR 0 2
41914: ARRAY
41915: PPUSH
41916: LD_INT 34
41918: PUSH
41919: LD_INT 31
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PPUSH
41926: CALL_OW 72
41930: ST_TO_ADDR
// if not cts and not mcts then
41931: LD_VAR 0 9
41935: NOT
41936: PUSH
41937: LD_VAR 0 10
41941: NOT
41942: AND
41943: IFFALSE 41947
// continue ;
41945: GO 41762
// x := cts ;
41947: LD_ADDR_VAR 0 11
41951: PUSH
41952: LD_VAR 0 9
41956: ST_TO_ADDR
// if not x then
41957: LD_VAR 0 11
41961: NOT
41962: IFFALSE 41974
// x := mcts ;
41964: LD_ADDR_VAR 0 11
41968: PUSH
41969: LD_VAR 0 10
41973: ST_TO_ADDR
// if not x then
41974: LD_VAR 0 11
41978: NOT
41979: IFFALSE 41983
// continue ;
41981: GO 41762
// if mc_remote_driver [ i ] then
41983: LD_EXP 127
41987: PUSH
41988: LD_VAR 0 2
41992: ARRAY
41993: IFFALSE 42380
// for j in mc_remote_driver [ i ] do
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_EXP 127
42004: PUSH
42005: LD_VAR 0 2
42009: ARRAY
42010: PUSH
42011: FOR_IN
42012: IFFALSE 42378
// begin if GetClass ( j ) <> 3 then
42014: LD_VAR 0 3
42018: PPUSH
42019: CALL_OW 257
42023: PUSH
42024: LD_INT 3
42026: NONEQUAL
42027: IFFALSE 42080
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
42029: LD_ADDR_EXP 127
42033: PUSH
42034: LD_EXP 127
42038: PPUSH
42039: LD_VAR 0 2
42043: PPUSH
42044: LD_EXP 127
42048: PUSH
42049: LD_VAR 0 2
42053: ARRAY
42054: PUSH
42055: LD_VAR 0 3
42059: DIFF
42060: PPUSH
42061: CALL_OW 1
42065: ST_TO_ADDR
// SetTag ( j , 0 ) ;
42066: LD_VAR 0 3
42070: PPUSH
42071: LD_INT 0
42073: PPUSH
42074: CALL_OW 109
// continue ;
42078: GO 42011
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
42080: LD_EXP 106
42084: PUSH
42085: LD_VAR 0 2
42089: ARRAY
42090: PPUSH
42091: LD_INT 34
42093: PUSH
42094: LD_INT 31
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 58
42103: PUSH
42104: EMPTY
42105: LIST
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PPUSH
42111: CALL_OW 72
42115: PUSH
42116: LD_VAR 0 3
42120: PPUSH
42121: CALL 84238 0 1
42125: NOT
42126: AND
42127: IFFALSE 42198
// begin if IsInUnit ( j ) then
42129: LD_VAR 0 3
42133: PPUSH
42134: CALL_OW 310
42138: IFFALSE 42149
// ComExitBuilding ( j ) ;
42140: LD_VAR 0 3
42144: PPUSH
42145: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
42149: LD_VAR 0 3
42153: PPUSH
42154: LD_EXP 106
42158: PUSH
42159: LD_VAR 0 2
42163: ARRAY
42164: PPUSH
42165: LD_INT 34
42167: PUSH
42168: LD_INT 31
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 58
42177: PUSH
42178: EMPTY
42179: LIST
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PPUSH
42185: CALL_OW 72
42189: PUSH
42190: LD_INT 1
42192: ARRAY
42193: PPUSH
42194: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
42198: LD_VAR 0 3
42202: PPUSH
42203: CALL_OW 310
42207: NOT
42208: PUSH
42209: LD_VAR 0 3
42213: PPUSH
42214: CALL_OW 310
42218: PPUSH
42219: CALL_OW 266
42223: PUSH
42224: LD_INT 36
42226: NONEQUAL
42227: PUSH
42228: LD_VAR 0 3
42232: PPUSH
42233: CALL 84238 0 1
42237: NOT
42238: AND
42239: OR
42240: IFFALSE 42376
// begin if IsInUnit ( j ) then
42242: LD_VAR 0 3
42246: PPUSH
42247: CALL_OW 310
42251: IFFALSE 42262
// ComExitBuilding ( j ) ;
42253: LD_VAR 0 3
42257: PPUSH
42258: CALL_OW 122
// ct := 0 ;
42262: LD_ADDR_VAR 0 8
42266: PUSH
42267: LD_INT 0
42269: ST_TO_ADDR
// for k in x do
42270: LD_ADDR_VAR 0 4
42274: PUSH
42275: LD_VAR 0 11
42279: PUSH
42280: FOR_IN
42281: IFFALSE 42354
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
42283: LD_VAR 0 4
42287: PPUSH
42288: CALL_OW 264
42292: PUSH
42293: LD_INT 31
42295: EQUAL
42296: PUSH
42297: LD_VAR 0 4
42301: PPUSH
42302: CALL_OW 311
42306: NOT
42307: AND
42308: PUSH
42309: LD_VAR 0 4
42313: PPUSH
42314: CALL_OW 266
42318: PUSH
42319: LD_INT 36
42321: EQUAL
42322: PUSH
42323: LD_VAR 0 4
42327: PPUSH
42328: CALL_OW 313
42332: PUSH
42333: LD_INT 3
42335: LESS
42336: AND
42337: OR
42338: IFFALSE 42352
// begin ct := k ;
42340: LD_ADDR_VAR 0 8
42344: PUSH
42345: LD_VAR 0 4
42349: ST_TO_ADDR
// break ;
42350: GO 42354
// end ;
42352: GO 42280
42354: POP
42355: POP
// if ct then
42356: LD_VAR 0 8
42360: IFFALSE 42376
// ComEnterUnit ( j , ct ) ;
42362: LD_VAR 0 3
42366: PPUSH
42367: LD_VAR 0 8
42371: PPUSH
42372: CALL_OW 120
// end ; end ;
42376: GO 42011
42378: POP
42379: POP
// places := 0 ;
42380: LD_ADDR_VAR 0 5
42384: PUSH
42385: LD_INT 0
42387: ST_TO_ADDR
// for j = 1 to x do
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: DOUBLE
42394: LD_INT 1
42396: DEC
42397: ST_TO_ADDR
42398: LD_VAR 0 11
42402: PUSH
42403: FOR_TO
42404: IFFALSE 42480
// if GetWeapon ( x [ j ] ) = ar_control_tower then
42406: LD_VAR 0 11
42410: PUSH
42411: LD_VAR 0 3
42415: ARRAY
42416: PPUSH
42417: CALL_OW 264
42421: PUSH
42422: LD_INT 31
42424: EQUAL
42425: IFFALSE 42443
// places := places + 1 else
42427: LD_ADDR_VAR 0 5
42431: PUSH
42432: LD_VAR 0 5
42436: PUSH
42437: LD_INT 1
42439: PLUS
42440: ST_TO_ADDR
42441: GO 42478
// if GetBType ( x [ j ] ) = b_control_tower then
42443: LD_VAR 0 11
42447: PUSH
42448: LD_VAR 0 3
42452: ARRAY
42453: PPUSH
42454: CALL_OW 266
42458: PUSH
42459: LD_INT 36
42461: EQUAL
42462: IFFALSE 42478
// places := places + 3 ;
42464: LD_ADDR_VAR 0 5
42468: PUSH
42469: LD_VAR 0 5
42473: PUSH
42474: LD_INT 3
42476: PLUS
42477: ST_TO_ADDR
42478: GO 42403
42480: POP
42481: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
42482: LD_VAR 0 5
42486: PUSH
42487: LD_INT 0
42489: EQUAL
42490: PUSH
42491: LD_VAR 0 5
42495: PUSH
42496: LD_EXP 127
42500: PUSH
42501: LD_VAR 0 2
42505: ARRAY
42506: LESSEQUAL
42507: OR
42508: IFFALSE 42512
// continue ;
42510: GO 41762
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
42512: LD_ADDR_VAR 0 6
42516: PUSH
42517: LD_EXP 87
42521: PUSH
42522: LD_VAR 0 2
42526: ARRAY
42527: PPUSH
42528: LD_INT 25
42530: PUSH
42531: LD_INT 3
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PPUSH
42538: CALL_OW 72
42542: PUSH
42543: LD_EXP 127
42547: PUSH
42548: LD_VAR 0 2
42552: ARRAY
42553: DIFF
42554: PPUSH
42555: LD_INT 3
42557: PPUSH
42558: CALL 85138 0 2
42562: ST_TO_ADDR
// for j in tmp do
42563: LD_ADDR_VAR 0 3
42567: PUSH
42568: LD_VAR 0 6
42572: PUSH
42573: FOR_IN
42574: IFFALSE 42609
// if GetTag ( j ) > 0 then
42576: LD_VAR 0 3
42580: PPUSH
42581: CALL_OW 110
42585: PUSH
42586: LD_INT 0
42588: GREATER
42589: IFFALSE 42607
// tmp := tmp diff j ;
42591: LD_ADDR_VAR 0 6
42595: PUSH
42596: LD_VAR 0 6
42600: PUSH
42601: LD_VAR 0 3
42605: DIFF
42606: ST_TO_ADDR
42607: GO 42573
42609: POP
42610: POP
// if not tmp then
42611: LD_VAR 0 6
42615: NOT
42616: IFFALSE 42620
// continue ;
42618: GO 41762
// if places then
42620: LD_VAR 0 5
42624: IFFALSE 42683
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
42626: LD_ADDR_EXP 127
42630: PUSH
42631: LD_EXP 127
42635: PPUSH
42636: LD_VAR 0 2
42640: PPUSH
42641: LD_EXP 127
42645: PUSH
42646: LD_VAR 0 2
42650: ARRAY
42651: PUSH
42652: LD_VAR 0 6
42656: PUSH
42657: LD_INT 1
42659: ARRAY
42660: UNION
42661: PPUSH
42662: CALL_OW 1
42666: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
42667: LD_VAR 0 6
42671: PUSH
42672: LD_INT 1
42674: ARRAY
42675: PPUSH
42676: LD_INT 126
42678: PPUSH
42679: CALL_OW 109
// end ; end ;
42683: GO 41762
42685: POP
42686: POP
// end ;
42687: LD_VAR 0 1
42691: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
42692: LD_INT 0
42694: PPUSH
42695: PPUSH
42696: PPUSH
42697: PPUSH
42698: PPUSH
42699: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
42700: LD_VAR 0 1
42704: NOT
42705: PUSH
42706: LD_VAR 0 2
42710: NOT
42711: OR
42712: PUSH
42713: LD_VAR 0 3
42717: NOT
42718: OR
42719: PUSH
42720: LD_VAR 0 4
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 4
42736: PUSH
42737: LD_INT 5
42739: PUSH
42740: LD_INT 8
42742: PUSH
42743: LD_INT 9
42745: PUSH
42746: LD_INT 15
42748: PUSH
42749: LD_INT 16
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: IN
42763: NOT
42764: OR
42765: IFFALSE 42769
// exit ;
42767: GO 43669
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
42769: LD_ADDR_VAR 0 2
42773: PUSH
42774: LD_VAR 0 2
42778: PPUSH
42779: LD_INT 21
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 24
42791: PUSH
42792: LD_INT 250
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PPUSH
42803: CALL_OW 72
42807: ST_TO_ADDR
// case class of 1 , 15 :
42808: LD_VAR 0 4
42812: PUSH
42813: LD_INT 1
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42827
42819: LD_INT 15
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 42912
42827: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
42828: LD_ADDR_VAR 0 8
42832: PUSH
42833: LD_VAR 0 2
42837: PPUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 30
42843: PUSH
42844: LD_INT 32
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 30
42853: PUSH
42854: LD_INT 31
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: PPUSH
42866: CALL_OW 72
42870: PUSH
42871: LD_VAR 0 2
42875: PPUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 30
42881: PUSH
42882: LD_INT 4
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 30
42891: PUSH
42892: LD_INT 5
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: LIST
42903: PPUSH
42904: CALL_OW 72
42908: ADD
42909: ST_TO_ADDR
42910: GO 43158
42912: LD_INT 2
42914: DOUBLE
42915: EQUAL
42916: IFTRUE 42926
42918: LD_INT 16
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42972
42926: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
42927: LD_ADDR_VAR 0 8
42931: PUSH
42932: LD_VAR 0 2
42936: PPUSH
42937: LD_INT 2
42939: PUSH
42940: LD_INT 30
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 30
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: PPUSH
42965: CALL_OW 72
42969: ST_TO_ADDR
42970: GO 43158
42972: LD_INT 3
42974: DOUBLE
42975: EQUAL
42976: IFTRUE 42980
42978: GO 43026
42980: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
42981: LD_ADDR_VAR 0 8
42985: PUSH
42986: LD_VAR 0 2
42990: PPUSH
42991: LD_INT 2
42993: PUSH
42994: LD_INT 30
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 30
43006: PUSH
43007: LD_INT 3
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: PPUSH
43019: CALL_OW 72
43023: ST_TO_ADDR
43024: GO 43158
43026: LD_INT 4
43028: DOUBLE
43029: EQUAL
43030: IFTRUE 43034
43032: GO 43091
43034: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
43035: LD_ADDR_VAR 0 8
43039: PUSH
43040: LD_VAR 0 2
43044: PPUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 30
43050: PUSH
43051: LD_INT 6
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 30
43060: PUSH
43061: LD_INT 7
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 30
43070: PUSH
43071: LD_INT 8
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: PPUSH
43084: CALL_OW 72
43088: ST_TO_ADDR
43089: GO 43158
43091: LD_INT 5
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43111
43097: LD_INT 8
43099: DOUBLE
43100: EQUAL
43101: IFTRUE 43111
43103: LD_INT 9
43105: DOUBLE
43106: EQUAL
43107: IFTRUE 43111
43109: GO 43157
43111: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
43112: LD_ADDR_VAR 0 8
43116: PUSH
43117: LD_VAR 0 2
43121: PPUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 30
43127: PUSH
43128: LD_INT 4
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 30
43137: PUSH
43138: LD_INT 5
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: PPUSH
43150: CALL_OW 72
43154: ST_TO_ADDR
43155: GO 43158
43157: POP
// if not tmp then
43158: LD_VAR 0 8
43162: NOT
43163: IFFALSE 43167
// exit ;
43165: GO 43669
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
43167: LD_VAR 0 4
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 15
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: IN
43182: PUSH
43183: LD_EXP 96
43187: PUSH
43188: LD_VAR 0 1
43192: ARRAY
43193: AND
43194: IFFALSE 43350
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
43196: LD_ADDR_VAR 0 9
43200: PUSH
43201: LD_EXP 96
43205: PUSH
43206: LD_VAR 0 1
43210: ARRAY
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
43216: LD_VAR 0 9
43220: PUSH
43221: LD_EXP 97
43225: PUSH
43226: LD_VAR 0 1
43230: ARRAY
43231: IN
43232: NOT
43233: IFFALSE 43348
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
43235: LD_ADDR_EXP 97
43239: PUSH
43240: LD_EXP 97
43244: PPUSH
43245: LD_VAR 0 1
43249: PUSH
43250: LD_EXP 97
43254: PUSH
43255: LD_VAR 0 1
43259: ARRAY
43260: PUSH
43261: LD_INT 1
43263: PLUS
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PPUSH
43269: LD_VAR 0 9
43273: PPUSH
43274: CALL 55589 0 3
43278: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
43279: LD_ADDR_EXP 96
43283: PUSH
43284: LD_EXP 96
43288: PPUSH
43289: LD_VAR 0 1
43293: PPUSH
43294: LD_EXP 96
43298: PUSH
43299: LD_VAR 0 1
43303: ARRAY
43304: PUSH
43305: LD_VAR 0 9
43309: DIFF
43310: PPUSH
43311: CALL_OW 1
43315: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
43316: LD_VAR 0 3
43320: PPUSH
43321: LD_EXP 97
43325: PUSH
43326: LD_VAR 0 1
43330: ARRAY
43331: PUSH
43332: LD_EXP 97
43336: PUSH
43337: LD_VAR 0 1
43341: ARRAY
43342: ARRAY
43343: PPUSH
43344: CALL_OW 120
// end ; exit ;
43348: GO 43669
// end ; if tmp > 1 then
43350: LD_VAR 0 8
43354: PUSH
43355: LD_INT 1
43357: GREATER
43358: IFFALSE 43462
// for i = 2 to tmp do
43360: LD_ADDR_VAR 0 6
43364: PUSH
43365: DOUBLE
43366: LD_INT 2
43368: DEC
43369: ST_TO_ADDR
43370: LD_VAR 0 8
43374: PUSH
43375: FOR_TO
43376: IFFALSE 43460
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
43378: LD_VAR 0 8
43382: PUSH
43383: LD_VAR 0 6
43387: ARRAY
43388: PPUSH
43389: CALL_OW 461
43393: PUSH
43394: LD_INT 6
43396: EQUAL
43397: IFFALSE 43458
// begin x := tmp [ i ] ;
43399: LD_ADDR_VAR 0 9
43403: PUSH
43404: LD_VAR 0 8
43408: PUSH
43409: LD_VAR 0 6
43413: ARRAY
43414: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
43415: LD_ADDR_VAR 0 8
43419: PUSH
43420: LD_VAR 0 8
43424: PPUSH
43425: LD_VAR 0 6
43429: PPUSH
43430: CALL_OW 3
43434: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
43435: LD_ADDR_VAR 0 8
43439: PUSH
43440: LD_VAR 0 8
43444: PPUSH
43445: LD_INT 1
43447: PPUSH
43448: LD_VAR 0 9
43452: PPUSH
43453: CALL_OW 2
43457: ST_TO_ADDR
// end ;
43458: GO 43375
43460: POP
43461: POP
// for i in tmp do
43462: LD_ADDR_VAR 0 6
43466: PUSH
43467: LD_VAR 0 8
43471: PUSH
43472: FOR_IN
43473: IFFALSE 43542
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
43475: LD_VAR 0 6
43479: PPUSH
43480: CALL_OW 313
43484: PUSH
43485: LD_INT 6
43487: LESS
43488: PUSH
43489: LD_VAR 0 6
43493: PPUSH
43494: CALL_OW 266
43498: PUSH
43499: LD_INT 31
43501: PUSH
43502: LD_INT 32
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: IN
43509: NOT
43510: AND
43511: PUSH
43512: LD_VAR 0 6
43516: PPUSH
43517: CALL_OW 313
43521: PUSH
43522: LD_INT 0
43524: EQUAL
43525: OR
43526: IFFALSE 43540
// begin j := i ;
43528: LD_ADDR_VAR 0 7
43532: PUSH
43533: LD_VAR 0 6
43537: ST_TO_ADDR
// break ;
43538: GO 43542
// end ; end ;
43540: GO 43472
43542: POP
43543: POP
// if j then
43544: LD_VAR 0 7
43548: IFFALSE 43566
// ComEnterUnit ( unit , j ) else
43550: LD_VAR 0 3
43554: PPUSH
43555: LD_VAR 0 7
43559: PPUSH
43560: CALL_OW 120
43564: GO 43669
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43566: LD_ADDR_VAR 0 10
43570: PUSH
43571: LD_VAR 0 2
43575: PPUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 30
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 30
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: PPUSH
43604: CALL_OW 72
43608: ST_TO_ADDR
// if depot then
43609: LD_VAR 0 10
43613: IFFALSE 43669
// begin depot := NearestUnitToUnit ( depot , unit ) ;
43615: LD_ADDR_VAR 0 10
43619: PUSH
43620: LD_VAR 0 10
43624: PPUSH
43625: LD_VAR 0 3
43629: PPUSH
43630: CALL_OW 74
43634: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
43635: LD_VAR 0 3
43639: PPUSH
43640: LD_VAR 0 10
43644: PPUSH
43645: CALL_OW 296
43649: PUSH
43650: LD_INT 10
43652: GREATER
43653: IFFALSE 43669
// ComStandNearbyBuilding ( unit , depot ) ;
43655: LD_VAR 0 3
43659: PPUSH
43660: LD_VAR 0 10
43664: PPUSH
43665: CALL 52203 0 2
// end ; end ; end ;
43669: LD_VAR 0 5
43673: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
43674: LD_INT 0
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
// if not mc_bases then
43680: LD_EXP 87
43684: NOT
43685: IFFALSE 43689
// exit ;
43687: GO 43928
// for i = 1 to mc_bases do
43689: LD_ADDR_VAR 0 2
43693: PUSH
43694: DOUBLE
43695: LD_INT 1
43697: DEC
43698: ST_TO_ADDR
43699: LD_EXP 87
43703: PUSH
43704: FOR_TO
43705: IFFALSE 43926
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
43707: LD_ADDR_VAR 0 4
43711: PUSH
43712: LD_EXP 87
43716: PUSH
43717: LD_VAR 0 2
43721: ARRAY
43722: PPUSH
43723: LD_INT 21
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PPUSH
43733: CALL_OW 72
43737: PUSH
43738: LD_EXP 116
43742: PUSH
43743: LD_VAR 0 2
43747: ARRAY
43748: UNION
43749: ST_TO_ADDR
// if not tmp then
43750: LD_VAR 0 4
43754: NOT
43755: IFFALSE 43759
// continue ;
43757: GO 43704
// for j in tmp do
43759: LD_ADDR_VAR 0 3
43763: PUSH
43764: LD_VAR 0 4
43768: PUSH
43769: FOR_IN
43770: IFFALSE 43922
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
43772: LD_VAR 0 3
43776: PPUSH
43777: CALL_OW 110
43781: NOT
43782: PUSH
43783: LD_VAR 0 3
43787: PPUSH
43788: CALL_OW 314
43792: NOT
43793: AND
43794: PUSH
43795: LD_VAR 0 3
43799: PPUSH
43800: CALL_OW 311
43804: NOT
43805: AND
43806: PUSH
43807: LD_VAR 0 3
43811: PPUSH
43812: CALL_OW 310
43816: NOT
43817: AND
43818: PUSH
43819: LD_VAR 0 3
43823: PUSH
43824: LD_EXP 90
43828: PUSH
43829: LD_VAR 0 2
43833: ARRAY
43834: PUSH
43835: LD_INT 1
43837: ARRAY
43838: IN
43839: NOT
43840: AND
43841: PUSH
43842: LD_VAR 0 3
43846: PUSH
43847: LD_EXP 90
43851: PUSH
43852: LD_VAR 0 2
43856: ARRAY
43857: PUSH
43858: LD_INT 2
43860: ARRAY
43861: IN
43862: NOT
43863: AND
43864: PUSH
43865: LD_VAR 0 3
43869: PUSH
43870: LD_EXP 99
43874: PUSH
43875: LD_VAR 0 2
43879: ARRAY
43880: IN
43881: NOT
43882: AND
43883: IFFALSE 43920
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
43885: LD_VAR 0 2
43889: PPUSH
43890: LD_EXP 87
43894: PUSH
43895: LD_VAR 0 2
43899: ARRAY
43900: PPUSH
43901: LD_VAR 0 3
43905: PPUSH
43906: LD_VAR 0 3
43910: PPUSH
43911: CALL_OW 257
43915: PPUSH
43916: CALL 42692 0 4
// end ;
43920: GO 43769
43922: POP
43923: POP
// end ;
43924: GO 43704
43926: POP
43927: POP
// end ;
43928: LD_VAR 0 1
43932: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
43933: LD_INT 0
43935: PPUSH
43936: PPUSH
43937: PPUSH
43938: PPUSH
43939: PPUSH
43940: PPUSH
// if not mc_bases [ base ] then
43941: LD_EXP 87
43945: PUSH
43946: LD_VAR 0 1
43950: ARRAY
43951: NOT
43952: IFFALSE 43956
// exit ;
43954: GO 44138
// tmp := [ ] ;
43956: LD_ADDR_VAR 0 6
43960: PUSH
43961: EMPTY
43962: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
43963: LD_ADDR_VAR 0 7
43967: PUSH
43968: LD_VAR 0 3
43972: PPUSH
43973: LD_INT 0
43975: PPUSH
43976: CALL_OW 517
43980: ST_TO_ADDR
// if not list then
43981: LD_VAR 0 7
43985: NOT
43986: IFFALSE 43990
// exit ;
43988: GO 44138
// for i = 1 to amount do
43990: LD_ADDR_VAR 0 5
43994: PUSH
43995: DOUBLE
43996: LD_INT 1
43998: DEC
43999: ST_TO_ADDR
44000: LD_VAR 0 2
44004: PUSH
44005: FOR_TO
44006: IFFALSE 44086
// begin x := rand ( 1 , list [ 1 ] ) ;
44008: LD_ADDR_VAR 0 8
44012: PUSH
44013: LD_INT 1
44015: PPUSH
44016: LD_VAR 0 7
44020: PUSH
44021: LD_INT 1
44023: ARRAY
44024: PPUSH
44025: CALL_OW 12
44029: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
44030: LD_ADDR_VAR 0 6
44034: PUSH
44035: LD_VAR 0 6
44039: PPUSH
44040: LD_VAR 0 5
44044: PPUSH
44045: LD_VAR 0 7
44049: PUSH
44050: LD_INT 1
44052: ARRAY
44053: PUSH
44054: LD_VAR 0 8
44058: ARRAY
44059: PUSH
44060: LD_VAR 0 7
44064: PUSH
44065: LD_INT 2
44067: ARRAY
44068: PUSH
44069: LD_VAR 0 8
44073: ARRAY
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PPUSH
44079: CALL_OW 1
44083: ST_TO_ADDR
// end ;
44084: GO 44005
44086: POP
44087: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
44088: LD_ADDR_EXP 100
44092: PUSH
44093: LD_EXP 100
44097: PPUSH
44098: LD_VAR 0 1
44102: PPUSH
44103: LD_VAR 0 6
44107: PPUSH
44108: CALL_OW 1
44112: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
44113: LD_ADDR_EXP 102
44117: PUSH
44118: LD_EXP 102
44122: PPUSH
44123: LD_VAR 0 1
44127: PPUSH
44128: LD_VAR 0 3
44132: PPUSH
44133: CALL_OW 1
44137: ST_TO_ADDR
// end ;
44138: LD_VAR 0 4
44142: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
44143: LD_INT 0
44145: PPUSH
// if not mc_bases [ base ] then
44146: LD_EXP 87
44150: PUSH
44151: LD_VAR 0 1
44155: ARRAY
44156: NOT
44157: IFFALSE 44161
// exit ;
44159: GO 44186
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
44161: LD_ADDR_EXP 92
44165: PUSH
44166: LD_EXP 92
44170: PPUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: LD_VAR 0 2
44180: PPUSH
44181: CALL_OW 1
44185: ST_TO_ADDR
// end ;
44186: LD_VAR 0 3
44190: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
44191: LD_INT 0
44193: PPUSH
// if not mc_bases [ base ] then
44194: LD_EXP 87
44198: PUSH
44199: LD_VAR 0 1
44203: ARRAY
44204: NOT
44205: IFFALSE 44209
// exit ;
44207: GO 44246
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
44209: LD_ADDR_EXP 92
44213: PUSH
44214: LD_EXP 92
44218: PPUSH
44219: LD_VAR 0 1
44223: PPUSH
44224: LD_EXP 92
44228: PUSH
44229: LD_VAR 0 1
44233: ARRAY
44234: PUSH
44235: LD_VAR 0 2
44239: UNION
44240: PPUSH
44241: CALL_OW 1
44245: ST_TO_ADDR
// end ;
44246: LD_VAR 0 3
44250: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
44251: LD_INT 0
44253: PPUSH
// if not mc_bases [ base ] then
44254: LD_EXP 87
44258: PUSH
44259: LD_VAR 0 1
44263: ARRAY
44264: NOT
44265: IFFALSE 44269
// exit ;
44267: GO 44294
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
44269: LD_ADDR_EXP 108
44273: PUSH
44274: LD_EXP 108
44278: PPUSH
44279: LD_VAR 0 1
44283: PPUSH
44284: LD_VAR 0 2
44288: PPUSH
44289: CALL_OW 1
44293: ST_TO_ADDR
// end ;
44294: LD_VAR 0 3
44298: RET
// export function MC_InsertProduceList ( base , components ) ; begin
44299: LD_INT 0
44301: PPUSH
// if not mc_bases [ base ] then
44302: LD_EXP 87
44306: PUSH
44307: LD_VAR 0 1
44311: ARRAY
44312: NOT
44313: IFFALSE 44317
// exit ;
44315: GO 44354
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
44317: LD_ADDR_EXP 108
44321: PUSH
44322: LD_EXP 108
44326: PPUSH
44327: LD_VAR 0 1
44331: PPUSH
44332: LD_EXP 108
44336: PUSH
44337: LD_VAR 0 1
44341: ARRAY
44342: PUSH
44343: LD_VAR 0 2
44347: ADD
44348: PPUSH
44349: CALL_OW 1
44353: ST_TO_ADDR
// end ;
44354: LD_VAR 0 3
44358: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
44359: LD_INT 0
44361: PPUSH
// if not mc_bases [ base ] then
44362: LD_EXP 87
44366: PUSH
44367: LD_VAR 0 1
44371: ARRAY
44372: NOT
44373: IFFALSE 44377
// exit ;
44375: GO 44431
// mc_defender := Replace ( mc_defender , base , deflist ) ;
44377: LD_ADDR_EXP 109
44381: PUSH
44382: LD_EXP 109
44386: PPUSH
44387: LD_VAR 0 1
44391: PPUSH
44392: LD_VAR 0 2
44396: PPUSH
44397: CALL_OW 1
44401: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
44402: LD_ADDR_EXP 98
44406: PUSH
44407: LD_EXP 98
44411: PPUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: LD_VAR 0 2
44421: PUSH
44422: LD_INT 0
44424: PLUS
44425: PPUSH
44426: CALL_OW 1
44430: ST_TO_ADDR
// end ;
44431: LD_VAR 0 3
44435: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
44436: LD_INT 0
44438: PPUSH
// if not mc_bases [ base ] then
44439: LD_EXP 87
44443: PUSH
44444: LD_VAR 0 1
44448: ARRAY
44449: NOT
44450: IFFALSE 44454
// exit ;
44452: GO 44479
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
44454: LD_ADDR_EXP 98
44458: PUSH
44459: LD_EXP 98
44463: PPUSH
44464: LD_VAR 0 1
44468: PPUSH
44469: LD_VAR 0 2
44473: PPUSH
44474: CALL_OW 1
44478: ST_TO_ADDR
// end ;
44479: LD_VAR 0 3
44483: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
44484: LD_INT 0
44486: PPUSH
44487: PPUSH
44488: PPUSH
44489: PPUSH
// if not mc_bases [ base ] then
44490: LD_EXP 87
44494: PUSH
44495: LD_VAR 0 1
44499: ARRAY
44500: NOT
44501: IFFALSE 44505
// exit ;
44503: GO 44570
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
44505: LD_ADDR_EXP 107
44509: PUSH
44510: LD_EXP 107
44514: PPUSH
44515: LD_VAR 0 1
44519: PUSH
44520: LD_EXP 107
44524: PUSH
44525: LD_VAR 0 1
44529: ARRAY
44530: PUSH
44531: LD_INT 1
44533: PLUS
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PPUSH
44539: LD_VAR 0 1
44543: PUSH
44544: LD_VAR 0 2
44548: PUSH
44549: LD_VAR 0 3
44553: PUSH
44554: LD_VAR 0 4
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: PPUSH
44565: CALL 55589 0 3
44569: ST_TO_ADDR
// end ;
44570: LD_VAR 0 5
44574: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
44575: LD_INT 0
44577: PPUSH
// if not mc_bases [ base ] then
44578: LD_EXP 87
44582: PUSH
44583: LD_VAR 0 1
44587: ARRAY
44588: NOT
44589: IFFALSE 44593
// exit ;
44591: GO 44618
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
44593: LD_ADDR_EXP 124
44597: PUSH
44598: LD_EXP 124
44602: PPUSH
44603: LD_VAR 0 1
44607: PPUSH
44608: LD_VAR 0 2
44612: PPUSH
44613: CALL_OW 1
44617: ST_TO_ADDR
// end ;
44618: LD_VAR 0 3
44622: RET
// export function MC_GetMinesField ( base ) ; begin
44623: LD_INT 0
44625: PPUSH
// result := mc_mines [ base ] ;
44626: LD_ADDR_VAR 0 2
44630: PUSH
44631: LD_EXP 100
44635: PUSH
44636: LD_VAR 0 1
44640: ARRAY
44641: ST_TO_ADDR
// end ;
44642: LD_VAR 0 2
44646: RET
// export function MC_GetProduceList ( base ) ; begin
44647: LD_INT 0
44649: PPUSH
// result := mc_produce [ base ] ;
44650: LD_ADDR_VAR 0 2
44654: PUSH
44655: LD_EXP 108
44659: PUSH
44660: LD_VAR 0 1
44664: ARRAY
44665: ST_TO_ADDR
// end ;
44666: LD_VAR 0 2
44670: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
44671: LD_INT 0
44673: PPUSH
44674: PPUSH
// if not mc_bases then
44675: LD_EXP 87
44679: NOT
44680: IFFALSE 44684
// exit ;
44682: GO 44749
// if mc_bases [ base ] then
44684: LD_EXP 87
44688: PUSH
44689: LD_VAR 0 1
44693: ARRAY
44694: IFFALSE 44749
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44696: LD_ADDR_VAR 0 3
44700: PUSH
44701: LD_EXP 87
44705: PUSH
44706: LD_VAR 0 1
44710: ARRAY
44711: PPUSH
44712: LD_INT 30
44714: PUSH
44715: LD_VAR 0 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PPUSH
44724: CALL_OW 72
44728: ST_TO_ADDR
// if result then
44729: LD_VAR 0 3
44733: IFFALSE 44749
// result := result [ 1 ] ;
44735: LD_ADDR_VAR 0 3
44739: PUSH
44740: LD_VAR 0 3
44744: PUSH
44745: LD_INT 1
44747: ARRAY
44748: ST_TO_ADDR
// end ; end ;
44749: LD_VAR 0 3
44753: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
44754: LD_INT 0
44756: PPUSH
44757: PPUSH
// if not mc_bases then
44758: LD_EXP 87
44762: NOT
44763: IFFALSE 44767
// exit ;
44765: GO 44812
// if mc_bases [ base ] then
44767: LD_EXP 87
44771: PUSH
44772: LD_VAR 0 1
44776: ARRAY
44777: IFFALSE 44812
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44779: LD_ADDR_VAR 0 3
44783: PUSH
44784: LD_EXP 87
44788: PUSH
44789: LD_VAR 0 1
44793: ARRAY
44794: PPUSH
44795: LD_INT 30
44797: PUSH
44798: LD_VAR 0 2
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PPUSH
44807: CALL_OW 72
44811: ST_TO_ADDR
// end ;
44812: LD_VAR 0 3
44816: RET
// export function MC_SetTame ( base , area ) ; begin
44817: LD_INT 0
44819: PPUSH
// if not mc_bases or not base then
44820: LD_EXP 87
44824: NOT
44825: PUSH
44826: LD_VAR 0 1
44830: NOT
44831: OR
44832: IFFALSE 44836
// exit ;
44834: GO 44861
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
44836: LD_ADDR_EXP 115
44840: PUSH
44841: LD_EXP 115
44845: PPUSH
44846: LD_VAR 0 1
44850: PPUSH
44851: LD_VAR 0 2
44855: PPUSH
44856: CALL_OW 1
44860: ST_TO_ADDR
// end ;
44861: LD_VAR 0 3
44865: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
44866: LD_INT 0
44868: PPUSH
44869: PPUSH
// if not mc_bases or not base then
44870: LD_EXP 87
44874: NOT
44875: PUSH
44876: LD_VAR 0 1
44880: NOT
44881: OR
44882: IFFALSE 44886
// exit ;
44884: GO 44988
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44886: LD_ADDR_VAR 0 4
44890: PUSH
44891: LD_EXP 87
44895: PUSH
44896: LD_VAR 0 1
44900: ARRAY
44901: PPUSH
44902: LD_INT 30
44904: PUSH
44905: LD_VAR 0 2
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PPUSH
44914: CALL_OW 72
44918: ST_TO_ADDR
// if not tmp then
44919: LD_VAR 0 4
44923: NOT
44924: IFFALSE 44928
// exit ;
44926: GO 44988
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
44928: LD_ADDR_EXP 119
44932: PUSH
44933: LD_EXP 119
44937: PPUSH
44938: LD_VAR 0 1
44942: PPUSH
44943: LD_EXP 119
44947: PUSH
44948: LD_VAR 0 1
44952: ARRAY
44953: PPUSH
44954: LD_EXP 119
44958: PUSH
44959: LD_VAR 0 1
44963: ARRAY
44964: PUSH
44965: LD_INT 1
44967: PLUS
44968: PPUSH
44969: LD_VAR 0 4
44973: PUSH
44974: LD_INT 1
44976: ARRAY
44977: PPUSH
44978: CALL_OW 2
44982: PPUSH
44983: CALL_OW 1
44987: ST_TO_ADDR
// end ;
44988: LD_VAR 0 3
44992: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
44993: LD_INT 0
44995: PPUSH
44996: PPUSH
// if not mc_bases or not base or not kinds then
44997: LD_EXP 87
45001: NOT
45002: PUSH
45003: LD_VAR 0 1
45007: NOT
45008: OR
45009: PUSH
45010: LD_VAR 0 2
45014: NOT
45015: OR
45016: IFFALSE 45020
// exit ;
45018: GO 45081
// for i in kinds do
45020: LD_ADDR_VAR 0 4
45024: PUSH
45025: LD_VAR 0 2
45029: PUSH
45030: FOR_IN
45031: IFFALSE 45079
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
45033: LD_ADDR_EXP 121
45037: PUSH
45038: LD_EXP 121
45042: PPUSH
45043: LD_VAR 0 1
45047: PUSH
45048: LD_EXP 121
45052: PUSH
45053: LD_VAR 0 1
45057: ARRAY
45058: PUSH
45059: LD_INT 1
45061: PLUS
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PPUSH
45067: LD_VAR 0 4
45071: PPUSH
45072: CALL 55589 0 3
45076: ST_TO_ADDR
45077: GO 45030
45079: POP
45080: POP
// end ;
45081: LD_VAR 0 3
45085: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
45086: LD_INT 0
45088: PPUSH
// if not mc_bases or not base or not areas then
45089: LD_EXP 87
45093: NOT
45094: PUSH
45095: LD_VAR 0 1
45099: NOT
45100: OR
45101: PUSH
45102: LD_VAR 0 2
45106: NOT
45107: OR
45108: IFFALSE 45112
// exit ;
45110: GO 45137
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
45112: LD_ADDR_EXP 105
45116: PUSH
45117: LD_EXP 105
45121: PPUSH
45122: LD_VAR 0 1
45126: PPUSH
45127: LD_VAR 0 2
45131: PPUSH
45132: CALL_OW 1
45136: ST_TO_ADDR
// end ;
45137: LD_VAR 0 3
45141: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
45142: LD_INT 0
45144: PPUSH
// if not mc_bases or not base or not teleports_exit then
45145: LD_EXP 87
45149: NOT
45150: PUSH
45151: LD_VAR 0 1
45155: NOT
45156: OR
45157: PUSH
45158: LD_VAR 0 2
45162: NOT
45163: OR
45164: IFFALSE 45168
// exit ;
45166: GO 45193
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
45168: LD_ADDR_EXP 122
45172: PUSH
45173: LD_EXP 122
45177: PPUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: LD_VAR 0 2
45187: PPUSH
45188: CALL_OW 1
45192: ST_TO_ADDR
// end ;
45193: LD_VAR 0 3
45197: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
45198: LD_INT 0
45200: PPUSH
45201: PPUSH
45202: PPUSH
// if not mc_bases or not base or not ext_list then
45203: LD_EXP 87
45207: NOT
45208: PUSH
45209: LD_VAR 0 1
45213: NOT
45214: OR
45215: PUSH
45216: LD_VAR 0 5
45220: NOT
45221: OR
45222: IFFALSE 45226
// exit ;
45224: GO 45399
// tmp := GetFacExtXYD ( x , y , d ) ;
45226: LD_ADDR_VAR 0 8
45230: PUSH
45231: LD_VAR 0 2
45235: PPUSH
45236: LD_VAR 0 3
45240: PPUSH
45241: LD_VAR 0 4
45245: PPUSH
45246: CALL 84268 0 3
45250: ST_TO_ADDR
// if not tmp then
45251: LD_VAR 0 8
45255: NOT
45256: IFFALSE 45260
// exit ;
45258: GO 45399
// for i in tmp do
45260: LD_ADDR_VAR 0 7
45264: PUSH
45265: LD_VAR 0 8
45269: PUSH
45270: FOR_IN
45271: IFFALSE 45397
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
45273: LD_ADDR_EXP 92
45277: PUSH
45278: LD_EXP 92
45282: PPUSH
45283: LD_VAR 0 1
45287: PPUSH
45288: LD_EXP 92
45292: PUSH
45293: LD_VAR 0 1
45297: ARRAY
45298: PPUSH
45299: LD_EXP 92
45303: PUSH
45304: LD_VAR 0 1
45308: ARRAY
45309: PUSH
45310: LD_INT 1
45312: PLUS
45313: PPUSH
45314: LD_VAR 0 5
45318: PUSH
45319: LD_INT 1
45321: ARRAY
45322: PUSH
45323: LD_VAR 0 7
45327: PUSH
45328: LD_INT 1
45330: ARRAY
45331: PUSH
45332: LD_VAR 0 7
45336: PUSH
45337: LD_INT 2
45339: ARRAY
45340: PUSH
45341: LD_VAR 0 7
45345: PUSH
45346: LD_INT 3
45348: ARRAY
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: PPUSH
45356: CALL_OW 2
45360: PPUSH
45361: CALL_OW 1
45365: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
45366: LD_ADDR_VAR 0 5
45370: PUSH
45371: LD_VAR 0 5
45375: PPUSH
45376: LD_INT 1
45378: PPUSH
45379: CALL_OW 3
45383: ST_TO_ADDR
// if not ext_list then
45384: LD_VAR 0 5
45388: NOT
45389: IFFALSE 45395
// exit ;
45391: POP
45392: POP
45393: GO 45399
// end ;
45395: GO 45270
45397: POP
45398: POP
// end ;
45399: LD_VAR 0 6
45403: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
45404: LD_INT 0
45406: PPUSH
// if not mc_bases or not base or not weapon_list then
45407: LD_EXP 87
45411: NOT
45412: PUSH
45413: LD_VAR 0 1
45417: NOT
45418: OR
45419: PUSH
45420: LD_VAR 0 2
45424: NOT
45425: OR
45426: IFFALSE 45430
// exit ;
45428: GO 45455
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
45430: LD_ADDR_EXP 126
45434: PUSH
45435: LD_EXP 126
45439: PPUSH
45440: LD_VAR 0 1
45444: PPUSH
45445: LD_VAR 0 2
45449: PPUSH
45450: CALL_OW 1
45454: ST_TO_ADDR
// end ;
45455: LD_VAR 0 3
45459: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
45460: LD_INT 0
45462: PPUSH
// if not mc_bases or not base or not tech_list then
45463: LD_EXP 87
45467: NOT
45468: PUSH
45469: LD_VAR 0 1
45473: NOT
45474: OR
45475: PUSH
45476: LD_VAR 0 2
45480: NOT
45481: OR
45482: IFFALSE 45486
// exit ;
45484: GO 45511
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
45486: LD_ADDR_EXP 114
45490: PUSH
45491: LD_EXP 114
45495: PPUSH
45496: LD_VAR 0 1
45500: PPUSH
45501: LD_VAR 0 2
45505: PPUSH
45506: CALL_OW 1
45510: ST_TO_ADDR
// end ;
45511: LD_VAR 0 3
45515: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
45516: LD_INT 0
45518: PPUSH
// if not mc_bases or not parking_area or not base then
45519: LD_EXP 87
45523: NOT
45524: PUSH
45525: LD_VAR 0 2
45529: NOT
45530: OR
45531: PUSH
45532: LD_VAR 0 1
45536: NOT
45537: OR
45538: IFFALSE 45542
// exit ;
45540: GO 45567
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
45542: LD_ADDR_EXP 111
45546: PUSH
45547: LD_EXP 111
45551: PPUSH
45552: LD_VAR 0 1
45556: PPUSH
45557: LD_VAR 0 2
45561: PPUSH
45562: CALL_OW 1
45566: ST_TO_ADDR
// end ;
45567: LD_VAR 0 3
45571: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
45572: LD_INT 0
45574: PPUSH
// if not mc_bases or not base or not scan_area then
45575: LD_EXP 87
45579: NOT
45580: PUSH
45581: LD_VAR 0 1
45585: NOT
45586: OR
45587: PUSH
45588: LD_VAR 0 2
45592: NOT
45593: OR
45594: IFFALSE 45598
// exit ;
45596: GO 45623
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
45598: LD_ADDR_EXP 112
45602: PUSH
45603: LD_EXP 112
45607: PPUSH
45608: LD_VAR 0 1
45612: PPUSH
45613: LD_VAR 0 2
45617: PPUSH
45618: CALL_OW 1
45622: ST_TO_ADDR
// end ;
45623: LD_VAR 0 3
45627: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
45628: LD_INT 0
45630: PPUSH
45631: PPUSH
// if not mc_bases or not base then
45632: LD_EXP 87
45636: NOT
45637: PUSH
45638: LD_VAR 0 1
45642: NOT
45643: OR
45644: IFFALSE 45648
// exit ;
45646: GO 45712
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
45648: LD_ADDR_VAR 0 3
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: LD_INT 4
45664: PUSH
45665: LD_INT 11
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
45675: LD_ADDR_EXP 114
45679: PUSH
45680: LD_EXP 114
45684: PPUSH
45685: LD_VAR 0 1
45689: PPUSH
45690: LD_EXP 114
45694: PUSH
45695: LD_VAR 0 1
45699: ARRAY
45700: PUSH
45701: LD_VAR 0 3
45705: DIFF
45706: PPUSH
45707: CALL_OW 1
45711: ST_TO_ADDR
// end ;
45712: LD_VAR 0 2
45716: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
45717: LD_INT 0
45719: PPUSH
// result := mc_vehicles [ base ] ;
45720: LD_ADDR_VAR 0 3
45724: PUSH
45725: LD_EXP 106
45729: PUSH
45730: LD_VAR 0 1
45734: ARRAY
45735: ST_TO_ADDR
// if onlyCombat then
45736: LD_VAR 0 2
45740: IFFALSE 45905
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
45742: LD_ADDR_VAR 0 3
45746: PUSH
45747: LD_VAR 0 3
45751: PUSH
45752: LD_VAR 0 3
45756: PPUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 34
45762: PUSH
45763: LD_INT 12
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 34
45772: PUSH
45773: LD_INT 51
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 34
45782: PUSH
45783: LD_EXP 73
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 34
45794: PUSH
45795: LD_INT 32
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 34
45804: PUSH
45805: LD_INT 13
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 34
45814: PUSH
45815: LD_INT 52
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 34
45824: PUSH
45825: LD_INT 14
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 34
45834: PUSH
45835: LD_INT 53
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 34
45844: PUSH
45845: LD_EXP 72
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 34
45856: PUSH
45857: LD_INT 31
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 34
45866: PUSH
45867: LD_INT 48
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 34
45876: PUSH
45877: LD_INT 8
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: PPUSH
45899: CALL_OW 72
45903: DIFF
45904: ST_TO_ADDR
// end ; end_of_file
45905: LD_VAR 0 3
45909: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
45910: LD_INT 0
45912: PPUSH
45913: PPUSH
45914: PPUSH
// if not mc_bases or not skirmish then
45915: LD_EXP 87
45919: NOT
45920: PUSH
45921: LD_EXP 85
45925: NOT
45926: OR
45927: IFFALSE 45931
// exit ;
45929: GO 46096
// for i = 1 to mc_bases do
45931: LD_ADDR_VAR 0 4
45935: PUSH
45936: DOUBLE
45937: LD_INT 1
45939: DEC
45940: ST_TO_ADDR
45941: LD_EXP 87
45945: PUSH
45946: FOR_TO
45947: IFFALSE 46094
// begin if sci in mc_bases [ i ] then
45949: LD_VAR 0 2
45953: PUSH
45954: LD_EXP 87
45958: PUSH
45959: LD_VAR 0 4
45963: ARRAY
45964: IN
45965: IFFALSE 46092
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
45967: LD_ADDR_EXP 116
45971: PUSH
45972: LD_EXP 116
45976: PPUSH
45977: LD_VAR 0 4
45981: PUSH
45982: LD_EXP 116
45986: PUSH
45987: LD_VAR 0 4
45991: ARRAY
45992: PUSH
45993: LD_INT 1
45995: PLUS
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PPUSH
46001: LD_VAR 0 1
46005: PPUSH
46006: CALL 55589 0 3
46010: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
46011: LD_ADDR_VAR 0 5
46015: PUSH
46016: LD_EXP 87
46020: PUSH
46021: LD_VAR 0 4
46025: ARRAY
46026: PPUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 30
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 30
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: PPUSH
46055: CALL_OW 72
46059: PPUSH
46060: LD_VAR 0 1
46064: PPUSH
46065: CALL_OW 74
46069: ST_TO_ADDR
// if tmp then
46070: LD_VAR 0 5
46074: IFFALSE 46090
// ComStandNearbyBuilding ( ape , tmp ) ;
46076: LD_VAR 0 1
46080: PPUSH
46081: LD_VAR 0 5
46085: PPUSH
46086: CALL 52203 0 2
// break ;
46090: GO 46094
// end ; end ;
46092: GO 45946
46094: POP
46095: POP
// end ;
46096: LD_VAR 0 3
46100: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
46101: LD_INT 0
46103: PPUSH
46104: PPUSH
46105: PPUSH
// if not mc_bases or not skirmish then
46106: LD_EXP 87
46110: NOT
46111: PUSH
46112: LD_EXP 85
46116: NOT
46117: OR
46118: IFFALSE 46122
// exit ;
46120: GO 46211
// for i = 1 to mc_bases do
46122: LD_ADDR_VAR 0 4
46126: PUSH
46127: DOUBLE
46128: LD_INT 1
46130: DEC
46131: ST_TO_ADDR
46132: LD_EXP 87
46136: PUSH
46137: FOR_TO
46138: IFFALSE 46209
// begin if building in mc_busy_turret_list [ i ] then
46140: LD_VAR 0 1
46144: PUSH
46145: LD_EXP 97
46149: PUSH
46150: LD_VAR 0 4
46154: ARRAY
46155: IN
46156: IFFALSE 46207
// begin tmp := mc_busy_turret_list [ i ] diff building ;
46158: LD_ADDR_VAR 0 5
46162: PUSH
46163: LD_EXP 97
46167: PUSH
46168: LD_VAR 0 4
46172: ARRAY
46173: PUSH
46174: LD_VAR 0 1
46178: DIFF
46179: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
46180: LD_ADDR_EXP 97
46184: PUSH
46185: LD_EXP 97
46189: PPUSH
46190: LD_VAR 0 4
46194: PPUSH
46195: LD_VAR 0 5
46199: PPUSH
46200: CALL_OW 1
46204: ST_TO_ADDR
// break ;
46205: GO 46209
// end ; end ;
46207: GO 46137
46209: POP
46210: POP
// end ;
46211: LD_VAR 0 3
46215: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
46216: LD_INT 0
46218: PPUSH
46219: PPUSH
46220: PPUSH
// if not mc_bases or not skirmish then
46221: LD_EXP 87
46225: NOT
46226: PUSH
46227: LD_EXP 85
46231: NOT
46232: OR
46233: IFFALSE 46237
// exit ;
46235: GO 46436
// for i = 1 to mc_bases do
46237: LD_ADDR_VAR 0 5
46241: PUSH
46242: DOUBLE
46243: LD_INT 1
46245: DEC
46246: ST_TO_ADDR
46247: LD_EXP 87
46251: PUSH
46252: FOR_TO
46253: IFFALSE 46434
// if building in mc_bases [ i ] then
46255: LD_VAR 0 1
46259: PUSH
46260: LD_EXP 87
46264: PUSH
46265: LD_VAR 0 5
46269: ARRAY
46270: IN
46271: IFFALSE 46432
// begin tmp := mc_bases [ i ] diff building ;
46273: LD_ADDR_VAR 0 6
46277: PUSH
46278: LD_EXP 87
46282: PUSH
46283: LD_VAR 0 5
46287: ARRAY
46288: PUSH
46289: LD_VAR 0 1
46293: DIFF
46294: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
46295: LD_ADDR_EXP 87
46299: PUSH
46300: LD_EXP 87
46304: PPUSH
46305: LD_VAR 0 5
46309: PPUSH
46310: LD_VAR 0 6
46314: PPUSH
46315: CALL_OW 1
46319: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
46320: LD_VAR 0 1
46324: PUSH
46325: LD_EXP 95
46329: PUSH
46330: LD_VAR 0 5
46334: ARRAY
46335: IN
46336: IFFALSE 46375
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
46338: LD_ADDR_EXP 95
46342: PUSH
46343: LD_EXP 95
46347: PPUSH
46348: LD_VAR 0 5
46352: PPUSH
46353: LD_EXP 95
46357: PUSH
46358: LD_VAR 0 5
46362: ARRAY
46363: PUSH
46364: LD_VAR 0 1
46368: DIFF
46369: PPUSH
46370: CALL_OW 1
46374: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
46375: LD_VAR 0 1
46379: PUSH
46380: LD_EXP 96
46384: PUSH
46385: LD_VAR 0 5
46389: ARRAY
46390: IN
46391: IFFALSE 46430
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
46393: LD_ADDR_EXP 96
46397: PUSH
46398: LD_EXP 96
46402: PPUSH
46403: LD_VAR 0 5
46407: PPUSH
46408: LD_EXP 96
46412: PUSH
46413: LD_VAR 0 5
46417: ARRAY
46418: PUSH
46419: LD_VAR 0 1
46423: DIFF
46424: PPUSH
46425: CALL_OW 1
46429: ST_TO_ADDR
// break ;
46430: GO 46434
// end ;
46432: GO 46252
46434: POP
46435: POP
// end ;
46436: LD_VAR 0 4
46440: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
46441: LD_INT 0
46443: PPUSH
46444: PPUSH
46445: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
46446: LD_EXP 87
46450: NOT
46451: PUSH
46452: LD_EXP 85
46456: NOT
46457: OR
46458: PUSH
46459: LD_VAR 0 3
46463: PUSH
46464: LD_EXP 113
46468: IN
46469: NOT
46470: OR
46471: IFFALSE 46475
// exit ;
46473: GO 46598
// for i = 1 to mc_vehicles do
46475: LD_ADDR_VAR 0 6
46479: PUSH
46480: DOUBLE
46481: LD_INT 1
46483: DEC
46484: ST_TO_ADDR
46485: LD_EXP 106
46489: PUSH
46490: FOR_TO
46491: IFFALSE 46596
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
46493: LD_VAR 0 2
46497: PUSH
46498: LD_EXP 106
46502: PUSH
46503: LD_VAR 0 6
46507: ARRAY
46508: IN
46509: PUSH
46510: LD_VAR 0 1
46514: PUSH
46515: LD_EXP 106
46519: PUSH
46520: LD_VAR 0 6
46524: ARRAY
46525: IN
46526: OR
46527: IFFALSE 46594
// begin tmp := mc_vehicles [ i ] diff old ;
46529: LD_ADDR_VAR 0 7
46533: PUSH
46534: LD_EXP 106
46538: PUSH
46539: LD_VAR 0 6
46543: ARRAY
46544: PUSH
46545: LD_VAR 0 2
46549: DIFF
46550: ST_TO_ADDR
// tmp := tmp diff new ;
46551: LD_ADDR_VAR 0 7
46555: PUSH
46556: LD_VAR 0 7
46560: PUSH
46561: LD_VAR 0 1
46565: DIFF
46566: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
46567: LD_ADDR_EXP 106
46571: PUSH
46572: LD_EXP 106
46576: PPUSH
46577: LD_VAR 0 6
46581: PPUSH
46582: LD_VAR 0 7
46586: PPUSH
46587: CALL_OW 1
46591: ST_TO_ADDR
// break ;
46592: GO 46596
// end ;
46594: GO 46490
46596: POP
46597: POP
// end ;
46598: LD_VAR 0 5
46602: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
46603: LD_INT 0
46605: PPUSH
46606: PPUSH
46607: PPUSH
46608: PPUSH
// if not mc_bases or not skirmish then
46609: LD_EXP 87
46613: NOT
46614: PUSH
46615: LD_EXP 85
46619: NOT
46620: OR
46621: IFFALSE 46625
// exit ;
46623: GO 47002
// side := GetSide ( vehicle ) ;
46625: LD_ADDR_VAR 0 5
46629: PUSH
46630: LD_VAR 0 1
46634: PPUSH
46635: CALL_OW 255
46639: ST_TO_ADDR
// for i = 1 to mc_bases do
46640: LD_ADDR_VAR 0 4
46644: PUSH
46645: DOUBLE
46646: LD_INT 1
46648: DEC
46649: ST_TO_ADDR
46650: LD_EXP 87
46654: PUSH
46655: FOR_TO
46656: IFFALSE 47000
// begin if factory in mc_bases [ i ] then
46658: LD_VAR 0 2
46662: PUSH
46663: LD_EXP 87
46667: PUSH
46668: LD_VAR 0 4
46672: ARRAY
46673: IN
46674: IFFALSE 46998
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
46676: LD_EXP 109
46680: PUSH
46681: LD_VAR 0 4
46685: ARRAY
46686: PUSH
46687: LD_EXP 98
46691: PUSH
46692: LD_VAR 0 4
46696: ARRAY
46697: LESS
46698: PUSH
46699: LD_VAR 0 1
46703: PPUSH
46704: CALL_OW 264
46708: PUSH
46709: LD_INT 31
46711: PUSH
46712: LD_INT 32
46714: PUSH
46715: LD_INT 51
46717: PUSH
46718: LD_EXP 73
46722: PUSH
46723: LD_INT 12
46725: PUSH
46726: LD_INT 30
46728: PUSH
46729: LD_EXP 72
46733: PUSH
46734: LD_INT 11
46736: PUSH
46737: LD_INT 53
46739: PUSH
46740: LD_INT 14
46742: PUSH
46743: LD_EXP 76
46747: PUSH
46748: LD_INT 29
46750: PUSH
46751: LD_EXP 74
46755: PUSH
46756: LD_INT 13
46758: PUSH
46759: LD_INT 52
46761: PUSH
46762: LD_INT 48
46764: PUSH
46765: LD_INT 8
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: IN
46787: NOT
46788: AND
46789: IFFALSE 46837
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
46791: LD_ADDR_EXP 109
46795: PUSH
46796: LD_EXP 109
46800: PPUSH
46801: LD_VAR 0 4
46805: PUSH
46806: LD_EXP 109
46810: PUSH
46811: LD_VAR 0 4
46815: ARRAY
46816: PUSH
46817: LD_INT 1
46819: PLUS
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PPUSH
46825: LD_VAR 0 1
46829: PPUSH
46830: CALL 55589 0 3
46834: ST_TO_ADDR
46835: GO 46881
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
46837: LD_ADDR_EXP 106
46841: PUSH
46842: LD_EXP 106
46846: PPUSH
46847: LD_VAR 0 4
46851: PUSH
46852: LD_EXP 106
46856: PUSH
46857: LD_VAR 0 4
46861: ARRAY
46862: PUSH
46863: LD_INT 1
46865: PLUS
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PPUSH
46871: LD_VAR 0 1
46875: PPUSH
46876: CALL 55589 0 3
46880: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
46881: LD_VAR 0 1
46885: PPUSH
46886: CALL_OW 263
46890: PUSH
46891: LD_INT 2
46893: EQUAL
46894: IFFALSE 46914
// begin repeat wait ( 0 0$1 ) ;
46896: LD_INT 35
46898: PPUSH
46899: CALL_OW 67
// until IsControledBy ( vehicle ) ;
46903: LD_VAR 0 1
46907: PPUSH
46908: CALL_OW 312
46912: IFFALSE 46896
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
46914: LD_VAR 0 1
46918: PPUSH
46919: LD_EXP 111
46923: PUSH
46924: LD_VAR 0 4
46928: ARRAY
46929: PPUSH
46930: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
46934: LD_VAR 0 1
46938: PPUSH
46939: CALL_OW 263
46943: PUSH
46944: LD_INT 1
46946: NONEQUAL
46947: IFFALSE 46951
// break ;
46949: GO 47000
// repeat wait ( 0 0$1 ) ;
46951: LD_INT 35
46953: PPUSH
46954: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
46958: LD_VAR 0 1
46962: PPUSH
46963: LD_EXP 111
46967: PUSH
46968: LD_VAR 0 4
46972: ARRAY
46973: PPUSH
46974: CALL_OW 308
46978: IFFALSE 46951
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
46980: LD_VAR 0 1
46984: PPUSH
46985: CALL_OW 311
46989: PPUSH
46990: CALL_OW 121
// exit ;
46994: POP
46995: POP
46996: GO 47002
// end ; end ;
46998: GO 46655
47000: POP
47001: POP
// end ;
47002: LD_VAR 0 3
47006: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
47007: LD_INT 0
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
// if not mc_bases or not skirmish then
47013: LD_EXP 87
47017: NOT
47018: PUSH
47019: LD_EXP 85
47023: NOT
47024: OR
47025: IFFALSE 47029
// exit ;
47027: GO 47382
// repeat wait ( 0 0$1 ) ;
47029: LD_INT 35
47031: PPUSH
47032: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
47036: LD_VAR 0 2
47040: PPUSH
47041: LD_VAR 0 3
47045: PPUSH
47046: CALL_OW 284
47050: IFFALSE 47029
// if GetResourceTypeXY ( x , y ) = mat_artefact then
47052: LD_VAR 0 2
47056: PPUSH
47057: LD_VAR 0 3
47061: PPUSH
47062: CALL_OW 283
47066: PUSH
47067: LD_INT 4
47069: EQUAL
47070: IFFALSE 47074
// exit ;
47072: GO 47382
// for i = 1 to mc_bases do
47074: LD_ADDR_VAR 0 7
47078: PUSH
47079: DOUBLE
47080: LD_INT 1
47082: DEC
47083: ST_TO_ADDR
47084: LD_EXP 87
47088: PUSH
47089: FOR_TO
47090: IFFALSE 47380
// begin if mc_crates_area [ i ] then
47092: LD_EXP 105
47096: PUSH
47097: LD_VAR 0 7
47101: ARRAY
47102: IFFALSE 47213
// for j in mc_crates_area [ i ] do
47104: LD_ADDR_VAR 0 8
47108: PUSH
47109: LD_EXP 105
47113: PUSH
47114: LD_VAR 0 7
47118: ARRAY
47119: PUSH
47120: FOR_IN
47121: IFFALSE 47211
// if InArea ( x , y , j ) then
47123: LD_VAR 0 2
47127: PPUSH
47128: LD_VAR 0 3
47132: PPUSH
47133: LD_VAR 0 8
47137: PPUSH
47138: CALL_OW 309
47142: IFFALSE 47209
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
47144: LD_ADDR_EXP 103
47148: PUSH
47149: LD_EXP 103
47153: PPUSH
47154: LD_VAR 0 7
47158: PUSH
47159: LD_EXP 103
47163: PUSH
47164: LD_VAR 0 7
47168: ARRAY
47169: PUSH
47170: LD_INT 1
47172: PLUS
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PPUSH
47178: LD_VAR 0 4
47182: PUSH
47183: LD_VAR 0 2
47187: PUSH
47188: LD_VAR 0 3
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: PPUSH
47198: CALL 55589 0 3
47202: ST_TO_ADDR
// exit ;
47203: POP
47204: POP
47205: POP
47206: POP
47207: GO 47382
// end ;
47209: GO 47120
47211: POP
47212: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47213: LD_ADDR_VAR 0 9
47217: PUSH
47218: LD_EXP 87
47222: PUSH
47223: LD_VAR 0 7
47227: ARRAY
47228: PPUSH
47229: LD_INT 2
47231: PUSH
47232: LD_INT 30
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 30
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: PPUSH
47257: CALL_OW 72
47261: ST_TO_ADDR
// if not depot then
47262: LD_VAR 0 9
47266: NOT
47267: IFFALSE 47271
// continue ;
47269: GO 47089
// for j in depot do
47271: LD_ADDR_VAR 0 8
47275: PUSH
47276: LD_VAR 0 9
47280: PUSH
47281: FOR_IN
47282: IFFALSE 47376
// if GetDistUnitXY ( j , x , y ) < 30 then
47284: LD_VAR 0 8
47288: PPUSH
47289: LD_VAR 0 2
47293: PPUSH
47294: LD_VAR 0 3
47298: PPUSH
47299: CALL_OW 297
47303: PUSH
47304: LD_INT 30
47306: LESS
47307: IFFALSE 47374
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
47309: LD_ADDR_EXP 103
47313: PUSH
47314: LD_EXP 103
47318: PPUSH
47319: LD_VAR 0 7
47323: PUSH
47324: LD_EXP 103
47328: PUSH
47329: LD_VAR 0 7
47333: ARRAY
47334: PUSH
47335: LD_INT 1
47337: PLUS
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PPUSH
47343: LD_VAR 0 4
47347: PUSH
47348: LD_VAR 0 2
47352: PUSH
47353: LD_VAR 0 3
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: PPUSH
47363: CALL 55589 0 3
47367: ST_TO_ADDR
// exit ;
47368: POP
47369: POP
47370: POP
47371: POP
47372: GO 47382
// end ;
47374: GO 47281
47376: POP
47377: POP
// end ;
47378: GO 47089
47380: POP
47381: POP
// end ;
47382: LD_VAR 0 6
47386: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
47387: LD_INT 0
47389: PPUSH
47390: PPUSH
47391: PPUSH
47392: PPUSH
// if not mc_bases or not skirmish then
47393: LD_EXP 87
47397: NOT
47398: PUSH
47399: LD_EXP 85
47403: NOT
47404: OR
47405: IFFALSE 47409
// exit ;
47407: GO 47686
// side := GetSide ( lab ) ;
47409: LD_ADDR_VAR 0 4
47413: PUSH
47414: LD_VAR 0 2
47418: PPUSH
47419: CALL_OW 255
47423: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
47424: LD_VAR 0 4
47428: PUSH
47429: LD_EXP 113
47433: IN
47434: NOT
47435: PUSH
47436: LD_EXP 114
47440: NOT
47441: OR
47442: PUSH
47443: LD_EXP 87
47447: NOT
47448: OR
47449: IFFALSE 47453
// exit ;
47451: GO 47686
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
47453: LD_ADDR_EXP 114
47457: PUSH
47458: LD_EXP 114
47462: PPUSH
47463: LD_VAR 0 4
47467: PPUSH
47468: LD_EXP 114
47472: PUSH
47473: LD_VAR 0 4
47477: ARRAY
47478: PUSH
47479: LD_VAR 0 1
47483: DIFF
47484: PPUSH
47485: CALL_OW 1
47489: ST_TO_ADDR
// for i = 1 to mc_bases do
47490: LD_ADDR_VAR 0 5
47494: PUSH
47495: DOUBLE
47496: LD_INT 1
47498: DEC
47499: ST_TO_ADDR
47500: LD_EXP 87
47504: PUSH
47505: FOR_TO
47506: IFFALSE 47684
// begin if lab in mc_bases [ i ] then
47508: LD_VAR 0 2
47512: PUSH
47513: LD_EXP 87
47517: PUSH
47518: LD_VAR 0 5
47522: ARRAY
47523: IN
47524: IFFALSE 47682
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
47526: LD_VAR 0 1
47530: PUSH
47531: LD_INT 11
47533: PUSH
47534: LD_INT 4
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: IN
47549: PUSH
47550: LD_EXP 117
47554: PUSH
47555: LD_VAR 0 5
47559: ARRAY
47560: AND
47561: IFFALSE 47682
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
47563: LD_ADDR_VAR 0 6
47567: PUSH
47568: LD_EXP 117
47572: PUSH
47573: LD_VAR 0 5
47577: ARRAY
47578: PUSH
47579: LD_INT 1
47581: ARRAY
47582: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
47583: LD_ADDR_EXP 117
47587: PUSH
47588: LD_EXP 117
47592: PPUSH
47593: LD_VAR 0 5
47597: PPUSH
47598: EMPTY
47599: PPUSH
47600: CALL_OW 1
47604: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
47605: LD_VAR 0 6
47609: PPUSH
47610: LD_INT 0
47612: PPUSH
47613: CALL_OW 109
// ComExitBuilding ( tmp ) ;
47617: LD_VAR 0 6
47621: PPUSH
47622: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
47626: LD_ADDR_EXP 116
47630: PUSH
47631: LD_EXP 116
47635: PPUSH
47636: LD_VAR 0 5
47640: PPUSH
47641: LD_EXP 116
47645: PUSH
47646: LD_VAR 0 5
47650: ARRAY
47651: PPUSH
47652: LD_INT 1
47654: PPUSH
47655: LD_VAR 0 6
47659: PPUSH
47660: CALL_OW 2
47664: PPUSH
47665: CALL_OW 1
47669: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
47670: LD_VAR 0 5
47674: PPUSH
47675: LD_INT 112
47677: PPUSH
47678: CALL 24698 0 2
// end ; end ; end ;
47682: GO 47505
47684: POP
47685: POP
// end ;
47686: LD_VAR 0 3
47690: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
47691: LD_INT 0
47693: PPUSH
47694: PPUSH
47695: PPUSH
47696: PPUSH
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
// if not mc_bases or not skirmish then
47701: LD_EXP 87
47705: NOT
47706: PUSH
47707: LD_EXP 85
47711: NOT
47712: OR
47713: IFFALSE 47717
// exit ;
47715: GO 49088
// for i = 1 to mc_bases do
47717: LD_ADDR_VAR 0 3
47721: PUSH
47722: DOUBLE
47723: LD_INT 1
47725: DEC
47726: ST_TO_ADDR
47727: LD_EXP 87
47731: PUSH
47732: FOR_TO
47733: IFFALSE 49086
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
47735: LD_VAR 0 1
47739: PUSH
47740: LD_EXP 87
47744: PUSH
47745: LD_VAR 0 3
47749: ARRAY
47750: IN
47751: PUSH
47752: LD_VAR 0 1
47756: PUSH
47757: LD_EXP 94
47761: PUSH
47762: LD_VAR 0 3
47766: ARRAY
47767: IN
47768: OR
47769: PUSH
47770: LD_VAR 0 1
47774: PUSH
47775: LD_EXP 109
47779: PUSH
47780: LD_VAR 0 3
47784: ARRAY
47785: IN
47786: OR
47787: PUSH
47788: LD_VAR 0 1
47792: PUSH
47793: LD_EXP 106
47797: PUSH
47798: LD_VAR 0 3
47802: ARRAY
47803: IN
47804: OR
47805: PUSH
47806: LD_VAR 0 1
47810: PUSH
47811: LD_EXP 116
47815: PUSH
47816: LD_VAR 0 3
47820: ARRAY
47821: IN
47822: OR
47823: PUSH
47824: LD_VAR 0 1
47828: PUSH
47829: LD_EXP 117
47833: PUSH
47834: LD_VAR 0 3
47838: ARRAY
47839: IN
47840: OR
47841: IFFALSE 49084
// begin if un in mc_ape [ i ] then
47843: LD_VAR 0 1
47847: PUSH
47848: LD_EXP 116
47852: PUSH
47853: LD_VAR 0 3
47857: ARRAY
47858: IN
47859: IFFALSE 47898
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
47861: LD_ADDR_EXP 116
47865: PUSH
47866: LD_EXP 116
47870: PPUSH
47871: LD_VAR 0 3
47875: PPUSH
47876: LD_EXP 116
47880: PUSH
47881: LD_VAR 0 3
47885: ARRAY
47886: PUSH
47887: LD_VAR 0 1
47891: DIFF
47892: PPUSH
47893: CALL_OW 1
47897: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
47898: LD_VAR 0 1
47902: PUSH
47903: LD_EXP 117
47907: PUSH
47908: LD_VAR 0 3
47912: ARRAY
47913: IN
47914: IFFALSE 47938
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
47916: LD_ADDR_EXP 117
47920: PUSH
47921: LD_EXP 117
47925: PPUSH
47926: LD_VAR 0 3
47930: PPUSH
47931: EMPTY
47932: PPUSH
47933: CALL_OW 1
47937: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
47938: LD_VAR 0 1
47942: PPUSH
47943: CALL_OW 247
47947: PUSH
47948: LD_INT 2
47950: EQUAL
47951: PUSH
47952: LD_VAR 0 1
47956: PPUSH
47957: CALL_OW 110
47961: PUSH
47962: LD_INT 20
47964: EQUAL
47965: PUSH
47966: LD_VAR 0 1
47970: PUSH
47971: LD_EXP 109
47975: PUSH
47976: LD_VAR 0 3
47980: ARRAY
47981: IN
47982: OR
47983: PUSH
47984: LD_VAR 0 1
47988: PPUSH
47989: CALL_OW 264
47993: PUSH
47994: LD_INT 12
47996: PUSH
47997: LD_INT 51
47999: PUSH
48000: LD_EXP 73
48004: PUSH
48005: LD_INT 32
48007: PUSH
48008: LD_INT 13
48010: PUSH
48011: LD_INT 52
48013: PUSH
48014: LD_INT 31
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: IN
48026: OR
48027: AND
48028: IFFALSE 48336
// begin if un in mc_defender [ i ] then
48030: LD_VAR 0 1
48034: PUSH
48035: LD_EXP 109
48039: PUSH
48040: LD_VAR 0 3
48044: ARRAY
48045: IN
48046: IFFALSE 48085
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
48048: LD_ADDR_EXP 109
48052: PUSH
48053: LD_EXP 109
48057: PPUSH
48058: LD_VAR 0 3
48062: PPUSH
48063: LD_EXP 109
48067: PUSH
48068: LD_VAR 0 3
48072: ARRAY
48073: PUSH
48074: LD_VAR 0 1
48078: DIFF
48079: PPUSH
48080: CALL_OW 1
48084: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
48085: LD_ADDR_VAR 0 8
48089: PUSH
48090: LD_VAR 0 3
48094: PPUSH
48095: LD_INT 3
48097: PPUSH
48098: CALL 44754 0 2
48102: ST_TO_ADDR
// if fac then
48103: LD_VAR 0 8
48107: IFFALSE 48336
// begin for j in fac do
48109: LD_ADDR_VAR 0 4
48113: PUSH
48114: LD_VAR 0 8
48118: PUSH
48119: FOR_IN
48120: IFFALSE 48334
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
48122: LD_ADDR_VAR 0 9
48126: PUSH
48127: LD_VAR 0 8
48131: PPUSH
48132: LD_VAR 0 1
48136: PPUSH
48137: CALL_OW 265
48141: PPUSH
48142: LD_VAR 0 1
48146: PPUSH
48147: CALL_OW 262
48151: PPUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 263
48161: PPUSH
48162: LD_VAR 0 1
48166: PPUSH
48167: CALL_OW 264
48171: PPUSH
48172: CALL 53121 0 5
48176: ST_TO_ADDR
// if components then
48177: LD_VAR 0 9
48181: IFFALSE 48332
// begin if GetWeapon ( un ) = ar_control_tower then
48183: LD_VAR 0 1
48187: PPUSH
48188: CALL_OW 264
48192: PUSH
48193: LD_INT 31
48195: EQUAL
48196: IFFALSE 48313
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
48198: LD_VAR 0 1
48202: PPUSH
48203: CALL_OW 311
48207: PPUSH
48208: LD_INT 0
48210: PPUSH
48211: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
48215: LD_ADDR_EXP 127
48219: PUSH
48220: LD_EXP 127
48224: PPUSH
48225: LD_VAR 0 3
48229: PPUSH
48230: LD_EXP 127
48234: PUSH
48235: LD_VAR 0 3
48239: ARRAY
48240: PUSH
48241: LD_VAR 0 1
48245: PPUSH
48246: CALL_OW 311
48250: DIFF
48251: PPUSH
48252: CALL_OW 1
48256: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
48257: LD_ADDR_VAR 0 7
48261: PUSH
48262: LD_EXP 108
48266: PUSH
48267: LD_VAR 0 3
48271: ARRAY
48272: PPUSH
48273: LD_INT 1
48275: PPUSH
48276: LD_VAR 0 9
48280: PPUSH
48281: CALL_OW 2
48285: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
48286: LD_ADDR_EXP 108
48290: PUSH
48291: LD_EXP 108
48295: PPUSH
48296: LD_VAR 0 3
48300: PPUSH
48301: LD_VAR 0 7
48305: PPUSH
48306: CALL_OW 1
48310: ST_TO_ADDR
// end else
48311: GO 48330
// MC_InsertProduceList ( i , [ components ] ) ;
48313: LD_VAR 0 3
48317: PPUSH
48318: LD_VAR 0 9
48322: PUSH
48323: EMPTY
48324: LIST
48325: PPUSH
48326: CALL 44299 0 2
// break ;
48330: GO 48334
// end ; end ;
48332: GO 48119
48334: POP
48335: POP
// end ; end ; if GetType ( un ) = unit_building then
48336: LD_VAR 0 1
48340: PPUSH
48341: CALL_OW 247
48345: PUSH
48346: LD_INT 3
48348: EQUAL
48349: IFFALSE 48752
// begin btype := GetBType ( un ) ;
48351: LD_ADDR_VAR 0 5
48355: PUSH
48356: LD_VAR 0 1
48360: PPUSH
48361: CALL_OW 266
48365: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
48366: LD_VAR 0 5
48370: PUSH
48371: LD_INT 29
48373: PUSH
48374: LD_INT 30
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: IN
48381: IFFALSE 48454
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
48383: LD_VAR 0 1
48387: PPUSH
48388: CALL_OW 250
48392: PPUSH
48393: LD_VAR 0 1
48397: PPUSH
48398: CALL_OW 251
48402: PPUSH
48403: LD_VAR 0 1
48407: PPUSH
48408: CALL_OW 255
48412: PPUSH
48413: CALL_OW 440
48417: NOT
48418: IFFALSE 48454
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
48420: LD_VAR 0 1
48424: PPUSH
48425: CALL_OW 250
48429: PPUSH
48430: LD_VAR 0 1
48434: PPUSH
48435: CALL_OW 251
48439: PPUSH
48440: LD_VAR 0 1
48444: PPUSH
48445: CALL_OW 255
48449: PPUSH
48450: CALL_OW 441
// end ; if btype = b_warehouse then
48454: LD_VAR 0 5
48458: PUSH
48459: LD_INT 1
48461: EQUAL
48462: IFFALSE 48480
// begin btype := b_depot ;
48464: LD_ADDR_VAR 0 5
48468: PUSH
48469: LD_INT 0
48471: ST_TO_ADDR
// pos := 1 ;
48472: LD_ADDR_VAR 0 6
48476: PUSH
48477: LD_INT 1
48479: ST_TO_ADDR
// end ; if btype = b_factory then
48480: LD_VAR 0 5
48484: PUSH
48485: LD_INT 3
48487: EQUAL
48488: IFFALSE 48506
// begin btype := b_workshop ;
48490: LD_ADDR_VAR 0 5
48494: PUSH
48495: LD_INT 2
48497: ST_TO_ADDR
// pos := 1 ;
48498: LD_ADDR_VAR 0 6
48502: PUSH
48503: LD_INT 1
48505: ST_TO_ADDR
// end ; if btype = b_barracks then
48506: LD_VAR 0 5
48510: PUSH
48511: LD_INT 5
48513: EQUAL
48514: IFFALSE 48524
// btype := b_armoury ;
48516: LD_ADDR_VAR 0 5
48520: PUSH
48521: LD_INT 4
48523: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
48524: LD_VAR 0 5
48528: PUSH
48529: LD_INT 7
48531: PUSH
48532: LD_INT 8
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: IN
48539: IFFALSE 48549
// btype := b_lab ;
48541: LD_ADDR_VAR 0 5
48545: PUSH
48546: LD_INT 6
48548: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
48549: LD_ADDR_EXP 92
48553: PUSH
48554: LD_EXP 92
48558: PPUSH
48559: LD_VAR 0 3
48563: PUSH
48564: LD_EXP 92
48568: PUSH
48569: LD_VAR 0 3
48573: ARRAY
48574: PUSH
48575: LD_INT 1
48577: PLUS
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PPUSH
48583: LD_VAR 0 5
48587: PUSH
48588: LD_VAR 0 1
48592: PPUSH
48593: CALL_OW 250
48597: PUSH
48598: LD_VAR 0 1
48602: PPUSH
48603: CALL_OW 251
48607: PUSH
48608: LD_VAR 0 1
48612: PPUSH
48613: CALL_OW 254
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: PPUSH
48624: CALL 55589 0 3
48628: ST_TO_ADDR
// if pos = 1 then
48629: LD_VAR 0 6
48633: PUSH
48634: LD_INT 1
48636: EQUAL
48637: IFFALSE 48752
// begin tmp := mc_build_list [ i ] ;
48639: LD_ADDR_VAR 0 7
48643: PUSH
48644: LD_EXP 92
48648: PUSH
48649: LD_VAR 0 3
48653: ARRAY
48654: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
48655: LD_VAR 0 7
48659: PPUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 30
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 30
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: PPUSH
48688: CALL_OW 72
48692: IFFALSE 48702
// pos := 2 ;
48694: LD_ADDR_VAR 0 6
48698: PUSH
48699: LD_INT 2
48701: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
48702: LD_ADDR_VAR 0 7
48706: PUSH
48707: LD_VAR 0 7
48711: PPUSH
48712: LD_VAR 0 6
48716: PPUSH
48717: LD_VAR 0 7
48721: PPUSH
48722: CALL 55915 0 3
48726: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
48727: LD_ADDR_EXP 92
48731: PUSH
48732: LD_EXP 92
48736: PPUSH
48737: LD_VAR 0 3
48741: PPUSH
48742: LD_VAR 0 7
48746: PPUSH
48747: CALL_OW 1
48751: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
48752: LD_VAR 0 1
48756: PUSH
48757: LD_EXP 87
48761: PUSH
48762: LD_VAR 0 3
48766: ARRAY
48767: IN
48768: IFFALSE 48807
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
48770: LD_ADDR_EXP 87
48774: PUSH
48775: LD_EXP 87
48779: PPUSH
48780: LD_VAR 0 3
48784: PPUSH
48785: LD_EXP 87
48789: PUSH
48790: LD_VAR 0 3
48794: ARRAY
48795: PUSH
48796: LD_VAR 0 1
48800: DIFF
48801: PPUSH
48802: CALL_OW 1
48806: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
48807: LD_VAR 0 1
48811: PUSH
48812: LD_EXP 94
48816: PUSH
48817: LD_VAR 0 3
48821: ARRAY
48822: IN
48823: IFFALSE 48862
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
48825: LD_ADDR_EXP 94
48829: PUSH
48830: LD_EXP 94
48834: PPUSH
48835: LD_VAR 0 3
48839: PPUSH
48840: LD_EXP 94
48844: PUSH
48845: LD_VAR 0 3
48849: ARRAY
48850: PUSH
48851: LD_VAR 0 1
48855: DIFF
48856: PPUSH
48857: CALL_OW 1
48861: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
48862: LD_VAR 0 1
48866: PUSH
48867: LD_EXP 106
48871: PUSH
48872: LD_VAR 0 3
48876: ARRAY
48877: IN
48878: IFFALSE 48917
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
48880: LD_ADDR_EXP 106
48884: PUSH
48885: LD_EXP 106
48889: PPUSH
48890: LD_VAR 0 3
48894: PPUSH
48895: LD_EXP 106
48899: PUSH
48900: LD_VAR 0 3
48904: ARRAY
48905: PUSH
48906: LD_VAR 0 1
48910: DIFF
48911: PPUSH
48912: CALL_OW 1
48916: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
48917: LD_VAR 0 1
48921: PUSH
48922: LD_EXP 109
48926: PUSH
48927: LD_VAR 0 3
48931: ARRAY
48932: IN
48933: IFFALSE 48972
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
48935: LD_ADDR_EXP 109
48939: PUSH
48940: LD_EXP 109
48944: PPUSH
48945: LD_VAR 0 3
48949: PPUSH
48950: LD_EXP 109
48954: PUSH
48955: LD_VAR 0 3
48959: ARRAY
48960: PUSH
48961: LD_VAR 0 1
48965: DIFF
48966: PPUSH
48967: CALL_OW 1
48971: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
48972: LD_VAR 0 1
48976: PUSH
48977: LD_EXP 96
48981: PUSH
48982: LD_VAR 0 3
48986: ARRAY
48987: IN
48988: IFFALSE 49027
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
48990: LD_ADDR_EXP 96
48994: PUSH
48995: LD_EXP 96
48999: PPUSH
49000: LD_VAR 0 3
49004: PPUSH
49005: LD_EXP 96
49009: PUSH
49010: LD_VAR 0 3
49014: ARRAY
49015: PUSH
49016: LD_VAR 0 1
49020: DIFF
49021: PPUSH
49022: CALL_OW 1
49026: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
49027: LD_VAR 0 1
49031: PUSH
49032: LD_EXP 95
49036: PUSH
49037: LD_VAR 0 3
49041: ARRAY
49042: IN
49043: IFFALSE 49082
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
49045: LD_ADDR_EXP 95
49049: PUSH
49050: LD_EXP 95
49054: PPUSH
49055: LD_VAR 0 3
49059: PPUSH
49060: LD_EXP 95
49064: PUSH
49065: LD_VAR 0 3
49069: ARRAY
49070: PUSH
49071: LD_VAR 0 1
49075: DIFF
49076: PPUSH
49077: CALL_OW 1
49081: ST_TO_ADDR
// end ; break ;
49082: GO 49086
// end ;
49084: GO 47732
49086: POP
49087: POP
// end ;
49088: LD_VAR 0 2
49092: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
49093: LD_INT 0
49095: PPUSH
49096: PPUSH
49097: PPUSH
// if not mc_bases or not skirmish then
49098: LD_EXP 87
49102: NOT
49103: PUSH
49104: LD_EXP 85
49108: NOT
49109: OR
49110: IFFALSE 49114
// exit ;
49112: GO 49329
// for i = 1 to mc_bases do
49114: LD_ADDR_VAR 0 3
49118: PUSH
49119: DOUBLE
49120: LD_INT 1
49122: DEC
49123: ST_TO_ADDR
49124: LD_EXP 87
49128: PUSH
49129: FOR_TO
49130: IFFALSE 49327
// begin if building in mc_construct_list [ i ] then
49132: LD_VAR 0 1
49136: PUSH
49137: LD_EXP 94
49141: PUSH
49142: LD_VAR 0 3
49146: ARRAY
49147: IN
49148: IFFALSE 49325
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
49150: LD_ADDR_EXP 94
49154: PUSH
49155: LD_EXP 94
49159: PPUSH
49160: LD_VAR 0 3
49164: PPUSH
49165: LD_EXP 94
49169: PUSH
49170: LD_VAR 0 3
49174: ARRAY
49175: PUSH
49176: LD_VAR 0 1
49180: DIFF
49181: PPUSH
49182: CALL_OW 1
49186: ST_TO_ADDR
// if building in mc_lab [ i ] then
49187: LD_VAR 0 1
49191: PUSH
49192: LD_EXP 120
49196: PUSH
49197: LD_VAR 0 3
49201: ARRAY
49202: IN
49203: IFFALSE 49258
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
49205: LD_ADDR_EXP 121
49209: PUSH
49210: LD_EXP 121
49214: PPUSH
49215: LD_VAR 0 3
49219: PPUSH
49220: LD_EXP 121
49224: PUSH
49225: LD_VAR 0 3
49229: ARRAY
49230: PPUSH
49231: LD_INT 1
49233: PPUSH
49234: LD_EXP 121
49238: PUSH
49239: LD_VAR 0 3
49243: ARRAY
49244: PPUSH
49245: LD_INT 0
49247: PPUSH
49248: CALL 55007 0 4
49252: PPUSH
49253: CALL_OW 1
49257: ST_TO_ADDR
// if not building in mc_bases [ i ] then
49258: LD_VAR 0 1
49262: PUSH
49263: LD_EXP 87
49267: PUSH
49268: LD_VAR 0 3
49272: ARRAY
49273: IN
49274: NOT
49275: IFFALSE 49321
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
49277: LD_ADDR_EXP 87
49281: PUSH
49282: LD_EXP 87
49286: PPUSH
49287: LD_VAR 0 3
49291: PUSH
49292: LD_EXP 87
49296: PUSH
49297: LD_VAR 0 3
49301: ARRAY
49302: PUSH
49303: LD_INT 1
49305: PLUS
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PPUSH
49311: LD_VAR 0 1
49315: PPUSH
49316: CALL 55589 0 3
49320: ST_TO_ADDR
// exit ;
49321: POP
49322: POP
49323: GO 49329
// end ; end ;
49325: GO 49129
49327: POP
49328: POP
// end ;
49329: LD_VAR 0 2
49333: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
49334: LD_INT 0
49336: PPUSH
49337: PPUSH
49338: PPUSH
49339: PPUSH
49340: PPUSH
49341: PPUSH
49342: PPUSH
// if not mc_bases or not skirmish then
49343: LD_EXP 87
49347: NOT
49348: PUSH
49349: LD_EXP 85
49353: NOT
49354: OR
49355: IFFALSE 49359
// exit ;
49357: GO 50020
// for i = 1 to mc_bases do
49359: LD_ADDR_VAR 0 3
49363: PUSH
49364: DOUBLE
49365: LD_INT 1
49367: DEC
49368: ST_TO_ADDR
49369: LD_EXP 87
49373: PUSH
49374: FOR_TO
49375: IFFALSE 50018
// begin if building in mc_construct_list [ i ] then
49377: LD_VAR 0 1
49381: PUSH
49382: LD_EXP 94
49386: PUSH
49387: LD_VAR 0 3
49391: ARRAY
49392: IN
49393: IFFALSE 50016
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
49395: LD_ADDR_EXP 94
49399: PUSH
49400: LD_EXP 94
49404: PPUSH
49405: LD_VAR 0 3
49409: PPUSH
49410: LD_EXP 94
49414: PUSH
49415: LD_VAR 0 3
49419: ARRAY
49420: PUSH
49421: LD_VAR 0 1
49425: DIFF
49426: PPUSH
49427: CALL_OW 1
49431: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
49432: LD_ADDR_EXP 87
49436: PUSH
49437: LD_EXP 87
49441: PPUSH
49442: LD_VAR 0 3
49446: PUSH
49447: LD_EXP 87
49451: PUSH
49452: LD_VAR 0 3
49456: ARRAY
49457: PUSH
49458: LD_INT 1
49460: PLUS
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PPUSH
49466: LD_VAR 0 1
49470: PPUSH
49471: CALL 55589 0 3
49475: ST_TO_ADDR
// btype := GetBType ( building ) ;
49476: LD_ADDR_VAR 0 5
49480: PUSH
49481: LD_VAR 0 1
49485: PPUSH
49486: CALL_OW 266
49490: ST_TO_ADDR
// side := GetSide ( building ) ;
49491: LD_ADDR_VAR 0 8
49495: PUSH
49496: LD_VAR 0 1
49500: PPUSH
49501: CALL_OW 255
49505: ST_TO_ADDR
// if btype = b_lab then
49506: LD_VAR 0 5
49510: PUSH
49511: LD_INT 6
49513: EQUAL
49514: IFFALSE 49564
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
49516: LD_ADDR_EXP 120
49520: PUSH
49521: LD_EXP 120
49525: PPUSH
49526: LD_VAR 0 3
49530: PUSH
49531: LD_EXP 120
49535: PUSH
49536: LD_VAR 0 3
49540: ARRAY
49541: PUSH
49542: LD_INT 1
49544: PLUS
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PPUSH
49550: LD_VAR 0 1
49554: PPUSH
49555: CALL 55589 0 3
49559: ST_TO_ADDR
// exit ;
49560: POP
49561: POP
49562: GO 50020
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
49564: LD_VAR 0 5
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 4
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: IN
49583: IFFALSE 49707
// begin if btype = b_armoury then
49585: LD_VAR 0 5
49589: PUSH
49590: LD_INT 4
49592: EQUAL
49593: IFFALSE 49603
// btype := b_barracks ;
49595: LD_ADDR_VAR 0 5
49599: PUSH
49600: LD_INT 5
49602: ST_TO_ADDR
// if btype = b_depot then
49603: LD_VAR 0 5
49607: PUSH
49608: LD_INT 0
49610: EQUAL
49611: IFFALSE 49621
// btype := b_warehouse ;
49613: LD_ADDR_VAR 0 5
49617: PUSH
49618: LD_INT 1
49620: ST_TO_ADDR
// if btype = b_workshop then
49621: LD_VAR 0 5
49625: PUSH
49626: LD_INT 2
49628: EQUAL
49629: IFFALSE 49639
// btype := b_factory ;
49631: LD_ADDR_VAR 0 5
49635: PUSH
49636: LD_INT 3
49638: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
49639: LD_VAR 0 5
49643: PPUSH
49644: LD_VAR 0 8
49648: PPUSH
49649: CALL_OW 323
49653: PUSH
49654: LD_INT 1
49656: EQUAL
49657: IFFALSE 49703
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
49659: LD_ADDR_EXP 119
49663: PUSH
49664: LD_EXP 119
49668: PPUSH
49669: LD_VAR 0 3
49673: PUSH
49674: LD_EXP 119
49678: PUSH
49679: LD_VAR 0 3
49683: ARRAY
49684: PUSH
49685: LD_INT 1
49687: PLUS
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PPUSH
49693: LD_VAR 0 1
49697: PPUSH
49698: CALL 55589 0 3
49702: ST_TO_ADDR
// exit ;
49703: POP
49704: POP
49705: GO 50020
// end ; if btype in [ b_bunker , b_turret ] then
49707: LD_VAR 0 5
49711: PUSH
49712: LD_INT 32
49714: PUSH
49715: LD_INT 33
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: IN
49722: IFFALSE 50012
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
49724: LD_ADDR_EXP 95
49728: PUSH
49729: LD_EXP 95
49733: PPUSH
49734: LD_VAR 0 3
49738: PUSH
49739: LD_EXP 95
49743: PUSH
49744: LD_VAR 0 3
49748: ARRAY
49749: PUSH
49750: LD_INT 1
49752: PLUS
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PPUSH
49758: LD_VAR 0 1
49762: PPUSH
49763: CALL 55589 0 3
49767: ST_TO_ADDR
// if btype = b_bunker then
49768: LD_VAR 0 5
49772: PUSH
49773: LD_INT 32
49775: EQUAL
49776: IFFALSE 50012
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
49778: LD_ADDR_EXP 96
49782: PUSH
49783: LD_EXP 96
49787: PPUSH
49788: LD_VAR 0 3
49792: PUSH
49793: LD_EXP 96
49797: PUSH
49798: LD_VAR 0 3
49802: ARRAY
49803: PUSH
49804: LD_INT 1
49806: PLUS
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PPUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: CALL 55589 0 3
49821: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
49822: LD_ADDR_VAR 0 6
49826: PUSH
49827: LD_EXP 87
49831: PUSH
49832: LD_VAR 0 3
49836: ARRAY
49837: PPUSH
49838: LD_INT 25
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: LD_INT 54
49853: PUSH
49854: EMPTY
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PPUSH
49865: CALL_OW 72
49869: ST_TO_ADDR
// if tmp then
49870: LD_VAR 0 6
49874: IFFALSE 49880
// exit ;
49876: POP
49877: POP
49878: GO 50020
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
49880: LD_ADDR_VAR 0 6
49884: PUSH
49885: LD_EXP 87
49889: PUSH
49890: LD_VAR 0 3
49894: ARRAY
49895: PPUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 30
49901: PUSH
49902: LD_INT 4
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 30
49911: PUSH
49912: LD_INT 5
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: PPUSH
49924: CALL_OW 72
49928: ST_TO_ADDR
// if not tmp then
49929: LD_VAR 0 6
49933: NOT
49934: IFFALSE 49940
// exit ;
49936: POP
49937: POP
49938: GO 50020
// for j in tmp do
49940: LD_ADDR_VAR 0 4
49944: PUSH
49945: LD_VAR 0 6
49949: PUSH
49950: FOR_IN
49951: IFFALSE 50010
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
49953: LD_ADDR_VAR 0 7
49957: PUSH
49958: LD_VAR 0 4
49962: PPUSH
49963: CALL_OW 313
49967: PPUSH
49968: LD_INT 25
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PPUSH
49978: CALL_OW 72
49982: ST_TO_ADDR
// if units then
49983: LD_VAR 0 7
49987: IFFALSE 50008
// begin ComExitBuilding ( units [ 1 ] ) ;
49989: LD_VAR 0 7
49993: PUSH
49994: LD_INT 1
49996: ARRAY
49997: PPUSH
49998: CALL_OW 122
// exit ;
50002: POP
50003: POP
50004: POP
50005: POP
50006: GO 50020
// end ; end ;
50008: GO 49950
50010: POP
50011: POP
// end ; end ; exit ;
50012: POP
50013: POP
50014: GO 50020
// end ; end ;
50016: GO 49374
50018: POP
50019: POP
// end ;
50020: LD_VAR 0 2
50024: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
50025: LD_INT 0
50027: PPUSH
50028: PPUSH
50029: PPUSH
50030: PPUSH
50031: PPUSH
50032: PPUSH
50033: PPUSH
// if not mc_bases or not skirmish then
50034: LD_EXP 87
50038: NOT
50039: PUSH
50040: LD_EXP 85
50044: NOT
50045: OR
50046: IFFALSE 50050
// exit ;
50048: GO 50281
// btype := GetBType ( building ) ;
50050: LD_ADDR_VAR 0 6
50054: PUSH
50055: LD_VAR 0 1
50059: PPUSH
50060: CALL_OW 266
50064: ST_TO_ADDR
// x := GetX ( building ) ;
50065: LD_ADDR_VAR 0 7
50069: PUSH
50070: LD_VAR 0 1
50074: PPUSH
50075: CALL_OW 250
50079: ST_TO_ADDR
// y := GetY ( building ) ;
50080: LD_ADDR_VAR 0 8
50084: PUSH
50085: LD_VAR 0 1
50089: PPUSH
50090: CALL_OW 251
50094: ST_TO_ADDR
// d := GetDir ( building ) ;
50095: LD_ADDR_VAR 0 9
50099: PUSH
50100: LD_VAR 0 1
50104: PPUSH
50105: CALL_OW 254
50109: ST_TO_ADDR
// for i = 1 to mc_bases do
50110: LD_ADDR_VAR 0 4
50114: PUSH
50115: DOUBLE
50116: LD_INT 1
50118: DEC
50119: ST_TO_ADDR
50120: LD_EXP 87
50124: PUSH
50125: FOR_TO
50126: IFFALSE 50279
// begin if not mc_build_list [ i ] then
50128: LD_EXP 92
50132: PUSH
50133: LD_VAR 0 4
50137: ARRAY
50138: NOT
50139: IFFALSE 50143
// continue ;
50141: GO 50125
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
50143: LD_VAR 0 6
50147: PUSH
50148: LD_VAR 0 7
50152: PUSH
50153: LD_VAR 0 8
50157: PUSH
50158: LD_VAR 0 9
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: PPUSH
50169: LD_EXP 92
50173: PUSH
50174: LD_VAR 0 4
50178: ARRAY
50179: PUSH
50180: LD_INT 1
50182: ARRAY
50183: PPUSH
50184: CALL 61758 0 2
50188: IFFALSE 50277
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
50190: LD_ADDR_EXP 92
50194: PUSH
50195: LD_EXP 92
50199: PPUSH
50200: LD_VAR 0 4
50204: PPUSH
50205: LD_EXP 92
50209: PUSH
50210: LD_VAR 0 4
50214: ARRAY
50215: PPUSH
50216: LD_INT 1
50218: PPUSH
50219: CALL_OW 3
50223: PPUSH
50224: CALL_OW 1
50228: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
50229: LD_ADDR_EXP 94
50233: PUSH
50234: LD_EXP 94
50238: PPUSH
50239: LD_VAR 0 4
50243: PUSH
50244: LD_EXP 94
50248: PUSH
50249: LD_VAR 0 4
50253: ARRAY
50254: PUSH
50255: LD_INT 1
50257: PLUS
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PPUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: CALL 55589 0 3
50272: ST_TO_ADDR
// exit ;
50273: POP
50274: POP
50275: GO 50281
// end ; end ;
50277: GO 50125
50279: POP
50280: POP
// end ;
50281: LD_VAR 0 3
50285: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
50286: LD_INT 0
50288: PPUSH
50289: PPUSH
50290: PPUSH
// if not mc_bases or not skirmish then
50291: LD_EXP 87
50295: NOT
50296: PUSH
50297: LD_EXP 85
50301: NOT
50302: OR
50303: IFFALSE 50307
// exit ;
50305: GO 50497
// for i = 1 to mc_bases do
50307: LD_ADDR_VAR 0 4
50311: PUSH
50312: DOUBLE
50313: LD_INT 1
50315: DEC
50316: ST_TO_ADDR
50317: LD_EXP 87
50321: PUSH
50322: FOR_TO
50323: IFFALSE 50410
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
50325: LD_VAR 0 1
50329: PUSH
50330: LD_EXP 95
50334: PUSH
50335: LD_VAR 0 4
50339: ARRAY
50340: IN
50341: PUSH
50342: LD_VAR 0 1
50346: PUSH
50347: LD_EXP 96
50351: PUSH
50352: LD_VAR 0 4
50356: ARRAY
50357: IN
50358: NOT
50359: AND
50360: IFFALSE 50408
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
50362: LD_ADDR_EXP 96
50366: PUSH
50367: LD_EXP 96
50371: PPUSH
50372: LD_VAR 0 4
50376: PUSH
50377: LD_EXP 96
50381: PUSH
50382: LD_VAR 0 4
50386: ARRAY
50387: PUSH
50388: LD_INT 1
50390: PLUS
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PPUSH
50396: LD_VAR 0 1
50400: PPUSH
50401: CALL 55589 0 3
50405: ST_TO_ADDR
// break ;
50406: GO 50410
// end ; end ;
50408: GO 50322
50410: POP
50411: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
50412: LD_VAR 0 1
50416: PPUSH
50417: CALL_OW 257
50421: PUSH
50422: LD_EXP 113
50426: IN
50427: PUSH
50428: LD_VAR 0 1
50432: PPUSH
50433: CALL_OW 266
50437: PUSH
50438: LD_INT 5
50440: EQUAL
50441: AND
50442: PUSH
50443: LD_VAR 0 2
50447: PPUSH
50448: CALL_OW 110
50452: PUSH
50453: LD_INT 18
50455: NONEQUAL
50456: AND
50457: IFFALSE 50497
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
50459: LD_VAR 0 2
50463: PPUSH
50464: CALL_OW 257
50468: PUSH
50469: LD_INT 5
50471: PUSH
50472: LD_INT 8
50474: PUSH
50475: LD_INT 9
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: IN
50483: IFFALSE 50497
// SetClass ( unit , 1 ) ;
50485: LD_VAR 0 2
50489: PPUSH
50490: LD_INT 1
50492: PPUSH
50493: CALL_OW 336
// end ;
50497: LD_VAR 0 3
50501: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
50502: LD_INT 0
50504: PPUSH
50505: PPUSH
// if not mc_bases or not skirmish then
50506: LD_EXP 87
50510: NOT
50511: PUSH
50512: LD_EXP 85
50516: NOT
50517: OR
50518: IFFALSE 50522
// exit ;
50520: GO 50638
// if GetLives ( abandoned_vehicle ) > 250 then
50522: LD_VAR 0 2
50526: PPUSH
50527: CALL_OW 256
50531: PUSH
50532: LD_INT 250
50534: GREATER
50535: IFFALSE 50539
// exit ;
50537: GO 50638
// for i = 1 to mc_bases do
50539: LD_ADDR_VAR 0 6
50543: PUSH
50544: DOUBLE
50545: LD_INT 1
50547: DEC
50548: ST_TO_ADDR
50549: LD_EXP 87
50553: PUSH
50554: FOR_TO
50555: IFFALSE 50636
// begin if driver in mc_bases [ i ] then
50557: LD_VAR 0 1
50561: PUSH
50562: LD_EXP 87
50566: PUSH
50567: LD_VAR 0 6
50571: ARRAY
50572: IN
50573: IFFALSE 50634
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
50575: LD_VAR 0 1
50579: PPUSH
50580: LD_EXP 87
50584: PUSH
50585: LD_VAR 0 6
50589: ARRAY
50590: PPUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 30
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 30
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: PPUSH
50619: CALL_OW 72
50623: PUSH
50624: LD_INT 1
50626: ARRAY
50627: PPUSH
50628: CALL_OW 112
// break ;
50632: GO 50636
// end ; end ;
50634: GO 50554
50636: POP
50637: POP
// end ; end_of_file
50638: LD_VAR 0 5
50642: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50643: LD_INT 0
50645: PPUSH
50646: PPUSH
// if exist_mode then
50647: LD_VAR 0 2
50651: IFFALSE 50676
// unit := CreateCharacter ( prefix & ident ) else
50653: LD_ADDR_VAR 0 5
50657: PUSH
50658: LD_VAR 0 3
50662: PUSH
50663: LD_VAR 0 1
50667: STR
50668: PPUSH
50669: CALL_OW 34
50673: ST_TO_ADDR
50674: GO 50691
// unit := NewCharacter ( ident ) ;
50676: LD_ADDR_VAR 0 5
50680: PUSH
50681: LD_VAR 0 1
50685: PPUSH
50686: CALL_OW 25
50690: ST_TO_ADDR
// result := unit ;
50691: LD_ADDR_VAR 0 4
50695: PUSH
50696: LD_VAR 0 5
50700: ST_TO_ADDR
// end ;
50701: LD_VAR 0 4
50705: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50706: LD_INT 0
50708: PPUSH
50709: PPUSH
// if not side or not nation then
50710: LD_VAR 0 1
50714: NOT
50715: PUSH
50716: LD_VAR 0 2
50720: NOT
50721: OR
50722: IFFALSE 50726
// exit ;
50724: GO 51490
// case nation of nation_american :
50726: LD_VAR 0 2
50730: PUSH
50731: LD_INT 1
50733: DOUBLE
50734: EQUAL
50735: IFTRUE 50739
50737: GO 50953
50739: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50740: LD_ADDR_VAR 0 4
50744: PUSH
50745: LD_INT 35
50747: PUSH
50748: LD_INT 45
50750: PUSH
50751: LD_INT 46
50753: PUSH
50754: LD_INT 47
50756: PUSH
50757: LD_INT 82
50759: PUSH
50760: LD_INT 83
50762: PUSH
50763: LD_INT 84
50765: PUSH
50766: LD_INT 85
50768: PUSH
50769: LD_INT 86
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 6
50780: PUSH
50781: LD_INT 15
50783: PUSH
50784: LD_INT 16
50786: PUSH
50787: LD_INT 7
50789: PUSH
50790: LD_INT 12
50792: PUSH
50793: LD_INT 13
50795: PUSH
50796: LD_INT 10
50798: PUSH
50799: LD_INT 14
50801: PUSH
50802: LD_INT 20
50804: PUSH
50805: LD_INT 21
50807: PUSH
50808: LD_INT 22
50810: PUSH
50811: LD_INT 25
50813: PUSH
50814: LD_INT 32
50816: PUSH
50817: LD_INT 27
50819: PUSH
50820: LD_INT 36
50822: PUSH
50823: LD_INT 69
50825: PUSH
50826: LD_INT 39
50828: PUSH
50829: LD_INT 34
50831: PUSH
50832: LD_INT 40
50834: PUSH
50835: LD_INT 48
50837: PUSH
50838: LD_INT 49
50840: PUSH
50841: LD_INT 50
50843: PUSH
50844: LD_INT 51
50846: PUSH
50847: LD_INT 52
50849: PUSH
50850: LD_INT 53
50852: PUSH
50853: LD_INT 54
50855: PUSH
50856: LD_INT 55
50858: PUSH
50859: LD_INT 56
50861: PUSH
50862: LD_INT 57
50864: PUSH
50865: LD_INT 58
50867: PUSH
50868: LD_INT 59
50870: PUSH
50871: LD_INT 60
50873: PUSH
50874: LD_INT 61
50876: PUSH
50877: LD_INT 62
50879: PUSH
50880: LD_INT 80
50882: PUSH
50883: LD_INT 82
50885: PUSH
50886: LD_INT 83
50888: PUSH
50889: LD_INT 84
50891: PUSH
50892: LD_INT 85
50894: PUSH
50895: LD_INT 86
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: ST_TO_ADDR
50951: GO 51414
50953: LD_INT 2
50955: DOUBLE
50956: EQUAL
50957: IFTRUE 50961
50959: GO 51183
50961: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
50962: LD_ADDR_VAR 0 4
50966: PUSH
50967: LD_INT 35
50969: PUSH
50970: LD_INT 45
50972: PUSH
50973: LD_INT 46
50975: PUSH
50976: LD_INT 47
50978: PUSH
50979: LD_INT 82
50981: PUSH
50982: LD_INT 83
50984: PUSH
50985: LD_INT 84
50987: PUSH
50988: LD_INT 85
50990: PUSH
50991: LD_INT 87
50993: PUSH
50994: LD_INT 70
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 11
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: LD_INT 4
51008: PUSH
51009: LD_INT 5
51011: PUSH
51012: LD_INT 6
51014: PUSH
51015: LD_INT 15
51017: PUSH
51018: LD_INT 18
51020: PUSH
51021: LD_INT 7
51023: PUSH
51024: LD_INT 17
51026: PUSH
51027: LD_INT 8
51029: PUSH
51030: LD_INT 20
51032: PUSH
51033: LD_INT 21
51035: PUSH
51036: LD_INT 22
51038: PUSH
51039: LD_INT 72
51041: PUSH
51042: LD_INT 26
51044: PUSH
51045: LD_INT 69
51047: PUSH
51048: LD_INT 39
51050: PUSH
51051: LD_INT 40
51053: PUSH
51054: LD_INT 41
51056: PUSH
51057: LD_INT 42
51059: PUSH
51060: LD_INT 43
51062: PUSH
51063: LD_INT 48
51065: PUSH
51066: LD_INT 49
51068: PUSH
51069: LD_INT 50
51071: PUSH
51072: LD_INT 51
51074: PUSH
51075: LD_INT 52
51077: PUSH
51078: LD_INT 53
51080: PUSH
51081: LD_INT 54
51083: PUSH
51084: LD_INT 55
51086: PUSH
51087: LD_INT 56
51089: PUSH
51090: LD_INT 60
51092: PUSH
51093: LD_INT 61
51095: PUSH
51096: LD_INT 62
51098: PUSH
51099: LD_INT 66
51101: PUSH
51102: LD_INT 67
51104: PUSH
51105: LD_INT 68
51107: PUSH
51108: LD_INT 81
51110: PUSH
51111: LD_INT 82
51113: PUSH
51114: LD_INT 83
51116: PUSH
51117: LD_INT 84
51119: PUSH
51120: LD_INT 85
51122: PUSH
51123: LD_INT 87
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
51181: GO 51414
51183: LD_INT 3
51185: DOUBLE
51186: EQUAL
51187: IFTRUE 51191
51189: GO 51413
51191: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
51192: LD_ADDR_VAR 0 4
51196: PUSH
51197: LD_INT 46
51199: PUSH
51200: LD_INT 47
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 82
51211: PUSH
51212: LD_INT 83
51214: PUSH
51215: LD_INT 84
51217: PUSH
51218: LD_INT 85
51220: PUSH
51221: LD_INT 86
51223: PUSH
51224: LD_INT 11
51226: PUSH
51227: LD_INT 9
51229: PUSH
51230: LD_INT 20
51232: PUSH
51233: LD_INT 19
51235: PUSH
51236: LD_INT 21
51238: PUSH
51239: LD_INT 24
51241: PUSH
51242: LD_INT 22
51244: PUSH
51245: LD_INT 25
51247: PUSH
51248: LD_INT 28
51250: PUSH
51251: LD_INT 29
51253: PUSH
51254: LD_INT 30
51256: PUSH
51257: LD_INT 31
51259: PUSH
51260: LD_INT 37
51262: PUSH
51263: LD_INT 38
51265: PUSH
51266: LD_INT 32
51268: PUSH
51269: LD_INT 27
51271: PUSH
51272: LD_INT 33
51274: PUSH
51275: LD_INT 69
51277: PUSH
51278: LD_INT 39
51280: PUSH
51281: LD_INT 34
51283: PUSH
51284: LD_INT 40
51286: PUSH
51287: LD_INT 71
51289: PUSH
51290: LD_INT 23
51292: PUSH
51293: LD_INT 44
51295: PUSH
51296: LD_INT 48
51298: PUSH
51299: LD_INT 49
51301: PUSH
51302: LD_INT 50
51304: PUSH
51305: LD_INT 51
51307: PUSH
51308: LD_INT 52
51310: PUSH
51311: LD_INT 53
51313: PUSH
51314: LD_INT 54
51316: PUSH
51317: LD_INT 55
51319: PUSH
51320: LD_INT 56
51322: PUSH
51323: LD_INT 57
51325: PUSH
51326: LD_INT 58
51328: PUSH
51329: LD_INT 59
51331: PUSH
51332: LD_INT 63
51334: PUSH
51335: LD_INT 64
51337: PUSH
51338: LD_INT 65
51340: PUSH
51341: LD_INT 82
51343: PUSH
51344: LD_INT 83
51346: PUSH
51347: LD_INT 84
51349: PUSH
51350: LD_INT 85
51352: PUSH
51353: LD_INT 86
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: ST_TO_ADDR
51411: GO 51414
51413: POP
// if state > - 1 and state < 3 then
51414: LD_VAR 0 3
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: GREATER
51423: PUSH
51424: LD_VAR 0 3
51428: PUSH
51429: LD_INT 3
51431: LESS
51432: AND
51433: IFFALSE 51490
// for i in result do
51435: LD_ADDR_VAR 0 5
51439: PUSH
51440: LD_VAR 0 4
51444: PUSH
51445: FOR_IN
51446: IFFALSE 51488
// if GetTech ( i , side ) <> state then
51448: LD_VAR 0 5
51452: PPUSH
51453: LD_VAR 0 1
51457: PPUSH
51458: CALL_OW 321
51462: PUSH
51463: LD_VAR 0 3
51467: NONEQUAL
51468: IFFALSE 51486
// result := result diff i ;
51470: LD_ADDR_VAR 0 4
51474: PUSH
51475: LD_VAR 0 4
51479: PUSH
51480: LD_VAR 0 5
51484: DIFF
51485: ST_TO_ADDR
51486: GO 51445
51488: POP
51489: POP
// end ;
51490: LD_VAR 0 4
51494: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
51495: LD_INT 0
51497: PPUSH
51498: PPUSH
51499: PPUSH
// result := true ;
51500: LD_ADDR_VAR 0 3
51504: PUSH
51505: LD_INT 1
51507: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
51508: LD_ADDR_VAR 0 5
51512: PUSH
51513: LD_VAR 0 2
51517: PPUSH
51518: CALL_OW 480
51522: ST_TO_ADDR
// if not tmp then
51523: LD_VAR 0 5
51527: NOT
51528: IFFALSE 51532
// exit ;
51530: GO 51581
// for i in tmp do
51532: LD_ADDR_VAR 0 4
51536: PUSH
51537: LD_VAR 0 5
51541: PUSH
51542: FOR_IN
51543: IFFALSE 51579
// if GetTech ( i , side ) <> state_researched then
51545: LD_VAR 0 4
51549: PPUSH
51550: LD_VAR 0 1
51554: PPUSH
51555: CALL_OW 321
51559: PUSH
51560: LD_INT 2
51562: NONEQUAL
51563: IFFALSE 51577
// begin result := false ;
51565: LD_ADDR_VAR 0 3
51569: PUSH
51570: LD_INT 0
51572: ST_TO_ADDR
// exit ;
51573: POP
51574: POP
51575: GO 51581
// end ;
51577: GO 51542
51579: POP
51580: POP
// end ;
51581: LD_VAR 0 3
51585: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51586: LD_INT 0
51588: PPUSH
51589: PPUSH
51590: PPUSH
51591: PPUSH
51592: PPUSH
51593: PPUSH
51594: PPUSH
51595: PPUSH
51596: PPUSH
51597: PPUSH
51598: PPUSH
51599: PPUSH
51600: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51601: LD_VAR 0 1
51605: NOT
51606: PUSH
51607: LD_VAR 0 1
51611: PPUSH
51612: CALL_OW 257
51616: PUSH
51617: LD_INT 9
51619: NONEQUAL
51620: OR
51621: IFFALSE 51625
// exit ;
51623: GO 52198
// side := GetSide ( unit ) ;
51625: LD_ADDR_VAR 0 9
51629: PUSH
51630: LD_VAR 0 1
51634: PPUSH
51635: CALL_OW 255
51639: ST_TO_ADDR
// tech_space := tech_spacanom ;
51640: LD_ADDR_VAR 0 12
51644: PUSH
51645: LD_INT 29
51647: ST_TO_ADDR
// tech_time := tech_taurad ;
51648: LD_ADDR_VAR 0 13
51652: PUSH
51653: LD_INT 28
51655: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51656: LD_ADDR_VAR 0 11
51660: PUSH
51661: LD_VAR 0 1
51665: PPUSH
51666: CALL_OW 310
51670: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51671: LD_VAR 0 11
51675: PPUSH
51676: CALL_OW 247
51680: PUSH
51681: LD_INT 2
51683: EQUAL
51684: IFFALSE 51688
// exit ;
51686: GO 52198
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51688: LD_ADDR_VAR 0 8
51692: PUSH
51693: LD_INT 81
51695: PUSH
51696: LD_VAR 0 9
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 21
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PPUSH
51726: CALL_OW 69
51730: ST_TO_ADDR
// if not tmp then
51731: LD_VAR 0 8
51735: NOT
51736: IFFALSE 51740
// exit ;
51738: GO 52198
// if in_unit then
51740: LD_VAR 0 11
51744: IFFALSE 51768
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51746: LD_ADDR_VAR 0 10
51750: PUSH
51751: LD_VAR 0 8
51755: PPUSH
51756: LD_VAR 0 11
51760: PPUSH
51761: CALL_OW 74
51765: ST_TO_ADDR
51766: GO 51788
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51768: LD_ADDR_VAR 0 10
51772: PUSH
51773: LD_VAR 0 8
51777: PPUSH
51778: LD_VAR 0 1
51782: PPUSH
51783: CALL_OW 74
51787: ST_TO_ADDR
// if not enemy then
51788: LD_VAR 0 10
51792: NOT
51793: IFFALSE 51797
// exit ;
51795: GO 52198
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51797: LD_VAR 0 11
51801: PUSH
51802: LD_VAR 0 11
51806: PPUSH
51807: LD_VAR 0 10
51811: PPUSH
51812: CALL_OW 296
51816: PUSH
51817: LD_INT 13
51819: GREATER
51820: AND
51821: PUSH
51822: LD_VAR 0 1
51826: PPUSH
51827: LD_VAR 0 10
51831: PPUSH
51832: CALL_OW 296
51836: PUSH
51837: LD_INT 12
51839: GREATER
51840: OR
51841: IFFALSE 51845
// exit ;
51843: GO 52198
// missile := [ 1 ] ;
51845: LD_ADDR_VAR 0 14
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51856: LD_VAR 0 9
51860: PPUSH
51861: LD_VAR 0 12
51865: PPUSH
51866: CALL_OW 325
51870: IFFALSE 51899
// missile := Insert ( missile , missile + 1 , 2 ) ;
51872: LD_ADDR_VAR 0 14
51876: PUSH
51877: LD_VAR 0 14
51881: PPUSH
51882: LD_VAR 0 14
51886: PUSH
51887: LD_INT 1
51889: PLUS
51890: PPUSH
51891: LD_INT 2
51893: PPUSH
51894: CALL_OW 2
51898: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51899: LD_VAR 0 9
51903: PPUSH
51904: LD_VAR 0 13
51908: PPUSH
51909: CALL_OW 325
51913: PUSH
51914: LD_VAR 0 10
51918: PPUSH
51919: CALL_OW 255
51923: PPUSH
51924: LD_VAR 0 13
51928: PPUSH
51929: CALL_OW 325
51933: NOT
51934: AND
51935: IFFALSE 51964
// missile := Insert ( missile , missile + 1 , 3 ) ;
51937: LD_ADDR_VAR 0 14
51941: PUSH
51942: LD_VAR 0 14
51946: PPUSH
51947: LD_VAR 0 14
51951: PUSH
51952: LD_INT 1
51954: PLUS
51955: PPUSH
51956: LD_INT 3
51958: PPUSH
51959: CALL_OW 2
51963: ST_TO_ADDR
// if missile < 2 then
51964: LD_VAR 0 14
51968: PUSH
51969: LD_INT 2
51971: LESS
51972: IFFALSE 51976
// exit ;
51974: GO 52198
// x := GetX ( enemy ) ;
51976: LD_ADDR_VAR 0 4
51980: PUSH
51981: LD_VAR 0 10
51985: PPUSH
51986: CALL_OW 250
51990: ST_TO_ADDR
// y := GetY ( enemy ) ;
51991: LD_ADDR_VAR 0 5
51995: PUSH
51996: LD_VAR 0 10
52000: PPUSH
52001: CALL_OW 251
52005: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
52006: LD_ADDR_VAR 0 6
52010: PUSH
52011: LD_VAR 0 4
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PPUSH
52020: LD_INT 1
52022: PPUSH
52023: CALL_OW 12
52027: PLUS
52028: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
52029: LD_ADDR_VAR 0 7
52033: PUSH
52034: LD_VAR 0 5
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PPUSH
52043: LD_INT 1
52045: PPUSH
52046: CALL_OW 12
52050: PLUS
52051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52052: LD_VAR 0 6
52056: PPUSH
52057: LD_VAR 0 7
52061: PPUSH
52062: CALL_OW 488
52066: NOT
52067: IFFALSE 52089
// begin _x := x ;
52069: LD_ADDR_VAR 0 6
52073: PUSH
52074: LD_VAR 0 4
52078: ST_TO_ADDR
// _y := y ;
52079: LD_ADDR_VAR 0 7
52083: PUSH
52084: LD_VAR 0 5
52088: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
52089: LD_ADDR_VAR 0 3
52093: PUSH
52094: LD_INT 1
52096: PPUSH
52097: LD_VAR 0 14
52101: PPUSH
52102: CALL_OW 12
52106: ST_TO_ADDR
// case i of 1 :
52107: LD_VAR 0 3
52111: PUSH
52112: LD_INT 1
52114: DOUBLE
52115: EQUAL
52116: IFTRUE 52120
52118: GO 52137
52120: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
52121: LD_VAR 0 1
52125: PPUSH
52126: LD_VAR 0 10
52130: PPUSH
52131: CALL_OW 115
52135: GO 52198
52137: LD_INT 2
52139: DOUBLE
52140: EQUAL
52141: IFTRUE 52145
52143: GO 52167
52145: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
52146: LD_VAR 0 1
52150: PPUSH
52151: LD_VAR 0 6
52155: PPUSH
52156: LD_VAR 0 7
52160: PPUSH
52161: CALL_OW 153
52165: GO 52198
52167: LD_INT 3
52169: DOUBLE
52170: EQUAL
52171: IFTRUE 52175
52173: GO 52197
52175: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
52176: LD_VAR 0 1
52180: PPUSH
52181: LD_VAR 0 6
52185: PPUSH
52186: LD_VAR 0 7
52190: PPUSH
52191: CALL_OW 154
52195: GO 52198
52197: POP
// end ;
52198: LD_VAR 0 2
52202: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
52203: LD_INT 0
52205: PPUSH
52206: PPUSH
52207: PPUSH
52208: PPUSH
52209: PPUSH
52210: PPUSH
// if not unit or not building then
52211: LD_VAR 0 1
52215: NOT
52216: PUSH
52217: LD_VAR 0 2
52221: NOT
52222: OR
52223: IFFALSE 52227
// exit ;
52225: GO 52385
// x := GetX ( building ) ;
52227: LD_ADDR_VAR 0 5
52231: PUSH
52232: LD_VAR 0 2
52236: PPUSH
52237: CALL_OW 250
52241: ST_TO_ADDR
// y := GetY ( building ) ;
52242: LD_ADDR_VAR 0 6
52246: PUSH
52247: LD_VAR 0 2
52251: PPUSH
52252: CALL_OW 251
52256: ST_TO_ADDR
// for i = 0 to 5 do
52257: LD_ADDR_VAR 0 4
52261: PUSH
52262: DOUBLE
52263: LD_INT 0
52265: DEC
52266: ST_TO_ADDR
52267: LD_INT 5
52269: PUSH
52270: FOR_TO
52271: IFFALSE 52383
// begin _x := ShiftX ( x , i , 3 ) ;
52273: LD_ADDR_VAR 0 7
52277: PUSH
52278: LD_VAR 0 5
52282: PPUSH
52283: LD_VAR 0 4
52287: PPUSH
52288: LD_INT 3
52290: PPUSH
52291: CALL_OW 272
52295: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
52296: LD_ADDR_VAR 0 8
52300: PUSH
52301: LD_VAR 0 6
52305: PPUSH
52306: LD_VAR 0 4
52310: PPUSH
52311: LD_INT 3
52313: PPUSH
52314: CALL_OW 273
52318: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52319: LD_VAR 0 7
52323: PPUSH
52324: LD_VAR 0 8
52328: PPUSH
52329: CALL_OW 488
52333: NOT
52334: IFFALSE 52338
// continue ;
52336: GO 52270
// if HexInfo ( _x , _y ) = 0 then
52338: LD_VAR 0 7
52342: PPUSH
52343: LD_VAR 0 8
52347: PPUSH
52348: CALL_OW 428
52352: PUSH
52353: LD_INT 0
52355: EQUAL
52356: IFFALSE 52381
// begin ComMoveXY ( unit , _x , _y ) ;
52358: LD_VAR 0 1
52362: PPUSH
52363: LD_VAR 0 7
52367: PPUSH
52368: LD_VAR 0 8
52372: PPUSH
52373: CALL_OW 111
// exit ;
52377: POP
52378: POP
52379: GO 52385
// end ; end ;
52381: GO 52270
52383: POP
52384: POP
// end ;
52385: LD_VAR 0 3
52389: RET
// export function ScanBase ( side , base_area ) ; begin
52390: LD_INT 0
52392: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
52393: LD_ADDR_VAR 0 3
52397: PUSH
52398: LD_VAR 0 2
52402: PPUSH
52403: LD_INT 81
52405: PUSH
52406: LD_VAR 0 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PPUSH
52415: CALL_OW 70
52419: ST_TO_ADDR
// end ;
52420: LD_VAR 0 3
52424: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
52425: LD_INT 0
52427: PPUSH
52428: PPUSH
52429: PPUSH
52430: PPUSH
// result := false ;
52431: LD_ADDR_VAR 0 2
52435: PUSH
52436: LD_INT 0
52438: ST_TO_ADDR
// side := GetSide ( unit ) ;
52439: LD_ADDR_VAR 0 3
52443: PUSH
52444: LD_VAR 0 1
52448: PPUSH
52449: CALL_OW 255
52453: ST_TO_ADDR
// nat := GetNation ( unit ) ;
52454: LD_ADDR_VAR 0 4
52458: PUSH
52459: LD_VAR 0 1
52463: PPUSH
52464: CALL_OW 248
52468: ST_TO_ADDR
// case nat of 1 :
52469: LD_VAR 0 4
52473: PUSH
52474: LD_INT 1
52476: DOUBLE
52477: EQUAL
52478: IFTRUE 52482
52480: GO 52493
52482: POP
// tech := tech_lassight ; 2 :
52483: LD_ADDR_VAR 0 5
52487: PUSH
52488: LD_INT 12
52490: ST_TO_ADDR
52491: GO 52532
52493: LD_INT 2
52495: DOUBLE
52496: EQUAL
52497: IFTRUE 52501
52499: GO 52512
52501: POP
// tech := tech_mortar ; 3 :
52502: LD_ADDR_VAR 0 5
52506: PUSH
52507: LD_INT 41
52509: ST_TO_ADDR
52510: GO 52532
52512: LD_INT 3
52514: DOUBLE
52515: EQUAL
52516: IFTRUE 52520
52518: GO 52531
52520: POP
// tech := tech_bazooka ; end ;
52521: LD_ADDR_VAR 0 5
52525: PUSH
52526: LD_INT 44
52528: ST_TO_ADDR
52529: GO 52532
52531: POP
// if Researched ( side , tech ) then
52532: LD_VAR 0 3
52536: PPUSH
52537: LD_VAR 0 5
52541: PPUSH
52542: CALL_OW 325
52546: IFFALSE 52573
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
52548: LD_ADDR_VAR 0 2
52552: PUSH
52553: LD_INT 5
52555: PUSH
52556: LD_INT 8
52558: PUSH
52559: LD_INT 9
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: LIST
52566: PUSH
52567: LD_VAR 0 4
52571: ARRAY
52572: ST_TO_ADDR
// end ;
52573: LD_VAR 0 2
52577: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
52578: LD_INT 0
52580: PPUSH
52581: PPUSH
52582: PPUSH
// if not mines then
52583: LD_VAR 0 2
52587: NOT
52588: IFFALSE 52592
// exit ;
52590: GO 52736
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52592: LD_ADDR_VAR 0 5
52596: PUSH
52597: LD_INT 81
52599: PUSH
52600: LD_VAR 0 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 21
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PPUSH
52630: CALL_OW 69
52634: ST_TO_ADDR
// for i in mines do
52635: LD_ADDR_VAR 0 4
52639: PUSH
52640: LD_VAR 0 2
52644: PUSH
52645: FOR_IN
52646: IFFALSE 52734
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52648: LD_VAR 0 4
52652: PUSH
52653: LD_INT 1
52655: ARRAY
52656: PPUSH
52657: LD_VAR 0 4
52661: PUSH
52662: LD_INT 2
52664: ARRAY
52665: PPUSH
52666: CALL_OW 458
52670: NOT
52671: IFFALSE 52675
// continue ;
52673: GO 52645
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52675: LD_VAR 0 4
52679: PUSH
52680: LD_INT 1
52682: ARRAY
52683: PPUSH
52684: LD_VAR 0 4
52688: PUSH
52689: LD_INT 2
52691: ARRAY
52692: PPUSH
52693: CALL_OW 428
52697: PUSH
52698: LD_VAR 0 5
52702: IN
52703: IFFALSE 52732
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52705: LD_VAR 0 4
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: PPUSH
52714: LD_VAR 0 4
52718: PUSH
52719: LD_INT 2
52721: ARRAY
52722: PPUSH
52723: LD_VAR 0 1
52727: PPUSH
52728: CALL_OW 456
// end ;
52732: GO 52645
52734: POP
52735: POP
// end ;
52736: LD_VAR 0 3
52740: RET
// export function Count ( array ) ; var i ; begin
52741: LD_INT 0
52743: PPUSH
52744: PPUSH
// result := 0 ;
52745: LD_ADDR_VAR 0 2
52749: PUSH
52750: LD_INT 0
52752: ST_TO_ADDR
// for i in array do
52753: LD_ADDR_VAR 0 3
52757: PUSH
52758: LD_VAR 0 1
52762: PUSH
52763: FOR_IN
52764: IFFALSE 52788
// if i then
52766: LD_VAR 0 3
52770: IFFALSE 52786
// result := result + 1 ;
52772: LD_ADDR_VAR 0 2
52776: PUSH
52777: LD_VAR 0 2
52781: PUSH
52782: LD_INT 1
52784: PLUS
52785: ST_TO_ADDR
52786: GO 52763
52788: POP
52789: POP
// end ;
52790: LD_VAR 0 2
52794: RET
// export function IsEmpty ( building ) ; begin
52795: LD_INT 0
52797: PPUSH
// if not building then
52798: LD_VAR 0 1
52802: NOT
52803: IFFALSE 52807
// exit ;
52805: GO 52850
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52807: LD_ADDR_VAR 0 2
52811: PUSH
52812: LD_VAR 0 1
52816: PUSH
52817: LD_INT 22
52819: PUSH
52820: LD_VAR 0 1
52824: PPUSH
52825: CALL_OW 255
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 58
52836: PUSH
52837: EMPTY
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PPUSH
52844: CALL_OW 69
52848: IN
52849: ST_TO_ADDR
// end ;
52850: LD_VAR 0 2
52854: RET
// export function IsNotFull ( building ) ; begin
52855: LD_INT 0
52857: PPUSH
// if not building then
52858: LD_VAR 0 1
52862: NOT
52863: IFFALSE 52867
// exit ;
52865: GO 52886
// result := UnitsInside ( building ) < 6 ;
52867: LD_ADDR_VAR 0 2
52871: PUSH
52872: LD_VAR 0 1
52876: PPUSH
52877: CALL_OW 313
52881: PUSH
52882: LD_INT 6
52884: LESS
52885: ST_TO_ADDR
// end ;
52886: LD_VAR 0 2
52890: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52891: LD_INT 0
52893: PPUSH
52894: PPUSH
52895: PPUSH
52896: PPUSH
// tmp := [ ] ;
52897: LD_ADDR_VAR 0 3
52901: PUSH
52902: EMPTY
52903: ST_TO_ADDR
// list := [ ] ;
52904: LD_ADDR_VAR 0 5
52908: PUSH
52909: EMPTY
52910: ST_TO_ADDR
// for i = 16 to 25 do
52911: LD_ADDR_VAR 0 4
52915: PUSH
52916: DOUBLE
52917: LD_INT 16
52919: DEC
52920: ST_TO_ADDR
52921: LD_INT 25
52923: PUSH
52924: FOR_TO
52925: IFFALSE 52998
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52927: LD_ADDR_VAR 0 3
52931: PUSH
52932: LD_VAR 0 3
52936: PUSH
52937: LD_INT 22
52939: PUSH
52940: LD_VAR 0 1
52944: PPUSH
52945: CALL_OW 255
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 91
52956: PUSH
52957: LD_VAR 0 1
52961: PUSH
52962: LD_INT 6
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 30
52972: PUSH
52973: LD_VAR 0 4
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: PPUSH
52990: CALL_OW 69
52994: ADD
52995: ST_TO_ADDR
52996: GO 52924
52998: POP
52999: POP
// for i = 1 to tmp do
53000: LD_ADDR_VAR 0 4
53004: PUSH
53005: DOUBLE
53006: LD_INT 1
53008: DEC
53009: ST_TO_ADDR
53010: LD_VAR 0 3
53014: PUSH
53015: FOR_TO
53016: IFFALSE 53104
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
53018: LD_ADDR_VAR 0 5
53022: PUSH
53023: LD_VAR 0 5
53027: PUSH
53028: LD_VAR 0 3
53032: PUSH
53033: LD_VAR 0 4
53037: ARRAY
53038: PPUSH
53039: CALL_OW 266
53043: PUSH
53044: LD_VAR 0 3
53048: PUSH
53049: LD_VAR 0 4
53053: ARRAY
53054: PPUSH
53055: CALL_OW 250
53059: PUSH
53060: LD_VAR 0 3
53064: PUSH
53065: LD_VAR 0 4
53069: ARRAY
53070: PPUSH
53071: CALL_OW 251
53075: PUSH
53076: LD_VAR 0 3
53080: PUSH
53081: LD_VAR 0 4
53085: ARRAY
53086: PPUSH
53087: CALL_OW 254
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: ADD
53101: ST_TO_ADDR
53102: GO 53015
53104: POP
53105: POP
// result := list ;
53106: LD_ADDR_VAR 0 2
53110: PUSH
53111: LD_VAR 0 5
53115: ST_TO_ADDR
// end ;
53116: LD_VAR 0 2
53120: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
53121: LD_INT 0
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
// if not factory then
53130: LD_VAR 0 1
53134: NOT
53135: IFFALSE 53139
// exit ;
53137: GO 53732
// if control = control_apeman then
53139: LD_VAR 0 4
53143: PUSH
53144: LD_INT 5
53146: EQUAL
53147: IFFALSE 53256
// begin tmp := UnitsInside ( factory ) ;
53149: LD_ADDR_VAR 0 8
53153: PUSH
53154: LD_VAR 0 1
53158: PPUSH
53159: CALL_OW 313
53163: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
53164: LD_VAR 0 8
53168: PPUSH
53169: LD_INT 25
53171: PUSH
53172: LD_INT 12
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PPUSH
53179: CALL_OW 72
53183: NOT
53184: IFFALSE 53194
// control := control_manual ;
53186: LD_ADDR_VAR 0 4
53190: PUSH
53191: LD_INT 1
53193: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
53194: LD_ADDR_VAR 0 8
53198: PUSH
53199: LD_VAR 0 1
53203: PPUSH
53204: CALL 52891 0 1
53208: ST_TO_ADDR
// if tmp then
53209: LD_VAR 0 8
53213: IFFALSE 53256
// begin for i in tmp do
53215: LD_ADDR_VAR 0 7
53219: PUSH
53220: LD_VAR 0 8
53224: PUSH
53225: FOR_IN
53226: IFFALSE 53254
// if i [ 1 ] = b_ext_radio then
53228: LD_VAR 0 7
53232: PUSH
53233: LD_INT 1
53235: ARRAY
53236: PUSH
53237: LD_INT 22
53239: EQUAL
53240: IFFALSE 53252
// begin control := control_remote ;
53242: LD_ADDR_VAR 0 4
53246: PUSH
53247: LD_INT 2
53249: ST_TO_ADDR
// break ;
53250: GO 53254
// end ;
53252: GO 53225
53254: POP
53255: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53256: LD_VAR 0 1
53260: PPUSH
53261: LD_VAR 0 2
53265: PPUSH
53266: LD_VAR 0 3
53270: PPUSH
53271: LD_VAR 0 4
53275: PPUSH
53276: LD_VAR 0 5
53280: PPUSH
53281: CALL_OW 448
53285: IFFALSE 53320
// begin result := [ chassis , engine , control , weapon ] ;
53287: LD_ADDR_VAR 0 6
53291: PUSH
53292: LD_VAR 0 2
53296: PUSH
53297: LD_VAR 0 3
53301: PUSH
53302: LD_VAR 0 4
53306: PUSH
53307: LD_VAR 0 5
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: ST_TO_ADDR
// exit ;
53318: GO 53732
// end ; _chassis := AvailableChassisList ( factory ) ;
53320: LD_ADDR_VAR 0 9
53324: PUSH
53325: LD_VAR 0 1
53329: PPUSH
53330: CALL_OW 475
53334: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
53335: LD_ADDR_VAR 0 11
53339: PUSH
53340: LD_VAR 0 1
53344: PPUSH
53345: CALL_OW 476
53349: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
53350: LD_ADDR_VAR 0 12
53354: PUSH
53355: LD_VAR 0 1
53359: PPUSH
53360: CALL_OW 477
53364: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
53365: LD_ADDR_VAR 0 10
53369: PUSH
53370: LD_VAR 0 1
53374: PPUSH
53375: CALL_OW 478
53379: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
53380: LD_VAR 0 9
53384: NOT
53385: PUSH
53386: LD_VAR 0 11
53390: NOT
53391: OR
53392: PUSH
53393: LD_VAR 0 12
53397: NOT
53398: OR
53399: PUSH
53400: LD_VAR 0 10
53404: NOT
53405: OR
53406: IFFALSE 53441
// begin result := [ chassis , engine , control , weapon ] ;
53408: LD_ADDR_VAR 0 6
53412: PUSH
53413: LD_VAR 0 2
53417: PUSH
53418: LD_VAR 0 3
53422: PUSH
53423: LD_VAR 0 4
53427: PUSH
53428: LD_VAR 0 5
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// exit ;
53439: GO 53732
// end ; if not chassis in _chassis then
53441: LD_VAR 0 2
53445: PUSH
53446: LD_VAR 0 9
53450: IN
53451: NOT
53452: IFFALSE 53478
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53454: LD_ADDR_VAR 0 2
53458: PUSH
53459: LD_VAR 0 9
53463: PUSH
53464: LD_INT 1
53466: PPUSH
53467: LD_VAR 0 9
53471: PPUSH
53472: CALL_OW 12
53476: ARRAY
53477: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53478: LD_VAR 0 2
53482: PPUSH
53483: LD_VAR 0 3
53487: PPUSH
53488: CALL 53737 0 2
53492: NOT
53493: IFFALSE 53552
// repeat engine := _engine [ 1 ] ;
53495: LD_ADDR_VAR 0 3
53499: PUSH
53500: LD_VAR 0 11
53504: PUSH
53505: LD_INT 1
53507: ARRAY
53508: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53509: LD_ADDR_VAR 0 11
53513: PUSH
53514: LD_VAR 0 11
53518: PPUSH
53519: LD_INT 1
53521: PPUSH
53522: CALL_OW 3
53526: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53527: LD_VAR 0 2
53531: PPUSH
53532: LD_VAR 0 3
53536: PPUSH
53537: CALL 53737 0 2
53541: PUSH
53542: LD_VAR 0 11
53546: PUSH
53547: EMPTY
53548: EQUAL
53549: OR
53550: IFFALSE 53495
// if not control in _control then
53552: LD_VAR 0 4
53556: PUSH
53557: LD_VAR 0 12
53561: IN
53562: NOT
53563: IFFALSE 53589
// control := _control [ rand ( 1 , _control ) ] ;
53565: LD_ADDR_VAR 0 4
53569: PUSH
53570: LD_VAR 0 12
53574: PUSH
53575: LD_INT 1
53577: PPUSH
53578: LD_VAR 0 12
53582: PPUSH
53583: CALL_OW 12
53587: ARRAY
53588: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53589: LD_VAR 0 2
53593: PPUSH
53594: LD_VAR 0 5
53598: PPUSH
53599: CALL 53957 0 2
53603: NOT
53604: IFFALSE 53663
// repeat weapon := _weapon [ 1 ] ;
53606: LD_ADDR_VAR 0 5
53610: PUSH
53611: LD_VAR 0 10
53615: PUSH
53616: LD_INT 1
53618: ARRAY
53619: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53620: LD_ADDR_VAR 0 10
53624: PUSH
53625: LD_VAR 0 10
53629: PPUSH
53630: LD_INT 1
53632: PPUSH
53633: CALL_OW 3
53637: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53638: LD_VAR 0 2
53642: PPUSH
53643: LD_VAR 0 5
53647: PPUSH
53648: CALL 53957 0 2
53652: PUSH
53653: LD_VAR 0 10
53657: PUSH
53658: EMPTY
53659: EQUAL
53660: OR
53661: IFFALSE 53606
// result := [ ] ;
53663: LD_ADDR_VAR 0 6
53667: PUSH
53668: EMPTY
53669: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53670: LD_VAR 0 1
53674: PPUSH
53675: LD_VAR 0 2
53679: PPUSH
53680: LD_VAR 0 3
53684: PPUSH
53685: LD_VAR 0 4
53689: PPUSH
53690: LD_VAR 0 5
53694: PPUSH
53695: CALL_OW 448
53699: IFFALSE 53732
// result := [ chassis , engine , control , weapon ] ;
53701: LD_ADDR_VAR 0 6
53705: PUSH
53706: LD_VAR 0 2
53710: PUSH
53711: LD_VAR 0 3
53715: PUSH
53716: LD_VAR 0 4
53720: PUSH
53721: LD_VAR 0 5
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// end ;
53732: LD_VAR 0 6
53736: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53737: LD_INT 0
53739: PPUSH
// if not chassis or not engine then
53740: LD_VAR 0 1
53744: NOT
53745: PUSH
53746: LD_VAR 0 2
53750: NOT
53751: OR
53752: IFFALSE 53756
// exit ;
53754: GO 53952
// case engine of engine_solar :
53756: LD_VAR 0 2
53760: PUSH
53761: LD_INT 2
53763: DOUBLE
53764: EQUAL
53765: IFTRUE 53769
53767: GO 53807
53769: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53770: LD_ADDR_VAR 0 3
53774: PUSH
53775: LD_INT 11
53777: PUSH
53778: LD_INT 12
53780: PUSH
53781: LD_INT 13
53783: PUSH
53784: LD_INT 14
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: ST_TO_ADDR
53805: GO 53936
53807: LD_INT 1
53809: DOUBLE
53810: EQUAL
53811: IFTRUE 53815
53813: GO 53877
53815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53816: LD_ADDR_VAR 0 3
53820: PUSH
53821: LD_INT 11
53823: PUSH
53824: LD_INT 12
53826: PUSH
53827: LD_INT 13
53829: PUSH
53830: LD_INT 14
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: LD_INT 3
53841: PUSH
53842: LD_INT 4
53844: PUSH
53845: LD_INT 5
53847: PUSH
53848: LD_INT 21
53850: PUSH
53851: LD_INT 23
53853: PUSH
53854: LD_INT 22
53856: PUSH
53857: LD_INT 24
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
53875: GO 53936
53877: LD_INT 3
53879: DOUBLE
53880: EQUAL
53881: IFTRUE 53885
53883: GO 53935
53885: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53886: LD_ADDR_VAR 0 3
53890: PUSH
53891: LD_INT 13
53893: PUSH
53894: LD_INT 14
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: LD_INT 3
53902: PUSH
53903: LD_INT 4
53905: PUSH
53906: LD_INT 5
53908: PUSH
53909: LD_INT 21
53911: PUSH
53912: LD_INT 22
53914: PUSH
53915: LD_INT 23
53917: PUSH
53918: LD_INT 24
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: ST_TO_ADDR
53933: GO 53936
53935: POP
// result := ( chassis in result ) ;
53936: LD_ADDR_VAR 0 3
53940: PUSH
53941: LD_VAR 0 1
53945: PUSH
53946: LD_VAR 0 3
53950: IN
53951: ST_TO_ADDR
// end ;
53952: LD_VAR 0 3
53956: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53957: LD_INT 0
53959: PPUSH
// if not chassis or not weapon then
53960: LD_VAR 0 1
53964: NOT
53965: PUSH
53966: LD_VAR 0 2
53970: NOT
53971: OR
53972: IFFALSE 53976
// exit ;
53974: GO 55002
// case weapon of us_machine_gun :
53976: LD_VAR 0 2
53980: PUSH
53981: LD_INT 2
53983: DOUBLE
53984: EQUAL
53985: IFTRUE 53989
53987: GO 54019
53989: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53990: LD_ADDR_VAR 0 3
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: LD_INT 4
54006: PUSH
54007: LD_INT 5
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: ST_TO_ADDR
54017: GO 54986
54019: LD_INT 3
54021: DOUBLE
54022: EQUAL
54023: IFTRUE 54027
54025: GO 54057
54027: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
54028: LD_ADDR_VAR 0 3
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: LD_INT 4
54044: PUSH
54045: LD_INT 5
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: ST_TO_ADDR
54055: GO 54986
54057: LD_INT 11
54059: DOUBLE
54060: EQUAL
54061: IFTRUE 54065
54063: GO 54095
54065: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
54066: LD_ADDR_VAR 0 3
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 3
54079: PUSH
54080: LD_INT 4
54082: PUSH
54083: LD_INT 5
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: ST_TO_ADDR
54093: GO 54986
54095: LD_INT 4
54097: DOUBLE
54098: EQUAL
54099: IFTRUE 54103
54101: GO 54129
54103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
54104: LD_ADDR_VAR 0 3
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: LD_INT 4
54117: PUSH
54118: LD_INT 5
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: ST_TO_ADDR
54127: GO 54986
54129: LD_INT 5
54131: DOUBLE
54132: EQUAL
54133: IFTRUE 54137
54135: GO 54163
54137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
54138: LD_ADDR_VAR 0 3
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: LD_INT 4
54151: PUSH
54152: LD_INT 5
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: ST_TO_ADDR
54161: GO 54986
54163: LD_INT 9
54165: DOUBLE
54166: EQUAL
54167: IFTRUE 54171
54169: GO 54197
54171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
54172: LD_ADDR_VAR 0 3
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 4
54185: PUSH
54186: LD_INT 5
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: ST_TO_ADDR
54195: GO 54986
54197: LD_INT 7
54199: DOUBLE
54200: EQUAL
54201: IFTRUE 54205
54203: GO 54231
54205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
54206: LD_ADDR_VAR 0 3
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: LD_INT 4
54219: PUSH
54220: LD_INT 5
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
54229: GO 54986
54231: LD_INT 12
54233: DOUBLE
54234: EQUAL
54235: IFTRUE 54239
54237: GO 54265
54239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
54240: LD_ADDR_VAR 0 3
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: LD_INT 4
54253: PUSH
54254: LD_INT 5
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: ST_TO_ADDR
54263: GO 54986
54265: LD_INT 13
54267: DOUBLE
54268: EQUAL
54269: IFTRUE 54273
54271: GO 54299
54273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
54274: LD_ADDR_VAR 0 3
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 4
54287: PUSH
54288: LD_INT 5
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
54297: GO 54986
54299: LD_INT 14
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54307
54305: GO 54325
54307: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
54308: LD_ADDR_VAR 0 3
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: LD_INT 5
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: ST_TO_ADDR
54323: GO 54986
54325: LD_INT 6
54327: DOUBLE
54328: EQUAL
54329: IFTRUE 54333
54331: GO 54351
54333: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
54334: LD_ADDR_VAR 0 3
54338: PUSH
54339: LD_INT 4
54341: PUSH
54342: LD_INT 5
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: ST_TO_ADDR
54349: GO 54986
54351: LD_INT 10
54353: DOUBLE
54354: EQUAL
54355: IFTRUE 54359
54357: GO 54377
54359: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
54360: LD_ADDR_VAR 0 3
54364: PUSH
54365: LD_INT 4
54367: PUSH
54368: LD_INT 5
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: ST_TO_ADDR
54375: GO 54986
54377: LD_INT 22
54379: DOUBLE
54380: EQUAL
54381: IFTRUE 54385
54383: GO 54411
54385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
54386: LD_ADDR_VAR 0 3
54390: PUSH
54391: LD_INT 11
54393: PUSH
54394: LD_INT 12
54396: PUSH
54397: LD_INT 13
54399: PUSH
54400: LD_INT 14
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
54409: GO 54986
54411: LD_INT 23
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54419
54417: GO 54445
54419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
54420: LD_ADDR_VAR 0 3
54424: PUSH
54425: LD_INT 11
54427: PUSH
54428: LD_INT 12
54430: PUSH
54431: LD_INT 13
54433: PUSH
54434: LD_INT 14
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: ST_TO_ADDR
54443: GO 54986
54445: LD_INT 24
54447: DOUBLE
54448: EQUAL
54449: IFTRUE 54453
54451: GO 54479
54453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54454: LD_ADDR_VAR 0 3
54458: PUSH
54459: LD_INT 11
54461: PUSH
54462: LD_INT 12
54464: PUSH
54465: LD_INT 13
54467: PUSH
54468: LD_INT 14
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
54477: GO 54986
54479: LD_INT 30
54481: DOUBLE
54482: EQUAL
54483: IFTRUE 54487
54485: GO 54513
54487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54488: LD_ADDR_VAR 0 3
54492: PUSH
54493: LD_INT 11
54495: PUSH
54496: LD_INT 12
54498: PUSH
54499: LD_INT 13
54501: PUSH
54502: LD_INT 14
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
54511: GO 54986
54513: LD_INT 25
54515: DOUBLE
54516: EQUAL
54517: IFTRUE 54521
54519: GO 54539
54521: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54522: LD_ADDR_VAR 0 3
54526: PUSH
54527: LD_INT 13
54529: PUSH
54530: LD_INT 14
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: ST_TO_ADDR
54537: GO 54986
54539: LD_INT 27
54541: DOUBLE
54542: EQUAL
54543: IFTRUE 54547
54545: GO 54565
54547: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54548: LD_ADDR_VAR 0 3
54552: PUSH
54553: LD_INT 13
54555: PUSH
54556: LD_INT 14
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: ST_TO_ADDR
54563: GO 54986
54565: LD_INT 28
54567: DOUBLE
54568: EQUAL
54569: IFTRUE 54573
54571: GO 54591
54573: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54574: LD_ADDR_VAR 0 3
54578: PUSH
54579: LD_INT 13
54581: PUSH
54582: LD_INT 14
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: ST_TO_ADDR
54589: GO 54986
54591: LD_INT 29
54593: DOUBLE
54594: EQUAL
54595: IFTRUE 54599
54597: GO 54617
54599: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54600: LD_ADDR_VAR 0 3
54604: PUSH
54605: LD_INT 13
54607: PUSH
54608: LD_INT 14
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: ST_TO_ADDR
54615: GO 54986
54617: LD_INT 31
54619: DOUBLE
54620: EQUAL
54621: IFTRUE 54625
54623: GO 54643
54625: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54626: LD_ADDR_VAR 0 3
54630: PUSH
54631: LD_INT 13
54633: PUSH
54634: LD_INT 14
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: ST_TO_ADDR
54641: GO 54986
54643: LD_INT 26
54645: DOUBLE
54646: EQUAL
54647: IFTRUE 54651
54649: GO 54669
54651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54652: LD_ADDR_VAR 0 3
54656: PUSH
54657: LD_INT 13
54659: PUSH
54660: LD_INT 14
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: ST_TO_ADDR
54667: GO 54986
54669: LD_INT 42
54671: DOUBLE
54672: EQUAL
54673: IFTRUE 54677
54675: GO 54703
54677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54678: LD_ADDR_VAR 0 3
54682: PUSH
54683: LD_INT 21
54685: PUSH
54686: LD_INT 22
54688: PUSH
54689: LD_INT 23
54691: PUSH
54692: LD_INT 24
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
54701: GO 54986
54703: LD_INT 43
54705: DOUBLE
54706: EQUAL
54707: IFTRUE 54711
54709: GO 54737
54711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54712: LD_ADDR_VAR 0 3
54716: PUSH
54717: LD_INT 21
54719: PUSH
54720: LD_INT 22
54722: PUSH
54723: LD_INT 23
54725: PUSH
54726: LD_INT 24
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
54735: GO 54986
54737: LD_INT 44
54739: DOUBLE
54740: EQUAL
54741: IFTRUE 54745
54743: GO 54771
54745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54746: LD_ADDR_VAR 0 3
54750: PUSH
54751: LD_INT 21
54753: PUSH
54754: LD_INT 22
54756: PUSH
54757: LD_INT 23
54759: PUSH
54760: LD_INT 24
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
54769: GO 54986
54771: LD_INT 45
54773: DOUBLE
54774: EQUAL
54775: IFTRUE 54779
54777: GO 54805
54779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54780: LD_ADDR_VAR 0 3
54784: PUSH
54785: LD_INT 21
54787: PUSH
54788: LD_INT 22
54790: PUSH
54791: LD_INT 23
54793: PUSH
54794: LD_INT 24
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: ST_TO_ADDR
54803: GO 54986
54805: LD_INT 49
54807: DOUBLE
54808: EQUAL
54809: IFTRUE 54813
54811: GO 54839
54813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54814: LD_ADDR_VAR 0 3
54818: PUSH
54819: LD_INT 21
54821: PUSH
54822: LD_INT 22
54824: PUSH
54825: LD_INT 23
54827: PUSH
54828: LD_INT 24
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: ST_TO_ADDR
54837: GO 54986
54839: LD_INT 51
54841: DOUBLE
54842: EQUAL
54843: IFTRUE 54847
54845: GO 54873
54847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54848: LD_ADDR_VAR 0 3
54852: PUSH
54853: LD_INT 21
54855: PUSH
54856: LD_INT 22
54858: PUSH
54859: LD_INT 23
54861: PUSH
54862: LD_INT 24
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: ST_TO_ADDR
54871: GO 54986
54873: LD_INT 52
54875: DOUBLE
54876: EQUAL
54877: IFTRUE 54881
54879: GO 54907
54881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54882: LD_ADDR_VAR 0 3
54886: PUSH
54887: LD_INT 21
54889: PUSH
54890: LD_INT 22
54892: PUSH
54893: LD_INT 23
54895: PUSH
54896: LD_INT 24
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: ST_TO_ADDR
54905: GO 54986
54907: LD_INT 53
54909: DOUBLE
54910: EQUAL
54911: IFTRUE 54915
54913: GO 54933
54915: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54916: LD_ADDR_VAR 0 3
54920: PUSH
54921: LD_INT 23
54923: PUSH
54924: LD_INT 24
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: ST_TO_ADDR
54931: GO 54986
54933: LD_INT 46
54935: DOUBLE
54936: EQUAL
54937: IFTRUE 54941
54939: GO 54959
54941: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54942: LD_ADDR_VAR 0 3
54946: PUSH
54947: LD_INT 23
54949: PUSH
54950: LD_INT 24
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: ST_TO_ADDR
54957: GO 54986
54959: LD_INT 47
54961: DOUBLE
54962: EQUAL
54963: IFTRUE 54967
54965: GO 54985
54967: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54968: LD_ADDR_VAR 0 3
54972: PUSH
54973: LD_INT 23
54975: PUSH
54976: LD_INT 24
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: ST_TO_ADDR
54983: GO 54986
54985: POP
// result := ( chassis in result ) ;
54986: LD_ADDR_VAR 0 3
54990: PUSH
54991: LD_VAR 0 1
54995: PUSH
54996: LD_VAR 0 3
55000: IN
55001: ST_TO_ADDR
// end ;
55002: LD_VAR 0 3
55006: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
55007: LD_INT 0
55009: PPUSH
55010: PPUSH
55011: PPUSH
55012: PPUSH
55013: PPUSH
55014: PPUSH
55015: PPUSH
// result := array ;
55016: LD_ADDR_VAR 0 5
55020: PUSH
55021: LD_VAR 0 1
55025: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
55026: LD_VAR 0 1
55030: NOT
55031: PUSH
55032: LD_VAR 0 2
55036: NOT
55037: OR
55038: PUSH
55039: LD_VAR 0 3
55043: NOT
55044: OR
55045: PUSH
55046: LD_VAR 0 2
55050: PUSH
55051: LD_VAR 0 1
55055: GREATER
55056: OR
55057: PUSH
55058: LD_VAR 0 3
55062: PUSH
55063: LD_VAR 0 1
55067: GREATER
55068: OR
55069: IFFALSE 55073
// exit ;
55071: GO 55369
// if direction then
55073: LD_VAR 0 4
55077: IFFALSE 55141
// begin d := 1 ;
55079: LD_ADDR_VAR 0 9
55083: PUSH
55084: LD_INT 1
55086: ST_TO_ADDR
// if i_from > i_to then
55087: LD_VAR 0 2
55091: PUSH
55092: LD_VAR 0 3
55096: GREATER
55097: IFFALSE 55123
// length := ( array - i_from ) + i_to else
55099: LD_ADDR_VAR 0 11
55103: PUSH
55104: LD_VAR 0 1
55108: PUSH
55109: LD_VAR 0 2
55113: MINUS
55114: PUSH
55115: LD_VAR 0 3
55119: PLUS
55120: ST_TO_ADDR
55121: GO 55139
// length := i_to - i_from ;
55123: LD_ADDR_VAR 0 11
55127: PUSH
55128: LD_VAR 0 3
55132: PUSH
55133: LD_VAR 0 2
55137: MINUS
55138: ST_TO_ADDR
// end else
55139: GO 55202
// begin d := - 1 ;
55141: LD_ADDR_VAR 0 9
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: ST_TO_ADDR
// if i_from > i_to then
55150: LD_VAR 0 2
55154: PUSH
55155: LD_VAR 0 3
55159: GREATER
55160: IFFALSE 55180
// length := i_from - i_to else
55162: LD_ADDR_VAR 0 11
55166: PUSH
55167: LD_VAR 0 2
55171: PUSH
55172: LD_VAR 0 3
55176: MINUS
55177: ST_TO_ADDR
55178: GO 55202
// length := ( array - i_to ) + i_from ;
55180: LD_ADDR_VAR 0 11
55184: PUSH
55185: LD_VAR 0 1
55189: PUSH
55190: LD_VAR 0 3
55194: MINUS
55195: PUSH
55196: LD_VAR 0 2
55200: PLUS
55201: ST_TO_ADDR
// end ; if not length then
55202: LD_VAR 0 11
55206: NOT
55207: IFFALSE 55211
// exit ;
55209: GO 55369
// tmp := array ;
55211: LD_ADDR_VAR 0 10
55215: PUSH
55216: LD_VAR 0 1
55220: ST_TO_ADDR
// for i = 1 to length do
55221: LD_ADDR_VAR 0 6
55225: PUSH
55226: DOUBLE
55227: LD_INT 1
55229: DEC
55230: ST_TO_ADDR
55231: LD_VAR 0 11
55235: PUSH
55236: FOR_TO
55237: IFFALSE 55357
// begin for j = 1 to array do
55239: LD_ADDR_VAR 0 7
55243: PUSH
55244: DOUBLE
55245: LD_INT 1
55247: DEC
55248: ST_TO_ADDR
55249: LD_VAR 0 1
55253: PUSH
55254: FOR_TO
55255: IFFALSE 55343
// begin k := j + d ;
55257: LD_ADDR_VAR 0 8
55261: PUSH
55262: LD_VAR 0 7
55266: PUSH
55267: LD_VAR 0 9
55271: PLUS
55272: ST_TO_ADDR
// if k > array then
55273: LD_VAR 0 8
55277: PUSH
55278: LD_VAR 0 1
55282: GREATER
55283: IFFALSE 55293
// k := 1 ;
55285: LD_ADDR_VAR 0 8
55289: PUSH
55290: LD_INT 1
55292: ST_TO_ADDR
// if not k then
55293: LD_VAR 0 8
55297: NOT
55298: IFFALSE 55310
// k := array ;
55300: LD_ADDR_VAR 0 8
55304: PUSH
55305: LD_VAR 0 1
55309: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
55310: LD_ADDR_VAR 0 10
55314: PUSH
55315: LD_VAR 0 10
55319: PPUSH
55320: LD_VAR 0 8
55324: PPUSH
55325: LD_VAR 0 1
55329: PUSH
55330: LD_VAR 0 7
55334: ARRAY
55335: PPUSH
55336: CALL_OW 1
55340: ST_TO_ADDR
// end ;
55341: GO 55254
55343: POP
55344: POP
// array := tmp ;
55345: LD_ADDR_VAR 0 1
55349: PUSH
55350: LD_VAR 0 10
55354: ST_TO_ADDR
// end ;
55355: GO 55236
55357: POP
55358: POP
// result := array ;
55359: LD_ADDR_VAR 0 5
55363: PUSH
55364: LD_VAR 0 1
55368: ST_TO_ADDR
// end ;
55369: LD_VAR 0 5
55373: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
55374: LD_INT 0
55376: PPUSH
55377: PPUSH
// result := 0 ;
55378: LD_ADDR_VAR 0 3
55382: PUSH
55383: LD_INT 0
55385: ST_TO_ADDR
// if not array or not value in array then
55386: LD_VAR 0 1
55390: NOT
55391: PUSH
55392: LD_VAR 0 2
55396: PUSH
55397: LD_VAR 0 1
55401: IN
55402: NOT
55403: OR
55404: IFFALSE 55408
// exit ;
55406: GO 55462
// for i = 1 to array do
55408: LD_ADDR_VAR 0 4
55412: PUSH
55413: DOUBLE
55414: LD_INT 1
55416: DEC
55417: ST_TO_ADDR
55418: LD_VAR 0 1
55422: PUSH
55423: FOR_TO
55424: IFFALSE 55460
// if value = array [ i ] then
55426: LD_VAR 0 2
55430: PUSH
55431: LD_VAR 0 1
55435: PUSH
55436: LD_VAR 0 4
55440: ARRAY
55441: EQUAL
55442: IFFALSE 55458
// begin result := i ;
55444: LD_ADDR_VAR 0 3
55448: PUSH
55449: LD_VAR 0 4
55453: ST_TO_ADDR
// exit ;
55454: POP
55455: POP
55456: GO 55462
// end ;
55458: GO 55423
55460: POP
55461: POP
// end ;
55462: LD_VAR 0 3
55466: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55467: LD_INT 0
55469: PPUSH
// vc_chassis := chassis ;
55470: LD_ADDR_OWVAR 37
55474: PUSH
55475: LD_VAR 0 1
55479: ST_TO_ADDR
// vc_engine := engine ;
55480: LD_ADDR_OWVAR 39
55484: PUSH
55485: LD_VAR 0 2
55489: ST_TO_ADDR
// vc_control := control ;
55490: LD_ADDR_OWVAR 38
55494: PUSH
55495: LD_VAR 0 3
55499: ST_TO_ADDR
// vc_weapon := weapon ;
55500: LD_ADDR_OWVAR 40
55504: PUSH
55505: LD_VAR 0 4
55509: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55510: LD_ADDR_OWVAR 41
55514: PUSH
55515: LD_VAR 0 5
55519: ST_TO_ADDR
// end ;
55520: LD_VAR 0 6
55524: RET
// export function WantPlant ( unit ) ; var task ; begin
55525: LD_INT 0
55527: PPUSH
55528: PPUSH
// result := false ;
55529: LD_ADDR_VAR 0 2
55533: PUSH
55534: LD_INT 0
55536: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55537: LD_ADDR_VAR 0 3
55541: PUSH
55542: LD_VAR 0 1
55546: PPUSH
55547: CALL_OW 437
55551: ST_TO_ADDR
// if task then
55552: LD_VAR 0 3
55556: IFFALSE 55584
// if task [ 1 ] [ 1 ] = p then
55558: LD_VAR 0 3
55562: PUSH
55563: LD_INT 1
55565: ARRAY
55566: PUSH
55567: LD_INT 1
55569: ARRAY
55570: PUSH
55571: LD_STRING p
55573: EQUAL
55574: IFFALSE 55584
// result := true ;
55576: LD_ADDR_VAR 0 2
55580: PUSH
55581: LD_INT 1
55583: ST_TO_ADDR
// end ;
55584: LD_VAR 0 2
55588: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55589: LD_INT 0
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
// if pos < 1 then
55595: LD_VAR 0 2
55599: PUSH
55600: LD_INT 1
55602: LESS
55603: IFFALSE 55607
// exit ;
55605: GO 55910
// if pos = 1 then
55607: LD_VAR 0 2
55611: PUSH
55612: LD_INT 1
55614: EQUAL
55615: IFFALSE 55648
// result := Replace ( arr , pos [ 1 ] , value ) else
55617: LD_ADDR_VAR 0 4
55621: PUSH
55622: LD_VAR 0 1
55626: PPUSH
55627: LD_VAR 0 2
55631: PUSH
55632: LD_INT 1
55634: ARRAY
55635: PPUSH
55636: LD_VAR 0 3
55640: PPUSH
55641: CALL_OW 1
55645: ST_TO_ADDR
55646: GO 55910
// begin tmp := arr ;
55648: LD_ADDR_VAR 0 6
55652: PUSH
55653: LD_VAR 0 1
55657: ST_TO_ADDR
// s_arr := [ tmp ] ;
55658: LD_ADDR_VAR 0 7
55662: PUSH
55663: LD_VAR 0 6
55667: PUSH
55668: EMPTY
55669: LIST
55670: ST_TO_ADDR
// for i = 1 to pos - 1 do
55671: LD_ADDR_VAR 0 5
55675: PUSH
55676: DOUBLE
55677: LD_INT 1
55679: DEC
55680: ST_TO_ADDR
55681: LD_VAR 0 2
55685: PUSH
55686: LD_INT 1
55688: MINUS
55689: PUSH
55690: FOR_TO
55691: IFFALSE 55736
// begin tmp := tmp [ pos [ i ] ] ;
55693: LD_ADDR_VAR 0 6
55697: PUSH
55698: LD_VAR 0 6
55702: PUSH
55703: LD_VAR 0 2
55707: PUSH
55708: LD_VAR 0 5
55712: ARRAY
55713: ARRAY
55714: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55715: LD_ADDR_VAR 0 7
55719: PUSH
55720: LD_VAR 0 7
55724: PUSH
55725: LD_VAR 0 6
55729: PUSH
55730: EMPTY
55731: LIST
55732: ADD
55733: ST_TO_ADDR
// end ;
55734: GO 55690
55736: POP
55737: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55738: LD_ADDR_VAR 0 6
55742: PUSH
55743: LD_VAR 0 6
55747: PPUSH
55748: LD_VAR 0 2
55752: PUSH
55753: LD_VAR 0 2
55757: ARRAY
55758: PPUSH
55759: LD_VAR 0 3
55763: PPUSH
55764: CALL_OW 1
55768: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55769: LD_ADDR_VAR 0 7
55773: PUSH
55774: LD_VAR 0 7
55778: PPUSH
55779: LD_VAR 0 7
55783: PPUSH
55784: LD_VAR 0 6
55788: PPUSH
55789: CALL_OW 1
55793: ST_TO_ADDR
// for i = s_arr downto 2 do
55794: LD_ADDR_VAR 0 5
55798: PUSH
55799: DOUBLE
55800: LD_VAR 0 7
55804: INC
55805: ST_TO_ADDR
55806: LD_INT 2
55808: PUSH
55809: FOR_DOWNTO
55810: IFFALSE 55894
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55812: LD_ADDR_VAR 0 6
55816: PUSH
55817: LD_VAR 0 7
55821: PUSH
55822: LD_VAR 0 5
55826: PUSH
55827: LD_INT 1
55829: MINUS
55830: ARRAY
55831: PPUSH
55832: LD_VAR 0 2
55836: PUSH
55837: LD_VAR 0 5
55841: PUSH
55842: LD_INT 1
55844: MINUS
55845: ARRAY
55846: PPUSH
55847: LD_VAR 0 7
55851: PUSH
55852: LD_VAR 0 5
55856: ARRAY
55857: PPUSH
55858: CALL_OW 1
55862: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55863: LD_ADDR_VAR 0 7
55867: PUSH
55868: LD_VAR 0 7
55872: PPUSH
55873: LD_VAR 0 5
55877: PUSH
55878: LD_INT 1
55880: MINUS
55881: PPUSH
55882: LD_VAR 0 6
55886: PPUSH
55887: CALL_OW 1
55891: ST_TO_ADDR
// end ;
55892: GO 55809
55894: POP
55895: POP
// result := s_arr [ 1 ] ;
55896: LD_ADDR_VAR 0 4
55900: PUSH
55901: LD_VAR 0 7
55905: PUSH
55906: LD_INT 1
55908: ARRAY
55909: ST_TO_ADDR
// end ; end ;
55910: LD_VAR 0 4
55914: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55915: LD_INT 0
55917: PPUSH
55918: PPUSH
// if not list then
55919: LD_VAR 0 1
55923: NOT
55924: IFFALSE 55928
// exit ;
55926: GO 56019
// i := list [ pos1 ] ;
55928: LD_ADDR_VAR 0 5
55932: PUSH
55933: LD_VAR 0 1
55937: PUSH
55938: LD_VAR 0 2
55942: ARRAY
55943: ST_TO_ADDR
// if not i then
55944: LD_VAR 0 5
55948: NOT
55949: IFFALSE 55953
// exit ;
55951: GO 56019
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55953: LD_ADDR_VAR 0 1
55957: PUSH
55958: LD_VAR 0 1
55962: PPUSH
55963: LD_VAR 0 2
55967: PPUSH
55968: LD_VAR 0 1
55972: PUSH
55973: LD_VAR 0 3
55977: ARRAY
55978: PPUSH
55979: CALL_OW 1
55983: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55984: LD_ADDR_VAR 0 1
55988: PUSH
55989: LD_VAR 0 1
55993: PPUSH
55994: LD_VAR 0 3
55998: PPUSH
55999: LD_VAR 0 5
56003: PPUSH
56004: CALL_OW 1
56008: ST_TO_ADDR
// result := list ;
56009: LD_ADDR_VAR 0 4
56013: PUSH
56014: LD_VAR 0 1
56018: ST_TO_ADDR
// end ;
56019: LD_VAR 0 4
56023: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
56024: LD_INT 0
56026: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
56027: LD_ADDR_VAR 0 5
56031: PUSH
56032: LD_VAR 0 1
56036: PPUSH
56037: CALL_OW 250
56041: PPUSH
56042: LD_VAR 0 1
56046: PPUSH
56047: CALL_OW 251
56051: PPUSH
56052: LD_VAR 0 2
56056: PPUSH
56057: LD_VAR 0 3
56061: PPUSH
56062: LD_VAR 0 4
56066: PPUSH
56067: CALL 56077 0 5
56071: ST_TO_ADDR
// end ;
56072: LD_VAR 0 5
56076: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
56077: LD_INT 0
56079: PPUSH
56080: PPUSH
56081: PPUSH
56082: PPUSH
// if not list then
56083: LD_VAR 0 3
56087: NOT
56088: IFFALSE 56092
// exit ;
56090: GO 56480
// result := [ ] ;
56092: LD_ADDR_VAR 0 6
56096: PUSH
56097: EMPTY
56098: ST_TO_ADDR
// for i in list do
56099: LD_ADDR_VAR 0 7
56103: PUSH
56104: LD_VAR 0 3
56108: PUSH
56109: FOR_IN
56110: IFFALSE 56312
// begin tmp := GetDistUnitXY ( i , x , y ) ;
56112: LD_ADDR_VAR 0 9
56116: PUSH
56117: LD_VAR 0 7
56121: PPUSH
56122: LD_VAR 0 1
56126: PPUSH
56127: LD_VAR 0 2
56131: PPUSH
56132: CALL_OW 297
56136: ST_TO_ADDR
// if not result then
56137: LD_VAR 0 6
56141: NOT
56142: IFFALSE 56168
// result := [ [ i , tmp ] ] else
56144: LD_ADDR_VAR 0 6
56148: PUSH
56149: LD_VAR 0 7
56153: PUSH
56154: LD_VAR 0 9
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: ST_TO_ADDR
56166: GO 56310
// begin if result [ result ] [ 2 ] < tmp then
56168: LD_VAR 0 6
56172: PUSH
56173: LD_VAR 0 6
56177: ARRAY
56178: PUSH
56179: LD_INT 2
56181: ARRAY
56182: PUSH
56183: LD_VAR 0 9
56187: LESS
56188: IFFALSE 56230
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
56190: LD_ADDR_VAR 0 6
56194: PUSH
56195: LD_VAR 0 6
56199: PPUSH
56200: LD_VAR 0 6
56204: PUSH
56205: LD_INT 1
56207: PLUS
56208: PPUSH
56209: LD_VAR 0 7
56213: PUSH
56214: LD_VAR 0 9
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PPUSH
56223: CALL_OW 2
56227: ST_TO_ADDR
56228: GO 56310
// for j = 1 to result do
56230: LD_ADDR_VAR 0 8
56234: PUSH
56235: DOUBLE
56236: LD_INT 1
56238: DEC
56239: ST_TO_ADDR
56240: LD_VAR 0 6
56244: PUSH
56245: FOR_TO
56246: IFFALSE 56308
// begin if tmp < result [ j ] [ 2 ] then
56248: LD_VAR 0 9
56252: PUSH
56253: LD_VAR 0 6
56257: PUSH
56258: LD_VAR 0 8
56262: ARRAY
56263: PUSH
56264: LD_INT 2
56266: ARRAY
56267: LESS
56268: IFFALSE 56306
// begin result := Insert ( result , j , [ i , tmp ] ) ;
56270: LD_ADDR_VAR 0 6
56274: PUSH
56275: LD_VAR 0 6
56279: PPUSH
56280: LD_VAR 0 8
56284: PPUSH
56285: LD_VAR 0 7
56289: PUSH
56290: LD_VAR 0 9
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PPUSH
56299: CALL_OW 2
56303: ST_TO_ADDR
// break ;
56304: GO 56308
// end ; end ;
56306: GO 56245
56308: POP
56309: POP
// end ; end ;
56310: GO 56109
56312: POP
56313: POP
// if result and not asc then
56314: LD_VAR 0 6
56318: PUSH
56319: LD_VAR 0 4
56323: NOT
56324: AND
56325: IFFALSE 56400
// begin tmp := result ;
56327: LD_ADDR_VAR 0 9
56331: PUSH
56332: LD_VAR 0 6
56336: ST_TO_ADDR
// for i = tmp downto 1 do
56337: LD_ADDR_VAR 0 7
56341: PUSH
56342: DOUBLE
56343: LD_VAR 0 9
56347: INC
56348: ST_TO_ADDR
56349: LD_INT 1
56351: PUSH
56352: FOR_DOWNTO
56353: IFFALSE 56398
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
56355: LD_ADDR_VAR 0 6
56359: PUSH
56360: LD_VAR 0 6
56364: PPUSH
56365: LD_VAR 0 9
56369: PUSH
56370: LD_VAR 0 7
56374: MINUS
56375: PUSH
56376: LD_INT 1
56378: PLUS
56379: PPUSH
56380: LD_VAR 0 9
56384: PUSH
56385: LD_VAR 0 7
56389: ARRAY
56390: PPUSH
56391: CALL_OW 1
56395: ST_TO_ADDR
56396: GO 56352
56398: POP
56399: POP
// end ; tmp := [ ] ;
56400: LD_ADDR_VAR 0 9
56404: PUSH
56405: EMPTY
56406: ST_TO_ADDR
// if mode then
56407: LD_VAR 0 5
56411: IFFALSE 56480
// begin for i = 1 to result do
56413: LD_ADDR_VAR 0 7
56417: PUSH
56418: DOUBLE
56419: LD_INT 1
56421: DEC
56422: ST_TO_ADDR
56423: LD_VAR 0 6
56427: PUSH
56428: FOR_TO
56429: IFFALSE 56468
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56431: LD_ADDR_VAR 0 9
56435: PUSH
56436: LD_VAR 0 9
56440: PPUSH
56441: LD_VAR 0 7
56445: PPUSH
56446: LD_VAR 0 6
56450: PUSH
56451: LD_VAR 0 7
56455: ARRAY
56456: PUSH
56457: LD_INT 1
56459: ARRAY
56460: PPUSH
56461: CALL_OW 1
56465: ST_TO_ADDR
56466: GO 56428
56468: POP
56469: POP
// result := tmp ;
56470: LD_ADDR_VAR 0 6
56474: PUSH
56475: LD_VAR 0 9
56479: ST_TO_ADDR
// end ; end ;
56480: LD_VAR 0 6
56484: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56485: LD_INT 0
56487: PPUSH
56488: PPUSH
56489: PPUSH
56490: PPUSH
56491: PPUSH
56492: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56493: LD_ADDR_VAR 0 5
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: ST_TO_ADDR
// if not x or not y then
56515: LD_VAR 0 2
56519: NOT
56520: PUSH
56521: LD_VAR 0 3
56525: NOT
56526: OR
56527: IFFALSE 56531
// exit ;
56529: GO 58177
// if not range then
56531: LD_VAR 0 4
56535: NOT
56536: IFFALSE 56546
// range := 10 ;
56538: LD_ADDR_VAR 0 4
56542: PUSH
56543: LD_INT 10
56545: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56546: LD_ADDR_VAR 0 8
56550: PUSH
56551: LD_INT 81
56553: PUSH
56554: LD_VAR 0 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 92
56565: PUSH
56566: LD_VAR 0 2
56570: PUSH
56571: LD_VAR 0 3
56575: PUSH
56576: LD_VAR 0 4
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 3
56589: PUSH
56590: LD_INT 21
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: PPUSH
56609: CALL_OW 69
56613: ST_TO_ADDR
// if not tmp then
56614: LD_VAR 0 8
56618: NOT
56619: IFFALSE 56623
// exit ;
56621: GO 58177
// for i in tmp do
56623: LD_ADDR_VAR 0 6
56627: PUSH
56628: LD_VAR 0 8
56632: PUSH
56633: FOR_IN
56634: IFFALSE 58152
// begin points := [ 0 , 0 , 0 ] ;
56636: LD_ADDR_VAR 0 9
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// bpoints := 1 ;
56655: LD_ADDR_VAR 0 10
56659: PUSH
56660: LD_INT 1
56662: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56663: LD_VAR 0 6
56667: PPUSH
56668: CALL_OW 247
56672: PUSH
56673: LD_INT 1
56675: DOUBLE
56676: EQUAL
56677: IFTRUE 56681
56679: GO 57259
56681: POP
// begin if GetClass ( i ) = 1 then
56682: LD_VAR 0 6
56686: PPUSH
56687: CALL_OW 257
56691: PUSH
56692: LD_INT 1
56694: EQUAL
56695: IFFALSE 56716
// points := [ 10 , 5 , 3 ] ;
56697: LD_ADDR_VAR 0 9
56701: PUSH
56702: LD_INT 10
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56716: LD_VAR 0 6
56720: PPUSH
56721: CALL_OW 257
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: LD_INT 4
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: IN
56740: IFFALSE 56761
// points := [ 3 , 2 , 1 ] ;
56742: LD_ADDR_VAR 0 9
56746: PUSH
56747: LD_INT 3
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56761: LD_VAR 0 6
56765: PPUSH
56766: CALL_OW 257
56770: PUSH
56771: LD_INT 5
56773: EQUAL
56774: IFFALSE 56795
// points := [ 130 , 5 , 2 ] ;
56776: LD_ADDR_VAR 0 9
56780: PUSH
56781: LD_INT 130
56783: PUSH
56784: LD_INT 5
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56795: LD_VAR 0 6
56799: PPUSH
56800: CALL_OW 257
56804: PUSH
56805: LD_INT 8
56807: EQUAL
56808: IFFALSE 56829
// points := [ 35 , 35 , 30 ] ;
56810: LD_ADDR_VAR 0 9
56814: PUSH
56815: LD_INT 35
56817: PUSH
56818: LD_INT 35
56820: PUSH
56821: LD_INT 30
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: LIST
56828: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56829: LD_VAR 0 6
56833: PPUSH
56834: CALL_OW 257
56838: PUSH
56839: LD_INT 9
56841: EQUAL
56842: IFFALSE 56863
// points := [ 20 , 55 , 40 ] ;
56844: LD_ADDR_VAR 0 9
56848: PUSH
56849: LD_INT 20
56851: PUSH
56852: LD_INT 55
56854: PUSH
56855: LD_INT 40
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56863: LD_VAR 0 6
56867: PPUSH
56868: CALL_OW 257
56872: PUSH
56873: LD_INT 12
56875: PUSH
56876: LD_INT 16
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: IN
56883: IFFALSE 56904
// points := [ 5 , 3 , 2 ] ;
56885: LD_ADDR_VAR 0 9
56889: PUSH
56890: LD_INT 5
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56904: LD_VAR 0 6
56908: PPUSH
56909: CALL_OW 257
56913: PUSH
56914: LD_INT 17
56916: EQUAL
56917: IFFALSE 56938
// points := [ 100 , 50 , 75 ] ;
56919: LD_ADDR_VAR 0 9
56923: PUSH
56924: LD_INT 100
56926: PUSH
56927: LD_INT 50
56929: PUSH
56930: LD_INT 75
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56938: LD_VAR 0 6
56942: PPUSH
56943: CALL_OW 257
56947: PUSH
56948: LD_INT 15
56950: EQUAL
56951: IFFALSE 56972
// points := [ 10 , 5 , 3 ] ;
56953: LD_ADDR_VAR 0 9
56957: PUSH
56958: LD_INT 10
56960: PUSH
56961: LD_INT 5
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56972: LD_VAR 0 6
56976: PPUSH
56977: CALL_OW 257
56981: PUSH
56982: LD_INT 14
56984: EQUAL
56985: IFFALSE 57006
// points := [ 10 , 0 , 0 ] ;
56987: LD_ADDR_VAR 0 9
56991: PUSH
56992: LD_INT 10
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// if GetClass ( i ) = 11 then
57006: LD_VAR 0 6
57010: PPUSH
57011: CALL_OW 257
57015: PUSH
57016: LD_INT 11
57018: EQUAL
57019: IFFALSE 57040
// points := [ 30 , 10 , 5 ] ;
57021: LD_ADDR_VAR 0 9
57025: PUSH
57026: LD_INT 30
57028: PUSH
57029: LD_INT 10
57031: PUSH
57032: LD_INT 5
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: LIST
57039: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
57040: LD_VAR 0 1
57044: PPUSH
57045: LD_INT 5
57047: PPUSH
57048: CALL_OW 321
57052: PUSH
57053: LD_INT 2
57055: EQUAL
57056: IFFALSE 57073
// bpoints := bpoints * 1.8 ;
57058: LD_ADDR_VAR 0 10
57062: PUSH
57063: LD_VAR 0 10
57067: PUSH
57068: LD_REAL  1.80000000000000E+0000
57071: MUL
57072: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
57073: LD_VAR 0 6
57077: PPUSH
57078: CALL_OW 257
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: LD_INT 4
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: IN
57101: PUSH
57102: LD_VAR 0 1
57106: PPUSH
57107: LD_INT 51
57109: PPUSH
57110: CALL_OW 321
57114: PUSH
57115: LD_INT 2
57117: EQUAL
57118: AND
57119: IFFALSE 57136
// bpoints := bpoints * 1.2 ;
57121: LD_ADDR_VAR 0 10
57125: PUSH
57126: LD_VAR 0 10
57130: PUSH
57131: LD_REAL  1.20000000000000E+0000
57134: MUL
57135: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
57136: LD_VAR 0 6
57140: PPUSH
57141: CALL_OW 257
57145: PUSH
57146: LD_INT 5
57148: PUSH
57149: LD_INT 7
57151: PUSH
57152: LD_INT 9
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: IN
57160: PUSH
57161: LD_VAR 0 1
57165: PPUSH
57166: LD_INT 52
57168: PPUSH
57169: CALL_OW 321
57173: PUSH
57174: LD_INT 2
57176: EQUAL
57177: AND
57178: IFFALSE 57195
// bpoints := bpoints * 1.5 ;
57180: LD_ADDR_VAR 0 10
57184: PUSH
57185: LD_VAR 0 10
57189: PUSH
57190: LD_REAL  1.50000000000000E+0000
57193: MUL
57194: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
57195: LD_VAR 0 1
57199: PPUSH
57200: LD_INT 66
57202: PPUSH
57203: CALL_OW 321
57207: PUSH
57208: LD_INT 2
57210: EQUAL
57211: IFFALSE 57228
// bpoints := bpoints * 1.1 ;
57213: LD_ADDR_VAR 0 10
57217: PUSH
57218: LD_VAR 0 10
57222: PUSH
57223: LD_REAL  1.10000000000000E+0000
57226: MUL
57227: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
57228: LD_ADDR_VAR 0 10
57232: PUSH
57233: LD_VAR 0 10
57237: PUSH
57238: LD_VAR 0 6
57242: PPUSH
57243: LD_INT 1
57245: PPUSH
57246: CALL_OW 259
57250: PUSH
57251: LD_REAL  1.15000000000000E+0000
57254: MUL
57255: MUL
57256: ST_TO_ADDR
// end ; unit_vehicle :
57257: GO 58081
57259: LD_INT 2
57261: DOUBLE
57262: EQUAL
57263: IFTRUE 57267
57265: GO 58069
57267: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
57268: LD_VAR 0 6
57272: PPUSH
57273: CALL_OW 264
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: LD_INT 42
57283: PUSH
57284: LD_INT 24
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: IN
57292: IFFALSE 57313
// points := [ 25 , 5 , 3 ] ;
57294: LD_ADDR_VAR 0 9
57298: PUSH
57299: LD_INT 25
57301: PUSH
57302: LD_INT 5
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
57313: LD_VAR 0 6
57317: PPUSH
57318: CALL_OW 264
57322: PUSH
57323: LD_INT 4
57325: PUSH
57326: LD_INT 43
57328: PUSH
57329: LD_INT 25
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: IN
57337: IFFALSE 57358
// points := [ 40 , 15 , 5 ] ;
57339: LD_ADDR_VAR 0 9
57343: PUSH
57344: LD_INT 40
57346: PUSH
57347: LD_INT 15
57349: PUSH
57350: LD_INT 5
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
57358: LD_VAR 0 6
57362: PPUSH
57363: CALL_OW 264
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: LD_INT 23
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: IN
57378: IFFALSE 57399
// points := [ 7 , 25 , 8 ] ;
57380: LD_ADDR_VAR 0 9
57384: PUSH
57385: LD_INT 7
57387: PUSH
57388: LD_INT 25
57390: PUSH
57391: LD_INT 8
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
57399: LD_VAR 0 6
57403: PPUSH
57404: CALL_OW 264
57408: PUSH
57409: LD_INT 5
57411: PUSH
57412: LD_INT 27
57414: PUSH
57415: LD_INT 44
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: IN
57423: IFFALSE 57444
// points := [ 14 , 50 , 16 ] ;
57425: LD_ADDR_VAR 0 9
57429: PUSH
57430: LD_INT 14
57432: PUSH
57433: LD_INT 50
57435: PUSH
57436: LD_INT 16
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57444: LD_VAR 0 6
57448: PPUSH
57449: CALL_OW 264
57453: PUSH
57454: LD_INT 6
57456: PUSH
57457: LD_INT 46
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: IN
57464: IFFALSE 57485
// points := [ 32 , 120 , 70 ] ;
57466: LD_ADDR_VAR 0 9
57470: PUSH
57471: LD_INT 32
57473: PUSH
57474: LD_INT 120
57476: PUSH
57477: LD_INT 70
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
57485: LD_VAR 0 6
57489: PPUSH
57490: CALL_OW 264
57494: PUSH
57495: LD_INT 7
57497: PUSH
57498: LD_INT 28
57500: PUSH
57501: LD_INT 45
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: IN
57509: IFFALSE 57530
// points := [ 35 , 20 , 45 ] ;
57511: LD_ADDR_VAR 0 9
57515: PUSH
57516: LD_INT 35
57518: PUSH
57519: LD_INT 20
57521: PUSH
57522: LD_INT 45
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57530: LD_VAR 0 6
57534: PPUSH
57535: CALL_OW 264
57539: PUSH
57540: LD_INT 47
57542: PUSH
57543: EMPTY
57544: LIST
57545: IN
57546: IFFALSE 57567
// points := [ 67 , 45 , 75 ] ;
57548: LD_ADDR_VAR 0 9
57552: PUSH
57553: LD_INT 67
57555: PUSH
57556: LD_INT 45
57558: PUSH
57559: LD_INT 75
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: LIST
57566: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57567: LD_VAR 0 6
57571: PPUSH
57572: CALL_OW 264
57576: PUSH
57577: LD_INT 26
57579: PUSH
57580: EMPTY
57581: LIST
57582: IN
57583: IFFALSE 57604
// points := [ 120 , 30 , 80 ] ;
57585: LD_ADDR_VAR 0 9
57589: PUSH
57590: LD_INT 120
57592: PUSH
57593: LD_INT 30
57595: PUSH
57596: LD_INT 80
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57604: LD_VAR 0 6
57608: PPUSH
57609: CALL_OW 264
57613: PUSH
57614: LD_INT 22
57616: PUSH
57617: EMPTY
57618: LIST
57619: IN
57620: IFFALSE 57641
// points := [ 40 , 1 , 1 ] ;
57622: LD_ADDR_VAR 0 9
57626: PUSH
57627: LD_INT 40
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57641: LD_VAR 0 6
57645: PPUSH
57646: CALL_OW 264
57650: PUSH
57651: LD_INT 29
57653: PUSH
57654: EMPTY
57655: LIST
57656: IN
57657: IFFALSE 57678
// points := [ 70 , 200 , 400 ] ;
57659: LD_ADDR_VAR 0 9
57663: PUSH
57664: LD_INT 70
57666: PUSH
57667: LD_INT 200
57669: PUSH
57670: LD_INT 400
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57678: LD_VAR 0 6
57682: PPUSH
57683: CALL_OW 264
57687: PUSH
57688: LD_INT 14
57690: PUSH
57691: LD_INT 53
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: IN
57698: IFFALSE 57719
// points := [ 40 , 10 , 20 ] ;
57700: LD_ADDR_VAR 0 9
57704: PUSH
57705: LD_INT 40
57707: PUSH
57708: LD_INT 10
57710: PUSH
57711: LD_INT 20
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57719: LD_VAR 0 6
57723: PPUSH
57724: CALL_OW 264
57728: PUSH
57729: LD_INT 9
57731: PUSH
57732: EMPTY
57733: LIST
57734: IN
57735: IFFALSE 57756
// points := [ 5 , 70 , 20 ] ;
57737: LD_ADDR_VAR 0 9
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: LD_INT 70
57747: PUSH
57748: LD_INT 20
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57756: LD_VAR 0 6
57760: PPUSH
57761: CALL_OW 264
57765: PUSH
57766: LD_INT 10
57768: PUSH
57769: EMPTY
57770: LIST
57771: IN
57772: IFFALSE 57793
// points := [ 35 , 110 , 70 ] ;
57774: LD_ADDR_VAR 0 9
57778: PUSH
57779: LD_INT 35
57781: PUSH
57782: LD_INT 110
57784: PUSH
57785: LD_INT 70
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: LIST
57792: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57793: LD_VAR 0 6
57797: PPUSH
57798: CALL_OW 265
57802: PUSH
57803: LD_INT 25
57805: EQUAL
57806: IFFALSE 57827
// points := [ 80 , 65 , 100 ] ;
57808: LD_ADDR_VAR 0 9
57812: PUSH
57813: LD_INT 80
57815: PUSH
57816: LD_INT 65
57818: PUSH
57819: LD_INT 100
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57827: LD_VAR 0 6
57831: PPUSH
57832: CALL_OW 263
57836: PUSH
57837: LD_INT 1
57839: EQUAL
57840: IFFALSE 57875
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57842: LD_ADDR_VAR 0 10
57846: PUSH
57847: LD_VAR 0 10
57851: PUSH
57852: LD_VAR 0 6
57856: PPUSH
57857: CALL_OW 311
57861: PPUSH
57862: LD_INT 3
57864: PPUSH
57865: CALL_OW 259
57869: PUSH
57870: LD_INT 4
57872: MUL
57873: MUL
57874: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57875: LD_VAR 0 6
57879: PPUSH
57880: CALL_OW 263
57884: PUSH
57885: LD_INT 2
57887: EQUAL
57888: IFFALSE 57939
// begin j := IsControledBy ( i ) ;
57890: LD_ADDR_VAR 0 7
57894: PUSH
57895: LD_VAR 0 6
57899: PPUSH
57900: CALL_OW 312
57904: ST_TO_ADDR
// if j then
57905: LD_VAR 0 7
57909: IFFALSE 57939
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57911: LD_ADDR_VAR 0 10
57915: PUSH
57916: LD_VAR 0 10
57920: PUSH
57921: LD_VAR 0 7
57925: PPUSH
57926: LD_INT 3
57928: PPUSH
57929: CALL_OW 259
57933: PUSH
57934: LD_INT 3
57936: MUL
57937: MUL
57938: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57939: LD_VAR 0 6
57943: PPUSH
57944: CALL_OW 264
57948: PUSH
57949: LD_INT 5
57951: PUSH
57952: LD_INT 6
57954: PUSH
57955: LD_INT 46
57957: PUSH
57958: LD_INT 44
57960: PUSH
57961: LD_INT 47
57963: PUSH
57964: LD_INT 45
57966: PUSH
57967: LD_INT 28
57969: PUSH
57970: LD_INT 7
57972: PUSH
57973: LD_INT 27
57975: PUSH
57976: LD_INT 29
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: IN
57991: PUSH
57992: LD_VAR 0 1
57996: PPUSH
57997: LD_INT 52
57999: PPUSH
58000: CALL_OW 321
58004: PUSH
58005: LD_INT 2
58007: EQUAL
58008: AND
58009: IFFALSE 58026
// bpoints := bpoints * 1.2 ;
58011: LD_ADDR_VAR 0 10
58015: PUSH
58016: LD_VAR 0 10
58020: PUSH
58021: LD_REAL  1.20000000000000E+0000
58024: MUL
58025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
58026: LD_VAR 0 6
58030: PPUSH
58031: CALL_OW 264
58035: PUSH
58036: LD_INT 6
58038: PUSH
58039: LD_INT 46
58041: PUSH
58042: LD_INT 47
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: IN
58050: IFFALSE 58067
// bpoints := bpoints * 1.2 ;
58052: LD_ADDR_VAR 0 10
58056: PUSH
58057: LD_VAR 0 10
58061: PUSH
58062: LD_REAL  1.20000000000000E+0000
58065: MUL
58066: ST_TO_ADDR
// end ; unit_building :
58067: GO 58081
58069: LD_INT 3
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58077
58075: GO 58080
58077: POP
// ; end ;
58078: GO 58081
58080: POP
// for j = 1 to 3 do
58081: LD_ADDR_VAR 0 7
58085: PUSH
58086: DOUBLE
58087: LD_INT 1
58089: DEC
58090: ST_TO_ADDR
58091: LD_INT 3
58093: PUSH
58094: FOR_TO
58095: IFFALSE 58148
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
58097: LD_ADDR_VAR 0 5
58101: PUSH
58102: LD_VAR 0 5
58106: PPUSH
58107: LD_VAR 0 7
58111: PPUSH
58112: LD_VAR 0 5
58116: PUSH
58117: LD_VAR 0 7
58121: ARRAY
58122: PUSH
58123: LD_VAR 0 9
58127: PUSH
58128: LD_VAR 0 7
58132: ARRAY
58133: PUSH
58134: LD_VAR 0 10
58138: MUL
58139: PLUS
58140: PPUSH
58141: CALL_OW 1
58145: ST_TO_ADDR
58146: GO 58094
58148: POP
58149: POP
// end ;
58150: GO 56633
58152: POP
58153: POP
// result := Replace ( result , 4 , tmp ) ;
58154: LD_ADDR_VAR 0 5
58158: PUSH
58159: LD_VAR 0 5
58163: PPUSH
58164: LD_INT 4
58166: PPUSH
58167: LD_VAR 0 8
58171: PPUSH
58172: CALL_OW 1
58176: ST_TO_ADDR
// end ;
58177: LD_VAR 0 5
58181: RET
// export function DangerAtRange ( unit , range ) ; begin
58182: LD_INT 0
58184: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
58185: LD_ADDR_VAR 0 3
58189: PUSH
58190: LD_VAR 0 1
58194: PPUSH
58195: CALL_OW 255
58199: PPUSH
58200: LD_VAR 0 1
58204: PPUSH
58205: CALL_OW 250
58209: PPUSH
58210: LD_VAR 0 1
58214: PPUSH
58215: CALL_OW 251
58219: PPUSH
58220: LD_VAR 0 2
58224: PPUSH
58225: CALL 56485 0 4
58229: ST_TO_ADDR
// end ;
58230: LD_VAR 0 3
58234: RET
// export function DangerInArea ( side , area ) ; begin
58235: LD_INT 0
58237: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
58238: LD_ADDR_VAR 0 3
58242: PUSH
58243: LD_VAR 0 2
58247: PPUSH
58248: LD_INT 81
58250: PUSH
58251: LD_VAR 0 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PPUSH
58260: CALL_OW 70
58264: ST_TO_ADDR
// end ;
58265: LD_VAR 0 3
58269: RET
// export function IsExtension ( b ) ; begin
58270: LD_INT 0
58272: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
58273: LD_ADDR_VAR 0 2
58277: PUSH
58278: LD_VAR 0 1
58282: PUSH
58283: LD_INT 23
58285: PUSH
58286: LD_INT 20
58288: PUSH
58289: LD_INT 22
58291: PUSH
58292: LD_INT 17
58294: PUSH
58295: LD_INT 24
58297: PUSH
58298: LD_INT 21
58300: PUSH
58301: LD_INT 19
58303: PUSH
58304: LD_INT 16
58306: PUSH
58307: LD_INT 25
58309: PUSH
58310: LD_INT 18
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: IN
58325: ST_TO_ADDR
// end ;
58326: LD_VAR 0 2
58330: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
58331: LD_INT 0
58333: PPUSH
58334: PPUSH
58335: PPUSH
// result := [ ] ;
58336: LD_ADDR_VAR 0 3
58340: PUSH
58341: EMPTY
58342: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
58343: LD_ADDR_VAR 0 4
58347: PUSH
58348: LD_VAR 0 2
58352: PPUSH
58353: LD_INT 21
58355: PUSH
58356: LD_INT 3
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PPUSH
58363: CALL_OW 70
58367: ST_TO_ADDR
// if not tmp then
58368: LD_VAR 0 4
58372: NOT
58373: IFFALSE 58377
// exit ;
58375: GO 58435
// for i in tmp do
58377: LD_ADDR_VAR 0 5
58381: PUSH
58382: LD_VAR 0 4
58386: PUSH
58387: FOR_IN
58388: IFFALSE 58423
// if GetBase ( i ) <> base then
58390: LD_VAR 0 5
58394: PPUSH
58395: CALL_OW 274
58399: PUSH
58400: LD_VAR 0 1
58404: NONEQUAL
58405: IFFALSE 58421
// ComLinkToBase ( base , i ) ;
58407: LD_VAR 0 1
58411: PPUSH
58412: LD_VAR 0 5
58416: PPUSH
58417: CALL_OW 169
58421: GO 58387
58423: POP
58424: POP
// result := tmp ;
58425: LD_ADDR_VAR 0 3
58429: PUSH
58430: LD_VAR 0 4
58434: ST_TO_ADDR
// end ;
58435: LD_VAR 0 3
58439: RET
// export function ComComplete ( unit , b ) ; var i ; begin
58440: LD_INT 0
58442: PPUSH
58443: PPUSH
// if BuildingStatus ( b ) = bs_build then
58444: LD_VAR 0 2
58448: PPUSH
58449: CALL_OW 461
58453: PUSH
58454: LD_INT 1
58456: EQUAL
58457: IFFALSE 58517
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58459: LD_VAR 0 1
58463: PPUSH
58464: LD_STRING h
58466: PUSH
58467: LD_VAR 0 2
58471: PPUSH
58472: CALL_OW 250
58476: PUSH
58477: LD_VAR 0 2
58481: PPUSH
58482: CALL_OW 251
58486: PUSH
58487: LD_VAR 0 2
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: PPUSH
58513: CALL_OW 446
// end ;
58517: LD_VAR 0 3
58521: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58522: LD_INT 0
58524: PPUSH
58525: PPUSH
58526: PPUSH
58527: PPUSH
58528: PPUSH
58529: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
58530: LD_VAR 0 1
58534: NOT
58535: PUSH
58536: LD_VAR 0 1
58540: PPUSH
58541: CALL_OW 263
58545: PUSH
58546: LD_INT 2
58548: EQUAL
58549: NOT
58550: OR
58551: IFFALSE 58555
// exit ;
58553: GO 58871
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58555: LD_ADDR_VAR 0 6
58559: PUSH
58560: LD_INT 22
58562: PUSH
58563: LD_VAR 0 1
58567: PPUSH
58568: CALL_OW 255
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: LD_INT 30
58582: PUSH
58583: LD_INT 36
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 34
58592: PUSH
58593: LD_INT 31
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PPUSH
58609: CALL_OW 69
58613: ST_TO_ADDR
// if not tmp then
58614: LD_VAR 0 6
58618: NOT
58619: IFFALSE 58623
// exit ;
58621: GO 58871
// result := [ ] ;
58623: LD_ADDR_VAR 0 2
58627: PUSH
58628: EMPTY
58629: ST_TO_ADDR
// for i in tmp do
58630: LD_ADDR_VAR 0 3
58634: PUSH
58635: LD_VAR 0 6
58639: PUSH
58640: FOR_IN
58641: IFFALSE 58712
// begin t := UnitsInside ( i ) ;
58643: LD_ADDR_VAR 0 4
58647: PUSH
58648: LD_VAR 0 3
58652: PPUSH
58653: CALL_OW 313
58657: ST_TO_ADDR
// if t then
58658: LD_VAR 0 4
58662: IFFALSE 58710
// for j in t do
58664: LD_ADDR_VAR 0 7
58668: PUSH
58669: LD_VAR 0 4
58673: PUSH
58674: FOR_IN
58675: IFFALSE 58708
// result := Insert ( result , result + 1 , j ) ;
58677: LD_ADDR_VAR 0 2
58681: PUSH
58682: LD_VAR 0 2
58686: PPUSH
58687: LD_VAR 0 2
58691: PUSH
58692: LD_INT 1
58694: PLUS
58695: PPUSH
58696: LD_VAR 0 7
58700: PPUSH
58701: CALL_OW 2
58705: ST_TO_ADDR
58706: GO 58674
58708: POP
58709: POP
// end ;
58710: GO 58640
58712: POP
58713: POP
// if not result then
58714: LD_VAR 0 2
58718: NOT
58719: IFFALSE 58723
// exit ;
58721: GO 58871
// mech := result [ 1 ] ;
58723: LD_ADDR_VAR 0 5
58727: PUSH
58728: LD_VAR 0 2
58732: PUSH
58733: LD_INT 1
58735: ARRAY
58736: ST_TO_ADDR
// if result > 1 then
58737: LD_VAR 0 2
58741: PUSH
58742: LD_INT 1
58744: GREATER
58745: IFFALSE 58857
// for i = 2 to result do
58747: LD_ADDR_VAR 0 3
58751: PUSH
58752: DOUBLE
58753: LD_INT 2
58755: DEC
58756: ST_TO_ADDR
58757: LD_VAR 0 2
58761: PUSH
58762: FOR_TO
58763: IFFALSE 58855
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58765: LD_ADDR_VAR 0 4
58769: PUSH
58770: LD_VAR 0 2
58774: PUSH
58775: LD_VAR 0 3
58779: ARRAY
58780: PPUSH
58781: LD_INT 3
58783: PPUSH
58784: CALL_OW 259
58788: PUSH
58789: LD_VAR 0 2
58793: PUSH
58794: LD_VAR 0 3
58798: ARRAY
58799: PPUSH
58800: CALL_OW 432
58804: MINUS
58805: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58806: LD_VAR 0 4
58810: PUSH
58811: LD_VAR 0 5
58815: PPUSH
58816: LD_INT 3
58818: PPUSH
58819: CALL_OW 259
58823: PUSH
58824: LD_VAR 0 5
58828: PPUSH
58829: CALL_OW 432
58833: MINUS
58834: GREATEREQUAL
58835: IFFALSE 58853
// mech := result [ i ] ;
58837: LD_ADDR_VAR 0 5
58841: PUSH
58842: LD_VAR 0 2
58846: PUSH
58847: LD_VAR 0 3
58851: ARRAY
58852: ST_TO_ADDR
// end ;
58853: GO 58762
58855: POP
58856: POP
// ComLinkTo ( vehicle , mech ) ;
58857: LD_VAR 0 1
58861: PPUSH
58862: LD_VAR 0 5
58866: PPUSH
58867: CALL_OW 135
// end ;
58871: LD_VAR 0 2
58875: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58876: LD_INT 0
58878: PPUSH
58879: PPUSH
58880: PPUSH
58881: PPUSH
58882: PPUSH
58883: PPUSH
58884: PPUSH
58885: PPUSH
58886: PPUSH
58887: PPUSH
58888: PPUSH
58889: PPUSH
58890: PPUSH
// result := [ ] ;
58891: LD_ADDR_VAR 0 7
58895: PUSH
58896: EMPTY
58897: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58898: LD_VAR 0 1
58902: PPUSH
58903: CALL_OW 266
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: IN
58918: NOT
58919: IFFALSE 58923
// exit ;
58921: GO 60554
// if name then
58923: LD_VAR 0 3
58927: IFFALSE 58943
// SetBName ( base_dep , name ) ;
58929: LD_VAR 0 1
58933: PPUSH
58934: LD_VAR 0 3
58938: PPUSH
58939: CALL_OW 500
// base := GetBase ( base_dep ) ;
58943: LD_ADDR_VAR 0 15
58947: PUSH
58948: LD_VAR 0 1
58952: PPUSH
58953: CALL_OW 274
58957: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58958: LD_ADDR_VAR 0 16
58962: PUSH
58963: LD_VAR 0 1
58967: PPUSH
58968: CALL_OW 255
58972: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58973: LD_ADDR_VAR 0 17
58977: PUSH
58978: LD_VAR 0 1
58982: PPUSH
58983: CALL_OW 248
58987: ST_TO_ADDR
// if sources then
58988: LD_VAR 0 5
58992: IFFALSE 59039
// for i = 1 to 3 do
58994: LD_ADDR_VAR 0 8
58998: PUSH
58999: DOUBLE
59000: LD_INT 1
59002: DEC
59003: ST_TO_ADDR
59004: LD_INT 3
59006: PUSH
59007: FOR_TO
59008: IFFALSE 59037
// AddResourceType ( base , i , sources [ i ] ) ;
59010: LD_VAR 0 15
59014: PPUSH
59015: LD_VAR 0 8
59019: PPUSH
59020: LD_VAR 0 5
59024: PUSH
59025: LD_VAR 0 8
59029: ARRAY
59030: PPUSH
59031: CALL_OW 276
59035: GO 59007
59037: POP
59038: POP
// buildings := GetBaseBuildings ( base , area ) ;
59039: LD_ADDR_VAR 0 18
59043: PUSH
59044: LD_VAR 0 15
59048: PPUSH
59049: LD_VAR 0 2
59053: PPUSH
59054: CALL 58331 0 2
59058: ST_TO_ADDR
// InitHc ;
59059: CALL_OW 19
// InitUc ;
59063: CALL_OW 18
// uc_side := side ;
59067: LD_ADDR_OWVAR 20
59071: PUSH
59072: LD_VAR 0 16
59076: ST_TO_ADDR
// uc_nation := nation ;
59077: LD_ADDR_OWVAR 21
59081: PUSH
59082: LD_VAR 0 17
59086: ST_TO_ADDR
// if buildings then
59087: LD_VAR 0 18
59091: IFFALSE 60413
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
59093: LD_ADDR_VAR 0 19
59097: PUSH
59098: LD_VAR 0 18
59102: PPUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 30
59108: PUSH
59109: LD_INT 29
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 30
59118: PUSH
59119: LD_INT 30
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: PPUSH
59131: CALL_OW 72
59135: ST_TO_ADDR
// if tmp then
59136: LD_VAR 0 19
59140: IFFALSE 59188
// for i in tmp do
59142: LD_ADDR_VAR 0 8
59146: PUSH
59147: LD_VAR 0 19
59151: PUSH
59152: FOR_IN
59153: IFFALSE 59186
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
59155: LD_VAR 0 8
59159: PPUSH
59160: CALL_OW 250
59164: PPUSH
59165: LD_VAR 0 8
59169: PPUSH
59170: CALL_OW 251
59174: PPUSH
59175: LD_VAR 0 16
59179: PPUSH
59180: CALL_OW 441
59184: GO 59152
59186: POP
59187: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
59188: LD_VAR 0 18
59192: PPUSH
59193: LD_INT 2
59195: PUSH
59196: LD_INT 30
59198: PUSH
59199: LD_INT 32
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 30
59208: PUSH
59209: LD_INT 33
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: PPUSH
59221: CALL_OW 72
59225: IFFALSE 59313
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
59227: LD_ADDR_VAR 0 8
59231: PUSH
59232: LD_VAR 0 18
59236: PPUSH
59237: LD_INT 2
59239: PUSH
59240: LD_INT 30
59242: PUSH
59243: LD_INT 32
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 30
59252: PUSH
59253: LD_INT 33
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: PPUSH
59265: CALL_OW 72
59269: PUSH
59270: FOR_IN
59271: IFFALSE 59311
// begin if not GetBWeapon ( i ) then
59273: LD_VAR 0 8
59277: PPUSH
59278: CALL_OW 269
59282: NOT
59283: IFFALSE 59309
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
59285: LD_VAR 0 8
59289: PPUSH
59290: LD_VAR 0 8
59294: PPUSH
59295: LD_VAR 0 2
59299: PPUSH
59300: CALL 60559 0 2
59304: PPUSH
59305: CALL_OW 431
// end ;
59309: GO 59270
59311: POP
59312: POP
// end ; for i = 1 to personel do
59313: LD_ADDR_VAR 0 8
59317: PUSH
59318: DOUBLE
59319: LD_INT 1
59321: DEC
59322: ST_TO_ADDR
59323: LD_VAR 0 6
59327: PUSH
59328: FOR_TO
59329: IFFALSE 60393
// begin if i > 4 then
59331: LD_VAR 0 8
59335: PUSH
59336: LD_INT 4
59338: GREATER
59339: IFFALSE 59343
// break ;
59341: GO 60393
// case i of 1 :
59343: LD_VAR 0 8
59347: PUSH
59348: LD_INT 1
59350: DOUBLE
59351: EQUAL
59352: IFTRUE 59356
59354: GO 59436
59356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
59357: LD_ADDR_VAR 0 12
59361: PUSH
59362: LD_VAR 0 18
59366: PPUSH
59367: LD_INT 22
59369: PUSH
59370: LD_VAR 0 16
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 58
59381: PUSH
59382: EMPTY
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 30
59390: PUSH
59391: LD_INT 32
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 30
59400: PUSH
59401: LD_INT 4
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 30
59410: PUSH
59411: LD_INT 5
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: LIST
59428: PPUSH
59429: CALL_OW 72
59433: ST_TO_ADDR
59434: GO 59658
59436: LD_INT 2
59438: DOUBLE
59439: EQUAL
59440: IFTRUE 59444
59442: GO 59506
59444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59445: LD_ADDR_VAR 0 12
59449: PUSH
59450: LD_VAR 0 18
59454: PPUSH
59455: LD_INT 22
59457: PUSH
59458: LD_VAR 0 16
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: LD_INT 30
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 30
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PPUSH
59499: CALL_OW 72
59503: ST_TO_ADDR
59504: GO 59658
59506: LD_INT 3
59508: DOUBLE
59509: EQUAL
59510: IFTRUE 59514
59512: GO 59576
59514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59515: LD_ADDR_VAR 0 12
59519: PUSH
59520: LD_VAR 0 18
59524: PPUSH
59525: LD_INT 22
59527: PUSH
59528: LD_VAR 0 16
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: LD_INT 30
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 30
59552: PUSH
59553: LD_INT 3
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PPUSH
59569: CALL_OW 72
59573: ST_TO_ADDR
59574: GO 59658
59576: LD_INT 4
59578: DOUBLE
59579: EQUAL
59580: IFTRUE 59584
59582: GO 59657
59584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59585: LD_ADDR_VAR 0 12
59589: PUSH
59590: LD_VAR 0 18
59594: PPUSH
59595: LD_INT 22
59597: PUSH
59598: LD_VAR 0 16
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: LD_INT 30
59612: PUSH
59613: LD_INT 6
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 30
59622: PUSH
59623: LD_INT 7
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 30
59632: PUSH
59633: LD_INT 8
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PPUSH
59650: CALL_OW 72
59654: ST_TO_ADDR
59655: GO 59658
59657: POP
// if i = 1 then
59658: LD_VAR 0 8
59662: PUSH
59663: LD_INT 1
59665: EQUAL
59666: IFFALSE 59777
// begin tmp := [ ] ;
59668: LD_ADDR_VAR 0 19
59672: PUSH
59673: EMPTY
59674: ST_TO_ADDR
// for j in f do
59675: LD_ADDR_VAR 0 9
59679: PUSH
59680: LD_VAR 0 12
59684: PUSH
59685: FOR_IN
59686: IFFALSE 59759
// if GetBType ( j ) = b_bunker then
59688: LD_VAR 0 9
59692: PPUSH
59693: CALL_OW 266
59697: PUSH
59698: LD_INT 32
59700: EQUAL
59701: IFFALSE 59728
// tmp := Insert ( tmp , 1 , j ) else
59703: LD_ADDR_VAR 0 19
59707: PUSH
59708: LD_VAR 0 19
59712: PPUSH
59713: LD_INT 1
59715: PPUSH
59716: LD_VAR 0 9
59720: PPUSH
59721: CALL_OW 2
59725: ST_TO_ADDR
59726: GO 59757
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59728: LD_ADDR_VAR 0 19
59732: PUSH
59733: LD_VAR 0 19
59737: PPUSH
59738: LD_VAR 0 19
59742: PUSH
59743: LD_INT 1
59745: PLUS
59746: PPUSH
59747: LD_VAR 0 9
59751: PPUSH
59752: CALL_OW 2
59756: ST_TO_ADDR
59757: GO 59685
59759: POP
59760: POP
// if tmp then
59761: LD_VAR 0 19
59765: IFFALSE 59777
// f := tmp ;
59767: LD_ADDR_VAR 0 12
59771: PUSH
59772: LD_VAR 0 19
59776: ST_TO_ADDR
// end ; x := personel [ i ] ;
59777: LD_ADDR_VAR 0 13
59781: PUSH
59782: LD_VAR 0 6
59786: PUSH
59787: LD_VAR 0 8
59791: ARRAY
59792: ST_TO_ADDR
// if x = - 1 then
59793: LD_VAR 0 13
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: EQUAL
59802: IFFALSE 60011
// begin for j in f do
59804: LD_ADDR_VAR 0 9
59808: PUSH
59809: LD_VAR 0 12
59813: PUSH
59814: FOR_IN
59815: IFFALSE 60007
// repeat InitHc ;
59817: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59821: LD_VAR 0 9
59825: PPUSH
59826: CALL_OW 266
59830: PUSH
59831: LD_INT 5
59833: EQUAL
59834: IFFALSE 59904
// begin if UnitsInside ( j ) < 3 then
59836: LD_VAR 0 9
59840: PPUSH
59841: CALL_OW 313
59845: PUSH
59846: LD_INT 3
59848: LESS
59849: IFFALSE 59885
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59851: LD_INT 0
59853: PPUSH
59854: LD_INT 5
59856: PUSH
59857: LD_INT 8
59859: PUSH
59860: LD_INT 9
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: LIST
59867: PUSH
59868: LD_VAR 0 17
59872: ARRAY
59873: PPUSH
59874: LD_VAR 0 4
59878: PPUSH
59879: CALL_OW 380
59883: GO 59902
// PrepareHuman ( false , i , skill ) ;
59885: LD_INT 0
59887: PPUSH
59888: LD_VAR 0 8
59892: PPUSH
59893: LD_VAR 0 4
59897: PPUSH
59898: CALL_OW 380
// end else
59902: GO 59921
// PrepareHuman ( false , i , skill ) ;
59904: LD_INT 0
59906: PPUSH
59907: LD_VAR 0 8
59911: PPUSH
59912: LD_VAR 0 4
59916: PPUSH
59917: CALL_OW 380
// un := CreateHuman ;
59921: LD_ADDR_VAR 0 14
59925: PUSH
59926: CALL_OW 44
59930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59931: LD_ADDR_VAR 0 7
59935: PUSH
59936: LD_VAR 0 7
59940: PPUSH
59941: LD_INT 1
59943: PPUSH
59944: LD_VAR 0 14
59948: PPUSH
59949: CALL_OW 2
59953: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59954: LD_VAR 0 14
59958: PPUSH
59959: LD_VAR 0 9
59963: PPUSH
59964: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59968: LD_VAR 0 9
59972: PPUSH
59973: CALL_OW 313
59977: PUSH
59978: LD_INT 6
59980: EQUAL
59981: PUSH
59982: LD_VAR 0 9
59986: PPUSH
59987: CALL_OW 266
59991: PUSH
59992: LD_INT 32
59994: PUSH
59995: LD_INT 31
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: IN
60002: OR
60003: IFFALSE 59817
60005: GO 59814
60007: POP
60008: POP
// end else
60009: GO 60391
// for j = 1 to x do
60011: LD_ADDR_VAR 0 9
60015: PUSH
60016: DOUBLE
60017: LD_INT 1
60019: DEC
60020: ST_TO_ADDR
60021: LD_VAR 0 13
60025: PUSH
60026: FOR_TO
60027: IFFALSE 60389
// begin InitHc ;
60029: CALL_OW 19
// if not f then
60033: LD_VAR 0 12
60037: NOT
60038: IFFALSE 60127
// begin PrepareHuman ( false , i , skill ) ;
60040: LD_INT 0
60042: PPUSH
60043: LD_VAR 0 8
60047: PPUSH
60048: LD_VAR 0 4
60052: PPUSH
60053: CALL_OW 380
// un := CreateHuman ;
60057: LD_ADDR_VAR 0 14
60061: PUSH
60062: CALL_OW 44
60066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60067: LD_ADDR_VAR 0 7
60071: PUSH
60072: LD_VAR 0 7
60076: PPUSH
60077: LD_INT 1
60079: PPUSH
60080: LD_VAR 0 14
60084: PPUSH
60085: CALL_OW 2
60089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60090: LD_VAR 0 14
60094: PPUSH
60095: LD_VAR 0 1
60099: PPUSH
60100: CALL_OW 250
60104: PPUSH
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 251
60114: PPUSH
60115: LD_INT 10
60117: PPUSH
60118: LD_INT 0
60120: PPUSH
60121: CALL_OW 50
// continue ;
60125: GO 60026
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
60127: LD_VAR 0 12
60131: PUSH
60132: LD_INT 1
60134: ARRAY
60135: PPUSH
60136: CALL_OW 313
60140: PUSH
60141: LD_VAR 0 12
60145: PUSH
60146: LD_INT 1
60148: ARRAY
60149: PPUSH
60150: CALL_OW 266
60154: PUSH
60155: LD_INT 32
60157: PUSH
60158: LD_INT 31
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: IN
60165: AND
60166: PUSH
60167: LD_VAR 0 12
60171: PUSH
60172: LD_INT 1
60174: ARRAY
60175: PPUSH
60176: CALL_OW 313
60180: PUSH
60181: LD_INT 6
60183: EQUAL
60184: OR
60185: IFFALSE 60205
// f := Delete ( f , 1 ) ;
60187: LD_ADDR_VAR 0 12
60191: PUSH
60192: LD_VAR 0 12
60196: PPUSH
60197: LD_INT 1
60199: PPUSH
60200: CALL_OW 3
60204: ST_TO_ADDR
// if not f then
60205: LD_VAR 0 12
60209: NOT
60210: IFFALSE 60228
// begin x := x + 2 ;
60212: LD_ADDR_VAR 0 13
60216: PUSH
60217: LD_VAR 0 13
60221: PUSH
60222: LD_INT 2
60224: PLUS
60225: ST_TO_ADDR
// continue ;
60226: GO 60026
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
60228: LD_VAR 0 12
60232: PUSH
60233: LD_INT 1
60235: ARRAY
60236: PPUSH
60237: CALL_OW 266
60241: PUSH
60242: LD_INT 5
60244: EQUAL
60245: IFFALSE 60319
// begin if UnitsInside ( f [ 1 ] ) < 3 then
60247: LD_VAR 0 12
60251: PUSH
60252: LD_INT 1
60254: ARRAY
60255: PPUSH
60256: CALL_OW 313
60260: PUSH
60261: LD_INT 3
60263: LESS
60264: IFFALSE 60300
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
60266: LD_INT 0
60268: PPUSH
60269: LD_INT 5
60271: PUSH
60272: LD_INT 8
60274: PUSH
60275: LD_INT 9
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: LIST
60282: PUSH
60283: LD_VAR 0 17
60287: ARRAY
60288: PPUSH
60289: LD_VAR 0 4
60293: PPUSH
60294: CALL_OW 380
60298: GO 60317
// PrepareHuman ( false , i , skill ) ;
60300: LD_INT 0
60302: PPUSH
60303: LD_VAR 0 8
60307: PPUSH
60308: LD_VAR 0 4
60312: PPUSH
60313: CALL_OW 380
// end else
60317: GO 60336
// PrepareHuman ( false , i , skill ) ;
60319: LD_INT 0
60321: PPUSH
60322: LD_VAR 0 8
60326: PPUSH
60327: LD_VAR 0 4
60331: PPUSH
60332: CALL_OW 380
// un := CreateHuman ;
60336: LD_ADDR_VAR 0 14
60340: PUSH
60341: CALL_OW 44
60345: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60346: LD_ADDR_VAR 0 7
60350: PUSH
60351: LD_VAR 0 7
60355: PPUSH
60356: LD_INT 1
60358: PPUSH
60359: LD_VAR 0 14
60363: PPUSH
60364: CALL_OW 2
60368: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60369: LD_VAR 0 14
60373: PPUSH
60374: LD_VAR 0 12
60378: PUSH
60379: LD_INT 1
60381: ARRAY
60382: PPUSH
60383: CALL_OW 52
// end ;
60387: GO 60026
60389: POP
60390: POP
// end ;
60391: GO 59328
60393: POP
60394: POP
// result := result ^ buildings ;
60395: LD_ADDR_VAR 0 7
60399: PUSH
60400: LD_VAR 0 7
60404: PUSH
60405: LD_VAR 0 18
60409: ADD
60410: ST_TO_ADDR
// end else
60411: GO 60554
// begin for i = 1 to personel do
60413: LD_ADDR_VAR 0 8
60417: PUSH
60418: DOUBLE
60419: LD_INT 1
60421: DEC
60422: ST_TO_ADDR
60423: LD_VAR 0 6
60427: PUSH
60428: FOR_TO
60429: IFFALSE 60552
// begin if i > 4 then
60431: LD_VAR 0 8
60435: PUSH
60436: LD_INT 4
60438: GREATER
60439: IFFALSE 60443
// break ;
60441: GO 60552
// x := personel [ i ] ;
60443: LD_ADDR_VAR 0 13
60447: PUSH
60448: LD_VAR 0 6
60452: PUSH
60453: LD_VAR 0 8
60457: ARRAY
60458: ST_TO_ADDR
// if x = - 1 then
60459: LD_VAR 0 13
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: EQUAL
60468: IFFALSE 60472
// continue ;
60470: GO 60428
// PrepareHuman ( false , i , skill ) ;
60472: LD_INT 0
60474: PPUSH
60475: LD_VAR 0 8
60479: PPUSH
60480: LD_VAR 0 4
60484: PPUSH
60485: CALL_OW 380
// un := CreateHuman ;
60489: LD_ADDR_VAR 0 14
60493: PUSH
60494: CALL_OW 44
60498: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60499: LD_VAR 0 14
60503: PPUSH
60504: LD_VAR 0 1
60508: PPUSH
60509: CALL_OW 250
60513: PPUSH
60514: LD_VAR 0 1
60518: PPUSH
60519: CALL_OW 251
60523: PPUSH
60524: LD_INT 10
60526: PPUSH
60527: LD_INT 0
60529: PPUSH
60530: CALL_OW 50
// result := result ^ un ;
60534: LD_ADDR_VAR 0 7
60538: PUSH
60539: LD_VAR 0 7
60543: PUSH
60544: LD_VAR 0 14
60548: ADD
60549: ST_TO_ADDR
// end ;
60550: GO 60428
60552: POP
60553: POP
// end ; end ;
60554: LD_VAR 0 7
60558: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60559: LD_INT 0
60561: PPUSH
60562: PPUSH
60563: PPUSH
60564: PPUSH
60565: PPUSH
60566: PPUSH
60567: PPUSH
60568: PPUSH
60569: PPUSH
60570: PPUSH
60571: PPUSH
60572: PPUSH
60573: PPUSH
60574: PPUSH
60575: PPUSH
60576: PPUSH
// result := false ;
60577: LD_ADDR_VAR 0 3
60581: PUSH
60582: LD_INT 0
60584: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60585: LD_VAR 0 1
60589: NOT
60590: PUSH
60591: LD_VAR 0 1
60595: PPUSH
60596: CALL_OW 266
60600: PUSH
60601: LD_INT 32
60603: PUSH
60604: LD_INT 33
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: IN
60611: NOT
60612: OR
60613: IFFALSE 60617
// exit ;
60615: GO 61753
// nat := GetNation ( tower ) ;
60617: LD_ADDR_VAR 0 12
60621: PUSH
60622: LD_VAR 0 1
60626: PPUSH
60627: CALL_OW 248
60631: ST_TO_ADDR
// side := GetSide ( tower ) ;
60632: LD_ADDR_VAR 0 16
60636: PUSH
60637: LD_VAR 0 1
60641: PPUSH
60642: CALL_OW 255
60646: ST_TO_ADDR
// x := GetX ( tower ) ;
60647: LD_ADDR_VAR 0 10
60651: PUSH
60652: LD_VAR 0 1
60656: PPUSH
60657: CALL_OW 250
60661: ST_TO_ADDR
// y := GetY ( tower ) ;
60662: LD_ADDR_VAR 0 11
60666: PUSH
60667: LD_VAR 0 1
60671: PPUSH
60672: CALL_OW 251
60676: ST_TO_ADDR
// if not x or not y then
60677: LD_VAR 0 10
60681: NOT
60682: PUSH
60683: LD_VAR 0 11
60687: NOT
60688: OR
60689: IFFALSE 60693
// exit ;
60691: GO 61753
// weapon := 0 ;
60693: LD_ADDR_VAR 0 18
60697: PUSH
60698: LD_INT 0
60700: ST_TO_ADDR
// fac_list := [ ] ;
60701: LD_ADDR_VAR 0 17
60705: PUSH
60706: EMPTY
60707: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
60708: LD_ADDR_VAR 0 6
60712: PUSH
60713: LD_VAR 0 1
60717: PPUSH
60718: CALL_OW 274
60722: PPUSH
60723: LD_VAR 0 2
60727: PPUSH
60728: CALL 58331 0 2
60732: PPUSH
60733: LD_INT 30
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PPUSH
60743: CALL_OW 72
60747: ST_TO_ADDR
// if not factories then
60748: LD_VAR 0 6
60752: NOT
60753: IFFALSE 60757
// exit ;
60755: GO 61753
// for i in factories do
60757: LD_ADDR_VAR 0 8
60761: PUSH
60762: LD_VAR 0 6
60766: PUSH
60767: FOR_IN
60768: IFFALSE 60793
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60770: LD_ADDR_VAR 0 17
60774: PUSH
60775: LD_VAR 0 17
60779: PUSH
60780: LD_VAR 0 8
60784: PPUSH
60785: CALL_OW 478
60789: UNION
60790: ST_TO_ADDR
60791: GO 60767
60793: POP
60794: POP
// if not fac_list then
60795: LD_VAR 0 17
60799: NOT
60800: IFFALSE 60804
// exit ;
60802: GO 61753
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60804: LD_ADDR_VAR 0 5
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: LD_INT 5
60814: PUSH
60815: LD_INT 9
60817: PUSH
60818: LD_INT 10
60820: PUSH
60821: LD_INT 6
60823: PUSH
60824: LD_INT 7
60826: PUSH
60827: LD_INT 11
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 27
60841: PUSH
60842: LD_INT 28
60844: PUSH
60845: LD_INT 26
60847: PUSH
60848: LD_INT 30
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 43
60859: PUSH
60860: LD_INT 44
60862: PUSH
60863: LD_INT 46
60865: PUSH
60866: LD_INT 45
60868: PUSH
60869: LD_INT 47
60871: PUSH
60872: LD_INT 49
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: LIST
60887: PUSH
60888: LD_VAR 0 12
60892: ARRAY
60893: ST_TO_ADDR
// for i in list do
60894: LD_ADDR_VAR 0 8
60898: PUSH
60899: LD_VAR 0 5
60903: PUSH
60904: FOR_IN
60905: IFFALSE 60938
// if not i in fac_list then
60907: LD_VAR 0 8
60911: PUSH
60912: LD_VAR 0 17
60916: IN
60917: NOT
60918: IFFALSE 60936
// list := list diff i ;
60920: LD_ADDR_VAR 0 5
60924: PUSH
60925: LD_VAR 0 5
60929: PUSH
60930: LD_VAR 0 8
60934: DIFF
60935: ST_TO_ADDR
60936: GO 60904
60938: POP
60939: POP
// if not list then
60940: LD_VAR 0 5
60944: NOT
60945: IFFALSE 60949
// exit ;
60947: GO 61753
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60949: LD_VAR 0 12
60953: PUSH
60954: LD_INT 3
60956: EQUAL
60957: PUSH
60958: LD_INT 49
60960: PUSH
60961: LD_VAR 0 5
60965: IN
60966: AND
60967: PUSH
60968: LD_INT 31
60970: PPUSH
60971: LD_VAR 0 16
60975: PPUSH
60976: CALL_OW 321
60980: PUSH
60981: LD_INT 2
60983: EQUAL
60984: AND
60985: IFFALSE 61045
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60987: LD_INT 22
60989: PUSH
60990: LD_VAR 0 16
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 35
61001: PUSH
61002: LD_INT 49
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 91
61011: PUSH
61012: LD_VAR 0 1
61016: PUSH
61017: LD_INT 10
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: LIST
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: PPUSH
61030: CALL_OW 69
61034: NOT
61035: IFFALSE 61045
// weapon := ru_time_lapser ;
61037: LD_ADDR_VAR 0 18
61041: PUSH
61042: LD_INT 49
61044: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
61045: LD_VAR 0 12
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: IN
61060: PUSH
61061: LD_INT 11
61063: PUSH
61064: LD_VAR 0 5
61068: IN
61069: PUSH
61070: LD_INT 30
61072: PUSH
61073: LD_VAR 0 5
61077: IN
61078: OR
61079: AND
61080: PUSH
61081: LD_INT 6
61083: PPUSH
61084: LD_VAR 0 16
61088: PPUSH
61089: CALL_OW 321
61093: PUSH
61094: LD_INT 2
61096: EQUAL
61097: AND
61098: IFFALSE 61263
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
61100: LD_INT 22
61102: PUSH
61103: LD_VAR 0 16
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: PUSH
61115: LD_INT 35
61117: PUSH
61118: LD_INT 11
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 35
61127: PUSH
61128: LD_INT 30
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 91
61142: PUSH
61143: LD_VAR 0 1
61147: PUSH
61148: LD_INT 18
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: PPUSH
61161: CALL_OW 69
61165: NOT
61166: PUSH
61167: LD_INT 22
61169: PUSH
61170: LD_VAR 0 16
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: LD_INT 30
61184: PUSH
61185: LD_INT 32
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 30
61194: PUSH
61195: LD_INT 33
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 91
61209: PUSH
61210: LD_VAR 0 1
61214: PUSH
61215: LD_INT 12
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: PPUSH
61231: CALL_OW 69
61235: PUSH
61236: LD_INT 2
61238: GREATER
61239: AND
61240: IFFALSE 61263
// weapon := [ us_radar , ar_radar ] [ nat ] ;
61242: LD_ADDR_VAR 0 18
61246: PUSH
61247: LD_INT 11
61249: PUSH
61250: LD_INT 30
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_VAR 0 12
61261: ARRAY
61262: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
61263: LD_VAR 0 18
61267: NOT
61268: PUSH
61269: LD_INT 40
61271: PPUSH
61272: LD_VAR 0 16
61276: PPUSH
61277: CALL_OW 321
61281: PUSH
61282: LD_INT 2
61284: EQUAL
61285: AND
61286: PUSH
61287: LD_INT 7
61289: PUSH
61290: LD_VAR 0 5
61294: IN
61295: PUSH
61296: LD_INT 28
61298: PUSH
61299: LD_VAR 0 5
61303: IN
61304: OR
61305: PUSH
61306: LD_INT 45
61308: PUSH
61309: LD_VAR 0 5
61313: IN
61314: OR
61315: AND
61316: IFFALSE 61570
// begin hex := GetHexInfo ( x , y ) ;
61318: LD_ADDR_VAR 0 4
61322: PUSH
61323: LD_VAR 0 10
61327: PPUSH
61328: LD_VAR 0 11
61332: PPUSH
61333: CALL_OW 546
61337: ST_TO_ADDR
// if hex [ 1 ] then
61338: LD_VAR 0 4
61342: PUSH
61343: LD_INT 1
61345: ARRAY
61346: IFFALSE 61350
// exit ;
61348: GO 61753
// height := hex [ 2 ] ;
61350: LD_ADDR_VAR 0 15
61354: PUSH
61355: LD_VAR 0 4
61359: PUSH
61360: LD_INT 2
61362: ARRAY
61363: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
61364: LD_ADDR_VAR 0 14
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 5
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: ST_TO_ADDR
// for i in tmp do
61387: LD_ADDR_VAR 0 8
61391: PUSH
61392: LD_VAR 0 14
61396: PUSH
61397: FOR_IN
61398: IFFALSE 61568
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61400: LD_ADDR_VAR 0 9
61404: PUSH
61405: LD_VAR 0 10
61409: PPUSH
61410: LD_VAR 0 8
61414: PPUSH
61415: LD_INT 5
61417: PPUSH
61418: CALL_OW 272
61422: PUSH
61423: LD_VAR 0 11
61427: PPUSH
61428: LD_VAR 0 8
61432: PPUSH
61433: LD_INT 5
61435: PPUSH
61436: CALL_OW 273
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61445: LD_VAR 0 9
61449: PUSH
61450: LD_INT 1
61452: ARRAY
61453: PPUSH
61454: LD_VAR 0 9
61458: PUSH
61459: LD_INT 2
61461: ARRAY
61462: PPUSH
61463: CALL_OW 488
61467: IFFALSE 61566
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61469: LD_ADDR_VAR 0 4
61473: PUSH
61474: LD_VAR 0 9
61478: PUSH
61479: LD_INT 1
61481: ARRAY
61482: PPUSH
61483: LD_VAR 0 9
61487: PUSH
61488: LD_INT 2
61490: ARRAY
61491: PPUSH
61492: CALL_OW 546
61496: ST_TO_ADDR
// if hex [ 1 ] then
61497: LD_VAR 0 4
61501: PUSH
61502: LD_INT 1
61504: ARRAY
61505: IFFALSE 61509
// continue ;
61507: GO 61397
// h := hex [ 2 ] ;
61509: LD_ADDR_VAR 0 13
61513: PUSH
61514: LD_VAR 0 4
61518: PUSH
61519: LD_INT 2
61521: ARRAY
61522: ST_TO_ADDR
// if h + 7 < height then
61523: LD_VAR 0 13
61527: PUSH
61528: LD_INT 7
61530: PLUS
61531: PUSH
61532: LD_VAR 0 15
61536: LESS
61537: IFFALSE 61566
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61539: LD_ADDR_VAR 0 18
61543: PUSH
61544: LD_INT 7
61546: PUSH
61547: LD_INT 28
61549: PUSH
61550: LD_INT 45
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: PUSH
61558: LD_VAR 0 12
61562: ARRAY
61563: ST_TO_ADDR
// break ;
61564: GO 61568
// end ; end ; end ;
61566: GO 61397
61568: POP
61569: POP
// end ; if not weapon then
61570: LD_VAR 0 18
61574: NOT
61575: IFFALSE 61635
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61577: LD_ADDR_VAR 0 5
61581: PUSH
61582: LD_VAR 0 5
61586: PUSH
61587: LD_INT 11
61589: PUSH
61590: LD_INT 30
61592: PUSH
61593: LD_INT 49
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: LIST
61600: DIFF
61601: ST_TO_ADDR
// if not list then
61602: LD_VAR 0 5
61606: NOT
61607: IFFALSE 61611
// exit ;
61609: GO 61753
// weapon := list [ rand ( 1 , list ) ] ;
61611: LD_ADDR_VAR 0 18
61615: PUSH
61616: LD_VAR 0 5
61620: PUSH
61621: LD_INT 1
61623: PPUSH
61624: LD_VAR 0 5
61628: PPUSH
61629: CALL_OW 12
61633: ARRAY
61634: ST_TO_ADDR
// end ; if weapon then
61635: LD_VAR 0 18
61639: IFFALSE 61753
// begin tmp := CostOfWeapon ( weapon ) ;
61641: LD_ADDR_VAR 0 14
61645: PUSH
61646: LD_VAR 0 18
61650: PPUSH
61651: CALL_OW 451
61655: ST_TO_ADDR
// j := GetBase ( tower ) ;
61656: LD_ADDR_VAR 0 9
61660: PUSH
61661: LD_VAR 0 1
61665: PPUSH
61666: CALL_OW 274
61670: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61671: LD_VAR 0 9
61675: PPUSH
61676: LD_INT 1
61678: PPUSH
61679: CALL_OW 275
61683: PUSH
61684: LD_VAR 0 14
61688: PUSH
61689: LD_INT 1
61691: ARRAY
61692: GREATEREQUAL
61693: PUSH
61694: LD_VAR 0 9
61698: PPUSH
61699: LD_INT 2
61701: PPUSH
61702: CALL_OW 275
61706: PUSH
61707: LD_VAR 0 14
61711: PUSH
61712: LD_INT 2
61714: ARRAY
61715: GREATEREQUAL
61716: AND
61717: PUSH
61718: LD_VAR 0 9
61722: PPUSH
61723: LD_INT 3
61725: PPUSH
61726: CALL_OW 275
61730: PUSH
61731: LD_VAR 0 14
61735: PUSH
61736: LD_INT 3
61738: ARRAY
61739: GREATEREQUAL
61740: AND
61741: IFFALSE 61753
// result := weapon ;
61743: LD_ADDR_VAR 0 3
61747: PUSH
61748: LD_VAR 0 18
61752: ST_TO_ADDR
// end ; end ;
61753: LD_VAR 0 3
61757: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61758: LD_INT 0
61760: PPUSH
61761: PPUSH
// result := true ;
61762: LD_ADDR_VAR 0 3
61766: PUSH
61767: LD_INT 1
61769: ST_TO_ADDR
// if array1 = array2 then
61770: LD_VAR 0 1
61774: PUSH
61775: LD_VAR 0 2
61779: EQUAL
61780: IFFALSE 61840
// begin for i = 1 to array1 do
61782: LD_ADDR_VAR 0 4
61786: PUSH
61787: DOUBLE
61788: LD_INT 1
61790: DEC
61791: ST_TO_ADDR
61792: LD_VAR 0 1
61796: PUSH
61797: FOR_TO
61798: IFFALSE 61836
// if array1 [ i ] <> array2 [ i ] then
61800: LD_VAR 0 1
61804: PUSH
61805: LD_VAR 0 4
61809: ARRAY
61810: PUSH
61811: LD_VAR 0 2
61815: PUSH
61816: LD_VAR 0 4
61820: ARRAY
61821: NONEQUAL
61822: IFFALSE 61834
// begin result := false ;
61824: LD_ADDR_VAR 0 3
61828: PUSH
61829: LD_INT 0
61831: ST_TO_ADDR
// break ;
61832: GO 61836
// end ;
61834: GO 61797
61836: POP
61837: POP
// end else
61838: GO 61848
// result := false ;
61840: LD_ADDR_VAR 0 3
61844: PUSH
61845: LD_INT 0
61847: ST_TO_ADDR
// end ;
61848: LD_VAR 0 3
61852: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61853: LD_INT 0
61855: PPUSH
61856: PPUSH
61857: PPUSH
// pom := GetBase ( fac ) ;
61858: LD_ADDR_VAR 0 5
61862: PUSH
61863: LD_VAR 0 1
61867: PPUSH
61868: CALL_OW 274
61872: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61873: LD_ADDR_VAR 0 4
61877: PUSH
61878: LD_VAR 0 2
61882: PUSH
61883: LD_INT 1
61885: ARRAY
61886: PPUSH
61887: LD_VAR 0 2
61891: PUSH
61892: LD_INT 2
61894: ARRAY
61895: PPUSH
61896: LD_VAR 0 2
61900: PUSH
61901: LD_INT 3
61903: ARRAY
61904: PPUSH
61905: LD_VAR 0 2
61909: PUSH
61910: LD_INT 4
61912: ARRAY
61913: PPUSH
61914: CALL_OW 449
61918: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61919: LD_ADDR_VAR 0 3
61923: PUSH
61924: LD_VAR 0 5
61928: PPUSH
61929: LD_INT 1
61931: PPUSH
61932: CALL_OW 275
61936: PUSH
61937: LD_VAR 0 4
61941: PUSH
61942: LD_INT 1
61944: ARRAY
61945: GREATEREQUAL
61946: PUSH
61947: LD_VAR 0 5
61951: PPUSH
61952: LD_INT 2
61954: PPUSH
61955: CALL_OW 275
61959: PUSH
61960: LD_VAR 0 4
61964: PUSH
61965: LD_INT 2
61967: ARRAY
61968: GREATEREQUAL
61969: AND
61970: PUSH
61971: LD_VAR 0 5
61975: PPUSH
61976: LD_INT 3
61978: PPUSH
61979: CALL_OW 275
61983: PUSH
61984: LD_VAR 0 4
61988: PUSH
61989: LD_INT 3
61991: ARRAY
61992: GREATEREQUAL
61993: AND
61994: ST_TO_ADDR
// end ;
61995: LD_VAR 0 3
61999: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
62000: LD_INT 0
62002: PPUSH
62003: PPUSH
62004: PPUSH
62005: PPUSH
// pom := GetBase ( building ) ;
62006: LD_ADDR_VAR 0 3
62010: PUSH
62011: LD_VAR 0 1
62015: PPUSH
62016: CALL_OW 274
62020: ST_TO_ADDR
// if not pom then
62021: LD_VAR 0 3
62025: NOT
62026: IFFALSE 62030
// exit ;
62028: GO 62200
// btype := GetBType ( building ) ;
62030: LD_ADDR_VAR 0 5
62034: PUSH
62035: LD_VAR 0 1
62039: PPUSH
62040: CALL_OW 266
62044: ST_TO_ADDR
// if btype = b_armoury then
62045: LD_VAR 0 5
62049: PUSH
62050: LD_INT 4
62052: EQUAL
62053: IFFALSE 62063
// btype := b_barracks ;
62055: LD_ADDR_VAR 0 5
62059: PUSH
62060: LD_INT 5
62062: ST_TO_ADDR
// if btype = b_depot then
62063: LD_VAR 0 5
62067: PUSH
62068: LD_INT 0
62070: EQUAL
62071: IFFALSE 62081
// btype := b_warehouse ;
62073: LD_ADDR_VAR 0 5
62077: PUSH
62078: LD_INT 1
62080: ST_TO_ADDR
// if btype = b_workshop then
62081: LD_VAR 0 5
62085: PUSH
62086: LD_INT 2
62088: EQUAL
62089: IFFALSE 62099
// btype := b_factory ;
62091: LD_ADDR_VAR 0 5
62095: PUSH
62096: LD_INT 3
62098: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62099: LD_ADDR_VAR 0 4
62103: PUSH
62104: LD_VAR 0 5
62108: PPUSH
62109: LD_VAR 0 1
62113: PPUSH
62114: CALL_OW 248
62118: PPUSH
62119: CALL_OW 450
62123: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62124: LD_ADDR_VAR 0 2
62128: PUSH
62129: LD_VAR 0 3
62133: PPUSH
62134: LD_INT 1
62136: PPUSH
62137: CALL_OW 275
62141: PUSH
62142: LD_VAR 0 4
62146: PUSH
62147: LD_INT 1
62149: ARRAY
62150: GREATEREQUAL
62151: PUSH
62152: LD_VAR 0 3
62156: PPUSH
62157: LD_INT 2
62159: PPUSH
62160: CALL_OW 275
62164: PUSH
62165: LD_VAR 0 4
62169: PUSH
62170: LD_INT 2
62172: ARRAY
62173: GREATEREQUAL
62174: AND
62175: PUSH
62176: LD_VAR 0 3
62180: PPUSH
62181: LD_INT 3
62183: PPUSH
62184: CALL_OW 275
62188: PUSH
62189: LD_VAR 0 4
62193: PUSH
62194: LD_INT 3
62196: ARRAY
62197: GREATEREQUAL
62198: AND
62199: ST_TO_ADDR
// end ;
62200: LD_VAR 0 2
62204: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
62205: LD_INT 0
62207: PPUSH
62208: PPUSH
62209: PPUSH
// pom := GetBase ( building ) ;
62210: LD_ADDR_VAR 0 4
62214: PUSH
62215: LD_VAR 0 1
62219: PPUSH
62220: CALL_OW 274
62224: ST_TO_ADDR
// if not pom then
62225: LD_VAR 0 4
62229: NOT
62230: IFFALSE 62234
// exit ;
62232: GO 62335
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62234: LD_ADDR_VAR 0 5
62238: PUSH
62239: LD_VAR 0 2
62243: PPUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: CALL_OW 248
62253: PPUSH
62254: CALL_OW 450
62258: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62259: LD_ADDR_VAR 0 3
62263: PUSH
62264: LD_VAR 0 4
62268: PPUSH
62269: LD_INT 1
62271: PPUSH
62272: CALL_OW 275
62276: PUSH
62277: LD_VAR 0 5
62281: PUSH
62282: LD_INT 1
62284: ARRAY
62285: GREATEREQUAL
62286: PUSH
62287: LD_VAR 0 4
62291: PPUSH
62292: LD_INT 2
62294: PPUSH
62295: CALL_OW 275
62299: PUSH
62300: LD_VAR 0 5
62304: PUSH
62305: LD_INT 2
62307: ARRAY
62308: GREATEREQUAL
62309: AND
62310: PUSH
62311: LD_VAR 0 4
62315: PPUSH
62316: LD_INT 3
62318: PPUSH
62319: CALL_OW 275
62323: PUSH
62324: LD_VAR 0 5
62328: PUSH
62329: LD_INT 3
62331: ARRAY
62332: GREATEREQUAL
62333: AND
62334: ST_TO_ADDR
// end ;
62335: LD_VAR 0 3
62339: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
62340: LD_INT 0
62342: PPUSH
62343: PPUSH
62344: PPUSH
62345: PPUSH
62346: PPUSH
62347: PPUSH
62348: PPUSH
62349: PPUSH
62350: PPUSH
62351: PPUSH
// result := false ;
62352: LD_ADDR_VAR 0 6
62356: PUSH
62357: LD_INT 0
62359: ST_TO_ADDR
// if not base or not btype or not x or not y then
62360: LD_VAR 0 1
62364: NOT
62365: PUSH
62366: LD_VAR 0 2
62370: NOT
62371: OR
62372: PUSH
62373: LD_VAR 0 3
62377: NOT
62378: OR
62379: PUSH
62380: LD_VAR 0 4
62384: NOT
62385: OR
62386: IFFALSE 62390
// exit ;
62388: GO 62999
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
62390: LD_ADDR_VAR 0 12
62394: PUSH
62395: LD_VAR 0 2
62399: PPUSH
62400: LD_VAR 0 3
62404: PPUSH
62405: LD_VAR 0 4
62409: PPUSH
62410: LD_VAR 0 5
62414: PPUSH
62415: LD_VAR 0 1
62419: PUSH
62420: LD_INT 1
62422: ARRAY
62423: PPUSH
62424: CALL_OW 248
62428: PPUSH
62429: LD_INT 0
62431: PPUSH
62432: CALL 63836 0 6
62436: ST_TO_ADDR
// if not hexes then
62437: LD_VAR 0 12
62441: NOT
62442: IFFALSE 62446
// exit ;
62444: GO 62999
// for i = 1 to hexes do
62446: LD_ADDR_VAR 0 7
62450: PUSH
62451: DOUBLE
62452: LD_INT 1
62454: DEC
62455: ST_TO_ADDR
62456: LD_VAR 0 12
62460: PUSH
62461: FOR_TO
62462: IFFALSE 62997
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62464: LD_ADDR_VAR 0 11
62468: PUSH
62469: LD_VAR 0 12
62473: PUSH
62474: LD_VAR 0 7
62478: ARRAY
62479: PUSH
62480: LD_INT 1
62482: ARRAY
62483: PPUSH
62484: LD_VAR 0 12
62488: PUSH
62489: LD_VAR 0 7
62493: ARRAY
62494: PUSH
62495: LD_INT 2
62497: ARRAY
62498: PPUSH
62499: CALL_OW 428
62503: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62504: LD_VAR 0 12
62508: PUSH
62509: LD_VAR 0 7
62513: ARRAY
62514: PUSH
62515: LD_INT 1
62517: ARRAY
62518: PPUSH
62519: LD_VAR 0 12
62523: PUSH
62524: LD_VAR 0 7
62528: ARRAY
62529: PUSH
62530: LD_INT 2
62532: ARRAY
62533: PPUSH
62534: CALL_OW 351
62538: PUSH
62539: LD_VAR 0 12
62543: PUSH
62544: LD_VAR 0 7
62548: ARRAY
62549: PUSH
62550: LD_INT 1
62552: ARRAY
62553: PPUSH
62554: LD_VAR 0 12
62558: PUSH
62559: LD_VAR 0 7
62563: ARRAY
62564: PUSH
62565: LD_INT 2
62567: ARRAY
62568: PPUSH
62569: CALL_OW 488
62573: NOT
62574: OR
62575: PUSH
62576: LD_VAR 0 11
62580: PPUSH
62581: CALL_OW 247
62585: PUSH
62586: LD_INT 3
62588: EQUAL
62589: OR
62590: IFFALSE 62596
// exit ;
62592: POP
62593: POP
62594: GO 62999
// if not tmp or not tmp in base then
62596: LD_VAR 0 11
62600: NOT
62601: PUSH
62602: LD_VAR 0 11
62606: PUSH
62607: LD_VAR 0 1
62611: IN
62612: NOT
62613: OR
62614: IFFALSE 62618
// continue ;
62616: GO 62461
// result := true ;
62618: LD_ADDR_VAR 0 6
62622: PUSH
62623: LD_INT 1
62625: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62626: LD_ADDR_VAR 0 15
62630: PUSH
62631: LD_VAR 0 1
62635: PPUSH
62636: LD_INT 22
62638: PUSH
62639: LD_VAR 0 11
62643: PPUSH
62644: CALL_OW 255
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: LD_INT 30
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 30
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PPUSH
62685: CALL_OW 72
62689: ST_TO_ADDR
// if dep then
62690: LD_VAR 0 15
62694: IFFALSE 62830
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62696: LD_ADDR_VAR 0 14
62700: PUSH
62701: LD_VAR 0 15
62705: PUSH
62706: LD_INT 1
62708: ARRAY
62709: PPUSH
62710: CALL_OW 250
62714: PPUSH
62715: LD_VAR 0 15
62719: PUSH
62720: LD_INT 1
62722: ARRAY
62723: PPUSH
62724: CALL_OW 254
62728: PPUSH
62729: LD_INT 5
62731: PPUSH
62732: CALL_OW 272
62736: PUSH
62737: LD_VAR 0 15
62741: PUSH
62742: LD_INT 1
62744: ARRAY
62745: PPUSH
62746: CALL_OW 251
62750: PPUSH
62751: LD_VAR 0 15
62755: PUSH
62756: LD_INT 1
62758: ARRAY
62759: PPUSH
62760: CALL_OW 254
62764: PPUSH
62765: LD_INT 5
62767: PPUSH
62768: CALL_OW 273
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62777: LD_VAR 0 14
62781: PUSH
62782: LD_INT 1
62784: ARRAY
62785: PPUSH
62786: LD_VAR 0 14
62790: PUSH
62791: LD_INT 2
62793: ARRAY
62794: PPUSH
62795: CALL_OW 488
62799: IFFALSE 62830
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62801: LD_VAR 0 11
62805: PPUSH
62806: LD_VAR 0 14
62810: PUSH
62811: LD_INT 1
62813: ARRAY
62814: PPUSH
62815: LD_VAR 0 14
62819: PUSH
62820: LD_INT 2
62822: ARRAY
62823: PPUSH
62824: CALL_OW 111
// continue ;
62828: GO 62461
// end ; end ; r := GetDir ( tmp ) ;
62830: LD_ADDR_VAR 0 13
62834: PUSH
62835: LD_VAR 0 11
62839: PPUSH
62840: CALL_OW 254
62844: ST_TO_ADDR
// if r = 5 then
62845: LD_VAR 0 13
62849: PUSH
62850: LD_INT 5
62852: EQUAL
62853: IFFALSE 62863
// r := 0 ;
62855: LD_ADDR_VAR 0 13
62859: PUSH
62860: LD_INT 0
62862: ST_TO_ADDR
// for j = r to 5 do
62863: LD_ADDR_VAR 0 8
62867: PUSH
62868: DOUBLE
62869: LD_VAR 0 13
62873: DEC
62874: ST_TO_ADDR
62875: LD_INT 5
62877: PUSH
62878: FOR_TO
62879: IFFALSE 62993
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62881: LD_ADDR_VAR 0 9
62885: PUSH
62886: LD_VAR 0 11
62890: PPUSH
62891: CALL_OW 250
62895: PPUSH
62896: LD_VAR 0 8
62900: PPUSH
62901: LD_INT 2
62903: PPUSH
62904: CALL_OW 272
62908: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62909: LD_ADDR_VAR 0 10
62913: PUSH
62914: LD_VAR 0 11
62918: PPUSH
62919: CALL_OW 251
62923: PPUSH
62924: LD_VAR 0 8
62928: PPUSH
62929: LD_INT 2
62931: PPUSH
62932: CALL_OW 273
62936: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62937: LD_VAR 0 9
62941: PPUSH
62942: LD_VAR 0 10
62946: PPUSH
62947: CALL_OW 488
62951: PUSH
62952: LD_VAR 0 9
62956: PPUSH
62957: LD_VAR 0 10
62961: PPUSH
62962: CALL_OW 428
62966: NOT
62967: AND
62968: IFFALSE 62991
// begin ComMoveXY ( tmp , _x , _y ) ;
62970: LD_VAR 0 11
62974: PPUSH
62975: LD_VAR 0 9
62979: PPUSH
62980: LD_VAR 0 10
62984: PPUSH
62985: CALL_OW 111
// break ;
62989: GO 62993
// end ; end ;
62991: GO 62878
62993: POP
62994: POP
// end ;
62995: GO 62461
62997: POP
62998: POP
// end ;
62999: LD_VAR 0 6
63003: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
63004: LD_INT 0
63006: PPUSH
63007: PPUSH
63008: PPUSH
63009: PPUSH
63010: PPUSH
63011: PPUSH
63012: PPUSH
63013: PPUSH
63014: PPUSH
63015: PPUSH
// result := false ;
63016: LD_ADDR_VAR 0 6
63020: PUSH
63021: LD_INT 0
63023: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63024: LD_VAR 0 1
63028: NOT
63029: PUSH
63030: LD_VAR 0 1
63034: PPUSH
63035: CALL_OW 266
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: IN
63050: NOT
63051: OR
63052: PUSH
63053: LD_VAR 0 2
63057: NOT
63058: OR
63059: PUSH
63060: LD_VAR 0 5
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: LD_INT 4
63079: PUSH
63080: LD_INT 5
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: IN
63091: NOT
63092: OR
63093: PUSH
63094: LD_VAR 0 3
63098: PPUSH
63099: LD_VAR 0 4
63103: PPUSH
63104: CALL_OW 488
63108: NOT
63109: OR
63110: IFFALSE 63114
// exit ;
63112: GO 63831
// pom := GetBase ( depot ) ;
63114: LD_ADDR_VAR 0 10
63118: PUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL_OW 274
63128: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63129: LD_ADDR_VAR 0 11
63133: PUSH
63134: LD_VAR 0 2
63138: PPUSH
63139: LD_VAR 0 1
63143: PPUSH
63144: CALL_OW 248
63148: PPUSH
63149: CALL_OW 450
63153: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63154: LD_VAR 0 10
63158: PPUSH
63159: LD_INT 1
63161: PPUSH
63162: CALL_OW 275
63166: PUSH
63167: LD_VAR 0 11
63171: PUSH
63172: LD_INT 1
63174: ARRAY
63175: GREATEREQUAL
63176: PUSH
63177: LD_VAR 0 10
63181: PPUSH
63182: LD_INT 2
63184: PPUSH
63185: CALL_OW 275
63189: PUSH
63190: LD_VAR 0 11
63194: PUSH
63195: LD_INT 2
63197: ARRAY
63198: GREATEREQUAL
63199: AND
63200: PUSH
63201: LD_VAR 0 10
63205: PPUSH
63206: LD_INT 3
63208: PPUSH
63209: CALL_OW 275
63213: PUSH
63214: LD_VAR 0 11
63218: PUSH
63219: LD_INT 3
63221: ARRAY
63222: GREATEREQUAL
63223: AND
63224: NOT
63225: IFFALSE 63229
// exit ;
63227: GO 63831
// if GetBType ( depot ) = b_depot then
63229: LD_VAR 0 1
63233: PPUSH
63234: CALL_OW 266
63238: PUSH
63239: LD_INT 0
63241: EQUAL
63242: IFFALSE 63254
// dist := 28 else
63244: LD_ADDR_VAR 0 14
63248: PUSH
63249: LD_INT 28
63251: ST_TO_ADDR
63252: GO 63262
// dist := 36 ;
63254: LD_ADDR_VAR 0 14
63258: PUSH
63259: LD_INT 36
63261: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63262: LD_VAR 0 1
63266: PPUSH
63267: LD_VAR 0 3
63271: PPUSH
63272: LD_VAR 0 4
63276: PPUSH
63277: CALL_OW 297
63281: PUSH
63282: LD_VAR 0 14
63286: GREATER
63287: IFFALSE 63291
// exit ;
63289: GO 63831
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63291: LD_ADDR_VAR 0 12
63295: PUSH
63296: LD_VAR 0 2
63300: PPUSH
63301: LD_VAR 0 3
63305: PPUSH
63306: LD_VAR 0 4
63310: PPUSH
63311: LD_VAR 0 5
63315: PPUSH
63316: LD_VAR 0 1
63320: PPUSH
63321: CALL_OW 248
63325: PPUSH
63326: LD_INT 0
63328: PPUSH
63329: CALL 63836 0 6
63333: ST_TO_ADDR
// if not hexes then
63334: LD_VAR 0 12
63338: NOT
63339: IFFALSE 63343
// exit ;
63341: GO 63831
// hex := GetHexInfo ( x , y ) ;
63343: LD_ADDR_VAR 0 15
63347: PUSH
63348: LD_VAR 0 3
63352: PPUSH
63353: LD_VAR 0 4
63357: PPUSH
63358: CALL_OW 546
63362: ST_TO_ADDR
// if hex [ 1 ] then
63363: LD_VAR 0 15
63367: PUSH
63368: LD_INT 1
63370: ARRAY
63371: IFFALSE 63375
// exit ;
63373: GO 63831
// height := hex [ 2 ] ;
63375: LD_ADDR_VAR 0 13
63379: PUSH
63380: LD_VAR 0 15
63384: PUSH
63385: LD_INT 2
63387: ARRAY
63388: ST_TO_ADDR
// for i = 1 to hexes do
63389: LD_ADDR_VAR 0 7
63393: PUSH
63394: DOUBLE
63395: LD_INT 1
63397: DEC
63398: ST_TO_ADDR
63399: LD_VAR 0 12
63403: PUSH
63404: FOR_TO
63405: IFFALSE 63735
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63407: LD_VAR 0 12
63411: PUSH
63412: LD_VAR 0 7
63416: ARRAY
63417: PUSH
63418: LD_INT 1
63420: ARRAY
63421: PPUSH
63422: LD_VAR 0 12
63426: PUSH
63427: LD_VAR 0 7
63431: ARRAY
63432: PUSH
63433: LD_INT 2
63435: ARRAY
63436: PPUSH
63437: CALL_OW 488
63441: NOT
63442: PUSH
63443: LD_VAR 0 12
63447: PUSH
63448: LD_VAR 0 7
63452: ARRAY
63453: PUSH
63454: LD_INT 1
63456: ARRAY
63457: PPUSH
63458: LD_VAR 0 12
63462: PUSH
63463: LD_VAR 0 7
63467: ARRAY
63468: PUSH
63469: LD_INT 2
63471: ARRAY
63472: PPUSH
63473: CALL_OW 428
63477: PUSH
63478: LD_INT 0
63480: GREATER
63481: OR
63482: PUSH
63483: LD_VAR 0 12
63487: PUSH
63488: LD_VAR 0 7
63492: ARRAY
63493: PUSH
63494: LD_INT 1
63496: ARRAY
63497: PPUSH
63498: LD_VAR 0 12
63502: PUSH
63503: LD_VAR 0 7
63507: ARRAY
63508: PUSH
63509: LD_INT 2
63511: ARRAY
63512: PPUSH
63513: CALL_OW 351
63517: OR
63518: IFFALSE 63524
// exit ;
63520: POP
63521: POP
63522: GO 63831
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63524: LD_ADDR_VAR 0 8
63528: PUSH
63529: LD_VAR 0 12
63533: PUSH
63534: LD_VAR 0 7
63538: ARRAY
63539: PUSH
63540: LD_INT 1
63542: ARRAY
63543: PPUSH
63544: LD_VAR 0 12
63548: PUSH
63549: LD_VAR 0 7
63553: ARRAY
63554: PUSH
63555: LD_INT 2
63557: ARRAY
63558: PPUSH
63559: CALL_OW 546
63563: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
63564: LD_VAR 0 8
63568: PUSH
63569: LD_INT 1
63571: ARRAY
63572: PUSH
63573: LD_VAR 0 8
63577: PUSH
63578: LD_INT 2
63580: ARRAY
63581: PUSH
63582: LD_VAR 0 13
63586: PUSH
63587: LD_INT 2
63589: PLUS
63590: GREATER
63591: OR
63592: PUSH
63593: LD_VAR 0 8
63597: PUSH
63598: LD_INT 2
63600: ARRAY
63601: PUSH
63602: LD_VAR 0 13
63606: PUSH
63607: LD_INT 2
63609: MINUS
63610: LESS
63611: OR
63612: PUSH
63613: LD_VAR 0 8
63617: PUSH
63618: LD_INT 3
63620: ARRAY
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: LD_INT 8
63627: PUSH
63628: LD_INT 9
63630: PUSH
63631: LD_INT 10
63633: PUSH
63634: LD_INT 11
63636: PUSH
63637: LD_INT 12
63639: PUSH
63640: LD_INT 13
63642: PUSH
63643: LD_INT 16
63645: PUSH
63646: LD_INT 17
63648: PUSH
63649: LD_INT 18
63651: PUSH
63652: LD_INT 19
63654: PUSH
63655: LD_INT 20
63657: PUSH
63658: LD_INT 21
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: IN
63676: NOT
63677: OR
63678: PUSH
63679: LD_VAR 0 8
63683: PUSH
63684: LD_INT 5
63686: ARRAY
63687: NOT
63688: OR
63689: PUSH
63690: LD_VAR 0 8
63694: PUSH
63695: LD_INT 6
63697: ARRAY
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 7
63707: PUSH
63708: LD_INT 9
63710: PUSH
63711: LD_INT 10
63713: PUSH
63714: LD_INT 11
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: IN
63725: NOT
63726: OR
63727: IFFALSE 63733
// exit ;
63729: POP
63730: POP
63731: GO 63831
// end ;
63733: GO 63404
63735: POP
63736: POP
// side := GetSide ( depot ) ;
63737: LD_ADDR_VAR 0 9
63741: PUSH
63742: LD_VAR 0 1
63746: PPUSH
63747: CALL_OW 255
63751: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
63752: LD_VAR 0 9
63756: PPUSH
63757: LD_VAR 0 3
63761: PPUSH
63762: LD_VAR 0 4
63766: PPUSH
63767: LD_INT 20
63769: PPUSH
63770: CALL 56485 0 4
63774: PUSH
63775: LD_INT 4
63777: ARRAY
63778: IFFALSE 63782
// exit ;
63780: GO 63831
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
63782: LD_VAR 0 2
63786: PUSH
63787: LD_INT 29
63789: PUSH
63790: LD_INT 30
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: IN
63797: PUSH
63798: LD_VAR 0 3
63802: PPUSH
63803: LD_VAR 0 4
63807: PPUSH
63808: LD_VAR 0 9
63812: PPUSH
63813: CALL_OW 440
63817: NOT
63818: AND
63819: IFFALSE 63823
// exit ;
63821: GO 63831
// result := true ;
63823: LD_ADDR_VAR 0 6
63827: PUSH
63828: LD_INT 1
63830: ST_TO_ADDR
// end ;
63831: LD_VAR 0 6
63835: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
63836: LD_INT 0
63838: PPUSH
63839: PPUSH
63840: PPUSH
63841: PPUSH
63842: PPUSH
63843: PPUSH
63844: PPUSH
63845: PPUSH
63846: PPUSH
63847: PPUSH
63848: PPUSH
63849: PPUSH
63850: PPUSH
63851: PPUSH
63852: PPUSH
63853: PPUSH
63854: PPUSH
63855: PPUSH
63856: PPUSH
63857: PPUSH
63858: PPUSH
63859: PPUSH
63860: PPUSH
63861: PPUSH
63862: PPUSH
63863: PPUSH
63864: PPUSH
63865: PPUSH
63866: PPUSH
63867: PPUSH
63868: PPUSH
63869: PPUSH
63870: PPUSH
63871: PPUSH
63872: PPUSH
63873: PPUSH
63874: PPUSH
63875: PPUSH
63876: PPUSH
63877: PPUSH
63878: PPUSH
63879: PPUSH
63880: PPUSH
63881: PPUSH
63882: PPUSH
63883: PPUSH
63884: PPUSH
63885: PPUSH
63886: PPUSH
63887: PPUSH
63888: PPUSH
63889: PPUSH
63890: PPUSH
63891: PPUSH
63892: PPUSH
63893: PPUSH
63894: PPUSH
63895: PPUSH
// result = [ ] ;
63896: LD_ADDR_VAR 0 7
63900: PUSH
63901: EMPTY
63902: ST_TO_ADDR
// temp_list = [ ] ;
63903: LD_ADDR_VAR 0 9
63907: PUSH
63908: EMPTY
63909: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
63910: LD_VAR 0 4
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: LD_INT 2
63923: PUSH
63924: LD_INT 3
63926: PUSH
63927: LD_INT 4
63929: PUSH
63930: LD_INT 5
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: IN
63941: NOT
63942: PUSH
63943: LD_VAR 0 1
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: IN
63958: PUSH
63959: LD_VAR 0 5
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 2
63969: PUSH
63970: LD_INT 3
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: LIST
63977: IN
63978: NOT
63979: AND
63980: OR
63981: IFFALSE 63985
// exit ;
63983: GO 82376
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
63985: LD_VAR 0 1
63989: PUSH
63990: LD_INT 6
63992: PUSH
63993: LD_INT 7
63995: PUSH
63996: LD_INT 8
63998: PUSH
63999: LD_INT 13
64001: PUSH
64002: LD_INT 12
64004: PUSH
64005: LD_INT 15
64007: PUSH
64008: LD_INT 11
64010: PUSH
64011: LD_INT 14
64013: PUSH
64014: LD_INT 10
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: IN
64028: IFFALSE 64038
// btype = b_lab ;
64030: LD_ADDR_VAR 0 1
64034: PUSH
64035: LD_INT 6
64037: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64038: LD_VAR 0 6
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: LD_INT 2
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: IN
64057: NOT
64058: PUSH
64059: LD_VAR 0 1
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: LD_INT 3
64075: PUSH
64076: LD_INT 6
64078: PUSH
64079: LD_INT 36
64081: PUSH
64082: LD_INT 4
64084: PUSH
64085: LD_INT 5
64087: PUSH
64088: LD_INT 31
64090: PUSH
64091: LD_INT 32
64093: PUSH
64094: LD_INT 33
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: IN
64110: NOT
64111: PUSH
64112: LD_VAR 0 6
64116: PUSH
64117: LD_INT 1
64119: EQUAL
64120: AND
64121: OR
64122: PUSH
64123: LD_VAR 0 1
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: LD_INT 3
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: IN
64138: NOT
64139: PUSH
64140: LD_VAR 0 6
64144: PUSH
64145: LD_INT 2
64147: EQUAL
64148: AND
64149: OR
64150: IFFALSE 64160
// mode = 0 ;
64152: LD_ADDR_VAR 0 6
64156: PUSH
64157: LD_INT 0
64159: ST_TO_ADDR
// case mode of 0 :
64160: LD_VAR 0 6
64164: PUSH
64165: LD_INT 0
64167: DOUBLE
64168: EQUAL
64169: IFTRUE 64173
64171: GO 75626
64173: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64174: LD_ADDR_VAR 0 11
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 2
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 2
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64367: LD_ADDR_VAR 0 12
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 3
64524: NEG
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 3
64535: NEG
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64563: LD_ADDR_VAR 0 13
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: LD_INT 2
64648: NEG
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: LD_INT 1
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 2
64698: NEG
64699: PUSH
64700: LD_INT 2
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 2
64710: NEG
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 2
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64762: LD_ADDR_VAR 0 14
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 1
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 2
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: LD_INT 2
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 2
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 3
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64958: LD_ADDR_VAR 0 15
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 2
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 2
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 3
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 3
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65151: LD_ADDR_VAR 0 16
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: LD_INT 1
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: LD_INT 1
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: LD_INT 2
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: LD_INT 2
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 2
65286: NEG
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65344: LD_ADDR_VAR 0 17
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: LD_INT 0
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: LD_INT 1
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 2
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 2
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 2
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: LD_INT 1
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: NEG
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 2
65531: NEG
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65574: LD_ADDR_VAR 0 18
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 1
65643: NEG
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: NEG
65656: PUSH
65657: LD_INT 2
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 2
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 2
65709: PUSH
65710: LD_INT 2
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: LD_INT 2
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 2
65750: NEG
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 2
65761: NEG
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65804: LD_ADDR_VAR 0 19
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 0
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: LD_INT 2
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: LD_INT 2
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 1
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 2
65980: NEG
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 2
65991: NEG
65992: PUSH
65993: LD_INT 1
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 2
66003: NEG
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66034: LD_ADDR_VAR 0 20
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: LD_INT 1
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: PUSH
66094: LD_INT 0
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: LD_INT 1
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: LD_INT 2
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 2
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: LD_INT 2
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 2
66210: NEG
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 2
66221: NEG
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66264: LD_ADDR_VAR 0 21
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: LD_INT 1
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 1
66333: NEG
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: LD_INT 2
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: LD_INT 2
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: LD_INT 1
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: LD_INT 2
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: LD_INT 2
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 2
66440: NEG
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 2
66451: NEG
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: LD_INT 2
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66494: LD_ADDR_VAR 0 22
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 1
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 1
66563: NEG
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: LD_INT 2
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: LD_INT 2
66590: NEG
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: LD_INT 2
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: LD_INT 2
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 2
66670: NEG
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 2
66681: NEG
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: LD_INT 2
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66724: LD_ADDR_VAR 0 23
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 0
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 1
66805: NEG
66806: PUSH
66807: LD_INT 2
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 2
66859: PUSH
66860: LD_INT 2
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: LD_INT 2
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: LD_INT 1
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 2
66900: NEG
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 2
66911: NEG
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 2
66923: NEG
66924: PUSH
66925: LD_INT 2
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 2
66935: NEG
66936: PUSH
66937: LD_INT 3
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: LD_INT 3
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: PUSH
66960: LD_INT 2
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: LD_INT 1
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67004: LD_ADDR_VAR 0 24
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 1
67024: NEG
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 1
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: LD_INT 1
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: NEG
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 1
67073: NEG
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: LD_INT 2
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 2
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 2
67139: PUSH
67140: LD_INT 2
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 1
67149: PUSH
67150: LD_INT 2
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 0
67159: PUSH
67160: LD_INT 2
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 1
67169: NEG
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 2
67180: NEG
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 2
67191: NEG
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 2
67203: NEG
67204: PUSH
67205: LD_INT 2
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 1
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: LD_INT 1
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 3
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 3
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67280: LD_ADDR_VAR 0 25
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: LD_INT 1
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: LD_INT 2
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 2
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 2
67415: PUSH
67416: LD_INT 2
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: LD_INT 2
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: LD_INT 1
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 2
67456: NEG
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 2
67467: NEG
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: NEG
67480: PUSH
67481: LD_INT 2
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: LD_INT 3
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 1
67521: PUSH
67522: LD_INT 3
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67554: LD_ADDR_VAR 0 26
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: LD_INT 0
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: LD_INT 1
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 1
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 0
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 1
67612: NEG
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: NEG
67636: PUSH
67637: LD_INT 2
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: LD_INT 2
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: LD_INT 1
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 2
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: LD_INT 2
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 1
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 0
67709: PUSH
67710: LD_INT 2
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 2
67730: NEG
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 2
67753: NEG
67754: PUSH
67755: LD_INT 2
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 2
67765: PUSH
67766: LD_INT 3
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67830: LD_ADDR_VAR 0 27
67834: PUSH
67835: LD_INT 0
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 1
67888: NEG
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 1
67899: NEG
67900: PUSH
67901: LD_INT 1
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 1
67911: NEG
67912: PUSH
67913: LD_INT 2
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: LD_INT 2
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: LD_INT 1
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 2
67965: PUSH
67966: LD_INT 2
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 1
67975: PUSH
67976: LD_INT 2
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: LD_INT 2
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 2
68006: NEG
68007: PUSH
68008: LD_INT 0
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 2
68017: NEG
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 2
68029: NEG
68030: PUSH
68031: LD_INT 2
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: LD_INT 2
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: LD_INT 1
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 3
68063: NEG
68064: PUSH
68065: LD_INT 1
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 3
68075: NEG
68076: PUSH
68077: LD_INT 2
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68110: LD_ADDR_VAR 0 28
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: LD_INT 1
68130: NEG
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: LD_INT 0
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 1
68179: NEG
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: LD_INT 2
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: LD_INT 1
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: LD_INT 2
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: LD_INT 2
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 1
68275: NEG
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 2
68286: NEG
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 2
68297: NEG
68298: PUSH
68299: LD_INT 1
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 2
68309: NEG
68310: PUSH
68311: LD_INT 2
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 2
68321: NEG
68322: PUSH
68323: LD_INT 3
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 1
68333: NEG
68334: PUSH
68335: LD_INT 3
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 3
68345: NEG
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 3
68357: NEG
68358: PUSH
68359: LD_INT 2
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68392: LD_ADDR_VAR 0 29
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: LD_INT 1
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 1
68420: PUSH
68421: LD_INT 0
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 1
68430: PUSH
68431: LD_INT 1
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: LD_INT 1
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 1
68450: NEG
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 1
68473: NEG
68474: PUSH
68475: LD_INT 2
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: LD_INT 2
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: LD_INT 1
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 2
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: PUSH
68518: LD_INT 1
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 1
68527: PUSH
68528: LD_INT 2
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 2
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: NEG
68548: PUSH
68549: LD_INT 1
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 2
68570: NEG
68571: PUSH
68572: LD_INT 2
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 2
68582: NEG
68583: PUSH
68584: LD_INT 3
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 2
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 3
68605: PUSH
68606: LD_INT 1
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 1
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 1
68625: NEG
68626: PUSH
68627: LD_INT 2
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 3
68636: NEG
68637: PUSH
68638: LD_INT 2
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68671: LD_ADDR_VAR 0 30
68675: PUSH
68676: LD_INT 0
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: LD_INT 1
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 1
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 1
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: LD_INT 1
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 1
68729: NEG
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 1
68740: NEG
68741: PUSH
68742: LD_INT 1
68744: NEG
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 1
68752: NEG
68753: PUSH
68754: LD_INT 2
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: LD_INT 2
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 1
68775: PUSH
68776: LD_INT 1
68778: NEG
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: LD_INT 1
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 2
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: LD_INT 2
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 1
68826: NEG
68827: PUSH
68828: LD_INT 1
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 2
68837: NEG
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 2
68848: NEG
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 1
68860: NEG
68861: PUSH
68862: LD_INT 3
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: LD_INT 2
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 3
68883: PUSH
68884: LD_INT 2
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 2
68893: PUSH
68894: LD_INT 3
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 2
68903: NEG
68904: PUSH
68905: LD_INT 1
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 3
68914: NEG
68915: PUSH
68916: LD_INT 1
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68949: LD_ADDR_VAR 0 31
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 0
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: LD_INT 1
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 1
68977: PUSH
68978: LD_INT 0
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 1
68987: PUSH
68988: LD_INT 1
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: LD_INT 1
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 1
69007: NEG
69008: PUSH
69009: LD_INT 0
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: LD_INT 1
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 2
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 2
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: LD_INT 2
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 1
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: LD_INT 2
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 1
69103: NEG
69104: PUSH
69105: LD_INT 1
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 2
69126: NEG
69127: PUSH
69128: LD_INT 2
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 2
69138: NEG
69139: PUSH
69140: LD_INT 3
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 2
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: PUSH
69172: LD_INT 3
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: LD_INT 2
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 3
69192: NEG
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69227: LD_ADDR_VAR 0 32
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 1
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 1
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: LD_INT 1
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 1
69285: NEG
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 1
69296: NEG
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: NEG
69309: PUSH
69310: LD_INT 2
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: LD_INT 2
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: LD_INT 1
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 2
69342: PUSH
69343: LD_INT 1
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 2
69352: PUSH
69353: LD_INT 2
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 1
69416: NEG
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: LD_INT 2
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: LD_INT 2
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: LD_INT 3
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 2
69459: NEG
69460: PUSH
69461: LD_INT 1
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 3
69470: NEG
69471: PUSH
69472: LD_INT 1
69474: NEG
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69505: LD_ADDR_VAR 0 33
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: LD_INT 0
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 1
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: LD_INT 0
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: LD_INT 1
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 1
69563: NEG
69564: PUSH
69565: LD_INT 0
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 1
69574: NEG
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: LD_INT 2
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: LD_INT 1
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 1
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 0
69639: PUSH
69640: LD_INT 2
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 1
69649: NEG
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 2
69660: NEG
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 2
69671: NEG
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 2
69683: NEG
69684: PUSH
69685: LD_INT 2
69687: NEG
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 2
69695: NEG
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 2
69707: PUSH
69708: LD_INT 1
69710: NEG
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 3
69718: PUSH
69719: LD_INT 1
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 1
69728: PUSH
69729: LD_INT 3
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 1
69738: NEG
69739: PUSH
69740: LD_INT 2
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 3
69749: NEG
69750: PUSH
69751: LD_INT 2
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69784: LD_ADDR_VAR 0 34
69788: PUSH
69789: LD_INT 0
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 0
69801: PUSH
69802: LD_INT 1
69804: NEG
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 1
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 1
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: LD_INT 1
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 1
69842: NEG
69843: PUSH
69844: LD_INT 0
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 1
69853: NEG
69854: PUSH
69855: LD_INT 1
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 1
69865: NEG
69866: PUSH
69867: LD_INT 2
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: LD_INT 2
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: LD_INT 1
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 2
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 1
69919: PUSH
69920: LD_INT 2
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 1
69929: NEG
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 2
69940: NEG
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 2
69951: NEG
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 2
69963: NEG
69964: PUSH
69965: LD_INT 2
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 1
69975: NEG
69976: PUSH
69977: LD_INT 3
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: LD_INT 2
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 3
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 2
70008: PUSH
70009: LD_INT 3
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 2
70018: NEG
70019: PUSH
70020: LD_INT 1
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 3
70029: NEG
70030: PUSH
70031: LD_INT 1
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70064: LD_ADDR_VAR 0 35
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: LD_INT 1
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 1
70102: PUSH
70103: LD_INT 1
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 0
70112: PUSH
70113: LD_INT 1
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 1
70122: NEG
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 1
70133: NEG
70134: PUSH
70135: LD_INT 1
70137: NEG
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: LD_INT 1
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 2
70155: NEG
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70176: LD_ADDR_VAR 0 36
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 1
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 0
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 1
70234: NEG
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 1
70245: NEG
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 1
70257: NEG
70258: PUSH
70259: LD_INT 2
70261: NEG
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: LD_INT 2
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70288: LD_ADDR_VAR 0 37
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 0
70305: PUSH
70306: LD_INT 1
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 1
70316: PUSH
70317: LD_INT 0
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 1
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: LD_INT 1
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 1
70346: NEG
70347: PUSH
70348: LD_INT 0
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 1
70357: NEG
70358: PUSH
70359: LD_INT 1
70361: NEG
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 1
70369: PUSH
70370: LD_INT 1
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 1
70380: NEG
70381: PUSH
70382: LD_INT 1
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70400: LD_ADDR_VAR 0 38
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: LD_INT 0
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: LD_INT 1
70420: NEG
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 1
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 1
70438: PUSH
70439: LD_INT 1
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 1
70458: NEG
70459: PUSH
70460: LD_INT 0
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: LD_INT 1
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 2
70481: PUSH
70482: LD_INT 1
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 2
70491: NEG
70492: PUSH
70493: LD_INT 1
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70512: LD_ADDR_VAR 0 39
70516: PUSH
70517: LD_INT 0
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 0
70529: PUSH
70530: LD_INT 1
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 1
70540: PUSH
70541: LD_INT 0
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 1
70550: PUSH
70551: LD_INT 1
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 1
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 1
70570: NEG
70571: PUSH
70572: LD_INT 0
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 1
70581: NEG
70582: PUSH
70583: LD_INT 1
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 1
70593: NEG
70594: PUSH
70595: LD_INT 2
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 1
70605: PUSH
70606: LD_INT 2
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70624: LD_ADDR_VAR 0 40
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: LD_INT 0
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: LD_INT 1
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 1
70662: PUSH
70663: LD_INT 1
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 0
70672: PUSH
70673: LD_INT 1
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 1
70682: NEG
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 1
70693: NEG
70694: PUSH
70695: LD_INT 1
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 1
70705: PUSH
70706: LD_INT 1
70708: NEG
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 1
70716: NEG
70717: PUSH
70718: LD_INT 1
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70736: LD_ADDR_VAR 0 41
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: LD_INT 0
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 0
70753: PUSH
70754: LD_INT 1
70756: NEG
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 1
70764: PUSH
70765: LD_INT 0
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 1
70774: PUSH
70775: LD_INT 1
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 1
70794: NEG
70795: PUSH
70796: LD_INT 0
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 1
70805: NEG
70806: PUSH
70807: LD_INT 1
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 1
70817: NEG
70818: PUSH
70819: LD_INT 2
70821: NEG
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 1
70829: PUSH
70830: LD_INT 1
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 2
70840: PUSH
70841: LD_INT 0
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 2
70850: PUSH
70851: LD_INT 1
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 2
70860: PUSH
70861: LD_INT 2
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 1
70870: PUSH
70871: LD_INT 2
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: LD_INT 1
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 2
70891: NEG
70892: PUSH
70893: LD_INT 0
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 2
70902: NEG
70903: PUSH
70904: LD_INT 1
70906: NEG
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 2
70914: NEG
70915: PUSH
70916: LD_INT 2
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 2
70926: NEG
70927: PUSH
70928: LD_INT 3
70930: NEG
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 2
70938: PUSH
70939: LD_INT 1
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: LD_INT 0
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 3
70959: PUSH
70960: LD_INT 1
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 3
70969: PUSH
70970: LD_INT 2
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 3
70979: PUSH
70980: LD_INT 3
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 2
70989: PUSH
70990: LD_INT 3
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 2
70999: NEG
71000: PUSH
71001: LD_INT 1
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 3
71010: NEG
71011: PUSH
71012: LD_INT 0
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 3
71021: NEG
71022: PUSH
71023: LD_INT 1
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 3
71033: NEG
71034: PUSH
71035: LD_INT 2
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 3
71045: NEG
71046: PUSH
71047: LD_INT 3
71049: NEG
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71086: LD_ADDR_VAR 0 42
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: LD_INT 1
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: PUSH
71115: LD_INT 0
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 1
71124: PUSH
71125: LD_INT 1
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 0
71134: PUSH
71135: LD_INT 1
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 1
71144: NEG
71145: PUSH
71146: LD_INT 0
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 1
71155: NEG
71156: PUSH
71157: LD_INT 1
71159: NEG
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 1
71167: NEG
71168: PUSH
71169: LD_INT 2
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 0
71179: PUSH
71180: LD_INT 2
71182: NEG
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 1
71190: PUSH
71191: LD_INT 1
71193: NEG
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 2
71201: PUSH
71202: LD_INT 1
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 2
71211: PUSH
71212: LD_INT 2
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: LD_INT 2
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: LD_INT 2
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 1
71241: NEG
71242: PUSH
71243: LD_INT 1
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 2
71252: NEG
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 2
71264: NEG
71265: PUSH
71266: LD_INT 2
71268: NEG
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 2
71276: NEG
71277: PUSH
71278: LD_INT 3
71280: NEG
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 1
71288: NEG
71289: PUSH
71290: LD_INT 3
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 0
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 1
71311: PUSH
71312: LD_INT 2
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 3
71322: PUSH
71323: LD_INT 2
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 3
71332: PUSH
71333: LD_INT 3
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 2
71342: PUSH
71343: LD_INT 3
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 1
71352: PUSH
71353: LD_INT 3
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 0
71362: PUSH
71363: LD_INT 3
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 1
71372: NEG
71373: PUSH
71374: LD_INT 2
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 3
71383: NEG
71384: PUSH
71385: LD_INT 2
71387: NEG
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 3
71395: NEG
71396: PUSH
71397: LD_INT 3
71399: NEG
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71436: LD_ADDR_VAR 0 43
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 0
71453: PUSH
71454: LD_INT 1
71456: NEG
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 1
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 1
71474: PUSH
71475: LD_INT 1
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 0
71484: PUSH
71485: LD_INT 1
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 1
71494: NEG
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 1
71505: NEG
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 1
71517: NEG
71518: PUSH
71519: LD_INT 2
71521: NEG
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: LD_INT 2
71532: NEG
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 1
71540: PUSH
71541: LD_INT 1
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 2
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 2
71561: PUSH
71562: LD_INT 1
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 1
71571: PUSH
71572: LD_INT 2
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 0
71581: PUSH
71582: LD_INT 2
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 1
71591: NEG
71592: PUSH
71593: LD_INT 1
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 2
71602: NEG
71603: PUSH
71604: LD_INT 0
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: NEG
71614: PUSH
71615: LD_INT 1
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 1
71625: NEG
71626: PUSH
71627: LD_INT 3
71629: NEG
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 0
71637: PUSH
71638: LD_INT 3
71640: NEG
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 1
71648: PUSH
71649: LD_INT 2
71651: NEG
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 2
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 3
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 3
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 1
71690: PUSH
71691: LD_INT 3
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: LD_INT 3
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 1
71710: NEG
71711: PUSH
71712: LD_INT 2
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 2
71721: NEG
71722: PUSH
71723: LD_INT 1
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 3
71732: NEG
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 3
71743: NEG
71744: PUSH
71745: LD_INT 1
71747: NEG
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71784: LD_ADDR_VAR 0 44
71788: PUSH
71789: LD_INT 0
71791: PUSH
71792: LD_INT 0
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 0
71801: PUSH
71802: LD_INT 1
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 1
71812: PUSH
71813: LD_INT 0
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 1
71822: PUSH
71823: LD_INT 1
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 0
71832: PUSH
71833: LD_INT 1
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 1
71842: NEG
71843: PUSH
71844: LD_INT 0
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 1
71853: NEG
71854: PUSH
71855: LD_INT 1
71857: NEG
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 1
71865: NEG
71866: PUSH
71867: LD_INT 2
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 1
71877: PUSH
71878: LD_INT 1
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 2
71888: PUSH
71889: LD_INT 0
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 2
71898: PUSH
71899: LD_INT 1
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 2
71908: PUSH
71909: LD_INT 2
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 1
71918: PUSH
71919: LD_INT 2
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 1
71928: NEG
71929: PUSH
71930: LD_INT 1
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 2
71939: NEG
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 2
71950: NEG
71951: PUSH
71952: LD_INT 1
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 2
71962: NEG
71963: PUSH
71964: LD_INT 2
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 2
71974: NEG
71975: PUSH
71976: LD_INT 3
71978: NEG
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 2
71986: PUSH
71987: LD_INT 1
71989: NEG
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 3
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 3
72017: PUSH
72018: LD_INT 2
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 3
72027: PUSH
72028: LD_INT 3
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 2
72037: PUSH
72038: LD_INT 3
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 2
72047: NEG
72048: PUSH
72049: LD_INT 1
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 3
72058: NEG
72059: PUSH
72060: LD_INT 0
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 3
72069: NEG
72070: PUSH
72071: LD_INT 1
72073: NEG
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 3
72081: NEG
72082: PUSH
72083: LD_INT 2
72085: NEG
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 3
72093: NEG
72094: PUSH
72095: LD_INT 3
72097: NEG
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72134: LD_ADDR_VAR 0 45
72138: PUSH
72139: LD_INT 0
72141: PUSH
72142: LD_INT 0
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: LD_INT 1
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 1
72162: PUSH
72163: LD_INT 0
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 1
72172: PUSH
72173: LD_INT 1
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: LD_INT 1
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 1
72192: NEG
72193: PUSH
72194: LD_INT 0
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 1
72203: NEG
72204: PUSH
72205: LD_INT 1
72207: NEG
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 1
72215: NEG
72216: PUSH
72217: LD_INT 2
72219: NEG
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 0
72227: PUSH
72228: LD_INT 2
72230: NEG
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 1
72238: PUSH
72239: LD_INT 1
72241: NEG
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 2
72249: PUSH
72250: LD_INT 1
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 2
72259: PUSH
72260: LD_INT 2
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 1
72269: PUSH
72270: LD_INT 2
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 0
72279: PUSH
72280: LD_INT 2
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 1
72289: NEG
72290: PUSH
72291: LD_INT 1
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 2
72300: NEG
72301: PUSH
72302: LD_INT 1
72304: NEG
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 2
72312: NEG
72313: PUSH
72314: LD_INT 2
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 2
72324: NEG
72325: PUSH
72326: LD_INT 3
72328: NEG
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 1
72336: NEG
72337: PUSH
72338: LD_INT 3
72340: NEG
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 0
72348: PUSH
72349: LD_INT 3
72351: NEG
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 1
72359: PUSH
72360: LD_INT 2
72362: NEG
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 3
72370: PUSH
72371: LD_INT 2
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 3
72380: PUSH
72381: LD_INT 3
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 2
72390: PUSH
72391: LD_INT 3
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: LD_INT 3
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 0
72410: PUSH
72411: LD_INT 3
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 1
72420: NEG
72421: PUSH
72422: LD_INT 2
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 3
72431: NEG
72432: PUSH
72433: LD_INT 2
72435: NEG
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 3
72443: NEG
72444: PUSH
72445: LD_INT 3
72447: NEG
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72484: LD_ADDR_VAR 0 46
72488: PUSH
72489: LD_INT 0
72491: PUSH
72492: LD_INT 0
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 0
72501: PUSH
72502: LD_INT 1
72504: NEG
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 1
72512: PUSH
72513: LD_INT 0
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: LD_INT 1
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 0
72532: PUSH
72533: LD_INT 1
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 1
72542: NEG
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 1
72553: NEG
72554: PUSH
72555: LD_INT 1
72557: NEG
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 1
72565: NEG
72566: PUSH
72567: LD_INT 2
72569: NEG
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 0
72577: PUSH
72578: LD_INT 2
72580: NEG
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 1
72588: PUSH
72589: LD_INT 1
72591: NEG
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 2
72599: PUSH
72600: LD_INT 0
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 2
72609: PUSH
72610: LD_INT 1
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 1
72619: PUSH
72620: LD_INT 2
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 0
72629: PUSH
72630: LD_INT 2
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 1
72639: NEG
72640: PUSH
72641: LD_INT 1
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 2
72650: NEG
72651: PUSH
72652: LD_INT 0
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 2
72661: NEG
72662: PUSH
72663: LD_INT 1
72665: NEG
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 1
72673: NEG
72674: PUSH
72675: LD_INT 3
72677: NEG
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 0
72685: PUSH
72686: LD_INT 3
72688: NEG
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: PUSH
72694: LD_INT 1
72696: PUSH
72697: LD_INT 2
72699: NEG
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 2
72707: PUSH
72708: LD_INT 1
72710: NEG
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: PUSH
72716: LD_INT 3
72718: PUSH
72719: LD_INT 0
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 3
72728: PUSH
72729: LD_INT 1
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 1
72738: PUSH
72739: LD_INT 3
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: LD_INT 0
72748: PUSH
72749: LD_INT 3
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 1
72758: NEG
72759: PUSH
72760: LD_INT 2
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 2
72769: NEG
72770: PUSH
72771: LD_INT 1
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 3
72780: NEG
72781: PUSH
72782: LD_INT 0
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 3
72791: NEG
72792: PUSH
72793: LD_INT 1
72795: NEG
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72832: LD_ADDR_VAR 0 47
72836: PUSH
72837: LD_INT 0
72839: PUSH
72840: LD_INT 0
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 0
72849: PUSH
72850: LD_INT 1
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 1
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 1
72870: PUSH
72871: LD_INT 1
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 0
72880: PUSH
72881: LD_INT 1
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 1
72890: NEG
72891: PUSH
72892: LD_INT 0
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 1
72901: NEG
72902: PUSH
72903: LD_INT 1
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 1
72913: NEG
72914: PUSH
72915: LD_INT 2
72917: NEG
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 0
72925: PUSH
72926: LD_INT 2
72928: NEG
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 1
72936: PUSH
72937: LD_INT 1
72939: NEG
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 2
72947: NEG
72948: PUSH
72949: LD_INT 1
72951: NEG
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 2
72959: NEG
72960: PUSH
72961: LD_INT 2
72963: NEG
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72983: LD_ADDR_VAR 0 48
72987: PUSH
72988: LD_INT 0
72990: PUSH
72991: LD_INT 0
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 0
73000: PUSH
73001: LD_INT 1
73003: NEG
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_INT 1
73011: PUSH
73012: LD_INT 0
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 1
73021: PUSH
73022: LD_INT 1
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 0
73031: PUSH
73032: LD_INT 1
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 1
73041: NEG
73042: PUSH
73043: LD_INT 0
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 1
73052: NEG
73053: PUSH
73054: LD_INT 1
73056: NEG
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 1
73064: NEG
73065: PUSH
73066: LD_INT 2
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 0
73076: PUSH
73077: LD_INT 2
73079: NEG
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 1
73087: PUSH
73088: LD_INT 1
73090: NEG
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 2
73098: PUSH
73099: LD_INT 0
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 2
73108: PUSH
73109: LD_INT 1
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73130: LD_ADDR_VAR 0 49
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: LD_INT 0
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 0
73147: PUSH
73148: LD_INT 1
73150: NEG
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PUSH
73156: LD_INT 1
73158: PUSH
73159: LD_INT 0
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 1
73168: PUSH
73169: LD_INT 1
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 0
73178: PUSH
73179: LD_INT 1
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: LD_INT 1
73188: NEG
73189: PUSH
73190: LD_INT 0
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 1
73199: NEG
73200: PUSH
73201: LD_INT 1
73203: NEG
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: PUSH
73209: LD_INT 1
73211: PUSH
73212: LD_INT 1
73214: NEG
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PUSH
73220: LD_INT 2
73222: PUSH
73223: LD_INT 0
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PUSH
73230: LD_INT 2
73232: PUSH
73233: LD_INT 1
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: LD_INT 2
73242: PUSH
73243: LD_INT 2
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 1
73252: PUSH
73253: LD_INT 2
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73274: LD_ADDR_VAR 0 50
73278: PUSH
73279: LD_INT 0
73281: PUSH
73282: LD_INT 0
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: LD_INT 0
73291: PUSH
73292: LD_INT 1
73294: NEG
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: LD_INT 1
73302: PUSH
73303: LD_INT 0
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 1
73312: PUSH
73313: LD_INT 1
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 0
73322: PUSH
73323: LD_INT 1
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 1
73332: NEG
73333: PUSH
73334: LD_INT 0
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 1
73343: NEG
73344: PUSH
73345: LD_INT 1
73347: NEG
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: PUSH
73353: LD_INT 2
73355: PUSH
73356: LD_INT 1
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 2
73365: PUSH
73366: LD_INT 2
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: LD_INT 1
73375: PUSH
73376: LD_INT 2
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 0
73385: PUSH
73386: LD_INT 2
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 1
73395: NEG
73396: PUSH
73397: LD_INT 1
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73418: LD_ADDR_VAR 0 51
73422: PUSH
73423: LD_INT 0
73425: PUSH
73426: LD_INT 0
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 0
73435: PUSH
73436: LD_INT 1
73438: NEG
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 1
73446: PUSH
73447: LD_INT 0
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 1
73456: PUSH
73457: LD_INT 1
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 0
73466: PUSH
73467: LD_INT 1
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 1
73476: NEG
73477: PUSH
73478: LD_INT 0
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 1
73487: NEG
73488: PUSH
73489: LD_INT 1
73491: NEG
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 1
73499: PUSH
73500: LD_INT 2
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 0
73509: PUSH
73510: LD_INT 2
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: LD_INT 1
73519: NEG
73520: PUSH
73521: LD_INT 1
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 2
73530: NEG
73531: PUSH
73532: LD_INT 0
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 2
73541: NEG
73542: PUSH
73543: LD_INT 1
73545: NEG
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73565: LD_ADDR_VAR 0 52
73569: PUSH
73570: LD_INT 0
73572: PUSH
73573: LD_INT 0
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 0
73582: PUSH
73583: LD_INT 1
73585: NEG
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 1
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 1
73603: PUSH
73604: LD_INT 1
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 0
73613: PUSH
73614: LD_INT 1
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 1
73623: NEG
73624: PUSH
73625: LD_INT 0
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 1
73634: NEG
73635: PUSH
73636: LD_INT 1
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 1
73646: NEG
73647: PUSH
73648: LD_INT 2
73650: NEG
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 1
73658: NEG
73659: PUSH
73660: LD_INT 1
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 2
73669: NEG
73670: PUSH
73671: LD_INT 0
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 2
73680: NEG
73681: PUSH
73682: LD_INT 1
73684: NEG
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 2
73692: NEG
73693: PUSH
73694: LD_INT 2
73696: NEG
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73716: LD_ADDR_VAR 0 53
73720: PUSH
73721: LD_INT 0
73723: PUSH
73724: LD_INT 0
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PUSH
73731: LD_INT 0
73733: PUSH
73734: LD_INT 1
73736: NEG
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 1
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 1
73754: PUSH
73755: LD_INT 1
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 0
73764: PUSH
73765: LD_INT 1
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 1
73774: NEG
73775: PUSH
73776: LD_INT 0
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 1
73785: NEG
73786: PUSH
73787: LD_INT 1
73789: NEG
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 1
73797: NEG
73798: PUSH
73799: LD_INT 2
73801: NEG
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 0
73809: PUSH
73810: LD_INT 2
73812: NEG
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 1
73820: PUSH
73821: LD_INT 1
73823: NEG
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: LD_INT 2
73831: PUSH
73832: LD_INT 0
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 2
73841: PUSH
73842: LD_INT 1
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 2
73851: PUSH
73852: LD_INT 2
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: LD_INT 1
73861: PUSH
73862: LD_INT 2
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 0
73871: PUSH
73872: LD_INT 2
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 1
73881: NEG
73882: PUSH
73883: LD_INT 1
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: PUSH
73890: LD_INT 2
73892: NEG
73893: PUSH
73894: LD_INT 0
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 2
73903: NEG
73904: PUSH
73905: LD_INT 1
73907: NEG
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: PUSH
73913: LD_INT 2
73915: NEG
73916: PUSH
73917: LD_INT 2
73919: NEG
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73946: LD_ADDR_VAR 0 54
73950: PUSH
73951: LD_INT 0
73953: PUSH
73954: LD_INT 0
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 0
73963: PUSH
73964: LD_INT 1
73966: NEG
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 1
73974: PUSH
73975: LD_INT 0
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PUSH
73982: LD_INT 1
73984: PUSH
73985: LD_INT 1
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 0
73994: PUSH
73995: LD_INT 1
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 1
74004: NEG
74005: PUSH
74006: LD_INT 0
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 1
74015: NEG
74016: PUSH
74017: LD_INT 1
74019: NEG
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 1
74027: NEG
74028: PUSH
74029: LD_INT 2
74031: NEG
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 0
74039: PUSH
74040: LD_INT 2
74042: NEG
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 1
74050: PUSH
74051: LD_INT 1
74053: NEG
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 2
74061: PUSH
74062: LD_INT 0
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: LD_INT 2
74071: PUSH
74072: LD_INT 1
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 2
74081: PUSH
74082: LD_INT 2
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 1
74091: PUSH
74092: LD_INT 2
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: LD_INT 0
74101: PUSH
74102: LD_INT 2
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: LD_INT 1
74111: NEG
74112: PUSH
74113: LD_INT 1
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: LD_INT 2
74122: NEG
74123: PUSH
74124: LD_INT 0
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: PUSH
74131: LD_INT 2
74133: NEG
74134: PUSH
74135: LD_INT 1
74137: NEG
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 2
74145: NEG
74146: PUSH
74147: LD_INT 2
74149: NEG
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: LIST
74163: LIST
74164: LIST
74165: LIST
74166: LIST
74167: LIST
74168: LIST
74169: LIST
74170: LIST
74171: LIST
74172: LIST
74173: LIST
74174: LIST
74175: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74176: LD_ADDR_VAR 0 55
74180: PUSH
74181: LD_INT 0
74183: PUSH
74184: LD_INT 0
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 0
74193: PUSH
74194: LD_INT 1
74196: NEG
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 1
74204: PUSH
74205: LD_INT 0
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 1
74214: PUSH
74215: LD_INT 1
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 0
74224: PUSH
74225: LD_INT 1
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 1
74234: NEG
74235: PUSH
74236: LD_INT 0
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: PUSH
74243: LD_INT 1
74245: NEG
74246: PUSH
74247: LD_INT 1
74249: NEG
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: LD_INT 1
74257: NEG
74258: PUSH
74259: LD_INT 2
74261: NEG
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 0
74269: PUSH
74270: LD_INT 2
74272: NEG
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 1
74280: PUSH
74281: LD_INT 1
74283: NEG
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 2
74291: PUSH
74292: LD_INT 0
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 2
74301: PUSH
74302: LD_INT 1
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 2
74311: PUSH
74312: LD_INT 2
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: LD_INT 1
74321: PUSH
74322: LD_INT 2
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 0
74331: PUSH
74332: LD_INT 2
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 1
74341: NEG
74342: PUSH
74343: LD_INT 1
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 2
74352: NEG
74353: PUSH
74354: LD_INT 0
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PUSH
74361: LD_INT 2
74363: NEG
74364: PUSH
74365: LD_INT 1
74367: NEG
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 2
74375: NEG
74376: PUSH
74377: LD_INT 2
74379: NEG
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74406: LD_ADDR_VAR 0 56
74410: PUSH
74411: LD_INT 0
74413: PUSH
74414: LD_INT 0
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: PUSH
74421: LD_INT 0
74423: PUSH
74424: LD_INT 1
74426: NEG
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 1
74434: PUSH
74435: LD_INT 0
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 1
74444: PUSH
74445: LD_INT 1
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: LD_INT 0
74454: PUSH
74455: LD_INT 1
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PUSH
74462: LD_INT 1
74464: NEG
74465: PUSH
74466: LD_INT 0
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: LD_INT 1
74475: NEG
74476: PUSH
74477: LD_INT 1
74479: NEG
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 1
74487: NEG
74488: PUSH
74489: LD_INT 2
74491: NEG
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: PUSH
74497: LD_INT 0
74499: PUSH
74500: LD_INT 2
74502: NEG
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: LD_INT 1
74510: PUSH
74511: LD_INT 1
74513: NEG
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: PUSH
74519: LD_INT 2
74521: PUSH
74522: LD_INT 0
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 2
74531: PUSH
74532: LD_INT 1
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: LD_INT 2
74541: PUSH
74542: LD_INT 2
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 1
74551: PUSH
74552: LD_INT 2
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 0
74561: PUSH
74562: LD_INT 2
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 1
74571: NEG
74572: PUSH
74573: LD_INT 1
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_INT 2
74582: NEG
74583: PUSH
74584: LD_INT 0
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 2
74593: NEG
74594: PUSH
74595: LD_INT 1
74597: NEG
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PUSH
74603: LD_INT 2
74605: NEG
74606: PUSH
74607: LD_INT 2
74609: NEG
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74636: LD_ADDR_VAR 0 57
74640: PUSH
74641: LD_INT 0
74643: PUSH
74644: LD_INT 0
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 0
74653: PUSH
74654: LD_INT 1
74656: NEG
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 1
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 1
74674: PUSH
74675: LD_INT 1
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: PUSH
74682: LD_INT 0
74684: PUSH
74685: LD_INT 1
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PUSH
74692: LD_INT 1
74694: NEG
74695: PUSH
74696: LD_INT 0
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: PUSH
74703: LD_INT 1
74705: NEG
74706: PUSH
74707: LD_INT 1
74709: NEG
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 1
74717: NEG
74718: PUSH
74719: LD_INT 2
74721: NEG
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 0
74729: PUSH
74730: LD_INT 2
74732: NEG
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 1
74740: PUSH
74741: LD_INT 1
74743: NEG
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 2
74751: PUSH
74752: LD_INT 0
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 2
74761: PUSH
74762: LD_INT 1
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 2
74771: PUSH
74772: LD_INT 2
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: LD_INT 1
74781: PUSH
74782: LD_INT 2
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 0
74791: PUSH
74792: LD_INT 2
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: LD_INT 1
74801: NEG
74802: PUSH
74803: LD_INT 1
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PUSH
74810: LD_INT 2
74812: NEG
74813: PUSH
74814: LD_INT 0
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 2
74823: NEG
74824: PUSH
74825: LD_INT 1
74827: NEG
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: PUSH
74833: LD_INT 2
74835: NEG
74836: PUSH
74837: LD_INT 2
74839: NEG
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74866: LD_ADDR_VAR 0 58
74870: PUSH
74871: LD_INT 0
74873: PUSH
74874: LD_INT 0
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 0
74883: PUSH
74884: LD_INT 1
74886: NEG
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: LD_INT 1
74894: PUSH
74895: LD_INT 0
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 1
74904: PUSH
74905: LD_INT 1
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: LD_INT 0
74914: PUSH
74915: LD_INT 1
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 1
74924: NEG
74925: PUSH
74926: LD_INT 0
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: LD_INT 1
74935: NEG
74936: PUSH
74937: LD_INT 1
74939: NEG
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 1
74947: NEG
74948: PUSH
74949: LD_INT 2
74951: NEG
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 0
74959: PUSH
74960: LD_INT 2
74962: NEG
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PUSH
74968: LD_INT 1
74970: PUSH
74971: LD_INT 1
74973: NEG
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 2
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 2
74991: PUSH
74992: LD_INT 1
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 2
75001: PUSH
75002: LD_INT 2
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: PUSH
75009: LD_INT 1
75011: PUSH
75012: LD_INT 2
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 0
75021: PUSH
75022: LD_INT 2
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 1
75031: NEG
75032: PUSH
75033: LD_INT 1
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 2
75042: NEG
75043: PUSH
75044: LD_INT 0
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 2
75053: NEG
75054: PUSH
75055: LD_INT 1
75057: NEG
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: LD_INT 2
75065: NEG
75066: PUSH
75067: LD_INT 2
75069: NEG
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75096: LD_ADDR_VAR 0 59
75100: PUSH
75101: LD_INT 0
75103: PUSH
75104: LD_INT 0
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PUSH
75111: LD_INT 0
75113: PUSH
75114: LD_INT 1
75116: NEG
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 1
75124: PUSH
75125: LD_INT 0
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 1
75134: PUSH
75135: LD_INT 1
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 0
75144: PUSH
75145: LD_INT 1
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: PUSH
75152: LD_INT 1
75154: NEG
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 1
75165: NEG
75166: PUSH
75167: LD_INT 1
75169: NEG
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75184: LD_ADDR_VAR 0 60
75188: PUSH
75189: LD_INT 0
75191: PUSH
75192: LD_INT 0
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 0
75201: PUSH
75202: LD_INT 1
75204: NEG
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 1
75212: PUSH
75213: LD_INT 0
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 1
75222: PUSH
75223: LD_INT 1
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: LD_INT 1
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PUSH
75240: LD_INT 1
75242: NEG
75243: PUSH
75244: LD_INT 0
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 1
75253: NEG
75254: PUSH
75255: LD_INT 1
75257: NEG
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75272: LD_ADDR_VAR 0 61
75276: PUSH
75277: LD_INT 0
75279: PUSH
75280: LD_INT 0
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PUSH
75287: LD_INT 0
75289: PUSH
75290: LD_INT 1
75292: NEG
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PUSH
75298: LD_INT 1
75300: PUSH
75301: LD_INT 0
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: PUSH
75308: LD_INT 1
75310: PUSH
75311: LD_INT 1
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: PUSH
75318: LD_INT 0
75320: PUSH
75321: LD_INT 1
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 1
75330: NEG
75331: PUSH
75332: LD_INT 0
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: PUSH
75339: LD_INT 1
75341: NEG
75342: PUSH
75343: LD_INT 1
75345: NEG
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75360: LD_ADDR_VAR 0 62
75364: PUSH
75365: LD_INT 0
75367: PUSH
75368: LD_INT 0
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: PUSH
75375: LD_INT 0
75377: PUSH
75378: LD_INT 1
75380: NEG
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: PUSH
75386: LD_INT 1
75388: PUSH
75389: LD_INT 0
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: LD_INT 1
75398: PUSH
75399: LD_INT 1
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 0
75408: PUSH
75409: LD_INT 1
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 1
75418: NEG
75419: PUSH
75420: LD_INT 0
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: LD_INT 1
75429: NEG
75430: PUSH
75431: LD_INT 1
75433: NEG
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75448: LD_ADDR_VAR 0 63
75452: PUSH
75453: LD_INT 0
75455: PUSH
75456: LD_INT 0
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 0
75465: PUSH
75466: LD_INT 1
75468: NEG
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 1
75476: PUSH
75477: LD_INT 0
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PUSH
75484: LD_INT 1
75486: PUSH
75487: LD_INT 1
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: PUSH
75494: LD_INT 0
75496: PUSH
75497: LD_INT 1
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: LD_INT 1
75506: NEG
75507: PUSH
75508: LD_INT 0
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: PUSH
75515: LD_INT 1
75517: NEG
75518: PUSH
75519: LD_INT 1
75521: NEG
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75536: LD_ADDR_VAR 0 64
75540: PUSH
75541: LD_INT 0
75543: PUSH
75544: LD_INT 0
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PUSH
75551: LD_INT 0
75553: PUSH
75554: LD_INT 1
75556: NEG
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: PUSH
75562: LD_INT 1
75564: PUSH
75565: LD_INT 0
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: PUSH
75572: LD_INT 1
75574: PUSH
75575: LD_INT 1
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: PUSH
75582: LD_INT 0
75584: PUSH
75585: LD_INT 1
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: PUSH
75592: LD_INT 1
75594: NEG
75595: PUSH
75596: LD_INT 0
75598: PUSH
75599: EMPTY
75600: LIST
75601: LIST
75602: PUSH
75603: LD_INT 1
75605: NEG
75606: PUSH
75607: LD_INT 1
75609: NEG
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: LIST
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: ST_TO_ADDR
// end ; 1 :
75624: GO 81521
75626: LD_INT 1
75628: DOUBLE
75629: EQUAL
75630: IFTRUE 75634
75632: GO 78257
75634: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75635: LD_ADDR_VAR 0 11
75639: PUSH
75640: LD_INT 1
75642: NEG
75643: PUSH
75644: LD_INT 3
75646: NEG
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: PUSH
75652: LD_INT 0
75654: PUSH
75655: LD_INT 3
75657: NEG
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: LD_INT 1
75665: PUSH
75666: LD_INT 2
75668: NEG
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: LIST
75678: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75679: LD_ADDR_VAR 0 12
75683: PUSH
75684: LD_INT 2
75686: PUSH
75687: LD_INT 1
75689: NEG
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: PUSH
75695: LD_INT 3
75697: PUSH
75698: LD_INT 0
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 3
75707: PUSH
75708: LD_INT 1
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: LIST
75719: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75720: LD_ADDR_VAR 0 13
75724: PUSH
75725: LD_INT 3
75727: PUSH
75728: LD_INT 2
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PUSH
75735: LD_INT 3
75737: PUSH
75738: LD_INT 3
75740: PUSH
75741: EMPTY
75742: LIST
75743: LIST
75744: PUSH
75745: LD_INT 2
75747: PUSH
75748: LD_INT 3
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: LIST
75759: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75760: LD_ADDR_VAR 0 14
75764: PUSH
75765: LD_INT 1
75767: PUSH
75768: LD_INT 3
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: PUSH
75775: LD_INT 0
75777: PUSH
75778: LD_INT 3
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 1
75787: NEG
75788: PUSH
75789: LD_INT 2
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: LIST
75800: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75801: LD_ADDR_VAR 0 15
75805: PUSH
75806: LD_INT 2
75808: NEG
75809: PUSH
75810: LD_INT 1
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: LD_INT 3
75819: NEG
75820: PUSH
75821: LD_INT 0
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 3
75830: NEG
75831: PUSH
75832: LD_INT 1
75834: NEG
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: LIST
75844: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75845: LD_ADDR_VAR 0 16
75849: PUSH
75850: LD_INT 2
75852: NEG
75853: PUSH
75854: LD_INT 3
75856: NEG
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 3
75864: NEG
75865: PUSH
75866: LD_INT 2
75868: NEG
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: LD_INT 3
75876: NEG
75877: PUSH
75878: LD_INT 3
75880: NEG
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: LIST
75890: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75891: LD_ADDR_VAR 0 17
75895: PUSH
75896: LD_INT 1
75898: NEG
75899: PUSH
75900: LD_INT 3
75902: NEG
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: LD_INT 0
75910: PUSH
75911: LD_INT 3
75913: NEG
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 1
75921: PUSH
75922: LD_INT 2
75924: NEG
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: LIST
75934: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75935: LD_ADDR_VAR 0 18
75939: PUSH
75940: LD_INT 2
75942: PUSH
75943: LD_INT 1
75945: NEG
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: PUSH
75951: LD_INT 3
75953: PUSH
75954: LD_INT 0
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: PUSH
75961: LD_INT 3
75963: PUSH
75964: LD_INT 1
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: LIST
75975: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75976: LD_ADDR_VAR 0 19
75980: PUSH
75981: LD_INT 3
75983: PUSH
75984: LD_INT 2
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: PUSH
75991: LD_INT 3
75993: PUSH
75994: LD_INT 3
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: PUSH
76001: LD_INT 2
76003: PUSH
76004: LD_INT 3
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: LIST
76015: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76016: LD_ADDR_VAR 0 20
76020: PUSH
76021: LD_INT 1
76023: PUSH
76024: LD_INT 3
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: PUSH
76031: LD_INT 0
76033: PUSH
76034: LD_INT 3
76036: PUSH
76037: EMPTY
76038: LIST
76039: LIST
76040: PUSH
76041: LD_INT 1
76043: NEG
76044: PUSH
76045: LD_INT 2
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: LIST
76056: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76057: LD_ADDR_VAR 0 21
76061: PUSH
76062: LD_INT 2
76064: NEG
76065: PUSH
76066: LD_INT 1
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: LD_INT 3
76075: NEG
76076: PUSH
76077: LD_INT 0
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: PUSH
76084: LD_INT 3
76086: NEG
76087: PUSH
76088: LD_INT 1
76090: NEG
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: LIST
76100: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76101: LD_ADDR_VAR 0 22
76105: PUSH
76106: LD_INT 2
76108: NEG
76109: PUSH
76110: LD_INT 3
76112: NEG
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PUSH
76118: LD_INT 3
76120: NEG
76121: PUSH
76122: LD_INT 2
76124: NEG
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: LD_INT 3
76132: NEG
76133: PUSH
76134: LD_INT 3
76136: NEG
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: LIST
76146: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76147: LD_ADDR_VAR 0 23
76151: PUSH
76152: LD_INT 0
76154: PUSH
76155: LD_INT 3
76157: NEG
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: PUSH
76163: LD_INT 1
76165: NEG
76166: PUSH
76167: LD_INT 4
76169: NEG
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: PUSH
76175: LD_INT 1
76177: PUSH
76178: LD_INT 3
76180: NEG
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76191: LD_ADDR_VAR 0 24
76195: PUSH
76196: LD_INT 3
76198: PUSH
76199: LD_INT 0
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: PUSH
76206: LD_INT 3
76208: PUSH
76209: LD_INT 1
76211: NEG
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 4
76219: PUSH
76220: LD_INT 1
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: LIST
76231: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76232: LD_ADDR_VAR 0 25
76236: PUSH
76237: LD_INT 3
76239: PUSH
76240: LD_INT 3
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: PUSH
76247: LD_INT 4
76249: PUSH
76250: LD_INT 3
76252: PUSH
76253: EMPTY
76254: LIST
76255: LIST
76256: PUSH
76257: LD_INT 3
76259: PUSH
76260: LD_INT 4
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: LIST
76271: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76272: LD_ADDR_VAR 0 26
76276: PUSH
76277: LD_INT 0
76279: PUSH
76280: LD_INT 3
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: PUSH
76287: LD_INT 1
76289: PUSH
76290: LD_INT 4
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PUSH
76297: LD_INT 1
76299: NEG
76300: PUSH
76301: LD_INT 3
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: LIST
76312: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76313: LD_ADDR_VAR 0 27
76317: PUSH
76318: LD_INT 3
76320: NEG
76321: PUSH
76322: LD_INT 0
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: PUSH
76329: LD_INT 3
76331: NEG
76332: PUSH
76333: LD_INT 1
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 4
76342: NEG
76343: PUSH
76344: LD_INT 1
76346: NEG
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: LIST
76356: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76357: LD_ADDR_VAR 0 28
76361: PUSH
76362: LD_INT 3
76364: NEG
76365: PUSH
76366: LD_INT 3
76368: NEG
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: LD_INT 3
76376: NEG
76377: PUSH
76378: LD_INT 4
76380: NEG
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: PUSH
76386: LD_INT 4
76388: NEG
76389: PUSH
76390: LD_INT 3
76392: NEG
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: LIST
76402: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76403: LD_ADDR_VAR 0 29
76407: PUSH
76408: LD_INT 1
76410: NEG
76411: PUSH
76412: LD_INT 3
76414: NEG
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PUSH
76420: LD_INT 0
76422: PUSH
76423: LD_INT 3
76425: NEG
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 1
76433: PUSH
76434: LD_INT 2
76436: NEG
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: LD_INT 1
76444: NEG
76445: PUSH
76446: LD_INT 4
76448: NEG
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: PUSH
76454: LD_INT 0
76456: PUSH
76457: LD_INT 4
76459: NEG
76460: PUSH
76461: EMPTY
76462: LIST
76463: LIST
76464: PUSH
76465: LD_INT 1
76467: PUSH
76468: LD_INT 3
76470: NEG
76471: PUSH
76472: EMPTY
76473: LIST
76474: LIST
76475: PUSH
76476: LD_INT 1
76478: NEG
76479: PUSH
76480: LD_INT 5
76482: NEG
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PUSH
76488: LD_INT 0
76490: PUSH
76491: LD_INT 5
76493: NEG
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 1
76501: PUSH
76502: LD_INT 4
76504: NEG
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: LD_INT 1
76512: NEG
76513: PUSH
76514: LD_INT 6
76516: NEG
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: PUSH
76522: LD_INT 0
76524: PUSH
76525: LD_INT 6
76527: NEG
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: PUSH
76533: LD_INT 1
76535: PUSH
76536: LD_INT 5
76538: NEG
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: LIST
76548: LIST
76549: LIST
76550: LIST
76551: LIST
76552: LIST
76553: LIST
76554: LIST
76555: LIST
76556: LIST
76557: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
76558: LD_ADDR_VAR 0 30
76562: PUSH
76563: LD_INT 2
76565: PUSH
76566: LD_INT 1
76568: NEG
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: LD_INT 3
76576: PUSH
76577: LD_INT 0
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 3
76586: PUSH
76587: LD_INT 1
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 3
76596: PUSH
76597: LD_INT 1
76599: NEG
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: LD_INT 4
76607: PUSH
76608: LD_INT 0
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 4
76617: PUSH
76618: LD_INT 1
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 4
76627: PUSH
76628: LD_INT 1
76630: NEG
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 5
76638: PUSH
76639: LD_INT 0
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 5
76648: PUSH
76649: LD_INT 1
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: PUSH
76656: LD_INT 5
76658: PUSH
76659: LD_INT 1
76661: NEG
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: PUSH
76667: LD_INT 6
76669: PUSH
76670: LD_INT 0
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: PUSH
76677: LD_INT 6
76679: PUSH
76680: LD_INT 1
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: EMPTY
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: LIST
76696: LIST
76697: LIST
76698: LIST
76699: LIST
76700: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
76701: LD_ADDR_VAR 0 31
76705: PUSH
76706: LD_INT 3
76708: PUSH
76709: LD_INT 2
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 3
76718: PUSH
76719: LD_INT 3
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: PUSH
76726: LD_INT 2
76728: PUSH
76729: LD_INT 3
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: LD_INT 4
76738: PUSH
76739: LD_INT 3
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: LD_INT 4
76748: PUSH
76749: LD_INT 4
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: PUSH
76756: LD_INT 3
76758: PUSH
76759: LD_INT 4
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PUSH
76766: LD_INT 5
76768: PUSH
76769: LD_INT 4
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 5
76778: PUSH
76779: LD_INT 5
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PUSH
76786: LD_INT 4
76788: PUSH
76789: LD_INT 5
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: PUSH
76796: LD_INT 6
76798: PUSH
76799: LD_INT 5
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 6
76808: PUSH
76809: LD_INT 6
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: PUSH
76816: LD_INT 5
76818: PUSH
76819: LD_INT 6
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
76840: LD_ADDR_VAR 0 32
76844: PUSH
76845: LD_INT 1
76847: PUSH
76848: LD_INT 3
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 0
76857: PUSH
76858: LD_INT 3
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: PUSH
76865: LD_INT 1
76867: NEG
76868: PUSH
76869: LD_INT 2
76871: PUSH
76872: EMPTY
76873: LIST
76874: LIST
76875: PUSH
76876: LD_INT 1
76878: PUSH
76879: LD_INT 4
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: PUSH
76886: LD_INT 0
76888: PUSH
76889: LD_INT 4
76891: PUSH
76892: EMPTY
76893: LIST
76894: LIST
76895: PUSH
76896: LD_INT 1
76898: NEG
76899: PUSH
76900: LD_INT 3
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: LD_INT 1
76909: PUSH
76910: LD_INT 5
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 0
76919: PUSH
76920: LD_INT 5
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 1
76929: NEG
76930: PUSH
76931: LD_INT 4
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 1
76940: PUSH
76941: LD_INT 6
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 0
76950: PUSH
76951: LD_INT 6
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: PUSH
76958: LD_INT 1
76960: NEG
76961: PUSH
76962: LD_INT 5
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: EMPTY
76970: LIST
76971: LIST
76972: LIST
76973: LIST
76974: LIST
76975: LIST
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: LIST
76981: LIST
76982: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
76983: LD_ADDR_VAR 0 33
76987: PUSH
76988: LD_INT 2
76990: NEG
76991: PUSH
76992: LD_INT 1
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PUSH
76999: LD_INT 3
77001: NEG
77002: PUSH
77003: LD_INT 0
77005: PUSH
77006: EMPTY
77007: LIST
77008: LIST
77009: PUSH
77010: LD_INT 3
77012: NEG
77013: PUSH
77014: LD_INT 1
77016: NEG
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: PUSH
77022: LD_INT 3
77024: NEG
77025: PUSH
77026: LD_INT 1
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: PUSH
77033: LD_INT 4
77035: NEG
77036: PUSH
77037: LD_INT 0
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: PUSH
77044: LD_INT 4
77046: NEG
77047: PUSH
77048: LD_INT 1
77050: NEG
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: PUSH
77056: LD_INT 4
77058: NEG
77059: PUSH
77060: LD_INT 1
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: PUSH
77067: LD_INT 5
77069: NEG
77070: PUSH
77071: LD_INT 0
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: LD_INT 5
77080: NEG
77081: PUSH
77082: LD_INT 1
77084: NEG
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: PUSH
77090: LD_INT 5
77092: NEG
77093: PUSH
77094: LD_INT 1
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: LD_INT 6
77103: NEG
77104: PUSH
77105: LD_INT 0
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 6
77114: NEG
77115: PUSH
77116: LD_INT 1
77118: NEG
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: PUSH
77124: EMPTY
77125: LIST
77126: LIST
77127: LIST
77128: LIST
77129: LIST
77130: LIST
77131: LIST
77132: LIST
77133: LIST
77134: LIST
77135: LIST
77136: LIST
77137: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77138: LD_ADDR_VAR 0 34
77142: PUSH
77143: LD_INT 2
77145: NEG
77146: PUSH
77147: LD_INT 3
77149: NEG
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 3
77157: NEG
77158: PUSH
77159: LD_INT 2
77161: NEG
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: PUSH
77167: LD_INT 3
77169: NEG
77170: PUSH
77171: LD_INT 3
77173: NEG
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: PUSH
77179: LD_INT 3
77181: NEG
77182: PUSH
77183: LD_INT 4
77185: NEG
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 4
77193: NEG
77194: PUSH
77195: LD_INT 3
77197: NEG
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 4
77205: NEG
77206: PUSH
77207: LD_INT 4
77209: NEG
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 4
77217: NEG
77218: PUSH
77219: LD_INT 5
77221: NEG
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 5
77229: NEG
77230: PUSH
77231: LD_INT 4
77233: NEG
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: PUSH
77239: LD_INT 5
77241: NEG
77242: PUSH
77243: LD_INT 5
77245: NEG
77246: PUSH
77247: EMPTY
77248: LIST
77249: LIST
77250: PUSH
77251: LD_INT 5
77253: NEG
77254: PUSH
77255: LD_INT 6
77257: NEG
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: PUSH
77263: LD_INT 6
77265: NEG
77266: PUSH
77267: LD_INT 5
77269: NEG
77270: PUSH
77271: EMPTY
77272: LIST
77273: LIST
77274: PUSH
77275: LD_INT 6
77277: NEG
77278: PUSH
77279: LD_INT 6
77281: NEG
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: EMPTY
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77301: LD_ADDR_VAR 0 41
77305: PUSH
77306: LD_INT 0
77308: PUSH
77309: LD_INT 2
77311: NEG
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PUSH
77317: LD_INT 1
77319: NEG
77320: PUSH
77321: LD_INT 3
77323: NEG
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: PUSH
77329: LD_INT 1
77331: PUSH
77332: LD_INT 2
77334: NEG
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: LIST
77344: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77345: LD_ADDR_VAR 0 42
77349: PUSH
77350: LD_INT 2
77352: PUSH
77353: LD_INT 0
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: PUSH
77360: LD_INT 2
77362: PUSH
77363: LD_INT 1
77365: NEG
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: PUSH
77371: LD_INT 3
77373: PUSH
77374: LD_INT 1
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: LIST
77385: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77386: LD_ADDR_VAR 0 43
77390: PUSH
77391: LD_INT 2
77393: PUSH
77394: LD_INT 2
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 3
77403: PUSH
77404: LD_INT 2
77406: PUSH
77407: EMPTY
77408: LIST
77409: LIST
77410: PUSH
77411: LD_INT 2
77413: PUSH
77414: LD_INT 3
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: LIST
77425: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77426: LD_ADDR_VAR 0 44
77430: PUSH
77431: LD_INT 0
77433: PUSH
77434: LD_INT 2
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PUSH
77441: LD_INT 1
77443: PUSH
77444: LD_INT 3
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: PUSH
77451: LD_INT 1
77453: NEG
77454: PUSH
77455: LD_INT 2
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: EMPTY
77463: LIST
77464: LIST
77465: LIST
77466: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77467: LD_ADDR_VAR 0 45
77471: PUSH
77472: LD_INT 2
77474: NEG
77475: PUSH
77476: LD_INT 0
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 2
77485: NEG
77486: PUSH
77487: LD_INT 1
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 3
77496: NEG
77497: PUSH
77498: LD_INT 1
77500: NEG
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: LIST
77510: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
77511: LD_ADDR_VAR 0 46
77515: PUSH
77516: LD_INT 2
77518: NEG
77519: PUSH
77520: LD_INT 2
77522: NEG
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 2
77530: NEG
77531: PUSH
77532: LD_INT 3
77534: NEG
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: LD_INT 3
77542: NEG
77543: PUSH
77544: LD_INT 2
77546: NEG
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: LIST
77556: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
77557: LD_ADDR_VAR 0 47
77561: PUSH
77562: LD_INT 2
77564: NEG
77565: PUSH
77566: LD_INT 3
77568: NEG
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: PUSH
77574: LD_INT 1
77576: NEG
77577: PUSH
77578: LD_INT 3
77580: NEG
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PUSH
77586: EMPTY
77587: LIST
77588: LIST
77589: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77590: LD_ADDR_VAR 0 48
77594: PUSH
77595: LD_INT 1
77597: PUSH
77598: LD_INT 2
77600: NEG
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: PUSH
77606: LD_INT 2
77608: PUSH
77609: LD_INT 1
77611: NEG
77612: PUSH
77613: EMPTY
77614: LIST
77615: LIST
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
77621: LD_ADDR_VAR 0 49
77625: PUSH
77626: LD_INT 3
77628: PUSH
77629: LD_INT 1
77631: PUSH
77632: EMPTY
77633: LIST
77634: LIST
77635: PUSH
77636: LD_INT 3
77638: PUSH
77639: LD_INT 2
77641: PUSH
77642: EMPTY
77643: LIST
77644: LIST
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
77650: LD_ADDR_VAR 0 50
77654: PUSH
77655: LD_INT 2
77657: PUSH
77658: LD_INT 3
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 1
77667: PUSH
77668: LD_INT 3
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
77679: LD_ADDR_VAR 0 51
77683: PUSH
77684: LD_INT 1
77686: NEG
77687: PUSH
77688: LD_INT 2
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PUSH
77695: LD_INT 2
77697: NEG
77698: PUSH
77699: LD_INT 1
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
77710: LD_ADDR_VAR 0 52
77714: PUSH
77715: LD_INT 3
77717: NEG
77718: PUSH
77719: LD_INT 1
77721: NEG
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: LD_INT 3
77729: NEG
77730: PUSH
77731: LD_INT 2
77733: NEG
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: PUSH
77739: EMPTY
77740: LIST
77741: LIST
77742: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
77743: LD_ADDR_VAR 0 53
77747: PUSH
77748: LD_INT 1
77750: NEG
77751: PUSH
77752: LD_INT 3
77754: NEG
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: PUSH
77760: LD_INT 0
77762: PUSH
77763: LD_INT 3
77765: NEG
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 1
77773: PUSH
77774: LD_INT 2
77776: NEG
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: LIST
77786: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
77787: LD_ADDR_VAR 0 54
77791: PUSH
77792: LD_INT 2
77794: PUSH
77795: LD_INT 1
77797: NEG
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: PUSH
77803: LD_INT 3
77805: PUSH
77806: LD_INT 0
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PUSH
77813: LD_INT 3
77815: PUSH
77816: LD_INT 1
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: PUSH
77823: EMPTY
77824: LIST
77825: LIST
77826: LIST
77827: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
77828: LD_ADDR_VAR 0 55
77832: PUSH
77833: LD_INT 3
77835: PUSH
77836: LD_INT 2
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: PUSH
77843: LD_INT 3
77845: PUSH
77846: LD_INT 3
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: PUSH
77853: LD_INT 2
77855: PUSH
77856: LD_INT 3
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: LIST
77867: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
77868: LD_ADDR_VAR 0 56
77872: PUSH
77873: LD_INT 1
77875: PUSH
77876: LD_INT 3
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: LD_INT 0
77885: PUSH
77886: LD_INT 3
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: LD_INT 1
77895: NEG
77896: PUSH
77897: LD_INT 2
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: LIST
77908: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77909: LD_ADDR_VAR 0 57
77913: PUSH
77914: LD_INT 2
77916: NEG
77917: PUSH
77918: LD_INT 1
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PUSH
77925: LD_INT 3
77927: NEG
77928: PUSH
77929: LD_INT 0
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 3
77938: NEG
77939: PUSH
77940: LD_INT 1
77942: NEG
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: LIST
77952: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77953: LD_ADDR_VAR 0 58
77957: PUSH
77958: LD_INT 2
77960: NEG
77961: PUSH
77962: LD_INT 3
77964: NEG
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PUSH
77970: LD_INT 3
77972: NEG
77973: PUSH
77974: LD_INT 2
77976: NEG
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PUSH
77982: LD_INT 3
77984: NEG
77985: PUSH
77986: LD_INT 3
77988: NEG
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: LIST
77998: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
77999: LD_ADDR_VAR 0 59
78003: PUSH
78004: LD_INT 1
78006: NEG
78007: PUSH
78008: LD_INT 2
78010: NEG
78011: PUSH
78012: EMPTY
78013: LIST
78014: LIST
78015: PUSH
78016: LD_INT 0
78018: PUSH
78019: LD_INT 2
78021: NEG
78022: PUSH
78023: EMPTY
78024: LIST
78025: LIST
78026: PUSH
78027: LD_INT 1
78029: PUSH
78030: LD_INT 1
78032: NEG
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: LIST
78042: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78043: LD_ADDR_VAR 0 60
78047: PUSH
78048: LD_INT 1
78050: PUSH
78051: LD_INT 1
78053: NEG
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: PUSH
78059: LD_INT 2
78061: PUSH
78062: LD_INT 0
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: PUSH
78069: LD_INT 2
78071: PUSH
78072: LD_INT 1
78074: PUSH
78075: EMPTY
78076: LIST
78077: LIST
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: LIST
78083: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78084: LD_ADDR_VAR 0 61
78088: PUSH
78089: LD_INT 2
78091: PUSH
78092: LD_INT 1
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: PUSH
78099: LD_INT 2
78101: PUSH
78102: LD_INT 2
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: PUSH
78109: LD_INT 1
78111: PUSH
78112: LD_INT 2
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: LIST
78123: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78124: LD_ADDR_VAR 0 62
78128: PUSH
78129: LD_INT 1
78131: PUSH
78132: LD_INT 2
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: PUSH
78139: LD_INT 0
78141: PUSH
78142: LD_INT 2
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 1
78151: NEG
78152: PUSH
78153: LD_INT 1
78155: PUSH
78156: EMPTY
78157: LIST
78158: LIST
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: LIST
78164: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78165: LD_ADDR_VAR 0 63
78169: PUSH
78170: LD_INT 1
78172: NEG
78173: PUSH
78174: LD_INT 1
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: PUSH
78181: LD_INT 2
78183: NEG
78184: PUSH
78185: LD_INT 0
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: PUSH
78192: LD_INT 2
78194: NEG
78195: PUSH
78196: LD_INT 1
78198: NEG
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: LIST
78208: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78209: LD_ADDR_VAR 0 64
78213: PUSH
78214: LD_INT 1
78216: NEG
78217: PUSH
78218: LD_INT 2
78220: NEG
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: PUSH
78226: LD_INT 2
78228: NEG
78229: PUSH
78230: LD_INT 1
78232: NEG
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: PUSH
78238: LD_INT 2
78240: NEG
78241: PUSH
78242: LD_INT 2
78244: NEG
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: LIST
78254: ST_TO_ADDR
// end ; 2 :
78255: GO 81521
78257: LD_INT 2
78259: DOUBLE
78260: EQUAL
78261: IFTRUE 78265
78263: GO 81520
78265: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78266: LD_ADDR_VAR 0 29
78270: PUSH
78271: LD_INT 4
78273: PUSH
78274: LD_INT 0
78276: PUSH
78277: EMPTY
78278: LIST
78279: LIST
78280: PUSH
78281: LD_INT 4
78283: PUSH
78284: LD_INT 1
78286: NEG
78287: PUSH
78288: EMPTY
78289: LIST
78290: LIST
78291: PUSH
78292: LD_INT 5
78294: PUSH
78295: LD_INT 0
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: PUSH
78302: LD_INT 5
78304: PUSH
78305: LD_INT 1
78307: PUSH
78308: EMPTY
78309: LIST
78310: LIST
78311: PUSH
78312: LD_INT 4
78314: PUSH
78315: LD_INT 1
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: PUSH
78322: LD_INT 3
78324: PUSH
78325: LD_INT 0
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: LD_INT 3
78334: PUSH
78335: LD_INT 1
78337: NEG
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: PUSH
78343: LD_INT 3
78345: PUSH
78346: LD_INT 2
78348: NEG
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: PUSH
78354: LD_INT 5
78356: PUSH
78357: LD_INT 2
78359: PUSH
78360: EMPTY
78361: LIST
78362: LIST
78363: PUSH
78364: LD_INT 3
78366: PUSH
78367: LD_INT 3
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: PUSH
78374: LD_INT 3
78376: PUSH
78377: LD_INT 2
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: PUSH
78384: LD_INT 4
78386: PUSH
78387: LD_INT 3
78389: PUSH
78390: EMPTY
78391: LIST
78392: LIST
78393: PUSH
78394: LD_INT 4
78396: PUSH
78397: LD_INT 4
78399: PUSH
78400: EMPTY
78401: LIST
78402: LIST
78403: PUSH
78404: LD_INT 3
78406: PUSH
78407: LD_INT 4
78409: PUSH
78410: EMPTY
78411: LIST
78412: LIST
78413: PUSH
78414: LD_INT 2
78416: PUSH
78417: LD_INT 3
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: PUSH
78424: LD_INT 2
78426: PUSH
78427: LD_INT 2
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: PUSH
78434: LD_INT 4
78436: PUSH
78437: LD_INT 2
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: PUSH
78444: LD_INT 2
78446: PUSH
78447: LD_INT 4
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PUSH
78454: LD_INT 0
78456: PUSH
78457: LD_INT 4
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: PUSH
78464: LD_INT 0
78466: PUSH
78467: LD_INT 3
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PUSH
78474: LD_INT 1
78476: PUSH
78477: LD_INT 4
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PUSH
78484: LD_INT 1
78486: PUSH
78487: LD_INT 5
78489: PUSH
78490: EMPTY
78491: LIST
78492: LIST
78493: PUSH
78494: LD_INT 0
78496: PUSH
78497: LD_INT 5
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: PUSH
78504: LD_INT 1
78506: NEG
78507: PUSH
78508: LD_INT 4
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: PUSH
78515: LD_INT 1
78517: NEG
78518: PUSH
78519: LD_INT 3
78521: PUSH
78522: EMPTY
78523: LIST
78524: LIST
78525: PUSH
78526: LD_INT 2
78528: PUSH
78529: LD_INT 5
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PUSH
78536: LD_INT 2
78538: NEG
78539: PUSH
78540: LD_INT 3
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PUSH
78547: LD_INT 3
78549: NEG
78550: PUSH
78551: LD_INT 0
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PUSH
78558: LD_INT 3
78560: NEG
78561: PUSH
78562: LD_INT 1
78564: NEG
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 2
78572: NEG
78573: PUSH
78574: LD_INT 0
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: LD_INT 2
78583: NEG
78584: PUSH
78585: LD_INT 1
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PUSH
78592: LD_INT 3
78594: NEG
78595: PUSH
78596: LD_INT 1
78598: PUSH
78599: EMPTY
78600: LIST
78601: LIST
78602: PUSH
78603: LD_INT 4
78605: NEG
78606: PUSH
78607: LD_INT 0
78609: PUSH
78610: EMPTY
78611: LIST
78612: LIST
78613: PUSH
78614: LD_INT 4
78616: NEG
78617: PUSH
78618: LD_INT 1
78620: NEG
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: PUSH
78626: LD_INT 4
78628: NEG
78629: PUSH
78630: LD_INT 2
78632: NEG
78633: PUSH
78634: EMPTY
78635: LIST
78636: LIST
78637: PUSH
78638: LD_INT 2
78640: NEG
78641: PUSH
78642: LD_INT 2
78644: PUSH
78645: EMPTY
78646: LIST
78647: LIST
78648: PUSH
78649: LD_INT 4
78651: NEG
78652: PUSH
78653: LD_INT 4
78655: NEG
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: PUSH
78661: LD_INT 4
78663: NEG
78664: PUSH
78665: LD_INT 5
78667: NEG
78668: PUSH
78669: EMPTY
78670: LIST
78671: LIST
78672: PUSH
78673: LD_INT 3
78675: NEG
78676: PUSH
78677: LD_INT 4
78679: NEG
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: PUSH
78685: LD_INT 3
78687: NEG
78688: PUSH
78689: LD_INT 3
78691: NEG
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PUSH
78697: LD_INT 4
78699: NEG
78700: PUSH
78701: LD_INT 3
78703: NEG
78704: PUSH
78705: EMPTY
78706: LIST
78707: LIST
78708: PUSH
78709: LD_INT 5
78711: NEG
78712: PUSH
78713: LD_INT 4
78715: NEG
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: PUSH
78721: LD_INT 5
78723: NEG
78724: PUSH
78725: LD_INT 5
78727: NEG
78728: PUSH
78729: EMPTY
78730: LIST
78731: LIST
78732: PUSH
78733: LD_INT 3
78735: NEG
78736: PUSH
78737: LD_INT 5
78739: NEG
78740: PUSH
78741: EMPTY
78742: LIST
78743: LIST
78744: PUSH
78745: LD_INT 5
78747: NEG
78748: PUSH
78749: LD_INT 3
78751: NEG
78752: PUSH
78753: EMPTY
78754: LIST
78755: LIST
78756: PUSH
78757: EMPTY
78758: LIST
78759: LIST
78760: LIST
78761: LIST
78762: LIST
78763: LIST
78764: LIST
78765: LIST
78766: LIST
78767: LIST
78768: LIST
78769: LIST
78770: LIST
78771: LIST
78772: LIST
78773: LIST
78774: LIST
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: LIST
78791: LIST
78792: LIST
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
78804: LD_ADDR_VAR 0 30
78808: PUSH
78809: LD_INT 4
78811: PUSH
78812: LD_INT 4
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 4
78821: PUSH
78822: LD_INT 3
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 5
78831: PUSH
78832: LD_INT 4
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 5
78841: PUSH
78842: LD_INT 5
78844: PUSH
78845: EMPTY
78846: LIST
78847: LIST
78848: PUSH
78849: LD_INT 4
78851: PUSH
78852: LD_INT 5
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: PUSH
78859: LD_INT 3
78861: PUSH
78862: LD_INT 4
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: LD_INT 3
78871: PUSH
78872: LD_INT 3
78874: PUSH
78875: EMPTY
78876: LIST
78877: LIST
78878: PUSH
78879: LD_INT 5
78881: PUSH
78882: LD_INT 3
78884: PUSH
78885: EMPTY
78886: LIST
78887: LIST
78888: PUSH
78889: LD_INT 3
78891: PUSH
78892: LD_INT 5
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: PUSH
78899: LD_INT 0
78901: PUSH
78902: LD_INT 3
78904: PUSH
78905: EMPTY
78906: LIST
78907: LIST
78908: PUSH
78909: LD_INT 0
78911: PUSH
78912: LD_INT 2
78914: PUSH
78915: EMPTY
78916: LIST
78917: LIST
78918: PUSH
78919: LD_INT 1
78921: PUSH
78922: LD_INT 3
78924: PUSH
78925: EMPTY
78926: LIST
78927: LIST
78928: PUSH
78929: LD_INT 1
78931: PUSH
78932: LD_INT 4
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: PUSH
78939: LD_INT 0
78941: PUSH
78942: LD_INT 4
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: PUSH
78949: LD_INT 1
78951: NEG
78952: PUSH
78953: LD_INT 3
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PUSH
78960: LD_INT 1
78962: NEG
78963: PUSH
78964: LD_INT 2
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: PUSH
78971: LD_INT 2
78973: PUSH
78974: LD_INT 4
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: PUSH
78981: LD_INT 2
78983: NEG
78984: PUSH
78985: LD_INT 2
78987: PUSH
78988: EMPTY
78989: LIST
78990: LIST
78991: PUSH
78992: LD_INT 4
78994: NEG
78995: PUSH
78996: LD_INT 0
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: PUSH
79003: LD_INT 4
79005: NEG
79006: PUSH
79007: LD_INT 1
79009: NEG
79010: PUSH
79011: EMPTY
79012: LIST
79013: LIST
79014: PUSH
79015: LD_INT 3
79017: NEG
79018: PUSH
79019: LD_INT 0
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: PUSH
79026: LD_INT 3
79028: NEG
79029: PUSH
79030: LD_INT 1
79032: PUSH
79033: EMPTY
79034: LIST
79035: LIST
79036: PUSH
79037: LD_INT 4
79039: NEG
79040: PUSH
79041: LD_INT 1
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_INT 5
79050: NEG
79051: PUSH
79052: LD_INT 0
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: PUSH
79059: LD_INT 5
79061: NEG
79062: PUSH
79063: LD_INT 1
79065: NEG
79066: PUSH
79067: EMPTY
79068: LIST
79069: LIST
79070: PUSH
79071: LD_INT 5
79073: NEG
79074: PUSH
79075: LD_INT 2
79077: NEG
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: PUSH
79083: LD_INT 3
79085: NEG
79086: PUSH
79087: LD_INT 2
79089: PUSH
79090: EMPTY
79091: LIST
79092: LIST
79093: PUSH
79094: LD_INT 3
79096: NEG
79097: PUSH
79098: LD_INT 3
79100: NEG
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PUSH
79106: LD_INT 3
79108: NEG
79109: PUSH
79110: LD_INT 4
79112: NEG
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: PUSH
79118: LD_INT 2
79120: NEG
79121: PUSH
79122: LD_INT 3
79124: NEG
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: PUSH
79130: LD_INT 2
79132: NEG
79133: PUSH
79134: LD_INT 2
79136: NEG
79137: PUSH
79138: EMPTY
79139: LIST
79140: LIST
79141: PUSH
79142: LD_INT 3
79144: NEG
79145: PUSH
79146: LD_INT 2
79148: NEG
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 4
79156: NEG
79157: PUSH
79158: LD_INT 3
79160: NEG
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: PUSH
79166: LD_INT 4
79168: NEG
79169: PUSH
79170: LD_INT 4
79172: NEG
79173: PUSH
79174: EMPTY
79175: LIST
79176: LIST
79177: PUSH
79178: LD_INT 2
79180: NEG
79181: PUSH
79182: LD_INT 4
79184: NEG
79185: PUSH
79186: EMPTY
79187: LIST
79188: LIST
79189: PUSH
79190: LD_INT 4
79192: NEG
79193: PUSH
79194: LD_INT 2
79196: NEG
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 0
79204: PUSH
79205: LD_INT 4
79207: NEG
79208: PUSH
79209: EMPTY
79210: LIST
79211: LIST
79212: PUSH
79213: LD_INT 0
79215: PUSH
79216: LD_INT 5
79218: NEG
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PUSH
79224: LD_INT 1
79226: PUSH
79227: LD_INT 4
79229: NEG
79230: PUSH
79231: EMPTY
79232: LIST
79233: LIST
79234: PUSH
79235: LD_INT 1
79237: PUSH
79238: LD_INT 3
79240: NEG
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: PUSH
79246: LD_INT 0
79248: PUSH
79249: LD_INT 3
79251: NEG
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 1
79259: NEG
79260: PUSH
79261: LD_INT 4
79263: NEG
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PUSH
79269: LD_INT 1
79271: NEG
79272: PUSH
79273: LD_INT 5
79275: NEG
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 2
79283: PUSH
79284: LD_INT 3
79286: NEG
79287: PUSH
79288: EMPTY
79289: LIST
79290: LIST
79291: PUSH
79292: LD_INT 2
79294: NEG
79295: PUSH
79296: LD_INT 5
79298: NEG
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79351: LD_ADDR_VAR 0 31
79355: PUSH
79356: LD_INT 0
79358: PUSH
79359: LD_INT 4
79361: PUSH
79362: EMPTY
79363: LIST
79364: LIST
79365: PUSH
79366: LD_INT 0
79368: PUSH
79369: LD_INT 3
79371: PUSH
79372: EMPTY
79373: LIST
79374: LIST
79375: PUSH
79376: LD_INT 1
79378: PUSH
79379: LD_INT 4
79381: PUSH
79382: EMPTY
79383: LIST
79384: LIST
79385: PUSH
79386: LD_INT 1
79388: PUSH
79389: LD_INT 5
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: PUSH
79396: LD_INT 0
79398: PUSH
79399: LD_INT 5
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: PUSH
79406: LD_INT 1
79408: NEG
79409: PUSH
79410: LD_INT 4
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: LD_INT 1
79419: NEG
79420: PUSH
79421: LD_INT 3
79423: PUSH
79424: EMPTY
79425: LIST
79426: LIST
79427: PUSH
79428: LD_INT 2
79430: PUSH
79431: LD_INT 5
79433: PUSH
79434: EMPTY
79435: LIST
79436: LIST
79437: PUSH
79438: LD_INT 2
79440: NEG
79441: PUSH
79442: LD_INT 3
79444: PUSH
79445: EMPTY
79446: LIST
79447: LIST
79448: PUSH
79449: LD_INT 3
79451: NEG
79452: PUSH
79453: LD_INT 0
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 3
79462: NEG
79463: PUSH
79464: LD_INT 1
79466: NEG
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: LD_INT 2
79474: NEG
79475: PUSH
79476: LD_INT 0
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PUSH
79483: LD_INT 2
79485: NEG
79486: PUSH
79487: LD_INT 1
79489: PUSH
79490: EMPTY
79491: LIST
79492: LIST
79493: PUSH
79494: LD_INT 3
79496: NEG
79497: PUSH
79498: LD_INT 1
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: LD_INT 4
79507: NEG
79508: PUSH
79509: LD_INT 0
79511: PUSH
79512: EMPTY
79513: LIST
79514: LIST
79515: PUSH
79516: LD_INT 4
79518: NEG
79519: PUSH
79520: LD_INT 1
79522: NEG
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 4
79530: NEG
79531: PUSH
79532: LD_INT 2
79534: NEG
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: PUSH
79540: LD_INT 2
79542: NEG
79543: PUSH
79544: LD_INT 2
79546: PUSH
79547: EMPTY
79548: LIST
79549: LIST
79550: PUSH
79551: LD_INT 4
79553: NEG
79554: PUSH
79555: LD_INT 4
79557: NEG
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 4
79565: NEG
79566: PUSH
79567: LD_INT 5
79569: NEG
79570: PUSH
79571: EMPTY
79572: LIST
79573: LIST
79574: PUSH
79575: LD_INT 3
79577: NEG
79578: PUSH
79579: LD_INT 4
79581: NEG
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 3
79589: NEG
79590: PUSH
79591: LD_INT 3
79593: NEG
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: PUSH
79599: LD_INT 4
79601: NEG
79602: PUSH
79603: LD_INT 3
79605: NEG
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: PUSH
79611: LD_INT 5
79613: NEG
79614: PUSH
79615: LD_INT 4
79617: NEG
79618: PUSH
79619: EMPTY
79620: LIST
79621: LIST
79622: PUSH
79623: LD_INT 5
79625: NEG
79626: PUSH
79627: LD_INT 5
79629: NEG
79630: PUSH
79631: EMPTY
79632: LIST
79633: LIST
79634: PUSH
79635: LD_INT 3
79637: NEG
79638: PUSH
79639: LD_INT 5
79641: NEG
79642: PUSH
79643: EMPTY
79644: LIST
79645: LIST
79646: PUSH
79647: LD_INT 5
79649: NEG
79650: PUSH
79651: LD_INT 3
79653: NEG
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: PUSH
79659: LD_INT 0
79661: PUSH
79662: LD_INT 3
79664: NEG
79665: PUSH
79666: EMPTY
79667: LIST
79668: LIST
79669: PUSH
79670: LD_INT 0
79672: PUSH
79673: LD_INT 4
79675: NEG
79676: PUSH
79677: EMPTY
79678: LIST
79679: LIST
79680: PUSH
79681: LD_INT 1
79683: PUSH
79684: LD_INT 3
79686: NEG
79687: PUSH
79688: EMPTY
79689: LIST
79690: LIST
79691: PUSH
79692: LD_INT 1
79694: PUSH
79695: LD_INT 2
79697: NEG
79698: PUSH
79699: EMPTY
79700: LIST
79701: LIST
79702: PUSH
79703: LD_INT 0
79705: PUSH
79706: LD_INT 2
79708: NEG
79709: PUSH
79710: EMPTY
79711: LIST
79712: LIST
79713: PUSH
79714: LD_INT 1
79716: NEG
79717: PUSH
79718: LD_INT 3
79720: NEG
79721: PUSH
79722: EMPTY
79723: LIST
79724: LIST
79725: PUSH
79726: LD_INT 1
79728: NEG
79729: PUSH
79730: LD_INT 4
79732: NEG
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: LD_INT 2
79740: PUSH
79741: LD_INT 2
79743: NEG
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PUSH
79749: LD_INT 2
79751: NEG
79752: PUSH
79753: LD_INT 4
79755: NEG
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PUSH
79761: LD_INT 4
79763: PUSH
79764: LD_INT 0
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: PUSH
79771: LD_INT 4
79773: PUSH
79774: LD_INT 1
79776: NEG
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: PUSH
79782: LD_INT 5
79784: PUSH
79785: LD_INT 0
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: PUSH
79792: LD_INT 5
79794: PUSH
79795: LD_INT 1
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: PUSH
79802: LD_INT 4
79804: PUSH
79805: LD_INT 1
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: LD_INT 3
79814: PUSH
79815: LD_INT 0
79817: PUSH
79818: EMPTY
79819: LIST
79820: LIST
79821: PUSH
79822: LD_INT 3
79824: PUSH
79825: LD_INT 1
79827: NEG
79828: PUSH
79829: EMPTY
79830: LIST
79831: LIST
79832: PUSH
79833: LD_INT 3
79835: PUSH
79836: LD_INT 2
79838: NEG
79839: PUSH
79840: EMPTY
79841: LIST
79842: LIST
79843: PUSH
79844: LD_INT 5
79846: PUSH
79847: LD_INT 2
79849: PUSH
79850: EMPTY
79851: LIST
79852: LIST
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: LIST
79858: LIST
79859: LIST
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: LIST
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: LIST
79872: LIST
79873: LIST
79874: LIST
79875: LIST
79876: LIST
79877: LIST
79878: LIST
79879: LIST
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: LIST
79890: LIST
79891: LIST
79892: LIST
79893: LIST
79894: LIST
79895: LIST
79896: LIST
79897: LIST
79898: LIST
79899: LIST
79900: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
79901: LD_ADDR_VAR 0 32
79905: PUSH
79906: LD_INT 4
79908: NEG
79909: PUSH
79910: LD_INT 0
79912: PUSH
79913: EMPTY
79914: LIST
79915: LIST
79916: PUSH
79917: LD_INT 4
79919: NEG
79920: PUSH
79921: LD_INT 1
79923: NEG
79924: PUSH
79925: EMPTY
79926: LIST
79927: LIST
79928: PUSH
79929: LD_INT 3
79931: NEG
79932: PUSH
79933: LD_INT 0
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: PUSH
79940: LD_INT 3
79942: NEG
79943: PUSH
79944: LD_INT 1
79946: PUSH
79947: EMPTY
79948: LIST
79949: LIST
79950: PUSH
79951: LD_INT 4
79953: NEG
79954: PUSH
79955: LD_INT 1
79957: PUSH
79958: EMPTY
79959: LIST
79960: LIST
79961: PUSH
79962: LD_INT 5
79964: NEG
79965: PUSH
79966: LD_INT 0
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: PUSH
79973: LD_INT 5
79975: NEG
79976: PUSH
79977: LD_INT 1
79979: NEG
79980: PUSH
79981: EMPTY
79982: LIST
79983: LIST
79984: PUSH
79985: LD_INT 5
79987: NEG
79988: PUSH
79989: LD_INT 2
79991: NEG
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 3
79999: NEG
80000: PUSH
80001: LD_INT 2
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: PUSH
80008: LD_INT 3
80010: NEG
80011: PUSH
80012: LD_INT 3
80014: NEG
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: LD_INT 3
80022: NEG
80023: PUSH
80024: LD_INT 4
80026: NEG
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PUSH
80032: LD_INT 2
80034: NEG
80035: PUSH
80036: LD_INT 3
80038: NEG
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PUSH
80044: LD_INT 2
80046: NEG
80047: PUSH
80048: LD_INT 2
80050: NEG
80051: PUSH
80052: EMPTY
80053: LIST
80054: LIST
80055: PUSH
80056: LD_INT 3
80058: NEG
80059: PUSH
80060: LD_INT 2
80062: NEG
80063: PUSH
80064: EMPTY
80065: LIST
80066: LIST
80067: PUSH
80068: LD_INT 4
80070: NEG
80071: PUSH
80072: LD_INT 3
80074: NEG
80075: PUSH
80076: EMPTY
80077: LIST
80078: LIST
80079: PUSH
80080: LD_INT 4
80082: NEG
80083: PUSH
80084: LD_INT 4
80086: NEG
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: PUSH
80092: LD_INT 2
80094: NEG
80095: PUSH
80096: LD_INT 4
80098: NEG
80099: PUSH
80100: EMPTY
80101: LIST
80102: LIST
80103: PUSH
80104: LD_INT 4
80106: NEG
80107: PUSH
80108: LD_INT 2
80110: NEG
80111: PUSH
80112: EMPTY
80113: LIST
80114: LIST
80115: PUSH
80116: LD_INT 0
80118: PUSH
80119: LD_INT 4
80121: NEG
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: PUSH
80127: LD_INT 0
80129: PUSH
80130: LD_INT 5
80132: NEG
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: PUSH
80138: LD_INT 1
80140: PUSH
80141: LD_INT 4
80143: NEG
80144: PUSH
80145: EMPTY
80146: LIST
80147: LIST
80148: PUSH
80149: LD_INT 1
80151: PUSH
80152: LD_INT 3
80154: NEG
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: PUSH
80160: LD_INT 0
80162: PUSH
80163: LD_INT 3
80165: NEG
80166: PUSH
80167: EMPTY
80168: LIST
80169: LIST
80170: PUSH
80171: LD_INT 1
80173: NEG
80174: PUSH
80175: LD_INT 4
80177: NEG
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PUSH
80183: LD_INT 1
80185: NEG
80186: PUSH
80187: LD_INT 5
80189: NEG
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: PUSH
80195: LD_INT 2
80197: PUSH
80198: LD_INT 3
80200: NEG
80201: PUSH
80202: EMPTY
80203: LIST
80204: LIST
80205: PUSH
80206: LD_INT 2
80208: NEG
80209: PUSH
80210: LD_INT 5
80212: NEG
80213: PUSH
80214: EMPTY
80215: LIST
80216: LIST
80217: PUSH
80218: LD_INT 3
80220: PUSH
80221: LD_INT 0
80223: PUSH
80224: EMPTY
80225: LIST
80226: LIST
80227: PUSH
80228: LD_INT 3
80230: PUSH
80231: LD_INT 1
80233: NEG
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: PUSH
80239: LD_INT 4
80241: PUSH
80242: LD_INT 0
80244: PUSH
80245: EMPTY
80246: LIST
80247: LIST
80248: PUSH
80249: LD_INT 4
80251: PUSH
80252: LD_INT 1
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: PUSH
80259: LD_INT 3
80261: PUSH
80262: LD_INT 1
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: PUSH
80269: LD_INT 2
80271: PUSH
80272: LD_INT 0
80274: PUSH
80275: EMPTY
80276: LIST
80277: LIST
80278: PUSH
80279: LD_INT 2
80281: PUSH
80282: LD_INT 1
80284: NEG
80285: PUSH
80286: EMPTY
80287: LIST
80288: LIST
80289: PUSH
80290: LD_INT 2
80292: PUSH
80293: LD_INT 2
80295: NEG
80296: PUSH
80297: EMPTY
80298: LIST
80299: LIST
80300: PUSH
80301: LD_INT 4
80303: PUSH
80304: LD_INT 2
80306: PUSH
80307: EMPTY
80308: LIST
80309: LIST
80310: PUSH
80311: LD_INT 4
80313: PUSH
80314: LD_INT 4
80316: PUSH
80317: EMPTY
80318: LIST
80319: LIST
80320: PUSH
80321: LD_INT 4
80323: PUSH
80324: LD_INT 3
80326: PUSH
80327: EMPTY
80328: LIST
80329: LIST
80330: PUSH
80331: LD_INT 5
80333: PUSH
80334: LD_INT 4
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: PUSH
80341: LD_INT 5
80343: PUSH
80344: LD_INT 5
80346: PUSH
80347: EMPTY
80348: LIST
80349: LIST
80350: PUSH
80351: LD_INT 4
80353: PUSH
80354: LD_INT 5
80356: PUSH
80357: EMPTY
80358: LIST
80359: LIST
80360: PUSH
80361: LD_INT 3
80363: PUSH
80364: LD_INT 4
80366: PUSH
80367: EMPTY
80368: LIST
80369: LIST
80370: PUSH
80371: LD_INT 3
80373: PUSH
80374: LD_INT 3
80376: PUSH
80377: EMPTY
80378: LIST
80379: LIST
80380: PUSH
80381: LD_INT 5
80383: PUSH
80384: LD_INT 3
80386: PUSH
80387: EMPTY
80388: LIST
80389: LIST
80390: PUSH
80391: LD_INT 3
80393: PUSH
80394: LD_INT 5
80396: PUSH
80397: EMPTY
80398: LIST
80399: LIST
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: LIST
80405: LIST
80406: LIST
80407: LIST
80408: LIST
80409: LIST
80410: LIST
80411: LIST
80412: LIST
80413: LIST
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: LIST
80427: LIST
80428: LIST
80429: LIST
80430: LIST
80431: LIST
80432: LIST
80433: LIST
80434: LIST
80435: LIST
80436: LIST
80437: LIST
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: LIST
80444: LIST
80445: LIST
80446: LIST
80447: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80448: LD_ADDR_VAR 0 33
80452: PUSH
80453: LD_INT 4
80455: NEG
80456: PUSH
80457: LD_INT 4
80459: NEG
80460: PUSH
80461: EMPTY
80462: LIST
80463: LIST
80464: PUSH
80465: LD_INT 4
80467: NEG
80468: PUSH
80469: LD_INT 5
80471: NEG
80472: PUSH
80473: EMPTY
80474: LIST
80475: LIST
80476: PUSH
80477: LD_INT 3
80479: NEG
80480: PUSH
80481: LD_INT 4
80483: NEG
80484: PUSH
80485: EMPTY
80486: LIST
80487: LIST
80488: PUSH
80489: LD_INT 3
80491: NEG
80492: PUSH
80493: LD_INT 3
80495: NEG
80496: PUSH
80497: EMPTY
80498: LIST
80499: LIST
80500: PUSH
80501: LD_INT 4
80503: NEG
80504: PUSH
80505: LD_INT 3
80507: NEG
80508: PUSH
80509: EMPTY
80510: LIST
80511: LIST
80512: PUSH
80513: LD_INT 5
80515: NEG
80516: PUSH
80517: LD_INT 4
80519: NEG
80520: PUSH
80521: EMPTY
80522: LIST
80523: LIST
80524: PUSH
80525: LD_INT 5
80527: NEG
80528: PUSH
80529: LD_INT 5
80531: NEG
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: PUSH
80537: LD_INT 3
80539: NEG
80540: PUSH
80541: LD_INT 5
80543: NEG
80544: PUSH
80545: EMPTY
80546: LIST
80547: LIST
80548: PUSH
80549: LD_INT 5
80551: NEG
80552: PUSH
80553: LD_INT 3
80555: NEG
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: PUSH
80561: LD_INT 0
80563: PUSH
80564: LD_INT 3
80566: NEG
80567: PUSH
80568: EMPTY
80569: LIST
80570: LIST
80571: PUSH
80572: LD_INT 0
80574: PUSH
80575: LD_INT 4
80577: NEG
80578: PUSH
80579: EMPTY
80580: LIST
80581: LIST
80582: PUSH
80583: LD_INT 1
80585: PUSH
80586: LD_INT 3
80588: NEG
80589: PUSH
80590: EMPTY
80591: LIST
80592: LIST
80593: PUSH
80594: LD_INT 1
80596: PUSH
80597: LD_INT 2
80599: NEG
80600: PUSH
80601: EMPTY
80602: LIST
80603: LIST
80604: PUSH
80605: LD_INT 0
80607: PUSH
80608: LD_INT 2
80610: NEG
80611: PUSH
80612: EMPTY
80613: LIST
80614: LIST
80615: PUSH
80616: LD_INT 1
80618: NEG
80619: PUSH
80620: LD_INT 3
80622: NEG
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: PUSH
80628: LD_INT 1
80630: NEG
80631: PUSH
80632: LD_INT 4
80634: NEG
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: PUSH
80640: LD_INT 2
80642: PUSH
80643: LD_INT 2
80645: NEG
80646: PUSH
80647: EMPTY
80648: LIST
80649: LIST
80650: PUSH
80651: LD_INT 2
80653: NEG
80654: PUSH
80655: LD_INT 4
80657: NEG
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: PUSH
80663: LD_INT 4
80665: PUSH
80666: LD_INT 0
80668: PUSH
80669: EMPTY
80670: LIST
80671: LIST
80672: PUSH
80673: LD_INT 4
80675: PUSH
80676: LD_INT 1
80678: NEG
80679: PUSH
80680: EMPTY
80681: LIST
80682: LIST
80683: PUSH
80684: LD_INT 5
80686: PUSH
80687: LD_INT 0
80689: PUSH
80690: EMPTY
80691: LIST
80692: LIST
80693: PUSH
80694: LD_INT 5
80696: PUSH
80697: LD_INT 1
80699: PUSH
80700: EMPTY
80701: LIST
80702: LIST
80703: PUSH
80704: LD_INT 4
80706: PUSH
80707: LD_INT 1
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: PUSH
80714: LD_INT 3
80716: PUSH
80717: LD_INT 0
80719: PUSH
80720: EMPTY
80721: LIST
80722: LIST
80723: PUSH
80724: LD_INT 3
80726: PUSH
80727: LD_INT 1
80729: NEG
80730: PUSH
80731: EMPTY
80732: LIST
80733: LIST
80734: PUSH
80735: LD_INT 3
80737: PUSH
80738: LD_INT 2
80740: NEG
80741: PUSH
80742: EMPTY
80743: LIST
80744: LIST
80745: PUSH
80746: LD_INT 5
80748: PUSH
80749: LD_INT 2
80751: PUSH
80752: EMPTY
80753: LIST
80754: LIST
80755: PUSH
80756: LD_INT 3
80758: PUSH
80759: LD_INT 3
80761: PUSH
80762: EMPTY
80763: LIST
80764: LIST
80765: PUSH
80766: LD_INT 3
80768: PUSH
80769: LD_INT 2
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: PUSH
80776: LD_INT 4
80778: PUSH
80779: LD_INT 3
80781: PUSH
80782: EMPTY
80783: LIST
80784: LIST
80785: PUSH
80786: LD_INT 4
80788: PUSH
80789: LD_INT 4
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PUSH
80796: LD_INT 3
80798: PUSH
80799: LD_INT 4
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: PUSH
80806: LD_INT 2
80808: PUSH
80809: LD_INT 3
80811: PUSH
80812: EMPTY
80813: LIST
80814: LIST
80815: PUSH
80816: LD_INT 2
80818: PUSH
80819: LD_INT 2
80821: PUSH
80822: EMPTY
80823: LIST
80824: LIST
80825: PUSH
80826: LD_INT 4
80828: PUSH
80829: LD_INT 2
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: PUSH
80836: LD_INT 2
80838: PUSH
80839: LD_INT 4
80841: PUSH
80842: EMPTY
80843: LIST
80844: LIST
80845: PUSH
80846: LD_INT 0
80848: PUSH
80849: LD_INT 4
80851: PUSH
80852: EMPTY
80853: LIST
80854: LIST
80855: PUSH
80856: LD_INT 0
80858: PUSH
80859: LD_INT 3
80861: PUSH
80862: EMPTY
80863: LIST
80864: LIST
80865: PUSH
80866: LD_INT 1
80868: PUSH
80869: LD_INT 4
80871: PUSH
80872: EMPTY
80873: LIST
80874: LIST
80875: PUSH
80876: LD_INT 1
80878: PUSH
80879: LD_INT 5
80881: PUSH
80882: EMPTY
80883: LIST
80884: LIST
80885: PUSH
80886: LD_INT 0
80888: PUSH
80889: LD_INT 5
80891: PUSH
80892: EMPTY
80893: LIST
80894: LIST
80895: PUSH
80896: LD_INT 1
80898: NEG
80899: PUSH
80900: LD_INT 4
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PUSH
80907: LD_INT 1
80909: NEG
80910: PUSH
80911: LD_INT 3
80913: PUSH
80914: EMPTY
80915: LIST
80916: LIST
80917: PUSH
80918: LD_INT 2
80920: PUSH
80921: LD_INT 5
80923: PUSH
80924: EMPTY
80925: LIST
80926: LIST
80927: PUSH
80928: LD_INT 2
80930: NEG
80931: PUSH
80932: LD_INT 3
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: PUSH
80939: EMPTY
80940: LIST
80941: LIST
80942: LIST
80943: LIST
80944: LIST
80945: LIST
80946: LIST
80947: LIST
80948: LIST
80949: LIST
80950: LIST
80951: LIST
80952: LIST
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: LIST
80974: LIST
80975: LIST
80976: LIST
80977: LIST
80978: LIST
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
80986: LD_ADDR_VAR 0 34
80990: PUSH
80991: LD_INT 0
80993: PUSH
80994: LD_INT 4
80996: NEG
80997: PUSH
80998: EMPTY
80999: LIST
81000: LIST
81001: PUSH
81002: LD_INT 0
81004: PUSH
81005: LD_INT 5
81007: NEG
81008: PUSH
81009: EMPTY
81010: LIST
81011: LIST
81012: PUSH
81013: LD_INT 1
81015: PUSH
81016: LD_INT 4
81018: NEG
81019: PUSH
81020: EMPTY
81021: LIST
81022: LIST
81023: PUSH
81024: LD_INT 1
81026: PUSH
81027: LD_INT 3
81029: NEG
81030: PUSH
81031: EMPTY
81032: LIST
81033: LIST
81034: PUSH
81035: LD_INT 0
81037: PUSH
81038: LD_INT 3
81040: NEG
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PUSH
81046: LD_INT 1
81048: NEG
81049: PUSH
81050: LD_INT 4
81052: NEG
81053: PUSH
81054: EMPTY
81055: LIST
81056: LIST
81057: PUSH
81058: LD_INT 1
81060: NEG
81061: PUSH
81062: LD_INT 5
81064: NEG
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: PUSH
81070: LD_INT 2
81072: PUSH
81073: LD_INT 3
81075: NEG
81076: PUSH
81077: EMPTY
81078: LIST
81079: LIST
81080: PUSH
81081: LD_INT 2
81083: NEG
81084: PUSH
81085: LD_INT 5
81087: NEG
81088: PUSH
81089: EMPTY
81090: LIST
81091: LIST
81092: PUSH
81093: LD_INT 3
81095: PUSH
81096: LD_INT 0
81098: PUSH
81099: EMPTY
81100: LIST
81101: LIST
81102: PUSH
81103: LD_INT 3
81105: PUSH
81106: LD_INT 1
81108: NEG
81109: PUSH
81110: EMPTY
81111: LIST
81112: LIST
81113: PUSH
81114: LD_INT 4
81116: PUSH
81117: LD_INT 0
81119: PUSH
81120: EMPTY
81121: LIST
81122: LIST
81123: PUSH
81124: LD_INT 4
81126: PUSH
81127: LD_INT 1
81129: PUSH
81130: EMPTY
81131: LIST
81132: LIST
81133: PUSH
81134: LD_INT 3
81136: PUSH
81137: LD_INT 1
81139: PUSH
81140: EMPTY
81141: LIST
81142: LIST
81143: PUSH
81144: LD_INT 2
81146: PUSH
81147: LD_INT 0
81149: PUSH
81150: EMPTY
81151: LIST
81152: LIST
81153: PUSH
81154: LD_INT 2
81156: PUSH
81157: LD_INT 1
81159: NEG
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: PUSH
81165: LD_INT 2
81167: PUSH
81168: LD_INT 2
81170: NEG
81171: PUSH
81172: EMPTY
81173: LIST
81174: LIST
81175: PUSH
81176: LD_INT 4
81178: PUSH
81179: LD_INT 2
81181: PUSH
81182: EMPTY
81183: LIST
81184: LIST
81185: PUSH
81186: LD_INT 4
81188: PUSH
81189: LD_INT 4
81191: PUSH
81192: EMPTY
81193: LIST
81194: LIST
81195: PUSH
81196: LD_INT 4
81198: PUSH
81199: LD_INT 3
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: PUSH
81206: LD_INT 5
81208: PUSH
81209: LD_INT 4
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: PUSH
81216: LD_INT 5
81218: PUSH
81219: LD_INT 5
81221: PUSH
81222: EMPTY
81223: LIST
81224: LIST
81225: PUSH
81226: LD_INT 4
81228: PUSH
81229: LD_INT 5
81231: PUSH
81232: EMPTY
81233: LIST
81234: LIST
81235: PUSH
81236: LD_INT 3
81238: PUSH
81239: LD_INT 4
81241: PUSH
81242: EMPTY
81243: LIST
81244: LIST
81245: PUSH
81246: LD_INT 3
81248: PUSH
81249: LD_INT 3
81251: PUSH
81252: EMPTY
81253: LIST
81254: LIST
81255: PUSH
81256: LD_INT 5
81258: PUSH
81259: LD_INT 3
81261: PUSH
81262: EMPTY
81263: LIST
81264: LIST
81265: PUSH
81266: LD_INT 3
81268: PUSH
81269: LD_INT 5
81271: PUSH
81272: EMPTY
81273: LIST
81274: LIST
81275: PUSH
81276: LD_INT 0
81278: PUSH
81279: LD_INT 3
81281: PUSH
81282: EMPTY
81283: LIST
81284: LIST
81285: PUSH
81286: LD_INT 0
81288: PUSH
81289: LD_INT 2
81291: PUSH
81292: EMPTY
81293: LIST
81294: LIST
81295: PUSH
81296: LD_INT 1
81298: PUSH
81299: LD_INT 3
81301: PUSH
81302: EMPTY
81303: LIST
81304: LIST
81305: PUSH
81306: LD_INT 1
81308: PUSH
81309: LD_INT 4
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: PUSH
81316: LD_INT 0
81318: PUSH
81319: LD_INT 4
81321: PUSH
81322: EMPTY
81323: LIST
81324: LIST
81325: PUSH
81326: LD_INT 1
81328: NEG
81329: PUSH
81330: LD_INT 3
81332: PUSH
81333: EMPTY
81334: LIST
81335: LIST
81336: PUSH
81337: LD_INT 1
81339: NEG
81340: PUSH
81341: LD_INT 2
81343: PUSH
81344: EMPTY
81345: LIST
81346: LIST
81347: PUSH
81348: LD_INT 2
81350: PUSH
81351: LD_INT 4
81353: PUSH
81354: EMPTY
81355: LIST
81356: LIST
81357: PUSH
81358: LD_INT 2
81360: NEG
81361: PUSH
81362: LD_INT 2
81364: PUSH
81365: EMPTY
81366: LIST
81367: LIST
81368: PUSH
81369: LD_INT 4
81371: NEG
81372: PUSH
81373: LD_INT 0
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: PUSH
81380: LD_INT 4
81382: NEG
81383: PUSH
81384: LD_INT 1
81386: NEG
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: PUSH
81392: LD_INT 3
81394: NEG
81395: PUSH
81396: LD_INT 0
81398: PUSH
81399: EMPTY
81400: LIST
81401: LIST
81402: PUSH
81403: LD_INT 3
81405: NEG
81406: PUSH
81407: LD_INT 1
81409: PUSH
81410: EMPTY
81411: LIST
81412: LIST
81413: PUSH
81414: LD_INT 4
81416: NEG
81417: PUSH
81418: LD_INT 1
81420: PUSH
81421: EMPTY
81422: LIST
81423: LIST
81424: PUSH
81425: LD_INT 5
81427: NEG
81428: PUSH
81429: LD_INT 0
81431: PUSH
81432: EMPTY
81433: LIST
81434: LIST
81435: PUSH
81436: LD_INT 5
81438: NEG
81439: PUSH
81440: LD_INT 1
81442: NEG
81443: PUSH
81444: EMPTY
81445: LIST
81446: LIST
81447: PUSH
81448: LD_INT 5
81450: NEG
81451: PUSH
81452: LD_INT 2
81454: NEG
81455: PUSH
81456: EMPTY
81457: LIST
81458: LIST
81459: PUSH
81460: LD_INT 3
81462: NEG
81463: PUSH
81464: LD_INT 2
81466: PUSH
81467: EMPTY
81468: LIST
81469: LIST
81470: PUSH
81471: EMPTY
81472: LIST
81473: LIST
81474: LIST
81475: LIST
81476: LIST
81477: LIST
81478: LIST
81479: LIST
81480: LIST
81481: LIST
81482: LIST
81483: LIST
81484: LIST
81485: LIST
81486: LIST
81487: LIST
81488: LIST
81489: LIST
81490: LIST
81491: LIST
81492: LIST
81493: LIST
81494: LIST
81495: LIST
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: LIST
81504: LIST
81505: LIST
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: ST_TO_ADDR
// end ; end ;
81518: GO 81521
81520: POP
// case btype of b_depot , b_warehouse :
81521: LD_VAR 0 1
81525: PUSH
81526: LD_INT 0
81528: DOUBLE
81529: EQUAL
81530: IFTRUE 81540
81532: LD_INT 1
81534: DOUBLE
81535: EQUAL
81536: IFTRUE 81540
81538: GO 81741
81540: POP
// case nation of nation_american :
81541: LD_VAR 0 5
81545: PUSH
81546: LD_INT 1
81548: DOUBLE
81549: EQUAL
81550: IFTRUE 81554
81552: GO 81610
81554: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
81555: LD_ADDR_VAR 0 9
81559: PUSH
81560: LD_VAR 0 11
81564: PUSH
81565: LD_VAR 0 12
81569: PUSH
81570: LD_VAR 0 13
81574: PUSH
81575: LD_VAR 0 14
81579: PUSH
81580: LD_VAR 0 15
81584: PUSH
81585: LD_VAR 0 16
81589: PUSH
81590: EMPTY
81591: LIST
81592: LIST
81593: LIST
81594: LIST
81595: LIST
81596: LIST
81597: PUSH
81598: LD_VAR 0 4
81602: PUSH
81603: LD_INT 1
81605: PLUS
81606: ARRAY
81607: ST_TO_ADDR
81608: GO 81739
81610: LD_INT 2
81612: DOUBLE
81613: EQUAL
81614: IFTRUE 81618
81616: GO 81674
81618: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
81619: LD_ADDR_VAR 0 9
81623: PUSH
81624: LD_VAR 0 17
81628: PUSH
81629: LD_VAR 0 18
81633: PUSH
81634: LD_VAR 0 19
81638: PUSH
81639: LD_VAR 0 20
81643: PUSH
81644: LD_VAR 0 21
81648: PUSH
81649: LD_VAR 0 22
81653: PUSH
81654: EMPTY
81655: LIST
81656: LIST
81657: LIST
81658: LIST
81659: LIST
81660: LIST
81661: PUSH
81662: LD_VAR 0 4
81666: PUSH
81667: LD_INT 1
81669: PLUS
81670: ARRAY
81671: ST_TO_ADDR
81672: GO 81739
81674: LD_INT 3
81676: DOUBLE
81677: EQUAL
81678: IFTRUE 81682
81680: GO 81738
81682: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
81683: LD_ADDR_VAR 0 9
81687: PUSH
81688: LD_VAR 0 23
81692: PUSH
81693: LD_VAR 0 24
81697: PUSH
81698: LD_VAR 0 25
81702: PUSH
81703: LD_VAR 0 26
81707: PUSH
81708: LD_VAR 0 27
81712: PUSH
81713: LD_VAR 0 28
81717: PUSH
81718: EMPTY
81719: LIST
81720: LIST
81721: LIST
81722: LIST
81723: LIST
81724: LIST
81725: PUSH
81726: LD_VAR 0 4
81730: PUSH
81731: LD_INT 1
81733: PLUS
81734: ARRAY
81735: ST_TO_ADDR
81736: GO 81739
81738: POP
81739: GO 82294
81741: LD_INT 2
81743: DOUBLE
81744: EQUAL
81745: IFTRUE 81755
81747: LD_INT 3
81749: DOUBLE
81750: EQUAL
81751: IFTRUE 81755
81753: GO 81811
81755: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
81756: LD_ADDR_VAR 0 9
81760: PUSH
81761: LD_VAR 0 29
81765: PUSH
81766: LD_VAR 0 30
81770: PUSH
81771: LD_VAR 0 31
81775: PUSH
81776: LD_VAR 0 32
81780: PUSH
81781: LD_VAR 0 33
81785: PUSH
81786: LD_VAR 0 34
81790: PUSH
81791: EMPTY
81792: LIST
81793: LIST
81794: LIST
81795: LIST
81796: LIST
81797: LIST
81798: PUSH
81799: LD_VAR 0 4
81803: PUSH
81804: LD_INT 1
81806: PLUS
81807: ARRAY
81808: ST_TO_ADDR
81809: GO 82294
81811: LD_INT 16
81813: DOUBLE
81814: EQUAL
81815: IFTRUE 81873
81817: LD_INT 17
81819: DOUBLE
81820: EQUAL
81821: IFTRUE 81873
81823: LD_INT 18
81825: DOUBLE
81826: EQUAL
81827: IFTRUE 81873
81829: LD_INT 19
81831: DOUBLE
81832: EQUAL
81833: IFTRUE 81873
81835: LD_INT 22
81837: DOUBLE
81838: EQUAL
81839: IFTRUE 81873
81841: LD_INT 20
81843: DOUBLE
81844: EQUAL
81845: IFTRUE 81873
81847: LD_INT 21
81849: DOUBLE
81850: EQUAL
81851: IFTRUE 81873
81853: LD_INT 23
81855: DOUBLE
81856: EQUAL
81857: IFTRUE 81873
81859: LD_INT 24
81861: DOUBLE
81862: EQUAL
81863: IFTRUE 81873
81865: LD_INT 25
81867: DOUBLE
81868: EQUAL
81869: IFTRUE 81873
81871: GO 81929
81873: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
81874: LD_ADDR_VAR 0 9
81878: PUSH
81879: LD_VAR 0 35
81883: PUSH
81884: LD_VAR 0 36
81888: PUSH
81889: LD_VAR 0 37
81893: PUSH
81894: LD_VAR 0 38
81898: PUSH
81899: LD_VAR 0 39
81903: PUSH
81904: LD_VAR 0 40
81908: PUSH
81909: EMPTY
81910: LIST
81911: LIST
81912: LIST
81913: LIST
81914: LIST
81915: LIST
81916: PUSH
81917: LD_VAR 0 4
81921: PUSH
81922: LD_INT 1
81924: PLUS
81925: ARRAY
81926: ST_TO_ADDR
81927: GO 82294
81929: LD_INT 6
81931: DOUBLE
81932: EQUAL
81933: IFTRUE 81985
81935: LD_INT 7
81937: DOUBLE
81938: EQUAL
81939: IFTRUE 81985
81941: LD_INT 8
81943: DOUBLE
81944: EQUAL
81945: IFTRUE 81985
81947: LD_INT 13
81949: DOUBLE
81950: EQUAL
81951: IFTRUE 81985
81953: LD_INT 12
81955: DOUBLE
81956: EQUAL
81957: IFTRUE 81985
81959: LD_INT 15
81961: DOUBLE
81962: EQUAL
81963: IFTRUE 81985
81965: LD_INT 11
81967: DOUBLE
81968: EQUAL
81969: IFTRUE 81985
81971: LD_INT 14
81973: DOUBLE
81974: EQUAL
81975: IFTRUE 81985
81977: LD_INT 10
81979: DOUBLE
81980: EQUAL
81981: IFTRUE 81985
81983: GO 82041
81985: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
81986: LD_ADDR_VAR 0 9
81990: PUSH
81991: LD_VAR 0 41
81995: PUSH
81996: LD_VAR 0 42
82000: PUSH
82001: LD_VAR 0 43
82005: PUSH
82006: LD_VAR 0 44
82010: PUSH
82011: LD_VAR 0 45
82015: PUSH
82016: LD_VAR 0 46
82020: PUSH
82021: EMPTY
82022: LIST
82023: LIST
82024: LIST
82025: LIST
82026: LIST
82027: LIST
82028: PUSH
82029: LD_VAR 0 4
82033: PUSH
82034: LD_INT 1
82036: PLUS
82037: ARRAY
82038: ST_TO_ADDR
82039: GO 82294
82041: LD_INT 36
82043: DOUBLE
82044: EQUAL
82045: IFTRUE 82049
82047: GO 82105
82049: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82050: LD_ADDR_VAR 0 9
82054: PUSH
82055: LD_VAR 0 47
82059: PUSH
82060: LD_VAR 0 48
82064: PUSH
82065: LD_VAR 0 49
82069: PUSH
82070: LD_VAR 0 50
82074: PUSH
82075: LD_VAR 0 51
82079: PUSH
82080: LD_VAR 0 52
82084: PUSH
82085: EMPTY
82086: LIST
82087: LIST
82088: LIST
82089: LIST
82090: LIST
82091: LIST
82092: PUSH
82093: LD_VAR 0 4
82097: PUSH
82098: LD_INT 1
82100: PLUS
82101: ARRAY
82102: ST_TO_ADDR
82103: GO 82294
82105: LD_INT 4
82107: DOUBLE
82108: EQUAL
82109: IFTRUE 82131
82111: LD_INT 5
82113: DOUBLE
82114: EQUAL
82115: IFTRUE 82131
82117: LD_INT 34
82119: DOUBLE
82120: EQUAL
82121: IFTRUE 82131
82123: LD_INT 37
82125: DOUBLE
82126: EQUAL
82127: IFTRUE 82131
82129: GO 82187
82131: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82132: LD_ADDR_VAR 0 9
82136: PUSH
82137: LD_VAR 0 53
82141: PUSH
82142: LD_VAR 0 54
82146: PUSH
82147: LD_VAR 0 55
82151: PUSH
82152: LD_VAR 0 56
82156: PUSH
82157: LD_VAR 0 57
82161: PUSH
82162: LD_VAR 0 58
82166: PUSH
82167: EMPTY
82168: LIST
82169: LIST
82170: LIST
82171: LIST
82172: LIST
82173: LIST
82174: PUSH
82175: LD_VAR 0 4
82179: PUSH
82180: LD_INT 1
82182: PLUS
82183: ARRAY
82184: ST_TO_ADDR
82185: GO 82294
82187: LD_INT 31
82189: DOUBLE
82190: EQUAL
82191: IFTRUE 82237
82193: LD_INT 32
82195: DOUBLE
82196: EQUAL
82197: IFTRUE 82237
82199: LD_INT 33
82201: DOUBLE
82202: EQUAL
82203: IFTRUE 82237
82205: LD_INT 27
82207: DOUBLE
82208: EQUAL
82209: IFTRUE 82237
82211: LD_INT 26
82213: DOUBLE
82214: EQUAL
82215: IFTRUE 82237
82217: LD_INT 28
82219: DOUBLE
82220: EQUAL
82221: IFTRUE 82237
82223: LD_INT 29
82225: DOUBLE
82226: EQUAL
82227: IFTRUE 82237
82229: LD_INT 30
82231: DOUBLE
82232: EQUAL
82233: IFTRUE 82237
82235: GO 82293
82237: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
82238: LD_ADDR_VAR 0 9
82242: PUSH
82243: LD_VAR 0 59
82247: PUSH
82248: LD_VAR 0 60
82252: PUSH
82253: LD_VAR 0 61
82257: PUSH
82258: LD_VAR 0 62
82262: PUSH
82263: LD_VAR 0 63
82267: PUSH
82268: LD_VAR 0 64
82272: PUSH
82273: EMPTY
82274: LIST
82275: LIST
82276: LIST
82277: LIST
82278: LIST
82279: LIST
82280: PUSH
82281: LD_VAR 0 4
82285: PUSH
82286: LD_INT 1
82288: PLUS
82289: ARRAY
82290: ST_TO_ADDR
82291: GO 82294
82293: POP
// temp_list2 = [ ] ;
82294: LD_ADDR_VAR 0 10
82298: PUSH
82299: EMPTY
82300: ST_TO_ADDR
// for i in temp_list do
82301: LD_ADDR_VAR 0 8
82305: PUSH
82306: LD_VAR 0 9
82310: PUSH
82311: FOR_IN
82312: IFFALSE 82364
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82314: LD_ADDR_VAR 0 10
82318: PUSH
82319: LD_VAR 0 10
82323: PUSH
82324: LD_VAR 0 8
82328: PUSH
82329: LD_INT 1
82331: ARRAY
82332: PUSH
82333: LD_VAR 0 2
82337: PLUS
82338: PUSH
82339: LD_VAR 0 8
82343: PUSH
82344: LD_INT 2
82346: ARRAY
82347: PUSH
82348: LD_VAR 0 3
82352: PLUS
82353: PUSH
82354: EMPTY
82355: LIST
82356: LIST
82357: PUSH
82358: EMPTY
82359: LIST
82360: ADD
82361: ST_TO_ADDR
82362: GO 82311
82364: POP
82365: POP
// result = temp_list2 ;
82366: LD_ADDR_VAR 0 7
82370: PUSH
82371: LD_VAR 0 10
82375: ST_TO_ADDR
// end ;
82376: LD_VAR 0 7
82380: RET
// export function EnemyInRange ( unit , dist ) ; begin
82381: LD_INT 0
82383: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82384: LD_ADDR_VAR 0 3
82388: PUSH
82389: LD_VAR 0 1
82393: PPUSH
82394: CALL_OW 255
82398: PPUSH
82399: LD_VAR 0 1
82403: PPUSH
82404: CALL_OW 250
82408: PPUSH
82409: LD_VAR 0 1
82413: PPUSH
82414: CALL_OW 251
82418: PPUSH
82419: LD_VAR 0 2
82423: PPUSH
82424: CALL 56485 0 4
82428: PUSH
82429: LD_INT 4
82431: ARRAY
82432: ST_TO_ADDR
// end ;
82433: LD_VAR 0 3
82437: RET
// export function PlayerSeeMe ( unit ) ; begin
82438: LD_INT 0
82440: PPUSH
// result := See ( your_side , unit ) ;
82441: LD_ADDR_VAR 0 2
82445: PUSH
82446: LD_OWVAR 2
82450: PPUSH
82451: LD_VAR 0 1
82455: PPUSH
82456: CALL_OW 292
82460: ST_TO_ADDR
// end ;
82461: LD_VAR 0 2
82465: RET
// export function ReverseDir ( unit ) ; begin
82466: LD_INT 0
82468: PPUSH
// if not unit then
82469: LD_VAR 0 1
82473: NOT
82474: IFFALSE 82478
// exit ;
82476: GO 82501
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
82478: LD_ADDR_VAR 0 2
82482: PUSH
82483: LD_VAR 0 1
82487: PPUSH
82488: CALL_OW 254
82492: PUSH
82493: LD_INT 3
82495: PLUS
82496: PUSH
82497: LD_INT 6
82499: MOD
82500: ST_TO_ADDR
// end ;
82501: LD_VAR 0 2
82505: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
82506: LD_INT 0
82508: PPUSH
82509: PPUSH
82510: PPUSH
82511: PPUSH
82512: PPUSH
// if not hexes then
82513: LD_VAR 0 2
82517: NOT
82518: IFFALSE 82522
// exit ;
82520: GO 82670
// dist := 9999 ;
82522: LD_ADDR_VAR 0 5
82526: PUSH
82527: LD_INT 9999
82529: ST_TO_ADDR
// for i = 1 to hexes do
82530: LD_ADDR_VAR 0 4
82534: PUSH
82535: DOUBLE
82536: LD_INT 1
82538: DEC
82539: ST_TO_ADDR
82540: LD_VAR 0 2
82544: PUSH
82545: FOR_TO
82546: IFFALSE 82658
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
82548: LD_VAR 0 1
82552: PPUSH
82553: LD_VAR 0 2
82557: PUSH
82558: LD_VAR 0 4
82562: ARRAY
82563: PUSH
82564: LD_INT 1
82566: ARRAY
82567: PPUSH
82568: LD_VAR 0 2
82572: PUSH
82573: LD_VAR 0 4
82577: ARRAY
82578: PUSH
82579: LD_INT 2
82581: ARRAY
82582: PPUSH
82583: CALL_OW 297
82587: PUSH
82588: LD_VAR 0 5
82592: LESS
82593: IFFALSE 82656
// begin hex := hexes [ i ] ;
82595: LD_ADDR_VAR 0 7
82599: PUSH
82600: LD_VAR 0 2
82604: PUSH
82605: LD_VAR 0 4
82609: ARRAY
82610: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82611: LD_ADDR_VAR 0 5
82615: PUSH
82616: LD_VAR 0 1
82620: PPUSH
82621: LD_VAR 0 2
82625: PUSH
82626: LD_VAR 0 4
82630: ARRAY
82631: PUSH
82632: LD_INT 1
82634: ARRAY
82635: PPUSH
82636: LD_VAR 0 2
82640: PUSH
82641: LD_VAR 0 4
82645: ARRAY
82646: PUSH
82647: LD_INT 2
82649: ARRAY
82650: PPUSH
82651: CALL_OW 297
82655: ST_TO_ADDR
// end ; end ;
82656: GO 82545
82658: POP
82659: POP
// result := hex ;
82660: LD_ADDR_VAR 0 3
82664: PUSH
82665: LD_VAR 0 7
82669: ST_TO_ADDR
// end ;
82670: LD_VAR 0 3
82674: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
82675: LD_INT 0
82677: PPUSH
82678: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
82679: LD_VAR 0 1
82683: NOT
82684: PUSH
82685: LD_VAR 0 1
82689: PUSH
82690: LD_INT 21
82692: PUSH
82693: LD_INT 2
82695: PUSH
82696: EMPTY
82697: LIST
82698: LIST
82699: PUSH
82700: LD_INT 23
82702: PUSH
82703: LD_INT 2
82705: PUSH
82706: EMPTY
82707: LIST
82708: LIST
82709: PUSH
82710: EMPTY
82711: LIST
82712: LIST
82713: PPUSH
82714: CALL_OW 69
82718: IN
82719: NOT
82720: OR
82721: IFFALSE 82725
// exit ;
82723: GO 82772
// for i = 1 to 3 do
82725: LD_ADDR_VAR 0 3
82729: PUSH
82730: DOUBLE
82731: LD_INT 1
82733: DEC
82734: ST_TO_ADDR
82735: LD_INT 3
82737: PUSH
82738: FOR_TO
82739: IFFALSE 82770
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
82741: LD_VAR 0 1
82745: PPUSH
82746: CALL_OW 250
82750: PPUSH
82751: LD_VAR 0 1
82755: PPUSH
82756: CALL_OW 251
82760: PPUSH
82761: LD_INT 1
82763: PPUSH
82764: CALL_OW 453
82768: GO 82738
82770: POP
82771: POP
// end ;
82772: LD_VAR 0 2
82776: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
82777: LD_INT 0
82779: PPUSH
82780: PPUSH
82781: PPUSH
82782: PPUSH
82783: PPUSH
82784: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
82785: LD_VAR 0 1
82789: NOT
82790: PUSH
82791: LD_VAR 0 2
82795: NOT
82796: OR
82797: PUSH
82798: LD_VAR 0 1
82802: PPUSH
82803: CALL_OW 314
82807: OR
82808: IFFALSE 82812
// exit ;
82810: GO 83253
// x := GetX ( enemy_unit ) ;
82812: LD_ADDR_VAR 0 7
82816: PUSH
82817: LD_VAR 0 2
82821: PPUSH
82822: CALL_OW 250
82826: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
82827: LD_ADDR_VAR 0 8
82831: PUSH
82832: LD_VAR 0 2
82836: PPUSH
82837: CALL_OW 251
82841: ST_TO_ADDR
// if not x or not y then
82842: LD_VAR 0 7
82846: NOT
82847: PUSH
82848: LD_VAR 0 8
82852: NOT
82853: OR
82854: IFFALSE 82858
// exit ;
82856: GO 83253
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
82858: LD_ADDR_VAR 0 6
82862: PUSH
82863: LD_VAR 0 7
82867: PPUSH
82868: LD_INT 0
82870: PPUSH
82871: LD_INT 4
82873: PPUSH
82874: CALL_OW 272
82878: PUSH
82879: LD_VAR 0 8
82883: PPUSH
82884: LD_INT 0
82886: PPUSH
82887: LD_INT 4
82889: PPUSH
82890: CALL_OW 273
82894: PUSH
82895: EMPTY
82896: LIST
82897: LIST
82898: PUSH
82899: LD_VAR 0 7
82903: PPUSH
82904: LD_INT 1
82906: PPUSH
82907: LD_INT 4
82909: PPUSH
82910: CALL_OW 272
82914: PUSH
82915: LD_VAR 0 8
82919: PPUSH
82920: LD_INT 1
82922: PPUSH
82923: LD_INT 4
82925: PPUSH
82926: CALL_OW 273
82930: PUSH
82931: EMPTY
82932: LIST
82933: LIST
82934: PUSH
82935: LD_VAR 0 7
82939: PPUSH
82940: LD_INT 2
82942: PPUSH
82943: LD_INT 4
82945: PPUSH
82946: CALL_OW 272
82950: PUSH
82951: LD_VAR 0 8
82955: PPUSH
82956: LD_INT 2
82958: PPUSH
82959: LD_INT 4
82961: PPUSH
82962: CALL_OW 273
82966: PUSH
82967: EMPTY
82968: LIST
82969: LIST
82970: PUSH
82971: LD_VAR 0 7
82975: PPUSH
82976: LD_INT 3
82978: PPUSH
82979: LD_INT 4
82981: PPUSH
82982: CALL_OW 272
82986: PUSH
82987: LD_VAR 0 8
82991: PPUSH
82992: LD_INT 3
82994: PPUSH
82995: LD_INT 4
82997: PPUSH
82998: CALL_OW 273
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: PUSH
83007: LD_VAR 0 7
83011: PPUSH
83012: LD_INT 4
83014: PPUSH
83015: LD_INT 4
83017: PPUSH
83018: CALL_OW 272
83022: PUSH
83023: LD_VAR 0 8
83027: PPUSH
83028: LD_INT 4
83030: PPUSH
83031: LD_INT 4
83033: PPUSH
83034: CALL_OW 273
83038: PUSH
83039: EMPTY
83040: LIST
83041: LIST
83042: PUSH
83043: LD_VAR 0 7
83047: PPUSH
83048: LD_INT 5
83050: PPUSH
83051: LD_INT 4
83053: PPUSH
83054: CALL_OW 272
83058: PUSH
83059: LD_VAR 0 8
83063: PPUSH
83064: LD_INT 5
83066: PPUSH
83067: LD_INT 4
83069: PPUSH
83070: CALL_OW 273
83074: PUSH
83075: EMPTY
83076: LIST
83077: LIST
83078: PUSH
83079: EMPTY
83080: LIST
83081: LIST
83082: LIST
83083: LIST
83084: LIST
83085: LIST
83086: ST_TO_ADDR
// for i = tmp downto 1 do
83087: LD_ADDR_VAR 0 4
83091: PUSH
83092: DOUBLE
83093: LD_VAR 0 6
83097: INC
83098: ST_TO_ADDR
83099: LD_INT 1
83101: PUSH
83102: FOR_DOWNTO
83103: IFFALSE 83204
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83105: LD_VAR 0 6
83109: PUSH
83110: LD_VAR 0 4
83114: ARRAY
83115: PUSH
83116: LD_INT 1
83118: ARRAY
83119: PPUSH
83120: LD_VAR 0 6
83124: PUSH
83125: LD_VAR 0 4
83129: ARRAY
83130: PUSH
83131: LD_INT 2
83133: ARRAY
83134: PPUSH
83135: CALL_OW 488
83139: NOT
83140: PUSH
83141: LD_VAR 0 6
83145: PUSH
83146: LD_VAR 0 4
83150: ARRAY
83151: PUSH
83152: LD_INT 1
83154: ARRAY
83155: PPUSH
83156: LD_VAR 0 6
83160: PUSH
83161: LD_VAR 0 4
83165: ARRAY
83166: PUSH
83167: LD_INT 2
83169: ARRAY
83170: PPUSH
83171: CALL_OW 428
83175: PUSH
83176: LD_INT 0
83178: NONEQUAL
83179: OR
83180: IFFALSE 83202
// tmp := Delete ( tmp , i ) ;
83182: LD_ADDR_VAR 0 6
83186: PUSH
83187: LD_VAR 0 6
83191: PPUSH
83192: LD_VAR 0 4
83196: PPUSH
83197: CALL_OW 3
83201: ST_TO_ADDR
83202: GO 83102
83204: POP
83205: POP
// j := GetClosestHex ( unit , tmp ) ;
83206: LD_ADDR_VAR 0 5
83210: PUSH
83211: LD_VAR 0 1
83215: PPUSH
83216: LD_VAR 0 6
83220: PPUSH
83221: CALL 82506 0 2
83225: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83226: LD_VAR 0 1
83230: PPUSH
83231: LD_VAR 0 5
83235: PUSH
83236: LD_INT 1
83238: ARRAY
83239: PPUSH
83240: LD_VAR 0 5
83244: PUSH
83245: LD_INT 2
83247: ARRAY
83248: PPUSH
83249: CALL_OW 111
// end ;
83253: LD_VAR 0 3
83257: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
83258: LD_INT 0
83260: PPUSH
83261: PPUSH
83262: PPUSH
// uc_side = 0 ;
83263: LD_ADDR_OWVAR 20
83267: PUSH
83268: LD_INT 0
83270: ST_TO_ADDR
// uc_nation = 0 ;
83271: LD_ADDR_OWVAR 21
83275: PUSH
83276: LD_INT 0
83278: ST_TO_ADDR
// InitHc ;
83279: CALL_OW 19
// InitVc ;
83283: CALL_OW 20
// if mastodonts then
83287: LD_VAR 0 6
83291: IFFALSE 83358
// for i = 1 to mastodonts do
83293: LD_ADDR_VAR 0 11
83297: PUSH
83298: DOUBLE
83299: LD_INT 1
83301: DEC
83302: ST_TO_ADDR
83303: LD_VAR 0 6
83307: PUSH
83308: FOR_TO
83309: IFFALSE 83356
// begin vc_chassis := 31 ;
83311: LD_ADDR_OWVAR 37
83315: PUSH
83316: LD_INT 31
83318: ST_TO_ADDR
// vc_control := control_rider ;
83319: LD_ADDR_OWVAR 38
83323: PUSH
83324: LD_INT 4
83326: ST_TO_ADDR
// animal := CreateVehicle ;
83327: LD_ADDR_VAR 0 12
83331: PUSH
83332: CALL_OW 45
83336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83337: LD_VAR 0 12
83341: PPUSH
83342: LD_VAR 0 8
83346: PPUSH
83347: LD_INT 0
83349: PPUSH
83350: CALL 85427 0 3
// end ;
83354: GO 83308
83356: POP
83357: POP
// if horses then
83358: LD_VAR 0 5
83362: IFFALSE 83429
// for i = 1 to horses do
83364: LD_ADDR_VAR 0 11
83368: PUSH
83369: DOUBLE
83370: LD_INT 1
83372: DEC
83373: ST_TO_ADDR
83374: LD_VAR 0 5
83378: PUSH
83379: FOR_TO
83380: IFFALSE 83427
// begin hc_class := 21 ;
83382: LD_ADDR_OWVAR 28
83386: PUSH
83387: LD_INT 21
83389: ST_TO_ADDR
// hc_gallery :=  ;
83390: LD_ADDR_OWVAR 33
83394: PUSH
83395: LD_STRING 
83397: ST_TO_ADDR
// animal := CreateHuman ;
83398: LD_ADDR_VAR 0 12
83402: PUSH
83403: CALL_OW 44
83407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83408: LD_VAR 0 12
83412: PPUSH
83413: LD_VAR 0 8
83417: PPUSH
83418: LD_INT 0
83420: PPUSH
83421: CALL 85427 0 3
// end ;
83425: GO 83379
83427: POP
83428: POP
// if birds then
83429: LD_VAR 0 1
83433: IFFALSE 83500
// for i = 1 to birds do
83435: LD_ADDR_VAR 0 11
83439: PUSH
83440: DOUBLE
83441: LD_INT 1
83443: DEC
83444: ST_TO_ADDR
83445: LD_VAR 0 1
83449: PUSH
83450: FOR_TO
83451: IFFALSE 83498
// begin hc_class = 18 ;
83453: LD_ADDR_OWVAR 28
83457: PUSH
83458: LD_INT 18
83460: ST_TO_ADDR
// hc_gallery =  ;
83461: LD_ADDR_OWVAR 33
83465: PUSH
83466: LD_STRING 
83468: ST_TO_ADDR
// animal := CreateHuman ;
83469: LD_ADDR_VAR 0 12
83473: PUSH
83474: CALL_OW 44
83478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83479: LD_VAR 0 12
83483: PPUSH
83484: LD_VAR 0 8
83488: PPUSH
83489: LD_INT 0
83491: PPUSH
83492: CALL 85427 0 3
// end ;
83496: GO 83450
83498: POP
83499: POP
// if tigers then
83500: LD_VAR 0 2
83504: IFFALSE 83588
// for i = 1 to tigers do
83506: LD_ADDR_VAR 0 11
83510: PUSH
83511: DOUBLE
83512: LD_INT 1
83514: DEC
83515: ST_TO_ADDR
83516: LD_VAR 0 2
83520: PUSH
83521: FOR_TO
83522: IFFALSE 83586
// begin hc_class = class_tiger ;
83524: LD_ADDR_OWVAR 28
83528: PUSH
83529: LD_INT 14
83531: ST_TO_ADDR
// hc_gallery =  ;
83532: LD_ADDR_OWVAR 33
83536: PUSH
83537: LD_STRING 
83539: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
83540: LD_ADDR_OWVAR 35
83544: PUSH
83545: LD_INT 7
83547: NEG
83548: PPUSH
83549: LD_INT 7
83551: PPUSH
83552: CALL_OW 12
83556: ST_TO_ADDR
// animal := CreateHuman ;
83557: LD_ADDR_VAR 0 12
83561: PUSH
83562: CALL_OW 44
83566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83567: LD_VAR 0 12
83571: PPUSH
83572: LD_VAR 0 8
83576: PPUSH
83577: LD_INT 0
83579: PPUSH
83580: CALL 85427 0 3
// end ;
83584: GO 83521
83586: POP
83587: POP
// if apemans then
83588: LD_VAR 0 3
83592: IFFALSE 83715
// for i = 1 to apemans do
83594: LD_ADDR_VAR 0 11
83598: PUSH
83599: DOUBLE
83600: LD_INT 1
83602: DEC
83603: ST_TO_ADDR
83604: LD_VAR 0 3
83608: PUSH
83609: FOR_TO
83610: IFFALSE 83713
// begin hc_class = class_apeman ;
83612: LD_ADDR_OWVAR 28
83616: PUSH
83617: LD_INT 12
83619: ST_TO_ADDR
// hc_gallery =  ;
83620: LD_ADDR_OWVAR 33
83624: PUSH
83625: LD_STRING 
83627: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
83628: LD_ADDR_OWVAR 35
83632: PUSH
83633: LD_INT 5
83635: NEG
83636: PPUSH
83637: LD_INT 5
83639: PPUSH
83640: CALL_OW 12
83644: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
83645: LD_ADDR_OWVAR 31
83649: PUSH
83650: LD_INT 1
83652: PPUSH
83653: LD_INT 3
83655: PPUSH
83656: CALL_OW 12
83660: PUSH
83661: LD_INT 1
83663: PPUSH
83664: LD_INT 3
83666: PPUSH
83667: CALL_OW 12
83671: PUSH
83672: LD_INT 0
83674: PUSH
83675: LD_INT 0
83677: PUSH
83678: EMPTY
83679: LIST
83680: LIST
83681: LIST
83682: LIST
83683: ST_TO_ADDR
// animal := CreateHuman ;
83684: LD_ADDR_VAR 0 12
83688: PUSH
83689: CALL_OW 44
83693: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83694: LD_VAR 0 12
83698: PPUSH
83699: LD_VAR 0 8
83703: PPUSH
83704: LD_INT 0
83706: PPUSH
83707: CALL 85427 0 3
// end ;
83711: GO 83609
83713: POP
83714: POP
// if enchidnas then
83715: LD_VAR 0 4
83719: IFFALSE 83786
// for i = 1 to enchidnas do
83721: LD_ADDR_VAR 0 11
83725: PUSH
83726: DOUBLE
83727: LD_INT 1
83729: DEC
83730: ST_TO_ADDR
83731: LD_VAR 0 4
83735: PUSH
83736: FOR_TO
83737: IFFALSE 83784
// begin hc_class = 13 ;
83739: LD_ADDR_OWVAR 28
83743: PUSH
83744: LD_INT 13
83746: ST_TO_ADDR
// hc_gallery =  ;
83747: LD_ADDR_OWVAR 33
83751: PUSH
83752: LD_STRING 
83754: ST_TO_ADDR
// animal := CreateHuman ;
83755: LD_ADDR_VAR 0 12
83759: PUSH
83760: CALL_OW 44
83764: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83765: LD_VAR 0 12
83769: PPUSH
83770: LD_VAR 0 8
83774: PPUSH
83775: LD_INT 0
83777: PPUSH
83778: CALL 85427 0 3
// end ;
83782: GO 83736
83784: POP
83785: POP
// if fishes then
83786: LD_VAR 0 7
83790: IFFALSE 83857
// for i = 1 to fishes do
83792: LD_ADDR_VAR 0 11
83796: PUSH
83797: DOUBLE
83798: LD_INT 1
83800: DEC
83801: ST_TO_ADDR
83802: LD_VAR 0 7
83806: PUSH
83807: FOR_TO
83808: IFFALSE 83855
// begin hc_class = 20 ;
83810: LD_ADDR_OWVAR 28
83814: PUSH
83815: LD_INT 20
83817: ST_TO_ADDR
// hc_gallery =  ;
83818: LD_ADDR_OWVAR 33
83822: PUSH
83823: LD_STRING 
83825: ST_TO_ADDR
// animal := CreateHuman ;
83826: LD_ADDR_VAR 0 12
83830: PUSH
83831: CALL_OW 44
83835: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
83836: LD_VAR 0 12
83840: PPUSH
83841: LD_VAR 0 9
83845: PPUSH
83846: LD_INT 0
83848: PPUSH
83849: CALL 85427 0 3
// end ;
83853: GO 83807
83855: POP
83856: POP
// end ;
83857: LD_VAR 0 10
83861: RET
// export function WantHeal ( sci , unit ) ; begin
83862: LD_INT 0
83864: PPUSH
// if GetTaskList ( sci ) > 0 then
83865: LD_VAR 0 1
83869: PPUSH
83870: CALL_OW 437
83874: PUSH
83875: LD_INT 0
83877: GREATER
83878: IFFALSE 83948
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
83880: LD_VAR 0 1
83884: PPUSH
83885: CALL_OW 437
83889: PUSH
83890: LD_INT 1
83892: ARRAY
83893: PUSH
83894: LD_INT 1
83896: ARRAY
83897: PUSH
83898: LD_STRING l
83900: EQUAL
83901: PUSH
83902: LD_VAR 0 1
83906: PPUSH
83907: CALL_OW 437
83911: PUSH
83912: LD_INT 1
83914: ARRAY
83915: PUSH
83916: LD_INT 4
83918: ARRAY
83919: PUSH
83920: LD_VAR 0 2
83924: EQUAL
83925: AND
83926: IFFALSE 83938
// result := true else
83928: LD_ADDR_VAR 0 3
83932: PUSH
83933: LD_INT 1
83935: ST_TO_ADDR
83936: GO 83946
// result := false ;
83938: LD_ADDR_VAR 0 3
83942: PUSH
83943: LD_INT 0
83945: ST_TO_ADDR
// end else
83946: GO 83956
// result := false ;
83948: LD_ADDR_VAR 0 3
83952: PUSH
83953: LD_INT 0
83955: ST_TO_ADDR
// end ;
83956: LD_VAR 0 3
83960: RET
// export function HealTarget ( sci ) ; begin
83961: LD_INT 0
83963: PPUSH
// if not sci then
83964: LD_VAR 0 1
83968: NOT
83969: IFFALSE 83973
// exit ;
83971: GO 84038
// result := 0 ;
83973: LD_ADDR_VAR 0 2
83977: PUSH
83978: LD_INT 0
83980: ST_TO_ADDR
// if GetTaskList ( sci ) then
83981: LD_VAR 0 1
83985: PPUSH
83986: CALL_OW 437
83990: IFFALSE 84038
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
83992: LD_VAR 0 1
83996: PPUSH
83997: CALL_OW 437
84001: PUSH
84002: LD_INT 1
84004: ARRAY
84005: PUSH
84006: LD_INT 1
84008: ARRAY
84009: PUSH
84010: LD_STRING l
84012: EQUAL
84013: IFFALSE 84038
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
84015: LD_ADDR_VAR 0 2
84019: PUSH
84020: LD_VAR 0 1
84024: PPUSH
84025: CALL_OW 437
84029: PUSH
84030: LD_INT 1
84032: ARRAY
84033: PUSH
84034: LD_INT 4
84036: ARRAY
84037: ST_TO_ADDR
// end ;
84038: LD_VAR 0 2
84042: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84043: LD_INT 0
84045: PPUSH
84046: PPUSH
84047: PPUSH
84048: PPUSH
// if not base_units then
84049: LD_VAR 0 1
84053: NOT
84054: IFFALSE 84058
// exit ;
84056: GO 84145
// result := false ;
84058: LD_ADDR_VAR 0 2
84062: PUSH
84063: LD_INT 0
84065: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84066: LD_ADDR_VAR 0 5
84070: PUSH
84071: LD_VAR 0 1
84075: PPUSH
84076: LD_INT 21
84078: PUSH
84079: LD_INT 3
84081: PUSH
84082: EMPTY
84083: LIST
84084: LIST
84085: PPUSH
84086: CALL_OW 72
84090: ST_TO_ADDR
// if not tmp then
84091: LD_VAR 0 5
84095: NOT
84096: IFFALSE 84100
// exit ;
84098: GO 84145
// for i in tmp do
84100: LD_ADDR_VAR 0 3
84104: PUSH
84105: LD_VAR 0 5
84109: PUSH
84110: FOR_IN
84111: IFFALSE 84143
// begin result := EnemyInRange ( i , 22 ) ;
84113: LD_ADDR_VAR 0 2
84117: PUSH
84118: LD_VAR 0 3
84122: PPUSH
84123: LD_INT 22
84125: PPUSH
84126: CALL 82381 0 2
84130: ST_TO_ADDR
// if result then
84131: LD_VAR 0 2
84135: IFFALSE 84141
// exit ;
84137: POP
84138: POP
84139: GO 84145
// end ;
84141: GO 84110
84143: POP
84144: POP
// end ;
84145: LD_VAR 0 2
84149: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
84150: LD_INT 0
84152: PPUSH
84153: PPUSH
// if not units then
84154: LD_VAR 0 1
84158: NOT
84159: IFFALSE 84163
// exit ;
84161: GO 84233
// result := [ ] ;
84163: LD_ADDR_VAR 0 3
84167: PUSH
84168: EMPTY
84169: ST_TO_ADDR
// for i in units do
84170: LD_ADDR_VAR 0 4
84174: PUSH
84175: LD_VAR 0 1
84179: PUSH
84180: FOR_IN
84181: IFFALSE 84231
// if GetTag ( i ) = tag then
84183: LD_VAR 0 4
84187: PPUSH
84188: CALL_OW 110
84192: PUSH
84193: LD_VAR 0 2
84197: EQUAL
84198: IFFALSE 84229
// result := Insert ( result , result + 1 , i ) ;
84200: LD_ADDR_VAR 0 3
84204: PUSH
84205: LD_VAR 0 3
84209: PPUSH
84210: LD_VAR 0 3
84214: PUSH
84215: LD_INT 1
84217: PLUS
84218: PPUSH
84219: LD_VAR 0 4
84223: PPUSH
84224: CALL_OW 2
84228: ST_TO_ADDR
84229: GO 84180
84231: POP
84232: POP
// end ;
84233: LD_VAR 0 3
84237: RET
// export function IsDriver ( un ) ; begin
84238: LD_INT 0
84240: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
84241: LD_ADDR_VAR 0 2
84245: PUSH
84246: LD_VAR 0 1
84250: PUSH
84251: LD_INT 55
84253: PUSH
84254: EMPTY
84255: LIST
84256: PPUSH
84257: CALL_OW 69
84261: IN
84262: ST_TO_ADDR
// end ;
84263: LD_VAR 0 2
84267: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
84268: LD_INT 0
84270: PPUSH
84271: PPUSH
// list := [ ] ;
84272: LD_ADDR_VAR 0 5
84276: PUSH
84277: EMPTY
84278: ST_TO_ADDR
// case d of 0 :
84279: LD_VAR 0 3
84283: PUSH
84284: LD_INT 0
84286: DOUBLE
84287: EQUAL
84288: IFTRUE 84292
84290: GO 84425
84292: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
84293: LD_ADDR_VAR 0 5
84297: PUSH
84298: LD_VAR 0 1
84302: PUSH
84303: LD_INT 4
84305: MINUS
84306: PUSH
84307: LD_VAR 0 2
84311: PUSH
84312: LD_INT 4
84314: MINUS
84315: PUSH
84316: LD_INT 2
84318: PUSH
84319: EMPTY
84320: LIST
84321: LIST
84322: LIST
84323: PUSH
84324: LD_VAR 0 1
84328: PUSH
84329: LD_INT 3
84331: MINUS
84332: PUSH
84333: LD_VAR 0 2
84337: PUSH
84338: LD_INT 1
84340: PUSH
84341: EMPTY
84342: LIST
84343: LIST
84344: LIST
84345: PUSH
84346: LD_VAR 0 1
84350: PUSH
84351: LD_INT 4
84353: PLUS
84354: PUSH
84355: LD_VAR 0 2
84359: PUSH
84360: LD_INT 4
84362: PUSH
84363: EMPTY
84364: LIST
84365: LIST
84366: LIST
84367: PUSH
84368: LD_VAR 0 1
84372: PUSH
84373: LD_INT 3
84375: PLUS
84376: PUSH
84377: LD_VAR 0 2
84381: PUSH
84382: LD_INT 3
84384: PLUS
84385: PUSH
84386: LD_INT 5
84388: PUSH
84389: EMPTY
84390: LIST
84391: LIST
84392: LIST
84393: PUSH
84394: LD_VAR 0 1
84398: PUSH
84399: LD_VAR 0 2
84403: PUSH
84404: LD_INT 4
84406: PLUS
84407: PUSH
84408: LD_INT 0
84410: PUSH
84411: EMPTY
84412: LIST
84413: LIST
84414: LIST
84415: PUSH
84416: EMPTY
84417: LIST
84418: LIST
84419: LIST
84420: LIST
84421: LIST
84422: ST_TO_ADDR
// end ; 1 :
84423: GO 85123
84425: LD_INT 1
84427: DOUBLE
84428: EQUAL
84429: IFTRUE 84433
84431: GO 84566
84433: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
84434: LD_ADDR_VAR 0 5
84438: PUSH
84439: LD_VAR 0 1
84443: PUSH
84444: LD_VAR 0 2
84448: PUSH
84449: LD_INT 4
84451: MINUS
84452: PUSH
84453: LD_INT 3
84455: PUSH
84456: EMPTY
84457: LIST
84458: LIST
84459: LIST
84460: PUSH
84461: LD_VAR 0 1
84465: PUSH
84466: LD_INT 3
84468: MINUS
84469: PUSH
84470: LD_VAR 0 2
84474: PUSH
84475: LD_INT 3
84477: MINUS
84478: PUSH
84479: LD_INT 2
84481: PUSH
84482: EMPTY
84483: LIST
84484: LIST
84485: LIST
84486: PUSH
84487: LD_VAR 0 1
84491: PUSH
84492: LD_INT 4
84494: MINUS
84495: PUSH
84496: LD_VAR 0 2
84500: PUSH
84501: LD_INT 1
84503: PUSH
84504: EMPTY
84505: LIST
84506: LIST
84507: LIST
84508: PUSH
84509: LD_VAR 0 1
84513: PUSH
84514: LD_VAR 0 2
84518: PUSH
84519: LD_INT 3
84521: PLUS
84522: PUSH
84523: LD_INT 0
84525: PUSH
84526: EMPTY
84527: LIST
84528: LIST
84529: LIST
84530: PUSH
84531: LD_VAR 0 1
84535: PUSH
84536: LD_INT 4
84538: PLUS
84539: PUSH
84540: LD_VAR 0 2
84544: PUSH
84545: LD_INT 4
84547: PLUS
84548: PUSH
84549: LD_INT 5
84551: PUSH
84552: EMPTY
84553: LIST
84554: LIST
84555: LIST
84556: PUSH
84557: EMPTY
84558: LIST
84559: LIST
84560: LIST
84561: LIST
84562: LIST
84563: ST_TO_ADDR
// end ; 2 :
84564: GO 85123
84566: LD_INT 2
84568: DOUBLE
84569: EQUAL
84570: IFTRUE 84574
84572: GO 84703
84574: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
84575: LD_ADDR_VAR 0 5
84579: PUSH
84580: LD_VAR 0 1
84584: PUSH
84585: LD_VAR 0 2
84589: PUSH
84590: LD_INT 3
84592: MINUS
84593: PUSH
84594: LD_INT 3
84596: PUSH
84597: EMPTY
84598: LIST
84599: LIST
84600: LIST
84601: PUSH
84602: LD_VAR 0 1
84606: PUSH
84607: LD_INT 4
84609: PLUS
84610: PUSH
84611: LD_VAR 0 2
84615: PUSH
84616: LD_INT 4
84618: PUSH
84619: EMPTY
84620: LIST
84621: LIST
84622: LIST
84623: PUSH
84624: LD_VAR 0 1
84628: PUSH
84629: LD_VAR 0 2
84633: PUSH
84634: LD_INT 4
84636: PLUS
84637: PUSH
84638: LD_INT 0
84640: PUSH
84641: EMPTY
84642: LIST
84643: LIST
84644: LIST
84645: PUSH
84646: LD_VAR 0 1
84650: PUSH
84651: LD_INT 3
84653: MINUS
84654: PUSH
84655: LD_VAR 0 2
84659: PUSH
84660: LD_INT 1
84662: PUSH
84663: EMPTY
84664: LIST
84665: LIST
84666: LIST
84667: PUSH
84668: LD_VAR 0 1
84672: PUSH
84673: LD_INT 4
84675: MINUS
84676: PUSH
84677: LD_VAR 0 2
84681: PUSH
84682: LD_INT 4
84684: MINUS
84685: PUSH
84686: LD_INT 2
84688: PUSH
84689: EMPTY
84690: LIST
84691: LIST
84692: LIST
84693: PUSH
84694: EMPTY
84695: LIST
84696: LIST
84697: LIST
84698: LIST
84699: LIST
84700: ST_TO_ADDR
// end ; 3 :
84701: GO 85123
84703: LD_INT 3
84705: DOUBLE
84706: EQUAL
84707: IFTRUE 84711
84709: GO 84844
84711: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
84712: LD_ADDR_VAR 0 5
84716: PUSH
84717: LD_VAR 0 1
84721: PUSH
84722: LD_INT 3
84724: PLUS
84725: PUSH
84726: LD_VAR 0 2
84730: PUSH
84731: LD_INT 4
84733: PUSH
84734: EMPTY
84735: LIST
84736: LIST
84737: LIST
84738: PUSH
84739: LD_VAR 0 1
84743: PUSH
84744: LD_INT 4
84746: PLUS
84747: PUSH
84748: LD_VAR 0 2
84752: PUSH
84753: LD_INT 4
84755: PLUS
84756: PUSH
84757: LD_INT 5
84759: PUSH
84760: EMPTY
84761: LIST
84762: LIST
84763: LIST
84764: PUSH
84765: LD_VAR 0 1
84769: PUSH
84770: LD_INT 4
84772: MINUS
84773: PUSH
84774: LD_VAR 0 2
84778: PUSH
84779: LD_INT 1
84781: PUSH
84782: EMPTY
84783: LIST
84784: LIST
84785: LIST
84786: PUSH
84787: LD_VAR 0 1
84791: PUSH
84792: LD_VAR 0 2
84796: PUSH
84797: LD_INT 4
84799: MINUS
84800: PUSH
84801: LD_INT 3
84803: PUSH
84804: EMPTY
84805: LIST
84806: LIST
84807: LIST
84808: PUSH
84809: LD_VAR 0 1
84813: PUSH
84814: LD_INT 3
84816: MINUS
84817: PUSH
84818: LD_VAR 0 2
84822: PUSH
84823: LD_INT 3
84825: MINUS
84826: PUSH
84827: LD_INT 2
84829: PUSH
84830: EMPTY
84831: LIST
84832: LIST
84833: LIST
84834: PUSH
84835: EMPTY
84836: LIST
84837: LIST
84838: LIST
84839: LIST
84840: LIST
84841: ST_TO_ADDR
// end ; 4 :
84842: GO 85123
84844: LD_INT 4
84846: DOUBLE
84847: EQUAL
84848: IFTRUE 84852
84850: GO 84985
84852: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
84853: LD_ADDR_VAR 0 5
84857: PUSH
84858: LD_VAR 0 1
84862: PUSH
84863: LD_VAR 0 2
84867: PUSH
84868: LD_INT 4
84870: PLUS
84871: PUSH
84872: LD_INT 0
84874: PUSH
84875: EMPTY
84876: LIST
84877: LIST
84878: LIST
84879: PUSH
84880: LD_VAR 0 1
84884: PUSH
84885: LD_INT 3
84887: PLUS
84888: PUSH
84889: LD_VAR 0 2
84893: PUSH
84894: LD_INT 3
84896: PLUS
84897: PUSH
84898: LD_INT 5
84900: PUSH
84901: EMPTY
84902: LIST
84903: LIST
84904: LIST
84905: PUSH
84906: LD_VAR 0 1
84910: PUSH
84911: LD_INT 4
84913: PLUS
84914: PUSH
84915: LD_VAR 0 2
84919: PUSH
84920: LD_INT 4
84922: PUSH
84923: EMPTY
84924: LIST
84925: LIST
84926: LIST
84927: PUSH
84928: LD_VAR 0 1
84932: PUSH
84933: LD_VAR 0 2
84937: PUSH
84938: LD_INT 3
84940: MINUS
84941: PUSH
84942: LD_INT 3
84944: PUSH
84945: EMPTY
84946: LIST
84947: LIST
84948: LIST
84949: PUSH
84950: LD_VAR 0 1
84954: PUSH
84955: LD_INT 4
84957: MINUS
84958: PUSH
84959: LD_VAR 0 2
84963: PUSH
84964: LD_INT 4
84966: MINUS
84967: PUSH
84968: LD_INT 2
84970: PUSH
84971: EMPTY
84972: LIST
84973: LIST
84974: LIST
84975: PUSH
84976: EMPTY
84977: LIST
84978: LIST
84979: LIST
84980: LIST
84981: LIST
84982: ST_TO_ADDR
// end ; 5 :
84983: GO 85123
84985: LD_INT 5
84987: DOUBLE
84988: EQUAL
84989: IFTRUE 84993
84991: GO 85122
84993: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
84994: LD_ADDR_VAR 0 5
84998: PUSH
84999: LD_VAR 0 1
85003: PUSH
85004: LD_INT 4
85006: MINUS
85007: PUSH
85008: LD_VAR 0 2
85012: PUSH
85013: LD_INT 1
85015: PUSH
85016: EMPTY
85017: LIST
85018: LIST
85019: LIST
85020: PUSH
85021: LD_VAR 0 1
85025: PUSH
85026: LD_VAR 0 2
85030: PUSH
85031: LD_INT 4
85033: MINUS
85034: PUSH
85035: LD_INT 3
85037: PUSH
85038: EMPTY
85039: LIST
85040: LIST
85041: LIST
85042: PUSH
85043: LD_VAR 0 1
85047: PUSH
85048: LD_INT 4
85050: PLUS
85051: PUSH
85052: LD_VAR 0 2
85056: PUSH
85057: LD_INT 4
85059: PLUS
85060: PUSH
85061: LD_INT 5
85063: PUSH
85064: EMPTY
85065: LIST
85066: LIST
85067: LIST
85068: PUSH
85069: LD_VAR 0 1
85073: PUSH
85074: LD_INT 3
85076: PLUS
85077: PUSH
85078: LD_VAR 0 2
85082: PUSH
85083: LD_INT 4
85085: PUSH
85086: EMPTY
85087: LIST
85088: LIST
85089: LIST
85090: PUSH
85091: LD_VAR 0 1
85095: PUSH
85096: LD_VAR 0 2
85100: PUSH
85101: LD_INT 3
85103: PLUS
85104: PUSH
85105: LD_INT 0
85107: PUSH
85108: EMPTY
85109: LIST
85110: LIST
85111: LIST
85112: PUSH
85113: EMPTY
85114: LIST
85115: LIST
85116: LIST
85117: LIST
85118: LIST
85119: ST_TO_ADDR
// end ; end ;
85120: GO 85123
85122: POP
// result := list ;
85123: LD_ADDR_VAR 0 4
85127: PUSH
85128: LD_VAR 0 5
85132: ST_TO_ADDR
// end ;
85133: LD_VAR 0 4
85137: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
85138: LD_INT 0
85140: PPUSH
85141: PPUSH
85142: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
85143: LD_VAR 0 1
85147: NOT
85148: PUSH
85149: LD_VAR 0 2
85153: PUSH
85154: LD_INT 1
85156: PUSH
85157: LD_INT 2
85159: PUSH
85160: LD_INT 3
85162: PUSH
85163: LD_INT 4
85165: PUSH
85166: EMPTY
85167: LIST
85168: LIST
85169: LIST
85170: LIST
85171: IN
85172: NOT
85173: OR
85174: IFFALSE 85178
// exit ;
85176: GO 85270
// tmp := [ ] ;
85178: LD_ADDR_VAR 0 5
85182: PUSH
85183: EMPTY
85184: ST_TO_ADDR
// for i in units do
85185: LD_ADDR_VAR 0 4
85189: PUSH
85190: LD_VAR 0 1
85194: PUSH
85195: FOR_IN
85196: IFFALSE 85239
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
85198: LD_ADDR_VAR 0 5
85202: PUSH
85203: LD_VAR 0 5
85207: PPUSH
85208: LD_VAR 0 5
85212: PUSH
85213: LD_INT 1
85215: PLUS
85216: PPUSH
85217: LD_VAR 0 4
85221: PPUSH
85222: LD_VAR 0 2
85226: PPUSH
85227: CALL_OW 259
85231: PPUSH
85232: CALL_OW 2
85236: ST_TO_ADDR
85237: GO 85195
85239: POP
85240: POP
// if not tmp then
85241: LD_VAR 0 5
85245: NOT
85246: IFFALSE 85250
// exit ;
85248: GO 85270
// result := SortListByListDesc ( units , tmp ) ;
85250: LD_ADDR_VAR 0 3
85254: PUSH
85255: LD_VAR 0 1
85259: PPUSH
85260: LD_VAR 0 5
85264: PPUSH
85265: CALL_OW 77
85269: ST_TO_ADDR
// end ;
85270: LD_VAR 0 3
85274: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
85275: LD_INT 0
85277: PPUSH
85278: PPUSH
85279: PPUSH
// x := GetX ( building ) ;
85280: LD_ADDR_VAR 0 4
85284: PUSH
85285: LD_VAR 0 2
85289: PPUSH
85290: CALL_OW 250
85294: ST_TO_ADDR
// y := GetY ( building ) ;
85295: LD_ADDR_VAR 0 5
85299: PUSH
85300: LD_VAR 0 2
85304: PPUSH
85305: CALL_OW 251
85309: ST_TO_ADDR
// if GetTaskList ( unit ) then
85310: LD_VAR 0 1
85314: PPUSH
85315: CALL_OW 437
85319: IFFALSE 85414
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
85321: LD_STRING e
85323: PUSH
85324: LD_VAR 0 1
85328: PPUSH
85329: CALL_OW 437
85333: PUSH
85334: LD_INT 1
85336: ARRAY
85337: PUSH
85338: LD_INT 1
85340: ARRAY
85341: EQUAL
85342: PUSH
85343: LD_VAR 0 4
85347: PUSH
85348: LD_VAR 0 1
85352: PPUSH
85353: CALL_OW 437
85357: PUSH
85358: LD_INT 1
85360: ARRAY
85361: PUSH
85362: LD_INT 2
85364: ARRAY
85365: EQUAL
85366: AND
85367: PUSH
85368: LD_VAR 0 5
85372: PUSH
85373: LD_VAR 0 1
85377: PPUSH
85378: CALL_OW 437
85382: PUSH
85383: LD_INT 1
85385: ARRAY
85386: PUSH
85387: LD_INT 3
85389: ARRAY
85390: EQUAL
85391: AND
85392: IFFALSE 85404
// result := true else
85394: LD_ADDR_VAR 0 3
85398: PUSH
85399: LD_INT 1
85401: ST_TO_ADDR
85402: GO 85412
// result := false ;
85404: LD_ADDR_VAR 0 3
85408: PUSH
85409: LD_INT 0
85411: ST_TO_ADDR
// end else
85412: GO 85422
// result := false ;
85414: LD_ADDR_VAR 0 3
85418: PUSH
85419: LD_INT 0
85421: ST_TO_ADDR
// end ;
85422: LD_VAR 0 3
85426: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
85427: LD_INT 0
85429: PPUSH
85430: PPUSH
85431: PPUSH
85432: PPUSH
// if not unit or not area then
85433: LD_VAR 0 1
85437: NOT
85438: PUSH
85439: LD_VAR 0 2
85443: NOT
85444: OR
85445: IFFALSE 85449
// exit ;
85447: GO 85613
// tmp := AreaToList ( area , i ) ;
85449: LD_ADDR_VAR 0 6
85453: PUSH
85454: LD_VAR 0 2
85458: PPUSH
85459: LD_VAR 0 5
85463: PPUSH
85464: CALL_OW 517
85468: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
85469: LD_ADDR_VAR 0 5
85473: PUSH
85474: DOUBLE
85475: LD_INT 1
85477: DEC
85478: ST_TO_ADDR
85479: LD_VAR 0 6
85483: PUSH
85484: LD_INT 1
85486: ARRAY
85487: PUSH
85488: FOR_TO
85489: IFFALSE 85611
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
85491: LD_ADDR_VAR 0 7
85495: PUSH
85496: LD_VAR 0 6
85500: PUSH
85501: LD_INT 1
85503: ARRAY
85504: PUSH
85505: LD_VAR 0 5
85509: ARRAY
85510: PUSH
85511: LD_VAR 0 6
85515: PUSH
85516: LD_INT 2
85518: ARRAY
85519: PUSH
85520: LD_VAR 0 5
85524: ARRAY
85525: PUSH
85526: EMPTY
85527: LIST
85528: LIST
85529: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
85530: LD_VAR 0 7
85534: PUSH
85535: LD_INT 1
85537: ARRAY
85538: PPUSH
85539: LD_VAR 0 7
85543: PUSH
85544: LD_INT 2
85546: ARRAY
85547: PPUSH
85548: CALL_OW 428
85552: PUSH
85553: LD_INT 0
85555: EQUAL
85556: IFFALSE 85609
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
85558: LD_VAR 0 1
85562: PPUSH
85563: LD_VAR 0 7
85567: PUSH
85568: LD_INT 1
85570: ARRAY
85571: PPUSH
85572: LD_VAR 0 7
85576: PUSH
85577: LD_INT 2
85579: ARRAY
85580: PPUSH
85581: LD_VAR 0 3
85585: PPUSH
85586: CALL_OW 48
// result := IsPlaced ( unit ) ;
85590: LD_ADDR_VAR 0 4
85594: PUSH
85595: LD_VAR 0 1
85599: PPUSH
85600: CALL_OW 305
85604: ST_TO_ADDR
// exit ;
85605: POP
85606: POP
85607: GO 85613
// end ; end ;
85609: GO 85488
85611: POP
85612: POP
// end ;
85613: LD_VAR 0 4
85617: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
85618: LD_INT 0
85620: PPUSH
85621: PPUSH
85622: PPUSH
// if not side or side > 8 then
85623: LD_VAR 0 1
85627: NOT
85628: PUSH
85629: LD_VAR 0 1
85633: PUSH
85634: LD_INT 8
85636: GREATER
85637: OR
85638: IFFALSE 85642
// exit ;
85640: GO 85829
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
85642: LD_ADDR_VAR 0 4
85646: PUSH
85647: LD_INT 22
85649: PUSH
85650: LD_VAR 0 1
85654: PUSH
85655: EMPTY
85656: LIST
85657: LIST
85658: PUSH
85659: LD_INT 21
85661: PUSH
85662: LD_INT 3
85664: PUSH
85665: EMPTY
85666: LIST
85667: LIST
85668: PUSH
85669: EMPTY
85670: LIST
85671: LIST
85672: PPUSH
85673: CALL_OW 69
85677: ST_TO_ADDR
// if not tmp then
85678: LD_VAR 0 4
85682: NOT
85683: IFFALSE 85687
// exit ;
85685: GO 85829
// enable_addtolog := true ;
85687: LD_ADDR_OWVAR 81
85691: PUSH
85692: LD_INT 1
85694: ST_TO_ADDR
// AddToLog ( [ ) ;
85695: LD_STRING [
85697: PPUSH
85698: CALL_OW 561
// for i in tmp do
85702: LD_ADDR_VAR 0 3
85706: PUSH
85707: LD_VAR 0 4
85711: PUSH
85712: FOR_IN
85713: IFFALSE 85820
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
85715: LD_STRING [
85717: PUSH
85718: LD_VAR 0 3
85722: PPUSH
85723: CALL_OW 266
85727: STR
85728: PUSH
85729: LD_STRING , 
85731: STR
85732: PUSH
85733: LD_VAR 0 3
85737: PPUSH
85738: CALL_OW 250
85742: STR
85743: PUSH
85744: LD_STRING , 
85746: STR
85747: PUSH
85748: LD_VAR 0 3
85752: PPUSH
85753: CALL_OW 251
85757: STR
85758: PUSH
85759: LD_STRING , 
85761: STR
85762: PUSH
85763: LD_VAR 0 3
85767: PPUSH
85768: CALL_OW 254
85772: STR
85773: PUSH
85774: LD_STRING , 
85776: STR
85777: PUSH
85778: LD_VAR 0 3
85782: PPUSH
85783: LD_INT 1
85785: PPUSH
85786: CALL_OW 268
85790: STR
85791: PUSH
85792: LD_STRING , 
85794: STR
85795: PUSH
85796: LD_VAR 0 3
85800: PPUSH
85801: LD_INT 2
85803: PPUSH
85804: CALL_OW 268
85808: STR
85809: PUSH
85810: LD_STRING ],
85812: STR
85813: PPUSH
85814: CALL_OW 561
// end ;
85818: GO 85712
85820: POP
85821: POP
// AddToLog ( ]; ) ;
85822: LD_STRING ];
85824: PPUSH
85825: CALL_OW 561
// end ;
85829: LD_VAR 0 2
85833: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
85834: LD_INT 0
85836: PPUSH
85837: PPUSH
85838: PPUSH
85839: PPUSH
85840: PPUSH
// if not area or not rate or not max then
85841: LD_VAR 0 1
85845: NOT
85846: PUSH
85847: LD_VAR 0 2
85851: NOT
85852: OR
85853: PUSH
85854: LD_VAR 0 4
85858: NOT
85859: OR
85860: IFFALSE 85864
// exit ;
85862: GO 86056
// while 1 do
85864: LD_INT 1
85866: IFFALSE 86056
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
85868: LD_ADDR_VAR 0 9
85872: PUSH
85873: LD_VAR 0 1
85877: PPUSH
85878: LD_INT 1
85880: PPUSH
85881: CALL_OW 287
85885: PUSH
85886: LD_INT 10
85888: MUL
85889: ST_TO_ADDR
// r := rate / 10 ;
85890: LD_ADDR_VAR 0 7
85894: PUSH
85895: LD_VAR 0 2
85899: PUSH
85900: LD_INT 10
85902: DIVREAL
85903: ST_TO_ADDR
// time := 1 1$00 ;
85904: LD_ADDR_VAR 0 8
85908: PUSH
85909: LD_INT 2100
85911: ST_TO_ADDR
// if amount < min then
85912: LD_VAR 0 9
85916: PUSH
85917: LD_VAR 0 3
85921: LESS
85922: IFFALSE 85940
// r := r * 2 else
85924: LD_ADDR_VAR 0 7
85928: PUSH
85929: LD_VAR 0 7
85933: PUSH
85934: LD_INT 2
85936: MUL
85937: ST_TO_ADDR
85938: GO 85966
// if amount > max then
85940: LD_VAR 0 9
85944: PUSH
85945: LD_VAR 0 4
85949: GREATER
85950: IFFALSE 85966
// r := r / 2 ;
85952: LD_ADDR_VAR 0 7
85956: PUSH
85957: LD_VAR 0 7
85961: PUSH
85962: LD_INT 2
85964: DIVREAL
85965: ST_TO_ADDR
// time := time / r ;
85966: LD_ADDR_VAR 0 8
85970: PUSH
85971: LD_VAR 0 8
85975: PUSH
85976: LD_VAR 0 7
85980: DIVREAL
85981: ST_TO_ADDR
// if time < 0 then
85982: LD_VAR 0 8
85986: PUSH
85987: LD_INT 0
85989: LESS
85990: IFFALSE 86007
// time := time * - 1 ;
85992: LD_ADDR_VAR 0 8
85996: PUSH
85997: LD_VAR 0 8
86001: PUSH
86002: LD_INT 1
86004: NEG
86005: MUL
86006: ST_TO_ADDR
// wait ( time ) ;
86007: LD_VAR 0 8
86011: PPUSH
86012: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
86016: LD_INT 35
86018: PPUSH
86019: LD_INT 875
86021: PPUSH
86022: CALL_OW 12
86026: PPUSH
86027: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
86031: LD_INT 1
86033: PPUSH
86034: LD_INT 5
86036: PPUSH
86037: CALL_OW 12
86041: PPUSH
86042: LD_VAR 0 1
86046: PPUSH
86047: LD_INT 1
86049: PPUSH
86050: CALL_OW 55
// end ;
86054: GO 85864
// end ;
86056: LD_VAR 0 5
86060: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
86061: LD_INT 0
86063: PPUSH
86064: PPUSH
86065: PPUSH
86066: PPUSH
86067: PPUSH
86068: PPUSH
86069: PPUSH
86070: PPUSH
// if not turrets or not factories then
86071: LD_VAR 0 1
86075: NOT
86076: PUSH
86077: LD_VAR 0 2
86081: NOT
86082: OR
86083: IFFALSE 86087
// exit ;
86085: GO 86394
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
86087: LD_ADDR_VAR 0 10
86091: PUSH
86092: LD_INT 5
86094: PUSH
86095: LD_INT 6
86097: PUSH
86098: EMPTY
86099: LIST
86100: LIST
86101: PUSH
86102: LD_INT 2
86104: PUSH
86105: LD_INT 4
86107: PUSH
86108: EMPTY
86109: LIST
86110: LIST
86111: PUSH
86112: LD_INT 3
86114: PUSH
86115: LD_INT 5
86117: PUSH
86118: EMPTY
86119: LIST
86120: LIST
86121: PUSH
86122: EMPTY
86123: LIST
86124: LIST
86125: LIST
86126: PUSH
86127: LD_INT 24
86129: PUSH
86130: LD_INT 25
86132: PUSH
86133: EMPTY
86134: LIST
86135: LIST
86136: PUSH
86137: LD_INT 23
86139: PUSH
86140: LD_INT 27
86142: PUSH
86143: EMPTY
86144: LIST
86145: LIST
86146: PUSH
86147: EMPTY
86148: LIST
86149: LIST
86150: PUSH
86151: LD_INT 42
86153: PUSH
86154: LD_INT 43
86156: PUSH
86157: EMPTY
86158: LIST
86159: LIST
86160: PUSH
86161: LD_INT 44
86163: PUSH
86164: LD_INT 46
86166: PUSH
86167: EMPTY
86168: LIST
86169: LIST
86170: PUSH
86171: LD_INT 45
86173: PUSH
86174: LD_INT 47
86176: PUSH
86177: EMPTY
86178: LIST
86179: LIST
86180: PUSH
86181: EMPTY
86182: LIST
86183: LIST
86184: LIST
86185: PUSH
86186: EMPTY
86187: LIST
86188: LIST
86189: LIST
86190: ST_TO_ADDR
// result := [ ] ;
86191: LD_ADDR_VAR 0 3
86195: PUSH
86196: EMPTY
86197: ST_TO_ADDR
// for i in turrets do
86198: LD_ADDR_VAR 0 4
86202: PUSH
86203: LD_VAR 0 1
86207: PUSH
86208: FOR_IN
86209: IFFALSE 86392
// begin nat := GetNation ( i ) ;
86211: LD_ADDR_VAR 0 7
86215: PUSH
86216: LD_VAR 0 4
86220: PPUSH
86221: CALL_OW 248
86225: ST_TO_ADDR
// weapon := 0 ;
86226: LD_ADDR_VAR 0 8
86230: PUSH
86231: LD_INT 0
86233: ST_TO_ADDR
// if not nat then
86234: LD_VAR 0 7
86238: NOT
86239: IFFALSE 86243
// continue ;
86241: GO 86208
// for j in list [ nat ] do
86243: LD_ADDR_VAR 0 5
86247: PUSH
86248: LD_VAR 0 10
86252: PUSH
86253: LD_VAR 0 7
86257: ARRAY
86258: PUSH
86259: FOR_IN
86260: IFFALSE 86301
// if GetBWeapon ( i ) = j [ 1 ] then
86262: LD_VAR 0 4
86266: PPUSH
86267: CALL_OW 269
86271: PUSH
86272: LD_VAR 0 5
86276: PUSH
86277: LD_INT 1
86279: ARRAY
86280: EQUAL
86281: IFFALSE 86299
// begin weapon := j [ 2 ] ;
86283: LD_ADDR_VAR 0 8
86287: PUSH
86288: LD_VAR 0 5
86292: PUSH
86293: LD_INT 2
86295: ARRAY
86296: ST_TO_ADDR
// break ;
86297: GO 86301
// end ;
86299: GO 86259
86301: POP
86302: POP
// if not weapon then
86303: LD_VAR 0 8
86307: NOT
86308: IFFALSE 86312
// continue ;
86310: GO 86208
// for k in factories do
86312: LD_ADDR_VAR 0 6
86316: PUSH
86317: LD_VAR 0 2
86321: PUSH
86322: FOR_IN
86323: IFFALSE 86388
// begin weapons := AvailableWeaponList ( k ) ;
86325: LD_ADDR_VAR 0 9
86329: PUSH
86330: LD_VAR 0 6
86334: PPUSH
86335: CALL_OW 478
86339: ST_TO_ADDR
// if not weapons then
86340: LD_VAR 0 9
86344: NOT
86345: IFFALSE 86349
// continue ;
86347: GO 86322
// if weapon in weapons then
86349: LD_VAR 0 8
86353: PUSH
86354: LD_VAR 0 9
86358: IN
86359: IFFALSE 86386
// begin result := [ i , weapon ] ;
86361: LD_ADDR_VAR 0 3
86365: PUSH
86366: LD_VAR 0 4
86370: PUSH
86371: LD_VAR 0 8
86375: PUSH
86376: EMPTY
86377: LIST
86378: LIST
86379: ST_TO_ADDR
// exit ;
86380: POP
86381: POP
86382: POP
86383: POP
86384: GO 86394
// end ; end ;
86386: GO 86322
86388: POP
86389: POP
// end ;
86390: GO 86208
86392: POP
86393: POP
// end ;
86394: LD_VAR 0 3
86398: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
86399: LD_INT 0
86401: PPUSH
// if not side or side > 8 then
86402: LD_VAR 0 3
86406: NOT
86407: PUSH
86408: LD_VAR 0 3
86412: PUSH
86413: LD_INT 8
86415: GREATER
86416: OR
86417: IFFALSE 86421
// exit ;
86419: GO 86480
// if not range then
86421: LD_VAR 0 4
86425: NOT
86426: IFFALSE 86437
// range := - 12 ;
86428: LD_ADDR_VAR 0 4
86432: PUSH
86433: LD_INT 12
86435: NEG
86436: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
86437: LD_VAR 0 1
86441: PPUSH
86442: LD_VAR 0 2
86446: PPUSH
86447: LD_VAR 0 3
86451: PPUSH
86452: LD_VAR 0 4
86456: PPUSH
86457: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
86461: LD_VAR 0 1
86465: PPUSH
86466: LD_VAR 0 2
86470: PPUSH
86471: LD_VAR 0 3
86475: PPUSH
86476: CALL_OW 331
// end ;
86480: LD_VAR 0 5
86484: RET
// export function Video ( mode ) ; begin
86485: LD_INT 0
86487: PPUSH
// ingame_video = mode ;
86488: LD_ADDR_OWVAR 52
86492: PUSH
86493: LD_VAR 0 1
86497: ST_TO_ADDR
// interface_hidden = mode ;
86498: LD_ADDR_OWVAR 54
86502: PUSH
86503: LD_VAR 0 1
86507: ST_TO_ADDR
// end ;
86508: LD_VAR 0 2
86512: RET
// export function Join ( array , element ) ; begin
86513: LD_INT 0
86515: PPUSH
// result := array ^ element ;
86516: LD_ADDR_VAR 0 3
86520: PUSH
86521: LD_VAR 0 1
86525: PUSH
86526: LD_VAR 0 2
86530: ADD
86531: ST_TO_ADDR
// end ;
86532: LD_VAR 0 3
86536: RET
// export function JoinUnion ( array , element ) ; begin
86537: LD_INT 0
86539: PPUSH
// result := array union element ;
86540: LD_ADDR_VAR 0 3
86544: PUSH
86545: LD_VAR 0 1
86549: PUSH
86550: LD_VAR 0 2
86554: UNION
86555: ST_TO_ADDR
// end ;
86556: LD_VAR 0 3
86560: RET
// export function GetBehemoths ( side ) ; begin
86561: LD_INT 0
86563: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
86564: LD_ADDR_VAR 0 2
86568: PUSH
86569: LD_INT 22
86571: PUSH
86572: LD_VAR 0 1
86576: PUSH
86577: EMPTY
86578: LIST
86579: LIST
86580: PUSH
86581: LD_INT 31
86583: PUSH
86584: LD_INT 25
86586: PUSH
86587: EMPTY
86588: LIST
86589: LIST
86590: PUSH
86591: EMPTY
86592: LIST
86593: LIST
86594: PPUSH
86595: CALL_OW 69
86599: ST_TO_ADDR
// end ;
86600: LD_VAR 0 2
86604: RET
// export function Shuffle ( array ) ; var i , index ; begin
86605: LD_INT 0
86607: PPUSH
86608: PPUSH
86609: PPUSH
// result := [ ] ;
86610: LD_ADDR_VAR 0 2
86614: PUSH
86615: EMPTY
86616: ST_TO_ADDR
// if not array then
86617: LD_VAR 0 1
86621: NOT
86622: IFFALSE 86626
// exit ;
86624: GO 86725
// Randomize ;
86626: CALL_OW 10
// for i = array downto 1 do
86630: LD_ADDR_VAR 0 3
86634: PUSH
86635: DOUBLE
86636: LD_VAR 0 1
86640: INC
86641: ST_TO_ADDR
86642: LD_INT 1
86644: PUSH
86645: FOR_DOWNTO
86646: IFFALSE 86723
// begin index := rand ( 1 , array ) ;
86648: LD_ADDR_VAR 0 4
86652: PUSH
86653: LD_INT 1
86655: PPUSH
86656: LD_VAR 0 1
86660: PPUSH
86661: CALL_OW 12
86665: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
86666: LD_ADDR_VAR 0 2
86670: PUSH
86671: LD_VAR 0 2
86675: PPUSH
86676: LD_VAR 0 2
86680: PUSH
86681: LD_INT 1
86683: PLUS
86684: PPUSH
86685: LD_VAR 0 1
86689: PUSH
86690: LD_VAR 0 4
86694: ARRAY
86695: PPUSH
86696: CALL_OW 2
86700: ST_TO_ADDR
// array := Delete ( array , index ) ;
86701: LD_ADDR_VAR 0 1
86705: PUSH
86706: LD_VAR 0 1
86710: PPUSH
86711: LD_VAR 0 4
86715: PPUSH
86716: CALL_OW 3
86720: ST_TO_ADDR
// end ;
86721: GO 86645
86723: POP
86724: POP
// end ;
86725: LD_VAR 0 2
86729: RET
// export function GetBaseMaterials ( base ) ; begin
86730: LD_INT 0
86732: PPUSH
// result := [ 0 , 0 , 0 ] ;
86733: LD_ADDR_VAR 0 2
86737: PUSH
86738: LD_INT 0
86740: PUSH
86741: LD_INT 0
86743: PUSH
86744: LD_INT 0
86746: PUSH
86747: EMPTY
86748: LIST
86749: LIST
86750: LIST
86751: ST_TO_ADDR
// if not base then
86752: LD_VAR 0 1
86756: NOT
86757: IFFALSE 86761
// exit ;
86759: GO 86810
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
86761: LD_ADDR_VAR 0 2
86765: PUSH
86766: LD_VAR 0 1
86770: PPUSH
86771: LD_INT 1
86773: PPUSH
86774: CALL_OW 275
86778: PUSH
86779: LD_VAR 0 1
86783: PPUSH
86784: LD_INT 2
86786: PPUSH
86787: CALL_OW 275
86791: PUSH
86792: LD_VAR 0 1
86796: PPUSH
86797: LD_INT 3
86799: PPUSH
86800: CALL_OW 275
86804: PUSH
86805: EMPTY
86806: LIST
86807: LIST
86808: LIST
86809: ST_TO_ADDR
// end ;
86810: LD_VAR 0 2
86814: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
86815: LD_INT 0
86817: PPUSH
86818: PPUSH
// result := array ;
86819: LD_ADDR_VAR 0 3
86823: PUSH
86824: LD_VAR 0 1
86828: ST_TO_ADDR
// if size > 0 then
86829: LD_VAR 0 2
86833: PUSH
86834: LD_INT 0
86836: GREATER
86837: IFFALSE 86883
// for i := array downto size do
86839: LD_ADDR_VAR 0 4
86843: PUSH
86844: DOUBLE
86845: LD_VAR 0 1
86849: INC
86850: ST_TO_ADDR
86851: LD_VAR 0 2
86855: PUSH
86856: FOR_DOWNTO
86857: IFFALSE 86881
// result := Delete ( result , result ) ;
86859: LD_ADDR_VAR 0 3
86863: PUSH
86864: LD_VAR 0 3
86868: PPUSH
86869: LD_VAR 0 3
86873: PPUSH
86874: CALL_OW 3
86878: ST_TO_ADDR
86879: GO 86856
86881: POP
86882: POP
// end ; end_of_file end_of_file
86883: LD_VAR 0 3
86887: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
86888: GO 86890
86890: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
86891: LD_STRING initStreamRollete();
86893: PPUSH
86894: CALL_OW 559
// InitStreamMode ;
86898: CALL 86907 0 0
// DefineStreamItems ( ) ;
86902: CALL 87347 0 0
// end ;
86906: END
// function InitStreamMode ; begin
86907: LD_INT 0
86909: PPUSH
// streamModeActive := false ;
86910: LD_ADDR_EXP 130
86914: PUSH
86915: LD_INT 0
86917: ST_TO_ADDR
// normalCounter := 36 ;
86918: LD_ADDR_EXP 131
86922: PUSH
86923: LD_INT 36
86925: ST_TO_ADDR
// hardcoreCounter := 16 ;
86926: LD_ADDR_EXP 132
86930: PUSH
86931: LD_INT 16
86933: ST_TO_ADDR
// sRocket := false ;
86934: LD_ADDR_EXP 135
86938: PUSH
86939: LD_INT 0
86941: ST_TO_ADDR
// sSpeed := false ;
86942: LD_ADDR_EXP 134
86946: PUSH
86947: LD_INT 0
86949: ST_TO_ADDR
// sEngine := false ;
86950: LD_ADDR_EXP 136
86954: PUSH
86955: LD_INT 0
86957: ST_TO_ADDR
// sSpec := false ;
86958: LD_ADDR_EXP 133
86962: PUSH
86963: LD_INT 0
86965: ST_TO_ADDR
// sLevel := false ;
86966: LD_ADDR_EXP 137
86970: PUSH
86971: LD_INT 0
86973: ST_TO_ADDR
// sArmoury := false ;
86974: LD_ADDR_EXP 138
86978: PUSH
86979: LD_INT 0
86981: ST_TO_ADDR
// sRadar := false ;
86982: LD_ADDR_EXP 139
86986: PUSH
86987: LD_INT 0
86989: ST_TO_ADDR
// sBunker := false ;
86990: LD_ADDR_EXP 140
86994: PUSH
86995: LD_INT 0
86997: ST_TO_ADDR
// sHack := false ;
86998: LD_ADDR_EXP 141
87002: PUSH
87003: LD_INT 0
87005: ST_TO_ADDR
// sFire := false ;
87006: LD_ADDR_EXP 142
87010: PUSH
87011: LD_INT 0
87013: ST_TO_ADDR
// sRefresh := false ;
87014: LD_ADDR_EXP 143
87018: PUSH
87019: LD_INT 0
87021: ST_TO_ADDR
// sExp := false ;
87022: LD_ADDR_EXP 144
87026: PUSH
87027: LD_INT 0
87029: ST_TO_ADDR
// sDepot := false ;
87030: LD_ADDR_EXP 145
87034: PUSH
87035: LD_INT 0
87037: ST_TO_ADDR
// sFlag := false ;
87038: LD_ADDR_EXP 146
87042: PUSH
87043: LD_INT 0
87045: ST_TO_ADDR
// sKamikadze := false ;
87046: LD_ADDR_EXP 154
87050: PUSH
87051: LD_INT 0
87053: ST_TO_ADDR
// sTroll := false ;
87054: LD_ADDR_EXP 155
87058: PUSH
87059: LD_INT 0
87061: ST_TO_ADDR
// sSlow := false ;
87062: LD_ADDR_EXP 156
87066: PUSH
87067: LD_INT 0
87069: ST_TO_ADDR
// sLack := false ;
87070: LD_ADDR_EXP 157
87074: PUSH
87075: LD_INT 0
87077: ST_TO_ADDR
// sTank := false ;
87078: LD_ADDR_EXP 159
87082: PUSH
87083: LD_INT 0
87085: ST_TO_ADDR
// sRemote := false ;
87086: LD_ADDR_EXP 160
87090: PUSH
87091: LD_INT 0
87093: ST_TO_ADDR
// sPowell := false ;
87094: LD_ADDR_EXP 161
87098: PUSH
87099: LD_INT 0
87101: ST_TO_ADDR
// sTeleport := false ;
87102: LD_ADDR_EXP 164
87106: PUSH
87107: LD_INT 0
87109: ST_TO_ADDR
// sOilTower := false ;
87110: LD_ADDR_EXP 166
87114: PUSH
87115: LD_INT 0
87117: ST_TO_ADDR
// sShovel := false ;
87118: LD_ADDR_EXP 167
87122: PUSH
87123: LD_INT 0
87125: ST_TO_ADDR
// sSheik := false ;
87126: LD_ADDR_EXP 168
87130: PUSH
87131: LD_INT 0
87133: ST_TO_ADDR
// sEarthquake := false ;
87134: LD_ADDR_EXP 170
87138: PUSH
87139: LD_INT 0
87141: ST_TO_ADDR
// sAI := false ;
87142: LD_ADDR_EXP 171
87146: PUSH
87147: LD_INT 0
87149: ST_TO_ADDR
// sCargo := false ;
87150: LD_ADDR_EXP 174
87154: PUSH
87155: LD_INT 0
87157: ST_TO_ADDR
// sDLaser := false ;
87158: LD_ADDR_EXP 175
87162: PUSH
87163: LD_INT 0
87165: ST_TO_ADDR
// sExchange := false ;
87166: LD_ADDR_EXP 176
87170: PUSH
87171: LD_INT 0
87173: ST_TO_ADDR
// sFac := false ;
87174: LD_ADDR_EXP 177
87178: PUSH
87179: LD_INT 0
87181: ST_TO_ADDR
// sPower := false ;
87182: LD_ADDR_EXP 178
87186: PUSH
87187: LD_INT 0
87189: ST_TO_ADDR
// sRandom := false ;
87190: LD_ADDR_EXP 179
87194: PUSH
87195: LD_INT 0
87197: ST_TO_ADDR
// sShield := false ;
87198: LD_ADDR_EXP 180
87202: PUSH
87203: LD_INT 0
87205: ST_TO_ADDR
// sTime := false ;
87206: LD_ADDR_EXP 181
87210: PUSH
87211: LD_INT 0
87213: ST_TO_ADDR
// sTools := false ;
87214: LD_ADDR_EXP 182
87218: PUSH
87219: LD_INT 0
87221: ST_TO_ADDR
// sSold := false ;
87222: LD_ADDR_EXP 147
87226: PUSH
87227: LD_INT 0
87229: ST_TO_ADDR
// sDiff := false ;
87230: LD_ADDR_EXP 148
87234: PUSH
87235: LD_INT 0
87237: ST_TO_ADDR
// sFog := false ;
87238: LD_ADDR_EXP 151
87242: PUSH
87243: LD_INT 0
87245: ST_TO_ADDR
// sReset := false ;
87246: LD_ADDR_EXP 152
87250: PUSH
87251: LD_INT 0
87253: ST_TO_ADDR
// sSun := false ;
87254: LD_ADDR_EXP 153
87258: PUSH
87259: LD_INT 0
87261: ST_TO_ADDR
// sTiger := false ;
87262: LD_ADDR_EXP 149
87266: PUSH
87267: LD_INT 0
87269: ST_TO_ADDR
// sBomb := false ;
87270: LD_ADDR_EXP 150
87274: PUSH
87275: LD_INT 0
87277: ST_TO_ADDR
// sWound := false ;
87278: LD_ADDR_EXP 158
87282: PUSH
87283: LD_INT 0
87285: ST_TO_ADDR
// sBetray := false ;
87286: LD_ADDR_EXP 162
87290: PUSH
87291: LD_INT 0
87293: ST_TO_ADDR
// sContamin := false ;
87294: LD_ADDR_EXP 163
87298: PUSH
87299: LD_INT 0
87301: ST_TO_ADDR
// sOil := false ;
87302: LD_ADDR_EXP 165
87306: PUSH
87307: LD_INT 0
87309: ST_TO_ADDR
// sStu := false ;
87310: LD_ADDR_EXP 169
87314: PUSH
87315: LD_INT 0
87317: ST_TO_ADDR
// sBazooka := false ;
87318: LD_ADDR_EXP 172
87322: PUSH
87323: LD_INT 0
87325: ST_TO_ADDR
// sMortar := false ;
87326: LD_ADDR_EXP 173
87330: PUSH
87331: LD_INT 0
87333: ST_TO_ADDR
// sRanger := false ;
87334: LD_ADDR_EXP 183
87338: PUSH
87339: LD_INT 0
87341: ST_TO_ADDR
// end ;
87342: LD_VAR 0 1
87346: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
87347: LD_INT 0
87349: PPUSH
87350: PPUSH
87351: PPUSH
87352: PPUSH
87353: PPUSH
// result := [ ] ;
87354: LD_ADDR_VAR 0 1
87358: PUSH
87359: EMPTY
87360: ST_TO_ADDR
// if campaign_id = 1 then
87361: LD_OWVAR 69
87365: PUSH
87366: LD_INT 1
87368: EQUAL
87369: IFFALSE 90307
// begin case mission_number of 1 :
87371: LD_OWVAR 70
87375: PUSH
87376: LD_INT 1
87378: DOUBLE
87379: EQUAL
87380: IFTRUE 87384
87382: GO 87448
87384: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
87385: LD_ADDR_VAR 0 1
87389: PUSH
87390: LD_INT 2
87392: PUSH
87393: LD_INT 4
87395: PUSH
87396: LD_INT 11
87398: PUSH
87399: LD_INT 12
87401: PUSH
87402: LD_INT 15
87404: PUSH
87405: LD_INT 16
87407: PUSH
87408: LD_INT 22
87410: PUSH
87411: LD_INT 23
87413: PUSH
87414: LD_INT 26
87416: PUSH
87417: EMPTY
87418: LIST
87419: LIST
87420: LIST
87421: LIST
87422: LIST
87423: LIST
87424: LIST
87425: LIST
87426: LIST
87427: PUSH
87428: LD_INT 101
87430: PUSH
87431: LD_INT 102
87433: PUSH
87434: LD_INT 106
87436: PUSH
87437: EMPTY
87438: LIST
87439: LIST
87440: LIST
87441: PUSH
87442: EMPTY
87443: LIST
87444: LIST
87445: ST_TO_ADDR
87446: GO 90305
87448: LD_INT 2
87450: DOUBLE
87451: EQUAL
87452: IFTRUE 87456
87454: GO 87528
87456: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
87457: LD_ADDR_VAR 0 1
87461: PUSH
87462: LD_INT 2
87464: PUSH
87465: LD_INT 4
87467: PUSH
87468: LD_INT 11
87470: PUSH
87471: LD_INT 12
87473: PUSH
87474: LD_INT 15
87476: PUSH
87477: LD_INT 16
87479: PUSH
87480: LD_INT 22
87482: PUSH
87483: LD_INT 23
87485: PUSH
87486: LD_INT 26
87488: PUSH
87489: EMPTY
87490: LIST
87491: LIST
87492: LIST
87493: LIST
87494: LIST
87495: LIST
87496: LIST
87497: LIST
87498: LIST
87499: PUSH
87500: LD_INT 101
87502: PUSH
87503: LD_INT 102
87505: PUSH
87506: LD_INT 105
87508: PUSH
87509: LD_INT 106
87511: PUSH
87512: LD_INT 108
87514: PUSH
87515: EMPTY
87516: LIST
87517: LIST
87518: LIST
87519: LIST
87520: LIST
87521: PUSH
87522: EMPTY
87523: LIST
87524: LIST
87525: ST_TO_ADDR
87526: GO 90305
87528: LD_INT 3
87530: DOUBLE
87531: EQUAL
87532: IFTRUE 87536
87534: GO 87612
87536: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
87537: LD_ADDR_VAR 0 1
87541: PUSH
87542: LD_INT 2
87544: PUSH
87545: LD_INT 4
87547: PUSH
87548: LD_INT 5
87550: PUSH
87551: LD_INT 11
87553: PUSH
87554: LD_INT 12
87556: PUSH
87557: LD_INT 15
87559: PUSH
87560: LD_INT 16
87562: PUSH
87563: LD_INT 22
87565: PUSH
87566: LD_INT 26
87568: PUSH
87569: LD_INT 36
87571: PUSH
87572: EMPTY
87573: LIST
87574: LIST
87575: LIST
87576: LIST
87577: LIST
87578: LIST
87579: LIST
87580: LIST
87581: LIST
87582: LIST
87583: PUSH
87584: LD_INT 101
87586: PUSH
87587: LD_INT 102
87589: PUSH
87590: LD_INT 105
87592: PUSH
87593: LD_INT 106
87595: PUSH
87596: LD_INT 108
87598: PUSH
87599: EMPTY
87600: LIST
87601: LIST
87602: LIST
87603: LIST
87604: LIST
87605: PUSH
87606: EMPTY
87607: LIST
87608: LIST
87609: ST_TO_ADDR
87610: GO 90305
87612: LD_INT 4
87614: DOUBLE
87615: EQUAL
87616: IFTRUE 87620
87618: GO 87704
87620: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
87621: LD_ADDR_VAR 0 1
87625: PUSH
87626: LD_INT 2
87628: PUSH
87629: LD_INT 4
87631: PUSH
87632: LD_INT 5
87634: PUSH
87635: LD_INT 8
87637: PUSH
87638: LD_INT 11
87640: PUSH
87641: LD_INT 12
87643: PUSH
87644: LD_INT 15
87646: PUSH
87647: LD_INT 16
87649: PUSH
87650: LD_INT 22
87652: PUSH
87653: LD_INT 23
87655: PUSH
87656: LD_INT 26
87658: PUSH
87659: LD_INT 36
87661: PUSH
87662: EMPTY
87663: LIST
87664: LIST
87665: LIST
87666: LIST
87667: LIST
87668: LIST
87669: LIST
87670: LIST
87671: LIST
87672: LIST
87673: LIST
87674: LIST
87675: PUSH
87676: LD_INT 101
87678: PUSH
87679: LD_INT 102
87681: PUSH
87682: LD_INT 105
87684: PUSH
87685: LD_INT 106
87687: PUSH
87688: LD_INT 108
87690: PUSH
87691: EMPTY
87692: LIST
87693: LIST
87694: LIST
87695: LIST
87696: LIST
87697: PUSH
87698: EMPTY
87699: LIST
87700: LIST
87701: ST_TO_ADDR
87702: GO 90305
87704: LD_INT 5
87706: DOUBLE
87707: EQUAL
87708: IFTRUE 87712
87710: GO 87812
87712: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
87713: LD_ADDR_VAR 0 1
87717: PUSH
87718: LD_INT 2
87720: PUSH
87721: LD_INT 4
87723: PUSH
87724: LD_INT 5
87726: PUSH
87727: LD_INT 6
87729: PUSH
87730: LD_INT 8
87732: PUSH
87733: LD_INT 11
87735: PUSH
87736: LD_INT 12
87738: PUSH
87739: LD_INT 15
87741: PUSH
87742: LD_INT 16
87744: PUSH
87745: LD_INT 22
87747: PUSH
87748: LD_INT 23
87750: PUSH
87751: LD_INT 25
87753: PUSH
87754: LD_INT 26
87756: PUSH
87757: LD_INT 36
87759: PUSH
87760: EMPTY
87761: LIST
87762: LIST
87763: LIST
87764: LIST
87765: LIST
87766: LIST
87767: LIST
87768: LIST
87769: LIST
87770: LIST
87771: LIST
87772: LIST
87773: LIST
87774: LIST
87775: PUSH
87776: LD_INT 101
87778: PUSH
87779: LD_INT 102
87781: PUSH
87782: LD_INT 105
87784: PUSH
87785: LD_INT 106
87787: PUSH
87788: LD_INT 108
87790: PUSH
87791: LD_INT 109
87793: PUSH
87794: LD_INT 112
87796: PUSH
87797: EMPTY
87798: LIST
87799: LIST
87800: LIST
87801: LIST
87802: LIST
87803: LIST
87804: LIST
87805: PUSH
87806: EMPTY
87807: LIST
87808: LIST
87809: ST_TO_ADDR
87810: GO 90305
87812: LD_INT 6
87814: DOUBLE
87815: EQUAL
87816: IFTRUE 87820
87818: GO 87940
87820: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
87821: LD_ADDR_VAR 0 1
87825: PUSH
87826: LD_INT 2
87828: PUSH
87829: LD_INT 4
87831: PUSH
87832: LD_INT 5
87834: PUSH
87835: LD_INT 6
87837: PUSH
87838: LD_INT 8
87840: PUSH
87841: LD_INT 11
87843: PUSH
87844: LD_INT 12
87846: PUSH
87847: LD_INT 15
87849: PUSH
87850: LD_INT 16
87852: PUSH
87853: LD_INT 20
87855: PUSH
87856: LD_INT 21
87858: PUSH
87859: LD_INT 22
87861: PUSH
87862: LD_INT 23
87864: PUSH
87865: LD_INT 25
87867: PUSH
87868: LD_INT 26
87870: PUSH
87871: LD_INT 30
87873: PUSH
87874: LD_INT 31
87876: PUSH
87877: LD_INT 32
87879: PUSH
87880: LD_INT 36
87882: PUSH
87883: EMPTY
87884: LIST
87885: LIST
87886: LIST
87887: LIST
87888: LIST
87889: LIST
87890: LIST
87891: LIST
87892: LIST
87893: LIST
87894: LIST
87895: LIST
87896: LIST
87897: LIST
87898: LIST
87899: LIST
87900: LIST
87901: LIST
87902: LIST
87903: PUSH
87904: LD_INT 101
87906: PUSH
87907: LD_INT 102
87909: PUSH
87910: LD_INT 105
87912: PUSH
87913: LD_INT 106
87915: PUSH
87916: LD_INT 108
87918: PUSH
87919: LD_INT 109
87921: PUSH
87922: LD_INT 112
87924: PUSH
87925: EMPTY
87926: LIST
87927: LIST
87928: LIST
87929: LIST
87930: LIST
87931: LIST
87932: LIST
87933: PUSH
87934: EMPTY
87935: LIST
87936: LIST
87937: ST_TO_ADDR
87938: GO 90305
87940: LD_INT 7
87942: DOUBLE
87943: EQUAL
87944: IFTRUE 87948
87946: GO 88048
87948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
87949: LD_ADDR_VAR 0 1
87953: PUSH
87954: LD_INT 2
87956: PUSH
87957: LD_INT 4
87959: PUSH
87960: LD_INT 5
87962: PUSH
87963: LD_INT 7
87965: PUSH
87966: LD_INT 11
87968: PUSH
87969: LD_INT 12
87971: PUSH
87972: LD_INT 15
87974: PUSH
87975: LD_INT 16
87977: PUSH
87978: LD_INT 20
87980: PUSH
87981: LD_INT 21
87983: PUSH
87984: LD_INT 22
87986: PUSH
87987: LD_INT 23
87989: PUSH
87990: LD_INT 25
87992: PUSH
87993: LD_INT 26
87995: PUSH
87996: EMPTY
87997: LIST
87998: LIST
87999: LIST
88000: LIST
88001: LIST
88002: LIST
88003: LIST
88004: LIST
88005: LIST
88006: LIST
88007: LIST
88008: LIST
88009: LIST
88010: LIST
88011: PUSH
88012: LD_INT 101
88014: PUSH
88015: LD_INT 102
88017: PUSH
88018: LD_INT 103
88020: PUSH
88021: LD_INT 105
88023: PUSH
88024: LD_INT 106
88026: PUSH
88027: LD_INT 108
88029: PUSH
88030: LD_INT 112
88032: PUSH
88033: EMPTY
88034: LIST
88035: LIST
88036: LIST
88037: LIST
88038: LIST
88039: LIST
88040: LIST
88041: PUSH
88042: EMPTY
88043: LIST
88044: LIST
88045: ST_TO_ADDR
88046: GO 90305
88048: LD_INT 8
88050: DOUBLE
88051: EQUAL
88052: IFTRUE 88056
88054: GO 88184
88056: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
88057: LD_ADDR_VAR 0 1
88061: PUSH
88062: LD_INT 2
88064: PUSH
88065: LD_INT 4
88067: PUSH
88068: LD_INT 5
88070: PUSH
88071: LD_INT 6
88073: PUSH
88074: LD_INT 7
88076: PUSH
88077: LD_INT 8
88079: PUSH
88080: LD_INT 11
88082: PUSH
88083: LD_INT 12
88085: PUSH
88086: LD_INT 15
88088: PUSH
88089: LD_INT 16
88091: PUSH
88092: LD_INT 20
88094: PUSH
88095: LD_INT 21
88097: PUSH
88098: LD_INT 22
88100: PUSH
88101: LD_INT 23
88103: PUSH
88104: LD_INT 25
88106: PUSH
88107: LD_INT 26
88109: PUSH
88110: LD_INT 30
88112: PUSH
88113: LD_INT 31
88115: PUSH
88116: LD_INT 32
88118: PUSH
88119: LD_INT 36
88121: PUSH
88122: EMPTY
88123: LIST
88124: LIST
88125: LIST
88126: LIST
88127: LIST
88128: LIST
88129: LIST
88130: LIST
88131: LIST
88132: LIST
88133: LIST
88134: LIST
88135: LIST
88136: LIST
88137: LIST
88138: LIST
88139: LIST
88140: LIST
88141: LIST
88142: LIST
88143: PUSH
88144: LD_INT 101
88146: PUSH
88147: LD_INT 102
88149: PUSH
88150: LD_INT 103
88152: PUSH
88153: LD_INT 105
88155: PUSH
88156: LD_INT 106
88158: PUSH
88159: LD_INT 108
88161: PUSH
88162: LD_INT 109
88164: PUSH
88165: LD_INT 112
88167: PUSH
88168: EMPTY
88169: LIST
88170: LIST
88171: LIST
88172: LIST
88173: LIST
88174: LIST
88175: LIST
88176: LIST
88177: PUSH
88178: EMPTY
88179: LIST
88180: LIST
88181: ST_TO_ADDR
88182: GO 90305
88184: LD_INT 9
88186: DOUBLE
88187: EQUAL
88188: IFTRUE 88192
88190: GO 88328
88192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
88193: LD_ADDR_VAR 0 1
88197: PUSH
88198: LD_INT 2
88200: PUSH
88201: LD_INT 4
88203: PUSH
88204: LD_INT 5
88206: PUSH
88207: LD_INT 6
88209: PUSH
88210: LD_INT 7
88212: PUSH
88213: LD_INT 8
88215: PUSH
88216: LD_INT 11
88218: PUSH
88219: LD_INT 12
88221: PUSH
88222: LD_INT 15
88224: PUSH
88225: LD_INT 16
88227: PUSH
88228: LD_INT 20
88230: PUSH
88231: LD_INT 21
88233: PUSH
88234: LD_INT 22
88236: PUSH
88237: LD_INT 23
88239: PUSH
88240: LD_INT 25
88242: PUSH
88243: LD_INT 26
88245: PUSH
88246: LD_INT 28
88248: PUSH
88249: LD_INT 30
88251: PUSH
88252: LD_INT 31
88254: PUSH
88255: LD_INT 32
88257: PUSH
88258: LD_INT 36
88260: PUSH
88261: EMPTY
88262: LIST
88263: LIST
88264: LIST
88265: LIST
88266: LIST
88267: LIST
88268: LIST
88269: LIST
88270: LIST
88271: LIST
88272: LIST
88273: LIST
88274: LIST
88275: LIST
88276: LIST
88277: LIST
88278: LIST
88279: LIST
88280: LIST
88281: LIST
88282: LIST
88283: PUSH
88284: LD_INT 101
88286: PUSH
88287: LD_INT 102
88289: PUSH
88290: LD_INT 103
88292: PUSH
88293: LD_INT 105
88295: PUSH
88296: LD_INT 106
88298: PUSH
88299: LD_INT 108
88301: PUSH
88302: LD_INT 109
88304: PUSH
88305: LD_INT 112
88307: PUSH
88308: LD_INT 114
88310: PUSH
88311: EMPTY
88312: LIST
88313: LIST
88314: LIST
88315: LIST
88316: LIST
88317: LIST
88318: LIST
88319: LIST
88320: LIST
88321: PUSH
88322: EMPTY
88323: LIST
88324: LIST
88325: ST_TO_ADDR
88326: GO 90305
88328: LD_INT 10
88330: DOUBLE
88331: EQUAL
88332: IFTRUE 88336
88334: GO 88520
88336: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
88337: LD_ADDR_VAR 0 1
88341: PUSH
88342: LD_INT 2
88344: PUSH
88345: LD_INT 4
88347: PUSH
88348: LD_INT 5
88350: PUSH
88351: LD_INT 6
88353: PUSH
88354: LD_INT 7
88356: PUSH
88357: LD_INT 8
88359: PUSH
88360: LD_INT 9
88362: PUSH
88363: LD_INT 10
88365: PUSH
88366: LD_INT 11
88368: PUSH
88369: LD_INT 12
88371: PUSH
88372: LD_INT 13
88374: PUSH
88375: LD_INT 14
88377: PUSH
88378: LD_INT 15
88380: PUSH
88381: LD_INT 16
88383: PUSH
88384: LD_INT 17
88386: PUSH
88387: LD_INT 18
88389: PUSH
88390: LD_INT 19
88392: PUSH
88393: LD_INT 20
88395: PUSH
88396: LD_INT 21
88398: PUSH
88399: LD_INT 22
88401: PUSH
88402: LD_INT 23
88404: PUSH
88405: LD_INT 24
88407: PUSH
88408: LD_INT 25
88410: PUSH
88411: LD_INT 26
88413: PUSH
88414: LD_INT 28
88416: PUSH
88417: LD_INT 30
88419: PUSH
88420: LD_INT 31
88422: PUSH
88423: LD_INT 32
88425: PUSH
88426: LD_INT 36
88428: PUSH
88429: EMPTY
88430: LIST
88431: LIST
88432: LIST
88433: LIST
88434: LIST
88435: LIST
88436: LIST
88437: LIST
88438: LIST
88439: LIST
88440: LIST
88441: LIST
88442: LIST
88443: LIST
88444: LIST
88445: LIST
88446: LIST
88447: LIST
88448: LIST
88449: LIST
88450: LIST
88451: LIST
88452: LIST
88453: LIST
88454: LIST
88455: LIST
88456: LIST
88457: LIST
88458: LIST
88459: PUSH
88460: LD_INT 101
88462: PUSH
88463: LD_INT 102
88465: PUSH
88466: LD_INT 103
88468: PUSH
88469: LD_INT 104
88471: PUSH
88472: LD_INT 105
88474: PUSH
88475: LD_INT 106
88477: PUSH
88478: LD_INT 107
88480: PUSH
88481: LD_INT 108
88483: PUSH
88484: LD_INT 109
88486: PUSH
88487: LD_INT 110
88489: PUSH
88490: LD_INT 111
88492: PUSH
88493: LD_INT 112
88495: PUSH
88496: LD_INT 114
88498: PUSH
88499: EMPTY
88500: LIST
88501: LIST
88502: LIST
88503: LIST
88504: LIST
88505: LIST
88506: LIST
88507: LIST
88508: LIST
88509: LIST
88510: LIST
88511: LIST
88512: LIST
88513: PUSH
88514: EMPTY
88515: LIST
88516: LIST
88517: ST_TO_ADDR
88518: GO 90305
88520: LD_INT 11
88522: DOUBLE
88523: EQUAL
88524: IFTRUE 88528
88526: GO 88720
88528: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
88529: LD_ADDR_VAR 0 1
88533: PUSH
88534: LD_INT 2
88536: PUSH
88537: LD_INT 3
88539: PUSH
88540: LD_INT 4
88542: PUSH
88543: LD_INT 5
88545: PUSH
88546: LD_INT 6
88548: PUSH
88549: LD_INT 7
88551: PUSH
88552: LD_INT 8
88554: PUSH
88555: LD_INT 9
88557: PUSH
88558: LD_INT 10
88560: PUSH
88561: LD_INT 11
88563: PUSH
88564: LD_INT 12
88566: PUSH
88567: LD_INT 13
88569: PUSH
88570: LD_INT 14
88572: PUSH
88573: LD_INT 15
88575: PUSH
88576: LD_INT 16
88578: PUSH
88579: LD_INT 17
88581: PUSH
88582: LD_INT 18
88584: PUSH
88585: LD_INT 19
88587: PUSH
88588: LD_INT 20
88590: PUSH
88591: LD_INT 21
88593: PUSH
88594: LD_INT 22
88596: PUSH
88597: LD_INT 23
88599: PUSH
88600: LD_INT 24
88602: PUSH
88603: LD_INT 25
88605: PUSH
88606: LD_INT 26
88608: PUSH
88609: LD_INT 28
88611: PUSH
88612: LD_INT 30
88614: PUSH
88615: LD_INT 31
88617: PUSH
88618: LD_INT 32
88620: PUSH
88621: LD_INT 34
88623: PUSH
88624: LD_INT 36
88626: PUSH
88627: EMPTY
88628: LIST
88629: LIST
88630: LIST
88631: LIST
88632: LIST
88633: LIST
88634: LIST
88635: LIST
88636: LIST
88637: LIST
88638: LIST
88639: LIST
88640: LIST
88641: LIST
88642: LIST
88643: LIST
88644: LIST
88645: LIST
88646: LIST
88647: LIST
88648: LIST
88649: LIST
88650: LIST
88651: LIST
88652: LIST
88653: LIST
88654: LIST
88655: LIST
88656: LIST
88657: LIST
88658: LIST
88659: PUSH
88660: LD_INT 101
88662: PUSH
88663: LD_INT 102
88665: PUSH
88666: LD_INT 103
88668: PUSH
88669: LD_INT 104
88671: PUSH
88672: LD_INT 105
88674: PUSH
88675: LD_INT 106
88677: PUSH
88678: LD_INT 107
88680: PUSH
88681: LD_INT 108
88683: PUSH
88684: LD_INT 109
88686: PUSH
88687: LD_INT 110
88689: PUSH
88690: LD_INT 111
88692: PUSH
88693: LD_INT 112
88695: PUSH
88696: LD_INT 114
88698: PUSH
88699: EMPTY
88700: LIST
88701: LIST
88702: LIST
88703: LIST
88704: LIST
88705: LIST
88706: LIST
88707: LIST
88708: LIST
88709: LIST
88710: LIST
88711: LIST
88712: LIST
88713: PUSH
88714: EMPTY
88715: LIST
88716: LIST
88717: ST_TO_ADDR
88718: GO 90305
88720: LD_INT 12
88722: DOUBLE
88723: EQUAL
88724: IFTRUE 88728
88726: GO 88936
88728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
88729: LD_ADDR_VAR 0 1
88733: PUSH
88734: LD_INT 1
88736: PUSH
88737: LD_INT 2
88739: PUSH
88740: LD_INT 3
88742: PUSH
88743: LD_INT 4
88745: PUSH
88746: LD_INT 5
88748: PUSH
88749: LD_INT 6
88751: PUSH
88752: LD_INT 7
88754: PUSH
88755: LD_INT 8
88757: PUSH
88758: LD_INT 9
88760: PUSH
88761: LD_INT 10
88763: PUSH
88764: LD_INT 11
88766: PUSH
88767: LD_INT 12
88769: PUSH
88770: LD_INT 13
88772: PUSH
88773: LD_INT 14
88775: PUSH
88776: LD_INT 15
88778: PUSH
88779: LD_INT 16
88781: PUSH
88782: LD_INT 17
88784: PUSH
88785: LD_INT 18
88787: PUSH
88788: LD_INT 19
88790: PUSH
88791: LD_INT 20
88793: PUSH
88794: LD_INT 21
88796: PUSH
88797: LD_INT 22
88799: PUSH
88800: LD_INT 23
88802: PUSH
88803: LD_INT 24
88805: PUSH
88806: LD_INT 25
88808: PUSH
88809: LD_INT 26
88811: PUSH
88812: LD_INT 27
88814: PUSH
88815: LD_INT 28
88817: PUSH
88818: LD_INT 30
88820: PUSH
88821: LD_INT 31
88823: PUSH
88824: LD_INT 32
88826: PUSH
88827: LD_INT 33
88829: PUSH
88830: LD_INT 34
88832: PUSH
88833: LD_INT 36
88835: PUSH
88836: EMPTY
88837: LIST
88838: LIST
88839: LIST
88840: LIST
88841: LIST
88842: LIST
88843: LIST
88844: LIST
88845: LIST
88846: LIST
88847: LIST
88848: LIST
88849: LIST
88850: LIST
88851: LIST
88852: LIST
88853: LIST
88854: LIST
88855: LIST
88856: LIST
88857: LIST
88858: LIST
88859: LIST
88860: LIST
88861: LIST
88862: LIST
88863: LIST
88864: LIST
88865: LIST
88866: LIST
88867: LIST
88868: LIST
88869: LIST
88870: LIST
88871: PUSH
88872: LD_INT 101
88874: PUSH
88875: LD_INT 102
88877: PUSH
88878: LD_INT 103
88880: PUSH
88881: LD_INT 104
88883: PUSH
88884: LD_INT 105
88886: PUSH
88887: LD_INT 106
88889: PUSH
88890: LD_INT 107
88892: PUSH
88893: LD_INT 108
88895: PUSH
88896: LD_INT 109
88898: PUSH
88899: LD_INT 110
88901: PUSH
88902: LD_INT 111
88904: PUSH
88905: LD_INT 112
88907: PUSH
88908: LD_INT 113
88910: PUSH
88911: LD_INT 114
88913: PUSH
88914: EMPTY
88915: LIST
88916: LIST
88917: LIST
88918: LIST
88919: LIST
88920: LIST
88921: LIST
88922: LIST
88923: LIST
88924: LIST
88925: LIST
88926: LIST
88927: LIST
88928: LIST
88929: PUSH
88930: EMPTY
88931: LIST
88932: LIST
88933: ST_TO_ADDR
88934: GO 90305
88936: LD_INT 13
88938: DOUBLE
88939: EQUAL
88940: IFTRUE 88944
88942: GO 89140
88944: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
88945: LD_ADDR_VAR 0 1
88949: PUSH
88950: LD_INT 1
88952: PUSH
88953: LD_INT 2
88955: PUSH
88956: LD_INT 3
88958: PUSH
88959: LD_INT 4
88961: PUSH
88962: LD_INT 5
88964: PUSH
88965: LD_INT 8
88967: PUSH
88968: LD_INT 9
88970: PUSH
88971: LD_INT 10
88973: PUSH
88974: LD_INT 11
88976: PUSH
88977: LD_INT 12
88979: PUSH
88980: LD_INT 14
88982: PUSH
88983: LD_INT 15
88985: PUSH
88986: LD_INT 16
88988: PUSH
88989: LD_INT 17
88991: PUSH
88992: LD_INT 18
88994: PUSH
88995: LD_INT 19
88997: PUSH
88998: LD_INT 20
89000: PUSH
89001: LD_INT 21
89003: PUSH
89004: LD_INT 22
89006: PUSH
89007: LD_INT 23
89009: PUSH
89010: LD_INT 24
89012: PUSH
89013: LD_INT 25
89015: PUSH
89016: LD_INT 26
89018: PUSH
89019: LD_INT 27
89021: PUSH
89022: LD_INT 28
89024: PUSH
89025: LD_INT 30
89027: PUSH
89028: LD_INT 31
89030: PUSH
89031: LD_INT 32
89033: PUSH
89034: LD_INT 33
89036: PUSH
89037: LD_INT 34
89039: PUSH
89040: LD_INT 36
89042: PUSH
89043: EMPTY
89044: LIST
89045: LIST
89046: LIST
89047: LIST
89048: LIST
89049: LIST
89050: LIST
89051: LIST
89052: LIST
89053: LIST
89054: LIST
89055: LIST
89056: LIST
89057: LIST
89058: LIST
89059: LIST
89060: LIST
89061: LIST
89062: LIST
89063: LIST
89064: LIST
89065: LIST
89066: LIST
89067: LIST
89068: LIST
89069: LIST
89070: LIST
89071: LIST
89072: LIST
89073: LIST
89074: LIST
89075: PUSH
89076: LD_INT 101
89078: PUSH
89079: LD_INT 102
89081: PUSH
89082: LD_INT 103
89084: PUSH
89085: LD_INT 104
89087: PUSH
89088: LD_INT 105
89090: PUSH
89091: LD_INT 106
89093: PUSH
89094: LD_INT 107
89096: PUSH
89097: LD_INT 108
89099: PUSH
89100: LD_INT 109
89102: PUSH
89103: LD_INT 110
89105: PUSH
89106: LD_INT 111
89108: PUSH
89109: LD_INT 112
89111: PUSH
89112: LD_INT 113
89114: PUSH
89115: LD_INT 114
89117: PUSH
89118: EMPTY
89119: LIST
89120: LIST
89121: LIST
89122: LIST
89123: LIST
89124: LIST
89125: LIST
89126: LIST
89127: LIST
89128: LIST
89129: LIST
89130: LIST
89131: LIST
89132: LIST
89133: PUSH
89134: EMPTY
89135: LIST
89136: LIST
89137: ST_TO_ADDR
89138: GO 90305
89140: LD_INT 14
89142: DOUBLE
89143: EQUAL
89144: IFTRUE 89148
89146: GO 89360
89148: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
89149: LD_ADDR_VAR 0 1
89153: PUSH
89154: LD_INT 1
89156: PUSH
89157: LD_INT 2
89159: PUSH
89160: LD_INT 3
89162: PUSH
89163: LD_INT 4
89165: PUSH
89166: LD_INT 5
89168: PUSH
89169: LD_INT 6
89171: PUSH
89172: LD_INT 7
89174: PUSH
89175: LD_INT 8
89177: PUSH
89178: LD_INT 9
89180: PUSH
89181: LD_INT 10
89183: PUSH
89184: LD_INT 11
89186: PUSH
89187: LD_INT 12
89189: PUSH
89190: LD_INT 13
89192: PUSH
89193: LD_INT 14
89195: PUSH
89196: LD_INT 15
89198: PUSH
89199: LD_INT 16
89201: PUSH
89202: LD_INT 17
89204: PUSH
89205: LD_INT 18
89207: PUSH
89208: LD_INT 19
89210: PUSH
89211: LD_INT 20
89213: PUSH
89214: LD_INT 21
89216: PUSH
89217: LD_INT 22
89219: PUSH
89220: LD_INT 23
89222: PUSH
89223: LD_INT 24
89225: PUSH
89226: LD_INT 25
89228: PUSH
89229: LD_INT 26
89231: PUSH
89232: LD_INT 27
89234: PUSH
89235: LD_INT 28
89237: PUSH
89238: LD_INT 29
89240: PUSH
89241: LD_INT 30
89243: PUSH
89244: LD_INT 31
89246: PUSH
89247: LD_INT 32
89249: PUSH
89250: LD_INT 33
89252: PUSH
89253: LD_INT 34
89255: PUSH
89256: LD_INT 36
89258: PUSH
89259: EMPTY
89260: LIST
89261: LIST
89262: LIST
89263: LIST
89264: LIST
89265: LIST
89266: LIST
89267: LIST
89268: LIST
89269: LIST
89270: LIST
89271: LIST
89272: LIST
89273: LIST
89274: LIST
89275: LIST
89276: LIST
89277: LIST
89278: LIST
89279: LIST
89280: LIST
89281: LIST
89282: LIST
89283: LIST
89284: LIST
89285: LIST
89286: LIST
89287: LIST
89288: LIST
89289: LIST
89290: LIST
89291: LIST
89292: LIST
89293: LIST
89294: LIST
89295: PUSH
89296: LD_INT 101
89298: PUSH
89299: LD_INT 102
89301: PUSH
89302: LD_INT 103
89304: PUSH
89305: LD_INT 104
89307: PUSH
89308: LD_INT 105
89310: PUSH
89311: LD_INT 106
89313: PUSH
89314: LD_INT 107
89316: PUSH
89317: LD_INT 108
89319: PUSH
89320: LD_INT 109
89322: PUSH
89323: LD_INT 110
89325: PUSH
89326: LD_INT 111
89328: PUSH
89329: LD_INT 112
89331: PUSH
89332: LD_INT 113
89334: PUSH
89335: LD_INT 114
89337: PUSH
89338: EMPTY
89339: LIST
89340: LIST
89341: LIST
89342: LIST
89343: LIST
89344: LIST
89345: LIST
89346: LIST
89347: LIST
89348: LIST
89349: LIST
89350: LIST
89351: LIST
89352: LIST
89353: PUSH
89354: EMPTY
89355: LIST
89356: LIST
89357: ST_TO_ADDR
89358: GO 90305
89360: LD_INT 15
89362: DOUBLE
89363: EQUAL
89364: IFTRUE 89368
89366: GO 89580
89368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
89369: LD_ADDR_VAR 0 1
89373: PUSH
89374: LD_INT 1
89376: PUSH
89377: LD_INT 2
89379: PUSH
89380: LD_INT 3
89382: PUSH
89383: LD_INT 4
89385: PUSH
89386: LD_INT 5
89388: PUSH
89389: LD_INT 6
89391: PUSH
89392: LD_INT 7
89394: PUSH
89395: LD_INT 8
89397: PUSH
89398: LD_INT 9
89400: PUSH
89401: LD_INT 10
89403: PUSH
89404: LD_INT 11
89406: PUSH
89407: LD_INT 12
89409: PUSH
89410: LD_INT 13
89412: PUSH
89413: LD_INT 14
89415: PUSH
89416: LD_INT 15
89418: PUSH
89419: LD_INT 16
89421: PUSH
89422: LD_INT 17
89424: PUSH
89425: LD_INT 18
89427: PUSH
89428: LD_INT 19
89430: PUSH
89431: LD_INT 20
89433: PUSH
89434: LD_INT 21
89436: PUSH
89437: LD_INT 22
89439: PUSH
89440: LD_INT 23
89442: PUSH
89443: LD_INT 24
89445: PUSH
89446: LD_INT 25
89448: PUSH
89449: LD_INT 26
89451: PUSH
89452: LD_INT 27
89454: PUSH
89455: LD_INT 28
89457: PUSH
89458: LD_INT 29
89460: PUSH
89461: LD_INT 30
89463: PUSH
89464: LD_INT 31
89466: PUSH
89467: LD_INT 32
89469: PUSH
89470: LD_INT 33
89472: PUSH
89473: LD_INT 34
89475: PUSH
89476: LD_INT 36
89478: PUSH
89479: EMPTY
89480: LIST
89481: LIST
89482: LIST
89483: LIST
89484: LIST
89485: LIST
89486: LIST
89487: LIST
89488: LIST
89489: LIST
89490: LIST
89491: LIST
89492: LIST
89493: LIST
89494: LIST
89495: LIST
89496: LIST
89497: LIST
89498: LIST
89499: LIST
89500: LIST
89501: LIST
89502: LIST
89503: LIST
89504: LIST
89505: LIST
89506: LIST
89507: LIST
89508: LIST
89509: LIST
89510: LIST
89511: LIST
89512: LIST
89513: LIST
89514: LIST
89515: PUSH
89516: LD_INT 101
89518: PUSH
89519: LD_INT 102
89521: PUSH
89522: LD_INT 103
89524: PUSH
89525: LD_INT 104
89527: PUSH
89528: LD_INT 105
89530: PUSH
89531: LD_INT 106
89533: PUSH
89534: LD_INT 107
89536: PUSH
89537: LD_INT 108
89539: PUSH
89540: LD_INT 109
89542: PUSH
89543: LD_INT 110
89545: PUSH
89546: LD_INT 111
89548: PUSH
89549: LD_INT 112
89551: PUSH
89552: LD_INT 113
89554: PUSH
89555: LD_INT 114
89557: PUSH
89558: EMPTY
89559: LIST
89560: LIST
89561: LIST
89562: LIST
89563: LIST
89564: LIST
89565: LIST
89566: LIST
89567: LIST
89568: LIST
89569: LIST
89570: LIST
89571: LIST
89572: LIST
89573: PUSH
89574: EMPTY
89575: LIST
89576: LIST
89577: ST_TO_ADDR
89578: GO 90305
89580: LD_INT 16
89582: DOUBLE
89583: EQUAL
89584: IFTRUE 89588
89586: GO 89712
89588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
89589: LD_ADDR_VAR 0 1
89593: PUSH
89594: LD_INT 2
89596: PUSH
89597: LD_INT 4
89599: PUSH
89600: LD_INT 5
89602: PUSH
89603: LD_INT 7
89605: PUSH
89606: LD_INT 11
89608: PUSH
89609: LD_INT 12
89611: PUSH
89612: LD_INT 15
89614: PUSH
89615: LD_INT 16
89617: PUSH
89618: LD_INT 20
89620: PUSH
89621: LD_INT 21
89623: PUSH
89624: LD_INT 22
89626: PUSH
89627: LD_INT 23
89629: PUSH
89630: LD_INT 25
89632: PUSH
89633: LD_INT 26
89635: PUSH
89636: LD_INT 30
89638: PUSH
89639: LD_INT 31
89641: PUSH
89642: LD_INT 32
89644: PUSH
89645: LD_INT 33
89647: PUSH
89648: LD_INT 34
89650: PUSH
89651: EMPTY
89652: LIST
89653: LIST
89654: LIST
89655: LIST
89656: LIST
89657: LIST
89658: LIST
89659: LIST
89660: LIST
89661: LIST
89662: LIST
89663: LIST
89664: LIST
89665: LIST
89666: LIST
89667: LIST
89668: LIST
89669: LIST
89670: LIST
89671: PUSH
89672: LD_INT 101
89674: PUSH
89675: LD_INT 102
89677: PUSH
89678: LD_INT 103
89680: PUSH
89681: LD_INT 106
89683: PUSH
89684: LD_INT 108
89686: PUSH
89687: LD_INT 112
89689: PUSH
89690: LD_INT 113
89692: PUSH
89693: LD_INT 114
89695: PUSH
89696: EMPTY
89697: LIST
89698: LIST
89699: LIST
89700: LIST
89701: LIST
89702: LIST
89703: LIST
89704: LIST
89705: PUSH
89706: EMPTY
89707: LIST
89708: LIST
89709: ST_TO_ADDR
89710: GO 90305
89712: LD_INT 17
89714: DOUBLE
89715: EQUAL
89716: IFTRUE 89720
89718: GO 89932
89720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
89721: LD_ADDR_VAR 0 1
89725: PUSH
89726: LD_INT 1
89728: PUSH
89729: LD_INT 2
89731: PUSH
89732: LD_INT 3
89734: PUSH
89735: LD_INT 4
89737: PUSH
89738: LD_INT 5
89740: PUSH
89741: LD_INT 6
89743: PUSH
89744: LD_INT 7
89746: PUSH
89747: LD_INT 8
89749: PUSH
89750: LD_INT 9
89752: PUSH
89753: LD_INT 10
89755: PUSH
89756: LD_INT 11
89758: PUSH
89759: LD_INT 12
89761: PUSH
89762: LD_INT 13
89764: PUSH
89765: LD_INT 14
89767: PUSH
89768: LD_INT 15
89770: PUSH
89771: LD_INT 16
89773: PUSH
89774: LD_INT 17
89776: PUSH
89777: LD_INT 18
89779: PUSH
89780: LD_INT 19
89782: PUSH
89783: LD_INT 20
89785: PUSH
89786: LD_INT 21
89788: PUSH
89789: LD_INT 22
89791: PUSH
89792: LD_INT 23
89794: PUSH
89795: LD_INT 24
89797: PUSH
89798: LD_INT 25
89800: PUSH
89801: LD_INT 26
89803: PUSH
89804: LD_INT 27
89806: PUSH
89807: LD_INT 28
89809: PUSH
89810: LD_INT 29
89812: PUSH
89813: LD_INT 30
89815: PUSH
89816: LD_INT 31
89818: PUSH
89819: LD_INT 32
89821: PUSH
89822: LD_INT 33
89824: PUSH
89825: LD_INT 34
89827: PUSH
89828: LD_INT 36
89830: PUSH
89831: EMPTY
89832: LIST
89833: LIST
89834: LIST
89835: LIST
89836: LIST
89837: LIST
89838: LIST
89839: LIST
89840: LIST
89841: LIST
89842: LIST
89843: LIST
89844: LIST
89845: LIST
89846: LIST
89847: LIST
89848: LIST
89849: LIST
89850: LIST
89851: LIST
89852: LIST
89853: LIST
89854: LIST
89855: LIST
89856: LIST
89857: LIST
89858: LIST
89859: LIST
89860: LIST
89861: LIST
89862: LIST
89863: LIST
89864: LIST
89865: LIST
89866: LIST
89867: PUSH
89868: LD_INT 101
89870: PUSH
89871: LD_INT 102
89873: PUSH
89874: LD_INT 103
89876: PUSH
89877: LD_INT 104
89879: PUSH
89880: LD_INT 105
89882: PUSH
89883: LD_INT 106
89885: PUSH
89886: LD_INT 107
89888: PUSH
89889: LD_INT 108
89891: PUSH
89892: LD_INT 109
89894: PUSH
89895: LD_INT 110
89897: PUSH
89898: LD_INT 111
89900: PUSH
89901: LD_INT 112
89903: PUSH
89904: LD_INT 113
89906: PUSH
89907: LD_INT 114
89909: PUSH
89910: EMPTY
89911: LIST
89912: LIST
89913: LIST
89914: LIST
89915: LIST
89916: LIST
89917: LIST
89918: LIST
89919: LIST
89920: LIST
89921: LIST
89922: LIST
89923: LIST
89924: LIST
89925: PUSH
89926: EMPTY
89927: LIST
89928: LIST
89929: ST_TO_ADDR
89930: GO 90305
89932: LD_INT 18
89934: DOUBLE
89935: EQUAL
89936: IFTRUE 89940
89938: GO 90076
89940: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
89941: LD_ADDR_VAR 0 1
89945: PUSH
89946: LD_INT 2
89948: PUSH
89949: LD_INT 4
89951: PUSH
89952: LD_INT 5
89954: PUSH
89955: LD_INT 7
89957: PUSH
89958: LD_INT 11
89960: PUSH
89961: LD_INT 12
89963: PUSH
89964: LD_INT 15
89966: PUSH
89967: LD_INT 16
89969: PUSH
89970: LD_INT 20
89972: PUSH
89973: LD_INT 21
89975: PUSH
89976: LD_INT 22
89978: PUSH
89979: LD_INT 23
89981: PUSH
89982: LD_INT 25
89984: PUSH
89985: LD_INT 26
89987: PUSH
89988: LD_INT 30
89990: PUSH
89991: LD_INT 31
89993: PUSH
89994: LD_INT 32
89996: PUSH
89997: LD_INT 33
89999: PUSH
90000: LD_INT 34
90002: PUSH
90003: LD_INT 35
90005: PUSH
90006: LD_INT 36
90008: PUSH
90009: EMPTY
90010: LIST
90011: LIST
90012: LIST
90013: LIST
90014: LIST
90015: LIST
90016: LIST
90017: LIST
90018: LIST
90019: LIST
90020: LIST
90021: LIST
90022: LIST
90023: LIST
90024: LIST
90025: LIST
90026: LIST
90027: LIST
90028: LIST
90029: LIST
90030: LIST
90031: PUSH
90032: LD_INT 101
90034: PUSH
90035: LD_INT 102
90037: PUSH
90038: LD_INT 103
90040: PUSH
90041: LD_INT 106
90043: PUSH
90044: LD_INT 108
90046: PUSH
90047: LD_INT 112
90049: PUSH
90050: LD_INT 113
90052: PUSH
90053: LD_INT 114
90055: PUSH
90056: LD_INT 115
90058: PUSH
90059: EMPTY
90060: LIST
90061: LIST
90062: LIST
90063: LIST
90064: LIST
90065: LIST
90066: LIST
90067: LIST
90068: LIST
90069: PUSH
90070: EMPTY
90071: LIST
90072: LIST
90073: ST_TO_ADDR
90074: GO 90305
90076: LD_INT 19
90078: DOUBLE
90079: EQUAL
90080: IFTRUE 90084
90082: GO 90304
90084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
90085: LD_ADDR_VAR 0 1
90089: PUSH
90090: LD_INT 1
90092: PUSH
90093: LD_INT 2
90095: PUSH
90096: LD_INT 3
90098: PUSH
90099: LD_INT 4
90101: PUSH
90102: LD_INT 5
90104: PUSH
90105: LD_INT 6
90107: PUSH
90108: LD_INT 7
90110: PUSH
90111: LD_INT 8
90113: PUSH
90114: LD_INT 9
90116: PUSH
90117: LD_INT 10
90119: PUSH
90120: LD_INT 11
90122: PUSH
90123: LD_INT 12
90125: PUSH
90126: LD_INT 13
90128: PUSH
90129: LD_INT 14
90131: PUSH
90132: LD_INT 15
90134: PUSH
90135: LD_INT 16
90137: PUSH
90138: LD_INT 17
90140: PUSH
90141: LD_INT 18
90143: PUSH
90144: LD_INT 19
90146: PUSH
90147: LD_INT 20
90149: PUSH
90150: LD_INT 21
90152: PUSH
90153: LD_INT 22
90155: PUSH
90156: LD_INT 23
90158: PUSH
90159: LD_INT 24
90161: PUSH
90162: LD_INT 25
90164: PUSH
90165: LD_INT 26
90167: PUSH
90168: LD_INT 27
90170: PUSH
90171: LD_INT 28
90173: PUSH
90174: LD_INT 29
90176: PUSH
90177: LD_INT 30
90179: PUSH
90180: LD_INT 31
90182: PUSH
90183: LD_INT 32
90185: PUSH
90186: LD_INT 33
90188: PUSH
90189: LD_INT 34
90191: PUSH
90192: LD_INT 35
90194: PUSH
90195: LD_INT 36
90197: PUSH
90198: EMPTY
90199: LIST
90200: LIST
90201: LIST
90202: LIST
90203: LIST
90204: LIST
90205: LIST
90206: LIST
90207: LIST
90208: LIST
90209: LIST
90210: LIST
90211: LIST
90212: LIST
90213: LIST
90214: LIST
90215: LIST
90216: LIST
90217: LIST
90218: LIST
90219: LIST
90220: LIST
90221: LIST
90222: LIST
90223: LIST
90224: LIST
90225: LIST
90226: LIST
90227: LIST
90228: LIST
90229: LIST
90230: LIST
90231: LIST
90232: LIST
90233: LIST
90234: LIST
90235: PUSH
90236: LD_INT 101
90238: PUSH
90239: LD_INT 102
90241: PUSH
90242: LD_INT 103
90244: PUSH
90245: LD_INT 104
90247: PUSH
90248: LD_INT 105
90250: PUSH
90251: LD_INT 106
90253: PUSH
90254: LD_INT 107
90256: PUSH
90257: LD_INT 108
90259: PUSH
90260: LD_INT 109
90262: PUSH
90263: LD_INT 110
90265: PUSH
90266: LD_INT 111
90268: PUSH
90269: LD_INT 112
90271: PUSH
90272: LD_INT 113
90274: PUSH
90275: LD_INT 114
90277: PUSH
90278: LD_INT 115
90280: PUSH
90281: EMPTY
90282: LIST
90283: LIST
90284: LIST
90285: LIST
90286: LIST
90287: LIST
90288: LIST
90289: LIST
90290: LIST
90291: LIST
90292: LIST
90293: LIST
90294: LIST
90295: LIST
90296: LIST
90297: PUSH
90298: EMPTY
90299: LIST
90300: LIST
90301: ST_TO_ADDR
90302: GO 90305
90304: POP
// end else
90305: GO 90524
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
90307: LD_ADDR_VAR 0 1
90311: PUSH
90312: LD_INT 1
90314: PUSH
90315: LD_INT 2
90317: PUSH
90318: LD_INT 3
90320: PUSH
90321: LD_INT 4
90323: PUSH
90324: LD_INT 5
90326: PUSH
90327: LD_INT 6
90329: PUSH
90330: LD_INT 7
90332: PUSH
90333: LD_INT 8
90335: PUSH
90336: LD_INT 9
90338: PUSH
90339: LD_INT 10
90341: PUSH
90342: LD_INT 11
90344: PUSH
90345: LD_INT 12
90347: PUSH
90348: LD_INT 13
90350: PUSH
90351: LD_INT 14
90353: PUSH
90354: LD_INT 15
90356: PUSH
90357: LD_INT 16
90359: PUSH
90360: LD_INT 17
90362: PUSH
90363: LD_INT 18
90365: PUSH
90366: LD_INT 19
90368: PUSH
90369: LD_INT 20
90371: PUSH
90372: LD_INT 21
90374: PUSH
90375: LD_INT 22
90377: PUSH
90378: LD_INT 23
90380: PUSH
90381: LD_INT 24
90383: PUSH
90384: LD_INT 25
90386: PUSH
90387: LD_INT 26
90389: PUSH
90390: LD_INT 27
90392: PUSH
90393: LD_INT 28
90395: PUSH
90396: LD_INT 29
90398: PUSH
90399: LD_INT 30
90401: PUSH
90402: LD_INT 31
90404: PUSH
90405: LD_INT 32
90407: PUSH
90408: LD_INT 33
90410: PUSH
90411: LD_INT 34
90413: PUSH
90414: LD_INT 35
90416: PUSH
90417: LD_INT 36
90419: PUSH
90420: EMPTY
90421: LIST
90422: LIST
90423: LIST
90424: LIST
90425: LIST
90426: LIST
90427: LIST
90428: LIST
90429: LIST
90430: LIST
90431: LIST
90432: LIST
90433: LIST
90434: LIST
90435: LIST
90436: LIST
90437: LIST
90438: LIST
90439: LIST
90440: LIST
90441: LIST
90442: LIST
90443: LIST
90444: LIST
90445: LIST
90446: LIST
90447: LIST
90448: LIST
90449: LIST
90450: LIST
90451: LIST
90452: LIST
90453: LIST
90454: LIST
90455: LIST
90456: LIST
90457: PUSH
90458: LD_INT 101
90460: PUSH
90461: LD_INT 102
90463: PUSH
90464: LD_INT 103
90466: PUSH
90467: LD_INT 104
90469: PUSH
90470: LD_INT 105
90472: PUSH
90473: LD_INT 106
90475: PUSH
90476: LD_INT 107
90478: PUSH
90479: LD_INT 108
90481: PUSH
90482: LD_INT 109
90484: PUSH
90485: LD_INT 110
90487: PUSH
90488: LD_INT 111
90490: PUSH
90491: LD_INT 112
90493: PUSH
90494: LD_INT 113
90496: PUSH
90497: LD_INT 114
90499: PUSH
90500: LD_INT 115
90502: PUSH
90503: EMPTY
90504: LIST
90505: LIST
90506: LIST
90507: LIST
90508: LIST
90509: LIST
90510: LIST
90511: LIST
90512: LIST
90513: LIST
90514: LIST
90515: LIST
90516: LIST
90517: LIST
90518: LIST
90519: PUSH
90520: EMPTY
90521: LIST
90522: LIST
90523: ST_TO_ADDR
// if result then
90524: LD_VAR 0 1
90528: IFFALSE 90817
// begin normal :=  ;
90530: LD_ADDR_VAR 0 3
90534: PUSH
90535: LD_STRING 
90537: ST_TO_ADDR
// hardcore :=  ;
90538: LD_ADDR_VAR 0 4
90542: PUSH
90543: LD_STRING 
90545: ST_TO_ADDR
// for i = 1 to normalCounter do
90546: LD_ADDR_VAR 0 5
90550: PUSH
90551: DOUBLE
90552: LD_INT 1
90554: DEC
90555: ST_TO_ADDR
90556: LD_EXP 131
90560: PUSH
90561: FOR_TO
90562: IFFALSE 90663
// begin tmp := 0 ;
90564: LD_ADDR_VAR 0 2
90568: PUSH
90569: LD_STRING 0
90571: ST_TO_ADDR
// if result [ 1 ] then
90572: LD_VAR 0 1
90576: PUSH
90577: LD_INT 1
90579: ARRAY
90580: IFFALSE 90645
// if result [ 1 ] [ 1 ] = i then
90582: LD_VAR 0 1
90586: PUSH
90587: LD_INT 1
90589: ARRAY
90590: PUSH
90591: LD_INT 1
90593: ARRAY
90594: PUSH
90595: LD_VAR 0 5
90599: EQUAL
90600: IFFALSE 90645
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
90602: LD_ADDR_VAR 0 1
90606: PUSH
90607: LD_VAR 0 1
90611: PPUSH
90612: LD_INT 1
90614: PPUSH
90615: LD_VAR 0 1
90619: PUSH
90620: LD_INT 1
90622: ARRAY
90623: PPUSH
90624: LD_INT 1
90626: PPUSH
90627: CALL_OW 3
90631: PPUSH
90632: CALL_OW 1
90636: ST_TO_ADDR
// tmp := 1 ;
90637: LD_ADDR_VAR 0 2
90641: PUSH
90642: LD_STRING 1
90644: ST_TO_ADDR
// end ; normal := normal & tmp ;
90645: LD_ADDR_VAR 0 3
90649: PUSH
90650: LD_VAR 0 3
90654: PUSH
90655: LD_VAR 0 2
90659: STR
90660: ST_TO_ADDR
// end ;
90661: GO 90561
90663: POP
90664: POP
// for i = 1 to hardcoreCounter do
90665: LD_ADDR_VAR 0 5
90669: PUSH
90670: DOUBLE
90671: LD_INT 1
90673: DEC
90674: ST_TO_ADDR
90675: LD_EXP 132
90679: PUSH
90680: FOR_TO
90681: IFFALSE 90786
// begin tmp := 0 ;
90683: LD_ADDR_VAR 0 2
90687: PUSH
90688: LD_STRING 0
90690: ST_TO_ADDR
// if result [ 2 ] then
90691: LD_VAR 0 1
90695: PUSH
90696: LD_INT 2
90698: ARRAY
90699: IFFALSE 90768
// if result [ 2 ] [ 1 ] = 100 + i then
90701: LD_VAR 0 1
90705: PUSH
90706: LD_INT 2
90708: ARRAY
90709: PUSH
90710: LD_INT 1
90712: ARRAY
90713: PUSH
90714: LD_INT 100
90716: PUSH
90717: LD_VAR 0 5
90721: PLUS
90722: EQUAL
90723: IFFALSE 90768
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
90725: LD_ADDR_VAR 0 1
90729: PUSH
90730: LD_VAR 0 1
90734: PPUSH
90735: LD_INT 2
90737: PPUSH
90738: LD_VAR 0 1
90742: PUSH
90743: LD_INT 2
90745: ARRAY
90746: PPUSH
90747: LD_INT 1
90749: PPUSH
90750: CALL_OW 3
90754: PPUSH
90755: CALL_OW 1
90759: ST_TO_ADDR
// tmp := 1 ;
90760: LD_ADDR_VAR 0 2
90764: PUSH
90765: LD_STRING 1
90767: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
90768: LD_ADDR_VAR 0 4
90772: PUSH
90773: LD_VAR 0 4
90777: PUSH
90778: LD_VAR 0 2
90782: STR
90783: ST_TO_ADDR
// end ;
90784: GO 90680
90786: POP
90787: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
90788: LD_STRING getStreamItemsFromMission("
90790: PUSH
90791: LD_VAR 0 3
90795: STR
90796: PUSH
90797: LD_STRING ","
90799: STR
90800: PUSH
90801: LD_VAR 0 4
90805: STR
90806: PUSH
90807: LD_STRING ")
90809: STR
90810: PPUSH
90811: CALL_OW 559
// end else
90815: GO 90824
// ToLua ( getStreamItemsFromMission("","") ) ;
90817: LD_STRING getStreamItemsFromMission("","")
90819: PPUSH
90820: CALL_OW 559
// end ;
90824: LD_VAR 0 1
90828: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
90829: LD_VAR 0 2
90833: PUSH
90834: LD_INT 100
90836: EQUAL
90837: IFFALSE 91786
// begin if not StreamModeActive then
90839: LD_EXP 130
90843: NOT
90844: IFFALSE 90854
// StreamModeActive := true ;
90846: LD_ADDR_EXP 130
90850: PUSH
90851: LD_INT 1
90853: ST_TO_ADDR
// if p3 = 0 then
90854: LD_VAR 0 3
90858: PUSH
90859: LD_INT 0
90861: EQUAL
90862: IFFALSE 90868
// InitStreamMode ;
90864: CALL 86907 0 0
// if p3 = 1 then
90868: LD_VAR 0 3
90872: PUSH
90873: LD_INT 1
90875: EQUAL
90876: IFFALSE 90886
// sRocket := true ;
90878: LD_ADDR_EXP 135
90882: PUSH
90883: LD_INT 1
90885: ST_TO_ADDR
// if p3 = 2 then
90886: LD_VAR 0 3
90890: PUSH
90891: LD_INT 2
90893: EQUAL
90894: IFFALSE 90904
// sSpeed := true ;
90896: LD_ADDR_EXP 134
90900: PUSH
90901: LD_INT 1
90903: ST_TO_ADDR
// if p3 = 3 then
90904: LD_VAR 0 3
90908: PUSH
90909: LD_INT 3
90911: EQUAL
90912: IFFALSE 90922
// sEngine := true ;
90914: LD_ADDR_EXP 136
90918: PUSH
90919: LD_INT 1
90921: ST_TO_ADDR
// if p3 = 4 then
90922: LD_VAR 0 3
90926: PUSH
90927: LD_INT 4
90929: EQUAL
90930: IFFALSE 90940
// sSpec := true ;
90932: LD_ADDR_EXP 133
90936: PUSH
90937: LD_INT 1
90939: ST_TO_ADDR
// if p3 = 5 then
90940: LD_VAR 0 3
90944: PUSH
90945: LD_INT 5
90947: EQUAL
90948: IFFALSE 90958
// sLevel := true ;
90950: LD_ADDR_EXP 137
90954: PUSH
90955: LD_INT 1
90957: ST_TO_ADDR
// if p3 = 6 then
90958: LD_VAR 0 3
90962: PUSH
90963: LD_INT 6
90965: EQUAL
90966: IFFALSE 90976
// sArmoury := true ;
90968: LD_ADDR_EXP 138
90972: PUSH
90973: LD_INT 1
90975: ST_TO_ADDR
// if p3 = 7 then
90976: LD_VAR 0 3
90980: PUSH
90981: LD_INT 7
90983: EQUAL
90984: IFFALSE 90994
// sRadar := true ;
90986: LD_ADDR_EXP 139
90990: PUSH
90991: LD_INT 1
90993: ST_TO_ADDR
// if p3 = 8 then
90994: LD_VAR 0 3
90998: PUSH
90999: LD_INT 8
91001: EQUAL
91002: IFFALSE 91012
// sBunker := true ;
91004: LD_ADDR_EXP 140
91008: PUSH
91009: LD_INT 1
91011: ST_TO_ADDR
// if p3 = 9 then
91012: LD_VAR 0 3
91016: PUSH
91017: LD_INT 9
91019: EQUAL
91020: IFFALSE 91030
// sHack := true ;
91022: LD_ADDR_EXP 141
91026: PUSH
91027: LD_INT 1
91029: ST_TO_ADDR
// if p3 = 10 then
91030: LD_VAR 0 3
91034: PUSH
91035: LD_INT 10
91037: EQUAL
91038: IFFALSE 91048
// sFire := true ;
91040: LD_ADDR_EXP 142
91044: PUSH
91045: LD_INT 1
91047: ST_TO_ADDR
// if p3 = 11 then
91048: LD_VAR 0 3
91052: PUSH
91053: LD_INT 11
91055: EQUAL
91056: IFFALSE 91066
// sRefresh := true ;
91058: LD_ADDR_EXP 143
91062: PUSH
91063: LD_INT 1
91065: ST_TO_ADDR
// if p3 = 12 then
91066: LD_VAR 0 3
91070: PUSH
91071: LD_INT 12
91073: EQUAL
91074: IFFALSE 91084
// sExp := true ;
91076: LD_ADDR_EXP 144
91080: PUSH
91081: LD_INT 1
91083: ST_TO_ADDR
// if p3 = 13 then
91084: LD_VAR 0 3
91088: PUSH
91089: LD_INT 13
91091: EQUAL
91092: IFFALSE 91102
// sDepot := true ;
91094: LD_ADDR_EXP 145
91098: PUSH
91099: LD_INT 1
91101: ST_TO_ADDR
// if p3 = 14 then
91102: LD_VAR 0 3
91106: PUSH
91107: LD_INT 14
91109: EQUAL
91110: IFFALSE 91120
// sFlag := true ;
91112: LD_ADDR_EXP 146
91116: PUSH
91117: LD_INT 1
91119: ST_TO_ADDR
// if p3 = 15 then
91120: LD_VAR 0 3
91124: PUSH
91125: LD_INT 15
91127: EQUAL
91128: IFFALSE 91138
// sKamikadze := true ;
91130: LD_ADDR_EXP 154
91134: PUSH
91135: LD_INT 1
91137: ST_TO_ADDR
// if p3 = 16 then
91138: LD_VAR 0 3
91142: PUSH
91143: LD_INT 16
91145: EQUAL
91146: IFFALSE 91156
// sTroll := true ;
91148: LD_ADDR_EXP 155
91152: PUSH
91153: LD_INT 1
91155: ST_TO_ADDR
// if p3 = 17 then
91156: LD_VAR 0 3
91160: PUSH
91161: LD_INT 17
91163: EQUAL
91164: IFFALSE 91174
// sSlow := true ;
91166: LD_ADDR_EXP 156
91170: PUSH
91171: LD_INT 1
91173: ST_TO_ADDR
// if p3 = 18 then
91174: LD_VAR 0 3
91178: PUSH
91179: LD_INT 18
91181: EQUAL
91182: IFFALSE 91192
// sLack := true ;
91184: LD_ADDR_EXP 157
91188: PUSH
91189: LD_INT 1
91191: ST_TO_ADDR
// if p3 = 19 then
91192: LD_VAR 0 3
91196: PUSH
91197: LD_INT 19
91199: EQUAL
91200: IFFALSE 91210
// sTank := true ;
91202: LD_ADDR_EXP 159
91206: PUSH
91207: LD_INT 1
91209: ST_TO_ADDR
// if p3 = 20 then
91210: LD_VAR 0 3
91214: PUSH
91215: LD_INT 20
91217: EQUAL
91218: IFFALSE 91228
// sRemote := true ;
91220: LD_ADDR_EXP 160
91224: PUSH
91225: LD_INT 1
91227: ST_TO_ADDR
// if p3 = 21 then
91228: LD_VAR 0 3
91232: PUSH
91233: LD_INT 21
91235: EQUAL
91236: IFFALSE 91246
// sPowell := true ;
91238: LD_ADDR_EXP 161
91242: PUSH
91243: LD_INT 1
91245: ST_TO_ADDR
// if p3 = 22 then
91246: LD_VAR 0 3
91250: PUSH
91251: LD_INT 22
91253: EQUAL
91254: IFFALSE 91264
// sTeleport := true ;
91256: LD_ADDR_EXP 164
91260: PUSH
91261: LD_INT 1
91263: ST_TO_ADDR
// if p3 = 23 then
91264: LD_VAR 0 3
91268: PUSH
91269: LD_INT 23
91271: EQUAL
91272: IFFALSE 91282
// sOilTower := true ;
91274: LD_ADDR_EXP 166
91278: PUSH
91279: LD_INT 1
91281: ST_TO_ADDR
// if p3 = 24 then
91282: LD_VAR 0 3
91286: PUSH
91287: LD_INT 24
91289: EQUAL
91290: IFFALSE 91300
// sShovel := true ;
91292: LD_ADDR_EXP 167
91296: PUSH
91297: LD_INT 1
91299: ST_TO_ADDR
// if p3 = 25 then
91300: LD_VAR 0 3
91304: PUSH
91305: LD_INT 25
91307: EQUAL
91308: IFFALSE 91318
// sSheik := true ;
91310: LD_ADDR_EXP 168
91314: PUSH
91315: LD_INT 1
91317: ST_TO_ADDR
// if p3 = 26 then
91318: LD_VAR 0 3
91322: PUSH
91323: LD_INT 26
91325: EQUAL
91326: IFFALSE 91336
// sEarthquake := true ;
91328: LD_ADDR_EXP 170
91332: PUSH
91333: LD_INT 1
91335: ST_TO_ADDR
// if p3 = 27 then
91336: LD_VAR 0 3
91340: PUSH
91341: LD_INT 27
91343: EQUAL
91344: IFFALSE 91354
// sAI := true ;
91346: LD_ADDR_EXP 171
91350: PUSH
91351: LD_INT 1
91353: ST_TO_ADDR
// if p3 = 28 then
91354: LD_VAR 0 3
91358: PUSH
91359: LD_INT 28
91361: EQUAL
91362: IFFALSE 91372
// sCargo := true ;
91364: LD_ADDR_EXP 174
91368: PUSH
91369: LD_INT 1
91371: ST_TO_ADDR
// if p3 = 29 then
91372: LD_VAR 0 3
91376: PUSH
91377: LD_INT 29
91379: EQUAL
91380: IFFALSE 91390
// sDLaser := true ;
91382: LD_ADDR_EXP 175
91386: PUSH
91387: LD_INT 1
91389: ST_TO_ADDR
// if p3 = 30 then
91390: LD_VAR 0 3
91394: PUSH
91395: LD_INT 30
91397: EQUAL
91398: IFFALSE 91408
// sExchange := true ;
91400: LD_ADDR_EXP 176
91404: PUSH
91405: LD_INT 1
91407: ST_TO_ADDR
// if p3 = 31 then
91408: LD_VAR 0 3
91412: PUSH
91413: LD_INT 31
91415: EQUAL
91416: IFFALSE 91426
// sFac := true ;
91418: LD_ADDR_EXP 177
91422: PUSH
91423: LD_INT 1
91425: ST_TO_ADDR
// if p3 = 32 then
91426: LD_VAR 0 3
91430: PUSH
91431: LD_INT 32
91433: EQUAL
91434: IFFALSE 91444
// sPower := true ;
91436: LD_ADDR_EXP 178
91440: PUSH
91441: LD_INT 1
91443: ST_TO_ADDR
// if p3 = 33 then
91444: LD_VAR 0 3
91448: PUSH
91449: LD_INT 33
91451: EQUAL
91452: IFFALSE 91462
// sRandom := true ;
91454: LD_ADDR_EXP 179
91458: PUSH
91459: LD_INT 1
91461: ST_TO_ADDR
// if p3 = 34 then
91462: LD_VAR 0 3
91466: PUSH
91467: LD_INT 34
91469: EQUAL
91470: IFFALSE 91480
// sShield := true ;
91472: LD_ADDR_EXP 180
91476: PUSH
91477: LD_INT 1
91479: ST_TO_ADDR
// if p3 = 35 then
91480: LD_VAR 0 3
91484: PUSH
91485: LD_INT 35
91487: EQUAL
91488: IFFALSE 91498
// sTime := true ;
91490: LD_ADDR_EXP 181
91494: PUSH
91495: LD_INT 1
91497: ST_TO_ADDR
// if p3 = 36 then
91498: LD_VAR 0 3
91502: PUSH
91503: LD_INT 36
91505: EQUAL
91506: IFFALSE 91516
// sTools := true ;
91508: LD_ADDR_EXP 182
91512: PUSH
91513: LD_INT 1
91515: ST_TO_ADDR
// if p3 = 101 then
91516: LD_VAR 0 3
91520: PUSH
91521: LD_INT 101
91523: EQUAL
91524: IFFALSE 91534
// sSold := true ;
91526: LD_ADDR_EXP 147
91530: PUSH
91531: LD_INT 1
91533: ST_TO_ADDR
// if p3 = 102 then
91534: LD_VAR 0 3
91538: PUSH
91539: LD_INT 102
91541: EQUAL
91542: IFFALSE 91552
// sDiff := true ;
91544: LD_ADDR_EXP 148
91548: PUSH
91549: LD_INT 1
91551: ST_TO_ADDR
// if p3 = 103 then
91552: LD_VAR 0 3
91556: PUSH
91557: LD_INT 103
91559: EQUAL
91560: IFFALSE 91570
// sFog := true ;
91562: LD_ADDR_EXP 151
91566: PUSH
91567: LD_INT 1
91569: ST_TO_ADDR
// if p3 = 104 then
91570: LD_VAR 0 3
91574: PUSH
91575: LD_INT 104
91577: EQUAL
91578: IFFALSE 91588
// sReset := true ;
91580: LD_ADDR_EXP 152
91584: PUSH
91585: LD_INT 1
91587: ST_TO_ADDR
// if p3 = 105 then
91588: LD_VAR 0 3
91592: PUSH
91593: LD_INT 105
91595: EQUAL
91596: IFFALSE 91606
// sSun := true ;
91598: LD_ADDR_EXP 153
91602: PUSH
91603: LD_INT 1
91605: ST_TO_ADDR
// if p3 = 106 then
91606: LD_VAR 0 3
91610: PUSH
91611: LD_INT 106
91613: EQUAL
91614: IFFALSE 91624
// sTiger := true ;
91616: LD_ADDR_EXP 149
91620: PUSH
91621: LD_INT 1
91623: ST_TO_ADDR
// if p3 = 107 then
91624: LD_VAR 0 3
91628: PUSH
91629: LD_INT 107
91631: EQUAL
91632: IFFALSE 91642
// sBomb := true ;
91634: LD_ADDR_EXP 150
91638: PUSH
91639: LD_INT 1
91641: ST_TO_ADDR
// if p3 = 108 then
91642: LD_VAR 0 3
91646: PUSH
91647: LD_INT 108
91649: EQUAL
91650: IFFALSE 91660
// sWound := true ;
91652: LD_ADDR_EXP 158
91656: PUSH
91657: LD_INT 1
91659: ST_TO_ADDR
// if p3 = 109 then
91660: LD_VAR 0 3
91664: PUSH
91665: LD_INT 109
91667: EQUAL
91668: IFFALSE 91678
// sBetray := true ;
91670: LD_ADDR_EXP 162
91674: PUSH
91675: LD_INT 1
91677: ST_TO_ADDR
// if p3 = 110 then
91678: LD_VAR 0 3
91682: PUSH
91683: LD_INT 110
91685: EQUAL
91686: IFFALSE 91696
// sContamin := true ;
91688: LD_ADDR_EXP 163
91692: PUSH
91693: LD_INT 1
91695: ST_TO_ADDR
// if p3 = 111 then
91696: LD_VAR 0 3
91700: PUSH
91701: LD_INT 111
91703: EQUAL
91704: IFFALSE 91714
// sOil := true ;
91706: LD_ADDR_EXP 165
91710: PUSH
91711: LD_INT 1
91713: ST_TO_ADDR
// if p3 = 112 then
91714: LD_VAR 0 3
91718: PUSH
91719: LD_INT 112
91721: EQUAL
91722: IFFALSE 91732
// sStu := true ;
91724: LD_ADDR_EXP 169
91728: PUSH
91729: LD_INT 1
91731: ST_TO_ADDR
// if p3 = 113 then
91732: LD_VAR 0 3
91736: PUSH
91737: LD_INT 113
91739: EQUAL
91740: IFFALSE 91750
// sBazooka := true ;
91742: LD_ADDR_EXP 172
91746: PUSH
91747: LD_INT 1
91749: ST_TO_ADDR
// if p3 = 114 then
91750: LD_VAR 0 3
91754: PUSH
91755: LD_INT 114
91757: EQUAL
91758: IFFALSE 91768
// sMortar := true ;
91760: LD_ADDR_EXP 173
91764: PUSH
91765: LD_INT 1
91767: ST_TO_ADDR
// if p3 = 115 then
91768: LD_VAR 0 3
91772: PUSH
91773: LD_INT 115
91775: EQUAL
91776: IFFALSE 91786
// sRanger := true ;
91778: LD_ADDR_EXP 183
91782: PUSH
91783: LD_INT 1
91785: ST_TO_ADDR
// end ; end ;
91786: PPOPN 6
91788: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
91789: LD_EXP 130
91793: PUSH
91794: LD_EXP 135
91798: AND
91799: IFFALSE 91923
91801: GO 91803
91803: DISABLE
91804: LD_INT 0
91806: PPUSH
91807: PPUSH
// begin enable ;
91808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
91809: LD_ADDR_VAR 0 2
91813: PUSH
91814: LD_INT 22
91816: PUSH
91817: LD_OWVAR 2
91821: PUSH
91822: EMPTY
91823: LIST
91824: LIST
91825: PUSH
91826: LD_INT 2
91828: PUSH
91829: LD_INT 34
91831: PUSH
91832: LD_INT 7
91834: PUSH
91835: EMPTY
91836: LIST
91837: LIST
91838: PUSH
91839: LD_INT 34
91841: PUSH
91842: LD_INT 45
91844: PUSH
91845: EMPTY
91846: LIST
91847: LIST
91848: PUSH
91849: LD_INT 34
91851: PUSH
91852: LD_INT 28
91854: PUSH
91855: EMPTY
91856: LIST
91857: LIST
91858: PUSH
91859: LD_INT 34
91861: PUSH
91862: LD_INT 47
91864: PUSH
91865: EMPTY
91866: LIST
91867: LIST
91868: PUSH
91869: EMPTY
91870: LIST
91871: LIST
91872: LIST
91873: LIST
91874: LIST
91875: PUSH
91876: EMPTY
91877: LIST
91878: LIST
91879: PPUSH
91880: CALL_OW 69
91884: ST_TO_ADDR
// if not tmp then
91885: LD_VAR 0 2
91889: NOT
91890: IFFALSE 91894
// exit ;
91892: GO 91923
// for i in tmp do
91894: LD_ADDR_VAR 0 1
91898: PUSH
91899: LD_VAR 0 2
91903: PUSH
91904: FOR_IN
91905: IFFALSE 91921
// begin SetLives ( i , 0 ) ;
91907: LD_VAR 0 1
91911: PPUSH
91912: LD_INT 0
91914: PPUSH
91915: CALL_OW 234
// end ;
91919: GO 91904
91921: POP
91922: POP
// end ;
91923: PPOPN 2
91925: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
91926: LD_EXP 130
91930: PUSH
91931: LD_EXP 136
91935: AND
91936: IFFALSE 92020
91938: GO 91940
91940: DISABLE
91941: LD_INT 0
91943: PPUSH
91944: PPUSH
// begin enable ;
91945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
91946: LD_ADDR_VAR 0 2
91950: PUSH
91951: LD_INT 22
91953: PUSH
91954: LD_OWVAR 2
91958: PUSH
91959: EMPTY
91960: LIST
91961: LIST
91962: PUSH
91963: LD_INT 32
91965: PUSH
91966: LD_INT 3
91968: PUSH
91969: EMPTY
91970: LIST
91971: LIST
91972: PUSH
91973: EMPTY
91974: LIST
91975: LIST
91976: PPUSH
91977: CALL_OW 69
91981: ST_TO_ADDR
// if not tmp then
91982: LD_VAR 0 2
91986: NOT
91987: IFFALSE 91991
// exit ;
91989: GO 92020
// for i in tmp do
91991: LD_ADDR_VAR 0 1
91995: PUSH
91996: LD_VAR 0 2
92000: PUSH
92001: FOR_IN
92002: IFFALSE 92018
// begin SetLives ( i , 0 ) ;
92004: LD_VAR 0 1
92008: PPUSH
92009: LD_INT 0
92011: PPUSH
92012: CALL_OW 234
// end ;
92016: GO 92001
92018: POP
92019: POP
// end ;
92020: PPOPN 2
92022: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
92023: LD_EXP 130
92027: PUSH
92028: LD_EXP 133
92032: AND
92033: IFFALSE 92126
92035: GO 92037
92037: DISABLE
92038: LD_INT 0
92040: PPUSH
// begin enable ;
92041: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
92042: LD_ADDR_VAR 0 1
92046: PUSH
92047: LD_INT 22
92049: PUSH
92050: LD_OWVAR 2
92054: PUSH
92055: EMPTY
92056: LIST
92057: LIST
92058: PUSH
92059: LD_INT 2
92061: PUSH
92062: LD_INT 25
92064: PUSH
92065: LD_INT 5
92067: PUSH
92068: EMPTY
92069: LIST
92070: LIST
92071: PUSH
92072: LD_INT 25
92074: PUSH
92075: LD_INT 9
92077: PUSH
92078: EMPTY
92079: LIST
92080: LIST
92081: PUSH
92082: LD_INT 25
92084: PUSH
92085: LD_INT 8
92087: PUSH
92088: EMPTY
92089: LIST
92090: LIST
92091: PUSH
92092: EMPTY
92093: LIST
92094: LIST
92095: LIST
92096: LIST
92097: PUSH
92098: EMPTY
92099: LIST
92100: LIST
92101: PPUSH
92102: CALL_OW 69
92106: PUSH
92107: FOR_IN
92108: IFFALSE 92124
// begin SetClass ( i , 1 ) ;
92110: LD_VAR 0 1
92114: PPUSH
92115: LD_INT 1
92117: PPUSH
92118: CALL_OW 336
// end ;
92122: GO 92107
92124: POP
92125: POP
// end ;
92126: PPOPN 1
92128: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
92129: LD_EXP 130
92133: PUSH
92134: LD_EXP 134
92138: AND
92139: PUSH
92140: LD_OWVAR 65
92144: PUSH
92145: LD_INT 7
92147: LESS
92148: AND
92149: IFFALSE 92163
92151: GO 92153
92153: DISABLE
// begin enable ;
92154: ENABLE
// game_speed := 7 ;
92155: LD_ADDR_OWVAR 65
92159: PUSH
92160: LD_INT 7
92162: ST_TO_ADDR
// end ;
92163: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
92164: LD_EXP 130
92168: PUSH
92169: LD_EXP 137
92173: AND
92174: IFFALSE 92376
92176: GO 92178
92178: DISABLE
92179: LD_INT 0
92181: PPUSH
92182: PPUSH
92183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
92184: LD_ADDR_VAR 0 3
92188: PUSH
92189: LD_INT 81
92191: PUSH
92192: LD_OWVAR 2
92196: PUSH
92197: EMPTY
92198: LIST
92199: LIST
92200: PUSH
92201: LD_INT 21
92203: PUSH
92204: LD_INT 1
92206: PUSH
92207: EMPTY
92208: LIST
92209: LIST
92210: PUSH
92211: EMPTY
92212: LIST
92213: LIST
92214: PPUSH
92215: CALL_OW 69
92219: ST_TO_ADDR
// if not tmp then
92220: LD_VAR 0 3
92224: NOT
92225: IFFALSE 92229
// exit ;
92227: GO 92376
// if tmp > 5 then
92229: LD_VAR 0 3
92233: PUSH
92234: LD_INT 5
92236: GREATER
92237: IFFALSE 92249
// k := 5 else
92239: LD_ADDR_VAR 0 2
92243: PUSH
92244: LD_INT 5
92246: ST_TO_ADDR
92247: GO 92259
// k := tmp ;
92249: LD_ADDR_VAR 0 2
92253: PUSH
92254: LD_VAR 0 3
92258: ST_TO_ADDR
// for i := 1 to k do
92259: LD_ADDR_VAR 0 1
92263: PUSH
92264: DOUBLE
92265: LD_INT 1
92267: DEC
92268: ST_TO_ADDR
92269: LD_VAR 0 2
92273: PUSH
92274: FOR_TO
92275: IFFALSE 92374
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
92277: LD_VAR 0 3
92281: PUSH
92282: LD_VAR 0 1
92286: ARRAY
92287: PPUSH
92288: LD_VAR 0 1
92292: PUSH
92293: LD_INT 4
92295: MOD
92296: PUSH
92297: LD_INT 1
92299: PLUS
92300: PPUSH
92301: CALL_OW 259
92305: PUSH
92306: LD_INT 10
92308: LESS
92309: IFFALSE 92372
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
92311: LD_VAR 0 3
92315: PUSH
92316: LD_VAR 0 1
92320: ARRAY
92321: PPUSH
92322: LD_VAR 0 1
92326: PUSH
92327: LD_INT 4
92329: MOD
92330: PUSH
92331: LD_INT 1
92333: PLUS
92334: PPUSH
92335: LD_VAR 0 3
92339: PUSH
92340: LD_VAR 0 1
92344: ARRAY
92345: PPUSH
92346: LD_VAR 0 1
92350: PUSH
92351: LD_INT 4
92353: MOD
92354: PUSH
92355: LD_INT 1
92357: PLUS
92358: PPUSH
92359: CALL_OW 259
92363: PUSH
92364: LD_INT 1
92366: PLUS
92367: PPUSH
92368: CALL_OW 237
92372: GO 92274
92374: POP
92375: POP
// end ;
92376: PPOPN 3
92378: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
92379: LD_EXP 130
92383: PUSH
92384: LD_EXP 138
92388: AND
92389: IFFALSE 92409
92391: GO 92393
92393: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
92394: LD_INT 4
92396: PPUSH
92397: LD_OWVAR 2
92401: PPUSH
92402: LD_INT 0
92404: PPUSH
92405: CALL_OW 324
92409: END
// every 0 0$1 trigger StreamModeActive and sShovel do
92410: LD_EXP 130
92414: PUSH
92415: LD_EXP 167
92419: AND
92420: IFFALSE 92440
92422: GO 92424
92424: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
92425: LD_INT 19
92427: PPUSH
92428: LD_OWVAR 2
92432: PPUSH
92433: LD_INT 0
92435: PPUSH
92436: CALL_OW 324
92440: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
92441: LD_EXP 130
92445: PUSH
92446: LD_EXP 139
92450: AND
92451: IFFALSE 92553
92453: GO 92455
92455: DISABLE
92456: LD_INT 0
92458: PPUSH
92459: PPUSH
// begin enable ;
92460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
92461: LD_ADDR_VAR 0 2
92465: PUSH
92466: LD_INT 22
92468: PUSH
92469: LD_OWVAR 2
92473: PUSH
92474: EMPTY
92475: LIST
92476: LIST
92477: PUSH
92478: LD_INT 2
92480: PUSH
92481: LD_INT 34
92483: PUSH
92484: LD_INT 11
92486: PUSH
92487: EMPTY
92488: LIST
92489: LIST
92490: PUSH
92491: LD_INT 34
92493: PUSH
92494: LD_INT 30
92496: PUSH
92497: EMPTY
92498: LIST
92499: LIST
92500: PUSH
92501: EMPTY
92502: LIST
92503: LIST
92504: LIST
92505: PUSH
92506: EMPTY
92507: LIST
92508: LIST
92509: PPUSH
92510: CALL_OW 69
92514: ST_TO_ADDR
// if not tmp then
92515: LD_VAR 0 2
92519: NOT
92520: IFFALSE 92524
// exit ;
92522: GO 92553
// for i in tmp do
92524: LD_ADDR_VAR 0 1
92528: PUSH
92529: LD_VAR 0 2
92533: PUSH
92534: FOR_IN
92535: IFFALSE 92551
// begin SetLives ( i , 0 ) ;
92537: LD_VAR 0 1
92541: PPUSH
92542: LD_INT 0
92544: PPUSH
92545: CALL_OW 234
// end ;
92549: GO 92534
92551: POP
92552: POP
// end ;
92553: PPOPN 2
92555: END
// every 0 0$1 trigger StreamModeActive and sBunker do
92556: LD_EXP 130
92560: PUSH
92561: LD_EXP 140
92565: AND
92566: IFFALSE 92586
92568: GO 92570
92570: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
92571: LD_INT 32
92573: PPUSH
92574: LD_OWVAR 2
92578: PPUSH
92579: LD_INT 0
92581: PPUSH
92582: CALL_OW 324
92586: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
92587: LD_EXP 130
92591: PUSH
92592: LD_EXP 141
92596: AND
92597: IFFALSE 92778
92599: GO 92601
92601: DISABLE
92602: LD_INT 0
92604: PPUSH
92605: PPUSH
92606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
92607: LD_ADDR_VAR 0 2
92611: PUSH
92612: LD_INT 22
92614: PUSH
92615: LD_OWVAR 2
92619: PUSH
92620: EMPTY
92621: LIST
92622: LIST
92623: PUSH
92624: LD_INT 33
92626: PUSH
92627: LD_INT 3
92629: PUSH
92630: EMPTY
92631: LIST
92632: LIST
92633: PUSH
92634: EMPTY
92635: LIST
92636: LIST
92637: PPUSH
92638: CALL_OW 69
92642: ST_TO_ADDR
// if not tmp then
92643: LD_VAR 0 2
92647: NOT
92648: IFFALSE 92652
// exit ;
92650: GO 92778
// side := 0 ;
92652: LD_ADDR_VAR 0 3
92656: PUSH
92657: LD_INT 0
92659: ST_TO_ADDR
// for i := 1 to 8 do
92660: LD_ADDR_VAR 0 1
92664: PUSH
92665: DOUBLE
92666: LD_INT 1
92668: DEC
92669: ST_TO_ADDR
92670: LD_INT 8
92672: PUSH
92673: FOR_TO
92674: IFFALSE 92722
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
92676: LD_OWVAR 2
92680: PUSH
92681: LD_VAR 0 1
92685: NONEQUAL
92686: PUSH
92687: LD_OWVAR 2
92691: PPUSH
92692: LD_VAR 0 1
92696: PPUSH
92697: CALL_OW 81
92701: PUSH
92702: LD_INT 2
92704: EQUAL
92705: AND
92706: IFFALSE 92720
// begin side := i ;
92708: LD_ADDR_VAR 0 3
92712: PUSH
92713: LD_VAR 0 1
92717: ST_TO_ADDR
// break ;
92718: GO 92722
// end ;
92720: GO 92673
92722: POP
92723: POP
// if not side then
92724: LD_VAR 0 3
92728: NOT
92729: IFFALSE 92733
// exit ;
92731: GO 92778
// for i := 1 to tmp do
92733: LD_ADDR_VAR 0 1
92737: PUSH
92738: DOUBLE
92739: LD_INT 1
92741: DEC
92742: ST_TO_ADDR
92743: LD_VAR 0 2
92747: PUSH
92748: FOR_TO
92749: IFFALSE 92776
// if Prob ( 60 ) then
92751: LD_INT 60
92753: PPUSH
92754: CALL_OW 13
92758: IFFALSE 92774
// SetSide ( i , side ) ;
92760: LD_VAR 0 1
92764: PPUSH
92765: LD_VAR 0 3
92769: PPUSH
92770: CALL_OW 235
92774: GO 92748
92776: POP
92777: POP
// end ;
92778: PPOPN 3
92780: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
92781: LD_EXP 130
92785: PUSH
92786: LD_EXP 143
92790: AND
92791: IFFALSE 92910
92793: GO 92795
92795: DISABLE
92796: LD_INT 0
92798: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
92799: LD_ADDR_VAR 0 1
92803: PUSH
92804: LD_INT 22
92806: PUSH
92807: LD_OWVAR 2
92811: PUSH
92812: EMPTY
92813: LIST
92814: LIST
92815: PUSH
92816: LD_INT 21
92818: PUSH
92819: LD_INT 1
92821: PUSH
92822: EMPTY
92823: LIST
92824: LIST
92825: PUSH
92826: LD_INT 3
92828: PUSH
92829: LD_INT 23
92831: PUSH
92832: LD_INT 0
92834: PUSH
92835: EMPTY
92836: LIST
92837: LIST
92838: PUSH
92839: EMPTY
92840: LIST
92841: LIST
92842: PUSH
92843: EMPTY
92844: LIST
92845: LIST
92846: LIST
92847: PPUSH
92848: CALL_OW 69
92852: PUSH
92853: FOR_IN
92854: IFFALSE 92908
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
92856: LD_VAR 0 1
92860: PPUSH
92861: CALL_OW 257
92865: PUSH
92866: LD_INT 1
92868: PUSH
92869: LD_INT 2
92871: PUSH
92872: LD_INT 3
92874: PUSH
92875: LD_INT 4
92877: PUSH
92878: EMPTY
92879: LIST
92880: LIST
92881: LIST
92882: LIST
92883: IN
92884: IFFALSE 92906
// SetClass ( un , rand ( 1 , 4 ) ) ;
92886: LD_VAR 0 1
92890: PPUSH
92891: LD_INT 1
92893: PPUSH
92894: LD_INT 4
92896: PPUSH
92897: CALL_OW 12
92901: PPUSH
92902: CALL_OW 336
92906: GO 92853
92908: POP
92909: POP
// end ;
92910: PPOPN 1
92912: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
92913: LD_EXP 130
92917: PUSH
92918: LD_EXP 142
92922: AND
92923: IFFALSE 93002
92925: GO 92927
92927: DISABLE
92928: LD_INT 0
92930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92931: LD_ADDR_VAR 0 1
92935: PUSH
92936: LD_INT 22
92938: PUSH
92939: LD_OWVAR 2
92943: PUSH
92944: EMPTY
92945: LIST
92946: LIST
92947: PUSH
92948: LD_INT 21
92950: PUSH
92951: LD_INT 3
92953: PUSH
92954: EMPTY
92955: LIST
92956: LIST
92957: PUSH
92958: EMPTY
92959: LIST
92960: LIST
92961: PPUSH
92962: CALL_OW 69
92966: ST_TO_ADDR
// if not tmp then
92967: LD_VAR 0 1
92971: NOT
92972: IFFALSE 92976
// exit ;
92974: GO 93002
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
92976: LD_VAR 0 1
92980: PUSH
92981: LD_INT 1
92983: PPUSH
92984: LD_VAR 0 1
92988: PPUSH
92989: CALL_OW 12
92993: ARRAY
92994: PPUSH
92995: LD_INT 100
92997: PPUSH
92998: CALL_OW 234
// end ;
93002: PPOPN 1
93004: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
93005: LD_EXP 130
93009: PUSH
93010: LD_EXP 144
93014: AND
93015: IFFALSE 93113
93017: GO 93019
93019: DISABLE
93020: LD_INT 0
93022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
93023: LD_ADDR_VAR 0 1
93027: PUSH
93028: LD_INT 22
93030: PUSH
93031: LD_OWVAR 2
93035: PUSH
93036: EMPTY
93037: LIST
93038: LIST
93039: PUSH
93040: LD_INT 21
93042: PUSH
93043: LD_INT 1
93045: PUSH
93046: EMPTY
93047: LIST
93048: LIST
93049: PUSH
93050: EMPTY
93051: LIST
93052: LIST
93053: PPUSH
93054: CALL_OW 69
93058: ST_TO_ADDR
// if not tmp then
93059: LD_VAR 0 1
93063: NOT
93064: IFFALSE 93068
// exit ;
93066: GO 93113
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
93068: LD_VAR 0 1
93072: PUSH
93073: LD_INT 1
93075: PPUSH
93076: LD_VAR 0 1
93080: PPUSH
93081: CALL_OW 12
93085: ARRAY
93086: PPUSH
93087: LD_INT 1
93089: PPUSH
93090: LD_INT 4
93092: PPUSH
93093: CALL_OW 12
93097: PPUSH
93098: LD_INT 3000
93100: PPUSH
93101: LD_INT 9000
93103: PPUSH
93104: CALL_OW 12
93108: PPUSH
93109: CALL_OW 492
// end ;
93113: PPOPN 1
93115: END
// every 0 0$1 trigger StreamModeActive and sDepot do
93116: LD_EXP 130
93120: PUSH
93121: LD_EXP 145
93125: AND
93126: IFFALSE 93146
93128: GO 93130
93130: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
93131: LD_INT 1
93133: PPUSH
93134: LD_OWVAR 2
93138: PPUSH
93139: LD_INT 0
93141: PPUSH
93142: CALL_OW 324
93146: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
93147: LD_EXP 130
93151: PUSH
93152: LD_EXP 146
93156: AND
93157: IFFALSE 93240
93159: GO 93161
93161: DISABLE
93162: LD_INT 0
93164: PPUSH
93165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
93166: LD_ADDR_VAR 0 2
93170: PUSH
93171: LD_INT 22
93173: PUSH
93174: LD_OWVAR 2
93178: PUSH
93179: EMPTY
93180: LIST
93181: LIST
93182: PUSH
93183: LD_INT 21
93185: PUSH
93186: LD_INT 3
93188: PUSH
93189: EMPTY
93190: LIST
93191: LIST
93192: PUSH
93193: EMPTY
93194: LIST
93195: LIST
93196: PPUSH
93197: CALL_OW 69
93201: ST_TO_ADDR
// if not tmp then
93202: LD_VAR 0 2
93206: NOT
93207: IFFALSE 93211
// exit ;
93209: GO 93240
// for i in tmp do
93211: LD_ADDR_VAR 0 1
93215: PUSH
93216: LD_VAR 0 2
93220: PUSH
93221: FOR_IN
93222: IFFALSE 93238
// SetBLevel ( i , 10 ) ;
93224: LD_VAR 0 1
93228: PPUSH
93229: LD_INT 10
93231: PPUSH
93232: CALL_OW 241
93236: GO 93221
93238: POP
93239: POP
// end ;
93240: PPOPN 2
93242: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
93243: LD_EXP 130
93247: PUSH
93248: LD_EXP 147
93252: AND
93253: IFFALSE 93364
93255: GO 93257
93257: DISABLE
93258: LD_INT 0
93260: PPUSH
93261: PPUSH
93262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
93263: LD_ADDR_VAR 0 3
93267: PUSH
93268: LD_INT 22
93270: PUSH
93271: LD_OWVAR 2
93275: PUSH
93276: EMPTY
93277: LIST
93278: LIST
93279: PUSH
93280: LD_INT 25
93282: PUSH
93283: LD_INT 1
93285: PUSH
93286: EMPTY
93287: LIST
93288: LIST
93289: PUSH
93290: EMPTY
93291: LIST
93292: LIST
93293: PPUSH
93294: CALL_OW 69
93298: ST_TO_ADDR
// if not tmp then
93299: LD_VAR 0 3
93303: NOT
93304: IFFALSE 93308
// exit ;
93306: GO 93364
// un := tmp [ rand ( 1 , tmp ) ] ;
93308: LD_ADDR_VAR 0 2
93312: PUSH
93313: LD_VAR 0 3
93317: PUSH
93318: LD_INT 1
93320: PPUSH
93321: LD_VAR 0 3
93325: PPUSH
93326: CALL_OW 12
93330: ARRAY
93331: ST_TO_ADDR
// if Crawls ( un ) then
93332: LD_VAR 0 2
93336: PPUSH
93337: CALL_OW 318
93341: IFFALSE 93352
// ComWalk ( un ) ;
93343: LD_VAR 0 2
93347: PPUSH
93348: CALL_OW 138
// SetClass ( un , class_sniper ) ;
93352: LD_VAR 0 2
93356: PPUSH
93357: LD_INT 5
93359: PPUSH
93360: CALL_OW 336
// end ;
93364: PPOPN 3
93366: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
93367: LD_EXP 130
93371: PUSH
93372: LD_EXP 148
93376: AND
93377: PUSH
93378: LD_OWVAR 67
93382: PUSH
93383: LD_INT 3
93385: LESS
93386: AND
93387: IFFALSE 93406
93389: GO 93391
93391: DISABLE
// Difficulty := Difficulty + 1 ;
93392: LD_ADDR_OWVAR 67
93396: PUSH
93397: LD_OWVAR 67
93401: PUSH
93402: LD_INT 1
93404: PLUS
93405: ST_TO_ADDR
93406: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
93407: LD_EXP 130
93411: PUSH
93412: LD_EXP 149
93416: AND
93417: IFFALSE 93520
93419: GO 93421
93421: DISABLE
93422: LD_INT 0
93424: PPUSH
// begin for i := 1 to 5 do
93425: LD_ADDR_VAR 0 1
93429: PUSH
93430: DOUBLE
93431: LD_INT 1
93433: DEC
93434: ST_TO_ADDR
93435: LD_INT 5
93437: PUSH
93438: FOR_TO
93439: IFFALSE 93518
// begin uc_nation := nation_nature ;
93441: LD_ADDR_OWVAR 21
93445: PUSH
93446: LD_INT 0
93448: ST_TO_ADDR
// uc_side := 0 ;
93449: LD_ADDR_OWVAR 20
93453: PUSH
93454: LD_INT 0
93456: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
93457: LD_ADDR_OWVAR 29
93461: PUSH
93462: LD_INT 12
93464: PUSH
93465: LD_INT 12
93467: PUSH
93468: EMPTY
93469: LIST
93470: LIST
93471: ST_TO_ADDR
// hc_agressivity := 20 ;
93472: LD_ADDR_OWVAR 35
93476: PUSH
93477: LD_INT 20
93479: ST_TO_ADDR
// hc_class := class_tiger ;
93480: LD_ADDR_OWVAR 28
93484: PUSH
93485: LD_INT 14
93487: ST_TO_ADDR
// hc_gallery :=  ;
93488: LD_ADDR_OWVAR 33
93492: PUSH
93493: LD_STRING 
93495: ST_TO_ADDR
// hc_name :=  ;
93496: LD_ADDR_OWVAR 26
93500: PUSH
93501: LD_STRING 
93503: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
93504: CALL_OW 44
93508: PPUSH
93509: LD_INT 0
93511: PPUSH
93512: CALL_OW 51
// end ;
93516: GO 93438
93518: POP
93519: POP
// end ;
93520: PPOPN 1
93522: END
// every 0 0$1 trigger StreamModeActive and sBomb do
93523: LD_EXP 130
93527: PUSH
93528: LD_EXP 150
93532: AND
93533: IFFALSE 93542
93535: GO 93537
93537: DISABLE
// StreamSibBomb ;
93538: CALL 93543 0 0
93542: END
// export function StreamSibBomb ; var i , x , y ; begin
93543: LD_INT 0
93545: PPUSH
93546: PPUSH
93547: PPUSH
93548: PPUSH
// result := false ;
93549: LD_ADDR_VAR 0 1
93553: PUSH
93554: LD_INT 0
93556: ST_TO_ADDR
// for i := 1 to 16 do
93557: LD_ADDR_VAR 0 2
93561: PUSH
93562: DOUBLE
93563: LD_INT 1
93565: DEC
93566: ST_TO_ADDR
93567: LD_INT 16
93569: PUSH
93570: FOR_TO
93571: IFFALSE 93770
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
93573: LD_ADDR_VAR 0 3
93577: PUSH
93578: LD_INT 10
93580: PUSH
93581: LD_INT 20
93583: PUSH
93584: LD_INT 30
93586: PUSH
93587: LD_INT 40
93589: PUSH
93590: LD_INT 50
93592: PUSH
93593: LD_INT 60
93595: PUSH
93596: LD_INT 70
93598: PUSH
93599: LD_INT 80
93601: PUSH
93602: LD_INT 90
93604: PUSH
93605: LD_INT 100
93607: PUSH
93608: LD_INT 110
93610: PUSH
93611: LD_INT 120
93613: PUSH
93614: LD_INT 130
93616: PUSH
93617: LD_INT 140
93619: PUSH
93620: LD_INT 150
93622: PUSH
93623: EMPTY
93624: LIST
93625: LIST
93626: LIST
93627: LIST
93628: LIST
93629: LIST
93630: LIST
93631: LIST
93632: LIST
93633: LIST
93634: LIST
93635: LIST
93636: LIST
93637: LIST
93638: LIST
93639: PUSH
93640: LD_INT 1
93642: PPUSH
93643: LD_INT 15
93645: PPUSH
93646: CALL_OW 12
93650: ARRAY
93651: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
93652: LD_ADDR_VAR 0 4
93656: PUSH
93657: LD_INT 10
93659: PUSH
93660: LD_INT 20
93662: PUSH
93663: LD_INT 30
93665: PUSH
93666: LD_INT 40
93668: PUSH
93669: LD_INT 50
93671: PUSH
93672: LD_INT 60
93674: PUSH
93675: LD_INT 70
93677: PUSH
93678: LD_INT 80
93680: PUSH
93681: LD_INT 90
93683: PUSH
93684: LD_INT 100
93686: PUSH
93687: LD_INT 110
93689: PUSH
93690: LD_INT 120
93692: PUSH
93693: LD_INT 130
93695: PUSH
93696: LD_INT 140
93698: PUSH
93699: LD_INT 150
93701: PUSH
93702: EMPTY
93703: LIST
93704: LIST
93705: LIST
93706: LIST
93707: LIST
93708: LIST
93709: LIST
93710: LIST
93711: LIST
93712: LIST
93713: LIST
93714: LIST
93715: LIST
93716: LIST
93717: LIST
93718: PUSH
93719: LD_INT 1
93721: PPUSH
93722: LD_INT 15
93724: PPUSH
93725: CALL_OW 12
93729: ARRAY
93730: ST_TO_ADDR
// if ValidHex ( x , y ) then
93731: LD_VAR 0 3
93735: PPUSH
93736: LD_VAR 0 4
93740: PPUSH
93741: CALL_OW 488
93745: IFFALSE 93768
// begin result := [ x , y ] ;
93747: LD_ADDR_VAR 0 1
93751: PUSH
93752: LD_VAR 0 3
93756: PUSH
93757: LD_VAR 0 4
93761: PUSH
93762: EMPTY
93763: LIST
93764: LIST
93765: ST_TO_ADDR
// break ;
93766: GO 93770
// end ; end ;
93768: GO 93570
93770: POP
93771: POP
// if result then
93772: LD_VAR 0 1
93776: IFFALSE 93836
// begin ToLua ( playSibBomb() ) ;
93778: LD_STRING playSibBomb()
93780: PPUSH
93781: CALL_OW 559
// wait ( 0 0$14 ) ;
93785: LD_INT 490
93787: PPUSH
93788: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
93792: LD_VAR 0 1
93796: PUSH
93797: LD_INT 1
93799: ARRAY
93800: PPUSH
93801: LD_VAR 0 1
93805: PUSH
93806: LD_INT 2
93808: ARRAY
93809: PPUSH
93810: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
93814: LD_VAR 0 1
93818: PUSH
93819: LD_INT 1
93821: ARRAY
93822: PPUSH
93823: LD_VAR 0 1
93827: PUSH
93828: LD_INT 2
93830: ARRAY
93831: PPUSH
93832: CALL_OW 429
// end ; end ;
93836: LD_VAR 0 1
93840: RET
// every 0 0$1 trigger StreamModeActive and sReset do
93841: LD_EXP 130
93845: PUSH
93846: LD_EXP 152
93850: AND
93851: IFFALSE 93863
93853: GO 93855
93855: DISABLE
// YouLost (  ) ;
93856: LD_STRING 
93858: PPUSH
93859: CALL_OW 104
93863: END
// every 0 0$1 trigger StreamModeActive and sFog do
93864: LD_EXP 130
93868: PUSH
93869: LD_EXP 151
93873: AND
93874: IFFALSE 93888
93876: GO 93878
93878: DISABLE
// FogOff ( your_side ) ;
93879: LD_OWVAR 2
93883: PPUSH
93884: CALL_OW 344
93888: END
// every 0 0$1 trigger StreamModeActive and sSun do
93889: LD_EXP 130
93893: PUSH
93894: LD_EXP 153
93898: AND
93899: IFFALSE 93927
93901: GO 93903
93903: DISABLE
// begin solar_recharge_percent := 0 ;
93904: LD_ADDR_OWVAR 79
93908: PUSH
93909: LD_INT 0
93911: ST_TO_ADDR
// wait ( 5 5$00 ) ;
93912: LD_INT 10500
93914: PPUSH
93915: CALL_OW 67
// solar_recharge_percent := 100 ;
93919: LD_ADDR_OWVAR 79
93923: PUSH
93924: LD_INT 100
93926: ST_TO_ADDR
// end ;
93927: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
93928: LD_EXP 130
93932: PUSH
93933: LD_EXP 154
93937: AND
93938: IFFALSE 94177
93940: GO 93942
93942: DISABLE
93943: LD_INT 0
93945: PPUSH
93946: PPUSH
93947: PPUSH
// begin tmp := [ ] ;
93948: LD_ADDR_VAR 0 3
93952: PUSH
93953: EMPTY
93954: ST_TO_ADDR
// for i := 1 to 6 do
93955: LD_ADDR_VAR 0 1
93959: PUSH
93960: DOUBLE
93961: LD_INT 1
93963: DEC
93964: ST_TO_ADDR
93965: LD_INT 6
93967: PUSH
93968: FOR_TO
93969: IFFALSE 94074
// begin uc_nation := nation_nature ;
93971: LD_ADDR_OWVAR 21
93975: PUSH
93976: LD_INT 0
93978: ST_TO_ADDR
// uc_side := 0 ;
93979: LD_ADDR_OWVAR 20
93983: PUSH
93984: LD_INT 0
93986: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
93987: LD_ADDR_OWVAR 29
93991: PUSH
93992: LD_INT 12
93994: PUSH
93995: LD_INT 12
93997: PUSH
93998: EMPTY
93999: LIST
94000: LIST
94001: ST_TO_ADDR
// hc_agressivity := 20 ;
94002: LD_ADDR_OWVAR 35
94006: PUSH
94007: LD_INT 20
94009: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
94010: LD_ADDR_OWVAR 28
94014: PUSH
94015: LD_INT 17
94017: ST_TO_ADDR
// hc_gallery :=  ;
94018: LD_ADDR_OWVAR 33
94022: PUSH
94023: LD_STRING 
94025: ST_TO_ADDR
// hc_name :=  ;
94026: LD_ADDR_OWVAR 26
94030: PUSH
94031: LD_STRING 
94033: ST_TO_ADDR
// un := CreateHuman ;
94034: LD_ADDR_VAR 0 2
94038: PUSH
94039: CALL_OW 44
94043: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
94044: LD_VAR 0 2
94048: PPUSH
94049: LD_INT 1
94051: PPUSH
94052: CALL_OW 51
// tmp := tmp ^ un ;
94056: LD_ADDR_VAR 0 3
94060: PUSH
94061: LD_VAR 0 3
94065: PUSH
94066: LD_VAR 0 2
94070: ADD
94071: ST_TO_ADDR
// end ;
94072: GO 93968
94074: POP
94075: POP
// repeat wait ( 0 0$1 ) ;
94076: LD_INT 35
94078: PPUSH
94079: CALL_OW 67
// for un in tmp do
94083: LD_ADDR_VAR 0 2
94087: PUSH
94088: LD_VAR 0 3
94092: PUSH
94093: FOR_IN
94094: IFFALSE 94168
// begin if IsDead ( un ) then
94096: LD_VAR 0 2
94100: PPUSH
94101: CALL_OW 301
94105: IFFALSE 94125
// begin tmp := tmp diff un ;
94107: LD_ADDR_VAR 0 3
94111: PUSH
94112: LD_VAR 0 3
94116: PUSH
94117: LD_VAR 0 2
94121: DIFF
94122: ST_TO_ADDR
// continue ;
94123: GO 94093
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
94125: LD_VAR 0 2
94129: PPUSH
94130: LD_INT 3
94132: PUSH
94133: LD_INT 22
94135: PUSH
94136: LD_INT 0
94138: PUSH
94139: EMPTY
94140: LIST
94141: LIST
94142: PUSH
94143: EMPTY
94144: LIST
94145: LIST
94146: PPUSH
94147: CALL_OW 69
94151: PPUSH
94152: LD_VAR 0 2
94156: PPUSH
94157: CALL_OW 74
94161: PPUSH
94162: CALL_OW 115
// end ;
94166: GO 94093
94168: POP
94169: POP
// until not tmp ;
94170: LD_VAR 0 3
94174: NOT
94175: IFFALSE 94076
// end ;
94177: PPOPN 3
94179: END
// every 0 0$1 trigger StreamModeActive and sTroll do
94180: LD_EXP 130
94184: PUSH
94185: LD_EXP 155
94189: AND
94190: IFFALSE 94244
94192: GO 94194
94194: DISABLE
// begin ToLua ( displayTroll(); ) ;
94195: LD_STRING displayTroll();
94197: PPUSH
94198: CALL_OW 559
// wait ( 3 3$00 ) ;
94202: LD_INT 6300
94204: PPUSH
94205: CALL_OW 67
// ToLua ( hideTroll(); ) ;
94209: LD_STRING hideTroll();
94211: PPUSH
94212: CALL_OW 559
// wait ( 1 1$00 ) ;
94216: LD_INT 2100
94218: PPUSH
94219: CALL_OW 67
// ToLua ( displayTroll(); ) ;
94223: LD_STRING displayTroll();
94225: PPUSH
94226: CALL_OW 559
// wait ( 1 1$00 ) ;
94230: LD_INT 2100
94232: PPUSH
94233: CALL_OW 67
// ToLua ( hideTroll(); ) ;
94237: LD_STRING hideTroll();
94239: PPUSH
94240: CALL_OW 559
// end ;
94244: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
94245: LD_EXP 130
94249: PUSH
94250: LD_EXP 156
94254: AND
94255: IFFALSE 94318
94257: GO 94259
94259: DISABLE
94260: LD_INT 0
94262: PPUSH
// begin p := 0 ;
94263: LD_ADDR_VAR 0 1
94267: PUSH
94268: LD_INT 0
94270: ST_TO_ADDR
// repeat game_speed := 1 ;
94271: LD_ADDR_OWVAR 65
94275: PUSH
94276: LD_INT 1
94278: ST_TO_ADDR
// wait ( 0 0$1 ) ;
94279: LD_INT 35
94281: PPUSH
94282: CALL_OW 67
// p := p + 1 ;
94286: LD_ADDR_VAR 0 1
94290: PUSH
94291: LD_VAR 0 1
94295: PUSH
94296: LD_INT 1
94298: PLUS
94299: ST_TO_ADDR
// until p >= 60 ;
94300: LD_VAR 0 1
94304: PUSH
94305: LD_INT 60
94307: GREATEREQUAL
94308: IFFALSE 94271
// game_speed := 4 ;
94310: LD_ADDR_OWVAR 65
94314: PUSH
94315: LD_INT 4
94317: ST_TO_ADDR
// end ;
94318: PPOPN 1
94320: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
94321: LD_EXP 130
94325: PUSH
94326: LD_EXP 157
94330: AND
94331: IFFALSE 94477
94333: GO 94335
94335: DISABLE
94336: LD_INT 0
94338: PPUSH
94339: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94340: LD_ADDR_VAR 0 1
94344: PUSH
94345: LD_INT 22
94347: PUSH
94348: LD_OWVAR 2
94352: PUSH
94353: EMPTY
94354: LIST
94355: LIST
94356: PUSH
94357: LD_INT 2
94359: PUSH
94360: LD_INT 30
94362: PUSH
94363: LD_INT 0
94365: PUSH
94366: EMPTY
94367: LIST
94368: LIST
94369: PUSH
94370: LD_INT 30
94372: PUSH
94373: LD_INT 1
94375: PUSH
94376: EMPTY
94377: LIST
94378: LIST
94379: PUSH
94380: EMPTY
94381: LIST
94382: LIST
94383: LIST
94384: PUSH
94385: EMPTY
94386: LIST
94387: LIST
94388: PPUSH
94389: CALL_OW 69
94393: ST_TO_ADDR
// if not depot then
94394: LD_VAR 0 1
94398: NOT
94399: IFFALSE 94403
// exit ;
94401: GO 94477
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
94403: LD_ADDR_VAR 0 2
94407: PUSH
94408: LD_VAR 0 1
94412: PUSH
94413: LD_INT 1
94415: PPUSH
94416: LD_VAR 0 1
94420: PPUSH
94421: CALL_OW 12
94425: ARRAY
94426: PPUSH
94427: CALL_OW 274
94431: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
94432: LD_VAR 0 2
94436: PPUSH
94437: LD_INT 1
94439: PPUSH
94440: LD_INT 0
94442: PPUSH
94443: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
94447: LD_VAR 0 2
94451: PPUSH
94452: LD_INT 2
94454: PPUSH
94455: LD_INT 0
94457: PPUSH
94458: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
94462: LD_VAR 0 2
94466: PPUSH
94467: LD_INT 3
94469: PPUSH
94470: LD_INT 0
94472: PPUSH
94473: CALL_OW 277
// end ;
94477: PPOPN 2
94479: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
94480: LD_EXP 130
94484: PUSH
94485: LD_EXP 158
94489: AND
94490: IFFALSE 94587
94492: GO 94494
94494: DISABLE
94495: LD_INT 0
94497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
94498: LD_ADDR_VAR 0 1
94502: PUSH
94503: LD_INT 22
94505: PUSH
94506: LD_OWVAR 2
94510: PUSH
94511: EMPTY
94512: LIST
94513: LIST
94514: PUSH
94515: LD_INT 21
94517: PUSH
94518: LD_INT 1
94520: PUSH
94521: EMPTY
94522: LIST
94523: LIST
94524: PUSH
94525: LD_INT 3
94527: PUSH
94528: LD_INT 23
94530: PUSH
94531: LD_INT 0
94533: PUSH
94534: EMPTY
94535: LIST
94536: LIST
94537: PUSH
94538: EMPTY
94539: LIST
94540: LIST
94541: PUSH
94542: EMPTY
94543: LIST
94544: LIST
94545: LIST
94546: PPUSH
94547: CALL_OW 69
94551: ST_TO_ADDR
// if not tmp then
94552: LD_VAR 0 1
94556: NOT
94557: IFFALSE 94561
// exit ;
94559: GO 94587
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
94561: LD_VAR 0 1
94565: PUSH
94566: LD_INT 1
94568: PPUSH
94569: LD_VAR 0 1
94573: PPUSH
94574: CALL_OW 12
94578: ARRAY
94579: PPUSH
94580: LD_INT 200
94582: PPUSH
94583: CALL_OW 234
// end ;
94587: PPOPN 1
94589: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
94590: LD_EXP 130
94594: PUSH
94595: LD_EXP 159
94599: AND
94600: IFFALSE 94679
94602: GO 94604
94604: DISABLE
94605: LD_INT 0
94607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
94608: LD_ADDR_VAR 0 1
94612: PUSH
94613: LD_INT 22
94615: PUSH
94616: LD_OWVAR 2
94620: PUSH
94621: EMPTY
94622: LIST
94623: LIST
94624: PUSH
94625: LD_INT 21
94627: PUSH
94628: LD_INT 2
94630: PUSH
94631: EMPTY
94632: LIST
94633: LIST
94634: PUSH
94635: EMPTY
94636: LIST
94637: LIST
94638: PPUSH
94639: CALL_OW 69
94643: ST_TO_ADDR
// if not tmp then
94644: LD_VAR 0 1
94648: NOT
94649: IFFALSE 94653
// exit ;
94651: GO 94679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
94653: LD_VAR 0 1
94657: PUSH
94658: LD_INT 1
94660: PPUSH
94661: LD_VAR 0 1
94665: PPUSH
94666: CALL_OW 12
94670: ARRAY
94671: PPUSH
94672: LD_INT 60
94674: PPUSH
94675: CALL_OW 234
// end ;
94679: PPOPN 1
94681: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
94682: LD_EXP 130
94686: PUSH
94687: LD_EXP 160
94691: AND
94692: IFFALSE 94791
94694: GO 94696
94696: DISABLE
94697: LD_INT 0
94699: PPUSH
94700: PPUSH
// begin enable ;
94701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
94702: LD_ADDR_VAR 0 1
94706: PUSH
94707: LD_INT 22
94709: PUSH
94710: LD_OWVAR 2
94714: PUSH
94715: EMPTY
94716: LIST
94717: LIST
94718: PUSH
94719: LD_INT 61
94721: PUSH
94722: EMPTY
94723: LIST
94724: PUSH
94725: LD_INT 33
94727: PUSH
94728: LD_INT 2
94730: PUSH
94731: EMPTY
94732: LIST
94733: LIST
94734: PUSH
94735: EMPTY
94736: LIST
94737: LIST
94738: LIST
94739: PPUSH
94740: CALL_OW 69
94744: ST_TO_ADDR
// if not tmp then
94745: LD_VAR 0 1
94749: NOT
94750: IFFALSE 94754
// exit ;
94752: GO 94791
// for i in tmp do
94754: LD_ADDR_VAR 0 2
94758: PUSH
94759: LD_VAR 0 1
94763: PUSH
94764: FOR_IN
94765: IFFALSE 94789
// if IsControledBy ( i ) then
94767: LD_VAR 0 2
94771: PPUSH
94772: CALL_OW 312
94776: IFFALSE 94787
// ComUnlink ( i ) ;
94778: LD_VAR 0 2
94782: PPUSH
94783: CALL_OW 136
94787: GO 94764
94789: POP
94790: POP
// end ;
94791: PPOPN 2
94793: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
94794: LD_EXP 130
94798: PUSH
94799: LD_EXP 161
94803: AND
94804: IFFALSE 94944
94806: GO 94808
94808: DISABLE
94809: LD_INT 0
94811: PPUSH
94812: PPUSH
// begin ToLua ( displayPowell(); ) ;
94813: LD_STRING displayPowell();
94815: PPUSH
94816: CALL_OW 559
// uc_side := 0 ;
94820: LD_ADDR_OWVAR 20
94824: PUSH
94825: LD_INT 0
94827: ST_TO_ADDR
// uc_nation := 2 ;
94828: LD_ADDR_OWVAR 21
94832: PUSH
94833: LD_INT 2
94835: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
94836: LD_ADDR_OWVAR 37
94840: PUSH
94841: LD_INT 14
94843: ST_TO_ADDR
// vc_engine := engine_siberite ;
94844: LD_ADDR_OWVAR 39
94848: PUSH
94849: LD_INT 3
94851: ST_TO_ADDR
// vc_control := control_apeman ;
94852: LD_ADDR_OWVAR 38
94856: PUSH
94857: LD_INT 5
94859: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
94860: LD_ADDR_OWVAR 40
94864: PUSH
94865: LD_INT 29
94867: ST_TO_ADDR
// un := CreateVehicle ;
94868: LD_ADDR_VAR 0 2
94872: PUSH
94873: CALL_OW 45
94877: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94878: LD_VAR 0 2
94882: PPUSH
94883: LD_INT 1
94885: PPUSH
94886: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94890: LD_INT 35
94892: PPUSH
94893: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94897: LD_VAR 0 2
94901: PPUSH
94902: LD_INT 22
94904: PUSH
94905: LD_OWVAR 2
94909: PUSH
94910: EMPTY
94911: LIST
94912: LIST
94913: PPUSH
94914: CALL_OW 69
94918: PPUSH
94919: LD_VAR 0 2
94923: PPUSH
94924: CALL_OW 74
94928: PPUSH
94929: CALL_OW 115
// until IsDead ( un ) ;
94933: LD_VAR 0 2
94937: PPUSH
94938: CALL_OW 301
94942: IFFALSE 94890
// end ;
94944: PPOPN 2
94946: END
// every 0 0$1 trigger StreamModeActive and sStu do
94947: LD_EXP 130
94951: PUSH
94952: LD_EXP 169
94956: AND
94957: IFFALSE 94973
94959: GO 94961
94961: DISABLE
// begin ToLua ( displayStucuk(); ) ;
94962: LD_STRING displayStucuk();
94964: PPUSH
94965: CALL_OW 559
// ResetFog ;
94969: CALL_OW 335
// end ;
94973: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
94974: LD_EXP 130
94978: PUSH
94979: LD_EXP 162
94983: AND
94984: IFFALSE 95125
94986: GO 94988
94988: DISABLE
94989: LD_INT 0
94991: PPUSH
94992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94993: LD_ADDR_VAR 0 2
94997: PUSH
94998: LD_INT 22
95000: PUSH
95001: LD_OWVAR 2
95005: PUSH
95006: EMPTY
95007: LIST
95008: LIST
95009: PUSH
95010: LD_INT 21
95012: PUSH
95013: LD_INT 1
95015: PUSH
95016: EMPTY
95017: LIST
95018: LIST
95019: PUSH
95020: EMPTY
95021: LIST
95022: LIST
95023: PPUSH
95024: CALL_OW 69
95028: ST_TO_ADDR
// if not tmp then
95029: LD_VAR 0 2
95033: NOT
95034: IFFALSE 95038
// exit ;
95036: GO 95125
// un := tmp [ rand ( 1 , tmp ) ] ;
95038: LD_ADDR_VAR 0 1
95042: PUSH
95043: LD_VAR 0 2
95047: PUSH
95048: LD_INT 1
95050: PPUSH
95051: LD_VAR 0 2
95055: PPUSH
95056: CALL_OW 12
95060: ARRAY
95061: ST_TO_ADDR
// SetSide ( un , 0 ) ;
95062: LD_VAR 0 1
95066: PPUSH
95067: LD_INT 0
95069: PPUSH
95070: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
95074: LD_VAR 0 1
95078: PPUSH
95079: LD_OWVAR 3
95083: PUSH
95084: LD_VAR 0 1
95088: DIFF
95089: PPUSH
95090: LD_VAR 0 1
95094: PPUSH
95095: CALL_OW 74
95099: PPUSH
95100: CALL_OW 115
// wait ( 0 0$20 ) ;
95104: LD_INT 700
95106: PPUSH
95107: CALL_OW 67
// SetSide ( un , your_side ) ;
95111: LD_VAR 0 1
95115: PPUSH
95116: LD_OWVAR 2
95120: PPUSH
95121: CALL_OW 235
// end ;
95125: PPOPN 2
95127: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
95128: LD_EXP 130
95132: PUSH
95133: LD_EXP 163
95137: AND
95138: IFFALSE 95244
95140: GO 95142
95142: DISABLE
95143: LD_INT 0
95145: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
95146: LD_ADDR_VAR 0 1
95150: PUSH
95151: LD_INT 22
95153: PUSH
95154: LD_OWVAR 2
95158: PUSH
95159: EMPTY
95160: LIST
95161: LIST
95162: PUSH
95163: LD_INT 2
95165: PUSH
95166: LD_INT 30
95168: PUSH
95169: LD_INT 0
95171: PUSH
95172: EMPTY
95173: LIST
95174: LIST
95175: PUSH
95176: LD_INT 30
95178: PUSH
95179: LD_INT 1
95181: PUSH
95182: EMPTY
95183: LIST
95184: LIST
95185: PUSH
95186: EMPTY
95187: LIST
95188: LIST
95189: LIST
95190: PUSH
95191: EMPTY
95192: LIST
95193: LIST
95194: PPUSH
95195: CALL_OW 69
95199: ST_TO_ADDR
// if not depot then
95200: LD_VAR 0 1
95204: NOT
95205: IFFALSE 95209
// exit ;
95207: GO 95244
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
95209: LD_VAR 0 1
95213: PUSH
95214: LD_INT 1
95216: ARRAY
95217: PPUSH
95218: CALL_OW 250
95222: PPUSH
95223: LD_VAR 0 1
95227: PUSH
95228: LD_INT 1
95230: ARRAY
95231: PPUSH
95232: CALL_OW 251
95236: PPUSH
95237: LD_INT 70
95239: PPUSH
95240: CALL_OW 495
// end ;
95244: PPOPN 1
95246: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
95247: LD_EXP 130
95251: PUSH
95252: LD_EXP 164
95256: AND
95257: IFFALSE 95468
95259: GO 95261
95261: DISABLE
95262: LD_INT 0
95264: PPUSH
95265: PPUSH
95266: PPUSH
95267: PPUSH
95268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
95269: LD_ADDR_VAR 0 5
95273: PUSH
95274: LD_INT 22
95276: PUSH
95277: LD_OWVAR 2
95281: PUSH
95282: EMPTY
95283: LIST
95284: LIST
95285: PUSH
95286: LD_INT 21
95288: PUSH
95289: LD_INT 1
95291: PUSH
95292: EMPTY
95293: LIST
95294: LIST
95295: PUSH
95296: EMPTY
95297: LIST
95298: LIST
95299: PPUSH
95300: CALL_OW 69
95304: ST_TO_ADDR
// if not tmp then
95305: LD_VAR 0 5
95309: NOT
95310: IFFALSE 95314
// exit ;
95312: GO 95468
// for i in tmp do
95314: LD_ADDR_VAR 0 1
95318: PUSH
95319: LD_VAR 0 5
95323: PUSH
95324: FOR_IN
95325: IFFALSE 95466
// begin d := rand ( 0 , 5 ) ;
95327: LD_ADDR_VAR 0 4
95331: PUSH
95332: LD_INT 0
95334: PPUSH
95335: LD_INT 5
95337: PPUSH
95338: CALL_OW 12
95342: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
95343: LD_ADDR_VAR 0 2
95347: PUSH
95348: LD_VAR 0 1
95352: PPUSH
95353: CALL_OW 250
95357: PPUSH
95358: LD_VAR 0 4
95362: PPUSH
95363: LD_INT 3
95365: PPUSH
95366: LD_INT 12
95368: PPUSH
95369: CALL_OW 12
95373: PPUSH
95374: CALL_OW 272
95378: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
95379: LD_ADDR_VAR 0 3
95383: PUSH
95384: LD_VAR 0 1
95388: PPUSH
95389: CALL_OW 251
95393: PPUSH
95394: LD_VAR 0 4
95398: PPUSH
95399: LD_INT 3
95401: PPUSH
95402: LD_INT 12
95404: PPUSH
95405: CALL_OW 12
95409: PPUSH
95410: CALL_OW 273
95414: ST_TO_ADDR
// if ValidHex ( x , y ) then
95415: LD_VAR 0 2
95419: PPUSH
95420: LD_VAR 0 3
95424: PPUSH
95425: CALL_OW 488
95429: IFFALSE 95464
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
95431: LD_VAR 0 1
95435: PPUSH
95436: LD_VAR 0 2
95440: PPUSH
95441: LD_VAR 0 3
95445: PPUSH
95446: LD_INT 3
95448: PPUSH
95449: LD_INT 6
95451: PPUSH
95452: CALL_OW 12
95456: PPUSH
95457: LD_INT 1
95459: PPUSH
95460: CALL_OW 483
// end ;
95464: GO 95324
95466: POP
95467: POP
// end ;
95468: PPOPN 5
95470: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
95471: LD_EXP 130
95475: PUSH
95476: LD_EXP 165
95480: AND
95481: IFFALSE 95575
95483: GO 95485
95485: DISABLE
95486: LD_INT 0
95488: PPUSH
95489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
95490: LD_ADDR_VAR 0 2
95494: PUSH
95495: LD_INT 22
95497: PUSH
95498: LD_OWVAR 2
95502: PUSH
95503: EMPTY
95504: LIST
95505: LIST
95506: PUSH
95507: LD_INT 32
95509: PUSH
95510: LD_INT 1
95512: PUSH
95513: EMPTY
95514: LIST
95515: LIST
95516: PUSH
95517: LD_INT 21
95519: PUSH
95520: LD_INT 2
95522: PUSH
95523: EMPTY
95524: LIST
95525: LIST
95526: PUSH
95527: EMPTY
95528: LIST
95529: LIST
95530: LIST
95531: PPUSH
95532: CALL_OW 69
95536: ST_TO_ADDR
// if not tmp then
95537: LD_VAR 0 2
95541: NOT
95542: IFFALSE 95546
// exit ;
95544: GO 95575
// for i in tmp do
95546: LD_ADDR_VAR 0 1
95550: PUSH
95551: LD_VAR 0 2
95555: PUSH
95556: FOR_IN
95557: IFFALSE 95573
// SetFuel ( i , 0 ) ;
95559: LD_VAR 0 1
95563: PPUSH
95564: LD_INT 0
95566: PPUSH
95567: CALL_OW 240
95571: GO 95556
95573: POP
95574: POP
// end ;
95575: PPOPN 2
95577: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
95578: LD_EXP 130
95582: PUSH
95583: LD_EXP 166
95587: AND
95588: IFFALSE 95654
95590: GO 95592
95592: DISABLE
95593: LD_INT 0
95595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
95596: LD_ADDR_VAR 0 1
95600: PUSH
95601: LD_INT 22
95603: PUSH
95604: LD_OWVAR 2
95608: PUSH
95609: EMPTY
95610: LIST
95611: LIST
95612: PUSH
95613: LD_INT 30
95615: PUSH
95616: LD_INT 29
95618: PUSH
95619: EMPTY
95620: LIST
95621: LIST
95622: PUSH
95623: EMPTY
95624: LIST
95625: LIST
95626: PPUSH
95627: CALL_OW 69
95631: ST_TO_ADDR
// if not tmp then
95632: LD_VAR 0 1
95636: NOT
95637: IFFALSE 95641
// exit ;
95639: GO 95654
// DestroyUnit ( tmp [ 1 ] ) ;
95641: LD_VAR 0 1
95645: PUSH
95646: LD_INT 1
95648: ARRAY
95649: PPUSH
95650: CALL_OW 65
// end ;
95654: PPOPN 1
95656: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
95657: LD_EXP 130
95661: PUSH
95662: LD_EXP 168
95666: AND
95667: IFFALSE 95796
95669: GO 95671
95671: DISABLE
95672: LD_INT 0
95674: PPUSH
// begin uc_side := 0 ;
95675: LD_ADDR_OWVAR 20
95679: PUSH
95680: LD_INT 0
95682: ST_TO_ADDR
// uc_nation := nation_arabian ;
95683: LD_ADDR_OWVAR 21
95687: PUSH
95688: LD_INT 2
95690: ST_TO_ADDR
// hc_gallery :=  ;
95691: LD_ADDR_OWVAR 33
95695: PUSH
95696: LD_STRING 
95698: ST_TO_ADDR
// hc_name :=  ;
95699: LD_ADDR_OWVAR 26
95703: PUSH
95704: LD_STRING 
95706: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
95707: LD_INT 1
95709: PPUSH
95710: LD_INT 11
95712: PPUSH
95713: LD_INT 10
95715: PPUSH
95716: CALL_OW 380
// un := CreateHuman ;
95720: LD_ADDR_VAR 0 1
95724: PUSH
95725: CALL_OW 44
95729: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
95730: LD_VAR 0 1
95734: PPUSH
95735: LD_INT 1
95737: PPUSH
95738: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
95742: LD_INT 35
95744: PPUSH
95745: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
95749: LD_VAR 0 1
95753: PPUSH
95754: LD_INT 22
95756: PUSH
95757: LD_OWVAR 2
95761: PUSH
95762: EMPTY
95763: LIST
95764: LIST
95765: PPUSH
95766: CALL_OW 69
95770: PPUSH
95771: LD_VAR 0 1
95775: PPUSH
95776: CALL_OW 74
95780: PPUSH
95781: CALL_OW 115
// until IsDead ( un ) ;
95785: LD_VAR 0 1
95789: PPUSH
95790: CALL_OW 301
95794: IFFALSE 95742
// end ;
95796: PPOPN 1
95798: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
95799: LD_EXP 130
95803: PUSH
95804: LD_EXP 170
95808: AND
95809: IFFALSE 95821
95811: GO 95813
95813: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
95814: LD_STRING earthquake(getX(game), 0, 32)
95816: PPUSH
95817: CALL_OW 559
95821: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
95822: LD_EXP 130
95826: PUSH
95827: LD_EXP 171
95831: AND
95832: IFFALSE 95923
95834: GO 95836
95836: DISABLE
95837: LD_INT 0
95839: PPUSH
// begin enable ;
95840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
95841: LD_ADDR_VAR 0 1
95845: PUSH
95846: LD_INT 22
95848: PUSH
95849: LD_OWVAR 2
95853: PUSH
95854: EMPTY
95855: LIST
95856: LIST
95857: PUSH
95858: LD_INT 21
95860: PUSH
95861: LD_INT 2
95863: PUSH
95864: EMPTY
95865: LIST
95866: LIST
95867: PUSH
95868: LD_INT 33
95870: PUSH
95871: LD_INT 3
95873: PUSH
95874: EMPTY
95875: LIST
95876: LIST
95877: PUSH
95878: EMPTY
95879: LIST
95880: LIST
95881: LIST
95882: PPUSH
95883: CALL_OW 69
95887: ST_TO_ADDR
// if not tmp then
95888: LD_VAR 0 1
95892: NOT
95893: IFFALSE 95897
// exit ;
95895: GO 95923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95897: LD_VAR 0 1
95901: PUSH
95902: LD_INT 1
95904: PPUSH
95905: LD_VAR 0 1
95909: PPUSH
95910: CALL_OW 12
95914: ARRAY
95915: PPUSH
95916: LD_INT 1
95918: PPUSH
95919: CALL_OW 234
// end ;
95923: PPOPN 1
95925: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
95926: LD_EXP 130
95930: PUSH
95931: LD_EXP 172
95935: AND
95936: IFFALSE 96077
95938: GO 95940
95940: DISABLE
95941: LD_INT 0
95943: PPUSH
95944: PPUSH
95945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95946: LD_ADDR_VAR 0 3
95950: PUSH
95951: LD_INT 22
95953: PUSH
95954: LD_OWVAR 2
95958: PUSH
95959: EMPTY
95960: LIST
95961: LIST
95962: PUSH
95963: LD_INT 25
95965: PUSH
95966: LD_INT 1
95968: PUSH
95969: EMPTY
95970: LIST
95971: LIST
95972: PUSH
95973: EMPTY
95974: LIST
95975: LIST
95976: PPUSH
95977: CALL_OW 69
95981: ST_TO_ADDR
// if not tmp then
95982: LD_VAR 0 3
95986: NOT
95987: IFFALSE 95991
// exit ;
95989: GO 96077
// un := tmp [ rand ( 1 , tmp ) ] ;
95991: LD_ADDR_VAR 0 2
95995: PUSH
95996: LD_VAR 0 3
96000: PUSH
96001: LD_INT 1
96003: PPUSH
96004: LD_VAR 0 3
96008: PPUSH
96009: CALL_OW 12
96013: ARRAY
96014: ST_TO_ADDR
// if Crawls ( un ) then
96015: LD_VAR 0 2
96019: PPUSH
96020: CALL_OW 318
96024: IFFALSE 96035
// ComWalk ( un ) ;
96026: LD_VAR 0 2
96030: PPUSH
96031: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
96035: LD_VAR 0 2
96039: PPUSH
96040: LD_INT 9
96042: PPUSH
96043: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
96047: LD_INT 28
96049: PPUSH
96050: LD_OWVAR 2
96054: PPUSH
96055: LD_INT 2
96057: PPUSH
96058: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
96062: LD_INT 29
96064: PPUSH
96065: LD_OWVAR 2
96069: PPUSH
96070: LD_INT 2
96072: PPUSH
96073: CALL_OW 322
// end ;
96077: PPOPN 3
96079: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
96080: LD_EXP 130
96084: PUSH
96085: LD_EXP 173
96089: AND
96090: IFFALSE 96201
96092: GO 96094
96094: DISABLE
96095: LD_INT 0
96097: PPUSH
96098: PPUSH
96099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96100: LD_ADDR_VAR 0 3
96104: PUSH
96105: LD_INT 22
96107: PUSH
96108: LD_OWVAR 2
96112: PUSH
96113: EMPTY
96114: LIST
96115: LIST
96116: PUSH
96117: LD_INT 25
96119: PUSH
96120: LD_INT 1
96122: PUSH
96123: EMPTY
96124: LIST
96125: LIST
96126: PUSH
96127: EMPTY
96128: LIST
96129: LIST
96130: PPUSH
96131: CALL_OW 69
96135: ST_TO_ADDR
// if not tmp then
96136: LD_VAR 0 3
96140: NOT
96141: IFFALSE 96145
// exit ;
96143: GO 96201
// un := tmp [ rand ( 1 , tmp ) ] ;
96145: LD_ADDR_VAR 0 2
96149: PUSH
96150: LD_VAR 0 3
96154: PUSH
96155: LD_INT 1
96157: PPUSH
96158: LD_VAR 0 3
96162: PPUSH
96163: CALL_OW 12
96167: ARRAY
96168: ST_TO_ADDR
// if Crawls ( un ) then
96169: LD_VAR 0 2
96173: PPUSH
96174: CALL_OW 318
96178: IFFALSE 96189
// ComWalk ( un ) ;
96180: LD_VAR 0 2
96184: PPUSH
96185: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96189: LD_VAR 0 2
96193: PPUSH
96194: LD_INT 8
96196: PPUSH
96197: CALL_OW 336
// end ;
96201: PPOPN 3
96203: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
96204: LD_EXP 130
96208: PUSH
96209: LD_EXP 174
96213: AND
96214: IFFALSE 96358
96216: GO 96218
96218: DISABLE
96219: LD_INT 0
96221: PPUSH
96222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
96223: LD_ADDR_VAR 0 2
96227: PUSH
96228: LD_INT 22
96230: PUSH
96231: LD_OWVAR 2
96235: PUSH
96236: EMPTY
96237: LIST
96238: LIST
96239: PUSH
96240: LD_INT 21
96242: PUSH
96243: LD_INT 2
96245: PUSH
96246: EMPTY
96247: LIST
96248: LIST
96249: PUSH
96250: LD_INT 2
96252: PUSH
96253: LD_INT 34
96255: PUSH
96256: LD_INT 12
96258: PUSH
96259: EMPTY
96260: LIST
96261: LIST
96262: PUSH
96263: LD_INT 34
96265: PUSH
96266: LD_INT 51
96268: PUSH
96269: EMPTY
96270: LIST
96271: LIST
96272: PUSH
96273: LD_INT 34
96275: PUSH
96276: LD_INT 32
96278: PUSH
96279: EMPTY
96280: LIST
96281: LIST
96282: PUSH
96283: EMPTY
96284: LIST
96285: LIST
96286: LIST
96287: LIST
96288: PUSH
96289: EMPTY
96290: LIST
96291: LIST
96292: LIST
96293: PPUSH
96294: CALL_OW 69
96298: ST_TO_ADDR
// if not tmp then
96299: LD_VAR 0 2
96303: NOT
96304: IFFALSE 96308
// exit ;
96306: GO 96358
// for i in tmp do
96308: LD_ADDR_VAR 0 1
96312: PUSH
96313: LD_VAR 0 2
96317: PUSH
96318: FOR_IN
96319: IFFALSE 96356
// if GetCargo ( i , mat_artifact ) = 0 then
96321: LD_VAR 0 1
96325: PPUSH
96326: LD_INT 4
96328: PPUSH
96329: CALL_OW 289
96333: PUSH
96334: LD_INT 0
96336: EQUAL
96337: IFFALSE 96354
// SetCargo ( i , mat_siberit , 100 ) ;
96339: LD_VAR 0 1
96343: PPUSH
96344: LD_INT 3
96346: PPUSH
96347: LD_INT 100
96349: PPUSH
96350: CALL_OW 290
96354: GO 96318
96356: POP
96357: POP
// end ;
96358: PPOPN 2
96360: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
96361: LD_EXP 130
96365: PUSH
96366: LD_EXP 175
96370: AND
96371: IFFALSE 96524
96373: GO 96375
96375: DISABLE
96376: LD_INT 0
96378: PPUSH
96379: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
96380: LD_ADDR_VAR 0 2
96384: PUSH
96385: LD_INT 22
96387: PUSH
96388: LD_OWVAR 2
96392: PUSH
96393: EMPTY
96394: LIST
96395: LIST
96396: PPUSH
96397: CALL_OW 69
96401: ST_TO_ADDR
// if not tmp then
96402: LD_VAR 0 2
96406: NOT
96407: IFFALSE 96411
// exit ;
96409: GO 96524
// for i := 1 to 2 do
96411: LD_ADDR_VAR 0 1
96415: PUSH
96416: DOUBLE
96417: LD_INT 1
96419: DEC
96420: ST_TO_ADDR
96421: LD_INT 2
96423: PUSH
96424: FOR_TO
96425: IFFALSE 96522
// begin uc_side := your_side ;
96427: LD_ADDR_OWVAR 20
96431: PUSH
96432: LD_OWVAR 2
96436: ST_TO_ADDR
// uc_nation := nation_american ;
96437: LD_ADDR_OWVAR 21
96441: PUSH
96442: LD_INT 1
96444: ST_TO_ADDR
// vc_chassis := us_morphling ;
96445: LD_ADDR_OWVAR 37
96449: PUSH
96450: LD_INT 5
96452: ST_TO_ADDR
// vc_engine := engine_siberite ;
96453: LD_ADDR_OWVAR 39
96457: PUSH
96458: LD_INT 3
96460: ST_TO_ADDR
// vc_control := control_computer ;
96461: LD_ADDR_OWVAR 38
96465: PUSH
96466: LD_INT 3
96468: ST_TO_ADDR
// vc_weapon := us_double_laser ;
96469: LD_ADDR_OWVAR 40
96473: PUSH
96474: LD_INT 10
96476: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
96477: CALL_OW 45
96481: PPUSH
96482: LD_VAR 0 2
96486: PUSH
96487: LD_INT 1
96489: ARRAY
96490: PPUSH
96491: CALL_OW 250
96495: PPUSH
96496: LD_VAR 0 2
96500: PUSH
96501: LD_INT 1
96503: ARRAY
96504: PPUSH
96505: CALL_OW 251
96509: PPUSH
96510: LD_INT 12
96512: PPUSH
96513: LD_INT 1
96515: PPUSH
96516: CALL_OW 50
// end ;
96520: GO 96424
96522: POP
96523: POP
// end ;
96524: PPOPN 2
96526: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
96527: LD_EXP 130
96531: PUSH
96532: LD_EXP 176
96536: AND
96537: IFFALSE 96759
96539: GO 96541
96541: DISABLE
96542: LD_INT 0
96544: PPUSH
96545: PPUSH
96546: PPUSH
96547: PPUSH
96548: PPUSH
96549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96550: LD_ADDR_VAR 0 6
96554: PUSH
96555: LD_INT 22
96557: PUSH
96558: LD_OWVAR 2
96562: PUSH
96563: EMPTY
96564: LIST
96565: LIST
96566: PUSH
96567: LD_INT 21
96569: PUSH
96570: LD_INT 1
96572: PUSH
96573: EMPTY
96574: LIST
96575: LIST
96576: PUSH
96577: LD_INT 3
96579: PUSH
96580: LD_INT 23
96582: PUSH
96583: LD_INT 0
96585: PUSH
96586: EMPTY
96587: LIST
96588: LIST
96589: PUSH
96590: EMPTY
96591: LIST
96592: LIST
96593: PUSH
96594: EMPTY
96595: LIST
96596: LIST
96597: LIST
96598: PPUSH
96599: CALL_OW 69
96603: ST_TO_ADDR
// if not tmp then
96604: LD_VAR 0 6
96608: NOT
96609: IFFALSE 96613
// exit ;
96611: GO 96759
// s1 := rand ( 1 , 4 ) ;
96613: LD_ADDR_VAR 0 2
96617: PUSH
96618: LD_INT 1
96620: PPUSH
96621: LD_INT 4
96623: PPUSH
96624: CALL_OW 12
96628: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
96629: LD_ADDR_VAR 0 4
96633: PUSH
96634: LD_VAR 0 6
96638: PUSH
96639: LD_INT 1
96641: ARRAY
96642: PPUSH
96643: LD_VAR 0 2
96647: PPUSH
96648: CALL_OW 259
96652: ST_TO_ADDR
// if s1 = 1 then
96653: LD_VAR 0 2
96657: PUSH
96658: LD_INT 1
96660: EQUAL
96661: IFFALSE 96681
// s2 := rand ( 2 , 4 ) else
96663: LD_ADDR_VAR 0 3
96667: PUSH
96668: LD_INT 2
96670: PPUSH
96671: LD_INT 4
96673: PPUSH
96674: CALL_OW 12
96678: ST_TO_ADDR
96679: GO 96689
// s2 := 1 ;
96681: LD_ADDR_VAR 0 3
96685: PUSH
96686: LD_INT 1
96688: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
96689: LD_ADDR_VAR 0 5
96693: PUSH
96694: LD_VAR 0 6
96698: PUSH
96699: LD_INT 1
96701: ARRAY
96702: PPUSH
96703: LD_VAR 0 3
96707: PPUSH
96708: CALL_OW 259
96712: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
96713: LD_VAR 0 6
96717: PUSH
96718: LD_INT 1
96720: ARRAY
96721: PPUSH
96722: LD_VAR 0 2
96726: PPUSH
96727: LD_VAR 0 5
96731: PPUSH
96732: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
96736: LD_VAR 0 6
96740: PUSH
96741: LD_INT 1
96743: ARRAY
96744: PPUSH
96745: LD_VAR 0 3
96749: PPUSH
96750: LD_VAR 0 4
96754: PPUSH
96755: CALL_OW 237
// end ;
96759: PPOPN 6
96761: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
96762: LD_EXP 130
96766: PUSH
96767: LD_EXP 177
96771: AND
96772: IFFALSE 96851
96774: GO 96776
96776: DISABLE
96777: LD_INT 0
96779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
96780: LD_ADDR_VAR 0 1
96784: PUSH
96785: LD_INT 22
96787: PUSH
96788: LD_OWVAR 2
96792: PUSH
96793: EMPTY
96794: LIST
96795: LIST
96796: PUSH
96797: LD_INT 30
96799: PUSH
96800: LD_INT 3
96802: PUSH
96803: EMPTY
96804: LIST
96805: LIST
96806: PUSH
96807: EMPTY
96808: LIST
96809: LIST
96810: PPUSH
96811: CALL_OW 69
96815: ST_TO_ADDR
// if not tmp then
96816: LD_VAR 0 1
96820: NOT
96821: IFFALSE 96825
// exit ;
96823: GO 96851
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
96825: LD_VAR 0 1
96829: PUSH
96830: LD_INT 1
96832: PPUSH
96833: LD_VAR 0 1
96837: PPUSH
96838: CALL_OW 12
96842: ARRAY
96843: PPUSH
96844: LD_INT 1
96846: PPUSH
96847: CALL_OW 234
// end ;
96851: PPOPN 1
96853: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
96854: LD_EXP 130
96858: PUSH
96859: LD_EXP 178
96863: AND
96864: IFFALSE 96976
96866: GO 96868
96868: DISABLE
96869: LD_INT 0
96871: PPUSH
96872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
96873: LD_ADDR_VAR 0 2
96877: PUSH
96878: LD_INT 22
96880: PUSH
96881: LD_OWVAR 2
96885: PUSH
96886: EMPTY
96887: LIST
96888: LIST
96889: PUSH
96890: LD_INT 2
96892: PUSH
96893: LD_INT 30
96895: PUSH
96896: LD_INT 27
96898: PUSH
96899: EMPTY
96900: LIST
96901: LIST
96902: PUSH
96903: LD_INT 30
96905: PUSH
96906: LD_INT 26
96908: PUSH
96909: EMPTY
96910: LIST
96911: LIST
96912: PUSH
96913: LD_INT 30
96915: PUSH
96916: LD_INT 28
96918: PUSH
96919: EMPTY
96920: LIST
96921: LIST
96922: PUSH
96923: EMPTY
96924: LIST
96925: LIST
96926: LIST
96927: LIST
96928: PUSH
96929: EMPTY
96930: LIST
96931: LIST
96932: PPUSH
96933: CALL_OW 69
96937: ST_TO_ADDR
// if not tmp then
96938: LD_VAR 0 2
96942: NOT
96943: IFFALSE 96947
// exit ;
96945: GO 96976
// for i in tmp do
96947: LD_ADDR_VAR 0 1
96951: PUSH
96952: LD_VAR 0 2
96956: PUSH
96957: FOR_IN
96958: IFFALSE 96974
// SetLives ( i , 1 ) ;
96960: LD_VAR 0 1
96964: PPUSH
96965: LD_INT 1
96967: PPUSH
96968: CALL_OW 234
96972: GO 96957
96974: POP
96975: POP
// end ;
96976: PPOPN 2
96978: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
96979: LD_EXP 130
96983: PUSH
96984: LD_EXP 179
96988: AND
96989: IFFALSE 97263
96991: GO 96993
96993: DISABLE
96994: LD_INT 0
96996: PPUSH
96997: PPUSH
96998: PPUSH
// begin i := rand ( 1 , 7 ) ;
96999: LD_ADDR_VAR 0 1
97003: PUSH
97004: LD_INT 1
97006: PPUSH
97007: LD_INT 7
97009: PPUSH
97010: CALL_OW 12
97014: ST_TO_ADDR
// case i of 1 :
97015: LD_VAR 0 1
97019: PUSH
97020: LD_INT 1
97022: DOUBLE
97023: EQUAL
97024: IFTRUE 97028
97026: GO 97038
97028: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
97029: LD_STRING earthquake(getX(game), 0, 32)
97031: PPUSH
97032: CALL_OW 559
97036: GO 97263
97038: LD_INT 2
97040: DOUBLE
97041: EQUAL
97042: IFTRUE 97046
97044: GO 97060
97046: POP
// begin ToLua ( displayStucuk(); ) ;
97047: LD_STRING displayStucuk();
97049: PPUSH
97050: CALL_OW 559
// ResetFog ;
97054: CALL_OW 335
// end ; 3 :
97058: GO 97263
97060: LD_INT 3
97062: DOUBLE
97063: EQUAL
97064: IFTRUE 97068
97066: GO 97172
97068: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
97069: LD_ADDR_VAR 0 2
97073: PUSH
97074: LD_INT 22
97076: PUSH
97077: LD_OWVAR 2
97081: PUSH
97082: EMPTY
97083: LIST
97084: LIST
97085: PUSH
97086: LD_INT 25
97088: PUSH
97089: LD_INT 1
97091: PUSH
97092: EMPTY
97093: LIST
97094: LIST
97095: PUSH
97096: EMPTY
97097: LIST
97098: LIST
97099: PPUSH
97100: CALL_OW 69
97104: ST_TO_ADDR
// if not tmp then
97105: LD_VAR 0 2
97109: NOT
97110: IFFALSE 97114
// exit ;
97112: GO 97263
// un := tmp [ rand ( 1 , tmp ) ] ;
97114: LD_ADDR_VAR 0 3
97118: PUSH
97119: LD_VAR 0 2
97123: PUSH
97124: LD_INT 1
97126: PPUSH
97127: LD_VAR 0 2
97131: PPUSH
97132: CALL_OW 12
97136: ARRAY
97137: ST_TO_ADDR
// if Crawls ( un ) then
97138: LD_VAR 0 3
97142: PPUSH
97143: CALL_OW 318
97147: IFFALSE 97158
// ComWalk ( un ) ;
97149: LD_VAR 0 3
97153: PPUSH
97154: CALL_OW 138
// SetClass ( un , class_mortar ) ;
97158: LD_VAR 0 3
97162: PPUSH
97163: LD_INT 8
97165: PPUSH
97166: CALL_OW 336
// end ; 4 :
97170: GO 97263
97172: LD_INT 4
97174: DOUBLE
97175: EQUAL
97176: IFTRUE 97180
97178: GO 97241
97180: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
97181: LD_ADDR_VAR 0 2
97185: PUSH
97186: LD_INT 22
97188: PUSH
97189: LD_OWVAR 2
97193: PUSH
97194: EMPTY
97195: LIST
97196: LIST
97197: PUSH
97198: LD_INT 30
97200: PUSH
97201: LD_INT 29
97203: PUSH
97204: EMPTY
97205: LIST
97206: LIST
97207: PUSH
97208: EMPTY
97209: LIST
97210: LIST
97211: PPUSH
97212: CALL_OW 69
97216: ST_TO_ADDR
// if not tmp then
97217: LD_VAR 0 2
97221: NOT
97222: IFFALSE 97226
// exit ;
97224: GO 97263
// DestroyUnit ( tmp [ 1 ] ) ;
97226: LD_VAR 0 2
97230: PUSH
97231: LD_INT 1
97233: ARRAY
97234: PPUSH
97235: CALL_OW 65
// end ; 5 .. 7 :
97239: GO 97263
97241: LD_INT 5
97243: DOUBLE
97244: GREATEREQUAL
97245: IFFALSE 97253
97247: LD_INT 7
97249: DOUBLE
97250: LESSEQUAL
97251: IFTRUE 97255
97253: GO 97262
97255: POP
// StreamSibBomb ; end ;
97256: CALL 93543 0 0
97260: GO 97263
97262: POP
// end ;
97263: PPOPN 3
97265: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
97266: LD_EXP 130
97270: PUSH
97271: LD_EXP 180
97275: AND
97276: IFFALSE 97432
97278: GO 97280
97280: DISABLE
97281: LD_INT 0
97283: PPUSH
97284: PPUSH
97285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
97286: LD_ADDR_VAR 0 2
97290: PUSH
97291: LD_INT 81
97293: PUSH
97294: LD_OWVAR 2
97298: PUSH
97299: EMPTY
97300: LIST
97301: LIST
97302: PUSH
97303: LD_INT 2
97305: PUSH
97306: LD_INT 21
97308: PUSH
97309: LD_INT 1
97311: PUSH
97312: EMPTY
97313: LIST
97314: LIST
97315: PUSH
97316: LD_INT 21
97318: PUSH
97319: LD_INT 2
97321: PUSH
97322: EMPTY
97323: LIST
97324: LIST
97325: PUSH
97326: EMPTY
97327: LIST
97328: LIST
97329: LIST
97330: PUSH
97331: EMPTY
97332: LIST
97333: LIST
97334: PPUSH
97335: CALL_OW 69
97339: ST_TO_ADDR
// if not tmp then
97340: LD_VAR 0 2
97344: NOT
97345: IFFALSE 97349
// exit ;
97347: GO 97432
// p := 0 ;
97349: LD_ADDR_VAR 0 3
97353: PUSH
97354: LD_INT 0
97356: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
97357: LD_INT 35
97359: PPUSH
97360: CALL_OW 67
// p := p + 1 ;
97364: LD_ADDR_VAR 0 3
97368: PUSH
97369: LD_VAR 0 3
97373: PUSH
97374: LD_INT 1
97376: PLUS
97377: ST_TO_ADDR
// for i in tmp do
97378: LD_ADDR_VAR 0 1
97382: PUSH
97383: LD_VAR 0 2
97387: PUSH
97388: FOR_IN
97389: IFFALSE 97420
// if GetLives ( i ) < 1000 then
97391: LD_VAR 0 1
97395: PPUSH
97396: CALL_OW 256
97400: PUSH
97401: LD_INT 1000
97403: LESS
97404: IFFALSE 97418
// SetLives ( i , 1000 ) ;
97406: LD_VAR 0 1
97410: PPUSH
97411: LD_INT 1000
97413: PPUSH
97414: CALL_OW 234
97418: GO 97388
97420: POP
97421: POP
// until p > 20 ;
97422: LD_VAR 0 3
97426: PUSH
97427: LD_INT 20
97429: GREATER
97430: IFFALSE 97357
// end ;
97432: PPOPN 3
97434: END
// every 0 0$1 trigger StreamModeActive and sTime do
97435: LD_EXP 130
97439: PUSH
97440: LD_EXP 181
97444: AND
97445: IFFALSE 97480
97447: GO 97449
97449: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
97450: LD_INT 28
97452: PPUSH
97453: LD_OWVAR 2
97457: PPUSH
97458: LD_INT 2
97460: PPUSH
97461: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
97465: LD_INT 30
97467: PPUSH
97468: LD_OWVAR 2
97472: PPUSH
97473: LD_INT 2
97475: PPUSH
97476: CALL_OW 322
// end ;
97480: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
97481: LD_EXP 130
97485: PUSH
97486: LD_EXP 182
97490: AND
97491: IFFALSE 97612
97493: GO 97495
97495: DISABLE
97496: LD_INT 0
97498: PPUSH
97499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
97500: LD_ADDR_VAR 0 2
97504: PUSH
97505: LD_INT 22
97507: PUSH
97508: LD_OWVAR 2
97512: PUSH
97513: EMPTY
97514: LIST
97515: LIST
97516: PUSH
97517: LD_INT 21
97519: PUSH
97520: LD_INT 1
97522: PUSH
97523: EMPTY
97524: LIST
97525: LIST
97526: PUSH
97527: LD_INT 3
97529: PUSH
97530: LD_INT 23
97532: PUSH
97533: LD_INT 0
97535: PUSH
97536: EMPTY
97537: LIST
97538: LIST
97539: PUSH
97540: EMPTY
97541: LIST
97542: LIST
97543: PUSH
97544: EMPTY
97545: LIST
97546: LIST
97547: LIST
97548: PPUSH
97549: CALL_OW 69
97553: ST_TO_ADDR
// if not tmp then
97554: LD_VAR 0 2
97558: NOT
97559: IFFALSE 97563
// exit ;
97561: GO 97612
// for i in tmp do
97563: LD_ADDR_VAR 0 1
97567: PUSH
97568: LD_VAR 0 2
97572: PUSH
97573: FOR_IN
97574: IFFALSE 97610
// begin if Crawls ( i ) then
97576: LD_VAR 0 1
97580: PPUSH
97581: CALL_OW 318
97585: IFFALSE 97596
// ComWalk ( i ) ;
97587: LD_VAR 0 1
97591: PPUSH
97592: CALL_OW 138
// SetClass ( i , 2 ) ;
97596: LD_VAR 0 1
97600: PPUSH
97601: LD_INT 2
97603: PPUSH
97604: CALL_OW 336
// end ;
97608: GO 97573
97610: POP
97611: POP
// end ;
97612: PPOPN 2
97614: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
97615: LD_EXP 130
97619: PUSH
97620: LD_EXP 183
97624: AND
97625: IFFALSE 97906
97627: GO 97629
97629: DISABLE
97630: LD_INT 0
97632: PPUSH
97633: PPUSH
97634: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
97635: LD_OWVAR 2
97639: PPUSH
97640: LD_INT 9
97642: PPUSH
97643: LD_INT 1
97645: PPUSH
97646: LD_INT 1
97648: PPUSH
97649: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
97653: LD_INT 9
97655: PPUSH
97656: LD_OWVAR 2
97660: PPUSH
97661: CALL_OW 343
// uc_side := 9 ;
97665: LD_ADDR_OWVAR 20
97669: PUSH
97670: LD_INT 9
97672: ST_TO_ADDR
// uc_nation := 2 ;
97673: LD_ADDR_OWVAR 21
97677: PUSH
97678: LD_INT 2
97680: ST_TO_ADDR
// hc_name := Dark Warrior ;
97681: LD_ADDR_OWVAR 26
97685: PUSH
97686: LD_STRING Dark Warrior
97688: ST_TO_ADDR
// hc_gallery :=  ;
97689: LD_ADDR_OWVAR 33
97693: PUSH
97694: LD_STRING 
97696: ST_TO_ADDR
// hc_noskilllimit := true ;
97697: LD_ADDR_OWVAR 76
97701: PUSH
97702: LD_INT 1
97704: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
97705: LD_ADDR_OWVAR 31
97709: PUSH
97710: LD_INT 30
97712: PUSH
97713: LD_INT 30
97715: PUSH
97716: LD_INT 30
97718: PUSH
97719: LD_INT 30
97721: PUSH
97722: EMPTY
97723: LIST
97724: LIST
97725: LIST
97726: LIST
97727: ST_TO_ADDR
// un := CreateHuman ;
97728: LD_ADDR_VAR 0 3
97732: PUSH
97733: CALL_OW 44
97737: ST_TO_ADDR
// hc_noskilllimit := false ;
97738: LD_ADDR_OWVAR 76
97742: PUSH
97743: LD_INT 0
97745: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
97746: LD_VAR 0 3
97750: PPUSH
97751: LD_INT 1
97753: PPUSH
97754: CALL_OW 51
// p := 0 ;
97758: LD_ADDR_VAR 0 2
97762: PUSH
97763: LD_INT 0
97765: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
97766: LD_INT 35
97768: PPUSH
97769: CALL_OW 67
// p := p + 1 ;
97773: LD_ADDR_VAR 0 2
97777: PUSH
97778: LD_VAR 0 2
97782: PUSH
97783: LD_INT 1
97785: PLUS
97786: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
97787: LD_VAR 0 3
97791: PPUSH
97792: CALL_OW 256
97796: PUSH
97797: LD_INT 1000
97799: LESS
97800: IFFALSE 97814
// SetLives ( un , 1000 ) ;
97802: LD_VAR 0 3
97806: PPUSH
97807: LD_INT 1000
97809: PPUSH
97810: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
97814: LD_VAR 0 3
97818: PPUSH
97819: LD_INT 81
97821: PUSH
97822: LD_OWVAR 2
97826: PUSH
97827: EMPTY
97828: LIST
97829: LIST
97830: PUSH
97831: LD_INT 91
97833: PUSH
97834: LD_VAR 0 3
97838: PUSH
97839: LD_INT 30
97841: PUSH
97842: EMPTY
97843: LIST
97844: LIST
97845: LIST
97846: PUSH
97847: EMPTY
97848: LIST
97849: LIST
97850: PPUSH
97851: CALL_OW 69
97855: PPUSH
97856: LD_VAR 0 3
97860: PPUSH
97861: CALL_OW 74
97865: PPUSH
97866: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
97870: LD_VAR 0 2
97874: PUSH
97875: LD_INT 60
97877: GREATER
97878: PUSH
97879: LD_VAR 0 3
97883: PPUSH
97884: CALL_OW 301
97888: OR
97889: IFFALSE 97766
// if un then
97891: LD_VAR 0 3
97895: IFFALSE 97906
// RemoveUnit ( un ) ;
97897: LD_VAR 0 3
97901: PPUSH
97902: CALL_OW 64
// end ; end_of_file
97906: PPOPN 3
97908: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
97909: LD_INT 0
97911: PPUSH
97912: PPUSH
97913: PPUSH
97914: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
97915: LD_VAR 0 1
97919: PPUSH
97920: CALL_OW 264
97924: PUSH
97925: LD_EXP 76
97929: EQUAL
97930: IFFALSE 98002
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
97932: LD_INT 68
97934: PPUSH
97935: LD_VAR 0 1
97939: PPUSH
97940: CALL_OW 255
97944: PPUSH
97945: CALL_OW 321
97949: PUSH
97950: LD_INT 2
97952: EQUAL
97953: IFFALSE 97965
// eff := 70 else
97955: LD_ADDR_VAR 0 4
97959: PUSH
97960: LD_INT 70
97962: ST_TO_ADDR
97963: GO 97973
// eff := 30 ;
97965: LD_ADDR_VAR 0 4
97969: PUSH
97970: LD_INT 30
97972: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
97973: LD_VAR 0 1
97977: PPUSH
97978: CALL_OW 250
97982: PPUSH
97983: LD_VAR 0 1
97987: PPUSH
97988: CALL_OW 251
97992: PPUSH
97993: LD_VAR 0 4
97997: PPUSH
97998: CALL_OW 495
// end ; end ;
98002: LD_VAR 0 2
98006: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
98007: LD_INT 0
98009: PPUSH
// end ;
98010: LD_VAR 0 4
98014: RET
// export function SOS_Command ( cmd ) ; begin
98015: LD_INT 0
98017: PPUSH
// end ;
98018: LD_VAR 0 2
98022: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
98023: LD_VAR 0 1
98027: PUSH
98028: LD_INT 255
98030: EQUAL
98031: PUSH
98032: LD_VAR 0 2
98036: PPUSH
98037: CALL_OW 264
98041: PUSH
98042: LD_INT 14
98044: PUSH
98045: LD_INT 53
98047: PUSH
98048: EMPTY
98049: LIST
98050: LIST
98051: IN
98052: AND
98053: PUSH
98054: LD_VAR 0 4
98058: PPUSH
98059: LD_VAR 0 5
98063: PPUSH
98064: CALL_OW 488
98068: AND
98069: IFFALSE 98093
// CutTreeXYR ( unit , x , y , 12 ) ;
98071: LD_VAR 0 2
98075: PPUSH
98076: LD_VAR 0 4
98080: PPUSH
98081: LD_VAR 0 5
98085: PPUSH
98086: LD_INT 12
98088: PPUSH
98089: CALL 98096 0 4
// end ;
98093: PPOPN 5
98095: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
98096: LD_INT 0
98098: PPUSH
98099: PPUSH
98100: PPUSH
98101: PPUSH
98102: PPUSH
98103: PPUSH
98104: PPUSH
98105: PPUSH
98106: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
98107: LD_VAR 0 1
98111: NOT
98112: PUSH
98113: LD_VAR 0 2
98117: PPUSH
98118: LD_VAR 0 3
98122: PPUSH
98123: CALL_OW 488
98127: NOT
98128: OR
98129: PUSH
98130: LD_VAR 0 4
98134: NOT
98135: OR
98136: IFFALSE 98140
// exit ;
98138: GO 98480
// list := [ ] ;
98140: LD_ADDR_VAR 0 13
98144: PUSH
98145: EMPTY
98146: ST_TO_ADDR
// if x - r < 0 then
98147: LD_VAR 0 2
98151: PUSH
98152: LD_VAR 0 4
98156: MINUS
98157: PUSH
98158: LD_INT 0
98160: LESS
98161: IFFALSE 98173
// min_x := 0 else
98163: LD_ADDR_VAR 0 7
98167: PUSH
98168: LD_INT 0
98170: ST_TO_ADDR
98171: GO 98189
// min_x := x - r ;
98173: LD_ADDR_VAR 0 7
98177: PUSH
98178: LD_VAR 0 2
98182: PUSH
98183: LD_VAR 0 4
98187: MINUS
98188: ST_TO_ADDR
// if y - r < 0 then
98189: LD_VAR 0 3
98193: PUSH
98194: LD_VAR 0 4
98198: MINUS
98199: PUSH
98200: LD_INT 0
98202: LESS
98203: IFFALSE 98215
// min_y := 0 else
98205: LD_ADDR_VAR 0 8
98209: PUSH
98210: LD_INT 0
98212: ST_TO_ADDR
98213: GO 98231
// min_y := y - r ;
98215: LD_ADDR_VAR 0 8
98219: PUSH
98220: LD_VAR 0 3
98224: PUSH
98225: LD_VAR 0 4
98229: MINUS
98230: ST_TO_ADDR
// max_x := x + r ;
98231: LD_ADDR_VAR 0 9
98235: PUSH
98236: LD_VAR 0 2
98240: PUSH
98241: LD_VAR 0 4
98245: PLUS
98246: ST_TO_ADDR
// max_y := y + r ;
98247: LD_ADDR_VAR 0 10
98251: PUSH
98252: LD_VAR 0 3
98256: PUSH
98257: LD_VAR 0 4
98261: PLUS
98262: ST_TO_ADDR
// for _x = min_x to max_x do
98263: LD_ADDR_VAR 0 11
98267: PUSH
98268: DOUBLE
98269: LD_VAR 0 7
98273: DEC
98274: ST_TO_ADDR
98275: LD_VAR 0 9
98279: PUSH
98280: FOR_TO
98281: IFFALSE 98398
// for _y = min_y to max_y do
98283: LD_ADDR_VAR 0 12
98287: PUSH
98288: DOUBLE
98289: LD_VAR 0 8
98293: DEC
98294: ST_TO_ADDR
98295: LD_VAR 0 10
98299: PUSH
98300: FOR_TO
98301: IFFALSE 98394
// begin if not ValidHex ( _x , _y ) then
98303: LD_VAR 0 11
98307: PPUSH
98308: LD_VAR 0 12
98312: PPUSH
98313: CALL_OW 488
98317: NOT
98318: IFFALSE 98322
// continue ;
98320: GO 98300
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
98322: LD_VAR 0 11
98326: PPUSH
98327: LD_VAR 0 12
98331: PPUSH
98332: CALL_OW 351
98336: PUSH
98337: LD_VAR 0 11
98341: PPUSH
98342: LD_VAR 0 12
98346: PPUSH
98347: CALL_OW 554
98351: AND
98352: IFFALSE 98392
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
98354: LD_ADDR_VAR 0 13
98358: PUSH
98359: LD_VAR 0 13
98363: PPUSH
98364: LD_VAR 0 13
98368: PUSH
98369: LD_INT 1
98371: PLUS
98372: PPUSH
98373: LD_VAR 0 11
98377: PUSH
98378: LD_VAR 0 12
98382: PUSH
98383: EMPTY
98384: LIST
98385: LIST
98386: PPUSH
98387: CALL_OW 2
98391: ST_TO_ADDR
// end ;
98392: GO 98300
98394: POP
98395: POP
98396: GO 98280
98398: POP
98399: POP
// if not list then
98400: LD_VAR 0 13
98404: NOT
98405: IFFALSE 98409
// exit ;
98407: GO 98480
// for i in list do
98409: LD_ADDR_VAR 0 6
98413: PUSH
98414: LD_VAR 0 13
98418: PUSH
98419: FOR_IN
98420: IFFALSE 98478
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
98422: LD_VAR 0 1
98426: PPUSH
98427: LD_STRING M
98429: PUSH
98430: LD_VAR 0 6
98434: PUSH
98435: LD_INT 1
98437: ARRAY
98438: PUSH
98439: LD_VAR 0 6
98443: PUSH
98444: LD_INT 2
98446: ARRAY
98447: PUSH
98448: LD_INT 0
98450: PUSH
98451: LD_INT 0
98453: PUSH
98454: LD_INT 0
98456: PUSH
98457: LD_INT 0
98459: PUSH
98460: EMPTY
98461: LIST
98462: LIST
98463: LIST
98464: LIST
98465: LIST
98466: LIST
98467: LIST
98468: PUSH
98469: EMPTY
98470: LIST
98471: PPUSH
98472: CALL_OW 447
98476: GO 98419
98478: POP
98479: POP
// end ; end_of_file
98480: LD_VAR 0 5
98484: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
98485: LD_INT 0
98487: PPUSH
98488: PPUSH
98489: PPUSH
98490: PPUSH
98491: PPUSH
98492: PPUSH
98493: PPUSH
98494: PPUSH
98495: PPUSH
98496: PPUSH
98497: PPUSH
98498: PPUSH
98499: PPUSH
98500: PPUSH
98501: PPUSH
98502: PPUSH
98503: PPUSH
98504: PPUSH
98505: PPUSH
98506: PPUSH
98507: PPUSH
98508: PPUSH
98509: PPUSH
98510: PPUSH
98511: PPUSH
98512: PPUSH
98513: PPUSH
98514: PPUSH
98515: PPUSH
98516: PPUSH
98517: PPUSH
98518: PPUSH
98519: PPUSH
98520: PPUSH
// if not list then
98521: LD_VAR 0 1
98525: NOT
98526: IFFALSE 98530
// exit ;
98528: GO 103189
// base := list [ 1 ] ;
98530: LD_ADDR_VAR 0 3
98534: PUSH
98535: LD_VAR 0 1
98539: PUSH
98540: LD_INT 1
98542: ARRAY
98543: ST_TO_ADDR
// group := list [ 2 ] ;
98544: LD_ADDR_VAR 0 4
98548: PUSH
98549: LD_VAR 0 1
98553: PUSH
98554: LD_INT 2
98556: ARRAY
98557: ST_TO_ADDR
// path := list [ 3 ] ;
98558: LD_ADDR_VAR 0 5
98562: PUSH
98563: LD_VAR 0 1
98567: PUSH
98568: LD_INT 3
98570: ARRAY
98571: ST_TO_ADDR
// flags := list [ 4 ] ;
98572: LD_ADDR_VAR 0 6
98576: PUSH
98577: LD_VAR 0 1
98581: PUSH
98582: LD_INT 4
98584: ARRAY
98585: ST_TO_ADDR
// mined := [ ] ;
98586: LD_ADDR_VAR 0 27
98590: PUSH
98591: EMPTY
98592: ST_TO_ADDR
// bombed := [ ] ;
98593: LD_ADDR_VAR 0 28
98597: PUSH
98598: EMPTY
98599: ST_TO_ADDR
// healers := [ ] ;
98600: LD_ADDR_VAR 0 31
98604: PUSH
98605: EMPTY
98606: ST_TO_ADDR
// to_heal := [ ] ;
98607: LD_ADDR_VAR 0 30
98611: PUSH
98612: EMPTY
98613: ST_TO_ADDR
// repairs := [ ] ;
98614: LD_ADDR_VAR 0 33
98618: PUSH
98619: EMPTY
98620: ST_TO_ADDR
// to_repair := [ ] ;
98621: LD_ADDR_VAR 0 32
98625: PUSH
98626: EMPTY
98627: ST_TO_ADDR
// if not group or not path then
98628: LD_VAR 0 4
98632: NOT
98633: PUSH
98634: LD_VAR 0 5
98638: NOT
98639: OR
98640: IFFALSE 98644
// exit ;
98642: GO 103189
// side := GetSide ( group [ 1 ] ) ;
98644: LD_ADDR_VAR 0 35
98648: PUSH
98649: LD_VAR 0 4
98653: PUSH
98654: LD_INT 1
98656: ARRAY
98657: PPUSH
98658: CALL_OW 255
98662: ST_TO_ADDR
// if flags then
98663: LD_VAR 0 6
98667: IFFALSE 98811
// begin f_ignore_area := flags [ 1 ] ;
98669: LD_ADDR_VAR 0 17
98673: PUSH
98674: LD_VAR 0 6
98678: PUSH
98679: LD_INT 1
98681: ARRAY
98682: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
98683: LD_ADDR_VAR 0 18
98687: PUSH
98688: LD_VAR 0 6
98692: PUSH
98693: LD_INT 2
98695: ARRAY
98696: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
98697: LD_ADDR_VAR 0 19
98701: PUSH
98702: LD_VAR 0 6
98706: PUSH
98707: LD_INT 3
98709: ARRAY
98710: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
98711: LD_ADDR_VAR 0 20
98715: PUSH
98716: LD_VAR 0 6
98720: PUSH
98721: LD_INT 4
98723: ARRAY
98724: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
98725: LD_ADDR_VAR 0 21
98729: PUSH
98730: LD_VAR 0 6
98734: PUSH
98735: LD_INT 5
98737: ARRAY
98738: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
98739: LD_ADDR_VAR 0 22
98743: PUSH
98744: LD_VAR 0 6
98748: PUSH
98749: LD_INT 6
98751: ARRAY
98752: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
98753: LD_ADDR_VAR 0 23
98757: PUSH
98758: LD_VAR 0 6
98762: PUSH
98763: LD_INT 7
98765: ARRAY
98766: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
98767: LD_ADDR_VAR 0 24
98771: PUSH
98772: LD_VAR 0 6
98776: PUSH
98777: LD_INT 8
98779: ARRAY
98780: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
98781: LD_ADDR_VAR 0 25
98785: PUSH
98786: LD_VAR 0 6
98790: PUSH
98791: LD_INT 9
98793: ARRAY
98794: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
98795: LD_ADDR_VAR 0 26
98799: PUSH
98800: LD_VAR 0 6
98804: PUSH
98805: LD_INT 10
98807: ARRAY
98808: ST_TO_ADDR
// end else
98809: GO 98891
// begin f_ignore_area := false ;
98811: LD_ADDR_VAR 0 17
98815: PUSH
98816: LD_INT 0
98818: ST_TO_ADDR
// f_capture := false ;
98819: LD_ADDR_VAR 0 18
98823: PUSH
98824: LD_INT 0
98826: ST_TO_ADDR
// f_ignore_civ := false ;
98827: LD_ADDR_VAR 0 19
98831: PUSH
98832: LD_INT 0
98834: ST_TO_ADDR
// f_murder := false ;
98835: LD_ADDR_VAR 0 20
98839: PUSH
98840: LD_INT 0
98842: ST_TO_ADDR
// f_mines := false ;
98843: LD_ADDR_VAR 0 21
98847: PUSH
98848: LD_INT 0
98850: ST_TO_ADDR
// f_repair := false ;
98851: LD_ADDR_VAR 0 22
98855: PUSH
98856: LD_INT 0
98858: ST_TO_ADDR
// f_heal := false ;
98859: LD_ADDR_VAR 0 23
98863: PUSH
98864: LD_INT 0
98866: ST_TO_ADDR
// f_spacetime := false ;
98867: LD_ADDR_VAR 0 24
98871: PUSH
98872: LD_INT 0
98874: ST_TO_ADDR
// f_attack_depot := false ;
98875: LD_ADDR_VAR 0 25
98879: PUSH
98880: LD_INT 0
98882: ST_TO_ADDR
// f_crawl := false ;
98883: LD_ADDR_VAR 0 26
98887: PUSH
98888: LD_INT 0
98890: ST_TO_ADDR
// end ; if f_heal then
98891: LD_VAR 0 23
98895: IFFALSE 98922
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
98897: LD_ADDR_VAR 0 31
98901: PUSH
98902: LD_VAR 0 4
98906: PPUSH
98907: LD_INT 25
98909: PUSH
98910: LD_INT 4
98912: PUSH
98913: EMPTY
98914: LIST
98915: LIST
98916: PPUSH
98917: CALL_OW 72
98921: ST_TO_ADDR
// if f_repair then
98922: LD_VAR 0 22
98926: IFFALSE 98953
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
98928: LD_ADDR_VAR 0 33
98932: PUSH
98933: LD_VAR 0 4
98937: PPUSH
98938: LD_INT 25
98940: PUSH
98941: LD_INT 3
98943: PUSH
98944: EMPTY
98945: LIST
98946: LIST
98947: PPUSH
98948: CALL_OW 72
98952: ST_TO_ADDR
// units_path := [ ] ;
98953: LD_ADDR_VAR 0 16
98957: PUSH
98958: EMPTY
98959: ST_TO_ADDR
// for i = 1 to group do
98960: LD_ADDR_VAR 0 7
98964: PUSH
98965: DOUBLE
98966: LD_INT 1
98968: DEC
98969: ST_TO_ADDR
98970: LD_VAR 0 4
98974: PUSH
98975: FOR_TO
98976: IFFALSE 99005
// units_path := Replace ( units_path , i , path ) ;
98978: LD_ADDR_VAR 0 16
98982: PUSH
98983: LD_VAR 0 16
98987: PPUSH
98988: LD_VAR 0 7
98992: PPUSH
98993: LD_VAR 0 5
98997: PPUSH
98998: CALL_OW 1
99002: ST_TO_ADDR
99003: GO 98975
99005: POP
99006: POP
// repeat for i = group downto 1 do
99007: LD_ADDR_VAR 0 7
99011: PUSH
99012: DOUBLE
99013: LD_VAR 0 4
99017: INC
99018: ST_TO_ADDR
99019: LD_INT 1
99021: PUSH
99022: FOR_DOWNTO
99023: IFFALSE 103145
// begin wait ( 5 ) ;
99025: LD_INT 5
99027: PPUSH
99028: CALL_OW 67
// tmp := [ ] ;
99032: LD_ADDR_VAR 0 14
99036: PUSH
99037: EMPTY
99038: ST_TO_ADDR
// attacking := false ;
99039: LD_ADDR_VAR 0 29
99043: PUSH
99044: LD_INT 0
99046: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
99047: LD_VAR 0 4
99051: PUSH
99052: LD_VAR 0 7
99056: ARRAY
99057: PPUSH
99058: CALL_OW 301
99062: PUSH
99063: LD_VAR 0 4
99067: PUSH
99068: LD_VAR 0 7
99072: ARRAY
99073: NOT
99074: OR
99075: IFFALSE 99184
// begin if GetType ( group [ i ] ) = unit_human then
99077: LD_VAR 0 4
99081: PUSH
99082: LD_VAR 0 7
99086: ARRAY
99087: PPUSH
99088: CALL_OW 247
99092: PUSH
99093: LD_INT 1
99095: EQUAL
99096: IFFALSE 99142
// begin to_heal := to_heal diff group [ i ] ;
99098: LD_ADDR_VAR 0 30
99102: PUSH
99103: LD_VAR 0 30
99107: PUSH
99108: LD_VAR 0 4
99112: PUSH
99113: LD_VAR 0 7
99117: ARRAY
99118: DIFF
99119: ST_TO_ADDR
// healers := healers diff group [ i ] ;
99120: LD_ADDR_VAR 0 31
99124: PUSH
99125: LD_VAR 0 31
99129: PUSH
99130: LD_VAR 0 4
99134: PUSH
99135: LD_VAR 0 7
99139: ARRAY
99140: DIFF
99141: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
99142: LD_ADDR_VAR 0 4
99146: PUSH
99147: LD_VAR 0 4
99151: PPUSH
99152: LD_VAR 0 7
99156: PPUSH
99157: CALL_OW 3
99161: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
99162: LD_ADDR_VAR 0 16
99166: PUSH
99167: LD_VAR 0 16
99171: PPUSH
99172: LD_VAR 0 7
99176: PPUSH
99177: CALL_OW 3
99181: ST_TO_ADDR
// continue ;
99182: GO 99022
// end ; if f_repair then
99184: LD_VAR 0 22
99188: IFFALSE 99677
// begin if GetType ( group [ i ] ) = unit_vehicle then
99190: LD_VAR 0 4
99194: PUSH
99195: LD_VAR 0 7
99199: ARRAY
99200: PPUSH
99201: CALL_OW 247
99205: PUSH
99206: LD_INT 2
99208: EQUAL
99209: IFFALSE 99399
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
99211: LD_VAR 0 4
99215: PUSH
99216: LD_VAR 0 7
99220: ARRAY
99221: PPUSH
99222: CALL_OW 256
99226: PUSH
99227: LD_INT 700
99229: LESS
99230: PUSH
99231: LD_VAR 0 4
99235: PUSH
99236: LD_VAR 0 7
99240: ARRAY
99241: PUSH
99242: LD_VAR 0 32
99246: IN
99247: NOT
99248: AND
99249: IFFALSE 99273
// to_repair := to_repair union group [ i ] ;
99251: LD_ADDR_VAR 0 32
99255: PUSH
99256: LD_VAR 0 32
99260: PUSH
99261: LD_VAR 0 4
99265: PUSH
99266: LD_VAR 0 7
99270: ARRAY
99271: UNION
99272: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
99273: LD_VAR 0 4
99277: PUSH
99278: LD_VAR 0 7
99282: ARRAY
99283: PPUSH
99284: CALL_OW 256
99288: PUSH
99289: LD_INT 1000
99291: EQUAL
99292: PUSH
99293: LD_VAR 0 4
99297: PUSH
99298: LD_VAR 0 7
99302: ARRAY
99303: PUSH
99304: LD_VAR 0 32
99308: IN
99309: AND
99310: IFFALSE 99334
// to_repair := to_repair diff group [ i ] ;
99312: LD_ADDR_VAR 0 32
99316: PUSH
99317: LD_VAR 0 32
99321: PUSH
99322: LD_VAR 0 4
99326: PUSH
99327: LD_VAR 0 7
99331: ARRAY
99332: DIFF
99333: ST_TO_ADDR
// if group [ i ] in to_repair then
99334: LD_VAR 0 4
99338: PUSH
99339: LD_VAR 0 7
99343: ARRAY
99344: PUSH
99345: LD_VAR 0 32
99349: IN
99350: IFFALSE 99397
// begin if not IsInArea ( group [ i ] , f_repair ) then
99352: LD_VAR 0 4
99356: PUSH
99357: LD_VAR 0 7
99361: ARRAY
99362: PPUSH
99363: LD_VAR 0 22
99367: PPUSH
99368: CALL_OW 308
99372: NOT
99373: IFFALSE 99395
// ComMoveToArea ( group [ i ] , f_repair ) ;
99375: LD_VAR 0 4
99379: PUSH
99380: LD_VAR 0 7
99384: ARRAY
99385: PPUSH
99386: LD_VAR 0 22
99390: PPUSH
99391: CALL_OW 113
// continue ;
99395: GO 99022
// end ; end else
99397: GO 99677
// if group [ i ] in repairs then
99399: LD_VAR 0 4
99403: PUSH
99404: LD_VAR 0 7
99408: ARRAY
99409: PUSH
99410: LD_VAR 0 33
99414: IN
99415: IFFALSE 99677
// begin if IsInUnit ( group [ i ] ) then
99417: LD_VAR 0 4
99421: PUSH
99422: LD_VAR 0 7
99426: ARRAY
99427: PPUSH
99428: CALL_OW 310
99432: IFFALSE 99500
// begin z := IsInUnit ( group [ i ] ) ;
99434: LD_ADDR_VAR 0 13
99438: PUSH
99439: LD_VAR 0 4
99443: PUSH
99444: LD_VAR 0 7
99448: ARRAY
99449: PPUSH
99450: CALL_OW 310
99454: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
99455: LD_VAR 0 13
99459: PUSH
99460: LD_VAR 0 32
99464: IN
99465: PUSH
99466: LD_VAR 0 13
99470: PPUSH
99471: LD_VAR 0 22
99475: PPUSH
99476: CALL_OW 308
99480: AND
99481: IFFALSE 99498
// ComExitVehicle ( group [ i ] ) ;
99483: LD_VAR 0 4
99487: PUSH
99488: LD_VAR 0 7
99492: ARRAY
99493: PPUSH
99494: CALL_OW 121
// end else
99498: GO 99677
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
99500: LD_ADDR_VAR 0 13
99504: PUSH
99505: LD_VAR 0 4
99509: PPUSH
99510: LD_INT 95
99512: PUSH
99513: LD_VAR 0 22
99517: PUSH
99518: EMPTY
99519: LIST
99520: LIST
99521: PUSH
99522: LD_INT 58
99524: PUSH
99525: EMPTY
99526: LIST
99527: PUSH
99528: EMPTY
99529: LIST
99530: LIST
99531: PPUSH
99532: CALL_OW 72
99536: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
99537: LD_VAR 0 4
99541: PUSH
99542: LD_VAR 0 7
99546: ARRAY
99547: PPUSH
99548: CALL_OW 314
99552: NOT
99553: IFFALSE 99675
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
99555: LD_ADDR_VAR 0 10
99559: PUSH
99560: LD_VAR 0 13
99564: PPUSH
99565: LD_VAR 0 4
99569: PUSH
99570: LD_VAR 0 7
99574: ARRAY
99575: PPUSH
99576: CALL_OW 74
99580: ST_TO_ADDR
// if not x then
99581: LD_VAR 0 10
99585: NOT
99586: IFFALSE 99590
// continue ;
99588: GO 99022
// if GetLives ( x ) < 1000 then
99590: LD_VAR 0 10
99594: PPUSH
99595: CALL_OW 256
99599: PUSH
99600: LD_INT 1000
99602: LESS
99603: IFFALSE 99627
// ComRepairVehicle ( group [ i ] , x ) else
99605: LD_VAR 0 4
99609: PUSH
99610: LD_VAR 0 7
99614: ARRAY
99615: PPUSH
99616: LD_VAR 0 10
99620: PPUSH
99621: CALL_OW 129
99625: GO 99675
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
99627: LD_VAR 0 23
99631: PUSH
99632: LD_VAR 0 4
99636: PUSH
99637: LD_VAR 0 7
99641: ARRAY
99642: PPUSH
99643: CALL_OW 256
99647: PUSH
99648: LD_INT 1000
99650: LESS
99651: AND
99652: NOT
99653: IFFALSE 99675
// ComEnterUnit ( group [ i ] , x ) ;
99655: LD_VAR 0 4
99659: PUSH
99660: LD_VAR 0 7
99664: ARRAY
99665: PPUSH
99666: LD_VAR 0 10
99670: PPUSH
99671: CALL_OW 120
// end ; continue ;
99675: GO 99022
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
99677: LD_VAR 0 23
99681: PUSH
99682: LD_VAR 0 4
99686: PUSH
99687: LD_VAR 0 7
99691: ARRAY
99692: PPUSH
99693: CALL_OW 247
99697: PUSH
99698: LD_INT 1
99700: EQUAL
99701: AND
99702: IFFALSE 100180
// begin if group [ i ] in healers then
99704: LD_VAR 0 4
99708: PUSH
99709: LD_VAR 0 7
99713: ARRAY
99714: PUSH
99715: LD_VAR 0 31
99719: IN
99720: IFFALSE 99993
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
99722: LD_VAR 0 4
99726: PUSH
99727: LD_VAR 0 7
99731: ARRAY
99732: PPUSH
99733: LD_VAR 0 23
99737: PPUSH
99738: CALL_OW 308
99742: NOT
99743: PUSH
99744: LD_VAR 0 4
99748: PUSH
99749: LD_VAR 0 7
99753: ARRAY
99754: PPUSH
99755: CALL_OW 314
99759: NOT
99760: AND
99761: IFFALSE 99785
// ComMoveToArea ( group [ i ] , f_heal ) else
99763: LD_VAR 0 4
99767: PUSH
99768: LD_VAR 0 7
99772: ARRAY
99773: PPUSH
99774: LD_VAR 0 23
99778: PPUSH
99779: CALL_OW 113
99783: GO 99991
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
99785: LD_VAR 0 4
99789: PUSH
99790: LD_VAR 0 7
99794: ARRAY
99795: PPUSH
99796: CALL 83961 0 1
99800: PPUSH
99801: CALL_OW 256
99805: PUSH
99806: LD_INT 1000
99808: EQUAL
99809: IFFALSE 99828
// ComStop ( group [ i ] ) else
99811: LD_VAR 0 4
99815: PUSH
99816: LD_VAR 0 7
99820: ARRAY
99821: PPUSH
99822: CALL_OW 141
99826: GO 99991
// if not HasTask ( group [ i ] ) and to_heal then
99828: LD_VAR 0 4
99832: PUSH
99833: LD_VAR 0 7
99837: ARRAY
99838: PPUSH
99839: CALL_OW 314
99843: NOT
99844: PUSH
99845: LD_VAR 0 30
99849: AND
99850: IFFALSE 99991
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
99852: LD_ADDR_VAR 0 13
99856: PUSH
99857: LD_VAR 0 30
99861: PPUSH
99862: LD_INT 3
99864: PUSH
99865: LD_INT 54
99867: PUSH
99868: EMPTY
99869: LIST
99870: PUSH
99871: EMPTY
99872: LIST
99873: LIST
99874: PPUSH
99875: CALL_OW 72
99879: PPUSH
99880: LD_VAR 0 4
99884: PUSH
99885: LD_VAR 0 7
99889: ARRAY
99890: PPUSH
99891: CALL_OW 74
99895: ST_TO_ADDR
// if z then
99896: LD_VAR 0 13
99900: IFFALSE 99991
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
99902: LD_INT 91
99904: PUSH
99905: LD_VAR 0 13
99909: PUSH
99910: LD_INT 10
99912: PUSH
99913: EMPTY
99914: LIST
99915: LIST
99916: LIST
99917: PUSH
99918: LD_INT 81
99920: PUSH
99921: LD_VAR 0 13
99925: PPUSH
99926: CALL_OW 255
99930: PUSH
99931: EMPTY
99932: LIST
99933: LIST
99934: PUSH
99935: EMPTY
99936: LIST
99937: LIST
99938: PPUSH
99939: CALL_OW 69
99943: PUSH
99944: LD_INT 0
99946: EQUAL
99947: IFFALSE 99971
// ComHeal ( group [ i ] , z ) else
99949: LD_VAR 0 4
99953: PUSH
99954: LD_VAR 0 7
99958: ARRAY
99959: PPUSH
99960: LD_VAR 0 13
99964: PPUSH
99965: CALL_OW 128
99969: GO 99991
// ComMoveToArea ( group [ i ] , f_heal ) ;
99971: LD_VAR 0 4
99975: PUSH
99976: LD_VAR 0 7
99980: ARRAY
99981: PPUSH
99982: LD_VAR 0 23
99986: PPUSH
99987: CALL_OW 113
// end ; continue ;
99991: GO 99022
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
99993: LD_VAR 0 4
99997: PUSH
99998: LD_VAR 0 7
100002: ARRAY
100003: PPUSH
100004: CALL_OW 256
100008: PUSH
100009: LD_INT 700
100011: LESS
100012: PUSH
100013: LD_VAR 0 4
100017: PUSH
100018: LD_VAR 0 7
100022: ARRAY
100023: PUSH
100024: LD_VAR 0 30
100028: IN
100029: NOT
100030: AND
100031: IFFALSE 100055
// to_heal := to_heal union group [ i ] ;
100033: LD_ADDR_VAR 0 30
100037: PUSH
100038: LD_VAR 0 30
100042: PUSH
100043: LD_VAR 0 4
100047: PUSH
100048: LD_VAR 0 7
100052: ARRAY
100053: UNION
100054: ST_TO_ADDR
// if group [ i ] in to_heal then
100055: LD_VAR 0 4
100059: PUSH
100060: LD_VAR 0 7
100064: ARRAY
100065: PUSH
100066: LD_VAR 0 30
100070: IN
100071: IFFALSE 100180
// begin if GetLives ( group [ i ] ) = 1000 then
100073: LD_VAR 0 4
100077: PUSH
100078: LD_VAR 0 7
100082: ARRAY
100083: PPUSH
100084: CALL_OW 256
100088: PUSH
100089: LD_INT 1000
100091: EQUAL
100092: IFFALSE 100118
// to_heal := to_heal diff group [ i ] else
100094: LD_ADDR_VAR 0 30
100098: PUSH
100099: LD_VAR 0 30
100103: PUSH
100104: LD_VAR 0 4
100108: PUSH
100109: LD_VAR 0 7
100113: ARRAY
100114: DIFF
100115: ST_TO_ADDR
100116: GO 100180
// begin if not IsInArea ( group [ i ] , to_heal ) then
100118: LD_VAR 0 4
100122: PUSH
100123: LD_VAR 0 7
100127: ARRAY
100128: PPUSH
100129: LD_VAR 0 30
100133: PPUSH
100134: CALL_OW 308
100138: NOT
100139: IFFALSE 100163
// ComMoveToArea ( group [ i ] , f_heal ) else
100141: LD_VAR 0 4
100145: PUSH
100146: LD_VAR 0 7
100150: ARRAY
100151: PPUSH
100152: LD_VAR 0 23
100156: PPUSH
100157: CALL_OW 113
100161: GO 100178
// ComHold ( group [ i ] ) ;
100163: LD_VAR 0 4
100167: PUSH
100168: LD_VAR 0 7
100172: ARRAY
100173: PPUSH
100174: CALL_OW 140
// continue ;
100178: GO 99022
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
100180: LD_VAR 0 4
100184: PUSH
100185: LD_VAR 0 7
100189: ARRAY
100190: PPUSH
100191: LD_INT 10
100193: PPUSH
100194: CALL 82381 0 2
100198: NOT
100199: PUSH
100200: LD_VAR 0 16
100204: PUSH
100205: LD_VAR 0 7
100209: ARRAY
100210: PUSH
100211: EMPTY
100212: EQUAL
100213: NOT
100214: AND
100215: IFFALSE 100481
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
100217: LD_VAR 0 4
100221: PUSH
100222: LD_VAR 0 7
100226: ARRAY
100227: PPUSH
100228: CALL_OW 262
100232: PUSH
100233: LD_INT 1
100235: PUSH
100236: LD_INT 2
100238: PUSH
100239: EMPTY
100240: LIST
100241: LIST
100242: IN
100243: IFFALSE 100284
// if GetFuel ( group [ i ] ) < 10 then
100245: LD_VAR 0 4
100249: PUSH
100250: LD_VAR 0 7
100254: ARRAY
100255: PPUSH
100256: CALL_OW 261
100260: PUSH
100261: LD_INT 10
100263: LESS
100264: IFFALSE 100284
// SetFuel ( group [ i ] , 12 ) ;
100266: LD_VAR 0 4
100270: PUSH
100271: LD_VAR 0 7
100275: ARRAY
100276: PPUSH
100277: LD_INT 12
100279: PPUSH
100280: CALL_OW 240
// if units_path [ i ] then
100284: LD_VAR 0 16
100288: PUSH
100289: LD_VAR 0 7
100293: ARRAY
100294: IFFALSE 100479
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
100296: LD_VAR 0 4
100300: PUSH
100301: LD_VAR 0 7
100305: ARRAY
100306: PPUSH
100307: LD_VAR 0 16
100311: PUSH
100312: LD_VAR 0 7
100316: ARRAY
100317: PUSH
100318: LD_INT 1
100320: ARRAY
100321: PUSH
100322: LD_INT 1
100324: ARRAY
100325: PPUSH
100326: LD_VAR 0 16
100330: PUSH
100331: LD_VAR 0 7
100335: ARRAY
100336: PUSH
100337: LD_INT 1
100339: ARRAY
100340: PUSH
100341: LD_INT 2
100343: ARRAY
100344: PPUSH
100345: CALL_OW 297
100349: PUSH
100350: LD_INT 6
100352: GREATER
100353: IFFALSE 100428
// begin if not HasTask ( group [ i ] ) then
100355: LD_VAR 0 4
100359: PUSH
100360: LD_VAR 0 7
100364: ARRAY
100365: PPUSH
100366: CALL_OW 314
100370: NOT
100371: IFFALSE 100426
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
100373: LD_VAR 0 4
100377: PUSH
100378: LD_VAR 0 7
100382: ARRAY
100383: PPUSH
100384: LD_VAR 0 16
100388: PUSH
100389: LD_VAR 0 7
100393: ARRAY
100394: PUSH
100395: LD_INT 1
100397: ARRAY
100398: PUSH
100399: LD_INT 1
100401: ARRAY
100402: PPUSH
100403: LD_VAR 0 16
100407: PUSH
100408: LD_VAR 0 7
100412: ARRAY
100413: PUSH
100414: LD_INT 1
100416: ARRAY
100417: PUSH
100418: LD_INT 2
100420: ARRAY
100421: PPUSH
100422: CALL_OW 114
// end else
100426: GO 100479
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
100428: LD_ADDR_VAR 0 15
100432: PUSH
100433: LD_VAR 0 16
100437: PUSH
100438: LD_VAR 0 7
100442: ARRAY
100443: PPUSH
100444: LD_INT 1
100446: PPUSH
100447: CALL_OW 3
100451: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
100452: LD_ADDR_VAR 0 16
100456: PUSH
100457: LD_VAR 0 16
100461: PPUSH
100462: LD_VAR 0 7
100466: PPUSH
100467: LD_VAR 0 15
100471: PPUSH
100472: CALL_OW 1
100476: ST_TO_ADDR
// continue ;
100477: GO 99022
// end ; end ; end else
100479: GO 103143
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
100481: LD_ADDR_VAR 0 14
100485: PUSH
100486: LD_INT 81
100488: PUSH
100489: LD_VAR 0 4
100493: PUSH
100494: LD_VAR 0 7
100498: ARRAY
100499: PPUSH
100500: CALL_OW 255
100504: PUSH
100505: EMPTY
100506: LIST
100507: LIST
100508: PPUSH
100509: CALL_OW 69
100513: ST_TO_ADDR
// if not tmp then
100514: LD_VAR 0 14
100518: NOT
100519: IFFALSE 100523
// continue ;
100521: GO 99022
// if f_ignore_area then
100523: LD_VAR 0 17
100527: IFFALSE 100615
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
100529: LD_ADDR_VAR 0 15
100533: PUSH
100534: LD_VAR 0 14
100538: PPUSH
100539: LD_INT 3
100541: PUSH
100542: LD_INT 92
100544: PUSH
100545: LD_VAR 0 17
100549: PUSH
100550: LD_INT 1
100552: ARRAY
100553: PUSH
100554: LD_VAR 0 17
100558: PUSH
100559: LD_INT 2
100561: ARRAY
100562: PUSH
100563: LD_VAR 0 17
100567: PUSH
100568: LD_INT 3
100570: ARRAY
100571: PUSH
100572: EMPTY
100573: LIST
100574: LIST
100575: LIST
100576: LIST
100577: PUSH
100578: EMPTY
100579: LIST
100580: LIST
100581: PPUSH
100582: CALL_OW 72
100586: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
100587: LD_VAR 0 14
100591: PUSH
100592: LD_VAR 0 15
100596: DIFF
100597: IFFALSE 100615
// tmp := tmp diff tmp2 ;
100599: LD_ADDR_VAR 0 14
100603: PUSH
100604: LD_VAR 0 14
100608: PUSH
100609: LD_VAR 0 15
100613: DIFF
100614: ST_TO_ADDR
// end ; if not f_murder then
100615: LD_VAR 0 20
100619: NOT
100620: IFFALSE 100678
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
100622: LD_ADDR_VAR 0 15
100626: PUSH
100627: LD_VAR 0 14
100631: PPUSH
100632: LD_INT 3
100634: PUSH
100635: LD_INT 50
100637: PUSH
100638: EMPTY
100639: LIST
100640: PUSH
100641: EMPTY
100642: LIST
100643: LIST
100644: PPUSH
100645: CALL_OW 72
100649: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
100650: LD_VAR 0 14
100654: PUSH
100655: LD_VAR 0 15
100659: DIFF
100660: IFFALSE 100678
// tmp := tmp diff tmp2 ;
100662: LD_ADDR_VAR 0 14
100666: PUSH
100667: LD_VAR 0 14
100671: PUSH
100672: LD_VAR 0 15
100676: DIFF
100677: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
100678: LD_ADDR_VAR 0 14
100682: PUSH
100683: LD_VAR 0 4
100687: PUSH
100688: LD_VAR 0 7
100692: ARRAY
100693: PPUSH
100694: LD_VAR 0 14
100698: PPUSH
100699: LD_INT 1
100701: PPUSH
100702: LD_INT 1
100704: PPUSH
100705: CALL 56024 0 4
100709: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
100710: LD_VAR 0 4
100714: PUSH
100715: LD_VAR 0 7
100719: ARRAY
100720: PPUSH
100721: CALL_OW 257
100725: PUSH
100726: LD_INT 1
100728: EQUAL
100729: IFFALSE 101177
// begin if WantPlant ( group [ i ] ) then
100731: LD_VAR 0 4
100735: PUSH
100736: LD_VAR 0 7
100740: ARRAY
100741: PPUSH
100742: CALL 55525 0 1
100746: IFFALSE 100750
// continue ;
100748: GO 99022
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
100750: LD_VAR 0 18
100754: PUSH
100755: LD_VAR 0 4
100759: PUSH
100760: LD_VAR 0 7
100764: ARRAY
100765: PPUSH
100766: CALL_OW 310
100770: NOT
100771: AND
100772: PUSH
100773: LD_VAR 0 14
100777: PUSH
100778: LD_INT 1
100780: ARRAY
100781: PUSH
100782: LD_VAR 0 14
100786: PPUSH
100787: LD_INT 21
100789: PUSH
100790: LD_INT 2
100792: PUSH
100793: EMPTY
100794: LIST
100795: LIST
100796: PUSH
100797: LD_INT 58
100799: PUSH
100800: EMPTY
100801: LIST
100802: PUSH
100803: EMPTY
100804: LIST
100805: LIST
100806: PPUSH
100807: CALL_OW 72
100811: IN
100812: AND
100813: IFFALSE 100849
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
100815: LD_VAR 0 4
100819: PUSH
100820: LD_VAR 0 7
100824: ARRAY
100825: PPUSH
100826: LD_VAR 0 14
100830: PUSH
100831: LD_INT 1
100833: ARRAY
100834: PPUSH
100835: CALL_OW 120
// attacking := true ;
100839: LD_ADDR_VAR 0 29
100843: PUSH
100844: LD_INT 1
100846: ST_TO_ADDR
// continue ;
100847: GO 99022
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
100849: LD_VAR 0 26
100853: PUSH
100854: LD_VAR 0 4
100858: PUSH
100859: LD_VAR 0 7
100863: ARRAY
100864: PPUSH
100865: CALL_OW 257
100869: PUSH
100870: LD_INT 1
100872: EQUAL
100873: AND
100874: PUSH
100875: LD_VAR 0 4
100879: PUSH
100880: LD_VAR 0 7
100884: ARRAY
100885: PPUSH
100886: CALL_OW 256
100890: PUSH
100891: LD_INT 800
100893: LESS
100894: AND
100895: PUSH
100896: LD_VAR 0 4
100900: PUSH
100901: LD_VAR 0 7
100905: ARRAY
100906: PPUSH
100907: CALL_OW 318
100911: NOT
100912: AND
100913: IFFALSE 100930
// ComCrawl ( group [ i ] ) ;
100915: LD_VAR 0 4
100919: PUSH
100920: LD_VAR 0 7
100924: ARRAY
100925: PPUSH
100926: CALL_OW 137
// if f_mines then
100930: LD_VAR 0 21
100934: IFFALSE 101177
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
100936: LD_VAR 0 14
100940: PUSH
100941: LD_INT 1
100943: ARRAY
100944: PPUSH
100945: CALL_OW 247
100949: PUSH
100950: LD_INT 3
100952: EQUAL
100953: PUSH
100954: LD_VAR 0 14
100958: PUSH
100959: LD_INT 1
100961: ARRAY
100962: PUSH
100963: LD_VAR 0 27
100967: IN
100968: NOT
100969: AND
100970: IFFALSE 101177
// begin x := GetX ( tmp [ 1 ] ) ;
100972: LD_ADDR_VAR 0 10
100976: PUSH
100977: LD_VAR 0 14
100981: PUSH
100982: LD_INT 1
100984: ARRAY
100985: PPUSH
100986: CALL_OW 250
100990: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
100991: LD_ADDR_VAR 0 11
100995: PUSH
100996: LD_VAR 0 14
101000: PUSH
101001: LD_INT 1
101003: ARRAY
101004: PPUSH
101005: CALL_OW 251
101009: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
101010: LD_ADDR_VAR 0 12
101014: PUSH
101015: LD_VAR 0 4
101019: PUSH
101020: LD_VAR 0 7
101024: ARRAY
101025: PPUSH
101026: CALL 82466 0 1
101030: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
101031: LD_VAR 0 4
101035: PUSH
101036: LD_VAR 0 7
101040: ARRAY
101041: PPUSH
101042: LD_VAR 0 10
101046: PPUSH
101047: LD_VAR 0 11
101051: PPUSH
101052: LD_VAR 0 14
101056: PUSH
101057: LD_INT 1
101059: ARRAY
101060: PPUSH
101061: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
101065: LD_VAR 0 4
101069: PUSH
101070: LD_VAR 0 7
101074: ARRAY
101075: PPUSH
101076: LD_VAR 0 10
101080: PPUSH
101081: LD_VAR 0 12
101085: PPUSH
101086: LD_INT 7
101088: PPUSH
101089: CALL_OW 272
101093: PPUSH
101094: LD_VAR 0 11
101098: PPUSH
101099: LD_VAR 0 12
101103: PPUSH
101104: LD_INT 7
101106: PPUSH
101107: CALL_OW 273
101111: PPUSH
101112: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
101116: LD_VAR 0 4
101120: PUSH
101121: LD_VAR 0 7
101125: ARRAY
101126: PPUSH
101127: LD_INT 71
101129: PPUSH
101130: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
101134: LD_ADDR_VAR 0 27
101138: PUSH
101139: LD_VAR 0 27
101143: PPUSH
101144: LD_VAR 0 27
101148: PUSH
101149: LD_INT 1
101151: PLUS
101152: PPUSH
101153: LD_VAR 0 14
101157: PUSH
101158: LD_INT 1
101160: ARRAY
101161: PPUSH
101162: CALL_OW 1
101166: ST_TO_ADDR
// attacking := true ;
101167: LD_ADDR_VAR 0 29
101171: PUSH
101172: LD_INT 1
101174: ST_TO_ADDR
// continue ;
101175: GO 99022
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
101177: LD_VAR 0 4
101181: PUSH
101182: LD_VAR 0 7
101186: ARRAY
101187: PPUSH
101188: CALL_OW 257
101192: PUSH
101193: LD_INT 17
101195: EQUAL
101196: PUSH
101197: LD_VAR 0 4
101201: PUSH
101202: LD_VAR 0 7
101206: ARRAY
101207: PPUSH
101208: CALL_OW 110
101212: PUSH
101213: LD_INT 71
101215: EQUAL
101216: NOT
101217: AND
101218: IFFALSE 101364
// begin attacking := false ;
101220: LD_ADDR_VAR 0 29
101224: PUSH
101225: LD_INT 0
101227: ST_TO_ADDR
// k := 5 ;
101228: LD_ADDR_VAR 0 9
101232: PUSH
101233: LD_INT 5
101235: ST_TO_ADDR
// if tmp < k then
101236: LD_VAR 0 14
101240: PUSH
101241: LD_VAR 0 9
101245: LESS
101246: IFFALSE 101258
// k := tmp ;
101248: LD_ADDR_VAR 0 9
101252: PUSH
101253: LD_VAR 0 14
101257: ST_TO_ADDR
// for j = 1 to k do
101258: LD_ADDR_VAR 0 8
101262: PUSH
101263: DOUBLE
101264: LD_INT 1
101266: DEC
101267: ST_TO_ADDR
101268: LD_VAR 0 9
101272: PUSH
101273: FOR_TO
101274: IFFALSE 101362
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
101276: LD_VAR 0 14
101280: PUSH
101281: LD_VAR 0 8
101285: ARRAY
101286: PUSH
101287: LD_VAR 0 14
101291: PPUSH
101292: LD_INT 58
101294: PUSH
101295: EMPTY
101296: LIST
101297: PPUSH
101298: CALL_OW 72
101302: IN
101303: NOT
101304: IFFALSE 101360
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
101306: LD_VAR 0 4
101310: PUSH
101311: LD_VAR 0 7
101315: ARRAY
101316: PPUSH
101317: LD_VAR 0 14
101321: PUSH
101322: LD_VAR 0 8
101326: ARRAY
101327: PPUSH
101328: CALL_OW 115
// attacking := true ;
101332: LD_ADDR_VAR 0 29
101336: PUSH
101337: LD_INT 1
101339: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
101340: LD_VAR 0 4
101344: PUSH
101345: LD_VAR 0 7
101349: ARRAY
101350: PPUSH
101351: LD_INT 71
101353: PPUSH
101354: CALL_OW 109
// continue ;
101358: GO 101273
// end ; end ;
101360: GO 101273
101362: POP
101363: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
101364: LD_VAR 0 4
101368: PUSH
101369: LD_VAR 0 7
101373: ARRAY
101374: PPUSH
101375: CALL_OW 257
101379: PUSH
101380: LD_INT 8
101382: EQUAL
101383: PUSH
101384: LD_VAR 0 4
101388: PUSH
101389: LD_VAR 0 7
101393: ARRAY
101394: PPUSH
101395: CALL_OW 264
101399: PUSH
101400: LD_INT 28
101402: PUSH
101403: LD_INT 45
101405: PUSH
101406: LD_INT 7
101408: PUSH
101409: LD_INT 47
101411: PUSH
101412: EMPTY
101413: LIST
101414: LIST
101415: LIST
101416: LIST
101417: IN
101418: OR
101419: IFFALSE 101675
// begin attacking := false ;
101421: LD_ADDR_VAR 0 29
101425: PUSH
101426: LD_INT 0
101428: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
101429: LD_VAR 0 14
101433: PUSH
101434: LD_INT 1
101436: ARRAY
101437: PPUSH
101438: CALL_OW 266
101442: PUSH
101443: LD_INT 32
101445: PUSH
101446: LD_INT 31
101448: PUSH
101449: LD_INT 33
101451: PUSH
101452: LD_INT 4
101454: PUSH
101455: LD_INT 5
101457: PUSH
101458: EMPTY
101459: LIST
101460: LIST
101461: LIST
101462: LIST
101463: LIST
101464: IN
101465: IFFALSE 101651
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
101467: LD_ADDR_VAR 0 9
101471: PUSH
101472: LD_VAR 0 14
101476: PUSH
101477: LD_INT 1
101479: ARRAY
101480: PPUSH
101481: CALL_OW 266
101485: PPUSH
101486: LD_VAR 0 14
101490: PUSH
101491: LD_INT 1
101493: ARRAY
101494: PPUSH
101495: CALL_OW 250
101499: PPUSH
101500: LD_VAR 0 14
101504: PUSH
101505: LD_INT 1
101507: ARRAY
101508: PPUSH
101509: CALL_OW 251
101513: PPUSH
101514: LD_VAR 0 14
101518: PUSH
101519: LD_INT 1
101521: ARRAY
101522: PPUSH
101523: CALL_OW 254
101527: PPUSH
101528: LD_VAR 0 14
101532: PUSH
101533: LD_INT 1
101535: ARRAY
101536: PPUSH
101537: CALL_OW 248
101541: PPUSH
101542: LD_INT 0
101544: PPUSH
101545: CALL 63836 0 6
101549: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
101550: LD_ADDR_VAR 0 8
101554: PUSH
101555: LD_VAR 0 4
101559: PUSH
101560: LD_VAR 0 7
101564: ARRAY
101565: PPUSH
101566: LD_VAR 0 9
101570: PPUSH
101571: CALL 82506 0 2
101575: ST_TO_ADDR
// if j then
101576: LD_VAR 0 8
101580: IFFALSE 101649
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
101582: LD_VAR 0 8
101586: PUSH
101587: LD_INT 1
101589: ARRAY
101590: PPUSH
101591: LD_VAR 0 8
101595: PUSH
101596: LD_INT 2
101598: ARRAY
101599: PPUSH
101600: CALL_OW 488
101604: IFFALSE 101649
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
101606: LD_VAR 0 4
101610: PUSH
101611: LD_VAR 0 7
101615: ARRAY
101616: PPUSH
101617: LD_VAR 0 8
101621: PUSH
101622: LD_INT 1
101624: ARRAY
101625: PPUSH
101626: LD_VAR 0 8
101630: PUSH
101631: LD_INT 2
101633: ARRAY
101634: PPUSH
101635: CALL_OW 116
// attacking := true ;
101639: LD_ADDR_VAR 0 29
101643: PUSH
101644: LD_INT 1
101646: ST_TO_ADDR
// continue ;
101647: GO 99022
// end ; end else
101649: GO 101675
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101651: LD_VAR 0 4
101655: PUSH
101656: LD_VAR 0 7
101660: ARRAY
101661: PPUSH
101662: LD_VAR 0 14
101666: PUSH
101667: LD_INT 1
101669: ARRAY
101670: PPUSH
101671: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
101675: LD_VAR 0 4
101679: PUSH
101680: LD_VAR 0 7
101684: ARRAY
101685: PPUSH
101686: CALL_OW 265
101690: PUSH
101691: LD_INT 11
101693: EQUAL
101694: IFFALSE 101972
// begin k := 10 ;
101696: LD_ADDR_VAR 0 9
101700: PUSH
101701: LD_INT 10
101703: ST_TO_ADDR
// x := 0 ;
101704: LD_ADDR_VAR 0 10
101708: PUSH
101709: LD_INT 0
101711: ST_TO_ADDR
// if tmp < k then
101712: LD_VAR 0 14
101716: PUSH
101717: LD_VAR 0 9
101721: LESS
101722: IFFALSE 101734
// k := tmp ;
101724: LD_ADDR_VAR 0 9
101728: PUSH
101729: LD_VAR 0 14
101733: ST_TO_ADDR
// for j = k downto 1 do
101734: LD_ADDR_VAR 0 8
101738: PUSH
101739: DOUBLE
101740: LD_VAR 0 9
101744: INC
101745: ST_TO_ADDR
101746: LD_INT 1
101748: PUSH
101749: FOR_DOWNTO
101750: IFFALSE 101825
// begin if GetType ( tmp [ j ] ) = unit_human then
101752: LD_VAR 0 14
101756: PUSH
101757: LD_VAR 0 8
101761: ARRAY
101762: PPUSH
101763: CALL_OW 247
101767: PUSH
101768: LD_INT 1
101770: EQUAL
101771: IFFALSE 101823
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
101773: LD_VAR 0 4
101777: PUSH
101778: LD_VAR 0 7
101782: ARRAY
101783: PPUSH
101784: LD_VAR 0 14
101788: PUSH
101789: LD_VAR 0 8
101793: ARRAY
101794: PPUSH
101795: CALL 82777 0 2
// x := tmp [ j ] ;
101799: LD_ADDR_VAR 0 10
101803: PUSH
101804: LD_VAR 0 14
101808: PUSH
101809: LD_VAR 0 8
101813: ARRAY
101814: ST_TO_ADDR
// attacking := true ;
101815: LD_ADDR_VAR 0 29
101819: PUSH
101820: LD_INT 1
101822: ST_TO_ADDR
// end ; end ;
101823: GO 101749
101825: POP
101826: POP
// if not x then
101827: LD_VAR 0 10
101831: NOT
101832: IFFALSE 101972
// begin attacking := true ;
101834: LD_ADDR_VAR 0 29
101838: PUSH
101839: LD_INT 1
101841: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
101842: LD_VAR 0 4
101846: PUSH
101847: LD_VAR 0 7
101851: ARRAY
101852: PPUSH
101853: CALL_OW 250
101857: PPUSH
101858: LD_VAR 0 4
101862: PUSH
101863: LD_VAR 0 7
101867: ARRAY
101868: PPUSH
101869: CALL_OW 251
101873: PPUSH
101874: CALL_OW 546
101878: PUSH
101879: LD_INT 2
101881: ARRAY
101882: PUSH
101883: LD_VAR 0 14
101887: PUSH
101888: LD_INT 1
101890: ARRAY
101891: PPUSH
101892: CALL_OW 250
101896: PPUSH
101897: LD_VAR 0 14
101901: PUSH
101902: LD_INT 1
101904: ARRAY
101905: PPUSH
101906: CALL_OW 251
101910: PPUSH
101911: CALL_OW 546
101915: PUSH
101916: LD_INT 2
101918: ARRAY
101919: EQUAL
101920: IFFALSE 101948
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
101922: LD_VAR 0 4
101926: PUSH
101927: LD_VAR 0 7
101931: ARRAY
101932: PPUSH
101933: LD_VAR 0 14
101937: PUSH
101938: LD_INT 1
101940: ARRAY
101941: PPUSH
101942: CALL 82777 0 2
101946: GO 101972
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101948: LD_VAR 0 4
101952: PUSH
101953: LD_VAR 0 7
101957: ARRAY
101958: PPUSH
101959: LD_VAR 0 14
101963: PUSH
101964: LD_INT 1
101966: ARRAY
101967: PPUSH
101968: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
101972: LD_VAR 0 4
101976: PUSH
101977: LD_VAR 0 7
101981: ARRAY
101982: PPUSH
101983: CALL_OW 264
101987: PUSH
101988: LD_INT 29
101990: EQUAL
101991: IFFALSE 102357
// begin if WantsToAttack ( group [ i ] ) in bombed then
101993: LD_VAR 0 4
101997: PUSH
101998: LD_VAR 0 7
102002: ARRAY
102003: PPUSH
102004: CALL_OW 319
102008: PUSH
102009: LD_VAR 0 28
102013: IN
102014: IFFALSE 102018
// continue ;
102016: GO 99022
// k := 8 ;
102018: LD_ADDR_VAR 0 9
102022: PUSH
102023: LD_INT 8
102025: ST_TO_ADDR
// x := 0 ;
102026: LD_ADDR_VAR 0 10
102030: PUSH
102031: LD_INT 0
102033: ST_TO_ADDR
// if tmp < k then
102034: LD_VAR 0 14
102038: PUSH
102039: LD_VAR 0 9
102043: LESS
102044: IFFALSE 102056
// k := tmp ;
102046: LD_ADDR_VAR 0 9
102050: PUSH
102051: LD_VAR 0 14
102055: ST_TO_ADDR
// for j = 1 to k do
102056: LD_ADDR_VAR 0 8
102060: PUSH
102061: DOUBLE
102062: LD_INT 1
102064: DEC
102065: ST_TO_ADDR
102066: LD_VAR 0 9
102070: PUSH
102071: FOR_TO
102072: IFFALSE 102204
// begin if GetType ( tmp [ j ] ) = unit_building then
102074: LD_VAR 0 14
102078: PUSH
102079: LD_VAR 0 8
102083: ARRAY
102084: PPUSH
102085: CALL_OW 247
102089: PUSH
102090: LD_INT 3
102092: EQUAL
102093: IFFALSE 102202
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
102095: LD_VAR 0 14
102099: PUSH
102100: LD_VAR 0 8
102104: ARRAY
102105: PUSH
102106: LD_VAR 0 28
102110: IN
102111: NOT
102112: PUSH
102113: LD_VAR 0 14
102117: PUSH
102118: LD_VAR 0 8
102122: ARRAY
102123: PPUSH
102124: CALL_OW 313
102128: AND
102129: IFFALSE 102202
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
102131: LD_VAR 0 4
102135: PUSH
102136: LD_VAR 0 7
102140: ARRAY
102141: PPUSH
102142: LD_VAR 0 14
102146: PUSH
102147: LD_VAR 0 8
102151: ARRAY
102152: PPUSH
102153: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
102157: LD_ADDR_VAR 0 28
102161: PUSH
102162: LD_VAR 0 28
102166: PPUSH
102167: LD_VAR 0 28
102171: PUSH
102172: LD_INT 1
102174: PLUS
102175: PPUSH
102176: LD_VAR 0 14
102180: PUSH
102181: LD_VAR 0 8
102185: ARRAY
102186: PPUSH
102187: CALL_OW 1
102191: ST_TO_ADDR
// attacking := true ;
102192: LD_ADDR_VAR 0 29
102196: PUSH
102197: LD_INT 1
102199: ST_TO_ADDR
// break ;
102200: GO 102204
// end ; end ;
102202: GO 102071
102204: POP
102205: POP
// if not attacking and f_attack_depot then
102206: LD_VAR 0 29
102210: NOT
102211: PUSH
102212: LD_VAR 0 25
102216: AND
102217: IFFALSE 102312
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
102219: LD_ADDR_VAR 0 13
102223: PUSH
102224: LD_VAR 0 14
102228: PPUSH
102229: LD_INT 2
102231: PUSH
102232: LD_INT 30
102234: PUSH
102235: LD_INT 0
102237: PUSH
102238: EMPTY
102239: LIST
102240: LIST
102241: PUSH
102242: LD_INT 30
102244: PUSH
102245: LD_INT 1
102247: PUSH
102248: EMPTY
102249: LIST
102250: LIST
102251: PUSH
102252: EMPTY
102253: LIST
102254: LIST
102255: LIST
102256: PPUSH
102257: CALL_OW 72
102261: ST_TO_ADDR
// if z then
102262: LD_VAR 0 13
102266: IFFALSE 102312
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
102268: LD_VAR 0 4
102272: PUSH
102273: LD_VAR 0 7
102277: ARRAY
102278: PPUSH
102279: LD_VAR 0 13
102283: PPUSH
102284: LD_VAR 0 4
102288: PUSH
102289: LD_VAR 0 7
102293: ARRAY
102294: PPUSH
102295: CALL_OW 74
102299: PPUSH
102300: CALL_OW 115
// attacking := true ;
102304: LD_ADDR_VAR 0 29
102308: PUSH
102309: LD_INT 1
102311: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
102312: LD_VAR 0 4
102316: PUSH
102317: LD_VAR 0 7
102321: ARRAY
102322: PPUSH
102323: CALL_OW 256
102327: PUSH
102328: LD_INT 500
102330: LESS
102331: IFFALSE 102357
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
102333: LD_VAR 0 4
102337: PUSH
102338: LD_VAR 0 7
102342: ARRAY
102343: PPUSH
102344: LD_VAR 0 14
102348: PUSH
102349: LD_INT 1
102351: ARRAY
102352: PPUSH
102353: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
102357: LD_VAR 0 4
102361: PUSH
102362: LD_VAR 0 7
102366: ARRAY
102367: PPUSH
102368: CALL_OW 264
102372: PUSH
102373: LD_INT 49
102375: EQUAL
102376: IFFALSE 102497
// begin if not HasTask ( group [ i ] ) then
102378: LD_VAR 0 4
102382: PUSH
102383: LD_VAR 0 7
102387: ARRAY
102388: PPUSH
102389: CALL_OW 314
102393: NOT
102394: IFFALSE 102497
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
102396: LD_ADDR_VAR 0 9
102400: PUSH
102401: LD_INT 81
102403: PUSH
102404: LD_VAR 0 4
102408: PUSH
102409: LD_VAR 0 7
102413: ARRAY
102414: PPUSH
102415: CALL_OW 255
102419: PUSH
102420: EMPTY
102421: LIST
102422: LIST
102423: PPUSH
102424: CALL_OW 69
102428: PPUSH
102429: LD_VAR 0 4
102433: PUSH
102434: LD_VAR 0 7
102438: ARRAY
102439: PPUSH
102440: CALL_OW 74
102444: ST_TO_ADDR
// if k then
102445: LD_VAR 0 9
102449: IFFALSE 102497
// if GetDistUnits ( group [ i ] , k ) > 10 then
102451: LD_VAR 0 4
102455: PUSH
102456: LD_VAR 0 7
102460: ARRAY
102461: PPUSH
102462: LD_VAR 0 9
102466: PPUSH
102467: CALL_OW 296
102471: PUSH
102472: LD_INT 10
102474: GREATER
102475: IFFALSE 102497
// ComMoveUnit ( group [ i ] , k ) ;
102477: LD_VAR 0 4
102481: PUSH
102482: LD_VAR 0 7
102486: ARRAY
102487: PPUSH
102488: LD_VAR 0 9
102492: PPUSH
102493: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
102497: LD_VAR 0 4
102501: PUSH
102502: LD_VAR 0 7
102506: ARRAY
102507: PPUSH
102508: CALL_OW 256
102512: PUSH
102513: LD_INT 250
102515: LESS
102516: PUSH
102517: LD_VAR 0 4
102521: PUSH
102522: LD_VAR 0 7
102526: ARRAY
102527: PUSH
102528: LD_INT 21
102530: PUSH
102531: LD_INT 2
102533: PUSH
102534: EMPTY
102535: LIST
102536: LIST
102537: PUSH
102538: LD_INT 23
102540: PUSH
102541: LD_INT 2
102543: PUSH
102544: EMPTY
102545: LIST
102546: LIST
102547: PUSH
102548: EMPTY
102549: LIST
102550: LIST
102551: PPUSH
102552: CALL_OW 69
102556: IN
102557: AND
102558: IFFALSE 102683
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
102560: LD_ADDR_VAR 0 9
102564: PUSH
102565: LD_OWVAR 3
102569: PUSH
102570: LD_VAR 0 4
102574: PUSH
102575: LD_VAR 0 7
102579: ARRAY
102580: DIFF
102581: PPUSH
102582: LD_VAR 0 4
102586: PUSH
102587: LD_VAR 0 7
102591: ARRAY
102592: PPUSH
102593: CALL_OW 74
102597: ST_TO_ADDR
// if not k then
102598: LD_VAR 0 9
102602: NOT
102603: IFFALSE 102607
// continue ;
102605: GO 99022
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
102607: LD_VAR 0 9
102611: PUSH
102612: LD_INT 81
102614: PUSH
102615: LD_VAR 0 4
102619: PUSH
102620: LD_VAR 0 7
102624: ARRAY
102625: PPUSH
102626: CALL_OW 255
102630: PUSH
102631: EMPTY
102632: LIST
102633: LIST
102634: PPUSH
102635: CALL_OW 69
102639: IN
102640: PUSH
102641: LD_VAR 0 9
102645: PPUSH
102646: LD_VAR 0 4
102650: PUSH
102651: LD_VAR 0 7
102655: ARRAY
102656: PPUSH
102657: CALL_OW 296
102661: PUSH
102662: LD_INT 5
102664: LESS
102665: AND
102666: IFFALSE 102683
// ComAutodestruct ( group [ i ] ) ;
102668: LD_VAR 0 4
102672: PUSH
102673: LD_VAR 0 7
102677: ARRAY
102678: PPUSH
102679: CALL 82675 0 1
// end ; if f_attack_depot then
102683: LD_VAR 0 25
102687: IFFALSE 102799
// begin k := 6 ;
102689: LD_ADDR_VAR 0 9
102693: PUSH
102694: LD_INT 6
102696: ST_TO_ADDR
// if tmp < k then
102697: LD_VAR 0 14
102701: PUSH
102702: LD_VAR 0 9
102706: LESS
102707: IFFALSE 102719
// k := tmp ;
102709: LD_ADDR_VAR 0 9
102713: PUSH
102714: LD_VAR 0 14
102718: ST_TO_ADDR
// for j = 1 to k do
102719: LD_ADDR_VAR 0 8
102723: PUSH
102724: DOUBLE
102725: LD_INT 1
102727: DEC
102728: ST_TO_ADDR
102729: LD_VAR 0 9
102733: PUSH
102734: FOR_TO
102735: IFFALSE 102797
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
102737: LD_VAR 0 8
102741: PPUSH
102742: CALL_OW 266
102746: PUSH
102747: LD_INT 0
102749: PUSH
102750: LD_INT 1
102752: PUSH
102753: EMPTY
102754: LIST
102755: LIST
102756: IN
102757: IFFALSE 102795
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
102759: LD_VAR 0 4
102763: PUSH
102764: LD_VAR 0 7
102768: ARRAY
102769: PPUSH
102770: LD_VAR 0 14
102774: PUSH
102775: LD_VAR 0 8
102779: ARRAY
102780: PPUSH
102781: CALL_OW 115
// attacking := true ;
102785: LD_ADDR_VAR 0 29
102789: PUSH
102790: LD_INT 1
102792: ST_TO_ADDR
// break ;
102793: GO 102797
// end ;
102795: GO 102734
102797: POP
102798: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
102799: LD_VAR 0 4
102803: PUSH
102804: LD_VAR 0 7
102808: ARRAY
102809: PPUSH
102810: CALL_OW 302
102814: PUSH
102815: LD_VAR 0 29
102819: NOT
102820: AND
102821: IFFALSE 103143
// begin if GetTag ( group [ i ] ) = 71 then
102823: LD_VAR 0 4
102827: PUSH
102828: LD_VAR 0 7
102832: ARRAY
102833: PPUSH
102834: CALL_OW 110
102838: PUSH
102839: LD_INT 71
102841: EQUAL
102842: IFFALSE 102883
// begin if HasTask ( group [ i ] ) then
102844: LD_VAR 0 4
102848: PUSH
102849: LD_VAR 0 7
102853: ARRAY
102854: PPUSH
102855: CALL_OW 314
102859: IFFALSE 102865
// continue else
102861: GO 99022
102863: GO 102883
// SetTag ( group [ i ] , 0 ) ;
102865: LD_VAR 0 4
102869: PUSH
102870: LD_VAR 0 7
102874: ARRAY
102875: PPUSH
102876: LD_INT 0
102878: PPUSH
102879: CALL_OW 109
// end ; k := 8 ;
102883: LD_ADDR_VAR 0 9
102887: PUSH
102888: LD_INT 8
102890: ST_TO_ADDR
// x := 0 ;
102891: LD_ADDR_VAR 0 10
102895: PUSH
102896: LD_INT 0
102898: ST_TO_ADDR
// if tmp < k then
102899: LD_VAR 0 14
102903: PUSH
102904: LD_VAR 0 9
102908: LESS
102909: IFFALSE 102921
// k := tmp ;
102911: LD_ADDR_VAR 0 9
102915: PUSH
102916: LD_VAR 0 14
102920: ST_TO_ADDR
// for j = 1 to k do
102921: LD_ADDR_VAR 0 8
102925: PUSH
102926: DOUBLE
102927: LD_INT 1
102929: DEC
102930: ST_TO_ADDR
102931: LD_VAR 0 9
102935: PUSH
102936: FOR_TO
102937: IFFALSE 103035
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
102939: LD_VAR 0 14
102943: PUSH
102944: LD_VAR 0 8
102948: ARRAY
102949: PPUSH
102950: CALL_OW 247
102954: PUSH
102955: LD_INT 1
102957: EQUAL
102958: PUSH
102959: LD_VAR 0 14
102963: PUSH
102964: LD_VAR 0 8
102968: ARRAY
102969: PPUSH
102970: CALL_OW 256
102974: PUSH
102975: LD_INT 250
102977: LESS
102978: PUSH
102979: LD_VAR 0 20
102983: AND
102984: PUSH
102985: LD_VAR 0 20
102989: NOT
102990: PUSH
102991: LD_VAR 0 14
102995: PUSH
102996: LD_VAR 0 8
103000: ARRAY
103001: PPUSH
103002: CALL_OW 256
103006: PUSH
103007: LD_INT 250
103009: GREATEREQUAL
103010: AND
103011: OR
103012: AND
103013: IFFALSE 103033
// begin x := tmp [ j ] ;
103015: LD_ADDR_VAR 0 10
103019: PUSH
103020: LD_VAR 0 14
103024: PUSH
103025: LD_VAR 0 8
103029: ARRAY
103030: ST_TO_ADDR
// break ;
103031: GO 103035
// end ;
103033: GO 102936
103035: POP
103036: POP
// if x then
103037: LD_VAR 0 10
103041: IFFALSE 103065
// ComAttackUnit ( group [ i ] , x ) else
103043: LD_VAR 0 4
103047: PUSH
103048: LD_VAR 0 7
103052: ARRAY
103053: PPUSH
103054: LD_VAR 0 10
103058: PPUSH
103059: CALL_OW 115
103063: GO 103089
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
103065: LD_VAR 0 4
103069: PUSH
103070: LD_VAR 0 7
103074: ARRAY
103075: PPUSH
103076: LD_VAR 0 14
103080: PUSH
103081: LD_INT 1
103083: ARRAY
103084: PPUSH
103085: CALL_OW 115
// if not HasTask ( group [ i ] ) then
103089: LD_VAR 0 4
103093: PUSH
103094: LD_VAR 0 7
103098: ARRAY
103099: PPUSH
103100: CALL_OW 314
103104: NOT
103105: IFFALSE 103143
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
103107: LD_VAR 0 4
103111: PUSH
103112: LD_VAR 0 7
103116: ARRAY
103117: PPUSH
103118: LD_VAR 0 14
103122: PPUSH
103123: LD_VAR 0 4
103127: PUSH
103128: LD_VAR 0 7
103132: ARRAY
103133: PPUSH
103134: CALL_OW 74
103138: PPUSH
103139: CALL_OW 115
// end ; end ; end ;
103143: GO 99022
103145: POP
103146: POP
// wait ( 0 0$2 ) ;
103147: LD_INT 70
103149: PPUSH
103150: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
103154: LD_VAR 0 4
103158: NOT
103159: PUSH
103160: LD_VAR 0 4
103164: PUSH
103165: EMPTY
103166: EQUAL
103167: OR
103168: PUSH
103169: LD_INT 81
103171: PUSH
103172: LD_VAR 0 35
103176: PUSH
103177: EMPTY
103178: LIST
103179: LIST
103180: PPUSH
103181: CALL_OW 69
103185: NOT
103186: OR
103187: IFFALSE 99007
// end ;
103189: LD_VAR 0 2
103193: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
103194: LD_INT 0
103196: PPUSH
103197: PPUSH
103198: PPUSH
103199: PPUSH
103200: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
103201: LD_VAR 0 1
103205: NOT
103206: PUSH
103207: LD_EXP 87
103211: PUSH
103212: LD_VAR 0 1
103216: ARRAY
103217: NOT
103218: OR
103219: PUSH
103220: LD_VAR 0 2
103224: NOT
103225: OR
103226: PUSH
103227: LD_VAR 0 3
103231: NOT
103232: OR
103233: IFFALSE 103237
// exit ;
103235: GO 103750
// side := mc_sides [ base ] ;
103237: LD_ADDR_VAR 0 6
103241: PUSH
103242: LD_EXP 113
103246: PUSH
103247: LD_VAR 0 1
103251: ARRAY
103252: ST_TO_ADDR
// if not side then
103253: LD_VAR 0 6
103257: NOT
103258: IFFALSE 103262
// exit ;
103260: GO 103750
// for i in solds do
103262: LD_ADDR_VAR 0 7
103266: PUSH
103267: LD_VAR 0 2
103271: PUSH
103272: FOR_IN
103273: IFFALSE 103334
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
103275: LD_VAR 0 7
103279: PPUSH
103280: CALL_OW 310
103284: PPUSH
103285: CALL_OW 266
103289: PUSH
103290: LD_INT 32
103292: PUSH
103293: LD_INT 31
103295: PUSH
103296: EMPTY
103297: LIST
103298: LIST
103299: IN
103300: IFFALSE 103320
// solds := solds diff i else
103302: LD_ADDR_VAR 0 2
103306: PUSH
103307: LD_VAR 0 2
103311: PUSH
103312: LD_VAR 0 7
103316: DIFF
103317: ST_TO_ADDR
103318: GO 103332
// SetTag ( i , 18 ) ;
103320: LD_VAR 0 7
103324: PPUSH
103325: LD_INT 18
103327: PPUSH
103328: CALL_OW 109
103332: GO 103272
103334: POP
103335: POP
// if not solds then
103336: LD_VAR 0 2
103340: NOT
103341: IFFALSE 103345
// exit ;
103343: GO 103750
// repeat wait ( 0 0$1 ) ;
103345: LD_INT 35
103347: PPUSH
103348: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
103352: LD_ADDR_VAR 0 5
103356: PUSH
103357: LD_VAR 0 6
103361: PPUSH
103362: LD_VAR 0 3
103366: PPUSH
103367: CALL 52390 0 2
103371: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
103372: LD_EXP 87
103376: PUSH
103377: LD_VAR 0 1
103381: ARRAY
103382: NOT
103383: PUSH
103384: LD_EXP 87
103388: PUSH
103389: LD_VAR 0 1
103393: ARRAY
103394: PUSH
103395: EMPTY
103396: EQUAL
103397: OR
103398: IFFALSE 103435
// begin for i in solds do
103400: LD_ADDR_VAR 0 7
103404: PUSH
103405: LD_VAR 0 2
103409: PUSH
103410: FOR_IN
103411: IFFALSE 103424
// ComStop ( i ) ;
103413: LD_VAR 0 7
103417: PPUSH
103418: CALL_OW 141
103422: GO 103410
103424: POP
103425: POP
// solds := [ ] ;
103426: LD_ADDR_VAR 0 2
103430: PUSH
103431: EMPTY
103432: ST_TO_ADDR
// exit ;
103433: GO 103750
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
103435: LD_VAR 0 5
103439: NOT
103440: PUSH
103441: LD_VAR 0 5
103445: PUSH
103446: LD_INT 3
103448: GREATER
103449: OR
103450: PUSH
103451: LD_EXP 109
103455: PUSH
103456: LD_VAR 0 1
103460: ARRAY
103461: OR
103462: IFFALSE 103503
// begin for i in solds do
103464: LD_ADDR_VAR 0 7
103468: PUSH
103469: LD_VAR 0 2
103473: PUSH
103474: FOR_IN
103475: IFFALSE 103499
// if HasTask ( i ) then
103477: LD_VAR 0 7
103481: PPUSH
103482: CALL_OW 314
103486: IFFALSE 103497
// ComStop ( i ) ;
103488: LD_VAR 0 7
103492: PPUSH
103493: CALL_OW 141
103497: GO 103474
103499: POP
103500: POP
// break ;
103501: GO 103738
// end ; for i in solds do
103503: LD_ADDR_VAR 0 7
103507: PUSH
103508: LD_VAR 0 2
103512: PUSH
103513: FOR_IN
103514: IFFALSE 103730
// begin if IsInUnit ( i ) then
103516: LD_VAR 0 7
103520: PPUSH
103521: CALL_OW 310
103525: IFFALSE 103536
// ComExitBuilding ( i ) ;
103527: LD_VAR 0 7
103531: PPUSH
103532: CALL_OW 122
// if GetLives ( i ) > 333 then
103536: LD_VAR 0 7
103540: PPUSH
103541: CALL_OW 256
103545: PUSH
103546: LD_INT 333
103548: GREATER
103549: IFFALSE 103577
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
103551: LD_VAR 0 7
103555: PPUSH
103556: LD_VAR 0 5
103560: PPUSH
103561: LD_VAR 0 7
103565: PPUSH
103566: CALL_OW 74
103570: PPUSH
103571: CALL_OW 115
103575: GO 103728
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
103577: LD_ADDR_VAR 0 8
103581: PUSH
103582: LD_EXP 87
103586: PUSH
103587: LD_VAR 0 1
103591: ARRAY
103592: PPUSH
103593: LD_INT 2
103595: PUSH
103596: LD_INT 30
103598: PUSH
103599: LD_INT 0
103601: PUSH
103602: EMPTY
103603: LIST
103604: LIST
103605: PUSH
103606: LD_INT 30
103608: PUSH
103609: LD_INT 1
103611: PUSH
103612: EMPTY
103613: LIST
103614: LIST
103615: PUSH
103616: LD_INT 30
103618: PUSH
103619: LD_INT 6
103621: PUSH
103622: EMPTY
103623: LIST
103624: LIST
103625: PUSH
103626: EMPTY
103627: LIST
103628: LIST
103629: LIST
103630: LIST
103631: PPUSH
103632: CALL_OW 72
103636: PPUSH
103637: LD_VAR 0 7
103641: PPUSH
103642: CALL_OW 74
103646: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
103647: LD_VAR 0 7
103651: PPUSH
103652: LD_VAR 0 8
103656: PPUSH
103657: CALL_OW 250
103661: PPUSH
103662: LD_INT 3
103664: PPUSH
103665: LD_INT 5
103667: PPUSH
103668: CALL_OW 272
103672: PPUSH
103673: LD_VAR 0 8
103677: PPUSH
103678: CALL_OW 251
103682: PPUSH
103683: LD_INT 3
103685: PPUSH
103686: LD_INT 5
103688: PPUSH
103689: CALL_OW 273
103693: PPUSH
103694: CALL_OW 111
// SetTag ( i , 0 ) ;
103698: LD_VAR 0 7
103702: PPUSH
103703: LD_INT 0
103705: PPUSH
103706: CALL_OW 109
// solds := solds diff i ;
103710: LD_ADDR_VAR 0 2
103714: PUSH
103715: LD_VAR 0 2
103719: PUSH
103720: LD_VAR 0 7
103724: DIFF
103725: ST_TO_ADDR
// continue ;
103726: GO 103513
// end ; end ;
103728: GO 103513
103730: POP
103731: POP
// until solds ;
103732: LD_VAR 0 2
103736: IFFALSE 103345
// MC_Reset ( base , 18 ) ;
103738: LD_VAR 0 1
103742: PPUSH
103743: LD_INT 18
103745: PPUSH
103746: CALL 24698 0 2
// end ;
103750: LD_VAR 0 4
103754: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
103755: LD_INT 0
103757: PPUSH
103758: PPUSH
103759: PPUSH
103760: PPUSH
103761: PPUSH
103762: PPUSH
103763: PPUSH
103764: PPUSH
103765: PPUSH
103766: PPUSH
103767: PPUSH
103768: PPUSH
103769: PPUSH
103770: PPUSH
103771: PPUSH
103772: PPUSH
103773: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
103774: LD_ADDR_VAR 0 13
103778: PUSH
103779: LD_EXP 87
103783: PUSH
103784: LD_VAR 0 1
103788: ARRAY
103789: PPUSH
103790: LD_INT 25
103792: PUSH
103793: LD_INT 3
103795: PUSH
103796: EMPTY
103797: LIST
103798: LIST
103799: PPUSH
103800: CALL_OW 72
103804: ST_TO_ADDR
// if mc_remote_driver [ base ] then
103805: LD_EXP 127
103809: PUSH
103810: LD_VAR 0 1
103814: ARRAY
103815: IFFALSE 103839
// mechs := mechs diff mc_remote_driver [ base ] ;
103817: LD_ADDR_VAR 0 13
103821: PUSH
103822: LD_VAR 0 13
103826: PUSH
103827: LD_EXP 127
103831: PUSH
103832: LD_VAR 0 1
103836: ARRAY
103837: DIFF
103838: ST_TO_ADDR
// for i in mechs do
103839: LD_ADDR_VAR 0 5
103843: PUSH
103844: LD_VAR 0 13
103848: PUSH
103849: FOR_IN
103850: IFFALSE 103885
// if GetTag ( i ) > 0 then
103852: LD_VAR 0 5
103856: PPUSH
103857: CALL_OW 110
103861: PUSH
103862: LD_INT 0
103864: GREATER
103865: IFFALSE 103883
// mechs := mechs diff i ;
103867: LD_ADDR_VAR 0 13
103871: PUSH
103872: LD_VAR 0 13
103876: PUSH
103877: LD_VAR 0 5
103881: DIFF
103882: ST_TO_ADDR
103883: GO 103849
103885: POP
103886: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
103887: LD_ADDR_VAR 0 9
103891: PUSH
103892: LD_EXP 87
103896: PUSH
103897: LD_VAR 0 1
103901: ARRAY
103902: PPUSH
103903: LD_INT 2
103905: PUSH
103906: LD_INT 25
103908: PUSH
103909: LD_INT 1
103911: PUSH
103912: EMPTY
103913: LIST
103914: LIST
103915: PUSH
103916: LD_INT 25
103918: PUSH
103919: LD_INT 5
103921: PUSH
103922: EMPTY
103923: LIST
103924: LIST
103925: PUSH
103926: LD_INT 25
103928: PUSH
103929: LD_INT 8
103931: PUSH
103932: EMPTY
103933: LIST
103934: LIST
103935: PUSH
103936: LD_INT 25
103938: PUSH
103939: LD_INT 9
103941: PUSH
103942: EMPTY
103943: LIST
103944: LIST
103945: PUSH
103946: EMPTY
103947: LIST
103948: LIST
103949: LIST
103950: LIST
103951: LIST
103952: PPUSH
103953: CALL_OW 72
103957: ST_TO_ADDR
// if not defenders and not solds then
103958: LD_VAR 0 2
103962: NOT
103963: PUSH
103964: LD_VAR 0 9
103968: NOT
103969: AND
103970: IFFALSE 103974
// exit ;
103972: GO 105600
// depot_under_attack := false ;
103974: LD_ADDR_VAR 0 17
103978: PUSH
103979: LD_INT 0
103981: ST_TO_ADDR
// sold_defenders := [ ] ;
103982: LD_ADDR_VAR 0 18
103986: PUSH
103987: EMPTY
103988: ST_TO_ADDR
// if mechs then
103989: LD_VAR 0 13
103993: IFFALSE 104122
// for i in defenders do
103995: LD_ADDR_VAR 0 5
103999: PUSH
104000: LD_VAR 0 2
104004: PUSH
104005: FOR_IN
104006: IFFALSE 104120
// begin SetTag ( i , 20 ) ;
104008: LD_VAR 0 5
104012: PPUSH
104013: LD_INT 20
104015: PPUSH
104016: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
104020: LD_VAR 0 5
104024: PPUSH
104025: CALL_OW 263
104029: PUSH
104030: LD_INT 1
104032: EQUAL
104033: PUSH
104034: LD_VAR 0 5
104038: PPUSH
104039: CALL_OW 311
104043: NOT
104044: AND
104045: PUSH
104046: LD_VAR 0 13
104050: AND
104051: IFFALSE 104118
// begin un := mechs [ 1 ] ;
104053: LD_ADDR_VAR 0 11
104057: PUSH
104058: LD_VAR 0 13
104062: PUSH
104063: LD_INT 1
104065: ARRAY
104066: ST_TO_ADDR
// ComExitBuilding ( un ) ;
104067: LD_VAR 0 11
104071: PPUSH
104072: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
104076: LD_VAR 0 11
104080: PPUSH
104081: LD_VAR 0 5
104085: PPUSH
104086: CALL_OW 180
// SetTag ( un , 19 ) ;
104090: LD_VAR 0 11
104094: PPUSH
104095: LD_INT 19
104097: PPUSH
104098: CALL_OW 109
// mechs := mechs diff un ;
104102: LD_ADDR_VAR 0 13
104106: PUSH
104107: LD_VAR 0 13
104111: PUSH
104112: LD_VAR 0 11
104116: DIFF
104117: ST_TO_ADDR
// end ; end ;
104118: GO 104005
104120: POP
104121: POP
// if solds then
104122: LD_VAR 0 9
104126: IFFALSE 104185
// for i in solds do
104128: LD_ADDR_VAR 0 5
104132: PUSH
104133: LD_VAR 0 9
104137: PUSH
104138: FOR_IN
104139: IFFALSE 104183
// if not GetTag ( i ) then
104141: LD_VAR 0 5
104145: PPUSH
104146: CALL_OW 110
104150: NOT
104151: IFFALSE 104181
// begin defenders := defenders union i ;
104153: LD_ADDR_VAR 0 2
104157: PUSH
104158: LD_VAR 0 2
104162: PUSH
104163: LD_VAR 0 5
104167: UNION
104168: ST_TO_ADDR
// SetTag ( i , 18 ) ;
104169: LD_VAR 0 5
104173: PPUSH
104174: LD_INT 18
104176: PPUSH
104177: CALL_OW 109
// end ;
104181: GO 104138
104183: POP
104184: POP
// repeat wait ( 0 0$1 ) ;
104185: LD_INT 35
104187: PPUSH
104188: CALL_OW 67
// enemy := mc_scan [ base ] ;
104192: LD_ADDR_VAR 0 3
104196: PUSH
104197: LD_EXP 110
104201: PUSH
104202: LD_VAR 0 1
104206: ARRAY
104207: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
104208: LD_EXP 87
104212: PUSH
104213: LD_VAR 0 1
104217: ARRAY
104218: NOT
104219: PUSH
104220: LD_EXP 87
104224: PUSH
104225: LD_VAR 0 1
104229: ARRAY
104230: PUSH
104231: EMPTY
104232: EQUAL
104233: OR
104234: IFFALSE 104271
// begin for i in defenders do
104236: LD_ADDR_VAR 0 5
104240: PUSH
104241: LD_VAR 0 2
104245: PUSH
104246: FOR_IN
104247: IFFALSE 104260
// ComStop ( i ) ;
104249: LD_VAR 0 5
104253: PPUSH
104254: CALL_OW 141
104258: GO 104246
104260: POP
104261: POP
// defenders := [ ] ;
104262: LD_ADDR_VAR 0 2
104266: PUSH
104267: EMPTY
104268: ST_TO_ADDR
// exit ;
104269: GO 105600
// end ; for i in defenders do
104271: LD_ADDR_VAR 0 5
104275: PUSH
104276: LD_VAR 0 2
104280: PUSH
104281: FOR_IN
104282: IFFALSE 105100
// begin e := NearestUnitToUnit ( enemy , i ) ;
104284: LD_ADDR_VAR 0 14
104288: PUSH
104289: LD_VAR 0 3
104293: PPUSH
104294: LD_VAR 0 5
104298: PPUSH
104299: CALL_OW 74
104303: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
104304: LD_ADDR_VAR 0 8
104308: PUSH
104309: LD_EXP 87
104313: PUSH
104314: LD_VAR 0 1
104318: ARRAY
104319: PPUSH
104320: LD_INT 2
104322: PUSH
104323: LD_INT 30
104325: PUSH
104326: LD_INT 0
104328: PUSH
104329: EMPTY
104330: LIST
104331: LIST
104332: PUSH
104333: LD_INT 30
104335: PUSH
104336: LD_INT 1
104338: PUSH
104339: EMPTY
104340: LIST
104341: LIST
104342: PUSH
104343: EMPTY
104344: LIST
104345: LIST
104346: LIST
104347: PPUSH
104348: CALL_OW 72
104352: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
104353: LD_ADDR_VAR 0 17
104357: PUSH
104358: LD_VAR 0 8
104362: NOT
104363: PUSH
104364: LD_VAR 0 8
104368: PPUSH
104369: LD_INT 3
104371: PUSH
104372: LD_INT 24
104374: PUSH
104375: LD_INT 600
104377: PUSH
104378: EMPTY
104379: LIST
104380: LIST
104381: PUSH
104382: EMPTY
104383: LIST
104384: LIST
104385: PPUSH
104386: CALL_OW 72
104390: OR
104391: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
104392: LD_VAR 0 5
104396: PPUSH
104397: CALL_OW 247
104401: PUSH
104402: LD_INT 2
104404: DOUBLE
104405: EQUAL
104406: IFTRUE 104410
104408: GO 104806
104410: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
104411: LD_VAR 0 5
104415: PPUSH
104416: CALL_OW 256
104420: PUSH
104421: LD_INT 650
104423: GREATER
104424: PUSH
104425: LD_VAR 0 5
104429: PPUSH
104430: LD_VAR 0 14
104434: PPUSH
104435: CALL_OW 296
104439: PUSH
104440: LD_INT 40
104442: LESS
104443: PUSH
104444: LD_VAR 0 14
104448: PPUSH
104449: LD_EXP 112
104453: PUSH
104454: LD_VAR 0 1
104458: ARRAY
104459: PPUSH
104460: CALL_OW 308
104464: OR
104465: AND
104466: IFFALSE 104588
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
104468: LD_VAR 0 5
104472: PPUSH
104473: CALL_OW 262
104477: PUSH
104478: LD_INT 1
104480: EQUAL
104481: PUSH
104482: LD_VAR 0 5
104486: PPUSH
104487: CALL_OW 261
104491: PUSH
104492: LD_INT 30
104494: LESS
104495: AND
104496: PUSH
104497: LD_VAR 0 8
104501: AND
104502: IFFALSE 104572
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
104504: LD_VAR 0 5
104508: PPUSH
104509: LD_VAR 0 8
104513: PPUSH
104514: LD_VAR 0 5
104518: PPUSH
104519: CALL_OW 74
104523: PPUSH
104524: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
104528: LD_VAR 0 5
104532: PPUSH
104533: LD_VAR 0 8
104537: PPUSH
104538: LD_VAR 0 5
104542: PPUSH
104543: CALL_OW 74
104547: PPUSH
104548: CALL_OW 296
104552: PUSH
104553: LD_INT 6
104555: LESS
104556: IFFALSE 104570
// SetFuel ( i , 100 ) ;
104558: LD_VAR 0 5
104562: PPUSH
104563: LD_INT 100
104565: PPUSH
104566: CALL_OW 240
// end else
104570: GO 104586
// ComAttackUnit ( i , e ) ;
104572: LD_VAR 0 5
104576: PPUSH
104577: LD_VAR 0 14
104581: PPUSH
104582: CALL_OW 115
// end else
104586: GO 104689
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
104588: LD_VAR 0 14
104592: PPUSH
104593: LD_EXP 112
104597: PUSH
104598: LD_VAR 0 1
104602: ARRAY
104603: PPUSH
104604: CALL_OW 308
104608: NOT
104609: PUSH
104610: LD_VAR 0 5
104614: PPUSH
104615: LD_VAR 0 14
104619: PPUSH
104620: CALL_OW 296
104624: PUSH
104625: LD_INT 40
104627: GREATEREQUAL
104628: AND
104629: PUSH
104630: LD_VAR 0 5
104634: PPUSH
104635: CALL_OW 256
104639: PUSH
104640: LD_INT 650
104642: LESSEQUAL
104643: OR
104644: PUSH
104645: LD_VAR 0 5
104649: PPUSH
104650: LD_EXP 111
104654: PUSH
104655: LD_VAR 0 1
104659: ARRAY
104660: PPUSH
104661: CALL_OW 308
104665: NOT
104666: AND
104667: IFFALSE 104689
// ComMoveToArea ( i , mc_parking [ base ] ) ;
104669: LD_VAR 0 5
104673: PPUSH
104674: LD_EXP 111
104678: PUSH
104679: LD_VAR 0 1
104683: ARRAY
104684: PPUSH
104685: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
104689: LD_VAR 0 5
104693: PPUSH
104694: CALL_OW 256
104698: PUSH
104699: LD_INT 998
104701: LESS
104702: PUSH
104703: LD_VAR 0 5
104707: PPUSH
104708: CALL_OW 263
104712: PUSH
104713: LD_INT 1
104715: EQUAL
104716: AND
104717: PUSH
104718: LD_VAR 0 5
104722: PPUSH
104723: CALL_OW 311
104727: AND
104728: PUSH
104729: LD_VAR 0 5
104733: PPUSH
104734: LD_EXP 111
104738: PUSH
104739: LD_VAR 0 1
104743: ARRAY
104744: PPUSH
104745: CALL_OW 308
104749: AND
104750: IFFALSE 104804
// begin mech := IsDrivenBy ( i ) ;
104752: LD_ADDR_VAR 0 10
104756: PUSH
104757: LD_VAR 0 5
104761: PPUSH
104762: CALL_OW 311
104766: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
104767: LD_VAR 0 10
104771: PPUSH
104772: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
104776: LD_VAR 0 10
104780: PPUSH
104781: LD_VAR 0 5
104785: PPUSH
104786: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
104790: LD_VAR 0 10
104794: PPUSH
104795: LD_VAR 0 5
104799: PPUSH
104800: CALL_OW 180
// end ; end ; unit_human :
104804: GO 105071
104806: LD_INT 1
104808: DOUBLE
104809: EQUAL
104810: IFTRUE 104814
104812: GO 105070
104814: POP
// begin b := IsInUnit ( i ) ;
104815: LD_ADDR_VAR 0 19
104819: PUSH
104820: LD_VAR 0 5
104824: PPUSH
104825: CALL_OW 310
104829: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
104830: LD_ADDR_VAR 0 20
104834: PUSH
104835: LD_VAR 0 19
104839: NOT
104840: PUSH
104841: LD_VAR 0 19
104845: PPUSH
104846: CALL_OW 266
104850: PUSH
104851: LD_INT 32
104853: PUSH
104854: LD_INT 31
104856: PUSH
104857: EMPTY
104858: LIST
104859: LIST
104860: IN
104861: OR
104862: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
104863: LD_VAR 0 17
104867: PUSH
104868: LD_VAR 0 2
104872: PPUSH
104873: LD_INT 21
104875: PUSH
104876: LD_INT 2
104878: PUSH
104879: EMPTY
104880: LIST
104881: LIST
104882: PPUSH
104883: CALL_OW 72
104887: PUSH
104888: LD_INT 1
104890: LESSEQUAL
104891: OR
104892: PUSH
104893: LD_VAR 0 20
104897: AND
104898: PUSH
104899: LD_VAR 0 5
104903: PUSH
104904: LD_VAR 0 18
104908: IN
104909: NOT
104910: AND
104911: IFFALSE 105004
// begin if b then
104913: LD_VAR 0 19
104917: IFFALSE 104966
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
104919: LD_VAR 0 19
104923: PPUSH
104924: LD_VAR 0 3
104928: PPUSH
104929: LD_VAR 0 19
104933: PPUSH
104934: CALL_OW 74
104938: PPUSH
104939: CALL_OW 296
104943: PUSH
104944: LD_INT 10
104946: LESS
104947: PUSH
104948: LD_VAR 0 19
104952: PPUSH
104953: CALL_OW 461
104957: PUSH
104958: LD_INT 7
104960: NONEQUAL
104961: AND
104962: IFFALSE 104966
// continue ;
104964: GO 104281
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
104966: LD_ADDR_VAR 0 18
104970: PUSH
104971: LD_VAR 0 18
104975: PPUSH
104976: LD_VAR 0 18
104980: PUSH
104981: LD_INT 1
104983: PLUS
104984: PPUSH
104985: LD_VAR 0 5
104989: PPUSH
104990: CALL_OW 1
104994: ST_TO_ADDR
// ComExitBuilding ( i ) ;
104995: LD_VAR 0 5
104999: PPUSH
105000: CALL_OW 122
// end ; if sold_defenders then
105004: LD_VAR 0 18
105008: IFFALSE 105068
// if i in sold_defenders then
105010: LD_VAR 0 5
105014: PUSH
105015: LD_VAR 0 18
105019: IN
105020: IFFALSE 105068
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
105022: LD_VAR 0 5
105026: PPUSH
105027: CALL_OW 314
105031: NOT
105032: PUSH
105033: LD_VAR 0 5
105037: PPUSH
105038: LD_VAR 0 14
105042: PPUSH
105043: CALL_OW 296
105047: PUSH
105048: LD_INT 30
105050: LESS
105051: AND
105052: IFFALSE 105068
// ComAttackUnit ( i , e ) ;
105054: LD_VAR 0 5
105058: PPUSH
105059: LD_VAR 0 14
105063: PPUSH
105064: CALL_OW 115
// end ; end ; end ;
105068: GO 105071
105070: POP
// if IsDead ( i ) then
105071: LD_VAR 0 5
105075: PPUSH
105076: CALL_OW 301
105080: IFFALSE 105098
// defenders := defenders diff i ;
105082: LD_ADDR_VAR 0 2
105086: PUSH
105087: LD_VAR 0 2
105091: PUSH
105092: LD_VAR 0 5
105096: DIFF
105097: ST_TO_ADDR
// end ;
105098: GO 104281
105100: POP
105101: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
105102: LD_VAR 0 3
105106: NOT
105107: PUSH
105108: LD_VAR 0 2
105112: NOT
105113: OR
105114: PUSH
105115: LD_EXP 87
105119: PUSH
105120: LD_VAR 0 1
105124: ARRAY
105125: NOT
105126: OR
105127: IFFALSE 104185
// MC_Reset ( base , 18 ) ;
105129: LD_VAR 0 1
105133: PPUSH
105134: LD_INT 18
105136: PPUSH
105137: CALL 24698 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
105141: LD_ADDR_VAR 0 2
105145: PUSH
105146: LD_VAR 0 2
105150: PUSH
105151: LD_VAR 0 2
105155: PPUSH
105156: LD_INT 2
105158: PUSH
105159: LD_INT 25
105161: PUSH
105162: LD_INT 1
105164: PUSH
105165: EMPTY
105166: LIST
105167: LIST
105168: PUSH
105169: LD_INT 25
105171: PUSH
105172: LD_INT 5
105174: PUSH
105175: EMPTY
105176: LIST
105177: LIST
105178: PUSH
105179: LD_INT 25
105181: PUSH
105182: LD_INT 8
105184: PUSH
105185: EMPTY
105186: LIST
105187: LIST
105188: PUSH
105189: LD_INT 25
105191: PUSH
105192: LD_INT 9
105194: PUSH
105195: EMPTY
105196: LIST
105197: LIST
105198: PUSH
105199: EMPTY
105200: LIST
105201: LIST
105202: LIST
105203: LIST
105204: LIST
105205: PPUSH
105206: CALL_OW 72
105210: DIFF
105211: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
105212: LD_VAR 0 3
105216: NOT
105217: PUSH
105218: LD_VAR 0 2
105222: PPUSH
105223: LD_INT 21
105225: PUSH
105226: LD_INT 2
105228: PUSH
105229: EMPTY
105230: LIST
105231: LIST
105232: PPUSH
105233: CALL_OW 72
105237: AND
105238: IFFALSE 105576
// begin tmp := FilterByTag ( defenders , 19 ) ;
105240: LD_ADDR_VAR 0 12
105244: PUSH
105245: LD_VAR 0 2
105249: PPUSH
105250: LD_INT 19
105252: PPUSH
105253: CALL 84150 0 2
105257: ST_TO_ADDR
// if tmp then
105258: LD_VAR 0 12
105262: IFFALSE 105332
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
105264: LD_ADDR_VAR 0 12
105268: PUSH
105269: LD_VAR 0 12
105273: PPUSH
105274: LD_INT 25
105276: PUSH
105277: LD_INT 3
105279: PUSH
105280: EMPTY
105281: LIST
105282: LIST
105283: PPUSH
105284: CALL_OW 72
105288: ST_TO_ADDR
// if tmp then
105289: LD_VAR 0 12
105293: IFFALSE 105332
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
105295: LD_ADDR_EXP 99
105299: PUSH
105300: LD_EXP 99
105304: PPUSH
105305: LD_VAR 0 1
105309: PPUSH
105310: LD_EXP 99
105314: PUSH
105315: LD_VAR 0 1
105319: ARRAY
105320: PUSH
105321: LD_VAR 0 12
105325: UNION
105326: PPUSH
105327: CALL_OW 1
105331: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
105332: LD_VAR 0 1
105336: PPUSH
105337: LD_INT 19
105339: PPUSH
105340: CALL 24698 0 2
// repeat wait ( 0 0$1 ) ;
105344: LD_INT 35
105346: PPUSH
105347: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
105351: LD_EXP 87
105355: PUSH
105356: LD_VAR 0 1
105360: ARRAY
105361: NOT
105362: PUSH
105363: LD_EXP 87
105367: PUSH
105368: LD_VAR 0 1
105372: ARRAY
105373: PUSH
105374: EMPTY
105375: EQUAL
105376: OR
105377: IFFALSE 105414
// begin for i in defenders do
105379: LD_ADDR_VAR 0 5
105383: PUSH
105384: LD_VAR 0 2
105388: PUSH
105389: FOR_IN
105390: IFFALSE 105403
// ComStop ( i ) ;
105392: LD_VAR 0 5
105396: PPUSH
105397: CALL_OW 141
105401: GO 105389
105403: POP
105404: POP
// defenders := [ ] ;
105405: LD_ADDR_VAR 0 2
105409: PUSH
105410: EMPTY
105411: ST_TO_ADDR
// exit ;
105412: GO 105600
// end ; for i in defenders do
105414: LD_ADDR_VAR 0 5
105418: PUSH
105419: LD_VAR 0 2
105423: PUSH
105424: FOR_IN
105425: IFFALSE 105514
// begin if not IsInArea ( i , mc_parking [ base ] ) then
105427: LD_VAR 0 5
105431: PPUSH
105432: LD_EXP 111
105436: PUSH
105437: LD_VAR 0 1
105441: ARRAY
105442: PPUSH
105443: CALL_OW 308
105447: NOT
105448: IFFALSE 105472
// ComMoveToArea ( i , mc_parking [ base ] ) else
105450: LD_VAR 0 5
105454: PPUSH
105455: LD_EXP 111
105459: PUSH
105460: LD_VAR 0 1
105464: ARRAY
105465: PPUSH
105466: CALL_OW 113
105470: GO 105512
// if GetControl ( i ) = control_manual then
105472: LD_VAR 0 5
105476: PPUSH
105477: CALL_OW 263
105481: PUSH
105482: LD_INT 1
105484: EQUAL
105485: IFFALSE 105512
// if IsDrivenBy ( i ) then
105487: LD_VAR 0 5
105491: PPUSH
105492: CALL_OW 311
105496: IFFALSE 105512
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
105498: LD_VAR 0 5
105502: PPUSH
105503: CALL_OW 311
105507: PPUSH
105508: CALL_OW 121
// end ;
105512: GO 105424
105514: POP
105515: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
105516: LD_VAR 0 2
105520: PPUSH
105521: LD_INT 95
105523: PUSH
105524: LD_EXP 111
105528: PUSH
105529: LD_VAR 0 1
105533: ARRAY
105534: PUSH
105535: EMPTY
105536: LIST
105537: LIST
105538: PPUSH
105539: CALL_OW 72
105543: PUSH
105544: LD_VAR 0 2
105548: EQUAL
105549: PUSH
105550: LD_EXP 110
105554: PUSH
105555: LD_VAR 0 1
105559: ARRAY
105560: OR
105561: PUSH
105562: LD_EXP 87
105566: PUSH
105567: LD_VAR 0 1
105571: ARRAY
105572: NOT
105573: OR
105574: IFFALSE 105344
// end ; MC_Reset ( base , 19 ) ;
105576: LD_VAR 0 1
105580: PPUSH
105581: LD_INT 19
105583: PPUSH
105584: CALL 24698 0 2
// MC_Reset ( base , 20 ) ;
105588: LD_VAR 0 1
105592: PPUSH
105593: LD_INT 20
105595: PPUSH
105596: CALL 24698 0 2
// end ;
105600: LD_VAR 0 4
105604: RET
